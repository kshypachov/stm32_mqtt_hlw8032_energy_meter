
stm32_mqtt_hlw8032_energy_meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000214dc  080101a0  080101a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003608  08031680  08031680  00031680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08034c88  08034c88  000402f8  2**0
                  CONTENTS
  4 .ARM          00000008  08034c88  08034c88  00034c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08034c90  08034c90  000402f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08034c90  08034c90  00034c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08034c94  08034c94  00034c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  08034c98  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d7f8  200002f8  08034f90  000402f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000daf0  08034f90  0004daf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000402f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040328  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ef73  00000000  00000000  0004036b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007b19  00000000  00000000  0006f2de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002aa8  00000000  00000000  00076df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002263  00000000  00000000  000798a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f9aa  00000000  00000000  0007bb03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033089  00000000  00000000  0009b4ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aa21a  00000000  00000000  000ce536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000ca5c  00000000  00000000  00178750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001851ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101a0 <__do_global_dtors_aux>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	4c05      	ldr	r4, [pc, #20]	; (80101b8 <__do_global_dtors_aux+0x18>)
 80101a4:	7823      	ldrb	r3, [r4, #0]
 80101a6:	b933      	cbnz	r3, 80101b6 <__do_global_dtors_aux+0x16>
 80101a8:	4b04      	ldr	r3, [pc, #16]	; (80101bc <__do_global_dtors_aux+0x1c>)
 80101aa:	b113      	cbz	r3, 80101b2 <__do_global_dtors_aux+0x12>
 80101ac:	4804      	ldr	r0, [pc, #16]	; (80101c0 <__do_global_dtors_aux+0x20>)
 80101ae:	f3af 8000 	nop.w
 80101b2:	2301      	movs	r3, #1
 80101b4:	7023      	strb	r3, [r4, #0]
 80101b6:	bd10      	pop	{r4, pc}
 80101b8:	200002f8 	.word	0x200002f8
 80101bc:	00000000 	.word	0x00000000
 80101c0:	08031664 	.word	0x08031664

080101c4 <frame_dummy>:
 80101c4:	b508      	push	{r3, lr}
 80101c6:	4b03      	ldr	r3, [pc, #12]	; (80101d4 <frame_dummy+0x10>)
 80101c8:	b11b      	cbz	r3, 80101d2 <frame_dummy+0xe>
 80101ca:	4903      	ldr	r1, [pc, #12]	; (80101d8 <frame_dummy+0x14>)
 80101cc:	4803      	ldr	r0, [pc, #12]	; (80101dc <frame_dummy+0x18>)
 80101ce:	f3af 8000 	nop.w
 80101d2:	bd08      	pop	{r3, pc}
 80101d4:	00000000 	.word	0x00000000
 80101d8:	200002fc 	.word	0x200002fc
 80101dc:	08031664 	.word	0x08031664

080101e0 <strcmp>:
 80101e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101e8:	2a01      	cmp	r2, #1
 80101ea:	bf28      	it	cs
 80101ec:	429a      	cmpcs	r2, r3
 80101ee:	d0f7      	beq.n	80101e0 <strcmp>
 80101f0:	1ad0      	subs	r0, r2, r3
 80101f2:	4770      	bx	lr
	...

08010200 <memchr>:
 8010200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8010204:	2a10      	cmp	r2, #16
 8010206:	db2b      	blt.n	8010260 <memchr+0x60>
 8010208:	f010 0f07 	tst.w	r0, #7
 801020c:	d008      	beq.n	8010220 <memchr+0x20>
 801020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010212:	3a01      	subs	r2, #1
 8010214:	428b      	cmp	r3, r1
 8010216:	d02d      	beq.n	8010274 <memchr+0x74>
 8010218:	f010 0f07 	tst.w	r0, #7
 801021c:	b342      	cbz	r2, 8010270 <memchr+0x70>
 801021e:	d1f6      	bne.n	801020e <memchr+0xe>
 8010220:	b4f0      	push	{r4, r5, r6, r7}
 8010222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801022a:	f022 0407 	bic.w	r4, r2, #7
 801022e:	f07f 0700 	mvns.w	r7, #0
 8010232:	2300      	movs	r3, #0
 8010234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010238:	3c08      	subs	r4, #8
 801023a:	ea85 0501 	eor.w	r5, r5, r1
 801023e:	ea86 0601 	eor.w	r6, r6, r1
 8010242:	fa85 f547 	uadd8	r5, r5, r7
 8010246:	faa3 f587 	sel	r5, r3, r7
 801024a:	fa86 f647 	uadd8	r6, r6, r7
 801024e:	faa5 f687 	sel	r6, r5, r7
 8010252:	b98e      	cbnz	r6, 8010278 <memchr+0x78>
 8010254:	d1ee      	bne.n	8010234 <memchr+0x34>
 8010256:	bcf0      	pop	{r4, r5, r6, r7}
 8010258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801025c:	f002 0207 	and.w	r2, r2, #7
 8010260:	b132      	cbz	r2, 8010270 <memchr+0x70>
 8010262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010266:	3a01      	subs	r2, #1
 8010268:	ea83 0301 	eor.w	r3, r3, r1
 801026c:	b113      	cbz	r3, 8010274 <memchr+0x74>
 801026e:	d1f8      	bne.n	8010262 <memchr+0x62>
 8010270:	2000      	movs	r0, #0
 8010272:	4770      	bx	lr
 8010274:	3801      	subs	r0, #1
 8010276:	4770      	bx	lr
 8010278:	2d00      	cmp	r5, #0
 801027a:	bf06      	itte	eq
 801027c:	4635      	moveq	r5, r6
 801027e:	3803      	subeq	r0, #3
 8010280:	3807      	subne	r0, #7
 8010282:	f015 0f01 	tst.w	r5, #1
 8010286:	d107      	bne.n	8010298 <memchr+0x98>
 8010288:	3001      	adds	r0, #1
 801028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801028e:	bf02      	ittt	eq
 8010290:	3001      	addeq	r0, #1
 8010292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8010296:	3001      	addeq	r0, #1
 8010298:	bcf0      	pop	{r4, r5, r6, r7}
 801029a:	3801      	subs	r0, #1
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop

080102a0 <strlen>:
 80102a0:	4603      	mov	r3, r0
 80102a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102a6:	2a00      	cmp	r2, #0
 80102a8:	d1fb      	bne.n	80102a2 <strlen+0x2>
 80102aa:	1a18      	subs	r0, r3, r0
 80102ac:	3801      	subs	r0, #1
 80102ae:	4770      	bx	lr

080102b0 <__aeabi_drsub>:
 80102b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80102b4:	e002      	b.n	80102bc <__adddf3>
 80102b6:	bf00      	nop

080102b8 <__aeabi_dsub>:
 80102b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080102bc <__adddf3>:
 80102bc:	b530      	push	{r4, r5, lr}
 80102be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80102c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80102c6:	ea94 0f05 	teq	r4, r5
 80102ca:	bf08      	it	eq
 80102cc:	ea90 0f02 	teqeq	r0, r2
 80102d0:	bf1f      	itttt	ne
 80102d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80102d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80102da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80102de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102e2:	f000 80e2 	beq.w	80104aa <__adddf3+0x1ee>
 80102e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80102ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80102ee:	bfb8      	it	lt
 80102f0:	426d      	neglt	r5, r5
 80102f2:	dd0c      	ble.n	801030e <__adddf3+0x52>
 80102f4:	442c      	add	r4, r5
 80102f6:	ea80 0202 	eor.w	r2, r0, r2
 80102fa:	ea81 0303 	eor.w	r3, r1, r3
 80102fe:	ea82 0000 	eor.w	r0, r2, r0
 8010302:	ea83 0101 	eor.w	r1, r3, r1
 8010306:	ea80 0202 	eor.w	r2, r0, r2
 801030a:	ea81 0303 	eor.w	r3, r1, r3
 801030e:	2d36      	cmp	r5, #54	; 0x36
 8010310:	bf88      	it	hi
 8010312:	bd30      	pophi	{r4, r5, pc}
 8010314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8010318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8010320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010324:	d002      	beq.n	801032c <__adddf3+0x70>
 8010326:	4240      	negs	r0, r0
 8010328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8010330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010338:	d002      	beq.n	8010340 <__adddf3+0x84>
 801033a:	4252      	negs	r2, r2
 801033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010340:	ea94 0f05 	teq	r4, r5
 8010344:	f000 80a7 	beq.w	8010496 <__adddf3+0x1da>
 8010348:	f1a4 0401 	sub.w	r4, r4, #1
 801034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010350:	db0d      	blt.n	801036e <__adddf3+0xb2>
 8010352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010356:	fa22 f205 	lsr.w	r2, r2, r5
 801035a:	1880      	adds	r0, r0, r2
 801035c:	f141 0100 	adc.w	r1, r1, #0
 8010360:	fa03 f20e 	lsl.w	r2, r3, lr
 8010364:	1880      	adds	r0, r0, r2
 8010366:	fa43 f305 	asr.w	r3, r3, r5
 801036a:	4159      	adcs	r1, r3
 801036c:	e00e      	b.n	801038c <__adddf3+0xd0>
 801036e:	f1a5 0520 	sub.w	r5, r5, #32
 8010372:	f10e 0e20 	add.w	lr, lr, #32
 8010376:	2a01      	cmp	r2, #1
 8010378:	fa03 fc0e 	lsl.w	ip, r3, lr
 801037c:	bf28      	it	cs
 801037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010382:	fa43 f305 	asr.w	r3, r3, r5
 8010386:	18c0      	adds	r0, r0, r3
 8010388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010390:	d507      	bpl.n	80103a2 <__adddf3+0xe6>
 8010392:	f04f 0e00 	mov.w	lr, #0
 8010396:	f1dc 0c00 	rsbs	ip, ip, #0
 801039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80103a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80103a6:	d31b      	bcc.n	80103e0 <__adddf3+0x124>
 80103a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80103ac:	d30c      	bcc.n	80103c8 <__adddf3+0x10c>
 80103ae:	0849      	lsrs	r1, r1, #1
 80103b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80103b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80103b8:	f104 0401 	add.w	r4, r4, #1
 80103bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80103c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80103c4:	f080 809a 	bcs.w	80104fc <__adddf3+0x240>
 80103c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80103cc:	bf08      	it	eq
 80103ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80103d2:	f150 0000 	adcs.w	r0, r0, #0
 80103d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80103da:	ea41 0105 	orr.w	r1, r1, r5
 80103de:	bd30      	pop	{r4, r5, pc}
 80103e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80103e4:	4140      	adcs	r0, r0
 80103e6:	eb41 0101 	adc.w	r1, r1, r1
 80103ea:	3c01      	subs	r4, #1
 80103ec:	bf28      	it	cs
 80103ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80103f2:	d2e9      	bcs.n	80103c8 <__adddf3+0x10c>
 80103f4:	f091 0f00 	teq	r1, #0
 80103f8:	bf04      	itt	eq
 80103fa:	4601      	moveq	r1, r0
 80103fc:	2000      	moveq	r0, #0
 80103fe:	fab1 f381 	clz	r3, r1
 8010402:	bf08      	it	eq
 8010404:	3320      	addeq	r3, #32
 8010406:	f1a3 030b 	sub.w	r3, r3, #11
 801040a:	f1b3 0220 	subs.w	r2, r3, #32
 801040e:	da0c      	bge.n	801042a <__adddf3+0x16e>
 8010410:	320c      	adds	r2, #12
 8010412:	dd08      	ble.n	8010426 <__adddf3+0x16a>
 8010414:	f102 0c14 	add.w	ip, r2, #20
 8010418:	f1c2 020c 	rsb	r2, r2, #12
 801041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010420:	fa21 f102 	lsr.w	r1, r1, r2
 8010424:	e00c      	b.n	8010440 <__adddf3+0x184>
 8010426:	f102 0214 	add.w	r2, r2, #20
 801042a:	bfd8      	it	le
 801042c:	f1c2 0c20 	rsble	ip, r2, #32
 8010430:	fa01 f102 	lsl.w	r1, r1, r2
 8010434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010438:	bfdc      	itt	le
 801043a:	ea41 010c 	orrle.w	r1, r1, ip
 801043e:	4090      	lslle	r0, r2
 8010440:	1ae4      	subs	r4, r4, r3
 8010442:	bfa2      	ittt	ge
 8010444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010448:	4329      	orrge	r1, r5
 801044a:	bd30      	popge	{r4, r5, pc}
 801044c:	ea6f 0404 	mvn.w	r4, r4
 8010450:	3c1f      	subs	r4, #31
 8010452:	da1c      	bge.n	801048e <__adddf3+0x1d2>
 8010454:	340c      	adds	r4, #12
 8010456:	dc0e      	bgt.n	8010476 <__adddf3+0x1ba>
 8010458:	f104 0414 	add.w	r4, r4, #20
 801045c:	f1c4 0220 	rsb	r2, r4, #32
 8010460:	fa20 f004 	lsr.w	r0, r0, r4
 8010464:	fa01 f302 	lsl.w	r3, r1, r2
 8010468:	ea40 0003 	orr.w	r0, r0, r3
 801046c:	fa21 f304 	lsr.w	r3, r1, r4
 8010470:	ea45 0103 	orr.w	r1, r5, r3
 8010474:	bd30      	pop	{r4, r5, pc}
 8010476:	f1c4 040c 	rsb	r4, r4, #12
 801047a:	f1c4 0220 	rsb	r2, r4, #32
 801047e:	fa20 f002 	lsr.w	r0, r0, r2
 8010482:	fa01 f304 	lsl.w	r3, r1, r4
 8010486:	ea40 0003 	orr.w	r0, r0, r3
 801048a:	4629      	mov	r1, r5
 801048c:	bd30      	pop	{r4, r5, pc}
 801048e:	fa21 f004 	lsr.w	r0, r1, r4
 8010492:	4629      	mov	r1, r5
 8010494:	bd30      	pop	{r4, r5, pc}
 8010496:	f094 0f00 	teq	r4, #0
 801049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 801049e:	bf06      	itte	eq
 80104a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80104a4:	3401      	addeq	r4, #1
 80104a6:	3d01      	subne	r5, #1
 80104a8:	e74e      	b.n	8010348 <__adddf3+0x8c>
 80104aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80104ae:	bf18      	it	ne
 80104b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80104b4:	d029      	beq.n	801050a <__adddf3+0x24e>
 80104b6:	ea94 0f05 	teq	r4, r5
 80104ba:	bf08      	it	eq
 80104bc:	ea90 0f02 	teqeq	r0, r2
 80104c0:	d005      	beq.n	80104ce <__adddf3+0x212>
 80104c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80104c6:	bf04      	itt	eq
 80104c8:	4619      	moveq	r1, r3
 80104ca:	4610      	moveq	r0, r2
 80104cc:	bd30      	pop	{r4, r5, pc}
 80104ce:	ea91 0f03 	teq	r1, r3
 80104d2:	bf1e      	ittt	ne
 80104d4:	2100      	movne	r1, #0
 80104d6:	2000      	movne	r0, #0
 80104d8:	bd30      	popne	{r4, r5, pc}
 80104da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80104de:	d105      	bne.n	80104ec <__adddf3+0x230>
 80104e0:	0040      	lsls	r0, r0, #1
 80104e2:	4149      	adcs	r1, r1
 80104e4:	bf28      	it	cs
 80104e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80104ea:	bd30      	pop	{r4, r5, pc}
 80104ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80104f0:	bf3c      	itt	cc
 80104f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80104f6:	bd30      	popcc	{r4, r5, pc}
 80104f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80104fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8010500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010504:	f04f 0000 	mov.w	r0, #0
 8010508:	bd30      	pop	{r4, r5, pc}
 801050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801050e:	bf1a      	itte	ne
 8010510:	4619      	movne	r1, r3
 8010512:	4610      	movne	r0, r2
 8010514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010518:	bf1c      	itt	ne
 801051a:	460b      	movne	r3, r1
 801051c:	4602      	movne	r2, r0
 801051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010522:	bf06      	itte	eq
 8010524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010528:	ea91 0f03 	teqeq	r1, r3
 801052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8010530:	bd30      	pop	{r4, r5, pc}
 8010532:	bf00      	nop

08010534 <__aeabi_ui2d>:
 8010534:	f090 0f00 	teq	r0, #0
 8010538:	bf04      	itt	eq
 801053a:	2100      	moveq	r1, #0
 801053c:	4770      	bxeq	lr
 801053e:	b530      	push	{r4, r5, lr}
 8010540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010548:	f04f 0500 	mov.w	r5, #0
 801054c:	f04f 0100 	mov.w	r1, #0
 8010550:	e750      	b.n	80103f4 <__adddf3+0x138>
 8010552:	bf00      	nop

08010554 <__aeabi_i2d>:
 8010554:	f090 0f00 	teq	r0, #0
 8010558:	bf04      	itt	eq
 801055a:	2100      	moveq	r1, #0
 801055c:	4770      	bxeq	lr
 801055e:	b530      	push	{r4, r5, lr}
 8010560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 801056c:	bf48      	it	mi
 801056e:	4240      	negmi	r0, r0
 8010570:	f04f 0100 	mov.w	r1, #0
 8010574:	e73e      	b.n	80103f4 <__adddf3+0x138>
 8010576:	bf00      	nop

08010578 <__aeabi_f2d>:
 8010578:	0042      	lsls	r2, r0, #1
 801057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010586:	bf1f      	itttt	ne
 8010588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 801058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8010590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8010594:	4770      	bxne	lr
 8010596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 801059a:	bf08      	it	eq
 801059c:	4770      	bxeq	lr
 801059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80105a2:	bf04      	itt	eq
 80105a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80105a8:	4770      	bxeq	lr
 80105aa:	b530      	push	{r4, r5, lr}
 80105ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80105b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80105b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80105b8:	e71c      	b.n	80103f4 <__adddf3+0x138>
 80105ba:	bf00      	nop

080105bc <__aeabi_ul2d>:
 80105bc:	ea50 0201 	orrs.w	r2, r0, r1
 80105c0:	bf08      	it	eq
 80105c2:	4770      	bxeq	lr
 80105c4:	b530      	push	{r4, r5, lr}
 80105c6:	f04f 0500 	mov.w	r5, #0
 80105ca:	e00a      	b.n	80105e2 <__aeabi_l2d+0x16>

080105cc <__aeabi_l2d>:
 80105cc:	ea50 0201 	orrs.w	r2, r0, r1
 80105d0:	bf08      	it	eq
 80105d2:	4770      	bxeq	lr
 80105d4:	b530      	push	{r4, r5, lr}
 80105d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80105da:	d502      	bpl.n	80105e2 <__aeabi_l2d+0x16>
 80105dc:	4240      	negs	r0, r0
 80105de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80105e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80105e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80105ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80105ee:	f43f aed8 	beq.w	80103a2 <__adddf3+0xe6>
 80105f2:	f04f 0203 	mov.w	r2, #3
 80105f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105fa:	bf18      	it	ne
 80105fc:	3203      	addne	r2, #3
 80105fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010602:	bf18      	it	ne
 8010604:	3203      	addne	r2, #3
 8010606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801060a:	f1c2 0320 	rsb	r3, r2, #32
 801060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010612:	fa20 f002 	lsr.w	r0, r0, r2
 8010616:	fa01 fe03 	lsl.w	lr, r1, r3
 801061a:	ea40 000e 	orr.w	r0, r0, lr
 801061e:	fa21 f102 	lsr.w	r1, r1, r2
 8010622:	4414      	add	r4, r2
 8010624:	e6bd      	b.n	80103a2 <__adddf3+0xe6>
 8010626:	bf00      	nop

08010628 <__aeabi_dmul>:
 8010628:	b570      	push	{r4, r5, r6, lr}
 801062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010636:	bf1d      	ittte	ne
 8010638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801063c:	ea94 0f0c 	teqne	r4, ip
 8010640:	ea95 0f0c 	teqne	r5, ip
 8010644:	f000 f8de 	bleq	8010804 <__aeabi_dmul+0x1dc>
 8010648:	442c      	add	r4, r5
 801064a:	ea81 0603 	eor.w	r6, r1, r3
 801064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801065a:	bf18      	it	ne
 801065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010668:	d038      	beq.n	80106dc <__aeabi_dmul+0xb4>
 801066a:	fba0 ce02 	umull	ip, lr, r0, r2
 801066e:	f04f 0500 	mov.w	r5, #0
 8010672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 801067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801067e:	f04f 0600 	mov.w	r6, #0
 8010682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010686:	f09c 0f00 	teq	ip, #0
 801068a:	bf18      	it	ne
 801068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8010694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8010698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 801069c:	d204      	bcs.n	80106a8 <__aeabi_dmul+0x80>
 801069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80106a2:	416d      	adcs	r5, r5
 80106a4:	eb46 0606 	adc.w	r6, r6, r6
 80106a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80106ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80106b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80106b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80106b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80106bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80106c0:	bf88      	it	hi
 80106c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80106c6:	d81e      	bhi.n	8010706 <__aeabi_dmul+0xde>
 80106c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80106cc:	bf08      	it	eq
 80106ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80106d2:	f150 0000 	adcs.w	r0, r0, #0
 80106d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80106da:	bd70      	pop	{r4, r5, r6, pc}
 80106dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80106e0:	ea46 0101 	orr.w	r1, r6, r1
 80106e4:	ea40 0002 	orr.w	r0, r0, r2
 80106e8:	ea81 0103 	eor.w	r1, r1, r3
 80106ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80106f0:	bfc2      	ittt	gt
 80106f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80106f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80106fa:	bd70      	popgt	{r4, r5, r6, pc}
 80106fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010700:	f04f 0e00 	mov.w	lr, #0
 8010704:	3c01      	subs	r4, #1
 8010706:	f300 80ab 	bgt.w	8010860 <__aeabi_dmul+0x238>
 801070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 801070e:	bfde      	ittt	le
 8010710:	2000      	movle	r0, #0
 8010712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8010716:	bd70      	pople	{r4, r5, r6, pc}
 8010718:	f1c4 0400 	rsb	r4, r4, #0
 801071c:	3c20      	subs	r4, #32
 801071e:	da35      	bge.n	801078c <__aeabi_dmul+0x164>
 8010720:	340c      	adds	r4, #12
 8010722:	dc1b      	bgt.n	801075c <__aeabi_dmul+0x134>
 8010724:	f104 0414 	add.w	r4, r4, #20
 8010728:	f1c4 0520 	rsb	r5, r4, #32
 801072c:	fa00 f305 	lsl.w	r3, r0, r5
 8010730:	fa20 f004 	lsr.w	r0, r0, r4
 8010734:	fa01 f205 	lsl.w	r2, r1, r5
 8010738:	ea40 0002 	orr.w	r0, r0, r2
 801073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8010740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010748:	fa21 f604 	lsr.w	r6, r1, r4
 801074c:	eb42 0106 	adc.w	r1, r2, r6
 8010750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010754:	bf08      	it	eq
 8010756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	f1c4 040c 	rsb	r4, r4, #12
 8010760:	f1c4 0520 	rsb	r5, r4, #32
 8010764:	fa00 f304 	lsl.w	r3, r0, r4
 8010768:	fa20 f005 	lsr.w	r0, r0, r5
 801076c:	fa01 f204 	lsl.w	r2, r1, r4
 8010770:	ea40 0002 	orr.w	r0, r0, r2
 8010774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801077c:	f141 0100 	adc.w	r1, r1, #0
 8010780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010784:	bf08      	it	eq
 8010786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801078a:	bd70      	pop	{r4, r5, r6, pc}
 801078c:	f1c4 0520 	rsb	r5, r4, #32
 8010790:	fa00 f205 	lsl.w	r2, r0, r5
 8010794:	ea4e 0e02 	orr.w	lr, lr, r2
 8010798:	fa20 f304 	lsr.w	r3, r0, r4
 801079c:	fa01 f205 	lsl.w	r2, r1, r5
 80107a0:	ea43 0302 	orr.w	r3, r3, r2
 80107a4:	fa21 f004 	lsr.w	r0, r1, r4
 80107a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80107ac:	fa21 f204 	lsr.w	r2, r1, r4
 80107b0:	ea20 0002 	bic.w	r0, r0, r2
 80107b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80107b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80107bc:	bf08      	it	eq
 80107be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80107c2:	bd70      	pop	{r4, r5, r6, pc}
 80107c4:	f094 0f00 	teq	r4, #0
 80107c8:	d10f      	bne.n	80107ea <__aeabi_dmul+0x1c2>
 80107ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80107ce:	0040      	lsls	r0, r0, #1
 80107d0:	eb41 0101 	adc.w	r1, r1, r1
 80107d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80107d8:	bf08      	it	eq
 80107da:	3c01      	subeq	r4, #1
 80107dc:	d0f7      	beq.n	80107ce <__aeabi_dmul+0x1a6>
 80107de:	ea41 0106 	orr.w	r1, r1, r6
 80107e2:	f095 0f00 	teq	r5, #0
 80107e6:	bf18      	it	ne
 80107e8:	4770      	bxne	lr
 80107ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80107ee:	0052      	lsls	r2, r2, #1
 80107f0:	eb43 0303 	adc.w	r3, r3, r3
 80107f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80107f8:	bf08      	it	eq
 80107fa:	3d01      	subeq	r5, #1
 80107fc:	d0f7      	beq.n	80107ee <__aeabi_dmul+0x1c6>
 80107fe:	ea43 0306 	orr.w	r3, r3, r6
 8010802:	4770      	bx	lr
 8010804:	ea94 0f0c 	teq	r4, ip
 8010808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801080c:	bf18      	it	ne
 801080e:	ea95 0f0c 	teqne	r5, ip
 8010812:	d00c      	beq.n	801082e <__aeabi_dmul+0x206>
 8010814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010818:	bf18      	it	ne
 801081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801081e:	d1d1      	bne.n	80107c4 <__aeabi_dmul+0x19c>
 8010820:	ea81 0103 	eor.w	r1, r1, r3
 8010824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010828:	f04f 0000 	mov.w	r0, #0
 801082c:	bd70      	pop	{r4, r5, r6, pc}
 801082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010832:	bf06      	itte	eq
 8010834:	4610      	moveq	r0, r2
 8010836:	4619      	moveq	r1, r3
 8010838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801083c:	d019      	beq.n	8010872 <__aeabi_dmul+0x24a>
 801083e:	ea94 0f0c 	teq	r4, ip
 8010842:	d102      	bne.n	801084a <__aeabi_dmul+0x222>
 8010844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010848:	d113      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801084a:	ea95 0f0c 	teq	r5, ip
 801084e:	d105      	bne.n	801085c <__aeabi_dmul+0x234>
 8010850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010854:	bf1c      	itt	ne
 8010856:	4610      	movne	r0, r2
 8010858:	4619      	movne	r1, r3
 801085a:	d10a      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801085c:	ea81 0103 	eor.w	r1, r1, r3
 8010860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801086c:	f04f 0000 	mov.w	r0, #0
 8010870:	bd70      	pop	{r4, r5, r6, pc}
 8010872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 801087a:	bd70      	pop	{r4, r5, r6, pc}

0801087c <__aeabi_ddiv>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8010882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801088a:	bf1d      	ittte	ne
 801088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010890:	ea94 0f0c 	teqne	r4, ip
 8010894:	ea95 0f0c 	teqne	r5, ip
 8010898:	f000 f8a7 	bleq	80109ea <__aeabi_ddiv+0x16e>
 801089c:	eba4 0405 	sub.w	r4, r4, r5
 80108a0:	ea81 0e03 	eor.w	lr, r1, r3
 80108a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80108a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80108ac:	f000 8088 	beq.w	80109c0 <__aeabi_ddiv+0x144>
 80108b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80108b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80108b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80108bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80108c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80108c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80108c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80108cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80108d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80108d4:	429d      	cmp	r5, r3
 80108d6:	bf08      	it	eq
 80108d8:	4296      	cmpeq	r6, r2
 80108da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80108de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80108e2:	d202      	bcs.n	80108ea <__aeabi_ddiv+0x6e>
 80108e4:	085b      	lsrs	r3, r3, #1
 80108e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80108ea:	1ab6      	subs	r6, r6, r2
 80108ec:	eb65 0503 	sbc.w	r5, r5, r3
 80108f0:	085b      	lsrs	r3, r3, #1
 80108f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80108fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80108fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8010902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010906:	bf22      	ittt	cs
 8010908:	1ab6      	subcs	r6, r6, r2
 801090a:	4675      	movcs	r5, lr
 801090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8010910:	085b      	lsrs	r3, r3, #1
 8010912:	ea4f 0232 	mov.w	r2, r2, rrx
 8010916:	ebb6 0e02 	subs.w	lr, r6, r2
 801091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801091e:	bf22      	ittt	cs
 8010920:	1ab6      	subcs	r6, r6, r2
 8010922:	4675      	movcs	r5, lr
 8010924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010928:	085b      	lsrs	r3, r3, #1
 801092a:	ea4f 0232 	mov.w	r2, r2, rrx
 801092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010936:	bf22      	ittt	cs
 8010938:	1ab6      	subcs	r6, r6, r2
 801093a:	4675      	movcs	r5, lr
 801093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010940:	085b      	lsrs	r3, r3, #1
 8010942:	ea4f 0232 	mov.w	r2, r2, rrx
 8010946:	ebb6 0e02 	subs.w	lr, r6, r2
 801094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801094e:	bf22      	ittt	cs
 8010950:	1ab6      	subcs	r6, r6, r2
 8010952:	4675      	movcs	r5, lr
 8010954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010958:	ea55 0e06 	orrs.w	lr, r5, r6
 801095c:	d018      	beq.n	8010990 <__aeabi_ddiv+0x114>
 801095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801097a:	d1c0      	bne.n	80108fe <__aeabi_ddiv+0x82>
 801097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010980:	d10b      	bne.n	801099a <__aeabi_ddiv+0x11e>
 8010982:	ea41 0100 	orr.w	r1, r1, r0
 8010986:	f04f 0000 	mov.w	r0, #0
 801098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 801098e:	e7b6      	b.n	80108fe <__aeabi_ddiv+0x82>
 8010990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010994:	bf04      	itt	eq
 8010996:	4301      	orreq	r1, r0
 8010998:	2000      	moveq	r0, #0
 801099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801099e:	bf88      	it	hi
 80109a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80109a4:	f63f aeaf 	bhi.w	8010706 <__aeabi_dmul+0xde>
 80109a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80109ac:	bf04      	itt	eq
 80109ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80109b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80109b6:	f150 0000 	adcs.w	r0, r0, #0
 80109ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80109be:	bd70      	pop	{r4, r5, r6, pc}
 80109c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80109c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80109c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80109cc:	bfc2      	ittt	gt
 80109ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80109d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80109d6:	bd70      	popgt	{r4, r5, r6, pc}
 80109d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80109dc:	f04f 0e00 	mov.w	lr, #0
 80109e0:	3c01      	subs	r4, #1
 80109e2:	e690      	b.n	8010706 <__aeabi_dmul+0xde>
 80109e4:	ea45 0e06 	orr.w	lr, r5, r6
 80109e8:	e68d      	b.n	8010706 <__aeabi_dmul+0xde>
 80109ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80109ee:	ea94 0f0c 	teq	r4, ip
 80109f2:	bf08      	it	eq
 80109f4:	ea95 0f0c 	teqeq	r5, ip
 80109f8:	f43f af3b 	beq.w	8010872 <__aeabi_dmul+0x24a>
 80109fc:	ea94 0f0c 	teq	r4, ip
 8010a00:	d10a      	bne.n	8010a18 <__aeabi_ddiv+0x19c>
 8010a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010a06:	f47f af34 	bne.w	8010872 <__aeabi_dmul+0x24a>
 8010a0a:	ea95 0f0c 	teq	r5, ip
 8010a0e:	f47f af25 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a12:	4610      	mov	r0, r2
 8010a14:	4619      	mov	r1, r3
 8010a16:	e72c      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a18:	ea95 0f0c 	teq	r5, ip
 8010a1c:	d106      	bne.n	8010a2c <__aeabi_ddiv+0x1b0>
 8010a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010a22:	f43f aefd 	beq.w	8010820 <__aeabi_dmul+0x1f8>
 8010a26:	4610      	mov	r0, r2
 8010a28:	4619      	mov	r1, r3
 8010a2a:	e722      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010a30:	bf18      	it	ne
 8010a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010a36:	f47f aec5 	bne.w	80107c4 <__aeabi_dmul+0x19c>
 8010a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010a3e:	f47f af0d 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010a46:	f47f aeeb 	bne.w	8010820 <__aeabi_dmul+0x1f8>
 8010a4a:	e712      	b.n	8010872 <__aeabi_dmul+0x24a>

08010a4c <__gedf2>:
 8010a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8010a50:	e006      	b.n	8010a60 <__cmpdf2+0x4>
 8010a52:	bf00      	nop

08010a54 <__ledf2>:
 8010a54:	f04f 0c01 	mov.w	ip, #1
 8010a58:	e002      	b.n	8010a60 <__cmpdf2+0x4>
 8010a5a:	bf00      	nop

08010a5c <__cmpdf2>:
 8010a5c:	f04f 0c01 	mov.w	ip, #1
 8010a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a70:	bf18      	it	ne
 8010a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8010a76:	d01b      	beq.n	8010ab0 <__cmpdf2+0x54>
 8010a78:	b001      	add	sp, #4
 8010a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010a7e:	bf0c      	ite	eq
 8010a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010a84:	ea91 0f03 	teqne	r1, r3
 8010a88:	bf02      	ittt	eq
 8010a8a:	ea90 0f02 	teqeq	r0, r2
 8010a8e:	2000      	moveq	r0, #0
 8010a90:	4770      	bxeq	lr
 8010a92:	f110 0f00 	cmn.w	r0, #0
 8010a96:	ea91 0f03 	teq	r1, r3
 8010a9a:	bf58      	it	pl
 8010a9c:	4299      	cmppl	r1, r3
 8010a9e:	bf08      	it	eq
 8010aa0:	4290      	cmpeq	r0, r2
 8010aa2:	bf2c      	ite	cs
 8010aa4:	17d8      	asrcs	r0, r3, #31
 8010aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010aaa:	f040 0001 	orr.w	r0, r0, #1
 8010aae:	4770      	bx	lr
 8010ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ab8:	d102      	bne.n	8010ac0 <__cmpdf2+0x64>
 8010aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010abe:	d107      	bne.n	8010ad0 <__cmpdf2+0x74>
 8010ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ac8:	d1d6      	bne.n	8010a78 <__cmpdf2+0x1c>
 8010aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010ace:	d0d3      	beq.n	8010a78 <__cmpdf2+0x1c>
 8010ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop

08010ad8 <__aeabi_cdrcmple>:
 8010ad8:	4684      	mov	ip, r0
 8010ada:	4610      	mov	r0, r2
 8010adc:	4662      	mov	r2, ip
 8010ade:	468c      	mov	ip, r1
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4663      	mov	r3, ip
 8010ae4:	e000      	b.n	8010ae8 <__aeabi_cdcmpeq>
 8010ae6:	bf00      	nop

08010ae8 <__aeabi_cdcmpeq>:
 8010ae8:	b501      	push	{r0, lr}
 8010aea:	f7ff ffb7 	bl	8010a5c <__cmpdf2>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	bf48      	it	mi
 8010af2:	f110 0f00 	cmnmi.w	r0, #0
 8010af6:	bd01      	pop	{r0, pc}

08010af8 <__aeabi_dcmpeq>:
 8010af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010afc:	f7ff fff4 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b00:	bf0c      	ite	eq
 8010b02:	2001      	moveq	r0, #1
 8010b04:	2000      	movne	r0, #0
 8010b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b0a:	bf00      	nop

08010b0c <__aeabi_dcmplt>:
 8010b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b10:	f7ff ffea 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b14:	bf34      	ite	cc
 8010b16:	2001      	movcc	r0, #1
 8010b18:	2000      	movcs	r0, #0
 8010b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b1e:	bf00      	nop

08010b20 <__aeabi_dcmple>:
 8010b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b24:	f7ff ffe0 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b28:	bf94      	ite	ls
 8010b2a:	2001      	movls	r0, #1
 8010b2c:	2000      	movhi	r0, #0
 8010b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b32:	bf00      	nop

08010b34 <__aeabi_dcmpge>:
 8010b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b38:	f7ff ffce 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b3c:	bf94      	ite	ls
 8010b3e:	2001      	movls	r0, #1
 8010b40:	2000      	movhi	r0, #0
 8010b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b46:	bf00      	nop

08010b48 <__aeabi_dcmpgt>:
 8010b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b4c:	f7ff ffc4 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b50:	bf34      	ite	cc
 8010b52:	2001      	movcc	r0, #1
 8010b54:	2000      	movcs	r0, #0
 8010b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b5a:	bf00      	nop

08010b5c <__aeabi_dcmpun>:
 8010b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b64:	d102      	bne.n	8010b6c <__aeabi_dcmpun+0x10>
 8010b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010b6a:	d10a      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b74:	d102      	bne.n	8010b7c <__aeabi_dcmpun+0x20>
 8010b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010b7a:	d102      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b7c:	f04f 0000 	mov.w	r0, #0
 8010b80:	4770      	bx	lr
 8010b82:	f04f 0001 	mov.w	r0, #1
 8010b86:	4770      	bx	lr

08010b88 <__aeabi_d2iz>:
 8010b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8010b90:	d215      	bcs.n	8010bbe <__aeabi_d2iz+0x36>
 8010b92:	d511      	bpl.n	8010bb8 <__aeabi_d2iz+0x30>
 8010b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8010b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010b9c:	d912      	bls.n	8010bc4 <__aeabi_d2iz+0x3c>
 8010b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8010bae:	fa23 f002 	lsr.w	r0, r3, r2
 8010bb2:	bf18      	it	ne
 8010bb4:	4240      	negne	r0, r0
 8010bb6:	4770      	bx	lr
 8010bb8:	f04f 0000 	mov.w	r0, #0
 8010bbc:	4770      	bx	lr
 8010bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010bc2:	d105      	bne.n	8010bd0 <__aeabi_d2iz+0x48>
 8010bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8010bc8:	bf08      	it	eq
 8010bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8010bce:	4770      	bx	lr
 8010bd0:	f04f 0000 	mov.w	r0, #0
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop

08010bd8 <__aeabi_d2uiz>:
 8010bd8:	004a      	lsls	r2, r1, #1
 8010bda:	d211      	bcs.n	8010c00 <__aeabi_d2uiz+0x28>
 8010bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8010be0:	d211      	bcs.n	8010c06 <__aeabi_d2uiz+0x2e>
 8010be2:	d50d      	bpl.n	8010c00 <__aeabi_d2uiz+0x28>
 8010be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8010be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010bec:	d40e      	bmi.n	8010c0c <__aeabi_d2uiz+0x34>
 8010bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8010bfe:	4770      	bx	lr
 8010c00:	f04f 0000 	mov.w	r0, #0
 8010c04:	4770      	bx	lr
 8010c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010c0a:	d102      	bne.n	8010c12 <__aeabi_d2uiz+0x3a>
 8010c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c10:	4770      	bx	lr
 8010c12:	f04f 0000 	mov.w	r0, #0
 8010c16:	4770      	bx	lr

08010c18 <__aeabi_d2f>:
 8010c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8010c20:	bf24      	itt	cs
 8010c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8010c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8010c2a:	d90d      	bls.n	8010c48 <__aeabi_d2f+0x30>
 8010c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8010c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8010c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010c40:	bf08      	it	eq
 8010c42:	f020 0001 	biceq.w	r0, r0, #1
 8010c46:	4770      	bx	lr
 8010c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8010c4c:	d121      	bne.n	8010c92 <__aeabi_d2f+0x7a>
 8010c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8010c52:	bfbc      	itt	lt
 8010c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8010c58:	4770      	bxlt	lr
 8010c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010c62:	f1c2 0218 	rsb	r2, r2, #24
 8010c66:	f1c2 0c20 	rsb	ip, r2, #32
 8010c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8010c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8010c72:	bf18      	it	ne
 8010c74:	f040 0001 	orrne.w	r0, r0, #1
 8010c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010c84:	ea40 000c 	orr.w	r0, r0, ip
 8010c88:	fa23 f302 	lsr.w	r3, r3, r2
 8010c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010c90:	e7cc      	b.n	8010c2c <__aeabi_d2f+0x14>
 8010c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010c96:	d107      	bne.n	8010ca8 <__aeabi_d2f+0x90>
 8010c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010c9c:	bf1e      	ittt	ne
 8010c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8010ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8010ca6:	4770      	bxne	lr
 8010ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8010cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8010cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <__aeabi_uldivmod>:
 8010cb8:	b953      	cbnz	r3, 8010cd0 <__aeabi_uldivmod+0x18>
 8010cba:	b94a      	cbnz	r2, 8010cd0 <__aeabi_uldivmod+0x18>
 8010cbc:	2900      	cmp	r1, #0
 8010cbe:	bf08      	it	eq
 8010cc0:	2800      	cmpeq	r0, #0
 8010cc2:	bf1c      	itt	ne
 8010cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8010cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8010ccc:	f000 b9ba 	b.w	8011044 <__aeabi_idiv0>
 8010cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8010cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010cd8:	f000 f850 	bl	8010d7c <__udivmoddi4>
 8010cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ce4:	b004      	add	sp, #16
 8010ce6:	4770      	bx	lr

08010ce8 <__popcountsi2>:
 8010ce8:	0843      	lsrs	r3, r0, #1
 8010cea:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8010cee:	1ac0      	subs	r0, r0, r3
 8010cf0:	0883      	lsrs	r3, r0, #2
 8010cf2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8010cf6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8010cfa:	4418      	add	r0, r3
 8010cfc:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8010d00:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8010d04:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8010d08:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8010d0c:	0e00      	lsrs	r0, r0, #24
 8010d0e:	4770      	bx	lr

08010d10 <__aeabi_d2lz>:
 8010d10:	b538      	push	{r3, r4, r5, lr}
 8010d12:	2200      	movs	r2, #0
 8010d14:	2300      	movs	r3, #0
 8010d16:	4604      	mov	r4, r0
 8010d18:	460d      	mov	r5, r1
 8010d1a:	f7ff fef7 	bl	8010b0c <__aeabi_dcmplt>
 8010d1e:	b928      	cbnz	r0, 8010d2c <__aeabi_d2lz+0x1c>
 8010d20:	4620      	mov	r0, r4
 8010d22:	4629      	mov	r1, r5
 8010d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d28:	f000 b80a 	b.w	8010d40 <__aeabi_d2ulz>
 8010d2c:	4620      	mov	r0, r4
 8010d2e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8010d32:	f000 f805 	bl	8010d40 <__aeabi_d2ulz>
 8010d36:	4240      	negs	r0, r0
 8010d38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d3c:	bd38      	pop	{r3, r4, r5, pc}
 8010d3e:	bf00      	nop

08010d40 <__aeabi_d2ulz>:
 8010d40:	b5d0      	push	{r4, r6, r7, lr}
 8010d42:	4b0c      	ldr	r3, [pc, #48]	; (8010d74 <__aeabi_d2ulz+0x34>)
 8010d44:	2200      	movs	r2, #0
 8010d46:	4606      	mov	r6, r0
 8010d48:	460f      	mov	r7, r1
 8010d4a:	f7ff fc6d 	bl	8010628 <__aeabi_dmul>
 8010d4e:	f7ff ff43 	bl	8010bd8 <__aeabi_d2uiz>
 8010d52:	4604      	mov	r4, r0
 8010d54:	f7ff fbee 	bl	8010534 <__aeabi_ui2d>
 8010d58:	4b07      	ldr	r3, [pc, #28]	; (8010d78 <__aeabi_d2ulz+0x38>)
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	f7ff fc64 	bl	8010628 <__aeabi_dmul>
 8010d60:	4602      	mov	r2, r0
 8010d62:	460b      	mov	r3, r1
 8010d64:	4630      	mov	r0, r6
 8010d66:	4639      	mov	r1, r7
 8010d68:	f7ff faa6 	bl	80102b8 <__aeabi_dsub>
 8010d6c:	f7ff ff34 	bl	8010bd8 <__aeabi_d2uiz>
 8010d70:	4621      	mov	r1, r4
 8010d72:	bdd0      	pop	{r4, r6, r7, pc}
 8010d74:	3df00000 	.word	0x3df00000
 8010d78:	41f00000 	.word	0x41f00000

08010d7c <__udivmoddi4>:
 8010d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d80:	9e08      	ldr	r6, [sp, #32]
 8010d82:	460d      	mov	r5, r1
 8010d84:	4604      	mov	r4, r0
 8010d86:	460f      	mov	r7, r1
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d14a      	bne.n	8010e22 <__udivmoddi4+0xa6>
 8010d8c:	428a      	cmp	r2, r1
 8010d8e:	4694      	mov	ip, r2
 8010d90:	d965      	bls.n	8010e5e <__udivmoddi4+0xe2>
 8010d92:	fab2 f382 	clz	r3, r2
 8010d96:	b143      	cbz	r3, 8010daa <__udivmoddi4+0x2e>
 8010d98:	fa02 fc03 	lsl.w	ip, r2, r3
 8010d9c:	f1c3 0220 	rsb	r2, r3, #32
 8010da0:	409f      	lsls	r7, r3
 8010da2:	fa20 f202 	lsr.w	r2, r0, r2
 8010da6:	4317      	orrs	r7, r2
 8010da8:	409c      	lsls	r4, r3
 8010daa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8010dae:	fa1f f58c 	uxth.w	r5, ip
 8010db2:	fbb7 f1fe 	udiv	r1, r7, lr
 8010db6:	0c22      	lsrs	r2, r4, #16
 8010db8:	fb0e 7711 	mls	r7, lr, r1, r7
 8010dbc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8010dc0:	fb01 f005 	mul.w	r0, r1, r5
 8010dc4:	4290      	cmp	r0, r2
 8010dc6:	d90a      	bls.n	8010dde <__udivmoddi4+0x62>
 8010dc8:	eb1c 0202 	adds.w	r2, ip, r2
 8010dcc:	f101 37ff 	add.w	r7, r1, #4294967295
 8010dd0:	f080 811c 	bcs.w	801100c <__udivmoddi4+0x290>
 8010dd4:	4290      	cmp	r0, r2
 8010dd6:	f240 8119 	bls.w	801100c <__udivmoddi4+0x290>
 8010dda:	3902      	subs	r1, #2
 8010ddc:	4462      	add	r2, ip
 8010dde:	1a12      	subs	r2, r2, r0
 8010de0:	b2a4      	uxth	r4, r4
 8010de2:	fbb2 f0fe 	udiv	r0, r2, lr
 8010de6:	fb0e 2210 	mls	r2, lr, r0, r2
 8010dea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010dee:	fb00 f505 	mul.w	r5, r0, r5
 8010df2:	42a5      	cmp	r5, r4
 8010df4:	d90a      	bls.n	8010e0c <__udivmoddi4+0x90>
 8010df6:	eb1c 0404 	adds.w	r4, ip, r4
 8010dfa:	f100 32ff 	add.w	r2, r0, #4294967295
 8010dfe:	f080 8107 	bcs.w	8011010 <__udivmoddi4+0x294>
 8010e02:	42a5      	cmp	r5, r4
 8010e04:	f240 8104 	bls.w	8011010 <__udivmoddi4+0x294>
 8010e08:	4464      	add	r4, ip
 8010e0a:	3802      	subs	r0, #2
 8010e0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8010e10:	1b64      	subs	r4, r4, r5
 8010e12:	2100      	movs	r1, #0
 8010e14:	b11e      	cbz	r6, 8010e1e <__udivmoddi4+0xa2>
 8010e16:	40dc      	lsrs	r4, r3
 8010e18:	2300      	movs	r3, #0
 8010e1a:	e9c6 4300 	strd	r4, r3, [r6]
 8010e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e22:	428b      	cmp	r3, r1
 8010e24:	d908      	bls.n	8010e38 <__udivmoddi4+0xbc>
 8010e26:	2e00      	cmp	r6, #0
 8010e28:	f000 80ed 	beq.w	8011006 <__udivmoddi4+0x28a>
 8010e2c:	2100      	movs	r1, #0
 8010e2e:	e9c6 0500 	strd	r0, r5, [r6]
 8010e32:	4608      	mov	r0, r1
 8010e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e38:	fab3 f183 	clz	r1, r3
 8010e3c:	2900      	cmp	r1, #0
 8010e3e:	d149      	bne.n	8010ed4 <__udivmoddi4+0x158>
 8010e40:	42ab      	cmp	r3, r5
 8010e42:	d302      	bcc.n	8010e4a <__udivmoddi4+0xce>
 8010e44:	4282      	cmp	r2, r0
 8010e46:	f200 80f8 	bhi.w	801103a <__udivmoddi4+0x2be>
 8010e4a:	1a84      	subs	r4, r0, r2
 8010e4c:	eb65 0203 	sbc.w	r2, r5, r3
 8010e50:	2001      	movs	r0, #1
 8010e52:	4617      	mov	r7, r2
 8010e54:	2e00      	cmp	r6, #0
 8010e56:	d0e2      	beq.n	8010e1e <__udivmoddi4+0xa2>
 8010e58:	e9c6 4700 	strd	r4, r7, [r6]
 8010e5c:	e7df      	b.n	8010e1e <__udivmoddi4+0xa2>
 8010e5e:	b902      	cbnz	r2, 8010e62 <__udivmoddi4+0xe6>
 8010e60:	deff      	udf	#255	; 0xff
 8010e62:	fab2 f382 	clz	r3, r2
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	f040 8090 	bne.w	8010f8c <__udivmoddi4+0x210>
 8010e6c:	1a8a      	subs	r2, r1, r2
 8010e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010e72:	fa1f fe8c 	uxth.w	lr, ip
 8010e76:	2101      	movs	r1, #1
 8010e78:	fbb2 f5f7 	udiv	r5, r2, r7
 8010e7c:	fb07 2015 	mls	r0, r7, r5, r2
 8010e80:	0c22      	lsrs	r2, r4, #16
 8010e82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8010e86:	fb0e f005 	mul.w	r0, lr, r5
 8010e8a:	4290      	cmp	r0, r2
 8010e8c:	d908      	bls.n	8010ea0 <__udivmoddi4+0x124>
 8010e8e:	eb1c 0202 	adds.w	r2, ip, r2
 8010e92:	f105 38ff 	add.w	r8, r5, #4294967295
 8010e96:	d202      	bcs.n	8010e9e <__udivmoddi4+0x122>
 8010e98:	4290      	cmp	r0, r2
 8010e9a:	f200 80cb 	bhi.w	8011034 <__udivmoddi4+0x2b8>
 8010e9e:	4645      	mov	r5, r8
 8010ea0:	1a12      	subs	r2, r2, r0
 8010ea2:	b2a4      	uxth	r4, r4
 8010ea4:	fbb2 f0f7 	udiv	r0, r2, r7
 8010ea8:	fb07 2210 	mls	r2, r7, r0, r2
 8010eac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8010eb4:	45a6      	cmp	lr, r4
 8010eb6:	d908      	bls.n	8010eca <__udivmoddi4+0x14e>
 8010eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8010ebc:	f100 32ff 	add.w	r2, r0, #4294967295
 8010ec0:	d202      	bcs.n	8010ec8 <__udivmoddi4+0x14c>
 8010ec2:	45a6      	cmp	lr, r4
 8010ec4:	f200 80bb 	bhi.w	801103e <__udivmoddi4+0x2c2>
 8010ec8:	4610      	mov	r0, r2
 8010eca:	eba4 040e 	sub.w	r4, r4, lr
 8010ece:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8010ed2:	e79f      	b.n	8010e14 <__udivmoddi4+0x98>
 8010ed4:	f1c1 0720 	rsb	r7, r1, #32
 8010ed8:	408b      	lsls	r3, r1
 8010eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8010ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8010ee2:	fa05 f401 	lsl.w	r4, r5, r1
 8010ee6:	fa20 f307 	lsr.w	r3, r0, r7
 8010eea:	40fd      	lsrs	r5, r7
 8010eec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8010ef0:	4323      	orrs	r3, r4
 8010ef2:	fbb5 f8f9 	udiv	r8, r5, r9
 8010ef6:	fa1f fe8c 	uxth.w	lr, ip
 8010efa:	fb09 5518 	mls	r5, r9, r8, r5
 8010efe:	0c1c      	lsrs	r4, r3, #16
 8010f00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8010f04:	fb08 f50e 	mul.w	r5, r8, lr
 8010f08:	42a5      	cmp	r5, r4
 8010f0a:	fa02 f201 	lsl.w	r2, r2, r1
 8010f0e:	fa00 f001 	lsl.w	r0, r0, r1
 8010f12:	d90b      	bls.n	8010f2c <__udivmoddi4+0x1b0>
 8010f14:	eb1c 0404 	adds.w	r4, ip, r4
 8010f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8010f1c:	f080 8088 	bcs.w	8011030 <__udivmoddi4+0x2b4>
 8010f20:	42a5      	cmp	r5, r4
 8010f22:	f240 8085 	bls.w	8011030 <__udivmoddi4+0x2b4>
 8010f26:	f1a8 0802 	sub.w	r8, r8, #2
 8010f2a:	4464      	add	r4, ip
 8010f2c:	1b64      	subs	r4, r4, r5
 8010f2e:	b29d      	uxth	r5, r3
 8010f30:	fbb4 f3f9 	udiv	r3, r4, r9
 8010f34:	fb09 4413 	mls	r4, r9, r3, r4
 8010f38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8010f3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8010f40:	45a6      	cmp	lr, r4
 8010f42:	d908      	bls.n	8010f56 <__udivmoddi4+0x1da>
 8010f44:	eb1c 0404 	adds.w	r4, ip, r4
 8010f48:	f103 35ff 	add.w	r5, r3, #4294967295
 8010f4c:	d26c      	bcs.n	8011028 <__udivmoddi4+0x2ac>
 8010f4e:	45a6      	cmp	lr, r4
 8010f50:	d96a      	bls.n	8011028 <__udivmoddi4+0x2ac>
 8010f52:	3b02      	subs	r3, #2
 8010f54:	4464      	add	r4, ip
 8010f56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8010f5a:	fba3 9502 	umull	r9, r5, r3, r2
 8010f5e:	eba4 040e 	sub.w	r4, r4, lr
 8010f62:	42ac      	cmp	r4, r5
 8010f64:	46c8      	mov	r8, r9
 8010f66:	46ae      	mov	lr, r5
 8010f68:	d356      	bcc.n	8011018 <__udivmoddi4+0x29c>
 8010f6a:	d053      	beq.n	8011014 <__udivmoddi4+0x298>
 8010f6c:	b156      	cbz	r6, 8010f84 <__udivmoddi4+0x208>
 8010f6e:	ebb0 0208 	subs.w	r2, r0, r8
 8010f72:	eb64 040e 	sbc.w	r4, r4, lr
 8010f76:	fa04 f707 	lsl.w	r7, r4, r7
 8010f7a:	40ca      	lsrs	r2, r1
 8010f7c:	40cc      	lsrs	r4, r1
 8010f7e:	4317      	orrs	r7, r2
 8010f80:	e9c6 7400 	strd	r7, r4, [r6]
 8010f84:	4618      	mov	r0, r3
 8010f86:	2100      	movs	r1, #0
 8010f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f8c:	f1c3 0120 	rsb	r1, r3, #32
 8010f90:	fa02 fc03 	lsl.w	ip, r2, r3
 8010f94:	fa20 f201 	lsr.w	r2, r0, r1
 8010f98:	fa25 f101 	lsr.w	r1, r5, r1
 8010f9c:	409d      	lsls	r5, r3
 8010f9e:	432a      	orrs	r2, r5
 8010fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010fa4:	fa1f fe8c 	uxth.w	lr, ip
 8010fa8:	fbb1 f0f7 	udiv	r0, r1, r7
 8010fac:	fb07 1510 	mls	r5, r7, r0, r1
 8010fb0:	0c11      	lsrs	r1, r2, #16
 8010fb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8010fb6:	fb00 f50e 	mul.w	r5, r0, lr
 8010fba:	428d      	cmp	r5, r1
 8010fbc:	fa04 f403 	lsl.w	r4, r4, r3
 8010fc0:	d908      	bls.n	8010fd4 <__udivmoddi4+0x258>
 8010fc2:	eb1c 0101 	adds.w	r1, ip, r1
 8010fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8010fca:	d22f      	bcs.n	801102c <__udivmoddi4+0x2b0>
 8010fcc:	428d      	cmp	r5, r1
 8010fce:	d92d      	bls.n	801102c <__udivmoddi4+0x2b0>
 8010fd0:	3802      	subs	r0, #2
 8010fd2:	4461      	add	r1, ip
 8010fd4:	1b49      	subs	r1, r1, r5
 8010fd6:	b292      	uxth	r2, r2
 8010fd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8010fdc:	fb07 1115 	mls	r1, r7, r5, r1
 8010fe0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010fe4:	fb05 f10e 	mul.w	r1, r5, lr
 8010fe8:	4291      	cmp	r1, r2
 8010fea:	d908      	bls.n	8010ffe <__udivmoddi4+0x282>
 8010fec:	eb1c 0202 	adds.w	r2, ip, r2
 8010ff0:	f105 38ff 	add.w	r8, r5, #4294967295
 8010ff4:	d216      	bcs.n	8011024 <__udivmoddi4+0x2a8>
 8010ff6:	4291      	cmp	r1, r2
 8010ff8:	d914      	bls.n	8011024 <__udivmoddi4+0x2a8>
 8010ffa:	3d02      	subs	r5, #2
 8010ffc:	4462      	add	r2, ip
 8010ffe:	1a52      	subs	r2, r2, r1
 8011000:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8011004:	e738      	b.n	8010e78 <__udivmoddi4+0xfc>
 8011006:	4631      	mov	r1, r6
 8011008:	4630      	mov	r0, r6
 801100a:	e708      	b.n	8010e1e <__udivmoddi4+0xa2>
 801100c:	4639      	mov	r1, r7
 801100e:	e6e6      	b.n	8010dde <__udivmoddi4+0x62>
 8011010:	4610      	mov	r0, r2
 8011012:	e6fb      	b.n	8010e0c <__udivmoddi4+0x90>
 8011014:	4548      	cmp	r0, r9
 8011016:	d2a9      	bcs.n	8010f6c <__udivmoddi4+0x1f0>
 8011018:	ebb9 0802 	subs.w	r8, r9, r2
 801101c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8011020:	3b01      	subs	r3, #1
 8011022:	e7a3      	b.n	8010f6c <__udivmoddi4+0x1f0>
 8011024:	4645      	mov	r5, r8
 8011026:	e7ea      	b.n	8010ffe <__udivmoddi4+0x282>
 8011028:	462b      	mov	r3, r5
 801102a:	e794      	b.n	8010f56 <__udivmoddi4+0x1da>
 801102c:	4640      	mov	r0, r8
 801102e:	e7d1      	b.n	8010fd4 <__udivmoddi4+0x258>
 8011030:	46d0      	mov	r8, sl
 8011032:	e77b      	b.n	8010f2c <__udivmoddi4+0x1b0>
 8011034:	3d02      	subs	r5, #2
 8011036:	4462      	add	r2, ip
 8011038:	e732      	b.n	8010ea0 <__udivmoddi4+0x124>
 801103a:	4608      	mov	r0, r1
 801103c:	e70a      	b.n	8010e54 <__udivmoddi4+0xd8>
 801103e:	4464      	add	r4, ip
 8011040:	3802      	subs	r0, #2
 8011042:	e742      	b.n	8010eca <__udivmoddi4+0x14e>

08011044 <__aeabi_idiv0>:
 8011044:	4770      	bx	lr
 8011046:	bf00      	nop

08011048 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8011048:	b480      	push	{r7}
 801104a:	af00      	add	r7, sp, #0

}
 801104c:	bf00      	nop
 801104e:	46bd      	mov	sp, r7
 8011050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011054:	4770      	bx	lr

08011056 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8011056:	b480      	push	{r7}
 8011058:	af00      	add	r7, sp, #0
return 0;
 801105a:	2300      	movs	r3, #0
}
 801105c:	4618      	mov	r0, r3
 801105e:	46bd      	mov	sp, r7
 8011060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011064:	4770      	bx	lr
	...

08011068 <HAL_UARTEx_RxEventCallback>:
void EthMutexRelease (void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8011068:	b580      	push	{r7, lr}
 801106a:	b082      	sub	sp, #8
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
 8011070:	460b      	mov	r3, r1
 8011072:	807b      	strh	r3, [r7, #2]

	if (huart->Instance == USART2){
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	4a0e      	ldr	r2, [pc, #56]	; (80110b4 <HAL_UARTEx_RxEventCallback+0x4c>)
 801107a:	4293      	cmp	r3, r2
 801107c:	d116      	bne.n	80110ac <HAL_UARTEx_RxEventCallback+0x44>
		if (Size == 24){
 801107e:	887b      	ldrh	r3, [r7, #2]
 8011080:	2b18      	cmp	r3, #24
 8011082:	d113      	bne.n	80110ac <HAL_UARTEx_RxEventCallback+0x44>
			if (!osMessageQueueGetCount(rowPowerSensorQHandle)){
 8011084:	4b0c      	ldr	r3, [pc, #48]	; (80110b8 <HAL_UARTEx_RxEventCallback+0x50>)
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	4618      	mov	r0, r3
 801108a:	f00f f9c9 	bl	8020420 <osMessageQueueGetCount>
 801108e:	4603      	mov	r3, r0
 8011090:	2b00      	cmp	r3, #0
 8011092:	d106      	bne.n	80110a2 <HAL_UARTEx_RxEventCallback+0x3a>
				osMessageQueuePut(rowPowerSensorQHandle, &data_bufer, 0, 0);
 8011094:	4b08      	ldr	r3, [pc, #32]	; (80110b8 <HAL_UARTEx_RxEventCallback+0x50>)
 8011096:	6818      	ldr	r0, [r3, #0]
 8011098:	2300      	movs	r3, #0
 801109a:	2200      	movs	r2, #0
 801109c:	4907      	ldr	r1, [pc, #28]	; (80110bc <HAL_UARTEx_RxEventCallback+0x54>)
 801109e:	f00f f901 	bl	80202a4 <osMessageQueuePut>
			}
			HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24);
 80110a2:	2218      	movs	r2, #24
 80110a4:	4905      	ldr	r1, [pc, #20]	; (80110bc <HAL_UARTEx_RxEventCallback+0x54>)
 80110a6:	4806      	ldr	r0, [pc, #24]	; (80110c0 <HAL_UARTEx_RxEventCallback+0x58>)
 80110a8:	f006 faf4 	bl	8017694 <HAL_UARTEx_ReceiveToIdle_IT>
		}
	}
}
 80110ac:	bf00      	nop
 80110ae:	3708      	adds	r7, #8
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bd80      	pop	{r7, pc}
 80110b4:	40004400 	.word	0x40004400
 80110b8:	20000444 	.word	0x20000444
 80110bc:	20000470 	.word	0x20000470
 80110c0:	200003d8 	.word	0x200003d8

080110c4 <EthMutexTake>:

void EthMutexTake(void){
 80110c4:	b580      	push	{r7, lr}
 80110c6:	af00      	add	r7, sp, #0
	osMutexAcquire(NetworkHandle, osWaitForever);
 80110c8:	4b04      	ldr	r3, [pc, #16]	; (80110dc <EthMutexTake+0x18>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	f04f 31ff 	mov.w	r1, #4294967295
 80110d0:	4618      	mov	r0, r3
 80110d2:	f00e ffec 	bl	80200ae <osMutexAcquire>
}
 80110d6:	bf00      	nop
 80110d8:	bd80      	pop	{r7, pc}
 80110da:	bf00      	nop
 80110dc:	20000460 	.word	0x20000460

080110e0 <EthMutexRelease>:

void EthMutexRelease(void){
 80110e0:	b580      	push	{r7, lr}
 80110e2:	af00      	add	r7, sp, #0
	osMutexRelease(NetworkHandle);
 80110e4:	4b03      	ldr	r3, [pc, #12]	; (80110f4 <EthMutexRelease+0x14>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	4618      	mov	r0, r3
 80110ea:	f00f f82b 	bl	8020144 <osMutexRelease>
}
 80110ee:	bf00      	nop
 80110f0:	bd80      	pop	{r7, pc}
 80110f2:	bf00      	nop
 80110f4:	20000460 	.word	0x20000460

080110f8 <LfsMutexTake>:

void LfsMutexTake(void){
 80110f8:	b580      	push	{r7, lr}
 80110fa:	af00      	add	r7, sp, #0
	osMutexAcquire(LFSHandle, osWaitForever);
 80110fc:	4b04      	ldr	r3, [pc, #16]	; (8011110 <LfsMutexTake+0x18>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	f04f 31ff 	mov.w	r1, #4294967295
 8011104:	4618      	mov	r0, r3
 8011106:	f00e ffd2 	bl	80200ae <osMutexAcquire>
}
 801110a:	bf00      	nop
 801110c:	bd80      	pop	{r7, pc}
 801110e:	bf00      	nop
 8011110:	20000464 	.word	0x20000464

08011114 <LfsMutexRelease>:

void LfsMutexRelease(void){
 8011114:	b580      	push	{r7, lr}
 8011116:	af00      	add	r7, sp, #0
	osMutexRelease(LFSHandle);
 8011118:	4b03      	ldr	r3, [pc, #12]	; (8011128 <LfsMutexRelease+0x14>)
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	4618      	mov	r0, r3
 801111e:	f00f f811 	bl	8020144 <osMutexRelease>
}
 8011122:	bf00      	nop
 8011124:	bd80      	pop	{r7, pc}
 8011126:	bf00      	nop
 8011128:	20000464 	.word	0x20000464

0801112c <SocketMutexTake>:

void SocketMutexTake(void){
 801112c:	b580      	push	{r7, lr}
 801112e:	af00      	add	r7, sp, #0
	osMutexAcquire(SocketHandle, osWaitForever);
 8011130:	4b04      	ldr	r3, [pc, #16]	; (8011144 <SocketMutexTake+0x18>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	f04f 31ff 	mov.w	r1, #4294967295
 8011138:	4618      	mov	r0, r3
 801113a:	f00e ffb8 	bl	80200ae <osMutexAcquire>
}
 801113e:	bf00      	nop
 8011140:	bd80      	pop	{r7, pc}
 8011142:	bf00      	nop
 8011144:	20000468 	.word	0x20000468

08011148 <SocketMutexRelease>:

void SocketMutexRelease(void){
 8011148:	b580      	push	{r7, lr}
 801114a:	af00      	add	r7, sp, #0
	osMutexRelease(SocketHandle);
 801114c:	4b03      	ldr	r3, [pc, #12]	; (801115c <SocketMutexRelease+0x14>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	4618      	mov	r0, r3
 8011152:	f00e fff7 	bl	8020144 <osMutexRelease>
}
 8011156:	bf00      	nop
 8011158:	bd80      	pop	{r7, pc}
 801115a:	bf00      	nop
 801115c:	20000468 	.word	0x20000468

08011160 <ServiceSockMutexTake>:

void ServiceSockMutexTake(){
 8011160:	b580      	push	{r7, lr}
 8011162:	af00      	add	r7, sp, #0
	osMutexAcquire(ServiceSocketHandle, osWaitForever);
 8011164:	4b04      	ldr	r3, [pc, #16]	; (8011178 <ServiceSockMutexTake+0x18>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	f04f 31ff 	mov.w	r1, #4294967295
 801116c:	4618      	mov	r0, r3
 801116e:	f00e ff9e 	bl	80200ae <osMutexAcquire>
}
 8011172:	bf00      	nop
 8011174:	bd80      	pop	{r7, pc}
 8011176:	bf00      	nop
 8011178:	2000046c 	.word	0x2000046c

0801117c <ServiceSockMutexRelease>:

void ServiceSockMutexRelease(){
 801117c:	b580      	push	{r7, lr}
 801117e:	af00      	add	r7, sp, #0
	osMutexRelease(ServiceSocketHandle);
 8011180:	4b03      	ldr	r3, [pc, #12]	; (8011190 <ServiceSockMutexRelease+0x14>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	4618      	mov	r0, r3
 8011186:	f00e ffdd 	bl	8020144 <osMutexRelease>
}
 801118a:	bf00      	nop
 801118c:	bd80      	pop	{r7, pc}
 801118e:	bf00      	nop
 8011190:	2000046c 	.word	0x2000046c

08011194 <PowerON_HLW8032>:

void PowerON_HLW8032(){
 8011194:	b580      	push	{r7, lr}
 8011196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, enable_power_isolator_Pin,GPIO_PIN_RESET);
 8011198:	2200      	movs	r2, #0
 801119a:	2102      	movs	r1, #2
 801119c:	4802      	ldr	r0, [pc, #8]	; (80111a8 <PowerON_HLW8032+0x14>)
 801119e:	f004 fca9 	bl	8015af4 <HAL_GPIO_WritePin>
}
 80111a2:	bf00      	nop
 80111a4:	bd80      	pop	{r7, pc}
 80111a6:	bf00      	nop
 80111a8:	40020000 	.word	0x40020000

080111ac <PowerOFF_HLW8032>:

void PowerOFF_HLW8032(){
 80111ac:	b580      	push	{r7, lr}
 80111ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, enable_power_isolator_Pin,GPIO_PIN_SET);
 80111b0:	2201      	movs	r2, #1
 80111b2:	2102      	movs	r1, #2
 80111b4:	4802      	ldr	r0, [pc, #8]	; (80111c0 <PowerOFF_HLW8032+0x14>)
 80111b6:	f004 fc9d 	bl	8015af4 <HAL_GPIO_WritePin>
}
 80111ba:	bf00      	nop
 80111bc:	bd80      	pop	{r7, pc}
 80111be:	bf00      	nop
 80111c0:	40020000 	.word	0x40020000

080111c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80111c8:	b672      	cpsid	i
}
 80111ca:	bf00      	nop
  /* USER CODE BEGIN 1 */
	__disable_irq();
	SCB->VTOR = (uint32_t)0x08000000 | (0x08010000 & (uint32_t)0x1FFFFF80);
 80111cc:	4b5c      	ldr	r3, [pc, #368]	; (8011340 <main+0x17c>)
 80111ce:	4a5d      	ldr	r2, [pc, #372]	; (8011344 <main+0x180>)
 80111d0:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80111d2:	b662      	cpsie	i
}
 80111d4:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80111d6:	f004 f937 	bl	8015448 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80111da:	f000 f919 	bl	8011410 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  dns_service_reg_cb_net_ready(assigned_ip);
 80111de:	485a      	ldr	r0, [pc, #360]	; (8011348 <main+0x184>)
 80111e0:	f00b fb18 	bl	801c814 <dns_service_reg_cb_net_ready>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80111e4:	f000 fa46 	bl	8011674 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80111e8:	f000 fa18 	bl	801161c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80111ec:	f000 f9aa 	bl	8011544 <MX_SPI1_Init>
  MX_SPI3_Init();
 80111f0:	f000 f9de 	bl	80115b0 <MX_SPI3_Init>
  MX_MBEDTLS_Init();
 80111f4:	f00e fd54 	bl	801fca0 <MX_MBEDTLS_Init>
  MX_CRC_Init();
 80111f8:	f000 f976 	bl	80114e8 <MX_CRC_Init>
  MX_IWDG_Init();
 80111fc:	f000 f988 	bl	8011510 <MX_IWDG_Init>
  /* Call PreOsInit function */
  MX_MBEDTLS_Init();
 8011200:	f00e fd4e 	bl	801fca0 <MX_MBEDTLS_Init>
//  if (EthernetEthPool == NULL) Error_Handler();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8011204:	f00e fd98 	bl	801fd38 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Network */
  NetworkHandle = osMutexNew(&Network_attributes);
 8011208:	4850      	ldr	r0, [pc, #320]	; (801134c <main+0x188>)
 801120a:	f00e feca 	bl	801ffa2 <osMutexNew>
 801120e:	4603      	mov	r3, r0
 8011210:	4a4f      	ldr	r2, [pc, #316]	; (8011350 <main+0x18c>)
 8011212:	6013      	str	r3, [r2, #0]

  /* creation of LFS */
  LFSHandle = osMutexNew(&LFS_attributes);
 8011214:	484f      	ldr	r0, [pc, #316]	; (8011354 <main+0x190>)
 8011216:	f00e fec4 	bl	801ffa2 <osMutexNew>
 801121a:	4603      	mov	r3, r0
 801121c:	4a4e      	ldr	r2, [pc, #312]	; (8011358 <main+0x194>)
 801121e:	6013      	str	r3, [r2, #0]

  /* creation of Socket */
  SocketHandle = osMutexNew(&Socket_attributes);
 8011220:	484e      	ldr	r0, [pc, #312]	; (801135c <main+0x198>)
 8011222:	f00e febe 	bl	801ffa2 <osMutexNew>
 8011226:	4603      	mov	r3, r0
 8011228:	4a4d      	ldr	r2, [pc, #308]	; (8011360 <main+0x19c>)
 801122a:	6013      	str	r3, [r2, #0]

  /* creation of ServiceSocket */
  ServiceSocketHandle = osMutexNew(&ServiceSocket_attributes);
 801122c:	484d      	ldr	r0, [pc, #308]	; (8011364 <main+0x1a0>)
 801122e:	f00e feb8 	bl	801ffa2 <osMutexNew>
 8011232:	4603      	mov	r3, r0
 8011234:	4a4c      	ldr	r2, [pc, #304]	; (8011368 <main+0x1a4>)
 8011236:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of rowPowerSensorQ */
  rowPowerSensorQHandle = osMessageQueueNew (1, 30, &rowPowerSensorQ_attributes);
 8011238:	4a4c      	ldr	r2, [pc, #304]	; (801136c <main+0x1a8>)
 801123a:	211e      	movs	r1, #30
 801123c:	2001      	movs	r0, #1
 801123e:	f00e ffbe 	bl	80201be <osMessageQueueNew>
 8011242:	4603      	mov	r3, r0
 8011244:	4a4a      	ldr	r2, [pc, #296]	; (8011370 <main+0x1ac>)
 8011246:	6013      	str	r3, [r2, #0]

  /* creation of EthernetInfoQ */
  EthernetInfoQHandle = osMessageQueueNew (1, sizeof(Ethernet_info_struct), &EthernetInfoQ_attributes);
 8011248:	4a4a      	ldr	r2, [pc, #296]	; (8011374 <main+0x1b0>)
 801124a:	2120      	movs	r1, #32
 801124c:	2001      	movs	r0, #1
 801124e:	f00e ffb6 	bl	80201be <osMessageQueueNew>
 8011252:	4603      	mov	r3, r0
 8011254:	4a48      	ldr	r2, [pc, #288]	; (8011378 <main+0x1b4>)
 8011256:	6013      	str	r3, [r2, #0]

  /* creation of PowerDataQ */
  PowerDataQHandle = osMessageQueueNew (1, sizeof(PowerSensStruct), &PowerDataQ_attributes);
 8011258:	4a48      	ldr	r2, [pc, #288]	; (801137c <main+0x1b8>)
 801125a:	2124      	movs	r1, #36	; 0x24
 801125c:	2001      	movs	r0, #1
 801125e:	f00e ffae 	bl	80201be <osMessageQueueNew>
 8011262:	4603      	mov	r3, r0
 8011264:	4a46      	ldr	r2, [pc, #280]	; (8011380 <main+0x1bc>)
 8011266:	6013      	str	r3, [r2, #0]

  /* creation of Curr_sensor_settings */
  Curr_sensor_settingsHandle = osMessageQueueNew (1, sizeof(P_sens_sett_struct), &Curr_sensor_settings_attributes);
 8011268:	4a46      	ldr	r2, [pc, #280]	; (8011384 <main+0x1c0>)
 801126a:	2108      	movs	r1, #8
 801126c:	2001      	movs	r0, #1
 801126e:	f00e ffa6 	bl	80201be <osMessageQueueNew>
 8011272:	4603      	mov	r3, r0
 8011274:	4a44      	ldr	r2, [pc, #272]	; (8011388 <main+0x1c4>)
 8011276:	6013      	str	r3, [r2, #0]

  /* creation of mqttQ */
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 8011278:	4a44      	ldr	r2, [pc, #272]	; (801138c <main+0x1c8>)
 801127a:	21c6      	movs	r1, #198	; 0xc6
 801127c:	2001      	movs	r0, #1
 801127e:	f00e ff9e 	bl	80201be <osMessageQueueNew>
 8011282:	4603      	mov	r3, r0
 8011284:	4a42      	ldr	r2, [pc, #264]	; (8011390 <main+0x1cc>)
 8011286:	6013      	str	r3, [r2, #0]

  /* creation of mb_tcp_settingsQ */
  mb_tcp_settingsQHandle = osMessageQueueNew (1, sizeof(ModBusTCP_struct), &mb_tcp_settingsQ_attributes);
 8011288:	4a42      	ldr	r2, [pc, #264]	; (8011394 <main+0x1d0>)
 801128a:	2102      	movs	r1, #2
 801128c:	2001      	movs	r0, #1
 801128e:	f00e ff96 	bl	80201be <osMessageQueueNew>
 8011292:	4603      	mov	r3, r0
 8011294:	4a40      	ldr	r2, [pc, #256]	; (8011398 <main+0x1d4>)
 8011296:	6013      	str	r3, [r2, #0]

  /* creation of uptimeQ */
  uptimeQHandle = osMessageQueueNew (1, sizeof(uint32_t), &uptimeQ_attributes);
 8011298:	4a40      	ldr	r2, [pc, #256]	; (801139c <main+0x1d8>)
 801129a:	2104      	movs	r1, #4
 801129c:	2001      	movs	r0, #1
 801129e:	f00e ff8e 	bl	80201be <osMessageQueueNew>
 80112a2:	4603      	mov	r3, r0
 80112a4:	4a3e      	ldr	r2, [pc, #248]	; (80113a0 <main+0x1dc>)
 80112a6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80112a8:	4a3e      	ldr	r2, [pc, #248]	; (80113a4 <main+0x1e0>)
 80112aa:	2100      	movs	r1, #0
 80112ac:	483e      	ldr	r0, [pc, #248]	; (80113a8 <main+0x1e4>)
 80112ae:	f00e fd8d 	bl	801fdcc <osThreadNew>
 80112b2:	4603      	mov	r3, r0
 80112b4:	4a3d      	ldr	r2, [pc, #244]	; (80113ac <main+0x1e8>)
 80112b6:	6013      	str	r3, [r2, #0]

  /* creation of SensorsTask */
  SensorsTaskHandle = osThreadNew(vSensorsTask, NULL, &SensorsTask_attributes);
 80112b8:	4a3d      	ldr	r2, [pc, #244]	; (80113b0 <main+0x1ec>)
 80112ba:	2100      	movs	r1, #0
 80112bc:	483d      	ldr	r0, [pc, #244]	; (80113b4 <main+0x1f0>)
 80112be:	f00e fd85 	bl	801fdcc <osThreadNew>
 80112c2:	4603      	mov	r3, r0
 80112c4:	4a3c      	ldr	r2, [pc, #240]	; (80113b8 <main+0x1f4>)
 80112c6:	6013      	str	r3, [r2, #0]

  /* creation of RW_Settings_Tas */
  RW_Settings_TasHandle = osThreadNew(vRW_Settings_Tas, NULL, &RW_Settings_Tas_attributes);
 80112c8:	4a3c      	ldr	r2, [pc, #240]	; (80113bc <main+0x1f8>)
 80112ca:	2100      	movs	r1, #0
 80112cc:	483c      	ldr	r0, [pc, #240]	; (80113c0 <main+0x1fc>)
 80112ce:	f00e fd7d 	bl	801fdcc <osThreadNew>
 80112d2:	4603      	mov	r3, r0
 80112d4:	4a3b      	ldr	r2, [pc, #236]	; (80113c4 <main+0x200>)
 80112d6:	6013      	str	r3, [r2, #0]

  /* creation of oneSecondTickTa */
  oneSecondTickTaHandle = osThreadNew(vOneSecondTickTask, NULL, &oneSecondTickTa_attributes);
 80112d8:	4a3b      	ldr	r2, [pc, #236]	; (80113c8 <main+0x204>)
 80112da:	2100      	movs	r1, #0
 80112dc:	483b      	ldr	r0, [pc, #236]	; (80113cc <main+0x208>)
 80112de:	f00e fd75 	bl	801fdcc <osThreadNew>
 80112e2:	4603      	mov	r3, r0
 80112e4:	4a3a      	ldr	r2, [pc, #232]	; (80113d0 <main+0x20c>)
 80112e6:	6013      	str	r3, [r2, #0]

  /* creation of maintEthTask */
  maintEthTaskHandle = osThreadNew(vMaintEthTask, NULL, &maintEthTask_attributes);
 80112e8:	4a3a      	ldr	r2, [pc, #232]	; (80113d4 <main+0x210>)
 80112ea:	2100      	movs	r1, #0
 80112ec:	483a      	ldr	r0, [pc, #232]	; (80113d8 <main+0x214>)
 80112ee:	f00e fd6d 	bl	801fdcc <osThreadNew>
 80112f2:	4603      	mov	r3, r0
 80112f4:	4a39      	ldr	r2, [pc, #228]	; (80113dc <main+0x218>)
 80112f6:	6013      	str	r3, [r2, #0]

  /* creation of DebugMemUsageT */
  DebugMemUsageTHandle = osThreadNew(vDebugMemUsage, NULL, &DebugMemUsageT_attributes);
 80112f8:	4a39      	ldr	r2, [pc, #228]	; (80113e0 <main+0x21c>)
 80112fa:	2100      	movs	r1, #0
 80112fc:	4839      	ldr	r0, [pc, #228]	; (80113e4 <main+0x220>)
 80112fe:	f00e fd65 	bl	801fdcc <osThreadNew>
 8011302:	4603      	mov	r3, r0
 8011304:	4a38      	ldr	r2, [pc, #224]	; (80113e8 <main+0x224>)
 8011306:	6013      	str	r3, [r2, #0]

  /* creation of httpServTask */
  httpServTaskHandle = osThreadNew(httpServ, NULL, &httpServTask_attributes);
 8011308:	4a38      	ldr	r2, [pc, #224]	; (80113ec <main+0x228>)
 801130a:	2100      	movs	r1, #0
 801130c:	4838      	ldr	r0, [pc, #224]	; (80113f0 <main+0x22c>)
 801130e:	f00e fd5d 	bl	801fdcc <osThreadNew>
 8011312:	4603      	mov	r3, r0
 8011314:	4a37      	ldr	r2, [pc, #220]	; (80113f4 <main+0x230>)
 8011316:	6013      	str	r3, [r2, #0]

  /* creation of mqttClientTask */
  mqttClientTaskHandle = osThreadNew(vMQTT_Task, NULL, &mqttClientTask_attributes);
 8011318:	4a37      	ldr	r2, [pc, #220]	; (80113f8 <main+0x234>)
 801131a:	2100      	movs	r1, #0
 801131c:	4837      	ldr	r0, [pc, #220]	; (80113fc <main+0x238>)
 801131e:	f00e fd55 	bl	801fdcc <osThreadNew>
 8011322:	4603      	mov	r3, r0
 8011324:	4a36      	ldr	r2, [pc, #216]	; (8011400 <main+0x23c>)
 8011326:	6013      	str	r3, [r2, #0]

  /* creation of resetWatchDog */
  resetWatchDogHandle = osThreadNew(vResetWatchDog, NULL, &resetWatchDog_attributes);
 8011328:	4a36      	ldr	r2, [pc, #216]	; (8011404 <main+0x240>)
 801132a:	2100      	movs	r1, #0
 801132c:	4836      	ldr	r0, [pc, #216]	; (8011408 <main+0x244>)
 801132e:	f00e fd4d 	bl	801fdcc <osThreadNew>
 8011332:	4603      	mov	r3, r0
 8011334:	4a35      	ldr	r2, [pc, #212]	; (801140c <main+0x248>)
 8011336:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8011338:	f00e fd22 	bl	801fd80 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 801133c:	e7fe      	b.n	801133c <main+0x178>
 801133e:	bf00      	nop
 8011340:	e000ed00 	.word	0xe000ed00
 8011344:	08010000 	.word	0x08010000
 8011348:	0801faa5 	.word	0x0801faa5
 801134c:	08033eb4 	.word	0x08033eb4
 8011350:	20000460 	.word	0x20000460
 8011354:	08033ec4 	.word	0x08033ec4
 8011358:	20000464 	.word	0x20000464
 801135c:	08033ed4 	.word	0x08033ed4
 8011360:	20000468 	.word	0x20000468
 8011364:	08033ee4 	.word	0x08033ee4
 8011368:	2000046c 	.word	0x2000046c
 801136c:	08033e0c 	.word	0x08033e0c
 8011370:	20000444 	.word	0x20000444
 8011374:	08033e24 	.word	0x08033e24
 8011378:	20000448 	.word	0x20000448
 801137c:	08033e3c 	.word	0x08033e3c
 8011380:	2000044c 	.word	0x2000044c
 8011384:	08033e54 	.word	0x08033e54
 8011388:	20000450 	.word	0x20000450
 801138c:	08033e6c 	.word	0x08033e6c
 8011390:	20000454 	.word	0x20000454
 8011394:	08033e84 	.word	0x08033e84
 8011398:	20000458 	.word	0x20000458
 801139c:	08033e9c 	.word	0x08033e9c
 80113a0:	2000045c 	.word	0x2000045c
 80113a4:	08033cc8 	.word	0x08033cc8
 80113a8:	08011769 	.word	0x08011769
 80113ac:	20000420 	.word	0x20000420
 80113b0:	08033cec 	.word	0x08033cec
 80113b4:	08011779 	.word	0x08011779
 80113b8:	20000424 	.word	0x20000424
 80113bc:	08033d10 	.word	0x08033d10
 80113c0:	0801190d 	.word	0x0801190d
 80113c4:	20000428 	.word	0x20000428
 80113c8:	08033d34 	.word	0x08033d34
 80113cc:	08011c75 	.word	0x08011c75
 80113d0:	2000042c 	.word	0x2000042c
 80113d4:	08033d58 	.word	0x08033d58
 80113d8:	08011cb1 	.word	0x08011cb1
 80113dc:	20000430 	.word	0x20000430
 80113e0:	08033d7c 	.word	0x08033d7c
 80113e4:	0801222d 	.word	0x0801222d
 80113e8:	20000434 	.word	0x20000434
 80113ec:	08033da0 	.word	0x08033da0
 80113f0:	080122c9 	.word	0x080122c9
 80113f4:	20000438 	.word	0x20000438
 80113f8:	08033dc4 	.word	0x08033dc4
 80113fc:	0801244d 	.word	0x0801244d
 8011400:	2000043c 	.word	0x2000043c
 8011404:	08033de8 	.word	0x08033de8
 8011408:	080126e5 	.word	0x080126e5
 801140c:	20000440 	.word	0x20000440

08011410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b094      	sub	sp, #80	; 0x50
 8011414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8011416:	f107 0320 	add.w	r3, r7, #32
 801141a:	2230      	movs	r2, #48	; 0x30
 801141c:	2100      	movs	r1, #0
 801141e:	4618      	mov	r0, r3
 8011420:	f01c f954 	bl	802d6cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8011424:	f107 030c 	add.w	r3, r7, #12
 8011428:	2200      	movs	r2, #0
 801142a:	601a      	str	r2, [r3, #0]
 801142c:	605a      	str	r2, [r3, #4]
 801142e:	609a      	str	r2, [r3, #8]
 8011430:	60da      	str	r2, [r3, #12]
 8011432:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8011434:	2300      	movs	r3, #0
 8011436:	60bb      	str	r3, [r7, #8]
 8011438:	4b29      	ldr	r3, [pc, #164]	; (80114e0 <SystemClock_Config+0xd0>)
 801143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801143c:	4a28      	ldr	r2, [pc, #160]	; (80114e0 <SystemClock_Config+0xd0>)
 801143e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011442:	6413      	str	r3, [r2, #64]	; 0x40
 8011444:	4b26      	ldr	r3, [pc, #152]	; (80114e0 <SystemClock_Config+0xd0>)
 8011446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801144c:	60bb      	str	r3, [r7, #8]
 801144e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8011450:	2300      	movs	r3, #0
 8011452:	607b      	str	r3, [r7, #4]
 8011454:	4b23      	ldr	r3, [pc, #140]	; (80114e4 <SystemClock_Config+0xd4>)
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 801145c:	4a21      	ldr	r2, [pc, #132]	; (80114e4 <SystemClock_Config+0xd4>)
 801145e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011462:	6013      	str	r3, [r2, #0]
 8011464:	4b1f      	ldr	r3, [pc, #124]	; (80114e4 <SystemClock_Config+0xd4>)
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801146c:	607b      	str	r3, [r7, #4]
 801146e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8011470:	2309      	movs	r3, #9
 8011472:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8011474:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8011478:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 801147a:	2301      	movs	r3, #1
 801147c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801147e:	2302      	movs	r3, #2
 8011480:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8011482:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011486:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8011488:	2304      	movs	r3, #4
 801148a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 801148c:	2354      	movs	r3, #84	; 0x54
 801148e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8011490:	2302      	movs	r3, #2
 8011492:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8011494:	2304      	movs	r3, #4
 8011496:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8011498:	f107 0320 	add.w	r3, r7, #32
 801149c:	4618      	mov	r0, r3
 801149e:	f004 fb95 	bl	8015bcc <HAL_RCC_OscConfig>
 80114a2:	4603      	mov	r3, r0
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d001      	beq.n	80114ac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80114a8:	f001 f93c 	bl	8012724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80114ac:	230f      	movs	r3, #15
 80114ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80114b0:	2302      	movs	r3, #2
 80114b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80114b4:	2300      	movs	r3, #0
 80114b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80114b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80114be:	2300      	movs	r3, #0
 80114c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80114c2:	f107 030c 	add.w	r3, r7, #12
 80114c6:	2102      	movs	r1, #2
 80114c8:	4618      	mov	r0, r3
 80114ca:	f004 fdf7 	bl	80160bc <HAL_RCC_ClockConfig>
 80114ce:	4603      	mov	r3, r0
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d001      	beq.n	80114d8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80114d4:	f001 f926 	bl	8012724 <Error_Handler>
  }
}
 80114d8:	bf00      	nop
 80114da:	3750      	adds	r7, #80	; 0x50
 80114dc:	46bd      	mov	sp, r7
 80114de:	bd80      	pop	{r7, pc}
 80114e0:	40023800 	.word	0x40023800
 80114e4:	40007000 	.word	0x40007000

080114e8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80114ec:	4b06      	ldr	r3, [pc, #24]	; (8011508 <MX_CRC_Init+0x20>)
 80114ee:	4a07      	ldr	r2, [pc, #28]	; (801150c <MX_CRC_Init+0x24>)
 80114f0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80114f2:	4805      	ldr	r0, [pc, #20]	; (8011508 <MX_CRC_Init+0x20>)
 80114f4:	f004 f8cc 	bl	8015690 <HAL_CRC_Init>
 80114f8:	4603      	mov	r3, r0
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d001      	beq.n	8011502 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80114fe:	f001 f911 	bl	8012724 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8011502:	bf00      	nop
 8011504:	bd80      	pop	{r7, pc}
 8011506:	bf00      	nop
 8011508:	20000314 	.word	0x20000314
 801150c:	40023000 	.word	0x40023000

08011510 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8011514:	4b09      	ldr	r3, [pc, #36]	; (801153c <MX_IWDG_Init+0x2c>)
 8011516:	4a0a      	ldr	r2, [pc, #40]	; (8011540 <MX_IWDG_Init+0x30>)
 8011518:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 801151a:	4b08      	ldr	r3, [pc, #32]	; (801153c <MX_IWDG_Init+0x2c>)
 801151c:	2206      	movs	r2, #6
 801151e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8011520:	4b06      	ldr	r3, [pc, #24]	; (801153c <MX_IWDG_Init+0x2c>)
 8011522:	f640 72ff 	movw	r2, #4095	; 0xfff
 8011526:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8011528:	4804      	ldr	r0, [pc, #16]	; (801153c <MX_IWDG_Init+0x2c>)
 801152a:	f004 fafc 	bl	8015b26 <HAL_IWDG_Init>
 801152e:	4603      	mov	r3, r0
 8011530:	2b00      	cmp	r3, #0
 8011532:	d001      	beq.n	8011538 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8011534:	f001 f8f6 	bl	8012724 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8011538:	bf00      	nop
 801153a:	bd80      	pop	{r7, pc}
 801153c:	2000031c 	.word	0x2000031c
 8011540:	40003000 	.word	0x40003000

08011544 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8011548:	4b17      	ldr	r3, [pc, #92]	; (80115a8 <MX_SPI1_Init+0x64>)
 801154a:	4a18      	ldr	r2, [pc, #96]	; (80115ac <MX_SPI1_Init+0x68>)
 801154c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801154e:	4b16      	ldr	r3, [pc, #88]	; (80115a8 <MX_SPI1_Init+0x64>)
 8011550:	f44f 7282 	mov.w	r2, #260	; 0x104
 8011554:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8011556:	4b14      	ldr	r3, [pc, #80]	; (80115a8 <MX_SPI1_Init+0x64>)
 8011558:	2200      	movs	r2, #0
 801155a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 801155c:	4b12      	ldr	r3, [pc, #72]	; (80115a8 <MX_SPI1_Init+0x64>)
 801155e:	2200      	movs	r2, #0
 8011560:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8011562:	4b11      	ldr	r3, [pc, #68]	; (80115a8 <MX_SPI1_Init+0x64>)
 8011564:	2202      	movs	r2, #2
 8011566:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8011568:	4b0f      	ldr	r3, [pc, #60]	; (80115a8 <MX_SPI1_Init+0x64>)
 801156a:	2201      	movs	r2, #1
 801156c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 801156e:	4b0e      	ldr	r3, [pc, #56]	; (80115a8 <MX_SPI1_Init+0x64>)
 8011570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011574:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011576:	4b0c      	ldr	r3, [pc, #48]	; (80115a8 <MX_SPI1_Init+0x64>)
 8011578:	2200      	movs	r2, #0
 801157a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801157c:	4b0a      	ldr	r3, [pc, #40]	; (80115a8 <MX_SPI1_Init+0x64>)
 801157e:	2200      	movs	r2, #0
 8011580:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8011582:	4b09      	ldr	r3, [pc, #36]	; (80115a8 <MX_SPI1_Init+0x64>)
 8011584:	2200      	movs	r2, #0
 8011586:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011588:	4b07      	ldr	r3, [pc, #28]	; (80115a8 <MX_SPI1_Init+0x64>)
 801158a:	2200      	movs	r2, #0
 801158c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 801158e:	4b06      	ldr	r3, [pc, #24]	; (80115a8 <MX_SPI1_Init+0x64>)
 8011590:	220a      	movs	r2, #10
 8011592:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8011594:	4804      	ldr	r0, [pc, #16]	; (80115a8 <MX_SPI1_Init+0x64>)
 8011596:	f004 ffe3 	bl	8016560 <HAL_SPI_Init>
 801159a:	4603      	mov	r3, r0
 801159c:	2b00      	cmp	r3, #0
 801159e:	d001      	beq.n	80115a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80115a0:	f001 f8c0 	bl	8012724 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80115a4:	bf00      	nop
 80115a6:	bd80      	pop	{r7, pc}
 80115a8:	20000328 	.word	0x20000328
 80115ac:	40013000 	.word	0x40013000

080115b0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80115b4:	4b17      	ldr	r3, [pc, #92]	; (8011614 <MX_SPI3_Init+0x64>)
 80115b6:	4a18      	ldr	r2, [pc, #96]	; (8011618 <MX_SPI3_Init+0x68>)
 80115b8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80115ba:	4b16      	ldr	r3, [pc, #88]	; (8011614 <MX_SPI3_Init+0x64>)
 80115bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80115c0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80115c2:	4b14      	ldr	r3, [pc, #80]	; (8011614 <MX_SPI3_Init+0x64>)
 80115c4:	2200      	movs	r2, #0
 80115c6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80115c8:	4b12      	ldr	r3, [pc, #72]	; (8011614 <MX_SPI3_Init+0x64>)
 80115ca:	2200      	movs	r2, #0
 80115cc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80115ce:	4b11      	ldr	r3, [pc, #68]	; (8011614 <MX_SPI3_Init+0x64>)
 80115d0:	2202      	movs	r2, #2
 80115d2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80115d4:	4b0f      	ldr	r3, [pc, #60]	; (8011614 <MX_SPI3_Init+0x64>)
 80115d6:	2201      	movs	r2, #1
 80115d8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80115da:	4b0e      	ldr	r3, [pc, #56]	; (8011614 <MX_SPI3_Init+0x64>)
 80115dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80115e0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80115e2:	4b0c      	ldr	r3, [pc, #48]	; (8011614 <MX_SPI3_Init+0x64>)
 80115e4:	2200      	movs	r2, #0
 80115e6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80115e8:	4b0a      	ldr	r3, [pc, #40]	; (8011614 <MX_SPI3_Init+0x64>)
 80115ea:	2200      	movs	r2, #0
 80115ec:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80115ee:	4b09      	ldr	r3, [pc, #36]	; (8011614 <MX_SPI3_Init+0x64>)
 80115f0:	2200      	movs	r2, #0
 80115f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80115f4:	4b07      	ldr	r3, [pc, #28]	; (8011614 <MX_SPI3_Init+0x64>)
 80115f6:	2200      	movs	r2, #0
 80115f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80115fa:	4b06      	ldr	r3, [pc, #24]	; (8011614 <MX_SPI3_Init+0x64>)
 80115fc:	220a      	movs	r2, #10
 80115fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8011600:	4804      	ldr	r0, [pc, #16]	; (8011614 <MX_SPI3_Init+0x64>)
 8011602:	f004 ffad 	bl	8016560 <HAL_SPI_Init>
 8011606:	4603      	mov	r3, r0
 8011608:	2b00      	cmp	r3, #0
 801160a:	d001      	beq.n	8011610 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 801160c:	f001 f88a 	bl	8012724 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8011610:	bf00      	nop
 8011612:	bd80      	pop	{r7, pc}
 8011614:	20000380 	.word	0x20000380
 8011618:	40003c00 	.word	0x40003c00

0801161c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8011620:	4b12      	ldr	r3, [pc, #72]	; (801166c <MX_USART2_UART_Init+0x50>)
 8011622:	4a13      	ldr	r2, [pc, #76]	; (8011670 <MX_USART2_UART_Init+0x54>)
 8011624:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 4800;
 8011626:	4b11      	ldr	r3, [pc, #68]	; (801166c <MX_USART2_UART_Init+0x50>)
 8011628:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 801162c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 801162e:	4b0f      	ldr	r3, [pc, #60]	; (801166c <MX_USART2_UART_Init+0x50>)
 8011630:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011634:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8011636:	4b0d      	ldr	r3, [pc, #52]	; (801166c <MX_USART2_UART_Init+0x50>)
 8011638:	2200      	movs	r2, #0
 801163a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 801163c:	4b0b      	ldr	r3, [pc, #44]	; (801166c <MX_USART2_UART_Init+0x50>)
 801163e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011642:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8011644:	4b09      	ldr	r3, [pc, #36]	; (801166c <MX_USART2_UART_Init+0x50>)
 8011646:	2204      	movs	r2, #4
 8011648:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801164a:	4b08      	ldr	r3, [pc, #32]	; (801166c <MX_USART2_UART_Init+0x50>)
 801164c:	2200      	movs	r2, #0
 801164e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8011650:	4b06      	ldr	r3, [pc, #24]	; (801166c <MX_USART2_UART_Init+0x50>)
 8011652:	2200      	movs	r2, #0
 8011654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8011656:	4805      	ldr	r0, [pc, #20]	; (801166c <MX_USART2_UART_Init+0x50>)
 8011658:	f005 ffcc 	bl	80175f4 <HAL_UART_Init>
 801165c:	4603      	mov	r3, r0
 801165e:	2b00      	cmp	r3, #0
 8011660:	d001      	beq.n	8011666 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8011662:	f001 f85f 	bl	8012724 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8011666:	bf00      	nop
 8011668:	bd80      	pop	{r7, pc}
 801166a:	bf00      	nop
 801166c:	200003d8 	.word	0x200003d8
 8011670:	40004400 	.word	0x40004400

08011674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b088      	sub	sp, #32
 8011678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801167a:	f107 030c 	add.w	r3, r7, #12
 801167e:	2200      	movs	r2, #0
 8011680:	601a      	str	r2, [r3, #0]
 8011682:	605a      	str	r2, [r3, #4]
 8011684:	609a      	str	r2, [r3, #8]
 8011686:	60da      	str	r2, [r3, #12]
 8011688:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801168a:	2300      	movs	r3, #0
 801168c:	60bb      	str	r3, [r7, #8]
 801168e:	4b33      	ldr	r3, [pc, #204]	; (801175c <MX_GPIO_Init+0xe8>)
 8011690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011692:	4a32      	ldr	r2, [pc, #200]	; (801175c <MX_GPIO_Init+0xe8>)
 8011694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011698:	6313      	str	r3, [r2, #48]	; 0x30
 801169a:	4b30      	ldr	r3, [pc, #192]	; (801175c <MX_GPIO_Init+0xe8>)
 801169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801169e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80116a2:	60bb      	str	r3, [r7, #8]
 80116a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80116a6:	2300      	movs	r3, #0
 80116a8:	607b      	str	r3, [r7, #4]
 80116aa:	4b2c      	ldr	r3, [pc, #176]	; (801175c <MX_GPIO_Init+0xe8>)
 80116ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ae:	4a2b      	ldr	r2, [pc, #172]	; (801175c <MX_GPIO_Init+0xe8>)
 80116b0:	f043 0301 	orr.w	r3, r3, #1
 80116b4:	6313      	str	r3, [r2, #48]	; 0x30
 80116b6:	4b29      	ldr	r3, [pc, #164]	; (801175c <MX_GPIO_Init+0xe8>)
 80116b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ba:	f003 0301 	and.w	r3, r3, #1
 80116be:	607b      	str	r3, [r7, #4]
 80116c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80116c2:	2300      	movs	r3, #0
 80116c4:	603b      	str	r3, [r7, #0]
 80116c6:	4b25      	ldr	r3, [pc, #148]	; (801175c <MX_GPIO_Init+0xe8>)
 80116c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ca:	4a24      	ldr	r2, [pc, #144]	; (801175c <MX_GPIO_Init+0xe8>)
 80116cc:	f043 0302 	orr.w	r3, r3, #2
 80116d0:	6313      	str	r3, [r2, #48]	; 0x30
 80116d2:	4b22      	ldr	r3, [pc, #136]	; (801175c <MX_GPIO_Init+0xe8>)
 80116d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116d6:	f003 0302 	and.w	r3, r3, #2
 80116da:	603b      	str	r3, [r7, #0]
 80116dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, enable_power_isolator_Pin|SPI_flash_cs_Pin, GPIO_PIN_SET);
 80116de:	2201      	movs	r2, #1
 80116e0:	2112      	movs	r1, #18
 80116e2:	481f      	ldr	r0, [pc, #124]	; (8011760 <MX_GPIO_Init+0xec>)
 80116e4:	f004 fa06 	bl	8015af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ethernet_reset_GPIO_Port, Ethernet_reset_Pin, GPIO_PIN_RESET);
 80116e8:	2200      	movs	r2, #0
 80116ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80116ee:	481c      	ldr	r0, [pc, #112]	; (8011760 <MX_GPIO_Init+0xec>)
 80116f0:	f004 fa00 	bl	8015af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ethernet_cs_GPIO_Port, Ethernet_cs_Pin, GPIO_PIN_RESET);
 80116f4:	2200      	movs	r2, #0
 80116f6:	2140      	movs	r1, #64	; 0x40
 80116f8:	481a      	ldr	r0, [pc, #104]	; (8011764 <MX_GPIO_Init+0xf0>)
 80116fa:	f004 f9fb 	bl	8015af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : enable_power_isolator_Pin Ethernet_reset_Pin */
  GPIO_InitStruct.Pin = enable_power_isolator_Pin|Ethernet_reset_Pin;
 80116fe:	f248 0302 	movw	r3, #32770	; 0x8002
 8011702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011704:	2301      	movs	r3, #1
 8011706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011708:	2300      	movs	r3, #0
 801170a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801170c:	2300      	movs	r3, #0
 801170e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011710:	f107 030c 	add.w	r3, r7, #12
 8011714:	4619      	mov	r1, r3
 8011716:	4812      	ldr	r0, [pc, #72]	; (8011760 <MX_GPIO_Init+0xec>)
 8011718:	f004 f868 	bl	80157ec <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_flash_cs_Pin */
  GPIO_InitStruct.Pin = SPI_flash_cs_Pin;
 801171c:	2310      	movs	r3, #16
 801171e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011720:	2301      	movs	r3, #1
 8011722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011724:	2300      	movs	r3, #0
 8011726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011728:	2303      	movs	r3, #3
 801172a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_flash_cs_GPIO_Port, &GPIO_InitStruct);
 801172c:	f107 030c 	add.w	r3, r7, #12
 8011730:	4619      	mov	r1, r3
 8011732:	480b      	ldr	r0, [pc, #44]	; (8011760 <MX_GPIO_Init+0xec>)
 8011734:	f004 f85a 	bl	80157ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Ethernet_cs_Pin */
  GPIO_InitStruct.Pin = Ethernet_cs_Pin;
 8011738:	2340      	movs	r3, #64	; 0x40
 801173a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801173c:	2301      	movs	r3, #1
 801173e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011740:	2300      	movs	r3, #0
 8011742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011744:	2300      	movs	r3, #0
 8011746:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Ethernet_cs_GPIO_Port, &GPIO_InitStruct);
 8011748:	f107 030c 	add.w	r3, r7, #12
 801174c:	4619      	mov	r1, r3
 801174e:	4805      	ldr	r0, [pc, #20]	; (8011764 <MX_GPIO_Init+0xf0>)
 8011750:	f004 f84c 	bl	80157ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8011754:	bf00      	nop
 8011756:	3720      	adds	r7, #32
 8011758:	46bd      	mov	sp, r7
 801175a:	bd80      	pop	{r7, pc}
 801175c:	40023800 	.word	0x40023800
 8011760:	40020000 	.word	0x40020000
 8011764:	40020400 	.word	0x40020400

08011768 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b082      	sub	sp, #8
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8011770:	2001      	movs	r0, #1
 8011772:	f00e fbfb 	bl	801ff6c <osDelay>
 8011776:	e7fb      	b.n	8011770 <StartDefaultTask+0x8>

08011778 <vSensorsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vSensorsTask */
void vSensorsTask(void *argument)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b098      	sub	sp, #96	; 0x60
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vSensorsTask */
	uint32_t			temp;
	uint8_t				array[30];
	PowerSensStruct		PowerData;
	P_sens_sett_struct	PowerSett;
	uint32_t			count = 0;
 8011780:	2300      	movs	r3, #0
 8011782:	65fb      	str	r3, [r7, #92]	; 0x5c
	float				old_resistance;


	PowerSett.resistance = 0.001;
 8011784:	4b57      	ldr	r3, [pc, #348]	; (80118e4 <vSensorsTask+0x16c>)
 8011786:	60fb      	str	r3, [r7, #12]
	PowerSett.save = 0;
 8011788:	2300      	movs	r3, #0
 801178a:	723b      	strb	r3, [r7, #8]
	//xQueueOverwrite(Curr_sensor_settingsHandle, (void *)&PowerSett);

	osDelay(delay5s);
 801178c:	f241 3088 	movw	r0, #5000	; 0x1388
 8011790:	f00e fbec 	bl	801ff6c <osDelay>

	xQueuePeek(Curr_sensor_settingsHandle ,&PowerSett,0);
 8011794:	4b54      	ldr	r3, [pc, #336]	; (80118e8 <vSensorsTask+0x170>)
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	f107 0108 	add.w	r1, r7, #8
 801179c:	2200      	movs	r2, #0
 801179e:	4618      	mov	r0, r3
 80117a0:	f00f fcc0 	bl	8021124 <xQueuePeek>
	old_resistance = PowerSett.resistance;
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	65bb      	str	r3, [r7, #88]	; 0x58
	PowerOFF_HLW8032();
 80117a8:	f7ff fd00 	bl	80111ac <PowerOFF_HLW8032>
	osDelay(delay0_5s);
 80117ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80117b0:	f00e fbdc 	bl	801ff6c <osDelay>
	USART2->DR; //read data from register if exist
 80117b4:	4b4d      	ldr	r3, [pc, #308]	; (80118ec <vSensorsTask+0x174>)
 80117b6:	685b      	ldr	r3, [r3, #4]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24);
 80117b8:	2218      	movs	r2, #24
 80117ba:	494d      	ldr	r1, [pc, #308]	; (80118f0 <vSensorsTask+0x178>)
 80117bc:	484d      	ldr	r0, [pc, #308]	; (80118f4 <vSensorsTask+0x17c>)
 80117be:	f005 ff69 	bl	8017694 <HAL_UARTEx_ReceiveToIdle_IT>
	osDelay(delay1s);
 80117c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80117c6:	f00e fbd1 	bl	801ff6c <osDelay>
	PowerON_HLW8032();
 80117ca:	f7ff fce3 	bl	8011194 <PowerON_HLW8032>

	sens_task_start:


	InitHLW8032(1880000, 1000, PowerSett.resistance);
 80117ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80117d2:	eeb0 0a67 	vmov.f32	s0, s15
 80117d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80117da:	4847      	ldr	r0, [pc, #284]	; (80118f8 <vSensorsTask+0x180>)
 80117dc:	f003 f82e 	bl	801483c <InitHLW8032>
  /* Infinite loop */
  for(;;)
  {
	if (osMessageQueueGet	(rowPowerSensorQHandle,&array,NULL, 1000) != osErrorTimeout ){
 80117e0:	4b46      	ldr	r3, [pc, #280]	; (80118fc <vSensorsTask+0x184>)
 80117e2:	6818      	ldr	r0, [r3, #0]
 80117e4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80117e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80117ec:	2200      	movs	r2, #0
 80117ee:	f00e fdb9 	bl	8020364 <osMessageQueueGet>
 80117f2:	4603      	mov	r3, r0
 80117f4:	f113 0f02 	cmn.w	r3, #2
 80117f8:	d04c      	beq.n	8011894 <vSensorsTask+0x11c>
		if( RecvRawString((const unsigned char *)array) == 0){ // all OK if return 0
 80117fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80117fe:	4618      	mov	r0, r3
 8011800:	f003 f88e 	bl	8014920 <RecvRawString>
 8011804:	4603      	mov	r3, r0
 8011806:	2b00      	cmp	r3, #0
 8011808:	d155      	bne.n	80118b6 <vSensorsTask+0x13e>
			test_kWh_from_read 				= GetKWh();
 801180a:	f003 fab9 	bl	8014d80 <GetKWh>
 801180e:	eef0 7a40 	vmov.f32	s15, s0
 8011812:	4b3b      	ldr	r3, [pc, #236]	; (8011900 <vSensorsTask+0x188>)
 8011814:	edc3 7a00 	vstr	s15, [r3]
			PowerData.KWatt_h 				= GetKWh()+ test_kWh_from_flash;
 8011818:	f003 fab2 	bl	8014d80 <GetKWh>
 801181c:	eeb0 7a40 	vmov.f32	s14, s0
 8011820:	4b38      	ldr	r3, [pc, #224]	; (8011904 <vSensorsTask+0x18c>)
 8011822:	edd3 7a00 	vldr	s15, [r3]
 8011826:	ee77 7a27 	vadd.f32	s15, s14, s15
 801182a:	edc7 7a06 	vstr	s15, [r7, #24]
			PowerData.Voltage 				= GetVoltage();
 801182e:	f003 f96f 	bl	8014b10 <GetVoltage>
 8011832:	eef0 7a40 	vmov.f32	s15, s0
 8011836:	edc7 7a04 	vstr	s15, [r7, #16]
			PowerData.ApparPower 			= GetApparentPower();
 801183a:	f003 fa19 	bl	8014c70 <GetApparentPower>
 801183e:	eef0 7a40 	vmov.f32	s15, s0
 8011842:	edc7 7a08 	vstr	s15, [r7, #32]
			PowerData.ActivePower 			= GetActivePower();
 8011846:	f003 f9d5 	bl	8014bf4 <GetActivePower>
 801184a:	eef0 7a40 	vmov.f32	s15, s0
 801184e:	edc7 7a07 	vstr	s15, [r7, #28]
			PowerData.Current 				= GetCurrent();
 8011852:	f003 f9a9 	bl	8014ba8 <GetCurrent>
 8011856:	eef0 7a40 	vmov.f32	s15, s0
 801185a:	edc7 7a05 	vstr	s15, [r7, #20]
			PowerData.PowerFactor			= PowerFactor();
 801185e:	f003 fa2f 	bl	8014cc0 <PowerFactor>
 8011862:	eef0 7a40 	vmov.f32	s15, s0
 8011866:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			PowerData.test_pulse_counter 	= GetTestPulse();
 801186a:	f003 fa65 	bl	8014d38 <GetTestPulse>
 801186e:	4603      	mov	r3, r0
 8011870:	62bb      	str	r3, [r7, #40]	; 0x28
			PowerData.readed_counter 		= GetCountedPulse();
 8011872:	f003 fa6d 	bl	8014d50 <GetCountedPulse>
 8011876:	4603      	mov	r3, r0
 8011878:	62fb      	str	r3, [r7, #44]	; 0x2c
			PowerData.PF_reg				= GetPFReg();
 801187a:	f003 fa75 	bl	8014d68 <GetPFReg>
 801187e:	4603      	mov	r3, r0
 8011880:	633b      	str	r3, [r7, #48]	; 0x30
			xQueueOverwrite(PowerDataQHandle, (void *)&PowerData);
 8011882:	4b21      	ldr	r3, [pc, #132]	; (8011908 <vSensorsTask+0x190>)
 8011884:	6818      	ldr	r0, [r3, #0]
 8011886:	f107 0110 	add.w	r1, r7, #16
 801188a:	2302      	movs	r3, #2
 801188c:	2200      	movs	r2, #0
 801188e:	f00f f8c3 	bl	8020a18 <xQueueGenericSend>
 8011892:	e010      	b.n	80118b6 <vSensorsTask+0x13e>
		}
	}else{
		count++;
 8011894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011896:	3301      	adds	r3, #1
 8011898:	65fb      	str	r3, [r7, #92]	; 0x5c
		while (HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24) == HAL_ERROR){
 801189a:	e004      	b.n	80118a6 <vSensorsTask+0x12e>
			temp = USART2->DR;
 801189c:	4b13      	ldr	r3, [pc, #76]	; (80118ec <vSensorsTask+0x174>)
 801189e:	685b      	ldr	r3, [r3, #4]
 80118a0:	657b      	str	r3, [r7, #84]	; 0x54
			osThreadYield();
 80118a2:	f00e fb43 	bl	801ff2c <osThreadYield>
		while (HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24) == HAL_ERROR){
 80118a6:	2218      	movs	r2, #24
 80118a8:	4911      	ldr	r1, [pc, #68]	; (80118f0 <vSensorsTask+0x178>)
 80118aa:	4812      	ldr	r0, [pc, #72]	; (80118f4 <vSensorsTask+0x17c>)
 80118ac:	f005 fef2 	bl	8017694 <HAL_UARTEx_ReceiveToIdle_IT>
 80118b0:	4603      	mov	r3, r0
 80118b2:	2b01      	cmp	r3, #1
 80118b4:	d0f2      	beq.n	801189c <vSensorsTask+0x124>
		}
	}
	osThreadYield();
 80118b6:	f00e fb39 	bl	801ff2c <osThreadYield>
    xQueuePeek(Curr_sensor_settingsHandle ,&PowerSett,0);
 80118ba:	4b0b      	ldr	r3, [pc, #44]	; (80118e8 <vSensorsTask+0x170>)
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	f107 0108 	add.w	r1, r7, #8
 80118c2:	2200      	movs	r2, #0
 80118c4:	4618      	mov	r0, r3
 80118c6:	f00f fc2d 	bl	8021124 <xQueuePeek>
    if (PowerSett.resistance != old_resistance){
 80118ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80118ce:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80118d2:	eeb4 7a67 	vcmp.f32	s14, s15
 80118d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118da:	d081      	beq.n	80117e0 <vSensorsTask+0x68>
    	old_resistance = PowerSett.resistance;
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	65bb      	str	r3, [r7, #88]	; 0x58
    	goto sens_task_start;
 80118e0:	e775      	b.n	80117ce <vSensorsTask+0x56>
 80118e2:	bf00      	nop
 80118e4:	3a83126f 	.word	0x3a83126f
 80118e8:	20000450 	.word	0x20000450
 80118ec:	40004400 	.word	0x40004400
 80118f0:	20000470 	.word	0x20000470
 80118f4:	200003d8 	.word	0x200003d8
 80118f8:	001cafc0 	.word	0x001cafc0
 80118fc:	20000444 	.word	0x20000444
 8011900:	20000494 	.word	0x20000494
 8011904:	20000490 	.word	0x20000490
 8011908:	2000044c 	.word	0x2000044c

0801190c <vRW_Settings_Tas>:
* @retval None
*/

/* USER CODE END Header_vRW_Settings_Tas */
void vRW_Settings_Tas(void *argument)
{
 801190c:	b590      	push	{r4, r7, lr}
 801190e:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c
 8011912:	af12      	add	r7, sp, #72	; 0x48
 8011914:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011918:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 801191c:	6018      	str	r0, [r3, #0]
	uint8_t 				buff_write[256];
	uint8_t 				lookheadbuf[256];
	P_sens_sett_struct		PowerSett;
	MQTT_cred_struct		MQTT_cred;
	ModBusTCP_struct		mb_tcp_sett;
	uint32_t				next_update = 20, time_counter = 0;
 801191e:	2314      	movs	r3, #20
 8011920:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8011924:	2300      	movs	r3, #0
 8011926:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	PowerSensStruct			PowerData;
	float					KWatt_h_old = 0;
 801192a:	f04f 0300 	mov.w	r3, #0
 801192e:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8011932:	6013      	str	r3, [r2, #0]

	SPI_flash_set(hspi1);
 8011934:	4cbc      	ldr	r4, [pc, #752]	; (8011c28 <vRW_Settings_Tas+0x31c>)
 8011936:	4668      	mov	r0, sp
 8011938:	f104 0310 	add.w	r3, r4, #16
 801193c:	2248      	movs	r2, #72	; 0x48
 801193e:	4619      	mov	r1, r3
 8011940:	f01c f899 	bl	802da76 <memcpy>
 8011944:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011948:	f003 fd2a 	bl	80153a0 <SPI_flash_set>
	SPI_flash_reg_cb(SPI_flash_select, SPI_flash_deselect, SPI_flash_read_byte, SPI_flash_send_byte);
 801194c:	4bb7      	ldr	r3, [pc, #732]	; (8011c2c <vRW_Settings_Tas+0x320>)
 801194e:	4ab8      	ldr	r2, [pc, #736]	; (8011c30 <vRW_Settings_Tas+0x324>)
 8011950:	49b8      	ldr	r1, [pc, #736]	; (8011c34 <vRW_Settings_Tas+0x328>)
 8011952:	48b9      	ldr	r0, [pc, #740]	; (8011c38 <vRW_Settings_Tas+0x32c>)
 8011954:	f003 fa9e 	bl	8014e94 <SPI_flash_reg_cb>
	spi_fs_init(buff_read, buff_write, lookheadbuf, 256 );
 8011958:	f507 7282 	add.w	r2, r7, #260	; 0x104
 801195c:	f507 7101 	add.w	r1, r7, #516	; 0x204
 8011960:	f507 7041 	add.w	r0, r7, #772	; 0x304
 8011964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011968:	f019 f8bc 	bl	802aae4 <spi_fs_init>
	spi_fs_init_mutex(LfsMutexTake, LfsMutexRelease);
 801196c:	49b3      	ldr	r1, [pc, #716]	; (8011c3c <vRW_Settings_Tas+0x330>)
 801196e:	48b4      	ldr	r0, [pc, #720]	; (8011c40 <vRW_Settings_Tas+0x334>)
 8011970:	f019 f89c 	bl	802aaac <spi_fs_init_mutex>


	if (spi_fs_mount() < 0){
 8011974:	f019 f8ee 	bl	802ab54 <spi_fs_mount>
 8011978:	4603      	mov	r3, r0
 801197a:	2b00      	cmp	r3, #0
 801197c:	da03      	bge.n	8011986 <vRW_Settings_Tas+0x7a>
		spi_fs_format();
 801197e:	f019 f911 	bl	802aba4 <spi_fs_format>
		spi_fs_mount();
 8011982:	f019 f8e7 	bl	802ab54 <spi_fs_mount>
	}

	if (0 < spi_fs_file_size(POW_SETT_FILE)){
 8011986:	48af      	ldr	r0, [pc, #700]	; (8011c44 <vRW_Settings_Tas+0x338>)
 8011988:	f019 f994 	bl	802acb4 <spi_fs_file_size>
 801198c:	4603      	mov	r3, r0
 801198e:	2b00      	cmp	r3, #0
 8011990:	dd0f      	ble.n	80119b2 <vRW_Settings_Tas+0xa6>
		spi_fs_read_file_offset(POW_SETT_FILE, &PowerSett, 0, sizeof(PowerSett));
 8011992:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8011996:	2308      	movs	r3, #8
 8011998:	2200      	movs	r2, #0
 801199a:	48aa      	ldr	r0, [pc, #680]	; (8011c44 <vRW_Settings_Tas+0x338>)
 801199c:	f019 f90e 	bl	802abbc <spi_fs_read_file_offset>
		xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 80119a0:	4ba9      	ldr	r3, [pc, #676]	; (8011c48 <vRW_Settings_Tas+0x33c>)
 80119a2:	6818      	ldr	r0, [r3, #0]
 80119a4:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80119a8:	2302      	movs	r3, #2
 80119aa:	2200      	movs	r2, #0
 80119ac:	f00f f834 	bl	8020a18 <xQueueGenericSend>
 80119b0:	e013      	b.n	80119da <vRW_Settings_Tas+0xce>
	}else{
		PowerSett.resistance 	= DEFAULT_SHUNT_RESISTANSE;
 80119b2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80119b6:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80119ba:	4aa4      	ldr	r2, [pc, #656]	; (8011c4c <vRW_Settings_Tas+0x340>)
 80119bc:	605a      	str	r2, [r3, #4]
		PowerSett.save 			= 1;
 80119be:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80119c2:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80119c6:	2201      	movs	r2, #1
 80119c8:	701a      	strb	r2, [r3, #0]
		xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 80119ca:	4b9f      	ldr	r3, [pc, #636]	; (8011c48 <vRW_Settings_Tas+0x33c>)
 80119cc:	6818      	ldr	r0, [r3, #0]
 80119ce:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80119d2:	2302      	movs	r3, #2
 80119d4:	2200      	movs	r2, #0
 80119d6:	f00f f81f 	bl	8020a18 <xQueueGenericSend>
	}

	if (0 < spi_fs_file_size(MQTT_SETT_FILE)){
 80119da:	489d      	ldr	r0, [pc, #628]	; (8011c50 <vRW_Settings_Tas+0x344>)
 80119dc:	f019 f96a 	bl	802acb4 <spi_fs_file_size>
 80119e0:	4603      	mov	r3, r0
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	dd0f      	ble.n	8011a06 <vRW_Settings_Tas+0xfa>
		spi_fs_read_file_offset(MQTT_SETT_FILE, &MQTT_cred, 0, sizeof(MQTT_cred));
 80119e6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80119ea:	23c6      	movs	r3, #198	; 0xc6
 80119ec:	2200      	movs	r2, #0
 80119ee:	4898      	ldr	r0, [pc, #608]	; (8011c50 <vRW_Settings_Tas+0x344>)
 80119f0:	f019 f8e4 	bl	802abbc <spi_fs_read_file_offset>
		xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 80119f4:	4b97      	ldr	r3, [pc, #604]	; (8011c54 <vRW_Settings_Tas+0x348>)
 80119f6:	6818      	ldr	r0, [r3, #0]
 80119f8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80119fc:	2302      	movs	r3, #2
 80119fe:	2200      	movs	r2, #0
 8011a00:	f00f f80a 	bl	8020a18 <xQueueGenericSend>
 8011a04:	e027      	b.n	8011a56 <vRW_Settings_Tas+0x14a>
	}else{
		MQTT_cred.save 			= 1;
 8011a06:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a0a:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a0e:	2201      	movs	r2, #1
 8011a10:	701a      	strb	r2, [r3, #0]
		MQTT_cred.enable		= 0;
 8011a12:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a16:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	705a      	strb	r2, [r3, #1]
		MQTT_cred.login[0]		= '\0';
 8011a1e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a22:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a26:	2200      	movs	r2, #0
 8011a28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		MQTT_cred.pass[0]		= '\0';
 8011a2c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a30:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a34:	2200      	movs	r2, #0
 8011a36:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		MQTT_cred.uri[0]		= '\0';
 8011a3a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a3e:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a42:	2200      	movs	r2, #0
 8011a44:	709a      	strb	r2, [r3, #2]
		xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 8011a46:	4b83      	ldr	r3, [pc, #524]	; (8011c54 <vRW_Settings_Tas+0x348>)
 8011a48:	6818      	ldr	r0, [r3, #0]
 8011a4a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011a4e:	2302      	movs	r3, #2
 8011a50:	2200      	movs	r2, #0
 8011a52:	f00e ffe1 	bl	8020a18 <xQueueGenericSend>
	}

	if (0 < spi_fs_file_size(MB_TCP_SETT_FILE)){
 8011a56:	4880      	ldr	r0, [pc, #512]	; (8011c58 <vRW_Settings_Tas+0x34c>)
 8011a58:	f019 f92c 	bl	802acb4 <spi_fs_file_size>
 8011a5c:	4603      	mov	r3, r0
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	dd0f      	ble.n	8011a82 <vRW_Settings_Tas+0x176>
		spi_fs_read_file_offset(MB_TCP_SETT_FILE, &mb_tcp_sett, 0, sizeof(mb_tcp_sett));
 8011a62:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011a66:	2302      	movs	r3, #2
 8011a68:	2200      	movs	r2, #0
 8011a6a:	487b      	ldr	r0, [pc, #492]	; (8011c58 <vRW_Settings_Tas+0x34c>)
 8011a6c:	f019 f8a6 	bl	802abbc <spi_fs_read_file_offset>
		xQueueOverwrite(mb_tcp_settingsQHandle ,(void *)&mb_tcp_sett);
 8011a70:	4b7a      	ldr	r3, [pc, #488]	; (8011c5c <vRW_Settings_Tas+0x350>)
 8011a72:	6818      	ldr	r0, [r3, #0]
 8011a74:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011a78:	2302      	movs	r3, #2
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	f00e ffcc 	bl	8020a18 <xQueueGenericSend>
 8011a80:	e00b      	b.n	8011a9a <vRW_Settings_Tas+0x18e>
	}else{
		mb_tcp_sett.enable 		= 0;
 8011a82:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a86:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	705a      	strb	r2, [r3, #1]
		mb_tcp_sett.save		= 1;
 8011a8e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a92:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011a96:	2201      	movs	r2, #1
 8011a98:	701a      	strb	r2, [r3, #0]
	}

	if (0 < spi_fs_file_size(KW_COUNT_STOR_FILE)){
 8011a9a:	4871      	ldr	r0, [pc, #452]	; (8011c60 <vRW_Settings_Tas+0x354>)
 8011a9c:	f019 f90a 	bl	802acb4 <spi_fs_file_size>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	dd0b      	ble.n	8011abe <vRW_Settings_Tas+0x1b2>
		spi_fs_read_file_offset(KW_COUNT_STOR_FILE, &test_kWh_from_flash, 0, sizeof(test_kWh_from_flash));
 8011aa6:	2304      	movs	r3, #4
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	496e      	ldr	r1, [pc, #440]	; (8011c64 <vRW_Settings_Tas+0x358>)
 8011aac:	486c      	ldr	r0, [pc, #432]	; (8011c60 <vRW_Settings_Tas+0x354>)
 8011aae:	f019 f885 	bl	802abbc <spi_fs_read_file_offset>
		KWatt_h_old = test_kWh_from_flash;
 8011ab2:	4b6c      	ldr	r3, [pc, #432]	; (8011c64 <vRW_Settings_Tas+0x358>)
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8011aba:	6013      	str	r3, [r2, #0]
 8011abc:	e00d      	b.n	8011ada <vRW_Settings_Tas+0x1ce>
	}else{
		test_kWh_from_flash = 0.0;
 8011abe:	4b69      	ldr	r3, [pc, #420]	; (8011c64 <vRW_Settings_Tas+0x358>)
 8011ac0:	f04f 0200 	mov.w	r2, #0
 8011ac4:	601a      	str	r2, [r3, #0]
		KWatt_h_old 		= 0.0;
 8011ac6:	f04f 0300 	mov.w	r3, #0
 8011aca:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8011ace:	6013      	str	r3, [r2, #0]
		spi_fs_over_write_file(KW_COUNT_STOR_FILE, &test_kWh_from_flash, sizeof(test_kWh_from_flash));
 8011ad0:	2204      	movs	r2, #4
 8011ad2:	4964      	ldr	r1, [pc, #400]	; (8011c64 <vRW_Settings_Tas+0x358>)
 8011ad4:	4862      	ldr	r0, [pc, #392]	; (8011c60 <vRW_Settings_Tas+0x354>)
 8011ad6:	f019 f8b5 	bl	802ac44 <spi_fs_over_write_file>

	}

	spi_fs_mkdir("/web");
 8011ada:	4863      	ldr	r0, [pc, #396]	; (8011c68 <vRW_Settings_Tas+0x35c>)
 8011adc:	f019 f966 	bl	802adac <spi_fs_mkdir>
	spi_fs_remove_recurcuve_in("/firmware");
 8011ae0:	4862      	ldr	r0, [pc, #392]	; (8011c6c <vRW_Settings_Tas+0x360>)
 8011ae2:	f019 fa45 	bl	802af70 <spi_fs_remove_recurcuve_in>
	spi_fs_mkdir("/firmware");
 8011ae6:	4861      	ldr	r0, [pc, #388]	; (8011c6c <vRW_Settings_Tas+0x360>)
 8011ae8:	f019 f960 	bl	802adac <spi_fs_mkdir>
	/* Infinite loop */

  for(;;)
  {
	  xQueuePeek(Curr_sensor_settingsHandle, (void *)&PowerSett, 0);
 8011aec:	4b56      	ldr	r3, [pc, #344]	; (8011c48 <vRW_Settings_Tas+0x33c>)
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8011af4:	2200      	movs	r2, #0
 8011af6:	4618      	mov	r0, r3
 8011af8:	f00f fb14 	bl	8021124 <xQueuePeek>
	  if (PowerSett.save){
 8011afc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b00:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8011b04:	781b      	ldrb	r3, [r3, #0]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d014      	beq.n	8011b34 <vRW_Settings_Tas+0x228>
		  PowerSett.save = 0;
 8011b0a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b0e:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8011b12:	2200      	movs	r2, #0
 8011b14:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(POW_SETT_FILE, &PowerSett, sizeof(PowerSett));
 8011b16:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8011b1a:	2208      	movs	r2, #8
 8011b1c:	4619      	mov	r1, r3
 8011b1e:	4849      	ldr	r0, [pc, #292]	; (8011c44 <vRW_Settings_Tas+0x338>)
 8011b20:	f019 f890 	bl	802ac44 <spi_fs_over_write_file>
		  xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 8011b24:	4b48      	ldr	r3, [pc, #288]	; (8011c48 <vRW_Settings_Tas+0x33c>)
 8011b26:	6818      	ldr	r0, [r3, #0]
 8011b28:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8011b2c:	2302      	movs	r3, #2
 8011b2e:	2200      	movs	r2, #0
 8011b30:	f00e ff72 	bl	8020a18 <xQueueGenericSend>
	  }

	  xQueuePeek(mqttQHandle, (void *)&MQTT_cred, 0);
 8011b34:	4b47      	ldr	r3, [pc, #284]	; (8011c54 <vRW_Settings_Tas+0x348>)
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	4618      	mov	r0, r3
 8011b40:	f00f faf0 	bl	8021124 <xQueuePeek>
	  if (MQTT_cred.save){
 8011b44:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b48:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011b4c:	781b      	ldrb	r3, [r3, #0]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d014      	beq.n	8011b7c <vRW_Settings_Tas+0x270>
		  MQTT_cred.save = 0;
 8011b52:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b56:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(MQTT_SETT_FILE, &MQTT_cred, sizeof(MQTT_cred));
 8011b5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011b62:	22c6      	movs	r2, #198	; 0xc6
 8011b64:	4619      	mov	r1, r3
 8011b66:	483a      	ldr	r0, [pc, #232]	; (8011c50 <vRW_Settings_Tas+0x344>)
 8011b68:	f019 f86c 	bl	802ac44 <spi_fs_over_write_file>
		  xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 8011b6c:	4b39      	ldr	r3, [pc, #228]	; (8011c54 <vRW_Settings_Tas+0x348>)
 8011b6e:	6818      	ldr	r0, [r3, #0]
 8011b70:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011b74:	2302      	movs	r3, #2
 8011b76:	2200      	movs	r2, #0
 8011b78:	f00e ff4e 	bl	8020a18 <xQueueGenericSend>
	  }

	  xQueuePeek(mb_tcp_settingsQHandle, (void *)&mb_tcp_sett, 0);
 8011b7c:	4b37      	ldr	r3, [pc, #220]	; (8011c5c <vRW_Settings_Tas+0x350>)
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011b84:	2200      	movs	r2, #0
 8011b86:	4618      	mov	r0, r3
 8011b88:	f00f facc 	bl	8021124 <xQueuePeek>
	  if (mb_tcp_sett.save){
 8011b8c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b90:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011b94:	781b      	ldrb	r3, [r3, #0]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d00c      	beq.n	8011bb4 <vRW_Settings_Tas+0x2a8>
		  mb_tcp_sett.save = 0;
 8011b9a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b9e:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(MB_TCP_SETT_FILE, &mb_tcp_sett, sizeof(mb_tcp_sett));
 8011ba6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011baa:	2202      	movs	r2, #2
 8011bac:	4619      	mov	r1, r3
 8011bae:	482a      	ldr	r0, [pc, #168]	; (8011c58 <vRW_Settings_Tas+0x34c>)
 8011bb0:	f019 f848 	bl	802ac44 <spi_fs_over_write_file>
	  }

	  xQueuePeek(PowerDataQHandle, (void *)&PowerData, 0);
 8011bb4:	4b2e      	ldr	r3, [pc, #184]	; (8011c70 <vRW_Settings_Tas+0x364>)
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	f107 010c 	add.w	r1, r7, #12
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	f00f fab0 	bl	8021124 <xQueuePeek>

	  if ((next_update < time_counter) || ((PowerData.KWatt_h - KWatt_h_old)> 1.0)){
 8011bc4:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8011bc8:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d312      	bcc.n	8011bf6 <vRW_Settings_Tas+0x2ea>
 8011bd0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011bd4:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8011bd8:	ed93 7a02 	vldr	s14, [r3, #8]
 8011bdc:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8011be0:	edd3 7a00 	vldr	s15, [r3]
 8011be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011be8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011bec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bf4:	dd0d      	ble.n	8011c12 <vRW_Settings_Tas+0x306>
		  spi_fs_over_write_file(KW_COUNT_STOR_FILE, &PowerData.KWatt_h, sizeof(PowerData.KWatt_h));
 8011bf6:	f107 030c 	add.w	r3, r7, #12
 8011bfa:	3308      	adds	r3, #8
 8011bfc:	2204      	movs	r2, #4
 8011bfe:	4619      	mov	r1, r3
 8011c00:	4817      	ldr	r0, [pc, #92]	; (8011c60 <vRW_Settings_Tas+0x354>)
 8011c02:	f019 f81f 	bl	802ac44 <spi_fs_over_write_file>
		  next_update += ENERGY_VALUE_SAVE_INTERVAL;
 8011c06:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8011c0a:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8011c0e:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	  }

	  time_counter ++;
 8011c12:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8011c16:	3301      	adds	r3, #1
 8011c18:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
    osDelay(delay1s);
 8011c1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011c20:	f00e f9a4 	bl	801ff6c <osDelay>
	  xQueuePeek(Curr_sensor_settingsHandle, (void *)&PowerSett, 0);
 8011c24:	e762      	b.n	8011aec <vRW_Settings_Tas+0x1e0>
 8011c26:	bf00      	nop
 8011c28:	20000328 	.word	0x20000328
 8011c2c:	080153f5 	.word	0x080153f5
 8011c30:	080153d1 	.word	0x080153d1
 8011c34:	08015431 	.word	0x08015431
 8011c38:	08015419 	.word	0x08015419
 8011c3c:	08011115 	.word	0x08011115
 8011c40:	080110f9 	.word	0x080110f9
 8011c44:	08031794 	.word	0x08031794
 8011c48:	20000450 	.word	0x20000450
 8011c4c:	3a83126f 	.word	0x3a83126f
 8011c50:	080317a4 	.word	0x080317a4
 8011c54:	20000454 	.word	0x20000454
 8011c58:	080317b4 	.word	0x080317b4
 8011c5c:	20000458 	.word	0x20000458
 8011c60:	080317c8 	.word	0x080317c8
 8011c64:	20000490 	.word	0x20000490
 8011c68:	080317dc 	.word	0x080317dc
 8011c6c:	080317e4 	.word	0x080317e4
 8011c70:	2000044c 	.word	0x2000044c

08011c74 <vOneSecondTickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vOneSecondTickTask */
void vOneSecondTickTask(void *argument)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b084      	sub	sp, #16
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vOneSecondTickTask */
	uint32_t seconds;
	seconds = 0;
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	seconds++ ;
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	3301      	adds	r3, #1
 8011c84:	60fb      	str	r3, [r7, #12]
	DHCP_time_handler();
 8011c86:	f00a f89f 	bl	801bdc8 <DHCP_time_handler>
	httpServer_time_handler();
 8011c8a:	f00d fc7b 	bl	801f584 <httpServer_time_handler>
	dns_service_increment_second();
 8011c8e:	f00a fe29 	bl	801c8e4 <dns_service_increment_second>
	xQueueOverwrite(uptimeQHandle, (void *)&seconds);
 8011c92:	4b06      	ldr	r3, [pc, #24]	; (8011cac <vOneSecondTickTask+0x38>)
 8011c94:	6818      	ldr	r0, [r3, #0]
 8011c96:	f107 010c 	add.w	r1, r7, #12
 8011c9a:	2302      	movs	r3, #2
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	f00e febb 	bl	8020a18 <xQueueGenericSend>
    osDelay(delay1s);
 8011ca2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011ca6:	f00e f961 	bl	801ff6c <osDelay>
	seconds++ ;
 8011caa:	e7e9      	b.n	8011c80 <vOneSecondTickTask+0xc>
 8011cac:	2000045c 	.word	0x2000045c

08011cb0 <vMaintEthTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vMaintEthTask */
void vMaintEthTask(void *argument)
{
 8011cb0:	b590      	push	{r4, r7, lr}
 8011cb2:	f5ad 5d84 	sub.w	sp, sp, #4224	; 0x1080
 8011cb6:	b083      	sub	sp, #12
 8011cb8:	af12      	add	r7, sp, #72	; 0x48
 8011cba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011cbe:	f843 0c3c 	str.w	r0, [r3, #-60]
	  Ethernet_info_struct	EthernetInfo;
	  uint8_t 				i;
	  uint8_t 				DHCP_DATABUF[SOCKET_BUFF_SIZE];
	  uint8_t				DNS_buff[SOCKET_BUFF_SIZE];

	  memset(&EthernetInfo, 0, sizeof(EthernetInfo));
 8011cc2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011cc6:	f103 0308 	add.w	r3, r3, #8
 8011cca:	2220      	movs	r2, #32
 8011ccc:	2100      	movs	r1, #0
 8011cce:	4618      	mov	r0, r3
 8011cd0:	f01b fcfc 	bl	802d6cc <memset>
	  memset(&NetInfo, 		0, sizeof(NetInfo));
 8011cd4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011cd8:	f103 0308 	add.w	r3, r3, #8
 8011cdc:	2217      	movs	r2, #23
 8011cde:	2100      	movs	r1, #0
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	f01b fcf3 	bl	802d6cc <memset>

	  NetInfo.mac[0]	= 0x40;
 8011ce6:	2340      	movs	r3, #64	; 0x40
 8011ce8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011cec:	f102 0208 	add.w	r2, r2, #8
 8011cf0:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[1]	= 0x08;
 8011cf2:	2308      	movs	r3, #8
 8011cf4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011cf8:	f102 0209 	add.w	r2, r2, #9
 8011cfc:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[2]	= *(uint8_t*)(UID_BASE);
 8011cfe:	4bdc      	ldr	r3, [pc, #880]	; (8012070 <vMaintEthTask+0x3c0>)
 8011d00:	781b      	ldrb	r3, [r3, #0]
 8011d02:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d06:	f102 020a 	add.w	r2, r2, #10
 8011d0a:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[3]	= *(uint8_t*)(UID_BASE + 0x01);
 8011d0c:	4bd9      	ldr	r3, [pc, #868]	; (8012074 <vMaintEthTask+0x3c4>)
 8011d0e:	781b      	ldrb	r3, [r3, #0]
 8011d10:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d14:	f102 020b 	add.w	r2, r2, #11
 8011d18:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[4]	= *(uint8_t*)(UID_BASE + 0x02);
 8011d1a:	4bd7      	ldr	r3, [pc, #860]	; (8012078 <vMaintEthTask+0x3c8>)
 8011d1c:	781b      	ldrb	r3, [r3, #0]
 8011d1e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d22:	f102 020c 	add.w	r2, r2, #12
 8011d26:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[5]	= *(uint8_t*)(UID_BASE + 0x03);
 8011d28:	4bd4      	ldr	r3, [pc, #848]	; (801207c <vMaintEthTask+0x3cc>)
 8011d2a:	781b      	ldrb	r3, [r3, #0]
 8011d2c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d30:	f102 020d 	add.w	r2, r2, #13
 8011d34:	7013      	strb	r3, [r2, #0]

	  memcpy(&EthernetInfo.mac, &NetInfo.mac, sizeof(NetInfo.mac));
 8011d36:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011d3a:	f103 030b 	add.w	r3, r3, #11
 8011d3e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d42:	f102 0208 	add.w	r2, r2, #8
 8011d46:	6810      	ldr	r0, [r2, #0]
 8011d48:	6018      	str	r0, [r3, #0]
 8011d4a:	8892      	ldrh	r2, [r2, #4]
 8011d4c:	809a      	strh	r2, [r3, #4]

		//NetInfo.ip[0]	= 0, NetInfo.ip[1] 	= 0, NetInfo.ip[2] 	= 0, NetInfo.ip[3] 	= 0;
		//NetInfo.sn[0] 	= 0, NetInfo.sn[1] 	= 0, NetInfo.sn[2] 	= 0, NetInfo.sn[3] 	= 0;
		//NetInfo.gw[0] 	= 0, NetInfo.gw[1] 	= 0, NetInfo.gw[2] 	= 0, NetInfo.gw[3] 	= 0;
		//NetInfo.dns[0] 	= 0, NetInfo.dns[1] = 0, NetInfo.dns[2] = 0, NetInfo.dns[3] = 0;
		NetInfo.dhcp 	= NETINFO_DHCP;
 8011d4e:	2302      	movs	r3, #2
 8011d50:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d54:	f102 021e 	add.w	r2, r2, #30
 8011d58:	7013      	strb	r3, [r2, #0]
 8011d5a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011d5e:	f103 030e 	add.w	r3, r3, #14
 8011d62:	681b      	ldr	r3, [r3, #0]
		// TODO rewrite with memcpy function

		memcpy(&EthernetInfo.ip, &NetInfo.ip, sizeof(NetInfo.ip));
 8011d64:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011d68:	f102 0211 	add.w	r2, r2, #17
 8011d6c:	6013      	str	r3, [r2, #0]
 8011d6e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011d72:	f103 0312 	add.w	r3, r3, #18
 8011d76:	681b      	ldr	r3, [r3, #0]
		memcpy(&EthernetInfo.sn, &NetInfo.sn, sizeof(NetInfo.sn));
 8011d78:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011d7c:	f102 0215 	add.w	r2, r2, #21
 8011d80:	6013      	str	r3, [r2, #0]
 8011d82:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011d86:	f103 0316 	add.w	r3, r3, #22
 8011d8a:	681b      	ldr	r3, [r3, #0]
		memcpy(&EthernetInfo.gw, &NetInfo.gw, sizeof(NetInfo.gw));
 8011d8c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011d90:	f102 0219 	add.w	r2, r2, #25
 8011d94:	6013      	str	r3, [r2, #0]
 8011d96:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011d9a:	f103 031a 	add.w	r3, r3, #26
 8011d9e:	681b      	ldr	r3, [r3, #0]
		memcpy(&EthernetInfo.dns, &NetInfo.dns, sizeof(NetInfo.dns));
 8011da0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011da4:	f102 021d 	add.w	r2, r2, #29
 8011da8:	6013      	str	r3, [r2, #0]
							EthernetInfo.sn[i] 	= NetInfo.sn[i];
							EthernetInfo.gw[i] 	= NetInfo.gw[i];
							EthernetInfo.dns[i] = NetInfo.dns[i];
						}
*/
	  Reg_eth_spi(hspi3);
 8011daa:	4cb5      	ldr	r4, [pc, #724]	; (8012080 <vMaintEthTask+0x3d0>)
 8011dac:	4668      	mov	r0, sp
 8011dae:	f104 0310 	add.w	r3, r4, #16
 8011db2:	2248      	movs	r2, #72	; 0x48
 8011db4:	4619      	mov	r1, r3
 8011db6:	f01b fe5e 	bl	802da76 <memcpy>
 8011dba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011dbe:	f00d ff33 	bl	801fc28 <Reg_eth_spi>
	  w5500_reset_cb(Eth_reset_on, Eth_reset_off);
 8011dc2:	49b0      	ldr	r1, [pc, #704]	; (8012084 <vMaintEthTask+0x3d4>)
 8011dc4:	48b0      	ldr	r0, [pc, #704]	; (8012088 <vMaintEthTask+0x3d8>)
 8011dc6:	f00d fedb 	bl	801fb80 <w5500_reset_cb>
	  w5500_delay_cb(osDelay);
 8011dca:	48b0      	ldr	r0, [pc, #704]	; (801208c <vMaintEthTask+0x3dc>)
 8011dcc:	f00d fec0 	bl	801fb50 <w5500_delay_cb>
	  w5500_lib_init(&NetInfo);
 8011dd0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011dd4:	f103 0308 	add.w	r3, r3, #8
 8011dd8:	4618      	mov	r0, r3
 8011dda:	f00d fdbd 	bl	801f958 <w5500_lib_init>
	  reg_wizchip_spi_cbfunc(Eth_spi_resv_byte, Eth_spi_send_byte);
 8011dde:	49ac      	ldr	r1, [pc, #688]	; (8012090 <vMaintEthTask+0x3e0>)
 8011de0:	48ac      	ldr	r0, [pc, #688]	; (8012094 <vMaintEthTask+0x3e4>)
 8011de2:	f007 ff3b 	bl	8019c5c <reg_wizchip_spi_cbfunc>
	  reg_wizchip_cs_cbfunc(Eth_spi_select, Eth_spi_deselect);
 8011de6:	49ac      	ldr	r1, [pc, #688]	; (8012098 <vMaintEthTask+0x3e8>)
 8011de8:	48ac      	ldr	r0, [pc, #688]	; (801209c <vMaintEthTask+0x3ec>)
 8011dea:	f007 ff11 	bl	8019c10 <reg_wizchip_cs_cbfunc>
	  reg_wizchip_cris_cbfunc(EthMutexTake, EthMutexRelease);
 8011dee:	49ac      	ldr	r1, [pc, #688]	; (80120a0 <vMaintEthTask+0x3f0>)
 8011df0:	48ac      	ldr	r0, [pc, #688]	; (80120a4 <vMaintEthTask+0x3f4>)
 8011df2:	f007 fee7 	bl	8019bc4 <reg_wizchip_cris_cbfunc>
	  reg_dhcp_cbfunc(Callback_IPAssigned, Callback_IPAssigned, Callback_IPConflict);
 8011df6:	4aac      	ldr	r2, [pc, #688]	; (80120a8 <vMaintEthTask+0x3f8>)
 8011df8:	49ac      	ldr	r1, [pc, #688]	; (80120ac <vMaintEthTask+0x3fc>)
 8011dfa:	48ac      	ldr	r0, [pc, #688]	; (80120ac <vMaintEthTask+0x3fc>)
 8011dfc:	f008 fc92 	bl	801a724 <reg_dhcp_cbfunc>
	  dns_service_init(SERVICE_SOCKET, (uint8_t *)DNS_buff, SOCKET_BUFF_SIZE);
 8011e00:	f107 0320 	add.w	r3, r7, #32
 8011e04:	3b18      	subs	r3, #24
 8011e06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011e0a:	4619      	mov	r1, r3
 8011e0c:	2004      	movs	r0, #4
 8011e0e:	f00a fd13 	bl	801c838 <dns_service_init>
	  dns_service_reg_cb_net_ready(assigned_ip);
 8011e12:	48a7      	ldr	r0, [pc, #668]	; (80120b0 <vMaintEthTask+0x400>)
 8011e14:	f00a fcfe 	bl	801c814 <dns_service_reg_cb_net_ready>
	  dns_service_reg_cb_mutex(ServiceSockMutexTake, ServiceSockMutexRelease);
 8011e18:	49a6      	ldr	r1, [pc, #664]	; (80120b4 <vMaintEthTask+0x404>)
 8011e1a:	48a7      	ldr	r0, [pc, #668]	; (80120b8 <vMaintEthTask+0x408>)
 8011e1c:	f00a fcde 	bl	801c7dc <dns_service_reg_cb_mutex>


  /* Infinite loop */
  for(;;)
  {
		EthernetInfo.dhcp = NetInfo.dhcp;
 8011e20:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011e24:	f103 031e 	add.w	r3, r3, #30
 8011e28:	781b      	ldrb	r3, [r3, #0]
 8011e2a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011e2e:	f102 0201 	add.w	r2, r2, #1
 8011e32:	7013      	strb	r3, [r2, #0]
		EthernetInfo.link = 0;
 8011e34:	2300      	movs	r3, #0
 8011e36:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011e3a:	f102 0208 	add.w	r2, r2, #8
 8011e3e:	7013      	strb	r3, [r2, #0]

		if (w5500_init() != 0)continue; //try from begin in fail case
 8011e40:	f00d fe48 	bl	801fad4 <w5500_init>
 8011e44:	4603      	mov	r3, r0
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	f040 81eb 	bne.w	8012222 <vMaintEthTask+0x572>
		vTaskDelay(delay0_5s);
 8011e4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011e50:	f00f fe48 	bl	8021ae4 <vTaskDelay>
		setSHAR(NetInfo.mac);			//set mac address
 8011e54:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011e58:	f103 0308 	add.w	r3, r3, #8
 8011e5c:	2206      	movs	r2, #6
 8011e5e:	4619      	mov	r1, r3
 8011e60:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8011e64:	f006 fc6a 	bl	801873c <WIZCHIP_WRITE_BUF>

		if (NetInfo.dhcp == NETINFO_DHCP){
 8011e68:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011e6c:	f103 031e 	add.w	r3, r3, #30
 8011e70:	781b      	ldrb	r3, [r3, #0]
 8011e72:	2b02      	cmp	r3, #2
 8011e74:	d106      	bne.n	8011e84 <vMaintEthTask+0x1d4>
			DHCP_init(DHCP_SOCKET, DHCP_DATABUF);
 8011e76:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8011e7a:	4619      	mov	r1, r3
 8011e7c:	2000      	movs	r0, #0
 8011e7e:	f009 fef9 	bl	801bc74 <DHCP_init>
 8011e82:	e003      	b.n	8011e8c <vMaintEthTask+0x1dc>
			//todo DNS_init();
		}else{
			network_init();
 8011e84:	f00d fd78 	bl	801f978 <network_init>
			set_ip_aasigned();
 8011e88:	f00d fe18 	bl	801fabc <set_ip_aasigned>
			if (NetInfo.dhcp == NETINFO_DHCP){

			}
//xSemaphoreTake(SocketMutex, portMAX_DELAY);
			//osMutexAcquire(NetworkHandle, osWaitForever);
			SocketMutexTake();
 8011e8c:	f7ff f94e 	bl	801112c <SocketMutexTake>
			dhcp_rutine();
 8011e90:	f00d fdc2 	bl	801fa18 <dhcp_rutine>

			if (!link_status()){
 8011e94:	f00d fdd8 	bl	801fa48 <link_status>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	f040 80e0 	bne.w	8012060 <vMaintEthTask+0x3b0>
				NetInfo.ip[0]	= 0, NetInfo.ip[1] 	= 0, NetInfo.ip[2] 	= 0, NetInfo.ip[3] 	= 0;
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011ea6:	f102 020e 	add.w	r2, r2, #14
 8011eaa:	7013      	strb	r3, [r2, #0]
 8011eac:	2300      	movs	r3, #0
 8011eae:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011eb2:	f102 020f 	add.w	r2, r2, #15
 8011eb6:	7013      	strb	r3, [r2, #0]
 8011eb8:	2300      	movs	r3, #0
 8011eba:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011ebe:	f102 0210 	add.w	r2, r2, #16
 8011ec2:	7013      	strb	r3, [r2, #0]
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011eca:	f102 0211 	add.w	r2, r2, #17
 8011ece:	7013      	strb	r3, [r2, #0]
				NetInfo.sn[0] 	= 0, NetInfo.sn[1] 	= 0, NetInfo.sn[2] 	= 0, NetInfo.sn[3] 	= 0;
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011ed6:	f102 0212 	add.w	r2, r2, #18
 8011eda:	7013      	strb	r3, [r2, #0]
 8011edc:	2300      	movs	r3, #0
 8011ede:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011ee2:	f102 0213 	add.w	r2, r2, #19
 8011ee6:	7013      	strb	r3, [r2, #0]
 8011ee8:	2300      	movs	r3, #0
 8011eea:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011eee:	f102 0214 	add.w	r2, r2, #20
 8011ef2:	7013      	strb	r3, [r2, #0]
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011efa:	f102 0215 	add.w	r2, r2, #21
 8011efe:	7013      	strb	r3, [r2, #0]
				NetInfo.gw[0] 	= 0, NetInfo.gw[1] 	= 0, NetInfo.gw[2] 	= 0, NetInfo.gw[3] 	= 0;
 8011f00:	2300      	movs	r3, #0
 8011f02:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f06:	f102 0216 	add.w	r2, r2, #22
 8011f0a:	7013      	strb	r3, [r2, #0]
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f12:	f102 0217 	add.w	r2, r2, #23
 8011f16:	7013      	strb	r3, [r2, #0]
 8011f18:	2300      	movs	r3, #0
 8011f1a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f1e:	f102 0218 	add.w	r2, r2, #24
 8011f22:	7013      	strb	r3, [r2, #0]
 8011f24:	2300      	movs	r3, #0
 8011f26:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f2a:	f102 0219 	add.w	r2, r2, #25
 8011f2e:	7013      	strb	r3, [r2, #0]
				NetInfo.dns[0] 	= 0, NetInfo.dns[1] = 0, NetInfo.dns[2] = 0, NetInfo.dns[3] = 0;
 8011f30:	2300      	movs	r3, #0
 8011f32:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f36:	f102 021a 	add.w	r2, r2, #26
 8011f3a:	7013      	strb	r3, [r2, #0]
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f42:	f102 021b 	add.w	r2, r2, #27
 8011f46:	7013      	strb	r3, [r2, #0]
 8011f48:	2300      	movs	r3, #0
 8011f4a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f4e:	f102 021c 	add.w	r2, r2, #28
 8011f52:	7013      	strb	r3, [r2, #0]
 8011f54:	2300      	movs	r3, #0
 8011f56:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f5a:	f102 021d 	add.w	r2, r2, #29
 8011f5e:	7013      	strb	r3, [r2, #0]

//xSemaphoreGive(SocketMutex);
				//osMutexRelease(NetworkHandle);
				SocketMutexRelease();
 8011f60:	f7ff f8f2 	bl	8011148 <SocketMutexRelease>

				for(i = 0; i < 4; i++){
 8011f64:	2300      	movs	r3, #0
 8011f66:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f6a:	f102 021f 	add.w	r2, r2, #31
 8011f6e:	7013      	strb	r3, [r2, #0]
 8011f70:	e05a      	b.n	8012028 <vMaintEthTask+0x378>
					EthernetInfo.ip[i] 	= NetInfo.ip[i];
 8011f72:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011f76:	f103 031f 	add.w	r3, r3, #31
 8011f7a:	781a      	ldrb	r2, [r3, #0]
 8011f7c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011f80:	f103 031f 	add.w	r3, r3, #31
 8011f84:	781b      	ldrb	r3, [r3, #0]
 8011f86:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8011f8a:	443a      	add	r2, r7
 8011f8c:	f812 2c12 	ldrb.w	r2, [r2, #-18]
 8011f90:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8011f94:	443b      	add	r3, r7
 8011f96:	f803 2c2f 	strb.w	r2, [r3, #-47]
					EthernetInfo.sn[i] 	= NetInfo.sn[i];
 8011f9a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011f9e:	f103 031f 	add.w	r3, r3, #31
 8011fa2:	781a      	ldrb	r2, [r3, #0]
 8011fa4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011fa8:	f103 031f 	add.w	r3, r3, #31
 8011fac:	781b      	ldrb	r3, [r3, #0]
 8011fae:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8011fb2:	443a      	add	r2, r7
 8011fb4:	f812 2c0e 	ldrb.w	r2, [r2, #-14]
 8011fb8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8011fbc:	443b      	add	r3, r7
 8011fbe:	f803 2c2b 	strb.w	r2, [r3, #-43]
					EthernetInfo.gw[i] 	= NetInfo.gw[i];
 8011fc2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011fc6:	f103 031f 	add.w	r3, r3, #31
 8011fca:	781a      	ldrb	r2, [r3, #0]
 8011fcc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011fd0:	f103 031f 	add.w	r3, r3, #31
 8011fd4:	781b      	ldrb	r3, [r3, #0]
 8011fd6:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8011fda:	443a      	add	r2, r7
 8011fdc:	f812 2c0a 	ldrb.w	r2, [r2, #-10]
 8011fe0:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8011fe4:	443b      	add	r3, r7
 8011fe6:	f803 2c27 	strb.w	r2, [r3, #-39]
					EthernetInfo.dns[i] = NetInfo.dns[i];
 8011fea:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011fee:	f103 031f 	add.w	r3, r3, #31
 8011ff2:	781a      	ldrb	r2, [r3, #0]
 8011ff4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011ff8:	f103 031f 	add.w	r3, r3, #31
 8011ffc:	781b      	ldrb	r3, [r3, #0]
 8011ffe:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8012002:	443a      	add	r2, r7
 8012004:	f812 2c06 	ldrb.w	r2, [r2, #-6]
 8012008:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801200c:	443b      	add	r3, r7
 801200e:	f803 2c23 	strb.w	r2, [r3, #-35]
				for(i = 0; i < 4; i++){
 8012012:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012016:	f103 031f 	add.w	r3, r3, #31
 801201a:	781b      	ldrb	r3, [r3, #0]
 801201c:	3301      	adds	r3, #1
 801201e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8012022:	f102 021f 	add.w	r2, r2, #31
 8012026:	7013      	strb	r3, [r2, #0]
 8012028:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801202c:	f103 031f 	add.w	r3, r3, #31
 8012030:	781b      	ldrb	r3, [r3, #0]
 8012032:	2b03      	cmp	r3, #3
 8012034:	d99d      	bls.n	8011f72 <vMaintEthTask+0x2c2>
				}
				EthernetInfo.link 	= 0;
 8012036:	2300      	movs	r3, #0
 8012038:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 801203c:	f102 0208 	add.w	r2, r2, #8
 8012040:	7013      	strb	r3, [r2, #0]
				xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 8012042:	4b1e      	ldr	r3, [pc, #120]	; (80120bc <vMaintEthTask+0x40c>)
 8012044:	6818      	ldr	r0, [r3, #0]
 8012046:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 801204a:	f101 0108 	add.w	r1, r1, #8
 801204e:	2302      	movs	r3, #2
 8012050:	2200      	movs	r2, #0
 8012052:	f00e fce1 	bl	8020a18 <xQueueGenericSend>
				break;
 8012056:	bf00      	nop
			// SET DNS SERVER IP
			dns_service_set_dns_ip((uint8_t*)&EthernetInfo.dns);
			xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
			osDelay(delay1s);
		}
    osDelay(1);
 8012058:	2001      	movs	r0, #1
 801205a:	f00d ff87 	bl	801ff6c <osDelay>
 801205e:	e6df      	b.n	8011e20 <vMaintEthTask+0x170>
			for(i = 0; i < 4; i++){//todo rewrite for get info from dhcp calbac
 8012060:	2300      	movs	r3, #0
 8012062:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8012066:	f102 021f 	add.w	r2, r2, #31
 801206a:	7013      	strb	r3, [r2, #0]
 801206c:	e083      	b.n	8012176 <vMaintEthTask+0x4c6>
 801206e:	bf00      	nop
 8012070:	1fff7a10 	.word	0x1fff7a10
 8012074:	1fff7a11 	.word	0x1fff7a11
 8012078:	1fff7a12 	.word	0x1fff7a12
 801207c:	1fff7a13 	.word	0x1fff7a13
 8012080:	20000380 	.word	0x20000380
 8012084:	0801fbe1 	.word	0x0801fbe1
 8012088:	0801fbc9 	.word	0x0801fbc9
 801208c:	0801ff6d 	.word	0x0801ff6d
 8012090:	0801fc59 	.word	0x0801fc59
 8012094:	0801fc7d 	.word	0x0801fc7d
 8012098:	0801fc11 	.word	0x0801fc11
 801209c:	0801fbf9 	.word	0x0801fbf9
 80120a0:	080110e1 	.word	0x080110e1
 80120a4:	080110c5 	.word	0x080110c5
 80120a8:	0801f9ad 	.word	0x0801f9ad
 80120ac:	0801f9c5 	.word	0x0801f9c5
 80120b0:	0801faa5 	.word	0x0801faa5
 80120b4:	0801117d 	.word	0x0801117d
 80120b8:	08011161 	.word	0x08011161
 80120bc:	20000448 	.word	0x20000448
				EthernetInfo.ip[i] 	= NetInfo.ip[i];
 80120c0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80120c4:	f103 031f 	add.w	r3, r3, #31
 80120c8:	781a      	ldrb	r2, [r3, #0]
 80120ca:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80120ce:	f103 031f 	add.w	r3, r3, #31
 80120d2:	781b      	ldrb	r3, [r3, #0]
 80120d4:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 80120d8:	443a      	add	r2, r7
 80120da:	f812 2c12 	ldrb.w	r2, [r2, #-18]
 80120de:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80120e2:	443b      	add	r3, r7
 80120e4:	f803 2c2f 	strb.w	r2, [r3, #-47]
				EthernetInfo.sn[i] 	= NetInfo.sn[i];
 80120e8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80120ec:	f103 031f 	add.w	r3, r3, #31
 80120f0:	781a      	ldrb	r2, [r3, #0]
 80120f2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80120f6:	f103 031f 	add.w	r3, r3, #31
 80120fa:	781b      	ldrb	r3, [r3, #0]
 80120fc:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8012100:	443a      	add	r2, r7
 8012102:	f812 2c0e 	ldrb.w	r2, [r2, #-14]
 8012106:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801210a:	443b      	add	r3, r7
 801210c:	f803 2c2b 	strb.w	r2, [r3, #-43]
				EthernetInfo.gw[i] 	= NetInfo.gw[i];
 8012110:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012114:	f103 031f 	add.w	r3, r3, #31
 8012118:	781a      	ldrb	r2, [r3, #0]
 801211a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801211e:	f103 031f 	add.w	r3, r3, #31
 8012122:	781b      	ldrb	r3, [r3, #0]
 8012124:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8012128:	443a      	add	r2, r7
 801212a:	f812 2c0a 	ldrb.w	r2, [r2, #-10]
 801212e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8012132:	443b      	add	r3, r7
 8012134:	f803 2c27 	strb.w	r2, [r3, #-39]
				EthernetInfo.dns[i] = NetInfo.dns[i];
 8012138:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801213c:	f103 031f 	add.w	r3, r3, #31
 8012140:	781a      	ldrb	r2, [r3, #0]
 8012142:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012146:	f103 031f 	add.w	r3, r3, #31
 801214a:	781b      	ldrb	r3, [r3, #0]
 801214c:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8012150:	443a      	add	r2, r7
 8012152:	f812 2c06 	ldrb.w	r2, [r2, #-6]
 8012156:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801215a:	443b      	add	r3, r7
 801215c:	f803 2c23 	strb.w	r2, [r3, #-35]
			for(i = 0; i < 4; i++){//todo rewrite for get info from dhcp calbac
 8012160:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012164:	f103 031f 	add.w	r3, r3, #31
 8012168:	781b      	ldrb	r3, [r3, #0]
 801216a:	3301      	adds	r3, #1
 801216c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8012170:	f102 021f 	add.w	r2, r2, #31
 8012174:	7013      	strb	r3, [r2, #0]
 8012176:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801217a:	f103 031f 	add.w	r3, r3, #31
 801217e:	781b      	ldrb	r3, [r3, #0]
 8012180:	2b03      	cmp	r3, #3
 8012182:	d99d      	bls.n	80120c0 <vMaintEthTask+0x410>
			EthernetInfo.link 		= 1;
 8012184:	2301      	movs	r3, #1
 8012186:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 801218a:	f102 0208 	add.w	r2, r2, #8
 801218e:	7013      	strb	r3, [r2, #0]
			EthernetInfo.speed 		= link_speed();
 8012190:	f00d fc7c 	bl	801fa8c <link_speed>
 8012194:	4603      	mov	r3, r0
 8012196:	b2db      	uxtb	r3, r3
 8012198:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 801219c:	f102 020a 	add.w	r2, r2, #10
 80121a0:	7013      	strb	r3, [r2, #0]
			EthernetInfo.duplex 	= link_duplex();
 80121a2:	f00d fc67 	bl	801fa74 <link_duplex>
 80121a6:	4603      	mov	r3, r0
 80121a8:	b2db      	uxtb	r3, r3
 80121aa:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80121ae:	f102 0209 	add.w	r2, r2, #9
 80121b2:	7013      	strb	r3, [r2, #0]
			EthernetInfo.lease_s	= getDHCPLeasetime();
 80121b4:	f009 fe96 	bl	801bee4 <getDHCPLeasetime>
 80121b8:	4603      	mov	r3, r0
 80121ba:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80121be:	f102 0204 	add.w	r2, r2, #4
 80121c2:	6013      	str	r3, [r2, #0]
			SocketMutexRelease();
 80121c4:	f7fe ffc0 	bl	8011148 <SocketMutexRelease>
			if (NetInfo.ip[0]== 0){
 80121c8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80121cc:	f103 030e 	add.w	r3, r3, #14
 80121d0:	781b      	ldrb	r3, [r3, #0]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d10e      	bne.n	80121f4 <vMaintEthTask+0x544>
				xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 80121d6:	4b14      	ldr	r3, [pc, #80]	; (8012228 <vMaintEthTask+0x578>)
 80121d8:	6818      	ldr	r0, [r3, #0]
 80121da:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80121de:	f101 0108 	add.w	r1, r1, #8
 80121e2:	2302      	movs	r3, #2
 80121e4:	2200      	movs	r2, #0
 80121e6:	f00e fc17 	bl	8020a18 <xQueueGenericSend>
				osDelay(delay1s);
 80121ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80121ee:	f00d febd 	bl	801ff6c <osDelay>
				continue;
 80121f2:	e015      	b.n	8012220 <vMaintEthTask+0x570>
			dns_service_set_dns_ip((uint8_t*)&EthernetInfo.dns);
 80121f4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80121f8:	f103 0308 	add.w	r3, r3, #8
 80121fc:	3315      	adds	r3, #21
 80121fe:	4618      	mov	r0, r3
 8012200:	f00a fb34 	bl	801c86c <dns_service_set_dns_ip>
			xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 8012204:	4b08      	ldr	r3, [pc, #32]	; (8012228 <vMaintEthTask+0x578>)
 8012206:	6818      	ldr	r0, [r3, #0]
 8012208:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 801220c:	f101 0108 	add.w	r1, r1, #8
 8012210:	2302      	movs	r3, #2
 8012212:	2200      	movs	r2, #0
 8012214:	f00e fc00 	bl	8020a18 <xQueueGenericSend>
			osDelay(delay1s);
 8012218:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801221c:	f00d fea6 	bl	801ff6c <osDelay>
			if (NetInfo.dhcp == NETINFO_DHCP){
 8012220:	e634      	b.n	8011e8c <vMaintEthTask+0x1dc>
		if (w5500_init() != 0)continue; //try from begin in fail case
 8012222:	bf00      	nop
		EthernetInfo.dhcp = NetInfo.dhcp;
 8012224:	e5fc      	b.n	8011e20 <vMaintEthTask+0x170>
 8012226:	bf00      	nop
 8012228:	20000448 	.word	0x20000448

0801222c <vDebugMemUsage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vDebugMemUsage */
void vDebugMemUsage(void *argument)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b084      	sub	sp, #16
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vDebugMemUsage */
	uint32_t	mem;
  /* Infinite loop */
  for(;;)
  {
	  mem = osThreadGetStackSpace(defaultTaskHandle);
 8012234:	4b1d      	ldr	r3, [pc, #116]	; (80122ac <vDebugMemUsage+0x80>)
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	4618      	mov	r0, r3
 801223a:	f00d fe59 	bl	801fef0 <osThreadGetStackSpace>
 801223e:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(SensorsTaskHandle);
 8012240:	4b1b      	ldr	r3, [pc, #108]	; (80122b0 <vDebugMemUsage+0x84>)
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	4618      	mov	r0, r3
 8012246:	f00d fe53 	bl	801fef0 <osThreadGetStackSpace>
 801224a:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(RW_Settings_TasHandle);
 801224c:	4b19      	ldr	r3, [pc, #100]	; (80122b4 <vDebugMemUsage+0x88>)
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	4618      	mov	r0, r3
 8012252:	f00d fe4d 	bl	801fef0 <osThreadGetStackSpace>
 8012256:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(oneSecondTickTaHandle);
 8012258:	4b17      	ldr	r3, [pc, #92]	; (80122b8 <vDebugMemUsage+0x8c>)
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	4618      	mov	r0, r3
 801225e:	f00d fe47 	bl	801fef0 <osThreadGetStackSpace>
 8012262:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(maintEthTaskHandle);
 8012264:	4b15      	ldr	r3, [pc, #84]	; (80122bc <vDebugMemUsage+0x90>)
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	4618      	mov	r0, r3
 801226a:	f00d fe41 	bl	801fef0 <osThreadGetStackSpace>
 801226e:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(DebugMemUsageTHandle);
 8012270:	4b13      	ldr	r3, [pc, #76]	; (80122c0 <vDebugMemUsage+0x94>)
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	4618      	mov	r0, r3
 8012276:	f00d fe3b 	bl	801fef0 <osThreadGetStackSpace>
 801227a:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(httpServTaskHandle);
 801227c:	4b11      	ldr	r3, [pc, #68]	; (80122c4 <vDebugMemUsage+0x98>)
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	4618      	mov	r0, r3
 8012282:	f00d fe35 	bl	801fef0 <osThreadGetStackSpace>
 8012286:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(NULL);
 8012288:	2000      	movs	r0, #0
 801228a:	f00d fe31 	bl	801fef0 <osThreadGetStackSpace>
 801228e:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(NULL);
 8012290:	2000      	movs	r0, #0
 8012292:	f00d fe2d 	bl	801fef0 <osThreadGetStackSpace>
 8012296:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(NULL);
 8012298:	2000      	movs	r0, #0
 801229a:	f00d fe29 	bl	801fef0 <osThreadGetStackSpace>
 801229e:	60f8      	str	r0, [r7, #12]
	  osDelay(delay1s);
 80122a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80122a4:	f00d fe62 	bl	801ff6c <osDelay>
	  mem = osThreadGetStackSpace(defaultTaskHandle);
 80122a8:	e7c4      	b.n	8012234 <vDebugMemUsage+0x8>
 80122aa:	bf00      	nop
 80122ac:	20000420 	.word	0x20000420
 80122b0:	20000424 	.word	0x20000424
 80122b4:	20000428 	.word	0x20000428
 80122b8:	2000042c 	.word	0x2000042c
 80122bc:	20000430 	.word	0x20000430
 80122c0:	20000434 	.word	0x20000434
 80122c4:	20000438 	.word	0x20000438

080122c8 <httpServ>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_httpServ */
void httpServ(void *argument)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 80122ce:	b084      	sub	sp, #16
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80122d6:	f843 0c2c 	str.w	r0, [r3, #-44]
  /* USER CODE BEGIN httpServ */
	Ethernet_info_struct	EthernetInfo;
	uint8_t 				socknumlist[] = {HTTP_SERVER_SOCKET, HTTP_SERVER_SOCKET1, HTTP_SERVER_SOCKET2};
 80122da:	4a4d      	ldr	r2, [pc, #308]	; (8012410 <httpServ+0x148>)
 80122dc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80122e0:	f103 0308 	add.w	r3, r3, #8
 80122e4:	6812      	ldr	r2, [r2, #0]
 80122e6:	4611      	mov	r1, r2
 80122e8:	8019      	strh	r1, [r3, #0]
 80122ea:	3302      	adds	r3, #2
 80122ec:	0c12      	lsrs	r2, r2, #16
 80122ee:	701a      	strb	r2, [r3, #0]
	uint8_t 				http_buffer_rx[2048];
	uint8_t 				http_buffer_tx[2048];
	uint8_t 				http_nsockets = sizeof(socknumlist) / sizeof(socknumlist[0]);
 80122f0:	2303      	movs	r3, #3
 80122f2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80122f6:	f102 020e 	add.w	r2, r2, #14
 80122fa:	7013      	strb	r3, [r2, #0]
	uint8_t					i;

	httpServer_init(http_buffer_tx, http_buffer_rx, http_nsockets, socknumlist);		// Tx/Rx buffers (2 kB) / The number of W5500 chip H/W sockets in use
 80122fc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012300:	f103 0308 	add.w	r3, r3, #8
 8012304:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8012308:	f102 020e 	add.w	r2, r2, #14
 801230c:	7812      	ldrb	r2, [r2, #0]
 801230e:	f607 0108 	addw	r1, r7, #2056	; 0x808
 8012312:	f107 0010 	add.w	r0, r7, #16
 8012316:	3808      	subs	r0, #8
 8012318:	f00c fb5c 	bl	801e9d4 <httpServer_init>
	reg_external_post_cgi_processor(http_post_cgi_processor);
 801231c:	483d      	ldr	r0, [pc, #244]	; (8012414 <httpServ+0x14c>)
 801231e:	f00d facb 	bl	801f8b8 <reg_external_post_cgi_processor>
	reg_external_get_cgi_processor(http_get_cgi_processor);
 8012322:	483d      	ldr	r0, [pc, #244]	; (8012418 <httpServ+0x150>)
 8012324:	f00d fae0 	bl	801f8e8 <reg_external_get_cgi_processor>

	http_parse_params_init(PowerDataQHandle,			PowrData);
 8012328:	4b3c      	ldr	r3, [pc, #240]	; (801241c <httpServ+0x154>)
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	2103      	movs	r1, #3
 801232e:	4618      	mov	r0, r3
 8012330:	f000 fcde 	bl	8012cf0 <http_parse_params_init>
	http_parse_params_init(Curr_sensor_settingsHandle,	PowrSensSett);
 8012334:	4b3a      	ldr	r3, [pc, #232]	; (8012420 <httpServ+0x158>)
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	2104      	movs	r1, #4
 801233a:	4618      	mov	r0, r3
 801233c:	f000 fcd8 	bl	8012cf0 <http_parse_params_init>
	http_parse_params_init(mqttQHandle,					MQTT);
 8012340:	4b38      	ldr	r3, [pc, #224]	; (8012424 <httpServ+0x15c>)
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	2100      	movs	r1, #0
 8012346:	4618      	mov	r0, r3
 8012348:	f000 fcd2 	bl	8012cf0 <http_parse_params_init>
	http_parse_params_init(mb_tcp_settingsQHandle,		ModBusTCP);
 801234c:	4b36      	ldr	r3, [pc, #216]	; (8012428 <httpServ+0x160>)
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	2102      	movs	r1, #2
 8012352:	4618      	mov	r0, r3
 8012354:	f000 fccc 	bl	8012cf0 <http_parse_params_init>
	http_parse_params_init(uptimeQHandle,				Uptime);
 8012358:	4b34      	ldr	r3, [pc, #208]	; (801242c <httpServ+0x164>)
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	2105      	movs	r1, #5
 801235e:	4618      	mov	r0, r3
 8012360:	f000 fcc6 	bl	8012cf0 <http_parse_params_init>


	reg_httpServer_webContent((uint8_t *)"index.html",			(uint8_t *)index_page);
 8012364:	4932      	ldr	r1, [pc, #200]	; (8012430 <httpServ+0x168>)
 8012366:	4833      	ldr	r0, [pc, #204]	; (8012434 <httpServ+0x16c>)
 8012368:	f00d f928 	bl	801f5bc <reg_httpServer_webContent>
	reg_httpServer_webContent((uint8_t *)"power_settings.html",	(uint8_t *)setting_resistance_sens_page);
 801236c:	4932      	ldr	r1, [pc, #200]	; (8012438 <httpServ+0x170>)
 801236e:	4833      	ldr	r0, [pc, #204]	; (801243c <httpServ+0x174>)
 8012370:	f00d f924 	bl	801f5bc <reg_httpServer_webContent>
	reg_httpServer_webContent((uint8_t *)"mqtt.html",			(uint8_t *)conf_page_mqtt);
 8012374:	4932      	ldr	r1, [pc, #200]	; (8012440 <httpServ+0x178>)
 8012376:	4833      	ldr	r0, [pc, #204]	; (8012444 <httpServ+0x17c>)
 8012378:	f00d f920 	bl	801f5bc <reg_httpServer_webContent>


  /* Infinite loop */
  for(;;)
  {
	  xQueuePeek(EthernetInfoQHandle, &EthernetInfo, 0);
 801237c:	4b32      	ldr	r3, [pc, #200]	; (8012448 <httpServ+0x180>)
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8012384:	f101 010c 	add.w	r1, r1, #12
 8012388:	2200      	movs	r2, #0
 801238a:	4618      	mov	r0, r3
 801238c:	f00e feca 	bl	8021124 <xQueuePeek>
	  if ((EthernetInfo.link == ETH_LINK_UP) && (assigned_ip() == true)){
 8012390:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012394:	f103 030c 	add.w	r3, r3, #12
 8012398:	781b      	ldrb	r3, [r3, #0]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d02f      	beq.n	80123fe <httpServ+0x136>
 801239e:	f00d fb81 	bl	801faa4 <assigned_ip>
 80123a2:	4603      	mov	r3, r0
 80123a4:	2b01      	cmp	r3, #1
 80123a6:	d12a      	bne.n	80123fe <httpServ+0x136>
		  for(i = 0 ; i < http_nsockets; i++){
 80123a8:	2300      	movs	r3, #0
 80123aa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80123ae:	f102 020f 	add.w	r2, r2, #15
 80123b2:	7013      	strb	r3, [r2, #0]
 80123b4:	e016      	b.n	80123e4 <httpServ+0x11c>
			  SocketMutexTake();
 80123b6:	f7fe feb9 	bl	801112c <SocketMutexTake>
			  httpServer_run(i); // HTTP Server handler
 80123ba:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80123be:	f103 030f 	add.w	r3, r3, #15
 80123c2:	781b      	ldrb	r3, [r3, #0]
 80123c4:	4618      	mov	r0, r3
 80123c6:	f00c fb21 	bl	801ea0c <httpServer_run>
			  SocketMutexRelease();
 80123ca:	f7fe febd 	bl	8011148 <SocketMutexRelease>
		  for(i = 0 ; i < http_nsockets; i++){
 80123ce:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80123d2:	f103 030f 	add.w	r3, r3, #15
 80123d6:	781b      	ldrb	r3, [r3, #0]
 80123d8:	3301      	adds	r3, #1
 80123da:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80123de:	f102 020f 	add.w	r2, r2, #15
 80123e2:	7013      	strb	r3, [r2, #0]
 80123e4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80123e8:	f103 030f 	add.w	r3, r3, #15
 80123ec:	781a      	ldrb	r2, [r3, #0]
 80123ee:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80123f2:	f103 030e 	add.w	r3, r3, #14
 80123f6:	781b      	ldrb	r3, [r3, #0]
 80123f8:	429a      	cmp	r2, r3
 80123fa:	d3dc      	bcc.n	80123b6 <httpServ+0xee>
	  if ((EthernetInfo.link == ETH_LINK_UP) && (assigned_ip() == true)){
 80123fc:	e003      	b.n	8012406 <httpServ+0x13e>
			  //osDelay(delay0_1s);

		  }
	  }else{
		  osDelay(delay1s);
 80123fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012402:	f00d fdb3 	bl	801ff6c <osDelay>
	  }
	  osDelay(delay0_1s);
 8012406:	2064      	movs	r0, #100	; 0x64
 8012408:	f00d fdb0 	bl	801ff6c <osDelay>
	  xQueuePeek(EthernetInfoQHandle, &EthernetInfo, 0);
 801240c:	e7b6      	b.n	801237c <httpServ+0xb4>
 801240e:	bf00      	nop
 8012410:	08032404 	.word	0x08032404
 8012414:	08013a01 	.word	0x08013a01
 8012418:	08013b15 	.word	0x08013b15
 801241c:	2000044c 	.word	0x2000044c
 8012420:	20000450 	.word	0x20000450
 8012424:	20000454 	.word	0x20000454
 8012428:	20000458 	.word	0x20000458
 801242c:	2000045c 	.word	0x2000045c
 8012430:	080317f0 	.word	0x080317f0
 8012434:	08031b0c 	.word	0x08031b0c
 8012438:	08031b18 	.word	0x08031b18
 801243c:	08031e4c 	.word	0x08031e4c
 8012440:	08031e60 	.word	0x08031e60
 8012444:	080323f8 	.word	0x080323f8
 8012448:	20000448 	.word	0x20000448

0801244c <vMQTT_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vMQTT_Task */
void vMQTT_Task(void *argument)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	f5ad 6d22 	sub.w	sp, sp, #2592	; 0xa20
 8012452:	af02      	add	r7, sp, #8
 8012454:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8012458:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 801245c:	6018      	str	r0, [r3, #0]
	char 					MQTT_READ_BUF[MQTT_BUF_LEN];
	char					topik_name[TOPIK_MAX_LEN];
	char					topik_payload[128];


	init_mqtt_call_mutex(SocketMutexTake, SocketMutexRelease);
 801245e:	4995      	ldr	r1, [pc, #596]	; (80126b4 <vMQTT_Task+0x268>)
 8012460:	4895      	ldr	r0, [pc, #596]	; (80126b8 <vMQTT_Task+0x26c>)
 8012462:	f001 fc27 	bl	8013cb4 <init_mqtt_call_mutex>
  /* Infinite loop */
	for(;;)
	{
		osDelay(delay1s);
 8012466:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801246a:	f00d fd7f 	bl	801ff6c <osDelay>
		xQueuePeek(EthernetInfoQHandle,  &EthernetInfo, 0);
 801246e:	4b93      	ldr	r3, [pc, #588]	; (80126bc <vMQTT_Task+0x270>)
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 8012476:	2200      	movs	r2, #0
 8012478:	4618      	mov	r0, r3
 801247a:	f00e fe53 	bl	8021124 <xQueuePeek>
		if ((EthernetInfo.link != ETH_LINK_UP) || (assigned_ip() != true)){
 801247e:	f897 39f8 	ldrb.w	r3, [r7, #2552]	; 0x9f8
 8012482:	f083 0301 	eor.w	r3, r3, #1
 8012486:	b2db      	uxtb	r3, r3
 8012488:	2b00      	cmp	r3, #0
 801248a:	f040 8108 	bne.w	801269e <vMQTT_Task+0x252>
 801248e:	f00d fb09 	bl	801faa4 <assigned_ip>
 8012492:	4603      	mov	r3, r0
 8012494:	2b01      	cmp	r3, #1
 8012496:	f040 8102 	bne.w	801269e <vMQTT_Task+0x252>
			continue;
		}
		xQueuePeek(mqttQHandle, &MQTT_cred, 0);
 801249a:	4b89      	ldr	r3, [pc, #548]	; (80126c0 <vMQTT_Task+0x274>)
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 80124a2:	2200      	movs	r2, #0
 80124a4:	4618      	mov	r0, r3
 80124a6:	f00e fe3d 	bl	8021124 <xQueuePeek>
		while (MQTT_cred.enable == 0){
 80124aa:	e00b      	b.n	80124c4 <vMQTT_Task+0x78>
			osDelay(delay1s);
 80124ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80124b0:	f00d fd5c 	bl	801ff6c <osDelay>
			xQueuePeek(mqttQHandle, &MQTT_cred, 0);
 80124b4:	4b82      	ldr	r3, [pc, #520]	; (80126c0 <vMQTT_Task+0x274>)
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 80124bc:	2200      	movs	r2, #0
 80124be:	4618      	mov	r0, r3
 80124c0:	f00e fe30 	bl	8021124 <xQueuePeek>
		while (MQTT_cred.enable == 0){
 80124c4:	f897 3931 	ldrb.w	r3, [r7, #2353]	; 0x931
 80124c8:	f083 0301 	eor.w	r3, r3, #1
 80124cc:	b2db      	uxtb	r3, r3
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d1ec      	bne.n	80124ac <vMQTT_Task+0x60>
		}
		if (!MQTT_cred.enable) continue; //TODO mybe remove;
 80124d2:	f897 3931 	ldrb.w	r3, [r7, #2353]	; 0x931
 80124d6:	f083 0301 	eor.w	r3, r3, #1
 80124da:	b2db      	uxtb	r3, r3
 80124dc:	2b00      	cmp	r3, #0
 80124de:	f040 80e0 	bne.w	80126a2 <vMQTT_Task+0x256>
		if (mqtt_client_init(&EthernetInfo, &MQTT_cred, MQTT_SEND_BUF, MQTT_BUF_LEN, MQTT_READ_BUF, MQTT_BUF_LEN) != 0 ) {
 80124e2:	f207 520c 	addw	r2, r7, #1292	; 0x50c
 80124e6:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 80124ea:	f607 10f8 	addw	r0, r7, #2552	; 0x9f8
 80124ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124f2:	9301      	str	r3, [sp, #4]
 80124f4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80124f8:	9300      	str	r3, [sp, #0]
 80124fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124fe:	f001 fbf5 	bl	8013cec <mqtt_client_init>
 8012502:	4603      	mov	r3, r0
 8012504:	2b00      	cmp	r3, #0
 8012506:	f040 80ce 	bne.w	80126a6 <vMQTT_Task+0x25a>
			//TODO add message to log
			continue;
		}
		if (mqtt_client_connect() < 0) continue;
 801250a:	f001 fcdb 	bl	8013ec4 <mqtt_client_connect>
 801250e:	4603      	mov	r3, r0
 8012510:	2b00      	cmp	r3, #0
 8012512:	f2c0 80ca 	blt.w	80126aa <vMQTT_Task+0x25e>
		if (mqtt_client_reg_dev_on_home_assist() != 0) continue;
 8012516:	f001 fd25 	bl	8013f64 <mqtt_client_reg_dev_on_home_assist>
 801251a:	4603      	mov	r3, r0
 801251c:	2b00      	cmp	r3, #0
 801251e:	f040 80c6 	bne.w	80126ae <vMQTT_Task+0x262>

		generate_status_topik(topik_name, 0);
 8012522:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012526:	2100      	movs	r1, #0
 8012528:	4618      	mov	r0, r3
 801252a:	f002 f935 	bl	8014798 <generate_status_topik>
		while (1){
			xQueuePeek(PowerDataQHandle, &PowerData, 0);
 801252e:	4b65      	ldr	r3, [pc, #404]	; (80126c4 <vMQTT_Task+0x278>)
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	f607 110c 	addw	r1, r7, #2316	; 0x90c
 8012536:	2200      	movs	r2, #0
 8012538:	4618      	mov	r0, r3
 801253a:	f00e fdf3 	bl	8021124 <xQueuePeek>
			generate_key_value_JSON(topik_payload, dev_class_energy, PowerData.KWatt_h);
 801253e:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8012542:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012546:	edd3 7a02 	vldr	s15, [r3, #8]
 801254a:	f107 030c 	add.w	r3, r7, #12
 801254e:	eeb0 0a67 	vmov.f32	s0, s15
 8012552:	495d      	ldr	r1, [pc, #372]	; (80126c8 <vMQTT_Task+0x27c>)
 8012554:	4618      	mov	r0, r3
 8012556:	f002 f957 	bl	8014808 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 801255a:	f107 020c 	add.w	r2, r7, #12
 801255e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012562:	4611      	mov	r1, r2
 8012564:	4618      	mov	r0, r3
 8012566:	f001 fe3d 	bl	80141e4 <send_data_to_topik>
 801256a:	4603      	mov	r3, r0
 801256c:	2b00      	cmp	r3, #0
 801256e:	f040 8086 	bne.w	801267e <vMQTT_Task+0x232>

			generate_key_value_JSON(topik_payload, dev_class_voltage, PowerData.Voltage);
 8012572:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8012576:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801257a:	edd3 7a00 	vldr	s15, [r3]
 801257e:	f107 030c 	add.w	r3, r7, #12
 8012582:	eeb0 0a67 	vmov.f32	s0, s15
 8012586:	4951      	ldr	r1, [pc, #324]	; (80126cc <vMQTT_Task+0x280>)
 8012588:	4618      	mov	r0, r3
 801258a:	f002 f93d 	bl	8014808 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 801258e:	f107 020c 	add.w	r2, r7, #12
 8012592:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012596:	4611      	mov	r1, r2
 8012598:	4618      	mov	r0, r3
 801259a:	f001 fe23 	bl	80141e4 <send_data_to_topik>
 801259e:	4603      	mov	r3, r0
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d16e      	bne.n	8012682 <vMQTT_Task+0x236>

			generate_key_value_JSON(topik_payload, dev_class_current, PowerData.Current);
 80125a4:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 80125a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80125ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80125b0:	f107 030c 	add.w	r3, r7, #12
 80125b4:	eeb0 0a67 	vmov.f32	s0, s15
 80125b8:	4945      	ldr	r1, [pc, #276]	; (80126d0 <vMQTT_Task+0x284>)
 80125ba:	4618      	mov	r0, r3
 80125bc:	f002 f924 	bl	8014808 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80125c0:	f107 020c 	add.w	r2, r7, #12
 80125c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80125c8:	4611      	mov	r1, r2
 80125ca:	4618      	mov	r0, r3
 80125cc:	f001 fe0a 	bl	80141e4 <send_data_to_topik>
 80125d0:	4603      	mov	r3, r0
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d157      	bne.n	8012686 <vMQTT_Task+0x23a>

			generate_key_value_JSON(topik_payload, dev_class_power_factor, PowerData.PowerFactor * 100);
 80125d6:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 80125da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80125de:	edd3 7a05 	vldr	s15, [r3, #20]
 80125e2:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80126d4 <vMQTT_Task+0x288>
 80125e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80125ea:	f107 030c 	add.w	r3, r7, #12
 80125ee:	eeb0 0a67 	vmov.f32	s0, s15
 80125f2:	4939      	ldr	r1, [pc, #228]	; (80126d8 <vMQTT_Task+0x28c>)
 80125f4:	4618      	mov	r0, r3
 80125f6:	f002 f907 	bl	8014808 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80125fa:	f107 020c 	add.w	r2, r7, #12
 80125fe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012602:	4611      	mov	r1, r2
 8012604:	4618      	mov	r0, r3
 8012606:	f001 fded 	bl	80141e4 <send_data_to_topik>
 801260a:	4603      	mov	r3, r0
 801260c:	2b00      	cmp	r3, #0
 801260e:	d13c      	bne.n	801268a <vMQTT_Task+0x23e>

			generate_key_value_JSON(topik_payload, dev_class_power, PowerData.ActivePower);
 8012610:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8012614:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012618:	edd3 7a03 	vldr	s15, [r3, #12]
 801261c:	f107 030c 	add.w	r3, r7, #12
 8012620:	eeb0 0a67 	vmov.f32	s0, s15
 8012624:	492d      	ldr	r1, [pc, #180]	; (80126dc <vMQTT_Task+0x290>)
 8012626:	4618      	mov	r0, r3
 8012628:	f002 f8ee 	bl	8014808 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 801262c:	f107 020c 	add.w	r2, r7, #12
 8012630:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012634:	4611      	mov	r1, r2
 8012636:	4618      	mov	r0, r3
 8012638:	f001 fdd4 	bl	80141e4 <send_data_to_topik>
 801263c:	4603      	mov	r3, r0
 801263e:	2b00      	cmp	r3, #0
 8012640:	d125      	bne.n	801268e <vMQTT_Task+0x242>

			generate_key_value_JSON(topik_payload, dev_class_apparent_power, PowerData.ApparPower);
 8012642:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8012646:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801264a:	edd3 7a04 	vldr	s15, [r3, #16]
 801264e:	f107 030c 	add.w	r3, r7, #12
 8012652:	eeb0 0a67 	vmov.f32	s0, s15
 8012656:	4922      	ldr	r1, [pc, #136]	; (80126e0 <vMQTT_Task+0x294>)
 8012658:	4618      	mov	r0, r3
 801265a:	f002 f8d5 	bl	8014808 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 801265e:	f107 020c 	add.w	r2, r7, #12
 8012662:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012666:	4611      	mov	r1, r2
 8012668:	4618      	mov	r0, r3
 801266a:	f001 fdbb 	bl	80141e4 <send_data_to_topik>
 801266e:	4603      	mov	r3, r0
 8012670:	2b00      	cmp	r3, #0
 8012672:	d10e      	bne.n	8012692 <vMQTT_Task+0x246>



			osDelay(delay30s);
 8012674:	f247 5030 	movw	r0, #30000	; 0x7530
 8012678:	f00d fc78 	bl	801ff6c <osDelay>
			xQueuePeek(PowerDataQHandle, &PowerData, 0);
 801267c:	e757      	b.n	801252e <vMQTT_Task+0xe2>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 801267e:	bf00      	nop
 8012680:	e008      	b.n	8012694 <vMQTT_Task+0x248>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 8012682:	bf00      	nop
 8012684:	e006      	b.n	8012694 <vMQTT_Task+0x248>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 8012686:	bf00      	nop
 8012688:	e004      	b.n	8012694 <vMQTT_Task+0x248>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 801268a:	bf00      	nop
 801268c:	e002      	b.n	8012694 <vMQTT_Task+0x248>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 801268e:	bf00      	nop
 8012690:	e000      	b.n	8012694 <vMQTT_Task+0x248>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 8012692:	bf00      	nop
		}
		osDelay(delay1s);
 8012694:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012698:	f00d fc68 	bl	801ff6c <osDelay>
 801269c:	e6e3      	b.n	8012466 <vMQTT_Task+0x1a>
			continue;
 801269e:	bf00      	nop
 80126a0:	e6e1      	b.n	8012466 <vMQTT_Task+0x1a>
		if (!MQTT_cred.enable) continue; //TODO mybe remove;
 80126a2:	bf00      	nop
 80126a4:	e6df      	b.n	8012466 <vMQTT_Task+0x1a>
			continue;
 80126a6:	bf00      	nop
 80126a8:	e6dd      	b.n	8012466 <vMQTT_Task+0x1a>
		if (mqtt_client_connect() < 0) continue;
 80126aa:	bf00      	nop
 80126ac:	e6db      	b.n	8012466 <vMQTT_Task+0x1a>
		if (mqtt_client_reg_dev_on_home_assist() != 0) continue;
 80126ae:	bf00      	nop
		osDelay(delay1s);
 80126b0:	e6d9      	b.n	8012466 <vMQTT_Task+0x1a>
 80126b2:	bf00      	nop
 80126b4:	08011149 	.word	0x08011149
 80126b8:	0801112d 	.word	0x0801112d
 80126bc:	20000448 	.word	0x20000448
 80126c0:	20000454 	.word	0x20000454
 80126c4:	2000044c 	.word	0x2000044c
 80126c8:	08032408 	.word	0x08032408
 80126cc:	08032410 	.word	0x08032410
 80126d0:	08032418 	.word	0x08032418
 80126d4:	42c80000 	.word	0x42c80000
 80126d8:	08032420 	.word	0x08032420
 80126dc:	08032430 	.word	0x08032430
 80126e0:	08032438 	.word	0x08032438

080126e4 <vResetWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vResetWatchDog */
void vResetWatchDog(void *argument)
{
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b082      	sub	sp, #8
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vResetWatchDog */
  /* Infinite loop */
  for(;;)
  {
	HAL_IWDG_Refresh(&hiwdg);
 80126ec:	4803      	ldr	r0, [pc, #12]	; (80126fc <vResetWatchDog+0x18>)
 80126ee:	f003 fa5c 	bl	8015baa <HAL_IWDG_Refresh>
    osDelay(1);
 80126f2:	2001      	movs	r0, #1
 80126f4:	f00d fc3a 	bl	801ff6c <osDelay>
	HAL_IWDG_Refresh(&hiwdg);
 80126f8:	e7f8      	b.n	80126ec <vResetWatchDog+0x8>
 80126fa:	bf00      	nop
 80126fc:	2000031c 	.word	0x2000031c

08012700 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b082      	sub	sp, #8
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	4a04      	ldr	r2, [pc, #16]	; (8012720 <HAL_TIM_PeriodElapsedCallback+0x20>)
 801270e:	4293      	cmp	r3, r2
 8012710:	d101      	bne.n	8012716 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8012712:	f002 febb 	bl	801548c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8012716:	bf00      	nop
 8012718:	3708      	adds	r7, #8
 801271a:	46bd      	mov	sp, r7
 801271c:	bd80      	pop	{r7, pc}
 801271e:	bf00      	nop
 8012720:	40010000 	.word	0x40010000

08012724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8012724:	b480      	push	{r7}
 8012726:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8012728:	b672      	cpsid	i
}
 801272a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801272c:	e7fe      	b.n	801272c <Error_Handler+0x8>
	...

08012730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b082      	sub	sp, #8
 8012734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012736:	2300      	movs	r3, #0
 8012738:	607b      	str	r3, [r7, #4]
 801273a:	4b12      	ldr	r3, [pc, #72]	; (8012784 <HAL_MspInit+0x54>)
 801273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801273e:	4a11      	ldr	r2, [pc, #68]	; (8012784 <HAL_MspInit+0x54>)
 8012740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012744:	6453      	str	r3, [r2, #68]	; 0x44
 8012746:	4b0f      	ldr	r3, [pc, #60]	; (8012784 <HAL_MspInit+0x54>)
 8012748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801274a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801274e:	607b      	str	r3, [r7, #4]
 8012750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8012752:	2300      	movs	r3, #0
 8012754:	603b      	str	r3, [r7, #0]
 8012756:	4b0b      	ldr	r3, [pc, #44]	; (8012784 <HAL_MspInit+0x54>)
 8012758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801275a:	4a0a      	ldr	r2, [pc, #40]	; (8012784 <HAL_MspInit+0x54>)
 801275c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012760:	6413      	str	r3, [r2, #64]	; 0x40
 8012762:	4b08      	ldr	r3, [pc, #32]	; (8012784 <HAL_MspInit+0x54>)
 8012764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801276a:	603b      	str	r3, [r7, #0]
 801276c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 801276e:	2200      	movs	r2, #0
 8012770:	210f      	movs	r1, #15
 8012772:	f06f 0001 	mvn.w	r0, #1
 8012776:	f002 ff61 	bl	801563c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801277a:	bf00      	nop
 801277c:	3708      	adds	r7, #8
 801277e:	46bd      	mov	sp, r7
 8012780:	bd80      	pop	{r7, pc}
 8012782:	bf00      	nop
 8012784:	40023800 	.word	0x40023800

08012788 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8012788:	b480      	push	{r7}
 801278a:	b085      	sub	sp, #20
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	4a0b      	ldr	r2, [pc, #44]	; (80127c4 <HAL_CRC_MspInit+0x3c>)
 8012796:	4293      	cmp	r3, r2
 8012798:	d10d      	bne.n	80127b6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 801279a:	2300      	movs	r3, #0
 801279c:	60fb      	str	r3, [r7, #12]
 801279e:	4b0a      	ldr	r3, [pc, #40]	; (80127c8 <HAL_CRC_MspInit+0x40>)
 80127a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127a2:	4a09      	ldr	r2, [pc, #36]	; (80127c8 <HAL_CRC_MspInit+0x40>)
 80127a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80127a8:	6313      	str	r3, [r2, #48]	; 0x30
 80127aa:	4b07      	ldr	r3, [pc, #28]	; (80127c8 <HAL_CRC_MspInit+0x40>)
 80127ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80127b2:	60fb      	str	r3, [r7, #12]
 80127b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80127b6:	bf00      	nop
 80127b8:	3714      	adds	r7, #20
 80127ba:	46bd      	mov	sp, r7
 80127bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c0:	4770      	bx	lr
 80127c2:	bf00      	nop
 80127c4:	40023000 	.word	0x40023000
 80127c8:	40023800 	.word	0x40023800

080127cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b08c      	sub	sp, #48	; 0x30
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80127d4:	f107 031c 	add.w	r3, r7, #28
 80127d8:	2200      	movs	r2, #0
 80127da:	601a      	str	r2, [r3, #0]
 80127dc:	605a      	str	r2, [r3, #4]
 80127de:	609a      	str	r2, [r3, #8]
 80127e0:	60da      	str	r2, [r3, #12]
 80127e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	4a32      	ldr	r2, [pc, #200]	; (80128b4 <HAL_SPI_MspInit+0xe8>)
 80127ea:	4293      	cmp	r3, r2
 80127ec:	d12c      	bne.n	8012848 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80127ee:	2300      	movs	r3, #0
 80127f0:	61bb      	str	r3, [r7, #24]
 80127f2:	4b31      	ldr	r3, [pc, #196]	; (80128b8 <HAL_SPI_MspInit+0xec>)
 80127f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80127f6:	4a30      	ldr	r2, [pc, #192]	; (80128b8 <HAL_SPI_MspInit+0xec>)
 80127f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80127fc:	6453      	str	r3, [r2, #68]	; 0x44
 80127fe:	4b2e      	ldr	r3, [pc, #184]	; (80128b8 <HAL_SPI_MspInit+0xec>)
 8012800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012806:	61bb      	str	r3, [r7, #24]
 8012808:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801280a:	2300      	movs	r3, #0
 801280c:	617b      	str	r3, [r7, #20]
 801280e:	4b2a      	ldr	r3, [pc, #168]	; (80128b8 <HAL_SPI_MspInit+0xec>)
 8012810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012812:	4a29      	ldr	r2, [pc, #164]	; (80128b8 <HAL_SPI_MspInit+0xec>)
 8012814:	f043 0301 	orr.w	r3, r3, #1
 8012818:	6313      	str	r3, [r2, #48]	; 0x30
 801281a:	4b27      	ldr	r3, [pc, #156]	; (80128b8 <HAL_SPI_MspInit+0xec>)
 801281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801281e:	f003 0301 	and.w	r3, r3, #1
 8012822:	617b      	str	r3, [r7, #20]
 8012824:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8012826:	23e0      	movs	r3, #224	; 0xe0
 8012828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801282a:	2302      	movs	r3, #2
 801282c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801282e:	2300      	movs	r3, #0
 8012830:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012832:	2303      	movs	r3, #3
 8012834:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8012836:	2305      	movs	r3, #5
 8012838:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801283a:	f107 031c 	add.w	r3, r7, #28
 801283e:	4619      	mov	r1, r3
 8012840:	481e      	ldr	r0, [pc, #120]	; (80128bc <HAL_SPI_MspInit+0xf0>)
 8012842:	f002 ffd3 	bl	80157ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8012846:	e030      	b.n	80128aa <HAL_SPI_MspInit+0xde>
  else if(hspi->Instance==SPI3)
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	4a1c      	ldr	r2, [pc, #112]	; (80128c0 <HAL_SPI_MspInit+0xf4>)
 801284e:	4293      	cmp	r3, r2
 8012850:	d12b      	bne.n	80128aa <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8012852:	2300      	movs	r3, #0
 8012854:	613b      	str	r3, [r7, #16]
 8012856:	4b18      	ldr	r3, [pc, #96]	; (80128b8 <HAL_SPI_MspInit+0xec>)
 8012858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801285a:	4a17      	ldr	r2, [pc, #92]	; (80128b8 <HAL_SPI_MspInit+0xec>)
 801285c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012860:	6413      	str	r3, [r2, #64]	; 0x40
 8012862:	4b15      	ldr	r3, [pc, #84]	; (80128b8 <HAL_SPI_MspInit+0xec>)
 8012864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012866:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801286a:	613b      	str	r3, [r7, #16]
 801286c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801286e:	2300      	movs	r3, #0
 8012870:	60fb      	str	r3, [r7, #12]
 8012872:	4b11      	ldr	r3, [pc, #68]	; (80128b8 <HAL_SPI_MspInit+0xec>)
 8012874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012876:	4a10      	ldr	r2, [pc, #64]	; (80128b8 <HAL_SPI_MspInit+0xec>)
 8012878:	f043 0302 	orr.w	r3, r3, #2
 801287c:	6313      	str	r3, [r2, #48]	; 0x30
 801287e:	4b0e      	ldr	r3, [pc, #56]	; (80128b8 <HAL_SPI_MspInit+0xec>)
 8012880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012882:	f003 0302 	and.w	r3, r3, #2
 8012886:	60fb      	str	r3, [r7, #12]
 8012888:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 801288a:	2338      	movs	r3, #56	; 0x38
 801288c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801288e:	2302      	movs	r3, #2
 8012890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012892:	2300      	movs	r3, #0
 8012894:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012896:	2303      	movs	r3, #3
 8012898:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 801289a:	2306      	movs	r3, #6
 801289c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801289e:	f107 031c 	add.w	r3, r7, #28
 80128a2:	4619      	mov	r1, r3
 80128a4:	4807      	ldr	r0, [pc, #28]	; (80128c4 <HAL_SPI_MspInit+0xf8>)
 80128a6:	f002 ffa1 	bl	80157ec <HAL_GPIO_Init>
}
 80128aa:	bf00      	nop
 80128ac:	3730      	adds	r7, #48	; 0x30
 80128ae:	46bd      	mov	sp, r7
 80128b0:	bd80      	pop	{r7, pc}
 80128b2:	bf00      	nop
 80128b4:	40013000 	.word	0x40013000
 80128b8:	40023800 	.word	0x40023800
 80128bc:	40020000 	.word	0x40020000
 80128c0:	40003c00 	.word	0x40003c00
 80128c4:	40020400 	.word	0x40020400

080128c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b08a      	sub	sp, #40	; 0x28
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80128d0:	f107 0314 	add.w	r3, r7, #20
 80128d4:	2200      	movs	r2, #0
 80128d6:	601a      	str	r2, [r3, #0]
 80128d8:	605a      	str	r2, [r3, #4]
 80128da:	609a      	str	r2, [r3, #8]
 80128dc:	60da      	str	r2, [r3, #12]
 80128de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	4a1d      	ldr	r2, [pc, #116]	; (801295c <HAL_UART_MspInit+0x94>)
 80128e6:	4293      	cmp	r3, r2
 80128e8:	d133      	bne.n	8012952 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80128ea:	2300      	movs	r3, #0
 80128ec:	613b      	str	r3, [r7, #16]
 80128ee:	4b1c      	ldr	r3, [pc, #112]	; (8012960 <HAL_UART_MspInit+0x98>)
 80128f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128f2:	4a1b      	ldr	r2, [pc, #108]	; (8012960 <HAL_UART_MspInit+0x98>)
 80128f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80128f8:	6413      	str	r3, [r2, #64]	; 0x40
 80128fa:	4b19      	ldr	r3, [pc, #100]	; (8012960 <HAL_UART_MspInit+0x98>)
 80128fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012902:	613b      	str	r3, [r7, #16]
 8012904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012906:	2300      	movs	r3, #0
 8012908:	60fb      	str	r3, [r7, #12]
 801290a:	4b15      	ldr	r3, [pc, #84]	; (8012960 <HAL_UART_MspInit+0x98>)
 801290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801290e:	4a14      	ldr	r2, [pc, #80]	; (8012960 <HAL_UART_MspInit+0x98>)
 8012910:	f043 0301 	orr.w	r3, r3, #1
 8012914:	6313      	str	r3, [r2, #48]	; 0x30
 8012916:	4b12      	ldr	r3, [pc, #72]	; (8012960 <HAL_UART_MspInit+0x98>)
 8012918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801291a:	f003 0301 	and.w	r3, r3, #1
 801291e:	60fb      	str	r3, [r7, #12]
 8012920:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8012922:	230c      	movs	r3, #12
 8012924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012926:	2302      	movs	r3, #2
 8012928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801292a:	2300      	movs	r3, #0
 801292c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801292e:	2303      	movs	r3, #3
 8012930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8012932:	2307      	movs	r3, #7
 8012934:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012936:	f107 0314 	add.w	r3, r7, #20
 801293a:	4619      	mov	r1, r3
 801293c:	4809      	ldr	r0, [pc, #36]	; (8012964 <HAL_UART_MspInit+0x9c>)
 801293e:	f002 ff55 	bl	80157ec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8012942:	2200      	movs	r2, #0
 8012944:	2105      	movs	r1, #5
 8012946:	2026      	movs	r0, #38	; 0x26
 8012948:	f002 fe78 	bl	801563c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 801294c:	2026      	movs	r0, #38	; 0x26
 801294e:	f002 fe91 	bl	8015674 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8012952:	bf00      	nop
 8012954:	3728      	adds	r7, #40	; 0x28
 8012956:	46bd      	mov	sp, r7
 8012958:	bd80      	pop	{r7, pc}
 801295a:	bf00      	nop
 801295c:	40004400 	.word	0x40004400
 8012960:	40023800 	.word	0x40023800
 8012964:	40020000 	.word	0x40020000

08012968 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b08c      	sub	sp, #48	; 0x30
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8012970:	2300      	movs	r3, #0
 8012972:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8012974:	2300      	movs	r3, #0
 8012976:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8012978:	2300      	movs	r3, #0
 801297a:	60bb      	str	r3, [r7, #8]
 801297c:	4b2e      	ldr	r3, [pc, #184]	; (8012a38 <HAL_InitTick+0xd0>)
 801297e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012980:	4a2d      	ldr	r2, [pc, #180]	; (8012a38 <HAL_InitTick+0xd0>)
 8012982:	f043 0301 	orr.w	r3, r3, #1
 8012986:	6453      	str	r3, [r2, #68]	; 0x44
 8012988:	4b2b      	ldr	r3, [pc, #172]	; (8012a38 <HAL_InitTick+0xd0>)
 801298a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801298c:	f003 0301 	and.w	r3, r3, #1
 8012990:	60bb      	str	r3, [r7, #8]
 8012992:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8012994:	f107 020c 	add.w	r2, r7, #12
 8012998:	f107 0310 	add.w	r3, r7, #16
 801299c:	4611      	mov	r1, r2
 801299e:	4618      	mov	r0, r3
 80129a0:	f003 fdac 	bl	80164fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80129a4:	f003 fd96 	bl	80164d4 <HAL_RCC_GetPCLK2Freq>
 80129a8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80129aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ac:	4a23      	ldr	r2, [pc, #140]	; (8012a3c <HAL_InitTick+0xd4>)
 80129ae:	fba2 2303 	umull	r2, r3, r2, r3
 80129b2:	0c9b      	lsrs	r3, r3, #18
 80129b4:	3b01      	subs	r3, #1
 80129b6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80129b8:	4b21      	ldr	r3, [pc, #132]	; (8012a40 <HAL_InitTick+0xd8>)
 80129ba:	4a22      	ldr	r2, [pc, #136]	; (8012a44 <HAL_InitTick+0xdc>)
 80129bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80129be:	4b20      	ldr	r3, [pc, #128]	; (8012a40 <HAL_InitTick+0xd8>)
 80129c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80129c4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80129c6:	4a1e      	ldr	r2, [pc, #120]	; (8012a40 <HAL_InitTick+0xd8>)
 80129c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80129cc:	4b1c      	ldr	r3, [pc, #112]	; (8012a40 <HAL_InitTick+0xd8>)
 80129ce:	2200      	movs	r2, #0
 80129d0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80129d2:	4b1b      	ldr	r3, [pc, #108]	; (8012a40 <HAL_InitTick+0xd8>)
 80129d4:	2200      	movs	r2, #0
 80129d6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80129d8:	4b19      	ldr	r3, [pc, #100]	; (8012a40 <HAL_InitTick+0xd8>)
 80129da:	2200      	movs	r2, #0
 80129dc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80129de:	4818      	ldr	r0, [pc, #96]	; (8012a40 <HAL_InitTick+0xd8>)
 80129e0:	f004 fb94 	bl	801710c <HAL_TIM_Base_Init>
 80129e4:	4603      	mov	r3, r0
 80129e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80129ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d11b      	bne.n	8012a2a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80129f2:	4813      	ldr	r0, [pc, #76]	; (8012a40 <HAL_InitTick+0xd8>)
 80129f4:	f004 fbe4 	bl	80171c0 <HAL_TIM_Base_Start_IT>
 80129f8:	4603      	mov	r3, r0
 80129fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80129fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d111      	bne.n	8012a2a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8012a06:	2019      	movs	r0, #25
 8012a08:	f002 fe34 	bl	8015674 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	2b0f      	cmp	r3, #15
 8012a10:	d808      	bhi.n	8012a24 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8012a12:	2200      	movs	r2, #0
 8012a14:	6879      	ldr	r1, [r7, #4]
 8012a16:	2019      	movs	r0, #25
 8012a18:	f002 fe10 	bl	801563c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8012a1c:	4a0a      	ldr	r2, [pc, #40]	; (8012a48 <HAL_InitTick+0xe0>)
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	6013      	str	r3, [r2, #0]
 8012a22:	e002      	b.n	8012a2a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8012a24:	2301      	movs	r3, #1
 8012a26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8012a2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012a2e:	4618      	mov	r0, r3
 8012a30:	3730      	adds	r7, #48	; 0x30
 8012a32:	46bd      	mov	sp, r7
 8012a34:	bd80      	pop	{r7, pc}
 8012a36:	bf00      	nop
 8012a38:	40023800 	.word	0x40023800
 8012a3c:	431bde83 	.word	0x431bde83
 8012a40:	20000498 	.word	0x20000498
 8012a44:	40010000 	.word	0x40010000
 8012a48:	200000bc 	.word	0x200000bc

08012a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012a4c:	b480      	push	{r7}
 8012a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8012a50:	e7fe      	b.n	8012a50 <NMI_Handler+0x4>

08012a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012a52:	b480      	push	{r7}
 8012a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012a56:	e7fe      	b.n	8012a56 <HardFault_Handler+0x4>

08012a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8012a58:	b480      	push	{r7}
 8012a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012a5c:	e7fe      	b.n	8012a5c <MemManage_Handler+0x4>

08012a5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8012a5e:	b480      	push	{r7}
 8012a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8012a62:	e7fe      	b.n	8012a62 <BusFault_Handler+0x4>

08012a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8012a64:	b480      	push	{r7}
 8012a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8012a68:	e7fe      	b.n	8012a68 <UsageFault_Handler+0x4>

08012a6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8012a6a:	b480      	push	{r7}
 8012a6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8012a6e:	bf00      	nop
 8012a70:	46bd      	mov	sp, r7
 8012a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a76:	4770      	bx	lr

08012a78 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8012a7c:	4802      	ldr	r0, [pc, #8]	; (8012a88 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8012a7e:	f004 fc01 	bl	8017284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8012a82:	bf00      	nop
 8012a84:	bd80      	pop	{r7, pc}
 8012a86:	bf00      	nop
 8012a88:	20000498 	.word	0x20000498

08012a8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8012a90:	4802      	ldr	r0, [pc, #8]	; (8012a9c <USART2_IRQHandler+0x10>)
 8012a92:	f004 fe5d 	bl	8017750 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8012a96:	bf00      	nop
 8012a98:	bd80      	pop	{r7, pc}
 8012a9a:	bf00      	nop
 8012a9c:	200003d8 	.word	0x200003d8

08012aa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8012aa0:	b480      	push	{r7}
 8012aa2:	af00      	add	r7, sp, #0
  return 1;
 8012aa4:	2301      	movs	r3, #1
}
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aae:	4770      	bx	lr

08012ab0 <_kill>:

int _kill(int pid, int sig)
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b082      	sub	sp, #8
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
 8012ab8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8012aba:	f01a ffa7 	bl	802da0c <__errno>
 8012abe:	4603      	mov	r3, r0
 8012ac0:	2216      	movs	r2, #22
 8012ac2:	601a      	str	r2, [r3, #0]
  return -1;
 8012ac4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012ac8:	4618      	mov	r0, r3
 8012aca:	3708      	adds	r7, #8
 8012acc:	46bd      	mov	sp, r7
 8012ace:	bd80      	pop	{r7, pc}

08012ad0 <_exit>:

void _exit (int status)
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	b082      	sub	sp, #8
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8012ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8012adc:	6878      	ldr	r0, [r7, #4]
 8012ade:	f7ff ffe7 	bl	8012ab0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8012ae2:	e7fe      	b.n	8012ae2 <_exit+0x12>

08012ae4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b086      	sub	sp, #24
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	60f8      	str	r0, [r7, #12]
 8012aec:	60b9      	str	r1, [r7, #8]
 8012aee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012af0:	2300      	movs	r3, #0
 8012af2:	617b      	str	r3, [r7, #20]
 8012af4:	e00a      	b.n	8012b0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8012af6:	f3af 8000 	nop.w
 8012afa:	4601      	mov	r1, r0
 8012afc:	68bb      	ldr	r3, [r7, #8]
 8012afe:	1c5a      	adds	r2, r3, #1
 8012b00:	60ba      	str	r2, [r7, #8]
 8012b02:	b2ca      	uxtb	r2, r1
 8012b04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012b06:	697b      	ldr	r3, [r7, #20]
 8012b08:	3301      	adds	r3, #1
 8012b0a:	617b      	str	r3, [r7, #20]
 8012b0c:	697a      	ldr	r2, [r7, #20]
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	429a      	cmp	r2, r3
 8012b12:	dbf0      	blt.n	8012af6 <_read+0x12>
  }

  return len;
 8012b14:	687b      	ldr	r3, [r7, #4]
}
 8012b16:	4618      	mov	r0, r3
 8012b18:	3718      	adds	r7, #24
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	bd80      	pop	{r7, pc}

08012b1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8012b1e:	b580      	push	{r7, lr}
 8012b20:	b086      	sub	sp, #24
 8012b22:	af00      	add	r7, sp, #0
 8012b24:	60f8      	str	r0, [r7, #12]
 8012b26:	60b9      	str	r1, [r7, #8]
 8012b28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	617b      	str	r3, [r7, #20]
 8012b2e:	e009      	b.n	8012b44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8012b30:	68bb      	ldr	r3, [r7, #8]
 8012b32:	1c5a      	adds	r2, r3, #1
 8012b34:	60ba      	str	r2, [r7, #8]
 8012b36:	781b      	ldrb	r3, [r3, #0]
 8012b38:	4618      	mov	r0, r3
 8012b3a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012b3e:	697b      	ldr	r3, [r7, #20]
 8012b40:	3301      	adds	r3, #1
 8012b42:	617b      	str	r3, [r7, #20]
 8012b44:	697a      	ldr	r2, [r7, #20]
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	429a      	cmp	r2, r3
 8012b4a:	dbf1      	blt.n	8012b30 <_write+0x12>
  }
  return len;
 8012b4c:	687b      	ldr	r3, [r7, #4]
}
 8012b4e:	4618      	mov	r0, r3
 8012b50:	3718      	adds	r7, #24
 8012b52:	46bd      	mov	sp, r7
 8012b54:	bd80      	pop	{r7, pc}

08012b56 <_close>:

int _close(int file)
{
 8012b56:	b480      	push	{r7}
 8012b58:	b083      	sub	sp, #12
 8012b5a:	af00      	add	r7, sp, #0
 8012b5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8012b5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012b62:	4618      	mov	r0, r3
 8012b64:	370c      	adds	r7, #12
 8012b66:	46bd      	mov	sp, r7
 8012b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6c:	4770      	bx	lr

08012b6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8012b6e:	b480      	push	{r7}
 8012b70:	b083      	sub	sp, #12
 8012b72:	af00      	add	r7, sp, #0
 8012b74:	6078      	str	r0, [r7, #4]
 8012b76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8012b78:	683b      	ldr	r3, [r7, #0]
 8012b7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8012b7e:	605a      	str	r2, [r3, #4]
  return 0;
 8012b80:	2300      	movs	r3, #0
}
 8012b82:	4618      	mov	r0, r3
 8012b84:	370c      	adds	r7, #12
 8012b86:	46bd      	mov	sp, r7
 8012b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8c:	4770      	bx	lr

08012b8e <_isatty>:

int _isatty(int file)
{
 8012b8e:	b480      	push	{r7}
 8012b90:	b083      	sub	sp, #12
 8012b92:	af00      	add	r7, sp, #0
 8012b94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8012b96:	2301      	movs	r3, #1
}
 8012b98:	4618      	mov	r0, r3
 8012b9a:	370c      	adds	r7, #12
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba2:	4770      	bx	lr

08012ba4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8012ba4:	b480      	push	{r7}
 8012ba6:	b085      	sub	sp, #20
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	60f8      	str	r0, [r7, #12]
 8012bac:	60b9      	str	r1, [r7, #8]
 8012bae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8012bb0:	2300      	movs	r3, #0
}
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	3714      	adds	r7, #20
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bbc:	4770      	bx	lr
	...

08012bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b086      	sub	sp, #24
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012bc8:	4a14      	ldr	r2, [pc, #80]	; (8012c1c <_sbrk+0x5c>)
 8012bca:	4b15      	ldr	r3, [pc, #84]	; (8012c20 <_sbrk+0x60>)
 8012bcc:	1ad3      	subs	r3, r2, r3
 8012bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8012bd0:	697b      	ldr	r3, [r7, #20]
 8012bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012bd4:	4b13      	ldr	r3, [pc, #76]	; (8012c24 <_sbrk+0x64>)
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d102      	bne.n	8012be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012bdc:	4b11      	ldr	r3, [pc, #68]	; (8012c24 <_sbrk+0x64>)
 8012bde:	4a12      	ldr	r2, [pc, #72]	; (8012c28 <_sbrk+0x68>)
 8012be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012be2:	4b10      	ldr	r3, [pc, #64]	; (8012c24 <_sbrk+0x64>)
 8012be4:	681a      	ldr	r2, [r3, #0]
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	4413      	add	r3, r2
 8012bea:	693a      	ldr	r2, [r7, #16]
 8012bec:	429a      	cmp	r2, r3
 8012bee:	d207      	bcs.n	8012c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8012bf0:	f01a ff0c 	bl	802da0c <__errno>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	220c      	movs	r2, #12
 8012bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8012bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8012bfe:	e009      	b.n	8012c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8012c00:	4b08      	ldr	r3, [pc, #32]	; (8012c24 <_sbrk+0x64>)
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8012c06:	4b07      	ldr	r3, [pc, #28]	; (8012c24 <_sbrk+0x64>)
 8012c08:	681a      	ldr	r2, [r3, #0]
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	4413      	add	r3, r2
 8012c0e:	4a05      	ldr	r2, [pc, #20]	; (8012c24 <_sbrk+0x64>)
 8012c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8012c12:	68fb      	ldr	r3, [r7, #12]
}
 8012c14:	4618      	mov	r0, r3
 8012c16:	3718      	adds	r7, #24
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bd80      	pop	{r7, pc}
 8012c1c:	20010000 	.word	0x20010000
 8012c20:	00000400 	.word	0x00000400
 8012c24:	200004e0 	.word	0x200004e0
 8012c28:	2000daf0 	.word	0x2000daf0

08012c2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8012c2c:	b480      	push	{r7}
 8012c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8012c30:	4b06      	ldr	r3, [pc, #24]	; (8012c4c <SystemInit+0x20>)
 8012c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012c36:	4a05      	ldr	r2, [pc, #20]	; (8012c4c <SystemInit+0x20>)
 8012c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8012c40:	bf00      	nop
 8012c42:	46bd      	mov	sp, r7
 8012c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c48:	4770      	bx	lr
 8012c4a:	bf00      	nop
 8012c4c:	e000ed00 	.word	0xe000ed00

08012c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8012c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012c88 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8012c54:	f7ff ffea 	bl	8012c2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8012c58:	480c      	ldr	r0, [pc, #48]	; (8012c8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8012c5a:	490d      	ldr	r1, [pc, #52]	; (8012c90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8012c5c:	4a0d      	ldr	r2, [pc, #52]	; (8012c94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8012c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8012c60:	e002      	b.n	8012c68 <LoopCopyDataInit>

08012c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8012c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8012c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8012c66:	3304      	adds	r3, #4

08012c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8012c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8012c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8012c6c:	d3f9      	bcc.n	8012c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8012c6e:	4a0a      	ldr	r2, [pc, #40]	; (8012c98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8012c70:	4c0a      	ldr	r4, [pc, #40]	; (8012c9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8012c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8012c74:	e001      	b.n	8012c7a <LoopFillZerobss>

08012c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8012c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8012c78:	3204      	adds	r2, #4

08012c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8012c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8012c7c:	d3fb      	bcc.n	8012c76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8012c7e:	f01a fecb 	bl	802da18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012c82:	f7fe fa9f 	bl	80111c4 <main>
  bx  lr    
 8012c86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8012c88:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8012c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8012c90:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 8012c94:	08034c98 	.word	0x08034c98
  ldr r2, =_sbss
 8012c98:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8012c9c:	2000daf0 	.word	0x2000daf0

08012ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012ca0:	e7fe      	b.n	8012ca0 <ADC_IRQHandler>

08012ca2 <CharToDec>:
float float_temp;

int			part = 0;
uint32_t	part_offset = 0;

int CharToDec(char c){
 8012ca2:	b480      	push	{r7}
 8012ca4:	b083      	sub	sp, #12
 8012ca6:	af00      	add	r7, sp, #0
 8012ca8:	4603      	mov	r3, r0
 8012caa:	71fb      	strb	r3, [r7, #7]
    if(c>='0' && c<='9') return c-'0';
 8012cac:	79fb      	ldrb	r3, [r7, #7]
 8012cae:	2b2f      	cmp	r3, #47	; 0x2f
 8012cb0:	d905      	bls.n	8012cbe <CharToDec+0x1c>
 8012cb2:	79fb      	ldrb	r3, [r7, #7]
 8012cb4:	2b39      	cmp	r3, #57	; 0x39
 8012cb6:	d802      	bhi.n	8012cbe <CharToDec+0x1c>
 8012cb8:	79fb      	ldrb	r3, [r7, #7]
 8012cba:	3b30      	subs	r3, #48	; 0x30
 8012cbc:	e012      	b.n	8012ce4 <CharToDec+0x42>
    if(c>='a' && c<='f') return c-'a'+10;
 8012cbe:	79fb      	ldrb	r3, [r7, #7]
 8012cc0:	2b60      	cmp	r3, #96	; 0x60
 8012cc2:	d905      	bls.n	8012cd0 <CharToDec+0x2e>
 8012cc4:	79fb      	ldrb	r3, [r7, #7]
 8012cc6:	2b66      	cmp	r3, #102	; 0x66
 8012cc8:	d802      	bhi.n	8012cd0 <CharToDec+0x2e>
 8012cca:	79fb      	ldrb	r3, [r7, #7]
 8012ccc:	3b57      	subs	r3, #87	; 0x57
 8012cce:	e009      	b.n	8012ce4 <CharToDec+0x42>
    if(c>='A' && c<='F') return c-'A'+10;
 8012cd0:	79fb      	ldrb	r3, [r7, #7]
 8012cd2:	2b40      	cmp	r3, #64	; 0x40
 8012cd4:	d905      	bls.n	8012ce2 <CharToDec+0x40>
 8012cd6:	79fb      	ldrb	r3, [r7, #7]
 8012cd8:	2b46      	cmp	r3, #70	; 0x46
 8012cda:	d802      	bhi.n	8012ce2 <CharToDec+0x40>
 8012cdc:	79fb      	ldrb	r3, [r7, #7]
 8012cde:	3b37      	subs	r3, #55	; 0x37
 8012ce0:	e000      	b.n	8012ce4 <CharToDec+0x42>
    return 0;
 8012ce2:	2300      	movs	r3, #0
}
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	370c      	adds	r7, #12
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cee:	4770      	bx	lr

08012cf0 <http_parse_params_init>:

void http_parse_params_init (xQueueHandle xQueue, uint8_t parameters_type){
 8012cf0:	b480      	push	{r7}
 8012cf2:	b083      	sub	sp, #12
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
 8012cf8:	460b      	mov	r3, r1
 8012cfa:	70fb      	strb	r3, [r7, #3]

	if (parameters_type == MQTT){
 8012cfc:	78fb      	ldrb	r3, [r7, #3]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d106      	bne.n	8012d10 <http_parse_params_init+0x20>
		if (xQueue){
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d034      	beq.n	8012d72 <http_parse_params_init+0x82>
			MQTT_Q = xQueue;
 8012d08:	4a1d      	ldr	r2, [pc, #116]	; (8012d80 <http_parse_params_init+0x90>)
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	6013      	str	r3, [r2, #0]
	}else if (parameters_type == Uptime){
		if (xQueue){
			Uptime_Q = xQueue;
		}
	}
}
 8012d0e:	e030      	b.n	8012d72 <http_parse_params_init+0x82>
	}else if (parameters_type == HA){
 8012d10:	78fb      	ldrb	r3, [r7, #3]
 8012d12:	2b01      	cmp	r3, #1
 8012d14:	d106      	bne.n	8012d24 <http_parse_params_init+0x34>
		if (xQueue){
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d02a      	beq.n	8012d72 <http_parse_params_init+0x82>
			HomeAsistant_Q = xQueue;
 8012d1c:	4a19      	ldr	r2, [pc, #100]	; (8012d84 <http_parse_params_init+0x94>)
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	6013      	str	r3, [r2, #0]
}
 8012d22:	e026      	b.n	8012d72 <http_parse_params_init+0x82>
	}else if (parameters_type == ModBusTCP){
 8012d24:	78fb      	ldrb	r3, [r7, #3]
 8012d26:	2b02      	cmp	r3, #2
 8012d28:	d106      	bne.n	8012d38 <http_parse_params_init+0x48>
		if (xQueue){
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d020      	beq.n	8012d72 <http_parse_params_init+0x82>
			ModbusTCP_Q = xQueue;
 8012d30:	4a15      	ldr	r2, [pc, #84]	; (8012d88 <http_parse_params_init+0x98>)
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	6013      	str	r3, [r2, #0]
}
 8012d36:	e01c      	b.n	8012d72 <http_parse_params_init+0x82>
	}else if (parameters_type == PowrData){
 8012d38:	78fb      	ldrb	r3, [r7, #3]
 8012d3a:	2b03      	cmp	r3, #3
 8012d3c:	d106      	bne.n	8012d4c <http_parse_params_init+0x5c>
		if (xQueue){
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d016      	beq.n	8012d72 <http_parse_params_init+0x82>
			Power_Data_Q = xQueue;
 8012d44:	4a11      	ldr	r2, [pc, #68]	; (8012d8c <http_parse_params_init+0x9c>)
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	6013      	str	r3, [r2, #0]
}
 8012d4a:	e012      	b.n	8012d72 <http_parse_params_init+0x82>
	}else if (parameters_type == PowrSensSett){
 8012d4c:	78fb      	ldrb	r3, [r7, #3]
 8012d4e:	2b04      	cmp	r3, #4
 8012d50:	d106      	bne.n	8012d60 <http_parse_params_init+0x70>
		if (xQueue){
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d00c      	beq.n	8012d72 <http_parse_params_init+0x82>
			PowerSensSettings_Q = xQueue;
 8012d58:	4a0d      	ldr	r2, [pc, #52]	; (8012d90 <http_parse_params_init+0xa0>)
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	6013      	str	r3, [r2, #0]
}
 8012d5e:	e008      	b.n	8012d72 <http_parse_params_init+0x82>
	}else if (parameters_type == Uptime){
 8012d60:	78fb      	ldrb	r3, [r7, #3]
 8012d62:	2b05      	cmp	r3, #5
 8012d64:	d105      	bne.n	8012d72 <http_parse_params_init+0x82>
		if (xQueue){
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d002      	beq.n	8012d72 <http_parse_params_init+0x82>
			Uptime_Q = xQueue;
 8012d6c:	4a09      	ldr	r2, [pc, #36]	; (8012d94 <http_parse_params_init+0xa4>)
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	6013      	str	r3, [r2, #0]
}
 8012d72:	bf00      	nop
 8012d74:	370c      	adds	r7, #12
 8012d76:	46bd      	mov	sp, r7
 8012d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d7c:	4770      	bx	lr
 8012d7e:	bf00      	nop
 8012d80:	200004e4 	.word	0x200004e4
 8012d84:	200004e8 	.word	0x200004e8
 8012d88:	200004ec 	.word	0x200004ec
 8012d8c:	200004f0 	.word	0x200004f0
 8012d90:	200004f4 	.word	0x200004f4
 8012d94:	200004f8 	.word	0x200004f8

08012d98 <param_from_http_to_Q>:

void param_from_http_to_Q(char * http_resp, const uint8_t parameters_type){
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b0cc      	sub	sp, #304	; 0x130
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012da2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012da6:	6018      	str	r0, [r3, #0]
 8012da8:	460a      	mov	r2, r1
 8012daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012dae:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8012db2:	701a      	strb	r2, [r3, #0]
	float				shunt_value;
	P_sens_sett_struct	PowShunSett;

	uint8_t * buf;

	switch (parameters_type) {
 8012db4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012db8:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8012dbc:	781b      	ldrb	r3, [r3, #0]
 8012dbe:	2b04      	cmp	r3, #4
 8012dc0:	f200 814a 	bhi.w	8013058 <param_from_http_to_Q+0x2c0>
 8012dc4:	a201      	add	r2, pc, #4	; (adr r2, 8012dcc <param_from_http_to_Q+0x34>)
 8012dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012dca:	bf00      	nop
 8012dcc:	08012de1 	.word	0x08012de1
 8012dd0:	08013059 	.word	0x08013059
 8012dd4:	08012f6d 	.word	0x08012f6d
 8012dd8:	08013059 	.word	0x08013059
 8012ddc:	08012ff3 	.word	0x08012ff3

		case MQTT:

			memset(&MQTT_params, 0, sizeof(MQTT_params));
 8012de0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012de4:	22c6      	movs	r2, #198	; 0xc6
 8012de6:	2100      	movs	r1, #0
 8012de8:	4618      	mov	r0, r3
 8012dea:	f01a fc6f 	bl	802d6cc <memset>

			if (strstr(get_http_param_value( http_resp, "mqtt"), "1")){
 8012dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012df2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012df6:	499c      	ldr	r1, [pc, #624]	; (8013068 <param_from_http_to_Q+0x2d0>)
 8012df8:	6818      	ldr	r0, [r3, #0]
 8012dfa:	f00b fc57 	bl	801e6ac <get_http_param_value>
 8012dfe:	4603      	mov	r3, r0
 8012e00:	2131      	movs	r1, #49	; 0x31
 8012e02:	4618      	mov	r0, r3
 8012e04:	f01a fc79 	bl	802d6fa <strchr>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d003      	beq.n	8012e16 <param_from_http_to_Q+0x7e>
				MQTT_params.enable = 1;
 8012e0e:	2301      	movs	r3, #1
 8012e10:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8012e14:	e012      	b.n	8012e3c <param_from_http_to_Q+0xa4>
			}else if (strstr(get_http_param_value( http_resp, "mqtt"), "0")) {
 8012e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012e1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e1e:	4992      	ldr	r1, [pc, #584]	; (8013068 <param_from_http_to_Q+0x2d0>)
 8012e20:	6818      	ldr	r0, [r3, #0]
 8012e22:	f00b fc43 	bl	801e6ac <get_http_param_value>
 8012e26:	4603      	mov	r3, r0
 8012e28:	2130      	movs	r1, #48	; 0x30
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f01a fc65 	bl	802d6fa <strchr>
 8012e30:	4603      	mov	r3, r0
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d002      	beq.n	8012e3c <param_from_http_to_Q+0xa4>
				MQTT_params.enable = 0;
 8012e36:	2300      	movs	r3, #0
 8012e38:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "login");
 8012e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012e40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e44:	4989      	ldr	r1, [pc, #548]	; (801306c <param_from_http_to_Q+0x2d4>)
 8012e46:	6818      	ldr	r0, [r3, #0]
 8012e48:	f00b fc30 	bl	801e6ac <get_http_param_value>
 8012e4c:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) < sizeof(MQTT_params.login) / sizeof(char)) ){
 8012e50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d106      	bne.n	8012e66 <param_from_http_to_Q+0xce>
 8012e58:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8012e5c:	f7fd fa20 	bl	80102a0 <strlen>
 8012e60:	4603      	mov	r3, r0
 8012e62:	2b20      	cmp	r3, #32
 8012e64:	d807      	bhi.n	8012e76 <param_from_http_to_Q+0xde>
				strcpy(MQTT_params.login, buf);
 8012e66:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012e6a:	3384      	adds	r3, #132	; 0x84
 8012e6c:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8012e70:	4618      	mov	r0, r3
 8012e72:	f01a fdf8 	bl	802da66 <strcpy>
				//TODO change to strncpy
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "password");
 8012e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012e7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e7e:	497c      	ldr	r1, [pc, #496]	; (8013070 <param_from_http_to_Q+0x2d8>)
 8012e80:	6818      	ldr	r0, [r3, #0]
 8012e82:	f00b fc13 	bl	801e6ac <get_http_param_value>
 8012e86:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) < sizeof(MQTT_params.pass) / sizeof(char)) ){
 8012e8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d106      	bne.n	8012ea0 <param_from_http_to_Q+0x108>
 8012e92:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8012e96:	f7fd fa03 	bl	80102a0 <strlen>
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	2b20      	cmp	r3, #32
 8012e9e:	d807      	bhi.n	8012eb0 <param_from_http_to_Q+0x118>
				strcpy(MQTT_params.pass, buf);
 8012ea0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012ea4:	33a5      	adds	r3, #165	; 0xa5
 8012ea6:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8012eaa:	4618      	mov	r0, r3
 8012eac:	f01a fddb 	bl	802da66 <strcpy>
				//TODO change to strncpy
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "uri");
 8012eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012eb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012eb8:	496e      	ldr	r1, [pc, #440]	; (8013074 <param_from_http_to_Q+0x2dc>)
 8012eba:	6818      	ldr	r0, [r3, #0]
 8012ebc:	f00b fbf6 	bl	801e6ac <get_http_param_value>
 8012ec0:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) <= MAX_DOMAIN_NAME -1 ) ) {						 // 15 ��������, ������������ ����� IPv4
 8012ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d106      	bne.n	8012eda <param_from_http_to_Q+0x142>
 8012ecc:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8012ed0:	f7fd f9e6 	bl	80102a0 <strlen>
 8012ed4:	4603      	mov	r3, r0
 8012ed6:	2b7f      	cmp	r3, #127	; 0x7f
 8012ed8:	d808      	bhi.n	8012eec <param_from_http_to_Q+0x154>
				//sscanf(buf, "%d.%d.%d.%d", &ip_addr[0], &ip_addr[1], &ip_addr[2], &ip_addr[3]);
				strncpy(MQTT_params.uri, buf, MAX_DOMAIN_NAME - 1);
 8012eda:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012ede:	3302      	adds	r3, #2
 8012ee0:	227f      	movs	r2, #127	; 0x7f
 8012ee2:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	f01a fc4a 	bl	802d780 <strncpy>
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "port");
 8012eec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012ef0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ef4:	4960      	ldr	r1, [pc, #384]	; (8013078 <param_from_http_to_Q+0x2e0>)
 8012ef6:	6818      	ldr	r0, [r3, #0]
 8012ef8:	f00b fbd8 	bl	801e6ac <get_http_param_value>
 8012efc:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) <= 5) ) {						// 5 ��������, ������������ ����� ������ �����
 8012f00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d106      	bne.n	8012f16 <param_from_http_to_Q+0x17e>
 8012f08:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8012f0c:	f7fd f9c8 	bl	80102a0 <strlen>
 8012f10:	4603      	mov	r3, r0
 8012f12:	2b05      	cmp	r3, #5
 8012f14:	d81e      	bhi.n	8012f54 <param_from_http_to_Q+0x1bc>
				sscanf(buf, "%d", &port);
 8012f16:	f107 0316 	add.w	r3, r7, #22
 8012f1a:	461a      	mov	r2, r3
 8012f1c:	4957      	ldr	r1, [pc, #348]	; (801307c <param_from_http_to_Q+0x2e4>)
 8012f1e:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8012f22:	f01a faa3 	bl	802d46c <siscanf>
				if ((port > 0) && (port < 65535)){
 8012f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012f2a:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8012f2e:	881b      	ldrh	r3, [r3, #0]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d00f      	beq.n	8012f54 <param_from_http_to_Q+0x1bc>
 8012f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012f38:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8012f3c:	881b      	ldrh	r3, [r3, #0]
 8012f3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012f42:	4293      	cmp	r3, r2
 8012f44:	d006      	beq.n	8012f54 <param_from_http_to_Q+0x1bc>
					MQTT_params.port = port;
 8012f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012f4a:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8012f4e:	881b      	ldrh	r3, [r3, #0]
 8012f50:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
				}
			}

			MQTT_params.save = 1;
 8012f54:	2301      	movs	r3, #1
 8012f56:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

			xQueueOverwrite(MQTT_Q, (void *)&MQTT_params);
 8012f5a:	4b49      	ldr	r3, [pc, #292]	; (8013080 <param_from_http_to_Q+0x2e8>)
 8012f5c:	6818      	ldr	r0, [r3, #0]
 8012f5e:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8012f62:	2302      	movs	r3, #2
 8012f64:	2200      	movs	r2, #0
 8012f66:	f00d fd57 	bl	8020a18 <xQueueGenericSend>

			break;
 8012f6a:	e078      	b.n	801305e <param_from_http_to_Q+0x2c6>

		case ModBusTCP:
			memset(&ModBusTCP_parameters, 0, sizeof(ModBusTCP_parameters));
 8012f6c:	f107 031c 	add.w	r3, r7, #28
 8012f70:	2202      	movs	r2, #2
 8012f72:	2100      	movs	r1, #0
 8012f74:	4618      	mov	r0, r3
 8012f76:	f01a fba9 	bl	802d6cc <memset>
			if (strstr(get_http_param_value( http_resp, "mb_tcp"), "1")){
 8012f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012f7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012f82:	4940      	ldr	r1, [pc, #256]	; (8013084 <param_from_http_to_Q+0x2ec>)
 8012f84:	6818      	ldr	r0, [r3, #0]
 8012f86:	f00b fb91 	bl	801e6ac <get_http_param_value>
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	2131      	movs	r1, #49	; 0x31
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f01a fbb3 	bl	802d6fa <strchr>
 8012f94:	4603      	mov	r3, r0
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d006      	beq.n	8012fa8 <param_from_http_to_Q+0x210>
				ModBusTCP_parameters.enable = 1;
 8012f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012f9e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012fa2:	2201      	movs	r2, #1
 8012fa4:	705a      	strb	r2, [r3, #1]
 8012fa6:	e015      	b.n	8012fd4 <param_from_http_to_Q+0x23c>
			}else if (strstr(get_http_param_value( http_resp, "mb_tcp"), "0")) {
 8012fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012fac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012fb0:	4934      	ldr	r1, [pc, #208]	; (8013084 <param_from_http_to_Q+0x2ec>)
 8012fb2:	6818      	ldr	r0, [r3, #0]
 8012fb4:	f00b fb7a 	bl	801e6ac <get_http_param_value>
 8012fb8:	4603      	mov	r3, r0
 8012fba:	2130      	movs	r1, #48	; 0x30
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	f01a fb9c 	bl	802d6fa <strchr>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d005      	beq.n	8012fd4 <param_from_http_to_Q+0x23c>
				ModBusTCP_parameters.enable = 0;
 8012fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012fcc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	705a      	strb	r2, [r3, #1]
			}
			ModBusTCP_parameters.save = 1;
 8012fd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012fd8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012fdc:	2201      	movs	r2, #1
 8012fde:	701a      	strb	r2, [r3, #0]

			xQueueOverwrite(ModbusTCP_Q, (void *)&ModBusTCP_parameters);
 8012fe0:	4b29      	ldr	r3, [pc, #164]	; (8013088 <param_from_http_to_Q+0x2f0>)
 8012fe2:	6818      	ldr	r0, [r3, #0]
 8012fe4:	f107 011c 	add.w	r1, r7, #28
 8012fe8:	2302      	movs	r3, #2
 8012fea:	2200      	movs	r2, #0
 8012fec:	f00d fd14 	bl	8020a18 <xQueueGenericSend>
			break;
 8012ff0:	e035      	b.n	801305e <param_from_http_to_Q+0x2c6>
		case HA:

			break;
//TODO hui pizda zalupa
		case PowrSensSett:
			buf = (uint8_t *) get_http_param_value( http_resp, "shunt");
 8012ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012ff6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ffa:	4924      	ldr	r1, [pc, #144]	; (801308c <param_from_http_to_Q+0x2f4>)
 8012ffc:	6818      	ldr	r0, [r3, #0]
 8012ffe:	f00b fb55 	bl	801e6ac <get_http_param_value>
 8013002:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf ) {						// 5 ��������, ������������ ����� ������ �����
 8013006:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801300a:	2b00      	cmp	r3, #0
 801300c:	d026      	beq.n	801305c <param_from_http_to_Q+0x2c4>
				sscanf(buf, "%f", &float_temp);							//TODO add validation
 801300e:	4a20      	ldr	r2, [pc, #128]	; (8013090 <param_from_http_to_Q+0x2f8>)
 8013010:	4920      	ldr	r1, [pc, #128]	; (8013094 <param_from_http_to_Q+0x2fc>)
 8013012:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8013016:	f01a fa29 	bl	802d46c <siscanf>
				if (float_temp > 0){									//validate value
 801301a:	4b1d      	ldr	r3, [pc, #116]	; (8013090 <param_from_http_to_Q+0x2f8>)
 801301c:	edd3 7a00 	vldr	s15, [r3]
 8013020:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013028:	dc00      	bgt.n	801302c <param_from_http_to_Q+0x294>
					PowShunSett.resistance = float_temp;
					PowShunSett.save = 1;
					xQueueOverwrite(PowerSensSettings_Q, (void *)&PowShunSett);
				}
			}
			break;
 801302a:	e017      	b.n	801305c <param_from_http_to_Q+0x2c4>
					PowShunSett.resistance = float_temp;
 801302c:	4b18      	ldr	r3, [pc, #96]	; (8013090 <param_from_http_to_Q+0x2f8>)
 801302e:	681a      	ldr	r2, [r3, #0]
 8013030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013034:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8013038:	605a      	str	r2, [r3, #4]
					PowShunSett.save = 1;
 801303a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801303e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8013042:	2201      	movs	r2, #1
 8013044:	701a      	strb	r2, [r3, #0]
					xQueueOverwrite(PowerSensSettings_Q, (void *)&PowShunSett);
 8013046:	4b14      	ldr	r3, [pc, #80]	; (8013098 <param_from_http_to_Q+0x300>)
 8013048:	6818      	ldr	r0, [r3, #0]
 801304a:	f107 010c 	add.w	r1, r7, #12
 801304e:	2302      	movs	r3, #2
 8013050:	2200      	movs	r2, #0
 8013052:	f00d fce1 	bl	8020a18 <xQueueGenericSend>
			break;
 8013056:	e001      	b.n	801305c <param_from_http_to_Q+0x2c4>
		default:
			break;
 8013058:	bf00      	nop
 801305a:	e000      	b.n	801305e <param_from_http_to_Q+0x2c6>
			break;
 801305c:	bf00      	nop
	}
}
 801305e:	bf00      	nop
 8013060:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8013064:	46bd      	mov	sp, r7
 8013066:	bd80      	pop	{r7, pc}
 8013068:	08032448 	.word	0x08032448
 801306c:	08032450 	.word	0x08032450
 8013070:	08032458 	.word	0x08032458
 8013074:	08032464 	.word	0x08032464
 8013078:	08032468 	.word	0x08032468
 801307c:	08032470 	.word	0x08032470
 8013080:	200004e4 	.word	0x200004e4
 8013084:	08032474 	.word	0x08032474
 8013088:	200004ec 	.word	0x200004ec
 801308c:	0803247c 	.word	0x0803247c
 8013090:	200004fc 	.word	0x200004fc
 8013094:	08032484 	.word	0x08032484
 8013098:	200004f4 	.word	0x200004f4

0801309c <param_from_Q_to_JSON>:

void param_from_Q_to_JSON(char * buf, const uint8_t parameters_type, uint16_t * len){
 801309c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130a0:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 80130a4:	af0a      	add	r7, sp, #40	; 0x28
 80130a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80130aa:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80130ae:	6018      	str	r0, [r3, #0]
 80130b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80130b4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80130b8:	601a      	str	r2, [r3, #0]
 80130ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80130be:	f2a3 13e5 	subw	r3, r3, #485	; 0x1e5
 80130c2:	460a      	mov	r2, r1
 80130c4:	701a      	strb	r2, [r3, #0]

	MQTT_cred_struct	MQTT_params;
	PowerSensStruct		PowerParm;
	P_sens_sett_struct	PowShunSett;

	unsigned const char template_mqtt_data[] 	= {"{\"login\": \"%s\", \"pass\": \"********\", \"addr\": \"%s\", \"port\": \"%u\", \"enabled\": \"%u\"}"};//{"login": "admin", "pass": "1234", "addr": "10.0.2.20", "port": "1883", "enabled": 1 }
 80130c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80130ca:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80130ce:	4a73      	ldr	r2, [pc, #460]	; (801329c <param_from_Q_to_JSON+0x200>)
 80130d0:	4618      	mov	r0, r3
 80130d2:	4611      	mov	r1, r2
 80130d4:	2351      	movs	r3, #81	; 0x51
 80130d6:	461a      	mov	r2, r3
 80130d8:	f01a fccd 	bl	802da76 <memcpy>
	unsigned const char template_power_data[] 	= {"{\"voltage\": \"%.2f\", \"current\": \"%.2f\", \"active_power_w\": \"%.2f\", \"apparent_power_w\": \"%.2f\", \"power_factor\": \"%.2f\", \"W_h\": \"%.2f\"}"};//{"voltage": "233.2", "current": "0.56", "active_power_w": "33.4", "apparent_power_w": "65.2", "power_factor": "0.5", "KW/h": "0.5634"}
 80130dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80130e0:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80130e4:	4a6e      	ldr	r2, [pc, #440]	; (80132a0 <param_from_Q_to_JSON+0x204>)
 80130e6:	4618      	mov	r0, r3
 80130e8:	4611      	mov	r1, r2
 80130ea:	2384      	movs	r3, #132	; 0x84
 80130ec:	461a      	mov	r2, r3
 80130ee:	f01a fcc2 	bl	802da76 <memcpy>
	unsigned const char template_shunt_sett[]   = {"{\"shunt\": \"%.4f\"}"};
 80130f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80130f6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80130fa:	4a6a      	ldr	r2, [pc, #424]	; (80132a4 <param_from_Q_to_JSON+0x208>)
 80130fc:	461c      	mov	r4, r3
 80130fe:	4615      	mov	r5, r2
 8013100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013104:	682b      	ldr	r3, [r5, #0]
 8013106:	8023      	strh	r3, [r4, #0]

	switch (parameters_type) {
 8013108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801310c:	f2a3 13e5 	subw	r3, r3, #485	; 0x1e5
 8013110:	781b      	ldrb	r3, [r3, #0]
 8013112:	2b04      	cmp	r3, #4
 8013114:	f000 8093 	beq.w	801323e <param_from_Q_to_JSON+0x1a2>
 8013118:	2b04      	cmp	r3, #4
 801311a:	f300 80b8 	bgt.w	801328e <param_from_Q_to_JSON+0x1f2>
 801311e:	2b00      	cmp	r3, #0
 8013120:	d002      	beq.n	8013128 <param_from_Q_to_JSON+0x8c>
 8013122:	2b03      	cmp	r3, #3
 8013124:	d031      	beq.n	801318a <param_from_Q_to_JSON+0xee>
			xQueuePeek(PowerSensSettings_Q ,&PowShunSett,0);
			sprintf(buf, (const char *)template_shunt_sett, PowShunSett.resistance);
			*len = strlen(buf);
			break;
		default:
			break;
 8013126:	e0b2      	b.n	801328e <param_from_Q_to_JSON+0x1f2>
			xQueuePeek(MQTT_Q ,&MQTT_params,0);
 8013128:	4b5f      	ldr	r3, [pc, #380]	; (80132a8 <param_from_Q_to_JSON+0x20c>)
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8013130:	2200      	movs	r2, #0
 8013132:	4618      	mov	r0, r3
 8013134:	f00d fff6 	bl	8021124 <xQueuePeek>
			sprintf(buf, (const char *)template_mqtt_data, MQTT_params.login, MQTT_params.uri, MQTT_params.port, MQTT_params.enable);
 8013138:	f8b7 31ba 	ldrh.w	r3, [r7, #442]	; 0x1ba
 801313c:	461d      	mov	r5, r3
 801313e:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 8013142:	461e      	mov	r6, r3
 8013144:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013148:	1c9c      	adds	r4, r3, #2
 801314a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801314e:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8013152:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8013156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801315a:	f5a3 70f2 	sub.w	r0, r3, #484	; 0x1e4
 801315e:	9601      	str	r6, [sp, #4]
 8013160:	9500      	str	r5, [sp, #0]
 8013162:	4623      	mov	r3, r4
 8013164:	6800      	ldr	r0, [r0, #0]
 8013166:	f01a f961 	bl	802d42c <siprintf>
			*len = strlen(buf);
 801316a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801316e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013172:	6818      	ldr	r0, [r3, #0]
 8013174:	f7fd f894 	bl	80102a0 <strlen>
 8013178:	4603      	mov	r3, r0
 801317a:	b29a      	uxth	r2, r3
 801317c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013180:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	801a      	strh	r2, [r3, #0]
			break;
 8013188:	e082      	b.n	8013290 <param_from_Q_to_JSON+0x1f4>
			xQueuePeek(Power_Data_Q ,&PowerParm,0);
 801318a:	4b48      	ldr	r3, [pc, #288]	; (80132ac <param_from_Q_to_JSON+0x210>)
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8013192:	2200      	movs	r2, #0
 8013194:	4618      	mov	r0, r3
 8013196:	f00d ffc5 	bl	8021124 <xQueuePeek>
			sprintf(buf, (const char *)template_power_data, PowerParm.Voltage, PowerParm.Current, PowerParm.ActivePower, PowerParm.ApparPower, PowerParm.PowerFactor, PowerParm.KWatt_h);
 801319a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801319e:	4618      	mov	r0, r3
 80131a0:	f7fd f9ea 	bl	8010578 <__aeabi_f2d>
 80131a4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80131a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80131ac:	4618      	mov	r0, r3
 80131ae:	f7fd f9e3 	bl	8010578 <__aeabi_f2d>
 80131b2:	4604      	mov	r4, r0
 80131b4:	460d      	mov	r5, r1
 80131b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80131ba:	4618      	mov	r0, r3
 80131bc:	f7fd f9dc 	bl	8010578 <__aeabi_f2d>
 80131c0:	4680      	mov	r8, r0
 80131c2:	4689      	mov	r9, r1
 80131c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80131c8:	4618      	mov	r0, r3
 80131ca:	f7fd f9d5 	bl	8010578 <__aeabi_f2d>
 80131ce:	4682      	mov	sl, r0
 80131d0:	468b      	mov	fp, r1
 80131d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80131d6:	4618      	mov	r0, r3
 80131d8:	f7fd f9ce 	bl	8010578 <__aeabi_f2d>
 80131dc:	e9c7 0100 	strd	r0, r1, [r7]
 80131e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80131e4:	4618      	mov	r0, r3
 80131e6:	f7fd f9c7 	bl	8010578 <__aeabi_f2d>
 80131ea:	4602      	mov	r2, r0
 80131ec:	460b      	mov	r3, r1
 80131ee:	f107 0634 	add.w	r6, r7, #52	; 0x34
 80131f2:	f507 7100 	add.w	r1, r7, #512	; 0x200
 80131f6:	f5a1 70f2 	sub.w	r0, r1, #484	; 0x1e4
 80131fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80131fe:	ed97 7b00 	vldr	d7, [r7]
 8013202:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013206:	e9cd ab04 	strd	sl, fp, [sp, #16]
 801320a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801320e:	e9cd 4500 	strd	r4, r5, [sp]
 8013212:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013216:	4631      	mov	r1, r6
 8013218:	6800      	ldr	r0, [r0, #0]
 801321a:	f01a f907 	bl	802d42c <siprintf>
			*len = strlen(buf);
 801321e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013222:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013226:	6818      	ldr	r0, [r3, #0]
 8013228:	f7fd f83a 	bl	80102a0 <strlen>
 801322c:	4603      	mov	r3, r0
 801322e:	b29a      	uxth	r2, r3
 8013230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013234:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	801a      	strh	r2, [r3, #0]
			break;
 801323c:	e028      	b.n	8013290 <param_from_Q_to_JSON+0x1f4>
			xQueuePeek(PowerSensSettings_Q ,&PowShunSett,0);
 801323e:	4b1c      	ldr	r3, [pc, #112]	; (80132b0 <param_from_Q_to_JSON+0x214>)
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8013246:	2200      	movs	r2, #0
 8013248:	4618      	mov	r0, r3
 801324a:	f00d ff6b 	bl	8021124 <xQueuePeek>
			sprintf(buf, (const char *)template_shunt_sett, PowShunSett.resistance);
 801324e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8013252:	4618      	mov	r0, r3
 8013254:	f7fd f990 	bl	8010578 <__aeabi_f2d>
 8013258:	4602      	mov	r2, r0
 801325a:	460b      	mov	r3, r1
 801325c:	f107 0120 	add.w	r1, r7, #32
 8013260:	f507 7000 	add.w	r0, r7, #512	; 0x200
 8013264:	f5a0 70f2 	sub.w	r0, r0, #484	; 0x1e4
 8013268:	6800      	ldr	r0, [r0, #0]
 801326a:	f01a f8df 	bl	802d42c <siprintf>
			*len = strlen(buf);
 801326e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013272:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013276:	6818      	ldr	r0, [r3, #0]
 8013278:	f7fd f812 	bl	80102a0 <strlen>
 801327c:	4603      	mov	r3, r0
 801327e:	b29a      	uxth	r2, r3
 8013280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013284:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	801a      	strh	r2, [r3, #0]
			break;
 801328c:	e000      	b.n	8013290 <param_from_Q_to_JSON+0x1f4>
			break;
 801328e:	bf00      	nop
	}
}
 8013290:	bf00      	nop
 8013292:	f507 7701 	add.w	r7, r7, #516	; 0x204
 8013296:	46bd      	mov	sp, r7
 8013298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801329c:	08032488 	.word	0x08032488
 80132a0:	080324dc 	.word	0x080324dc
 80132a4:	08032560 	.word	0x08032560
 80132a8:	200004e4 	.word	0x200004e4
 80132ac:	200004f0 	.word	0x200004f0
 80132b0:	200004f4 	.word	0x200004f4

080132b4 <write_to_file>:

int write_to_file(char * buf, uint16_t * len, char * response, char * base_path){
 80132b4:	b590      	push	{r4, r7, lr}
 80132b6:	f5ad 7d3f 	sub.w	sp, sp, #764	; 0x2fc
 80132ba:	af02      	add	r7, sp, #8
 80132bc:	f507 743c 	add.w	r4, r7, #752	; 0x2f0
 80132c0:	f5a4 7439 	sub.w	r4, r4, #740	; 0x2e4
 80132c4:	6020      	str	r0, [r4, #0]
 80132c6:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 80132ca:	f5a0 703a 	sub.w	r0, r0, #744	; 0x2e8
 80132ce:	6001      	str	r1, [r0, #0]
 80132d0:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 80132d4:	f5a1 713b 	sub.w	r1, r1, #748	; 0x2ec
 80132d8:	600a      	str	r2, [r1, #0]
 80132da:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 80132de:	f5a2 723c 	sub.w	r2, r2, #752	; 0x2f0
 80132e2:	6013      	str	r3, [r2, #0]
	uint32_t	number;
	unsigned char output[17];
	unsigned char recv_digest_bin[17];
	int i, t ,t2 ,r;

	p_len = &parsed_len;
 80132e4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80132e8:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4

	param_value = get_http_param_value((char *)buf, "filename");
 80132ec:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80132f0:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80132f4:	49ac      	ldr	r1, [pc, #688]	; (80135a8 <write_to_file+0x2f4>)
 80132f6:	6818      	ldr	r0, [r3, #0]
 80132f8:	f00b f9d8 	bl	801e6ac <get_http_param_value>
 80132fc:	f8c7 02e0 	str.w	r0, [r7, #736]	; 0x2e0
	if (param_value){
 8013300:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8013304:	2b00      	cmp	r3, #0
 8013306:	d025      	beq.n	8013354 <write_to_file+0xa0>
		strcpy(filename, base_path);
 8013308:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801330c:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8013310:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8013314:	6819      	ldr	r1, [r3, #0]
 8013316:	4610      	mov	r0, r2
 8013318:	f01a fba5 	bl	802da66 <strcpy>
		strncat(filename, param_value, MAX_CONTENT_NAME_LEN-5);
 801331c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8013320:	222d      	movs	r2, #45	; 0x2d
 8013322:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8013326:	4618      	mov	r0, r3
 8013328:	f01a fa05 	bl	802d736 <strncat>
		return;
	}

	//step_number = get_http_param_value((char *)buf, "step");

	param_value = get_http_param_value((char *)buf, "data");
 801332c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013330:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8013334:	499d      	ldr	r1, [pc, #628]	; (80135ac <write_to_file+0x2f8>)
 8013336:	6818      	ldr	r0, [r3, #0]
 8013338:	f00b f9b8 	bl	801e6ac <get_http_param_value>
 801333c:	f8c7 02e0 	str.w	r0, [r7, #736]	; 0x2e0

	if (strlen(param_value) >=  TMP_BUFF_FOR_FILE_RECV){ //check if resieved data in parameter "data" not bigger then buffer
 8013340:	f8d7 02e0 	ldr.w	r0, [r7, #736]	; 0x2e0
 8013344:	f7fc ffac 	bl	80102a0 <strlen>
 8013348:	4603      	mov	r3, r0
 801334a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801334e:	f080 8113 	bcs.w	8013578 <write_to_file+0x2c4>
 8013352:	e011      	b.n	8013378 <write_to_file+0xc4>
		strncpy(response, "error", strlen("error")+1);
 8013354:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013358:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	4a94      	ldr	r2, [pc, #592]	; (80135b0 <write_to_file+0x2fc>)
 8013360:	6810      	ldr	r0, [r2, #0]
 8013362:	6018      	str	r0, [r3, #0]
 8013364:	8892      	ldrh	r2, [r2, #4]
 8013366:	809a      	strh	r2, [r3, #4]
		*len = strlen("error");
 8013368:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801336c:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	2205      	movs	r2, #5
 8013374:	801a      	strh	r2, [r3, #0]
		return;
 8013376:	e111      	b.n	801359c <write_to_file+0x2e8>

	}else if (param_value){								//check if resieved data len > 0
 8013378:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801337c:	2b00      	cmp	r3, #0
 801337e:	f000 80e9 	beq.w	8013554 <write_to_file+0x2a0>
		recv_len = strlen(param_value);
 8013382:	f8d7 02e0 	ldr.w	r0, [r7, #736]	; 0x2e0
 8013386:	f7fc ff8b 	bl	80102a0 <strlen>
 801338a:	4603      	mov	r3, r0
 801338c:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
//		replacetochar(param_value, ' ', '+');
		err = mbedtls_base64_decode((unsigned char *)tmp_data_buf, TMP_BUFF_FOR_FILE_RECV, p_len, (const unsigned char *)param_value, recv_len);
 8013390:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8013394:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8013398:	9300      	str	r3, [sp, #0]
 801339a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801339e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80133a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80133a6:	f017 fe1f 	bl	802afe8 <mbedtls_base64_decode>
 80133aa:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec

		parsed_digest = get_http_param_value((char *)buf, "digest");
 80133ae:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80133b2:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80133b6:	497f      	ldr	r1, [pc, #508]	; (80135b4 <write_to_file+0x300>)
 80133b8:	6818      	ldr	r0, [r3, #0]
 80133ba:	f00b f977 	bl	801e6ac <get_http_param_value>
 80133be:	f8c7 02d8 	str.w	r0, [r7, #728]	; 0x2d8

	    for (i = 0; i< 32 ; i+=2){
 80133c2:	2300      	movs	r3, #0
 80133c4:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 80133c8:	e030      	b.n	801342c <write_to_file+0x178>
	        t = CharToDec(parsed_digest[i]);
 80133ca:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80133ce:	f8d7 22d8 	ldr.w	r2, [r7, #728]	; 0x2d8
 80133d2:	4413      	add	r3, r2
 80133d4:	781b      	ldrb	r3, [r3, #0]
 80133d6:	4618      	mov	r0, r3
 80133d8:	f7ff fc63 	bl	8012ca2 <CharToDec>
 80133dc:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	        t2 = CharToDec(parsed_digest[i+1]);
 80133e0:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80133e4:	3301      	adds	r3, #1
 80133e6:	f8d7 22d8 	ldr.w	r2, [r7, #728]	; 0x2d8
 80133ea:	4413      	add	r3, r2
 80133ec:	781b      	ldrb	r3, [r3, #0]
 80133ee:	4618      	mov	r0, r3
 80133f0:	f7ff fc57 	bl	8012ca2 <CharToDec>
 80133f4:	f8c7 02c8 	str.w	r0, [r7, #712]	; 0x2c8
	        recv_digest_bin[i/2] = t << 4 | t2;
 80133f8:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80133fc:	011b      	lsls	r3, r3, #4
 80133fe:	b25a      	sxtb	r2, r3
 8013400:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8013404:	b25b      	sxtb	r3, r3
 8013406:	4313      	orrs	r3, r2
 8013408:	b259      	sxtb	r1, r3
 801340a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801340e:	0fda      	lsrs	r2, r3, #31
 8013410:	4413      	add	r3, r2
 8013412:	105b      	asrs	r3, r3, #1
 8013414:	461a      	mov	r2, r3
 8013416:	b2c9      	uxtb	r1, r1
 8013418:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801341c:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8013420:	5499      	strb	r1, [r3, r2]
	    for (i = 0; i< 32 ; i+=2){
 8013422:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8013426:	3302      	adds	r3, #2
 8013428:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 801342c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8013430:	2b1f      	cmp	r3, #31
 8013432:	ddca      	ble.n	80133ca <write_to_file+0x116>
	    }
	    recv_digest_bin[16] = '\0';
 8013434:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013438:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 801343c:	2200      	movs	r2, #0
 801343e:	741a      	strb	r2, [r3, #16]


		mbedtls_md5_context md5_ctx;

		mbedtls_md5_init(&md5_ctx);
 8013440:	f107 0310 	add.w	r3, r7, #16
 8013444:	4618      	mov	r0, r3
 8013446:	f017 feeb 	bl	802b220 <mbedtls_md5_init>
		mbedtls_md5_starts_ret(&md5_ctx);
 801344a:	f107 0310 	add.w	r3, r7, #16
 801344e:	4618      	mov	r0, r3
 8013450:	f017 ff04 	bl	802b25c <mbedtls_md5_starts_ret>
		mbedtls_md5_update_ret(&md5_ctx, tmp_data_buf, *p_len);
 8013454:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8013458:	681a      	ldr	r2, [r3, #0]
 801345a:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 801345e:	f107 0310 	add.w	r3, r7, #16
 8013462:	4618      	mov	r0, r3
 8013464:	f018 fde4 	bl	802c030 <mbedtls_md5_update_ret>
		mbedtls_md5_finish_ret(&md5_ctx, output);
 8013468:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 801346c:	f107 0310 	add.w	r3, r7, #16
 8013470:	4611      	mov	r1, r2
 8013472:	4618      	mov	r0, r3
 8013474:	f018 fe51 	bl	802c11a <mbedtls_md5_finish_ret>
		mbedtls_md5_free(&md5_ctx);
 8013478:	f107 0310 	add.w	r3, r7, #16
 801347c:	4618      	mov	r0, r3
 801347e:	f017 fedc 	bl	802b23a <mbedtls_md5_free>
		output[16] = '\0';
 8013482:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013486:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 801348a:	2200      	movs	r2, #0
 801348c:	741a      	strb	r2, [r3, #16]



		if (strncmp(&recv_digest_bin, &output, 16)){
 801348e:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8013492:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013496:	2210      	movs	r2, #16
 8013498:	4618      	mov	r0, r3
 801349a:	f01a f95f 	bl	802d75c <strncmp>
 801349e:	4603      	mov	r3, r0
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d006      	beq.n	80134b2 <write_to_file+0x1fe>
			err = -1;
 80134a4:	f04f 33ff 	mov.w	r3, #4294967295
 80134a8:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
			return err;
 80134ac:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80134b0:	e074      	b.n	801359c <write_to_file+0x2e8>
		}

		step_number = get_http_param_value((char *)buf, "step");
 80134b2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80134b6:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80134ba:	493f      	ldr	r1, [pc, #252]	; (80135b8 <write_to_file+0x304>)
 80134bc:	6818      	ldr	r0, [r3, #0]
 80134be:	f00b f8f5 	bl	801e6ac <get_http_param_value>
 80134c2:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
		number = ATOI(step_number, 10);
 80134c6:	210a      	movs	r1, #10
 80134c8:	f8d7 02d4 	ldr.w	r0, [r7, #724]	; 0x2d4
 80134cc:	f00b f9a0 	bl	801e810 <ATOI>
 80134d0:	4603      	mov	r3, r0
 80134d2:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0

		if(number == 0){
 80134d6:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d10f      	bne.n	80134fe <write_to_file+0x24a>
			part =0;
 80134de:	4b37      	ldr	r3, [pc, #220]	; (80135bc <write_to_file+0x308>)
 80134e0:	2200      	movs	r2, #0
 80134e2:	601a      	str	r2, [r3, #0]
			err = spi_fs_over_write_file(filename, tmp_data_buf, *p_len);
 80134e4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80134e8:	681a      	ldr	r2, [r3, #0]
 80134ea:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80134ee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80134f2:	4618      	mov	r0, r3
 80134f4:	f017 fba6 	bl	802ac44 <spi_fs_over_write_file>
 80134f8:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec
 80134fc:	e01d      	b.n	801353a <write_to_file+0x286>
		}else{

			if(ATOI(step_number, 10)!= part){
 80134fe:	210a      	movs	r1, #10
 8013500:	f8d7 02d4 	ldr.w	r0, [r7, #724]	; 0x2d4
 8013504:	f00b f984 	bl	801e810 <ATOI>
 8013508:	4603      	mov	r3, r0
 801350a:	461a      	mov	r2, r3
 801350c:	4b2b      	ldr	r3, [pc, #172]	; (80135bc <write_to_file+0x308>)
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	429a      	cmp	r2, r3
 8013512:	d006      	beq.n	8013522 <write_to_file+0x26e>
				err = -1;
 8013514:	f04f 33ff 	mov.w	r3, #4294967295
 8013518:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
				return err;
 801351c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8013520:	e03c      	b.n	801359c <write_to_file+0x2e8>
			}

			err = spi_fs_write_file_to_end(filename, tmp_data_buf, *p_len);
 8013522:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8013526:	681a      	ldr	r2, [r3, #0]
 8013528:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 801352c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8013530:	4618      	mov	r0, r3
 8013532:	f017 fbe3 	bl	802acfc <spi_fs_write_file_to_end>
 8013536:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec
		}

		part++;
 801353a:	4b20      	ldr	r3, [pc, #128]	; (80135bc <write_to_file+0x308>)
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	3301      	adds	r3, #1
 8013540:	4a1e      	ldr	r2, [pc, #120]	; (80135bc <write_to_file+0x308>)
 8013542:	6013      	str	r3, [r2, #0]

		if (err < 0){
 8013544:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8013548:	2b00      	cmp	r3, #0
 801354a:	da15      	bge.n	8013578 <write_to_file+0x2c4>
			err = 0;
 801354c:	2300      	movs	r3, #0
 801354e:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8013552:	e011      	b.n	8013578 <write_to_file+0x2c4>
		}

		//strncpy(tmp_data_buf, param_value, TMP_BUFF_FOR_FILE_RECV-1);
	}else{
		strncpy(response, "error", strlen("error")+1);
 8013554:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013558:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	4a14      	ldr	r2, [pc, #80]	; (80135b0 <write_to_file+0x2fc>)
 8013560:	6810      	ldr	r0, [r2, #0]
 8013562:	6018      	str	r0, [r3, #0]
 8013564:	8892      	ldrh	r2, [r2, #4]
 8013566:	809a      	strh	r2, [r3, #4]
		*len = strlen("error");
 8013568:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801356c:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	2205      	movs	r2, #5
 8013574:	801a      	strh	r2, [r3, #0]
		return;
 8013576:	e011      	b.n	801359c <write_to_file+0x2e8>
	}
	strncpy(response, "ok", strlen("ok")+1);
 8013578:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801357c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	4a0f      	ldr	r2, [pc, #60]	; (80135c0 <write_to_file+0x30c>)
 8013584:	8811      	ldrh	r1, [r2, #0]
 8013586:	7892      	ldrb	r2, [r2, #2]
 8013588:	8019      	strh	r1, [r3, #0]
 801358a:	709a      	strb	r2, [r3, #2]
	*len = strlen("ok");
 801358c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013590:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	2202      	movs	r2, #2
 8013598:	801a      	strh	r2, [r3, #0]
}
 801359a:	e7ff      	b.n	801359c <write_to_file+0x2e8>
 801359c:	4618      	mov	r0, r3
 801359e:	f507 773d 	add.w	r7, r7, #756	; 0x2f4
 80135a2:	46bd      	mov	sp, r7
 80135a4:	bd90      	pop	{r4, r7, pc}
 80135a6:	bf00      	nop
 80135a8:	08032574 	.word	0x08032574
 80135ac:	08032588 	.word	0x08032588
 80135b0:	08032580 	.word	0x08032580
 80135b4:	08032590 	.word	0x08032590
 80135b8:	08032598 	.word	0x08032598
 80135bc:	20000500 	.word	0x20000500
 80135c0:	080325a0 	.word	0x080325a0

080135c4 <web_mkdir>:

int8_t web_mkdir(char * buf, char * base_path){
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b092      	sub	sp, #72	; 0x48
 80135c8:	af02      	add	r7, sp, #8
 80135ca:	6078      	str	r0, [r7, #4]
 80135cc:	6039      	str	r1, [r7, #0]

	char * dirname;
	char tmp[MAX_CONTENT_NAME_LEN];

	dirname = get_http_param_value((char *)buf, "dirname");
 80135ce:	4912      	ldr	r1, [pc, #72]	; (8013618 <web_mkdir+0x54>)
 80135d0:	6878      	ldr	r0, [r7, #4]
 80135d2:	f00b f86b 	bl	801e6ac <get_http_param_value>
 80135d6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (dirname != 0 || (strlen(dirname) < MAX_CONTENT_NAME_LEN - 5)) //TODO add dirname validation
 80135d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d105      	bne.n	80135ea <web_mkdir+0x26>
 80135de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80135e0:	f7fc fe5e 	bl	80102a0 <strlen>
 80135e4:	4603      	mov	r3, r0
 80135e6:	2b2c      	cmp	r3, #44	; 0x2c
 80135e8:	d810      	bhi.n	801360c <web_mkdir+0x48>
		{
			snprintf(tmp, sizeof(tmp), "%s%s", base_path, dirname);
 80135ea:	f107 0008 	add.w	r0, r7, #8
 80135ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135f0:	9300      	str	r3, [sp, #0]
 80135f2:	683b      	ldr	r3, [r7, #0]
 80135f4:	4a09      	ldr	r2, [pc, #36]	; (801361c <web_mkdir+0x58>)
 80135f6:	2132      	movs	r1, #50	; 0x32
 80135f8:	f019 fee4 	bl	802d3c4 <sniprintf>
			return (spi_fs_mkdir(tmp));
 80135fc:	f107 0308 	add.w	r3, r7, #8
 8013600:	4618      	mov	r0, r3
 8013602:	f017 fbd3 	bl	802adac <spi_fs_mkdir>
 8013606:	4603      	mov	r3, r0
 8013608:	b25b      	sxtb	r3, r3
 801360a:	e001      	b.n	8013610 <web_mkdir+0x4c>
		}
	return -1;
 801360c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013610:	4618      	mov	r0, r3
 8013612:	3740      	adds	r7, #64	; 0x40
 8013614:	46bd      	mov	sp, r7
 8013616:	bd80      	pop	{r7, pc}
 8013618:	080325a4 	.word	0x080325a4
 801361c:	080325ac 	.word	0x080325ac

08013620 <read_all_parameters>:

int8_t read_all_parameters(uint8_t * buf, uint16_t * len){
 8013620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013624:	f5ad 7d33 	sub.w	sp, sp, #716	; 0x2cc
 8013628:	af16      	add	r7, sp, #88	; 0x58
 801362a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801362e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8013632:	6018      	str	r0, [r3, #0]
 8013634:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013638:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 801363c:	6019      	str	r1, [r3, #0]
	P_sens_sett_struct	PowShunSett;
	MQTT_cred_struct	MQTT_params;
	ModBusTCP_struct	mb_tcp_params;
	uint32_t			uptime;

	unsigned const char template_data[] = {"{\"voltage\": \"%.2f\", \"current\": \"%.2f\", \"active_power_w\": \"%.2f\", \"apparent_power_w\": \"%.2f\", \"power_factor\": \"%.2f\", \"kWh\": \"%.2f\", \"shunt\": \"%.8f\", \"mb_tcp\": %u, \"mqtt\": %u, \"mqtt_login\": \"%s\", \"mqtt_port\": \"%u\", \"uri\": \"%s\", \"test_pulse\": \"%u\",  \"readed_pulse\": \"%u\", \"PF_reg\": \"%u\", \"uptime\": \"%u\"}"};
 801363e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013642:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8013646:	4a5d      	ldr	r2, [pc, #372]	; (80137bc <read_all_parameters+0x19c>)
 8013648:	4618      	mov	r0, r3
 801364a:	4611      	mov	r1, r2
 801364c:	f44f 7397 	mov.w	r3, #302	; 0x12e
 8013650:	461a      	mov	r2, r3
 8013652:	f01a fa10 	bl	802da76 <memcpy>

	xQueuePeek(Power_Data_Q,			(void *)&PowerParm,0);
 8013656:	4b5a      	ldr	r3, [pc, #360]	; (80137c0 <read_all_parameters+0x1a0>)
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 801365e:	2200      	movs	r2, #0
 8013660:	4618      	mov	r0, r3
 8013662:	f00d fd5f 	bl	8021124 <xQueuePeek>
	xQueuePeek(PowerSensSettings_Q ,	(void *)&PowShunSett,0);
 8013666:	4b57      	ldr	r3, [pc, #348]	; (80137c4 <read_all_parameters+0x1a4>)
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	f507 7111 	add.w	r1, r7, #580	; 0x244
 801366e:	2200      	movs	r2, #0
 8013670:	4618      	mov	r0, r3
 8013672:	f00d fd57 	bl	8021124 <xQueuePeek>
	xQueuePeek(MQTT_Q ,					(void *)&MQTT_params,0);
 8013676:	4b54      	ldr	r3, [pc, #336]	; (80137c8 <read_all_parameters+0x1a8>)
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 801367e:	2200      	movs	r2, #0
 8013680:	4618      	mov	r0, r3
 8013682:	f00d fd4f 	bl	8021124 <xQueuePeek>
	xQueuePeek(ModbusTCP_Q,				(void *)&mb_tcp_params, 0);
 8013686:	4b51      	ldr	r3, [pc, #324]	; (80137cc <read_all_parameters+0x1ac>)
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 801368e:	2200      	movs	r2, #0
 8013690:	4618      	mov	r0, r3
 8013692:	f00d fd47 	bl	8021124 <xQueuePeek>
	xQueuePeek(Uptime_Q,				(void *)&uptime, 0);
 8013696:	4b4e      	ldr	r3, [pc, #312]	; (80137d0 <read_all_parameters+0x1b0>)
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	f507 71ba 	add.w	r1, r7, #372	; 0x174
 801369e:	2200      	movs	r2, #0
 80136a0:	4618      	mov	r0, r3
 80136a2:	f00d fd3f 	bl	8021124 <xQueuePeek>


	sprintf(buf, (const char *)template_data, PowerParm.Voltage, PowerParm.Current, PowerParm.ActivePower, PowerParm.ApparPower, PowerParm.PowerFactor, PowerParm.KWatt_h, PowShunSett.resistance, mb_tcp_params.enable, MQTT_params.enable, MQTT_params.login, MQTT_params.port, MQTT_params.uri, PowerParm.test_pulse_counter, PowerParm.readed_counter, PowerParm.PF_reg, uptime);
 80136a6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80136aa:	4618      	mov	r0, r3
 80136ac:	f7fc ff64 	bl	8010578 <__aeabi_f2d>
 80136b0:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80136b4:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80136b8:	4618      	mov	r0, r3
 80136ba:	f7fc ff5d 	bl	8010578 <__aeabi_f2d>
 80136be:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 80136c2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80136c6:	4618      	mov	r0, r3
 80136c8:	f7fc ff56 	bl	8010578 <__aeabi_f2d>
 80136cc:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80136d0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80136d4:	4618      	mov	r0, r3
 80136d6:	f7fc ff4f 	bl	8010578 <__aeabi_f2d>
 80136da:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80136de:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80136e2:	4618      	mov	r0, r3
 80136e4:	f7fc ff48 	bl	8010578 <__aeabi_f2d>
 80136e8:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80136ec:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80136f0:	4618      	mov	r0, r3
 80136f2:	f7fc ff41 	bl	8010578 <__aeabi_f2d>
 80136f6:	4682      	mov	sl, r0
 80136f8:	468b      	mov	fp, r1
 80136fa:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80136fe:	4618      	mov	r0, r3
 8013700:	f7fc ff3a 	bl	8010578 <__aeabi_f2d>
 8013704:	4680      	mov	r8, r0
 8013706:	4689      	mov	r9, r1
 8013708:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 801370c:	60fb      	str	r3, [r7, #12]
 801370e:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8013712:	60bb      	str	r3, [r7, #8]
 8013714:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8013718:	607b      	str	r3, [r7, #4]
 801371a:	f8d7 4264 	ldr.w	r4, [r7, #612]	; 0x264
 801371e:	f8d7 0268 	ldr.w	r0, [r7, #616]	; 0x268
 8013722:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 8013726:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 801372a:	f107 0644 	add.w	r6, r7, #68	; 0x44
 801372e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013732:	f5a3 750d 	sub.w	r5, r3, #564	; 0x234
 8013736:	9214      	str	r2, [sp, #80]	; 0x50
 8013738:	9113      	str	r1, [sp, #76]	; 0x4c
 801373a:	9012      	str	r0, [sp, #72]	; 0x48
 801373c:	9411      	str	r4, [sp, #68]	; 0x44
 801373e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8013742:	3302      	adds	r3, #2
 8013744:	9310      	str	r3, [sp, #64]	; 0x40
 8013746:	6879      	ldr	r1, [r7, #4]
 8013748:	910f      	str	r1, [sp, #60]	; 0x3c
 801374a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801374e:	3384      	adds	r3, #132	; 0x84
 8013750:	930e      	str	r3, [sp, #56]	; 0x38
 8013752:	68b9      	ldr	r1, [r7, #8]
 8013754:	910d      	str	r1, [sp, #52]	; 0x34
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	930c      	str	r3, [sp, #48]	; 0x30
 801375a:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 801375e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013762:	ed97 7b04 	vldr	d7, [r7, #16]
 8013766:	ed8d 7b06 	vstr	d7, [sp, #24]
 801376a:	ed97 7b06 	vldr	d7, [r7, #24]
 801376e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013772:	ed97 7b08 	vldr	d7, [r7, #32]
 8013776:	ed8d 7b02 	vstr	d7, [sp, #8]
 801377a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 801377e:	ed8d 7b00 	vstr	d7, [sp]
 8013782:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8013786:	4631      	mov	r1, r6
 8013788:	6828      	ldr	r0, [r5, #0]
 801378a:	f019 fe4f 	bl	802d42c <siprintf>
	*len = strlen(buf);
 801378e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013792:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8013796:	6818      	ldr	r0, [r3, #0]
 8013798:	f7fc fd82 	bl	80102a0 <strlen>
 801379c:	4603      	mov	r3, r0
 801379e:	b29a      	uxth	r2, r3
 80137a0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80137a4:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	801a      	strh	r2, [r3, #0]

	return 0 ;
 80137ac:	2300      	movs	r3, #0
}
 80137ae:	4618      	mov	r0, r3
 80137b0:	f507 771d 	add.w	r7, r7, #628	; 0x274
 80137b4:	46bd      	mov	sp, r7
 80137b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137ba:	bf00      	nop
 80137bc:	080325b4 	.word	0x080325b4
 80137c0:	200004f0 	.word	0x200004f0
 80137c4:	200004f4 	.word	0x200004f4
 80137c8:	200004e4 	.word	0x200004e4
 80137cc:	200004ec 	.word	0x200004ec
 80137d0:	200004f8 	.word	0x200004f8

080137d4 <calculate_md5_file>:

int calculate_md5_file(char * base_path, char * filename, char * buffer, uint16_t * len){
 80137d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137d6:	b0db      	sub	sp, #364	; 0x16c
 80137d8:	af0e      	add	r7, sp, #56	; 0x38
 80137da:	6378      	str	r0, [r7, #52]	; 0x34
 80137dc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80137e0:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 80137e4:	6001      	str	r1, [r0, #0]
 80137e6:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80137ea:	f5a1 7182 	sub.w	r1, r1, #260	; 0x104
 80137ee:	600a      	str	r2, [r1, #0]
 80137f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80137f4:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80137f8:	6013      	str	r3, [r2, #0]
	unsigned char 			md5sum[17];
	mbedtls_md5_context 	md5_ctx;
	uint8_t 				read_buffer[TMP_BUF_FOR_MD5_CALC+1];
	uint32_t				offset = 0;
 80137fa:	2300      	movs	r3, #0
 80137fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	uint16_t				readed_len;
	char 					path[64];

	mbedtls_md5_init(&md5_ctx);
 8013800:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013804:	4618      	mov	r0, r3
 8013806:	f017 fd0b 	bl	802b220 <mbedtls_md5_init>
	mbedtls_md5_starts_ret(&md5_ctx);
 801380a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801380e:	4618      	mov	r0, r3
 8013810:	f017 fd24 	bl	802b25c <mbedtls_md5_starts_ret>

	strcpy(path, base_path);
 8013814:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013818:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801381a:	4618      	mov	r0, r3
 801381c:	f01a f923 	bl	802da66 <strcpy>
	strncat(path, filename, 20);
 8013820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013824:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8013828:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 801382c:	2214      	movs	r2, #20
 801382e:	6819      	ldr	r1, [r3, #0]
 8013830:	f019 ff81 	bl	802d736 <strncat>

	for (;;){
		memset(&read_buffer, 0, TMP_BUF_FOR_MD5_CALC+1);
 8013834:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8013838:	2241      	movs	r2, #65	; 0x41
 801383a:	2100      	movs	r1, #0
 801383c:	4618      	mov	r0, r3
 801383e:	f019 ff45 	bl	802d6cc <memset>
		readed_len = spi_fs_read_file_offset(path, read_buffer, offset, TMP_BUF_FOR_MD5_CALC);
 8013842:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8013846:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 801384a:	2340      	movs	r3, #64	; 0x40
 801384c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8013850:	f017 f9b4 	bl	802abbc <spi_fs_read_file_offset>
 8013854:	4603      	mov	r3, r0
 8013856:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
		if (readed_len < 0){
			mbedtls_md5_free(&md5_ctx);
			* len = 0;
			return -1;
		}else{
			if (readed_len == TMP_BUF_FOR_MD5_CALC){
 801385a:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 801385e:	2b40      	cmp	r3, #64	; 0x40
 8013860:	d110      	bne.n	8013884 <calculate_md5_file+0xb0>
				mbedtls_md5_update_ret(&md5_ctx, &read_buffer, readed_len);
 8013862:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 8013866:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 801386a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801386e:	4618      	mov	r0, r3
 8013870:	f018 fbde 	bl	802c030 <mbedtls_md5_update_ret>
				offset += readed_len;
 8013874:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8013878:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 801387c:	4413      	add	r3, r2
 801387e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8013882:	e019      	b.n	80138b8 <calculate_md5_file+0xe4>
			}else{
				mbedtls_md5_update_ret(&md5_ctx, &read_buffer, readed_len);
 8013884:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 8013888:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 801388c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013890:	4618      	mov	r0, r3
 8013892:	f018 fbcd 	bl	802c030 <mbedtls_md5_update_ret>
				mbedtls_md5_finish_ret(&md5_ctx, &md5sum);
 8013896:	f507 728c 	add.w	r2, r7, #280	; 0x118
 801389a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801389e:	4611      	mov	r1, r2
 80138a0:	4618      	mov	r0, r3
 80138a2:	f018 fc3a 	bl	802c11a <mbedtls_md5_finish_ret>
				mbedtls_md5_free(&md5_ctx);
 80138a6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80138aa:	4618      	mov	r0, r3
 80138ac:	f017 fcc5 	bl	802b23a <mbedtls_md5_free>
				md5sum[16] = '\0';
 80138b0:	2300      	movs	r3, #0
 80138b2:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
				break;
 80138b6:	e002      	b.n	80138be <calculate_md5_file+0xea>
			}
		}
		osThreadYield();
 80138b8:	f00c fb38 	bl	801ff2c <osThreadYield>
		memset(&read_buffer, 0, TMP_BUF_FOR_MD5_CALC+1);
 80138bc:	e7ba      	b.n	8013834 <calculate_md5_file+0x60>
	}
	sprintf((char *)buffer,"%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X", md5sum[0], md5sum[1], md5sum[2], md5sum[3], md5sum[4], md5sum[5], md5sum[6], md5sum[7], md5sum[8], md5sum[9], md5sum[10], md5sum[11], md5sum[12], md5sum[13], md5sum[14], md5sum[15]);
 80138be:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 80138c2:	469c      	mov	ip, r3
 80138c4:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 80138c8:	469e      	mov	lr, r3
 80138ca:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 80138ce:	461d      	mov	r5, r3
 80138d0:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80138d4:	461e      	mov	r6, r3
 80138d6:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 80138da:	627b      	str	r3, [r7, #36]	; 0x24
 80138dc:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80138e0:	623b      	str	r3, [r7, #32]
 80138e2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80138e6:	61fb      	str	r3, [r7, #28]
 80138e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80138ec:	61bb      	str	r3, [r7, #24]
 80138ee:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 80138f2:	617b      	str	r3, [r7, #20]
 80138f4:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 80138f8:	613b      	str	r3, [r7, #16]
 80138fa:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 80138fe:	60fb      	str	r3, [r7, #12]
 8013900:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8013904:	60bb      	str	r3, [r7, #8]
 8013906:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 801390a:	607b      	str	r3, [r7, #4]
 801390c:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 8013910:	461c      	mov	r4, r3
 8013912:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8013916:	4619      	mov	r1, r3
 8013918:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801391c:	461a      	mov	r2, r3
 801391e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013922:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8013926:	920d      	str	r2, [sp, #52]	; 0x34
 8013928:	910c      	str	r1, [sp, #48]	; 0x30
 801392a:	940b      	str	r4, [sp, #44]	; 0x2c
 801392c:	687a      	ldr	r2, [r7, #4]
 801392e:	920a      	str	r2, [sp, #40]	; 0x28
 8013930:	68ba      	ldr	r2, [r7, #8]
 8013932:	9209      	str	r2, [sp, #36]	; 0x24
 8013934:	68fa      	ldr	r2, [r7, #12]
 8013936:	9208      	str	r2, [sp, #32]
 8013938:	693a      	ldr	r2, [r7, #16]
 801393a:	9207      	str	r2, [sp, #28]
 801393c:	697a      	ldr	r2, [r7, #20]
 801393e:	9206      	str	r2, [sp, #24]
 8013940:	69ba      	ldr	r2, [r7, #24]
 8013942:	9205      	str	r2, [sp, #20]
 8013944:	69fa      	ldr	r2, [r7, #28]
 8013946:	9204      	str	r2, [sp, #16]
 8013948:	6a3a      	ldr	r2, [r7, #32]
 801394a:	9203      	str	r2, [sp, #12]
 801394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801394e:	9302      	str	r3, [sp, #8]
 8013950:	9601      	str	r6, [sp, #4]
 8013952:	9500      	str	r5, [sp, #0]
 8013954:	4673      	mov	r3, lr
 8013956:	4662      	mov	r2, ip
 8013958:	4908      	ldr	r1, [pc, #32]	; (801397c <calculate_md5_file+0x1a8>)
 801395a:	6800      	ldr	r0, [r0, #0]
 801395c:	f019 fd66 	bl	802d42c <siprintf>
	//strncpy(buffer, md5sum, 17);
	* len = 32;
 8013960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	2220      	movs	r2, #32
 801396c:	801a      	strh	r2, [r3, #0]
	return 0;
 801396e:	2300      	movs	r3, #0
}
 8013970:	4618      	mov	r0, r3
 8013972:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8013976:	46bd      	mov	sp, r7
 8013978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801397a:	bf00      	nop
 801397c:	080326e4 	.word	0x080326e4

08013980 <activate_firmware>:

int activate_firmware(char * buf, uint16_t * len){
 8013980:	b580      	push	{r7, lr}
 8013982:	b092      	sub	sp, #72	; 0x48
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
 8013988:	6039      	str	r1, [r7, #0]

	char old_path[60];
	int err;

	strcpy(old_path, FIRMWARE_FS_DIR);
 801398a:	f107 0308 	add.w	r3, r7, #8
 801398e:	4a18      	ldr	r2, [pc, #96]	; (80139f0 <activate_firmware+0x70>)
 8013990:	ca07      	ldmia	r2, {r0, r1, r2}
 8013992:	c303      	stmia	r3!, {r0, r1}
 8013994:	801a      	strh	r2, [r3, #0]
	strncat(old_path, "file.bin" , 20);
 8013996:	f107 0308 	add.w	r3, r7, #8
 801399a:	4618      	mov	r0, r3
 801399c:	f7fc fc80 	bl	80102a0 <strlen>
 80139a0:	4603      	mov	r3, r0
 80139a2:	461a      	mov	r2, r3
 80139a4:	f107 0308 	add.w	r3, r7, #8
 80139a8:	4413      	add	r3, r2
 80139aa:	4912      	ldr	r1, [pc, #72]	; (80139f4 <activate_firmware+0x74>)
 80139ac:	461a      	mov	r2, r3
 80139ae:	460b      	mov	r3, r1
 80139b0:	cb03      	ldmia	r3!, {r0, r1}
 80139b2:	6010      	str	r0, [r2, #0]
 80139b4:	6051      	str	r1, [r2, #4]
 80139b6:	781b      	ldrb	r3, [r3, #0]
 80139b8:	7213      	strb	r3, [r2, #8]

	err = spi_fs_mv((const char *)old_path, FIRMWARE_FILE);
 80139ba:	f107 0308 	add.w	r3, r7, #8
 80139be:	490e      	ldr	r1, [pc, #56]	; (80139f8 <activate_firmware+0x78>)
 80139c0:	4618      	mov	r0, r3
 80139c2:	f017 faf5 	bl	802afb0 <spi_fs_mv>
 80139c6:	6478      	str	r0, [r7, #68]	; 0x44

	if(err >= 0){
 80139c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	db0a      	blt.n	80139e4 <activate_firmware+0x64>
		strcpy(buf, "OK");
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	4a0a      	ldr	r2, [pc, #40]	; (80139fc <activate_firmware+0x7c>)
 80139d2:	8811      	ldrh	r1, [r2, #0]
 80139d4:	7892      	ldrb	r2, [r2, #2]
 80139d6:	8019      	strh	r1, [r3, #0]
 80139d8:	709a      	strb	r2, [r3, #2]
		* len = 2;
 80139da:	683b      	ldr	r3, [r7, #0]
 80139dc:	2202      	movs	r2, #2
 80139de:	801a      	strh	r2, [r3, #0]
		return 1;
 80139e0:	2301      	movs	r3, #1
 80139e2:	e000      	b.n	80139e6 <activate_firmware+0x66>
	}

 	return 0;
 80139e4:	2300      	movs	r3, #0
}
 80139e6:	4618      	mov	r0, r3
 80139e8:	3748      	adds	r7, #72	; 0x48
 80139ea:	46bd      	mov	sp, r7
 80139ec:	bd80      	pop	{r7, pc}
 80139ee:	bf00      	nop
 80139f0:	08032728 	.word	0x08032728
 80139f4:	08032734 	.word	0x08032734
 80139f8:	08032740 	.word	0x08032740
 80139fc:	08032750 	.word	0x08032750

08013a00 <http_post_cgi_processor>:

uint8_t http_post_cgi_processor(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len){
 8013a00:	b580      	push	{r7, lr}
 8013a02:	b086      	sub	sp, #24
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	60f8      	str	r0, [r7, #12]
 8013a08:	60b9      	str	r1, [r7, #8]
 8013a0a:	607a      	str	r2, [r7, #4]
 8013a0c:	603b      	str	r3, [r7, #0]

	uint8_t ret = HTTP_FAILED;
 8013a0e:	2300      	movs	r3, #0
 8013a10:	75fb      	strb	r3, [r7, #23]
	len = 0;
 8013a12:	2300      	movs	r3, #0
 8013a14:	603b      	str	r3, [r7, #0]

	if(strcmp((const char *)uri_name, "settings_mqtt.cgi") == 0){
 8013a16:	4937      	ldr	r1, [pc, #220]	; (8013af4 <http_post_cgi_processor+0xf4>)
 8013a18:	68f8      	ldr	r0, [r7, #12]
 8013a1a:	f7fc fbe1 	bl	80101e0 <strcmp>
 8013a1e:	4603      	mov	r3, r0
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d106      	bne.n	8013a32 <http_post_cgi_processor+0x32>
		param_from_http_to_Q((char *)uri, MQTT);
 8013a24:	2100      	movs	r1, #0
 8013a26:	68b8      	ldr	r0, [r7, #8]
 8013a28:	f7ff f9b6 	bl	8012d98 <param_from_http_to_Q>
		ret = HTTP_OK;
 8013a2c:	2301      	movs	r3, #1
 8013a2e:	75fb      	strb	r3, [r7, #23]
 8013a30:	e05a      	b.n	8013ae8 <http_post_cgi_processor+0xe8>
	}else if (strcmp((const char *)uri_name, "mb_tcp_settings.cgi") == 0){
 8013a32:	4931      	ldr	r1, [pc, #196]	; (8013af8 <http_post_cgi_processor+0xf8>)
 8013a34:	68f8      	ldr	r0, [r7, #12]
 8013a36:	f7fc fbd3 	bl	80101e0 <strcmp>
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d106      	bne.n	8013a4e <http_post_cgi_processor+0x4e>
		param_from_http_to_Q((char *)uri, ModBusTCP);
 8013a40:	2102      	movs	r1, #2
 8013a42:	68b8      	ldr	r0, [r7, #8]
 8013a44:	f7ff f9a8 	bl	8012d98 <param_from_http_to_Q>
		ret = HTTP_OK;
 8013a48:	2301      	movs	r3, #1
 8013a4a:	75fb      	strb	r3, [r7, #23]
 8013a4c:	e04c      	b.n	8013ae8 <http_post_cgi_processor+0xe8>
	}else if (strcmp((const char *)uri_name, "file_upload.cgi") == 0){
 8013a4e:	492b      	ldr	r1, [pc, #172]	; (8013afc <http_post_cgi_processor+0xfc>)
 8013a50:	68f8      	ldr	r0, [r7, #12]
 8013a52:	f7fc fbc5 	bl	80101e0 <strcmp>
 8013a56:	4603      	mov	r3, r0
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d10e      	bne.n	8013a7a <http_post_cgi_processor+0x7a>
		if (write_to_file((char *)uri, len, (char *) buf, HTTP_FS_DIR) < 0 ){
 8013a5c:	4b28      	ldr	r3, [pc, #160]	; (8013b00 <http_post_cgi_processor+0x100>)
 8013a5e:	687a      	ldr	r2, [r7, #4]
 8013a60:	6839      	ldr	r1, [r7, #0]
 8013a62:	68b8      	ldr	r0, [r7, #8]
 8013a64:	f7ff fc26 	bl	80132b4 <write_to_file>
 8013a68:	4603      	mov	r3, r0
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	da02      	bge.n	8013a74 <http_post_cgi_processor+0x74>
			ret = HTTP_FAILED;
 8013a6e:	2300      	movs	r3, #0
 8013a70:	75fb      	strb	r3, [r7, #23]
 8013a72:	e039      	b.n	8013ae8 <http_post_cgi_processor+0xe8>
		}else{
			ret = HTTP_OK;
 8013a74:	2301      	movs	r3, #1
 8013a76:	75fb      	strb	r3, [r7, #23]
 8013a78:	e036      	b.n	8013ae8 <http_post_cgi_processor+0xe8>
		}
	}else if (strcmp((const char *)uri_name, "web_mkdir.cgi") == 0){
 8013a7a:	4922      	ldr	r1, [pc, #136]	; (8013b04 <http_post_cgi_processor+0x104>)
 8013a7c:	68f8      	ldr	r0, [r7, #12]
 8013a7e:	f7fc fbaf 	bl	80101e0 <strcmp>
 8013a82:	4603      	mov	r3, r0
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d10c      	bne.n	8013aa2 <http_post_cgi_processor+0xa2>
		if( web_mkdir((char *)uri, HTTP_FS_DIR) >= 0){
 8013a88:	491d      	ldr	r1, [pc, #116]	; (8013b00 <http_post_cgi_processor+0x100>)
 8013a8a:	68b8      	ldr	r0, [r7, #8]
 8013a8c:	f7ff fd9a 	bl	80135c4 <web_mkdir>
 8013a90:	4603      	mov	r3, r0
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	db02      	blt.n	8013a9c <http_post_cgi_processor+0x9c>
			ret = HTTP_OK;
 8013a96:	2301      	movs	r3, #1
 8013a98:	75fb      	strb	r3, [r7, #23]
 8013a9a:	e025      	b.n	8013ae8 <http_post_cgi_processor+0xe8>
		}else{
			ret = HTTP_RESET;
 8013a9c:	2302      	movs	r3, #2
 8013a9e:	75fb      	strb	r3, [r7, #23]
 8013aa0:	e022      	b.n	8013ae8 <http_post_cgi_processor+0xe8>
		}

	}else if (strcmp((const char *)uri_name, "settings_resistance.cgi") == 0){
 8013aa2:	4919      	ldr	r1, [pc, #100]	; (8013b08 <http_post_cgi_processor+0x108>)
 8013aa4:	68f8      	ldr	r0, [r7, #12]
 8013aa6:	f7fc fb9b 	bl	80101e0 <strcmp>
 8013aaa:	4603      	mov	r3, r0
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d106      	bne.n	8013abe <http_post_cgi_processor+0xbe>
		param_from_http_to_Q((char *)uri, PowrSensSett);
 8013ab0:	2104      	movs	r1, #4
 8013ab2:	68b8      	ldr	r0, [r7, #8]
 8013ab4:	f7ff f970 	bl	8012d98 <param_from_http_to_Q>
		ret = HTTP_OK;
 8013ab8:	2301      	movs	r3, #1
 8013aba:	75fb      	strb	r3, [r7, #23]
 8013abc:	e014      	b.n	8013ae8 <http_post_cgi_processor+0xe8>
	}else if (strcmp((const char *)uri_name, "firmware_upload.cgi") == 0){
 8013abe:	4913      	ldr	r1, [pc, #76]	; (8013b0c <http_post_cgi_processor+0x10c>)
 8013ac0:	68f8      	ldr	r0, [r7, #12]
 8013ac2:	f7fc fb8d 	bl	80101e0 <strcmp>
 8013ac6:	4603      	mov	r3, r0
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d10d      	bne.n	8013ae8 <http_post_cgi_processor+0xe8>
		if (write_to_file((char *)uri, len, (char *) buf, FIRMWARE_FS_DIR) < 0 ){
 8013acc:	4b10      	ldr	r3, [pc, #64]	; (8013b10 <http_post_cgi_processor+0x110>)
 8013ace:	687a      	ldr	r2, [r7, #4]
 8013ad0:	6839      	ldr	r1, [r7, #0]
 8013ad2:	68b8      	ldr	r0, [r7, #8]
 8013ad4:	f7ff fbee 	bl	80132b4 <write_to_file>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	da02      	bge.n	8013ae4 <http_post_cgi_processor+0xe4>
			ret = HTTP_FAILED;
 8013ade:	2300      	movs	r3, #0
 8013ae0:	75fb      	strb	r3, [r7, #23]
 8013ae2:	e001      	b.n	8013ae8 <http_post_cgi_processor+0xe8>
		}else{
			ret = HTTP_OK;
 8013ae4:	2301      	movs	r3, #1
 8013ae6:	75fb      	strb	r3, [r7, #23]
		}
	}

	return ret;
 8013ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8013aea:	4618      	mov	r0, r3
 8013aec:	3718      	adds	r7, #24
 8013aee:	46bd      	mov	sp, r7
 8013af0:	bd80      	pop	{r7, pc}
 8013af2:	bf00      	nop
 8013af4:	08032754 	.word	0x08032754
 8013af8:	08032768 	.word	0x08032768
 8013afc:	0803277c 	.word	0x0803277c
 8013b00:	0803278c 	.word	0x0803278c
 8013b04:	08032794 	.word	0x08032794
 8013b08:	080327a4 	.word	0x080327a4
 8013b0c:	080327bc 	.word	0x080327bc
 8013b10:	08032728 	.word	0x08032728

08013b14 <http_get_cgi_processor>:

uint8_t http_get_cgi_processor(uint8_t * uri_name, uint8_t * buf, uint16_t * len){
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b086      	sub	sp, #24
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	60f8      	str	r0, [r7, #12]
 8013b1c:	60b9      	str	r1, [r7, #8]
 8013b1e:	607a      	str	r2, [r7, #4]

	uint8_t ret = HTTP_FAILED;
 8013b20:	2300      	movs	r3, #0
 8013b22:	75fb      	strb	r3, [r7, #23]

	if(strcmp((const char *)uri_name, "settings_MQTT.cgi") == 0){
 8013b24:	494f      	ldr	r1, [pc, #316]	; (8013c64 <http_get_cgi_processor+0x150>)
 8013b26:	68f8      	ldr	r0, [r7, #12]
 8013b28:	f7fc fb5a 	bl	80101e0 <strcmp>
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d107      	bne.n	8013b42 <http_get_cgi_processor+0x2e>
		param_from_Q_to_JSON((char *)buf, MQTT, len);
 8013b32:	687a      	ldr	r2, [r7, #4]
 8013b34:	2100      	movs	r1, #0
 8013b36:	68b8      	ldr	r0, [r7, #8]
 8013b38:	f7ff fab0 	bl	801309c <param_from_Q_to_JSON>
		ret = HTTP_OK;
 8013b3c:	2301      	movs	r3, #1
 8013b3e:	75fb      	strb	r3, [r7, #23]
 8013b40:	e08b      	b.n	8013c5a <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "test.cgi") == 0){
 8013b42:	4949      	ldr	r1, [pc, #292]	; (8013c68 <http_get_cgi_processor+0x154>)
 8013b44:	68f8      	ldr	r0, [r7, #12]
 8013b46:	f7fc fb4b 	bl	80101e0 <strcmp>
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d10b      	bne.n	8013b68 <http_get_cgi_processor+0x54>
		strncpy((const char *)buf, "oK", strlen("oK"));
 8013b50:	68bb      	ldr	r3, [r7, #8]
 8013b52:	4946      	ldr	r1, [pc, #280]	; (8013c6c <http_get_cgi_processor+0x158>)
 8013b54:	461a      	mov	r2, r3
 8013b56:	460b      	mov	r3, r1
 8013b58:	881b      	ldrh	r3, [r3, #0]
 8013b5a:	8013      	strh	r3, [r2, #0]
		ret = HTTP_OK;
 8013b5c:	2301      	movs	r3, #1
 8013b5e:	75fb      	strb	r3, [r7, #23]
		*len = strlen("oK");
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	2202      	movs	r2, #2
 8013b64:	801a      	strh	r2, [r3, #0]
 8013b66:	e078      	b.n	8013c5a <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "power.cgi") == 0){
 8013b68:	4941      	ldr	r1, [pc, #260]	; (8013c70 <http_get_cgi_processor+0x15c>)
 8013b6a:	68f8      	ldr	r0, [r7, #12]
 8013b6c:	f7fc fb38 	bl	80101e0 <strcmp>
 8013b70:	4603      	mov	r3, r0
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d107      	bne.n	8013b86 <http_get_cgi_processor+0x72>
		param_from_Q_to_JSON((char *)buf, PowrData, len);
 8013b76:	687a      	ldr	r2, [r7, #4]
 8013b78:	2103      	movs	r1, #3
 8013b7a:	68b8      	ldr	r0, [r7, #8]
 8013b7c:	f7ff fa8e 	bl	801309c <param_from_Q_to_JSON>
		ret = HTTP_OK;
 8013b80:	2301      	movs	r3, #1
 8013b82:	75fb      	strb	r3, [r7, #23]
 8013b84:	e069      	b.n	8013c5a <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "get_shunt_sett.cgi") == 0){
 8013b86:	493b      	ldr	r1, [pc, #236]	; (8013c74 <http_get_cgi_processor+0x160>)
 8013b88:	68f8      	ldr	r0, [r7, #12]
 8013b8a:	f7fc fb29 	bl	80101e0 <strcmp>
 8013b8e:	4603      	mov	r3, r0
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d107      	bne.n	8013ba4 <http_get_cgi_processor+0x90>
		param_from_Q_to_JSON((char *)buf, PowrSensSett, len);
 8013b94:	687a      	ldr	r2, [r7, #4]
 8013b96:	2104      	movs	r1, #4
 8013b98:	68b8      	ldr	r0, [r7, #8]
 8013b9a:	f7ff fa7f 	bl	801309c <param_from_Q_to_JSON>
		ret = HTTP_OK;
 8013b9e:	2301      	movs	r3, #1
 8013ba0:	75fb      	strb	r3, [r7, #23]
 8013ba2:	e05a      	b.n	8013c5a <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "get_all.cgi") == 0){
 8013ba4:	4934      	ldr	r1, [pc, #208]	; (8013c78 <http_get_cgi_processor+0x164>)
 8013ba6:	68f8      	ldr	r0, [r7, #12]
 8013ba8:	f7fc fb1a 	bl	80101e0 <strcmp>
 8013bac:	4603      	mov	r3, r0
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d106      	bne.n	8013bc0 <http_get_cgi_processor+0xac>
		read_all_parameters((char *)buf, len);
 8013bb2:	6879      	ldr	r1, [r7, #4]
 8013bb4:	68b8      	ldr	r0, [r7, #8]
 8013bb6:	f7ff fd33 	bl	8013620 <read_all_parameters>
		ret = HTTP_OK;
 8013bba:	2301      	movs	r3, #1
 8013bbc:	75fb      	strb	r3, [r7, #23]
 8013bbe:	e04c      	b.n	8013c5a <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "get_firmware_md5.cgi") == 0){
 8013bc0:	492e      	ldr	r1, [pc, #184]	; (8013c7c <http_get_cgi_processor+0x168>)
 8013bc2:	68f8      	ldr	r0, [r7, #12]
 8013bc4:	f7fc fb0c 	bl	80101e0 <strcmp>
 8013bc8:	4603      	mov	r3, r0
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d111      	bne.n	8013bf2 <http_get_cgi_processor+0xde>
		if (calculate_md5_file(FIRMWARE_FS_DIR, "file.bin", buf, len) == 0){
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	68ba      	ldr	r2, [r7, #8]
 8013bd2:	492b      	ldr	r1, [pc, #172]	; (8013c80 <http_get_cgi_processor+0x16c>)
 8013bd4:	482b      	ldr	r0, [pc, #172]	; (8013c84 <http_get_cgi_processor+0x170>)
 8013bd6:	f7ff fdfd 	bl	80137d4 <calculate_md5_file>
 8013bda:	4603      	mov	r3, r0
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d102      	bne.n	8013be6 <http_get_cgi_processor+0xd2>
			ret = HTTP_OK;
 8013be0:	2301      	movs	r3, #1
 8013be2:	75fb      	strb	r3, [r7, #23]
 8013be4:	e039      	b.n	8013c5a <http_get_cgi_processor+0x146>
		}else{
			* len = 0;
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	2200      	movs	r2, #0
 8013bea:	801a      	strh	r2, [r3, #0]
			ret = HTTP_FAILED;
 8013bec:	2300      	movs	r3, #0
 8013bee:	75fb      	strb	r3, [r7, #23]
 8013bf0:	e033      	b.n	8013c5a <http_get_cgi_processor+0x146>
		}
	}else if(strcmp((const char *)uri_name, "activate_firmware.cgi") == 0){
 8013bf2:	4925      	ldr	r1, [pc, #148]	; (8013c88 <http_get_cgi_processor+0x174>)
 8013bf4:	68f8      	ldr	r0, [r7, #12]
 8013bf6:	f7fc faf3 	bl	80101e0 <strcmp>
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d106      	bne.n	8013c0e <http_get_cgi_processor+0xfa>
		ret = activate_firmware((char *)buf, len);
 8013c00:	6879      	ldr	r1, [r7, #4]
 8013c02:	68b8      	ldr	r0, [r7, #8]
 8013c04:	f7ff febc 	bl	8013980 <activate_firmware>
 8013c08:	4603      	mov	r3, r0
 8013c0a:	75fb      	strb	r3, [r7, #23]
 8013c0c:	e025      	b.n	8013c5a <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "erace_web_interface.cgi") == 0){
 8013c0e:	491f      	ldr	r1, [pc, #124]	; (8013c8c <http_get_cgi_processor+0x178>)
 8013c10:	68f8      	ldr	r0, [r7, #12]
 8013c12:	f7fc fae5 	bl	80101e0 <strcmp>
 8013c16:	4603      	mov	r3, r0
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d105      	bne.n	8013c28 <http_get_cgi_processor+0x114>
		spi_fs_remove_recurcuve_in("/web");
 8013c1c:	481c      	ldr	r0, [pc, #112]	; (8013c90 <http_get_cgi_processor+0x17c>)
 8013c1e:	f017 f9a7 	bl	802af70 <spi_fs_remove_recurcuve_in>
		ret = HTTP_OK;
 8013c22:	2301      	movs	r3, #1
 8013c24:	75fb      	strb	r3, [r7, #23]
 8013c26:	e018      	b.n	8013c5a <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "reset_energy.cgi") == 0){ ///---------------------------------------FOR DEBUG-------------------------------------
 8013c28:	491a      	ldr	r1, [pc, #104]	; (8013c94 <http_get_cgi_processor+0x180>)
 8013c2a:	68f8      	ldr	r0, [r7, #12]
 8013c2c:	f7fc fad8 	bl	80101e0 <strcmp>
 8013c30:	4603      	mov	r3, r0
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d105      	bne.n	8013c42 <http_get_cgi_processor+0x12e>
		spi_fs_remove(KW_COUNT_STOR_FILE);
 8013c36:	4818      	ldr	r0, [pc, #96]	; (8013c98 <http_get_cgi_processor+0x184>)
 8013c38:	f017 f8d2 	bl	802ade0 <spi_fs_remove>
		ret = HTTP_OK;
 8013c3c:	2301      	movs	r3, #1
 8013c3e:	75fb      	strb	r3, [r7, #23]
 8013c40:	e00b      	b.n	8013c5a <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "format_flash.cgi") == 0){ ///---------------------------------------FOR DEBUG-------------------------------------
 8013c42:	4916      	ldr	r1, [pc, #88]	; (8013c9c <http_get_cgi_processor+0x188>)
 8013c44:	68f8      	ldr	r0, [r7, #12]
 8013c46:	f7fc facb 	bl	80101e0 <strcmp>
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d104      	bne.n	8013c5a <http_get_cgi_processor+0x146>
		spi_fs_remove_recurcuve_in("/");
 8013c50:	4813      	ldr	r0, [pc, #76]	; (8013ca0 <http_get_cgi_processor+0x18c>)
 8013c52:	f017 f98d 	bl	802af70 <spi_fs_remove_recurcuve_in>
		ret = HTTP_OK;
 8013c56:	2301      	movs	r3, #1
 8013c58:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8013c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	3718      	adds	r7, #24
 8013c60:	46bd      	mov	sp, r7
 8013c62:	bd80      	pop	{r7, pc}
 8013c64:	080327d0 	.word	0x080327d0
 8013c68:	080327e4 	.word	0x080327e4
 8013c6c:	080327f0 	.word	0x080327f0
 8013c70:	080327f4 	.word	0x080327f4
 8013c74:	08032800 	.word	0x08032800
 8013c78:	08032814 	.word	0x08032814
 8013c7c:	08032820 	.word	0x08032820
 8013c80:	08032734 	.word	0x08032734
 8013c84:	08032728 	.word	0x08032728
 8013c88:	08032838 	.word	0x08032838
 8013c8c:	08032850 	.word	0x08032850
 8013c90:	08032868 	.word	0x08032868
 8013c94:	08032870 	.word	0x08032870
 8013c98:	08032884 	.word	0x08032884
 8013c9c:	08032898 	.word	0x08032898
 8013ca0:	080328ac 	.word	0x080328ac

08013ca4 <func_prototype>:

//need optimaze
char		 			sub_topik_template[] = "biver_%s/+/set";
char					sub_topik[SUBSCR_TOPIK_BUF_LEN];

void func_prototype(void){};
 8013ca4:	b480      	push	{r7}
 8013ca6:	af00      	add	r7, sp, #0
 8013ca8:	bf00      	nop
 8013caa:	46bd      	mov	sp, r7
 8013cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb0:	4770      	bx	lr
	...

08013cb4 <init_mqtt_call_mutex>:
void (* set_mutex)(void) 		= &func_prototype;
void (* release_mutex)(void) 	= &func_prototype;
uint8_t (* read_coils)(void)	= &func_prototype;
void (* write_coils)(uint8_t)	= &func_prototype;

void init_mqtt_call_mutex(void (* set_mut), void (* rel_mut)){
 8013cb4:	b480      	push	{r7}
 8013cb6:	b083      	sub	sp, #12
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]
 8013cbc:	6039      	str	r1, [r7, #0]

	if(set_mut) set_mutex 		= set_mut;
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d002      	beq.n	8013cca <init_mqtt_call_mutex+0x16>
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	4a07      	ldr	r2, [pc, #28]	; (8013ce4 <init_mqtt_call_mutex+0x30>)
 8013cc8:	6013      	str	r3, [r2, #0]
	if(rel_mut) release_mutex 	= rel_mut;
 8013cca:	683b      	ldr	r3, [r7, #0]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d002      	beq.n	8013cd6 <init_mqtt_call_mutex+0x22>
 8013cd0:	683b      	ldr	r3, [r7, #0]
 8013cd2:	4a05      	ldr	r2, [pc, #20]	; (8013ce8 <init_mqtt_call_mutex+0x34>)
 8013cd4:	6013      	str	r3, [r2, #0]
}
 8013cd6:	bf00      	nop
 8013cd8:	370c      	adds	r7, #12
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce0:	4770      	bx	lr
 8013ce2:	bf00      	nop
 8013ce4:	2000005c 	.word	0x2000005c
 8013ce8:	20000060 	.word	0x20000060

08013cec <mqtt_client_init>:
}



int mqtt_client_init(Ethernet_info_struct* eth_data, MQTT_cred_struct * mqtt_data, char * send_buf, \
		uint16_t send_buf_suze, char * receive_buf, uint16_t receive_buf_len){
 8013cec:	b5b0      	push	{r4, r5, r7, lr}
 8013cee:	b088      	sub	sp, #32
 8013cf0:	af04      	add	r7, sp, #16
 8013cf2:	60f8      	str	r0, [r7, #12]
 8013cf4:	60b9      	str	r1, [r7, #8]
 8013cf6:	607a      	str	r2, [r7, #4]
 8013cf8:	807b      	strh	r3, [r7, #2]

	EthernetInfo 		= eth_data;
 8013cfa:	4a5e      	ldr	r2, [pc, #376]	; (8013e74 <mqtt_client_init+0x188>)
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	6013      	str	r3, [r2, #0]
	MQTT_credentials	= mqtt_data;
 8013d00:	4a5d      	ldr	r2, [pc, #372]	; (8013e78 <mqtt_client_init+0x18c>)
 8013d02:	68bb      	ldr	r3, [r7, #8]
 8013d04:	6013      	str	r3, [r2, #0]
	mqtt_send_buf		= send_buf;
 8013d06:	4a5d      	ldr	r2, [pc, #372]	; (8013e7c <mqtt_client_init+0x190>)
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	6013      	str	r3, [r2, #0]
	mqtt_recv_buf		= receive_buf;
 8013d0c:	4a5c      	ldr	r2, [pc, #368]	; (8013e80 <mqtt_client_init+0x194>)
 8013d0e:	6a3b      	ldr	r3, [r7, #32]
 8013d10:	6013      	str	r3, [r2, #0]
	mqtt_send_buf_len	= send_buf_suze;
 8013d12:	4a5c      	ldr	r2, [pc, #368]	; (8013e84 <mqtt_client_init+0x198>)
 8013d14:	887b      	ldrh	r3, [r7, #2]
 8013d16:	8013      	strh	r3, [r2, #0]
	mqtt_recv_buf_len	= receive_buf_len;
 8013d18:	4a5b      	ldr	r2, [pc, #364]	; (8013e88 <mqtt_client_init+0x19c>)
 8013d1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d1c:	8013      	strh	r3, [r2, #0]

	sprintf(MAC_ADDR_CHR,"%02X%02X%02X%02X%02X%02X", EthernetInfo->mac[0],EthernetInfo->mac[1],EthernetInfo->mac[2],EthernetInfo->mac[3],EthernetInfo->mac[4],EthernetInfo->mac[5]);
 8013d1e:	4b55      	ldr	r3, [pc, #340]	; (8013e74 <mqtt_client_init+0x188>)
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	78db      	ldrb	r3, [r3, #3]
 8013d24:	461c      	mov	r4, r3
 8013d26:	4b53      	ldr	r3, [pc, #332]	; (8013e74 <mqtt_client_init+0x188>)
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	791b      	ldrb	r3, [r3, #4]
 8013d2c:	461d      	mov	r5, r3
 8013d2e:	4b51      	ldr	r3, [pc, #324]	; (8013e74 <mqtt_client_init+0x188>)
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	795b      	ldrb	r3, [r3, #5]
 8013d34:	461a      	mov	r2, r3
 8013d36:	4b4f      	ldr	r3, [pc, #316]	; (8013e74 <mqtt_client_init+0x188>)
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	799b      	ldrb	r3, [r3, #6]
 8013d3c:	4619      	mov	r1, r3
 8013d3e:	4b4d      	ldr	r3, [pc, #308]	; (8013e74 <mqtt_client_init+0x188>)
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	79db      	ldrb	r3, [r3, #7]
 8013d44:	4618      	mov	r0, r3
 8013d46:	4b4b      	ldr	r3, [pc, #300]	; (8013e74 <mqtt_client_init+0x188>)
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	7a1b      	ldrb	r3, [r3, #8]
 8013d4c:	9303      	str	r3, [sp, #12]
 8013d4e:	9002      	str	r0, [sp, #8]
 8013d50:	9101      	str	r1, [sp, #4]
 8013d52:	9200      	str	r2, [sp, #0]
 8013d54:	462b      	mov	r3, r5
 8013d56:	4622      	mov	r2, r4
 8013d58:	494c      	ldr	r1, [pc, #304]	; (8013e8c <mqtt_client_init+0x1a0>)
 8013d5a:	484d      	ldr	r0, [pc, #308]	; (8013e90 <mqtt_client_init+0x1a4>)
 8013d5c:	f019 fb66 	bl	802d42c <siprintf>
	set_device_id(&MAC_ADDR_CHR);
 8013d60:	484b      	ldr	r0, [pc, #300]	; (8013e90 <mqtt_client_init+0x1a4>)
 8013d62:	f000 fa6f 	bl	8014244 <set_device_id>
	sprintf(IP_ADDR_CHR, "%u.%u.%u.%u", EthernetInfo->ip[0], EthernetInfo->ip[1], EthernetInfo->ip[2], EthernetInfo->ip[3]);
 8013d66:	4b43      	ldr	r3, [pc, #268]	; (8013e74 <mqtt_client_init+0x188>)
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	7a5b      	ldrb	r3, [r3, #9]
 8013d6c:	4619      	mov	r1, r3
 8013d6e:	4b41      	ldr	r3, [pc, #260]	; (8013e74 <mqtt_client_init+0x188>)
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	7a9b      	ldrb	r3, [r3, #10]
 8013d74:	4618      	mov	r0, r3
 8013d76:	4b3f      	ldr	r3, [pc, #252]	; (8013e74 <mqtt_client_init+0x188>)
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	7adb      	ldrb	r3, [r3, #11]
 8013d7c:	461a      	mov	r2, r3
 8013d7e:	4b3d      	ldr	r3, [pc, #244]	; (8013e74 <mqtt_client_init+0x188>)
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	7b1b      	ldrb	r3, [r3, #12]
 8013d84:	9301      	str	r3, [sp, #4]
 8013d86:	9200      	str	r2, [sp, #0]
 8013d88:	4603      	mov	r3, r0
 8013d8a:	460a      	mov	r2, r1
 8013d8c:	4941      	ldr	r1, [pc, #260]	; (8013e94 <mqtt_client_init+0x1a8>)
 8013d8e:	4842      	ldr	r0, [pc, #264]	; (8013e98 <mqtt_client_init+0x1ac>)
 8013d90:	f019 fb4c 	bl	802d42c <siprintf>
	set_device_conf_ip(&IP_ADDR_CHR);
 8013d94:	4840      	ldr	r0, [pc, #256]	; (8013e98 <mqtt_client_init+0x1ac>)
 8013d96:	f000 fa77 	bl	8014288 <set_device_conf_ip>

	//strncpy(mqtt_send_buf, MQTT_credentials->uri, MAX_DOMAIN_NAME);
	if ( isValidIPv4(MQTT_credentials->uri)){
 8013d9a:	4b37      	ldr	r3, [pc, #220]	; (8013e78 <mqtt_client_init+0x18c>)
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	3302      	adds	r3, #2
 8013da0:	4618      	mov	r0, r3
 8013da2:	f008 fda5 	bl	801c8f0 <isValidIPv4>
 8013da6:	4603      	mov	r3, r0
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d00c      	beq.n	8013dc6 <mqtt_client_init+0xda>
		sscanf(MQTT_credentials->uri, "%d.%d.%d.%d", &mqtt_server_ip[0], &mqtt_server_ip[1], &mqtt_server_ip[2], &mqtt_server_ip[3]);
 8013dac:	4b32      	ldr	r3, [pc, #200]	; (8013e78 <mqtt_client_init+0x18c>)
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	1c98      	adds	r0, r3, #2
 8013db2:	4b3a      	ldr	r3, [pc, #232]	; (8013e9c <mqtt_client_init+0x1b0>)
 8013db4:	9301      	str	r3, [sp, #4]
 8013db6:	4b3a      	ldr	r3, [pc, #232]	; (8013ea0 <mqtt_client_init+0x1b4>)
 8013db8:	9300      	str	r3, [sp, #0]
 8013dba:	4b3a      	ldr	r3, [pc, #232]	; (8013ea4 <mqtt_client_init+0x1b8>)
 8013dbc:	4a3a      	ldr	r2, [pc, #232]	; (8013ea8 <mqtt_client_init+0x1bc>)
 8013dbe:	493b      	ldr	r1, [pc, #236]	; (8013eac <mqtt_client_init+0x1c0>)
 8013dc0:	f019 fb54 	bl	802d46c <siscanf>
 8013dc4:	e00d      	b.n	8013de2 <mqtt_client_init+0xf6>
	}else if(dns_service_resolve_name(MQTT_credentials->uri, &mqtt_server_ip)== -1){
 8013dc6:	4b2c      	ldr	r3, [pc, #176]	; (8013e78 <mqtt_client_init+0x18c>)
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	3302      	adds	r3, #2
 8013dcc:	4936      	ldr	r1, [pc, #216]	; (8013ea8 <mqtt_client_init+0x1bc>)
 8013dce:	4618      	mov	r0, r3
 8013dd0:	f008 fd5e 	bl	801c890 <dns_service_resolve_name>
 8013dd4:	4603      	mov	r3, r0
 8013dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013dda:	d102      	bne.n	8013de2 <mqtt_client_init+0xf6>
		return -1; // DNS resolve error;
 8013ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8013de0:	e043      	b.n	8013e6a <mqtt_client_init+0x17e>
	}

	mqtt_packet_data.willFlag			= 0;
 8013de2:	4b33      	ldr	r3, [pc, #204]	; (8013eb0 <mqtt_client_init+0x1c4>)
 8013de4:	2200      	movs	r2, #0
 8013de6:	76da      	strb	r2, [r3, #27]
	mqtt_packet_data.MQTTVersion		= 3;
 8013de8:	4b31      	ldr	r3, [pc, #196]	; (8013eb0 <mqtt_client_init+0x1c4>)
 8013dea:	2203      	movs	r2, #3
 8013dec:	721a      	strb	r2, [r3, #8]
	mqtt_packet_data.clientID.cstring	= &MAC_ADDR_CHR;
 8013dee:	4b30      	ldr	r3, [pc, #192]	; (8013eb0 <mqtt_client_init+0x1c4>)
 8013df0:	4a27      	ldr	r2, [pc, #156]	; (8013e90 <mqtt_client_init+0x1a4>)
 8013df2:	60da      	str	r2, [r3, #12]
	mqtt_packet_data.keepAliveInterval	= 5000;
 8013df4:	4b2e      	ldr	r3, [pc, #184]	; (8013eb0 <mqtt_client_init+0x1c4>)
 8013df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8013dfa:	831a      	strh	r2, [r3, #24]
	mqtt_packet_data.cleansession		= 1;
 8013dfc:	4b2c      	ldr	r3, [pc, #176]	; (8013eb0 <mqtt_client_init+0x1c4>)
 8013dfe:	2201      	movs	r2, #1
 8013e00:	769a      	strb	r2, [r3, #26]
	mqtt_packet_data.username.cstring 	= &MQTT_credentials->login;
 8013e02:	4b1d      	ldr	r3, [pc, #116]	; (8013e78 <mqtt_client_init+0x18c>)
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	3384      	adds	r3, #132	; 0x84
 8013e08:	4a29      	ldr	r2, [pc, #164]	; (8013eb0 <mqtt_client_init+0x1c4>)
 8013e0a:	6413      	str	r3, [r2, #64]	; 0x40
	mqtt_packet_data.password.cstring 	= &MQTT_credentials->pass;
 8013e0c:	4b1a      	ldr	r3, [pc, #104]	; (8013e78 <mqtt_client_init+0x18c>)
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	33a5      	adds	r3, #165	; 0xa5
 8013e12:	4a27      	ldr	r2, [pc, #156]	; (8013eb0 <mqtt_client_init+0x1c4>)
 8013e14:	64d3      	str	r3, [r2, #76]	; 0x4c
//	mqtt_server_ip						= MQTT_credentials->ip;
	mqtt_server_port					= (uint16_t) MQTT_credentials->port;
 8013e16:	4b18      	ldr	r3, [pc, #96]	; (8013e78 <mqtt_client_init+0x18c>)
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8013e1e:	4b25      	ldr	r3, [pc, #148]	; (8013eb4 <mqtt_client_init+0x1c8>)
 8013e20:	801a      	strh	r2, [r3, #0]

	mqtt_message.id						= 0;
 8013e22:	4b25      	ldr	r3, [pc, #148]	; (8013eb8 <mqtt_client_init+0x1cc>)
 8013e24:	2200      	movs	r2, #0
 8013e26:	809a      	strh	r2, [r3, #4]
	mqtt_message.qos					= QOS0;
 8013e28:	4b23      	ldr	r3, [pc, #140]	; (8013eb8 <mqtt_client_init+0x1cc>)
 8013e2a:	2200      	movs	r2, #0
 8013e2c:	701a      	strb	r2, [r3, #0]
	mqtt_message.dup					= 0;
 8013e2e:	4b22      	ldr	r3, [pc, #136]	; (8013eb8 <mqtt_client_init+0x1cc>)
 8013e30:	2200      	movs	r2, #0
 8013e32:	709a      	strb	r2, [r3, #2]
	mqtt_message.retained				= 0;
 8013e34:	4b20      	ldr	r3, [pc, #128]	; (8013eb8 <mqtt_client_init+0x1cc>)
 8013e36:	2200      	movs	r2, #0
 8013e38:	705a      	strb	r2, [r3, #1]

	NewNetwork(&MQTT_network, MQTT_CLIENT_SOCKET);
 8013e3a:	2105      	movs	r1, #5
 8013e3c:	481f      	ldr	r0, [pc, #124]	; (8013ebc <mqtt_client_init+0x1d0>)
 8013e3e:	f009 faf1 	bl	801d424 <NewNetwork>
	MQTTClientInit(&MQTT_Client, &MQTT_network, COMMAND_TIMEOUT_MS, mqtt_send_buf, mqtt_send_buf_len, mqtt_recv_buf, mqtt_recv_buf_len);
 8013e42:	4b0e      	ldr	r3, [pc, #56]	; (8013e7c <mqtt_client_init+0x190>)
 8013e44:	681a      	ldr	r2, [r3, #0]
 8013e46:	4b0f      	ldr	r3, [pc, #60]	; (8013e84 <mqtt_client_init+0x198>)
 8013e48:	881b      	ldrh	r3, [r3, #0]
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	4b0c      	ldr	r3, [pc, #48]	; (8013e80 <mqtt_client_init+0x194>)
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	490d      	ldr	r1, [pc, #52]	; (8013e88 <mqtt_client_init+0x19c>)
 8013e52:	8809      	ldrh	r1, [r1, #0]
 8013e54:	9102      	str	r1, [sp, #8]
 8013e56:	9301      	str	r3, [sp, #4]
 8013e58:	9000      	str	r0, [sp, #0]
 8013e5a:	4613      	mov	r3, r2
 8013e5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013e60:	4916      	ldr	r1, [pc, #88]	; (8013ebc <mqtt_client_init+0x1d0>)
 8013e62:	4817      	ldr	r0, [pc, #92]	; (8013ec0 <mqtt_client_init+0x1d4>)
 8013e64:	f008 fe2e 	bl	801cac4 <MQTTClientInit>

	return 0;
 8013e68:	2300      	movs	r3, #0
}
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	3710      	adds	r7, #16
 8013e6e:	46bd      	mov	sp, r7
 8013e70:	bdb0      	pop	{r4, r5, r7, pc}
 8013e72:	bf00      	nop
 8013e74:	20000508 	.word	0x20000508
 8013e78:	20000504 	.word	0x20000504
 8013e7c:	20000534 	.word	0x20000534
 8013e80:	20000530 	.word	0x20000530
 8013e84:	20000812 	.word	0x20000812
 8013e88:	20000810 	.word	0x20000810
 8013e8c:	080328b0 	.word	0x080328b0
 8013e90:	2000050c 	.word	0x2000050c
 8013e94:	080328cc 	.word	0x080328cc
 8013e98:	2000051c 	.word	0x2000051c
 8013e9c:	20000817 	.word	0x20000817
 8013ea0:	20000816 	.word	0x20000816
 8013ea4:	20000815 	.word	0x20000815
 8013ea8:	20000814 	.word	0x20000814
 8013eac:	080328d8 	.word	0x080328d8
 8013eb0:	20000004 	.word	0x20000004
 8013eb4:	20000818 	.word	0x20000818
 8013eb8:	20000888 	.word	0x20000888
 8013ebc:	2000081c 	.word	0x2000081c
 8013ec0:	2000082c 	.word	0x2000082c

08013ec4 <mqtt_client_connect>:


int16_t mqtt_client_connect(void){
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b082      	sub	sp, #8
 8013ec8:	af00      	add	r7, sp, #0

	int16_t result;

	set_mutex();
 8013eca:	4b1f      	ldr	r3, [pc, #124]	; (8013f48 <mqtt_client_connect+0x84>)
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	4798      	blx	r3
	result = ConnectNetwork(&MQTT_network, mqtt_server_ip, mqtt_server_port);
 8013ed0:	4b1e      	ldr	r3, [pc, #120]	; (8013f4c <mqtt_client_connect+0x88>)
 8013ed2:	881b      	ldrh	r3, [r3, #0]
 8013ed4:	461a      	mov	r2, r3
 8013ed6:	491e      	ldr	r1, [pc, #120]	; (8013f50 <mqtt_client_connect+0x8c>)
 8013ed8:	481e      	ldr	r0, [pc, #120]	; (8013f54 <mqtt_client_connect+0x90>)
 8013eda:	f009 fb20 	bl	801d51e <ConnectNetwork>
 8013ede:	4603      	mov	r3, r0
 8013ee0:	80fb      	strh	r3, [r7, #6]
	release_mutex();
 8013ee2:	4b1d      	ldr	r3, [pc, #116]	; (8013f58 <mqtt_client_connect+0x94>)
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	4798      	blx	r3
	if (result != 1) {
 8013ee8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013eec:	2b01      	cmp	r3, #1
 8013eee:	d010      	beq.n	8013f12 <mqtt_client_connect+0x4e>
		set_mutex();
 8013ef0:	4b15      	ldr	r3, [pc, #84]	; (8013f48 <mqtt_client_connect+0x84>)
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	4798      	blx	r3
		//disconnect(MQTT_network.my_socket);
		close(MQTT_network.my_socket);
 8013ef6:	4b17      	ldr	r3, [pc, #92]	; (8013f54 <mqtt_client_connect+0x90>)
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	b2db      	uxtb	r3, r3
 8013efc:	4618      	mov	r0, r3
 8013efe:	f004 ff27 	bl	8018d50 <close>
		release_mutex();
 8013f02:	4b15      	ldr	r3, [pc, #84]	; (8013f58 <mqtt_client_connect+0x94>)
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	4798      	blx	r3
		return result - 10;    // 1 means SOCK_OK;
 8013f08:	88fb      	ldrh	r3, [r7, #6]
 8013f0a:	3b0a      	subs	r3, #10
 8013f0c:	b29b      	uxth	r3, r3
 8013f0e:	b21b      	sxth	r3, r3
 8013f10:	e016      	b.n	8013f40 <mqtt_client_connect+0x7c>
	}
	set_mutex();
 8013f12:	4b0d      	ldr	r3, [pc, #52]	; (8013f48 <mqtt_client_connect+0x84>)
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	4798      	blx	r3
	result = MQTTConnect(&MQTT_Client, &mqtt_packet_data);
 8013f18:	4910      	ldr	r1, [pc, #64]	; (8013f5c <mqtt_client_connect+0x98>)
 8013f1a:	4811      	ldr	r0, [pc, #68]	; (8013f60 <mqtt_client_connect+0x9c>)
 8013f1c:	f009 f8d8 	bl	801d0d0 <MQTTConnect>
 8013f20:	4603      	mov	r3, r0
 8013f22:	80fb      	strh	r3, [r7, #6]
	release_mutex();
 8013f24:	4b0c      	ldr	r3, [pc, #48]	; (8013f58 <mqtt_client_connect+0x94>)
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	4798      	blx	r3
	if (result != SUCCESSS) return result - 20;
 8013f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d004      	beq.n	8013f3c <mqtt_client_connect+0x78>
 8013f32:	88fb      	ldrh	r3, [r7, #6]
 8013f34:	3b14      	subs	r3, #20
 8013f36:	b29b      	uxth	r3, r3
 8013f38:	b21b      	sxth	r3, r3
 8013f3a:	e001      	b.n	8013f40 <mqtt_client_connect+0x7c>
	return result; // if returned value < 0 then means error
 8013f3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8013f40:	4618      	mov	r0, r3
 8013f42:	3708      	adds	r7, #8
 8013f44:	46bd      	mov	sp, r7
 8013f46:	bd80      	pop	{r7, pc}
 8013f48:	2000005c 	.word	0x2000005c
 8013f4c:	20000818 	.word	0x20000818
 8013f50:	20000814 	.word	0x20000814
 8013f54:	2000081c 	.word	0x2000081c
 8013f58:	20000060 	.word	0x20000060
 8013f5c:	20000004 	.word	0x20000004
 8013f60:	2000082c 	.word	0x2000082c

08013f64 <mqtt_client_reg_dev_on_home_assist>:

int8_t mqtt_client_reg_dev_on_home_assist(void){
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b082      	sub	sp, #8
 8013f68:	af00      	add	r7, sp, #0

	uint8_t i;
	int8_t result;
//------------------------------REG ENERGY SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 8013f6a:	2280      	movs	r2, #128	; 0x80
 8013f6c:	2100      	movs	r1, #0
 8013f6e:	4897      	ldr	r0, [pc, #604]	; (80141cc <mqtt_client_reg_dev_on_home_assist+0x268>)
 8013f70:	f019 fbac 	bl	802d6cc <memset>
		get_config_topik_string(buf_topik, ENERGY_SENSOR_TOPIK, 0);
 8013f74:	2200      	movs	r2, #0
 8013f76:	2103      	movs	r1, #3
 8013f78:	4894      	ldr	r0, [pc, #592]	; (80141cc <mqtt_client_reg_dev_on_home_assist+0x268>)
 8013f7a:	f000 f9a5 	bl	80142c8 <get_config_topik_string>
		get_config_payload_string(buf_payload, ENERGY_SENSOR_PAYLOAD, 0);
 8013f7e:	2200      	movs	r2, #0
 8013f80:	2103      	movs	r1, #3
 8013f82:	4893      	ldr	r0, [pc, #588]	; (80141d0 <mqtt_client_reg_dev_on_home_assist+0x26c>)
 8013f84:	f000 fa52 	bl	801442c <get_config_payload_string>
		mqtt_message.payloadlen = strlen(buf_payload);
 8013f88:	4891      	ldr	r0, [pc, #580]	; (80141d0 <mqtt_client_reg_dev_on_home_assist+0x26c>)
 8013f8a:	f7fc f989 	bl	80102a0 <strlen>
 8013f8e:	4603      	mov	r3, r0
 8013f90:	4a90      	ldr	r2, [pc, #576]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8013f92:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload = buf_payload;
 8013f94:	4b8f      	ldr	r3, [pc, #572]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8013f96:	4a8e      	ldr	r2, [pc, #568]	; (80141d0 <mqtt_client_reg_dev_on_home_assist+0x26c>)
 8013f98:	609a      	str	r2, [r3, #8]
		set_mutex();
 8013f9a:	4b8f      	ldr	r3, [pc, #572]	; (80141d8 <mqtt_client_reg_dev_on_home_assist+0x274>)
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8013fa0:	4a8c      	ldr	r2, [pc, #560]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8013fa2:	498a      	ldr	r1, [pc, #552]	; (80141cc <mqtt_client_reg_dev_on_home_assist+0x268>)
 8013fa4:	488d      	ldr	r0, [pc, #564]	; (80141dc <mqtt_client_reg_dev_on_home_assist+0x278>)
 8013fa6:	f009 f919 	bl	801d1dc <MQTTPublish>
 8013faa:	4603      	mov	r3, r0
 8013fac:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 8013fae:	4b8c      	ldr	r3, [pc, #560]	; (80141e0 <mqtt_client_reg_dev_on_home_assist+0x27c>)
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 8013fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d002      	beq.n	8013fc2 <mqtt_client_reg_dev_on_home_assist+0x5e>
 8013fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013fc0:	e100      	b.n	80141c4 <mqtt_client_reg_dev_on_home_assist+0x260>
		mqtt_message.id++;
 8013fc2:	4b84      	ldr	r3, [pc, #528]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8013fc4:	889b      	ldrh	r3, [r3, #4]
 8013fc6:	3301      	adds	r3, #1
 8013fc8:	b29a      	uxth	r2, r3
 8013fca:	4b82      	ldr	r3, [pc, #520]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8013fcc:	809a      	strh	r2, [r3, #4]
//------------------------------REG ENERGY SENSOR-------------------------------
//------------------------------REG VOLTAGE SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 8013fce:	2280      	movs	r2, #128	; 0x80
 8013fd0:	2100      	movs	r1, #0
 8013fd2:	487e      	ldr	r0, [pc, #504]	; (80141cc <mqtt_client_reg_dev_on_home_assist+0x268>)
 8013fd4:	f019 fb7a 	bl	802d6cc <memset>
		get_config_topik_string(buf_topik, VOLTAGE_SENSOR_TOPIK, 0);
 8013fd8:	2200      	movs	r2, #0
 8013fda:	2105      	movs	r1, #5
 8013fdc:	487b      	ldr	r0, [pc, #492]	; (80141cc <mqtt_client_reg_dev_on_home_assist+0x268>)
 8013fde:	f000 f973 	bl	80142c8 <get_config_topik_string>
		get_config_payload_string(buf_payload, VOLTAGE_SENSOR_PAYLOAD, 0);
 8013fe2:	2200      	movs	r2, #0
 8013fe4:	2105      	movs	r1, #5
 8013fe6:	487a      	ldr	r0, [pc, #488]	; (80141d0 <mqtt_client_reg_dev_on_home_assist+0x26c>)
 8013fe8:	f000 fa20 	bl	801442c <get_config_payload_string>
		mqtt_message.payloadlen = strlen(buf_payload);
 8013fec:	4878      	ldr	r0, [pc, #480]	; (80141d0 <mqtt_client_reg_dev_on_home_assist+0x26c>)
 8013fee:	f7fc f957 	bl	80102a0 <strlen>
 8013ff2:	4603      	mov	r3, r0
 8013ff4:	4a77      	ldr	r2, [pc, #476]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8013ff6:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload = buf_payload;
 8013ff8:	4b76      	ldr	r3, [pc, #472]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8013ffa:	4a75      	ldr	r2, [pc, #468]	; (80141d0 <mqtt_client_reg_dev_on_home_assist+0x26c>)
 8013ffc:	609a      	str	r2, [r3, #8]
		set_mutex();
 8013ffe:	4b76      	ldr	r3, [pc, #472]	; (80141d8 <mqtt_client_reg_dev_on_home_assist+0x274>)
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8014004:	4a73      	ldr	r2, [pc, #460]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8014006:	4971      	ldr	r1, [pc, #452]	; (80141cc <mqtt_client_reg_dev_on_home_assist+0x268>)
 8014008:	4874      	ldr	r0, [pc, #464]	; (80141dc <mqtt_client_reg_dev_on_home_assist+0x278>)
 801400a:	f009 f8e7 	bl	801d1dc <MQTTPublish>
 801400e:	4603      	mov	r3, r0
 8014010:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 8014012:	4b73      	ldr	r3, [pc, #460]	; (80141e0 <mqtt_client_reg_dev_on_home_assist+0x27c>)
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 8014018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d002      	beq.n	8014026 <mqtt_client_reg_dev_on_home_assist+0xc2>
 8014020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014024:	e0ce      	b.n	80141c4 <mqtt_client_reg_dev_on_home_assist+0x260>
		mqtt_message.id++;
 8014026:	4b6b      	ldr	r3, [pc, #428]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8014028:	889b      	ldrh	r3, [r3, #4]
 801402a:	3301      	adds	r3, #1
 801402c:	b29a      	uxth	r2, r3
 801402e:	4b69      	ldr	r3, [pc, #420]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8014030:	809a      	strh	r2, [r3, #4]
//------------------------------REG VOLTAGE SENSOR-------------------------------
//------------------------------REG POWER SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 8014032:	2280      	movs	r2, #128	; 0x80
 8014034:	2100      	movs	r1, #0
 8014036:	4865      	ldr	r0, [pc, #404]	; (80141cc <mqtt_client_reg_dev_on_home_assist+0x268>)
 8014038:	f019 fb48 	bl	802d6cc <memset>
		get_config_topik_string(buf_topik, POWER_SENSOR_TOPIK, 0);
 801403c:	2200      	movs	r2, #0
 801403e:	2104      	movs	r1, #4
 8014040:	4862      	ldr	r0, [pc, #392]	; (80141cc <mqtt_client_reg_dev_on_home_assist+0x268>)
 8014042:	f000 f941 	bl	80142c8 <get_config_topik_string>
		get_config_payload_string(buf_payload, POWER_SENSOR_PAYLOAD, 0);
 8014046:	2200      	movs	r2, #0
 8014048:	2104      	movs	r1, #4
 801404a:	4861      	ldr	r0, [pc, #388]	; (80141d0 <mqtt_client_reg_dev_on_home_assist+0x26c>)
 801404c:	f000 f9ee 	bl	801442c <get_config_payload_string>
		mqtt_message.payloadlen = strlen(buf_payload);
 8014050:	485f      	ldr	r0, [pc, #380]	; (80141d0 <mqtt_client_reg_dev_on_home_assist+0x26c>)
 8014052:	f7fc f925 	bl	80102a0 <strlen>
 8014056:	4603      	mov	r3, r0
 8014058:	4a5e      	ldr	r2, [pc, #376]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 801405a:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload = buf_payload;
 801405c:	4b5d      	ldr	r3, [pc, #372]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 801405e:	4a5c      	ldr	r2, [pc, #368]	; (80141d0 <mqtt_client_reg_dev_on_home_assist+0x26c>)
 8014060:	609a      	str	r2, [r3, #8]
		set_mutex();
 8014062:	4b5d      	ldr	r3, [pc, #372]	; (80141d8 <mqtt_client_reg_dev_on_home_assist+0x274>)
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8014068:	4a5a      	ldr	r2, [pc, #360]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 801406a:	4958      	ldr	r1, [pc, #352]	; (80141cc <mqtt_client_reg_dev_on_home_assist+0x268>)
 801406c:	485b      	ldr	r0, [pc, #364]	; (80141dc <mqtt_client_reg_dev_on_home_assist+0x278>)
 801406e:	f009 f8b5 	bl	801d1dc <MQTTPublish>
 8014072:	4603      	mov	r3, r0
 8014074:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 8014076:	4b5a      	ldr	r3, [pc, #360]	; (80141e0 <mqtt_client_reg_dev_on_home_assist+0x27c>)
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 801407c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014080:	2b00      	cmp	r3, #0
 8014082:	d002      	beq.n	801408a <mqtt_client_reg_dev_on_home_assist+0x126>
 8014084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014088:	e09c      	b.n	80141c4 <mqtt_client_reg_dev_on_home_assist+0x260>
		mqtt_message.id++;
 801408a:	4b52      	ldr	r3, [pc, #328]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 801408c:	889b      	ldrh	r3, [r3, #4]
 801408e:	3301      	adds	r3, #1
 8014090:	b29a      	uxth	r2, r3
 8014092:	4b50      	ldr	r3, [pc, #320]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8014094:	809a      	strh	r2, [r3, #4]

//------------------------------REG POWER SENSOR-------------------------------
//------------------------------REG APPARENT POWER SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 8014096:	2280      	movs	r2, #128	; 0x80
 8014098:	2100      	movs	r1, #0
 801409a:	484c      	ldr	r0, [pc, #304]	; (80141cc <mqtt_client_reg_dev_on_home_assist+0x268>)
 801409c:	f019 fb16 	bl	802d6cc <memset>
		get_config_topik_string(buf_topik, APPARENT_POWER_SENSOR_TOPIK, 0);
 80140a0:	2200      	movs	r2, #0
 80140a2:	2108      	movs	r1, #8
 80140a4:	4849      	ldr	r0, [pc, #292]	; (80141cc <mqtt_client_reg_dev_on_home_assist+0x268>)
 80140a6:	f000 f90f 	bl	80142c8 <get_config_topik_string>
		get_config_payload_string(buf_payload, APPARENT_POWER_SENSOR_PAYLOAD, 0);
 80140aa:	2200      	movs	r2, #0
 80140ac:	2108      	movs	r1, #8
 80140ae:	4848      	ldr	r0, [pc, #288]	; (80141d0 <mqtt_client_reg_dev_on_home_assist+0x26c>)
 80140b0:	f000 f9bc 	bl	801442c <get_config_payload_string>
		mqtt_message.payloadlen = strlen(buf_payload);
 80140b4:	4846      	ldr	r0, [pc, #280]	; (80141d0 <mqtt_client_reg_dev_on_home_assist+0x26c>)
 80140b6:	f7fc f8f3 	bl	80102a0 <strlen>
 80140ba:	4603      	mov	r3, r0
 80140bc:	4a45      	ldr	r2, [pc, #276]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 80140be:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload = buf_payload;
 80140c0:	4b44      	ldr	r3, [pc, #272]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 80140c2:	4a43      	ldr	r2, [pc, #268]	; (80141d0 <mqtt_client_reg_dev_on_home_assist+0x26c>)
 80140c4:	609a      	str	r2, [r3, #8]
		set_mutex();
 80140c6:	4b44      	ldr	r3, [pc, #272]	; (80141d8 <mqtt_client_reg_dev_on_home_assist+0x274>)
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 80140cc:	4a41      	ldr	r2, [pc, #260]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 80140ce:	493f      	ldr	r1, [pc, #252]	; (80141cc <mqtt_client_reg_dev_on_home_assist+0x268>)
 80140d0:	4842      	ldr	r0, [pc, #264]	; (80141dc <mqtt_client_reg_dev_on_home_assist+0x278>)
 80140d2:	f009 f883 	bl	801d1dc <MQTTPublish>
 80140d6:	4603      	mov	r3, r0
 80140d8:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 80140da:	4b41      	ldr	r3, [pc, #260]	; (80141e0 <mqtt_client_reg_dev_on_home_assist+0x27c>)
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 80140e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d002      	beq.n	80140ee <mqtt_client_reg_dev_on_home_assist+0x18a>
 80140e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80140ec:	e06a      	b.n	80141c4 <mqtt_client_reg_dev_on_home_assist+0x260>
		mqtt_message.id++;
 80140ee:	4b39      	ldr	r3, [pc, #228]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 80140f0:	889b      	ldrh	r3, [r3, #4]
 80140f2:	3301      	adds	r3, #1
 80140f4:	b29a      	uxth	r2, r3
 80140f6:	4b37      	ldr	r3, [pc, #220]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 80140f8:	809a      	strh	r2, [r3, #4]


//------------------------------REG APPARENT POWER SENSOR-------------------------------
//------------------------------REG POWER FACTOR SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 80140fa:	2280      	movs	r2, #128	; 0x80
 80140fc:	2100      	movs	r1, #0
 80140fe:	4833      	ldr	r0, [pc, #204]	; (80141cc <mqtt_client_reg_dev_on_home_assist+0x268>)
 8014100:	f019 fae4 	bl	802d6cc <memset>
		get_config_topik_string(buf_topik, POWER_FACTOR_SENSOR_TOPIK, 0);
 8014104:	2200      	movs	r2, #0
 8014106:	2106      	movs	r1, #6
 8014108:	4830      	ldr	r0, [pc, #192]	; (80141cc <mqtt_client_reg_dev_on_home_assist+0x268>)
 801410a:	f000 f8dd 	bl	80142c8 <get_config_topik_string>
		get_config_payload_string(buf_payload, POWER_FACTOR_SENSOR_PAYLOAD, 0);
 801410e:	2200      	movs	r2, #0
 8014110:	2106      	movs	r1, #6
 8014112:	482f      	ldr	r0, [pc, #188]	; (80141d0 <mqtt_client_reg_dev_on_home_assist+0x26c>)
 8014114:	f000 f98a 	bl	801442c <get_config_payload_string>
		mqtt_message.payloadlen = strlen(buf_payload);
 8014118:	482d      	ldr	r0, [pc, #180]	; (80141d0 <mqtt_client_reg_dev_on_home_assist+0x26c>)
 801411a:	f7fc f8c1 	bl	80102a0 <strlen>
 801411e:	4603      	mov	r3, r0
 8014120:	4a2c      	ldr	r2, [pc, #176]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8014122:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload = buf_payload;
 8014124:	4b2b      	ldr	r3, [pc, #172]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8014126:	4a2a      	ldr	r2, [pc, #168]	; (80141d0 <mqtt_client_reg_dev_on_home_assist+0x26c>)
 8014128:	609a      	str	r2, [r3, #8]
		set_mutex();
 801412a:	4b2b      	ldr	r3, [pc, #172]	; (80141d8 <mqtt_client_reg_dev_on_home_assist+0x274>)
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8014130:	4a28      	ldr	r2, [pc, #160]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8014132:	4926      	ldr	r1, [pc, #152]	; (80141cc <mqtt_client_reg_dev_on_home_assist+0x268>)
 8014134:	4829      	ldr	r0, [pc, #164]	; (80141dc <mqtt_client_reg_dev_on_home_assist+0x278>)
 8014136:	f009 f851 	bl	801d1dc <MQTTPublish>
 801413a:	4603      	mov	r3, r0
 801413c:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 801413e:	4b28      	ldr	r3, [pc, #160]	; (80141e0 <mqtt_client_reg_dev_on_home_assist+0x27c>)
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 8014144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d002      	beq.n	8014152 <mqtt_client_reg_dev_on_home_assist+0x1ee>
 801414c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014150:	e038      	b.n	80141c4 <mqtt_client_reg_dev_on_home_assist+0x260>
		mqtt_message.id++;
 8014152:	4b20      	ldr	r3, [pc, #128]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8014154:	889b      	ldrh	r3, [r3, #4]
 8014156:	3301      	adds	r3, #1
 8014158:	b29a      	uxth	r2, r3
 801415a:	4b1e      	ldr	r3, [pc, #120]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 801415c:	809a      	strh	r2, [r3, #4]

//------------------------------REG POWER FACTOR SENSOR-------------------------------
//------------------------------REG CURRENT SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 801415e:	2280      	movs	r2, #128	; 0x80
 8014160:	2100      	movs	r1, #0
 8014162:	481a      	ldr	r0, [pc, #104]	; (80141cc <mqtt_client_reg_dev_on_home_assist+0x268>)
 8014164:	f019 fab2 	bl	802d6cc <memset>
		get_config_topik_string(buf_topik, CURRENT_SENSOR_TOPIK, 0);
 8014168:	2200      	movs	r2, #0
 801416a:	2107      	movs	r1, #7
 801416c:	4817      	ldr	r0, [pc, #92]	; (80141cc <mqtt_client_reg_dev_on_home_assist+0x268>)
 801416e:	f000 f8ab 	bl	80142c8 <get_config_topik_string>
		get_config_payload_string(buf_payload, CURRENT_SENSOR_PAYLOAD, 0);
 8014172:	2200      	movs	r2, #0
 8014174:	2107      	movs	r1, #7
 8014176:	4816      	ldr	r0, [pc, #88]	; (80141d0 <mqtt_client_reg_dev_on_home_assist+0x26c>)
 8014178:	f000 f958 	bl	801442c <get_config_payload_string>
		mqtt_message.payloadlen = strlen(buf_payload);
 801417c:	4814      	ldr	r0, [pc, #80]	; (80141d0 <mqtt_client_reg_dev_on_home_assist+0x26c>)
 801417e:	f7fc f88f 	bl	80102a0 <strlen>
 8014182:	4603      	mov	r3, r0
 8014184:	4a13      	ldr	r2, [pc, #76]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8014186:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload = buf_payload;
 8014188:	4b12      	ldr	r3, [pc, #72]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 801418a:	4a11      	ldr	r2, [pc, #68]	; (80141d0 <mqtt_client_reg_dev_on_home_assist+0x26c>)
 801418c:	609a      	str	r2, [r3, #8]
		set_mutex();
 801418e:	4b12      	ldr	r3, [pc, #72]	; (80141d8 <mqtt_client_reg_dev_on_home_assist+0x274>)
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8014194:	4a0f      	ldr	r2, [pc, #60]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8014196:	490d      	ldr	r1, [pc, #52]	; (80141cc <mqtt_client_reg_dev_on_home_assist+0x268>)
 8014198:	4810      	ldr	r0, [pc, #64]	; (80141dc <mqtt_client_reg_dev_on_home_assist+0x278>)
 801419a:	f009 f81f 	bl	801d1dc <MQTTPublish>
 801419e:	4603      	mov	r3, r0
 80141a0:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 80141a2:	4b0f      	ldr	r3, [pc, #60]	; (80141e0 <mqtt_client_reg_dev_on_home_assist+0x27c>)
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 80141a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d002      	beq.n	80141b6 <mqtt_client_reg_dev_on_home_assist+0x252>
 80141b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80141b4:	e006      	b.n	80141c4 <mqtt_client_reg_dev_on_home_assist+0x260>
		mqtt_message.id++;
 80141b6:	4b07      	ldr	r3, [pc, #28]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 80141b8:	889b      	ldrh	r3, [r3, #4]
 80141ba:	3301      	adds	r3, #1
 80141bc:	b29a      	uxth	r2, r3
 80141be:	4b05      	ldr	r3, [pc, #20]	; (80141d4 <mqtt_client_reg_dev_on_home_assist+0x270>)
 80141c0:	809a      	strh	r2, [r3, #4]

//------------------------------REG CURRENT SENSOR-------------------------------
		return 0;
 80141c2:	2300      	movs	r3, #0
		if (result != SUCCESSS) return result;
		mqtt_message.id++;
	}
	return result;// if all Ok, return SUCCESSS. SUCCESSS = 0;
	*/
}
 80141c4:	4618      	mov	r0, r3
 80141c6:	3708      	adds	r7, #8
 80141c8:	46bd      	mov	sp, r7
 80141ca:	bd80      	pop	{r7, pc}
 80141cc:	20000538 	.word	0x20000538
 80141d0:	200005b8 	.word	0x200005b8
 80141d4:	20000888 	.word	0x20000888
 80141d8:	2000005c 	.word	0x2000005c
 80141dc:	2000082c 	.word	0x2000082c
 80141e0:	20000060 	.word	0x20000060

080141e4 <send_data_to_topik>:
	result = MQTTSubscribe(&MQTT_Client, sub_topik, QOS1, mqtt_message_resieve);
	release_mutex();
	return result;  // if all Ok, return SUCCESSS. SUCCESSS = 0;
}

int8_t send_data_to_topik(const char* topik, char* payload){
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b084      	sub	sp, #16
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	6078      	str	r0, [r7, #4]
 80141ec:	6039      	str	r1, [r7, #0]
	int8_t result;

	mqtt_message.payloadlen = strlen(payload);
 80141ee:	6838      	ldr	r0, [r7, #0]
 80141f0:	f7fc f856 	bl	80102a0 <strlen>
 80141f4:	4603      	mov	r3, r0
 80141f6:	4a0f      	ldr	r2, [pc, #60]	; (8014234 <send_data_to_topik+0x50>)
 80141f8:	60d3      	str	r3, [r2, #12]
	mqtt_message.payload	= payload;
 80141fa:	4a0e      	ldr	r2, [pc, #56]	; (8014234 <send_data_to_topik+0x50>)
 80141fc:	683b      	ldr	r3, [r7, #0]
 80141fe:	6093      	str	r3, [r2, #8]
	mqtt_message.id++;
 8014200:	4b0c      	ldr	r3, [pc, #48]	; (8014234 <send_data_to_topik+0x50>)
 8014202:	889b      	ldrh	r3, [r3, #4]
 8014204:	3301      	adds	r3, #1
 8014206:	b29a      	uxth	r2, r3
 8014208:	4b0a      	ldr	r3, [pc, #40]	; (8014234 <send_data_to_topik+0x50>)
 801420a:	809a      	strh	r2, [r3, #4]
	set_mutex();
 801420c:	4b0a      	ldr	r3, [pc, #40]	; (8014238 <send_data_to_topik+0x54>)
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	4798      	blx	r3
	result = MQTTPublish(&MQTT_Client, topik , &mqtt_message);
 8014212:	4a08      	ldr	r2, [pc, #32]	; (8014234 <send_data_to_topik+0x50>)
 8014214:	6879      	ldr	r1, [r7, #4]
 8014216:	4809      	ldr	r0, [pc, #36]	; (801423c <send_data_to_topik+0x58>)
 8014218:	f008 ffe0 	bl	801d1dc <MQTTPublish>
 801421c:	4603      	mov	r3, r0
 801421e:	73fb      	strb	r3, [r7, #15]
	release_mutex();
 8014220:	4b07      	ldr	r3, [pc, #28]	; (8014240 <send_data_to_topik+0x5c>)
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	4798      	blx	r3
	return result; // if all Ok, return SUCCESSS. SUCCESSS = 0;
 8014226:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801422a:	4618      	mov	r0, r3
 801422c:	3710      	adds	r7, #16
 801422e:	46bd      	mov	sp, r7
 8014230:	bd80      	pop	{r7, pc}
 8014232:	bf00      	nop
 8014234:	20000888 	.word	0x20000888
 8014238:	2000005c 	.word	0x2000005c
 801423c:	2000082c 	.word	0x2000082c
 8014240:	20000060 	.word	0x20000060

08014244 <set_device_id>:
char switch_status_topik_temp[] = {"%s_%s/switches"	};

unsigned char unical_id[DEV_UID_LEN] = {'\0'};
unsigned char dev_conf_ip[IP_v4_LEN] = {'\0'};

int set_device_id(unsigned char * dev_id){
 8014244:	b580      	push	{r7, lr}
 8014246:	b084      	sub	sp, #16
 8014248:	af00      	add	r7, sp, #0
 801424a:	6078      	str	r0, [r7, #4]
	uint8_t cpy_len = 0;
 801424c:	2300      	movs	r3, #0
 801424e:	73fb      	strb	r3, [r7, #15]
	if (strlen(dev_id) >= DEV_UID_LEN ){
 8014250:	6878      	ldr	r0, [r7, #4]
 8014252:	f7fc f825 	bl	80102a0 <strlen>
 8014256:	4603      	mov	r3, r0
 8014258:	2b0d      	cmp	r3, #13
 801425a:	d902      	bls.n	8014262 <set_device_id+0x1e>
		cpy_len = DEV_UID_LEN;
 801425c:	230e      	movs	r3, #14
 801425e:	73fb      	strb	r3, [r7, #15]
 8014260:	e004      	b.n	801426c <set_device_id+0x28>
	}else{
		cpy_len = strlen(dev_id);
 8014262:	6878      	ldr	r0, [r7, #4]
 8014264:	f7fc f81c 	bl	80102a0 <strlen>
 8014268:	4603      	mov	r3, r0
 801426a:	73fb      	strb	r3, [r7, #15]
	}
	strncpy(unical_id, dev_id, cpy_len);
 801426c:	7bfb      	ldrb	r3, [r7, #15]
 801426e:	461a      	mov	r2, r3
 8014270:	6879      	ldr	r1, [r7, #4]
 8014272:	4804      	ldr	r0, [pc, #16]	; (8014284 <set_device_id+0x40>)
 8014274:	f019 fa84 	bl	802d780 <strncpy>
	return 0;
 8014278:	2300      	movs	r3, #0
}
 801427a:	4618      	mov	r0, r3
 801427c:	3710      	adds	r7, #16
 801427e:	46bd      	mov	sp, r7
 8014280:	bd80      	pop	{r7, pc}
 8014282:	bf00      	nop
 8014284:	20000898 	.word	0x20000898

08014288 <set_device_conf_ip>:

int set_device_conf_ip(unsigned char * chr_ip){
 8014288:	b580      	push	{r7, lr}
 801428a:	b082      	sub	sp, #8
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]

	strcpy(dev_conf_ip, "\0");
 8014290:	4b0c      	ldr	r3, [pc, #48]	; (80142c4 <set_device_conf_ip+0x3c>)
 8014292:	2200      	movs	r2, #0
 8014294:	701a      	strb	r2, [r3, #0]
	if(strlen(chr_ip) <= IP_v4_LEN){
 8014296:	6878      	ldr	r0, [r7, #4]
 8014298:	f7fc f802 	bl	80102a0 <strlen>
 801429c:	4603      	mov	r3, r0
 801429e:	2b12      	cmp	r3, #18
 80142a0:	d80a      	bhi.n	80142b8 <set_device_conf_ip+0x30>
		strncpy(dev_conf_ip, chr_ip, strlen(chr_ip));
 80142a2:	6878      	ldr	r0, [r7, #4]
 80142a4:	f7fb fffc 	bl	80102a0 <strlen>
 80142a8:	4603      	mov	r3, r0
 80142aa:	461a      	mov	r2, r3
 80142ac:	6879      	ldr	r1, [r7, #4]
 80142ae:	4805      	ldr	r0, [pc, #20]	; (80142c4 <set_device_conf_ip+0x3c>)
 80142b0:	f019 fa66 	bl	802d780 <strncpy>
		return 0;
 80142b4:	2300      	movs	r3, #0
 80142b6:	e001      	b.n	80142bc <set_device_conf_ip+0x34>
	}
	return -1;
 80142b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80142bc:	4618      	mov	r0, r3
 80142be:	3708      	adds	r7, #8
 80142c0:	46bd      	mov	sp, r7
 80142c2:	bd80      	pop	{r7, pc}
 80142c4:	200008a8 	.word	0x200008a8

080142c8 <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint8_t topik_type, uint8_t obj_number){
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b086      	sub	sp, #24
 80142cc:	af04      	add	r7, sp, #16
 80142ce:	6078      	str	r0, [r7, #4]
 80142d0:	460b      	mov	r3, r1
 80142d2:	70fb      	strb	r3, [r7, #3]
 80142d4:	4613      	mov	r3, r2
 80142d6:	70bb      	strb	r3, [r7, #2]

	strcpy(buff, '\0');
 80142d8:	2100      	movs	r1, #0
 80142da:	6878      	ldr	r0, [r7, #4]
 80142dc:	f019 fbc3 	bl	802da66 <strcpy>
	switch (topik_type) {
 80142e0:	78fb      	ldrb	r3, [r7, #3]
 80142e2:	3b01      	subs	r3, #1
 80142e4:	2b07      	cmp	r3, #7
 80142e6:	d87b      	bhi.n	80143e0 <get_config_topik_string+0x118>
 80142e8:	a201      	add	r2, pc, #4	; (adr r2, 80142f0 <get_config_topik_string+0x28>)
 80142ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142ee:	bf00      	nop
 80142f0:	08014311 	.word	0x08014311
 80142f4:	0801432b 	.word	0x0801432b
 80142f8:	08014345 	.word	0x08014345
 80142fc:	08014379 	.word	0x08014379
 8014300:	0801435f 	.word	0x0801435f
 8014304:	080143ad 	.word	0x080143ad
 8014308:	080143c7 	.word	0x080143c7
 801430c:	08014393 	.word	0x08014393
		case INPUT_TOPIK:
			sprintf(buff, config_topik_temlate, home_assistant_prefix, bin_sens, unical_id, input, obj_number);
 8014310:	78bb      	ldrb	r3, [r7, #2]
 8014312:	9302      	str	r3, [sp, #8]
 8014314:	4b36      	ldr	r3, [pc, #216]	; (80143f0 <get_config_topik_string+0x128>)
 8014316:	9301      	str	r3, [sp, #4]
 8014318:	4b36      	ldr	r3, [pc, #216]	; (80143f4 <get_config_topik_string+0x12c>)
 801431a:	9300      	str	r3, [sp, #0]
 801431c:	4b36      	ldr	r3, [pc, #216]	; (80143f8 <get_config_topik_string+0x130>)
 801431e:	4a37      	ldr	r2, [pc, #220]	; (80143fc <get_config_topik_string+0x134>)
 8014320:	4937      	ldr	r1, [pc, #220]	; (8014400 <get_config_topik_string+0x138>)
 8014322:	6878      	ldr	r0, [r7, #4]
 8014324:	f019 f882 	bl	802d42c <siprintf>
			break;
 8014328:	e05d      	b.n	80143e6 <get_config_topik_string+0x11e>

		case OUTPUT_TOPIK:
			sprintf(buff, config_topik_temlate, home_assistant_prefix, switch_sens, unical_id, switch_sens, obj_number);
 801432a:	78bb      	ldrb	r3, [r7, #2]
 801432c:	9302      	str	r3, [sp, #8]
 801432e:	4b35      	ldr	r3, [pc, #212]	; (8014404 <get_config_topik_string+0x13c>)
 8014330:	9301      	str	r3, [sp, #4]
 8014332:	4b30      	ldr	r3, [pc, #192]	; (80143f4 <get_config_topik_string+0x12c>)
 8014334:	9300      	str	r3, [sp, #0]
 8014336:	4b33      	ldr	r3, [pc, #204]	; (8014404 <get_config_topik_string+0x13c>)
 8014338:	4a30      	ldr	r2, [pc, #192]	; (80143fc <get_config_topik_string+0x134>)
 801433a:	4931      	ldr	r1, [pc, #196]	; (8014400 <get_config_topik_string+0x138>)
 801433c:	6878      	ldr	r0, [r7, #4]
 801433e:	f019 f875 	bl	802d42c <siprintf>
			break;
 8014342:	e050      	b.n	80143e6 <get_config_topik_string+0x11e>

		case ENERGY_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy);
 8014344:	4b30      	ldr	r3, [pc, #192]	; (8014408 <get_config_topik_string+0x140>)
 8014346:	9302      	str	r3, [sp, #8]
 8014348:	4b2a      	ldr	r3, [pc, #168]	; (80143f4 <get_config_topik_string+0x12c>)
 801434a:	9301      	str	r3, [sp, #4]
 801434c:	4b2f      	ldr	r3, [pc, #188]	; (801440c <get_config_topik_string+0x144>)
 801434e:	9300      	str	r3, [sp, #0]
 8014350:	4b2f      	ldr	r3, [pc, #188]	; (8014410 <get_config_topik_string+0x148>)
 8014352:	4a2a      	ldr	r2, [pc, #168]	; (80143fc <get_config_topik_string+0x134>)
 8014354:	492f      	ldr	r1, [pc, #188]	; (8014414 <get_config_topik_string+0x14c>)
 8014356:	6878      	ldr	r0, [r7, #4]
 8014358:	f019 f868 	bl	802d42c <siprintf>
			break;
 801435c:	e043      	b.n	80143e6 <get_config_topik_string+0x11e>
		case VOLTAGE_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage);
 801435e:	4b2e      	ldr	r3, [pc, #184]	; (8014418 <get_config_topik_string+0x150>)
 8014360:	9302      	str	r3, [sp, #8]
 8014362:	4b24      	ldr	r3, [pc, #144]	; (80143f4 <get_config_topik_string+0x12c>)
 8014364:	9301      	str	r3, [sp, #4]
 8014366:	4b29      	ldr	r3, [pc, #164]	; (801440c <get_config_topik_string+0x144>)
 8014368:	9300      	str	r3, [sp, #0]
 801436a:	4b29      	ldr	r3, [pc, #164]	; (8014410 <get_config_topik_string+0x148>)
 801436c:	4a23      	ldr	r2, [pc, #140]	; (80143fc <get_config_topik_string+0x134>)
 801436e:	4929      	ldr	r1, [pc, #164]	; (8014414 <get_config_topik_string+0x14c>)
 8014370:	6878      	ldr	r0, [r7, #4]
 8014372:	f019 f85b 	bl	802d42c <siprintf>
			break;
 8014376:	e036      	b.n	80143e6 <get_config_topik_string+0x11e>
		case POWER_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power);
 8014378:	4b28      	ldr	r3, [pc, #160]	; (801441c <get_config_topik_string+0x154>)
 801437a:	9302      	str	r3, [sp, #8]
 801437c:	4b1d      	ldr	r3, [pc, #116]	; (80143f4 <get_config_topik_string+0x12c>)
 801437e:	9301      	str	r3, [sp, #4]
 8014380:	4b22      	ldr	r3, [pc, #136]	; (801440c <get_config_topik_string+0x144>)
 8014382:	9300      	str	r3, [sp, #0]
 8014384:	4b22      	ldr	r3, [pc, #136]	; (8014410 <get_config_topik_string+0x148>)
 8014386:	4a1d      	ldr	r2, [pc, #116]	; (80143fc <get_config_topik_string+0x134>)
 8014388:	4922      	ldr	r1, [pc, #136]	; (8014414 <get_config_topik_string+0x14c>)
 801438a:	6878      	ldr	r0, [r7, #4]
 801438c:	f019 f84e 	bl	802d42c <siprintf>
			break;
 8014390:	e029      	b.n	80143e6 <get_config_topik_string+0x11e>
		case APPARENT_POWER_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_apparent_power);
 8014392:	4b23      	ldr	r3, [pc, #140]	; (8014420 <get_config_topik_string+0x158>)
 8014394:	9302      	str	r3, [sp, #8]
 8014396:	4b17      	ldr	r3, [pc, #92]	; (80143f4 <get_config_topik_string+0x12c>)
 8014398:	9301      	str	r3, [sp, #4]
 801439a:	4b1c      	ldr	r3, [pc, #112]	; (801440c <get_config_topik_string+0x144>)
 801439c:	9300      	str	r3, [sp, #0]
 801439e:	4b1c      	ldr	r3, [pc, #112]	; (8014410 <get_config_topik_string+0x148>)
 80143a0:	4a16      	ldr	r2, [pc, #88]	; (80143fc <get_config_topik_string+0x134>)
 80143a2:	491c      	ldr	r1, [pc, #112]	; (8014414 <get_config_topik_string+0x14c>)
 80143a4:	6878      	ldr	r0, [r7, #4]
 80143a6:	f019 f841 	bl	802d42c <siprintf>
			break;
 80143aa:	e01c      	b.n	80143e6 <get_config_topik_string+0x11e>
		case POWER_FACTOR_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor);
 80143ac:	4b1d      	ldr	r3, [pc, #116]	; (8014424 <get_config_topik_string+0x15c>)
 80143ae:	9302      	str	r3, [sp, #8]
 80143b0:	4b10      	ldr	r3, [pc, #64]	; (80143f4 <get_config_topik_string+0x12c>)
 80143b2:	9301      	str	r3, [sp, #4]
 80143b4:	4b15      	ldr	r3, [pc, #84]	; (801440c <get_config_topik_string+0x144>)
 80143b6:	9300      	str	r3, [sp, #0]
 80143b8:	4b15      	ldr	r3, [pc, #84]	; (8014410 <get_config_topik_string+0x148>)
 80143ba:	4a10      	ldr	r2, [pc, #64]	; (80143fc <get_config_topik_string+0x134>)
 80143bc:	4915      	ldr	r1, [pc, #84]	; (8014414 <get_config_topik_string+0x14c>)
 80143be:	6878      	ldr	r0, [r7, #4]
 80143c0:	f019 f834 	bl	802d42c <siprintf>
			break;
 80143c4:	e00f      	b.n	80143e6 <get_config_topik_string+0x11e>
		case CURRENT_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current);
 80143c6:	4b18      	ldr	r3, [pc, #96]	; (8014428 <get_config_topik_string+0x160>)
 80143c8:	9302      	str	r3, [sp, #8]
 80143ca:	4b0a      	ldr	r3, [pc, #40]	; (80143f4 <get_config_topik_string+0x12c>)
 80143cc:	9301      	str	r3, [sp, #4]
 80143ce:	4b0f      	ldr	r3, [pc, #60]	; (801440c <get_config_topik_string+0x144>)
 80143d0:	9300      	str	r3, [sp, #0]
 80143d2:	4b0f      	ldr	r3, [pc, #60]	; (8014410 <get_config_topik_string+0x148>)
 80143d4:	4a09      	ldr	r2, [pc, #36]	; (80143fc <get_config_topik_string+0x134>)
 80143d6:	490f      	ldr	r1, [pc, #60]	; (8014414 <get_config_topik_string+0x14c>)
 80143d8:	6878      	ldr	r0, [r7, #4]
 80143da:	f019 f827 	bl	802d42c <siprintf>
			break;
 80143de:	e002      	b.n	80143e6 <get_config_topik_string+0x11e>
		default:
			return -1;
 80143e0:	f04f 33ff 	mov.w	r3, #4294967295
 80143e4:	e000      	b.n	80143e8 <get_config_topik_string+0x120>
			break;
	}


	return 0;
 80143e6:	2300      	movs	r3, #0
}
 80143e8:	4618      	mov	r0, r3
 80143ea:	3708      	adds	r7, #8
 80143ec:	46bd      	mov	sp, r7
 80143ee:	bd80      	pop	{r7, pc}
 80143f0:	2000008c 	.word	0x2000008c
 80143f4:	20000898 	.word	0x20000898
 80143f8:	20000074 	.word	0x20000074
 80143fc:	20000064 	.word	0x20000064
 8014400:	08033f0c 	.word	0x08033f0c
 8014404:	20000084 	.word	0x20000084
 8014408:	08032914 	.word	0x08032914
 801440c:	0803291c 	.word	0x0803291c
 8014410:	080328f4 	.word	0x080328f4
 8014414:	080328fc 	.word	0x080328fc
 8014418:	08032924 	.word	0x08032924
 801441c:	0803292c 	.word	0x0803292c
 8014420:	08032934 	.word	0x08032934
 8014424:	08032944 	.word	0x08032944
 8014428:	08032954 	.word	0x08032954

0801442c <get_config_payload_string>:

int get_config_payload_string( char * payload, uint8_t payload_type, uint8_t obj_number){
 801442c:	b590      	push	{r4, r7, lr}
 801442e:	b097      	sub	sp, #92	; 0x5c
 8014430:	af12      	add	r7, sp, #72	; 0x48
 8014432:	6078      	str	r0, [r7, #4]
 8014434:	460b      	mov	r3, r1
 8014436:	70fb      	strb	r3, [r7, #3]
 8014438:	4613      	mov	r3, r2
 801443a:	70bb      	strb	r3, [r7, #2]

	uint8_t len = 0;
 801443c:	2300      	movs	r3, #0
 801443e:	73fb      	strb	r3, [r7, #15]
	strcpy(payload, "\0");
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	2200      	movs	r2, #0
 8014444:	701a      	strb	r2, [r3, #0]

	switch (payload_type) {
 8014446:	78fb      	ldrb	r3, [r7, #3]
 8014448:	3b01      	subs	r3, #1
 801444a:	2b07      	cmp	r3, #7
 801444c:	f200 8181 	bhi.w	8014752 <get_config_payload_string+0x326>
 8014450:	a201      	add	r2, pc, #4	; (adr r2, 8014458 <get_config_payload_string+0x2c>)
 8014452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014456:	bf00      	nop
 8014458:	080144ad 	.word	0x080144ad
 801445c:	08014479 	.word	0x08014479
 8014460:	080144db 	.word	0x080144db
 8014464:	08014587 	.word	0x08014587
 8014468:	08014531 	.word	0x08014531
 801446c:	08014633 	.word	0x08014633
 8014470:	080146fd 	.word	0x080146fd
 8014474:	080145dd 	.word	0x080145dd
		case OUT_CONF_PAYLOAD:
			len = sprintf(payload, switch_conf_payload_templ, unical_id, unical_id, obj_number, obj_number, obj_number, unical_id, obj_number, unical_id, unical_id, dev_conf_ip);
 8014478:	78bb      	ldrb	r3, [r7, #2]
 801447a:	78ba      	ldrb	r2, [r7, #2]
 801447c:	78b9      	ldrb	r1, [r7, #2]
 801447e:	78b8      	ldrb	r0, [r7, #2]
 8014480:	4c81      	ldr	r4, [pc, #516]	; (8014688 <get_config_payload_string+0x25c>)
 8014482:	9407      	str	r4, [sp, #28]
 8014484:	4c81      	ldr	r4, [pc, #516]	; (801468c <get_config_payload_string+0x260>)
 8014486:	9406      	str	r4, [sp, #24]
 8014488:	4c80      	ldr	r4, [pc, #512]	; (801468c <get_config_payload_string+0x260>)
 801448a:	9405      	str	r4, [sp, #20]
 801448c:	9004      	str	r0, [sp, #16]
 801448e:	487f      	ldr	r0, [pc, #508]	; (801468c <get_config_payload_string+0x260>)
 8014490:	9003      	str	r0, [sp, #12]
 8014492:	9102      	str	r1, [sp, #8]
 8014494:	9201      	str	r2, [sp, #4]
 8014496:	9300      	str	r3, [sp, #0]
 8014498:	4b7c      	ldr	r3, [pc, #496]	; (801468c <get_config_payload_string+0x260>)
 801449a:	4a7c      	ldr	r2, [pc, #496]	; (801468c <get_config_payload_string+0x260>)
 801449c:	497c      	ldr	r1, [pc, #496]	; (8014690 <get_config_payload_string+0x264>)
 801449e:	6878      	ldr	r0, [r7, #4]
 80144a0:	f018 ffc4 	bl	802d42c <siprintf>
 80144a4:	4603      	mov	r3, r0
 80144a6:	73fb      	strb	r3, [r7, #15]
			return len;
 80144a8:	7bfb      	ldrb	r3, [r7, #15]
 80144aa:	e155      	b.n	8014758 <get_config_payload_string+0x32c>
			break;

		case INP_CONF_PAYLOAD:
			len = sprintf(payload, input_conf_payload_templ, unical_id, obj_number, obj_number,  unical_id, obj_number, unical_id, unical_id, dev_conf_ip);
 80144ac:	78b9      	ldrb	r1, [r7, #2]
 80144ae:	78bb      	ldrb	r3, [r7, #2]
 80144b0:	78ba      	ldrb	r2, [r7, #2]
 80144b2:	4875      	ldr	r0, [pc, #468]	; (8014688 <get_config_payload_string+0x25c>)
 80144b4:	9005      	str	r0, [sp, #20]
 80144b6:	4875      	ldr	r0, [pc, #468]	; (801468c <get_config_payload_string+0x260>)
 80144b8:	9004      	str	r0, [sp, #16]
 80144ba:	4874      	ldr	r0, [pc, #464]	; (801468c <get_config_payload_string+0x260>)
 80144bc:	9003      	str	r0, [sp, #12]
 80144be:	9202      	str	r2, [sp, #8]
 80144c0:	4a72      	ldr	r2, [pc, #456]	; (801468c <get_config_payload_string+0x260>)
 80144c2:	9201      	str	r2, [sp, #4]
 80144c4:	9300      	str	r3, [sp, #0]
 80144c6:	460b      	mov	r3, r1
 80144c8:	4a70      	ldr	r2, [pc, #448]	; (801468c <get_config_payload_string+0x260>)
 80144ca:	4972      	ldr	r1, [pc, #456]	; (8014694 <get_config_payload_string+0x268>)
 80144cc:	6878      	ldr	r0, [r7, #4]
 80144ce:	f018 ffad 	bl	802d42c <siprintf>
 80144d2:	4603      	mov	r3, r0
 80144d4:	73fb      	strb	r3, [r7, #15]
			return len;
 80144d6:	7bfb      	ldrb	r3, [r7, #15]
 80144d8:	e13e      	b.n	8014758 <get_config_payload_string+0x32c>
			break;
		case ENERGY_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 80144da:	4b6b      	ldr	r3, [pc, #428]	; (8014688 <get_config_payload_string+0x25c>)
 80144dc:	9310      	str	r3, [sp, #64]	; 0x40
 80144de:	4b6e      	ldr	r3, [pc, #440]	; (8014698 <get_config_payload_string+0x26c>)
 80144e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80144e2:	4b6e      	ldr	r3, [pc, #440]	; (801469c <get_config_payload_string+0x270>)
 80144e4:	930e      	str	r3, [sp, #56]	; 0x38
 80144e6:	4b6e      	ldr	r3, [pc, #440]	; (80146a0 <get_config_payload_string+0x274>)
 80144e8:	930d      	str	r3, [sp, #52]	; 0x34
 80144ea:	4b6e      	ldr	r3, [pc, #440]	; (80146a4 <get_config_payload_string+0x278>)
 80144ec:	930c      	str	r3, [sp, #48]	; 0x30
 80144ee:	4b6e      	ldr	r3, [pc, #440]	; (80146a8 <get_config_payload_string+0x27c>)
 80144f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80144f2:	4b66      	ldr	r3, [pc, #408]	; (801468c <get_config_payload_string+0x260>)
 80144f4:	930a      	str	r3, [sp, #40]	; 0x28
 80144f6:	4b6d      	ldr	r3, [pc, #436]	; (80146ac <get_config_payload_string+0x280>)
 80144f8:	9309      	str	r3, [sp, #36]	; 0x24
 80144fa:	4b6d      	ldr	r3, [pc, #436]	; (80146b0 <get_config_payload_string+0x284>)
 80144fc:	9308      	str	r3, [sp, #32]
 80144fe:	4b6d      	ldr	r3, [pc, #436]	; (80146b4 <get_config_payload_string+0x288>)
 8014500:	9307      	str	r3, [sp, #28]
 8014502:	4b62      	ldr	r3, [pc, #392]	; (801468c <get_config_payload_string+0x260>)
 8014504:	9306      	str	r3, [sp, #24]
 8014506:	4b69      	ldr	r3, [pc, #420]	; (80146ac <get_config_payload_string+0x280>)
 8014508:	9305      	str	r3, [sp, #20]
 801450a:	4b6b      	ldr	r3, [pc, #428]	; (80146b8 <get_config_payload_string+0x28c>)
 801450c:	9304      	str	r3, [sp, #16]
 801450e:	4b6b      	ldr	r3, [pc, #428]	; (80146bc <get_config_payload_string+0x290>)
 8014510:	9303      	str	r3, [sp, #12]
 8014512:	4b68      	ldr	r3, [pc, #416]	; (80146b4 <get_config_payload_string+0x288>)
 8014514:	9302      	str	r3, [sp, #8]
 8014516:	4b6a      	ldr	r3, [pc, #424]	; (80146c0 <get_config_payload_string+0x294>)
 8014518:	9301      	str	r3, [sp, #4]
 801451a:	4b5c      	ldr	r3, [pc, #368]	; (801468c <get_config_payload_string+0x260>)
 801451c:	9300      	str	r3, [sp, #0]
 801451e:	4b63      	ldr	r3, [pc, #396]	; (80146ac <get_config_payload_string+0x280>)
 8014520:	4a64      	ldr	r2, [pc, #400]	; (80146b4 <get_config_payload_string+0x288>)
 8014522:	4968      	ldr	r1, [pc, #416]	; (80146c4 <get_config_payload_string+0x298>)
 8014524:	6878      	ldr	r0, [r7, #4]
 8014526:	f018 ff81 	bl	802d42c <siprintf>
 801452a:	4603      	mov	r3, r0
 801452c:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_energy, dev_class_energy_state, dev_class_energy_human, dev_system, unical_id, \
					dev_class_energy, dev_class_energy_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 801452e:	e113      	b.n	8014758 <get_config_payload_string+0x32c>
		case VOLTAGE_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 8014530:	4b55      	ldr	r3, [pc, #340]	; (8014688 <get_config_payload_string+0x25c>)
 8014532:	9310      	str	r3, [sp, #64]	; 0x40
 8014534:	4b58      	ldr	r3, [pc, #352]	; (8014698 <get_config_payload_string+0x26c>)
 8014536:	930f      	str	r3, [sp, #60]	; 0x3c
 8014538:	4b58      	ldr	r3, [pc, #352]	; (801469c <get_config_payload_string+0x270>)
 801453a:	930e      	str	r3, [sp, #56]	; 0x38
 801453c:	4b58      	ldr	r3, [pc, #352]	; (80146a0 <get_config_payload_string+0x274>)
 801453e:	930d      	str	r3, [sp, #52]	; 0x34
 8014540:	4b58      	ldr	r3, [pc, #352]	; (80146a4 <get_config_payload_string+0x278>)
 8014542:	930c      	str	r3, [sp, #48]	; 0x30
 8014544:	4b58      	ldr	r3, [pc, #352]	; (80146a8 <get_config_payload_string+0x27c>)
 8014546:	930b      	str	r3, [sp, #44]	; 0x2c
 8014548:	4b50      	ldr	r3, [pc, #320]	; (801468c <get_config_payload_string+0x260>)
 801454a:	930a      	str	r3, [sp, #40]	; 0x28
 801454c:	4b57      	ldr	r3, [pc, #348]	; (80146ac <get_config_payload_string+0x280>)
 801454e:	9309      	str	r3, [sp, #36]	; 0x24
 8014550:	4b5d      	ldr	r3, [pc, #372]	; (80146c8 <get_config_payload_string+0x29c>)
 8014552:	9308      	str	r3, [sp, #32]
 8014554:	4b5d      	ldr	r3, [pc, #372]	; (80146cc <get_config_payload_string+0x2a0>)
 8014556:	9307      	str	r3, [sp, #28]
 8014558:	4b4c      	ldr	r3, [pc, #304]	; (801468c <get_config_payload_string+0x260>)
 801455a:	9306      	str	r3, [sp, #24]
 801455c:	4b53      	ldr	r3, [pc, #332]	; (80146ac <get_config_payload_string+0x280>)
 801455e:	9305      	str	r3, [sp, #20]
 8014560:	4b5b      	ldr	r3, [pc, #364]	; (80146d0 <get_config_payload_string+0x2a4>)
 8014562:	9304      	str	r3, [sp, #16]
 8014564:	4b5b      	ldr	r3, [pc, #364]	; (80146d4 <get_config_payload_string+0x2a8>)
 8014566:	9303      	str	r3, [sp, #12]
 8014568:	4b58      	ldr	r3, [pc, #352]	; (80146cc <get_config_payload_string+0x2a0>)
 801456a:	9302      	str	r3, [sp, #8]
 801456c:	4b54      	ldr	r3, [pc, #336]	; (80146c0 <get_config_payload_string+0x294>)
 801456e:	9301      	str	r3, [sp, #4]
 8014570:	4b46      	ldr	r3, [pc, #280]	; (801468c <get_config_payload_string+0x260>)
 8014572:	9300      	str	r3, [sp, #0]
 8014574:	4b4d      	ldr	r3, [pc, #308]	; (80146ac <get_config_payload_string+0x280>)
 8014576:	4a55      	ldr	r2, [pc, #340]	; (80146cc <get_config_payload_string+0x2a0>)
 8014578:	4952      	ldr	r1, [pc, #328]	; (80146c4 <get_config_payload_string+0x298>)
 801457a:	6878      	ldr	r0, [r7, #4]
 801457c:	f018 ff56 	bl	802d42c <siprintf>
 8014580:	4603      	mov	r3, r0
 8014582:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_voltage, "\n", dev_class_voltage_human, dev_system, unical_id, \
					dev_class_voltage, dev_class_voltage_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014584:	e0e8      	b.n	8014758 <get_config_payload_string+0x32c>
		case POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 8014586:	4b40      	ldr	r3, [pc, #256]	; (8014688 <get_config_payload_string+0x25c>)
 8014588:	9310      	str	r3, [sp, #64]	; 0x40
 801458a:	4b43      	ldr	r3, [pc, #268]	; (8014698 <get_config_payload_string+0x26c>)
 801458c:	930f      	str	r3, [sp, #60]	; 0x3c
 801458e:	4b43      	ldr	r3, [pc, #268]	; (801469c <get_config_payload_string+0x270>)
 8014590:	930e      	str	r3, [sp, #56]	; 0x38
 8014592:	4b43      	ldr	r3, [pc, #268]	; (80146a0 <get_config_payload_string+0x274>)
 8014594:	930d      	str	r3, [sp, #52]	; 0x34
 8014596:	4b43      	ldr	r3, [pc, #268]	; (80146a4 <get_config_payload_string+0x278>)
 8014598:	930c      	str	r3, [sp, #48]	; 0x30
 801459a:	4b43      	ldr	r3, [pc, #268]	; (80146a8 <get_config_payload_string+0x27c>)
 801459c:	930b      	str	r3, [sp, #44]	; 0x2c
 801459e:	4b3b      	ldr	r3, [pc, #236]	; (801468c <get_config_payload_string+0x260>)
 80145a0:	930a      	str	r3, [sp, #40]	; 0x28
 80145a2:	4b42      	ldr	r3, [pc, #264]	; (80146ac <get_config_payload_string+0x280>)
 80145a4:	9309      	str	r3, [sp, #36]	; 0x24
 80145a6:	4b4c      	ldr	r3, [pc, #304]	; (80146d8 <get_config_payload_string+0x2ac>)
 80145a8:	9308      	str	r3, [sp, #32]
 80145aa:	4b4c      	ldr	r3, [pc, #304]	; (80146dc <get_config_payload_string+0x2b0>)
 80145ac:	9307      	str	r3, [sp, #28]
 80145ae:	4b37      	ldr	r3, [pc, #220]	; (801468c <get_config_payload_string+0x260>)
 80145b0:	9306      	str	r3, [sp, #24]
 80145b2:	4b3e      	ldr	r3, [pc, #248]	; (80146ac <get_config_payload_string+0x280>)
 80145b4:	9305      	str	r3, [sp, #20]
 80145b6:	4b4a      	ldr	r3, [pc, #296]	; (80146e0 <get_config_payload_string+0x2b4>)
 80145b8:	9304      	str	r3, [sp, #16]
 80145ba:	4b46      	ldr	r3, [pc, #280]	; (80146d4 <get_config_payload_string+0x2a8>)
 80145bc:	9303      	str	r3, [sp, #12]
 80145be:	4b47      	ldr	r3, [pc, #284]	; (80146dc <get_config_payload_string+0x2b0>)
 80145c0:	9302      	str	r3, [sp, #8]
 80145c2:	4b3f      	ldr	r3, [pc, #252]	; (80146c0 <get_config_payload_string+0x294>)
 80145c4:	9301      	str	r3, [sp, #4]
 80145c6:	4b31      	ldr	r3, [pc, #196]	; (801468c <get_config_payload_string+0x260>)
 80145c8:	9300      	str	r3, [sp, #0]
 80145ca:	4b38      	ldr	r3, [pc, #224]	; (80146ac <get_config_payload_string+0x280>)
 80145cc:	4a43      	ldr	r2, [pc, #268]	; (80146dc <get_config_payload_string+0x2b0>)
 80145ce:	493d      	ldr	r1, [pc, #244]	; (80146c4 <get_config_payload_string+0x298>)
 80145d0:	6878      	ldr	r0, [r7, #4]
 80145d2:	f018 ff2b 	bl	802d42c <siprintf>
 80145d6:	4603      	mov	r3, r0
 80145d8:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_power, "\n", dev_class_power_human, dev_system, unical_id, \
					dev_class_power, dev_class_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 80145da:	e0bd      	b.n	8014758 <get_config_payload_string+0x32c>
		case APPARENT_POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_apparent_power, dev_system, \
 80145dc:	4b2a      	ldr	r3, [pc, #168]	; (8014688 <get_config_payload_string+0x25c>)
 80145de:	9310      	str	r3, [sp, #64]	; 0x40
 80145e0:	4b2d      	ldr	r3, [pc, #180]	; (8014698 <get_config_payload_string+0x26c>)
 80145e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80145e4:	4b2d      	ldr	r3, [pc, #180]	; (801469c <get_config_payload_string+0x270>)
 80145e6:	930e      	str	r3, [sp, #56]	; 0x38
 80145e8:	4b2d      	ldr	r3, [pc, #180]	; (80146a0 <get_config_payload_string+0x274>)
 80145ea:	930d      	str	r3, [sp, #52]	; 0x34
 80145ec:	4b2d      	ldr	r3, [pc, #180]	; (80146a4 <get_config_payload_string+0x278>)
 80145ee:	930c      	str	r3, [sp, #48]	; 0x30
 80145f0:	4b2d      	ldr	r3, [pc, #180]	; (80146a8 <get_config_payload_string+0x27c>)
 80145f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80145f4:	4b25      	ldr	r3, [pc, #148]	; (801468c <get_config_payload_string+0x260>)
 80145f6:	930a      	str	r3, [sp, #40]	; 0x28
 80145f8:	4b2c      	ldr	r3, [pc, #176]	; (80146ac <get_config_payload_string+0x280>)
 80145fa:	9309      	str	r3, [sp, #36]	; 0x24
 80145fc:	4b39      	ldr	r3, [pc, #228]	; (80146e4 <get_config_payload_string+0x2b8>)
 80145fe:	9308      	str	r3, [sp, #32]
 8014600:	4b39      	ldr	r3, [pc, #228]	; (80146e8 <get_config_payload_string+0x2bc>)
 8014602:	9307      	str	r3, [sp, #28]
 8014604:	4b21      	ldr	r3, [pc, #132]	; (801468c <get_config_payload_string+0x260>)
 8014606:	9306      	str	r3, [sp, #24]
 8014608:	4b28      	ldr	r3, [pc, #160]	; (80146ac <get_config_payload_string+0x280>)
 801460a:	9305      	str	r3, [sp, #20]
 801460c:	4b37      	ldr	r3, [pc, #220]	; (80146ec <get_config_payload_string+0x2c0>)
 801460e:	9304      	str	r3, [sp, #16]
 8014610:	4b30      	ldr	r3, [pc, #192]	; (80146d4 <get_config_payload_string+0x2a8>)
 8014612:	9303      	str	r3, [sp, #12]
 8014614:	4b34      	ldr	r3, [pc, #208]	; (80146e8 <get_config_payload_string+0x2bc>)
 8014616:	9302      	str	r3, [sp, #8]
 8014618:	4b29      	ldr	r3, [pc, #164]	; (80146c0 <get_config_payload_string+0x294>)
 801461a:	9301      	str	r3, [sp, #4]
 801461c:	4b1b      	ldr	r3, [pc, #108]	; (801468c <get_config_payload_string+0x260>)
 801461e:	9300      	str	r3, [sp, #0]
 8014620:	4b22      	ldr	r3, [pc, #136]	; (80146ac <get_config_payload_string+0x280>)
 8014622:	4a31      	ldr	r2, [pc, #196]	; (80146e8 <get_config_payload_string+0x2bc>)
 8014624:	4927      	ldr	r1, [pc, #156]	; (80146c4 <get_config_payload_string+0x298>)
 8014626:	6878      	ldr	r0, [r7, #4]
 8014628:	f018 ff00 	bl	802d42c <siprintf>
 801462c:	4603      	mov	r3, r0
 801462e:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_apparent_power, "\n", dev_class_apparent_power_human, dev_system, unical_id, \
					dev_class_apparent_power, dev_class_apparent_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014630:	e092      	b.n	8014758 <get_config_payload_string+0x32c>

		case POWER_FACTOR_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 8014632:	4b15      	ldr	r3, [pc, #84]	; (8014688 <get_config_payload_string+0x25c>)
 8014634:	9310      	str	r3, [sp, #64]	; 0x40
 8014636:	4b18      	ldr	r3, [pc, #96]	; (8014698 <get_config_payload_string+0x26c>)
 8014638:	930f      	str	r3, [sp, #60]	; 0x3c
 801463a:	4b18      	ldr	r3, [pc, #96]	; (801469c <get_config_payload_string+0x270>)
 801463c:	930e      	str	r3, [sp, #56]	; 0x38
 801463e:	4b18      	ldr	r3, [pc, #96]	; (80146a0 <get_config_payload_string+0x274>)
 8014640:	930d      	str	r3, [sp, #52]	; 0x34
 8014642:	4b18      	ldr	r3, [pc, #96]	; (80146a4 <get_config_payload_string+0x278>)
 8014644:	930c      	str	r3, [sp, #48]	; 0x30
 8014646:	4b18      	ldr	r3, [pc, #96]	; (80146a8 <get_config_payload_string+0x27c>)
 8014648:	930b      	str	r3, [sp, #44]	; 0x2c
 801464a:	4b10      	ldr	r3, [pc, #64]	; (801468c <get_config_payload_string+0x260>)
 801464c:	930a      	str	r3, [sp, #40]	; 0x28
 801464e:	4b17      	ldr	r3, [pc, #92]	; (80146ac <get_config_payload_string+0x280>)
 8014650:	9309      	str	r3, [sp, #36]	; 0x24
 8014652:	4b27      	ldr	r3, [pc, #156]	; (80146f0 <get_config_payload_string+0x2c4>)
 8014654:	9308      	str	r3, [sp, #32]
 8014656:	4b27      	ldr	r3, [pc, #156]	; (80146f4 <get_config_payload_string+0x2c8>)
 8014658:	9307      	str	r3, [sp, #28]
 801465a:	4b0c      	ldr	r3, [pc, #48]	; (801468c <get_config_payload_string+0x260>)
 801465c:	9306      	str	r3, [sp, #24]
 801465e:	4b13      	ldr	r3, [pc, #76]	; (80146ac <get_config_payload_string+0x280>)
 8014660:	9305      	str	r3, [sp, #20]
 8014662:	4b25      	ldr	r3, [pc, #148]	; (80146f8 <get_config_payload_string+0x2cc>)
 8014664:	9304      	str	r3, [sp, #16]
 8014666:	4b1b      	ldr	r3, [pc, #108]	; (80146d4 <get_config_payload_string+0x2a8>)
 8014668:	9303      	str	r3, [sp, #12]
 801466a:	4b22      	ldr	r3, [pc, #136]	; (80146f4 <get_config_payload_string+0x2c8>)
 801466c:	9302      	str	r3, [sp, #8]
 801466e:	4b14      	ldr	r3, [pc, #80]	; (80146c0 <get_config_payload_string+0x294>)
 8014670:	9301      	str	r3, [sp, #4]
 8014672:	4b06      	ldr	r3, [pc, #24]	; (801468c <get_config_payload_string+0x260>)
 8014674:	9300      	str	r3, [sp, #0]
 8014676:	4b0d      	ldr	r3, [pc, #52]	; (80146ac <get_config_payload_string+0x280>)
 8014678:	4a1e      	ldr	r2, [pc, #120]	; (80146f4 <get_config_payload_string+0x2c8>)
 801467a:	4912      	ldr	r1, [pc, #72]	; (80146c4 <get_config_payload_string+0x298>)
 801467c:	6878      	ldr	r0, [r7, #4]
 801467e:	f018 fed5 	bl	802d42c <siprintf>
 8014682:	4603      	mov	r3, r0
 8014684:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_power_factor, "\n", dev_class_power_factor_human, dev_system, unical_id, \
					dev_class_power_factor, dev_class_power_factor_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014686:	e067      	b.n	8014758 <get_config_payload_string+0x32c>
 8014688:	200008a8 	.word	0x200008a8
 801468c:	20000898 	.word	0x20000898
 8014690:	08033f28 	.word	0x08033f28
 8014694:	080340e8 	.word	0x080340e8
 8014698:	0803295c 	.word	0x0803295c
 801469c:	08032964 	.word	0x08032964
 80146a0:	0803296c 	.word	0x0803296c
 80146a4:	0803297c 	.word	0x0803297c
 80146a8:	0803298c 	.word	0x0803298c
 80146ac:	0803291c 	.word	0x0803291c
 80146b0:	0803299c 	.word	0x0803299c
 80146b4:	08032914 	.word	0x08032914
 80146b8:	080329a0 	.word	0x080329a0
 80146bc:	080329b0 	.word	0x080329b0
 80146c0:	080329d4 	.word	0x080329d4
 80146c4:	08034280 	.word	0x08034280
 80146c8:	080329dc 	.word	0x080329dc
 80146cc:	08032924 	.word	0x08032924
 80146d0:	080329e0 	.word	0x080329e0
 80146d4:	080329f0 	.word	0x080329f0
 80146d8:	080329f4 	.word	0x080329f4
 80146dc:	0803292c 	.word	0x0803292c
 80146e0:	080329f8 	.word	0x080329f8
 80146e4:	08032a10 	.word	0x08032a10
 80146e8:	08032934 	.word	0x08032934
 80146ec:	08032a14 	.word	0x08032a14
 80146f0:	08032a34 	.word	0x08032a34
 80146f4:	08032944 	.word	0x08032944
 80146f8:	08032a38 	.word	0x08032a38
		case CURRENT_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 80146fc:	4b18      	ldr	r3, [pc, #96]	; (8014760 <get_config_payload_string+0x334>)
 80146fe:	9310      	str	r3, [sp, #64]	; 0x40
 8014700:	4b18      	ldr	r3, [pc, #96]	; (8014764 <get_config_payload_string+0x338>)
 8014702:	930f      	str	r3, [sp, #60]	; 0x3c
 8014704:	4b18      	ldr	r3, [pc, #96]	; (8014768 <get_config_payload_string+0x33c>)
 8014706:	930e      	str	r3, [sp, #56]	; 0x38
 8014708:	4b18      	ldr	r3, [pc, #96]	; (801476c <get_config_payload_string+0x340>)
 801470a:	930d      	str	r3, [sp, #52]	; 0x34
 801470c:	4b18      	ldr	r3, [pc, #96]	; (8014770 <get_config_payload_string+0x344>)
 801470e:	930c      	str	r3, [sp, #48]	; 0x30
 8014710:	4b18      	ldr	r3, [pc, #96]	; (8014774 <get_config_payload_string+0x348>)
 8014712:	930b      	str	r3, [sp, #44]	; 0x2c
 8014714:	4b18      	ldr	r3, [pc, #96]	; (8014778 <get_config_payload_string+0x34c>)
 8014716:	930a      	str	r3, [sp, #40]	; 0x28
 8014718:	4b18      	ldr	r3, [pc, #96]	; (801477c <get_config_payload_string+0x350>)
 801471a:	9309      	str	r3, [sp, #36]	; 0x24
 801471c:	4b18      	ldr	r3, [pc, #96]	; (8014780 <get_config_payload_string+0x354>)
 801471e:	9308      	str	r3, [sp, #32]
 8014720:	4b18      	ldr	r3, [pc, #96]	; (8014784 <get_config_payload_string+0x358>)
 8014722:	9307      	str	r3, [sp, #28]
 8014724:	4b14      	ldr	r3, [pc, #80]	; (8014778 <get_config_payload_string+0x34c>)
 8014726:	9306      	str	r3, [sp, #24]
 8014728:	4b14      	ldr	r3, [pc, #80]	; (801477c <get_config_payload_string+0x350>)
 801472a:	9305      	str	r3, [sp, #20]
 801472c:	4b16      	ldr	r3, [pc, #88]	; (8014788 <get_config_payload_string+0x35c>)
 801472e:	9304      	str	r3, [sp, #16]
 8014730:	4b16      	ldr	r3, [pc, #88]	; (801478c <get_config_payload_string+0x360>)
 8014732:	9303      	str	r3, [sp, #12]
 8014734:	4b13      	ldr	r3, [pc, #76]	; (8014784 <get_config_payload_string+0x358>)
 8014736:	9302      	str	r3, [sp, #8]
 8014738:	4b15      	ldr	r3, [pc, #84]	; (8014790 <get_config_payload_string+0x364>)
 801473a:	9301      	str	r3, [sp, #4]
 801473c:	4b0e      	ldr	r3, [pc, #56]	; (8014778 <get_config_payload_string+0x34c>)
 801473e:	9300      	str	r3, [sp, #0]
 8014740:	4b0e      	ldr	r3, [pc, #56]	; (801477c <get_config_payload_string+0x350>)
 8014742:	4a10      	ldr	r2, [pc, #64]	; (8014784 <get_config_payload_string+0x358>)
 8014744:	4913      	ldr	r1, [pc, #76]	; (8014794 <get_config_payload_string+0x368>)
 8014746:	6878      	ldr	r0, [r7, #4]
 8014748:	f018 fe70 	bl	802d42c <siprintf>
 801474c:	4603      	mov	r3, r0
 801474e:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_current, "\n", dev_class_current_human, dev_system, unical_id, \
					dev_class_current, dev_class_current_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014750:	e002      	b.n	8014758 <get_config_payload_string+0x32c>

		default:
			return -1;
 8014752:	f04f 33ff 	mov.w	r3, #4294967295
 8014756:	e7ff      	b.n	8014758 <get_config_payload_string+0x32c>
			break;
	}
}
 8014758:	4618      	mov	r0, r3
 801475a:	3714      	adds	r7, #20
 801475c:	46bd      	mov	sp, r7
 801475e:	bd90      	pop	{r4, r7, pc}
 8014760:	200008a8 	.word	0x200008a8
 8014764:	0803295c 	.word	0x0803295c
 8014768:	08032964 	.word	0x08032964
 801476c:	0803296c 	.word	0x0803296c
 8014770:	0803297c 	.word	0x0803297c
 8014774:	0803298c 	.word	0x0803298c
 8014778:	20000898 	.word	0x20000898
 801477c:	0803291c 	.word	0x0803291c
 8014780:	08032a64 	.word	0x08032a64
 8014784:	08032954 	.word	0x08032954
 8014788:	08032a68 	.word	0x08032a68
 801478c:	080329f0 	.word	0x080329f0
 8014790:	080329d4 	.word	0x080329d4
 8014794:	08034280 	.word	0x08034280

08014798 <generate_status_topik>:
	strcpy(buff, "\0");
	sprintf(buff, subscr_topik_template, unical_id, obj_number);
	return 0;
}

int generate_status_topik(char * buff, mqtt_topik_string_type topik_type){
 8014798:	b580      	push	{r7, lr}
 801479a:	b084      	sub	sp, #16
 801479c:	af02      	add	r7, sp, #8
 801479e:	6078      	str	r0, [r7, #4]
 80147a0:	460b      	mov	r3, r1
 80147a2:	70fb      	strb	r3, [r7, #3]

	strcpy(buff, "\0");
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	2200      	movs	r2, #0
 80147a8:	701a      	strb	r2, [r3, #0]

	sprintf(buff, universal_status_topik_template, dev_system, unical_id, state_topik);
 80147aa:	4b11      	ldr	r3, [pc, #68]	; (80147f0 <generate_status_topik+0x58>)
 80147ac:	9300      	str	r3, [sp, #0]
 80147ae:	4b11      	ldr	r3, [pc, #68]	; (80147f4 <generate_status_topik+0x5c>)
 80147b0:	4a11      	ldr	r2, [pc, #68]	; (80147f8 <generate_status_topik+0x60>)
 80147b2:	4912      	ldr	r1, [pc, #72]	; (80147fc <generate_status_topik+0x64>)
 80147b4:	6878      	ldr	r0, [r7, #4]
 80147b6:	f018 fe39 	bl	802d42c <siprintf>

	switch (topik_type) {
 80147ba:	78fb      	ldrb	r3, [r7, #3]
 80147bc:	2b01      	cmp	r3, #1
 80147be:	d002      	beq.n	80147c6 <generate_status_topik+0x2e>
 80147c0:	2b02      	cmp	r3, #2
 80147c2:	d006      	beq.n	80147d2 <generate_status_topik+0x3a>
 80147c4:	e00b      	b.n	80147de <generate_status_topik+0x46>
		case INPUT_TOPIK:
			sprintf(buff, input_status_topik_temp, unical_id);
 80147c6:	4a0b      	ldr	r2, [pc, #44]	; (80147f4 <generate_status_topik+0x5c>)
 80147c8:	490d      	ldr	r1, [pc, #52]	; (8014800 <generate_status_topik+0x68>)
 80147ca:	6878      	ldr	r0, [r7, #4]
 80147cc:	f018 fe2e 	bl	802d42c <siprintf>
			break;
 80147d0:	e008      	b.n	80147e4 <generate_status_topik+0x4c>

		case OUTPUT_TOPIK:
			sprintf(buff, switch_status_topik_temp, unical_id);
 80147d2:	4a08      	ldr	r2, [pc, #32]	; (80147f4 <generate_status_topik+0x5c>)
 80147d4:	490b      	ldr	r1, [pc, #44]	; (8014804 <generate_status_topik+0x6c>)
 80147d6:	6878      	ldr	r0, [r7, #4]
 80147d8:	f018 fe28 	bl	802d42c <siprintf>
			break;
 80147dc:	e002      	b.n	80147e4 <generate_status_topik+0x4c>

		default:
			return -1;
 80147de:	f04f 33ff 	mov.w	r3, #4294967295
 80147e2:	e000      	b.n	80147e6 <generate_status_topik+0x4e>
			break;
	}

	return 0;
 80147e4:	2300      	movs	r3, #0
}
 80147e6:	4618      	mov	r0, r3
 80147e8:	3708      	adds	r7, #8
 80147ea:	46bd      	mov	sp, r7
 80147ec:	bd80      	pop	{r7, pc}
 80147ee:	bf00      	nop
 80147f0:	080329d4 	.word	0x080329d4
 80147f4:	20000898 	.word	0x20000898
 80147f8:	0803291c 	.word	0x0803291c
 80147fc:	08032a90 	.word	0x08032a90
 8014800:	20000094 	.word	0x20000094
 8014804:	200000a4 	.word	0x200000a4

08014808 <generate_key_value_JSON>:

void generate_key_value_JSON(char * buf, char * key, float value){
 8014808:	b580      	push	{r7, lr}
 801480a:	b086      	sub	sp, #24
 801480c:	af02      	add	r7, sp, #8
 801480e:	60f8      	str	r0, [r7, #12]
 8014810:	60b9      	str	r1, [r7, #8]
 8014812:	ed87 0a01 	vstr	s0, [r7, #4]

	sprintf(buf, key_value_float_JSON_template, key, value);
 8014816:	6878      	ldr	r0, [r7, #4]
 8014818:	f7fb feae 	bl	8010578 <__aeabi_f2d>
 801481c:	4602      	mov	r2, r0
 801481e:	460b      	mov	r3, r1
 8014820:	e9cd 2300 	strd	r2, r3, [sp]
 8014824:	68ba      	ldr	r2, [r7, #8]
 8014826:	4904      	ldr	r1, [pc, #16]	; (8014838 <generate_key_value_JSON+0x30>)
 8014828:	68f8      	ldr	r0, [r7, #12]
 801482a:	f018 fdff 	bl	802d42c <siprintf>
}
 801482e:	bf00      	nop
 8014830:	3710      	adds	r7, #16
 8014832:	46bd      	mov	sp, r7
 8014834:	bd80      	pop	{r7, pc}
 8014836:	bf00      	nop
 8014838:	08032a9c 	.word	0x08032a9c

0801483c <InitHLW8032>:
uint32_t	PFData = 0;
uint32_t	PulsCountFor1kWh;
uint16_t 	PF_reg, PF_reg_old;
uint32_t	test_flag = 0;

void InitHLW8032(uint32_t VolR1, uint32_t VolR2, float CurrentShuntR){
 801483c:	b5b0      	push	{r4, r5, r7, lr}
 801483e:	b084      	sub	sp, #16
 8014840:	af00      	add	r7, sp, #0
 8014842:	60f8      	str	r0, [r7, #12]
 8014844:	60b9      	str	r1, [r7, #8]
 8014846:	ed87 0a01 	vstr	s0, [r7, #4]

	//VolR1 - Resistanse on OM for first resistor
	//VolR2 - Resistanse on OM for second resistor
	//ShuntR - Resistanse in OM for current shunt resistor

	VF = VolR1 / (VolR2 * 1000.0);
 801484a:	68f8      	ldr	r0, [r7, #12]
 801484c:	f7fb fe72 	bl	8010534 <__aeabi_ui2d>
 8014850:	4604      	mov	r4, r0
 8014852:	460d      	mov	r5, r1
 8014854:	68b8      	ldr	r0, [r7, #8]
 8014856:	f7fb fe6d 	bl	8010534 <__aeabi_ui2d>
 801485a:	f04f 0200 	mov.w	r2, #0
 801485e:	4b17      	ldr	r3, [pc, #92]	; (80148bc <InitHLW8032+0x80>)
 8014860:	f7fb fee2 	bl	8010628 <__aeabi_dmul>
 8014864:	4602      	mov	r2, r0
 8014866:	460b      	mov	r3, r1
 8014868:	4620      	mov	r0, r4
 801486a:	4629      	mov	r1, r5
 801486c:	f7fc f806 	bl	801087c <__aeabi_ddiv>
 8014870:	4602      	mov	r2, r0
 8014872:	460b      	mov	r3, r1
 8014874:	4610      	mov	r0, r2
 8014876:	4619      	mov	r1, r3
 8014878:	f7fc f9ce 	bl	8010c18 <__aeabi_d2f>
 801487c:	4603      	mov	r3, r0
 801487e:	4a10      	ldr	r2, [pc, #64]	; (80148c0 <InitHLW8032+0x84>)
 8014880:	6013      	str	r3, [r2, #0]
	CF = 1.0 / (CurrentShuntR * 1000.0);
 8014882:	6878      	ldr	r0, [r7, #4]
 8014884:	f7fb fe78 	bl	8010578 <__aeabi_f2d>
 8014888:	f04f 0200 	mov.w	r2, #0
 801488c:	4b0b      	ldr	r3, [pc, #44]	; (80148bc <InitHLW8032+0x80>)
 801488e:	f7fb fecb 	bl	8010628 <__aeabi_dmul>
 8014892:	4602      	mov	r2, r0
 8014894:	460b      	mov	r3, r1
 8014896:	f04f 0000 	mov.w	r0, #0
 801489a:	490a      	ldr	r1, [pc, #40]	; (80148c4 <InitHLW8032+0x88>)
 801489c:	f7fb ffee 	bl	801087c <__aeabi_ddiv>
 80148a0:	4602      	mov	r2, r0
 80148a2:	460b      	mov	r3, r1
 80148a4:	4610      	mov	r0, r2
 80148a6:	4619      	mov	r1, r3
 80148a8:	f7fc f9b6 	bl	8010c18 <__aeabi_d2f>
 80148ac:	4603      	mov	r3, r0
 80148ae:	4a06      	ldr	r2, [pc, #24]	; (80148c8 <InitHLW8032+0x8c>)
 80148b0:	6013      	str	r3, [r2, #0]
}
 80148b2:	bf00      	nop
 80148b4:	3710      	adds	r7, #16
 80148b6:	46bd      	mov	sp, r7
 80148b8:	bdb0      	pop	{r4, r5, r7, pc}
 80148ba:	bf00      	nop
 80148bc:	408f4000 	.word	0x408f4000
 80148c0:	200000b4 	.word	0x200000b4
 80148c4:	3ff00000 	.word	0x3ff00000
 80148c8:	200000b8 	.word	0x200000b8

080148cc <Checksum>:

	VF = Data;

}

uint8_t Checksum(char * string){
 80148cc:	b480      	push	{r7}
 80148ce:	b085      	sub	sp, #20
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	6078      	str	r0, [r7, #4]
	uint8_t i, tmp;
	char byte;

	byte = 0;
 80148d4:	2300      	movs	r3, #0
 80148d6:	73bb      	strb	r3, [r7, #14]
	for ( i = 2; i <= 22; i++){
 80148d8:	2302      	movs	r3, #2
 80148da:	73fb      	strb	r3, [r7, #15]
 80148dc:	e00e      	b.n	80148fc <Checksum+0x30>
		tmp = string[i];
 80148de:	7bfb      	ldrb	r3, [r7, #15]
 80148e0:	687a      	ldr	r2, [r7, #4]
 80148e2:	4413      	add	r3, r2
 80148e4:	781b      	ldrb	r3, [r3, #0]
 80148e6:	737b      	strb	r3, [r7, #13]
		byte = byte + string[i];
 80148e8:	7bfb      	ldrb	r3, [r7, #15]
 80148ea:	687a      	ldr	r2, [r7, #4]
 80148ec:	4413      	add	r3, r2
 80148ee:	781a      	ldrb	r2, [r3, #0]
 80148f0:	7bbb      	ldrb	r3, [r7, #14]
 80148f2:	4413      	add	r3, r2
 80148f4:	73bb      	strb	r3, [r7, #14]
	for ( i = 2; i <= 22; i++){
 80148f6:	7bfb      	ldrb	r3, [r7, #15]
 80148f8:	3301      	adds	r3, #1
 80148fa:	73fb      	strb	r3, [r7, #15]
 80148fc:	7bfb      	ldrb	r3, [r7, #15]
 80148fe:	2b16      	cmp	r3, #22
 8014900:	d9ed      	bls.n	80148de <Checksum+0x12>
	}
	if (byte == string[23])
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	3317      	adds	r3, #23
 8014906:	781b      	ldrb	r3, [r3, #0]
 8014908:	7bba      	ldrb	r2, [r7, #14]
 801490a:	429a      	cmp	r2, r3
 801490c:	d101      	bne.n	8014912 <Checksum+0x46>
	{
		return 1;
 801490e:	2301      	movs	r3, #1
 8014910:	e000      	b.n	8014914 <Checksum+0x48>
	}
	return 0;
 8014912:	2300      	movs	r3, #0
}
 8014914:	4618      	mov	r0, r3
 8014916:	3714      	adds	r7, #20
 8014918:	46bd      	mov	sp, r7
 801491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491e:	4770      	bx	lr

08014920 <RecvRawString>:
//byte 21(1 byte) string[20] - Indication of power, voltage, current state
//byte 22		  string[21]
//byte 23(2 byte) string[22] - PF pulse numbers, used in conjunction with state register, not saved after power-fail
//byte 24(1 byte) string[23] - Data check sum, used to verify whether data package is complete in communication

int RecvRawString(const unsigned char * string){
 8014920:	b580      	push	{r7, lr}
 8014922:	b082      	sub	sp, #8
 8014924:	af00      	add	r7, sp, #0
 8014926:	6078      	str	r0, [r7, #4]

	if (!strcmp(string + 1, 0x5A)){
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	3301      	adds	r3, #1
 801492c:	215a      	movs	r1, #90	; 0x5a
 801492e:	4618      	mov	r0, r3
 8014930:	f7fb fc56 	bl	80101e0 <strcmp>
 8014934:	4603      	mov	r3, r0
 8014936:	2b00      	cmp	r3, #0
 8014938:	d102      	bne.n	8014940 <RecvRawString+0x20>
		return -1; //error code
 801493a:	f04f 33ff 	mov.w	r3, #4294967295
 801493e:	e0a9      	b.n	8014a94 <RecvRawString+0x174>
	}
//	if(string[1] =! 0x5A){
//		return -1; //error code
//	}

	if (Checksum(string) == 0){
 8014940:	6878      	ldr	r0, [r7, #4]
 8014942:	f7ff ffc3 	bl	80148cc <Checksum>
 8014946:	4603      	mov	r3, r0
 8014948:	2b00      	cmp	r3, #0
 801494a:	d102      	bne.n	8014952 <RecvRawString+0x32>
		return -2; //Checksum Error
 801494c:	f06f 0301 	mvn.w	r3, #1
 8014950:	e0a0      	b.n	8014a94 <RecvRawString+0x174>
	}

	VolPar = ((uint32_t)string[2] << 16) + ((uint32_t)string[3] << 8) + string[4];
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	3302      	adds	r3, #2
 8014956:	781b      	ldrb	r3, [r3, #0]
 8014958:	041a      	lsls	r2, r3, #16
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	3303      	adds	r3, #3
 801495e:	781b      	ldrb	r3, [r3, #0]
 8014960:	021b      	lsls	r3, r3, #8
 8014962:	4413      	add	r3, r2
 8014964:	687a      	ldr	r2, [r7, #4]
 8014966:	3204      	adds	r2, #4
 8014968:	7812      	ldrb	r2, [r2, #0]
 801496a:	4413      	add	r3, r2
 801496c:	4a4b      	ldr	r2, [pc, #300]	; (8014a9c <RecvRawString+0x17c>)
 801496e:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20],6) == 1){
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	3314      	adds	r3, #20
 8014974:	781b      	ldrb	r3, [r3, #0]
 8014976:	099b      	lsrs	r3, r3, #6
 8014978:	b2db      	uxtb	r3, r3
 801497a:	f003 0301 	and.w	r3, r3, #1
 801497e:	2b00      	cmp	r3, #0
 8014980:	d00e      	beq.n	80149a0 <RecvRawString+0x80>

		VolData = ((uint32_t)string[5] << 16) + ((uint32_t)string[6] << 8) + string[7];
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	3305      	adds	r3, #5
 8014986:	781b      	ldrb	r3, [r3, #0]
 8014988:	041a      	lsls	r2, r3, #16
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	3306      	adds	r3, #6
 801498e:	781b      	ldrb	r3, [r3, #0]
 8014990:	021b      	lsls	r3, r3, #8
 8014992:	4413      	add	r3, r2
 8014994:	687a      	ldr	r2, [r7, #4]
 8014996:	3207      	adds	r2, #7
 8014998:	7812      	ldrb	r2, [r2, #0]
 801499a:	4413      	add	r3, r2
 801499c:	4a40      	ldr	r2, [pc, #256]	; (8014aa0 <RecvRawString+0x180>)
 801499e:	6013      	str	r3, [r2, #0]

	}

	CurrentPar = ((uint32_t)string[8] << 16) + ((uint32_t)string[9] << 8) + string[10];
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	3308      	adds	r3, #8
 80149a4:	781b      	ldrb	r3, [r3, #0]
 80149a6:	041a      	lsls	r2, r3, #16
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	3309      	adds	r3, #9
 80149ac:	781b      	ldrb	r3, [r3, #0]
 80149ae:	021b      	lsls	r3, r3, #8
 80149b0:	4413      	add	r3, r2
 80149b2:	687a      	ldr	r2, [r7, #4]
 80149b4:	320a      	adds	r2, #10
 80149b6:	7812      	ldrb	r2, [r2, #0]
 80149b8:	4413      	add	r3, r2
 80149ba:	4a3a      	ldr	r2, [pc, #232]	; (8014aa4 <RecvRawString+0x184>)
 80149bc:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20], 5) == 1)
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	3314      	adds	r3, #20
 80149c2:	781b      	ldrb	r3, [r3, #0]
 80149c4:	095b      	lsrs	r3, r3, #5
 80149c6:	b2db      	uxtb	r3, r3
 80149c8:	f003 0301 	and.w	r3, r3, #1
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d00e      	beq.n	80149ee <RecvRawString+0xce>
	{
		CurrentData = ((uint32_t)string[11] << 16) + ((uint32_t)string[12] << 8) + string[13];
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	330b      	adds	r3, #11
 80149d4:	781b      	ldrb	r3, [r3, #0]
 80149d6:	041a      	lsls	r2, r3, #16
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	330c      	adds	r3, #12
 80149dc:	781b      	ldrb	r3, [r3, #0]
 80149de:	021b      	lsls	r3, r3, #8
 80149e0:	4413      	add	r3, r2
 80149e2:	687a      	ldr	r2, [r7, #4]
 80149e4:	320d      	adds	r2, #13
 80149e6:	7812      	ldrb	r2, [r2, #0]
 80149e8:	4413      	add	r3, r2
 80149ea:	4a2f      	ldr	r2, [pc, #188]	; (8014aa8 <RecvRawString+0x188>)
 80149ec:	6013      	str	r3, [r2, #0]

	}

	PowerPar = ((uint32_t)string[14]  << 16) + ((uint32_t)string[15] << 8) + string[16];
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	330e      	adds	r3, #14
 80149f2:	781b      	ldrb	r3, [r3, #0]
 80149f4:	041a      	lsls	r2, r3, #16
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	330f      	adds	r3, #15
 80149fa:	781b      	ldrb	r3, [r3, #0]
 80149fc:	021b      	lsls	r3, r3, #8
 80149fe:	4413      	add	r3, r2
 8014a00:	687a      	ldr	r2, [r7, #4]
 8014a02:	3210      	adds	r2, #16
 8014a04:	7812      	ldrb	r2, [r2, #0]
 8014a06:	4413      	add	r3, r2
 8014a08:	4a28      	ldr	r2, [pc, #160]	; (8014aac <RecvRawString+0x18c>)
 8014a0a:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20], 4) == 1)
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	3314      	adds	r3, #20
 8014a10:	781b      	ldrb	r3, [r3, #0]
 8014a12:	091b      	lsrs	r3, r3, #4
 8014a14:	b2db      	uxtb	r3, r3
 8014a16:	f003 0301 	and.w	r3, r3, #1
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d00e      	beq.n	8014a3c <RecvRawString+0x11c>
	{
		PowerData = ((uint32_t)string[17]  << 16) + ((uint32_t)string[18] << 8) + string[19];
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	3311      	adds	r3, #17
 8014a22:	781b      	ldrb	r3, [r3, #0]
 8014a24:	041a      	lsls	r2, r3, #16
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	3312      	adds	r3, #18
 8014a2a:	781b      	ldrb	r3, [r3, #0]
 8014a2c:	021b      	lsls	r3, r3, #8
 8014a2e:	4413      	add	r3, r2
 8014a30:	687a      	ldr	r2, [r7, #4]
 8014a32:	3213      	adds	r2, #19
 8014a34:	7812      	ldrb	r2, [r2, #0]
 8014a36:	4413      	add	r3, r2
 8014a38:	4a1d      	ldr	r2, [pc, #116]	; (8014ab0 <RecvRawString+0x190>)
 8014a3a:	6013      	str	r3, [r2, #0]

	}

	PF_reg = ((uint32_t)string[21] <<8) + string[22];
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	3315      	adds	r3, #21
 8014a40:	781b      	ldrb	r3, [r3, #0]
 8014a42:	b29b      	uxth	r3, r3
 8014a44:	021b      	lsls	r3, r3, #8
 8014a46:	b29a      	uxth	r2, r3
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	3316      	adds	r3, #22
 8014a4c:	781b      	ldrb	r3, [r3, #0]
 8014a4e:	b29b      	uxth	r3, r3
 8014a50:	4413      	add	r3, r2
 8014a52:	b29a      	uxth	r2, r3
 8014a54:	4b17      	ldr	r3, [pc, #92]	; (8014ab4 <RecvRawString+0x194>)
 8014a56:	801a      	strh	r2, [r3, #0]

	if(bitRead(string[20], 7) == 1)
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	3314      	adds	r3, #20
 8014a5c:	781b      	ldrb	r3, [r3, #0]
 8014a5e:	09db      	lsrs	r3, r3, #7
 8014a60:	b2db      	uxtb	r3, r3
 8014a62:	f003 0301 	and.w	r3, r3, #1
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d004      	beq.n	8014a74 <RecvRawString+0x154>
	{
		PFData++;
 8014a6a:	4b13      	ldr	r3, [pc, #76]	; (8014ab8 <RecvRawString+0x198>)
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	3301      	adds	r3, #1
 8014a70:	4a11      	ldr	r2, [pc, #68]	; (8014ab8 <RecvRawString+0x198>)
 8014a72:	6013      	str	r3, [r2, #0]
	}

	//TODO Когда переполняется регистр, выставляется флаг и обнудяется регистр, проверить, можем ли мы ловить этот флаг еще и не совпадением старого и нового значения регистров.
	if(PF_reg_old > PF_reg){
 8014a74:	4b11      	ldr	r3, [pc, #68]	; (8014abc <RecvRawString+0x19c>)
 8014a76:	881a      	ldrh	r2, [r3, #0]
 8014a78:	4b0e      	ldr	r3, [pc, #56]	; (8014ab4 <RecvRawString+0x194>)
 8014a7a:	881b      	ldrh	r3, [r3, #0]
 8014a7c:	429a      	cmp	r2, r3
 8014a7e:	d904      	bls.n	8014a8a <RecvRawString+0x16a>
		test_flag++;
 8014a80:	4b0f      	ldr	r3, [pc, #60]	; (8014ac0 <RecvRawString+0x1a0>)
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	3301      	adds	r3, #1
 8014a86:	4a0e      	ldr	r2, [pc, #56]	; (8014ac0 <RecvRawString+0x1a0>)
 8014a88:	6013      	str	r3, [r2, #0]
	}

	PF_reg_old = PF_reg;
 8014a8a:	4b0a      	ldr	r3, [pc, #40]	; (8014ab4 <RecvRawString+0x194>)
 8014a8c:	881a      	ldrh	r2, [r3, #0]
 8014a8e:	4b0b      	ldr	r3, [pc, #44]	; (8014abc <RecvRawString+0x19c>)
 8014a90:	801a      	strh	r2, [r3, #0]

	return 0;
 8014a92:	2300      	movs	r3, #0
}
 8014a94:	4618      	mov	r0, r3
 8014a96:	3708      	adds	r7, #8
 8014a98:	46bd      	mov	sp, r7
 8014a9a:	bd80      	pop	{r7, pc}
 8014a9c:	200008bc 	.word	0x200008bc
 8014aa0:	200008c0 	.word	0x200008c0
 8014aa4:	200008cc 	.word	0x200008cc
 8014aa8:	200008d0 	.word	0x200008d0
 8014aac:	200008c4 	.word	0x200008c4
 8014ab0:	200008c8 	.word	0x200008c8
 8014ab4:	200008d8 	.word	0x200008d8
 8014ab8:	200008d4 	.word	0x200008d4
 8014abc:	200008da 	.word	0x200008da
 8014ac0:	200008dc 	.word	0x200008dc

08014ac4 <GetVolRaw>:

float GetVolRaw(void){
 8014ac4:	b480      	push	{r7}
 8014ac6:	af00      	add	r7, sp, #0

	if ( VolData == 0){
 8014ac8:	4b0e      	ldr	r3, [pc, #56]	; (8014b04 <GetVolRaw+0x40>)
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d102      	bne.n	8014ad6 <GetVolRaw+0x12>
		return 0;
 8014ad0:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8014b08 <GetVolRaw+0x44>
 8014ad4:	e00d      	b.n	8014af2 <GetVolRaw+0x2e>
	}

	return VolPar / (float)VolData;
 8014ad6:	4b0d      	ldr	r3, [pc, #52]	; (8014b0c <GetVolRaw+0x48>)
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	ee07 3a90 	vmov	s15, r3
 8014ade:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014ae2:	4b08      	ldr	r3, [pc, #32]	; (8014b04 <GetVolRaw+0x40>)
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	ee07 3a90 	vmov	s15, r3
 8014aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014aee:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 8014af2:	eef0 7a66 	vmov.f32	s15, s13
 8014af6:	eeb0 0a67 	vmov.f32	s0, s15
 8014afa:	46bd      	mov	sp, r7
 8014afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b00:	4770      	bx	lr
 8014b02:	bf00      	nop
 8014b04:	200008c0 	.word	0x200008c0
 8014b08:	00000000 	.word	0x00000000
 8014b0c:	200008bc 	.word	0x200008bc

08014b10 <GetVoltage>:

float GetVoltage(void){
 8014b10:	b580      	push	{r7, lr}
 8014b12:	b082      	sub	sp, #8
 8014b14:	af00      	add	r7, sp, #0

	float tmp;
	float RealVolt;

	tmp = GetVolRaw();
 8014b16:	f7ff ffd5 	bl	8014ac4 <GetVolRaw>
 8014b1a:	ed87 0a00 	vstr	s0, [r7]
	RealVolt = tmp * VF;
 8014b1e:	4b0d      	ldr	r3, [pc, #52]	; (8014b54 <GetVoltage+0x44>)
 8014b20:	edd3 7a00 	vldr	s15, [r3]
 8014b24:	ed97 7a00 	vldr	s14, [r7]
 8014b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014b2c:	edc7 7a01 	vstr	s15, [r7, #4]
	if (RealVolt < 0) RealVolt = 0.000000001;
 8014b30:	edd7 7a01 	vldr	s15, [r7, #4]
 8014b34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b3c:	d501      	bpl.n	8014b42 <GetVoltage+0x32>
 8014b3e:	4b06      	ldr	r3, [pc, #24]	; (8014b58 <GetVoltage+0x48>)
 8014b40:	607b      	str	r3, [r7, #4]
	return RealVolt;
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	ee07 3a90 	vmov	s15, r3
}
 8014b48:	eeb0 0a67 	vmov.f32	s0, s15
 8014b4c:	3708      	adds	r7, #8
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	bd80      	pop	{r7, pc}
 8014b52:	bf00      	nop
 8014b54:	200000b4 	.word	0x200000b4
 8014b58:	3089705f 	.word	0x3089705f

08014b5c <GetCurrentRaw>:

float GetCurrentRaw(void){
 8014b5c:	b480      	push	{r7}
 8014b5e:	af00      	add	r7, sp, #0

	if ( CurrentData == 0){
 8014b60:	4b0e      	ldr	r3, [pc, #56]	; (8014b9c <GetCurrentRaw+0x40>)
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d102      	bne.n	8014b6e <GetCurrentRaw+0x12>
		return 0;
 8014b68:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8014ba0 <GetCurrentRaw+0x44>
 8014b6c:	e00d      	b.n	8014b8a <GetCurrentRaw+0x2e>
	}

	return CurrentPar / (float)CurrentData;
 8014b6e:	4b0d      	ldr	r3, [pc, #52]	; (8014ba4 <GetCurrentRaw+0x48>)
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	ee07 3a90 	vmov	s15, r3
 8014b76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014b7a:	4b08      	ldr	r3, [pc, #32]	; (8014b9c <GetCurrentRaw+0x40>)
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	ee07 3a90 	vmov	s15, r3
 8014b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014b86:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 8014b8a:	eef0 7a66 	vmov.f32	s15, s13
 8014b8e:	eeb0 0a67 	vmov.f32	s0, s15
 8014b92:	46bd      	mov	sp, r7
 8014b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b98:	4770      	bx	lr
 8014b9a:	bf00      	nop
 8014b9c:	200008d0 	.word	0x200008d0
 8014ba0:	00000000 	.word	0x00000000
 8014ba4:	200008cc 	.word	0x200008cc

08014ba8 <GetCurrent>:

float GetCurrent(void){
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b082      	sub	sp, #8
 8014bac:	af00      	add	r7, sp, #0

	float tmp;
	float RaelCurrent;

	tmp = GetCurrentRaw();
 8014bae:	f7ff ffd5 	bl	8014b5c <GetCurrentRaw>
 8014bb2:	ed87 0a00 	vstr	s0, [r7]
	RaelCurrent = tmp * CF;
 8014bb6:	4b0d      	ldr	r3, [pc, #52]	; (8014bec <GetCurrent+0x44>)
 8014bb8:	edd3 7a00 	vldr	s15, [r3]
 8014bbc:	ed97 7a00 	vldr	s14, [r7]
 8014bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014bc4:	edc7 7a01 	vstr	s15, [r7, #4]

	if(RaelCurrent < 0)RaelCurrent = 0.000000001;
 8014bc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8014bcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bd4:	d501      	bpl.n	8014bda <GetCurrent+0x32>
 8014bd6:	4b06      	ldr	r3, [pc, #24]	; (8014bf0 <GetCurrent+0x48>)
 8014bd8:	607b      	str	r3, [r7, #4]

	return RaelCurrent;
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	ee07 3a90 	vmov	s15, r3
}
 8014be0:	eeb0 0a67 	vmov.f32	s0, s15
 8014be4:	3708      	adds	r7, #8
 8014be6:	46bd      	mov	sp, r7
 8014be8:	bd80      	pop	{r7, pc}
 8014bea:	bf00      	nop
 8014bec:	200000b8 	.word	0x200000b8
 8014bf0:	3089705f 	.word	0x3089705f

08014bf4 <GetActivePower>:

float GetActivePower(void){
 8014bf4:	b480      	push	{r7}
 8014bf6:	b083      	sub	sp, #12
 8014bf8:	af00      	add	r7, sp, #0
	float tmp;

	if (PowerData == 0){
 8014bfa:	4b18      	ldr	r3, [pc, #96]	; (8014c5c <GetActivePower+0x68>)
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d102      	bne.n	8014c08 <GetActivePower+0x14>
		return 0;
 8014c02:	f04f 0300 	mov.w	r3, #0
 8014c06:	e01f      	b.n	8014c48 <GetActivePower+0x54>
	}
	tmp = (float)(PowerPar / PowerData) * VF * CF;
 8014c08:	4b15      	ldr	r3, [pc, #84]	; (8014c60 <GetActivePower+0x6c>)
 8014c0a:	681a      	ldr	r2, [r3, #0]
 8014c0c:	4b13      	ldr	r3, [pc, #76]	; (8014c5c <GetActivePower+0x68>)
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8014c14:	ee07 3a90 	vmov	s15, r3
 8014c18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014c1c:	4b11      	ldr	r3, [pc, #68]	; (8014c64 <GetActivePower+0x70>)
 8014c1e:	edd3 7a00 	vldr	s15, [r3]
 8014c22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014c26:	4b10      	ldr	r3, [pc, #64]	; (8014c68 <GetActivePower+0x74>)
 8014c28:	edd3 7a00 	vldr	s15, [r3]
 8014c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c30:	edc7 7a01 	vstr	s15, [r7, #4]

	if (tmp < 0) tmp = 0.000000001;
 8014c34:	edd7 7a01 	vldr	s15, [r7, #4]
 8014c38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c40:	d501      	bpl.n	8014c46 <GetActivePower+0x52>
 8014c42:	4b0a      	ldr	r3, [pc, #40]	; (8014c6c <GetActivePower+0x78>)
 8014c44:	607b      	str	r3, [r7, #4]

	return tmp;
 8014c46:	687b      	ldr	r3, [r7, #4]
}
 8014c48:	ee07 3a90 	vmov	s15, r3
 8014c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8014c50:	370c      	adds	r7, #12
 8014c52:	46bd      	mov	sp, r7
 8014c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c58:	4770      	bx	lr
 8014c5a:	bf00      	nop
 8014c5c:	200008c8 	.word	0x200008c8
 8014c60:	200008c4 	.word	0x200008c4
 8014c64:	200000b4 	.word	0x200000b4
 8014c68:	200000b8 	.word	0x200000b8
 8014c6c:	3089705f 	.word	0x3089705f

08014c70 <GetApparentPower>:

float GetApparentPower(void){
 8014c70:	b580      	push	{r7, lr}
 8014c72:	b084      	sub	sp, #16
 8014c74:	af00      	add	r7, sp, #0

	float voltage;
	float current;
	float ApparentPower;

	voltage = GetVoltage();
 8014c76:	f7ff ff4b 	bl	8014b10 <GetVoltage>
 8014c7a:	ed87 0a02 	vstr	s0, [r7, #8]
	current = GetCurrent();
 8014c7e:	f7ff ff93 	bl	8014ba8 <GetCurrent>
 8014c82:	ed87 0a01 	vstr	s0, [r7, #4]
	ApparentPower = voltage * current;
 8014c86:	ed97 7a02 	vldr	s14, [r7, #8]
 8014c8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8014c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c92:	edc7 7a03 	vstr	s15, [r7, #12]

	if (ApparentPower < DETECT_POWER_TRASHOLD_W )ApparentPower = 0.000000001;
 8014c96:	edd7 7a03 	vldr	s15, [r7, #12]
 8014c9a:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8014c9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ca6:	d501      	bpl.n	8014cac <GetApparentPower+0x3c>
 8014ca8:	4b04      	ldr	r3, [pc, #16]	; (8014cbc <GetApparentPower+0x4c>)
 8014caa:	60fb      	str	r3, [r7, #12]

	return ApparentPower;
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	ee07 3a90 	vmov	s15, r3
}
 8014cb2:	eeb0 0a67 	vmov.f32	s0, s15
 8014cb6:	3710      	adds	r7, #16
 8014cb8:	46bd      	mov	sp, r7
 8014cba:	bd80      	pop	{r7, pc}
 8014cbc:	3089705f 	.word	0x3089705f

08014cc0 <PowerFactor>:

float PowerFactor(void){
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b084      	sub	sp, #16
 8014cc4:	af00      	add	r7, sp, #0

	float ActivePower;
	float ApparentPower;
	float PowerFactor;

	ActivePower 	= GetActivePower();
 8014cc6:	f7ff ff95 	bl	8014bf4 <GetActivePower>
 8014cca:	ed87 0a03 	vstr	s0, [r7, #12]
	ApparentPower	= GetApparentPower();
 8014cce:	f7ff ffcf 	bl	8014c70 <GetApparentPower>
 8014cd2:	ed87 0a02 	vstr	s0, [r7, #8]
	if (ApparentPower 	== 0) return 1;
 8014cd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8014cda:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ce2:	d102      	bne.n	8014cea <PowerFactor+0x2a>
 8014ce4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8014ce8:	e01e      	b.n	8014d28 <PowerFactor+0x68>
	if (ActivePower 	== 0) return 1;
 8014cea:	edd7 7a03 	vldr	s15, [r7, #12]
 8014cee:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cf6:	d102      	bne.n	8014cfe <PowerFactor+0x3e>
 8014cf8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8014cfc:	e014      	b.n	8014d28 <PowerFactor+0x68>
	if (ActivePower > ApparentPower) return 1.000000000000;
 8014cfe:	ed97 7a03 	vldr	s14, [r7, #12]
 8014d02:	edd7 7a02 	vldr	s15, [r7, #8]
 8014d06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d0e:	dd02      	ble.n	8014d16 <PowerFactor+0x56>
 8014d10:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8014d14:	e008      	b.n	8014d28 <PowerFactor+0x68>
	PowerFactor		= ActivePower / ApparentPower;
 8014d16:	edd7 6a03 	vldr	s13, [r7, #12]
 8014d1a:	ed97 7a02 	vldr	s14, [r7, #8]
 8014d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014d22:	edc7 7a01 	vstr	s15, [r7, #4]

	return PowerFactor;
 8014d26:	687b      	ldr	r3, [r7, #4]
}
 8014d28:	ee07 3a90 	vmov	s15, r3
 8014d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8014d30:	3710      	adds	r7, #16
 8014d32:	46bd      	mov	sp, r7
 8014d34:	bd80      	pop	{r7, pc}
	...

08014d38 <GetTestPulse>:

uint32_t GetPulsCnF1kWh(){
}

uint32_t GetTestPulse(){
 8014d38:	b480      	push	{r7}
 8014d3a:	af00      	add	r7, sp, #0
	return test_flag;
 8014d3c:	4b03      	ldr	r3, [pc, #12]	; (8014d4c <GetTestPulse+0x14>)
 8014d3e:	681b      	ldr	r3, [r3, #0]
}
 8014d40:	4618      	mov	r0, r3
 8014d42:	46bd      	mov	sp, r7
 8014d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d48:	4770      	bx	lr
 8014d4a:	bf00      	nop
 8014d4c:	200008dc 	.word	0x200008dc

08014d50 <GetCountedPulse>:

uint32_t GetCountedPulse(){
 8014d50:	b480      	push	{r7}
 8014d52:	af00      	add	r7, sp, #0
	return PFData;
 8014d54:	4b03      	ldr	r3, [pc, #12]	; (8014d64 <GetCountedPulse+0x14>)
 8014d56:	681b      	ldr	r3, [r3, #0]
}
 8014d58:	4618      	mov	r0, r3
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d60:	4770      	bx	lr
 8014d62:	bf00      	nop
 8014d64:	200008d4 	.word	0x200008d4

08014d68 <GetPFReg>:

uint32_t GetPFReg(){
 8014d68:	b480      	push	{r7}
 8014d6a:	af00      	add	r7, sp, #0
	return PF_reg;
 8014d6c:	4b03      	ldr	r3, [pc, #12]	; (8014d7c <GetPFReg+0x14>)
 8014d6e:	881b      	ldrh	r3, [r3, #0]
}
 8014d70:	4618      	mov	r0, r3
 8014d72:	46bd      	mov	sp, r7
 8014d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d78:	4770      	bx	lr
 8014d7a:	bf00      	nop
 8014d7c:	200008d8 	.word	0x200008d8

08014d80 <GetKWh>:

float GetKWh(void){
 8014d80:	b5b0      	push	{r4, r5, r7, lr}
 8014d82:	b084      	sub	sp, #16
 8014d84:	af00      	add	r7, sp, #0
	float pulseCountFor1kWh;
	float kWh;
	int PFcount;


	apparentPower		= GetApparentPower();
 8014d86:	f7ff ff73 	bl	8014c70 <GetApparentPower>
 8014d8a:	ed87 0a02 	vstr	s0, [r7, #8]
	pulseCountFor1kWh	= (1.0/PowerPar) * (1.0/(VF * CF)) * 1000000000.0 * 3600.0;
 8014d8e:	4b38      	ldr	r3, [pc, #224]	; (8014e70 <GetKWh+0xf0>)
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	4618      	mov	r0, r3
 8014d94:	f7fb fbce 	bl	8010534 <__aeabi_ui2d>
 8014d98:	4602      	mov	r2, r0
 8014d9a:	460b      	mov	r3, r1
 8014d9c:	f04f 0000 	mov.w	r0, #0
 8014da0:	4934      	ldr	r1, [pc, #208]	; (8014e74 <GetKWh+0xf4>)
 8014da2:	f7fb fd6b 	bl	801087c <__aeabi_ddiv>
 8014da6:	4602      	mov	r2, r0
 8014da8:	460b      	mov	r3, r1
 8014daa:	4614      	mov	r4, r2
 8014dac:	461d      	mov	r5, r3
 8014dae:	4b32      	ldr	r3, [pc, #200]	; (8014e78 <GetKWh+0xf8>)
 8014db0:	ed93 7a00 	vldr	s14, [r3]
 8014db4:	4b31      	ldr	r3, [pc, #196]	; (8014e7c <GetKWh+0xfc>)
 8014db6:	edd3 7a00 	vldr	s15, [r3]
 8014dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014dbe:	ee17 0a90 	vmov	r0, s15
 8014dc2:	f7fb fbd9 	bl	8010578 <__aeabi_f2d>
 8014dc6:	4602      	mov	r2, r0
 8014dc8:	460b      	mov	r3, r1
 8014dca:	f04f 0000 	mov.w	r0, #0
 8014dce:	4929      	ldr	r1, [pc, #164]	; (8014e74 <GetKWh+0xf4>)
 8014dd0:	f7fb fd54 	bl	801087c <__aeabi_ddiv>
 8014dd4:	4602      	mov	r2, r0
 8014dd6:	460b      	mov	r3, r1
 8014dd8:	4620      	mov	r0, r4
 8014dda:	4629      	mov	r1, r5
 8014ddc:	f7fb fc24 	bl	8010628 <__aeabi_dmul>
 8014de0:	4602      	mov	r2, r0
 8014de2:	460b      	mov	r3, r1
 8014de4:	4610      	mov	r0, r2
 8014de6:	4619      	mov	r1, r3
 8014de8:	a31d      	add	r3, pc, #116	; (adr r3, 8014e60 <GetKWh+0xe0>)
 8014dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dee:	f7fb fc1b 	bl	8010628 <__aeabi_dmul>
 8014df2:	4602      	mov	r2, r0
 8014df4:	460b      	mov	r3, r1
 8014df6:	4610      	mov	r0, r2
 8014df8:	4619      	mov	r1, r3
 8014dfa:	a31b      	add	r3, pc, #108	; (adr r3, 8014e68 <GetKWh+0xe8>)
 8014dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e00:	f7fb fc12 	bl	8010628 <__aeabi_dmul>
 8014e04:	4602      	mov	r2, r0
 8014e06:	460b      	mov	r3, r1
 8014e08:	4610      	mov	r0, r2
 8014e0a:	4619      	mov	r1, r3
 8014e0c:	f7fb ff04 	bl	8010c18 <__aeabi_d2f>
 8014e10:	4603      	mov	r3, r0
 8014e12:	607b      	str	r3, [r7, #4]
	PFcount				= GetTestPulse() * 65536 + GetPFReg();
 8014e14:	f7ff ff90 	bl	8014d38 <GetTestPulse>
 8014e18:	4603      	mov	r3, r0
 8014e1a:	041c      	lsls	r4, r3, #16
 8014e1c:	f7ff ffa4 	bl	8014d68 <GetPFReg>
 8014e20:	4603      	mov	r3, r0
 8014e22:	4423      	add	r3, r4
 8014e24:	603b      	str	r3, [r7, #0]
	//kWh					= (PFData * PF_reg) / (float)pulseCountFor1kWh;
	kWh					= PFcount / (float)pulseCountFor1kWh;
 8014e26:	683b      	ldr	r3, [r7, #0]
 8014e28:	ee07 3a90 	vmov	s15, r3
 8014e2c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014e30:	ed97 7a01 	vldr	s14, [r7, #4]
 8014e34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014e38:	edc7 7a03 	vstr	s15, [r7, #12]
	//     // energy = total_cf_pulses/((1/power_reg)*(1/(VF*CF))*1000000000*3600);
    //energy = total_cf_pulses/((1/(float)power_coefficient)*(1/1.88)*3600000000000);

	if (kWh < 0) kWh = 0.000000001;
 8014e3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8014e40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e48:	d501      	bpl.n	8014e4e <GetKWh+0xce>
 8014e4a:	4b0d      	ldr	r3, [pc, #52]	; (8014e80 <GetKWh+0x100>)
 8014e4c:	60fb      	str	r3, [r7, #12]

	return kWh;
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	ee07 3a90 	vmov	s15, r3
}
 8014e54:	eeb0 0a67 	vmov.f32	s0, s15
 8014e58:	3710      	adds	r7, #16
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	bdb0      	pop	{r4, r5, r7, pc}
 8014e5e:	bf00      	nop
 8014e60:	00000000 	.word	0x00000000
 8014e64:	41cdcd65 	.word	0x41cdcd65
 8014e68:	00000000 	.word	0x00000000
 8014e6c:	40ac2000 	.word	0x40ac2000
 8014e70:	200008c4 	.word	0x200008c4
 8014e74:	3ff00000 	.word	0x3ff00000
 8014e78:	200000b4 	.word	0x200000b4
 8014e7c:	200000b8 	.word	0x200000b8
 8014e80:	3089705f 	.word	0x3089705f

08014e84 <function_prototype>:
uint8_t sFLASH_ReadByte(void);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 8014e84:	b480      	push	{r7}
 8014e86:	af00      	add	r7, sp, #0
 8014e88:	bf00      	nop
 8014e8a:	46bd      	mov	sp, r7
 8014e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e90:	4770      	bx	lr
	...

08014e94 <SPI_flash_reg_cb>:

//void (*flash_conf.select_chip)() = &function_prototype;

/* Private functions ---------------------------------------------------------*/
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), uint8_t (*receive_byte)(void), void (*send_byte)(uint8_t)){
 8014e94:	b480      	push	{r7}
 8014e96:	b085      	sub	sp, #20
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	60f8      	str	r0, [r7, #12]
 8014e9c:	60b9      	str	r1, [r7, #8]
 8014e9e:	607a      	str	r2, [r7, #4]
 8014ea0:	603b      	str	r3, [r7, #0]

	if (chip_select){
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d003      	beq.n	8014eb0 <SPI_flash_reg_cb+0x1c>
		flash_conf.select_chip		= chip_select;
 8014ea8:	4a0e      	ldr	r2, [pc, #56]	; (8014ee4 <SPI_flash_reg_cb+0x50>)
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	60d3      	str	r3, [r2, #12]
 8014eae:	e002      	b.n	8014eb6 <SPI_flash_reg_cb+0x22>
	}else{
		flash_conf.select_chip		= function_prototype;
 8014eb0:	4b0c      	ldr	r3, [pc, #48]	; (8014ee4 <SPI_flash_reg_cb+0x50>)
 8014eb2:	4a0d      	ldr	r2, [pc, #52]	; (8014ee8 <SPI_flash_reg_cb+0x54>)
 8014eb4:	60da      	str	r2, [r3, #12]
	}
	if (chip_deselect){
 8014eb6:	68bb      	ldr	r3, [r7, #8]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d003      	beq.n	8014ec4 <SPI_flash_reg_cb+0x30>
		flash_conf.deselect_chip	= chip_deselect;
 8014ebc:	4a09      	ldr	r2, [pc, #36]	; (8014ee4 <SPI_flash_reg_cb+0x50>)
 8014ebe:	68bb      	ldr	r3, [r7, #8]
 8014ec0:	6113      	str	r3, [r2, #16]
 8014ec2:	e002      	b.n	8014eca <SPI_flash_reg_cb+0x36>
	}else{
		flash_conf.deselect_chip	= function_prototype;
 8014ec4:	4b07      	ldr	r3, [pc, #28]	; (8014ee4 <SPI_flash_reg_cb+0x50>)
 8014ec6:	4a08      	ldr	r2, [pc, #32]	; (8014ee8 <SPI_flash_reg_cb+0x54>)
 8014ec8:	611a      	str	r2, [r3, #16]
	}

	flash_conf.receive_byte		= receive_byte;
 8014eca:	4a06      	ldr	r2, [pc, #24]	; (8014ee4 <SPI_flash_reg_cb+0x50>)
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	6053      	str	r3, [r2, #4]
	flash_conf.send_byte		= send_byte;
 8014ed0:	4a04      	ldr	r2, [pc, #16]	; (8014ee4 <SPI_flash_reg_cb+0x50>)
 8014ed2:	683b      	ldr	r3, [r7, #0]
 8014ed4:	6093      	str	r3, [r2, #8]

}
 8014ed6:	bf00      	nop
 8014ed8:	3714      	adds	r7, #20
 8014eda:	46bd      	mov	sp, r7
 8014edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee0:	4770      	bx	lr
 8014ee2:	bf00      	nop
 8014ee4:	200008e0 	.word	0x200008e0
 8014ee8:	08014e85 	.word	0x08014e85

08014eec <sFLASH_Reset>:
//	flash_conf.deselect_chip = FlashChipDeselect;
//	flash_conf.receive_byte = SPI_ReceiveByte;
//	flash_conf.send_byte = SPI_SendByte;
}

void sFLASH_Reset(void){
 8014eec:	b580      	push	{r7, lr}
 8014eee:	af00      	add	r7, sp, #0
//    cs_set();
//    tx_buf[0] = W25_ENABLE_RESET;
//    tx_buf[1] = W25_RESET;
//    SPI1_Send(tx_buf, 2);
//    cs_reset();
    sFLASH_CS_LOW();
 8014ef0:	f000 f89c 	bl	801502c <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 8014ef4:	2066      	movs	r0, #102	; 0x66
 8014ef6:	f000 fa1f 	bl	8015338 <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 8014efa:	2099      	movs	r0, #153	; 0x99
 8014efc:	f000 fa1c 	bl	8015338 <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 8014f00:	f000 f89e 	bl	8015040 <sFLASH_CS_HIGH>
}
 8014f04:	bf00      	nop
 8014f06:	bd80      	pop	{r7, pc}

08014f08 <sFLASH_GetInfo>:
    HAL_Delay(100);
    unsigned int id = W25_Read_ID();

}

struct SPI_flash_info sFLASH_GetInfo(void){
 8014f08:	b590      	push	{r4, r7, lr}
 8014f0a:	b085      	sub	sp, #20
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
	uint32_t flash_id;

//	HAL_Delay(100);
	sFLASH_Reset();
 8014f10:	f7ff ffec 	bl	8014eec <sFLASH_Reset>
//	HAL_Delay(100);
//	HAL_Delay(100);

	flash_id = sFLASH_ReadID();
 8014f14:	f000 f9d2 	bl	80152bc <sFLASH_ReadID>
 8014f18:	60f8      	str	r0, [r7, #12]

	switch (flash_id) {
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	4a3e      	ldr	r2, [pc, #248]	; (8015018 <sFLASH_GetInfo+0x110>)
 8014f1e:	4293      	cmp	r3, r2
 8014f20:	d03f      	beq.n	8014fa2 <sFLASH_GetInfo+0x9a>
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	4a3c      	ldr	r2, [pc, #240]	; (8015018 <sFLASH_GetInfo+0x110>)
 8014f26:	4293      	cmp	r3, r2
 8014f28:	d867      	bhi.n	8014ffa <sFLASH_GetInfo+0xf2>
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	4a3b      	ldr	r2, [pc, #236]	; (801501c <sFLASH_GetInfo+0x114>)
 8014f2e:	4293      	cmp	r3, r2
 8014f30:	d021      	beq.n	8014f76 <sFLASH_GetInfo+0x6e>
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	4a39      	ldr	r2, [pc, #228]	; (801501c <sFLASH_GetInfo+0x114>)
 8014f36:	4293      	cmp	r3, r2
 8014f38:	d85f      	bhi.n	8014ffa <sFLASH_GetInfo+0xf2>
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	4a38      	ldr	r2, [pc, #224]	; (8015020 <sFLASH_GetInfo+0x118>)
 8014f3e:	4293      	cmp	r3, r2
 8014f40:	d045      	beq.n	8014fce <sFLASH_GetInfo+0xc6>
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	4a37      	ldr	r2, [pc, #220]	; (8015024 <sFLASH_GetInfo+0x11c>)
 8014f46:	4293      	cmp	r3, r2
 8014f48:	d157      	bne.n	8014ffa <sFLASH_GetInfo+0xf2>
		case sFLASH_W25Q16BV_ID:
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 8014f4a:	4b37      	ldr	r3, [pc, #220]	; (8015028 <sFLASH_GetInfo+0x120>)
 8014f4c:	4a35      	ldr	r2, [pc, #212]	; (8015024 <sFLASH_GetInfo+0x11c>)
 8014f4e:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8014f50:	4b35      	ldr	r3, [pc, #212]	; (8015028 <sFLASH_GetInfo+0x120>)
 8014f52:	2201      	movs	r2, #1
 8014f54:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8014f56:	4b34      	ldr	r3, [pc, #208]	; (8015028 <sFLASH_GetInfo+0x120>)
 8014f58:	2201      	movs	r2, #1
 8014f5a:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8014f5c:	4b32      	ldr	r3, [pc, #200]	; (8015028 <sFLASH_GetInfo+0x120>)
 8014f5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014f62:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8014f64:	4b30      	ldr	r3, [pc, #192]	; (8015028 <sFLASH_GetInfo+0x120>)
 8014f66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014f6a:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 512;
 8014f6c:	4b2e      	ldr	r3, [pc, #184]	; (8015028 <sFLASH_GetInfo+0x120>)
 8014f6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014f72:	819a      	strh	r2, [r3, #12]
			break;
 8014f74:	e045      	b.n	8015002 <sFLASH_GetInfo+0xfa>
		case sFLASH_W25Q32BV_ID:
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 8014f76:	4b2c      	ldr	r3, [pc, #176]	; (8015028 <sFLASH_GetInfo+0x120>)
 8014f78:	4a28      	ldr	r2, [pc, #160]	; (801501c <sFLASH_GetInfo+0x114>)
 8014f7a:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8014f7c:	4b2a      	ldr	r3, [pc, #168]	; (8015028 <sFLASH_GetInfo+0x120>)
 8014f7e:	2201      	movs	r2, #1
 8014f80:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8014f82:	4b29      	ldr	r3, [pc, #164]	; (8015028 <sFLASH_GetInfo+0x120>)
 8014f84:	2201      	movs	r2, #1
 8014f86:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8014f88:	4b27      	ldr	r3, [pc, #156]	; (8015028 <sFLASH_GetInfo+0x120>)
 8014f8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014f8e:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8014f90:	4b25      	ldr	r3, [pc, #148]	; (8015028 <sFLASH_GetInfo+0x120>)
 8014f92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014f96:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 8014f98:	4b23      	ldr	r3, [pc, #140]	; (8015028 <sFLASH_GetInfo+0x120>)
 8014f9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014f9e:	819a      	strh	r2, [r3, #12]
			break;
 8014fa0:	e02f      	b.n	8015002 <sFLASH_GetInfo+0xfa>
		case sFLASH_W25Q64BV_ID:
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 8014fa2:	4b21      	ldr	r3, [pc, #132]	; (8015028 <sFLASH_GetInfo+0x120>)
 8014fa4:	4a1c      	ldr	r2, [pc, #112]	; (8015018 <sFLASH_GetInfo+0x110>)
 8014fa6:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8014fa8:	4b1f      	ldr	r3, [pc, #124]	; (8015028 <sFLASH_GetInfo+0x120>)
 8014faa:	2201      	movs	r2, #1
 8014fac:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8014fae:	4b1e      	ldr	r3, [pc, #120]	; (8015028 <sFLASH_GetInfo+0x120>)
 8014fb0:	2201      	movs	r2, #1
 8014fb2:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8014fb4:	4b1c      	ldr	r3, [pc, #112]	; (8015028 <sFLASH_GetInfo+0x120>)
 8014fb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014fba:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8014fbc:	4b1a      	ldr	r3, [pc, #104]	; (8015028 <sFLASH_GetInfo+0x120>)
 8014fbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014fc2:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 2048;
 8014fc4:	4b18      	ldr	r3, [pc, #96]	; (8015028 <sFLASH_GetInfo+0x120>)
 8014fc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014fca:	819a      	strh	r2, [r3, #12]
			break;
 8014fcc:	e019      	b.n	8015002 <sFLASH_GetInfo+0xfa>
		case sFLASH_MX25L32xxx_ID:
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 8014fce:	4b16      	ldr	r3, [pc, #88]	; (8015028 <sFLASH_GetInfo+0x120>)
 8014fd0:	4a13      	ldr	r2, [pc, #76]	; (8015020 <sFLASH_GetInfo+0x118>)
 8014fd2:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8014fd4:	4b14      	ldr	r3, [pc, #80]	; (8015028 <sFLASH_GetInfo+0x120>)
 8014fd6:	2201      	movs	r2, #1
 8014fd8:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8014fda:	4b13      	ldr	r3, [pc, #76]	; (8015028 <sFLASH_GetInfo+0x120>)
 8014fdc:	2201      	movs	r2, #1
 8014fde:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8014fe0:	4b11      	ldr	r3, [pc, #68]	; (8015028 <sFLASH_GetInfo+0x120>)
 8014fe2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014fe6:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8014fe8:	4b0f      	ldr	r3, [pc, #60]	; (8015028 <sFLASH_GetInfo+0x120>)
 8014fea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014fee:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 8014ff0:	4b0d      	ldr	r3, [pc, #52]	; (8015028 <sFLASH_GetInfo+0x120>)
 8014ff2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014ff6:	819a      	strh	r2, [r3, #12]
			break;
 8014ff8:	e003      	b.n	8015002 <sFLASH_GetInfo+0xfa>

		default:
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 8014ffa:	4b0b      	ldr	r3, [pc, #44]	; (8015028 <sFLASH_GetInfo+0x120>)
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	601a      	str	r2, [r3, #0]
			break;
 8015000:	bf00      	nop
	}

	return flash_info;
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	4a08      	ldr	r2, [pc, #32]	; (8015028 <sFLASH_GetInfo+0x120>)
 8015006:	461c      	mov	r4, r3
 8015008:	4613      	mov	r3, r2
 801500a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801500c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 8015010:	6878      	ldr	r0, [r7, #4]
 8015012:	3714      	adds	r7, #20
 8015014:	46bd      	mov	sp, r7
 8015016:	bd90      	pop	{r4, r7, pc}
 8015018:	00ef4017 	.word	0x00ef4017
 801501c:	00ef4016 	.word	0x00ef4016
 8015020:	00c22016 	.word	0x00c22016
 8015024:	00ef4015 	.word	0x00ef4015
 8015028:	200008f4 	.word	0x200008f4

0801502c <sFLASH_CS_LOW>:

void sFLASH_CS_LOW(void){ //select chip
 801502c:	b580      	push	{r7, lr}
 801502e:	af00      	add	r7, sp, #0

	flash_conf.select_chip();
 8015030:	4b02      	ldr	r3, [pc, #8]	; (801503c <sFLASH_CS_LOW+0x10>)
 8015032:	68db      	ldr	r3, [r3, #12]
 8015034:	4798      	blx	r3

}
 8015036:	bf00      	nop
 8015038:	bd80      	pop	{r7, pc}
 801503a:	bf00      	nop
 801503c:	200008e0 	.word	0x200008e0

08015040 <sFLASH_CS_HIGH>:

void sFLASH_CS_HIGH(void){ //deselect chip
 8015040:	b580      	push	{r7, lr}
 8015042:	af00      	add	r7, sp, #0

	flash_conf.deselect_chip();
 8015044:	4b02      	ldr	r3, [pc, #8]	; (8015050 <sFLASH_CS_HIGH+0x10>)
 8015046:	691b      	ldr	r3, [r3, #16]
 8015048:	4798      	blx	r3
}
 801504a:	bf00      	nop
 801504c:	bd80      	pop	{r7, pc}
 801504e:	bf00      	nop
 8015050:	200008e0 	.word	0x200008e0

08015054 <sFLASH_EraseSector>:
  * @brief  Erases the specified FLASH sector.
  * @param  SectorAddr: address of the sector to erase.
  * @retval None
  */
void sFLASH_EraseSector(uint32_t SectorAddr)
{
 8015054:	b580      	push	{r7, lr}
 8015056:	b082      	sub	sp, #8
 8015058:	af00      	add	r7, sp, #0
 801505a:	6078      	str	r0, [r7, #4]
  /*!< Send write enable instruction */
  sFLASH_WriteEnable();
 801505c:	f000 f97c 	bl	8015358 <sFLASH_WriteEnable>

  /*!< Sector Erase */
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015060:	f7ff ffe4 	bl	801502c <sFLASH_CS_LOW>
  /*!< Send Sector Erase instruction */
  sFLASH_SendByte(sFLASH_CMD_SE);
 8015064:	2020      	movs	r0, #32
 8015066:	f000 f967 	bl	8015338 <sFLASH_SendByte>
  /*!< Send SectorAddr high nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	0c1b      	lsrs	r3, r3, #16
 801506e:	b2db      	uxtb	r3, r3
 8015070:	4618      	mov	r0, r3
 8015072:	f000 f961 	bl	8015338 <sFLASH_SendByte>
  /*!< Send SectorAddr medium nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	0a1b      	lsrs	r3, r3, #8
 801507a:	b2db      	uxtb	r3, r3
 801507c:	4618      	mov	r0, r3
 801507e:	f000 f95b 	bl	8015338 <sFLASH_SendByte>
  /*!< Send SectorAddr low nibble address byte */
  sFLASH_SendByte(SectorAddr & 0xFF);
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	b2db      	uxtb	r3, r3
 8015086:	4618      	mov	r0, r3
 8015088:	f000 f956 	bl	8015338 <sFLASH_SendByte>
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 801508c:	f7ff ffd8 	bl	8015040 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8015090:	f000 f96d 	bl	801536e <sFLASH_WaitForWriteEnd>
}
 8015094:	bf00      	nop
 8015096:	3708      	adds	r7, #8
 8015098:	46bd      	mov	sp, r7
 801509a:	bd80      	pop	{r7, pc}

0801509c <sFLASH_WritePage>:
  * @param  NumByteToWrite: number of bytes to write to the FLASH, must be equal
  *         or less than "sFLASH_PAGESIZE" value.
  * @retval None
  */
void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 801509c:	b580      	push	{r7, lr}
 801509e:	b084      	sub	sp, #16
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	60f8      	str	r0, [r7, #12]
 80150a4:	60b9      	str	r1, [r7, #8]
 80150a6:	4613      	mov	r3, r2
 80150a8:	80fb      	strh	r3, [r7, #6]
  /*!< Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 80150aa:	f000 f955 	bl	8015358 <sFLASH_WriteEnable>

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80150ae:	f7ff ffbd 	bl	801502c <sFLASH_CS_LOW>
  /*!< Send "Write to Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 80150b2:	2002      	movs	r0, #2
 80150b4:	f000 f940 	bl	8015338 <sFLASH_SendByte>
  /*!< Send WriteAddr high nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 80150b8:	68bb      	ldr	r3, [r7, #8]
 80150ba:	0c1b      	lsrs	r3, r3, #16
 80150bc:	b2db      	uxtb	r3, r3
 80150be:	4618      	mov	r0, r3
 80150c0:	f000 f93a 	bl	8015338 <sFLASH_SendByte>
  /*!< Send WriteAddr medium nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 80150c4:	68bb      	ldr	r3, [r7, #8]
 80150c6:	0a1b      	lsrs	r3, r3, #8
 80150c8:	b2db      	uxtb	r3, r3
 80150ca:	4618      	mov	r0, r3
 80150cc:	f000 f934 	bl	8015338 <sFLASH_SendByte>
  /*!< Send WriteAddr low nibble address byte to write to */
  sFLASH_SendByte(WriteAddr & 0xFF);
 80150d0:	68bb      	ldr	r3, [r7, #8]
 80150d2:	b2db      	uxtb	r3, r3
 80150d4:	4618      	mov	r0, r3
 80150d6:	f000 f92f 	bl	8015338 <sFLASH_SendByte>

  /*!< while there is data to be written on the FLASH */
  while (NumByteToWrite--)
 80150da:	e007      	b.n	80150ec <sFLASH_WritePage+0x50>
  {
    /*!< Send the current byte */
    sFLASH_SendByte(*pBuffer);
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	781b      	ldrb	r3, [r3, #0]
 80150e0:	4618      	mov	r0, r3
 80150e2:	f000 f929 	bl	8015338 <sFLASH_SendByte>
    /*!< Point on the next byte to be written */
    pBuffer++;
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	3301      	adds	r3, #1
 80150ea:	60fb      	str	r3, [r7, #12]
  while (NumByteToWrite--)
 80150ec:	88fb      	ldrh	r3, [r7, #6]
 80150ee:	1e5a      	subs	r2, r3, #1
 80150f0:	80fa      	strh	r2, [r7, #6]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d1f2      	bne.n	80150dc <sFLASH_WritePage+0x40>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80150f6:	f7ff ffa3 	bl	8015040 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 80150fa:	f000 f938 	bl	801536e <sFLASH_WaitForWriteEnd>
}
 80150fe:	bf00      	nop
 8015100:	3710      	adds	r7, #16
 8015102:	46bd      	mov	sp, r7
 8015104:	bd80      	pop	{r7, pc}

08015106 <sFLASH_WriteBuffer>:
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8015106:	b580      	push	{r7, lr}
 8015108:	b086      	sub	sp, #24
 801510a:	af00      	add	r7, sp, #0
 801510c:	60f8      	str	r0, [r7, #12]
 801510e:	60b9      	str	r1, [r7, #8]
 8015110:	4613      	mov	r3, r2
 8015112:	80fb      	strh	r3, [r7, #6]
  uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 8015114:	2300      	movs	r3, #0
 8015116:	75fb      	strb	r3, [r7, #23]
 8015118:	2300      	movs	r3, #0
 801511a:	75bb      	strb	r3, [r7, #22]
 801511c:	2300      	movs	r3, #0
 801511e:	757b      	strb	r3, [r7, #21]
 8015120:	2300      	movs	r3, #0
 8015122:	753b      	strb	r3, [r7, #20]
 8015124:	2300      	movs	r3, #0
 8015126:	74fb      	strb	r3, [r7, #19]

  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 8015128:	68bb      	ldr	r3, [r7, #8]
 801512a:	757b      	strb	r3, [r7, #21]
  count = sFLASH_SPI_PAGESIZE - Addr;
 801512c:	7d7b      	ldrb	r3, [r7, #21]
 801512e:	425b      	negs	r3, r3
 8015130:	753b      	strb	r3, [r7, #20]
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8015132:	88fb      	ldrh	r3, [r7, #6]
 8015134:	0a1b      	lsrs	r3, r3, #8
 8015136:	b29b      	uxth	r3, r3
 8015138:	75fb      	strb	r3, [r7, #23]
  NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 801513a:	88fb      	ldrh	r3, [r7, #6]
 801513c:	75bb      	strb	r3, [r7, #22]

  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 801513e:	7d7b      	ldrb	r3, [r7, #21]
 8015140:	2b00      	cmp	r3, #0
 8015142:	d124      	bne.n	801518e <sFLASH_WriteBuffer+0x88>
  {
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8015144:	7dfb      	ldrb	r3, [r7, #23]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d114      	bne.n	8015174 <sFLASH_WriteBuffer+0x6e>
    {
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 801514a:	88fb      	ldrh	r3, [r7, #6]
 801514c:	461a      	mov	r2, r3
 801514e:	68b9      	ldr	r1, [r7, #8]
 8015150:	68f8      	ldr	r0, [r7, #12]
 8015152:	f7ff ffa3 	bl	801509c <sFLASH_WritePage>
      {
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
      }
    }
  }
}
 8015156:	e07b      	b.n	8015250 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8015158:	f44f 7280 	mov.w	r2, #256	; 0x100
 801515c:	68b9      	ldr	r1, [r7, #8]
 801515e:	68f8      	ldr	r0, [r7, #12]
 8015160:	f7ff ff9c 	bl	801509c <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8015164:	68bb      	ldr	r3, [r7, #8]
 8015166:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801516a:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015172:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8015174:	7dfb      	ldrb	r3, [r7, #23]
 8015176:	1e5a      	subs	r2, r3, #1
 8015178:	75fa      	strb	r2, [r7, #23]
 801517a:	2b00      	cmp	r3, #0
 801517c:	d1ec      	bne.n	8015158 <sFLASH_WriteBuffer+0x52>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 801517e:	7dbb      	ldrb	r3, [r7, #22]
 8015180:	b29b      	uxth	r3, r3
 8015182:	461a      	mov	r2, r3
 8015184:	68b9      	ldr	r1, [r7, #8]
 8015186:	68f8      	ldr	r0, [r7, #12]
 8015188:	f7ff ff88 	bl	801509c <sFLASH_WritePage>
}
 801518c:	e060      	b.n	8015250 <sFLASH_WriteBuffer+0x14a>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 801518e:	7dfb      	ldrb	r3, [r7, #23]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d125      	bne.n	80151e0 <sFLASH_WriteBuffer+0xda>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 8015194:	7dba      	ldrb	r2, [r7, #22]
 8015196:	7d3b      	ldrb	r3, [r7, #20]
 8015198:	429a      	cmp	r2, r3
 801519a:	d91a      	bls.n	80151d2 <sFLASH_WriteBuffer+0xcc>
        temp = NumOfSingle - count;
 801519c:	7dba      	ldrb	r2, [r7, #22]
 801519e:	7d3b      	ldrb	r3, [r7, #20]
 80151a0:	1ad3      	subs	r3, r2, r3
 80151a2:	74fb      	strb	r3, [r7, #19]
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 80151a4:	7d3b      	ldrb	r3, [r7, #20]
 80151a6:	b29b      	uxth	r3, r3
 80151a8:	461a      	mov	r2, r3
 80151aa:	68b9      	ldr	r1, [r7, #8]
 80151ac:	68f8      	ldr	r0, [r7, #12]
 80151ae:	f7ff ff75 	bl	801509c <sFLASH_WritePage>
        WriteAddr +=  count;
 80151b2:	7d3b      	ldrb	r3, [r7, #20]
 80151b4:	68ba      	ldr	r2, [r7, #8]
 80151b6:	4413      	add	r3, r2
 80151b8:	60bb      	str	r3, [r7, #8]
        pBuffer += count;
 80151ba:	7d3b      	ldrb	r3, [r7, #20]
 80151bc:	68fa      	ldr	r2, [r7, #12]
 80151be:	4413      	add	r3, r2
 80151c0:	60fb      	str	r3, [r7, #12]
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 80151c2:	7cfb      	ldrb	r3, [r7, #19]
 80151c4:	b29b      	uxth	r3, r3
 80151c6:	461a      	mov	r2, r3
 80151c8:	68b9      	ldr	r1, [r7, #8]
 80151ca:	68f8      	ldr	r0, [r7, #12]
 80151cc:	f7ff ff66 	bl	801509c <sFLASH_WritePage>
}
 80151d0:	e03e      	b.n	8015250 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 80151d2:	88fb      	ldrh	r3, [r7, #6]
 80151d4:	461a      	mov	r2, r3
 80151d6:	68b9      	ldr	r1, [r7, #8]
 80151d8:	68f8      	ldr	r0, [r7, #12]
 80151da:	f7ff ff5f 	bl	801509c <sFLASH_WritePage>
}
 80151de:	e037      	b.n	8015250 <sFLASH_WriteBuffer+0x14a>
      NumByteToWrite -= count;
 80151e0:	7d3b      	ldrb	r3, [r7, #20]
 80151e2:	b29b      	uxth	r3, r3
 80151e4:	88fa      	ldrh	r2, [r7, #6]
 80151e6:	1ad3      	subs	r3, r2, r3
 80151e8:	80fb      	strh	r3, [r7, #6]
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 80151ea:	88fb      	ldrh	r3, [r7, #6]
 80151ec:	0a1b      	lsrs	r3, r3, #8
 80151ee:	b29b      	uxth	r3, r3
 80151f0:	75fb      	strb	r3, [r7, #23]
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 80151f2:	88fb      	ldrh	r3, [r7, #6]
 80151f4:	75bb      	strb	r3, [r7, #22]
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 80151f6:	7d3b      	ldrb	r3, [r7, #20]
 80151f8:	b29b      	uxth	r3, r3
 80151fa:	461a      	mov	r2, r3
 80151fc:	68b9      	ldr	r1, [r7, #8]
 80151fe:	68f8      	ldr	r0, [r7, #12]
 8015200:	f7ff ff4c 	bl	801509c <sFLASH_WritePage>
      WriteAddr +=  count;
 8015204:	7d3b      	ldrb	r3, [r7, #20]
 8015206:	68ba      	ldr	r2, [r7, #8]
 8015208:	4413      	add	r3, r2
 801520a:	60bb      	str	r3, [r7, #8]
      pBuffer += count;
 801520c:	7d3b      	ldrb	r3, [r7, #20]
 801520e:	68fa      	ldr	r2, [r7, #12]
 8015210:	4413      	add	r3, r2
 8015212:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8015214:	e00d      	b.n	8015232 <sFLASH_WriteBuffer+0x12c>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8015216:	f44f 7280 	mov.w	r2, #256	; 0x100
 801521a:	68b9      	ldr	r1, [r7, #8]
 801521c:	68f8      	ldr	r0, [r7, #12]
 801521e:	f7ff ff3d 	bl	801509c <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8015222:	68bb      	ldr	r3, [r7, #8]
 8015224:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015228:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015230:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8015232:	7dfb      	ldrb	r3, [r7, #23]
 8015234:	1e5a      	subs	r2, r3, #1
 8015236:	75fa      	strb	r2, [r7, #23]
 8015238:	2b00      	cmp	r3, #0
 801523a:	d1ec      	bne.n	8015216 <sFLASH_WriteBuffer+0x110>
      if (NumOfSingle != 0)
 801523c:	7dbb      	ldrb	r3, [r7, #22]
 801523e:	2b00      	cmp	r3, #0
 8015240:	d006      	beq.n	8015250 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8015242:	7dbb      	ldrb	r3, [r7, #22]
 8015244:	b29b      	uxth	r3, r3
 8015246:	461a      	mov	r2, r3
 8015248:	68b9      	ldr	r1, [r7, #8]
 801524a:	68f8      	ldr	r0, [r7, #12]
 801524c:	f7ff ff26 	bl	801509c <sFLASH_WritePage>
}
 8015250:	bf00      	nop
 8015252:	3718      	adds	r7, #24
 8015254:	46bd      	mov	sp, r7
 8015256:	bd80      	pop	{r7, pc}

08015258 <sFLASH_ReadBuffer>:
  * @param  ReadAddr: FLASH's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the FLASH.
  * @retval None
  */
void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
{
 8015258:	b580      	push	{r7, lr}
 801525a:	b084      	sub	sp, #16
 801525c:	af00      	add	r7, sp, #0
 801525e:	60f8      	str	r0, [r7, #12]
 8015260:	60b9      	str	r1, [r7, #8]
 8015262:	4613      	mov	r3, r2
 8015264:	80fb      	strh	r3, [r7, #6]
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015266:	f7ff fee1 	bl	801502c <sFLASH_CS_LOW>

  /*!< Send "Read from Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_READ);
 801526a:	2003      	movs	r0, #3
 801526c:	f000 f864 	bl	8015338 <sFLASH_SendByte>

  /*!< Send ReadAddr high nibble address byte to read from */
  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8015270:	68bb      	ldr	r3, [r7, #8]
 8015272:	0c1b      	lsrs	r3, r3, #16
 8015274:	b2db      	uxtb	r3, r3
 8015276:	4618      	mov	r0, r3
 8015278:	f000 f85e 	bl	8015338 <sFLASH_SendByte>
  /*!< Send ReadAddr medium nibble address byte to read from */
  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 801527c:	68bb      	ldr	r3, [r7, #8]
 801527e:	0a1b      	lsrs	r3, r3, #8
 8015280:	b2db      	uxtb	r3, r3
 8015282:	4618      	mov	r0, r3
 8015284:	f000 f858 	bl	8015338 <sFLASH_SendByte>
  /*!< Send ReadAddr low nibble address byte to read from */
  sFLASH_SendByte(ReadAddr & 0xFF);
 8015288:	68bb      	ldr	r3, [r7, #8]
 801528a:	b2db      	uxtb	r3, r3
 801528c:	4618      	mov	r0, r3
 801528e:	f000 f853 	bl	8015338 <sFLASH_SendByte>

  while (NumByteToRead--) /*!< while there is data to be read */
 8015292:	e008      	b.n	80152a6 <sFLASH_ReadBuffer+0x4e>
  {
    /*!< Read a byte from the FLASH */
    //*pBuffer = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
	  *pBuffer = sFLASH_ReadByte();
 8015294:	f000 f846 	bl	8015324 <sFLASH_ReadByte>
 8015298:	4603      	mov	r3, r0
 801529a:	461a      	mov	r2, r3
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	701a      	strb	r2, [r3, #0]
    /*!< Point to the next location where the byte read will be saved */
    pBuffer++;
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	3301      	adds	r3, #1
 80152a4:	60fb      	str	r3, [r7, #12]
  while (NumByteToRead--) /*!< while there is data to be read */
 80152a6:	88fb      	ldrh	r3, [r7, #6]
 80152a8:	1e5a      	subs	r2, r3, #1
 80152aa:	80fa      	strh	r2, [r7, #6]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d1f1      	bne.n	8015294 <sFLASH_ReadBuffer+0x3c>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80152b0:	f7ff fec6 	bl	8015040 <sFLASH_CS_HIGH>
}
 80152b4:	bf00      	nop
 80152b6:	3710      	adds	r7, #16
 80152b8:	46bd      	mov	sp, r7
 80152ba:	bd80      	pop	{r7, pc}

080152bc <sFLASH_ReadID>:
  * @brief  Reads FLASH identification.
  * @param  None
  * @retval FLASH identification
  */
uint32_t sFLASH_ReadID(void)
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b084      	sub	sp, #16
 80152c0:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80152c2:	2300      	movs	r3, #0
 80152c4:	60fb      	str	r3, [r7, #12]
 80152c6:	2300      	movs	r3, #0
 80152c8:	60bb      	str	r3, [r7, #8]
 80152ca:	2300      	movs	r3, #0
 80152cc:	607b      	str	r3, [r7, #4]
 80152ce:	2300      	movs	r3, #0
 80152d0:	603b      	str	r3, [r7, #0]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80152d2:	f7ff feab 	bl	801502c <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 80152d6:	f7ff feb3 	bl	8015040 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 80152da:	f7ff fea7 	bl	801502c <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 80152de:	f7ff feaf 	bl	8015040 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 80152e2:	f7ff fea3 	bl	801502c <sFLASH_CS_LOW>


  /*!< Send "RDID " instruction */
  sFLASH_SendByte(sFLASH_CMD_RDID);
 80152e6:	209f      	movs	r0, #159	; 0x9f
 80152e8:	f000 f826 	bl	8015338 <sFLASH_SendByte>

  /*!< Read a byte from the FLASH */
  Temp0 = sFLASH_ReadByte();
 80152ec:	f000 f81a 	bl	8015324 <sFLASH_ReadByte>
 80152f0:	4603      	mov	r3, r0
 80152f2:	60bb      	str	r3, [r7, #8]

  /*!< Read a byte from the FLASH */
  Temp1 = sFLASH_ReadByte();
 80152f4:	f000 f816 	bl	8015324 <sFLASH_ReadByte>
 80152f8:	4603      	mov	r3, r0
 80152fa:	607b      	str	r3, [r7, #4]

  /*!< Read a byte from the FLASH */
  Temp2 = sFLASH_ReadByte();
 80152fc:	f000 f812 	bl	8015324 <sFLASH_ReadByte>
 8015300:	4603      	mov	r3, r0
 8015302:	603b      	str	r3, [r7, #0]

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015304:	f7ff fe9c 	bl	8015040 <sFLASH_CS_HIGH>

  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8015308:	68bb      	ldr	r3, [r7, #8]
 801530a:	041a      	lsls	r2, r3, #16
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	021b      	lsls	r3, r3, #8
 8015310:	4313      	orrs	r3, r2
 8015312:	683a      	ldr	r2, [r7, #0]
 8015314:	4313      	orrs	r3, r2
 8015316:	60fb      	str	r3, [r7, #12]

  return Temp;
 8015318:	68fb      	ldr	r3, [r7, #12]
}
 801531a:	4618      	mov	r0, r3
 801531c:	3710      	adds	r7, #16
 801531e:	46bd      	mov	sp, r7
 8015320:	bd80      	pop	{r7, pc}
	...

08015324 <sFLASH_ReadByte>:
  *         has been previously called.
  * @param  None
  * @retval Byte Read from the SPI Flash.
  */
uint8_t sFLASH_ReadByte(void)
{
 8015324:	b580      	push	{r7, lr}
 8015326:	af00      	add	r7, sp, #0
	return flash_conf.receive_byte();
 8015328:	4b02      	ldr	r3, [pc, #8]	; (8015334 <sFLASH_ReadByte+0x10>)
 801532a:	685b      	ldr	r3, [r3, #4]
 801532c:	4798      	blx	r3
 801532e:	4603      	mov	r3, r0
}
 8015330:	4618      	mov	r0, r3
 8015332:	bd80      	pop	{r7, pc}
 8015334:	200008e0 	.word	0x200008e0

08015338 <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 8015338:	b580      	push	{r7, lr}
 801533a:	b082      	sub	sp, #8
 801533c:	af00      	add	r7, sp, #0
 801533e:	4603      	mov	r3, r0
 8015340:	71fb      	strb	r3, [r7, #7]
	flash_conf.send_byte(byte);
 8015342:	4b04      	ldr	r3, [pc, #16]	; (8015354 <sFLASH_SendByte+0x1c>)
 8015344:	689b      	ldr	r3, [r3, #8]
 8015346:	79fa      	ldrb	r2, [r7, #7]
 8015348:	4610      	mov	r0, r2
 801534a:	4798      	blx	r3
}
 801534c:	bf00      	nop
 801534e:	3708      	adds	r7, #8
 8015350:	46bd      	mov	sp, r7
 8015352:	bd80      	pop	{r7, pc}
 8015354:	200008e0 	.word	0x200008e0

08015358 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 8015358:	b580      	push	{r7, lr}
 801535a:	af00      	add	r7, sp, #0
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 801535c:	f7ff fe66 	bl	801502c <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 8015360:	2006      	movs	r0, #6
 8015362:	f7ff ffe9 	bl	8015338 <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015366:	f7ff fe6b 	bl	8015040 <sFLASH_CS_HIGH>
}
 801536a:	bf00      	nop
 801536c:	bd80      	pop	{r7, pc}

0801536e <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 801536e:	b580      	push	{r7, lr}
 8015370:	b082      	sub	sp, #8
 8015372:	af00      	add	r7, sp, #0
  uint8_t flashstatus = 0;
 8015374:	2300      	movs	r3, #0
 8015376:	71fb      	strb	r3, [r7, #7]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015378:	f7ff fe58 	bl	801502c <sFLASH_CS_LOW>

  /*!< Send "Read Status Register" instruction */
  sFLASH_SendByte(sFLASH_CMD_RDSR);
 801537c:	2005      	movs	r0, #5
 801537e:	f7ff ffdb 	bl	8015338 <sFLASH_SendByte>
  do
  {
    /*!< Send a dummy byte to generate the clock needed by the FLASH
    and put the value of the status register in FLASH_Status variable */
    //flashstatus = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
	  flashstatus = sFLASH_ReadByte();
 8015382:	f7ff ffcf 	bl	8015324 <sFLASH_ReadByte>
 8015386:	4603      	mov	r3, r0
 8015388:	71fb      	strb	r3, [r7, #7]

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 801538a:	79fb      	ldrb	r3, [r7, #7]
 801538c:	f003 0301 	and.w	r3, r3, #1
 8015390:	2b00      	cmp	r3, #0
 8015392:	d1f6      	bne.n	8015382 <sFLASH_WaitForWriteEnd+0x14>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015394:	f7ff fe54 	bl	8015040 <sFLASH_CS_HIGH>
}
 8015398:	bf00      	nop
 801539a:	3708      	adds	r7, #8
 801539c:	46bd      	mov	sp, r7
 801539e:	bd80      	pop	{r7, pc}

080153a0 <SPI_flash_set>:
#include "SPI_flash_io.h"


SPI_HandleTypeDef spi_interface;

void SPI_flash_set(SPI_HandleTypeDef hspi){
 80153a0:	b084      	sub	sp, #16
 80153a2:	b580      	push	{r7, lr}
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	f107 0c08 	add.w	ip, r7, #8
 80153aa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	spi_interface = hspi;
 80153ae:	4b07      	ldr	r3, [pc, #28]	; (80153cc <SPI_flash_set+0x2c>)
 80153b0:	4618      	mov	r0, r3
 80153b2:	f107 0308 	add.w	r3, r7, #8
 80153b6:	2258      	movs	r2, #88	; 0x58
 80153b8:	4619      	mov	r1, r3
 80153ba:	f018 fb5c 	bl	802da76 <memcpy>
}
 80153be:	bf00      	nop
 80153c0:	46bd      	mov	sp, r7
 80153c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80153c6:	b004      	add	sp, #16
 80153c8:	4770      	bx	lr
 80153ca:	bf00      	nop
 80153cc:	20000904 	.word	0x20000904

080153d0 <SPI_flash_read_byte>:

uint8_t SPI_flash_read_byte(void){
 80153d0:	b580      	push	{r7, lr}
 80153d2:	b082      	sub	sp, #8
 80153d4:	af00      	add	r7, sp, #0
	uint8_t byte;

	HAL_SPI_Receive(&spi_interface, &byte, 1, 5000);
 80153d6:	1df9      	adds	r1, r7, #7
 80153d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80153dc:	2201      	movs	r2, #1
 80153de:	4804      	ldr	r0, [pc, #16]	; (80153f0 <SPI_flash_read_byte+0x20>)
 80153e0:	f001 fa8a 	bl	80168f8 <HAL_SPI_Receive>
	return byte;
 80153e4:	79fb      	ldrb	r3, [r7, #7]
}
 80153e6:	4618      	mov	r0, r3
 80153e8:	3708      	adds	r7, #8
 80153ea:	46bd      	mov	sp, r7
 80153ec:	bd80      	pop	{r7, pc}
 80153ee:	bf00      	nop
 80153f0:	20000904 	.word	0x20000904

080153f4 <SPI_flash_send_byte>:


void SPI_flash_send_byte(uint8_t byte){
 80153f4:	b580      	push	{r7, lr}
 80153f6:	b082      	sub	sp, #8
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	4603      	mov	r3, r0
 80153fc:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&spi_interface, &byte, 1, 5000);
 80153fe:	1df9      	adds	r1, r7, #7
 8015400:	f241 3388 	movw	r3, #5000	; 0x1388
 8015404:	2201      	movs	r2, #1
 8015406:	4803      	ldr	r0, [pc, #12]	; (8015414 <SPI_flash_send_byte+0x20>)
 8015408:	f001 f933 	bl	8016672 <HAL_SPI_Transmit>

}
 801540c:	bf00      	nop
 801540e:	3708      	adds	r7, #8
 8015410:	46bd      	mov	sp, r7
 8015412:	bd80      	pop	{r7, pc}
 8015414:	20000904 	.word	0x20000904

08015418 <SPI_flash_select>:

void SPI_flash_select(void){
 8015418:	b580      	push	{r7, lr}
 801541a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 801541c:	2200      	movs	r2, #0
 801541e:	2110      	movs	r1, #16
 8015420:	4802      	ldr	r0, [pc, #8]	; (801542c <SPI_flash_select+0x14>)
 8015422:	f000 fb67 	bl	8015af4 <HAL_GPIO_WritePin>
}
 8015426:	bf00      	nop
 8015428:	bd80      	pop	{r7, pc}
 801542a:	bf00      	nop
 801542c:	40020000 	.word	0x40020000

08015430 <SPI_flash_deselect>:

void SPI_flash_deselect(void){
 8015430:	b580      	push	{r7, lr}
 8015432:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8015434:	2201      	movs	r2, #1
 8015436:	2110      	movs	r1, #16
 8015438:	4802      	ldr	r0, [pc, #8]	; (8015444 <SPI_flash_deselect+0x14>)
 801543a:	f000 fb5b 	bl	8015af4 <HAL_GPIO_WritePin>
}
 801543e:	bf00      	nop
 8015440:	bd80      	pop	{r7, pc}
 8015442:	bf00      	nop
 8015444:	40020000 	.word	0x40020000

08015448 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8015448:	b580      	push	{r7, lr}
 801544a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801544c:	4b0e      	ldr	r3, [pc, #56]	; (8015488 <HAL_Init+0x40>)
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	4a0d      	ldr	r2, [pc, #52]	; (8015488 <HAL_Init+0x40>)
 8015452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015456:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8015458:	4b0b      	ldr	r3, [pc, #44]	; (8015488 <HAL_Init+0x40>)
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	4a0a      	ldr	r2, [pc, #40]	; (8015488 <HAL_Init+0x40>)
 801545e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015462:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8015464:	4b08      	ldr	r3, [pc, #32]	; (8015488 <HAL_Init+0x40>)
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	4a07      	ldr	r2, [pc, #28]	; (8015488 <HAL_Init+0x40>)
 801546a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801546e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8015470:	2003      	movs	r0, #3
 8015472:	f000 f8d8 	bl	8015626 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8015476:	200f      	movs	r0, #15
 8015478:	f7fd fa76 	bl	8012968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801547c:	f7fd f958 	bl	8012730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8015480:	2300      	movs	r3, #0
}
 8015482:	4618      	mov	r0, r3
 8015484:	bd80      	pop	{r7, pc}
 8015486:	bf00      	nop
 8015488:	40023c00 	.word	0x40023c00

0801548c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801548c:	b480      	push	{r7}
 801548e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8015490:	4b06      	ldr	r3, [pc, #24]	; (80154ac <HAL_IncTick+0x20>)
 8015492:	781b      	ldrb	r3, [r3, #0]
 8015494:	461a      	mov	r2, r3
 8015496:	4b06      	ldr	r3, [pc, #24]	; (80154b0 <HAL_IncTick+0x24>)
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	4413      	add	r3, r2
 801549c:	4a04      	ldr	r2, [pc, #16]	; (80154b0 <HAL_IncTick+0x24>)
 801549e:	6013      	str	r3, [r2, #0]
}
 80154a0:	bf00      	nop
 80154a2:	46bd      	mov	sp, r7
 80154a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154a8:	4770      	bx	lr
 80154aa:	bf00      	nop
 80154ac:	200000c0 	.word	0x200000c0
 80154b0:	2000095c 	.word	0x2000095c

080154b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80154b4:	b480      	push	{r7}
 80154b6:	af00      	add	r7, sp, #0
  return uwTick;
 80154b8:	4b03      	ldr	r3, [pc, #12]	; (80154c8 <HAL_GetTick+0x14>)
 80154ba:	681b      	ldr	r3, [r3, #0]
}
 80154bc:	4618      	mov	r0, r3
 80154be:	46bd      	mov	sp, r7
 80154c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c4:	4770      	bx	lr
 80154c6:	bf00      	nop
 80154c8:	2000095c 	.word	0x2000095c

080154cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80154cc:	b480      	push	{r7}
 80154ce:	b085      	sub	sp, #20
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	f003 0307 	and.w	r3, r3, #7
 80154da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80154dc:	4b0c      	ldr	r3, [pc, #48]	; (8015510 <__NVIC_SetPriorityGrouping+0x44>)
 80154de:	68db      	ldr	r3, [r3, #12]
 80154e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80154e2:	68ba      	ldr	r2, [r7, #8]
 80154e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80154e8:	4013      	ands	r3, r2
 80154ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80154f0:	68bb      	ldr	r3, [r7, #8]
 80154f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80154f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80154f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80154fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80154fe:	4a04      	ldr	r2, [pc, #16]	; (8015510 <__NVIC_SetPriorityGrouping+0x44>)
 8015500:	68bb      	ldr	r3, [r7, #8]
 8015502:	60d3      	str	r3, [r2, #12]
}
 8015504:	bf00      	nop
 8015506:	3714      	adds	r7, #20
 8015508:	46bd      	mov	sp, r7
 801550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801550e:	4770      	bx	lr
 8015510:	e000ed00 	.word	0xe000ed00

08015514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8015514:	b480      	push	{r7}
 8015516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8015518:	4b04      	ldr	r3, [pc, #16]	; (801552c <__NVIC_GetPriorityGrouping+0x18>)
 801551a:	68db      	ldr	r3, [r3, #12]
 801551c:	0a1b      	lsrs	r3, r3, #8
 801551e:	f003 0307 	and.w	r3, r3, #7
}
 8015522:	4618      	mov	r0, r3
 8015524:	46bd      	mov	sp, r7
 8015526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801552a:	4770      	bx	lr
 801552c:	e000ed00 	.word	0xe000ed00

08015530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015530:	b480      	push	{r7}
 8015532:	b083      	sub	sp, #12
 8015534:	af00      	add	r7, sp, #0
 8015536:	4603      	mov	r3, r0
 8015538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801553a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801553e:	2b00      	cmp	r3, #0
 8015540:	db0b      	blt.n	801555a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015542:	79fb      	ldrb	r3, [r7, #7]
 8015544:	f003 021f 	and.w	r2, r3, #31
 8015548:	4907      	ldr	r1, [pc, #28]	; (8015568 <__NVIC_EnableIRQ+0x38>)
 801554a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801554e:	095b      	lsrs	r3, r3, #5
 8015550:	2001      	movs	r0, #1
 8015552:	fa00 f202 	lsl.w	r2, r0, r2
 8015556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801555a:	bf00      	nop
 801555c:	370c      	adds	r7, #12
 801555e:	46bd      	mov	sp, r7
 8015560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015564:	4770      	bx	lr
 8015566:	bf00      	nop
 8015568:	e000e100 	.word	0xe000e100

0801556c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801556c:	b480      	push	{r7}
 801556e:	b083      	sub	sp, #12
 8015570:	af00      	add	r7, sp, #0
 8015572:	4603      	mov	r3, r0
 8015574:	6039      	str	r1, [r7, #0]
 8015576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801557c:	2b00      	cmp	r3, #0
 801557e:	db0a      	blt.n	8015596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015580:	683b      	ldr	r3, [r7, #0]
 8015582:	b2da      	uxtb	r2, r3
 8015584:	490c      	ldr	r1, [pc, #48]	; (80155b8 <__NVIC_SetPriority+0x4c>)
 8015586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801558a:	0112      	lsls	r2, r2, #4
 801558c:	b2d2      	uxtb	r2, r2
 801558e:	440b      	add	r3, r1
 8015590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8015594:	e00a      	b.n	80155ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015596:	683b      	ldr	r3, [r7, #0]
 8015598:	b2da      	uxtb	r2, r3
 801559a:	4908      	ldr	r1, [pc, #32]	; (80155bc <__NVIC_SetPriority+0x50>)
 801559c:	79fb      	ldrb	r3, [r7, #7]
 801559e:	f003 030f 	and.w	r3, r3, #15
 80155a2:	3b04      	subs	r3, #4
 80155a4:	0112      	lsls	r2, r2, #4
 80155a6:	b2d2      	uxtb	r2, r2
 80155a8:	440b      	add	r3, r1
 80155aa:	761a      	strb	r2, [r3, #24]
}
 80155ac:	bf00      	nop
 80155ae:	370c      	adds	r7, #12
 80155b0:	46bd      	mov	sp, r7
 80155b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b6:	4770      	bx	lr
 80155b8:	e000e100 	.word	0xe000e100
 80155bc:	e000ed00 	.word	0xe000ed00

080155c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80155c0:	b480      	push	{r7}
 80155c2:	b089      	sub	sp, #36	; 0x24
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	60f8      	str	r0, [r7, #12]
 80155c8:	60b9      	str	r1, [r7, #8]
 80155ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	f003 0307 	and.w	r3, r3, #7
 80155d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80155d4:	69fb      	ldr	r3, [r7, #28]
 80155d6:	f1c3 0307 	rsb	r3, r3, #7
 80155da:	2b04      	cmp	r3, #4
 80155dc:	bf28      	it	cs
 80155de:	2304      	movcs	r3, #4
 80155e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80155e2:	69fb      	ldr	r3, [r7, #28]
 80155e4:	3304      	adds	r3, #4
 80155e6:	2b06      	cmp	r3, #6
 80155e8:	d902      	bls.n	80155f0 <NVIC_EncodePriority+0x30>
 80155ea:	69fb      	ldr	r3, [r7, #28]
 80155ec:	3b03      	subs	r3, #3
 80155ee:	e000      	b.n	80155f2 <NVIC_EncodePriority+0x32>
 80155f0:	2300      	movs	r3, #0
 80155f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80155f4:	f04f 32ff 	mov.w	r2, #4294967295
 80155f8:	69bb      	ldr	r3, [r7, #24]
 80155fa:	fa02 f303 	lsl.w	r3, r2, r3
 80155fe:	43da      	mvns	r2, r3
 8015600:	68bb      	ldr	r3, [r7, #8]
 8015602:	401a      	ands	r2, r3
 8015604:	697b      	ldr	r3, [r7, #20]
 8015606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8015608:	f04f 31ff 	mov.w	r1, #4294967295
 801560c:	697b      	ldr	r3, [r7, #20]
 801560e:	fa01 f303 	lsl.w	r3, r1, r3
 8015612:	43d9      	mvns	r1, r3
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015618:	4313      	orrs	r3, r2
         );
}
 801561a:	4618      	mov	r0, r3
 801561c:	3724      	adds	r7, #36	; 0x24
 801561e:	46bd      	mov	sp, r7
 8015620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015624:	4770      	bx	lr

08015626 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015626:	b580      	push	{r7, lr}
 8015628:	b082      	sub	sp, #8
 801562a:	af00      	add	r7, sp, #0
 801562c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801562e:	6878      	ldr	r0, [r7, #4]
 8015630:	f7ff ff4c 	bl	80154cc <__NVIC_SetPriorityGrouping>
}
 8015634:	bf00      	nop
 8015636:	3708      	adds	r7, #8
 8015638:	46bd      	mov	sp, r7
 801563a:	bd80      	pop	{r7, pc}

0801563c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801563c:	b580      	push	{r7, lr}
 801563e:	b086      	sub	sp, #24
 8015640:	af00      	add	r7, sp, #0
 8015642:	4603      	mov	r3, r0
 8015644:	60b9      	str	r1, [r7, #8]
 8015646:	607a      	str	r2, [r7, #4]
 8015648:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801564a:	2300      	movs	r3, #0
 801564c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801564e:	f7ff ff61 	bl	8015514 <__NVIC_GetPriorityGrouping>
 8015652:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8015654:	687a      	ldr	r2, [r7, #4]
 8015656:	68b9      	ldr	r1, [r7, #8]
 8015658:	6978      	ldr	r0, [r7, #20]
 801565a:	f7ff ffb1 	bl	80155c0 <NVIC_EncodePriority>
 801565e:	4602      	mov	r2, r0
 8015660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015664:	4611      	mov	r1, r2
 8015666:	4618      	mov	r0, r3
 8015668:	f7ff ff80 	bl	801556c <__NVIC_SetPriority>
}
 801566c:	bf00      	nop
 801566e:	3718      	adds	r7, #24
 8015670:	46bd      	mov	sp, r7
 8015672:	bd80      	pop	{r7, pc}

08015674 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015674:	b580      	push	{r7, lr}
 8015676:	b082      	sub	sp, #8
 8015678:	af00      	add	r7, sp, #0
 801567a:	4603      	mov	r3, r0
 801567c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801567e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015682:	4618      	mov	r0, r3
 8015684:	f7ff ff54 	bl	8015530 <__NVIC_EnableIRQ>
}
 8015688:	bf00      	nop
 801568a:	3708      	adds	r7, #8
 801568c:	46bd      	mov	sp, r7
 801568e:	bd80      	pop	{r7, pc}

08015690 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8015690:	b580      	push	{r7, lr}
 8015692:	b082      	sub	sp, #8
 8015694:	af00      	add	r7, sp, #0
 8015696:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d101      	bne.n	80156a2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 801569e:	2301      	movs	r3, #1
 80156a0:	e00e      	b.n	80156c0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	795b      	ldrb	r3, [r3, #5]
 80156a6:	b2db      	uxtb	r3, r3
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d105      	bne.n	80156b8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	2200      	movs	r2, #0
 80156b0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80156b2:	6878      	ldr	r0, [r7, #4]
 80156b4:	f7fd f868 	bl	8012788 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	2201      	movs	r2, #1
 80156bc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80156be:	2300      	movs	r3, #0
}
 80156c0:	4618      	mov	r0, r3
 80156c2:	3708      	adds	r7, #8
 80156c4:	46bd      	mov	sp, r7
 80156c6:	bd80      	pop	{r7, pc}

080156c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80156c8:	b580      	push	{r7, lr}
 80156ca:	b084      	sub	sp, #16
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80156d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80156d6:	f7ff feed 	bl	80154b4 <HAL_GetTick>
 80156da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80156e2:	b2db      	uxtb	r3, r3
 80156e4:	2b02      	cmp	r3, #2
 80156e6:	d008      	beq.n	80156fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	2280      	movs	r2, #128	; 0x80
 80156ec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	2200      	movs	r2, #0
 80156f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80156f6:	2301      	movs	r3, #1
 80156f8:	e052      	b.n	80157a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	681a      	ldr	r2, [r3, #0]
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	f022 0216 	bic.w	r2, r2, #22
 8015708:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	695a      	ldr	r2, [r3, #20]
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015718:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801571e:	2b00      	cmp	r3, #0
 8015720:	d103      	bne.n	801572a <HAL_DMA_Abort+0x62>
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015726:	2b00      	cmp	r3, #0
 8015728:	d007      	beq.n	801573a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	681a      	ldr	r2, [r3, #0]
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	f022 0208 	bic.w	r2, r2, #8
 8015738:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	681a      	ldr	r2, [r3, #0]
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	f022 0201 	bic.w	r2, r2, #1
 8015748:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801574a:	e013      	b.n	8015774 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801574c:	f7ff feb2 	bl	80154b4 <HAL_GetTick>
 8015750:	4602      	mov	r2, r0
 8015752:	68bb      	ldr	r3, [r7, #8]
 8015754:	1ad3      	subs	r3, r2, r3
 8015756:	2b05      	cmp	r3, #5
 8015758:	d90c      	bls.n	8015774 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	2220      	movs	r2, #32
 801575e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	2203      	movs	r2, #3
 8015764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	2200      	movs	r2, #0
 801576c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8015770:	2303      	movs	r3, #3
 8015772:	e015      	b.n	80157a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	f003 0301 	and.w	r3, r3, #1
 801577e:	2b00      	cmp	r3, #0
 8015780:	d1e4      	bne.n	801574c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015786:	223f      	movs	r2, #63	; 0x3f
 8015788:	409a      	lsls	r2, r3
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	2201      	movs	r2, #1
 8015792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	2200      	movs	r2, #0
 801579a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 801579e:	2300      	movs	r3, #0
}
 80157a0:	4618      	mov	r0, r3
 80157a2:	3710      	adds	r7, #16
 80157a4:	46bd      	mov	sp, r7
 80157a6:	bd80      	pop	{r7, pc}

080157a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80157a8:	b480      	push	{r7}
 80157aa:	b083      	sub	sp, #12
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80157b6:	b2db      	uxtb	r3, r3
 80157b8:	2b02      	cmp	r3, #2
 80157ba:	d004      	beq.n	80157c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	2280      	movs	r2, #128	; 0x80
 80157c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80157c2:	2301      	movs	r3, #1
 80157c4:	e00c      	b.n	80157e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	2205      	movs	r2, #5
 80157ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	681a      	ldr	r2, [r3, #0]
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	f022 0201 	bic.w	r2, r2, #1
 80157dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80157de:	2300      	movs	r3, #0
}
 80157e0:	4618      	mov	r0, r3
 80157e2:	370c      	adds	r7, #12
 80157e4:	46bd      	mov	sp, r7
 80157e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ea:	4770      	bx	lr

080157ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80157ec:	b480      	push	{r7}
 80157ee:	b089      	sub	sp, #36	; 0x24
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
 80157f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80157f6:	2300      	movs	r3, #0
 80157f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80157fa:	2300      	movs	r3, #0
 80157fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80157fe:	2300      	movs	r3, #0
 8015800:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015802:	2300      	movs	r3, #0
 8015804:	61fb      	str	r3, [r7, #28]
 8015806:	e159      	b.n	8015abc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8015808:	2201      	movs	r2, #1
 801580a:	69fb      	ldr	r3, [r7, #28]
 801580c:	fa02 f303 	lsl.w	r3, r2, r3
 8015810:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8015812:	683b      	ldr	r3, [r7, #0]
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	697a      	ldr	r2, [r7, #20]
 8015818:	4013      	ands	r3, r2
 801581a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801581c:	693a      	ldr	r2, [r7, #16]
 801581e:	697b      	ldr	r3, [r7, #20]
 8015820:	429a      	cmp	r2, r3
 8015822:	f040 8148 	bne.w	8015ab6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8015826:	683b      	ldr	r3, [r7, #0]
 8015828:	685b      	ldr	r3, [r3, #4]
 801582a:	f003 0303 	and.w	r3, r3, #3
 801582e:	2b01      	cmp	r3, #1
 8015830:	d005      	beq.n	801583e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015832:	683b      	ldr	r3, [r7, #0]
 8015834:	685b      	ldr	r3, [r3, #4]
 8015836:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801583a:	2b02      	cmp	r3, #2
 801583c:	d130      	bne.n	80158a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	689b      	ldr	r3, [r3, #8]
 8015842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8015844:	69fb      	ldr	r3, [r7, #28]
 8015846:	005b      	lsls	r3, r3, #1
 8015848:	2203      	movs	r2, #3
 801584a:	fa02 f303 	lsl.w	r3, r2, r3
 801584e:	43db      	mvns	r3, r3
 8015850:	69ba      	ldr	r2, [r7, #24]
 8015852:	4013      	ands	r3, r2
 8015854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8015856:	683b      	ldr	r3, [r7, #0]
 8015858:	68da      	ldr	r2, [r3, #12]
 801585a:	69fb      	ldr	r3, [r7, #28]
 801585c:	005b      	lsls	r3, r3, #1
 801585e:	fa02 f303 	lsl.w	r3, r2, r3
 8015862:	69ba      	ldr	r2, [r7, #24]
 8015864:	4313      	orrs	r3, r2
 8015866:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	69ba      	ldr	r2, [r7, #24]
 801586c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	685b      	ldr	r3, [r3, #4]
 8015872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8015874:	2201      	movs	r2, #1
 8015876:	69fb      	ldr	r3, [r7, #28]
 8015878:	fa02 f303 	lsl.w	r3, r2, r3
 801587c:	43db      	mvns	r3, r3
 801587e:	69ba      	ldr	r2, [r7, #24]
 8015880:	4013      	ands	r3, r2
 8015882:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8015884:	683b      	ldr	r3, [r7, #0]
 8015886:	685b      	ldr	r3, [r3, #4]
 8015888:	091b      	lsrs	r3, r3, #4
 801588a:	f003 0201 	and.w	r2, r3, #1
 801588e:	69fb      	ldr	r3, [r7, #28]
 8015890:	fa02 f303 	lsl.w	r3, r2, r3
 8015894:	69ba      	ldr	r2, [r7, #24]
 8015896:	4313      	orrs	r3, r2
 8015898:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	69ba      	ldr	r2, [r7, #24]
 801589e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80158a0:	683b      	ldr	r3, [r7, #0]
 80158a2:	685b      	ldr	r3, [r3, #4]
 80158a4:	f003 0303 	and.w	r3, r3, #3
 80158a8:	2b03      	cmp	r3, #3
 80158aa:	d017      	beq.n	80158dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	68db      	ldr	r3, [r3, #12]
 80158b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80158b2:	69fb      	ldr	r3, [r7, #28]
 80158b4:	005b      	lsls	r3, r3, #1
 80158b6:	2203      	movs	r2, #3
 80158b8:	fa02 f303 	lsl.w	r3, r2, r3
 80158bc:	43db      	mvns	r3, r3
 80158be:	69ba      	ldr	r2, [r7, #24]
 80158c0:	4013      	ands	r3, r2
 80158c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80158c4:	683b      	ldr	r3, [r7, #0]
 80158c6:	689a      	ldr	r2, [r3, #8]
 80158c8:	69fb      	ldr	r3, [r7, #28]
 80158ca:	005b      	lsls	r3, r3, #1
 80158cc:	fa02 f303 	lsl.w	r3, r2, r3
 80158d0:	69ba      	ldr	r2, [r7, #24]
 80158d2:	4313      	orrs	r3, r2
 80158d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	69ba      	ldr	r2, [r7, #24]
 80158da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80158dc:	683b      	ldr	r3, [r7, #0]
 80158de:	685b      	ldr	r3, [r3, #4]
 80158e0:	f003 0303 	and.w	r3, r3, #3
 80158e4:	2b02      	cmp	r3, #2
 80158e6:	d123      	bne.n	8015930 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80158e8:	69fb      	ldr	r3, [r7, #28]
 80158ea:	08da      	lsrs	r2, r3, #3
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	3208      	adds	r2, #8
 80158f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80158f6:	69fb      	ldr	r3, [r7, #28]
 80158f8:	f003 0307 	and.w	r3, r3, #7
 80158fc:	009b      	lsls	r3, r3, #2
 80158fe:	220f      	movs	r2, #15
 8015900:	fa02 f303 	lsl.w	r3, r2, r3
 8015904:	43db      	mvns	r3, r3
 8015906:	69ba      	ldr	r2, [r7, #24]
 8015908:	4013      	ands	r3, r2
 801590a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801590c:	683b      	ldr	r3, [r7, #0]
 801590e:	691a      	ldr	r2, [r3, #16]
 8015910:	69fb      	ldr	r3, [r7, #28]
 8015912:	f003 0307 	and.w	r3, r3, #7
 8015916:	009b      	lsls	r3, r3, #2
 8015918:	fa02 f303 	lsl.w	r3, r2, r3
 801591c:	69ba      	ldr	r2, [r7, #24]
 801591e:	4313      	orrs	r3, r2
 8015920:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8015922:	69fb      	ldr	r3, [r7, #28]
 8015924:	08da      	lsrs	r2, r3, #3
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	3208      	adds	r2, #8
 801592a:	69b9      	ldr	r1, [r7, #24]
 801592c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8015936:	69fb      	ldr	r3, [r7, #28]
 8015938:	005b      	lsls	r3, r3, #1
 801593a:	2203      	movs	r2, #3
 801593c:	fa02 f303 	lsl.w	r3, r2, r3
 8015940:	43db      	mvns	r3, r3
 8015942:	69ba      	ldr	r2, [r7, #24]
 8015944:	4013      	ands	r3, r2
 8015946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8015948:	683b      	ldr	r3, [r7, #0]
 801594a:	685b      	ldr	r3, [r3, #4]
 801594c:	f003 0203 	and.w	r2, r3, #3
 8015950:	69fb      	ldr	r3, [r7, #28]
 8015952:	005b      	lsls	r3, r3, #1
 8015954:	fa02 f303 	lsl.w	r3, r2, r3
 8015958:	69ba      	ldr	r2, [r7, #24]
 801595a:	4313      	orrs	r3, r2
 801595c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	69ba      	ldr	r2, [r7, #24]
 8015962:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8015964:	683b      	ldr	r3, [r7, #0]
 8015966:	685b      	ldr	r3, [r3, #4]
 8015968:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801596c:	2b00      	cmp	r3, #0
 801596e:	f000 80a2 	beq.w	8015ab6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015972:	2300      	movs	r3, #0
 8015974:	60fb      	str	r3, [r7, #12]
 8015976:	4b57      	ldr	r3, [pc, #348]	; (8015ad4 <HAL_GPIO_Init+0x2e8>)
 8015978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801597a:	4a56      	ldr	r2, [pc, #344]	; (8015ad4 <HAL_GPIO_Init+0x2e8>)
 801597c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015980:	6453      	str	r3, [r2, #68]	; 0x44
 8015982:	4b54      	ldr	r3, [pc, #336]	; (8015ad4 <HAL_GPIO_Init+0x2e8>)
 8015984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801598a:	60fb      	str	r3, [r7, #12]
 801598c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801598e:	4a52      	ldr	r2, [pc, #328]	; (8015ad8 <HAL_GPIO_Init+0x2ec>)
 8015990:	69fb      	ldr	r3, [r7, #28]
 8015992:	089b      	lsrs	r3, r3, #2
 8015994:	3302      	adds	r3, #2
 8015996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801599a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801599c:	69fb      	ldr	r3, [r7, #28]
 801599e:	f003 0303 	and.w	r3, r3, #3
 80159a2:	009b      	lsls	r3, r3, #2
 80159a4:	220f      	movs	r2, #15
 80159a6:	fa02 f303 	lsl.w	r3, r2, r3
 80159aa:	43db      	mvns	r3, r3
 80159ac:	69ba      	ldr	r2, [r7, #24]
 80159ae:	4013      	ands	r3, r2
 80159b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	4a49      	ldr	r2, [pc, #292]	; (8015adc <HAL_GPIO_Init+0x2f0>)
 80159b6:	4293      	cmp	r3, r2
 80159b8:	d019      	beq.n	80159ee <HAL_GPIO_Init+0x202>
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	4a48      	ldr	r2, [pc, #288]	; (8015ae0 <HAL_GPIO_Init+0x2f4>)
 80159be:	4293      	cmp	r3, r2
 80159c0:	d013      	beq.n	80159ea <HAL_GPIO_Init+0x1fe>
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	4a47      	ldr	r2, [pc, #284]	; (8015ae4 <HAL_GPIO_Init+0x2f8>)
 80159c6:	4293      	cmp	r3, r2
 80159c8:	d00d      	beq.n	80159e6 <HAL_GPIO_Init+0x1fa>
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	4a46      	ldr	r2, [pc, #280]	; (8015ae8 <HAL_GPIO_Init+0x2fc>)
 80159ce:	4293      	cmp	r3, r2
 80159d0:	d007      	beq.n	80159e2 <HAL_GPIO_Init+0x1f6>
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	4a45      	ldr	r2, [pc, #276]	; (8015aec <HAL_GPIO_Init+0x300>)
 80159d6:	4293      	cmp	r3, r2
 80159d8:	d101      	bne.n	80159de <HAL_GPIO_Init+0x1f2>
 80159da:	2304      	movs	r3, #4
 80159dc:	e008      	b.n	80159f0 <HAL_GPIO_Init+0x204>
 80159de:	2307      	movs	r3, #7
 80159e0:	e006      	b.n	80159f0 <HAL_GPIO_Init+0x204>
 80159e2:	2303      	movs	r3, #3
 80159e4:	e004      	b.n	80159f0 <HAL_GPIO_Init+0x204>
 80159e6:	2302      	movs	r3, #2
 80159e8:	e002      	b.n	80159f0 <HAL_GPIO_Init+0x204>
 80159ea:	2301      	movs	r3, #1
 80159ec:	e000      	b.n	80159f0 <HAL_GPIO_Init+0x204>
 80159ee:	2300      	movs	r3, #0
 80159f0:	69fa      	ldr	r2, [r7, #28]
 80159f2:	f002 0203 	and.w	r2, r2, #3
 80159f6:	0092      	lsls	r2, r2, #2
 80159f8:	4093      	lsls	r3, r2
 80159fa:	69ba      	ldr	r2, [r7, #24]
 80159fc:	4313      	orrs	r3, r2
 80159fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8015a00:	4935      	ldr	r1, [pc, #212]	; (8015ad8 <HAL_GPIO_Init+0x2ec>)
 8015a02:	69fb      	ldr	r3, [r7, #28]
 8015a04:	089b      	lsrs	r3, r3, #2
 8015a06:	3302      	adds	r3, #2
 8015a08:	69ba      	ldr	r2, [r7, #24]
 8015a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8015a0e:	4b38      	ldr	r3, [pc, #224]	; (8015af0 <HAL_GPIO_Init+0x304>)
 8015a10:	689b      	ldr	r3, [r3, #8]
 8015a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015a14:	693b      	ldr	r3, [r7, #16]
 8015a16:	43db      	mvns	r3, r3
 8015a18:	69ba      	ldr	r2, [r7, #24]
 8015a1a:	4013      	ands	r3, r2
 8015a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8015a1e:	683b      	ldr	r3, [r7, #0]
 8015a20:	685b      	ldr	r3, [r3, #4]
 8015a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d003      	beq.n	8015a32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8015a2a:	69ba      	ldr	r2, [r7, #24]
 8015a2c:	693b      	ldr	r3, [r7, #16]
 8015a2e:	4313      	orrs	r3, r2
 8015a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8015a32:	4a2f      	ldr	r2, [pc, #188]	; (8015af0 <HAL_GPIO_Init+0x304>)
 8015a34:	69bb      	ldr	r3, [r7, #24]
 8015a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8015a38:	4b2d      	ldr	r3, [pc, #180]	; (8015af0 <HAL_GPIO_Init+0x304>)
 8015a3a:	68db      	ldr	r3, [r3, #12]
 8015a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015a3e:	693b      	ldr	r3, [r7, #16]
 8015a40:	43db      	mvns	r3, r3
 8015a42:	69ba      	ldr	r2, [r7, #24]
 8015a44:	4013      	ands	r3, r2
 8015a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8015a48:	683b      	ldr	r3, [r7, #0]
 8015a4a:	685b      	ldr	r3, [r3, #4]
 8015a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d003      	beq.n	8015a5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8015a54:	69ba      	ldr	r2, [r7, #24]
 8015a56:	693b      	ldr	r3, [r7, #16]
 8015a58:	4313      	orrs	r3, r2
 8015a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8015a5c:	4a24      	ldr	r2, [pc, #144]	; (8015af0 <HAL_GPIO_Init+0x304>)
 8015a5e:	69bb      	ldr	r3, [r7, #24]
 8015a60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8015a62:	4b23      	ldr	r3, [pc, #140]	; (8015af0 <HAL_GPIO_Init+0x304>)
 8015a64:	685b      	ldr	r3, [r3, #4]
 8015a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015a68:	693b      	ldr	r3, [r7, #16]
 8015a6a:	43db      	mvns	r3, r3
 8015a6c:	69ba      	ldr	r2, [r7, #24]
 8015a6e:	4013      	ands	r3, r2
 8015a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8015a72:	683b      	ldr	r3, [r7, #0]
 8015a74:	685b      	ldr	r3, [r3, #4]
 8015a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d003      	beq.n	8015a86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8015a7e:	69ba      	ldr	r2, [r7, #24]
 8015a80:	693b      	ldr	r3, [r7, #16]
 8015a82:	4313      	orrs	r3, r2
 8015a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8015a86:	4a1a      	ldr	r2, [pc, #104]	; (8015af0 <HAL_GPIO_Init+0x304>)
 8015a88:	69bb      	ldr	r3, [r7, #24]
 8015a8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8015a8c:	4b18      	ldr	r3, [pc, #96]	; (8015af0 <HAL_GPIO_Init+0x304>)
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015a92:	693b      	ldr	r3, [r7, #16]
 8015a94:	43db      	mvns	r3, r3
 8015a96:	69ba      	ldr	r2, [r7, #24]
 8015a98:	4013      	ands	r3, r2
 8015a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8015a9c:	683b      	ldr	r3, [r7, #0]
 8015a9e:	685b      	ldr	r3, [r3, #4]
 8015aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d003      	beq.n	8015ab0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8015aa8:	69ba      	ldr	r2, [r7, #24]
 8015aaa:	693b      	ldr	r3, [r7, #16]
 8015aac:	4313      	orrs	r3, r2
 8015aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8015ab0:	4a0f      	ldr	r2, [pc, #60]	; (8015af0 <HAL_GPIO_Init+0x304>)
 8015ab2:	69bb      	ldr	r3, [r7, #24]
 8015ab4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015ab6:	69fb      	ldr	r3, [r7, #28]
 8015ab8:	3301      	adds	r3, #1
 8015aba:	61fb      	str	r3, [r7, #28]
 8015abc:	69fb      	ldr	r3, [r7, #28]
 8015abe:	2b0f      	cmp	r3, #15
 8015ac0:	f67f aea2 	bls.w	8015808 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8015ac4:	bf00      	nop
 8015ac6:	bf00      	nop
 8015ac8:	3724      	adds	r7, #36	; 0x24
 8015aca:	46bd      	mov	sp, r7
 8015acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad0:	4770      	bx	lr
 8015ad2:	bf00      	nop
 8015ad4:	40023800 	.word	0x40023800
 8015ad8:	40013800 	.word	0x40013800
 8015adc:	40020000 	.word	0x40020000
 8015ae0:	40020400 	.word	0x40020400
 8015ae4:	40020800 	.word	0x40020800
 8015ae8:	40020c00 	.word	0x40020c00
 8015aec:	40021000 	.word	0x40021000
 8015af0:	40013c00 	.word	0x40013c00

08015af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015af4:	b480      	push	{r7}
 8015af6:	b083      	sub	sp, #12
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	6078      	str	r0, [r7, #4]
 8015afc:	460b      	mov	r3, r1
 8015afe:	807b      	strh	r3, [r7, #2]
 8015b00:	4613      	mov	r3, r2
 8015b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8015b04:	787b      	ldrb	r3, [r7, #1]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d003      	beq.n	8015b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8015b0a:	887a      	ldrh	r2, [r7, #2]
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8015b10:	e003      	b.n	8015b1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8015b12:	887b      	ldrh	r3, [r7, #2]
 8015b14:	041a      	lsls	r2, r3, #16
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	619a      	str	r2, [r3, #24]
}
 8015b1a:	bf00      	nop
 8015b1c:	370c      	adds	r7, #12
 8015b1e:	46bd      	mov	sp, r7
 8015b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b24:	4770      	bx	lr

08015b26 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8015b26:	b580      	push	{r7, lr}
 8015b28:	b084      	sub	sp, #16
 8015b2a:	af00      	add	r7, sp, #0
 8015b2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d101      	bne.n	8015b38 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8015b34:	2301      	movs	r3, #1
 8015b36:	e034      	b.n	8015ba2 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8015b40:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	f245 5255 	movw	r2, #21845	; 0x5555
 8015b4a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	687a      	ldr	r2, [r7, #4]
 8015b52:	6852      	ldr	r2, [r2, #4]
 8015b54:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	687a      	ldr	r2, [r7, #4]
 8015b5c:	6892      	ldr	r2, [r2, #8]
 8015b5e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8015b60:	f7ff fca8 	bl	80154b4 <HAL_GetTick>
 8015b64:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8015b66:	e00f      	b.n	8015b88 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8015b68:	f7ff fca4 	bl	80154b4 <HAL_GetTick>
 8015b6c:	4602      	mov	r2, r0
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	1ad3      	subs	r3, r2, r3
 8015b72:	2b31      	cmp	r3, #49	; 0x31
 8015b74:	d908      	bls.n	8015b88 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	68db      	ldr	r3, [r3, #12]
 8015b7c:	f003 0303 	and.w	r3, r3, #3
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d001      	beq.n	8015b88 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8015b84:	2303      	movs	r3, #3
 8015b86:	e00c      	b.n	8015ba2 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	68db      	ldr	r3, [r3, #12]
 8015b8e:	f003 0303 	and.w	r3, r3, #3
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d1e8      	bne.n	8015b68 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8015b9e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8015ba0:	2300      	movs	r3, #0
}
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	3710      	adds	r7, #16
 8015ba6:	46bd      	mov	sp, r7
 8015ba8:	bd80      	pop	{r7, pc}

08015baa <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8015baa:	b480      	push	{r7}
 8015bac:	b083      	sub	sp, #12
 8015bae:	af00      	add	r7, sp, #0
 8015bb0:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8015bba:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8015bbc:	2300      	movs	r3, #0
}
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	370c      	adds	r7, #12
 8015bc2:	46bd      	mov	sp, r7
 8015bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc8:	4770      	bx	lr
	...

08015bcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8015bcc:	b580      	push	{r7, lr}
 8015bce:	b086      	sub	sp, #24
 8015bd0:	af00      	add	r7, sp, #0
 8015bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d101      	bne.n	8015bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8015bda:	2301      	movs	r3, #1
 8015bdc:	e267      	b.n	80160ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	f003 0301 	and.w	r3, r3, #1
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d075      	beq.n	8015cd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8015bea:	4b88      	ldr	r3, [pc, #544]	; (8015e0c <HAL_RCC_OscConfig+0x240>)
 8015bec:	689b      	ldr	r3, [r3, #8]
 8015bee:	f003 030c 	and.w	r3, r3, #12
 8015bf2:	2b04      	cmp	r3, #4
 8015bf4:	d00c      	beq.n	8015c10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8015bf6:	4b85      	ldr	r3, [pc, #532]	; (8015e0c <HAL_RCC_OscConfig+0x240>)
 8015bf8:	689b      	ldr	r3, [r3, #8]
 8015bfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8015bfe:	2b08      	cmp	r3, #8
 8015c00:	d112      	bne.n	8015c28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8015c02:	4b82      	ldr	r3, [pc, #520]	; (8015e0c <HAL_RCC_OscConfig+0x240>)
 8015c04:	685b      	ldr	r3, [r3, #4]
 8015c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015c0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8015c0e:	d10b      	bne.n	8015c28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015c10:	4b7e      	ldr	r3, [pc, #504]	; (8015e0c <HAL_RCC_OscConfig+0x240>)
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d05b      	beq.n	8015cd4 <HAL_RCC_OscConfig+0x108>
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	685b      	ldr	r3, [r3, #4]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d157      	bne.n	8015cd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8015c24:	2301      	movs	r3, #1
 8015c26:	e242      	b.n	80160ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	685b      	ldr	r3, [r3, #4]
 8015c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015c30:	d106      	bne.n	8015c40 <HAL_RCC_OscConfig+0x74>
 8015c32:	4b76      	ldr	r3, [pc, #472]	; (8015e0c <HAL_RCC_OscConfig+0x240>)
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	4a75      	ldr	r2, [pc, #468]	; (8015e0c <HAL_RCC_OscConfig+0x240>)
 8015c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015c3c:	6013      	str	r3, [r2, #0]
 8015c3e:	e01d      	b.n	8015c7c <HAL_RCC_OscConfig+0xb0>
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	685b      	ldr	r3, [r3, #4]
 8015c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8015c48:	d10c      	bne.n	8015c64 <HAL_RCC_OscConfig+0x98>
 8015c4a:	4b70      	ldr	r3, [pc, #448]	; (8015e0c <HAL_RCC_OscConfig+0x240>)
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	4a6f      	ldr	r2, [pc, #444]	; (8015e0c <HAL_RCC_OscConfig+0x240>)
 8015c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8015c54:	6013      	str	r3, [r2, #0]
 8015c56:	4b6d      	ldr	r3, [pc, #436]	; (8015e0c <HAL_RCC_OscConfig+0x240>)
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	4a6c      	ldr	r2, [pc, #432]	; (8015e0c <HAL_RCC_OscConfig+0x240>)
 8015c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015c60:	6013      	str	r3, [r2, #0]
 8015c62:	e00b      	b.n	8015c7c <HAL_RCC_OscConfig+0xb0>
 8015c64:	4b69      	ldr	r3, [pc, #420]	; (8015e0c <HAL_RCC_OscConfig+0x240>)
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	4a68      	ldr	r2, [pc, #416]	; (8015e0c <HAL_RCC_OscConfig+0x240>)
 8015c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015c6e:	6013      	str	r3, [r2, #0]
 8015c70:	4b66      	ldr	r3, [pc, #408]	; (8015e0c <HAL_RCC_OscConfig+0x240>)
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	4a65      	ldr	r2, [pc, #404]	; (8015e0c <HAL_RCC_OscConfig+0x240>)
 8015c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8015c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	685b      	ldr	r3, [r3, #4]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d013      	beq.n	8015cac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015c84:	f7ff fc16 	bl	80154b4 <HAL_GetTick>
 8015c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8015c8a:	e008      	b.n	8015c9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8015c8c:	f7ff fc12 	bl	80154b4 <HAL_GetTick>
 8015c90:	4602      	mov	r2, r0
 8015c92:	693b      	ldr	r3, [r7, #16]
 8015c94:	1ad3      	subs	r3, r2, r3
 8015c96:	2b64      	cmp	r3, #100	; 0x64
 8015c98:	d901      	bls.n	8015c9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8015c9a:	2303      	movs	r3, #3
 8015c9c:	e207      	b.n	80160ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8015c9e:	4b5b      	ldr	r3, [pc, #364]	; (8015e0c <HAL_RCC_OscConfig+0x240>)
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d0f0      	beq.n	8015c8c <HAL_RCC_OscConfig+0xc0>
 8015caa:	e014      	b.n	8015cd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015cac:	f7ff fc02 	bl	80154b4 <HAL_GetTick>
 8015cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8015cb2:	e008      	b.n	8015cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8015cb4:	f7ff fbfe 	bl	80154b4 <HAL_GetTick>
 8015cb8:	4602      	mov	r2, r0
 8015cba:	693b      	ldr	r3, [r7, #16]
 8015cbc:	1ad3      	subs	r3, r2, r3
 8015cbe:	2b64      	cmp	r3, #100	; 0x64
 8015cc0:	d901      	bls.n	8015cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8015cc2:	2303      	movs	r3, #3
 8015cc4:	e1f3      	b.n	80160ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8015cc6:	4b51      	ldr	r3, [pc, #324]	; (8015e0c <HAL_RCC_OscConfig+0x240>)
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d1f0      	bne.n	8015cb4 <HAL_RCC_OscConfig+0xe8>
 8015cd2:	e000      	b.n	8015cd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	f003 0302 	and.w	r3, r3, #2
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d063      	beq.n	8015daa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8015ce2:	4b4a      	ldr	r3, [pc, #296]	; (8015e0c <HAL_RCC_OscConfig+0x240>)
 8015ce4:	689b      	ldr	r3, [r3, #8]
 8015ce6:	f003 030c 	and.w	r3, r3, #12
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d00b      	beq.n	8015d06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8015cee:	4b47      	ldr	r3, [pc, #284]	; (8015e0c <HAL_RCC_OscConfig+0x240>)
 8015cf0:	689b      	ldr	r3, [r3, #8]
 8015cf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8015cf6:	2b08      	cmp	r3, #8
 8015cf8:	d11c      	bne.n	8015d34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8015cfa:	4b44      	ldr	r3, [pc, #272]	; (8015e0c <HAL_RCC_OscConfig+0x240>)
 8015cfc:	685b      	ldr	r3, [r3, #4]
 8015cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d116      	bne.n	8015d34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8015d06:	4b41      	ldr	r3, [pc, #260]	; (8015e0c <HAL_RCC_OscConfig+0x240>)
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	f003 0302 	and.w	r3, r3, #2
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d005      	beq.n	8015d1e <HAL_RCC_OscConfig+0x152>
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	68db      	ldr	r3, [r3, #12]
 8015d16:	2b01      	cmp	r3, #1
 8015d18:	d001      	beq.n	8015d1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8015d1a:	2301      	movs	r3, #1
 8015d1c:	e1c7      	b.n	80160ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015d1e:	4b3b      	ldr	r3, [pc, #236]	; (8015e0c <HAL_RCC_OscConfig+0x240>)
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	691b      	ldr	r3, [r3, #16]
 8015d2a:	00db      	lsls	r3, r3, #3
 8015d2c:	4937      	ldr	r1, [pc, #220]	; (8015e0c <HAL_RCC_OscConfig+0x240>)
 8015d2e:	4313      	orrs	r3, r2
 8015d30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8015d32:	e03a      	b.n	8015daa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	68db      	ldr	r3, [r3, #12]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d020      	beq.n	8015d7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8015d3c:	4b34      	ldr	r3, [pc, #208]	; (8015e10 <HAL_RCC_OscConfig+0x244>)
 8015d3e:	2201      	movs	r2, #1
 8015d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015d42:	f7ff fbb7 	bl	80154b4 <HAL_GetTick>
 8015d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8015d48:	e008      	b.n	8015d5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8015d4a:	f7ff fbb3 	bl	80154b4 <HAL_GetTick>
 8015d4e:	4602      	mov	r2, r0
 8015d50:	693b      	ldr	r3, [r7, #16]
 8015d52:	1ad3      	subs	r3, r2, r3
 8015d54:	2b02      	cmp	r3, #2
 8015d56:	d901      	bls.n	8015d5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8015d58:	2303      	movs	r3, #3
 8015d5a:	e1a8      	b.n	80160ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8015d5c:	4b2b      	ldr	r3, [pc, #172]	; (8015e0c <HAL_RCC_OscConfig+0x240>)
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	f003 0302 	and.w	r3, r3, #2
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d0f0      	beq.n	8015d4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015d68:	4b28      	ldr	r3, [pc, #160]	; (8015e0c <HAL_RCC_OscConfig+0x240>)
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	691b      	ldr	r3, [r3, #16]
 8015d74:	00db      	lsls	r3, r3, #3
 8015d76:	4925      	ldr	r1, [pc, #148]	; (8015e0c <HAL_RCC_OscConfig+0x240>)
 8015d78:	4313      	orrs	r3, r2
 8015d7a:	600b      	str	r3, [r1, #0]
 8015d7c:	e015      	b.n	8015daa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8015d7e:	4b24      	ldr	r3, [pc, #144]	; (8015e10 <HAL_RCC_OscConfig+0x244>)
 8015d80:	2200      	movs	r2, #0
 8015d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015d84:	f7ff fb96 	bl	80154b4 <HAL_GetTick>
 8015d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8015d8a:	e008      	b.n	8015d9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8015d8c:	f7ff fb92 	bl	80154b4 <HAL_GetTick>
 8015d90:	4602      	mov	r2, r0
 8015d92:	693b      	ldr	r3, [r7, #16]
 8015d94:	1ad3      	subs	r3, r2, r3
 8015d96:	2b02      	cmp	r3, #2
 8015d98:	d901      	bls.n	8015d9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8015d9a:	2303      	movs	r3, #3
 8015d9c:	e187      	b.n	80160ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8015d9e:	4b1b      	ldr	r3, [pc, #108]	; (8015e0c <HAL_RCC_OscConfig+0x240>)
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	f003 0302 	and.w	r3, r3, #2
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d1f0      	bne.n	8015d8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	f003 0308 	and.w	r3, r3, #8
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d036      	beq.n	8015e24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	695b      	ldr	r3, [r3, #20]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d016      	beq.n	8015dec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8015dbe:	4b15      	ldr	r3, [pc, #84]	; (8015e14 <HAL_RCC_OscConfig+0x248>)
 8015dc0:	2201      	movs	r2, #1
 8015dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015dc4:	f7ff fb76 	bl	80154b4 <HAL_GetTick>
 8015dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8015dca:	e008      	b.n	8015dde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015dcc:	f7ff fb72 	bl	80154b4 <HAL_GetTick>
 8015dd0:	4602      	mov	r2, r0
 8015dd2:	693b      	ldr	r3, [r7, #16]
 8015dd4:	1ad3      	subs	r3, r2, r3
 8015dd6:	2b02      	cmp	r3, #2
 8015dd8:	d901      	bls.n	8015dde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8015dda:	2303      	movs	r3, #3
 8015ddc:	e167      	b.n	80160ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8015dde:	4b0b      	ldr	r3, [pc, #44]	; (8015e0c <HAL_RCC_OscConfig+0x240>)
 8015de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015de2:	f003 0302 	and.w	r3, r3, #2
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d0f0      	beq.n	8015dcc <HAL_RCC_OscConfig+0x200>
 8015dea:	e01b      	b.n	8015e24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8015dec:	4b09      	ldr	r3, [pc, #36]	; (8015e14 <HAL_RCC_OscConfig+0x248>)
 8015dee:	2200      	movs	r2, #0
 8015df0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015df2:	f7ff fb5f 	bl	80154b4 <HAL_GetTick>
 8015df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8015df8:	e00e      	b.n	8015e18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015dfa:	f7ff fb5b 	bl	80154b4 <HAL_GetTick>
 8015dfe:	4602      	mov	r2, r0
 8015e00:	693b      	ldr	r3, [r7, #16]
 8015e02:	1ad3      	subs	r3, r2, r3
 8015e04:	2b02      	cmp	r3, #2
 8015e06:	d907      	bls.n	8015e18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8015e08:	2303      	movs	r3, #3
 8015e0a:	e150      	b.n	80160ae <HAL_RCC_OscConfig+0x4e2>
 8015e0c:	40023800 	.word	0x40023800
 8015e10:	42470000 	.word	0x42470000
 8015e14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8015e18:	4b88      	ldr	r3, [pc, #544]	; (801603c <HAL_RCC_OscConfig+0x470>)
 8015e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015e1c:	f003 0302 	and.w	r3, r3, #2
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d1ea      	bne.n	8015dfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	f003 0304 	and.w	r3, r3, #4
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	f000 8097 	beq.w	8015f60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8015e32:	2300      	movs	r3, #0
 8015e34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015e36:	4b81      	ldr	r3, [pc, #516]	; (801603c <HAL_RCC_OscConfig+0x470>)
 8015e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d10f      	bne.n	8015e62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015e42:	2300      	movs	r3, #0
 8015e44:	60bb      	str	r3, [r7, #8]
 8015e46:	4b7d      	ldr	r3, [pc, #500]	; (801603c <HAL_RCC_OscConfig+0x470>)
 8015e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e4a:	4a7c      	ldr	r2, [pc, #496]	; (801603c <HAL_RCC_OscConfig+0x470>)
 8015e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015e50:	6413      	str	r3, [r2, #64]	; 0x40
 8015e52:	4b7a      	ldr	r3, [pc, #488]	; (801603c <HAL_RCC_OscConfig+0x470>)
 8015e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015e5a:	60bb      	str	r3, [r7, #8]
 8015e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8015e5e:	2301      	movs	r3, #1
 8015e60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015e62:	4b77      	ldr	r3, [pc, #476]	; (8016040 <HAL_RCC_OscConfig+0x474>)
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d118      	bne.n	8015ea0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015e6e:	4b74      	ldr	r3, [pc, #464]	; (8016040 <HAL_RCC_OscConfig+0x474>)
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	4a73      	ldr	r2, [pc, #460]	; (8016040 <HAL_RCC_OscConfig+0x474>)
 8015e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015e7a:	f7ff fb1b 	bl	80154b4 <HAL_GetTick>
 8015e7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015e80:	e008      	b.n	8015e94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015e82:	f7ff fb17 	bl	80154b4 <HAL_GetTick>
 8015e86:	4602      	mov	r2, r0
 8015e88:	693b      	ldr	r3, [r7, #16]
 8015e8a:	1ad3      	subs	r3, r2, r3
 8015e8c:	2b02      	cmp	r3, #2
 8015e8e:	d901      	bls.n	8015e94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8015e90:	2303      	movs	r3, #3
 8015e92:	e10c      	b.n	80160ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015e94:	4b6a      	ldr	r3, [pc, #424]	; (8016040 <HAL_RCC_OscConfig+0x474>)
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d0f0      	beq.n	8015e82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	689b      	ldr	r3, [r3, #8]
 8015ea4:	2b01      	cmp	r3, #1
 8015ea6:	d106      	bne.n	8015eb6 <HAL_RCC_OscConfig+0x2ea>
 8015ea8:	4b64      	ldr	r3, [pc, #400]	; (801603c <HAL_RCC_OscConfig+0x470>)
 8015eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015eac:	4a63      	ldr	r2, [pc, #396]	; (801603c <HAL_RCC_OscConfig+0x470>)
 8015eae:	f043 0301 	orr.w	r3, r3, #1
 8015eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8015eb4:	e01c      	b.n	8015ef0 <HAL_RCC_OscConfig+0x324>
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	689b      	ldr	r3, [r3, #8]
 8015eba:	2b05      	cmp	r3, #5
 8015ebc:	d10c      	bne.n	8015ed8 <HAL_RCC_OscConfig+0x30c>
 8015ebe:	4b5f      	ldr	r3, [pc, #380]	; (801603c <HAL_RCC_OscConfig+0x470>)
 8015ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ec2:	4a5e      	ldr	r2, [pc, #376]	; (801603c <HAL_RCC_OscConfig+0x470>)
 8015ec4:	f043 0304 	orr.w	r3, r3, #4
 8015ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8015eca:	4b5c      	ldr	r3, [pc, #368]	; (801603c <HAL_RCC_OscConfig+0x470>)
 8015ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ece:	4a5b      	ldr	r2, [pc, #364]	; (801603c <HAL_RCC_OscConfig+0x470>)
 8015ed0:	f043 0301 	orr.w	r3, r3, #1
 8015ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8015ed6:	e00b      	b.n	8015ef0 <HAL_RCC_OscConfig+0x324>
 8015ed8:	4b58      	ldr	r3, [pc, #352]	; (801603c <HAL_RCC_OscConfig+0x470>)
 8015eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015edc:	4a57      	ldr	r2, [pc, #348]	; (801603c <HAL_RCC_OscConfig+0x470>)
 8015ede:	f023 0301 	bic.w	r3, r3, #1
 8015ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8015ee4:	4b55      	ldr	r3, [pc, #340]	; (801603c <HAL_RCC_OscConfig+0x470>)
 8015ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ee8:	4a54      	ldr	r2, [pc, #336]	; (801603c <HAL_RCC_OscConfig+0x470>)
 8015eea:	f023 0304 	bic.w	r3, r3, #4
 8015eee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	689b      	ldr	r3, [r3, #8]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d015      	beq.n	8015f24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015ef8:	f7ff fadc 	bl	80154b4 <HAL_GetTick>
 8015efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8015efe:	e00a      	b.n	8015f16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015f00:	f7ff fad8 	bl	80154b4 <HAL_GetTick>
 8015f04:	4602      	mov	r2, r0
 8015f06:	693b      	ldr	r3, [r7, #16]
 8015f08:	1ad3      	subs	r3, r2, r3
 8015f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8015f0e:	4293      	cmp	r3, r2
 8015f10:	d901      	bls.n	8015f16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8015f12:	2303      	movs	r3, #3
 8015f14:	e0cb      	b.n	80160ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8015f16:	4b49      	ldr	r3, [pc, #292]	; (801603c <HAL_RCC_OscConfig+0x470>)
 8015f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f1a:	f003 0302 	and.w	r3, r3, #2
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d0ee      	beq.n	8015f00 <HAL_RCC_OscConfig+0x334>
 8015f22:	e014      	b.n	8015f4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015f24:	f7ff fac6 	bl	80154b4 <HAL_GetTick>
 8015f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8015f2a:	e00a      	b.n	8015f42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015f2c:	f7ff fac2 	bl	80154b4 <HAL_GetTick>
 8015f30:	4602      	mov	r2, r0
 8015f32:	693b      	ldr	r3, [r7, #16]
 8015f34:	1ad3      	subs	r3, r2, r3
 8015f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8015f3a:	4293      	cmp	r3, r2
 8015f3c:	d901      	bls.n	8015f42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8015f3e:	2303      	movs	r3, #3
 8015f40:	e0b5      	b.n	80160ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8015f42:	4b3e      	ldr	r3, [pc, #248]	; (801603c <HAL_RCC_OscConfig+0x470>)
 8015f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f46:	f003 0302 	and.w	r3, r3, #2
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d1ee      	bne.n	8015f2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8015f4e:	7dfb      	ldrb	r3, [r7, #23]
 8015f50:	2b01      	cmp	r3, #1
 8015f52:	d105      	bne.n	8015f60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015f54:	4b39      	ldr	r3, [pc, #228]	; (801603c <HAL_RCC_OscConfig+0x470>)
 8015f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f58:	4a38      	ldr	r2, [pc, #224]	; (801603c <HAL_RCC_OscConfig+0x470>)
 8015f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8015f5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	699b      	ldr	r3, [r3, #24]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	f000 80a1 	beq.w	80160ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8015f6a:	4b34      	ldr	r3, [pc, #208]	; (801603c <HAL_RCC_OscConfig+0x470>)
 8015f6c:	689b      	ldr	r3, [r3, #8]
 8015f6e:	f003 030c 	and.w	r3, r3, #12
 8015f72:	2b08      	cmp	r3, #8
 8015f74:	d05c      	beq.n	8016030 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	699b      	ldr	r3, [r3, #24]
 8015f7a:	2b02      	cmp	r3, #2
 8015f7c:	d141      	bne.n	8016002 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015f7e:	4b31      	ldr	r3, [pc, #196]	; (8016044 <HAL_RCC_OscConfig+0x478>)
 8015f80:	2200      	movs	r2, #0
 8015f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015f84:	f7ff fa96 	bl	80154b4 <HAL_GetTick>
 8015f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8015f8a:	e008      	b.n	8015f9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015f8c:	f7ff fa92 	bl	80154b4 <HAL_GetTick>
 8015f90:	4602      	mov	r2, r0
 8015f92:	693b      	ldr	r3, [r7, #16]
 8015f94:	1ad3      	subs	r3, r2, r3
 8015f96:	2b02      	cmp	r3, #2
 8015f98:	d901      	bls.n	8015f9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8015f9a:	2303      	movs	r3, #3
 8015f9c:	e087      	b.n	80160ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8015f9e:	4b27      	ldr	r3, [pc, #156]	; (801603c <HAL_RCC_OscConfig+0x470>)
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d1f0      	bne.n	8015f8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	69da      	ldr	r2, [r3, #28]
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	6a1b      	ldr	r3, [r3, #32]
 8015fb2:	431a      	orrs	r2, r3
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fb8:	019b      	lsls	r3, r3, #6
 8015fba:	431a      	orrs	r2, r3
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015fc0:	085b      	lsrs	r3, r3, #1
 8015fc2:	3b01      	subs	r3, #1
 8015fc4:	041b      	lsls	r3, r3, #16
 8015fc6:	431a      	orrs	r2, r3
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fcc:	061b      	lsls	r3, r3, #24
 8015fce:	491b      	ldr	r1, [pc, #108]	; (801603c <HAL_RCC_OscConfig+0x470>)
 8015fd0:	4313      	orrs	r3, r2
 8015fd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8015fd4:	4b1b      	ldr	r3, [pc, #108]	; (8016044 <HAL_RCC_OscConfig+0x478>)
 8015fd6:	2201      	movs	r2, #1
 8015fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015fda:	f7ff fa6b 	bl	80154b4 <HAL_GetTick>
 8015fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8015fe0:	e008      	b.n	8015ff4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015fe2:	f7ff fa67 	bl	80154b4 <HAL_GetTick>
 8015fe6:	4602      	mov	r2, r0
 8015fe8:	693b      	ldr	r3, [r7, #16]
 8015fea:	1ad3      	subs	r3, r2, r3
 8015fec:	2b02      	cmp	r3, #2
 8015fee:	d901      	bls.n	8015ff4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8015ff0:	2303      	movs	r3, #3
 8015ff2:	e05c      	b.n	80160ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8015ff4:	4b11      	ldr	r3, [pc, #68]	; (801603c <HAL_RCC_OscConfig+0x470>)
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d0f0      	beq.n	8015fe2 <HAL_RCC_OscConfig+0x416>
 8016000:	e054      	b.n	80160ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8016002:	4b10      	ldr	r3, [pc, #64]	; (8016044 <HAL_RCC_OscConfig+0x478>)
 8016004:	2200      	movs	r2, #0
 8016006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016008:	f7ff fa54 	bl	80154b4 <HAL_GetTick>
 801600c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801600e:	e008      	b.n	8016022 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8016010:	f7ff fa50 	bl	80154b4 <HAL_GetTick>
 8016014:	4602      	mov	r2, r0
 8016016:	693b      	ldr	r3, [r7, #16]
 8016018:	1ad3      	subs	r3, r2, r3
 801601a:	2b02      	cmp	r3, #2
 801601c:	d901      	bls.n	8016022 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 801601e:	2303      	movs	r3, #3
 8016020:	e045      	b.n	80160ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8016022:	4b06      	ldr	r3, [pc, #24]	; (801603c <HAL_RCC_OscConfig+0x470>)
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801602a:	2b00      	cmp	r3, #0
 801602c:	d1f0      	bne.n	8016010 <HAL_RCC_OscConfig+0x444>
 801602e:	e03d      	b.n	80160ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	699b      	ldr	r3, [r3, #24]
 8016034:	2b01      	cmp	r3, #1
 8016036:	d107      	bne.n	8016048 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8016038:	2301      	movs	r3, #1
 801603a:	e038      	b.n	80160ae <HAL_RCC_OscConfig+0x4e2>
 801603c:	40023800 	.word	0x40023800
 8016040:	40007000 	.word	0x40007000
 8016044:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8016048:	4b1b      	ldr	r3, [pc, #108]	; (80160b8 <HAL_RCC_OscConfig+0x4ec>)
 801604a:	685b      	ldr	r3, [r3, #4]
 801604c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	699b      	ldr	r3, [r3, #24]
 8016052:	2b01      	cmp	r3, #1
 8016054:	d028      	beq.n	80160a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8016060:	429a      	cmp	r2, r3
 8016062:	d121      	bne.n	80160a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801606e:	429a      	cmp	r2, r3
 8016070:	d11a      	bne.n	80160a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8016072:	68fa      	ldr	r2, [r7, #12]
 8016074:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8016078:	4013      	ands	r3, r2
 801607a:	687a      	ldr	r2, [r7, #4]
 801607c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801607e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8016080:	4293      	cmp	r3, r2
 8016082:	d111      	bne.n	80160a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801608e:	085b      	lsrs	r3, r3, #1
 8016090:	3b01      	subs	r3, #1
 8016092:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8016094:	429a      	cmp	r2, r3
 8016096:	d107      	bne.n	80160a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80160a4:	429a      	cmp	r2, r3
 80160a6:	d001      	beq.n	80160ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80160a8:	2301      	movs	r3, #1
 80160aa:	e000      	b.n	80160ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80160ac:	2300      	movs	r3, #0
}
 80160ae:	4618      	mov	r0, r3
 80160b0:	3718      	adds	r7, #24
 80160b2:	46bd      	mov	sp, r7
 80160b4:	bd80      	pop	{r7, pc}
 80160b6:	bf00      	nop
 80160b8:	40023800 	.word	0x40023800

080160bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b084      	sub	sp, #16
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	6078      	str	r0, [r7, #4]
 80160c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d101      	bne.n	80160d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80160cc:	2301      	movs	r3, #1
 80160ce:	e0cc      	b.n	801626a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80160d0:	4b68      	ldr	r3, [pc, #416]	; (8016274 <HAL_RCC_ClockConfig+0x1b8>)
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	f003 0307 	and.w	r3, r3, #7
 80160d8:	683a      	ldr	r2, [r7, #0]
 80160da:	429a      	cmp	r2, r3
 80160dc:	d90c      	bls.n	80160f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80160de:	4b65      	ldr	r3, [pc, #404]	; (8016274 <HAL_RCC_ClockConfig+0x1b8>)
 80160e0:	683a      	ldr	r2, [r7, #0]
 80160e2:	b2d2      	uxtb	r2, r2
 80160e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80160e6:	4b63      	ldr	r3, [pc, #396]	; (8016274 <HAL_RCC_ClockConfig+0x1b8>)
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	f003 0307 	and.w	r3, r3, #7
 80160ee:	683a      	ldr	r2, [r7, #0]
 80160f0:	429a      	cmp	r2, r3
 80160f2:	d001      	beq.n	80160f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80160f4:	2301      	movs	r3, #1
 80160f6:	e0b8      	b.n	801626a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	681b      	ldr	r3, [r3, #0]
 80160fc:	f003 0302 	and.w	r3, r3, #2
 8016100:	2b00      	cmp	r3, #0
 8016102:	d020      	beq.n	8016146 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	681b      	ldr	r3, [r3, #0]
 8016108:	f003 0304 	and.w	r3, r3, #4
 801610c:	2b00      	cmp	r3, #0
 801610e:	d005      	beq.n	801611c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8016110:	4b59      	ldr	r3, [pc, #356]	; (8016278 <HAL_RCC_ClockConfig+0x1bc>)
 8016112:	689b      	ldr	r3, [r3, #8]
 8016114:	4a58      	ldr	r2, [pc, #352]	; (8016278 <HAL_RCC_ClockConfig+0x1bc>)
 8016116:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801611a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	f003 0308 	and.w	r3, r3, #8
 8016124:	2b00      	cmp	r3, #0
 8016126:	d005      	beq.n	8016134 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8016128:	4b53      	ldr	r3, [pc, #332]	; (8016278 <HAL_RCC_ClockConfig+0x1bc>)
 801612a:	689b      	ldr	r3, [r3, #8]
 801612c:	4a52      	ldr	r2, [pc, #328]	; (8016278 <HAL_RCC_ClockConfig+0x1bc>)
 801612e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8016132:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8016134:	4b50      	ldr	r3, [pc, #320]	; (8016278 <HAL_RCC_ClockConfig+0x1bc>)
 8016136:	689b      	ldr	r3, [r3, #8]
 8016138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	689b      	ldr	r3, [r3, #8]
 8016140:	494d      	ldr	r1, [pc, #308]	; (8016278 <HAL_RCC_ClockConfig+0x1bc>)
 8016142:	4313      	orrs	r3, r2
 8016144:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	f003 0301 	and.w	r3, r3, #1
 801614e:	2b00      	cmp	r3, #0
 8016150:	d044      	beq.n	80161dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	685b      	ldr	r3, [r3, #4]
 8016156:	2b01      	cmp	r3, #1
 8016158:	d107      	bne.n	801616a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801615a:	4b47      	ldr	r3, [pc, #284]	; (8016278 <HAL_RCC_ClockConfig+0x1bc>)
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016162:	2b00      	cmp	r3, #0
 8016164:	d119      	bne.n	801619a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8016166:	2301      	movs	r3, #1
 8016168:	e07f      	b.n	801626a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	685b      	ldr	r3, [r3, #4]
 801616e:	2b02      	cmp	r3, #2
 8016170:	d003      	beq.n	801617a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8016176:	2b03      	cmp	r3, #3
 8016178:	d107      	bne.n	801618a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801617a:	4b3f      	ldr	r3, [pc, #252]	; (8016278 <HAL_RCC_ClockConfig+0x1bc>)
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016182:	2b00      	cmp	r3, #0
 8016184:	d109      	bne.n	801619a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8016186:	2301      	movs	r3, #1
 8016188:	e06f      	b.n	801626a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801618a:	4b3b      	ldr	r3, [pc, #236]	; (8016278 <HAL_RCC_ClockConfig+0x1bc>)
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	f003 0302 	and.w	r3, r3, #2
 8016192:	2b00      	cmp	r3, #0
 8016194:	d101      	bne.n	801619a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8016196:	2301      	movs	r3, #1
 8016198:	e067      	b.n	801626a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801619a:	4b37      	ldr	r3, [pc, #220]	; (8016278 <HAL_RCC_ClockConfig+0x1bc>)
 801619c:	689b      	ldr	r3, [r3, #8]
 801619e:	f023 0203 	bic.w	r2, r3, #3
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	685b      	ldr	r3, [r3, #4]
 80161a6:	4934      	ldr	r1, [pc, #208]	; (8016278 <HAL_RCC_ClockConfig+0x1bc>)
 80161a8:	4313      	orrs	r3, r2
 80161aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80161ac:	f7ff f982 	bl	80154b4 <HAL_GetTick>
 80161b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80161b2:	e00a      	b.n	80161ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80161b4:	f7ff f97e 	bl	80154b4 <HAL_GetTick>
 80161b8:	4602      	mov	r2, r0
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	1ad3      	subs	r3, r2, r3
 80161be:	f241 3288 	movw	r2, #5000	; 0x1388
 80161c2:	4293      	cmp	r3, r2
 80161c4:	d901      	bls.n	80161ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80161c6:	2303      	movs	r3, #3
 80161c8:	e04f      	b.n	801626a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80161ca:	4b2b      	ldr	r3, [pc, #172]	; (8016278 <HAL_RCC_ClockConfig+0x1bc>)
 80161cc:	689b      	ldr	r3, [r3, #8]
 80161ce:	f003 020c 	and.w	r2, r3, #12
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	685b      	ldr	r3, [r3, #4]
 80161d6:	009b      	lsls	r3, r3, #2
 80161d8:	429a      	cmp	r2, r3
 80161da:	d1eb      	bne.n	80161b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80161dc:	4b25      	ldr	r3, [pc, #148]	; (8016274 <HAL_RCC_ClockConfig+0x1b8>)
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	f003 0307 	and.w	r3, r3, #7
 80161e4:	683a      	ldr	r2, [r7, #0]
 80161e6:	429a      	cmp	r2, r3
 80161e8:	d20c      	bcs.n	8016204 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80161ea:	4b22      	ldr	r3, [pc, #136]	; (8016274 <HAL_RCC_ClockConfig+0x1b8>)
 80161ec:	683a      	ldr	r2, [r7, #0]
 80161ee:	b2d2      	uxtb	r2, r2
 80161f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80161f2:	4b20      	ldr	r3, [pc, #128]	; (8016274 <HAL_RCC_ClockConfig+0x1b8>)
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	f003 0307 	and.w	r3, r3, #7
 80161fa:	683a      	ldr	r2, [r7, #0]
 80161fc:	429a      	cmp	r2, r3
 80161fe:	d001      	beq.n	8016204 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8016200:	2301      	movs	r3, #1
 8016202:	e032      	b.n	801626a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	681b      	ldr	r3, [r3, #0]
 8016208:	f003 0304 	and.w	r3, r3, #4
 801620c:	2b00      	cmp	r3, #0
 801620e:	d008      	beq.n	8016222 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8016210:	4b19      	ldr	r3, [pc, #100]	; (8016278 <HAL_RCC_ClockConfig+0x1bc>)
 8016212:	689b      	ldr	r3, [r3, #8]
 8016214:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	68db      	ldr	r3, [r3, #12]
 801621c:	4916      	ldr	r1, [pc, #88]	; (8016278 <HAL_RCC_ClockConfig+0x1bc>)
 801621e:	4313      	orrs	r3, r2
 8016220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	f003 0308 	and.w	r3, r3, #8
 801622a:	2b00      	cmp	r3, #0
 801622c:	d009      	beq.n	8016242 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801622e:	4b12      	ldr	r3, [pc, #72]	; (8016278 <HAL_RCC_ClockConfig+0x1bc>)
 8016230:	689b      	ldr	r3, [r3, #8]
 8016232:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	691b      	ldr	r3, [r3, #16]
 801623a:	00db      	lsls	r3, r3, #3
 801623c:	490e      	ldr	r1, [pc, #56]	; (8016278 <HAL_RCC_ClockConfig+0x1bc>)
 801623e:	4313      	orrs	r3, r2
 8016240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8016242:	f000 f821 	bl	8016288 <HAL_RCC_GetSysClockFreq>
 8016246:	4602      	mov	r2, r0
 8016248:	4b0b      	ldr	r3, [pc, #44]	; (8016278 <HAL_RCC_ClockConfig+0x1bc>)
 801624a:	689b      	ldr	r3, [r3, #8]
 801624c:	091b      	lsrs	r3, r3, #4
 801624e:	f003 030f 	and.w	r3, r3, #15
 8016252:	490a      	ldr	r1, [pc, #40]	; (801627c <HAL_RCC_ClockConfig+0x1c0>)
 8016254:	5ccb      	ldrb	r3, [r1, r3]
 8016256:	fa22 f303 	lsr.w	r3, r2, r3
 801625a:	4a09      	ldr	r2, [pc, #36]	; (8016280 <HAL_RCC_ClockConfig+0x1c4>)
 801625c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801625e:	4b09      	ldr	r3, [pc, #36]	; (8016284 <HAL_RCC_ClockConfig+0x1c8>)
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	4618      	mov	r0, r3
 8016264:	f7fc fb80 	bl	8012968 <HAL_InitTick>

  return HAL_OK;
 8016268:	2300      	movs	r3, #0
}
 801626a:	4618      	mov	r0, r3
 801626c:	3710      	adds	r7, #16
 801626e:	46bd      	mov	sp, r7
 8016270:	bd80      	pop	{r7, pc}
 8016272:	bf00      	nop
 8016274:	40023c00 	.word	0x40023c00
 8016278:	40023800 	.word	0x40023800
 801627c:	08033ef4 	.word	0x08033ef4
 8016280:	20000000 	.word	0x20000000
 8016284:	200000bc 	.word	0x200000bc

08016288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8016288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801628c:	b094      	sub	sp, #80	; 0x50
 801628e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8016290:	2300      	movs	r3, #0
 8016292:	647b      	str	r3, [r7, #68]	; 0x44
 8016294:	2300      	movs	r3, #0
 8016296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016298:	2300      	movs	r3, #0
 801629a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 801629c:	2300      	movs	r3, #0
 801629e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80162a0:	4b79      	ldr	r3, [pc, #484]	; (8016488 <HAL_RCC_GetSysClockFreq+0x200>)
 80162a2:	689b      	ldr	r3, [r3, #8]
 80162a4:	f003 030c 	and.w	r3, r3, #12
 80162a8:	2b08      	cmp	r3, #8
 80162aa:	d00d      	beq.n	80162c8 <HAL_RCC_GetSysClockFreq+0x40>
 80162ac:	2b08      	cmp	r3, #8
 80162ae:	f200 80e1 	bhi.w	8016474 <HAL_RCC_GetSysClockFreq+0x1ec>
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d002      	beq.n	80162bc <HAL_RCC_GetSysClockFreq+0x34>
 80162b6:	2b04      	cmp	r3, #4
 80162b8:	d003      	beq.n	80162c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80162ba:	e0db      	b.n	8016474 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80162bc:	4b73      	ldr	r3, [pc, #460]	; (801648c <HAL_RCC_GetSysClockFreq+0x204>)
 80162be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80162c0:	e0db      	b.n	801647a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80162c2:	4b73      	ldr	r3, [pc, #460]	; (8016490 <HAL_RCC_GetSysClockFreq+0x208>)
 80162c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80162c6:	e0d8      	b.n	801647a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80162c8:	4b6f      	ldr	r3, [pc, #444]	; (8016488 <HAL_RCC_GetSysClockFreq+0x200>)
 80162ca:	685b      	ldr	r3, [r3, #4]
 80162cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80162d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80162d2:	4b6d      	ldr	r3, [pc, #436]	; (8016488 <HAL_RCC_GetSysClockFreq+0x200>)
 80162d4:	685b      	ldr	r3, [r3, #4]
 80162d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d063      	beq.n	80163a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80162de:	4b6a      	ldr	r3, [pc, #424]	; (8016488 <HAL_RCC_GetSysClockFreq+0x200>)
 80162e0:	685b      	ldr	r3, [r3, #4]
 80162e2:	099b      	lsrs	r3, r3, #6
 80162e4:	2200      	movs	r2, #0
 80162e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80162e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80162ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80162f0:	633b      	str	r3, [r7, #48]	; 0x30
 80162f2:	2300      	movs	r3, #0
 80162f4:	637b      	str	r3, [r7, #52]	; 0x34
 80162f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80162fa:	4622      	mov	r2, r4
 80162fc:	462b      	mov	r3, r5
 80162fe:	f04f 0000 	mov.w	r0, #0
 8016302:	f04f 0100 	mov.w	r1, #0
 8016306:	0159      	lsls	r1, r3, #5
 8016308:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801630c:	0150      	lsls	r0, r2, #5
 801630e:	4602      	mov	r2, r0
 8016310:	460b      	mov	r3, r1
 8016312:	4621      	mov	r1, r4
 8016314:	1a51      	subs	r1, r2, r1
 8016316:	6139      	str	r1, [r7, #16]
 8016318:	4629      	mov	r1, r5
 801631a:	eb63 0301 	sbc.w	r3, r3, r1
 801631e:	617b      	str	r3, [r7, #20]
 8016320:	f04f 0200 	mov.w	r2, #0
 8016324:	f04f 0300 	mov.w	r3, #0
 8016328:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801632c:	4659      	mov	r1, fp
 801632e:	018b      	lsls	r3, r1, #6
 8016330:	4651      	mov	r1, sl
 8016332:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8016336:	4651      	mov	r1, sl
 8016338:	018a      	lsls	r2, r1, #6
 801633a:	4651      	mov	r1, sl
 801633c:	ebb2 0801 	subs.w	r8, r2, r1
 8016340:	4659      	mov	r1, fp
 8016342:	eb63 0901 	sbc.w	r9, r3, r1
 8016346:	f04f 0200 	mov.w	r2, #0
 801634a:	f04f 0300 	mov.w	r3, #0
 801634e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8016352:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8016356:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801635a:	4690      	mov	r8, r2
 801635c:	4699      	mov	r9, r3
 801635e:	4623      	mov	r3, r4
 8016360:	eb18 0303 	adds.w	r3, r8, r3
 8016364:	60bb      	str	r3, [r7, #8]
 8016366:	462b      	mov	r3, r5
 8016368:	eb49 0303 	adc.w	r3, r9, r3
 801636c:	60fb      	str	r3, [r7, #12]
 801636e:	f04f 0200 	mov.w	r2, #0
 8016372:	f04f 0300 	mov.w	r3, #0
 8016376:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801637a:	4629      	mov	r1, r5
 801637c:	024b      	lsls	r3, r1, #9
 801637e:	4621      	mov	r1, r4
 8016380:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8016384:	4621      	mov	r1, r4
 8016386:	024a      	lsls	r2, r1, #9
 8016388:	4610      	mov	r0, r2
 801638a:	4619      	mov	r1, r3
 801638c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801638e:	2200      	movs	r2, #0
 8016390:	62bb      	str	r3, [r7, #40]	; 0x28
 8016392:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016394:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8016398:	f7fa fc8e 	bl	8010cb8 <__aeabi_uldivmod>
 801639c:	4602      	mov	r2, r0
 801639e:	460b      	mov	r3, r1
 80163a0:	4613      	mov	r3, r2
 80163a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80163a4:	e058      	b.n	8016458 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80163a6:	4b38      	ldr	r3, [pc, #224]	; (8016488 <HAL_RCC_GetSysClockFreq+0x200>)
 80163a8:	685b      	ldr	r3, [r3, #4]
 80163aa:	099b      	lsrs	r3, r3, #6
 80163ac:	2200      	movs	r2, #0
 80163ae:	4618      	mov	r0, r3
 80163b0:	4611      	mov	r1, r2
 80163b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80163b6:	623b      	str	r3, [r7, #32]
 80163b8:	2300      	movs	r3, #0
 80163ba:	627b      	str	r3, [r7, #36]	; 0x24
 80163bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80163c0:	4642      	mov	r2, r8
 80163c2:	464b      	mov	r3, r9
 80163c4:	f04f 0000 	mov.w	r0, #0
 80163c8:	f04f 0100 	mov.w	r1, #0
 80163cc:	0159      	lsls	r1, r3, #5
 80163ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80163d2:	0150      	lsls	r0, r2, #5
 80163d4:	4602      	mov	r2, r0
 80163d6:	460b      	mov	r3, r1
 80163d8:	4641      	mov	r1, r8
 80163da:	ebb2 0a01 	subs.w	sl, r2, r1
 80163de:	4649      	mov	r1, r9
 80163e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80163e4:	f04f 0200 	mov.w	r2, #0
 80163e8:	f04f 0300 	mov.w	r3, #0
 80163ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80163f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80163f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80163f8:	ebb2 040a 	subs.w	r4, r2, sl
 80163fc:	eb63 050b 	sbc.w	r5, r3, fp
 8016400:	f04f 0200 	mov.w	r2, #0
 8016404:	f04f 0300 	mov.w	r3, #0
 8016408:	00eb      	lsls	r3, r5, #3
 801640a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801640e:	00e2      	lsls	r2, r4, #3
 8016410:	4614      	mov	r4, r2
 8016412:	461d      	mov	r5, r3
 8016414:	4643      	mov	r3, r8
 8016416:	18e3      	adds	r3, r4, r3
 8016418:	603b      	str	r3, [r7, #0]
 801641a:	464b      	mov	r3, r9
 801641c:	eb45 0303 	adc.w	r3, r5, r3
 8016420:	607b      	str	r3, [r7, #4]
 8016422:	f04f 0200 	mov.w	r2, #0
 8016426:	f04f 0300 	mov.w	r3, #0
 801642a:	e9d7 4500 	ldrd	r4, r5, [r7]
 801642e:	4629      	mov	r1, r5
 8016430:	028b      	lsls	r3, r1, #10
 8016432:	4621      	mov	r1, r4
 8016434:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8016438:	4621      	mov	r1, r4
 801643a:	028a      	lsls	r2, r1, #10
 801643c:	4610      	mov	r0, r2
 801643e:	4619      	mov	r1, r3
 8016440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016442:	2200      	movs	r2, #0
 8016444:	61bb      	str	r3, [r7, #24]
 8016446:	61fa      	str	r2, [r7, #28]
 8016448:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801644c:	f7fa fc34 	bl	8010cb8 <__aeabi_uldivmod>
 8016450:	4602      	mov	r2, r0
 8016452:	460b      	mov	r3, r1
 8016454:	4613      	mov	r3, r2
 8016456:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8016458:	4b0b      	ldr	r3, [pc, #44]	; (8016488 <HAL_RCC_GetSysClockFreq+0x200>)
 801645a:	685b      	ldr	r3, [r3, #4]
 801645c:	0c1b      	lsrs	r3, r3, #16
 801645e:	f003 0303 	and.w	r3, r3, #3
 8016462:	3301      	adds	r3, #1
 8016464:	005b      	lsls	r3, r3, #1
 8016466:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8016468:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801646a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801646c:	fbb2 f3f3 	udiv	r3, r2, r3
 8016470:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8016472:	e002      	b.n	801647a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8016474:	4b05      	ldr	r3, [pc, #20]	; (801648c <HAL_RCC_GetSysClockFreq+0x204>)
 8016476:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8016478:	bf00      	nop
    }
  }
  return sysclockfreq;
 801647a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 801647c:	4618      	mov	r0, r3
 801647e:	3750      	adds	r7, #80	; 0x50
 8016480:	46bd      	mov	sp, r7
 8016482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016486:	bf00      	nop
 8016488:	40023800 	.word	0x40023800
 801648c:	00f42400 	.word	0x00f42400
 8016490:	007a1200 	.word	0x007a1200

08016494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8016494:	b480      	push	{r7}
 8016496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8016498:	4b03      	ldr	r3, [pc, #12]	; (80164a8 <HAL_RCC_GetHCLKFreq+0x14>)
 801649a:	681b      	ldr	r3, [r3, #0]
}
 801649c:	4618      	mov	r0, r3
 801649e:	46bd      	mov	sp, r7
 80164a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a4:	4770      	bx	lr
 80164a6:	bf00      	nop
 80164a8:	20000000 	.word	0x20000000

080164ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80164ac:	b580      	push	{r7, lr}
 80164ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80164b0:	f7ff fff0 	bl	8016494 <HAL_RCC_GetHCLKFreq>
 80164b4:	4602      	mov	r2, r0
 80164b6:	4b05      	ldr	r3, [pc, #20]	; (80164cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80164b8:	689b      	ldr	r3, [r3, #8]
 80164ba:	0a9b      	lsrs	r3, r3, #10
 80164bc:	f003 0307 	and.w	r3, r3, #7
 80164c0:	4903      	ldr	r1, [pc, #12]	; (80164d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80164c2:	5ccb      	ldrb	r3, [r1, r3]
 80164c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80164c8:	4618      	mov	r0, r3
 80164ca:	bd80      	pop	{r7, pc}
 80164cc:	40023800 	.word	0x40023800
 80164d0:	08033f04 	.word	0x08033f04

080164d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80164d4:	b580      	push	{r7, lr}
 80164d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80164d8:	f7ff ffdc 	bl	8016494 <HAL_RCC_GetHCLKFreq>
 80164dc:	4602      	mov	r2, r0
 80164de:	4b05      	ldr	r3, [pc, #20]	; (80164f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80164e0:	689b      	ldr	r3, [r3, #8]
 80164e2:	0b5b      	lsrs	r3, r3, #13
 80164e4:	f003 0307 	and.w	r3, r3, #7
 80164e8:	4903      	ldr	r1, [pc, #12]	; (80164f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80164ea:	5ccb      	ldrb	r3, [r1, r3]
 80164ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80164f0:	4618      	mov	r0, r3
 80164f2:	bd80      	pop	{r7, pc}
 80164f4:	40023800 	.word	0x40023800
 80164f8:	08033f04 	.word	0x08033f04

080164fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80164fc:	b480      	push	{r7}
 80164fe:	b083      	sub	sp, #12
 8016500:	af00      	add	r7, sp, #0
 8016502:	6078      	str	r0, [r7, #4]
 8016504:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	220f      	movs	r2, #15
 801650a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801650c:	4b12      	ldr	r3, [pc, #72]	; (8016558 <HAL_RCC_GetClockConfig+0x5c>)
 801650e:	689b      	ldr	r3, [r3, #8]
 8016510:	f003 0203 	and.w	r2, r3, #3
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8016518:	4b0f      	ldr	r3, [pc, #60]	; (8016558 <HAL_RCC_GetClockConfig+0x5c>)
 801651a:	689b      	ldr	r3, [r3, #8]
 801651c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8016524:	4b0c      	ldr	r3, [pc, #48]	; (8016558 <HAL_RCC_GetClockConfig+0x5c>)
 8016526:	689b      	ldr	r3, [r3, #8]
 8016528:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8016530:	4b09      	ldr	r3, [pc, #36]	; (8016558 <HAL_RCC_GetClockConfig+0x5c>)
 8016532:	689b      	ldr	r3, [r3, #8]
 8016534:	08db      	lsrs	r3, r3, #3
 8016536:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801653e:	4b07      	ldr	r3, [pc, #28]	; (801655c <HAL_RCC_GetClockConfig+0x60>)
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	f003 0207 	and.w	r2, r3, #7
 8016546:	683b      	ldr	r3, [r7, #0]
 8016548:	601a      	str	r2, [r3, #0]
}
 801654a:	bf00      	nop
 801654c:	370c      	adds	r7, #12
 801654e:	46bd      	mov	sp, r7
 8016550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016554:	4770      	bx	lr
 8016556:	bf00      	nop
 8016558:	40023800 	.word	0x40023800
 801655c:	40023c00 	.word	0x40023c00

08016560 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8016560:	b580      	push	{r7, lr}
 8016562:	b082      	sub	sp, #8
 8016564:	af00      	add	r7, sp, #0
 8016566:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	2b00      	cmp	r3, #0
 801656c:	d101      	bne.n	8016572 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801656e:	2301      	movs	r3, #1
 8016570:	e07b      	b.n	801666a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016576:	2b00      	cmp	r3, #0
 8016578:	d108      	bne.n	801658c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	685b      	ldr	r3, [r3, #4]
 801657e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016582:	d009      	beq.n	8016598 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	2200      	movs	r2, #0
 8016588:	61da      	str	r2, [r3, #28]
 801658a:	e005      	b.n	8016598 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	2200      	movs	r2, #0
 8016590:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	2200      	movs	r2, #0
 8016596:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	2200      	movs	r2, #0
 801659c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80165a4:	b2db      	uxtb	r3, r3
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d106      	bne.n	80165b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	2200      	movs	r2, #0
 80165ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80165b2:	6878      	ldr	r0, [r7, #4]
 80165b4:	f7fc f90a 	bl	80127cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	2202      	movs	r2, #2
 80165bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	681a      	ldr	r2, [r3, #0]
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80165ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	685b      	ldr	r3, [r3, #4]
 80165d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	689b      	ldr	r3, [r3, #8]
 80165dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80165e0:	431a      	orrs	r2, r3
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	68db      	ldr	r3, [r3, #12]
 80165e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80165ea:	431a      	orrs	r2, r3
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	691b      	ldr	r3, [r3, #16]
 80165f0:	f003 0302 	and.w	r3, r3, #2
 80165f4:	431a      	orrs	r2, r3
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	695b      	ldr	r3, [r3, #20]
 80165fa:	f003 0301 	and.w	r3, r3, #1
 80165fe:	431a      	orrs	r2, r3
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	699b      	ldr	r3, [r3, #24]
 8016604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016608:	431a      	orrs	r2, r3
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	69db      	ldr	r3, [r3, #28]
 801660e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8016612:	431a      	orrs	r2, r3
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	6a1b      	ldr	r3, [r3, #32]
 8016618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801661c:	ea42 0103 	orr.w	r1, r2, r3
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016624:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	430a      	orrs	r2, r1
 801662e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	699b      	ldr	r3, [r3, #24]
 8016634:	0c1b      	lsrs	r3, r3, #16
 8016636:	f003 0104 	and.w	r1, r3, #4
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801663e:	f003 0210 	and.w	r2, r3, #16
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	430a      	orrs	r2, r1
 8016648:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	69da      	ldr	r2, [r3, #28]
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8016658:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	2200      	movs	r2, #0
 801665e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	2201      	movs	r2, #1
 8016664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8016668:	2300      	movs	r3, #0
}
 801666a:	4618      	mov	r0, r3
 801666c:	3708      	adds	r7, #8
 801666e:	46bd      	mov	sp, r7
 8016670:	bd80      	pop	{r7, pc}

08016672 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016672:	b580      	push	{r7, lr}
 8016674:	b088      	sub	sp, #32
 8016676:	af00      	add	r7, sp, #0
 8016678:	60f8      	str	r0, [r7, #12]
 801667a:	60b9      	str	r1, [r7, #8]
 801667c:	603b      	str	r3, [r7, #0]
 801667e:	4613      	mov	r3, r2
 8016680:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8016682:	2300      	movs	r3, #0
 8016684:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801668c:	2b01      	cmp	r3, #1
 801668e:	d101      	bne.n	8016694 <HAL_SPI_Transmit+0x22>
 8016690:	2302      	movs	r3, #2
 8016692:	e12d      	b.n	80168f0 <HAL_SPI_Transmit+0x27e>
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	2201      	movs	r2, #1
 8016698:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801669c:	f7fe ff0a 	bl	80154b4 <HAL_GetTick>
 80166a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80166a2:	88fb      	ldrh	r3, [r7, #6]
 80166a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80166ac:	b2db      	uxtb	r3, r3
 80166ae:	2b01      	cmp	r3, #1
 80166b0:	d002      	beq.n	80166b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80166b2:	2302      	movs	r3, #2
 80166b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80166b6:	e116      	b.n	80168e6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80166b8:	68bb      	ldr	r3, [r7, #8]
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d002      	beq.n	80166c4 <HAL_SPI_Transmit+0x52>
 80166be:	88fb      	ldrh	r3, [r7, #6]
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d102      	bne.n	80166ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80166c4:	2301      	movs	r3, #1
 80166c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80166c8:	e10d      	b.n	80168e6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	2203      	movs	r2, #3
 80166ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	2200      	movs	r2, #0
 80166d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	68ba      	ldr	r2, [r7, #8]
 80166dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	88fa      	ldrh	r2, [r7, #6]
 80166e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	88fa      	ldrh	r2, [r7, #6]
 80166e8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80166ea:	68fb      	ldr	r3, [r7, #12]
 80166ec:	2200      	movs	r2, #0
 80166ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80166f0:	68fb      	ldr	r3, [r7, #12]
 80166f2:	2200      	movs	r2, #0
 80166f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80166f6:	68fb      	ldr	r3, [r7, #12]
 80166f8:	2200      	movs	r2, #0
 80166fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	2200      	movs	r2, #0
 8016700:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	2200      	movs	r2, #0
 8016706:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	689b      	ldr	r3, [r3, #8]
 801670c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016710:	d10f      	bne.n	8016732 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8016712:	68fb      	ldr	r3, [r7, #12]
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	681a      	ldr	r2, [r3, #0]
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016720:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	681a      	ldr	r2, [r3, #0]
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8016730:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801673c:	2b40      	cmp	r3, #64	; 0x40
 801673e:	d007      	beq.n	8016750 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8016740:	68fb      	ldr	r3, [r7, #12]
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	681a      	ldr	r2, [r3, #0]
 8016746:	68fb      	ldr	r3, [r7, #12]
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801674e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	68db      	ldr	r3, [r3, #12]
 8016754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016758:	d14f      	bne.n	80167fa <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	685b      	ldr	r3, [r3, #4]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d002      	beq.n	8016768 <HAL_SPI_Transmit+0xf6>
 8016762:	8afb      	ldrh	r3, [r7, #22]
 8016764:	2b01      	cmp	r3, #1
 8016766:	d142      	bne.n	80167ee <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801676c:	881a      	ldrh	r2, [r3, #0]
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016778:	1c9a      	adds	r2, r3, #2
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016782:	b29b      	uxth	r3, r3
 8016784:	3b01      	subs	r3, #1
 8016786:	b29a      	uxth	r2, r3
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801678c:	e02f      	b.n	80167ee <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	689b      	ldr	r3, [r3, #8]
 8016794:	f003 0302 	and.w	r3, r3, #2
 8016798:	2b02      	cmp	r3, #2
 801679a:	d112      	bne.n	80167c2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167a0:	881a      	ldrh	r2, [r3, #0]
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80167a8:	68fb      	ldr	r3, [r7, #12]
 80167aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167ac:	1c9a      	adds	r2, r3, #2
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80167b6:	b29b      	uxth	r3, r3
 80167b8:	3b01      	subs	r3, #1
 80167ba:	b29a      	uxth	r2, r3
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	86da      	strh	r2, [r3, #54]	; 0x36
 80167c0:	e015      	b.n	80167ee <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80167c2:	f7fe fe77 	bl	80154b4 <HAL_GetTick>
 80167c6:	4602      	mov	r2, r0
 80167c8:	69bb      	ldr	r3, [r7, #24]
 80167ca:	1ad3      	subs	r3, r2, r3
 80167cc:	683a      	ldr	r2, [r7, #0]
 80167ce:	429a      	cmp	r2, r3
 80167d0:	d803      	bhi.n	80167da <HAL_SPI_Transmit+0x168>
 80167d2:	683b      	ldr	r3, [r7, #0]
 80167d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167d8:	d102      	bne.n	80167e0 <HAL_SPI_Transmit+0x16e>
 80167da:	683b      	ldr	r3, [r7, #0]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d106      	bne.n	80167ee <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80167e0:	2303      	movs	r3, #3
 80167e2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	2201      	movs	r2, #1
 80167e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80167ec:	e07b      	b.n	80168e6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80167ee:	68fb      	ldr	r3, [r7, #12]
 80167f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80167f2:	b29b      	uxth	r3, r3
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d1ca      	bne.n	801678e <HAL_SPI_Transmit+0x11c>
 80167f8:	e050      	b.n	801689c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	685b      	ldr	r3, [r3, #4]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d002      	beq.n	8016808 <HAL_SPI_Transmit+0x196>
 8016802:	8afb      	ldrh	r3, [r7, #22]
 8016804:	2b01      	cmp	r3, #1
 8016806:	d144      	bne.n	8016892 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	330c      	adds	r3, #12
 8016812:	7812      	ldrb	r2, [r2, #0]
 8016814:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801681a:	1c5a      	adds	r2, r3, #1
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016824:	b29b      	uxth	r3, r3
 8016826:	3b01      	subs	r3, #1
 8016828:	b29a      	uxth	r2, r3
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 801682e:	e030      	b.n	8016892 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	689b      	ldr	r3, [r3, #8]
 8016836:	f003 0302 	and.w	r3, r3, #2
 801683a:	2b02      	cmp	r3, #2
 801683c:	d113      	bne.n	8016866 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	330c      	adds	r3, #12
 8016848:	7812      	ldrb	r2, [r2, #0]
 801684a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016850:	1c5a      	adds	r2, r3, #1
 8016852:	68fb      	ldr	r3, [r7, #12]
 8016854:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801685a:	b29b      	uxth	r3, r3
 801685c:	3b01      	subs	r3, #1
 801685e:	b29a      	uxth	r2, r3
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	86da      	strh	r2, [r3, #54]	; 0x36
 8016864:	e015      	b.n	8016892 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016866:	f7fe fe25 	bl	80154b4 <HAL_GetTick>
 801686a:	4602      	mov	r2, r0
 801686c:	69bb      	ldr	r3, [r7, #24]
 801686e:	1ad3      	subs	r3, r2, r3
 8016870:	683a      	ldr	r2, [r7, #0]
 8016872:	429a      	cmp	r2, r3
 8016874:	d803      	bhi.n	801687e <HAL_SPI_Transmit+0x20c>
 8016876:	683b      	ldr	r3, [r7, #0]
 8016878:	f1b3 3fff 	cmp.w	r3, #4294967295
 801687c:	d102      	bne.n	8016884 <HAL_SPI_Transmit+0x212>
 801687e:	683b      	ldr	r3, [r7, #0]
 8016880:	2b00      	cmp	r3, #0
 8016882:	d106      	bne.n	8016892 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8016884:	2303      	movs	r3, #3
 8016886:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	2201      	movs	r2, #1
 801688c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8016890:	e029      	b.n	80168e6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016896:	b29b      	uxth	r3, r3
 8016898:	2b00      	cmp	r3, #0
 801689a:	d1c9      	bne.n	8016830 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801689c:	69ba      	ldr	r2, [r7, #24]
 801689e:	6839      	ldr	r1, [r7, #0]
 80168a0:	68f8      	ldr	r0, [r7, #12]
 80168a2:	f000 fbdf 	bl	8017064 <SPI_EndRxTxTransaction>
 80168a6:	4603      	mov	r3, r0
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d002      	beq.n	80168b2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	2220      	movs	r2, #32
 80168b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	689b      	ldr	r3, [r3, #8]
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d10a      	bne.n	80168d0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80168ba:	2300      	movs	r3, #0
 80168bc:	613b      	str	r3, [r7, #16]
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	68db      	ldr	r3, [r3, #12]
 80168c4:	613b      	str	r3, [r7, #16]
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	689b      	ldr	r3, [r3, #8]
 80168cc:	613b      	str	r3, [r7, #16]
 80168ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d002      	beq.n	80168de <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80168d8:	2301      	movs	r3, #1
 80168da:	77fb      	strb	r3, [r7, #31]
 80168dc:	e003      	b.n	80168e6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	2201      	movs	r2, #1
 80168e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	2200      	movs	r2, #0
 80168ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80168ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80168f0:	4618      	mov	r0, r3
 80168f2:	3720      	adds	r7, #32
 80168f4:	46bd      	mov	sp, r7
 80168f6:	bd80      	pop	{r7, pc}

080168f8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80168f8:	b580      	push	{r7, lr}
 80168fa:	b088      	sub	sp, #32
 80168fc:	af02      	add	r7, sp, #8
 80168fe:	60f8      	str	r0, [r7, #12]
 8016900:	60b9      	str	r1, [r7, #8]
 8016902:	603b      	str	r3, [r7, #0]
 8016904:	4613      	mov	r3, r2
 8016906:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8016908:	2300      	movs	r3, #0
 801690a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 801690c:	68fb      	ldr	r3, [r7, #12]
 801690e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016912:	b2db      	uxtb	r3, r3
 8016914:	2b01      	cmp	r3, #1
 8016916:	d002      	beq.n	801691e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8016918:	2302      	movs	r3, #2
 801691a:	75fb      	strb	r3, [r7, #23]
    goto error;
 801691c:	e0fb      	b.n	8016b16 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	685b      	ldr	r3, [r3, #4]
 8016922:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016926:	d112      	bne.n	801694e <HAL_SPI_Receive+0x56>
 8016928:	68fb      	ldr	r3, [r7, #12]
 801692a:	689b      	ldr	r3, [r3, #8]
 801692c:	2b00      	cmp	r3, #0
 801692e:	d10e      	bne.n	801694e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	2204      	movs	r2, #4
 8016934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8016938:	88fa      	ldrh	r2, [r7, #6]
 801693a:	683b      	ldr	r3, [r7, #0]
 801693c:	9300      	str	r3, [sp, #0]
 801693e:	4613      	mov	r3, r2
 8016940:	68ba      	ldr	r2, [r7, #8]
 8016942:	68b9      	ldr	r1, [r7, #8]
 8016944:	68f8      	ldr	r0, [r7, #12]
 8016946:	f000 f8ef 	bl	8016b28 <HAL_SPI_TransmitReceive>
 801694a:	4603      	mov	r3, r0
 801694c:	e0e8      	b.n	8016b20 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016954:	2b01      	cmp	r3, #1
 8016956:	d101      	bne.n	801695c <HAL_SPI_Receive+0x64>
 8016958:	2302      	movs	r3, #2
 801695a:	e0e1      	b.n	8016b20 <HAL_SPI_Receive+0x228>
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	2201      	movs	r2, #1
 8016960:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8016964:	f7fe fda6 	bl	80154b4 <HAL_GetTick>
 8016968:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 801696a:	68bb      	ldr	r3, [r7, #8]
 801696c:	2b00      	cmp	r3, #0
 801696e:	d002      	beq.n	8016976 <HAL_SPI_Receive+0x7e>
 8016970:	88fb      	ldrh	r3, [r7, #6]
 8016972:	2b00      	cmp	r3, #0
 8016974:	d102      	bne.n	801697c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8016976:	2301      	movs	r3, #1
 8016978:	75fb      	strb	r3, [r7, #23]
    goto error;
 801697a:	e0cc      	b.n	8016b16 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	2204      	movs	r2, #4
 8016980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	2200      	movs	r2, #0
 8016988:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	68ba      	ldr	r2, [r7, #8]
 801698e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	88fa      	ldrh	r2, [r7, #6]
 8016994:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	88fa      	ldrh	r2, [r7, #6]
 801699a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	2200      	movs	r2, #0
 80169a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	2200      	movs	r2, #0
 80169a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	2200      	movs	r2, #0
 80169ac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80169ae:	68fb      	ldr	r3, [r7, #12]
 80169b0:	2200      	movs	r2, #0
 80169b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	2200      	movs	r2, #0
 80169b8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	689b      	ldr	r3, [r3, #8]
 80169be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80169c2:	d10f      	bne.n	80169e4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	681a      	ldr	r2, [r3, #0]
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80169d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	681b      	ldr	r3, [r3, #0]
 80169d8:	681a      	ldr	r2, [r3, #0]
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80169e2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80169ee:	2b40      	cmp	r3, #64	; 0x40
 80169f0:	d007      	beq.n	8016a02 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	681a      	ldr	r2, [r3, #0]
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016a00:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	68db      	ldr	r3, [r3, #12]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d16a      	bne.n	8016ae0 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8016a0a:	e032      	b.n	8016a72 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	689b      	ldr	r3, [r3, #8]
 8016a12:	f003 0301 	and.w	r3, r3, #1
 8016a16:	2b01      	cmp	r3, #1
 8016a18:	d115      	bne.n	8016a46 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	f103 020c 	add.w	r2, r3, #12
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a26:	7812      	ldrb	r2, [r2, #0]
 8016a28:	b2d2      	uxtb	r2, r2
 8016a2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a30:	1c5a      	adds	r2, r3, #1
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016a3a:	b29b      	uxth	r3, r3
 8016a3c:	3b01      	subs	r3, #1
 8016a3e:	b29a      	uxth	r2, r3
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8016a44:	e015      	b.n	8016a72 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016a46:	f7fe fd35 	bl	80154b4 <HAL_GetTick>
 8016a4a:	4602      	mov	r2, r0
 8016a4c:	693b      	ldr	r3, [r7, #16]
 8016a4e:	1ad3      	subs	r3, r2, r3
 8016a50:	683a      	ldr	r2, [r7, #0]
 8016a52:	429a      	cmp	r2, r3
 8016a54:	d803      	bhi.n	8016a5e <HAL_SPI_Receive+0x166>
 8016a56:	683b      	ldr	r3, [r7, #0]
 8016a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a5c:	d102      	bne.n	8016a64 <HAL_SPI_Receive+0x16c>
 8016a5e:	683b      	ldr	r3, [r7, #0]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d106      	bne.n	8016a72 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8016a64:	2303      	movs	r3, #3
 8016a66:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	2201      	movs	r2, #1
 8016a6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8016a70:	e051      	b.n	8016b16 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016a76:	b29b      	uxth	r3, r3
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d1c7      	bne.n	8016a0c <HAL_SPI_Receive+0x114>
 8016a7c:	e035      	b.n	8016aea <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	689b      	ldr	r3, [r3, #8]
 8016a84:	f003 0301 	and.w	r3, r3, #1
 8016a88:	2b01      	cmp	r3, #1
 8016a8a:	d113      	bne.n	8016ab4 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	68da      	ldr	r2, [r3, #12]
 8016a92:	68fb      	ldr	r3, [r7, #12]
 8016a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a96:	b292      	uxth	r2, r2
 8016a98:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a9e:	1c9a      	adds	r2, r3, #2
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8016aa4:	68fb      	ldr	r3, [r7, #12]
 8016aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016aa8:	b29b      	uxth	r3, r3
 8016aaa:	3b01      	subs	r3, #1
 8016aac:	b29a      	uxth	r2, r3
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8016ab2:	e015      	b.n	8016ae0 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016ab4:	f7fe fcfe 	bl	80154b4 <HAL_GetTick>
 8016ab8:	4602      	mov	r2, r0
 8016aba:	693b      	ldr	r3, [r7, #16]
 8016abc:	1ad3      	subs	r3, r2, r3
 8016abe:	683a      	ldr	r2, [r7, #0]
 8016ac0:	429a      	cmp	r2, r3
 8016ac2:	d803      	bhi.n	8016acc <HAL_SPI_Receive+0x1d4>
 8016ac4:	683b      	ldr	r3, [r7, #0]
 8016ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016aca:	d102      	bne.n	8016ad2 <HAL_SPI_Receive+0x1da>
 8016acc:	683b      	ldr	r3, [r7, #0]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d106      	bne.n	8016ae0 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8016ad2:	2303      	movs	r3, #3
 8016ad4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	2201      	movs	r2, #1
 8016ada:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8016ade:	e01a      	b.n	8016b16 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016ae4:	b29b      	uxth	r3, r3
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d1c9      	bne.n	8016a7e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8016aea:	693a      	ldr	r2, [r7, #16]
 8016aec:	6839      	ldr	r1, [r7, #0]
 8016aee:	68f8      	ldr	r0, [r7, #12]
 8016af0:	f000 fa52 	bl	8016f98 <SPI_EndRxTransaction>
 8016af4:	4603      	mov	r3, r0
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d002      	beq.n	8016b00 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	2220      	movs	r2, #32
 8016afe:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d002      	beq.n	8016b0e <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8016b08:	2301      	movs	r3, #1
 8016b0a:	75fb      	strb	r3, [r7, #23]
 8016b0c:	e003      	b.n	8016b16 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	2201      	movs	r2, #1
 8016b12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	2200      	movs	r2, #0
 8016b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8016b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b20:	4618      	mov	r0, r3
 8016b22:	3718      	adds	r7, #24
 8016b24:	46bd      	mov	sp, r7
 8016b26:	bd80      	pop	{r7, pc}

08016b28 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b08c      	sub	sp, #48	; 0x30
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	60f8      	str	r0, [r7, #12]
 8016b30:	60b9      	str	r1, [r7, #8]
 8016b32:	607a      	str	r2, [r7, #4]
 8016b34:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8016b36:	2301      	movs	r3, #1
 8016b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016b46:	2b01      	cmp	r3, #1
 8016b48:	d101      	bne.n	8016b4e <HAL_SPI_TransmitReceive+0x26>
 8016b4a:	2302      	movs	r3, #2
 8016b4c:	e198      	b.n	8016e80 <HAL_SPI_TransmitReceive+0x358>
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	2201      	movs	r2, #1
 8016b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8016b56:	f7fe fcad 	bl	80154b4 <HAL_GetTick>
 8016b5a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	685b      	ldr	r3, [r3, #4]
 8016b6a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8016b6c:	887b      	ldrh	r3, [r7, #2]
 8016b6e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8016b70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016b74:	2b01      	cmp	r3, #1
 8016b76:	d00f      	beq.n	8016b98 <HAL_SPI_TransmitReceive+0x70>
 8016b78:	69fb      	ldr	r3, [r7, #28]
 8016b7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016b7e:	d107      	bne.n	8016b90 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	689b      	ldr	r3, [r3, #8]
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d103      	bne.n	8016b90 <HAL_SPI_TransmitReceive+0x68>
 8016b88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016b8c:	2b04      	cmp	r3, #4
 8016b8e:	d003      	beq.n	8016b98 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8016b90:	2302      	movs	r3, #2
 8016b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8016b96:	e16d      	b.n	8016e74 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8016b98:	68bb      	ldr	r3, [r7, #8]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d005      	beq.n	8016baa <HAL_SPI_TransmitReceive+0x82>
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d002      	beq.n	8016baa <HAL_SPI_TransmitReceive+0x82>
 8016ba4:	887b      	ldrh	r3, [r7, #2]
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d103      	bne.n	8016bb2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8016baa:	2301      	movs	r3, #1
 8016bac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8016bb0:	e160      	b.n	8016e74 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016bb8:	b2db      	uxtb	r3, r3
 8016bba:	2b04      	cmp	r3, #4
 8016bbc:	d003      	beq.n	8016bc6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	2205      	movs	r2, #5
 8016bc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	2200      	movs	r2, #0
 8016bca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	687a      	ldr	r2, [r7, #4]
 8016bd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	887a      	ldrh	r2, [r7, #2]
 8016bd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	887a      	ldrh	r2, [r7, #2]
 8016bdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	68ba      	ldr	r2, [r7, #8]
 8016be2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8016be4:	68fb      	ldr	r3, [r7, #12]
 8016be6:	887a      	ldrh	r2, [r7, #2]
 8016be8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	887a      	ldrh	r2, [r7, #2]
 8016bee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	2200      	movs	r2, #0
 8016bf4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	681b      	ldr	r3, [r3, #0]
 8016c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016c06:	2b40      	cmp	r3, #64	; 0x40
 8016c08:	d007      	beq.n	8016c1a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8016c0a:	68fb      	ldr	r3, [r7, #12]
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	681a      	ldr	r2, [r3, #0]
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016c18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	68db      	ldr	r3, [r3, #12]
 8016c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016c22:	d17c      	bne.n	8016d1e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	685b      	ldr	r3, [r3, #4]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d002      	beq.n	8016c32 <HAL_SPI_TransmitReceive+0x10a>
 8016c2c:	8b7b      	ldrh	r3, [r7, #26]
 8016c2e:	2b01      	cmp	r3, #1
 8016c30:	d16a      	bne.n	8016d08 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016c32:	68fb      	ldr	r3, [r7, #12]
 8016c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c36:	881a      	ldrh	r2, [r3, #0]
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c42:	1c9a      	adds	r2, r3, #2
 8016c44:	68fb      	ldr	r3, [r7, #12]
 8016c46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8016c48:	68fb      	ldr	r3, [r7, #12]
 8016c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016c4c:	b29b      	uxth	r3, r3
 8016c4e:	3b01      	subs	r3, #1
 8016c50:	b29a      	uxth	r2, r3
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8016c56:	e057      	b.n	8016d08 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	689b      	ldr	r3, [r3, #8]
 8016c5e:	f003 0302 	and.w	r3, r3, #2
 8016c62:	2b02      	cmp	r3, #2
 8016c64:	d11b      	bne.n	8016c9e <HAL_SPI_TransmitReceive+0x176>
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016c6a:	b29b      	uxth	r3, r3
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d016      	beq.n	8016c9e <HAL_SPI_TransmitReceive+0x176>
 8016c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c72:	2b01      	cmp	r3, #1
 8016c74:	d113      	bne.n	8016c9e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c7a:	881a      	ldrh	r2, [r3, #0]
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c86:	1c9a      	adds	r2, r3, #2
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016c90:	b29b      	uxth	r3, r3
 8016c92:	3b01      	subs	r3, #1
 8016c94:	b29a      	uxth	r2, r3
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8016c9a:	2300      	movs	r3, #0
 8016c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8016c9e:	68fb      	ldr	r3, [r7, #12]
 8016ca0:	681b      	ldr	r3, [r3, #0]
 8016ca2:	689b      	ldr	r3, [r3, #8]
 8016ca4:	f003 0301 	and.w	r3, r3, #1
 8016ca8:	2b01      	cmp	r3, #1
 8016caa:	d119      	bne.n	8016ce0 <HAL_SPI_TransmitReceive+0x1b8>
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016cb0:	b29b      	uxth	r3, r3
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d014      	beq.n	8016ce0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8016cb6:	68fb      	ldr	r3, [r7, #12]
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	68da      	ldr	r2, [r3, #12]
 8016cbc:	68fb      	ldr	r3, [r7, #12]
 8016cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016cc0:	b292      	uxth	r2, r2
 8016cc2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016cc8:	1c9a      	adds	r2, r3, #2
 8016cca:	68fb      	ldr	r3, [r7, #12]
 8016ccc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8016cce:	68fb      	ldr	r3, [r7, #12]
 8016cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016cd2:	b29b      	uxth	r3, r3
 8016cd4:	3b01      	subs	r3, #1
 8016cd6:	b29a      	uxth	r2, r3
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8016cdc:	2301      	movs	r3, #1
 8016cde:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8016ce0:	f7fe fbe8 	bl	80154b4 <HAL_GetTick>
 8016ce4:	4602      	mov	r2, r0
 8016ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ce8:	1ad3      	subs	r3, r2, r3
 8016cea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016cec:	429a      	cmp	r2, r3
 8016cee:	d80b      	bhi.n	8016d08 <HAL_SPI_TransmitReceive+0x1e0>
 8016cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016cf6:	d007      	beq.n	8016d08 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8016cf8:	2303      	movs	r3, #3
 8016cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8016cfe:	68fb      	ldr	r3, [r7, #12]
 8016d00:	2201      	movs	r2, #1
 8016d02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8016d06:	e0b5      	b.n	8016e74 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016d0c:	b29b      	uxth	r3, r3
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d1a2      	bne.n	8016c58 <HAL_SPI_TransmitReceive+0x130>
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016d16:	b29b      	uxth	r3, r3
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d19d      	bne.n	8016c58 <HAL_SPI_TransmitReceive+0x130>
 8016d1c:	e080      	b.n	8016e20 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	685b      	ldr	r3, [r3, #4]
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d002      	beq.n	8016d2c <HAL_SPI_TransmitReceive+0x204>
 8016d26:	8b7b      	ldrh	r3, [r7, #26]
 8016d28:	2b01      	cmp	r3, #1
 8016d2a:	d16f      	bne.n	8016e0c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	330c      	adds	r3, #12
 8016d36:	7812      	ldrb	r2, [r2, #0]
 8016d38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d3e:	1c5a      	adds	r2, r3, #1
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016d48:	b29b      	uxth	r3, r3
 8016d4a:	3b01      	subs	r3, #1
 8016d4c:	b29a      	uxth	r2, r3
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8016d52:	e05b      	b.n	8016e0c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8016d54:	68fb      	ldr	r3, [r7, #12]
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	689b      	ldr	r3, [r3, #8]
 8016d5a:	f003 0302 	and.w	r3, r3, #2
 8016d5e:	2b02      	cmp	r3, #2
 8016d60:	d11c      	bne.n	8016d9c <HAL_SPI_TransmitReceive+0x274>
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016d66:	b29b      	uxth	r3, r3
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d017      	beq.n	8016d9c <HAL_SPI_TransmitReceive+0x274>
 8016d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d6e:	2b01      	cmp	r3, #1
 8016d70:	d114      	bne.n	8016d9c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016d76:	68fb      	ldr	r3, [r7, #12]
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	330c      	adds	r3, #12
 8016d7c:	7812      	ldrb	r2, [r2, #0]
 8016d7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d84:	1c5a      	adds	r2, r3, #1
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016d8e:	b29b      	uxth	r3, r3
 8016d90:	3b01      	subs	r3, #1
 8016d92:	b29a      	uxth	r2, r3
 8016d94:	68fb      	ldr	r3, [r7, #12]
 8016d96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8016d98:	2300      	movs	r3, #0
 8016d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	689b      	ldr	r3, [r3, #8]
 8016da2:	f003 0301 	and.w	r3, r3, #1
 8016da6:	2b01      	cmp	r3, #1
 8016da8:	d119      	bne.n	8016dde <HAL_SPI_TransmitReceive+0x2b6>
 8016daa:	68fb      	ldr	r3, [r7, #12]
 8016dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016dae:	b29b      	uxth	r3, r3
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d014      	beq.n	8016dde <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	68da      	ldr	r2, [r3, #12]
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016dbe:	b2d2      	uxtb	r2, r2
 8016dc0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016dc6:	1c5a      	adds	r2, r3, #1
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016dd0:	b29b      	uxth	r3, r3
 8016dd2:	3b01      	subs	r3, #1
 8016dd4:	b29a      	uxth	r2, r3
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8016dda:	2301      	movs	r3, #1
 8016ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8016dde:	f7fe fb69 	bl	80154b4 <HAL_GetTick>
 8016de2:	4602      	mov	r2, r0
 8016de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016de6:	1ad3      	subs	r3, r2, r3
 8016de8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016dea:	429a      	cmp	r2, r3
 8016dec:	d803      	bhi.n	8016df6 <HAL_SPI_TransmitReceive+0x2ce>
 8016dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016df4:	d102      	bne.n	8016dfc <HAL_SPI_TransmitReceive+0x2d4>
 8016df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d107      	bne.n	8016e0c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8016dfc:	2303      	movs	r3, #3
 8016dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	2201      	movs	r2, #1
 8016e06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8016e0a:	e033      	b.n	8016e74 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016e10:	b29b      	uxth	r3, r3
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d19e      	bne.n	8016d54 <HAL_SPI_TransmitReceive+0x22c>
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016e1a:	b29b      	uxth	r3, r3
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d199      	bne.n	8016d54 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8016e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016e22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016e24:	68f8      	ldr	r0, [r7, #12]
 8016e26:	f000 f91d 	bl	8017064 <SPI_EndRxTxTransaction>
 8016e2a:	4603      	mov	r3, r0
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d006      	beq.n	8016e3e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8016e30:	2301      	movs	r3, #1
 8016e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	2220      	movs	r2, #32
 8016e3a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8016e3c:	e01a      	b.n	8016e74 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8016e3e:	68fb      	ldr	r3, [r7, #12]
 8016e40:	689b      	ldr	r3, [r3, #8]
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d10a      	bne.n	8016e5c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8016e46:	2300      	movs	r3, #0
 8016e48:	617b      	str	r3, [r7, #20]
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	68db      	ldr	r3, [r3, #12]
 8016e50:	617b      	str	r3, [r7, #20]
 8016e52:	68fb      	ldr	r3, [r7, #12]
 8016e54:	681b      	ldr	r3, [r3, #0]
 8016e56:	689b      	ldr	r3, [r3, #8]
 8016e58:	617b      	str	r3, [r7, #20]
 8016e5a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016e5c:	68fb      	ldr	r3, [r7, #12]
 8016e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d003      	beq.n	8016e6c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8016e64:	2301      	movs	r3, #1
 8016e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016e6a:	e003      	b.n	8016e74 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	2201      	movs	r2, #1
 8016e70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8016e74:	68fb      	ldr	r3, [r7, #12]
 8016e76:	2200      	movs	r2, #0
 8016e78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8016e7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8016e80:	4618      	mov	r0, r3
 8016e82:	3730      	adds	r7, #48	; 0x30
 8016e84:	46bd      	mov	sp, r7
 8016e86:	bd80      	pop	{r7, pc}

08016e88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8016e88:	b580      	push	{r7, lr}
 8016e8a:	b088      	sub	sp, #32
 8016e8c:	af00      	add	r7, sp, #0
 8016e8e:	60f8      	str	r0, [r7, #12]
 8016e90:	60b9      	str	r1, [r7, #8]
 8016e92:	603b      	str	r3, [r7, #0]
 8016e94:	4613      	mov	r3, r2
 8016e96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8016e98:	f7fe fb0c 	bl	80154b4 <HAL_GetTick>
 8016e9c:	4602      	mov	r2, r0
 8016e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ea0:	1a9b      	subs	r3, r3, r2
 8016ea2:	683a      	ldr	r2, [r7, #0]
 8016ea4:	4413      	add	r3, r2
 8016ea6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8016ea8:	f7fe fb04 	bl	80154b4 <HAL_GetTick>
 8016eac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8016eae:	4b39      	ldr	r3, [pc, #228]	; (8016f94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	015b      	lsls	r3, r3, #5
 8016eb4:	0d1b      	lsrs	r3, r3, #20
 8016eb6:	69fa      	ldr	r2, [r7, #28]
 8016eb8:	fb02 f303 	mul.w	r3, r2, r3
 8016ebc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8016ebe:	e054      	b.n	8016f6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8016ec0:	683b      	ldr	r3, [r7, #0]
 8016ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ec6:	d050      	beq.n	8016f6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8016ec8:	f7fe faf4 	bl	80154b4 <HAL_GetTick>
 8016ecc:	4602      	mov	r2, r0
 8016ece:	69bb      	ldr	r3, [r7, #24]
 8016ed0:	1ad3      	subs	r3, r2, r3
 8016ed2:	69fa      	ldr	r2, [r7, #28]
 8016ed4:	429a      	cmp	r2, r3
 8016ed6:	d902      	bls.n	8016ede <SPI_WaitFlagStateUntilTimeout+0x56>
 8016ed8:	69fb      	ldr	r3, [r7, #28]
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d13d      	bne.n	8016f5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	685a      	ldr	r2, [r3, #4]
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8016eec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016eee:	68fb      	ldr	r3, [r7, #12]
 8016ef0:	685b      	ldr	r3, [r3, #4]
 8016ef2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016ef6:	d111      	bne.n	8016f1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	689b      	ldr	r3, [r3, #8]
 8016efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016f00:	d004      	beq.n	8016f0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8016f02:	68fb      	ldr	r3, [r7, #12]
 8016f04:	689b      	ldr	r3, [r3, #8]
 8016f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016f0a:	d107      	bne.n	8016f1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	681a      	ldr	r2, [r3, #0]
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016f1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8016f1c:	68fb      	ldr	r3, [r7, #12]
 8016f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016f24:	d10f      	bne.n	8016f46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	681a      	ldr	r2, [r3, #0]
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8016f34:	601a      	str	r2, [r3, #0]
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	681a      	ldr	r2, [r3, #0]
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8016f44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	2201      	movs	r2, #1
 8016f4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8016f4e:	68fb      	ldr	r3, [r7, #12]
 8016f50:	2200      	movs	r2, #0
 8016f52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8016f56:	2303      	movs	r3, #3
 8016f58:	e017      	b.n	8016f8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8016f5a:	697b      	ldr	r3, [r7, #20]
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d101      	bne.n	8016f64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8016f60:	2300      	movs	r3, #0
 8016f62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8016f64:	697b      	ldr	r3, [r7, #20]
 8016f66:	3b01      	subs	r3, #1
 8016f68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	681b      	ldr	r3, [r3, #0]
 8016f6e:	689a      	ldr	r2, [r3, #8]
 8016f70:	68bb      	ldr	r3, [r7, #8]
 8016f72:	4013      	ands	r3, r2
 8016f74:	68ba      	ldr	r2, [r7, #8]
 8016f76:	429a      	cmp	r2, r3
 8016f78:	bf0c      	ite	eq
 8016f7a:	2301      	moveq	r3, #1
 8016f7c:	2300      	movne	r3, #0
 8016f7e:	b2db      	uxtb	r3, r3
 8016f80:	461a      	mov	r2, r3
 8016f82:	79fb      	ldrb	r3, [r7, #7]
 8016f84:	429a      	cmp	r2, r3
 8016f86:	d19b      	bne.n	8016ec0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8016f88:	2300      	movs	r3, #0
}
 8016f8a:	4618      	mov	r0, r3
 8016f8c:	3720      	adds	r7, #32
 8016f8e:	46bd      	mov	sp, r7
 8016f90:	bd80      	pop	{r7, pc}
 8016f92:	bf00      	nop
 8016f94:	20000000 	.word	0x20000000

08016f98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8016f98:	b580      	push	{r7, lr}
 8016f9a:	b086      	sub	sp, #24
 8016f9c:	af02      	add	r7, sp, #8
 8016f9e:	60f8      	str	r0, [r7, #12]
 8016fa0:	60b9      	str	r1, [r7, #8]
 8016fa2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	685b      	ldr	r3, [r3, #4]
 8016fa8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016fac:	d111      	bne.n	8016fd2 <SPI_EndRxTransaction+0x3a>
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	689b      	ldr	r3, [r3, #8]
 8016fb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016fb6:	d004      	beq.n	8016fc2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	689b      	ldr	r3, [r3, #8]
 8016fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016fc0:	d107      	bne.n	8016fd2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	681a      	ldr	r2, [r3, #0]
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016fd0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	685b      	ldr	r3, [r3, #4]
 8016fd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016fda:	d12a      	bne.n	8017032 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	689b      	ldr	r3, [r3, #8]
 8016fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016fe4:	d012      	beq.n	801700c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	9300      	str	r3, [sp, #0]
 8016fea:	68bb      	ldr	r3, [r7, #8]
 8016fec:	2200      	movs	r2, #0
 8016fee:	2180      	movs	r1, #128	; 0x80
 8016ff0:	68f8      	ldr	r0, [r7, #12]
 8016ff2:	f7ff ff49 	bl	8016e88 <SPI_WaitFlagStateUntilTimeout>
 8016ff6:	4603      	mov	r3, r0
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d02d      	beq.n	8017058 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017000:	f043 0220 	orr.w	r2, r3, #32
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8017008:	2303      	movs	r3, #3
 801700a:	e026      	b.n	801705a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	9300      	str	r3, [sp, #0]
 8017010:	68bb      	ldr	r3, [r7, #8]
 8017012:	2200      	movs	r2, #0
 8017014:	2101      	movs	r1, #1
 8017016:	68f8      	ldr	r0, [r7, #12]
 8017018:	f7ff ff36 	bl	8016e88 <SPI_WaitFlagStateUntilTimeout>
 801701c:	4603      	mov	r3, r0
 801701e:	2b00      	cmp	r3, #0
 8017020:	d01a      	beq.n	8017058 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017026:	f043 0220 	orr.w	r2, r3, #32
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801702e:	2303      	movs	r3, #3
 8017030:	e013      	b.n	801705a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	9300      	str	r3, [sp, #0]
 8017036:	68bb      	ldr	r3, [r7, #8]
 8017038:	2200      	movs	r2, #0
 801703a:	2101      	movs	r1, #1
 801703c:	68f8      	ldr	r0, [r7, #12]
 801703e:	f7ff ff23 	bl	8016e88 <SPI_WaitFlagStateUntilTimeout>
 8017042:	4603      	mov	r3, r0
 8017044:	2b00      	cmp	r3, #0
 8017046:	d007      	beq.n	8017058 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801704c:	f043 0220 	orr.w	r2, r3, #32
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8017054:	2303      	movs	r3, #3
 8017056:	e000      	b.n	801705a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8017058:	2300      	movs	r3, #0
}
 801705a:	4618      	mov	r0, r3
 801705c:	3710      	adds	r7, #16
 801705e:	46bd      	mov	sp, r7
 8017060:	bd80      	pop	{r7, pc}
	...

08017064 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8017064:	b580      	push	{r7, lr}
 8017066:	b088      	sub	sp, #32
 8017068:	af02      	add	r7, sp, #8
 801706a:	60f8      	str	r0, [r7, #12]
 801706c:	60b9      	str	r1, [r7, #8]
 801706e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	9300      	str	r3, [sp, #0]
 8017074:	68bb      	ldr	r3, [r7, #8]
 8017076:	2201      	movs	r2, #1
 8017078:	2102      	movs	r1, #2
 801707a:	68f8      	ldr	r0, [r7, #12]
 801707c:	f7ff ff04 	bl	8016e88 <SPI_WaitFlagStateUntilTimeout>
 8017080:	4603      	mov	r3, r0
 8017082:	2b00      	cmp	r3, #0
 8017084:	d007      	beq.n	8017096 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801708a:	f043 0220 	orr.w	r2, r3, #32
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8017092:	2303      	movs	r3, #3
 8017094:	e032      	b.n	80170fc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8017096:	4b1b      	ldr	r3, [pc, #108]	; (8017104 <SPI_EndRxTxTransaction+0xa0>)
 8017098:	681b      	ldr	r3, [r3, #0]
 801709a:	4a1b      	ldr	r2, [pc, #108]	; (8017108 <SPI_EndRxTxTransaction+0xa4>)
 801709c:	fba2 2303 	umull	r2, r3, r2, r3
 80170a0:	0d5b      	lsrs	r3, r3, #21
 80170a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80170a6:	fb02 f303 	mul.w	r3, r2, r3
 80170aa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	685b      	ldr	r3, [r3, #4]
 80170b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80170b4:	d112      	bne.n	80170dc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	9300      	str	r3, [sp, #0]
 80170ba:	68bb      	ldr	r3, [r7, #8]
 80170bc:	2200      	movs	r2, #0
 80170be:	2180      	movs	r1, #128	; 0x80
 80170c0:	68f8      	ldr	r0, [r7, #12]
 80170c2:	f7ff fee1 	bl	8016e88 <SPI_WaitFlagStateUntilTimeout>
 80170c6:	4603      	mov	r3, r0
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d016      	beq.n	80170fa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80170d0:	f043 0220 	orr.w	r2, r3, #32
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80170d8:	2303      	movs	r3, #3
 80170da:	e00f      	b.n	80170fc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80170dc:	697b      	ldr	r3, [r7, #20]
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d00a      	beq.n	80170f8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80170e2:	697b      	ldr	r3, [r7, #20]
 80170e4:	3b01      	subs	r3, #1
 80170e6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	681b      	ldr	r3, [r3, #0]
 80170ec:	689b      	ldr	r3, [r3, #8]
 80170ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80170f2:	2b80      	cmp	r3, #128	; 0x80
 80170f4:	d0f2      	beq.n	80170dc <SPI_EndRxTxTransaction+0x78>
 80170f6:	e000      	b.n	80170fa <SPI_EndRxTxTransaction+0x96>
        break;
 80170f8:	bf00      	nop
  }

  return HAL_OK;
 80170fa:	2300      	movs	r3, #0
}
 80170fc:	4618      	mov	r0, r3
 80170fe:	3718      	adds	r7, #24
 8017100:	46bd      	mov	sp, r7
 8017102:	bd80      	pop	{r7, pc}
 8017104:	20000000 	.word	0x20000000
 8017108:	165e9f81 	.word	0x165e9f81

0801710c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801710c:	b580      	push	{r7, lr}
 801710e:	b082      	sub	sp, #8
 8017110:	af00      	add	r7, sp, #0
 8017112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	2b00      	cmp	r3, #0
 8017118:	d101      	bne.n	801711e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801711a:	2301      	movs	r3, #1
 801711c:	e041      	b.n	80171a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017124:	b2db      	uxtb	r3, r3
 8017126:	2b00      	cmp	r3, #0
 8017128:	d106      	bne.n	8017138 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	2200      	movs	r2, #0
 801712e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8017132:	6878      	ldr	r0, [r7, #4]
 8017134:	f000 f839 	bl	80171aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	2202      	movs	r2, #2
 801713c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	681a      	ldr	r2, [r3, #0]
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	3304      	adds	r3, #4
 8017148:	4619      	mov	r1, r3
 801714a:	4610      	mov	r0, r2
 801714c:	f000 f9b2 	bl	80174b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	2201      	movs	r2, #1
 8017154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	2201      	movs	r2, #1
 801715c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	2201      	movs	r2, #1
 8017164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	2201      	movs	r2, #1
 801716c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	2201      	movs	r2, #1
 8017174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	2201      	movs	r2, #1
 801717c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	2201      	movs	r2, #1
 8017184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	2201      	movs	r2, #1
 801718c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	2201      	movs	r2, #1
 8017194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	2201      	movs	r2, #1
 801719c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80171a0:	2300      	movs	r3, #0
}
 80171a2:	4618      	mov	r0, r3
 80171a4:	3708      	adds	r7, #8
 80171a6:	46bd      	mov	sp, r7
 80171a8:	bd80      	pop	{r7, pc}

080171aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80171aa:	b480      	push	{r7}
 80171ac:	b083      	sub	sp, #12
 80171ae:	af00      	add	r7, sp, #0
 80171b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80171b2:	bf00      	nop
 80171b4:	370c      	adds	r7, #12
 80171b6:	46bd      	mov	sp, r7
 80171b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171bc:	4770      	bx	lr
	...

080171c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80171c0:	b480      	push	{r7}
 80171c2:	b085      	sub	sp, #20
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80171ce:	b2db      	uxtb	r3, r3
 80171d0:	2b01      	cmp	r3, #1
 80171d2:	d001      	beq.n	80171d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80171d4:	2301      	movs	r3, #1
 80171d6:	e044      	b.n	8017262 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	2202      	movs	r2, #2
 80171dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	681b      	ldr	r3, [r3, #0]
 80171e4:	68da      	ldr	r2, [r3, #12]
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	681b      	ldr	r3, [r3, #0]
 80171ea:	f042 0201 	orr.w	r2, r2, #1
 80171ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	681b      	ldr	r3, [r3, #0]
 80171f4:	4a1e      	ldr	r2, [pc, #120]	; (8017270 <HAL_TIM_Base_Start_IT+0xb0>)
 80171f6:	4293      	cmp	r3, r2
 80171f8:	d018      	beq.n	801722c <HAL_TIM_Base_Start_IT+0x6c>
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	681b      	ldr	r3, [r3, #0]
 80171fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017202:	d013      	beq.n	801722c <HAL_TIM_Base_Start_IT+0x6c>
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	4a1a      	ldr	r2, [pc, #104]	; (8017274 <HAL_TIM_Base_Start_IT+0xb4>)
 801720a:	4293      	cmp	r3, r2
 801720c:	d00e      	beq.n	801722c <HAL_TIM_Base_Start_IT+0x6c>
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	681b      	ldr	r3, [r3, #0]
 8017212:	4a19      	ldr	r2, [pc, #100]	; (8017278 <HAL_TIM_Base_Start_IT+0xb8>)
 8017214:	4293      	cmp	r3, r2
 8017216:	d009      	beq.n	801722c <HAL_TIM_Base_Start_IT+0x6c>
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	4a17      	ldr	r2, [pc, #92]	; (801727c <HAL_TIM_Base_Start_IT+0xbc>)
 801721e:	4293      	cmp	r3, r2
 8017220:	d004      	beq.n	801722c <HAL_TIM_Base_Start_IT+0x6c>
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	681b      	ldr	r3, [r3, #0]
 8017226:	4a16      	ldr	r2, [pc, #88]	; (8017280 <HAL_TIM_Base_Start_IT+0xc0>)
 8017228:	4293      	cmp	r3, r2
 801722a:	d111      	bne.n	8017250 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	681b      	ldr	r3, [r3, #0]
 8017230:	689b      	ldr	r3, [r3, #8]
 8017232:	f003 0307 	and.w	r3, r3, #7
 8017236:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	2b06      	cmp	r3, #6
 801723c:	d010      	beq.n	8017260 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	681a      	ldr	r2, [r3, #0]
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	f042 0201 	orr.w	r2, r2, #1
 801724c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801724e:	e007      	b.n	8017260 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	681b      	ldr	r3, [r3, #0]
 8017254:	681a      	ldr	r2, [r3, #0]
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	f042 0201 	orr.w	r2, r2, #1
 801725e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8017260:	2300      	movs	r3, #0
}
 8017262:	4618      	mov	r0, r3
 8017264:	3714      	adds	r7, #20
 8017266:	46bd      	mov	sp, r7
 8017268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801726c:	4770      	bx	lr
 801726e:	bf00      	nop
 8017270:	40010000 	.word	0x40010000
 8017274:	40000400 	.word	0x40000400
 8017278:	40000800 	.word	0x40000800
 801727c:	40000c00 	.word	0x40000c00
 8017280:	40014000 	.word	0x40014000

08017284 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8017284:	b580      	push	{r7, lr}
 8017286:	b084      	sub	sp, #16
 8017288:	af00      	add	r7, sp, #0
 801728a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	68db      	ldr	r3, [r3, #12]
 8017292:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	681b      	ldr	r3, [r3, #0]
 8017298:	691b      	ldr	r3, [r3, #16]
 801729a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801729c:	68bb      	ldr	r3, [r7, #8]
 801729e:	f003 0302 	and.w	r3, r3, #2
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	d020      	beq.n	80172e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	f003 0302 	and.w	r3, r3, #2
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d01b      	beq.n	80172e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	681b      	ldr	r3, [r3, #0]
 80172b4:	f06f 0202 	mvn.w	r2, #2
 80172b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	2201      	movs	r2, #1
 80172be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	699b      	ldr	r3, [r3, #24]
 80172c6:	f003 0303 	and.w	r3, r3, #3
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d003      	beq.n	80172d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80172ce:	6878      	ldr	r0, [r7, #4]
 80172d0:	f000 f8d2 	bl	8017478 <HAL_TIM_IC_CaptureCallback>
 80172d4:	e005      	b.n	80172e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80172d6:	6878      	ldr	r0, [r7, #4]
 80172d8:	f000 f8c4 	bl	8017464 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80172dc:	6878      	ldr	r0, [r7, #4]
 80172de:	f000 f8d5 	bl	801748c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	2200      	movs	r2, #0
 80172e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80172e8:	68bb      	ldr	r3, [r7, #8]
 80172ea:	f003 0304 	and.w	r3, r3, #4
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d020      	beq.n	8017334 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80172f2:	68fb      	ldr	r3, [r7, #12]
 80172f4:	f003 0304 	and.w	r3, r3, #4
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d01b      	beq.n	8017334 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	f06f 0204 	mvn.w	r2, #4
 8017304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	2202      	movs	r2, #2
 801730a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	699b      	ldr	r3, [r3, #24]
 8017312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8017316:	2b00      	cmp	r3, #0
 8017318:	d003      	beq.n	8017322 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801731a:	6878      	ldr	r0, [r7, #4]
 801731c:	f000 f8ac 	bl	8017478 <HAL_TIM_IC_CaptureCallback>
 8017320:	e005      	b.n	801732e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017322:	6878      	ldr	r0, [r7, #4]
 8017324:	f000 f89e 	bl	8017464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017328:	6878      	ldr	r0, [r7, #4]
 801732a:	f000 f8af 	bl	801748c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	2200      	movs	r2, #0
 8017332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8017334:	68bb      	ldr	r3, [r7, #8]
 8017336:	f003 0308 	and.w	r3, r3, #8
 801733a:	2b00      	cmp	r3, #0
 801733c:	d020      	beq.n	8017380 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	f003 0308 	and.w	r3, r3, #8
 8017344:	2b00      	cmp	r3, #0
 8017346:	d01b      	beq.n	8017380 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	681b      	ldr	r3, [r3, #0]
 801734c:	f06f 0208 	mvn.w	r2, #8
 8017350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	2204      	movs	r2, #4
 8017356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	681b      	ldr	r3, [r3, #0]
 801735c:	69db      	ldr	r3, [r3, #28]
 801735e:	f003 0303 	and.w	r3, r3, #3
 8017362:	2b00      	cmp	r3, #0
 8017364:	d003      	beq.n	801736e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8017366:	6878      	ldr	r0, [r7, #4]
 8017368:	f000 f886 	bl	8017478 <HAL_TIM_IC_CaptureCallback>
 801736c:	e005      	b.n	801737a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801736e:	6878      	ldr	r0, [r7, #4]
 8017370:	f000 f878 	bl	8017464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017374:	6878      	ldr	r0, [r7, #4]
 8017376:	f000 f889 	bl	801748c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	2200      	movs	r2, #0
 801737e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8017380:	68bb      	ldr	r3, [r7, #8]
 8017382:	f003 0310 	and.w	r3, r3, #16
 8017386:	2b00      	cmp	r3, #0
 8017388:	d020      	beq.n	80173cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	f003 0310 	and.w	r3, r3, #16
 8017390:	2b00      	cmp	r3, #0
 8017392:	d01b      	beq.n	80173cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	f06f 0210 	mvn.w	r2, #16
 801739c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	2208      	movs	r2, #8
 80173a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	681b      	ldr	r3, [r3, #0]
 80173a8:	69db      	ldr	r3, [r3, #28]
 80173aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d003      	beq.n	80173ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80173b2:	6878      	ldr	r0, [r7, #4]
 80173b4:	f000 f860 	bl	8017478 <HAL_TIM_IC_CaptureCallback>
 80173b8:	e005      	b.n	80173c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80173ba:	6878      	ldr	r0, [r7, #4]
 80173bc:	f000 f852 	bl	8017464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80173c0:	6878      	ldr	r0, [r7, #4]
 80173c2:	f000 f863 	bl	801748c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	2200      	movs	r2, #0
 80173ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80173cc:	68bb      	ldr	r3, [r7, #8]
 80173ce:	f003 0301 	and.w	r3, r3, #1
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d00c      	beq.n	80173f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	f003 0301 	and.w	r3, r3, #1
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d007      	beq.n	80173f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	681b      	ldr	r3, [r3, #0]
 80173e4:	f06f 0201 	mvn.w	r2, #1
 80173e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80173ea:	6878      	ldr	r0, [r7, #4]
 80173ec:	f7fb f988 	bl	8012700 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80173f0:	68bb      	ldr	r3, [r7, #8]
 80173f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d00c      	beq.n	8017414 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017400:	2b00      	cmp	r3, #0
 8017402:	d007      	beq.n	8017414 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	681b      	ldr	r3, [r3, #0]
 8017408:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801740c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801740e:	6878      	ldr	r0, [r7, #4]
 8017410:	f000 f8e6 	bl	80175e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8017414:	68bb      	ldr	r3, [r7, #8]
 8017416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801741a:	2b00      	cmp	r3, #0
 801741c:	d00c      	beq.n	8017438 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017424:	2b00      	cmp	r3, #0
 8017426:	d007      	beq.n	8017438 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	681b      	ldr	r3, [r3, #0]
 801742c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8017430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8017432:	6878      	ldr	r0, [r7, #4]
 8017434:	f000 f834 	bl	80174a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8017438:	68bb      	ldr	r3, [r7, #8]
 801743a:	f003 0320 	and.w	r3, r3, #32
 801743e:	2b00      	cmp	r3, #0
 8017440:	d00c      	beq.n	801745c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	f003 0320 	and.w	r3, r3, #32
 8017448:	2b00      	cmp	r3, #0
 801744a:	d007      	beq.n	801745c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	f06f 0220 	mvn.w	r2, #32
 8017454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8017456:	6878      	ldr	r0, [r7, #4]
 8017458:	f000 f8b8 	bl	80175cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801745c:	bf00      	nop
 801745e:	3710      	adds	r7, #16
 8017460:	46bd      	mov	sp, r7
 8017462:	bd80      	pop	{r7, pc}

08017464 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017464:	b480      	push	{r7}
 8017466:	b083      	sub	sp, #12
 8017468:	af00      	add	r7, sp, #0
 801746a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801746c:	bf00      	nop
 801746e:	370c      	adds	r7, #12
 8017470:	46bd      	mov	sp, r7
 8017472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017476:	4770      	bx	lr

08017478 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8017478:	b480      	push	{r7}
 801747a:	b083      	sub	sp, #12
 801747c:	af00      	add	r7, sp, #0
 801747e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8017480:	bf00      	nop
 8017482:	370c      	adds	r7, #12
 8017484:	46bd      	mov	sp, r7
 8017486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801748a:	4770      	bx	lr

0801748c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801748c:	b480      	push	{r7}
 801748e:	b083      	sub	sp, #12
 8017490:	af00      	add	r7, sp, #0
 8017492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8017494:	bf00      	nop
 8017496:	370c      	adds	r7, #12
 8017498:	46bd      	mov	sp, r7
 801749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801749e:	4770      	bx	lr

080174a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80174a0:	b480      	push	{r7}
 80174a2:	b083      	sub	sp, #12
 80174a4:	af00      	add	r7, sp, #0
 80174a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80174a8:	bf00      	nop
 80174aa:	370c      	adds	r7, #12
 80174ac:	46bd      	mov	sp, r7
 80174ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b2:	4770      	bx	lr

080174b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80174b4:	b480      	push	{r7}
 80174b6:	b085      	sub	sp, #20
 80174b8:	af00      	add	r7, sp, #0
 80174ba:	6078      	str	r0, [r7, #4]
 80174bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	681b      	ldr	r3, [r3, #0]
 80174c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	4a3a      	ldr	r2, [pc, #232]	; (80175b0 <TIM_Base_SetConfig+0xfc>)
 80174c8:	4293      	cmp	r3, r2
 80174ca:	d00f      	beq.n	80174ec <TIM_Base_SetConfig+0x38>
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80174d2:	d00b      	beq.n	80174ec <TIM_Base_SetConfig+0x38>
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	4a37      	ldr	r2, [pc, #220]	; (80175b4 <TIM_Base_SetConfig+0x100>)
 80174d8:	4293      	cmp	r3, r2
 80174da:	d007      	beq.n	80174ec <TIM_Base_SetConfig+0x38>
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	4a36      	ldr	r2, [pc, #216]	; (80175b8 <TIM_Base_SetConfig+0x104>)
 80174e0:	4293      	cmp	r3, r2
 80174e2:	d003      	beq.n	80174ec <TIM_Base_SetConfig+0x38>
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	4a35      	ldr	r2, [pc, #212]	; (80175bc <TIM_Base_SetConfig+0x108>)
 80174e8:	4293      	cmp	r3, r2
 80174ea:	d108      	bne.n	80174fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80174ec:	68fb      	ldr	r3, [r7, #12]
 80174ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80174f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80174f4:	683b      	ldr	r3, [r7, #0]
 80174f6:	685b      	ldr	r3, [r3, #4]
 80174f8:	68fa      	ldr	r2, [r7, #12]
 80174fa:	4313      	orrs	r3, r2
 80174fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	4a2b      	ldr	r2, [pc, #172]	; (80175b0 <TIM_Base_SetConfig+0xfc>)
 8017502:	4293      	cmp	r3, r2
 8017504:	d01b      	beq.n	801753e <TIM_Base_SetConfig+0x8a>
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801750c:	d017      	beq.n	801753e <TIM_Base_SetConfig+0x8a>
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	4a28      	ldr	r2, [pc, #160]	; (80175b4 <TIM_Base_SetConfig+0x100>)
 8017512:	4293      	cmp	r3, r2
 8017514:	d013      	beq.n	801753e <TIM_Base_SetConfig+0x8a>
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	4a27      	ldr	r2, [pc, #156]	; (80175b8 <TIM_Base_SetConfig+0x104>)
 801751a:	4293      	cmp	r3, r2
 801751c:	d00f      	beq.n	801753e <TIM_Base_SetConfig+0x8a>
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	4a26      	ldr	r2, [pc, #152]	; (80175bc <TIM_Base_SetConfig+0x108>)
 8017522:	4293      	cmp	r3, r2
 8017524:	d00b      	beq.n	801753e <TIM_Base_SetConfig+0x8a>
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	4a25      	ldr	r2, [pc, #148]	; (80175c0 <TIM_Base_SetConfig+0x10c>)
 801752a:	4293      	cmp	r3, r2
 801752c:	d007      	beq.n	801753e <TIM_Base_SetConfig+0x8a>
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	4a24      	ldr	r2, [pc, #144]	; (80175c4 <TIM_Base_SetConfig+0x110>)
 8017532:	4293      	cmp	r3, r2
 8017534:	d003      	beq.n	801753e <TIM_Base_SetConfig+0x8a>
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	4a23      	ldr	r2, [pc, #140]	; (80175c8 <TIM_Base_SetConfig+0x114>)
 801753a:	4293      	cmp	r3, r2
 801753c:	d108      	bne.n	8017550 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801753e:	68fb      	ldr	r3, [r7, #12]
 8017540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8017544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8017546:	683b      	ldr	r3, [r7, #0]
 8017548:	68db      	ldr	r3, [r3, #12]
 801754a:	68fa      	ldr	r2, [r7, #12]
 801754c:	4313      	orrs	r3, r2
 801754e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8017556:	683b      	ldr	r3, [r7, #0]
 8017558:	695b      	ldr	r3, [r3, #20]
 801755a:	4313      	orrs	r3, r2
 801755c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	68fa      	ldr	r2, [r7, #12]
 8017562:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8017564:	683b      	ldr	r3, [r7, #0]
 8017566:	689a      	ldr	r2, [r3, #8]
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801756c:	683b      	ldr	r3, [r7, #0]
 801756e:	681a      	ldr	r2, [r3, #0]
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	4a0e      	ldr	r2, [pc, #56]	; (80175b0 <TIM_Base_SetConfig+0xfc>)
 8017578:	4293      	cmp	r3, r2
 801757a:	d103      	bne.n	8017584 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801757c:	683b      	ldr	r3, [r7, #0]
 801757e:	691a      	ldr	r2, [r3, #16]
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	2201      	movs	r2, #1
 8017588:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	691b      	ldr	r3, [r3, #16]
 801758e:	f003 0301 	and.w	r3, r3, #1
 8017592:	2b01      	cmp	r3, #1
 8017594:	d105      	bne.n	80175a2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	691b      	ldr	r3, [r3, #16]
 801759a:	f023 0201 	bic.w	r2, r3, #1
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	611a      	str	r2, [r3, #16]
  }
}
 80175a2:	bf00      	nop
 80175a4:	3714      	adds	r7, #20
 80175a6:	46bd      	mov	sp, r7
 80175a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ac:	4770      	bx	lr
 80175ae:	bf00      	nop
 80175b0:	40010000 	.word	0x40010000
 80175b4:	40000400 	.word	0x40000400
 80175b8:	40000800 	.word	0x40000800
 80175bc:	40000c00 	.word	0x40000c00
 80175c0:	40014000 	.word	0x40014000
 80175c4:	40014400 	.word	0x40014400
 80175c8:	40014800 	.word	0x40014800

080175cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80175cc:	b480      	push	{r7}
 80175ce:	b083      	sub	sp, #12
 80175d0:	af00      	add	r7, sp, #0
 80175d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80175d4:	bf00      	nop
 80175d6:	370c      	adds	r7, #12
 80175d8:	46bd      	mov	sp, r7
 80175da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175de:	4770      	bx	lr

080175e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80175e0:	b480      	push	{r7}
 80175e2:	b083      	sub	sp, #12
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80175e8:	bf00      	nop
 80175ea:	370c      	adds	r7, #12
 80175ec:	46bd      	mov	sp, r7
 80175ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175f2:	4770      	bx	lr

080175f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80175f4:	b580      	push	{r7, lr}
 80175f6:	b082      	sub	sp, #8
 80175f8:	af00      	add	r7, sp, #0
 80175fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d101      	bne.n	8017606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8017602:	2301      	movs	r3, #1
 8017604:	e042      	b.n	801768c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801760c:	b2db      	uxtb	r3, r3
 801760e:	2b00      	cmp	r3, #0
 8017610:	d106      	bne.n	8017620 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	2200      	movs	r2, #0
 8017616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801761a:	6878      	ldr	r0, [r7, #4]
 801761c:	f7fb f954 	bl	80128c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	2224      	movs	r2, #36	; 0x24
 8017624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	68da      	ldr	r2, [r3, #12]
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	681b      	ldr	r3, [r3, #0]
 8017632:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8017636:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8017638:	6878      	ldr	r0, [r7, #4]
 801763a:	f000 fd11 	bl	8018060 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	681b      	ldr	r3, [r3, #0]
 8017642:	691a      	ldr	r2, [r3, #16]
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	681b      	ldr	r3, [r3, #0]
 8017648:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801764c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	681b      	ldr	r3, [r3, #0]
 8017652:	695a      	ldr	r2, [r3, #20]
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801765c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	68da      	ldr	r2, [r3, #12]
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801766c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	2200      	movs	r2, #0
 8017672:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	2220      	movs	r2, #32
 8017678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	2220      	movs	r2, #32
 8017680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	2200      	movs	r2, #0
 8017688:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 801768a:	2300      	movs	r3, #0
}
 801768c:	4618      	mov	r0, r3
 801768e:	3708      	adds	r7, #8
 8017690:	46bd      	mov	sp, r7
 8017692:	bd80      	pop	{r7, pc}

08017694 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017694:	b580      	push	{r7, lr}
 8017696:	b08c      	sub	sp, #48	; 0x30
 8017698:	af00      	add	r7, sp, #0
 801769a:	60f8      	str	r0, [r7, #12]
 801769c:	60b9      	str	r1, [r7, #8]
 801769e:	4613      	mov	r3, r2
 80176a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80176a2:	68fb      	ldr	r3, [r7, #12]
 80176a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80176a8:	b2db      	uxtb	r3, r3
 80176aa:	2b20      	cmp	r3, #32
 80176ac:	d14a      	bne.n	8017744 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80176ae:	68bb      	ldr	r3, [r7, #8]
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d002      	beq.n	80176ba <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80176b4:	88fb      	ldrh	r3, [r7, #6]
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d101      	bne.n	80176be <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80176ba:	2301      	movs	r3, #1
 80176bc:	e043      	b.n	8017746 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	2201      	movs	r2, #1
 80176c2:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	2200      	movs	r2, #0
 80176c8:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80176ca:	88fb      	ldrh	r3, [r7, #6]
 80176cc:	461a      	mov	r2, r3
 80176ce:	68b9      	ldr	r1, [r7, #8]
 80176d0:	68f8      	ldr	r0, [r7, #12]
 80176d2:	f000 faed 	bl	8017cb0 <UART_Start_Receive_IT>
 80176d6:	4603      	mov	r3, r0
 80176d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80176dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d12c      	bne.n	801773e <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176e8:	2b01      	cmp	r3, #1
 80176ea:	d125      	bne.n	8017738 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80176ec:	2300      	movs	r3, #0
 80176ee:	613b      	str	r3, [r7, #16]
 80176f0:	68fb      	ldr	r3, [r7, #12]
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	681b      	ldr	r3, [r3, #0]
 80176f6:	613b      	str	r3, [r7, #16]
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	685b      	ldr	r3, [r3, #4]
 80176fe:	613b      	str	r3, [r7, #16]
 8017700:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	681b      	ldr	r3, [r3, #0]
 8017706:	330c      	adds	r3, #12
 8017708:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801770a:	69bb      	ldr	r3, [r7, #24]
 801770c:	e853 3f00 	ldrex	r3, [r3]
 8017710:	617b      	str	r3, [r7, #20]
   return(result);
 8017712:	697b      	ldr	r3, [r7, #20]
 8017714:	f043 0310 	orr.w	r3, r3, #16
 8017718:	62bb      	str	r3, [r7, #40]	; 0x28
 801771a:	68fb      	ldr	r3, [r7, #12]
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	330c      	adds	r3, #12
 8017720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017722:	627a      	str	r2, [r7, #36]	; 0x24
 8017724:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017726:	6a39      	ldr	r1, [r7, #32]
 8017728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801772a:	e841 2300 	strex	r3, r2, [r1]
 801772e:	61fb      	str	r3, [r7, #28]
   return(result);
 8017730:	69fb      	ldr	r3, [r7, #28]
 8017732:	2b00      	cmp	r3, #0
 8017734:	d1e5      	bne.n	8017702 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8017736:	e002      	b.n	801773e <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8017738:	2301      	movs	r3, #1
 801773a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801773e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017742:	e000      	b.n	8017746 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8017744:	2302      	movs	r3, #2
  }
}
 8017746:	4618      	mov	r0, r3
 8017748:	3730      	adds	r7, #48	; 0x30
 801774a:	46bd      	mov	sp, r7
 801774c:	bd80      	pop	{r7, pc}
	...

08017750 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8017750:	b580      	push	{r7, lr}
 8017752:	b0ba      	sub	sp, #232	; 0xe8
 8017754:	af00      	add	r7, sp, #0
 8017756:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	681b      	ldr	r3, [r3, #0]
 801775c:	681b      	ldr	r3, [r3, #0]
 801775e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	68db      	ldr	r3, [r3, #12]
 8017768:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	681b      	ldr	r3, [r3, #0]
 8017770:	695b      	ldr	r3, [r3, #20]
 8017772:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8017776:	2300      	movs	r3, #0
 8017778:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 801777c:	2300      	movs	r3, #0
 801777e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8017782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017786:	f003 030f 	and.w	r3, r3, #15
 801778a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801778e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8017792:	2b00      	cmp	r3, #0
 8017794:	d10f      	bne.n	80177b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8017796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801779a:	f003 0320 	and.w	r3, r3, #32
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d009      	beq.n	80177b6 <HAL_UART_IRQHandler+0x66>
 80177a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80177a6:	f003 0320 	and.w	r3, r3, #32
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d003      	beq.n	80177b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80177ae:	6878      	ldr	r0, [r7, #4]
 80177b0:	f000 fb97 	bl	8017ee2 <UART_Receive_IT>
      return;
 80177b4:	e25b      	b.n	8017c6e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80177b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	f000 80de 	beq.w	801797c <HAL_UART_IRQHandler+0x22c>
 80177c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80177c4:	f003 0301 	and.w	r3, r3, #1
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d106      	bne.n	80177da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80177cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80177d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	f000 80d1 	beq.w	801797c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80177da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80177de:	f003 0301 	and.w	r3, r3, #1
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d00b      	beq.n	80177fe <HAL_UART_IRQHandler+0xae>
 80177e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80177ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d005      	beq.n	80177fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80177f6:	f043 0201 	orr.w	r2, r3, #1
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80177fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017802:	f003 0304 	and.w	r3, r3, #4
 8017806:	2b00      	cmp	r3, #0
 8017808:	d00b      	beq.n	8017822 <HAL_UART_IRQHandler+0xd2>
 801780a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801780e:	f003 0301 	and.w	r3, r3, #1
 8017812:	2b00      	cmp	r3, #0
 8017814:	d005      	beq.n	8017822 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801781a:	f043 0202 	orr.w	r2, r3, #2
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8017822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017826:	f003 0302 	and.w	r3, r3, #2
 801782a:	2b00      	cmp	r3, #0
 801782c:	d00b      	beq.n	8017846 <HAL_UART_IRQHandler+0xf6>
 801782e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017832:	f003 0301 	and.w	r3, r3, #1
 8017836:	2b00      	cmp	r3, #0
 8017838:	d005      	beq.n	8017846 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801783e:	f043 0204 	orr.w	r2, r3, #4
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8017846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801784a:	f003 0308 	and.w	r3, r3, #8
 801784e:	2b00      	cmp	r3, #0
 8017850:	d011      	beq.n	8017876 <HAL_UART_IRQHandler+0x126>
 8017852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017856:	f003 0320 	and.w	r3, r3, #32
 801785a:	2b00      	cmp	r3, #0
 801785c:	d105      	bne.n	801786a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801785e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017862:	f003 0301 	and.w	r3, r3, #1
 8017866:	2b00      	cmp	r3, #0
 8017868:	d005      	beq.n	8017876 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801786e:	f043 0208 	orr.w	r2, r3, #8
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801787a:	2b00      	cmp	r3, #0
 801787c:	f000 81f2 	beq.w	8017c64 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8017880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017884:	f003 0320 	and.w	r3, r3, #32
 8017888:	2b00      	cmp	r3, #0
 801788a:	d008      	beq.n	801789e <HAL_UART_IRQHandler+0x14e>
 801788c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017890:	f003 0320 	and.w	r3, r3, #32
 8017894:	2b00      	cmp	r3, #0
 8017896:	d002      	beq.n	801789e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8017898:	6878      	ldr	r0, [r7, #4]
 801789a:	f000 fb22 	bl	8017ee2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	695b      	ldr	r3, [r3, #20]
 80178a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80178a8:	2b40      	cmp	r3, #64	; 0x40
 80178aa:	bf0c      	ite	eq
 80178ac:	2301      	moveq	r3, #1
 80178ae:	2300      	movne	r3, #0
 80178b0:	b2db      	uxtb	r3, r3
 80178b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80178ba:	f003 0308 	and.w	r3, r3, #8
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d103      	bne.n	80178ca <HAL_UART_IRQHandler+0x17a>
 80178c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d04f      	beq.n	801796a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80178ca:	6878      	ldr	r0, [r7, #4]
 80178cc:	f000 fa2a 	bl	8017d24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	695b      	ldr	r3, [r3, #20]
 80178d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80178da:	2b40      	cmp	r3, #64	; 0x40
 80178dc:	d141      	bne.n	8017962 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	3314      	adds	r3, #20
 80178e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80178e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80178ec:	e853 3f00 	ldrex	r3, [r3]
 80178f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80178f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80178f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80178fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	3314      	adds	r3, #20
 8017906:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801790a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801790e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017912:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8017916:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801791a:	e841 2300 	strex	r3, r2, [r1]
 801791e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8017922:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017926:	2b00      	cmp	r3, #0
 8017928:	d1d9      	bne.n	80178de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801792e:	2b00      	cmp	r3, #0
 8017930:	d013      	beq.n	801795a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017936:	4a7e      	ldr	r2, [pc, #504]	; (8017b30 <HAL_UART_IRQHandler+0x3e0>)
 8017938:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801793e:	4618      	mov	r0, r3
 8017940:	f7fd ff32 	bl	80157a8 <HAL_DMA_Abort_IT>
 8017944:	4603      	mov	r3, r0
 8017946:	2b00      	cmp	r3, #0
 8017948:	d016      	beq.n	8017978 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801794e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017950:	687a      	ldr	r2, [r7, #4]
 8017952:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8017954:	4610      	mov	r0, r2
 8017956:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017958:	e00e      	b.n	8017978 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801795a:	6878      	ldr	r0, [r7, #4]
 801795c:	f000 f99e 	bl	8017c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017960:	e00a      	b.n	8017978 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8017962:	6878      	ldr	r0, [r7, #4]
 8017964:	f000 f99a 	bl	8017c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017968:	e006      	b.n	8017978 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801796a:	6878      	ldr	r0, [r7, #4]
 801796c:	f000 f996 	bl	8017c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	2200      	movs	r2, #0
 8017974:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8017976:	e175      	b.n	8017c64 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017978:	bf00      	nop
    return;
 801797a:	e173      	b.n	8017c64 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017980:	2b01      	cmp	r3, #1
 8017982:	f040 814f 	bne.w	8017c24 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8017986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801798a:	f003 0310 	and.w	r3, r3, #16
 801798e:	2b00      	cmp	r3, #0
 8017990:	f000 8148 	beq.w	8017c24 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8017994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017998:	f003 0310 	and.w	r3, r3, #16
 801799c:	2b00      	cmp	r3, #0
 801799e:	f000 8141 	beq.w	8017c24 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80179a2:	2300      	movs	r3, #0
 80179a4:	60bb      	str	r3, [r7, #8]
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	681b      	ldr	r3, [r3, #0]
 80179ac:	60bb      	str	r3, [r7, #8]
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	685b      	ldr	r3, [r3, #4]
 80179b4:	60bb      	str	r3, [r7, #8]
 80179b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	681b      	ldr	r3, [r3, #0]
 80179bc:	695b      	ldr	r3, [r3, #20]
 80179be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80179c2:	2b40      	cmp	r3, #64	; 0x40
 80179c4:	f040 80b6 	bne.w	8017b34 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	685b      	ldr	r3, [r3, #4]
 80179d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80179d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80179d8:	2b00      	cmp	r3, #0
 80179da:	f000 8145 	beq.w	8017c68 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80179e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80179e6:	429a      	cmp	r2, r3
 80179e8:	f080 813e 	bcs.w	8017c68 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80179f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80179f8:	69db      	ldr	r3, [r3, #28]
 80179fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80179fe:	f000 8088 	beq.w	8017b12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	330c      	adds	r3, #12
 8017a08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017a10:	e853 3f00 	ldrex	r3, [r3]
 8017a14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8017a18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017a20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	681b      	ldr	r3, [r3, #0]
 8017a28:	330c      	adds	r3, #12
 8017a2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8017a2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8017a32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a36:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8017a3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8017a3e:	e841 2300 	strex	r3, r2, [r1]
 8017a42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8017a46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d1d9      	bne.n	8017a02 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	3314      	adds	r3, #20
 8017a54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017a58:	e853 3f00 	ldrex	r3, [r3]
 8017a5c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8017a5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017a60:	f023 0301 	bic.w	r3, r3, #1
 8017a64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	3314      	adds	r3, #20
 8017a6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8017a72:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8017a76:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8017a7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8017a7e:	e841 2300 	strex	r3, r2, [r1]
 8017a82:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8017a84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d1e1      	bne.n	8017a4e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	3314      	adds	r3, #20
 8017a90:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017a94:	e853 3f00 	ldrex	r3, [r3]
 8017a98:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8017a9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017aa0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	3314      	adds	r3, #20
 8017aaa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8017aae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8017ab0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ab2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8017ab4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8017ab6:	e841 2300 	strex	r3, r2, [r1]
 8017aba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8017abc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d1e3      	bne.n	8017a8a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	2220      	movs	r2, #32
 8017ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	2200      	movs	r2, #0
 8017ace:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	681b      	ldr	r3, [r3, #0]
 8017ad4:	330c      	adds	r3, #12
 8017ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017ada:	e853 3f00 	ldrex	r3, [r3]
 8017ade:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8017ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017ae2:	f023 0310 	bic.w	r3, r3, #16
 8017ae6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	681b      	ldr	r3, [r3, #0]
 8017aee:	330c      	adds	r3, #12
 8017af0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8017af4:	65ba      	str	r2, [r7, #88]	; 0x58
 8017af6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017af8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017afa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017afc:	e841 2300 	strex	r3, r2, [r1]
 8017b00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8017b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d1e3      	bne.n	8017ad0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b0c:	4618      	mov	r0, r3
 8017b0e:	f7fd fddb 	bl	80156c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	2202      	movs	r2, #2
 8017b16:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017b20:	b29b      	uxth	r3, r3
 8017b22:	1ad3      	subs	r3, r2, r3
 8017b24:	b29b      	uxth	r3, r3
 8017b26:	4619      	mov	r1, r3
 8017b28:	6878      	ldr	r0, [r7, #4]
 8017b2a:	f7f9 fa9d 	bl	8011068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8017b2e:	e09b      	b.n	8017c68 <HAL_UART_IRQHandler+0x518>
 8017b30:	08017deb 	.word	0x08017deb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017b3c:	b29b      	uxth	r3, r3
 8017b3e:	1ad3      	subs	r3, r2, r3
 8017b40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017b48:	b29b      	uxth	r3, r3
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	f000 808e 	beq.w	8017c6c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8017b50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	f000 8089 	beq.w	8017c6c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	681b      	ldr	r3, [r3, #0]
 8017b5e:	330c      	adds	r3, #12
 8017b60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b64:	e853 3f00 	ldrex	r3, [r3]
 8017b68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8017b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017b70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	681b      	ldr	r3, [r3, #0]
 8017b78:	330c      	adds	r3, #12
 8017b7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8017b7e:	647a      	str	r2, [r7, #68]	; 0x44
 8017b80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017b82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017b84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017b86:	e841 2300 	strex	r3, r2, [r1]
 8017b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d1e3      	bne.n	8017b5a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	3314      	adds	r3, #20
 8017b98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b9c:	e853 3f00 	ldrex	r3, [r3]
 8017ba0:	623b      	str	r3, [r7, #32]
   return(result);
 8017ba2:	6a3b      	ldr	r3, [r7, #32]
 8017ba4:	f023 0301 	bic.w	r3, r3, #1
 8017ba8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8017bac:	687b      	ldr	r3, [r7, #4]
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	3314      	adds	r3, #20
 8017bb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8017bb6:	633a      	str	r2, [r7, #48]	; 0x30
 8017bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017bba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017bbe:	e841 2300 	strex	r3, r2, [r1]
 8017bc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d1e3      	bne.n	8017b92 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	2220      	movs	r2, #32
 8017bce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	2200      	movs	r2, #0
 8017bd6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	330c      	adds	r3, #12
 8017bde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017be0:	693b      	ldr	r3, [r7, #16]
 8017be2:	e853 3f00 	ldrex	r3, [r3]
 8017be6:	60fb      	str	r3, [r7, #12]
   return(result);
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	f023 0310 	bic.w	r3, r3, #16
 8017bee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	681b      	ldr	r3, [r3, #0]
 8017bf6:	330c      	adds	r3, #12
 8017bf8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8017bfc:	61fa      	str	r2, [r7, #28]
 8017bfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c00:	69b9      	ldr	r1, [r7, #24]
 8017c02:	69fa      	ldr	r2, [r7, #28]
 8017c04:	e841 2300 	strex	r3, r2, [r1]
 8017c08:	617b      	str	r3, [r7, #20]
   return(result);
 8017c0a:	697b      	ldr	r3, [r7, #20]
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d1e3      	bne.n	8017bd8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	2202      	movs	r2, #2
 8017c14:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8017c16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8017c1a:	4619      	mov	r1, r3
 8017c1c:	6878      	ldr	r0, [r7, #4]
 8017c1e:	f7f9 fa23 	bl	8011068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8017c22:	e023      	b.n	8017c6c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8017c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d009      	beq.n	8017c44 <HAL_UART_IRQHandler+0x4f4>
 8017c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d003      	beq.n	8017c44 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8017c3c:	6878      	ldr	r0, [r7, #4]
 8017c3e:	f000 f8e8 	bl	8017e12 <UART_Transmit_IT>
    return;
 8017c42:	e014      	b.n	8017c6e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8017c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d00e      	beq.n	8017c6e <HAL_UART_IRQHandler+0x51e>
 8017c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d008      	beq.n	8017c6e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8017c5c:	6878      	ldr	r0, [r7, #4]
 8017c5e:	f000 f928 	bl	8017eb2 <UART_EndTransmit_IT>
    return;
 8017c62:	e004      	b.n	8017c6e <HAL_UART_IRQHandler+0x51e>
    return;
 8017c64:	bf00      	nop
 8017c66:	e002      	b.n	8017c6e <HAL_UART_IRQHandler+0x51e>
      return;
 8017c68:	bf00      	nop
 8017c6a:	e000      	b.n	8017c6e <HAL_UART_IRQHandler+0x51e>
      return;
 8017c6c:	bf00      	nop
  }
}
 8017c6e:	37e8      	adds	r7, #232	; 0xe8
 8017c70:	46bd      	mov	sp, r7
 8017c72:	bd80      	pop	{r7, pc}

08017c74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017c74:	b480      	push	{r7}
 8017c76:	b083      	sub	sp, #12
 8017c78:	af00      	add	r7, sp, #0
 8017c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8017c7c:	bf00      	nop
 8017c7e:	370c      	adds	r7, #12
 8017c80:	46bd      	mov	sp, r7
 8017c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c86:	4770      	bx	lr

08017c88 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8017c88:	b480      	push	{r7}
 8017c8a:	b083      	sub	sp, #12
 8017c8c:	af00      	add	r7, sp, #0
 8017c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8017c90:	bf00      	nop
 8017c92:	370c      	adds	r7, #12
 8017c94:	46bd      	mov	sp, r7
 8017c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c9a:	4770      	bx	lr

08017c9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8017c9c:	b480      	push	{r7}
 8017c9e:	b083      	sub	sp, #12
 8017ca0:	af00      	add	r7, sp, #0
 8017ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8017ca4:	bf00      	nop
 8017ca6:	370c      	adds	r7, #12
 8017ca8:	46bd      	mov	sp, r7
 8017caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cae:	4770      	bx	lr

08017cb0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017cb0:	b480      	push	{r7}
 8017cb2:	b085      	sub	sp, #20
 8017cb4:	af00      	add	r7, sp, #0
 8017cb6:	60f8      	str	r0, [r7, #12]
 8017cb8:	60b9      	str	r1, [r7, #8]
 8017cba:	4613      	mov	r3, r2
 8017cbc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	68ba      	ldr	r2, [r7, #8]
 8017cc2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8017cc4:	68fb      	ldr	r3, [r7, #12]
 8017cc6:	88fa      	ldrh	r2, [r7, #6]
 8017cc8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8017cca:	68fb      	ldr	r3, [r7, #12]
 8017ccc:	88fa      	ldrh	r2, [r7, #6]
 8017cce:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017cd0:	68fb      	ldr	r3, [r7, #12]
 8017cd2:	2200      	movs	r2, #0
 8017cd4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017cd6:	68fb      	ldr	r3, [r7, #12]
 8017cd8:	2222      	movs	r2, #34	; 0x22
 8017cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8017cde:	68fb      	ldr	r3, [r7, #12]
 8017ce0:	691b      	ldr	r3, [r3, #16]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d007      	beq.n	8017cf6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8017ce6:	68fb      	ldr	r3, [r7, #12]
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	68da      	ldr	r2, [r3, #12]
 8017cec:	68fb      	ldr	r3, [r7, #12]
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017cf4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8017cf6:	68fb      	ldr	r3, [r7, #12]
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	695a      	ldr	r2, [r3, #20]
 8017cfc:	68fb      	ldr	r3, [r7, #12]
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	f042 0201 	orr.w	r2, r2, #1
 8017d04:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8017d06:	68fb      	ldr	r3, [r7, #12]
 8017d08:	681b      	ldr	r3, [r3, #0]
 8017d0a:	68da      	ldr	r2, [r3, #12]
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	681b      	ldr	r3, [r3, #0]
 8017d10:	f042 0220 	orr.w	r2, r2, #32
 8017d14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8017d16:	2300      	movs	r3, #0
}
 8017d18:	4618      	mov	r0, r3
 8017d1a:	3714      	adds	r7, #20
 8017d1c:	46bd      	mov	sp, r7
 8017d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d22:	4770      	bx	lr

08017d24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017d24:	b480      	push	{r7}
 8017d26:	b095      	sub	sp, #84	; 0x54
 8017d28:	af00      	add	r7, sp, #0
 8017d2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	330c      	adds	r3, #12
 8017d32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d36:	e853 3f00 	ldrex	r3, [r3]
 8017d3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017d42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	681b      	ldr	r3, [r3, #0]
 8017d48:	330c      	adds	r3, #12
 8017d4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017d4c:	643a      	str	r2, [r7, #64]	; 0x40
 8017d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017d52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017d54:	e841 2300 	strex	r3, r2, [r1]
 8017d58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d1e5      	bne.n	8017d2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	681b      	ldr	r3, [r3, #0]
 8017d64:	3314      	adds	r3, #20
 8017d66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d68:	6a3b      	ldr	r3, [r7, #32]
 8017d6a:	e853 3f00 	ldrex	r3, [r3]
 8017d6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8017d70:	69fb      	ldr	r3, [r7, #28]
 8017d72:	f023 0301 	bic.w	r3, r3, #1
 8017d76:	64bb      	str	r3, [r7, #72]	; 0x48
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	3314      	adds	r3, #20
 8017d7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017d80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017d82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d88:	e841 2300 	strex	r3, r2, [r1]
 8017d8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d1e5      	bne.n	8017d60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d98:	2b01      	cmp	r3, #1
 8017d9a:	d119      	bne.n	8017dd0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	681b      	ldr	r3, [r3, #0]
 8017da0:	330c      	adds	r3, #12
 8017da2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	e853 3f00 	ldrex	r3, [r3]
 8017daa:	60bb      	str	r3, [r7, #8]
   return(result);
 8017dac:	68bb      	ldr	r3, [r7, #8]
 8017dae:	f023 0310 	bic.w	r3, r3, #16
 8017db2:	647b      	str	r3, [r7, #68]	; 0x44
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	681b      	ldr	r3, [r3, #0]
 8017db8:	330c      	adds	r3, #12
 8017dba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017dbc:	61ba      	str	r2, [r7, #24]
 8017dbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017dc0:	6979      	ldr	r1, [r7, #20]
 8017dc2:	69ba      	ldr	r2, [r7, #24]
 8017dc4:	e841 2300 	strex	r3, r2, [r1]
 8017dc8:	613b      	str	r3, [r7, #16]
   return(result);
 8017dca:	693b      	ldr	r3, [r7, #16]
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d1e5      	bne.n	8017d9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	2220      	movs	r2, #32
 8017dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	2200      	movs	r2, #0
 8017ddc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8017dde:	bf00      	nop
 8017de0:	3754      	adds	r7, #84	; 0x54
 8017de2:	46bd      	mov	sp, r7
 8017de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017de8:	4770      	bx	lr

08017dea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8017dea:	b580      	push	{r7, lr}
 8017dec:	b084      	sub	sp, #16
 8017dee:	af00      	add	r7, sp, #0
 8017df0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017df6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8017df8:	68fb      	ldr	r3, [r7, #12]
 8017dfa:	2200      	movs	r2, #0
 8017dfc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	2200      	movs	r2, #0
 8017e02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8017e04:	68f8      	ldr	r0, [r7, #12]
 8017e06:	f7ff ff49 	bl	8017c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017e0a:	bf00      	nop
 8017e0c:	3710      	adds	r7, #16
 8017e0e:	46bd      	mov	sp, r7
 8017e10:	bd80      	pop	{r7, pc}

08017e12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8017e12:	b480      	push	{r7}
 8017e14:	b085      	sub	sp, #20
 8017e16:	af00      	add	r7, sp, #0
 8017e18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017e20:	b2db      	uxtb	r3, r3
 8017e22:	2b21      	cmp	r3, #33	; 0x21
 8017e24:	d13e      	bne.n	8017ea4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	689b      	ldr	r3, [r3, #8]
 8017e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017e2e:	d114      	bne.n	8017e5a <UART_Transmit_IT+0x48>
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	691b      	ldr	r3, [r3, #16]
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d110      	bne.n	8017e5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	6a1b      	ldr	r3, [r3, #32]
 8017e3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8017e3e:	68fb      	ldr	r3, [r7, #12]
 8017e40:	881b      	ldrh	r3, [r3, #0]
 8017e42:	461a      	mov	r2, r3
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	681b      	ldr	r3, [r3, #0]
 8017e48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017e4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	6a1b      	ldr	r3, [r3, #32]
 8017e52:	1c9a      	adds	r2, r3, #2
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	621a      	str	r2, [r3, #32]
 8017e58:	e008      	b.n	8017e6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	6a1b      	ldr	r3, [r3, #32]
 8017e5e:	1c59      	adds	r1, r3, #1
 8017e60:	687a      	ldr	r2, [r7, #4]
 8017e62:	6211      	str	r1, [r2, #32]
 8017e64:	781a      	ldrb	r2, [r3, #0]
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8017e70:	b29b      	uxth	r3, r3
 8017e72:	3b01      	subs	r3, #1
 8017e74:	b29b      	uxth	r3, r3
 8017e76:	687a      	ldr	r2, [r7, #4]
 8017e78:	4619      	mov	r1, r3
 8017e7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d10f      	bne.n	8017ea0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	68da      	ldr	r2, [r3, #12]
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	681b      	ldr	r3, [r3, #0]
 8017e8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017e8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	681b      	ldr	r3, [r3, #0]
 8017e94:	68da      	ldr	r2, [r3, #12]
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	681b      	ldr	r3, [r3, #0]
 8017e9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8017e9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	e000      	b.n	8017ea6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8017ea4:	2302      	movs	r3, #2
  }
}
 8017ea6:	4618      	mov	r0, r3
 8017ea8:	3714      	adds	r7, #20
 8017eaa:	46bd      	mov	sp, r7
 8017eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eb0:	4770      	bx	lr

08017eb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8017eb2:	b580      	push	{r7, lr}
 8017eb4:	b082      	sub	sp, #8
 8017eb6:	af00      	add	r7, sp, #0
 8017eb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	68da      	ldr	r2, [r3, #12]
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017ec8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	2220      	movs	r2, #32
 8017ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8017ed2:	6878      	ldr	r0, [r7, #4]
 8017ed4:	f7ff fece 	bl	8017c74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8017ed8:	2300      	movs	r3, #0
}
 8017eda:	4618      	mov	r0, r3
 8017edc:	3708      	adds	r7, #8
 8017ede:	46bd      	mov	sp, r7
 8017ee0:	bd80      	pop	{r7, pc}

08017ee2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8017ee2:	b580      	push	{r7, lr}
 8017ee4:	b08c      	sub	sp, #48	; 0x30
 8017ee6:	af00      	add	r7, sp, #0
 8017ee8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017ef0:	b2db      	uxtb	r3, r3
 8017ef2:	2b22      	cmp	r3, #34	; 0x22
 8017ef4:	f040 80ae 	bne.w	8018054 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	689b      	ldr	r3, [r3, #8]
 8017efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017f00:	d117      	bne.n	8017f32 <UART_Receive_IT+0x50>
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	691b      	ldr	r3, [r3, #16]
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d113      	bne.n	8017f32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8017f0a:	2300      	movs	r3, #0
 8017f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f12:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	685b      	ldr	r3, [r3, #4]
 8017f1a:	b29b      	uxth	r3, r3
 8017f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017f20:	b29a      	uxth	r2, r3
 8017f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f2a:	1c9a      	adds	r2, r3, #2
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	629a      	str	r2, [r3, #40]	; 0x28
 8017f30:	e026      	b.n	8017f80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f36:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8017f38:	2300      	movs	r3, #0
 8017f3a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	689b      	ldr	r3, [r3, #8]
 8017f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017f44:	d007      	beq.n	8017f56 <UART_Receive_IT+0x74>
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	689b      	ldr	r3, [r3, #8]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d10a      	bne.n	8017f64 <UART_Receive_IT+0x82>
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	691b      	ldr	r3, [r3, #16]
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d106      	bne.n	8017f64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	681b      	ldr	r3, [r3, #0]
 8017f5a:	685b      	ldr	r3, [r3, #4]
 8017f5c:	b2da      	uxtb	r2, r3
 8017f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f60:	701a      	strb	r2, [r3, #0]
 8017f62:	e008      	b.n	8017f76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	681b      	ldr	r3, [r3, #0]
 8017f68:	685b      	ldr	r3, [r3, #4]
 8017f6a:	b2db      	uxtb	r3, r3
 8017f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017f70:	b2da      	uxtb	r2, r3
 8017f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f7a:	1c5a      	adds	r2, r3, #1
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017f84:	b29b      	uxth	r3, r3
 8017f86:	3b01      	subs	r3, #1
 8017f88:	b29b      	uxth	r3, r3
 8017f8a:	687a      	ldr	r2, [r7, #4]
 8017f8c:	4619      	mov	r1, r3
 8017f8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d15d      	bne.n	8018050 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	68da      	ldr	r2, [r3, #12]
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	f022 0220 	bic.w	r2, r2, #32
 8017fa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	681b      	ldr	r3, [r3, #0]
 8017fa8:	68da      	ldr	r2, [r3, #12]
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8017fb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	681b      	ldr	r3, [r3, #0]
 8017fb8:	695a      	ldr	r2, [r3, #20]
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	681b      	ldr	r3, [r3, #0]
 8017fbe:	f022 0201 	bic.w	r2, r2, #1
 8017fc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	2220      	movs	r2, #32
 8017fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	2200      	movs	r2, #0
 8017fd0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fd6:	2b01      	cmp	r3, #1
 8017fd8:	d135      	bne.n	8018046 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	2200      	movs	r2, #0
 8017fde:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	330c      	adds	r3, #12
 8017fe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017fe8:	697b      	ldr	r3, [r7, #20]
 8017fea:	e853 3f00 	ldrex	r3, [r3]
 8017fee:	613b      	str	r3, [r7, #16]
   return(result);
 8017ff0:	693b      	ldr	r3, [r7, #16]
 8017ff2:	f023 0310 	bic.w	r3, r3, #16
 8017ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	330c      	adds	r3, #12
 8017ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018000:	623a      	str	r2, [r7, #32]
 8018002:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018004:	69f9      	ldr	r1, [r7, #28]
 8018006:	6a3a      	ldr	r2, [r7, #32]
 8018008:	e841 2300 	strex	r3, r2, [r1]
 801800c:	61bb      	str	r3, [r7, #24]
   return(result);
 801800e:	69bb      	ldr	r3, [r7, #24]
 8018010:	2b00      	cmp	r3, #0
 8018012:	d1e5      	bne.n	8017fe0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	f003 0310 	and.w	r3, r3, #16
 801801e:	2b10      	cmp	r3, #16
 8018020:	d10a      	bne.n	8018038 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8018022:	2300      	movs	r3, #0
 8018024:	60fb      	str	r3, [r7, #12]
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	681b      	ldr	r3, [r3, #0]
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	60fb      	str	r3, [r7, #12]
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	685b      	ldr	r3, [r3, #4]
 8018034:	60fb      	str	r3, [r7, #12]
 8018036:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801803c:	4619      	mov	r1, r3
 801803e:	6878      	ldr	r0, [r7, #4]
 8018040:	f7f9 f812 	bl	8011068 <HAL_UARTEx_RxEventCallback>
 8018044:	e002      	b.n	801804c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8018046:	6878      	ldr	r0, [r7, #4]
 8018048:	f7ff fe1e 	bl	8017c88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801804c:	2300      	movs	r3, #0
 801804e:	e002      	b.n	8018056 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8018050:	2300      	movs	r3, #0
 8018052:	e000      	b.n	8018056 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8018054:	2302      	movs	r3, #2
  }
}
 8018056:	4618      	mov	r0, r3
 8018058:	3730      	adds	r7, #48	; 0x30
 801805a:	46bd      	mov	sp, r7
 801805c:	bd80      	pop	{r7, pc}
	...

08018060 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018064:	b0c0      	sub	sp, #256	; 0x100
 8018066:	af00      	add	r7, sp, #0
 8018068:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801806c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018070:	681b      	ldr	r3, [r3, #0]
 8018072:	691b      	ldr	r3, [r3, #16]
 8018074:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8018078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801807c:	68d9      	ldr	r1, [r3, #12]
 801807e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018082:	681a      	ldr	r2, [r3, #0]
 8018084:	ea40 0301 	orr.w	r3, r0, r1
 8018088:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801808a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801808e:	689a      	ldr	r2, [r3, #8]
 8018090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018094:	691b      	ldr	r3, [r3, #16]
 8018096:	431a      	orrs	r2, r3
 8018098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801809c:	695b      	ldr	r3, [r3, #20]
 801809e:	431a      	orrs	r2, r3
 80180a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80180a4:	69db      	ldr	r3, [r3, #28]
 80180a6:	4313      	orrs	r3, r2
 80180a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80180ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80180b0:	681b      	ldr	r3, [r3, #0]
 80180b2:	68db      	ldr	r3, [r3, #12]
 80180b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80180b8:	f021 010c 	bic.w	r1, r1, #12
 80180bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80180c0:	681a      	ldr	r2, [r3, #0]
 80180c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80180c6:	430b      	orrs	r3, r1
 80180c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80180ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	695b      	ldr	r3, [r3, #20]
 80180d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80180d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80180da:	6999      	ldr	r1, [r3, #24]
 80180dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80180e0:	681a      	ldr	r2, [r3, #0]
 80180e2:	ea40 0301 	orr.w	r3, r0, r1
 80180e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80180e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80180ec:	681a      	ldr	r2, [r3, #0]
 80180ee:	4b8f      	ldr	r3, [pc, #572]	; (801832c <UART_SetConfig+0x2cc>)
 80180f0:	429a      	cmp	r2, r3
 80180f2:	d005      	beq.n	8018100 <UART_SetConfig+0xa0>
 80180f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80180f8:	681a      	ldr	r2, [r3, #0]
 80180fa:	4b8d      	ldr	r3, [pc, #564]	; (8018330 <UART_SetConfig+0x2d0>)
 80180fc:	429a      	cmp	r2, r3
 80180fe:	d104      	bne.n	801810a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8018100:	f7fe f9e8 	bl	80164d4 <HAL_RCC_GetPCLK2Freq>
 8018104:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8018108:	e003      	b.n	8018112 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801810a:	f7fe f9cf 	bl	80164ac <HAL_RCC_GetPCLK1Freq>
 801810e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018116:	69db      	ldr	r3, [r3, #28]
 8018118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801811c:	f040 810c 	bne.w	8018338 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8018120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018124:	2200      	movs	r2, #0
 8018126:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801812a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801812e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8018132:	4622      	mov	r2, r4
 8018134:	462b      	mov	r3, r5
 8018136:	1891      	adds	r1, r2, r2
 8018138:	65b9      	str	r1, [r7, #88]	; 0x58
 801813a:	415b      	adcs	r3, r3
 801813c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801813e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8018142:	4621      	mov	r1, r4
 8018144:	eb12 0801 	adds.w	r8, r2, r1
 8018148:	4629      	mov	r1, r5
 801814a:	eb43 0901 	adc.w	r9, r3, r1
 801814e:	f04f 0200 	mov.w	r2, #0
 8018152:	f04f 0300 	mov.w	r3, #0
 8018156:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801815a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801815e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8018162:	4690      	mov	r8, r2
 8018164:	4699      	mov	r9, r3
 8018166:	4623      	mov	r3, r4
 8018168:	eb18 0303 	adds.w	r3, r8, r3
 801816c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8018170:	462b      	mov	r3, r5
 8018172:	eb49 0303 	adc.w	r3, r9, r3
 8018176:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801817a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801817e:	685b      	ldr	r3, [r3, #4]
 8018180:	2200      	movs	r2, #0
 8018182:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8018186:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801818a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801818e:	460b      	mov	r3, r1
 8018190:	18db      	adds	r3, r3, r3
 8018192:	653b      	str	r3, [r7, #80]	; 0x50
 8018194:	4613      	mov	r3, r2
 8018196:	eb42 0303 	adc.w	r3, r2, r3
 801819a:	657b      	str	r3, [r7, #84]	; 0x54
 801819c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80181a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80181a4:	f7f8 fd88 	bl	8010cb8 <__aeabi_uldivmod>
 80181a8:	4602      	mov	r2, r0
 80181aa:	460b      	mov	r3, r1
 80181ac:	4b61      	ldr	r3, [pc, #388]	; (8018334 <UART_SetConfig+0x2d4>)
 80181ae:	fba3 2302 	umull	r2, r3, r3, r2
 80181b2:	095b      	lsrs	r3, r3, #5
 80181b4:	011c      	lsls	r4, r3, #4
 80181b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80181ba:	2200      	movs	r2, #0
 80181bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80181c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80181c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80181c8:	4642      	mov	r2, r8
 80181ca:	464b      	mov	r3, r9
 80181cc:	1891      	adds	r1, r2, r2
 80181ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80181d0:	415b      	adcs	r3, r3
 80181d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80181d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80181d8:	4641      	mov	r1, r8
 80181da:	eb12 0a01 	adds.w	sl, r2, r1
 80181de:	4649      	mov	r1, r9
 80181e0:	eb43 0b01 	adc.w	fp, r3, r1
 80181e4:	f04f 0200 	mov.w	r2, #0
 80181e8:	f04f 0300 	mov.w	r3, #0
 80181ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80181f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80181f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80181f8:	4692      	mov	sl, r2
 80181fa:	469b      	mov	fp, r3
 80181fc:	4643      	mov	r3, r8
 80181fe:	eb1a 0303 	adds.w	r3, sl, r3
 8018202:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8018206:	464b      	mov	r3, r9
 8018208:	eb4b 0303 	adc.w	r3, fp, r3
 801820c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8018210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018214:	685b      	ldr	r3, [r3, #4]
 8018216:	2200      	movs	r2, #0
 8018218:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801821c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8018220:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8018224:	460b      	mov	r3, r1
 8018226:	18db      	adds	r3, r3, r3
 8018228:	643b      	str	r3, [r7, #64]	; 0x40
 801822a:	4613      	mov	r3, r2
 801822c:	eb42 0303 	adc.w	r3, r2, r3
 8018230:	647b      	str	r3, [r7, #68]	; 0x44
 8018232:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8018236:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801823a:	f7f8 fd3d 	bl	8010cb8 <__aeabi_uldivmod>
 801823e:	4602      	mov	r2, r0
 8018240:	460b      	mov	r3, r1
 8018242:	4611      	mov	r1, r2
 8018244:	4b3b      	ldr	r3, [pc, #236]	; (8018334 <UART_SetConfig+0x2d4>)
 8018246:	fba3 2301 	umull	r2, r3, r3, r1
 801824a:	095b      	lsrs	r3, r3, #5
 801824c:	2264      	movs	r2, #100	; 0x64
 801824e:	fb02 f303 	mul.w	r3, r2, r3
 8018252:	1acb      	subs	r3, r1, r3
 8018254:	00db      	lsls	r3, r3, #3
 8018256:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801825a:	4b36      	ldr	r3, [pc, #216]	; (8018334 <UART_SetConfig+0x2d4>)
 801825c:	fba3 2302 	umull	r2, r3, r3, r2
 8018260:	095b      	lsrs	r3, r3, #5
 8018262:	005b      	lsls	r3, r3, #1
 8018264:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8018268:	441c      	add	r4, r3
 801826a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801826e:	2200      	movs	r2, #0
 8018270:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8018274:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8018278:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 801827c:	4642      	mov	r2, r8
 801827e:	464b      	mov	r3, r9
 8018280:	1891      	adds	r1, r2, r2
 8018282:	63b9      	str	r1, [r7, #56]	; 0x38
 8018284:	415b      	adcs	r3, r3
 8018286:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018288:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801828c:	4641      	mov	r1, r8
 801828e:	1851      	adds	r1, r2, r1
 8018290:	6339      	str	r1, [r7, #48]	; 0x30
 8018292:	4649      	mov	r1, r9
 8018294:	414b      	adcs	r3, r1
 8018296:	637b      	str	r3, [r7, #52]	; 0x34
 8018298:	f04f 0200 	mov.w	r2, #0
 801829c:	f04f 0300 	mov.w	r3, #0
 80182a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80182a4:	4659      	mov	r1, fp
 80182a6:	00cb      	lsls	r3, r1, #3
 80182a8:	4651      	mov	r1, sl
 80182aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80182ae:	4651      	mov	r1, sl
 80182b0:	00ca      	lsls	r2, r1, #3
 80182b2:	4610      	mov	r0, r2
 80182b4:	4619      	mov	r1, r3
 80182b6:	4603      	mov	r3, r0
 80182b8:	4642      	mov	r2, r8
 80182ba:	189b      	adds	r3, r3, r2
 80182bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80182c0:	464b      	mov	r3, r9
 80182c2:	460a      	mov	r2, r1
 80182c4:	eb42 0303 	adc.w	r3, r2, r3
 80182c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80182cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80182d0:	685b      	ldr	r3, [r3, #4]
 80182d2:	2200      	movs	r2, #0
 80182d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80182d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80182dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80182e0:	460b      	mov	r3, r1
 80182e2:	18db      	adds	r3, r3, r3
 80182e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80182e6:	4613      	mov	r3, r2
 80182e8:	eb42 0303 	adc.w	r3, r2, r3
 80182ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80182ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80182f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80182f6:	f7f8 fcdf 	bl	8010cb8 <__aeabi_uldivmod>
 80182fa:	4602      	mov	r2, r0
 80182fc:	460b      	mov	r3, r1
 80182fe:	4b0d      	ldr	r3, [pc, #52]	; (8018334 <UART_SetConfig+0x2d4>)
 8018300:	fba3 1302 	umull	r1, r3, r3, r2
 8018304:	095b      	lsrs	r3, r3, #5
 8018306:	2164      	movs	r1, #100	; 0x64
 8018308:	fb01 f303 	mul.w	r3, r1, r3
 801830c:	1ad3      	subs	r3, r2, r3
 801830e:	00db      	lsls	r3, r3, #3
 8018310:	3332      	adds	r3, #50	; 0x32
 8018312:	4a08      	ldr	r2, [pc, #32]	; (8018334 <UART_SetConfig+0x2d4>)
 8018314:	fba2 2303 	umull	r2, r3, r2, r3
 8018318:	095b      	lsrs	r3, r3, #5
 801831a:	f003 0207 	and.w	r2, r3, #7
 801831e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018322:	681b      	ldr	r3, [r3, #0]
 8018324:	4422      	add	r2, r4
 8018326:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8018328:	e106      	b.n	8018538 <UART_SetConfig+0x4d8>
 801832a:	bf00      	nop
 801832c:	40011000 	.word	0x40011000
 8018330:	40011400 	.word	0x40011400
 8018334:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8018338:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801833c:	2200      	movs	r2, #0
 801833e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8018342:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8018346:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801834a:	4642      	mov	r2, r8
 801834c:	464b      	mov	r3, r9
 801834e:	1891      	adds	r1, r2, r2
 8018350:	6239      	str	r1, [r7, #32]
 8018352:	415b      	adcs	r3, r3
 8018354:	627b      	str	r3, [r7, #36]	; 0x24
 8018356:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801835a:	4641      	mov	r1, r8
 801835c:	1854      	adds	r4, r2, r1
 801835e:	4649      	mov	r1, r9
 8018360:	eb43 0501 	adc.w	r5, r3, r1
 8018364:	f04f 0200 	mov.w	r2, #0
 8018368:	f04f 0300 	mov.w	r3, #0
 801836c:	00eb      	lsls	r3, r5, #3
 801836e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8018372:	00e2      	lsls	r2, r4, #3
 8018374:	4614      	mov	r4, r2
 8018376:	461d      	mov	r5, r3
 8018378:	4643      	mov	r3, r8
 801837a:	18e3      	adds	r3, r4, r3
 801837c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8018380:	464b      	mov	r3, r9
 8018382:	eb45 0303 	adc.w	r3, r5, r3
 8018386:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801838a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801838e:	685b      	ldr	r3, [r3, #4]
 8018390:	2200      	movs	r2, #0
 8018392:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8018396:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801839a:	f04f 0200 	mov.w	r2, #0
 801839e:	f04f 0300 	mov.w	r3, #0
 80183a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80183a6:	4629      	mov	r1, r5
 80183a8:	008b      	lsls	r3, r1, #2
 80183aa:	4621      	mov	r1, r4
 80183ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80183b0:	4621      	mov	r1, r4
 80183b2:	008a      	lsls	r2, r1, #2
 80183b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80183b8:	f7f8 fc7e 	bl	8010cb8 <__aeabi_uldivmod>
 80183bc:	4602      	mov	r2, r0
 80183be:	460b      	mov	r3, r1
 80183c0:	4b60      	ldr	r3, [pc, #384]	; (8018544 <UART_SetConfig+0x4e4>)
 80183c2:	fba3 2302 	umull	r2, r3, r3, r2
 80183c6:	095b      	lsrs	r3, r3, #5
 80183c8:	011c      	lsls	r4, r3, #4
 80183ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80183ce:	2200      	movs	r2, #0
 80183d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80183d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80183d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80183dc:	4642      	mov	r2, r8
 80183de:	464b      	mov	r3, r9
 80183e0:	1891      	adds	r1, r2, r2
 80183e2:	61b9      	str	r1, [r7, #24]
 80183e4:	415b      	adcs	r3, r3
 80183e6:	61fb      	str	r3, [r7, #28]
 80183e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80183ec:	4641      	mov	r1, r8
 80183ee:	1851      	adds	r1, r2, r1
 80183f0:	6139      	str	r1, [r7, #16]
 80183f2:	4649      	mov	r1, r9
 80183f4:	414b      	adcs	r3, r1
 80183f6:	617b      	str	r3, [r7, #20]
 80183f8:	f04f 0200 	mov.w	r2, #0
 80183fc:	f04f 0300 	mov.w	r3, #0
 8018400:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8018404:	4659      	mov	r1, fp
 8018406:	00cb      	lsls	r3, r1, #3
 8018408:	4651      	mov	r1, sl
 801840a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801840e:	4651      	mov	r1, sl
 8018410:	00ca      	lsls	r2, r1, #3
 8018412:	4610      	mov	r0, r2
 8018414:	4619      	mov	r1, r3
 8018416:	4603      	mov	r3, r0
 8018418:	4642      	mov	r2, r8
 801841a:	189b      	adds	r3, r3, r2
 801841c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8018420:	464b      	mov	r3, r9
 8018422:	460a      	mov	r2, r1
 8018424:	eb42 0303 	adc.w	r3, r2, r3
 8018428:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801842c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018430:	685b      	ldr	r3, [r3, #4]
 8018432:	2200      	movs	r2, #0
 8018434:	67bb      	str	r3, [r7, #120]	; 0x78
 8018436:	67fa      	str	r2, [r7, #124]	; 0x7c
 8018438:	f04f 0200 	mov.w	r2, #0
 801843c:	f04f 0300 	mov.w	r3, #0
 8018440:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8018444:	4649      	mov	r1, r9
 8018446:	008b      	lsls	r3, r1, #2
 8018448:	4641      	mov	r1, r8
 801844a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801844e:	4641      	mov	r1, r8
 8018450:	008a      	lsls	r2, r1, #2
 8018452:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8018456:	f7f8 fc2f 	bl	8010cb8 <__aeabi_uldivmod>
 801845a:	4602      	mov	r2, r0
 801845c:	460b      	mov	r3, r1
 801845e:	4611      	mov	r1, r2
 8018460:	4b38      	ldr	r3, [pc, #224]	; (8018544 <UART_SetConfig+0x4e4>)
 8018462:	fba3 2301 	umull	r2, r3, r3, r1
 8018466:	095b      	lsrs	r3, r3, #5
 8018468:	2264      	movs	r2, #100	; 0x64
 801846a:	fb02 f303 	mul.w	r3, r2, r3
 801846e:	1acb      	subs	r3, r1, r3
 8018470:	011b      	lsls	r3, r3, #4
 8018472:	3332      	adds	r3, #50	; 0x32
 8018474:	4a33      	ldr	r2, [pc, #204]	; (8018544 <UART_SetConfig+0x4e4>)
 8018476:	fba2 2303 	umull	r2, r3, r2, r3
 801847a:	095b      	lsrs	r3, r3, #5
 801847c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018480:	441c      	add	r4, r3
 8018482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018486:	2200      	movs	r2, #0
 8018488:	673b      	str	r3, [r7, #112]	; 0x70
 801848a:	677a      	str	r2, [r7, #116]	; 0x74
 801848c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8018490:	4642      	mov	r2, r8
 8018492:	464b      	mov	r3, r9
 8018494:	1891      	adds	r1, r2, r2
 8018496:	60b9      	str	r1, [r7, #8]
 8018498:	415b      	adcs	r3, r3
 801849a:	60fb      	str	r3, [r7, #12]
 801849c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80184a0:	4641      	mov	r1, r8
 80184a2:	1851      	adds	r1, r2, r1
 80184a4:	6039      	str	r1, [r7, #0]
 80184a6:	4649      	mov	r1, r9
 80184a8:	414b      	adcs	r3, r1
 80184aa:	607b      	str	r3, [r7, #4]
 80184ac:	f04f 0200 	mov.w	r2, #0
 80184b0:	f04f 0300 	mov.w	r3, #0
 80184b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80184b8:	4659      	mov	r1, fp
 80184ba:	00cb      	lsls	r3, r1, #3
 80184bc:	4651      	mov	r1, sl
 80184be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80184c2:	4651      	mov	r1, sl
 80184c4:	00ca      	lsls	r2, r1, #3
 80184c6:	4610      	mov	r0, r2
 80184c8:	4619      	mov	r1, r3
 80184ca:	4603      	mov	r3, r0
 80184cc:	4642      	mov	r2, r8
 80184ce:	189b      	adds	r3, r3, r2
 80184d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80184d2:	464b      	mov	r3, r9
 80184d4:	460a      	mov	r2, r1
 80184d6:	eb42 0303 	adc.w	r3, r2, r3
 80184da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80184dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80184e0:	685b      	ldr	r3, [r3, #4]
 80184e2:	2200      	movs	r2, #0
 80184e4:	663b      	str	r3, [r7, #96]	; 0x60
 80184e6:	667a      	str	r2, [r7, #100]	; 0x64
 80184e8:	f04f 0200 	mov.w	r2, #0
 80184ec:	f04f 0300 	mov.w	r3, #0
 80184f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80184f4:	4649      	mov	r1, r9
 80184f6:	008b      	lsls	r3, r1, #2
 80184f8:	4641      	mov	r1, r8
 80184fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80184fe:	4641      	mov	r1, r8
 8018500:	008a      	lsls	r2, r1, #2
 8018502:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8018506:	f7f8 fbd7 	bl	8010cb8 <__aeabi_uldivmod>
 801850a:	4602      	mov	r2, r0
 801850c:	460b      	mov	r3, r1
 801850e:	4b0d      	ldr	r3, [pc, #52]	; (8018544 <UART_SetConfig+0x4e4>)
 8018510:	fba3 1302 	umull	r1, r3, r3, r2
 8018514:	095b      	lsrs	r3, r3, #5
 8018516:	2164      	movs	r1, #100	; 0x64
 8018518:	fb01 f303 	mul.w	r3, r1, r3
 801851c:	1ad3      	subs	r3, r2, r3
 801851e:	011b      	lsls	r3, r3, #4
 8018520:	3332      	adds	r3, #50	; 0x32
 8018522:	4a08      	ldr	r2, [pc, #32]	; (8018544 <UART_SetConfig+0x4e4>)
 8018524:	fba2 2303 	umull	r2, r3, r2, r3
 8018528:	095b      	lsrs	r3, r3, #5
 801852a:	f003 020f 	and.w	r2, r3, #15
 801852e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	4422      	add	r2, r4
 8018536:	609a      	str	r2, [r3, #8]
}
 8018538:	bf00      	nop
 801853a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 801853e:	46bd      	mov	sp, r7
 8018540:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018544:	51eb851f 	.word	0x51eb851f

08018548 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8018548:	b580      	push	{r7, lr}
 801854a:	b084      	sub	sp, #16
 801854c:	af00      	add	r7, sp, #0
 801854e:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8018550:	4b22      	ldr	r3, [pc, #136]	; (80185dc <WIZCHIP_READ+0x94>)
 8018552:	68db      	ldr	r3, [r3, #12]
 8018554:	4798      	blx	r3
   WIZCHIP.CS._select();
 8018556:	4b21      	ldr	r3, [pc, #132]	; (80185dc <WIZCHIP_READ+0x94>)
 8018558:	695b      	ldr	r3, [r3, #20]
 801855a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 801855c:	4b1f      	ldr	r3, [pc, #124]	; (80185dc <WIZCHIP_READ+0x94>)
 801855e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018560:	2b00      	cmp	r3, #0
 8018562:	d003      	beq.n	801856c <WIZCHIP_READ+0x24>
 8018564:	4b1d      	ldr	r3, [pc, #116]	; (80185dc <WIZCHIP_READ+0x94>)
 8018566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018568:	2b00      	cmp	r3, #0
 801856a:	d114      	bne.n	8018596 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 801856c:	4b1b      	ldr	r3, [pc, #108]	; (80185dc <WIZCHIP_READ+0x94>)
 801856e:	6a1b      	ldr	r3, [r3, #32]
 8018570:	687a      	ldr	r2, [r7, #4]
 8018572:	0c12      	lsrs	r2, r2, #16
 8018574:	b2d2      	uxtb	r2, r2
 8018576:	4610      	mov	r0, r2
 8018578:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 801857a:	4b18      	ldr	r3, [pc, #96]	; (80185dc <WIZCHIP_READ+0x94>)
 801857c:	6a1b      	ldr	r3, [r3, #32]
 801857e:	687a      	ldr	r2, [r7, #4]
 8018580:	0a12      	lsrs	r2, r2, #8
 8018582:	b2d2      	uxtb	r2, r2
 8018584:	4610      	mov	r0, r2
 8018586:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8018588:	4b14      	ldr	r3, [pc, #80]	; (80185dc <WIZCHIP_READ+0x94>)
 801858a:	6a1b      	ldr	r3, [r3, #32]
 801858c:	687a      	ldr	r2, [r7, #4]
 801858e:	b2d2      	uxtb	r2, r2
 8018590:	4610      	mov	r0, r2
 8018592:	4798      	blx	r3
 8018594:	e011      	b.n	80185ba <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	0c1b      	lsrs	r3, r3, #16
 801859a:	b2db      	uxtb	r3, r3
 801859c:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	0a1b      	lsrs	r3, r3, #8
 80185a2:	b2db      	uxtb	r3, r3
 80185a4:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	b2db      	uxtb	r3, r3
 80185aa:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80185ac:	4b0b      	ldr	r3, [pc, #44]	; (80185dc <WIZCHIP_READ+0x94>)
 80185ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80185b0:	f107 020c 	add.w	r2, r7, #12
 80185b4:	2103      	movs	r1, #3
 80185b6:	4610      	mov	r0, r2
 80185b8:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80185ba:	4b08      	ldr	r3, [pc, #32]	; (80185dc <WIZCHIP_READ+0x94>)
 80185bc:	69db      	ldr	r3, [r3, #28]
 80185be:	4798      	blx	r3
 80185c0:	4603      	mov	r3, r0
 80185c2:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80185c4:	4b05      	ldr	r3, [pc, #20]	; (80185dc <WIZCHIP_READ+0x94>)
 80185c6:	699b      	ldr	r3, [r3, #24]
 80185c8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80185ca:	4b04      	ldr	r3, [pc, #16]	; (80185dc <WIZCHIP_READ+0x94>)
 80185cc:	691b      	ldr	r3, [r3, #16]
 80185ce:	4798      	blx	r3
   return ret;
 80185d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80185d2:	4618      	mov	r0, r3
 80185d4:	3710      	adds	r7, #16
 80185d6:	46bd      	mov	sp, r7
 80185d8:	bd80      	pop	{r7, pc}
 80185da:	bf00      	nop
 80185dc:	200000c4 	.word	0x200000c4

080185e0 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80185e0:	b580      	push	{r7, lr}
 80185e2:	b084      	sub	sp, #16
 80185e4:	af00      	add	r7, sp, #0
 80185e6:	6078      	str	r0, [r7, #4]
 80185e8:	460b      	mov	r3, r1
 80185ea:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80185ec:	4b22      	ldr	r3, [pc, #136]	; (8018678 <WIZCHIP_WRITE+0x98>)
 80185ee:	68db      	ldr	r3, [r3, #12]
 80185f0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80185f2:	4b21      	ldr	r3, [pc, #132]	; (8018678 <WIZCHIP_WRITE+0x98>)
 80185f4:	695b      	ldr	r3, [r3, #20]
 80185f6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	f043 0304 	orr.w	r3, r3, #4
 80185fe:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8018600:	4b1d      	ldr	r3, [pc, #116]	; (8018678 <WIZCHIP_WRITE+0x98>)
 8018602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018604:	2b00      	cmp	r3, #0
 8018606:	d119      	bne.n	801863c <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8018608:	4b1b      	ldr	r3, [pc, #108]	; (8018678 <WIZCHIP_WRITE+0x98>)
 801860a:	6a1b      	ldr	r3, [r3, #32]
 801860c:	687a      	ldr	r2, [r7, #4]
 801860e:	0c12      	lsrs	r2, r2, #16
 8018610:	b2d2      	uxtb	r2, r2
 8018612:	4610      	mov	r0, r2
 8018614:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8018616:	4b18      	ldr	r3, [pc, #96]	; (8018678 <WIZCHIP_WRITE+0x98>)
 8018618:	6a1b      	ldr	r3, [r3, #32]
 801861a:	687a      	ldr	r2, [r7, #4]
 801861c:	0a12      	lsrs	r2, r2, #8
 801861e:	b2d2      	uxtb	r2, r2
 8018620:	4610      	mov	r0, r2
 8018622:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8018624:	4b14      	ldr	r3, [pc, #80]	; (8018678 <WIZCHIP_WRITE+0x98>)
 8018626:	6a1b      	ldr	r3, [r3, #32]
 8018628:	687a      	ldr	r2, [r7, #4]
 801862a:	b2d2      	uxtb	r2, r2
 801862c:	4610      	mov	r0, r2
 801862e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8018630:	4b11      	ldr	r3, [pc, #68]	; (8018678 <WIZCHIP_WRITE+0x98>)
 8018632:	6a1b      	ldr	r3, [r3, #32]
 8018634:	78fa      	ldrb	r2, [r7, #3]
 8018636:	4610      	mov	r0, r2
 8018638:	4798      	blx	r3
 801863a:	e013      	b.n	8018664 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	0c1b      	lsrs	r3, r3, #16
 8018640:	b2db      	uxtb	r3, r3
 8018642:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	0a1b      	lsrs	r3, r3, #8
 8018648:	b2db      	uxtb	r3, r3
 801864a:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	b2db      	uxtb	r3, r3
 8018650:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8018652:	78fb      	ldrb	r3, [r7, #3]
 8018654:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8018656:	4b08      	ldr	r3, [pc, #32]	; (8018678 <WIZCHIP_WRITE+0x98>)
 8018658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801865a:	f107 020c 	add.w	r2, r7, #12
 801865e:	2104      	movs	r1, #4
 8018660:	4610      	mov	r0, r2
 8018662:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8018664:	4b04      	ldr	r3, [pc, #16]	; (8018678 <WIZCHIP_WRITE+0x98>)
 8018666:	699b      	ldr	r3, [r3, #24]
 8018668:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 801866a:	4b03      	ldr	r3, [pc, #12]	; (8018678 <WIZCHIP_WRITE+0x98>)
 801866c:	691b      	ldr	r3, [r3, #16]
 801866e:	4798      	blx	r3
}
 8018670:	bf00      	nop
 8018672:	3710      	adds	r7, #16
 8018674:	46bd      	mov	sp, r7
 8018676:	bd80      	pop	{r7, pc}
 8018678:	200000c4 	.word	0x200000c4

0801867c <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 801867c:	b590      	push	{r4, r7, lr}
 801867e:	b087      	sub	sp, #28
 8018680:	af00      	add	r7, sp, #0
 8018682:	60f8      	str	r0, [r7, #12]
 8018684:	60b9      	str	r1, [r7, #8]
 8018686:	4613      	mov	r3, r2
 8018688:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 801868a:	4b2b      	ldr	r3, [pc, #172]	; (8018738 <WIZCHIP_READ_BUF+0xbc>)
 801868c:	68db      	ldr	r3, [r3, #12]
 801868e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8018690:	4b29      	ldr	r3, [pc, #164]	; (8018738 <WIZCHIP_READ_BUF+0xbc>)
 8018692:	695b      	ldr	r3, [r3, #20]
 8018694:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8018696:	4b28      	ldr	r3, [pc, #160]	; (8018738 <WIZCHIP_READ_BUF+0xbc>)
 8018698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801869a:	2b00      	cmp	r3, #0
 801869c:	d003      	beq.n	80186a6 <WIZCHIP_READ_BUF+0x2a>
 801869e:	4b26      	ldr	r3, [pc, #152]	; (8018738 <WIZCHIP_READ_BUF+0xbc>)
 80186a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	d126      	bne.n	80186f4 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80186a6:	4b24      	ldr	r3, [pc, #144]	; (8018738 <WIZCHIP_READ_BUF+0xbc>)
 80186a8:	6a1b      	ldr	r3, [r3, #32]
 80186aa:	68fa      	ldr	r2, [r7, #12]
 80186ac:	0c12      	lsrs	r2, r2, #16
 80186ae:	b2d2      	uxtb	r2, r2
 80186b0:	4610      	mov	r0, r2
 80186b2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80186b4:	4b20      	ldr	r3, [pc, #128]	; (8018738 <WIZCHIP_READ_BUF+0xbc>)
 80186b6:	6a1b      	ldr	r3, [r3, #32]
 80186b8:	68fa      	ldr	r2, [r7, #12]
 80186ba:	0a12      	lsrs	r2, r2, #8
 80186bc:	b2d2      	uxtb	r2, r2
 80186be:	4610      	mov	r0, r2
 80186c0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80186c2:	4b1d      	ldr	r3, [pc, #116]	; (8018738 <WIZCHIP_READ_BUF+0xbc>)
 80186c4:	6a1b      	ldr	r3, [r3, #32]
 80186c6:	68fa      	ldr	r2, [r7, #12]
 80186c8:	b2d2      	uxtb	r2, r2
 80186ca:	4610      	mov	r0, r2
 80186cc:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80186ce:	2300      	movs	r3, #0
 80186d0:	82fb      	strh	r3, [r7, #22]
 80186d2:	e00a      	b.n	80186ea <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80186d4:	4b18      	ldr	r3, [pc, #96]	; (8018738 <WIZCHIP_READ_BUF+0xbc>)
 80186d6:	69db      	ldr	r3, [r3, #28]
 80186d8:	8afa      	ldrh	r2, [r7, #22]
 80186da:	68b9      	ldr	r1, [r7, #8]
 80186dc:	188c      	adds	r4, r1, r2
 80186de:	4798      	blx	r3
 80186e0:	4603      	mov	r3, r0
 80186e2:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80186e4:	8afb      	ldrh	r3, [r7, #22]
 80186e6:	3301      	adds	r3, #1
 80186e8:	82fb      	strh	r3, [r7, #22]
 80186ea:	8afa      	ldrh	r2, [r7, #22]
 80186ec:	88fb      	ldrh	r3, [r7, #6]
 80186ee:	429a      	cmp	r2, r3
 80186f0:	d3f0      	bcc.n	80186d4 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80186f2:	e017      	b.n	8018724 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80186f4:	68fb      	ldr	r3, [r7, #12]
 80186f6:	0c1b      	lsrs	r3, r3, #16
 80186f8:	b2db      	uxtb	r3, r3
 80186fa:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80186fc:	68fb      	ldr	r3, [r7, #12]
 80186fe:	0a1b      	lsrs	r3, r3, #8
 8018700:	b2db      	uxtb	r3, r3
 8018702:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8018704:	68fb      	ldr	r3, [r7, #12]
 8018706:	b2db      	uxtb	r3, r3
 8018708:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 801870a:	4b0b      	ldr	r3, [pc, #44]	; (8018738 <WIZCHIP_READ_BUF+0xbc>)
 801870c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801870e:	f107 0210 	add.w	r2, r7, #16
 8018712:	2103      	movs	r1, #3
 8018714:	4610      	mov	r0, r2
 8018716:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8018718:	4b07      	ldr	r3, [pc, #28]	; (8018738 <WIZCHIP_READ_BUF+0xbc>)
 801871a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801871c:	88fa      	ldrh	r2, [r7, #6]
 801871e:	4611      	mov	r1, r2
 8018720:	68b8      	ldr	r0, [r7, #8]
 8018722:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8018724:	4b04      	ldr	r3, [pc, #16]	; (8018738 <WIZCHIP_READ_BUF+0xbc>)
 8018726:	699b      	ldr	r3, [r3, #24]
 8018728:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 801872a:	4b03      	ldr	r3, [pc, #12]	; (8018738 <WIZCHIP_READ_BUF+0xbc>)
 801872c:	691b      	ldr	r3, [r3, #16]
 801872e:	4798      	blx	r3
}
 8018730:	bf00      	nop
 8018732:	371c      	adds	r7, #28
 8018734:	46bd      	mov	sp, r7
 8018736:	bd90      	pop	{r4, r7, pc}
 8018738:	200000c4 	.word	0x200000c4

0801873c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 801873c:	b580      	push	{r7, lr}
 801873e:	b086      	sub	sp, #24
 8018740:	af00      	add	r7, sp, #0
 8018742:	60f8      	str	r0, [r7, #12]
 8018744:	60b9      	str	r1, [r7, #8]
 8018746:	4613      	mov	r3, r2
 8018748:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 801874a:	4b2b      	ldr	r3, [pc, #172]	; (80187f8 <WIZCHIP_WRITE_BUF+0xbc>)
 801874c:	68db      	ldr	r3, [r3, #12]
 801874e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8018750:	4b29      	ldr	r3, [pc, #164]	; (80187f8 <WIZCHIP_WRITE_BUF+0xbc>)
 8018752:	695b      	ldr	r3, [r3, #20]
 8018754:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8018756:	68fb      	ldr	r3, [r7, #12]
 8018758:	f043 0304 	orr.w	r3, r3, #4
 801875c:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 801875e:	4b26      	ldr	r3, [pc, #152]	; (80187f8 <WIZCHIP_WRITE_BUF+0xbc>)
 8018760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018762:	2b00      	cmp	r3, #0
 8018764:	d126      	bne.n	80187b4 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8018766:	4b24      	ldr	r3, [pc, #144]	; (80187f8 <WIZCHIP_WRITE_BUF+0xbc>)
 8018768:	6a1b      	ldr	r3, [r3, #32]
 801876a:	68fa      	ldr	r2, [r7, #12]
 801876c:	0c12      	lsrs	r2, r2, #16
 801876e:	b2d2      	uxtb	r2, r2
 8018770:	4610      	mov	r0, r2
 8018772:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8018774:	4b20      	ldr	r3, [pc, #128]	; (80187f8 <WIZCHIP_WRITE_BUF+0xbc>)
 8018776:	6a1b      	ldr	r3, [r3, #32]
 8018778:	68fa      	ldr	r2, [r7, #12]
 801877a:	0a12      	lsrs	r2, r2, #8
 801877c:	b2d2      	uxtb	r2, r2
 801877e:	4610      	mov	r0, r2
 8018780:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8018782:	4b1d      	ldr	r3, [pc, #116]	; (80187f8 <WIZCHIP_WRITE_BUF+0xbc>)
 8018784:	6a1b      	ldr	r3, [r3, #32]
 8018786:	68fa      	ldr	r2, [r7, #12]
 8018788:	b2d2      	uxtb	r2, r2
 801878a:	4610      	mov	r0, r2
 801878c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 801878e:	2300      	movs	r3, #0
 8018790:	82fb      	strh	r3, [r7, #22]
 8018792:	e00a      	b.n	80187aa <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8018794:	4b18      	ldr	r3, [pc, #96]	; (80187f8 <WIZCHIP_WRITE_BUF+0xbc>)
 8018796:	6a1b      	ldr	r3, [r3, #32]
 8018798:	8afa      	ldrh	r2, [r7, #22]
 801879a:	68b9      	ldr	r1, [r7, #8]
 801879c:	440a      	add	r2, r1
 801879e:	7812      	ldrb	r2, [r2, #0]
 80187a0:	4610      	mov	r0, r2
 80187a2:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80187a4:	8afb      	ldrh	r3, [r7, #22]
 80187a6:	3301      	adds	r3, #1
 80187a8:	82fb      	strh	r3, [r7, #22]
 80187aa:	8afa      	ldrh	r2, [r7, #22]
 80187ac:	88fb      	ldrh	r3, [r7, #6]
 80187ae:	429a      	cmp	r2, r3
 80187b0:	d3f0      	bcc.n	8018794 <WIZCHIP_WRITE_BUF+0x58>
 80187b2:	e017      	b.n	80187e4 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80187b4:	68fb      	ldr	r3, [r7, #12]
 80187b6:	0c1b      	lsrs	r3, r3, #16
 80187b8:	b2db      	uxtb	r3, r3
 80187ba:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80187bc:	68fb      	ldr	r3, [r7, #12]
 80187be:	0a1b      	lsrs	r3, r3, #8
 80187c0:	b2db      	uxtb	r3, r3
 80187c2:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80187c4:	68fb      	ldr	r3, [r7, #12]
 80187c6:	b2db      	uxtb	r3, r3
 80187c8:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80187ca:	4b0b      	ldr	r3, [pc, #44]	; (80187f8 <WIZCHIP_WRITE_BUF+0xbc>)
 80187cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80187ce:	f107 0210 	add.w	r2, r7, #16
 80187d2:	2103      	movs	r1, #3
 80187d4:	4610      	mov	r0, r2
 80187d6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80187d8:	4b07      	ldr	r3, [pc, #28]	; (80187f8 <WIZCHIP_WRITE_BUF+0xbc>)
 80187da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80187dc:	88fa      	ldrh	r2, [r7, #6]
 80187de:	4611      	mov	r1, r2
 80187e0:	68b8      	ldr	r0, [r7, #8]
 80187e2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80187e4:	4b04      	ldr	r3, [pc, #16]	; (80187f8 <WIZCHIP_WRITE_BUF+0xbc>)
 80187e6:	699b      	ldr	r3, [r3, #24]
 80187e8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80187ea:	4b03      	ldr	r3, [pc, #12]	; (80187f8 <WIZCHIP_WRITE_BUF+0xbc>)
 80187ec:	691b      	ldr	r3, [r3, #16]
 80187ee:	4798      	blx	r3
}
 80187f0:	bf00      	nop
 80187f2:	3718      	adds	r7, #24
 80187f4:	46bd      	mov	sp, r7
 80187f6:	bd80      	pop	{r7, pc}
 80187f8:	200000c4 	.word	0x200000c4

080187fc <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80187fc:	b590      	push	{r4, r7, lr}
 80187fe:	b085      	sub	sp, #20
 8018800:	af00      	add	r7, sp, #0
 8018802:	4603      	mov	r3, r0
 8018804:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8018806:	2300      	movs	r3, #0
 8018808:	81fb      	strh	r3, [r7, #14]
 801880a:	2300      	movs	r3, #0
 801880c:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 801880e:	79fb      	ldrb	r3, [r7, #7]
 8018810:	009b      	lsls	r3, r3, #2
 8018812:	3301      	adds	r3, #1
 8018814:	00db      	lsls	r3, r3, #3
 8018816:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801881a:	4618      	mov	r0, r3
 801881c:	f7ff fe94 	bl	8018548 <WIZCHIP_READ>
 8018820:	4603      	mov	r3, r0
 8018822:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8018824:	89bb      	ldrh	r3, [r7, #12]
 8018826:	021b      	lsls	r3, r3, #8
 8018828:	b29c      	uxth	r4, r3
 801882a:	79fb      	ldrb	r3, [r7, #7]
 801882c:	009b      	lsls	r3, r3, #2
 801882e:	3301      	adds	r3, #1
 8018830:	00db      	lsls	r3, r3, #3
 8018832:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8018836:	4618      	mov	r0, r3
 8018838:	f7ff fe86 	bl	8018548 <WIZCHIP_READ>
 801883c:	4603      	mov	r3, r0
 801883e:	b29b      	uxth	r3, r3
 8018840:	4423      	add	r3, r4
 8018842:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8018844:	89bb      	ldrh	r3, [r7, #12]
 8018846:	2b00      	cmp	r3, #0
 8018848:	d01a      	beq.n	8018880 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 801884a:	79fb      	ldrb	r3, [r7, #7]
 801884c:	009b      	lsls	r3, r3, #2
 801884e:	3301      	adds	r3, #1
 8018850:	00db      	lsls	r3, r3, #3
 8018852:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018856:	4618      	mov	r0, r3
 8018858:	f7ff fe76 	bl	8018548 <WIZCHIP_READ>
 801885c:	4603      	mov	r3, r0
 801885e:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8018860:	89fb      	ldrh	r3, [r7, #14]
 8018862:	021b      	lsls	r3, r3, #8
 8018864:	b29c      	uxth	r4, r3
 8018866:	79fb      	ldrb	r3, [r7, #7]
 8018868:	009b      	lsls	r3, r3, #2
 801886a:	3301      	adds	r3, #1
 801886c:	00db      	lsls	r3, r3, #3
 801886e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8018872:	4618      	mov	r0, r3
 8018874:	f7ff fe68 	bl	8018548 <WIZCHIP_READ>
 8018878:	4603      	mov	r3, r0
 801887a:	b29b      	uxth	r3, r3
 801887c:	4423      	add	r3, r4
 801887e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8018880:	89fa      	ldrh	r2, [r7, #14]
 8018882:	89bb      	ldrh	r3, [r7, #12]
 8018884:	429a      	cmp	r2, r3
 8018886:	d1c2      	bne.n	801880e <getSn_TX_FSR+0x12>
   return val;
 8018888:	89fb      	ldrh	r3, [r7, #14]
}
 801888a:	4618      	mov	r0, r3
 801888c:	3714      	adds	r7, #20
 801888e:	46bd      	mov	sp, r7
 8018890:	bd90      	pop	{r4, r7, pc}

08018892 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8018892:	b590      	push	{r4, r7, lr}
 8018894:	b085      	sub	sp, #20
 8018896:	af00      	add	r7, sp, #0
 8018898:	4603      	mov	r3, r0
 801889a:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 801889c:	2300      	movs	r3, #0
 801889e:	81fb      	strh	r3, [r7, #14]
 80188a0:	2300      	movs	r3, #0
 80188a2:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80188a4:	79fb      	ldrb	r3, [r7, #7]
 80188a6:	009b      	lsls	r3, r3, #2
 80188a8:	3301      	adds	r3, #1
 80188aa:	00db      	lsls	r3, r3, #3
 80188ac:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80188b0:	4618      	mov	r0, r3
 80188b2:	f7ff fe49 	bl	8018548 <WIZCHIP_READ>
 80188b6:	4603      	mov	r3, r0
 80188b8:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80188ba:	89bb      	ldrh	r3, [r7, #12]
 80188bc:	021b      	lsls	r3, r3, #8
 80188be:	b29c      	uxth	r4, r3
 80188c0:	79fb      	ldrb	r3, [r7, #7]
 80188c2:	009b      	lsls	r3, r3, #2
 80188c4:	3301      	adds	r3, #1
 80188c6:	00db      	lsls	r3, r3, #3
 80188c8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80188cc:	4618      	mov	r0, r3
 80188ce:	f7ff fe3b 	bl	8018548 <WIZCHIP_READ>
 80188d2:	4603      	mov	r3, r0
 80188d4:	b29b      	uxth	r3, r3
 80188d6:	4423      	add	r3, r4
 80188d8:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80188da:	89bb      	ldrh	r3, [r7, #12]
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d01a      	beq.n	8018916 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80188e0:	79fb      	ldrb	r3, [r7, #7]
 80188e2:	009b      	lsls	r3, r3, #2
 80188e4:	3301      	adds	r3, #1
 80188e6:	00db      	lsls	r3, r3, #3
 80188e8:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80188ec:	4618      	mov	r0, r3
 80188ee:	f7ff fe2b 	bl	8018548 <WIZCHIP_READ>
 80188f2:	4603      	mov	r3, r0
 80188f4:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80188f6:	89fb      	ldrh	r3, [r7, #14]
 80188f8:	021b      	lsls	r3, r3, #8
 80188fa:	b29c      	uxth	r4, r3
 80188fc:	79fb      	ldrb	r3, [r7, #7]
 80188fe:	009b      	lsls	r3, r3, #2
 8018900:	3301      	adds	r3, #1
 8018902:	00db      	lsls	r3, r3, #3
 8018904:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8018908:	4618      	mov	r0, r3
 801890a:	f7ff fe1d 	bl	8018548 <WIZCHIP_READ>
 801890e:	4603      	mov	r3, r0
 8018910:	b29b      	uxth	r3, r3
 8018912:	4423      	add	r3, r4
 8018914:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8018916:	89fa      	ldrh	r2, [r7, #14]
 8018918:	89bb      	ldrh	r3, [r7, #12]
 801891a:	429a      	cmp	r2, r3
 801891c:	d1c2      	bne.n	80188a4 <getSn_RX_RSR+0x12>
   return val;
 801891e:	89fb      	ldrh	r3, [r7, #14]
}
 8018920:	4618      	mov	r0, r3
 8018922:	3714      	adds	r7, #20
 8018924:	46bd      	mov	sp, r7
 8018926:	bd90      	pop	{r4, r7, pc}

08018928 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8018928:	b590      	push	{r4, r7, lr}
 801892a:	b085      	sub	sp, #20
 801892c:	af00      	add	r7, sp, #0
 801892e:	4603      	mov	r3, r0
 8018930:	6039      	str	r1, [r7, #0]
 8018932:	71fb      	strb	r3, [r7, #7]
 8018934:	4613      	mov	r3, r2
 8018936:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8018938:	2300      	movs	r3, #0
 801893a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 801893c:	2300      	movs	r3, #0
 801893e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8018940:	88bb      	ldrh	r3, [r7, #4]
 8018942:	2b00      	cmp	r3, #0
 8018944:	d048      	beq.n	80189d8 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8018946:	79fb      	ldrb	r3, [r7, #7]
 8018948:	009b      	lsls	r3, r3, #2
 801894a:	3301      	adds	r3, #1
 801894c:	00db      	lsls	r3, r3, #3
 801894e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8018952:	4618      	mov	r0, r3
 8018954:	f7ff fdf8 	bl	8018548 <WIZCHIP_READ>
 8018958:	4603      	mov	r3, r0
 801895a:	b29b      	uxth	r3, r3
 801895c:	021b      	lsls	r3, r3, #8
 801895e:	b29c      	uxth	r4, r3
 8018960:	79fb      	ldrb	r3, [r7, #7]
 8018962:	009b      	lsls	r3, r3, #2
 8018964:	3301      	adds	r3, #1
 8018966:	00db      	lsls	r3, r3, #3
 8018968:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 801896c:	4618      	mov	r0, r3
 801896e:	f7ff fdeb 	bl	8018548 <WIZCHIP_READ>
 8018972:	4603      	mov	r3, r0
 8018974:	b29b      	uxth	r3, r3
 8018976:	4423      	add	r3, r4
 8018978:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 801897a:	89fb      	ldrh	r3, [r7, #14]
 801897c:	021b      	lsls	r3, r3, #8
 801897e:	79fa      	ldrb	r2, [r7, #7]
 8018980:	0092      	lsls	r2, r2, #2
 8018982:	3202      	adds	r2, #2
 8018984:	00d2      	lsls	r2, r2, #3
 8018986:	4413      	add	r3, r2
 8018988:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 801898a:	88bb      	ldrh	r3, [r7, #4]
 801898c:	461a      	mov	r2, r3
 801898e:	6839      	ldr	r1, [r7, #0]
 8018990:	68b8      	ldr	r0, [r7, #8]
 8018992:	f7ff fed3 	bl	801873c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8018996:	89fa      	ldrh	r2, [r7, #14]
 8018998:	88bb      	ldrh	r3, [r7, #4]
 801899a:	4413      	add	r3, r2
 801899c:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 801899e:	79fb      	ldrb	r3, [r7, #7]
 80189a0:	009b      	lsls	r3, r3, #2
 80189a2:	3301      	adds	r3, #1
 80189a4:	00db      	lsls	r3, r3, #3
 80189a6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80189aa:	461a      	mov	r2, r3
 80189ac:	89fb      	ldrh	r3, [r7, #14]
 80189ae:	0a1b      	lsrs	r3, r3, #8
 80189b0:	b29b      	uxth	r3, r3
 80189b2:	b2db      	uxtb	r3, r3
 80189b4:	4619      	mov	r1, r3
 80189b6:	4610      	mov	r0, r2
 80189b8:	f7ff fe12 	bl	80185e0 <WIZCHIP_WRITE>
 80189bc:	79fb      	ldrb	r3, [r7, #7]
 80189be:	009b      	lsls	r3, r3, #2
 80189c0:	3301      	adds	r3, #1
 80189c2:	00db      	lsls	r3, r3, #3
 80189c4:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80189c8:	461a      	mov	r2, r3
 80189ca:	89fb      	ldrh	r3, [r7, #14]
 80189cc:	b2db      	uxtb	r3, r3
 80189ce:	4619      	mov	r1, r3
 80189d0:	4610      	mov	r0, r2
 80189d2:	f7ff fe05 	bl	80185e0 <WIZCHIP_WRITE>
 80189d6:	e000      	b.n	80189da <wiz_send_data+0xb2>
   if(len == 0)  return;
 80189d8:	bf00      	nop
}
 80189da:	3714      	adds	r7, #20
 80189dc:	46bd      	mov	sp, r7
 80189de:	bd90      	pop	{r4, r7, pc}

080189e0 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80189e0:	b590      	push	{r4, r7, lr}
 80189e2:	b085      	sub	sp, #20
 80189e4:	af00      	add	r7, sp, #0
 80189e6:	4603      	mov	r3, r0
 80189e8:	6039      	str	r1, [r7, #0]
 80189ea:	71fb      	strb	r3, [r7, #7]
 80189ec:	4613      	mov	r3, r2
 80189ee:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80189f0:	2300      	movs	r3, #0
 80189f2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80189f4:	2300      	movs	r3, #0
 80189f6:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80189f8:	88bb      	ldrh	r3, [r7, #4]
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d048      	beq.n	8018a90 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 80189fe:	79fb      	ldrb	r3, [r7, #7]
 8018a00:	009b      	lsls	r3, r3, #2
 8018a02:	3301      	adds	r3, #1
 8018a04:	00db      	lsls	r3, r3, #3
 8018a06:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8018a0a:	4618      	mov	r0, r3
 8018a0c:	f7ff fd9c 	bl	8018548 <WIZCHIP_READ>
 8018a10:	4603      	mov	r3, r0
 8018a12:	b29b      	uxth	r3, r3
 8018a14:	021b      	lsls	r3, r3, #8
 8018a16:	b29c      	uxth	r4, r3
 8018a18:	79fb      	ldrb	r3, [r7, #7]
 8018a1a:	009b      	lsls	r3, r3, #2
 8018a1c:	3301      	adds	r3, #1
 8018a1e:	00db      	lsls	r3, r3, #3
 8018a20:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8018a24:	4618      	mov	r0, r3
 8018a26:	f7ff fd8f 	bl	8018548 <WIZCHIP_READ>
 8018a2a:	4603      	mov	r3, r0
 8018a2c:	b29b      	uxth	r3, r3
 8018a2e:	4423      	add	r3, r4
 8018a30:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8018a32:	89fb      	ldrh	r3, [r7, #14]
 8018a34:	021b      	lsls	r3, r3, #8
 8018a36:	79fa      	ldrb	r2, [r7, #7]
 8018a38:	0092      	lsls	r2, r2, #2
 8018a3a:	3203      	adds	r2, #3
 8018a3c:	00d2      	lsls	r2, r2, #3
 8018a3e:	4413      	add	r3, r2
 8018a40:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8018a42:	88bb      	ldrh	r3, [r7, #4]
 8018a44:	461a      	mov	r2, r3
 8018a46:	6839      	ldr	r1, [r7, #0]
 8018a48:	68b8      	ldr	r0, [r7, #8]
 8018a4a:	f7ff fe17 	bl	801867c <WIZCHIP_READ_BUF>
   ptr += len;
 8018a4e:	89fa      	ldrh	r2, [r7, #14]
 8018a50:	88bb      	ldrh	r3, [r7, #4]
 8018a52:	4413      	add	r3, r2
 8018a54:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8018a56:	79fb      	ldrb	r3, [r7, #7]
 8018a58:	009b      	lsls	r3, r3, #2
 8018a5a:	3301      	adds	r3, #1
 8018a5c:	00db      	lsls	r3, r3, #3
 8018a5e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8018a62:	461a      	mov	r2, r3
 8018a64:	89fb      	ldrh	r3, [r7, #14]
 8018a66:	0a1b      	lsrs	r3, r3, #8
 8018a68:	b29b      	uxth	r3, r3
 8018a6a:	b2db      	uxtb	r3, r3
 8018a6c:	4619      	mov	r1, r3
 8018a6e:	4610      	mov	r0, r2
 8018a70:	f7ff fdb6 	bl	80185e0 <WIZCHIP_WRITE>
 8018a74:	79fb      	ldrb	r3, [r7, #7]
 8018a76:	009b      	lsls	r3, r3, #2
 8018a78:	3301      	adds	r3, #1
 8018a7a:	00db      	lsls	r3, r3, #3
 8018a7c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8018a80:	461a      	mov	r2, r3
 8018a82:	89fb      	ldrh	r3, [r7, #14]
 8018a84:	b2db      	uxtb	r3, r3
 8018a86:	4619      	mov	r1, r3
 8018a88:	4610      	mov	r0, r2
 8018a8a:	f7ff fda9 	bl	80185e0 <WIZCHIP_WRITE>
 8018a8e:	e000      	b.n	8018a92 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8018a90:	bf00      	nop
}
 8018a92:	3714      	adds	r7, #20
 8018a94:	46bd      	mov	sp, r7
 8018a96:	bd90      	pop	{r4, r7, pc}

08018a98 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8018a98:	b590      	push	{r4, r7, lr}
 8018a9a:	b085      	sub	sp, #20
 8018a9c:	af00      	add	r7, sp, #0
 8018a9e:	4603      	mov	r3, r0
 8018aa0:	460a      	mov	r2, r1
 8018aa2:	71fb      	strb	r3, [r7, #7]
 8018aa4:	4613      	mov	r3, r2
 8018aa6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8018aa8:	2300      	movs	r3, #0
 8018aaa:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8018aac:	79fb      	ldrb	r3, [r7, #7]
 8018aae:	009b      	lsls	r3, r3, #2
 8018ab0:	3301      	adds	r3, #1
 8018ab2:	00db      	lsls	r3, r3, #3
 8018ab4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8018ab8:	4618      	mov	r0, r3
 8018aba:	f7ff fd45 	bl	8018548 <WIZCHIP_READ>
 8018abe:	4603      	mov	r3, r0
 8018ac0:	b29b      	uxth	r3, r3
 8018ac2:	021b      	lsls	r3, r3, #8
 8018ac4:	b29c      	uxth	r4, r3
 8018ac6:	79fb      	ldrb	r3, [r7, #7]
 8018ac8:	009b      	lsls	r3, r3, #2
 8018aca:	3301      	adds	r3, #1
 8018acc:	00db      	lsls	r3, r3, #3
 8018ace:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8018ad2:	4618      	mov	r0, r3
 8018ad4:	f7ff fd38 	bl	8018548 <WIZCHIP_READ>
 8018ad8:	4603      	mov	r3, r0
 8018ada:	b29b      	uxth	r3, r3
 8018adc:	4423      	add	r3, r4
 8018ade:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8018ae0:	89fa      	ldrh	r2, [r7, #14]
 8018ae2:	88bb      	ldrh	r3, [r7, #4]
 8018ae4:	4413      	add	r3, r2
 8018ae6:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8018ae8:	79fb      	ldrb	r3, [r7, #7]
 8018aea:	009b      	lsls	r3, r3, #2
 8018aec:	3301      	adds	r3, #1
 8018aee:	00db      	lsls	r3, r3, #3
 8018af0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8018af4:	461a      	mov	r2, r3
 8018af6:	89fb      	ldrh	r3, [r7, #14]
 8018af8:	0a1b      	lsrs	r3, r3, #8
 8018afa:	b29b      	uxth	r3, r3
 8018afc:	b2db      	uxtb	r3, r3
 8018afe:	4619      	mov	r1, r3
 8018b00:	4610      	mov	r0, r2
 8018b02:	f7ff fd6d 	bl	80185e0 <WIZCHIP_WRITE>
 8018b06:	79fb      	ldrb	r3, [r7, #7]
 8018b08:	009b      	lsls	r3, r3, #2
 8018b0a:	3301      	adds	r3, #1
 8018b0c:	00db      	lsls	r3, r3, #3
 8018b0e:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8018b12:	461a      	mov	r2, r3
 8018b14:	89fb      	ldrh	r3, [r7, #14]
 8018b16:	b2db      	uxtb	r3, r3
 8018b18:	4619      	mov	r1, r3
 8018b1a:	4610      	mov	r0, r2
 8018b1c:	f7ff fd60 	bl	80185e0 <WIZCHIP_WRITE>
}
 8018b20:	bf00      	nop
 8018b22:	3714      	adds	r7, #20
 8018b24:	46bd      	mov	sp, r7
 8018b26:	bd90      	pop	{r4, r7, pc}

08018b28 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8018b28:	b590      	push	{r4, r7, lr}
 8018b2a:	b085      	sub	sp, #20
 8018b2c:	af00      	add	r7, sp, #0
 8018b2e:	4604      	mov	r4, r0
 8018b30:	4608      	mov	r0, r1
 8018b32:	4611      	mov	r1, r2
 8018b34:	461a      	mov	r2, r3
 8018b36:	4623      	mov	r3, r4
 8018b38:	71fb      	strb	r3, [r7, #7]
 8018b3a:	4603      	mov	r3, r0
 8018b3c:	71bb      	strb	r3, [r7, #6]
 8018b3e:	460b      	mov	r3, r1
 8018b40:	80bb      	strh	r3, [r7, #4]
 8018b42:	4613      	mov	r3, r2
 8018b44:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8018b46:	79fb      	ldrb	r3, [r7, #7]
 8018b48:	2b08      	cmp	r3, #8
 8018b4a:	d902      	bls.n	8018b52 <socket+0x2a>
 8018b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8018b50:	e0f0      	b.n	8018d34 <socket+0x20c>
	switch(protocol)
 8018b52:	79bb      	ldrb	r3, [r7, #6]
 8018b54:	2b01      	cmp	r3, #1
 8018b56:	d005      	beq.n	8018b64 <socket+0x3c>
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	dd11      	ble.n	8018b80 <socket+0x58>
 8018b5c:	3b02      	subs	r3, #2
 8018b5e:	2b02      	cmp	r3, #2
 8018b60:	d80e      	bhi.n	8018b80 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8018b62:	e011      	b.n	8018b88 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8018b64:	f107 030c 	add.w	r3, r7, #12
 8018b68:	2204      	movs	r2, #4
 8018b6a:	4619      	mov	r1, r3
 8018b6c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8018b70:	f7ff fd84 	bl	801867c <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8018b74:	68fb      	ldr	r3, [r7, #12]
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d105      	bne.n	8018b86 <socket+0x5e>
 8018b7a:	f06f 0302 	mvn.w	r3, #2
 8018b7e:	e0d9      	b.n	8018d34 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8018b80:	f06f 0304 	mvn.w	r3, #4
 8018b84:	e0d6      	b.n	8018d34 <socket+0x20c>
	    break;
 8018b86:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8018b88:	78fb      	ldrb	r3, [r7, #3]
 8018b8a:	f003 0304 	and.w	r3, r3, #4
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d002      	beq.n	8018b98 <socket+0x70>
 8018b92:	f06f 0305 	mvn.w	r3, #5
 8018b96:	e0cd      	b.n	8018d34 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8018b98:	78fb      	ldrb	r3, [r7, #3]
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	d028      	beq.n	8018bf0 <socket+0xc8>
	{
   	switch(protocol)
 8018b9e:	79bb      	ldrb	r3, [r7, #6]
 8018ba0:	2b01      	cmp	r3, #1
 8018ba2:	d002      	beq.n	8018baa <socket+0x82>
 8018ba4:	2b02      	cmp	r3, #2
 8018ba6:	d008      	beq.n	8018bba <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8018ba8:	e022      	b.n	8018bf0 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8018baa:	78fb      	ldrb	r3, [r7, #3]
 8018bac:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d11a      	bne.n	8018bea <socket+0xc2>
 8018bb4:	f06f 0305 	mvn.w	r3, #5
 8018bb8:	e0bc      	b.n	8018d34 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8018bba:	78fb      	ldrb	r3, [r7, #3]
 8018bbc:	f003 0320 	and.w	r3, r3, #32
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	d006      	beq.n	8018bd2 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8018bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	db02      	blt.n	8018bd2 <socket+0xaa>
 8018bcc:	f06f 0305 	mvn.w	r3, #5
 8018bd0:	e0b0      	b.n	8018d34 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8018bd2:	78fb      	ldrb	r3, [r7, #3]
 8018bd4:	f003 0310 	and.w	r3, r3, #16
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d008      	beq.n	8018bee <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8018bdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018be0:	2b00      	cmp	r3, #0
 8018be2:	db04      	blt.n	8018bee <socket+0xc6>
 8018be4:	f06f 0305 	mvn.w	r3, #5
 8018be8:	e0a4      	b.n	8018d34 <socket+0x20c>
   	      break;
 8018bea:	bf00      	nop
 8018bec:	e000      	b.n	8018bf0 <socket+0xc8>
   	      break;
 8018bee:	bf00      	nop
   	}
   }
	close(sn);
 8018bf0:	79fb      	ldrb	r3, [r7, #7]
 8018bf2:	4618      	mov	r0, r3
 8018bf4:	f000 f8ac 	bl	8018d50 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8018bf8:	79fb      	ldrb	r3, [r7, #7]
 8018bfa:	009b      	lsls	r3, r3, #2
 8018bfc:	3301      	adds	r3, #1
 8018bfe:	00db      	lsls	r3, r3, #3
 8018c00:	4618      	mov	r0, r3
 8018c02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018c06:	f023 030f 	bic.w	r3, r3, #15
 8018c0a:	b25a      	sxtb	r2, r3
 8018c0c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018c10:	4313      	orrs	r3, r2
 8018c12:	b25b      	sxtb	r3, r3
 8018c14:	b2db      	uxtb	r3, r3
 8018c16:	4619      	mov	r1, r3
 8018c18:	f7ff fce2 	bl	80185e0 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8018c1c:	88bb      	ldrh	r3, [r7, #4]
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d110      	bne.n	8018c44 <socket+0x11c>
	{
	   port = sock_any_port++;
 8018c22:	4b46      	ldr	r3, [pc, #280]	; (8018d3c <socket+0x214>)
 8018c24:	881b      	ldrh	r3, [r3, #0]
 8018c26:	1c5a      	adds	r2, r3, #1
 8018c28:	b291      	uxth	r1, r2
 8018c2a:	4a44      	ldr	r2, [pc, #272]	; (8018d3c <socket+0x214>)
 8018c2c:	8011      	strh	r1, [r2, #0]
 8018c2e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8018c30:	4b42      	ldr	r3, [pc, #264]	; (8018d3c <socket+0x214>)
 8018c32:	881b      	ldrh	r3, [r3, #0]
 8018c34:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8018c38:	4293      	cmp	r3, r2
 8018c3a:	d103      	bne.n	8018c44 <socket+0x11c>
 8018c3c:	4b3f      	ldr	r3, [pc, #252]	; (8018d3c <socket+0x214>)
 8018c3e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8018c42:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8018c44:	79fb      	ldrb	r3, [r7, #7]
 8018c46:	009b      	lsls	r3, r3, #2
 8018c48:	3301      	adds	r3, #1
 8018c4a:	00db      	lsls	r3, r3, #3
 8018c4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8018c50:	461a      	mov	r2, r3
 8018c52:	88bb      	ldrh	r3, [r7, #4]
 8018c54:	0a1b      	lsrs	r3, r3, #8
 8018c56:	b29b      	uxth	r3, r3
 8018c58:	b2db      	uxtb	r3, r3
 8018c5a:	4619      	mov	r1, r3
 8018c5c:	4610      	mov	r0, r2
 8018c5e:	f7ff fcbf 	bl	80185e0 <WIZCHIP_WRITE>
 8018c62:	79fb      	ldrb	r3, [r7, #7]
 8018c64:	009b      	lsls	r3, r3, #2
 8018c66:	3301      	adds	r3, #1
 8018c68:	00db      	lsls	r3, r3, #3
 8018c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8018c6e:	461a      	mov	r2, r3
 8018c70:	88bb      	ldrh	r3, [r7, #4]
 8018c72:	b2db      	uxtb	r3, r3
 8018c74:	4619      	mov	r1, r3
 8018c76:	4610      	mov	r0, r2
 8018c78:	f7ff fcb2 	bl	80185e0 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8018c7c:	79fb      	ldrb	r3, [r7, #7]
 8018c7e:	009b      	lsls	r3, r3, #2
 8018c80:	3301      	adds	r3, #1
 8018c82:	00db      	lsls	r3, r3, #3
 8018c84:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018c88:	2101      	movs	r1, #1
 8018c8a:	4618      	mov	r0, r3
 8018c8c:	f7ff fca8 	bl	80185e0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8018c90:	bf00      	nop
 8018c92:	79fb      	ldrb	r3, [r7, #7]
 8018c94:	009b      	lsls	r3, r3, #2
 8018c96:	3301      	adds	r3, #1
 8018c98:	00db      	lsls	r3, r3, #3
 8018c9a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018c9e:	4618      	mov	r0, r3
 8018ca0:	f7ff fc52 	bl	8018548 <WIZCHIP_READ>
 8018ca4:	4603      	mov	r3, r0
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	d1f3      	bne.n	8018c92 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8018caa:	79fb      	ldrb	r3, [r7, #7]
 8018cac:	2201      	movs	r2, #1
 8018cae:	fa02 f303 	lsl.w	r3, r2, r3
 8018cb2:	b21b      	sxth	r3, r3
 8018cb4:	43db      	mvns	r3, r3
 8018cb6:	b21a      	sxth	r2, r3
 8018cb8:	4b21      	ldr	r3, [pc, #132]	; (8018d40 <socket+0x218>)
 8018cba:	881b      	ldrh	r3, [r3, #0]
 8018cbc:	b21b      	sxth	r3, r3
 8018cbe:	4013      	ands	r3, r2
 8018cc0:	b21b      	sxth	r3, r3
 8018cc2:	b29a      	uxth	r2, r3
 8018cc4:	4b1e      	ldr	r3, [pc, #120]	; (8018d40 <socket+0x218>)
 8018cc6:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8018cc8:	78fb      	ldrb	r3, [r7, #3]
 8018cca:	f003 0201 	and.w	r2, r3, #1
 8018cce:	79fb      	ldrb	r3, [r7, #7]
 8018cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8018cd4:	b21a      	sxth	r2, r3
 8018cd6:	4b1a      	ldr	r3, [pc, #104]	; (8018d40 <socket+0x218>)
 8018cd8:	881b      	ldrh	r3, [r3, #0]
 8018cda:	b21b      	sxth	r3, r3
 8018cdc:	4313      	orrs	r3, r2
 8018cde:	b21b      	sxth	r3, r3
 8018ce0:	b29a      	uxth	r2, r3
 8018ce2:	4b17      	ldr	r3, [pc, #92]	; (8018d40 <socket+0x218>)
 8018ce4:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8018ce6:	79fb      	ldrb	r3, [r7, #7]
 8018ce8:	2201      	movs	r2, #1
 8018cea:	fa02 f303 	lsl.w	r3, r2, r3
 8018cee:	b21b      	sxth	r3, r3
 8018cf0:	43db      	mvns	r3, r3
 8018cf2:	b21a      	sxth	r2, r3
 8018cf4:	4b13      	ldr	r3, [pc, #76]	; (8018d44 <socket+0x21c>)
 8018cf6:	881b      	ldrh	r3, [r3, #0]
 8018cf8:	b21b      	sxth	r3, r3
 8018cfa:	4013      	ands	r3, r2
 8018cfc:	b21b      	sxth	r3, r3
 8018cfe:	b29a      	uxth	r2, r3
 8018d00:	4b10      	ldr	r3, [pc, #64]	; (8018d44 <socket+0x21c>)
 8018d02:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8018d04:	79fb      	ldrb	r3, [r7, #7]
 8018d06:	4a10      	ldr	r2, [pc, #64]	; (8018d48 <socket+0x220>)
 8018d08:	2100      	movs	r1, #0
 8018d0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8018d0e:	79fb      	ldrb	r3, [r7, #7]
 8018d10:	4a0e      	ldr	r2, [pc, #56]	; (8018d4c <socket+0x224>)
 8018d12:	2100      	movs	r1, #0
 8018d14:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8018d16:	bf00      	nop
 8018d18:	79fb      	ldrb	r3, [r7, #7]
 8018d1a:	009b      	lsls	r3, r3, #2
 8018d1c:	3301      	adds	r3, #1
 8018d1e:	00db      	lsls	r3, r3, #3
 8018d20:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8018d24:	4618      	mov	r0, r3
 8018d26:	f7ff fc0f 	bl	8018548 <WIZCHIP_READ>
 8018d2a:	4603      	mov	r3, r0
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d0f3      	beq.n	8018d18 <socket+0x1f0>
   return (int8_t)sn;
 8018d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8018d34:	4618      	mov	r0, r3
 8018d36:	3714      	adds	r7, #20
 8018d38:	46bd      	mov	sp, r7
 8018d3a:	bd90      	pop	{r4, r7, pc}
 8018d3c:	200000c2 	.word	0x200000c2
 8018d40:	20000960 	.word	0x20000960
 8018d44:	20000962 	.word	0x20000962
 8018d48:	20000964 	.word	0x20000964
 8018d4c:	20000974 	.word	0x20000974

08018d50 <close>:

int8_t close(uint8_t sn)
{
 8018d50:	b580      	push	{r7, lr}
 8018d52:	b082      	sub	sp, #8
 8018d54:	af00      	add	r7, sp, #0
 8018d56:	4603      	mov	r3, r0
 8018d58:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8018d5a:	79fb      	ldrb	r3, [r7, #7]
 8018d5c:	2b08      	cmp	r3, #8
 8018d5e:	d902      	bls.n	8018d66 <close+0x16>
 8018d60:	f04f 33ff 	mov.w	r3, #4294967295
 8018d64:	e055      	b.n	8018e12 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8018d66:	79fb      	ldrb	r3, [r7, #7]
 8018d68:	009b      	lsls	r3, r3, #2
 8018d6a:	3301      	adds	r3, #1
 8018d6c:	00db      	lsls	r3, r3, #3
 8018d6e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018d72:	2110      	movs	r1, #16
 8018d74:	4618      	mov	r0, r3
 8018d76:	f7ff fc33 	bl	80185e0 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8018d7a:	bf00      	nop
 8018d7c:	79fb      	ldrb	r3, [r7, #7]
 8018d7e:	009b      	lsls	r3, r3, #2
 8018d80:	3301      	adds	r3, #1
 8018d82:	00db      	lsls	r3, r3, #3
 8018d84:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018d88:	4618      	mov	r0, r3
 8018d8a:	f7ff fbdd 	bl	8018548 <WIZCHIP_READ>
 8018d8e:	4603      	mov	r3, r0
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	d1f3      	bne.n	8018d7c <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8018d94:	79fb      	ldrb	r3, [r7, #7]
 8018d96:	009b      	lsls	r3, r3, #2
 8018d98:	3301      	adds	r3, #1
 8018d9a:	00db      	lsls	r3, r3, #3
 8018d9c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8018da0:	211f      	movs	r1, #31
 8018da2:	4618      	mov	r0, r3
 8018da4:	f7ff fc1c 	bl	80185e0 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8018da8:	79fb      	ldrb	r3, [r7, #7]
 8018daa:	2201      	movs	r2, #1
 8018dac:	fa02 f303 	lsl.w	r3, r2, r3
 8018db0:	b21b      	sxth	r3, r3
 8018db2:	43db      	mvns	r3, r3
 8018db4:	b21a      	sxth	r2, r3
 8018db6:	4b19      	ldr	r3, [pc, #100]	; (8018e1c <close+0xcc>)
 8018db8:	881b      	ldrh	r3, [r3, #0]
 8018dba:	b21b      	sxth	r3, r3
 8018dbc:	4013      	ands	r3, r2
 8018dbe:	b21b      	sxth	r3, r3
 8018dc0:	b29a      	uxth	r2, r3
 8018dc2:	4b16      	ldr	r3, [pc, #88]	; (8018e1c <close+0xcc>)
 8018dc4:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8018dc6:	79fb      	ldrb	r3, [r7, #7]
 8018dc8:	2201      	movs	r2, #1
 8018dca:	fa02 f303 	lsl.w	r3, r2, r3
 8018dce:	b21b      	sxth	r3, r3
 8018dd0:	43db      	mvns	r3, r3
 8018dd2:	b21a      	sxth	r2, r3
 8018dd4:	4b12      	ldr	r3, [pc, #72]	; (8018e20 <close+0xd0>)
 8018dd6:	881b      	ldrh	r3, [r3, #0]
 8018dd8:	b21b      	sxth	r3, r3
 8018dda:	4013      	ands	r3, r2
 8018ddc:	b21b      	sxth	r3, r3
 8018dde:	b29a      	uxth	r2, r3
 8018de0:	4b0f      	ldr	r3, [pc, #60]	; (8018e20 <close+0xd0>)
 8018de2:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8018de4:	79fb      	ldrb	r3, [r7, #7]
 8018de6:	4a0f      	ldr	r2, [pc, #60]	; (8018e24 <close+0xd4>)
 8018de8:	2100      	movs	r1, #0
 8018dea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8018dee:	79fb      	ldrb	r3, [r7, #7]
 8018df0:	4a0d      	ldr	r2, [pc, #52]	; (8018e28 <close+0xd8>)
 8018df2:	2100      	movs	r1, #0
 8018df4:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8018df6:	bf00      	nop
 8018df8:	79fb      	ldrb	r3, [r7, #7]
 8018dfa:	009b      	lsls	r3, r3, #2
 8018dfc:	3301      	adds	r3, #1
 8018dfe:	00db      	lsls	r3, r3, #3
 8018e00:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8018e04:	4618      	mov	r0, r3
 8018e06:	f7ff fb9f 	bl	8018548 <WIZCHIP_READ>
 8018e0a:	4603      	mov	r3, r0
 8018e0c:	2b00      	cmp	r3, #0
 8018e0e:	d1f3      	bne.n	8018df8 <close+0xa8>
	return SOCK_OK;
 8018e10:	2301      	movs	r3, #1
}
 8018e12:	4618      	mov	r0, r3
 8018e14:	3708      	adds	r7, #8
 8018e16:	46bd      	mov	sp, r7
 8018e18:	bd80      	pop	{r7, pc}
 8018e1a:	bf00      	nop
 8018e1c:	20000960 	.word	0x20000960
 8018e20:	20000962 	.word	0x20000962
 8018e24:	20000964 	.word	0x20000964
 8018e28:	20000974 	.word	0x20000974

08018e2c <listen>:

int8_t listen(uint8_t sn)
{
 8018e2c:	b580      	push	{r7, lr}
 8018e2e:	b082      	sub	sp, #8
 8018e30:	af00      	add	r7, sp, #0
 8018e32:	4603      	mov	r3, r0
 8018e34:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8018e36:	79fb      	ldrb	r3, [r7, #7]
 8018e38:	2b08      	cmp	r3, #8
 8018e3a:	d902      	bls.n	8018e42 <listen+0x16>
 8018e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8018e40:	e049      	b.n	8018ed6 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8018e42:	79fb      	ldrb	r3, [r7, #7]
 8018e44:	009b      	lsls	r3, r3, #2
 8018e46:	3301      	adds	r3, #1
 8018e48:	00db      	lsls	r3, r3, #3
 8018e4a:	4618      	mov	r0, r3
 8018e4c:	f7ff fb7c 	bl	8018548 <WIZCHIP_READ>
 8018e50:	4603      	mov	r3, r0
 8018e52:	f003 030f 	and.w	r3, r3, #15
 8018e56:	2b01      	cmp	r3, #1
 8018e58:	d002      	beq.n	8018e60 <listen+0x34>
 8018e5a:	f06f 0304 	mvn.w	r3, #4
 8018e5e:	e03a      	b.n	8018ed6 <listen+0xaa>
	CHECK_SOCKINIT();
 8018e60:	79fb      	ldrb	r3, [r7, #7]
 8018e62:	009b      	lsls	r3, r3, #2
 8018e64:	3301      	adds	r3, #1
 8018e66:	00db      	lsls	r3, r3, #3
 8018e68:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8018e6c:	4618      	mov	r0, r3
 8018e6e:	f7ff fb6b 	bl	8018548 <WIZCHIP_READ>
 8018e72:	4603      	mov	r3, r0
 8018e74:	2b13      	cmp	r3, #19
 8018e76:	d002      	beq.n	8018e7e <listen+0x52>
 8018e78:	f06f 0302 	mvn.w	r3, #2
 8018e7c:	e02b      	b.n	8018ed6 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8018e7e:	79fb      	ldrb	r3, [r7, #7]
 8018e80:	009b      	lsls	r3, r3, #2
 8018e82:	3301      	adds	r3, #1
 8018e84:	00db      	lsls	r3, r3, #3
 8018e86:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018e8a:	2102      	movs	r1, #2
 8018e8c:	4618      	mov	r0, r3
 8018e8e:	f7ff fba7 	bl	80185e0 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8018e92:	bf00      	nop
 8018e94:	79fb      	ldrb	r3, [r7, #7]
 8018e96:	009b      	lsls	r3, r3, #2
 8018e98:	3301      	adds	r3, #1
 8018e9a:	00db      	lsls	r3, r3, #3
 8018e9c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018ea0:	4618      	mov	r0, r3
 8018ea2:	f7ff fb51 	bl	8018548 <WIZCHIP_READ>
 8018ea6:	4603      	mov	r3, r0
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d1f3      	bne.n	8018e94 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8018eac:	e006      	b.n	8018ebc <listen+0x90>
   {
         close(sn);
 8018eae:	79fb      	ldrb	r3, [r7, #7]
 8018eb0:	4618      	mov	r0, r3
 8018eb2:	f7ff ff4d 	bl	8018d50 <close>
         return SOCKERR_SOCKCLOSED;
 8018eb6:	f06f 0303 	mvn.w	r3, #3
 8018eba:	e00c      	b.n	8018ed6 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8018ebc:	79fb      	ldrb	r3, [r7, #7]
 8018ebe:	009b      	lsls	r3, r3, #2
 8018ec0:	3301      	adds	r3, #1
 8018ec2:	00db      	lsls	r3, r3, #3
 8018ec4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8018ec8:	4618      	mov	r0, r3
 8018eca:	f7ff fb3d 	bl	8018548 <WIZCHIP_READ>
 8018ece:	4603      	mov	r3, r0
 8018ed0:	2b14      	cmp	r3, #20
 8018ed2:	d1ec      	bne.n	8018eae <listen+0x82>
   }
   return SOCK_OK;
 8018ed4:	2301      	movs	r3, #1
}
 8018ed6:	4618      	mov	r0, r3
 8018ed8:	3708      	adds	r7, #8
 8018eda:	46bd      	mov	sp, r7
 8018edc:	bd80      	pop	{r7, pc}
	...

08018ee0 <connect>:


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8018ee0:	b580      	push	{r7, lr}
 8018ee2:	b084      	sub	sp, #16
 8018ee4:	af00      	add	r7, sp, #0
 8018ee6:	4603      	mov	r3, r0
 8018ee8:	6039      	str	r1, [r7, #0]
 8018eea:	71fb      	strb	r3, [r7, #7]
 8018eec:	4613      	mov	r3, r2
 8018eee:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8018ef0:	79fb      	ldrb	r3, [r7, #7]
 8018ef2:	2b08      	cmp	r3, #8
 8018ef4:	d902      	bls.n	8018efc <connect+0x1c>
 8018ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8018efa:	e0c6      	b.n	801908a <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8018efc:	79fb      	ldrb	r3, [r7, #7]
 8018efe:	009b      	lsls	r3, r3, #2
 8018f00:	3301      	adds	r3, #1
 8018f02:	00db      	lsls	r3, r3, #3
 8018f04:	4618      	mov	r0, r3
 8018f06:	f7ff fb1f 	bl	8018548 <WIZCHIP_READ>
 8018f0a:	4603      	mov	r3, r0
 8018f0c:	f003 030f 	and.w	r3, r3, #15
 8018f10:	2b01      	cmp	r3, #1
 8018f12:	d002      	beq.n	8018f1a <connect+0x3a>
 8018f14:	f06f 0304 	mvn.w	r3, #4
 8018f18:	e0b7      	b.n	801908a <connect+0x1aa>
   CHECK_SOCKINIT();
 8018f1a:	79fb      	ldrb	r3, [r7, #7]
 8018f1c:	009b      	lsls	r3, r3, #2
 8018f1e:	3301      	adds	r3, #1
 8018f20:	00db      	lsls	r3, r3, #3
 8018f22:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8018f26:	4618      	mov	r0, r3
 8018f28:	f7ff fb0e 	bl	8018548 <WIZCHIP_READ>
 8018f2c:	4603      	mov	r3, r0
 8018f2e:	2b13      	cmp	r3, #19
 8018f30:	d002      	beq.n	8018f38 <connect+0x58>
 8018f32:	f06f 0302 	mvn.w	r3, #2
 8018f36:	e0a8      	b.n	801908a <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8018f38:	683b      	ldr	r3, [r7, #0]
 8018f3a:	781b      	ldrb	r3, [r3, #0]
 8018f3c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8018f3e:	68fb      	ldr	r3, [r7, #12]
 8018f40:	021b      	lsls	r3, r3, #8
 8018f42:	683a      	ldr	r2, [r7, #0]
 8018f44:	3201      	adds	r2, #1
 8018f46:	7812      	ldrb	r2, [r2, #0]
 8018f48:	4413      	add	r3, r2
 8018f4a:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8018f4c:	68fb      	ldr	r3, [r7, #12]
 8018f4e:	021b      	lsls	r3, r3, #8
 8018f50:	683a      	ldr	r2, [r7, #0]
 8018f52:	3202      	adds	r2, #2
 8018f54:	7812      	ldrb	r2, [r2, #0]
 8018f56:	4413      	add	r3, r2
 8018f58:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8018f5a:	68fb      	ldr	r3, [r7, #12]
 8018f5c:	021b      	lsls	r3, r3, #8
 8018f5e:	683a      	ldr	r2, [r7, #0]
 8018f60:	3203      	adds	r2, #3
 8018f62:	7812      	ldrb	r2, [r2, #0]
 8018f64:	4413      	add	r3, r2
 8018f66:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8018f68:	68fb      	ldr	r3, [r7, #12]
 8018f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f6e:	d002      	beq.n	8018f76 <connect+0x96>
 8018f70:	68fb      	ldr	r3, [r7, #12]
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	d102      	bne.n	8018f7c <connect+0x9c>
 8018f76:	f06f 030b 	mvn.w	r3, #11
 8018f7a:	e086      	b.n	801908a <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8018f7c:	88bb      	ldrh	r3, [r7, #4]
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	d102      	bne.n	8018f88 <connect+0xa8>
 8018f82:	f06f 030a 	mvn.w	r3, #10
 8018f86:	e080      	b.n	801908a <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8018f88:	79fb      	ldrb	r3, [r7, #7]
 8018f8a:	009b      	lsls	r3, r3, #2
 8018f8c:	3301      	adds	r3, #1
 8018f8e:	00db      	lsls	r3, r3, #3
 8018f90:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8018f94:	2204      	movs	r2, #4
 8018f96:	6839      	ldr	r1, [r7, #0]
 8018f98:	4618      	mov	r0, r3
 8018f9a:	f7ff fbcf 	bl	801873c <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8018f9e:	79fb      	ldrb	r3, [r7, #7]
 8018fa0:	009b      	lsls	r3, r3, #2
 8018fa2:	3301      	adds	r3, #1
 8018fa4:	00db      	lsls	r3, r3, #3
 8018fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018faa:	461a      	mov	r2, r3
 8018fac:	88bb      	ldrh	r3, [r7, #4]
 8018fae:	0a1b      	lsrs	r3, r3, #8
 8018fb0:	b29b      	uxth	r3, r3
 8018fb2:	b2db      	uxtb	r3, r3
 8018fb4:	4619      	mov	r1, r3
 8018fb6:	4610      	mov	r0, r2
 8018fb8:	f7ff fb12 	bl	80185e0 <WIZCHIP_WRITE>
 8018fbc:	79fb      	ldrb	r3, [r7, #7]
 8018fbe:	009b      	lsls	r3, r3, #2
 8018fc0:	3301      	adds	r3, #1
 8018fc2:	00db      	lsls	r3, r3, #3
 8018fc4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8018fc8:	461a      	mov	r2, r3
 8018fca:	88bb      	ldrh	r3, [r7, #4]
 8018fcc:	b2db      	uxtb	r3, r3
 8018fce:	4619      	mov	r1, r3
 8018fd0:	4610      	mov	r0, r2
 8018fd2:	f7ff fb05 	bl	80185e0 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8018fd6:	79fb      	ldrb	r3, [r7, #7]
 8018fd8:	009b      	lsls	r3, r3, #2
 8018fda:	3301      	adds	r3, #1
 8018fdc:	00db      	lsls	r3, r3, #3
 8018fde:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018fe2:	2104      	movs	r1, #4
 8018fe4:	4618      	mov	r0, r3
 8018fe6:	f7ff fafb 	bl	80185e0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8018fea:	bf00      	nop
 8018fec:	79fb      	ldrb	r3, [r7, #7]
 8018fee:	009b      	lsls	r3, r3, #2
 8018ff0:	3301      	adds	r3, #1
 8018ff2:	00db      	lsls	r3, r3, #3
 8018ff4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018ff8:	4618      	mov	r0, r3
 8018ffa:	f7ff faa5 	bl	8018548 <WIZCHIP_READ>
 8018ffe:	4603      	mov	r3, r0
 8019000:	2b00      	cmp	r3, #0
 8019002:	d1f3      	bne.n	8018fec <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8019004:	4b23      	ldr	r3, [pc, #140]	; (8019094 <connect+0x1b4>)
 8019006:	881b      	ldrh	r3, [r3, #0]
 8019008:	461a      	mov	r2, r3
 801900a:	79fb      	ldrb	r3, [r7, #7]
 801900c:	fa42 f303 	asr.w	r3, r2, r3
 8019010:	f003 0301 	and.w	r3, r3, #1
 8019014:	2b00      	cmp	r3, #0
 8019016:	d02b      	beq.n	8019070 <connect+0x190>
 8019018:	2300      	movs	r3, #0
 801901a:	e036      	b.n	801908a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 801901c:	79fb      	ldrb	r3, [r7, #7]
 801901e:	009b      	lsls	r3, r3, #2
 8019020:	3301      	adds	r3, #1
 8019022:	00db      	lsls	r3, r3, #3
 8019024:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019028:	4618      	mov	r0, r3
 801902a:	f7ff fa8d 	bl	8018548 <WIZCHIP_READ>
 801902e:	4603      	mov	r3, r0
 8019030:	f003 0308 	and.w	r3, r3, #8
 8019034:	2b00      	cmp	r3, #0
 8019036:	d00c      	beq.n	8019052 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8019038:	79fb      	ldrb	r3, [r7, #7]
 801903a:	009b      	lsls	r3, r3, #2
 801903c:	3301      	adds	r3, #1
 801903e:	00db      	lsls	r3, r3, #3
 8019040:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019044:	2108      	movs	r1, #8
 8019046:	4618      	mov	r0, r3
 8019048:	f7ff faca 	bl	80185e0 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 801904c:	f06f 030c 	mvn.w	r3, #12
 8019050:	e01b      	b.n	801908a <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8019052:	79fb      	ldrb	r3, [r7, #7]
 8019054:	009b      	lsls	r3, r3, #2
 8019056:	3301      	adds	r3, #1
 8019058:	00db      	lsls	r3, r3, #3
 801905a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801905e:	4618      	mov	r0, r3
 8019060:	f7ff fa72 	bl	8018548 <WIZCHIP_READ>
 8019064:	4603      	mov	r3, r0
 8019066:	2b00      	cmp	r3, #0
 8019068:	d102      	bne.n	8019070 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 801906a:	f06f 0303 	mvn.w	r3, #3
 801906e:	e00c      	b.n	801908a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8019070:	79fb      	ldrb	r3, [r7, #7]
 8019072:	009b      	lsls	r3, r3, #2
 8019074:	3301      	adds	r3, #1
 8019076:	00db      	lsls	r3, r3, #3
 8019078:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801907c:	4618      	mov	r0, r3
 801907e:	f7ff fa63 	bl	8018548 <WIZCHIP_READ>
 8019082:	4603      	mov	r3, r0
 8019084:	2b17      	cmp	r3, #23
 8019086:	d1c9      	bne.n	801901c <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8019088:	2301      	movs	r3, #1
}
 801908a:	4618      	mov	r0, r3
 801908c:	3710      	adds	r7, #16
 801908e:	46bd      	mov	sp, r7
 8019090:	bd80      	pop	{r7, pc}
 8019092:	bf00      	nop
 8019094:	20000960 	.word	0x20000960

08019098 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8019098:	b580      	push	{r7, lr}
 801909a:	b082      	sub	sp, #8
 801909c:	af00      	add	r7, sp, #0
 801909e:	4603      	mov	r3, r0
 80190a0:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80190a2:	79fb      	ldrb	r3, [r7, #7]
 80190a4:	2b08      	cmp	r3, #8
 80190a6:	d902      	bls.n	80190ae <disconnect+0x16>
 80190a8:	f04f 33ff 	mov.w	r3, #4294967295
 80190ac:	e062      	b.n	8019174 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80190ae:	79fb      	ldrb	r3, [r7, #7]
 80190b0:	009b      	lsls	r3, r3, #2
 80190b2:	3301      	adds	r3, #1
 80190b4:	00db      	lsls	r3, r3, #3
 80190b6:	4618      	mov	r0, r3
 80190b8:	f7ff fa46 	bl	8018548 <WIZCHIP_READ>
 80190bc:	4603      	mov	r3, r0
 80190be:	f003 030f 	and.w	r3, r3, #15
 80190c2:	2b01      	cmp	r3, #1
 80190c4:	d002      	beq.n	80190cc <disconnect+0x34>
 80190c6:	f06f 0304 	mvn.w	r3, #4
 80190ca:	e053      	b.n	8019174 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 80190cc:	79fb      	ldrb	r3, [r7, #7]
 80190ce:	009b      	lsls	r3, r3, #2
 80190d0:	3301      	adds	r3, #1
 80190d2:	00db      	lsls	r3, r3, #3
 80190d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80190d8:	2108      	movs	r1, #8
 80190da:	4618      	mov	r0, r3
 80190dc:	f7ff fa80 	bl	80185e0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80190e0:	bf00      	nop
 80190e2:	79fb      	ldrb	r3, [r7, #7]
 80190e4:	009b      	lsls	r3, r3, #2
 80190e6:	3301      	adds	r3, #1
 80190e8:	00db      	lsls	r3, r3, #3
 80190ea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80190ee:	4618      	mov	r0, r3
 80190f0:	f7ff fa2a 	bl	8018548 <WIZCHIP_READ>
 80190f4:	4603      	mov	r3, r0
 80190f6:	2b00      	cmp	r3, #0
 80190f8:	d1f3      	bne.n	80190e2 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 80190fa:	79fb      	ldrb	r3, [r7, #7]
 80190fc:	2201      	movs	r2, #1
 80190fe:	fa02 f303 	lsl.w	r3, r2, r3
 8019102:	b21b      	sxth	r3, r3
 8019104:	43db      	mvns	r3, r3
 8019106:	b21a      	sxth	r2, r3
 8019108:	4b1c      	ldr	r3, [pc, #112]	; (801917c <disconnect+0xe4>)
 801910a:	881b      	ldrh	r3, [r3, #0]
 801910c:	b21b      	sxth	r3, r3
 801910e:	4013      	ands	r3, r2
 8019110:	b21b      	sxth	r3, r3
 8019112:	b29a      	uxth	r2, r3
 8019114:	4b19      	ldr	r3, [pc, #100]	; (801917c <disconnect+0xe4>)
 8019116:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8019118:	4b19      	ldr	r3, [pc, #100]	; (8019180 <disconnect+0xe8>)
 801911a:	881b      	ldrh	r3, [r3, #0]
 801911c:	461a      	mov	r2, r3
 801911e:	79fb      	ldrb	r3, [r7, #7]
 8019120:	fa42 f303 	asr.w	r3, r2, r3
 8019124:	f003 0301 	and.w	r3, r3, #1
 8019128:	2b00      	cmp	r3, #0
 801912a:	d016      	beq.n	801915a <disconnect+0xc2>
 801912c:	2300      	movs	r3, #0
 801912e:	e021      	b.n	8019174 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{	//TODO add task yeld
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8019130:	79fb      	ldrb	r3, [r7, #7]
 8019132:	009b      	lsls	r3, r3, #2
 8019134:	3301      	adds	r3, #1
 8019136:	00db      	lsls	r3, r3, #3
 8019138:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801913c:	4618      	mov	r0, r3
 801913e:	f7ff fa03 	bl	8018548 <WIZCHIP_READ>
 8019142:	4603      	mov	r3, r0
 8019144:	f003 0308 	and.w	r3, r3, #8
 8019148:	2b00      	cmp	r3, #0
 801914a:	d006      	beq.n	801915a <disconnect+0xc2>
	   {
	      close(sn);
 801914c:	79fb      	ldrb	r3, [r7, #7]
 801914e:	4618      	mov	r0, r3
 8019150:	f7ff fdfe 	bl	8018d50 <close>
	      return SOCKERR_TIMEOUT;
 8019154:	f06f 030c 	mvn.w	r3, #12
 8019158:	e00c      	b.n	8019174 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 801915a:	79fb      	ldrb	r3, [r7, #7]
 801915c:	009b      	lsls	r3, r3, #2
 801915e:	3301      	adds	r3, #1
 8019160:	00db      	lsls	r3, r3, #3
 8019162:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019166:	4618      	mov	r0, r3
 8019168:	f7ff f9ee 	bl	8018548 <WIZCHIP_READ>
 801916c:	4603      	mov	r3, r0
 801916e:	2b00      	cmp	r3, #0
 8019170:	d1de      	bne.n	8019130 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8019172:	2301      	movs	r3, #1
}
 8019174:	4618      	mov	r0, r3
 8019176:	3708      	adds	r7, #8
 8019178:	46bd      	mov	sp, r7
 801917a:	bd80      	pop	{r7, pc}
 801917c:	20000962 	.word	0x20000962
 8019180:	20000960 	.word	0x20000960

08019184 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8019184:	b580      	push	{r7, lr}
 8019186:	b084      	sub	sp, #16
 8019188:	af00      	add	r7, sp, #0
 801918a:	4603      	mov	r3, r0
 801918c:	6039      	str	r1, [r7, #0]
 801918e:	71fb      	strb	r3, [r7, #7]
 8019190:	4613      	mov	r3, r2
 8019192:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8019194:	2300      	movs	r3, #0
 8019196:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8019198:	2300      	movs	r3, #0
 801919a:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 801919c:	79fb      	ldrb	r3, [r7, #7]
 801919e:	2b08      	cmp	r3, #8
 80191a0:	d902      	bls.n	80191a8 <send+0x24>
 80191a2:	f04f 33ff 	mov.w	r3, #4294967295
 80191a6:	e0de      	b.n	8019366 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80191a8:	79fb      	ldrb	r3, [r7, #7]
 80191aa:	009b      	lsls	r3, r3, #2
 80191ac:	3301      	adds	r3, #1
 80191ae:	00db      	lsls	r3, r3, #3
 80191b0:	4618      	mov	r0, r3
 80191b2:	f7ff f9c9 	bl	8018548 <WIZCHIP_READ>
 80191b6:	4603      	mov	r3, r0
 80191b8:	f003 030f 	and.w	r3, r3, #15
 80191bc:	2b01      	cmp	r3, #1
 80191be:	d002      	beq.n	80191c6 <send+0x42>
 80191c0:	f06f 0304 	mvn.w	r3, #4
 80191c4:	e0cf      	b.n	8019366 <send+0x1e2>
   CHECK_SOCKDATA();
 80191c6:	88bb      	ldrh	r3, [r7, #4]
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	d102      	bne.n	80191d2 <send+0x4e>
 80191cc:	f06f 030d 	mvn.w	r3, #13
 80191d0:	e0c9      	b.n	8019366 <send+0x1e2>
   tmp = getSn_SR(sn);
 80191d2:	79fb      	ldrb	r3, [r7, #7]
 80191d4:	009b      	lsls	r3, r3, #2
 80191d6:	3301      	adds	r3, #1
 80191d8:	00db      	lsls	r3, r3, #3
 80191da:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80191de:	4618      	mov	r0, r3
 80191e0:	f7ff f9b2 	bl	8018548 <WIZCHIP_READ>
 80191e4:	4603      	mov	r3, r0
 80191e6:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80191e8:	7bfb      	ldrb	r3, [r7, #15]
 80191ea:	2b17      	cmp	r3, #23
 80191ec:	d005      	beq.n	80191fa <send+0x76>
 80191ee:	7bfb      	ldrb	r3, [r7, #15]
 80191f0:	2b1c      	cmp	r3, #28
 80191f2:	d002      	beq.n	80191fa <send+0x76>
 80191f4:	f06f 0306 	mvn.w	r3, #6
 80191f8:	e0b5      	b.n	8019366 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 80191fa:	4b5d      	ldr	r3, [pc, #372]	; (8019370 <send+0x1ec>)
 80191fc:	881b      	ldrh	r3, [r3, #0]
 80191fe:	461a      	mov	r2, r3
 8019200:	79fb      	ldrb	r3, [r7, #7]
 8019202:	fa42 f303 	asr.w	r3, r2, r3
 8019206:	f003 0301 	and.w	r3, r3, #1
 801920a:	2b00      	cmp	r3, #0
 801920c:	d039      	beq.n	8019282 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 801920e:	79fb      	ldrb	r3, [r7, #7]
 8019210:	009b      	lsls	r3, r3, #2
 8019212:	3301      	adds	r3, #1
 8019214:	00db      	lsls	r3, r3, #3
 8019216:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801921a:	4618      	mov	r0, r3
 801921c:	f7ff f994 	bl	8018548 <WIZCHIP_READ>
 8019220:	4603      	mov	r3, r0
 8019222:	f003 031f 	and.w	r3, r3, #31
 8019226:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8019228:	7bfb      	ldrb	r3, [r7, #15]
 801922a:	f003 0310 	and.w	r3, r3, #16
 801922e:	2b00      	cmp	r3, #0
 8019230:	d019      	beq.n	8019266 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8019232:	79fb      	ldrb	r3, [r7, #7]
 8019234:	009b      	lsls	r3, r3, #2
 8019236:	3301      	adds	r3, #1
 8019238:	00db      	lsls	r3, r3, #3
 801923a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801923e:	2110      	movs	r1, #16
 8019240:	4618      	mov	r0, r3
 8019242:	f7ff f9cd 	bl	80185e0 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8019246:	79fb      	ldrb	r3, [r7, #7]
 8019248:	2201      	movs	r2, #1
 801924a:	fa02 f303 	lsl.w	r3, r2, r3
 801924e:	b21b      	sxth	r3, r3
 8019250:	43db      	mvns	r3, r3
 8019252:	b21a      	sxth	r2, r3
 8019254:	4b46      	ldr	r3, [pc, #280]	; (8019370 <send+0x1ec>)
 8019256:	881b      	ldrh	r3, [r3, #0]
 8019258:	b21b      	sxth	r3, r3
 801925a:	4013      	ands	r3, r2
 801925c:	b21b      	sxth	r3, r3
 801925e:	b29a      	uxth	r2, r3
 8019260:	4b43      	ldr	r3, [pc, #268]	; (8019370 <send+0x1ec>)
 8019262:	801a      	strh	r2, [r3, #0]
 8019264:	e00d      	b.n	8019282 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8019266:	7bfb      	ldrb	r3, [r7, #15]
 8019268:	f003 0308 	and.w	r3, r3, #8
 801926c:	2b00      	cmp	r3, #0
 801926e:	d006      	beq.n	801927e <send+0xfa>
      {
         close(sn);
 8019270:	79fb      	ldrb	r3, [r7, #7]
 8019272:	4618      	mov	r0, r3
 8019274:	f7ff fd6c 	bl	8018d50 <close>
         return SOCKERR_TIMEOUT;
 8019278:	f06f 030c 	mvn.w	r3, #12
 801927c:	e073      	b.n	8019366 <send+0x1e2>
      }
      else return SOCK_BUSY;
 801927e:	2300      	movs	r3, #0
 8019280:	e071      	b.n	8019366 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8019282:	79fb      	ldrb	r3, [r7, #7]
 8019284:	009b      	lsls	r3, r3, #2
 8019286:	3301      	adds	r3, #1
 8019288:	00db      	lsls	r3, r3, #3
 801928a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 801928e:	4618      	mov	r0, r3
 8019290:	f7ff f95a 	bl	8018548 <WIZCHIP_READ>
 8019294:	4603      	mov	r3, r0
 8019296:	b29b      	uxth	r3, r3
 8019298:	029b      	lsls	r3, r3, #10
 801929a:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 801929c:	88ba      	ldrh	r2, [r7, #4]
 801929e:	89bb      	ldrh	r3, [r7, #12]
 80192a0:	429a      	cmp	r2, r3
 80192a2:	d901      	bls.n	80192a8 <send+0x124>
 80192a4:	89bb      	ldrh	r3, [r7, #12]
 80192a6:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80192a8:	79fb      	ldrb	r3, [r7, #7]
 80192aa:	4618      	mov	r0, r3
 80192ac:	f7ff faa6 	bl	80187fc <getSn_TX_FSR>
 80192b0:	4603      	mov	r3, r0
 80192b2:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80192b4:	79fb      	ldrb	r3, [r7, #7]
 80192b6:	009b      	lsls	r3, r3, #2
 80192b8:	3301      	adds	r3, #1
 80192ba:	00db      	lsls	r3, r3, #3
 80192bc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80192c0:	4618      	mov	r0, r3
 80192c2:	f7ff f941 	bl	8018548 <WIZCHIP_READ>
 80192c6:	4603      	mov	r3, r0
 80192c8:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80192ca:	7bfb      	ldrb	r3, [r7, #15]
 80192cc:	2b17      	cmp	r3, #23
 80192ce:	d009      	beq.n	80192e4 <send+0x160>
 80192d0:	7bfb      	ldrb	r3, [r7, #15]
 80192d2:	2b1c      	cmp	r3, #28
 80192d4:	d006      	beq.n	80192e4 <send+0x160>
      {
         close(sn);
 80192d6:	79fb      	ldrb	r3, [r7, #7]
 80192d8:	4618      	mov	r0, r3
 80192da:	f7ff fd39 	bl	8018d50 <close>
         return SOCKERR_SOCKSTATUS;
 80192de:	f06f 0306 	mvn.w	r3, #6
 80192e2:	e040      	b.n	8019366 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80192e4:	4b23      	ldr	r3, [pc, #140]	; (8019374 <send+0x1f0>)
 80192e6:	881b      	ldrh	r3, [r3, #0]
 80192e8:	461a      	mov	r2, r3
 80192ea:	79fb      	ldrb	r3, [r7, #7]
 80192ec:	fa42 f303 	asr.w	r3, r2, r3
 80192f0:	f003 0301 	and.w	r3, r3, #1
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	d005      	beq.n	8019304 <send+0x180>
 80192f8:	88ba      	ldrh	r2, [r7, #4]
 80192fa:	89bb      	ldrh	r3, [r7, #12]
 80192fc:	429a      	cmp	r2, r3
 80192fe:	d901      	bls.n	8019304 <send+0x180>
 8019300:	2300      	movs	r3, #0
 8019302:	e030      	b.n	8019366 <send+0x1e2>
      if(len <= freesize) break;
 8019304:	88ba      	ldrh	r2, [r7, #4]
 8019306:	89bb      	ldrh	r3, [r7, #12]
 8019308:	429a      	cmp	r2, r3
 801930a:	d900      	bls.n	801930e <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 801930c:	e7cc      	b.n	80192a8 <send+0x124>
      if(len <= freesize) break;
 801930e:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8019310:	88ba      	ldrh	r2, [r7, #4]
 8019312:	79fb      	ldrb	r3, [r7, #7]
 8019314:	6839      	ldr	r1, [r7, #0]
 8019316:	4618      	mov	r0, r3
 8019318:	f7ff fb06 	bl	8018928 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 801931c:	79fb      	ldrb	r3, [r7, #7]
 801931e:	009b      	lsls	r3, r3, #2
 8019320:	3301      	adds	r3, #1
 8019322:	00db      	lsls	r3, r3, #3
 8019324:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019328:	2120      	movs	r1, #32
 801932a:	4618      	mov	r0, r3
 801932c:	f7ff f958 	bl	80185e0 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8019330:	bf00      	nop
 8019332:	79fb      	ldrb	r3, [r7, #7]
 8019334:	009b      	lsls	r3, r3, #2
 8019336:	3301      	adds	r3, #1
 8019338:	00db      	lsls	r3, r3, #3
 801933a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801933e:	4618      	mov	r0, r3
 8019340:	f7ff f902 	bl	8018548 <WIZCHIP_READ>
 8019344:	4603      	mov	r3, r0
 8019346:	2b00      	cmp	r3, #0
 8019348:	d1f3      	bne.n	8019332 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 801934a:	79fb      	ldrb	r3, [r7, #7]
 801934c:	2201      	movs	r2, #1
 801934e:	fa02 f303 	lsl.w	r3, r2, r3
 8019352:	b21a      	sxth	r2, r3
 8019354:	4b06      	ldr	r3, [pc, #24]	; (8019370 <send+0x1ec>)
 8019356:	881b      	ldrh	r3, [r3, #0]
 8019358:	b21b      	sxth	r3, r3
 801935a:	4313      	orrs	r3, r2
 801935c:	b21b      	sxth	r3, r3
 801935e:	b29a      	uxth	r2, r3
 8019360:	4b03      	ldr	r3, [pc, #12]	; (8019370 <send+0x1ec>)
 8019362:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8019364:	88bb      	ldrh	r3, [r7, #4]
}
 8019366:	4618      	mov	r0, r3
 8019368:	3710      	adds	r7, #16
 801936a:	46bd      	mov	sp, r7
 801936c:	bd80      	pop	{r7, pc}
 801936e:	bf00      	nop
 8019370:	20000962 	.word	0x20000962
 8019374:	20000960 	.word	0x20000960

08019378 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8019378:	b590      	push	{r4, r7, lr}
 801937a:	b085      	sub	sp, #20
 801937c:	af00      	add	r7, sp, #0
 801937e:	4603      	mov	r3, r0
 8019380:	6039      	str	r1, [r7, #0]
 8019382:	71fb      	strb	r3, [r7, #7]
 8019384:	4613      	mov	r3, r2
 8019386:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8019388:	2300      	movs	r3, #0
 801938a:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 801938c:	2300      	movs	r3, #0
 801938e:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8019390:	79fb      	ldrb	r3, [r7, #7]
 8019392:	2b08      	cmp	r3, #8
 8019394:	d902      	bls.n	801939c <recv+0x24>
 8019396:	f04f 33ff 	mov.w	r3, #4294967295
 801939a:	e09c      	b.n	80194d6 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 801939c:	79fb      	ldrb	r3, [r7, #7]
 801939e:	009b      	lsls	r3, r3, #2
 80193a0:	3301      	adds	r3, #1
 80193a2:	00db      	lsls	r3, r3, #3
 80193a4:	4618      	mov	r0, r3
 80193a6:	f7ff f8cf 	bl	8018548 <WIZCHIP_READ>
 80193aa:	4603      	mov	r3, r0
 80193ac:	f003 030f 	and.w	r3, r3, #15
 80193b0:	2b01      	cmp	r3, #1
 80193b2:	d002      	beq.n	80193ba <recv+0x42>
 80193b4:	f06f 0304 	mvn.w	r3, #4
 80193b8:	e08d      	b.n	80194d6 <recv+0x15e>
   CHECK_SOCKDATA();
 80193ba:	88bb      	ldrh	r3, [r7, #4]
 80193bc:	2b00      	cmp	r3, #0
 80193be:	d102      	bne.n	80193c6 <recv+0x4e>
 80193c0:	f06f 030d 	mvn.w	r3, #13
 80193c4:	e087      	b.n	80194d6 <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 80193c6:	79fb      	ldrb	r3, [r7, #7]
 80193c8:	009b      	lsls	r3, r3, #2
 80193ca:	3301      	adds	r3, #1
 80193cc:	00db      	lsls	r3, r3, #3
 80193ce:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80193d2:	4618      	mov	r0, r3
 80193d4:	f7ff f8b8 	bl	8018548 <WIZCHIP_READ>
 80193d8:	4603      	mov	r3, r0
 80193da:	b29b      	uxth	r3, r3
 80193dc:	029b      	lsls	r3, r3, #10
 80193de:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80193e0:	89ba      	ldrh	r2, [r7, #12]
 80193e2:	88bb      	ldrh	r3, [r7, #4]
 80193e4:	429a      	cmp	r2, r3
 80193e6:	d201      	bcs.n	80193ec <recv+0x74>
 80193e8:	89bb      	ldrh	r3, [r7, #12]
 80193ea:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 80193ec:	79fb      	ldrb	r3, [r7, #7]
 80193ee:	4618      	mov	r0, r3
 80193f0:	f7ff fa4f 	bl	8018892 <getSn_RX_RSR>
 80193f4:	4603      	mov	r3, r0
 80193f6:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 80193f8:	79fb      	ldrb	r3, [r7, #7]
 80193fa:	009b      	lsls	r3, r3, #2
 80193fc:	3301      	adds	r3, #1
 80193fe:	00db      	lsls	r3, r3, #3
 8019400:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019404:	4618      	mov	r0, r3
 8019406:	f7ff f89f 	bl	8018548 <WIZCHIP_READ>
 801940a:	4603      	mov	r3, r0
 801940c:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 801940e:	7bfb      	ldrb	r3, [r7, #15]
 8019410:	2b17      	cmp	r3, #23
 8019412:	d026      	beq.n	8019462 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8019414:	7bfb      	ldrb	r3, [r7, #15]
 8019416:	2b1c      	cmp	r3, #28
 8019418:	d11c      	bne.n	8019454 <recv+0xdc>
            {
               if(recvsize != 0) break;
 801941a:	89bb      	ldrh	r3, [r7, #12]
 801941c:	2b00      	cmp	r3, #0
 801941e:	d133      	bne.n	8019488 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8019420:	79fb      	ldrb	r3, [r7, #7]
 8019422:	4618      	mov	r0, r3
 8019424:	f7ff f9ea 	bl	80187fc <getSn_TX_FSR>
 8019428:	4603      	mov	r3, r0
 801942a:	461c      	mov	r4, r3
 801942c:	79fb      	ldrb	r3, [r7, #7]
 801942e:	009b      	lsls	r3, r3, #2
 8019430:	3301      	adds	r3, #1
 8019432:	00db      	lsls	r3, r3, #3
 8019434:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8019438:	4618      	mov	r0, r3
 801943a:	f7ff f885 	bl	8018548 <WIZCHIP_READ>
 801943e:	4603      	mov	r3, r0
 8019440:	029b      	lsls	r3, r3, #10
 8019442:	429c      	cmp	r4, r3
 8019444:	d10d      	bne.n	8019462 <recv+0xea>
               {
                  close(sn);
 8019446:	79fb      	ldrb	r3, [r7, #7]
 8019448:	4618      	mov	r0, r3
 801944a:	f7ff fc81 	bl	8018d50 <close>
                  return SOCKERR_SOCKSTATUS;
 801944e:	f06f 0306 	mvn.w	r3, #6
 8019452:	e040      	b.n	80194d6 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8019454:	79fb      	ldrb	r3, [r7, #7]
 8019456:	4618      	mov	r0, r3
 8019458:	f7ff fc7a 	bl	8018d50 <close>
               return SOCKERR_SOCKSTATUS;
 801945c:	f06f 0306 	mvn.w	r3, #6
 8019460:	e039      	b.n	80194d6 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8019462:	4b1f      	ldr	r3, [pc, #124]	; (80194e0 <recv+0x168>)
 8019464:	881b      	ldrh	r3, [r3, #0]
 8019466:	461a      	mov	r2, r3
 8019468:	79fb      	ldrb	r3, [r7, #7]
 801946a:	fa42 f303 	asr.w	r3, r2, r3
 801946e:	f003 0301 	and.w	r3, r3, #1
 8019472:	2b00      	cmp	r3, #0
 8019474:	d004      	beq.n	8019480 <recv+0x108>
 8019476:	89bb      	ldrh	r3, [r7, #12]
 8019478:	2b00      	cmp	r3, #0
 801947a:	d101      	bne.n	8019480 <recv+0x108>
 801947c:	2300      	movs	r3, #0
 801947e:	e02a      	b.n	80194d6 <recv+0x15e>
         if(recvsize != 0) break;
 8019480:	89bb      	ldrh	r3, [r7, #12]
 8019482:	2b00      	cmp	r3, #0
 8019484:	d102      	bne.n	801948c <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 8019486:	e7b1      	b.n	80193ec <recv+0x74>
               if(recvsize != 0) break;
 8019488:	bf00      	nop
 801948a:	e000      	b.n	801948e <recv+0x116>
         if(recvsize != 0) break;
 801948c:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 801948e:	89ba      	ldrh	r2, [r7, #12]
 8019490:	88bb      	ldrh	r3, [r7, #4]
 8019492:	429a      	cmp	r2, r3
 8019494:	d201      	bcs.n	801949a <recv+0x122>
 8019496:	89bb      	ldrh	r3, [r7, #12]
 8019498:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 801949a:	88ba      	ldrh	r2, [r7, #4]
 801949c:	79fb      	ldrb	r3, [r7, #7]
 801949e:	6839      	ldr	r1, [r7, #0]
 80194a0:	4618      	mov	r0, r3
 80194a2:	f7ff fa9d 	bl	80189e0 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 80194a6:	79fb      	ldrb	r3, [r7, #7]
 80194a8:	009b      	lsls	r3, r3, #2
 80194aa:	3301      	adds	r3, #1
 80194ac:	00db      	lsls	r3, r3, #3
 80194ae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80194b2:	2140      	movs	r1, #64	; 0x40
 80194b4:	4618      	mov	r0, r3
 80194b6:	f7ff f893 	bl	80185e0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80194ba:	bf00      	nop
 80194bc:	79fb      	ldrb	r3, [r7, #7]
 80194be:	009b      	lsls	r3, r3, #2
 80194c0:	3301      	adds	r3, #1
 80194c2:	00db      	lsls	r3, r3, #3
 80194c4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80194c8:	4618      	mov	r0, r3
 80194ca:	f7ff f83d 	bl	8018548 <WIZCHIP_READ>
 80194ce:	4603      	mov	r3, r0
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	d1f3      	bne.n	80194bc <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80194d4:	88bb      	ldrh	r3, [r7, #4]
}
 80194d6:	4618      	mov	r0, r3
 80194d8:	3714      	adds	r7, #20
 80194da:	46bd      	mov	sp, r7
 80194dc:	bd90      	pop	{r4, r7, pc}
 80194de:	bf00      	nop
 80194e0:	20000960 	.word	0x20000960

080194e4 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 80194e4:	b580      	push	{r7, lr}
 80194e6:	b086      	sub	sp, #24
 80194e8:	af00      	add	r7, sp, #0
 80194ea:	60b9      	str	r1, [r7, #8]
 80194ec:	607b      	str	r3, [r7, #4]
 80194ee:	4603      	mov	r3, r0
 80194f0:	73fb      	strb	r3, [r7, #15]
 80194f2:	4613      	mov	r3, r2
 80194f4:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 80194f6:	2300      	movs	r3, #0
 80194f8:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 80194fa:	2300      	movs	r3, #0
 80194fc:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 80194fe:	7bfb      	ldrb	r3, [r7, #15]
 8019500:	2b08      	cmp	r3, #8
 8019502:	d902      	bls.n	801950a <sendto+0x26>
 8019504:	f04f 33ff 	mov.w	r3, #4294967295
 8019508:	e11b      	b.n	8019742 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 801950a:	7bfb      	ldrb	r3, [r7, #15]
 801950c:	009b      	lsls	r3, r3, #2
 801950e:	3301      	adds	r3, #1
 8019510:	00db      	lsls	r3, r3, #3
 8019512:	4618      	mov	r0, r3
 8019514:	f7ff f818 	bl	8018548 <WIZCHIP_READ>
 8019518:	4603      	mov	r3, r0
 801951a:	f003 030f 	and.w	r3, r3, #15
 801951e:	3b02      	subs	r3, #2
 8019520:	2b02      	cmp	r3, #2
 8019522:	d902      	bls.n	801952a <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8019524:	f06f 0304 	mvn.w	r3, #4
 8019528:	e10b      	b.n	8019742 <sendto+0x25e>
         break;
 801952a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 801952c:	89bb      	ldrh	r3, [r7, #12]
 801952e:	2b00      	cmp	r3, #0
 8019530:	d102      	bne.n	8019538 <sendto+0x54>
 8019532:	f06f 030d 	mvn.w	r3, #13
 8019536:	e104      	b.n	8019742 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	781b      	ldrb	r3, [r3, #0]
 801953c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 801953e:	693b      	ldr	r3, [r7, #16]
 8019540:	021b      	lsls	r3, r3, #8
 8019542:	687a      	ldr	r2, [r7, #4]
 8019544:	3201      	adds	r2, #1
 8019546:	7812      	ldrb	r2, [r2, #0]
 8019548:	4413      	add	r3, r2
 801954a:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 801954c:	693b      	ldr	r3, [r7, #16]
 801954e:	021b      	lsls	r3, r3, #8
 8019550:	687a      	ldr	r2, [r7, #4]
 8019552:	3202      	adds	r2, #2
 8019554:	7812      	ldrb	r2, [r2, #0]
 8019556:	4413      	add	r3, r2
 8019558:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 801955a:	693b      	ldr	r3, [r7, #16]
 801955c:	021b      	lsls	r3, r3, #8
 801955e:	687a      	ldr	r2, [r7, #4]
 8019560:	3203      	adds	r2, #3
 8019562:	7812      	ldrb	r2, [r2, #0]
 8019564:	4413      	add	r3, r2
 8019566:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8019568:	693b      	ldr	r3, [r7, #16]
 801956a:	2b00      	cmp	r3, #0
 801956c:	d10e      	bne.n	801958c <sendto+0xa8>
 801956e:	7bfb      	ldrb	r3, [r7, #15]
 8019570:	009b      	lsls	r3, r3, #2
 8019572:	3301      	adds	r3, #1
 8019574:	00db      	lsls	r3, r3, #3
 8019576:	4618      	mov	r0, r3
 8019578:	f7fe ffe6 	bl	8018548 <WIZCHIP_READ>
 801957c:	4603      	mov	r3, r0
 801957e:	f003 0304 	and.w	r3, r3, #4
 8019582:	2b04      	cmp	r3, #4
 8019584:	d002      	beq.n	801958c <sendto+0xa8>
 8019586:	f06f 030b 	mvn.w	r3, #11
 801958a:	e0da      	b.n	8019742 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 801958c:	8c3b      	ldrh	r3, [r7, #32]
 801958e:	2b00      	cmp	r3, #0
 8019590:	d10e      	bne.n	80195b0 <sendto+0xcc>
 8019592:	7bfb      	ldrb	r3, [r7, #15]
 8019594:	009b      	lsls	r3, r3, #2
 8019596:	3301      	adds	r3, #1
 8019598:	00db      	lsls	r3, r3, #3
 801959a:	4618      	mov	r0, r3
 801959c:	f7fe ffd4 	bl	8018548 <WIZCHIP_READ>
 80195a0:	4603      	mov	r3, r0
 80195a2:	f003 0304 	and.w	r3, r3, #4
 80195a6:	2b04      	cmp	r3, #4
 80195a8:	d002      	beq.n	80195b0 <sendto+0xcc>
 80195aa:	f06f 030a 	mvn.w	r3, #10
 80195ae:	e0c8      	b.n	8019742 <sendto+0x25e>
   tmp = getSn_SR(sn);
 80195b0:	7bfb      	ldrb	r3, [r7, #15]
 80195b2:	009b      	lsls	r3, r3, #2
 80195b4:	3301      	adds	r3, #1
 80195b6:	00db      	lsls	r3, r3, #3
 80195b8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80195bc:	4618      	mov	r0, r3
 80195be:	f7fe ffc3 	bl	8018548 <WIZCHIP_READ>
 80195c2:	4603      	mov	r3, r0
 80195c4:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80195c6:	7dfb      	ldrb	r3, [r7, #23]
 80195c8:	2b42      	cmp	r3, #66	; 0x42
 80195ca:	d008      	beq.n	80195de <sendto+0xfa>
 80195cc:	7dfb      	ldrb	r3, [r7, #23]
 80195ce:	2b22      	cmp	r3, #34	; 0x22
 80195d0:	d005      	beq.n	80195de <sendto+0xfa>
 80195d2:	7dfb      	ldrb	r3, [r7, #23]
 80195d4:	2b32      	cmp	r3, #50	; 0x32
 80195d6:	d002      	beq.n	80195de <sendto+0xfa>
 80195d8:	f06f 0306 	mvn.w	r3, #6
 80195dc:	e0b1      	b.n	8019742 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 80195de:	7bfb      	ldrb	r3, [r7, #15]
 80195e0:	009b      	lsls	r3, r3, #2
 80195e2:	3301      	adds	r3, #1
 80195e4:	00db      	lsls	r3, r3, #3
 80195e6:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80195ea:	2204      	movs	r2, #4
 80195ec:	6879      	ldr	r1, [r7, #4]
 80195ee:	4618      	mov	r0, r3
 80195f0:	f7ff f8a4 	bl	801873c <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 80195f4:	7bfb      	ldrb	r3, [r7, #15]
 80195f6:	009b      	lsls	r3, r3, #2
 80195f8:	3301      	adds	r3, #1
 80195fa:	00db      	lsls	r3, r3, #3
 80195fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019600:	461a      	mov	r2, r3
 8019602:	8c3b      	ldrh	r3, [r7, #32]
 8019604:	0a1b      	lsrs	r3, r3, #8
 8019606:	b29b      	uxth	r3, r3
 8019608:	b2db      	uxtb	r3, r3
 801960a:	4619      	mov	r1, r3
 801960c:	4610      	mov	r0, r2
 801960e:	f7fe ffe7 	bl	80185e0 <WIZCHIP_WRITE>
 8019612:	7bfb      	ldrb	r3, [r7, #15]
 8019614:	009b      	lsls	r3, r3, #2
 8019616:	3301      	adds	r3, #1
 8019618:	00db      	lsls	r3, r3, #3
 801961a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 801961e:	461a      	mov	r2, r3
 8019620:	8c3b      	ldrh	r3, [r7, #32]
 8019622:	b2db      	uxtb	r3, r3
 8019624:	4619      	mov	r1, r3
 8019626:	4610      	mov	r0, r2
 8019628:	f7fe ffda 	bl	80185e0 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 801962c:	7bfb      	ldrb	r3, [r7, #15]
 801962e:	009b      	lsls	r3, r3, #2
 8019630:	3301      	adds	r3, #1
 8019632:	00db      	lsls	r3, r3, #3
 8019634:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8019638:	4618      	mov	r0, r3
 801963a:	f7fe ff85 	bl	8018548 <WIZCHIP_READ>
 801963e:	4603      	mov	r3, r0
 8019640:	b29b      	uxth	r3, r3
 8019642:	029b      	lsls	r3, r3, #10
 8019644:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8019646:	89ba      	ldrh	r2, [r7, #12]
 8019648:	8abb      	ldrh	r3, [r7, #20]
 801964a:	429a      	cmp	r2, r3
 801964c:	d901      	bls.n	8019652 <sendto+0x16e>
 801964e:	8abb      	ldrh	r3, [r7, #20]
 8019650:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8019652:	7bfb      	ldrb	r3, [r7, #15]
 8019654:	4618      	mov	r0, r3
 8019656:	f7ff f8d1 	bl	80187fc <getSn_TX_FSR>
 801965a:	4603      	mov	r3, r0
 801965c:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 801965e:	7bfb      	ldrb	r3, [r7, #15]
 8019660:	009b      	lsls	r3, r3, #2
 8019662:	3301      	adds	r3, #1
 8019664:	00db      	lsls	r3, r3, #3
 8019666:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801966a:	4618      	mov	r0, r3
 801966c:	f7fe ff6c 	bl	8018548 <WIZCHIP_READ>
 8019670:	4603      	mov	r3, r0
 8019672:	2b00      	cmp	r3, #0
 8019674:	d102      	bne.n	801967c <sendto+0x198>
 8019676:	f06f 0303 	mvn.w	r3, #3
 801967a:	e062      	b.n	8019742 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 801967c:	4b33      	ldr	r3, [pc, #204]	; (801974c <sendto+0x268>)
 801967e:	881b      	ldrh	r3, [r3, #0]
 8019680:	461a      	mov	r2, r3
 8019682:	7bfb      	ldrb	r3, [r7, #15]
 8019684:	fa42 f303 	asr.w	r3, r2, r3
 8019688:	f003 0301 	and.w	r3, r3, #1
 801968c:	2b00      	cmp	r3, #0
 801968e:	d005      	beq.n	801969c <sendto+0x1b8>
 8019690:	89ba      	ldrh	r2, [r7, #12]
 8019692:	8abb      	ldrh	r3, [r7, #20]
 8019694:	429a      	cmp	r2, r3
 8019696:	d901      	bls.n	801969c <sendto+0x1b8>
 8019698:	2300      	movs	r3, #0
 801969a:	e052      	b.n	8019742 <sendto+0x25e>
      if(len <= freesize) break;
 801969c:	89ba      	ldrh	r2, [r7, #12]
 801969e:	8abb      	ldrh	r3, [r7, #20]
 80196a0:	429a      	cmp	r2, r3
 80196a2:	d900      	bls.n	80196a6 <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 80196a4:	e7d5      	b.n	8019652 <sendto+0x16e>
      if(len <= freesize) break;
 80196a6:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 80196a8:	89ba      	ldrh	r2, [r7, #12]
 80196aa:	7bfb      	ldrb	r3, [r7, #15]
 80196ac:	68b9      	ldr	r1, [r7, #8]
 80196ae:	4618      	mov	r0, r3
 80196b0:	f7ff f93a 	bl	8018928 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 80196b4:	7bfb      	ldrb	r3, [r7, #15]
 80196b6:	009b      	lsls	r3, r3, #2
 80196b8:	3301      	adds	r3, #1
 80196ba:	00db      	lsls	r3, r3, #3
 80196bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80196c0:	2120      	movs	r1, #32
 80196c2:	4618      	mov	r0, r3
 80196c4:	f7fe ff8c 	bl	80185e0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80196c8:	bf00      	nop
 80196ca:	7bfb      	ldrb	r3, [r7, #15]
 80196cc:	009b      	lsls	r3, r3, #2
 80196ce:	3301      	adds	r3, #1
 80196d0:	00db      	lsls	r3, r3, #3
 80196d2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80196d6:	4618      	mov	r0, r3
 80196d8:	f7fe ff36 	bl	8018548 <WIZCHIP_READ>
 80196dc:	4603      	mov	r3, r0
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d1f3      	bne.n	80196ca <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 80196e2:	7bfb      	ldrb	r3, [r7, #15]
 80196e4:	009b      	lsls	r3, r3, #2
 80196e6:	3301      	adds	r3, #1
 80196e8:	00db      	lsls	r3, r3, #3
 80196ea:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80196ee:	4618      	mov	r0, r3
 80196f0:	f7fe ff2a 	bl	8018548 <WIZCHIP_READ>
 80196f4:	4603      	mov	r3, r0
 80196f6:	f003 031f 	and.w	r3, r3, #31
 80196fa:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 80196fc:	7dfb      	ldrb	r3, [r7, #23]
 80196fe:	f003 0310 	and.w	r3, r3, #16
 8019702:	2b00      	cmp	r3, #0
 8019704:	d00c      	beq.n	8019720 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8019706:	7bfb      	ldrb	r3, [r7, #15]
 8019708:	009b      	lsls	r3, r3, #2
 801970a:	3301      	adds	r3, #1
 801970c:	00db      	lsls	r3, r3, #3
 801970e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019712:	2110      	movs	r1, #16
 8019714:	4618      	mov	r0, r3
 8019716:	f7fe ff63 	bl	80185e0 <WIZCHIP_WRITE>
         break;
 801971a:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 801971c:	89bb      	ldrh	r3, [r7, #12]
 801971e:	e010      	b.n	8019742 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8019720:	7dfb      	ldrb	r3, [r7, #23]
 8019722:	f003 0308 	and.w	r3, r3, #8
 8019726:	2b00      	cmp	r3, #0
 8019728:	d0db      	beq.n	80196e2 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 801972a:	7bfb      	ldrb	r3, [r7, #15]
 801972c:	009b      	lsls	r3, r3, #2
 801972e:	3301      	adds	r3, #1
 8019730:	00db      	lsls	r3, r3, #3
 8019732:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019736:	2108      	movs	r1, #8
 8019738:	4618      	mov	r0, r3
 801973a:	f7fe ff51 	bl	80185e0 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 801973e:	f06f 030c 	mvn.w	r3, #12
}
 8019742:	4618      	mov	r0, r3
 8019744:	3718      	adds	r7, #24
 8019746:	46bd      	mov	sp, r7
 8019748:	bd80      	pop	{r7, pc}
 801974a:	bf00      	nop
 801974c:	20000960 	.word	0x20000960

08019750 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8019750:	b580      	push	{r7, lr}
 8019752:	b088      	sub	sp, #32
 8019754:	af00      	add	r7, sp, #0
 8019756:	60b9      	str	r1, [r7, #8]
 8019758:	607b      	str	r3, [r7, #4]
 801975a:	4603      	mov	r3, r0
 801975c:	73fb      	strb	r3, [r7, #15]
 801975e:	4613      	mov	r3, r2
 8019760:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8019762:	2300      	movs	r3, #0
 8019764:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8019766:	7bfb      	ldrb	r3, [r7, #15]
 8019768:	2b08      	cmp	r3, #8
 801976a:	d902      	bls.n	8019772 <recvfrom+0x22>
 801976c:	f04f 33ff 	mov.w	r3, #4294967295
 8019770:	e1d4      	b.n	8019b1c <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8019772:	7bfb      	ldrb	r3, [r7, #15]
 8019774:	009b      	lsls	r3, r3, #2
 8019776:	3301      	adds	r3, #1
 8019778:	00db      	lsls	r3, r3, #3
 801977a:	4618      	mov	r0, r3
 801977c:	f7fe fee4 	bl	8018548 <WIZCHIP_READ>
 8019780:	4603      	mov	r3, r0
 8019782:	777b      	strb	r3, [r7, #29]
 8019784:	7f7b      	ldrb	r3, [r7, #29]
 8019786:	f003 030f 	and.w	r3, r3, #15
 801978a:	3b02      	subs	r3, #2
 801978c:	2b02      	cmp	r3, #2
 801978e:	d902      	bls.n	8019796 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8019790:	f06f 0304 	mvn.w	r3, #4
 8019794:	e1c2      	b.n	8019b1c <recvfrom+0x3cc>
         break;
 8019796:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8019798:	89bb      	ldrh	r3, [r7, #12]
 801979a:	2b00      	cmp	r3, #0
 801979c:	d102      	bne.n	80197a4 <recvfrom+0x54>
 801979e:	f06f 030d 	mvn.w	r3, #13
 80197a2:	e1bb      	b.n	8019b1c <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 80197a4:	7bfb      	ldrb	r3, [r7, #15]
 80197a6:	4a88      	ldr	r2, [pc, #544]	; (80199c8 <recvfrom+0x278>)
 80197a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80197ac:	2b00      	cmp	r3, #0
 80197ae:	d128      	bne.n	8019802 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 80197b0:	7bfb      	ldrb	r3, [r7, #15]
 80197b2:	4618      	mov	r0, r3
 80197b4:	f7ff f86d 	bl	8018892 <getSn_RX_RSR>
 80197b8:	4603      	mov	r3, r0
 80197ba:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80197bc:	7bfb      	ldrb	r3, [r7, #15]
 80197be:	009b      	lsls	r3, r3, #2
 80197c0:	3301      	adds	r3, #1
 80197c2:	00db      	lsls	r3, r3, #3
 80197c4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80197c8:	4618      	mov	r0, r3
 80197ca:	f7fe febd 	bl	8018548 <WIZCHIP_READ>
 80197ce:	4603      	mov	r3, r0
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	d102      	bne.n	80197da <recvfrom+0x8a>
 80197d4:	f06f 0303 	mvn.w	r3, #3
 80197d8:	e1a0      	b.n	8019b1c <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 80197da:	4b7c      	ldr	r3, [pc, #496]	; (80199cc <recvfrom+0x27c>)
 80197dc:	881b      	ldrh	r3, [r3, #0]
 80197de:	461a      	mov	r2, r3
 80197e0:	7bfb      	ldrb	r3, [r7, #15]
 80197e2:	fa42 f303 	asr.w	r3, r2, r3
 80197e6:	f003 0301 	and.w	r3, r3, #1
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	d004      	beq.n	80197f8 <recvfrom+0xa8>
 80197ee:	8bfb      	ldrh	r3, [r7, #30]
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d101      	bne.n	80197f8 <recvfrom+0xa8>
 80197f4:	2300      	movs	r3, #0
 80197f6:	e191      	b.n	8019b1c <recvfrom+0x3cc>
         if(pack_len != 0) break;
 80197f8:	8bfb      	ldrh	r3, [r7, #30]
 80197fa:	2b00      	cmp	r3, #0
 80197fc:	d100      	bne.n	8019800 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 80197fe:	e7d7      	b.n	80197b0 <recvfrom+0x60>
         if(pack_len != 0) break;
 8019800:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8019802:	7f7b      	ldrb	r3, [r7, #29]
 8019804:	f003 0307 	and.w	r3, r3, #7
 8019808:	2b04      	cmp	r3, #4
 801980a:	d079      	beq.n	8019900 <recvfrom+0x1b0>
 801980c:	2b04      	cmp	r3, #4
 801980e:	f300 8142 	bgt.w	8019a96 <recvfrom+0x346>
 8019812:	2b02      	cmp	r3, #2
 8019814:	d003      	beq.n	801981e <recvfrom+0xce>
 8019816:	2b03      	cmp	r3, #3
 8019818:	f000 80dc 	beq.w	80199d4 <recvfrom+0x284>
 801981c:	e13b      	b.n	8019a96 <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 801981e:	7bfb      	ldrb	r3, [r7, #15]
 8019820:	4a69      	ldr	r2, [pc, #420]	; (80199c8 <recvfrom+0x278>)
 8019822:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019826:	2b00      	cmp	r3, #0
 8019828:	d152      	bne.n	80198d0 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 801982a:	f107 0114 	add.w	r1, r7, #20
 801982e:	7bfb      	ldrb	r3, [r7, #15]
 8019830:	2208      	movs	r2, #8
 8019832:	4618      	mov	r0, r3
 8019834:	f7ff f8d4 	bl	80189e0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8019838:	7bfb      	ldrb	r3, [r7, #15]
 801983a:	009b      	lsls	r3, r3, #2
 801983c:	3301      	adds	r3, #1
 801983e:	00db      	lsls	r3, r3, #3
 8019840:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019844:	2140      	movs	r1, #64	; 0x40
 8019846:	4618      	mov	r0, r3
 8019848:	f7fe feca 	bl	80185e0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 801984c:	bf00      	nop
 801984e:	7bfb      	ldrb	r3, [r7, #15]
 8019850:	009b      	lsls	r3, r3, #2
 8019852:	3301      	adds	r3, #1
 8019854:	00db      	lsls	r3, r3, #3
 8019856:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801985a:	4618      	mov	r0, r3
 801985c:	f7fe fe74 	bl	8018548 <WIZCHIP_READ>
 8019860:	4603      	mov	r3, r0
 8019862:	2b00      	cmp	r3, #0
 8019864:	d1f3      	bne.n	801984e <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8019866:	7d3a      	ldrb	r2, [r7, #20]
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	3301      	adds	r3, #1
 8019870:	7d7a      	ldrb	r2, [r7, #21]
 8019872:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	3302      	adds	r3, #2
 8019878:	7dba      	ldrb	r2, [r7, #22]
 801987a:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	3303      	adds	r3, #3
 8019880:	7dfa      	ldrb	r2, [r7, #23]
 8019882:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8019884:	7e3b      	ldrb	r3, [r7, #24]
 8019886:	b29a      	uxth	r2, r3
 8019888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801988a:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 801988c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801988e:	881b      	ldrh	r3, [r3, #0]
 8019890:	021b      	lsls	r3, r3, #8
 8019892:	b29a      	uxth	r2, r3
 8019894:	7e7b      	ldrb	r3, [r7, #25]
 8019896:	b29b      	uxth	r3, r3
 8019898:	4413      	add	r3, r2
 801989a:	b29a      	uxth	r2, r3
 801989c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801989e:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 80198a0:	7eba      	ldrb	r2, [r7, #26]
 80198a2:	7bfb      	ldrb	r3, [r7, #15]
 80198a4:	b291      	uxth	r1, r2
 80198a6:	4a48      	ldr	r2, [pc, #288]	; (80199c8 <recvfrom+0x278>)
 80198a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80198ac:	7bfb      	ldrb	r3, [r7, #15]
 80198ae:	4a46      	ldr	r2, [pc, #280]	; (80199c8 <recvfrom+0x278>)
 80198b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80198b4:	021b      	lsls	r3, r3, #8
 80198b6:	b299      	uxth	r1, r3
 80198b8:	7efb      	ldrb	r3, [r7, #27]
 80198ba:	b29a      	uxth	r2, r3
 80198bc:	7bfb      	ldrb	r3, [r7, #15]
 80198be:	440a      	add	r2, r1
 80198c0:	b291      	uxth	r1, r2
 80198c2:	4a41      	ldr	r2, [pc, #260]	; (80199c8 <recvfrom+0x278>)
 80198c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 80198c8:	7bfb      	ldrb	r3, [r7, #15]
 80198ca:	4a41      	ldr	r2, [pc, #260]	; (80199d0 <recvfrom+0x280>)
 80198cc:	2180      	movs	r1, #128	; 0x80
 80198ce:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80198d0:	7bfb      	ldrb	r3, [r7, #15]
 80198d2:	4a3d      	ldr	r2, [pc, #244]	; (80199c8 <recvfrom+0x278>)
 80198d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80198d8:	89ba      	ldrh	r2, [r7, #12]
 80198da:	429a      	cmp	r2, r3
 80198dc:	d202      	bcs.n	80198e4 <recvfrom+0x194>
 80198de:	89bb      	ldrh	r3, [r7, #12]
 80198e0:	83fb      	strh	r3, [r7, #30]
 80198e2:	e004      	b.n	80198ee <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 80198e4:	7bfb      	ldrb	r3, [r7, #15]
 80198e6:	4a38      	ldr	r2, [pc, #224]	; (80199c8 <recvfrom+0x278>)
 80198e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80198ec:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 80198ee:	8bfb      	ldrh	r3, [r7, #30]
 80198f0:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80198f2:	8bfa      	ldrh	r2, [r7, #30]
 80198f4:	7bfb      	ldrb	r3, [r7, #15]
 80198f6:	68b9      	ldr	r1, [r7, #8]
 80198f8:	4618      	mov	r0, r3
 80198fa:	f7ff f871 	bl	80189e0 <wiz_recv_data>
			break;
 80198fe:	e0d6      	b.n	8019aae <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8019900:	7bfb      	ldrb	r3, [r7, #15]
 8019902:	4a31      	ldr	r2, [pc, #196]	; (80199c8 <recvfrom+0x278>)
 8019904:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019908:	2b00      	cmp	r3, #0
 801990a:	d146      	bne.n	801999a <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 801990c:	f107 0114 	add.w	r1, r7, #20
 8019910:	7bfb      	ldrb	r3, [r7, #15]
 8019912:	2202      	movs	r2, #2
 8019914:	4618      	mov	r0, r3
 8019916:	f7ff f863 	bl	80189e0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 801991a:	7bfb      	ldrb	r3, [r7, #15]
 801991c:	009b      	lsls	r3, r3, #2
 801991e:	3301      	adds	r3, #1
 8019920:	00db      	lsls	r3, r3, #3
 8019922:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019926:	2140      	movs	r1, #64	; 0x40
 8019928:	4618      	mov	r0, r3
 801992a:	f7fe fe59 	bl	80185e0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 801992e:	bf00      	nop
 8019930:	7bfb      	ldrb	r3, [r7, #15]
 8019932:	009b      	lsls	r3, r3, #2
 8019934:	3301      	adds	r3, #1
 8019936:	00db      	lsls	r3, r3, #3
 8019938:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801993c:	4618      	mov	r0, r3
 801993e:	f7fe fe03 	bl	8018548 <WIZCHIP_READ>
 8019942:	4603      	mov	r3, r0
 8019944:	2b00      	cmp	r3, #0
 8019946:	d1f3      	bne.n	8019930 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8019948:	7d3a      	ldrb	r2, [r7, #20]
 801994a:	7bfb      	ldrb	r3, [r7, #15]
 801994c:	b291      	uxth	r1, r2
 801994e:	4a1e      	ldr	r2, [pc, #120]	; (80199c8 <recvfrom+0x278>)
 8019950:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8019954:	7bfb      	ldrb	r3, [r7, #15]
 8019956:	4a1c      	ldr	r2, [pc, #112]	; (80199c8 <recvfrom+0x278>)
 8019958:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801995c:	021b      	lsls	r3, r3, #8
 801995e:	b29a      	uxth	r2, r3
 8019960:	7d7b      	ldrb	r3, [r7, #21]
 8019962:	b29b      	uxth	r3, r3
 8019964:	4413      	add	r3, r2
 8019966:	b29a      	uxth	r2, r3
 8019968:	7bfb      	ldrb	r3, [r7, #15]
 801996a:	3a02      	subs	r2, #2
 801996c:	b291      	uxth	r1, r2
 801996e:	4a16      	ldr	r2, [pc, #88]	; (80199c8 <recvfrom+0x278>)
 8019970:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8019974:	7bfb      	ldrb	r3, [r7, #15]
 8019976:	4a14      	ldr	r2, [pc, #80]	; (80199c8 <recvfrom+0x278>)
 8019978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801997c:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8019980:	4293      	cmp	r3, r2
 8019982:	d906      	bls.n	8019992 <recvfrom+0x242>
   			{
   			   close(sn);
 8019984:	7bfb      	ldrb	r3, [r7, #15]
 8019986:	4618      	mov	r0, r3
 8019988:	f7ff f9e2 	bl	8018d50 <close>
   			   return SOCKFATAL_PACKLEN;
 801998c:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8019990:	e0c4      	b.n	8019b1c <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8019992:	7bfb      	ldrb	r3, [r7, #15]
 8019994:	4a0e      	ldr	r2, [pc, #56]	; (80199d0 <recvfrom+0x280>)
 8019996:	2180      	movs	r1, #128	; 0x80
 8019998:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 801999a:	7bfb      	ldrb	r3, [r7, #15]
 801999c:	4a0a      	ldr	r2, [pc, #40]	; (80199c8 <recvfrom+0x278>)
 801999e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80199a2:	89ba      	ldrh	r2, [r7, #12]
 80199a4:	429a      	cmp	r2, r3
 80199a6:	d202      	bcs.n	80199ae <recvfrom+0x25e>
 80199a8:	89bb      	ldrh	r3, [r7, #12]
 80199aa:	83fb      	strh	r3, [r7, #30]
 80199ac:	e004      	b.n	80199b8 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 80199ae:	7bfb      	ldrb	r3, [r7, #15]
 80199b0:	4a05      	ldr	r2, [pc, #20]	; (80199c8 <recvfrom+0x278>)
 80199b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80199b6:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 80199b8:	8bfa      	ldrh	r2, [r7, #30]
 80199ba:	7bfb      	ldrb	r3, [r7, #15]
 80199bc:	68b9      	ldr	r1, [r7, #8]
 80199be:	4618      	mov	r0, r3
 80199c0:	f7ff f80e 	bl	80189e0 <wiz_recv_data>
		   break;
 80199c4:	e073      	b.n	8019aae <recvfrom+0x35e>
 80199c6:	bf00      	nop
 80199c8:	20000964 	.word	0x20000964
 80199cc:	20000960 	.word	0x20000960
 80199d0:	20000974 	.word	0x20000974
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 80199d4:	7bfb      	ldrb	r3, [r7, #15]
 80199d6:	4a53      	ldr	r2, [pc, #332]	; (8019b24 <recvfrom+0x3d4>)
 80199d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80199dc:	2b00      	cmp	r3, #0
 80199de:	d144      	bne.n	8019a6a <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 80199e0:	f107 0114 	add.w	r1, r7, #20
 80199e4:	7bfb      	ldrb	r3, [r7, #15]
 80199e6:	2206      	movs	r2, #6
 80199e8:	4618      	mov	r0, r3
 80199ea:	f7fe fff9 	bl	80189e0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80199ee:	7bfb      	ldrb	r3, [r7, #15]
 80199f0:	009b      	lsls	r3, r3, #2
 80199f2:	3301      	adds	r3, #1
 80199f4:	00db      	lsls	r3, r3, #3
 80199f6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80199fa:	2140      	movs	r1, #64	; 0x40
 80199fc:	4618      	mov	r0, r3
 80199fe:	f7fe fdef 	bl	80185e0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8019a02:	bf00      	nop
 8019a04:	7bfb      	ldrb	r3, [r7, #15]
 8019a06:	009b      	lsls	r3, r3, #2
 8019a08:	3301      	adds	r3, #1
 8019a0a:	00db      	lsls	r3, r3, #3
 8019a0c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019a10:	4618      	mov	r0, r3
 8019a12:	f7fe fd99 	bl	8018548 <WIZCHIP_READ>
 8019a16:	4603      	mov	r3, r0
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d1f3      	bne.n	8019a04 <recvfrom+0x2b4>
   			addr[0] = head[0];
 8019a1c:	7d3a      	ldrb	r2, [r7, #20]
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	3301      	adds	r3, #1
 8019a26:	7d7a      	ldrb	r2, [r7, #21]
 8019a28:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	3302      	adds	r3, #2
 8019a2e:	7dba      	ldrb	r2, [r7, #22]
 8019a30:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	3303      	adds	r3, #3
 8019a36:	7dfa      	ldrb	r2, [r7, #23]
 8019a38:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8019a3a:	7e3a      	ldrb	r2, [r7, #24]
 8019a3c:	7bfb      	ldrb	r3, [r7, #15]
 8019a3e:	b291      	uxth	r1, r2
 8019a40:	4a38      	ldr	r2, [pc, #224]	; (8019b24 <recvfrom+0x3d4>)
 8019a42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8019a46:	7bfb      	ldrb	r3, [r7, #15]
 8019a48:	4a36      	ldr	r2, [pc, #216]	; (8019b24 <recvfrom+0x3d4>)
 8019a4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019a4e:	021b      	lsls	r3, r3, #8
 8019a50:	b299      	uxth	r1, r3
 8019a52:	7e7b      	ldrb	r3, [r7, #25]
 8019a54:	b29a      	uxth	r2, r3
 8019a56:	7bfb      	ldrb	r3, [r7, #15]
 8019a58:	440a      	add	r2, r1
 8019a5a:	b291      	uxth	r1, r2
 8019a5c:	4a31      	ldr	r2, [pc, #196]	; (8019b24 <recvfrom+0x3d4>)
 8019a5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8019a62:	7bfb      	ldrb	r3, [r7, #15]
 8019a64:	4a30      	ldr	r2, [pc, #192]	; (8019b28 <recvfrom+0x3d8>)
 8019a66:	2180      	movs	r1, #128	; 0x80
 8019a68:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8019a6a:	7bfb      	ldrb	r3, [r7, #15]
 8019a6c:	4a2d      	ldr	r2, [pc, #180]	; (8019b24 <recvfrom+0x3d4>)
 8019a6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019a72:	89ba      	ldrh	r2, [r7, #12]
 8019a74:	429a      	cmp	r2, r3
 8019a76:	d202      	bcs.n	8019a7e <recvfrom+0x32e>
 8019a78:	89bb      	ldrh	r3, [r7, #12]
 8019a7a:	83fb      	strh	r3, [r7, #30]
 8019a7c:	e004      	b.n	8019a88 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 8019a7e:	7bfb      	ldrb	r3, [r7, #15]
 8019a80:	4a28      	ldr	r2, [pc, #160]	; (8019b24 <recvfrom+0x3d4>)
 8019a82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019a86:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8019a88:	8bfa      	ldrh	r2, [r7, #30]
 8019a8a:	7bfb      	ldrb	r3, [r7, #15]
 8019a8c:	68b9      	ldr	r1, [r7, #8]
 8019a8e:	4618      	mov	r0, r3
 8019a90:	f7fe ffa6 	bl	80189e0 <wiz_recv_data>
			break;
 8019a94:	e00b      	b.n	8019aae <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8019a96:	8bfa      	ldrh	r2, [r7, #30]
 8019a98:	7bfb      	ldrb	r3, [r7, #15]
 8019a9a:	4611      	mov	r1, r2
 8019a9c:	4618      	mov	r0, r3
 8019a9e:	f7fe fffb 	bl	8018a98 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8019aa2:	7bfb      	ldrb	r3, [r7, #15]
 8019aa4:	491f      	ldr	r1, [pc, #124]	; (8019b24 <recvfrom+0x3d4>)
 8019aa6:	8bfa      	ldrh	r2, [r7, #30]
 8019aa8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8019aac:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8019aae:	7bfb      	ldrb	r3, [r7, #15]
 8019ab0:	009b      	lsls	r3, r3, #2
 8019ab2:	3301      	adds	r3, #1
 8019ab4:	00db      	lsls	r3, r3, #3
 8019ab6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019aba:	2140      	movs	r1, #64	; 0x40
 8019abc:	4618      	mov	r0, r3
 8019abe:	f7fe fd8f 	bl	80185e0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8019ac2:	bf00      	nop
 8019ac4:	7bfb      	ldrb	r3, [r7, #15]
 8019ac6:	009b      	lsls	r3, r3, #2
 8019ac8:	3301      	adds	r3, #1
 8019aca:	00db      	lsls	r3, r3, #3
 8019acc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019ad0:	4618      	mov	r0, r3
 8019ad2:	f7fe fd39 	bl	8018548 <WIZCHIP_READ>
 8019ad6:	4603      	mov	r3, r0
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d1f3      	bne.n	8019ac4 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8019adc:	7bfb      	ldrb	r3, [r7, #15]
 8019ade:	4a11      	ldr	r2, [pc, #68]	; (8019b24 <recvfrom+0x3d4>)
 8019ae0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8019ae4:	7bfb      	ldrb	r3, [r7, #15]
 8019ae6:	8bfa      	ldrh	r2, [r7, #30]
 8019ae8:	1a8a      	subs	r2, r1, r2
 8019aea:	b291      	uxth	r1, r2
 8019aec:	4a0d      	ldr	r2, [pc, #52]	; (8019b24 <recvfrom+0x3d4>)
 8019aee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8019af2:	7bfb      	ldrb	r3, [r7, #15]
 8019af4:	4a0b      	ldr	r2, [pc, #44]	; (8019b24 <recvfrom+0x3d4>)
 8019af6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d009      	beq.n	8019b12 <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8019afe:	7bfb      	ldrb	r3, [r7, #15]
 8019b00:	4a09      	ldr	r2, [pc, #36]	; (8019b28 <recvfrom+0x3d8>)
 8019b02:	5cd2      	ldrb	r2, [r2, r3]
 8019b04:	7bfb      	ldrb	r3, [r7, #15]
 8019b06:	f042 0201 	orr.w	r2, r2, #1
 8019b0a:	b2d1      	uxtb	r1, r2
 8019b0c:	4a06      	ldr	r2, [pc, #24]	; (8019b28 <recvfrom+0x3d8>)
 8019b0e:	54d1      	strb	r1, [r2, r3]
 8019b10:	e003      	b.n	8019b1a <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8019b12:	7bfb      	ldrb	r3, [r7, #15]
 8019b14:	4a04      	ldr	r2, [pc, #16]	; (8019b28 <recvfrom+0x3d8>)
 8019b16:	2100      	movs	r1, #0
 8019b18:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8019b1a:	8bfb      	ldrh	r3, [r7, #30]
}
 8019b1c:	4618      	mov	r0, r3
 8019b1e:	3720      	adds	r7, #32
 8019b20:	46bd      	mov	sp, r7
 8019b22:	bd80      	pop	{r7, pc}
 8019b24:	20000964 	.word	0x20000964
 8019b28:	20000974 	.word	0x20000974

08019b2c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8019b2c:	b480      	push	{r7}
 8019b2e:	af00      	add	r7, sp, #0
 8019b30:	bf00      	nop
 8019b32:	46bd      	mov	sp, r7
 8019b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b38:	4770      	bx	lr

08019b3a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8019b3a:	b480      	push	{r7}
 8019b3c:	af00      	add	r7, sp, #0
 8019b3e:	bf00      	nop
 8019b40:	46bd      	mov	sp, r7
 8019b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b46:	4770      	bx	lr

08019b48 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8019b48:	b480      	push	{r7}
 8019b4a:	af00      	add	r7, sp, #0
 8019b4c:	bf00      	nop
 8019b4e:	46bd      	mov	sp, r7
 8019b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b54:	4770      	bx	lr

08019b56 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8019b56:	b480      	push	{r7}
 8019b58:	af00      	add	r7, sp, #0
 8019b5a:	bf00      	nop
 8019b5c:	46bd      	mov	sp, r7
 8019b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b62:	4770      	bx	lr

08019b64 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8019b64:	b480      	push	{r7}
 8019b66:	b083      	sub	sp, #12
 8019b68:	af00      	add	r7, sp, #0
 8019b6a:	6078      	str	r0, [r7, #4]
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	781b      	ldrb	r3, [r3, #0]
 8019b70:	b2db      	uxtb	r3, r3
 8019b72:	4618      	mov	r0, r3
 8019b74:	370c      	adds	r7, #12
 8019b76:	46bd      	mov	sp, r7
 8019b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b7c:	4770      	bx	lr

08019b7e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8019b7e:	b480      	push	{r7}
 8019b80:	b083      	sub	sp, #12
 8019b82:	af00      	add	r7, sp, #0
 8019b84:	6078      	str	r0, [r7, #4]
 8019b86:	460b      	mov	r3, r1
 8019b88:	70fb      	strb	r3, [r7, #3]
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	78fa      	ldrb	r2, [r7, #3]
 8019b8e:	701a      	strb	r2, [r3, #0]
 8019b90:	bf00      	nop
 8019b92:	370c      	adds	r7, #12
 8019b94:	46bd      	mov	sp, r7
 8019b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b9a:	4770      	bx	lr

08019b9c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8019b9c:	b480      	push	{r7}
 8019b9e:	af00      	add	r7, sp, #0
 8019ba0:	2300      	movs	r3, #0
 8019ba2:	4618      	mov	r0, r3
 8019ba4:	46bd      	mov	sp, r7
 8019ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019baa:	4770      	bx	lr

08019bac <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8019bac:	b480      	push	{r7}
 8019bae:	b083      	sub	sp, #12
 8019bb0:	af00      	add	r7, sp, #0
 8019bb2:	4603      	mov	r3, r0
 8019bb4:	71fb      	strb	r3, [r7, #7]
 8019bb6:	bf00      	nop
 8019bb8:	370c      	adds	r7, #12
 8019bba:	46bd      	mov	sp, r7
 8019bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bc0:	4770      	bx	lr
	...

08019bc4 <reg_wizchip_cris_cbfunc>:

static uint8_t    _DNS_[4];      // DNS server ip address
static dhcp_mode  _DHCP_;        // DHCP mode

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 8019bc4:	b480      	push	{r7}
 8019bc6:	b083      	sub	sp, #12
 8019bc8:	af00      	add	r7, sp, #0
 8019bca:	6078      	str	r0, [r7, #4]
 8019bcc:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 8019bce:	687b      	ldr	r3, [r7, #4]
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	d002      	beq.n	8019bda <reg_wizchip_cris_cbfunc+0x16>
 8019bd4:	683b      	ldr	r3, [r7, #0]
 8019bd6:	2b00      	cmp	r3, #0
 8019bd8:	d106      	bne.n	8019be8 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 8019bda:	4b0a      	ldr	r3, [pc, #40]	; (8019c04 <reg_wizchip_cris_cbfunc+0x40>)
 8019bdc:	4a0a      	ldr	r2, [pc, #40]	; (8019c08 <reg_wizchip_cris_cbfunc+0x44>)
 8019bde:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 8019be0:	4b08      	ldr	r3, [pc, #32]	; (8019c04 <reg_wizchip_cris_cbfunc+0x40>)
 8019be2:	4a0a      	ldr	r2, [pc, #40]	; (8019c0c <reg_wizchip_cris_cbfunc+0x48>)
 8019be4:	611a      	str	r2, [r3, #16]
 8019be6:	e006      	b.n	8019bf6 <reg_wizchip_cris_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 8019be8:	4a06      	ldr	r2, [pc, #24]	; (8019c04 <reg_wizchip_cris_cbfunc+0x40>)
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	60d3      	str	r3, [r2, #12]
      WIZCHIP.CRIS._exit  = cris_ex;
 8019bee:	4a05      	ldr	r2, [pc, #20]	; (8019c04 <reg_wizchip_cris_cbfunc+0x40>)
 8019bf0:	683b      	ldr	r3, [r7, #0]
 8019bf2:	6113      	str	r3, [r2, #16]
   }
}
 8019bf4:	bf00      	nop
 8019bf6:	bf00      	nop
 8019bf8:	370c      	adds	r7, #12
 8019bfa:	46bd      	mov	sp, r7
 8019bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c00:	4770      	bx	lr
 8019c02:	bf00      	nop
 8019c04:	200000c4 	.word	0x200000c4
 8019c08:	08019b2d 	.word	0x08019b2d
 8019c0c:	08019b3b 	.word	0x08019b3b

08019c10 <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8019c10:	b480      	push	{r7}
 8019c12:	b083      	sub	sp, #12
 8019c14:	af00      	add	r7, sp, #0
 8019c16:	6078      	str	r0, [r7, #4]
 8019c18:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	2b00      	cmp	r3, #0
 8019c1e:	d002      	beq.n	8019c26 <reg_wizchip_cs_cbfunc+0x16>
 8019c20:	683b      	ldr	r3, [r7, #0]
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d106      	bne.n	8019c34 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8019c26:	4b0a      	ldr	r3, [pc, #40]	; (8019c50 <reg_wizchip_cs_cbfunc+0x40>)
 8019c28:	4a0a      	ldr	r2, [pc, #40]	; (8019c54 <reg_wizchip_cs_cbfunc+0x44>)
 8019c2a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8019c2c:	4b08      	ldr	r3, [pc, #32]	; (8019c50 <reg_wizchip_cs_cbfunc+0x40>)
 8019c2e:	4a0a      	ldr	r2, [pc, #40]	; (8019c58 <reg_wizchip_cs_cbfunc+0x48>)
 8019c30:	619a      	str	r2, [r3, #24]
 8019c32:	e006      	b.n	8019c42 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8019c34:	4a06      	ldr	r2, [pc, #24]	; (8019c50 <reg_wizchip_cs_cbfunc+0x40>)
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8019c3a:	4a05      	ldr	r2, [pc, #20]	; (8019c50 <reg_wizchip_cs_cbfunc+0x40>)
 8019c3c:	683b      	ldr	r3, [r7, #0]
 8019c3e:	6193      	str	r3, [r2, #24]
   }
}
 8019c40:	bf00      	nop
 8019c42:	bf00      	nop
 8019c44:	370c      	adds	r7, #12
 8019c46:	46bd      	mov	sp, r7
 8019c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c4c:	4770      	bx	lr
 8019c4e:	bf00      	nop
 8019c50:	200000c4 	.word	0x200000c4
 8019c54:	08019b49 	.word	0x08019b49
 8019c58:	08019b57 	.word	0x08019b57

08019c5c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8019c5c:	b480      	push	{r7}
 8019c5e:	b083      	sub	sp, #12
 8019c60:	af00      	add	r7, sp, #0
 8019c62:	6078      	str	r0, [r7, #4]
 8019c64:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8019c66:	bf00      	nop
 8019c68:	4b0f      	ldr	r3, [pc, #60]	; (8019ca8 <reg_wizchip_spi_cbfunc+0x4c>)
 8019c6a:	881b      	ldrh	r3, [r3, #0]
 8019c6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	d0f9      	beq.n	8019c68 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	d002      	beq.n	8019c80 <reg_wizchip_spi_cbfunc+0x24>
 8019c7a:	683b      	ldr	r3, [r7, #0]
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	d106      	bne.n	8019c8e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8019c80:	4b09      	ldr	r3, [pc, #36]	; (8019ca8 <reg_wizchip_spi_cbfunc+0x4c>)
 8019c82:	4a0a      	ldr	r2, [pc, #40]	; (8019cac <reg_wizchip_spi_cbfunc+0x50>)
 8019c84:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8019c86:	4b08      	ldr	r3, [pc, #32]	; (8019ca8 <reg_wizchip_spi_cbfunc+0x4c>)
 8019c88:	4a09      	ldr	r2, [pc, #36]	; (8019cb0 <reg_wizchip_spi_cbfunc+0x54>)
 8019c8a:	621a      	str	r2, [r3, #32]
 8019c8c:	e006      	b.n	8019c9c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8019c8e:	4a06      	ldr	r2, [pc, #24]	; (8019ca8 <reg_wizchip_spi_cbfunc+0x4c>)
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8019c94:	4a04      	ldr	r2, [pc, #16]	; (8019ca8 <reg_wizchip_spi_cbfunc+0x4c>)
 8019c96:	683b      	ldr	r3, [r7, #0]
 8019c98:	6213      	str	r3, [r2, #32]
   }
}
 8019c9a:	bf00      	nop
 8019c9c:	bf00      	nop
 8019c9e:	370c      	adds	r7, #12
 8019ca0:	46bd      	mov	sp, r7
 8019ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ca6:	4770      	bx	lr
 8019ca8:	200000c4 	.word	0x200000c4
 8019cac:	08019b9d 	.word	0x08019b9d
 8019cb0:	08019bad 	.word	0x08019bad

08019cb4 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8019cb4:	b590      	push	{r4, r7, lr}
 8019cb6:	b087      	sub	sp, #28
 8019cb8:	af00      	add	r7, sp, #0
 8019cba:	4603      	mov	r3, r0
 8019cbc:	6039      	str	r1, [r7, #0]
 8019cbe:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8019cc0:	2300      	movs	r3, #0
 8019cc2:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8019cc4:	2300      	movs	r3, #0
 8019cc6:	60fb      	str	r3, [r7, #12]
 8019cc8:	2300      	movs	r3, #0
 8019cca:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8019ccc:	79fb      	ldrb	r3, [r7, #7]
 8019cce:	2b0f      	cmp	r3, #15
 8019cd0:	f200 80c7 	bhi.w	8019e62 <ctlwizchip+0x1ae>
 8019cd4:	a201      	add	r2, pc, #4	; (adr r2, 8019cdc <ctlwizchip+0x28>)
 8019cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019cda:	bf00      	nop
 8019cdc:	08019d1d 	.word	0x08019d1d
 8019ce0:	08019d23 	.word	0x08019d23
 8019ce4:	08019d4f 	.word	0x08019d4f
 8019ce8:	08019d43 	.word	0x08019d43
 8019cec:	08019d5d 	.word	0x08019d5d
 8019cf0:	08019d69 	.word	0x08019d69
 8019cf4:	08019d77 	.word	0x08019d77
 8019cf8:	08019d9d 	.word	0x08019d9d
 8019cfc:	08019dc3 	.word	0x08019dc3
 8019d00:	08019e07 	.word	0x08019e07
 8019d04:	08019e0d 	.word	0x08019e0d
 8019d08:	08019e15 	.word	0x08019e15
 8019d0c:	08019e69 	.word	0x08019e69
 8019d10:	08019e1d 	.word	0x08019e1d
 8019d14:	08019e2b 	.word	0x08019e2b
 8019d18:	08019e47 	.word	0x08019e47
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8019d1c:	f000 f8ea 	bl	8019ef4 <wizchip_sw_reset>
         break;
 8019d20:	e0a3      	b.n	8019e6a <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8019d22:	683b      	ldr	r3, [r7, #0]
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	d004      	beq.n	8019d32 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8019d28:	683b      	ldr	r3, [r7, #0]
 8019d2a:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8019d2c:	68fb      	ldr	r3, [r7, #12]
 8019d2e:	3308      	adds	r3, #8
 8019d30:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8019d32:	68fb      	ldr	r3, [r7, #12]
 8019d34:	693a      	ldr	r2, [r7, #16]
 8019d36:	4611      	mov	r1, r2
 8019d38:	4618      	mov	r0, r3
 8019d3a:	f000 f927 	bl	8019f8c <wizchip_init>
 8019d3e:	4603      	mov	r3, r0
 8019d40:	e094      	b.n	8019e6c <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8019d42:	683b      	ldr	r3, [r7, #0]
 8019d44:	881b      	ldrh	r3, [r3, #0]
 8019d46:	4618      	mov	r0, r3
 8019d48:	f000 f9ac 	bl	801a0a4 <wizchip_clrinterrupt>
         break;
 8019d4c:	e08d      	b.n	8019e6a <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8019d4e:	f000 f9dd 	bl	801a10c <wizchip_getinterrupt>
 8019d52:	4603      	mov	r3, r0
 8019d54:	461a      	mov	r2, r3
 8019d56:	683b      	ldr	r3, [r7, #0]
 8019d58:	801a      	strh	r2, [r3, #0]
         break;
 8019d5a:	e086      	b.n	8019e6a <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8019d5c:	683b      	ldr	r3, [r7, #0]
 8019d5e:	881b      	ldrh	r3, [r3, #0]
 8019d60:	4618      	mov	r0, r3
 8019d62:	f000 f9f8 	bl	801a156 <wizchip_setinterruptmask>
         break;         
 8019d66:	e080      	b.n	8019e6a <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8019d68:	f000 fa10 	bl	801a18c <wizchip_getinterruptmask>
 8019d6c:	4603      	mov	r3, r0
 8019d6e:	461a      	mov	r2, r3
 8019d70:	683b      	ldr	r3, [r7, #0]
 8019d72:	801a      	strh	r2, [r3, #0]
         break;
 8019d74:	e079      	b.n	8019e6a <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8019d76:	683b      	ldr	r3, [r7, #0]
 8019d78:	881b      	ldrh	r3, [r3, #0]
 8019d7a:	0a1b      	lsrs	r3, r3, #8
 8019d7c:	b29b      	uxth	r3, r3
 8019d7e:	b2db      	uxtb	r3, r3
 8019d80:	4619      	mov	r1, r3
 8019d82:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8019d86:	f7fe fc2b 	bl	80185e0 <WIZCHIP_WRITE>
 8019d8a:	683b      	ldr	r3, [r7, #0]
 8019d8c:	881b      	ldrh	r3, [r3, #0]
 8019d8e:	b2db      	uxtb	r3, r3
 8019d90:	4619      	mov	r1, r3
 8019d92:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8019d96:	f7fe fc23 	bl	80185e0 <WIZCHIP_WRITE>
         break;
 8019d9a:	e066      	b.n	8019e6a <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8019d9c:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8019da0:	f7fe fbd2 	bl	8018548 <WIZCHIP_READ>
 8019da4:	4603      	mov	r3, r0
 8019da6:	b29b      	uxth	r3, r3
 8019da8:	021b      	lsls	r3, r3, #8
 8019daa:	b29c      	uxth	r4, r3
 8019dac:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8019db0:	f7fe fbca 	bl	8018548 <WIZCHIP_READ>
 8019db4:	4603      	mov	r3, r0
 8019db6:	b29b      	uxth	r3, r3
 8019db8:	4423      	add	r3, r4
 8019dba:	b29a      	uxth	r2, r3
 8019dbc:	683b      	ldr	r3, [r7, #0]
 8019dbe:	801a      	strh	r2, [r3, #0]
         break;
 8019dc0:	e053      	b.n	8019e6a <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8019dc2:	4b2c      	ldr	r3, [pc, #176]	; (8019e74 <ctlwizchip+0x1c0>)
 8019dc4:	789a      	ldrb	r2, [r3, #2]
 8019dc6:	683b      	ldr	r3, [r7, #0]
 8019dc8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8019dca:	683b      	ldr	r3, [r7, #0]
 8019dcc:	3301      	adds	r3, #1
 8019dce:	4a29      	ldr	r2, [pc, #164]	; (8019e74 <ctlwizchip+0x1c0>)
 8019dd0:	78d2      	ldrb	r2, [r2, #3]
 8019dd2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8019dd4:	683b      	ldr	r3, [r7, #0]
 8019dd6:	3302      	adds	r3, #2
 8019dd8:	4a26      	ldr	r2, [pc, #152]	; (8019e74 <ctlwizchip+0x1c0>)
 8019dda:	7912      	ldrb	r2, [r2, #4]
 8019ddc:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8019dde:	683b      	ldr	r3, [r7, #0]
 8019de0:	3303      	adds	r3, #3
 8019de2:	4a24      	ldr	r2, [pc, #144]	; (8019e74 <ctlwizchip+0x1c0>)
 8019de4:	7952      	ldrb	r2, [r2, #5]
 8019de6:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8019de8:	683b      	ldr	r3, [r7, #0]
 8019dea:	3304      	adds	r3, #4
 8019dec:	4a21      	ldr	r2, [pc, #132]	; (8019e74 <ctlwizchip+0x1c0>)
 8019dee:	7992      	ldrb	r2, [r2, #6]
 8019df0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8019df2:	683b      	ldr	r3, [r7, #0]
 8019df4:	3305      	adds	r3, #5
 8019df6:	4a1f      	ldr	r2, [pc, #124]	; (8019e74 <ctlwizchip+0x1c0>)
 8019df8:	79d2      	ldrb	r2, [r2, #7]
 8019dfa:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8019dfc:	683b      	ldr	r3, [r7, #0]
 8019dfe:	3306      	adds	r3, #6
 8019e00:	2200      	movs	r2, #0
 8019e02:	701a      	strb	r2, [r3, #0]
         break;
 8019e04:	e031      	b.n	8019e6a <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8019e06:	f000 fa13 	bl	801a230 <wizphy_reset>
         break;
 8019e0a:	e02e      	b.n	8019e6a <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8019e0c:	6838      	ldr	r0, [r7, #0]
 8019e0e:	f000 fa36 	bl	801a27e <wizphy_setphyconf>
         break;
 8019e12:	e02a      	b.n	8019e6a <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8019e14:	6838      	ldr	r0, [r7, #0]
 8019e16:	f000 fa75 	bl	801a304 <wizphy_getphyconf>
         break;
 8019e1a:	e026      	b.n	8019e6a <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8019e1c:	683b      	ldr	r3, [r7, #0]
 8019e1e:	781b      	ldrb	r3, [r3, #0]
 8019e20:	4618      	mov	r0, r3
 8019e22:	f000 faf7 	bl	801a414 <wizphy_setphypmode>
 8019e26:	4603      	mov	r3, r0
 8019e28:	e020      	b.n	8019e6c <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8019e2a:	f000 f9e8 	bl	801a1fe <wizphy_getphypmode>
 8019e2e:	4603      	mov	r3, r0
 8019e30:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8019e32:	7dfb      	ldrb	r3, [r7, #23]
 8019e34:	2bff      	cmp	r3, #255	; 0xff
 8019e36:	d102      	bne.n	8019e3e <ctlwizchip+0x18a>
 8019e38:	f04f 33ff 	mov.w	r3, #4294967295
 8019e3c:	e016      	b.n	8019e6c <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8019e3e:	683b      	ldr	r3, [r7, #0]
 8019e40:	7dfa      	ldrb	r2, [r7, #23]
 8019e42:	701a      	strb	r2, [r3, #0]
         break;
 8019e44:	e011      	b.n	8019e6a <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8019e46:	f000 f9c4 	bl	801a1d2 <wizphy_getphylink>
 8019e4a:	4603      	mov	r3, r0
 8019e4c:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8019e4e:	7dfb      	ldrb	r3, [r7, #23]
 8019e50:	2bff      	cmp	r3, #255	; 0xff
 8019e52:	d102      	bne.n	8019e5a <ctlwizchip+0x1a6>
 8019e54:	f04f 33ff 	mov.w	r3, #4294967295
 8019e58:	e008      	b.n	8019e6c <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8019e5a:	683b      	ldr	r3, [r7, #0]
 8019e5c:	7dfa      	ldrb	r2, [r7, #23]
 8019e5e:	701a      	strb	r2, [r3, #0]
         break;
 8019e60:	e003      	b.n	8019e6a <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 8019e62:	f04f 33ff 	mov.w	r3, #4294967295
 8019e66:	e001      	b.n	8019e6c <ctlwizchip+0x1b8>
         break;
 8019e68:	bf00      	nop
   }
   return 0;
 8019e6a:	2300      	movs	r3, #0
}
 8019e6c:	4618      	mov	r0, r3
 8019e6e:	371c      	adds	r7, #28
 8019e70:	46bd      	mov	sp, r7
 8019e72:	bd90      	pop	{r4, r7, pc}
 8019e74:	200000c4 	.word	0x200000c4

08019e78 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8019e78:	b580      	push	{r7, lr}
 8019e7a:	b082      	sub	sp, #8
 8019e7c:	af00      	add	r7, sp, #0
 8019e7e:	4603      	mov	r3, r0
 8019e80:	6039      	str	r1, [r7, #0]
 8019e82:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8019e84:	79fb      	ldrb	r3, [r7, #7]
 8019e86:	2b05      	cmp	r3, #5
 8019e88:	d82c      	bhi.n	8019ee4 <ctlnetwork+0x6c>
 8019e8a:	a201      	add	r2, pc, #4	; (adr r2, 8019e90 <ctlnetwork+0x18>)
 8019e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e90:	08019ea9 	.word	0x08019ea9
 8019e94:	08019eb1 	.word	0x08019eb1
 8019e98:	08019eb9 	.word	0x08019eb9
 8019e9c:	08019ec7 	.word	0x08019ec7
 8019ea0:	08019ed5 	.word	0x08019ed5
 8019ea4:	08019edd 	.word	0x08019edd
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8019ea8:	6838      	ldr	r0, [r7, #0]
 8019eaa:	f000 fafd 	bl	801a4a8 <wizchip_setnetinfo>
         break;
 8019eae:	e01c      	b.n	8019eea <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8019eb0:	6838      	ldr	r0, [r7, #0]
 8019eb2:	f000 fb39 	bl	801a528 <wizchip_getnetinfo>
         break;
 8019eb6:	e018      	b.n	8019eea <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8019eb8:	683b      	ldr	r3, [r7, #0]
 8019eba:	781b      	ldrb	r3, [r3, #0]
 8019ebc:	4618      	mov	r0, r3
 8019ebe:	f000 fb73 	bl	801a5a8 <wizchip_setnetmode>
 8019ec2:	4603      	mov	r3, r0
 8019ec4:	e012      	b.n	8019eec <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8019ec6:	f000 fb91 	bl	801a5ec <wizchip_getnetmode>
 8019eca:	4603      	mov	r3, r0
 8019ecc:	461a      	mov	r2, r3
 8019ece:	683b      	ldr	r3, [r7, #0]
 8019ed0:	701a      	strb	r2, [r3, #0]
         break;
 8019ed2:	e00a      	b.n	8019eea <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8019ed4:	6838      	ldr	r0, [r7, #0]
 8019ed6:	f000 fb91 	bl	801a5fc <wizchip_settimeout>
         break;
 8019eda:	e006      	b.n	8019eea <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8019edc:	6838      	ldr	r0, [r7, #0]
 8019ede:	f000 fbae 	bl	801a63e <wizchip_gettimeout>
         break;
 8019ee2:	e002      	b.n	8019eea <ctlnetwork+0x72>
      default:
         return -1;
 8019ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8019ee8:	e000      	b.n	8019eec <ctlnetwork+0x74>
   }
   return 0;
 8019eea:	2300      	movs	r3, #0
}
 8019eec:	4618      	mov	r0, r3
 8019eee:	3708      	adds	r7, #8
 8019ef0:	46bd      	mov	sp, r7
 8019ef2:	bd80      	pop	{r7, pc}

08019ef4 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8019ef4:	b580      	push	{r7, lr}
 8019ef6:	b086      	sub	sp, #24
 8019ef8:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8019efa:	1d3b      	adds	r3, r7, #4
 8019efc:	2206      	movs	r2, #6
 8019efe:	4619      	mov	r1, r3
 8019f00:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8019f04:	f7fe fbba 	bl	801867c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8019f08:	f107 0314 	add.w	r3, r7, #20
 8019f0c:	2204      	movs	r2, #4
 8019f0e:	4619      	mov	r1, r3
 8019f10:	f44f 7080 	mov.w	r0, #256	; 0x100
 8019f14:	f7fe fbb2 	bl	801867c <WIZCHIP_READ_BUF>
 8019f18:	f107 0310 	add.w	r3, r7, #16
 8019f1c:	2204      	movs	r2, #4
 8019f1e:	4619      	mov	r1, r3
 8019f20:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8019f24:	f7fe fbaa 	bl	801867c <WIZCHIP_READ_BUF>
 8019f28:	f107 030c 	add.w	r3, r7, #12
 8019f2c:	2204      	movs	r2, #4
 8019f2e:	4619      	mov	r1, r3
 8019f30:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8019f34:	f7fe fba2 	bl	801867c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8019f38:	2180      	movs	r1, #128	; 0x80
 8019f3a:	2000      	movs	r0, #0
 8019f3c:	f7fe fb50 	bl	80185e0 <WIZCHIP_WRITE>
   getMR(); // for delay
 8019f40:	2000      	movs	r0, #0
 8019f42:	f7fe fb01 	bl	8018548 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8019f46:	1d3b      	adds	r3, r7, #4
 8019f48:	2206      	movs	r2, #6
 8019f4a:	4619      	mov	r1, r3
 8019f4c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8019f50:	f7fe fbf4 	bl	801873c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8019f54:	f107 0314 	add.w	r3, r7, #20
 8019f58:	2204      	movs	r2, #4
 8019f5a:	4619      	mov	r1, r3
 8019f5c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8019f60:	f7fe fbec 	bl	801873c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8019f64:	f107 0310 	add.w	r3, r7, #16
 8019f68:	2204      	movs	r2, #4
 8019f6a:	4619      	mov	r1, r3
 8019f6c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8019f70:	f7fe fbe4 	bl	801873c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8019f74:	f107 030c 	add.w	r3, r7, #12
 8019f78:	2204      	movs	r2, #4
 8019f7a:	4619      	mov	r1, r3
 8019f7c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8019f80:	f7fe fbdc 	bl	801873c <WIZCHIP_WRITE_BUF>
}
 8019f84:	bf00      	nop
 8019f86:	3718      	adds	r7, #24
 8019f88:	46bd      	mov	sp, r7
 8019f8a:	bd80      	pop	{r7, pc}

08019f8c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8019f8c:	b580      	push	{r7, lr}
 8019f8e:	b084      	sub	sp, #16
 8019f90:	af00      	add	r7, sp, #0
 8019f92:	6078      	str	r0, [r7, #4]
 8019f94:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8019f96:	2300      	movs	r3, #0
 8019f98:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8019f9a:	f7ff ffab 	bl	8019ef4 <wizchip_sw_reset>
   if(txsize)
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	d03b      	beq.n	801a01c <wizchip_init+0x90>
   {
      tmp = 0;
 8019fa4:	2300      	movs	r3, #0
 8019fa6:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8019fa8:	2300      	movs	r3, #0
 8019faa:	73fb      	strb	r3, [r7, #15]
 8019fac:	e015      	b.n	8019fda <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8019fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019fb2:	687a      	ldr	r2, [r7, #4]
 8019fb4:	4413      	add	r3, r2
 8019fb6:	781a      	ldrb	r2, [r3, #0]
 8019fb8:	7bbb      	ldrb	r3, [r7, #14]
 8019fba:	4413      	add	r3, r2
 8019fbc:	b2db      	uxtb	r3, r3
 8019fbe:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8019fc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019fc4:	2b10      	cmp	r3, #16
 8019fc6:	dd02      	ble.n	8019fce <wizchip_init+0x42>
 8019fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8019fcc:	e066      	b.n	801a09c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8019fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019fd2:	b2db      	uxtb	r3, r3
 8019fd4:	3301      	adds	r3, #1
 8019fd6:	b2db      	uxtb	r3, r3
 8019fd8:	73fb      	strb	r3, [r7, #15]
 8019fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019fde:	2b07      	cmp	r3, #7
 8019fe0:	dde5      	ble.n	8019fae <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8019fe2:	2300      	movs	r3, #0
 8019fe4:	73fb      	strb	r3, [r7, #15]
 8019fe6:	e015      	b.n	801a014 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8019fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019fec:	009b      	lsls	r3, r3, #2
 8019fee:	3301      	adds	r3, #1
 8019ff0:	00db      	lsls	r3, r3, #3
 8019ff2:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8019ff6:	4618      	mov	r0, r3
 8019ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019ffc:	687a      	ldr	r2, [r7, #4]
 8019ffe:	4413      	add	r3, r2
 801a000:	781b      	ldrb	r3, [r3, #0]
 801a002:	4619      	mov	r1, r3
 801a004:	f7fe faec 	bl	80185e0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a00c:	b2db      	uxtb	r3, r3
 801a00e:	3301      	adds	r3, #1
 801a010:	b2db      	uxtb	r3, r3
 801a012:	73fb      	strb	r3, [r7, #15]
 801a014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a018:	2b07      	cmp	r3, #7
 801a01a:	dde5      	ble.n	8019fe8 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 801a01c:	683b      	ldr	r3, [r7, #0]
 801a01e:	2b00      	cmp	r3, #0
 801a020:	d03b      	beq.n	801a09a <wizchip_init+0x10e>
   {
      tmp = 0;
 801a022:	2300      	movs	r3, #0
 801a024:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a026:	2300      	movs	r3, #0
 801a028:	73fb      	strb	r3, [r7, #15]
 801a02a:	e015      	b.n	801a058 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 801a02c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a030:	683a      	ldr	r2, [r7, #0]
 801a032:	4413      	add	r3, r2
 801a034:	781a      	ldrb	r2, [r3, #0]
 801a036:	7bbb      	ldrb	r3, [r7, #14]
 801a038:	4413      	add	r3, r2
 801a03a:	b2db      	uxtb	r3, r3
 801a03c:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 801a03e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a042:	2b10      	cmp	r3, #16
 801a044:	dd02      	ble.n	801a04c <wizchip_init+0xc0>
 801a046:	f04f 33ff 	mov.w	r3, #4294967295
 801a04a:	e027      	b.n	801a09c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a04c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a050:	b2db      	uxtb	r3, r3
 801a052:	3301      	adds	r3, #1
 801a054:	b2db      	uxtb	r3, r3
 801a056:	73fb      	strb	r3, [r7, #15]
 801a058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a05c:	2b07      	cmp	r3, #7
 801a05e:	dde5      	ble.n	801a02c <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a060:	2300      	movs	r3, #0
 801a062:	73fb      	strb	r3, [r7, #15]
 801a064:	e015      	b.n	801a092 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 801a066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a06a:	009b      	lsls	r3, r3, #2
 801a06c:	3301      	adds	r3, #1
 801a06e:	00db      	lsls	r3, r3, #3
 801a070:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 801a074:	4618      	mov	r0, r3
 801a076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a07a:	683a      	ldr	r2, [r7, #0]
 801a07c:	4413      	add	r3, r2
 801a07e:	781b      	ldrb	r3, [r3, #0]
 801a080:	4619      	mov	r1, r3
 801a082:	f7fe faad 	bl	80185e0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a08a:	b2db      	uxtb	r3, r3
 801a08c:	3301      	adds	r3, #1
 801a08e:	b2db      	uxtb	r3, r3
 801a090:	73fb      	strb	r3, [r7, #15]
 801a092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a096:	2b07      	cmp	r3, #7
 801a098:	dde5      	ble.n	801a066 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 801a09a:	2300      	movs	r3, #0
}
 801a09c:	4618      	mov	r0, r3
 801a09e:	3710      	adds	r7, #16
 801a0a0:	46bd      	mov	sp, r7
 801a0a2:	bd80      	pop	{r7, pc}

0801a0a4 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 801a0a4:	b580      	push	{r7, lr}
 801a0a6:	b084      	sub	sp, #16
 801a0a8:	af00      	add	r7, sp, #0
 801a0aa:	4603      	mov	r3, r0
 801a0ac:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 801a0ae:	88fb      	ldrh	r3, [r7, #6]
 801a0b0:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 801a0b2:	88fb      	ldrh	r3, [r7, #6]
 801a0b4:	0a1b      	lsrs	r3, r3, #8
 801a0b6:	b29b      	uxth	r3, r3
 801a0b8:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 801a0ba:	7bfb      	ldrb	r3, [r7, #15]
 801a0bc:	f023 030f 	bic.w	r3, r3, #15
 801a0c0:	b2db      	uxtb	r3, r3
 801a0c2:	4619      	mov	r1, r3
 801a0c4:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 801a0c8:	f7fe fa8a 	bl	80185e0 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 801a0cc:	2300      	movs	r3, #0
 801a0ce:	73fb      	strb	r3, [r7, #15]
 801a0d0:	e014      	b.n	801a0fc <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 801a0d2:	7bba      	ldrb	r2, [r7, #14]
 801a0d4:	7bfb      	ldrb	r3, [r7, #15]
 801a0d6:	fa42 f303 	asr.w	r3, r2, r3
 801a0da:	f003 0301 	and.w	r3, r3, #1
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	d009      	beq.n	801a0f6 <wizchip_clrinterrupt+0x52>
 801a0e2:	7bfb      	ldrb	r3, [r7, #15]
 801a0e4:	009b      	lsls	r3, r3, #2
 801a0e6:	3301      	adds	r3, #1
 801a0e8:	00db      	lsls	r3, r3, #3
 801a0ea:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801a0ee:	211f      	movs	r1, #31
 801a0f0:	4618      	mov	r0, r3
 801a0f2:	f7fe fa75 	bl	80185e0 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 801a0f6:	7bfb      	ldrb	r3, [r7, #15]
 801a0f8:	3301      	adds	r3, #1
 801a0fa:	73fb      	strb	r3, [r7, #15]
 801a0fc:	7bfb      	ldrb	r3, [r7, #15]
 801a0fe:	2b07      	cmp	r3, #7
 801a100:	d9e7      	bls.n	801a0d2 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 801a102:	bf00      	nop
 801a104:	bf00      	nop
 801a106:	3710      	adds	r7, #16
 801a108:	46bd      	mov	sp, r7
 801a10a:	bd80      	pop	{r7, pc}

0801a10c <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 801a10c:	b580      	push	{r7, lr}
 801a10e:	b082      	sub	sp, #8
 801a110:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 801a112:	2300      	movs	r3, #0
 801a114:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 801a116:	2300      	movs	r3, #0
 801a118:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 801a11a:	2300      	movs	r3, #0
 801a11c:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 801a11e:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 801a122:	f7fe fa11 	bl	8018548 <WIZCHIP_READ>
 801a126:	4603      	mov	r3, r0
 801a128:	f023 030f 	bic.w	r3, r3, #15
 801a12c:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 801a12e:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 801a132:	f7fe fa09 	bl	8018548 <WIZCHIP_READ>
 801a136:	4603      	mov	r3, r0
 801a138:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 801a13a:	79bb      	ldrb	r3, [r7, #6]
 801a13c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 801a13e:	88bb      	ldrh	r3, [r7, #4]
 801a140:	021b      	lsls	r3, r3, #8
 801a142:	b29a      	uxth	r2, r3
 801a144:	79fb      	ldrb	r3, [r7, #7]
 801a146:	b29b      	uxth	r3, r3
 801a148:	4413      	add	r3, r2
 801a14a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 801a14c:	88bb      	ldrh	r3, [r7, #4]
}
 801a14e:	4618      	mov	r0, r3
 801a150:	3708      	adds	r7, #8
 801a152:	46bd      	mov	sp, r7
 801a154:	bd80      	pop	{r7, pc}

0801a156 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 801a156:	b580      	push	{r7, lr}
 801a158:	b084      	sub	sp, #16
 801a15a:	af00      	add	r7, sp, #0
 801a15c:	4603      	mov	r3, r0
 801a15e:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 801a160:	88fb      	ldrh	r3, [r7, #6]
 801a162:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 801a164:	88fb      	ldrh	r3, [r7, #6]
 801a166:	0a1b      	lsrs	r3, r3, #8
 801a168:	b29b      	uxth	r3, r3
 801a16a:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 801a16c:	7bfb      	ldrb	r3, [r7, #15]
 801a16e:	4619      	mov	r1, r3
 801a170:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 801a174:	f7fe fa34 	bl	80185e0 <WIZCHIP_WRITE>
   setSIMR(simr);
 801a178:	7bbb      	ldrb	r3, [r7, #14]
 801a17a:	4619      	mov	r1, r3
 801a17c:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 801a180:	f7fe fa2e 	bl	80185e0 <WIZCHIP_WRITE>
#endif   
}
 801a184:	bf00      	nop
 801a186:	3710      	adds	r7, #16
 801a188:	46bd      	mov	sp, r7
 801a18a:	bd80      	pop	{r7, pc}

0801a18c <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 801a18c:	b580      	push	{r7, lr}
 801a18e:	b082      	sub	sp, #8
 801a190:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 801a192:	2300      	movs	r3, #0
 801a194:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 801a196:	2300      	movs	r3, #0
 801a198:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 801a19a:	2300      	movs	r3, #0
 801a19c:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 801a19e:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 801a1a2:	f7fe f9d1 	bl	8018548 <WIZCHIP_READ>
 801a1a6:	4603      	mov	r3, r0
 801a1a8:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 801a1aa:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 801a1ae:	f7fe f9cb 	bl	8018548 <WIZCHIP_READ>
 801a1b2:	4603      	mov	r3, r0
 801a1b4:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 801a1b6:	79bb      	ldrb	r3, [r7, #6]
 801a1b8:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 801a1ba:	88bb      	ldrh	r3, [r7, #4]
 801a1bc:	021b      	lsls	r3, r3, #8
 801a1be:	b29a      	uxth	r2, r3
 801a1c0:	79fb      	ldrb	r3, [r7, #7]
 801a1c2:	b29b      	uxth	r3, r3
 801a1c4:	4413      	add	r3, r2
 801a1c6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 801a1c8:	88bb      	ldrh	r3, [r7, #4]
}
 801a1ca:	4618      	mov	r0, r3
 801a1cc:	3708      	adds	r7, #8
 801a1ce:	46bd      	mov	sp, r7
 801a1d0:	bd80      	pop	{r7, pc}

0801a1d2 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 801a1d2:	b580      	push	{r7, lr}
 801a1d4:	b082      	sub	sp, #8
 801a1d6:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 801a1d8:	2300      	movs	r3, #0
 801a1da:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 801a1dc:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a1e0:	f7fe f9b2 	bl	8018548 <WIZCHIP_READ>
 801a1e4:	4603      	mov	r3, r0
 801a1e6:	f003 0301 	and.w	r3, r3, #1
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d001      	beq.n	801a1f2 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 801a1ee:	2301      	movs	r3, #1
 801a1f0:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 801a1f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801a1f6:	4618      	mov	r0, r3
 801a1f8:	3708      	adds	r7, #8
 801a1fa:	46bd      	mov	sp, r7
 801a1fc:	bd80      	pop	{r7, pc}

0801a1fe <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 801a1fe:	b580      	push	{r7, lr}
 801a200:	b082      	sub	sp, #8
 801a202:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 801a204:	2300      	movs	r3, #0
 801a206:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 801a208:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a20c:	f7fe f99c 	bl	8018548 <WIZCHIP_READ>
 801a210:	4603      	mov	r3, r0
 801a212:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a216:	2b30      	cmp	r3, #48	; 0x30
 801a218:	d102      	bne.n	801a220 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 801a21a:	2301      	movs	r3, #1
 801a21c:	71fb      	strb	r3, [r7, #7]
 801a21e:	e001      	b.n	801a224 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 801a220:	2300      	movs	r3, #0
 801a222:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 801a224:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801a228:	4618      	mov	r0, r3
 801a22a:	3708      	adds	r7, #8
 801a22c:	46bd      	mov	sp, r7
 801a22e:	bd80      	pop	{r7, pc}

0801a230 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 801a230:	b580      	push	{r7, lr}
 801a232:	b082      	sub	sp, #8
 801a234:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 801a236:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a23a:	f7fe f985 	bl	8018548 <WIZCHIP_READ>
 801a23e:	4603      	mov	r3, r0
 801a240:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 801a242:	79fb      	ldrb	r3, [r7, #7]
 801a244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a248:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 801a24a:	79fb      	ldrb	r3, [r7, #7]
 801a24c:	4619      	mov	r1, r3
 801a24e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a252:	f7fe f9c5 	bl	80185e0 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 801a256:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a25a:	f7fe f975 	bl	8018548 <WIZCHIP_READ>
 801a25e:	4603      	mov	r3, r0
 801a260:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 801a262:	79fb      	ldrb	r3, [r7, #7]
 801a264:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801a268:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 801a26a:	79fb      	ldrb	r3, [r7, #7]
 801a26c:	4619      	mov	r1, r3
 801a26e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a272:	f7fe f9b5 	bl	80185e0 <WIZCHIP_WRITE>
}
 801a276:	bf00      	nop
 801a278:	3708      	adds	r7, #8
 801a27a:	46bd      	mov	sp, r7
 801a27c:	bd80      	pop	{r7, pc}

0801a27e <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 801a27e:	b580      	push	{r7, lr}
 801a280:	b084      	sub	sp, #16
 801a282:	af00      	add	r7, sp, #0
 801a284:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 801a286:	2300      	movs	r3, #0
 801a288:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	781b      	ldrb	r3, [r3, #0]
 801a28e:	2b01      	cmp	r3, #1
 801a290:	d104      	bne.n	801a29c <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 801a292:	7bfb      	ldrb	r3, [r7, #15]
 801a294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a298:	73fb      	strb	r3, [r7, #15]
 801a29a:	e003      	b.n	801a2a4 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 801a29c:	7bfb      	ldrb	r3, [r7, #15]
 801a29e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a2a2:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	785b      	ldrb	r3, [r3, #1]
 801a2a8:	2b01      	cmp	r3, #1
 801a2aa:	d104      	bne.n	801a2b6 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 801a2ac:	7bfb      	ldrb	r3, [r7, #15]
 801a2ae:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 801a2b2:	73fb      	strb	r3, [r7, #15]
 801a2b4:	e019      	b.n	801a2ea <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	78db      	ldrb	r3, [r3, #3]
 801a2ba:	2b01      	cmp	r3, #1
 801a2bc:	d10d      	bne.n	801a2da <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	789b      	ldrb	r3, [r3, #2]
 801a2c2:	2b01      	cmp	r3, #1
 801a2c4:	d104      	bne.n	801a2d0 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 801a2c6:	7bfb      	ldrb	r3, [r7, #15]
 801a2c8:	f043 0318 	orr.w	r3, r3, #24
 801a2cc:	73fb      	strb	r3, [r7, #15]
 801a2ce:	e00c      	b.n	801a2ea <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 801a2d0:	7bfb      	ldrb	r3, [r7, #15]
 801a2d2:	f043 0308 	orr.w	r3, r3, #8
 801a2d6:	73fb      	strb	r3, [r7, #15]
 801a2d8:	e007      	b.n	801a2ea <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	789b      	ldrb	r3, [r3, #2]
 801a2de:	2b01      	cmp	r3, #1
 801a2e0:	d103      	bne.n	801a2ea <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 801a2e2:	7bfb      	ldrb	r3, [r7, #15]
 801a2e4:	f043 0310 	orr.w	r3, r3, #16
 801a2e8:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 801a2ea:	7bfb      	ldrb	r3, [r7, #15]
 801a2ec:	4619      	mov	r1, r3
 801a2ee:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a2f2:	f7fe f975 	bl	80185e0 <WIZCHIP_WRITE>
   wizphy_reset();
 801a2f6:	f7ff ff9b 	bl	801a230 <wizphy_reset>
}
 801a2fa:	bf00      	nop
 801a2fc:	3710      	adds	r7, #16
 801a2fe:	46bd      	mov	sp, r7
 801a300:	bd80      	pop	{r7, pc}
	...

0801a304 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 801a304:	b580      	push	{r7, lr}
 801a306:	b084      	sub	sp, #16
 801a308:	af00      	add	r7, sp, #0
 801a30a:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 801a30c:	2300      	movs	r3, #0
 801a30e:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 801a310:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a314:	f7fe f918 	bl	8018548 <WIZCHIP_READ>
 801a318:	4603      	mov	r3, r0
 801a31a:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 801a31c:	7bfb      	ldrb	r3, [r7, #15]
 801a31e:	119b      	asrs	r3, r3, #6
 801a320:	b2db      	uxtb	r3, r3
 801a322:	f003 0301 	and.w	r3, r3, #1
 801a326:	b2da      	uxtb	r2, r3
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 801a32c:	7bfb      	ldrb	r3, [r7, #15]
 801a32e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a332:	2b20      	cmp	r3, #32
 801a334:	d001      	beq.n	801a33a <wizphy_getphyconf+0x36>
 801a336:	2b38      	cmp	r3, #56	; 0x38
 801a338:	d103      	bne.n	801a342 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	2201      	movs	r2, #1
 801a33e:	705a      	strb	r2, [r3, #1]
         break;
 801a340:	e003      	b.n	801a34a <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 801a342:	687b      	ldr	r3, [r7, #4]
 801a344:	2200      	movs	r2, #0
 801a346:	705a      	strb	r2, [r3, #1]
         break;
 801a348:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 801a34a:	7bfb      	ldrb	r3, [r7, #15]
 801a34c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a350:	3b10      	subs	r3, #16
 801a352:	2b10      	cmp	r3, #16
 801a354:	bf8c      	ite	hi
 801a356:	2201      	movhi	r2, #1
 801a358:	2200      	movls	r2, #0
 801a35a:	b2d2      	uxtb	r2, r2
 801a35c:	2a00      	cmp	r2, #0
 801a35e:	d10f      	bne.n	801a380 <wizphy_getphyconf+0x7c>
 801a360:	4a1b      	ldr	r2, [pc, #108]	; (801a3d0 <wizphy_getphyconf+0xcc>)
 801a362:	fa22 f303 	lsr.w	r3, r2, r3
 801a366:	f003 0301 	and.w	r3, r3, #1
 801a36a:	2b00      	cmp	r3, #0
 801a36c:	bf14      	ite	ne
 801a36e:	2301      	movne	r3, #1
 801a370:	2300      	moveq	r3, #0
 801a372:	b2db      	uxtb	r3, r3
 801a374:	2b00      	cmp	r3, #0
 801a376:	d003      	beq.n	801a380 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	2201      	movs	r2, #1
 801a37c:	709a      	strb	r2, [r3, #2]
         break;
 801a37e:	e003      	b.n	801a388 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 801a380:	687b      	ldr	r3, [r7, #4]
 801a382:	2200      	movs	r2, #0
 801a384:	709a      	strb	r2, [r3, #2]
         break;
 801a386:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 801a388:	7bfb      	ldrb	r3, [r7, #15]
 801a38a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a38e:	3b08      	subs	r3, #8
 801a390:	2b18      	cmp	r3, #24
 801a392:	bf8c      	ite	hi
 801a394:	2201      	movhi	r2, #1
 801a396:	2200      	movls	r2, #0
 801a398:	b2d2      	uxtb	r2, r2
 801a39a:	2a00      	cmp	r2, #0
 801a39c:	d10f      	bne.n	801a3be <wizphy_getphyconf+0xba>
 801a39e:	4a0d      	ldr	r2, [pc, #52]	; (801a3d4 <wizphy_getphyconf+0xd0>)
 801a3a0:	fa22 f303 	lsr.w	r3, r2, r3
 801a3a4:	f003 0301 	and.w	r3, r3, #1
 801a3a8:	2b00      	cmp	r3, #0
 801a3aa:	bf14      	ite	ne
 801a3ac:	2301      	movne	r3, #1
 801a3ae:	2300      	moveq	r3, #0
 801a3b0:	b2db      	uxtb	r3, r3
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	d003      	beq.n	801a3be <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	2201      	movs	r2, #1
 801a3ba:	70da      	strb	r2, [r3, #3]
         break;
 801a3bc:	e003      	b.n	801a3c6 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	2200      	movs	r2, #0
 801a3c2:	70da      	strb	r2, [r3, #3]
         break;
 801a3c4:	bf00      	nop
   }
}
 801a3c6:	bf00      	nop
 801a3c8:	3710      	adds	r7, #16
 801a3ca:	46bd      	mov	sp, r7
 801a3cc:	bd80      	pop	{r7, pc}
 801a3ce:	bf00      	nop
 801a3d0:	00010101 	.word	0x00010101
 801a3d4:	01010001 	.word	0x01010001

0801a3d8 <wizphy_getphystat>:

void wizphy_getphystat(wiz_PhyConf* phyconf)
{
 801a3d8:	b580      	push	{r7, lr}
 801a3da:	b084      	sub	sp, #16
 801a3dc:	af00      	add	r7, sp, #0
 801a3de:	6078      	str	r0, [r7, #4]
   uint8_t tmp = getPHYCFGR();
 801a3e0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a3e4:	f7fe f8b0 	bl	8018548 <WIZCHIP_READ>
 801a3e8:	4603      	mov	r3, r0
 801a3ea:	73fb      	strb	r3, [r7, #15]
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
 801a3ec:	7bfb      	ldrb	r3, [r7, #15]
 801a3ee:	109b      	asrs	r3, r3, #2
 801a3f0:	b2db      	uxtb	r3, r3
 801a3f2:	f003 0301 	and.w	r3, r3, #1
 801a3f6:	b2da      	uxtb	r2, r3
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	70da      	strb	r2, [r3, #3]
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
 801a3fc:	7bfb      	ldrb	r3, [r7, #15]
 801a3fe:	105b      	asrs	r3, r3, #1
 801a400:	b2db      	uxtb	r3, r3
 801a402:	f003 0301 	and.w	r3, r3, #1
 801a406:	b2da      	uxtb	r2, r3
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	709a      	strb	r2, [r3, #2]
}
 801a40c:	bf00      	nop
 801a40e:	3710      	adds	r7, #16
 801a410:	46bd      	mov	sp, r7
 801a412:	bd80      	pop	{r7, pc}

0801a414 <wizphy_setphypmode>:

int8_t wizphy_setphypmode(uint8_t pmode)
{
 801a414:	b580      	push	{r7, lr}
 801a416:	b084      	sub	sp, #16
 801a418:	af00      	add	r7, sp, #0
 801a41a:	4603      	mov	r3, r0
 801a41c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 801a41e:	2300      	movs	r3, #0
 801a420:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 801a422:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a426:	f7fe f88f 	bl	8018548 <WIZCHIP_READ>
 801a42a:	4603      	mov	r3, r0
 801a42c:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 801a42e:	7bfb      	ldrb	r3, [r7, #15]
 801a430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a434:	2b00      	cmp	r3, #0
 801a436:	d102      	bne.n	801a43e <wizphy_setphypmode+0x2a>
 801a438:	f04f 33ff 	mov.w	r3, #4294967295
 801a43c:	e030      	b.n	801a4a0 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 801a43e:	7bfb      	ldrb	r3, [r7, #15]
 801a440:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 801a444:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 801a446:	79fb      	ldrb	r3, [r7, #7]
 801a448:	2b01      	cmp	r3, #1
 801a44a:	d104      	bne.n	801a456 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 801a44c:	7bfb      	ldrb	r3, [r7, #15]
 801a44e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 801a452:	73fb      	strb	r3, [r7, #15]
 801a454:	e003      	b.n	801a45e <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 801a456:	7bfb      	ldrb	r3, [r7, #15]
 801a458:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 801a45c:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 801a45e:	7bfb      	ldrb	r3, [r7, #15]
 801a460:	4619      	mov	r1, r3
 801a462:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a466:	f7fe f8bb 	bl	80185e0 <WIZCHIP_WRITE>
   wizphy_reset();
 801a46a:	f7ff fee1 	bl	801a230 <wizphy_reset>
   tmp = getPHYCFGR();
 801a46e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a472:	f7fe f869 	bl	8018548 <WIZCHIP_READ>
 801a476:	4603      	mov	r3, r0
 801a478:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 801a47a:	79fb      	ldrb	r3, [r7, #7]
 801a47c:	2b01      	cmp	r3, #1
 801a47e:	d106      	bne.n	801a48e <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 801a480:	7bfb      	ldrb	r3, [r7, #15]
 801a482:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801a486:	2b00      	cmp	r3, #0
 801a488:	d008      	beq.n	801a49c <wizphy_setphypmode+0x88>
 801a48a:	2300      	movs	r3, #0
 801a48c:	e008      	b.n	801a4a0 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 801a48e:	7bfb      	ldrb	r3, [r7, #15]
 801a490:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a494:	2b00      	cmp	r3, #0
 801a496:	d001      	beq.n	801a49c <wizphy_setphypmode+0x88>
 801a498:	2300      	movs	r3, #0
 801a49a:	e001      	b.n	801a4a0 <wizphy_setphypmode+0x8c>
   }
   return -1;
 801a49c:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a4a0:	4618      	mov	r0, r3
 801a4a2:	3710      	adds	r7, #16
 801a4a4:	46bd      	mov	sp, r7
 801a4a6:	bd80      	pop	{r7, pc}

0801a4a8 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 801a4a8:	b580      	push	{r7, lr}
 801a4aa:	b082      	sub	sp, #8
 801a4ac:	af00      	add	r7, sp, #0
 801a4ae:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	2206      	movs	r2, #6
 801a4b4:	4619      	mov	r1, r3
 801a4b6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a4ba:	f7fe f93f 	bl	801873c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 801a4be:	687b      	ldr	r3, [r7, #4]
 801a4c0:	330e      	adds	r3, #14
 801a4c2:	2204      	movs	r2, #4
 801a4c4:	4619      	mov	r1, r3
 801a4c6:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a4ca:	f7fe f937 	bl	801873c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	330a      	adds	r3, #10
 801a4d2:	2204      	movs	r2, #4
 801a4d4:	4619      	mov	r1, r3
 801a4d6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a4da:	f7fe f92f 	bl	801873c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	3306      	adds	r3, #6
 801a4e2:	2204      	movs	r2, #4
 801a4e4:	4619      	mov	r1, r3
 801a4e6:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801a4ea:	f7fe f927 	bl	801873c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 801a4ee:	687b      	ldr	r3, [r7, #4]
 801a4f0:	7c9a      	ldrb	r2, [r3, #18]
 801a4f2:	4b0b      	ldr	r3, [pc, #44]	; (801a520 <wizchip_setnetinfo+0x78>)
 801a4f4:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	7cda      	ldrb	r2, [r3, #19]
 801a4fa:	4b09      	ldr	r3, [pc, #36]	; (801a520 <wizchip_setnetinfo+0x78>)
 801a4fc:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 801a4fe:	687b      	ldr	r3, [r7, #4]
 801a500:	7d1a      	ldrb	r2, [r3, #20]
 801a502:	4b07      	ldr	r3, [pc, #28]	; (801a520 <wizchip_setnetinfo+0x78>)
 801a504:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	7d5a      	ldrb	r2, [r3, #21]
 801a50a:	4b05      	ldr	r3, [pc, #20]	; (801a520 <wizchip_setnetinfo+0x78>)
 801a50c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 801a50e:	687b      	ldr	r3, [r7, #4]
 801a510:	7d9a      	ldrb	r2, [r3, #22]
 801a512:	4b04      	ldr	r3, [pc, #16]	; (801a524 <wizchip_setnetinfo+0x7c>)
 801a514:	701a      	strb	r2, [r3, #0]
}
 801a516:	bf00      	nop
 801a518:	3708      	adds	r7, #8
 801a51a:	46bd      	mov	sp, r7
 801a51c:	bd80      	pop	{r7, pc}
 801a51e:	bf00      	nop
 801a520:	2000097c 	.word	0x2000097c
 801a524:	20000980 	.word	0x20000980

0801a528 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 801a528:	b580      	push	{r7, lr}
 801a52a:	b082      	sub	sp, #8
 801a52c:	af00      	add	r7, sp, #0
 801a52e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	2206      	movs	r2, #6
 801a534:	4619      	mov	r1, r3
 801a536:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a53a:	f7fe f89f 	bl	801867c <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	330e      	adds	r3, #14
 801a542:	2204      	movs	r2, #4
 801a544:	4619      	mov	r1, r3
 801a546:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a54a:	f7fe f897 	bl	801867c <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	330a      	adds	r3, #10
 801a552:	2204      	movs	r2, #4
 801a554:	4619      	mov	r1, r3
 801a556:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a55a:	f7fe f88f 	bl	801867c <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	3306      	adds	r3, #6
 801a562:	2204      	movs	r2, #4
 801a564:	4619      	mov	r1, r3
 801a566:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801a56a:	f7fe f887 	bl	801867c <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 801a56e:	4b0c      	ldr	r3, [pc, #48]	; (801a5a0 <wizchip_getnetinfo+0x78>)
 801a570:	781a      	ldrb	r2, [r3, #0]
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 801a576:	4b0a      	ldr	r3, [pc, #40]	; (801a5a0 <wizchip_getnetinfo+0x78>)
 801a578:	785a      	ldrb	r2, [r3, #1]
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 801a57e:	4b08      	ldr	r3, [pc, #32]	; (801a5a0 <wizchip_getnetinfo+0x78>)
 801a580:	789a      	ldrb	r2, [r3, #2]
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 801a586:	4b06      	ldr	r3, [pc, #24]	; (801a5a0 <wizchip_getnetinfo+0x78>)
 801a588:	78da      	ldrb	r2, [r3, #3]
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 801a58e:	4b05      	ldr	r3, [pc, #20]	; (801a5a4 <wizchip_getnetinfo+0x7c>)
 801a590:	781a      	ldrb	r2, [r3, #0]
 801a592:	687b      	ldr	r3, [r7, #4]
 801a594:	759a      	strb	r2, [r3, #22]
}
 801a596:	bf00      	nop
 801a598:	3708      	adds	r7, #8
 801a59a:	46bd      	mov	sp, r7
 801a59c:	bd80      	pop	{r7, pc}
 801a59e:	bf00      	nop
 801a5a0:	2000097c 	.word	0x2000097c
 801a5a4:	20000980 	.word	0x20000980

0801a5a8 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 801a5a8:	b580      	push	{r7, lr}
 801a5aa:	b084      	sub	sp, #16
 801a5ac:	af00      	add	r7, sp, #0
 801a5ae:	4603      	mov	r3, r0
 801a5b0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 801a5b2:	2300      	movs	r3, #0
 801a5b4:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 801a5b6:	79fb      	ldrb	r3, [r7, #7]
 801a5b8:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	d002      	beq.n	801a5c6 <wizchip_setnetmode+0x1e>
 801a5c0:	f04f 33ff 	mov.w	r3, #4294967295
 801a5c4:	e00e      	b.n	801a5e4 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 801a5c6:	2000      	movs	r0, #0
 801a5c8:	f7fd ffbe 	bl	8018548 <WIZCHIP_READ>
 801a5cc:	4603      	mov	r3, r0
 801a5ce:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 801a5d0:	7bfa      	ldrb	r2, [r7, #15]
 801a5d2:	79fb      	ldrb	r3, [r7, #7]
 801a5d4:	4313      	orrs	r3, r2
 801a5d6:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 801a5d8:	7bfb      	ldrb	r3, [r7, #15]
 801a5da:	4619      	mov	r1, r3
 801a5dc:	2000      	movs	r0, #0
 801a5de:	f7fd ffff 	bl	80185e0 <WIZCHIP_WRITE>
   return 0;
 801a5e2:	2300      	movs	r3, #0
}
 801a5e4:	4618      	mov	r0, r3
 801a5e6:	3710      	adds	r7, #16
 801a5e8:	46bd      	mov	sp, r7
 801a5ea:	bd80      	pop	{r7, pc}

0801a5ec <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 801a5ec:	b580      	push	{r7, lr}
 801a5ee:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 801a5f0:	2000      	movs	r0, #0
 801a5f2:	f7fd ffa9 	bl	8018548 <WIZCHIP_READ>
 801a5f6:	4603      	mov	r3, r0
}
 801a5f8:	4618      	mov	r0, r3
 801a5fa:	bd80      	pop	{r7, pc}

0801a5fc <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 801a5fc:	b580      	push	{r7, lr}
 801a5fe:	b082      	sub	sp, #8
 801a600:	af00      	add	r7, sp, #0
 801a602:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 801a604:	687b      	ldr	r3, [r7, #4]
 801a606:	781b      	ldrb	r3, [r3, #0]
 801a608:	4619      	mov	r1, r3
 801a60a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801a60e:	f7fd ffe7 	bl	80185e0 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 801a612:	687b      	ldr	r3, [r7, #4]
 801a614:	885b      	ldrh	r3, [r3, #2]
 801a616:	0a1b      	lsrs	r3, r3, #8
 801a618:	b29b      	uxth	r3, r3
 801a61a:	b2db      	uxtb	r3, r3
 801a61c:	4619      	mov	r1, r3
 801a61e:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 801a622:	f7fd ffdd 	bl	80185e0 <WIZCHIP_WRITE>
 801a626:	687b      	ldr	r3, [r7, #4]
 801a628:	885b      	ldrh	r3, [r3, #2]
 801a62a:	b2db      	uxtb	r3, r3
 801a62c:	4619      	mov	r1, r3
 801a62e:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 801a632:	f7fd ffd5 	bl	80185e0 <WIZCHIP_WRITE>
}
 801a636:	bf00      	nop
 801a638:	3708      	adds	r7, #8
 801a63a:	46bd      	mov	sp, r7
 801a63c:	bd80      	pop	{r7, pc}

0801a63e <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 801a63e:	b590      	push	{r4, r7, lr}
 801a640:	b083      	sub	sp, #12
 801a642:	af00      	add	r7, sp, #0
 801a644:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 801a646:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801a64a:	f7fd ff7d 	bl	8018548 <WIZCHIP_READ>
 801a64e:	4603      	mov	r3, r0
 801a650:	461a      	mov	r2, r3
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 801a656:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 801a65a:	f7fd ff75 	bl	8018548 <WIZCHIP_READ>
 801a65e:	4603      	mov	r3, r0
 801a660:	b29b      	uxth	r3, r3
 801a662:	021b      	lsls	r3, r3, #8
 801a664:	b29c      	uxth	r4, r3
 801a666:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 801a66a:	f7fd ff6d 	bl	8018548 <WIZCHIP_READ>
 801a66e:	4603      	mov	r3, r0
 801a670:	b29b      	uxth	r3, r3
 801a672:	4423      	add	r3, r4
 801a674:	b29a      	uxth	r2, r3
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	805a      	strh	r2, [r3, #2]
}
 801a67a:	bf00      	nop
 801a67c:	370c      	adds	r7, #12
 801a67e:	46bd      	mov	sp, r7
 801a680:	bd90      	pop	{r4, r7, pc}
	...

0801a684 <default_ip_assign>:
	if (delay_func) delay = delay_func;
}

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 801a684:	b580      	push	{r7, lr}
 801a686:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 801a688:	2204      	movs	r2, #4
 801a68a:	4909      	ldr	r1, [pc, #36]	; (801a6b0 <default_ip_assign+0x2c>)
 801a68c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801a690:	f7fe f854 	bl	801873c <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 801a694:	2204      	movs	r2, #4
 801a696:	4907      	ldr	r1, [pc, #28]	; (801a6b4 <default_ip_assign+0x30>)
 801a698:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a69c:	f7fe f84e 	bl	801873c <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 801a6a0:	2204      	movs	r2, #4
 801a6a2:	4905      	ldr	r1, [pc, #20]	; (801a6b8 <default_ip_assign+0x34>)
 801a6a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a6a8:	f7fe f848 	bl	801873c <WIZCHIP_WRITE_BUF>
}
 801a6ac:	bf00      	nop
 801a6ae:	bd80      	pop	{r7, pc}
 801a6b0:	20000990 	.word	0x20000990
 801a6b4:	20000998 	.word	0x20000998
 801a6b8:	20000994 	.word	0x20000994

0801a6bc <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 801a6bc:	b580      	push	{r7, lr}
 801a6be:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 801a6c0:	2180      	movs	r1, #128	; 0x80
 801a6c2:	2000      	movs	r0, #0
 801a6c4:	f7fd ff8c 	bl	80185e0 <WIZCHIP_WRITE>
   getMR(); // for delay
 801a6c8:	2000      	movs	r0, #0
 801a6ca:	f7fd ff3d 	bl	8018548 <WIZCHIP_READ>
   default_ip_assign();
 801a6ce:	f7ff ffd9 	bl	801a684 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 801a6d2:	2206      	movs	r2, #6
 801a6d4:	4903      	ldr	r1, [pc, #12]	; (801a6e4 <default_ip_update+0x28>)
 801a6d6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a6da:	f7fe f82f 	bl	801873c <WIZCHIP_WRITE_BUF>
}
 801a6de:	bf00      	nop
 801a6e0:	bd80      	pop	{r7, pc}
 801a6e2:	bf00      	nop
 801a6e4:	200009b0 	.word	0x200009b0

0801a6e8 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 801a6e8:	b580      	push	{r7, lr}
 801a6ea:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 801a6ec:	2180      	movs	r1, #128	; 0x80
 801a6ee:	2000      	movs	r0, #0
 801a6f0:	f7fd ff76 	bl	80185e0 <WIZCHIP_WRITE>
	getMR(); // for delay
 801a6f4:	2000      	movs	r0, #0
 801a6f6:	f7fd ff27 	bl	8018548 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 801a6fa:	2206      	movs	r2, #6
 801a6fc:	4903      	ldr	r1, [pc, #12]	; (801a70c <default_ip_conflict+0x24>)
 801a6fe:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a702:	f7fe f81b 	bl	801873c <WIZCHIP_WRITE_BUF>
}
 801a706:	bf00      	nop
 801a708:	bd80      	pop	{r7, pc}
 801a70a:	bf00      	nop
 801a70c:	200009b0 	.word	0x200009b0

0801a710 <default_delay>:

void default_delay(uint32_t time){}
 801a710:	b480      	push	{r7}
 801a712:	b083      	sub	sp, #12
 801a714:	af00      	add	r7, sp, #0
 801a716:	6078      	str	r0, [r7, #4]
 801a718:	bf00      	nop
 801a71a:	370c      	adds	r7, #12
 801a71c:	46bd      	mov	sp, r7
 801a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a722:	4770      	bx	lr

0801a724 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 801a724:	b480      	push	{r7}
 801a726:	b085      	sub	sp, #20
 801a728:	af00      	add	r7, sp, #0
 801a72a:	60f8      	str	r0, [r7, #12]
 801a72c:	60b9      	str	r1, [r7, #8]
 801a72e:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 801a730:	4b10      	ldr	r3, [pc, #64]	; (801a774 <reg_dhcp_cbfunc+0x50>)
 801a732:	4a11      	ldr	r2, [pc, #68]	; (801a778 <reg_dhcp_cbfunc+0x54>)
 801a734:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 801a736:	4b11      	ldr	r3, [pc, #68]	; (801a77c <reg_dhcp_cbfunc+0x58>)
 801a738:	4a11      	ldr	r2, [pc, #68]	; (801a780 <reg_dhcp_cbfunc+0x5c>)
 801a73a:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 801a73c:	4b11      	ldr	r3, [pc, #68]	; (801a784 <reg_dhcp_cbfunc+0x60>)
 801a73e:	4a12      	ldr	r2, [pc, #72]	; (801a788 <reg_dhcp_cbfunc+0x64>)
 801a740:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 801a742:	68fb      	ldr	r3, [r7, #12]
 801a744:	2b00      	cmp	r3, #0
 801a746:	d002      	beq.n	801a74e <reg_dhcp_cbfunc+0x2a>
 801a748:	4a0a      	ldr	r2, [pc, #40]	; (801a774 <reg_dhcp_cbfunc+0x50>)
 801a74a:	68fb      	ldr	r3, [r7, #12]
 801a74c:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 801a74e:	68bb      	ldr	r3, [r7, #8]
 801a750:	2b00      	cmp	r3, #0
 801a752:	d002      	beq.n	801a75a <reg_dhcp_cbfunc+0x36>
 801a754:	4a09      	ldr	r2, [pc, #36]	; (801a77c <reg_dhcp_cbfunc+0x58>)
 801a756:	68bb      	ldr	r3, [r7, #8]
 801a758:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 801a75a:	687b      	ldr	r3, [r7, #4]
 801a75c:	2b00      	cmp	r3, #0
 801a75e:	d002      	beq.n	801a766 <reg_dhcp_cbfunc+0x42>
 801a760:	4a08      	ldr	r2, [pc, #32]	; (801a784 <reg_dhcp_cbfunc+0x60>)
 801a762:	687b      	ldr	r3, [r7, #4]
 801a764:	6013      	str	r3, [r2, #0]
}
 801a766:	bf00      	nop
 801a768:	3714      	adds	r7, #20
 801a76a:	46bd      	mov	sp, r7
 801a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a770:	4770      	bx	lr
 801a772:	bf00      	nop
 801a774:	20000104 	.word	0x20000104
 801a778:	0801a685 	.word	0x0801a685
 801a77c:	20000108 	.word	0x20000108
 801a780:	0801a6bd 	.word	0x0801a6bd
 801a784:	2000010c 	.word	0x2000010c
 801a788:	0801a6e9 	.word	0x0801a6e9

0801a78c <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 801a78c:	b580      	push	{r7, lr}
 801a78e:	b084      	sub	sp, #16
 801a790:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 801a792:	463b      	mov	r3, r7
 801a794:	2206      	movs	r2, #6
 801a796:	4619      	mov	r1, r3
 801a798:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a79c:	f7fd ff6e 	bl	801867c <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 801a7a0:	4b72      	ldr	r3, [pc, #456]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a7a2:	681b      	ldr	r3, [r3, #0]
 801a7a4:	2201      	movs	r2, #1
 801a7a6:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 801a7a8:	4b70      	ldr	r3, [pc, #448]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a7aa:	681b      	ldr	r3, [r3, #0]
 801a7ac:	2201      	movs	r2, #1
 801a7ae:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 801a7b0:	4b6e      	ldr	r3, [pc, #440]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a7b2:	681b      	ldr	r3, [r3, #0]
 801a7b4:	2206      	movs	r2, #6
 801a7b6:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 801a7b8:	4b6c      	ldr	r3, [pc, #432]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a7ba:	681b      	ldr	r3, [r3, #0]
 801a7bc:	2200      	movs	r2, #0
 801a7be:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 801a7c0:	4b6a      	ldr	r3, [pc, #424]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a7c2:	681b      	ldr	r3, [r3, #0]
 801a7c4:	3304      	adds	r3, #4
 801a7c6:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 801a7c8:	4b69      	ldr	r3, [pc, #420]	; (801a970 <makeDHCPMSG+0x1e4>)
 801a7ca:	681b      	ldr	r3, [r3, #0]
 801a7cc:	0e1b      	lsrs	r3, r3, #24
 801a7ce:	b2da      	uxtb	r2, r3
 801a7d0:	68bb      	ldr	r3, [r7, #8]
 801a7d2:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 801a7d4:	4b66      	ldr	r3, [pc, #408]	; (801a970 <makeDHCPMSG+0x1e4>)
 801a7d6:	681b      	ldr	r3, [r3, #0]
 801a7d8:	0c1a      	lsrs	r2, r3, #16
 801a7da:	68bb      	ldr	r3, [r7, #8]
 801a7dc:	3301      	adds	r3, #1
 801a7de:	b2d2      	uxtb	r2, r2
 801a7e0:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 801a7e2:	4b63      	ldr	r3, [pc, #396]	; (801a970 <makeDHCPMSG+0x1e4>)
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	0a1a      	lsrs	r2, r3, #8
 801a7e8:	68bb      	ldr	r3, [r7, #8]
 801a7ea:	3302      	adds	r3, #2
 801a7ec:	b2d2      	uxtb	r2, r2
 801a7ee:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 801a7f0:	4b5f      	ldr	r3, [pc, #380]	; (801a970 <makeDHCPMSG+0x1e4>)
 801a7f2:	681a      	ldr	r2, [r3, #0]
 801a7f4:	68bb      	ldr	r3, [r7, #8]
 801a7f6:	3303      	adds	r3, #3
 801a7f8:	b2d2      	uxtb	r2, r2
 801a7fa:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 801a7fc:	4b5b      	ldr	r3, [pc, #364]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	2200      	movs	r2, #0
 801a802:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 801a804:	4b59      	ldr	r3, [pc, #356]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a806:	681b      	ldr	r3, [r3, #0]
 801a808:	330a      	adds	r3, #10
 801a80a:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 801a80c:	68bb      	ldr	r3, [r7, #8]
 801a80e:	2280      	movs	r2, #128	; 0x80
 801a810:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 801a812:	68bb      	ldr	r3, [r7, #8]
 801a814:	3301      	adds	r3, #1
 801a816:	2200      	movs	r2, #0
 801a818:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 801a81a:	4b54      	ldr	r3, [pc, #336]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a81c:	681b      	ldr	r3, [r3, #0]
 801a81e:	2200      	movs	r2, #0
 801a820:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 801a822:	4b52      	ldr	r3, [pc, #328]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a824:	681b      	ldr	r3, [r3, #0]
 801a826:	2200      	movs	r2, #0
 801a828:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 801a82a:	4b50      	ldr	r3, [pc, #320]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a82c:	681b      	ldr	r3, [r3, #0]
 801a82e:	2200      	movs	r2, #0
 801a830:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 801a832:	4b4e      	ldr	r3, [pc, #312]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a834:	681b      	ldr	r3, [r3, #0]
 801a836:	2200      	movs	r2, #0
 801a838:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 801a83a:	4b4c      	ldr	r3, [pc, #304]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a83c:	681b      	ldr	r3, [r3, #0]
 801a83e:	2200      	movs	r2, #0
 801a840:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 801a842:	4b4a      	ldr	r3, [pc, #296]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a844:	681b      	ldr	r3, [r3, #0]
 801a846:	2200      	movs	r2, #0
 801a848:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 801a84a:	4b48      	ldr	r3, [pc, #288]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a84c:	681b      	ldr	r3, [r3, #0]
 801a84e:	2200      	movs	r2, #0
 801a850:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 801a852:	4b46      	ldr	r3, [pc, #280]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	2200      	movs	r2, #0
 801a858:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 801a85a:	4b44      	ldr	r3, [pc, #272]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a85c:	681b      	ldr	r3, [r3, #0]
 801a85e:	2200      	movs	r2, #0
 801a860:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 801a862:	4b42      	ldr	r3, [pc, #264]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a864:	681b      	ldr	r3, [r3, #0]
 801a866:	2200      	movs	r2, #0
 801a868:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 801a86a:	4b40      	ldr	r3, [pc, #256]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	2200      	movs	r2, #0
 801a870:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 801a872:	4b3e      	ldr	r3, [pc, #248]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a874:	681b      	ldr	r3, [r3, #0]
 801a876:	2200      	movs	r2, #0
 801a878:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 801a87a:	4b3c      	ldr	r3, [pc, #240]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a87c:	681b      	ldr	r3, [r3, #0]
 801a87e:	2200      	movs	r2, #0
 801a880:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 801a882:	4b3a      	ldr	r3, [pc, #232]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a884:	681b      	ldr	r3, [r3, #0]
 801a886:	2200      	movs	r2, #0
 801a888:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 801a88a:	4b38      	ldr	r3, [pc, #224]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a88c:	681b      	ldr	r3, [r3, #0]
 801a88e:	2200      	movs	r2, #0
 801a890:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 801a892:	4b36      	ldr	r3, [pc, #216]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a894:	681b      	ldr	r3, [r3, #0]
 801a896:	2200      	movs	r2, #0
 801a898:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 801a89a:	4b34      	ldr	r3, [pc, #208]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a89c:	681b      	ldr	r3, [r3, #0]
 801a89e:	4a35      	ldr	r2, [pc, #212]	; (801a974 <makeDHCPMSG+0x1e8>)
 801a8a0:	7812      	ldrb	r2, [r2, #0]
 801a8a2:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 801a8a4:	4b31      	ldr	r3, [pc, #196]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a8a6:	681b      	ldr	r3, [r3, #0]
 801a8a8:	4a32      	ldr	r2, [pc, #200]	; (801a974 <makeDHCPMSG+0x1e8>)
 801a8aa:	7852      	ldrb	r2, [r2, #1]
 801a8ac:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 801a8ae:	4b2f      	ldr	r3, [pc, #188]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a8b0:	681b      	ldr	r3, [r3, #0]
 801a8b2:	4a30      	ldr	r2, [pc, #192]	; (801a974 <makeDHCPMSG+0x1e8>)
 801a8b4:	7892      	ldrb	r2, [r2, #2]
 801a8b6:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 801a8b8:	4b2c      	ldr	r3, [pc, #176]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a8ba:	681b      	ldr	r3, [r3, #0]
 801a8bc:	4a2d      	ldr	r2, [pc, #180]	; (801a974 <makeDHCPMSG+0x1e8>)
 801a8be:	78d2      	ldrb	r2, [r2, #3]
 801a8c0:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 801a8c2:	4b2a      	ldr	r3, [pc, #168]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a8c4:	681b      	ldr	r3, [r3, #0]
 801a8c6:	4a2b      	ldr	r2, [pc, #172]	; (801a974 <makeDHCPMSG+0x1e8>)
 801a8c8:	7912      	ldrb	r2, [r2, #4]
 801a8ca:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 801a8ce:	4b27      	ldr	r3, [pc, #156]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a8d0:	681b      	ldr	r3, [r3, #0]
 801a8d2:	4a28      	ldr	r2, [pc, #160]	; (801a974 <makeDHCPMSG+0x1e8>)
 801a8d4:	7952      	ldrb	r2, [r2, #5]
 801a8d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 801a8da:	2306      	movs	r3, #6
 801a8dc:	73fb      	strb	r3, [r7, #15]
 801a8de:	e008      	b.n	801a8f2 <makeDHCPMSG+0x166>
 801a8e0:	4b22      	ldr	r3, [pc, #136]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a8e2:	681a      	ldr	r2, [r3, #0]
 801a8e4:	7bfb      	ldrb	r3, [r7, #15]
 801a8e6:	4413      	add	r3, r2
 801a8e8:	2200      	movs	r2, #0
 801a8ea:	771a      	strb	r2, [r3, #28]
 801a8ec:	7bfb      	ldrb	r3, [r7, #15]
 801a8ee:	3301      	adds	r3, #1
 801a8f0:	73fb      	strb	r3, [r7, #15]
 801a8f2:	7bfb      	ldrb	r3, [r7, #15]
 801a8f4:	2b0f      	cmp	r3, #15
 801a8f6:	d9f3      	bls.n	801a8e0 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 801a8f8:	2300      	movs	r3, #0
 801a8fa:	73fb      	strb	r3, [r7, #15]
 801a8fc:	e009      	b.n	801a912 <makeDHCPMSG+0x186>
 801a8fe:	4b1b      	ldr	r3, [pc, #108]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a900:	681a      	ldr	r2, [r3, #0]
 801a902:	7bfb      	ldrb	r3, [r7, #15]
 801a904:	4413      	add	r3, r2
 801a906:	2200      	movs	r2, #0
 801a908:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 801a90c:	7bfb      	ldrb	r3, [r7, #15]
 801a90e:	3301      	adds	r3, #1
 801a910:	73fb      	strb	r3, [r7, #15]
 801a912:	7bfb      	ldrb	r3, [r7, #15]
 801a914:	2b3f      	cmp	r3, #63	; 0x3f
 801a916:	d9f2      	bls.n	801a8fe <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 801a918:	2300      	movs	r3, #0
 801a91a:	73fb      	strb	r3, [r7, #15]
 801a91c:	e009      	b.n	801a932 <makeDHCPMSG+0x1a6>
 801a91e:	4b13      	ldr	r3, [pc, #76]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a920:	681a      	ldr	r2, [r3, #0]
 801a922:	7bfb      	ldrb	r3, [r7, #15]
 801a924:	4413      	add	r3, r2
 801a926:	2200      	movs	r2, #0
 801a928:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 801a92c:	7bfb      	ldrb	r3, [r7, #15]
 801a92e:	3301      	adds	r3, #1
 801a930:	73fb      	strb	r3, [r7, #15]
 801a932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a936:	2b00      	cmp	r3, #0
 801a938:	daf1      	bge.n	801a91e <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 801a93a:	4b0c      	ldr	r3, [pc, #48]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a93c:	681b      	ldr	r3, [r3, #0]
 801a93e:	2263      	movs	r2, #99	; 0x63
 801a940:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 801a944:	4b09      	ldr	r3, [pc, #36]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a946:	681b      	ldr	r3, [r3, #0]
 801a948:	2282      	movs	r2, #130	; 0x82
 801a94a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 801a94e:	4b07      	ldr	r3, [pc, #28]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a950:	681b      	ldr	r3, [r3, #0]
 801a952:	2253      	movs	r2, #83	; 0x53
 801a954:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 801a958:	4b04      	ldr	r3, [pc, #16]	; (801a96c <makeDHCPMSG+0x1e0>)
 801a95a:	681b      	ldr	r3, [r3, #0]
 801a95c:	2263      	movs	r2, #99	; 0x63
 801a95e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 801a962:	bf00      	nop
 801a964:	3710      	adds	r7, #16
 801a966:	46bd      	mov	sp, r7
 801a968:	bd80      	pop	{r7, pc}
 801a96a:	bf00      	nop
 801a96c:	200009ac 	.word	0x200009ac
 801a970:	200009a8 	.word	0x200009a8
 801a974:	200009b0 	.word	0x200009b0

0801a978 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 801a978:	b5b0      	push	{r4, r5, r7, lr}
 801a97a:	b084      	sub	sp, #16
 801a97c:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 801a97e:	2300      	movs	r3, #0
 801a980:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 801a982:	f7ff ff03 	bl	801a78c <makeDHCPMSG>
   DHCP_SIP[0]=0;
 801a986:	4b56      	ldr	r3, [pc, #344]	; (801aae0 <send_DHCP_DISCOVER+0x168>)
 801a988:	2200      	movs	r2, #0
 801a98a:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 801a98c:	4b54      	ldr	r3, [pc, #336]	; (801aae0 <send_DHCP_DISCOVER+0x168>)
 801a98e:	2200      	movs	r2, #0
 801a990:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 801a992:	4b53      	ldr	r3, [pc, #332]	; (801aae0 <send_DHCP_DISCOVER+0x168>)
 801a994:	2200      	movs	r2, #0
 801a996:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 801a998:	4b51      	ldr	r3, [pc, #324]	; (801aae0 <send_DHCP_DISCOVER+0x168>)
 801a99a:	2200      	movs	r2, #0
 801a99c:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 801a99e:	4b51      	ldr	r3, [pc, #324]	; (801aae4 <send_DHCP_DISCOVER+0x16c>)
 801a9a0:	2200      	movs	r2, #0
 801a9a2:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 801a9a4:	4b4f      	ldr	r3, [pc, #316]	; (801aae4 <send_DHCP_DISCOVER+0x16c>)
 801a9a6:	2200      	movs	r2, #0
 801a9a8:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 801a9aa:	4b4e      	ldr	r3, [pc, #312]	; (801aae4 <send_DHCP_DISCOVER+0x16c>)
 801a9ac:	2200      	movs	r2, #0
 801a9ae:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 801a9b0:	4b4c      	ldr	r3, [pc, #304]	; (801aae4 <send_DHCP_DISCOVER+0x16c>)
 801a9b2:	2200      	movs	r2, #0
 801a9b4:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 801a9b6:	2304      	movs	r3, #4
 801a9b8:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801a9ba:	4b4b      	ldr	r3, [pc, #300]	; (801aae8 <send_DHCP_DISCOVER+0x170>)
 801a9bc:	681a      	ldr	r2, [r3, #0]
 801a9be:	88bb      	ldrh	r3, [r7, #4]
 801a9c0:	1c59      	adds	r1, r3, #1
 801a9c2:	80b9      	strh	r1, [r7, #4]
 801a9c4:	4413      	add	r3, r2
 801a9c6:	2235      	movs	r2, #53	; 0x35
 801a9c8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801a9cc:	4b46      	ldr	r3, [pc, #280]	; (801aae8 <send_DHCP_DISCOVER+0x170>)
 801a9ce:	681a      	ldr	r2, [r3, #0]
 801a9d0:	88bb      	ldrh	r3, [r7, #4]
 801a9d2:	1c59      	adds	r1, r3, #1
 801a9d4:	80b9      	strh	r1, [r7, #4]
 801a9d6:	4413      	add	r3, r2
 801a9d8:	2201      	movs	r2, #1
 801a9da:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 801a9de:	4b42      	ldr	r3, [pc, #264]	; (801aae8 <send_DHCP_DISCOVER+0x170>)
 801a9e0:	681a      	ldr	r2, [r3, #0]
 801a9e2:	88bb      	ldrh	r3, [r7, #4]
 801a9e4:	1c59      	adds	r1, r3, #1
 801a9e6:	80b9      	strh	r1, [r7, #4]
 801a9e8:	4413      	add	r3, r2
 801a9ea:	2201      	movs	r2, #1
 801a9ec:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 801a9f0:	4b3d      	ldr	r3, [pc, #244]	; (801aae8 <send_DHCP_DISCOVER+0x170>)
 801a9f2:	681a      	ldr	r2, [r3, #0]
 801a9f4:	88bb      	ldrh	r3, [r7, #4]
 801a9f6:	1c59      	adds	r1, r3, #1
 801a9f8:	80b9      	strh	r1, [r7, #4]
 801a9fa:	4413      	add	r3, r2
 801a9fc:	223d      	movs	r2, #61	; 0x3d
 801a9fe:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 801aa02:	4b39      	ldr	r3, [pc, #228]	; (801aae8 <send_DHCP_DISCOVER+0x170>)
 801aa04:	681a      	ldr	r2, [r3, #0]
 801aa06:	88bb      	ldrh	r3, [r7, #4]
 801aa08:	1c59      	adds	r1, r3, #1
 801aa0a:	80b9      	strh	r1, [r7, #4]
 801aa0c:	4413      	add	r3, r2
 801aa0e:	2207      	movs	r2, #7
 801aa10:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801aa14:	4b34      	ldr	r3, [pc, #208]	; (801aae8 <send_DHCP_DISCOVER+0x170>)
 801aa16:	681a      	ldr	r2, [r3, #0]
 801aa18:	88bb      	ldrh	r3, [r7, #4]
 801aa1a:	1c59      	adds	r1, r3, #1
 801aa1c:	80b9      	strh	r1, [r7, #4]
 801aa1e:	4413      	add	r3, r2
 801aa20:	2201      	movs	r2, #1
 801aa22:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801aa26:	4b30      	ldr	r3, [pc, #192]	; (801aae8 <send_DHCP_DISCOVER+0x170>)
 801aa28:	681a      	ldr	r2, [r3, #0]
 801aa2a:	88bb      	ldrh	r3, [r7, #4]
 801aa2c:	1c59      	adds	r1, r3, #1
 801aa2e:	80b9      	strh	r1, [r7, #4]
 801aa30:	4618      	mov	r0, r3
 801aa32:	4b2e      	ldr	r3, [pc, #184]	; (801aaec <send_DHCP_DISCOVER+0x174>)
 801aa34:	7819      	ldrb	r1, [r3, #0]
 801aa36:	1813      	adds	r3, r2, r0
 801aa38:	460a      	mov	r2, r1
 801aa3a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801aa3e:	4b2a      	ldr	r3, [pc, #168]	; (801aae8 <send_DHCP_DISCOVER+0x170>)
 801aa40:	681a      	ldr	r2, [r3, #0]
 801aa42:	88bb      	ldrh	r3, [r7, #4]
 801aa44:	1c59      	adds	r1, r3, #1
 801aa46:	80b9      	strh	r1, [r7, #4]
 801aa48:	4618      	mov	r0, r3
 801aa4a:	4b28      	ldr	r3, [pc, #160]	; (801aaec <send_DHCP_DISCOVER+0x174>)
 801aa4c:	7859      	ldrb	r1, [r3, #1]
 801aa4e:	1813      	adds	r3, r2, r0
 801aa50:	460a      	mov	r2, r1
 801aa52:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801aa56:	4b24      	ldr	r3, [pc, #144]	; (801aae8 <send_DHCP_DISCOVER+0x170>)
 801aa58:	681a      	ldr	r2, [r3, #0]
 801aa5a:	88bb      	ldrh	r3, [r7, #4]
 801aa5c:	1c59      	adds	r1, r3, #1
 801aa5e:	80b9      	strh	r1, [r7, #4]
 801aa60:	4618      	mov	r0, r3
 801aa62:	4b22      	ldr	r3, [pc, #136]	; (801aaec <send_DHCP_DISCOVER+0x174>)
 801aa64:	7899      	ldrb	r1, [r3, #2]
 801aa66:	1813      	adds	r3, r2, r0
 801aa68:	460a      	mov	r2, r1
 801aa6a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801aa6e:	4b1e      	ldr	r3, [pc, #120]	; (801aae8 <send_DHCP_DISCOVER+0x170>)
 801aa70:	681a      	ldr	r2, [r3, #0]
 801aa72:	88bb      	ldrh	r3, [r7, #4]
 801aa74:	1c59      	adds	r1, r3, #1
 801aa76:	80b9      	strh	r1, [r7, #4]
 801aa78:	4618      	mov	r0, r3
 801aa7a:	4b1c      	ldr	r3, [pc, #112]	; (801aaec <send_DHCP_DISCOVER+0x174>)
 801aa7c:	78d9      	ldrb	r1, [r3, #3]
 801aa7e:	1813      	adds	r3, r2, r0
 801aa80:	460a      	mov	r2, r1
 801aa82:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801aa86:	4b18      	ldr	r3, [pc, #96]	; (801aae8 <send_DHCP_DISCOVER+0x170>)
 801aa88:	681a      	ldr	r2, [r3, #0]
 801aa8a:	88bb      	ldrh	r3, [r7, #4]
 801aa8c:	1c59      	adds	r1, r3, #1
 801aa8e:	80b9      	strh	r1, [r7, #4]
 801aa90:	4618      	mov	r0, r3
 801aa92:	4b16      	ldr	r3, [pc, #88]	; (801aaec <send_DHCP_DISCOVER+0x174>)
 801aa94:	7919      	ldrb	r1, [r3, #4]
 801aa96:	1813      	adds	r3, r2, r0
 801aa98:	460a      	mov	r2, r1
 801aa9a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801aa9e:	4b12      	ldr	r3, [pc, #72]	; (801aae8 <send_DHCP_DISCOVER+0x170>)
 801aaa0:	681a      	ldr	r2, [r3, #0]
 801aaa2:	88bb      	ldrh	r3, [r7, #4]
 801aaa4:	1c59      	adds	r1, r3, #1
 801aaa6:	80b9      	strh	r1, [r7, #4]
 801aaa8:	4618      	mov	r0, r3
 801aaaa:	4b10      	ldr	r3, [pc, #64]	; (801aaec <send_DHCP_DISCOVER+0x174>)
 801aaac:	7959      	ldrb	r1, [r3, #5]
 801aaae:	1813      	adds	r3, r2, r0
 801aab0:	460a      	mov	r2, r1
 801aab2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 801aab6:	4b0c      	ldr	r3, [pc, #48]	; (801aae8 <send_DHCP_DISCOVER+0x170>)
 801aab8:	681a      	ldr	r2, [r3, #0]
 801aaba:	88bb      	ldrh	r3, [r7, #4]
 801aabc:	1c59      	adds	r1, r3, #1
 801aabe:	80b9      	strh	r1, [r7, #4]
 801aac0:	4413      	add	r3, r2
 801aac2:	220c      	movs	r2, #12
 801aac4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 801aac8:	4b07      	ldr	r3, [pc, #28]	; (801aae8 <send_DHCP_DISCOVER+0x170>)
 801aaca:	681a      	ldr	r2, [r3, #0]
 801aacc:	88bb      	ldrh	r3, [r7, #4]
 801aace:	1c59      	adds	r1, r3, #1
 801aad0:	80b9      	strh	r1, [r7, #4]
 801aad2:	4413      	add	r3, r2
 801aad4:	2200      	movs	r2, #0
 801aad6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801aada:	2300      	movs	r3, #0
 801aadc:	80fb      	strh	r3, [r7, #6]
 801aade:	e017      	b.n	801ab10 <send_DHCP_DISCOVER+0x198>
 801aae0:	20000984 	.word	0x20000984
 801aae4:	20000988 	.word	0x20000988
 801aae8:	200009ac 	.word	0x200009ac
 801aaec:	200009b0 	.word	0x200009b0
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801aaf0:	88f9      	ldrh	r1, [r7, #6]
 801aaf2:	4b80      	ldr	r3, [pc, #512]	; (801acf4 <send_DHCP_DISCOVER+0x37c>)
 801aaf4:	681a      	ldr	r2, [r3, #0]
 801aaf6:	88bb      	ldrh	r3, [r7, #4]
 801aaf8:	1c58      	adds	r0, r3, #1
 801aafa:	80b8      	strh	r0, [r7, #4]
 801aafc:	4618      	mov	r0, r3
 801aafe:	4b7e      	ldr	r3, [pc, #504]	; (801acf8 <send_DHCP_DISCOVER+0x380>)
 801ab00:	5c59      	ldrb	r1, [r3, r1]
 801ab02:	1813      	adds	r3, r2, r0
 801ab04:	460a      	mov	r2, r1
 801ab06:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801ab0a:	88fb      	ldrh	r3, [r7, #6]
 801ab0c:	3301      	adds	r3, #1
 801ab0e:	80fb      	strh	r3, [r7, #6]
 801ab10:	88fb      	ldrh	r3, [r7, #6]
 801ab12:	4a79      	ldr	r2, [pc, #484]	; (801acf8 <send_DHCP_DISCOVER+0x380>)
 801ab14:	5cd3      	ldrb	r3, [r2, r3]
 801ab16:	2b00      	cmp	r3, #0
 801ab18:	d1ea      	bne.n	801aaf0 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 801ab1a:	4b78      	ldr	r3, [pc, #480]	; (801acfc <send_DHCP_DISCOVER+0x384>)
 801ab1c:	78db      	ldrb	r3, [r3, #3]
 801ab1e:	091b      	lsrs	r3, r3, #4
 801ab20:	b2da      	uxtb	r2, r3
 801ab22:	4b74      	ldr	r3, [pc, #464]	; (801acf4 <send_DHCP_DISCOVER+0x37c>)
 801ab24:	681c      	ldr	r4, [r3, #0]
 801ab26:	88bb      	ldrh	r3, [r7, #4]
 801ab28:	1c59      	adds	r1, r3, #1
 801ab2a:	80b9      	strh	r1, [r7, #4]
 801ab2c:	461d      	mov	r5, r3
 801ab2e:	4610      	mov	r0, r2
 801ab30:	f001 f9e4 	bl	801befc <NibbleToHex>
 801ab34:	4603      	mov	r3, r0
 801ab36:	461a      	mov	r2, r3
 801ab38:	1963      	adds	r3, r4, r5
 801ab3a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 801ab3e:	4b6f      	ldr	r3, [pc, #444]	; (801acfc <send_DHCP_DISCOVER+0x384>)
 801ab40:	78da      	ldrb	r2, [r3, #3]
 801ab42:	4b6c      	ldr	r3, [pc, #432]	; (801acf4 <send_DHCP_DISCOVER+0x37c>)
 801ab44:	681c      	ldr	r4, [r3, #0]
 801ab46:	88bb      	ldrh	r3, [r7, #4]
 801ab48:	1c59      	adds	r1, r3, #1
 801ab4a:	80b9      	strh	r1, [r7, #4]
 801ab4c:	461d      	mov	r5, r3
 801ab4e:	4610      	mov	r0, r2
 801ab50:	f001 f9d4 	bl	801befc <NibbleToHex>
 801ab54:	4603      	mov	r3, r0
 801ab56:	461a      	mov	r2, r3
 801ab58:	1963      	adds	r3, r4, r5
 801ab5a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 801ab5e:	4b67      	ldr	r3, [pc, #412]	; (801acfc <send_DHCP_DISCOVER+0x384>)
 801ab60:	791b      	ldrb	r3, [r3, #4]
 801ab62:	091b      	lsrs	r3, r3, #4
 801ab64:	b2da      	uxtb	r2, r3
 801ab66:	4b63      	ldr	r3, [pc, #396]	; (801acf4 <send_DHCP_DISCOVER+0x37c>)
 801ab68:	681c      	ldr	r4, [r3, #0]
 801ab6a:	88bb      	ldrh	r3, [r7, #4]
 801ab6c:	1c59      	adds	r1, r3, #1
 801ab6e:	80b9      	strh	r1, [r7, #4]
 801ab70:	461d      	mov	r5, r3
 801ab72:	4610      	mov	r0, r2
 801ab74:	f001 f9c2 	bl	801befc <NibbleToHex>
 801ab78:	4603      	mov	r3, r0
 801ab7a:	461a      	mov	r2, r3
 801ab7c:	1963      	adds	r3, r4, r5
 801ab7e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 801ab82:	4b5e      	ldr	r3, [pc, #376]	; (801acfc <send_DHCP_DISCOVER+0x384>)
 801ab84:	791a      	ldrb	r2, [r3, #4]
 801ab86:	4b5b      	ldr	r3, [pc, #364]	; (801acf4 <send_DHCP_DISCOVER+0x37c>)
 801ab88:	681c      	ldr	r4, [r3, #0]
 801ab8a:	88bb      	ldrh	r3, [r7, #4]
 801ab8c:	1c59      	adds	r1, r3, #1
 801ab8e:	80b9      	strh	r1, [r7, #4]
 801ab90:	461d      	mov	r5, r3
 801ab92:	4610      	mov	r0, r2
 801ab94:	f001 f9b2 	bl	801befc <NibbleToHex>
 801ab98:	4603      	mov	r3, r0
 801ab9a:	461a      	mov	r2, r3
 801ab9c:	1963      	adds	r3, r4, r5
 801ab9e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 801aba2:	4b56      	ldr	r3, [pc, #344]	; (801acfc <send_DHCP_DISCOVER+0x384>)
 801aba4:	795b      	ldrb	r3, [r3, #5]
 801aba6:	091b      	lsrs	r3, r3, #4
 801aba8:	b2da      	uxtb	r2, r3
 801abaa:	4b52      	ldr	r3, [pc, #328]	; (801acf4 <send_DHCP_DISCOVER+0x37c>)
 801abac:	681c      	ldr	r4, [r3, #0]
 801abae:	88bb      	ldrh	r3, [r7, #4]
 801abb0:	1c59      	adds	r1, r3, #1
 801abb2:	80b9      	strh	r1, [r7, #4]
 801abb4:	461d      	mov	r5, r3
 801abb6:	4610      	mov	r0, r2
 801abb8:	f001 f9a0 	bl	801befc <NibbleToHex>
 801abbc:	4603      	mov	r3, r0
 801abbe:	461a      	mov	r2, r3
 801abc0:	1963      	adds	r3, r4, r5
 801abc2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 801abc6:	4b4d      	ldr	r3, [pc, #308]	; (801acfc <send_DHCP_DISCOVER+0x384>)
 801abc8:	795a      	ldrb	r2, [r3, #5]
 801abca:	4b4a      	ldr	r3, [pc, #296]	; (801acf4 <send_DHCP_DISCOVER+0x37c>)
 801abcc:	681c      	ldr	r4, [r3, #0]
 801abce:	88bb      	ldrh	r3, [r7, #4]
 801abd0:	1c59      	adds	r1, r3, #1
 801abd2:	80b9      	strh	r1, [r7, #4]
 801abd4:	461d      	mov	r5, r3
 801abd6:	4610      	mov	r0, r2
 801abd8:	f001 f990 	bl	801befc <NibbleToHex>
 801abdc:	4603      	mov	r3, r0
 801abde:	461a      	mov	r2, r3
 801abe0:	1963      	adds	r3, r4, r5
 801abe2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 801abe6:	88fb      	ldrh	r3, [r7, #6]
 801abe8:	b2d9      	uxtb	r1, r3
 801abea:	4b42      	ldr	r3, [pc, #264]	; (801acf4 <send_DHCP_DISCOVER+0x37c>)
 801abec:	681a      	ldr	r2, [r3, #0]
 801abee:	88b8      	ldrh	r0, [r7, #4]
 801abf0:	88fb      	ldrh	r3, [r7, #6]
 801abf2:	3307      	adds	r3, #7
 801abf4:	1ac3      	subs	r3, r0, r3
 801abf6:	3106      	adds	r1, #6
 801abf8:	b2c9      	uxtb	r1, r1
 801abfa:	4413      	add	r3, r2
 801abfc:	460a      	mov	r2, r1
 801abfe:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 801ac02:	4b3c      	ldr	r3, [pc, #240]	; (801acf4 <send_DHCP_DISCOVER+0x37c>)
 801ac04:	681a      	ldr	r2, [r3, #0]
 801ac06:	88bb      	ldrh	r3, [r7, #4]
 801ac08:	1c59      	adds	r1, r3, #1
 801ac0a:	80b9      	strh	r1, [r7, #4]
 801ac0c:	4413      	add	r3, r2
 801ac0e:	2237      	movs	r2, #55	; 0x37
 801ac10:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 801ac14:	4b37      	ldr	r3, [pc, #220]	; (801acf4 <send_DHCP_DISCOVER+0x37c>)
 801ac16:	681a      	ldr	r2, [r3, #0]
 801ac18:	88bb      	ldrh	r3, [r7, #4]
 801ac1a:	1c59      	adds	r1, r3, #1
 801ac1c:	80b9      	strh	r1, [r7, #4]
 801ac1e:	4413      	add	r3, r2
 801ac20:	2206      	movs	r2, #6
 801ac22:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 801ac26:	4b33      	ldr	r3, [pc, #204]	; (801acf4 <send_DHCP_DISCOVER+0x37c>)
 801ac28:	681a      	ldr	r2, [r3, #0]
 801ac2a:	88bb      	ldrh	r3, [r7, #4]
 801ac2c:	1c59      	adds	r1, r3, #1
 801ac2e:	80b9      	strh	r1, [r7, #4]
 801ac30:	4413      	add	r3, r2
 801ac32:	2201      	movs	r2, #1
 801ac34:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 801ac38:	4b2e      	ldr	r3, [pc, #184]	; (801acf4 <send_DHCP_DISCOVER+0x37c>)
 801ac3a:	681a      	ldr	r2, [r3, #0]
 801ac3c:	88bb      	ldrh	r3, [r7, #4]
 801ac3e:	1c59      	adds	r1, r3, #1
 801ac40:	80b9      	strh	r1, [r7, #4]
 801ac42:	4413      	add	r3, r2
 801ac44:	2203      	movs	r2, #3
 801ac46:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 801ac4a:	4b2a      	ldr	r3, [pc, #168]	; (801acf4 <send_DHCP_DISCOVER+0x37c>)
 801ac4c:	681a      	ldr	r2, [r3, #0]
 801ac4e:	88bb      	ldrh	r3, [r7, #4]
 801ac50:	1c59      	adds	r1, r3, #1
 801ac52:	80b9      	strh	r1, [r7, #4]
 801ac54:	4413      	add	r3, r2
 801ac56:	2206      	movs	r2, #6
 801ac58:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 801ac5c:	4b25      	ldr	r3, [pc, #148]	; (801acf4 <send_DHCP_DISCOVER+0x37c>)
 801ac5e:	681a      	ldr	r2, [r3, #0]
 801ac60:	88bb      	ldrh	r3, [r7, #4]
 801ac62:	1c59      	adds	r1, r3, #1
 801ac64:	80b9      	strh	r1, [r7, #4]
 801ac66:	4413      	add	r3, r2
 801ac68:	220f      	movs	r2, #15
 801ac6a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 801ac6e:	4b21      	ldr	r3, [pc, #132]	; (801acf4 <send_DHCP_DISCOVER+0x37c>)
 801ac70:	681a      	ldr	r2, [r3, #0]
 801ac72:	88bb      	ldrh	r3, [r7, #4]
 801ac74:	1c59      	adds	r1, r3, #1
 801ac76:	80b9      	strh	r1, [r7, #4]
 801ac78:	4413      	add	r3, r2
 801ac7a:	223a      	movs	r2, #58	; 0x3a
 801ac7c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 801ac80:	4b1c      	ldr	r3, [pc, #112]	; (801acf4 <send_DHCP_DISCOVER+0x37c>)
 801ac82:	681a      	ldr	r2, [r3, #0]
 801ac84:	88bb      	ldrh	r3, [r7, #4]
 801ac86:	1c59      	adds	r1, r3, #1
 801ac88:	80b9      	strh	r1, [r7, #4]
 801ac8a:	4413      	add	r3, r2
 801ac8c:	223b      	movs	r2, #59	; 0x3b
 801ac8e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 801ac92:	4b18      	ldr	r3, [pc, #96]	; (801acf4 <send_DHCP_DISCOVER+0x37c>)
 801ac94:	681a      	ldr	r2, [r3, #0]
 801ac96:	88bb      	ldrh	r3, [r7, #4]
 801ac98:	1c59      	adds	r1, r3, #1
 801ac9a:	80b9      	strh	r1, [r7, #4]
 801ac9c:	4413      	add	r3, r2
 801ac9e:	22ff      	movs	r2, #255	; 0xff
 801aca0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801aca4:	88bb      	ldrh	r3, [r7, #4]
 801aca6:	80fb      	strh	r3, [r7, #6]
 801aca8:	e009      	b.n	801acbe <send_DHCP_DISCOVER+0x346>
 801acaa:	4b12      	ldr	r3, [pc, #72]	; (801acf4 <send_DHCP_DISCOVER+0x37c>)
 801acac:	681a      	ldr	r2, [r3, #0]
 801acae:	88fb      	ldrh	r3, [r7, #6]
 801acb0:	4413      	add	r3, r2
 801acb2:	2200      	movs	r2, #0
 801acb4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801acb8:	88fb      	ldrh	r3, [r7, #6]
 801acba:	3301      	adds	r3, #1
 801acbc:	80fb      	strh	r3, [r7, #6]
 801acbe:	88fb      	ldrh	r3, [r7, #6]
 801acc0:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 801acc4:	d3f1      	bcc.n	801acaa <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 801acc6:	23ff      	movs	r3, #255	; 0xff
 801acc8:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 801acca:	23ff      	movs	r3, #255	; 0xff
 801accc:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 801acce:	23ff      	movs	r3, #255	; 0xff
 801acd0:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 801acd2:	23ff      	movs	r3, #255	; 0xff
 801acd4:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801acd6:	4b0a      	ldr	r3, [pc, #40]	; (801ad00 <send_DHCP_DISCOVER+0x388>)
 801acd8:	7818      	ldrb	r0, [r3, #0]
 801acda:	4b06      	ldr	r3, [pc, #24]	; (801acf4 <send_DHCP_DISCOVER+0x37c>)
 801acdc:	6819      	ldr	r1, [r3, #0]
 801acde:	463b      	mov	r3, r7
 801ace0:	2243      	movs	r2, #67	; 0x43
 801ace2:	9200      	str	r2, [sp, #0]
 801ace4:	f44f 7209 	mov.w	r2, #548	; 0x224
 801ace8:	f7fe fbfc 	bl	80194e4 <sendto>
}
 801acec:	bf00      	nop
 801acee:	3708      	adds	r7, #8
 801acf0:	46bd      	mov	sp, r7
 801acf2:	bdb0      	pop	{r4, r5, r7, pc}
 801acf4:	200009ac 	.word	0x200009ac
 801acf8:	200000f8 	.word	0x200000f8
 801acfc:	200009b0 	.word	0x200009b0
 801ad00:	20000981 	.word	0x20000981

0801ad04 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 801ad04:	b5b0      	push	{r4, r5, r7, lr}
 801ad06:	b086      	sub	sp, #24
 801ad08:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 801ad0a:	2300      	movs	r3, #0
 801ad0c:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 801ad0e:	f7ff fd3d 	bl	801a78c <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 801ad12:	4b1b      	ldr	r3, [pc, #108]	; (801ad80 <send_DHCP_REQUEST+0x7c>)
 801ad14:	f993 3000 	ldrsb.w	r3, [r3]
 801ad18:	2b03      	cmp	r3, #3
 801ad1a:	d004      	beq.n	801ad26 <send_DHCP_REQUEST+0x22>
 801ad1c:	4b18      	ldr	r3, [pc, #96]	; (801ad80 <send_DHCP_REQUEST+0x7c>)
 801ad1e:	f993 3000 	ldrsb.w	r3, [r3]
 801ad22:	2b04      	cmp	r3, #4
 801ad24:	d134      	bne.n	801ad90 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 801ad26:	4b17      	ldr	r3, [pc, #92]	; (801ad84 <send_DHCP_REQUEST+0x80>)
 801ad28:	681b      	ldr	r3, [r3, #0]
 801ad2a:	330a      	adds	r3, #10
 801ad2c:	2200      	movs	r2, #0
 801ad2e:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 801ad30:	4b14      	ldr	r3, [pc, #80]	; (801ad84 <send_DHCP_REQUEST+0x80>)
 801ad32:	681b      	ldr	r3, [r3, #0]
 801ad34:	330a      	adds	r3, #10
 801ad36:	3301      	adds	r3, #1
 801ad38:	2200      	movs	r2, #0
 801ad3a:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 801ad3c:	4b11      	ldr	r3, [pc, #68]	; (801ad84 <send_DHCP_REQUEST+0x80>)
 801ad3e:	681b      	ldr	r3, [r3, #0]
 801ad40:	4a11      	ldr	r2, [pc, #68]	; (801ad88 <send_DHCP_REQUEST+0x84>)
 801ad42:	7812      	ldrb	r2, [r2, #0]
 801ad44:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 801ad46:	4b0f      	ldr	r3, [pc, #60]	; (801ad84 <send_DHCP_REQUEST+0x80>)
 801ad48:	681b      	ldr	r3, [r3, #0]
 801ad4a:	4a0f      	ldr	r2, [pc, #60]	; (801ad88 <send_DHCP_REQUEST+0x84>)
 801ad4c:	7852      	ldrb	r2, [r2, #1]
 801ad4e:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 801ad50:	4b0c      	ldr	r3, [pc, #48]	; (801ad84 <send_DHCP_REQUEST+0x80>)
 801ad52:	681b      	ldr	r3, [r3, #0]
 801ad54:	4a0c      	ldr	r2, [pc, #48]	; (801ad88 <send_DHCP_REQUEST+0x84>)
 801ad56:	7892      	ldrb	r2, [r2, #2]
 801ad58:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 801ad5a:	4b0a      	ldr	r3, [pc, #40]	; (801ad84 <send_DHCP_REQUEST+0x80>)
 801ad5c:	681b      	ldr	r3, [r3, #0]
 801ad5e:	4a0a      	ldr	r2, [pc, #40]	; (801ad88 <send_DHCP_REQUEST+0x84>)
 801ad60:	78d2      	ldrb	r2, [r2, #3]
 801ad62:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 801ad64:	4b09      	ldr	r3, [pc, #36]	; (801ad8c <send_DHCP_REQUEST+0x88>)
 801ad66:	781b      	ldrb	r3, [r3, #0]
 801ad68:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 801ad6a:	4b08      	ldr	r3, [pc, #32]	; (801ad8c <send_DHCP_REQUEST+0x88>)
 801ad6c:	785b      	ldrb	r3, [r3, #1]
 801ad6e:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 801ad70:	4b06      	ldr	r3, [pc, #24]	; (801ad8c <send_DHCP_REQUEST+0x88>)
 801ad72:	789b      	ldrb	r3, [r3, #2]
 801ad74:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 801ad76:	4b05      	ldr	r3, [pc, #20]	; (801ad8c <send_DHCP_REQUEST+0x88>)
 801ad78:	78db      	ldrb	r3, [r3, #3]
 801ad7a:	71fb      	strb	r3, [r7, #7]
 801ad7c:	e010      	b.n	801ada0 <send_DHCP_REQUEST+0x9c>
 801ad7e:	bf00      	nop
 801ad80:	200009a0 	.word	0x200009a0
 801ad84:	200009ac 	.word	0x200009ac
 801ad88:	20000990 	.word	0x20000990
 801ad8c:	20000984 	.word	0x20000984
   }
   else
   {
   	ip[0] = 255;
 801ad90:	23ff      	movs	r3, #255	; 0xff
 801ad92:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 801ad94:	23ff      	movs	r3, #255	; 0xff
 801ad96:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 801ad98:	23ff      	movs	r3, #255	; 0xff
 801ad9a:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 801ad9c:	23ff      	movs	r3, #255	; 0xff
 801ad9e:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 801ada0:	2304      	movs	r3, #4
 801ada2:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801ada4:	4b8d      	ldr	r3, [pc, #564]	; (801afdc <send_DHCP_REQUEST+0x2d8>)
 801ada6:	681a      	ldr	r2, [r3, #0]
 801ada8:	897b      	ldrh	r3, [r7, #10]
 801adaa:	1c59      	adds	r1, r3, #1
 801adac:	8179      	strh	r1, [r7, #10]
 801adae:	4413      	add	r3, r2
 801adb0:	2235      	movs	r2, #53	; 0x35
 801adb2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801adb6:	4b89      	ldr	r3, [pc, #548]	; (801afdc <send_DHCP_REQUEST+0x2d8>)
 801adb8:	681a      	ldr	r2, [r3, #0]
 801adba:	897b      	ldrh	r3, [r7, #10]
 801adbc:	1c59      	adds	r1, r3, #1
 801adbe:	8179      	strh	r1, [r7, #10]
 801adc0:	4413      	add	r3, r2
 801adc2:	2201      	movs	r2, #1
 801adc4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 801adc8:	4b84      	ldr	r3, [pc, #528]	; (801afdc <send_DHCP_REQUEST+0x2d8>)
 801adca:	681a      	ldr	r2, [r3, #0]
 801adcc:	897b      	ldrh	r3, [r7, #10]
 801adce:	1c59      	adds	r1, r3, #1
 801add0:	8179      	strh	r1, [r7, #10]
 801add2:	4413      	add	r3, r2
 801add4:	2203      	movs	r2, #3
 801add6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 801adda:	4b80      	ldr	r3, [pc, #512]	; (801afdc <send_DHCP_REQUEST+0x2d8>)
 801addc:	681a      	ldr	r2, [r3, #0]
 801adde:	897b      	ldrh	r3, [r7, #10]
 801ade0:	1c59      	adds	r1, r3, #1
 801ade2:	8179      	strh	r1, [r7, #10]
 801ade4:	4413      	add	r3, r2
 801ade6:	223d      	movs	r2, #61	; 0x3d
 801ade8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 801adec:	4b7b      	ldr	r3, [pc, #492]	; (801afdc <send_DHCP_REQUEST+0x2d8>)
 801adee:	681a      	ldr	r2, [r3, #0]
 801adf0:	897b      	ldrh	r3, [r7, #10]
 801adf2:	1c59      	adds	r1, r3, #1
 801adf4:	8179      	strh	r1, [r7, #10]
 801adf6:	4413      	add	r3, r2
 801adf8:	2207      	movs	r2, #7
 801adfa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801adfe:	4b77      	ldr	r3, [pc, #476]	; (801afdc <send_DHCP_REQUEST+0x2d8>)
 801ae00:	681a      	ldr	r2, [r3, #0]
 801ae02:	897b      	ldrh	r3, [r7, #10]
 801ae04:	1c59      	adds	r1, r3, #1
 801ae06:	8179      	strh	r1, [r7, #10]
 801ae08:	4413      	add	r3, r2
 801ae0a:	2201      	movs	r2, #1
 801ae0c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801ae10:	4b72      	ldr	r3, [pc, #456]	; (801afdc <send_DHCP_REQUEST+0x2d8>)
 801ae12:	681a      	ldr	r2, [r3, #0]
 801ae14:	897b      	ldrh	r3, [r7, #10]
 801ae16:	1c59      	adds	r1, r3, #1
 801ae18:	8179      	strh	r1, [r7, #10]
 801ae1a:	4618      	mov	r0, r3
 801ae1c:	4b70      	ldr	r3, [pc, #448]	; (801afe0 <send_DHCP_REQUEST+0x2dc>)
 801ae1e:	7819      	ldrb	r1, [r3, #0]
 801ae20:	1813      	adds	r3, r2, r0
 801ae22:	460a      	mov	r2, r1
 801ae24:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801ae28:	4b6c      	ldr	r3, [pc, #432]	; (801afdc <send_DHCP_REQUEST+0x2d8>)
 801ae2a:	681a      	ldr	r2, [r3, #0]
 801ae2c:	897b      	ldrh	r3, [r7, #10]
 801ae2e:	1c59      	adds	r1, r3, #1
 801ae30:	8179      	strh	r1, [r7, #10]
 801ae32:	4618      	mov	r0, r3
 801ae34:	4b6a      	ldr	r3, [pc, #424]	; (801afe0 <send_DHCP_REQUEST+0x2dc>)
 801ae36:	7859      	ldrb	r1, [r3, #1]
 801ae38:	1813      	adds	r3, r2, r0
 801ae3a:	460a      	mov	r2, r1
 801ae3c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801ae40:	4b66      	ldr	r3, [pc, #408]	; (801afdc <send_DHCP_REQUEST+0x2d8>)
 801ae42:	681a      	ldr	r2, [r3, #0]
 801ae44:	897b      	ldrh	r3, [r7, #10]
 801ae46:	1c59      	adds	r1, r3, #1
 801ae48:	8179      	strh	r1, [r7, #10]
 801ae4a:	4618      	mov	r0, r3
 801ae4c:	4b64      	ldr	r3, [pc, #400]	; (801afe0 <send_DHCP_REQUEST+0x2dc>)
 801ae4e:	7899      	ldrb	r1, [r3, #2]
 801ae50:	1813      	adds	r3, r2, r0
 801ae52:	460a      	mov	r2, r1
 801ae54:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801ae58:	4b60      	ldr	r3, [pc, #384]	; (801afdc <send_DHCP_REQUEST+0x2d8>)
 801ae5a:	681a      	ldr	r2, [r3, #0]
 801ae5c:	897b      	ldrh	r3, [r7, #10]
 801ae5e:	1c59      	adds	r1, r3, #1
 801ae60:	8179      	strh	r1, [r7, #10]
 801ae62:	4618      	mov	r0, r3
 801ae64:	4b5e      	ldr	r3, [pc, #376]	; (801afe0 <send_DHCP_REQUEST+0x2dc>)
 801ae66:	78d9      	ldrb	r1, [r3, #3]
 801ae68:	1813      	adds	r3, r2, r0
 801ae6a:	460a      	mov	r2, r1
 801ae6c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801ae70:	4b5a      	ldr	r3, [pc, #360]	; (801afdc <send_DHCP_REQUEST+0x2d8>)
 801ae72:	681a      	ldr	r2, [r3, #0]
 801ae74:	897b      	ldrh	r3, [r7, #10]
 801ae76:	1c59      	adds	r1, r3, #1
 801ae78:	8179      	strh	r1, [r7, #10]
 801ae7a:	4618      	mov	r0, r3
 801ae7c:	4b58      	ldr	r3, [pc, #352]	; (801afe0 <send_DHCP_REQUEST+0x2dc>)
 801ae7e:	7919      	ldrb	r1, [r3, #4]
 801ae80:	1813      	adds	r3, r2, r0
 801ae82:	460a      	mov	r2, r1
 801ae84:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801ae88:	4b54      	ldr	r3, [pc, #336]	; (801afdc <send_DHCP_REQUEST+0x2d8>)
 801ae8a:	681a      	ldr	r2, [r3, #0]
 801ae8c:	897b      	ldrh	r3, [r7, #10]
 801ae8e:	1c59      	adds	r1, r3, #1
 801ae90:	8179      	strh	r1, [r7, #10]
 801ae92:	4618      	mov	r0, r3
 801ae94:	4b52      	ldr	r3, [pc, #328]	; (801afe0 <send_DHCP_REQUEST+0x2dc>)
 801ae96:	7959      	ldrb	r1, [r3, #5]
 801ae98:	1813      	adds	r3, r2, r0
 801ae9a:	460a      	mov	r2, r1
 801ae9c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 801aea0:	79fb      	ldrb	r3, [r7, #7]
 801aea2:	2bff      	cmp	r3, #255	; 0xff
 801aea4:	f040 8084 	bne.w	801afb0 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 801aea8:	4b4c      	ldr	r3, [pc, #304]	; (801afdc <send_DHCP_REQUEST+0x2d8>)
 801aeaa:	681a      	ldr	r2, [r3, #0]
 801aeac:	897b      	ldrh	r3, [r7, #10]
 801aeae:	1c59      	adds	r1, r3, #1
 801aeb0:	8179      	strh	r1, [r7, #10]
 801aeb2:	4413      	add	r3, r2
 801aeb4:	2232      	movs	r2, #50	; 0x32
 801aeb6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 801aeba:	4b48      	ldr	r3, [pc, #288]	; (801afdc <send_DHCP_REQUEST+0x2d8>)
 801aebc:	681a      	ldr	r2, [r3, #0]
 801aebe:	897b      	ldrh	r3, [r7, #10]
 801aec0:	1c59      	adds	r1, r3, #1
 801aec2:	8179      	strh	r1, [r7, #10]
 801aec4:	4413      	add	r3, r2
 801aec6:	2204      	movs	r2, #4
 801aec8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 801aecc:	4b43      	ldr	r3, [pc, #268]	; (801afdc <send_DHCP_REQUEST+0x2d8>)
 801aece:	681a      	ldr	r2, [r3, #0]
 801aed0:	897b      	ldrh	r3, [r7, #10]
 801aed2:	1c59      	adds	r1, r3, #1
 801aed4:	8179      	strh	r1, [r7, #10]
 801aed6:	4618      	mov	r0, r3
 801aed8:	4b42      	ldr	r3, [pc, #264]	; (801afe4 <send_DHCP_REQUEST+0x2e0>)
 801aeda:	7819      	ldrb	r1, [r3, #0]
 801aedc:	1813      	adds	r3, r2, r0
 801aede:	460a      	mov	r2, r1
 801aee0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 801aee4:	4b3d      	ldr	r3, [pc, #244]	; (801afdc <send_DHCP_REQUEST+0x2d8>)
 801aee6:	681a      	ldr	r2, [r3, #0]
 801aee8:	897b      	ldrh	r3, [r7, #10]
 801aeea:	1c59      	adds	r1, r3, #1
 801aeec:	8179      	strh	r1, [r7, #10]
 801aeee:	4618      	mov	r0, r3
 801aef0:	4b3c      	ldr	r3, [pc, #240]	; (801afe4 <send_DHCP_REQUEST+0x2e0>)
 801aef2:	7859      	ldrb	r1, [r3, #1]
 801aef4:	1813      	adds	r3, r2, r0
 801aef6:	460a      	mov	r2, r1
 801aef8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 801aefc:	4b37      	ldr	r3, [pc, #220]	; (801afdc <send_DHCP_REQUEST+0x2d8>)
 801aefe:	681a      	ldr	r2, [r3, #0]
 801af00:	897b      	ldrh	r3, [r7, #10]
 801af02:	1c59      	adds	r1, r3, #1
 801af04:	8179      	strh	r1, [r7, #10]
 801af06:	4618      	mov	r0, r3
 801af08:	4b36      	ldr	r3, [pc, #216]	; (801afe4 <send_DHCP_REQUEST+0x2e0>)
 801af0a:	7899      	ldrb	r1, [r3, #2]
 801af0c:	1813      	adds	r3, r2, r0
 801af0e:	460a      	mov	r2, r1
 801af10:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 801af14:	4b31      	ldr	r3, [pc, #196]	; (801afdc <send_DHCP_REQUEST+0x2d8>)
 801af16:	681a      	ldr	r2, [r3, #0]
 801af18:	897b      	ldrh	r3, [r7, #10]
 801af1a:	1c59      	adds	r1, r3, #1
 801af1c:	8179      	strh	r1, [r7, #10]
 801af1e:	4618      	mov	r0, r3
 801af20:	4b30      	ldr	r3, [pc, #192]	; (801afe4 <send_DHCP_REQUEST+0x2e0>)
 801af22:	78d9      	ldrb	r1, [r3, #3]
 801af24:	1813      	adds	r3, r2, r0
 801af26:	460a      	mov	r2, r1
 801af28:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 801af2c:	4b2b      	ldr	r3, [pc, #172]	; (801afdc <send_DHCP_REQUEST+0x2d8>)
 801af2e:	681a      	ldr	r2, [r3, #0]
 801af30:	897b      	ldrh	r3, [r7, #10]
 801af32:	1c59      	adds	r1, r3, #1
 801af34:	8179      	strh	r1, [r7, #10]
 801af36:	4413      	add	r3, r2
 801af38:	2236      	movs	r2, #54	; 0x36
 801af3a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 801af3e:	4b27      	ldr	r3, [pc, #156]	; (801afdc <send_DHCP_REQUEST+0x2d8>)
 801af40:	681a      	ldr	r2, [r3, #0]
 801af42:	897b      	ldrh	r3, [r7, #10]
 801af44:	1c59      	adds	r1, r3, #1
 801af46:	8179      	strh	r1, [r7, #10]
 801af48:	4413      	add	r3, r2
 801af4a:	2204      	movs	r2, #4
 801af4c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 801af50:	4b22      	ldr	r3, [pc, #136]	; (801afdc <send_DHCP_REQUEST+0x2d8>)
 801af52:	681a      	ldr	r2, [r3, #0]
 801af54:	897b      	ldrh	r3, [r7, #10]
 801af56:	1c59      	adds	r1, r3, #1
 801af58:	8179      	strh	r1, [r7, #10]
 801af5a:	4618      	mov	r0, r3
 801af5c:	4b22      	ldr	r3, [pc, #136]	; (801afe8 <send_DHCP_REQUEST+0x2e4>)
 801af5e:	7819      	ldrb	r1, [r3, #0]
 801af60:	1813      	adds	r3, r2, r0
 801af62:	460a      	mov	r2, r1
 801af64:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 801af68:	4b1c      	ldr	r3, [pc, #112]	; (801afdc <send_DHCP_REQUEST+0x2d8>)
 801af6a:	681a      	ldr	r2, [r3, #0]
 801af6c:	897b      	ldrh	r3, [r7, #10]
 801af6e:	1c59      	adds	r1, r3, #1
 801af70:	8179      	strh	r1, [r7, #10]
 801af72:	4618      	mov	r0, r3
 801af74:	4b1c      	ldr	r3, [pc, #112]	; (801afe8 <send_DHCP_REQUEST+0x2e4>)
 801af76:	7859      	ldrb	r1, [r3, #1]
 801af78:	1813      	adds	r3, r2, r0
 801af7a:	460a      	mov	r2, r1
 801af7c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 801af80:	4b16      	ldr	r3, [pc, #88]	; (801afdc <send_DHCP_REQUEST+0x2d8>)
 801af82:	681a      	ldr	r2, [r3, #0]
 801af84:	897b      	ldrh	r3, [r7, #10]
 801af86:	1c59      	adds	r1, r3, #1
 801af88:	8179      	strh	r1, [r7, #10]
 801af8a:	4618      	mov	r0, r3
 801af8c:	4b16      	ldr	r3, [pc, #88]	; (801afe8 <send_DHCP_REQUEST+0x2e4>)
 801af8e:	7899      	ldrb	r1, [r3, #2]
 801af90:	1813      	adds	r3, r2, r0
 801af92:	460a      	mov	r2, r1
 801af94:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 801af98:	4b10      	ldr	r3, [pc, #64]	; (801afdc <send_DHCP_REQUEST+0x2d8>)
 801af9a:	681a      	ldr	r2, [r3, #0]
 801af9c:	897b      	ldrh	r3, [r7, #10]
 801af9e:	1c59      	adds	r1, r3, #1
 801afa0:	8179      	strh	r1, [r7, #10]
 801afa2:	4618      	mov	r0, r3
 801afa4:	4b10      	ldr	r3, [pc, #64]	; (801afe8 <send_DHCP_REQUEST+0x2e4>)
 801afa6:	78d9      	ldrb	r1, [r3, #3]
 801afa8:	1813      	adds	r3, r2, r0
 801afaa:	460a      	mov	r2, r1
 801afac:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 801afb0:	4b0a      	ldr	r3, [pc, #40]	; (801afdc <send_DHCP_REQUEST+0x2d8>)
 801afb2:	681a      	ldr	r2, [r3, #0]
 801afb4:	897b      	ldrh	r3, [r7, #10]
 801afb6:	1c59      	adds	r1, r3, #1
 801afb8:	8179      	strh	r1, [r7, #10]
 801afba:	4413      	add	r3, r2
 801afbc:	220c      	movs	r2, #12
 801afbe:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 801afc2:	4b06      	ldr	r3, [pc, #24]	; (801afdc <send_DHCP_REQUEST+0x2d8>)
 801afc4:	681a      	ldr	r2, [r3, #0]
 801afc6:	897b      	ldrh	r3, [r7, #10]
 801afc8:	1c59      	adds	r1, r3, #1
 801afca:	8179      	strh	r1, [r7, #10]
 801afcc:	4413      	add	r3, r2
 801afce:	2200      	movs	r2, #0
 801afd0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801afd4:	2300      	movs	r3, #0
 801afd6:	60fb      	str	r3, [r7, #12]
 801afd8:	e019      	b.n	801b00e <send_DHCP_REQUEST+0x30a>
 801afda:	bf00      	nop
 801afdc:	200009ac 	.word	0x200009ac
 801afe0:	200009b0 	.word	0x200009b0
 801afe4:	20000990 	.word	0x20000990
 801afe8:	20000984 	.word	0x20000984
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801afec:	4b86      	ldr	r3, [pc, #536]	; (801b208 <send_DHCP_REQUEST+0x504>)
 801afee:	681a      	ldr	r2, [r3, #0]
 801aff0:	897b      	ldrh	r3, [r7, #10]
 801aff2:	1c59      	adds	r1, r3, #1
 801aff4:	8179      	strh	r1, [r7, #10]
 801aff6:	4618      	mov	r0, r3
 801aff8:	4984      	ldr	r1, [pc, #528]	; (801b20c <send_DHCP_REQUEST+0x508>)
 801affa:	68fb      	ldr	r3, [r7, #12]
 801affc:	440b      	add	r3, r1
 801affe:	7819      	ldrb	r1, [r3, #0]
 801b000:	1813      	adds	r3, r2, r0
 801b002:	460a      	mov	r2, r1
 801b004:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801b008:	68fb      	ldr	r3, [r7, #12]
 801b00a:	3301      	adds	r3, #1
 801b00c:	60fb      	str	r3, [r7, #12]
 801b00e:	4a7f      	ldr	r2, [pc, #508]	; (801b20c <send_DHCP_REQUEST+0x508>)
 801b010:	68fb      	ldr	r3, [r7, #12]
 801b012:	4413      	add	r3, r2
 801b014:	781b      	ldrb	r3, [r3, #0]
 801b016:	2b00      	cmp	r3, #0
 801b018:	d1e8      	bne.n	801afec <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 801b01a:	4b7d      	ldr	r3, [pc, #500]	; (801b210 <send_DHCP_REQUEST+0x50c>)
 801b01c:	78db      	ldrb	r3, [r3, #3]
 801b01e:	091b      	lsrs	r3, r3, #4
 801b020:	b2da      	uxtb	r2, r3
 801b022:	4b79      	ldr	r3, [pc, #484]	; (801b208 <send_DHCP_REQUEST+0x504>)
 801b024:	681c      	ldr	r4, [r3, #0]
 801b026:	897b      	ldrh	r3, [r7, #10]
 801b028:	1c59      	adds	r1, r3, #1
 801b02a:	8179      	strh	r1, [r7, #10]
 801b02c:	461d      	mov	r5, r3
 801b02e:	4610      	mov	r0, r2
 801b030:	f000 ff64 	bl	801befc <NibbleToHex>
 801b034:	4603      	mov	r3, r0
 801b036:	461a      	mov	r2, r3
 801b038:	1963      	adds	r3, r4, r5
 801b03a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 801b03e:	4b74      	ldr	r3, [pc, #464]	; (801b210 <send_DHCP_REQUEST+0x50c>)
 801b040:	78da      	ldrb	r2, [r3, #3]
 801b042:	4b71      	ldr	r3, [pc, #452]	; (801b208 <send_DHCP_REQUEST+0x504>)
 801b044:	681c      	ldr	r4, [r3, #0]
 801b046:	897b      	ldrh	r3, [r7, #10]
 801b048:	1c59      	adds	r1, r3, #1
 801b04a:	8179      	strh	r1, [r7, #10]
 801b04c:	461d      	mov	r5, r3
 801b04e:	4610      	mov	r0, r2
 801b050:	f000 ff54 	bl	801befc <NibbleToHex>
 801b054:	4603      	mov	r3, r0
 801b056:	461a      	mov	r2, r3
 801b058:	1963      	adds	r3, r4, r5
 801b05a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 801b05e:	4b6c      	ldr	r3, [pc, #432]	; (801b210 <send_DHCP_REQUEST+0x50c>)
 801b060:	791b      	ldrb	r3, [r3, #4]
 801b062:	091b      	lsrs	r3, r3, #4
 801b064:	b2da      	uxtb	r2, r3
 801b066:	4b68      	ldr	r3, [pc, #416]	; (801b208 <send_DHCP_REQUEST+0x504>)
 801b068:	681c      	ldr	r4, [r3, #0]
 801b06a:	897b      	ldrh	r3, [r7, #10]
 801b06c:	1c59      	adds	r1, r3, #1
 801b06e:	8179      	strh	r1, [r7, #10]
 801b070:	461d      	mov	r5, r3
 801b072:	4610      	mov	r0, r2
 801b074:	f000 ff42 	bl	801befc <NibbleToHex>
 801b078:	4603      	mov	r3, r0
 801b07a:	461a      	mov	r2, r3
 801b07c:	1963      	adds	r3, r4, r5
 801b07e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 801b082:	4b63      	ldr	r3, [pc, #396]	; (801b210 <send_DHCP_REQUEST+0x50c>)
 801b084:	791a      	ldrb	r2, [r3, #4]
 801b086:	4b60      	ldr	r3, [pc, #384]	; (801b208 <send_DHCP_REQUEST+0x504>)
 801b088:	681c      	ldr	r4, [r3, #0]
 801b08a:	897b      	ldrh	r3, [r7, #10]
 801b08c:	1c59      	adds	r1, r3, #1
 801b08e:	8179      	strh	r1, [r7, #10]
 801b090:	461d      	mov	r5, r3
 801b092:	4610      	mov	r0, r2
 801b094:	f000 ff32 	bl	801befc <NibbleToHex>
 801b098:	4603      	mov	r3, r0
 801b09a:	461a      	mov	r2, r3
 801b09c:	1963      	adds	r3, r4, r5
 801b09e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 801b0a2:	4b5b      	ldr	r3, [pc, #364]	; (801b210 <send_DHCP_REQUEST+0x50c>)
 801b0a4:	795b      	ldrb	r3, [r3, #5]
 801b0a6:	091b      	lsrs	r3, r3, #4
 801b0a8:	b2da      	uxtb	r2, r3
 801b0aa:	4b57      	ldr	r3, [pc, #348]	; (801b208 <send_DHCP_REQUEST+0x504>)
 801b0ac:	681c      	ldr	r4, [r3, #0]
 801b0ae:	897b      	ldrh	r3, [r7, #10]
 801b0b0:	1c59      	adds	r1, r3, #1
 801b0b2:	8179      	strh	r1, [r7, #10]
 801b0b4:	461d      	mov	r5, r3
 801b0b6:	4610      	mov	r0, r2
 801b0b8:	f000 ff20 	bl	801befc <NibbleToHex>
 801b0bc:	4603      	mov	r3, r0
 801b0be:	461a      	mov	r2, r3
 801b0c0:	1963      	adds	r3, r4, r5
 801b0c2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 801b0c6:	4b52      	ldr	r3, [pc, #328]	; (801b210 <send_DHCP_REQUEST+0x50c>)
 801b0c8:	795a      	ldrb	r2, [r3, #5]
 801b0ca:	4b4f      	ldr	r3, [pc, #316]	; (801b208 <send_DHCP_REQUEST+0x504>)
 801b0cc:	681c      	ldr	r4, [r3, #0]
 801b0ce:	897b      	ldrh	r3, [r7, #10]
 801b0d0:	1c59      	adds	r1, r3, #1
 801b0d2:	8179      	strh	r1, [r7, #10]
 801b0d4:	461d      	mov	r5, r3
 801b0d6:	4610      	mov	r0, r2
 801b0d8:	f000 ff10 	bl	801befc <NibbleToHex>
 801b0dc:	4603      	mov	r3, r0
 801b0de:	461a      	mov	r2, r3
 801b0e0:	1963      	adds	r3, r4, r5
 801b0e2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 801b0e6:	68fb      	ldr	r3, [r7, #12]
 801b0e8:	b2d9      	uxtb	r1, r3
 801b0ea:	4b47      	ldr	r3, [pc, #284]	; (801b208 <send_DHCP_REQUEST+0x504>)
 801b0ec:	681a      	ldr	r2, [r3, #0]
 801b0ee:	8978      	ldrh	r0, [r7, #10]
 801b0f0:	68fb      	ldr	r3, [r7, #12]
 801b0f2:	3307      	adds	r3, #7
 801b0f4:	1ac3      	subs	r3, r0, r3
 801b0f6:	3106      	adds	r1, #6
 801b0f8:	b2c9      	uxtb	r1, r1
 801b0fa:	4413      	add	r3, r2
 801b0fc:	460a      	mov	r2, r1
 801b0fe:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 801b102:	4b41      	ldr	r3, [pc, #260]	; (801b208 <send_DHCP_REQUEST+0x504>)
 801b104:	681a      	ldr	r2, [r3, #0]
 801b106:	897b      	ldrh	r3, [r7, #10]
 801b108:	1c59      	adds	r1, r3, #1
 801b10a:	8179      	strh	r1, [r7, #10]
 801b10c:	4413      	add	r3, r2
 801b10e:	2237      	movs	r2, #55	; 0x37
 801b110:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 801b114:	4b3c      	ldr	r3, [pc, #240]	; (801b208 <send_DHCP_REQUEST+0x504>)
 801b116:	681a      	ldr	r2, [r3, #0]
 801b118:	897b      	ldrh	r3, [r7, #10]
 801b11a:	1c59      	adds	r1, r3, #1
 801b11c:	8179      	strh	r1, [r7, #10]
 801b11e:	4413      	add	r3, r2
 801b120:	2208      	movs	r2, #8
 801b122:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 801b126:	4b38      	ldr	r3, [pc, #224]	; (801b208 <send_DHCP_REQUEST+0x504>)
 801b128:	681a      	ldr	r2, [r3, #0]
 801b12a:	897b      	ldrh	r3, [r7, #10]
 801b12c:	1c59      	adds	r1, r3, #1
 801b12e:	8179      	strh	r1, [r7, #10]
 801b130:	4413      	add	r3, r2
 801b132:	2201      	movs	r2, #1
 801b134:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 801b138:	4b33      	ldr	r3, [pc, #204]	; (801b208 <send_DHCP_REQUEST+0x504>)
 801b13a:	681a      	ldr	r2, [r3, #0]
 801b13c:	897b      	ldrh	r3, [r7, #10]
 801b13e:	1c59      	adds	r1, r3, #1
 801b140:	8179      	strh	r1, [r7, #10]
 801b142:	4413      	add	r3, r2
 801b144:	2203      	movs	r2, #3
 801b146:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 801b14a:	4b2f      	ldr	r3, [pc, #188]	; (801b208 <send_DHCP_REQUEST+0x504>)
 801b14c:	681a      	ldr	r2, [r3, #0]
 801b14e:	897b      	ldrh	r3, [r7, #10]
 801b150:	1c59      	adds	r1, r3, #1
 801b152:	8179      	strh	r1, [r7, #10]
 801b154:	4413      	add	r3, r2
 801b156:	2206      	movs	r2, #6
 801b158:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 801b15c:	4b2a      	ldr	r3, [pc, #168]	; (801b208 <send_DHCP_REQUEST+0x504>)
 801b15e:	681a      	ldr	r2, [r3, #0]
 801b160:	897b      	ldrh	r3, [r7, #10]
 801b162:	1c59      	adds	r1, r3, #1
 801b164:	8179      	strh	r1, [r7, #10]
 801b166:	4413      	add	r3, r2
 801b168:	220f      	movs	r2, #15
 801b16a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 801b16e:	4b26      	ldr	r3, [pc, #152]	; (801b208 <send_DHCP_REQUEST+0x504>)
 801b170:	681a      	ldr	r2, [r3, #0]
 801b172:	897b      	ldrh	r3, [r7, #10]
 801b174:	1c59      	adds	r1, r3, #1
 801b176:	8179      	strh	r1, [r7, #10]
 801b178:	4413      	add	r3, r2
 801b17a:	223a      	movs	r2, #58	; 0x3a
 801b17c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 801b180:	4b21      	ldr	r3, [pc, #132]	; (801b208 <send_DHCP_REQUEST+0x504>)
 801b182:	681a      	ldr	r2, [r3, #0]
 801b184:	897b      	ldrh	r3, [r7, #10]
 801b186:	1c59      	adds	r1, r3, #1
 801b188:	8179      	strh	r1, [r7, #10]
 801b18a:	4413      	add	r3, r2
 801b18c:	223b      	movs	r2, #59	; 0x3b
 801b18e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 801b192:	4b1d      	ldr	r3, [pc, #116]	; (801b208 <send_DHCP_REQUEST+0x504>)
 801b194:	681a      	ldr	r2, [r3, #0]
 801b196:	897b      	ldrh	r3, [r7, #10]
 801b198:	1c59      	adds	r1, r3, #1
 801b19a:	8179      	strh	r1, [r7, #10]
 801b19c:	4413      	add	r3, r2
 801b19e:	221f      	movs	r2, #31
 801b1a0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 801b1a4:	4b18      	ldr	r3, [pc, #96]	; (801b208 <send_DHCP_REQUEST+0x504>)
 801b1a6:	681a      	ldr	r2, [r3, #0]
 801b1a8:	897b      	ldrh	r3, [r7, #10]
 801b1aa:	1c59      	adds	r1, r3, #1
 801b1ac:	8179      	strh	r1, [r7, #10]
 801b1ae:	4413      	add	r3, r2
 801b1b0:	2221      	movs	r2, #33	; 0x21
 801b1b2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 801b1b6:	4b14      	ldr	r3, [pc, #80]	; (801b208 <send_DHCP_REQUEST+0x504>)
 801b1b8:	681a      	ldr	r2, [r3, #0]
 801b1ba:	897b      	ldrh	r3, [r7, #10]
 801b1bc:	1c59      	adds	r1, r3, #1
 801b1be:	8179      	strh	r1, [r7, #10]
 801b1c0:	4413      	add	r3, r2
 801b1c2:	22ff      	movs	r2, #255	; 0xff
 801b1c4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801b1c8:	897b      	ldrh	r3, [r7, #10]
 801b1ca:	60fb      	str	r3, [r7, #12]
 801b1cc:	e009      	b.n	801b1e2 <send_DHCP_REQUEST+0x4de>
 801b1ce:	4b0e      	ldr	r3, [pc, #56]	; (801b208 <send_DHCP_REQUEST+0x504>)
 801b1d0:	681a      	ldr	r2, [r3, #0]
 801b1d2:	68fb      	ldr	r3, [r7, #12]
 801b1d4:	4413      	add	r3, r2
 801b1d6:	33ec      	adds	r3, #236	; 0xec
 801b1d8:	2200      	movs	r2, #0
 801b1da:	701a      	strb	r2, [r3, #0]
 801b1dc:	68fb      	ldr	r3, [r7, #12]
 801b1de:	3301      	adds	r3, #1
 801b1e0:	60fb      	str	r3, [r7, #12]
 801b1e2:	68fb      	ldr	r3, [r7, #12]
 801b1e4:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 801b1e8:	dbf1      	blt.n	801b1ce <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801b1ea:	4b0a      	ldr	r3, [pc, #40]	; (801b214 <send_DHCP_REQUEST+0x510>)
 801b1ec:	7818      	ldrb	r0, [r3, #0]
 801b1ee:	4b06      	ldr	r3, [pc, #24]	; (801b208 <send_DHCP_REQUEST+0x504>)
 801b1f0:	6819      	ldr	r1, [r3, #0]
 801b1f2:	1d3b      	adds	r3, r7, #4
 801b1f4:	2243      	movs	r2, #67	; 0x43
 801b1f6:	9200      	str	r2, [sp, #0]
 801b1f8:	f44f 7209 	mov.w	r2, #548	; 0x224
 801b1fc:	f7fe f972 	bl	80194e4 <sendto>

}
 801b200:	bf00      	nop
 801b202:	3710      	adds	r7, #16
 801b204:	46bd      	mov	sp, r7
 801b206:	bdb0      	pop	{r4, r5, r7, pc}
 801b208:	200009ac 	.word	0x200009ac
 801b20c:	200000f8 	.word	0x200000f8
 801b210:	200009b0 	.word	0x200009b0
 801b214:	20000981 	.word	0x20000981

0801b218 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 801b218:	b580      	push	{r7, lr}
 801b21a:	b086      	sub	sp, #24
 801b21c:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 801b21e:	2300      	movs	r3, #0
 801b220:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 801b222:	f7ff fab3 	bl	801a78c <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 801b226:	2304      	movs	r3, #4
 801b228:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 801b22a:	4b9f      	ldr	r3, [pc, #636]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b22c:	681b      	ldr	r3, [r3, #0]
 801b22e:	330a      	adds	r3, #10
 801b230:	2200      	movs	r2, #0
 801b232:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 801b234:	4b9c      	ldr	r3, [pc, #624]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b236:	681b      	ldr	r3, [r3, #0]
 801b238:	330a      	adds	r3, #10
 801b23a:	3301      	adds	r3, #1
 801b23c:	2200      	movs	r2, #0
 801b23e:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801b240:	4b99      	ldr	r3, [pc, #612]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b242:	681a      	ldr	r2, [r3, #0]
 801b244:	897b      	ldrh	r3, [r7, #10]
 801b246:	1c59      	adds	r1, r3, #1
 801b248:	8179      	strh	r1, [r7, #10]
 801b24a:	4413      	add	r3, r2
 801b24c:	2235      	movs	r2, #53	; 0x35
 801b24e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801b252:	4b95      	ldr	r3, [pc, #596]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b254:	681a      	ldr	r2, [r3, #0]
 801b256:	897b      	ldrh	r3, [r7, #10]
 801b258:	1c59      	adds	r1, r3, #1
 801b25a:	8179      	strh	r1, [r7, #10]
 801b25c:	4413      	add	r3, r2
 801b25e:	2201      	movs	r2, #1
 801b260:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 801b264:	4b90      	ldr	r3, [pc, #576]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b266:	681a      	ldr	r2, [r3, #0]
 801b268:	897b      	ldrh	r3, [r7, #10]
 801b26a:	1c59      	adds	r1, r3, #1
 801b26c:	8179      	strh	r1, [r7, #10]
 801b26e:	4413      	add	r3, r2
 801b270:	2204      	movs	r2, #4
 801b272:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 801b276:	4b8c      	ldr	r3, [pc, #560]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b278:	681a      	ldr	r2, [r3, #0]
 801b27a:	897b      	ldrh	r3, [r7, #10]
 801b27c:	1c59      	adds	r1, r3, #1
 801b27e:	8179      	strh	r1, [r7, #10]
 801b280:	4413      	add	r3, r2
 801b282:	223d      	movs	r2, #61	; 0x3d
 801b284:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 801b288:	4b87      	ldr	r3, [pc, #540]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b28a:	681a      	ldr	r2, [r3, #0]
 801b28c:	897b      	ldrh	r3, [r7, #10]
 801b28e:	1c59      	adds	r1, r3, #1
 801b290:	8179      	strh	r1, [r7, #10]
 801b292:	4413      	add	r3, r2
 801b294:	2207      	movs	r2, #7
 801b296:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801b29a:	4b83      	ldr	r3, [pc, #524]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b29c:	681a      	ldr	r2, [r3, #0]
 801b29e:	897b      	ldrh	r3, [r7, #10]
 801b2a0:	1c59      	adds	r1, r3, #1
 801b2a2:	8179      	strh	r1, [r7, #10]
 801b2a4:	4413      	add	r3, r2
 801b2a6:	2201      	movs	r2, #1
 801b2a8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801b2ac:	4b7e      	ldr	r3, [pc, #504]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b2ae:	681a      	ldr	r2, [r3, #0]
 801b2b0:	897b      	ldrh	r3, [r7, #10]
 801b2b2:	1c59      	adds	r1, r3, #1
 801b2b4:	8179      	strh	r1, [r7, #10]
 801b2b6:	4618      	mov	r0, r3
 801b2b8:	4b7c      	ldr	r3, [pc, #496]	; (801b4ac <send_DHCP_DECLINE+0x294>)
 801b2ba:	7819      	ldrb	r1, [r3, #0]
 801b2bc:	1813      	adds	r3, r2, r0
 801b2be:	460a      	mov	r2, r1
 801b2c0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801b2c4:	4b78      	ldr	r3, [pc, #480]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b2c6:	681a      	ldr	r2, [r3, #0]
 801b2c8:	897b      	ldrh	r3, [r7, #10]
 801b2ca:	1c59      	adds	r1, r3, #1
 801b2cc:	8179      	strh	r1, [r7, #10]
 801b2ce:	4618      	mov	r0, r3
 801b2d0:	4b76      	ldr	r3, [pc, #472]	; (801b4ac <send_DHCP_DECLINE+0x294>)
 801b2d2:	7859      	ldrb	r1, [r3, #1]
 801b2d4:	1813      	adds	r3, r2, r0
 801b2d6:	460a      	mov	r2, r1
 801b2d8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801b2dc:	4b72      	ldr	r3, [pc, #456]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b2de:	681a      	ldr	r2, [r3, #0]
 801b2e0:	897b      	ldrh	r3, [r7, #10]
 801b2e2:	1c59      	adds	r1, r3, #1
 801b2e4:	8179      	strh	r1, [r7, #10]
 801b2e6:	4618      	mov	r0, r3
 801b2e8:	4b70      	ldr	r3, [pc, #448]	; (801b4ac <send_DHCP_DECLINE+0x294>)
 801b2ea:	7899      	ldrb	r1, [r3, #2]
 801b2ec:	1813      	adds	r3, r2, r0
 801b2ee:	460a      	mov	r2, r1
 801b2f0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801b2f4:	4b6c      	ldr	r3, [pc, #432]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b2f6:	681a      	ldr	r2, [r3, #0]
 801b2f8:	897b      	ldrh	r3, [r7, #10]
 801b2fa:	1c59      	adds	r1, r3, #1
 801b2fc:	8179      	strh	r1, [r7, #10]
 801b2fe:	4618      	mov	r0, r3
 801b300:	4b6a      	ldr	r3, [pc, #424]	; (801b4ac <send_DHCP_DECLINE+0x294>)
 801b302:	78d9      	ldrb	r1, [r3, #3]
 801b304:	1813      	adds	r3, r2, r0
 801b306:	460a      	mov	r2, r1
 801b308:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801b30c:	4b66      	ldr	r3, [pc, #408]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b30e:	681a      	ldr	r2, [r3, #0]
 801b310:	897b      	ldrh	r3, [r7, #10]
 801b312:	1c59      	adds	r1, r3, #1
 801b314:	8179      	strh	r1, [r7, #10]
 801b316:	4618      	mov	r0, r3
 801b318:	4b64      	ldr	r3, [pc, #400]	; (801b4ac <send_DHCP_DECLINE+0x294>)
 801b31a:	7919      	ldrb	r1, [r3, #4]
 801b31c:	1813      	adds	r3, r2, r0
 801b31e:	460a      	mov	r2, r1
 801b320:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801b324:	4b60      	ldr	r3, [pc, #384]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b326:	681a      	ldr	r2, [r3, #0]
 801b328:	897b      	ldrh	r3, [r7, #10]
 801b32a:	1c59      	adds	r1, r3, #1
 801b32c:	8179      	strh	r1, [r7, #10]
 801b32e:	4618      	mov	r0, r3
 801b330:	4b5e      	ldr	r3, [pc, #376]	; (801b4ac <send_DHCP_DECLINE+0x294>)
 801b332:	7959      	ldrb	r1, [r3, #5]
 801b334:	1813      	adds	r3, r2, r0
 801b336:	460a      	mov	r2, r1
 801b338:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 801b33c:	4b5a      	ldr	r3, [pc, #360]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b33e:	681a      	ldr	r2, [r3, #0]
 801b340:	897b      	ldrh	r3, [r7, #10]
 801b342:	1c59      	adds	r1, r3, #1
 801b344:	8179      	strh	r1, [r7, #10]
 801b346:	4413      	add	r3, r2
 801b348:	2232      	movs	r2, #50	; 0x32
 801b34a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 801b34e:	4b56      	ldr	r3, [pc, #344]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b350:	681a      	ldr	r2, [r3, #0]
 801b352:	897b      	ldrh	r3, [r7, #10]
 801b354:	1c59      	adds	r1, r3, #1
 801b356:	8179      	strh	r1, [r7, #10]
 801b358:	4413      	add	r3, r2
 801b35a:	2204      	movs	r2, #4
 801b35c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 801b360:	4b51      	ldr	r3, [pc, #324]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b362:	681a      	ldr	r2, [r3, #0]
 801b364:	897b      	ldrh	r3, [r7, #10]
 801b366:	1c59      	adds	r1, r3, #1
 801b368:	8179      	strh	r1, [r7, #10]
 801b36a:	4618      	mov	r0, r3
 801b36c:	4b50      	ldr	r3, [pc, #320]	; (801b4b0 <send_DHCP_DECLINE+0x298>)
 801b36e:	7819      	ldrb	r1, [r3, #0]
 801b370:	1813      	adds	r3, r2, r0
 801b372:	460a      	mov	r2, r1
 801b374:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 801b378:	4b4b      	ldr	r3, [pc, #300]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b37a:	681a      	ldr	r2, [r3, #0]
 801b37c:	897b      	ldrh	r3, [r7, #10]
 801b37e:	1c59      	adds	r1, r3, #1
 801b380:	8179      	strh	r1, [r7, #10]
 801b382:	4618      	mov	r0, r3
 801b384:	4b4a      	ldr	r3, [pc, #296]	; (801b4b0 <send_DHCP_DECLINE+0x298>)
 801b386:	7859      	ldrb	r1, [r3, #1]
 801b388:	1813      	adds	r3, r2, r0
 801b38a:	460a      	mov	r2, r1
 801b38c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 801b390:	4b45      	ldr	r3, [pc, #276]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b392:	681a      	ldr	r2, [r3, #0]
 801b394:	897b      	ldrh	r3, [r7, #10]
 801b396:	1c59      	adds	r1, r3, #1
 801b398:	8179      	strh	r1, [r7, #10]
 801b39a:	4618      	mov	r0, r3
 801b39c:	4b44      	ldr	r3, [pc, #272]	; (801b4b0 <send_DHCP_DECLINE+0x298>)
 801b39e:	7899      	ldrb	r1, [r3, #2]
 801b3a0:	1813      	adds	r3, r2, r0
 801b3a2:	460a      	mov	r2, r1
 801b3a4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 801b3a8:	4b3f      	ldr	r3, [pc, #252]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b3aa:	681a      	ldr	r2, [r3, #0]
 801b3ac:	897b      	ldrh	r3, [r7, #10]
 801b3ae:	1c59      	adds	r1, r3, #1
 801b3b0:	8179      	strh	r1, [r7, #10]
 801b3b2:	4618      	mov	r0, r3
 801b3b4:	4b3e      	ldr	r3, [pc, #248]	; (801b4b0 <send_DHCP_DECLINE+0x298>)
 801b3b6:	78d9      	ldrb	r1, [r3, #3]
 801b3b8:	1813      	adds	r3, r2, r0
 801b3ba:	460a      	mov	r2, r1
 801b3bc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 801b3c0:	4b39      	ldr	r3, [pc, #228]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b3c2:	681a      	ldr	r2, [r3, #0]
 801b3c4:	897b      	ldrh	r3, [r7, #10]
 801b3c6:	1c59      	adds	r1, r3, #1
 801b3c8:	8179      	strh	r1, [r7, #10]
 801b3ca:	4413      	add	r3, r2
 801b3cc:	2236      	movs	r2, #54	; 0x36
 801b3ce:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 801b3d2:	4b35      	ldr	r3, [pc, #212]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b3d4:	681a      	ldr	r2, [r3, #0]
 801b3d6:	897b      	ldrh	r3, [r7, #10]
 801b3d8:	1c59      	adds	r1, r3, #1
 801b3da:	8179      	strh	r1, [r7, #10]
 801b3dc:	4413      	add	r3, r2
 801b3de:	2204      	movs	r2, #4
 801b3e0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 801b3e4:	4b30      	ldr	r3, [pc, #192]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b3e6:	681a      	ldr	r2, [r3, #0]
 801b3e8:	897b      	ldrh	r3, [r7, #10]
 801b3ea:	1c59      	adds	r1, r3, #1
 801b3ec:	8179      	strh	r1, [r7, #10]
 801b3ee:	4618      	mov	r0, r3
 801b3f0:	4b30      	ldr	r3, [pc, #192]	; (801b4b4 <send_DHCP_DECLINE+0x29c>)
 801b3f2:	7819      	ldrb	r1, [r3, #0]
 801b3f4:	1813      	adds	r3, r2, r0
 801b3f6:	460a      	mov	r2, r1
 801b3f8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 801b3fc:	4b2a      	ldr	r3, [pc, #168]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b3fe:	681a      	ldr	r2, [r3, #0]
 801b400:	897b      	ldrh	r3, [r7, #10]
 801b402:	1c59      	adds	r1, r3, #1
 801b404:	8179      	strh	r1, [r7, #10]
 801b406:	4618      	mov	r0, r3
 801b408:	4b2a      	ldr	r3, [pc, #168]	; (801b4b4 <send_DHCP_DECLINE+0x29c>)
 801b40a:	7859      	ldrb	r1, [r3, #1]
 801b40c:	1813      	adds	r3, r2, r0
 801b40e:	460a      	mov	r2, r1
 801b410:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 801b414:	4b24      	ldr	r3, [pc, #144]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b416:	681a      	ldr	r2, [r3, #0]
 801b418:	897b      	ldrh	r3, [r7, #10]
 801b41a:	1c59      	adds	r1, r3, #1
 801b41c:	8179      	strh	r1, [r7, #10]
 801b41e:	4618      	mov	r0, r3
 801b420:	4b24      	ldr	r3, [pc, #144]	; (801b4b4 <send_DHCP_DECLINE+0x29c>)
 801b422:	7899      	ldrb	r1, [r3, #2]
 801b424:	1813      	adds	r3, r2, r0
 801b426:	460a      	mov	r2, r1
 801b428:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 801b42c:	4b1e      	ldr	r3, [pc, #120]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b42e:	681a      	ldr	r2, [r3, #0]
 801b430:	897b      	ldrh	r3, [r7, #10]
 801b432:	1c59      	adds	r1, r3, #1
 801b434:	8179      	strh	r1, [r7, #10]
 801b436:	4618      	mov	r0, r3
 801b438:	4b1e      	ldr	r3, [pc, #120]	; (801b4b4 <send_DHCP_DECLINE+0x29c>)
 801b43a:	78d9      	ldrb	r1, [r3, #3]
 801b43c:	1813      	adds	r3, r2, r0
 801b43e:	460a      	mov	r2, r1
 801b440:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 801b444:	4b18      	ldr	r3, [pc, #96]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b446:	681a      	ldr	r2, [r3, #0]
 801b448:	897b      	ldrh	r3, [r7, #10]
 801b44a:	1c59      	adds	r1, r3, #1
 801b44c:	8179      	strh	r1, [r7, #10]
 801b44e:	4413      	add	r3, r2
 801b450:	22ff      	movs	r2, #255	; 0xff
 801b452:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801b456:	897b      	ldrh	r3, [r7, #10]
 801b458:	60fb      	str	r3, [r7, #12]
 801b45a:	e009      	b.n	801b470 <send_DHCP_DECLINE+0x258>
 801b45c:	4b12      	ldr	r3, [pc, #72]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b45e:	681a      	ldr	r2, [r3, #0]
 801b460:	68fb      	ldr	r3, [r7, #12]
 801b462:	4413      	add	r3, r2
 801b464:	33ec      	adds	r3, #236	; 0xec
 801b466:	2200      	movs	r2, #0
 801b468:	701a      	strb	r2, [r3, #0]
 801b46a:	68fb      	ldr	r3, [r7, #12]
 801b46c:	3301      	adds	r3, #1
 801b46e:	60fb      	str	r3, [r7, #12]
 801b470:	68fb      	ldr	r3, [r7, #12]
 801b472:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 801b476:	dbf1      	blt.n	801b45c <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 801b478:	23ff      	movs	r3, #255	; 0xff
 801b47a:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 801b47c:	23ff      	movs	r3, #255	; 0xff
 801b47e:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 801b480:	23ff      	movs	r3, #255	; 0xff
 801b482:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 801b484:	23ff      	movs	r3, #255	; 0xff
 801b486:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801b488:	4b0b      	ldr	r3, [pc, #44]	; (801b4b8 <send_DHCP_DECLINE+0x2a0>)
 801b48a:	7818      	ldrb	r0, [r3, #0]
 801b48c:	4b06      	ldr	r3, [pc, #24]	; (801b4a8 <send_DHCP_DECLINE+0x290>)
 801b48e:	6819      	ldr	r1, [r3, #0]
 801b490:	1d3b      	adds	r3, r7, #4
 801b492:	2243      	movs	r2, #67	; 0x43
 801b494:	9200      	str	r2, [sp, #0]
 801b496:	f44f 7209 	mov.w	r2, #548	; 0x224
 801b49a:	f7fe f823 	bl	80194e4 <sendto>
}
 801b49e:	bf00      	nop
 801b4a0:	3710      	adds	r7, #16
 801b4a2:	46bd      	mov	sp, r7
 801b4a4:	bd80      	pop	{r7, pc}
 801b4a6:	bf00      	nop
 801b4a8:	200009ac 	.word	0x200009ac
 801b4ac:	200009b0 	.word	0x200009b0
 801b4b0:	20000990 	.word	0x20000990
 801b4b4:	20000984 	.word	0x20000984
 801b4b8:	20000981 	.word	0x20000981

0801b4bc <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 801b4bc:	b590      	push	{r4, r7, lr}
 801b4be:	b089      	sub	sp, #36	; 0x24
 801b4c0:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 801b4c2:	2300      	movs	r3, #0
 801b4c4:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 801b4c6:	4ba1      	ldr	r3, [pc, #644]	; (801b74c <parseDHCPMSG+0x290>)
 801b4c8:	781b      	ldrb	r3, [r3, #0]
 801b4ca:	4618      	mov	r0, r3
 801b4cc:	f7fd f9e1 	bl	8018892 <getSn_RX_RSR>
 801b4d0:	4603      	mov	r3, r0
 801b4d2:	823b      	strh	r3, [r7, #16]
 801b4d4:	8a3b      	ldrh	r3, [r7, #16]
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	d011      	beq.n	801b4fe <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 801b4da:	4b9c      	ldr	r3, [pc, #624]	; (801b74c <parseDHCPMSG+0x290>)
 801b4dc:	7818      	ldrb	r0, [r3, #0]
 801b4de:	4b9c      	ldr	r3, [pc, #624]	; (801b750 <parseDHCPMSG+0x294>)
 801b4e0:	6819      	ldr	r1, [r3, #0]
 801b4e2:	1d3c      	adds	r4, r7, #4
 801b4e4:	8a3a      	ldrh	r2, [r7, #16]
 801b4e6:	1cbb      	adds	r3, r7, #2
 801b4e8:	9300      	str	r3, [sp, #0]
 801b4ea:	4623      	mov	r3, r4
 801b4ec:	f7fe f930 	bl	8019750 <recvfrom>
 801b4f0:	4603      	mov	r3, r0
 801b4f2:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 801b4f4:	887b      	ldrh	r3, [r7, #2]
 801b4f6:	2b43      	cmp	r3, #67	; 0x43
 801b4f8:	f040 81ed 	bne.w	801b8d6 <parseDHCPMSG+0x41a>
 801b4fc:	e001      	b.n	801b502 <parseDHCPMSG+0x46>
   else return 0;
 801b4fe:	2300      	movs	r3, #0
 801b500:	e1eb      	b.n	801b8da <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 801b502:	4b93      	ldr	r3, [pc, #588]	; (801b750 <parseDHCPMSG+0x294>)
 801b504:	681b      	ldr	r3, [r3, #0]
 801b506:	7f1a      	ldrb	r2, [r3, #28]
 801b508:	4b92      	ldr	r3, [pc, #584]	; (801b754 <parseDHCPMSG+0x298>)
 801b50a:	781b      	ldrb	r3, [r3, #0]
 801b50c:	429a      	cmp	r2, r3
 801b50e:	d124      	bne.n	801b55a <parseDHCPMSG+0x9e>
 801b510:	4b8f      	ldr	r3, [pc, #572]	; (801b750 <parseDHCPMSG+0x294>)
 801b512:	681b      	ldr	r3, [r3, #0]
 801b514:	7f5a      	ldrb	r2, [r3, #29]
 801b516:	4b8f      	ldr	r3, [pc, #572]	; (801b754 <parseDHCPMSG+0x298>)
 801b518:	785b      	ldrb	r3, [r3, #1]
 801b51a:	429a      	cmp	r2, r3
 801b51c:	d11d      	bne.n	801b55a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 801b51e:	4b8c      	ldr	r3, [pc, #560]	; (801b750 <parseDHCPMSG+0x294>)
 801b520:	681b      	ldr	r3, [r3, #0]
 801b522:	7f9a      	ldrb	r2, [r3, #30]
 801b524:	4b8b      	ldr	r3, [pc, #556]	; (801b754 <parseDHCPMSG+0x298>)
 801b526:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 801b528:	429a      	cmp	r2, r3
 801b52a:	d116      	bne.n	801b55a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 801b52c:	4b88      	ldr	r3, [pc, #544]	; (801b750 <parseDHCPMSG+0x294>)
 801b52e:	681b      	ldr	r3, [r3, #0]
 801b530:	7fda      	ldrb	r2, [r3, #31]
 801b532:	4b88      	ldr	r3, [pc, #544]	; (801b754 <parseDHCPMSG+0x298>)
 801b534:	78db      	ldrb	r3, [r3, #3]
 801b536:	429a      	cmp	r2, r3
 801b538:	d10f      	bne.n	801b55a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 801b53a:	4b85      	ldr	r3, [pc, #532]	; (801b750 <parseDHCPMSG+0x294>)
 801b53c:	681b      	ldr	r3, [r3, #0]
 801b53e:	f893 2020 	ldrb.w	r2, [r3, #32]
 801b542:	4b84      	ldr	r3, [pc, #528]	; (801b754 <parseDHCPMSG+0x298>)
 801b544:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 801b546:	429a      	cmp	r2, r3
 801b548:	d107      	bne.n	801b55a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 801b54a:	4b81      	ldr	r3, [pc, #516]	; (801b750 <parseDHCPMSG+0x294>)
 801b54c:	681b      	ldr	r3, [r3, #0]
 801b54e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801b552:	4b80      	ldr	r3, [pc, #512]	; (801b754 <parseDHCPMSG+0x298>)
 801b554:	795b      	ldrb	r3, [r3, #5]
 801b556:	429a      	cmp	r2, r3
 801b558:	d001      	beq.n	801b55e <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 801b55a:	2300      	movs	r3, #0
 801b55c:	e1bd      	b.n	801b8da <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 801b55e:	4b7e      	ldr	r3, [pc, #504]	; (801b758 <parseDHCPMSG+0x29c>)
 801b560:	781b      	ldrb	r3, [r3, #0]
 801b562:	2b00      	cmp	r3, #0
 801b564:	d10b      	bne.n	801b57e <parseDHCPMSG+0xc2>
 801b566:	4b7c      	ldr	r3, [pc, #496]	; (801b758 <parseDHCPMSG+0x29c>)
 801b568:	785b      	ldrb	r3, [r3, #1]
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	d107      	bne.n	801b57e <parseDHCPMSG+0xc2>
 801b56e:	4b7a      	ldr	r3, [pc, #488]	; (801b758 <parseDHCPMSG+0x29c>)
 801b570:	789b      	ldrb	r3, [r3, #2]
 801b572:	2b00      	cmp	r3, #0
 801b574:	d103      	bne.n	801b57e <parseDHCPMSG+0xc2>
 801b576:	4b78      	ldr	r3, [pc, #480]	; (801b758 <parseDHCPMSG+0x29c>)
 801b578:	78db      	ldrb	r3, [r3, #3]
 801b57a:	2b00      	cmp	r3, #0
 801b57c:	d029      	beq.n	801b5d2 <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 801b57e:	793a      	ldrb	r2, [r7, #4]
 801b580:	4b75      	ldr	r3, [pc, #468]	; (801b758 <parseDHCPMSG+0x29c>)
 801b582:	781b      	ldrb	r3, [r3, #0]
 801b584:	429a      	cmp	r2, r3
 801b586:	d10e      	bne.n	801b5a6 <parseDHCPMSG+0xea>
 801b588:	797a      	ldrb	r2, [r7, #5]
 801b58a:	4b73      	ldr	r3, [pc, #460]	; (801b758 <parseDHCPMSG+0x29c>)
 801b58c:	785b      	ldrb	r3, [r3, #1]
 801b58e:	429a      	cmp	r2, r3
 801b590:	d109      	bne.n	801b5a6 <parseDHCPMSG+0xea>
 801b592:	79ba      	ldrb	r2, [r7, #6]
 801b594:	4b70      	ldr	r3, [pc, #448]	; (801b758 <parseDHCPMSG+0x29c>)
 801b596:	789b      	ldrb	r3, [r3, #2]
 801b598:	429a      	cmp	r2, r3
 801b59a:	d104      	bne.n	801b5a6 <parseDHCPMSG+0xea>
 801b59c:	79fa      	ldrb	r2, [r7, #7]
 801b59e:	4b6e      	ldr	r3, [pc, #440]	; (801b758 <parseDHCPMSG+0x29c>)
 801b5a0:	78db      	ldrb	r3, [r3, #3]
 801b5a2:	429a      	cmp	r2, r3
 801b5a4:	d015      	beq.n	801b5d2 <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 801b5a6:	793a      	ldrb	r2, [r7, #4]
 801b5a8:	4b6c      	ldr	r3, [pc, #432]	; (801b75c <parseDHCPMSG+0x2a0>)
 801b5aa:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 801b5ac:	429a      	cmp	r2, r3
 801b5ae:	d10e      	bne.n	801b5ce <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 801b5b0:	797a      	ldrb	r2, [r7, #5]
 801b5b2:	4b6a      	ldr	r3, [pc, #424]	; (801b75c <parseDHCPMSG+0x2a0>)
 801b5b4:	785b      	ldrb	r3, [r3, #1]
 801b5b6:	429a      	cmp	r2, r3
 801b5b8:	d109      	bne.n	801b5ce <parseDHCPMSG+0x112>
 801b5ba:	79ba      	ldrb	r2, [r7, #6]
 801b5bc:	4b67      	ldr	r3, [pc, #412]	; (801b75c <parseDHCPMSG+0x2a0>)
 801b5be:	789b      	ldrb	r3, [r3, #2]
 801b5c0:	429a      	cmp	r2, r3
 801b5c2:	d104      	bne.n	801b5ce <parseDHCPMSG+0x112>
 801b5c4:	79fa      	ldrb	r2, [r7, #7]
 801b5c6:	4b65      	ldr	r3, [pc, #404]	; (801b75c <parseDHCPMSG+0x2a0>)
 801b5c8:	78db      	ldrb	r3, [r3, #3]
 801b5ca:	429a      	cmp	r2, r3
 801b5cc:	d001      	beq.n	801b5d2 <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 801b5ce:	2300      	movs	r3, #0
 801b5d0:	e183      	b.n	801b8da <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 801b5d2:	4b5f      	ldr	r3, [pc, #380]	; (801b750 <parseDHCPMSG+0x294>)
 801b5d4:	681b      	ldr	r3, [r3, #0]
 801b5d6:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 801b5d8:	697b      	ldr	r3, [r7, #20]
 801b5da:	33f0      	adds	r3, #240	; 0xf0
 801b5dc:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 801b5de:	8a3b      	ldrh	r3, [r7, #16]
 801b5e0:	3bf0      	subs	r3, #240	; 0xf0
 801b5e2:	697a      	ldr	r2, [r7, #20]
 801b5e4:	4413      	add	r3, r2
 801b5e6:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 801b5e8:	e170      	b.n	801b8cc <parseDHCPMSG+0x410>

			switch ( *p ) {
 801b5ea:	697b      	ldr	r3, [r7, #20]
 801b5ec:	781b      	ldrb	r3, [r3, #0]
 801b5ee:	2b36      	cmp	r3, #54	; 0x36
 801b5f0:	dc76      	bgt.n	801b6e0 <parseDHCPMSG+0x224>
 801b5f2:	2b00      	cmp	r3, #0
 801b5f4:	f2c0 815d 	blt.w	801b8b2 <parseDHCPMSG+0x3f6>
 801b5f8:	2b36      	cmp	r3, #54	; 0x36
 801b5fa:	f200 815a 	bhi.w	801b8b2 <parseDHCPMSG+0x3f6>
 801b5fe:	a201      	add	r2, pc, #4	; (adr r2, 801b604 <parseDHCPMSG+0x148>)
 801b600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b604:	0801b6ed 	.word	0x0801b6ed
 801b608:	0801b70d 	.word	0x0801b70d
 801b60c:	0801b8b3 	.word	0x0801b8b3
 801b610:	0801b765 	.word	0x0801b765
 801b614:	0801b8b3 	.word	0x0801b8b3
 801b618:	0801b8b3 	.word	0x0801b8b3
 801b61c:	0801b7b1 	.word	0x0801b7b1
 801b620:	0801b8b3 	.word	0x0801b8b3
 801b624:	0801b8b3 	.word	0x0801b8b3
 801b628:	0801b8b3 	.word	0x0801b8b3
 801b62c:	0801b8b3 	.word	0x0801b8b3
 801b630:	0801b8b3 	.word	0x0801b8b3
 801b634:	0801b8b3 	.word	0x0801b8b3
 801b638:	0801b8b3 	.word	0x0801b8b3
 801b63c:	0801b8b3 	.word	0x0801b8b3
 801b640:	0801b8b3 	.word	0x0801b8b3
 801b644:	0801b8b3 	.word	0x0801b8b3
 801b648:	0801b8b3 	.word	0x0801b8b3
 801b64c:	0801b8b3 	.word	0x0801b8b3
 801b650:	0801b8b3 	.word	0x0801b8b3
 801b654:	0801b8b3 	.word	0x0801b8b3
 801b658:	0801b8b3 	.word	0x0801b8b3
 801b65c:	0801b8b3 	.word	0x0801b8b3
 801b660:	0801b8b3 	.word	0x0801b8b3
 801b664:	0801b8b3 	.word	0x0801b8b3
 801b668:	0801b8b3 	.word	0x0801b8b3
 801b66c:	0801b8b3 	.word	0x0801b8b3
 801b670:	0801b8b3 	.word	0x0801b8b3
 801b674:	0801b8b3 	.word	0x0801b8b3
 801b678:	0801b8b3 	.word	0x0801b8b3
 801b67c:	0801b8b3 	.word	0x0801b8b3
 801b680:	0801b8b3 	.word	0x0801b8b3
 801b684:	0801b8b3 	.word	0x0801b8b3
 801b688:	0801b8b3 	.word	0x0801b8b3
 801b68c:	0801b8b3 	.word	0x0801b8b3
 801b690:	0801b8b3 	.word	0x0801b8b3
 801b694:	0801b8b3 	.word	0x0801b8b3
 801b698:	0801b8b3 	.word	0x0801b8b3
 801b69c:	0801b8b3 	.word	0x0801b8b3
 801b6a0:	0801b8b3 	.word	0x0801b8b3
 801b6a4:	0801b8b3 	.word	0x0801b8b3
 801b6a8:	0801b8b3 	.word	0x0801b8b3
 801b6ac:	0801b8b3 	.word	0x0801b8b3
 801b6b0:	0801b8b3 	.word	0x0801b8b3
 801b6b4:	0801b8b3 	.word	0x0801b8b3
 801b6b8:	0801b8b3 	.word	0x0801b8b3
 801b6bc:	0801b8b3 	.word	0x0801b8b3
 801b6c0:	0801b8b3 	.word	0x0801b8b3
 801b6c4:	0801b8b3 	.word	0x0801b8b3
 801b6c8:	0801b8b3 	.word	0x0801b8b3
 801b6cc:	0801b8b3 	.word	0x0801b8b3
 801b6d0:	0801b7fd 	.word	0x0801b7fd
 801b6d4:	0801b8b3 	.word	0x0801b8b3
 801b6d8:	0801b6f5 	.word	0x0801b6f5
 801b6dc:	0801b859 	.word	0x0801b859
 801b6e0:	2bff      	cmp	r3, #255	; 0xff
 801b6e2:	f040 80e6 	bne.w	801b8b2 <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 801b6e6:	68fb      	ldr	r3, [r7, #12]
 801b6e8:	617b      	str	r3, [r7, #20]
   				break;
 801b6ea:	e0ef      	b.n	801b8cc <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 801b6ec:	697b      	ldr	r3, [r7, #20]
 801b6ee:	3301      	adds	r3, #1
 801b6f0:	617b      	str	r3, [r7, #20]
   				break;
 801b6f2:	e0eb      	b.n	801b8cc <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 801b6f4:	697b      	ldr	r3, [r7, #20]
 801b6f6:	3301      	adds	r3, #1
 801b6f8:	617b      	str	r3, [r7, #20]
   				p++;
 801b6fa:	697b      	ldr	r3, [r7, #20]
 801b6fc:	3301      	adds	r3, #1
 801b6fe:	617b      	str	r3, [r7, #20]
   				type = *p++;
 801b700:	697b      	ldr	r3, [r7, #20]
 801b702:	1c5a      	adds	r2, r3, #1
 801b704:	617a      	str	r2, [r7, #20]
 801b706:	781b      	ldrb	r3, [r3, #0]
 801b708:	74fb      	strb	r3, [r7, #19]
   				break;
 801b70a:	e0df      	b.n	801b8cc <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 801b70c:	697b      	ldr	r3, [r7, #20]
 801b70e:	3301      	adds	r3, #1
 801b710:	617b      	str	r3, [r7, #20]
   				p++;
 801b712:	697b      	ldr	r3, [r7, #20]
 801b714:	3301      	adds	r3, #1
 801b716:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 801b718:	697b      	ldr	r3, [r7, #20]
 801b71a:	1c5a      	adds	r2, r3, #1
 801b71c:	617a      	str	r2, [r7, #20]
 801b71e:	781a      	ldrb	r2, [r3, #0]
 801b720:	4b0f      	ldr	r3, [pc, #60]	; (801b760 <parseDHCPMSG+0x2a4>)
 801b722:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 801b724:	697b      	ldr	r3, [r7, #20]
 801b726:	1c5a      	adds	r2, r3, #1
 801b728:	617a      	str	r2, [r7, #20]
 801b72a:	781a      	ldrb	r2, [r3, #0]
 801b72c:	4b0c      	ldr	r3, [pc, #48]	; (801b760 <parseDHCPMSG+0x2a4>)
 801b72e:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 801b730:	697b      	ldr	r3, [r7, #20]
 801b732:	1c5a      	adds	r2, r3, #1
 801b734:	617a      	str	r2, [r7, #20]
 801b736:	781a      	ldrb	r2, [r3, #0]
 801b738:	4b09      	ldr	r3, [pc, #36]	; (801b760 <parseDHCPMSG+0x2a4>)
 801b73a:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 801b73c:	697b      	ldr	r3, [r7, #20]
 801b73e:	1c5a      	adds	r2, r3, #1
 801b740:	617a      	str	r2, [r7, #20]
 801b742:	781a      	ldrb	r2, [r3, #0]
 801b744:	4b06      	ldr	r3, [pc, #24]	; (801b760 <parseDHCPMSG+0x2a4>)
 801b746:	70da      	strb	r2, [r3, #3]
   				break;
 801b748:	e0c0      	b.n	801b8cc <parseDHCPMSG+0x410>
 801b74a:	bf00      	nop
 801b74c:	20000981 	.word	0x20000981
 801b750:	200009ac 	.word	0x200009ac
 801b754:	200009b0 	.word	0x200009b0
 801b758:	20000984 	.word	0x20000984
 801b75c:	20000988 	.word	0x20000988
 801b760:	20000998 	.word	0x20000998
   			case routersOnSubnet :
   				p++;
 801b764:	697b      	ldr	r3, [r7, #20]
 801b766:	3301      	adds	r3, #1
 801b768:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 801b76a:	697b      	ldr	r3, [r7, #20]
 801b76c:	1c5a      	adds	r2, r3, #1
 801b76e:	617a      	str	r2, [r7, #20]
 801b770:	781b      	ldrb	r3, [r3, #0]
 801b772:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 801b774:	697b      	ldr	r3, [r7, #20]
 801b776:	1c5a      	adds	r2, r3, #1
 801b778:	617a      	str	r2, [r7, #20]
 801b77a:	781a      	ldrb	r2, [r3, #0]
 801b77c:	4b59      	ldr	r3, [pc, #356]	; (801b8e4 <parseDHCPMSG+0x428>)
 801b77e:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 801b780:	697b      	ldr	r3, [r7, #20]
 801b782:	1c5a      	adds	r2, r3, #1
 801b784:	617a      	str	r2, [r7, #20]
 801b786:	781a      	ldrb	r2, [r3, #0]
 801b788:	4b56      	ldr	r3, [pc, #344]	; (801b8e4 <parseDHCPMSG+0x428>)
 801b78a:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 801b78c:	697b      	ldr	r3, [r7, #20]
 801b78e:	1c5a      	adds	r2, r3, #1
 801b790:	617a      	str	r2, [r7, #20]
 801b792:	781a      	ldrb	r2, [r3, #0]
 801b794:	4b53      	ldr	r3, [pc, #332]	; (801b8e4 <parseDHCPMSG+0x428>)
 801b796:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 801b798:	697b      	ldr	r3, [r7, #20]
 801b79a:	1c5a      	adds	r2, r3, #1
 801b79c:	617a      	str	r2, [r7, #20]
 801b79e:	781a      	ldrb	r2, [r3, #0]
 801b7a0:	4b50      	ldr	r3, [pc, #320]	; (801b8e4 <parseDHCPMSG+0x428>)
 801b7a2:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 801b7a4:	7afb      	ldrb	r3, [r7, #11]
 801b7a6:	3b04      	subs	r3, #4
 801b7a8:	697a      	ldr	r2, [r7, #20]
 801b7aa:	4413      	add	r3, r2
 801b7ac:	617b      	str	r3, [r7, #20]
   				break;
 801b7ae:	e08d      	b.n	801b8cc <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 801b7b0:	697b      	ldr	r3, [r7, #20]
 801b7b2:	3301      	adds	r3, #1
 801b7b4:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 801b7b6:	697b      	ldr	r3, [r7, #20]
 801b7b8:	1c5a      	adds	r2, r3, #1
 801b7ba:	617a      	str	r2, [r7, #20]
 801b7bc:	781b      	ldrb	r3, [r3, #0]
 801b7be:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 801b7c0:	697b      	ldr	r3, [r7, #20]
 801b7c2:	1c5a      	adds	r2, r3, #1
 801b7c4:	617a      	str	r2, [r7, #20]
 801b7c6:	781a      	ldrb	r2, [r3, #0]
 801b7c8:	4b47      	ldr	r3, [pc, #284]	; (801b8e8 <parseDHCPMSG+0x42c>)
 801b7ca:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 801b7cc:	697b      	ldr	r3, [r7, #20]
 801b7ce:	1c5a      	adds	r2, r3, #1
 801b7d0:	617a      	str	r2, [r7, #20]
 801b7d2:	781a      	ldrb	r2, [r3, #0]
 801b7d4:	4b44      	ldr	r3, [pc, #272]	; (801b8e8 <parseDHCPMSG+0x42c>)
 801b7d6:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 801b7d8:	697b      	ldr	r3, [r7, #20]
 801b7da:	1c5a      	adds	r2, r3, #1
 801b7dc:	617a      	str	r2, [r7, #20]
 801b7de:	781a      	ldrb	r2, [r3, #0]
 801b7e0:	4b41      	ldr	r3, [pc, #260]	; (801b8e8 <parseDHCPMSG+0x42c>)
 801b7e2:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 801b7e4:	697b      	ldr	r3, [r7, #20]
 801b7e6:	1c5a      	adds	r2, r3, #1
 801b7e8:	617a      	str	r2, [r7, #20]
 801b7ea:	781a      	ldrb	r2, [r3, #0]
 801b7ec:	4b3e      	ldr	r3, [pc, #248]	; (801b8e8 <parseDHCPMSG+0x42c>)
 801b7ee:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 801b7f0:	7afb      	ldrb	r3, [r7, #11]
 801b7f2:	3b04      	subs	r3, #4
 801b7f4:	697a      	ldr	r2, [r7, #20]
 801b7f6:	4413      	add	r3, r2
 801b7f8:	617b      	str	r3, [r7, #20]
   				break;
 801b7fa:	e067      	b.n	801b8cc <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 801b7fc:	697b      	ldr	r3, [r7, #20]
 801b7fe:	3301      	adds	r3, #1
 801b800:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 801b802:	697b      	ldr	r3, [r7, #20]
 801b804:	1c5a      	adds	r2, r3, #1
 801b806:	617a      	str	r2, [r7, #20]
 801b808:	781b      	ldrb	r3, [r3, #0]
 801b80a:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 801b80c:	697b      	ldr	r3, [r7, #20]
 801b80e:	1c5a      	adds	r2, r3, #1
 801b810:	617a      	str	r2, [r7, #20]
 801b812:	781b      	ldrb	r3, [r3, #0]
 801b814:	461a      	mov	r2, r3
 801b816:	4b35      	ldr	r3, [pc, #212]	; (801b8ec <parseDHCPMSG+0x430>)
 801b818:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801b81a:	4b34      	ldr	r3, [pc, #208]	; (801b8ec <parseDHCPMSG+0x430>)
 801b81c:	681b      	ldr	r3, [r3, #0]
 801b81e:	021a      	lsls	r2, r3, #8
 801b820:	697b      	ldr	r3, [r7, #20]
 801b822:	1c59      	adds	r1, r3, #1
 801b824:	6179      	str	r1, [r7, #20]
 801b826:	781b      	ldrb	r3, [r3, #0]
 801b828:	4413      	add	r3, r2
 801b82a:	4a30      	ldr	r2, [pc, #192]	; (801b8ec <parseDHCPMSG+0x430>)
 801b82c:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801b82e:	4b2f      	ldr	r3, [pc, #188]	; (801b8ec <parseDHCPMSG+0x430>)
 801b830:	681b      	ldr	r3, [r3, #0]
 801b832:	021a      	lsls	r2, r3, #8
 801b834:	697b      	ldr	r3, [r7, #20]
 801b836:	1c59      	adds	r1, r3, #1
 801b838:	6179      	str	r1, [r7, #20]
 801b83a:	781b      	ldrb	r3, [r3, #0]
 801b83c:	4413      	add	r3, r2
 801b83e:	4a2b      	ldr	r2, [pc, #172]	; (801b8ec <parseDHCPMSG+0x430>)
 801b840:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801b842:	4b2a      	ldr	r3, [pc, #168]	; (801b8ec <parseDHCPMSG+0x430>)
 801b844:	681b      	ldr	r3, [r3, #0]
 801b846:	021a      	lsls	r2, r3, #8
 801b848:	697b      	ldr	r3, [r7, #20]
 801b84a:	1c59      	adds	r1, r3, #1
 801b84c:	6179      	str	r1, [r7, #20]
 801b84e:	781b      	ldrb	r3, [r3, #0]
 801b850:	4413      	add	r3, r2
 801b852:	4a26      	ldr	r2, [pc, #152]	; (801b8ec <parseDHCPMSG+0x430>)
 801b854:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 801b856:	e039      	b.n	801b8cc <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 801b858:	697b      	ldr	r3, [r7, #20]
 801b85a:	3301      	adds	r3, #1
 801b85c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 801b85e:	697b      	ldr	r3, [r7, #20]
 801b860:	1c5a      	adds	r2, r3, #1
 801b862:	617a      	str	r2, [r7, #20]
 801b864:	781b      	ldrb	r3, [r3, #0]
 801b866:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 801b868:	697b      	ldr	r3, [r7, #20]
 801b86a:	1c5a      	adds	r2, r3, #1
 801b86c:	617a      	str	r2, [r7, #20]
 801b86e:	781a      	ldrb	r2, [r3, #0]
 801b870:	4b1f      	ldr	r3, [pc, #124]	; (801b8f0 <parseDHCPMSG+0x434>)
 801b872:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 801b874:	697b      	ldr	r3, [r7, #20]
 801b876:	1c5a      	adds	r2, r3, #1
 801b878:	617a      	str	r2, [r7, #20]
 801b87a:	781a      	ldrb	r2, [r3, #0]
 801b87c:	4b1c      	ldr	r3, [pc, #112]	; (801b8f0 <parseDHCPMSG+0x434>)
 801b87e:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 801b880:	697b      	ldr	r3, [r7, #20]
 801b882:	1c5a      	adds	r2, r3, #1
 801b884:	617a      	str	r2, [r7, #20]
 801b886:	781a      	ldrb	r2, [r3, #0]
 801b888:	4b19      	ldr	r3, [pc, #100]	; (801b8f0 <parseDHCPMSG+0x434>)
 801b88a:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 801b88c:	697b      	ldr	r3, [r7, #20]
 801b88e:	1c5a      	adds	r2, r3, #1
 801b890:	617a      	str	r2, [r7, #20]
 801b892:	781a      	ldrb	r2, [r3, #0]
 801b894:	4b16      	ldr	r3, [pc, #88]	; (801b8f0 <parseDHCPMSG+0x434>)
 801b896:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 801b898:	793a      	ldrb	r2, [r7, #4]
 801b89a:	4b16      	ldr	r3, [pc, #88]	; (801b8f4 <parseDHCPMSG+0x438>)
 801b89c:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 801b89e:	797a      	ldrb	r2, [r7, #5]
 801b8a0:	4b14      	ldr	r3, [pc, #80]	; (801b8f4 <parseDHCPMSG+0x438>)
 801b8a2:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 801b8a4:	79ba      	ldrb	r2, [r7, #6]
 801b8a6:	4b13      	ldr	r3, [pc, #76]	; (801b8f4 <parseDHCPMSG+0x438>)
 801b8a8:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 801b8aa:	79fa      	ldrb	r2, [r7, #7]
 801b8ac:	4b11      	ldr	r3, [pc, #68]	; (801b8f4 <parseDHCPMSG+0x438>)
 801b8ae:	70da      	strb	r2, [r3, #3]
   				break;
 801b8b0:	e00c      	b.n	801b8cc <parseDHCPMSG+0x410>
   			default :
   				p++;
 801b8b2:	697b      	ldr	r3, [r7, #20]
 801b8b4:	3301      	adds	r3, #1
 801b8b6:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 801b8b8:	697b      	ldr	r3, [r7, #20]
 801b8ba:	1c5a      	adds	r2, r3, #1
 801b8bc:	617a      	str	r2, [r7, #20]
 801b8be:	781b      	ldrb	r3, [r3, #0]
 801b8c0:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 801b8c2:	7afb      	ldrb	r3, [r7, #11]
 801b8c4:	697a      	ldr	r2, [r7, #20]
 801b8c6:	4413      	add	r3, r2
 801b8c8:	617b      	str	r3, [r7, #20]
   				break;
 801b8ca:	bf00      	nop
		while ( p < e ) {
 801b8cc:	697a      	ldr	r2, [r7, #20]
 801b8ce:	68fb      	ldr	r3, [r7, #12]
 801b8d0:	429a      	cmp	r2, r3
 801b8d2:	f4ff ae8a 	bcc.w	801b5ea <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 801b8d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801b8da:	4618      	mov	r0, r3
 801b8dc:	371c      	adds	r7, #28
 801b8de:	46bd      	mov	sp, r7
 801b8e0:	bd90      	pop	{r4, r7, pc}
 801b8e2:	bf00      	nop
 801b8e4:	20000994 	.word	0x20000994
 801b8e8:	2000099c 	.word	0x2000099c
 801b8ec:	200000f0 	.word	0x200000f0
 801b8f0:	20000984 	.word	0x20000984
 801b8f4:	20000988 	.word	0x20000988

0801b8f8 <DHCP_run>:

uint8_t DHCP_run(void)
{
 801b8f8:	b580      	push	{r7, lr}
 801b8fa:	b082      	sub	sp, #8
 801b8fc:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 801b8fe:	4b7f      	ldr	r3, [pc, #508]	; (801bafc <DHCP_run+0x204>)
 801b900:	f993 3000 	ldrsb.w	r3, [r3]
 801b904:	2b06      	cmp	r3, #6
 801b906:	d101      	bne.n	801b90c <DHCP_run+0x14>
 801b908:	2305      	movs	r3, #5
 801b90a:	e0f3      	b.n	801baf4 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 801b90c:	4b7c      	ldr	r3, [pc, #496]	; (801bb00 <DHCP_run+0x208>)
 801b90e:	781b      	ldrb	r3, [r3, #0]
 801b910:	009b      	lsls	r3, r3, #2
 801b912:	3301      	adds	r3, #1
 801b914:	00db      	lsls	r3, r3, #3
 801b916:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801b91a:	4618      	mov	r0, r3
 801b91c:	f7fc fe14 	bl	8018548 <WIZCHIP_READ>
 801b920:	4603      	mov	r3, r0
 801b922:	2b22      	cmp	r3, #34	; 0x22
 801b924:	d006      	beq.n	801b934 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 801b926:	4b76      	ldr	r3, [pc, #472]	; (801bb00 <DHCP_run+0x208>)
 801b928:	7818      	ldrb	r0, [r3, #0]
 801b92a:	2300      	movs	r3, #0
 801b92c:	2244      	movs	r2, #68	; 0x44
 801b92e:	2102      	movs	r1, #2
 801b930:	f7fd f8fa 	bl	8018b28 <socket>

	ret = DHCP_RUNNING;
 801b934:	2301      	movs	r3, #1
 801b936:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 801b938:	f7ff fdc0 	bl	801b4bc <parseDHCPMSG>
 801b93c:	4603      	mov	r3, r0
 801b93e:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 801b940:	4b6e      	ldr	r3, [pc, #440]	; (801bafc <DHCP_run+0x204>)
 801b942:	f993 3000 	ldrsb.w	r3, [r3]
 801b946:	2b04      	cmp	r3, #4
 801b948:	f200 80d0 	bhi.w	801baec <DHCP_run+0x1f4>
 801b94c:	a201      	add	r2, pc, #4	; (adr r2, 801b954 <DHCP_run+0x5c>)
 801b94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b952:	bf00      	nop
 801b954:	0801b969 	.word	0x0801b969
 801b958:	0801b98d 	.word	0x0801b98d
 801b95c:	0801b9d1 	.word	0x0801b9d1
 801b960:	0801ba21 	.word	0x0801ba21
 801b964:	0801ba7b 	.word	0x0801ba7b
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 801b968:	4b66      	ldr	r3, [pc, #408]	; (801bb04 <DHCP_run+0x20c>)
 801b96a:	2200      	movs	r2, #0
 801b96c:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 801b96e:	4b65      	ldr	r3, [pc, #404]	; (801bb04 <DHCP_run+0x20c>)
 801b970:	2200      	movs	r2, #0
 801b972:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 801b974:	4b63      	ldr	r3, [pc, #396]	; (801bb04 <DHCP_run+0x20c>)
 801b976:	2200      	movs	r2, #0
 801b978:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 801b97a:	4b62      	ldr	r3, [pc, #392]	; (801bb04 <DHCP_run+0x20c>)
 801b97c:	2200      	movs	r2, #0
 801b97e:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 801b980:	f7fe fffa 	bl	801a978 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 801b984:	4b5d      	ldr	r3, [pc, #372]	; (801bafc <DHCP_run+0x204>)
 801b986:	2201      	movs	r2, #1
 801b988:	701a      	strb	r2, [r3, #0]
   		break;
 801b98a:	e0b2      	b.n	801baf2 <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 801b98c:	79bb      	ldrb	r3, [r7, #6]
 801b98e:	2b02      	cmp	r3, #2
 801b990:	d119      	bne.n	801b9c6 <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 801b992:	4b5d      	ldr	r3, [pc, #372]	; (801bb08 <DHCP_run+0x210>)
 801b994:	681b      	ldr	r3, [r3, #0]
 801b996:	7c1a      	ldrb	r2, [r3, #16]
 801b998:	4b5a      	ldr	r3, [pc, #360]	; (801bb04 <DHCP_run+0x20c>)
 801b99a:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 801b99c:	4b5a      	ldr	r3, [pc, #360]	; (801bb08 <DHCP_run+0x210>)
 801b99e:	681b      	ldr	r3, [r3, #0]
 801b9a0:	7c5a      	ldrb	r2, [r3, #17]
 801b9a2:	4b58      	ldr	r3, [pc, #352]	; (801bb04 <DHCP_run+0x20c>)
 801b9a4:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 801b9a6:	4b58      	ldr	r3, [pc, #352]	; (801bb08 <DHCP_run+0x210>)
 801b9a8:	681b      	ldr	r3, [r3, #0]
 801b9aa:	7c9a      	ldrb	r2, [r3, #18]
 801b9ac:	4b55      	ldr	r3, [pc, #340]	; (801bb04 <DHCP_run+0x20c>)
 801b9ae:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 801b9b0:	4b55      	ldr	r3, [pc, #340]	; (801bb08 <DHCP_run+0x210>)
 801b9b2:	681b      	ldr	r3, [r3, #0]
 801b9b4:	7cda      	ldrb	r2, [r3, #19]
 801b9b6:	4b53      	ldr	r3, [pc, #332]	; (801bb04 <DHCP_run+0x20c>)
 801b9b8:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 801b9ba:	f7ff f9a3 	bl	801ad04 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 801b9be:	4b4f      	ldr	r3, [pc, #316]	; (801bafc <DHCP_run+0x204>)
 801b9c0:	2202      	movs	r2, #2
 801b9c2:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 801b9c4:	e095      	b.n	801baf2 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 801b9c6:	f000 f8b1 	bl	801bb2c <check_DHCP_timeout>
 801b9ca:	4603      	mov	r3, r0
 801b9cc:	71fb      	strb	r3, [r7, #7]
         break;
 801b9ce:	e090      	b.n	801baf2 <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 801b9d0:	79bb      	ldrb	r3, [r7, #6]
 801b9d2:	2b05      	cmp	r3, #5
 801b9d4:	d116      	bne.n	801ba04 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 801b9d6:	f000 f909 	bl	801bbec <check_DHCP_leasedIP>
 801b9da:	4603      	mov	r3, r0
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	d008      	beq.n	801b9f2 <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 801b9e0:	4b4a      	ldr	r3, [pc, #296]	; (801bb0c <DHCP_run+0x214>)
 801b9e2:	681b      	ldr	r3, [r3, #0]
 801b9e4:	4798      	blx	r3
					reset_DHCP_timeout();
 801b9e6:	f000 f9d9 	bl	801bd9c <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 801b9ea:	4b44      	ldr	r3, [pc, #272]	; (801bafc <DHCP_run+0x204>)
 801b9ec:	2203      	movs	r2, #3
 801b9ee:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 801b9f0:	e07f      	b.n	801baf2 <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 801b9f2:	f000 f9d3 	bl	801bd9c <reset_DHCP_timeout>
					dhcp_ip_conflict();
 801b9f6:	4b46      	ldr	r3, [pc, #280]	; (801bb10 <DHCP_run+0x218>)
 801b9f8:	681b      	ldr	r3, [r3, #0]
 801b9fa:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 801b9fc:	4b3f      	ldr	r3, [pc, #252]	; (801bafc <DHCP_run+0x204>)
 801b9fe:	2200      	movs	r2, #0
 801ba00:	701a      	strb	r2, [r3, #0]
		break;
 801ba02:	e076      	b.n	801baf2 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 801ba04:	79bb      	ldrb	r3, [r7, #6]
 801ba06:	2b06      	cmp	r3, #6
 801ba08:	d105      	bne.n	801ba16 <DHCP_run+0x11e>
				reset_DHCP_timeout();
 801ba0a:	f000 f9c7 	bl	801bd9c <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 801ba0e:	4b3b      	ldr	r3, [pc, #236]	; (801bafc <DHCP_run+0x204>)
 801ba10:	2201      	movs	r2, #1
 801ba12:	701a      	strb	r2, [r3, #0]
		break;
 801ba14:	e06d      	b.n	801baf2 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 801ba16:	f000 f889 	bl	801bb2c <check_DHCP_timeout>
 801ba1a:	4603      	mov	r3, r0
 801ba1c:	71fb      	strb	r3, [r7, #7]
		break;
 801ba1e:	e068      	b.n	801baf2 <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 801ba20:	2304      	movs	r3, #4
 801ba22:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/4) < dhcp_tick_1s)) {
 801ba24:	4b3b      	ldr	r3, [pc, #236]	; (801bb14 <DHCP_run+0x21c>)
 801ba26:	681b      	ldr	r3, [r3, #0]
 801ba28:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ba2c:	d060      	beq.n	801baf0 <DHCP_run+0x1f8>
 801ba2e:	4b39      	ldr	r3, [pc, #228]	; (801bb14 <DHCP_run+0x21c>)
 801ba30:	681b      	ldr	r3, [r3, #0]
 801ba32:	089a      	lsrs	r2, r3, #2
 801ba34:	4b38      	ldr	r3, [pc, #224]	; (801bb18 <DHCP_run+0x220>)
 801ba36:	681b      	ldr	r3, [r3, #0]
 801ba38:	429a      	cmp	r2, r3
 801ba3a:	d259      	bcs.n	801baf0 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 801ba3c:	2300      	movs	r3, #0
 801ba3e:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 801ba40:	4b30      	ldr	r3, [pc, #192]	; (801bb04 <DHCP_run+0x20c>)
 801ba42:	781a      	ldrb	r2, [r3, #0]
 801ba44:	4b35      	ldr	r3, [pc, #212]	; (801bb1c <DHCP_run+0x224>)
 801ba46:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 801ba48:	4b2e      	ldr	r3, [pc, #184]	; (801bb04 <DHCP_run+0x20c>)
 801ba4a:	785a      	ldrb	r2, [r3, #1]
 801ba4c:	4b33      	ldr	r3, [pc, #204]	; (801bb1c <DHCP_run+0x224>)
 801ba4e:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 801ba50:	4b2c      	ldr	r3, [pc, #176]	; (801bb04 <DHCP_run+0x20c>)
 801ba52:	789a      	ldrb	r2, [r3, #2]
 801ba54:	4b31      	ldr	r3, [pc, #196]	; (801bb1c <DHCP_run+0x224>)
 801ba56:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 801ba58:	4b2a      	ldr	r3, [pc, #168]	; (801bb04 <DHCP_run+0x20c>)
 801ba5a:	78da      	ldrb	r2, [r3, #3]
 801ba5c:	4b2f      	ldr	r3, [pc, #188]	; (801bb1c <DHCP_run+0x224>)
 801ba5e:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 801ba60:	4b2f      	ldr	r3, [pc, #188]	; (801bb20 <DHCP_run+0x228>)
 801ba62:	681b      	ldr	r3, [r3, #0]
 801ba64:	3301      	adds	r3, #1
 801ba66:	4a2e      	ldr	r2, [pc, #184]	; (801bb20 <DHCP_run+0x228>)
 801ba68:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 801ba6a:	f7ff f94b 	bl	801ad04 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 801ba6e:	f000 f995 	bl	801bd9c <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 801ba72:	4b22      	ldr	r3, [pc, #136]	; (801bafc <DHCP_run+0x204>)
 801ba74:	2204      	movs	r2, #4
 801ba76:	701a      	strb	r2, [r3, #0]
			}
		break;
 801ba78:	e03a      	b.n	801baf0 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 801ba7a:	2304      	movs	r3, #4
 801ba7c:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 801ba7e:	79bb      	ldrb	r3, [r7, #6]
 801ba80:	2b05      	cmp	r3, #5
 801ba82:	d125      	bne.n	801bad0 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 801ba84:	4b27      	ldr	r3, [pc, #156]	; (801bb24 <DHCP_run+0x22c>)
 801ba86:	2200      	movs	r2, #0
 801ba88:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 801ba8a:	4b24      	ldr	r3, [pc, #144]	; (801bb1c <DHCP_run+0x224>)
 801ba8c:	781a      	ldrb	r2, [r3, #0]
 801ba8e:	4b1d      	ldr	r3, [pc, #116]	; (801bb04 <DHCP_run+0x20c>)
 801ba90:	781b      	ldrb	r3, [r3, #0]
 801ba92:	429a      	cmp	r2, r3
 801ba94:	d111      	bne.n	801baba <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 801ba96:	4b21      	ldr	r3, [pc, #132]	; (801bb1c <DHCP_run+0x224>)
 801ba98:	785a      	ldrb	r2, [r3, #1]
 801ba9a:	4b1a      	ldr	r3, [pc, #104]	; (801bb04 <DHCP_run+0x20c>)
 801ba9c:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 801ba9e:	429a      	cmp	r2, r3
 801baa0:	d10b      	bne.n	801baba <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 801baa2:	4b1e      	ldr	r3, [pc, #120]	; (801bb1c <DHCP_run+0x224>)
 801baa4:	789a      	ldrb	r2, [r3, #2]
 801baa6:	4b17      	ldr	r3, [pc, #92]	; (801bb04 <DHCP_run+0x20c>)
 801baa8:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 801baaa:	429a      	cmp	r2, r3
 801baac:	d105      	bne.n	801baba <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 801baae:	4b1b      	ldr	r3, [pc, #108]	; (801bb1c <DHCP_run+0x224>)
 801bab0:	78da      	ldrb	r2, [r3, #3]
 801bab2:	4b14      	ldr	r3, [pc, #80]	; (801bb04 <DHCP_run+0x20c>)
 801bab4:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 801bab6:	429a      	cmp	r2, r3
 801bab8:	d004      	beq.n	801bac4 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 801baba:	2303      	movs	r3, #3
 801babc:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 801babe:	4b1a      	ldr	r3, [pc, #104]	; (801bb28 <DHCP_run+0x230>)
 801bac0:	681b      	ldr	r3, [r3, #0]
 801bac2:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 801bac4:	f000 f96a 	bl	801bd9c <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 801bac8:	4b0c      	ldr	r3, [pc, #48]	; (801bafc <DHCP_run+0x204>)
 801baca:	2203      	movs	r2, #3
 801bacc:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 801bace:	e010      	b.n	801baf2 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 801bad0:	79bb      	ldrb	r3, [r7, #6]
 801bad2:	2b06      	cmp	r3, #6
 801bad4:	d105      	bne.n	801bae2 <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 801bad6:	f000 f961 	bl	801bd9c <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 801bada:	4b08      	ldr	r3, [pc, #32]	; (801bafc <DHCP_run+0x204>)
 801badc:	2201      	movs	r2, #1
 801bade:	701a      	strb	r2, [r3, #0]
	   	break;
 801bae0:	e007      	b.n	801baf2 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 801bae2:	f000 f823 	bl	801bb2c <check_DHCP_timeout>
 801bae6:	4603      	mov	r3, r0
 801bae8:	71fb      	strb	r3, [r7, #7]
	   	break;
 801baea:	e002      	b.n	801baf2 <DHCP_run+0x1fa>
		default :
   		break;
 801baec:	bf00      	nop
 801baee:	e000      	b.n	801baf2 <DHCP_run+0x1fa>
		break;
 801baf0:	bf00      	nop
	}

	return ret;
 801baf2:	79fb      	ldrb	r3, [r7, #7]
}
 801baf4:	4618      	mov	r0, r3
 801baf6:	3708      	adds	r7, #8
 801baf8:	46bd      	mov	sp, r7
 801bafa:	bd80      	pop	{r7, pc}
 801bafc:	200009a0 	.word	0x200009a0
 801bb00:	20000981 	.word	0x20000981
 801bb04:	20000990 	.word	0x20000990
 801bb08:	200009ac 	.word	0x200009ac
 801bb0c:	20000104 	.word	0x20000104
 801bb10:	2000010c 	.word	0x2000010c
 801bb14:	200000f0 	.word	0x200000f0
 801bb18:	200009a4 	.word	0x200009a4
 801bb1c:	2000098c 	.word	0x2000098c
 801bb20:	200009a8 	.word	0x200009a8
 801bb24:	200009a1 	.word	0x200009a1
 801bb28:	20000108 	.word	0x20000108

0801bb2c <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 801bb2c:	b580      	push	{r7, lr}
 801bb2e:	b082      	sub	sp, #8
 801bb30:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 801bb32:	2301      	movs	r3, #1
 801bb34:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 801bb36:	4b29      	ldr	r3, [pc, #164]	; (801bbdc <check_DHCP_timeout+0xb0>)
 801bb38:	f993 3000 	ldrsb.w	r3, [r3]
 801bb3c:	2b63      	cmp	r3, #99	; 0x63
 801bb3e:	dc2d      	bgt.n	801bb9c <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 801bb40:	4b27      	ldr	r3, [pc, #156]	; (801bbe0 <check_DHCP_timeout+0xb4>)
 801bb42:	681a      	ldr	r2, [r3, #0]
 801bb44:	4b27      	ldr	r3, [pc, #156]	; (801bbe4 <check_DHCP_timeout+0xb8>)
 801bb46:	681b      	ldr	r3, [r3, #0]
 801bb48:	429a      	cmp	r2, r3
 801bb4a:	d242      	bcs.n	801bbd2 <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 801bb4c:	4b26      	ldr	r3, [pc, #152]	; (801bbe8 <check_DHCP_timeout+0xbc>)
 801bb4e:	f993 3000 	ldrsb.w	r3, [r3]
 801bb52:	2b04      	cmp	r3, #4
 801bb54:	d00c      	beq.n	801bb70 <check_DHCP_timeout+0x44>
 801bb56:	2b04      	cmp	r3, #4
 801bb58:	dc0d      	bgt.n	801bb76 <check_DHCP_timeout+0x4a>
 801bb5a:	2b01      	cmp	r3, #1
 801bb5c:	d002      	beq.n	801bb64 <check_DHCP_timeout+0x38>
 801bb5e:	2b02      	cmp	r3, #2
 801bb60:	d003      	beq.n	801bb6a <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 801bb62:	e008      	b.n	801bb76 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 801bb64:	f7fe ff08 	bl	801a978 <send_DHCP_DISCOVER>
				break;
 801bb68:	e006      	b.n	801bb78 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 801bb6a:	f7ff f8cb 	bl	801ad04 <send_DHCP_REQUEST>
				break;
 801bb6e:	e003      	b.n	801bb78 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 801bb70:	f7ff f8c8 	bl	801ad04 <send_DHCP_REQUEST>
				break;
 801bb74:	e000      	b.n	801bb78 <check_DHCP_timeout+0x4c>
				break;
 801bb76:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 801bb78:	4b1a      	ldr	r3, [pc, #104]	; (801bbe4 <check_DHCP_timeout+0xb8>)
 801bb7a:	2200      	movs	r2, #0
 801bb7c:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 801bb7e:	4b19      	ldr	r3, [pc, #100]	; (801bbe4 <check_DHCP_timeout+0xb8>)
 801bb80:	681b      	ldr	r3, [r3, #0]
 801bb82:	3302      	adds	r3, #2
 801bb84:	4a16      	ldr	r2, [pc, #88]	; (801bbe0 <check_DHCP_timeout+0xb4>)
 801bb86:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 801bb88:	4b14      	ldr	r3, [pc, #80]	; (801bbdc <check_DHCP_timeout+0xb0>)
 801bb8a:	f993 3000 	ldrsb.w	r3, [r3]
 801bb8e:	b2db      	uxtb	r3, r3
 801bb90:	3301      	adds	r3, #1
 801bb92:	b2db      	uxtb	r3, r3
 801bb94:	b25a      	sxtb	r2, r3
 801bb96:	4b11      	ldr	r3, [pc, #68]	; (801bbdc <check_DHCP_timeout+0xb0>)
 801bb98:	701a      	strb	r2, [r3, #0]
 801bb9a:	e01a      	b.n	801bbd2 <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 801bb9c:	4b12      	ldr	r3, [pc, #72]	; (801bbe8 <check_DHCP_timeout+0xbc>)
 801bb9e:	f993 3000 	ldrsb.w	r3, [r3]
 801bba2:	2b04      	cmp	r3, #4
 801bba4:	d00c      	beq.n	801bbc0 <check_DHCP_timeout+0x94>
 801bba6:	2b04      	cmp	r3, #4
 801bba8:	dc10      	bgt.n	801bbcc <check_DHCP_timeout+0xa0>
 801bbaa:	2b01      	cmp	r3, #1
 801bbac:	d002      	beq.n	801bbb4 <check_DHCP_timeout+0x88>
 801bbae:	2b02      	cmp	r3, #2
 801bbb0:	d006      	beq.n	801bbc0 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 801bbb2:	e00b      	b.n	801bbcc <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 801bbb4:	4b0c      	ldr	r3, [pc, #48]	; (801bbe8 <check_DHCP_timeout+0xbc>)
 801bbb6:	2200      	movs	r2, #0
 801bbb8:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 801bbba:	2300      	movs	r3, #0
 801bbbc:	71fb      	strb	r3, [r7, #7]
				break;
 801bbbe:	e006      	b.n	801bbce <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 801bbc0:	f7fe feda 	bl	801a978 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 801bbc4:	4b08      	ldr	r3, [pc, #32]	; (801bbe8 <check_DHCP_timeout+0xbc>)
 801bbc6:	2201      	movs	r2, #1
 801bbc8:	701a      	strb	r2, [r3, #0]
				break;
 801bbca:	e000      	b.n	801bbce <check_DHCP_timeout+0xa2>
				break;
 801bbcc:	bf00      	nop
		}
		reset_DHCP_timeout();
 801bbce:	f000 f8e5 	bl	801bd9c <reset_DHCP_timeout>
	}
	return ret;
 801bbd2:	79fb      	ldrb	r3, [r7, #7]
}
 801bbd4:	4618      	mov	r0, r3
 801bbd6:	3708      	adds	r7, #8
 801bbd8:	46bd      	mov	sp, r7
 801bbda:	bd80      	pop	{r7, pc}
 801bbdc:	200009a1 	.word	0x200009a1
 801bbe0:	200000f4 	.word	0x200000f4
 801bbe4:	200009a4 	.word	0x200009a4
 801bbe8:	200009a0 	.word	0x200009a0

0801bbec <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 801bbec:	b580      	push	{r7, lr}
 801bbee:	b084      	sub	sp, #16
 801bbf0:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 801bbf2:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801bbf6:	f7fc fca7 	bl	8018548 <WIZCHIP_READ>
 801bbfa:	4603      	mov	r3, r0
 801bbfc:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 801bbfe:	2103      	movs	r1, #3
 801bc00:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801bc04:	f7fc fcec 	bl	80185e0 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 801bc08:	4b15      	ldr	r3, [pc, #84]	; (801bc60 <check_DHCP_leasedIP+0x74>)
 801bc0a:	7818      	ldrb	r0, [r3, #0]
 801bc0c:	f241 3388 	movw	r3, #5000	; 0x1388
 801bc10:	9300      	str	r3, [sp, #0]
 801bc12:	4b14      	ldr	r3, [pc, #80]	; (801bc64 <check_DHCP_leasedIP+0x78>)
 801bc14:	2211      	movs	r2, #17
 801bc16:	4914      	ldr	r1, [pc, #80]	; (801bc68 <check_DHCP_leasedIP+0x7c>)
 801bc18:	f7fd fc64 	bl	80194e4 <sendto>
 801bc1c:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 801bc1e:	79fb      	ldrb	r3, [r7, #7]
 801bc20:	4619      	mov	r1, r3
 801bc22:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801bc26:	f7fc fcdb 	bl	80185e0 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 801bc2a:	683b      	ldr	r3, [r7, #0]
 801bc2c:	f113 0f0d 	cmn.w	r3, #13
 801bc30:	d101      	bne.n	801bc36 <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 801bc32:	2301      	movs	r3, #1
 801bc34:	e010      	b.n	801bc58 <check_DHCP_leasedIP+0x6c>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 801bc36:	f7ff faef 	bl	801b218 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 801bc3a:	4b0c      	ldr	r3, [pc, #48]	; (801bc6c <check_DHCP_leasedIP+0x80>)
 801bc3c:	681b      	ldr	r3, [r3, #0]
 801bc3e:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2){ // wait for 1s over; wait to complete to send DECLINE message;
 801bc40:	e003      	b.n	801bc4a <check_DHCP_leasedIP+0x5e>

			delay(200);
 801bc42:	4b0b      	ldr	r3, [pc, #44]	; (801bc70 <check_DHCP_leasedIP+0x84>)
 801bc44:	681b      	ldr	r3, [r3, #0]
 801bc46:	20c8      	movs	r0, #200	; 0xc8
 801bc48:	4798      	blx	r3
		while((dhcp_tick_1s - ret) < 2){ // wait for 1s over; wait to complete to send DECLINE message;
 801bc4a:	4b08      	ldr	r3, [pc, #32]	; (801bc6c <check_DHCP_leasedIP+0x80>)
 801bc4c:	681a      	ldr	r2, [r3, #0]
 801bc4e:	683b      	ldr	r3, [r7, #0]
 801bc50:	1ad3      	subs	r3, r2, r3
 801bc52:	2b01      	cmp	r3, #1
 801bc54:	d9f5      	bls.n	801bc42 <check_DHCP_leasedIP+0x56>

		}
		return 0;
 801bc56:	2300      	movs	r3, #0
	}
}	
 801bc58:	4618      	mov	r0, r3
 801bc5a:	3708      	adds	r7, #8
 801bc5c:	46bd      	mov	sp, r7
 801bc5e:	bd80      	pop	{r7, pc}
 801bc60:	20000981 	.word	0x20000981
 801bc64:	20000990 	.word	0x20000990
 801bc68:	08032aac 	.word	0x08032aac
 801bc6c:	200009a4 	.word	0x200009a4
 801bc70:	20000110 	.word	0x20000110

0801bc74 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 801bc74:	b580      	push	{r7, lr}
 801bc76:	b084      	sub	sp, #16
 801bc78:	af00      	add	r7, sp, #0
 801bc7a:	4603      	mov	r3, r0
 801bc7c:	6039      	str	r1, [r7, #0]
 801bc7e:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 801bc80:	2300      	movs	r3, #0
 801bc82:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 801bc84:	2206      	movs	r2, #6
 801bc86:	493f      	ldr	r1, [pc, #252]	; (801bd84 <DHCP_init+0x110>)
 801bc88:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801bc8c:	f7fc fcf6 	bl	801867c <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 801bc90:	4b3c      	ldr	r3, [pc, #240]	; (801bd84 <DHCP_init+0x110>)
 801bc92:	781a      	ldrb	r2, [r3, #0]
 801bc94:	4b3b      	ldr	r3, [pc, #236]	; (801bd84 <DHCP_init+0x110>)
 801bc96:	785b      	ldrb	r3, [r3, #1]
 801bc98:	4313      	orrs	r3, r2
 801bc9a:	b2da      	uxtb	r2, r3
 801bc9c:	4b39      	ldr	r3, [pc, #228]	; (801bd84 <DHCP_init+0x110>)
 801bc9e:	789b      	ldrb	r3, [r3, #2]
 801bca0:	4313      	orrs	r3, r2
 801bca2:	b2da      	uxtb	r2, r3
 801bca4:	4b37      	ldr	r3, [pc, #220]	; (801bd84 <DHCP_init+0x110>)
 801bca6:	78db      	ldrb	r3, [r3, #3]
 801bca8:	4313      	orrs	r3, r2
 801bcaa:	b2da      	uxtb	r2, r3
 801bcac:	4b35      	ldr	r3, [pc, #212]	; (801bd84 <DHCP_init+0x110>)
 801bcae:	791b      	ldrb	r3, [r3, #4]
 801bcb0:	4313      	orrs	r3, r2
 801bcb2:	b2da      	uxtb	r2, r3
 801bcb4:	4b33      	ldr	r3, [pc, #204]	; (801bd84 <DHCP_init+0x110>)
 801bcb6:	795b      	ldrb	r3, [r3, #5]
 801bcb8:	4313      	orrs	r3, r2
 801bcba:	b2db      	uxtb	r3, r3
 801bcbc:	2b00      	cmp	r3, #0
 801bcbe:	d117      	bne.n	801bcf0 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 801bcc0:	4b30      	ldr	r3, [pc, #192]	; (801bd84 <DHCP_init+0x110>)
 801bcc2:	2200      	movs	r2, #0
 801bcc4:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 801bcc6:	4b2f      	ldr	r3, [pc, #188]	; (801bd84 <DHCP_init+0x110>)
 801bcc8:	2208      	movs	r2, #8
 801bcca:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 801bccc:	4b2d      	ldr	r3, [pc, #180]	; (801bd84 <DHCP_init+0x110>)
 801bcce:	22dc      	movs	r2, #220	; 0xdc
 801bcd0:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 801bcd2:	4b2c      	ldr	r3, [pc, #176]	; (801bd84 <DHCP_init+0x110>)
 801bcd4:	2200      	movs	r2, #0
 801bcd6:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 801bcd8:	4b2a      	ldr	r3, [pc, #168]	; (801bd84 <DHCP_init+0x110>)
 801bcda:	2200      	movs	r2, #0
 801bcdc:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 801bcde:	4b29      	ldr	r3, [pc, #164]	; (801bd84 <DHCP_init+0x110>)
 801bce0:	2200      	movs	r2, #0
 801bce2:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 801bce4:	2206      	movs	r2, #6
 801bce6:	4927      	ldr	r1, [pc, #156]	; (801bd84 <DHCP_init+0x110>)
 801bce8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801bcec:	f7fc fd26 	bl	801873c <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 801bcf0:	4a25      	ldr	r2, [pc, #148]	; (801bd88 <DHCP_init+0x114>)
 801bcf2:	79fb      	ldrb	r3, [r7, #7]
 801bcf4:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 801bcf6:	4a25      	ldr	r2, [pc, #148]	; (801bd8c <DHCP_init+0x118>)
 801bcf8:	683b      	ldr	r3, [r7, #0]
 801bcfa:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 801bcfc:	4b24      	ldr	r3, [pc, #144]	; (801bd90 <DHCP_init+0x11c>)
 801bcfe:	4a25      	ldr	r2, [pc, #148]	; (801bd94 <DHCP_init+0x120>)
 801bd00:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 801bd02:	4b20      	ldr	r3, [pc, #128]	; (801bd84 <DHCP_init+0x110>)
 801bd04:	78db      	ldrb	r3, [r3, #3]
 801bd06:	461a      	mov	r2, r3
 801bd08:	4b21      	ldr	r3, [pc, #132]	; (801bd90 <DHCP_init+0x11c>)
 801bd0a:	681b      	ldr	r3, [r3, #0]
 801bd0c:	4413      	add	r3, r2
 801bd0e:	4a20      	ldr	r2, [pc, #128]	; (801bd90 <DHCP_init+0x11c>)
 801bd10:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 801bd12:	4b1c      	ldr	r3, [pc, #112]	; (801bd84 <DHCP_init+0x110>)
 801bd14:	791b      	ldrb	r3, [r3, #4]
 801bd16:	461a      	mov	r2, r3
 801bd18:	4b1d      	ldr	r3, [pc, #116]	; (801bd90 <DHCP_init+0x11c>)
 801bd1a:	681b      	ldr	r3, [r3, #0]
 801bd1c:	4413      	add	r3, r2
 801bd1e:	4a1c      	ldr	r2, [pc, #112]	; (801bd90 <DHCP_init+0x11c>)
 801bd20:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 801bd22:	4b18      	ldr	r3, [pc, #96]	; (801bd84 <DHCP_init+0x110>)
 801bd24:	795b      	ldrb	r3, [r3, #5]
 801bd26:	461a      	mov	r2, r3
 801bd28:	4b19      	ldr	r3, [pc, #100]	; (801bd90 <DHCP_init+0x11c>)
 801bd2a:	681b      	ldr	r3, [r3, #0]
 801bd2c:	4413      	add	r3, r2
 801bd2e:	4a18      	ldr	r2, [pc, #96]	; (801bd90 <DHCP_init+0x11c>)
 801bd30:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 801bd32:	4b14      	ldr	r3, [pc, #80]	; (801bd84 <DHCP_init+0x110>)
 801bd34:	78da      	ldrb	r2, [r3, #3]
 801bd36:	4b13      	ldr	r3, [pc, #76]	; (801bd84 <DHCP_init+0x110>)
 801bd38:	791b      	ldrb	r3, [r3, #4]
 801bd3a:	4053      	eors	r3, r2
 801bd3c:	b2da      	uxtb	r2, r3
 801bd3e:	4b11      	ldr	r3, [pc, #68]	; (801bd84 <DHCP_init+0x110>)
 801bd40:	795b      	ldrb	r3, [r3, #5]
 801bd42:	4053      	eors	r3, r2
 801bd44:	b2db      	uxtb	r3, r3
 801bd46:	461a      	mov	r2, r3
 801bd48:	4b11      	ldr	r3, [pc, #68]	; (801bd90 <DHCP_init+0x11c>)
 801bd4a:	681b      	ldr	r3, [r3, #0]
 801bd4c:	4413      	add	r3, r2
 801bd4e:	4a10      	ldr	r2, [pc, #64]	; (801bd90 <DHCP_init+0x11c>)
 801bd50:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 801bd52:	f107 030c 	add.w	r3, r7, #12
 801bd56:	2204      	movs	r2, #4
 801bd58:	4619      	mov	r1, r3
 801bd5a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801bd5e:	f7fc fced 	bl	801873c <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 801bd62:	f107 030c 	add.w	r3, r7, #12
 801bd66:	2204      	movs	r2, #4
 801bd68:	4619      	mov	r1, r3
 801bd6a:	f44f 7080 	mov.w	r0, #256	; 0x100
 801bd6e:	f7fc fce5 	bl	801873c <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 801bd72:	f000 f813 	bl	801bd9c <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 801bd76:	4b08      	ldr	r3, [pc, #32]	; (801bd98 <DHCP_init+0x124>)
 801bd78:	2200      	movs	r2, #0
 801bd7a:	701a      	strb	r2, [r3, #0]
}
 801bd7c:	bf00      	nop
 801bd7e:	3710      	adds	r7, #16
 801bd80:	46bd      	mov	sp, r7
 801bd82:	bd80      	pop	{r7, pc}
 801bd84:	200009b0 	.word	0x200009b0
 801bd88:	20000981 	.word	0x20000981
 801bd8c:	200009ac 	.word	0x200009ac
 801bd90:	200009a8 	.word	0x200009a8
 801bd94:	12345678 	.word	0x12345678
 801bd98:	200009a0 	.word	0x200009a0

0801bd9c <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 801bd9c:	b480      	push	{r7}
 801bd9e:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 801bda0:	4b06      	ldr	r3, [pc, #24]	; (801bdbc <reset_DHCP_timeout+0x20>)
 801bda2:	2200      	movs	r2, #0
 801bda4:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 801bda6:	4b06      	ldr	r3, [pc, #24]	; (801bdc0 <reset_DHCP_timeout+0x24>)
 801bda8:	2202      	movs	r2, #2
 801bdaa:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 801bdac:	4b05      	ldr	r3, [pc, #20]	; (801bdc4 <reset_DHCP_timeout+0x28>)
 801bdae:	2200      	movs	r2, #0
 801bdb0:	701a      	strb	r2, [r3, #0]
}
 801bdb2:	bf00      	nop
 801bdb4:	46bd      	mov	sp, r7
 801bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdba:	4770      	bx	lr
 801bdbc:	200009a4 	.word	0x200009a4
 801bdc0:	200000f4 	.word	0x200000f4
 801bdc4:	200009a1 	.word	0x200009a1

0801bdc8 <DHCP_time_handler>:

void DHCP_time_handler(void)
{
 801bdc8:	b480      	push	{r7}
 801bdca:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 801bdcc:	4b04      	ldr	r3, [pc, #16]	; (801bde0 <DHCP_time_handler+0x18>)
 801bdce:	681b      	ldr	r3, [r3, #0]
 801bdd0:	3301      	adds	r3, #1
 801bdd2:	4a03      	ldr	r2, [pc, #12]	; (801bde0 <DHCP_time_handler+0x18>)
 801bdd4:	6013      	str	r3, [r2, #0]
}
 801bdd6:	bf00      	nop
 801bdd8:	46bd      	mov	sp, r7
 801bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdde:	4770      	bx	lr
 801bde0:	200009a4 	.word	0x200009a4

0801bde4 <getIPfromDHCP>:

void getIPfromDHCP(uint8_t* ip)
{
 801bde4:	b480      	push	{r7}
 801bde6:	b083      	sub	sp, #12
 801bde8:	af00      	add	r7, sp, #0
 801bdea:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 801bdec:	4b0c      	ldr	r3, [pc, #48]	; (801be20 <getIPfromDHCP+0x3c>)
 801bdee:	781a      	ldrb	r2, [r3, #0]
 801bdf0:	687b      	ldr	r3, [r7, #4]
 801bdf2:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 801bdf4:	687b      	ldr	r3, [r7, #4]
 801bdf6:	3301      	adds	r3, #1
 801bdf8:	4a09      	ldr	r2, [pc, #36]	; (801be20 <getIPfromDHCP+0x3c>)
 801bdfa:	7852      	ldrb	r2, [r2, #1]
 801bdfc:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 801bdfe:	687b      	ldr	r3, [r7, #4]
 801be00:	3302      	adds	r3, #2
 801be02:	4a07      	ldr	r2, [pc, #28]	; (801be20 <getIPfromDHCP+0x3c>)
 801be04:	7892      	ldrb	r2, [r2, #2]
 801be06:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 801be08:	687b      	ldr	r3, [r7, #4]
 801be0a:	3303      	adds	r3, #3
 801be0c:	4a04      	ldr	r2, [pc, #16]	; (801be20 <getIPfromDHCP+0x3c>)
 801be0e:	78d2      	ldrb	r2, [r2, #3]
 801be10:	701a      	strb	r2, [r3, #0]
}
 801be12:	bf00      	nop
 801be14:	370c      	adds	r7, #12
 801be16:	46bd      	mov	sp, r7
 801be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be1c:	4770      	bx	lr
 801be1e:	bf00      	nop
 801be20:	20000990 	.word	0x20000990

0801be24 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 801be24:	b480      	push	{r7}
 801be26:	b083      	sub	sp, #12
 801be28:	af00      	add	r7, sp, #0
 801be2a:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 801be2c:	4b0c      	ldr	r3, [pc, #48]	; (801be60 <getGWfromDHCP+0x3c>)
 801be2e:	781a      	ldrb	r2, [r3, #0]
 801be30:	687b      	ldr	r3, [r7, #4]
 801be32:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	3301      	adds	r3, #1
 801be38:	4a09      	ldr	r2, [pc, #36]	; (801be60 <getGWfromDHCP+0x3c>)
 801be3a:	7852      	ldrb	r2, [r2, #1]
 801be3c:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 801be3e:	687b      	ldr	r3, [r7, #4]
 801be40:	3302      	adds	r3, #2
 801be42:	4a07      	ldr	r2, [pc, #28]	; (801be60 <getGWfromDHCP+0x3c>)
 801be44:	7892      	ldrb	r2, [r2, #2]
 801be46:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	3303      	adds	r3, #3
 801be4c:	4a04      	ldr	r2, [pc, #16]	; (801be60 <getGWfromDHCP+0x3c>)
 801be4e:	78d2      	ldrb	r2, [r2, #3]
 801be50:	701a      	strb	r2, [r3, #0]
}
 801be52:	bf00      	nop
 801be54:	370c      	adds	r7, #12
 801be56:	46bd      	mov	sp, r7
 801be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be5c:	4770      	bx	lr
 801be5e:	bf00      	nop
 801be60:	20000994 	.word	0x20000994

0801be64 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 801be64:	b480      	push	{r7}
 801be66:	b083      	sub	sp, #12
 801be68:	af00      	add	r7, sp, #0
 801be6a:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 801be6c:	4b0c      	ldr	r3, [pc, #48]	; (801bea0 <getSNfromDHCP+0x3c>)
 801be6e:	781a      	ldrb	r2, [r3, #0]
 801be70:	687b      	ldr	r3, [r7, #4]
 801be72:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 801be74:	687b      	ldr	r3, [r7, #4]
 801be76:	3301      	adds	r3, #1
 801be78:	4a09      	ldr	r2, [pc, #36]	; (801bea0 <getSNfromDHCP+0x3c>)
 801be7a:	7852      	ldrb	r2, [r2, #1]
 801be7c:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 801be7e:	687b      	ldr	r3, [r7, #4]
 801be80:	3302      	adds	r3, #2
 801be82:	4a07      	ldr	r2, [pc, #28]	; (801bea0 <getSNfromDHCP+0x3c>)
 801be84:	7892      	ldrb	r2, [r2, #2]
 801be86:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 801be88:	687b      	ldr	r3, [r7, #4]
 801be8a:	3303      	adds	r3, #3
 801be8c:	4a04      	ldr	r2, [pc, #16]	; (801bea0 <getSNfromDHCP+0x3c>)
 801be8e:	78d2      	ldrb	r2, [r2, #3]
 801be90:	701a      	strb	r2, [r3, #0]
}
 801be92:	bf00      	nop
 801be94:	370c      	adds	r7, #12
 801be96:	46bd      	mov	sp, r7
 801be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be9c:	4770      	bx	lr
 801be9e:	bf00      	nop
 801bea0:	20000998 	.word	0x20000998

0801bea4 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 801bea4:	b480      	push	{r7}
 801bea6:	b083      	sub	sp, #12
 801bea8:	af00      	add	r7, sp, #0
 801beaa:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 801beac:	4b0c      	ldr	r3, [pc, #48]	; (801bee0 <getDNSfromDHCP+0x3c>)
 801beae:	781a      	ldrb	r2, [r3, #0]
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 801beb4:	687b      	ldr	r3, [r7, #4]
 801beb6:	3301      	adds	r3, #1
 801beb8:	4a09      	ldr	r2, [pc, #36]	; (801bee0 <getDNSfromDHCP+0x3c>)
 801beba:	7852      	ldrb	r2, [r2, #1]
 801bebc:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 801bebe:	687b      	ldr	r3, [r7, #4]
 801bec0:	3302      	adds	r3, #2
 801bec2:	4a07      	ldr	r2, [pc, #28]	; (801bee0 <getDNSfromDHCP+0x3c>)
 801bec4:	7892      	ldrb	r2, [r2, #2]
 801bec6:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 801bec8:	687b      	ldr	r3, [r7, #4]
 801beca:	3303      	adds	r3, #3
 801becc:	4a04      	ldr	r2, [pc, #16]	; (801bee0 <getDNSfromDHCP+0x3c>)
 801bece:	78d2      	ldrb	r2, [r2, #3]
 801bed0:	701a      	strb	r2, [r3, #0]
}
 801bed2:	bf00      	nop
 801bed4:	370c      	adds	r7, #12
 801bed6:	46bd      	mov	sp, r7
 801bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bedc:	4770      	bx	lr
 801bede:	bf00      	nop
 801bee0:	2000099c 	.word	0x2000099c

0801bee4 <getDHCPLeasetime>:

uint32_t getDHCPLeasetime(void)
{
 801bee4:	b480      	push	{r7}
 801bee6:	af00      	add	r7, sp, #0
	return dhcp_lease_time;
 801bee8:	4b03      	ldr	r3, [pc, #12]	; (801bef8 <getDHCPLeasetime+0x14>)
 801beea:	681b      	ldr	r3, [r3, #0]
}
 801beec:	4618      	mov	r0, r3
 801beee:	46bd      	mov	sp, r7
 801bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bef4:	4770      	bx	lr
 801bef6:	bf00      	nop
 801bef8:	200000f0 	.word	0x200000f0

0801befc <NibbleToHex>:

char NibbleToHex(uint8_t nibble)
{
 801befc:	b480      	push	{r7}
 801befe:	b083      	sub	sp, #12
 801bf00:	af00      	add	r7, sp, #0
 801bf02:	4603      	mov	r3, r0
 801bf04:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 801bf06:	79fb      	ldrb	r3, [r7, #7]
 801bf08:	f003 030f 	and.w	r3, r3, #15
 801bf0c:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 801bf0e:	79fb      	ldrb	r3, [r7, #7]
 801bf10:	2b09      	cmp	r3, #9
 801bf12:	d803      	bhi.n	801bf1c <NibbleToHex+0x20>
    return nibble + '0';
 801bf14:	79fb      	ldrb	r3, [r7, #7]
 801bf16:	3330      	adds	r3, #48	; 0x30
 801bf18:	b2db      	uxtb	r3, r3
 801bf1a:	e002      	b.n	801bf22 <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 801bf1c:	79fb      	ldrb	r3, [r7, #7]
 801bf1e:	3337      	adds	r3, #55	; 0x37
 801bf20:	b2db      	uxtb	r3, r3
}
 801bf22:	4618      	mov	r0, r3
 801bf24:	370c      	adds	r7, #12
 801bf26:	46bd      	mov	sp, r7
 801bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf2c:	4770      	bx	lr

0801bf2e <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 801bf2e:	b480      	push	{r7}
 801bf30:	b085      	sub	sp, #20
 801bf32:	af00      	add	r7, sp, #0
 801bf34:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 801bf36:	687b      	ldr	r3, [r7, #4]
 801bf38:	1c5a      	adds	r2, r3, #1
 801bf3a:	607a      	str	r2, [r7, #4]
 801bf3c:	781b      	ldrb	r3, [r3, #0]
 801bf3e:	b29b      	uxth	r3, r3
 801bf40:	021b      	lsls	r3, r3, #8
 801bf42:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 801bf44:	687b      	ldr	r3, [r7, #4]
 801bf46:	781b      	ldrb	r3, [r3, #0]
 801bf48:	b29a      	uxth	r2, r3
 801bf4a:	89fb      	ldrh	r3, [r7, #14]
 801bf4c:	4413      	add	r3, r2
 801bf4e:	81fb      	strh	r3, [r7, #14]
	return i;
 801bf50:	89fb      	ldrh	r3, [r7, #14]
}
 801bf52:	4618      	mov	r0, r3
 801bf54:	3714      	adds	r7, #20
 801bf56:	46bd      	mov	sp, r7
 801bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf5c:	4770      	bx	lr

0801bf5e <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 801bf5e:	b480      	push	{r7}
 801bf60:	b083      	sub	sp, #12
 801bf62:	af00      	add	r7, sp, #0
 801bf64:	6078      	str	r0, [r7, #4]
 801bf66:	460b      	mov	r3, r1
 801bf68:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 801bf6a:	887b      	ldrh	r3, [r7, #2]
 801bf6c:	0a1b      	lsrs	r3, r3, #8
 801bf6e:	b299      	uxth	r1, r3
 801bf70:	687b      	ldr	r3, [r7, #4]
 801bf72:	1c5a      	adds	r2, r3, #1
 801bf74:	607a      	str	r2, [r7, #4]
 801bf76:	b2ca      	uxtb	r2, r1
 801bf78:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 801bf7a:	687b      	ldr	r3, [r7, #4]
 801bf7c:	1c5a      	adds	r2, r3, #1
 801bf7e:	607a      	str	r2, [r7, #4]
 801bf80:	887a      	ldrh	r2, [r7, #2]
 801bf82:	b2d2      	uxtb	r2, r2
 801bf84:	701a      	strb	r2, [r3, #0]
	return s;
 801bf86:	687b      	ldr	r3, [r7, #4]
}
 801bf88:	4618      	mov	r0, r3
 801bf8a:	370c      	adds	r7, #12
 801bf8c:	46bd      	mov	sp, r7
 801bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf92:	4770      	bx	lr

0801bf94 <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 801bf94:	b480      	push	{r7}
 801bf96:	b08b      	sub	sp, #44	; 0x2c
 801bf98:	af00      	add	r7, sp, #0
 801bf9a:	60f8      	str	r0, [r7, #12]
 801bf9c:	60b9      	str	r1, [r7, #8]
 801bf9e:	607a      	str	r2, [r7, #4]
 801bfa0:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 801bfa2:	2300      	movs	r3, #0
 801bfa4:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 801bfa6:	2300      	movs	r3, #0
 801bfa8:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 801bfaa:	2300      	movs	r3, #0
 801bfac:	617b      	str	r3, [r7, #20]

	cp = compressed;
 801bfae:	68bb      	ldr	r3, [r7, #8]
 801bfb0:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 801bfb2:	6a3b      	ldr	r3, [r7, #32]
 801bfb4:	1c5a      	adds	r2, r3, #1
 801bfb6:	623a      	str	r2, [r7, #32]
 801bfb8:	781b      	ldrb	r3, [r3, #0]
 801bfba:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (!indirect) clen++;
 801bfbc:	69bb      	ldr	r3, [r7, #24]
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	d102      	bne.n	801bfc8 <parse_name+0x34>
 801bfc2:	69fb      	ldr	r3, [r7, #28]
 801bfc4:	3301      	adds	r3, #1
 801bfc6:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 801bfc8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801bfca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801bfce:	2bc0      	cmp	r3, #192	; 0xc0
 801bfd0:	d117      	bne.n	801c002 <parse_name+0x6e>
		{
			if (!indirect)
 801bfd2:	69bb      	ldr	r3, [r7, #24]
 801bfd4:	2b00      	cmp	r3, #0
 801bfd6:	d102      	bne.n	801bfde <parse_name+0x4a>
				clen++;
 801bfd8:	69fb      	ldr	r3, [r7, #28]
 801bfda:	3301      	adds	r3, #1
 801bfdc:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 801bfde:	2301      	movs	r3, #1
 801bfe0:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 801bfe2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801bfe4:	021b      	lsls	r3, r3, #8
 801bfe6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 801bfea:	6a3a      	ldr	r2, [r7, #32]
 801bfec:	7812      	ldrb	r2, [r2, #0]
 801bfee:	4413      	add	r3, r2
 801bff0:	461a      	mov	r2, r3
 801bff2:	68fb      	ldr	r3, [r7, #12]
 801bff4:	4413      	add	r3, r2
 801bff6:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 801bff8:	6a3b      	ldr	r3, [r7, #32]
 801bffa:	1c5a      	adds	r2, r3, #1
 801bffc:	623a      	str	r2, [r7, #32]
 801bffe:	781b      	ldrb	r3, [r3, #0]
 801c000:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		if (slen == 0)	/* zero length == all done */
 801c002:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c004:	2b00      	cmp	r3, #0
 801c006:	d02b      	beq.n	801c060 <parse_name+0xcc>
			break;

		len -= slen + 1;
 801c008:	887a      	ldrh	r2, [r7, #2]
 801c00a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c00c:	1ad3      	subs	r3, r2, r3
 801c00e:	b29b      	uxth	r3, r3
 801c010:	3b01      	subs	r3, #1
 801c012:	b29b      	uxth	r3, r3
 801c014:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 801c016:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c01a:	2b00      	cmp	r3, #0
 801c01c:	da02      	bge.n	801c024 <parse_name+0x90>
 801c01e:	f04f 33ff 	mov.w	r3, #4294967295
 801c022:	e038      	b.n	801c096 <parse_name+0x102>

		if (!indirect) clen += slen;
 801c024:	69bb      	ldr	r3, [r7, #24]
 801c026:	2b00      	cmp	r3, #0
 801c028:	d10c      	bne.n	801c044 <parse_name+0xb0>
 801c02a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c02c:	69fa      	ldr	r2, [r7, #28]
 801c02e:	4413      	add	r3, r2
 801c030:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 801c032:	e007      	b.n	801c044 <parse_name+0xb0>
 801c034:	6a3a      	ldr	r2, [r7, #32]
 801c036:	1c53      	adds	r3, r2, #1
 801c038:	623b      	str	r3, [r7, #32]
 801c03a:	687b      	ldr	r3, [r7, #4]
 801c03c:	1c59      	adds	r1, r3, #1
 801c03e:	6079      	str	r1, [r7, #4]
 801c040:	7812      	ldrb	r2, [r2, #0]
 801c042:	701a      	strb	r2, [r3, #0]
 801c044:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c046:	1e5a      	subs	r2, r3, #1
 801c048:	84fa      	strh	r2, [r7, #38]	; 0x26
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	d1f2      	bne.n	801c034 <parse_name+0xa0>
		*buf++ = '.';
 801c04e:	687b      	ldr	r3, [r7, #4]
 801c050:	1c5a      	adds	r2, r3, #1
 801c052:	607a      	str	r2, [r7, #4]
 801c054:	222e      	movs	r2, #46	; 0x2e
 801c056:	701a      	strb	r2, [r3, #0]
		nseg++;
 801c058:	697b      	ldr	r3, [r7, #20]
 801c05a:	3301      	adds	r3, #1
 801c05c:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 801c05e:	e7a8      	b.n	801bfb2 <parse_name+0x1e>
			break;
 801c060:	bf00      	nop
	}

	if (nseg == 0)
 801c062:	697b      	ldr	r3, [r7, #20]
 801c064:	2b00      	cmp	r3, #0
 801c066:	d10a      	bne.n	801c07e <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 801c068:	687b      	ldr	r3, [r7, #4]
 801c06a:	1c5a      	adds	r2, r3, #1
 801c06c:	607a      	str	r2, [r7, #4]
 801c06e:	222e      	movs	r2, #46	; 0x2e
 801c070:	701a      	strb	r2, [r3, #0]
		len--;
 801c072:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c076:	b29b      	uxth	r3, r3
 801c078:	3b01      	subs	r3, #1
 801c07a:	b29b      	uxth	r3, r3
 801c07c:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	1c5a      	adds	r2, r3, #1
 801c082:	607a      	str	r2, [r7, #4]
 801c084:	2200      	movs	r2, #0
 801c086:	701a      	strb	r2, [r3, #0]
	len--;
 801c088:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c08c:	b29b      	uxth	r3, r3
 801c08e:	3b01      	subs	r3, #1
 801c090:	b29b      	uxth	r3, r3
 801c092:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 801c094:	69fb      	ldr	r3, [r7, #28]
}
 801c096:	4618      	mov	r0, r3
 801c098:	372c      	adds	r7, #44	; 0x2c
 801c09a:	46bd      	mov	sp, r7
 801c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0a0:	4770      	bx	lr

0801c0a2 <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 801c0a2:	b580      	push	{r7, lr}
 801c0a4:	b0b4      	sub	sp, #208	; 0xd0
 801c0a6:	af00      	add	r7, sp, #0
 801c0a8:	6078      	str	r0, [r7, #4]
 801c0aa:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 801c0ac:	f107 020c 	add.w	r2, r7, #12
 801c0b0:	23c0      	movs	r3, #192	; 0xc0
 801c0b2:	6839      	ldr	r1, [r7, #0]
 801c0b4:	6878      	ldr	r0, [r7, #4]
 801c0b6:	f7ff ff6d 	bl	801bf94 <parse_name>
 801c0ba:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc


	if (len == -1) return 0;
 801c0be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c0c6:	d101      	bne.n	801c0cc <dns_question+0x2a>
 801c0c8:	2300      	movs	r3, #0
 801c0ca:	e00b      	b.n	801c0e4 <dns_question+0x42>

	cp += len;
 801c0cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c0d0:	683a      	ldr	r2, [r7, #0]
 801c0d2:	4413      	add	r3, r2
 801c0d4:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 801c0d6:	683b      	ldr	r3, [r7, #0]
 801c0d8:	3302      	adds	r3, #2
 801c0da:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 801c0dc:	683b      	ldr	r3, [r7, #0]
 801c0de:	3302      	adds	r3, #2
 801c0e0:	603b      	str	r3, [r7, #0]

	return cp;
 801c0e2:	683b      	ldr	r3, [r7, #0]
}
 801c0e4:	4618      	mov	r0, r3
 801c0e6:	37d0      	adds	r7, #208	; 0xd0
 801c0e8:	46bd      	mov	sp, r7
 801c0ea:	bd80      	pop	{r7, pc}

0801c0ec <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 801c0ec:	b580      	push	{r7, lr}
 801c0ee:	b0b6      	sub	sp, #216	; 0xd8
 801c0f0:	af00      	add	r7, sp, #0
 801c0f2:	60f8      	str	r0, [r7, #12]
 801c0f4:	60b9      	str	r1, [r7, #8]
 801c0f6:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 801c0f8:	f107 0210 	add.w	r2, r7, #16
 801c0fc:	23c0      	movs	r3, #192	; 0xc0
 801c0fe:	68b9      	ldr	r1, [r7, #8]
 801c100:	68f8      	ldr	r0, [r7, #12]
 801c102:	f7ff ff47 	bl	801bf94 <parse_name>
 801c106:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

	if (len == -1) return 0;
 801c10a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c112:	d101      	bne.n	801c118 <dns_answer+0x2c>
 801c114:	2300      	movs	r3, #0
 801c116:	e0f9      	b.n	801c30c <dns_answer+0x220>

	cp += len;
 801c118:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c11c:	68ba      	ldr	r2, [r7, #8]
 801c11e:	4413      	add	r3, r2
 801c120:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 801c122:	68b8      	ldr	r0, [r7, #8]
 801c124:	f7ff ff03 	bl	801bf2e <get16>
 801c128:	4603      	mov	r3, r0
 801c12a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	cp += 2;		/* type */
 801c12e:	68bb      	ldr	r3, [r7, #8]
 801c130:	3302      	adds	r3, #2
 801c132:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 801c134:	68bb      	ldr	r3, [r7, #8]
 801c136:	3302      	adds	r3, #2
 801c138:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 801c13a:	68bb      	ldr	r3, [r7, #8]
 801c13c:	3304      	adds	r3, #4
 801c13e:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 801c140:	68bb      	ldr	r3, [r7, #8]
 801c142:	3302      	adds	r3, #2
 801c144:	60bb      	str	r3, [r7, #8]


	switch (type)
 801c146:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c14a:	2b10      	cmp	r3, #16
 801c14c:	f000 80da 	beq.w	801c304 <dns_answer+0x218>
 801c150:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c154:	2b10      	cmp	r3, #16
 801c156:	f300 80d7 	bgt.w	801c308 <dns_answer+0x21c>
 801c15a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c15e:	2b0f      	cmp	r3, #15
 801c160:	d07d      	beq.n	801c25e <dns_answer+0x172>
 801c162:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c166:	2b0f      	cmp	r3, #15
 801c168:	f300 80ce 	bgt.w	801c308 <dns_answer+0x21c>
 801c16c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c170:	2b0c      	cmp	r3, #12
 801c172:	dc26      	bgt.n	801c1c2 <dns_answer+0xd6>
 801c174:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c178:	2b00      	cmp	r3, #0
 801c17a:	f340 80c5 	ble.w	801c308 <dns_answer+0x21c>
 801c17e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c182:	2201      	movs	r2, #1
 801c184:	fa02 f303 	lsl.w	r3, r2, r3
 801c188:	f241 32a4 	movw	r2, #5028	; 0x13a4
 801c18c:	401a      	ands	r2, r3
 801c18e:	2a00      	cmp	r2, #0
 801c190:	bf14      	ite	ne
 801c192:	2201      	movne	r2, #1
 801c194:	2200      	moveq	r2, #0
 801c196:	b2d2      	uxtb	r2, r2
 801c198:	2a00      	cmp	r2, #0
 801c19a:	d133      	bne.n	801c204 <dns_answer+0x118>
 801c19c:	f003 0240 	and.w	r2, r3, #64	; 0x40
 801c1a0:	2a00      	cmp	r2, #0
 801c1a2:	bf14      	ite	ne
 801c1a4:	2201      	movne	r2, #1
 801c1a6:	2200      	moveq	r2, #0
 801c1a8:	b2d2      	uxtb	r2, r2
 801c1aa:	2a00      	cmp	r2, #0
 801c1ac:	d170      	bne.n	801c290 <dns_answer+0x1a4>
 801c1ae:	f003 0302 	and.w	r3, r3, #2
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	bf14      	ite	ne
 801c1b6:	2301      	movne	r3, #1
 801c1b8:	2300      	moveq	r3, #0
 801c1ba:	b2db      	uxtb	r3, r3
 801c1bc:	2b00      	cmp	r3, #0
 801c1be:	d105      	bne.n	801c1cc <dns_answer+0xe0>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 801c1c0:	e0a2      	b.n	801c308 <dns_answer+0x21c>
	switch (type)
 801c1c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c1c6:	2b0d      	cmp	r3, #13
 801c1c8:	d032      	beq.n	801c230 <dns_answer+0x144>
		break;
 801c1ca:	e09d      	b.n	801c308 <dns_answer+0x21c>
		ip_from_dns[0] = *cp++;
 801c1cc:	68bb      	ldr	r3, [r7, #8]
 801c1ce:	1c5a      	adds	r2, r3, #1
 801c1d0:	60ba      	str	r2, [r7, #8]
 801c1d2:	781a      	ldrb	r2, [r3, #0]
 801c1d4:	687b      	ldr	r3, [r7, #4]
 801c1d6:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 801c1d8:	68bb      	ldr	r3, [r7, #8]
 801c1da:	1c5a      	adds	r2, r3, #1
 801c1dc:	60ba      	str	r2, [r7, #8]
 801c1de:	687a      	ldr	r2, [r7, #4]
 801c1e0:	3201      	adds	r2, #1
 801c1e2:	781b      	ldrb	r3, [r3, #0]
 801c1e4:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 801c1e6:	68bb      	ldr	r3, [r7, #8]
 801c1e8:	1c5a      	adds	r2, r3, #1
 801c1ea:	60ba      	str	r2, [r7, #8]
 801c1ec:	687a      	ldr	r2, [r7, #4]
 801c1ee:	3202      	adds	r2, #2
 801c1f0:	781b      	ldrb	r3, [r3, #0]
 801c1f2:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 801c1f4:	68bb      	ldr	r3, [r7, #8]
 801c1f6:	1c5a      	adds	r2, r3, #1
 801c1f8:	60ba      	str	r2, [r7, #8]
 801c1fa:	687a      	ldr	r2, [r7, #4]
 801c1fc:	3203      	adds	r2, #3
 801c1fe:	781b      	ldrb	r3, [r3, #0]
 801c200:	7013      	strb	r3, [r2, #0]
		break;
 801c202:	e082      	b.n	801c30a <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 801c204:	f107 0210 	add.w	r2, r7, #16
 801c208:	23c0      	movs	r3, #192	; 0xc0
 801c20a:	68b9      	ldr	r1, [r7, #8]
 801c20c:	68f8      	ldr	r0, [r7, #12]
 801c20e:	f7ff fec1 	bl	801bf94 <parse_name>
 801c212:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801c216:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c21a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c21e:	d101      	bne.n	801c224 <dns_answer+0x138>
 801c220:	2300      	movs	r3, #0
 801c222:	e073      	b.n	801c30c <dns_answer+0x220>
		cp += len;
 801c224:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c228:	68ba      	ldr	r2, [r7, #8]
 801c22a:	4413      	add	r3, r2
 801c22c:	60bb      	str	r3, [r7, #8]
		break;
 801c22e:	e06c      	b.n	801c30a <dns_answer+0x21e>
		len = *cp++;
 801c230:	68bb      	ldr	r3, [r7, #8]
 801c232:	1c5a      	adds	r2, r3, #1
 801c234:	60ba      	str	r2, [r7, #8]
 801c236:	781b      	ldrb	r3, [r3, #0]
 801c238:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 801c23c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c240:	68ba      	ldr	r2, [r7, #8]
 801c242:	4413      	add	r3, r2
 801c244:	60bb      	str	r3, [r7, #8]
		len = *cp++;
 801c246:	68bb      	ldr	r3, [r7, #8]
 801c248:	1c5a      	adds	r2, r3, #1
 801c24a:	60ba      	str	r2, [r7, #8]
 801c24c:	781b      	ldrb	r3, [r3, #0]
 801c24e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 801c252:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c256:	68ba      	ldr	r2, [r7, #8]
 801c258:	4413      	add	r3, r2
 801c25a:	60bb      	str	r3, [r7, #8]
		break;
 801c25c:	e055      	b.n	801c30a <dns_answer+0x21e>
		cp += 2;
 801c25e:	68bb      	ldr	r3, [r7, #8]
 801c260:	3302      	adds	r3, #2
 801c262:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 801c264:	f107 0210 	add.w	r2, r7, #16
 801c268:	23c0      	movs	r3, #192	; 0xc0
 801c26a:	68b9      	ldr	r1, [r7, #8]
 801c26c:	68f8      	ldr	r0, [r7, #12]
 801c26e:	f7ff fe91 	bl	801bf94 <parse_name>
 801c272:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801c276:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c27a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c27e:	d101      	bne.n	801c284 <dns_answer+0x198>
 801c280:	2300      	movs	r3, #0
 801c282:	e043      	b.n	801c30c <dns_answer+0x220>
		cp += len;
 801c284:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c288:	68ba      	ldr	r2, [r7, #8]
 801c28a:	4413      	add	r3, r2
 801c28c:	60bb      	str	r3, [r7, #8]
		break;
 801c28e:	e03c      	b.n	801c30a <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 801c290:	f107 0210 	add.w	r2, r7, #16
 801c294:	23c0      	movs	r3, #192	; 0xc0
 801c296:	68b9      	ldr	r1, [r7, #8]
 801c298:	68f8      	ldr	r0, [r7, #12]
 801c29a:	f7ff fe7b 	bl	801bf94 <parse_name>
 801c29e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801c2a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c2a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c2aa:	d101      	bne.n	801c2b0 <dns_answer+0x1c4>
 801c2ac:	2300      	movs	r3, #0
 801c2ae:	e02d      	b.n	801c30c <dns_answer+0x220>
		cp += len;
 801c2b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c2b4:	68ba      	ldr	r2, [r7, #8]
 801c2b6:	4413      	add	r3, r2
 801c2b8:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 801c2ba:	f107 0210 	add.w	r2, r7, #16
 801c2be:	23c0      	movs	r3, #192	; 0xc0
 801c2c0:	68b9      	ldr	r1, [r7, #8]
 801c2c2:	68f8      	ldr	r0, [r7, #12]
 801c2c4:	f7ff fe66 	bl	801bf94 <parse_name>
 801c2c8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801c2cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c2d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c2d4:	d101      	bne.n	801c2da <dns_answer+0x1ee>
 801c2d6:	2300      	movs	r3, #0
 801c2d8:	e018      	b.n	801c30c <dns_answer+0x220>
		cp += len;
 801c2da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c2de:	68ba      	ldr	r2, [r7, #8]
 801c2e0:	4413      	add	r3, r2
 801c2e2:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c2e4:	68bb      	ldr	r3, [r7, #8]
 801c2e6:	3304      	adds	r3, #4
 801c2e8:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c2ea:	68bb      	ldr	r3, [r7, #8]
 801c2ec:	3304      	adds	r3, #4
 801c2ee:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c2f0:	68bb      	ldr	r3, [r7, #8]
 801c2f2:	3304      	adds	r3, #4
 801c2f4:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c2f6:	68bb      	ldr	r3, [r7, #8]
 801c2f8:	3304      	adds	r3, #4
 801c2fa:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c2fc:	68bb      	ldr	r3, [r7, #8]
 801c2fe:	3304      	adds	r3, #4
 801c300:	60bb      	str	r3, [r7, #8]
		break;
 801c302:	e002      	b.n	801c30a <dns_answer+0x21e>
		break;
 801c304:	bf00      	nop
 801c306:	e000      	b.n	801c30a <dns_answer+0x21e>
		break;
 801c308:	bf00      	nop
	}

	return cp;
 801c30a:	68bb      	ldr	r3, [r7, #8]
}
 801c30c:	4618      	mov	r0, r3
 801c30e:	37d8      	adds	r7, #216	; 0xd8
 801c310:	46bd      	mov	sp, r7
 801c312:	bd80      	pop	{r7, pc}

0801c314 <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 801c314:	b580      	push	{r7, lr}
 801c316:	b088      	sub	sp, #32
 801c318:	af00      	add	r7, sp, #0
 801c31a:	60f8      	str	r0, [r7, #12]
 801c31c:	60b9      	str	r1, [r7, #8]
 801c31e:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 801c320:	68bb      	ldr	r3, [r7, #8]
 801c322:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 801c324:	2212      	movs	r2, #18
 801c326:	2100      	movs	r1, #0
 801c328:	68f8      	ldr	r0, [r7, #12]
 801c32a:	f011 f9cf 	bl	802d6cc <memset>

	pdhdr->id = get16(&msg[0]);
 801c32e:	6978      	ldr	r0, [r7, #20]
 801c330:	f7ff fdfd 	bl	801bf2e <get16>
 801c334:	4603      	mov	r3, r0
 801c336:	461a      	mov	r2, r3
 801c338:	68fb      	ldr	r3, [r7, #12]
 801c33a:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 801c33c:	697b      	ldr	r3, [r7, #20]
 801c33e:	3302      	adds	r3, #2
 801c340:	4618      	mov	r0, r3
 801c342:	f7ff fdf4 	bl	801bf2e <get16>
 801c346:	4603      	mov	r3, r0
 801c348:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 801c34a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c34e:	2b00      	cmp	r3, #0
 801c350:	da02      	bge.n	801c358 <parseDNSMSG+0x44>
 801c352:	68fb      	ldr	r3, [r7, #12]
 801c354:	2201      	movs	r2, #1
 801c356:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 801c358:	8a7b      	ldrh	r3, [r7, #18]
 801c35a:	0adb      	lsrs	r3, r3, #11
 801c35c:	b29b      	uxth	r3, r3
 801c35e:	b2db      	uxtb	r3, r3
 801c360:	f003 030f 	and.w	r3, r3, #15
 801c364:	b2da      	uxtb	r2, r3
 801c366:	68fb      	ldr	r3, [r7, #12]
 801c368:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 801c36a:	8a7b      	ldrh	r3, [r7, #18]
 801c36c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c370:	2b00      	cmp	r3, #0
 801c372:	d002      	beq.n	801c37a <parseDNSMSG+0x66>
 801c374:	68fb      	ldr	r3, [r7, #12]
 801c376:	2201      	movs	r2, #1
 801c378:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 801c37a:	8a7b      	ldrh	r3, [r7, #18]
 801c37c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c380:	2b00      	cmp	r3, #0
 801c382:	d002      	beq.n	801c38a <parseDNSMSG+0x76>
 801c384:	68fb      	ldr	r3, [r7, #12]
 801c386:	2201      	movs	r2, #1
 801c388:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 801c38a:	8a7b      	ldrh	r3, [r7, #18]
 801c38c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c390:	2b00      	cmp	r3, #0
 801c392:	d002      	beq.n	801c39a <parseDNSMSG+0x86>
 801c394:	68fb      	ldr	r3, [r7, #12]
 801c396:	2201      	movs	r2, #1
 801c398:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 801c39a:	8a7b      	ldrh	r3, [r7, #18]
 801c39c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c3a0:	2b00      	cmp	r3, #0
 801c3a2:	d002      	beq.n	801c3aa <parseDNSMSG+0x96>
 801c3a4:	68fb      	ldr	r3, [r7, #12]
 801c3a6:	2201      	movs	r2, #1
 801c3a8:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 801c3aa:	8a7b      	ldrh	r3, [r7, #18]
 801c3ac:	b2db      	uxtb	r3, r3
 801c3ae:	f003 030f 	and.w	r3, r3, #15
 801c3b2:	b2da      	uxtb	r2, r3
 801c3b4:	68fb      	ldr	r3, [r7, #12]
 801c3b6:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 801c3b8:	697b      	ldr	r3, [r7, #20]
 801c3ba:	3304      	adds	r3, #4
 801c3bc:	4618      	mov	r0, r3
 801c3be:	f7ff fdb6 	bl	801bf2e <get16>
 801c3c2:	4603      	mov	r3, r0
 801c3c4:	461a      	mov	r2, r3
 801c3c6:	68fb      	ldr	r3, [r7, #12]
 801c3c8:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 801c3ca:	697b      	ldr	r3, [r7, #20]
 801c3cc:	3306      	adds	r3, #6
 801c3ce:	4618      	mov	r0, r3
 801c3d0:	f7ff fdad 	bl	801bf2e <get16>
 801c3d4:	4603      	mov	r3, r0
 801c3d6:	461a      	mov	r2, r3
 801c3d8:	68fb      	ldr	r3, [r7, #12]
 801c3da:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 801c3dc:	697b      	ldr	r3, [r7, #20]
 801c3de:	3308      	adds	r3, #8
 801c3e0:	4618      	mov	r0, r3
 801c3e2:	f7ff fda4 	bl	801bf2e <get16>
 801c3e6:	4603      	mov	r3, r0
 801c3e8:	461a      	mov	r2, r3
 801c3ea:	68fb      	ldr	r3, [r7, #12]
 801c3ec:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 801c3ee:	697b      	ldr	r3, [r7, #20]
 801c3f0:	330a      	adds	r3, #10
 801c3f2:	4618      	mov	r0, r3
 801c3f4:	f7ff fd9b 	bl	801bf2e <get16>
 801c3f8:	4603      	mov	r3, r0
 801c3fa:	461a      	mov	r2, r3
 801c3fc:	68fb      	ldr	r3, [r7, #12]
 801c3fe:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 801c400:	697b      	ldr	r3, [r7, #20]
 801c402:	330c      	adds	r3, #12
 801c404:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 801c406:	2300      	movs	r3, #0
 801c408:	83fb      	strh	r3, [r7, #30]
 801c40a:	e00d      	b.n	801c428 <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 801c40c:	69b9      	ldr	r1, [r7, #24]
 801c40e:	6978      	ldr	r0, [r7, #20]
 801c410:	f7ff fe47 	bl	801c0a2 <dns_question>
 801c414:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 801c416:	69bb      	ldr	r3, [r7, #24]
 801c418:	2b00      	cmp	r3, #0
 801c41a:	d102      	bne.n	801c422 <parseDNSMSG+0x10e>
 801c41c:	f04f 33ff 	mov.w	r3, #4294967295
 801c420:	e03b      	b.n	801c49a <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 801c422:	8bfb      	ldrh	r3, [r7, #30]
 801c424:	3301      	adds	r3, #1
 801c426:	83fb      	strh	r3, [r7, #30]
 801c428:	68fb      	ldr	r3, [r7, #12]
 801c42a:	895b      	ldrh	r3, [r3, #10]
 801c42c:	8bfa      	ldrh	r2, [r7, #30]
 801c42e:	429a      	cmp	r2, r3
 801c430:	d3ec      	bcc.n	801c40c <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 801c432:	2300      	movs	r3, #0
 801c434:	83fb      	strh	r3, [r7, #30]
 801c436:	e00e      	b.n	801c456 <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 801c438:	687a      	ldr	r2, [r7, #4]
 801c43a:	69b9      	ldr	r1, [r7, #24]
 801c43c:	6978      	ldr	r0, [r7, #20]
 801c43e:	f7ff fe55 	bl	801c0ec <dns_answer>
 801c442:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 801c444:	69bb      	ldr	r3, [r7, #24]
 801c446:	2b00      	cmp	r3, #0
 801c448:	d102      	bne.n	801c450 <parseDNSMSG+0x13c>
 801c44a:	f04f 33ff 	mov.w	r3, #4294967295
 801c44e:	e024      	b.n	801c49a <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 801c450:	8bfb      	ldrh	r3, [r7, #30]
 801c452:	3301      	adds	r3, #1
 801c454:	83fb      	strh	r3, [r7, #30]
 801c456:	68fb      	ldr	r3, [r7, #12]
 801c458:	899b      	ldrh	r3, [r3, #12]
 801c45a:	8bfa      	ldrh	r2, [r7, #30]
 801c45c:	429a      	cmp	r2, r3
 801c45e:	d3eb      	bcc.n	801c438 <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 801c460:	2300      	movs	r3, #0
 801c462:	83fb      	strh	r3, [r7, #30]
 801c464:	e002      	b.n	801c46c <parseDNSMSG+0x158>
 801c466:	8bfb      	ldrh	r3, [r7, #30]
 801c468:	3301      	adds	r3, #1
 801c46a:	83fb      	strh	r3, [r7, #30]
 801c46c:	68fb      	ldr	r3, [r7, #12]
 801c46e:	89db      	ldrh	r3, [r3, #14]
 801c470:	8bfa      	ldrh	r2, [r7, #30]
 801c472:	429a      	cmp	r2, r3
 801c474:	d3f7      	bcc.n	801c466 <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 801c476:	2300      	movs	r3, #0
 801c478:	83fb      	strh	r3, [r7, #30]
 801c47a:	e002      	b.n	801c482 <parseDNSMSG+0x16e>
 801c47c:	8bfb      	ldrh	r3, [r7, #30]
 801c47e:	3301      	adds	r3, #1
 801c480:	83fb      	strh	r3, [r7, #30]
 801c482:	68fb      	ldr	r3, [r7, #12]
 801c484:	8a1b      	ldrh	r3, [r3, #16]
 801c486:	8bfa      	ldrh	r2, [r7, #30]
 801c488:	429a      	cmp	r2, r3
 801c48a:	d3f7      	bcc.n	801c47c <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 801c48c:	68fb      	ldr	r3, [r7, #12]
 801c48e:	7a1b      	ldrb	r3, [r3, #8]
 801c490:	2b00      	cmp	r3, #0
 801c492:	d101      	bne.n	801c498 <parseDNSMSG+0x184>
 801c494:	2301      	movs	r3, #1
 801c496:	e000      	b.n	801c49a <parseDNSMSG+0x186>
	else return 0;
 801c498:	2300      	movs	r3, #0
}
 801c49a:	4618      	mov	r0, r3
 801c49c:	3720      	adds	r7, #32
 801c49e:	46bd      	mov	sp, r7
 801c4a0:	bd80      	pop	{r7, pc}
	...

0801c4a4 <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 801c4a4:	b580      	push	{r7, lr}
 801c4a6:	b0b8      	sub	sp, #224	; 0xe0
 801c4a8:	af00      	add	r7, sp, #0
 801c4aa:	60b9      	str	r1, [r7, #8]
 801c4ac:	607a      	str	r2, [r7, #4]
 801c4ae:	461a      	mov	r2, r3
 801c4b0:	4603      	mov	r3, r0
 801c4b2:	81fb      	strh	r3, [r7, #14]
 801c4b4:	4613      	mov	r3, r2
 801c4b6:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 801c4b8:	687b      	ldr	r3, [r7, #4]
 801c4ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	DNS_MSGID++;
 801c4be:	4b57      	ldr	r3, [pc, #348]	; (801c61c <dns_makequery+0x178>)
 801c4c0:	881b      	ldrh	r3, [r3, #0]
 801c4c2:	3301      	adds	r3, #1
 801c4c4:	b29a      	uxth	r2, r3
 801c4c6:	4b55      	ldr	r3, [pc, #340]	; (801c61c <dns_makequery+0x178>)
 801c4c8:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 801c4ca:	4b54      	ldr	r3, [pc, #336]	; (801c61c <dns_makequery+0x178>)
 801c4cc:	881b      	ldrh	r3, [r3, #0]
 801c4ce:	4619      	mov	r1, r3
 801c4d0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c4d4:	f7ff fd43 	bl	801bf5e <put16>
 801c4d8:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 801c4dc:	89fb      	ldrh	r3, [r7, #14]
 801c4de:	02db      	lsls	r3, r3, #11
 801c4e0:	b21b      	sxth	r3, r3
 801c4e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c4e6:	b21b      	sxth	r3, r3
 801c4e8:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	cp = put16(cp, p);
 801c4ec:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 801c4f0:	4619      	mov	r1, r3
 801c4f2:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c4f6:	f7ff fd32 	bl	801bf5e <put16>
 801c4fa:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 1);
 801c4fe:	2101      	movs	r1, #1
 801c500:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c504:	f7ff fd2b 	bl	801bf5e <put16>
 801c508:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 801c50c:	2100      	movs	r1, #0
 801c50e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c512:	f7ff fd24 	bl	801bf5e <put16>
 801c516:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 801c51a:	2100      	movs	r1, #0
 801c51c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c520:	f7ff fd1d 	bl	801bf5e <put16>
 801c524:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 801c528:	2100      	movs	r1, #0
 801c52a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c52e:	f7ff fd16 	bl	801bf5e <put16>
 801c532:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	strcpy(sname, name);
 801c536:	f107 0310 	add.w	r3, r7, #16
 801c53a:	68b9      	ldr	r1, [r7, #8]
 801c53c:	4618      	mov	r0, r3
 801c53e:	f011 fa92 	bl	802da66 <strcpy>
	dname = sname;
 801c542:	f107 0310 	add.w	r3, r7, #16
 801c546:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	dlen = strlen(dname);
 801c54a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 801c54e:	f7f3 fea7 	bl	80102a0 <strlen>
 801c552:	4603      	mov	r3, r0
 801c554:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 801c558:	212e      	movs	r1, #46	; 0x2e
 801c55a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 801c55e:	f011 f8cc 	bl	802d6fa <strchr>
 801c562:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 801c566:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c56a:	2b00      	cmp	r3, #0
 801c56c:	d006      	beq.n	801c57c <dns_makequery+0xd8>
 801c56e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801c572:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801c576:	1ad3      	subs	r3, r2, r3
 801c578:	81bb      	strh	r3, [r7, #12]
 801c57a:	e002      	b.n	801c582 <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 801c57c:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 801c580:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 801c582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c586:	1c5a      	adds	r2, r3, #1
 801c588:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801c58c:	89ba      	ldrh	r2, [r7, #12]
 801c58e:	b2d2      	uxtb	r2, r2
 801c590:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 801c592:	89bb      	ldrh	r3, [r7, #12]
 801c594:	2b00      	cmp	r3, #0
 801c596:	d029      	beq.n	801c5ec <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 801c598:	89bb      	ldrh	r3, [r7, #12]
 801c59a:	461a      	mov	r2, r3
 801c59c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801c5a0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c5a4:	f011 f8ec 	bl	802d780 <strncpy>
		cp += len;
 801c5a8:	89bb      	ldrh	r3, [r7, #12]
 801c5aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801c5ae:	4413      	add	r3, r2
 801c5b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		if (cp1 == NULL)
 801c5b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c5b8:	2b00      	cmp	r3, #0
 801c5ba:	d107      	bne.n	801c5cc <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 801c5bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c5c0:	1c5a      	adds	r2, r3, #1
 801c5c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801c5c6:	2200      	movs	r2, #0
 801c5c8:	701a      	strb	r2, [r3, #0]
			break;
 801c5ca:	e010      	b.n	801c5ee <dns_makequery+0x14a>
		}
		dname += len+1;
 801c5cc:	89bb      	ldrh	r3, [r7, #12]
 801c5ce:	3301      	adds	r3, #1
 801c5d0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801c5d4:	4413      	add	r3, r2
 801c5d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		dlen -= len+1;
 801c5da:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 801c5de:	89bb      	ldrh	r3, [r7, #12]
 801c5e0:	1ad3      	subs	r3, r2, r3
 801c5e2:	b29b      	uxth	r3, r3
 801c5e4:	3b01      	subs	r3, #1
 801c5e6:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		cp1 = strchr(dname, '.');
 801c5ea:	e7b5      	b.n	801c558 <dns_makequery+0xb4>
		if (len == 0) break;
 801c5ec:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 801c5ee:	2101      	movs	r1, #1
 801c5f0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c5f4:	f7ff fcb3 	bl	801bf5e <put16>
 801c5f8:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0x0001);				/* class */
 801c5fc:	2101      	movs	r1, #1
 801c5fe:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c602:	f7ff fcac 	bl	801bf5e <put16>
 801c606:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 801c60a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801c60e:	687b      	ldr	r3, [r7, #4]
 801c610:	1ad3      	subs	r3, r2, r3
 801c612:	b21b      	sxth	r3, r3
}
 801c614:	4618      	mov	r0, r3
 801c616:	37e0      	adds	r7, #224	; 0xe0
 801c618:	46bd      	mov	sp, r7
 801c61a:	bd80      	pop	{r7, pc}
 801c61c:	200009be 	.word	0x200009be

0801c620 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 801c620:	b480      	push	{r7}
 801c622:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 801c624:	4b0f      	ldr	r3, [pc, #60]	; (801c664 <check_DNS_timeout+0x44>)
 801c626:	681b      	ldr	r3, [r3, #0]
 801c628:	2b02      	cmp	r3, #2
 801c62a:	d914      	bls.n	801c656 <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 801c62c:	4b0d      	ldr	r3, [pc, #52]	; (801c664 <check_DNS_timeout+0x44>)
 801c62e:	2200      	movs	r2, #0
 801c630:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 801c632:	4b0d      	ldr	r3, [pc, #52]	; (801c668 <check_DNS_timeout+0x48>)
 801c634:	781b      	ldrb	r3, [r3, #0]
 801c636:	2b01      	cmp	r3, #1
 801c638:	d905      	bls.n	801c646 <check_DNS_timeout+0x26>
			retry_count = 0;
 801c63a:	4b0b      	ldr	r3, [pc, #44]	; (801c668 <check_DNS_timeout+0x48>)
 801c63c:	2200      	movs	r2, #0
 801c63e:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 801c640:	f04f 33ff 	mov.w	r3, #4294967295
 801c644:	e008      	b.n	801c658 <check_DNS_timeout+0x38>
		}
		retry_count++;
 801c646:	4b08      	ldr	r3, [pc, #32]	; (801c668 <check_DNS_timeout+0x48>)
 801c648:	781b      	ldrb	r3, [r3, #0]
 801c64a:	3301      	adds	r3, #1
 801c64c:	b2da      	uxtb	r2, r3
 801c64e:	4b06      	ldr	r3, [pc, #24]	; (801c668 <check_DNS_timeout+0x48>)
 801c650:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 801c652:	2300      	movs	r3, #0
 801c654:	e000      	b.n	801c658 <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 801c656:	2301      	movs	r3, #1
}
 801c658:	4618      	mov	r0, r3
 801c65a:	46bd      	mov	sp, r7
 801c65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c660:	4770      	bx	lr
 801c662:	bf00      	nop
 801c664:	200009c0 	.word	0x200009c0
 801c668:	200009c4 	.word	0x200009c4

0801c66c <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 801c66c:	b480      	push	{r7}
 801c66e:	b083      	sub	sp, #12
 801c670:	af00      	add	r7, sp, #0
 801c672:	4603      	mov	r3, r0
 801c674:	6039      	str	r1, [r7, #0]
 801c676:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 801c678:	4a07      	ldr	r2, [pc, #28]	; (801c698 <DNS_init+0x2c>)
 801c67a:	79fb      	ldrb	r3, [r7, #7]
 801c67c:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 801c67e:	4a07      	ldr	r2, [pc, #28]	; (801c69c <DNS_init+0x30>)
 801c680:	683b      	ldr	r3, [r7, #0]
 801c682:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 801c684:	4b06      	ldr	r3, [pc, #24]	; (801c6a0 <DNS_init+0x34>)
 801c686:	f241 1222 	movw	r2, #4386	; 0x1122
 801c68a:	801a      	strh	r2, [r3, #0]
}
 801c68c:	bf00      	nop
 801c68e:	370c      	adds	r7, #12
 801c690:	46bd      	mov	sp, r7
 801c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c696:	4770      	bx	lr
 801c698:	200009bc 	.word	0x200009bc
 801c69c:	200009b8 	.word	0x200009b8
 801c6a0:	200009be 	.word	0x200009be

0801c6a4 <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, const uint8_t * name, uint8_t * ip_from_dns)
{
 801c6a4:	b590      	push	{r4, r7, lr}
 801c6a6:	b08f      	sub	sp, #60	; 0x3c
 801c6a8:	af02      	add	r7, sp, #8
 801c6aa:	60f8      	str	r0, [r7, #12]
 801c6ac:	60b9      	str	r1, [r7, #8]
 801c6ae:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 801c6b0:	4b3b      	ldr	r3, [pc, #236]	; (801c7a0 <DNS_run+0xfc>)
 801c6b2:	2200      	movs	r2, #0
 801c6b4:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 801c6b6:	4b3b      	ldr	r3, [pc, #236]	; (801c7a4 <DNS_run+0x100>)
 801c6b8:	2200      	movs	r2, #0
 801c6ba:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 801c6bc:	4b3a      	ldr	r3, [pc, #232]	; (801c7a8 <DNS_run+0x104>)
 801c6be:	7818      	ldrb	r0, [r3, #0]
 801c6c0:	2300      	movs	r3, #0
 801c6c2:	2200      	movs	r2, #0
 801c6c4:	2102      	movs	r1, #2
 801c6c6:	f7fc fa2f 	bl	8018b28 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 801c6ca:	4b38      	ldr	r3, [pc, #224]	; (801c7ac <DNS_run+0x108>)
 801c6cc:	681a      	ldr	r2, [r3, #0]
 801c6ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c6d2:	68b9      	ldr	r1, [r7, #8]
 801c6d4:	2000      	movs	r0, #0
 801c6d6:	f7ff fee5 	bl	801c4a4 <dns_makequery>
 801c6da:	4603      	mov	r3, r0
 801c6dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 801c6de:	4b32      	ldr	r3, [pc, #200]	; (801c7a8 <DNS_run+0x104>)
 801c6e0:	7818      	ldrb	r0, [r3, #0]
 801c6e2:	4b32      	ldr	r3, [pc, #200]	; (801c7ac <DNS_run+0x108>)
 801c6e4:	6819      	ldr	r1, [r3, #0]
 801c6e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c6e8:	2335      	movs	r3, #53	; 0x35
 801c6ea:	9300      	str	r3, [sp, #0]
 801c6ec:	68fb      	ldr	r3, [r7, #12]
 801c6ee:	f7fc fef9 	bl	80194e4 <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 801c6f2:	4b2d      	ldr	r3, [pc, #180]	; (801c7a8 <DNS_run+0x104>)
 801c6f4:	781b      	ldrb	r3, [r3, #0]
 801c6f6:	4618      	mov	r0, r3
 801c6f8:	f7fc f8cb 	bl	8018892 <getSn_RX_RSR>
 801c6fc:	4603      	mov	r3, r0
 801c6fe:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c700:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c702:	2b00      	cmp	r3, #0
 801c704:	d029      	beq.n	801c75a <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 801c706:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c70c:	d902      	bls.n	801c714 <DNS_run+0x70>
 801c70e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c712:	85fb      	strh	r3, [r7, #46]	; 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 801c714:	4b24      	ldr	r3, [pc, #144]	; (801c7a8 <DNS_run+0x104>)
 801c716:	7818      	ldrb	r0, [r3, #0]
 801c718:	4b24      	ldr	r3, [pc, #144]	; (801c7ac <DNS_run+0x108>)
 801c71a:	6819      	ldr	r1, [r3, #0]
 801c71c:	f107 0414 	add.w	r4, r7, #20
 801c720:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c722:	f107 0312 	add.w	r3, r7, #18
 801c726:	9300      	str	r3, [sp, #0]
 801c728:	4623      	mov	r3, r4
 801c72a:	f7fd f811 	bl	8019750 <recvfrom>
 801c72e:	4603      	mov	r3, r0
 801c730:	85fb      	strh	r3, [r7, #46]	; 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 801c732:	4b1e      	ldr	r3, [pc, #120]	; (801c7ac <DNS_run+0x108>)
 801c734:	6819      	ldr	r1, [r3, #0]
 801c736:	f107 0318 	add.w	r3, r7, #24
 801c73a:	687a      	ldr	r2, [r7, #4]
 801c73c:	4618      	mov	r0, r3
 801c73e:	f7ff fde9 	bl	801c314 <parseDNSMSG>
 801c742:	4603      	mov	r3, r0
 801c744:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			break;
 801c748:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 801c74a:	4b17      	ldr	r3, [pc, #92]	; (801c7a8 <DNS_run+0x104>)
 801c74c:	781b      	ldrb	r3, [r3, #0]
 801c74e:	4618      	mov	r0, r3
 801c750:	f7fc fafe 	bl	8018d50 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 801c754:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 801c758:	e01e      	b.n	801c798 <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 801c75a:	f7ff ff61 	bl	801c620 <check_DNS_timeout>
 801c75e:	4603      	mov	r3, r0
 801c760:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (ret_check_timeout < 0) {
 801c764:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 801c768:	2b00      	cmp	r3, #0
 801c76a:	da06      	bge.n	801c77a <DNS_run+0xd6>
			close(DNS_SOCKET);
 801c76c:	4b0e      	ldr	r3, [pc, #56]	; (801c7a8 <DNS_run+0x104>)
 801c76e:	781b      	ldrb	r3, [r3, #0]
 801c770:	4618      	mov	r0, r3
 801c772:	f7fc faed 	bl	8018d50 <close>
			return 0; // timeout occurred
 801c776:	2300      	movs	r3, #0
 801c778:	e00e      	b.n	801c798 <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 801c77a:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 801c77e:	2b00      	cmp	r3, #0
 801c780:	d1b7      	bne.n	801c6f2 <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 801c782:	4b09      	ldr	r3, [pc, #36]	; (801c7a8 <DNS_run+0x104>)
 801c784:	7818      	ldrb	r0, [r3, #0]
 801c786:	4b09      	ldr	r3, [pc, #36]	; (801c7ac <DNS_run+0x108>)
 801c788:	6819      	ldr	r1, [r3, #0]
 801c78a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c78c:	2335      	movs	r3, #53	; 0x35
 801c78e:	9300      	str	r3, [sp, #0]
 801c790:	68fb      	ldr	r3, [r7, #12]
 801c792:	f7fc fea7 	bl	80194e4 <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 801c796:	e7ac      	b.n	801c6f2 <DNS_run+0x4e>
}
 801c798:	4618      	mov	r0, r3
 801c79a:	3734      	adds	r7, #52	; 0x34
 801c79c:	46bd      	mov	sp, r7
 801c79e:	bd90      	pop	{r4, r7, pc}
 801c7a0:	200009c4 	.word	0x200009c4
 801c7a4:	200009c0 	.word	0x200009c0
 801c7a8:	200009bc 	.word	0x200009bc
 801c7ac:	200009b8 	.word	0x200009b8

0801c7b0 <DNS_time_handler>:


/* DNS TIMER HANDLER */
void DNS_time_handler(void)
{
 801c7b0:	b480      	push	{r7}
 801c7b2:	af00      	add	r7, sp, #0
	dns_1s_tick++;
 801c7b4:	4b04      	ldr	r3, [pc, #16]	; (801c7c8 <DNS_time_handler+0x18>)
 801c7b6:	681b      	ldr	r3, [r3, #0]
 801c7b8:	3301      	adds	r3, #1
 801c7ba:	4a03      	ldr	r2, [pc, #12]	; (801c7c8 <DNS_time_handler+0x18>)
 801c7bc:	6013      	str	r3, [r2, #0]
}
 801c7be:	bf00      	nop
 801c7c0:	46bd      	mov	sp, r7
 801c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7c6:	4770      	bx	lr
 801c7c8:	200009c0 	.word	0x200009c0

0801c7cc <Prototype>:
#include "definition.h"
#include "dns.h"
#include "string.h"


void Prototype(void){};
 801c7cc:	b480      	push	{r7}
 801c7ce:	af00      	add	r7, sp, #0
 801c7d0:	bf00      	nop
 801c7d2:	46bd      	mov	sp, r7
 801c7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7d8:	4770      	bx	lr
	...

0801c7dc <dns_service_reg_cb_mutex>:

uint8_t  dns_server_ip[4];

//NetworkReady = *Prototype;

void dns_service_reg_cb_mutex(void (*get_mutex)(void), void (*release_mutex)(void)){
 801c7dc:	b480      	push	{r7}
 801c7de:	b083      	sub	sp, #12
 801c7e0:	af00      	add	r7, sp, #0
 801c7e2:	6078      	str	r0, [r7, #4]
 801c7e4:	6039      	str	r1, [r7, #0]

	if (get_mutex) DNSMutexGet = get_mutex;
 801c7e6:	687b      	ldr	r3, [r7, #4]
 801c7e8:	2b00      	cmp	r3, #0
 801c7ea:	d002      	beq.n	801c7f2 <dns_service_reg_cb_mutex+0x16>
 801c7ec:	4a07      	ldr	r2, [pc, #28]	; (801c80c <dns_service_reg_cb_mutex+0x30>)
 801c7ee:	687b      	ldr	r3, [r7, #4]
 801c7f0:	6013      	str	r3, [r2, #0]
	if (release_mutex) DNSMutexRelease = release_mutex;
 801c7f2:	683b      	ldr	r3, [r7, #0]
 801c7f4:	2b00      	cmp	r3, #0
 801c7f6:	d002      	beq.n	801c7fe <dns_service_reg_cb_mutex+0x22>
 801c7f8:	4a05      	ldr	r2, [pc, #20]	; (801c810 <dns_service_reg_cb_mutex+0x34>)
 801c7fa:	683b      	ldr	r3, [r7, #0]
 801c7fc:	6013      	str	r3, [r2, #0]

}
 801c7fe:	bf00      	nop
 801c800:	370c      	adds	r7, #12
 801c802:	46bd      	mov	sp, r7
 801c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c808:	4770      	bx	lr
 801c80a:	bf00      	nop
 801c80c:	20000114 	.word	0x20000114
 801c810:	20000118 	.word	0x20000118

0801c814 <dns_service_reg_cb_net_ready>:

void dns_service_reg_cb_net_ready(void (*func)){
 801c814:	b480      	push	{r7}
 801c816:	b083      	sub	sp, #12
 801c818:	af00      	add	r7, sp, #0
 801c81a:	6078      	str	r0, [r7, #4]

	if ( func ) NetworkReady = func;
 801c81c:	687b      	ldr	r3, [r7, #4]
 801c81e:	2b00      	cmp	r3, #0
 801c820:	d002      	beq.n	801c828 <dns_service_reg_cb_net_ready+0x14>
 801c822:	687b      	ldr	r3, [r7, #4]
 801c824:	4a03      	ldr	r2, [pc, #12]	; (801c834 <dns_service_reg_cb_net_ready+0x20>)
 801c826:	6013      	str	r3, [r2, #0]

}
 801c828:	bf00      	nop
 801c82a:	370c      	adds	r7, #12
 801c82c:	46bd      	mov	sp, r7
 801c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c832:	4770      	bx	lr
 801c834:	2000011c 	.word	0x2000011c

0801c838 <dns_service_init>:

int dns_service_init(uint8_t socket, uint8_t * buf, uint16_t buf_len){
 801c838:	b580      	push	{r7, lr}
 801c83a:	b082      	sub	sp, #8
 801c83c:	af00      	add	r7, sp, #0
 801c83e:	4603      	mov	r3, r0
 801c840:	6039      	str	r1, [r7, #0]
 801c842:	71fb      	strb	r3, [r7, #7]
 801c844:	4613      	mov	r3, r2
 801c846:	80bb      	strh	r3, [r7, #4]

	if (buf_len < MAX_DNS_BUF_SIZE) return -1;
 801c848:	88bb      	ldrh	r3, [r7, #4]
 801c84a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c84e:	d202      	bcs.n	801c856 <dns_service_init+0x1e>
 801c850:	f04f 33ff 	mov.w	r3, #4294967295
 801c854:	e005      	b.n	801c862 <dns_service_init+0x2a>
	// if buff  less then MAX_DNS_BUF_SIZE return error;
	DNS_init(socket, buf);
 801c856:	79fb      	ldrb	r3, [r7, #7]
 801c858:	6839      	ldr	r1, [r7, #0]
 801c85a:	4618      	mov	r0, r3
 801c85c:	f7ff ff06 	bl	801c66c <DNS_init>
	return 0;
 801c860:	2300      	movs	r3, #0
}
 801c862:	4618      	mov	r0, r3
 801c864:	3708      	adds	r7, #8
 801c866:	46bd      	mov	sp, r7
 801c868:	bd80      	pop	{r7, pc}
	...

0801c86c <dns_service_set_dns_ip>:

void dns_service_set_dns_ip(uint8_t * ip_addr){
 801c86c:	b480      	push	{r7}
 801c86e:	b083      	sub	sp, #12
 801c870:	af00      	add	r7, sp, #0
 801c872:	6078      	str	r0, [r7, #4]
 801c874:	687b      	ldr	r3, [r7, #4]
 801c876:	681b      	ldr	r3, [r3, #0]
 801c878:	461a      	mov	r2, r3
	memcpy(dns_server_ip, ip_addr, sizeof(dns_server_ip));
 801c87a:	4b04      	ldr	r3, [pc, #16]	; (801c88c <dns_service_set_dns_ip+0x20>)
 801c87c:	601a      	str	r2, [r3, #0]
}
 801c87e:	bf00      	nop
 801c880:	370c      	adds	r7, #12
 801c882:	46bd      	mov	sp, r7
 801c884:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c888:	4770      	bx	lr
 801c88a:	bf00      	nop
 801c88c:	200009c8 	.word	0x200009c8

0801c890 <dns_service_resolve_name>:

int8_t dns_service_resolve_name(const char * domain_name, uint8_t * resolved_ip){
 801c890:	b580      	push	{r7, lr}
 801c892:	b084      	sub	sp, #16
 801c894:	af00      	add	r7, sp, #0
 801c896:	6078      	str	r0, [r7, #4]
 801c898:	6039      	str	r1, [r7, #0]
#ifdef DNS_USE_MUTEX
	DNSMutexGet();
 801c89a:	4b0e      	ldr	r3, [pc, #56]	; (801c8d4 <dns_service_resolve_name+0x44>)
 801c89c:	681b      	ldr	r3, [r3, #0]
 801c89e:	4798      	blx	r3
#endif
	int8_t err;
	if (NetworkReady()){
 801c8a0:	4b0d      	ldr	r3, [pc, #52]	; (801c8d8 <dns_service_resolve_name+0x48>)
 801c8a2:	681b      	ldr	r3, [r3, #0]
 801c8a4:	4798      	blx	r3
 801c8a6:	4603      	mov	r3, r0
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	d007      	beq.n	801c8bc <dns_service_resolve_name+0x2c>
		err = DNS_run(dns_server_ip, domain_name, resolved_ip);
 801c8ac:	683a      	ldr	r2, [r7, #0]
 801c8ae:	6879      	ldr	r1, [r7, #4]
 801c8b0:	480a      	ldr	r0, [pc, #40]	; (801c8dc <dns_service_resolve_name+0x4c>)
 801c8b2:	f7ff fef7 	bl	801c6a4 <DNS_run>
 801c8b6:	4603      	mov	r3, r0
 801c8b8:	73fb      	strb	r3, [r7, #15]
 801c8ba:	e001      	b.n	801c8c0 <dns_service_resolve_name+0x30>
	}else{
		err = -1;
 801c8bc:	23ff      	movs	r3, #255	; 0xff
 801c8be:	73fb      	strb	r3, [r7, #15]
	}


#ifdef DNS_USE_MUTEX
	DNSMutexRelease();
 801c8c0:	4b07      	ldr	r3, [pc, #28]	; (801c8e0 <dns_service_resolve_name+0x50>)
 801c8c2:	681b      	ldr	r3, [r3, #0]
 801c8c4:	4798      	blx	r3
#endif
	return err;
 801c8c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c8ca:	4618      	mov	r0, r3
 801c8cc:	3710      	adds	r7, #16
 801c8ce:	46bd      	mov	sp, r7
 801c8d0:	bd80      	pop	{r7, pc}
 801c8d2:	bf00      	nop
 801c8d4:	20000114 	.word	0x20000114
 801c8d8:	2000011c 	.word	0x2000011c
 801c8dc:	200009c8 	.word	0x200009c8
 801c8e0:	20000118 	.word	0x20000118

0801c8e4 <dns_service_increment_second>:

void dns_service_increment_second(void){
 801c8e4:	b580      	push	{r7, lr}
 801c8e6:	af00      	add	r7, sp, #0
	DNS_time_handler();
 801c8e8:	f7ff ff62 	bl	801c7b0 <DNS_time_handler>
}
 801c8ec:	bf00      	nop
 801c8ee:	bd80      	pop	{r7, pc}

0801c8f0 <isValidIPv4>:
        str++; //point to next character
    }
    return 1;
}

bool isValidIPv4(const char* ipAddress) {
 801c8f0:	b580      	push	{r7, lr}
 801c8f2:	b086      	sub	sp, #24
 801c8f4:	af00      	add	r7, sp, #0
 801c8f6:	6078      	str	r0, [r7, #4]
    if (ipAddress == NULL) {
 801c8f8:	687b      	ldr	r3, [r7, #4]
 801c8fa:	2b00      	cmp	r3, #0
 801c8fc:	d101      	bne.n	801c902 <isValidIPv4+0x12>
        return false;
 801c8fe:	2300      	movs	r3, #0
 801c900:	e068      	b.n	801c9d4 <isValidIPv4+0xe4>
    }

    int num = 0;    // Current segment value
 801c902:	2300      	movs	r3, #0
 801c904:	617b      	str	r3, [r7, #20]
    int count = 0;  // Count of segments in the IP address
 801c906:	2300      	movs	r3, #0
 801c908:	613b      	str	r3, [r7, #16]
    int segmentLength = 0;
 801c90a:	2300      	movs	r3, #0
 801c90c:	60fb      	str	r3, [r7, #12]

    for (size_t i = 0; ipAddress[i] != '\0'; ++i) {
 801c90e:	2300      	movs	r3, #0
 801c910:	60bb      	str	r3, [r7, #8]
 801c912:	e043      	b.n	801c99c <isValidIPv4+0xac>
        if (isdigit((unsigned char)ipAddress[i])) {
 801c914:	687a      	ldr	r2, [r7, #4]
 801c916:	68bb      	ldr	r3, [r7, #8]
 801c918:	4413      	add	r3, r2
 801c91a:	781b      	ldrb	r3, [r3, #0]
 801c91c:	3b30      	subs	r3, #48	; 0x30
 801c91e:	2b09      	cmp	r3, #9
 801c920:	d818      	bhi.n	801c954 <isValidIPv4+0x64>
            num = num * 10 + (ipAddress[i] - '0');
 801c922:	697a      	ldr	r2, [r7, #20]
 801c924:	4613      	mov	r3, r2
 801c926:	009b      	lsls	r3, r3, #2
 801c928:	4413      	add	r3, r2
 801c92a:	005b      	lsls	r3, r3, #1
 801c92c:	4619      	mov	r1, r3
 801c92e:	687a      	ldr	r2, [r7, #4]
 801c930:	68bb      	ldr	r3, [r7, #8]
 801c932:	4413      	add	r3, r2
 801c934:	781b      	ldrb	r3, [r3, #0]
 801c936:	3b30      	subs	r3, #48	; 0x30
 801c938:	440b      	add	r3, r1
 801c93a:	617b      	str	r3, [r7, #20]

            // Check if the segment value is in the valid range
            if (num < 0 || num > 255) {
 801c93c:	697b      	ldr	r3, [r7, #20]
 801c93e:	2b00      	cmp	r3, #0
 801c940:	db02      	blt.n	801c948 <isValidIPv4+0x58>
 801c942:	697b      	ldr	r3, [r7, #20]
 801c944:	2bff      	cmp	r3, #255	; 0xff
 801c946:	dd01      	ble.n	801c94c <isValidIPv4+0x5c>
                return false;
 801c948:	2300      	movs	r3, #0
 801c94a:	e043      	b.n	801c9d4 <isValidIPv4+0xe4>
            }

            segmentLength++;
 801c94c:	68fb      	ldr	r3, [r7, #12]
 801c94e:	3301      	adds	r3, #1
 801c950:	60fb      	str	r3, [r7, #12]
 801c952:	e020      	b.n	801c996 <isValidIPv4+0xa6>
        } else if (ipAddress[i] == '.') {
 801c954:	687a      	ldr	r2, [r7, #4]
 801c956:	68bb      	ldr	r3, [r7, #8]
 801c958:	4413      	add	r3, r2
 801c95a:	781b      	ldrb	r3, [r3, #0]
 801c95c:	2b2e      	cmp	r3, #46	; 0x2e
 801c95e:	d118      	bne.n	801c992 <isValidIPv4+0xa2>
            // Check if the segment has leading zeros
            if (segmentLength > 1 && ipAddress[i - segmentLength] == '0') {
 801c960:	68fb      	ldr	r3, [r7, #12]
 801c962:	2b01      	cmp	r3, #1
 801c964:	dd09      	ble.n	801c97a <isValidIPv4+0x8a>
 801c966:	68fb      	ldr	r3, [r7, #12]
 801c968:	68ba      	ldr	r2, [r7, #8]
 801c96a:	1ad3      	subs	r3, r2, r3
 801c96c:	687a      	ldr	r2, [r7, #4]
 801c96e:	4413      	add	r3, r2
 801c970:	781b      	ldrb	r3, [r3, #0]
 801c972:	2b30      	cmp	r3, #48	; 0x30
 801c974:	d101      	bne.n	801c97a <isValidIPv4+0x8a>
                return false;
 801c976:	2300      	movs	r3, #0
 801c978:	e02c      	b.n	801c9d4 <isValidIPv4+0xe4>
            }

            // Move to the next segment
            num = 0;
 801c97a:	2300      	movs	r3, #0
 801c97c:	617b      	str	r3, [r7, #20]
            count++;
 801c97e:	693b      	ldr	r3, [r7, #16]
 801c980:	3301      	adds	r3, #1
 801c982:	613b      	str	r3, [r7, #16]
            segmentLength = 0;
 801c984:	2300      	movs	r3, #0
 801c986:	60fb      	str	r3, [r7, #12]

            // Check if there are more than 4 segments
            if (count > 3) {
 801c988:	693b      	ldr	r3, [r7, #16]
 801c98a:	2b03      	cmp	r3, #3
 801c98c:	dd03      	ble.n	801c996 <isValidIPv4+0xa6>
                return false;
 801c98e:	2300      	movs	r3, #0
 801c990:	e020      	b.n	801c9d4 <isValidIPv4+0xe4>
            }
        } else {
            // Invalid character in the IP address
            return false;
 801c992:	2300      	movs	r3, #0
 801c994:	e01e      	b.n	801c9d4 <isValidIPv4+0xe4>
    for (size_t i = 0; ipAddress[i] != '\0'; ++i) {
 801c996:	68bb      	ldr	r3, [r7, #8]
 801c998:	3301      	adds	r3, #1
 801c99a:	60bb      	str	r3, [r7, #8]
 801c99c:	687a      	ldr	r2, [r7, #4]
 801c99e:	68bb      	ldr	r3, [r7, #8]
 801c9a0:	4413      	add	r3, r2
 801c9a2:	781b      	ldrb	r3, [r3, #0]
 801c9a4:	2b00      	cmp	r3, #0
 801c9a6:	d1b5      	bne.n	801c914 <isValidIPv4+0x24>
        }
    }

    // Check if the last segment has leading zeros
    if (segmentLength > 1 && ipAddress[strlen(ipAddress) - segmentLength] == '0') {
 801c9a8:	68fb      	ldr	r3, [r7, #12]
 801c9aa:	2b01      	cmp	r3, #1
 801c9ac:	dd0c      	ble.n	801c9c8 <isValidIPv4+0xd8>
 801c9ae:	6878      	ldr	r0, [r7, #4]
 801c9b0:	f7f3 fc76 	bl	80102a0 <strlen>
 801c9b4:	4602      	mov	r2, r0
 801c9b6:	68fb      	ldr	r3, [r7, #12]
 801c9b8:	1ad3      	subs	r3, r2, r3
 801c9ba:	687a      	ldr	r2, [r7, #4]
 801c9bc:	4413      	add	r3, r2
 801c9be:	781b      	ldrb	r3, [r3, #0]
 801c9c0:	2b30      	cmp	r3, #48	; 0x30
 801c9c2:	d101      	bne.n	801c9c8 <isValidIPv4+0xd8>
        return false;
 801c9c4:	2300      	movs	r3, #0
 801c9c6:	e005      	b.n	801c9d4 <isValidIPv4+0xe4>
    }

    // Check if there are exactly 4 segments in the IP address
    return count == 3;
 801c9c8:	693b      	ldr	r3, [r7, #16]
 801c9ca:	2b03      	cmp	r3, #3
 801c9cc:	bf0c      	ite	eq
 801c9ce:	2301      	moveq	r3, #1
 801c9d0:	2300      	movne	r3, #0
 801c9d2:	b2db      	uxtb	r3, r3
}
 801c9d4:	4618      	mov	r0, r3
 801c9d6:	3718      	adds	r7, #24
 801c9d8:	46bd      	mov	sp, r7
 801c9da:	bd80      	pop	{r7, pc}

0801c9dc <NewMessageData>:
 * Contributors:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/
#include "MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 801c9dc:	b480      	push	{r7}
 801c9de:	b085      	sub	sp, #20
 801c9e0:	af00      	add	r7, sp, #0
 801c9e2:	60f8      	str	r0, [r7, #12]
 801c9e4:	60b9      	str	r1, [r7, #8]
 801c9e6:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 801c9e8:	68fb      	ldr	r3, [r7, #12]
 801c9ea:	68ba      	ldr	r2, [r7, #8]
 801c9ec:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 801c9ee:	68fb      	ldr	r3, [r7, #12]
 801c9f0:	687a      	ldr	r2, [r7, #4]
 801c9f2:	601a      	str	r2, [r3, #0]
}
 801c9f4:	bf00      	nop
 801c9f6:	3714      	adds	r7, #20
 801c9f8:	46bd      	mov	sp, r7
 801c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9fe:	4770      	bx	lr

0801ca00 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 801ca00:	b480      	push	{r7}
 801ca02:	b083      	sub	sp, #12
 801ca04:	af00      	add	r7, sp, #0
 801ca06:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 801ca08:	687b      	ldr	r3, [r7, #4]
 801ca0a:	681b      	ldr	r3, [r3, #0]
 801ca0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ca10:	4293      	cmp	r3, r2
 801ca12:	d003      	beq.n	801ca1c <getNextPacketId+0x1c>
 801ca14:	687b      	ldr	r3, [r7, #4]
 801ca16:	681b      	ldr	r3, [r3, #0]
 801ca18:	3301      	adds	r3, #1
 801ca1a:	e000      	b.n	801ca1e <getNextPacketId+0x1e>
 801ca1c:	2301      	movs	r3, #1
 801ca1e:	687a      	ldr	r2, [r7, #4]
 801ca20:	6013      	str	r3, [r2, #0]
 801ca22:	687b      	ldr	r3, [r7, #4]
 801ca24:	681b      	ldr	r3, [r3, #0]
}
 801ca26:	4618      	mov	r0, r3
 801ca28:	370c      	adds	r7, #12
 801ca2a:	46bd      	mov	sp, r7
 801ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca30:	4770      	bx	lr

0801ca32 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 801ca32:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca34:	b087      	sub	sp, #28
 801ca36:	af00      	add	r7, sp, #0
 801ca38:	60f8      	str	r0, [r7, #12]
 801ca3a:	60b9      	str	r1, [r7, #8]
 801ca3c:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 801ca3e:	f04f 33ff 	mov.w	r3, #4294967295
 801ca42:	617b      	str	r3, [r7, #20]
        sent = 0;
 801ca44:	2300      	movs	r3, #0
 801ca46:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 801ca48:	e018      	b.n	801ca7c <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 801ca4a:	68fb      	ldr	r3, [r7, #12]
 801ca4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ca4e:	689c      	ldr	r4, [r3, #8]
 801ca50:	68fb      	ldr	r3, [r7, #12]
 801ca52:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801ca54:	68fb      	ldr	r3, [r7, #12]
 801ca56:	691a      	ldr	r2, [r3, #16]
 801ca58:	693b      	ldr	r3, [r7, #16]
 801ca5a:	18d6      	adds	r6, r2, r3
 801ca5c:	6878      	ldr	r0, [r7, #4]
 801ca5e:	f000 fccb 	bl	801d3f8 <TimerLeftMS>
 801ca62:	4603      	mov	r3, r0
 801ca64:	68ba      	ldr	r2, [r7, #8]
 801ca66:	4631      	mov	r1, r6
 801ca68:	4628      	mov	r0, r5
 801ca6a:	47a0      	blx	r4
 801ca6c:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 801ca6e:	697b      	ldr	r3, [r7, #20]
 801ca70:	2b00      	cmp	r3, #0
 801ca72:	db0e      	blt.n	801ca92 <sendPacket+0x60>
            break;
        sent += rc;
 801ca74:	693a      	ldr	r2, [r7, #16]
 801ca76:	697b      	ldr	r3, [r7, #20]
 801ca78:	4413      	add	r3, r2
 801ca7a:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 801ca7c:	693a      	ldr	r2, [r7, #16]
 801ca7e:	68bb      	ldr	r3, [r7, #8]
 801ca80:	429a      	cmp	r2, r3
 801ca82:	da07      	bge.n	801ca94 <sendPacket+0x62>
 801ca84:	6878      	ldr	r0, [r7, #4]
 801ca86:	f000 fc75 	bl	801d374 <TimerIsExpired>
 801ca8a:	4603      	mov	r3, r0
 801ca8c:	2b00      	cmp	r3, #0
 801ca8e:	d0dc      	beq.n	801ca4a <sendPacket+0x18>
 801ca90:	e000      	b.n	801ca94 <sendPacket+0x62>
            break;
 801ca92:	bf00      	nop
    }
    if (sent == length)
 801ca94:	693a      	ldr	r2, [r7, #16]
 801ca96:	68bb      	ldr	r3, [r7, #8]
 801ca98:	429a      	cmp	r2, r3
 801ca9a:	d10b      	bne.n	801cab4 <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 801ca9c:	68fb      	ldr	r3, [r7, #12]
 801ca9e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801caa2:	68fb      	ldr	r3, [r7, #12]
 801caa4:	699b      	ldr	r3, [r3, #24]
 801caa6:	4619      	mov	r1, r3
 801caa8:	4610      	mov	r0, r2
 801caaa:	f000 fc8d 	bl	801d3c8 <TimerCountdown>
        rc = SUCCESSS;
 801caae:	2300      	movs	r3, #0
 801cab0:	617b      	str	r3, [r7, #20]
 801cab2:	e002      	b.n	801caba <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 801cab4:	f04f 33ff 	mov.w	r3, #4294967295
 801cab8:	617b      	str	r3, [r7, #20]
    return rc;
 801caba:	697b      	ldr	r3, [r7, #20]
}
 801cabc:	4618      	mov	r0, r3
 801cabe:	371c      	adds	r7, #28
 801cac0:	46bd      	mov	sp, r7
 801cac2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cac4 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 801cac4:	b580      	push	{r7, lr}
 801cac6:	b086      	sub	sp, #24
 801cac8:	af00      	add	r7, sp, #0
 801caca:	60f8      	str	r0, [r7, #12]
 801cacc:	60b9      	str	r1, [r7, #8]
 801cace:	607a      	str	r2, [r7, #4]
 801cad0:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 801cad2:	68fb      	ldr	r3, [r7, #12]
 801cad4:	68ba      	ldr	r2, [r7, #8]
 801cad6:	651a      	str	r2, [r3, #80]	; 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801cad8:	2300      	movs	r3, #0
 801cada:	617b      	str	r3, [r7, #20]
 801cadc:	e009      	b.n	801caf2 <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 801cade:	68fa      	ldr	r2, [r7, #12]
 801cae0:	697b      	ldr	r3, [r7, #20]
 801cae2:	3304      	adds	r3, #4
 801cae4:	00db      	lsls	r3, r3, #3
 801cae6:	4413      	add	r3, r2
 801cae8:	2200      	movs	r2, #0
 801caea:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801caec:	697b      	ldr	r3, [r7, #20]
 801caee:	3301      	adds	r3, #1
 801caf0:	617b      	str	r3, [r7, #20]
 801caf2:	697b      	ldr	r3, [r7, #20]
 801caf4:	2b04      	cmp	r3, #4
 801caf6:	ddf2      	ble.n	801cade <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 801caf8:	68fb      	ldr	r3, [r7, #12]
 801cafa:	687a      	ldr	r2, [r7, #4]
 801cafc:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 801cafe:	68fb      	ldr	r3, [r7, #12]
 801cb00:	683a      	ldr	r2, [r7, #0]
 801cb02:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 801cb04:	68fb      	ldr	r3, [r7, #12]
 801cb06:	6a3a      	ldr	r2, [r7, #32]
 801cb08:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 801cb0a:	68fb      	ldr	r3, [r7, #12]
 801cb0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cb0e:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 801cb10:	68fb      	ldr	r3, [r7, #12]
 801cb12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cb14:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 801cb16:	68fb      	ldr	r3, [r7, #12]
 801cb18:	2200      	movs	r2, #0
 801cb1a:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 801cb1c:	68fb      	ldr	r3, [r7, #12]
 801cb1e:	2200      	movs	r2, #0
 801cb20:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 801cb22:	68fb      	ldr	r3, [r7, #12]
 801cb24:	2200      	movs	r2, #0
 801cb26:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
 801cb28:	68fb      	ldr	r3, [r7, #12]
 801cb2a:	2201      	movs	r2, #1
 801cb2c:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 801cb2e:	68fb      	ldr	r3, [r7, #12]
 801cb30:	3354      	adds	r3, #84	; 0x54
 801cb32:	4618      	mov	r0, r3
 801cb34:	f000 fc11 	bl	801d35a <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 801cb38:	bf00      	nop
 801cb3a:	3718      	adds	r7, #24
 801cb3c:	46bd      	mov	sp, r7
 801cb3e:	bd80      	pop	{r7, pc}

0801cb40 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 801cb40:	b590      	push	{r4, r7, lr}
 801cb42:	b08b      	sub	sp, #44	; 0x2c
 801cb44:	af00      	add	r7, sp, #0
 801cb46:	60f8      	str	r0, [r7, #12]
 801cb48:	60b9      	str	r1, [r7, #8]
 801cb4a:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 801cb4c:	2301      	movs	r3, #1
 801cb4e:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 801cb50:	2300      	movs	r3, #0
 801cb52:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 801cb54:	2304      	movs	r3, #4
 801cb56:	61fb      	str	r3, [r7, #28]

    *value = 0;
 801cb58:	68bb      	ldr	r3, [r7, #8]
 801cb5a:	2200      	movs	r2, #0
 801cb5c:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 801cb5e:	f04f 33ff 	mov.w	r3, #4294967295
 801cb62:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 801cb64:	6a3b      	ldr	r3, [r7, #32]
 801cb66:	3301      	adds	r3, #1
 801cb68:	623b      	str	r3, [r7, #32]
 801cb6a:	6a3a      	ldr	r2, [r7, #32]
 801cb6c:	69fb      	ldr	r3, [r7, #28]
 801cb6e:	429a      	cmp	r2, r3
 801cb70:	dd03      	ble.n	801cb7a <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 801cb72:	f04f 33ff 	mov.w	r3, #4294967295
 801cb76:	61bb      	str	r3, [r7, #24]
            goto exit;
 801cb78:	e021      	b.n	801cbbe <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 801cb7a:	68fb      	ldr	r3, [r7, #12]
 801cb7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cb7e:	685c      	ldr	r4, [r3, #4]
 801cb80:	68fb      	ldr	r3, [r7, #12]
 801cb82:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801cb84:	f107 0117 	add.w	r1, r7, #23
 801cb88:	687b      	ldr	r3, [r7, #4]
 801cb8a:	2201      	movs	r2, #1
 801cb8c:	47a0      	blx	r4
 801cb8e:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 801cb90:	69bb      	ldr	r3, [r7, #24]
 801cb92:	2b01      	cmp	r3, #1
 801cb94:	d112      	bne.n	801cbbc <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 801cb96:	68bb      	ldr	r3, [r7, #8]
 801cb98:	681a      	ldr	r2, [r3, #0]
 801cb9a:	7dfb      	ldrb	r3, [r7, #23]
 801cb9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cba0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801cba2:	fb01 f303 	mul.w	r3, r1, r3
 801cba6:	441a      	add	r2, r3
 801cba8:	68bb      	ldr	r3, [r7, #8]
 801cbaa:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 801cbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbae:	01db      	lsls	r3, r3, #7
 801cbb0:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 801cbb2:	7dfb      	ldrb	r3, [r7, #23]
 801cbb4:	b25b      	sxtb	r3, r3
 801cbb6:	2b00      	cmp	r3, #0
 801cbb8:	dbd1      	blt.n	801cb5e <decodePacket+0x1e>
exit:
 801cbba:	e000      	b.n	801cbbe <decodePacket+0x7e>
            goto exit;
 801cbbc:	bf00      	nop
    return len;
 801cbbe:	6a3b      	ldr	r3, [r7, #32]
}
 801cbc0:	4618      	mov	r0, r3
 801cbc2:	372c      	adds	r7, #44	; 0x2c
 801cbc4:	46bd      	mov	sp, r7
 801cbc6:	bd90      	pop	{r4, r7, pc}

0801cbc8 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 801cbc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cbca:	b089      	sub	sp, #36	; 0x24
 801cbcc:	af00      	add	r7, sp, #0
 801cbce:	60f8      	str	r0, [r7, #12]
 801cbd0:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 801cbd2:	f04f 33ff 	mov.w	r3, #4294967295
 801cbd6:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 801cbd8:	2300      	movs	r3, #0
 801cbda:	617b      	str	r3, [r7, #20]
    int len = 0;
 801cbdc:	2300      	movs	r3, #0
 801cbde:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 801cbe0:	2300      	movs	r3, #0
 801cbe2:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 801cbe4:	68fb      	ldr	r3, [r7, #12]
 801cbe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cbe8:	685c      	ldr	r4, [r3, #4]
 801cbea:	68fb      	ldr	r3, [r7, #12]
 801cbec:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801cbee:	68fb      	ldr	r3, [r7, #12]
 801cbf0:	695e      	ldr	r6, [r3, #20]
 801cbf2:	68b8      	ldr	r0, [r7, #8]
 801cbf4:	f000 fc00 	bl	801d3f8 <TimerLeftMS>
 801cbf8:	4603      	mov	r3, r0
 801cbfa:	2201      	movs	r2, #1
 801cbfc:	4631      	mov	r1, r6
 801cbfe:	4628      	mov	r0, r5
 801cc00:	47a0      	blx	r4
 801cc02:	4603      	mov	r3, r0
 801cc04:	2b01      	cmp	r3, #1
 801cc06:	d13b      	bne.n	801cc80 <readPacket+0xb8>
        goto exit;

    len = 1;
 801cc08:	2301      	movs	r3, #1
 801cc0a:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 801cc0c:	68b8      	ldr	r0, [r7, #8]
 801cc0e:	f000 fbf3 	bl	801d3f8 <TimerLeftMS>
 801cc12:	4602      	mov	r2, r0
 801cc14:	f107 0310 	add.w	r3, r7, #16
 801cc18:	4619      	mov	r1, r3
 801cc1a:	68f8      	ldr	r0, [r7, #12]
 801cc1c:	f7ff ff90 	bl	801cb40 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 801cc20:	68fb      	ldr	r3, [r7, #12]
 801cc22:	695b      	ldr	r3, [r3, #20]
 801cc24:	3301      	adds	r3, #1
 801cc26:	693a      	ldr	r2, [r7, #16]
 801cc28:	4611      	mov	r1, r2
 801cc2a:	4618      	mov	r0, r3
 801cc2c:	f000 ff49 	bl	801dac2 <MQTTPacket_encode>
 801cc30:	4602      	mov	r2, r0
 801cc32:	69bb      	ldr	r3, [r7, #24]
 801cc34:	4413      	add	r3, r2
 801cc36:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 801cc38:	693b      	ldr	r3, [r7, #16]
 801cc3a:	2b00      	cmp	r3, #0
 801cc3c:	dd16      	ble.n	801cc6c <readPacket+0xa4>
 801cc3e:	68fb      	ldr	r3, [r7, #12]
 801cc40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cc42:	685c      	ldr	r4, [r3, #4]
 801cc44:	68fb      	ldr	r3, [r7, #12]
 801cc46:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801cc48:	68fb      	ldr	r3, [r7, #12]
 801cc4a:	695a      	ldr	r2, [r3, #20]
 801cc4c:	69bb      	ldr	r3, [r7, #24]
 801cc4e:	18d6      	adds	r6, r2, r3
 801cc50:	693b      	ldr	r3, [r7, #16]
 801cc52:	607b      	str	r3, [r7, #4]
 801cc54:	68b8      	ldr	r0, [r7, #8]
 801cc56:	f000 fbcf 	bl	801d3f8 <TimerLeftMS>
 801cc5a:	4603      	mov	r3, r0
 801cc5c:	687a      	ldr	r2, [r7, #4]
 801cc5e:	4631      	mov	r1, r6
 801cc60:	4628      	mov	r0, r5
 801cc62:	47a0      	blx	r4
 801cc64:	4602      	mov	r2, r0
 801cc66:	693b      	ldr	r3, [r7, #16]
 801cc68:	429a      	cmp	r2, r3
 801cc6a:	d10b      	bne.n	801cc84 <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 801cc6c:	68fb      	ldr	r3, [r7, #12]
 801cc6e:	695b      	ldr	r3, [r3, #20]
 801cc70:	781b      	ldrb	r3, [r3, #0]
 801cc72:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 801cc74:	7d3b      	ldrb	r3, [r7, #20]
 801cc76:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801cc7a:	b2db      	uxtb	r3, r3
 801cc7c:	61fb      	str	r3, [r7, #28]
 801cc7e:	e002      	b.n	801cc86 <readPacket+0xbe>
        goto exit;
 801cc80:	bf00      	nop
 801cc82:	e000      	b.n	801cc86 <readPacket+0xbe>
        goto exit;
 801cc84:	bf00      	nop
exit:
    return rc;
 801cc86:	69fb      	ldr	r3, [r7, #28]
}
 801cc88:	4618      	mov	r0, r3
 801cc8a:	3724      	adds	r7, #36	; 0x24
 801cc8c:	46bd      	mov	sp, r7
 801cc8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cc90 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 801cc90:	b480      	push	{r7}
 801cc92:	b087      	sub	sp, #28
 801cc94:	af00      	add	r7, sp, #0
 801cc96:	6078      	str	r0, [r7, #4]
 801cc98:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 801cc9a:	687b      	ldr	r3, [r7, #4]
 801cc9c:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 801cc9e:	683b      	ldr	r3, [r7, #0]
 801cca0:	689b      	ldr	r3, [r3, #8]
 801cca2:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 801cca4:	683b      	ldr	r3, [r7, #0]
 801cca6:	685b      	ldr	r3, [r3, #4]
 801cca8:	461a      	mov	r2, r3
 801ccaa:	693b      	ldr	r3, [r7, #16]
 801ccac:	4413      	add	r3, r2
 801ccae:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 801ccb0:	e039      	b.n	801cd26 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 801ccb2:	693b      	ldr	r3, [r7, #16]
 801ccb4:	781b      	ldrb	r3, [r3, #0]
 801ccb6:	2b2f      	cmp	r3, #47	; 0x2f
 801ccb8:	d103      	bne.n	801ccc2 <isTopicMatched+0x32>
 801ccba:	697b      	ldr	r3, [r7, #20]
 801ccbc:	781b      	ldrb	r3, [r3, #0]
 801ccbe:	2b2f      	cmp	r3, #47	; 0x2f
 801ccc0:	d13a      	bne.n	801cd38 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 801ccc2:	697b      	ldr	r3, [r7, #20]
 801ccc4:	781b      	ldrb	r3, [r3, #0]
 801ccc6:	2b2b      	cmp	r3, #43	; 0x2b
 801ccc8:	d009      	beq.n	801ccde <isTopicMatched+0x4e>
 801ccca:	697b      	ldr	r3, [r7, #20]
 801cccc:	781b      	ldrb	r3, [r3, #0]
 801ccce:	2b23      	cmp	r3, #35	; 0x23
 801ccd0:	d005      	beq.n	801ccde <isTopicMatched+0x4e>
 801ccd2:	697b      	ldr	r3, [r7, #20]
 801ccd4:	781a      	ldrb	r2, [r3, #0]
 801ccd6:	693b      	ldr	r3, [r7, #16]
 801ccd8:	781b      	ldrb	r3, [r3, #0]
 801ccda:	429a      	cmp	r2, r3
 801ccdc:	d12e      	bne.n	801cd3c <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 801ccde:	697b      	ldr	r3, [r7, #20]
 801cce0:	781b      	ldrb	r3, [r3, #0]
 801cce2:	2b2b      	cmp	r3, #43	; 0x2b
 801cce4:	d112      	bne.n	801cd0c <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 801cce6:	693b      	ldr	r3, [r7, #16]
 801cce8:	3301      	adds	r3, #1
 801ccea:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 801ccec:	e005      	b.n	801ccfa <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 801ccee:	693b      	ldr	r3, [r7, #16]
 801ccf0:	3301      	adds	r3, #1
 801ccf2:	613b      	str	r3, [r7, #16]
 801ccf4:	693b      	ldr	r3, [r7, #16]
 801ccf6:	3301      	adds	r3, #1
 801ccf8:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 801ccfa:	68fa      	ldr	r2, [r7, #12]
 801ccfc:	68bb      	ldr	r3, [r7, #8]
 801ccfe:	429a      	cmp	r2, r3
 801cd00:	d20b      	bcs.n	801cd1a <isTopicMatched+0x8a>
 801cd02:	68fb      	ldr	r3, [r7, #12]
 801cd04:	781b      	ldrb	r3, [r3, #0]
 801cd06:	2b2f      	cmp	r3, #47	; 0x2f
 801cd08:	d1f1      	bne.n	801ccee <isTopicMatched+0x5e>
 801cd0a:	e006      	b.n	801cd1a <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 801cd0c:	697b      	ldr	r3, [r7, #20]
 801cd0e:	781b      	ldrb	r3, [r3, #0]
 801cd10:	2b23      	cmp	r3, #35	; 0x23
 801cd12:	d102      	bne.n	801cd1a <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 801cd14:	68bb      	ldr	r3, [r7, #8]
 801cd16:	3b01      	subs	r3, #1
 801cd18:	613b      	str	r3, [r7, #16]
        curf++;
 801cd1a:	697b      	ldr	r3, [r7, #20]
 801cd1c:	3301      	adds	r3, #1
 801cd1e:	617b      	str	r3, [r7, #20]
        curn++;
 801cd20:	693b      	ldr	r3, [r7, #16]
 801cd22:	3301      	adds	r3, #1
 801cd24:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 801cd26:	697b      	ldr	r3, [r7, #20]
 801cd28:	781b      	ldrb	r3, [r3, #0]
 801cd2a:	2b00      	cmp	r3, #0
 801cd2c:	d007      	beq.n	801cd3e <isTopicMatched+0xae>
 801cd2e:	693a      	ldr	r2, [r7, #16]
 801cd30:	68bb      	ldr	r3, [r7, #8]
 801cd32:	429a      	cmp	r2, r3
 801cd34:	d3bd      	bcc.n	801ccb2 <isTopicMatched+0x22>
 801cd36:	e002      	b.n	801cd3e <isTopicMatched+0xae>
            break;
 801cd38:	bf00      	nop
 801cd3a:	e000      	b.n	801cd3e <isTopicMatched+0xae>
            break;
 801cd3c:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 801cd3e:	693a      	ldr	r2, [r7, #16]
 801cd40:	68bb      	ldr	r3, [r7, #8]
 801cd42:	429a      	cmp	r2, r3
 801cd44:	d105      	bne.n	801cd52 <isTopicMatched+0xc2>
 801cd46:	697b      	ldr	r3, [r7, #20]
 801cd48:	781b      	ldrb	r3, [r3, #0]
 801cd4a:	2b00      	cmp	r3, #0
 801cd4c:	d101      	bne.n	801cd52 <isTopicMatched+0xc2>
 801cd4e:	2301      	movs	r3, #1
 801cd50:	e000      	b.n	801cd54 <isTopicMatched+0xc4>
 801cd52:	2300      	movs	r3, #0
 801cd54:	b2db      	uxtb	r3, r3
}
 801cd56:	4618      	mov	r0, r3
 801cd58:	371c      	adds	r7, #28
 801cd5a:	46bd      	mov	sp, r7
 801cd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd60:	4770      	bx	lr

0801cd62 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 801cd62:	b580      	push	{r7, lr}
 801cd64:	b08a      	sub	sp, #40	; 0x28
 801cd66:	af00      	add	r7, sp, #0
 801cd68:	60f8      	str	r0, [r7, #12]
 801cd6a:	60b9      	str	r1, [r7, #8]
 801cd6c:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 801cd6e:	f04f 33ff 	mov.w	r3, #4294967295
 801cd72:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801cd74:	2300      	movs	r3, #0
 801cd76:	627b      	str	r3, [r7, #36]	; 0x24
 801cd78:	e03f      	b.n	801cdfa <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 801cd7a:	68fa      	ldr	r2, [r7, #12]
 801cd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd7e:	3304      	adds	r3, #4
 801cd80:	00db      	lsls	r3, r3, #3
 801cd82:	4413      	add	r3, r2
 801cd84:	685b      	ldr	r3, [r3, #4]
 801cd86:	2b00      	cmp	r3, #0
 801cd88:	d034      	beq.n	801cdf4 <deliverMessage+0x92>
 801cd8a:	68fa      	ldr	r2, [r7, #12]
 801cd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd8e:	3304      	adds	r3, #4
 801cd90:	00db      	lsls	r3, r3, #3
 801cd92:	4413      	add	r3, r2
 801cd94:	685b      	ldr	r3, [r3, #4]
 801cd96:	4619      	mov	r1, r3
 801cd98:	68b8      	ldr	r0, [r7, #8]
 801cd9a:	f001 f861 	bl	801de60 <MQTTPacket_equals>
 801cd9e:	4603      	mov	r3, r0
 801cda0:	2b00      	cmp	r3, #0
 801cda2:	d10c      	bne.n	801cdbe <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 801cda4:	68fa      	ldr	r2, [r7, #12]
 801cda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cda8:	3304      	adds	r3, #4
 801cdaa:	00db      	lsls	r3, r3, #3
 801cdac:	4413      	add	r3, r2
 801cdae:	685b      	ldr	r3, [r3, #4]
 801cdb0:	68b9      	ldr	r1, [r7, #8]
 801cdb2:	4618      	mov	r0, r3
 801cdb4:	f7ff ff6c 	bl	801cc90 <isTopicMatched>
 801cdb8:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 801cdba:	2b00      	cmp	r3, #0
 801cdbc:	d01a      	beq.n	801cdf4 <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 801cdbe:	68fa      	ldr	r2, [r7, #12]
 801cdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdc2:	3304      	adds	r3, #4
 801cdc4:	00db      	lsls	r3, r3, #3
 801cdc6:	4413      	add	r3, r2
 801cdc8:	689b      	ldr	r3, [r3, #8]
 801cdca:	2b00      	cmp	r3, #0
 801cdcc:	d012      	beq.n	801cdf4 <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 801cdce:	f107 0318 	add.w	r3, r7, #24
 801cdd2:	687a      	ldr	r2, [r7, #4]
 801cdd4:	68b9      	ldr	r1, [r7, #8]
 801cdd6:	4618      	mov	r0, r3
 801cdd8:	f7ff fe00 	bl	801c9dc <NewMessageData>
                c->messageHandlers[i].fp(&md);
 801cddc:	68fa      	ldr	r2, [r7, #12]
 801cdde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cde0:	3304      	adds	r3, #4
 801cde2:	00db      	lsls	r3, r3, #3
 801cde4:	4413      	add	r3, r2
 801cde6:	689b      	ldr	r3, [r3, #8]
 801cde8:	f107 0218 	add.w	r2, r7, #24
 801cdec:	4610      	mov	r0, r2
 801cdee:	4798      	blx	r3
                rc = SUCCESSS;
 801cdf0:	2300      	movs	r3, #0
 801cdf2:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801cdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdf6:	3301      	adds	r3, #1
 801cdf8:	627b      	str	r3, [r7, #36]	; 0x24
 801cdfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdfc:	2b04      	cmp	r3, #4
 801cdfe:	ddbc      	ble.n	801cd7a <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 801ce00:	6a3b      	ldr	r3, [r7, #32]
 801ce02:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ce06:	d112      	bne.n	801ce2e <deliverMessage+0xcc>
 801ce08:	68fb      	ldr	r3, [r7, #12]
 801ce0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ce0c:	2b00      	cmp	r3, #0
 801ce0e:	d00e      	beq.n	801ce2e <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 801ce10:	f107 0310 	add.w	r3, r7, #16
 801ce14:	687a      	ldr	r2, [r7, #4]
 801ce16:	68b9      	ldr	r1, [r7, #8]
 801ce18:	4618      	mov	r0, r3
 801ce1a:	f7ff fddf 	bl	801c9dc <NewMessageData>
        c->defaultMessageHandler(&md);
 801ce1e:	68fb      	ldr	r3, [r7, #12]
 801ce20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ce22:	f107 0210 	add.w	r2, r7, #16
 801ce26:	4610      	mov	r0, r2
 801ce28:	4798      	blx	r3
        rc = SUCCESSS;
 801ce2a:	2300      	movs	r3, #0
 801ce2c:	623b      	str	r3, [r7, #32]
    }

    return rc;
 801ce2e:	6a3b      	ldr	r3, [r7, #32]
}
 801ce30:	4618      	mov	r0, r3
 801ce32:	3728      	adds	r7, #40	; 0x28
 801ce34:	46bd      	mov	sp, r7
 801ce36:	bd80      	pop	{r7, pc}

0801ce38 <keepalive>:


int keepalive(MQTTClient* c)
{
 801ce38:	b580      	push	{r7, lr}
 801ce3a:	b086      	sub	sp, #24
 801ce3c:	af00      	add	r7, sp, #0
 801ce3e:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 801ce40:	f04f 33ff 	mov.w	r3, #4294967295
 801ce44:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 801ce46:	687b      	ldr	r3, [r7, #4]
 801ce48:	699b      	ldr	r3, [r3, #24]
 801ce4a:	2b00      	cmp	r3, #0
 801ce4c:	d102      	bne.n	801ce54 <keepalive+0x1c>
    {
        rc = SUCCESSS;
 801ce4e:	2300      	movs	r3, #0
 801ce50:	617b      	str	r3, [r7, #20]
        goto exit;
 801ce52:	e033      	b.n	801cebc <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 801ce54:	687b      	ldr	r3, [r7, #4]
 801ce56:	3354      	adds	r3, #84	; 0x54
 801ce58:	4618      	mov	r0, r3
 801ce5a:	f000 fa8b 	bl	801d374 <TimerIsExpired>
 801ce5e:	4603      	mov	r3, r0
 801ce60:	2b00      	cmp	r3, #0
 801ce62:	d02a      	beq.n	801ceba <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	7f1b      	ldrb	r3, [r3, #28]
 801ce68:	2b00      	cmp	r3, #0
 801ce6a:	d126      	bne.n	801ceba <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 801ce6c:	f107 0308 	add.w	r3, r7, #8
 801ce70:	4618      	mov	r0, r3
 801ce72:	f000 fa72 	bl	801d35a <TimerInit>
            TimerCountdownMS(&timer, 1000);
 801ce76:	f107 0308 	add.w	r3, r7, #8
 801ce7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801ce7e:	4618      	mov	r0, r3
 801ce80:	f000 fa8e 	bl	801d3a0 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 801ce84:	687b      	ldr	r3, [r7, #4]
 801ce86:	691a      	ldr	r2, [r3, #16]
 801ce88:	687b      	ldr	r3, [r7, #4]
 801ce8a:	689b      	ldr	r3, [r3, #8]
 801ce8c:	4619      	mov	r1, r3
 801ce8e:	4610      	mov	r0, r2
 801ce90:	f000 fd4b 	bl	801d92a <MQTTSerialize_pingreq>
 801ce94:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 801ce96:	693b      	ldr	r3, [r7, #16]
 801ce98:	2b00      	cmp	r3, #0
 801ce9a:	dd0f      	ble.n	801cebc <keepalive+0x84>
 801ce9c:	f107 0308 	add.w	r3, r7, #8
 801cea0:	461a      	mov	r2, r3
 801cea2:	6939      	ldr	r1, [r7, #16]
 801cea4:	6878      	ldr	r0, [r7, #4]
 801cea6:	f7ff fdc4 	bl	801ca32 <sendPacket>
 801ceaa:	6178      	str	r0, [r7, #20]
 801ceac:	697b      	ldr	r3, [r7, #20]
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	d104      	bne.n	801cebc <keepalive+0x84>
                c->ping_outstanding = 1;
 801ceb2:	687b      	ldr	r3, [r7, #4]
 801ceb4:	2201      	movs	r2, #1
 801ceb6:	771a      	strb	r2, [r3, #28]
 801ceb8:	e000      	b.n	801cebc <keepalive+0x84>
        }
    }

exit:
 801ceba:	bf00      	nop
    return rc;
 801cebc:	697b      	ldr	r3, [r7, #20]
}
 801cebe:	4618      	mov	r0, r3
 801cec0:	3718      	adds	r7, #24
 801cec2:	46bd      	mov	sp, r7
 801cec4:	bd80      	pop	{r7, pc}
	...

0801cec8 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 801cec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ceca:	b095      	sub	sp, #84	; 0x54
 801cecc:	af06      	add	r7, sp, #24
 801cece:	6078      	str	r0, [r7, #4]
 801ced0:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 801ced2:	6839      	ldr	r1, [r7, #0]
 801ced4:	6878      	ldr	r0, [r7, #4]
 801ced6:	f7ff fe77 	bl	801cbc8 <readPacket>
 801ceda:	4603      	mov	r3, r0
 801cedc:	85fb      	strh	r3, [r7, #46]	; 0x2e

    int len = 0,
 801cede:	2300      	movs	r3, #0
 801cee0:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESSS;
 801cee2:	2300      	movs	r3, #0
 801cee4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 801cee6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801cee8:	3b02      	subs	r3, #2
 801ceea:	2b0b      	cmp	r3, #11
 801ceec:	f200 80c0 	bhi.w	801d070 <cycle+0x1a8>
 801cef0:	a201      	add	r2, pc, #4	; (adr r2, 801cef8 <cycle+0x30>)
 801cef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cef6:	bf00      	nop
 801cef8:	0801d071 	.word	0x0801d071
 801cefc:	0801cf29 	.word	0x0801cf29
 801cf00:	0801d071 	.word	0x0801d071
 801cf04:	0801cff1 	.word	0x0801cff1
 801cf08:	0801d071 	.word	0x0801d071
 801cf0c:	0801d071 	.word	0x0801d071
 801cf10:	0801d071 	.word	0x0801d071
 801cf14:	0801d071 	.word	0x0801d071
 801cf18:	0801d071 	.word	0x0801d071
 801cf1c:	0801d071 	.word	0x0801d071
 801cf20:	0801d071 	.word	0x0801d071
 801cf24:	0801d063 	.word	0x0801d063
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 801cf28:	687b      	ldr	r3, [r7, #4]
 801cf2a:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 801cf2c:	687a      	ldr	r2, [r7, #4]
 801cf2e:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 801cf30:	4616      	mov	r6, r2
 801cf32:	f107 0210 	add.w	r2, r7, #16
 801cf36:	1d15      	adds	r5, r2, #4
 801cf38:	f107 0210 	add.w	r2, r7, #16
 801cf3c:	1c54      	adds	r4, r2, #1
 801cf3e:	f107 010c 	add.w	r1, r7, #12
 801cf42:	f107 0210 	add.w	r2, r7, #16
 801cf46:	1c90      	adds	r0, r2, #2
 801cf48:	9604      	str	r6, [sp, #16]
 801cf4a:	9303      	str	r3, [sp, #12]
 801cf4c:	f107 0310 	add.w	r3, r7, #16
 801cf50:	330c      	adds	r3, #12
 801cf52:	9302      	str	r3, [sp, #8]
 801cf54:	f107 0310 	add.w	r3, r7, #16
 801cf58:	3308      	adds	r3, #8
 801cf5a:	9301      	str	r3, [sp, #4]
 801cf5c:	f107 0320 	add.w	r3, r7, #32
 801cf60:	9300      	str	r3, [sp, #0]
 801cf62:	462b      	mov	r3, r5
 801cf64:	4622      	mov	r2, r4
 801cf66:	f000 fcef 	bl	801d948 <MQTTDeserialize_publish>
 801cf6a:	4603      	mov	r3, r0
 801cf6c:	2b01      	cmp	r3, #1
 801cf6e:	f040 8083 	bne.w	801d078 <cycle+0x1b0>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 801cf72:	68fb      	ldr	r3, [r7, #12]
 801cf74:	b2db      	uxtb	r3, r3
 801cf76:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 801cf78:	f107 0210 	add.w	r2, r7, #16
 801cf7c:	f107 0320 	add.w	r3, r7, #32
 801cf80:	4619      	mov	r1, r3
 801cf82:	6878      	ldr	r0, [r7, #4]
 801cf84:	f7ff feed 	bl	801cd62 <deliverMessage>
            if (msg.qos != QOS0)
 801cf88:	7c3b      	ldrb	r3, [r7, #16]
 801cf8a:	2b00      	cmp	r3, #0
 801cf8c:	d06d      	beq.n	801d06a <cycle+0x1a2>
            {
                if (msg.qos == QOS1)
 801cf8e:	7c3b      	ldrb	r3, [r7, #16]
 801cf90:	2b01      	cmp	r3, #1
 801cf92:	d10c      	bne.n	801cfae <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 801cf94:	687b      	ldr	r3, [r7, #4]
 801cf96:	6918      	ldr	r0, [r3, #16]
 801cf98:	687b      	ldr	r3, [r7, #4]
 801cf9a:	689b      	ldr	r3, [r3, #8]
 801cf9c:	4619      	mov	r1, r3
 801cf9e:	8abb      	ldrh	r3, [r7, #20]
 801cfa0:	9300      	str	r3, [sp, #0]
 801cfa2:	2300      	movs	r3, #0
 801cfa4:	2204      	movs	r2, #4
 801cfa6:	f001 f828 	bl	801dffa <MQTTSerialize_ack>
 801cfaa:	6378      	str	r0, [r7, #52]	; 0x34
 801cfac:	e00e      	b.n	801cfcc <cycle+0x104>
                else if (msg.qos == QOS2)
 801cfae:	7c3b      	ldrb	r3, [r7, #16]
 801cfb0:	2b02      	cmp	r3, #2
 801cfb2:	d10b      	bne.n	801cfcc <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 801cfb4:	687b      	ldr	r3, [r7, #4]
 801cfb6:	6918      	ldr	r0, [r3, #16]
 801cfb8:	687b      	ldr	r3, [r7, #4]
 801cfba:	689b      	ldr	r3, [r3, #8]
 801cfbc:	4619      	mov	r1, r3
 801cfbe:	8abb      	ldrh	r3, [r7, #20]
 801cfc0:	9300      	str	r3, [sp, #0]
 801cfc2:	2300      	movs	r3, #0
 801cfc4:	2205      	movs	r2, #5
 801cfc6:	f001 f818 	bl	801dffa <MQTTSerialize_ack>
 801cfca:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 801cfcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cfce:	2b00      	cmp	r3, #0
 801cfd0:	dc03      	bgt.n	801cfda <cycle+0x112>
                    rc = FAILURE;
 801cfd2:	f04f 33ff 	mov.w	r3, #4294967295
 801cfd6:	633b      	str	r3, [r7, #48]	; 0x30
 801cfd8:	e005      	b.n	801cfe6 <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 801cfda:	683a      	ldr	r2, [r7, #0]
 801cfdc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801cfde:	6878      	ldr	r0, [r7, #4]
 801cfe0:	f7ff fd27 	bl	801ca32 <sendPacket>
 801cfe4:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 801cfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cfe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cfec:	d13d      	bne.n	801d06a <cycle+0x1a2>
                    goto exit; // there was a problem
 801cfee:	e044      	b.n	801d07a <cycle+0x1b2>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801cff0:	687b      	ldr	r3, [r7, #4]
 801cff2:	695c      	ldr	r4, [r3, #20]
 801cff4:	687b      	ldr	r3, [r7, #4]
 801cff6:	68db      	ldr	r3, [r3, #12]
 801cff8:	f107 020a 	add.w	r2, r7, #10
 801cffc:	f107 0109 	add.w	r1, r7, #9
 801d000:	f107 0008 	add.w	r0, r7, #8
 801d004:	9300      	str	r3, [sp, #0]
 801d006:	4623      	mov	r3, r4
 801d008:	f000 fd10 	bl	801da2c <MQTTDeserialize_ack>
 801d00c:	4603      	mov	r3, r0
 801d00e:	2b01      	cmp	r3, #1
 801d010:	d003      	beq.n	801d01a <cycle+0x152>
                rc = FAILURE;
 801d012:	f04f 33ff 	mov.w	r3, #4294967295
 801d016:	633b      	str	r3, [r7, #48]	; 0x30
 801d018:	e01e      	b.n	801d058 <cycle+0x190>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 801d01a:	687b      	ldr	r3, [r7, #4]
 801d01c:	6918      	ldr	r0, [r3, #16]
 801d01e:	687b      	ldr	r3, [r7, #4]
 801d020:	689b      	ldr	r3, [r3, #8]
 801d022:	4619      	mov	r1, r3
 801d024:	897b      	ldrh	r3, [r7, #10]
 801d026:	9300      	str	r3, [sp, #0]
 801d028:	2300      	movs	r3, #0
 801d02a:	2206      	movs	r2, #6
 801d02c:	f000 ffe5 	bl	801dffa <MQTTSerialize_ack>
 801d030:	6378      	str	r0, [r7, #52]	; 0x34
 801d032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d034:	2b00      	cmp	r3, #0
 801d036:	dc03      	bgt.n	801d040 <cycle+0x178>
                rc = FAILURE;
 801d038:	f04f 33ff 	mov.w	r3, #4294967295
 801d03c:	633b      	str	r3, [r7, #48]	; 0x30
 801d03e:	e00b      	b.n	801d058 <cycle+0x190>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 801d040:	683a      	ldr	r2, [r7, #0]
 801d042:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d044:	6878      	ldr	r0, [r7, #4]
 801d046:	f7ff fcf4 	bl	801ca32 <sendPacket>
 801d04a:	6338      	str	r0, [r7, #48]	; 0x30
 801d04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d04e:	2b00      	cmp	r3, #0
 801d050:	d002      	beq.n	801d058 <cycle+0x190>
                rc = FAILURE; // there was a problem
 801d052:	f04f 33ff 	mov.w	r3, #4294967295
 801d056:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 801d058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d05e:	d106      	bne.n	801d06e <cycle+0x1a6>
                goto exit; // there was a problem
 801d060:	e00b      	b.n	801d07a <cycle+0x1b2>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 801d062:	687b      	ldr	r3, [r7, #4]
 801d064:	2200      	movs	r2, #0
 801d066:	771a      	strb	r2, [r3, #28]
            break;
 801d068:	e002      	b.n	801d070 <cycle+0x1a8>
            break;
 801d06a:	bf00      	nop
 801d06c:	e000      	b.n	801d070 <cycle+0x1a8>
            break;
 801d06e:	bf00      	nop
    }
    keepalive(c);
 801d070:	6878      	ldr	r0, [r7, #4]
 801d072:	f7ff fee1 	bl	801ce38 <keepalive>
 801d076:	e000      	b.n	801d07a <cycle+0x1b2>
                goto exit;
 801d078:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 801d07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d07c:	2b00      	cmp	r3, #0
 801d07e:	d101      	bne.n	801d084 <cycle+0x1bc>
        rc = packet_type;
 801d080:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d082:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 801d084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801d086:	4618      	mov	r0, r3
 801d088:	373c      	adds	r7, #60	; 0x3c
 801d08a:	46bd      	mov	sp, r7
 801d08c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d08e:	bf00      	nop

0801d090 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 801d090:	b580      	push	{r7, lr}
 801d092:	b086      	sub	sp, #24
 801d094:	af00      	add	r7, sp, #0
 801d096:	60f8      	str	r0, [r7, #12]
 801d098:	60b9      	str	r1, [r7, #8]
 801d09a:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 801d09c:	f04f 33ff 	mov.w	r3, #4294967295
 801d0a0:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 801d0a2:	6878      	ldr	r0, [r7, #4]
 801d0a4:	f000 f966 	bl	801d374 <TimerIsExpired>
 801d0a8:	4603      	mov	r3, r0
 801d0aa:	2b00      	cmp	r3, #0
 801d0ac:	d109      	bne.n	801d0c2 <waitfor+0x32>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);
 801d0ae:	6879      	ldr	r1, [r7, #4]
 801d0b0:	68f8      	ldr	r0, [r7, #12]
 801d0b2:	f7ff ff09 	bl	801cec8 <cycle>
 801d0b6:	6178      	str	r0, [r7, #20]
 801d0b8:	697a      	ldr	r2, [r7, #20]
 801d0ba:	68bb      	ldr	r3, [r7, #8]
 801d0bc:	429a      	cmp	r2, r3
 801d0be:	d1f0      	bne.n	801d0a2 <waitfor+0x12>
 801d0c0:	e000      	b.n	801d0c4 <waitfor+0x34>
            break; // we timed out
 801d0c2:	bf00      	nop

    return rc;
 801d0c4:	697b      	ldr	r3, [r7, #20]
}
 801d0c6:	4618      	mov	r0, r3
 801d0c8:	3718      	adds	r7, #24
 801d0ca:	46bd      	mov	sp, r7
 801d0cc:	bd80      	pop	{r7, pc}
	...

0801d0d0 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 801d0d0:	b580      	push	{r7, lr}
 801d0d2:	b09e      	sub	sp, #120	; 0x78
 801d0d4:	af00      	add	r7, sp, #0
 801d0d6:	6078      	str	r0, [r7, #4]
 801d0d8:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 801d0da:	f04f 33ff 	mov.w	r3, #4294967295
 801d0de:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 801d0e0:	4a3d      	ldr	r2, [pc, #244]	; (801d1d8 <MQTTConnect+0x108>)
 801d0e2:	f107 0310 	add.w	r3, r7, #16
 801d0e6:	4611      	mov	r1, r2
 801d0e8:	2258      	movs	r2, #88	; 0x58
 801d0ea:	4618      	mov	r0, r3
 801d0ec:	f010 fcc3 	bl	802da76 <memcpy>
    int len = 0;
 801d0f0:	2300      	movs	r3, #0
 801d0f2:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 801d0f4:	687b      	ldr	r3, [r7, #4]
 801d0f6:	6a1b      	ldr	r3, [r3, #32]
 801d0f8:	2b00      	cmp	r3, #0
 801d0fa:	d15d      	bne.n	801d1b8 <MQTTConnect+0xe8>
		goto exit;

    TimerInit(&connect_timer);
 801d0fc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d100:	4618      	mov	r0, r3
 801d102:	f000 f92a 	bl	801d35a <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 801d106:	687b      	ldr	r3, [r7, #4]
 801d108:	685a      	ldr	r2, [r3, #4]
 801d10a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d10e:	4611      	mov	r1, r2
 801d110:	4618      	mov	r0, r3
 801d112:	f000 f945 	bl	801d3a0 <TimerCountdownMS>

    if (options == 0)
 801d116:	683b      	ldr	r3, [r7, #0]
 801d118:	2b00      	cmp	r3, #0
 801d11a:	d102      	bne.n	801d122 <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 801d11c:	f107 0310 	add.w	r3, r7, #16
 801d120:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 801d122:	683b      	ldr	r3, [r7, #0]
 801d124:	8b1b      	ldrh	r3, [r3, #24]
 801d126:	461a      	mov	r2, r3
 801d128:	687b      	ldr	r3, [r7, #4]
 801d12a:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 801d12c:	687b      	ldr	r3, [r7, #4]
 801d12e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	699b      	ldr	r3, [r3, #24]
 801d136:	4619      	mov	r1, r3
 801d138:	4610      	mov	r0, r2
 801d13a:	f000 f945 	bl	801d3c8 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 801d13e:	687b      	ldr	r3, [r7, #4]
 801d140:	6918      	ldr	r0, [r3, #16]
 801d142:	687b      	ldr	r3, [r7, #4]
 801d144:	689b      	ldr	r3, [r3, #8]
 801d146:	683a      	ldr	r2, [r7, #0]
 801d148:	4619      	mov	r1, r3
 801d14a:	f000 fa75 	bl	801d638 <MQTTSerialize_connect>
 801d14e:	6738      	str	r0, [r7, #112]	; 0x70
 801d150:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d152:	2b00      	cmp	r3, #0
 801d154:	dd32      	ble.n	801d1bc <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 801d156:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d15a:	461a      	mov	r2, r3
 801d15c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801d15e:	6878      	ldr	r0, [r7, #4]
 801d160:	f7ff fc67 	bl	801ca32 <sendPacket>
 801d164:	6778      	str	r0, [r7, #116]	; 0x74
 801d166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d168:	2b00      	cmp	r3, #0
 801d16a:	d129      	bne.n	801d1c0 <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 801d16c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d170:	461a      	mov	r2, r3
 801d172:	2102      	movs	r1, #2
 801d174:	6878      	ldr	r0, [r7, #4]
 801d176:	f7ff ff8b 	bl	801d090 <waitfor>
 801d17a:	4603      	mov	r3, r0
 801d17c:	2b02      	cmp	r3, #2
 801d17e:	d117      	bne.n	801d1b0 <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 801d180:	23ff      	movs	r3, #255	; 0xff
 801d182:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 801d184:	2300      	movs	r3, #0
 801d186:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 801d188:	687b      	ldr	r3, [r7, #4]
 801d18a:	695a      	ldr	r2, [r3, #20]
 801d18c:	687b      	ldr	r3, [r7, #4]
 801d18e:	68db      	ldr	r3, [r3, #12]
 801d190:	f107 010f 	add.w	r1, r7, #15
 801d194:	f107 000e 	add.w	r0, r7, #14
 801d198:	f000 fb3a 	bl	801d810 <MQTTDeserialize_connack>
 801d19c:	4603      	mov	r3, r0
 801d19e:	2b01      	cmp	r3, #1
 801d1a0:	d102      	bne.n	801d1a8 <MQTTConnect+0xd8>
            rc = connack_rc;
 801d1a2:	7bfb      	ldrb	r3, [r7, #15]
 801d1a4:	677b      	str	r3, [r7, #116]	; 0x74
 801d1a6:	e00c      	b.n	801d1c2 <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 801d1a8:	f04f 33ff 	mov.w	r3, #4294967295
 801d1ac:	677b      	str	r3, [r7, #116]	; 0x74
 801d1ae:	e008      	b.n	801d1c2 <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 801d1b0:	f04f 33ff 	mov.w	r3, #4294967295
 801d1b4:	677b      	str	r3, [r7, #116]	; 0x74
 801d1b6:	e004      	b.n	801d1c2 <MQTTConnect+0xf2>
		goto exit;
 801d1b8:	bf00      	nop
 801d1ba:	e002      	b.n	801d1c2 <MQTTConnect+0xf2>
        goto exit;
 801d1bc:	bf00      	nop
 801d1be:	e000      	b.n	801d1c2 <MQTTConnect+0xf2>
        goto exit; // there was a problem
 801d1c0:	bf00      	nop

exit:
    if (rc == SUCCESSS)
 801d1c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d1c4:	2b00      	cmp	r3, #0
 801d1c6:	d102      	bne.n	801d1ce <MQTTConnect+0xfe>
        c->isconnected = 1;
 801d1c8:	687b      	ldr	r3, [r7, #4]
 801d1ca:	2201      	movs	r2, #1
 801d1cc:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 801d1ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 801d1d0:	4618      	mov	r0, r3
 801d1d2:	3778      	adds	r7, #120	; 0x78
 801d1d4:	46bd      	mov	sp, r7
 801d1d6:	bd80      	pop	{r7, pc}
 801d1d8:	08032ac0 	.word	0x08032ac0

0801d1dc <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 801d1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d1de:	b097      	sub	sp, #92	; 0x5c
 801d1e0:	af08      	add	r7, sp, #32
 801d1e2:	60f8      	str	r0, [r7, #12]
 801d1e4:	60b9      	str	r1, [r7, #8]
 801d1e6:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 801d1e8:	f04f 33ff 	mov.w	r3, #4294967295
 801d1ec:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 801d1ee:	2300      	movs	r3, #0
 801d1f0:	61fb      	str	r3, [r7, #28]
 801d1f2:	2300      	movs	r3, #0
 801d1f4:	623b      	str	r3, [r7, #32]
 801d1f6:	2300      	movs	r3, #0
 801d1f8:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 801d1fa:	68bb      	ldr	r3, [r7, #8]
 801d1fc:	61fb      	str	r3, [r7, #28]
    int len = 0;
 801d1fe:	2300      	movs	r3, #0
 801d200:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 801d202:	68fb      	ldr	r3, [r7, #12]
 801d204:	6a1b      	ldr	r3, [r3, #32]
 801d206:	2b00      	cmp	r3, #0
 801d208:	f000 809b 	beq.w	801d342 <MQTTPublish+0x166>
		goto exit;

    TimerInit(&timer);
 801d20c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d210:	4618      	mov	r0, r3
 801d212:	f000 f8a2 	bl	801d35a <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801d216:	68fb      	ldr	r3, [r7, #12]
 801d218:	685a      	ldr	r2, [r3, #4]
 801d21a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d21e:	4611      	mov	r1, r2
 801d220:	4618      	mov	r0, r3
 801d222:	f000 f8bd 	bl	801d3a0 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 801d226:	687b      	ldr	r3, [r7, #4]
 801d228:	781b      	ldrb	r3, [r3, #0]
 801d22a:	2b01      	cmp	r3, #1
 801d22c:	d003      	beq.n	801d236 <MQTTPublish+0x5a>
 801d22e:	687b      	ldr	r3, [r7, #4]
 801d230:	781b      	ldrb	r3, [r3, #0]
 801d232:	2b02      	cmp	r3, #2
 801d234:	d106      	bne.n	801d244 <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 801d236:	68f8      	ldr	r0, [r7, #12]
 801d238:	f7ff fbe2 	bl	801ca00 <getNextPacketId>
 801d23c:	4603      	mov	r3, r0
 801d23e:	b29a      	uxth	r2, r3
 801d240:	687b      	ldr	r3, [r7, #4]
 801d242:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 801d244:	68fb      	ldr	r3, [r7, #12]
 801d246:	691b      	ldr	r3, [r3, #16]
 801d248:	603b      	str	r3, [r7, #0]
 801d24a:	68fb      	ldr	r3, [r7, #12]
 801d24c:	689b      	ldr	r3, [r3, #8]
 801d24e:	469c      	mov	ip, r3
 801d250:	687b      	ldr	r3, [r7, #4]
 801d252:	781b      	ldrb	r3, [r3, #0]
 801d254:	469e      	mov	lr, r3
 801d256:	687b      	ldr	r3, [r7, #4]
 801d258:	785d      	ldrb	r5, [r3, #1]
 801d25a:	687b      	ldr	r3, [r7, #4]
 801d25c:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 801d25e:	687b      	ldr	r3, [r7, #4]
 801d260:	689b      	ldr	r3, [r3, #8]
 801d262:	687a      	ldr	r2, [r7, #4]
 801d264:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 801d266:	9206      	str	r2, [sp, #24]
 801d268:	9305      	str	r3, [sp, #20]
 801d26a:	ac02      	add	r4, sp, #8
 801d26c:	f107 031c 	add.w	r3, r7, #28
 801d270:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d274:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801d278:	9601      	str	r6, [sp, #4]
 801d27a:	9500      	str	r5, [sp, #0]
 801d27c:	4673      	mov	r3, lr
 801d27e:	2200      	movs	r2, #0
 801d280:	4661      	mov	r1, ip
 801d282:	6838      	ldr	r0, [r7, #0]
 801d284:	f000 fe43 	bl	801df0e <MQTTSerialize_publish>
 801d288:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 801d28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d28c:	2b00      	cmp	r3, #0
 801d28e:	dd5a      	ble.n	801d346 <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 801d290:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d294:	461a      	mov	r2, r3
 801d296:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d298:	68f8      	ldr	r0, [r7, #12]
 801d29a:	f7ff fbca 	bl	801ca32 <sendPacket>
 801d29e:	6378      	str	r0, [r7, #52]	; 0x34
 801d2a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d2a2:	2b00      	cmp	r3, #0
 801d2a4:	d151      	bne.n	801d34a <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 801d2a6:	687b      	ldr	r3, [r7, #4]
 801d2a8:	781b      	ldrb	r3, [r3, #0]
 801d2aa:	2b01      	cmp	r3, #1
 801d2ac:	d122      	bne.n	801d2f4 <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 801d2ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d2b2:	461a      	mov	r2, r3
 801d2b4:	2104      	movs	r1, #4
 801d2b6:	68f8      	ldr	r0, [r7, #12]
 801d2b8:	f7ff feea 	bl	801d090 <waitfor>
 801d2bc:	4603      	mov	r3, r0
 801d2be:	2b04      	cmp	r3, #4
 801d2c0:	d114      	bne.n	801d2ec <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801d2c2:	68fb      	ldr	r3, [r7, #12]
 801d2c4:	695c      	ldr	r4, [r3, #20]
 801d2c6:	68fb      	ldr	r3, [r7, #12]
 801d2c8:	68db      	ldr	r3, [r3, #12]
 801d2ca:	f107 021a 	add.w	r2, r7, #26
 801d2ce:	f107 0119 	add.w	r1, r7, #25
 801d2d2:	f107 0018 	add.w	r0, r7, #24
 801d2d6:	9300      	str	r3, [sp, #0]
 801d2d8:	4623      	mov	r3, r4
 801d2da:	f000 fba7 	bl	801da2c <MQTTDeserialize_ack>
 801d2de:	4603      	mov	r3, r0
 801d2e0:	2b01      	cmp	r3, #1
 801d2e2:	d035      	beq.n	801d350 <MQTTPublish+0x174>
                rc = FAILURE;
 801d2e4:	f04f 33ff 	mov.w	r3, #4294967295
 801d2e8:	637b      	str	r3, [r7, #52]	; 0x34
 801d2ea:	e031      	b.n	801d350 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 801d2ec:	f04f 33ff 	mov.w	r3, #4294967295
 801d2f0:	637b      	str	r3, [r7, #52]	; 0x34
 801d2f2:	e02d      	b.n	801d350 <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 801d2f4:	687b      	ldr	r3, [r7, #4]
 801d2f6:	781b      	ldrb	r3, [r3, #0]
 801d2f8:	2b02      	cmp	r3, #2
 801d2fa:	d128      	bne.n	801d34e <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 801d2fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d300:	461a      	mov	r2, r3
 801d302:	2107      	movs	r1, #7
 801d304:	68f8      	ldr	r0, [r7, #12]
 801d306:	f7ff fec3 	bl	801d090 <waitfor>
 801d30a:	4603      	mov	r3, r0
 801d30c:	2b07      	cmp	r3, #7
 801d30e:	d114      	bne.n	801d33a <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801d310:	68fb      	ldr	r3, [r7, #12]
 801d312:	695c      	ldr	r4, [r3, #20]
 801d314:	68fb      	ldr	r3, [r7, #12]
 801d316:	68db      	ldr	r3, [r3, #12]
 801d318:	f107 0216 	add.w	r2, r7, #22
 801d31c:	f107 0115 	add.w	r1, r7, #21
 801d320:	f107 0014 	add.w	r0, r7, #20
 801d324:	9300      	str	r3, [sp, #0]
 801d326:	4623      	mov	r3, r4
 801d328:	f000 fb80 	bl	801da2c <MQTTDeserialize_ack>
 801d32c:	4603      	mov	r3, r0
 801d32e:	2b01      	cmp	r3, #1
 801d330:	d00e      	beq.n	801d350 <MQTTPublish+0x174>
                rc = FAILURE;
 801d332:	f04f 33ff 	mov.w	r3, #4294967295
 801d336:	637b      	str	r3, [r7, #52]	; 0x34
 801d338:	e00a      	b.n	801d350 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 801d33a:	f04f 33ff 	mov.w	r3, #4294967295
 801d33e:	637b      	str	r3, [r7, #52]	; 0x34
 801d340:	e006      	b.n	801d350 <MQTTPublish+0x174>
		goto exit;
 801d342:	bf00      	nop
 801d344:	e004      	b.n	801d350 <MQTTPublish+0x174>
        goto exit;
 801d346:	bf00      	nop
 801d348:	e002      	b.n	801d350 <MQTTPublish+0x174>
        goto exit; // there was a problem
 801d34a:	bf00      	nop
 801d34c:	e000      	b.n	801d350 <MQTTPublish+0x174>
    }

exit:
 801d34e:	bf00      	nop
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 801d350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801d352:	4618      	mov	r0, r3
 801d354:	373c      	adds	r7, #60	; 0x3c
 801d356:	46bd      	mov	sp, r7
 801d358:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d35a <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 801d35a:	b480      	push	{r7}
 801d35c:	b083      	sub	sp, #12
 801d35e:	af00      	add	r7, sp, #0
 801d360:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 801d362:	687b      	ldr	r3, [r7, #4]
 801d364:	2200      	movs	r2, #0
 801d366:	605a      	str	r2, [r3, #4]
}
 801d368:	bf00      	nop
 801d36a:	370c      	adds	r7, #12
 801d36c:	46bd      	mov	sp, r7
 801d36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d372:	4770      	bx	lr

0801d374 <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 801d374:	b480      	push	{r7}
 801d376:	b085      	sub	sp, #20
 801d378:	af00      	add	r7, sp, #0
 801d37a:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 801d37c:	687b      	ldr	r3, [r7, #4]
 801d37e:	685a      	ldr	r2, [r3, #4]
 801d380:	4b06      	ldr	r3, [pc, #24]	; (801d39c <TimerIsExpired+0x28>)
 801d382:	681b      	ldr	r3, [r3, #0]
 801d384:	1ad3      	subs	r3, r2, r3
 801d386:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 801d388:	68fb      	ldr	r3, [r7, #12]
 801d38a:	0fdb      	lsrs	r3, r3, #31
 801d38c:	b2db      	uxtb	r3, r3
}
 801d38e:	4618      	mov	r0, r3
 801d390:	3714      	adds	r7, #20
 801d392:	46bd      	mov	sp, r7
 801d394:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d398:	4770      	bx	lr
 801d39a:	bf00      	nop
 801d39c:	200009cc 	.word	0x200009cc

0801d3a0 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 801d3a0:	b480      	push	{r7}
 801d3a2:	b083      	sub	sp, #12
 801d3a4:	af00      	add	r7, sp, #0
 801d3a6:	6078      	str	r0, [r7, #4]
 801d3a8:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 801d3aa:	4b06      	ldr	r3, [pc, #24]	; (801d3c4 <TimerCountdownMS+0x24>)
 801d3ac:	681a      	ldr	r2, [r3, #0]
 801d3ae:	683b      	ldr	r3, [r7, #0]
 801d3b0:	441a      	add	r2, r3
 801d3b2:	687b      	ldr	r3, [r7, #4]
 801d3b4:	605a      	str	r2, [r3, #4]
}
 801d3b6:	bf00      	nop
 801d3b8:	370c      	adds	r7, #12
 801d3ba:	46bd      	mov	sp, r7
 801d3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3c0:	4770      	bx	lr
 801d3c2:	bf00      	nop
 801d3c4:	200009cc 	.word	0x200009cc

0801d3c8 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 801d3c8:	b480      	push	{r7}
 801d3ca:	b083      	sub	sp, #12
 801d3cc:	af00      	add	r7, sp, #0
 801d3ce:	6078      	str	r0, [r7, #4]
 801d3d0:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 801d3d2:	683b      	ldr	r3, [r7, #0]
 801d3d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d3d8:	fb03 f202 	mul.w	r2, r3, r2
 801d3dc:	4b05      	ldr	r3, [pc, #20]	; (801d3f4 <TimerCountdown+0x2c>)
 801d3de:	681b      	ldr	r3, [r3, #0]
 801d3e0:	441a      	add	r2, r3
 801d3e2:	687b      	ldr	r3, [r7, #4]
 801d3e4:	605a      	str	r2, [r3, #4]
}
 801d3e6:	bf00      	nop
 801d3e8:	370c      	adds	r7, #12
 801d3ea:	46bd      	mov	sp, r7
 801d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3f0:	4770      	bx	lr
 801d3f2:	bf00      	nop
 801d3f4:	200009cc 	.word	0x200009cc

0801d3f8 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 801d3f8:	b480      	push	{r7}
 801d3fa:	b085      	sub	sp, #20
 801d3fc:	af00      	add	r7, sp, #0
 801d3fe:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 801d400:	687b      	ldr	r3, [r7, #4]
 801d402:	685a      	ldr	r2, [r3, #4]
 801d404:	4b06      	ldr	r3, [pc, #24]	; (801d420 <TimerLeftMS+0x28>)
 801d406:	681b      	ldr	r3, [r3, #0]
 801d408:	1ad3      	subs	r3, r2, r3
 801d40a:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 801d40c:	68fb      	ldr	r3, [r7, #12]
 801d40e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 801d412:	4618      	mov	r0, r3
 801d414:	3714      	adds	r7, #20
 801d416:	46bd      	mov	sp, r7
 801d418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d41c:	4770      	bx	lr
 801d41e:	bf00      	nop
 801d420:	200009cc 	.word	0x200009cc

0801d424 <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 801d424:	b480      	push	{r7}
 801d426:	b083      	sub	sp, #12
 801d428:	af00      	add	r7, sp, #0
 801d42a:	6078      	str	r0, [r7, #4]
 801d42c:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 801d42e:	687b      	ldr	r3, [r7, #4]
 801d430:	683a      	ldr	r2, [r7, #0]
 801d432:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 801d434:	687b      	ldr	r3, [r7, #4]
 801d436:	4a07      	ldr	r2, [pc, #28]	; (801d454 <NewNetwork+0x30>)
 801d438:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 801d43a:	687b      	ldr	r3, [r7, #4]
 801d43c:	4a06      	ldr	r2, [pc, #24]	; (801d458 <NewNetwork+0x34>)
 801d43e:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 801d440:	687b      	ldr	r3, [r7, #4]
 801d442:	4a06      	ldr	r2, [pc, #24]	; (801d45c <NewNetwork+0x38>)
 801d444:	60da      	str	r2, [r3, #12]
}
 801d446:	bf00      	nop
 801d448:	370c      	adds	r7, #12
 801d44a:	46bd      	mov	sp, r7
 801d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d450:	4770      	bx	lr
 801d452:	bf00      	nop
 801d454:	0801d461 	.word	0x0801d461
 801d458:	0801d4bb 	.word	0x0801d4bb
 801d45c:	0801d503 	.word	0x0801d503

0801d460 <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 801d460:	b580      	push	{r7, lr}
 801d462:	b084      	sub	sp, #16
 801d464:	af00      	add	r7, sp, #0
 801d466:	60f8      	str	r0, [r7, #12]
 801d468:	60b9      	str	r1, [r7, #8]
 801d46a:	607a      	str	r2, [r7, #4]
 801d46c:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 801d46e:	68fb      	ldr	r3, [r7, #12]
 801d470:	681b      	ldr	r3, [r3, #0]
 801d472:	009b      	lsls	r3, r3, #2
 801d474:	3301      	adds	r3, #1
 801d476:	00db      	lsls	r3, r3, #3
 801d478:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801d47c:	4618      	mov	r0, r3
 801d47e:	f7fb f863 	bl	8018548 <WIZCHIP_READ>
 801d482:	4603      	mov	r3, r0
 801d484:	2b17      	cmp	r3, #23
 801d486:	d113      	bne.n	801d4b0 <w5x00_read+0x50>
 801d488:	68fb      	ldr	r3, [r7, #12]
 801d48a:	681b      	ldr	r3, [r3, #0]
 801d48c:	b2db      	uxtb	r3, r3
 801d48e:	4618      	mov	r0, r3
 801d490:	f7fb f9ff 	bl	8018892 <getSn_RX_RSR>
 801d494:	4603      	mov	r3, r0
 801d496:	2b00      	cmp	r3, #0
 801d498:	d00a      	beq.n	801d4b0 <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 801d49a:	68fb      	ldr	r3, [r7, #12]
 801d49c:	681b      	ldr	r3, [r3, #0]
 801d49e:	b2db      	uxtb	r3, r3
 801d4a0:	687a      	ldr	r2, [r7, #4]
 801d4a2:	b292      	uxth	r2, r2
 801d4a4:	68b9      	ldr	r1, [r7, #8]
 801d4a6:	4618      	mov	r0, r3
 801d4a8:	f7fb ff66 	bl	8019378 <recv>
 801d4ac:	4603      	mov	r3, r0
 801d4ae:	e000      	b.n	801d4b2 <w5x00_read+0x52>

	return SOCK_ERROR;
 801d4b0:	2300      	movs	r3, #0
}
 801d4b2:	4618      	mov	r0, r3
 801d4b4:	3710      	adds	r7, #16
 801d4b6:	46bd      	mov	sp, r7
 801d4b8:	bd80      	pop	{r7, pc}

0801d4ba <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 801d4ba:	b580      	push	{r7, lr}
 801d4bc:	b084      	sub	sp, #16
 801d4be:	af00      	add	r7, sp, #0
 801d4c0:	60f8      	str	r0, [r7, #12]
 801d4c2:	60b9      	str	r1, [r7, #8]
 801d4c4:	607a      	str	r2, [r7, #4]
 801d4c6:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 801d4c8:	68fb      	ldr	r3, [r7, #12]
 801d4ca:	681b      	ldr	r3, [r3, #0]
 801d4cc:	009b      	lsls	r3, r3, #2
 801d4ce:	3301      	adds	r3, #1
 801d4d0:	00db      	lsls	r3, r3, #3
 801d4d2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801d4d6:	4618      	mov	r0, r3
 801d4d8:	f7fb f836 	bl	8018548 <WIZCHIP_READ>
 801d4dc:	4603      	mov	r3, r0
 801d4de:	2b17      	cmp	r3, #23
 801d4e0:	d10a      	bne.n	801d4f8 <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 801d4e2:	68fb      	ldr	r3, [r7, #12]
 801d4e4:	681b      	ldr	r3, [r3, #0]
 801d4e6:	b2db      	uxtb	r3, r3
 801d4e8:	687a      	ldr	r2, [r7, #4]
 801d4ea:	b292      	uxth	r2, r2
 801d4ec:	68b9      	ldr	r1, [r7, #8]
 801d4ee:	4618      	mov	r0, r3
 801d4f0:	f7fb fe48 	bl	8019184 <send>
 801d4f4:	4603      	mov	r3, r0
 801d4f6:	e000      	b.n	801d4fa <w5x00_write+0x40>

	return SOCK_ERROR;
 801d4f8:	2300      	movs	r3, #0
}
 801d4fa:	4618      	mov	r0, r3
 801d4fc:	3710      	adds	r7, #16
 801d4fe:	46bd      	mov	sp, r7
 801d500:	bd80      	pop	{r7, pc}

0801d502 <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 801d502:	b580      	push	{r7, lr}
 801d504:	b082      	sub	sp, #8
 801d506:	af00      	add	r7, sp, #0
 801d508:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 801d50a:	687b      	ldr	r3, [r7, #4]
 801d50c:	681b      	ldr	r3, [r3, #0]
 801d50e:	b2db      	uxtb	r3, r3
 801d510:	4618      	mov	r0, r3
 801d512:	f7fb fdc1 	bl	8019098 <disconnect>
}
 801d516:	bf00      	nop
 801d518:	3708      	adds	r7, #8
 801d51a:	46bd      	mov	sp, r7
 801d51c:	bd80      	pop	{r7, pc}

0801d51e <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 801d51e:	b580      	push	{r7, lr}
 801d520:	b086      	sub	sp, #24
 801d522:	af00      	add	r7, sp, #0
 801d524:	60f8      	str	r0, [r7, #12]
 801d526:	60b9      	str	r1, [r7, #8]
 801d528:	4613      	mov	r3, r2
 801d52a:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 801d52c:	f243 0339 	movw	r3, #12345	; 0x3039
 801d530:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 801d532:	68fb      	ldr	r3, [r7, #12]
 801d534:	681b      	ldr	r3, [r3, #0]
 801d536:	b2d8      	uxtb	r0, r3
 801d538:	8afa      	ldrh	r2, [r7, #22]
 801d53a:	2300      	movs	r3, #0
 801d53c:	2101      	movs	r1, #1
 801d53e:	f7fb faf3 	bl	8018b28 <socket>
 801d542:	4603      	mov	r3, r0
 801d544:	461a      	mov	r2, r3
 801d546:	68fb      	ldr	r3, [r7, #12]
 801d548:	681b      	ldr	r3, [r3, #0]
 801d54a:	429a      	cmp	r2, r3
 801d54c:	d001      	beq.n	801d552 <ConnectNetwork+0x34>
		return SOCK_ERROR;
 801d54e:	2300      	movs	r3, #0
 801d550:	e00d      	b.n	801d56e <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 801d552:	68fb      	ldr	r3, [r7, #12]
 801d554:	681b      	ldr	r3, [r3, #0]
 801d556:	b2db      	uxtb	r3, r3
 801d558:	88fa      	ldrh	r2, [r7, #6]
 801d55a:	68b9      	ldr	r1, [r7, #8]
 801d55c:	4618      	mov	r0, r3
 801d55e:	f7fb fcbf 	bl	8018ee0 <connect>
 801d562:	4603      	mov	r3, r0
 801d564:	2b01      	cmp	r3, #1
 801d566:	d001      	beq.n	801d56c <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 801d568:	2300      	movs	r3, #0
 801d56a:	e000      	b.n	801d56e <ConnectNetwork+0x50>

	return SOCK_OK;
 801d56c:	2301      	movs	r3, #1
}
 801d56e:	4618      	mov	r0, r3
 801d570:	3718      	adds	r7, #24
 801d572:	46bd      	mov	sp, r7
 801d574:	bd80      	pop	{r7, pc}

0801d576 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 801d576:	b590      	push	{r4, r7, lr}
 801d578:	b085      	sub	sp, #20
 801d57a:	af00      	add	r7, sp, #0
 801d57c:	6078      	str	r0, [r7, #4]
	int len = 0;
 801d57e:	2300      	movs	r3, #0
 801d580:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 801d582:	687b      	ldr	r3, [r7, #4]
 801d584:	7a1b      	ldrb	r3, [r3, #8]
 801d586:	2b03      	cmp	r3, #3
 801d588:	d102      	bne.n	801d590 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 801d58a:	230c      	movs	r3, #12
 801d58c:	60fb      	str	r3, [r7, #12]
 801d58e:	e005      	b.n	801d59c <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 801d590:	687b      	ldr	r3, [r7, #4]
 801d592:	7a1b      	ldrb	r3, [r3, #8]
 801d594:	2b04      	cmp	r3, #4
 801d596:	d101      	bne.n	801d59c <MQTTSerialize_connectLength+0x26>
		len = 10;
 801d598:	230a      	movs	r3, #10
 801d59a:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 801d59c:	687b      	ldr	r3, [r7, #4]
 801d59e:	330c      	adds	r3, #12
 801d5a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d5a4:	f000 fc43 	bl	801de2e <MQTTstrlen>
 801d5a8:	4603      	mov	r3, r0
 801d5aa:	3302      	adds	r3, #2
 801d5ac:	68fa      	ldr	r2, [r7, #12]
 801d5ae:	4413      	add	r3, r2
 801d5b0:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 801d5b2:	687b      	ldr	r3, [r7, #4]
 801d5b4:	7edb      	ldrb	r3, [r3, #27]
 801d5b6:	2b00      	cmp	r3, #0
 801d5b8:	d013      	beq.n	801d5e2 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 801d5ba:	687b      	ldr	r3, [r7, #4]
 801d5bc:	3324      	adds	r3, #36	; 0x24
 801d5be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d5c2:	f000 fc34 	bl	801de2e <MQTTstrlen>
 801d5c6:	4603      	mov	r3, r0
 801d5c8:	1c9c      	adds	r4, r3, #2
 801d5ca:	687b      	ldr	r3, [r7, #4]
 801d5cc:	3330      	adds	r3, #48	; 0x30
 801d5ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d5d2:	f000 fc2c 	bl	801de2e <MQTTstrlen>
 801d5d6:	4603      	mov	r3, r0
 801d5d8:	4423      	add	r3, r4
 801d5da:	3302      	adds	r3, #2
 801d5dc:	68fa      	ldr	r2, [r7, #12]
 801d5de:	4413      	add	r3, r2
 801d5e0:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 801d5e2:	687b      	ldr	r3, [r7, #4]
 801d5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d5e6:	2b00      	cmp	r3, #0
 801d5e8:	d103      	bne.n	801d5f2 <MQTTSerialize_connectLength+0x7c>
 801d5ea:	687b      	ldr	r3, [r7, #4]
 801d5ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d5ee:	2b00      	cmp	r3, #0
 801d5f0:	d00a      	beq.n	801d608 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 801d5f2:	687b      	ldr	r3, [r7, #4]
 801d5f4:	3340      	adds	r3, #64	; 0x40
 801d5f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d5fa:	f000 fc18 	bl	801de2e <MQTTstrlen>
 801d5fe:	4603      	mov	r3, r0
 801d600:	3302      	adds	r3, #2
 801d602:	68fa      	ldr	r2, [r7, #12]
 801d604:	4413      	add	r3, r2
 801d606:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 801d608:	687b      	ldr	r3, [r7, #4]
 801d60a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d60c:	2b00      	cmp	r3, #0
 801d60e:	d103      	bne.n	801d618 <MQTTSerialize_connectLength+0xa2>
 801d610:	687b      	ldr	r3, [r7, #4]
 801d612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d614:	2b00      	cmp	r3, #0
 801d616:	d00a      	beq.n	801d62e <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 801d618:	687b      	ldr	r3, [r7, #4]
 801d61a:	334c      	adds	r3, #76	; 0x4c
 801d61c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d620:	f000 fc05 	bl	801de2e <MQTTstrlen>
 801d624:	4603      	mov	r3, r0
 801d626:	3302      	adds	r3, #2
 801d628:	68fa      	ldr	r2, [r7, #12]
 801d62a:	4413      	add	r3, r2
 801d62c:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 801d62e:	68fb      	ldr	r3, [r7, #12]
}
 801d630:	4618      	mov	r0, r3
 801d632:	3714      	adds	r7, #20
 801d634:	46bd      	mov	sp, r7
 801d636:	bd90      	pop	{r4, r7, pc}

0801d638 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 801d638:	b580      	push	{r7, lr}
 801d63a:	b08a      	sub	sp, #40	; 0x28
 801d63c:	af00      	add	r7, sp, #0
 801d63e:	60f8      	str	r0, [r7, #12]
 801d640:	60b9      	str	r1, [r7, #8]
 801d642:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 801d644:	68fb      	ldr	r3, [r7, #12]
 801d646:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 801d648:	2300      	movs	r3, #0
 801d64a:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 801d64c:	2300      	movs	r3, #0
 801d64e:	617b      	str	r3, [r7, #20]
	int len = 0;
 801d650:	2300      	movs	r3, #0
 801d652:	623b      	str	r3, [r7, #32]
	int rc = -1;
 801d654:	f04f 33ff 	mov.w	r3, #4294967295
 801d658:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 801d65a:	6878      	ldr	r0, [r7, #4]
 801d65c:	f7ff ff8b 	bl	801d576 <MQTTSerialize_connectLength>
 801d660:	6238      	str	r0, [r7, #32]
 801d662:	6a38      	ldr	r0, [r7, #32]
 801d664:	f000 fa98 	bl	801db98 <MQTTPacket_len>
 801d668:	4602      	mov	r2, r0
 801d66a:	68bb      	ldr	r3, [r7, #8]
 801d66c:	4293      	cmp	r3, r2
 801d66e:	da03      	bge.n	801d678 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801d670:	f06f 0301 	mvn.w	r3, #1
 801d674:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 801d676:	e0c2      	b.n	801d7fe <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 801d678:	2300      	movs	r3, #0
 801d67a:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 801d67c:	7e3b      	ldrb	r3, [r7, #24]
 801d67e:	2201      	movs	r2, #1
 801d680:	f362 1307 	bfi	r3, r2, #4, #4
 801d684:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801d686:	7e3a      	ldrb	r2, [r7, #24]
 801d688:	f107 031c 	add.w	r3, r7, #28
 801d68c:	4611      	mov	r1, r2
 801d68e:	4618      	mov	r0, r3
 801d690:	f000 fb11 	bl	801dcb6 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 801d694:	69fb      	ldr	r3, [r7, #28]
 801d696:	6a39      	ldr	r1, [r7, #32]
 801d698:	4618      	mov	r0, r3
 801d69a:	f000 fa12 	bl	801dac2 <MQTTPacket_encode>
 801d69e:	4602      	mov	r2, r0
 801d6a0:	69fb      	ldr	r3, [r7, #28]
 801d6a2:	4413      	add	r3, r2
 801d6a4:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 801d6a6:	687b      	ldr	r3, [r7, #4]
 801d6a8:	7a1b      	ldrb	r3, [r3, #8]
 801d6aa:	2b04      	cmp	r3, #4
 801d6ac:	d10c      	bne.n	801d6c8 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 801d6ae:	f107 031c 	add.w	r3, r7, #28
 801d6b2:	4955      	ldr	r1, [pc, #340]	; (801d808 <MQTTSerialize_connect+0x1d0>)
 801d6b4:	4618      	mov	r0, r3
 801d6b6:	f000 fb3c 	bl	801dd32 <writeCString>
		writeChar(&ptr, (char) 4);
 801d6ba:	f107 031c 	add.w	r3, r7, #28
 801d6be:	2104      	movs	r1, #4
 801d6c0:	4618      	mov	r0, r3
 801d6c2:	f000 faf8 	bl	801dcb6 <writeChar>
 801d6c6:	e00b      	b.n	801d6e0 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 801d6c8:	f107 031c 	add.w	r3, r7, #28
 801d6cc:	494f      	ldr	r1, [pc, #316]	; (801d80c <MQTTSerialize_connect+0x1d4>)
 801d6ce:	4618      	mov	r0, r3
 801d6d0:	f000 fb2f 	bl	801dd32 <writeCString>
		writeChar(&ptr, (char) 3);
 801d6d4:	f107 031c 	add.w	r3, r7, #28
 801d6d8:	2103      	movs	r1, #3
 801d6da:	4618      	mov	r0, r3
 801d6dc:	f000 faeb 	bl	801dcb6 <writeChar>
	}

	flags.all = 0;
 801d6e0:	2300      	movs	r3, #0
 801d6e2:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 801d6e4:	687b      	ldr	r3, [r7, #4]
 801d6e6:	7e9b      	ldrb	r3, [r3, #26]
 801d6e8:	f003 0301 	and.w	r3, r3, #1
 801d6ec:	b2da      	uxtb	r2, r3
 801d6ee:	7d3b      	ldrb	r3, [r7, #20]
 801d6f0:	f362 0341 	bfi	r3, r2, #1, #1
 801d6f4:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 801d6f6:	687b      	ldr	r3, [r7, #4]
 801d6f8:	7edb      	ldrb	r3, [r3, #27]
 801d6fa:	2b00      	cmp	r3, #0
 801d6fc:	bf14      	ite	ne
 801d6fe:	2301      	movne	r3, #1
 801d700:	2300      	moveq	r3, #0
 801d702:	b2da      	uxtb	r2, r3
 801d704:	7d3b      	ldrb	r3, [r7, #20]
 801d706:	f362 0382 	bfi	r3, r2, #2, #1
 801d70a:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 801d70c:	7d3b      	ldrb	r3, [r7, #20]
 801d70e:	f003 0304 	and.w	r3, r3, #4
 801d712:	b2db      	uxtb	r3, r3
 801d714:	2b00      	cmp	r3, #0
 801d716:	d013      	beq.n	801d740 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 801d718:	687b      	ldr	r3, [r7, #4]
 801d71a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d71e:	f003 0303 	and.w	r3, r3, #3
 801d722:	b2da      	uxtb	r2, r3
 801d724:	7d3b      	ldrb	r3, [r7, #20]
 801d726:	f362 03c4 	bfi	r3, r2, #3, #2
 801d72a:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 801d72c:	687b      	ldr	r3, [r7, #4]
 801d72e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d732:	f003 0301 	and.w	r3, r3, #1
 801d736:	b2da      	uxtb	r2, r3
 801d738:	7d3b      	ldrb	r3, [r7, #20]
 801d73a:	f362 1345 	bfi	r3, r2, #5, #1
 801d73e:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 801d740:	687b      	ldr	r3, [r7, #4]
 801d742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d744:	2b00      	cmp	r3, #0
 801d746:	d103      	bne.n	801d750 <MQTTSerialize_connect+0x118>
 801d748:	687b      	ldr	r3, [r7, #4]
 801d74a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d74c:	2b00      	cmp	r3, #0
 801d74e:	d003      	beq.n	801d758 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 801d750:	7d3b      	ldrb	r3, [r7, #20]
 801d752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d756:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 801d758:	687b      	ldr	r3, [r7, #4]
 801d75a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d75c:	2b00      	cmp	r3, #0
 801d75e:	d103      	bne.n	801d768 <MQTTSerialize_connect+0x130>
 801d760:	687b      	ldr	r3, [r7, #4]
 801d762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d764:	2b00      	cmp	r3, #0
 801d766:	d003      	beq.n	801d770 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 801d768:	7d3b      	ldrb	r3, [r7, #20]
 801d76a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d76e:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 801d770:	7d3a      	ldrb	r2, [r7, #20]
 801d772:	f107 031c 	add.w	r3, r7, #28
 801d776:	4611      	mov	r1, r2
 801d778:	4618      	mov	r0, r3
 801d77a:	f000 fa9c 	bl	801dcb6 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 801d77e:	687b      	ldr	r3, [r7, #4]
 801d780:	8b1b      	ldrh	r3, [r3, #24]
 801d782:	461a      	mov	r2, r3
 801d784:	f107 031c 	add.w	r3, r7, #28
 801d788:	4611      	mov	r1, r2
 801d78a:	4618      	mov	r0, r3
 801d78c:	f000 faa8 	bl	801dce0 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 801d790:	687b      	ldr	r3, [r7, #4]
 801d792:	f107 001c 	add.w	r0, r7, #28
 801d796:	330c      	adds	r3, #12
 801d798:	cb0e      	ldmia	r3, {r1, r2, r3}
 801d79a:	f000 fae9 	bl	801dd70 <writeMQTTString>
	if (options->willFlag)
 801d79e:	687b      	ldr	r3, [r7, #4]
 801d7a0:	7edb      	ldrb	r3, [r3, #27]
 801d7a2:	2b00      	cmp	r3, #0
 801d7a4:	d00d      	beq.n	801d7c2 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 801d7a6:	687b      	ldr	r3, [r7, #4]
 801d7a8:	f107 001c 	add.w	r0, r7, #28
 801d7ac:	3324      	adds	r3, #36	; 0x24
 801d7ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 801d7b0:	f000 fade 	bl	801dd70 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 801d7b4:	687b      	ldr	r3, [r7, #4]
 801d7b6:	f107 001c 	add.w	r0, r7, #28
 801d7ba:	3330      	adds	r3, #48	; 0x30
 801d7bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 801d7be:	f000 fad7 	bl	801dd70 <writeMQTTString>
	}
	if (flags.bits.username)
 801d7c2:	7d3b      	ldrb	r3, [r7, #20]
 801d7c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801d7c8:	b2db      	uxtb	r3, r3
 801d7ca:	2b00      	cmp	r3, #0
 801d7cc:	d006      	beq.n	801d7dc <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 801d7ce:	687b      	ldr	r3, [r7, #4]
 801d7d0:	f107 001c 	add.w	r0, r7, #28
 801d7d4:	3340      	adds	r3, #64	; 0x40
 801d7d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 801d7d8:	f000 faca 	bl	801dd70 <writeMQTTString>
	if (flags.bits.password)
 801d7dc:	7d3b      	ldrb	r3, [r7, #20]
 801d7de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d7e2:	b2db      	uxtb	r3, r3
 801d7e4:	2b00      	cmp	r3, #0
 801d7e6:	d006      	beq.n	801d7f6 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 801d7e8:	687b      	ldr	r3, [r7, #4]
 801d7ea:	f107 001c 	add.w	r0, r7, #28
 801d7ee:	334c      	adds	r3, #76	; 0x4c
 801d7f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 801d7f2:	f000 fabd 	bl	801dd70 <writeMQTTString>

	rc = ptr - buf;
 801d7f6:	69fa      	ldr	r2, [r7, #28]
 801d7f8:	68fb      	ldr	r3, [r7, #12]
 801d7fa:	1ad3      	subs	r3, r2, r3
 801d7fc:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 801d7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801d800:	4618      	mov	r0, r3
 801d802:	3728      	adds	r7, #40	; 0x28
 801d804:	46bd      	mov	sp, r7
 801d806:	bd80      	pop	{r7, pc}
 801d808:	08032b18 	.word	0x08032b18
 801d80c:	08032b20 	.word	0x08032b20

0801d810 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 801d810:	b580      	push	{r7, lr}
 801d812:	b08a      	sub	sp, #40	; 0x28
 801d814:	af00      	add	r7, sp, #0
 801d816:	60f8      	str	r0, [r7, #12]
 801d818:	60b9      	str	r1, [r7, #8]
 801d81a:	607a      	str	r2, [r7, #4]
 801d81c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801d81e:	2300      	movs	r3, #0
 801d820:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801d822:	687b      	ldr	r3, [r7, #4]
 801d824:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801d826:	2300      	movs	r3, #0
 801d828:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801d82a:	2300      	movs	r3, #0
 801d82c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 801d82e:	2300      	movs	r3, #0
 801d830:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801d832:	f107 0318 	add.w	r3, r7, #24
 801d836:	4618      	mov	r0, r3
 801d838:	f000 fa29 	bl	801dc8e <readChar>
 801d83c:	4603      	mov	r3, r0
 801d83e:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 801d840:	7f3b      	ldrb	r3, [r7, #28]
 801d842:	f023 030f 	bic.w	r3, r3, #15
 801d846:	b2db      	uxtb	r3, r3
 801d848:	2b20      	cmp	r3, #32
 801d84a:	d12e      	bne.n	801d8aa <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801d84c:	69bb      	ldr	r3, [r7, #24]
 801d84e:	f107 0214 	add.w	r2, r7, #20
 801d852:	4611      	mov	r1, r2
 801d854:	4618      	mov	r0, r3
 801d856:	f000 f9e9 	bl	801dc2c <MQTTPacket_decodeBuf>
 801d85a:	6278      	str	r0, [r7, #36]	; 0x24
 801d85c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d85e:	69bb      	ldr	r3, [r7, #24]
 801d860:	4413      	add	r3, r2
 801d862:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801d864:	69bb      	ldr	r3, [r7, #24]
 801d866:	697a      	ldr	r2, [r7, #20]
 801d868:	4413      	add	r3, r2
 801d86a:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 801d86c:	69bb      	ldr	r3, [r7, #24]
 801d86e:	6a3a      	ldr	r2, [r7, #32]
 801d870:	1ad3      	subs	r3, r2, r3
 801d872:	2b01      	cmp	r3, #1
 801d874:	dd1b      	ble.n	801d8ae <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 801d876:	f107 0318 	add.w	r3, r7, #24
 801d87a:	4618      	mov	r0, r3
 801d87c:	f000 fa07 	bl	801dc8e <readChar>
 801d880:	4603      	mov	r3, r0
 801d882:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 801d884:	7c3b      	ldrb	r3, [r7, #16]
 801d886:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801d88a:	b2db      	uxtb	r3, r3
 801d88c:	461a      	mov	r2, r3
 801d88e:	68fb      	ldr	r3, [r7, #12]
 801d890:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 801d892:	f107 0318 	add.w	r3, r7, #24
 801d896:	4618      	mov	r0, r3
 801d898:	f000 f9f9 	bl	801dc8e <readChar>
 801d89c:	4603      	mov	r3, r0
 801d89e:	461a      	mov	r2, r3
 801d8a0:	68bb      	ldr	r3, [r7, #8]
 801d8a2:	701a      	strb	r2, [r3, #0]

	rc = 1;
 801d8a4:	2301      	movs	r3, #1
 801d8a6:	627b      	str	r3, [r7, #36]	; 0x24
 801d8a8:	e002      	b.n	801d8b0 <MQTTDeserialize_connack+0xa0>
		goto exit;
 801d8aa:	bf00      	nop
 801d8ac:	e000      	b.n	801d8b0 <MQTTDeserialize_connack+0xa0>
		goto exit;
 801d8ae:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801d8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801d8b2:	4618      	mov	r0, r3
 801d8b4:	3728      	adds	r7, #40	; 0x28
 801d8b6:	46bd      	mov	sp, r7
 801d8b8:	bd80      	pop	{r7, pc}

0801d8ba <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 801d8ba:	b580      	push	{r7, lr}
 801d8bc:	b088      	sub	sp, #32
 801d8be:	af00      	add	r7, sp, #0
 801d8c0:	60f8      	str	r0, [r7, #12]
 801d8c2:	60b9      	str	r1, [r7, #8]
 801d8c4:	4613      	mov	r3, r2
 801d8c6:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 801d8c8:	2300      	movs	r3, #0
 801d8ca:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 801d8cc:	f04f 33ff 	mov.w	r3, #4294967295
 801d8d0:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 801d8d2:	68fb      	ldr	r3, [r7, #12]
 801d8d4:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 801d8d6:	68bb      	ldr	r3, [r7, #8]
 801d8d8:	2b01      	cmp	r3, #1
 801d8da:	dc03      	bgt.n	801d8e4 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801d8dc:	f06f 0301 	mvn.w	r3, #1
 801d8e0:	61fb      	str	r3, [r7, #28]
		goto exit;
 801d8e2:	e01d      	b.n	801d920 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 801d8e4:	2300      	movs	r3, #0
 801d8e6:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 801d8e8:	79fb      	ldrb	r3, [r7, #7]
 801d8ea:	f003 030f 	and.w	r3, r3, #15
 801d8ee:	b2da      	uxtb	r2, r3
 801d8f0:	7e3b      	ldrb	r3, [r7, #24]
 801d8f2:	f362 1307 	bfi	r3, r2, #4, #4
 801d8f6:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801d8f8:	7e3a      	ldrb	r2, [r7, #24]
 801d8fa:	f107 0314 	add.w	r3, r7, #20
 801d8fe:	4611      	mov	r1, r2
 801d900:	4618      	mov	r0, r3
 801d902:	f000 f9d8 	bl	801dcb6 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 801d906:	697b      	ldr	r3, [r7, #20]
 801d908:	2100      	movs	r1, #0
 801d90a:	4618      	mov	r0, r3
 801d90c:	f000 f8d9 	bl	801dac2 <MQTTPacket_encode>
 801d910:	4602      	mov	r2, r0
 801d912:	697b      	ldr	r3, [r7, #20]
 801d914:	4413      	add	r3, r2
 801d916:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 801d918:	697a      	ldr	r2, [r7, #20]
 801d91a:	68fb      	ldr	r3, [r7, #12]
 801d91c:	1ad3      	subs	r3, r2, r3
 801d91e:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801d920:	69fb      	ldr	r3, [r7, #28]
}
 801d922:	4618      	mov	r0, r3
 801d924:	3720      	adds	r7, #32
 801d926:	46bd      	mov	sp, r7
 801d928:	bd80      	pop	{r7, pc}

0801d92a <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 801d92a:	b580      	push	{r7, lr}
 801d92c:	b082      	sub	sp, #8
 801d92e:	af00      	add	r7, sp, #0
 801d930:	6078      	str	r0, [r7, #4]
 801d932:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 801d934:	220c      	movs	r2, #12
 801d936:	6839      	ldr	r1, [r7, #0]
 801d938:	6878      	ldr	r0, [r7, #4]
 801d93a:	f7ff ffbe 	bl	801d8ba <MQTTSerialize_zero>
 801d93e:	4603      	mov	r3, r0
}
 801d940:	4618      	mov	r0, r3
 801d942:	3708      	adds	r7, #8
 801d944:	46bd      	mov	sp, r7
 801d946:	bd80      	pop	{r7, pc}

0801d948 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 801d948:	b580      	push	{r7, lr}
 801d94a:	b08a      	sub	sp, #40	; 0x28
 801d94c:	af00      	add	r7, sp, #0
 801d94e:	60f8      	str	r0, [r7, #12]
 801d950:	60b9      	str	r1, [r7, #8]
 801d952:	607a      	str	r2, [r7, #4]
 801d954:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801d956:	2300      	movs	r3, #0
 801d958:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801d95a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d95c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801d95e:	2300      	movs	r3, #0
 801d960:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801d962:	2300      	movs	r3, #0
 801d964:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 801d966:	2300      	movs	r3, #0
 801d968:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801d96a:	f107 0318 	add.w	r3, r7, #24
 801d96e:	4618      	mov	r0, r3
 801d970:	f000 f98d 	bl	801dc8e <readChar>
 801d974:	4603      	mov	r3, r0
 801d976:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 801d978:	7f3b      	ldrb	r3, [r7, #28]
 801d97a:	f023 030f 	bic.w	r3, r3, #15
 801d97e:	b2db      	uxtb	r3, r3
 801d980:	2b30      	cmp	r3, #48	; 0x30
 801d982:	d14b      	bne.n	801da1c <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 801d984:	7f3b      	ldrb	r3, [r7, #28]
 801d986:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801d98a:	b2db      	uxtb	r3, r3
 801d98c:	461a      	mov	r2, r3
 801d98e:	68fb      	ldr	r3, [r7, #12]
 801d990:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 801d992:	7f3b      	ldrb	r3, [r7, #28]
 801d994:	f3c3 0341 	ubfx	r3, r3, #1, #2
 801d998:	b2db      	uxtb	r3, r3
 801d99a:	461a      	mov	r2, r3
 801d99c:	68bb      	ldr	r3, [r7, #8]
 801d99e:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 801d9a0:	7f3b      	ldrb	r3, [r7, #28]
 801d9a2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801d9a6:	b2db      	uxtb	r3, r3
 801d9a8:	461a      	mov	r2, r3
 801d9aa:	687b      	ldr	r3, [r7, #4]
 801d9ac:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801d9ae:	69bb      	ldr	r3, [r7, #24]
 801d9b0:	f107 0214 	add.w	r2, r7, #20
 801d9b4:	4611      	mov	r1, r2
 801d9b6:	4618      	mov	r0, r3
 801d9b8:	f000 f938 	bl	801dc2c <MQTTPacket_decodeBuf>
 801d9bc:	6278      	str	r0, [r7, #36]	; 0x24
 801d9be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d9c0:	69bb      	ldr	r3, [r7, #24]
 801d9c2:	4413      	add	r3, r2
 801d9c4:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801d9c6:	69bb      	ldr	r3, [r7, #24]
 801d9c8:	697a      	ldr	r2, [r7, #20]
 801d9ca:	4413      	add	r3, r2
 801d9cc:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 801d9ce:	f107 0318 	add.w	r3, r7, #24
 801d9d2:	6a3a      	ldr	r2, [r7, #32]
 801d9d4:	4619      	mov	r1, r3
 801d9d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d9d8:	f000 f9f8 	bl	801ddcc <readMQTTLenString>
 801d9dc:	4603      	mov	r3, r0
 801d9de:	2b00      	cmp	r3, #0
 801d9e0:	d01e      	beq.n	801da20 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 801d9e2:	69bb      	ldr	r3, [r7, #24]
 801d9e4:	6a3a      	ldr	r2, [r7, #32]
 801d9e6:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 801d9e8:	2b00      	cmp	r3, #0
 801d9ea:	db19      	blt.n	801da20 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 801d9ec:	68bb      	ldr	r3, [r7, #8]
 801d9ee:	681b      	ldr	r3, [r3, #0]
 801d9f0:	2b00      	cmp	r3, #0
 801d9f2:	dd08      	ble.n	801da06 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 801d9f4:	f107 0318 	add.w	r3, r7, #24
 801d9f8:	4618      	mov	r0, r3
 801d9fa:	f000 f92d 	bl	801dc58 <readInt>
 801d9fe:	4603      	mov	r3, r0
 801da00:	b29a      	uxth	r2, r3
 801da02:	683b      	ldr	r3, [r7, #0]
 801da04:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 801da06:	69bb      	ldr	r3, [r7, #24]
 801da08:	6a3a      	ldr	r2, [r7, #32]
 801da0a:	1ad2      	subs	r2, r2, r3
 801da0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da0e:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 801da10:	69ba      	ldr	r2, [r7, #24]
 801da12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801da14:	601a      	str	r2, [r3, #0]
	rc = 1;
 801da16:	2301      	movs	r3, #1
 801da18:	627b      	str	r3, [r7, #36]	; 0x24
 801da1a:	e002      	b.n	801da22 <MQTTDeserialize_publish+0xda>
		goto exit;
 801da1c:	bf00      	nop
 801da1e:	e000      	b.n	801da22 <MQTTDeserialize_publish+0xda>
		goto exit;
 801da20:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801da22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801da24:	4618      	mov	r0, r3
 801da26:	3728      	adds	r7, #40	; 0x28
 801da28:	46bd      	mov	sp, r7
 801da2a:	bd80      	pop	{r7, pc}

0801da2c <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 801da2c:	b580      	push	{r7, lr}
 801da2e:	b08a      	sub	sp, #40	; 0x28
 801da30:	af00      	add	r7, sp, #0
 801da32:	60f8      	str	r0, [r7, #12]
 801da34:	60b9      	str	r1, [r7, #8]
 801da36:	607a      	str	r2, [r7, #4]
 801da38:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801da3a:	2300      	movs	r3, #0
 801da3c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801da3e:	683b      	ldr	r3, [r7, #0]
 801da40:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801da42:	2300      	movs	r3, #0
 801da44:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801da46:	2300      	movs	r3, #0
 801da48:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801da4a:	f107 0318 	add.w	r3, r7, #24
 801da4e:	4618      	mov	r0, r3
 801da50:	f000 f91d 	bl	801dc8e <readChar>
 801da54:	4603      	mov	r3, r0
 801da56:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 801da58:	7f3b      	ldrb	r3, [r7, #28]
 801da5a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801da5e:	b2db      	uxtb	r3, r3
 801da60:	461a      	mov	r2, r3
 801da62:	68bb      	ldr	r3, [r7, #8]
 801da64:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 801da66:	7f3b      	ldrb	r3, [r7, #28]
 801da68:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801da6c:	b2db      	uxtb	r3, r3
 801da6e:	461a      	mov	r2, r3
 801da70:	68fb      	ldr	r3, [r7, #12]
 801da72:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801da74:	69bb      	ldr	r3, [r7, #24]
 801da76:	f107 0214 	add.w	r2, r7, #20
 801da7a:	4611      	mov	r1, r2
 801da7c:	4618      	mov	r0, r3
 801da7e:	f000 f8d5 	bl	801dc2c <MQTTPacket_decodeBuf>
 801da82:	6278      	str	r0, [r7, #36]	; 0x24
 801da84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801da86:	69bb      	ldr	r3, [r7, #24]
 801da88:	4413      	add	r3, r2
 801da8a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801da8c:	69bb      	ldr	r3, [r7, #24]
 801da8e:	697a      	ldr	r2, [r7, #20]
 801da90:	4413      	add	r3, r2
 801da92:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 801da94:	69bb      	ldr	r3, [r7, #24]
 801da96:	6a3a      	ldr	r2, [r7, #32]
 801da98:	1ad3      	subs	r3, r2, r3
 801da9a:	2b01      	cmp	r3, #1
 801da9c:	dd0b      	ble.n	801dab6 <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 801da9e:	f107 0318 	add.w	r3, r7, #24
 801daa2:	4618      	mov	r0, r3
 801daa4:	f000 f8d8 	bl	801dc58 <readInt>
 801daa8:	4603      	mov	r3, r0
 801daaa:	b29a      	uxth	r2, r3
 801daac:	687b      	ldr	r3, [r7, #4]
 801daae:	801a      	strh	r2, [r3, #0]

	rc = 1;
 801dab0:	2301      	movs	r3, #1
 801dab2:	627b      	str	r3, [r7, #36]	; 0x24
 801dab4:	e000      	b.n	801dab8 <MQTTDeserialize_ack+0x8c>
		goto exit;
 801dab6:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801dab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801daba:	4618      	mov	r0, r3
 801dabc:	3728      	adds	r7, #40	; 0x28
 801dabe:	46bd      	mov	sp, r7
 801dac0:	bd80      	pop	{r7, pc}

0801dac2 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 801dac2:	b480      	push	{r7}
 801dac4:	b085      	sub	sp, #20
 801dac6:	af00      	add	r7, sp, #0
 801dac8:	6078      	str	r0, [r7, #4]
 801daca:	6039      	str	r1, [r7, #0]
	int rc = 0;
 801dacc:	2300      	movs	r3, #0
 801dace:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 801dad0:	683b      	ldr	r3, [r7, #0]
 801dad2:	425a      	negs	r2, r3
 801dad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dad8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801dadc:	bf58      	it	pl
 801dade:	4253      	negpl	r3, r2
 801dae0:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 801dae2:	683b      	ldr	r3, [r7, #0]
 801dae4:	2b00      	cmp	r3, #0
 801dae6:	da00      	bge.n	801daea <MQTTPacket_encode+0x28>
 801dae8:	337f      	adds	r3, #127	; 0x7f
 801daea:	11db      	asrs	r3, r3, #7
 801daec:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 801daee:	683b      	ldr	r3, [r7, #0]
 801daf0:	2b00      	cmp	r3, #0
 801daf2:	dd03      	ble.n	801dafc <MQTTPacket_encode+0x3a>
			d |= 0x80;
 801daf4:	7afb      	ldrb	r3, [r7, #11]
 801daf6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801dafa:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 801dafc:	68fb      	ldr	r3, [r7, #12]
 801dafe:	1c5a      	adds	r2, r3, #1
 801db00:	60fa      	str	r2, [r7, #12]
 801db02:	461a      	mov	r2, r3
 801db04:	687b      	ldr	r3, [r7, #4]
 801db06:	4413      	add	r3, r2
 801db08:	7afa      	ldrb	r2, [r7, #11]
 801db0a:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 801db0c:	683b      	ldr	r3, [r7, #0]
 801db0e:	2b00      	cmp	r3, #0
 801db10:	dcde      	bgt.n	801dad0 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 801db12:	68fb      	ldr	r3, [r7, #12]
}
 801db14:	4618      	mov	r0, r3
 801db16:	3714      	adds	r7, #20
 801db18:	46bd      	mov	sp, r7
 801db1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db1e:	4770      	bx	lr

0801db20 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 801db20:	b580      	push	{r7, lr}
 801db22:	b086      	sub	sp, #24
 801db24:	af00      	add	r7, sp, #0
 801db26:	6078      	str	r0, [r7, #4]
 801db28:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 801db2a:	2301      	movs	r3, #1
 801db2c:	617b      	str	r3, [r7, #20]
	int len = 0;
 801db2e:	2300      	movs	r3, #0
 801db30:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 801db32:	683b      	ldr	r3, [r7, #0]
 801db34:	2200      	movs	r2, #0
 801db36:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 801db38:	f04f 33ff 	mov.w	r3, #4294967295
 801db3c:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 801db3e:	693b      	ldr	r3, [r7, #16]
 801db40:	3301      	adds	r3, #1
 801db42:	613b      	str	r3, [r7, #16]
 801db44:	693b      	ldr	r3, [r7, #16]
 801db46:	2b04      	cmp	r3, #4
 801db48:	dd03      	ble.n	801db52 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 801db4a:	f04f 33ff 	mov.w	r3, #4294967295
 801db4e:	60fb      	str	r3, [r7, #12]
			goto exit;
 801db50:	e01d      	b.n	801db8e <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 801db52:	f107 020b 	add.w	r2, r7, #11
 801db56:	687b      	ldr	r3, [r7, #4]
 801db58:	2101      	movs	r1, #1
 801db5a:	4610      	mov	r0, r2
 801db5c:	4798      	blx	r3
 801db5e:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 801db60:	68fb      	ldr	r3, [r7, #12]
 801db62:	2b01      	cmp	r3, #1
 801db64:	d112      	bne.n	801db8c <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 801db66:	683b      	ldr	r3, [r7, #0]
 801db68:	681a      	ldr	r2, [r3, #0]
 801db6a:	7afb      	ldrb	r3, [r7, #11]
 801db6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801db70:	6979      	ldr	r1, [r7, #20]
 801db72:	fb01 f303 	mul.w	r3, r1, r3
 801db76:	441a      	add	r2, r3
 801db78:	683b      	ldr	r3, [r7, #0]
 801db7a:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 801db7c:	697b      	ldr	r3, [r7, #20]
 801db7e:	01db      	lsls	r3, r3, #7
 801db80:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 801db82:	7afb      	ldrb	r3, [r7, #11]
 801db84:	b25b      	sxtb	r3, r3
 801db86:	2b00      	cmp	r3, #0
 801db88:	dbd6      	blt.n	801db38 <MQTTPacket_decode+0x18>
exit:
 801db8a:	e000      	b.n	801db8e <MQTTPacket_decode+0x6e>
			goto exit;
 801db8c:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 801db8e:	693b      	ldr	r3, [r7, #16]
}
 801db90:	4618      	mov	r0, r3
 801db92:	3718      	adds	r7, #24
 801db94:	46bd      	mov	sp, r7
 801db96:	bd80      	pop	{r7, pc}

0801db98 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 801db98:	b480      	push	{r7}
 801db9a:	b083      	sub	sp, #12
 801db9c:	af00      	add	r7, sp, #0
 801db9e:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 801dba0:	687b      	ldr	r3, [r7, #4]
 801dba2:	3301      	adds	r3, #1
 801dba4:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 801dba6:	687b      	ldr	r3, [r7, #4]
 801dba8:	2b7f      	cmp	r3, #127	; 0x7f
 801dbaa:	dc03      	bgt.n	801dbb4 <MQTTPacket_len+0x1c>
		rem_len += 1;
 801dbac:	687b      	ldr	r3, [r7, #4]
 801dbae:	3301      	adds	r3, #1
 801dbb0:	607b      	str	r3, [r7, #4]
 801dbb2:	e012      	b.n	801dbda <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 801dbb4:	687b      	ldr	r3, [r7, #4]
 801dbb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801dbba:	da03      	bge.n	801dbc4 <MQTTPacket_len+0x2c>
		rem_len += 2;
 801dbbc:	687b      	ldr	r3, [r7, #4]
 801dbbe:	3302      	adds	r3, #2
 801dbc0:	607b      	str	r3, [r7, #4]
 801dbc2:	e00a      	b.n	801dbda <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 801dbc4:	687b      	ldr	r3, [r7, #4]
 801dbc6:	4a08      	ldr	r2, [pc, #32]	; (801dbe8 <MQTTPacket_len+0x50>)
 801dbc8:	4293      	cmp	r3, r2
 801dbca:	dc03      	bgt.n	801dbd4 <MQTTPacket_len+0x3c>
		rem_len += 3;
 801dbcc:	687b      	ldr	r3, [r7, #4]
 801dbce:	3303      	adds	r3, #3
 801dbd0:	607b      	str	r3, [r7, #4]
 801dbd2:	e002      	b.n	801dbda <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 801dbd4:	687b      	ldr	r3, [r7, #4]
 801dbd6:	3304      	adds	r3, #4
 801dbd8:	607b      	str	r3, [r7, #4]
	return rem_len;
 801dbda:	687b      	ldr	r3, [r7, #4]
}
 801dbdc:	4618      	mov	r0, r3
 801dbde:	370c      	adds	r7, #12
 801dbe0:	46bd      	mov	sp, r7
 801dbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbe6:	4770      	bx	lr
 801dbe8:	001ffffe 	.word	0x001ffffe

0801dbec <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 801dbec:	b480      	push	{r7}
 801dbee:	b085      	sub	sp, #20
 801dbf0:	af00      	add	r7, sp, #0
 801dbf2:	6078      	str	r0, [r7, #4]
 801dbf4:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 801dbf6:	2300      	movs	r3, #0
 801dbf8:	60fb      	str	r3, [r7, #12]
 801dbfa:	e00a      	b.n	801dc12 <bufchar+0x26>
		*c = *bufptr++;
 801dbfc:	4b0a      	ldr	r3, [pc, #40]	; (801dc28 <bufchar+0x3c>)
 801dbfe:	681b      	ldr	r3, [r3, #0]
 801dc00:	1c5a      	adds	r2, r3, #1
 801dc02:	4909      	ldr	r1, [pc, #36]	; (801dc28 <bufchar+0x3c>)
 801dc04:	600a      	str	r2, [r1, #0]
 801dc06:	781a      	ldrb	r2, [r3, #0]
 801dc08:	687b      	ldr	r3, [r7, #4]
 801dc0a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 801dc0c:	68fb      	ldr	r3, [r7, #12]
 801dc0e:	3301      	adds	r3, #1
 801dc10:	60fb      	str	r3, [r7, #12]
 801dc12:	68fa      	ldr	r2, [r7, #12]
 801dc14:	683b      	ldr	r3, [r7, #0]
 801dc16:	429a      	cmp	r2, r3
 801dc18:	dbf0      	blt.n	801dbfc <bufchar+0x10>
	return count;
 801dc1a:	683b      	ldr	r3, [r7, #0]
}
 801dc1c:	4618      	mov	r0, r3
 801dc1e:	3714      	adds	r7, #20
 801dc20:	46bd      	mov	sp, r7
 801dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc26:	4770      	bx	lr
 801dc28:	200009d0 	.word	0x200009d0

0801dc2c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 801dc2c:	b580      	push	{r7, lr}
 801dc2e:	b082      	sub	sp, #8
 801dc30:	af00      	add	r7, sp, #0
 801dc32:	6078      	str	r0, [r7, #4]
 801dc34:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 801dc36:	4a06      	ldr	r2, [pc, #24]	; (801dc50 <MQTTPacket_decodeBuf+0x24>)
 801dc38:	687b      	ldr	r3, [r7, #4]
 801dc3a:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 801dc3c:	6839      	ldr	r1, [r7, #0]
 801dc3e:	4805      	ldr	r0, [pc, #20]	; (801dc54 <MQTTPacket_decodeBuf+0x28>)
 801dc40:	f7ff ff6e 	bl	801db20 <MQTTPacket_decode>
 801dc44:	4603      	mov	r3, r0
}
 801dc46:	4618      	mov	r0, r3
 801dc48:	3708      	adds	r7, #8
 801dc4a:	46bd      	mov	sp, r7
 801dc4c:	bd80      	pop	{r7, pc}
 801dc4e:	bf00      	nop
 801dc50:	200009d0 	.word	0x200009d0
 801dc54:	0801dbed 	.word	0x0801dbed

0801dc58 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 801dc58:	b480      	push	{r7}
 801dc5a:	b085      	sub	sp, #20
 801dc5c:	af00      	add	r7, sp, #0
 801dc5e:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 801dc60:	687b      	ldr	r3, [r7, #4]
 801dc62:	681b      	ldr	r3, [r3, #0]
 801dc64:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 801dc66:	68fb      	ldr	r3, [r7, #12]
 801dc68:	781b      	ldrb	r3, [r3, #0]
 801dc6a:	021b      	lsls	r3, r3, #8
 801dc6c:	68fa      	ldr	r2, [r7, #12]
 801dc6e:	3201      	adds	r2, #1
 801dc70:	7812      	ldrb	r2, [r2, #0]
 801dc72:	4413      	add	r3, r2
 801dc74:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 801dc76:	687b      	ldr	r3, [r7, #4]
 801dc78:	681b      	ldr	r3, [r3, #0]
 801dc7a:	1c9a      	adds	r2, r3, #2
 801dc7c:	687b      	ldr	r3, [r7, #4]
 801dc7e:	601a      	str	r2, [r3, #0]
	return len;
 801dc80:	68bb      	ldr	r3, [r7, #8]
}
 801dc82:	4618      	mov	r0, r3
 801dc84:	3714      	adds	r7, #20
 801dc86:	46bd      	mov	sp, r7
 801dc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc8c:	4770      	bx	lr

0801dc8e <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 801dc8e:	b480      	push	{r7}
 801dc90:	b085      	sub	sp, #20
 801dc92:	af00      	add	r7, sp, #0
 801dc94:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 801dc96:	687b      	ldr	r3, [r7, #4]
 801dc98:	681b      	ldr	r3, [r3, #0]
 801dc9a:	781b      	ldrb	r3, [r3, #0]
 801dc9c:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 801dc9e:	687b      	ldr	r3, [r7, #4]
 801dca0:	681b      	ldr	r3, [r3, #0]
 801dca2:	1c5a      	adds	r2, r3, #1
 801dca4:	687b      	ldr	r3, [r7, #4]
 801dca6:	601a      	str	r2, [r3, #0]
	return c;
 801dca8:	7bfb      	ldrb	r3, [r7, #15]
}
 801dcaa:	4618      	mov	r0, r3
 801dcac:	3714      	adds	r7, #20
 801dcae:	46bd      	mov	sp, r7
 801dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcb4:	4770      	bx	lr

0801dcb6 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 801dcb6:	b480      	push	{r7}
 801dcb8:	b083      	sub	sp, #12
 801dcba:	af00      	add	r7, sp, #0
 801dcbc:	6078      	str	r0, [r7, #4]
 801dcbe:	460b      	mov	r3, r1
 801dcc0:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 801dcc2:	687b      	ldr	r3, [r7, #4]
 801dcc4:	681b      	ldr	r3, [r3, #0]
 801dcc6:	78fa      	ldrb	r2, [r7, #3]
 801dcc8:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 801dcca:	687b      	ldr	r3, [r7, #4]
 801dccc:	681b      	ldr	r3, [r3, #0]
 801dcce:	1c5a      	adds	r2, r3, #1
 801dcd0:	687b      	ldr	r3, [r7, #4]
 801dcd2:	601a      	str	r2, [r3, #0]
}
 801dcd4:	bf00      	nop
 801dcd6:	370c      	adds	r7, #12
 801dcd8:	46bd      	mov	sp, r7
 801dcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcde:	4770      	bx	lr

0801dce0 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 801dce0:	b480      	push	{r7}
 801dce2:	b083      	sub	sp, #12
 801dce4:	af00      	add	r7, sp, #0
 801dce6:	6078      	str	r0, [r7, #4]
 801dce8:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 801dcea:	683b      	ldr	r3, [r7, #0]
 801dcec:	2b00      	cmp	r3, #0
 801dcee:	da00      	bge.n	801dcf2 <writeInt+0x12>
 801dcf0:	33ff      	adds	r3, #255	; 0xff
 801dcf2:	121b      	asrs	r3, r3, #8
 801dcf4:	461a      	mov	r2, r3
 801dcf6:	687b      	ldr	r3, [r7, #4]
 801dcf8:	681b      	ldr	r3, [r3, #0]
 801dcfa:	b2d2      	uxtb	r2, r2
 801dcfc:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 801dcfe:	687b      	ldr	r3, [r7, #4]
 801dd00:	681b      	ldr	r3, [r3, #0]
 801dd02:	1c5a      	adds	r2, r3, #1
 801dd04:	687b      	ldr	r3, [r7, #4]
 801dd06:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 801dd08:	683b      	ldr	r3, [r7, #0]
 801dd0a:	425a      	negs	r2, r3
 801dd0c:	b2db      	uxtb	r3, r3
 801dd0e:	b2d2      	uxtb	r2, r2
 801dd10:	bf58      	it	pl
 801dd12:	4253      	negpl	r3, r2
 801dd14:	687a      	ldr	r2, [r7, #4]
 801dd16:	6812      	ldr	r2, [r2, #0]
 801dd18:	b2db      	uxtb	r3, r3
 801dd1a:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 801dd1c:	687b      	ldr	r3, [r7, #4]
 801dd1e:	681b      	ldr	r3, [r3, #0]
 801dd20:	1c5a      	adds	r2, r3, #1
 801dd22:	687b      	ldr	r3, [r7, #4]
 801dd24:	601a      	str	r2, [r3, #0]
}
 801dd26:	bf00      	nop
 801dd28:	370c      	adds	r7, #12
 801dd2a:	46bd      	mov	sp, r7
 801dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd30:	4770      	bx	lr

0801dd32 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 801dd32:	b580      	push	{r7, lr}
 801dd34:	b084      	sub	sp, #16
 801dd36:	af00      	add	r7, sp, #0
 801dd38:	6078      	str	r0, [r7, #4]
 801dd3a:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 801dd3c:	6838      	ldr	r0, [r7, #0]
 801dd3e:	f7f2 faaf 	bl	80102a0 <strlen>
 801dd42:	4603      	mov	r3, r0
 801dd44:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 801dd46:	68f9      	ldr	r1, [r7, #12]
 801dd48:	6878      	ldr	r0, [r7, #4]
 801dd4a:	f7ff ffc9 	bl	801dce0 <writeInt>
	memcpy(*pptr, string, len);
 801dd4e:	687b      	ldr	r3, [r7, #4]
 801dd50:	681b      	ldr	r3, [r3, #0]
 801dd52:	68fa      	ldr	r2, [r7, #12]
 801dd54:	6839      	ldr	r1, [r7, #0]
 801dd56:	4618      	mov	r0, r3
 801dd58:	f00f fe8d 	bl	802da76 <memcpy>
	*pptr += len;
 801dd5c:	687b      	ldr	r3, [r7, #4]
 801dd5e:	681a      	ldr	r2, [r3, #0]
 801dd60:	68fb      	ldr	r3, [r7, #12]
 801dd62:	441a      	add	r2, r3
 801dd64:	687b      	ldr	r3, [r7, #4]
 801dd66:	601a      	str	r2, [r3, #0]
}
 801dd68:	bf00      	nop
 801dd6a:	3710      	adds	r7, #16
 801dd6c:	46bd      	mov	sp, r7
 801dd6e:	bd80      	pop	{r7, pc}

0801dd70 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 801dd70:	b580      	push	{r7, lr}
 801dd72:	b084      	sub	sp, #16
 801dd74:	af00      	add	r7, sp, #0
 801dd76:	60f8      	str	r0, [r7, #12]
 801dd78:	4638      	mov	r0, r7
 801dd7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 801dd7e:	687b      	ldr	r3, [r7, #4]
 801dd80:	2b00      	cmp	r3, #0
 801dd82:	dd12      	ble.n	801ddaa <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 801dd84:	687b      	ldr	r3, [r7, #4]
 801dd86:	4619      	mov	r1, r3
 801dd88:	68f8      	ldr	r0, [r7, #12]
 801dd8a:	f7ff ffa9 	bl	801dce0 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 801dd8e:	68fb      	ldr	r3, [r7, #12]
 801dd90:	681b      	ldr	r3, [r3, #0]
 801dd92:	68b9      	ldr	r1, [r7, #8]
 801dd94:	687a      	ldr	r2, [r7, #4]
 801dd96:	4618      	mov	r0, r3
 801dd98:	f00f fe6d 	bl	802da76 <memcpy>
		*pptr += mqttstring.lenstring.len;
 801dd9c:	68fb      	ldr	r3, [r7, #12]
 801dd9e:	681b      	ldr	r3, [r3, #0]
 801dda0:	687a      	ldr	r2, [r7, #4]
 801dda2:	441a      	add	r2, r3
 801dda4:	68fb      	ldr	r3, [r7, #12]
 801dda6:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 801dda8:	e00c      	b.n	801ddc4 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 801ddaa:	683b      	ldr	r3, [r7, #0]
 801ddac:	2b00      	cmp	r3, #0
 801ddae:	d005      	beq.n	801ddbc <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 801ddb0:	683b      	ldr	r3, [r7, #0]
 801ddb2:	4619      	mov	r1, r3
 801ddb4:	68f8      	ldr	r0, [r7, #12]
 801ddb6:	f7ff ffbc 	bl	801dd32 <writeCString>
}
 801ddba:	e003      	b.n	801ddc4 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 801ddbc:	2100      	movs	r1, #0
 801ddbe:	68f8      	ldr	r0, [r7, #12]
 801ddc0:	f7ff ff8e 	bl	801dce0 <writeInt>
}
 801ddc4:	bf00      	nop
 801ddc6:	3710      	adds	r7, #16
 801ddc8:	46bd      	mov	sp, r7
 801ddca:	bd80      	pop	{r7, pc}

0801ddcc <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 801ddcc:	b580      	push	{r7, lr}
 801ddce:	b086      	sub	sp, #24
 801ddd0:	af00      	add	r7, sp, #0
 801ddd2:	60f8      	str	r0, [r7, #12]
 801ddd4:	60b9      	str	r1, [r7, #8]
 801ddd6:	607a      	str	r2, [r7, #4]
	int rc = 0;
 801ddd8:	2300      	movs	r3, #0
 801ddda:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 801dddc:	68bb      	ldr	r3, [r7, #8]
 801ddde:	681b      	ldr	r3, [r3, #0]
 801dde0:	687a      	ldr	r2, [r7, #4]
 801dde2:	1ad3      	subs	r3, r2, r3
 801dde4:	2b01      	cmp	r3, #1
 801dde6:	dd1a      	ble.n	801de1e <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 801dde8:	68b8      	ldr	r0, [r7, #8]
 801ddea:	f7ff ff35 	bl	801dc58 <readInt>
 801ddee:	4602      	mov	r2, r0
 801ddf0:	68fb      	ldr	r3, [r7, #12]
 801ddf2:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 801ddf4:	68bb      	ldr	r3, [r7, #8]
 801ddf6:	681b      	ldr	r3, [r3, #0]
 801ddf8:	68fa      	ldr	r2, [r7, #12]
 801ddfa:	6852      	ldr	r2, [r2, #4]
 801ddfc:	4413      	add	r3, r2
 801ddfe:	687a      	ldr	r2, [r7, #4]
 801de00:	429a      	cmp	r2, r3
 801de02:	d30c      	bcc.n	801de1e <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 801de04:	68bb      	ldr	r3, [r7, #8]
 801de06:	681a      	ldr	r2, [r3, #0]
 801de08:	68fb      	ldr	r3, [r7, #12]
 801de0a:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 801de0c:	68bb      	ldr	r3, [r7, #8]
 801de0e:	681b      	ldr	r3, [r3, #0]
 801de10:	68fa      	ldr	r2, [r7, #12]
 801de12:	6852      	ldr	r2, [r2, #4]
 801de14:	441a      	add	r2, r3
 801de16:	68bb      	ldr	r3, [r7, #8]
 801de18:	601a      	str	r2, [r3, #0]
			rc = 1;
 801de1a:	2301      	movs	r3, #1
 801de1c:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 801de1e:	68fb      	ldr	r3, [r7, #12]
 801de20:	2200      	movs	r2, #0
 801de22:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 801de24:	697b      	ldr	r3, [r7, #20]
}
 801de26:	4618      	mov	r0, r3
 801de28:	3718      	adds	r7, #24
 801de2a:	46bd      	mov	sp, r7
 801de2c:	bd80      	pop	{r7, pc}

0801de2e <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 801de2e:	b580      	push	{r7, lr}
 801de30:	b086      	sub	sp, #24
 801de32:	af00      	add	r7, sp, #0
 801de34:	1d3b      	adds	r3, r7, #4
 801de36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 801de3a:	2300      	movs	r3, #0
 801de3c:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 801de3e:	687b      	ldr	r3, [r7, #4]
 801de40:	2b00      	cmp	r3, #0
 801de42:	d006      	beq.n	801de52 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 801de44:	687b      	ldr	r3, [r7, #4]
 801de46:	4618      	mov	r0, r3
 801de48:	f7f2 fa2a 	bl	80102a0 <strlen>
 801de4c:	4603      	mov	r3, r0
 801de4e:	617b      	str	r3, [r7, #20]
 801de50:	e001      	b.n	801de56 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 801de52:	68bb      	ldr	r3, [r7, #8]
 801de54:	617b      	str	r3, [r7, #20]
	return rc;
 801de56:	697b      	ldr	r3, [r7, #20]
}
 801de58:	4618      	mov	r0, r3
 801de5a:	3718      	adds	r7, #24
 801de5c:	46bd      	mov	sp, r7
 801de5e:	bd80      	pop	{r7, pc}

0801de60 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 801de60:	b580      	push	{r7, lr}
 801de62:	b086      	sub	sp, #24
 801de64:	af00      	add	r7, sp, #0
 801de66:	6078      	str	r0, [r7, #4]
 801de68:	6039      	str	r1, [r7, #0]
	int alen = 0,
 801de6a:	2300      	movs	r3, #0
 801de6c:	617b      	str	r3, [r7, #20]
		blen = 0;
 801de6e:	2300      	movs	r3, #0
 801de70:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 801de72:	687b      	ldr	r3, [r7, #4]
 801de74:	681b      	ldr	r3, [r3, #0]
 801de76:	2b00      	cmp	r3, #0
 801de78:	d00a      	beq.n	801de90 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 801de7a:	687b      	ldr	r3, [r7, #4]
 801de7c:	681b      	ldr	r3, [r3, #0]
 801de7e:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 801de80:	687b      	ldr	r3, [r7, #4]
 801de82:	681b      	ldr	r3, [r3, #0]
 801de84:	4618      	mov	r0, r3
 801de86:	f7f2 fa0b 	bl	80102a0 <strlen>
 801de8a:	4603      	mov	r3, r0
 801de8c:	617b      	str	r3, [r7, #20]
 801de8e:	e005      	b.n	801de9c <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 801de90:	687b      	ldr	r3, [r7, #4]
 801de92:	689b      	ldr	r3, [r3, #8]
 801de94:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 801de96:	687b      	ldr	r3, [r7, #4]
 801de98:	685b      	ldr	r3, [r3, #4]
 801de9a:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 801de9c:	6838      	ldr	r0, [r7, #0]
 801de9e:	f7f2 f9ff 	bl	80102a0 <strlen>
 801dea2:	4603      	mov	r3, r0
 801dea4:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 801dea6:	697a      	ldr	r2, [r7, #20]
 801dea8:	68fb      	ldr	r3, [r7, #12]
 801deaa:	429a      	cmp	r2, r3
 801deac:	d10a      	bne.n	801dec4 <MQTTPacket_equals+0x64>
 801deae:	697b      	ldr	r3, [r7, #20]
 801deb0:	461a      	mov	r2, r3
 801deb2:	6839      	ldr	r1, [r7, #0]
 801deb4:	6938      	ldr	r0, [r7, #16]
 801deb6:	f00f fc51 	bl	802d75c <strncmp>
 801deba:	4603      	mov	r3, r0
 801debc:	2b00      	cmp	r3, #0
 801debe:	d101      	bne.n	801dec4 <MQTTPacket_equals+0x64>
 801dec0:	2301      	movs	r3, #1
 801dec2:	e000      	b.n	801dec6 <MQTTPacket_equals+0x66>
 801dec4:	2300      	movs	r3, #0
}
 801dec6:	4618      	mov	r0, r3
 801dec8:	3718      	adds	r7, #24
 801deca:	46bd      	mov	sp, r7
 801decc:	bd80      	pop	{r7, pc}

0801dece <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 801dece:	b580      	push	{r7, lr}
 801ded0:	b086      	sub	sp, #24
 801ded2:	af00      	add	r7, sp, #0
 801ded4:	60f8      	str	r0, [r7, #12]
 801ded6:	4638      	mov	r0, r7
 801ded8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 801dedc:	2300      	movs	r3, #0
 801dede:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 801dee0:	463b      	mov	r3, r7
 801dee2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801dee6:	f7ff ffa2 	bl	801de2e <MQTTstrlen>
 801deea:	4603      	mov	r3, r0
 801deec:	1c9a      	adds	r2, r3, #2
 801deee:	6a3b      	ldr	r3, [r7, #32]
 801def0:	4413      	add	r3, r2
 801def2:	697a      	ldr	r2, [r7, #20]
 801def4:	4413      	add	r3, r2
 801def6:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 801def8:	68fb      	ldr	r3, [r7, #12]
 801defa:	2b00      	cmp	r3, #0
 801defc:	dd02      	ble.n	801df04 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 801defe:	697b      	ldr	r3, [r7, #20]
 801df00:	3302      	adds	r3, #2
 801df02:	617b      	str	r3, [r7, #20]
	return len;
 801df04:	697b      	ldr	r3, [r7, #20]
}
 801df06:	4618      	mov	r0, r3
 801df08:	3718      	adds	r7, #24
 801df0a:	46bd      	mov	sp, r7
 801df0c:	bd80      	pop	{r7, pc}

0801df0e <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 801df0e:	b580      	push	{r7, lr}
 801df10:	b08a      	sub	sp, #40	; 0x28
 801df12:	af02      	add	r7, sp, #8
 801df14:	60f8      	str	r0, [r7, #12]
 801df16:	60b9      	str	r1, [r7, #8]
 801df18:	603b      	str	r3, [r7, #0]
 801df1a:	4613      	mov	r3, r2
 801df1c:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 801df1e:	68fb      	ldr	r3, [r7, #12]
 801df20:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 801df22:	2300      	movs	r3, #0
 801df24:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 801df26:	2300      	movs	r3, #0
 801df28:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 801df2a:	2300      	movs	r3, #0
 801df2c:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 801df2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801df30:	9300      	str	r3, [sp, #0]
 801df32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801df36:	cb0e      	ldmia	r3, {r1, r2, r3}
 801df38:	6838      	ldr	r0, [r7, #0]
 801df3a:	f7ff ffc8 	bl	801dece <MQTTSerialize_publishLength>
 801df3e:	61b8      	str	r0, [r7, #24]
 801df40:	69b8      	ldr	r0, [r7, #24]
 801df42:	f7ff fe29 	bl	801db98 <MQTTPacket_len>
 801df46:	4602      	mov	r2, r0
 801df48:	68bb      	ldr	r3, [r7, #8]
 801df4a:	4293      	cmp	r3, r2
 801df4c:	da03      	bge.n	801df56 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801df4e:	f06f 0301 	mvn.w	r3, #1
 801df52:	61fb      	str	r3, [r7, #28]
		goto exit;
 801df54:	e04c      	b.n	801dff0 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 801df56:	7c3b      	ldrb	r3, [r7, #16]
 801df58:	2203      	movs	r2, #3
 801df5a:	f362 1307 	bfi	r3, r2, #4, #4
 801df5e:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 801df60:	79fb      	ldrb	r3, [r7, #7]
 801df62:	f003 0301 	and.w	r3, r3, #1
 801df66:	b2da      	uxtb	r2, r3
 801df68:	7c3b      	ldrb	r3, [r7, #16]
 801df6a:	f362 03c3 	bfi	r3, r2, #3, #1
 801df6e:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 801df70:	683b      	ldr	r3, [r7, #0]
 801df72:	f003 0303 	and.w	r3, r3, #3
 801df76:	b2da      	uxtb	r2, r3
 801df78:	7c3b      	ldrb	r3, [r7, #16]
 801df7a:	f362 0342 	bfi	r3, r2, #1, #2
 801df7e:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 801df80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801df84:	f003 0301 	and.w	r3, r3, #1
 801df88:	b2da      	uxtb	r2, r3
 801df8a:	7c3b      	ldrb	r3, [r7, #16]
 801df8c:	f362 0300 	bfi	r3, r2, #0, #1
 801df90:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 801df92:	7c3a      	ldrb	r2, [r7, #16]
 801df94:	f107 0314 	add.w	r3, r7, #20
 801df98:	4611      	mov	r1, r2
 801df9a:	4618      	mov	r0, r3
 801df9c:	f7ff fe8b 	bl	801dcb6 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 801dfa0:	697b      	ldr	r3, [r7, #20]
 801dfa2:	69b9      	ldr	r1, [r7, #24]
 801dfa4:	4618      	mov	r0, r3
 801dfa6:	f7ff fd8c 	bl	801dac2 <MQTTPacket_encode>
 801dfaa:	4602      	mov	r2, r0
 801dfac:	697b      	ldr	r3, [r7, #20]
 801dfae:	4413      	add	r3, r2
 801dfb0:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 801dfb2:	f107 0014 	add.w	r0, r7, #20
 801dfb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801dfba:	cb0e      	ldmia	r3, {r1, r2, r3}
 801dfbc:	f7ff fed8 	bl	801dd70 <writeMQTTString>

	if (qos > 0)
 801dfc0:	683b      	ldr	r3, [r7, #0]
 801dfc2:	2b00      	cmp	r3, #0
 801dfc4:	dd06      	ble.n	801dfd4 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 801dfc6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801dfc8:	f107 0314 	add.w	r3, r7, #20
 801dfcc:	4611      	mov	r1, r2
 801dfce:	4618      	mov	r0, r3
 801dfd0:	f7ff fe86 	bl	801dce0 <writeInt>

	memcpy(ptr, payload, payloadlen);
 801dfd4:	697b      	ldr	r3, [r7, #20]
 801dfd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801dfd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801dfda:	4618      	mov	r0, r3
 801dfdc:	f00f fd4b 	bl	802da76 <memcpy>
	ptr += payloadlen;
 801dfe0:	697a      	ldr	r2, [r7, #20]
 801dfe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dfe4:	4413      	add	r3, r2
 801dfe6:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 801dfe8:	697a      	ldr	r2, [r7, #20]
 801dfea:	68fb      	ldr	r3, [r7, #12]
 801dfec:	1ad3      	subs	r3, r2, r3
 801dfee:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801dff0:	69fb      	ldr	r3, [r7, #28]
}
 801dff2:	4618      	mov	r0, r3
 801dff4:	3720      	adds	r7, #32
 801dff6:	46bd      	mov	sp, r7
 801dff8:	bd80      	pop	{r7, pc}

0801dffa <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 801dffa:	b580      	push	{r7, lr}
 801dffc:	b088      	sub	sp, #32
 801dffe:	af00      	add	r7, sp, #0
 801e000:	60f8      	str	r0, [r7, #12]
 801e002:	60b9      	str	r1, [r7, #8]
 801e004:	4611      	mov	r1, r2
 801e006:	461a      	mov	r2, r3
 801e008:	460b      	mov	r3, r1
 801e00a:	71fb      	strb	r3, [r7, #7]
 801e00c:	4613      	mov	r3, r2
 801e00e:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 801e010:	2300      	movs	r3, #0
 801e012:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 801e014:	2300      	movs	r3, #0
 801e016:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 801e018:	68fb      	ldr	r3, [r7, #12]
 801e01a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 801e01c:	68bb      	ldr	r3, [r7, #8]
 801e01e:	2b03      	cmp	r3, #3
 801e020:	dc03      	bgt.n	801e02a <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801e022:	f06f 0301 	mvn.w	r3, #1
 801e026:	61fb      	str	r3, [r7, #28]
		goto exit;
 801e028:	e037      	b.n	801e09a <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 801e02a:	79fb      	ldrb	r3, [r7, #7]
 801e02c:	f003 030f 	and.w	r3, r3, #15
 801e030:	b2da      	uxtb	r2, r3
 801e032:	7e3b      	ldrb	r3, [r7, #24]
 801e034:	f362 1307 	bfi	r3, r2, #4, #4
 801e038:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 801e03a:	79bb      	ldrb	r3, [r7, #6]
 801e03c:	f003 0301 	and.w	r3, r3, #1
 801e040:	b2da      	uxtb	r2, r3
 801e042:	7e3b      	ldrb	r3, [r7, #24]
 801e044:	f362 03c3 	bfi	r3, r2, #3, #1
 801e048:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 801e04a:	79fb      	ldrb	r3, [r7, #7]
 801e04c:	2b06      	cmp	r3, #6
 801e04e:	bf0c      	ite	eq
 801e050:	2301      	moveq	r3, #1
 801e052:	2300      	movne	r3, #0
 801e054:	b2db      	uxtb	r3, r3
 801e056:	f003 0303 	and.w	r3, r3, #3
 801e05a:	b2da      	uxtb	r2, r3
 801e05c:	7e3b      	ldrb	r3, [r7, #24]
 801e05e:	f362 0342 	bfi	r3, r2, #1, #2
 801e062:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801e064:	7e3a      	ldrb	r2, [r7, #24]
 801e066:	f107 0314 	add.w	r3, r7, #20
 801e06a:	4611      	mov	r1, r2
 801e06c:	4618      	mov	r0, r3
 801e06e:	f7ff fe22 	bl	801dcb6 <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 801e072:	697b      	ldr	r3, [r7, #20]
 801e074:	2102      	movs	r1, #2
 801e076:	4618      	mov	r0, r3
 801e078:	f7ff fd23 	bl	801dac2 <MQTTPacket_encode>
 801e07c:	4602      	mov	r2, r0
 801e07e:	697b      	ldr	r3, [r7, #20]
 801e080:	4413      	add	r3, r2
 801e082:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 801e084:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801e086:	f107 0314 	add.w	r3, r7, #20
 801e08a:	4611      	mov	r1, r2
 801e08c:	4618      	mov	r0, r3
 801e08e:	f7ff fe27 	bl	801dce0 <writeInt>
	rc = ptr - buf;
 801e092:	697a      	ldr	r2, [r7, #20]
 801e094:	68fb      	ldr	r3, [r7, #12]
 801e096:	1ad3      	subs	r3, r2, r3
 801e098:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801e09a:	69fb      	ldr	r3, [r7, #28]
}
 801e09c:	4618      	mov	r0, r3
 801e09e:	3720      	adds	r7, #32
 801e0a0:	46bd      	mov	sp, r7
 801e0a2:	bd80      	pop	{r7, pc}

0801e0a4 <unescape_http_url>:
 @brief	convert escape characters(%XX) to ASCII character
 */ 
void unescape_http_url(
	char * url	/**< pointer to be converted ( escape characters )*/
	)
{
 801e0a4:	b590      	push	{r4, r7, lr}
 801e0a6:	b085      	sub	sp, #20
 801e0a8:	af00      	add	r7, sp, #0
 801e0aa:	6078      	str	r0, [r7, #4]
	int x, y;

	for (x = 0, y = 0; url[y]; ++x, ++y) {
 801e0ac:	2300      	movs	r3, #0
 801e0ae:	60fb      	str	r3, [r7, #12]
 801e0b0:	2300      	movs	r3, #0
 801e0b2:	60bb      	str	r3, [r7, #8]
 801e0b4:	e02e      	b.n	801e114 <unescape_http_url+0x70>
		if ((url[x] = url[y]) == '%') {
 801e0b6:	68bb      	ldr	r3, [r7, #8]
 801e0b8:	687a      	ldr	r2, [r7, #4]
 801e0ba:	441a      	add	r2, r3
 801e0bc:	68fb      	ldr	r3, [r7, #12]
 801e0be:	6879      	ldr	r1, [r7, #4]
 801e0c0:	440b      	add	r3, r1
 801e0c2:	7812      	ldrb	r2, [r2, #0]
 801e0c4:	701a      	strb	r2, [r3, #0]
 801e0c6:	781b      	ldrb	r3, [r3, #0]
 801e0c8:	2b25      	cmp	r3, #37	; 0x25
 801e0ca:	d11d      	bne.n	801e108 <unescape_http_url+0x64>
			url[x] = C2D(url[y+1])*0x10+C2D(url[y+2]);
 801e0cc:	68bb      	ldr	r3, [r7, #8]
 801e0ce:	3301      	adds	r3, #1
 801e0d0:	687a      	ldr	r2, [r7, #4]
 801e0d2:	4413      	add	r3, r2
 801e0d4:	781b      	ldrb	r3, [r3, #0]
 801e0d6:	4618      	mov	r0, r3
 801e0d8:	f000 fbf1 	bl	801e8be <C2D>
 801e0dc:	4603      	mov	r3, r0
 801e0de:	011b      	lsls	r3, r3, #4
 801e0e0:	b2dc      	uxtb	r4, r3
 801e0e2:	68bb      	ldr	r3, [r7, #8]
 801e0e4:	3302      	adds	r3, #2
 801e0e6:	687a      	ldr	r2, [r7, #4]
 801e0e8:	4413      	add	r3, r2
 801e0ea:	781b      	ldrb	r3, [r3, #0]
 801e0ec:	4618      	mov	r0, r3
 801e0ee:	f000 fbe6 	bl	801e8be <C2D>
 801e0f2:	4603      	mov	r3, r0
 801e0f4:	4619      	mov	r1, r3
 801e0f6:	68fb      	ldr	r3, [r7, #12]
 801e0f8:	687a      	ldr	r2, [r7, #4]
 801e0fa:	4413      	add	r3, r2
 801e0fc:	1862      	adds	r2, r4, r1
 801e0fe:	b2d2      	uxtb	r2, r2
 801e100:	701a      	strb	r2, [r3, #0]
			y+=2;
 801e102:	68bb      	ldr	r3, [r7, #8]
 801e104:	3302      	adds	r3, #2
 801e106:	60bb      	str	r3, [r7, #8]
	for (x = 0, y = 0; url[y]; ++x, ++y) {
 801e108:	68fb      	ldr	r3, [r7, #12]
 801e10a:	3301      	adds	r3, #1
 801e10c:	60fb      	str	r3, [r7, #12]
 801e10e:	68bb      	ldr	r3, [r7, #8]
 801e110:	3301      	adds	r3, #1
 801e112:	60bb      	str	r3, [r7, #8]
 801e114:	68bb      	ldr	r3, [r7, #8]
 801e116:	687a      	ldr	r2, [r7, #4]
 801e118:	4413      	add	r3, r2
 801e11a:	781b      	ldrb	r3, [r3, #0]
 801e11c:	2b00      	cmp	r3, #0
 801e11e:	d1ca      	bne.n	801e0b6 <unescape_http_url+0x12>
		}
	}
	url[x] = '\0';
 801e120:	68fb      	ldr	r3, [r7, #12]
 801e122:	687a      	ldr	r2, [r7, #4]
 801e124:	4413      	add	r3, r2
 801e126:	2200      	movs	r2, #0
 801e128:	701a      	strb	r2, [r3, #0]
}
 801e12a:	bf00      	nop
 801e12c:	3714      	adds	r7, #20
 801e12e:	46bd      	mov	sp, r7
 801e130:	bd90      	pop	{r4, r7, pc}
	...

0801e134 <make_http_response_head>:
void make_http_response_head(
	char * buf, 	/**< pointer to response header to be made */
	char type, 	/**< response type */
	uint32_t len	/**< size of response header */
	)
{
 801e134:	b580      	push	{r7, lr}
 801e136:	b088      	sub	sp, #32
 801e138:	af00      	add	r7, sp, #0
 801e13a:	60f8      	str	r0, [r7, #12]
 801e13c:	460b      	mov	r3, r1
 801e13e:	607a      	str	r2, [r7, #4]
 801e140:	72fb      	strb	r3, [r7, #11]
	char * head;
	char tmp[10];
			
	/*  file type*/
	if 	(type == PTYPE_HTML) 		head = RES_HTMLHEAD_OK;
 801e142:	7afb      	ldrb	r3, [r7, #11]
 801e144:	2b01      	cmp	r3, #1
 801e146:	d102      	bne.n	801e14e <make_http_response_head+0x1a>
 801e148:	4b42      	ldr	r3, [pc, #264]	; (801e254 <make_http_response_head+0x120>)
 801e14a:	61fb      	str	r3, [r7, #28]
 801e14c:	e061      	b.n	801e212 <make_http_response_head+0xde>
	else if (type == PTYPE_GIF)		head = RES_GIFHEAD_OK;
 801e14e:	7afb      	ldrb	r3, [r7, #11]
 801e150:	2b02      	cmp	r3, #2
 801e152:	d102      	bne.n	801e15a <make_http_response_head+0x26>
 801e154:	4b40      	ldr	r3, [pc, #256]	; (801e258 <make_http_response_head+0x124>)
 801e156:	61fb      	str	r3, [r7, #28]
 801e158:	e05b      	b.n	801e212 <make_http_response_head+0xde>
	else if (type == PTYPE_TEXT)	head = RES_TEXTHEAD_OK;
 801e15a:	7afb      	ldrb	r3, [r7, #11]
 801e15c:	2b03      	cmp	r3, #3
 801e15e:	d102      	bne.n	801e166 <make_http_response_head+0x32>
 801e160:	4b3e      	ldr	r3, [pc, #248]	; (801e25c <make_http_response_head+0x128>)
 801e162:	61fb      	str	r3, [r7, #28]
 801e164:	e055      	b.n	801e212 <make_http_response_head+0xde>
	else if (type == PTYPE_JPEG)	head = RES_JPEGHEAD_OK;
 801e166:	7afb      	ldrb	r3, [r7, #11]
 801e168:	2b04      	cmp	r3, #4
 801e16a:	d102      	bne.n	801e172 <make_http_response_head+0x3e>
 801e16c:	4b3c      	ldr	r3, [pc, #240]	; (801e260 <make_http_response_head+0x12c>)
 801e16e:	61fb      	str	r3, [r7, #28]
 801e170:	e04f      	b.n	801e212 <make_http_response_head+0xde>
	else if (type == PTYPE_FLASH)	head = RES_FLASHHEAD_OK;
 801e172:	7afb      	ldrb	r3, [r7, #11]
 801e174:	2b05      	cmp	r3, #5
 801e176:	d102      	bne.n	801e17e <make_http_response_head+0x4a>
 801e178:	4b3a      	ldr	r3, [pc, #232]	; (801e264 <make_http_response_head+0x130>)
 801e17a:	61fb      	str	r3, [r7, #28]
 801e17c:	e049      	b.n	801e212 <make_http_response_head+0xde>
	else if (type == PTYPE_XML) 	head =  RES_XMLHEAD_OK;
 801e17e:	7afb      	ldrb	r3, [r7, #11]
 801e180:	2b09      	cmp	r3, #9
 801e182:	d102      	bne.n	801e18a <make_http_response_head+0x56>
 801e184:	4b38      	ldr	r3, [pc, #224]	; (801e268 <make_http_response_head+0x134>)
 801e186:	61fb      	str	r3, [r7, #28]
 801e188:	e043      	b.n	801e212 <make_http_response_head+0xde>
	else if (type == PTYPE_CSS) 	head = RES_CSSHEAD_OK;
 801e18a:	7afb      	ldrb	r3, [r7, #11]
 801e18c:	2b0a      	cmp	r3, #10
 801e18e:	d102      	bne.n	801e196 <make_http_response_head+0x62>
 801e190:	4b36      	ldr	r3, [pc, #216]	; (801e26c <make_http_response_head+0x138>)
 801e192:	61fb      	str	r3, [r7, #28]
 801e194:	e03d      	b.n	801e212 <make_http_response_head+0xde>
	else if (type == PTYPE_JSON)	head = RES_JSONHEAD_OK;
 801e196:	7afb      	ldrb	r3, [r7, #11]
 801e198:	2b0c      	cmp	r3, #12
 801e19a:	d102      	bne.n	801e1a2 <make_http_response_head+0x6e>
 801e19c:	4b34      	ldr	r3, [pc, #208]	; (801e270 <make_http_response_head+0x13c>)
 801e19e:	61fb      	str	r3, [r7, #28]
 801e1a0:	e037      	b.n	801e212 <make_http_response_head+0xde>
	else if (type == PTYPE_JS)		head = RES_JSHEAD_OK;
 801e1a2:	7afb      	ldrb	r3, [r7, #11]
 801e1a4:	2b0b      	cmp	r3, #11
 801e1a6:	d102      	bne.n	801e1ae <make_http_response_head+0x7a>
 801e1a8:	4b32      	ldr	r3, [pc, #200]	; (801e274 <make_http_response_head+0x140>)
 801e1aa:	61fb      	str	r3, [r7, #28]
 801e1ac:	e031      	b.n	801e212 <make_http_response_head+0xde>
////	else if (type == PTYPE_CGI)		head = RES_CGIHEAD_OK;
	else if (type == PTYPE_CGI)		head = RES_CGIHEAD_OK_CHANGED;
 801e1ae:	7afb      	ldrb	r3, [r7, #11]
 801e1b0:	2b08      	cmp	r3, #8
 801e1b2:	d102      	bne.n	801e1ba <make_http_response_head+0x86>
 801e1b4:	4b30      	ldr	r3, [pc, #192]	; (801e278 <make_http_response_head+0x144>)
 801e1b6:	61fb      	str	r3, [r7, #28]
 801e1b8:	e02b      	b.n	801e212 <make_http_response_head+0xde>
	else if (type == PTYPE_PNG)		head = RES_PNGHEAD_OK;
 801e1ba:	7afb      	ldrb	r3, [r7, #11]
 801e1bc:	2b0d      	cmp	r3, #13
 801e1be:	d102      	bne.n	801e1c6 <make_http_response_head+0x92>
 801e1c0:	4b2e      	ldr	r3, [pc, #184]	; (801e27c <make_http_response_head+0x148>)
 801e1c2:	61fb      	str	r3, [r7, #28]
 801e1c4:	e025      	b.n	801e212 <make_http_response_head+0xde>
	else if (type == PTYPE_ICO)		head = RES_ICOHEAD_OK;
 801e1c6:	7afb      	ldrb	r3, [r7, #11]
 801e1c8:	2b0e      	cmp	r3, #14
 801e1ca:	d102      	bne.n	801e1d2 <make_http_response_head+0x9e>
 801e1cc:	4b2c      	ldr	r3, [pc, #176]	; (801e280 <make_http_response_head+0x14c>)
 801e1ce:	61fb      	str	r3, [r7, #28]
 801e1d0:	e01f      	b.n	801e212 <make_http_response_head+0xde>
	else if (type == PTYPE_TTF)		head = RES_TTFHEAD_OK;
 801e1d2:	7afb      	ldrb	r3, [r7, #11]
 801e1d4:	2b14      	cmp	r3, #20
 801e1d6:	d102      	bne.n	801e1de <make_http_response_head+0xaa>
 801e1d8:	4b2a      	ldr	r3, [pc, #168]	; (801e284 <make_http_response_head+0x150>)
 801e1da:	61fb      	str	r3, [r7, #28]
 801e1dc:	e019      	b.n	801e212 <make_http_response_head+0xde>
	else if (type == PTYPE_OTF)		head = RES_OTFHEAD_OK;
 801e1de:	7afb      	ldrb	r3, [r7, #11]
 801e1e0:	2b15      	cmp	r3, #21
 801e1e2:	d102      	bne.n	801e1ea <make_http_response_head+0xb6>
 801e1e4:	4b28      	ldr	r3, [pc, #160]	; (801e288 <make_http_response_head+0x154>)
 801e1e6:	61fb      	str	r3, [r7, #28]
 801e1e8:	e013      	b.n	801e212 <make_http_response_head+0xde>
	else if (type == PTYPE_WOFF)	head = RES_WOFFHEAD_OK;
 801e1ea:	7afb      	ldrb	r3, [r7, #11]
 801e1ec:	2b16      	cmp	r3, #22
 801e1ee:	d102      	bne.n	801e1f6 <make_http_response_head+0xc2>
 801e1f0:	4b26      	ldr	r3, [pc, #152]	; (801e28c <make_http_response_head+0x158>)
 801e1f2:	61fb      	str	r3, [r7, #28]
 801e1f4:	e00d      	b.n	801e212 <make_http_response_head+0xde>
	else if (type == PTYPE_EOT)		head = RES_EOTHEAD_OK;
 801e1f6:	7afb      	ldrb	r3, [r7, #11]
 801e1f8:	2b17      	cmp	r3, #23
 801e1fa:	d102      	bne.n	801e202 <make_http_response_head+0xce>
 801e1fc:	4b24      	ldr	r3, [pc, #144]	; (801e290 <make_http_response_head+0x15c>)
 801e1fe:	61fb      	str	r3, [r7, #28]
 801e200:	e007      	b.n	801e212 <make_http_response_head+0xde>
	else if (type == PTYPE_SVG)		head = RES_SVGHEAD_OK;
 801e202:	7afb      	ldrb	r3, [r7, #11]
 801e204:	2b18      	cmp	r3, #24
 801e206:	d102      	bne.n	801e20e <make_http_response_head+0xda>
 801e208:	4b22      	ldr	r3, [pc, #136]	; (801e294 <make_http_response_head+0x160>)
 801e20a:	61fb      	str	r3, [r7, #28]
 801e20c:	e001      	b.n	801e212 <make_http_response_head+0xde>
	{
		head = NULL;
		printf("\r\n\r\n-MAKE HEAD UNKNOWN-\r\n");
	}
#else
	else head = NULL;
 801e20e:	2300      	movs	r3, #0
 801e210:	61fb      	str	r3, [r7, #28]
#endif	

	sprintf(tmp, "%ld", len);
 801e212:	f107 0310 	add.w	r3, r7, #16
 801e216:	687a      	ldr	r2, [r7, #4]
 801e218:	491f      	ldr	r1, [pc, #124]	; (801e298 <make_http_response_head+0x164>)
 801e21a:	4618      	mov	r0, r3
 801e21c:	f00f f906 	bl	802d42c <siprintf>
	strcpy(buf, head);
 801e220:	69f9      	ldr	r1, [r7, #28]
 801e222:	68f8      	ldr	r0, [r7, #12]
 801e224:	f00f fc1f 	bl	802da66 <strcpy>
	strcat(buf, tmp);
 801e228:	f107 0310 	add.w	r3, r7, #16
 801e22c:	4619      	mov	r1, r3
 801e22e:	68f8      	ldr	r0, [r7, #12]
 801e230:	f00f fa54 	bl	802d6dc <strcat>
	strcat(buf, "\r\n\r\n");
 801e234:	68f8      	ldr	r0, [r7, #12]
 801e236:	f7f2 f833 	bl	80102a0 <strlen>
 801e23a:	4603      	mov	r3, r0
 801e23c:	461a      	mov	r2, r3
 801e23e:	68fb      	ldr	r3, [r7, #12]
 801e240:	4413      	add	r3, r2
 801e242:	4a16      	ldr	r2, [pc, #88]	; (801e29c <make_http_response_head+0x168>)
 801e244:	6810      	ldr	r0, [r2, #0]
 801e246:	6018      	str	r0, [r3, #0]
 801e248:	7912      	ldrb	r2, [r2, #4]
 801e24a:	711a      	strb	r2, [r3, #4]
}
 801e24c:	bf00      	nop
 801e24e:	3720      	adds	r7, #32
 801e250:	46bd      	mov	sp, r7
 801e252:	bd80      	pop	{r7, pc}
 801e254:	08032b28 	.word	0x08032b28
 801e258:	08032b7c 	.word	0x08032b7c
 801e25c:	08032bb8 	.word	0x08032bb8
 801e260:	08032bf4 	.word	0x08032bf4
 801e264:	08032c30 	.word	0x08032c30
 801e268:	08032c80 	.word	0x08032c80
 801e26c:	08032cd4 	.word	0x08032cd4
 801e270:	08032d10 	.word	0x08032d10
 801e274:	08032d54 	.word	0x08032d54
 801e278:	08032d9c 	.word	0x08032d9c
 801e27c:	08032df8 	.word	0x08032df8
 801e280:	08032e34 	.word	0x08032e34
 801e284:	08032e74 	.word	0x08032e74
 801e288:	08032ec4 	.word	0x08032ec4
 801e28c:	08032f14 	.word	0x08032f14
 801e290:	08032f5c 	.word	0x08032f5c
 801e294:	08032fac 	.word	0x08032fac
 801e298:	08032fec 	.word	0x08032fec
 801e29c:	08032ff0 	.word	0x08032ff0

0801e2a0 <find_http_uri_type>:
 */ 
void find_http_uri_type(
	uint8_t * type, 	/**< type to be returned */
	uint8_t * buff		/**< file name */
	) 
{
 801e2a0:	b580      	push	{r7, lr}
 801e2a2:	b084      	sub	sp, #16
 801e2a4:	af00      	add	r7, sp, #0
 801e2a6:	6078      	str	r0, [r7, #4]
 801e2a8:	6039      	str	r1, [r7, #0]
	/* Decide type according to extension*/

	char * buf;
	buf = (char *)buff;
 801e2aa:	683b      	ldr	r3, [r7, #0]
 801e2ac:	60fb      	str	r3, [r7, #12]

	if 	(strstr(buf, ".htm")	|| strstr(buf, ".html"))	*type = PTYPE_HTML;
 801e2ae:	499f      	ldr	r1, [pc, #636]	; (801e52c <find_http_uri_type+0x28c>)
 801e2b0:	68f8      	ldr	r0, [r7, #12]
 801e2b2:	f00f fae5 	bl	802d880 <strstr>
 801e2b6:	4603      	mov	r3, r0
 801e2b8:	2b00      	cmp	r3, #0
 801e2ba:	d106      	bne.n	801e2ca <find_http_uri_type+0x2a>
 801e2bc:	499c      	ldr	r1, [pc, #624]	; (801e530 <find_http_uri_type+0x290>)
 801e2be:	68f8      	ldr	r0, [r7, #12]
 801e2c0:	f00f fade 	bl	802d880 <strstr>
 801e2c4:	4603      	mov	r3, r0
 801e2c6:	2b00      	cmp	r3, #0
 801e2c8:	d003      	beq.n	801e2d2 <find_http_uri_type+0x32>
 801e2ca:	687b      	ldr	r3, [r7, #4]
 801e2cc:	2201      	movs	r2, #1
 801e2ce:	701a      	strb	r2, [r3, #0]
 801e2d0:	e127      	b.n	801e522 <find_http_uri_type+0x282>
	else if (strstr(buf, ".gif"))							*type = PTYPE_GIF;
 801e2d2:	4998      	ldr	r1, [pc, #608]	; (801e534 <find_http_uri_type+0x294>)
 801e2d4:	68f8      	ldr	r0, [r7, #12]
 801e2d6:	f00f fad3 	bl	802d880 <strstr>
 801e2da:	4603      	mov	r3, r0
 801e2dc:	2b00      	cmp	r3, #0
 801e2de:	d003      	beq.n	801e2e8 <find_http_uri_type+0x48>
 801e2e0:	687b      	ldr	r3, [r7, #4]
 801e2e2:	2202      	movs	r2, #2
 801e2e4:	701a      	strb	r2, [r3, #0]
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
	else 													*type = PTYPE_ERR;
}
 801e2e6:	e11c      	b.n	801e522 <find_http_uri_type+0x282>
	else if (strstr(buf, ".text") 	|| strstr(buf,".txt"))	*type = PTYPE_TEXT;
 801e2e8:	4993      	ldr	r1, [pc, #588]	; (801e538 <find_http_uri_type+0x298>)
 801e2ea:	68f8      	ldr	r0, [r7, #12]
 801e2ec:	f00f fac8 	bl	802d880 <strstr>
 801e2f0:	4603      	mov	r3, r0
 801e2f2:	2b00      	cmp	r3, #0
 801e2f4:	d106      	bne.n	801e304 <find_http_uri_type+0x64>
 801e2f6:	4991      	ldr	r1, [pc, #580]	; (801e53c <find_http_uri_type+0x29c>)
 801e2f8:	68f8      	ldr	r0, [r7, #12]
 801e2fa:	f00f fac1 	bl	802d880 <strstr>
 801e2fe:	4603      	mov	r3, r0
 801e300:	2b00      	cmp	r3, #0
 801e302:	d003      	beq.n	801e30c <find_http_uri_type+0x6c>
 801e304:	687b      	ldr	r3, [r7, #4]
 801e306:	2203      	movs	r2, #3
 801e308:	701a      	strb	r2, [r3, #0]
 801e30a:	e10a      	b.n	801e522 <find_http_uri_type+0x282>
	else if (strstr(buf, ".jpeg") 	|| strstr(buf,".jpg"))	*type = PTYPE_JPEG;
 801e30c:	498c      	ldr	r1, [pc, #560]	; (801e540 <find_http_uri_type+0x2a0>)
 801e30e:	68f8      	ldr	r0, [r7, #12]
 801e310:	f00f fab6 	bl	802d880 <strstr>
 801e314:	4603      	mov	r3, r0
 801e316:	2b00      	cmp	r3, #0
 801e318:	d106      	bne.n	801e328 <find_http_uri_type+0x88>
 801e31a:	498a      	ldr	r1, [pc, #552]	; (801e544 <find_http_uri_type+0x2a4>)
 801e31c:	68f8      	ldr	r0, [r7, #12]
 801e31e:	f00f faaf 	bl	802d880 <strstr>
 801e322:	4603      	mov	r3, r0
 801e324:	2b00      	cmp	r3, #0
 801e326:	d003      	beq.n	801e330 <find_http_uri_type+0x90>
 801e328:	687b      	ldr	r3, [r7, #4]
 801e32a:	2204      	movs	r2, #4
 801e32c:	701a      	strb	r2, [r3, #0]
 801e32e:	e0f8      	b.n	801e522 <find_http_uri_type+0x282>
	else if (strstr(buf, ".swf")) 							*type = PTYPE_FLASH;
 801e330:	4985      	ldr	r1, [pc, #532]	; (801e548 <find_http_uri_type+0x2a8>)
 801e332:	68f8      	ldr	r0, [r7, #12]
 801e334:	f00f faa4 	bl	802d880 <strstr>
 801e338:	4603      	mov	r3, r0
 801e33a:	2b00      	cmp	r3, #0
 801e33c:	d003      	beq.n	801e346 <find_http_uri_type+0xa6>
 801e33e:	687b      	ldr	r3, [r7, #4]
 801e340:	2205      	movs	r2, #5
 801e342:	701a      	strb	r2, [r3, #0]
}
 801e344:	e0ed      	b.n	801e522 <find_http_uri_type+0x282>
	else if (strstr(buf, ".cgi") 	|| strstr(buf,".CGI"))	*type = PTYPE_CGI;
 801e346:	4981      	ldr	r1, [pc, #516]	; (801e54c <find_http_uri_type+0x2ac>)
 801e348:	68f8      	ldr	r0, [r7, #12]
 801e34a:	f00f fa99 	bl	802d880 <strstr>
 801e34e:	4603      	mov	r3, r0
 801e350:	2b00      	cmp	r3, #0
 801e352:	d106      	bne.n	801e362 <find_http_uri_type+0xc2>
 801e354:	497e      	ldr	r1, [pc, #504]	; (801e550 <find_http_uri_type+0x2b0>)
 801e356:	68f8      	ldr	r0, [r7, #12]
 801e358:	f00f fa92 	bl	802d880 <strstr>
 801e35c:	4603      	mov	r3, r0
 801e35e:	2b00      	cmp	r3, #0
 801e360:	d003      	beq.n	801e36a <find_http_uri_type+0xca>
 801e362:	687b      	ldr	r3, [r7, #4]
 801e364:	2208      	movs	r2, #8
 801e366:	701a      	strb	r2, [r3, #0]
 801e368:	e0db      	b.n	801e522 <find_http_uri_type+0x282>
	else if (strstr(buf, ".json") 	|| strstr(buf,".JSON"))	*type = PTYPE_JSON;
 801e36a:	497a      	ldr	r1, [pc, #488]	; (801e554 <find_http_uri_type+0x2b4>)
 801e36c:	68f8      	ldr	r0, [r7, #12]
 801e36e:	f00f fa87 	bl	802d880 <strstr>
 801e372:	4603      	mov	r3, r0
 801e374:	2b00      	cmp	r3, #0
 801e376:	d106      	bne.n	801e386 <find_http_uri_type+0xe6>
 801e378:	4977      	ldr	r1, [pc, #476]	; (801e558 <find_http_uri_type+0x2b8>)
 801e37a:	68f8      	ldr	r0, [r7, #12]
 801e37c:	f00f fa80 	bl	802d880 <strstr>
 801e380:	4603      	mov	r3, r0
 801e382:	2b00      	cmp	r3, #0
 801e384:	d003      	beq.n	801e38e <find_http_uri_type+0xee>
 801e386:	687b      	ldr	r3, [r7, #4]
 801e388:	220c      	movs	r2, #12
 801e38a:	701a      	strb	r2, [r3, #0]
 801e38c:	e0c9      	b.n	801e522 <find_http_uri_type+0x282>
	else if (strstr(buf, ".js") 	|| strstr(buf,".JS"))	*type = PTYPE_JS;
 801e38e:	4973      	ldr	r1, [pc, #460]	; (801e55c <find_http_uri_type+0x2bc>)
 801e390:	68f8      	ldr	r0, [r7, #12]
 801e392:	f00f fa75 	bl	802d880 <strstr>
 801e396:	4603      	mov	r3, r0
 801e398:	2b00      	cmp	r3, #0
 801e39a:	d106      	bne.n	801e3aa <find_http_uri_type+0x10a>
 801e39c:	4970      	ldr	r1, [pc, #448]	; (801e560 <find_http_uri_type+0x2c0>)
 801e39e:	68f8      	ldr	r0, [r7, #12]
 801e3a0:	f00f fa6e 	bl	802d880 <strstr>
 801e3a4:	4603      	mov	r3, r0
 801e3a6:	2b00      	cmp	r3, #0
 801e3a8:	d003      	beq.n	801e3b2 <find_http_uri_type+0x112>
 801e3aa:	687b      	ldr	r3, [r7, #4]
 801e3ac:	220b      	movs	r2, #11
 801e3ae:	701a      	strb	r2, [r3, #0]
 801e3b0:	e0b7      	b.n	801e522 <find_http_uri_type+0x282>
	else if (strstr(buf, ".CGI") 	|| strstr(buf,".cgi"))	*type = PTYPE_CGI;
 801e3b2:	4967      	ldr	r1, [pc, #412]	; (801e550 <find_http_uri_type+0x2b0>)
 801e3b4:	68f8      	ldr	r0, [r7, #12]
 801e3b6:	f00f fa63 	bl	802d880 <strstr>
 801e3ba:	4603      	mov	r3, r0
 801e3bc:	2b00      	cmp	r3, #0
 801e3be:	d106      	bne.n	801e3ce <find_http_uri_type+0x12e>
 801e3c0:	4962      	ldr	r1, [pc, #392]	; (801e54c <find_http_uri_type+0x2ac>)
 801e3c2:	68f8      	ldr	r0, [r7, #12]
 801e3c4:	f00f fa5c 	bl	802d880 <strstr>
 801e3c8:	4603      	mov	r3, r0
 801e3ca:	2b00      	cmp	r3, #0
 801e3cc:	d003      	beq.n	801e3d6 <find_http_uri_type+0x136>
 801e3ce:	687b      	ldr	r3, [r7, #4]
 801e3d0:	2208      	movs	r2, #8
 801e3d2:	701a      	strb	r2, [r3, #0]
 801e3d4:	e0a5      	b.n	801e522 <find_http_uri_type+0x282>
	else if (strstr(buf, ".xml") 	|| strstr(buf,".XML"))	*type = PTYPE_XML;
 801e3d6:	4963      	ldr	r1, [pc, #396]	; (801e564 <find_http_uri_type+0x2c4>)
 801e3d8:	68f8      	ldr	r0, [r7, #12]
 801e3da:	f00f fa51 	bl	802d880 <strstr>
 801e3de:	4603      	mov	r3, r0
 801e3e0:	2b00      	cmp	r3, #0
 801e3e2:	d106      	bne.n	801e3f2 <find_http_uri_type+0x152>
 801e3e4:	4960      	ldr	r1, [pc, #384]	; (801e568 <find_http_uri_type+0x2c8>)
 801e3e6:	68f8      	ldr	r0, [r7, #12]
 801e3e8:	f00f fa4a 	bl	802d880 <strstr>
 801e3ec:	4603      	mov	r3, r0
 801e3ee:	2b00      	cmp	r3, #0
 801e3f0:	d003      	beq.n	801e3fa <find_http_uri_type+0x15a>
 801e3f2:	687b      	ldr	r3, [r7, #4]
 801e3f4:	2209      	movs	r2, #9
 801e3f6:	701a      	strb	r2, [r3, #0]
 801e3f8:	e093      	b.n	801e522 <find_http_uri_type+0x282>
	else if (strstr(buf, ".css") 	|| strstr(buf,".CSS"))	*type = PTYPE_CSS;
 801e3fa:	495c      	ldr	r1, [pc, #368]	; (801e56c <find_http_uri_type+0x2cc>)
 801e3fc:	68f8      	ldr	r0, [r7, #12]
 801e3fe:	f00f fa3f 	bl	802d880 <strstr>
 801e402:	4603      	mov	r3, r0
 801e404:	2b00      	cmp	r3, #0
 801e406:	d106      	bne.n	801e416 <find_http_uri_type+0x176>
 801e408:	4959      	ldr	r1, [pc, #356]	; (801e570 <find_http_uri_type+0x2d0>)
 801e40a:	68f8      	ldr	r0, [r7, #12]
 801e40c:	f00f fa38 	bl	802d880 <strstr>
 801e410:	4603      	mov	r3, r0
 801e412:	2b00      	cmp	r3, #0
 801e414:	d003      	beq.n	801e41e <find_http_uri_type+0x17e>
 801e416:	687b      	ldr	r3, [r7, #4]
 801e418:	220a      	movs	r2, #10
 801e41a:	701a      	strb	r2, [r3, #0]
 801e41c:	e081      	b.n	801e522 <find_http_uri_type+0x282>
	else if (strstr(buf, ".png") 	|| strstr(buf,".PNG"))	*type = PTYPE_PNG;
 801e41e:	4955      	ldr	r1, [pc, #340]	; (801e574 <find_http_uri_type+0x2d4>)
 801e420:	68f8      	ldr	r0, [r7, #12]
 801e422:	f00f fa2d 	bl	802d880 <strstr>
 801e426:	4603      	mov	r3, r0
 801e428:	2b00      	cmp	r3, #0
 801e42a:	d106      	bne.n	801e43a <find_http_uri_type+0x19a>
 801e42c:	4952      	ldr	r1, [pc, #328]	; (801e578 <find_http_uri_type+0x2d8>)
 801e42e:	68f8      	ldr	r0, [r7, #12]
 801e430:	f00f fa26 	bl	802d880 <strstr>
 801e434:	4603      	mov	r3, r0
 801e436:	2b00      	cmp	r3, #0
 801e438:	d003      	beq.n	801e442 <find_http_uri_type+0x1a2>
 801e43a:	687b      	ldr	r3, [r7, #4]
 801e43c:	220d      	movs	r2, #13
 801e43e:	701a      	strb	r2, [r3, #0]
 801e440:	e06f      	b.n	801e522 <find_http_uri_type+0x282>
	else if (strstr(buf, ".ico") 	|| strstr(buf,".ICO"))	*type = PTYPE_ICO;
 801e442:	494e      	ldr	r1, [pc, #312]	; (801e57c <find_http_uri_type+0x2dc>)
 801e444:	68f8      	ldr	r0, [r7, #12]
 801e446:	f00f fa1b 	bl	802d880 <strstr>
 801e44a:	4603      	mov	r3, r0
 801e44c:	2b00      	cmp	r3, #0
 801e44e:	d106      	bne.n	801e45e <find_http_uri_type+0x1be>
 801e450:	494b      	ldr	r1, [pc, #300]	; (801e580 <find_http_uri_type+0x2e0>)
 801e452:	68f8      	ldr	r0, [r7, #12]
 801e454:	f00f fa14 	bl	802d880 <strstr>
 801e458:	4603      	mov	r3, r0
 801e45a:	2b00      	cmp	r3, #0
 801e45c:	d003      	beq.n	801e466 <find_http_uri_type+0x1c6>
 801e45e:	687b      	ldr	r3, [r7, #4]
 801e460:	220e      	movs	r2, #14
 801e462:	701a      	strb	r2, [r3, #0]
 801e464:	e05d      	b.n	801e522 <find_http_uri_type+0x282>
	else if (strstr(buf, ".ttf") 	|| strstr(buf,".TTF"))	*type = PTYPE_TTF;
 801e466:	4947      	ldr	r1, [pc, #284]	; (801e584 <find_http_uri_type+0x2e4>)
 801e468:	68f8      	ldr	r0, [r7, #12]
 801e46a:	f00f fa09 	bl	802d880 <strstr>
 801e46e:	4603      	mov	r3, r0
 801e470:	2b00      	cmp	r3, #0
 801e472:	d106      	bne.n	801e482 <find_http_uri_type+0x1e2>
 801e474:	4944      	ldr	r1, [pc, #272]	; (801e588 <find_http_uri_type+0x2e8>)
 801e476:	68f8      	ldr	r0, [r7, #12]
 801e478:	f00f fa02 	bl	802d880 <strstr>
 801e47c:	4603      	mov	r3, r0
 801e47e:	2b00      	cmp	r3, #0
 801e480:	d003      	beq.n	801e48a <find_http_uri_type+0x1ea>
 801e482:	687b      	ldr	r3, [r7, #4]
 801e484:	2214      	movs	r2, #20
 801e486:	701a      	strb	r2, [r3, #0]
 801e488:	e04b      	b.n	801e522 <find_http_uri_type+0x282>
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
 801e48a:	4940      	ldr	r1, [pc, #256]	; (801e58c <find_http_uri_type+0x2ec>)
 801e48c:	68f8      	ldr	r0, [r7, #12]
 801e48e:	f00f f9f7 	bl	802d880 <strstr>
 801e492:	4603      	mov	r3, r0
 801e494:	2b00      	cmp	r3, #0
 801e496:	d106      	bne.n	801e4a6 <find_http_uri_type+0x206>
 801e498:	493d      	ldr	r1, [pc, #244]	; (801e590 <find_http_uri_type+0x2f0>)
 801e49a:	68f8      	ldr	r0, [r7, #12]
 801e49c:	f00f f9f0 	bl	802d880 <strstr>
 801e4a0:	4603      	mov	r3, r0
 801e4a2:	2b00      	cmp	r3, #0
 801e4a4:	d003      	beq.n	801e4ae <find_http_uri_type+0x20e>
 801e4a6:	687b      	ldr	r3, [r7, #4]
 801e4a8:	2215      	movs	r2, #21
 801e4aa:	701a      	strb	r2, [r3, #0]
 801e4ac:	e039      	b.n	801e522 <find_http_uri_type+0x282>
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
 801e4ae:	4939      	ldr	r1, [pc, #228]	; (801e594 <find_http_uri_type+0x2f4>)
 801e4b0:	68f8      	ldr	r0, [r7, #12]
 801e4b2:	f00f f9e5 	bl	802d880 <strstr>
 801e4b6:	4603      	mov	r3, r0
 801e4b8:	2b00      	cmp	r3, #0
 801e4ba:	d106      	bne.n	801e4ca <find_http_uri_type+0x22a>
 801e4bc:	4936      	ldr	r1, [pc, #216]	; (801e598 <find_http_uri_type+0x2f8>)
 801e4be:	68f8      	ldr	r0, [r7, #12]
 801e4c0:	f00f f9de 	bl	802d880 <strstr>
 801e4c4:	4603      	mov	r3, r0
 801e4c6:	2b00      	cmp	r3, #0
 801e4c8:	d003      	beq.n	801e4d2 <find_http_uri_type+0x232>
 801e4ca:	687b      	ldr	r3, [r7, #4]
 801e4cc:	2216      	movs	r2, #22
 801e4ce:	701a      	strb	r2, [r3, #0]
 801e4d0:	e027      	b.n	801e522 <find_http_uri_type+0x282>
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
 801e4d2:	4932      	ldr	r1, [pc, #200]	; (801e59c <find_http_uri_type+0x2fc>)
 801e4d4:	68f8      	ldr	r0, [r7, #12]
 801e4d6:	f00f f9d3 	bl	802d880 <strstr>
 801e4da:	4603      	mov	r3, r0
 801e4dc:	2b00      	cmp	r3, #0
 801e4de:	d106      	bne.n	801e4ee <find_http_uri_type+0x24e>
 801e4e0:	492f      	ldr	r1, [pc, #188]	; (801e5a0 <find_http_uri_type+0x300>)
 801e4e2:	68f8      	ldr	r0, [r7, #12]
 801e4e4:	f00f f9cc 	bl	802d880 <strstr>
 801e4e8:	4603      	mov	r3, r0
 801e4ea:	2b00      	cmp	r3, #0
 801e4ec:	d003      	beq.n	801e4f6 <find_http_uri_type+0x256>
 801e4ee:	687b      	ldr	r3, [r7, #4]
 801e4f0:	2217      	movs	r2, #23
 801e4f2:	701a      	strb	r2, [r3, #0]
 801e4f4:	e015      	b.n	801e522 <find_http_uri_type+0x282>
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
 801e4f6:	492b      	ldr	r1, [pc, #172]	; (801e5a4 <find_http_uri_type+0x304>)
 801e4f8:	68f8      	ldr	r0, [r7, #12]
 801e4fa:	f00f f9c1 	bl	802d880 <strstr>
 801e4fe:	4603      	mov	r3, r0
 801e500:	2b00      	cmp	r3, #0
 801e502:	d106      	bne.n	801e512 <find_http_uri_type+0x272>
 801e504:	4928      	ldr	r1, [pc, #160]	; (801e5a8 <find_http_uri_type+0x308>)
 801e506:	68f8      	ldr	r0, [r7, #12]
 801e508:	f00f f9ba 	bl	802d880 <strstr>
 801e50c:	4603      	mov	r3, r0
 801e50e:	2b00      	cmp	r3, #0
 801e510:	d003      	beq.n	801e51a <find_http_uri_type+0x27a>
 801e512:	687b      	ldr	r3, [r7, #4]
 801e514:	2218      	movs	r2, #24
 801e516:	701a      	strb	r2, [r3, #0]
 801e518:	e003      	b.n	801e522 <find_http_uri_type+0x282>
	else 													*type = PTYPE_ERR;
 801e51a:	687b      	ldr	r3, [r7, #4]
 801e51c:	2200      	movs	r2, #0
 801e51e:	701a      	strb	r2, [r3, #0]
}
 801e520:	e7ff      	b.n	801e522 <find_http_uri_type+0x282>
 801e522:	bf00      	nop
 801e524:	3710      	adds	r7, #16
 801e526:	46bd      	mov	sp, r7
 801e528:	bd80      	pop	{r7, pc}
 801e52a:	bf00      	nop
 801e52c:	08032ff8 	.word	0x08032ff8
 801e530:	08033000 	.word	0x08033000
 801e534:	08033008 	.word	0x08033008
 801e538:	08033010 	.word	0x08033010
 801e53c:	08033018 	.word	0x08033018
 801e540:	08033020 	.word	0x08033020
 801e544:	08033028 	.word	0x08033028
 801e548:	08033030 	.word	0x08033030
 801e54c:	08033038 	.word	0x08033038
 801e550:	08033040 	.word	0x08033040
 801e554:	08033048 	.word	0x08033048
 801e558:	08033050 	.word	0x08033050
 801e55c:	08033058 	.word	0x08033058
 801e560:	0803305c 	.word	0x0803305c
 801e564:	08033060 	.word	0x08033060
 801e568:	08033068 	.word	0x08033068
 801e56c:	08033070 	.word	0x08033070
 801e570:	08033078 	.word	0x08033078
 801e574:	08033080 	.word	0x08033080
 801e578:	08033088 	.word	0x08033088
 801e57c:	08033090 	.word	0x08033090
 801e580:	08033098 	.word	0x08033098
 801e584:	080330a0 	.word	0x080330a0
 801e588:	080330a8 	.word	0x080330a8
 801e58c:	080330b0 	.word	0x080330b0
 801e590:	080330b8 	.word	0x080330b8
 801e594:	080330c0 	.word	0x080330c0
 801e598:	080330c8 	.word	0x080330c8
 801e59c:	080330d0 	.word	0x080330d0
 801e5a0:	080330d8 	.word	0x080330d8
 801e5a4:	080330e0 	.word	0x080330e0
 801e5a8:	080330e8 	.word	0x080330e8

0801e5ac <parse_http_request>:
 */ 
void parse_http_request(
	st_http_request * request, 	/**< request to be returned */
	uint8_t * buf				/**< pointer to be parsed */
	)
{
 801e5ac:	b580      	push	{r7, lr}
 801e5ae:	b084      	sub	sp, #16
 801e5b0:	af00      	add	r7, sp, #0
 801e5b2:	6078      	str	r0, [r7, #4]
 801e5b4:	6039      	str	r1, [r7, #0]
  char * nexttok;
  nexttok = strtok((char*)buf," ");
 801e5b6:	4935      	ldr	r1, [pc, #212]	; (801e68c <parse_http_request+0xe0>)
 801e5b8:	6838      	ldr	r0, [r7, #0]
 801e5ba:	f00f f905 	bl	802d7c8 <strtok>
 801e5be:	60f8      	str	r0, [r7, #12]
  if(!nexttok)
 801e5c0:	68fb      	ldr	r3, [r7, #12]
 801e5c2:	2b00      	cmp	r3, #0
 801e5c4:	d103      	bne.n	801e5ce <parse_http_request+0x22>
  {
    request->METHOD = METHOD_ERR;
 801e5c6:	687b      	ldr	r3, [r7, #4]
 801e5c8:	2200      	movs	r2, #0
 801e5ca:	701a      	strb	r2, [r3, #0]
    return;
 801e5cc:	e05a      	b.n	801e684 <parse_http_request+0xd8>
  }
  if(!strcmp(nexttok, "GET") || !strcmp(nexttok,"get"))
 801e5ce:	4930      	ldr	r1, [pc, #192]	; (801e690 <parse_http_request+0xe4>)
 801e5d0:	68f8      	ldr	r0, [r7, #12]
 801e5d2:	f7f1 fe05 	bl	80101e0 <strcmp>
 801e5d6:	4603      	mov	r3, r0
 801e5d8:	2b00      	cmp	r3, #0
 801e5da:	d006      	beq.n	801e5ea <parse_http_request+0x3e>
 801e5dc:	492d      	ldr	r1, [pc, #180]	; (801e694 <parse_http_request+0xe8>)
 801e5de:	68f8      	ldr	r0, [r7, #12]
 801e5e0:	f7f1 fdfe 	bl	80101e0 <strcmp>
 801e5e4:	4603      	mov	r3, r0
 801e5e6:	2b00      	cmp	r3, #0
 801e5e8:	d10a      	bne.n	801e600 <parse_http_request+0x54>
  {
    request->METHOD = METHOD_GET;
 801e5ea:	687b      	ldr	r3, [r7, #4]
 801e5ec:	2201      	movs	r2, #1
 801e5ee:	701a      	strb	r2, [r3, #0]
//    nexttok = strtok(NULL," ");
    nexttok = strtok(nexttok+4," ");
 801e5f0:	68fb      	ldr	r3, [r7, #12]
 801e5f2:	3304      	adds	r3, #4
 801e5f4:	4925      	ldr	r1, [pc, #148]	; (801e68c <parse_http_request+0xe0>)
 801e5f6:	4618      	mov	r0, r3
 801e5f8:	f00f f8e6 	bl	802d7c8 <strtok>
 801e5fc:	60f8      	str	r0, [r7, #12]
 801e5fe:	e034      	b.n	801e66a <parse_http_request+0xbe>

  }
  else if (!strcmp(nexttok, "HEAD") || !strcmp(nexttok,"head"))
 801e600:	4925      	ldr	r1, [pc, #148]	; (801e698 <parse_http_request+0xec>)
 801e602:	68f8      	ldr	r0, [r7, #12]
 801e604:	f7f1 fdec 	bl	80101e0 <strcmp>
 801e608:	4603      	mov	r3, r0
 801e60a:	2b00      	cmp	r3, #0
 801e60c:	d006      	beq.n	801e61c <parse_http_request+0x70>
 801e60e:	4923      	ldr	r1, [pc, #140]	; (801e69c <parse_http_request+0xf0>)
 801e610:	68f8      	ldr	r0, [r7, #12]
 801e612:	f7f1 fde5 	bl	80101e0 <strcmp>
 801e616:	4603      	mov	r3, r0
 801e618:	2b00      	cmp	r3, #0
 801e61a:	d10a      	bne.n	801e632 <parse_http_request+0x86>
  {
    request->METHOD = METHOD_HEAD;
 801e61c:	687b      	ldr	r3, [r7, #4]
 801e61e:	2202      	movs	r2, #2
 801e620:	701a      	strb	r2, [r3, #0]
//    nexttok = strtok(NULL," ");
    nexttok = strtok(nexttok+5," ");
 801e622:	68fb      	ldr	r3, [r7, #12]
 801e624:	3305      	adds	r3, #5
 801e626:	4919      	ldr	r1, [pc, #100]	; (801e68c <parse_http_request+0xe0>)
 801e628:	4618      	mov	r0, r3
 801e62a:	f00f f8cd 	bl	802d7c8 <strtok>
 801e62e:	60f8      	str	r0, [r7, #12]
 801e630:	e01b      	b.n	801e66a <parse_http_request+0xbe>

  }
  else if (!strcmp(nexttok, "POST") || !strcmp(nexttok,"post"))
 801e632:	491b      	ldr	r1, [pc, #108]	; (801e6a0 <parse_http_request+0xf4>)
 801e634:	68f8      	ldr	r0, [r7, #12]
 801e636:	f7f1 fdd3 	bl	80101e0 <strcmp>
 801e63a:	4603      	mov	r3, r0
 801e63c:	2b00      	cmp	r3, #0
 801e63e:	d006      	beq.n	801e64e <parse_http_request+0xa2>
 801e640:	4918      	ldr	r1, [pc, #96]	; (801e6a4 <parse_http_request+0xf8>)
 801e642:	68f8      	ldr	r0, [r7, #12]
 801e644:	f7f1 fdcc 	bl	80101e0 <strcmp>
 801e648:	4603      	mov	r3, r0
 801e64a:	2b00      	cmp	r3, #0
 801e64c:	d10a      	bne.n	801e664 <parse_http_request+0xb8>
  {
//    nexttok = strtok(NULL,"\0");
	  nexttok = strtok(nexttok+5,"\0");
 801e64e:	68fb      	ldr	r3, [r7, #12]
 801e650:	3305      	adds	r3, #5
 801e652:	4915      	ldr	r1, [pc, #84]	; (801e6a8 <parse_http_request+0xfc>)
 801e654:	4618      	mov	r0, r3
 801e656:	f00f f8b7 	bl	802d7c8 <strtok>
 801e65a:	60f8      	str	r0, [r7, #12]
    request->METHOD = METHOD_POST;
 801e65c:	687b      	ldr	r3, [r7, #4]
 801e65e:	2203      	movs	r2, #3
 801e660:	701a      	strb	r2, [r3, #0]
 801e662:	e002      	b.n	801e66a <parse_http_request+0xbe>
  }
  else
  {
    request->METHOD = METHOD_ERR;
 801e664:	687b      	ldr	r3, [r7, #4]
 801e666:	2200      	movs	r2, #0
 801e668:	701a      	strb	r2, [r3, #0]
  }

  if(!nexttok)
 801e66a:	68fb      	ldr	r3, [r7, #12]
 801e66c:	2b00      	cmp	r3, #0
 801e66e:	d103      	bne.n	801e678 <parse_http_request+0xcc>
  {
    request->METHOD = METHOD_ERR;
 801e670:	687b      	ldr	r3, [r7, #4]
 801e672:	2200      	movs	r2, #0
 801e674:	701a      	strb	r2, [r3, #0]
    return;
 801e676:	e005      	b.n	801e684 <parse_http_request+0xd8>
  }
  strcpy((char *)request->URI, nexttok);
 801e678:	687b      	ldr	r3, [r7, #4]
 801e67a:	3302      	adds	r3, #2
 801e67c:	68f9      	ldr	r1, [r7, #12]
 801e67e:	4618      	mov	r0, r3
 801e680:	f00f f9f1 	bl	802da66 <strcpy>
}
 801e684:	3710      	adds	r7, #16
 801e686:	46bd      	mov	sp, r7
 801e688:	bd80      	pop	{r7, pc}
 801e68a:	bf00      	nop
 801e68c:	080330f0 	.word	0x080330f0
 801e690:	080330f4 	.word	0x080330f4
 801e694:	080330f8 	.word	0x080330f8
 801e698:	080330fc 	.word	0x080330fc
 801e69c:	08033104 	.word	0x08033104
 801e6a0:	0803310c 	.word	0x0803310c
 801e6a4:	08033114 	.word	0x08033114
 801e6a8:	0803311c 	.word	0x0803311c

0801e6ac <get_http_param_value>:
#else
/**
 @brief	get next parameter value in the request
 */
uint8_t * get_http_param_value(char* uri, char* param_name)
{
 801e6ac:	b580      	push	{r7, lr}
 801e6ae:	b08a      	sub	sp, #40	; 0x28
 801e6b0:	af00      	add	r7, sp, #0
 801e6b2:	6078      	str	r0, [r7, #4]
 801e6b4:	6039      	str	r1, [r7, #0]

	uint8_t * name = 0;
 801e6b6:	2300      	movs	r3, #0
 801e6b8:	623b      	str	r3, [r7, #32]
	uint8_t * ret = BUFPUB;
 801e6ba:	4b3c      	ldr	r3, [pc, #240]	; (801e7ac <get_http_param_value+0x100>)
 801e6bc:	61fb      	str	r3, [r7, #28]
	uint8_t * pos2;
	uint16_t len = 0, content_len = 0;
 801e6be:	2300      	movs	r3, #0
 801e6c0:	837b      	strh	r3, [r7, #26]
 801e6c2:	2300      	movs	r3, #0
 801e6c4:	833b      	strh	r3, [r7, #24]
	uint8_t tmp_buf[10]={0x00, };
 801e6c6:	2300      	movs	r3, #0
 801e6c8:	60bb      	str	r3, [r7, #8]
 801e6ca:	f107 030c 	add.w	r3, r7, #12
 801e6ce:	2200      	movs	r2, #0
 801e6d0:	601a      	str	r2, [r3, #0]
 801e6d2:	809a      	strh	r2, [r3, #4]
	uint8_t * test;

	if(!uri || !param_name) return 0;
 801e6d4:	687b      	ldr	r3, [r7, #4]
 801e6d6:	2b00      	cmp	r3, #0
 801e6d8:	d002      	beq.n	801e6e0 <get_http_param_value+0x34>
 801e6da:	683b      	ldr	r3, [r7, #0]
 801e6dc:	2b00      	cmp	r3, #0
 801e6de:	d101      	bne.n	801e6e4 <get_http_param_value+0x38>
 801e6e0:	2300      	movs	r3, #0
 801e6e2:	e05f      	b.n	801e7a4 <get_http_param_value+0xf8>

	/***************/
	if (mid(uri, "Content-Length: ", "\r\n", (char *)tmp_buf)){
 801e6e4:	f107 0308 	add.w	r3, r7, #8
 801e6e8:	4a31      	ldr	r2, [pc, #196]	; (801e7b0 <get_http_param_value+0x104>)
 801e6ea:	4932      	ldr	r1, [pc, #200]	; (801e7b4 <get_http_param_value+0x108>)
 801e6ec:	6878      	ldr	r0, [r7, #4]
 801e6ee:	f000 f8b4 	bl	801e85a <mid>
 801e6f2:	4603      	mov	r3, r0
 801e6f4:	2b00      	cmp	r3, #0
 801e6f6:	d001      	beq.n	801e6fc <get_http_param_value+0x50>
		return 0;
 801e6f8:	2300      	movs	r3, #0
 801e6fa:	e053      	b.n	801e7a4 <get_http_param_value+0xf8>
	}
	content_len = ATOI(tmp_buf, 10);
 801e6fc:	f107 0308 	add.w	r3, r7, #8
 801e700:	210a      	movs	r1, #10
 801e702:	4618      	mov	r0, r3
 801e704:	f000 f884 	bl	801e810 <ATOI>
 801e708:	4603      	mov	r3, r0
 801e70a:	833b      	strh	r3, [r7, #24]
	uri = strstr(uri, "\r\n\r\n");
 801e70c:	492a      	ldr	r1, [pc, #168]	; (801e7b8 <get_http_param_value+0x10c>)
 801e70e:	6878      	ldr	r0, [r7, #4]
 801e710:	f00f f8b6 	bl	802d880 <strstr>
 801e714:	6078      	str	r0, [r7, #4]
	uri += 4;
 801e716:	687b      	ldr	r3, [r7, #4]
 801e718:	3304      	adds	r3, #4
 801e71a:	607b      	str	r3, [r7, #4]
	uri[content_len] = 0;
 801e71c:	8b3b      	ldrh	r3, [r7, #24]
 801e71e:	687a      	ldr	r2, [r7, #4]
 801e720:	4413      	add	r3, r2
 801e722:	2200      	movs	r2, #0
 801e724:	701a      	strb	r2, [r3, #0]
	/***************/

	if((name = (uint8_t *)strstr(uri, param_name)))
 801e726:	6839      	ldr	r1, [r7, #0]
 801e728:	6878      	ldr	r0, [r7, #4]
 801e72a:	f00f f8a9 	bl	802d880 <strstr>
 801e72e:	6238      	str	r0, [r7, #32]
 801e730:	6a3b      	ldr	r3, [r7, #32]
 801e732:	2b00      	cmp	r3, #0
 801e734:	d033      	beq.n	801e79e <get_http_param_value+0xf2>
	{
		test = name + 1;
 801e736:	6a3b      	ldr	r3, [r7, #32]
 801e738:	3301      	adds	r3, #1
 801e73a:	617b      	str	r3, [r7, #20]
//		if (isalpha((int)test) || isdigit((int)test)){
//			4 +2;
//		}
		name += strlen(param_name) + 1;
 801e73c:	6838      	ldr	r0, [r7, #0]
 801e73e:	f7f1 fdaf 	bl	80102a0 <strlen>
 801e742:	4603      	mov	r3, r0
 801e744:	3301      	adds	r3, #1
 801e746:	6a3a      	ldr	r2, [r7, #32]
 801e748:	4413      	add	r3, r2
 801e74a:	623b      	str	r3, [r7, #32]
		pos2 = (uint8_t*)strstr((char*)name, "&");
 801e74c:	2126      	movs	r1, #38	; 0x26
 801e74e:	6a38      	ldr	r0, [r7, #32]
 801e750:	f00e ffd3 	bl	802d6fa <strchr>
 801e754:	6278      	str	r0, [r7, #36]	; 0x24
		if(!pos2)
 801e756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e758:	2b00      	cmp	r3, #0
 801e75a:	d106      	bne.n	801e76a <get_http_param_value+0xbe>
		{
			pos2 = name + strlen((char*)name);
 801e75c:	6a38      	ldr	r0, [r7, #32]
 801e75e:	f7f1 fd9f 	bl	80102a0 <strlen>
 801e762:	4602      	mov	r2, r0
 801e764:	6a3b      	ldr	r3, [r7, #32]
 801e766:	4413      	add	r3, r2
 801e768:	627b      	str	r3, [r7, #36]	; 0x24
		}
		len = pos2 - name;
 801e76a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e76c:	6a3b      	ldr	r3, [r7, #32]
 801e76e:	1ad3      	subs	r3, r2, r3
 801e770:	837b      	strh	r3, [r7, #26]

		if(len)
 801e772:	8b7b      	ldrh	r3, [r7, #26]
 801e774:	2b00      	cmp	r3, #0
 801e776:	d00e      	beq.n	801e796 <get_http_param_value+0xea>
		{
			ret[len] = 0;
 801e778:	8b7b      	ldrh	r3, [r7, #26]
 801e77a:	69fa      	ldr	r2, [r7, #28]
 801e77c:	4413      	add	r3, r2
 801e77e:	2200      	movs	r2, #0
 801e780:	701a      	strb	r2, [r3, #0]
			strncpy((char*)ret,(char*)name, len);
 801e782:	8b7b      	ldrh	r3, [r7, #26]
 801e784:	461a      	mov	r2, r3
 801e786:	6a39      	ldr	r1, [r7, #32]
 801e788:	69f8      	ldr	r0, [r7, #28]
 801e78a:	f00e fff9 	bl	802d780 <strncpy>
			unescape_http_url((char *)ret);
 801e78e:	69f8      	ldr	r0, [r7, #28]
 801e790:	f7ff fc88 	bl	801e0a4 <unescape_http_url>
 801e794:	e005      	b.n	801e7a2 <get_http_param_value+0xf6>
			//ret[strlen((int8*)ret)] = 0;
			//printf("len=%d\r\n",len);
		}
		else
		{
			ret[0] = 0;
 801e796:	69fb      	ldr	r3, [r7, #28]
 801e798:	2200      	movs	r2, #0
 801e79a:	701a      	strb	r2, [r3, #0]
 801e79c:	e001      	b.n	801e7a2 <get_http_param_value+0xf6>
		}
	}
	else
	{
		return 0;
 801e79e:	2300      	movs	r3, #0
 801e7a0:	e000      	b.n	801e7a4 <get_http_param_value+0xf8>
	}
#ifdef _HTTPPARSER_DEBUG_
	printf("  %s=%s\r\n", param_name, ret);
#endif
	return ret;
 801e7a2:	69fb      	ldr	r3, [r7, #28]
}
 801e7a4:	4618      	mov	r0, r3
 801e7a6:	3728      	adds	r7, #40	; 0x28
 801e7a8:	46bd      	mov	sp, r7
 801e7aa:	bd80      	pop	{r7, pc}
 801e7ac:	200009d4 	.word	0x200009d4
 801e7b0:	08033120 	.word	0x08033120
 801e7b4:	08033124 	.word	0x08033124
 801e7b8:	08032ff0 	.word	0x08032ff0

0801e7bc <get_http_uri_name>:
	return uri_name;
}
#else

uint8_t get_http_uri_name(uint8_t * uri, uint8_t * uri_buf)
{
 801e7bc:	b580      	push	{r7, lr}
 801e7be:	b084      	sub	sp, #16
 801e7c0:	af00      	add	r7, sp, #0
 801e7c2:	6078      	str	r0, [r7, #4]
 801e7c4:	6039      	str	r1, [r7, #0]
	uint8_t * uri_ptr;
	if(!uri) return 0;
 801e7c6:	687b      	ldr	r3, [r7, #4]
 801e7c8:	2b00      	cmp	r3, #0
 801e7ca:	d101      	bne.n	801e7d0 <get_http_uri_name+0x14>
 801e7cc:	2300      	movs	r3, #0
 801e7ce:	e017      	b.n	801e800 <get_http_uri_name+0x44>

	strcpy((char *)uri_buf, (char *)uri);
 801e7d0:	6879      	ldr	r1, [r7, #4]
 801e7d2:	6838      	ldr	r0, [r7, #0]
 801e7d4:	f00f f947 	bl	802da66 <strcpy>

	uri_ptr = (uint8_t *)strtok((char *)uri_buf, " ?");
 801e7d8:	490b      	ldr	r1, [pc, #44]	; (801e808 <get_http_uri_name+0x4c>)
 801e7da:	6838      	ldr	r0, [r7, #0]
 801e7dc:	f00e fff4 	bl	802d7c8 <strtok>
 801e7e0:	60f8      	str	r0, [r7, #12]

	if(strcmp((char *)uri_ptr,"/")) uri_ptr++;
 801e7e2:	490a      	ldr	r1, [pc, #40]	; (801e80c <get_http_uri_name+0x50>)
 801e7e4:	68f8      	ldr	r0, [r7, #12]
 801e7e6:	f7f1 fcfb 	bl	80101e0 <strcmp>
 801e7ea:	4603      	mov	r3, r0
 801e7ec:	2b00      	cmp	r3, #0
 801e7ee:	d002      	beq.n	801e7f6 <get_http_uri_name+0x3a>
 801e7f0:	68fb      	ldr	r3, [r7, #12]
 801e7f2:	3301      	adds	r3, #1
 801e7f4:	60fb      	str	r3, [r7, #12]
	strcpy((char *)uri_buf, (char *)uri_ptr);
 801e7f6:	68f9      	ldr	r1, [r7, #12]
 801e7f8:	6838      	ldr	r0, [r7, #0]
 801e7fa:	f00f f934 	bl	802da66 <strcpy>

#ifdef _HTTPPARSER_DEBUG_
	printf("  uri_name = %s\r\n", uri_buf);
#endif

	return 1;
 801e7fe:	2301      	movs	r3, #1
}
 801e800:	4618      	mov	r0, r3
 801e802:	3710      	adds	r7, #16
 801e804:	46bd      	mov	sp, r7
 801e806:	bd80      	pop	{r7, pc}
 801e808:	08033138 	.word	0x08033138
 801e80c:	0803313c 	.word	0x0803313c

0801e810 <ATOI>:
*/
uint16_t ATOI(
	uint8_t * str,	/**< is a pointer to convert */
	uint8_t base	/**< is a base value (must be in the range 2 - 16) */
	)
{
 801e810:	b590      	push	{r4, r7, lr}
 801e812:	b085      	sub	sp, #20
 801e814:	af00      	add	r7, sp, #0
 801e816:	6078      	str	r0, [r7, #4]
 801e818:	460b      	mov	r3, r1
 801e81a:	70fb      	strb	r3, [r7, #3]
        unsigned int num = 0;
 801e81c:	2300      	movs	r3, #0
 801e81e:	60fb      	str	r3, [r7, #12]
// debug_2013_11_25
//        while (*str !=0)
        while ((*str !=0) && (*str != 0x20)) // not include the space(0x020)
 801e820:	e00d      	b.n	801e83e <ATOI+0x2e>
                num = num * base + C2D(*str++);
 801e822:	78fb      	ldrb	r3, [r7, #3]
 801e824:	68fa      	ldr	r2, [r7, #12]
 801e826:	fb02 f403 	mul.w	r4, r2, r3
 801e82a:	687b      	ldr	r3, [r7, #4]
 801e82c:	1c5a      	adds	r2, r3, #1
 801e82e:	607a      	str	r2, [r7, #4]
 801e830:	781b      	ldrb	r3, [r3, #0]
 801e832:	4618      	mov	r0, r3
 801e834:	f000 f843 	bl	801e8be <C2D>
 801e838:	4603      	mov	r3, r0
 801e83a:	4423      	add	r3, r4
 801e83c:	60fb      	str	r3, [r7, #12]
        while ((*str !=0) && (*str != 0x20)) // not include the space(0x020)
 801e83e:	687b      	ldr	r3, [r7, #4]
 801e840:	781b      	ldrb	r3, [r3, #0]
 801e842:	2b00      	cmp	r3, #0
 801e844:	d003      	beq.n	801e84e <ATOI+0x3e>
 801e846:	687b      	ldr	r3, [r7, #4]
 801e848:	781b      	ldrb	r3, [r3, #0]
 801e84a:	2b20      	cmp	r3, #32
 801e84c:	d1e9      	bne.n	801e822 <ATOI+0x12>
	return num;
 801e84e:	68fb      	ldr	r3, [r7, #12]
 801e850:	b29b      	uxth	r3, r3
}
 801e852:	4618      	mov	r0, r3
 801e854:	3714      	adds	r7, #20
 801e856:	46bd      	mov	sp, r7
 801e858:	bd90      	pop	{r4, r7, pc}

0801e85a <mid>:
 * @param s2 The end string to be researched
 * @param sub The string between s1 and s2
 * @return The length value atfer working
 */
int8_t mid(char* src, char* s1, char* s2, char* sub)
{
 801e85a:	b580      	push	{r7, lr}
 801e85c:	b088      	sub	sp, #32
 801e85e:	af00      	add	r7, sp, #0
 801e860:	60f8      	str	r0, [r7, #12]
 801e862:	60b9      	str	r1, [r7, #8]
 801e864:	607a      	str	r2, [r7, #4]
 801e866:	603b      	str	r3, [r7, #0]
	char* sub1;
	char* sub2;
	uint16_t n;

	sub1=strstr((char*)src,(char*)s1);
 801e868:	68b9      	ldr	r1, [r7, #8]
 801e86a:	68f8      	ldr	r0, [r7, #12]
 801e86c:	f00f f808 	bl	802d880 <strstr>
 801e870:	61f8      	str	r0, [r7, #28]
	if (sub1 == 0) return -1;
 801e872:	69fb      	ldr	r3, [r7, #28]
 801e874:	2b00      	cmp	r3, #0
 801e876:	d102      	bne.n	801e87e <mid+0x24>
 801e878:	f04f 33ff 	mov.w	r3, #4294967295
 801e87c:	e01b      	b.n	801e8b6 <mid+0x5c>
	sub1+=strlen((char*)s1);
 801e87e:	68b8      	ldr	r0, [r7, #8]
 801e880:	f7f1 fd0e 	bl	80102a0 <strlen>
 801e884:	4602      	mov	r2, r0
 801e886:	69fb      	ldr	r3, [r7, #28]
 801e888:	4413      	add	r3, r2
 801e88a:	61fb      	str	r3, [r7, #28]
	sub2=strstr((char*)sub1,(char*)s2);
 801e88c:	6879      	ldr	r1, [r7, #4]
 801e88e:	69f8      	ldr	r0, [r7, #28]
 801e890:	f00e fff6 	bl	802d880 <strstr>
 801e894:	61b8      	str	r0, [r7, #24]

	n=sub2-sub1;
 801e896:	69ba      	ldr	r2, [r7, #24]
 801e898:	69fb      	ldr	r3, [r7, #28]
 801e89a:	1ad3      	subs	r3, r2, r3
 801e89c:	82fb      	strh	r3, [r7, #22]
	strncpy((char*)sub,(char*)sub1,n);
 801e89e:	8afb      	ldrh	r3, [r7, #22]
 801e8a0:	461a      	mov	r2, r3
 801e8a2:	69f9      	ldr	r1, [r7, #28]
 801e8a4:	6838      	ldr	r0, [r7, #0]
 801e8a6:	f00e ff6b 	bl	802d780 <strncpy>
	sub[n]='\0';
 801e8aa:	8afb      	ldrh	r3, [r7, #22]
 801e8ac:	683a      	ldr	r2, [r7, #0]
 801e8ae:	4413      	add	r3, r2
 801e8b0:	2200      	movs	r2, #0
 801e8b2:	701a      	strb	r2, [r3, #0]
	return 0;
 801e8b4:	2300      	movs	r3, #0
}
 801e8b6:	4618      	mov	r0, r3
 801e8b8:	3720      	adds	r7, #32
 801e8ba:	46bd      	mov	sp, r7
 801e8bc:	bd80      	pop	{r7, pc}

0801e8be <C2D>:
This function converts HEX(0-F) to a character
*/
static uint8_t C2D(
		uint8_t c	/**< is a character('0'-'F') to convert to HEX */
	)
{
 801e8be:	b480      	push	{r7}
 801e8c0:	b083      	sub	sp, #12
 801e8c2:	af00      	add	r7, sp, #0
 801e8c4:	4603      	mov	r3, r0
 801e8c6:	71fb      	strb	r3, [r7, #7]
	if (c >= '0' && c <= '9')
 801e8c8:	79fb      	ldrb	r3, [r7, #7]
 801e8ca:	2b2f      	cmp	r3, #47	; 0x2f
 801e8cc:	d906      	bls.n	801e8dc <C2D+0x1e>
 801e8ce:	79fb      	ldrb	r3, [r7, #7]
 801e8d0:	2b39      	cmp	r3, #57	; 0x39
 801e8d2:	d803      	bhi.n	801e8dc <C2D+0x1e>
		return c - '0';
 801e8d4:	79fb      	ldrb	r3, [r7, #7]
 801e8d6:	3b30      	subs	r3, #48	; 0x30
 801e8d8:	b2db      	uxtb	r3, r3
 801e8da:	e014      	b.n	801e906 <C2D+0x48>
	if (c >= 'a' && c <= 'f')
 801e8dc:	79fb      	ldrb	r3, [r7, #7]
 801e8de:	2b60      	cmp	r3, #96	; 0x60
 801e8e0:	d906      	bls.n	801e8f0 <C2D+0x32>
 801e8e2:	79fb      	ldrb	r3, [r7, #7]
 801e8e4:	2b66      	cmp	r3, #102	; 0x66
 801e8e6:	d803      	bhi.n	801e8f0 <C2D+0x32>
		return 10 + c -'a';
 801e8e8:	79fb      	ldrb	r3, [r7, #7]
 801e8ea:	3b57      	subs	r3, #87	; 0x57
 801e8ec:	b2db      	uxtb	r3, r3
 801e8ee:	e00a      	b.n	801e906 <C2D+0x48>
	if (c >= 'A' && c <= 'F')
 801e8f0:	79fb      	ldrb	r3, [r7, #7]
 801e8f2:	2b40      	cmp	r3, #64	; 0x40
 801e8f4:	d906      	bls.n	801e904 <C2D+0x46>
 801e8f6:	79fb      	ldrb	r3, [r7, #7]
 801e8f8:	2b46      	cmp	r3, #70	; 0x46
 801e8fa:	d803      	bhi.n	801e904 <C2D+0x46>
		return 10 + c -'A';
 801e8fc:	79fb      	ldrb	r3, [r7, #7]
 801e8fe:	3b37      	subs	r3, #55	; 0x37
 801e900:	b2db      	uxtb	r3, r3
 801e902:	e000      	b.n	801e906 <C2D+0x48>

	return (char)c;
 801e904:	79fb      	ldrb	r3, [r7, #7]
}
 801e906:	4618      	mov	r0, r3
 801e908:	370c      	adds	r7, #12
 801e90a:	46bd      	mov	sp, r7
 801e90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e910:	4770      	bx	lr

0801e912 <default_mcu_reset>:

/*****************************************************************************
 * Public functions
 ****************************************************************************/
// Callback functions definition: MCU Reset / WDT Reset
void default_mcu_reset(void) {;}
 801e912:	b480      	push	{r7}
 801e914:	af00      	add	r7, sp, #0
 801e916:	bf00      	nop
 801e918:	46bd      	mov	sp, r7
 801e91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e91e:	4770      	bx	lr

0801e920 <default_function>:
void default_wdt_reset(void) {;}
void default_function(void)  {;}
 801e920:	b480      	push	{r7}
 801e922:	af00      	add	r7, sp, #0
 801e924:	bf00      	nop
 801e926:	46bd      	mov	sp, r7
 801e928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e92c:	4770      	bx	lr
	...

0801e930 <httpServer_Sockinit>:

	if (delay_function) delay_os_ms = delay_function;
}

void httpServer_Sockinit(uint8_t cnt, uint8_t * socklist)
{
 801e930:	b480      	push	{r7}
 801e932:	b085      	sub	sp, #20
 801e934:	af00      	add	r7, sp, #0
 801e936:	4603      	mov	r3, r0
 801e938:	6039      	str	r1, [r7, #0]
 801e93a:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < cnt; i++)
 801e93c:	2300      	movs	r3, #0
 801e93e:	73fb      	strb	r3, [r7, #15]
 801e940:	e009      	b.n	801e956 <httpServer_Sockinit+0x26>
	{
		// Mapping the H/W socket numbers to the sequential index numbers
		HTTPSock_Num[i] = socklist[i];
 801e942:	7bfb      	ldrb	r3, [r7, #15]
 801e944:	683a      	ldr	r2, [r7, #0]
 801e946:	441a      	add	r2, r3
 801e948:	7bfb      	ldrb	r3, [r7, #15]
 801e94a:	7811      	ldrb	r1, [r2, #0]
 801e94c:	4a07      	ldr	r2, [pc, #28]	; (801e96c <httpServer_Sockinit+0x3c>)
 801e94e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < cnt; i++)
 801e950:	7bfb      	ldrb	r3, [r7, #15]
 801e952:	3301      	adds	r3, #1
 801e954:	73fb      	strb	r3, [r7, #15]
 801e956:	7bfa      	ldrb	r2, [r7, #15]
 801e958:	79fb      	ldrb	r3, [r7, #7]
 801e95a:	429a      	cmp	r2, r3
 801e95c:	d3f1      	bcc.n	801e942 <httpServer_Sockinit+0x12>
	}
}
 801e95e:	bf00      	nop
 801e960:	bf00      	nop
 801e962:	3714      	adds	r7, #20
 801e964:	46bd      	mov	sp, r7
 801e966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e96a:	4770      	bx	lr
 801e96c:	200011d4 	.word	0x200011d4

0801e970 <getHTTPSocketNum>:

static uint8_t getHTTPSocketNum(uint8_t seqnum)
{
 801e970:	b480      	push	{r7}
 801e972:	b083      	sub	sp, #12
 801e974:	af00      	add	r7, sp, #0
 801e976:	4603      	mov	r3, r0
 801e978:	71fb      	strb	r3, [r7, #7]
	// Return the 'H/W socket number' corresponding to the index number
	return HTTPSock_Num[seqnum];
 801e97a:	79fb      	ldrb	r3, [r7, #7]
 801e97c:	4a03      	ldr	r2, [pc, #12]	; (801e98c <getHTTPSocketNum+0x1c>)
 801e97e:	5cd3      	ldrb	r3, [r2, r3]
}
 801e980:	4618      	mov	r0, r3
 801e982:	370c      	adds	r7, #12
 801e984:	46bd      	mov	sp, r7
 801e986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e98a:	4770      	bx	lr
 801e98c:	200011d4 	.word	0x200011d4

0801e990 <getHTTPSequenceNum>:

static int8_t getHTTPSequenceNum(uint8_t socket)
{
 801e990:	b480      	push	{r7}
 801e992:	b085      	sub	sp, #20
 801e994:	af00      	add	r7, sp, #0
 801e996:	4603      	mov	r3, r0
 801e998:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 801e99a:	2300      	movs	r3, #0
 801e99c:	73fb      	strb	r3, [r7, #15]
 801e99e:	e00b      	b.n	801e9b8 <getHTTPSequenceNum+0x28>
		if(HTTPSock_Num[i] == socket) return i;
 801e9a0:	7bfb      	ldrb	r3, [r7, #15]
 801e9a2:	4a0b      	ldr	r2, [pc, #44]	; (801e9d0 <getHTTPSequenceNum+0x40>)
 801e9a4:	5cd3      	ldrb	r3, [r2, r3]
 801e9a6:	79fa      	ldrb	r2, [r7, #7]
 801e9a8:	429a      	cmp	r2, r3
 801e9aa:	d102      	bne.n	801e9b2 <getHTTPSequenceNum+0x22>
 801e9ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e9b0:	e007      	b.n	801e9c2 <getHTTPSequenceNum+0x32>
	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 801e9b2:	7bfb      	ldrb	r3, [r7, #15]
 801e9b4:	3301      	adds	r3, #1
 801e9b6:	73fb      	strb	r3, [r7, #15]
 801e9b8:	7bfb      	ldrb	r3, [r7, #15]
 801e9ba:	2b07      	cmp	r3, #7
 801e9bc:	d9f0      	bls.n	801e9a0 <getHTTPSequenceNum+0x10>

	return -1;
 801e9be:	f04f 33ff 	mov.w	r3, #4294967295
}
 801e9c2:	4618      	mov	r0, r3
 801e9c4:	3714      	adds	r7, #20
 801e9c6:	46bd      	mov	sp, r7
 801e9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9cc:	4770      	bx	lr
 801e9ce:	bf00      	nop
 801e9d0:	200011d4 	.word	0x200011d4

0801e9d4 <httpServer_init>:

void httpServer_init(uint8_t * tx_buf, uint8_t * rx_buf, uint8_t cnt, uint8_t * socklist)
{
 801e9d4:	b580      	push	{r7, lr}
 801e9d6:	b084      	sub	sp, #16
 801e9d8:	af00      	add	r7, sp, #0
 801e9da:	60f8      	str	r0, [r7, #12]
 801e9dc:	60b9      	str	r1, [r7, #8]
 801e9de:	603b      	str	r3, [r7, #0]
 801e9e0:	4613      	mov	r3, r2
 801e9e2:	71fb      	strb	r3, [r7, #7]
	// User's shared buffer
	pHTTP_TX = tx_buf;
 801e9e4:	4a07      	ldr	r2, [pc, #28]	; (801ea04 <httpServer_init+0x30>)
 801e9e6:	68fb      	ldr	r3, [r7, #12]
 801e9e8:	6013      	str	r3, [r2, #0]
	pHTTP_RX = rx_buf;
 801e9ea:	4a07      	ldr	r2, [pc, #28]	; (801ea08 <httpServer_init+0x34>)
 801e9ec:	68bb      	ldr	r3, [r7, #8]
 801e9ee:	6013      	str	r3, [r2, #0]

	// H/W Socket number mapping
	httpServer_Sockinit(cnt, socklist);
 801e9f0:	79fb      	ldrb	r3, [r7, #7]
 801e9f2:	6839      	ldr	r1, [r7, #0]
 801e9f4:	4618      	mov	r0, r3
 801e9f6:	f7ff ff9b 	bl	801e930 <httpServer_Sockinit>
}
 801e9fa:	bf00      	nop
 801e9fc:	3710      	adds	r7, #16
 801e9fe:	46bd      	mov	sp, r7
 801ea00:	bd80      	pop	{r7, pc}
 801ea02:	bf00      	nop
 801ea04:	200012b4 	.word	0x200012b4
 801ea08:	200012b8 	.word	0x200012b8

0801ea0c <httpServer_run>:
	if(wdt_reset) HTTPServer_WDT_Reset = wdt_reset;
}


void httpServer_run(uint8_t seqnum)
{
 801ea0c:	b590      	push	{r4, r7, lr}
 801ea0e:	b089      	sub	sp, #36	; 0x24
 801ea10:	af02      	add	r7, sp, #8
 801ea12:	4603      	mov	r3, r0
 801ea14:	71fb      	strb	r3, [r7, #7]
	uint8_t s;	// socket number
	uint16_t len;
	uint32_t gettime = 0;
 801ea16:	2300      	movs	r3, #0
 801ea18:	613b      	str	r3, [r7, #16]
#ifdef _HTTPSERVER_DEBUG_
	uint8_t destip[4] = {0, };
	uint16_t destport = 0;
#endif

	http_request = (st_http_request *)pHTTP_RX;		// Structure of HTTP Request
 801ea1a:	4bb4      	ldr	r3, [pc, #720]	; (801ecec <httpServer_run+0x2e0>)
 801ea1c:	681b      	ldr	r3, [r3, #0]
 801ea1e:	4ab4      	ldr	r2, [pc, #720]	; (801ecf0 <httpServer_run+0x2e4>)
 801ea20:	6013      	str	r3, [r2, #0]
	parsed_http_request = (st_http_request *)pHTTP_TX;
 801ea22:	4bb4      	ldr	r3, [pc, #720]	; (801ecf4 <httpServer_run+0x2e8>)
 801ea24:	681b      	ldr	r3, [r3, #0]
 801ea26:	4ab4      	ldr	r2, [pc, #720]	; (801ecf8 <httpServer_run+0x2ec>)
 801ea28:	6013      	str	r3, [r2, #0]

	// Get the H/W socket number
	s = getHTTPSocketNum(seqnum);
 801ea2a:	79fb      	ldrb	r3, [r7, #7]
 801ea2c:	4618      	mov	r0, r3
 801ea2e:	f7ff ff9f 	bl	801e970 <getHTTPSocketNum>
 801ea32:	4603      	mov	r3, r0
 801ea34:	73fb      	strb	r3, [r7, #15]

	/* HTTP Service Start */
	debug = getSn_SR(s);
 801ea36:	7bfb      	ldrb	r3, [r7, #15]
 801ea38:	009b      	lsls	r3, r3, #2
 801ea3a:	3301      	adds	r3, #1
 801ea3c:	00db      	lsls	r3, r3, #3
 801ea3e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801ea42:	4618      	mov	r0, r3
 801ea44:	f7f9 fd80 	bl	8018548 <WIZCHIP_READ>
 801ea48:	4603      	mov	r3, r0
 801ea4a:	81bb      	strh	r3, [r7, #12]
	switch(getSn_SR(s))
 801ea4c:	7bfb      	ldrb	r3, [r7, #15]
 801ea4e:	009b      	lsls	r3, r3, #2
 801ea50:	3301      	adds	r3, #1
 801ea52:	00db      	lsls	r3, r3, #3
 801ea54:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801ea58:	4618      	mov	r0, r3
 801ea5a:	f7f9 fd75 	bl	8018548 <WIZCHIP_READ>
 801ea5e:	4603      	mov	r3, r0
 801ea60:	2b1c      	cmp	r3, #28
 801ea62:	f200 813e 	bhi.w	801ece2 <httpServer_run+0x2d6>
 801ea66:	a201      	add	r2, pc, #4	; (adr r2, 801ea6c <httpServer_run+0x60>)
 801ea68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ea6c:	0801eccb 	.word	0x0801eccb
 801ea70:	0801ece3 	.word	0x0801ece3
 801ea74:	0801ece3 	.word	0x0801ece3
 801ea78:	0801ece3 	.word	0x0801ece3
 801ea7c:	0801ece3 	.word	0x0801ece3
 801ea80:	0801ece3 	.word	0x0801ece3
 801ea84:	0801ece3 	.word	0x0801ece3
 801ea88:	0801ece3 	.word	0x0801ece3
 801ea8c:	0801ece3 	.word	0x0801ece3
 801ea90:	0801ece3 	.word	0x0801ece3
 801ea94:	0801ece3 	.word	0x0801ece3
 801ea98:	0801ece3 	.word	0x0801ece3
 801ea9c:	0801ece3 	.word	0x0801ece3
 801eaa0:	0801ece3 	.word	0x0801ece3
 801eaa4:	0801ece3 	.word	0x0801ece3
 801eaa8:	0801ece3 	.word	0x0801ece3
 801eaac:	0801ece3 	.word	0x0801ece3
 801eab0:	0801ece3 	.word	0x0801ece3
 801eab4:	0801ece3 	.word	0x0801ece3
 801eab8:	0801ecd9 	.word	0x0801ecd9
 801eabc:	0801ece3 	.word	0x0801ece3
 801eac0:	0801ece3 	.word	0x0801ece3
 801eac4:	0801ece3 	.word	0x0801ece3
 801eac8:	0801eae1 	.word	0x0801eae1
 801eacc:	0801ece3 	.word	0x0801ece3
 801ead0:	0801ece3 	.word	0x0801ece3
 801ead4:	0801ece3 	.word	0x0801ece3
 801ead8:	0801ece3 	.word	0x0801ece3
 801eadc:	0801ecc1 	.word	0x0801ecc1
	{
		case SOCK_ESTABLISHED:
			// Interrupt clear
			if(getSn_IR(s) & Sn_IR_CON)
 801eae0:	7bfb      	ldrb	r3, [r7, #15]
 801eae2:	009b      	lsls	r3, r3, #2
 801eae4:	3301      	adds	r3, #1
 801eae6:	00db      	lsls	r3, r3, #3
 801eae8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801eaec:	4618      	mov	r0, r3
 801eaee:	f7f9 fd2b 	bl	8018548 <WIZCHIP_READ>
 801eaf2:	4603      	mov	r3, r0
 801eaf4:	f003 0301 	and.w	r3, r3, #1
 801eaf8:	2b00      	cmp	r3, #0
 801eafa:	d009      	beq.n	801eb10 <httpServer_run+0x104>
			{
				setSn_IR(s, Sn_IR_CON);
 801eafc:	7bfb      	ldrb	r3, [r7, #15]
 801eafe:	009b      	lsls	r3, r3, #2
 801eb00:	3301      	adds	r3, #1
 801eb02:	00db      	lsls	r3, r3, #3
 801eb04:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801eb08:	2101      	movs	r1, #1
 801eb0a:	4618      	mov	r0, r3
 801eb0c:	f7f9 fd68 	bl	80185e0 <WIZCHIP_WRITE>
			}

			// HTTP Process states
			switch(HTTPSock_Status[seqnum].sock_status)
 801eb10:	79fa      	ldrb	r2, [r7, #7]
 801eb12:	497a      	ldr	r1, [pc, #488]	; (801ecfc <httpServer_run+0x2f0>)
 801eb14:	4613      	mov	r3, r2
 801eb16:	011b      	lsls	r3, r3, #4
 801eb18:	4413      	add	r3, r2
 801eb1a:	009b      	lsls	r3, r3, #2
 801eb1c:	440b      	add	r3, r1
 801eb1e:	781b      	ldrb	r3, [r3, #0]
 801eb20:	2b04      	cmp	r3, #4
 801eb22:	f000 809b 	beq.w	801ec5c <httpServer_run+0x250>
 801eb26:	2b04      	cmp	r3, #4
 801eb28:	f300 80c4 	bgt.w	801ecb4 <httpServer_run+0x2a8>
 801eb2c:	2b00      	cmp	r3, #0
 801eb2e:	d002      	beq.n	801eb36 <httpServer_run+0x12a>
 801eb30:	2b03      	cmp	r3, #3
 801eb32:	d06e      	beq.n	801ec12 <httpServer_run+0x206>
#endif
					http_disconnect(s);
					break;

				default :
					break;
 801eb34:	e0be      	b.n	801ecb4 <httpServer_run+0x2a8>
					if ((len = getSn_RX_RSR(s)) > 0)
 801eb36:	7bfb      	ldrb	r3, [r7, #15]
 801eb38:	4618      	mov	r0, r3
 801eb3a:	f7f9 feaa 	bl	8018892 <getSn_RX_RSR>
 801eb3e:	4603      	mov	r3, r0
 801eb40:	82fb      	strh	r3, [r7, #22]
 801eb42:	8afb      	ldrh	r3, [r7, #22]
 801eb44:	2b00      	cmp	r3, #0
 801eb46:	f000 80b7 	beq.w	801ecb8 <httpServer_run+0x2ac>
						if (len > DATA_BUF_SIZE) len = DATA_BUF_SIZE;
 801eb4a:	8afb      	ldrh	r3, [r7, #22]
 801eb4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801eb50:	d902      	bls.n	801eb58 <httpServer_run+0x14c>
 801eb52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801eb56:	82fb      	strh	r3, [r7, #22]
						len = recv(s, (uint8_t *)http_request, len);
 801eb58:	4b65      	ldr	r3, [pc, #404]	; (801ecf0 <httpServer_run+0x2e4>)
 801eb5a:	6819      	ldr	r1, [r3, #0]
 801eb5c:	8afa      	ldrh	r2, [r7, #22]
 801eb5e:	7bfb      	ldrb	r3, [r7, #15]
 801eb60:	4618      	mov	r0, r3
 801eb62:	f7fa fc09 	bl	8019378 <recv>
 801eb66:	4603      	mov	r3, r0
 801eb68:	82fb      	strh	r3, [r7, #22]
						*(((uint8_t *)http_request) + len) = '\0';
 801eb6a:	4b61      	ldr	r3, [pc, #388]	; (801ecf0 <httpServer_run+0x2e4>)
 801eb6c:	681a      	ldr	r2, [r3, #0]
 801eb6e:	8afb      	ldrh	r3, [r7, #22]
 801eb70:	4413      	add	r3, r2
 801eb72:	2200      	movs	r2, #0
 801eb74:	701a      	strb	r2, [r3, #0]
						parse_http_request(parsed_http_request, (uint8_t *)http_request);
 801eb76:	4b60      	ldr	r3, [pc, #384]	; (801ecf8 <httpServer_run+0x2ec>)
 801eb78:	681b      	ldr	r3, [r3, #0]
 801eb7a:	4a5d      	ldr	r2, [pc, #372]	; (801ecf0 <httpServer_run+0x2e4>)
 801eb7c:	6812      	ldr	r2, [r2, #0]
 801eb7e:	4611      	mov	r1, r2
 801eb80:	4618      	mov	r0, r3
 801eb82:	f7ff fd13 	bl	801e5ac <parse_http_request>
						http_process_handler(s, parsed_http_request);
 801eb86:	4b5c      	ldr	r3, [pc, #368]	; (801ecf8 <httpServer_run+0x2ec>)
 801eb88:	681a      	ldr	r2, [r3, #0]
 801eb8a:	7bfb      	ldrb	r3, [r7, #15]
 801eb8c:	4611      	mov	r1, r2
 801eb8e:	4618      	mov	r0, r3
 801eb90:	f000 fac4 	bl	801f11c <http_process_handler>
						gettime = get_httpServer_timecount();
 801eb94:	f000 fd04 	bl	801f5a0 <get_httpServer_timecount>
 801eb98:	6138      	str	r0, [r7, #16]
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 801eb9a:	e006      	b.n	801ebaa <httpServer_run+0x19e>
							if((get_httpServer_timecount() - gettime) > 3)
 801eb9c:	f000 fd00 	bl	801f5a0 <get_httpServer_timecount>
 801eba0:	4602      	mov	r2, r0
 801eba2:	693b      	ldr	r3, [r7, #16]
 801eba4:	1ad3      	subs	r3, r2, r3
 801eba6:	2b03      	cmp	r3, #3
 801eba8:	d813      	bhi.n	801ebd2 <httpServer_run+0x1c6>
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 801ebaa:	7bfb      	ldrb	r3, [r7, #15]
 801ebac:	4618      	mov	r0, r3
 801ebae:	f7f9 fe25 	bl	80187fc <getSn_TX_FSR>
 801ebb2:	4603      	mov	r3, r0
 801ebb4:	461c      	mov	r4, r3
 801ebb6:	7bfb      	ldrb	r3, [r7, #15]
 801ebb8:	009b      	lsls	r3, r3, #2
 801ebba:	3301      	adds	r3, #1
 801ebbc:	00db      	lsls	r3, r3, #3
 801ebbe:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 801ebc2:	4618      	mov	r0, r3
 801ebc4:	f7f9 fcc0 	bl	8018548 <WIZCHIP_READ>
 801ebc8:	4603      	mov	r3, r0
 801ebca:	029b      	lsls	r3, r3, #10
 801ebcc:	429c      	cmp	r4, r3
 801ebce:	d1e5      	bne.n	801eb9c <httpServer_run+0x190>
 801ebd0:	e000      	b.n	801ebd4 <httpServer_run+0x1c8>
								break;
 801ebd2:	bf00      	nop
						if(HTTPSock_Status[seqnum].file_len > 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_INPROC;
 801ebd4:	79fa      	ldrb	r2, [r7, #7]
 801ebd6:	4949      	ldr	r1, [pc, #292]	; (801ecfc <httpServer_run+0x2f0>)
 801ebd8:	4613      	mov	r3, r2
 801ebda:	011b      	lsls	r3, r3, #4
 801ebdc:	4413      	add	r3, r2
 801ebde:	009b      	lsls	r3, r3, #2
 801ebe0:	440b      	add	r3, r1
 801ebe2:	3338      	adds	r3, #56	; 0x38
 801ebe4:	681b      	ldr	r3, [r3, #0]
 801ebe6:	2b00      	cmp	r3, #0
 801ebe8:	d009      	beq.n	801ebfe <httpServer_run+0x1f2>
 801ebea:	79fa      	ldrb	r2, [r7, #7]
 801ebec:	4943      	ldr	r1, [pc, #268]	; (801ecfc <httpServer_run+0x2f0>)
 801ebee:	4613      	mov	r3, r2
 801ebf0:	011b      	lsls	r3, r3, #4
 801ebf2:	4413      	add	r3, r2
 801ebf4:	009b      	lsls	r3, r3, #2
 801ebf6:	440b      	add	r3, r1
 801ebf8:	2203      	movs	r2, #3
 801ebfa:	701a      	strb	r2, [r3, #0]
					break;
 801ebfc:	e05c      	b.n	801ecb8 <httpServer_run+0x2ac>
						else HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE; // Send the 'HTTP response' end
 801ebfe:	79fa      	ldrb	r2, [r7, #7]
 801ec00:	493e      	ldr	r1, [pc, #248]	; (801ecfc <httpServer_run+0x2f0>)
 801ec02:	4613      	mov	r3, r2
 801ec04:	011b      	lsls	r3, r3, #4
 801ec06:	4413      	add	r3, r2
 801ec08:	009b      	lsls	r3, r3, #2
 801ec0a:	440b      	add	r3, r1
 801ec0c:	2204      	movs	r2, #4
 801ec0e:	701a      	strb	r2, [r3, #0]
					break;
 801ec10:	e052      	b.n	801ecb8 <httpServer_run+0x2ac>
					send_http_response_body(s, HTTPSock_Status[seqnum].file_name, http_response, 0, 0);
 801ec12:	79fa      	ldrb	r2, [r7, #7]
 801ec14:	4613      	mov	r3, r2
 801ec16:	011b      	lsls	r3, r3, #4
 801ec18:	4413      	add	r3, r2
 801ec1a:	009b      	lsls	r3, r3, #2
 801ec1c:	4a37      	ldr	r2, [pc, #220]	; (801ecfc <httpServer_run+0x2f0>)
 801ec1e:	4413      	add	r3, r2
 801ec20:	1c59      	adds	r1, r3, #1
 801ec22:	4b37      	ldr	r3, [pc, #220]	; (801ed00 <httpServer_run+0x2f4>)
 801ec24:	681a      	ldr	r2, [r3, #0]
 801ec26:	7bf8      	ldrb	r0, [r7, #15]
 801ec28:	2300      	movs	r3, #0
 801ec2a:	9300      	str	r3, [sp, #0]
 801ec2c:	2300      	movs	r3, #0
 801ec2e:	f000 f8d5 	bl	801eddc <send_http_response_body>
					if(HTTPSock_Status[seqnum].file_len == 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE;
 801ec32:	79fa      	ldrb	r2, [r7, #7]
 801ec34:	4931      	ldr	r1, [pc, #196]	; (801ecfc <httpServer_run+0x2f0>)
 801ec36:	4613      	mov	r3, r2
 801ec38:	011b      	lsls	r3, r3, #4
 801ec3a:	4413      	add	r3, r2
 801ec3c:	009b      	lsls	r3, r3, #2
 801ec3e:	440b      	add	r3, r1
 801ec40:	3338      	adds	r3, #56	; 0x38
 801ec42:	681b      	ldr	r3, [r3, #0]
 801ec44:	2b00      	cmp	r3, #0
 801ec46:	d139      	bne.n	801ecbc <httpServer_run+0x2b0>
 801ec48:	79fa      	ldrb	r2, [r7, #7]
 801ec4a:	492c      	ldr	r1, [pc, #176]	; (801ecfc <httpServer_run+0x2f0>)
 801ec4c:	4613      	mov	r3, r2
 801ec4e:	011b      	lsls	r3, r3, #4
 801ec50:	4413      	add	r3, r2
 801ec52:	009b      	lsls	r3, r3, #2
 801ec54:	440b      	add	r3, r1
 801ec56:	2204      	movs	r2, #4
 801ec58:	701a      	strb	r2, [r3, #0]
					break;
 801ec5a:	e02f      	b.n	801ecbc <httpServer_run+0x2b0>
					HTTPSock_Status[seqnum].file_len = 0;
 801ec5c:	79fa      	ldrb	r2, [r7, #7]
 801ec5e:	4927      	ldr	r1, [pc, #156]	; (801ecfc <httpServer_run+0x2f0>)
 801ec60:	4613      	mov	r3, r2
 801ec62:	011b      	lsls	r3, r3, #4
 801ec64:	4413      	add	r3, r2
 801ec66:	009b      	lsls	r3, r3, #2
 801ec68:	440b      	add	r3, r1
 801ec6a:	3338      	adds	r3, #56	; 0x38
 801ec6c:	2200      	movs	r2, #0
 801ec6e:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_offset = 0;
 801ec70:	79fa      	ldrb	r2, [r7, #7]
 801ec72:	4922      	ldr	r1, [pc, #136]	; (801ecfc <httpServer_run+0x2f0>)
 801ec74:	4613      	mov	r3, r2
 801ec76:	011b      	lsls	r3, r3, #4
 801ec78:	4413      	add	r3, r2
 801ec7a:	009b      	lsls	r3, r3, #2
 801ec7c:	440b      	add	r3, r1
 801ec7e:	333c      	adds	r3, #60	; 0x3c
 801ec80:	2200      	movs	r2, #0
 801ec82:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_start = 0;
 801ec84:	79fa      	ldrb	r2, [r7, #7]
 801ec86:	491d      	ldr	r1, [pc, #116]	; (801ecfc <httpServer_run+0x2f0>)
 801ec88:	4613      	mov	r3, r2
 801ec8a:	011b      	lsls	r3, r3, #4
 801ec8c:	4413      	add	r3, r2
 801ec8e:	009b      	lsls	r3, r3, #2
 801ec90:	440b      	add	r3, r1
 801ec92:	3334      	adds	r3, #52	; 0x34
 801ec94:	2200      	movs	r2, #0
 801ec96:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].sock_status = STATE_HTTP_IDLE;
 801ec98:	79fa      	ldrb	r2, [r7, #7]
 801ec9a:	4918      	ldr	r1, [pc, #96]	; (801ecfc <httpServer_run+0x2f0>)
 801ec9c:	4613      	mov	r3, r2
 801ec9e:	011b      	lsls	r3, r3, #4
 801eca0:	4413      	add	r3, r2
 801eca2:	009b      	lsls	r3, r3, #2
 801eca4:	440b      	add	r3, r1
 801eca6:	2200      	movs	r2, #0
 801eca8:	701a      	strb	r2, [r3, #0]
					http_disconnect(s);
 801ecaa:	7bfb      	ldrb	r3, [r7, #15]
 801ecac:	4618      	mov	r0, r3
 801ecae:	f000 fa13 	bl	801f0d8 <http_disconnect>
					break;
 801ecb2:	e004      	b.n	801ecbe <httpServer_run+0x2b2>
					break;
 801ecb4:	bf00      	nop
 801ecb6:	e015      	b.n	801ece4 <httpServer_run+0x2d8>
					break;
 801ecb8:	bf00      	nop
 801ecba:	e013      	b.n	801ece4 <httpServer_run+0x2d8>
					break;
 801ecbc:	bf00      	nop
			}
			break;
 801ecbe:	e011      	b.n	801ece4 <httpServer_run+0x2d8>

		case SOCK_CLOSE_WAIT:
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : ClOSE_WAIT\r\n", s);	// if a peer requests to close the current connection
#endif
			disconnect(s);
 801ecc0:	7bfb      	ldrb	r3, [r7, #15]
 801ecc2:	4618      	mov	r0, r3
 801ecc4:	f7fa f9e8 	bl	8019098 <disconnect>
			break;
 801ecc8:	e00c      	b.n	801ece4 <httpServer_run+0x2d8>

		case SOCK_CLOSED:
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : CLOSED\r\n", s);
#endif
			if(socket(s, Sn_MR_TCP, HTTP_SERVER_PORT, 0x00) == s)    /* Reinitialize the socket */
 801ecca:	7bf8      	ldrb	r0, [r7, #15]
 801eccc:	2300      	movs	r3, #0
 801ecce:	2250      	movs	r2, #80	; 0x50
 801ecd0:	2101      	movs	r1, #1
 801ecd2:	f7f9 ff29 	bl	8018b28 <socket>
//				setsockopt(s, SO_KEEPALIVEAUTO, 0);
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : OPEN\r\n", s);
#endif
			}
			break;
 801ecd6:	e005      	b.n	801ece4 <httpServer_run+0x2d8>

		case SOCK_INIT:
			listen(s);
 801ecd8:	7bfb      	ldrb	r3, [r7, #15]
 801ecda:	4618      	mov	r0, r3
 801ecdc:	f7fa f8a6 	bl	8018e2c <listen>
			break;
 801ece0:	e000      	b.n	801ece4 <httpServer_run+0x2d8>

		case SOCK_FIN_WAIT:
			//close(s);
			break;
		default :
			break;
 801ece2:	bf00      	nop
	} // end of switch

#ifdef _USE_WATCHDOG_
	HTTPServer_WDT_Reset();
#endif
}
 801ece4:	bf00      	nop
 801ece6:	371c      	adds	r7, #28
 801ece8:	46bd      	mov	sp, r7
 801ecea:	bd90      	pop	{r4, r7, pc}
 801ecec:	200012b8 	.word	0x200012b8
 801ecf0:	200011dc 	.word	0x200011dc
 801ecf4:	200012b4 	.word	0x200012b4
 801ecf8:	200011e0 	.word	0x200011e0
 801ecfc:	200012c0 	.word	0x200012c0
 801ed00:	200011e4 	.word	0x200011e4

0801ed04 <send_http_response_header>:

////////////////////////////////////////////
// Private Functions
////////////////////////////////////////////
static void send_http_response_header(uint8_t s, uint8_t content_type, uint32_t body_len, uint16_t http_status)
{
 801ed04:	b590      	push	{r4, r7, lr}
 801ed06:	b083      	sub	sp, #12
 801ed08:	af00      	add	r7, sp, #0
 801ed0a:	603a      	str	r2, [r7, #0]
 801ed0c:	461a      	mov	r2, r3
 801ed0e:	4603      	mov	r3, r0
 801ed10:	71fb      	strb	r3, [r7, #7]
 801ed12:	460b      	mov	r3, r1
 801ed14:	71bb      	strb	r3, [r7, #6]
 801ed16:	4613      	mov	r3, r2
 801ed18:	80bb      	strh	r3, [r7, #4]
	switch(http_status)
 801ed1a:	88bb      	ldrh	r3, [r7, #4]
 801ed1c:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 801ed20:	d029      	beq.n	801ed76 <send_http_response_header+0x72>
 801ed22:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 801ed26:	dc3a      	bgt.n	801ed9e <send_http_response_header+0x9a>
 801ed28:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 801ed2c:	d019      	beq.n	801ed62 <send_http_response_header+0x5e>
 801ed2e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 801ed32:	dc34      	bgt.n	801ed9e <send_http_response_header+0x9a>
 801ed34:	2bc8      	cmp	r3, #200	; 0xc8
 801ed36:	d003      	beq.n	801ed40 <send_http_response_header+0x3c>
 801ed38:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 801ed3c:	d025      	beq.n	801ed8a <send_http_response_header+0x86>
			break;
		case STATUS_MV_TEMP:	// HTTP/1.1 302 Not Found
			memcpy(http_response, REDIRECT_HTML_PAGE, sizeof(REDIRECT_HTML_PAGE));
			break;
		default:
			break;
 801ed3e:	e02e      	b.n	801ed9e <send_http_response_header+0x9a>
			if((content_type != PTYPE_CGI) && (content_type != PTYPE_XML)) // CGI/XML type request does not respond HTTP header
 801ed40:	79bb      	ldrb	r3, [r7, #6]
 801ed42:	2b08      	cmp	r3, #8
 801ed44:	d00a      	beq.n	801ed5c <send_http_response_header+0x58>
 801ed46:	79bb      	ldrb	r3, [r7, #6]
 801ed48:	2b09      	cmp	r3, #9
 801ed4a:	d007      	beq.n	801ed5c <send_http_response_header+0x58>
				make_http_response_head((char*)http_response, content_type, body_len);
 801ed4c:	4b1f      	ldr	r3, [pc, #124]	; (801edcc <send_http_response_header+0xc8>)
 801ed4e:	681b      	ldr	r3, [r3, #0]
 801ed50:	79b9      	ldrb	r1, [r7, #6]
 801ed52:	683a      	ldr	r2, [r7, #0]
 801ed54:	4618      	mov	r0, r3
 801ed56:	f7ff f9ed 	bl	801e134 <make_http_response_head>
			break;
 801ed5a:	e021      	b.n	801eda0 <send_http_response_header+0x9c>
				http_status = 0;
 801ed5c:	2300      	movs	r3, #0
 801ed5e:	80bb      	strh	r3, [r7, #4]
			break;
 801ed60:	e01e      	b.n	801eda0 <send_http_response_header+0x9c>
			memcpy(http_response, ERROR_REQUEST_PAGE, sizeof(ERROR_REQUEST_PAGE));
 801ed62:	4b1a      	ldr	r3, [pc, #104]	; (801edcc <send_http_response_header+0xc8>)
 801ed64:	681b      	ldr	r3, [r3, #0]
 801ed66:	4a1a      	ldr	r2, [pc, #104]	; (801edd0 <send_http_response_header+0xcc>)
 801ed68:	4618      	mov	r0, r3
 801ed6a:	4611      	mov	r1, r2
 801ed6c:	2376      	movs	r3, #118	; 0x76
 801ed6e:	461a      	mov	r2, r3
 801ed70:	f00e fe81 	bl	802da76 <memcpy>
			break;
 801ed74:	e014      	b.n	801eda0 <send_http_response_header+0x9c>
			memcpy(http_response, ERROR_HTML_PAGE, sizeof(ERROR_HTML_PAGE));
 801ed76:	4b15      	ldr	r3, [pc, #84]	; (801edcc <send_http_response_header+0xc8>)
 801ed78:	681b      	ldr	r3, [r3, #0]
 801ed7a:	4a16      	ldr	r2, [pc, #88]	; (801edd4 <send_http_response_header+0xd0>)
 801ed7c:	4618      	mov	r0, r3
 801ed7e:	4611      	mov	r1, r2
 801ed80:	2399      	movs	r3, #153	; 0x99
 801ed82:	461a      	mov	r2, r3
 801ed84:	f00e fe77 	bl	802da76 <memcpy>
			break;
 801ed88:	e00a      	b.n	801eda0 <send_http_response_header+0x9c>
			memcpy(http_response, REDIRECT_HTML_PAGE, sizeof(REDIRECT_HTML_PAGE));
 801ed8a:	4b10      	ldr	r3, [pc, #64]	; (801edcc <send_http_response_header+0xc8>)
 801ed8c:	681b      	ldr	r3, [r3, #0]
 801ed8e:	4a12      	ldr	r2, [pc, #72]	; (801edd8 <send_http_response_header+0xd4>)
 801ed90:	4618      	mov	r0, r3
 801ed92:	4611      	mov	r1, r2
 801ed94:	239e      	movs	r3, #158	; 0x9e
 801ed96:	461a      	mov	r2, r3
 801ed98:	f00e fe6d 	bl	802da76 <memcpy>
			break;
 801ed9c:	e000      	b.n	801eda0 <send_http_response_header+0x9c>
			break;
 801ed9e:	bf00      	nop
	}

	// Send the HTTP Response 'header'
	if(http_status)
 801eda0:	88bb      	ldrh	r3, [r7, #4]
 801eda2:	2b00      	cmp	r3, #0
 801eda4:	d00d      	beq.n	801edc2 <send_http_response_header+0xbe>
	{
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : [Send] HTTP Response Header [ %d ]byte\r\n", s, (uint16_t)strlen((char *)http_response));
#endif
		send(s, http_response, strlen((char *)http_response));
 801eda6:	4b09      	ldr	r3, [pc, #36]	; (801edcc <send_http_response_header+0xc8>)
 801eda8:	681c      	ldr	r4, [r3, #0]
 801edaa:	4b08      	ldr	r3, [pc, #32]	; (801edcc <send_http_response_header+0xc8>)
 801edac:	681b      	ldr	r3, [r3, #0]
 801edae:	4618      	mov	r0, r3
 801edb0:	f7f1 fa76 	bl	80102a0 <strlen>
 801edb4:	4603      	mov	r3, r0
 801edb6:	b29a      	uxth	r2, r3
 801edb8:	79fb      	ldrb	r3, [r7, #7]
 801edba:	4621      	mov	r1, r4
 801edbc:	4618      	mov	r0, r3
 801edbe:	f7fa f9e1 	bl	8019184 <send>
	}
}
 801edc2:	bf00      	nop
 801edc4:	370c      	adds	r7, #12
 801edc6:	46bd      	mov	sp, r7
 801edc8:	bd90      	pop	{r4, r7, pc}
 801edca:	bf00      	nop
 801edcc:	200011e4 	.word	0x200011e4
 801edd0:	08034490 	.word	0x08034490
 801edd4:	080343f4 	.word	0x080343f4
 801edd8:	08034508 	.word	0x08034508

0801eddc <send_http_response_body>:

static void send_http_response_body(uint8_t s, uint8_t * uri_name, uint8_t * buf, uint32_t start_addr, uint32_t file_len)
{
 801eddc:	b580      	push	{r7, lr}
 801edde:	b0a6      	sub	sp, #152	; 0x98
 801ede0:	af00      	add	r7, sp, #0
 801ede2:	60b9      	str	r1, [r7, #8]
 801ede4:	607a      	str	r2, [r7, #4]
 801ede6:	603b      	str	r3, [r7, #0]
 801ede8:	4603      	mov	r3, r0
 801edea:	73fb      	strb	r3, [r7, #15]
	int8_t get_seqnum;
	uint32_t send_len;

	uint8_t flag_datasend_end = 0;
 801edec:	2300      	movs	r3, #0
 801edee:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

#ifdef _USE_USER_SPI_FLASH_
	char tmp_path[PATH_BUF_SIZE] = {0x00, };
 801edf2:	2300      	movs	r3, #0
 801edf4:	613b      	str	r3, [r7, #16]
 801edf6:	f107 0314 	add.w	r3, r7, #20
 801edfa:	227c      	movs	r2, #124	; 0x7c
 801edfc:	2100      	movs	r1, #0
 801edfe:	4618      	mov	r0, r3
 801ee00:	f00e fc64 	bl	802d6cc <memset>
#endif
#ifdef _USE_FLASH_
	uint32_t addr = 0;
#endif

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801ee04:	7bfb      	ldrb	r3, [r7, #15]
 801ee06:	4618      	mov	r0, r3
 801ee08:	f7ff fdc2 	bl	801e990 <getHTTPSequenceNum>
 801ee0c:	4603      	mov	r3, r0
 801ee0e:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 801ee12:	f997 3092 	ldrsb.w	r3, [r7, #146]	; 0x92
 801ee16:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ee1a:	f000 812e 	beq.w	801f07a <send_http_response_body+0x29e>

	// Send the HTTP Response 'body'; requested file
	if(!HTTPSock_Status[get_seqnum].file_len) // ### Send HTTP response body: First part ###
 801ee1e:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ee22:	4998      	ldr	r1, [pc, #608]	; (801f084 <send_http_response_body+0x2a8>)
 801ee24:	4613      	mov	r3, r2
 801ee26:	011b      	lsls	r3, r3, #4
 801ee28:	4413      	add	r3, r2
 801ee2a:	009b      	lsls	r3, r3, #2
 801ee2c:	440b      	add	r3, r1
 801ee2e:	3338      	adds	r3, #56	; 0x38
 801ee30:	681b      	ldr	r3, [r3, #0]
 801ee32:	2b00      	cmp	r3, #0
 801ee34:	d140      	bne.n	801eeb8 <send_http_response_body+0xdc>
	{
		if (file_len > DATA_BUF_SIZE - 1)
 801ee36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ee3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ee3e:	d336      	bcc.n	801eeae <send_http_response_body+0xd2>
		{
			HTTPSock_Status[get_seqnum].file_start = start_addr;
 801ee40:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ee44:	498f      	ldr	r1, [pc, #572]	; (801f084 <send_http_response_body+0x2a8>)
 801ee46:	4613      	mov	r3, r2
 801ee48:	011b      	lsls	r3, r3, #4
 801ee4a:	4413      	add	r3, r2
 801ee4c:	009b      	lsls	r3, r3, #2
 801ee4e:	440b      	add	r3, r1
 801ee50:	3334      	adds	r3, #52	; 0x34
 801ee52:	683a      	ldr	r2, [r7, #0]
 801ee54:	601a      	str	r2, [r3, #0]
			HTTPSock_Status[get_seqnum].file_len = file_len;
 801ee56:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ee5a:	498a      	ldr	r1, [pc, #552]	; (801f084 <send_http_response_body+0x2a8>)
 801ee5c:	4613      	mov	r3, r2
 801ee5e:	011b      	lsls	r3, r3, #4
 801ee60:	4413      	add	r3, r2
 801ee62:	009b      	lsls	r3, r3, #2
 801ee64:	440b      	add	r3, r1
 801ee66:	3338      	adds	r3, #56	; 0x38
 801ee68:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801ee6c:	601a      	str	r2, [r3, #0]
			send_len = DATA_BUF_SIZE - 1;
 801ee6e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801ee72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

/////////////////////////////////////////////////////////////////////////////////////////////////
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
			memset(HTTPSock_Status[get_seqnum].file_name, 0x00, MAX_CONTENT_NAME_LEN);
 801ee76:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ee7a:	4613      	mov	r3, r2
 801ee7c:	011b      	lsls	r3, r3, #4
 801ee7e:	4413      	add	r3, r2
 801ee80:	009b      	lsls	r3, r3, #2
 801ee82:	4a80      	ldr	r2, [pc, #512]	; (801f084 <send_http_response_body+0x2a8>)
 801ee84:	4413      	add	r3, r2
 801ee86:	3301      	adds	r3, #1
 801ee88:	2232      	movs	r2, #50	; 0x32
 801ee8a:	2100      	movs	r1, #0
 801ee8c:	4618      	mov	r0, r3
 801ee8e:	f00e fc1d 	bl	802d6cc <memset>
			strcpy((char *)HTTPSock_Status[get_seqnum].file_name, (char *)uri_name);
 801ee92:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ee96:	4613      	mov	r3, r2
 801ee98:	011b      	lsls	r3, r3, #4
 801ee9a:	4413      	add	r3, r2
 801ee9c:	009b      	lsls	r3, r3, #2
 801ee9e:	4a79      	ldr	r2, [pc, #484]	; (801f084 <send_http_response_body+0x2a8>)
 801eea0:	4413      	add	r3, r2
 801eea2:	3301      	adds	r3, #1
 801eea4:	68b9      	ldr	r1, [r7, #8]
 801eea6:	4618      	mov	r0, r3
 801eea8:	f00e fddd 	bl	802da66 <strcpy>
 801eeac:	e028      	b.n	801ef00 <send_http_response_body+0x124>
#endif
		}
		else
		{
			// Send process end
			send_len = file_len;
 801eeae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801eeb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801eeb6:	e023      	b.n	801ef00 <send_http_response_body+0x124>
		if(HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH)
		{
			addr = HTTPSock_Status[get_seqnum].file_start + HTTPSock_Status[get_seqnum].file_offset;
		}
#endif
		send_len = HTTPSock_Status[get_seqnum].file_len - HTTPSock_Status[get_seqnum].file_offset;
 801eeb8:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801eebc:	4971      	ldr	r1, [pc, #452]	; (801f084 <send_http_response_body+0x2a8>)
 801eebe:	4613      	mov	r3, r2
 801eec0:	011b      	lsls	r3, r3, #4
 801eec2:	4413      	add	r3, r2
 801eec4:	009b      	lsls	r3, r3, #2
 801eec6:	440b      	add	r3, r1
 801eec8:	3338      	adds	r3, #56	; 0x38
 801eeca:	6819      	ldr	r1, [r3, #0]
 801eecc:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801eed0:	486c      	ldr	r0, [pc, #432]	; (801f084 <send_http_response_body+0x2a8>)
 801eed2:	4613      	mov	r3, r2
 801eed4:	011b      	lsls	r3, r3, #4
 801eed6:	4413      	add	r3, r2
 801eed8:	009b      	lsls	r3, r3, #2
 801eeda:	4403      	add	r3, r0
 801eedc:	333c      	adds	r3, #60	; 0x3c
 801eede:	681b      	ldr	r3, [r3, #0]
 801eee0:	1acb      	subs	r3, r1, r3
 801eee2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		if(send_len > DATA_BUF_SIZE - 1)
 801eee6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801eeea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801eeee:	d304      	bcc.n	801eefa <send_http_response_body+0x11e>
		{
			send_len = DATA_BUF_SIZE - 1;
 801eef0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801eef4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801eef8:	e002      	b.n	801ef00 <send_http_response_body+0x124>
		{
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response end - file len [ %ld ]byte\r\n", s, HTTPSock_Status[get_seqnum].file_len);
#endif
			// Send process end
			flag_datasend_end = 1;
 801eefa:	2301      	movs	r3, #1
 801eefc:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	//HTTPSock_Status[get_seqnum]->storage_type == SDCARD
	//HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH
	//HTTPSock_Status[get_seqnum]->storage_type == USERSPIFLASH
/*****************************************************/

	if(HTTPSock_Status[get_seqnum].storage_type == CODEFLASH)
 801ef00:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ef04:	495f      	ldr	r1, [pc, #380]	; (801f084 <send_http_response_body+0x2a8>)
 801ef06:	4613      	mov	r3, r2
 801ef08:	011b      	lsls	r3, r3, #4
 801ef0a:	4413      	add	r3, r2
 801ef0c:	009b      	lsls	r3, r3, #2
 801ef0e:	440b      	add	r3, r1
 801ef10:	3340      	adds	r3, #64	; 0x40
 801ef12:	781b      	ldrb	r3, [r3, #0]
 801ef14:	2b01      	cmp	r3, #1
 801ef16:	d129      	bne.n	801ef6c <send_http_response_body+0x190>
	{
		if(HTTPSock_Status[get_seqnum].file_len) start_addr = HTTPSock_Status[get_seqnum].file_start;
 801ef18:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ef1c:	4959      	ldr	r1, [pc, #356]	; (801f084 <send_http_response_body+0x2a8>)
 801ef1e:	4613      	mov	r3, r2
 801ef20:	011b      	lsls	r3, r3, #4
 801ef22:	4413      	add	r3, r2
 801ef24:	009b      	lsls	r3, r3, #2
 801ef26:	440b      	add	r3, r1
 801ef28:	3338      	adds	r3, #56	; 0x38
 801ef2a:	681b      	ldr	r3, [r3, #0]
 801ef2c:	2b00      	cmp	r3, #0
 801ef2e:	d00a      	beq.n	801ef46 <send_http_response_body+0x16a>
 801ef30:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ef34:	4953      	ldr	r1, [pc, #332]	; (801f084 <send_http_response_body+0x2a8>)
 801ef36:	4613      	mov	r3, r2
 801ef38:	011b      	lsls	r3, r3, #4
 801ef3a:	4413      	add	r3, r2
 801ef3c:	009b      	lsls	r3, r3, #2
 801ef3e:	440b      	add	r3, r1
 801ef40:	3334      	adds	r3, #52	; 0x34
 801ef42:	681b      	ldr	r3, [r3, #0]
 801ef44:	603b      	str	r3, [r7, #0]
		read_userReg_webContent(start_addr, &buf[0], HTTPSock_Status[get_seqnum].file_offset, send_len);
 801ef46:	683b      	ldr	r3, [r7, #0]
 801ef48:	b298      	uxth	r0, r3
 801ef4a:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ef4e:	494d      	ldr	r1, [pc, #308]	; (801f084 <send_http_response_body+0x2a8>)
 801ef50:	4613      	mov	r3, r2
 801ef52:	011b      	lsls	r3, r3, #4
 801ef54:	4413      	add	r3, r2
 801ef56:	009b      	lsls	r3, r3, #2
 801ef58:	440b      	add	r3, r1
 801ef5a:	333c      	adds	r3, #60	; 0x3c
 801ef5c:	681a      	ldr	r2, [r3, #0]
 801ef5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801ef62:	b29b      	uxth	r3, r3
 801ef64:	6879      	ldr	r1, [r7, #4]
 801ef66:	f000 fbc9 	bl	801f6fc <read_userReg_webContent>
 801ef6a:	e035      	b.n	801efd8 <send_http_response_body+0x1fc>
	}

#ifdef _USE_USER_SPI_FLASH_
	else if(HTTPSock_Status[get_seqnum].storage_type == USERSPIFLASH){
 801ef6c:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ef70:	4944      	ldr	r1, [pc, #272]	; (801f084 <send_http_response_body+0x2a8>)
 801ef72:	4613      	mov	r3, r2
 801ef74:	011b      	lsls	r3, r3, #4
 801ef76:	4413      	add	r3, r2
 801ef78:	009b      	lsls	r3, r3, #2
 801ef7a:	440b      	add	r3, r1
 801ef7c:	3340      	adds	r3, #64	; 0x40
 801ef7e:	781b      	ldrb	r3, [r3, #0]
 801ef80:	2b04      	cmp	r3, #4
 801ef82:	d126      	bne.n	801efd2 <send_http_response_body+0x1f6>


		memset(tmp_path, 0x0, PATH_BUF_SIZE);
 801ef84:	f107 0310 	add.w	r3, r7, #16
 801ef88:	2280      	movs	r2, #128	; 0x80
 801ef8a:	2100      	movs	r1, #0
 801ef8c:	4618      	mov	r0, r3
 801ef8e:	f00e fb9d 	bl	802d6cc <memset>
		strcpy((char *)tmp_path, HTTP_FS_DIR);
 801ef92:	f107 0310 	add.w	r3, r7, #16
 801ef96:	4a3c      	ldr	r2, [pc, #240]	; (801f088 <send_http_response_body+0x2ac>)
 801ef98:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ef9c:	6018      	str	r0, [r3, #0]
 801ef9e:	3304      	adds	r3, #4
 801efa0:	7019      	strb	r1, [r3, #0]
		strcat((char *)tmp_path, (const char *)uri_name);
 801efa2:	f107 0310 	add.w	r3, r7, #16
 801efa6:	68b9      	ldr	r1, [r7, #8]
 801efa8:	4618      	mov	r0, r3
 801efaa:	f00e fb97 	bl	802d6dc <strcat>
		spi_fs_read_file_offset((const char *)tmp_path, &buf[0], HTTPSock_Status[get_seqnum].file_offset, send_len);
 801efae:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801efb2:	4934      	ldr	r1, [pc, #208]	; (801f084 <send_http_response_body+0x2a8>)
 801efb4:	4613      	mov	r3, r2
 801efb6:	011b      	lsls	r3, r3, #4
 801efb8:	4413      	add	r3, r2
 801efba:	009b      	lsls	r3, r3, #2
 801efbc:	440b      	add	r3, r1
 801efbe:	333c      	adds	r3, #60	; 0x3c
 801efc0:	681a      	ldr	r2, [r3, #0]
 801efc2:	f107 0010 	add.w	r0, r7, #16
 801efc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801efca:	6879      	ldr	r1, [r7, #4]
 801efcc:	f00b fdf6 	bl	802abbc <spi_fs_read_file_offset>
 801efd0:	e002      	b.n	801efd8 <send_http_response_body+0x1fc>
		*(buf+send_len+1) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
	}
#endif
	else
	{
		send_len = 0;
 801efd2:	2300      	movs	r3, #0
 801efd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	// Requested content send to HTTP client
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : [Send] HTTP Response body [ %ld ]byte\r\n", s, send_len);
#endif

	if(send_len) send(s, buf, send_len);
 801efd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801efdc:	2b00      	cmp	r3, #0
 801efde:	d008      	beq.n	801eff2 <send_http_response_body+0x216>
 801efe0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801efe4:	b29a      	uxth	r2, r3
 801efe6:	7bfb      	ldrb	r3, [r7, #15]
 801efe8:	6879      	ldr	r1, [r7, #4]
 801efea:	4618      	mov	r0, r3
 801efec:	f7fa f8ca 	bl	8019184 <send>
 801eff0:	e002      	b.n	801eff8 <send_http_response_body+0x21c>
	else flag_datasend_end = 1;
 801eff2:	2301      	movs	r3, #1
 801eff4:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

	if(flag_datasend_end)
 801eff8:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 801effc:	2b00      	cmp	r3, #0
 801effe:	d024      	beq.n	801f04a <send_http_response_body+0x26e>
	{
		HTTPSock_Status[get_seqnum].file_start = 0;
 801f000:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f004:	491f      	ldr	r1, [pc, #124]	; (801f084 <send_http_response_body+0x2a8>)
 801f006:	4613      	mov	r3, r2
 801f008:	011b      	lsls	r3, r3, #4
 801f00a:	4413      	add	r3, r2
 801f00c:	009b      	lsls	r3, r3, #2
 801f00e:	440b      	add	r3, r1
 801f010:	3334      	adds	r3, #52	; 0x34
 801f012:	2200      	movs	r2, #0
 801f014:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_len = 0;
 801f016:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f01a:	491a      	ldr	r1, [pc, #104]	; (801f084 <send_http_response_body+0x2a8>)
 801f01c:	4613      	mov	r3, r2
 801f01e:	011b      	lsls	r3, r3, #4
 801f020:	4413      	add	r3, r2
 801f022:	009b      	lsls	r3, r3, #2
 801f024:	440b      	add	r3, r1
 801f026:	3338      	adds	r3, #56	; 0x38
 801f028:	2200      	movs	r2, #0
 801f02a:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_offset = 0;
 801f02c:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f030:	4914      	ldr	r1, [pc, #80]	; (801f084 <send_http_response_body+0x2a8>)
 801f032:	4613      	mov	r3, r2
 801f034:	011b      	lsls	r3, r3, #4
 801f036:	4413      	add	r3, r2
 801f038:	009b      	lsls	r3, r3, #2
 801f03a:	440b      	add	r3, r1
 801f03c:	333c      	adds	r3, #60	; 0x3c
 801f03e:	2200      	movs	r2, #0
 801f040:	601a      	str	r2, [r3, #0]
		flag_datasend_end = 0;
 801f042:	2300      	movs	r3, #0
 801f044:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 801f048:	e018      	b.n	801f07c <send_http_response_body+0x2a0>
	}
	else
	{
		HTTPSock_Status[get_seqnum].file_offset += send_len;
 801f04a:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f04e:	490d      	ldr	r1, [pc, #52]	; (801f084 <send_http_response_body+0x2a8>)
 801f050:	4613      	mov	r3, r2
 801f052:	011b      	lsls	r3, r3, #4
 801f054:	4413      	add	r3, r2
 801f056:	009b      	lsls	r3, r3, #2
 801f058:	440b      	add	r3, r1
 801f05a:	333c      	adds	r3, #60	; 0x3c
 801f05c:	6819      	ldr	r1, [r3, #0]
 801f05e:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f062:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f066:	4419      	add	r1, r3
 801f068:	4806      	ldr	r0, [pc, #24]	; (801f084 <send_http_response_body+0x2a8>)
 801f06a:	4613      	mov	r3, r2
 801f06c:	011b      	lsls	r3, r3, #4
 801f06e:	4413      	add	r3, r2
 801f070:	009b      	lsls	r3, r3, #2
 801f072:	4403      	add	r3, r0
 801f074:	333c      	adds	r3, #60	; 0x3c
 801f076:	6019      	str	r1, [r3, #0]
 801f078:	e000      	b.n	801f07c <send_http_response_body+0x2a0>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801f07a:	bf00      	nop
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
#ifdef _USE_SDCARD_
	f_close(&fs);
#endif
// ## 20141219 added end
}
 801f07c:	3798      	adds	r7, #152	; 0x98
 801f07e:	46bd      	mov	sp, r7
 801f080:	bd80      	pop	{r7, pc}
 801f082:	bf00      	nop
 801f084:	200012c0 	.word	0x200012c0
 801f088:	08033144 	.word	0x08033144

0801f08c <send_http_response_cgi>:

static void send_http_response_cgi(uint8_t s, uint8_t * buf, uint8_t * http_body, uint16_t file_len)
{
 801f08c:	b580      	push	{r7, lr}
 801f08e:	b088      	sub	sp, #32
 801f090:	af02      	add	r7, sp, #8
 801f092:	60b9      	str	r1, [r7, #8]
 801f094:	607a      	str	r2, [r7, #4]
 801f096:	461a      	mov	r2, r3
 801f098:	4603      	mov	r3, r0
 801f09a:	73fb      	strb	r3, [r7, #15]
 801f09c:	4613      	mov	r3, r2
 801f09e:	81bb      	strh	r3, [r7, #12]
	uint16_t send_len = 0;
 801f0a0:	2300      	movs	r3, #0
 801f0a2:	82fb      	strh	r3, [r7, #22]

#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - CGI\r\n", s);
#endif
	send_len = sprintf((char *)buf, "%s%d\r\n\r\n%s", RES_CGIHEAD_OK_CHANGED, file_len, http_body);
 801f0a4:	89ba      	ldrh	r2, [r7, #12]
 801f0a6:	687b      	ldr	r3, [r7, #4]
 801f0a8:	9300      	str	r3, [sp, #0]
 801f0aa:	4613      	mov	r3, r2
 801f0ac:	4a08      	ldr	r2, [pc, #32]	; (801f0d0 <send_http_response_cgi+0x44>)
 801f0ae:	4909      	ldr	r1, [pc, #36]	; (801f0d4 <send_http_response_cgi+0x48>)
 801f0b0:	68b8      	ldr	r0, [r7, #8]
 801f0b2:	f00e f9bb 	bl	802d42c <siprintf>
 801f0b6:	4603      	mov	r3, r0
 801f0b8:	82fb      	strh	r3, [r7, #22]
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - send len [ %d ]byte\r\n", s, send_len);
#endif

	send(s, buf, send_len);
 801f0ba:	8afa      	ldrh	r2, [r7, #22]
 801f0bc:	7bfb      	ldrb	r3, [r7, #15]
 801f0be:	68b9      	ldr	r1, [r7, #8]
 801f0c0:	4618      	mov	r0, r3
 801f0c2:	f7fa f85f 	bl	8019184 <send>
}
 801f0c6:	bf00      	nop
 801f0c8:	3718      	adds	r7, #24
 801f0ca:	46bd      	mov	sp, r7
 801f0cc:	bd80      	pop	{r7, pc}
 801f0ce:	bf00      	nop
 801f0d0:	0803314c 	.word	0x0803314c
 801f0d4:	080331a8 	.word	0x080331a8

0801f0d8 <http_disconnect>:


static int8_t http_disconnect(uint8_t sn)
{
 801f0d8:	b580      	push	{r7, lr}
 801f0da:	b082      	sub	sp, #8
 801f0dc:	af00      	add	r7, sp, #0
 801f0de:	4603      	mov	r3, r0
 801f0e0:	71fb      	strb	r3, [r7, #7]
	setSn_CR(sn,Sn_CR_DISCON);
 801f0e2:	79fb      	ldrb	r3, [r7, #7]
 801f0e4:	009b      	lsls	r3, r3, #2
 801f0e6:	3301      	adds	r3, #1
 801f0e8:	00db      	lsls	r3, r3, #3
 801f0ea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801f0ee:	2108      	movs	r1, #8
 801f0f0:	4618      	mov	r0, r3
 801f0f2:	f7f9 fa75 	bl	80185e0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 801f0f6:	bf00      	nop
 801f0f8:	79fb      	ldrb	r3, [r7, #7]
 801f0fa:	009b      	lsls	r3, r3, #2
 801f0fc:	3301      	adds	r3, #1
 801f0fe:	00db      	lsls	r3, r3, #3
 801f100:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801f104:	4618      	mov	r0, r3
 801f106:	f7f9 fa1f 	bl	8018548 <WIZCHIP_READ>
 801f10a:	4603      	mov	r3, r0
 801f10c:	2b00      	cmp	r3, #0
 801f10e:	d1f3      	bne.n	801f0f8 <http_disconnect+0x20>

	return SOCK_OK;
 801f110:	2301      	movs	r3, #1
}
 801f112:	4618      	mov	r0, r3
 801f114:	3708      	adds	r7, #8
 801f116:	46bd      	mov	sp, r7
 801f118:	bd80      	pop	{r7, pc}
	...

0801f11c <http_process_handler>:


static void http_process_handler(uint8_t s, st_http_request * p_http_request)
{
 801f11c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801f120:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 801f124:	af02      	add	r7, sp, #8
 801f126:	4602      	mov	r2, r0
 801f128:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f12c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f130:	6019      	str	r1, [r3, #0]
 801f132:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f136:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f13a:	701a      	strb	r2, [r3, #0]
	uint8_t * uri_name;
	uint32_t content_addr = 0;
 801f13c:	2300      	movs	r3, #0
 801f13e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	uint16_t content_num = 0;
 801f142:	2300      	movs	r3, #0
 801f144:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
	uint32_t file_len = 0;
 801f148:	2300      	movs	r3, #0
 801f14a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208

	uint8_t uri_buf[MAX_URI_SIZE]={0x00, };
 801f14e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f152:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801f156:	2200      	movs	r2, #0
 801f158:	601a      	str	r2, [r3, #0]
 801f15a:	3304      	adds	r3, #4
 801f15c:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 801f160:	2100      	movs	r1, #0
 801f162:	4618      	mov	r0, r3
 801f164:	f00e fab2 	bl	802d6cc <memset>
	uint16_t http_status;
	int8_t get_seqnum;
	uint8_t content_found;

#ifdef _USE_USER_SPI_FLASH_
	int64_t err = 0;
 801f168:	f04f 0200 	mov.w	r2, #0
 801f16c:	f04f 0300 	mov.w	r3, #0
 801f170:	e9c7 2386 	strd	r2, r3, [r7, #536]	; 0x218
#endif

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801f174:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f178:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f17c:	781b      	ldrb	r3, [r3, #0]
 801f17e:	4618      	mov	r0, r3
 801f180:	f7ff fc06 	bl	801e990 <getHTTPSequenceNum>
 801f184:	4603      	mov	r3, r0
 801f186:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 801f18a:	f997 3217 	ldrsb.w	r3, [r7, #535]	; 0x217
 801f18e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f192:	f000 81e5 	beq.w	801f560 <http_process_handler+0x444>

	http_status = 0;
 801f196:	2300      	movs	r3, #0
 801f198:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
	http_response = pHTTP_RX;
 801f19c:	4ba6      	ldr	r3, [pc, #664]	; (801f438 <http_process_handler+0x31c>)
 801f19e:	681b      	ldr	r3, [r3, #0]
 801f1a0:	4aa6      	ldr	r2, [pc, #664]	; (801f43c <http_process_handler+0x320>)
 801f1a2:	6013      	str	r3, [r2, #0]
	file_len = 0;
 801f1a4:	2300      	movs	r3, #0
 801f1a6:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208


	//method Analyze
	switch (p_http_request->METHOD)
 801f1aa:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f1ae:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f1b2:	681b      	ldr	r3, [r3, #0]
 801f1b4:	781b      	ldrb	r3, [r3, #0]
 801f1b6:	2b03      	cmp	r3, #3
 801f1b8:	f000 8154 	beq.w	801f464 <http_process_handler+0x348>
 801f1bc:	2b03      	cmp	r3, #3
 801f1be:	f300 81be 	bgt.w	801f53e <http_process_handler+0x422>
 801f1c2:	2b00      	cmp	r3, #0
 801f1c4:	d007      	beq.n	801f1d6 <http_process_handler+0xba>
 801f1c6:	2b00      	cmp	r3, #0
 801f1c8:	f2c0 81b9 	blt.w	801f53e <http_process_handler+0x422>
 801f1cc:	3b01      	subs	r3, #1
 801f1ce:	2b01      	cmp	r3, #1
 801f1d0:	f200 81b5 	bhi.w	801f53e <http_process_handler+0x422>
 801f1d4:	e010      	b.n	801f1f8 <http_process_handler+0xdc>
	{
		case METHOD_ERR :
			http_status = STATUS_BAD_REQ;
 801f1d6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801f1da:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
			send_http_response_header(s, 0, 0, http_status);
 801f1de:	f8b7 2222 	ldrh.w	r2, [r7, #546]	; 0x222
 801f1e2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f1e6:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f1ea:	7818      	ldrb	r0, [r3, #0]
 801f1ec:	4613      	mov	r3, r2
 801f1ee:	2200      	movs	r2, #0
 801f1f0:	2100      	movs	r1, #0
 801f1f2:	f7ff fd87 	bl	801ed04 <send_http_response_header>
			break;
 801f1f6:	e1b6      	b.n	801f566 <http_process_handler+0x44a>

		case METHOD_HEAD :
		case METHOD_GET :
			get_http_uri_name(p_http_request->URI, uri_buf);
 801f1f8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f1fc:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f200:	681b      	ldr	r3, [r3, #0]
 801f202:	3302      	adds	r3, #2
 801f204:	f107 0208 	add.w	r2, r7, #8
 801f208:	4611      	mov	r1, r2
 801f20a:	4618      	mov	r0, r3
 801f20c:	f7ff fad6 	bl	801e7bc <get_http_uri_name>
			uri_name = uri_buf;
 801f210:	f107 0308 	add.w	r3, r7, #8
 801f214:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

			if (!strcmp((char *)uri_name, "/")) strcpy((char *)uri_name, INITIAL_WEBPAGE);	// If URI is "/", respond by index.html
 801f218:	4989      	ldr	r1, [pc, #548]	; (801f440 <http_process_handler+0x324>)
 801f21a:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f21e:	f7f0 ffdf 	bl	80101e0 <strcmp>
 801f222:	4603      	mov	r3, r0
 801f224:	2b00      	cmp	r3, #0
 801f226:	d10b      	bne.n	801f240 <http_process_handler+0x124>
 801f228:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801f22c:	4985      	ldr	r1, [pc, #532]	; (801f444 <http_process_handler+0x328>)
 801f22e:	461a      	mov	r2, r3
 801f230:	460b      	mov	r3, r1
 801f232:	cb03      	ldmia	r3!, {r0, r1}
 801f234:	6010      	str	r0, [r2, #0]
 801f236:	6051      	str	r1, [r2, #4]
 801f238:	8819      	ldrh	r1, [r3, #0]
 801f23a:	789b      	ldrb	r3, [r3, #2]
 801f23c:	8111      	strh	r1, [r2, #8]
 801f23e:	7293      	strb	r3, [r2, #10]
			if (!strcmp((char *)uri_name, "m")) strcpy((char *)uri_name, M_INITIAL_WEBPAGE);
 801f240:	4981      	ldr	r1, [pc, #516]	; (801f448 <http_process_handler+0x32c>)
 801f242:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f246:	f7f0 ffcb 	bl	80101e0 <strcmp>
 801f24a:	4603      	mov	r3, r0
 801f24c:	2b00      	cmp	r3, #0
 801f24e:	d10a      	bne.n	801f266 <http_process_handler+0x14a>
 801f250:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801f254:	4a7d      	ldr	r2, [pc, #500]	; (801f44c <http_process_handler+0x330>)
 801f256:	461c      	mov	r4, r3
 801f258:	4613      	mov	r3, r2
 801f25a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801f25c:	6020      	str	r0, [r4, #0]
 801f25e:	6061      	str	r1, [r4, #4]
 801f260:	60a2      	str	r2, [r4, #8]
 801f262:	781b      	ldrb	r3, [r3, #0]
 801f264:	7323      	strb	r3, [r4, #12]
			if (!strcmp((char *)uri_name, "mobile")) strcpy((char *)uri_name, MOBILE_INITIAL_WEBPAGE);
 801f266:	497a      	ldr	r1, [pc, #488]	; (801f450 <http_process_handler+0x334>)
 801f268:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f26c:	f7f0 ffb8 	bl	80101e0 <strcmp>
 801f270:	4603      	mov	r3, r0
 801f272:	2b00      	cmp	r3, #0
 801f274:	d10b      	bne.n	801f28e <http_process_handler+0x172>
 801f276:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801f27a:	4a76      	ldr	r2, [pc, #472]	; (801f454 <http_process_handler+0x338>)
 801f27c:	461d      	mov	r5, r3
 801f27e:	4614      	mov	r4, r2
 801f280:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801f282:	6028      	str	r0, [r5, #0]
 801f284:	6069      	str	r1, [r5, #4]
 801f286:	60aa      	str	r2, [r5, #8]
 801f288:	60eb      	str	r3, [r5, #12]
 801f28a:	8823      	ldrh	r3, [r4, #0]
 801f28c:	822b      	strh	r3, [r5, #16]
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Checking requested file types (HTML, TEXT, GIF, JPEG and Etc. are included)
 801f28e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f292:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f296:	681b      	ldr	r3, [r3, #0]
 801f298:	3301      	adds	r3, #1
 801f29a:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801f29e:	4618      	mov	r0, r3
 801f2a0:	f7fe fffe 	bl	801e2a0 <find_http_uri_type>
			printf("\r\n> HTTPSocket[%d] : HTTP Method GET\r\n", s);
			printf("> HTTPSocket[%d] : Request Type = %d\r\n", s, p_http_request->TYPE);
			printf("> HTTPSocket[%d] : Request URI = %s\r\n", s, uri_name);
#endif

			if(p_http_request->TYPE == PTYPE_CGI)
 801f2a4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f2a8:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f2ac:	681b      	ldr	r3, [r3, #0]
 801f2ae:	785b      	ldrb	r3, [r3, #1]
 801f2b0:	2b08      	cmp	r3, #8
 801f2b2:	d131      	bne.n	801f318 <http_process_handler+0x1fc>
			{
				content_found = http_get_cgi_handler(uri_name, pHTTP_TX, &file_len);
 801f2b4:	4b68      	ldr	r3, [pc, #416]	; (801f458 <http_process_handler+0x33c>)
 801f2b6:	681b      	ldr	r3, [r3, #0]
 801f2b8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 801f2bc:	4619      	mov	r1, r3
 801f2be:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f2c2:	f000 fa59 	bl	801f778 <http_get_cgi_handler>
 801f2c6:	4603      	mov	r3, r0
 801f2c8:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK_CHANGED)+8))))
 801f2cc:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 801f2d0:	2b00      	cmp	r3, #0
 801f2d2:	d015      	beq.n	801f300 <http_process_handler+0x1e4>
 801f2d4:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f2d8:	f240 729e 	movw	r2, #1950	; 0x79e
 801f2dc:	4293      	cmp	r3, r2
 801f2de:	d80f      	bhi.n	801f300 <http_process_handler+0x1e4>
				{
					send_http_response_cgi(s, http_response, pHTTP_TX, (uint16_t)file_len);
 801f2e0:	4b56      	ldr	r3, [pc, #344]	; (801f43c <http_process_handler+0x320>)
 801f2e2:	6819      	ldr	r1, [r3, #0]
 801f2e4:	4b5c      	ldr	r3, [pc, #368]	; (801f458 <http_process_handler+0x33c>)
 801f2e6:	681a      	ldr	r2, [r3, #0]
 801f2e8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f2ec:	b29c      	uxth	r4, r3
 801f2ee:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f2f2:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f2f6:	7818      	ldrb	r0, [r3, #0]
 801f2f8:	4623      	mov	r3, r4
 801f2fa:	f7ff fec7 	bl	801f08c <send_http_response_cgi>
				if(http_status == STATUS_OK)
				{
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
				}
			}
			break;
 801f2fe:	e131      	b.n	801f564 <http_process_handler+0x448>
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 801f300:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f304:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f308:	7818      	ldrb	r0, [r3, #0]
 801f30a:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801f30e:	2200      	movs	r2, #0
 801f310:	2108      	movs	r1, #8
 801f312:	f7ff fcf7 	bl	801ed04 <send_http_response_header>
			break;
 801f316:	e125      	b.n	801f564 <http_process_handler+0x448>
				if(0 < ( err = spi_fs_serch_file_in_dir(HTTP_FS_DIR, (const char *)uri_name)))/* Read content from spi flash */
 801f318:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801f31c:	484f      	ldr	r0, [pc, #316]	; (801f45c <http_process_handler+0x340>)
 801f31e:	f00b fd27 	bl	802ad70 <spi_fs_serch_file_in_dir>
 801f322:	4603      	mov	r3, r0
 801f324:	17da      	asrs	r2, r3, #31
 801f326:	4698      	mov	r8, r3
 801f328:	4691      	mov	r9, r2
 801f32a:	e9c7 8986 	strd	r8, r9, [r7, #536]	; 0x218
 801f32e:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 801f332:	2a01      	cmp	r2, #1
 801f334:	f173 0300 	sbcs.w	r3, r3, #0
 801f338:	db12      	blt.n	801f360 <http_process_handler+0x244>
					file_len = err;
 801f33a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801f33e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
					content_found = 1;
 801f342:	2301      	movs	r3, #1
 801f344:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
					HTTPSock_Status[get_seqnum].storage_type = USERSPIFLASH;
 801f348:	f997 2217 	ldrsb.w	r2, [r7, #535]	; 0x217
 801f34c:	4944      	ldr	r1, [pc, #272]	; (801f460 <http_process_handler+0x344>)
 801f34e:	4613      	mov	r3, r2
 801f350:	011b      	lsls	r3, r3, #4
 801f352:	4413      	add	r3, r2
 801f354:	009b      	lsls	r3, r3, #2
 801f356:	440b      	add	r3, r1
 801f358:	3340      	adds	r3, #64	; 0x40
 801f35a:	2204      	movs	r2, #4
 801f35c:	701a      	strb	r2, [r3, #0]
 801f35e:	e024      	b.n	801f3aa <http_process_handler+0x28e>
				else if(find_userReg_webContent(uri_buf, &content_num, &file_len))
 801f360:	f507 7202 	add.w	r2, r7, #520	; 0x208
 801f364:	f207 210e 	addw	r1, r7, #526	; 0x20e
 801f368:	f107 0308 	add.w	r3, r7, #8
 801f36c:	4618      	mov	r0, r3
 801f36e:	f000 f989 	bl	801f684 <find_userReg_webContent>
 801f372:	4603      	mov	r3, r0
 801f374:	2b00      	cmp	r3, #0
 801f376:	d012      	beq.n	801f39e <http_process_handler+0x282>
					content_found = 1; // Web content found in code flash memory
 801f378:	2301      	movs	r3, #1
 801f37a:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
					content_addr = (uint32_t)content_num;
 801f37e:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 801f382:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
					HTTPSock_Status[get_seqnum].storage_type = CODEFLASH;
 801f386:	f997 2217 	ldrsb.w	r2, [r7, #535]	; 0x217
 801f38a:	4935      	ldr	r1, [pc, #212]	; (801f460 <http_process_handler+0x344>)
 801f38c:	4613      	mov	r3, r2
 801f38e:	011b      	lsls	r3, r3, #4
 801f390:	4413      	add	r3, r2
 801f392:	009b      	lsls	r3, r3, #2
 801f394:	440b      	add	r3, r1
 801f396:	3340      	adds	r3, #64	; 0x40
 801f398:	2201      	movs	r2, #1
 801f39a:	701a      	strb	r2, [r3, #0]
 801f39c:	e005      	b.n	801f3aa <http_process_handler+0x28e>
					content_found = 0; // fail to find content
 801f39e:	2300      	movs	r3, #0
 801f3a0:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
					file_len = 0;
 801f3a4:	2300      	movs	r3, #0
 801f3a6:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
				if(!content_found)
 801f3aa:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 801f3ae:	2b00      	cmp	r3, #0
 801f3b0:	d111      	bne.n	801f3d6 <http_process_handler+0x2ba>
					if (!strcmp((char *)uri_name, INITIAL_WEBPAGE)){
 801f3b2:	4924      	ldr	r1, [pc, #144]	; (801f444 <http_process_handler+0x328>)
 801f3b4:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f3b8:	f7f0 ff12 	bl	80101e0 <strcmp>
 801f3bc:	4603      	mov	r3, r0
 801f3be:	2b00      	cmp	r3, #0
 801f3c0:	d104      	bne.n	801f3cc <http_process_handler+0x2b0>
						http_status = STATUS_NOT_FOUND;
 801f3c2:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801f3c6:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
 801f3ca:	e007      	b.n	801f3dc <http_process_handler+0x2c0>
						http_status = STATUS_MV_TEMP;
 801f3cc:	f44f 7397 	mov.w	r3, #302	; 0x12e
 801f3d0:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
 801f3d4:	e002      	b.n	801f3dc <http_process_handler+0x2c0>
					http_status = STATUS_OK;
 801f3d6:	23c8      	movs	r3, #200	; 0xc8
 801f3d8:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
				if(http_status)
 801f3dc:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 801f3e0:	2b00      	cmp	r3, #0
 801f3e2:	d011      	beq.n	801f408 <http_process_handler+0x2ec>
					send_http_response_header(s, p_http_request->TYPE, file_len, http_status);
 801f3e4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f3e8:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f3ec:	681b      	ldr	r3, [r3, #0]
 801f3ee:	7859      	ldrb	r1, [r3, #1]
 801f3f0:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 801f3f4:	f8b7 4222 	ldrh.w	r4, [r7, #546]	; 0x222
 801f3f8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f3fc:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f400:	7818      	ldrb	r0, [r3, #0]
 801f402:	4623      	mov	r3, r4
 801f404:	f7ff fc7e 	bl	801ed04 <send_http_response_header>
				if(http_status == STATUS_OK)
 801f408:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 801f40c:	2bc8      	cmp	r3, #200	; 0xc8
 801f40e:	f040 80a9 	bne.w	801f564 <http_process_handler+0x448>
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
 801f412:	4b0a      	ldr	r3, [pc, #40]	; (801f43c <http_process_handler+0x320>)
 801f414:	6819      	ldr	r1, [r3, #0]
 801f416:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f41a:	f507 720a 	add.w	r2, r7, #552	; 0x228
 801f41e:	f2a2 2221 	subw	r2, r2, #545	; 0x221
 801f422:	7810      	ldrb	r0, [r2, #0]
 801f424:	9300      	str	r3, [sp, #0]
 801f426:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801f42a:	460a      	mov	r2, r1
 801f42c:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801f430:	f7ff fcd4 	bl	801eddc <send_http_response_body>
			break;
 801f434:	e096      	b.n	801f564 <http_process_handler+0x448>
 801f436:	bf00      	nop
 801f438:	200012b8 	.word	0x200012b8
 801f43c:	200011e4 	.word	0x200011e4
 801f440:	080331b4 	.word	0x080331b4
 801f444:	080331b8 	.word	0x080331b8
 801f448:	080331c4 	.word	0x080331c4
 801f44c:	080331c8 	.word	0x080331c8
 801f450:	080331d8 	.word	0x080331d8
 801f454:	080331e0 	.word	0x080331e0
 801f458:	200012b4 	.word	0x200012b4
 801f45c:	08033144 	.word	0x08033144
 801f460:	200012c0 	.word	0x200012c0

		case METHOD_POST :
			mid((char *)p_http_request->URI, "/", " HTTP", (char *)uri_buf);
 801f464:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f468:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f46c:	681b      	ldr	r3, [r3, #0]
 801f46e:	1c98      	adds	r0, r3, #2
 801f470:	f107 0308 	add.w	r3, r7, #8
 801f474:	4a3e      	ldr	r2, [pc, #248]	; (801f570 <http_process_handler+0x454>)
 801f476:	493f      	ldr	r1, [pc, #252]	; (801f574 <http_process_handler+0x458>)
 801f478:	f7ff f9ef 	bl	801e85a <mid>
			uri_name = uri_buf;
 801f47c:	f107 0308 	add.w	r3, r7, #8
 801f480:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Check file type (HTML, TEXT, GIF, JPEG are included)
 801f484:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f488:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f48c:	681b      	ldr	r3, [r3, #0]
 801f48e:	3301      	adds	r3, #1
 801f490:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801f494:	4618      	mov	r0, r3
 801f496:	f7fe ff03 	bl	801e2a0 <find_http_uri_type>
			printf("\r\n> HTTPSocket[%d] : HTTP Method POST\r\n", s);
			printf("> HTTPSocket[%d] : Request URI = %s ", s, uri_name);
			printf("Type = %d\r\n", p_http_request->TYPE);
#endif

			if(p_http_request->TYPE == PTYPE_CGI)	// HTTP POST Method; CGI Process
 801f49a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f49e:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f4a2:	681b      	ldr	r3, [r3, #0]
 801f4a4:	785b      	ldrb	r3, [r3, #1]
 801f4a6:	2b08      	cmp	r3, #8
 801f4a8:	d13c      	bne.n	801f524 <http_process_handler+0x408>
			{
				content_found = http_post_cgi_handler(uri_name, p_http_request, http_response, &file_len);
 801f4aa:	4b33      	ldr	r3, [pc, #204]	; (801f578 <http_process_handler+0x45c>)
 801f4ac:	681a      	ldr	r2, [r3, #0]
 801f4ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801f4b2:	f507 710a 	add.w	r1, r7, #552	; 0x228
 801f4b6:	f5a1 710a 	sub.w	r1, r1, #552	; 0x228
 801f4ba:	6809      	ldr	r1, [r1, #0]
 801f4bc:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f4c0:	f000 f988 	bl	801f7d4 <http_post_cgi_handler>
 801f4c4:	4603      	mov	r3, r0
 801f4c6:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : [CGI: %s] / Response len [ %ld ]byte\r\n", s, content_found?"Content found":"Content not found", file_len);
#endif
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK)+8))))
 801f4ca:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 801f4ce:	2b00      	cmp	r3, #0
 801f4d0:	d01c      	beq.n	801f50c <http_process_handler+0x3f0>
 801f4d2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f4d6:	f240 72be 	movw	r2, #1982	; 0x7be
 801f4da:	4293      	cmp	r3, r2
 801f4dc:	d816      	bhi.n	801f50c <http_process_handler+0x3f0>
				{
					send_http_response_cgi(s, pHTTP_TX, http_response, (uint16_t)file_len);
 801f4de:	4b27      	ldr	r3, [pc, #156]	; (801f57c <http_process_handler+0x460>)
 801f4e0:	6819      	ldr	r1, [r3, #0]
 801f4e2:	4b25      	ldr	r3, [pc, #148]	; (801f578 <http_process_handler+0x45c>)
 801f4e4:	681a      	ldr	r2, [r3, #0]
 801f4e6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f4ea:	b29c      	uxth	r4, r3
 801f4ec:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f4f0:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f4f4:	7818      	ldrb	r0, [r3, #0]
 801f4f6:	4623      	mov	r3, r4
 801f4f8:	f7ff fdc8 	bl	801f08c <send_http_response_cgi>
					//TODO, maybefix
					//http_disconnect(s);

					// Reset the H/W for apply to the change configuration information
					if(content_found == HTTP_RESET) HTTPServer_ReStart();
 801f4fc:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 801f500:	2b02      	cmp	r3, #2
 801f502:	d11b      	bne.n	801f53c <http_process_handler+0x420>
 801f504:	4b1e      	ldr	r3, [pc, #120]	; (801f580 <http_process_handler+0x464>)
 801f506:	681b      	ldr	r3, [r3, #0]
 801f508:	4798      	blx	r3
 801f50a:	e017      	b.n	801f53c <http_process_handler+0x420>
				}
				else
				{
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 801f50c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f510:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f514:	7818      	ldrb	r0, [r3, #0]
 801f516:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801f51a:	2200      	movs	r2, #0
 801f51c:	2108      	movs	r1, #8
 801f51e:	f7ff fbf1 	bl	801ed04 <send_http_response_header>
			}
			else	// HTTP POST Method; Content not found
			{
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
			}
			break;
 801f522:	e020      	b.n	801f566 <http_process_handler+0x44a>
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
 801f524:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f528:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f52c:	7818      	ldrb	r0, [r3, #0]
 801f52e:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801f532:	2200      	movs	r2, #0
 801f534:	2100      	movs	r1, #0
 801f536:	f7ff fbe5 	bl	801ed04 <send_http_response_header>
			break;
 801f53a:	e014      	b.n	801f566 <http_process_handler+0x44a>
 801f53c:	e013      	b.n	801f566 <http_process_handler+0x44a>

		default :
			http_status = STATUS_BAD_REQ;
 801f53e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801f542:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
			send_http_response_header(s, 0, 0, http_status);
 801f546:	f8b7 2222 	ldrh.w	r2, [r7, #546]	; 0x222
 801f54a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f54e:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f552:	7818      	ldrb	r0, [r3, #0]
 801f554:	4613      	mov	r3, r2
 801f556:	2200      	movs	r2, #0
 801f558:	2100      	movs	r1, #0
 801f55a:	f7ff fbd3 	bl	801ed04 <send_http_response_header>
			break;
 801f55e:	e002      	b.n	801f566 <http_process_handler+0x44a>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801f560:	bf00      	nop
 801f562:	e000      	b.n	801f566 <http_process_handler+0x44a>
			break;
 801f564:	bf00      	nop
	}
}
 801f566:	f507 770a 	add.w	r7, r7, #552	; 0x228
 801f56a:	46bd      	mov	sp, r7
 801f56c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801f570:	080331f4 	.word	0x080331f4
 801f574:	080331b4 	.word	0x080331b4
 801f578:	200011e4 	.word	0x200011e4
 801f57c:	200012b4 	.word	0x200012b4
 801f580:	20000120 	.word	0x20000120

0801f584 <httpServer_time_handler>:

void httpServer_time_handler(void)
{
 801f584:	b480      	push	{r7}
 801f586:	af00      	add	r7, sp, #0
	httpServer_tick_1s++;
 801f588:	4b04      	ldr	r3, [pc, #16]	; (801f59c <httpServer_time_handler+0x18>)
 801f58a:	681b      	ldr	r3, [r3, #0]
 801f58c:	3301      	adds	r3, #1
 801f58e:	4a03      	ldr	r2, [pc, #12]	; (801f59c <httpServer_time_handler+0x18>)
 801f590:	6013      	str	r3, [r2, #0]
}
 801f592:	bf00      	nop
 801f594:	46bd      	mov	sp, r7
 801f596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f59a:	4770      	bx	lr
 801f59c:	200012bc 	.word	0x200012bc

0801f5a0 <get_httpServer_timecount>:

uint32_t get_httpServer_timecount(void)
{
 801f5a0:	b580      	push	{r7, lr}
 801f5a2:	af00      	add	r7, sp, #0
	delay_os_ms(1);
 801f5a4:	4b03      	ldr	r3, [pc, #12]	; (801f5b4 <get_httpServer_timecount+0x14>)
 801f5a6:	681b      	ldr	r3, [r3, #0]
 801f5a8:	2001      	movs	r0, #1
 801f5aa:	4798      	blx	r3
	return httpServer_tick_1s;
 801f5ac:	4b02      	ldr	r3, [pc, #8]	; (801f5b8 <get_httpServer_timecount+0x18>)
 801f5ae:	681b      	ldr	r3, [r3, #0]
}
 801f5b0:	4618      	mov	r0, r3
 801f5b2:	bd80      	pop	{r7, pc}
 801f5b4:	20000124 	.word	0x20000124
 801f5b8:	200012bc 	.word	0x200012bc

0801f5bc <reg_httpServer_webContent>:



void reg_httpServer_webContent(uint8_t * content_name, uint8_t * content)
{
 801f5bc:	b580      	push	{r7, lr}
 801f5be:	b084      	sub	sp, #16
 801f5c0:	af00      	add	r7, sp, #0
 801f5c2:	6078      	str	r0, [r7, #4]
 801f5c4:	6039      	str	r1, [r7, #0]
	uint16_t name_len;
	uint32_t content_len;

	if(content_name == NULL || content == NULL)
 801f5c6:	687b      	ldr	r3, [r7, #4]
 801f5c8:	2b00      	cmp	r3, #0
 801f5ca:	d04e      	beq.n	801f66a <reg_httpServer_webContent+0xae>
 801f5cc:	683b      	ldr	r3, [r7, #0]
 801f5ce:	2b00      	cmp	r3, #0
 801f5d0:	d04b      	beq.n	801f66a <reg_httpServer_webContent+0xae>
	{
		return;
	}
	else if(total_content_cnt >= MAX_CONTENT_CALLBACK)
 801f5d2:	4b29      	ldr	r3, [pc, #164]	; (801f678 <reg_httpServer_webContent+0xbc>)
 801f5d4:	881b      	ldrh	r3, [r3, #0]
 801f5d6:	2b03      	cmp	r3, #3
 801f5d8:	d849      	bhi.n	801f66e <reg_httpServer_webContent+0xb2>
	{
		return;
	}

	name_len = strlen((char *)content_name);
 801f5da:	6878      	ldr	r0, [r7, #4]
 801f5dc:	f7f0 fe60 	bl	80102a0 <strlen>
 801f5e0:	4603      	mov	r3, r0
 801f5e2:	81fb      	strh	r3, [r7, #14]
	content_len = strlen((char *)content);
 801f5e4:	6838      	ldr	r0, [r7, #0]
 801f5e6:	f7f0 fe5b 	bl	80102a0 <strlen>
 801f5ea:	60b8      	str	r0, [r7, #8]

	//web_content[total_content_cnt].content_name = malloc(name_len+1);//todo only for test
	web_content[total_content_cnt].content_name = &content_name_massive[total_content_cnt];
 801f5ec:	4b22      	ldr	r3, [pc, #136]	; (801f678 <reg_httpServer_webContent+0xbc>)
 801f5ee:	881b      	ldrh	r3, [r3, #0]
 801f5f0:	461a      	mov	r2, r3
 801f5f2:	4b21      	ldr	r3, [pc, #132]	; (801f678 <reg_httpServer_webContent+0xbc>)
 801f5f4:	881b      	ldrh	r3, [r3, #0]
 801f5f6:	4618      	mov	r0, r3
 801f5f8:	2332      	movs	r3, #50	; 0x32
 801f5fa:	fb02 f303 	mul.w	r3, r2, r3
 801f5fe:	4a1f      	ldr	r2, [pc, #124]	; (801f67c <reg_httpServer_webContent+0xc0>)
 801f600:	441a      	add	r2, r3
 801f602:	491f      	ldr	r1, [pc, #124]	; (801f680 <reg_httpServer_webContent+0xc4>)
 801f604:	4603      	mov	r3, r0
 801f606:	005b      	lsls	r3, r3, #1
 801f608:	4403      	add	r3, r0
 801f60a:	009b      	lsls	r3, r3, #2
 801f60c:	440b      	add	r3, r1
 801f60e:	601a      	str	r2, [r3, #0]
	strcpy((char *)web_content[total_content_cnt].content_name, (const char *)content_name);
 801f610:	4b19      	ldr	r3, [pc, #100]	; (801f678 <reg_httpServer_webContent+0xbc>)
 801f612:	881b      	ldrh	r3, [r3, #0]
 801f614:	4619      	mov	r1, r3
 801f616:	4a1a      	ldr	r2, [pc, #104]	; (801f680 <reg_httpServer_webContent+0xc4>)
 801f618:	460b      	mov	r3, r1
 801f61a:	005b      	lsls	r3, r3, #1
 801f61c:	440b      	add	r3, r1
 801f61e:	009b      	lsls	r3, r3, #2
 801f620:	4413      	add	r3, r2
 801f622:	681b      	ldr	r3, [r3, #0]
 801f624:	6879      	ldr	r1, [r7, #4]
 801f626:	4618      	mov	r0, r3
 801f628:	f00e fa1d 	bl	802da66 <strcpy>
	web_content[total_content_cnt].content_len = content_len;
 801f62c:	4b12      	ldr	r3, [pc, #72]	; (801f678 <reg_httpServer_webContent+0xbc>)
 801f62e:	881b      	ldrh	r3, [r3, #0]
 801f630:	4619      	mov	r1, r3
 801f632:	4a13      	ldr	r2, [pc, #76]	; (801f680 <reg_httpServer_webContent+0xc4>)
 801f634:	460b      	mov	r3, r1
 801f636:	005b      	lsls	r3, r3, #1
 801f638:	440b      	add	r3, r1
 801f63a:	009b      	lsls	r3, r3, #2
 801f63c:	4413      	add	r3, r2
 801f63e:	3304      	adds	r3, #4
 801f640:	68ba      	ldr	r2, [r7, #8]
 801f642:	601a      	str	r2, [r3, #0]
	web_content[total_content_cnt].content = content;
 801f644:	4b0c      	ldr	r3, [pc, #48]	; (801f678 <reg_httpServer_webContent+0xbc>)
 801f646:	881b      	ldrh	r3, [r3, #0]
 801f648:	4619      	mov	r1, r3
 801f64a:	4a0d      	ldr	r2, [pc, #52]	; (801f680 <reg_httpServer_webContent+0xc4>)
 801f64c:	460b      	mov	r3, r1
 801f64e:	005b      	lsls	r3, r3, #1
 801f650:	440b      	add	r3, r1
 801f652:	009b      	lsls	r3, r3, #2
 801f654:	4413      	add	r3, r2
 801f656:	3308      	adds	r3, #8
 801f658:	683a      	ldr	r2, [r7, #0]
 801f65a:	601a      	str	r2, [r3, #0]

	total_content_cnt++;
 801f65c:	4b06      	ldr	r3, [pc, #24]	; (801f678 <reg_httpServer_webContent+0xbc>)
 801f65e:	881b      	ldrh	r3, [r3, #0]
 801f660:	3301      	adds	r3, #1
 801f662:	b29a      	uxth	r2, r3
 801f664:	4b04      	ldr	r3, [pc, #16]	; (801f678 <reg_httpServer_webContent+0xbc>)
 801f666:	801a      	strh	r2, [r3, #0]
 801f668:	e002      	b.n	801f670 <reg_httpServer_webContent+0xb4>
		return;
 801f66a:	bf00      	nop
 801f66c:	e000      	b.n	801f670 <reg_httpServer_webContent+0xb4>
		return;
 801f66e:	bf00      	nop
}
 801f670:	3710      	adds	r7, #16
 801f672:	46bd      	mov	sp, r7
 801f674:	bd80      	pop	{r7, pc}
 801f676:	bf00      	nop
 801f678:	200012b0 	.word	0x200012b0
 801f67c:	200011e8 	.word	0x200011e8
 801f680:	200014e0 	.word	0x200014e0

0801f684 <find_userReg_webContent>:

	return ret;
}

uint8_t find_userReg_webContent(uint8_t * content_name, uint16_t * content_num, uint32_t * file_len)
{
 801f684:	b580      	push	{r7, lr}
 801f686:	b086      	sub	sp, #24
 801f688:	af00      	add	r7, sp, #0
 801f68a:	60f8      	str	r0, [r7, #12]
 801f68c:	60b9      	str	r1, [r7, #8]
 801f68e:	607a      	str	r2, [r7, #4]
	uint16_t i;
	uint8_t ret = 0; // '0' means 'File Not Found'
 801f690:	2300      	movs	r3, #0
 801f692:	757b      	strb	r3, [r7, #21]

	for(i = 0; i < total_content_cnt; i++)
 801f694:	2300      	movs	r3, #0
 801f696:	82fb      	strh	r3, [r7, #22]
 801f698:	e022      	b.n	801f6e0 <find_userReg_webContent+0x5c>
	{
		if(!strcmp((char *)content_name, (char *)web_content[i].content_name))
 801f69a:	8afa      	ldrh	r2, [r7, #22]
 801f69c:	4915      	ldr	r1, [pc, #84]	; (801f6f4 <find_userReg_webContent+0x70>)
 801f69e:	4613      	mov	r3, r2
 801f6a0:	005b      	lsls	r3, r3, #1
 801f6a2:	4413      	add	r3, r2
 801f6a4:	009b      	lsls	r3, r3, #2
 801f6a6:	440b      	add	r3, r1
 801f6a8:	681b      	ldr	r3, [r3, #0]
 801f6aa:	4619      	mov	r1, r3
 801f6ac:	68f8      	ldr	r0, [r7, #12]
 801f6ae:	f7f0 fd97 	bl	80101e0 <strcmp>
 801f6b2:	4603      	mov	r3, r0
 801f6b4:	2b00      	cmp	r3, #0
 801f6b6:	d110      	bne.n	801f6da <find_userReg_webContent+0x56>
		{
			*file_len = web_content[i].content_len;
 801f6b8:	8afa      	ldrh	r2, [r7, #22]
 801f6ba:	490e      	ldr	r1, [pc, #56]	; (801f6f4 <find_userReg_webContent+0x70>)
 801f6bc:	4613      	mov	r3, r2
 801f6be:	005b      	lsls	r3, r3, #1
 801f6c0:	4413      	add	r3, r2
 801f6c2:	009b      	lsls	r3, r3, #2
 801f6c4:	440b      	add	r3, r1
 801f6c6:	3304      	adds	r3, #4
 801f6c8:	681a      	ldr	r2, [r3, #0]
 801f6ca:	687b      	ldr	r3, [r7, #4]
 801f6cc:	601a      	str	r2, [r3, #0]
			*content_num = i;
 801f6ce:	68bb      	ldr	r3, [r7, #8]
 801f6d0:	8afa      	ldrh	r2, [r7, #22]
 801f6d2:	801a      	strh	r2, [r3, #0]
			ret = 1; // If the requested content found, ret set to '1' (Found)
 801f6d4:	2301      	movs	r3, #1
 801f6d6:	757b      	strb	r3, [r7, #21]
			break;
 801f6d8:	e007      	b.n	801f6ea <find_userReg_webContent+0x66>
	for(i = 0; i < total_content_cnt; i++)
 801f6da:	8afb      	ldrh	r3, [r7, #22]
 801f6dc:	3301      	adds	r3, #1
 801f6de:	82fb      	strh	r3, [r7, #22]
 801f6e0:	4b05      	ldr	r3, [pc, #20]	; (801f6f8 <find_userReg_webContent+0x74>)
 801f6e2:	881b      	ldrh	r3, [r3, #0]
 801f6e4:	8afa      	ldrh	r2, [r7, #22]
 801f6e6:	429a      	cmp	r2, r3
 801f6e8:	d3d7      	bcc.n	801f69a <find_userReg_webContent+0x16>
		}
	}
	return ret;
 801f6ea:	7d7b      	ldrb	r3, [r7, #21]
}
 801f6ec:	4618      	mov	r0, r3
 801f6ee:	3718      	adds	r7, #24
 801f6f0:	46bd      	mov	sp, r7
 801f6f2:	bd80      	pop	{r7, pc}
 801f6f4:	200014e0 	.word	0x200014e0
 801f6f8:	200012b0 	.word	0x200012b0

0801f6fc <read_userReg_webContent>:


uint16_t read_userReg_webContent(uint16_t content_num, uint8_t * buf, uint32_t offset, uint16_t size)
{
 801f6fc:	b580      	push	{r7, lr}
 801f6fe:	b086      	sub	sp, #24
 801f700:	af00      	add	r7, sp, #0
 801f702:	60b9      	str	r1, [r7, #8]
 801f704:	607a      	str	r2, [r7, #4]
 801f706:	461a      	mov	r2, r3
 801f708:	4603      	mov	r3, r0
 801f70a:	81fb      	strh	r3, [r7, #14]
 801f70c:	4613      	mov	r3, r2
 801f70e:	81bb      	strh	r3, [r7, #12]
	uint16_t ret = 0;
 801f710:	2300      	movs	r3, #0
 801f712:	827b      	strh	r3, [r7, #18]
	uint8_t * ptr;

	if(content_num > total_content_cnt) return 0;
 801f714:	4b16      	ldr	r3, [pc, #88]	; (801f770 <read_userReg_webContent+0x74>)
 801f716:	881b      	ldrh	r3, [r3, #0]
 801f718:	89fa      	ldrh	r2, [r7, #14]
 801f71a:	429a      	cmp	r2, r3
 801f71c:	d901      	bls.n	801f722 <read_userReg_webContent+0x26>
 801f71e:	2300      	movs	r3, #0
 801f720:	e021      	b.n	801f766 <read_userReg_webContent+0x6a>

	ptr = web_content[content_num].content;
 801f722:	89fa      	ldrh	r2, [r7, #14]
 801f724:	4913      	ldr	r1, [pc, #76]	; (801f774 <read_userReg_webContent+0x78>)
 801f726:	4613      	mov	r3, r2
 801f728:	005b      	lsls	r3, r3, #1
 801f72a:	4413      	add	r3, r2
 801f72c:	009b      	lsls	r3, r3, #2
 801f72e:	440b      	add	r3, r1
 801f730:	3308      	adds	r3, #8
 801f732:	681b      	ldr	r3, [r3, #0]
 801f734:	617b      	str	r3, [r7, #20]
	if(offset) ptr += offset;
 801f736:	687b      	ldr	r3, [r7, #4]
 801f738:	2b00      	cmp	r3, #0
 801f73a:	d003      	beq.n	801f744 <read_userReg_webContent+0x48>
 801f73c:	697a      	ldr	r2, [r7, #20]
 801f73e:	687b      	ldr	r3, [r7, #4]
 801f740:	4413      	add	r3, r2
 801f742:	617b      	str	r3, [r7, #20]

	strncpy((char *)buf, (char *)ptr, size);
 801f744:	89bb      	ldrh	r3, [r7, #12]
 801f746:	461a      	mov	r2, r3
 801f748:	6979      	ldr	r1, [r7, #20]
 801f74a:	68b8      	ldr	r0, [r7, #8]
 801f74c:	f00e f818 	bl	802d780 <strncpy>
	*(buf+size) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
 801f750:	89bb      	ldrh	r3, [r7, #12]
 801f752:	68ba      	ldr	r2, [r7, #8]
 801f754:	4413      	add	r3, r2
 801f756:	2200      	movs	r2, #0
 801f758:	701a      	strb	r2, [r3, #0]

	ret = strlen((void *)buf);
 801f75a:	68b8      	ldr	r0, [r7, #8]
 801f75c:	f7f0 fda0 	bl	80102a0 <strlen>
 801f760:	4603      	mov	r3, r0
 801f762:	827b      	strh	r3, [r7, #18]
	return ret;
 801f764:	8a7b      	ldrh	r3, [r7, #18]
}
 801f766:	4618      	mov	r0, r3
 801f768:	3718      	adds	r7, #24
 801f76a:	46bd      	mov	sp, r7
 801f76c:	bd80      	pop	{r7, pc}
 801f76e:	bf00      	nop
 801f770:	200012b0 	.word	0x200012b0
 801f774:	200014e0 	.word	0x200014e0

0801f778 <http_get_cgi_handler>:

uint8_t (*predefined_set_cgi_processor)(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len);
uint8_t (*predefined_get_cgi_processor)(uint8_t * uri_name, uint8_t * buf, uint16_t * len);

uint8_t http_get_cgi_handler(uint8_t * uri_name, uint8_t * buf, uint32_t * file_len)
{
 801f778:	b580      	push	{r7, lr}
 801f77a:	b086      	sub	sp, #24
 801f77c:	af00      	add	r7, sp, #0
 801f77e:	60f8      	str	r0, [r7, #12]
 801f780:	60b9      	str	r1, [r7, #8]
 801f782:	607a      	str	r2, [r7, #4]
	uint8_t ret = HTTP_OK;
 801f784:	2301      	movs	r3, #1
 801f786:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 801f788:	2300      	movs	r3, #0
 801f78a:	82bb      	strh	r3, [r7, #20]

	if(predefined_get_cgi_processor(uri_name, buf, &len))
 801f78c:	4b0f      	ldr	r3, [pc, #60]	; (801f7cc <http_get_cgi_handler+0x54>)
 801f78e:	681b      	ldr	r3, [r3, #0]
 801f790:	f107 0214 	add.w	r2, r7, #20
 801f794:	68b9      	ldr	r1, [r7, #8]
 801f796:	68f8      	ldr	r0, [r7, #12]
 801f798:	4798      	blx	r3
 801f79a:	4603      	mov	r3, r0
 801f79c:	2b00      	cmp	r3, #0
 801f79e:	d108      	bne.n	801f7b2 <http_get_cgi_handler+0x3a>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 801f7a0:	490b      	ldr	r1, [pc, #44]	; (801f7d0 <http_get_cgi_handler+0x58>)
 801f7a2:	68f8      	ldr	r0, [r7, #12]
 801f7a4:	f7f0 fd1c 	bl	80101e0 <strcmp>
 801f7a8:	4603      	mov	r3, r0
 801f7aa:	2b00      	cmp	r3, #0
 801f7ac:	d001      	beq.n	801f7b2 <http_get_cgi_handler+0x3a>
		;
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 801f7ae:	2300      	movs	r3, #0
 801f7b0:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 801f7b2:	7dfb      	ldrb	r3, [r7, #23]
 801f7b4:	2b00      	cmp	r3, #0
 801f7b6:	d003      	beq.n	801f7c0 <http_get_cgi_handler+0x48>
 801f7b8:	8abb      	ldrh	r3, [r7, #20]
 801f7ba:	461a      	mov	r2, r3
 801f7bc:	687b      	ldr	r3, [r7, #4]
 801f7be:	601a      	str	r2, [r3, #0]
	return ret;
 801f7c0:	7dfb      	ldrb	r3, [r7, #23]
}
 801f7c2:	4618      	mov	r0, r3
 801f7c4:	3718      	adds	r7, #24
 801f7c6:	46bd      	mov	sp, r7
 801f7c8:	bd80      	pop	{r7, pc}
 801f7ca:	bf00      	nop
 801f7cc:	20001514 	.word	0x20001514
 801f7d0:	080332ac 	.word	0x080332ac

0801f7d4 <http_post_cgi_handler>:

uint8_t http_post_cgi_handler(uint8_t * uri_name, st_http_request * p_http_request, uint8_t * buf, uint32_t * file_len)
{
 801f7d4:	b590      	push	{r4, r7, lr}
 801f7d6:	b087      	sub	sp, #28
 801f7d8:	af00      	add	r7, sp, #0
 801f7da:	60f8      	str	r0, [r7, #12]
 801f7dc:	60b9      	str	r1, [r7, #8]
 801f7de:	607a      	str	r2, [r7, #4]
 801f7e0:	603b      	str	r3, [r7, #0]
	uint8_t ret = HTTP_OK;
 801f7e2:	2301      	movs	r3, #1
 801f7e4:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 801f7e6:	2300      	movs	r3, #0
 801f7e8:	82bb      	strh	r3, [r7, #20]
	uint8_t val = 0;
 801f7ea:	2300      	movs	r3, #0
 801f7ec:	75bb      	strb	r3, [r7, #22]

	if(predefined_set_cgi_processor(uri_name, p_http_request->URI, buf, &len))
 801f7ee:	4b20      	ldr	r3, [pc, #128]	; (801f870 <http_post_cgi_handler+0x9c>)
 801f7f0:	681c      	ldr	r4, [r3, #0]
 801f7f2:	68bb      	ldr	r3, [r7, #8]
 801f7f4:	1c99      	adds	r1, r3, #2
 801f7f6:	f107 0314 	add.w	r3, r7, #20
 801f7fa:	687a      	ldr	r2, [r7, #4]
 801f7fc:	68f8      	ldr	r0, [r7, #12]
 801f7fe:	47a0      	blx	r4
 801f800:	4603      	mov	r3, r0
 801f802:	2b00      	cmp	r3, #0
 801f804:	d127      	bne.n	801f856 <http_post_cgi_handler+0x82>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 801f806:	491b      	ldr	r1, [pc, #108]	; (801f874 <http_post_cgi_handler+0xa0>)
 801f808:	68f8      	ldr	r0, [r7, #12]
 801f80a:	f7f0 fce9 	bl	80101e0 <strcmp>
 801f80e:	4603      	mov	r3, r0
 801f810:	2b00      	cmp	r3, #0
 801f812:	d10b      	bne.n	801f82c <http_post_cgi_handler+0x58>
	{
		// To do
		val = 1;
 801f814:	2301      	movs	r3, #1
 801f816:	75bb      	strb	r3, [r7, #22]
		len = sprintf((char *)buf, "%d", val);
 801f818:	7dbb      	ldrb	r3, [r7, #22]
 801f81a:	461a      	mov	r2, r3
 801f81c:	4916      	ldr	r1, [pc, #88]	; (801f878 <http_post_cgi_handler+0xa4>)
 801f81e:	6878      	ldr	r0, [r7, #4]
 801f820:	f00d fe04 	bl	802d42c <siprintf>
 801f824:	4603      	mov	r3, r0
 801f826:	b29b      	uxth	r3, r3
 801f828:	82bb      	strh	r3, [r7, #20]
 801f82a:	e014      	b.n	801f856 <http_post_cgi_handler+0x82>
	}
	else if(strcmp((const char *)uri_name, "settings_MQTT.cgi") == 0)
 801f82c:	4913      	ldr	r1, [pc, #76]	; (801f87c <http_post_cgi_handler+0xa8>)
 801f82e:	68f8      	ldr	r0, [r7, #12]
 801f830:	f7f0 fcd6 	bl	80101e0 <strcmp>
 801f834:	4603      	mov	r3, r0
 801f836:	2b00      	cmp	r3, #0
 801f838:	d10b      	bne.n	801f852 <http_post_cgi_handler+0x7e>
	{
		// To do
		val = 1;
 801f83a:	2301      	movs	r3, #1
 801f83c:	75bb      	strb	r3, [r7, #22]
		len = sprintf((char *)buf, "%d", val);
 801f83e:	7dbb      	ldrb	r3, [r7, #22]
 801f840:	461a      	mov	r2, r3
 801f842:	490d      	ldr	r1, [pc, #52]	; (801f878 <http_post_cgi_handler+0xa4>)
 801f844:	6878      	ldr	r0, [r7, #4]
 801f846:	f00d fdf1 	bl	802d42c <siprintf>
 801f84a:	4603      	mov	r3, r0
 801f84c:	b29b      	uxth	r3, r3
 801f84e:	82bb      	strh	r3, [r7, #20]
 801f850:	e001      	b.n	801f856 <http_post_cgi_handler+0x82>
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 801f852:	2300      	movs	r3, #0
 801f854:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 801f856:	7dfb      	ldrb	r3, [r7, #23]
 801f858:	2b00      	cmp	r3, #0
 801f85a:	d003      	beq.n	801f864 <http_post_cgi_handler+0x90>
 801f85c:	8abb      	ldrh	r3, [r7, #20]
 801f85e:	461a      	mov	r2, r3
 801f860:	683b      	ldr	r3, [r7, #0]
 801f862:	601a      	str	r2, [r3, #0]
	return ret;
 801f864:	7dfb      	ldrb	r3, [r7, #23]
}
 801f866:	4618      	mov	r0, r3
 801f868:	371c      	adds	r7, #28
 801f86a:	46bd      	mov	sp, r7
 801f86c:	bd90      	pop	{r4, r7, pc}
 801f86e:	bf00      	nop
 801f870:	20001510 	.word	0x20001510
 801f874:	080332ac 	.word	0x080332ac
 801f878:	080332b8 	.word	0x080332b8
 801f87c:	080332bc 	.word	0x080332bc

0801f880 <default_get_cgi_processor>:

uint8_t default_get_cgi_processor(uint8_t * uri_name, uint8_t * buf, uint16_t * len)
{
 801f880:	b480      	push	{r7}
 801f882:	b085      	sub	sp, #20
 801f884:	af00      	add	r7, sp, #0
 801f886:	60f8      	str	r0, [r7, #12]
 801f888:	60b9      	str	r1, [r7, #8]
 801f88a:	607a      	str	r2, [r7, #4]

	;
}
 801f88c:	bf00      	nop
 801f88e:	4618      	mov	r0, r3
 801f890:	3714      	adds	r7, #20
 801f892:	46bd      	mov	sp, r7
 801f894:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f898:	4770      	bx	lr

0801f89a <default_set_cgi_processor>:

uint8_t default_set_cgi_processor(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len)
{
 801f89a:	b480      	push	{r7}
 801f89c:	b085      	sub	sp, #20
 801f89e:	af00      	add	r7, sp, #0
 801f8a0:	60f8      	str	r0, [r7, #12]
 801f8a2:	60b9      	str	r1, [r7, #8]
 801f8a4:	607a      	str	r2, [r7, #4]
 801f8a6:	603b      	str	r3, [r7, #0]
	;
}
 801f8a8:	bf00      	nop
 801f8aa:	4618      	mov	r0, r3
 801f8ac:	3714      	adds	r7, #20
 801f8ae:	46bd      	mov	sp, r7
 801f8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8b4:	4770      	bx	lr
	...

0801f8b8 <reg_external_post_cgi_processor>:

void reg_external_post_cgi_processor( uint8_t (*function)(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len)){
 801f8b8:	b480      	push	{r7}
 801f8ba:	b083      	sub	sp, #12
 801f8bc:	af00      	add	r7, sp, #0
 801f8be:	6078      	str	r0, [r7, #4]

	predefined_set_cgi_processor = default_set_cgi_processor;
 801f8c0:	4b07      	ldr	r3, [pc, #28]	; (801f8e0 <reg_external_post_cgi_processor+0x28>)
 801f8c2:	4a08      	ldr	r2, [pc, #32]	; (801f8e4 <reg_external_post_cgi_processor+0x2c>)
 801f8c4:	601a      	str	r2, [r3, #0]
	if (function) {
 801f8c6:	687b      	ldr	r3, [r7, #4]
 801f8c8:	2b00      	cmp	r3, #0
 801f8ca:	d002      	beq.n	801f8d2 <reg_external_post_cgi_processor+0x1a>
		predefined_set_cgi_processor = function;
 801f8cc:	4a04      	ldr	r2, [pc, #16]	; (801f8e0 <reg_external_post_cgi_processor+0x28>)
 801f8ce:	687b      	ldr	r3, [r7, #4]
 801f8d0:	6013      	str	r3, [r2, #0]
	}

}
 801f8d2:	bf00      	nop
 801f8d4:	370c      	adds	r7, #12
 801f8d6:	46bd      	mov	sp, r7
 801f8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8dc:	4770      	bx	lr
 801f8de:	bf00      	nop
 801f8e0:	20001510 	.word	0x20001510
 801f8e4:	0801f89b 	.word	0x0801f89b

0801f8e8 <reg_external_get_cgi_processor>:

void reg_external_get_cgi_processor(uint8_t (*function)(uint8_t * uri_name, uint8_t * buf, uint16_t * len)){
 801f8e8:	b480      	push	{r7}
 801f8ea:	b083      	sub	sp, #12
 801f8ec:	af00      	add	r7, sp, #0
 801f8ee:	6078      	str	r0, [r7, #4]

	predefined_get_cgi_processor = default_get_cgi_processor;
 801f8f0:	4b07      	ldr	r3, [pc, #28]	; (801f910 <reg_external_get_cgi_processor+0x28>)
 801f8f2:	4a08      	ldr	r2, [pc, #32]	; (801f914 <reg_external_get_cgi_processor+0x2c>)
 801f8f4:	601a      	str	r2, [r3, #0]
	if (function) predefined_get_cgi_processor = function;
 801f8f6:	687b      	ldr	r3, [r7, #4]
 801f8f8:	2b00      	cmp	r3, #0
 801f8fa:	d002      	beq.n	801f902 <reg_external_get_cgi_processor+0x1a>
 801f8fc:	4a04      	ldr	r2, [pc, #16]	; (801f910 <reg_external_get_cgi_processor+0x28>)
 801f8fe:	687b      	ldr	r3, [r7, #4]
 801f900:	6013      	str	r3, [r2, #0]

}
 801f902:	bf00      	nop
 801f904:	370c      	adds	r7, #12
 801f906:	46bd      	mov	sp, r7
 801f908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f90c:	4770      	bx	lr
 801f90e:	bf00      	nop
 801f910:	20001514 	.word	0x20001514
 801f914:	0801f881 	.word	0x0801f881

0801f918 <proto_reset>:
void (*delay_ms)(uint32_t sec);

void (*ResetON)	(void);
void (*ResetOFF)(void);

void proto_reset(void){};
 801f918:	b480      	push	{r7}
 801f91a:	af00      	add	r7, sp, #0
 801f91c:	bf00      	nop
 801f91e:	46bd      	mov	sp, r7
 801f920:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f924:	4770      	bx	lr

0801f926 <proto_delay_func>:

void proto_delay_func(uint32_t sec){
 801f926:	b480      	push	{r7}
 801f928:	b083      	sub	sp, #12
 801f92a:	af00      	add	r7, sp, #0
 801f92c:	6078      	str	r0, [r7, #4]
	sec = sec * 10000;
 801f92e:	687b      	ldr	r3, [r7, #4]
 801f930:	f242 7210 	movw	r2, #10000	; 0x2710
 801f934:	fb02 f303 	mul.w	r3, r2, r3
 801f938:	607b      	str	r3, [r7, #4]

	while (sec){
 801f93a:	e002      	b.n	801f942 <proto_delay_func+0x1c>
		sec--;
 801f93c:	687b      	ldr	r3, [r7, #4]
 801f93e:	3b01      	subs	r3, #1
 801f940:	607b      	str	r3, [r7, #4]
	while (sec){
 801f942:	687b      	ldr	r3, [r7, #4]
 801f944:	2b00      	cmp	r3, #0
 801f946:	d1f9      	bne.n	801f93c <proto_delay_func+0x16>
	}

}
 801f948:	bf00      	nop
 801f94a:	bf00      	nop
 801f94c:	370c      	adds	r7, #12
 801f94e:	46bd      	mov	sp, r7
 801f950:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f954:	4770      	bx	lr
	...

0801f958 <w5500_lib_init>:

void w5500_lib_init(wiz_NetInfo * NetInfoStructure)
{
 801f958:	b480      	push	{r7}
 801f95a:	b083      	sub	sp, #12
 801f95c:	af00      	add	r7, sp, #0
 801f95e:	6078      	str	r0, [r7, #4]
	NetInfo = NetInfoStructure;
 801f960:	4a04      	ldr	r2, [pc, #16]	; (801f974 <w5500_lib_init+0x1c>)
 801f962:	687b      	ldr	r3, [r7, #4]
 801f964:	6013      	str	r3, [r2, #0]
}
 801f966:	bf00      	nop
 801f968:	370c      	adds	r7, #12
 801f96a:	46bd      	mov	sp, r7
 801f96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f970:	4770      	bx	lr
 801f972:	bf00      	nop
 801f974:	2000151c 	.word	0x2000151c

0801f978 <network_init>:

void network_init(void)
{	wiz_NetTimeout 	nettimeout;
 801f978:	b580      	push	{r7, lr}
 801f97a:	b082      	sub	sp, #8
 801f97c:	af00      	add	r7, sp, #0

	nettimeout.retry_cnt	= 3;
 801f97e:	2303      	movs	r3, #3
 801f980:	713b      	strb	r3, [r7, #4]
	nettimeout.time_100us	= 500;
 801f982:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801f986:	80fb      	strh	r3, [r7, #6]

	// Set Network information from netinfo structure
	ctlnetwork(CN_SET_NETINFO, NetInfo);
 801f988:	4b07      	ldr	r3, [pc, #28]	; (801f9a8 <network_init+0x30>)
 801f98a:	681b      	ldr	r3, [r3, #0]
 801f98c:	4619      	mov	r1, r3
 801f98e:	2000      	movs	r0, #0
 801f990:	f7fa fa72 	bl	8019e78 <ctlnetwork>
	ctlnetwork(CN_SET_TIMEOUT, (void*)&nettimeout);
 801f994:	1d3b      	adds	r3, r7, #4
 801f996:	4619      	mov	r1, r3
 801f998:	2004      	movs	r0, #4
 801f99a:	f7fa fa6d 	bl	8019e78 <ctlnetwork>
}
 801f99e:	bf00      	nop
 801f9a0:	3708      	adds	r7, #8
 801f9a2:	46bd      	mov	sp, r7
 801f9a4:	bd80      	pop	{r7, pc}
 801f9a6:	bf00      	nop
 801f9a8:	2000151c 	.word	0x2000151c

0801f9ac <Callback_IPConflict>:

void Callback_IPConflict(void)
{
 801f9ac:	b480      	push	{r7}
 801f9ae:	af00      	add	r7, sp, #0
	ip_dhcp_assigned = false;
 801f9b0:	4b03      	ldr	r3, [pc, #12]	; (801f9c0 <Callback_IPConflict+0x14>)
 801f9b2:	2200      	movs	r2, #0
 801f9b4:	701a      	strb	r2, [r3, #0]
}
 801f9b6:	bf00      	nop
 801f9b8:	46bd      	mov	sp, r7
 801f9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9be:	4770      	bx	lr
 801f9c0:	20001518 	.word	0x20001518

0801f9c4 <Callback_IPAssigned>:

void Callback_IPAssigned(void)
{
 801f9c4:	b580      	push	{r7, lr}
 801f9c6:	af00      	add	r7, sp, #0
   getIPfromDHCP(NetInfo->ip);
 801f9c8:	4b11      	ldr	r3, [pc, #68]	; (801fa10 <Callback_IPAssigned+0x4c>)
 801f9ca:	681b      	ldr	r3, [r3, #0]
 801f9cc:	3306      	adds	r3, #6
 801f9ce:	4618      	mov	r0, r3
 801f9d0:	f7fc fa08 	bl	801bde4 <getIPfromDHCP>
   getGWfromDHCP(NetInfo->gw);
 801f9d4:	4b0e      	ldr	r3, [pc, #56]	; (801fa10 <Callback_IPAssigned+0x4c>)
 801f9d6:	681b      	ldr	r3, [r3, #0]
 801f9d8:	330e      	adds	r3, #14
 801f9da:	4618      	mov	r0, r3
 801f9dc:	f7fc fa22 	bl	801be24 <getGWfromDHCP>
   getSNfromDHCP(NetInfo->sn);
 801f9e0:	4b0b      	ldr	r3, [pc, #44]	; (801fa10 <Callback_IPAssigned+0x4c>)
 801f9e2:	681b      	ldr	r3, [r3, #0]
 801f9e4:	330a      	adds	r3, #10
 801f9e6:	4618      	mov	r0, r3
 801f9e8:	f7fc fa3c 	bl	801be64 <getSNfromDHCP>
   getDNSfromDHCP(NetInfo->dns);
 801f9ec:	4b08      	ldr	r3, [pc, #32]	; (801fa10 <Callback_IPAssigned+0x4c>)
 801f9ee:	681b      	ldr	r3, [r3, #0]
 801f9f0:	3312      	adds	r3, #18
 801f9f2:	4618      	mov	r0, r3
 801f9f4:	f7fc fa56 	bl	801bea4 <getDNSfromDHCP>
   NetInfo->dhcp = NETINFO_DHCP;
 801f9f8:	4b05      	ldr	r3, [pc, #20]	; (801fa10 <Callback_IPAssigned+0x4c>)
 801f9fa:	681b      	ldr	r3, [r3, #0]
 801f9fc:	2202      	movs	r2, #2
 801f9fe:	759a      	strb	r2, [r3, #22]
   // Network initialization
   network_init();      // apply from dhcp
 801fa00:	f7ff ffba 	bl	801f978 <network_init>

   ip_dhcp_assigned = true;
 801fa04:	4b03      	ldr	r3, [pc, #12]	; (801fa14 <Callback_IPAssigned+0x50>)
 801fa06:	2201      	movs	r2, #1
 801fa08:	701a      	strb	r2, [r3, #0]
#ifdef _MAIN_DEBUG_
   printf("DHCP LEASED TIME : %ld Sec.\r\n", getDHCPLeasetime());//Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬â€�Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬Â¢Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â»Ãƒï¿½Ã‚Â¡Ãƒâ€˜Ã¢â‚¬Å“Ãƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¡Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬ËœÃƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã…Â  Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â Ãƒâ€˜Ã‹Å“Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¯Â¿Â½ Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â°Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â¦Ãƒï¿½Ã‚Â Ãƒâ€™Ã¢â‚¬ËœÃƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¹ Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â¦Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â° Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã†â€™Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Âµ DHCP
#endif
}
 801fa0a:	bf00      	nop
 801fa0c:	bd80      	pop	{r7, pc}
 801fa0e:	bf00      	nop
 801fa10:	2000151c 	.word	0x2000151c
 801fa14:	20001518 	.word	0x20001518

0801fa18 <dhcp_rutine>:

void dhcp_rutine(void){
 801fa18:	b580      	push	{r7, lr}
 801fa1a:	af00      	add	r7, sp, #0
	switch(DHCP_run())
 801fa1c:	f7fb ff6c 	bl	801b8f8 <DHCP_run>
 801fa20:	4603      	mov	r3, r0
 801fa22:	2b00      	cmp	r3, #0
 801fa24:	d004      	beq.n	801fa30 <dhcp_rutine+0x18>
 801fa26:	2b00      	cmp	r3, #0
 801fa28:	db09      	blt.n	801fa3e <dhcp_rutine+0x26>
 801fa2a:	3b02      	subs	r3, #2
 801fa2c:	2b02      	cmp	r3, #2
					DHCP_stop();      // if restart, recall DHCP_init()
					network_init();
					ip_dhcp_assigned = false;
				}
			default:
				break;
 801fa2e:	e006      	b.n	801fa3e <dhcp_rutine+0x26>
				my_dhcp_retry++;
 801fa30:	4b04      	ldr	r3, [pc, #16]	; (801fa44 <dhcp_rutine+0x2c>)
 801fa32:	781b      	ldrb	r3, [r3, #0]
 801fa34:	3301      	adds	r3, #1
 801fa36:	b2da      	uxtb	r2, r3
 801fa38:	4b02      	ldr	r3, [pc, #8]	; (801fa44 <dhcp_rutine+0x2c>)
 801fa3a:	701a      	strb	r2, [r3, #0]
				break;
 801fa3c:	e000      	b.n	801fa40 <dhcp_rutine+0x28>
				break;
 801fa3e:	bf00      	nop
			}
}
 801fa40:	bf00      	nop
 801fa42:	bd80      	pop	{r7, pc}
 801fa44:	20001520 	.word	0x20001520

0801fa48 <link_status>:

int link_status(void){
 801fa48:	b580      	push	{r7, lr}
 801fa4a:	b082      	sub	sp, #8
 801fa4c:	af00      	add	r7, sp, #0
	uint8_t temp;
	ctlwizchip(CW_GET_PHYLINK, (void*)&temp);
 801fa4e:	1dfb      	adds	r3, r7, #7
 801fa50:	4619      	mov	r1, r3
 801fa52:	200f      	movs	r0, #15
 801fa54:	f7fa f92e 	bl	8019cb4 <ctlwizchip>
	if (!temp)ip_dhcp_assigned = false;
 801fa58:	79fb      	ldrb	r3, [r7, #7]
 801fa5a:	2b00      	cmp	r3, #0
 801fa5c:	d102      	bne.n	801fa64 <link_status+0x1c>
 801fa5e:	4b04      	ldr	r3, [pc, #16]	; (801fa70 <link_status+0x28>)
 801fa60:	2200      	movs	r2, #0
 801fa62:	701a      	strb	r2, [r3, #0]
	return temp;
 801fa64:	79fb      	ldrb	r3, [r7, #7]
}
 801fa66:	4618      	mov	r0, r3
 801fa68:	3708      	adds	r7, #8
 801fa6a:	46bd      	mov	sp, r7
 801fa6c:	bd80      	pop	{r7, pc}
 801fa6e:	bf00      	nop
 801fa70:	20001518 	.word	0x20001518

0801fa74 <link_duplex>:

int link_duplex(void){
 801fa74:	b580      	push	{r7, lr}
 801fa76:	b082      	sub	sp, #8
 801fa78:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_status;
	wizphy_getphystat(&phy_status);
 801fa7a:	1d3b      	adds	r3, r7, #4
 801fa7c:	4618      	mov	r0, r3
 801fa7e:	f7fa fcab 	bl	801a3d8 <wizphy_getphystat>
	return phy_status.duplex;
 801fa82:	79fb      	ldrb	r3, [r7, #7]
}
 801fa84:	4618      	mov	r0, r3
 801fa86:	3708      	adds	r7, #8
 801fa88:	46bd      	mov	sp, r7
 801fa8a:	bd80      	pop	{r7, pc}

0801fa8c <link_speed>:

int link_speed(void){
 801fa8c:	b580      	push	{r7, lr}
 801fa8e:	b082      	sub	sp, #8
 801fa90:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_status;
	wizphy_getphystat(&phy_status);
 801fa92:	1d3b      	adds	r3, r7, #4
 801fa94:	4618      	mov	r0, r3
 801fa96:	f7fa fc9f 	bl	801a3d8 <wizphy_getphystat>
	return phy_status.speed;
 801fa9a:	79bb      	ldrb	r3, [r7, #6]
}
 801fa9c:	4618      	mov	r0, r3
 801fa9e:	3708      	adds	r7, #8
 801faa0:	46bd      	mov	sp, r7
 801faa2:	bd80      	pop	{r7, pc}

0801faa4 <assigned_ip>:

int assigned_ip(void){
 801faa4:	b480      	push	{r7}
 801faa6:	af00      	add	r7, sp, #0
	return ip_dhcp_assigned;
 801faa8:	4b03      	ldr	r3, [pc, #12]	; (801fab8 <assigned_ip+0x14>)
 801faaa:	781b      	ldrb	r3, [r3, #0]
}
 801faac:	4618      	mov	r0, r3
 801faae:	46bd      	mov	sp, r7
 801fab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fab4:	4770      	bx	lr
 801fab6:	bf00      	nop
 801fab8:	20001518 	.word	0x20001518

0801fabc <set_ip_aasigned>:

void set_ip_aasigned(void){
 801fabc:	b480      	push	{r7}
 801fabe:	af00      	add	r7, sp, #0
	ip_dhcp_assigned = true;
 801fac0:	4b03      	ldr	r3, [pc, #12]	; (801fad0 <set_ip_aasigned+0x14>)
 801fac2:	2201      	movs	r2, #1
 801fac4:	701a      	strb	r2, [r3, #0]
}
 801fac6:	bf00      	nop
 801fac8:	46bd      	mov	sp, r7
 801faca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801face:	4770      	bx	lr
 801fad0:	20001518 	.word	0x20001518

0801fad4 <w5500_init>:

int w5500_init(void)
{
 801fad4:	b590      	push	{r4, r7, lr}
 801fad6:	b085      	sub	sp, #20
 801fad8:	af00      	add	r7, sp, #0
  uint8_t W5500FifoSize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2, }, {2, 2, 2, 2, 2, 2, 2, 2}};
 801fada:	4b18      	ldr	r3, [pc, #96]	; (801fb3c <w5500_init+0x68>)
 801fadc:	463c      	mov	r4, r7
 801fade:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801fae0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ResetON();
 801fae4:	4b16      	ldr	r3, [pc, #88]	; (801fb40 <w5500_init+0x6c>)
 801fae6:	681b      	ldr	r3, [r3, #0]
 801fae8:	4798      	blx	r3
  delay_ms(delay0_5s);
 801faea:	4b16      	ldr	r3, [pc, #88]	; (801fb44 <w5500_init+0x70>)
 801faec:	681b      	ldr	r3, [r3, #0]
 801faee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801faf2:	4798      	blx	r3
  ResetOFF();
 801faf4:	4b14      	ldr	r3, [pc, #80]	; (801fb48 <w5500_init+0x74>)
 801faf6:	681b      	ldr	r3, [r3, #0]
 801faf8:	4798      	blx	r3
  delay_ms(delay3s);
 801fafa:	4b12      	ldr	r3, [pc, #72]	; (801fb44 <w5500_init+0x70>)
 801fafc:	681b      	ldr	r3, [r3, #0]
 801fafe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 801fb02:	4798      	blx	r3

  if (ctlwizchip(CW_INIT_WIZCHIP, (void*)W5500FifoSize) == -1)
 801fb04:	463b      	mov	r3, r7
 801fb06:	4619      	mov	r1, r3
 801fb08:	2001      	movs	r0, #1
 801fb0a:	f7fa f8d3 	bl	8019cb4 <ctlwizchip>
 801fb0e:	4603      	mov	r3, r0
 801fb10:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fb14:	d102      	bne.n	801fb1c <w5500_init+0x48>
  {
	  return -1;
 801fb16:	f04f 33ff 	mov.w	r3, #4294967295
 801fb1a:	e00b      	b.n	801fb34 <w5500_init+0x60>
  }

  if (link_status()==PHY_LINK_OFF){
 801fb1c:	f7ff ff94 	bl	801fa48 <link_status>
 801fb20:	4603      	mov	r3, r0
 801fb22:	2b00      	cmp	r3, #0
 801fb24:	d102      	bne.n	801fb2c <w5500_init+0x58>
	   return -1;
 801fb26:	f04f 33ff 	mov.w	r3, #4294967295
 801fb2a:	e003      	b.n	801fb34 <w5500_init+0x60>
  }

  ip_dhcp_assigned = false;
 801fb2c:	4b07      	ldr	r3, [pc, #28]	; (801fb4c <w5500_init+0x78>)
 801fb2e:	2200      	movs	r2, #0
 801fb30:	701a      	strb	r2, [r3, #0]
  return 0;
 801fb32:	2300      	movs	r3, #0
}
 801fb34:	4618      	mov	r0, r3
 801fb36:	3714      	adds	r7, #20
 801fb38:	46bd      	mov	sp, r7
 801fb3a:	bd90      	pop	{r4, r7, pc}
 801fb3c:	080332d0 	.word	0x080332d0
 801fb40:	20001528 	.word	0x20001528
 801fb44:	20001524 	.word	0x20001524
 801fb48:	2000152c 	.word	0x2000152c
 801fb4c:	20001518 	.word	0x20001518

0801fb50 <w5500_delay_cb>:

void w5500_delay_cb(void (*function)(uint32_t time))
{
 801fb50:	b480      	push	{r7}
 801fb52:	b083      	sub	sp, #12
 801fb54:	af00      	add	r7, sp, #0
 801fb56:	6078      	str	r0, [r7, #4]
	delay_ms = proto_delay_func;
 801fb58:	4b07      	ldr	r3, [pc, #28]	; (801fb78 <w5500_delay_cb+0x28>)
 801fb5a:	4a08      	ldr	r2, [pc, #32]	; (801fb7c <w5500_delay_cb+0x2c>)
 801fb5c:	601a      	str	r2, [r3, #0]

	if (function){
 801fb5e:	687b      	ldr	r3, [r7, #4]
 801fb60:	2b00      	cmp	r3, #0
 801fb62:	d002      	beq.n	801fb6a <w5500_delay_cb+0x1a>
		delay_ms = function;
 801fb64:	4a04      	ldr	r2, [pc, #16]	; (801fb78 <w5500_delay_cb+0x28>)
 801fb66:	687b      	ldr	r3, [r7, #4]
 801fb68:	6013      	str	r3, [r2, #0]
	}
}
 801fb6a:	bf00      	nop
 801fb6c:	370c      	adds	r7, #12
 801fb6e:	46bd      	mov	sp, r7
 801fb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb74:	4770      	bx	lr
 801fb76:	bf00      	nop
 801fb78:	20001524 	.word	0x20001524
 801fb7c:	0801f927 	.word	0x0801f927

0801fb80 <w5500_reset_cb>:

void w5500_reset_cb(void(* reset)(void), void (* unreset)(void)){
 801fb80:	b480      	push	{r7}
 801fb82:	b083      	sub	sp, #12
 801fb84:	af00      	add	r7, sp, #0
 801fb86:	6078      	str	r0, [r7, #4]
 801fb88:	6039      	str	r1, [r7, #0]

	ResetON 	= proto_reset;
 801fb8a:	4b0c      	ldr	r3, [pc, #48]	; (801fbbc <w5500_reset_cb+0x3c>)
 801fb8c:	4a0c      	ldr	r2, [pc, #48]	; (801fbc0 <w5500_reset_cb+0x40>)
 801fb8e:	601a      	str	r2, [r3, #0]
	ResetOFF	= proto_reset;
 801fb90:	4b0c      	ldr	r3, [pc, #48]	; (801fbc4 <w5500_reset_cb+0x44>)
 801fb92:	4a0b      	ldr	r2, [pc, #44]	; (801fbc0 <w5500_reset_cb+0x40>)
 801fb94:	601a      	str	r2, [r3, #0]
	if (reset) 	ResetON =  reset;
 801fb96:	687b      	ldr	r3, [r7, #4]
 801fb98:	2b00      	cmp	r3, #0
 801fb9a:	d002      	beq.n	801fba2 <w5500_reset_cb+0x22>
 801fb9c:	4a07      	ldr	r2, [pc, #28]	; (801fbbc <w5500_reset_cb+0x3c>)
 801fb9e:	687b      	ldr	r3, [r7, #4]
 801fba0:	6013      	str	r3, [r2, #0]
	if (unreset)ResetOFF = unreset;
 801fba2:	683b      	ldr	r3, [r7, #0]
 801fba4:	2b00      	cmp	r3, #0
 801fba6:	d002      	beq.n	801fbae <w5500_reset_cb+0x2e>
 801fba8:	4a06      	ldr	r2, [pc, #24]	; (801fbc4 <w5500_reset_cb+0x44>)
 801fbaa:	683b      	ldr	r3, [r7, #0]
 801fbac:	6013      	str	r3, [r2, #0]
}
 801fbae:	bf00      	nop
 801fbb0:	370c      	adds	r7, #12
 801fbb2:	46bd      	mov	sp, r7
 801fbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fbb8:	4770      	bx	lr
 801fbba:	bf00      	nop
 801fbbc:	20001528 	.word	0x20001528
 801fbc0:	0801f919 	.word	0x0801f919
 801fbc4:	2000152c 	.word	0x2000152c

0801fbc8 <Eth_reset_on>:
#include "ll_SPI_enh_abstractions.h"

SPI_HandleTypeDef spi_handler;


void Eth_reset_on(void){
 801fbc8:	b580      	push	{r7, lr}
 801fbca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_RESET);
 801fbcc:	2200      	movs	r2, #0
 801fbce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801fbd2:	4802      	ldr	r0, [pc, #8]	; (801fbdc <Eth_reset_on+0x14>)
 801fbd4:	f7f5 ff8e 	bl	8015af4 <HAL_GPIO_WritePin>
}
 801fbd8:	bf00      	nop
 801fbda:	bd80      	pop	{r7, pc}
 801fbdc:	40020000 	.word	0x40020000

0801fbe0 <Eth_reset_off>:

void Eth_reset_off(void){
 801fbe0:	b580      	push	{r7, lr}
 801fbe2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_SET);
 801fbe4:	2201      	movs	r2, #1
 801fbe6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801fbea:	4802      	ldr	r0, [pc, #8]	; (801fbf4 <Eth_reset_off+0x14>)
 801fbec:	f7f5 ff82 	bl	8015af4 <HAL_GPIO_WritePin>
}
 801fbf0:	bf00      	nop
 801fbf2:	bd80      	pop	{r7, pc}
 801fbf4:	40020000 	.word	0x40020000

0801fbf8 <Eth_spi_select>:

void Eth_spi_select(void){
 801fbf8:	b580      	push	{r7, lr}
 801fbfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 801fbfc:	2200      	movs	r2, #0
 801fbfe:	2140      	movs	r1, #64	; 0x40
 801fc00:	4802      	ldr	r0, [pc, #8]	; (801fc0c <Eth_spi_select+0x14>)
 801fc02:	f7f5 ff77 	bl	8015af4 <HAL_GPIO_WritePin>
}
 801fc06:	bf00      	nop
 801fc08:	bd80      	pop	{r7, pc}
 801fc0a:	bf00      	nop
 801fc0c:	40020400 	.word	0x40020400

0801fc10 <Eth_spi_deselect>:

void Eth_spi_deselect(void){
 801fc10:	b580      	push	{r7, lr}
 801fc12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 801fc14:	2201      	movs	r2, #1
 801fc16:	2140      	movs	r1, #64	; 0x40
 801fc18:	4802      	ldr	r0, [pc, #8]	; (801fc24 <Eth_spi_deselect+0x14>)
 801fc1a:	f7f5 ff6b 	bl	8015af4 <HAL_GPIO_WritePin>
}
 801fc1e:	bf00      	nop
 801fc20:	bd80      	pop	{r7, pc}
 801fc22:	bf00      	nop
 801fc24:	40020400 	.word	0x40020400

0801fc28 <Reg_eth_spi>:

void Reg_eth_spi(SPI_HandleTypeDef hspi){
 801fc28:	b084      	sub	sp, #16
 801fc2a:	b580      	push	{r7, lr}
 801fc2c:	af00      	add	r7, sp, #0
 801fc2e:	f107 0c08 	add.w	ip, r7, #8
 801fc32:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	spi_handler = hspi;
 801fc36:	4b07      	ldr	r3, [pc, #28]	; (801fc54 <Reg_eth_spi+0x2c>)
 801fc38:	4618      	mov	r0, r3
 801fc3a:	f107 0308 	add.w	r3, r7, #8
 801fc3e:	2258      	movs	r2, #88	; 0x58
 801fc40:	4619      	mov	r1, r3
 801fc42:	f00d ff18 	bl	802da76 <memcpy>
}
 801fc46:	bf00      	nop
 801fc48:	46bd      	mov	sp, r7
 801fc4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801fc4e:	b004      	add	sp, #16
 801fc50:	4770      	bx	lr
 801fc52:	bf00      	nop
 801fc54:	20001530 	.word	0x20001530

0801fc58 <Eth_spi_send_byte>:

void Eth_spi_send_byte(uint8_t byte){
 801fc58:	b580      	push	{r7, lr}
 801fc5a:	b082      	sub	sp, #8
 801fc5c:	af00      	add	r7, sp, #0
 801fc5e:	4603      	mov	r3, r0
 801fc60:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&spi_handler, &byte, 1, 5000);
 801fc62:	1df9      	adds	r1, r7, #7
 801fc64:	f241 3388 	movw	r3, #5000	; 0x1388
 801fc68:	2201      	movs	r2, #1
 801fc6a:	4803      	ldr	r0, [pc, #12]	; (801fc78 <Eth_spi_send_byte+0x20>)
 801fc6c:	f7f6 fd01 	bl	8016672 <HAL_SPI_Transmit>
}
 801fc70:	bf00      	nop
 801fc72:	3708      	adds	r7, #8
 801fc74:	46bd      	mov	sp, r7
 801fc76:	bd80      	pop	{r7, pc}
 801fc78:	20001530 	.word	0x20001530

0801fc7c <Eth_spi_resv_byte>:

uint8_t Eth_spi_resv_byte(void){
 801fc7c:	b580      	push	{r7, lr}
 801fc7e:	b082      	sub	sp, #8
 801fc80:	af00      	add	r7, sp, #0
	uint8_t byte;

	HAL_SPI_Receive(&spi_handler, &byte, 1, 5000);
 801fc82:	1df9      	adds	r1, r7, #7
 801fc84:	f241 3388 	movw	r3, #5000	; 0x1388
 801fc88:	2201      	movs	r2, #1
 801fc8a:	4804      	ldr	r0, [pc, #16]	; (801fc9c <Eth_spi_resv_byte+0x20>)
 801fc8c:	f7f6 fe34 	bl	80168f8 <HAL_SPI_Receive>
	return byte;
 801fc90:	79fb      	ldrb	r3, [r7, #7]
}
 801fc92:	4618      	mov	r0, r3
 801fc94:	3708      	adds	r7, #8
 801fc96:	46bd      	mov	sp, r7
 801fc98:	bd80      	pop	{r7, pc}
 801fc9a:	bf00      	nop
 801fc9c:	20001530 	.word	0x20001530

0801fca0 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 801fca0:	b480      	push	{r7}
 801fca2:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 801fca4:	bf00      	nop
 801fca6:	46bd      	mov	sp, r7
 801fca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcac:	4770      	bx	lr
	...

0801fcb0 <__NVIC_SetPriority>:
{
 801fcb0:	b480      	push	{r7}
 801fcb2:	b083      	sub	sp, #12
 801fcb4:	af00      	add	r7, sp, #0
 801fcb6:	4603      	mov	r3, r0
 801fcb8:	6039      	str	r1, [r7, #0]
 801fcba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801fcbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801fcc0:	2b00      	cmp	r3, #0
 801fcc2:	db0a      	blt.n	801fcda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801fcc4:	683b      	ldr	r3, [r7, #0]
 801fcc6:	b2da      	uxtb	r2, r3
 801fcc8:	490c      	ldr	r1, [pc, #48]	; (801fcfc <__NVIC_SetPriority+0x4c>)
 801fcca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801fcce:	0112      	lsls	r2, r2, #4
 801fcd0:	b2d2      	uxtb	r2, r2
 801fcd2:	440b      	add	r3, r1
 801fcd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801fcd8:	e00a      	b.n	801fcf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801fcda:	683b      	ldr	r3, [r7, #0]
 801fcdc:	b2da      	uxtb	r2, r3
 801fcde:	4908      	ldr	r1, [pc, #32]	; (801fd00 <__NVIC_SetPriority+0x50>)
 801fce0:	79fb      	ldrb	r3, [r7, #7]
 801fce2:	f003 030f 	and.w	r3, r3, #15
 801fce6:	3b04      	subs	r3, #4
 801fce8:	0112      	lsls	r2, r2, #4
 801fcea:	b2d2      	uxtb	r2, r2
 801fcec:	440b      	add	r3, r1
 801fcee:	761a      	strb	r2, [r3, #24]
}
 801fcf0:	bf00      	nop
 801fcf2:	370c      	adds	r7, #12
 801fcf4:	46bd      	mov	sp, r7
 801fcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcfa:	4770      	bx	lr
 801fcfc:	e000e100 	.word	0xe000e100
 801fd00:	e000ed00 	.word	0xe000ed00

0801fd04 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801fd04:	b580      	push	{r7, lr}
 801fd06:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801fd08:	4b05      	ldr	r3, [pc, #20]	; (801fd20 <SysTick_Handler+0x1c>)
 801fd0a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801fd0c:	f002 fbe0 	bl	80224d0 <xTaskGetSchedulerState>
 801fd10:	4603      	mov	r3, r0
 801fd12:	2b01      	cmp	r3, #1
 801fd14:	d001      	beq.n	801fd1a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801fd16:	f003 fac7 	bl	80232a8 <xPortSysTickHandler>
  }
}
 801fd1a:	bf00      	nop
 801fd1c:	bd80      	pop	{r7, pc}
 801fd1e:	bf00      	nop
 801fd20:	e000e010 	.word	0xe000e010

0801fd24 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801fd24:	b580      	push	{r7, lr}
 801fd26:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801fd28:	2100      	movs	r1, #0
 801fd2a:	f06f 0004 	mvn.w	r0, #4
 801fd2e:	f7ff ffbf 	bl	801fcb0 <__NVIC_SetPriority>
#endif
}
 801fd32:	bf00      	nop
 801fd34:	bd80      	pop	{r7, pc}
	...

0801fd38 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801fd38:	b480      	push	{r7}
 801fd3a:	b083      	sub	sp, #12
 801fd3c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801fd3e:	f3ef 8305 	mrs	r3, IPSR
 801fd42:	603b      	str	r3, [r7, #0]
  return(result);
 801fd44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801fd46:	2b00      	cmp	r3, #0
 801fd48:	d003      	beq.n	801fd52 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801fd4a:	f06f 0305 	mvn.w	r3, #5
 801fd4e:	607b      	str	r3, [r7, #4]
 801fd50:	e00c      	b.n	801fd6c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801fd52:	4b0a      	ldr	r3, [pc, #40]	; (801fd7c <osKernelInitialize+0x44>)
 801fd54:	681b      	ldr	r3, [r3, #0]
 801fd56:	2b00      	cmp	r3, #0
 801fd58:	d105      	bne.n	801fd66 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801fd5a:	4b08      	ldr	r3, [pc, #32]	; (801fd7c <osKernelInitialize+0x44>)
 801fd5c:	2201      	movs	r2, #1
 801fd5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801fd60:	2300      	movs	r3, #0
 801fd62:	607b      	str	r3, [r7, #4]
 801fd64:	e002      	b.n	801fd6c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801fd66:	f04f 33ff 	mov.w	r3, #4294967295
 801fd6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801fd6c:	687b      	ldr	r3, [r7, #4]
}
 801fd6e:	4618      	mov	r0, r3
 801fd70:	370c      	adds	r7, #12
 801fd72:	46bd      	mov	sp, r7
 801fd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd78:	4770      	bx	lr
 801fd7a:	bf00      	nop
 801fd7c:	20001588 	.word	0x20001588

0801fd80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801fd80:	b580      	push	{r7, lr}
 801fd82:	b082      	sub	sp, #8
 801fd84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801fd86:	f3ef 8305 	mrs	r3, IPSR
 801fd8a:	603b      	str	r3, [r7, #0]
  return(result);
 801fd8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801fd8e:	2b00      	cmp	r3, #0
 801fd90:	d003      	beq.n	801fd9a <osKernelStart+0x1a>
    stat = osErrorISR;
 801fd92:	f06f 0305 	mvn.w	r3, #5
 801fd96:	607b      	str	r3, [r7, #4]
 801fd98:	e010      	b.n	801fdbc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801fd9a:	4b0b      	ldr	r3, [pc, #44]	; (801fdc8 <osKernelStart+0x48>)
 801fd9c:	681b      	ldr	r3, [r3, #0]
 801fd9e:	2b01      	cmp	r3, #1
 801fda0:	d109      	bne.n	801fdb6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801fda2:	f7ff ffbf 	bl	801fd24 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801fda6:	4b08      	ldr	r3, [pc, #32]	; (801fdc8 <osKernelStart+0x48>)
 801fda8:	2202      	movs	r2, #2
 801fdaa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801fdac:	f001 fece 	bl	8021b4c <vTaskStartScheduler>
      stat = osOK;
 801fdb0:	2300      	movs	r3, #0
 801fdb2:	607b      	str	r3, [r7, #4]
 801fdb4:	e002      	b.n	801fdbc <osKernelStart+0x3c>
    } else {
      stat = osError;
 801fdb6:	f04f 33ff 	mov.w	r3, #4294967295
 801fdba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801fdbc:	687b      	ldr	r3, [r7, #4]
}
 801fdbe:	4618      	mov	r0, r3
 801fdc0:	3708      	adds	r7, #8
 801fdc2:	46bd      	mov	sp, r7
 801fdc4:	bd80      	pop	{r7, pc}
 801fdc6:	bf00      	nop
 801fdc8:	20001588 	.word	0x20001588

0801fdcc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801fdcc:	b580      	push	{r7, lr}
 801fdce:	b08e      	sub	sp, #56	; 0x38
 801fdd0:	af04      	add	r7, sp, #16
 801fdd2:	60f8      	str	r0, [r7, #12]
 801fdd4:	60b9      	str	r1, [r7, #8]
 801fdd6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801fdd8:	2300      	movs	r3, #0
 801fdda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801fddc:	f3ef 8305 	mrs	r3, IPSR
 801fde0:	617b      	str	r3, [r7, #20]
  return(result);
 801fde2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801fde4:	2b00      	cmp	r3, #0
 801fde6:	d17e      	bne.n	801fee6 <osThreadNew+0x11a>
 801fde8:	68fb      	ldr	r3, [r7, #12]
 801fdea:	2b00      	cmp	r3, #0
 801fdec:	d07b      	beq.n	801fee6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801fdee:	2380      	movs	r3, #128	; 0x80
 801fdf0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801fdf2:	2318      	movs	r3, #24
 801fdf4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801fdf6:	2300      	movs	r3, #0
 801fdf8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801fdfa:	f04f 33ff 	mov.w	r3, #4294967295
 801fdfe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801fe00:	687b      	ldr	r3, [r7, #4]
 801fe02:	2b00      	cmp	r3, #0
 801fe04:	d045      	beq.n	801fe92 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801fe06:	687b      	ldr	r3, [r7, #4]
 801fe08:	681b      	ldr	r3, [r3, #0]
 801fe0a:	2b00      	cmp	r3, #0
 801fe0c:	d002      	beq.n	801fe14 <osThreadNew+0x48>
        name = attr->name;
 801fe0e:	687b      	ldr	r3, [r7, #4]
 801fe10:	681b      	ldr	r3, [r3, #0]
 801fe12:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801fe14:	687b      	ldr	r3, [r7, #4]
 801fe16:	699b      	ldr	r3, [r3, #24]
 801fe18:	2b00      	cmp	r3, #0
 801fe1a:	d002      	beq.n	801fe22 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801fe1c:	687b      	ldr	r3, [r7, #4]
 801fe1e:	699b      	ldr	r3, [r3, #24]
 801fe20:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801fe22:	69fb      	ldr	r3, [r7, #28]
 801fe24:	2b00      	cmp	r3, #0
 801fe26:	d008      	beq.n	801fe3a <osThreadNew+0x6e>
 801fe28:	69fb      	ldr	r3, [r7, #28]
 801fe2a:	2b38      	cmp	r3, #56	; 0x38
 801fe2c:	d805      	bhi.n	801fe3a <osThreadNew+0x6e>
 801fe2e:	687b      	ldr	r3, [r7, #4]
 801fe30:	685b      	ldr	r3, [r3, #4]
 801fe32:	f003 0301 	and.w	r3, r3, #1
 801fe36:	2b00      	cmp	r3, #0
 801fe38:	d001      	beq.n	801fe3e <osThreadNew+0x72>
        return (NULL);
 801fe3a:	2300      	movs	r3, #0
 801fe3c:	e054      	b.n	801fee8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801fe3e:	687b      	ldr	r3, [r7, #4]
 801fe40:	695b      	ldr	r3, [r3, #20]
 801fe42:	2b00      	cmp	r3, #0
 801fe44:	d003      	beq.n	801fe4e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801fe46:	687b      	ldr	r3, [r7, #4]
 801fe48:	695b      	ldr	r3, [r3, #20]
 801fe4a:	089b      	lsrs	r3, r3, #2
 801fe4c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801fe4e:	687b      	ldr	r3, [r7, #4]
 801fe50:	689b      	ldr	r3, [r3, #8]
 801fe52:	2b00      	cmp	r3, #0
 801fe54:	d00e      	beq.n	801fe74 <osThreadNew+0xa8>
 801fe56:	687b      	ldr	r3, [r7, #4]
 801fe58:	68db      	ldr	r3, [r3, #12]
 801fe5a:	2bab      	cmp	r3, #171	; 0xab
 801fe5c:	d90a      	bls.n	801fe74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801fe5e:	687b      	ldr	r3, [r7, #4]
 801fe60:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801fe62:	2b00      	cmp	r3, #0
 801fe64:	d006      	beq.n	801fe74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801fe66:	687b      	ldr	r3, [r7, #4]
 801fe68:	695b      	ldr	r3, [r3, #20]
 801fe6a:	2b00      	cmp	r3, #0
 801fe6c:	d002      	beq.n	801fe74 <osThreadNew+0xa8>
        mem = 1;
 801fe6e:	2301      	movs	r3, #1
 801fe70:	61bb      	str	r3, [r7, #24]
 801fe72:	e010      	b.n	801fe96 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801fe74:	687b      	ldr	r3, [r7, #4]
 801fe76:	689b      	ldr	r3, [r3, #8]
 801fe78:	2b00      	cmp	r3, #0
 801fe7a:	d10c      	bne.n	801fe96 <osThreadNew+0xca>
 801fe7c:	687b      	ldr	r3, [r7, #4]
 801fe7e:	68db      	ldr	r3, [r3, #12]
 801fe80:	2b00      	cmp	r3, #0
 801fe82:	d108      	bne.n	801fe96 <osThreadNew+0xca>
 801fe84:	687b      	ldr	r3, [r7, #4]
 801fe86:	691b      	ldr	r3, [r3, #16]
 801fe88:	2b00      	cmp	r3, #0
 801fe8a:	d104      	bne.n	801fe96 <osThreadNew+0xca>
          mem = 0;
 801fe8c:	2300      	movs	r3, #0
 801fe8e:	61bb      	str	r3, [r7, #24]
 801fe90:	e001      	b.n	801fe96 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801fe92:	2300      	movs	r3, #0
 801fe94:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801fe96:	69bb      	ldr	r3, [r7, #24]
 801fe98:	2b01      	cmp	r3, #1
 801fe9a:	d110      	bne.n	801febe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801fe9c:	687b      	ldr	r3, [r7, #4]
 801fe9e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801fea0:	687a      	ldr	r2, [r7, #4]
 801fea2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801fea4:	9202      	str	r2, [sp, #8]
 801fea6:	9301      	str	r3, [sp, #4]
 801fea8:	69fb      	ldr	r3, [r7, #28]
 801feaa:	9300      	str	r3, [sp, #0]
 801feac:	68bb      	ldr	r3, [r7, #8]
 801feae:	6a3a      	ldr	r2, [r7, #32]
 801feb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801feb2:	68f8      	ldr	r0, [r7, #12]
 801feb4:	f001 fc5a 	bl	802176c <xTaskCreateStatic>
 801feb8:	4603      	mov	r3, r0
 801feba:	613b      	str	r3, [r7, #16]
 801febc:	e013      	b.n	801fee6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801febe:	69bb      	ldr	r3, [r7, #24]
 801fec0:	2b00      	cmp	r3, #0
 801fec2:	d110      	bne.n	801fee6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801fec4:	6a3b      	ldr	r3, [r7, #32]
 801fec6:	b29a      	uxth	r2, r3
 801fec8:	f107 0310 	add.w	r3, r7, #16
 801fecc:	9301      	str	r3, [sp, #4]
 801fece:	69fb      	ldr	r3, [r7, #28]
 801fed0:	9300      	str	r3, [sp, #0]
 801fed2:	68bb      	ldr	r3, [r7, #8]
 801fed4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801fed6:	68f8      	ldr	r0, [r7, #12]
 801fed8:	f001 fca5 	bl	8021826 <xTaskCreate>
 801fedc:	4603      	mov	r3, r0
 801fede:	2b01      	cmp	r3, #1
 801fee0:	d001      	beq.n	801fee6 <osThreadNew+0x11a>
            hTask = NULL;
 801fee2:	2300      	movs	r3, #0
 801fee4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801fee6:	693b      	ldr	r3, [r7, #16]
}
 801fee8:	4618      	mov	r0, r3
 801feea:	3728      	adds	r7, #40	; 0x28
 801feec:	46bd      	mov	sp, r7
 801feee:	bd80      	pop	{r7, pc}

0801fef0 <osThreadGetStackSpace>:
  }

  return (state);
}

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 801fef0:	b580      	push	{r7, lr}
 801fef2:	b086      	sub	sp, #24
 801fef4:	af00      	add	r7, sp, #0
 801fef6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801fef8:	687b      	ldr	r3, [r7, #4]
 801fefa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801fefc:	f3ef 8305 	mrs	r3, IPSR
 801ff00:	60fb      	str	r3, [r7, #12]
  return(result);
 801ff02:	68fb      	ldr	r3, [r7, #12]
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 801ff04:	2b00      	cmp	r3, #0
 801ff06:	d102      	bne.n	801ff0e <osThreadGetStackSpace+0x1e>
 801ff08:	693b      	ldr	r3, [r7, #16]
 801ff0a:	2b00      	cmp	r3, #0
 801ff0c:	d102      	bne.n	801ff14 <osThreadGetStackSpace+0x24>
    sz = 0U;
 801ff0e:	2300      	movs	r3, #0
 801ff10:	617b      	str	r3, [r7, #20]
 801ff12:	e005      	b.n	801ff20 <osThreadGetStackSpace+0x30>
  } else {
    sz = (uint32_t)(uxTaskGetStackHighWaterMark(hTask) * sizeof(StackType_t));
 801ff14:	6938      	ldr	r0, [r7, #16]
 801ff16:	f002 fa5b 	bl	80223d0 <uxTaskGetStackHighWaterMark>
 801ff1a:	4603      	mov	r3, r0
 801ff1c:	009b      	lsls	r3, r3, #2
 801ff1e:	617b      	str	r3, [r7, #20]
  }

  return (sz);
 801ff20:	697b      	ldr	r3, [r7, #20]
}
 801ff22:	4618      	mov	r0, r3
 801ff24:	3718      	adds	r7, #24
 801ff26:	46bd      	mov	sp, r7
 801ff28:	bd80      	pop	{r7, pc}
	...

0801ff2c <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 801ff2c:	b480      	push	{r7}
 801ff2e:	b083      	sub	sp, #12
 801ff30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ff32:	f3ef 8305 	mrs	r3, IPSR
 801ff36:	603b      	str	r3, [r7, #0]
  return(result);
 801ff38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801ff3a:	2b00      	cmp	r3, #0
 801ff3c:	d003      	beq.n	801ff46 <osThreadYield+0x1a>
    stat = osErrorISR;
 801ff3e:	f06f 0305 	mvn.w	r3, #5
 801ff42:	607b      	str	r3, [r7, #4]
 801ff44:	e009      	b.n	801ff5a <osThreadYield+0x2e>
  } else {
    stat = osOK;
 801ff46:	2300      	movs	r3, #0
 801ff48:	607b      	str	r3, [r7, #4]
    taskYIELD();
 801ff4a:	4b07      	ldr	r3, [pc, #28]	; (801ff68 <osThreadYield+0x3c>)
 801ff4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ff50:	601a      	str	r2, [r3, #0]
 801ff52:	f3bf 8f4f 	dsb	sy
 801ff56:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 801ff5a:	687b      	ldr	r3, [r7, #4]
}
 801ff5c:	4618      	mov	r0, r3
 801ff5e:	370c      	adds	r7, #12
 801ff60:	46bd      	mov	sp, r7
 801ff62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff66:	4770      	bx	lr
 801ff68:	e000ed04 	.word	0xe000ed04

0801ff6c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801ff6c:	b580      	push	{r7, lr}
 801ff6e:	b084      	sub	sp, #16
 801ff70:	af00      	add	r7, sp, #0
 801ff72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ff74:	f3ef 8305 	mrs	r3, IPSR
 801ff78:	60bb      	str	r3, [r7, #8]
  return(result);
 801ff7a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801ff7c:	2b00      	cmp	r3, #0
 801ff7e:	d003      	beq.n	801ff88 <osDelay+0x1c>
    stat = osErrorISR;
 801ff80:	f06f 0305 	mvn.w	r3, #5
 801ff84:	60fb      	str	r3, [r7, #12]
 801ff86:	e007      	b.n	801ff98 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801ff88:	2300      	movs	r3, #0
 801ff8a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801ff8c:	687b      	ldr	r3, [r7, #4]
 801ff8e:	2b00      	cmp	r3, #0
 801ff90:	d002      	beq.n	801ff98 <osDelay+0x2c>
      vTaskDelay(ticks);
 801ff92:	6878      	ldr	r0, [r7, #4]
 801ff94:	f001 fda6 	bl	8021ae4 <vTaskDelay>
    }
  }

  return (stat);
 801ff98:	68fb      	ldr	r3, [r7, #12]
}
 801ff9a:	4618      	mov	r0, r3
 801ff9c:	3710      	adds	r7, #16
 801ff9e:	46bd      	mov	sp, r7
 801ffa0:	bd80      	pop	{r7, pc}

0801ffa2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 801ffa2:	b580      	push	{r7, lr}
 801ffa4:	b088      	sub	sp, #32
 801ffa6:	af00      	add	r7, sp, #0
 801ffa8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 801ffaa:	2300      	movs	r3, #0
 801ffac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ffae:	f3ef 8305 	mrs	r3, IPSR
 801ffb2:	60bb      	str	r3, [r7, #8]
  return(result);
 801ffb4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 801ffb6:	2b00      	cmp	r3, #0
 801ffb8:	d174      	bne.n	80200a4 <osMutexNew+0x102>
    if (attr != NULL) {
 801ffba:	687b      	ldr	r3, [r7, #4]
 801ffbc:	2b00      	cmp	r3, #0
 801ffbe:	d003      	beq.n	801ffc8 <osMutexNew+0x26>
      type = attr->attr_bits;
 801ffc0:	687b      	ldr	r3, [r7, #4]
 801ffc2:	685b      	ldr	r3, [r3, #4]
 801ffc4:	61bb      	str	r3, [r7, #24]
 801ffc6:	e001      	b.n	801ffcc <osMutexNew+0x2a>
    } else {
      type = 0U;
 801ffc8:	2300      	movs	r3, #0
 801ffca:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 801ffcc:	69bb      	ldr	r3, [r7, #24]
 801ffce:	f003 0301 	and.w	r3, r3, #1
 801ffd2:	2b00      	cmp	r3, #0
 801ffd4:	d002      	beq.n	801ffdc <osMutexNew+0x3a>
      rmtx = 1U;
 801ffd6:	2301      	movs	r3, #1
 801ffd8:	617b      	str	r3, [r7, #20]
 801ffda:	e001      	b.n	801ffe0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 801ffdc:	2300      	movs	r3, #0
 801ffde:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 801ffe0:	69bb      	ldr	r3, [r7, #24]
 801ffe2:	f003 0308 	and.w	r3, r3, #8
 801ffe6:	2b00      	cmp	r3, #0
 801ffe8:	d15c      	bne.n	80200a4 <osMutexNew+0x102>
      mem = -1;
 801ffea:	f04f 33ff 	mov.w	r3, #4294967295
 801ffee:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 801fff0:	687b      	ldr	r3, [r7, #4]
 801fff2:	2b00      	cmp	r3, #0
 801fff4:	d015      	beq.n	8020022 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801fff6:	687b      	ldr	r3, [r7, #4]
 801fff8:	689b      	ldr	r3, [r3, #8]
 801fffa:	2b00      	cmp	r3, #0
 801fffc:	d006      	beq.n	802000c <osMutexNew+0x6a>
 801fffe:	687b      	ldr	r3, [r7, #4]
 8020000:	68db      	ldr	r3, [r3, #12]
 8020002:	2b4f      	cmp	r3, #79	; 0x4f
 8020004:	d902      	bls.n	802000c <osMutexNew+0x6a>
          mem = 1;
 8020006:	2301      	movs	r3, #1
 8020008:	613b      	str	r3, [r7, #16]
 802000a:	e00c      	b.n	8020026 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 802000c:	687b      	ldr	r3, [r7, #4]
 802000e:	689b      	ldr	r3, [r3, #8]
 8020010:	2b00      	cmp	r3, #0
 8020012:	d108      	bne.n	8020026 <osMutexNew+0x84>
 8020014:	687b      	ldr	r3, [r7, #4]
 8020016:	68db      	ldr	r3, [r3, #12]
 8020018:	2b00      	cmp	r3, #0
 802001a:	d104      	bne.n	8020026 <osMutexNew+0x84>
            mem = 0;
 802001c:	2300      	movs	r3, #0
 802001e:	613b      	str	r3, [r7, #16]
 8020020:	e001      	b.n	8020026 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8020022:	2300      	movs	r3, #0
 8020024:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8020026:	693b      	ldr	r3, [r7, #16]
 8020028:	2b01      	cmp	r3, #1
 802002a:	d112      	bne.n	8020052 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 802002c:	697b      	ldr	r3, [r7, #20]
 802002e:	2b00      	cmp	r3, #0
 8020030:	d007      	beq.n	8020042 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8020032:	687b      	ldr	r3, [r7, #4]
 8020034:	689b      	ldr	r3, [r3, #8]
 8020036:	4619      	mov	r1, r3
 8020038:	2004      	movs	r0, #4
 802003a:	f000 fc68 	bl	802090e <xQueueCreateMutexStatic>
 802003e:	61f8      	str	r0, [r7, #28]
 8020040:	e016      	b.n	8020070 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8020042:	687b      	ldr	r3, [r7, #4]
 8020044:	689b      	ldr	r3, [r3, #8]
 8020046:	4619      	mov	r1, r3
 8020048:	2001      	movs	r0, #1
 802004a:	f000 fc60 	bl	802090e <xQueueCreateMutexStatic>
 802004e:	61f8      	str	r0, [r7, #28]
 8020050:	e00e      	b.n	8020070 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8020052:	693b      	ldr	r3, [r7, #16]
 8020054:	2b00      	cmp	r3, #0
 8020056:	d10b      	bne.n	8020070 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8020058:	697b      	ldr	r3, [r7, #20]
 802005a:	2b00      	cmp	r3, #0
 802005c:	d004      	beq.n	8020068 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 802005e:	2004      	movs	r0, #4
 8020060:	f000 fc3d 	bl	80208de <xQueueCreateMutex>
 8020064:	61f8      	str	r0, [r7, #28]
 8020066:	e003      	b.n	8020070 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8020068:	2001      	movs	r0, #1
 802006a:	f000 fc38 	bl	80208de <xQueueCreateMutex>
 802006e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8020070:	69fb      	ldr	r3, [r7, #28]
 8020072:	2b00      	cmp	r3, #0
 8020074:	d00c      	beq.n	8020090 <osMutexNew+0xee>
        if (attr != NULL) {
 8020076:	687b      	ldr	r3, [r7, #4]
 8020078:	2b00      	cmp	r3, #0
 802007a:	d003      	beq.n	8020084 <osMutexNew+0xe2>
          name = attr->name;
 802007c:	687b      	ldr	r3, [r7, #4]
 802007e:	681b      	ldr	r3, [r3, #0]
 8020080:	60fb      	str	r3, [r7, #12]
 8020082:	e001      	b.n	8020088 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8020084:	2300      	movs	r3, #0
 8020086:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8020088:	68f9      	ldr	r1, [r7, #12]
 802008a:	69f8      	ldr	r0, [r7, #28]
 802008c:	f001 fb10 	bl	80216b0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8020090:	69fb      	ldr	r3, [r7, #28]
 8020092:	2b00      	cmp	r3, #0
 8020094:	d006      	beq.n	80200a4 <osMutexNew+0x102>
 8020096:	697b      	ldr	r3, [r7, #20]
 8020098:	2b00      	cmp	r3, #0
 802009a:	d003      	beq.n	80200a4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 802009c:	69fb      	ldr	r3, [r7, #28]
 802009e:	f043 0301 	orr.w	r3, r3, #1
 80200a2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80200a4:	69fb      	ldr	r3, [r7, #28]
}
 80200a6:	4618      	mov	r0, r3
 80200a8:	3720      	adds	r7, #32
 80200aa:	46bd      	mov	sp, r7
 80200ac:	bd80      	pop	{r7, pc}

080200ae <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80200ae:	b580      	push	{r7, lr}
 80200b0:	b086      	sub	sp, #24
 80200b2:	af00      	add	r7, sp, #0
 80200b4:	6078      	str	r0, [r7, #4]
 80200b6:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80200b8:	687b      	ldr	r3, [r7, #4]
 80200ba:	f023 0301 	bic.w	r3, r3, #1
 80200be:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80200c0:	687b      	ldr	r3, [r7, #4]
 80200c2:	f003 0301 	and.w	r3, r3, #1
 80200c6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80200c8:	2300      	movs	r3, #0
 80200ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80200cc:	f3ef 8305 	mrs	r3, IPSR
 80200d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80200d2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80200d4:	2b00      	cmp	r3, #0
 80200d6:	d003      	beq.n	80200e0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80200d8:	f06f 0305 	mvn.w	r3, #5
 80200dc:	617b      	str	r3, [r7, #20]
 80200de:	e02c      	b.n	802013a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80200e0:	693b      	ldr	r3, [r7, #16]
 80200e2:	2b00      	cmp	r3, #0
 80200e4:	d103      	bne.n	80200ee <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80200e6:	f06f 0303 	mvn.w	r3, #3
 80200ea:	617b      	str	r3, [r7, #20]
 80200ec:	e025      	b.n	802013a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80200ee:	68fb      	ldr	r3, [r7, #12]
 80200f0:	2b00      	cmp	r3, #0
 80200f2:	d011      	beq.n	8020118 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80200f4:	6839      	ldr	r1, [r7, #0]
 80200f6:	6938      	ldr	r0, [r7, #16]
 80200f8:	f000 fc58 	bl	80209ac <xQueueTakeMutexRecursive>
 80200fc:	4603      	mov	r3, r0
 80200fe:	2b01      	cmp	r3, #1
 8020100:	d01b      	beq.n	802013a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8020102:	683b      	ldr	r3, [r7, #0]
 8020104:	2b00      	cmp	r3, #0
 8020106:	d003      	beq.n	8020110 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8020108:	f06f 0301 	mvn.w	r3, #1
 802010c:	617b      	str	r3, [r7, #20]
 802010e:	e014      	b.n	802013a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8020110:	f06f 0302 	mvn.w	r3, #2
 8020114:	617b      	str	r3, [r7, #20]
 8020116:	e010      	b.n	802013a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8020118:	6839      	ldr	r1, [r7, #0]
 802011a:	6938      	ldr	r0, [r7, #16]
 802011c:	f000 fef6 	bl	8020f0c <xQueueSemaphoreTake>
 8020120:	4603      	mov	r3, r0
 8020122:	2b01      	cmp	r3, #1
 8020124:	d009      	beq.n	802013a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8020126:	683b      	ldr	r3, [r7, #0]
 8020128:	2b00      	cmp	r3, #0
 802012a:	d003      	beq.n	8020134 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 802012c:	f06f 0301 	mvn.w	r3, #1
 8020130:	617b      	str	r3, [r7, #20]
 8020132:	e002      	b.n	802013a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8020134:	f06f 0302 	mvn.w	r3, #2
 8020138:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 802013a:	697b      	ldr	r3, [r7, #20]
}
 802013c:	4618      	mov	r0, r3
 802013e:	3718      	adds	r7, #24
 8020140:	46bd      	mov	sp, r7
 8020142:	bd80      	pop	{r7, pc}

08020144 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8020144:	b580      	push	{r7, lr}
 8020146:	b086      	sub	sp, #24
 8020148:	af00      	add	r7, sp, #0
 802014a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 802014c:	687b      	ldr	r3, [r7, #4]
 802014e:	f023 0301 	bic.w	r3, r3, #1
 8020152:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8020154:	687b      	ldr	r3, [r7, #4]
 8020156:	f003 0301 	and.w	r3, r3, #1
 802015a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 802015c:	2300      	movs	r3, #0
 802015e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020160:	f3ef 8305 	mrs	r3, IPSR
 8020164:	60bb      	str	r3, [r7, #8]
  return(result);
 8020166:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8020168:	2b00      	cmp	r3, #0
 802016a:	d003      	beq.n	8020174 <osMutexRelease+0x30>
    stat = osErrorISR;
 802016c:	f06f 0305 	mvn.w	r3, #5
 8020170:	617b      	str	r3, [r7, #20]
 8020172:	e01f      	b.n	80201b4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8020174:	693b      	ldr	r3, [r7, #16]
 8020176:	2b00      	cmp	r3, #0
 8020178:	d103      	bne.n	8020182 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 802017a:	f06f 0303 	mvn.w	r3, #3
 802017e:	617b      	str	r3, [r7, #20]
 8020180:	e018      	b.n	80201b4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8020182:	68fb      	ldr	r3, [r7, #12]
 8020184:	2b00      	cmp	r3, #0
 8020186:	d009      	beq.n	802019c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8020188:	6938      	ldr	r0, [r7, #16]
 802018a:	f000 fbdb 	bl	8020944 <xQueueGiveMutexRecursive>
 802018e:	4603      	mov	r3, r0
 8020190:	2b01      	cmp	r3, #1
 8020192:	d00f      	beq.n	80201b4 <osMutexRelease+0x70>
        stat = osErrorResource;
 8020194:	f06f 0302 	mvn.w	r3, #2
 8020198:	617b      	str	r3, [r7, #20]
 802019a:	e00b      	b.n	80201b4 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 802019c:	2300      	movs	r3, #0
 802019e:	2200      	movs	r2, #0
 80201a0:	2100      	movs	r1, #0
 80201a2:	6938      	ldr	r0, [r7, #16]
 80201a4:	f000 fc38 	bl	8020a18 <xQueueGenericSend>
 80201a8:	4603      	mov	r3, r0
 80201aa:	2b01      	cmp	r3, #1
 80201ac:	d002      	beq.n	80201b4 <osMutexRelease+0x70>
        stat = osErrorResource;
 80201ae:	f06f 0302 	mvn.w	r3, #2
 80201b2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80201b4:	697b      	ldr	r3, [r7, #20]
}
 80201b6:	4618      	mov	r0, r3
 80201b8:	3718      	adds	r7, #24
 80201ba:	46bd      	mov	sp, r7
 80201bc:	bd80      	pop	{r7, pc}

080201be <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80201be:	b580      	push	{r7, lr}
 80201c0:	b08a      	sub	sp, #40	; 0x28
 80201c2:	af02      	add	r7, sp, #8
 80201c4:	60f8      	str	r0, [r7, #12]
 80201c6:	60b9      	str	r1, [r7, #8]
 80201c8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80201ca:	2300      	movs	r3, #0
 80201cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80201ce:	f3ef 8305 	mrs	r3, IPSR
 80201d2:	613b      	str	r3, [r7, #16]
  return(result);
 80201d4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80201d6:	2b00      	cmp	r3, #0
 80201d8:	d15f      	bne.n	802029a <osMessageQueueNew+0xdc>
 80201da:	68fb      	ldr	r3, [r7, #12]
 80201dc:	2b00      	cmp	r3, #0
 80201de:	d05c      	beq.n	802029a <osMessageQueueNew+0xdc>
 80201e0:	68bb      	ldr	r3, [r7, #8]
 80201e2:	2b00      	cmp	r3, #0
 80201e4:	d059      	beq.n	802029a <osMessageQueueNew+0xdc>
    mem = -1;
 80201e6:	f04f 33ff 	mov.w	r3, #4294967295
 80201ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80201ec:	687b      	ldr	r3, [r7, #4]
 80201ee:	2b00      	cmp	r3, #0
 80201f0:	d029      	beq.n	8020246 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80201f2:	687b      	ldr	r3, [r7, #4]
 80201f4:	689b      	ldr	r3, [r3, #8]
 80201f6:	2b00      	cmp	r3, #0
 80201f8:	d012      	beq.n	8020220 <osMessageQueueNew+0x62>
 80201fa:	687b      	ldr	r3, [r7, #4]
 80201fc:	68db      	ldr	r3, [r3, #12]
 80201fe:	2b4f      	cmp	r3, #79	; 0x4f
 8020200:	d90e      	bls.n	8020220 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8020202:	687b      	ldr	r3, [r7, #4]
 8020204:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8020206:	2b00      	cmp	r3, #0
 8020208:	d00a      	beq.n	8020220 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 802020a:	687b      	ldr	r3, [r7, #4]
 802020c:	695a      	ldr	r2, [r3, #20]
 802020e:	68fb      	ldr	r3, [r7, #12]
 8020210:	68b9      	ldr	r1, [r7, #8]
 8020212:	fb01 f303 	mul.w	r3, r1, r3
 8020216:	429a      	cmp	r2, r3
 8020218:	d302      	bcc.n	8020220 <osMessageQueueNew+0x62>
        mem = 1;
 802021a:	2301      	movs	r3, #1
 802021c:	61bb      	str	r3, [r7, #24]
 802021e:	e014      	b.n	802024a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8020220:	687b      	ldr	r3, [r7, #4]
 8020222:	689b      	ldr	r3, [r3, #8]
 8020224:	2b00      	cmp	r3, #0
 8020226:	d110      	bne.n	802024a <osMessageQueueNew+0x8c>
 8020228:	687b      	ldr	r3, [r7, #4]
 802022a:	68db      	ldr	r3, [r3, #12]
 802022c:	2b00      	cmp	r3, #0
 802022e:	d10c      	bne.n	802024a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8020230:	687b      	ldr	r3, [r7, #4]
 8020232:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8020234:	2b00      	cmp	r3, #0
 8020236:	d108      	bne.n	802024a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8020238:	687b      	ldr	r3, [r7, #4]
 802023a:	695b      	ldr	r3, [r3, #20]
 802023c:	2b00      	cmp	r3, #0
 802023e:	d104      	bne.n	802024a <osMessageQueueNew+0x8c>
          mem = 0;
 8020240:	2300      	movs	r3, #0
 8020242:	61bb      	str	r3, [r7, #24]
 8020244:	e001      	b.n	802024a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8020246:	2300      	movs	r3, #0
 8020248:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 802024a:	69bb      	ldr	r3, [r7, #24]
 802024c:	2b01      	cmp	r3, #1
 802024e:	d10b      	bne.n	8020268 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8020250:	687b      	ldr	r3, [r7, #4]
 8020252:	691a      	ldr	r2, [r3, #16]
 8020254:	687b      	ldr	r3, [r7, #4]
 8020256:	689b      	ldr	r3, [r3, #8]
 8020258:	2100      	movs	r1, #0
 802025a:	9100      	str	r1, [sp, #0]
 802025c:	68b9      	ldr	r1, [r7, #8]
 802025e:	68f8      	ldr	r0, [r7, #12]
 8020260:	f000 fa4e 	bl	8020700 <xQueueGenericCreateStatic>
 8020264:	61f8      	str	r0, [r7, #28]
 8020266:	e008      	b.n	802027a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8020268:	69bb      	ldr	r3, [r7, #24]
 802026a:	2b00      	cmp	r3, #0
 802026c:	d105      	bne.n	802027a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 802026e:	2200      	movs	r2, #0
 8020270:	68b9      	ldr	r1, [r7, #8]
 8020272:	68f8      	ldr	r0, [r7, #12]
 8020274:	f000 fabc 	bl	80207f0 <xQueueGenericCreate>
 8020278:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 802027a:	69fb      	ldr	r3, [r7, #28]
 802027c:	2b00      	cmp	r3, #0
 802027e:	d00c      	beq.n	802029a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8020280:	687b      	ldr	r3, [r7, #4]
 8020282:	2b00      	cmp	r3, #0
 8020284:	d003      	beq.n	802028e <osMessageQueueNew+0xd0>
        name = attr->name;
 8020286:	687b      	ldr	r3, [r7, #4]
 8020288:	681b      	ldr	r3, [r3, #0]
 802028a:	617b      	str	r3, [r7, #20]
 802028c:	e001      	b.n	8020292 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 802028e:	2300      	movs	r3, #0
 8020290:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8020292:	6979      	ldr	r1, [r7, #20]
 8020294:	69f8      	ldr	r0, [r7, #28]
 8020296:	f001 fa0b 	bl	80216b0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 802029a:	69fb      	ldr	r3, [r7, #28]
}
 802029c:	4618      	mov	r0, r3
 802029e:	3720      	adds	r7, #32
 80202a0:	46bd      	mov	sp, r7
 80202a2:	bd80      	pop	{r7, pc}

080202a4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80202a4:	b580      	push	{r7, lr}
 80202a6:	b088      	sub	sp, #32
 80202a8:	af00      	add	r7, sp, #0
 80202aa:	60f8      	str	r0, [r7, #12]
 80202ac:	60b9      	str	r1, [r7, #8]
 80202ae:	603b      	str	r3, [r7, #0]
 80202b0:	4613      	mov	r3, r2
 80202b2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80202b4:	68fb      	ldr	r3, [r7, #12]
 80202b6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80202b8:	2300      	movs	r3, #0
 80202ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80202bc:	f3ef 8305 	mrs	r3, IPSR
 80202c0:	617b      	str	r3, [r7, #20]
  return(result);
 80202c2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80202c4:	2b00      	cmp	r3, #0
 80202c6:	d028      	beq.n	802031a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80202c8:	69bb      	ldr	r3, [r7, #24]
 80202ca:	2b00      	cmp	r3, #0
 80202cc:	d005      	beq.n	80202da <osMessageQueuePut+0x36>
 80202ce:	68bb      	ldr	r3, [r7, #8]
 80202d0:	2b00      	cmp	r3, #0
 80202d2:	d002      	beq.n	80202da <osMessageQueuePut+0x36>
 80202d4:	683b      	ldr	r3, [r7, #0]
 80202d6:	2b00      	cmp	r3, #0
 80202d8:	d003      	beq.n	80202e2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80202da:	f06f 0303 	mvn.w	r3, #3
 80202de:	61fb      	str	r3, [r7, #28]
 80202e0:	e038      	b.n	8020354 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80202e2:	2300      	movs	r3, #0
 80202e4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80202e6:	f107 0210 	add.w	r2, r7, #16
 80202ea:	2300      	movs	r3, #0
 80202ec:	68b9      	ldr	r1, [r7, #8]
 80202ee:	69b8      	ldr	r0, [r7, #24]
 80202f0:	f000 fc90 	bl	8020c14 <xQueueGenericSendFromISR>
 80202f4:	4603      	mov	r3, r0
 80202f6:	2b01      	cmp	r3, #1
 80202f8:	d003      	beq.n	8020302 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80202fa:	f06f 0302 	mvn.w	r3, #2
 80202fe:	61fb      	str	r3, [r7, #28]
 8020300:	e028      	b.n	8020354 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8020302:	693b      	ldr	r3, [r7, #16]
 8020304:	2b00      	cmp	r3, #0
 8020306:	d025      	beq.n	8020354 <osMessageQueuePut+0xb0>
 8020308:	4b15      	ldr	r3, [pc, #84]	; (8020360 <osMessageQueuePut+0xbc>)
 802030a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802030e:	601a      	str	r2, [r3, #0]
 8020310:	f3bf 8f4f 	dsb	sy
 8020314:	f3bf 8f6f 	isb	sy
 8020318:	e01c      	b.n	8020354 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 802031a:	69bb      	ldr	r3, [r7, #24]
 802031c:	2b00      	cmp	r3, #0
 802031e:	d002      	beq.n	8020326 <osMessageQueuePut+0x82>
 8020320:	68bb      	ldr	r3, [r7, #8]
 8020322:	2b00      	cmp	r3, #0
 8020324:	d103      	bne.n	802032e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8020326:	f06f 0303 	mvn.w	r3, #3
 802032a:	61fb      	str	r3, [r7, #28]
 802032c:	e012      	b.n	8020354 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 802032e:	2300      	movs	r3, #0
 8020330:	683a      	ldr	r2, [r7, #0]
 8020332:	68b9      	ldr	r1, [r7, #8]
 8020334:	69b8      	ldr	r0, [r7, #24]
 8020336:	f000 fb6f 	bl	8020a18 <xQueueGenericSend>
 802033a:	4603      	mov	r3, r0
 802033c:	2b01      	cmp	r3, #1
 802033e:	d009      	beq.n	8020354 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8020340:	683b      	ldr	r3, [r7, #0]
 8020342:	2b00      	cmp	r3, #0
 8020344:	d003      	beq.n	802034e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8020346:	f06f 0301 	mvn.w	r3, #1
 802034a:	61fb      	str	r3, [r7, #28]
 802034c:	e002      	b.n	8020354 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 802034e:	f06f 0302 	mvn.w	r3, #2
 8020352:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8020354:	69fb      	ldr	r3, [r7, #28]
}
 8020356:	4618      	mov	r0, r3
 8020358:	3720      	adds	r7, #32
 802035a:	46bd      	mov	sp, r7
 802035c:	bd80      	pop	{r7, pc}
 802035e:	bf00      	nop
 8020360:	e000ed04 	.word	0xe000ed04

08020364 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8020364:	b580      	push	{r7, lr}
 8020366:	b088      	sub	sp, #32
 8020368:	af00      	add	r7, sp, #0
 802036a:	60f8      	str	r0, [r7, #12]
 802036c:	60b9      	str	r1, [r7, #8]
 802036e:	607a      	str	r2, [r7, #4]
 8020370:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8020372:	68fb      	ldr	r3, [r7, #12]
 8020374:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8020376:	2300      	movs	r3, #0
 8020378:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802037a:	f3ef 8305 	mrs	r3, IPSR
 802037e:	617b      	str	r3, [r7, #20]
  return(result);
 8020380:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8020382:	2b00      	cmp	r3, #0
 8020384:	d028      	beq.n	80203d8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8020386:	69bb      	ldr	r3, [r7, #24]
 8020388:	2b00      	cmp	r3, #0
 802038a:	d005      	beq.n	8020398 <osMessageQueueGet+0x34>
 802038c:	68bb      	ldr	r3, [r7, #8]
 802038e:	2b00      	cmp	r3, #0
 8020390:	d002      	beq.n	8020398 <osMessageQueueGet+0x34>
 8020392:	683b      	ldr	r3, [r7, #0]
 8020394:	2b00      	cmp	r3, #0
 8020396:	d003      	beq.n	80203a0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8020398:	f06f 0303 	mvn.w	r3, #3
 802039c:	61fb      	str	r3, [r7, #28]
 802039e:	e037      	b.n	8020410 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80203a0:	2300      	movs	r3, #0
 80203a2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80203a4:	f107 0310 	add.w	r3, r7, #16
 80203a8:	461a      	mov	r2, r3
 80203aa:	68b9      	ldr	r1, [r7, #8]
 80203ac:	69b8      	ldr	r0, [r7, #24]
 80203ae:	f000 ff9b 	bl	80212e8 <xQueueReceiveFromISR>
 80203b2:	4603      	mov	r3, r0
 80203b4:	2b01      	cmp	r3, #1
 80203b6:	d003      	beq.n	80203c0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80203b8:	f06f 0302 	mvn.w	r3, #2
 80203bc:	61fb      	str	r3, [r7, #28]
 80203be:	e027      	b.n	8020410 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80203c0:	693b      	ldr	r3, [r7, #16]
 80203c2:	2b00      	cmp	r3, #0
 80203c4:	d024      	beq.n	8020410 <osMessageQueueGet+0xac>
 80203c6:	4b15      	ldr	r3, [pc, #84]	; (802041c <osMessageQueueGet+0xb8>)
 80203c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80203cc:	601a      	str	r2, [r3, #0]
 80203ce:	f3bf 8f4f 	dsb	sy
 80203d2:	f3bf 8f6f 	isb	sy
 80203d6:	e01b      	b.n	8020410 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80203d8:	69bb      	ldr	r3, [r7, #24]
 80203da:	2b00      	cmp	r3, #0
 80203dc:	d002      	beq.n	80203e4 <osMessageQueueGet+0x80>
 80203de:	68bb      	ldr	r3, [r7, #8]
 80203e0:	2b00      	cmp	r3, #0
 80203e2:	d103      	bne.n	80203ec <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80203e4:	f06f 0303 	mvn.w	r3, #3
 80203e8:	61fb      	str	r3, [r7, #28]
 80203ea:	e011      	b.n	8020410 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80203ec:	683a      	ldr	r2, [r7, #0]
 80203ee:	68b9      	ldr	r1, [r7, #8]
 80203f0:	69b8      	ldr	r0, [r7, #24]
 80203f2:	f000 fcab 	bl	8020d4c <xQueueReceive>
 80203f6:	4603      	mov	r3, r0
 80203f8:	2b01      	cmp	r3, #1
 80203fa:	d009      	beq.n	8020410 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80203fc:	683b      	ldr	r3, [r7, #0]
 80203fe:	2b00      	cmp	r3, #0
 8020400:	d003      	beq.n	802040a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8020402:	f06f 0301 	mvn.w	r3, #1
 8020406:	61fb      	str	r3, [r7, #28]
 8020408:	e002      	b.n	8020410 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 802040a:	f06f 0302 	mvn.w	r3, #2
 802040e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8020410:	69fb      	ldr	r3, [r7, #28]
}
 8020412:	4618      	mov	r0, r3
 8020414:	3720      	adds	r7, #32
 8020416:	46bd      	mov	sp, r7
 8020418:	bd80      	pop	{r7, pc}
 802041a:	bf00      	nop
 802041c:	e000ed04 	.word	0xe000ed04

08020420 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8020420:	b580      	push	{r7, lr}
 8020422:	b086      	sub	sp, #24
 8020424:	af00      	add	r7, sp, #0
 8020426:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8020428:	687b      	ldr	r3, [r7, #4]
 802042a:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 802042c:	693b      	ldr	r3, [r7, #16]
 802042e:	2b00      	cmp	r3, #0
 8020430:	d102      	bne.n	8020438 <osMessageQueueGetCount+0x18>
    count = 0U;
 8020432:	2300      	movs	r3, #0
 8020434:	617b      	str	r3, [r7, #20]
 8020436:	e00e      	b.n	8020456 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020438:	f3ef 8305 	mrs	r3, IPSR
 802043c:	60fb      	str	r3, [r7, #12]
  return(result);
 802043e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8020440:	2b00      	cmp	r3, #0
 8020442:	d004      	beq.n	802044e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8020444:	6938      	ldr	r0, [r7, #16]
 8020446:	f000 ffed 	bl	8021424 <uxQueueMessagesWaitingFromISR>
 802044a:	6178      	str	r0, [r7, #20]
 802044c:	e003      	b.n	8020456 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 802044e:	6938      	ldr	r0, [r7, #16]
 8020450:	f000 ffca 	bl	80213e8 <uxQueueMessagesWaiting>
 8020454:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8020456:	697b      	ldr	r3, [r7, #20]
}
 8020458:	4618      	mov	r0, r3
 802045a:	3718      	adds	r7, #24
 802045c:	46bd      	mov	sp, r7
 802045e:	bd80      	pop	{r7, pc}

08020460 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8020460:	b480      	push	{r7}
 8020462:	b085      	sub	sp, #20
 8020464:	af00      	add	r7, sp, #0
 8020466:	60f8      	str	r0, [r7, #12]
 8020468:	60b9      	str	r1, [r7, #8]
 802046a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 802046c:	68fb      	ldr	r3, [r7, #12]
 802046e:	4a07      	ldr	r2, [pc, #28]	; (802048c <vApplicationGetIdleTaskMemory+0x2c>)
 8020470:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8020472:	68bb      	ldr	r3, [r7, #8]
 8020474:	4a06      	ldr	r2, [pc, #24]	; (8020490 <vApplicationGetIdleTaskMemory+0x30>)
 8020476:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8020478:	687b      	ldr	r3, [r7, #4]
 802047a:	2280      	movs	r2, #128	; 0x80
 802047c:	601a      	str	r2, [r3, #0]
}
 802047e:	bf00      	nop
 8020480:	3714      	adds	r7, #20
 8020482:	46bd      	mov	sp, r7
 8020484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020488:	4770      	bx	lr
 802048a:	bf00      	nop
 802048c:	2000158c 	.word	0x2000158c
 8020490:	20001638 	.word	0x20001638

08020494 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8020494:	b480      	push	{r7}
 8020496:	b085      	sub	sp, #20
 8020498:	af00      	add	r7, sp, #0
 802049a:	60f8      	str	r0, [r7, #12]
 802049c:	60b9      	str	r1, [r7, #8]
 802049e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80204a0:	68fb      	ldr	r3, [r7, #12]
 80204a2:	4a07      	ldr	r2, [pc, #28]	; (80204c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80204a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80204a6:	68bb      	ldr	r3, [r7, #8]
 80204a8:	4a06      	ldr	r2, [pc, #24]	; (80204c4 <vApplicationGetTimerTaskMemory+0x30>)
 80204aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80204ac:	687b      	ldr	r3, [r7, #4]
 80204ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80204b2:	601a      	str	r2, [r3, #0]
}
 80204b4:	bf00      	nop
 80204b6:	3714      	adds	r7, #20
 80204b8:	46bd      	mov	sp, r7
 80204ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204be:	4770      	bx	lr
 80204c0:	20001838 	.word	0x20001838
 80204c4:	200018e4 	.word	0x200018e4

080204c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80204c8:	b480      	push	{r7}
 80204ca:	b083      	sub	sp, #12
 80204cc:	af00      	add	r7, sp, #0
 80204ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80204d0:	687b      	ldr	r3, [r7, #4]
 80204d2:	f103 0208 	add.w	r2, r3, #8
 80204d6:	687b      	ldr	r3, [r7, #4]
 80204d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80204da:	687b      	ldr	r3, [r7, #4]
 80204dc:	f04f 32ff 	mov.w	r2, #4294967295
 80204e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80204e2:	687b      	ldr	r3, [r7, #4]
 80204e4:	f103 0208 	add.w	r2, r3, #8
 80204e8:	687b      	ldr	r3, [r7, #4]
 80204ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80204ec:	687b      	ldr	r3, [r7, #4]
 80204ee:	f103 0208 	add.w	r2, r3, #8
 80204f2:	687b      	ldr	r3, [r7, #4]
 80204f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80204f6:	687b      	ldr	r3, [r7, #4]
 80204f8:	2200      	movs	r2, #0
 80204fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80204fc:	bf00      	nop
 80204fe:	370c      	adds	r7, #12
 8020500:	46bd      	mov	sp, r7
 8020502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020506:	4770      	bx	lr

08020508 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8020508:	b480      	push	{r7}
 802050a:	b083      	sub	sp, #12
 802050c:	af00      	add	r7, sp, #0
 802050e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8020510:	687b      	ldr	r3, [r7, #4]
 8020512:	2200      	movs	r2, #0
 8020514:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8020516:	bf00      	nop
 8020518:	370c      	adds	r7, #12
 802051a:	46bd      	mov	sp, r7
 802051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020520:	4770      	bx	lr

08020522 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8020522:	b480      	push	{r7}
 8020524:	b085      	sub	sp, #20
 8020526:	af00      	add	r7, sp, #0
 8020528:	6078      	str	r0, [r7, #4]
 802052a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 802052c:	687b      	ldr	r3, [r7, #4]
 802052e:	685b      	ldr	r3, [r3, #4]
 8020530:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8020532:	683b      	ldr	r3, [r7, #0]
 8020534:	68fa      	ldr	r2, [r7, #12]
 8020536:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8020538:	68fb      	ldr	r3, [r7, #12]
 802053a:	689a      	ldr	r2, [r3, #8]
 802053c:	683b      	ldr	r3, [r7, #0]
 802053e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8020540:	68fb      	ldr	r3, [r7, #12]
 8020542:	689b      	ldr	r3, [r3, #8]
 8020544:	683a      	ldr	r2, [r7, #0]
 8020546:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8020548:	68fb      	ldr	r3, [r7, #12]
 802054a:	683a      	ldr	r2, [r7, #0]
 802054c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 802054e:	683b      	ldr	r3, [r7, #0]
 8020550:	687a      	ldr	r2, [r7, #4]
 8020552:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8020554:	687b      	ldr	r3, [r7, #4]
 8020556:	681b      	ldr	r3, [r3, #0]
 8020558:	1c5a      	adds	r2, r3, #1
 802055a:	687b      	ldr	r3, [r7, #4]
 802055c:	601a      	str	r2, [r3, #0]
}
 802055e:	bf00      	nop
 8020560:	3714      	adds	r7, #20
 8020562:	46bd      	mov	sp, r7
 8020564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020568:	4770      	bx	lr

0802056a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 802056a:	b480      	push	{r7}
 802056c:	b085      	sub	sp, #20
 802056e:	af00      	add	r7, sp, #0
 8020570:	6078      	str	r0, [r7, #4]
 8020572:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8020574:	683b      	ldr	r3, [r7, #0]
 8020576:	681b      	ldr	r3, [r3, #0]
 8020578:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 802057a:	68bb      	ldr	r3, [r7, #8]
 802057c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020580:	d103      	bne.n	802058a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8020582:	687b      	ldr	r3, [r7, #4]
 8020584:	691b      	ldr	r3, [r3, #16]
 8020586:	60fb      	str	r3, [r7, #12]
 8020588:	e00c      	b.n	80205a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 802058a:	687b      	ldr	r3, [r7, #4]
 802058c:	3308      	adds	r3, #8
 802058e:	60fb      	str	r3, [r7, #12]
 8020590:	e002      	b.n	8020598 <vListInsert+0x2e>
 8020592:	68fb      	ldr	r3, [r7, #12]
 8020594:	685b      	ldr	r3, [r3, #4]
 8020596:	60fb      	str	r3, [r7, #12]
 8020598:	68fb      	ldr	r3, [r7, #12]
 802059a:	685b      	ldr	r3, [r3, #4]
 802059c:	681b      	ldr	r3, [r3, #0]
 802059e:	68ba      	ldr	r2, [r7, #8]
 80205a0:	429a      	cmp	r2, r3
 80205a2:	d2f6      	bcs.n	8020592 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80205a4:	68fb      	ldr	r3, [r7, #12]
 80205a6:	685a      	ldr	r2, [r3, #4]
 80205a8:	683b      	ldr	r3, [r7, #0]
 80205aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80205ac:	683b      	ldr	r3, [r7, #0]
 80205ae:	685b      	ldr	r3, [r3, #4]
 80205b0:	683a      	ldr	r2, [r7, #0]
 80205b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80205b4:	683b      	ldr	r3, [r7, #0]
 80205b6:	68fa      	ldr	r2, [r7, #12]
 80205b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80205ba:	68fb      	ldr	r3, [r7, #12]
 80205bc:	683a      	ldr	r2, [r7, #0]
 80205be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80205c0:	683b      	ldr	r3, [r7, #0]
 80205c2:	687a      	ldr	r2, [r7, #4]
 80205c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80205c6:	687b      	ldr	r3, [r7, #4]
 80205c8:	681b      	ldr	r3, [r3, #0]
 80205ca:	1c5a      	adds	r2, r3, #1
 80205cc:	687b      	ldr	r3, [r7, #4]
 80205ce:	601a      	str	r2, [r3, #0]
}
 80205d0:	bf00      	nop
 80205d2:	3714      	adds	r7, #20
 80205d4:	46bd      	mov	sp, r7
 80205d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205da:	4770      	bx	lr

080205dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80205dc:	b480      	push	{r7}
 80205de:	b085      	sub	sp, #20
 80205e0:	af00      	add	r7, sp, #0
 80205e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80205e4:	687b      	ldr	r3, [r7, #4]
 80205e6:	691b      	ldr	r3, [r3, #16]
 80205e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80205ea:	687b      	ldr	r3, [r7, #4]
 80205ec:	685b      	ldr	r3, [r3, #4]
 80205ee:	687a      	ldr	r2, [r7, #4]
 80205f0:	6892      	ldr	r2, [r2, #8]
 80205f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80205f4:	687b      	ldr	r3, [r7, #4]
 80205f6:	689b      	ldr	r3, [r3, #8]
 80205f8:	687a      	ldr	r2, [r7, #4]
 80205fa:	6852      	ldr	r2, [r2, #4]
 80205fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80205fe:	68fb      	ldr	r3, [r7, #12]
 8020600:	685b      	ldr	r3, [r3, #4]
 8020602:	687a      	ldr	r2, [r7, #4]
 8020604:	429a      	cmp	r2, r3
 8020606:	d103      	bne.n	8020610 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8020608:	687b      	ldr	r3, [r7, #4]
 802060a:	689a      	ldr	r2, [r3, #8]
 802060c:	68fb      	ldr	r3, [r7, #12]
 802060e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8020610:	687b      	ldr	r3, [r7, #4]
 8020612:	2200      	movs	r2, #0
 8020614:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8020616:	68fb      	ldr	r3, [r7, #12]
 8020618:	681b      	ldr	r3, [r3, #0]
 802061a:	1e5a      	subs	r2, r3, #1
 802061c:	68fb      	ldr	r3, [r7, #12]
 802061e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8020620:	68fb      	ldr	r3, [r7, #12]
 8020622:	681b      	ldr	r3, [r3, #0]
}
 8020624:	4618      	mov	r0, r3
 8020626:	3714      	adds	r7, #20
 8020628:	46bd      	mov	sp, r7
 802062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802062e:	4770      	bx	lr

08020630 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8020630:	b580      	push	{r7, lr}
 8020632:	b084      	sub	sp, #16
 8020634:	af00      	add	r7, sp, #0
 8020636:	6078      	str	r0, [r7, #4]
 8020638:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 802063a:	687b      	ldr	r3, [r7, #4]
 802063c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 802063e:	68fb      	ldr	r3, [r7, #12]
 8020640:	2b00      	cmp	r3, #0
 8020642:	d10a      	bne.n	802065a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8020644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020648:	f383 8811 	msr	BASEPRI, r3
 802064c:	f3bf 8f6f 	isb	sy
 8020650:	f3bf 8f4f 	dsb	sy
 8020654:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8020656:	bf00      	nop
 8020658:	e7fe      	b.n	8020658 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 802065a:	f002 fd93 	bl	8023184 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 802065e:	68fb      	ldr	r3, [r7, #12]
 8020660:	681a      	ldr	r2, [r3, #0]
 8020662:	68fb      	ldr	r3, [r7, #12]
 8020664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020666:	68f9      	ldr	r1, [r7, #12]
 8020668:	6c09      	ldr	r1, [r1, #64]	; 0x40
 802066a:	fb01 f303 	mul.w	r3, r1, r3
 802066e:	441a      	add	r2, r3
 8020670:	68fb      	ldr	r3, [r7, #12]
 8020672:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8020674:	68fb      	ldr	r3, [r7, #12]
 8020676:	2200      	movs	r2, #0
 8020678:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 802067a:	68fb      	ldr	r3, [r7, #12]
 802067c:	681a      	ldr	r2, [r3, #0]
 802067e:	68fb      	ldr	r3, [r7, #12]
 8020680:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8020682:	68fb      	ldr	r3, [r7, #12]
 8020684:	681a      	ldr	r2, [r3, #0]
 8020686:	68fb      	ldr	r3, [r7, #12]
 8020688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802068a:	3b01      	subs	r3, #1
 802068c:	68f9      	ldr	r1, [r7, #12]
 802068e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8020690:	fb01 f303 	mul.w	r3, r1, r3
 8020694:	441a      	add	r2, r3
 8020696:	68fb      	ldr	r3, [r7, #12]
 8020698:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 802069a:	68fb      	ldr	r3, [r7, #12]
 802069c:	22ff      	movs	r2, #255	; 0xff
 802069e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80206a2:	68fb      	ldr	r3, [r7, #12]
 80206a4:	22ff      	movs	r2, #255	; 0xff
 80206a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80206aa:	683b      	ldr	r3, [r7, #0]
 80206ac:	2b00      	cmp	r3, #0
 80206ae:	d114      	bne.n	80206da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80206b0:	68fb      	ldr	r3, [r7, #12]
 80206b2:	691b      	ldr	r3, [r3, #16]
 80206b4:	2b00      	cmp	r3, #0
 80206b6:	d01a      	beq.n	80206ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80206b8:	68fb      	ldr	r3, [r7, #12]
 80206ba:	3310      	adds	r3, #16
 80206bc:	4618      	mov	r0, r3
 80206be:	f001 fcfd 	bl	80220bc <xTaskRemoveFromEventList>
 80206c2:	4603      	mov	r3, r0
 80206c4:	2b00      	cmp	r3, #0
 80206c6:	d012      	beq.n	80206ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80206c8:	4b0c      	ldr	r3, [pc, #48]	; (80206fc <xQueueGenericReset+0xcc>)
 80206ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80206ce:	601a      	str	r2, [r3, #0]
 80206d0:	f3bf 8f4f 	dsb	sy
 80206d4:	f3bf 8f6f 	isb	sy
 80206d8:	e009      	b.n	80206ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80206da:	68fb      	ldr	r3, [r7, #12]
 80206dc:	3310      	adds	r3, #16
 80206de:	4618      	mov	r0, r3
 80206e0:	f7ff fef2 	bl	80204c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80206e4:	68fb      	ldr	r3, [r7, #12]
 80206e6:	3324      	adds	r3, #36	; 0x24
 80206e8:	4618      	mov	r0, r3
 80206ea:	f7ff feed 	bl	80204c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80206ee:	f002 fd79 	bl	80231e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80206f2:	2301      	movs	r3, #1
}
 80206f4:	4618      	mov	r0, r3
 80206f6:	3710      	adds	r7, #16
 80206f8:	46bd      	mov	sp, r7
 80206fa:	bd80      	pop	{r7, pc}
 80206fc:	e000ed04 	.word	0xe000ed04

08020700 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8020700:	b580      	push	{r7, lr}
 8020702:	b08e      	sub	sp, #56	; 0x38
 8020704:	af02      	add	r7, sp, #8
 8020706:	60f8      	str	r0, [r7, #12]
 8020708:	60b9      	str	r1, [r7, #8]
 802070a:	607a      	str	r2, [r7, #4]
 802070c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 802070e:	68fb      	ldr	r3, [r7, #12]
 8020710:	2b00      	cmp	r3, #0
 8020712:	d10a      	bne.n	802072a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8020714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020718:	f383 8811 	msr	BASEPRI, r3
 802071c:	f3bf 8f6f 	isb	sy
 8020720:	f3bf 8f4f 	dsb	sy
 8020724:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8020726:	bf00      	nop
 8020728:	e7fe      	b.n	8020728 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 802072a:	683b      	ldr	r3, [r7, #0]
 802072c:	2b00      	cmp	r3, #0
 802072e:	d10a      	bne.n	8020746 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8020730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020734:	f383 8811 	msr	BASEPRI, r3
 8020738:	f3bf 8f6f 	isb	sy
 802073c:	f3bf 8f4f 	dsb	sy
 8020740:	627b      	str	r3, [r7, #36]	; 0x24
}
 8020742:	bf00      	nop
 8020744:	e7fe      	b.n	8020744 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8020746:	687b      	ldr	r3, [r7, #4]
 8020748:	2b00      	cmp	r3, #0
 802074a:	d002      	beq.n	8020752 <xQueueGenericCreateStatic+0x52>
 802074c:	68bb      	ldr	r3, [r7, #8]
 802074e:	2b00      	cmp	r3, #0
 8020750:	d001      	beq.n	8020756 <xQueueGenericCreateStatic+0x56>
 8020752:	2301      	movs	r3, #1
 8020754:	e000      	b.n	8020758 <xQueueGenericCreateStatic+0x58>
 8020756:	2300      	movs	r3, #0
 8020758:	2b00      	cmp	r3, #0
 802075a:	d10a      	bne.n	8020772 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 802075c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020760:	f383 8811 	msr	BASEPRI, r3
 8020764:	f3bf 8f6f 	isb	sy
 8020768:	f3bf 8f4f 	dsb	sy
 802076c:	623b      	str	r3, [r7, #32]
}
 802076e:	bf00      	nop
 8020770:	e7fe      	b.n	8020770 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8020772:	687b      	ldr	r3, [r7, #4]
 8020774:	2b00      	cmp	r3, #0
 8020776:	d102      	bne.n	802077e <xQueueGenericCreateStatic+0x7e>
 8020778:	68bb      	ldr	r3, [r7, #8]
 802077a:	2b00      	cmp	r3, #0
 802077c:	d101      	bne.n	8020782 <xQueueGenericCreateStatic+0x82>
 802077e:	2301      	movs	r3, #1
 8020780:	e000      	b.n	8020784 <xQueueGenericCreateStatic+0x84>
 8020782:	2300      	movs	r3, #0
 8020784:	2b00      	cmp	r3, #0
 8020786:	d10a      	bne.n	802079e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8020788:	f04f 0350 	mov.w	r3, #80	; 0x50
 802078c:	f383 8811 	msr	BASEPRI, r3
 8020790:	f3bf 8f6f 	isb	sy
 8020794:	f3bf 8f4f 	dsb	sy
 8020798:	61fb      	str	r3, [r7, #28]
}
 802079a:	bf00      	nop
 802079c:	e7fe      	b.n	802079c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 802079e:	2350      	movs	r3, #80	; 0x50
 80207a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80207a2:	697b      	ldr	r3, [r7, #20]
 80207a4:	2b50      	cmp	r3, #80	; 0x50
 80207a6:	d00a      	beq.n	80207be <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80207a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80207ac:	f383 8811 	msr	BASEPRI, r3
 80207b0:	f3bf 8f6f 	isb	sy
 80207b4:	f3bf 8f4f 	dsb	sy
 80207b8:	61bb      	str	r3, [r7, #24]
}
 80207ba:	bf00      	nop
 80207bc:	e7fe      	b.n	80207bc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80207be:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80207c0:	683b      	ldr	r3, [r7, #0]
 80207c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80207c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80207c6:	2b00      	cmp	r3, #0
 80207c8:	d00d      	beq.n	80207e6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80207ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80207cc:	2201      	movs	r2, #1
 80207ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80207d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80207d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80207d8:	9300      	str	r3, [sp, #0]
 80207da:	4613      	mov	r3, r2
 80207dc:	687a      	ldr	r2, [r7, #4]
 80207de:	68b9      	ldr	r1, [r7, #8]
 80207e0:	68f8      	ldr	r0, [r7, #12]
 80207e2:	f000 f83f 	bl	8020864 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80207e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80207e8:	4618      	mov	r0, r3
 80207ea:	3730      	adds	r7, #48	; 0x30
 80207ec:	46bd      	mov	sp, r7
 80207ee:	bd80      	pop	{r7, pc}

080207f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80207f0:	b580      	push	{r7, lr}
 80207f2:	b08a      	sub	sp, #40	; 0x28
 80207f4:	af02      	add	r7, sp, #8
 80207f6:	60f8      	str	r0, [r7, #12]
 80207f8:	60b9      	str	r1, [r7, #8]
 80207fa:	4613      	mov	r3, r2
 80207fc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80207fe:	68fb      	ldr	r3, [r7, #12]
 8020800:	2b00      	cmp	r3, #0
 8020802:	d10a      	bne.n	802081a <xQueueGenericCreate+0x2a>
	__asm volatile
 8020804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020808:	f383 8811 	msr	BASEPRI, r3
 802080c:	f3bf 8f6f 	isb	sy
 8020810:	f3bf 8f4f 	dsb	sy
 8020814:	613b      	str	r3, [r7, #16]
}
 8020816:	bf00      	nop
 8020818:	e7fe      	b.n	8020818 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802081a:	68fb      	ldr	r3, [r7, #12]
 802081c:	68ba      	ldr	r2, [r7, #8]
 802081e:	fb02 f303 	mul.w	r3, r2, r3
 8020822:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8020824:	69fb      	ldr	r3, [r7, #28]
 8020826:	3350      	adds	r3, #80	; 0x50
 8020828:	4618      	mov	r0, r3
 802082a:	f002 fdcd 	bl	80233c8 <pvPortMalloc>
 802082e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8020830:	69bb      	ldr	r3, [r7, #24]
 8020832:	2b00      	cmp	r3, #0
 8020834:	d011      	beq.n	802085a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8020836:	69bb      	ldr	r3, [r7, #24]
 8020838:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 802083a:	697b      	ldr	r3, [r7, #20]
 802083c:	3350      	adds	r3, #80	; 0x50
 802083e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8020840:	69bb      	ldr	r3, [r7, #24]
 8020842:	2200      	movs	r2, #0
 8020844:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8020848:	79fa      	ldrb	r2, [r7, #7]
 802084a:	69bb      	ldr	r3, [r7, #24]
 802084c:	9300      	str	r3, [sp, #0]
 802084e:	4613      	mov	r3, r2
 8020850:	697a      	ldr	r2, [r7, #20]
 8020852:	68b9      	ldr	r1, [r7, #8]
 8020854:	68f8      	ldr	r0, [r7, #12]
 8020856:	f000 f805 	bl	8020864 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 802085a:	69bb      	ldr	r3, [r7, #24]
	}
 802085c:	4618      	mov	r0, r3
 802085e:	3720      	adds	r7, #32
 8020860:	46bd      	mov	sp, r7
 8020862:	bd80      	pop	{r7, pc}

08020864 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8020864:	b580      	push	{r7, lr}
 8020866:	b084      	sub	sp, #16
 8020868:	af00      	add	r7, sp, #0
 802086a:	60f8      	str	r0, [r7, #12]
 802086c:	60b9      	str	r1, [r7, #8]
 802086e:	607a      	str	r2, [r7, #4]
 8020870:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8020872:	68bb      	ldr	r3, [r7, #8]
 8020874:	2b00      	cmp	r3, #0
 8020876:	d103      	bne.n	8020880 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8020878:	69bb      	ldr	r3, [r7, #24]
 802087a:	69ba      	ldr	r2, [r7, #24]
 802087c:	601a      	str	r2, [r3, #0]
 802087e:	e002      	b.n	8020886 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8020880:	69bb      	ldr	r3, [r7, #24]
 8020882:	687a      	ldr	r2, [r7, #4]
 8020884:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8020886:	69bb      	ldr	r3, [r7, #24]
 8020888:	68fa      	ldr	r2, [r7, #12]
 802088a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 802088c:	69bb      	ldr	r3, [r7, #24]
 802088e:	68ba      	ldr	r2, [r7, #8]
 8020890:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8020892:	2101      	movs	r1, #1
 8020894:	69b8      	ldr	r0, [r7, #24]
 8020896:	f7ff fecb 	bl	8020630 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 802089a:	69bb      	ldr	r3, [r7, #24]
 802089c:	78fa      	ldrb	r2, [r7, #3]
 802089e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80208a2:	bf00      	nop
 80208a4:	3710      	adds	r7, #16
 80208a6:	46bd      	mov	sp, r7
 80208a8:	bd80      	pop	{r7, pc}

080208aa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80208aa:	b580      	push	{r7, lr}
 80208ac:	b082      	sub	sp, #8
 80208ae:	af00      	add	r7, sp, #0
 80208b0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80208b2:	687b      	ldr	r3, [r7, #4]
 80208b4:	2b00      	cmp	r3, #0
 80208b6:	d00e      	beq.n	80208d6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80208b8:	687b      	ldr	r3, [r7, #4]
 80208ba:	2200      	movs	r2, #0
 80208bc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80208be:	687b      	ldr	r3, [r7, #4]
 80208c0:	2200      	movs	r2, #0
 80208c2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80208c4:	687b      	ldr	r3, [r7, #4]
 80208c6:	2200      	movs	r2, #0
 80208c8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80208ca:	2300      	movs	r3, #0
 80208cc:	2200      	movs	r2, #0
 80208ce:	2100      	movs	r1, #0
 80208d0:	6878      	ldr	r0, [r7, #4]
 80208d2:	f000 f8a1 	bl	8020a18 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80208d6:	bf00      	nop
 80208d8:	3708      	adds	r7, #8
 80208da:	46bd      	mov	sp, r7
 80208dc:	bd80      	pop	{r7, pc}

080208de <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80208de:	b580      	push	{r7, lr}
 80208e0:	b086      	sub	sp, #24
 80208e2:	af00      	add	r7, sp, #0
 80208e4:	4603      	mov	r3, r0
 80208e6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80208e8:	2301      	movs	r3, #1
 80208ea:	617b      	str	r3, [r7, #20]
 80208ec:	2300      	movs	r3, #0
 80208ee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80208f0:	79fb      	ldrb	r3, [r7, #7]
 80208f2:	461a      	mov	r2, r3
 80208f4:	6939      	ldr	r1, [r7, #16]
 80208f6:	6978      	ldr	r0, [r7, #20]
 80208f8:	f7ff ff7a 	bl	80207f0 <xQueueGenericCreate>
 80208fc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80208fe:	68f8      	ldr	r0, [r7, #12]
 8020900:	f7ff ffd3 	bl	80208aa <prvInitialiseMutex>

		return xNewQueue;
 8020904:	68fb      	ldr	r3, [r7, #12]
	}
 8020906:	4618      	mov	r0, r3
 8020908:	3718      	adds	r7, #24
 802090a:	46bd      	mov	sp, r7
 802090c:	bd80      	pop	{r7, pc}

0802090e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 802090e:	b580      	push	{r7, lr}
 8020910:	b088      	sub	sp, #32
 8020912:	af02      	add	r7, sp, #8
 8020914:	4603      	mov	r3, r0
 8020916:	6039      	str	r1, [r7, #0]
 8020918:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 802091a:	2301      	movs	r3, #1
 802091c:	617b      	str	r3, [r7, #20]
 802091e:	2300      	movs	r3, #0
 8020920:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8020922:	79fb      	ldrb	r3, [r7, #7]
 8020924:	9300      	str	r3, [sp, #0]
 8020926:	683b      	ldr	r3, [r7, #0]
 8020928:	2200      	movs	r2, #0
 802092a:	6939      	ldr	r1, [r7, #16]
 802092c:	6978      	ldr	r0, [r7, #20]
 802092e:	f7ff fee7 	bl	8020700 <xQueueGenericCreateStatic>
 8020932:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8020934:	68f8      	ldr	r0, [r7, #12]
 8020936:	f7ff ffb8 	bl	80208aa <prvInitialiseMutex>

		return xNewQueue;
 802093a:	68fb      	ldr	r3, [r7, #12]
	}
 802093c:	4618      	mov	r0, r3
 802093e:	3718      	adds	r7, #24
 8020940:	46bd      	mov	sp, r7
 8020942:	bd80      	pop	{r7, pc}

08020944 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8020944:	b590      	push	{r4, r7, lr}
 8020946:	b087      	sub	sp, #28
 8020948:	af00      	add	r7, sp, #0
 802094a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 802094c:	687b      	ldr	r3, [r7, #4]
 802094e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8020950:	693b      	ldr	r3, [r7, #16]
 8020952:	2b00      	cmp	r3, #0
 8020954:	d10a      	bne.n	802096c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8020956:	f04f 0350 	mov.w	r3, #80	; 0x50
 802095a:	f383 8811 	msr	BASEPRI, r3
 802095e:	f3bf 8f6f 	isb	sy
 8020962:	f3bf 8f4f 	dsb	sy
 8020966:	60fb      	str	r3, [r7, #12]
}
 8020968:	bf00      	nop
 802096a:	e7fe      	b.n	802096a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 802096c:	693b      	ldr	r3, [r7, #16]
 802096e:	689c      	ldr	r4, [r3, #8]
 8020970:	f001 fd9e 	bl	80224b0 <xTaskGetCurrentTaskHandle>
 8020974:	4603      	mov	r3, r0
 8020976:	429c      	cmp	r4, r3
 8020978:	d111      	bne.n	802099e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 802097a:	693b      	ldr	r3, [r7, #16]
 802097c:	68db      	ldr	r3, [r3, #12]
 802097e:	1e5a      	subs	r2, r3, #1
 8020980:	693b      	ldr	r3, [r7, #16]
 8020982:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8020984:	693b      	ldr	r3, [r7, #16]
 8020986:	68db      	ldr	r3, [r3, #12]
 8020988:	2b00      	cmp	r3, #0
 802098a:	d105      	bne.n	8020998 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 802098c:	2300      	movs	r3, #0
 802098e:	2200      	movs	r2, #0
 8020990:	2100      	movs	r1, #0
 8020992:	6938      	ldr	r0, [r7, #16]
 8020994:	f000 f840 	bl	8020a18 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8020998:	2301      	movs	r3, #1
 802099a:	617b      	str	r3, [r7, #20]
 802099c:	e001      	b.n	80209a2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 802099e:	2300      	movs	r3, #0
 80209a0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80209a2:	697b      	ldr	r3, [r7, #20]
	}
 80209a4:	4618      	mov	r0, r3
 80209a6:	371c      	adds	r7, #28
 80209a8:	46bd      	mov	sp, r7
 80209aa:	bd90      	pop	{r4, r7, pc}

080209ac <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80209ac:	b590      	push	{r4, r7, lr}
 80209ae:	b087      	sub	sp, #28
 80209b0:	af00      	add	r7, sp, #0
 80209b2:	6078      	str	r0, [r7, #4]
 80209b4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80209b6:	687b      	ldr	r3, [r7, #4]
 80209b8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80209ba:	693b      	ldr	r3, [r7, #16]
 80209bc:	2b00      	cmp	r3, #0
 80209be:	d10a      	bne.n	80209d6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80209c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80209c4:	f383 8811 	msr	BASEPRI, r3
 80209c8:	f3bf 8f6f 	isb	sy
 80209cc:	f3bf 8f4f 	dsb	sy
 80209d0:	60fb      	str	r3, [r7, #12]
}
 80209d2:	bf00      	nop
 80209d4:	e7fe      	b.n	80209d4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80209d6:	693b      	ldr	r3, [r7, #16]
 80209d8:	689c      	ldr	r4, [r3, #8]
 80209da:	f001 fd69 	bl	80224b0 <xTaskGetCurrentTaskHandle>
 80209de:	4603      	mov	r3, r0
 80209e0:	429c      	cmp	r4, r3
 80209e2:	d107      	bne.n	80209f4 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80209e4:	693b      	ldr	r3, [r7, #16]
 80209e6:	68db      	ldr	r3, [r3, #12]
 80209e8:	1c5a      	adds	r2, r3, #1
 80209ea:	693b      	ldr	r3, [r7, #16]
 80209ec:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80209ee:	2301      	movs	r3, #1
 80209f0:	617b      	str	r3, [r7, #20]
 80209f2:	e00c      	b.n	8020a0e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80209f4:	6839      	ldr	r1, [r7, #0]
 80209f6:	6938      	ldr	r0, [r7, #16]
 80209f8:	f000 fa88 	bl	8020f0c <xQueueSemaphoreTake>
 80209fc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80209fe:	697b      	ldr	r3, [r7, #20]
 8020a00:	2b00      	cmp	r3, #0
 8020a02:	d004      	beq.n	8020a0e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8020a04:	693b      	ldr	r3, [r7, #16]
 8020a06:	68db      	ldr	r3, [r3, #12]
 8020a08:	1c5a      	adds	r2, r3, #1
 8020a0a:	693b      	ldr	r3, [r7, #16]
 8020a0c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8020a0e:	697b      	ldr	r3, [r7, #20]
	}
 8020a10:	4618      	mov	r0, r3
 8020a12:	371c      	adds	r7, #28
 8020a14:	46bd      	mov	sp, r7
 8020a16:	bd90      	pop	{r4, r7, pc}

08020a18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8020a18:	b580      	push	{r7, lr}
 8020a1a:	b08e      	sub	sp, #56	; 0x38
 8020a1c:	af00      	add	r7, sp, #0
 8020a1e:	60f8      	str	r0, [r7, #12]
 8020a20:	60b9      	str	r1, [r7, #8]
 8020a22:	607a      	str	r2, [r7, #4]
 8020a24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8020a26:	2300      	movs	r3, #0
 8020a28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8020a2a:	68fb      	ldr	r3, [r7, #12]
 8020a2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8020a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020a30:	2b00      	cmp	r3, #0
 8020a32:	d10a      	bne.n	8020a4a <xQueueGenericSend+0x32>
	__asm volatile
 8020a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020a38:	f383 8811 	msr	BASEPRI, r3
 8020a3c:	f3bf 8f6f 	isb	sy
 8020a40:	f3bf 8f4f 	dsb	sy
 8020a44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8020a46:	bf00      	nop
 8020a48:	e7fe      	b.n	8020a48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020a4a:	68bb      	ldr	r3, [r7, #8]
 8020a4c:	2b00      	cmp	r3, #0
 8020a4e:	d103      	bne.n	8020a58 <xQueueGenericSend+0x40>
 8020a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020a54:	2b00      	cmp	r3, #0
 8020a56:	d101      	bne.n	8020a5c <xQueueGenericSend+0x44>
 8020a58:	2301      	movs	r3, #1
 8020a5a:	e000      	b.n	8020a5e <xQueueGenericSend+0x46>
 8020a5c:	2300      	movs	r3, #0
 8020a5e:	2b00      	cmp	r3, #0
 8020a60:	d10a      	bne.n	8020a78 <xQueueGenericSend+0x60>
	__asm volatile
 8020a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020a66:	f383 8811 	msr	BASEPRI, r3
 8020a6a:	f3bf 8f6f 	isb	sy
 8020a6e:	f3bf 8f4f 	dsb	sy
 8020a72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8020a74:	bf00      	nop
 8020a76:	e7fe      	b.n	8020a76 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8020a78:	683b      	ldr	r3, [r7, #0]
 8020a7a:	2b02      	cmp	r3, #2
 8020a7c:	d103      	bne.n	8020a86 <xQueueGenericSend+0x6e>
 8020a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020a82:	2b01      	cmp	r3, #1
 8020a84:	d101      	bne.n	8020a8a <xQueueGenericSend+0x72>
 8020a86:	2301      	movs	r3, #1
 8020a88:	e000      	b.n	8020a8c <xQueueGenericSend+0x74>
 8020a8a:	2300      	movs	r3, #0
 8020a8c:	2b00      	cmp	r3, #0
 8020a8e:	d10a      	bne.n	8020aa6 <xQueueGenericSend+0x8e>
	__asm volatile
 8020a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020a94:	f383 8811 	msr	BASEPRI, r3
 8020a98:	f3bf 8f6f 	isb	sy
 8020a9c:	f3bf 8f4f 	dsb	sy
 8020aa0:	623b      	str	r3, [r7, #32]
}
 8020aa2:	bf00      	nop
 8020aa4:	e7fe      	b.n	8020aa4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8020aa6:	f001 fd13 	bl	80224d0 <xTaskGetSchedulerState>
 8020aaa:	4603      	mov	r3, r0
 8020aac:	2b00      	cmp	r3, #0
 8020aae:	d102      	bne.n	8020ab6 <xQueueGenericSend+0x9e>
 8020ab0:	687b      	ldr	r3, [r7, #4]
 8020ab2:	2b00      	cmp	r3, #0
 8020ab4:	d101      	bne.n	8020aba <xQueueGenericSend+0xa2>
 8020ab6:	2301      	movs	r3, #1
 8020ab8:	e000      	b.n	8020abc <xQueueGenericSend+0xa4>
 8020aba:	2300      	movs	r3, #0
 8020abc:	2b00      	cmp	r3, #0
 8020abe:	d10a      	bne.n	8020ad6 <xQueueGenericSend+0xbe>
	__asm volatile
 8020ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020ac4:	f383 8811 	msr	BASEPRI, r3
 8020ac8:	f3bf 8f6f 	isb	sy
 8020acc:	f3bf 8f4f 	dsb	sy
 8020ad0:	61fb      	str	r3, [r7, #28]
}
 8020ad2:	bf00      	nop
 8020ad4:	e7fe      	b.n	8020ad4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8020ad6:	f002 fb55 	bl	8023184 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8020ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020ae2:	429a      	cmp	r2, r3
 8020ae4:	d302      	bcc.n	8020aec <xQueueGenericSend+0xd4>
 8020ae6:	683b      	ldr	r3, [r7, #0]
 8020ae8:	2b02      	cmp	r3, #2
 8020aea:	d129      	bne.n	8020b40 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8020aec:	683a      	ldr	r2, [r7, #0]
 8020aee:	68b9      	ldr	r1, [r7, #8]
 8020af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020af2:	f000 fccd 	bl	8021490 <prvCopyDataToQueue>
 8020af6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8020af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020afc:	2b00      	cmp	r3, #0
 8020afe:	d010      	beq.n	8020b22 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8020b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b02:	3324      	adds	r3, #36	; 0x24
 8020b04:	4618      	mov	r0, r3
 8020b06:	f001 fad9 	bl	80220bc <xTaskRemoveFromEventList>
 8020b0a:	4603      	mov	r3, r0
 8020b0c:	2b00      	cmp	r3, #0
 8020b0e:	d013      	beq.n	8020b38 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8020b10:	4b3f      	ldr	r3, [pc, #252]	; (8020c10 <xQueueGenericSend+0x1f8>)
 8020b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020b16:	601a      	str	r2, [r3, #0]
 8020b18:	f3bf 8f4f 	dsb	sy
 8020b1c:	f3bf 8f6f 	isb	sy
 8020b20:	e00a      	b.n	8020b38 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8020b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b24:	2b00      	cmp	r3, #0
 8020b26:	d007      	beq.n	8020b38 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8020b28:	4b39      	ldr	r3, [pc, #228]	; (8020c10 <xQueueGenericSend+0x1f8>)
 8020b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020b2e:	601a      	str	r2, [r3, #0]
 8020b30:	f3bf 8f4f 	dsb	sy
 8020b34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8020b38:	f002 fb54 	bl	80231e4 <vPortExitCritical>
				return pdPASS;
 8020b3c:	2301      	movs	r3, #1
 8020b3e:	e063      	b.n	8020c08 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8020b40:	687b      	ldr	r3, [r7, #4]
 8020b42:	2b00      	cmp	r3, #0
 8020b44:	d103      	bne.n	8020b4e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8020b46:	f002 fb4d 	bl	80231e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8020b4a:	2300      	movs	r3, #0
 8020b4c:	e05c      	b.n	8020c08 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8020b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020b50:	2b00      	cmp	r3, #0
 8020b52:	d106      	bne.n	8020b62 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8020b54:	f107 0314 	add.w	r3, r7, #20
 8020b58:	4618      	mov	r0, r3
 8020b5a:	f001 fb13 	bl	8022184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8020b5e:	2301      	movs	r3, #1
 8020b60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8020b62:	f002 fb3f 	bl	80231e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8020b66:	f001 f863 	bl	8021c30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8020b6a:	f002 fb0b 	bl	8023184 <vPortEnterCritical>
 8020b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020b74:	b25b      	sxtb	r3, r3
 8020b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020b7a:	d103      	bne.n	8020b84 <xQueueGenericSend+0x16c>
 8020b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b7e:	2200      	movs	r2, #0
 8020b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8020b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020b8a:	b25b      	sxtb	r3, r3
 8020b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020b90:	d103      	bne.n	8020b9a <xQueueGenericSend+0x182>
 8020b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b94:	2200      	movs	r2, #0
 8020b96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8020b9a:	f002 fb23 	bl	80231e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8020b9e:	1d3a      	adds	r2, r7, #4
 8020ba0:	f107 0314 	add.w	r3, r7, #20
 8020ba4:	4611      	mov	r1, r2
 8020ba6:	4618      	mov	r0, r3
 8020ba8:	f001 fb02 	bl	80221b0 <xTaskCheckForTimeOut>
 8020bac:	4603      	mov	r3, r0
 8020bae:	2b00      	cmp	r3, #0
 8020bb0:	d124      	bne.n	8020bfc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8020bb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020bb4:	f000 fd64 	bl	8021680 <prvIsQueueFull>
 8020bb8:	4603      	mov	r3, r0
 8020bba:	2b00      	cmp	r3, #0
 8020bbc:	d018      	beq.n	8020bf0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8020bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020bc0:	3310      	adds	r3, #16
 8020bc2:	687a      	ldr	r2, [r7, #4]
 8020bc4:	4611      	mov	r1, r2
 8020bc6:	4618      	mov	r0, r3
 8020bc8:	f001 fa28 	bl	802201c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8020bcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020bce:	f000 fcef 	bl	80215b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8020bd2:	f001 f83b 	bl	8021c4c <xTaskResumeAll>
 8020bd6:	4603      	mov	r3, r0
 8020bd8:	2b00      	cmp	r3, #0
 8020bda:	f47f af7c 	bne.w	8020ad6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8020bde:	4b0c      	ldr	r3, [pc, #48]	; (8020c10 <xQueueGenericSend+0x1f8>)
 8020be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020be4:	601a      	str	r2, [r3, #0]
 8020be6:	f3bf 8f4f 	dsb	sy
 8020bea:	f3bf 8f6f 	isb	sy
 8020bee:	e772      	b.n	8020ad6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8020bf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020bf2:	f000 fcdd 	bl	80215b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8020bf6:	f001 f829 	bl	8021c4c <xTaskResumeAll>
 8020bfa:	e76c      	b.n	8020ad6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8020bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020bfe:	f000 fcd7 	bl	80215b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8020c02:	f001 f823 	bl	8021c4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8020c06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8020c08:	4618      	mov	r0, r3
 8020c0a:	3738      	adds	r7, #56	; 0x38
 8020c0c:	46bd      	mov	sp, r7
 8020c0e:	bd80      	pop	{r7, pc}
 8020c10:	e000ed04 	.word	0xe000ed04

08020c14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8020c14:	b580      	push	{r7, lr}
 8020c16:	b090      	sub	sp, #64	; 0x40
 8020c18:	af00      	add	r7, sp, #0
 8020c1a:	60f8      	str	r0, [r7, #12]
 8020c1c:	60b9      	str	r1, [r7, #8]
 8020c1e:	607a      	str	r2, [r7, #4]
 8020c20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8020c22:	68fb      	ldr	r3, [r7, #12]
 8020c24:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8020c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020c28:	2b00      	cmp	r3, #0
 8020c2a:	d10a      	bne.n	8020c42 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8020c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020c30:	f383 8811 	msr	BASEPRI, r3
 8020c34:	f3bf 8f6f 	isb	sy
 8020c38:	f3bf 8f4f 	dsb	sy
 8020c3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8020c3e:	bf00      	nop
 8020c40:	e7fe      	b.n	8020c40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020c42:	68bb      	ldr	r3, [r7, #8]
 8020c44:	2b00      	cmp	r3, #0
 8020c46:	d103      	bne.n	8020c50 <xQueueGenericSendFromISR+0x3c>
 8020c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020c4c:	2b00      	cmp	r3, #0
 8020c4e:	d101      	bne.n	8020c54 <xQueueGenericSendFromISR+0x40>
 8020c50:	2301      	movs	r3, #1
 8020c52:	e000      	b.n	8020c56 <xQueueGenericSendFromISR+0x42>
 8020c54:	2300      	movs	r3, #0
 8020c56:	2b00      	cmp	r3, #0
 8020c58:	d10a      	bne.n	8020c70 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8020c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020c5e:	f383 8811 	msr	BASEPRI, r3
 8020c62:	f3bf 8f6f 	isb	sy
 8020c66:	f3bf 8f4f 	dsb	sy
 8020c6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8020c6c:	bf00      	nop
 8020c6e:	e7fe      	b.n	8020c6e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8020c70:	683b      	ldr	r3, [r7, #0]
 8020c72:	2b02      	cmp	r3, #2
 8020c74:	d103      	bne.n	8020c7e <xQueueGenericSendFromISR+0x6a>
 8020c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020c7a:	2b01      	cmp	r3, #1
 8020c7c:	d101      	bne.n	8020c82 <xQueueGenericSendFromISR+0x6e>
 8020c7e:	2301      	movs	r3, #1
 8020c80:	e000      	b.n	8020c84 <xQueueGenericSendFromISR+0x70>
 8020c82:	2300      	movs	r3, #0
 8020c84:	2b00      	cmp	r3, #0
 8020c86:	d10a      	bne.n	8020c9e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8020c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020c8c:	f383 8811 	msr	BASEPRI, r3
 8020c90:	f3bf 8f6f 	isb	sy
 8020c94:	f3bf 8f4f 	dsb	sy
 8020c98:	623b      	str	r3, [r7, #32]
}
 8020c9a:	bf00      	nop
 8020c9c:	e7fe      	b.n	8020c9c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8020c9e:	f002 fb53 	bl	8023348 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8020ca2:	f3ef 8211 	mrs	r2, BASEPRI
 8020ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020caa:	f383 8811 	msr	BASEPRI, r3
 8020cae:	f3bf 8f6f 	isb	sy
 8020cb2:	f3bf 8f4f 	dsb	sy
 8020cb6:	61fa      	str	r2, [r7, #28]
 8020cb8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8020cba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8020cbc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8020cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020cc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020cc6:	429a      	cmp	r2, r3
 8020cc8:	d302      	bcc.n	8020cd0 <xQueueGenericSendFromISR+0xbc>
 8020cca:	683b      	ldr	r3, [r7, #0]
 8020ccc:	2b02      	cmp	r3, #2
 8020cce:	d12f      	bne.n	8020d30 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8020cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020cd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8020cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020cde:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8020ce0:	683a      	ldr	r2, [r7, #0]
 8020ce2:	68b9      	ldr	r1, [r7, #8]
 8020ce4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8020ce6:	f000 fbd3 	bl	8021490 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8020cea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8020cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020cf2:	d112      	bne.n	8020d1a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8020cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020cf8:	2b00      	cmp	r3, #0
 8020cfa:	d016      	beq.n	8020d2a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8020cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020cfe:	3324      	adds	r3, #36	; 0x24
 8020d00:	4618      	mov	r0, r3
 8020d02:	f001 f9db 	bl	80220bc <xTaskRemoveFromEventList>
 8020d06:	4603      	mov	r3, r0
 8020d08:	2b00      	cmp	r3, #0
 8020d0a:	d00e      	beq.n	8020d2a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8020d0c:	687b      	ldr	r3, [r7, #4]
 8020d0e:	2b00      	cmp	r3, #0
 8020d10:	d00b      	beq.n	8020d2a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8020d12:	687b      	ldr	r3, [r7, #4]
 8020d14:	2201      	movs	r2, #1
 8020d16:	601a      	str	r2, [r3, #0]
 8020d18:	e007      	b.n	8020d2a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8020d1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8020d1e:	3301      	adds	r3, #1
 8020d20:	b2db      	uxtb	r3, r3
 8020d22:	b25a      	sxtb	r2, r3
 8020d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020d26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8020d2a:	2301      	movs	r3, #1
 8020d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8020d2e:	e001      	b.n	8020d34 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8020d30:	2300      	movs	r3, #0
 8020d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020d36:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8020d38:	697b      	ldr	r3, [r7, #20]
 8020d3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8020d3e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8020d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8020d42:	4618      	mov	r0, r3
 8020d44:	3740      	adds	r7, #64	; 0x40
 8020d46:	46bd      	mov	sp, r7
 8020d48:	bd80      	pop	{r7, pc}
	...

08020d4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8020d4c:	b580      	push	{r7, lr}
 8020d4e:	b08c      	sub	sp, #48	; 0x30
 8020d50:	af00      	add	r7, sp, #0
 8020d52:	60f8      	str	r0, [r7, #12]
 8020d54:	60b9      	str	r1, [r7, #8]
 8020d56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8020d58:	2300      	movs	r3, #0
 8020d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8020d5c:	68fb      	ldr	r3, [r7, #12]
 8020d5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8020d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020d62:	2b00      	cmp	r3, #0
 8020d64:	d10a      	bne.n	8020d7c <xQueueReceive+0x30>
	__asm volatile
 8020d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020d6a:	f383 8811 	msr	BASEPRI, r3
 8020d6e:	f3bf 8f6f 	isb	sy
 8020d72:	f3bf 8f4f 	dsb	sy
 8020d76:	623b      	str	r3, [r7, #32]
}
 8020d78:	bf00      	nop
 8020d7a:	e7fe      	b.n	8020d7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020d7c:	68bb      	ldr	r3, [r7, #8]
 8020d7e:	2b00      	cmp	r3, #0
 8020d80:	d103      	bne.n	8020d8a <xQueueReceive+0x3e>
 8020d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020d86:	2b00      	cmp	r3, #0
 8020d88:	d101      	bne.n	8020d8e <xQueueReceive+0x42>
 8020d8a:	2301      	movs	r3, #1
 8020d8c:	e000      	b.n	8020d90 <xQueueReceive+0x44>
 8020d8e:	2300      	movs	r3, #0
 8020d90:	2b00      	cmp	r3, #0
 8020d92:	d10a      	bne.n	8020daa <xQueueReceive+0x5e>
	__asm volatile
 8020d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020d98:	f383 8811 	msr	BASEPRI, r3
 8020d9c:	f3bf 8f6f 	isb	sy
 8020da0:	f3bf 8f4f 	dsb	sy
 8020da4:	61fb      	str	r3, [r7, #28]
}
 8020da6:	bf00      	nop
 8020da8:	e7fe      	b.n	8020da8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8020daa:	f001 fb91 	bl	80224d0 <xTaskGetSchedulerState>
 8020dae:	4603      	mov	r3, r0
 8020db0:	2b00      	cmp	r3, #0
 8020db2:	d102      	bne.n	8020dba <xQueueReceive+0x6e>
 8020db4:	687b      	ldr	r3, [r7, #4]
 8020db6:	2b00      	cmp	r3, #0
 8020db8:	d101      	bne.n	8020dbe <xQueueReceive+0x72>
 8020dba:	2301      	movs	r3, #1
 8020dbc:	e000      	b.n	8020dc0 <xQueueReceive+0x74>
 8020dbe:	2300      	movs	r3, #0
 8020dc0:	2b00      	cmp	r3, #0
 8020dc2:	d10a      	bne.n	8020dda <xQueueReceive+0x8e>
	__asm volatile
 8020dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020dc8:	f383 8811 	msr	BASEPRI, r3
 8020dcc:	f3bf 8f6f 	isb	sy
 8020dd0:	f3bf 8f4f 	dsb	sy
 8020dd4:	61bb      	str	r3, [r7, #24]
}
 8020dd6:	bf00      	nop
 8020dd8:	e7fe      	b.n	8020dd8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8020dda:	f002 f9d3 	bl	8023184 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8020dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020de2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8020de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020de6:	2b00      	cmp	r3, #0
 8020de8:	d01f      	beq.n	8020e2a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8020dea:	68b9      	ldr	r1, [r7, #8]
 8020dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020dee:	f000 fbb9 	bl	8021564 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8020df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020df4:	1e5a      	subs	r2, r3, #1
 8020df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020df8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8020dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020dfc:	691b      	ldr	r3, [r3, #16]
 8020dfe:	2b00      	cmp	r3, #0
 8020e00:	d00f      	beq.n	8020e22 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8020e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020e04:	3310      	adds	r3, #16
 8020e06:	4618      	mov	r0, r3
 8020e08:	f001 f958 	bl	80220bc <xTaskRemoveFromEventList>
 8020e0c:	4603      	mov	r3, r0
 8020e0e:	2b00      	cmp	r3, #0
 8020e10:	d007      	beq.n	8020e22 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8020e12:	4b3d      	ldr	r3, [pc, #244]	; (8020f08 <xQueueReceive+0x1bc>)
 8020e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020e18:	601a      	str	r2, [r3, #0]
 8020e1a:	f3bf 8f4f 	dsb	sy
 8020e1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8020e22:	f002 f9df 	bl	80231e4 <vPortExitCritical>
				return pdPASS;
 8020e26:	2301      	movs	r3, #1
 8020e28:	e069      	b.n	8020efe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8020e2a:	687b      	ldr	r3, [r7, #4]
 8020e2c:	2b00      	cmp	r3, #0
 8020e2e:	d103      	bne.n	8020e38 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8020e30:	f002 f9d8 	bl	80231e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8020e34:	2300      	movs	r3, #0
 8020e36:	e062      	b.n	8020efe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8020e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020e3a:	2b00      	cmp	r3, #0
 8020e3c:	d106      	bne.n	8020e4c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8020e3e:	f107 0310 	add.w	r3, r7, #16
 8020e42:	4618      	mov	r0, r3
 8020e44:	f001 f99e 	bl	8022184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8020e48:	2301      	movs	r3, #1
 8020e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8020e4c:	f002 f9ca 	bl	80231e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8020e50:	f000 feee 	bl	8021c30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8020e54:	f002 f996 	bl	8023184 <vPortEnterCritical>
 8020e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020e5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020e5e:	b25b      	sxtb	r3, r3
 8020e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020e64:	d103      	bne.n	8020e6e <xQueueReceive+0x122>
 8020e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020e68:	2200      	movs	r2, #0
 8020e6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8020e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020e70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020e74:	b25b      	sxtb	r3, r3
 8020e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020e7a:	d103      	bne.n	8020e84 <xQueueReceive+0x138>
 8020e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020e7e:	2200      	movs	r2, #0
 8020e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8020e84:	f002 f9ae 	bl	80231e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8020e88:	1d3a      	adds	r2, r7, #4
 8020e8a:	f107 0310 	add.w	r3, r7, #16
 8020e8e:	4611      	mov	r1, r2
 8020e90:	4618      	mov	r0, r3
 8020e92:	f001 f98d 	bl	80221b0 <xTaskCheckForTimeOut>
 8020e96:	4603      	mov	r3, r0
 8020e98:	2b00      	cmp	r3, #0
 8020e9a:	d123      	bne.n	8020ee4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8020e9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020e9e:	f000 fbd9 	bl	8021654 <prvIsQueueEmpty>
 8020ea2:	4603      	mov	r3, r0
 8020ea4:	2b00      	cmp	r3, #0
 8020ea6:	d017      	beq.n	8020ed8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8020ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020eaa:	3324      	adds	r3, #36	; 0x24
 8020eac:	687a      	ldr	r2, [r7, #4]
 8020eae:	4611      	mov	r1, r2
 8020eb0:	4618      	mov	r0, r3
 8020eb2:	f001 f8b3 	bl	802201c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8020eb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020eb8:	f000 fb7a 	bl	80215b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8020ebc:	f000 fec6 	bl	8021c4c <xTaskResumeAll>
 8020ec0:	4603      	mov	r3, r0
 8020ec2:	2b00      	cmp	r3, #0
 8020ec4:	d189      	bne.n	8020dda <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8020ec6:	4b10      	ldr	r3, [pc, #64]	; (8020f08 <xQueueReceive+0x1bc>)
 8020ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020ecc:	601a      	str	r2, [r3, #0]
 8020ece:	f3bf 8f4f 	dsb	sy
 8020ed2:	f3bf 8f6f 	isb	sy
 8020ed6:	e780      	b.n	8020dda <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8020ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020eda:	f000 fb69 	bl	80215b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8020ede:	f000 feb5 	bl	8021c4c <xTaskResumeAll>
 8020ee2:	e77a      	b.n	8020dda <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8020ee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020ee6:	f000 fb63 	bl	80215b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8020eea:	f000 feaf 	bl	8021c4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8020eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020ef0:	f000 fbb0 	bl	8021654 <prvIsQueueEmpty>
 8020ef4:	4603      	mov	r3, r0
 8020ef6:	2b00      	cmp	r3, #0
 8020ef8:	f43f af6f 	beq.w	8020dda <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8020efc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8020efe:	4618      	mov	r0, r3
 8020f00:	3730      	adds	r7, #48	; 0x30
 8020f02:	46bd      	mov	sp, r7
 8020f04:	bd80      	pop	{r7, pc}
 8020f06:	bf00      	nop
 8020f08:	e000ed04 	.word	0xe000ed04

08020f0c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8020f0c:	b580      	push	{r7, lr}
 8020f0e:	b08e      	sub	sp, #56	; 0x38
 8020f10:	af00      	add	r7, sp, #0
 8020f12:	6078      	str	r0, [r7, #4]
 8020f14:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8020f16:	2300      	movs	r3, #0
 8020f18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8020f1a:	687b      	ldr	r3, [r7, #4]
 8020f1c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8020f1e:	2300      	movs	r3, #0
 8020f20:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8020f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020f24:	2b00      	cmp	r3, #0
 8020f26:	d10a      	bne.n	8020f3e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8020f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020f2c:	f383 8811 	msr	BASEPRI, r3
 8020f30:	f3bf 8f6f 	isb	sy
 8020f34:	f3bf 8f4f 	dsb	sy
 8020f38:	623b      	str	r3, [r7, #32]
}
 8020f3a:	bf00      	nop
 8020f3c:	e7fe      	b.n	8020f3c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8020f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020f42:	2b00      	cmp	r3, #0
 8020f44:	d00a      	beq.n	8020f5c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8020f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020f4a:	f383 8811 	msr	BASEPRI, r3
 8020f4e:	f3bf 8f6f 	isb	sy
 8020f52:	f3bf 8f4f 	dsb	sy
 8020f56:	61fb      	str	r3, [r7, #28]
}
 8020f58:	bf00      	nop
 8020f5a:	e7fe      	b.n	8020f5a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8020f5c:	f001 fab8 	bl	80224d0 <xTaskGetSchedulerState>
 8020f60:	4603      	mov	r3, r0
 8020f62:	2b00      	cmp	r3, #0
 8020f64:	d102      	bne.n	8020f6c <xQueueSemaphoreTake+0x60>
 8020f66:	683b      	ldr	r3, [r7, #0]
 8020f68:	2b00      	cmp	r3, #0
 8020f6a:	d101      	bne.n	8020f70 <xQueueSemaphoreTake+0x64>
 8020f6c:	2301      	movs	r3, #1
 8020f6e:	e000      	b.n	8020f72 <xQueueSemaphoreTake+0x66>
 8020f70:	2300      	movs	r3, #0
 8020f72:	2b00      	cmp	r3, #0
 8020f74:	d10a      	bne.n	8020f8c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8020f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020f7a:	f383 8811 	msr	BASEPRI, r3
 8020f7e:	f3bf 8f6f 	isb	sy
 8020f82:	f3bf 8f4f 	dsb	sy
 8020f86:	61bb      	str	r3, [r7, #24]
}
 8020f88:	bf00      	nop
 8020f8a:	e7fe      	b.n	8020f8a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8020f8c:	f002 f8fa 	bl	8023184 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8020f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020f94:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8020f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020f98:	2b00      	cmp	r3, #0
 8020f9a:	d024      	beq.n	8020fe6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8020f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020f9e:	1e5a      	subs	r2, r3, #1
 8020fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020fa2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8020fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020fa6:	681b      	ldr	r3, [r3, #0]
 8020fa8:	2b00      	cmp	r3, #0
 8020faa:	d104      	bne.n	8020fb6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8020fac:	f001 fc06 	bl	80227bc <pvTaskIncrementMutexHeldCount>
 8020fb0:	4602      	mov	r2, r0
 8020fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020fb4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8020fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020fb8:	691b      	ldr	r3, [r3, #16]
 8020fba:	2b00      	cmp	r3, #0
 8020fbc:	d00f      	beq.n	8020fde <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8020fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020fc0:	3310      	adds	r3, #16
 8020fc2:	4618      	mov	r0, r3
 8020fc4:	f001 f87a 	bl	80220bc <xTaskRemoveFromEventList>
 8020fc8:	4603      	mov	r3, r0
 8020fca:	2b00      	cmp	r3, #0
 8020fcc:	d007      	beq.n	8020fde <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8020fce:	4b54      	ldr	r3, [pc, #336]	; (8021120 <xQueueSemaphoreTake+0x214>)
 8020fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020fd4:	601a      	str	r2, [r3, #0]
 8020fd6:	f3bf 8f4f 	dsb	sy
 8020fda:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8020fde:	f002 f901 	bl	80231e4 <vPortExitCritical>
				return pdPASS;
 8020fe2:	2301      	movs	r3, #1
 8020fe4:	e097      	b.n	8021116 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8020fe6:	683b      	ldr	r3, [r7, #0]
 8020fe8:	2b00      	cmp	r3, #0
 8020fea:	d111      	bne.n	8021010 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8020fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020fee:	2b00      	cmp	r3, #0
 8020ff0:	d00a      	beq.n	8021008 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8020ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020ff6:	f383 8811 	msr	BASEPRI, r3
 8020ffa:	f3bf 8f6f 	isb	sy
 8020ffe:	f3bf 8f4f 	dsb	sy
 8021002:	617b      	str	r3, [r7, #20]
}
 8021004:	bf00      	nop
 8021006:	e7fe      	b.n	8021006 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8021008:	f002 f8ec 	bl	80231e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 802100c:	2300      	movs	r3, #0
 802100e:	e082      	b.n	8021116 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8021010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021012:	2b00      	cmp	r3, #0
 8021014:	d106      	bne.n	8021024 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8021016:	f107 030c 	add.w	r3, r7, #12
 802101a:	4618      	mov	r0, r3
 802101c:	f001 f8b2 	bl	8022184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8021020:	2301      	movs	r3, #1
 8021022:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8021024:	f002 f8de 	bl	80231e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8021028:	f000 fe02 	bl	8021c30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 802102c:	f002 f8aa 	bl	8023184 <vPortEnterCritical>
 8021030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021032:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8021036:	b25b      	sxtb	r3, r3
 8021038:	f1b3 3fff 	cmp.w	r3, #4294967295
 802103c:	d103      	bne.n	8021046 <xQueueSemaphoreTake+0x13a>
 802103e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021040:	2200      	movs	r2, #0
 8021042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8021046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021048:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802104c:	b25b      	sxtb	r3, r3
 802104e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021052:	d103      	bne.n	802105c <xQueueSemaphoreTake+0x150>
 8021054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021056:	2200      	movs	r2, #0
 8021058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802105c:	f002 f8c2 	bl	80231e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8021060:	463a      	mov	r2, r7
 8021062:	f107 030c 	add.w	r3, r7, #12
 8021066:	4611      	mov	r1, r2
 8021068:	4618      	mov	r0, r3
 802106a:	f001 f8a1 	bl	80221b0 <xTaskCheckForTimeOut>
 802106e:	4603      	mov	r3, r0
 8021070:	2b00      	cmp	r3, #0
 8021072:	d132      	bne.n	80210da <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8021074:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8021076:	f000 faed 	bl	8021654 <prvIsQueueEmpty>
 802107a:	4603      	mov	r3, r0
 802107c:	2b00      	cmp	r3, #0
 802107e:	d026      	beq.n	80210ce <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8021080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021082:	681b      	ldr	r3, [r3, #0]
 8021084:	2b00      	cmp	r3, #0
 8021086:	d109      	bne.n	802109c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8021088:	f002 f87c 	bl	8023184 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 802108c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802108e:	689b      	ldr	r3, [r3, #8]
 8021090:	4618      	mov	r0, r3
 8021092:	f001 fa3b 	bl	802250c <xTaskPriorityInherit>
 8021096:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8021098:	f002 f8a4 	bl	80231e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 802109c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802109e:	3324      	adds	r3, #36	; 0x24
 80210a0:	683a      	ldr	r2, [r7, #0]
 80210a2:	4611      	mov	r1, r2
 80210a4:	4618      	mov	r0, r3
 80210a6:	f000 ffb9 	bl	802201c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80210aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80210ac:	f000 fa80 	bl	80215b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80210b0:	f000 fdcc 	bl	8021c4c <xTaskResumeAll>
 80210b4:	4603      	mov	r3, r0
 80210b6:	2b00      	cmp	r3, #0
 80210b8:	f47f af68 	bne.w	8020f8c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80210bc:	4b18      	ldr	r3, [pc, #96]	; (8021120 <xQueueSemaphoreTake+0x214>)
 80210be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80210c2:	601a      	str	r2, [r3, #0]
 80210c4:	f3bf 8f4f 	dsb	sy
 80210c8:	f3bf 8f6f 	isb	sy
 80210cc:	e75e      	b.n	8020f8c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80210ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80210d0:	f000 fa6e 	bl	80215b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80210d4:	f000 fdba 	bl	8021c4c <xTaskResumeAll>
 80210d8:	e758      	b.n	8020f8c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80210da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80210dc:	f000 fa68 	bl	80215b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80210e0:	f000 fdb4 	bl	8021c4c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80210e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80210e6:	f000 fab5 	bl	8021654 <prvIsQueueEmpty>
 80210ea:	4603      	mov	r3, r0
 80210ec:	2b00      	cmp	r3, #0
 80210ee:	f43f af4d 	beq.w	8020f8c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80210f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80210f4:	2b00      	cmp	r3, #0
 80210f6:	d00d      	beq.n	8021114 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80210f8:	f002 f844 	bl	8023184 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80210fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80210fe:	f000 f9af 	bl	8021460 <prvGetDisinheritPriorityAfterTimeout>
 8021102:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8021104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021106:	689b      	ldr	r3, [r3, #8]
 8021108:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802110a:	4618      	mov	r0, r3
 802110c:	f001 fad4 	bl	80226b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8021110:	f002 f868 	bl	80231e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8021114:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8021116:	4618      	mov	r0, r3
 8021118:	3738      	adds	r7, #56	; 0x38
 802111a:	46bd      	mov	sp, r7
 802111c:	bd80      	pop	{r7, pc}
 802111e:	bf00      	nop
 8021120:	e000ed04 	.word	0xe000ed04

08021124 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8021124:	b580      	push	{r7, lr}
 8021126:	b08e      	sub	sp, #56	; 0x38
 8021128:	af00      	add	r7, sp, #0
 802112a:	60f8      	str	r0, [r7, #12]
 802112c:	60b9      	str	r1, [r7, #8]
 802112e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8021130:	2300      	movs	r3, #0
 8021132:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8021134:	68fb      	ldr	r3, [r7, #12]
 8021136:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8021138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802113a:	2b00      	cmp	r3, #0
 802113c:	d10a      	bne.n	8021154 <xQueuePeek+0x30>
	__asm volatile
 802113e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021142:	f383 8811 	msr	BASEPRI, r3
 8021146:	f3bf 8f6f 	isb	sy
 802114a:	f3bf 8f4f 	dsb	sy
 802114e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8021150:	bf00      	nop
 8021152:	e7fe      	b.n	8021152 <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8021154:	68bb      	ldr	r3, [r7, #8]
 8021156:	2b00      	cmp	r3, #0
 8021158:	d103      	bne.n	8021162 <xQueuePeek+0x3e>
 802115a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802115e:	2b00      	cmp	r3, #0
 8021160:	d101      	bne.n	8021166 <xQueuePeek+0x42>
 8021162:	2301      	movs	r3, #1
 8021164:	e000      	b.n	8021168 <xQueuePeek+0x44>
 8021166:	2300      	movs	r3, #0
 8021168:	2b00      	cmp	r3, #0
 802116a:	d10a      	bne.n	8021182 <xQueuePeek+0x5e>
	__asm volatile
 802116c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021170:	f383 8811 	msr	BASEPRI, r3
 8021174:	f3bf 8f6f 	isb	sy
 8021178:	f3bf 8f4f 	dsb	sy
 802117c:	623b      	str	r3, [r7, #32]
}
 802117e:	bf00      	nop
 8021180:	e7fe      	b.n	8021180 <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8021182:	f001 f9a5 	bl	80224d0 <xTaskGetSchedulerState>
 8021186:	4603      	mov	r3, r0
 8021188:	2b00      	cmp	r3, #0
 802118a:	d102      	bne.n	8021192 <xQueuePeek+0x6e>
 802118c:	687b      	ldr	r3, [r7, #4]
 802118e:	2b00      	cmp	r3, #0
 8021190:	d101      	bne.n	8021196 <xQueuePeek+0x72>
 8021192:	2301      	movs	r3, #1
 8021194:	e000      	b.n	8021198 <xQueuePeek+0x74>
 8021196:	2300      	movs	r3, #0
 8021198:	2b00      	cmp	r3, #0
 802119a:	d10a      	bne.n	80211b2 <xQueuePeek+0x8e>
	__asm volatile
 802119c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80211a0:	f383 8811 	msr	BASEPRI, r3
 80211a4:	f3bf 8f6f 	isb	sy
 80211a8:	f3bf 8f4f 	dsb	sy
 80211ac:	61fb      	str	r3, [r7, #28]
}
 80211ae:	bf00      	nop
 80211b0:	e7fe      	b.n	80211b0 <xQueuePeek+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80211b2:	f001 ffe7 	bl	8023184 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80211b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80211ba:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80211bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80211be:	2b00      	cmp	r3, #0
 80211c0:	d021      	beq.n	8021206 <xQueuePeek+0xe2>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 80211c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211c4:	68db      	ldr	r3, [r3, #12]
 80211c6:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80211c8:	68b9      	ldr	r1, [r7, #8]
 80211ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80211cc:	f000 f9ca 	bl	8021564 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 80211d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80211d4:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80211d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80211da:	2b00      	cmp	r3, #0
 80211dc:	d00f      	beq.n	80211fe <xQueuePeek+0xda>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80211de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211e0:	3324      	adds	r3, #36	; 0x24
 80211e2:	4618      	mov	r0, r3
 80211e4:	f000 ff6a 	bl	80220bc <xTaskRemoveFromEventList>
 80211e8:	4603      	mov	r3, r0
 80211ea:	2b00      	cmp	r3, #0
 80211ec:	d007      	beq.n	80211fe <xQueuePeek+0xda>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 80211ee:	4b3d      	ldr	r3, [pc, #244]	; (80212e4 <xQueuePeek+0x1c0>)
 80211f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80211f4:	601a      	str	r2, [r3, #0]
 80211f6:	f3bf 8f4f 	dsb	sy
 80211fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80211fe:	f001 fff1 	bl	80231e4 <vPortExitCritical>
				return pdPASS;
 8021202:	2301      	movs	r3, #1
 8021204:	e069      	b.n	80212da <xQueuePeek+0x1b6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8021206:	687b      	ldr	r3, [r7, #4]
 8021208:	2b00      	cmp	r3, #0
 802120a:	d103      	bne.n	8021214 <xQueuePeek+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 802120c:	f001 ffea 	bl	80231e4 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8021210:	2300      	movs	r3, #0
 8021212:	e062      	b.n	80212da <xQueuePeek+0x1b6>
				}
				else if( xEntryTimeSet == pdFALSE )
 8021214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021216:	2b00      	cmp	r3, #0
 8021218:	d106      	bne.n	8021228 <xQueuePeek+0x104>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 802121a:	f107 0314 	add.w	r3, r7, #20
 802121e:	4618      	mov	r0, r3
 8021220:	f000 ffb0 	bl	8022184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8021224:	2301      	movs	r3, #1
 8021226:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8021228:	f001 ffdc 	bl	80231e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 802122c:	f000 fd00 	bl	8021c30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8021230:	f001 ffa8 	bl	8023184 <vPortEnterCritical>
 8021234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021236:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802123a:	b25b      	sxtb	r3, r3
 802123c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021240:	d103      	bne.n	802124a <xQueuePeek+0x126>
 8021242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021244:	2200      	movs	r2, #0
 8021246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802124a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802124c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8021250:	b25b      	sxtb	r3, r3
 8021252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021256:	d103      	bne.n	8021260 <xQueuePeek+0x13c>
 8021258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802125a:	2200      	movs	r2, #0
 802125c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8021260:	f001 ffc0 	bl	80231e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8021264:	1d3a      	adds	r2, r7, #4
 8021266:	f107 0314 	add.w	r3, r7, #20
 802126a:	4611      	mov	r1, r2
 802126c:	4618      	mov	r0, r3
 802126e:	f000 ff9f 	bl	80221b0 <xTaskCheckForTimeOut>
 8021272:	4603      	mov	r3, r0
 8021274:	2b00      	cmp	r3, #0
 8021276:	d123      	bne.n	80212c0 <xQueuePeek+0x19c>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8021278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802127a:	f000 f9eb 	bl	8021654 <prvIsQueueEmpty>
 802127e:	4603      	mov	r3, r0
 8021280:	2b00      	cmp	r3, #0
 8021282:	d017      	beq.n	80212b4 <xQueuePeek+0x190>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8021284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021286:	3324      	adds	r3, #36	; 0x24
 8021288:	687a      	ldr	r2, [r7, #4]
 802128a:	4611      	mov	r1, r2
 802128c:	4618      	mov	r0, r3
 802128e:	f000 fec5 	bl	802201c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8021292:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021294:	f000 f98c 	bl	80215b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8021298:	f000 fcd8 	bl	8021c4c <xTaskResumeAll>
 802129c:	4603      	mov	r3, r0
 802129e:	2b00      	cmp	r3, #0
 80212a0:	d187      	bne.n	80211b2 <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 80212a2:	4b10      	ldr	r3, [pc, #64]	; (80212e4 <xQueuePeek+0x1c0>)
 80212a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80212a8:	601a      	str	r2, [r3, #0]
 80212aa:	f3bf 8f4f 	dsb	sy
 80212ae:	f3bf 8f6f 	isb	sy
 80212b2:	e77e      	b.n	80211b2 <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 80212b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80212b6:	f000 f97b 	bl	80215b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80212ba:	f000 fcc7 	bl	8021c4c <xTaskResumeAll>
 80212be:	e778      	b.n	80211b2 <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 80212c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80212c2:	f000 f975 	bl	80215b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80212c6:	f000 fcc1 	bl	8021c4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80212ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80212cc:	f000 f9c2 	bl	8021654 <prvIsQueueEmpty>
 80212d0:	4603      	mov	r3, r0
 80212d2:	2b00      	cmp	r3, #0
 80212d4:	f43f af6d 	beq.w	80211b2 <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80212d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80212da:	4618      	mov	r0, r3
 80212dc:	3738      	adds	r7, #56	; 0x38
 80212de:	46bd      	mov	sp, r7
 80212e0:	bd80      	pop	{r7, pc}
 80212e2:	bf00      	nop
 80212e4:	e000ed04 	.word	0xe000ed04

080212e8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80212e8:	b580      	push	{r7, lr}
 80212ea:	b08e      	sub	sp, #56	; 0x38
 80212ec:	af00      	add	r7, sp, #0
 80212ee:	60f8      	str	r0, [r7, #12]
 80212f0:	60b9      	str	r1, [r7, #8]
 80212f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80212f4:	68fb      	ldr	r3, [r7, #12]
 80212f6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80212f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80212fa:	2b00      	cmp	r3, #0
 80212fc:	d10a      	bne.n	8021314 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80212fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021302:	f383 8811 	msr	BASEPRI, r3
 8021306:	f3bf 8f6f 	isb	sy
 802130a:	f3bf 8f4f 	dsb	sy
 802130e:	623b      	str	r3, [r7, #32]
}
 8021310:	bf00      	nop
 8021312:	e7fe      	b.n	8021312 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8021314:	68bb      	ldr	r3, [r7, #8]
 8021316:	2b00      	cmp	r3, #0
 8021318:	d103      	bne.n	8021322 <xQueueReceiveFromISR+0x3a>
 802131a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802131e:	2b00      	cmp	r3, #0
 8021320:	d101      	bne.n	8021326 <xQueueReceiveFromISR+0x3e>
 8021322:	2301      	movs	r3, #1
 8021324:	e000      	b.n	8021328 <xQueueReceiveFromISR+0x40>
 8021326:	2300      	movs	r3, #0
 8021328:	2b00      	cmp	r3, #0
 802132a:	d10a      	bne.n	8021342 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 802132c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021330:	f383 8811 	msr	BASEPRI, r3
 8021334:	f3bf 8f6f 	isb	sy
 8021338:	f3bf 8f4f 	dsb	sy
 802133c:	61fb      	str	r3, [r7, #28]
}
 802133e:	bf00      	nop
 8021340:	e7fe      	b.n	8021340 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8021342:	f002 f801 	bl	8023348 <vPortValidateInterruptPriority>
	__asm volatile
 8021346:	f3ef 8211 	mrs	r2, BASEPRI
 802134a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802134e:	f383 8811 	msr	BASEPRI, r3
 8021352:	f3bf 8f6f 	isb	sy
 8021356:	f3bf 8f4f 	dsb	sy
 802135a:	61ba      	str	r2, [r7, #24]
 802135c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 802135e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8021360:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8021362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021366:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8021368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802136a:	2b00      	cmp	r3, #0
 802136c:	d02f      	beq.n	80213ce <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 802136e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021370:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8021374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8021378:	68b9      	ldr	r1, [r7, #8]
 802137a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802137c:	f000 f8f2 	bl	8021564 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8021380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021382:	1e5a      	subs	r2, r3, #1
 8021384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021386:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8021388:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 802138c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021390:	d112      	bne.n	80213b8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8021392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021394:	691b      	ldr	r3, [r3, #16]
 8021396:	2b00      	cmp	r3, #0
 8021398:	d016      	beq.n	80213c8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802139a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802139c:	3310      	adds	r3, #16
 802139e:	4618      	mov	r0, r3
 80213a0:	f000 fe8c 	bl	80220bc <xTaskRemoveFromEventList>
 80213a4:	4603      	mov	r3, r0
 80213a6:	2b00      	cmp	r3, #0
 80213a8:	d00e      	beq.n	80213c8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80213aa:	687b      	ldr	r3, [r7, #4]
 80213ac:	2b00      	cmp	r3, #0
 80213ae:	d00b      	beq.n	80213c8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80213b0:	687b      	ldr	r3, [r7, #4]
 80213b2:	2201      	movs	r2, #1
 80213b4:	601a      	str	r2, [r3, #0]
 80213b6:	e007      	b.n	80213c8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80213b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80213bc:	3301      	adds	r3, #1
 80213be:	b2db      	uxtb	r3, r3
 80213c0:	b25a      	sxtb	r2, r3
 80213c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80213c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80213c8:	2301      	movs	r3, #1
 80213ca:	637b      	str	r3, [r7, #52]	; 0x34
 80213cc:	e001      	b.n	80213d2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80213ce:	2300      	movs	r3, #0
 80213d0:	637b      	str	r3, [r7, #52]	; 0x34
 80213d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80213d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80213d6:	693b      	ldr	r3, [r7, #16]
 80213d8:	f383 8811 	msr	BASEPRI, r3
}
 80213dc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80213de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80213e0:	4618      	mov	r0, r3
 80213e2:	3738      	adds	r7, #56	; 0x38
 80213e4:	46bd      	mov	sp, r7
 80213e6:	bd80      	pop	{r7, pc}

080213e8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80213e8:	b580      	push	{r7, lr}
 80213ea:	b084      	sub	sp, #16
 80213ec:	af00      	add	r7, sp, #0
 80213ee:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80213f0:	687b      	ldr	r3, [r7, #4]
 80213f2:	2b00      	cmp	r3, #0
 80213f4:	d10a      	bne.n	802140c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80213f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80213fa:	f383 8811 	msr	BASEPRI, r3
 80213fe:	f3bf 8f6f 	isb	sy
 8021402:	f3bf 8f4f 	dsb	sy
 8021406:	60bb      	str	r3, [r7, #8]
}
 8021408:	bf00      	nop
 802140a:	e7fe      	b.n	802140a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 802140c:	f001 feba 	bl	8023184 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8021410:	687b      	ldr	r3, [r7, #4]
 8021412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021414:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8021416:	f001 fee5 	bl	80231e4 <vPortExitCritical>

	return uxReturn;
 802141a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 802141c:	4618      	mov	r0, r3
 802141e:	3710      	adds	r7, #16
 8021420:	46bd      	mov	sp, r7
 8021422:	bd80      	pop	{r7, pc}

08021424 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8021424:	b480      	push	{r7}
 8021426:	b087      	sub	sp, #28
 8021428:	af00      	add	r7, sp, #0
 802142a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 802142c:	687b      	ldr	r3, [r7, #4]
 802142e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8021430:	697b      	ldr	r3, [r7, #20]
 8021432:	2b00      	cmp	r3, #0
 8021434:	d10a      	bne.n	802144c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8021436:	f04f 0350 	mov.w	r3, #80	; 0x50
 802143a:	f383 8811 	msr	BASEPRI, r3
 802143e:	f3bf 8f6f 	isb	sy
 8021442:	f3bf 8f4f 	dsb	sy
 8021446:	60fb      	str	r3, [r7, #12]
}
 8021448:	bf00      	nop
 802144a:	e7fe      	b.n	802144a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 802144c:	697b      	ldr	r3, [r7, #20]
 802144e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021450:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8021452:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8021454:	4618      	mov	r0, r3
 8021456:	371c      	adds	r7, #28
 8021458:	46bd      	mov	sp, r7
 802145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802145e:	4770      	bx	lr

08021460 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8021460:	b480      	push	{r7}
 8021462:	b085      	sub	sp, #20
 8021464:	af00      	add	r7, sp, #0
 8021466:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8021468:	687b      	ldr	r3, [r7, #4]
 802146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802146c:	2b00      	cmp	r3, #0
 802146e:	d006      	beq.n	802147e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8021470:	687b      	ldr	r3, [r7, #4]
 8021472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021474:	681b      	ldr	r3, [r3, #0]
 8021476:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 802147a:	60fb      	str	r3, [r7, #12]
 802147c:	e001      	b.n	8021482 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 802147e:	2300      	movs	r3, #0
 8021480:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8021482:	68fb      	ldr	r3, [r7, #12]
	}
 8021484:	4618      	mov	r0, r3
 8021486:	3714      	adds	r7, #20
 8021488:	46bd      	mov	sp, r7
 802148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802148e:	4770      	bx	lr

08021490 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8021490:	b580      	push	{r7, lr}
 8021492:	b086      	sub	sp, #24
 8021494:	af00      	add	r7, sp, #0
 8021496:	60f8      	str	r0, [r7, #12]
 8021498:	60b9      	str	r1, [r7, #8]
 802149a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 802149c:	2300      	movs	r3, #0
 802149e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80214a0:	68fb      	ldr	r3, [r7, #12]
 80214a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80214a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80214a6:	68fb      	ldr	r3, [r7, #12]
 80214a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80214aa:	2b00      	cmp	r3, #0
 80214ac:	d10d      	bne.n	80214ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80214ae:	68fb      	ldr	r3, [r7, #12]
 80214b0:	681b      	ldr	r3, [r3, #0]
 80214b2:	2b00      	cmp	r3, #0
 80214b4:	d14d      	bne.n	8021552 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80214b6:	68fb      	ldr	r3, [r7, #12]
 80214b8:	689b      	ldr	r3, [r3, #8]
 80214ba:	4618      	mov	r0, r3
 80214bc:	f001 f88e 	bl	80225dc <xTaskPriorityDisinherit>
 80214c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80214c2:	68fb      	ldr	r3, [r7, #12]
 80214c4:	2200      	movs	r2, #0
 80214c6:	609a      	str	r2, [r3, #8]
 80214c8:	e043      	b.n	8021552 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80214ca:	687b      	ldr	r3, [r7, #4]
 80214cc:	2b00      	cmp	r3, #0
 80214ce:	d119      	bne.n	8021504 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80214d0:	68fb      	ldr	r3, [r7, #12]
 80214d2:	6858      	ldr	r0, [r3, #4]
 80214d4:	68fb      	ldr	r3, [r7, #12]
 80214d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80214d8:	461a      	mov	r2, r3
 80214da:	68b9      	ldr	r1, [r7, #8]
 80214dc:	f00c facb 	bl	802da76 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80214e0:	68fb      	ldr	r3, [r7, #12]
 80214e2:	685a      	ldr	r2, [r3, #4]
 80214e4:	68fb      	ldr	r3, [r7, #12]
 80214e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80214e8:	441a      	add	r2, r3
 80214ea:	68fb      	ldr	r3, [r7, #12]
 80214ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80214ee:	68fb      	ldr	r3, [r7, #12]
 80214f0:	685a      	ldr	r2, [r3, #4]
 80214f2:	68fb      	ldr	r3, [r7, #12]
 80214f4:	689b      	ldr	r3, [r3, #8]
 80214f6:	429a      	cmp	r2, r3
 80214f8:	d32b      	bcc.n	8021552 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80214fa:	68fb      	ldr	r3, [r7, #12]
 80214fc:	681a      	ldr	r2, [r3, #0]
 80214fe:	68fb      	ldr	r3, [r7, #12]
 8021500:	605a      	str	r2, [r3, #4]
 8021502:	e026      	b.n	8021552 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8021504:	68fb      	ldr	r3, [r7, #12]
 8021506:	68d8      	ldr	r0, [r3, #12]
 8021508:	68fb      	ldr	r3, [r7, #12]
 802150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802150c:	461a      	mov	r2, r3
 802150e:	68b9      	ldr	r1, [r7, #8]
 8021510:	f00c fab1 	bl	802da76 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8021514:	68fb      	ldr	r3, [r7, #12]
 8021516:	68da      	ldr	r2, [r3, #12]
 8021518:	68fb      	ldr	r3, [r7, #12]
 802151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802151c:	425b      	negs	r3, r3
 802151e:	441a      	add	r2, r3
 8021520:	68fb      	ldr	r3, [r7, #12]
 8021522:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8021524:	68fb      	ldr	r3, [r7, #12]
 8021526:	68da      	ldr	r2, [r3, #12]
 8021528:	68fb      	ldr	r3, [r7, #12]
 802152a:	681b      	ldr	r3, [r3, #0]
 802152c:	429a      	cmp	r2, r3
 802152e:	d207      	bcs.n	8021540 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8021530:	68fb      	ldr	r3, [r7, #12]
 8021532:	689a      	ldr	r2, [r3, #8]
 8021534:	68fb      	ldr	r3, [r7, #12]
 8021536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021538:	425b      	negs	r3, r3
 802153a:	441a      	add	r2, r3
 802153c:	68fb      	ldr	r3, [r7, #12]
 802153e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8021540:	687b      	ldr	r3, [r7, #4]
 8021542:	2b02      	cmp	r3, #2
 8021544:	d105      	bne.n	8021552 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8021546:	693b      	ldr	r3, [r7, #16]
 8021548:	2b00      	cmp	r3, #0
 802154a:	d002      	beq.n	8021552 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 802154c:	693b      	ldr	r3, [r7, #16]
 802154e:	3b01      	subs	r3, #1
 8021550:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8021552:	693b      	ldr	r3, [r7, #16]
 8021554:	1c5a      	adds	r2, r3, #1
 8021556:	68fb      	ldr	r3, [r7, #12]
 8021558:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 802155a:	697b      	ldr	r3, [r7, #20]
}
 802155c:	4618      	mov	r0, r3
 802155e:	3718      	adds	r7, #24
 8021560:	46bd      	mov	sp, r7
 8021562:	bd80      	pop	{r7, pc}

08021564 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8021564:	b580      	push	{r7, lr}
 8021566:	b082      	sub	sp, #8
 8021568:	af00      	add	r7, sp, #0
 802156a:	6078      	str	r0, [r7, #4]
 802156c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 802156e:	687b      	ldr	r3, [r7, #4]
 8021570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021572:	2b00      	cmp	r3, #0
 8021574:	d018      	beq.n	80215a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8021576:	687b      	ldr	r3, [r7, #4]
 8021578:	68da      	ldr	r2, [r3, #12]
 802157a:	687b      	ldr	r3, [r7, #4]
 802157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802157e:	441a      	add	r2, r3
 8021580:	687b      	ldr	r3, [r7, #4]
 8021582:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8021584:	687b      	ldr	r3, [r7, #4]
 8021586:	68da      	ldr	r2, [r3, #12]
 8021588:	687b      	ldr	r3, [r7, #4]
 802158a:	689b      	ldr	r3, [r3, #8]
 802158c:	429a      	cmp	r2, r3
 802158e:	d303      	bcc.n	8021598 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8021590:	687b      	ldr	r3, [r7, #4]
 8021592:	681a      	ldr	r2, [r3, #0]
 8021594:	687b      	ldr	r3, [r7, #4]
 8021596:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8021598:	687b      	ldr	r3, [r7, #4]
 802159a:	68d9      	ldr	r1, [r3, #12]
 802159c:	687b      	ldr	r3, [r7, #4]
 802159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80215a0:	461a      	mov	r2, r3
 80215a2:	6838      	ldr	r0, [r7, #0]
 80215a4:	f00c fa67 	bl	802da76 <memcpy>
	}
}
 80215a8:	bf00      	nop
 80215aa:	3708      	adds	r7, #8
 80215ac:	46bd      	mov	sp, r7
 80215ae:	bd80      	pop	{r7, pc}

080215b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80215b0:	b580      	push	{r7, lr}
 80215b2:	b084      	sub	sp, #16
 80215b4:	af00      	add	r7, sp, #0
 80215b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80215b8:	f001 fde4 	bl	8023184 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80215bc:	687b      	ldr	r3, [r7, #4]
 80215be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80215c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80215c4:	e011      	b.n	80215ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80215c6:	687b      	ldr	r3, [r7, #4]
 80215c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80215ca:	2b00      	cmp	r3, #0
 80215cc:	d012      	beq.n	80215f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80215ce:	687b      	ldr	r3, [r7, #4]
 80215d0:	3324      	adds	r3, #36	; 0x24
 80215d2:	4618      	mov	r0, r3
 80215d4:	f000 fd72 	bl	80220bc <xTaskRemoveFromEventList>
 80215d8:	4603      	mov	r3, r0
 80215da:	2b00      	cmp	r3, #0
 80215dc:	d001      	beq.n	80215e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80215de:	f000 fe49 	bl	8022274 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80215e2:	7bfb      	ldrb	r3, [r7, #15]
 80215e4:	3b01      	subs	r3, #1
 80215e6:	b2db      	uxtb	r3, r3
 80215e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80215ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80215ee:	2b00      	cmp	r3, #0
 80215f0:	dce9      	bgt.n	80215c6 <prvUnlockQueue+0x16>
 80215f2:	e000      	b.n	80215f6 <prvUnlockQueue+0x46>
					break;
 80215f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80215f6:	687b      	ldr	r3, [r7, #4]
 80215f8:	22ff      	movs	r2, #255	; 0xff
 80215fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80215fe:	f001 fdf1 	bl	80231e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8021602:	f001 fdbf 	bl	8023184 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8021606:	687b      	ldr	r3, [r7, #4]
 8021608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802160c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 802160e:	e011      	b.n	8021634 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8021610:	687b      	ldr	r3, [r7, #4]
 8021612:	691b      	ldr	r3, [r3, #16]
 8021614:	2b00      	cmp	r3, #0
 8021616:	d012      	beq.n	802163e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8021618:	687b      	ldr	r3, [r7, #4]
 802161a:	3310      	adds	r3, #16
 802161c:	4618      	mov	r0, r3
 802161e:	f000 fd4d 	bl	80220bc <xTaskRemoveFromEventList>
 8021622:	4603      	mov	r3, r0
 8021624:	2b00      	cmp	r3, #0
 8021626:	d001      	beq.n	802162c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8021628:	f000 fe24 	bl	8022274 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 802162c:	7bbb      	ldrb	r3, [r7, #14]
 802162e:	3b01      	subs	r3, #1
 8021630:	b2db      	uxtb	r3, r3
 8021632:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8021634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8021638:	2b00      	cmp	r3, #0
 802163a:	dce9      	bgt.n	8021610 <prvUnlockQueue+0x60>
 802163c:	e000      	b.n	8021640 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 802163e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8021640:	687b      	ldr	r3, [r7, #4]
 8021642:	22ff      	movs	r2, #255	; 0xff
 8021644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8021648:	f001 fdcc 	bl	80231e4 <vPortExitCritical>
}
 802164c:	bf00      	nop
 802164e:	3710      	adds	r7, #16
 8021650:	46bd      	mov	sp, r7
 8021652:	bd80      	pop	{r7, pc}

08021654 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8021654:	b580      	push	{r7, lr}
 8021656:	b084      	sub	sp, #16
 8021658:	af00      	add	r7, sp, #0
 802165a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 802165c:	f001 fd92 	bl	8023184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8021660:	687b      	ldr	r3, [r7, #4]
 8021662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021664:	2b00      	cmp	r3, #0
 8021666:	d102      	bne.n	802166e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8021668:	2301      	movs	r3, #1
 802166a:	60fb      	str	r3, [r7, #12]
 802166c:	e001      	b.n	8021672 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 802166e:	2300      	movs	r3, #0
 8021670:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8021672:	f001 fdb7 	bl	80231e4 <vPortExitCritical>

	return xReturn;
 8021676:	68fb      	ldr	r3, [r7, #12]
}
 8021678:	4618      	mov	r0, r3
 802167a:	3710      	adds	r7, #16
 802167c:	46bd      	mov	sp, r7
 802167e:	bd80      	pop	{r7, pc}

08021680 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8021680:	b580      	push	{r7, lr}
 8021682:	b084      	sub	sp, #16
 8021684:	af00      	add	r7, sp, #0
 8021686:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8021688:	f001 fd7c 	bl	8023184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 802168c:	687b      	ldr	r3, [r7, #4]
 802168e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8021690:	687b      	ldr	r3, [r7, #4]
 8021692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021694:	429a      	cmp	r2, r3
 8021696:	d102      	bne.n	802169e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8021698:	2301      	movs	r3, #1
 802169a:	60fb      	str	r3, [r7, #12]
 802169c:	e001      	b.n	80216a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 802169e:	2300      	movs	r3, #0
 80216a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80216a2:	f001 fd9f 	bl	80231e4 <vPortExitCritical>

	return xReturn;
 80216a6:	68fb      	ldr	r3, [r7, #12]
}
 80216a8:	4618      	mov	r0, r3
 80216aa:	3710      	adds	r7, #16
 80216ac:	46bd      	mov	sp, r7
 80216ae:	bd80      	pop	{r7, pc}

080216b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80216b0:	b480      	push	{r7}
 80216b2:	b085      	sub	sp, #20
 80216b4:	af00      	add	r7, sp, #0
 80216b6:	6078      	str	r0, [r7, #4]
 80216b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80216ba:	2300      	movs	r3, #0
 80216bc:	60fb      	str	r3, [r7, #12]
 80216be:	e014      	b.n	80216ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80216c0:	4a0f      	ldr	r2, [pc, #60]	; (8021700 <vQueueAddToRegistry+0x50>)
 80216c2:	68fb      	ldr	r3, [r7, #12]
 80216c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80216c8:	2b00      	cmp	r3, #0
 80216ca:	d10b      	bne.n	80216e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80216cc:	490c      	ldr	r1, [pc, #48]	; (8021700 <vQueueAddToRegistry+0x50>)
 80216ce:	68fb      	ldr	r3, [r7, #12]
 80216d0:	683a      	ldr	r2, [r7, #0]
 80216d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80216d6:	4a0a      	ldr	r2, [pc, #40]	; (8021700 <vQueueAddToRegistry+0x50>)
 80216d8:	68fb      	ldr	r3, [r7, #12]
 80216da:	00db      	lsls	r3, r3, #3
 80216dc:	4413      	add	r3, r2
 80216de:	687a      	ldr	r2, [r7, #4]
 80216e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80216e2:	e006      	b.n	80216f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80216e4:	68fb      	ldr	r3, [r7, #12]
 80216e6:	3301      	adds	r3, #1
 80216e8:	60fb      	str	r3, [r7, #12]
 80216ea:	68fb      	ldr	r3, [r7, #12]
 80216ec:	2b09      	cmp	r3, #9
 80216ee:	d9e7      	bls.n	80216c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80216f0:	bf00      	nop
 80216f2:	bf00      	nop
 80216f4:	3714      	adds	r7, #20
 80216f6:	46bd      	mov	sp, r7
 80216f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216fc:	4770      	bx	lr
 80216fe:	bf00      	nop
 8021700:	20001ce4 	.word	0x20001ce4

08021704 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8021704:	b580      	push	{r7, lr}
 8021706:	b086      	sub	sp, #24
 8021708:	af00      	add	r7, sp, #0
 802170a:	60f8      	str	r0, [r7, #12]
 802170c:	60b9      	str	r1, [r7, #8]
 802170e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8021710:	68fb      	ldr	r3, [r7, #12]
 8021712:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8021714:	f001 fd36 	bl	8023184 <vPortEnterCritical>
 8021718:	697b      	ldr	r3, [r7, #20]
 802171a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802171e:	b25b      	sxtb	r3, r3
 8021720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021724:	d103      	bne.n	802172e <vQueueWaitForMessageRestricted+0x2a>
 8021726:	697b      	ldr	r3, [r7, #20]
 8021728:	2200      	movs	r2, #0
 802172a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802172e:	697b      	ldr	r3, [r7, #20]
 8021730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8021734:	b25b      	sxtb	r3, r3
 8021736:	f1b3 3fff 	cmp.w	r3, #4294967295
 802173a:	d103      	bne.n	8021744 <vQueueWaitForMessageRestricted+0x40>
 802173c:	697b      	ldr	r3, [r7, #20]
 802173e:	2200      	movs	r2, #0
 8021740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8021744:	f001 fd4e 	bl	80231e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8021748:	697b      	ldr	r3, [r7, #20]
 802174a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802174c:	2b00      	cmp	r3, #0
 802174e:	d106      	bne.n	802175e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8021750:	697b      	ldr	r3, [r7, #20]
 8021752:	3324      	adds	r3, #36	; 0x24
 8021754:	687a      	ldr	r2, [r7, #4]
 8021756:	68b9      	ldr	r1, [r7, #8]
 8021758:	4618      	mov	r0, r3
 802175a:	f000 fc83 	bl	8022064 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 802175e:	6978      	ldr	r0, [r7, #20]
 8021760:	f7ff ff26 	bl	80215b0 <prvUnlockQueue>
	}
 8021764:	bf00      	nop
 8021766:	3718      	adds	r7, #24
 8021768:	46bd      	mov	sp, r7
 802176a:	bd80      	pop	{r7, pc}

0802176c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 802176c:	b580      	push	{r7, lr}
 802176e:	b08e      	sub	sp, #56	; 0x38
 8021770:	af04      	add	r7, sp, #16
 8021772:	60f8      	str	r0, [r7, #12]
 8021774:	60b9      	str	r1, [r7, #8]
 8021776:	607a      	str	r2, [r7, #4]
 8021778:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 802177a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802177c:	2b00      	cmp	r3, #0
 802177e:	d10a      	bne.n	8021796 <xTaskCreateStatic+0x2a>
	__asm volatile
 8021780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021784:	f383 8811 	msr	BASEPRI, r3
 8021788:	f3bf 8f6f 	isb	sy
 802178c:	f3bf 8f4f 	dsb	sy
 8021790:	623b      	str	r3, [r7, #32]
}
 8021792:	bf00      	nop
 8021794:	e7fe      	b.n	8021794 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8021796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021798:	2b00      	cmp	r3, #0
 802179a:	d10a      	bne.n	80217b2 <xTaskCreateStatic+0x46>
	__asm volatile
 802179c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80217a0:	f383 8811 	msr	BASEPRI, r3
 80217a4:	f3bf 8f6f 	isb	sy
 80217a8:	f3bf 8f4f 	dsb	sy
 80217ac:	61fb      	str	r3, [r7, #28]
}
 80217ae:	bf00      	nop
 80217b0:	e7fe      	b.n	80217b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80217b2:	23ac      	movs	r3, #172	; 0xac
 80217b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80217b6:	693b      	ldr	r3, [r7, #16]
 80217b8:	2bac      	cmp	r3, #172	; 0xac
 80217ba:	d00a      	beq.n	80217d2 <xTaskCreateStatic+0x66>
	__asm volatile
 80217bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80217c0:	f383 8811 	msr	BASEPRI, r3
 80217c4:	f3bf 8f6f 	isb	sy
 80217c8:	f3bf 8f4f 	dsb	sy
 80217cc:	61bb      	str	r3, [r7, #24]
}
 80217ce:	bf00      	nop
 80217d0:	e7fe      	b.n	80217d0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80217d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80217d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80217d6:	2b00      	cmp	r3, #0
 80217d8:	d01e      	beq.n	8021818 <xTaskCreateStatic+0xac>
 80217da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80217dc:	2b00      	cmp	r3, #0
 80217de:	d01b      	beq.n	8021818 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80217e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80217e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80217e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80217e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80217e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80217ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80217ec:	2202      	movs	r2, #2
 80217ee:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80217f2:	2300      	movs	r3, #0
 80217f4:	9303      	str	r3, [sp, #12]
 80217f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80217f8:	9302      	str	r3, [sp, #8]
 80217fa:	f107 0314 	add.w	r3, r7, #20
 80217fe:	9301      	str	r3, [sp, #4]
 8021800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021802:	9300      	str	r3, [sp, #0]
 8021804:	683b      	ldr	r3, [r7, #0]
 8021806:	687a      	ldr	r2, [r7, #4]
 8021808:	68b9      	ldr	r1, [r7, #8]
 802180a:	68f8      	ldr	r0, [r7, #12]
 802180c:	f000 f850 	bl	80218b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8021810:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021812:	f000 f8f7 	bl	8021a04 <prvAddNewTaskToReadyList>
 8021816:	e001      	b.n	802181c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8021818:	2300      	movs	r3, #0
 802181a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 802181c:	697b      	ldr	r3, [r7, #20]
	}
 802181e:	4618      	mov	r0, r3
 8021820:	3728      	adds	r7, #40	; 0x28
 8021822:	46bd      	mov	sp, r7
 8021824:	bd80      	pop	{r7, pc}

08021826 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8021826:	b580      	push	{r7, lr}
 8021828:	b08c      	sub	sp, #48	; 0x30
 802182a:	af04      	add	r7, sp, #16
 802182c:	60f8      	str	r0, [r7, #12]
 802182e:	60b9      	str	r1, [r7, #8]
 8021830:	603b      	str	r3, [r7, #0]
 8021832:	4613      	mov	r3, r2
 8021834:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8021836:	88fb      	ldrh	r3, [r7, #6]
 8021838:	009b      	lsls	r3, r3, #2
 802183a:	4618      	mov	r0, r3
 802183c:	f001 fdc4 	bl	80233c8 <pvPortMalloc>
 8021840:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8021842:	697b      	ldr	r3, [r7, #20]
 8021844:	2b00      	cmp	r3, #0
 8021846:	d00e      	beq.n	8021866 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8021848:	20ac      	movs	r0, #172	; 0xac
 802184a:	f001 fdbd 	bl	80233c8 <pvPortMalloc>
 802184e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8021850:	69fb      	ldr	r3, [r7, #28]
 8021852:	2b00      	cmp	r3, #0
 8021854:	d003      	beq.n	802185e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8021856:	69fb      	ldr	r3, [r7, #28]
 8021858:	697a      	ldr	r2, [r7, #20]
 802185a:	631a      	str	r2, [r3, #48]	; 0x30
 802185c:	e005      	b.n	802186a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 802185e:	6978      	ldr	r0, [r7, #20]
 8021860:	f001 fdf8 	bl	8023454 <vPortFree>
 8021864:	e001      	b.n	802186a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8021866:	2300      	movs	r3, #0
 8021868:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 802186a:	69fb      	ldr	r3, [r7, #28]
 802186c:	2b00      	cmp	r3, #0
 802186e:	d017      	beq.n	80218a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8021870:	69fb      	ldr	r3, [r7, #28]
 8021872:	2200      	movs	r2, #0
 8021874:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8021878:	88fa      	ldrh	r2, [r7, #6]
 802187a:	2300      	movs	r3, #0
 802187c:	9303      	str	r3, [sp, #12]
 802187e:	69fb      	ldr	r3, [r7, #28]
 8021880:	9302      	str	r3, [sp, #8]
 8021882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021884:	9301      	str	r3, [sp, #4]
 8021886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021888:	9300      	str	r3, [sp, #0]
 802188a:	683b      	ldr	r3, [r7, #0]
 802188c:	68b9      	ldr	r1, [r7, #8]
 802188e:	68f8      	ldr	r0, [r7, #12]
 8021890:	f000 f80e 	bl	80218b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8021894:	69f8      	ldr	r0, [r7, #28]
 8021896:	f000 f8b5 	bl	8021a04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 802189a:	2301      	movs	r3, #1
 802189c:	61bb      	str	r3, [r7, #24]
 802189e:	e002      	b.n	80218a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80218a0:	f04f 33ff 	mov.w	r3, #4294967295
 80218a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80218a6:	69bb      	ldr	r3, [r7, #24]
	}
 80218a8:	4618      	mov	r0, r3
 80218aa:	3720      	adds	r7, #32
 80218ac:	46bd      	mov	sp, r7
 80218ae:	bd80      	pop	{r7, pc}

080218b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80218b0:	b580      	push	{r7, lr}
 80218b2:	b088      	sub	sp, #32
 80218b4:	af00      	add	r7, sp, #0
 80218b6:	60f8      	str	r0, [r7, #12]
 80218b8:	60b9      	str	r1, [r7, #8]
 80218ba:	607a      	str	r2, [r7, #4]
 80218bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80218be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80218c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80218c2:	687b      	ldr	r3, [r7, #4]
 80218c4:	009b      	lsls	r3, r3, #2
 80218c6:	461a      	mov	r2, r3
 80218c8:	21a5      	movs	r1, #165	; 0xa5
 80218ca:	f00b feff 	bl	802d6cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80218ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80218d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80218d2:	687b      	ldr	r3, [r7, #4]
 80218d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80218d8:	3b01      	subs	r3, #1
 80218da:	009b      	lsls	r3, r3, #2
 80218dc:	4413      	add	r3, r2
 80218de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80218e0:	69bb      	ldr	r3, [r7, #24]
 80218e2:	f023 0307 	bic.w	r3, r3, #7
 80218e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80218e8:	69bb      	ldr	r3, [r7, #24]
 80218ea:	f003 0307 	and.w	r3, r3, #7
 80218ee:	2b00      	cmp	r3, #0
 80218f0:	d00a      	beq.n	8021908 <prvInitialiseNewTask+0x58>
	__asm volatile
 80218f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80218f6:	f383 8811 	msr	BASEPRI, r3
 80218fa:	f3bf 8f6f 	isb	sy
 80218fe:	f3bf 8f4f 	dsb	sy
 8021902:	617b      	str	r3, [r7, #20]
}
 8021904:	bf00      	nop
 8021906:	e7fe      	b.n	8021906 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8021908:	68bb      	ldr	r3, [r7, #8]
 802190a:	2b00      	cmp	r3, #0
 802190c:	d01f      	beq.n	802194e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 802190e:	2300      	movs	r3, #0
 8021910:	61fb      	str	r3, [r7, #28]
 8021912:	e012      	b.n	802193a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8021914:	68ba      	ldr	r2, [r7, #8]
 8021916:	69fb      	ldr	r3, [r7, #28]
 8021918:	4413      	add	r3, r2
 802191a:	7819      	ldrb	r1, [r3, #0]
 802191c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802191e:	69fb      	ldr	r3, [r7, #28]
 8021920:	4413      	add	r3, r2
 8021922:	3334      	adds	r3, #52	; 0x34
 8021924:	460a      	mov	r2, r1
 8021926:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8021928:	68ba      	ldr	r2, [r7, #8]
 802192a:	69fb      	ldr	r3, [r7, #28]
 802192c:	4413      	add	r3, r2
 802192e:	781b      	ldrb	r3, [r3, #0]
 8021930:	2b00      	cmp	r3, #0
 8021932:	d006      	beq.n	8021942 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8021934:	69fb      	ldr	r3, [r7, #28]
 8021936:	3301      	adds	r3, #1
 8021938:	61fb      	str	r3, [r7, #28]
 802193a:	69fb      	ldr	r3, [r7, #28]
 802193c:	2b0f      	cmp	r3, #15
 802193e:	d9e9      	bls.n	8021914 <prvInitialiseNewTask+0x64>
 8021940:	e000      	b.n	8021944 <prvInitialiseNewTask+0x94>
			{
				break;
 8021942:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8021944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021946:	2200      	movs	r2, #0
 8021948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 802194c:	e003      	b.n	8021956 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 802194e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021950:	2200      	movs	r2, #0
 8021952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8021956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021958:	2b37      	cmp	r3, #55	; 0x37
 802195a:	d901      	bls.n	8021960 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 802195c:	2337      	movs	r3, #55	; 0x37
 802195e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8021960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021964:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8021966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802196a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 802196c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802196e:	2200      	movs	r2, #0
 8021970:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8021972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021974:	3304      	adds	r3, #4
 8021976:	4618      	mov	r0, r3
 8021978:	f7fe fdc6 	bl	8020508 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 802197c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802197e:	3318      	adds	r3, #24
 8021980:	4618      	mov	r0, r3
 8021982:	f7fe fdc1 	bl	8020508 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8021986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802198a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802198c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802198e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8021992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021994:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8021996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802199a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 802199c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802199e:	2200      	movs	r2, #0
 80219a0:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80219a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219a4:	2200      	movs	r2, #0
 80219a6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80219aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219ac:	2200      	movs	r2, #0
 80219ae:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80219b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219b4:	3358      	adds	r3, #88	; 0x58
 80219b6:	224c      	movs	r2, #76	; 0x4c
 80219b8:	2100      	movs	r1, #0
 80219ba:	4618      	mov	r0, r3
 80219bc:	f00b fe86 	bl	802d6cc <memset>
 80219c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219c2:	4a0d      	ldr	r2, [pc, #52]	; (80219f8 <prvInitialiseNewTask+0x148>)
 80219c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80219c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219c8:	4a0c      	ldr	r2, [pc, #48]	; (80219fc <prvInitialiseNewTask+0x14c>)
 80219ca:	661a      	str	r2, [r3, #96]	; 0x60
 80219cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219ce:	4a0c      	ldr	r2, [pc, #48]	; (8021a00 <prvInitialiseNewTask+0x150>)
 80219d0:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80219d2:	683a      	ldr	r2, [r7, #0]
 80219d4:	68f9      	ldr	r1, [r7, #12]
 80219d6:	69b8      	ldr	r0, [r7, #24]
 80219d8:	f001 faa6 	bl	8022f28 <pxPortInitialiseStack>
 80219dc:	4602      	mov	r2, r0
 80219de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80219e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80219e4:	2b00      	cmp	r3, #0
 80219e6:	d002      	beq.n	80219ee <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80219e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80219ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80219ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80219ee:	bf00      	nop
 80219f0:	3720      	adds	r7, #32
 80219f2:	46bd      	mov	sp, r7
 80219f4:	bd80      	pop	{r7, pc}
 80219f6:	bf00      	nop
 80219f8:	2000d9ac 	.word	0x2000d9ac
 80219fc:	2000da14 	.word	0x2000da14
 8021a00:	2000da7c 	.word	0x2000da7c

08021a04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8021a04:	b580      	push	{r7, lr}
 8021a06:	b082      	sub	sp, #8
 8021a08:	af00      	add	r7, sp, #0
 8021a0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8021a0c:	f001 fbba 	bl	8023184 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8021a10:	4b2d      	ldr	r3, [pc, #180]	; (8021ac8 <prvAddNewTaskToReadyList+0xc4>)
 8021a12:	681b      	ldr	r3, [r3, #0]
 8021a14:	3301      	adds	r3, #1
 8021a16:	4a2c      	ldr	r2, [pc, #176]	; (8021ac8 <prvAddNewTaskToReadyList+0xc4>)
 8021a18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8021a1a:	4b2c      	ldr	r3, [pc, #176]	; (8021acc <prvAddNewTaskToReadyList+0xc8>)
 8021a1c:	681b      	ldr	r3, [r3, #0]
 8021a1e:	2b00      	cmp	r3, #0
 8021a20:	d109      	bne.n	8021a36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8021a22:	4a2a      	ldr	r2, [pc, #168]	; (8021acc <prvAddNewTaskToReadyList+0xc8>)
 8021a24:	687b      	ldr	r3, [r7, #4]
 8021a26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8021a28:	4b27      	ldr	r3, [pc, #156]	; (8021ac8 <prvAddNewTaskToReadyList+0xc4>)
 8021a2a:	681b      	ldr	r3, [r3, #0]
 8021a2c:	2b01      	cmp	r3, #1
 8021a2e:	d110      	bne.n	8021a52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8021a30:	f000 fc44 	bl	80222bc <prvInitialiseTaskLists>
 8021a34:	e00d      	b.n	8021a52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8021a36:	4b26      	ldr	r3, [pc, #152]	; (8021ad0 <prvAddNewTaskToReadyList+0xcc>)
 8021a38:	681b      	ldr	r3, [r3, #0]
 8021a3a:	2b00      	cmp	r3, #0
 8021a3c:	d109      	bne.n	8021a52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8021a3e:	4b23      	ldr	r3, [pc, #140]	; (8021acc <prvAddNewTaskToReadyList+0xc8>)
 8021a40:	681b      	ldr	r3, [r3, #0]
 8021a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021a44:	687b      	ldr	r3, [r7, #4]
 8021a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021a48:	429a      	cmp	r2, r3
 8021a4a:	d802      	bhi.n	8021a52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8021a4c:	4a1f      	ldr	r2, [pc, #124]	; (8021acc <prvAddNewTaskToReadyList+0xc8>)
 8021a4e:	687b      	ldr	r3, [r7, #4]
 8021a50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8021a52:	4b20      	ldr	r3, [pc, #128]	; (8021ad4 <prvAddNewTaskToReadyList+0xd0>)
 8021a54:	681b      	ldr	r3, [r3, #0]
 8021a56:	3301      	adds	r3, #1
 8021a58:	4a1e      	ldr	r2, [pc, #120]	; (8021ad4 <prvAddNewTaskToReadyList+0xd0>)
 8021a5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8021a5c:	4b1d      	ldr	r3, [pc, #116]	; (8021ad4 <prvAddNewTaskToReadyList+0xd0>)
 8021a5e:	681a      	ldr	r2, [r3, #0]
 8021a60:	687b      	ldr	r3, [r7, #4]
 8021a62:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8021a64:	687b      	ldr	r3, [r7, #4]
 8021a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021a68:	4b1b      	ldr	r3, [pc, #108]	; (8021ad8 <prvAddNewTaskToReadyList+0xd4>)
 8021a6a:	681b      	ldr	r3, [r3, #0]
 8021a6c:	429a      	cmp	r2, r3
 8021a6e:	d903      	bls.n	8021a78 <prvAddNewTaskToReadyList+0x74>
 8021a70:	687b      	ldr	r3, [r7, #4]
 8021a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021a74:	4a18      	ldr	r2, [pc, #96]	; (8021ad8 <prvAddNewTaskToReadyList+0xd4>)
 8021a76:	6013      	str	r3, [r2, #0]
 8021a78:	687b      	ldr	r3, [r7, #4]
 8021a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021a7c:	4613      	mov	r3, r2
 8021a7e:	009b      	lsls	r3, r3, #2
 8021a80:	4413      	add	r3, r2
 8021a82:	009b      	lsls	r3, r3, #2
 8021a84:	4a15      	ldr	r2, [pc, #84]	; (8021adc <prvAddNewTaskToReadyList+0xd8>)
 8021a86:	441a      	add	r2, r3
 8021a88:	687b      	ldr	r3, [r7, #4]
 8021a8a:	3304      	adds	r3, #4
 8021a8c:	4619      	mov	r1, r3
 8021a8e:	4610      	mov	r0, r2
 8021a90:	f7fe fd47 	bl	8020522 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8021a94:	f001 fba6 	bl	80231e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8021a98:	4b0d      	ldr	r3, [pc, #52]	; (8021ad0 <prvAddNewTaskToReadyList+0xcc>)
 8021a9a:	681b      	ldr	r3, [r3, #0]
 8021a9c:	2b00      	cmp	r3, #0
 8021a9e:	d00e      	beq.n	8021abe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8021aa0:	4b0a      	ldr	r3, [pc, #40]	; (8021acc <prvAddNewTaskToReadyList+0xc8>)
 8021aa2:	681b      	ldr	r3, [r3, #0]
 8021aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021aa6:	687b      	ldr	r3, [r7, #4]
 8021aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021aaa:	429a      	cmp	r2, r3
 8021aac:	d207      	bcs.n	8021abe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8021aae:	4b0c      	ldr	r3, [pc, #48]	; (8021ae0 <prvAddNewTaskToReadyList+0xdc>)
 8021ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021ab4:	601a      	str	r2, [r3, #0]
 8021ab6:	f3bf 8f4f 	dsb	sy
 8021aba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8021abe:	bf00      	nop
 8021ac0:	3708      	adds	r7, #8
 8021ac2:	46bd      	mov	sp, r7
 8021ac4:	bd80      	pop	{r7, pc}
 8021ac6:	bf00      	nop
 8021ac8:	20002208 	.word	0x20002208
 8021acc:	20001d34 	.word	0x20001d34
 8021ad0:	20002214 	.word	0x20002214
 8021ad4:	20002224 	.word	0x20002224
 8021ad8:	20002210 	.word	0x20002210
 8021adc:	20001d38 	.word	0x20001d38
 8021ae0:	e000ed04 	.word	0xe000ed04

08021ae4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8021ae4:	b580      	push	{r7, lr}
 8021ae6:	b084      	sub	sp, #16
 8021ae8:	af00      	add	r7, sp, #0
 8021aea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8021aec:	2300      	movs	r3, #0
 8021aee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8021af0:	687b      	ldr	r3, [r7, #4]
 8021af2:	2b00      	cmp	r3, #0
 8021af4:	d017      	beq.n	8021b26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8021af6:	4b13      	ldr	r3, [pc, #76]	; (8021b44 <vTaskDelay+0x60>)
 8021af8:	681b      	ldr	r3, [r3, #0]
 8021afa:	2b00      	cmp	r3, #0
 8021afc:	d00a      	beq.n	8021b14 <vTaskDelay+0x30>
	__asm volatile
 8021afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021b02:	f383 8811 	msr	BASEPRI, r3
 8021b06:	f3bf 8f6f 	isb	sy
 8021b0a:	f3bf 8f4f 	dsb	sy
 8021b0e:	60bb      	str	r3, [r7, #8]
}
 8021b10:	bf00      	nop
 8021b12:	e7fe      	b.n	8021b12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8021b14:	f000 f88c 	bl	8021c30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8021b18:	2100      	movs	r1, #0
 8021b1a:	6878      	ldr	r0, [r7, #4]
 8021b1c:	f000 fe62 	bl	80227e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8021b20:	f000 f894 	bl	8021c4c <xTaskResumeAll>
 8021b24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8021b26:	68fb      	ldr	r3, [r7, #12]
 8021b28:	2b00      	cmp	r3, #0
 8021b2a:	d107      	bne.n	8021b3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8021b2c:	4b06      	ldr	r3, [pc, #24]	; (8021b48 <vTaskDelay+0x64>)
 8021b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021b32:	601a      	str	r2, [r3, #0]
 8021b34:	f3bf 8f4f 	dsb	sy
 8021b38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8021b3c:	bf00      	nop
 8021b3e:	3710      	adds	r7, #16
 8021b40:	46bd      	mov	sp, r7
 8021b42:	bd80      	pop	{r7, pc}
 8021b44:	20002230 	.word	0x20002230
 8021b48:	e000ed04 	.word	0xe000ed04

08021b4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8021b4c:	b580      	push	{r7, lr}
 8021b4e:	b08a      	sub	sp, #40	; 0x28
 8021b50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8021b52:	2300      	movs	r3, #0
 8021b54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8021b56:	2300      	movs	r3, #0
 8021b58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8021b5a:	463a      	mov	r2, r7
 8021b5c:	1d39      	adds	r1, r7, #4
 8021b5e:	f107 0308 	add.w	r3, r7, #8
 8021b62:	4618      	mov	r0, r3
 8021b64:	f7fe fc7c 	bl	8020460 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8021b68:	6839      	ldr	r1, [r7, #0]
 8021b6a:	687b      	ldr	r3, [r7, #4]
 8021b6c:	68ba      	ldr	r2, [r7, #8]
 8021b6e:	9202      	str	r2, [sp, #8]
 8021b70:	9301      	str	r3, [sp, #4]
 8021b72:	2300      	movs	r3, #0
 8021b74:	9300      	str	r3, [sp, #0]
 8021b76:	2300      	movs	r3, #0
 8021b78:	460a      	mov	r2, r1
 8021b7a:	4925      	ldr	r1, [pc, #148]	; (8021c10 <vTaskStartScheduler+0xc4>)
 8021b7c:	4825      	ldr	r0, [pc, #148]	; (8021c14 <vTaskStartScheduler+0xc8>)
 8021b7e:	f7ff fdf5 	bl	802176c <xTaskCreateStatic>
 8021b82:	4603      	mov	r3, r0
 8021b84:	4a24      	ldr	r2, [pc, #144]	; (8021c18 <vTaskStartScheduler+0xcc>)
 8021b86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8021b88:	4b23      	ldr	r3, [pc, #140]	; (8021c18 <vTaskStartScheduler+0xcc>)
 8021b8a:	681b      	ldr	r3, [r3, #0]
 8021b8c:	2b00      	cmp	r3, #0
 8021b8e:	d002      	beq.n	8021b96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8021b90:	2301      	movs	r3, #1
 8021b92:	617b      	str	r3, [r7, #20]
 8021b94:	e001      	b.n	8021b9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8021b96:	2300      	movs	r3, #0
 8021b98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8021b9a:	697b      	ldr	r3, [r7, #20]
 8021b9c:	2b01      	cmp	r3, #1
 8021b9e:	d102      	bne.n	8021ba6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8021ba0:	f000 fe74 	bl	802288c <xTimerCreateTimerTask>
 8021ba4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8021ba6:	697b      	ldr	r3, [r7, #20]
 8021ba8:	2b01      	cmp	r3, #1
 8021baa:	d11d      	bne.n	8021be8 <vTaskStartScheduler+0x9c>
	__asm volatile
 8021bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021bb0:	f383 8811 	msr	BASEPRI, r3
 8021bb4:	f3bf 8f6f 	isb	sy
 8021bb8:	f3bf 8f4f 	dsb	sy
 8021bbc:	613b      	str	r3, [r7, #16]
}
 8021bbe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8021bc0:	4b16      	ldr	r3, [pc, #88]	; (8021c1c <vTaskStartScheduler+0xd0>)
 8021bc2:	681b      	ldr	r3, [r3, #0]
 8021bc4:	3358      	adds	r3, #88	; 0x58
 8021bc6:	4a16      	ldr	r2, [pc, #88]	; (8021c20 <vTaskStartScheduler+0xd4>)
 8021bc8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8021bca:	4b16      	ldr	r3, [pc, #88]	; (8021c24 <vTaskStartScheduler+0xd8>)
 8021bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8021bd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8021bd2:	4b15      	ldr	r3, [pc, #84]	; (8021c28 <vTaskStartScheduler+0xdc>)
 8021bd4:	2201      	movs	r2, #1
 8021bd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8021bd8:	4b14      	ldr	r3, [pc, #80]	; (8021c2c <vTaskStartScheduler+0xe0>)
 8021bda:	2200      	movs	r2, #0
 8021bdc:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8021bde:	f7ef fa33 	bl	8011048 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8021be2:	f001 fa2d 	bl	8023040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8021be6:	e00e      	b.n	8021c06 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8021be8:	697b      	ldr	r3, [r7, #20]
 8021bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021bee:	d10a      	bne.n	8021c06 <vTaskStartScheduler+0xba>
	__asm volatile
 8021bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021bf4:	f383 8811 	msr	BASEPRI, r3
 8021bf8:	f3bf 8f6f 	isb	sy
 8021bfc:	f3bf 8f4f 	dsb	sy
 8021c00:	60fb      	str	r3, [r7, #12]
}
 8021c02:	bf00      	nop
 8021c04:	e7fe      	b.n	8021c04 <vTaskStartScheduler+0xb8>
}
 8021c06:	bf00      	nop
 8021c08:	3718      	adds	r7, #24
 8021c0a:	46bd      	mov	sp, r7
 8021c0c:	bd80      	pop	{r7, pc}
 8021c0e:	bf00      	nop
 8021c10:	080332e0 	.word	0x080332e0
 8021c14:	0802228d 	.word	0x0802228d
 8021c18:	2000222c 	.word	0x2000222c
 8021c1c:	20001d34 	.word	0x20001d34
 8021c20:	20000188 	.word	0x20000188
 8021c24:	20002228 	.word	0x20002228
 8021c28:	20002214 	.word	0x20002214
 8021c2c:	2000220c 	.word	0x2000220c

08021c30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8021c30:	b480      	push	{r7}
 8021c32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8021c34:	4b04      	ldr	r3, [pc, #16]	; (8021c48 <vTaskSuspendAll+0x18>)
 8021c36:	681b      	ldr	r3, [r3, #0]
 8021c38:	3301      	adds	r3, #1
 8021c3a:	4a03      	ldr	r2, [pc, #12]	; (8021c48 <vTaskSuspendAll+0x18>)
 8021c3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8021c3e:	bf00      	nop
 8021c40:	46bd      	mov	sp, r7
 8021c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c46:	4770      	bx	lr
 8021c48:	20002230 	.word	0x20002230

08021c4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8021c4c:	b580      	push	{r7, lr}
 8021c4e:	b084      	sub	sp, #16
 8021c50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8021c52:	2300      	movs	r3, #0
 8021c54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8021c56:	2300      	movs	r3, #0
 8021c58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8021c5a:	4b42      	ldr	r3, [pc, #264]	; (8021d64 <xTaskResumeAll+0x118>)
 8021c5c:	681b      	ldr	r3, [r3, #0]
 8021c5e:	2b00      	cmp	r3, #0
 8021c60:	d10a      	bne.n	8021c78 <xTaskResumeAll+0x2c>
	__asm volatile
 8021c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021c66:	f383 8811 	msr	BASEPRI, r3
 8021c6a:	f3bf 8f6f 	isb	sy
 8021c6e:	f3bf 8f4f 	dsb	sy
 8021c72:	603b      	str	r3, [r7, #0]
}
 8021c74:	bf00      	nop
 8021c76:	e7fe      	b.n	8021c76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8021c78:	f001 fa84 	bl	8023184 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8021c7c:	4b39      	ldr	r3, [pc, #228]	; (8021d64 <xTaskResumeAll+0x118>)
 8021c7e:	681b      	ldr	r3, [r3, #0]
 8021c80:	3b01      	subs	r3, #1
 8021c82:	4a38      	ldr	r2, [pc, #224]	; (8021d64 <xTaskResumeAll+0x118>)
 8021c84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8021c86:	4b37      	ldr	r3, [pc, #220]	; (8021d64 <xTaskResumeAll+0x118>)
 8021c88:	681b      	ldr	r3, [r3, #0]
 8021c8a:	2b00      	cmp	r3, #0
 8021c8c:	d162      	bne.n	8021d54 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8021c8e:	4b36      	ldr	r3, [pc, #216]	; (8021d68 <xTaskResumeAll+0x11c>)
 8021c90:	681b      	ldr	r3, [r3, #0]
 8021c92:	2b00      	cmp	r3, #0
 8021c94:	d05e      	beq.n	8021d54 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8021c96:	e02f      	b.n	8021cf8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8021c98:	4b34      	ldr	r3, [pc, #208]	; (8021d6c <xTaskResumeAll+0x120>)
 8021c9a:	68db      	ldr	r3, [r3, #12]
 8021c9c:	68db      	ldr	r3, [r3, #12]
 8021c9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8021ca0:	68fb      	ldr	r3, [r7, #12]
 8021ca2:	3318      	adds	r3, #24
 8021ca4:	4618      	mov	r0, r3
 8021ca6:	f7fe fc99 	bl	80205dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8021caa:	68fb      	ldr	r3, [r7, #12]
 8021cac:	3304      	adds	r3, #4
 8021cae:	4618      	mov	r0, r3
 8021cb0:	f7fe fc94 	bl	80205dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8021cb4:	68fb      	ldr	r3, [r7, #12]
 8021cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021cb8:	4b2d      	ldr	r3, [pc, #180]	; (8021d70 <xTaskResumeAll+0x124>)
 8021cba:	681b      	ldr	r3, [r3, #0]
 8021cbc:	429a      	cmp	r2, r3
 8021cbe:	d903      	bls.n	8021cc8 <xTaskResumeAll+0x7c>
 8021cc0:	68fb      	ldr	r3, [r7, #12]
 8021cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021cc4:	4a2a      	ldr	r2, [pc, #168]	; (8021d70 <xTaskResumeAll+0x124>)
 8021cc6:	6013      	str	r3, [r2, #0]
 8021cc8:	68fb      	ldr	r3, [r7, #12]
 8021cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021ccc:	4613      	mov	r3, r2
 8021cce:	009b      	lsls	r3, r3, #2
 8021cd0:	4413      	add	r3, r2
 8021cd2:	009b      	lsls	r3, r3, #2
 8021cd4:	4a27      	ldr	r2, [pc, #156]	; (8021d74 <xTaskResumeAll+0x128>)
 8021cd6:	441a      	add	r2, r3
 8021cd8:	68fb      	ldr	r3, [r7, #12]
 8021cda:	3304      	adds	r3, #4
 8021cdc:	4619      	mov	r1, r3
 8021cde:	4610      	mov	r0, r2
 8021ce0:	f7fe fc1f 	bl	8020522 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8021ce4:	68fb      	ldr	r3, [r7, #12]
 8021ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021ce8:	4b23      	ldr	r3, [pc, #140]	; (8021d78 <xTaskResumeAll+0x12c>)
 8021cea:	681b      	ldr	r3, [r3, #0]
 8021cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021cee:	429a      	cmp	r2, r3
 8021cf0:	d302      	bcc.n	8021cf8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8021cf2:	4b22      	ldr	r3, [pc, #136]	; (8021d7c <xTaskResumeAll+0x130>)
 8021cf4:	2201      	movs	r2, #1
 8021cf6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8021cf8:	4b1c      	ldr	r3, [pc, #112]	; (8021d6c <xTaskResumeAll+0x120>)
 8021cfa:	681b      	ldr	r3, [r3, #0]
 8021cfc:	2b00      	cmp	r3, #0
 8021cfe:	d1cb      	bne.n	8021c98 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8021d00:	68fb      	ldr	r3, [r7, #12]
 8021d02:	2b00      	cmp	r3, #0
 8021d04:	d001      	beq.n	8021d0a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8021d06:	f000 fbb3 	bl	8022470 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8021d0a:	4b1d      	ldr	r3, [pc, #116]	; (8021d80 <xTaskResumeAll+0x134>)
 8021d0c:	681b      	ldr	r3, [r3, #0]
 8021d0e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8021d10:	687b      	ldr	r3, [r7, #4]
 8021d12:	2b00      	cmp	r3, #0
 8021d14:	d010      	beq.n	8021d38 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8021d16:	f000 f847 	bl	8021da8 <xTaskIncrementTick>
 8021d1a:	4603      	mov	r3, r0
 8021d1c:	2b00      	cmp	r3, #0
 8021d1e:	d002      	beq.n	8021d26 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8021d20:	4b16      	ldr	r3, [pc, #88]	; (8021d7c <xTaskResumeAll+0x130>)
 8021d22:	2201      	movs	r2, #1
 8021d24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8021d26:	687b      	ldr	r3, [r7, #4]
 8021d28:	3b01      	subs	r3, #1
 8021d2a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8021d2c:	687b      	ldr	r3, [r7, #4]
 8021d2e:	2b00      	cmp	r3, #0
 8021d30:	d1f1      	bne.n	8021d16 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8021d32:	4b13      	ldr	r3, [pc, #76]	; (8021d80 <xTaskResumeAll+0x134>)
 8021d34:	2200      	movs	r2, #0
 8021d36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8021d38:	4b10      	ldr	r3, [pc, #64]	; (8021d7c <xTaskResumeAll+0x130>)
 8021d3a:	681b      	ldr	r3, [r3, #0]
 8021d3c:	2b00      	cmp	r3, #0
 8021d3e:	d009      	beq.n	8021d54 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8021d40:	2301      	movs	r3, #1
 8021d42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8021d44:	4b0f      	ldr	r3, [pc, #60]	; (8021d84 <xTaskResumeAll+0x138>)
 8021d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021d4a:	601a      	str	r2, [r3, #0]
 8021d4c:	f3bf 8f4f 	dsb	sy
 8021d50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8021d54:	f001 fa46 	bl	80231e4 <vPortExitCritical>

	return xAlreadyYielded;
 8021d58:	68bb      	ldr	r3, [r7, #8]
}
 8021d5a:	4618      	mov	r0, r3
 8021d5c:	3710      	adds	r7, #16
 8021d5e:	46bd      	mov	sp, r7
 8021d60:	bd80      	pop	{r7, pc}
 8021d62:	bf00      	nop
 8021d64:	20002230 	.word	0x20002230
 8021d68:	20002208 	.word	0x20002208
 8021d6c:	200021c8 	.word	0x200021c8
 8021d70:	20002210 	.word	0x20002210
 8021d74:	20001d38 	.word	0x20001d38
 8021d78:	20001d34 	.word	0x20001d34
 8021d7c:	2000221c 	.word	0x2000221c
 8021d80:	20002218 	.word	0x20002218
 8021d84:	e000ed04 	.word	0xe000ed04

08021d88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8021d88:	b480      	push	{r7}
 8021d8a:	b083      	sub	sp, #12
 8021d8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8021d8e:	4b05      	ldr	r3, [pc, #20]	; (8021da4 <xTaskGetTickCount+0x1c>)
 8021d90:	681b      	ldr	r3, [r3, #0]
 8021d92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8021d94:	687b      	ldr	r3, [r7, #4]
}
 8021d96:	4618      	mov	r0, r3
 8021d98:	370c      	adds	r7, #12
 8021d9a:	46bd      	mov	sp, r7
 8021d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021da0:	4770      	bx	lr
 8021da2:	bf00      	nop
 8021da4:	2000220c 	.word	0x2000220c

08021da8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8021da8:	b580      	push	{r7, lr}
 8021daa:	b086      	sub	sp, #24
 8021dac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8021dae:	2300      	movs	r3, #0
 8021db0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8021db2:	4b4f      	ldr	r3, [pc, #316]	; (8021ef0 <xTaskIncrementTick+0x148>)
 8021db4:	681b      	ldr	r3, [r3, #0]
 8021db6:	2b00      	cmp	r3, #0
 8021db8:	f040 808f 	bne.w	8021eda <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8021dbc:	4b4d      	ldr	r3, [pc, #308]	; (8021ef4 <xTaskIncrementTick+0x14c>)
 8021dbe:	681b      	ldr	r3, [r3, #0]
 8021dc0:	3301      	adds	r3, #1
 8021dc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8021dc4:	4a4b      	ldr	r2, [pc, #300]	; (8021ef4 <xTaskIncrementTick+0x14c>)
 8021dc6:	693b      	ldr	r3, [r7, #16]
 8021dc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8021dca:	693b      	ldr	r3, [r7, #16]
 8021dcc:	2b00      	cmp	r3, #0
 8021dce:	d120      	bne.n	8021e12 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8021dd0:	4b49      	ldr	r3, [pc, #292]	; (8021ef8 <xTaskIncrementTick+0x150>)
 8021dd2:	681b      	ldr	r3, [r3, #0]
 8021dd4:	681b      	ldr	r3, [r3, #0]
 8021dd6:	2b00      	cmp	r3, #0
 8021dd8:	d00a      	beq.n	8021df0 <xTaskIncrementTick+0x48>
	__asm volatile
 8021dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021dde:	f383 8811 	msr	BASEPRI, r3
 8021de2:	f3bf 8f6f 	isb	sy
 8021de6:	f3bf 8f4f 	dsb	sy
 8021dea:	603b      	str	r3, [r7, #0]
}
 8021dec:	bf00      	nop
 8021dee:	e7fe      	b.n	8021dee <xTaskIncrementTick+0x46>
 8021df0:	4b41      	ldr	r3, [pc, #260]	; (8021ef8 <xTaskIncrementTick+0x150>)
 8021df2:	681b      	ldr	r3, [r3, #0]
 8021df4:	60fb      	str	r3, [r7, #12]
 8021df6:	4b41      	ldr	r3, [pc, #260]	; (8021efc <xTaskIncrementTick+0x154>)
 8021df8:	681b      	ldr	r3, [r3, #0]
 8021dfa:	4a3f      	ldr	r2, [pc, #252]	; (8021ef8 <xTaskIncrementTick+0x150>)
 8021dfc:	6013      	str	r3, [r2, #0]
 8021dfe:	4a3f      	ldr	r2, [pc, #252]	; (8021efc <xTaskIncrementTick+0x154>)
 8021e00:	68fb      	ldr	r3, [r7, #12]
 8021e02:	6013      	str	r3, [r2, #0]
 8021e04:	4b3e      	ldr	r3, [pc, #248]	; (8021f00 <xTaskIncrementTick+0x158>)
 8021e06:	681b      	ldr	r3, [r3, #0]
 8021e08:	3301      	adds	r3, #1
 8021e0a:	4a3d      	ldr	r2, [pc, #244]	; (8021f00 <xTaskIncrementTick+0x158>)
 8021e0c:	6013      	str	r3, [r2, #0]
 8021e0e:	f000 fb2f 	bl	8022470 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8021e12:	4b3c      	ldr	r3, [pc, #240]	; (8021f04 <xTaskIncrementTick+0x15c>)
 8021e14:	681b      	ldr	r3, [r3, #0]
 8021e16:	693a      	ldr	r2, [r7, #16]
 8021e18:	429a      	cmp	r2, r3
 8021e1a:	d349      	bcc.n	8021eb0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8021e1c:	4b36      	ldr	r3, [pc, #216]	; (8021ef8 <xTaskIncrementTick+0x150>)
 8021e1e:	681b      	ldr	r3, [r3, #0]
 8021e20:	681b      	ldr	r3, [r3, #0]
 8021e22:	2b00      	cmp	r3, #0
 8021e24:	d104      	bne.n	8021e30 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8021e26:	4b37      	ldr	r3, [pc, #220]	; (8021f04 <xTaskIncrementTick+0x15c>)
 8021e28:	f04f 32ff 	mov.w	r2, #4294967295
 8021e2c:	601a      	str	r2, [r3, #0]
					break;
 8021e2e:	e03f      	b.n	8021eb0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8021e30:	4b31      	ldr	r3, [pc, #196]	; (8021ef8 <xTaskIncrementTick+0x150>)
 8021e32:	681b      	ldr	r3, [r3, #0]
 8021e34:	68db      	ldr	r3, [r3, #12]
 8021e36:	68db      	ldr	r3, [r3, #12]
 8021e38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8021e3a:	68bb      	ldr	r3, [r7, #8]
 8021e3c:	685b      	ldr	r3, [r3, #4]
 8021e3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8021e40:	693a      	ldr	r2, [r7, #16]
 8021e42:	687b      	ldr	r3, [r7, #4]
 8021e44:	429a      	cmp	r2, r3
 8021e46:	d203      	bcs.n	8021e50 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8021e48:	4a2e      	ldr	r2, [pc, #184]	; (8021f04 <xTaskIncrementTick+0x15c>)
 8021e4a:	687b      	ldr	r3, [r7, #4]
 8021e4c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8021e4e:	e02f      	b.n	8021eb0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8021e50:	68bb      	ldr	r3, [r7, #8]
 8021e52:	3304      	adds	r3, #4
 8021e54:	4618      	mov	r0, r3
 8021e56:	f7fe fbc1 	bl	80205dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8021e5a:	68bb      	ldr	r3, [r7, #8]
 8021e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021e5e:	2b00      	cmp	r3, #0
 8021e60:	d004      	beq.n	8021e6c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8021e62:	68bb      	ldr	r3, [r7, #8]
 8021e64:	3318      	adds	r3, #24
 8021e66:	4618      	mov	r0, r3
 8021e68:	f7fe fbb8 	bl	80205dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8021e6c:	68bb      	ldr	r3, [r7, #8]
 8021e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021e70:	4b25      	ldr	r3, [pc, #148]	; (8021f08 <xTaskIncrementTick+0x160>)
 8021e72:	681b      	ldr	r3, [r3, #0]
 8021e74:	429a      	cmp	r2, r3
 8021e76:	d903      	bls.n	8021e80 <xTaskIncrementTick+0xd8>
 8021e78:	68bb      	ldr	r3, [r7, #8]
 8021e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021e7c:	4a22      	ldr	r2, [pc, #136]	; (8021f08 <xTaskIncrementTick+0x160>)
 8021e7e:	6013      	str	r3, [r2, #0]
 8021e80:	68bb      	ldr	r3, [r7, #8]
 8021e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021e84:	4613      	mov	r3, r2
 8021e86:	009b      	lsls	r3, r3, #2
 8021e88:	4413      	add	r3, r2
 8021e8a:	009b      	lsls	r3, r3, #2
 8021e8c:	4a1f      	ldr	r2, [pc, #124]	; (8021f0c <xTaskIncrementTick+0x164>)
 8021e8e:	441a      	add	r2, r3
 8021e90:	68bb      	ldr	r3, [r7, #8]
 8021e92:	3304      	adds	r3, #4
 8021e94:	4619      	mov	r1, r3
 8021e96:	4610      	mov	r0, r2
 8021e98:	f7fe fb43 	bl	8020522 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8021e9c:	68bb      	ldr	r3, [r7, #8]
 8021e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021ea0:	4b1b      	ldr	r3, [pc, #108]	; (8021f10 <xTaskIncrementTick+0x168>)
 8021ea2:	681b      	ldr	r3, [r3, #0]
 8021ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021ea6:	429a      	cmp	r2, r3
 8021ea8:	d3b8      	bcc.n	8021e1c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8021eaa:	2301      	movs	r3, #1
 8021eac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8021eae:	e7b5      	b.n	8021e1c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8021eb0:	4b17      	ldr	r3, [pc, #92]	; (8021f10 <xTaskIncrementTick+0x168>)
 8021eb2:	681b      	ldr	r3, [r3, #0]
 8021eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021eb6:	4915      	ldr	r1, [pc, #84]	; (8021f0c <xTaskIncrementTick+0x164>)
 8021eb8:	4613      	mov	r3, r2
 8021eba:	009b      	lsls	r3, r3, #2
 8021ebc:	4413      	add	r3, r2
 8021ebe:	009b      	lsls	r3, r3, #2
 8021ec0:	440b      	add	r3, r1
 8021ec2:	681b      	ldr	r3, [r3, #0]
 8021ec4:	2b01      	cmp	r3, #1
 8021ec6:	d901      	bls.n	8021ecc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8021ec8:	2301      	movs	r3, #1
 8021eca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8021ecc:	4b11      	ldr	r3, [pc, #68]	; (8021f14 <xTaskIncrementTick+0x16c>)
 8021ece:	681b      	ldr	r3, [r3, #0]
 8021ed0:	2b00      	cmp	r3, #0
 8021ed2:	d007      	beq.n	8021ee4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8021ed4:	2301      	movs	r3, #1
 8021ed6:	617b      	str	r3, [r7, #20]
 8021ed8:	e004      	b.n	8021ee4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8021eda:	4b0f      	ldr	r3, [pc, #60]	; (8021f18 <xTaskIncrementTick+0x170>)
 8021edc:	681b      	ldr	r3, [r3, #0]
 8021ede:	3301      	adds	r3, #1
 8021ee0:	4a0d      	ldr	r2, [pc, #52]	; (8021f18 <xTaskIncrementTick+0x170>)
 8021ee2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8021ee4:	697b      	ldr	r3, [r7, #20]
}
 8021ee6:	4618      	mov	r0, r3
 8021ee8:	3718      	adds	r7, #24
 8021eea:	46bd      	mov	sp, r7
 8021eec:	bd80      	pop	{r7, pc}
 8021eee:	bf00      	nop
 8021ef0:	20002230 	.word	0x20002230
 8021ef4:	2000220c 	.word	0x2000220c
 8021ef8:	200021c0 	.word	0x200021c0
 8021efc:	200021c4 	.word	0x200021c4
 8021f00:	20002220 	.word	0x20002220
 8021f04:	20002228 	.word	0x20002228
 8021f08:	20002210 	.word	0x20002210
 8021f0c:	20001d38 	.word	0x20001d38
 8021f10:	20001d34 	.word	0x20001d34
 8021f14:	2000221c 	.word	0x2000221c
 8021f18:	20002218 	.word	0x20002218

08021f1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8021f1c:	b580      	push	{r7, lr}
 8021f1e:	b084      	sub	sp, #16
 8021f20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8021f22:	4b36      	ldr	r3, [pc, #216]	; (8021ffc <vTaskSwitchContext+0xe0>)
 8021f24:	681b      	ldr	r3, [r3, #0]
 8021f26:	2b00      	cmp	r3, #0
 8021f28:	d003      	beq.n	8021f32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8021f2a:	4b35      	ldr	r3, [pc, #212]	; (8022000 <vTaskSwitchContext+0xe4>)
 8021f2c:	2201      	movs	r2, #1
 8021f2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8021f30:	e05f      	b.n	8021ff2 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8021f32:	4b33      	ldr	r3, [pc, #204]	; (8022000 <vTaskSwitchContext+0xe4>)
 8021f34:	2200      	movs	r2, #0
 8021f36:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8021f38:	f7ef f88d 	bl	8011056 <getRunTimeCounterValue>
 8021f3c:	4603      	mov	r3, r0
 8021f3e:	4a31      	ldr	r2, [pc, #196]	; (8022004 <vTaskSwitchContext+0xe8>)
 8021f40:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8021f42:	4b30      	ldr	r3, [pc, #192]	; (8022004 <vTaskSwitchContext+0xe8>)
 8021f44:	681a      	ldr	r2, [r3, #0]
 8021f46:	4b30      	ldr	r3, [pc, #192]	; (8022008 <vTaskSwitchContext+0xec>)
 8021f48:	681b      	ldr	r3, [r3, #0]
 8021f4a:	429a      	cmp	r2, r3
 8021f4c:	d909      	bls.n	8021f62 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8021f4e:	4b2f      	ldr	r3, [pc, #188]	; (802200c <vTaskSwitchContext+0xf0>)
 8021f50:	681b      	ldr	r3, [r3, #0]
 8021f52:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8021f54:	4a2b      	ldr	r2, [pc, #172]	; (8022004 <vTaskSwitchContext+0xe8>)
 8021f56:	6810      	ldr	r0, [r2, #0]
 8021f58:	4a2b      	ldr	r2, [pc, #172]	; (8022008 <vTaskSwitchContext+0xec>)
 8021f5a:	6812      	ldr	r2, [r2, #0]
 8021f5c:	1a82      	subs	r2, r0, r2
 8021f5e:	440a      	add	r2, r1
 8021f60:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8021f62:	4b28      	ldr	r3, [pc, #160]	; (8022004 <vTaskSwitchContext+0xe8>)
 8021f64:	681b      	ldr	r3, [r3, #0]
 8021f66:	4a28      	ldr	r2, [pc, #160]	; (8022008 <vTaskSwitchContext+0xec>)
 8021f68:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8021f6a:	4b29      	ldr	r3, [pc, #164]	; (8022010 <vTaskSwitchContext+0xf4>)
 8021f6c:	681b      	ldr	r3, [r3, #0]
 8021f6e:	60fb      	str	r3, [r7, #12]
 8021f70:	e010      	b.n	8021f94 <vTaskSwitchContext+0x78>
 8021f72:	68fb      	ldr	r3, [r7, #12]
 8021f74:	2b00      	cmp	r3, #0
 8021f76:	d10a      	bne.n	8021f8e <vTaskSwitchContext+0x72>
	__asm volatile
 8021f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021f7c:	f383 8811 	msr	BASEPRI, r3
 8021f80:	f3bf 8f6f 	isb	sy
 8021f84:	f3bf 8f4f 	dsb	sy
 8021f88:	607b      	str	r3, [r7, #4]
}
 8021f8a:	bf00      	nop
 8021f8c:	e7fe      	b.n	8021f8c <vTaskSwitchContext+0x70>
 8021f8e:	68fb      	ldr	r3, [r7, #12]
 8021f90:	3b01      	subs	r3, #1
 8021f92:	60fb      	str	r3, [r7, #12]
 8021f94:	491f      	ldr	r1, [pc, #124]	; (8022014 <vTaskSwitchContext+0xf8>)
 8021f96:	68fa      	ldr	r2, [r7, #12]
 8021f98:	4613      	mov	r3, r2
 8021f9a:	009b      	lsls	r3, r3, #2
 8021f9c:	4413      	add	r3, r2
 8021f9e:	009b      	lsls	r3, r3, #2
 8021fa0:	440b      	add	r3, r1
 8021fa2:	681b      	ldr	r3, [r3, #0]
 8021fa4:	2b00      	cmp	r3, #0
 8021fa6:	d0e4      	beq.n	8021f72 <vTaskSwitchContext+0x56>
 8021fa8:	68fa      	ldr	r2, [r7, #12]
 8021faa:	4613      	mov	r3, r2
 8021fac:	009b      	lsls	r3, r3, #2
 8021fae:	4413      	add	r3, r2
 8021fb0:	009b      	lsls	r3, r3, #2
 8021fb2:	4a18      	ldr	r2, [pc, #96]	; (8022014 <vTaskSwitchContext+0xf8>)
 8021fb4:	4413      	add	r3, r2
 8021fb6:	60bb      	str	r3, [r7, #8]
 8021fb8:	68bb      	ldr	r3, [r7, #8]
 8021fba:	685b      	ldr	r3, [r3, #4]
 8021fbc:	685a      	ldr	r2, [r3, #4]
 8021fbe:	68bb      	ldr	r3, [r7, #8]
 8021fc0:	605a      	str	r2, [r3, #4]
 8021fc2:	68bb      	ldr	r3, [r7, #8]
 8021fc4:	685a      	ldr	r2, [r3, #4]
 8021fc6:	68bb      	ldr	r3, [r7, #8]
 8021fc8:	3308      	adds	r3, #8
 8021fca:	429a      	cmp	r2, r3
 8021fcc:	d104      	bne.n	8021fd8 <vTaskSwitchContext+0xbc>
 8021fce:	68bb      	ldr	r3, [r7, #8]
 8021fd0:	685b      	ldr	r3, [r3, #4]
 8021fd2:	685a      	ldr	r2, [r3, #4]
 8021fd4:	68bb      	ldr	r3, [r7, #8]
 8021fd6:	605a      	str	r2, [r3, #4]
 8021fd8:	68bb      	ldr	r3, [r7, #8]
 8021fda:	685b      	ldr	r3, [r3, #4]
 8021fdc:	68db      	ldr	r3, [r3, #12]
 8021fde:	4a0b      	ldr	r2, [pc, #44]	; (802200c <vTaskSwitchContext+0xf0>)
 8021fe0:	6013      	str	r3, [r2, #0]
 8021fe2:	4a0b      	ldr	r2, [pc, #44]	; (8022010 <vTaskSwitchContext+0xf4>)
 8021fe4:	68fb      	ldr	r3, [r7, #12]
 8021fe6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8021fe8:	4b08      	ldr	r3, [pc, #32]	; (802200c <vTaskSwitchContext+0xf0>)
 8021fea:	681b      	ldr	r3, [r3, #0]
 8021fec:	3358      	adds	r3, #88	; 0x58
 8021fee:	4a0a      	ldr	r2, [pc, #40]	; (8022018 <vTaskSwitchContext+0xfc>)
 8021ff0:	6013      	str	r3, [r2, #0]
}
 8021ff2:	bf00      	nop
 8021ff4:	3710      	adds	r7, #16
 8021ff6:	46bd      	mov	sp, r7
 8021ff8:	bd80      	pop	{r7, pc}
 8021ffa:	bf00      	nop
 8021ffc:	20002230 	.word	0x20002230
 8022000:	2000221c 	.word	0x2000221c
 8022004:	20002238 	.word	0x20002238
 8022008:	20002234 	.word	0x20002234
 802200c:	20001d34 	.word	0x20001d34
 8022010:	20002210 	.word	0x20002210
 8022014:	20001d38 	.word	0x20001d38
 8022018:	20000188 	.word	0x20000188

0802201c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 802201c:	b580      	push	{r7, lr}
 802201e:	b084      	sub	sp, #16
 8022020:	af00      	add	r7, sp, #0
 8022022:	6078      	str	r0, [r7, #4]
 8022024:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8022026:	687b      	ldr	r3, [r7, #4]
 8022028:	2b00      	cmp	r3, #0
 802202a:	d10a      	bne.n	8022042 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 802202c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022030:	f383 8811 	msr	BASEPRI, r3
 8022034:	f3bf 8f6f 	isb	sy
 8022038:	f3bf 8f4f 	dsb	sy
 802203c:	60fb      	str	r3, [r7, #12]
}
 802203e:	bf00      	nop
 8022040:	e7fe      	b.n	8022040 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8022042:	4b07      	ldr	r3, [pc, #28]	; (8022060 <vTaskPlaceOnEventList+0x44>)
 8022044:	681b      	ldr	r3, [r3, #0]
 8022046:	3318      	adds	r3, #24
 8022048:	4619      	mov	r1, r3
 802204a:	6878      	ldr	r0, [r7, #4]
 802204c:	f7fe fa8d 	bl	802056a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8022050:	2101      	movs	r1, #1
 8022052:	6838      	ldr	r0, [r7, #0]
 8022054:	f000 fbc6 	bl	80227e4 <prvAddCurrentTaskToDelayedList>
}
 8022058:	bf00      	nop
 802205a:	3710      	adds	r7, #16
 802205c:	46bd      	mov	sp, r7
 802205e:	bd80      	pop	{r7, pc}
 8022060:	20001d34 	.word	0x20001d34

08022064 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8022064:	b580      	push	{r7, lr}
 8022066:	b086      	sub	sp, #24
 8022068:	af00      	add	r7, sp, #0
 802206a:	60f8      	str	r0, [r7, #12]
 802206c:	60b9      	str	r1, [r7, #8]
 802206e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8022070:	68fb      	ldr	r3, [r7, #12]
 8022072:	2b00      	cmp	r3, #0
 8022074:	d10a      	bne.n	802208c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8022076:	f04f 0350 	mov.w	r3, #80	; 0x50
 802207a:	f383 8811 	msr	BASEPRI, r3
 802207e:	f3bf 8f6f 	isb	sy
 8022082:	f3bf 8f4f 	dsb	sy
 8022086:	617b      	str	r3, [r7, #20]
}
 8022088:	bf00      	nop
 802208a:	e7fe      	b.n	802208a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 802208c:	4b0a      	ldr	r3, [pc, #40]	; (80220b8 <vTaskPlaceOnEventListRestricted+0x54>)
 802208e:	681b      	ldr	r3, [r3, #0]
 8022090:	3318      	adds	r3, #24
 8022092:	4619      	mov	r1, r3
 8022094:	68f8      	ldr	r0, [r7, #12]
 8022096:	f7fe fa44 	bl	8020522 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 802209a:	687b      	ldr	r3, [r7, #4]
 802209c:	2b00      	cmp	r3, #0
 802209e:	d002      	beq.n	80220a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80220a0:	f04f 33ff 	mov.w	r3, #4294967295
 80220a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80220a6:	6879      	ldr	r1, [r7, #4]
 80220a8:	68b8      	ldr	r0, [r7, #8]
 80220aa:	f000 fb9b 	bl	80227e4 <prvAddCurrentTaskToDelayedList>
	}
 80220ae:	bf00      	nop
 80220b0:	3718      	adds	r7, #24
 80220b2:	46bd      	mov	sp, r7
 80220b4:	bd80      	pop	{r7, pc}
 80220b6:	bf00      	nop
 80220b8:	20001d34 	.word	0x20001d34

080220bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80220bc:	b580      	push	{r7, lr}
 80220be:	b086      	sub	sp, #24
 80220c0:	af00      	add	r7, sp, #0
 80220c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80220c4:	687b      	ldr	r3, [r7, #4]
 80220c6:	68db      	ldr	r3, [r3, #12]
 80220c8:	68db      	ldr	r3, [r3, #12]
 80220ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80220cc:	693b      	ldr	r3, [r7, #16]
 80220ce:	2b00      	cmp	r3, #0
 80220d0:	d10a      	bne.n	80220e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80220d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80220d6:	f383 8811 	msr	BASEPRI, r3
 80220da:	f3bf 8f6f 	isb	sy
 80220de:	f3bf 8f4f 	dsb	sy
 80220e2:	60fb      	str	r3, [r7, #12]
}
 80220e4:	bf00      	nop
 80220e6:	e7fe      	b.n	80220e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80220e8:	693b      	ldr	r3, [r7, #16]
 80220ea:	3318      	adds	r3, #24
 80220ec:	4618      	mov	r0, r3
 80220ee:	f7fe fa75 	bl	80205dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80220f2:	4b1e      	ldr	r3, [pc, #120]	; (802216c <xTaskRemoveFromEventList+0xb0>)
 80220f4:	681b      	ldr	r3, [r3, #0]
 80220f6:	2b00      	cmp	r3, #0
 80220f8:	d11d      	bne.n	8022136 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80220fa:	693b      	ldr	r3, [r7, #16]
 80220fc:	3304      	adds	r3, #4
 80220fe:	4618      	mov	r0, r3
 8022100:	f7fe fa6c 	bl	80205dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8022104:	693b      	ldr	r3, [r7, #16]
 8022106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022108:	4b19      	ldr	r3, [pc, #100]	; (8022170 <xTaskRemoveFromEventList+0xb4>)
 802210a:	681b      	ldr	r3, [r3, #0]
 802210c:	429a      	cmp	r2, r3
 802210e:	d903      	bls.n	8022118 <xTaskRemoveFromEventList+0x5c>
 8022110:	693b      	ldr	r3, [r7, #16]
 8022112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022114:	4a16      	ldr	r2, [pc, #88]	; (8022170 <xTaskRemoveFromEventList+0xb4>)
 8022116:	6013      	str	r3, [r2, #0]
 8022118:	693b      	ldr	r3, [r7, #16]
 802211a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802211c:	4613      	mov	r3, r2
 802211e:	009b      	lsls	r3, r3, #2
 8022120:	4413      	add	r3, r2
 8022122:	009b      	lsls	r3, r3, #2
 8022124:	4a13      	ldr	r2, [pc, #76]	; (8022174 <xTaskRemoveFromEventList+0xb8>)
 8022126:	441a      	add	r2, r3
 8022128:	693b      	ldr	r3, [r7, #16]
 802212a:	3304      	adds	r3, #4
 802212c:	4619      	mov	r1, r3
 802212e:	4610      	mov	r0, r2
 8022130:	f7fe f9f7 	bl	8020522 <vListInsertEnd>
 8022134:	e005      	b.n	8022142 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8022136:	693b      	ldr	r3, [r7, #16]
 8022138:	3318      	adds	r3, #24
 802213a:	4619      	mov	r1, r3
 802213c:	480e      	ldr	r0, [pc, #56]	; (8022178 <xTaskRemoveFromEventList+0xbc>)
 802213e:	f7fe f9f0 	bl	8020522 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8022142:	693b      	ldr	r3, [r7, #16]
 8022144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022146:	4b0d      	ldr	r3, [pc, #52]	; (802217c <xTaskRemoveFromEventList+0xc0>)
 8022148:	681b      	ldr	r3, [r3, #0]
 802214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802214c:	429a      	cmp	r2, r3
 802214e:	d905      	bls.n	802215c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8022150:	2301      	movs	r3, #1
 8022152:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8022154:	4b0a      	ldr	r3, [pc, #40]	; (8022180 <xTaskRemoveFromEventList+0xc4>)
 8022156:	2201      	movs	r2, #1
 8022158:	601a      	str	r2, [r3, #0]
 802215a:	e001      	b.n	8022160 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 802215c:	2300      	movs	r3, #0
 802215e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8022160:	697b      	ldr	r3, [r7, #20]
}
 8022162:	4618      	mov	r0, r3
 8022164:	3718      	adds	r7, #24
 8022166:	46bd      	mov	sp, r7
 8022168:	bd80      	pop	{r7, pc}
 802216a:	bf00      	nop
 802216c:	20002230 	.word	0x20002230
 8022170:	20002210 	.word	0x20002210
 8022174:	20001d38 	.word	0x20001d38
 8022178:	200021c8 	.word	0x200021c8
 802217c:	20001d34 	.word	0x20001d34
 8022180:	2000221c 	.word	0x2000221c

08022184 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8022184:	b480      	push	{r7}
 8022186:	b083      	sub	sp, #12
 8022188:	af00      	add	r7, sp, #0
 802218a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 802218c:	4b06      	ldr	r3, [pc, #24]	; (80221a8 <vTaskInternalSetTimeOutState+0x24>)
 802218e:	681a      	ldr	r2, [r3, #0]
 8022190:	687b      	ldr	r3, [r7, #4]
 8022192:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8022194:	4b05      	ldr	r3, [pc, #20]	; (80221ac <vTaskInternalSetTimeOutState+0x28>)
 8022196:	681a      	ldr	r2, [r3, #0]
 8022198:	687b      	ldr	r3, [r7, #4]
 802219a:	605a      	str	r2, [r3, #4]
}
 802219c:	bf00      	nop
 802219e:	370c      	adds	r7, #12
 80221a0:	46bd      	mov	sp, r7
 80221a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221a6:	4770      	bx	lr
 80221a8:	20002220 	.word	0x20002220
 80221ac:	2000220c 	.word	0x2000220c

080221b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80221b0:	b580      	push	{r7, lr}
 80221b2:	b088      	sub	sp, #32
 80221b4:	af00      	add	r7, sp, #0
 80221b6:	6078      	str	r0, [r7, #4]
 80221b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80221ba:	687b      	ldr	r3, [r7, #4]
 80221bc:	2b00      	cmp	r3, #0
 80221be:	d10a      	bne.n	80221d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80221c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80221c4:	f383 8811 	msr	BASEPRI, r3
 80221c8:	f3bf 8f6f 	isb	sy
 80221cc:	f3bf 8f4f 	dsb	sy
 80221d0:	613b      	str	r3, [r7, #16]
}
 80221d2:	bf00      	nop
 80221d4:	e7fe      	b.n	80221d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80221d6:	683b      	ldr	r3, [r7, #0]
 80221d8:	2b00      	cmp	r3, #0
 80221da:	d10a      	bne.n	80221f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80221dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80221e0:	f383 8811 	msr	BASEPRI, r3
 80221e4:	f3bf 8f6f 	isb	sy
 80221e8:	f3bf 8f4f 	dsb	sy
 80221ec:	60fb      	str	r3, [r7, #12]
}
 80221ee:	bf00      	nop
 80221f0:	e7fe      	b.n	80221f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80221f2:	f000 ffc7 	bl	8023184 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80221f6:	4b1d      	ldr	r3, [pc, #116]	; (802226c <xTaskCheckForTimeOut+0xbc>)
 80221f8:	681b      	ldr	r3, [r3, #0]
 80221fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80221fc:	687b      	ldr	r3, [r7, #4]
 80221fe:	685b      	ldr	r3, [r3, #4]
 8022200:	69ba      	ldr	r2, [r7, #24]
 8022202:	1ad3      	subs	r3, r2, r3
 8022204:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8022206:	683b      	ldr	r3, [r7, #0]
 8022208:	681b      	ldr	r3, [r3, #0]
 802220a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802220e:	d102      	bne.n	8022216 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8022210:	2300      	movs	r3, #0
 8022212:	61fb      	str	r3, [r7, #28]
 8022214:	e023      	b.n	802225e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8022216:	687b      	ldr	r3, [r7, #4]
 8022218:	681a      	ldr	r2, [r3, #0]
 802221a:	4b15      	ldr	r3, [pc, #84]	; (8022270 <xTaskCheckForTimeOut+0xc0>)
 802221c:	681b      	ldr	r3, [r3, #0]
 802221e:	429a      	cmp	r2, r3
 8022220:	d007      	beq.n	8022232 <xTaskCheckForTimeOut+0x82>
 8022222:	687b      	ldr	r3, [r7, #4]
 8022224:	685b      	ldr	r3, [r3, #4]
 8022226:	69ba      	ldr	r2, [r7, #24]
 8022228:	429a      	cmp	r2, r3
 802222a:	d302      	bcc.n	8022232 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 802222c:	2301      	movs	r3, #1
 802222e:	61fb      	str	r3, [r7, #28]
 8022230:	e015      	b.n	802225e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8022232:	683b      	ldr	r3, [r7, #0]
 8022234:	681b      	ldr	r3, [r3, #0]
 8022236:	697a      	ldr	r2, [r7, #20]
 8022238:	429a      	cmp	r2, r3
 802223a:	d20b      	bcs.n	8022254 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 802223c:	683b      	ldr	r3, [r7, #0]
 802223e:	681a      	ldr	r2, [r3, #0]
 8022240:	697b      	ldr	r3, [r7, #20]
 8022242:	1ad2      	subs	r2, r2, r3
 8022244:	683b      	ldr	r3, [r7, #0]
 8022246:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8022248:	6878      	ldr	r0, [r7, #4]
 802224a:	f7ff ff9b 	bl	8022184 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 802224e:	2300      	movs	r3, #0
 8022250:	61fb      	str	r3, [r7, #28]
 8022252:	e004      	b.n	802225e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8022254:	683b      	ldr	r3, [r7, #0]
 8022256:	2200      	movs	r2, #0
 8022258:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 802225a:	2301      	movs	r3, #1
 802225c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 802225e:	f000 ffc1 	bl	80231e4 <vPortExitCritical>

	return xReturn;
 8022262:	69fb      	ldr	r3, [r7, #28]
}
 8022264:	4618      	mov	r0, r3
 8022266:	3720      	adds	r7, #32
 8022268:	46bd      	mov	sp, r7
 802226a:	bd80      	pop	{r7, pc}
 802226c:	2000220c 	.word	0x2000220c
 8022270:	20002220 	.word	0x20002220

08022274 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8022274:	b480      	push	{r7}
 8022276:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8022278:	4b03      	ldr	r3, [pc, #12]	; (8022288 <vTaskMissedYield+0x14>)
 802227a:	2201      	movs	r2, #1
 802227c:	601a      	str	r2, [r3, #0]
}
 802227e:	bf00      	nop
 8022280:	46bd      	mov	sp, r7
 8022282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022286:	4770      	bx	lr
 8022288:	2000221c 	.word	0x2000221c

0802228c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 802228c:	b580      	push	{r7, lr}
 802228e:	b082      	sub	sp, #8
 8022290:	af00      	add	r7, sp, #0
 8022292:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8022294:	f000 f852 	bl	802233c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8022298:	4b06      	ldr	r3, [pc, #24]	; (80222b4 <prvIdleTask+0x28>)
 802229a:	681b      	ldr	r3, [r3, #0]
 802229c:	2b01      	cmp	r3, #1
 802229e:	d9f9      	bls.n	8022294 <prvIdleTask+0x8>
			{
				taskYIELD();
 80222a0:	4b05      	ldr	r3, [pc, #20]	; (80222b8 <prvIdleTask+0x2c>)
 80222a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80222a6:	601a      	str	r2, [r3, #0]
 80222a8:	f3bf 8f4f 	dsb	sy
 80222ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80222b0:	e7f0      	b.n	8022294 <prvIdleTask+0x8>
 80222b2:	bf00      	nop
 80222b4:	20001d38 	.word	0x20001d38
 80222b8:	e000ed04 	.word	0xe000ed04

080222bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80222bc:	b580      	push	{r7, lr}
 80222be:	b082      	sub	sp, #8
 80222c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80222c2:	2300      	movs	r3, #0
 80222c4:	607b      	str	r3, [r7, #4]
 80222c6:	e00c      	b.n	80222e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80222c8:	687a      	ldr	r2, [r7, #4]
 80222ca:	4613      	mov	r3, r2
 80222cc:	009b      	lsls	r3, r3, #2
 80222ce:	4413      	add	r3, r2
 80222d0:	009b      	lsls	r3, r3, #2
 80222d2:	4a12      	ldr	r2, [pc, #72]	; (802231c <prvInitialiseTaskLists+0x60>)
 80222d4:	4413      	add	r3, r2
 80222d6:	4618      	mov	r0, r3
 80222d8:	f7fe f8f6 	bl	80204c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80222dc:	687b      	ldr	r3, [r7, #4]
 80222de:	3301      	adds	r3, #1
 80222e0:	607b      	str	r3, [r7, #4]
 80222e2:	687b      	ldr	r3, [r7, #4]
 80222e4:	2b37      	cmp	r3, #55	; 0x37
 80222e6:	d9ef      	bls.n	80222c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80222e8:	480d      	ldr	r0, [pc, #52]	; (8022320 <prvInitialiseTaskLists+0x64>)
 80222ea:	f7fe f8ed 	bl	80204c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80222ee:	480d      	ldr	r0, [pc, #52]	; (8022324 <prvInitialiseTaskLists+0x68>)
 80222f0:	f7fe f8ea 	bl	80204c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80222f4:	480c      	ldr	r0, [pc, #48]	; (8022328 <prvInitialiseTaskLists+0x6c>)
 80222f6:	f7fe f8e7 	bl	80204c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80222fa:	480c      	ldr	r0, [pc, #48]	; (802232c <prvInitialiseTaskLists+0x70>)
 80222fc:	f7fe f8e4 	bl	80204c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8022300:	480b      	ldr	r0, [pc, #44]	; (8022330 <prvInitialiseTaskLists+0x74>)
 8022302:	f7fe f8e1 	bl	80204c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8022306:	4b0b      	ldr	r3, [pc, #44]	; (8022334 <prvInitialiseTaskLists+0x78>)
 8022308:	4a05      	ldr	r2, [pc, #20]	; (8022320 <prvInitialiseTaskLists+0x64>)
 802230a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 802230c:	4b0a      	ldr	r3, [pc, #40]	; (8022338 <prvInitialiseTaskLists+0x7c>)
 802230e:	4a05      	ldr	r2, [pc, #20]	; (8022324 <prvInitialiseTaskLists+0x68>)
 8022310:	601a      	str	r2, [r3, #0]
}
 8022312:	bf00      	nop
 8022314:	3708      	adds	r7, #8
 8022316:	46bd      	mov	sp, r7
 8022318:	bd80      	pop	{r7, pc}
 802231a:	bf00      	nop
 802231c:	20001d38 	.word	0x20001d38
 8022320:	20002198 	.word	0x20002198
 8022324:	200021ac 	.word	0x200021ac
 8022328:	200021c8 	.word	0x200021c8
 802232c:	200021dc 	.word	0x200021dc
 8022330:	200021f4 	.word	0x200021f4
 8022334:	200021c0 	.word	0x200021c0
 8022338:	200021c4 	.word	0x200021c4

0802233c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 802233c:	b580      	push	{r7, lr}
 802233e:	b082      	sub	sp, #8
 8022340:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8022342:	e019      	b.n	8022378 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8022344:	f000 ff1e 	bl	8023184 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022348:	4b10      	ldr	r3, [pc, #64]	; (802238c <prvCheckTasksWaitingTermination+0x50>)
 802234a:	68db      	ldr	r3, [r3, #12]
 802234c:	68db      	ldr	r3, [r3, #12]
 802234e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8022350:	687b      	ldr	r3, [r7, #4]
 8022352:	3304      	adds	r3, #4
 8022354:	4618      	mov	r0, r3
 8022356:	f7fe f941 	bl	80205dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 802235a:	4b0d      	ldr	r3, [pc, #52]	; (8022390 <prvCheckTasksWaitingTermination+0x54>)
 802235c:	681b      	ldr	r3, [r3, #0]
 802235e:	3b01      	subs	r3, #1
 8022360:	4a0b      	ldr	r2, [pc, #44]	; (8022390 <prvCheckTasksWaitingTermination+0x54>)
 8022362:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8022364:	4b0b      	ldr	r3, [pc, #44]	; (8022394 <prvCheckTasksWaitingTermination+0x58>)
 8022366:	681b      	ldr	r3, [r3, #0]
 8022368:	3b01      	subs	r3, #1
 802236a:	4a0a      	ldr	r2, [pc, #40]	; (8022394 <prvCheckTasksWaitingTermination+0x58>)
 802236c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 802236e:	f000 ff39 	bl	80231e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8022372:	6878      	ldr	r0, [r7, #4]
 8022374:	f000 f848 	bl	8022408 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8022378:	4b06      	ldr	r3, [pc, #24]	; (8022394 <prvCheckTasksWaitingTermination+0x58>)
 802237a:	681b      	ldr	r3, [r3, #0]
 802237c:	2b00      	cmp	r3, #0
 802237e:	d1e1      	bne.n	8022344 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8022380:	bf00      	nop
 8022382:	bf00      	nop
 8022384:	3708      	adds	r7, #8
 8022386:	46bd      	mov	sp, r7
 8022388:	bd80      	pop	{r7, pc}
 802238a:	bf00      	nop
 802238c:	200021dc 	.word	0x200021dc
 8022390:	20002208 	.word	0x20002208
 8022394:	200021f0 	.word	0x200021f0

08022398 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8022398:	b480      	push	{r7}
 802239a:	b085      	sub	sp, #20
 802239c:	af00      	add	r7, sp, #0
 802239e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80223a0:	2300      	movs	r3, #0
 80223a2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80223a4:	e005      	b.n	80223b2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80223a6:	687b      	ldr	r3, [r7, #4]
 80223a8:	3301      	adds	r3, #1
 80223aa:	607b      	str	r3, [r7, #4]
			ulCount++;
 80223ac:	68fb      	ldr	r3, [r7, #12]
 80223ae:	3301      	adds	r3, #1
 80223b0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80223b2:	687b      	ldr	r3, [r7, #4]
 80223b4:	781b      	ldrb	r3, [r3, #0]
 80223b6:	2ba5      	cmp	r3, #165	; 0xa5
 80223b8:	d0f5      	beq.n	80223a6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80223ba:	68fb      	ldr	r3, [r7, #12]
 80223bc:	089b      	lsrs	r3, r3, #2
 80223be:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80223c0:	68fb      	ldr	r3, [r7, #12]
 80223c2:	b29b      	uxth	r3, r3
	}
 80223c4:	4618      	mov	r0, r3
 80223c6:	3714      	adds	r7, #20
 80223c8:	46bd      	mov	sp, r7
 80223ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223ce:	4770      	bx	lr

080223d0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80223d0:	b580      	push	{r7, lr}
 80223d2:	b086      	sub	sp, #24
 80223d4:	af00      	add	r7, sp, #0
 80223d6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80223d8:	687b      	ldr	r3, [r7, #4]
 80223da:	2b00      	cmp	r3, #0
 80223dc:	d102      	bne.n	80223e4 <uxTaskGetStackHighWaterMark+0x14>
 80223de:	4b09      	ldr	r3, [pc, #36]	; (8022404 <uxTaskGetStackHighWaterMark+0x34>)
 80223e0:	681b      	ldr	r3, [r3, #0]
 80223e2:	e000      	b.n	80223e6 <uxTaskGetStackHighWaterMark+0x16>
 80223e4:	687b      	ldr	r3, [r7, #4]
 80223e6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80223e8:	697b      	ldr	r3, [r7, #20]
 80223ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80223ec:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80223ee:	6938      	ldr	r0, [r7, #16]
 80223f0:	f7ff ffd2 	bl	8022398 <prvTaskCheckFreeStackSpace>
 80223f4:	4603      	mov	r3, r0
 80223f6:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80223f8:	68fb      	ldr	r3, [r7, #12]
	}
 80223fa:	4618      	mov	r0, r3
 80223fc:	3718      	adds	r7, #24
 80223fe:	46bd      	mov	sp, r7
 8022400:	bd80      	pop	{r7, pc}
 8022402:	bf00      	nop
 8022404:	20001d34 	.word	0x20001d34

08022408 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8022408:	b580      	push	{r7, lr}
 802240a:	b084      	sub	sp, #16
 802240c:	af00      	add	r7, sp, #0
 802240e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8022410:	687b      	ldr	r3, [r7, #4]
 8022412:	3358      	adds	r3, #88	; 0x58
 8022414:	4618      	mov	r0, r3
 8022416:	f00b fa5d 	bl	802d8d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 802241a:	687b      	ldr	r3, [r7, #4]
 802241c:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8022420:	2b00      	cmp	r3, #0
 8022422:	d108      	bne.n	8022436 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8022424:	687b      	ldr	r3, [r7, #4]
 8022426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022428:	4618      	mov	r0, r3
 802242a:	f001 f813 	bl	8023454 <vPortFree>
				vPortFree( pxTCB );
 802242e:	6878      	ldr	r0, [r7, #4]
 8022430:	f001 f810 	bl	8023454 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8022434:	e018      	b.n	8022468 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8022436:	687b      	ldr	r3, [r7, #4]
 8022438:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 802243c:	2b01      	cmp	r3, #1
 802243e:	d103      	bne.n	8022448 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8022440:	6878      	ldr	r0, [r7, #4]
 8022442:	f001 f807 	bl	8023454 <vPortFree>
	}
 8022446:	e00f      	b.n	8022468 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8022448:	687b      	ldr	r3, [r7, #4]
 802244a:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 802244e:	2b02      	cmp	r3, #2
 8022450:	d00a      	beq.n	8022468 <prvDeleteTCB+0x60>
	__asm volatile
 8022452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022456:	f383 8811 	msr	BASEPRI, r3
 802245a:	f3bf 8f6f 	isb	sy
 802245e:	f3bf 8f4f 	dsb	sy
 8022462:	60fb      	str	r3, [r7, #12]
}
 8022464:	bf00      	nop
 8022466:	e7fe      	b.n	8022466 <prvDeleteTCB+0x5e>
	}
 8022468:	bf00      	nop
 802246a:	3710      	adds	r7, #16
 802246c:	46bd      	mov	sp, r7
 802246e:	bd80      	pop	{r7, pc}

08022470 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8022470:	b480      	push	{r7}
 8022472:	b083      	sub	sp, #12
 8022474:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8022476:	4b0c      	ldr	r3, [pc, #48]	; (80224a8 <prvResetNextTaskUnblockTime+0x38>)
 8022478:	681b      	ldr	r3, [r3, #0]
 802247a:	681b      	ldr	r3, [r3, #0]
 802247c:	2b00      	cmp	r3, #0
 802247e:	d104      	bne.n	802248a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8022480:	4b0a      	ldr	r3, [pc, #40]	; (80224ac <prvResetNextTaskUnblockTime+0x3c>)
 8022482:	f04f 32ff 	mov.w	r2, #4294967295
 8022486:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8022488:	e008      	b.n	802249c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802248a:	4b07      	ldr	r3, [pc, #28]	; (80224a8 <prvResetNextTaskUnblockTime+0x38>)
 802248c:	681b      	ldr	r3, [r3, #0]
 802248e:	68db      	ldr	r3, [r3, #12]
 8022490:	68db      	ldr	r3, [r3, #12]
 8022492:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8022494:	687b      	ldr	r3, [r7, #4]
 8022496:	685b      	ldr	r3, [r3, #4]
 8022498:	4a04      	ldr	r2, [pc, #16]	; (80224ac <prvResetNextTaskUnblockTime+0x3c>)
 802249a:	6013      	str	r3, [r2, #0]
}
 802249c:	bf00      	nop
 802249e:	370c      	adds	r7, #12
 80224a0:	46bd      	mov	sp, r7
 80224a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224a6:	4770      	bx	lr
 80224a8:	200021c0 	.word	0x200021c0
 80224ac:	20002228 	.word	0x20002228

080224b0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80224b0:	b480      	push	{r7}
 80224b2:	b083      	sub	sp, #12
 80224b4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80224b6:	4b05      	ldr	r3, [pc, #20]	; (80224cc <xTaskGetCurrentTaskHandle+0x1c>)
 80224b8:	681b      	ldr	r3, [r3, #0]
 80224ba:	607b      	str	r3, [r7, #4]

		return xReturn;
 80224bc:	687b      	ldr	r3, [r7, #4]
	}
 80224be:	4618      	mov	r0, r3
 80224c0:	370c      	adds	r7, #12
 80224c2:	46bd      	mov	sp, r7
 80224c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224c8:	4770      	bx	lr
 80224ca:	bf00      	nop
 80224cc:	20001d34 	.word	0x20001d34

080224d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80224d0:	b480      	push	{r7}
 80224d2:	b083      	sub	sp, #12
 80224d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80224d6:	4b0b      	ldr	r3, [pc, #44]	; (8022504 <xTaskGetSchedulerState+0x34>)
 80224d8:	681b      	ldr	r3, [r3, #0]
 80224da:	2b00      	cmp	r3, #0
 80224dc:	d102      	bne.n	80224e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80224de:	2301      	movs	r3, #1
 80224e0:	607b      	str	r3, [r7, #4]
 80224e2:	e008      	b.n	80224f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80224e4:	4b08      	ldr	r3, [pc, #32]	; (8022508 <xTaskGetSchedulerState+0x38>)
 80224e6:	681b      	ldr	r3, [r3, #0]
 80224e8:	2b00      	cmp	r3, #0
 80224ea:	d102      	bne.n	80224f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80224ec:	2302      	movs	r3, #2
 80224ee:	607b      	str	r3, [r7, #4]
 80224f0:	e001      	b.n	80224f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80224f2:	2300      	movs	r3, #0
 80224f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80224f6:	687b      	ldr	r3, [r7, #4]
	}
 80224f8:	4618      	mov	r0, r3
 80224fa:	370c      	adds	r7, #12
 80224fc:	46bd      	mov	sp, r7
 80224fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022502:	4770      	bx	lr
 8022504:	20002214 	.word	0x20002214
 8022508:	20002230 	.word	0x20002230

0802250c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 802250c:	b580      	push	{r7, lr}
 802250e:	b084      	sub	sp, #16
 8022510:	af00      	add	r7, sp, #0
 8022512:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8022514:	687b      	ldr	r3, [r7, #4]
 8022516:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8022518:	2300      	movs	r3, #0
 802251a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 802251c:	687b      	ldr	r3, [r7, #4]
 802251e:	2b00      	cmp	r3, #0
 8022520:	d051      	beq.n	80225c6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8022522:	68bb      	ldr	r3, [r7, #8]
 8022524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022526:	4b2a      	ldr	r3, [pc, #168]	; (80225d0 <xTaskPriorityInherit+0xc4>)
 8022528:	681b      	ldr	r3, [r3, #0]
 802252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802252c:	429a      	cmp	r2, r3
 802252e:	d241      	bcs.n	80225b4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8022530:	68bb      	ldr	r3, [r7, #8]
 8022532:	699b      	ldr	r3, [r3, #24]
 8022534:	2b00      	cmp	r3, #0
 8022536:	db06      	blt.n	8022546 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022538:	4b25      	ldr	r3, [pc, #148]	; (80225d0 <xTaskPriorityInherit+0xc4>)
 802253a:	681b      	ldr	r3, [r3, #0]
 802253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802253e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8022542:	68bb      	ldr	r3, [r7, #8]
 8022544:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8022546:	68bb      	ldr	r3, [r7, #8]
 8022548:	6959      	ldr	r1, [r3, #20]
 802254a:	68bb      	ldr	r3, [r7, #8]
 802254c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802254e:	4613      	mov	r3, r2
 8022550:	009b      	lsls	r3, r3, #2
 8022552:	4413      	add	r3, r2
 8022554:	009b      	lsls	r3, r3, #2
 8022556:	4a1f      	ldr	r2, [pc, #124]	; (80225d4 <xTaskPriorityInherit+0xc8>)
 8022558:	4413      	add	r3, r2
 802255a:	4299      	cmp	r1, r3
 802255c:	d122      	bne.n	80225a4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802255e:	68bb      	ldr	r3, [r7, #8]
 8022560:	3304      	adds	r3, #4
 8022562:	4618      	mov	r0, r3
 8022564:	f7fe f83a 	bl	80205dc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8022568:	4b19      	ldr	r3, [pc, #100]	; (80225d0 <xTaskPriorityInherit+0xc4>)
 802256a:	681b      	ldr	r3, [r3, #0]
 802256c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802256e:	68bb      	ldr	r3, [r7, #8]
 8022570:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8022572:	68bb      	ldr	r3, [r7, #8]
 8022574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022576:	4b18      	ldr	r3, [pc, #96]	; (80225d8 <xTaskPriorityInherit+0xcc>)
 8022578:	681b      	ldr	r3, [r3, #0]
 802257a:	429a      	cmp	r2, r3
 802257c:	d903      	bls.n	8022586 <xTaskPriorityInherit+0x7a>
 802257e:	68bb      	ldr	r3, [r7, #8]
 8022580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022582:	4a15      	ldr	r2, [pc, #84]	; (80225d8 <xTaskPriorityInherit+0xcc>)
 8022584:	6013      	str	r3, [r2, #0]
 8022586:	68bb      	ldr	r3, [r7, #8]
 8022588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802258a:	4613      	mov	r3, r2
 802258c:	009b      	lsls	r3, r3, #2
 802258e:	4413      	add	r3, r2
 8022590:	009b      	lsls	r3, r3, #2
 8022592:	4a10      	ldr	r2, [pc, #64]	; (80225d4 <xTaskPriorityInherit+0xc8>)
 8022594:	441a      	add	r2, r3
 8022596:	68bb      	ldr	r3, [r7, #8]
 8022598:	3304      	adds	r3, #4
 802259a:	4619      	mov	r1, r3
 802259c:	4610      	mov	r0, r2
 802259e:	f7fd ffc0 	bl	8020522 <vListInsertEnd>
 80225a2:	e004      	b.n	80225ae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80225a4:	4b0a      	ldr	r3, [pc, #40]	; (80225d0 <xTaskPriorityInherit+0xc4>)
 80225a6:	681b      	ldr	r3, [r3, #0]
 80225a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80225aa:	68bb      	ldr	r3, [r7, #8]
 80225ac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80225ae:	2301      	movs	r3, #1
 80225b0:	60fb      	str	r3, [r7, #12]
 80225b2:	e008      	b.n	80225c6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80225b4:	68bb      	ldr	r3, [r7, #8]
 80225b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80225b8:	4b05      	ldr	r3, [pc, #20]	; (80225d0 <xTaskPriorityInherit+0xc4>)
 80225ba:	681b      	ldr	r3, [r3, #0]
 80225bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80225be:	429a      	cmp	r2, r3
 80225c0:	d201      	bcs.n	80225c6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80225c2:	2301      	movs	r3, #1
 80225c4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80225c6:	68fb      	ldr	r3, [r7, #12]
	}
 80225c8:	4618      	mov	r0, r3
 80225ca:	3710      	adds	r7, #16
 80225cc:	46bd      	mov	sp, r7
 80225ce:	bd80      	pop	{r7, pc}
 80225d0:	20001d34 	.word	0x20001d34
 80225d4:	20001d38 	.word	0x20001d38
 80225d8:	20002210 	.word	0x20002210

080225dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80225dc:	b580      	push	{r7, lr}
 80225de:	b086      	sub	sp, #24
 80225e0:	af00      	add	r7, sp, #0
 80225e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80225e4:	687b      	ldr	r3, [r7, #4]
 80225e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80225e8:	2300      	movs	r3, #0
 80225ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80225ec:	687b      	ldr	r3, [r7, #4]
 80225ee:	2b00      	cmp	r3, #0
 80225f0:	d056      	beq.n	80226a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80225f2:	4b2e      	ldr	r3, [pc, #184]	; (80226ac <xTaskPriorityDisinherit+0xd0>)
 80225f4:	681b      	ldr	r3, [r3, #0]
 80225f6:	693a      	ldr	r2, [r7, #16]
 80225f8:	429a      	cmp	r2, r3
 80225fa:	d00a      	beq.n	8022612 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80225fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022600:	f383 8811 	msr	BASEPRI, r3
 8022604:	f3bf 8f6f 	isb	sy
 8022608:	f3bf 8f4f 	dsb	sy
 802260c:	60fb      	str	r3, [r7, #12]
}
 802260e:	bf00      	nop
 8022610:	e7fe      	b.n	8022610 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8022612:	693b      	ldr	r3, [r7, #16]
 8022614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022616:	2b00      	cmp	r3, #0
 8022618:	d10a      	bne.n	8022630 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 802261a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802261e:	f383 8811 	msr	BASEPRI, r3
 8022622:	f3bf 8f6f 	isb	sy
 8022626:	f3bf 8f4f 	dsb	sy
 802262a:	60bb      	str	r3, [r7, #8]
}
 802262c:	bf00      	nop
 802262e:	e7fe      	b.n	802262e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8022630:	693b      	ldr	r3, [r7, #16]
 8022632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022634:	1e5a      	subs	r2, r3, #1
 8022636:	693b      	ldr	r3, [r7, #16]
 8022638:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 802263a:	693b      	ldr	r3, [r7, #16]
 802263c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802263e:	693b      	ldr	r3, [r7, #16]
 8022640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022642:	429a      	cmp	r2, r3
 8022644:	d02c      	beq.n	80226a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8022646:	693b      	ldr	r3, [r7, #16]
 8022648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802264a:	2b00      	cmp	r3, #0
 802264c:	d128      	bne.n	80226a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802264e:	693b      	ldr	r3, [r7, #16]
 8022650:	3304      	adds	r3, #4
 8022652:	4618      	mov	r0, r3
 8022654:	f7fd ffc2 	bl	80205dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8022658:	693b      	ldr	r3, [r7, #16]
 802265a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802265c:	693b      	ldr	r3, [r7, #16]
 802265e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022660:	693b      	ldr	r3, [r7, #16]
 8022662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022664:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8022668:	693b      	ldr	r3, [r7, #16]
 802266a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 802266c:	693b      	ldr	r3, [r7, #16]
 802266e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022670:	4b0f      	ldr	r3, [pc, #60]	; (80226b0 <xTaskPriorityDisinherit+0xd4>)
 8022672:	681b      	ldr	r3, [r3, #0]
 8022674:	429a      	cmp	r2, r3
 8022676:	d903      	bls.n	8022680 <xTaskPriorityDisinherit+0xa4>
 8022678:	693b      	ldr	r3, [r7, #16]
 802267a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802267c:	4a0c      	ldr	r2, [pc, #48]	; (80226b0 <xTaskPriorityDisinherit+0xd4>)
 802267e:	6013      	str	r3, [r2, #0]
 8022680:	693b      	ldr	r3, [r7, #16]
 8022682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022684:	4613      	mov	r3, r2
 8022686:	009b      	lsls	r3, r3, #2
 8022688:	4413      	add	r3, r2
 802268a:	009b      	lsls	r3, r3, #2
 802268c:	4a09      	ldr	r2, [pc, #36]	; (80226b4 <xTaskPriorityDisinherit+0xd8>)
 802268e:	441a      	add	r2, r3
 8022690:	693b      	ldr	r3, [r7, #16]
 8022692:	3304      	adds	r3, #4
 8022694:	4619      	mov	r1, r3
 8022696:	4610      	mov	r0, r2
 8022698:	f7fd ff43 	bl	8020522 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 802269c:	2301      	movs	r3, #1
 802269e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80226a0:	697b      	ldr	r3, [r7, #20]
	}
 80226a2:	4618      	mov	r0, r3
 80226a4:	3718      	adds	r7, #24
 80226a6:	46bd      	mov	sp, r7
 80226a8:	bd80      	pop	{r7, pc}
 80226aa:	bf00      	nop
 80226ac:	20001d34 	.word	0x20001d34
 80226b0:	20002210 	.word	0x20002210
 80226b4:	20001d38 	.word	0x20001d38

080226b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80226b8:	b580      	push	{r7, lr}
 80226ba:	b088      	sub	sp, #32
 80226bc:	af00      	add	r7, sp, #0
 80226be:	6078      	str	r0, [r7, #4]
 80226c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80226c2:	687b      	ldr	r3, [r7, #4]
 80226c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80226c6:	2301      	movs	r3, #1
 80226c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80226ca:	687b      	ldr	r3, [r7, #4]
 80226cc:	2b00      	cmp	r3, #0
 80226ce:	d06a      	beq.n	80227a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80226d0:	69bb      	ldr	r3, [r7, #24]
 80226d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80226d4:	2b00      	cmp	r3, #0
 80226d6:	d10a      	bne.n	80226ee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80226d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80226dc:	f383 8811 	msr	BASEPRI, r3
 80226e0:	f3bf 8f6f 	isb	sy
 80226e4:	f3bf 8f4f 	dsb	sy
 80226e8:	60fb      	str	r3, [r7, #12]
}
 80226ea:	bf00      	nop
 80226ec:	e7fe      	b.n	80226ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80226ee:	69bb      	ldr	r3, [r7, #24]
 80226f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80226f2:	683a      	ldr	r2, [r7, #0]
 80226f4:	429a      	cmp	r2, r3
 80226f6:	d902      	bls.n	80226fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80226f8:	683b      	ldr	r3, [r7, #0]
 80226fa:	61fb      	str	r3, [r7, #28]
 80226fc:	e002      	b.n	8022704 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80226fe:	69bb      	ldr	r3, [r7, #24]
 8022700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022702:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8022704:	69bb      	ldr	r3, [r7, #24]
 8022706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022708:	69fa      	ldr	r2, [r7, #28]
 802270a:	429a      	cmp	r2, r3
 802270c:	d04b      	beq.n	80227a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 802270e:	69bb      	ldr	r3, [r7, #24]
 8022710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022712:	697a      	ldr	r2, [r7, #20]
 8022714:	429a      	cmp	r2, r3
 8022716:	d146      	bne.n	80227a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8022718:	4b25      	ldr	r3, [pc, #148]	; (80227b0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 802271a:	681b      	ldr	r3, [r3, #0]
 802271c:	69ba      	ldr	r2, [r7, #24]
 802271e:	429a      	cmp	r2, r3
 8022720:	d10a      	bne.n	8022738 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8022722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022726:	f383 8811 	msr	BASEPRI, r3
 802272a:	f3bf 8f6f 	isb	sy
 802272e:	f3bf 8f4f 	dsb	sy
 8022732:	60bb      	str	r3, [r7, #8]
}
 8022734:	bf00      	nop
 8022736:	e7fe      	b.n	8022736 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8022738:	69bb      	ldr	r3, [r7, #24]
 802273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802273c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 802273e:	69bb      	ldr	r3, [r7, #24]
 8022740:	69fa      	ldr	r2, [r7, #28]
 8022742:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8022744:	69bb      	ldr	r3, [r7, #24]
 8022746:	699b      	ldr	r3, [r3, #24]
 8022748:	2b00      	cmp	r3, #0
 802274a:	db04      	blt.n	8022756 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802274c:	69fb      	ldr	r3, [r7, #28]
 802274e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8022752:	69bb      	ldr	r3, [r7, #24]
 8022754:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8022756:	69bb      	ldr	r3, [r7, #24]
 8022758:	6959      	ldr	r1, [r3, #20]
 802275a:	693a      	ldr	r2, [r7, #16]
 802275c:	4613      	mov	r3, r2
 802275e:	009b      	lsls	r3, r3, #2
 8022760:	4413      	add	r3, r2
 8022762:	009b      	lsls	r3, r3, #2
 8022764:	4a13      	ldr	r2, [pc, #76]	; (80227b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8022766:	4413      	add	r3, r2
 8022768:	4299      	cmp	r1, r3
 802276a:	d11c      	bne.n	80227a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802276c:	69bb      	ldr	r3, [r7, #24]
 802276e:	3304      	adds	r3, #4
 8022770:	4618      	mov	r0, r3
 8022772:	f7fd ff33 	bl	80205dc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8022776:	69bb      	ldr	r3, [r7, #24]
 8022778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802277a:	4b0f      	ldr	r3, [pc, #60]	; (80227b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 802277c:	681b      	ldr	r3, [r3, #0]
 802277e:	429a      	cmp	r2, r3
 8022780:	d903      	bls.n	802278a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8022782:	69bb      	ldr	r3, [r7, #24]
 8022784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022786:	4a0c      	ldr	r2, [pc, #48]	; (80227b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8022788:	6013      	str	r3, [r2, #0]
 802278a:	69bb      	ldr	r3, [r7, #24]
 802278c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802278e:	4613      	mov	r3, r2
 8022790:	009b      	lsls	r3, r3, #2
 8022792:	4413      	add	r3, r2
 8022794:	009b      	lsls	r3, r3, #2
 8022796:	4a07      	ldr	r2, [pc, #28]	; (80227b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8022798:	441a      	add	r2, r3
 802279a:	69bb      	ldr	r3, [r7, #24]
 802279c:	3304      	adds	r3, #4
 802279e:	4619      	mov	r1, r3
 80227a0:	4610      	mov	r0, r2
 80227a2:	f7fd febe 	bl	8020522 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80227a6:	bf00      	nop
 80227a8:	3720      	adds	r7, #32
 80227aa:	46bd      	mov	sp, r7
 80227ac:	bd80      	pop	{r7, pc}
 80227ae:	bf00      	nop
 80227b0:	20001d34 	.word	0x20001d34
 80227b4:	20001d38 	.word	0x20001d38
 80227b8:	20002210 	.word	0x20002210

080227bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80227bc:	b480      	push	{r7}
 80227be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80227c0:	4b07      	ldr	r3, [pc, #28]	; (80227e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80227c2:	681b      	ldr	r3, [r3, #0]
 80227c4:	2b00      	cmp	r3, #0
 80227c6:	d004      	beq.n	80227d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80227c8:	4b05      	ldr	r3, [pc, #20]	; (80227e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80227ca:	681b      	ldr	r3, [r3, #0]
 80227cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80227ce:	3201      	adds	r2, #1
 80227d0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80227d2:	4b03      	ldr	r3, [pc, #12]	; (80227e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80227d4:	681b      	ldr	r3, [r3, #0]
	}
 80227d6:	4618      	mov	r0, r3
 80227d8:	46bd      	mov	sp, r7
 80227da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227de:	4770      	bx	lr
 80227e0:	20001d34 	.word	0x20001d34

080227e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80227e4:	b580      	push	{r7, lr}
 80227e6:	b084      	sub	sp, #16
 80227e8:	af00      	add	r7, sp, #0
 80227ea:	6078      	str	r0, [r7, #4]
 80227ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80227ee:	4b21      	ldr	r3, [pc, #132]	; (8022874 <prvAddCurrentTaskToDelayedList+0x90>)
 80227f0:	681b      	ldr	r3, [r3, #0]
 80227f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80227f4:	4b20      	ldr	r3, [pc, #128]	; (8022878 <prvAddCurrentTaskToDelayedList+0x94>)
 80227f6:	681b      	ldr	r3, [r3, #0]
 80227f8:	3304      	adds	r3, #4
 80227fa:	4618      	mov	r0, r3
 80227fc:	f7fd feee 	bl	80205dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8022800:	687b      	ldr	r3, [r7, #4]
 8022802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022806:	d10a      	bne.n	802281e <prvAddCurrentTaskToDelayedList+0x3a>
 8022808:	683b      	ldr	r3, [r7, #0]
 802280a:	2b00      	cmp	r3, #0
 802280c:	d007      	beq.n	802281e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802280e:	4b1a      	ldr	r3, [pc, #104]	; (8022878 <prvAddCurrentTaskToDelayedList+0x94>)
 8022810:	681b      	ldr	r3, [r3, #0]
 8022812:	3304      	adds	r3, #4
 8022814:	4619      	mov	r1, r3
 8022816:	4819      	ldr	r0, [pc, #100]	; (802287c <prvAddCurrentTaskToDelayedList+0x98>)
 8022818:	f7fd fe83 	bl	8020522 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 802281c:	e026      	b.n	802286c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 802281e:	68fa      	ldr	r2, [r7, #12]
 8022820:	687b      	ldr	r3, [r7, #4]
 8022822:	4413      	add	r3, r2
 8022824:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8022826:	4b14      	ldr	r3, [pc, #80]	; (8022878 <prvAddCurrentTaskToDelayedList+0x94>)
 8022828:	681b      	ldr	r3, [r3, #0]
 802282a:	68ba      	ldr	r2, [r7, #8]
 802282c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 802282e:	68ba      	ldr	r2, [r7, #8]
 8022830:	68fb      	ldr	r3, [r7, #12]
 8022832:	429a      	cmp	r2, r3
 8022834:	d209      	bcs.n	802284a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8022836:	4b12      	ldr	r3, [pc, #72]	; (8022880 <prvAddCurrentTaskToDelayedList+0x9c>)
 8022838:	681a      	ldr	r2, [r3, #0]
 802283a:	4b0f      	ldr	r3, [pc, #60]	; (8022878 <prvAddCurrentTaskToDelayedList+0x94>)
 802283c:	681b      	ldr	r3, [r3, #0]
 802283e:	3304      	adds	r3, #4
 8022840:	4619      	mov	r1, r3
 8022842:	4610      	mov	r0, r2
 8022844:	f7fd fe91 	bl	802056a <vListInsert>
}
 8022848:	e010      	b.n	802286c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802284a:	4b0e      	ldr	r3, [pc, #56]	; (8022884 <prvAddCurrentTaskToDelayedList+0xa0>)
 802284c:	681a      	ldr	r2, [r3, #0]
 802284e:	4b0a      	ldr	r3, [pc, #40]	; (8022878 <prvAddCurrentTaskToDelayedList+0x94>)
 8022850:	681b      	ldr	r3, [r3, #0]
 8022852:	3304      	adds	r3, #4
 8022854:	4619      	mov	r1, r3
 8022856:	4610      	mov	r0, r2
 8022858:	f7fd fe87 	bl	802056a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 802285c:	4b0a      	ldr	r3, [pc, #40]	; (8022888 <prvAddCurrentTaskToDelayedList+0xa4>)
 802285e:	681b      	ldr	r3, [r3, #0]
 8022860:	68ba      	ldr	r2, [r7, #8]
 8022862:	429a      	cmp	r2, r3
 8022864:	d202      	bcs.n	802286c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8022866:	4a08      	ldr	r2, [pc, #32]	; (8022888 <prvAddCurrentTaskToDelayedList+0xa4>)
 8022868:	68bb      	ldr	r3, [r7, #8]
 802286a:	6013      	str	r3, [r2, #0]
}
 802286c:	bf00      	nop
 802286e:	3710      	adds	r7, #16
 8022870:	46bd      	mov	sp, r7
 8022872:	bd80      	pop	{r7, pc}
 8022874:	2000220c 	.word	0x2000220c
 8022878:	20001d34 	.word	0x20001d34
 802287c:	200021f4 	.word	0x200021f4
 8022880:	200021c4 	.word	0x200021c4
 8022884:	200021c0 	.word	0x200021c0
 8022888:	20002228 	.word	0x20002228

0802288c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 802288c:	b580      	push	{r7, lr}
 802288e:	b08a      	sub	sp, #40	; 0x28
 8022890:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8022892:	2300      	movs	r3, #0
 8022894:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8022896:	f000 fb07 	bl	8022ea8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 802289a:	4b1c      	ldr	r3, [pc, #112]	; (802290c <xTimerCreateTimerTask+0x80>)
 802289c:	681b      	ldr	r3, [r3, #0]
 802289e:	2b00      	cmp	r3, #0
 80228a0:	d021      	beq.n	80228e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80228a2:	2300      	movs	r3, #0
 80228a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80228a6:	2300      	movs	r3, #0
 80228a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80228aa:	1d3a      	adds	r2, r7, #4
 80228ac:	f107 0108 	add.w	r1, r7, #8
 80228b0:	f107 030c 	add.w	r3, r7, #12
 80228b4:	4618      	mov	r0, r3
 80228b6:	f7fd fded 	bl	8020494 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80228ba:	6879      	ldr	r1, [r7, #4]
 80228bc:	68bb      	ldr	r3, [r7, #8]
 80228be:	68fa      	ldr	r2, [r7, #12]
 80228c0:	9202      	str	r2, [sp, #8]
 80228c2:	9301      	str	r3, [sp, #4]
 80228c4:	2302      	movs	r3, #2
 80228c6:	9300      	str	r3, [sp, #0]
 80228c8:	2300      	movs	r3, #0
 80228ca:	460a      	mov	r2, r1
 80228cc:	4910      	ldr	r1, [pc, #64]	; (8022910 <xTimerCreateTimerTask+0x84>)
 80228ce:	4811      	ldr	r0, [pc, #68]	; (8022914 <xTimerCreateTimerTask+0x88>)
 80228d0:	f7fe ff4c 	bl	802176c <xTaskCreateStatic>
 80228d4:	4603      	mov	r3, r0
 80228d6:	4a10      	ldr	r2, [pc, #64]	; (8022918 <xTimerCreateTimerTask+0x8c>)
 80228d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80228da:	4b0f      	ldr	r3, [pc, #60]	; (8022918 <xTimerCreateTimerTask+0x8c>)
 80228dc:	681b      	ldr	r3, [r3, #0]
 80228de:	2b00      	cmp	r3, #0
 80228e0:	d001      	beq.n	80228e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80228e2:	2301      	movs	r3, #1
 80228e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80228e6:	697b      	ldr	r3, [r7, #20]
 80228e8:	2b00      	cmp	r3, #0
 80228ea:	d10a      	bne.n	8022902 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80228ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80228f0:	f383 8811 	msr	BASEPRI, r3
 80228f4:	f3bf 8f6f 	isb	sy
 80228f8:	f3bf 8f4f 	dsb	sy
 80228fc:	613b      	str	r3, [r7, #16]
}
 80228fe:	bf00      	nop
 8022900:	e7fe      	b.n	8022900 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8022902:	697b      	ldr	r3, [r7, #20]
}
 8022904:	4618      	mov	r0, r3
 8022906:	3718      	adds	r7, #24
 8022908:	46bd      	mov	sp, r7
 802290a:	bd80      	pop	{r7, pc}
 802290c:	2000226c 	.word	0x2000226c
 8022910:	080332e8 	.word	0x080332e8
 8022914:	08022a51 	.word	0x08022a51
 8022918:	20002270 	.word	0x20002270

0802291c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 802291c:	b580      	push	{r7, lr}
 802291e:	b08a      	sub	sp, #40	; 0x28
 8022920:	af00      	add	r7, sp, #0
 8022922:	60f8      	str	r0, [r7, #12]
 8022924:	60b9      	str	r1, [r7, #8]
 8022926:	607a      	str	r2, [r7, #4]
 8022928:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 802292a:	2300      	movs	r3, #0
 802292c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 802292e:	68fb      	ldr	r3, [r7, #12]
 8022930:	2b00      	cmp	r3, #0
 8022932:	d10a      	bne.n	802294a <xTimerGenericCommand+0x2e>
	__asm volatile
 8022934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022938:	f383 8811 	msr	BASEPRI, r3
 802293c:	f3bf 8f6f 	isb	sy
 8022940:	f3bf 8f4f 	dsb	sy
 8022944:	623b      	str	r3, [r7, #32]
}
 8022946:	bf00      	nop
 8022948:	e7fe      	b.n	8022948 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 802294a:	4b1a      	ldr	r3, [pc, #104]	; (80229b4 <xTimerGenericCommand+0x98>)
 802294c:	681b      	ldr	r3, [r3, #0]
 802294e:	2b00      	cmp	r3, #0
 8022950:	d02a      	beq.n	80229a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8022952:	68bb      	ldr	r3, [r7, #8]
 8022954:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8022956:	687b      	ldr	r3, [r7, #4]
 8022958:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 802295a:	68fb      	ldr	r3, [r7, #12]
 802295c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 802295e:	68bb      	ldr	r3, [r7, #8]
 8022960:	2b05      	cmp	r3, #5
 8022962:	dc18      	bgt.n	8022996 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8022964:	f7ff fdb4 	bl	80224d0 <xTaskGetSchedulerState>
 8022968:	4603      	mov	r3, r0
 802296a:	2b02      	cmp	r3, #2
 802296c:	d109      	bne.n	8022982 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 802296e:	4b11      	ldr	r3, [pc, #68]	; (80229b4 <xTimerGenericCommand+0x98>)
 8022970:	6818      	ldr	r0, [r3, #0]
 8022972:	f107 0110 	add.w	r1, r7, #16
 8022976:	2300      	movs	r3, #0
 8022978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802297a:	f7fe f84d 	bl	8020a18 <xQueueGenericSend>
 802297e:	6278      	str	r0, [r7, #36]	; 0x24
 8022980:	e012      	b.n	80229a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8022982:	4b0c      	ldr	r3, [pc, #48]	; (80229b4 <xTimerGenericCommand+0x98>)
 8022984:	6818      	ldr	r0, [r3, #0]
 8022986:	f107 0110 	add.w	r1, r7, #16
 802298a:	2300      	movs	r3, #0
 802298c:	2200      	movs	r2, #0
 802298e:	f7fe f843 	bl	8020a18 <xQueueGenericSend>
 8022992:	6278      	str	r0, [r7, #36]	; 0x24
 8022994:	e008      	b.n	80229a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8022996:	4b07      	ldr	r3, [pc, #28]	; (80229b4 <xTimerGenericCommand+0x98>)
 8022998:	6818      	ldr	r0, [r3, #0]
 802299a:	f107 0110 	add.w	r1, r7, #16
 802299e:	2300      	movs	r3, #0
 80229a0:	683a      	ldr	r2, [r7, #0]
 80229a2:	f7fe f937 	bl	8020c14 <xQueueGenericSendFromISR>
 80229a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80229a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80229aa:	4618      	mov	r0, r3
 80229ac:	3728      	adds	r7, #40	; 0x28
 80229ae:	46bd      	mov	sp, r7
 80229b0:	bd80      	pop	{r7, pc}
 80229b2:	bf00      	nop
 80229b4:	2000226c 	.word	0x2000226c

080229b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80229b8:	b580      	push	{r7, lr}
 80229ba:	b088      	sub	sp, #32
 80229bc:	af02      	add	r7, sp, #8
 80229be:	6078      	str	r0, [r7, #4]
 80229c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80229c2:	4b22      	ldr	r3, [pc, #136]	; (8022a4c <prvProcessExpiredTimer+0x94>)
 80229c4:	681b      	ldr	r3, [r3, #0]
 80229c6:	68db      	ldr	r3, [r3, #12]
 80229c8:	68db      	ldr	r3, [r3, #12]
 80229ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80229cc:	697b      	ldr	r3, [r7, #20]
 80229ce:	3304      	adds	r3, #4
 80229d0:	4618      	mov	r0, r3
 80229d2:	f7fd fe03 	bl	80205dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80229d6:	697b      	ldr	r3, [r7, #20]
 80229d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80229dc:	f003 0304 	and.w	r3, r3, #4
 80229e0:	2b00      	cmp	r3, #0
 80229e2:	d022      	beq.n	8022a2a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80229e4:	697b      	ldr	r3, [r7, #20]
 80229e6:	699a      	ldr	r2, [r3, #24]
 80229e8:	687b      	ldr	r3, [r7, #4]
 80229ea:	18d1      	adds	r1, r2, r3
 80229ec:	687b      	ldr	r3, [r7, #4]
 80229ee:	683a      	ldr	r2, [r7, #0]
 80229f0:	6978      	ldr	r0, [r7, #20]
 80229f2:	f000 f8d1 	bl	8022b98 <prvInsertTimerInActiveList>
 80229f6:	4603      	mov	r3, r0
 80229f8:	2b00      	cmp	r3, #0
 80229fa:	d01f      	beq.n	8022a3c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80229fc:	2300      	movs	r3, #0
 80229fe:	9300      	str	r3, [sp, #0]
 8022a00:	2300      	movs	r3, #0
 8022a02:	687a      	ldr	r2, [r7, #4]
 8022a04:	2100      	movs	r1, #0
 8022a06:	6978      	ldr	r0, [r7, #20]
 8022a08:	f7ff ff88 	bl	802291c <xTimerGenericCommand>
 8022a0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8022a0e:	693b      	ldr	r3, [r7, #16]
 8022a10:	2b00      	cmp	r3, #0
 8022a12:	d113      	bne.n	8022a3c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8022a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022a18:	f383 8811 	msr	BASEPRI, r3
 8022a1c:	f3bf 8f6f 	isb	sy
 8022a20:	f3bf 8f4f 	dsb	sy
 8022a24:	60fb      	str	r3, [r7, #12]
}
 8022a26:	bf00      	nop
 8022a28:	e7fe      	b.n	8022a28 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8022a2a:	697b      	ldr	r3, [r7, #20]
 8022a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022a30:	f023 0301 	bic.w	r3, r3, #1
 8022a34:	b2da      	uxtb	r2, r3
 8022a36:	697b      	ldr	r3, [r7, #20]
 8022a38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8022a3c:	697b      	ldr	r3, [r7, #20]
 8022a3e:	6a1b      	ldr	r3, [r3, #32]
 8022a40:	6978      	ldr	r0, [r7, #20]
 8022a42:	4798      	blx	r3
}
 8022a44:	bf00      	nop
 8022a46:	3718      	adds	r7, #24
 8022a48:	46bd      	mov	sp, r7
 8022a4a:	bd80      	pop	{r7, pc}
 8022a4c:	20002264 	.word	0x20002264

08022a50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8022a50:	b580      	push	{r7, lr}
 8022a52:	b084      	sub	sp, #16
 8022a54:	af00      	add	r7, sp, #0
 8022a56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8022a58:	f107 0308 	add.w	r3, r7, #8
 8022a5c:	4618      	mov	r0, r3
 8022a5e:	f000 f857 	bl	8022b10 <prvGetNextExpireTime>
 8022a62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8022a64:	68bb      	ldr	r3, [r7, #8]
 8022a66:	4619      	mov	r1, r3
 8022a68:	68f8      	ldr	r0, [r7, #12]
 8022a6a:	f000 f803 	bl	8022a74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8022a6e:	f000 f8d5 	bl	8022c1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8022a72:	e7f1      	b.n	8022a58 <prvTimerTask+0x8>

08022a74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8022a74:	b580      	push	{r7, lr}
 8022a76:	b084      	sub	sp, #16
 8022a78:	af00      	add	r7, sp, #0
 8022a7a:	6078      	str	r0, [r7, #4]
 8022a7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8022a7e:	f7ff f8d7 	bl	8021c30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8022a82:	f107 0308 	add.w	r3, r7, #8
 8022a86:	4618      	mov	r0, r3
 8022a88:	f000 f866 	bl	8022b58 <prvSampleTimeNow>
 8022a8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8022a8e:	68bb      	ldr	r3, [r7, #8]
 8022a90:	2b00      	cmp	r3, #0
 8022a92:	d130      	bne.n	8022af6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8022a94:	683b      	ldr	r3, [r7, #0]
 8022a96:	2b00      	cmp	r3, #0
 8022a98:	d10a      	bne.n	8022ab0 <prvProcessTimerOrBlockTask+0x3c>
 8022a9a:	687a      	ldr	r2, [r7, #4]
 8022a9c:	68fb      	ldr	r3, [r7, #12]
 8022a9e:	429a      	cmp	r2, r3
 8022aa0:	d806      	bhi.n	8022ab0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8022aa2:	f7ff f8d3 	bl	8021c4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8022aa6:	68f9      	ldr	r1, [r7, #12]
 8022aa8:	6878      	ldr	r0, [r7, #4]
 8022aaa:	f7ff ff85 	bl	80229b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8022aae:	e024      	b.n	8022afa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8022ab0:	683b      	ldr	r3, [r7, #0]
 8022ab2:	2b00      	cmp	r3, #0
 8022ab4:	d008      	beq.n	8022ac8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8022ab6:	4b13      	ldr	r3, [pc, #76]	; (8022b04 <prvProcessTimerOrBlockTask+0x90>)
 8022ab8:	681b      	ldr	r3, [r3, #0]
 8022aba:	681b      	ldr	r3, [r3, #0]
 8022abc:	2b00      	cmp	r3, #0
 8022abe:	d101      	bne.n	8022ac4 <prvProcessTimerOrBlockTask+0x50>
 8022ac0:	2301      	movs	r3, #1
 8022ac2:	e000      	b.n	8022ac6 <prvProcessTimerOrBlockTask+0x52>
 8022ac4:	2300      	movs	r3, #0
 8022ac6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8022ac8:	4b0f      	ldr	r3, [pc, #60]	; (8022b08 <prvProcessTimerOrBlockTask+0x94>)
 8022aca:	6818      	ldr	r0, [r3, #0]
 8022acc:	687a      	ldr	r2, [r7, #4]
 8022ace:	68fb      	ldr	r3, [r7, #12]
 8022ad0:	1ad3      	subs	r3, r2, r3
 8022ad2:	683a      	ldr	r2, [r7, #0]
 8022ad4:	4619      	mov	r1, r3
 8022ad6:	f7fe fe15 	bl	8021704 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8022ada:	f7ff f8b7 	bl	8021c4c <xTaskResumeAll>
 8022ade:	4603      	mov	r3, r0
 8022ae0:	2b00      	cmp	r3, #0
 8022ae2:	d10a      	bne.n	8022afa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8022ae4:	4b09      	ldr	r3, [pc, #36]	; (8022b0c <prvProcessTimerOrBlockTask+0x98>)
 8022ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8022aea:	601a      	str	r2, [r3, #0]
 8022aec:	f3bf 8f4f 	dsb	sy
 8022af0:	f3bf 8f6f 	isb	sy
}
 8022af4:	e001      	b.n	8022afa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8022af6:	f7ff f8a9 	bl	8021c4c <xTaskResumeAll>
}
 8022afa:	bf00      	nop
 8022afc:	3710      	adds	r7, #16
 8022afe:	46bd      	mov	sp, r7
 8022b00:	bd80      	pop	{r7, pc}
 8022b02:	bf00      	nop
 8022b04:	20002268 	.word	0x20002268
 8022b08:	2000226c 	.word	0x2000226c
 8022b0c:	e000ed04 	.word	0xe000ed04

08022b10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8022b10:	b480      	push	{r7}
 8022b12:	b085      	sub	sp, #20
 8022b14:	af00      	add	r7, sp, #0
 8022b16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8022b18:	4b0e      	ldr	r3, [pc, #56]	; (8022b54 <prvGetNextExpireTime+0x44>)
 8022b1a:	681b      	ldr	r3, [r3, #0]
 8022b1c:	681b      	ldr	r3, [r3, #0]
 8022b1e:	2b00      	cmp	r3, #0
 8022b20:	d101      	bne.n	8022b26 <prvGetNextExpireTime+0x16>
 8022b22:	2201      	movs	r2, #1
 8022b24:	e000      	b.n	8022b28 <prvGetNextExpireTime+0x18>
 8022b26:	2200      	movs	r2, #0
 8022b28:	687b      	ldr	r3, [r7, #4]
 8022b2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8022b2c:	687b      	ldr	r3, [r7, #4]
 8022b2e:	681b      	ldr	r3, [r3, #0]
 8022b30:	2b00      	cmp	r3, #0
 8022b32:	d105      	bne.n	8022b40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8022b34:	4b07      	ldr	r3, [pc, #28]	; (8022b54 <prvGetNextExpireTime+0x44>)
 8022b36:	681b      	ldr	r3, [r3, #0]
 8022b38:	68db      	ldr	r3, [r3, #12]
 8022b3a:	681b      	ldr	r3, [r3, #0]
 8022b3c:	60fb      	str	r3, [r7, #12]
 8022b3e:	e001      	b.n	8022b44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8022b40:	2300      	movs	r3, #0
 8022b42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8022b44:	68fb      	ldr	r3, [r7, #12]
}
 8022b46:	4618      	mov	r0, r3
 8022b48:	3714      	adds	r7, #20
 8022b4a:	46bd      	mov	sp, r7
 8022b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b50:	4770      	bx	lr
 8022b52:	bf00      	nop
 8022b54:	20002264 	.word	0x20002264

08022b58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8022b58:	b580      	push	{r7, lr}
 8022b5a:	b084      	sub	sp, #16
 8022b5c:	af00      	add	r7, sp, #0
 8022b5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8022b60:	f7ff f912 	bl	8021d88 <xTaskGetTickCount>
 8022b64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8022b66:	4b0b      	ldr	r3, [pc, #44]	; (8022b94 <prvSampleTimeNow+0x3c>)
 8022b68:	681b      	ldr	r3, [r3, #0]
 8022b6a:	68fa      	ldr	r2, [r7, #12]
 8022b6c:	429a      	cmp	r2, r3
 8022b6e:	d205      	bcs.n	8022b7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8022b70:	f000 f936 	bl	8022de0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8022b74:	687b      	ldr	r3, [r7, #4]
 8022b76:	2201      	movs	r2, #1
 8022b78:	601a      	str	r2, [r3, #0]
 8022b7a:	e002      	b.n	8022b82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8022b7c:	687b      	ldr	r3, [r7, #4]
 8022b7e:	2200      	movs	r2, #0
 8022b80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8022b82:	4a04      	ldr	r2, [pc, #16]	; (8022b94 <prvSampleTimeNow+0x3c>)
 8022b84:	68fb      	ldr	r3, [r7, #12]
 8022b86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8022b88:	68fb      	ldr	r3, [r7, #12]
}
 8022b8a:	4618      	mov	r0, r3
 8022b8c:	3710      	adds	r7, #16
 8022b8e:	46bd      	mov	sp, r7
 8022b90:	bd80      	pop	{r7, pc}
 8022b92:	bf00      	nop
 8022b94:	20002274 	.word	0x20002274

08022b98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8022b98:	b580      	push	{r7, lr}
 8022b9a:	b086      	sub	sp, #24
 8022b9c:	af00      	add	r7, sp, #0
 8022b9e:	60f8      	str	r0, [r7, #12]
 8022ba0:	60b9      	str	r1, [r7, #8]
 8022ba2:	607a      	str	r2, [r7, #4]
 8022ba4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8022ba6:	2300      	movs	r3, #0
 8022ba8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8022baa:	68fb      	ldr	r3, [r7, #12]
 8022bac:	68ba      	ldr	r2, [r7, #8]
 8022bae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8022bb0:	68fb      	ldr	r3, [r7, #12]
 8022bb2:	68fa      	ldr	r2, [r7, #12]
 8022bb4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8022bb6:	68ba      	ldr	r2, [r7, #8]
 8022bb8:	687b      	ldr	r3, [r7, #4]
 8022bba:	429a      	cmp	r2, r3
 8022bbc:	d812      	bhi.n	8022be4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022bbe:	687a      	ldr	r2, [r7, #4]
 8022bc0:	683b      	ldr	r3, [r7, #0]
 8022bc2:	1ad2      	subs	r2, r2, r3
 8022bc4:	68fb      	ldr	r3, [r7, #12]
 8022bc6:	699b      	ldr	r3, [r3, #24]
 8022bc8:	429a      	cmp	r2, r3
 8022bca:	d302      	bcc.n	8022bd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8022bcc:	2301      	movs	r3, #1
 8022bce:	617b      	str	r3, [r7, #20]
 8022bd0:	e01b      	b.n	8022c0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8022bd2:	4b10      	ldr	r3, [pc, #64]	; (8022c14 <prvInsertTimerInActiveList+0x7c>)
 8022bd4:	681a      	ldr	r2, [r3, #0]
 8022bd6:	68fb      	ldr	r3, [r7, #12]
 8022bd8:	3304      	adds	r3, #4
 8022bda:	4619      	mov	r1, r3
 8022bdc:	4610      	mov	r0, r2
 8022bde:	f7fd fcc4 	bl	802056a <vListInsert>
 8022be2:	e012      	b.n	8022c0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8022be4:	687a      	ldr	r2, [r7, #4]
 8022be6:	683b      	ldr	r3, [r7, #0]
 8022be8:	429a      	cmp	r2, r3
 8022bea:	d206      	bcs.n	8022bfa <prvInsertTimerInActiveList+0x62>
 8022bec:	68ba      	ldr	r2, [r7, #8]
 8022bee:	683b      	ldr	r3, [r7, #0]
 8022bf0:	429a      	cmp	r2, r3
 8022bf2:	d302      	bcc.n	8022bfa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8022bf4:	2301      	movs	r3, #1
 8022bf6:	617b      	str	r3, [r7, #20]
 8022bf8:	e007      	b.n	8022c0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8022bfa:	4b07      	ldr	r3, [pc, #28]	; (8022c18 <prvInsertTimerInActiveList+0x80>)
 8022bfc:	681a      	ldr	r2, [r3, #0]
 8022bfe:	68fb      	ldr	r3, [r7, #12]
 8022c00:	3304      	adds	r3, #4
 8022c02:	4619      	mov	r1, r3
 8022c04:	4610      	mov	r0, r2
 8022c06:	f7fd fcb0 	bl	802056a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8022c0a:	697b      	ldr	r3, [r7, #20]
}
 8022c0c:	4618      	mov	r0, r3
 8022c0e:	3718      	adds	r7, #24
 8022c10:	46bd      	mov	sp, r7
 8022c12:	bd80      	pop	{r7, pc}
 8022c14:	20002268 	.word	0x20002268
 8022c18:	20002264 	.word	0x20002264

08022c1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8022c1c:	b580      	push	{r7, lr}
 8022c1e:	b08e      	sub	sp, #56	; 0x38
 8022c20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8022c22:	e0ca      	b.n	8022dba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8022c24:	687b      	ldr	r3, [r7, #4]
 8022c26:	2b00      	cmp	r3, #0
 8022c28:	da18      	bge.n	8022c5c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8022c2a:	1d3b      	adds	r3, r7, #4
 8022c2c:	3304      	adds	r3, #4
 8022c2e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8022c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022c32:	2b00      	cmp	r3, #0
 8022c34:	d10a      	bne.n	8022c4c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8022c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022c3a:	f383 8811 	msr	BASEPRI, r3
 8022c3e:	f3bf 8f6f 	isb	sy
 8022c42:	f3bf 8f4f 	dsb	sy
 8022c46:	61fb      	str	r3, [r7, #28]
}
 8022c48:	bf00      	nop
 8022c4a:	e7fe      	b.n	8022c4a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8022c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022c4e:	681b      	ldr	r3, [r3, #0]
 8022c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022c52:	6850      	ldr	r0, [r2, #4]
 8022c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022c56:	6892      	ldr	r2, [r2, #8]
 8022c58:	4611      	mov	r1, r2
 8022c5a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8022c5c:	687b      	ldr	r3, [r7, #4]
 8022c5e:	2b00      	cmp	r3, #0
 8022c60:	f2c0 80ab 	blt.w	8022dba <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8022c64:	68fb      	ldr	r3, [r7, #12]
 8022c66:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8022c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022c6a:	695b      	ldr	r3, [r3, #20]
 8022c6c:	2b00      	cmp	r3, #0
 8022c6e:	d004      	beq.n	8022c7a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8022c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022c72:	3304      	adds	r3, #4
 8022c74:	4618      	mov	r0, r3
 8022c76:	f7fd fcb1 	bl	80205dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8022c7a:	463b      	mov	r3, r7
 8022c7c:	4618      	mov	r0, r3
 8022c7e:	f7ff ff6b 	bl	8022b58 <prvSampleTimeNow>
 8022c82:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8022c84:	687b      	ldr	r3, [r7, #4]
 8022c86:	2b09      	cmp	r3, #9
 8022c88:	f200 8096 	bhi.w	8022db8 <prvProcessReceivedCommands+0x19c>
 8022c8c:	a201      	add	r2, pc, #4	; (adr r2, 8022c94 <prvProcessReceivedCommands+0x78>)
 8022c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022c92:	bf00      	nop
 8022c94:	08022cbd 	.word	0x08022cbd
 8022c98:	08022cbd 	.word	0x08022cbd
 8022c9c:	08022cbd 	.word	0x08022cbd
 8022ca0:	08022d31 	.word	0x08022d31
 8022ca4:	08022d45 	.word	0x08022d45
 8022ca8:	08022d8f 	.word	0x08022d8f
 8022cac:	08022cbd 	.word	0x08022cbd
 8022cb0:	08022cbd 	.word	0x08022cbd
 8022cb4:	08022d31 	.word	0x08022d31
 8022cb8:	08022d45 	.word	0x08022d45
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8022cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022cbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022cc2:	f043 0301 	orr.w	r3, r3, #1
 8022cc6:	b2da      	uxtb	r2, r3
 8022cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022cca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8022cce:	68ba      	ldr	r2, [r7, #8]
 8022cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022cd2:	699b      	ldr	r3, [r3, #24]
 8022cd4:	18d1      	adds	r1, r2, r3
 8022cd6:	68bb      	ldr	r3, [r7, #8]
 8022cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022cda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022cdc:	f7ff ff5c 	bl	8022b98 <prvInsertTimerInActiveList>
 8022ce0:	4603      	mov	r3, r0
 8022ce2:	2b00      	cmp	r3, #0
 8022ce4:	d069      	beq.n	8022dba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8022ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022ce8:	6a1b      	ldr	r3, [r3, #32]
 8022cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022cec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8022cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022cf4:	f003 0304 	and.w	r3, r3, #4
 8022cf8:	2b00      	cmp	r3, #0
 8022cfa:	d05e      	beq.n	8022dba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8022cfc:	68ba      	ldr	r2, [r7, #8]
 8022cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d00:	699b      	ldr	r3, [r3, #24]
 8022d02:	441a      	add	r2, r3
 8022d04:	2300      	movs	r3, #0
 8022d06:	9300      	str	r3, [sp, #0]
 8022d08:	2300      	movs	r3, #0
 8022d0a:	2100      	movs	r1, #0
 8022d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022d0e:	f7ff fe05 	bl	802291c <xTimerGenericCommand>
 8022d12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8022d14:	6a3b      	ldr	r3, [r7, #32]
 8022d16:	2b00      	cmp	r3, #0
 8022d18:	d14f      	bne.n	8022dba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8022d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022d1e:	f383 8811 	msr	BASEPRI, r3
 8022d22:	f3bf 8f6f 	isb	sy
 8022d26:	f3bf 8f4f 	dsb	sy
 8022d2a:	61bb      	str	r3, [r7, #24]
}
 8022d2c:	bf00      	nop
 8022d2e:	e7fe      	b.n	8022d2e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8022d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022d36:	f023 0301 	bic.w	r3, r3, #1
 8022d3a:	b2da      	uxtb	r2, r3
 8022d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8022d42:	e03a      	b.n	8022dba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8022d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022d4a:	f043 0301 	orr.w	r3, r3, #1
 8022d4e:	b2da      	uxtb	r2, r3
 8022d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8022d56:	68ba      	ldr	r2, [r7, #8]
 8022d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d5a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8022d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d5e:	699b      	ldr	r3, [r3, #24]
 8022d60:	2b00      	cmp	r3, #0
 8022d62:	d10a      	bne.n	8022d7a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8022d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022d68:	f383 8811 	msr	BASEPRI, r3
 8022d6c:	f3bf 8f6f 	isb	sy
 8022d70:	f3bf 8f4f 	dsb	sy
 8022d74:	617b      	str	r3, [r7, #20]
}
 8022d76:	bf00      	nop
 8022d78:	e7fe      	b.n	8022d78 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8022d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d7c:	699a      	ldr	r2, [r3, #24]
 8022d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022d80:	18d1      	adds	r1, r2, r3
 8022d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022d88:	f7ff ff06 	bl	8022b98 <prvInsertTimerInActiveList>
					break;
 8022d8c:	e015      	b.n	8022dba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8022d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022d94:	f003 0302 	and.w	r3, r3, #2
 8022d98:	2b00      	cmp	r3, #0
 8022d9a:	d103      	bne.n	8022da4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8022d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022d9e:	f000 fb59 	bl	8023454 <vPortFree>
 8022da2:	e00a      	b.n	8022dba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8022da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022da6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022daa:	f023 0301 	bic.w	r3, r3, #1
 8022dae:	b2da      	uxtb	r2, r3
 8022db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022db2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8022db6:	e000      	b.n	8022dba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8022db8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8022dba:	4b08      	ldr	r3, [pc, #32]	; (8022ddc <prvProcessReceivedCommands+0x1c0>)
 8022dbc:	681b      	ldr	r3, [r3, #0]
 8022dbe:	1d39      	adds	r1, r7, #4
 8022dc0:	2200      	movs	r2, #0
 8022dc2:	4618      	mov	r0, r3
 8022dc4:	f7fd ffc2 	bl	8020d4c <xQueueReceive>
 8022dc8:	4603      	mov	r3, r0
 8022dca:	2b00      	cmp	r3, #0
 8022dcc:	f47f af2a 	bne.w	8022c24 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8022dd0:	bf00      	nop
 8022dd2:	bf00      	nop
 8022dd4:	3730      	adds	r7, #48	; 0x30
 8022dd6:	46bd      	mov	sp, r7
 8022dd8:	bd80      	pop	{r7, pc}
 8022dda:	bf00      	nop
 8022ddc:	2000226c 	.word	0x2000226c

08022de0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8022de0:	b580      	push	{r7, lr}
 8022de2:	b088      	sub	sp, #32
 8022de4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8022de6:	e048      	b.n	8022e7a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8022de8:	4b2d      	ldr	r3, [pc, #180]	; (8022ea0 <prvSwitchTimerLists+0xc0>)
 8022dea:	681b      	ldr	r3, [r3, #0]
 8022dec:	68db      	ldr	r3, [r3, #12]
 8022dee:	681b      	ldr	r3, [r3, #0]
 8022df0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022df2:	4b2b      	ldr	r3, [pc, #172]	; (8022ea0 <prvSwitchTimerLists+0xc0>)
 8022df4:	681b      	ldr	r3, [r3, #0]
 8022df6:	68db      	ldr	r3, [r3, #12]
 8022df8:	68db      	ldr	r3, [r3, #12]
 8022dfa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8022dfc:	68fb      	ldr	r3, [r7, #12]
 8022dfe:	3304      	adds	r3, #4
 8022e00:	4618      	mov	r0, r3
 8022e02:	f7fd fbeb 	bl	80205dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8022e06:	68fb      	ldr	r3, [r7, #12]
 8022e08:	6a1b      	ldr	r3, [r3, #32]
 8022e0a:	68f8      	ldr	r0, [r7, #12]
 8022e0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8022e0e:	68fb      	ldr	r3, [r7, #12]
 8022e10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022e14:	f003 0304 	and.w	r3, r3, #4
 8022e18:	2b00      	cmp	r3, #0
 8022e1a:	d02e      	beq.n	8022e7a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8022e1c:	68fb      	ldr	r3, [r7, #12]
 8022e1e:	699b      	ldr	r3, [r3, #24]
 8022e20:	693a      	ldr	r2, [r7, #16]
 8022e22:	4413      	add	r3, r2
 8022e24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8022e26:	68ba      	ldr	r2, [r7, #8]
 8022e28:	693b      	ldr	r3, [r7, #16]
 8022e2a:	429a      	cmp	r2, r3
 8022e2c:	d90e      	bls.n	8022e4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8022e2e:	68fb      	ldr	r3, [r7, #12]
 8022e30:	68ba      	ldr	r2, [r7, #8]
 8022e32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8022e34:	68fb      	ldr	r3, [r7, #12]
 8022e36:	68fa      	ldr	r2, [r7, #12]
 8022e38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8022e3a:	4b19      	ldr	r3, [pc, #100]	; (8022ea0 <prvSwitchTimerLists+0xc0>)
 8022e3c:	681a      	ldr	r2, [r3, #0]
 8022e3e:	68fb      	ldr	r3, [r7, #12]
 8022e40:	3304      	adds	r3, #4
 8022e42:	4619      	mov	r1, r3
 8022e44:	4610      	mov	r0, r2
 8022e46:	f7fd fb90 	bl	802056a <vListInsert>
 8022e4a:	e016      	b.n	8022e7a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8022e4c:	2300      	movs	r3, #0
 8022e4e:	9300      	str	r3, [sp, #0]
 8022e50:	2300      	movs	r3, #0
 8022e52:	693a      	ldr	r2, [r7, #16]
 8022e54:	2100      	movs	r1, #0
 8022e56:	68f8      	ldr	r0, [r7, #12]
 8022e58:	f7ff fd60 	bl	802291c <xTimerGenericCommand>
 8022e5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8022e5e:	687b      	ldr	r3, [r7, #4]
 8022e60:	2b00      	cmp	r3, #0
 8022e62:	d10a      	bne.n	8022e7a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8022e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022e68:	f383 8811 	msr	BASEPRI, r3
 8022e6c:	f3bf 8f6f 	isb	sy
 8022e70:	f3bf 8f4f 	dsb	sy
 8022e74:	603b      	str	r3, [r7, #0]
}
 8022e76:	bf00      	nop
 8022e78:	e7fe      	b.n	8022e78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8022e7a:	4b09      	ldr	r3, [pc, #36]	; (8022ea0 <prvSwitchTimerLists+0xc0>)
 8022e7c:	681b      	ldr	r3, [r3, #0]
 8022e7e:	681b      	ldr	r3, [r3, #0]
 8022e80:	2b00      	cmp	r3, #0
 8022e82:	d1b1      	bne.n	8022de8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8022e84:	4b06      	ldr	r3, [pc, #24]	; (8022ea0 <prvSwitchTimerLists+0xc0>)
 8022e86:	681b      	ldr	r3, [r3, #0]
 8022e88:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8022e8a:	4b06      	ldr	r3, [pc, #24]	; (8022ea4 <prvSwitchTimerLists+0xc4>)
 8022e8c:	681b      	ldr	r3, [r3, #0]
 8022e8e:	4a04      	ldr	r2, [pc, #16]	; (8022ea0 <prvSwitchTimerLists+0xc0>)
 8022e90:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8022e92:	4a04      	ldr	r2, [pc, #16]	; (8022ea4 <prvSwitchTimerLists+0xc4>)
 8022e94:	697b      	ldr	r3, [r7, #20]
 8022e96:	6013      	str	r3, [r2, #0]
}
 8022e98:	bf00      	nop
 8022e9a:	3718      	adds	r7, #24
 8022e9c:	46bd      	mov	sp, r7
 8022e9e:	bd80      	pop	{r7, pc}
 8022ea0:	20002264 	.word	0x20002264
 8022ea4:	20002268 	.word	0x20002268

08022ea8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8022ea8:	b580      	push	{r7, lr}
 8022eaa:	b082      	sub	sp, #8
 8022eac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8022eae:	f000 f969 	bl	8023184 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8022eb2:	4b15      	ldr	r3, [pc, #84]	; (8022f08 <prvCheckForValidListAndQueue+0x60>)
 8022eb4:	681b      	ldr	r3, [r3, #0]
 8022eb6:	2b00      	cmp	r3, #0
 8022eb8:	d120      	bne.n	8022efc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8022eba:	4814      	ldr	r0, [pc, #80]	; (8022f0c <prvCheckForValidListAndQueue+0x64>)
 8022ebc:	f7fd fb04 	bl	80204c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8022ec0:	4813      	ldr	r0, [pc, #76]	; (8022f10 <prvCheckForValidListAndQueue+0x68>)
 8022ec2:	f7fd fb01 	bl	80204c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8022ec6:	4b13      	ldr	r3, [pc, #76]	; (8022f14 <prvCheckForValidListAndQueue+0x6c>)
 8022ec8:	4a10      	ldr	r2, [pc, #64]	; (8022f0c <prvCheckForValidListAndQueue+0x64>)
 8022eca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8022ecc:	4b12      	ldr	r3, [pc, #72]	; (8022f18 <prvCheckForValidListAndQueue+0x70>)
 8022ece:	4a10      	ldr	r2, [pc, #64]	; (8022f10 <prvCheckForValidListAndQueue+0x68>)
 8022ed0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8022ed2:	2300      	movs	r3, #0
 8022ed4:	9300      	str	r3, [sp, #0]
 8022ed6:	4b11      	ldr	r3, [pc, #68]	; (8022f1c <prvCheckForValidListAndQueue+0x74>)
 8022ed8:	4a11      	ldr	r2, [pc, #68]	; (8022f20 <prvCheckForValidListAndQueue+0x78>)
 8022eda:	2110      	movs	r1, #16
 8022edc:	200a      	movs	r0, #10
 8022ede:	f7fd fc0f 	bl	8020700 <xQueueGenericCreateStatic>
 8022ee2:	4603      	mov	r3, r0
 8022ee4:	4a08      	ldr	r2, [pc, #32]	; (8022f08 <prvCheckForValidListAndQueue+0x60>)
 8022ee6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8022ee8:	4b07      	ldr	r3, [pc, #28]	; (8022f08 <prvCheckForValidListAndQueue+0x60>)
 8022eea:	681b      	ldr	r3, [r3, #0]
 8022eec:	2b00      	cmp	r3, #0
 8022eee:	d005      	beq.n	8022efc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8022ef0:	4b05      	ldr	r3, [pc, #20]	; (8022f08 <prvCheckForValidListAndQueue+0x60>)
 8022ef2:	681b      	ldr	r3, [r3, #0]
 8022ef4:	490b      	ldr	r1, [pc, #44]	; (8022f24 <prvCheckForValidListAndQueue+0x7c>)
 8022ef6:	4618      	mov	r0, r3
 8022ef8:	f7fe fbda 	bl	80216b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8022efc:	f000 f972 	bl	80231e4 <vPortExitCritical>
}
 8022f00:	bf00      	nop
 8022f02:	46bd      	mov	sp, r7
 8022f04:	bd80      	pop	{r7, pc}
 8022f06:	bf00      	nop
 8022f08:	2000226c 	.word	0x2000226c
 8022f0c:	2000223c 	.word	0x2000223c
 8022f10:	20002250 	.word	0x20002250
 8022f14:	20002264 	.word	0x20002264
 8022f18:	20002268 	.word	0x20002268
 8022f1c:	20002318 	.word	0x20002318
 8022f20:	20002278 	.word	0x20002278
 8022f24:	080332f0 	.word	0x080332f0

08022f28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8022f28:	b480      	push	{r7}
 8022f2a:	b085      	sub	sp, #20
 8022f2c:	af00      	add	r7, sp, #0
 8022f2e:	60f8      	str	r0, [r7, #12]
 8022f30:	60b9      	str	r1, [r7, #8]
 8022f32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8022f34:	68fb      	ldr	r3, [r7, #12]
 8022f36:	3b04      	subs	r3, #4
 8022f38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8022f3a:	68fb      	ldr	r3, [r7, #12]
 8022f3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8022f40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8022f42:	68fb      	ldr	r3, [r7, #12]
 8022f44:	3b04      	subs	r3, #4
 8022f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8022f48:	68bb      	ldr	r3, [r7, #8]
 8022f4a:	f023 0201 	bic.w	r2, r3, #1
 8022f4e:	68fb      	ldr	r3, [r7, #12]
 8022f50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8022f52:	68fb      	ldr	r3, [r7, #12]
 8022f54:	3b04      	subs	r3, #4
 8022f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8022f58:	4a0c      	ldr	r2, [pc, #48]	; (8022f8c <pxPortInitialiseStack+0x64>)
 8022f5a:	68fb      	ldr	r3, [r7, #12]
 8022f5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8022f5e:	68fb      	ldr	r3, [r7, #12]
 8022f60:	3b14      	subs	r3, #20
 8022f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8022f64:	687a      	ldr	r2, [r7, #4]
 8022f66:	68fb      	ldr	r3, [r7, #12]
 8022f68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8022f6a:	68fb      	ldr	r3, [r7, #12]
 8022f6c:	3b04      	subs	r3, #4
 8022f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8022f70:	68fb      	ldr	r3, [r7, #12]
 8022f72:	f06f 0202 	mvn.w	r2, #2
 8022f76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8022f78:	68fb      	ldr	r3, [r7, #12]
 8022f7a:	3b20      	subs	r3, #32
 8022f7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8022f7e:	68fb      	ldr	r3, [r7, #12]
}
 8022f80:	4618      	mov	r0, r3
 8022f82:	3714      	adds	r7, #20
 8022f84:	46bd      	mov	sp, r7
 8022f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f8a:	4770      	bx	lr
 8022f8c:	08022f91 	.word	0x08022f91

08022f90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8022f90:	b480      	push	{r7}
 8022f92:	b085      	sub	sp, #20
 8022f94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8022f96:	2300      	movs	r3, #0
 8022f98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8022f9a:	4b12      	ldr	r3, [pc, #72]	; (8022fe4 <prvTaskExitError+0x54>)
 8022f9c:	681b      	ldr	r3, [r3, #0]
 8022f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022fa2:	d00a      	beq.n	8022fba <prvTaskExitError+0x2a>
	__asm volatile
 8022fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022fa8:	f383 8811 	msr	BASEPRI, r3
 8022fac:	f3bf 8f6f 	isb	sy
 8022fb0:	f3bf 8f4f 	dsb	sy
 8022fb4:	60fb      	str	r3, [r7, #12]
}
 8022fb6:	bf00      	nop
 8022fb8:	e7fe      	b.n	8022fb8 <prvTaskExitError+0x28>
	__asm volatile
 8022fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022fbe:	f383 8811 	msr	BASEPRI, r3
 8022fc2:	f3bf 8f6f 	isb	sy
 8022fc6:	f3bf 8f4f 	dsb	sy
 8022fca:	60bb      	str	r3, [r7, #8]
}
 8022fcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8022fce:	bf00      	nop
 8022fd0:	687b      	ldr	r3, [r7, #4]
 8022fd2:	2b00      	cmp	r3, #0
 8022fd4:	d0fc      	beq.n	8022fd0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8022fd6:	bf00      	nop
 8022fd8:	bf00      	nop
 8022fda:	3714      	adds	r7, #20
 8022fdc:	46bd      	mov	sp, r7
 8022fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022fe2:	4770      	bx	lr
 8022fe4:	20000128 	.word	0x20000128
	...

08022ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8022ff0:	4b07      	ldr	r3, [pc, #28]	; (8023010 <pxCurrentTCBConst2>)
 8022ff2:	6819      	ldr	r1, [r3, #0]
 8022ff4:	6808      	ldr	r0, [r1, #0]
 8022ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ffa:	f380 8809 	msr	PSP, r0
 8022ffe:	f3bf 8f6f 	isb	sy
 8023002:	f04f 0000 	mov.w	r0, #0
 8023006:	f380 8811 	msr	BASEPRI, r0
 802300a:	4770      	bx	lr
 802300c:	f3af 8000 	nop.w

08023010 <pxCurrentTCBConst2>:
 8023010:	20001d34 	.word	0x20001d34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8023014:	bf00      	nop
 8023016:	bf00      	nop

08023018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8023018:	4808      	ldr	r0, [pc, #32]	; (802303c <prvPortStartFirstTask+0x24>)
 802301a:	6800      	ldr	r0, [r0, #0]
 802301c:	6800      	ldr	r0, [r0, #0]
 802301e:	f380 8808 	msr	MSP, r0
 8023022:	f04f 0000 	mov.w	r0, #0
 8023026:	f380 8814 	msr	CONTROL, r0
 802302a:	b662      	cpsie	i
 802302c:	b661      	cpsie	f
 802302e:	f3bf 8f4f 	dsb	sy
 8023032:	f3bf 8f6f 	isb	sy
 8023036:	df00      	svc	0
 8023038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 802303a:	bf00      	nop
 802303c:	e000ed08 	.word	0xe000ed08

08023040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8023040:	b580      	push	{r7, lr}
 8023042:	b086      	sub	sp, #24
 8023044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8023046:	4b46      	ldr	r3, [pc, #280]	; (8023160 <xPortStartScheduler+0x120>)
 8023048:	681b      	ldr	r3, [r3, #0]
 802304a:	4a46      	ldr	r2, [pc, #280]	; (8023164 <xPortStartScheduler+0x124>)
 802304c:	4293      	cmp	r3, r2
 802304e:	d10a      	bne.n	8023066 <xPortStartScheduler+0x26>
	__asm volatile
 8023050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023054:	f383 8811 	msr	BASEPRI, r3
 8023058:	f3bf 8f6f 	isb	sy
 802305c:	f3bf 8f4f 	dsb	sy
 8023060:	613b      	str	r3, [r7, #16]
}
 8023062:	bf00      	nop
 8023064:	e7fe      	b.n	8023064 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8023066:	4b3e      	ldr	r3, [pc, #248]	; (8023160 <xPortStartScheduler+0x120>)
 8023068:	681b      	ldr	r3, [r3, #0]
 802306a:	4a3f      	ldr	r2, [pc, #252]	; (8023168 <xPortStartScheduler+0x128>)
 802306c:	4293      	cmp	r3, r2
 802306e:	d10a      	bne.n	8023086 <xPortStartScheduler+0x46>
	__asm volatile
 8023070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023074:	f383 8811 	msr	BASEPRI, r3
 8023078:	f3bf 8f6f 	isb	sy
 802307c:	f3bf 8f4f 	dsb	sy
 8023080:	60fb      	str	r3, [r7, #12]
}
 8023082:	bf00      	nop
 8023084:	e7fe      	b.n	8023084 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8023086:	4b39      	ldr	r3, [pc, #228]	; (802316c <xPortStartScheduler+0x12c>)
 8023088:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 802308a:	697b      	ldr	r3, [r7, #20]
 802308c:	781b      	ldrb	r3, [r3, #0]
 802308e:	b2db      	uxtb	r3, r3
 8023090:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8023092:	697b      	ldr	r3, [r7, #20]
 8023094:	22ff      	movs	r2, #255	; 0xff
 8023096:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8023098:	697b      	ldr	r3, [r7, #20]
 802309a:	781b      	ldrb	r3, [r3, #0]
 802309c:	b2db      	uxtb	r3, r3
 802309e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80230a0:	78fb      	ldrb	r3, [r7, #3]
 80230a2:	b2db      	uxtb	r3, r3
 80230a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80230a8:	b2da      	uxtb	r2, r3
 80230aa:	4b31      	ldr	r3, [pc, #196]	; (8023170 <xPortStartScheduler+0x130>)
 80230ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80230ae:	4b31      	ldr	r3, [pc, #196]	; (8023174 <xPortStartScheduler+0x134>)
 80230b0:	2207      	movs	r2, #7
 80230b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80230b4:	e009      	b.n	80230ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80230b6:	4b2f      	ldr	r3, [pc, #188]	; (8023174 <xPortStartScheduler+0x134>)
 80230b8:	681b      	ldr	r3, [r3, #0]
 80230ba:	3b01      	subs	r3, #1
 80230bc:	4a2d      	ldr	r2, [pc, #180]	; (8023174 <xPortStartScheduler+0x134>)
 80230be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80230c0:	78fb      	ldrb	r3, [r7, #3]
 80230c2:	b2db      	uxtb	r3, r3
 80230c4:	005b      	lsls	r3, r3, #1
 80230c6:	b2db      	uxtb	r3, r3
 80230c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80230ca:	78fb      	ldrb	r3, [r7, #3]
 80230cc:	b2db      	uxtb	r3, r3
 80230ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80230d2:	2b80      	cmp	r3, #128	; 0x80
 80230d4:	d0ef      	beq.n	80230b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80230d6:	4b27      	ldr	r3, [pc, #156]	; (8023174 <xPortStartScheduler+0x134>)
 80230d8:	681b      	ldr	r3, [r3, #0]
 80230da:	f1c3 0307 	rsb	r3, r3, #7
 80230de:	2b04      	cmp	r3, #4
 80230e0:	d00a      	beq.n	80230f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80230e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80230e6:	f383 8811 	msr	BASEPRI, r3
 80230ea:	f3bf 8f6f 	isb	sy
 80230ee:	f3bf 8f4f 	dsb	sy
 80230f2:	60bb      	str	r3, [r7, #8]
}
 80230f4:	bf00      	nop
 80230f6:	e7fe      	b.n	80230f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80230f8:	4b1e      	ldr	r3, [pc, #120]	; (8023174 <xPortStartScheduler+0x134>)
 80230fa:	681b      	ldr	r3, [r3, #0]
 80230fc:	021b      	lsls	r3, r3, #8
 80230fe:	4a1d      	ldr	r2, [pc, #116]	; (8023174 <xPortStartScheduler+0x134>)
 8023100:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8023102:	4b1c      	ldr	r3, [pc, #112]	; (8023174 <xPortStartScheduler+0x134>)
 8023104:	681b      	ldr	r3, [r3, #0]
 8023106:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 802310a:	4a1a      	ldr	r2, [pc, #104]	; (8023174 <xPortStartScheduler+0x134>)
 802310c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 802310e:	687b      	ldr	r3, [r7, #4]
 8023110:	b2da      	uxtb	r2, r3
 8023112:	697b      	ldr	r3, [r7, #20]
 8023114:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8023116:	4b18      	ldr	r3, [pc, #96]	; (8023178 <xPortStartScheduler+0x138>)
 8023118:	681b      	ldr	r3, [r3, #0]
 802311a:	4a17      	ldr	r2, [pc, #92]	; (8023178 <xPortStartScheduler+0x138>)
 802311c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8023120:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8023122:	4b15      	ldr	r3, [pc, #84]	; (8023178 <xPortStartScheduler+0x138>)
 8023124:	681b      	ldr	r3, [r3, #0]
 8023126:	4a14      	ldr	r2, [pc, #80]	; (8023178 <xPortStartScheduler+0x138>)
 8023128:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 802312c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 802312e:	f000 f8dd 	bl	80232ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8023132:	4b12      	ldr	r3, [pc, #72]	; (802317c <xPortStartScheduler+0x13c>)
 8023134:	2200      	movs	r2, #0
 8023136:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8023138:	f000 f8fc 	bl	8023334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 802313c:	4b10      	ldr	r3, [pc, #64]	; (8023180 <xPortStartScheduler+0x140>)
 802313e:	681b      	ldr	r3, [r3, #0]
 8023140:	4a0f      	ldr	r2, [pc, #60]	; (8023180 <xPortStartScheduler+0x140>)
 8023142:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8023146:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8023148:	f7ff ff66 	bl	8023018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 802314c:	f7fe fee6 	bl	8021f1c <vTaskSwitchContext>
	prvTaskExitError();
 8023150:	f7ff ff1e 	bl	8022f90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8023154:	2300      	movs	r3, #0
}
 8023156:	4618      	mov	r0, r3
 8023158:	3718      	adds	r7, #24
 802315a:	46bd      	mov	sp, r7
 802315c:	bd80      	pop	{r7, pc}
 802315e:	bf00      	nop
 8023160:	e000ed00 	.word	0xe000ed00
 8023164:	410fc271 	.word	0x410fc271
 8023168:	410fc270 	.word	0x410fc270
 802316c:	e000e400 	.word	0xe000e400
 8023170:	20002368 	.word	0x20002368
 8023174:	2000236c 	.word	0x2000236c
 8023178:	e000ed20 	.word	0xe000ed20
 802317c:	20000128 	.word	0x20000128
 8023180:	e000ef34 	.word	0xe000ef34

08023184 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8023184:	b480      	push	{r7}
 8023186:	b083      	sub	sp, #12
 8023188:	af00      	add	r7, sp, #0
	__asm volatile
 802318a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802318e:	f383 8811 	msr	BASEPRI, r3
 8023192:	f3bf 8f6f 	isb	sy
 8023196:	f3bf 8f4f 	dsb	sy
 802319a:	607b      	str	r3, [r7, #4]
}
 802319c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 802319e:	4b0f      	ldr	r3, [pc, #60]	; (80231dc <vPortEnterCritical+0x58>)
 80231a0:	681b      	ldr	r3, [r3, #0]
 80231a2:	3301      	adds	r3, #1
 80231a4:	4a0d      	ldr	r2, [pc, #52]	; (80231dc <vPortEnterCritical+0x58>)
 80231a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80231a8:	4b0c      	ldr	r3, [pc, #48]	; (80231dc <vPortEnterCritical+0x58>)
 80231aa:	681b      	ldr	r3, [r3, #0]
 80231ac:	2b01      	cmp	r3, #1
 80231ae:	d10f      	bne.n	80231d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80231b0:	4b0b      	ldr	r3, [pc, #44]	; (80231e0 <vPortEnterCritical+0x5c>)
 80231b2:	681b      	ldr	r3, [r3, #0]
 80231b4:	b2db      	uxtb	r3, r3
 80231b6:	2b00      	cmp	r3, #0
 80231b8:	d00a      	beq.n	80231d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80231ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80231be:	f383 8811 	msr	BASEPRI, r3
 80231c2:	f3bf 8f6f 	isb	sy
 80231c6:	f3bf 8f4f 	dsb	sy
 80231ca:	603b      	str	r3, [r7, #0]
}
 80231cc:	bf00      	nop
 80231ce:	e7fe      	b.n	80231ce <vPortEnterCritical+0x4a>
	}
}
 80231d0:	bf00      	nop
 80231d2:	370c      	adds	r7, #12
 80231d4:	46bd      	mov	sp, r7
 80231d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80231da:	4770      	bx	lr
 80231dc:	20000128 	.word	0x20000128
 80231e0:	e000ed04 	.word	0xe000ed04

080231e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80231e4:	b480      	push	{r7}
 80231e6:	b083      	sub	sp, #12
 80231e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80231ea:	4b12      	ldr	r3, [pc, #72]	; (8023234 <vPortExitCritical+0x50>)
 80231ec:	681b      	ldr	r3, [r3, #0]
 80231ee:	2b00      	cmp	r3, #0
 80231f0:	d10a      	bne.n	8023208 <vPortExitCritical+0x24>
	__asm volatile
 80231f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80231f6:	f383 8811 	msr	BASEPRI, r3
 80231fa:	f3bf 8f6f 	isb	sy
 80231fe:	f3bf 8f4f 	dsb	sy
 8023202:	607b      	str	r3, [r7, #4]
}
 8023204:	bf00      	nop
 8023206:	e7fe      	b.n	8023206 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8023208:	4b0a      	ldr	r3, [pc, #40]	; (8023234 <vPortExitCritical+0x50>)
 802320a:	681b      	ldr	r3, [r3, #0]
 802320c:	3b01      	subs	r3, #1
 802320e:	4a09      	ldr	r2, [pc, #36]	; (8023234 <vPortExitCritical+0x50>)
 8023210:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8023212:	4b08      	ldr	r3, [pc, #32]	; (8023234 <vPortExitCritical+0x50>)
 8023214:	681b      	ldr	r3, [r3, #0]
 8023216:	2b00      	cmp	r3, #0
 8023218:	d105      	bne.n	8023226 <vPortExitCritical+0x42>
 802321a:	2300      	movs	r3, #0
 802321c:	603b      	str	r3, [r7, #0]
	__asm volatile
 802321e:	683b      	ldr	r3, [r7, #0]
 8023220:	f383 8811 	msr	BASEPRI, r3
}
 8023224:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8023226:	bf00      	nop
 8023228:	370c      	adds	r7, #12
 802322a:	46bd      	mov	sp, r7
 802322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023230:	4770      	bx	lr
 8023232:	bf00      	nop
 8023234:	20000128 	.word	0x20000128
	...

08023240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8023240:	f3ef 8009 	mrs	r0, PSP
 8023244:	f3bf 8f6f 	isb	sy
 8023248:	4b15      	ldr	r3, [pc, #84]	; (80232a0 <pxCurrentTCBConst>)
 802324a:	681a      	ldr	r2, [r3, #0]
 802324c:	f01e 0f10 	tst.w	lr, #16
 8023250:	bf08      	it	eq
 8023252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8023256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802325a:	6010      	str	r0, [r2, #0]
 802325c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8023260:	f04f 0050 	mov.w	r0, #80	; 0x50
 8023264:	f380 8811 	msr	BASEPRI, r0
 8023268:	f3bf 8f4f 	dsb	sy
 802326c:	f3bf 8f6f 	isb	sy
 8023270:	f7fe fe54 	bl	8021f1c <vTaskSwitchContext>
 8023274:	f04f 0000 	mov.w	r0, #0
 8023278:	f380 8811 	msr	BASEPRI, r0
 802327c:	bc09      	pop	{r0, r3}
 802327e:	6819      	ldr	r1, [r3, #0]
 8023280:	6808      	ldr	r0, [r1, #0]
 8023282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023286:	f01e 0f10 	tst.w	lr, #16
 802328a:	bf08      	it	eq
 802328c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8023290:	f380 8809 	msr	PSP, r0
 8023294:	f3bf 8f6f 	isb	sy
 8023298:	4770      	bx	lr
 802329a:	bf00      	nop
 802329c:	f3af 8000 	nop.w

080232a0 <pxCurrentTCBConst>:
 80232a0:	20001d34 	.word	0x20001d34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80232a4:	bf00      	nop
 80232a6:	bf00      	nop

080232a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80232a8:	b580      	push	{r7, lr}
 80232aa:	b082      	sub	sp, #8
 80232ac:	af00      	add	r7, sp, #0
	__asm volatile
 80232ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80232b2:	f383 8811 	msr	BASEPRI, r3
 80232b6:	f3bf 8f6f 	isb	sy
 80232ba:	f3bf 8f4f 	dsb	sy
 80232be:	607b      	str	r3, [r7, #4]
}
 80232c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80232c2:	f7fe fd71 	bl	8021da8 <xTaskIncrementTick>
 80232c6:	4603      	mov	r3, r0
 80232c8:	2b00      	cmp	r3, #0
 80232ca:	d003      	beq.n	80232d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80232cc:	4b06      	ldr	r3, [pc, #24]	; (80232e8 <xPortSysTickHandler+0x40>)
 80232ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80232d2:	601a      	str	r2, [r3, #0]
 80232d4:	2300      	movs	r3, #0
 80232d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80232d8:	683b      	ldr	r3, [r7, #0]
 80232da:	f383 8811 	msr	BASEPRI, r3
}
 80232de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80232e0:	bf00      	nop
 80232e2:	3708      	adds	r7, #8
 80232e4:	46bd      	mov	sp, r7
 80232e6:	bd80      	pop	{r7, pc}
 80232e8:	e000ed04 	.word	0xe000ed04

080232ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80232ec:	b480      	push	{r7}
 80232ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80232f0:	4b0b      	ldr	r3, [pc, #44]	; (8023320 <vPortSetupTimerInterrupt+0x34>)
 80232f2:	2200      	movs	r2, #0
 80232f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80232f6:	4b0b      	ldr	r3, [pc, #44]	; (8023324 <vPortSetupTimerInterrupt+0x38>)
 80232f8:	2200      	movs	r2, #0
 80232fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80232fc:	4b0a      	ldr	r3, [pc, #40]	; (8023328 <vPortSetupTimerInterrupt+0x3c>)
 80232fe:	681b      	ldr	r3, [r3, #0]
 8023300:	4a0a      	ldr	r2, [pc, #40]	; (802332c <vPortSetupTimerInterrupt+0x40>)
 8023302:	fba2 2303 	umull	r2, r3, r2, r3
 8023306:	099b      	lsrs	r3, r3, #6
 8023308:	4a09      	ldr	r2, [pc, #36]	; (8023330 <vPortSetupTimerInterrupt+0x44>)
 802330a:	3b01      	subs	r3, #1
 802330c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 802330e:	4b04      	ldr	r3, [pc, #16]	; (8023320 <vPortSetupTimerInterrupt+0x34>)
 8023310:	2207      	movs	r2, #7
 8023312:	601a      	str	r2, [r3, #0]
}
 8023314:	bf00      	nop
 8023316:	46bd      	mov	sp, r7
 8023318:	f85d 7b04 	ldr.w	r7, [sp], #4
 802331c:	4770      	bx	lr
 802331e:	bf00      	nop
 8023320:	e000e010 	.word	0xe000e010
 8023324:	e000e018 	.word	0xe000e018
 8023328:	20000000 	.word	0x20000000
 802332c:	10624dd3 	.word	0x10624dd3
 8023330:	e000e014 	.word	0xe000e014

08023334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8023334:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8023344 <vPortEnableVFP+0x10>
 8023338:	6801      	ldr	r1, [r0, #0]
 802333a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802333e:	6001      	str	r1, [r0, #0]
 8023340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8023342:	bf00      	nop
 8023344:	e000ed88 	.word	0xe000ed88

08023348 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8023348:	b480      	push	{r7}
 802334a:	b085      	sub	sp, #20
 802334c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 802334e:	f3ef 8305 	mrs	r3, IPSR
 8023352:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8023354:	68fb      	ldr	r3, [r7, #12]
 8023356:	2b0f      	cmp	r3, #15
 8023358:	d914      	bls.n	8023384 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 802335a:	4a17      	ldr	r2, [pc, #92]	; (80233b8 <vPortValidateInterruptPriority+0x70>)
 802335c:	68fb      	ldr	r3, [r7, #12]
 802335e:	4413      	add	r3, r2
 8023360:	781b      	ldrb	r3, [r3, #0]
 8023362:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8023364:	4b15      	ldr	r3, [pc, #84]	; (80233bc <vPortValidateInterruptPriority+0x74>)
 8023366:	781b      	ldrb	r3, [r3, #0]
 8023368:	7afa      	ldrb	r2, [r7, #11]
 802336a:	429a      	cmp	r2, r3
 802336c:	d20a      	bcs.n	8023384 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 802336e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023372:	f383 8811 	msr	BASEPRI, r3
 8023376:	f3bf 8f6f 	isb	sy
 802337a:	f3bf 8f4f 	dsb	sy
 802337e:	607b      	str	r3, [r7, #4]
}
 8023380:	bf00      	nop
 8023382:	e7fe      	b.n	8023382 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8023384:	4b0e      	ldr	r3, [pc, #56]	; (80233c0 <vPortValidateInterruptPriority+0x78>)
 8023386:	681b      	ldr	r3, [r3, #0]
 8023388:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 802338c:	4b0d      	ldr	r3, [pc, #52]	; (80233c4 <vPortValidateInterruptPriority+0x7c>)
 802338e:	681b      	ldr	r3, [r3, #0]
 8023390:	429a      	cmp	r2, r3
 8023392:	d90a      	bls.n	80233aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8023394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023398:	f383 8811 	msr	BASEPRI, r3
 802339c:	f3bf 8f6f 	isb	sy
 80233a0:	f3bf 8f4f 	dsb	sy
 80233a4:	603b      	str	r3, [r7, #0]
}
 80233a6:	bf00      	nop
 80233a8:	e7fe      	b.n	80233a8 <vPortValidateInterruptPriority+0x60>
	}
 80233aa:	bf00      	nop
 80233ac:	3714      	adds	r7, #20
 80233ae:	46bd      	mov	sp, r7
 80233b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233b4:	4770      	bx	lr
 80233b6:	bf00      	nop
 80233b8:	e000e3f0 	.word	0xe000e3f0
 80233bc:	20002368 	.word	0x20002368
 80233c0:	e000ed0c 	.word	0xe000ed0c
 80233c4:	2000236c 	.word	0x2000236c

080233c8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80233c8:	b580      	push	{r7, lr}
 80233ca:	b084      	sub	sp, #16
 80233cc:	af00      	add	r7, sp, #0
 80233ce:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 80233d0:	2300      	movs	r3, #0
 80233d2:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80233d4:	687b      	ldr	r3, [r7, #4]
 80233d6:	f003 0307 	and.w	r3, r3, #7
 80233da:	2b00      	cmp	r3, #0
 80233dc:	d004      	beq.n	80233e8 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80233de:	687b      	ldr	r3, [r7, #4]
 80233e0:	f023 0307 	bic.w	r3, r3, #7
 80233e4:	3308      	adds	r3, #8
 80233e6:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 80233e8:	f7fe fc22 	bl	8021c30 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 80233ec:	4b16      	ldr	r3, [pc, #88]	; (8023448 <pvPortMalloc+0x80>)
 80233ee:	681b      	ldr	r3, [r3, #0]
 80233f0:	2b00      	cmp	r3, #0
 80233f2:	d105      	bne.n	8023400 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80233f4:	4b15      	ldr	r3, [pc, #84]	; (802344c <pvPortMalloc+0x84>)
 80233f6:	f023 0307 	bic.w	r3, r3, #7
 80233fa:	461a      	mov	r2, r3
 80233fc:	4b12      	ldr	r3, [pc, #72]	; (8023448 <pvPortMalloc+0x80>)
 80233fe:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8023400:	4b13      	ldr	r3, [pc, #76]	; (8023450 <pvPortMalloc+0x88>)
 8023402:	681a      	ldr	r2, [r3, #0]
 8023404:	687b      	ldr	r3, [r7, #4]
 8023406:	4413      	add	r3, r2
 8023408:	f24b 1227 	movw	r2, #45351	; 0xb127
 802340c:	4293      	cmp	r3, r2
 802340e:	d813      	bhi.n	8023438 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8023410:	4b0f      	ldr	r3, [pc, #60]	; (8023450 <pvPortMalloc+0x88>)
 8023412:	681a      	ldr	r2, [r3, #0]
 8023414:	687b      	ldr	r3, [r7, #4]
 8023416:	441a      	add	r2, r3
 8023418:	4b0d      	ldr	r3, [pc, #52]	; (8023450 <pvPortMalloc+0x88>)
 802341a:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 802341c:	429a      	cmp	r2, r3
 802341e:	d90b      	bls.n	8023438 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8023420:	4b09      	ldr	r3, [pc, #36]	; (8023448 <pvPortMalloc+0x80>)
 8023422:	681a      	ldr	r2, [r3, #0]
 8023424:	4b0a      	ldr	r3, [pc, #40]	; (8023450 <pvPortMalloc+0x88>)
 8023426:	681b      	ldr	r3, [r3, #0]
 8023428:	4413      	add	r3, r2
 802342a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 802342c:	4b08      	ldr	r3, [pc, #32]	; (8023450 <pvPortMalloc+0x88>)
 802342e:	681a      	ldr	r2, [r3, #0]
 8023430:	687b      	ldr	r3, [r7, #4]
 8023432:	4413      	add	r3, r2
 8023434:	4a06      	ldr	r2, [pc, #24]	; (8023450 <pvPortMalloc+0x88>)
 8023436:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8023438:	f7fe fc08 	bl	8021c4c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 802343c:	68fb      	ldr	r3, [r7, #12]
}
 802343e:	4618      	mov	r0, r3
 8023440:	3710      	adds	r7, #16
 8023442:	46bd      	mov	sp, r7
 8023444:	bd80      	pop	{r7, pc}
 8023446:	bf00      	nop
 8023448:	2000d4a4 	.word	0x2000d4a4
 802344c:	20002378 	.word	0x20002378
 8023450:	2000d4a0 	.word	0x2000d4a0

08023454 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8023454:	b480      	push	{r7}
 8023456:	b085      	sub	sp, #20
 8023458:	af00      	add	r7, sp, #0
 802345a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 802345c:	687b      	ldr	r3, [r7, #4]
 802345e:	2b00      	cmp	r3, #0
 8023460:	d00a      	beq.n	8023478 <vPortFree+0x24>
	__asm volatile
 8023462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023466:	f383 8811 	msr	BASEPRI, r3
 802346a:	f3bf 8f6f 	isb	sy
 802346e:	f3bf 8f4f 	dsb	sy
 8023472:	60fb      	str	r3, [r7, #12]
}
 8023474:	bf00      	nop
 8023476:	e7fe      	b.n	8023476 <vPortFree+0x22>
}
 8023478:	bf00      	nop
 802347a:	3714      	adds	r7, #20
 802347c:	46bd      	mov	sp, r7
 802347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023482:	4770      	bx	lr

08023484 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8023484:	b480      	push	{r7}
 8023486:	b083      	sub	sp, #12
 8023488:	af00      	add	r7, sp, #0
 802348a:	6078      	str	r0, [r7, #4]
 802348c:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 802348e:	683a      	ldr	r2, [r7, #0]
 8023490:	687b      	ldr	r3, [r7, #4]
 8023492:	4293      	cmp	r3, r2
 8023494:	bf38      	it	cc
 8023496:	4613      	movcc	r3, r2
}
 8023498:	4618      	mov	r0, r3
 802349a:	370c      	adds	r7, #12
 802349c:	46bd      	mov	sp, r7
 802349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234a2:	4770      	bx	lr

080234a4 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 80234a4:	b480      	push	{r7}
 80234a6:	b083      	sub	sp, #12
 80234a8:	af00      	add	r7, sp, #0
 80234aa:	6078      	str	r0, [r7, #4]
 80234ac:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 80234ae:	683a      	ldr	r2, [r7, #0]
 80234b0:	687b      	ldr	r3, [r7, #4]
 80234b2:	4293      	cmp	r3, r2
 80234b4:	bf28      	it	cs
 80234b6:	4613      	movcs	r3, r2
}
 80234b8:	4618      	mov	r0, r3
 80234ba:	370c      	adds	r7, #12
 80234bc:	46bd      	mov	sp, r7
 80234be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234c2:	4770      	bx	lr

080234c4 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 80234c4:	b480      	push	{r7}
 80234c6:	b083      	sub	sp, #12
 80234c8:	af00      	add	r7, sp, #0
 80234ca:	6078      	str	r0, [r7, #4]
 80234cc:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 80234ce:	687b      	ldr	r3, [r7, #4]
 80234d0:	683a      	ldr	r2, [r7, #0]
 80234d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80234d6:	6839      	ldr	r1, [r7, #0]
 80234d8:	fb01 f202 	mul.w	r2, r1, r2
 80234dc:	1a9b      	subs	r3, r3, r2
 80234de:	687a      	ldr	r2, [r7, #4]
 80234e0:	1ad3      	subs	r3, r2, r3
}
 80234e2:	4618      	mov	r0, r3
 80234e4:	370c      	adds	r7, #12
 80234e6:	46bd      	mov	sp, r7
 80234e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234ec:	4770      	bx	lr

080234ee <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 80234ee:	b580      	push	{r7, lr}
 80234f0:	b082      	sub	sp, #8
 80234f2:	af00      	add	r7, sp, #0
 80234f4:	6078      	str	r0, [r7, #4]
 80234f6:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 80234f8:	687a      	ldr	r2, [r7, #4]
 80234fa:	683b      	ldr	r3, [r7, #0]
 80234fc:	4413      	add	r3, r2
 80234fe:	3b01      	subs	r3, #1
 8023500:	6839      	ldr	r1, [r7, #0]
 8023502:	4618      	mov	r0, r3
 8023504:	f7ff ffde 	bl	80234c4 <lfs_aligndown>
 8023508:	4603      	mov	r3, r0
}
 802350a:	4618      	mov	r0, r3
 802350c:	3708      	adds	r7, #8
 802350e:	46bd      	mov	sp, r7
 8023510:	bd80      	pop	{r7, pc}

08023512 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8023512:	b480      	push	{r7}
 8023514:	b083      	sub	sp, #12
 8023516:	af00      	add	r7, sp, #0
 8023518:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 802351a:	687b      	ldr	r3, [r7, #4]
 802351c:	3b01      	subs	r3, #1
 802351e:	fab3 f383 	clz	r3, r3
 8023522:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8023526:	4618      	mov	r0, r3
 8023528:	370c      	adds	r7, #12
 802352a:	46bd      	mov	sp, r7
 802352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023530:	4770      	bx	lr

08023532 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8023532:	b480      	push	{r7}
 8023534:	b083      	sub	sp, #12
 8023536:	af00      	add	r7, sp, #0
 8023538:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 802353a:	687b      	ldr	r3, [r7, #4]
 802353c:	fa93 f3a3 	rbit	r3, r3
 8023540:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8023544:	4618      	mov	r0, r3
 8023546:	370c      	adds	r7, #12
 8023548:	46bd      	mov	sp, r7
 802354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802354e:	4770      	bx	lr

08023550 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8023550:	b580      	push	{r7, lr}
 8023552:	b082      	sub	sp, #8
 8023554:	af00      	add	r7, sp, #0
 8023556:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8023558:	6878      	ldr	r0, [r7, #4]
 802355a:	f7ed fbc5 	bl	8010ce8 <__popcountsi2>
 802355e:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8023560:	4618      	mov	r0, r3
 8023562:	3708      	adds	r7, #8
 8023564:	46bd      	mov	sp, r7
 8023566:	bd80      	pop	{r7, pc}

08023568 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8023568:	b480      	push	{r7}
 802356a:	b083      	sub	sp, #12
 802356c:	af00      	add	r7, sp, #0
 802356e:	6078      	str	r0, [r7, #4]
 8023570:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8023572:	687a      	ldr	r2, [r7, #4]
 8023574:	683b      	ldr	r3, [r7, #0]
 8023576:	1ad3      	subs	r3, r2, r3
}
 8023578:	4618      	mov	r0, r3
 802357a:	370c      	adds	r7, #12
 802357c:	46bd      	mov	sp, r7
 802357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023582:	4770      	bx	lr

08023584 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8023584:	b480      	push	{r7}
 8023586:	b083      	sub	sp, #12
 8023588:	af00      	add	r7, sp, #0
 802358a:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 802358c:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 802358e:	4618      	mov	r0, r3
 8023590:	370c      	adds	r7, #12
 8023592:	46bd      	mov	sp, r7
 8023594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023598:	4770      	bx	lr

0802359a <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 802359a:	b580      	push	{r7, lr}
 802359c:	b082      	sub	sp, #8
 802359e:	af00      	add	r7, sp, #0
 80235a0:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 80235a2:	6878      	ldr	r0, [r7, #4]
 80235a4:	f7ff ffee 	bl	8023584 <lfs_fromle32>
 80235a8:	4603      	mov	r3, r0
}
 80235aa:	4618      	mov	r0, r3
 80235ac:	3708      	adds	r7, #8
 80235ae:	46bd      	mov	sp, r7
 80235b0:	bd80      	pop	{r7, pc}

080235b2 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 80235b2:	b480      	push	{r7}
 80235b4:	b083      	sub	sp, #12
 80235b6:	af00      	add	r7, sp, #0
 80235b8:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 80235ba:	687b      	ldr	r3, [r7, #4]
 80235bc:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 80235be:	4618      	mov	r0, r3
 80235c0:	370c      	adds	r7, #12
 80235c2:	46bd      	mov	sp, r7
 80235c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235c8:	4770      	bx	lr

080235ca <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 80235ca:	b580      	push	{r7, lr}
 80235cc:	b082      	sub	sp, #8
 80235ce:	af00      	add	r7, sp, #0
 80235d0:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 80235d2:	6878      	ldr	r0, [r7, #4]
 80235d4:	f7ff ffed 	bl	80235b2 <lfs_frombe32>
 80235d8:	4603      	mov	r3, r0
}
 80235da:	4618      	mov	r0, r3
 80235dc:	3708      	adds	r7, #8
 80235de:	46bd      	mov	sp, r7
 80235e0:	bd80      	pop	{r7, pc}

080235e2 <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 80235e2:	b580      	push	{r7, lr}
 80235e4:	b082      	sub	sp, #8
 80235e6:	af00      	add	r7, sp, #0
 80235e8:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 80235ea:	6878      	ldr	r0, [r7, #4]
 80235ec:	f008 fed2 	bl	802c394 <malloc>
 80235f0:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 80235f2:	4618      	mov	r0, r3
 80235f4:	3708      	adds	r7, #8
 80235f6:	46bd      	mov	sp, r7
 80235f8:	bd80      	pop	{r7, pc}

080235fa <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 80235fa:	b580      	push	{r7, lr}
 80235fc:	b082      	sub	sp, #8
 80235fe:	af00      	add	r7, sp, #0
 8023600:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 8023602:	6878      	ldr	r0, [r7, #4]
 8023604:	f008 fece 	bl	802c3a4 <free>
#else
    (void)p;
#endif
}
 8023608:	bf00      	nop
 802360a:	3708      	adds	r7, #8
 802360c:	46bd      	mov	sp, r7
 802360e:	bd80      	pop	{r7, pc}

08023610 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8023610:	b480      	push	{r7}
 8023612:	b083      	sub	sp, #12
 8023614:	af00      	add	r7, sp, #0
 8023616:	6078      	str	r0, [r7, #4]
 8023618:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 802361a:	683b      	ldr	r3, [r7, #0]
 802361c:	f04f 32ff 	mov.w	r2, #4294967295
 8023620:	601a      	str	r2, [r3, #0]
}
 8023622:	bf00      	nop
 8023624:	370c      	adds	r7, #12
 8023626:	46bd      	mov	sp, r7
 8023628:	f85d 7b04 	ldr.w	r7, [sp], #4
 802362c:	4770      	bx	lr

0802362e <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 802362e:	b580      	push	{r7, lr}
 8023630:	b082      	sub	sp, #8
 8023632:	af00      	add	r7, sp, #0
 8023634:	6078      	str	r0, [r7, #4]
 8023636:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8023638:	683b      	ldr	r3, [r7, #0]
 802363a:	68d8      	ldr	r0, [r3, #12]
 802363c:	687b      	ldr	r3, [r7, #4]
 802363e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023642:	461a      	mov	r2, r3
 8023644:	21ff      	movs	r1, #255	; 0xff
 8023646:	f00a f841 	bl	802d6cc <memset>
    pcache->block = LFS_BLOCK_NULL;
 802364a:	683b      	ldr	r3, [r7, #0]
 802364c:	f04f 32ff 	mov.w	r2, #4294967295
 8023650:	601a      	str	r2, [r3, #0]
}
 8023652:	bf00      	nop
 8023654:	3708      	adds	r7, #8
 8023656:	46bd      	mov	sp, r7
 8023658:	bd80      	pop	{r7, pc}
	...

0802365c <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 802365c:	b5b0      	push	{r4, r5, r7, lr}
 802365e:	b08a      	sub	sp, #40	; 0x28
 8023660:	af02      	add	r7, sp, #8
 8023662:	60f8      	str	r0, [r7, #12]
 8023664:	60b9      	str	r1, [r7, #8]
 8023666:	607a      	str	r2, [r7, #4]
 8023668:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 802366a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802366c:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 802366e:	68fb      	ldr	r3, [r7, #12]
 8023670:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023672:	6a1b      	ldr	r3, [r3, #32]
 8023674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023676:	429a      	cmp	r2, r3
 8023678:	d208      	bcs.n	802368c <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 802367a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802367c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802367e:	441a      	add	r2, r3
 8023680:	68fb      	ldr	r3, [r7, #12]
 8023682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023684:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 8023686:	429a      	cmp	r2, r3
 8023688:	f240 811b 	bls.w	80238c2 <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 802368c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8023690:	e11c      	b.n	80238cc <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8023692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023694:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8023696:	68bb      	ldr	r3, [r7, #8]
 8023698:	2b00      	cmp	r3, #0
 802369a:	d03f      	beq.n	802371c <lfs_bd_read+0xc0>
 802369c:	68bb      	ldr	r3, [r7, #8]
 802369e:	681b      	ldr	r3, [r3, #0]
 80236a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80236a2:	429a      	cmp	r2, r3
 80236a4:	d13a      	bne.n	802371c <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 80236a6:	68bb      	ldr	r3, [r7, #8]
 80236a8:	685a      	ldr	r2, [r3, #4]
 80236aa:	68bb      	ldr	r3, [r7, #8]
 80236ac:	689b      	ldr	r3, [r3, #8]
 80236ae:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 80236b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80236b2:	429a      	cmp	r2, r3
 80236b4:	d232      	bcs.n	802371c <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 80236b6:	68bb      	ldr	r3, [r7, #8]
 80236b8:	685b      	ldr	r3, [r3, #4]
 80236ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80236bc:	429a      	cmp	r2, r3
 80236be:	d324      	bcc.n	802370a <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 80236c0:	68bb      	ldr	r3, [r7, #8]
 80236c2:	689a      	ldr	r2, [r3, #8]
 80236c4:	68bb      	ldr	r3, [r7, #8]
 80236c6:	6859      	ldr	r1, [r3, #4]
 80236c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80236ca:	1acb      	subs	r3, r1, r3
 80236cc:	4413      	add	r3, r2
 80236ce:	4619      	mov	r1, r3
 80236d0:	69b8      	ldr	r0, [r7, #24]
 80236d2:	f7ff fee7 	bl	80234a4 <lfs_min>
 80236d6:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 80236d8:	68bb      	ldr	r3, [r7, #8]
 80236da:	68da      	ldr	r2, [r3, #12]
 80236dc:	68bb      	ldr	r3, [r7, #8]
 80236de:	685b      	ldr	r3, [r3, #4]
 80236e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80236e2:	1acb      	subs	r3, r1, r3
 80236e4:	4413      	add	r3, r2
 80236e6:	69ba      	ldr	r2, [r7, #24]
 80236e8:	4619      	mov	r1, r3
 80236ea:	69f8      	ldr	r0, [r7, #28]
 80236ec:	f00a f9c3 	bl	802da76 <memcpy>

                data += diff;
 80236f0:	69fa      	ldr	r2, [r7, #28]
 80236f2:	69bb      	ldr	r3, [r7, #24]
 80236f4:	4413      	add	r3, r2
 80236f6:	61fb      	str	r3, [r7, #28]
                off += diff;
 80236f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80236fa:	69bb      	ldr	r3, [r7, #24]
 80236fc:	4413      	add	r3, r2
 80236fe:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8023700:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023702:	69bb      	ldr	r3, [r7, #24]
 8023704:	1ad3      	subs	r3, r2, r3
 8023706:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8023708:	e0db      	b.n	80238c2 <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 802370a:	68bb      	ldr	r3, [r7, #8]
 802370c:	685a      	ldr	r2, [r3, #4]
 802370e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023710:	1ad3      	subs	r3, r2, r3
 8023712:	4619      	mov	r1, r3
 8023714:	69b8      	ldr	r0, [r7, #24]
 8023716:	f7ff fec5 	bl	80234a4 <lfs_min>
 802371a:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 802371c:	687b      	ldr	r3, [r7, #4]
 802371e:	681b      	ldr	r3, [r3, #0]
 8023720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023722:	429a      	cmp	r2, r3
 8023724:	d13a      	bne.n	802379c <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 8023726:	687b      	ldr	r3, [r7, #4]
 8023728:	685a      	ldr	r2, [r3, #4]
 802372a:	687b      	ldr	r3, [r7, #4]
 802372c:	689b      	ldr	r3, [r3, #8]
 802372e:	4413      	add	r3, r2
        if (block == rcache->block &&
 8023730:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023732:	429a      	cmp	r2, r3
 8023734:	d232      	bcs.n	802379c <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 8023736:	687b      	ldr	r3, [r7, #4]
 8023738:	685b      	ldr	r3, [r3, #4]
 802373a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802373c:	429a      	cmp	r2, r3
 802373e:	d324      	bcc.n	802378a <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8023740:	687b      	ldr	r3, [r7, #4]
 8023742:	689a      	ldr	r2, [r3, #8]
 8023744:	687b      	ldr	r3, [r7, #4]
 8023746:	6859      	ldr	r1, [r3, #4]
 8023748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802374a:	1acb      	subs	r3, r1, r3
 802374c:	4413      	add	r3, r2
 802374e:	4619      	mov	r1, r3
 8023750:	69b8      	ldr	r0, [r7, #24]
 8023752:	f7ff fea7 	bl	80234a4 <lfs_min>
 8023756:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8023758:	687b      	ldr	r3, [r7, #4]
 802375a:	68da      	ldr	r2, [r3, #12]
 802375c:	687b      	ldr	r3, [r7, #4]
 802375e:	685b      	ldr	r3, [r3, #4]
 8023760:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8023762:	1acb      	subs	r3, r1, r3
 8023764:	4413      	add	r3, r2
 8023766:	69ba      	ldr	r2, [r7, #24]
 8023768:	4619      	mov	r1, r3
 802376a:	69f8      	ldr	r0, [r7, #28]
 802376c:	f00a f983 	bl	802da76 <memcpy>

                data += diff;
 8023770:	69fa      	ldr	r2, [r7, #28]
 8023772:	69bb      	ldr	r3, [r7, #24]
 8023774:	4413      	add	r3, r2
 8023776:	61fb      	str	r3, [r7, #28]
                off += diff;
 8023778:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802377a:	69bb      	ldr	r3, [r7, #24]
 802377c:	4413      	add	r3, r2
 802377e:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8023780:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023782:	69bb      	ldr	r3, [r7, #24]
 8023784:	1ad3      	subs	r3, r2, r3
 8023786:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8023788:	e09b      	b.n	80238c2 <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 802378a:	687b      	ldr	r3, [r7, #4]
 802378c:	685a      	ldr	r2, [r3, #4]
 802378e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023790:	1ad3      	subs	r3, r2, r3
 8023792:	4619      	mov	r1, r3
 8023794:	69b8      	ldr	r0, [r7, #24]
 8023796:	f7ff fe85 	bl	80234a4 <lfs_min>
 802379a:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 802379c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802379e:	683b      	ldr	r3, [r7, #0]
 80237a0:	429a      	cmp	r2, r3
 80237a2:	d336      	bcc.n	8023812 <lfs_bd_read+0x1b6>
 80237a4:	68fb      	ldr	r3, [r7, #12]
 80237a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80237a8:	695a      	ldr	r2, [r3, #20]
 80237aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80237ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80237b0:	fb01 f202 	mul.w	r2, r1, r2
 80237b4:	1a9b      	subs	r3, r3, r2
 80237b6:	2b00      	cmp	r3, #0
 80237b8:	d12b      	bne.n	8023812 <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 80237ba:	68fb      	ldr	r3, [r7, #12]
 80237bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80237be:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 80237c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80237c2:	429a      	cmp	r2, r3
 80237c4:	d325      	bcc.n	8023812 <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 80237c6:	68fb      	ldr	r3, [r7, #12]
 80237c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80237ca:	695b      	ldr	r3, [r3, #20]
 80237cc:	4619      	mov	r1, r3
 80237ce:	69b8      	ldr	r0, [r7, #24]
 80237d0:	f7ff fe78 	bl	80234c4 <lfs_aligndown>
 80237d4:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 80237d6:	68fb      	ldr	r3, [r7, #12]
 80237d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80237da:	685c      	ldr	r4, [r3, #4]
 80237dc:	68fb      	ldr	r3, [r7, #12]
 80237de:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80237e0:	69bb      	ldr	r3, [r7, #24]
 80237e2:	9300      	str	r3, [sp, #0]
 80237e4:	69fb      	ldr	r3, [r7, #28]
 80237e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80237e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80237ea:	47a0      	blx	r4
 80237ec:	6178      	str	r0, [r7, #20]
            if (err) {
 80237ee:	697b      	ldr	r3, [r7, #20]
 80237f0:	2b00      	cmp	r3, #0
 80237f2:	d001      	beq.n	80237f8 <lfs_bd_read+0x19c>
                return err;
 80237f4:	697b      	ldr	r3, [r7, #20]
 80237f6:	e069      	b.n	80238cc <lfs_bd_read+0x270>
            }

            data += diff;
 80237f8:	69fa      	ldr	r2, [r7, #28]
 80237fa:	69bb      	ldr	r3, [r7, #24]
 80237fc:	4413      	add	r3, r2
 80237fe:	61fb      	str	r3, [r7, #28]
            off += diff;
 8023800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023802:	69bb      	ldr	r3, [r7, #24]
 8023804:	4413      	add	r3, r2
 8023806:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8023808:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802380a:	69bb      	ldr	r3, [r7, #24]
 802380c:	1ad3      	subs	r3, r2, r3
 802380e:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8023810:	e057      	b.n	80238c2 <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 8023812:	68fb      	ldr	r3, [r7, #12]
 8023814:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023816:	6a1b      	ldr	r3, [r3, #32]
 8023818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802381a:	429a      	cmp	r2, r3
 802381c:	d305      	bcc.n	802382a <lfs_bd_read+0x1ce>
 802381e:	4b2d      	ldr	r3, [pc, #180]	; (80238d4 <lfs_bd_read+0x278>)
 8023820:	4a2d      	ldr	r2, [pc, #180]	; (80238d8 <lfs_bd_read+0x27c>)
 8023822:	216b      	movs	r1, #107	; 0x6b
 8023824:	482d      	ldr	r0, [pc, #180]	; (80238dc <lfs_bd_read+0x280>)
 8023826:	f008 fd81 	bl	802c32c <__assert_func>
        rcache->block = block;
 802382a:	687b      	ldr	r3, [r7, #4]
 802382c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802382e:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8023830:	68fb      	ldr	r3, [r7, #12]
 8023832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023834:	695b      	ldr	r3, [r3, #20]
 8023836:	4619      	mov	r1, r3
 8023838:	6b78      	ldr	r0, [r7, #52]	; 0x34
 802383a:	f7ff fe43 	bl	80234c4 <lfs_aligndown>
 802383e:	4602      	mov	r2, r0
 8023840:	687b      	ldr	r3, [r7, #4]
 8023842:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8023844:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023846:	683b      	ldr	r3, [r7, #0]
 8023848:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 802384a:	68fb      	ldr	r3, [r7, #12]
 802384c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802384e:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 8023850:	4619      	mov	r1, r3
 8023852:	4610      	mov	r0, r2
 8023854:	f7ff fe4b 	bl	80234ee <lfs_alignup>
 8023858:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 802385a:	68fb      	ldr	r3, [r7, #12]
 802385c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802385e:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 8023860:	4619      	mov	r1, r3
 8023862:	4610      	mov	r0, r2
 8023864:	f7ff fe1e 	bl	80234a4 <lfs_min>
 8023868:	4602      	mov	r2, r0
                - rcache->off,
 802386a:	687b      	ldr	r3, [r7, #4]
 802386c:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 802386e:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8023870:	68fb      	ldr	r3, [r7, #12]
 8023872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(
 8023876:	4619      	mov	r1, r3
 8023878:	4610      	mov	r0, r2
 802387a:	f7ff fe13 	bl	80234a4 <lfs_min>
 802387e:	4602      	mov	r2, r0
 8023880:	687b      	ldr	r3, [r7, #4]
 8023882:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8023884:	68fb      	ldr	r3, [r7, #12]
 8023886:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023888:	685c      	ldr	r4, [r3, #4]
 802388a:	68fb      	ldr	r3, [r7, #12]
 802388c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 802388e:	687b      	ldr	r3, [r7, #4]
 8023890:	6819      	ldr	r1, [r3, #0]
 8023892:	687b      	ldr	r3, [r7, #4]
 8023894:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8023896:	687b      	ldr	r3, [r7, #4]
 8023898:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 802389a:	687b      	ldr	r3, [r7, #4]
 802389c:	689b      	ldr	r3, [r3, #8]
 802389e:	9300      	str	r3, [sp, #0]
 80238a0:	462b      	mov	r3, r5
 80238a2:	47a0      	blx	r4
 80238a4:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 80238a6:	693b      	ldr	r3, [r7, #16]
 80238a8:	2b00      	cmp	r3, #0
 80238aa:	dd05      	ble.n	80238b8 <lfs_bd_read+0x25c>
 80238ac:	4b0c      	ldr	r3, [pc, #48]	; (80238e0 <lfs_bd_read+0x284>)
 80238ae:	4a0a      	ldr	r2, [pc, #40]	; (80238d8 <lfs_bd_read+0x27c>)
 80238b0:	2176      	movs	r1, #118	; 0x76
 80238b2:	480a      	ldr	r0, [pc, #40]	; (80238dc <lfs_bd_read+0x280>)
 80238b4:	f008 fd3a 	bl	802c32c <__assert_func>
        if (err) {
 80238b8:	693b      	ldr	r3, [r7, #16]
 80238ba:	2b00      	cmp	r3, #0
 80238bc:	d001      	beq.n	80238c2 <lfs_bd_read+0x266>
            return err;
 80238be:	693b      	ldr	r3, [r7, #16]
 80238c0:	e004      	b.n	80238cc <lfs_bd_read+0x270>
    while (size > 0) {
 80238c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80238c4:	2b00      	cmp	r3, #0
 80238c6:	f47f aee4 	bne.w	8023692 <lfs_bd_read+0x36>
        }
    }

    return 0;
 80238ca:	2300      	movs	r3, #0
}
 80238cc:	4618      	mov	r0, r3
 80238ce:	3720      	adds	r7, #32
 80238d0:	46bd      	mov	sp, r7
 80238d2:	bdb0      	pop	{r4, r5, r7, pc}
 80238d4:	080332f8 	.word	0x080332f8
 80238d8:	080345a8 	.word	0x080345a8
 80238dc:	08033318 	.word	0x08033318
 80238e0:	0803334c 	.word	0x0803334c

080238e4 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 80238e4:	b580      	push	{r7, lr}
 80238e6:	b08e      	sub	sp, #56	; 0x38
 80238e8:	af04      	add	r7, sp, #16
 80238ea:	60f8      	str	r0, [r7, #12]
 80238ec:	60b9      	str	r1, [r7, #8]
 80238ee:	607a      	str	r2, [r7, #4]
 80238f0:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 80238f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80238f4:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 80238f6:	2300      	movs	r3, #0
 80238f8:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 80238fa:	2300      	movs	r3, #0
 80238fc:	627b      	str	r3, [r7, #36]	; 0x24
 80238fe:	e039      	b.n	8023974 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8023900:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023904:	1ad3      	subs	r3, r2, r3
 8023906:	2108      	movs	r1, #8
 8023908:	4618      	mov	r0, r3
 802390a:	f7ff fdcb 	bl	80234a4 <lfs_min>
 802390e:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 8023910:	683a      	ldr	r2, [r7, #0]
 8023912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023914:	1ad1      	subs	r1, r2, r3
 8023916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802391a:	4413      	add	r3, r2
 802391c:	69fa      	ldr	r2, [r7, #28]
 802391e:	9203      	str	r2, [sp, #12]
 8023920:	f107 0210 	add.w	r2, r7, #16
 8023924:	9202      	str	r2, [sp, #8]
 8023926:	9301      	str	r3, [sp, #4]
 8023928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802392a:	9300      	str	r3, [sp, #0]
 802392c:	460b      	mov	r3, r1
 802392e:	687a      	ldr	r2, [r7, #4]
 8023930:	68b9      	ldr	r1, [r7, #8]
 8023932:	68f8      	ldr	r0, [r7, #12]
 8023934:	f7ff fe92 	bl	802365c <lfs_bd_read>
 8023938:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 802393a:	69bb      	ldr	r3, [r7, #24]
 802393c:	2b00      	cmp	r3, #0
 802393e:	d001      	beq.n	8023944 <lfs_bd_cmp+0x60>
            return res;
 8023940:	69bb      	ldr	r3, [r7, #24]
 8023942:	e01c      	b.n	802397e <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 8023944:	6a3a      	ldr	r2, [r7, #32]
 8023946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023948:	18d1      	adds	r1, r2, r3
 802394a:	f107 0310 	add.w	r3, r7, #16
 802394e:	69fa      	ldr	r2, [r7, #28]
 8023950:	4618      	mov	r0, r3
 8023952:	f009 fe91 	bl	802d678 <memcmp>
 8023956:	61b8      	str	r0, [r7, #24]
        if (res) {
 8023958:	69bb      	ldr	r3, [r7, #24]
 802395a:	2b00      	cmp	r3, #0
 802395c:	d006      	beq.n	802396c <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 802395e:	69bb      	ldr	r3, [r7, #24]
 8023960:	2b00      	cmp	r3, #0
 8023962:	da01      	bge.n	8023968 <lfs_bd_cmp+0x84>
 8023964:	2301      	movs	r3, #1
 8023966:	e00a      	b.n	802397e <lfs_bd_cmp+0x9a>
 8023968:	2302      	movs	r3, #2
 802396a:	e008      	b.n	802397e <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 802396c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802396e:	69fb      	ldr	r3, [r7, #28]
 8023970:	4413      	add	r3, r2
 8023972:	627b      	str	r3, [r7, #36]	; 0x24
 8023974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023978:	429a      	cmp	r2, r3
 802397a:	d3c1      	bcc.n	8023900 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 802397c:	2300      	movs	r3, #0
}
 802397e:	4618      	mov	r0, r3
 8023980:	3728      	adds	r7, #40	; 0x28
 8023982:	46bd      	mov	sp, r7
 8023984:	bd80      	pop	{r7, pc}
	...

08023988 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8023988:	b5b0      	push	{r4, r5, r7, lr}
 802398a:	b08c      	sub	sp, #48	; 0x30
 802398c:	af04      	add	r7, sp, #16
 802398e:	60f8      	str	r0, [r7, #12]
 8023990:	60b9      	str	r1, [r7, #8]
 8023992:	607a      	str	r2, [r7, #4]
 8023994:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8023996:	68bb      	ldr	r3, [r7, #8]
 8023998:	681b      	ldr	r3, [r3, #0]
 802399a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802399e:	d061      	beq.n	8023a64 <lfs_bd_flush+0xdc>
 80239a0:	68bb      	ldr	r3, [r7, #8]
 80239a2:	681b      	ldr	r3, [r3, #0]
 80239a4:	f113 0f02 	cmn.w	r3, #2
 80239a8:	d05c      	beq.n	8023a64 <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 80239aa:	68bb      	ldr	r3, [r7, #8]
 80239ac:	681a      	ldr	r2, [r3, #0]
 80239ae:	68fb      	ldr	r3, [r7, #12]
 80239b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80239b2:	6a1b      	ldr	r3, [r3, #32]
 80239b4:	429a      	cmp	r2, r3
 80239b6:	d305      	bcc.n	80239c4 <lfs_bd_flush+0x3c>
 80239b8:	4b2d      	ldr	r3, [pc, #180]	; (8023a70 <lfs_bd_flush+0xe8>)
 80239ba:	4a2e      	ldr	r2, [pc, #184]	; (8023a74 <lfs_bd_flush+0xec>)
 80239bc:	219e      	movs	r1, #158	; 0x9e
 80239be:	482e      	ldr	r0, [pc, #184]	; (8023a78 <lfs_bd_flush+0xf0>)
 80239c0:	f008 fcb4 	bl	802c32c <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 80239c4:	68bb      	ldr	r3, [r7, #8]
 80239c6:	689a      	ldr	r2, [r3, #8]
 80239c8:	68fb      	ldr	r3, [r7, #12]
 80239ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80239cc:	699b      	ldr	r3, [r3, #24]
 80239ce:	4619      	mov	r1, r3
 80239d0:	4610      	mov	r0, r2
 80239d2:	f7ff fd8c 	bl	80234ee <lfs_alignup>
 80239d6:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 80239d8:	68fb      	ldr	r3, [r7, #12]
 80239da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80239dc:	689c      	ldr	r4, [r3, #8]
 80239de:	68fb      	ldr	r3, [r7, #12]
 80239e0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80239e2:	68bb      	ldr	r3, [r7, #8]
 80239e4:	6819      	ldr	r1, [r3, #0]
 80239e6:	68bb      	ldr	r3, [r7, #8]
 80239e8:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 80239ea:	68bb      	ldr	r3, [r7, #8]
 80239ec:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 80239ee:	69fb      	ldr	r3, [r7, #28]
 80239f0:	9300      	str	r3, [sp, #0]
 80239f2:	462b      	mov	r3, r5
 80239f4:	47a0      	blx	r4
 80239f6:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 80239f8:	69bb      	ldr	r3, [r7, #24]
 80239fa:	2b00      	cmp	r3, #0
 80239fc:	dd05      	ble.n	8023a0a <lfs_bd_flush+0x82>
 80239fe:	4b1f      	ldr	r3, [pc, #124]	; (8023a7c <lfs_bd_flush+0xf4>)
 8023a00:	4a1c      	ldr	r2, [pc, #112]	; (8023a74 <lfs_bd_flush+0xec>)
 8023a02:	21a2      	movs	r1, #162	; 0xa2
 8023a04:	481c      	ldr	r0, [pc, #112]	; (8023a78 <lfs_bd_flush+0xf0>)
 8023a06:	f008 fc91 	bl	802c32c <__assert_func>
        if (err) {
 8023a0a:	69bb      	ldr	r3, [r7, #24]
 8023a0c:	2b00      	cmp	r3, #0
 8023a0e:	d001      	beq.n	8023a14 <lfs_bd_flush+0x8c>
            return err;
 8023a10:	69bb      	ldr	r3, [r7, #24]
 8023a12:	e028      	b.n	8023a66 <lfs_bd_flush+0xde>
        }

        if (validate) {
 8023a14:	78fb      	ldrb	r3, [r7, #3]
 8023a16:	2b00      	cmp	r3, #0
 8023a18:	d020      	beq.n	8023a5c <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8023a1a:	6879      	ldr	r1, [r7, #4]
 8023a1c:	68f8      	ldr	r0, [r7, #12]
 8023a1e:	f7ff fdf7 	bl	8023610 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8023a22:	68bb      	ldr	r3, [r7, #8]
 8023a24:	681b      	ldr	r3, [r3, #0]
 8023a26:	68ba      	ldr	r2, [r7, #8]
 8023a28:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8023a2a:	68b9      	ldr	r1, [r7, #8]
 8023a2c:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8023a2e:	69f8      	ldr	r0, [r7, #28]
 8023a30:	9003      	str	r0, [sp, #12]
 8023a32:	9102      	str	r1, [sp, #8]
 8023a34:	9201      	str	r2, [sp, #4]
 8023a36:	9300      	str	r3, [sp, #0]
 8023a38:	69fb      	ldr	r3, [r7, #28]
 8023a3a:	687a      	ldr	r2, [r7, #4]
 8023a3c:	2100      	movs	r1, #0
 8023a3e:	68f8      	ldr	r0, [r7, #12]
 8023a40:	f7ff ff50 	bl	80238e4 <lfs_bd_cmp>
 8023a44:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8023a46:	697b      	ldr	r3, [r7, #20]
 8023a48:	2b00      	cmp	r3, #0
 8023a4a:	da01      	bge.n	8023a50 <lfs_bd_flush+0xc8>
                return res;
 8023a4c:	697b      	ldr	r3, [r7, #20]
 8023a4e:	e00a      	b.n	8023a66 <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 8023a50:	697b      	ldr	r3, [r7, #20]
 8023a52:	2b00      	cmp	r3, #0
 8023a54:	d002      	beq.n	8023a5c <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 8023a56:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8023a5a:	e004      	b.n	8023a66 <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8023a5c:	68b9      	ldr	r1, [r7, #8]
 8023a5e:	68f8      	ldr	r0, [r7, #12]
 8023a60:	f7ff fde5 	bl	802362e <lfs_cache_zero>
    }

    return 0;
 8023a64:	2300      	movs	r3, #0
}
 8023a66:	4618      	mov	r0, r3
 8023a68:	3720      	adds	r7, #32
 8023a6a:	46bd      	mov	sp, r7
 8023a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8023a6e:	bf00      	nop
 8023a70:	08033358 	.word	0x08033358
 8023a74:	080345b4 	.word	0x080345b4
 8023a78:	08033318 	.word	0x08033318
 8023a7c:	0803334c 	.word	0x0803334c

08023a80 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8023a80:	b580      	push	{r7, lr}
 8023a82:	b086      	sub	sp, #24
 8023a84:	af00      	add	r7, sp, #0
 8023a86:	60f8      	str	r0, [r7, #12]
 8023a88:	60b9      	str	r1, [r7, #8]
 8023a8a:	607a      	str	r2, [r7, #4]
 8023a8c:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8023a8e:	6879      	ldr	r1, [r7, #4]
 8023a90:	68f8      	ldr	r0, [r7, #12]
 8023a92:	f7ff fdbd 	bl	8023610 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8023a96:	78fb      	ldrb	r3, [r7, #3]
 8023a98:	687a      	ldr	r2, [r7, #4]
 8023a9a:	68b9      	ldr	r1, [r7, #8]
 8023a9c:	68f8      	ldr	r0, [r7, #12]
 8023a9e:	f7ff ff73 	bl	8023988 <lfs_bd_flush>
 8023aa2:	6178      	str	r0, [r7, #20]
    if (err) {
 8023aa4:	697b      	ldr	r3, [r7, #20]
 8023aa6:	2b00      	cmp	r3, #0
 8023aa8:	d001      	beq.n	8023aae <lfs_bd_sync+0x2e>
        return err;
 8023aaa:	697b      	ldr	r3, [r7, #20]
 8023aac:	e011      	b.n	8023ad2 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8023aae:	68fb      	ldr	r3, [r7, #12]
 8023ab0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023ab2:	691b      	ldr	r3, [r3, #16]
 8023ab4:	68fa      	ldr	r2, [r7, #12]
 8023ab6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8023ab8:	4610      	mov	r0, r2
 8023aba:	4798      	blx	r3
 8023abc:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8023abe:	697b      	ldr	r3, [r7, #20]
 8023ac0:	2b00      	cmp	r3, #0
 8023ac2:	dd05      	ble.n	8023ad0 <lfs_bd_sync+0x50>
 8023ac4:	4b05      	ldr	r3, [pc, #20]	; (8023adc <lfs_bd_sync+0x5c>)
 8023ac6:	4a06      	ldr	r2, [pc, #24]	; (8023ae0 <lfs_bd_sync+0x60>)
 8023ac8:	21c8      	movs	r1, #200	; 0xc8
 8023aca:	4806      	ldr	r0, [pc, #24]	; (8023ae4 <lfs_bd_sync+0x64>)
 8023acc:	f008 fc2e 	bl	802c32c <__assert_func>
    return err;
 8023ad0:	697b      	ldr	r3, [r7, #20]
}
 8023ad2:	4618      	mov	r0, r3
 8023ad4:	3718      	adds	r7, #24
 8023ad6:	46bd      	mov	sp, r7
 8023ad8:	bd80      	pop	{r7, pc}
 8023ada:	bf00      	nop
 8023adc:	0803334c 	.word	0x0803334c
 8023ae0:	080345c4 	.word	0x080345c4
 8023ae4:	08033318 	.word	0x08033318

08023ae8 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8023ae8:	b580      	push	{r7, lr}
 8023aea:	b088      	sub	sp, #32
 8023aec:	af00      	add	r7, sp, #0
 8023aee:	60f8      	str	r0, [r7, #12]
 8023af0:	60b9      	str	r1, [r7, #8]
 8023af2:	607a      	str	r2, [r7, #4]
 8023af4:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8023af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023af8:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 8023afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023afc:	f113 0f02 	cmn.w	r3, #2
 8023b00:	d00b      	beq.n	8023b1a <lfs_bd_prog+0x32>
 8023b02:	68fb      	ldr	r3, [r7, #12]
 8023b04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023b06:	6a1b      	ldr	r3, [r3, #32]
 8023b08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023b0a:	429a      	cmp	r2, r3
 8023b0c:	d305      	bcc.n	8023b1a <lfs_bd_prog+0x32>
 8023b0e:	4b47      	ldr	r3, [pc, #284]	; (8023c2c <lfs_bd_prog+0x144>)
 8023b10:	4a47      	ldr	r2, [pc, #284]	; (8023c30 <lfs_bd_prog+0x148>)
 8023b12:	21d3      	movs	r1, #211	; 0xd3
 8023b14:	4847      	ldr	r0, [pc, #284]	; (8023c34 <lfs_bd_prog+0x14c>)
 8023b16:	f008 fc09 	bl	802c32c <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8023b1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023b1e:	441a      	add	r2, r3
 8023b20:	68fb      	ldr	r3, [r7, #12]
 8023b22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023b24:	69db      	ldr	r3, [r3, #28]
 8023b26:	429a      	cmp	r2, r3
 8023b28:	d977      	bls.n	8023c1a <lfs_bd_prog+0x132>
 8023b2a:	4b43      	ldr	r3, [pc, #268]	; (8023c38 <lfs_bd_prog+0x150>)
 8023b2c:	4a40      	ldr	r2, [pc, #256]	; (8023c30 <lfs_bd_prog+0x148>)
 8023b2e:	21d4      	movs	r1, #212	; 0xd4
 8023b30:	4840      	ldr	r0, [pc, #256]	; (8023c34 <lfs_bd_prog+0x14c>)
 8023b32:	f008 fbfb 	bl	802c32c <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8023b36:	68bb      	ldr	r3, [r7, #8]
 8023b38:	681b      	ldr	r3, [r3, #0]
 8023b3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023b3c:	429a      	cmp	r2, r3
 8023b3e:	d151      	bne.n	8023be4 <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 8023b40:	68bb      	ldr	r3, [r7, #8]
 8023b42:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8023b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023b46:	429a      	cmp	r2, r3
 8023b48:	d34c      	bcc.n	8023be4 <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 8023b4a:	68bb      	ldr	r3, [r7, #8]
 8023b4c:	685a      	ldr	r2, [r3, #4]
 8023b4e:	68fb      	ldr	r3, [r7, #12]
 8023b50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023b54:	4413      	add	r3, r2
                off >= pcache->off &&
 8023b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023b58:	429a      	cmp	r2, r3
 8023b5a:	d243      	bcs.n	8023be4 <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8023b5c:	68fb      	ldr	r3, [r7, #12]
 8023b5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023b60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8023b62:	68bb      	ldr	r3, [r7, #8]
 8023b64:	6859      	ldr	r1, [r3, #4]
 8023b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023b68:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8023b6a:	4413      	add	r3, r2
 8023b6c:	4619      	mov	r1, r3
 8023b6e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8023b70:	f7ff fc98 	bl	80234a4 <lfs_min>
 8023b74:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8023b76:	68bb      	ldr	r3, [r7, #8]
 8023b78:	68da      	ldr	r2, [r3, #12]
 8023b7a:	68bb      	ldr	r3, [r7, #8]
 8023b7c:	685b      	ldr	r3, [r3, #4]
 8023b7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8023b80:	1acb      	subs	r3, r1, r3
 8023b82:	4413      	add	r3, r2
 8023b84:	69ba      	ldr	r2, [r7, #24]
 8023b86:	69f9      	ldr	r1, [r7, #28]
 8023b88:	4618      	mov	r0, r3
 8023b8a:	f009 ff74 	bl	802da76 <memcpy>

            data += diff;
 8023b8e:	69fa      	ldr	r2, [r7, #28]
 8023b90:	69bb      	ldr	r3, [r7, #24]
 8023b92:	4413      	add	r3, r2
 8023b94:	61fb      	str	r3, [r7, #28]
            off += diff;
 8023b96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023b98:	69bb      	ldr	r3, [r7, #24]
 8023b9a:	4413      	add	r3, r2
 8023b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 8023b9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023ba0:	69bb      	ldr	r3, [r7, #24]
 8023ba2:	1ad3      	subs	r3, r2, r3
 8023ba4:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8023ba6:	68bb      	ldr	r3, [r7, #8]
 8023ba8:	6898      	ldr	r0, [r3, #8]
 8023baa:	68bb      	ldr	r3, [r7, #8]
 8023bac:	685b      	ldr	r3, [r3, #4]
 8023bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023bb0:	1ad3      	subs	r3, r2, r3
 8023bb2:	4619      	mov	r1, r3
 8023bb4:	f7ff fc66 	bl	8023484 <lfs_max>
 8023bb8:	4602      	mov	r2, r0
 8023bba:	68bb      	ldr	r3, [r7, #8]
 8023bbc:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8023bbe:	68bb      	ldr	r3, [r7, #8]
 8023bc0:	689a      	ldr	r2, [r3, #8]
 8023bc2:	68fb      	ldr	r3, [r7, #12]
 8023bc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023bc8:	429a      	cmp	r2, r3
 8023bca:	d126      	bne.n	8023c1a <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8023bcc:	78fb      	ldrb	r3, [r7, #3]
 8023bce:	687a      	ldr	r2, [r7, #4]
 8023bd0:	68b9      	ldr	r1, [r7, #8]
 8023bd2:	68f8      	ldr	r0, [r7, #12]
 8023bd4:	f7ff fed8 	bl	8023988 <lfs_bd_flush>
 8023bd8:	6178      	str	r0, [r7, #20]
                if (err) {
 8023bda:	697b      	ldr	r3, [r7, #20]
 8023bdc:	2b00      	cmp	r3, #0
 8023bde:	d01c      	beq.n	8023c1a <lfs_bd_prog+0x132>
                    return err;
 8023be0:	697b      	ldr	r3, [r7, #20]
 8023be2:	e01e      	b.n	8023c22 <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8023be4:	68bb      	ldr	r3, [r7, #8]
 8023be6:	681b      	ldr	r3, [r3, #0]
 8023be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023bec:	d005      	beq.n	8023bfa <lfs_bd_prog+0x112>
 8023bee:	4b13      	ldr	r3, [pc, #76]	; (8023c3c <lfs_bd_prog+0x154>)
 8023bf0:	4a0f      	ldr	r2, [pc, #60]	; (8023c30 <lfs_bd_prog+0x148>)
 8023bf2:	21f1      	movs	r1, #241	; 0xf1
 8023bf4:	480f      	ldr	r0, [pc, #60]	; (8023c34 <lfs_bd_prog+0x14c>)
 8023bf6:	f008 fb99 	bl	802c32c <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8023bfa:	68bb      	ldr	r3, [r7, #8]
 8023bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023bfe:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8023c00:	68fb      	ldr	r3, [r7, #12]
 8023c02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023c04:	699b      	ldr	r3, [r3, #24]
 8023c06:	4619      	mov	r1, r3
 8023c08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8023c0a:	f7ff fc5b 	bl	80234c4 <lfs_aligndown>
 8023c0e:	4602      	mov	r2, r0
 8023c10:	68bb      	ldr	r3, [r7, #8]
 8023c12:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8023c14:	68bb      	ldr	r3, [r7, #8]
 8023c16:	2200      	movs	r2, #0
 8023c18:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 8023c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023c1c:	2b00      	cmp	r3, #0
 8023c1e:	d18a      	bne.n	8023b36 <lfs_bd_prog+0x4e>
    }

    return 0;
 8023c20:	2300      	movs	r3, #0
}
 8023c22:	4618      	mov	r0, r3
 8023c24:	3720      	adds	r7, #32
 8023c26:	46bd      	mov	sp, r7
 8023c28:	bd80      	pop	{r7, pc}
 8023c2a:	bf00      	nop
 8023c2c:	08033380 	.word	0x08033380
 8023c30:	080345d0 	.word	0x080345d0
 8023c34:	08033318 	.word	0x08033318
 8023c38:	080333bc 	.word	0x080333bc
 8023c3c:	080333e0 	.word	0x080333e0

08023c40 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8023c40:	b580      	push	{r7, lr}
 8023c42:	b084      	sub	sp, #16
 8023c44:	af00      	add	r7, sp, #0
 8023c46:	6078      	str	r0, [r7, #4]
 8023c48:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 8023c4a:	687b      	ldr	r3, [r7, #4]
 8023c4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023c4e:	6a1b      	ldr	r3, [r3, #32]
 8023c50:	683a      	ldr	r2, [r7, #0]
 8023c52:	429a      	cmp	r2, r3
 8023c54:	d305      	bcc.n	8023c62 <lfs_bd_erase+0x22>
 8023c56:	4b0f      	ldr	r3, [pc, #60]	; (8023c94 <lfs_bd_erase+0x54>)
 8023c58:	4a0f      	ldr	r2, [pc, #60]	; (8023c98 <lfs_bd_erase+0x58>)
 8023c5a:	21ff      	movs	r1, #255	; 0xff
 8023c5c:	480f      	ldr	r0, [pc, #60]	; (8023c9c <lfs_bd_erase+0x5c>)
 8023c5e:	f008 fb65 	bl	802c32c <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8023c62:	687b      	ldr	r3, [r7, #4]
 8023c64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023c66:	68db      	ldr	r3, [r3, #12]
 8023c68:	687a      	ldr	r2, [r7, #4]
 8023c6a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8023c6c:	6839      	ldr	r1, [r7, #0]
 8023c6e:	4610      	mov	r0, r2
 8023c70:	4798      	blx	r3
 8023c72:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8023c74:	68fb      	ldr	r3, [r7, #12]
 8023c76:	2b00      	cmp	r3, #0
 8023c78:	dd06      	ble.n	8023c88 <lfs_bd_erase+0x48>
 8023c7a:	4b09      	ldr	r3, [pc, #36]	; (8023ca0 <lfs_bd_erase+0x60>)
 8023c7c:	4a06      	ldr	r2, [pc, #24]	; (8023c98 <lfs_bd_erase+0x58>)
 8023c7e:	f240 1101 	movw	r1, #257	; 0x101
 8023c82:	4806      	ldr	r0, [pc, #24]	; (8023c9c <lfs_bd_erase+0x5c>)
 8023c84:	f008 fb52 	bl	802c32c <__assert_func>
    return err;
 8023c88:	68fb      	ldr	r3, [r7, #12]
}
 8023c8a:	4618      	mov	r0, r3
 8023c8c:	3710      	adds	r7, #16
 8023c8e:	46bd      	mov	sp, r7
 8023c90:	bd80      	pop	{r7, pc}
 8023c92:	bf00      	nop
 8023c94:	080332f8 	.word	0x080332f8
 8023c98:	080345dc 	.word	0x080345dc
 8023c9c:	08033318 	.word	0x08033318
 8023ca0:	0803334c 	.word	0x0803334c

08023ca4 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8023ca4:	b480      	push	{r7}
 8023ca6:	b085      	sub	sp, #20
 8023ca8:	af00      	add	r7, sp, #0
 8023caa:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8023cac:	687b      	ldr	r3, [r7, #4]
 8023cae:	681b      	ldr	r3, [r3, #0]
 8023cb0:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8023cb2:	687b      	ldr	r3, [r7, #4]
 8023cb4:	685a      	ldr	r2, [r3, #4]
 8023cb6:	687b      	ldr	r3, [r7, #4]
 8023cb8:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 8023cba:	687b      	ldr	r3, [r7, #4]
 8023cbc:	3304      	adds	r3, #4
 8023cbe:	68fa      	ldr	r2, [r7, #12]
 8023cc0:	601a      	str	r2, [r3, #0]
}
 8023cc2:	bf00      	nop
 8023cc4:	3714      	adds	r7, #20
 8023cc6:	46bd      	mov	sp, r7
 8023cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ccc:	4770      	bx	lr

08023cce <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 8023cce:	b480      	push	{r7}
 8023cd0:	b083      	sub	sp, #12
 8023cd2:	af00      	add	r7, sp, #0
 8023cd4:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8023cd6:	687b      	ldr	r3, [r7, #4]
 8023cd8:	681b      	ldr	r3, [r3, #0]
 8023cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023cde:	d005      	beq.n	8023cec <lfs_pair_isnull+0x1e>
 8023ce0:	687b      	ldr	r3, [r7, #4]
 8023ce2:	3304      	adds	r3, #4
 8023ce4:	681b      	ldr	r3, [r3, #0]
 8023ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023cea:	d101      	bne.n	8023cf0 <lfs_pair_isnull+0x22>
 8023cec:	2301      	movs	r3, #1
 8023cee:	e000      	b.n	8023cf2 <lfs_pair_isnull+0x24>
 8023cf0:	2300      	movs	r3, #0
 8023cf2:	f003 0301 	and.w	r3, r3, #1
 8023cf6:	b2db      	uxtb	r3, r3
}
 8023cf8:	4618      	mov	r0, r3
 8023cfa:	370c      	adds	r7, #12
 8023cfc:	46bd      	mov	sp, r7
 8023cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d02:	4770      	bx	lr

08023d04 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8023d04:	b480      	push	{r7}
 8023d06:	b083      	sub	sp, #12
 8023d08:	af00      	add	r7, sp, #0
 8023d0a:	6078      	str	r0, [r7, #4]
 8023d0c:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8023d0e:	687b      	ldr	r3, [r7, #4]
 8023d10:	681a      	ldr	r2, [r3, #0]
 8023d12:	683b      	ldr	r3, [r7, #0]
 8023d14:	681b      	ldr	r3, [r3, #0]
 8023d16:	429a      	cmp	r2, r3
 8023d18:	d017      	beq.n	8023d4a <lfs_pair_cmp+0x46>
 8023d1a:	687b      	ldr	r3, [r7, #4]
 8023d1c:	3304      	adds	r3, #4
 8023d1e:	681a      	ldr	r2, [r3, #0]
 8023d20:	683b      	ldr	r3, [r7, #0]
 8023d22:	3304      	adds	r3, #4
 8023d24:	681b      	ldr	r3, [r3, #0]
 8023d26:	429a      	cmp	r2, r3
 8023d28:	d00f      	beq.n	8023d4a <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8023d2a:	687b      	ldr	r3, [r7, #4]
 8023d2c:	681a      	ldr	r2, [r3, #0]
 8023d2e:	683b      	ldr	r3, [r7, #0]
 8023d30:	3304      	adds	r3, #4
 8023d32:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8023d34:	429a      	cmp	r2, r3
 8023d36:	d008      	beq.n	8023d4a <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8023d38:	687b      	ldr	r3, [r7, #4]
 8023d3a:	3304      	adds	r3, #4
 8023d3c:	681a      	ldr	r2, [r3, #0]
 8023d3e:	683b      	ldr	r3, [r7, #0]
 8023d40:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8023d42:	429a      	cmp	r2, r3
 8023d44:	d001      	beq.n	8023d4a <lfs_pair_cmp+0x46>
 8023d46:	2301      	movs	r3, #1
 8023d48:	e000      	b.n	8023d4c <lfs_pair_cmp+0x48>
 8023d4a:	2300      	movs	r3, #0
}
 8023d4c:	4618      	mov	r0, r3
 8023d4e:	370c      	adds	r7, #12
 8023d50:	46bd      	mov	sp, r7
 8023d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d56:	4770      	bx	lr

08023d58 <lfs_pair_sync>:

#ifndef LFS_READONLY
static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8023d58:	b480      	push	{r7}
 8023d5a:	b083      	sub	sp, #12
 8023d5c:	af00      	add	r7, sp, #0
 8023d5e:	6078      	str	r0, [r7, #4]
 8023d60:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8023d62:	687b      	ldr	r3, [r7, #4]
 8023d64:	681a      	ldr	r2, [r3, #0]
 8023d66:	683b      	ldr	r3, [r7, #0]
 8023d68:	681b      	ldr	r3, [r3, #0]
 8023d6a:	429a      	cmp	r2, r3
 8023d6c:	d107      	bne.n	8023d7e <lfs_pair_sync+0x26>
 8023d6e:	687b      	ldr	r3, [r7, #4]
 8023d70:	3304      	adds	r3, #4
 8023d72:	681a      	ldr	r2, [r3, #0]
 8023d74:	683b      	ldr	r3, [r7, #0]
 8023d76:	3304      	adds	r3, #4
 8023d78:	681b      	ldr	r3, [r3, #0]
 8023d7a:	429a      	cmp	r2, r3
 8023d7c:	d00d      	beq.n	8023d9a <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8023d7e:	687b      	ldr	r3, [r7, #4]
 8023d80:	681a      	ldr	r2, [r3, #0]
 8023d82:	683b      	ldr	r3, [r7, #0]
 8023d84:	3304      	adds	r3, #4
 8023d86:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8023d88:	429a      	cmp	r2, r3
 8023d8a:	d108      	bne.n	8023d9e <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8023d8c:	687b      	ldr	r3, [r7, #4]
 8023d8e:	3304      	adds	r3, #4
 8023d90:	681a      	ldr	r2, [r3, #0]
 8023d92:	683b      	ldr	r3, [r7, #0]
 8023d94:	681b      	ldr	r3, [r3, #0]
 8023d96:	429a      	cmp	r2, r3
 8023d98:	d101      	bne.n	8023d9e <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8023d9a:	2301      	movs	r3, #1
 8023d9c:	e000      	b.n	8023da0 <lfs_pair_sync+0x48>
 8023d9e:	2300      	movs	r3, #0
 8023da0:	f003 0301 	and.w	r3, r3, #1
 8023da4:	b2db      	uxtb	r3, r3
}
 8023da6:	4618      	mov	r0, r3
 8023da8:	370c      	adds	r7, #12
 8023daa:	46bd      	mov	sp, r7
 8023dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023db0:	4770      	bx	lr

08023db2 <lfs_pair_fromle32>:
#endif

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8023db2:	b590      	push	{r4, r7, lr}
 8023db4:	b083      	sub	sp, #12
 8023db6:	af00      	add	r7, sp, #0
 8023db8:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 8023dba:	687b      	ldr	r3, [r7, #4]
 8023dbc:	681b      	ldr	r3, [r3, #0]
 8023dbe:	4618      	mov	r0, r3
 8023dc0:	f7ff fbe0 	bl	8023584 <lfs_fromle32>
 8023dc4:	4602      	mov	r2, r0
 8023dc6:	687b      	ldr	r3, [r7, #4]
 8023dc8:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 8023dca:	687b      	ldr	r3, [r7, #4]
 8023dcc:	3304      	adds	r3, #4
 8023dce:	681a      	ldr	r2, [r3, #0]
 8023dd0:	687b      	ldr	r3, [r7, #4]
 8023dd2:	1d1c      	adds	r4, r3, #4
 8023dd4:	4610      	mov	r0, r2
 8023dd6:	f7ff fbd5 	bl	8023584 <lfs_fromle32>
 8023dda:	4603      	mov	r3, r0
 8023ddc:	6023      	str	r3, [r4, #0]
}
 8023dde:	bf00      	nop
 8023de0:	370c      	adds	r7, #12
 8023de2:	46bd      	mov	sp, r7
 8023de4:	bd90      	pop	{r4, r7, pc}

08023de6 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8023de6:	b590      	push	{r4, r7, lr}
 8023de8:	b083      	sub	sp, #12
 8023dea:	af00      	add	r7, sp, #0
 8023dec:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8023dee:	687b      	ldr	r3, [r7, #4]
 8023df0:	681b      	ldr	r3, [r3, #0]
 8023df2:	4618      	mov	r0, r3
 8023df4:	f7ff fbd1 	bl	802359a <lfs_tole32>
 8023df8:	4602      	mov	r2, r0
 8023dfa:	687b      	ldr	r3, [r7, #4]
 8023dfc:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8023dfe:	687b      	ldr	r3, [r7, #4]
 8023e00:	3304      	adds	r3, #4
 8023e02:	681a      	ldr	r2, [r3, #0]
 8023e04:	687b      	ldr	r3, [r7, #4]
 8023e06:	1d1c      	adds	r4, r3, #4
 8023e08:	4610      	mov	r0, r2
 8023e0a:	f7ff fbc6 	bl	802359a <lfs_tole32>
 8023e0e:	4603      	mov	r3, r0
 8023e10:	6023      	str	r3, [r4, #0]
}
 8023e12:	bf00      	nop
 8023e14:	370c      	adds	r7, #12
 8023e16:	46bd      	mov	sp, r7
 8023e18:	bd90      	pop	{r4, r7, pc}

08023e1a <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8023e1a:	b480      	push	{r7}
 8023e1c:	b083      	sub	sp, #12
 8023e1e:	af00      	add	r7, sp, #0
 8023e20:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8023e22:	687b      	ldr	r3, [r7, #4]
 8023e24:	43db      	mvns	r3, r3
 8023e26:	0fdb      	lsrs	r3, r3, #31
 8023e28:	b2db      	uxtb	r3, r3
}
 8023e2a:	4618      	mov	r0, r3
 8023e2c:	370c      	adds	r7, #12
 8023e2e:	46bd      	mov	sp, r7
 8023e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e34:	4770      	bx	lr

08023e36 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8023e36:	b480      	push	{r7}
 8023e38:	b083      	sub	sp, #12
 8023e3a:	af00      	add	r7, sp, #0
 8023e3c:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8023e3e:	687b      	ldr	r3, [r7, #4]
 8023e40:	059b      	lsls	r3, r3, #22
 8023e42:	159b      	asrs	r3, r3, #22
 8023e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023e48:	bf0c      	ite	eq
 8023e4a:	2301      	moveq	r3, #1
 8023e4c:	2300      	movne	r3, #0
 8023e4e:	b2db      	uxtb	r3, r3
}
 8023e50:	4618      	mov	r0, r3
 8023e52:	370c      	adds	r7, #12
 8023e54:	46bd      	mov	sp, r7
 8023e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e5a:	4770      	bx	lr

08023e5c <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8023e5c:	b480      	push	{r7}
 8023e5e:	b083      	sub	sp, #12
 8023e60:	af00      	add	r7, sp, #0
 8023e62:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8023e64:	687b      	ldr	r3, [r7, #4]
 8023e66:	0d1b      	lsrs	r3, r3, #20
 8023e68:	b29b      	uxth	r3, r3
 8023e6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8023e6e:	b29b      	uxth	r3, r3
}
 8023e70:	4618      	mov	r0, r3
 8023e72:	370c      	adds	r7, #12
 8023e74:	46bd      	mov	sp, r7
 8023e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e7a:	4770      	bx	lr

08023e7c <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8023e7c:	b480      	push	{r7}
 8023e7e:	b083      	sub	sp, #12
 8023e80:	af00      	add	r7, sp, #0
 8023e82:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8023e84:	687b      	ldr	r3, [r7, #4]
 8023e86:	0d1b      	lsrs	r3, r3, #20
 8023e88:	b29b      	uxth	r3, r3
 8023e8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8023e8e:	b29b      	uxth	r3, r3
}
 8023e90:	4618      	mov	r0, r3
 8023e92:	370c      	adds	r7, #12
 8023e94:	46bd      	mov	sp, r7
 8023e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e9a:	4770      	bx	lr

08023e9c <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 8023e9c:	b480      	push	{r7}
 8023e9e:	b083      	sub	sp, #12
 8023ea0:	af00      	add	r7, sp, #0
 8023ea2:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8023ea4:	687b      	ldr	r3, [r7, #4]
 8023ea6:	0d1b      	lsrs	r3, r3, #20
 8023ea8:	b2db      	uxtb	r3, r3
}
 8023eaa:	4618      	mov	r0, r3
 8023eac:	370c      	adds	r7, #12
 8023eae:	46bd      	mov	sp, r7
 8023eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023eb4:	4770      	bx	lr

08023eb6 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 8023eb6:	b580      	push	{r7, lr}
 8023eb8:	b082      	sub	sp, #8
 8023eba:	af00      	add	r7, sp, #0
 8023ebc:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 8023ebe:	6878      	ldr	r0, [r7, #4]
 8023ec0:	f7ff ffec 	bl	8023e9c <lfs_tag_chunk>
 8023ec4:	4603      	mov	r3, r0
 8023ec6:	b25b      	sxtb	r3, r3
}
 8023ec8:	4618      	mov	r0, r3
 8023eca:	3708      	adds	r7, #8
 8023ecc:	46bd      	mov	sp, r7
 8023ece:	bd80      	pop	{r7, pc}

08023ed0 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8023ed0:	b480      	push	{r7}
 8023ed2:	b083      	sub	sp, #12
 8023ed4:	af00      	add	r7, sp, #0
 8023ed6:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8023ed8:	687b      	ldr	r3, [r7, #4]
 8023eda:	0a9b      	lsrs	r3, r3, #10
 8023edc:	b29b      	uxth	r3, r3
 8023ede:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8023ee2:	b29b      	uxth	r3, r3
}
 8023ee4:	4618      	mov	r0, r3
 8023ee6:	370c      	adds	r7, #12
 8023ee8:	46bd      	mov	sp, r7
 8023eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023eee:	4770      	bx	lr

08023ef0 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8023ef0:	b480      	push	{r7}
 8023ef2:	b083      	sub	sp, #12
 8023ef4:	af00      	add	r7, sp, #0
 8023ef6:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8023ef8:	687b      	ldr	r3, [r7, #4]
 8023efa:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8023efe:	4618      	mov	r0, r3
 8023f00:	370c      	adds	r7, #12
 8023f02:	46bd      	mov	sp, r7
 8023f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f08:	4770      	bx	lr

08023f0a <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8023f0a:	b580      	push	{r7, lr}
 8023f0c:	b082      	sub	sp, #8
 8023f0e:	af00      	add	r7, sp, #0
 8023f10:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8023f12:	6878      	ldr	r0, [r7, #4]
 8023f14:	f7ff ff8f 	bl	8023e36 <lfs_tag_isdelete>
 8023f18:	4603      	mov	r3, r0
 8023f1a:	461a      	mov	r2, r3
 8023f1c:	687b      	ldr	r3, [r7, #4]
 8023f1e:	4413      	add	r3, r2
 8023f20:	4618      	mov	r0, r3
 8023f22:	f7ff ffe5 	bl	8023ef0 <lfs_tag_size>
 8023f26:	4603      	mov	r3, r0
 8023f28:	3304      	adds	r3, #4
}
 8023f2a:	4618      	mov	r0, r3
 8023f2c:	3708      	adds	r7, #8
 8023f2e:	46bd      	mov	sp, r7
 8023f30:	bd80      	pop	{r7, pc}

08023f32 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8023f32:	b480      	push	{r7}
 8023f34:	b085      	sub	sp, #20
 8023f36:	af00      	add	r7, sp, #0
 8023f38:	6078      	str	r0, [r7, #4]
 8023f3a:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8023f3c:	2300      	movs	r3, #0
 8023f3e:	60fb      	str	r3, [r7, #12]
 8023f40:	e012      	b.n	8023f68 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8023f42:	68fb      	ldr	r3, [r7, #12]
 8023f44:	009b      	lsls	r3, r3, #2
 8023f46:	687a      	ldr	r2, [r7, #4]
 8023f48:	4413      	add	r3, r2
 8023f4a:	6819      	ldr	r1, [r3, #0]
 8023f4c:	68fb      	ldr	r3, [r7, #12]
 8023f4e:	009b      	lsls	r3, r3, #2
 8023f50:	683a      	ldr	r2, [r7, #0]
 8023f52:	4413      	add	r3, r2
 8023f54:	681a      	ldr	r2, [r3, #0]
 8023f56:	68fb      	ldr	r3, [r7, #12]
 8023f58:	009b      	lsls	r3, r3, #2
 8023f5a:	6878      	ldr	r0, [r7, #4]
 8023f5c:	4403      	add	r3, r0
 8023f5e:	404a      	eors	r2, r1
 8023f60:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8023f62:	68fb      	ldr	r3, [r7, #12]
 8023f64:	3301      	adds	r3, #1
 8023f66:	60fb      	str	r3, [r7, #12]
 8023f68:	68fb      	ldr	r3, [r7, #12]
 8023f6a:	2b02      	cmp	r3, #2
 8023f6c:	dde9      	ble.n	8023f42 <lfs_gstate_xor+0x10>
    }
}
 8023f6e:	bf00      	nop
 8023f70:	bf00      	nop
 8023f72:	3714      	adds	r7, #20
 8023f74:	46bd      	mov	sp, r7
 8023f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f7a:	4770      	bx	lr

08023f7c <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8023f7c:	b480      	push	{r7}
 8023f7e:	b085      	sub	sp, #20
 8023f80:	af00      	add	r7, sp, #0
 8023f82:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8023f84:	2300      	movs	r3, #0
 8023f86:	60fb      	str	r3, [r7, #12]
 8023f88:	e00b      	b.n	8023fa2 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 8023f8a:	68fb      	ldr	r3, [r7, #12]
 8023f8c:	009b      	lsls	r3, r3, #2
 8023f8e:	687a      	ldr	r2, [r7, #4]
 8023f90:	4413      	add	r3, r2
 8023f92:	681b      	ldr	r3, [r3, #0]
 8023f94:	2b00      	cmp	r3, #0
 8023f96:	d001      	beq.n	8023f9c <lfs_gstate_iszero+0x20>
            return false;
 8023f98:	2300      	movs	r3, #0
 8023f9a:	e006      	b.n	8023faa <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 8023f9c:	68fb      	ldr	r3, [r7, #12]
 8023f9e:	3301      	adds	r3, #1
 8023fa0:	60fb      	str	r3, [r7, #12]
 8023fa2:	68fb      	ldr	r3, [r7, #12]
 8023fa4:	2b02      	cmp	r3, #2
 8023fa6:	ddf0      	ble.n	8023f8a <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 8023fa8:	2301      	movs	r3, #1
}
 8023faa:	4618      	mov	r0, r3
 8023fac:	3714      	adds	r7, #20
 8023fae:	46bd      	mov	sp, r7
 8023fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fb4:	4770      	bx	lr

08023fb6 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 8023fb6:	b580      	push	{r7, lr}
 8023fb8:	b082      	sub	sp, #8
 8023fba:	af00      	add	r7, sp, #0
 8023fbc:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8023fbe:	687b      	ldr	r3, [r7, #4]
 8023fc0:	681b      	ldr	r3, [r3, #0]
 8023fc2:	4618      	mov	r0, r3
 8023fc4:	f7ff ff94 	bl	8023ef0 <lfs_tag_size>
 8023fc8:	4603      	mov	r3, r0
 8023fca:	2b00      	cmp	r3, #0
 8023fcc:	bf14      	ite	ne
 8023fce:	2301      	movne	r3, #1
 8023fd0:	2300      	moveq	r3, #0
 8023fd2:	b2db      	uxtb	r3, r3
}
 8023fd4:	4618      	mov	r0, r3
 8023fd6:	3708      	adds	r7, #8
 8023fd8:	46bd      	mov	sp, r7
 8023fda:	bd80      	pop	{r7, pc}

08023fdc <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 8023fdc:	b580      	push	{r7, lr}
 8023fde:	b082      	sub	sp, #8
 8023fe0:	af00      	add	r7, sp, #0
 8023fe2:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8023fe4:	687b      	ldr	r3, [r7, #4]
 8023fe6:	681b      	ldr	r3, [r3, #0]
 8023fe8:	4618      	mov	r0, r3
 8023fea:	f7ff ff81 	bl	8023ef0 <lfs_tag_size>
 8023fee:	4603      	mov	r3, r0
 8023ff0:	b2db      	uxtb	r3, r3
}
 8023ff2:	4618      	mov	r0, r3
 8023ff4:	3708      	adds	r7, #8
 8023ff6:	46bd      	mov	sp, r7
 8023ff8:	bd80      	pop	{r7, pc}

08023ffa <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 8023ffa:	b580      	push	{r7, lr}
 8023ffc:	b082      	sub	sp, #8
 8023ffe:	af00      	add	r7, sp, #0
 8024000:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8024002:	687b      	ldr	r3, [r7, #4]
 8024004:	681b      	ldr	r3, [r3, #0]
 8024006:	4618      	mov	r0, r3
 8024008:	f7ff ff28 	bl	8023e5c <lfs_tag_type1>
 802400c:	4603      	mov	r3, r0
 802400e:	2b00      	cmp	r3, #0
 8024010:	bf14      	ite	ne
 8024012:	2301      	movne	r3, #1
 8024014:	2300      	moveq	r3, #0
 8024016:	b2db      	uxtb	r3, r3
}
 8024018:	4618      	mov	r0, r3
 802401a:	3708      	adds	r7, #8
 802401c:	46bd      	mov	sp, r7
 802401e:	bd80      	pop	{r7, pc}

08024020 <lfs_gstate_hasmovehere>:
#endif

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8024020:	b580      	push	{r7, lr}
 8024022:	b082      	sub	sp, #8
 8024024:	af00      	add	r7, sp, #0
 8024026:	6078      	str	r0, [r7, #4]
 8024028:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 802402a:	687b      	ldr	r3, [r7, #4]
 802402c:	681b      	ldr	r3, [r3, #0]
 802402e:	4618      	mov	r0, r3
 8024030:	f7ff ff14 	bl	8023e5c <lfs_tag_type1>
 8024034:	4603      	mov	r3, r0
 8024036:	2b00      	cmp	r3, #0
 8024038:	d00a      	beq.n	8024050 <lfs_gstate_hasmovehere+0x30>
 802403a:	687b      	ldr	r3, [r7, #4]
 802403c:	3304      	adds	r3, #4
 802403e:	6839      	ldr	r1, [r7, #0]
 8024040:	4618      	mov	r0, r3
 8024042:	f7ff fe5f 	bl	8023d04 <lfs_pair_cmp>
 8024046:	4603      	mov	r3, r0
 8024048:	2b00      	cmp	r3, #0
 802404a:	d101      	bne.n	8024050 <lfs_gstate_hasmovehere+0x30>
 802404c:	2301      	movs	r3, #1
 802404e:	e000      	b.n	8024052 <lfs_gstate_hasmovehere+0x32>
 8024050:	2300      	movs	r3, #0
 8024052:	f003 0301 	and.w	r3, r3, #1
 8024056:	b2db      	uxtb	r3, r3
}
 8024058:	4618      	mov	r0, r3
 802405a:	3708      	adds	r7, #8
 802405c:	46bd      	mov	sp, r7
 802405e:	bd80      	pop	{r7, pc}

08024060 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8024060:	b580      	push	{r7, lr}
 8024062:	b082      	sub	sp, #8
 8024064:	af00      	add	r7, sp, #0
 8024066:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8024068:	687b      	ldr	r3, [r7, #4]
 802406a:	681b      	ldr	r3, [r3, #0]
 802406c:	4618      	mov	r0, r3
 802406e:	f7ff fa89 	bl	8023584 <lfs_fromle32>
 8024072:	4602      	mov	r2, r0
 8024074:	687b      	ldr	r3, [r7, #4]
 8024076:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8024078:	687b      	ldr	r3, [r7, #4]
 802407a:	685b      	ldr	r3, [r3, #4]
 802407c:	4618      	mov	r0, r3
 802407e:	f7ff fa81 	bl	8023584 <lfs_fromle32>
 8024082:	4602      	mov	r2, r0
 8024084:	687b      	ldr	r3, [r7, #4]
 8024086:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8024088:	687b      	ldr	r3, [r7, #4]
 802408a:	689b      	ldr	r3, [r3, #8]
 802408c:	4618      	mov	r0, r3
 802408e:	f7ff fa79 	bl	8023584 <lfs_fromle32>
 8024092:	4602      	mov	r2, r0
 8024094:	687b      	ldr	r3, [r7, #4]
 8024096:	609a      	str	r2, [r3, #8]
}
 8024098:	bf00      	nop
 802409a:	3708      	adds	r7, #8
 802409c:	46bd      	mov	sp, r7
 802409e:	bd80      	pop	{r7, pc}

080240a0 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 80240a0:	b580      	push	{r7, lr}
 80240a2:	b082      	sub	sp, #8
 80240a4:	af00      	add	r7, sp, #0
 80240a6:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 80240a8:	687b      	ldr	r3, [r7, #4]
 80240aa:	681b      	ldr	r3, [r3, #0]
 80240ac:	4618      	mov	r0, r3
 80240ae:	f7ff fa74 	bl	802359a <lfs_tole32>
 80240b2:	4602      	mov	r2, r0
 80240b4:	687b      	ldr	r3, [r7, #4]
 80240b6:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 80240b8:	687b      	ldr	r3, [r7, #4]
 80240ba:	685b      	ldr	r3, [r3, #4]
 80240bc:	4618      	mov	r0, r3
 80240be:	f7ff fa6c 	bl	802359a <lfs_tole32>
 80240c2:	4602      	mov	r2, r0
 80240c4:	687b      	ldr	r3, [r7, #4]
 80240c6:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 80240c8:	687b      	ldr	r3, [r7, #4]
 80240ca:	689b      	ldr	r3, [r3, #8]
 80240cc:	4618      	mov	r0, r3
 80240ce:	f7ff fa64 	bl	802359a <lfs_tole32>
 80240d2:	4602      	mov	r2, r0
 80240d4:	687b      	ldr	r3, [r7, #4]
 80240d6:	609a      	str	r2, [r3, #8]
}
 80240d8:	bf00      	nop
 80240da:	3708      	adds	r7, #8
 80240dc:	46bd      	mov	sp, r7
 80240de:	bd80      	pop	{r7, pc}

080240e0 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 80240e0:	b580      	push	{r7, lr}
 80240e2:	b082      	sub	sp, #8
 80240e4:	af00      	add	r7, sp, #0
 80240e6:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 80240e8:	687b      	ldr	r3, [r7, #4]
 80240ea:	681b      	ldr	r3, [r3, #0]
 80240ec:	4618      	mov	r0, r3
 80240ee:	f7ff fa49 	bl	8023584 <lfs_fromle32>
 80240f2:	4602      	mov	r2, r0
 80240f4:	687b      	ldr	r3, [r7, #4]
 80240f6:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 80240f8:	687b      	ldr	r3, [r7, #4]
 80240fa:	685b      	ldr	r3, [r3, #4]
 80240fc:	4618      	mov	r0, r3
 80240fe:	f7ff fa41 	bl	8023584 <lfs_fromle32>
 8024102:	4602      	mov	r2, r0
 8024104:	687b      	ldr	r3, [r7, #4]
 8024106:	605a      	str	r2, [r3, #4]
}
 8024108:	bf00      	nop
 802410a:	3708      	adds	r7, #8
 802410c:	46bd      	mov	sp, r7
 802410e:	bd80      	pop	{r7, pc}

08024110 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8024110:	b580      	push	{r7, lr}
 8024112:	b082      	sub	sp, #8
 8024114:	af00      	add	r7, sp, #0
 8024116:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 8024118:	687b      	ldr	r3, [r7, #4]
 802411a:	681b      	ldr	r3, [r3, #0]
 802411c:	4618      	mov	r0, r3
 802411e:	f7ff fa3c 	bl	802359a <lfs_tole32>
 8024122:	4602      	mov	r2, r0
 8024124:	687b      	ldr	r3, [r7, #4]
 8024126:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 8024128:	687b      	ldr	r3, [r7, #4]
 802412a:	685b      	ldr	r3, [r3, #4]
 802412c:	4618      	mov	r0, r3
 802412e:	f7ff fa34 	bl	802359a <lfs_tole32>
 8024132:	4602      	mov	r2, r0
 8024134:	687b      	ldr	r3, [r7, #4]
 8024136:	605a      	str	r2, [r3, #4]
}
 8024138:	bf00      	nop
 802413a:	3708      	adds	r7, #8
 802413c:	46bd      	mov	sp, r7
 802413e:	bd80      	pop	{r7, pc}

08024140 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8024140:	b580      	push	{r7, lr}
 8024142:	b082      	sub	sp, #8
 8024144:	af00      	add	r7, sp, #0
 8024146:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8024148:	687b      	ldr	r3, [r7, #4]
 802414a:	681b      	ldr	r3, [r3, #0]
 802414c:	4618      	mov	r0, r3
 802414e:	f7ff fa19 	bl	8023584 <lfs_fromle32>
 8024152:	4602      	mov	r2, r0
 8024154:	687b      	ldr	r3, [r7, #4]
 8024156:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8024158:	687b      	ldr	r3, [r7, #4]
 802415a:	685b      	ldr	r3, [r3, #4]
 802415c:	4618      	mov	r0, r3
 802415e:	f7ff fa11 	bl	8023584 <lfs_fromle32>
 8024162:	4602      	mov	r2, r0
 8024164:	687b      	ldr	r3, [r7, #4]
 8024166:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8024168:	687b      	ldr	r3, [r7, #4]
 802416a:	689b      	ldr	r3, [r3, #8]
 802416c:	4618      	mov	r0, r3
 802416e:	f7ff fa09 	bl	8023584 <lfs_fromle32>
 8024172:	4602      	mov	r2, r0
 8024174:	687b      	ldr	r3, [r7, #4]
 8024176:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8024178:	687b      	ldr	r3, [r7, #4]
 802417a:	68db      	ldr	r3, [r3, #12]
 802417c:	4618      	mov	r0, r3
 802417e:	f7ff fa01 	bl	8023584 <lfs_fromle32>
 8024182:	4602      	mov	r2, r0
 8024184:	687b      	ldr	r3, [r7, #4]
 8024186:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8024188:	687b      	ldr	r3, [r7, #4]
 802418a:	691b      	ldr	r3, [r3, #16]
 802418c:	4618      	mov	r0, r3
 802418e:	f7ff f9f9 	bl	8023584 <lfs_fromle32>
 8024192:	4602      	mov	r2, r0
 8024194:	687b      	ldr	r3, [r7, #4]
 8024196:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8024198:	687b      	ldr	r3, [r7, #4]
 802419a:	695b      	ldr	r3, [r3, #20]
 802419c:	4618      	mov	r0, r3
 802419e:	f7ff f9f1 	bl	8023584 <lfs_fromle32>
 80241a2:	4602      	mov	r2, r0
 80241a4:	687b      	ldr	r3, [r7, #4]
 80241a6:	615a      	str	r2, [r3, #20]
}
 80241a8:	bf00      	nop
 80241aa:	3708      	adds	r7, #8
 80241ac:	46bd      	mov	sp, r7
 80241ae:	bd80      	pop	{r7, pc}

080241b0 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 80241b0:	b580      	push	{r7, lr}
 80241b2:	b082      	sub	sp, #8
 80241b4:	af00      	add	r7, sp, #0
 80241b6:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 80241b8:	687b      	ldr	r3, [r7, #4]
 80241ba:	681b      	ldr	r3, [r3, #0]
 80241bc:	4618      	mov	r0, r3
 80241be:	f7ff f9ec 	bl	802359a <lfs_tole32>
 80241c2:	4602      	mov	r2, r0
 80241c4:	687b      	ldr	r3, [r7, #4]
 80241c6:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 80241c8:	687b      	ldr	r3, [r7, #4]
 80241ca:	685b      	ldr	r3, [r3, #4]
 80241cc:	4618      	mov	r0, r3
 80241ce:	f7ff f9e4 	bl	802359a <lfs_tole32>
 80241d2:	4602      	mov	r2, r0
 80241d4:	687b      	ldr	r3, [r7, #4]
 80241d6:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 80241d8:	687b      	ldr	r3, [r7, #4]
 80241da:	689b      	ldr	r3, [r3, #8]
 80241dc:	4618      	mov	r0, r3
 80241de:	f7ff f9dc 	bl	802359a <lfs_tole32>
 80241e2:	4602      	mov	r2, r0
 80241e4:	687b      	ldr	r3, [r7, #4]
 80241e6:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 80241e8:	687b      	ldr	r3, [r7, #4]
 80241ea:	68db      	ldr	r3, [r3, #12]
 80241ec:	4618      	mov	r0, r3
 80241ee:	f7ff f9d4 	bl	802359a <lfs_tole32>
 80241f2:	4602      	mov	r2, r0
 80241f4:	687b      	ldr	r3, [r7, #4]
 80241f6:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 80241f8:	687b      	ldr	r3, [r7, #4]
 80241fa:	691b      	ldr	r3, [r3, #16]
 80241fc:	4618      	mov	r0, r3
 80241fe:	f7ff f9cc 	bl	802359a <lfs_tole32>
 8024202:	4602      	mov	r2, r0
 8024204:	687b      	ldr	r3, [r7, #4]
 8024206:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8024208:	687b      	ldr	r3, [r7, #4]
 802420a:	695b      	ldr	r3, [r3, #20]
 802420c:	4618      	mov	r0, r3
 802420e:	f7ff f9c4 	bl	802359a <lfs_tole32>
 8024212:	4602      	mov	r2, r0
 8024214:	687b      	ldr	r3, [r7, #4]
 8024216:	615a      	str	r2, [r3, #20]
}
 8024218:	bf00      	nop
 802421a:	3708      	adds	r7, #8
 802421c:	46bd      	mov	sp, r7
 802421e:	bd80      	pop	{r7, pc}

08024220 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8024220:	b480      	push	{r7}
 8024222:	b085      	sub	sp, #20
 8024224:	af00      	add	r7, sp, #0
 8024226:	6078      	str	r0, [r7, #4]
 8024228:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 802422a:	1d3b      	adds	r3, r7, #4
 802422c:	60fb      	str	r3, [r7, #12]
 802422e:	e009      	b.n	8024244 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8024230:	68fb      	ldr	r3, [r7, #12]
 8024232:	681b      	ldr	r3, [r3, #0]
 8024234:	683a      	ldr	r2, [r7, #0]
 8024236:	429a      	cmp	r2, r3
 8024238:	d101      	bne.n	802423e <lfs_mlist_isopen+0x1e>
            return true;
 802423a:	2301      	movs	r3, #1
 802423c:	e007      	b.n	802424e <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 802423e:	68fb      	ldr	r3, [r7, #12]
 8024240:	681b      	ldr	r3, [r3, #0]
 8024242:	60fb      	str	r3, [r7, #12]
 8024244:	68fb      	ldr	r3, [r7, #12]
 8024246:	681b      	ldr	r3, [r3, #0]
 8024248:	2b00      	cmp	r3, #0
 802424a:	d1f1      	bne.n	8024230 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 802424c:	2300      	movs	r3, #0
}
 802424e:	4618      	mov	r0, r3
 8024250:	3714      	adds	r7, #20
 8024252:	46bd      	mov	sp, r7
 8024254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024258:	4770      	bx	lr

0802425a <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 802425a:	b480      	push	{r7}
 802425c:	b085      	sub	sp, #20
 802425e:	af00      	add	r7, sp, #0
 8024260:	6078      	str	r0, [r7, #4]
 8024262:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8024264:	687b      	ldr	r3, [r7, #4]
 8024266:	3328      	adds	r3, #40	; 0x28
 8024268:	60fb      	str	r3, [r7, #12]
 802426a:	e00d      	b.n	8024288 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 802426c:	68fb      	ldr	r3, [r7, #12]
 802426e:	681b      	ldr	r3, [r3, #0]
 8024270:	683a      	ldr	r2, [r7, #0]
 8024272:	429a      	cmp	r2, r3
 8024274:	d105      	bne.n	8024282 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8024276:	68fb      	ldr	r3, [r7, #12]
 8024278:	681b      	ldr	r3, [r3, #0]
 802427a:	681a      	ldr	r2, [r3, #0]
 802427c:	68fb      	ldr	r3, [r7, #12]
 802427e:	601a      	str	r2, [r3, #0]
            break;
 8024280:	e007      	b.n	8024292 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8024282:	68fb      	ldr	r3, [r7, #12]
 8024284:	681b      	ldr	r3, [r3, #0]
 8024286:	60fb      	str	r3, [r7, #12]
 8024288:	68fb      	ldr	r3, [r7, #12]
 802428a:	681b      	ldr	r3, [r3, #0]
 802428c:	2b00      	cmp	r3, #0
 802428e:	d1ed      	bne.n	802426c <lfs_mlist_remove+0x12>
        }
    }
}
 8024290:	bf00      	nop
 8024292:	bf00      	nop
 8024294:	3714      	adds	r7, #20
 8024296:	46bd      	mov	sp, r7
 8024298:	f85d 7b04 	ldr.w	r7, [sp], #4
 802429c:	4770      	bx	lr

0802429e <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 802429e:	b480      	push	{r7}
 80242a0:	b083      	sub	sp, #12
 80242a2:	af00      	add	r7, sp, #0
 80242a4:	6078      	str	r0, [r7, #4]
 80242a6:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 80242a8:	687b      	ldr	r3, [r7, #4]
 80242aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80242ac:	683b      	ldr	r3, [r7, #0]
 80242ae:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 80242b0:	687b      	ldr	r3, [r7, #4]
 80242b2:	683a      	ldr	r2, [r7, #0]
 80242b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80242b6:	bf00      	nop
 80242b8:	370c      	adds	r7, #12
 80242ba:	46bd      	mov	sp, r7
 80242bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242c0:	4770      	bx	lr

080242c2 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 80242c2:	b480      	push	{r7}
 80242c4:	b085      	sub	sp, #20
 80242c6:	af00      	add	r7, sp, #0
 80242c8:	6078      	str	r0, [r7, #4]
 80242ca:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 80242cc:	687b      	ldr	r3, [r7, #4]
 80242ce:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 80242d0:	68fb      	ldr	r3, [r7, #12]
 80242d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80242d4:	683a      	ldr	r2, [r7, #0]
 80242d6:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 80242d8:	68fb      	ldr	r3, [r7, #12]
 80242da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80242dc:	6a1b      	ldr	r3, [r3, #32]
 80242de:	4413      	add	r3, r2
 80242e0:	68fa      	ldr	r2, [r7, #12]
 80242e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80242e4:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 80242e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80242ea:	fb01 f202 	mul.w	r2, r1, r2
 80242ee:	1a9b      	subs	r3, r3, r2
 80242f0:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 80242f2:	68fb      	ldr	r3, [r7, #12]
 80242f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80242f6:	68ba      	ldr	r2, [r7, #8]
 80242f8:	429a      	cmp	r2, r3
 80242fa:	d212      	bcs.n	8024322 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 80242fc:	68fb      	ldr	r3, [r7, #12]
 80242fe:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8024300:	68bb      	ldr	r3, [r7, #8]
 8024302:	095b      	lsrs	r3, r3, #5
 8024304:	009a      	lsls	r2, r3, #2
 8024306:	440a      	add	r2, r1
 8024308:	6811      	ldr	r1, [r2, #0]
 802430a:	68ba      	ldr	r2, [r7, #8]
 802430c:	f002 021f 	and.w	r2, r2, #31
 8024310:	2001      	movs	r0, #1
 8024312:	fa00 f202 	lsl.w	r2, r0, r2
 8024316:	68f8      	ldr	r0, [r7, #12]
 8024318:	6e40      	ldr	r0, [r0, #100]	; 0x64
 802431a:	009b      	lsls	r3, r3, #2
 802431c:	4403      	add	r3, r0
 802431e:	430a      	orrs	r2, r1
 8024320:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8024322:	2300      	movs	r3, #0
}
 8024324:	4618      	mov	r0, r3
 8024326:	3714      	adds	r7, #20
 8024328:	46bd      	mov	sp, r7
 802432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802432e:	4770      	bx	lr

08024330 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8024330:	b480      	push	{r7}
 8024332:	b083      	sub	sp, #12
 8024334:	af00      	add	r7, sp, #0
 8024336:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 8024338:	687b      	ldr	r3, [r7, #4]
 802433a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802433c:	6a1a      	ldr	r2, [r3, #32]
 802433e:	687b      	ldr	r3, [r7, #4]
 8024340:	661a      	str	r2, [r3, #96]	; 0x60
}
 8024342:	bf00      	nop
 8024344:	370c      	adds	r7, #12
 8024346:	46bd      	mov	sp, r7
 8024348:	f85d 7b04 	ldr.w	r7, [sp], #4
 802434c:	4770      	bx	lr

0802434e <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 802434e:	b580      	push	{r7, lr}
 8024350:	b082      	sub	sp, #8
 8024352:	af00      	add	r7, sp, #0
 8024354:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 8024356:	687b      	ldr	r3, [r7, #4]
 8024358:	2200      	movs	r2, #0
 802435a:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 802435c:	687b      	ldr	r3, [r7, #4]
 802435e:	2200      	movs	r2, #0
 8024360:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 8024362:	6878      	ldr	r0, [r7, #4]
 8024364:	f7ff ffe4 	bl	8024330 <lfs_alloc_ack>
}
 8024368:	bf00      	nop
 802436a:	3708      	adds	r7, #8
 802436c:	46bd      	mov	sp, r7
 802436e:	bd80      	pop	{r7, pc}

08024370 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8024370:	b580      	push	{r7, lr}
 8024372:	b086      	sub	sp, #24
 8024374:	af02      	add	r7, sp, #8
 8024376:	6078      	str	r0, [r7, #4]
 8024378:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 802437a:	e04f      	b.n	802441c <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 802437c:	687b      	ldr	r3, [r7, #4]
 802437e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024380:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 8024382:	687b      	ldr	r3, [r7, #4]
 8024384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024386:	1c5a      	adds	r2, r3, #1
 8024388:	687b      	ldr	r3, [r7, #4]
 802438a:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 802438c:	687b      	ldr	r3, [r7, #4]
 802438e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8024390:	1e5a      	subs	r2, r3, #1
 8024392:	687b      	ldr	r3, [r7, #4]
 8024394:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8024396:	687b      	ldr	r3, [r7, #4]
 8024398:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 802439a:	68bb      	ldr	r3, [r7, #8]
 802439c:	095b      	lsrs	r3, r3, #5
 802439e:	009b      	lsls	r3, r3, #2
 80243a0:	4413      	add	r3, r2
 80243a2:	681a      	ldr	r2, [r3, #0]
 80243a4:	68bb      	ldr	r3, [r7, #8]
 80243a6:	f003 031f 	and.w	r3, r3, #31
 80243aa:	2101      	movs	r1, #1
 80243ac:	fa01 f303 	lsl.w	r3, r1, r3
 80243b0:	4013      	ands	r3, r2
 80243b2:	2b00      	cmp	r3, #0
 80243b4:	d132      	bne.n	802441c <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 80243b6:	687b      	ldr	r3, [r7, #4]
 80243b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80243ba:	68bb      	ldr	r3, [r7, #8]
 80243bc:	4413      	add	r3, r2
 80243be:	687a      	ldr	r2, [r7, #4]
 80243c0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80243c2:	6a12      	ldr	r2, [r2, #32]
 80243c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80243c8:	fb01 f202 	mul.w	r2, r1, r2
 80243cc:	1a9a      	subs	r2, r3, r2
 80243ce:	683b      	ldr	r3, [r7, #0]
 80243d0:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 80243d2:	e009      	b.n	80243e8 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 80243d4:	687b      	ldr	r3, [r7, #4]
 80243d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80243d8:	1c5a      	adds	r2, r3, #1
 80243da:	687b      	ldr	r3, [r7, #4]
 80243dc:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 80243de:	687b      	ldr	r3, [r7, #4]
 80243e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80243e2:	1e5a      	subs	r2, r3, #1
 80243e4:	687b      	ldr	r3, [r7, #4]
 80243e6:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 80243e8:	687b      	ldr	r3, [r7, #4]
 80243ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80243ec:	687b      	ldr	r3, [r7, #4]
 80243ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80243f0:	429a      	cmp	r2, r3
 80243f2:	d011      	beq.n	8024418 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 80243f4:	687b      	ldr	r3, [r7, #4]
 80243f6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80243f8:	687b      	ldr	r3, [r7, #4]
 80243fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80243fc:	095b      	lsrs	r3, r3, #5
 80243fe:	009b      	lsls	r3, r3, #2
 8024400:	4413      	add	r3, r2
 8024402:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 8024404:	687b      	ldr	r3, [r7, #4]
 8024406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024408:	f003 031f 	and.w	r3, r3, #31
 802440c:	2101      	movs	r1, #1
 802440e:	fa01 f303 	lsl.w	r3, r1, r3
 8024412:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 8024414:	2b00      	cmp	r3, #0
 8024416:	d1dd      	bne.n	80243d4 <lfs_alloc+0x64>
                }

                return 0;
 8024418:	2300      	movs	r3, #0
 802441a:	e050      	b.n	80244be <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 802441c:	687b      	ldr	r3, [r7, #4]
 802441e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8024420:	687b      	ldr	r3, [r7, #4]
 8024422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024424:	429a      	cmp	r2, r3
 8024426:	d1a9      	bne.n	802437c <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8024428:	687b      	ldr	r3, [r7, #4]
 802442a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802442c:	2b00      	cmp	r3, #0
 802442e:	d10f      	bne.n	8024450 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 8024430:	687b      	ldr	r3, [r7, #4]
 8024432:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8024434:	687b      	ldr	r3, [r7, #4]
 8024436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024438:	4413      	add	r3, r2
 802443a:	4a23      	ldr	r2, [pc, #140]	; (80244c8 <lfs_alloc+0x158>)
 802443c:	9200      	str	r2, [sp, #0]
 802443e:	f240 2247 	movw	r2, #583	; 0x247
 8024442:	4922      	ldr	r1, [pc, #136]	; (80244cc <lfs_alloc+0x15c>)
 8024444:	4822      	ldr	r0, [pc, #136]	; (80244d0 <lfs_alloc+0x160>)
 8024446:	f008 ffab 	bl	802d3a0 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 802444a:	f06f 031b 	mvn.w	r3, #27
 802444e:	e036      	b.n	80244be <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 8024450:	687b      	ldr	r3, [r7, #4]
 8024452:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8024454:	687b      	ldr	r3, [r7, #4]
 8024456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024458:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 802445a:	687a      	ldr	r2, [r7, #4]
 802445c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802445e:	6a12      	ldr	r2, [r2, #32]
 8024460:	fbb3 f1f2 	udiv	r1, r3, r2
 8024464:	fb01 f202 	mul.w	r2, r1, r2
 8024468:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 802446a:	687b      	ldr	r3, [r7, #4]
 802446c:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 802446e:	687b      	ldr	r3, [r7, #4]
 8024470:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024474:	00da      	lsls	r2, r3, #3
 8024476:	687b      	ldr	r3, [r7, #4]
 8024478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802447a:	4619      	mov	r1, r3
 802447c:	4610      	mov	r0, r2
 802447e:	f7ff f811 	bl	80234a4 <lfs_min>
 8024482:	4602      	mov	r2, r0
 8024484:	687b      	ldr	r3, [r7, #4]
 8024486:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8024488:	687b      	ldr	r3, [r7, #4]
 802448a:	2200      	movs	r2, #0
 802448c:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 802448e:	687b      	ldr	r3, [r7, #4]
 8024490:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8024492:	687b      	ldr	r3, [r7, #4]
 8024494:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024498:	461a      	mov	r2, r3
 802449a:	2100      	movs	r1, #0
 802449c:	f009 f916 	bl	802d6cc <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 80244a0:	2301      	movs	r3, #1
 80244a2:	687a      	ldr	r2, [r7, #4]
 80244a4:	490b      	ldr	r1, [pc, #44]	; (80244d4 <lfs_alloc+0x164>)
 80244a6:	6878      	ldr	r0, [r7, #4]
 80244a8:	f005 fb3e 	bl	8029b28 <lfs_fs_rawtraverse>
 80244ac:	60f8      	str	r0, [r7, #12]
        if (err) {
 80244ae:	68fb      	ldr	r3, [r7, #12]
 80244b0:	2b00      	cmp	r3, #0
 80244b2:	f43f af62 	beq.w	802437a <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 80244b6:	6878      	ldr	r0, [r7, #4]
 80244b8:	f7ff ff49 	bl	802434e <lfs_alloc_drop>
            return err;
 80244bc:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 80244be:	4618      	mov	r0, r3
 80244c0:	3710      	adds	r7, #16
 80244c2:	46bd      	mov	sp, r7
 80244c4:	bd80      	pop	{r7, pc}
 80244c6:	bf00      	nop
 80244c8:	0803342c 	.word	0x0803342c
 80244cc:	08033318 	.word	0x08033318
 80244d0:	08033404 	.word	0x08033404
 80244d4:	080242c3 	.word	0x080242c3

080244d8 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 80244d8:	b590      	push	{r4, r7, lr}
 80244da:	b08f      	sub	sp, #60	; 0x3c
 80244dc:	af04      	add	r7, sp, #16
 80244de:	60f8      	str	r0, [r7, #12]
 80244e0:	60b9      	str	r1, [r7, #8]
 80244e2:	607a      	str	r2, [r7, #4]
 80244e4:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 80244e6:	68bb      	ldr	r3, [r7, #8]
 80244e8:	68db      	ldr	r3, [r3, #12]
 80244ea:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 80244ec:	68bb      	ldr	r3, [r7, #8]
 80244ee:	691b      	ldr	r3, [r3, #16]
 80244f0:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 80244f2:	2300      	movs	r3, #0
 80244f4:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 80244f6:	68fb      	ldr	r3, [r7, #12]
 80244f8:	333c      	adds	r3, #60	; 0x3c
 80244fa:	68ba      	ldr	r2, [r7, #8]
 80244fc:	4611      	mov	r1, r2
 80244fe:	4618      	mov	r0, r3
 8024500:	f7ff fd8e 	bl	8024020 <lfs_gstate_hasmovehere>
 8024504:	4603      	mov	r3, r0
 8024506:	2b00      	cmp	r3, #0
 8024508:	f000 80ba 	beq.w	8024680 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(gmask) != 0 &&
 802450c:	6878      	ldr	r0, [r7, #4]
 802450e:	f7ff fcdf 	bl	8023ed0 <lfs_tag_id>
 8024512:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8024514:	2b00      	cmp	r3, #0
 8024516:	f000 80b3 	beq.w	8024680 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 802451a:	68fb      	ldr	r3, [r7, #12]
 802451c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802451e:	4618      	mov	r0, r3
 8024520:	f7ff fcd6 	bl	8023ed0 <lfs_tag_id>
 8024524:	4603      	mov	r3, r0
 8024526:	461c      	mov	r4, r3
 8024528:	6838      	ldr	r0, [r7, #0]
 802452a:	f7ff fcd1 	bl	8023ed0 <lfs_tag_id>
 802452e:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8024530:	429c      	cmp	r4, r3
 8024532:	f200 80a5 	bhi.w	8024680 <lfs_dir_getslice+0x1a8>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8024536:	6a3b      	ldr	r3, [r7, #32]
 8024538:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 802453c:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 802453e:	e09f      	b.n	8024680 <lfs_dir_getslice+0x1a8>
        off -= lfs_tag_dsize(ntag);
 8024540:	693b      	ldr	r3, [r7, #16]
 8024542:	4618      	mov	r0, r3
 8024544:	f7ff fce1 	bl	8023f0a <lfs_tag_dsize>
 8024548:	4602      	mov	r2, r0
 802454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802454c:	1a9b      	subs	r3, r3, r2
 802454e:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8024550:	693b      	ldr	r3, [r7, #16]
 8024552:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8024554:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 8024556:	68bb      	ldr	r3, [r7, #8]
 8024558:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 802455a:	2204      	movs	r2, #4
 802455c:	9203      	str	r2, [sp, #12]
 802455e:	f107 0210 	add.w	r2, r7, #16
 8024562:	9202      	str	r2, [sp, #8]
 8024564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024566:	9201      	str	r2, [sp, #4]
 8024568:	9300      	str	r3, [sp, #0]
 802456a:	2304      	movs	r3, #4
 802456c:	460a      	mov	r2, r1
 802456e:	2100      	movs	r1, #0
 8024570:	68f8      	ldr	r0, [r7, #12]
 8024572:	f7ff f873 	bl	802365c <lfs_bd_read>
 8024576:	61b8      	str	r0, [r7, #24]
        if (err) {
 8024578:	69bb      	ldr	r3, [r7, #24]
 802457a:	2b00      	cmp	r3, #0
 802457c:	d001      	beq.n	8024582 <lfs_dir_getslice+0xaa>
            return err;
 802457e:	69bb      	ldr	r3, [r7, #24]
 8024580:	e08a      	b.n	8024698 <lfs_dir_getslice+0x1c0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8024582:	693b      	ldr	r3, [r7, #16]
 8024584:	4618      	mov	r0, r3
 8024586:	f7ff f814 	bl	80235b2 <lfs_frombe32>
 802458a:	4602      	mov	r2, r0
 802458c:	69fb      	ldr	r3, [r7, #28]
 802458e:	4053      	eors	r3, r2
 8024590:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024594:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8024596:	6878      	ldr	r0, [r7, #4]
 8024598:	f7ff fc9a 	bl	8023ed0 <lfs_tag_id>
 802459c:	4603      	mov	r3, r0
 802459e:	2b00      	cmp	r3, #0
 80245a0:	d02b      	beq.n	80245fa <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80245a2:	69f8      	ldr	r0, [r7, #28]
 80245a4:	f7ff fc5a 	bl	8023e5c <lfs_tag_type1>
 80245a8:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 80245aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80245ae:	d124      	bne.n	80245fa <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 80245b0:	69f8      	ldr	r0, [r7, #28]
 80245b2:	f7ff fc8d 	bl	8023ed0 <lfs_tag_id>
 80245b6:	4603      	mov	r3, r0
 80245b8:	461c      	mov	r4, r3
 80245ba:	6a3b      	ldr	r3, [r7, #32]
 80245bc:	683a      	ldr	r2, [r7, #0]
 80245be:	1ad3      	subs	r3, r2, r3
 80245c0:	4618      	mov	r0, r3
 80245c2:	f7ff fc85 	bl	8023ed0 <lfs_tag_id>
 80245c6:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80245c8:	429c      	cmp	r4, r3
 80245ca:	d816      	bhi.n	80245fa <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 80245cc:	6a3b      	ldr	r3, [r7, #32]
 80245ce:	683a      	ldr	r2, [r7, #0]
 80245d0:	1ad2      	subs	r2, r2, r3
 80245d2:	4b33      	ldr	r3, [pc, #204]	; (80246a0 <lfs_dir_getslice+0x1c8>)
 80245d4:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 80245d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80245da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80245de:	69fa      	ldr	r2, [r7, #28]
 80245e0:	429a      	cmp	r2, r3
 80245e2:	d102      	bne.n	80245ea <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 80245e4:	f06f 0301 	mvn.w	r3, #1
 80245e8:	e056      	b.n	8024698 <lfs_dir_getslice+0x1c0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80245ea:	69f8      	ldr	r0, [r7, #28]
 80245ec:	f7ff fc63 	bl	8023eb6 <lfs_tag_splice>
 80245f0:	4603      	mov	r3, r0
 80245f2:	029a      	lsls	r2, r3, #10
 80245f4:	6a3b      	ldr	r3, [r7, #32]
 80245f6:	4413      	add	r3, r2
 80245f8:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 80245fa:	687a      	ldr	r2, [r7, #4]
 80245fc:	69fb      	ldr	r3, [r7, #28]
 80245fe:	401a      	ands	r2, r3
 8024600:	6a3b      	ldr	r3, [r7, #32]
 8024602:	6839      	ldr	r1, [r7, #0]
 8024604:	1ac9      	subs	r1, r1, r3
 8024606:	687b      	ldr	r3, [r7, #4]
 8024608:	400b      	ands	r3, r1
 802460a:	429a      	cmp	r2, r3
 802460c:	d138      	bne.n	8024680 <lfs_dir_getslice+0x1a8>
            if (lfs_tag_isdelete(tag)) {
 802460e:	69f8      	ldr	r0, [r7, #28]
 8024610:	f7ff fc11 	bl	8023e36 <lfs_tag_isdelete>
 8024614:	4603      	mov	r3, r0
 8024616:	2b00      	cmp	r3, #0
 8024618:	d002      	beq.n	8024620 <lfs_dir_getslice+0x148>
                return LFS_ERR_NOENT;
 802461a:	f06f 0301 	mvn.w	r3, #1
 802461e:	e03b      	b.n	8024698 <lfs_dir_getslice+0x1c0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8024620:	69f8      	ldr	r0, [r7, #28]
 8024622:	f7ff fc65 	bl	8023ef0 <lfs_tag_size>
 8024626:	4603      	mov	r3, r0
 8024628:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802462a:	4618      	mov	r0, r3
 802462c:	f7fe ff3a 	bl	80234a4 <lfs_min>
 8024630:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8024632:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8024634:	68bb      	ldr	r3, [r7, #8]
 8024636:	681b      	ldr	r3, [r3, #0]
 8024638:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802463a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802463c:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 802463e:	3204      	adds	r2, #4
 8024640:	6979      	ldr	r1, [r7, #20]
 8024642:	9103      	str	r1, [sp, #12]
 8024644:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8024646:	9102      	str	r1, [sp, #8]
 8024648:	9201      	str	r2, [sp, #4]
 802464a:	9300      	str	r3, [sp, #0]
 802464c:	697b      	ldr	r3, [r7, #20]
 802464e:	4602      	mov	r2, r0
 8024650:	2100      	movs	r1, #0
 8024652:	68f8      	ldr	r0, [r7, #12]
 8024654:	f7ff f802 	bl	802365c <lfs_bd_read>
 8024658:	61b8      	str	r0, [r7, #24]
            if (err) {
 802465a:	69bb      	ldr	r3, [r7, #24]
 802465c:	2b00      	cmp	r3, #0
 802465e:	d001      	beq.n	8024664 <lfs_dir_getslice+0x18c>
                return err;
 8024660:	69bb      	ldr	r3, [r7, #24]
 8024662:	e019      	b.n	8024698 <lfs_dir_getslice+0x1c0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8024664:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8024666:	697b      	ldr	r3, [r7, #20]
 8024668:	18d0      	adds	r0, r2, r3
 802466a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802466c:	697b      	ldr	r3, [r7, #20]
 802466e:	1ad3      	subs	r3, r2, r3
 8024670:	461a      	mov	r2, r3
 8024672:	2100      	movs	r1, #0
 8024674:	f009 f82a 	bl	802d6cc <memset>

            return tag + gdiff;
 8024678:	6a3a      	ldr	r2, [r7, #32]
 802467a:	69fb      	ldr	r3, [r7, #28]
 802467c:	4413      	add	r3, r2
 802467e:	e00b      	b.n	8024698 <lfs_dir_getslice+0x1c0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8024680:	693b      	ldr	r3, [r7, #16]
 8024682:	4618      	mov	r0, r3
 8024684:	f7ff fc41 	bl	8023f0a <lfs_tag_dsize>
 8024688:	4603      	mov	r3, r0
 802468a:	3304      	adds	r3, #4
 802468c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802468e:	429a      	cmp	r2, r3
 8024690:	f4bf af56 	bcs.w	8024540 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 8024694:	f06f 0301 	mvn.w	r3, #1
}
 8024698:	4618      	mov	r0, r3
 802469a:	372c      	adds	r7, #44	; 0x2c
 802469c:	46bd      	mov	sp, r7
 802469e:	bd90      	pop	{r4, r7, pc}
 80246a0:	000ffc00 	.word	0x000ffc00

080246a4 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 80246a4:	b580      	push	{r7, lr}
 80246a6:	b088      	sub	sp, #32
 80246a8:	af04      	add	r7, sp, #16
 80246aa:	60f8      	str	r0, [r7, #12]
 80246ac:	60b9      	str	r1, [r7, #8]
 80246ae:	607a      	str	r2, [r7, #4]
 80246b0:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 80246b2:	6838      	ldr	r0, [r7, #0]
 80246b4:	f7ff fc1c 	bl	8023ef0 <lfs_tag_size>
 80246b8:	4603      	mov	r3, r0
 80246ba:	9302      	str	r3, [sp, #8]
 80246bc:	69bb      	ldr	r3, [r7, #24]
 80246be:	9301      	str	r3, [sp, #4]
 80246c0:	2300      	movs	r3, #0
 80246c2:	9300      	str	r3, [sp, #0]
 80246c4:	683b      	ldr	r3, [r7, #0]
 80246c6:	687a      	ldr	r2, [r7, #4]
 80246c8:	68b9      	ldr	r1, [r7, #8]
 80246ca:	68f8      	ldr	r0, [r7, #12]
 80246cc:	f7ff ff04 	bl	80244d8 <lfs_dir_getslice>
 80246d0:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 80246d2:	4618      	mov	r0, r3
 80246d4:	3710      	adds	r7, #16
 80246d6:	46bd      	mov	sp, r7
 80246d8:	bd80      	pop	{r7, pc}

080246da <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 80246da:	b580      	push	{r7, lr}
 80246dc:	b08c      	sub	sp, #48	; 0x30
 80246de:	af04      	add	r7, sp, #16
 80246e0:	60f8      	str	r0, [r7, #12]
 80246e2:	60b9      	str	r1, [r7, #8]
 80246e4:	607a      	str	r2, [r7, #4]
 80246e6:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80246e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80246ea:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 80246ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80246ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80246f0:	441a      	add	r2, r3
 80246f2:	68fb      	ldr	r3, [r7, #12]
 80246f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80246f6:	69db      	ldr	r3, [r3, #28]
 80246f8:	429a      	cmp	r2, r3
 80246fa:	f240 80c0 	bls.w	802487e <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 80246fe:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8024702:	e0c1      	b.n	8024888 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8024704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024706:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8024708:	687b      	ldr	r3, [r7, #4]
 802470a:	2b00      	cmp	r3, #0
 802470c:	d03f      	beq.n	802478e <lfs_dir_getread+0xb4>
 802470e:	687b      	ldr	r3, [r7, #4]
 8024710:	681b      	ldr	r3, [r3, #0]
 8024712:	f113 0f02 	cmn.w	r3, #2
 8024716:	d13a      	bne.n	802478e <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8024718:	687b      	ldr	r3, [r7, #4]
 802471a:	685a      	ldr	r2, [r3, #4]
 802471c:	687b      	ldr	r3, [r7, #4]
 802471e:	689b      	ldr	r3, [r3, #8]
 8024720:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8024722:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024724:	429a      	cmp	r2, r3
 8024726:	d232      	bcs.n	802478e <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8024728:	687b      	ldr	r3, [r7, #4]
 802472a:	685b      	ldr	r3, [r3, #4]
 802472c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802472e:	429a      	cmp	r2, r3
 8024730:	d324      	bcc.n	802477c <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8024732:	687b      	ldr	r3, [r7, #4]
 8024734:	689a      	ldr	r2, [r3, #8]
 8024736:	687b      	ldr	r3, [r7, #4]
 8024738:	6859      	ldr	r1, [r3, #4]
 802473a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802473c:	1acb      	subs	r3, r1, r3
 802473e:	4413      	add	r3, r2
 8024740:	4619      	mov	r1, r3
 8024742:	69b8      	ldr	r0, [r7, #24]
 8024744:	f7fe feae 	bl	80234a4 <lfs_min>
 8024748:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 802474a:	687b      	ldr	r3, [r7, #4]
 802474c:	68da      	ldr	r2, [r3, #12]
 802474e:	687b      	ldr	r3, [r7, #4]
 8024750:	685b      	ldr	r3, [r3, #4]
 8024752:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8024754:	1acb      	subs	r3, r1, r3
 8024756:	4413      	add	r3, r2
 8024758:	69ba      	ldr	r2, [r7, #24]
 802475a:	4619      	mov	r1, r3
 802475c:	69f8      	ldr	r0, [r7, #28]
 802475e:	f009 f98a 	bl	802da76 <memcpy>

                data += diff;
 8024762:	69fa      	ldr	r2, [r7, #28]
 8024764:	69bb      	ldr	r3, [r7, #24]
 8024766:	4413      	add	r3, r2
 8024768:	61fb      	str	r3, [r7, #28]
                off += diff;
 802476a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802476c:	69bb      	ldr	r3, [r7, #24]
 802476e:	4413      	add	r3, r2
 8024770:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8024772:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8024774:	69bb      	ldr	r3, [r7, #24]
 8024776:	1ad3      	subs	r3, r2, r3
 8024778:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 802477a:	e080      	b.n	802487e <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 802477c:	687b      	ldr	r3, [r7, #4]
 802477e:	685a      	ldr	r2, [r3, #4]
 8024780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024782:	1ad3      	subs	r3, r2, r3
 8024784:	4619      	mov	r1, r3
 8024786:	69b8      	ldr	r0, [r7, #24]
 8024788:	f7fe fe8c 	bl	80234a4 <lfs_min>
 802478c:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 802478e:	683b      	ldr	r3, [r7, #0]
 8024790:	681b      	ldr	r3, [r3, #0]
 8024792:	f113 0f02 	cmn.w	r3, #2
 8024796:	d13a      	bne.n	802480e <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8024798:	683b      	ldr	r3, [r7, #0]
 802479a:	685a      	ldr	r2, [r3, #4]
 802479c:	683b      	ldr	r3, [r7, #0]
 802479e:	689b      	ldr	r3, [r3, #8]
 80247a0:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 80247a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80247a4:	429a      	cmp	r2, r3
 80247a6:	d232      	bcs.n	802480e <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 80247a8:	683b      	ldr	r3, [r7, #0]
 80247aa:	685b      	ldr	r3, [r3, #4]
 80247ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80247ae:	429a      	cmp	r2, r3
 80247b0:	d324      	bcc.n	80247fc <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 80247b2:	683b      	ldr	r3, [r7, #0]
 80247b4:	689a      	ldr	r2, [r3, #8]
 80247b6:	683b      	ldr	r3, [r7, #0]
 80247b8:	6859      	ldr	r1, [r3, #4]
 80247ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80247bc:	1acb      	subs	r3, r1, r3
 80247be:	4413      	add	r3, r2
 80247c0:	4619      	mov	r1, r3
 80247c2:	69b8      	ldr	r0, [r7, #24]
 80247c4:	f7fe fe6e 	bl	80234a4 <lfs_min>
 80247c8:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 80247ca:	683b      	ldr	r3, [r7, #0]
 80247cc:	68da      	ldr	r2, [r3, #12]
 80247ce:	683b      	ldr	r3, [r7, #0]
 80247d0:	685b      	ldr	r3, [r3, #4]
 80247d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80247d4:	1acb      	subs	r3, r1, r3
 80247d6:	4413      	add	r3, r2
 80247d8:	69ba      	ldr	r2, [r7, #24]
 80247da:	4619      	mov	r1, r3
 80247dc:	69f8      	ldr	r0, [r7, #28]
 80247de:	f009 f94a 	bl	802da76 <memcpy>

                data += diff;
 80247e2:	69fa      	ldr	r2, [r7, #28]
 80247e4:	69bb      	ldr	r3, [r7, #24]
 80247e6:	4413      	add	r3, r2
 80247e8:	61fb      	str	r3, [r7, #28]
                off += diff;
 80247ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80247ec:	69bb      	ldr	r3, [r7, #24]
 80247ee:	4413      	add	r3, r2
 80247f0:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80247f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80247f4:	69bb      	ldr	r3, [r7, #24]
 80247f6:	1ad3      	subs	r3, r2, r3
 80247f8:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80247fa:	e040      	b.n	802487e <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 80247fc:	683b      	ldr	r3, [r7, #0]
 80247fe:	685a      	ldr	r2, [r3, #4]
 8024800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024802:	1ad3      	subs	r3, r2, r3
 8024804:	4619      	mov	r1, r3
 8024806:	69b8      	ldr	r0, [r7, #24]
 8024808:	f7fe fe4c 	bl	80234a4 <lfs_min>
 802480c:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 802480e:	683b      	ldr	r3, [r7, #0]
 8024810:	f06f 0201 	mvn.w	r2, #1
 8024814:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8024816:	68fb      	ldr	r3, [r7, #12]
 8024818:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802481a:	695b      	ldr	r3, [r3, #20]
 802481c:	4619      	mov	r1, r3
 802481e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8024820:	f7fe fe50 	bl	80234c4 <lfs_aligndown>
 8024824:	4602      	mov	r2, r0
 8024826:	683b      	ldr	r3, [r7, #0]
 8024828:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 802482a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802482c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802482e:	441a      	add	r2, r3
 8024830:	68fb      	ldr	r3, [r7, #12]
 8024832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024834:	695b      	ldr	r3, [r3, #20]
 8024836:	4619      	mov	r1, r3
 8024838:	4610      	mov	r0, r2
 802483a:	f7fe fe58 	bl	80234ee <lfs_alignup>
 802483e:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8024840:	68fb      	ldr	r3, [r7, #12]
 8024842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8024846:	4619      	mov	r1, r3
 8024848:	4610      	mov	r0, r2
 802484a:	f7fe fe2b 	bl	80234a4 <lfs_min>
 802484e:	4602      	mov	r2, r0
 8024850:	683b      	ldr	r3, [r7, #0]
 8024852:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8024854:	683b      	ldr	r3, [r7, #0]
 8024856:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8024858:	683a      	ldr	r2, [r7, #0]
 802485a:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 802485c:	6839      	ldr	r1, [r7, #0]
 802485e:	6889      	ldr	r1, [r1, #8]
 8024860:	9102      	str	r1, [sp, #8]
 8024862:	9201      	str	r2, [sp, #4]
 8024864:	9300      	str	r3, [sp, #0]
 8024866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802486a:	68b9      	ldr	r1, [r7, #8]
 802486c:	68f8      	ldr	r0, [r7, #12]
 802486e:	f7ff fe33 	bl	80244d8 <lfs_dir_getslice>
 8024872:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8024874:	697b      	ldr	r3, [r7, #20]
 8024876:	2b00      	cmp	r3, #0
 8024878:	da01      	bge.n	802487e <lfs_dir_getread+0x1a4>
            return err;
 802487a:	697b      	ldr	r3, [r7, #20]
 802487c:	e004      	b.n	8024888 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 802487e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024880:	2b00      	cmp	r3, #0
 8024882:	f47f af3f 	bne.w	8024704 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8024886:	2300      	movs	r3, #0
}
 8024888:	4618      	mov	r0, r3
 802488a:	3720      	adds	r7, #32
 802488c:	46bd      	mov	sp, r7
 802488e:	bd80      	pop	{r7, pc}

08024890 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8024890:	b590      	push	{r4, r7, lr}
 8024892:	b087      	sub	sp, #28
 8024894:	af00      	add	r7, sp, #0
 8024896:	60f8      	str	r0, [r7, #12]
 8024898:	60b9      	str	r1, [r7, #8]
 802489a:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 802489c:	68fb      	ldr	r3, [r7, #12]
 802489e:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 80248a0:	68bb      	ldr	r3, [r7, #8]
 80248a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 80248a6:	2b00      	cmp	r3, #0
 80248a8:	d001      	beq.n	80248ae <lfs_dir_traverse_filter+0x1e>
 80248aa:	4b24      	ldr	r3, [pc, #144]	; (802493c <lfs_dir_traverse_filter+0xac>)
 80248ac:	e000      	b.n	80248b0 <lfs_dir_traverse_filter+0x20>
 80248ae:	4b24      	ldr	r3, [pc, #144]	; (8024940 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 80248b0:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 80248b2:	697b      	ldr	r3, [r7, #20]
 80248b4:	681a      	ldr	r2, [r3, #0]
 80248b6:	68bb      	ldr	r3, [r7, #8]
 80248b8:	405a      	eors	r2, r3
 80248ba:	693b      	ldr	r3, [r7, #16]
 80248bc:	4013      	ands	r3, r2
 80248be:	2b00      	cmp	r3, #0
 80248c0:	d014      	beq.n	80248ec <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 80248c2:	697b      	ldr	r3, [r7, #20]
 80248c4:	681b      	ldr	r3, [r3, #0]
 80248c6:	4618      	mov	r0, r3
 80248c8:	f7ff fab5 	bl	8023e36 <lfs_tag_isdelete>
 80248cc:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 80248ce:	2b00      	cmp	r3, #0
 80248d0:	d10c      	bne.n	80248ec <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 80248d2:	68bb      	ldr	r3, [r7, #8]
 80248d4:	4a19      	ldr	r2, [pc, #100]	; (802493c <lfs_dir_traverse_filter+0xac>)
 80248d6:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 80248d8:	697b      	ldr	r3, [r7, #20]
 80248da:	6819      	ldr	r1, [r3, #0]
 80248dc:	4b19      	ldr	r3, [pc, #100]	; (8024944 <lfs_dir_traverse_filter+0xb4>)
 80248de:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 80248e0:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80248e4:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 80248e8:	429a      	cmp	r2, r3
 80248ea:	d104      	bne.n	80248f6 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 80248ec:	697b      	ldr	r3, [r7, #20]
 80248ee:	2200      	movs	r2, #0
 80248f0:	601a      	str	r2, [r3, #0]
        return true;
 80248f2:	2301      	movs	r3, #1
 80248f4:	e01e      	b.n	8024934 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80248f6:	68b8      	ldr	r0, [r7, #8]
 80248f8:	f7ff fab0 	bl	8023e5c <lfs_tag_type1>
 80248fc:	4603      	mov	r3, r0
 80248fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8024902:	d116      	bne.n	8024932 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8024904:	68b8      	ldr	r0, [r7, #8]
 8024906:	f7ff fae3 	bl	8023ed0 <lfs_tag_id>
 802490a:	4603      	mov	r3, r0
 802490c:	461c      	mov	r4, r3
 802490e:	697b      	ldr	r3, [r7, #20]
 8024910:	681b      	ldr	r3, [r3, #0]
 8024912:	4618      	mov	r0, r3
 8024914:	f7ff fadc 	bl	8023ed0 <lfs_tag_id>
 8024918:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 802491a:	429c      	cmp	r4, r3
 802491c:	d809      	bhi.n	8024932 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 802491e:	68b8      	ldr	r0, [r7, #8]
 8024920:	f7ff fac9 	bl	8023eb6 <lfs_tag_splice>
 8024924:	4603      	mov	r3, r0
 8024926:	029a      	lsls	r2, r3, #10
 8024928:	697b      	ldr	r3, [r7, #20]
 802492a:	681b      	ldr	r3, [r3, #0]
 802492c:	441a      	add	r2, r3
 802492e:	697b      	ldr	r3, [r7, #20]
 8024930:	601a      	str	r2, [r3, #0]
    }

    return false;
 8024932:	2300      	movs	r3, #0
}
 8024934:	4618      	mov	r0, r3
 8024936:	371c      	adds	r7, #28
 8024938:	46bd      	mov	sp, r7
 802493a:	bd90      	pop	{r4, r7, pc}
 802493c:	7ffffc00 	.word	0x7ffffc00
 8024940:	700ffc00 	.word	0x700ffc00
 8024944:	000ffc00 	.word	0x000ffc00

08024948 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8024948:	b590      	push	{r4, r7, lr}
 802494a:	b0c1      	sub	sp, #260	; 0x104
 802494c:	af04      	add	r7, sp, #16
 802494e:	60f8      	str	r0, [r7, #12]
 8024950:	60b9      	str	r1, [r7, #8]
 8024952:	607a      	str	r2, [r7, #4]
 8024954:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8024956:	2300      	movs	r3, #0
 8024958:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 802495c:	6838      	ldr	r0, [r7, #0]
 802495e:	f7ff fad4 	bl	8023f0a <lfs_tag_dsize>
 8024962:	4602      	mov	r2, r0
 8024964:	687b      	ldr	r3, [r7, #4]
 8024966:	441a      	add	r2, r3
 8024968:	68bb      	ldr	r3, [r7, #8]
 802496a:	68db      	ldr	r3, [r3, #12]
 802496c:	429a      	cmp	r2, r3
 802496e:	d237      	bcs.n	80249e0 <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 8024970:	6838      	ldr	r0, [r7, #0]
 8024972:	f7ff faca 	bl	8023f0a <lfs_tag_dsize>
 8024976:	4602      	mov	r2, r0
 8024978:	687b      	ldr	r3, [r7, #4]
 802497a:	4413      	add	r3, r2
 802497c:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 802497e:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 8024980:	68bb      	ldr	r3, [r7, #8]
 8024982:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 8024984:	2204      	movs	r2, #4
 8024986:	9203      	str	r2, [sp, #12]
 8024988:	f107 0254 	add.w	r2, r7, #84	; 0x54
 802498c:	9202      	str	r2, [sp, #8]
 802498e:	687a      	ldr	r2, [r7, #4]
 8024990:	9201      	str	r2, [sp, #4]
 8024992:	9300      	str	r3, [sp, #0]
 8024994:	2304      	movs	r3, #4
 8024996:	460a      	mov	r2, r1
 8024998:	2100      	movs	r1, #0
 802499a:	68f8      	ldr	r0, [r7, #12]
 802499c:	f7fe fe5e 	bl	802365c <lfs_bd_read>
 80249a0:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                if (err) {
 80249a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80249a8:	2b00      	cmp	r3, #0
 80249aa:	d002      	beq.n	80249b2 <lfs_dir_traverse+0x6a>
                    return err;
 80249ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80249b0:	e3a6      	b.n	8025100 <lfs_dir_traverse+0x7b8>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 80249b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80249b4:	4618      	mov	r0, r3
 80249b6:	f7fe fdfc 	bl	80235b2 <lfs_frombe32>
 80249ba:	4602      	mov	r2, r0
 80249bc:	683b      	ldr	r3, [r7, #0]
 80249be:	4053      	eors	r3, r2
 80249c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80249c4:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 80249c6:	68bb      	ldr	r3, [r7, #8]
 80249c8:	681b      	ldr	r3, [r3, #0]
 80249ca:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 80249cc:	687b      	ldr	r3, [r7, #4]
 80249ce:	3304      	adds	r3, #4
 80249d0:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 80249d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80249d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 80249da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80249dc:	603b      	str	r3, [r7, #0]
 80249de:	e01b      	b.n	8024a18 <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 80249e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80249e4:	2b00      	cmp	r3, #0
 80249e6:	dd13      	ble.n	8024a10 <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 80249e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80249ec:	681b      	ldr	r3, [r3, #0]
 80249ee:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 80249f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80249f4:	685b      	ldr	r3, [r3, #4]
 80249f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 80249fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80249fe:	3308      	adds	r3, #8
 8024a00:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 8024a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8024a08:	3b01      	subs	r3, #1
 8024a0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8024a0e:	e003      	b.n	8024a18 <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8024a10:	2300      	movs	r3, #0
 8024a12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 8024a16:	e2a2      	b.n	8024f5e <lfs_dir_traverse+0x616>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8024a18:	4b7e      	ldr	r3, [pc, #504]	; (8024c14 <lfs_dir_traverse+0x2cc>)
 8024a1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8024a1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8024a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8024a24:	405a      	eors	r2, r3
 8024a26:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8024a2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8024a2e:	400b      	ands	r3, r1
 8024a30:	4013      	ands	r3, r2
 8024a32:	2b00      	cmp	r3, #0
 8024a34:	f040 8285 	bne.w	8024f42 <lfs_dir_traverse+0x5fa>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8024a38:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8024a3c:	f7ff fa48 	bl	8023ed0 <lfs_tag_id>
 8024a40:	4603      	mov	r3, r0
 8024a42:	2b00      	cmp	r3, #0
 8024a44:	f000 80f0 	beq.w	8024c28 <lfs_dir_traverse+0x2e0>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8024a48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024a4c:	2b02      	cmp	r3, #2
 8024a4e:	d906      	bls.n	8024a5e <lfs_dir_traverse+0x116>
 8024a50:	4b71      	ldr	r3, [pc, #452]	; (8024c18 <lfs_dir_traverse+0x2d0>)
 8024a52:	4a72      	ldr	r2, [pc, #456]	; (8024c1c <lfs_dir_traverse+0x2d4>)
 8024a54:	f240 314e 	movw	r1, #846	; 0x34e
 8024a58:	4871      	ldr	r0, [pc, #452]	; (8024c20 <lfs_dir_traverse+0x2d8>)
 8024a5a:	f007 fc67 	bl	802c32c <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8024a5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8024a60:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024a64:	4613      	mov	r3, r2
 8024a66:	011b      	lsls	r3, r3, #4
 8024a68:	1a9b      	subs	r3, r3, r2
 8024a6a:	009b      	lsls	r3, r3, #2
 8024a6c:	33f0      	adds	r3, #240	; 0xf0
 8024a6e:	443b      	add	r3, r7
 8024a70:	3b98      	subs	r3, #152	; 0x98
 8024a72:	68ba      	ldr	r2, [r7, #8]
 8024a74:	601a      	str	r2, [r3, #0]
 8024a76:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024a7a:	4613      	mov	r3, r2
 8024a7c:	011b      	lsls	r3, r3, #4
 8024a7e:	1a9b      	subs	r3, r3, r2
 8024a80:	009b      	lsls	r3, r3, #2
 8024a82:	33f0      	adds	r3, #240	; 0xf0
 8024a84:	443b      	add	r3, r7
 8024a86:	3b94      	subs	r3, #148	; 0x94
 8024a88:	687a      	ldr	r2, [r7, #4]
 8024a8a:	601a      	str	r2, [r3, #0]
 8024a8c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024a90:	4613      	mov	r3, r2
 8024a92:	011b      	lsls	r3, r3, #4
 8024a94:	1a9b      	subs	r3, r3, r2
 8024a96:	009b      	lsls	r3, r3, #2
 8024a98:	33f0      	adds	r3, #240	; 0xf0
 8024a9a:	443b      	add	r3, r7
 8024a9c:	3b90      	subs	r3, #144	; 0x90
 8024a9e:	683a      	ldr	r2, [r7, #0]
 8024aa0:	601a      	str	r2, [r3, #0]
 8024aa2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024aa6:	4613      	mov	r3, r2
 8024aa8:	011b      	lsls	r3, r3, #4
 8024aaa:	1a9b      	subs	r3, r3, r2
 8024aac:	009b      	lsls	r3, r3, #2
 8024aae:	33f0      	adds	r3, #240	; 0xf0
 8024ab0:	443b      	add	r3, r7
 8024ab2:	3b8c      	subs	r3, #140	; 0x8c
 8024ab4:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8024ab8:	601a      	str	r2, [r3, #0]
 8024aba:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024abe:	4613      	mov	r3, r2
 8024ac0:	011b      	lsls	r3, r3, #4
 8024ac2:	1a9b      	subs	r3, r3, r2
 8024ac4:	009b      	lsls	r3, r3, #2
 8024ac6:	33f0      	adds	r3, #240	; 0xf0
 8024ac8:	443b      	add	r3, r7
 8024aca:	3b88      	subs	r3, #136	; 0x88
 8024acc:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8024ad0:	601a      	str	r2, [r3, #0]
 8024ad2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024ad6:	4613      	mov	r3, r2
 8024ad8:	011b      	lsls	r3, r3, #4
 8024ada:	1a9b      	subs	r3, r3, r2
 8024adc:	009b      	lsls	r3, r3, #2
 8024ade:	33f0      	adds	r3, #240	; 0xf0
 8024ae0:	443b      	add	r3, r7
 8024ae2:	3b84      	subs	r3, #132	; 0x84
 8024ae4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8024ae8:	601a      	str	r2, [r3, #0]
 8024aea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024aee:	4613      	mov	r3, r2
 8024af0:	011b      	lsls	r3, r3, #4
 8024af2:	1a9b      	subs	r3, r3, r2
 8024af4:	009b      	lsls	r3, r3, #2
 8024af6:	33f0      	adds	r3, #240	; 0xf0
 8024af8:	443b      	add	r3, r7
 8024afa:	3b80      	subs	r3, #128	; 0x80
 8024afc:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8024b00:	601a      	str	r2, [r3, #0]
 8024b02:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024b06:	4613      	mov	r3, r2
 8024b08:	011b      	lsls	r3, r3, #4
 8024b0a:	1a9b      	subs	r3, r3, r2
 8024b0c:	009b      	lsls	r3, r3, #2
 8024b0e:	33f0      	adds	r3, #240	; 0xf0
 8024b10:	443b      	add	r3, r7
 8024b12:	3b7c      	subs	r3, #124	; 0x7c
 8024b14:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8024b18:	801a      	strh	r2, [r3, #0]
 8024b1a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024b1e:	4613      	mov	r3, r2
 8024b20:	011b      	lsls	r3, r3, #4
 8024b22:	1a9b      	subs	r3, r3, r2
 8024b24:	009b      	lsls	r3, r3, #2
 8024b26:	33f0      	adds	r3, #240	; 0xf0
 8024b28:	443b      	add	r3, r7
 8024b2a:	3b7a      	subs	r3, #122	; 0x7a
 8024b2c:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8024b30:	801a      	strh	r2, [r3, #0]
 8024b32:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024b36:	4613      	mov	r3, r2
 8024b38:	011b      	lsls	r3, r3, #4
 8024b3a:	1a9b      	subs	r3, r3, r2
 8024b3c:	009b      	lsls	r3, r3, #2
 8024b3e:	33f0      	adds	r3, #240	; 0xf0
 8024b40:	443b      	add	r3, r7
 8024b42:	3b78      	subs	r3, #120	; 0x78
 8024b44:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8024b48:	801a      	strh	r2, [r3, #0]
 8024b4a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024b4e:	4613      	mov	r3, r2
 8024b50:	011b      	lsls	r3, r3, #4
 8024b52:	1a9b      	subs	r3, r3, r2
 8024b54:	009b      	lsls	r3, r3, #2
 8024b56:	33f0      	adds	r3, #240	; 0xf0
 8024b58:	443b      	add	r3, r7
 8024b5a:	3b74      	subs	r3, #116	; 0x74
 8024b5c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8024b60:	601a      	str	r2, [r3, #0]
 8024b62:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024b66:	4613      	mov	r3, r2
 8024b68:	011b      	lsls	r3, r3, #4
 8024b6a:	1a9b      	subs	r3, r3, r2
 8024b6c:	009b      	lsls	r3, r3, #2
 8024b6e:	33f0      	adds	r3, #240	; 0xf0
 8024b70:	443b      	add	r3, r7
 8024b72:	3b70      	subs	r3, #112	; 0x70
 8024b74:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8024b78:	601a      	str	r2, [r3, #0]
 8024b7a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024b7e:	4613      	mov	r3, r2
 8024b80:	011b      	lsls	r3, r3, #4
 8024b82:	1a9b      	subs	r3, r3, r2
 8024b84:	009b      	lsls	r3, r3, #2
 8024b86:	33f0      	adds	r3, #240	; 0xf0
 8024b88:	443b      	add	r3, r7
 8024b8a:	3b6c      	subs	r3, #108	; 0x6c
 8024b8c:	6019      	str	r1, [r3, #0]
 8024b8e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024b92:	4613      	mov	r3, r2
 8024b94:	011b      	lsls	r3, r3, #4
 8024b96:	1a9b      	subs	r3, r3, r2
 8024b98:	009b      	lsls	r3, r3, #2
 8024b9a:	33f0      	adds	r3, #240	; 0xf0
 8024b9c:	443b      	add	r3, r7
 8024b9e:	3b68      	subs	r3, #104	; 0x68
 8024ba0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8024ba4:	601a      	str	r2, [r3, #0]
 8024ba6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024baa:	4613      	mov	r3, r2
 8024bac:	011b      	lsls	r3, r3, #4
 8024bae:	1a9b      	subs	r3, r3, r2
 8024bb0:	009b      	lsls	r3, r3, #2
 8024bb2:	33f0      	adds	r3, #240	; 0xf0
 8024bb4:	443b      	add	r3, r7
 8024bb6:	3b68      	subs	r3, #104	; 0x68
 8024bb8:	3304      	adds	r3, #4
 8024bba:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8024bbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8024bc2:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8024bc6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024bca:	3301      	adds	r3, #1
 8024bcc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 8024bd0:	2300      	movs	r3, #0
 8024bd2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 8024bd6:	2300      	movs	r3, #0
 8024bd8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 8024bdc:	2300      	movs	r3, #0
 8024bde:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 8024be2:	2300      	movs	r3, #0
 8024be4:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 8024be8:	2300      	movs	r3, #0
 8024bea:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 8024bee:	4b0d      	ldr	r3, [pc, #52]	; (8024c24 <lfs_dir_traverse+0x2dc>)
 8024bf0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 8024bf4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024bf8:	1e5a      	subs	r2, r3, #1
 8024bfa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8024bfe:	4613      	mov	r3, r2
 8024c00:	011b      	lsls	r3, r3, #4
 8024c02:	1a9b      	subs	r3, r3, r2
 8024c04:	009b      	lsls	r3, r3, #2
 8024c06:	3328      	adds	r3, #40	; 0x28
 8024c08:	440b      	add	r3, r1
 8024c0a:	3304      	adds	r3, #4
 8024c0c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                continue;
 8024c10:	e19e      	b.n	8024f50 <lfs_dir_traverse+0x608>
 8024c12:	bf00      	nop
 8024c14:	7ff00000 	.word	0x7ff00000
 8024c18:	08033430 	.word	0x08033430
 8024c1c:	080345ec 	.word	0x080345ec
 8024c20:	08033318 	.word	0x08033318
 8024c24:	08024891 	.word	0x08024891
            }
        }

popped:
 8024c28:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 8024c2a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8024c2e:	f7ff f94f 	bl	8023ed0 <lfs_tag_id>
 8024c32:	4603      	mov	r3, r0
 8024c34:	2b00      	cmp	r3, #0
 8024c36:	d015      	beq.n	8024c64 <lfs_dir_traverse+0x31c>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8024c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024c3a:	4618      	mov	r0, r3
 8024c3c:	f7ff f948 	bl	8023ed0 <lfs_tag_id>
 8024c40:	4603      	mov	r3, r0
 8024c42:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8024c44:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8024c48:	4293      	cmp	r3, r2
 8024c4a:	f200 817c 	bhi.w	8024f46 <lfs_dir_traverse+0x5fe>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8024c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024c50:	4618      	mov	r0, r3
 8024c52:	f7ff f93d 	bl	8023ed0 <lfs_tag_id>
 8024c56:	4603      	mov	r3, r0
 8024c58:	461a      	mov	r2, r3
 8024c5a:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8024c5e:	4293      	cmp	r3, r2
 8024c60:	f240 8171 	bls.w	8024f46 <lfs_dir_traverse+0x5fe>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8024c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024c66:	4618      	mov	r0, r3
 8024c68:	f7ff f908 	bl	8023e7c <lfs_tag_type3>
 8024c6c:	4603      	mov	r3, r0
 8024c6e:	2b00      	cmp	r3, #0
 8024c70:	f43f ae74 	beq.w	802495c <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8024c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024c76:	4618      	mov	r0, r3
 8024c78:	f7ff f900 	bl	8023e7c <lfs_tag_type3>
 8024c7c:	4603      	mov	r3, r0
 8024c7e:	461a      	mov	r2, r3
 8024c80:	f240 1301 	movw	r3, #257	; 0x101
 8024c84:	429a      	cmp	r2, r3
 8024c86:	f040 80e0 	bne.w	8024e4a <lfs_dir_traverse+0x502>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 8024c8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8024c8e:	4ab1      	ldr	r2, [pc, #708]	; (8024f54 <lfs_dir_traverse+0x60c>)
 8024c90:	4293      	cmp	r3, r2
 8024c92:	f000 815a 	beq.w	8024f4a <lfs_dir_traverse+0x602>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 8024c96:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024c9a:	4613      	mov	r3, r2
 8024c9c:	011b      	lsls	r3, r3, #4
 8024c9e:	1a9b      	subs	r3, r3, r2
 8024ca0:	009b      	lsls	r3, r3, #2
 8024ca2:	33f0      	adds	r3, #240	; 0xf0
 8024ca4:	443b      	add	r3, r7
 8024ca6:	3b98      	subs	r3, #152	; 0x98
 8024ca8:	4618      	mov	r0, r3
 8024caa:	233c      	movs	r3, #60	; 0x3c
 8024cac:	461a      	mov	r2, r3
 8024cae:	2100      	movs	r1, #0
 8024cb0:	f008 fd0c 	bl	802d6cc <memset>
 8024cb4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024cb8:	4613      	mov	r3, r2
 8024cba:	011b      	lsls	r3, r3, #4
 8024cbc:	1a9b      	subs	r3, r3, r2
 8024cbe:	009b      	lsls	r3, r3, #2
 8024cc0:	33f0      	adds	r3, #240	; 0xf0
 8024cc2:	443b      	add	r3, r7
 8024cc4:	3b98      	subs	r3, #152	; 0x98
 8024cc6:	68ba      	ldr	r2, [r7, #8]
 8024cc8:	601a      	str	r2, [r3, #0]
 8024cca:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024cce:	4613      	mov	r3, r2
 8024cd0:	011b      	lsls	r3, r3, #4
 8024cd2:	1a9b      	subs	r3, r3, r2
 8024cd4:	009b      	lsls	r3, r3, #2
 8024cd6:	33f0      	adds	r3, #240	; 0xf0
 8024cd8:	443b      	add	r3, r7
 8024cda:	3b94      	subs	r3, #148	; 0x94
 8024cdc:	687a      	ldr	r2, [r7, #4]
 8024cde:	601a      	str	r2, [r3, #0]
 8024ce0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024ce4:	4613      	mov	r3, r2
 8024ce6:	011b      	lsls	r3, r3, #4
 8024ce8:	1a9b      	subs	r3, r3, r2
 8024cea:	009b      	lsls	r3, r3, #2
 8024cec:	33f0      	adds	r3, #240	; 0xf0
 8024cee:	443b      	add	r3, r7
 8024cf0:	3b90      	subs	r3, #144	; 0x90
 8024cf2:	683a      	ldr	r2, [r7, #0]
 8024cf4:	601a      	str	r2, [r3, #0]
 8024cf6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024cfa:	4613      	mov	r3, r2
 8024cfc:	011b      	lsls	r3, r3, #4
 8024cfe:	1a9b      	subs	r3, r3, r2
 8024d00:	009b      	lsls	r3, r3, #2
 8024d02:	33f0      	adds	r3, #240	; 0xf0
 8024d04:	443b      	add	r3, r7
 8024d06:	3b8c      	subs	r3, #140	; 0x8c
 8024d08:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8024d0c:	601a      	str	r2, [r3, #0]
 8024d0e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024d12:	4613      	mov	r3, r2
 8024d14:	011b      	lsls	r3, r3, #4
 8024d16:	1a9b      	subs	r3, r3, r2
 8024d18:	009b      	lsls	r3, r3, #2
 8024d1a:	33f0      	adds	r3, #240	; 0xf0
 8024d1c:	443b      	add	r3, r7
 8024d1e:	3b88      	subs	r3, #136	; 0x88
 8024d20:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8024d24:	601a      	str	r2, [r3, #0]
 8024d26:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024d2a:	4613      	mov	r3, r2
 8024d2c:	011b      	lsls	r3, r3, #4
 8024d2e:	1a9b      	subs	r3, r3, r2
 8024d30:	009b      	lsls	r3, r3, #2
 8024d32:	33f0      	adds	r3, #240	; 0xf0
 8024d34:	443b      	add	r3, r7
 8024d36:	3b84      	subs	r3, #132	; 0x84
 8024d38:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8024d3c:	601a      	str	r2, [r3, #0]
 8024d3e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024d42:	4613      	mov	r3, r2
 8024d44:	011b      	lsls	r3, r3, #4
 8024d46:	1a9b      	subs	r3, r3, r2
 8024d48:	009b      	lsls	r3, r3, #2
 8024d4a:	33f0      	adds	r3, #240	; 0xf0
 8024d4c:	443b      	add	r3, r7
 8024d4e:	3b80      	subs	r3, #128	; 0x80
 8024d50:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8024d54:	601a      	str	r2, [r3, #0]
 8024d56:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024d5a:	4613      	mov	r3, r2
 8024d5c:	011b      	lsls	r3, r3, #4
 8024d5e:	1a9b      	subs	r3, r3, r2
 8024d60:	009b      	lsls	r3, r3, #2
 8024d62:	33f0      	adds	r3, #240	; 0xf0
 8024d64:	443b      	add	r3, r7
 8024d66:	3b7c      	subs	r3, #124	; 0x7c
 8024d68:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8024d6c:	801a      	strh	r2, [r3, #0]
 8024d6e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024d72:	4613      	mov	r3, r2
 8024d74:	011b      	lsls	r3, r3, #4
 8024d76:	1a9b      	subs	r3, r3, r2
 8024d78:	009b      	lsls	r3, r3, #2
 8024d7a:	33f0      	adds	r3, #240	; 0xf0
 8024d7c:	443b      	add	r3, r7
 8024d7e:	3b7a      	subs	r3, #122	; 0x7a
 8024d80:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8024d84:	801a      	strh	r2, [r3, #0]
 8024d86:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024d8a:	4613      	mov	r3, r2
 8024d8c:	011b      	lsls	r3, r3, #4
 8024d8e:	1a9b      	subs	r3, r3, r2
 8024d90:	009b      	lsls	r3, r3, #2
 8024d92:	33f0      	adds	r3, #240	; 0xf0
 8024d94:	443b      	add	r3, r7
 8024d96:	3b78      	subs	r3, #120	; 0x78
 8024d98:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8024d9c:	801a      	strh	r2, [r3, #0]
 8024d9e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024da2:	4613      	mov	r3, r2
 8024da4:	011b      	lsls	r3, r3, #4
 8024da6:	1a9b      	subs	r3, r3, r2
 8024da8:	009b      	lsls	r3, r3, #2
 8024daa:	33f0      	adds	r3, #240	; 0xf0
 8024dac:	443b      	add	r3, r7
 8024dae:	3b74      	subs	r3, #116	; 0x74
 8024db0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8024db4:	601a      	str	r2, [r3, #0]
 8024db6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024dba:	4613      	mov	r3, r2
 8024dbc:	011b      	lsls	r3, r3, #4
 8024dbe:	1a9b      	subs	r3, r3, r2
 8024dc0:	009b      	lsls	r3, r3, #2
 8024dc2:	33f0      	adds	r3, #240	; 0xf0
 8024dc4:	443b      	add	r3, r7
 8024dc6:	3b70      	subs	r3, #112	; 0x70
 8024dc8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8024dcc:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 8024dce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024dd2:	3301      	adds	r3, #1
 8024dd4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8024dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024dda:	4618      	mov	r0, r3
 8024ddc:	f7ff f888 	bl	8023ef0 <lfs_tag_size>
 8024de0:	4603      	mov	r3, r0
 8024de2:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8024de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024de8:	4618      	mov	r0, r3
 8024dea:	f7ff f871 	bl	8023ed0 <lfs_tag_id>
 8024dee:	4603      	mov	r3, r0
 8024df0:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 8024df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8024df8:	60bb      	str	r3, [r7, #8]
            off = 0;
 8024dfa:	2300      	movs	r3, #0
 8024dfc:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 8024dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8024e02:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8024e04:	2300      	movs	r3, #0
 8024e06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 8024e0a:	2300      	movs	r3, #0
 8024e0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8024e10:	4b51      	ldr	r3, [pc, #324]	; (8024f58 <lfs_dir_traverse+0x610>)
 8024e12:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8024e16:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8024e1a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 8024e1e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8024e22:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 8024e26:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8024e2a:	3301      	adds	r3, #1
 8024e2c:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 8024e30:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8024e34:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8024e38:	1ad3      	subs	r3, r2, r3
 8024e3a:	b29a      	uxth	r2, r3
 8024e3c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8024e40:	4413      	add	r3, r2
 8024e42:	b29b      	uxth	r3, r3
 8024e44:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8024e48:	e588      	b.n	802495c <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8024e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024e4c:	4618      	mov	r0, r3
 8024e4e:	f7ff f815 	bl	8023e7c <lfs_tag_type3>
 8024e52:	4603      	mov	r3, r0
 8024e54:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8024e58:	d159      	bne.n	8024f0e <lfs_dir_traverse+0x5c6>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8024e5a:	2300      	movs	r3, #0
 8024e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8024e60:	e04b      	b.n	8024efa <lfs_dir_traverse+0x5b2>
                const struct lfs_attr *a = buffer;
 8024e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8024e66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8024e6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8024e6e:	4613      	mov	r3, r2
 8024e70:	005b      	lsls	r3, r3, #1
 8024e72:	4413      	add	r3, r2
 8024e74:	009b      	lsls	r3, r3, #2
 8024e76:	461a      	mov	r2, r3
 8024e78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8024e7c:	4413      	add	r3, r2
 8024e7e:	781b      	ldrb	r3, [r3, #0]
 8024e80:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8024e84:	051c      	lsls	r4, r3, #20
 8024e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024e88:	4618      	mov	r0, r3
 8024e8a:	f7ff f821 	bl	8023ed0 <lfs_tag_id>
 8024e8e:	4603      	mov	r3, r0
 8024e90:	461a      	mov	r2, r3
 8024e92:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8024e96:	4413      	add	r3, r2
 8024e98:	029b      	lsls	r3, r3, #10
 8024e9a:	ea44 0103 	orr.w	r1, r4, r3
 8024e9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8024ea2:	4613      	mov	r3, r2
 8024ea4:	005b      	lsls	r3, r3, #1
 8024ea6:	4413      	add	r3, r2
 8024ea8:	009b      	lsls	r3, r3, #2
 8024eaa:	461a      	mov	r2, r3
 8024eac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8024eb0:	4413      	add	r3, r2
 8024eb2:	689b      	ldr	r3, [r3, #8]
 8024eb4:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 8024eb6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8024eba:	4613      	mov	r3, r2
 8024ebc:	005b      	lsls	r3, r3, #1
 8024ebe:	4413      	add	r3, r2
 8024ec0:	009b      	lsls	r3, r3, #2
 8024ec2:	461a      	mov	r2, r3
 8024ec4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8024ec8:	4413      	add	r3, r2
 8024eca:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8024ecc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8024ed0:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8024ed4:	4798      	blx	r3
 8024ed6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 8024eda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8024ede:	2b00      	cmp	r3, #0
 8024ee0:	da02      	bge.n	8024ee8 <lfs_dir_traverse+0x5a0>
                    return res;
 8024ee2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8024ee6:	e10b      	b.n	8025100 <lfs_dir_traverse+0x7b8>
                }

                if (res) {
 8024ee8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8024eec:	2b00      	cmp	r3, #0
 8024eee:	d12e      	bne.n	8024f4e <lfs_dir_traverse+0x606>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8024ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8024ef4:	3301      	adds	r3, #1
 8024ef6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8024efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024efc:	4618      	mov	r0, r3
 8024efe:	f7fe fff7 	bl	8023ef0 <lfs_tag_size>
 8024f02:	4602      	mov	r2, r0
 8024f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8024f08:	4293      	cmp	r3, r2
 8024f0a:	d3aa      	bcc.n	8024e62 <lfs_dir_traverse+0x51a>
 8024f0c:	e526      	b.n	802495c <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8024f0e:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8024f12:	029a      	lsls	r2, r3, #10
 8024f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024f16:	18d1      	adds	r1, r2, r3
 8024f18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8024f1c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8024f20:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8024f24:	4798      	blx	r3
 8024f26:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 8024f2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8024f2e:	2b00      	cmp	r3, #0
 8024f30:	da02      	bge.n	8024f38 <lfs_dir_traverse+0x5f0>
                return res;
 8024f32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8024f36:	e0e3      	b.n	8025100 <lfs_dir_traverse+0x7b8>
            }

            if (res) {
 8024f38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8024f3c:	2b00      	cmp	r3, #0
 8024f3e:	d10d      	bne.n	8024f5c <lfs_dir_traverse+0x614>
 8024f40:	e50c      	b.n	802495c <lfs_dir_traverse+0x14>
                continue;
 8024f42:	bf00      	nop
 8024f44:	e50a      	b.n	802495c <lfs_dir_traverse+0x14>
            continue;
 8024f46:	bf00      	nop
 8024f48:	e508      	b.n	802495c <lfs_dir_traverse+0x14>
                continue;
 8024f4a:	bf00      	nop
 8024f4c:	e506      	b.n	802495c <lfs_dir_traverse+0x14>
                    break;
 8024f4e:	bf00      	nop
        {
 8024f50:	e504      	b.n	802495c <lfs_dir_traverse+0x14>
 8024f52:	bf00      	nop
 8024f54:	08024891 	.word	0x08024891
 8024f58:	600ffc00 	.word	0x600ffc00
                break;
 8024f5c:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 8024f5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024f62:	2b00      	cmp	r3, #0
 8024f64:	f000 80ca 	beq.w	80250fc <lfs_dir_traverse+0x7b4>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8024f68:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024f6c:	1e5a      	subs	r2, r3, #1
 8024f6e:	4613      	mov	r3, r2
 8024f70:	011b      	lsls	r3, r3, #4
 8024f72:	1a9b      	subs	r3, r3, r2
 8024f74:	009b      	lsls	r3, r3, #2
 8024f76:	33f0      	adds	r3, #240	; 0xf0
 8024f78:	443b      	add	r3, r7
 8024f7a:	3b98      	subs	r3, #152	; 0x98
 8024f7c:	681b      	ldr	r3, [r3, #0]
 8024f7e:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 8024f80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024f84:	1e5a      	subs	r2, r3, #1
 8024f86:	4613      	mov	r3, r2
 8024f88:	011b      	lsls	r3, r3, #4
 8024f8a:	1a9b      	subs	r3, r3, r2
 8024f8c:	009b      	lsls	r3, r3, #2
 8024f8e:	33f0      	adds	r3, #240	; 0xf0
 8024f90:	443b      	add	r3, r7
 8024f92:	3b94      	subs	r3, #148	; 0x94
 8024f94:	681b      	ldr	r3, [r3, #0]
 8024f96:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 8024f98:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024f9c:	1e5a      	subs	r2, r3, #1
 8024f9e:	4613      	mov	r3, r2
 8024fa0:	011b      	lsls	r3, r3, #4
 8024fa2:	1a9b      	subs	r3, r3, r2
 8024fa4:	009b      	lsls	r3, r3, #2
 8024fa6:	33f0      	adds	r3, #240	; 0xf0
 8024fa8:	443b      	add	r3, r7
 8024faa:	3b90      	subs	r3, #144	; 0x90
 8024fac:	681b      	ldr	r3, [r3, #0]
 8024fae:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8024fb0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024fb4:	1e5a      	subs	r2, r3, #1
 8024fb6:	4613      	mov	r3, r2
 8024fb8:	011b      	lsls	r3, r3, #4
 8024fba:	1a9b      	subs	r3, r3, r2
 8024fbc:	009b      	lsls	r3, r3, #2
 8024fbe:	33f0      	adds	r3, #240	; 0xf0
 8024fc0:	443b      	add	r3, r7
 8024fc2:	3b8c      	subs	r3, #140	; 0x8c
 8024fc4:	681b      	ldr	r3, [r3, #0]
 8024fc6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 8024fca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024fce:	1e5a      	subs	r2, r3, #1
 8024fd0:	4613      	mov	r3, r2
 8024fd2:	011b      	lsls	r3, r3, #4
 8024fd4:	1a9b      	subs	r3, r3, r2
 8024fd6:	009b      	lsls	r3, r3, #2
 8024fd8:	33f0      	adds	r3, #240	; 0xf0
 8024fda:	443b      	add	r3, r7
 8024fdc:	3b88      	subs	r3, #136	; 0x88
 8024fde:	681b      	ldr	r3, [r3, #0]
 8024fe0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 8024fe4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024fe8:	1e5a      	subs	r2, r3, #1
 8024fea:	4613      	mov	r3, r2
 8024fec:	011b      	lsls	r3, r3, #4
 8024fee:	1a9b      	subs	r3, r3, r2
 8024ff0:	009b      	lsls	r3, r3, #2
 8024ff2:	33f0      	adds	r3, #240	; 0xf0
 8024ff4:	443b      	add	r3, r7
 8024ff6:	3b84      	subs	r3, #132	; 0x84
 8024ff8:	681b      	ldr	r3, [r3, #0]
 8024ffa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 8024ffe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025002:	1e5a      	subs	r2, r3, #1
 8025004:	4613      	mov	r3, r2
 8025006:	011b      	lsls	r3, r3, #4
 8025008:	1a9b      	subs	r3, r3, r2
 802500a:	009b      	lsls	r3, r3, #2
 802500c:	33f0      	adds	r3, #240	; 0xf0
 802500e:	443b      	add	r3, r7
 8025010:	3b80      	subs	r3, #128	; 0x80
 8025012:	681b      	ldr	r3, [r3, #0]
 8025014:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 8025018:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 802501c:	1e5a      	subs	r2, r3, #1
 802501e:	4613      	mov	r3, r2
 8025020:	011b      	lsls	r3, r3, #4
 8025022:	1a9b      	subs	r3, r3, r2
 8025024:	009b      	lsls	r3, r3, #2
 8025026:	33f0      	adds	r3, #240	; 0xf0
 8025028:	443b      	add	r3, r7
 802502a:	3b7c      	subs	r3, #124	; 0x7c
 802502c:	881b      	ldrh	r3, [r3, #0]
 802502e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 8025032:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025036:	1e5a      	subs	r2, r3, #1
 8025038:	4613      	mov	r3, r2
 802503a:	011b      	lsls	r3, r3, #4
 802503c:	1a9b      	subs	r3, r3, r2
 802503e:	009b      	lsls	r3, r3, #2
 8025040:	33f0      	adds	r3, #240	; 0xf0
 8025042:	443b      	add	r3, r7
 8025044:	3b7a      	subs	r3, #122	; 0x7a
 8025046:	881b      	ldrh	r3, [r3, #0]
 8025048:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 802504c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025050:	1e5a      	subs	r2, r3, #1
 8025052:	4613      	mov	r3, r2
 8025054:	011b      	lsls	r3, r3, #4
 8025056:	1a9b      	subs	r3, r3, r2
 8025058:	009b      	lsls	r3, r3, #2
 802505a:	33f0      	adds	r3, #240	; 0xf0
 802505c:	443b      	add	r3, r7
 802505e:	3b78      	subs	r3, #120	; 0x78
 8025060:	881b      	ldrh	r3, [r3, #0]
 8025062:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 8025066:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 802506a:	1e5a      	subs	r2, r3, #1
 802506c:	4613      	mov	r3, r2
 802506e:	011b      	lsls	r3, r3, #4
 8025070:	1a9b      	subs	r3, r3, r2
 8025072:	009b      	lsls	r3, r3, #2
 8025074:	33f0      	adds	r3, #240	; 0xf0
 8025076:	443b      	add	r3, r7
 8025078:	3b74      	subs	r3, #116	; 0x74
 802507a:	681b      	ldr	r3, [r3, #0]
 802507c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 8025080:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025084:	1e5a      	subs	r2, r3, #1
 8025086:	4613      	mov	r3, r2
 8025088:	011b      	lsls	r3, r3, #4
 802508a:	1a9b      	subs	r3, r3, r2
 802508c:	009b      	lsls	r3, r3, #2
 802508e:	33f0      	adds	r3, #240	; 0xf0
 8025090:	443b      	add	r3, r7
 8025092:	3b70      	subs	r3, #112	; 0x70
 8025094:	681b      	ldr	r3, [r3, #0]
 8025096:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 802509a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 802509e:	1e5a      	subs	r2, r3, #1
 80250a0:	4613      	mov	r3, r2
 80250a2:	011b      	lsls	r3, r3, #4
 80250a4:	1a9b      	subs	r3, r3, r2
 80250a6:	009b      	lsls	r3, r3, #2
 80250a8:	33f0      	adds	r3, #240	; 0xf0
 80250aa:	443b      	add	r3, r7
 80250ac:	3b6c      	subs	r3, #108	; 0x6c
 80250ae:	681b      	ldr	r3, [r3, #0]
 80250b0:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 80250b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80250b6:	1e5a      	subs	r2, r3, #1
 80250b8:	4613      	mov	r3, r2
 80250ba:	011b      	lsls	r3, r3, #4
 80250bc:	1a9b      	subs	r3, r3, r2
 80250be:	009b      	lsls	r3, r3, #2
 80250c0:	33f0      	adds	r3, #240	; 0xf0
 80250c2:	443b      	add	r3, r7
 80250c4:	3b68      	subs	r3, #104	; 0x68
 80250c6:	681b      	ldr	r3, [r3, #0]
 80250c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 80250cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80250d0:	1e5a      	subs	r2, r3, #1
 80250d2:	4613      	mov	r3, r2
 80250d4:	011b      	lsls	r3, r3, #4
 80250d6:	1a9b      	subs	r3, r3, r2
 80250d8:	009b      	lsls	r3, r3, #2
 80250da:	33f0      	adds	r3, #240	; 0xf0
 80250dc:	443b      	add	r3, r7
 80250de:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 80250e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80250e6:	3204      	adds	r2, #4
 80250e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80250ec:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 80250f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80250f4:	3b01      	subs	r3, #1
 80250f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 80250fa:	e596      	b.n	8024c2a <lfs_dir_traverse+0x2e2>
    } else {
        return res;
 80250fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 8025100:	4618      	mov	r0, r3
 8025102:	37f4      	adds	r7, #244	; 0xf4
 8025104:	46bd      	mov	sp, r7
 8025106:	bd90      	pop	{r4, r7, pc}

08025108 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8025108:	b590      	push	{r4, r7, lr}
 802510a:	b09f      	sub	sp, #124	; 0x7c
 802510c:	af04      	add	r7, sp, #16
 802510e:	60f8      	str	r0, [r7, #12]
 8025110:	60b9      	str	r1, [r7, #8]
 8025112:	607a      	str	r2, [r7, #4]
 8025114:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8025116:	f04f 33ff 	mov.w	r3, #4294967295
 802511a:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 802511c:	687b      	ldr	r3, [r7, #4]
 802511e:	681a      	ldr	r2, [r3, #0]
 8025120:	68fb      	ldr	r3, [r7, #12]
 8025122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025124:	6a1b      	ldr	r3, [r3, #32]
 8025126:	429a      	cmp	r2, r3
 8025128:	d207      	bcs.n	802513a <lfs_dir_fetchmatch+0x32>
 802512a:	687b      	ldr	r3, [r7, #4]
 802512c:	3304      	adds	r3, #4
 802512e:	681a      	ldr	r2, [r3, #0]
 8025130:	68fb      	ldr	r3, [r7, #12]
 8025132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025134:	6a1b      	ldr	r3, [r3, #32]
 8025136:	429a      	cmp	r2, r3
 8025138:	d302      	bcc.n	8025140 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 802513a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 802513e:	e342      	b.n	80257c6 <lfs_dir_fetchmatch+0x6be>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8025140:	2300      	movs	r3, #0
 8025142:	633b      	str	r3, [r7, #48]	; 0x30
 8025144:	2300      	movs	r3, #0
 8025146:	637b      	str	r3, [r7, #52]	; 0x34
    int r = 0;
 8025148:	2300      	movs	r3, #0
 802514a:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 802514c:	2300      	movs	r3, #0
 802514e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8025150:	e052      	b.n	80251f8 <lfs_dir_fetchmatch+0xf0>
        int err = lfs_bd_read(lfs,
 8025152:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8025154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025156:	009b      	lsls	r3, r3, #2
 8025158:	687a      	ldr	r2, [r7, #4]
 802515a:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 802515c:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 802515e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8025162:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8025164:	0092      	lsls	r2, r2, #2
 8025166:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8025168:	2104      	movs	r1, #4
 802516a:	9103      	str	r1, [sp, #12]
 802516c:	9202      	str	r2, [sp, #8]
 802516e:	2200      	movs	r2, #0
 8025170:	9201      	str	r2, [sp, #4]
 8025172:	9300      	str	r3, [sp, #0]
 8025174:	2304      	movs	r3, #4
 8025176:	4602      	mov	r2, r0
 8025178:	2100      	movs	r1, #0
 802517a:	68f8      	ldr	r0, [r7, #12]
 802517c:	f7fe fa6e 	bl	802365c <lfs_bd_read>
 8025180:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 8025182:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025184:	009b      	lsls	r3, r3, #2
 8025186:	3368      	adds	r3, #104	; 0x68
 8025188:	443b      	add	r3, r7
 802518a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 802518e:	4618      	mov	r0, r3
 8025190:	f7fe f9f8 	bl	8023584 <lfs_fromle32>
 8025194:	4602      	mov	r2, r0
 8025196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025198:	009b      	lsls	r3, r3, #2
 802519a:	3368      	adds	r3, #104	; 0x68
 802519c:	443b      	add	r3, r7
 802519e:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 80251a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80251a4:	2b00      	cmp	r3, #0
 80251a6:	d005      	beq.n	80251b4 <lfs_dir_fetchmatch+0xac>
 80251a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80251aa:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80251ae:	d001      	beq.n	80251b4 <lfs_dir_fetchmatch+0xac>
            return err;
 80251b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80251b2:	e308      	b.n	80257c6 <lfs_dir_fetchmatch+0x6be>
        }

        if (err != LFS_ERR_CORRUPT &&
 80251b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80251b6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80251ba:	d01a      	beq.n	80251f2 <lfs_dir_fetchmatch+0xea>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 80251bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80251be:	009b      	lsls	r3, r3, #2
 80251c0:	3368      	adds	r3, #104	; 0x68
 80251c2:	443b      	add	r3, r7
 80251c4:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80251c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80251ca:	3301      	adds	r3, #1
 80251cc:	2b00      	cmp	r3, #0
 80251ce:	f003 0301 	and.w	r3, r3, #1
 80251d2:	bfb8      	it	lt
 80251d4:	425b      	neglt	r3, r3
 80251d6:	009b      	lsls	r3, r3, #2
 80251d8:	3368      	adds	r3, #104	; 0x68
 80251da:	443b      	add	r3, r7
 80251dc:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80251e0:	4619      	mov	r1, r3
 80251e2:	4610      	mov	r0, r2
 80251e4:	f7fe f9c0 	bl	8023568 <lfs_scmp>
 80251e8:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 80251ea:	2b00      	cmp	r3, #0
 80251ec:	dd01      	ble.n	80251f2 <lfs_dir_fetchmatch+0xea>
            r = i;
 80251ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80251f0:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 80251f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80251f4:	3301      	adds	r3, #1
 80251f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80251f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80251fa:	2b01      	cmp	r3, #1
 80251fc:	dda9      	ble.n	8025152 <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 80251fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8025200:	2b00      	cmp	r3, #0
 8025202:	f003 0301 	and.w	r3, r3, #1
 8025206:	bfb8      	it	lt
 8025208:	425b      	neglt	r3, r3
 802520a:	009b      	lsls	r3, r3, #2
 802520c:	687a      	ldr	r2, [r7, #4]
 802520e:	4413      	add	r3, r2
 8025210:	681a      	ldr	r2, [r3, #0]
 8025212:	68bb      	ldr	r3, [r7, #8]
 8025214:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 8025216:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8025218:	3301      	adds	r3, #1
 802521a:	2b00      	cmp	r3, #0
 802521c:	f003 0301 	and.w	r3, r3, #1
 8025220:	bfb8      	it	lt
 8025222:	425b      	neglt	r3, r3
 8025224:	009b      	lsls	r3, r3, #2
 8025226:	687a      	ldr	r2, [r7, #4]
 8025228:	4413      	add	r3, r2
 802522a:	681a      	ldr	r2, [r3, #0]
 802522c:	68bb      	ldr	r3, [r7, #8]
 802522e:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8025230:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8025232:	2b00      	cmp	r3, #0
 8025234:	f003 0301 	and.w	r3, r3, #1
 8025238:	bfb8      	it	lt
 802523a:	425b      	neglt	r3, r3
 802523c:	009b      	lsls	r3, r3, #2
 802523e:	3368      	adds	r3, #104	; 0x68
 8025240:	443b      	add	r3, r7
 8025242:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8025246:	68bb      	ldr	r3, [r7, #8]
 8025248:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 802524a:	68bb      	ldr	r3, [r7, #8]
 802524c:	2200      	movs	r2, #0
 802524e:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8025250:	2300      	movs	r3, #0
 8025252:	65bb      	str	r3, [r7, #88]	; 0x58
 8025254:	e2a3      	b.n	802579e <lfs_dir_fetchmatch+0x696>
        lfs_off_t off = 0;
 8025256:	2300      	movs	r3, #0
 8025258:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 802525a:	f04f 33ff 	mov.w	r3, #4294967295
 802525e:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 8025260:	2300      	movs	r3, #0
 8025262:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8025266:	4a96      	ldr	r2, [pc, #600]	; (80254c0 <lfs_dir_fetchmatch+0x3b8>)
 8025268:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802526c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8025270:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8025274:	2300      	movs	r3, #0
 8025276:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 802527a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802527c:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 802527e:	68bb      	ldr	r3, [r7, #8]
 8025280:	689b      	ldr	r3, [r3, #8]
 8025282:	4618      	mov	r0, r3
 8025284:	f7fe f989 	bl	802359a <lfs_tole32>
 8025288:	4602      	mov	r2, r0
 802528a:	68bb      	ldr	r3, [r7, #8]
 802528c:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 802528e:	68bb      	ldr	r3, [r7, #8]
 8025290:	3308      	adds	r3, #8
 8025292:	2204      	movs	r2, #4
 8025294:	4619      	mov	r1, r3
 8025296:	f04f 30ff 	mov.w	r0, #4294967295
 802529a:	f005 fbc9 	bl	802aa30 <lfs_crc>
 802529e:	4603      	mov	r3, r0
 80252a0:	627b      	str	r3, [r7, #36]	; 0x24
        dir->rev = lfs_fromle32(dir->rev);
 80252a2:	68bb      	ldr	r3, [r7, #8]
 80252a4:	689b      	ldr	r3, [r3, #8]
 80252a6:	4618      	mov	r0, r3
 80252a8:	f7fe f96c 	bl	8023584 <lfs_fromle32>
 80252ac:	4602      	mov	r2, r0
 80252ae:	68bb      	ldr	r3, [r7, #8]
 80252b0:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 80252b2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80252b4:	f7fe fe29 	bl	8023f0a <lfs_tag_dsize>
 80252b8:	4602      	mov	r2, r0
 80252ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80252bc:	4413      	add	r3, r2
 80252be:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 80252c0:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 80252c2:	68fb      	ldr	r3, [r7, #12]
 80252c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80252c6:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 80252c8:	68bb      	ldr	r3, [r7, #8]
 80252ca:	681b      	ldr	r3, [r3, #0]
 80252cc:	2204      	movs	r2, #4
 80252ce:	9203      	str	r2, [sp, #12]
 80252d0:	f107 0220 	add.w	r2, r7, #32
 80252d4:	9202      	str	r2, [sp, #8]
 80252d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80252d8:	9201      	str	r2, [sp, #4]
 80252da:	9300      	str	r3, [sp, #0]
 80252dc:	4603      	mov	r3, r0
 80252de:	460a      	mov	r2, r1
 80252e0:	2100      	movs	r1, #0
 80252e2:	68f8      	ldr	r0, [r7, #12]
 80252e4:	f7fe f9ba 	bl	802365c <lfs_bd_read>
 80252e8:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 80252ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80252ec:	2b00      	cmp	r3, #0
 80252ee:	d009      	beq.n	8025304 <lfs_dir_fetchmatch+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 80252f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80252f2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80252f6:	d103      	bne.n	8025300 <lfs_dir_fetchmatch+0x1f8>
                    // can't continue?
                    dir->erased = false;
 80252f8:	68bb      	ldr	r3, [r7, #8]
 80252fa:	2200      	movs	r2, #0
 80252fc:	759a      	strb	r2, [r3, #22]
                    break;
 80252fe:	e1d6      	b.n	80256ae <lfs_dir_fetchmatch+0x5a6>
                }
                return err;
 8025300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025302:	e260      	b.n	80257c6 <lfs_dir_fetchmatch+0x6be>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8025304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025306:	f107 0120 	add.w	r1, r7, #32
 802530a:	2204      	movs	r2, #4
 802530c:	4618      	mov	r0, r3
 802530e:	f005 fb8f 	bl	802aa30 <lfs_crc>
 8025312:	4603      	mov	r3, r0
 8025314:	627b      	str	r3, [r7, #36]	; 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 8025316:	6a3b      	ldr	r3, [r7, #32]
 8025318:	4618      	mov	r0, r3
 802531a:	f7fe f94a 	bl	80235b2 <lfs_frombe32>
 802531e:	4602      	mov	r2, r0
 8025320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025322:	4053      	eors	r3, r2
 8025324:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 8025326:	6a3b      	ldr	r3, [r7, #32]
 8025328:	4618      	mov	r0, r3
 802532a:	f7fe fd76 	bl	8023e1a <lfs_tag_isvalid>
 802532e:	4603      	mov	r3, r0
 8025330:	f083 0301 	eor.w	r3, r3, #1
 8025334:	b2db      	uxtb	r3, r3
 8025336:	2b00      	cmp	r3, #0
 8025338:	d01b      	beq.n	8025372 <lfs_dir_fetchmatch+0x26a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 802533a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 802533c:	f7fe fd8e 	bl	8023e5c <lfs_tag_type1>
 8025340:	4603      	mov	r3, r0
 8025342:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8025346:	d10d      	bne.n	8025364 <lfs_dir_fetchmatch+0x25c>
                        dir->off % lfs->cfg->prog_size == 0);
 8025348:	68bb      	ldr	r3, [r7, #8]
 802534a:	68db      	ldr	r3, [r3, #12]
 802534c:	68fa      	ldr	r2, [r7, #12]
 802534e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8025350:	6992      	ldr	r2, [r2, #24]
 8025352:	fbb3 f1f2 	udiv	r1, r3, r2
 8025356:	fb01 f202 	mul.w	r2, r1, r2
 802535a:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 802535c:	2b00      	cmp	r3, #0
 802535e:	d101      	bne.n	8025364 <lfs_dir_fetchmatch+0x25c>
 8025360:	2301      	movs	r3, #1
 8025362:	e000      	b.n	8025366 <lfs_dir_fetchmatch+0x25e>
 8025364:	2300      	movs	r3, #0
 8025366:	f003 0301 	and.w	r3, r3, #1
 802536a:	b2da      	uxtb	r2, r3
 802536c:	68bb      	ldr	r3, [r7, #8]
 802536e:	759a      	strb	r2, [r3, #22]
                break;
 8025370:	e19d      	b.n	80256ae <lfs_dir_fetchmatch+0x5a6>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8025372:	6a3b      	ldr	r3, [r7, #32]
 8025374:	4618      	mov	r0, r3
 8025376:	f7fe fdc8 	bl	8023f0a <lfs_tag_dsize>
 802537a:	4602      	mov	r2, r0
 802537c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802537e:	441a      	add	r2, r3
 8025380:	68fb      	ldr	r3, [r7, #12]
 8025382:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025384:	69db      	ldr	r3, [r3, #28]
 8025386:	429a      	cmp	r2, r3
 8025388:	d903      	bls.n	8025392 <lfs_dir_fetchmatch+0x28a>
                dir->erased = false;
 802538a:	68bb      	ldr	r3, [r7, #8]
 802538c:	2200      	movs	r2, #0
 802538e:	759a      	strb	r2, [r3, #22]
                break;
 8025390:	e18d      	b.n	80256ae <lfs_dir_fetchmatch+0x5a6>
            }

            ptag = tag;
 8025392:	6a3b      	ldr	r3, [r7, #32]
 8025394:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 8025396:	6a3b      	ldr	r3, [r7, #32]
 8025398:	4618      	mov	r0, r3
 802539a:	f7fe fd5f 	bl	8023e5c <lfs_tag_type1>
 802539e:	4603      	mov	r3, r0
 80253a0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80253a4:	d164      	bne.n	8025470 <lfs_dir_fetchmatch+0x368>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 80253a6:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80253a8:	68fb      	ldr	r3, [r7, #12]
 80253aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80253ac:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 80253ae:	68bb      	ldr	r3, [r7, #8]
 80253b0:	681b      	ldr	r3, [r3, #0]
 80253b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80253b4:	3204      	adds	r2, #4
 80253b6:	2104      	movs	r1, #4
 80253b8:	9103      	str	r1, [sp, #12]
 80253ba:	f107 011c 	add.w	r1, r7, #28
 80253be:	9102      	str	r1, [sp, #8]
 80253c0:	9201      	str	r2, [sp, #4]
 80253c2:	9300      	str	r3, [sp, #0]
 80253c4:	4623      	mov	r3, r4
 80253c6:	4602      	mov	r2, r0
 80253c8:	2100      	movs	r1, #0
 80253ca:	68f8      	ldr	r0, [r7, #12]
 80253cc:	f7fe f946 	bl	802365c <lfs_bd_read>
 80253d0:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 80253d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80253d4:	2b00      	cmp	r3, #0
 80253d6:	d009      	beq.n	80253ec <lfs_dir_fetchmatch+0x2e4>
                    if (err == LFS_ERR_CORRUPT) {
 80253d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80253da:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80253de:	d103      	bne.n	80253e8 <lfs_dir_fetchmatch+0x2e0>
                        dir->erased = false;
 80253e0:	68bb      	ldr	r3, [r7, #8]
 80253e2:	2200      	movs	r2, #0
 80253e4:	759a      	strb	r2, [r3, #22]
                        break;
 80253e6:	e162      	b.n	80256ae <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 80253e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 80253ea:	e1ec      	b.n	80257c6 <lfs_dir_fetchmatch+0x6be>
                }
                dcrc = lfs_fromle32(dcrc);
 80253ec:	69fb      	ldr	r3, [r7, #28]
 80253ee:	4618      	mov	r0, r3
 80253f0:	f7fe f8c8 	bl	8023584 <lfs_fromle32>
 80253f4:	4603      	mov	r3, r0
 80253f6:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 80253f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80253fa:	69fb      	ldr	r3, [r7, #28]
 80253fc:	429a      	cmp	r2, r3
 80253fe:	d003      	beq.n	8025408 <lfs_dir_fetchmatch+0x300>
                    dir->erased = false;
 8025400:	68bb      	ldr	r3, [r7, #8]
 8025402:	2200      	movs	r2, #0
 8025404:	759a      	strb	r2, [r3, #22]
                    break;
 8025406:	e152      	b.n	80256ae <lfs_dir_fetchmatch+0x5a6>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8025408:	6a3b      	ldr	r3, [r7, #32]
 802540a:	4618      	mov	r0, r3
 802540c:	f7fe fd46 	bl	8023e9c <lfs_tag_chunk>
 8025410:	4603      	mov	r3, r0
 8025412:	07db      	lsls	r3, r3, #31
 8025414:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8025416:	4053      	eors	r3, r2
 8025418:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 802541a:	68fb      	ldr	r3, [r7, #12]
 802541c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802541e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8025422:	2204      	movs	r2, #4
 8025424:	4618      	mov	r0, r3
 8025426:	f005 fb03 	bl	802aa30 <lfs_crc>
 802542a:	4602      	mov	r2, r0
 802542c:	68fb      	ldr	r3, [r7, #12]
 802542e:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8025430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025432:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 8025434:	6a3b      	ldr	r3, [r7, #32]
 8025436:	4618      	mov	r0, r3
 8025438:	f7fe fd67 	bl	8023f0a <lfs_tag_dsize>
 802543c:	4602      	mov	r2, r0
 802543e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025440:	441a      	add	r2, r3
 8025442:	68bb      	ldr	r3, [r7, #8]
 8025444:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8025446:	68bb      	ldr	r3, [r7, #8]
 8025448:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802544a:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 802544c:	68bb      	ldr	r3, [r7, #8]
 802544e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8025452:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8025454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025456:	68bb      	ldr	r3, [r7, #8]
 8025458:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 802545a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802545c:	68bb      	ldr	r3, [r7, #8]
 802545e:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8025460:	68bb      	ldr	r3, [r7, #8]
 8025462:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8025466:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 8025468:	f04f 33ff 	mov.w	r3, #4294967295
 802546c:	627b      	str	r3, [r7, #36]	; 0x24
 802546e:	e720      	b.n	80252b2 <lfs_dir_fetchmatch+0x1aa>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8025470:	2304      	movs	r3, #4
 8025472:	647b      	str	r3, [r7, #68]	; 0x44
 8025474:	e032      	b.n	80254dc <lfs_dir_fetchmatch+0x3d4>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 8025476:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8025478:	68fb      	ldr	r3, [r7, #12]
 802547a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802547c:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 802547e:	68bb      	ldr	r3, [r7, #8]
 8025480:	681b      	ldr	r3, [r3, #0]
 8025482:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8025484:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8025486:	440a      	add	r2, r1
 8025488:	2101      	movs	r1, #1
 802548a:	9103      	str	r1, [sp, #12]
 802548c:	f107 011b 	add.w	r1, r7, #27
 8025490:	9102      	str	r1, [sp, #8]
 8025492:	9201      	str	r2, [sp, #4]
 8025494:	9300      	str	r3, [sp, #0]
 8025496:	4623      	mov	r3, r4
 8025498:	4602      	mov	r2, r0
 802549a:	2100      	movs	r1, #0
 802549c:	68f8      	ldr	r0, [r7, #12]
 802549e:	f7fe f8dd 	bl	802365c <lfs_bd_read>
 80254a2:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 80254a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80254a6:	2b00      	cmp	r3, #0
 80254a8:	d00c      	beq.n	80254c4 <lfs_dir_fetchmatch+0x3bc>
                    if (err == LFS_ERR_CORRUPT) {
 80254aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80254ac:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80254b0:	d103      	bne.n	80254ba <lfs_dir_fetchmatch+0x3b2>
                        dir->erased = false;
 80254b2:	68bb      	ldr	r3, [r7, #8]
 80254b4:	2200      	movs	r2, #0
 80254b6:	759a      	strb	r2, [r3, #22]
 80254b8:	e018      	b.n	80254ec <lfs_dir_fetchmatch+0x3e4>
                        break;
                    }
                    return err;
 80254ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 80254bc:	e183      	b.n	80257c6 <lfs_dir_fetchmatch+0x6be>
 80254be:	bf00      	nop
 80254c0:	08033470 	.word	0x08033470
                }

                crc = lfs_crc(crc, &dat, 1);
 80254c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80254c6:	f107 011b 	add.w	r1, r7, #27
 80254ca:	2201      	movs	r2, #1
 80254cc:	4618      	mov	r0, r3
 80254ce:	f005 faaf 	bl	802aa30 <lfs_crc>
 80254d2:	4603      	mov	r3, r0
 80254d4:	627b      	str	r3, [r7, #36]	; 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 80254d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80254d8:	3301      	adds	r3, #1
 80254da:	647b      	str	r3, [r7, #68]	; 0x44
 80254dc:	6a3b      	ldr	r3, [r7, #32]
 80254de:	4618      	mov	r0, r3
 80254e0:	f7fe fd13 	bl	8023f0a <lfs_tag_dsize>
 80254e4:	4602      	mov	r2, r0
 80254e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80254e8:	4293      	cmp	r3, r2
 80254ea:	d3c4      	bcc.n	8025476 <lfs_dir_fetchmatch+0x36e>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 80254ec:	6a3b      	ldr	r3, [r7, #32]
 80254ee:	4618      	mov	r0, r3
 80254f0:	f7fe fcb4 	bl	8023e5c <lfs_tag_type1>
 80254f4:	4603      	mov	r3, r0
 80254f6:	2b00      	cmp	r3, #0
 80254f8:	d113      	bne.n	8025522 <lfs_dir_fetchmatch+0x41a>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 80254fa:	6a3b      	ldr	r3, [r7, #32]
 80254fc:	4618      	mov	r0, r3
 80254fe:	f7fe fce7 	bl	8023ed0 <lfs_tag_id>
 8025502:	4603      	mov	r3, r0
 8025504:	461a      	mov	r2, r3
 8025506:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 802550a:	4293      	cmp	r3, r2
 802550c:	f200 8083 	bhi.w	8025616 <lfs_dir_fetchmatch+0x50e>
                    tempcount = lfs_tag_id(tag) + 1;
 8025510:	6a3b      	ldr	r3, [r7, #32]
 8025512:	4618      	mov	r0, r3
 8025514:	f7fe fcdc 	bl	8023ed0 <lfs_tag_id>
 8025518:	4603      	mov	r3, r0
 802551a:	3301      	adds	r3, #1
 802551c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8025520:	e079      	b.n	8025616 <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8025522:	6a3b      	ldr	r3, [r7, #32]
 8025524:	4618      	mov	r0, r3
 8025526:	f7fe fc99 	bl	8023e5c <lfs_tag_type1>
 802552a:	4603      	mov	r3, r0
 802552c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025530:	d134      	bne.n	802559c <lfs_dir_fetchmatch+0x494>
                tempcount += lfs_tag_splice(tag);
 8025532:	6a3b      	ldr	r3, [r7, #32]
 8025534:	4618      	mov	r0, r3
 8025536:	f7fe fcbe 	bl	8023eb6 <lfs_tag_splice>
 802553a:	4603      	mov	r3, r0
 802553c:	b29a      	uxth	r2, r3
 802553e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8025542:	4413      	add	r3, r2
 8025544:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8025548:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802554a:	4ba1      	ldr	r3, [pc, #644]	; (80257d0 <lfs_dir_fetchmatch+0x6c8>)
 802554c:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 802554e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8025552:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8025556:	6a3a      	ldr	r2, [r7, #32]
 8025558:	4293      	cmp	r3, r2
 802555a:	d104      	bne.n	8025566 <lfs_dir_fetchmatch+0x45e>
                    tempbesttag |= 0x80000000;
 802555c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802555e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025562:	64bb      	str	r3, [r7, #72]	; 0x48
 8025564:	e057      	b.n	8025616 <lfs_dir_fetchmatch+0x50e>
                } else if (tempbesttag != -1 &&
 8025566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025568:	f1b3 3fff 	cmp.w	r3, #4294967295
 802556c:	d053      	beq.n	8025616 <lfs_dir_fetchmatch+0x50e>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 802556e:	6a3b      	ldr	r3, [r7, #32]
 8025570:	4618      	mov	r0, r3
 8025572:	f7fe fcad 	bl	8023ed0 <lfs_tag_id>
 8025576:	4603      	mov	r3, r0
 8025578:	461c      	mov	r4, r3
 802557a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802557c:	4618      	mov	r0, r3
 802557e:	f7fe fca7 	bl	8023ed0 <lfs_tag_id>
 8025582:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8025584:	429c      	cmp	r4, r3
 8025586:	d846      	bhi.n	8025616 <lfs_dir_fetchmatch+0x50e>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8025588:	6a3b      	ldr	r3, [r7, #32]
 802558a:	4618      	mov	r0, r3
 802558c:	f7fe fc93 	bl	8023eb6 <lfs_tag_splice>
 8025590:	4603      	mov	r3, r0
 8025592:	029a      	lsls	r2, r3, #10
 8025594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025596:	4413      	add	r3, r2
 8025598:	64bb      	str	r3, [r7, #72]	; 0x48
 802559a:	e03c      	b.n	8025616 <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 802559c:	6a3b      	ldr	r3, [r7, #32]
 802559e:	4618      	mov	r0, r3
 80255a0:	f7fe fc5c 	bl	8023e5c <lfs_tag_type1>
 80255a4:	4603      	mov	r3, r0
 80255a6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80255aa:	d134      	bne.n	8025616 <lfs_dir_fetchmatch+0x50e>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 80255ac:	6a3b      	ldr	r3, [r7, #32]
 80255ae:	4618      	mov	r0, r3
 80255b0:	f7fe fc74 	bl	8023e9c <lfs_tag_chunk>
 80255b4:	4603      	mov	r3, r0
 80255b6:	f003 0301 	and.w	r3, r3, #1
 80255ba:	2b00      	cmp	r3, #0
 80255bc:	bf14      	ite	ne
 80255be:	2301      	movne	r3, #1
 80255c0:	2300      	moveq	r3, #0
 80255c2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 80255c6:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80255c8:	68fb      	ldr	r3, [r7, #12]
 80255ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80255cc:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 80255ce:	68bb      	ldr	r3, [r7, #8]
 80255d0:	681b      	ldr	r3, [r3, #0]
 80255d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80255d4:	3204      	adds	r2, #4
 80255d6:	2108      	movs	r1, #8
 80255d8:	9103      	str	r1, [sp, #12]
 80255da:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80255de:	9102      	str	r1, [sp, #8]
 80255e0:	9201      	str	r2, [sp, #4]
 80255e2:	9300      	str	r3, [sp, #0]
 80255e4:	4623      	mov	r3, r4
 80255e6:	4602      	mov	r2, r0
 80255e8:	2100      	movs	r1, #0
 80255ea:	68f8      	ldr	r0, [r7, #12]
 80255ec:	f7fe f836 	bl	802365c <lfs_bd_read>
 80255f0:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 80255f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80255f4:	2b00      	cmp	r3, #0
 80255f6:	d009      	beq.n	802560c <lfs_dir_fetchmatch+0x504>
                    if (err == LFS_ERR_CORRUPT) {
 80255f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80255fa:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80255fe:	d103      	bne.n	8025608 <lfs_dir_fetchmatch+0x500>
                        dir->erased = false;
 8025600:	68bb      	ldr	r3, [r7, #8]
 8025602:	2200      	movs	r2, #0
 8025604:	759a      	strb	r2, [r3, #22]
                        break;
 8025606:	e052      	b.n	80256ae <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 8025608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802560a:	e0dc      	b.n	80257c6 <lfs_dir_fetchmatch+0x6be>
                }
                lfs_pair_fromle32(temptail);
 802560c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8025610:	4618      	mov	r0, r3
 8025612:	f7fe fbce 	bl	8023db2 <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8025616:	6a3a      	ldr	r2, [r7, #32]
 8025618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802561a:	405a      	eors	r2, r3
 802561c:	683b      	ldr	r3, [r7, #0]
 802561e:	4013      	ands	r3, r2
 8025620:	2b00      	cmp	r3, #0
 8025622:	f47f ae46 	bne.w	80252b2 <lfs_dir_fetchmatch+0x1aa>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8025626:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8025628:	68bb      	ldr	r3, [r7, #8]
 802562a:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 802562c:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 802562e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025630:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8025632:	617b      	str	r3, [r7, #20]
 8025634:	f107 0210 	add.w	r2, r7, #16
 8025638:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802563c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8025640:	4798      	blx	r3
 8025642:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 8025644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025646:	2b00      	cmp	r3, #0
 8025648:	da09      	bge.n	802565e <lfs_dir_fetchmatch+0x556>
                    if (res == LFS_ERR_CORRUPT) {
 802564a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802564c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8025650:	d103      	bne.n	802565a <lfs_dir_fetchmatch+0x552>
                        dir->erased = false;
 8025652:	68bb      	ldr	r3, [r7, #8]
 8025654:	2200      	movs	r2, #0
 8025656:	759a      	strb	r2, [r3, #22]
 8025658:	e029      	b.n	80256ae <lfs_dir_fetchmatch+0x5a6>
                        break;
                    }
                    return res;
 802565a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 802565c:	e0b3      	b.n	80257c6 <lfs_dir_fetchmatch+0x6be>
                }

                if (res == LFS_CMP_EQ) {
 802565e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025660:	2b00      	cmp	r3, #0
 8025662:	d102      	bne.n	802566a <lfs_dir_fetchmatch+0x562>
                    // found a match
                    tempbesttag = tag;
 8025664:	6a3b      	ldr	r3, [r7, #32]
 8025666:	64bb      	str	r3, [r7, #72]	; 0x48
 8025668:	e623      	b.n	80252b2 <lfs_dir_fetchmatch+0x1aa>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 802566a:	6a3a      	ldr	r2, [r7, #32]
 802566c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802566e:	405a      	eors	r2, r3
 8025670:	4b58      	ldr	r3, [pc, #352]	; (80257d4 <lfs_dir_fetchmatch+0x6cc>)
 8025672:	4013      	ands	r3, r2
 8025674:	2b00      	cmp	r3, #0
 8025676:	d103      	bne.n	8025680 <lfs_dir_fetchmatch+0x578>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8025678:	f04f 33ff 	mov.w	r3, #4294967295
 802567c:	64bb      	str	r3, [r7, #72]	; 0x48
 802567e:	e618      	b.n	80252b2 <lfs_dir_fetchmatch+0x1aa>
                } else if (res == LFS_CMP_GT &&
 8025680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025682:	2b02      	cmp	r3, #2
 8025684:	f47f ae15 	bne.w	80252b2 <lfs_dir_fetchmatch+0x1aa>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8025688:	6a3b      	ldr	r3, [r7, #32]
 802568a:	4618      	mov	r0, r3
 802568c:	f7fe fc20 	bl	8023ed0 <lfs_tag_id>
 8025690:	4603      	mov	r3, r0
 8025692:	461c      	mov	r4, r3
 8025694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025696:	4618      	mov	r0, r3
 8025698:	f7fe fc1a 	bl	8023ed0 <lfs_tag_id>
 802569c:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 802569e:	429c      	cmp	r4, r3
 80256a0:	f63f ae07 	bhi.w	80252b2 <lfs_dir_fetchmatch+0x1aa>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 80256a4:	6a3b      	ldr	r3, [r7, #32]
 80256a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80256aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80256ac:	e601      	b.n	80252b2 <lfs_dir_fetchmatch+0x1aa>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 80256ae:	68bb      	ldr	r3, [r7, #8]
 80256b0:	68db      	ldr	r3, [r3, #12]
 80256b2:	2b00      	cmp	r3, #0
 80256b4:	d100      	bne.n	80256b8 <lfs_dir_fetchmatch+0x5b0>
 80256b6:	e05d      	b.n	8025774 <lfs_dir_fetchmatch+0x66c>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 80256b8:	68fb      	ldr	r3, [r7, #12]
 80256ba:	333c      	adds	r3, #60	; 0x3c
 80256bc:	68ba      	ldr	r2, [r7, #8]
 80256be:	4611      	mov	r1, r2
 80256c0:	4618      	mov	r0, r3
 80256c2:	f7fe fcad 	bl	8024020 <lfs_gstate_hasmovehere>
 80256c6:	4603      	mov	r3, r0
 80256c8:	2b00      	cmp	r3, #0
 80256ca:	d028      	beq.n	802571e <lfs_dir_fetchmatch+0x616>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 80256cc:	68fb      	ldr	r3, [r7, #12]
 80256ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80256d0:	4618      	mov	r0, r3
 80256d2:	f7fe fbfd 	bl	8023ed0 <lfs_tag_id>
 80256d6:	4603      	mov	r3, r0
 80256d8:	461c      	mov	r4, r3
 80256da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80256dc:	4618      	mov	r0, r3
 80256de:	f7fe fbf7 	bl	8023ed0 <lfs_tag_id>
 80256e2:	4603      	mov	r3, r0
 80256e4:	429c      	cmp	r4, r3
 80256e6:	d104      	bne.n	80256f2 <lfs_dir_fetchmatch+0x5ea>
                    besttag |= 0x80000000;
 80256e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80256ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80256ee:	667b      	str	r3, [r7, #100]	; 0x64
 80256f0:	e015      	b.n	802571e <lfs_dir_fetchmatch+0x616>
                } else if (besttag != -1 &&
 80256f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80256f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80256f8:	d011      	beq.n	802571e <lfs_dir_fetchmatch+0x616>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 80256fa:	68fb      	ldr	r3, [r7, #12]
 80256fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80256fe:	4618      	mov	r0, r3
 8025700:	f7fe fbe6 	bl	8023ed0 <lfs_tag_id>
 8025704:	4603      	mov	r3, r0
 8025706:	461c      	mov	r4, r3
 8025708:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802570a:	4618      	mov	r0, r3
 802570c:	f7fe fbe0 	bl	8023ed0 <lfs_tag_id>
 8025710:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 8025712:	429c      	cmp	r4, r3
 8025714:	d203      	bcs.n	802571e <lfs_dir_fetchmatch+0x616>
                    besttag -= LFS_MKTAG(0, 1, 0);
 8025716:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025718:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 802571c:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 802571e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8025720:	2b00      	cmp	r3, #0
 8025722:	d00f      	beq.n	8025744 <lfs_dir_fetchmatch+0x63c>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8025724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025726:	4618      	mov	r0, r3
 8025728:	f7fe fbd2 	bl	8023ed0 <lfs_tag_id>
 802572c:	4603      	mov	r3, r0
 802572e:	461a      	mov	r2, r3
 8025730:	68bb      	ldr	r3, [r7, #8]
 8025732:	8a9b      	ldrh	r3, [r3, #20]
 8025734:	4619      	mov	r1, r3
 8025736:	4610      	mov	r0, r2
 8025738:	f7fd feb4 	bl	80234a4 <lfs_min>
 802573c:	4603      	mov	r3, r0
 802573e:	b29a      	uxth	r2, r3
 8025740:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8025742:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 8025744:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025746:	4618      	mov	r0, r3
 8025748:	f7fe fb67 	bl	8023e1a <lfs_tag_isvalid>
 802574c:	4603      	mov	r3, r0
 802574e:	2b00      	cmp	r3, #0
 8025750:	d001      	beq.n	8025756 <lfs_dir_fetchmatch+0x64e>
                return besttag;
 8025752:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025754:	e037      	b.n	80257c6 <lfs_dir_fetchmatch+0x6be>
            } else if (lfs_tag_id(besttag) < dir->count) {
 8025756:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025758:	4618      	mov	r0, r3
 802575a:	f7fe fbb9 	bl	8023ed0 <lfs_tag_id>
 802575e:	4603      	mov	r3, r0
 8025760:	461a      	mov	r2, r3
 8025762:	68bb      	ldr	r3, [r7, #8]
 8025764:	8a9b      	ldrh	r3, [r3, #20]
 8025766:	429a      	cmp	r2, r3
 8025768:	d202      	bcs.n	8025770 <lfs_dir_fetchmatch+0x668>
                return LFS_ERR_NOENT;
 802576a:	f06f 0301 	mvn.w	r3, #1
 802576e:	e02a      	b.n	80257c6 <lfs_dir_fetchmatch+0x6be>
            } else {
                return 0;
 8025770:	2300      	movs	r3, #0
 8025772:	e028      	b.n	80257c6 <lfs_dir_fetchmatch+0x6be>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 8025774:	68bb      	ldr	r3, [r7, #8]
 8025776:	4618      	mov	r0, r3
 8025778:	f7fe fa94 	bl	8023ca4 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 802577c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802577e:	3301      	adds	r3, #1
 8025780:	2b00      	cmp	r3, #0
 8025782:	f003 0301 	and.w	r3, r3, #1
 8025786:	bfb8      	it	lt
 8025788:	425b      	neglt	r3, r3
 802578a:	009b      	lsls	r3, r3, #2
 802578c:	3368      	adds	r3, #104	; 0x68
 802578e:	443b      	add	r3, r7
 8025790:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8025794:	68bb      	ldr	r3, [r7, #8]
 8025796:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8025798:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802579a:	3301      	adds	r3, #1
 802579c:	65bb      	str	r3, [r7, #88]	; 0x58
 802579e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80257a0:	2b01      	cmp	r3, #1
 80257a2:	f77f ad58 	ble.w	8025256 <lfs_dir_fetchmatch+0x14e>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 80257a6:	68bb      	ldr	r3, [r7, #8]
 80257a8:	681a      	ldr	r2, [r3, #0]
 80257aa:	68bb      	ldr	r3, [r7, #8]
 80257ac:	685b      	ldr	r3, [r3, #4]
 80257ae:	490a      	ldr	r1, [pc, #40]	; (80257d8 <lfs_dir_fetchmatch+0x6d0>)
 80257b0:	9101      	str	r1, [sp, #4]
 80257b2:	9300      	str	r3, [sp, #0]
 80257b4:	4613      	mov	r3, r2
 80257b6:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80257ba:	4908      	ldr	r1, [pc, #32]	; (80257dc <lfs_dir_fetchmatch+0x6d4>)
 80257bc:	4808      	ldr	r0, [pc, #32]	; (80257e0 <lfs_dir_fetchmatch+0x6d8>)
 80257be:	f007 fdef 	bl	802d3a0 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 80257c2:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 80257c6:	4618      	mov	r0, r3
 80257c8:	376c      	adds	r7, #108	; 0x6c
 80257ca:	46bd      	mov	sp, r7
 80257cc:	bd90      	pop	{r4, r7, pc}
 80257ce:	bf00      	nop
 80257d0:	000ffc00 	.word	0x000ffc00
 80257d4:	7ffffc00 	.word	0x7ffffc00
 80257d8:	0803342c 	.word	0x0803342c
 80257dc:	08033318 	.word	0x08033318
 80257e0:	08033438 	.word	0x08033438

080257e4 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 80257e4:	b580      	push	{r7, lr}
 80257e6:	b088      	sub	sp, #32
 80257e8:	af04      	add	r7, sp, #16
 80257ea:	60f8      	str	r0, [r7, #12]
 80257ec:	60b9      	str	r1, [r7, #8]
 80257ee:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 80257f0:	2300      	movs	r3, #0
 80257f2:	9303      	str	r3, [sp, #12]
 80257f4:	2300      	movs	r3, #0
 80257f6:	9302      	str	r3, [sp, #8]
 80257f8:	2300      	movs	r3, #0
 80257fa:	9301      	str	r3, [sp, #4]
 80257fc:	f04f 33ff 	mov.w	r3, #4294967295
 8025800:	9300      	str	r3, [sp, #0]
 8025802:	f04f 33ff 	mov.w	r3, #4294967295
 8025806:	687a      	ldr	r2, [r7, #4]
 8025808:	68b9      	ldr	r1, [r7, #8]
 802580a:	68f8      	ldr	r0, [r7, #12]
 802580c:	f7ff fc7c 	bl	8025108 <lfs_dir_fetchmatch>
 8025810:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8025812:	4618      	mov	r0, r3
 8025814:	3710      	adds	r7, #16
 8025816:	46bd      	mov	sp, r7
 8025818:	bd80      	pop	{r7, pc}
	...

0802581c <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 802581c:	b580      	push	{r7, lr}
 802581e:	b08a      	sub	sp, #40	; 0x28
 8025820:	af02      	add	r7, sp, #8
 8025822:	60f8      	str	r0, [r7, #12]
 8025824:	60b9      	str	r1, [r7, #8]
 8025826:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8025828:	f107 0310 	add.w	r3, r7, #16
 802582c:	9300      	str	r3, [sp, #0]
 802582e:	4b12      	ldr	r3, [pc, #72]	; (8025878 <lfs_dir_getgstate+0x5c>)
 8025830:	4a12      	ldr	r2, [pc, #72]	; (802587c <lfs_dir_getgstate+0x60>)
 8025832:	68b9      	ldr	r1, [r7, #8]
 8025834:	68f8      	ldr	r0, [r7, #12]
 8025836:	f7fe ff35 	bl	80246a4 <lfs_dir_get>
 802583a:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 802583c:	69fb      	ldr	r3, [r7, #28]
 802583e:	2b00      	cmp	r3, #0
 8025840:	da05      	bge.n	802584e <lfs_dir_getgstate+0x32>
 8025842:	69fb      	ldr	r3, [r7, #28]
 8025844:	f113 0f02 	cmn.w	r3, #2
 8025848:	d001      	beq.n	802584e <lfs_dir_getgstate+0x32>
        return res;
 802584a:	69fb      	ldr	r3, [r7, #28]
 802584c:	e00f      	b.n	802586e <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 802584e:	69fb      	ldr	r3, [r7, #28]
 8025850:	f113 0f02 	cmn.w	r3, #2
 8025854:	d00a      	beq.n	802586c <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8025856:	f107 0310 	add.w	r3, r7, #16
 802585a:	4618      	mov	r0, r3
 802585c:	f7fe fc00 	bl	8024060 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8025860:	f107 0310 	add.w	r3, r7, #16
 8025864:	4619      	mov	r1, r3
 8025866:	6878      	ldr	r0, [r7, #4]
 8025868:	f7fe fb63 	bl	8023f32 <lfs_gstate_xor>
    }

    return 0;
 802586c:	2300      	movs	r3, #0
}
 802586e:	4618      	mov	r0, r3
 8025870:	3720      	adds	r7, #32
 8025872:	46bd      	mov	sp, r7
 8025874:	bd80      	pop	{r7, pc}
 8025876:	bf00      	nop
 8025878:	7ff0000c 	.word	0x7ff0000c
 802587c:	7ff00000 	.word	0x7ff00000

08025880 <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 8025880:	b580      	push	{r7, lr}
 8025882:	b08a      	sub	sp, #40	; 0x28
 8025884:	af02      	add	r7, sp, #8
 8025886:	60f8      	str	r0, [r7, #12]
 8025888:	60b9      	str	r1, [r7, #8]
 802588a:	603b      	str	r3, [r7, #0]
 802588c:	4613      	mov	r3, r2
 802588e:	80fb      	strh	r3, [r7, #6]
    if (id == 0x3ff) {
 8025890:	88fb      	ldrh	r3, [r7, #6]
 8025892:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8025896:	4293      	cmp	r3, r2
 8025898:	d10b      	bne.n	80258b2 <lfs_dir_getinfo+0x32>
        // special case for root
        strcpy(info->name, "/");
 802589a:	683b      	ldr	r3, [r7, #0]
 802589c:	3308      	adds	r3, #8
 802589e:	4932      	ldr	r1, [pc, #200]	; (8025968 <lfs_dir_getinfo+0xe8>)
 80258a0:	461a      	mov	r2, r3
 80258a2:	460b      	mov	r3, r1
 80258a4:	881b      	ldrh	r3, [r3, #0]
 80258a6:	8013      	strh	r3, [r2, #0]
        info->type = LFS_TYPE_DIR;
 80258a8:	683b      	ldr	r3, [r7, #0]
 80258aa:	2202      	movs	r2, #2
 80258ac:	701a      	strb	r2, [r3, #0]
        return 0;
 80258ae:	2300      	movs	r3, #0
 80258b0:	e055      	b.n	802595e <lfs_dir_getinfo+0xde>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 80258b2:	88fb      	ldrh	r3, [r7, #6]
 80258b4:	029a      	lsls	r2, r3, #10
 80258b6:	68fb      	ldr	r3, [r7, #12]
 80258b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80258ba:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 80258bc:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 80258be:	683b      	ldr	r3, [r7, #0]
 80258c0:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 80258c2:	9300      	str	r3, [sp, #0]
 80258c4:	4613      	mov	r3, r2
 80258c6:	4a29      	ldr	r2, [pc, #164]	; (802596c <lfs_dir_getinfo+0xec>)
 80258c8:	68b9      	ldr	r1, [r7, #8]
 80258ca:	68f8      	ldr	r0, [r7, #12]
 80258cc:	f7fe feea 	bl	80246a4 <lfs_dir_get>
 80258d0:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 80258d2:	69fb      	ldr	r3, [r7, #28]
 80258d4:	2b00      	cmp	r3, #0
 80258d6:	da01      	bge.n	80258dc <lfs_dir_getinfo+0x5c>
        return (int)tag;
 80258d8:	69fb      	ldr	r3, [r7, #28]
 80258da:	e040      	b.n	802595e <lfs_dir_getinfo+0xde>
    }

    info->type = lfs_tag_type3(tag);
 80258dc:	69fb      	ldr	r3, [r7, #28]
 80258de:	4618      	mov	r0, r3
 80258e0:	f7fe facc 	bl	8023e7c <lfs_tag_type3>
 80258e4:	4603      	mov	r3, r0
 80258e6:	b2da      	uxtb	r2, r3
 80258e8:	683b      	ldr	r3, [r7, #0]
 80258ea:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 80258ec:	88fb      	ldrh	r3, [r7, #6]
 80258ee:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80258f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80258f4:	f043 0308 	orr.w	r3, r3, #8
 80258f8:	f107 0214 	add.w	r2, r7, #20
 80258fc:	9200      	str	r2, [sp, #0]
 80258fe:	4a1c      	ldr	r2, [pc, #112]	; (8025970 <lfs_dir_getinfo+0xf0>)
 8025900:	68b9      	ldr	r1, [r7, #8]
 8025902:	68f8      	ldr	r0, [r7, #12]
 8025904:	f7fe fece 	bl	80246a4 <lfs_dir_get>
 8025908:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 802590a:	69fb      	ldr	r3, [r7, #28]
 802590c:	2b00      	cmp	r3, #0
 802590e:	da01      	bge.n	8025914 <lfs_dir_getinfo+0x94>
        return (int)tag;
 8025910:	69fb      	ldr	r3, [r7, #28]
 8025912:	e024      	b.n	802595e <lfs_dir_getinfo+0xde>
    }
    lfs_ctz_fromle32(&ctz);
 8025914:	f107 0314 	add.w	r3, r7, #20
 8025918:	4618      	mov	r0, r3
 802591a:	f7fe fbe1 	bl	80240e0 <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 802591e:	69fb      	ldr	r3, [r7, #28]
 8025920:	4618      	mov	r0, r3
 8025922:	f7fe faab 	bl	8023e7c <lfs_tag_type3>
 8025926:	4603      	mov	r3, r0
 8025928:	461a      	mov	r2, r3
 802592a:	f240 2302 	movw	r3, #514	; 0x202
 802592e:	429a      	cmp	r2, r3
 8025930:	d103      	bne.n	802593a <lfs_dir_getinfo+0xba>
        info->size = ctz.size;
 8025932:	69ba      	ldr	r2, [r7, #24]
 8025934:	683b      	ldr	r3, [r7, #0]
 8025936:	605a      	str	r2, [r3, #4]
 8025938:	e010      	b.n	802595c <lfs_dir_getinfo+0xdc>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 802593a:	69fb      	ldr	r3, [r7, #28]
 802593c:	4618      	mov	r0, r3
 802593e:	f7fe fa9d 	bl	8023e7c <lfs_tag_type3>
 8025942:	4603      	mov	r3, r0
 8025944:	461a      	mov	r2, r3
 8025946:	f240 2301 	movw	r3, #513	; 0x201
 802594a:	429a      	cmp	r2, r3
 802594c:	d106      	bne.n	802595c <lfs_dir_getinfo+0xdc>
        info->size = lfs_tag_size(tag);
 802594e:	69fb      	ldr	r3, [r7, #28]
 8025950:	4618      	mov	r0, r3
 8025952:	f7fe facd 	bl	8023ef0 <lfs_tag_size>
 8025956:	4602      	mov	r2, r0
 8025958:	683b      	ldr	r3, [r7, #0]
 802595a:	605a      	str	r2, [r3, #4]
    }

    return 0;
 802595c:	2300      	movs	r3, #0
}
 802595e:	4618      	mov	r0, r3
 8025960:	3720      	adds	r7, #32
 8025962:	46bd      	mov	sp, r7
 8025964:	bd80      	pop	{r7, pc}
 8025966:	bf00      	nop
 8025968:	08033478 	.word	0x08033478
 802596c:	780ffc00 	.word	0x780ffc00
 8025970:	700ffc00 	.word	0x700ffc00

08025974 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8025974:	b590      	push	{r4, r7, lr}
 8025976:	b08f      	sub	sp, #60	; 0x3c
 8025978:	af04      	add	r7, sp, #16
 802597a:	60f8      	str	r0, [r7, #12]
 802597c:	60b9      	str	r1, [r7, #8]
 802597e:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8025980:	68fb      	ldr	r3, [r7, #12]
 8025982:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8025984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025986:	681b      	ldr	r3, [r3, #0]
 8025988:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 802598a:	687b      	ldr	r3, [r7, #4]
 802598c:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 802598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025990:	689c      	ldr	r4, [r3, #8]
 8025992:	68b8      	ldr	r0, [r7, #8]
 8025994:	f7fe faac 	bl	8023ef0 <lfs_tag_size>
 8025998:	4603      	mov	r3, r0
 802599a:	4619      	mov	r1, r3
 802599c:	4620      	mov	r0, r4
 802599e:	f7fd fd81 	bl	80234a4 <lfs_min>
 80259a2:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 80259a4:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 80259a6:	69fb      	ldr	r3, [r7, #28]
 80259a8:	681b      	ldr	r3, [r3, #0]
 80259aa:	69fa      	ldr	r2, [r7, #28]
 80259ac:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 80259ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80259b0:	6849      	ldr	r1, [r1, #4]
 80259b2:	69b8      	ldr	r0, [r7, #24]
 80259b4:	9003      	str	r0, [sp, #12]
 80259b6:	9102      	str	r1, [sp, #8]
 80259b8:	9201      	str	r2, [sp, #4]
 80259ba:	9300      	str	r3, [sp, #0]
 80259bc:	69bb      	ldr	r3, [r7, #24]
 80259be:	4622      	mov	r2, r4
 80259c0:	2100      	movs	r1, #0
 80259c2:	6a38      	ldr	r0, [r7, #32]
 80259c4:	f7fd ff8e 	bl	80238e4 <lfs_bd_cmp>
 80259c8:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 80259ca:	697b      	ldr	r3, [r7, #20]
 80259cc:	2b00      	cmp	r3, #0
 80259ce:	d001      	beq.n	80259d4 <lfs_dir_find_match+0x60>
        return res;
 80259d0:	697b      	ldr	r3, [r7, #20]
 80259d2:	e014      	b.n	80259fe <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 80259d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80259d6:	689c      	ldr	r4, [r3, #8]
 80259d8:	68b8      	ldr	r0, [r7, #8]
 80259da:	f7fe fa89 	bl	8023ef0 <lfs_tag_size>
 80259de:	4603      	mov	r3, r0
 80259e0:	429c      	cmp	r4, r3
 80259e2:	d00b      	beq.n	80259fc <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 80259e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80259e6:	689c      	ldr	r4, [r3, #8]
 80259e8:	68b8      	ldr	r0, [r7, #8]
 80259ea:	f7fe fa81 	bl	8023ef0 <lfs_tag_size>
 80259ee:	4603      	mov	r3, r0
 80259f0:	429c      	cmp	r4, r3
 80259f2:	d201      	bcs.n	80259f8 <lfs_dir_find_match+0x84>
 80259f4:	2301      	movs	r3, #1
 80259f6:	e002      	b.n	80259fe <lfs_dir_find_match+0x8a>
 80259f8:	2302      	movs	r3, #2
 80259fa:	e000      	b.n	80259fe <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 80259fc:	2300      	movs	r3, #0
}
 80259fe:	4618      	mov	r0, r3
 8025a00:	372c      	adds	r7, #44	; 0x2c
 8025a02:	46bd      	mov	sp, r7
 8025a04:	bd90      	pop	{r4, r7, pc}
	...

08025a08 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8025a08:	b590      	push	{r4, r7, lr}
 8025a0a:	b093      	sub	sp, #76	; 0x4c
 8025a0c:	af04      	add	r7, sp, #16
 8025a0e:	60f8      	str	r0, [r7, #12]
 8025a10:	60b9      	str	r1, [r7, #8]
 8025a12:	607a      	str	r2, [r7, #4]
 8025a14:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8025a16:	687b      	ldr	r3, [r7, #4]
 8025a18:	681b      	ldr	r3, [r3, #0]
 8025a1a:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8025a1c:	683b      	ldr	r3, [r7, #0]
 8025a1e:	2b00      	cmp	r3, #0
 8025a20:	d003      	beq.n	8025a2a <lfs_dir_find+0x22>
        *id = 0x3ff;
 8025a22:	683b      	ldr	r3, [r7, #0]
 8025a24:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8025a28:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8025a2a:	4b6e      	ldr	r3, [pc, #440]	; (8025be4 <lfs_dir_find+0x1dc>)
 8025a2c:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 8025a2e:	68fb      	ldr	r3, [r7, #12]
 8025a30:	6a1a      	ldr	r2, [r3, #32]
 8025a32:	68bb      	ldr	r3, [r7, #8]
 8025a34:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8025a36:	68fb      	ldr	r3, [r7, #12]
 8025a38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8025a3a:	68bb      	ldr	r3, [r7, #8]
 8025a3c:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8025a3e:	496a      	ldr	r1, [pc, #424]	; (8025be8 <lfs_dir_find+0x1e0>)
 8025a40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025a42:	f007 feb0 	bl	802d7a6 <strspn>
 8025a46:	4602      	mov	r2, r0
 8025a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025a4a:	4413      	add	r3, r2
 8025a4c:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8025a4e:	4966      	ldr	r1, [pc, #408]	; (8025be8 <lfs_dir_find+0x1e0>)
 8025a50:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025a52:	f007 fe5f 	bl	802d714 <strcspn>
 8025a56:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8025a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025a5a:	2b01      	cmp	r3, #1
 8025a5c:	d105      	bne.n	8025a6a <lfs_dir_find+0x62>
 8025a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025a60:	781a      	ldrb	r2, [r3, #0]
 8025a62:	4b62      	ldr	r3, [pc, #392]	; (8025bec <lfs_dir_find+0x1e4>)
 8025a64:	781b      	ldrb	r3, [r3, #0]
 8025a66:	429a      	cmp	r2, r3
 8025a68:	d00a      	beq.n	8025a80 <lfs_dir_find+0x78>
 8025a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025a6c:	2b02      	cmp	r3, #2
 8025a6e:	d10c      	bne.n	8025a8a <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8025a70:	2202      	movs	r2, #2
 8025a72:	495f      	ldr	r1, [pc, #380]	; (8025bf0 <lfs_dir_find+0x1e8>)
 8025a74:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025a76:	f007 fdff 	bl	802d678 <memcmp>
 8025a7a:	4603      	mov	r3, r0
 8025a7c:	2b00      	cmp	r3, #0
 8025a7e:	d104      	bne.n	8025a8a <lfs_dir_find+0x82>
            name += namelen;
 8025a80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025a84:	4413      	add	r3, r2
 8025a86:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8025a88:	e7d9      	b.n	8025a3e <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8025a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025a8e:	4413      	add	r3, r2
 8025a90:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8025a92:	2301      	movs	r3, #1
 8025a94:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8025a96:	4954      	ldr	r1, [pc, #336]	; (8025be8 <lfs_dir_find+0x1e0>)
 8025a98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8025a9a:	f007 fe84 	bl	802d7a6 <strspn>
 8025a9e:	4602      	mov	r2, r0
 8025aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025aa2:	4413      	add	r3, r2
 8025aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8025aa6:	4950      	ldr	r1, [pc, #320]	; (8025be8 <lfs_dir_find+0x1e0>)
 8025aa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8025aaa:	f007 fe33 	bl	802d714 <strcspn>
 8025aae:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8025ab0:	6a3b      	ldr	r3, [r7, #32]
 8025ab2:	2b00      	cmp	r3, #0
 8025ab4:	d01d      	beq.n	8025af2 <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8025ab6:	6a3b      	ldr	r3, [r7, #32]
 8025ab8:	2b02      	cmp	r3, #2
 8025aba:	d112      	bne.n	8025ae2 <lfs_dir_find+0xda>
 8025abc:	2202      	movs	r2, #2
 8025abe:	494c      	ldr	r1, [pc, #304]	; (8025bf0 <lfs_dir_find+0x1e8>)
 8025ac0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8025ac2:	f007 fdd9 	bl	802d678 <memcmp>
 8025ac6:	4603      	mov	r3, r0
 8025ac8:	2b00      	cmp	r3, #0
 8025aca:	d10a      	bne.n	8025ae2 <lfs_dir_find+0xda>
                depth -= 1;
 8025acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025ace:	3b01      	subs	r3, #1
 8025ad0:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 8025ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025ad4:	2b00      	cmp	r3, #0
 8025ad6:	d107      	bne.n	8025ae8 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8025ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025ada:	6a3b      	ldr	r3, [r7, #32]
 8025adc:	4413      	add	r3, r2
 8025ade:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 8025ae0:	e7ad      	b.n	8025a3e <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 8025ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025ae4:	3301      	adds	r3, #1
 8025ae6:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8025ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025aea:	6a3b      	ldr	r3, [r7, #32]
 8025aec:	4413      	add	r3, r2
 8025aee:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 8025af0:	e7d1      	b.n	8025a96 <lfs_dir_find+0x8e>
                break;
 8025af2:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8025af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025af6:	781b      	ldrb	r3, [r3, #0]
 8025af8:	2b00      	cmp	r3, #0
 8025afa:	d101      	bne.n	8025b00 <lfs_dir_find+0xf8>
            return tag;
 8025afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025afe:	e06c      	b.n	8025bda <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8025b00:	687b      	ldr	r3, [r7, #4]
 8025b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025b04:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8025b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b08:	4618      	mov	r0, r3
 8025b0a:	f7fe f9b7 	bl	8023e7c <lfs_tag_type3>
 8025b0e:	4603      	mov	r3, r0
 8025b10:	2b02      	cmp	r3, #2
 8025b12:	d002      	beq.n	8025b1a <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8025b14:	f06f 0313 	mvn.w	r3, #19
 8025b18:	e05f      	b.n	8025bda <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8025b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b1c:	4618      	mov	r0, r3
 8025b1e:	f7fe f9d7 	bl	8023ed0 <lfs_tag_id>
 8025b22:	4603      	mov	r3, r0
 8025b24:	461a      	mov	r2, r3
 8025b26:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8025b2a:	429a      	cmp	r2, r3
 8025b2c:	d01c      	beq.n	8025b68 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8025b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b30:	4618      	mov	r0, r3
 8025b32:	f7fe f9cd 	bl	8023ed0 <lfs_tag_id>
 8025b36:	4603      	mov	r3, r0
 8025b38:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8025b3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8025b3e:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8025b42:	68ba      	ldr	r2, [r7, #8]
 8025b44:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8025b46:	9200      	str	r2, [sp, #0]
 8025b48:	4a2a      	ldr	r2, [pc, #168]	; (8025bf4 <lfs_dir_find+0x1ec>)
 8025b4a:	68b9      	ldr	r1, [r7, #8]
 8025b4c:	68f8      	ldr	r0, [r7, #12]
 8025b4e:	f7fe fda9 	bl	80246a4 <lfs_dir_get>
 8025b52:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8025b54:	69fb      	ldr	r3, [r7, #28]
 8025b56:	2b00      	cmp	r3, #0
 8025b58:	da01      	bge.n	8025b5e <lfs_dir_find+0x156>
                return res;
 8025b5a:	69fb      	ldr	r3, [r7, #28]
 8025b5c:	e03d      	b.n	8025bda <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 8025b5e:	68bb      	ldr	r3, [r7, #8]
 8025b60:	3318      	adds	r3, #24
 8025b62:	4618      	mov	r0, r3
 8025b64:	f7fe f925 	bl	8023db2 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8025b68:	68bb      	ldr	r3, [r7, #8]
 8025b6a:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8025b6e:	212f      	movs	r1, #47	; 0x2f
 8025b70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025b72:	f007 fdc2 	bl	802d6fa <strchr>
 8025b76:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8025b78:	2b00      	cmp	r3, #0
 8025b7a:	d101      	bne.n	8025b80 <lfs_dir_find+0x178>
 8025b7c:	683b      	ldr	r3, [r7, #0]
 8025b7e:	e000      	b.n	8025b82 <lfs_dir_find+0x17a>
 8025b80:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8025b82:	68fa      	ldr	r2, [r7, #12]
 8025b84:	613a      	str	r2, [r7, #16]
 8025b86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025b88:	617a      	str	r2, [r7, #20]
 8025b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025b8c:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8025b8e:	f107 0210 	add.w	r2, r7, #16
 8025b92:	9203      	str	r2, [sp, #12]
 8025b94:	4a18      	ldr	r2, [pc, #96]	; (8025bf8 <lfs_dir_find+0x1f0>)
 8025b96:	9202      	str	r2, [sp, #8]
 8025b98:	9301      	str	r3, [sp, #4]
 8025b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025b9c:	9300      	str	r3, [sp, #0]
 8025b9e:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8025ba2:	4622      	mov	r2, r4
 8025ba4:	68b9      	ldr	r1, [r7, #8]
 8025ba6:	68f8      	ldr	r0, [r7, #12]
 8025ba8:	f7ff faae 	bl	8025108 <lfs_dir_fetchmatch>
 8025bac:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 8025bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025bb0:	2b00      	cmp	r3, #0
 8025bb2:	da01      	bge.n	8025bb8 <lfs_dir_find+0x1b0>
                return tag;
 8025bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025bb6:	e010      	b.n	8025bda <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8025bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025bba:	2b00      	cmp	r3, #0
 8025bbc:	d004      	beq.n	8025bc8 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 8025bbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025bc2:	4413      	add	r3, r2
 8025bc4:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 8025bc6:	e73a      	b.n	8025a3e <lfs_dir_find+0x36>
            if (!dir->split) {
 8025bc8:	68bb      	ldr	r3, [r7, #8]
 8025bca:	7ddb      	ldrb	r3, [r3, #23]
 8025bcc:	f083 0301 	eor.w	r3, r3, #1
 8025bd0:	b2db      	uxtb	r3, r3
 8025bd2:	2b00      	cmp	r3, #0
 8025bd4:	d0c8      	beq.n	8025b68 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8025bd6:	f06f 0301 	mvn.w	r3, #1
    }
}
 8025bda:	4618      	mov	r0, r3
 8025bdc:	373c      	adds	r7, #60	; 0x3c
 8025bde:	46bd      	mov	sp, r7
 8025be0:	bd90      	pop	{r4, r7, pc}
 8025be2:	bf00      	nop
 8025be4:	002ffc00 	.word	0x002ffc00
 8025be8:	08033478 	.word	0x08033478
 8025bec:	0803347c 	.word	0x0803347c
 8025bf0:	08033480 	.word	0x08033480
 8025bf4:	700ffc00 	.word	0x700ffc00
 8025bf8:	08025975 	.word	0x08025975

08025bfc <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8025bfc:	b590      	push	{r4, r7, lr}
 8025bfe:	b08b      	sub	sp, #44	; 0x2c
 8025c00:	af04      	add	r7, sp, #16
 8025c02:	60f8      	str	r0, [r7, #12]
 8025c04:	60b9      	str	r1, [r7, #8]
 8025c06:	607a      	str	r2, [r7, #4]
 8025c08:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8025c0a:	68fb      	ldr	r3, [r7, #12]
 8025c0c:	f103 0010 	add.w	r0, r3, #16
 8025c10:	68fc      	ldr	r4, [r7, #12]
 8025c12:	68bb      	ldr	r3, [r7, #8]
 8025c14:	681b      	ldr	r3, [r3, #0]
 8025c16:	68ba      	ldr	r2, [r7, #8]
 8025c18:	6852      	ldr	r2, [r2, #4]
 8025c1a:	6839      	ldr	r1, [r7, #0]
 8025c1c:	9103      	str	r1, [sp, #12]
 8025c1e:	6879      	ldr	r1, [r7, #4]
 8025c20:	9102      	str	r1, [sp, #8]
 8025c22:	9201      	str	r2, [sp, #4]
 8025c24:	9300      	str	r3, [sp, #0]
 8025c26:	2300      	movs	r3, #0
 8025c28:	4622      	mov	r2, r4
 8025c2a:	4601      	mov	r1, r0
 8025c2c:	68f8      	ldr	r0, [r7, #12]
 8025c2e:	f7fd ff5b 	bl	8023ae8 <lfs_bd_prog>
 8025c32:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8025c34:	697b      	ldr	r3, [r7, #20]
 8025c36:	2b00      	cmp	r3, #0
 8025c38:	d001      	beq.n	8025c3e <lfs_dir_commitprog+0x42>
        return err;
 8025c3a:	697b      	ldr	r3, [r7, #20]
 8025c3c:	e010      	b.n	8025c60 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8025c3e:	68bb      	ldr	r3, [r7, #8]
 8025c40:	68db      	ldr	r3, [r3, #12]
 8025c42:	683a      	ldr	r2, [r7, #0]
 8025c44:	6879      	ldr	r1, [r7, #4]
 8025c46:	4618      	mov	r0, r3
 8025c48:	f004 fef2 	bl	802aa30 <lfs_crc>
 8025c4c:	4602      	mov	r2, r0
 8025c4e:	68bb      	ldr	r3, [r7, #8]
 8025c50:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8025c52:	68bb      	ldr	r3, [r7, #8]
 8025c54:	685a      	ldr	r2, [r3, #4]
 8025c56:	683b      	ldr	r3, [r7, #0]
 8025c58:	441a      	add	r2, r3
 8025c5a:	68bb      	ldr	r3, [r7, #8]
 8025c5c:	605a      	str	r2, [r3, #4]
    return 0;
 8025c5e:	2300      	movs	r3, #0
}
 8025c60:	4618      	mov	r0, r3
 8025c62:	371c      	adds	r7, #28
 8025c64:	46bd      	mov	sp, r7
 8025c66:	bd90      	pop	{r4, r7, pc}

08025c68 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8025c68:	b590      	push	{r4, r7, lr}
 8025c6a:	b08f      	sub	sp, #60	; 0x3c
 8025c6c:	af04      	add	r7, sp, #16
 8025c6e:	60f8      	str	r0, [r7, #12]
 8025c70:	60b9      	str	r1, [r7, #8]
 8025c72:	607a      	str	r2, [r7, #4]
 8025c74:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8025c76:	6878      	ldr	r0, [r7, #4]
 8025c78:	f7fe f947 	bl	8023f0a <lfs_tag_dsize>
 8025c7c:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 8025c7e:	68bb      	ldr	r3, [r7, #8]
 8025c80:	685a      	ldr	r2, [r3, #4]
 8025c82:	6a3b      	ldr	r3, [r7, #32]
 8025c84:	441a      	add	r2, r3
 8025c86:	68bb      	ldr	r3, [r7, #8]
 8025c88:	695b      	ldr	r3, [r3, #20]
 8025c8a:	429a      	cmp	r2, r3
 8025c8c:	d902      	bls.n	8025c94 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 8025c8e:	f06f 031b 	mvn.w	r3, #27
 8025c92:	e065      	b.n	8025d60 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8025c94:	687b      	ldr	r3, [r7, #4]
 8025c96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8025c9a:	68bb      	ldr	r3, [r7, #8]
 8025c9c:	689b      	ldr	r3, [r3, #8]
 8025c9e:	4053      	eors	r3, r2
 8025ca0:	4618      	mov	r0, r3
 8025ca2:	f7fd fc92 	bl	80235ca <lfs_tobe32>
 8025ca6:	4603      	mov	r3, r0
 8025ca8:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8025caa:	f107 0214 	add.w	r2, r7, #20
 8025cae:	2304      	movs	r3, #4
 8025cb0:	68b9      	ldr	r1, [r7, #8]
 8025cb2:	68f8      	ldr	r0, [r7, #12]
 8025cb4:	f7ff ffa2 	bl	8025bfc <lfs_dir_commitprog>
 8025cb8:	61f8      	str	r0, [r7, #28]
    if (err) {
 8025cba:	69fb      	ldr	r3, [r7, #28]
 8025cbc:	2b00      	cmp	r3, #0
 8025cbe:	d001      	beq.n	8025cc4 <lfs_dir_commitattr+0x5c>
        return err;
 8025cc0:	69fb      	ldr	r3, [r7, #28]
 8025cc2:	e04d      	b.n	8025d60 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8025cc4:	687b      	ldr	r3, [r7, #4]
 8025cc6:	2b00      	cmp	r3, #0
 8025cc8:	db0c      	blt.n	8025ce4 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8025cca:	6a3b      	ldr	r3, [r7, #32]
 8025ccc:	3b04      	subs	r3, #4
 8025cce:	683a      	ldr	r2, [r7, #0]
 8025cd0:	68b9      	ldr	r1, [r7, #8]
 8025cd2:	68f8      	ldr	r0, [r7, #12]
 8025cd4:	f7ff ff92 	bl	8025bfc <lfs_dir_commitprog>
 8025cd8:	61f8      	str	r0, [r7, #28]
        if (err) {
 8025cda:	69fb      	ldr	r3, [r7, #28]
 8025cdc:	2b00      	cmp	r3, #0
 8025cde:	d039      	beq.n	8025d54 <lfs_dir_commitattr+0xec>
            return err;
 8025ce0:	69fb      	ldr	r3, [r7, #28]
 8025ce2:	e03d      	b.n	8025d60 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8025ce4:	683b      	ldr	r3, [r7, #0]
 8025ce6:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8025ce8:	2300      	movs	r3, #0
 8025cea:	627b      	str	r3, [r7, #36]	; 0x24
 8025cec:	e02d      	b.n	8025d4a <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8025cee:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8025cf0:	6a3a      	ldr	r2, [r7, #32]
 8025cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025cf4:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8025cf6:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 8025cf8:	69bb      	ldr	r3, [r7, #24]
 8025cfa:	681b      	ldr	r3, [r3, #0]
 8025cfc:	69ba      	ldr	r2, [r7, #24]
 8025cfe:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8025d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025d02:	440a      	add	r2, r1
 8025d04:	2101      	movs	r1, #1
 8025d06:	9103      	str	r1, [sp, #12]
 8025d08:	f107 0113 	add.w	r1, r7, #19
 8025d0c:	9102      	str	r1, [sp, #8]
 8025d0e:	9201      	str	r2, [sp, #4]
 8025d10:	9300      	str	r3, [sp, #0]
 8025d12:	4623      	mov	r3, r4
 8025d14:	4602      	mov	r2, r0
 8025d16:	2100      	movs	r1, #0
 8025d18:	68f8      	ldr	r0, [r7, #12]
 8025d1a:	f7fd fc9f 	bl	802365c <lfs_bd_read>
 8025d1e:	61f8      	str	r0, [r7, #28]
            if (err) {
 8025d20:	69fb      	ldr	r3, [r7, #28]
 8025d22:	2b00      	cmp	r3, #0
 8025d24:	d001      	beq.n	8025d2a <lfs_dir_commitattr+0xc2>
                return err;
 8025d26:	69fb      	ldr	r3, [r7, #28]
 8025d28:	e01a      	b.n	8025d60 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8025d2a:	f107 0213 	add.w	r2, r7, #19
 8025d2e:	2301      	movs	r3, #1
 8025d30:	68b9      	ldr	r1, [r7, #8]
 8025d32:	68f8      	ldr	r0, [r7, #12]
 8025d34:	f7ff ff62 	bl	8025bfc <lfs_dir_commitprog>
 8025d38:	61f8      	str	r0, [r7, #28]
            if (err) {
 8025d3a:	69fb      	ldr	r3, [r7, #28]
 8025d3c:	2b00      	cmp	r3, #0
 8025d3e:	d001      	beq.n	8025d44 <lfs_dir_commitattr+0xdc>
                return err;
 8025d40:	69fb      	ldr	r3, [r7, #28]
 8025d42:	e00d      	b.n	8025d60 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8025d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025d46:	3301      	adds	r3, #1
 8025d48:	627b      	str	r3, [r7, #36]	; 0x24
 8025d4a:	6a3b      	ldr	r3, [r7, #32]
 8025d4c:	3b04      	subs	r3, #4
 8025d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025d50:	429a      	cmp	r2, r3
 8025d52:	d3cc      	bcc.n	8025cee <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8025d54:	687b      	ldr	r3, [r7, #4]
 8025d56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8025d5a:	68bb      	ldr	r3, [r7, #8]
 8025d5c:	609a      	str	r2, [r3, #8]
    return 0;
 8025d5e:	2300      	movs	r3, #0
}
 8025d60:	4618      	mov	r0, r3
 8025d62:	372c      	adds	r7, #44	; 0x2c
 8025d64:	46bd      	mov	sp, r7
 8025d66:	bd90      	pop	{r4, r7, pc}

08025d68 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8025d68:	b590      	push	{r4, r7, lr}
 8025d6a:	b097      	sub	sp, #92	; 0x5c
 8025d6c:	af04      	add	r7, sp, #16
 8025d6e:	6078      	str	r0, [r7, #4]
 8025d70:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8025d72:	683b      	ldr	r3, [r7, #0]
 8025d74:	685b      	ldr	r3, [r3, #4]
 8025d76:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 8025d7a:	687b      	ldr	r3, [r7, #4]
 8025d7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025d7e:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8025d80:	4619      	mov	r1, r3
 8025d82:	4610      	mov	r0, r2
 8025d84:	f7fd fbb3 	bl	80234ee <lfs_alignup>
 8025d88:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 8025d8a:	2300      	movs	r3, #0
 8025d8c:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 8025d8e:	2300      	movs	r3, #0
 8025d90:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8025d92:	e0a6      	b.n	8025ee2 <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 8025d94:	683b      	ldr	r3, [r7, #0]
 8025d96:	685b      	ldr	r3, [r3, #4]
 8025d98:	3304      	adds	r3, #4
 8025d9a:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 8025d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025d9e:	6a3b      	ldr	r3, [r7, #32]
 8025da0:	1ad3      	subs	r3, r2, r3
 8025da2:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8025da6:	4618      	mov	r0, r3
 8025da8:	f7fd fb7c 	bl	80234a4 <lfs_min>
 8025dac:	4602      	mov	r2, r0
 8025dae:	6a3b      	ldr	r3, [r7, #32]
 8025db0:	4413      	add	r3, r2
 8025db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 8025db4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8025db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025db8:	429a      	cmp	r2, r3
 8025dba:	d206      	bcs.n	8025dca <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 8025dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025dbe:	3b08      	subs	r3, #8
 8025dc0:	4619      	mov	r1, r3
 8025dc2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8025dc4:	f7fd fb6e 	bl	80234a4 <lfs_min>
 8025dc8:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 8025dca:	f04f 33ff 	mov.w	r3, #4294967295
 8025dce:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 8025dd0:	6879      	ldr	r1, [r7, #4]
 8025dd2:	683b      	ldr	r3, [r7, #0]
 8025dd4:	681b      	ldr	r3, [r3, #0]
 8025dd6:	2204      	movs	r2, #4
 8025dd8:	9203      	str	r2, [sp, #12]
 8025dda:	f107 0214 	add.w	r2, r7, #20
 8025dde:	9202      	str	r2, [sp, #8]
 8025de0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8025de2:	9201      	str	r2, [sp, #4]
 8025de4:	9300      	str	r3, [sp, #0]
 8025de6:	2304      	movs	r3, #4
 8025de8:	460a      	mov	r2, r1
 8025dea:	2100      	movs	r1, #0
 8025dec:	6878      	ldr	r0, [r7, #4]
 8025dee:	f7fd fc35 	bl	802365c <lfs_bd_read>
 8025df2:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 8025df4:	69fb      	ldr	r3, [r7, #28]
 8025df6:	2b00      	cmp	r3, #0
 8025df8:	d005      	beq.n	8025e06 <lfs_dir_commitcrc+0x9e>
 8025dfa:	69fb      	ldr	r3, [r7, #28]
 8025dfc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8025e00:	d001      	beq.n	8025e06 <lfs_dir_commitcrc+0x9e>
            return err;
 8025e02:	69fb      	ldr	r3, [r7, #28]
 8025e04:	e0e8      	b.n	8025fd8 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 8025e06:	697b      	ldr	r3, [r7, #20]
 8025e08:	4618      	mov	r0, r3
 8025e0a:	f7fd fbd2 	bl	80235b2 <lfs_frombe32>
 8025e0e:	4603      	mov	r3, r0
 8025e10:	43db      	mvns	r3, r3
 8025e12:	0fdb      	lsrs	r3, r3, #31
 8025e14:	2b00      	cmp	r3, #0
 8025e16:	bf14      	ite	ne
 8025e18:	2301      	movne	r3, #1
 8025e1a:	2300      	moveq	r3, #0
 8025e1c:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 8025e1e:	7efb      	ldrb	r3, [r7, #27]
 8025e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025e24:	051a      	lsls	r2, r3, #20
 8025e26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8025e28:	6a3b      	ldr	r3, [r7, #32]
 8025e2a:	1acb      	subs	r3, r1, r3
 8025e2c:	4313      	orrs	r3, r2
 8025e2e:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 8025e32:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8025e36:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8025e38:	683b      	ldr	r3, [r7, #0]
 8025e3a:	689a      	ldr	r2, [r3, #8]
 8025e3c:	697b      	ldr	r3, [r7, #20]
 8025e3e:	4053      	eors	r3, r2
 8025e40:	4618      	mov	r0, r3
 8025e42:	f7fd fbc2 	bl	80235ca <lfs_tobe32>
 8025e46:	4603      	mov	r3, r0
 8025e48:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 8025e4a:	683b      	ldr	r3, [r7, #0]
 8025e4c:	68db      	ldr	r3, [r3, #12]
 8025e4e:	f107 010c 	add.w	r1, r7, #12
 8025e52:	2204      	movs	r2, #4
 8025e54:	4618      	mov	r0, r3
 8025e56:	f004 fdeb 	bl	802aa30 <lfs_crc>
 8025e5a:	4602      	mov	r2, r0
 8025e5c:	683b      	ldr	r3, [r7, #0]
 8025e5e:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 8025e60:	683b      	ldr	r3, [r7, #0]
 8025e62:	68db      	ldr	r3, [r3, #12]
 8025e64:	4618      	mov	r0, r3
 8025e66:	f7fd fb98 	bl	802359a <lfs_tole32>
 8025e6a:	4603      	mov	r3, r0
 8025e6c:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 8025e6e:	687b      	ldr	r3, [r7, #4]
 8025e70:	f103 0010 	add.w	r0, r3, #16
 8025e74:	687c      	ldr	r4, [r7, #4]
 8025e76:	683b      	ldr	r3, [r7, #0]
 8025e78:	681b      	ldr	r3, [r3, #0]
 8025e7a:	683a      	ldr	r2, [r7, #0]
 8025e7c:	6852      	ldr	r2, [r2, #4]
 8025e7e:	2108      	movs	r1, #8
 8025e80:	9103      	str	r1, [sp, #12]
 8025e82:	f107 010c 	add.w	r1, r7, #12
 8025e86:	9102      	str	r1, [sp, #8]
 8025e88:	9201      	str	r2, [sp, #4]
 8025e8a:	9300      	str	r3, [sp, #0]
 8025e8c:	2300      	movs	r3, #0
 8025e8e:	4622      	mov	r2, r4
 8025e90:	4601      	mov	r1, r0
 8025e92:	6878      	ldr	r0, [r7, #4]
 8025e94:	f7fd fe28 	bl	8023ae8 <lfs_bd_prog>
 8025e98:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 8025e9a:	69fb      	ldr	r3, [r7, #28]
 8025e9c:	2b00      	cmp	r3, #0
 8025e9e:	d001      	beq.n	8025ea4 <lfs_dir_commitcrc+0x13c>
            return err;
 8025ea0:	69fb      	ldr	r3, [r7, #28]
 8025ea2:	e099      	b.n	8025fd8 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8025ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025ea6:	2b00      	cmp	r3, #0
 8025ea8:	d106      	bne.n	8025eb8 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 8025eaa:	683b      	ldr	r3, [r7, #0]
 8025eac:	685b      	ldr	r3, [r3, #4]
 8025eae:	3304      	adds	r3, #4
 8025eb0:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 8025eb2:	683b      	ldr	r3, [r7, #0]
 8025eb4:	68db      	ldr	r3, [r3, #12]
 8025eb6:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 8025eb8:	697b      	ldr	r3, [r7, #20]
 8025eba:	4618      	mov	r0, r3
 8025ebc:	f7fe f818 	bl	8023ef0 <lfs_tag_size>
 8025ec0:	4603      	mov	r3, r0
 8025ec2:	1d1a      	adds	r2, r3, #4
 8025ec4:	683b      	ldr	r3, [r7, #0]
 8025ec6:	685b      	ldr	r3, [r3, #4]
 8025ec8:	441a      	add	r2, r3
 8025eca:	683b      	ldr	r3, [r7, #0]
 8025ecc:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 8025ece:	7efb      	ldrb	r3, [r7, #27]
 8025ed0:	07da      	lsls	r2, r3, #31
 8025ed2:	697b      	ldr	r3, [r7, #20]
 8025ed4:	405a      	eors	r2, r3
 8025ed6:	683b      	ldr	r3, [r7, #0]
 8025ed8:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 8025eda:	683b      	ldr	r3, [r7, #0]
 8025edc:	f04f 32ff 	mov.w	r2, #4294967295
 8025ee0:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 8025ee2:	683b      	ldr	r3, [r7, #0]
 8025ee4:	685b      	ldr	r3, [r3, #4]
 8025ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025ee8:	429a      	cmp	r2, r3
 8025eea:	f63f af53 	bhi.w	8025d94 <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8025eee:	687b      	ldr	r3, [r7, #4]
 8025ef0:	f103 0110 	add.w	r1, r3, #16
 8025ef4:	687a      	ldr	r2, [r7, #4]
 8025ef6:	2300      	movs	r3, #0
 8025ef8:	6878      	ldr	r0, [r7, #4]
 8025efa:	f7fd fdc1 	bl	8023a80 <lfs_bd_sync>
 8025efe:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 8025f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f02:	2b00      	cmp	r3, #0
 8025f04:	d001      	beq.n	8025f0a <lfs_dir_commitcrc+0x1a2>
        return err;
 8025f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f08:	e066      	b.n	8025fd8 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 8025f0a:	683b      	ldr	r3, [r7, #0]
 8025f0c:	691b      	ldr	r3, [r3, #16]
 8025f0e:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 8025f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025f12:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 8025f14:	e05b      	b.n	8025fce <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 8025f16:	f04f 33ff 	mov.w	r3, #4294967295
 8025f1a:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8025f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8025f20:	e030      	b.n	8025f84 <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 8025f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025f26:	429a      	cmp	r2, r3
 8025f28:	d106      	bne.n	8025f38 <lfs_dir_commitcrc+0x1d0>
 8025f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025f2e:	429a      	cmp	r2, r3
 8025f30:	d002      	beq.n	8025f38 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 8025f32:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8025f36:	e04f      	b.n	8025fd8 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8025f38:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 8025f3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025f3e:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8025f40:	1d18      	adds	r0, r3, #4
 8025f42:	683b      	ldr	r3, [r7, #0]
 8025f44:	681b      	ldr	r3, [r3, #0]
 8025f46:	2201      	movs	r2, #1
 8025f48:	9203      	str	r2, [sp, #12]
 8025f4a:	f107 020b 	add.w	r2, r7, #11
 8025f4e:	9202      	str	r2, [sp, #8]
 8025f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025f52:	9201      	str	r2, [sp, #4]
 8025f54:	9300      	str	r3, [sp, #0]
 8025f56:	4603      	mov	r3, r0
 8025f58:	460a      	mov	r2, r1
 8025f5a:	2100      	movs	r1, #0
 8025f5c:	6878      	ldr	r0, [r7, #4]
 8025f5e:	f7fd fb7d 	bl	802365c <lfs_bd_read>
 8025f62:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 8025f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f66:	2b00      	cmp	r3, #0
 8025f68:	d001      	beq.n	8025f6e <lfs_dir_commitcrc+0x206>
                return err;
 8025f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f6c:	e034      	b.n	8025fd8 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 8025f6e:	f107 030b 	add.w	r3, r7, #11
 8025f72:	2201      	movs	r2, #1
 8025f74:	4619      	mov	r1, r3
 8025f76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025f78:	f004 fd5a 	bl	802aa30 <lfs_crc>
 8025f7c:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8025f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025f80:	3301      	adds	r3, #1
 8025f82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8025f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025f86:	3304      	adds	r3, #4
 8025f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025f8a:	429a      	cmp	r2, r3
 8025f8c:	d3c9      	bcc.n	8025f22 <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 8025f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025f90:	2b00      	cmp	r3, #0
 8025f92:	d002      	beq.n	8025f9a <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 8025f94:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8025f98:	e01e      	b.n	8025fd8 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 8025f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025f9e:	1ad3      	subs	r3, r2, r3
 8025fa0:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8025fa4:	4618      	mov	r0, r3
 8025fa6:	f7fd fa7d 	bl	80234a4 <lfs_min>
 8025faa:	4602      	mov	r2, r0
 8025fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025fae:	4413      	add	r3, r2
 8025fb0:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 8025fb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8025fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025fb6:	429a      	cmp	r2, r3
 8025fb8:	d206      	bcs.n	8025fc8 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 8025fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025fbc:	3b08      	subs	r3, #8
 8025fbe:	4619      	mov	r1, r3
 8025fc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8025fc2:	f7fd fa6f 	bl	80234a4 <lfs_min>
 8025fc6:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 8025fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025fca:	3304      	adds	r3, #4
 8025fcc:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 8025fce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8025fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025fd2:	429a      	cmp	r2, r3
 8025fd4:	d39f      	bcc.n	8025f16 <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 8025fd6:	2300      	movs	r3, #0
}
 8025fd8:	4618      	mov	r0, r3
 8025fda:	374c      	adds	r7, #76	; 0x4c
 8025fdc:	46bd      	mov	sp, r7
 8025fde:	bd90      	pop	{r4, r7, pc}

08025fe0 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8025fe0:	b580      	push	{r7, lr}
 8025fe2:	b08a      	sub	sp, #40	; 0x28
 8025fe4:	af04      	add	r7, sp, #16
 8025fe6:	6078      	str	r0, [r7, #4]
 8025fe8:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 8025fea:	2300      	movs	r3, #0
 8025fec:	617b      	str	r3, [r7, #20]
 8025fee:	e016      	b.n	802601e <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8025ff0:	697b      	ldr	r3, [r7, #20]
 8025ff2:	3301      	adds	r3, #1
 8025ff4:	2b00      	cmp	r3, #0
 8025ff6:	f003 0301 	and.w	r3, r3, #1
 8025ffa:	bfb8      	it	lt
 8025ffc:	425b      	neglt	r3, r3
 8025ffe:	009b      	lsls	r3, r3, #2
 8026000:	683a      	ldr	r2, [r7, #0]
 8026002:	4413      	add	r3, r2
 8026004:	4619      	mov	r1, r3
 8026006:	6878      	ldr	r0, [r7, #4]
 8026008:	f7fe f9b2 	bl	8024370 <lfs_alloc>
 802600c:	60f8      	str	r0, [r7, #12]
        if (err) {
 802600e:	68fb      	ldr	r3, [r7, #12]
 8026010:	2b00      	cmp	r3, #0
 8026012:	d001      	beq.n	8026018 <lfs_dir_alloc+0x38>
            return err;
 8026014:	68fb      	ldr	r3, [r7, #12]
 8026016:	e058      	b.n	80260ca <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8026018:	697b      	ldr	r3, [r7, #20]
 802601a:	3301      	adds	r3, #1
 802601c:	617b      	str	r3, [r7, #20]
 802601e:	697b      	ldr	r3, [r7, #20]
 8026020:	2b01      	cmp	r3, #1
 8026022:	dde5      	ble.n	8025ff0 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8026024:	683b      	ldr	r3, [r7, #0]
 8026026:	2200      	movs	r2, #0
 8026028:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 802602a:	6879      	ldr	r1, [r7, #4]
 802602c:	683b      	ldr	r3, [r7, #0]
 802602e:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8026030:	683a      	ldr	r2, [r7, #0]
 8026032:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8026034:	2004      	movs	r0, #4
 8026036:	9003      	str	r0, [sp, #12]
 8026038:	9202      	str	r2, [sp, #8]
 802603a:	2200      	movs	r2, #0
 802603c:	9201      	str	r2, [sp, #4]
 802603e:	9300      	str	r3, [sp, #0]
 8026040:	2304      	movs	r3, #4
 8026042:	460a      	mov	r2, r1
 8026044:	2100      	movs	r1, #0
 8026046:	6878      	ldr	r0, [r7, #4]
 8026048:	f7fd fb08 	bl	802365c <lfs_bd_read>
 802604c:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 802604e:	683b      	ldr	r3, [r7, #0]
 8026050:	689b      	ldr	r3, [r3, #8]
 8026052:	4618      	mov	r0, r3
 8026054:	f7fd fa96 	bl	8023584 <lfs_fromle32>
 8026058:	4602      	mov	r2, r0
 802605a:	683b      	ldr	r3, [r7, #0]
 802605c:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 802605e:	693b      	ldr	r3, [r7, #16]
 8026060:	2b00      	cmp	r3, #0
 8026062:	d005      	beq.n	8026070 <lfs_dir_alloc+0x90>
 8026064:	693b      	ldr	r3, [r7, #16]
 8026066:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802606a:	d001      	beq.n	8026070 <lfs_dir_alloc+0x90>
        return err;
 802606c:	693b      	ldr	r3, [r7, #16]
 802606e:	e02c      	b.n	80260ca <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8026070:	687b      	ldr	r3, [r7, #4]
 8026072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026076:	2b00      	cmp	r3, #0
 8026078:	dd0e      	ble.n	8026098 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 802607a:	683b      	ldr	r3, [r7, #0]
 802607c:	689a      	ldr	r2, [r3, #8]
 802607e:	687b      	ldr	r3, [r7, #4]
 8026080:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026084:	3301      	adds	r3, #1
 8026086:	f043 0301 	orr.w	r3, r3, #1
 802608a:	4619      	mov	r1, r3
 802608c:	4610      	mov	r0, r2
 802608e:	f7fd fa2e 	bl	80234ee <lfs_alignup>
 8026092:	4602      	mov	r2, r0
 8026094:	683b      	ldr	r3, [r7, #0]
 8026096:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8026098:	683b      	ldr	r3, [r7, #0]
 802609a:	2204      	movs	r2, #4
 802609c:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 802609e:	683b      	ldr	r3, [r7, #0]
 80260a0:	f04f 32ff 	mov.w	r2, #4294967295
 80260a4:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 80260a6:	683b      	ldr	r3, [r7, #0]
 80260a8:	2200      	movs	r2, #0
 80260aa:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 80260ac:	683b      	ldr	r3, [r7, #0]
 80260ae:	f04f 32ff 	mov.w	r2, #4294967295
 80260b2:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 80260b4:	683b      	ldr	r3, [r7, #0]
 80260b6:	f04f 32ff 	mov.w	r2, #4294967295
 80260ba:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 80260bc:	683b      	ldr	r3, [r7, #0]
 80260be:	2200      	movs	r2, #0
 80260c0:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 80260c2:	683b      	ldr	r3, [r7, #0]
 80260c4:	2200      	movs	r2, #0
 80260c6:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 80260c8:	2300      	movs	r3, #0
}
 80260ca:	4618      	mov	r0, r3
 80260cc:	3718      	adds	r7, #24
 80260ce:	46bd      	mov	sp, r7
 80260d0:	bd80      	pop	{r7, pc}
	...

080260d4 <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 80260d4:	b580      	push	{r7, lr}
 80260d6:	b08a      	sub	sp, #40	; 0x28
 80260d8:	af00      	add	r7, sp, #0
 80260da:	60f8      	str	r0, [r7, #12]
 80260dc:	60b9      	str	r1, [r7, #8]
 80260de:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 80260e0:	68fb      	ldr	r3, [r7, #12]
 80260e2:	3348      	adds	r3, #72	; 0x48
 80260e4:	461a      	mov	r2, r3
 80260e6:	6879      	ldr	r1, [r7, #4]
 80260e8:	68f8      	ldr	r0, [r7, #12]
 80260ea:	f7ff fb97 	bl	802581c <lfs_dir_getgstate>
 80260ee:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 80260f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80260f2:	2b00      	cmp	r3, #0
 80260f4:	d001      	beq.n	80260fa <lfs_dir_drop+0x26>
        return err;
 80260f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80260f8:	e022      	b.n	8026140 <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 80260fa:	687b      	ldr	r3, [r7, #4]
 80260fc:	3318      	adds	r3, #24
 80260fe:	4618      	mov	r0, r3
 8026100:	f7fd fe71 	bl	8023de6 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 8026104:	687b      	ldr	r3, [r7, #4]
 8026106:	7ddb      	ldrb	r3, [r3, #23]
 8026108:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 802610c:	051a      	lsls	r2, r3, #20
 802610e:	4b0e      	ldr	r3, [pc, #56]	; (8026148 <lfs_dir_drop+0x74>)
 8026110:	4313      	orrs	r3, r2
 8026112:	61fb      	str	r3, [r7, #28]
 8026114:	687b      	ldr	r3, [r7, #4]
 8026116:	3318      	adds	r3, #24
 8026118:	623b      	str	r3, [r7, #32]
 802611a:	f107 021c 	add.w	r2, r7, #28
 802611e:	2301      	movs	r3, #1
 8026120:	68b9      	ldr	r1, [r7, #8]
 8026122:	68f8      	ldr	r0, [r7, #12]
 8026124:	f001 f978 	bl	8027418 <lfs_dir_commit>
 8026128:	6278      	str	r0, [r7, #36]	; 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 802612a:	687b      	ldr	r3, [r7, #4]
 802612c:	3318      	adds	r3, #24
 802612e:	4618      	mov	r0, r3
 8026130:	f7fd fe3f 	bl	8023db2 <lfs_pair_fromle32>
    if (err) {
 8026134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026136:	2b00      	cmp	r3, #0
 8026138:	d001      	beq.n	802613e <lfs_dir_drop+0x6a>
        return err;
 802613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802613c:	e000      	b.n	8026140 <lfs_dir_drop+0x6c>
    }

    return 0;
 802613e:	2300      	movs	r3, #0
}
 8026140:	4618      	mov	r0, r3
 8026142:	3728      	adds	r7, #40	; 0x28
 8026144:	46bd      	mov	sp, r7
 8026146:	bd80      	pop	{r7, pc}
 8026148:	000ffc08 	.word	0x000ffc08

0802614c <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 802614c:	b580      	push	{r7, lr}
 802614e:	b092      	sub	sp, #72	; 0x48
 8026150:	af04      	add	r7, sp, #16
 8026152:	60f8      	str	r0, [r7, #12]
 8026154:	60b9      	str	r1, [r7, #8]
 8026156:	607a      	str	r2, [r7, #4]
 8026158:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 802615a:	f107 0310 	add.w	r3, r7, #16
 802615e:	4619      	mov	r1, r3
 8026160:	68f8      	ldr	r0, [r7, #12]
 8026162:	f7ff ff3d 	bl	8025fe0 <lfs_dir_alloc>
 8026166:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 8026168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802616a:	2b00      	cmp	r3, #0
 802616c:	d001      	beq.n	8026172 <lfs_dir_split+0x26>
        return err;
 802616e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026170:	e03c      	b.n	80261ec <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8026172:	68bb      	ldr	r3, [r7, #8]
 8026174:	7ddb      	ldrb	r3, [r3, #23]
 8026176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 802617a:	68bb      	ldr	r3, [r7, #8]
 802617c:	699b      	ldr	r3, [r3, #24]
 802617e:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 8026180:	68bb      	ldr	r3, [r7, #8]
 8026182:	69db      	ldr	r3, [r3, #28]
 8026184:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8026186:	f107 0110 	add.w	r1, r7, #16
 802618a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 802618e:	9302      	str	r3, [sp, #8]
 8026190:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026194:	9301      	str	r3, [sp, #4]
 8026196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026198:	9300      	str	r3, [sp, #0]
 802619a:	683b      	ldr	r3, [r7, #0]
 802619c:	687a      	ldr	r2, [r7, #4]
 802619e:	68f8      	ldr	r0, [r7, #12]
 80261a0:	f000 f87a 	bl	8026298 <lfs_dir_compact>
 80261a4:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 80261a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80261a8:	2b00      	cmp	r3, #0
 80261aa:	da01      	bge.n	80261b0 <lfs_dir_split+0x64>
        return res;
 80261ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80261ae:	e01d      	b.n	80261ec <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 80261b0:	693a      	ldr	r2, [r7, #16]
 80261b2:	68bb      	ldr	r3, [r7, #8]
 80261b4:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 80261b6:	697a      	ldr	r2, [r7, #20]
 80261b8:	68bb      	ldr	r3, [r7, #8]
 80261ba:	61da      	str	r2, [r3, #28]
    dir->split = true;
 80261bc:	68bb      	ldr	r3, [r7, #8]
 80261be:	2201      	movs	r2, #1
 80261c0:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 80261c2:	68ba      	ldr	r2, [r7, #8]
 80261c4:	68fb      	ldr	r3, [r7, #12]
 80261c6:	3320      	adds	r3, #32
 80261c8:	4619      	mov	r1, r3
 80261ca:	4610      	mov	r0, r2
 80261cc:	f7fd fd9a 	bl	8023d04 <lfs_pair_cmp>
 80261d0:	4603      	mov	r3, r0
 80261d2:	2b00      	cmp	r3, #0
 80261d4:	d109      	bne.n	80261ea <lfs_dir_split+0x9e>
 80261d6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80261da:	2b00      	cmp	r3, #0
 80261dc:	d105      	bne.n	80261ea <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 80261de:	693a      	ldr	r2, [r7, #16]
 80261e0:	68fb      	ldr	r3, [r7, #12]
 80261e2:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 80261e4:	697a      	ldr	r2, [r7, #20]
 80261e6:	68fb      	ldr	r3, [r7, #12]
 80261e8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 80261ea:	2300      	movs	r3, #0
}
 80261ec:	4618      	mov	r0, r3
 80261ee:	3738      	adds	r7, #56	; 0x38
 80261f0:	46bd      	mov	sp, r7
 80261f2:	bd80      	pop	{r7, pc}

080261f4 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 80261f4:	b580      	push	{r7, lr}
 80261f6:	b086      	sub	sp, #24
 80261f8:	af00      	add	r7, sp, #0
 80261fa:	60f8      	str	r0, [r7, #12]
 80261fc:	60b9      	str	r1, [r7, #8]
 80261fe:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8026200:	68fb      	ldr	r3, [r7, #12]
 8026202:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8026204:	68b8      	ldr	r0, [r7, #8]
 8026206:	f7fd fe80 	bl	8023f0a <lfs_tag_dsize>
 802620a:	4602      	mov	r2, r0
 802620c:	697b      	ldr	r3, [r7, #20]
 802620e:	681b      	ldr	r3, [r3, #0]
 8026210:	441a      	add	r2, r3
 8026212:	697b      	ldr	r3, [r7, #20]
 8026214:	601a      	str	r2, [r3, #0]
    return 0;
 8026216:	2300      	movs	r3, #0
}
 8026218:	4618      	mov	r0, r3
 802621a:	3718      	adds	r7, #24
 802621c:	46bd      	mov	sp, r7
 802621e:	bd80      	pop	{r7, pc}

08026220 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8026220:	b580      	push	{r7, lr}
 8026222:	b086      	sub	sp, #24
 8026224:	af00      	add	r7, sp, #0
 8026226:	60f8      	str	r0, [r7, #12]
 8026228:	60b9      	str	r1, [r7, #8]
 802622a:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 802622c:	68fb      	ldr	r3, [r7, #12]
 802622e:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8026230:	697b      	ldr	r3, [r7, #20]
 8026232:	6818      	ldr	r0, [r3, #0]
 8026234:	697b      	ldr	r3, [r7, #20]
 8026236:	6859      	ldr	r1, [r3, #4]
 8026238:	687b      	ldr	r3, [r7, #4]
 802623a:	68ba      	ldr	r2, [r7, #8]
 802623c:	f7ff fd14 	bl	8025c68 <lfs_dir_commitattr>
 8026240:	4603      	mov	r3, r0
}
 8026242:	4618      	mov	r0, r3
 8026244:	3718      	adds	r7, #24
 8026246:	46bd      	mov	sp, r7
 8026248:	bd80      	pop	{r7, pc}

0802624a <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 802624a:	b480      	push	{r7}
 802624c:	b083      	sub	sp, #12
 802624e:	af00      	add	r7, sp, #0
 8026250:	6078      	str	r0, [r7, #4]
 8026252:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8026254:	687b      	ldr	r3, [r7, #4]
 8026256:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 802625a:	2b00      	cmp	r3, #0
 802625c:	dd11      	ble.n	8026282 <lfs_dir_needsrelocation+0x38>
 802625e:	683b      	ldr	r3, [r7, #0]
 8026260:	689b      	ldr	r3, [r3, #8]
 8026262:	3301      	adds	r3, #1
 8026264:	687a      	ldr	r2, [r7, #4]
 8026266:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8026268:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802626a:	3201      	adds	r2, #1
 802626c:	f042 0201 	orr.w	r2, r2, #1
 8026270:	fbb3 f1f2 	udiv	r1, r3, r2
 8026274:	fb01 f202 	mul.w	r2, r1, r2
 8026278:	1a9b      	subs	r3, r3, r2
 802627a:	2b00      	cmp	r3, #0
 802627c:	d101      	bne.n	8026282 <lfs_dir_needsrelocation+0x38>
 802627e:	2301      	movs	r3, #1
 8026280:	e000      	b.n	8026284 <lfs_dir_needsrelocation+0x3a>
 8026282:	2300      	movs	r3, #0
 8026284:	f003 0301 	and.w	r3, r3, #1
 8026288:	b2db      	uxtb	r3, r3
}
 802628a:	4618      	mov	r0, r3
 802628c:	370c      	adds	r7, #12
 802628e:	46bd      	mov	sp, r7
 8026290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026294:	4770      	bx	lr
	...

08026298 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8026298:	b580      	push	{r7, lr}
 802629a:	b0a4      	sub	sp, #144	; 0x90
 802629c:	af0a      	add	r7, sp, #40	; 0x28
 802629e:	60f8      	str	r0, [r7, #12]
 80262a0:	60b9      	str	r1, [r7, #8]
 80262a2:	607a      	str	r2, [r7, #4]
 80262a4:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 80262a6:	2300      	movs	r3, #0
 80262a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 80262ac:	68b9      	ldr	r1, [r7, #8]
 80262ae:	68f8      	ldr	r0, [r7, #12]
 80262b0:	f7ff ffcb 	bl	802624a <lfs_dir_needsrelocation>
 80262b4:	4603      	mov	r3, r0
 80262b6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 80262ba:	68bb      	ldr	r3, [r7, #8]
 80262bc:	689b      	ldr	r3, [r3, #8]
 80262be:	1c5a      	adds	r2, r3, #1
 80262c0:	68bb      	ldr	r3, [r7, #8]
 80262c2:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 80262c4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80262c8:	2b00      	cmp	r3, #0
 80262ca:	d00e      	beq.n	80262ea <lfs_dir_compact+0x52>
 80262cc:	68bb      	ldr	r3, [r7, #8]
 80262ce:	2200      	movs	r2, #0
 80262d0:	657a      	str	r2, [r7, #84]	; 0x54
 80262d2:	2201      	movs	r2, #1
 80262d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80262d6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80262da:	4611      	mov	r1, r2
 80262dc:	4618      	mov	r0, r3
 80262de:	f7fd fd11 	bl	8023d04 <lfs_pair_cmp>
 80262e2:	4603      	mov	r3, r0
 80262e4:	2b00      	cmp	r3, #0
 80262e6:	f040 8155 	bne.w	8026594 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 80262ea:	68bb      	ldr	r3, [r7, #8]
 80262ec:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 80262ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80262f0:	2300      	movs	r3, #0
 80262f2:	643b      	str	r3, [r7, #64]	; 0x40
 80262f4:	f04f 33ff 	mov.w	r3, #4294967295
 80262f8:	647b      	str	r3, [r7, #68]	; 0x44
 80262fa:	f04f 33ff 	mov.w	r3, #4294967295
 80262fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8026300:	2300      	movs	r3, #0
 8026302:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8026304:	68fb      	ldr	r3, [r7, #12]
 8026306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 802630a:	2b00      	cmp	r3, #0
 802630c:	d004      	beq.n	8026318 <lfs_dir_compact+0x80>
 802630e:	68fb      	ldr	r3, [r7, #12]
 8026310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8026314:	3b08      	subs	r3, #8
 8026316:	e003      	b.n	8026320 <lfs_dir_compact+0x88>
 8026318:	68fb      	ldr	r3, [r7, #12]
 802631a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802631c:	69db      	ldr	r3, [r3, #28]
 802631e:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8026320:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8026322:	68bb      	ldr	r3, [r7, #8]
 8026324:	685b      	ldr	r3, [r3, #4]
 8026326:	4619      	mov	r1, r3
 8026328:	68f8      	ldr	r0, [r7, #12]
 802632a:	f7fd fc89 	bl	8023c40 <lfs_bd_erase>
 802632e:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8026330:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026332:	2b00      	cmp	r3, #0
 8026334:	d006      	beq.n	8026344 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8026336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026338:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802633c:	f000 812c 	beq.w	8026598 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8026340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026342:	e188      	b.n	8026656 <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8026344:	68bb      	ldr	r3, [r7, #8]
 8026346:	689b      	ldr	r3, [r3, #8]
 8026348:	4618      	mov	r0, r3
 802634a:	f7fd f926 	bl	802359a <lfs_tole32>
 802634e:	4602      	mov	r2, r0
 8026350:	68bb      	ldr	r3, [r7, #8]
 8026352:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8026354:	68bb      	ldr	r3, [r7, #8]
 8026356:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 802635a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 802635e:	2304      	movs	r3, #4
 8026360:	68f8      	ldr	r0, [r7, #12]
 8026362:	f7ff fc4b 	bl	8025bfc <lfs_dir_commitprog>
 8026366:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8026368:	68bb      	ldr	r3, [r7, #8]
 802636a:	689b      	ldr	r3, [r3, #8]
 802636c:	4618      	mov	r0, r3
 802636e:	f7fd f909 	bl	8023584 <lfs_fromle32>
 8026372:	4602      	mov	r2, r0
 8026374:	68bb      	ldr	r3, [r7, #8]
 8026376:	609a      	str	r2, [r3, #8]
            if (err) {
 8026378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802637a:	2b00      	cmp	r3, #0
 802637c:	d006      	beq.n	802638c <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 802637e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026380:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026384:	f000 810a 	beq.w	802659c <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8026388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802638a:	e164      	b.n	8026656 <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 802638c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8026390:	425b      	negs	r3, r3
 8026392:	b29b      	uxth	r3, r3
 8026394:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8026396:	68fa      	ldr	r2, [r7, #12]
 8026398:	637a      	str	r2, [r7, #52]	; 0x34
 802639a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 802639e:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 80263a0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80263a4:	9208      	str	r2, [sp, #32]
 80263a6:	4aae      	ldr	r2, [pc, #696]	; (8026660 <lfs_dir_compact+0x3c8>)
 80263a8:	9207      	str	r2, [sp, #28]
 80263aa:	9306      	str	r3, [sp, #24]
 80263ac:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80263b0:	9305      	str	r3, [sp, #20]
 80263b2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80263b6:	9304      	str	r3, [sp, #16]
 80263b8:	2300      	movs	r3, #0
 80263ba:	9303      	str	r3, [sp, #12]
 80263bc:	4ba9      	ldr	r3, [pc, #676]	; (8026664 <lfs_dir_compact+0x3cc>)
 80263be:	9302      	str	r3, [sp, #8]
 80263c0:	683b      	ldr	r3, [r7, #0]
 80263c2:	9301      	str	r3, [sp, #4]
 80263c4:	687b      	ldr	r3, [r7, #4]
 80263c6:	9300      	str	r3, [sp, #0]
 80263c8:	f04f 33ff 	mov.w	r3, #4294967295
 80263cc:	2200      	movs	r2, #0
 80263ce:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80263d0:	68f8      	ldr	r0, [r7, #12]
 80263d2:	f7fe fab9 	bl	8024948 <lfs_dir_traverse>
 80263d6:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 80263d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80263da:	2b00      	cmp	r3, #0
 80263dc:	d006      	beq.n	80263ec <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 80263de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80263e0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80263e4:	f000 80dc 	beq.w	80265a0 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 80263e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80263ea:	e134      	b.n	8026656 <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 80263ec:	68bb      	ldr	r3, [r7, #8]
 80263ee:	3318      	adds	r3, #24
 80263f0:	4618      	mov	r0, r3
 80263f2:	f7fd fc6c 	bl	8023cce <lfs_pair_isnull>
 80263f6:	4603      	mov	r3, r0
 80263f8:	f083 0301 	eor.w	r3, r3, #1
 80263fc:	b2db      	uxtb	r3, r3
 80263fe:	2b00      	cmp	r3, #0
 8026400:	d022      	beq.n	8026448 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8026402:	68bb      	ldr	r3, [r7, #8]
 8026404:	3318      	adds	r3, #24
 8026406:	4618      	mov	r0, r3
 8026408:	f7fd fced 	bl	8023de6 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 802640c:	68bb      	ldr	r3, [r7, #8]
 802640e:	7ddb      	ldrb	r3, [r3, #23]
 8026410:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8026414:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8026416:	4a94      	ldr	r2, [pc, #592]	; (8026668 <lfs_dir_compact+0x3d0>)
 8026418:	431a      	orrs	r2, r3
                        dir->tail);
 802641a:	68bb      	ldr	r3, [r7, #8]
 802641c:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 802641e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8026422:	68f8      	ldr	r0, [r7, #12]
 8026424:	f7ff fc20 	bl	8025c68 <lfs_dir_commitattr>
 8026428:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 802642a:	68bb      	ldr	r3, [r7, #8]
 802642c:	3318      	adds	r3, #24
 802642e:	4618      	mov	r0, r3
 8026430:	f7fd fcbf 	bl	8023db2 <lfs_pair_fromle32>
                if (err) {
 8026434:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026436:	2b00      	cmp	r3, #0
 8026438:	d006      	beq.n	8026448 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 802643a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802643c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026440:	f000 80b0 	beq.w	80265a4 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8026444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026446:	e106      	b.n	8026656 <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8026448:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802644c:	2200      	movs	r2, #0
 802644e:	601a      	str	r2, [r3, #0]
 8026450:	605a      	str	r2, [r3, #4]
 8026452:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8026454:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8026458:	f083 0301 	eor.w	r3, r3, #1
 802645c:	b2db      	uxtb	r3, r3
 802645e:	2b00      	cmp	r3, #0
 8026460:	d011      	beq.n	8026486 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8026462:	68fb      	ldr	r3, [r7, #12]
 8026464:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8026468:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802646c:	4611      	mov	r1, r2
 802646e:	4618      	mov	r0, r3
 8026470:	f7fd fd5f 	bl	8023f32 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8026474:	68fb      	ldr	r3, [r7, #12]
 8026476:	f103 0230 	add.w	r2, r3, #48	; 0x30
 802647a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802647e:	4611      	mov	r1, r2
 8026480:	4618      	mov	r0, r3
 8026482:	f7fd fd56 	bl	8023f32 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8026486:	68fb      	ldr	r3, [r7, #12]
 8026488:	f103 0248 	add.w	r2, r3, #72	; 0x48
 802648c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8026490:	4611      	mov	r1, r2
 8026492:	4618      	mov	r0, r3
 8026494:	f7fd fd4d 	bl	8023f32 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8026498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802649a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 802649e:	f023 0303 	bic.w	r3, r3, #3
 80264a2:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 80264a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80264a8:	461a      	mov	r2, r3
 80264aa:	68b9      	ldr	r1, [r7, #8]
 80264ac:	68f8      	ldr	r0, [r7, #12]
 80264ae:	f7ff f9b5 	bl	802581c <lfs_dir_getgstate>
 80264b2:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 80264b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80264b6:	2b00      	cmp	r3, #0
 80264b8:	d001      	beq.n	80264be <lfs_dir_compact+0x226>
                return err;
 80264ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80264bc:	e0cb      	b.n	8026656 <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 80264be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80264c2:	4618      	mov	r0, r3
 80264c4:	f7fd fd5a 	bl	8023f7c <lfs_gstate_iszero>
 80264c8:	4603      	mov	r3, r0
 80264ca:	f083 0301 	eor.w	r3, r3, #1
 80264ce:	b2db      	uxtb	r3, r3
 80264d0:	2b00      	cmp	r3, #0
 80264d2:	d016      	beq.n	8026502 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 80264d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80264d8:	4618      	mov	r0, r3
 80264da:	f7fd fde1 	bl	80240a0 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 80264de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80264e2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80264e6:	4a61      	ldr	r2, [pc, #388]	; (802666c <lfs_dir_compact+0x3d4>)
 80264e8:	68f8      	ldr	r0, [r7, #12]
 80264ea:	f7ff fbbd 	bl	8025c68 <lfs_dir_commitattr>
 80264ee:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 80264f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80264f2:	2b00      	cmp	r3, #0
 80264f4:	d005      	beq.n	8026502 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 80264f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80264f8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80264fc:	d054      	beq.n	80265a8 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 80264fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026500:	e0a9      	b.n	8026656 <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8026502:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8026506:	4619      	mov	r1, r3
 8026508:	68f8      	ldr	r0, [r7, #12]
 802650a:	f7ff fc2d 	bl	8025d68 <lfs_dir_commitcrc>
 802650e:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8026510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026512:	2b00      	cmp	r3, #0
 8026514:	d005      	beq.n	8026522 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8026516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026518:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802651c:	d046      	beq.n	80265ac <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 802651e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026520:	e099      	b.n	8026656 <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8026522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026524:	68fa      	ldr	r2, [r7, #12]
 8026526:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8026528:	6992      	ldr	r2, [r2, #24]
 802652a:	fbb3 f1f2 	udiv	r1, r3, r2
 802652e:	fb01 f202 	mul.w	r2, r1, r2
 8026532:	1a9b      	subs	r3, r3, r2
 8026534:	2b00      	cmp	r3, #0
 8026536:	d006      	beq.n	8026546 <lfs_dir_compact+0x2ae>
 8026538:	4b4d      	ldr	r3, [pc, #308]	; (8026670 <lfs_dir_compact+0x3d8>)
 802653a:	4a4e      	ldr	r2, [pc, #312]	; (8026674 <lfs_dir_compact+0x3dc>)
 802653c:	f44f 61e9 	mov.w	r1, #1864	; 0x748
 8026540:	484d      	ldr	r0, [pc, #308]	; (8026678 <lfs_dir_compact+0x3e0>)
 8026542:	f005 fef3 	bl	802c32c <__assert_func>
            lfs_pair_swap(dir->pair);
 8026546:	68bb      	ldr	r3, [r7, #8]
 8026548:	4618      	mov	r0, r3
 802654a:	f7fd fbab 	bl	8023ca4 <lfs_pair_swap>
            dir->count = end - begin;
 802654e:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8026552:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8026556:	1ad3      	subs	r3, r2, r3
 8026558:	b29a      	uxth	r2, r3
 802655a:	68bb      	ldr	r3, [r7, #8]
 802655c:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 802655e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026560:	68bb      	ldr	r3, [r7, #8]
 8026562:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8026564:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8026566:	68bb      	ldr	r3, [r7, #8]
 8026568:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 802656a:	68fb      	ldr	r3, [r7, #12]
 802656c:	3348      	adds	r3, #72	; 0x48
 802656e:	2200      	movs	r2, #0
 8026570:	601a      	str	r2, [r3, #0]
 8026572:	605a      	str	r2, [r3, #4]
 8026574:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8026576:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 802657a:	f083 0301 	eor.w	r3, r3, #1
 802657e:	b2db      	uxtb	r3, r3
 8026580:	2b00      	cmp	r3, #0
 8026582:	d065      	beq.n	8026650 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 8026584:	68fb      	ldr	r3, [r7, #12]
 8026586:	68fa      	ldr	r2, [r7, #12]
 8026588:	333c      	adds	r3, #60	; 0x3c
 802658a:	3230      	adds	r2, #48	; 0x30
 802658c:	ca07      	ldmia	r2, {r0, r1, r2}
 802658e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8026592:	e05d      	b.n	8026650 <lfs_dir_compact+0x3b8>
        goto relocate;
 8026594:	bf00      	nop
 8026596:	e00a      	b.n	80265ae <lfs_dir_compact+0x316>
                    goto relocate;
 8026598:	bf00      	nop
 802659a:	e008      	b.n	80265ae <lfs_dir_compact+0x316>
                    goto relocate;
 802659c:	bf00      	nop
 802659e:	e006      	b.n	80265ae <lfs_dir_compact+0x316>
                    goto relocate;
 80265a0:	bf00      	nop
 80265a2:	e004      	b.n	80265ae <lfs_dir_compact+0x316>
                        goto relocate;
 80265a4:	bf00      	nop
 80265a6:	e002      	b.n	80265ae <lfs_dir_compact+0x316>
                        goto relocate;
 80265a8:	bf00      	nop
 80265aa:	e000      	b.n	80265ae <lfs_dir_compact+0x316>
                    goto relocate;
 80265ac:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 80265ae:	2301      	movs	r3, #1
 80265b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 80265b4:	68fb      	ldr	r3, [r7, #12]
 80265b6:	3310      	adds	r3, #16
 80265b8:	4619      	mov	r1, r3
 80265ba:	68f8      	ldr	r0, [r7, #12]
 80265bc:	f7fd f828 	bl	8023610 <lfs_cache_drop>
        if (!tired) {
 80265c0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80265c4:	f083 0301 	eor.w	r3, r3, #1
 80265c8:	b2db      	uxtb	r3, r3
 80265ca:	2b00      	cmp	r3, #0
 80265cc:	d009      	beq.n	80265e2 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 80265ce:	68bb      	ldr	r3, [r7, #8]
 80265d0:	685b      	ldr	r3, [r3, #4]
 80265d2:	4a2a      	ldr	r2, [pc, #168]	; (802667c <lfs_dir_compact+0x3e4>)
 80265d4:	9200      	str	r2, [sp, #0]
 80265d6:	f240 725a 	movw	r2, #1882	; 0x75a
 80265da:	4927      	ldr	r1, [pc, #156]	; (8026678 <lfs_dir_compact+0x3e0>)
 80265dc:	4828      	ldr	r0, [pc, #160]	; (8026680 <lfs_dir_compact+0x3e8>)
 80265de:	f006 fedf 	bl	802d3a0 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 80265e2:	68bb      	ldr	r3, [r7, #8]
 80265e4:	2200      	movs	r2, #0
 80265e6:	617a      	str	r2, [r7, #20]
 80265e8:	2201      	movs	r2, #1
 80265ea:	61ba      	str	r2, [r7, #24]
 80265ec:	f107 0214 	add.w	r2, r7, #20
 80265f0:	4611      	mov	r1, r2
 80265f2:	4618      	mov	r0, r3
 80265f4:	f7fd fb86 	bl	8023d04 <lfs_pair_cmp>
 80265f8:	4603      	mov	r3, r0
 80265fa:	2b00      	cmp	r3, #0
 80265fc:	d10c      	bne.n	8026618 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 80265fe:	68bb      	ldr	r3, [r7, #8]
 8026600:	685b      	ldr	r3, [r3, #4]
 8026602:	4a1e      	ldr	r2, [pc, #120]	; (802667c <lfs_dir_compact+0x3e4>)
 8026604:	9200      	str	r2, [sp, #0]
 8026606:	f240 725f 	movw	r2, #1887	; 0x75f
 802660a:	491b      	ldr	r1, [pc, #108]	; (8026678 <lfs_dir_compact+0x3e0>)
 802660c:	481d      	ldr	r0, [pc, #116]	; (8026684 <lfs_dir_compact+0x3ec>)
 802660e:	f006 fec7 	bl	802d3a0 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8026612:	f06f 031b 	mvn.w	r3, #27
 8026616:	e01e      	b.n	8026656 <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8026618:	68bb      	ldr	r3, [r7, #8]
 802661a:	3304      	adds	r3, #4
 802661c:	4619      	mov	r1, r3
 802661e:	68f8      	ldr	r0, [r7, #12]
 8026620:	f7fd fea6 	bl	8024370 <lfs_alloc>
 8026624:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8026626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026628:	2b00      	cmp	r3, #0
 802662a:	d00c      	beq.n	8026646 <lfs_dir_compact+0x3ae>
 802662c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802662e:	f113 0f1c 	cmn.w	r3, #28
 8026632:	d106      	bne.n	8026642 <lfs_dir_compact+0x3aa>
 8026634:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8026638:	f083 0301 	eor.w	r3, r3, #1
 802663c:	b2db      	uxtb	r3, r3
 802663e:	2b00      	cmp	r3, #0
 8026640:	d001      	beq.n	8026646 <lfs_dir_compact+0x3ae>
            return err;
 8026642:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026644:	e007      	b.n	8026656 <lfs_dir_compact+0x3be>
        }

        tired = false;
 8026646:	2300      	movs	r3, #0
 8026648:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
        continue;
 802664c:	bf00      	nop
    while (true) {
 802664e:	e64c      	b.n	80262ea <lfs_dir_compact+0x52>
        break;
 8026650:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8026652:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8026656:	4618      	mov	r0, r3
 8026658:	3768      	adds	r7, #104	; 0x68
 802665a:	46bd      	mov	sp, r7
 802665c:	bd80      	pop	{r7, pc}
 802665e:	bf00      	nop
 8026660:	08026221 	.word	0x08026221
 8026664:	400ffc00 	.word	0x400ffc00
 8026668:	000ffc08 	.word	0x000ffc08
 802666c:	7ffffc0c 	.word	0x7ffffc0c
 8026670:	08033484 	.word	0x08033484
 8026674:	08034600 	.word	0x08034600
 8026678:	08033318 	.word	0x08033318
 802667c:	0803342c 	.word	0x0803342c
 8026680:	080334ac 	.word	0x080334ac
 8026684:	080334d0 	.word	0x080334d0

08026688 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8026688:	b590      	push	{r4, r7, lr}
 802668a:	b097      	sub	sp, #92	; 0x5c
 802668c:	af0a      	add	r7, sp, #40	; 0x28
 802668e:	60f8      	str	r0, [r7, #12]
 8026690:	60b9      	str	r1, [r7, #8]
 8026692:	607a      	str	r2, [r7, #4]
 8026694:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8026696:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 802669a:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 802669c:	e058      	b.n	8026750 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 802669e:	2300      	movs	r3, #0
 80266a0:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 80266a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80266a4:	b29b      	uxth	r3, r3
 80266a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80266a8:	b292      	uxth	r2, r2
 80266aa:	4252      	negs	r2, r2
 80266ac:	b292      	uxth	r2, r2
 80266ae:	b212      	sxth	r2, r2
 80266b0:	f107 0118 	add.w	r1, r7, #24
 80266b4:	9108      	str	r1, [sp, #32]
 80266b6:	4979      	ldr	r1, [pc, #484]	; (802689c <lfs_dir_splittingcompact+0x214>)
 80266b8:	9107      	str	r1, [sp, #28]
 80266ba:	9206      	str	r2, [sp, #24]
 80266bc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80266c0:	9205      	str	r2, [sp, #20]
 80266c2:	9304      	str	r3, [sp, #16]
 80266c4:	2300      	movs	r3, #0
 80266c6:	9303      	str	r3, [sp, #12]
 80266c8:	4b75      	ldr	r3, [pc, #468]	; (80268a0 <lfs_dir_splittingcompact+0x218>)
 80266ca:	9302      	str	r3, [sp, #8]
 80266cc:	683b      	ldr	r3, [r7, #0]
 80266ce:	9301      	str	r3, [sp, #4]
 80266d0:	687b      	ldr	r3, [r7, #4]
 80266d2:	9300      	str	r3, [sp, #0]
 80266d4:	f04f 33ff 	mov.w	r3, #4294967295
 80266d8:	2200      	movs	r2, #0
 80266da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80266dc:	68f8      	ldr	r0, [r7, #12]
 80266de:	f7fe f933 	bl	8024948 <lfs_dir_traverse>
 80266e2:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 80266e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80266e6:	2b00      	cmp	r3, #0
 80266e8:	d001      	beq.n	80266ee <lfs_dir_splittingcompact+0x66>
                return err;
 80266ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80266ec:	e0d1      	b.n	8026892 <lfs_dir_splittingcompact+0x20a>
            }

            // space is complicated, we need room for tail, crc, gstate,
            // cleanup delete, and we cap at half a block to give room
            // for metadata updates.
            if (end - split < 0xff
 80266ee:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80266f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80266f4:	1ad3      	subs	r3, r2, r3
 80266f6:	2bfe      	cmp	r3, #254	; 0xfe
 80266f8:	d822      	bhi.n	8026740 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 80266fa:	68fb      	ldr	r3, [r7, #12]
 80266fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80266fe:	69db      	ldr	r3, [r3, #28]
 8026700:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8026704:	68fb      	ldr	r3, [r7, #12]
 8026706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 802670a:	2b00      	cmp	r3, #0
 802670c:	d004      	beq.n	8026718 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 802670e:	68fb      	ldr	r3, [r7, #12]
 8026710:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8026714:	085b      	lsrs	r3, r3, #1
 8026716:	e003      	b.n	8026720 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8026718:	68fb      	ldr	r3, [r7, #12]
 802671a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802671c:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 802671e:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8026720:	68fa      	ldr	r2, [r7, #12]
 8026722:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8026724:	6992      	ldr	r2, [r2, #24]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8026726:	4611      	mov	r1, r2
 8026728:	4618      	mov	r0, r3
 802672a:	f7fc fee0 	bl	80234ee <lfs_alignup>
 802672e:	4603      	mov	r3, r0
 8026730:	4619      	mov	r1, r3
 8026732:	4620      	mov	r0, r4
 8026734:	f7fc feb6 	bl	80234a4 <lfs_min>
 8026738:	4602      	mov	r2, r0
 802673a:	69bb      	ldr	r3, [r7, #24]
 802673c:	429a      	cmp	r2, r3
 802673e:	d20e      	bcs.n	802675e <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8026740:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8026744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026746:	1ad3      	subs	r3, r2, r3
 8026748:	085b      	lsrs	r3, r3, #1
 802674a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802674c:	4413      	add	r3, r2
 802674e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8026750:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8026754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026756:	1ad3      	subs	r3, r2, r3
 8026758:	2b01      	cmp	r3, #1
 802675a:	d8a0      	bhi.n	802669e <lfs_dir_splittingcompact+0x16>
 802675c:	e000      	b.n	8026760 <lfs_dir_splittingcompact+0xd8>
                break;
 802675e:	bf00      	nop
        }

        if (split == begin) {
 8026760:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026766:	429a      	cmp	r2, r3
 8026768:	d02d      	beq.n	80267c6 <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 802676a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802676c:	b29b      	uxth	r3, r3
 802676e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8026772:	9202      	str	r2, [sp, #8]
 8026774:	9301      	str	r3, [sp, #4]
 8026776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026778:	9300      	str	r3, [sp, #0]
 802677a:	683b      	ldr	r3, [r7, #0]
 802677c:	687a      	ldr	r2, [r7, #4]
 802677e:	68b9      	ldr	r1, [r7, #8]
 8026780:	68f8      	ldr	r0, [r7, #12]
 8026782:	f7ff fce3 	bl	802614c <lfs_dir_split>
 8026786:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8026788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802678a:	2b00      	cmp	r3, #0
 802678c:	d005      	beq.n	802679a <lfs_dir_splittingcompact+0x112>
 802678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026790:	f113 0f1c 	cmn.w	r3, #28
 8026794:	d001      	beq.n	802679a <lfs_dir_splittingcompact+0x112>
            return err;
 8026796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026798:	e07b      	b.n	8026892 <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 802679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802679c:	2b00      	cmp	r3, #0
 802679e:	d00e      	beq.n	80267be <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 80267a0:	68bb      	ldr	r3, [r7, #8]
 80267a2:	681a      	ldr	r2, [r3, #0]
 80267a4:	68bb      	ldr	r3, [r7, #8]
 80267a6:	685b      	ldr	r3, [r3, #4]
 80267a8:	493e      	ldr	r1, [pc, #248]	; (80268a4 <lfs_dir_splittingcompact+0x21c>)
 80267aa:	9101      	str	r1, [sp, #4]
 80267ac:	9300      	str	r3, [sp, #0]
 80267ae:	4613      	mov	r3, r2
 80267b0:	f240 72a9 	movw	r2, #1961	; 0x7a9
 80267b4:	493c      	ldr	r1, [pc, #240]	; (80268a8 <lfs_dir_splittingcompact+0x220>)
 80267b6:	483d      	ldr	r0, [pc, #244]	; (80268ac <lfs_dir_splittingcompact+0x224>)
 80267b8:	f006 fdf2 	bl	802d3a0 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 80267bc:	e004      	b.n	80267c8 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 80267be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80267c0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 80267c4:	e767      	b.n	8026696 <lfs_dir_splittingcompact+0xe>
            break;
 80267c6:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 80267c8:	68b9      	ldr	r1, [r7, #8]
 80267ca:	68f8      	ldr	r0, [r7, #12]
 80267cc:	f7ff fd3d 	bl	802624a <lfs_dir_needsrelocation>
 80267d0:	4603      	mov	r3, r0
 80267d2:	2b00      	cmp	r3, #0
 80267d4:	d04e      	beq.n	8026874 <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 80267d6:	68bb      	ldr	r3, [r7, #8]
 80267d8:	2200      	movs	r2, #0
 80267da:	613a      	str	r2, [r7, #16]
 80267dc:	2201      	movs	r2, #1
 80267de:	617a      	str	r2, [r7, #20]
 80267e0:	f107 0210 	add.w	r2, r7, #16
 80267e4:	4611      	mov	r1, r2
 80267e6:	4618      	mov	r0, r3
 80267e8:	f7fd fa8c 	bl	8023d04 <lfs_pair_cmp>
 80267ec:	4603      	mov	r3, r0
 80267ee:	2b00      	cmp	r3, #0
 80267f0:	d140      	bne.n	8026874 <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 80267f2:	68f8      	ldr	r0, [r7, #12]
 80267f4:	f003 fe4c 	bl	802a490 <lfs_fs_rawsize>
 80267f8:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 80267fa:	6a3b      	ldr	r3, [r7, #32]
 80267fc:	2b00      	cmp	r3, #0
 80267fe:	da01      	bge.n	8026804 <lfs_dir_splittingcompact+0x17c>
            return size;
 8026800:	6a3b      	ldr	r3, [r7, #32]
 8026802:	e046      	b.n	8026892 <lfs_dir_splittingcompact+0x20a>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 8026804:	68fb      	ldr	r3, [r7, #12]
 8026806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026808:	6a1b      	ldr	r3, [r3, #32]
 802680a:	085a      	lsrs	r2, r3, #1
 802680c:	6a3b      	ldr	r3, [r7, #32]
 802680e:	429a      	cmp	r2, r3
 8026810:	d930      	bls.n	8026874 <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8026812:	68bb      	ldr	r3, [r7, #8]
 8026814:	689b      	ldr	r3, [r3, #8]
 8026816:	4a23      	ldr	r2, [pc, #140]	; (80268a4 <lfs_dir_splittingcompact+0x21c>)
 8026818:	9200      	str	r2, [sp, #0]
 802681a:	f240 72bd 	movw	r2, #1981	; 0x7bd
 802681e:	4922      	ldr	r1, [pc, #136]	; (80268a8 <lfs_dir_splittingcompact+0x220>)
 8026820:	4823      	ldr	r0, [pc, #140]	; (80268b0 <lfs_dir_splittingcompact+0x228>)
 8026822:	f006 fdbd 	bl	802d3a0 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8026826:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 802682a:	9302      	str	r3, [sp, #8]
 802682c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026830:	9301      	str	r3, [sp, #4]
 8026832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026834:	9300      	str	r3, [sp, #0]
 8026836:	683b      	ldr	r3, [r7, #0]
 8026838:	687a      	ldr	r2, [r7, #4]
 802683a:	68b9      	ldr	r1, [r7, #8]
 802683c:	68f8      	ldr	r0, [r7, #12]
 802683e:	f7ff fc85 	bl	802614c <lfs_dir_split>
 8026842:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8026844:	69fb      	ldr	r3, [r7, #28]
 8026846:	2b00      	cmp	r3, #0
 8026848:	d005      	beq.n	8026856 <lfs_dir_splittingcompact+0x1ce>
 802684a:	69fb      	ldr	r3, [r7, #28]
 802684c:	f113 0f1c 	cmn.w	r3, #28
 8026850:	d001      	beq.n	8026856 <lfs_dir_splittingcompact+0x1ce>
                return err;
 8026852:	69fb      	ldr	r3, [r7, #28]
 8026854:	e01d      	b.n	8026892 <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 8026856:	69fb      	ldr	r3, [r7, #28]
 8026858:	2b00      	cmp	r3, #0
 802685a:	d007      	beq.n	802686c <lfs_dir_splittingcompact+0x1e4>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 802685c:	4b11      	ldr	r3, [pc, #68]	; (80268a4 <lfs_dir_splittingcompact+0x21c>)
 802685e:	f240 72c7 	movw	r2, #1991	; 0x7c7
 8026862:	4911      	ldr	r1, [pc, #68]	; (80268a8 <lfs_dir_splittingcompact+0x220>)
 8026864:	4813      	ldr	r0, [pc, #76]	; (80268b4 <lfs_dir_splittingcompact+0x22c>)
 8026866:	f006 fd9b 	bl	802d3a0 <iprintf>
 802686a:	e003      	b.n	8026874 <lfs_dir_splittingcompact+0x1ec>
            } else {
                end = begin;
 802686c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026870:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8026874:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8026878:	9302      	str	r3, [sp, #8]
 802687a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 802687e:	9301      	str	r3, [sp, #4]
 8026880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026882:	9300      	str	r3, [sp, #0]
 8026884:	683b      	ldr	r3, [r7, #0]
 8026886:	687a      	ldr	r2, [r7, #4]
 8026888:	68b9      	ldr	r1, [r7, #8]
 802688a:	68f8      	ldr	r0, [r7, #12]
 802688c:	f7ff fd04 	bl	8026298 <lfs_dir_compact>
 8026890:	4603      	mov	r3, r0
}
 8026892:	4618      	mov	r0, r3
 8026894:	3734      	adds	r7, #52	; 0x34
 8026896:	46bd      	mov	sp, r7
 8026898:	bd90      	pop	{r4, r7, pc}
 802689a:	bf00      	nop
 802689c:	080261f5 	.word	0x080261f5
 80268a0:	400ffc00 	.word	0x400ffc00
 80268a4:	0803342c 	.word	0x0803342c
 80268a8:	08033318 	.word	0x08033318
 80268ac:	08033508 	.word	0x08033508
 80268b0:	08033538 	.word	0x08033538
 80268b4:	08033568 	.word	0x08033568

080268b8 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 80268b8:	b5b0      	push	{r4, r5, r7, lr}
 80268ba:	b0a6      	sub	sp, #152	; 0x98
 80268bc:	af0a      	add	r7, sp, #40	; 0x28
 80268be:	60f8      	str	r0, [r7, #12]
 80268c0:	60b9      	str	r1, [r7, #8]
 80268c2:	607a      	str	r2, [r7, #4]
 80268c4:	603b      	str	r3, [r7, #0]
    int state = 0;
 80268c6:	2300      	movs	r3, #0
 80268c8:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 80268ca:	2300      	movs	r3, #0
 80268cc:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 80268d0:	2300      	movs	r3, #0
 80268d2:	667b      	str	r3, [r7, #100]	; 0x64
 80268d4:	e06d      	b.n	80269b2 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 80268d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80268d8:	00db      	lsls	r3, r3, #3
 80268da:	683a      	ldr	r2, [r7, #0]
 80268dc:	4413      	add	r3, r2
 80268de:	681b      	ldr	r3, [r3, #0]
 80268e0:	4618      	mov	r0, r3
 80268e2:	f7fd facb 	bl	8023e7c <lfs_tag_type3>
 80268e6:	4603      	mov	r3, r0
 80268e8:	461a      	mov	r2, r3
 80268ea:	f240 4301 	movw	r3, #1025	; 0x401
 80268ee:	429a      	cmp	r2, r3
 80268f0:	d106      	bne.n	8026900 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 80268f2:	68bb      	ldr	r3, [r7, #8]
 80268f4:	8a9b      	ldrh	r3, [r3, #20]
 80268f6:	3301      	adds	r3, #1
 80268f8:	b29a      	uxth	r2, r3
 80268fa:	68bb      	ldr	r3, [r7, #8]
 80268fc:	829a      	strh	r2, [r3, #20]
 80268fe:	e055      	b.n	80269ac <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8026900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026902:	00db      	lsls	r3, r3, #3
 8026904:	683a      	ldr	r2, [r7, #0]
 8026906:	4413      	add	r3, r2
 8026908:	681b      	ldr	r3, [r3, #0]
 802690a:	4618      	mov	r0, r3
 802690c:	f7fd fab6 	bl	8023e7c <lfs_tag_type3>
 8026910:	4603      	mov	r3, r0
 8026912:	461a      	mov	r2, r3
 8026914:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8026918:	429a      	cmp	r2, r3
 802691a:	d114      	bne.n	8026946 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 802691c:	68bb      	ldr	r3, [r7, #8]
 802691e:	8a9b      	ldrh	r3, [r3, #20]
 8026920:	2b00      	cmp	r3, #0
 8026922:	d106      	bne.n	8026932 <lfs_dir_relocatingcommit+0x7a>
 8026924:	4ba4      	ldr	r3, [pc, #656]	; (8026bb8 <lfs_dir_relocatingcommit+0x300>)
 8026926:	4aa5      	ldr	r2, [pc, #660]	; (8026bbc <lfs_dir_relocatingcommit+0x304>)
 8026928:	f240 71df 	movw	r1, #2015	; 0x7df
 802692c:	48a4      	ldr	r0, [pc, #656]	; (8026bc0 <lfs_dir_relocatingcommit+0x308>)
 802692e:	f005 fcfd 	bl	802c32c <__assert_func>
            dir->count -= 1;
 8026932:	68bb      	ldr	r3, [r7, #8]
 8026934:	8a9b      	ldrh	r3, [r3, #20]
 8026936:	3b01      	subs	r3, #1
 8026938:	b29a      	uxth	r2, r3
 802693a:	68bb      	ldr	r3, [r7, #8]
 802693c:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 802693e:	2301      	movs	r3, #1
 8026940:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8026944:	e032      	b.n	80269ac <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8026946:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026948:	00db      	lsls	r3, r3, #3
 802694a:	683a      	ldr	r2, [r7, #0]
 802694c:	4413      	add	r3, r2
 802694e:	681b      	ldr	r3, [r3, #0]
 8026950:	4618      	mov	r0, r3
 8026952:	f7fd fa83 	bl	8023e5c <lfs_tag_type1>
 8026956:	4603      	mov	r3, r0
 8026958:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 802695c:	d126      	bne.n	80269ac <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 802695e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026960:	00db      	lsls	r3, r3, #3
 8026962:	683a      	ldr	r2, [r7, #0]
 8026964:	4413      	add	r3, r2
 8026966:	685b      	ldr	r3, [r3, #4]
 8026968:	681a      	ldr	r2, [r3, #0]
 802696a:	68bb      	ldr	r3, [r7, #8]
 802696c:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 802696e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026970:	00db      	lsls	r3, r3, #3
 8026972:	683a      	ldr	r2, [r7, #0]
 8026974:	4413      	add	r3, r2
 8026976:	685b      	ldr	r3, [r3, #4]
 8026978:	685a      	ldr	r2, [r3, #4]
 802697a:	68bb      	ldr	r3, [r7, #8]
 802697c:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 802697e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026980:	00db      	lsls	r3, r3, #3
 8026982:	683a      	ldr	r2, [r7, #0]
 8026984:	4413      	add	r3, r2
 8026986:	681b      	ldr	r3, [r3, #0]
 8026988:	4618      	mov	r0, r3
 802698a:	f7fd fa87 	bl	8023e9c <lfs_tag_chunk>
 802698e:	4603      	mov	r3, r0
 8026990:	f003 0301 	and.w	r3, r3, #1
 8026994:	2b00      	cmp	r3, #0
 8026996:	bf14      	ite	ne
 8026998:	2301      	movne	r3, #1
 802699a:	2300      	moveq	r3, #0
 802699c:	b2da      	uxtb	r2, r3
 802699e:	68bb      	ldr	r3, [r7, #8]
 80269a0:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 80269a2:	68bb      	ldr	r3, [r7, #8]
 80269a4:	3318      	adds	r3, #24
 80269a6:	4618      	mov	r0, r3
 80269a8:	f7fd fa03 	bl	8023db2 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 80269ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80269ae:	3301      	adds	r3, #1
 80269b0:	667b      	str	r3, [r7, #100]	; 0x64
 80269b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80269b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80269b8:	429a      	cmp	r2, r3
 80269ba:	db8c      	blt.n	80268d6 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 80269bc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80269c0:	2b00      	cmp	r3, #0
 80269c2:	d02b      	beq.n	8026a1c <lfs_dir_relocatingcommit+0x164>
 80269c4:	68bb      	ldr	r3, [r7, #8]
 80269c6:	8a9b      	ldrh	r3, [r3, #20]
 80269c8:	2b00      	cmp	r3, #0
 80269ca:	d127      	bne.n	8026a1c <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 80269cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80269d0:	2b00      	cmp	r3, #0
 80269d2:	d106      	bne.n	80269e2 <lfs_dir_relocatingcommit+0x12a>
 80269d4:	4b7b      	ldr	r3, [pc, #492]	; (8026bc4 <lfs_dir_relocatingcommit+0x30c>)
 80269d6:	4a79      	ldr	r2, [pc, #484]	; (8026bbc <lfs_dir_relocatingcommit+0x304>)
 80269d8:	f240 71ec 	movw	r1, #2028	; 0x7ec
 80269dc:	4878      	ldr	r0, [pc, #480]	; (8026bc0 <lfs_dir_relocatingcommit+0x308>)
 80269de:	f005 fca5 	bl	802c32c <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 80269e2:	68bb      	ldr	r3, [r7, #8]
 80269e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80269e8:	4619      	mov	r1, r3
 80269ea:	68f8      	ldr	r0, [r7, #12]
 80269ec:	f003 f9c2 	bl	8029d74 <lfs_fs_pred>
 80269f0:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 80269f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80269f4:	2b00      	cmp	r3, #0
 80269f6:	d005      	beq.n	8026a04 <lfs_dir_relocatingcommit+0x14c>
 80269f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80269fa:	f113 0f02 	cmn.w	r3, #2
 80269fe:	d001      	beq.n	8026a04 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8026a00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8026a02:	e204      	b.n	8026e0e <lfs_dir_relocatingcommit+0x556>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8026a04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8026a06:	f113 0f02 	cmn.w	r3, #2
 8026a0a:	d007      	beq.n	8026a1c <lfs_dir_relocatingcommit+0x164>
 8026a0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026a10:	7ddb      	ldrb	r3, [r3, #23]
 8026a12:	2b00      	cmp	r3, #0
 8026a14:	d002      	beq.n	8026a1c <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8026a16:	2302      	movs	r3, #2
 8026a18:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 8026a1a:	e121      	b.n	8026c60 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8026a1c:	68bb      	ldr	r3, [r7, #8]
 8026a1e:	7d9b      	ldrb	r3, [r3, #22]
 8026a20:	2b00      	cmp	r3, #0
 8026a22:	f000 80fb 	beq.w	8026c1c <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8026a26:	68bb      	ldr	r3, [r7, #8]
 8026a28:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8026a2a:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 8026a2c:	68bb      	ldr	r3, [r7, #8]
 8026a2e:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8026a30:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 8026a32:	68bb      	ldr	r3, [r7, #8]
 8026a34:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8026a36:	63bb      	str	r3, [r7, #56]	; 0x38
 8026a38:	f04f 33ff 	mov.w	r3, #4294967295
 8026a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8026a3e:	68bb      	ldr	r3, [r7, #8]
 8026a40:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8026a42:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 8026a44:	68fb      	ldr	r3, [r7, #12]
 8026a46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8026a4a:	2b00      	cmp	r3, #0
 8026a4c:	d004      	beq.n	8026a58 <lfs_dir_relocatingcommit+0x1a0>
 8026a4e:	68fb      	ldr	r3, [r7, #12]
 8026a50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8026a54:	3b08      	subs	r3, #8
 8026a56:	e003      	b.n	8026a60 <lfs_dir_relocatingcommit+0x1a8>
 8026a58:	68fb      	ldr	r3, [r7, #12]
 8026a5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026a5c:	69db      	ldr	r3, [r3, #28]
 8026a5e:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8026a60:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8026a62:	68bb      	ldr	r3, [r7, #8]
 8026a64:	3318      	adds	r3, #24
 8026a66:	4618      	mov	r0, r3
 8026a68:	f7fd f9bd 	bl	8023de6 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8026a6c:	68bb      	ldr	r3, [r7, #8]
 8026a6e:	68da      	ldr	r2, [r3, #12]
 8026a70:	68bb      	ldr	r3, [r7, #8]
 8026a72:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8026a74:	68fb      	ldr	r3, [r7, #12]
 8026a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8026a78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 8026a7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8026a82:	9308      	str	r3, [sp, #32]
 8026a84:	4b50      	ldr	r3, [pc, #320]	; (8026bc8 <lfs_dir_relocatingcommit+0x310>)
 8026a86:	9307      	str	r3, [sp, #28]
 8026a88:	2300      	movs	r3, #0
 8026a8a:	9306      	str	r3, [sp, #24]
 8026a8c:	2300      	movs	r3, #0
 8026a8e:	9305      	str	r3, [sp, #20]
 8026a90:	2300      	movs	r3, #0
 8026a92:	9304      	str	r3, [sp, #16]
 8026a94:	2300      	movs	r3, #0
 8026a96:	9303      	str	r3, [sp, #12]
 8026a98:	2300      	movs	r3, #0
 8026a9a:	9302      	str	r3, [sp, #8]
 8026a9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026aa0:	9301      	str	r3, [sp, #4]
 8026aa2:	683b      	ldr	r3, [r7, #0]
 8026aa4:	9300      	str	r3, [sp, #0]
 8026aa6:	460b      	mov	r3, r1
 8026aa8:	68b9      	ldr	r1, [r7, #8]
 8026aaa:	68f8      	ldr	r0, [r7, #12]
 8026aac:	f7fd ff4c 	bl	8024948 <lfs_dir_traverse>
 8026ab0:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8026ab2:	68bb      	ldr	r3, [r7, #8]
 8026ab4:	3318      	adds	r3, #24
 8026ab6:	4618      	mov	r0, r3
 8026ab8:	f7fd f97b 	bl	8023db2 <lfs_pair_fromle32>
        if (err) {
 8026abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026abe:	2b00      	cmp	r3, #0
 8026ac0:	d00b      	beq.n	8026ada <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8026ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026ac4:	f113 0f1c 	cmn.w	r3, #28
 8026ac8:	f000 80aa 	beq.w	8026c20 <lfs_dir_relocatingcommit+0x368>
 8026acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026ace:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026ad2:	f000 80a5 	beq.w	8026c20 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8026ad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026ad8:	e199      	b.n	8026e0e <lfs_dir_relocatingcommit+0x556>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8026ada:	f107 031c 	add.w	r3, r7, #28
 8026ade:	2200      	movs	r2, #0
 8026ae0:	601a      	str	r2, [r3, #0]
 8026ae2:	605a      	str	r2, [r3, #4]
 8026ae4:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8026ae6:	68fb      	ldr	r3, [r7, #12]
 8026ae8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8026aec:	f107 031c 	add.w	r3, r7, #28
 8026af0:	4611      	mov	r1, r2
 8026af2:	4618      	mov	r0, r3
 8026af4:	f7fd fa1d 	bl	8023f32 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8026af8:	68fb      	ldr	r3, [r7, #12]
 8026afa:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8026afe:	f107 031c 	add.w	r3, r7, #28
 8026b02:	4611      	mov	r1, r2
 8026b04:	4618      	mov	r0, r3
 8026b06:	f7fd fa14 	bl	8023f32 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8026b0a:	68fb      	ldr	r3, [r7, #12]
 8026b0c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8026b10:	f107 031c 	add.w	r3, r7, #28
 8026b14:	4611      	mov	r1, r2
 8026b16:	4618      	mov	r0, r3
 8026b18:	f7fd fa0b 	bl	8023f32 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8026b1c:	69fb      	ldr	r3, [r7, #28]
 8026b1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8026b22:	f023 0303 	bic.w	r3, r3, #3
 8026b26:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8026b28:	f107 031c 	add.w	r3, r7, #28
 8026b2c:	4618      	mov	r0, r3
 8026b2e:	f7fd fa25 	bl	8023f7c <lfs_gstate_iszero>
 8026b32:	4603      	mov	r3, r0
 8026b34:	f083 0301 	eor.w	r3, r3, #1
 8026b38:	b2db      	uxtb	r3, r3
 8026b3a:	2b00      	cmp	r3, #0
 8026b3c:	d027      	beq.n	8026b8e <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8026b3e:	f107 031c 	add.w	r3, r7, #28
 8026b42:	461a      	mov	r2, r3
 8026b44:	68b9      	ldr	r1, [r7, #8]
 8026b46:	68f8      	ldr	r0, [r7, #12]
 8026b48:	f7fe fe68 	bl	802581c <lfs_dir_getgstate>
 8026b4c:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 8026b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026b50:	2b00      	cmp	r3, #0
 8026b52:	d001      	beq.n	8026b58 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8026b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026b56:	e15a      	b.n	8026e0e <lfs_dir_relocatingcommit+0x556>
            }

            lfs_gstate_tole32(&delta);
 8026b58:	f107 031c 	add.w	r3, r7, #28
 8026b5c:	4618      	mov	r0, r3
 8026b5e:	f7fd fa9f 	bl	80240a0 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8026b62:	f107 031c 	add.w	r3, r7, #28
 8026b66:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8026b6a:	4a18      	ldr	r2, [pc, #96]	; (8026bcc <lfs_dir_relocatingcommit+0x314>)
 8026b6c:	68f8      	ldr	r0, [r7, #12]
 8026b6e:	f7ff f87b 	bl	8025c68 <lfs_dir_commitattr>
 8026b72:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8026b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026b76:	2b00      	cmp	r3, #0
 8026b78:	d009      	beq.n	8026b8e <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8026b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026b7c:	f113 0f1c 	cmn.w	r3, #28
 8026b80:	d050      	beq.n	8026c24 <lfs_dir_relocatingcommit+0x36c>
 8026b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026b84:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026b88:	d04c      	beq.n	8026c24 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 8026b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026b8c:	e13f      	b.n	8026e0e <lfs_dir_relocatingcommit+0x556>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8026b8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026b92:	4619      	mov	r1, r3
 8026b94:	68f8      	ldr	r0, [r7, #12]
 8026b96:	f7ff f8e7 	bl	8025d68 <lfs_dir_commitcrc>
 8026b9a:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 8026b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026b9e:	2b00      	cmp	r3, #0
 8026ba0:	d016      	beq.n	8026bd0 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8026ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026ba4:	f113 0f1c 	cmn.w	r3, #28
 8026ba8:	d03e      	beq.n	8026c28 <lfs_dir_relocatingcommit+0x370>
 8026baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026bac:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026bb0:	d03a      	beq.n	8026c28 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8026bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026bb4:	e12b      	b.n	8026e0e <lfs_dir_relocatingcommit+0x556>
 8026bb6:	bf00      	nop
 8026bb8:	08033594 	.word	0x08033594
 8026bbc:	08034610 	.word	0x08034610
 8026bc0:	08033318 	.word	0x08033318
 8026bc4:	080335a4 	.word	0x080335a4
 8026bc8:	08026221 	.word	0x08026221
 8026bcc:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8026bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026bd2:	68fa      	ldr	r2, [r7, #12]
 8026bd4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8026bd6:	6992      	ldr	r2, [r2, #24]
 8026bd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8026bdc:	fb01 f202 	mul.w	r2, r1, r2
 8026be0:	1a9b      	subs	r3, r3, r2
 8026be2:	2b00      	cmp	r3, #0
 8026be4:	d006      	beq.n	8026bf4 <lfs_dir_relocatingcommit+0x33c>
 8026be6:	4b8c      	ldr	r3, [pc, #560]	; (8026e18 <lfs_dir_relocatingcommit+0x560>)
 8026be8:	4a8c      	ldr	r2, [pc, #560]	; (8026e1c <lfs_dir_relocatingcommit+0x564>)
 8026bea:	f640 0136 	movw	r1, #2102	; 0x836
 8026bee:	488c      	ldr	r0, [pc, #560]	; (8026e20 <lfs_dir_relocatingcommit+0x568>)
 8026bf0:	f005 fb9c 	bl	802c32c <__assert_func>
        dir->off = commit.off;
 8026bf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8026bf6:	68bb      	ldr	r3, [r7, #8]
 8026bf8:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8026bfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8026bfc:	68bb      	ldr	r3, [r7, #8]
 8026bfe:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8026c00:	68fb      	ldr	r3, [r7, #12]
 8026c02:	68fa      	ldr	r2, [r7, #12]
 8026c04:	333c      	adds	r3, #60	; 0x3c
 8026c06:	3230      	adds	r2, #48	; 0x30
 8026c08:	ca07      	ldmia	r2, {r0, r1, r2}
 8026c0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8026c0e:	68fb      	ldr	r3, [r7, #12]
 8026c10:	3348      	adds	r3, #72	; 0x48
 8026c12:	2200      	movs	r2, #0
 8026c14:	601a      	str	r2, [r3, #0]
 8026c16:	605a      	str	r2, [r3, #4]
 8026c18:	609a      	str	r2, [r3, #8]
 8026c1a:	e021      	b.n	8026c60 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8026c1c:	bf00      	nop
 8026c1e:	e004      	b.n	8026c2a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8026c20:	bf00      	nop
 8026c22:	e002      	b.n	8026c2a <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8026c24:	bf00      	nop
 8026c26:	e000      	b.n	8026c2a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8026c28:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8026c2a:	68fb      	ldr	r3, [r7, #12]
 8026c2c:	3310      	adds	r3, #16
 8026c2e:	4619      	mov	r1, r3
 8026c30:	68f8      	ldr	r0, [r7, #12]
 8026c32:	f7fc fced 	bl	8023610 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8026c36:	68bb      	ldr	r3, [r7, #8]
 8026c38:	8a9b      	ldrh	r3, [r3, #20]
 8026c3a:	9302      	str	r3, [sp, #8]
 8026c3c:	2300      	movs	r3, #0
 8026c3e:	9301      	str	r3, [sp, #4]
 8026c40:	68bb      	ldr	r3, [r7, #8]
 8026c42:	9300      	str	r3, [sp, #0]
 8026c44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026c48:	683a      	ldr	r2, [r7, #0]
 8026c4a:	68b9      	ldr	r1, [r7, #8]
 8026c4c:	68f8      	ldr	r0, [r7, #12]
 8026c4e:	f7ff fd1b 	bl	8026688 <lfs_dir_splittingcompact>
 8026c52:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8026c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8026c56:	2b00      	cmp	r3, #0
 8026c58:	da01      	bge.n	8026c5e <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8026c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8026c5c:	e0d7      	b.n	8026e0e <lfs_dir_relocatingcommit+0x556>
    }

    goto fixmlist;
 8026c5e:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8026c60:	687b      	ldr	r3, [r7, #4]
 8026c62:	681b      	ldr	r3, [r3, #0]
 8026c64:	64bb      	str	r3, [r7, #72]	; 0x48
 8026c66:	687b      	ldr	r3, [r7, #4]
 8026c68:	3304      	adds	r3, #4
 8026c6a:	681b      	ldr	r3, [r3, #0]
 8026c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8026c6e:	68fb      	ldr	r3, [r7, #12]
 8026c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026c72:	663b      	str	r3, [r7, #96]	; 0x60
 8026c74:	e0c6      	b.n	8026e04 <lfs_dir_relocatingcommit+0x54c>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8026c76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026c78:	3308      	adds	r3, #8
 8026c7a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8026c7e:	4611      	mov	r1, r2
 8026c80:	4618      	mov	r0, r3
 8026c82:	f7fd f83f 	bl	8023d04 <lfs_pair_cmp>
 8026c86:	4603      	mov	r3, r0
 8026c88:	2b00      	cmp	r3, #0
 8026c8a:	f040 80b8 	bne.w	8026dfe <lfs_dir_relocatingcommit+0x546>
            d->m = *dir;
 8026c8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026c90:	68ba      	ldr	r2, [r7, #8]
 8026c92:	f103 0408 	add.w	r4, r3, #8
 8026c96:	4615      	mov	r5, r2
 8026c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026c9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8026ca0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8026ca4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026ca6:	3308      	adds	r3, #8
 8026ca8:	687a      	ldr	r2, [r7, #4]
 8026caa:	429a      	cmp	r2, r3
 8026cac:	f000 809d 	beq.w	8026dea <lfs_dir_relocatingcommit+0x532>
                for (int i = 0; i < attrcount; i++) {
 8026cb0:	2300      	movs	r3, #0
 8026cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8026cb4:	e07b      	b.n	8026dae <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8026cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026cb8:	00db      	lsls	r3, r3, #3
 8026cba:	683a      	ldr	r2, [r7, #0]
 8026cbc:	4413      	add	r3, r2
 8026cbe:	681b      	ldr	r3, [r3, #0]
 8026cc0:	4618      	mov	r0, r3
 8026cc2:	f7fd f8db 	bl	8023e7c <lfs_tag_type3>
 8026cc6:	4603      	mov	r3, r0
 8026cc8:	461a      	mov	r2, r3
 8026cca:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8026cce:	429a      	cmp	r2, r3
 8026cd0:	d115      	bne.n	8026cfe <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8026cd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026cd4:	889c      	ldrh	r4, [r3, #4]
 8026cd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026cd8:	00db      	lsls	r3, r3, #3
 8026cda:	683a      	ldr	r2, [r7, #0]
 8026cdc:	4413      	add	r3, r2
 8026cde:	681b      	ldr	r3, [r3, #0]
 8026ce0:	4618      	mov	r0, r3
 8026ce2:	f7fd f8f5 	bl	8023ed0 <lfs_tag_id>
 8026ce6:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8026ce8:	429c      	cmp	r4, r3
 8026cea:	d108      	bne.n	8026cfe <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8026cec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026cee:	f04f 32ff 	mov.w	r2, #4294967295
 8026cf2:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8026cf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8026cfa:	60da      	str	r2, [r3, #12]
 8026cfc:	e054      	b.n	8026da8 <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8026cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026d00:	00db      	lsls	r3, r3, #3
 8026d02:	683a      	ldr	r2, [r7, #0]
 8026d04:	4413      	add	r3, r2
 8026d06:	681b      	ldr	r3, [r3, #0]
 8026d08:	4618      	mov	r0, r3
 8026d0a:	f7fd f8b7 	bl	8023e7c <lfs_tag_type3>
 8026d0e:	4603      	mov	r3, r0
 8026d10:	461a      	mov	r2, r3
 8026d12:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8026d16:	429a      	cmp	r2, r3
 8026d18:	d11c      	bne.n	8026d54 <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8026d1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026d1c:	889c      	ldrh	r4, [r3, #4]
 8026d1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026d20:	00db      	lsls	r3, r3, #3
 8026d22:	683a      	ldr	r2, [r7, #0]
 8026d24:	4413      	add	r3, r2
 8026d26:	681b      	ldr	r3, [r3, #0]
 8026d28:	4618      	mov	r0, r3
 8026d2a:	f7fd f8d1 	bl	8023ed0 <lfs_tag_id>
 8026d2e:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8026d30:	429c      	cmp	r4, r3
 8026d32:	d90f      	bls.n	8026d54 <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 8026d34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026d36:	889b      	ldrh	r3, [r3, #4]
 8026d38:	3b01      	subs	r3, #1
 8026d3a:	b29a      	uxth	r2, r3
 8026d3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026d3e:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8026d40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026d42:	799b      	ldrb	r3, [r3, #6]
 8026d44:	2b02      	cmp	r3, #2
 8026d46:	d12f      	bne.n	8026da8 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 8026d48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026d4c:	1e5a      	subs	r2, r3, #1
 8026d4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026d50:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8026d52:	e029      	b.n	8026da8 <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8026d54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026d56:	00db      	lsls	r3, r3, #3
 8026d58:	683a      	ldr	r2, [r7, #0]
 8026d5a:	4413      	add	r3, r2
 8026d5c:	681b      	ldr	r3, [r3, #0]
 8026d5e:	4618      	mov	r0, r3
 8026d60:	f7fd f88c 	bl	8023e7c <lfs_tag_type3>
 8026d64:	4603      	mov	r3, r0
 8026d66:	461a      	mov	r2, r3
 8026d68:	f240 4301 	movw	r3, #1025	; 0x401
 8026d6c:	429a      	cmp	r2, r3
 8026d6e:	d11b      	bne.n	8026da8 <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8026d70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026d72:	889c      	ldrh	r4, [r3, #4]
 8026d74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026d76:	00db      	lsls	r3, r3, #3
 8026d78:	683a      	ldr	r2, [r7, #0]
 8026d7a:	4413      	add	r3, r2
 8026d7c:	681b      	ldr	r3, [r3, #0]
 8026d7e:	4618      	mov	r0, r3
 8026d80:	f7fd f8a6 	bl	8023ed0 <lfs_tag_id>
 8026d84:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8026d86:	429c      	cmp	r4, r3
 8026d88:	d30e      	bcc.n	8026da8 <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 8026d8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026d8c:	889b      	ldrh	r3, [r3, #4]
 8026d8e:	3301      	adds	r3, #1
 8026d90:	b29a      	uxth	r2, r3
 8026d92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026d94:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8026d96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026d98:	799b      	ldrb	r3, [r3, #6]
 8026d9a:	2b02      	cmp	r3, #2
 8026d9c:	d104      	bne.n	8026da8 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 8026d9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026da2:	1c5a      	adds	r2, r3, #1
 8026da4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026da6:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 8026da8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026daa:	3301      	adds	r3, #1
 8026dac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8026dae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8026db0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026db4:	429a      	cmp	r2, r3
 8026db6:	f6ff af7e 	blt.w	8026cb6 <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 8026dba:	e016      	b.n	8026dea <lfs_dir_relocatingcommit+0x532>
                // we split and id is on tail now
                d->id -= d->m.count;
 8026dbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026dbe:	889a      	ldrh	r2, [r3, #4]
 8026dc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026dc2:	8b9b      	ldrh	r3, [r3, #28]
 8026dc4:	1ad3      	subs	r3, r2, r3
 8026dc6:	b29a      	uxth	r2, r3
 8026dc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026dca:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8026dcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026dce:	f103 0108 	add.w	r1, r3, #8
 8026dd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026dd4:	3320      	adds	r3, #32
 8026dd6:	461a      	mov	r2, r3
 8026dd8:	68f8      	ldr	r0, [r7, #12]
 8026dda:	f7fe fd03 	bl	80257e4 <lfs_dir_fetch>
 8026dde:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 8026de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8026de2:	2b00      	cmp	r3, #0
 8026de4:	d001      	beq.n	8026dea <lfs_dir_relocatingcommit+0x532>
                    return err;
 8026de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8026de8:	e011      	b.n	8026e0e <lfs_dir_relocatingcommit+0x556>
            while (d->id >= d->m.count && d->m.split) {
 8026dea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026dec:	889a      	ldrh	r2, [r3, #4]
 8026dee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026df0:	8b9b      	ldrh	r3, [r3, #28]
 8026df2:	429a      	cmp	r2, r3
 8026df4:	d303      	bcc.n	8026dfe <lfs_dir_relocatingcommit+0x546>
 8026df6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026df8:	7fdb      	ldrb	r3, [r3, #31]
 8026dfa:	2b00      	cmp	r3, #0
 8026dfc:	d1de      	bne.n	8026dbc <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8026dfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026e00:	681b      	ldr	r3, [r3, #0]
 8026e02:	663b      	str	r3, [r7, #96]	; 0x60
 8026e04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026e06:	2b00      	cmp	r3, #0
 8026e08:	f47f af35 	bne.w	8026c76 <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 8026e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8026e0e:	4618      	mov	r0, r3
 8026e10:	3770      	adds	r7, #112	; 0x70
 8026e12:	46bd      	mov	sp, r7
 8026e14:	bdb0      	pop	{r4, r5, r7, pc}
 8026e16:	bf00      	nop
 8026e18:	08033484 	.word	0x08033484
 8026e1c:	08034610 	.word	0x08034610
 8026e20:	08033318 	.word	0x08033318

08026e24 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8026e24:	b5b0      	push	{r4, r5, r7, lr}
 8026e26:	b0bc      	sub	sp, #240	; 0xf0
 8026e28:	af04      	add	r7, sp, #16
 8026e2a:	60f8      	str	r0, [r7, #12]
 8026e2c:	60b9      	str	r1, [r7, #8]
 8026e2e:	607a      	str	r2, [r7, #4]
 8026e30:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8026e32:	68fb      	ldr	r3, [r7, #12]
 8026e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026e36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8026e3a:	e045      	b.n	8026ec8 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8026e3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026e40:	3308      	adds	r3, #8
 8026e42:	68ba      	ldr	r2, [r7, #8]
 8026e44:	429a      	cmp	r2, r3
 8026e46:	d03a      	beq.n	8026ebe <lfs_dir_orphaningcommit+0x9a>
 8026e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026e4c:	3308      	adds	r3, #8
 8026e4e:	68ba      	ldr	r2, [r7, #8]
 8026e50:	4611      	mov	r1, r2
 8026e52:	4618      	mov	r0, r3
 8026e54:	f7fc ff56 	bl	8023d04 <lfs_pair_cmp>
 8026e58:	4603      	mov	r3, r0
 8026e5a:	2b00      	cmp	r3, #0
 8026e5c:	d12f      	bne.n	8026ebe <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8026e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026e62:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8026e64:	2b01      	cmp	r3, #1
 8026e66:	d12a      	bne.n	8026ebe <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8026e68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8026e72:	2b00      	cmp	r3, #0
 8026e74:	d023      	beq.n	8026ebe <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8026e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026e7c:	68fb      	ldr	r3, [r7, #12]
 8026e7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8026e82:	429a      	cmp	r2, r3
 8026e84:	d91b      	bls.n	8026ebe <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8026e86:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8026e8a:	68f8      	ldr	r0, [r7, #12]
 8026e8c:	f001 fa26 	bl	80282dc <lfs_file_outline>
 8026e90:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8026e94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8026e98:	2b00      	cmp	r3, #0
 8026e9a:	d002      	beq.n	8026ea2 <lfs_dir_orphaningcommit+0x7e>
                return err;
 8026e9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8026ea0:	e2ad      	b.n	80273fe <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 8026ea2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8026ea6:	68f8      	ldr	r0, [r7, #12]
 8026ea8:	f001 fa3a 	bl	8028320 <lfs_file_flush>
 8026eac:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8026eb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8026eb4:	2b00      	cmp	r3, #0
 8026eb6:	d002      	beq.n	8026ebe <lfs_dir_orphaningcommit+0x9a>
                return err;
 8026eb8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8026ebc:	e29f      	b.n	80273fe <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8026ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026ec2:	681b      	ldr	r3, [r3, #0]
 8026ec4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8026ec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026ecc:	2b00      	cmp	r3, #0
 8026ece:	d1b5      	bne.n	8026e3c <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8026ed0:	68bb      	ldr	r3, [r7, #8]
 8026ed2:	681b      	ldr	r3, [r3, #0]
 8026ed4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8026ed8:	68bb      	ldr	r3, [r7, #8]
 8026eda:	685b      	ldr	r3, [r3, #4]
 8026edc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 8026ee0:	68bb      	ldr	r3, [r7, #8]
 8026ee2:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8026ee6:	461d      	mov	r5, r3
 8026ee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026eec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8026ef0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8026ef4:	68ba      	ldr	r2, [r7, #8]
 8026ef6:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8026efa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8026efe:	9301      	str	r3, [sp, #4]
 8026f00:	683b      	ldr	r3, [r7, #0]
 8026f02:	9300      	str	r3, [sp, #0]
 8026f04:	687b      	ldr	r3, [r7, #4]
 8026f06:	68f8      	ldr	r0, [r7, #12]
 8026f08:	f7ff fcd6 	bl	80268b8 <lfs_dir_relocatingcommit>
 8026f0c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8026f10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8026f14:	2b00      	cmp	r3, #0
 8026f16:	da02      	bge.n	8026f1e <lfs_dir_orphaningcommit+0xfa>
        return state;
 8026f18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8026f1c:	e26f      	b.n	80273fe <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8026f1e:	68bb      	ldr	r3, [r7, #8]
 8026f20:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8026f24:	4611      	mov	r1, r2
 8026f26:	4618      	mov	r0, r3
 8026f28:	f7fc feec 	bl	8023d04 <lfs_pair_cmp>
 8026f2c:	4603      	mov	r3, r0
 8026f2e:	2b00      	cmp	r3, #0
 8026f30:	d109      	bne.n	8026f46 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8026f32:	68bb      	ldr	r3, [r7, #8]
 8026f34:	461d      	mov	r5, r3
 8026f36:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8026f3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026f3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8026f3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8026f42:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8026f46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8026f4a:	2b02      	cmp	r3, #2
 8026f4c:	d14a      	bne.n	8026fe4 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8026f4e:	68fb      	ldr	r3, [r7, #12]
 8026f50:	3348      	adds	r3, #72	; 0x48
 8026f52:	461a      	mov	r2, r3
 8026f54:	68b9      	ldr	r1, [r7, #8]
 8026f56:	68f8      	ldr	r0, [r7, #12]
 8026f58:	f7fe fc60 	bl	802581c <lfs_dir_getgstate>
 8026f5c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 8026f60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8026f64:	2b00      	cmp	r3, #0
 8026f66:	d002      	beq.n	8026f6e <lfs_dir_orphaningcommit+0x14a>
            return err;
 8026f68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8026f6c:	e247      	b.n	80273fe <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 8026f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8026f70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 8026f74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8026f76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 8026f7a:	68bb      	ldr	r3, [r7, #8]
 8026f7c:	3318      	adds	r3, #24
 8026f7e:	4618      	mov	r0, r3
 8026f80:	f7fc ff31 	bl	8023de6 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8026f84:	68bb      	ldr	r3, [r7, #8]
 8026f86:	7ddb      	ldrb	r3, [r3, #23]
 8026f88:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8026f8c:	051a      	lsls	r2, r3, #20
 8026f8e:	4bc2      	ldr	r3, [pc, #776]	; (8027298 <lfs_dir_orphaningcommit+0x474>)
 8026f90:	4313      	orrs	r3, r2
 8026f92:	667b      	str	r3, [r7, #100]	; 0x64
 8026f94:	68bb      	ldr	r3, [r7, #8]
 8026f96:	3318      	adds	r3, #24
 8026f98:	66bb      	str	r3, [r7, #104]	; 0x68
 8026f9a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8026f9e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8026fa2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8026fa6:	2000      	movs	r0, #0
 8026fa8:	9001      	str	r0, [sp, #4]
 8026faa:	2001      	movs	r0, #1
 8026fac:	9000      	str	r0, [sp, #0]
 8026fae:	68f8      	ldr	r0, [r7, #12]
 8026fb0:	f7ff fc82 	bl	80268b8 <lfs_dir_relocatingcommit>
 8026fb4:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8026fb8:	68bb      	ldr	r3, [r7, #8]
 8026fba:	3318      	adds	r3, #24
 8026fbc:	4618      	mov	r0, r3
 8026fbe:	f7fc fef8 	bl	8023db2 <lfs_pair_fromle32>
        if (state < 0) {
 8026fc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8026fc6:	2b00      	cmp	r3, #0
 8026fc8:	da02      	bge.n	8026fd0 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 8026fca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8026fce:	e216      	b.n	80273fe <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8026fd0:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8026fd4:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8026fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026fdc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8026fe0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8026fe4:	2300      	movs	r3, #0
 8026fe6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 8026fea:	e1fc      	b.n	80273e6 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8026fec:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8026ff0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8026ff4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8026ff8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8026ffc:	4ca7      	ldr	r4, [pc, #668]	; (802729c <lfs_dir_orphaningcommit+0x478>)
 8026ffe:	9403      	str	r4, [sp, #12]
 8027000:	9102      	str	r1, [sp, #8]
 8027002:	9201      	str	r2, [sp, #4]
 8027004:	9300      	str	r3, [sp, #0]
 8027006:	4603      	mov	r3, r0
 8027008:	f44f 620c 	mov.w	r2, #2240	; 0x8c0
 802700c:	49a4      	ldr	r1, [pc, #656]	; (80272a0 <lfs_dir_orphaningcommit+0x47c>)
 802700e:	48a5      	ldr	r0, [pc, #660]	; (80272a4 <lfs_dir_orphaningcommit+0x480>)
 8027010:	f006 f9c6 	bl	802d3a0 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8027014:	2300      	movs	r3, #0
 8027016:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 802701a:	68fb      	ldr	r3, [r7, #12]
 802701c:	f103 0220 	add.w	r2, r3, #32
 8027020:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8027024:	4611      	mov	r1, r2
 8027026:	4618      	mov	r0, r3
 8027028:	f7fc fe6c 	bl	8023d04 <lfs_pair_cmp>
 802702c:	4603      	mov	r3, r0
 802702e:	2b00      	cmp	r3, #0
 8027030:	d107      	bne.n	8027042 <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8027032:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8027036:	68fb      	ldr	r3, [r7, #12]
 8027038:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 802703a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 802703e:	68fb      	ldr	r3, [r7, #12]
 8027040:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8027042:	68fb      	ldr	r3, [r7, #12]
 8027044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027046:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802704a:	e037      	b.n	80270bc <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 802704c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8027050:	f103 0208 	add.w	r2, r3, #8
 8027054:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8027058:	4611      	mov	r1, r2
 802705a:	4618      	mov	r0, r3
 802705c:	f7fc fe52 	bl	8023d04 <lfs_pair_cmp>
 8027060:	4603      	mov	r3, r0
 8027062:	2b00      	cmp	r3, #0
 8027064:	d109      	bne.n	802707a <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8027066:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 802706a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 802706e:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8027070:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8027074:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8027078:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 802707a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 802707e:	799b      	ldrb	r3, [r3, #6]
 8027080:	2b02      	cmp	r3, #2
 8027082:	d116      	bne.n	80270b2 <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8027084:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8027088:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 802708c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8027090:	4611      	mov	r1, r2
 8027092:	4618      	mov	r0, r3
 8027094:	f7fc fe36 	bl	8023d04 <lfs_pair_cmp>
 8027098:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 802709a:	2b00      	cmp	r3, #0
 802709c:	d109      	bne.n	80270b2 <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 802709e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80270a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80270a6:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 80270a8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80270ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80270b0:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80270b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80270b6:	681b      	ldr	r3, [r3, #0]
 80270b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80270bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80270c0:	2b00      	cmp	r3, #0
 80270c2:	d1c3      	bne.n	802704c <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 80270c4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80270c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80270cc:	4619      	mov	r1, r3
 80270ce:	68f8      	ldr	r0, [r7, #12]
 80270d0:	f002 fed8 	bl	8029e84 <lfs_fs_parent>
 80270d4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 80270d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80270dc:	2b00      	cmp	r3, #0
 80270de:	da07      	bge.n	80270f0 <lfs_dir_orphaningcommit+0x2cc>
 80270e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80270e4:	f113 0f02 	cmn.w	r3, #2
 80270e8:	d002      	beq.n	80270f0 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 80270ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80270ee:	e186      	b.n	80273fe <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 80270f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80270f4:	f113 0f02 	cmn.w	r3, #2
 80270f8:	bf14      	ite	ne
 80270fa:	2301      	movne	r3, #1
 80270fc:	2300      	moveq	r3, #0
 80270fe:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 8027102:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8027106:	f113 0f02 	cmn.w	r3, #2
 802710a:	f000 809e 	beq.w	802724a <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 802710e:	2101      	movs	r1, #1
 8027110:	68f8      	ldr	r0, [r7, #12]
 8027112:	f002 ff0f 	bl	8029f34 <lfs_fs_preporphans>
 8027116:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 802711a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 802711e:	2b00      	cmp	r3, #0
 8027120:	d002      	beq.n	8027128 <lfs_dir_orphaningcommit+0x304>
                return err;
 8027122:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8027126:	e16a      	b.n	80273fe <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8027128:	f240 33ff 	movw	r3, #1023	; 0x3ff
 802712c:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8027130:	68fb      	ldr	r3, [r7, #12]
 8027132:	3330      	adds	r3, #48	; 0x30
 8027134:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8027138:	4611      	mov	r1, r2
 802713a:	4618      	mov	r0, r3
 802713c:	f7fc ff70 	bl	8024020 <lfs_gstate_hasmovehere>
 8027140:	4603      	mov	r3, r0
 8027142:	2b00      	cmp	r3, #0
 8027144:	d02d      	beq.n	80271a2 <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8027146:	68fb      	ldr	r3, [r7, #12]
 8027148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802714a:	4618      	mov	r0, r3
 802714c:	f7fc fec0 	bl	8023ed0 <lfs_tag_id>
 8027150:	4603      	mov	r3, r0
 8027152:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 8027156:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8027158:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802715a:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 802715e:	484f      	ldr	r0, [pc, #316]	; (802729c <lfs_dir_orphaningcommit+0x478>)
 8027160:	9002      	str	r0, [sp, #8]
 8027162:	9201      	str	r2, [sp, #4]
 8027164:	9300      	str	r3, [sp, #0]
 8027166:	460b      	mov	r3, r1
 8027168:	f640 02ed 	movw	r2, #2285	; 0x8ed
 802716c:	494c      	ldr	r1, [pc, #304]	; (80272a0 <lfs_dir_orphaningcommit+0x47c>)
 802716e:	484e      	ldr	r0, [pc, #312]	; (80272a8 <lfs_dir_orphaningcommit+0x484>)
 8027170:	f006 f916 	bl	802d3a0 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8027174:	2200      	movs	r2, #0
 8027176:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802717a:	68f8      	ldr	r0, [r7, #12]
 802717c:	f002 ff14 	bl	8029fa8 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8027180:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8027184:	4618      	mov	r0, r3
 8027186:	f7fc fea3 	bl	8023ed0 <lfs_tag_id>
 802718a:	4603      	mov	r3, r0
 802718c:	461a      	mov	r2, r3
 802718e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8027192:	4293      	cmp	r3, r2
 8027194:	d205      	bcs.n	80271a2 <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 8027196:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 802719a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 802719e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 80271a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80271a4:	657b      	str	r3, [r7, #84]	; 0x54
 80271a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80271a8:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 80271aa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80271ae:	4618      	mov	r0, r3
 80271b0:	f7fc fe19 	bl	8023de6 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 80271b4:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80271b8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80271bc:	4293      	cmp	r3, r2
 80271be:	d007      	beq.n	80271d0 <lfs_dir_orphaningcommit+0x3ac>
 80271c0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80271c4:	029b      	lsls	r3, r3, #10
 80271c6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80271ca:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80271ce:	e000      	b.n	80271d2 <lfs_dir_orphaningcommit+0x3ae>
 80271d0:	2300      	movs	r3, #0
 80271d2:	647b      	str	r3, [r7, #68]	; 0x44
 80271d4:	2300      	movs	r3, #0
 80271d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80271d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80271dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80271de:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80271e2:	653b      	str	r3, [r7, #80]	; 0x50
 80271e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80271e8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80271ec:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80271f0:	2000      	movs	r0, #0
 80271f2:	9001      	str	r0, [sp, #4]
 80271f4:	2002      	movs	r0, #2
 80271f6:	9000      	str	r0, [sp, #0]
 80271f8:	68f8      	ldr	r0, [r7, #12]
 80271fa:	f7ff fb5d 	bl	80268b8 <lfs_dir_relocatingcommit>
 80271fe:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8027202:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027206:	4618      	mov	r0, r3
 8027208:	f7fc fdd3 	bl	8023db2 <lfs_pair_fromle32>
            if (state < 0) {
 802720c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8027210:	2b00      	cmp	r3, #0
 8027212:	da02      	bge.n	802721a <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8027214:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8027218:	e0f1      	b.n	80273fe <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 802721a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802721e:	2b01      	cmp	r3, #1
 8027220:	d113      	bne.n	802724a <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8027222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8027224:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 8027228:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802722a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 802722e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8027232:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8027236:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027238:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802723a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802723e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8027242:	2301      	movs	r3, #1
 8027244:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8027248:	e0cd      	b.n	80273e6 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 802724a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 802724e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8027252:	4619      	mov	r1, r3
 8027254:	68f8      	ldr	r0, [r7, #12]
 8027256:	f002 fd8d 	bl	8029d74 <lfs_fs_pred>
 802725a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 802725e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8027262:	2b00      	cmp	r3, #0
 8027264:	d007      	beq.n	8027276 <lfs_dir_orphaningcommit+0x452>
 8027266:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802726a:	f113 0f02 	cmn.w	r3, #2
 802726e:	d002      	beq.n	8027276 <lfs_dir_orphaningcommit+0x452>
            return err;
 8027270:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8027274:	e0c3      	b.n	80273fe <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8027276:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 802727a:	2b00      	cmp	r3, #0
 802727c:	d01a      	beq.n	80272b4 <lfs_dir_orphaningcommit+0x490>
 802727e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8027282:	f113 0f02 	cmn.w	r3, #2
 8027286:	d115      	bne.n	80272b4 <lfs_dir_orphaningcommit+0x490>
 8027288:	4b08      	ldr	r3, [pc, #32]	; (80272ac <lfs_dir_orphaningcommit+0x488>)
 802728a:	4a09      	ldr	r2, [pc, #36]	; (80272b0 <lfs_dir_orphaningcommit+0x48c>)
 802728c:	f44f 6111 	mov.w	r1, #2320	; 0x910
 8027290:	4803      	ldr	r0, [pc, #12]	; (80272a0 <lfs_dir_orphaningcommit+0x47c>)
 8027292:	f005 f84b 	bl	802c32c <__assert_func>
 8027296:	bf00      	nop
 8027298:	000ffc08 	.word	0x000ffc08
 802729c:	0803342c 	.word	0x0803342c
 80272a0:	08033318 	.word	0x08033318
 80272a4:	080335ac 	.word	0x080335ac
 80272a8:	080335e8 	.word	0x080335e8
 80272ac:	0803362c 	.word	0x0803362c
 80272b0:	0803462c 	.word	0x0803462c

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 80272b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80272b8:	f113 0f02 	cmn.w	r3, #2
 80272bc:	f000 8093 	beq.w	80273e6 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 80272c0:	68fb      	ldr	r3, [r7, #12]
 80272c2:	3330      	adds	r3, #48	; 0x30
 80272c4:	4618      	mov	r0, r3
 80272c6:	f7fc fe76 	bl	8023fb6 <lfs_gstate_hasorphans>
 80272ca:	4603      	mov	r3, r0
 80272cc:	2b00      	cmp	r3, #0
 80272ce:	d011      	beq.n	80272f4 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 80272d0:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80272d4:	425b      	negs	r3, r3
 80272d6:	b2db      	uxtb	r3, r3
 80272d8:	b25b      	sxtb	r3, r3
 80272da:	4619      	mov	r1, r3
 80272dc:	68f8      	ldr	r0, [r7, #12]
 80272de:	f002 fe29 	bl	8029f34 <lfs_fs_preporphans>
 80272e2:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 80272e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80272ea:	2b00      	cmp	r3, #0
 80272ec:	d002      	beq.n	80272f4 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 80272ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80272f2:	e084      	b.n	80273fe <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80272f4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80272f8:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80272fc:	68fb      	ldr	r3, [r7, #12]
 80272fe:	3330      	adds	r3, #48	; 0x30
 8027300:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8027304:	4611      	mov	r1, r2
 8027306:	4618      	mov	r0, r3
 8027308:	f7fc fe8a 	bl	8024020 <lfs_gstate_hasmovehere>
 802730c:	4603      	mov	r3, r0
 802730e:	2b00      	cmp	r3, #0
 8027310:	d01c      	beq.n	802734c <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8027312:	68fb      	ldr	r3, [r7, #12]
 8027314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027316:	4618      	mov	r0, r3
 8027318:	f7fc fdda 	bl	8023ed0 <lfs_tag_id>
 802731c:	4603      	mov	r3, r0
 802731e:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8027322:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8027324:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027326:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 802732a:	4837      	ldr	r0, [pc, #220]	; (8027408 <lfs_dir_orphaningcommit+0x5e4>)
 802732c:	9002      	str	r0, [sp, #8]
 802732e:	9201      	str	r2, [sp, #4]
 8027330:	9300      	str	r3, [sp, #0]
 8027332:	460b      	mov	r3, r1
 8027334:	f640 1221 	movw	r2, #2337	; 0x921
 8027338:	4934      	ldr	r1, [pc, #208]	; (802740c <lfs_dir_orphaningcommit+0x5e8>)
 802733a:	4835      	ldr	r0, [pc, #212]	; (8027410 <lfs_dir_orphaningcommit+0x5ec>)
 802733c:	f006 f830 	bl	802d3a0 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8027340:	2200      	movs	r2, #0
 8027342:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8027346:	68f8      	ldr	r0, [r7, #12]
 8027348:	f002 fe2e 	bl	8029fa8 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 802734c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802734e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 8027352:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027354:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 8027358:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802735c:	4618      	mov	r0, r3
 802735e:	f7fc fd42 	bl	8023de6 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8027362:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8027366:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802736a:	4293      	cmp	r3, r2
 802736c:	d007      	beq.n	802737e <lfs_dir_orphaningcommit+0x55a>
 802736e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8027372:	029b      	lsls	r3, r3, #10
 8027374:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8027378:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802737c:	e000      	b.n	8027380 <lfs_dir_orphaningcommit+0x55c>
 802737e:	2300      	movs	r3, #0
 8027380:	627b      	str	r3, [r7, #36]	; 0x24
 8027382:	2300      	movs	r3, #0
 8027384:	62bb      	str	r3, [r7, #40]	; 0x28
 8027386:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 802738a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 802738e:	051a      	lsls	r2, r3, #20
 8027390:	4b20      	ldr	r3, [pc, #128]	; (8027414 <lfs_dir_orphaningcommit+0x5f0>)
 8027392:	4313      	orrs	r3, r2
 8027394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8027396:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802739a:	633b      	str	r3, [r7, #48]	; 0x30
 802739c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80273a0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80273a4:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80273a8:	2000      	movs	r0, #0
 80273aa:	9001      	str	r0, [sp, #4]
 80273ac:	2002      	movs	r0, #2
 80273ae:	9000      	str	r0, [sp, #0]
 80273b0:	68f8      	ldr	r0, [r7, #12]
 80273b2:	f7ff fa81 	bl	80268b8 <lfs_dir_relocatingcommit>
 80273b6:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80273ba:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80273be:	4618      	mov	r0, r3
 80273c0:	f7fc fcf7 	bl	8023db2 <lfs_pair_fromle32>
            if (state < 0) {
 80273c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80273c8:	2b00      	cmp	r3, #0
 80273ca:	da02      	bge.n	80273d2 <lfs_dir_orphaningcommit+0x5ae>
                return state;
 80273cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80273d0:	e015      	b.n	80273fe <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 80273d2:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80273d6:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80273da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80273dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80273de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80273e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 80273e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80273ea:	2b01      	cmp	r3, #1
 80273ec:	f43f adfe 	beq.w	8026fec <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 80273f0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80273f4:	2b00      	cmp	r3, #0
 80273f6:	d001      	beq.n	80273fc <lfs_dir_orphaningcommit+0x5d8>
 80273f8:	2303      	movs	r3, #3
 80273fa:	e000      	b.n	80273fe <lfs_dir_orphaningcommit+0x5da>
 80273fc:	2300      	movs	r3, #0
}
 80273fe:	4618      	mov	r0, r3
 8027400:	37e0      	adds	r7, #224	; 0xe0
 8027402:	46bd      	mov	sp, r7
 8027404:	bdb0      	pop	{r4, r5, r7, pc}
 8027406:	bf00      	nop
 8027408:	0803342c 	.word	0x0803342c
 802740c:	08033318 	.word	0x08033318
 8027410:	080335e8 	.word	0x080335e8
 8027414:	000ffc08 	.word	0x000ffc08

08027418 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8027418:	b580      	push	{r7, lr}
 802741a:	b086      	sub	sp, #24
 802741c:	af00      	add	r7, sp, #0
 802741e:	60f8      	str	r0, [r7, #12]
 8027420:	60b9      	str	r1, [r7, #8]
 8027422:	607a      	str	r2, [r7, #4]
 8027424:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8027426:	683b      	ldr	r3, [r7, #0]
 8027428:	687a      	ldr	r2, [r7, #4]
 802742a:	68b9      	ldr	r1, [r7, #8]
 802742c:	68f8      	ldr	r0, [r7, #12]
 802742e:	f7ff fcf9 	bl	8026e24 <lfs_dir_orphaningcommit>
 8027432:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8027434:	697b      	ldr	r3, [r7, #20]
 8027436:	2b00      	cmp	r3, #0
 8027438:	da01      	bge.n	802743e <lfs_dir_commit+0x26>
        return orphans;
 802743a:	697b      	ldr	r3, [r7, #20]
 802743c:	e00d      	b.n	802745a <lfs_dir_commit+0x42>
    }

    if (orphans) {
 802743e:	697b      	ldr	r3, [r7, #20]
 8027440:	2b00      	cmp	r3, #0
 8027442:	d009      	beq.n	8027458 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8027444:	2100      	movs	r1, #0
 8027446:	68f8      	ldr	r0, [r7, #12]
 8027448:	f002 fe4e 	bl	802a0e8 <lfs_fs_deorphan>
 802744c:	6138      	str	r0, [r7, #16]
        if (err) {
 802744e:	693b      	ldr	r3, [r7, #16]
 8027450:	2b00      	cmp	r3, #0
 8027452:	d001      	beq.n	8027458 <lfs_dir_commit+0x40>
            return err;
 8027454:	693b      	ldr	r3, [r7, #16]
 8027456:	e000      	b.n	802745a <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8027458:	2300      	movs	r3, #0
}
 802745a:	4618      	mov	r0, r3
 802745c:	3718      	adds	r7, #24
 802745e:	46bd      	mov	sp, r7
 8027460:	bd80      	pop	{r7, pc}
	...

08027464 <lfs_rawmkdir>:
#endif


/// Top level directory operations ///
#ifndef LFS_READONLY
static int lfs_rawmkdir(lfs_t *lfs, const char *path) {
 8027464:	b5b0      	push	{r4, r5, r7, lr}
 8027466:	b0b8      	sub	sp, #224	; 0xe0
 8027468:	af00      	add	r7, sp, #0
 802746a:	6078      	str	r0, [r7, #4]
 802746c:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 802746e:	6878      	ldr	r0, [r7, #4]
 8027470:	f002 ffde 	bl	802a430 <lfs_fs_forceconsistency>
 8027474:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 8027478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802747c:	2b00      	cmp	r3, #0
 802747e:	d002      	beq.n	8027486 <lfs_rawmkdir+0x22>
        return err;
 8027480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027484:	e128      	b.n	80276d8 <lfs_rawmkdir+0x274>
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
 8027486:	687b      	ldr	r3, [r7, #4]
 8027488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802748a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 802748e:	f107 00ae 	add.w	r0, r7, #174	; 0xae
 8027492:	463a      	mov	r2, r7
 8027494:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8027498:	f103 0108 	add.w	r1, r3, #8
 802749c:	4603      	mov	r3, r0
 802749e:	6878      	ldr	r0, [r7, #4]
 80274a0:	f7fe fab2 	bl	8025a08 <lfs_dir_find>
 80274a4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 80274a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80274ac:	f113 0f02 	cmn.w	r3, #2
 80274b0:	d105      	bne.n	80274be <lfs_rawmkdir+0x5a>
 80274b2:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80274b6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80274ba:	4293      	cmp	r3, r2
 80274bc:	d109      	bne.n	80274d2 <lfs_rawmkdir+0x6e>
        return (err < 0) ? err : LFS_ERR_EXIST;
 80274be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80274c2:	2b00      	cmp	r3, #0
 80274c4:	da02      	bge.n	80274cc <lfs_rawmkdir+0x68>
 80274c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80274ca:	e105      	b.n	80276d8 <lfs_rawmkdir+0x274>
 80274cc:	f06f 0310 	mvn.w	r3, #16
 80274d0:	e102      	b.n	80276d8 <lfs_rawmkdir+0x274>
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
 80274d2:	683b      	ldr	r3, [r7, #0]
 80274d4:	4618      	mov	r0, r3
 80274d6:	f7e8 fee3 	bl	80102a0 <strlen>
 80274da:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    if (nlen > lfs->name_max) {
 80274de:	687b      	ldr	r3, [r7, #4]
 80274e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80274e2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80274e6:	429a      	cmp	r2, r3
 80274e8:	d902      	bls.n	80274f0 <lfs_rawmkdir+0x8c>
        return LFS_ERR_NAMETOOLONG;
 80274ea:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80274ee:	e0f3      	b.n	80276d8 <lfs_rawmkdir+0x274>
    }

    // build up new directory
    lfs_alloc_ack(lfs);
 80274f0:	6878      	ldr	r0, [r7, #4]
 80274f2:	f7fc ff1d 	bl	8024330 <lfs_alloc_ack>
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
 80274f6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80274fa:	4619      	mov	r1, r3
 80274fc:	6878      	ldr	r0, [r7, #4]
 80274fe:	f7fe fd6f 	bl	8025fe0 <lfs_dir_alloc>
 8027502:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 8027506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802750a:	2b00      	cmp	r3, #0
 802750c:	d002      	beq.n	8027514 <lfs_rawmkdir+0xb0>
        return err;
 802750e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027512:	e0e1      	b.n	80276d8 <lfs_rawmkdir+0x274>
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
 8027514:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8027518:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 802751c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802751e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027520:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8027524:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
 8027528:	e012      	b.n	8027550 <lfs_rawmkdir+0xec>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 802752a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802752e:	f103 0218 	add.w	r2, r3, #24
 8027532:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8027536:	4619      	mov	r1, r3
 8027538:	6878      	ldr	r0, [r7, #4]
 802753a:	f7fe f953 	bl	80257e4 <lfs_dir_fetch>
 802753e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8027542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027546:	2b00      	cmp	r3, #0
 8027548:	d002      	beq.n	8027550 <lfs_rawmkdir+0xec>
            return err;
 802754a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802754e:	e0c3      	b.n	80276d8 <lfs_rawmkdir+0x274>
    while (pred.split) {
 8027550:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8027554:	2b00      	cmp	r3, #0
 8027556:	d1e8      	bne.n	802752a <lfs_rawmkdir+0xc6>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
 8027558:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802755c:	3318      	adds	r3, #24
 802755e:	4618      	mov	r0, r3
 8027560:	f7fc fc41 	bl	8023de6 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 8027564:	4b5e      	ldr	r3, [pc, #376]	; (80276e0 <lfs_rawmkdir+0x27c>)
 8027566:	667b      	str	r3, [r7, #100]	; 0x64
 8027568:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802756c:	3318      	adds	r3, #24
 802756e:	66bb      	str	r3, [r7, #104]	; 0x68
 8027570:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8027574:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8027578:	2301      	movs	r3, #1
 802757a:	6878      	ldr	r0, [r7, #4]
 802757c:	f7ff ff4c 	bl	8027418 <lfs_dir_commit>
 8027580:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
 8027584:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8027588:	3318      	adds	r3, #24
 802758a:	4618      	mov	r0, r3
 802758c:	f7fc fc11 	bl	8023db2 <lfs_pair_fromle32>
    if (err) {
 8027590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027594:	2b00      	cmp	r3, #0
 8027596:	d002      	beq.n	802759e <lfs_rawmkdir+0x13a>
        return err;
 8027598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802759c:	e09c      	b.n	80276d8 <lfs_rawmkdir+0x274>
    }

    // current block not end of list?
    if (cwd.m.split) {
 802759e:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80275a2:	2b00      	cmp	r3, #0
 80275a4:	d04c      	beq.n	8027640 <lfs_rawmkdir+0x1dc>
        // update tails, this creates a desync
        err = lfs_fs_preporphans(lfs, +1);
 80275a6:	2101      	movs	r1, #1
 80275a8:	6878      	ldr	r0, [r7, #4]
 80275aa:	f002 fcc3 	bl	8029f34 <lfs_fs_preporphans>
 80275ae:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 80275b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80275b6:	2b00      	cmp	r3, #0
 80275b8:	d002      	beq.n	80275c0 <lfs_rawmkdir+0x15c>
            return err;
 80275ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80275be:	e08b      	b.n	80276d8 <lfs_rawmkdir+0x274>

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
 80275c0:	2300      	movs	r3, #0
 80275c2:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
        cwd.id = 0;
 80275c6:	2300      	movs	r3, #0
 80275c8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        lfs->mlist = &cwd;
 80275cc:	687b      	ldr	r3, [r7, #4]
 80275ce:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80275d2:	629a      	str	r2, [r3, #40]	; 0x28

        lfs_pair_tole32(dir.pair);
 80275d4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80275d8:	4618      	mov	r0, r3
 80275da:	f7fc fc04 	bl	8023de6 <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 80275de:	4b40      	ldr	r3, [pc, #256]	; (80276e0 <lfs_rawmkdir+0x27c>)
 80275e0:	617b      	str	r3, [r7, #20]
 80275e2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80275e6:	61bb      	str	r3, [r7, #24]
 80275e8:	f107 0214 	add.w	r2, r7, #20
 80275ec:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80275f0:	2301      	movs	r3, #1
 80275f2:	6878      	ldr	r0, [r7, #4]
 80275f4:	f7ff ff10 	bl	8027418 <lfs_dir_commit>
 80275f8:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
 80275fc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027600:	4618      	mov	r0, r3
 8027602:	f7fc fbd6 	bl	8023db2 <lfs_pair_fromle32>
        if (err) {
 8027606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802760a:	2b00      	cmp	r3, #0
 802760c:	d006      	beq.n	802761c <lfs_rawmkdir+0x1b8>
            lfs->mlist = cwd.next;
 802760e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8027612:	687b      	ldr	r3, [r7, #4]
 8027614:	629a      	str	r2, [r3, #40]	; 0x28
            return err;
 8027616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802761a:	e05d      	b.n	80276d8 <lfs_rawmkdir+0x274>
        }

        lfs->mlist = cwd.next;
 802761c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8027620:	687b      	ldr	r3, [r7, #4]
 8027622:	629a      	str	r2, [r3, #40]	; 0x28
        err = lfs_fs_preporphans(lfs, -1);
 8027624:	f04f 31ff 	mov.w	r1, #4294967295
 8027628:	6878      	ldr	r0, [r7, #4]
 802762a:	f002 fc83 	bl	8029f34 <lfs_fs_preporphans>
 802762e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8027632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027636:	2b00      	cmp	r3, #0
 8027638:	d002      	beq.n	8027640 <lfs_rawmkdir+0x1dc>
            return err;
 802763a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802763e:	e04b      	b.n	80276d8 <lfs_rawmkdir+0x274>
        }
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
 8027640:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027644:	4618      	mov	r0, r3
 8027646:	f7fc fbce 	bl	8023de6 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 802764a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 802764e:	029b      	lsls	r3, r3, #10
 8027650:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8027654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027658:	63fb      	str	r3, [r7, #60]	; 0x3c
 802765a:	2300      	movs	r3, #0
 802765c:	643b      	str	r3, [r7, #64]	; 0x40
 802765e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8027662:	029a      	lsls	r2, r3, #10
 8027664:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8027668:	4313      	orrs	r3, r2
 802766a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802766e:	647b      	str	r3, [r7, #68]	; 0x44
 8027670:	683b      	ldr	r3, [r7, #0]
 8027672:	64bb      	str	r3, [r7, #72]	; 0x48
 8027674:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8027678:	029b      	lsls	r3, r3, #10
 802767a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802767e:	f043 0308 	orr.w	r3, r3, #8
 8027682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8027684:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027688:	653b      	str	r3, [r7, #80]	; 0x50
 802768a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 802768e:	f083 0301 	eor.w	r3, r3, #1
 8027692:	b2db      	uxtb	r3, r3
 8027694:	2b00      	cmp	r3, #0
 8027696:	d001      	beq.n	802769c <lfs_rawmkdir+0x238>
 8027698:	4b11      	ldr	r3, [pc, #68]	; (80276e0 <lfs_rawmkdir+0x27c>)
 802769a:	e000      	b.n	802769e <lfs_rawmkdir+0x23a>
 802769c:	2300      	movs	r3, #0
 802769e:	657b      	str	r3, [r7, #84]	; 0x54
 80276a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80276a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80276a6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80276aa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80276ae:	f103 0108 	add.w	r1, r3, #8
 80276b2:	2304      	movs	r3, #4
 80276b4:	6878      	ldr	r0, [r7, #4]
 80276b6:	f7ff feaf 	bl	8027418 <lfs_dir_commit>
 80276ba:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},
            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},
            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},
            {LFS_MKTAG_IF(!cwd.m.split,
                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
    lfs_pair_fromle32(dir.pair);
 80276be:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80276c2:	4618      	mov	r0, r3
 80276c4:	f7fc fb75 	bl	8023db2 <lfs_pair_fromle32>
    if (err) {
 80276c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80276cc:	2b00      	cmp	r3, #0
 80276ce:	d002      	beq.n	80276d6 <lfs_rawmkdir+0x272>
        return err;
 80276d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80276d4:	e000      	b.n	80276d8 <lfs_rawmkdir+0x274>
    }

    return 0;
 80276d6:	2300      	movs	r3, #0
}
 80276d8:	4618      	mov	r0, r3
 80276da:	37e0      	adds	r7, #224	; 0xe0
 80276dc:	46bd      	mov	sp, r7
 80276de:	bdb0      	pop	{r4, r5, r7, pc}
 80276e0:	600ffc08 	.word	0x600ffc08

080276e4 <lfs_dir_rawopen>:
#endif

static int lfs_dir_rawopen(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 80276e4:	b590      	push	{r4, r7, lr}
 80276e6:	b08d      	sub	sp, #52	; 0x34
 80276e8:	af02      	add	r7, sp, #8
 80276ea:	60f8      	str	r0, [r7, #12]
 80276ec:	60b9      	str	r1, [r7, #8]
 80276ee:	607a      	str	r2, [r7, #4]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 80276f0:	68bb      	ldr	r3, [r7, #8]
 80276f2:	f103 0108 	add.w	r1, r3, #8
 80276f6:	1d3a      	adds	r2, r7, #4
 80276f8:	2300      	movs	r3, #0
 80276fa:	68f8      	ldr	r0, [r7, #12]
 80276fc:	f7fe f984 	bl	8025a08 <lfs_dir_find>
 8027700:	6278      	str	r0, [r7, #36]	; 0x24
    if (tag < 0) {
 8027702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027704:	2b00      	cmp	r3, #0
 8027706:	da01      	bge.n	802770c <lfs_dir_rawopen+0x28>
        return tag;
 8027708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802770a:	e05e      	b.n	80277ca <lfs_dir_rawopen+0xe6>
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 802770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802770e:	4618      	mov	r0, r3
 8027710:	f7fc fbb4 	bl	8023e7c <lfs_tag_type3>
 8027714:	4603      	mov	r3, r0
 8027716:	2b02      	cmp	r3, #2
 8027718:	d002      	beq.n	8027720 <lfs_dir_rawopen+0x3c>
        return LFS_ERR_NOTDIR;
 802771a:	f06f 0313 	mvn.w	r3, #19
 802771e:	e054      	b.n	80277ca <lfs_dir_rawopen+0xe6>
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
 8027720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027722:	4618      	mov	r0, r3
 8027724:	f7fc fbd4 	bl	8023ed0 <lfs_tag_id>
 8027728:	4603      	mov	r3, r0
 802772a:	461a      	mov	r2, r3
 802772c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8027730:	429a      	cmp	r2, r3
 8027732:	d106      	bne.n	8027742 <lfs_dir_rawopen+0x5e>
        // handle root dir separately
        pair[0] = lfs->root[0];
 8027734:	68fb      	ldr	r3, [r7, #12]
 8027736:	6a1b      	ldr	r3, [r3, #32]
 8027738:	617b      	str	r3, [r7, #20]
        pair[1] = lfs->root[1];
 802773a:	68fb      	ldr	r3, [r7, #12]
 802773c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802773e:	61bb      	str	r3, [r7, #24]
 8027740:	e01f      	b.n	8027782 <lfs_dir_rawopen+0x9e>
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8027742:	68bb      	ldr	r3, [r7, #8]
 8027744:	f103 0408 	add.w	r4, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8027748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802774a:	4618      	mov	r0, r3
 802774c:	f7fc fbc0 	bl	8023ed0 <lfs_tag_id>
 8027750:	4603      	mov	r3, r0
 8027752:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8027754:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8027758:	f043 0308 	orr.w	r3, r3, #8
 802775c:	f107 0214 	add.w	r2, r7, #20
 8027760:	9200      	str	r2, [sp, #0]
 8027762:	4a1c      	ldr	r2, [pc, #112]	; (80277d4 <lfs_dir_rawopen+0xf0>)
 8027764:	4621      	mov	r1, r4
 8027766:	68f8      	ldr	r0, [r7, #12]
 8027768:	f7fc ff9c 	bl	80246a4 <lfs_dir_get>
 802776c:	6238      	str	r0, [r7, #32]
        if (res < 0) {
 802776e:	6a3b      	ldr	r3, [r7, #32]
 8027770:	2b00      	cmp	r3, #0
 8027772:	da01      	bge.n	8027778 <lfs_dir_rawopen+0x94>
            return res;
 8027774:	6a3b      	ldr	r3, [r7, #32]
 8027776:	e028      	b.n	80277ca <lfs_dir_rawopen+0xe6>
        }
        lfs_pair_fromle32(pair);
 8027778:	f107 0314 	add.w	r3, r7, #20
 802777c:	4618      	mov	r0, r3
 802777e:	f7fc fb18 	bl	8023db2 <lfs_pair_fromle32>
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 8027782:	68bb      	ldr	r3, [r7, #8]
 8027784:	3308      	adds	r3, #8
 8027786:	f107 0214 	add.w	r2, r7, #20
 802778a:	4619      	mov	r1, r3
 802778c:	68f8      	ldr	r0, [r7, #12]
 802778e:	f7fe f829 	bl	80257e4 <lfs_dir_fetch>
 8027792:	61f8      	str	r0, [r7, #28]
    if (err) {
 8027794:	69fb      	ldr	r3, [r7, #28]
 8027796:	2b00      	cmp	r3, #0
 8027798:	d001      	beq.n	802779e <lfs_dir_rawopen+0xba>
        return err;
 802779a:	69fb      	ldr	r3, [r7, #28]
 802779c:	e015      	b.n	80277ca <lfs_dir_rawopen+0xe6>
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
 802779e:	68bb      	ldr	r3, [r7, #8]
 80277a0:	689a      	ldr	r2, [r3, #8]
 80277a2:	68bb      	ldr	r3, [r7, #8]
 80277a4:	62da      	str	r2, [r3, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
 80277a6:	68bb      	ldr	r3, [r7, #8]
 80277a8:	68da      	ldr	r2, [r3, #12]
 80277aa:	68bb      	ldr	r3, [r7, #8]
 80277ac:	631a      	str	r2, [r3, #48]	; 0x30
    dir->id = 0;
 80277ae:	68bb      	ldr	r3, [r7, #8]
 80277b0:	2200      	movs	r2, #0
 80277b2:	809a      	strh	r2, [r3, #4]
    dir->pos = 0;
 80277b4:	68bb      	ldr	r3, [r7, #8]
 80277b6:	2200      	movs	r2, #0
 80277b8:	629a      	str	r2, [r3, #40]	; 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
 80277ba:	68bb      	ldr	r3, [r7, #8]
 80277bc:	2202      	movs	r2, #2
 80277be:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 80277c0:	68b9      	ldr	r1, [r7, #8]
 80277c2:	68f8      	ldr	r0, [r7, #12]
 80277c4:	f7fc fd6b 	bl	802429e <lfs_mlist_append>

    return 0;
 80277c8:	2300      	movs	r3, #0
}
 80277ca:	4618      	mov	r0, r3
 80277cc:	372c      	adds	r7, #44	; 0x2c
 80277ce:	46bd      	mov	sp, r7
 80277d0:	bd90      	pop	{r4, r7, pc}
 80277d2:	bf00      	nop
 80277d4:	700ffc00 	.word	0x700ffc00

080277d8 <lfs_dir_rawclose>:

static int lfs_dir_rawclose(lfs_t *lfs, lfs_dir_t *dir) {
 80277d8:	b580      	push	{r7, lr}
 80277da:	b082      	sub	sp, #8
 80277dc:	af00      	add	r7, sp, #0
 80277de:	6078      	str	r0, [r7, #4]
 80277e0:	6039      	str	r1, [r7, #0]
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 80277e2:	6839      	ldr	r1, [r7, #0]
 80277e4:	6878      	ldr	r0, [r7, #4]
 80277e6:	f7fc fd38 	bl	802425a <lfs_mlist_remove>

    return 0;
 80277ea:	2300      	movs	r3, #0
}
 80277ec:	4618      	mov	r0, r3
 80277ee:	3708      	adds	r7, #8
 80277f0:	46bd      	mov	sp, r7
 80277f2:	bd80      	pop	{r7, pc}

080277f4 <lfs_dir_rawread>:

static int lfs_dir_rawread(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 80277f4:	b580      	push	{r7, lr}
 80277f6:	b086      	sub	sp, #24
 80277f8:	af00      	add	r7, sp, #0
 80277fa:	60f8      	str	r0, [r7, #12]
 80277fc:	60b9      	str	r1, [r7, #8]
 80277fe:	607a      	str	r2, [r7, #4]
    memset(info, 0, sizeof(*info));
 8027800:	f44f 7284 	mov.w	r2, #264	; 0x108
 8027804:	2100      	movs	r1, #0
 8027806:	6878      	ldr	r0, [r7, #4]
 8027808:	f005 ff60 	bl	802d6cc <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
 802780c:	68bb      	ldr	r3, [r7, #8]
 802780e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027810:	2b00      	cmp	r3, #0
 8027812:	d110      	bne.n	8027836 <lfs_dir_rawread+0x42>
        info->type = LFS_TYPE_DIR;
 8027814:	687b      	ldr	r3, [r7, #4]
 8027816:	2202      	movs	r2, #2
 8027818:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, ".");
 802781a:	687b      	ldr	r3, [r7, #4]
 802781c:	3308      	adds	r3, #8
 802781e:	4935      	ldr	r1, [pc, #212]	; (80278f4 <lfs_dir_rawread+0x100>)
 8027820:	461a      	mov	r2, r3
 8027822:	460b      	mov	r3, r1
 8027824:	881b      	ldrh	r3, [r3, #0]
 8027826:	8013      	strh	r3, [r2, #0]
        dir->pos += 1;
 8027828:	68bb      	ldr	r3, [r7, #8]
 802782a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802782c:	1c5a      	adds	r2, r3, #1
 802782e:	68bb      	ldr	r3, [r7, #8]
 8027830:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 8027832:	2301      	movs	r3, #1
 8027834:	e05a      	b.n	80278ec <lfs_dir_rawread+0xf8>
    } else if (dir->pos == 1) {
 8027836:	68bb      	ldr	r3, [r7, #8]
 8027838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802783a:	2b01      	cmp	r3, #1
 802783c:	d110      	bne.n	8027860 <lfs_dir_rawread+0x6c>
        info->type = LFS_TYPE_DIR;
 802783e:	687b      	ldr	r3, [r7, #4]
 8027840:	2202      	movs	r2, #2
 8027842:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, "..");
 8027844:	687b      	ldr	r3, [r7, #4]
 8027846:	3308      	adds	r3, #8
 8027848:	4a2b      	ldr	r2, [pc, #172]	; (80278f8 <lfs_dir_rawread+0x104>)
 802784a:	8811      	ldrh	r1, [r2, #0]
 802784c:	7892      	ldrb	r2, [r2, #2]
 802784e:	8019      	strh	r1, [r3, #0]
 8027850:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 8027852:	68bb      	ldr	r3, [r7, #8]
 8027854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027856:	1c5a      	adds	r2, r3, #1
 8027858:	68bb      	ldr	r3, [r7, #8]
 802785a:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 802785c:	2301      	movs	r3, #1
 802785e:	e045      	b.n	80278ec <lfs_dir_rawread+0xf8>
    }

    while (true) {
        if (dir->id == dir->m.count) {
 8027860:	68bb      	ldr	r3, [r7, #8]
 8027862:	889a      	ldrh	r2, [r3, #4]
 8027864:	68bb      	ldr	r3, [r7, #8]
 8027866:	8b9b      	ldrh	r3, [r3, #28]
 8027868:	429a      	cmp	r2, r3
 802786a:	d11a      	bne.n	80278a2 <lfs_dir_rawread+0xae>
            if (!dir->m.split) {
 802786c:	68bb      	ldr	r3, [r7, #8]
 802786e:	7fdb      	ldrb	r3, [r3, #31]
 8027870:	f083 0301 	eor.w	r3, r3, #1
 8027874:	b2db      	uxtb	r3, r3
 8027876:	2b00      	cmp	r3, #0
 8027878:	d001      	beq.n	802787e <lfs_dir_rawread+0x8a>
                return false;
 802787a:	2300      	movs	r3, #0
 802787c:	e036      	b.n	80278ec <lfs_dir_rawread+0xf8>
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 802787e:	68bb      	ldr	r3, [r7, #8]
 8027880:	f103 0108 	add.w	r1, r3, #8
 8027884:	68bb      	ldr	r3, [r7, #8]
 8027886:	3320      	adds	r3, #32
 8027888:	461a      	mov	r2, r3
 802788a:	68f8      	ldr	r0, [r7, #12]
 802788c:	f7fd ffaa 	bl	80257e4 <lfs_dir_fetch>
 8027890:	6178      	str	r0, [r7, #20]
            if (err) {
 8027892:	697b      	ldr	r3, [r7, #20]
 8027894:	2b00      	cmp	r3, #0
 8027896:	d001      	beq.n	802789c <lfs_dir_rawread+0xa8>
                return err;
 8027898:	697b      	ldr	r3, [r7, #20]
 802789a:	e027      	b.n	80278ec <lfs_dir_rawread+0xf8>
            }

            dir->id = 0;
 802789c:	68bb      	ldr	r3, [r7, #8]
 802789e:	2200      	movs	r2, #0
 80278a0:	809a      	strh	r2, [r3, #4]
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 80278a2:	68bb      	ldr	r3, [r7, #8]
 80278a4:	f103 0108 	add.w	r1, r3, #8
 80278a8:	68bb      	ldr	r3, [r7, #8]
 80278aa:	889a      	ldrh	r2, [r3, #4]
 80278ac:	687b      	ldr	r3, [r7, #4]
 80278ae:	68f8      	ldr	r0, [r7, #12]
 80278b0:	f7fd ffe6 	bl	8025880 <lfs_dir_getinfo>
 80278b4:	6138      	str	r0, [r7, #16]
        if (err && err != LFS_ERR_NOENT) {
 80278b6:	693b      	ldr	r3, [r7, #16]
 80278b8:	2b00      	cmp	r3, #0
 80278ba:	d005      	beq.n	80278c8 <lfs_dir_rawread+0xd4>
 80278bc:	693b      	ldr	r3, [r7, #16]
 80278be:	f113 0f02 	cmn.w	r3, #2
 80278c2:	d001      	beq.n	80278c8 <lfs_dir_rawread+0xd4>
            return err;
 80278c4:	693b      	ldr	r3, [r7, #16]
 80278c6:	e011      	b.n	80278ec <lfs_dir_rawread+0xf8>
        }

        dir->id += 1;
 80278c8:	68bb      	ldr	r3, [r7, #8]
 80278ca:	889b      	ldrh	r3, [r3, #4]
 80278cc:	3301      	adds	r3, #1
 80278ce:	b29a      	uxth	r2, r3
 80278d0:	68bb      	ldr	r3, [r7, #8]
 80278d2:	809a      	strh	r2, [r3, #4]
        if (err != LFS_ERR_NOENT) {
 80278d4:	693b      	ldr	r3, [r7, #16]
 80278d6:	f113 0f02 	cmn.w	r3, #2
 80278da:	d100      	bne.n	80278de <lfs_dir_rawread+0xea>
    while (true) {
 80278dc:	e7c0      	b.n	8027860 <lfs_dir_rawread+0x6c>
            break;
 80278de:	bf00      	nop
        }
    }

    dir->pos += 1;
 80278e0:	68bb      	ldr	r3, [r7, #8]
 80278e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80278e4:	1c5a      	adds	r2, r3, #1
 80278e6:	68bb      	ldr	r3, [r7, #8]
 80278e8:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 80278ea:	2301      	movs	r3, #1
}
 80278ec:	4618      	mov	r0, r3
 80278ee:	3718      	adds	r7, #24
 80278f0:	46bd      	mov	sp, r7
 80278f2:	bd80      	pop	{r7, pc}
 80278f4:	0803347c 	.word	0x0803347c
 80278f8:	08033480 	.word	0x08033480

080278fc <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 80278fc:	b590      	push	{r4, r7, lr}
 80278fe:	b087      	sub	sp, #28
 8027900:	af00      	add	r7, sp, #0
 8027902:	6078      	str	r0, [r7, #4]
 8027904:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8027906:	683b      	ldr	r3, [r7, #0]
 8027908:	681b      	ldr	r3, [r3, #0]
 802790a:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 802790c:	687b      	ldr	r3, [r7, #4]
 802790e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8027910:	69db      	ldr	r3, [r3, #28]
 8027912:	3b08      	subs	r3, #8
 8027914:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8027916:	697a      	ldr	r2, [r7, #20]
 8027918:	693b      	ldr	r3, [r7, #16]
 802791a:	fbb2 f3f3 	udiv	r3, r2, r3
 802791e:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8027920:	68fb      	ldr	r3, [r7, #12]
 8027922:	2b00      	cmp	r3, #0
 8027924:	d101      	bne.n	802792a <lfs_ctz_index+0x2e>
        return 0;
 8027926:	2300      	movs	r3, #0
 8027928:	e01c      	b.n	8027964 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 802792a:	68fb      	ldr	r3, [r7, #12]
 802792c:	3b01      	subs	r3, #1
 802792e:	4618      	mov	r0, r3
 8027930:	f7fb fe0e 	bl	8023550 <lfs_popc>
 8027934:	4603      	mov	r3, r0
 8027936:	3302      	adds	r3, #2
 8027938:	009b      	lsls	r3, r3, #2
 802793a:	697a      	ldr	r2, [r7, #20]
 802793c:	1ad2      	subs	r2, r2, r3
 802793e:	693b      	ldr	r3, [r7, #16]
 8027940:	fbb2 f3f3 	udiv	r3, r2, r3
 8027944:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8027946:	693b      	ldr	r3, [r7, #16]
 8027948:	68fa      	ldr	r2, [r7, #12]
 802794a:	fb02 f303 	mul.w	r3, r2, r3
 802794e:	697a      	ldr	r2, [r7, #20]
 8027950:	1ad4      	subs	r4, r2, r3
 8027952:	68f8      	ldr	r0, [r7, #12]
 8027954:	f7fb fdfc 	bl	8023550 <lfs_popc>
 8027958:	4603      	mov	r3, r0
 802795a:	009b      	lsls	r3, r3, #2
 802795c:	1ae2      	subs	r2, r4, r3
 802795e:	683b      	ldr	r3, [r7, #0]
 8027960:	601a      	str	r2, [r3, #0]
    return i;
 8027962:	68fb      	ldr	r3, [r7, #12]
}
 8027964:	4618      	mov	r0, r3
 8027966:	371c      	adds	r7, #28
 8027968:	46bd      	mov	sp, r7
 802796a:	bd90      	pop	{r4, r7, pc}

0802796c <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 802796c:	b590      	push	{r4, r7, lr}
 802796e:	b08f      	sub	sp, #60	; 0x3c
 8027970:	af04      	add	r7, sp, #16
 8027972:	60f8      	str	r0, [r7, #12]
 8027974:	60b9      	str	r1, [r7, #8]
 8027976:	607a      	str	r2, [r7, #4]
 8027978:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 802797a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802797c:	2b00      	cmp	r3, #0
 802797e:	d108      	bne.n	8027992 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8027980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027982:	f04f 32ff 	mov.w	r2, #4294967295
 8027986:	601a      	str	r2, [r3, #0]
        *off = 0;
 8027988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802798a:	2200      	movs	r2, #0
 802798c:	601a      	str	r2, [r3, #0]
        return 0;
 802798e:	2300      	movs	r3, #0
 8027990:	e053      	b.n	8027a3a <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8027992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027994:	3b01      	subs	r3, #1
 8027996:	617b      	str	r3, [r7, #20]
 8027998:	f107 0314 	add.w	r3, r7, #20
 802799c:	4619      	mov	r1, r3
 802799e:	68f8      	ldr	r0, [r7, #12]
 80279a0:	f7ff ffac 	bl	80278fc <lfs_ctz_index>
 80279a4:	4603      	mov	r3, r0
 80279a6:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 80279a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80279ac:	4619      	mov	r1, r3
 80279ae:	68f8      	ldr	r0, [r7, #12]
 80279b0:	f7ff ffa4 	bl	80278fc <lfs_ctz_index>
 80279b4:	4603      	mov	r3, r0
 80279b6:	623b      	str	r3, [r7, #32]

    while (current > target) {
 80279b8:	e034      	b.n	8027a24 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 80279ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80279bc:	6a3b      	ldr	r3, [r7, #32]
 80279be:	1ad3      	subs	r3, r2, r3
 80279c0:	3301      	adds	r3, #1
 80279c2:	4618      	mov	r0, r3
 80279c4:	f7fb fda5 	bl	8023512 <lfs_npw2>
 80279c8:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 80279ca:	1e5c      	subs	r4, r3, #1
 80279cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80279ce:	f7fb fdb0 	bl	8023532 <lfs_ctz>
 80279d2:	4603      	mov	r3, r0
 80279d4:	4619      	mov	r1, r3
 80279d6:	4620      	mov	r0, r4
 80279d8:	f7fb fd64 	bl	80234a4 <lfs_min>
 80279dc:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 80279de:	683b      	ldr	r3, [r7, #0]
 80279e0:	69fa      	ldr	r2, [r7, #28]
 80279e2:	0092      	lsls	r2, r2, #2
 80279e4:	2104      	movs	r1, #4
 80279e6:	9103      	str	r1, [sp, #12]
 80279e8:	4639      	mov	r1, r7
 80279ea:	9102      	str	r1, [sp, #8]
 80279ec:	9201      	str	r2, [sp, #4]
 80279ee:	9300      	str	r3, [sp, #0]
 80279f0:	2304      	movs	r3, #4
 80279f2:	687a      	ldr	r2, [r7, #4]
 80279f4:	68b9      	ldr	r1, [r7, #8]
 80279f6:	68f8      	ldr	r0, [r7, #12]
 80279f8:	f7fb fe30 	bl	802365c <lfs_bd_read>
 80279fc:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 80279fe:	683b      	ldr	r3, [r7, #0]
 8027a00:	4618      	mov	r0, r3
 8027a02:	f7fb fdbf 	bl	8023584 <lfs_fromle32>
 8027a06:	4603      	mov	r3, r0
 8027a08:	603b      	str	r3, [r7, #0]
        if (err) {
 8027a0a:	69bb      	ldr	r3, [r7, #24]
 8027a0c:	2b00      	cmp	r3, #0
 8027a0e:	d001      	beq.n	8027a14 <lfs_ctz_find+0xa8>
            return err;
 8027a10:	69bb      	ldr	r3, [r7, #24]
 8027a12:	e012      	b.n	8027a3a <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8027a14:	2201      	movs	r2, #1
 8027a16:	69fb      	ldr	r3, [r7, #28]
 8027a18:	fa02 f303 	lsl.w	r3, r2, r3
 8027a1c:	461a      	mov	r2, r3
 8027a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027a20:	1a9b      	subs	r3, r3, r2
 8027a22:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8027a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027a26:	6a3b      	ldr	r3, [r7, #32]
 8027a28:	429a      	cmp	r2, r3
 8027a2a:	d8c6      	bhi.n	80279ba <lfs_ctz_find+0x4e>
    }

    *block = head;
 8027a2c:	683a      	ldr	r2, [r7, #0]
 8027a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027a30:	601a      	str	r2, [r3, #0]
    *off = pos;
 8027a32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8027a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027a36:	601a      	str	r2, [r3, #0]
    return 0;
 8027a38:	2300      	movs	r3, #0
}
 8027a3a:	4618      	mov	r0, r3
 8027a3c:	372c      	adds	r7, #44	; 0x2c
 8027a3e:	46bd      	mov	sp, r7
 8027a40:	bd90      	pop	{r4, r7, pc}
	...

08027a44 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8027a44:	b580      	push	{r7, lr}
 8027a46:	b092      	sub	sp, #72	; 0x48
 8027a48:	af04      	add	r7, sp, #16
 8027a4a:	60f8      	str	r0, [r7, #12]
 8027a4c:	60b9      	str	r1, [r7, #8]
 8027a4e:	607a      	str	r2, [r7, #4]
 8027a50:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8027a52:	f107 0320 	add.w	r3, r7, #32
 8027a56:	4619      	mov	r1, r3
 8027a58:	68f8      	ldr	r0, [r7, #12]
 8027a5a:	f7fc fc89 	bl	8024370 <lfs_alloc>
 8027a5e:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 8027a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027a62:	2b00      	cmp	r3, #0
 8027a64:	d001      	beq.n	8027a6a <lfs_ctz_extend+0x26>
            return err;
 8027a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027a68:	e0e9      	b.n	8027c3e <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8027a6a:	6a3b      	ldr	r3, [r7, #32]
 8027a6c:	4619      	mov	r1, r3
 8027a6e:	68f8      	ldr	r0, [r7, #12]
 8027a70:	f7fc f8e6 	bl	8023c40 <lfs_bd_erase>
 8027a74:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8027a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027a78:	2b00      	cmp	r3, #0
 8027a7a:	d006      	beq.n	8027a8a <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8027a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027a7e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8027a82:	f000 80cb 	beq.w	8027c1c <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8027a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027a88:	e0d9      	b.n	8027c3e <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8027a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027a8c:	2b00      	cmp	r3, #0
 8027a8e:	d107      	bne.n	8027aa0 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8027a90:	6a3a      	ldr	r2, [r7, #32]
 8027a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027a94:	601a      	str	r2, [r3, #0]
                *off = 0;
 8027a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8027a98:	2200      	movs	r2, #0
 8027a9a:	601a      	str	r2, [r3, #0]
                return 0;
 8027a9c:	2300      	movs	r3, #0
 8027a9e:	e0ce      	b.n	8027c3e <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8027aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027aa2:	3b01      	subs	r3, #1
 8027aa4:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8027aa6:	f107 031c 	add.w	r3, r7, #28
 8027aaa:	4619      	mov	r1, r3
 8027aac:	68f8      	ldr	r0, [r7, #12]
 8027aae:	f7ff ff25 	bl	80278fc <lfs_ctz_index>
 8027ab2:	4603      	mov	r3, r0
 8027ab4:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 8027ab6:	69fb      	ldr	r3, [r7, #28]
 8027ab8:	3301      	adds	r3, #1
 8027aba:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8027abc:	68fb      	ldr	r3, [r7, #12]
 8027abe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8027ac0:	69da      	ldr	r2, [r3, #28]
 8027ac2:	69fb      	ldr	r3, [r7, #28]
 8027ac4:	429a      	cmp	r2, r3
 8027ac6:	d044      	beq.n	8027b52 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8027ac8:	2300      	movs	r3, #0
 8027aca:	637b      	str	r3, [r7, #52]	; 0x34
 8027acc:	e035      	b.n	8027b3a <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8027ace:	69fa      	ldr	r2, [r7, #28]
 8027ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027ad2:	1ad2      	subs	r2, r2, r3
 8027ad4:	2301      	movs	r3, #1
 8027ad6:	9303      	str	r3, [sp, #12]
 8027ad8:	f107 0317 	add.w	r3, r7, #23
 8027adc:	9302      	str	r3, [sp, #8]
 8027ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027ae0:	9301      	str	r3, [sp, #4]
 8027ae2:	683b      	ldr	r3, [r7, #0]
 8027ae4:	9300      	str	r3, [sp, #0]
 8027ae6:	4613      	mov	r3, r2
 8027ae8:	687a      	ldr	r2, [r7, #4]
 8027aea:	2100      	movs	r1, #0
 8027aec:	68f8      	ldr	r0, [r7, #12]
 8027aee:	f7fb fdb5 	bl	802365c <lfs_bd_read>
 8027af2:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8027af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027af6:	2b00      	cmp	r3, #0
 8027af8:	d001      	beq.n	8027afe <lfs_ctz_extend+0xba>
                        return err;
 8027afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027afc:	e09f      	b.n	8027c3e <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 8027afe:	6a3b      	ldr	r3, [r7, #32]
 8027b00:	2201      	movs	r2, #1
 8027b02:	9203      	str	r2, [sp, #12]
 8027b04:	f107 0217 	add.w	r2, r7, #23
 8027b08:	9202      	str	r2, [sp, #8]
 8027b0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8027b0c:	9201      	str	r2, [sp, #4]
 8027b0e:	9300      	str	r3, [sp, #0]
 8027b10:	2301      	movs	r3, #1
 8027b12:	687a      	ldr	r2, [r7, #4]
 8027b14:	68b9      	ldr	r1, [r7, #8]
 8027b16:	68f8      	ldr	r0, [r7, #12]
 8027b18:	f7fb ffe6 	bl	8023ae8 <lfs_bd_prog>
 8027b1c:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8027b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027b20:	2b00      	cmp	r3, #0
 8027b22:	d007      	beq.n	8027b34 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8027b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027b26:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8027b2a:	d101      	bne.n	8027b30 <lfs_ctz_extend+0xec>
                            goto relocate;
 8027b2c:	bf00      	nop
                    goto relocate;
 8027b2e:	e075      	b.n	8027c1c <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8027b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 8027b32:	e084      	b.n	8027c3e <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8027b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027b36:	3301      	adds	r3, #1
 8027b38:	637b      	str	r3, [r7, #52]	; 0x34
 8027b3a:	69fb      	ldr	r3, [r7, #28]
 8027b3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8027b3e:	429a      	cmp	r2, r3
 8027b40:	d3c5      	bcc.n	8027ace <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8027b42:	6a3a      	ldr	r2, [r7, #32]
 8027b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027b46:	601a      	str	r2, [r3, #0]
                *off = noff;
 8027b48:	69fa      	ldr	r2, [r7, #28]
 8027b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8027b4c:	601a      	str	r2, [r3, #0]
                return 0;
 8027b4e:	2300      	movs	r3, #0
 8027b50:	e075      	b.n	8027c3e <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 8027b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027b54:	3301      	adds	r3, #1
 8027b56:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8027b58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8027b5a:	f7fb fcea 	bl	8023532 <lfs_ctz>
 8027b5e:	4603      	mov	r3, r0
 8027b60:	3301      	adds	r3, #1
 8027b62:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8027b64:	683b      	ldr	r3, [r7, #0]
 8027b66:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8027b68:	2300      	movs	r3, #0
 8027b6a:	633b      	str	r3, [r7, #48]	; 0x30
 8027b6c:	e049      	b.n	8027c02 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8027b6e:	69bb      	ldr	r3, [r7, #24]
 8027b70:	4618      	mov	r0, r3
 8027b72:	f7fb fd12 	bl	802359a <lfs_tole32>
 8027b76:	4603      	mov	r3, r0
 8027b78:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8027b7a:	6a3b      	ldr	r3, [r7, #32]
 8027b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8027b7e:	0092      	lsls	r2, r2, #2
 8027b80:	2104      	movs	r1, #4
 8027b82:	9103      	str	r1, [sp, #12]
 8027b84:	f107 0118 	add.w	r1, r7, #24
 8027b88:	9102      	str	r1, [sp, #8]
 8027b8a:	9201      	str	r2, [sp, #4]
 8027b8c:	9300      	str	r3, [sp, #0]
 8027b8e:	2301      	movs	r3, #1
 8027b90:	687a      	ldr	r2, [r7, #4]
 8027b92:	68b9      	ldr	r1, [r7, #8]
 8027b94:	68f8      	ldr	r0, [r7, #12]
 8027b96:	f7fb ffa7 	bl	8023ae8 <lfs_bd_prog>
 8027b9a:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8027b9c:	69bb      	ldr	r3, [r7, #24]
 8027b9e:	4618      	mov	r0, r3
 8027ba0:	f7fb fcf0 	bl	8023584 <lfs_fromle32>
 8027ba4:	4603      	mov	r3, r0
 8027ba6:	61bb      	str	r3, [r7, #24]
                if (err) {
 8027ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027baa:	2b00      	cmp	r3, #0
 8027bac:	d005      	beq.n	8027bba <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8027bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027bb0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8027bb4:	d034      	beq.n	8027c20 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8027bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027bb8:	e041      	b.n	8027c3e <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8027bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027bbc:	3b01      	subs	r3, #1
 8027bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8027bc0:	429a      	cmp	r2, r3
 8027bc2:	d01b      	beq.n	8027bfc <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8027bc4:	69bb      	ldr	r3, [r7, #24]
 8027bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8027bc8:	0092      	lsls	r2, r2, #2
 8027bca:	2104      	movs	r1, #4
 8027bcc:	9103      	str	r1, [sp, #12]
 8027bce:	f107 0118 	add.w	r1, r7, #24
 8027bd2:	9102      	str	r1, [sp, #8]
 8027bd4:	9201      	str	r2, [sp, #4]
 8027bd6:	9300      	str	r3, [sp, #0]
 8027bd8:	2304      	movs	r3, #4
 8027bda:	687a      	ldr	r2, [r7, #4]
 8027bdc:	2100      	movs	r1, #0
 8027bde:	68f8      	ldr	r0, [r7, #12]
 8027be0:	f7fb fd3c 	bl	802365c <lfs_bd_read>
 8027be4:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8027be6:	69bb      	ldr	r3, [r7, #24]
 8027be8:	4618      	mov	r0, r3
 8027bea:	f7fb fccb 	bl	8023584 <lfs_fromle32>
 8027bee:	4603      	mov	r3, r0
 8027bf0:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8027bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027bf4:	2b00      	cmp	r3, #0
 8027bf6:	d001      	beq.n	8027bfc <lfs_ctz_extend+0x1b8>
                        return err;
 8027bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027bfa:	e020      	b.n	8027c3e <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8027bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027bfe:	3301      	adds	r3, #1
 8027c00:	633b      	str	r3, [r7, #48]	; 0x30
 8027c02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8027c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027c06:	429a      	cmp	r2, r3
 8027c08:	d3b1      	bcc.n	8027b6e <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8027c0a:	6a3a      	ldr	r2, [r7, #32]
 8027c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027c0e:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8027c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027c12:	009a      	lsls	r2, r3, #2
 8027c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8027c16:	601a      	str	r2, [r3, #0]
            return 0;
 8027c18:	2300      	movs	r3, #0
 8027c1a:	e010      	b.n	8027c3e <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8027c1c:	bf00      	nop
 8027c1e:	e000      	b.n	8027c22 <lfs_ctz_extend+0x1de>
                        goto relocate;
 8027c20:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8027c22:	6a3b      	ldr	r3, [r7, #32]
 8027c24:	4a08      	ldr	r2, [pc, #32]	; (8027c48 <lfs_ctz_extend+0x204>)
 8027c26:	9200      	str	r2, [sp, #0]
 8027c28:	f640 22da 	movw	r2, #2778	; 0xada
 8027c2c:	4907      	ldr	r1, [pc, #28]	; (8027c4c <lfs_ctz_extend+0x208>)
 8027c2e:	4808      	ldr	r0, [pc, #32]	; (8027c50 <lfs_ctz_extend+0x20c>)
 8027c30:	f005 fbb6 	bl	802d3a0 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8027c34:	68b9      	ldr	r1, [r7, #8]
 8027c36:	68f8      	ldr	r0, [r7, #12]
 8027c38:	f7fb fcea 	bl	8023610 <lfs_cache_drop>
    while (true) {
 8027c3c:	e709      	b.n	8027a52 <lfs_ctz_extend+0xe>
    }
}
 8027c3e:	4618      	mov	r0, r3
 8027c40:	3738      	adds	r7, #56	; 0x38
 8027c42:	46bd      	mov	sp, r7
 8027c44:	bd80      	pop	{r7, pc}
 8027c46:	bf00      	nop
 8027c48:	0803342c 	.word	0x0803342c
 8027c4c:	08033318 	.word	0x08033318
 8027c50:	080334ac 	.word	0x080334ac

08027c54 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8027c54:	b580      	push	{r7, lr}
 8027c56:	b090      	sub	sp, #64	; 0x40
 8027c58:	af04      	add	r7, sp, #16
 8027c5a:	60f8      	str	r0, [r7, #12]
 8027c5c:	60b9      	str	r1, [r7, #8]
 8027c5e:	607a      	str	r2, [r7, #4]
 8027c60:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8027c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027c64:	2b00      	cmp	r3, #0
 8027c66:	d101      	bne.n	8027c6c <lfs_ctz_traverse+0x18>
        return 0;
 8027c68:	2300      	movs	r3, #0
 8027c6a:	e06b      	b.n	8027d44 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8027c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027c6e:	3b01      	subs	r3, #1
 8027c70:	61fb      	str	r3, [r7, #28]
 8027c72:	f107 031c 	add.w	r3, r7, #28
 8027c76:	4619      	mov	r1, r3
 8027c78:	68f8      	ldr	r0, [r7, #12]
 8027c7a:	f7ff fe3f 	bl	80278fc <lfs_ctz_index>
 8027c7e:	4603      	mov	r3, r0
 8027c80:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 8027c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8027c84:	6839      	ldr	r1, [r7, #0]
 8027c86:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8027c88:	4798      	blx	r3
 8027c8a:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8027c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027c8e:	2b00      	cmp	r3, #0
 8027c90:	d001      	beq.n	8027c96 <lfs_ctz_traverse+0x42>
            return err;
 8027c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027c94:	e056      	b.n	8027d44 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8027c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027c98:	2b00      	cmp	r3, #0
 8027c9a:	d101      	bne.n	8027ca0 <lfs_ctz_traverse+0x4c>
            return 0;
 8027c9c:	2300      	movs	r3, #0
 8027c9e:	e051      	b.n	8027d44 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8027ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027ca2:	f003 0301 	and.w	r3, r3, #1
 8027ca6:	f1c3 0302 	rsb	r3, r3, #2
 8027caa:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8027cac:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8027cae:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8027cb0:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8027cb2:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8027cb4:	9303      	str	r3, [sp, #12]
 8027cb6:	f107 0314 	add.w	r3, r7, #20
 8027cba:	9302      	str	r3, [sp, #8]
 8027cbc:	2300      	movs	r3, #0
 8027cbe:	9301      	str	r3, [sp, #4]
 8027cc0:	683b      	ldr	r3, [r7, #0]
 8027cc2:	9300      	str	r3, [sp, #0]
 8027cc4:	4613      	mov	r3, r2
 8027cc6:	687a      	ldr	r2, [r7, #4]
 8027cc8:	68b9      	ldr	r1, [r7, #8]
 8027cca:	68f8      	ldr	r0, [r7, #12]
 8027ccc:	f7fb fcc6 	bl	802365c <lfs_bd_read>
 8027cd0:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8027cd2:	697b      	ldr	r3, [r7, #20]
 8027cd4:	4618      	mov	r0, r3
 8027cd6:	f7fb fc55 	bl	8023584 <lfs_fromle32>
 8027cda:	4603      	mov	r3, r0
 8027cdc:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8027cde:	69bb      	ldr	r3, [r7, #24]
 8027ce0:	4618      	mov	r0, r3
 8027ce2:	f7fb fc4f 	bl	8023584 <lfs_fromle32>
 8027ce6:	4603      	mov	r3, r0
 8027ce8:	61bb      	str	r3, [r7, #24]
        if (err) {
 8027cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027cec:	2b00      	cmp	r3, #0
 8027cee:	d001      	beq.n	8027cf4 <lfs_ctz_traverse+0xa0>
            return err;
 8027cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027cf2:	e027      	b.n	8027d44 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8027cf4:	2300      	movs	r3, #0
 8027cf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8027cf8:	e012      	b.n	8027d20 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8027cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027cfc:	009b      	lsls	r3, r3, #2
 8027cfe:	3330      	adds	r3, #48	; 0x30
 8027d00:	443b      	add	r3, r7
 8027d02:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8027d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8027d08:	4611      	mov	r1, r2
 8027d0a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8027d0c:	4798      	blx	r3
 8027d0e:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8027d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027d12:	2b00      	cmp	r3, #0
 8027d14:	d001      	beq.n	8027d1a <lfs_ctz_traverse+0xc6>
                return err;
 8027d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027d18:	e014      	b.n	8027d44 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8027d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027d1c:	3301      	adds	r3, #1
 8027d1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8027d20:	6a3b      	ldr	r3, [r7, #32]
 8027d22:	3b01      	subs	r3, #1
 8027d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8027d26:	429a      	cmp	r2, r3
 8027d28:	dbe7      	blt.n	8027cfa <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8027d2a:	6a3b      	ldr	r3, [r7, #32]
 8027d2c:	3b01      	subs	r3, #1
 8027d2e:	009b      	lsls	r3, r3, #2
 8027d30:	3330      	adds	r3, #48	; 0x30
 8027d32:	443b      	add	r3, r7
 8027d34:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8027d38:	603b      	str	r3, [r7, #0]
        index -= count;
 8027d3a:	6a3b      	ldr	r3, [r7, #32]
 8027d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8027d3e:	1ad3      	subs	r3, r2, r3
 8027d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8027d42:	e79e      	b.n	8027c82 <lfs_ctz_traverse+0x2e>
    }
}
 8027d44:	4618      	mov	r0, r3
 8027d46:	3730      	adds	r7, #48	; 0x30
 8027d48:	46bd      	mov	sp, r7
 8027d4a:	bd80      	pop	{r7, pc}

08027d4c <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8027d4c:	b5b0      	push	{r4, r5, r7, lr}
 8027d4e:	b09a      	sub	sp, #104	; 0x68
 8027d50:	af02      	add	r7, sp, #8
 8027d52:	60f8      	str	r0, [r7, #12]
 8027d54:	60b9      	str	r1, [r7, #8]
 8027d56:	607a      	str	r2, [r7, #4]
 8027d58:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8027d5a:	683b      	ldr	r3, [r7, #0]
 8027d5c:	f003 0302 	and.w	r3, r3, #2
 8027d60:	2b00      	cmp	r3, #0
 8027d62:	d008      	beq.n	8027d76 <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8027d64:	68f8      	ldr	r0, [r7, #12]
 8027d66:	f002 fb63 	bl	802a430 <lfs_fs_forceconsistency>
 8027d6a:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 8027d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027d6e:	2b00      	cmp	r3, #0
 8027d70:	d001      	beq.n	8027d76 <lfs_file_rawopencfg+0x2a>
            return err;
 8027d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027d74:	e1b0      	b.n	80280d8 <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8027d76:	68bb      	ldr	r3, [r7, #8]
 8027d78:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8027d7a:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 8027d7c:	683a      	ldr	r2, [r7, #0]
 8027d7e:	68bb      	ldr	r3, [r7, #8]
 8027d80:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 8027d82:	68bb      	ldr	r3, [r7, #8]
 8027d84:	2200      	movs	r2, #0
 8027d86:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 8027d88:	68bb      	ldr	r3, [r7, #8]
 8027d8a:	2200      	movs	r2, #0
 8027d8c:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 8027d8e:	68bb      	ldr	r3, [r7, #8]
 8027d90:	2200      	movs	r2, #0
 8027d92:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8027d94:	68bb      	ldr	r3, [r7, #8]
 8027d96:	f103 0108 	add.w	r1, r3, #8
 8027d9a:	68bb      	ldr	r3, [r7, #8]
 8027d9c:	3304      	adds	r3, #4
 8027d9e:	1d3a      	adds	r2, r7, #4
 8027da0:	68f8      	ldr	r0, [r7, #12]
 8027da2:	f7fd fe31 	bl	8025a08 <lfs_dir_find>
 8027da6:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8027da8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027daa:	2b00      	cmp	r3, #0
 8027dac:	da0c      	bge.n	8027dc8 <lfs_file_rawopencfg+0x7c>
 8027dae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027db0:	f113 0f02 	cmn.w	r3, #2
 8027db4:	d105      	bne.n	8027dc2 <lfs_file_rawopencfg+0x76>
 8027db6:	68bb      	ldr	r3, [r7, #8]
 8027db8:	889b      	ldrh	r3, [r3, #4]
 8027dba:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8027dbe:	4293      	cmp	r3, r2
 8027dc0:	d102      	bne.n	8027dc8 <lfs_file_rawopencfg+0x7c>
        err = tag;
 8027dc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027dc4:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8027dc6:	e17c      	b.n	80280c2 <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8027dc8:	68bb      	ldr	r3, [r7, #8]
 8027dca:	2201      	movs	r2, #1
 8027dcc:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8027dce:	68b9      	ldr	r1, [r7, #8]
 8027dd0:	68f8      	ldr	r0, [r7, #12]
 8027dd2:	f7fc fa64 	bl	802429e <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8027dd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027dd8:	f113 0f02 	cmn.w	r3, #2
 8027ddc:	d14e      	bne.n	8027e7c <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8027dde:	683b      	ldr	r3, [r7, #0]
 8027de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027de4:	2b00      	cmp	r3, #0
 8027de6:	d103      	bne.n	8027df0 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8027de8:	f06f 0301 	mvn.w	r3, #1
 8027dec:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8027dee:	e168      	b.n	80280c2 <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8027df0:	687b      	ldr	r3, [r7, #4]
 8027df2:	4618      	mov	r0, r3
 8027df4:	f7e8 fa54 	bl	80102a0 <strlen>
 8027df8:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 8027dfa:	68fb      	ldr	r3, [r7, #12]
 8027dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8027dfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8027e00:	429a      	cmp	r2, r3
 8027e02:	d903      	bls.n	8027e0c <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8027e04:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8027e08:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8027e0a:	e15a      	b.n	80280c2 <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8027e0c:	68bb      	ldr	r3, [r7, #8]
 8027e0e:	f103 0108 	add.w	r1, r3, #8
 8027e12:	68bb      	ldr	r3, [r7, #8]
 8027e14:	889b      	ldrh	r3, [r3, #4]
 8027e16:	029b      	lsls	r3, r3, #10
 8027e18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8027e1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8027e22:	2300      	movs	r3, #0
 8027e24:	633b      	str	r3, [r7, #48]	; 0x30
 8027e26:	68bb      	ldr	r3, [r7, #8]
 8027e28:	889b      	ldrh	r3, [r3, #4]
 8027e2a:	029a      	lsls	r2, r3, #10
 8027e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8027e2e:	4313      	orrs	r3, r2
 8027e30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027e34:	637b      	str	r3, [r7, #52]	; 0x34
 8027e36:	687b      	ldr	r3, [r7, #4]
 8027e38:	63bb      	str	r3, [r7, #56]	; 0x38
 8027e3a:	68bb      	ldr	r3, [r7, #8]
 8027e3c:	889b      	ldrh	r3, [r3, #4]
 8027e3e:	029b      	lsls	r3, r3, #10
 8027e40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8027e44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027e48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8027e4a:	2300      	movs	r3, #0
 8027e4c:	643b      	str	r3, [r7, #64]	; 0x40
 8027e4e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8027e52:	2303      	movs	r3, #3
 8027e54:	68f8      	ldr	r0, [r7, #12]
 8027e56:	f7ff fadf 	bl	8027418 <lfs_dir_commit>
 8027e5a:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8027e5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027e5e:	f113 0f1c 	cmn.w	r3, #28
 8027e62:	d001      	beq.n	8027e68 <lfs_file_rawopencfg+0x11c>
 8027e64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027e66:	e001      	b.n	8027e6c <lfs_file_rawopencfg+0x120>
 8027e68:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8027e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 8027e6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027e70:	2b00      	cmp	r3, #0
 8027e72:	f040 8125 	bne.w	80280c0 <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8027e76:	4b9a      	ldr	r3, [pc, #616]	; (80280e0 <lfs_file_rawopencfg+0x394>)
 8027e78:	65bb      	str	r3, [r7, #88]	; 0x58
 8027e7a:	e044      	b.n	8027f06 <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8027e7c:	683b      	ldr	r3, [r7, #0]
 8027e7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8027e82:	2b00      	cmp	r3, #0
 8027e84:	d003      	beq.n	8027e8e <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 8027e86:	f06f 0310 	mvn.w	r3, #16
 8027e8a:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8027e8c:	e119      	b.n	80280c2 <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8027e8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027e90:	4618      	mov	r0, r3
 8027e92:	f7fb fff3 	bl	8023e7c <lfs_tag_type3>
 8027e96:	4603      	mov	r3, r0
 8027e98:	2b01      	cmp	r3, #1
 8027e9a:	d003      	beq.n	8027ea4 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 8027e9c:	f06f 0314 	mvn.w	r3, #20
 8027ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8027ea2:	e10e      	b.n	80280c2 <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8027ea4:	683b      	ldr	r3, [r7, #0]
 8027ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027eaa:	2b00      	cmp	r3, #0
 8027eac:	d00e      	beq.n	8027ecc <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8027eae:	68bb      	ldr	r3, [r7, #8]
 8027eb0:	889b      	ldrh	r3, [r3, #4]
 8027eb2:	029b      	lsls	r3, r3, #10
 8027eb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8027eb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027ebc:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 8027ebe:	68bb      	ldr	r3, [r7, #8]
 8027ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027ec2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8027ec6:	68bb      	ldr	r3, [r7, #8]
 8027ec8:	631a      	str	r2, [r3, #48]	; 0x30
 8027eca:	e01c      	b.n	8027f06 <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8027ecc:	68bb      	ldr	r3, [r7, #8]
 8027ece:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8027ed2:	68bb      	ldr	r3, [r7, #8]
 8027ed4:	889b      	ldrh	r3, [r3, #4]
 8027ed6:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8027ed8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8027edc:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8027ee0:	68ba      	ldr	r2, [r7, #8]
 8027ee2:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8027ee4:	9200      	str	r2, [sp, #0]
 8027ee6:	4a7f      	ldr	r2, [pc, #508]	; (80280e4 <lfs_file_rawopencfg+0x398>)
 8027ee8:	68f8      	ldr	r0, [r7, #12]
 8027eea:	f7fc fbdb 	bl	80246a4 <lfs_dir_get>
 8027eee:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 8027ef0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027ef2:	2b00      	cmp	r3, #0
 8027ef4:	da02      	bge.n	8027efc <lfs_file_rawopencfg+0x1b0>
            err = tag;
 8027ef6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027ef8:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8027efa:	e0e2      	b.n	80280c2 <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8027efc:	68bb      	ldr	r3, [r7, #8]
 8027efe:	3328      	adds	r3, #40	; 0x28
 8027f00:	4618      	mov	r0, r3
 8027f02:	f7fc f8ed 	bl	80240e0 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8027f06:	2300      	movs	r3, #0
 8027f08:	657b      	str	r3, [r7, #84]	; 0x54
 8027f0a:	e063      	b.n	8027fd4 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8027f0c:	68bb      	ldr	r3, [r7, #8]
 8027f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027f10:	f003 0301 	and.w	r3, r3, #1
 8027f14:	2b00      	cmp	r3, #0
 8027f16:	d03c      	beq.n	8027f92 <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8027f18:	68bb      	ldr	r3, [r7, #8]
 8027f1a:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8027f1e:	68bb      	ldr	r3, [r7, #8]
 8027f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027f22:	6859      	ldr	r1, [r3, #4]
 8027f24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8027f26:	4613      	mov	r3, r2
 8027f28:	005b      	lsls	r3, r3, #1
 8027f2a:	4413      	add	r3, r2
 8027f2c:	009b      	lsls	r3, r3, #2
 8027f2e:	440b      	add	r3, r1
 8027f30:	781b      	ldrb	r3, [r3, #0]
 8027f32:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8027f36:	051a      	lsls	r2, r3, #20
 8027f38:	68bb      	ldr	r3, [r7, #8]
 8027f3a:	889b      	ldrh	r3, [r3, #4]
 8027f3c:	029b      	lsls	r3, r3, #10
 8027f3e:	ea42 0103 	orr.w	r1, r2, r3
 8027f42:	68bb      	ldr	r3, [r7, #8]
 8027f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027f46:	6858      	ldr	r0, [r3, #4]
 8027f48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8027f4a:	4613      	mov	r3, r2
 8027f4c:	005b      	lsls	r3, r3, #1
 8027f4e:	4413      	add	r3, r2
 8027f50:	009b      	lsls	r3, r3, #2
 8027f52:	4403      	add	r3, r0
 8027f54:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8027f56:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8027f5a:	68bb      	ldr	r3, [r7, #8]
 8027f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027f5e:	6859      	ldr	r1, [r3, #4]
 8027f60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8027f62:	4613      	mov	r3, r2
 8027f64:	005b      	lsls	r3, r3, #1
 8027f66:	4413      	add	r3, r2
 8027f68:	009b      	lsls	r3, r3, #2
 8027f6a:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8027f6c:	685b      	ldr	r3, [r3, #4]
 8027f6e:	9300      	str	r3, [sp, #0]
 8027f70:	4603      	mov	r3, r0
 8027f72:	4a5d      	ldr	r2, [pc, #372]	; (80280e8 <lfs_file_rawopencfg+0x39c>)
 8027f74:	4621      	mov	r1, r4
 8027f76:	68f8      	ldr	r0, [r7, #12]
 8027f78:	f7fc fb94 	bl	80246a4 <lfs_dir_get>
 8027f7c:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8027f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027f80:	2b00      	cmp	r3, #0
 8027f82:	da06      	bge.n	8027f92 <lfs_file_rawopencfg+0x246>
 8027f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027f86:	f113 0f02 	cmn.w	r3, #2
 8027f8a:	d002      	beq.n	8027f92 <lfs_file_rawopencfg+0x246>
                err = res;
 8027f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027f8e:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8027f90:	e097      	b.n	80280c2 <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8027f92:	68bb      	ldr	r3, [r7, #8]
 8027f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027f96:	f003 0302 	and.w	r3, r3, #2
 8027f9a:	2b00      	cmp	r3, #0
 8027f9c:	d017      	beq.n	8027fce <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8027f9e:	68bb      	ldr	r3, [r7, #8]
 8027fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027fa2:	6859      	ldr	r1, [r3, #4]
 8027fa4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8027fa6:	4613      	mov	r3, r2
 8027fa8:	005b      	lsls	r3, r3, #1
 8027faa:	4413      	add	r3, r2
 8027fac:	009b      	lsls	r3, r3, #2
 8027fae:	440b      	add	r3, r1
 8027fb0:	689a      	ldr	r2, [r3, #8]
 8027fb2:	68fb      	ldr	r3, [r7, #12]
 8027fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8027fb6:	429a      	cmp	r2, r3
 8027fb8:	d903      	bls.n	8027fc2 <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 8027fba:	f06f 031b 	mvn.w	r3, #27
 8027fbe:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8027fc0:	e07f      	b.n	80280c2 <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8027fc2:	68bb      	ldr	r3, [r7, #8]
 8027fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027fc6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8027fca:	68bb      	ldr	r3, [r7, #8]
 8027fcc:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8027fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8027fd0:	3301      	adds	r3, #1
 8027fd2:	657b      	str	r3, [r7, #84]	; 0x54
 8027fd4:	68bb      	ldr	r3, [r7, #8]
 8027fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027fd8:	689b      	ldr	r3, [r3, #8]
 8027fda:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8027fdc:	429a      	cmp	r2, r3
 8027fde:	d395      	bcc.n	8027f0c <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8027fe0:	68bb      	ldr	r3, [r7, #8]
 8027fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027fe4:	681b      	ldr	r3, [r3, #0]
 8027fe6:	2b00      	cmp	r3, #0
 8027fe8:	d005      	beq.n	8027ff6 <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8027fea:	68bb      	ldr	r3, [r7, #8]
 8027fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027fee:	681a      	ldr	r2, [r3, #0]
 8027ff0:	68bb      	ldr	r3, [r7, #8]
 8027ff2:	64da      	str	r2, [r3, #76]	; 0x4c
 8027ff4:	e010      	b.n	8028018 <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8027ff6:	68fb      	ldr	r3, [r7, #12]
 8027ff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8027ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027ffc:	4618      	mov	r0, r3
 8027ffe:	f7fb faf0 	bl	80235e2 <lfs_malloc>
 8028002:	4602      	mov	r2, r0
 8028004:	68bb      	ldr	r3, [r7, #8]
 8028006:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 8028008:	68bb      	ldr	r3, [r7, #8]
 802800a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802800c:	2b00      	cmp	r3, #0
 802800e:	d103      	bne.n	8028018 <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 8028010:	f06f 030b 	mvn.w	r3, #11
 8028014:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8028016:	e054      	b.n	80280c2 <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8028018:	68bb      	ldr	r3, [r7, #8]
 802801a:	3340      	adds	r3, #64	; 0x40
 802801c:	4619      	mov	r1, r3
 802801e:	68f8      	ldr	r0, [r7, #12]
 8028020:	f7fb fb05 	bl	802362e <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8028024:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8028026:	4618      	mov	r0, r3
 8028028:	f7fb ff28 	bl	8023e7c <lfs_tag_type3>
 802802c:	4603      	mov	r3, r0
 802802e:	461a      	mov	r2, r3
 8028030:	f240 2301 	movw	r3, #513	; 0x201
 8028034:	429a      	cmp	r2, r3
 8028036:	d141      	bne.n	80280bc <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8028038:	68bb      	ldr	r3, [r7, #8]
 802803a:	f06f 0201 	mvn.w	r2, #1
 802803e:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8028040:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8028042:	4618      	mov	r0, r3
 8028044:	f7fb ff54 	bl	8023ef0 <lfs_tag_size>
 8028048:	4602      	mov	r2, r0
 802804a:	68bb      	ldr	r3, [r7, #8]
 802804c:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 802804e:	68bb      	ldr	r3, [r7, #8]
 8028050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028052:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8028056:	68bb      	ldr	r3, [r7, #8]
 8028058:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 802805a:	68bb      	ldr	r3, [r7, #8]
 802805c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802805e:	68bb      	ldr	r3, [r7, #8]
 8028060:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 8028062:	68bb      	ldr	r3, [r7, #8]
 8028064:	2200      	movs	r2, #0
 8028066:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 8028068:	68fb      	ldr	r3, [r7, #12]
 802806a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802806c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802806e:	68bb      	ldr	r3, [r7, #8]
 8028070:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8028072:	68bb      	ldr	r3, [r7, #8]
 8028074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028076:	2b00      	cmp	r3, #0
 8028078:	d020      	beq.n	80280bc <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 802807a:	68bb      	ldr	r3, [r7, #8]
 802807c:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8028080:	68bb      	ldr	r3, [r7, #8]
 8028082:	889b      	ldrh	r3, [r3, #4]
 8028084:	029c      	lsls	r4, r3, #10
 8028086:	68bb      	ldr	r3, [r7, #8]
 8028088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802808a:	f240 31fe 	movw	r1, #1022	; 0x3fe
 802808e:	4618      	mov	r0, r3
 8028090:	f7fb fa08 	bl	80234a4 <lfs_min>
 8028094:	4603      	mov	r3, r0
 8028096:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8028098:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 802809c:	68bb      	ldr	r3, [r7, #8]
 802809e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80280a0:	9300      	str	r3, [sp, #0]
 80280a2:	4613      	mov	r3, r2
 80280a4:	4a0f      	ldr	r2, [pc, #60]	; (80280e4 <lfs_file_rawopencfg+0x398>)
 80280a6:	4629      	mov	r1, r5
 80280a8:	68f8      	ldr	r0, [r7, #12]
 80280aa:	f7fc fafb 	bl	80246a4 <lfs_dir_get>
 80280ae:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 80280b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80280b2:	2b00      	cmp	r3, #0
 80280b4:	da02      	bge.n	80280bc <lfs_file_rawopencfg+0x370>
                err = res;
 80280b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80280b8:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80280ba:	e002      	b.n	80280c2 <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 80280bc:	2300      	movs	r3, #0
 80280be:	e00b      	b.n	80280d8 <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 80280c0:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 80280c2:	68bb      	ldr	r3, [r7, #8]
 80280c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80280c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80280ca:	68bb      	ldr	r3, [r7, #8]
 80280cc:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 80280ce:	68b9      	ldr	r1, [r7, #8]
 80280d0:	68f8      	ldr	r0, [r7, #12]
 80280d2:	f000 f80b 	bl	80280ec <lfs_file_rawclose>
    return err;
 80280d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 80280d8:	4618      	mov	r0, r3
 80280da:	3760      	adds	r7, #96	; 0x60
 80280dc:	46bd      	mov	sp, r7
 80280de:	bdb0      	pop	{r4, r5, r7, pc}
 80280e0:	20100000 	.word	0x20100000
 80280e4:	700ffc00 	.word	0x700ffc00
 80280e8:	7ffffc00 	.word	0x7ffffc00

080280ec <lfs_file_rawclose>:
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
    return err;
}
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 80280ec:	b580      	push	{r7, lr}
 80280ee:	b084      	sub	sp, #16
 80280f0:	af00      	add	r7, sp, #0
 80280f2:	6078      	str	r0, [r7, #4]
 80280f4:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 80280f6:	6839      	ldr	r1, [r7, #0]
 80280f8:	6878      	ldr	r0, [r7, #4]
 80280fa:	f000 f9e5 	bl	80284c8 <lfs_file_rawsync>
 80280fe:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8028100:	6839      	ldr	r1, [r7, #0]
 8028102:	6878      	ldr	r0, [r7, #4]
 8028104:	f7fc f8a9 	bl	802425a <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8028108:	683b      	ldr	r3, [r7, #0]
 802810a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802810c:	681b      	ldr	r3, [r3, #0]
 802810e:	2b00      	cmp	r3, #0
 8028110:	d104      	bne.n	802811c <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 8028112:	683b      	ldr	r3, [r7, #0]
 8028114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8028116:	4618      	mov	r0, r3
 8028118:	f7fb fa6f 	bl	80235fa <lfs_free>
    }

    return err;
 802811c:	68fb      	ldr	r3, [r7, #12]
}
 802811e:	4618      	mov	r0, r3
 8028120:	3710      	adds	r7, #16
 8028122:	46bd      	mov	sp, r7
 8028124:	bd80      	pop	{r7, pc}
	...

08028128 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8028128:	b590      	push	{r4, r7, lr}
 802812a:	b08d      	sub	sp, #52	; 0x34
 802812c:	af06      	add	r7, sp, #24
 802812e:	6078      	str	r0, [r7, #4]
 8028130:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8028132:	f107 030c 	add.w	r3, r7, #12
 8028136:	4619      	mov	r1, r3
 8028138:	6878      	ldr	r0, [r7, #4]
 802813a:	f7fc f919 	bl	8024370 <lfs_alloc>
 802813e:	6138      	str	r0, [r7, #16]
        if (err) {
 8028140:	693b      	ldr	r3, [r7, #16]
 8028142:	2b00      	cmp	r3, #0
 8028144:	d001      	beq.n	802814a <lfs_file_relocate+0x22>
            return err;
 8028146:	693b      	ldr	r3, [r7, #16]
 8028148:	e0bb      	b.n	80282c2 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 802814a:	68fb      	ldr	r3, [r7, #12]
 802814c:	4619      	mov	r1, r3
 802814e:	6878      	ldr	r0, [r7, #4]
 8028150:	f7fb fd76 	bl	8023c40 <lfs_bd_erase>
 8028154:	6138      	str	r0, [r7, #16]
        if (err) {
 8028156:	693b      	ldr	r3, [r7, #16]
 8028158:	2b00      	cmp	r3, #0
 802815a:	d006      	beq.n	802816a <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 802815c:	693b      	ldr	r3, [r7, #16]
 802815e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8028162:	f000 809b 	beq.w	802829c <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8028166:	693b      	ldr	r3, [r7, #16]
 8028168:	e0ab      	b.n	80282c2 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 802816a:	2300      	movs	r3, #0
 802816c:	617b      	str	r3, [r7, #20]
 802816e:	e069      	b.n	8028244 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8028170:	683b      	ldr	r3, [r7, #0]
 8028172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028178:	2b00      	cmp	r3, #0
 802817a:	d027      	beq.n	80281cc <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 802817c:	683b      	ldr	r3, [r7, #0]
 802817e:	f103 0008 	add.w	r0, r3, #8
 8028182:	683b      	ldr	r3, [r7, #0]
 8028184:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8028188:	683b      	ldr	r3, [r7, #0]
 802818a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 802818c:	697b      	ldr	r3, [r7, #20]
 802818e:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8028190:	683b      	ldr	r3, [r7, #0]
 8028192:	889b      	ldrh	r3, [r3, #4]
 8028194:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8028196:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802819a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802819e:	2101      	movs	r1, #1
 80281a0:	9105      	str	r1, [sp, #20]
 80281a2:	f107 010b 	add.w	r1, r7, #11
 80281a6:	9104      	str	r1, [sp, #16]
 80281a8:	6979      	ldr	r1, [r7, #20]
 80281aa:	9103      	str	r1, [sp, #12]
 80281ac:	9302      	str	r3, [sp, #8]
 80281ae:	4b47      	ldr	r3, [pc, #284]	; (80282cc <lfs_file_relocate+0x1a4>)
 80281b0:	9301      	str	r3, [sp, #4]
 80281b2:	9200      	str	r2, [sp, #0]
 80281b4:	4623      	mov	r3, r4
 80281b6:	2200      	movs	r2, #0
 80281b8:	4601      	mov	r1, r0
 80281ba:	6878      	ldr	r0, [r7, #4]
 80281bc:	f7fc fa8d 	bl	80246da <lfs_dir_getread>
 80281c0:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 80281c2:	693b      	ldr	r3, [r7, #16]
 80281c4:	2b00      	cmp	r3, #0
 80281c6:	d01e      	beq.n	8028206 <lfs_file_relocate+0xde>
                    return err;
 80281c8:	693b      	ldr	r3, [r7, #16]
 80281ca:	e07a      	b.n	80282c2 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 80281cc:	683b      	ldr	r3, [r7, #0]
 80281ce:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 80281d2:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 80281d4:	683b      	ldr	r3, [r7, #0]
 80281d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 80281d8:	697b      	ldr	r3, [r7, #20]
 80281da:	1ad4      	subs	r4, r2, r3
 80281dc:	683b      	ldr	r3, [r7, #0]
 80281de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80281e0:	2201      	movs	r2, #1
 80281e2:	9203      	str	r2, [sp, #12]
 80281e4:	f107 020b 	add.w	r2, r7, #11
 80281e8:	9202      	str	r2, [sp, #8]
 80281ea:	697a      	ldr	r2, [r7, #20]
 80281ec:	9201      	str	r2, [sp, #4]
 80281ee:	9300      	str	r3, [sp, #0]
 80281f0:	4623      	mov	r3, r4
 80281f2:	4602      	mov	r2, r0
 80281f4:	6878      	ldr	r0, [r7, #4]
 80281f6:	f7fb fa31 	bl	802365c <lfs_bd_read>
 80281fa:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 80281fc:	693b      	ldr	r3, [r7, #16]
 80281fe:	2b00      	cmp	r3, #0
 8028200:	d001      	beq.n	8028206 <lfs_file_relocate+0xde>
                    return err;
 8028202:	693b      	ldr	r3, [r7, #16]
 8028204:	e05d      	b.n	80282c2 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 8028206:	687b      	ldr	r3, [r7, #4]
 8028208:	f103 0110 	add.w	r1, r3, #16
 802820c:	6878      	ldr	r0, [r7, #4]
 802820e:	68fb      	ldr	r3, [r7, #12]
 8028210:	2201      	movs	r2, #1
 8028212:	9203      	str	r2, [sp, #12]
 8028214:	f107 020b 	add.w	r2, r7, #11
 8028218:	9202      	str	r2, [sp, #8]
 802821a:	697a      	ldr	r2, [r7, #20]
 802821c:	9201      	str	r2, [sp, #4]
 802821e:	9300      	str	r3, [sp, #0]
 8028220:	2301      	movs	r3, #1
 8028222:	4602      	mov	r2, r0
 8028224:	6878      	ldr	r0, [r7, #4]
 8028226:	f7fb fc5f 	bl	8023ae8 <lfs_bd_prog>
 802822a:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 802822c:	693b      	ldr	r3, [r7, #16]
 802822e:	2b00      	cmp	r3, #0
 8028230:	d005      	beq.n	802823e <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8028232:	693b      	ldr	r3, [r7, #16]
 8028234:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8028238:	d032      	beq.n	80282a0 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 802823a:	693b      	ldr	r3, [r7, #16]
 802823c:	e041      	b.n	80282c2 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 802823e:	697b      	ldr	r3, [r7, #20]
 8028240:	3301      	adds	r3, #1
 8028242:	617b      	str	r3, [r7, #20]
 8028244:	683b      	ldr	r3, [r7, #0]
 8028246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028248:	697a      	ldr	r2, [r7, #20]
 802824a:	429a      	cmp	r2, r3
 802824c:	d390      	bcc.n	8028170 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 802824e:	683b      	ldr	r3, [r7, #0]
 8028250:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8028252:	687b      	ldr	r3, [r7, #4]
 8028254:	69d9      	ldr	r1, [r3, #28]
 8028256:	687b      	ldr	r3, [r7, #4]
 8028258:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802825a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802825c:	461a      	mov	r2, r3
 802825e:	f005 fc0a 	bl	802da76 <memcpy>
        file->cache.block = lfs->pcache.block;
 8028262:	687b      	ldr	r3, [r7, #4]
 8028264:	691a      	ldr	r2, [r3, #16]
 8028266:	683b      	ldr	r3, [r7, #0]
 8028268:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 802826a:	687b      	ldr	r3, [r7, #4]
 802826c:	695a      	ldr	r2, [r3, #20]
 802826e:	683b      	ldr	r3, [r7, #0]
 8028270:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 8028272:	687b      	ldr	r3, [r7, #4]
 8028274:	699a      	ldr	r2, [r3, #24]
 8028276:	683b      	ldr	r3, [r7, #0]
 8028278:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 802827a:	687b      	ldr	r3, [r7, #4]
 802827c:	3310      	adds	r3, #16
 802827e:	4619      	mov	r1, r3
 8028280:	6878      	ldr	r0, [r7, #4]
 8028282:	f7fb f9d4 	bl	802362e <lfs_cache_zero>

        file->block = nblock;
 8028286:	68fa      	ldr	r2, [r7, #12]
 8028288:	683b      	ldr	r3, [r7, #0]
 802828a:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 802828c:	683b      	ldr	r3, [r7, #0]
 802828e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028290:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8028294:	683b      	ldr	r3, [r7, #0]
 8028296:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 8028298:	2300      	movs	r3, #0
 802829a:	e012      	b.n	80282c2 <lfs_file_relocate+0x19a>
                goto relocate;
 802829c:	bf00      	nop
 802829e:	e000      	b.n	80282a2 <lfs_file_relocate+0x17a>
                    goto relocate;
 80282a0:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 80282a2:	68fb      	ldr	r3, [r7, #12]
 80282a4:	4a0a      	ldr	r2, [pc, #40]	; (80282d0 <lfs_file_relocate+0x1a8>)
 80282a6:	9200      	str	r2, [sp, #0]
 80282a8:	f44f 6241 	mov.w	r2, #3088	; 0xc10
 80282ac:	4909      	ldr	r1, [pc, #36]	; (80282d4 <lfs_file_relocate+0x1ac>)
 80282ae:	480a      	ldr	r0, [pc, #40]	; (80282d8 <lfs_file_relocate+0x1b0>)
 80282b0:	f005 f876 	bl	802d3a0 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 80282b4:	687b      	ldr	r3, [r7, #4]
 80282b6:	3310      	adds	r3, #16
 80282b8:	4619      	mov	r1, r3
 80282ba:	6878      	ldr	r0, [r7, #4]
 80282bc:	f7fb f9a8 	bl	8023610 <lfs_cache_drop>
    while (true) {
 80282c0:	e737      	b.n	8028132 <lfs_file_relocate+0xa>
    }
}
 80282c2:	4618      	mov	r0, r3
 80282c4:	371c      	adds	r7, #28
 80282c6:	46bd      	mov	sp, r7
 80282c8:	bd90      	pop	{r4, r7, pc}
 80282ca:	bf00      	nop
 80282cc:	fff7fc00 	.word	0xfff7fc00
 80282d0:	0803342c 	.word	0x0803342c
 80282d4:	08033318 	.word	0x08033318
 80282d8:	080334ac 	.word	0x080334ac

080282dc <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 80282dc:	b580      	push	{r7, lr}
 80282de:	b084      	sub	sp, #16
 80282e0:	af00      	add	r7, sp, #0
 80282e2:	6078      	str	r0, [r7, #4]
 80282e4:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 80282e6:	683b      	ldr	r3, [r7, #0]
 80282e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80282ea:	683b      	ldr	r3, [r7, #0]
 80282ec:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 80282ee:	6878      	ldr	r0, [r7, #4]
 80282f0:	f7fc f81e 	bl	8024330 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 80282f4:	6839      	ldr	r1, [r7, #0]
 80282f6:	6878      	ldr	r0, [r7, #4]
 80282f8:	f7ff ff16 	bl	8028128 <lfs_file_relocate>
 80282fc:	60f8      	str	r0, [r7, #12]
    if (err) {
 80282fe:	68fb      	ldr	r3, [r7, #12]
 8028300:	2b00      	cmp	r3, #0
 8028302:	d001      	beq.n	8028308 <lfs_file_outline+0x2c>
        return err;
 8028304:	68fb      	ldr	r3, [r7, #12]
 8028306:	e006      	b.n	8028316 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8028308:	683b      	ldr	r3, [r7, #0]
 802830a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802830c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8028310:	683b      	ldr	r3, [r7, #0]
 8028312:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 8028314:	2300      	movs	r3, #0
}
 8028316:	4618      	mov	r0, r3
 8028318:	3710      	adds	r7, #16
 802831a:	46bd      	mov	sp, r7
 802831c:	bd80      	pop	{r7, pc}
	...

08028320 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8028320:	b590      	push	{r4, r7, lr}
 8028322:	b09f      	sub	sp, #124	; 0x7c
 8028324:	af02      	add	r7, sp, #8
 8028326:	6078      	str	r0, [r7, #4]
 8028328:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 802832a:	683b      	ldr	r3, [r7, #0]
 802832c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802832e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028332:	2b00      	cmp	r3, #0
 8028334:	d011      	beq.n	802835a <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8028336:	683b      	ldr	r3, [r7, #0]
 8028338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802833a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802833e:	2b00      	cmp	r3, #0
 8028340:	d105      	bne.n	802834e <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8028342:	683b      	ldr	r3, [r7, #0]
 8028344:	3340      	adds	r3, #64	; 0x40
 8028346:	4619      	mov	r1, r3
 8028348:	6878      	ldr	r0, [r7, #4]
 802834a:	f7fb f961 	bl	8023610 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 802834e:	683b      	ldr	r3, [r7, #0]
 8028350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028352:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8028356:	683b      	ldr	r3, [r7, #0]
 8028358:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 802835a:	683b      	ldr	r3, [r7, #0]
 802835c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802835e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028362:	2b00      	cmp	r3, #0
 8028364:	f000 80a4 	beq.w	80284b0 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8028368:	683b      	ldr	r3, [r7, #0]
 802836a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802836c:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 802836e:	683b      	ldr	r3, [r7, #0]
 8028370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028376:	2b00      	cmp	r3, #0
 8028378:	d176      	bne.n	8028468 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 802837a:	f107 030c 	add.w	r3, r7, #12
 802837e:	2254      	movs	r2, #84	; 0x54
 8028380:	2100      	movs	r1, #0
 8028382:	4618      	mov	r0, r3
 8028384:	f005 f9a2 	bl	802d6cc <memset>
                .ctz.head = file->ctz.head,
 8028388:	683b      	ldr	r3, [r7, #0]
 802838a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 802838c:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 802838e:	683b      	ldr	r3, [r7, #0]
 8028390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 8028392:	63bb      	str	r3, [r7, #56]	; 0x38
 8028394:	2301      	movs	r3, #1
 8028396:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8028398:	683b      	ldr	r3, [r7, #0]
 802839a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 802839c:	643b      	str	r3, [r7, #64]	; 0x40
 802839e:	687b      	ldr	r3, [r7, #4]
 80283a0:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80283a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80283a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 80283aa:	687b      	ldr	r3, [r7, #4]
 80283ac:	4619      	mov	r1, r3
 80283ae:	6878      	ldr	r0, [r7, #4]
 80283b0:	f7fb f92e 	bl	8023610 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 80283b4:	e02b      	b.n	802840e <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 80283b6:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80283ba:	f107 010c 	add.w	r1, r7, #12
 80283be:	2301      	movs	r3, #1
 80283c0:	6878      	ldr	r0, [r7, #4]
 80283c2:	f000 f90d 	bl	80285e0 <lfs_file_flushedread>
 80283c6:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80283c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80283ca:	2b00      	cmp	r3, #0
 80283cc:	da01      	bge.n	80283d2 <lfs_file_flush+0xb2>
                    return res;
 80283ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80283d0:	e06f      	b.n	80284b2 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 80283d2:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80283d6:	2301      	movs	r3, #1
 80283d8:	6839      	ldr	r1, [r7, #0]
 80283da:	6878      	ldr	r0, [r7, #4]
 80283dc:	f000 fa08 	bl	80287f0 <lfs_file_flushedwrite>
 80283e0:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80283e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80283e4:	2b00      	cmp	r3, #0
 80283e6:	da01      	bge.n	80283ec <lfs_file_flush+0xcc>
                    return res;
 80283e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80283ea:	e062      	b.n	80284b2 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 80283ec:	687b      	ldr	r3, [r7, #4]
 80283ee:	681b      	ldr	r3, [r3, #0]
 80283f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80283f4:	d00b      	beq.n	802840e <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 80283f6:	f107 030c 	add.w	r3, r7, #12
 80283fa:	3340      	adds	r3, #64	; 0x40
 80283fc:	4619      	mov	r1, r3
 80283fe:	6878      	ldr	r0, [r7, #4]
 8028400:	f7fb f906 	bl	8023610 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8028404:	687b      	ldr	r3, [r7, #4]
 8028406:	4619      	mov	r1, r3
 8028408:	6878      	ldr	r0, [r7, #4]
 802840a:	f7fb f901 	bl	8023610 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 802840e:	683b      	ldr	r3, [r7, #0]
 8028410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028412:	683b      	ldr	r3, [r7, #0]
 8028414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028416:	429a      	cmp	r2, r3
 8028418:	d3cd      	bcc.n	80283b6 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 802841a:	683b      	ldr	r3, [r7, #0]
 802841c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8028420:	687a      	ldr	r2, [r7, #4]
 8028422:	2301      	movs	r3, #1
 8028424:	6878      	ldr	r0, [r7, #4]
 8028426:	f7fb faaf 	bl	8023988 <lfs_bd_flush>
 802842a:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 802842c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802842e:	2b00      	cmp	r3, #0
 8028430:	d026      	beq.n	8028480 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8028432:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8028434:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8028438:	d001      	beq.n	802843e <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 802843a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802843c:	e039      	b.n	80284b2 <lfs_file_flush+0x192>
                        goto relocate;
 802843e:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8028440:	683b      	ldr	r3, [r7, #0]
 8028442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028444:	4a1d      	ldr	r2, [pc, #116]	; (80284bc <lfs_file_flush+0x19c>)
 8028446:	9200      	str	r2, [sp, #0]
 8028448:	f640 425f 	movw	r2, #3167	; 0xc5f
 802844c:	491c      	ldr	r1, [pc, #112]	; (80284c0 <lfs_file_flush+0x1a0>)
 802844e:	481d      	ldr	r0, [pc, #116]	; (80284c4 <lfs_file_flush+0x1a4>)
 8028450:	f004 ffa6 	bl	802d3a0 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8028454:	6839      	ldr	r1, [r7, #0]
 8028456:	6878      	ldr	r0, [r7, #4]
 8028458:	f7ff fe66 	bl	8028128 <lfs_file_relocate>
 802845c:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 802845e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8028460:	2b00      	cmp	r3, #0
 8028462:	d0da      	beq.n	802841a <lfs_file_flush+0xfa>
                    return err;
 8028464:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8028466:	e024      	b.n	80284b2 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8028468:	683b      	ldr	r3, [r7, #0]
 802846a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802846c:	683b      	ldr	r3, [r7, #0]
 802846e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028470:	4619      	mov	r1, r3
 8028472:	4610      	mov	r0, r2
 8028474:	f7fb f806 	bl	8023484 <lfs_max>
 8028478:	4602      	mov	r2, r0
 802847a:	683b      	ldr	r3, [r7, #0]
 802847c:	635a      	str	r2, [r3, #52]	; 0x34
 802847e:	e000      	b.n	8028482 <lfs_file_flush+0x162>
                break;
 8028480:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8028482:	683b      	ldr	r3, [r7, #0]
 8028484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028486:	683b      	ldr	r3, [r7, #0]
 8028488:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 802848a:	683b      	ldr	r3, [r7, #0]
 802848c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802848e:	683b      	ldr	r3, [r7, #0]
 8028490:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 8028492:	683b      	ldr	r3, [r7, #0]
 8028494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028496:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 802849a:	683b      	ldr	r3, [r7, #0]
 802849c:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 802849e:	683b      	ldr	r3, [r7, #0]
 80284a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80284a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80284a6:	683b      	ldr	r3, [r7, #0]
 80284a8:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 80284aa:	683b      	ldr	r3, [r7, #0]
 80284ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80284ae:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 80284b0:	2300      	movs	r3, #0
}
 80284b2:	4618      	mov	r0, r3
 80284b4:	3774      	adds	r7, #116	; 0x74
 80284b6:	46bd      	mov	sp, r7
 80284b8:	bd90      	pop	{r4, r7, pc}
 80284ba:	bf00      	nop
 80284bc:	0803342c 	.word	0x0803342c
 80284c0:	08033318 	.word	0x08033318
 80284c4:	080334ac 	.word	0x080334ac

080284c8 <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 80284c8:	b580      	push	{r7, lr}
 80284ca:	b090      	sub	sp, #64	; 0x40
 80284cc:	af00      	add	r7, sp, #0
 80284ce:	6078      	str	r0, [r7, #4]
 80284d0:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 80284d2:	683b      	ldr	r3, [r7, #0]
 80284d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80284d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80284da:	2b00      	cmp	r3, #0
 80284dc:	d001      	beq.n	80284e2 <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 80284de:	2300      	movs	r3, #0
 80284e0:	e07a      	b.n	80285d8 <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 80284e2:	6839      	ldr	r1, [r7, #0]
 80284e4:	6878      	ldr	r0, [r7, #4]
 80284e6:	f7ff ff1b 	bl	8028320 <lfs_file_flush>
 80284ea:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 80284ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80284ee:	2b00      	cmp	r3, #0
 80284f0:	d007      	beq.n	8028502 <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 80284f2:	683b      	ldr	r3, [r7, #0]
 80284f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80284f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80284fa:	683b      	ldr	r3, [r7, #0]
 80284fc:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 80284fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028500:	e06a      	b.n	80285d8 <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8028502:	683b      	ldr	r3, [r7, #0]
 8028504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802850a:	2b00      	cmp	r3, #0
 802850c:	d063      	beq.n	80285d6 <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 802850e:	683b      	ldr	r3, [r7, #0]
 8028510:	3308      	adds	r3, #8
 8028512:	4618      	mov	r0, r3
 8028514:	f7fb fbdb 	bl	8023cce <lfs_pair_isnull>
 8028518:	4603      	mov	r3, r0
 802851a:	f083 0301 	eor.w	r3, r3, #1
 802851e:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8028520:	2b00      	cmp	r3, #0
 8028522:	d058      	beq.n	80285d6 <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8028524:	683b      	ldr	r3, [r7, #0]
 8028526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028528:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802852c:	2b00      	cmp	r3, #0
 802852e:	d009      	beq.n	8028544 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8028530:	f240 2301 	movw	r3, #513	; 0x201
 8028534:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 8028536:	683b      	ldr	r3, [r7, #0]
 8028538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802853a:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 802853c:	683b      	ldr	r3, [r7, #0]
 802853e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028540:	637b      	str	r3, [r7, #52]	; 0x34
 8028542:	e014      	b.n	802856e <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8028544:	f240 2302 	movw	r3, #514	; 0x202
 8028548:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 802854a:	683a      	ldr	r2, [r7, #0]
 802854c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8028550:	3228      	adds	r2, #40	; 0x28
 8028552:	e892 0003 	ldmia.w	r2, {r0, r1}
 8028556:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 802855a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802855e:	4618      	mov	r0, r3
 8028560:	f7fb fdd6 	bl	8024110 <lfs_ctz_tole32>
            buffer = &ctz;
 8028564:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8028568:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 802856a:	2308      	movs	r3, #8
 802856c:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 802856e:	683b      	ldr	r3, [r7, #0]
 8028570:	f103 0108 	add.w	r1, r3, #8
 8028574:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8028576:	051a      	lsls	r2, r3, #20
 8028578:	683b      	ldr	r3, [r7, #0]
 802857a:	889b      	ldrh	r3, [r3, #4]
 802857c:	029b      	lsls	r3, r3, #10
 802857e:	431a      	orrs	r2, r3
 8028580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028582:	4313      	orrs	r3, r2
 8028584:	61bb      	str	r3, [r7, #24]
 8028586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028588:	61fb      	str	r3, [r7, #28]
 802858a:	683b      	ldr	r3, [r7, #0]
 802858c:	889b      	ldrh	r3, [r3, #4]
 802858e:	029a      	lsls	r2, r3, #10
 8028590:	683b      	ldr	r3, [r7, #0]
 8028592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028594:	689b      	ldr	r3, [r3, #8]
 8028596:	4313      	orrs	r3, r2
 8028598:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 802859c:	623b      	str	r3, [r7, #32]
 802859e:	683b      	ldr	r3, [r7, #0]
 80285a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80285a2:	685b      	ldr	r3, [r3, #4]
 80285a4:	627b      	str	r3, [r7, #36]	; 0x24
 80285a6:	f107 0218 	add.w	r2, r7, #24
 80285aa:	2302      	movs	r3, #2
 80285ac:	6878      	ldr	r0, [r7, #4]
 80285ae:	f7fe ff33 	bl	8027418 <lfs_dir_commit>
 80285b2:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 80285b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80285b6:	2b00      	cmp	r3, #0
 80285b8:	d007      	beq.n	80285ca <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 80285ba:	683b      	ldr	r3, [r7, #0]
 80285bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80285be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80285c2:	683b      	ldr	r3, [r7, #0]
 80285c4:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 80285c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80285c8:	e006      	b.n	80285d8 <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 80285ca:	683b      	ldr	r3, [r7, #0]
 80285cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80285ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80285d2:	683b      	ldr	r3, [r7, #0]
 80285d4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 80285d6:	2300      	movs	r3, #0
}
 80285d8:	4618      	mov	r0, r3
 80285da:	3740      	adds	r7, #64	; 0x40
 80285dc:	46bd      	mov	sp, r7
 80285de:	bd80      	pop	{r7, pc}

080285e0 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80285e0:	b5b0      	push	{r4, r5, r7, lr}
 80285e2:	b090      	sub	sp, #64	; 0x40
 80285e4:	af06      	add	r7, sp, #24
 80285e6:	60f8      	str	r0, [r7, #12]
 80285e8:	60b9      	str	r1, [r7, #8]
 80285ea:	607a      	str	r2, [r7, #4]
 80285ec:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80285ee:	687b      	ldr	r3, [r7, #4]
 80285f0:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 80285f2:	683b      	ldr	r3, [r7, #0]
 80285f4:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 80285f6:	68bb      	ldr	r3, [r7, #8]
 80285f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80285fa:	68bb      	ldr	r3, [r7, #8]
 80285fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80285fe:	429a      	cmp	r2, r3
 8028600:	d301      	bcc.n	8028606 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8028602:	2300      	movs	r3, #0
 8028604:	e0b7      	b.n	8028776 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8028606:	68bb      	ldr	r3, [r7, #8]
 8028608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802860a:	68bb      	ldr	r3, [r7, #8]
 802860c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802860e:	1ad3      	subs	r3, r2, r3
 8028610:	4619      	mov	r1, r3
 8028612:	6838      	ldr	r0, [r7, #0]
 8028614:	f7fa ff46 	bl	80234a4 <lfs_min>
 8028618:	6038      	str	r0, [r7, #0]
    nsize = size;
 802861a:	683b      	ldr	r3, [r7, #0]
 802861c:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 802861e:	e0a5      	b.n	802876c <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8028620:	68bb      	ldr	r3, [r7, #8]
 8028622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028624:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028628:	2b00      	cmp	r3, #0
 802862a:	d006      	beq.n	802863a <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 802862c:	68bb      	ldr	r3, [r7, #8]
 802862e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8028630:	68fb      	ldr	r3, [r7, #12]
 8028632:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028634:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8028636:	429a      	cmp	r2, r3
 8028638:	d130      	bne.n	802869c <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 802863a:	68bb      	ldr	r3, [r7, #8]
 802863c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802863e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028642:	2b00      	cmp	r3, #0
 8028644:	d11c      	bne.n	8028680 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8028646:	68bb      	ldr	r3, [r7, #8]
 8028648:	f103 0440 	add.w	r4, r3, #64	; 0x40
 802864c:	68bb      	ldr	r3, [r7, #8]
 802864e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8028650:	68bb      	ldr	r3, [r7, #8]
 8028652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028654:	68ba      	ldr	r2, [r7, #8]
 8028656:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8028658:	68b9      	ldr	r1, [r7, #8]
 802865a:	3138      	adds	r1, #56	; 0x38
 802865c:	68b8      	ldr	r0, [r7, #8]
 802865e:	303c      	adds	r0, #60	; 0x3c
 8028660:	9003      	str	r0, [sp, #12]
 8028662:	9102      	str	r1, [sp, #8]
 8028664:	9201      	str	r2, [sp, #4]
 8028666:	9300      	str	r3, [sp, #0]
 8028668:	462b      	mov	r3, r5
 802866a:	4622      	mov	r2, r4
 802866c:	2100      	movs	r1, #0
 802866e:	68f8      	ldr	r0, [r7, #12]
 8028670:	f7ff f97c 	bl	802796c <lfs_ctz_find>
 8028674:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8028676:	69fb      	ldr	r3, [r7, #28]
 8028678:	2b00      	cmp	r3, #0
 802867a:	d009      	beq.n	8028690 <lfs_file_flushedread+0xb0>
                    return err;
 802867c:	69fb      	ldr	r3, [r7, #28]
 802867e:	e07a      	b.n	8028776 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8028680:	68bb      	ldr	r3, [r7, #8]
 8028682:	f06f 0201 	mvn.w	r2, #1
 8028686:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8028688:	68bb      	ldr	r3, [r7, #8]
 802868a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802868c:	68bb      	ldr	r3, [r7, #8]
 802868e:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 8028690:	68bb      	ldr	r3, [r7, #8]
 8028692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028694:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8028698:	68bb      	ldr	r3, [r7, #8]
 802869a:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 802869c:	68fb      	ldr	r3, [r7, #12]
 802869e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80286a0:	69da      	ldr	r2, [r3, #28]
 80286a2:	68bb      	ldr	r3, [r7, #8]
 80286a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80286a6:	1ad3      	subs	r3, r2, r3
 80286a8:	4619      	mov	r1, r3
 80286aa:	6a38      	ldr	r0, [r7, #32]
 80286ac:	f7fa fefa 	bl	80234a4 <lfs_min>
 80286b0:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 80286b2:	68bb      	ldr	r3, [r7, #8]
 80286b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80286b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80286ba:	2b00      	cmp	r3, #0
 80286bc:	d026      	beq.n	802870c <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 80286be:	68bb      	ldr	r3, [r7, #8]
 80286c0:	f103 0408 	add.w	r4, r3, #8
 80286c4:	68bb      	ldr	r3, [r7, #8]
 80286c6:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80286ca:	68fb      	ldr	r3, [r7, #12]
 80286cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80286ce:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80286d0:	68bb      	ldr	r3, [r7, #8]
 80286d2:	889b      	ldrh	r3, [r3, #4]
 80286d4:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 80286d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80286da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80286de:	68b9      	ldr	r1, [r7, #8]
 80286e0:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80286e2:	69b8      	ldr	r0, [r7, #24]
 80286e4:	9005      	str	r0, [sp, #20]
 80286e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80286e8:	9004      	str	r0, [sp, #16]
 80286ea:	9103      	str	r1, [sp, #12]
 80286ec:	9302      	str	r3, [sp, #8]
 80286ee:	4b24      	ldr	r3, [pc, #144]	; (8028780 <lfs_file_flushedread+0x1a0>)
 80286f0:	9301      	str	r3, [sp, #4]
 80286f2:	9200      	str	r2, [sp, #0]
 80286f4:	462b      	mov	r3, r5
 80286f6:	2200      	movs	r2, #0
 80286f8:	4621      	mov	r1, r4
 80286fa:	68f8      	ldr	r0, [r7, #12]
 80286fc:	f7fb ffed 	bl	80246da <lfs_dir_getread>
 8028700:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8028702:	693b      	ldr	r3, [r7, #16]
 8028704:	2b00      	cmp	r3, #0
 8028706:	d01d      	beq.n	8028744 <lfs_file_flushedread+0x164>
                return err;
 8028708:	693b      	ldr	r3, [r7, #16]
 802870a:	e034      	b.n	8028776 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 802870c:	68bb      	ldr	r3, [r7, #8]
 802870e:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8028712:	68fb      	ldr	r3, [r7, #12]
 8028714:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028716:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 8028718:	68bb      	ldr	r3, [r7, #8]
 802871a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802871c:	68ba      	ldr	r2, [r7, #8]
 802871e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8028720:	69b9      	ldr	r1, [r7, #24]
 8028722:	9103      	str	r1, [sp, #12]
 8028724:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8028726:	9102      	str	r1, [sp, #8]
 8028728:	9201      	str	r2, [sp, #4]
 802872a:	9300      	str	r3, [sp, #0]
 802872c:	4623      	mov	r3, r4
 802872e:	4602      	mov	r2, r0
 8028730:	2100      	movs	r1, #0
 8028732:	68f8      	ldr	r0, [r7, #12]
 8028734:	f7fa ff92 	bl	802365c <lfs_bd_read>
 8028738:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 802873a:	697b      	ldr	r3, [r7, #20]
 802873c:	2b00      	cmp	r3, #0
 802873e:	d001      	beq.n	8028744 <lfs_file_flushedread+0x164>
                return err;
 8028740:	697b      	ldr	r3, [r7, #20]
 8028742:	e018      	b.n	8028776 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8028744:	68bb      	ldr	r3, [r7, #8]
 8028746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028748:	69bb      	ldr	r3, [r7, #24]
 802874a:	441a      	add	r2, r3
 802874c:	68bb      	ldr	r3, [r7, #8]
 802874e:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8028750:	68bb      	ldr	r3, [r7, #8]
 8028752:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8028754:	69bb      	ldr	r3, [r7, #24]
 8028756:	441a      	add	r2, r3
 8028758:	68bb      	ldr	r3, [r7, #8]
 802875a:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 802875c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802875e:	69bb      	ldr	r3, [r7, #24]
 8028760:	4413      	add	r3, r2
 8028762:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8028764:	6a3a      	ldr	r2, [r7, #32]
 8028766:	69bb      	ldr	r3, [r7, #24]
 8028768:	1ad3      	subs	r3, r2, r3
 802876a:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 802876c:	6a3b      	ldr	r3, [r7, #32]
 802876e:	2b00      	cmp	r3, #0
 8028770:	f47f af56 	bne.w	8028620 <lfs_file_flushedread+0x40>
    }

    return size;
 8028774:	683b      	ldr	r3, [r7, #0]
}
 8028776:	4618      	mov	r0, r3
 8028778:	3728      	adds	r7, #40	; 0x28
 802877a:	46bd      	mov	sp, r7
 802877c:	bdb0      	pop	{r4, r5, r7, pc}
 802877e:	bf00      	nop
 8028780:	fff7fc00 	.word	0xfff7fc00

08028784 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8028784:	b580      	push	{r7, lr}
 8028786:	b086      	sub	sp, #24
 8028788:	af00      	add	r7, sp, #0
 802878a:	60f8      	str	r0, [r7, #12]
 802878c:	60b9      	str	r1, [r7, #8]
 802878e:	607a      	str	r2, [r7, #4]
 8028790:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8028792:	68bb      	ldr	r3, [r7, #8]
 8028794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028796:	f003 0301 	and.w	r3, r3, #1
 802879a:	2b00      	cmp	r3, #0
 802879c:	d106      	bne.n	80287ac <lfs_file_rawread+0x28>
 802879e:	4b11      	ldr	r3, [pc, #68]	; (80287e4 <lfs_file_rawread+0x60>)
 80287a0:	4a11      	ldr	r2, [pc, #68]	; (80287e8 <lfs_file_rawread+0x64>)
 80287a2:	f640 41ea 	movw	r1, #3306	; 0xcea
 80287a6:	4811      	ldr	r0, [pc, #68]	; (80287ec <lfs_file_rawread+0x68>)
 80287a8:	f003 fdc0 	bl	802c32c <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80287ac:	68bb      	ldr	r3, [r7, #8]
 80287ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80287b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80287b4:	2b00      	cmp	r3, #0
 80287b6:	d009      	beq.n	80287cc <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 80287b8:	68b9      	ldr	r1, [r7, #8]
 80287ba:	68f8      	ldr	r0, [r7, #12]
 80287bc:	f7ff fdb0 	bl	8028320 <lfs_file_flush>
 80287c0:	6178      	str	r0, [r7, #20]
        if (err) {
 80287c2:	697b      	ldr	r3, [r7, #20]
 80287c4:	2b00      	cmp	r3, #0
 80287c6:	d001      	beq.n	80287cc <lfs_file_rawread+0x48>
            return err;
 80287c8:	697b      	ldr	r3, [r7, #20]
 80287ca:	e006      	b.n	80287da <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 80287cc:	683b      	ldr	r3, [r7, #0]
 80287ce:	687a      	ldr	r2, [r7, #4]
 80287d0:	68b9      	ldr	r1, [r7, #8]
 80287d2:	68f8      	ldr	r0, [r7, #12]
 80287d4:	f7ff ff04 	bl	80285e0 <lfs_file_flushedread>
 80287d8:	4603      	mov	r3, r0
}
 80287da:	4618      	mov	r0, r3
 80287dc:	3718      	adds	r7, #24
 80287de:	46bd      	mov	sp, r7
 80287e0:	bd80      	pop	{r7, pc}
 80287e2:	bf00      	nop
 80287e4:	08033654 	.word	0x08033654
 80287e8:	08034644 	.word	0x08034644
 80287ec:	08033318 	.word	0x08033318

080287f0 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80287f0:	b5b0      	push	{r4, r5, r7, lr}
 80287f2:	b090      	sub	sp, #64	; 0x40
 80287f4:	af04      	add	r7, sp, #16
 80287f6:	60f8      	str	r0, [r7, #12]
 80287f8:	60b9      	str	r1, [r7, #8]
 80287fa:	607a      	str	r2, [r7, #4]
 80287fc:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 80287fe:	687b      	ldr	r3, [r7, #4]
 8028800:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 8028802:	683b      	ldr	r3, [r7, #0]
 8028804:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8028806:	68bb      	ldr	r3, [r7, #8]
 8028808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802880a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802880e:	2b00      	cmp	r3, #0
 8028810:	f000 810c 	beq.w	8028a2c <lfs_file_flushedwrite+0x23c>
            lfs_max(file->pos+nsize, file->ctz.size) >
 8028814:	68bb      	ldr	r3, [r7, #8]
 8028816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802881a:	441a      	add	r2, r3
 802881c:	68bb      	ldr	r3, [r7, #8]
 802881e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028820:	4619      	mov	r1, r3
 8028822:	4610      	mov	r0, r2
 8028824:	f7fa fe2e 	bl	8023484 <lfs_max>
 8028828:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 802882a:	68fb      	ldr	r3, [r7, #12]
 802882c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802882e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 8028830:	68fb      	ldr	r3, [r7, #12]
 8028832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8028836:	2b00      	cmp	r3, #0
 8028838:	d004      	beq.n	8028844 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 802883a:	68fb      	ldr	r3, [r7, #12]
 802883c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802883e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8028840:	08db      	lsrs	r3, r3, #3
 8028842:	e003      	b.n	802884c <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8028844:	68fb      	ldr	r3, [r7, #12]
 8028846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028848:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 802884a:	08db      	lsrs	r3, r3, #3
 802884c:	4619      	mov	r1, r3
 802884e:	4610      	mov	r0, r2
 8028850:	f7fa fe28 	bl	80234a4 <lfs_min>
 8028854:	4603      	mov	r3, r0
 8028856:	4619      	mov	r1, r3
 8028858:	f240 30fe 	movw	r0, #1022	; 0x3fe
 802885c:	f7fa fe22 	bl	80234a4 <lfs_min>
 8028860:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 8028862:	429c      	cmp	r4, r3
 8028864:	f240 80e2 	bls.w	8028a2c <lfs_file_flushedwrite+0x23c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8028868:	68b9      	ldr	r1, [r7, #8]
 802886a:	68f8      	ldr	r0, [r7, #12]
 802886c:	f7ff fd36 	bl	80282dc <lfs_file_outline>
 8028870:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8028872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028874:	2b00      	cmp	r3, #0
 8028876:	f000 80d9 	beq.w	8028a2c <lfs_file_flushedwrite+0x23c>
            file->flags |= LFS_F_ERRED;
 802887a:	68bb      	ldr	r3, [r7, #8]
 802887c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802887e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028882:	68bb      	ldr	r3, [r7, #8]
 8028884:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8028886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028888:	e0d5      	b.n	8028a36 <lfs_file_flushedwrite+0x246>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 802888a:	68bb      	ldr	r3, [r7, #8]
 802888c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802888e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028892:	2b00      	cmp	r3, #0
 8028894:	d006      	beq.n	80288a4 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 8028896:	68bb      	ldr	r3, [r7, #8]
 8028898:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802889a:	68fb      	ldr	r3, [r7, #12]
 802889c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802889e:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 80288a0:	429a      	cmp	r2, r3
 80288a2:	d16b      	bne.n	802897c <lfs_file_flushedwrite+0x18c>
            if (!(file->flags & LFS_F_INLINE)) {
 80288a4:	68bb      	ldr	r3, [r7, #8]
 80288a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80288a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80288ac:	2b00      	cmp	r3, #0
 80288ae:	d157      	bne.n	8028960 <lfs_file_flushedwrite+0x170>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 80288b0:	68bb      	ldr	r3, [r7, #8]
 80288b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80288b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80288b8:	2b00      	cmp	r3, #0
 80288ba:	d12d      	bne.n	8028918 <lfs_file_flushedwrite+0x128>
 80288bc:	68bb      	ldr	r3, [r7, #8]
 80288be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80288c0:	2b00      	cmp	r3, #0
 80288c2:	d029      	beq.n	8028918 <lfs_file_flushedwrite+0x128>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80288c4:	68bb      	ldr	r3, [r7, #8]
 80288c6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80288ca:	68bb      	ldr	r3, [r7, #8]
 80288cc:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80288ce:	68bb      	ldr	r3, [r7, #8]
 80288d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 80288d2:	68ba      	ldr	r2, [r7, #8]
 80288d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80288d6:	3a01      	subs	r2, #1
 80288d8:	68b9      	ldr	r1, [r7, #8]
 80288da:	3138      	adds	r1, #56	; 0x38
 80288dc:	68b8      	ldr	r0, [r7, #8]
 80288de:	303c      	adds	r0, #60	; 0x3c
 80288e0:	9003      	str	r0, [sp, #12]
 80288e2:	9102      	str	r1, [sp, #8]
 80288e4:	9201      	str	r2, [sp, #4]
 80288e6:	9300      	str	r3, [sp, #0]
 80288e8:	462b      	mov	r3, r5
 80288ea:	4622      	mov	r2, r4
 80288ec:	2100      	movs	r1, #0
 80288ee:	68f8      	ldr	r0, [r7, #12]
 80288f0:	f7ff f83c 	bl	802796c <lfs_ctz_find>
 80288f4:	6238      	str	r0, [r7, #32]
                    if (err) {
 80288f6:	6a3b      	ldr	r3, [r7, #32]
 80288f8:	2b00      	cmp	r3, #0
 80288fa:	d007      	beq.n	802890c <lfs_file_flushedwrite+0x11c>
                        file->flags |= LFS_F_ERRED;
 80288fc:	68bb      	ldr	r3, [r7, #8]
 80288fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028900:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028904:	68bb      	ldr	r3, [r7, #8]
 8028906:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8028908:	6a3b      	ldr	r3, [r7, #32]
 802890a:	e094      	b.n	8028a36 <lfs_file_flushedwrite+0x246>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 802890c:	68bb      	ldr	r3, [r7, #8]
 802890e:	3340      	adds	r3, #64	; 0x40
 8028910:	4619      	mov	r1, r3
 8028912:	68f8      	ldr	r0, [r7, #12]
 8028914:	f7fa fe8b 	bl	802362e <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 8028918:	68f8      	ldr	r0, [r7, #12]
 802891a:	f7fb fd09 	bl	8024330 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 802891e:	68bb      	ldr	r3, [r7, #8]
 8028920:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8028924:	68fc      	ldr	r4, [r7, #12]
 8028926:	68bb      	ldr	r3, [r7, #8]
 8028928:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 802892a:	68bb      	ldr	r3, [r7, #8]
 802892c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802892e:	68ba      	ldr	r2, [r7, #8]
 8028930:	3238      	adds	r2, #56	; 0x38
 8028932:	68b9      	ldr	r1, [r7, #8]
 8028934:	313c      	adds	r1, #60	; 0x3c
 8028936:	9102      	str	r1, [sp, #8]
 8028938:	9201      	str	r2, [sp, #4]
 802893a:	9300      	str	r3, [sp, #0]
 802893c:	462b      	mov	r3, r5
 802893e:	4622      	mov	r2, r4
 8028940:	4601      	mov	r1, r0
 8028942:	68f8      	ldr	r0, [r7, #12]
 8028944:	f7ff f87e 	bl	8027a44 <lfs_ctz_extend>
 8028948:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 802894a:	69fb      	ldr	r3, [r7, #28]
 802894c:	2b00      	cmp	r3, #0
 802894e:	d00f      	beq.n	8028970 <lfs_file_flushedwrite+0x180>
                    file->flags |= LFS_F_ERRED;
 8028950:	68bb      	ldr	r3, [r7, #8]
 8028952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028954:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028958:	68bb      	ldr	r3, [r7, #8]
 802895a:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 802895c:	69fb      	ldr	r3, [r7, #28]
 802895e:	e06a      	b.n	8028a36 <lfs_file_flushedwrite+0x246>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8028960:	68bb      	ldr	r3, [r7, #8]
 8028962:	f06f 0201 	mvn.w	r2, #1
 8028966:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8028968:	68bb      	ldr	r3, [r7, #8]
 802896a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802896c:	68bb      	ldr	r3, [r7, #8]
 802896e:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8028970:	68bb      	ldr	r3, [r7, #8]
 8028972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028974:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8028978:	68bb      	ldr	r3, [r7, #8]
 802897a:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 802897c:	68fb      	ldr	r3, [r7, #12]
 802897e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028980:	69da      	ldr	r2, [r3, #28]
 8028982:	68bb      	ldr	r3, [r7, #8]
 8028984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028986:	1ad3      	subs	r3, r2, r3
 8028988:	4619      	mov	r1, r3
 802898a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802898c:	f7fa fd8a 	bl	80234a4 <lfs_min>
 8028990:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8028992:	68bb      	ldr	r3, [r7, #8]
 8028994:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8028998:	68fc      	ldr	r4, [r7, #12]
 802899a:	68bb      	ldr	r3, [r7, #8]
 802899c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802899e:	68ba      	ldr	r2, [r7, #8]
 80289a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80289a2:	69b9      	ldr	r1, [r7, #24]
 80289a4:	9103      	str	r1, [sp, #12]
 80289a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80289a8:	9102      	str	r1, [sp, #8]
 80289aa:	9201      	str	r2, [sp, #4]
 80289ac:	9300      	str	r3, [sp, #0]
 80289ae:	2301      	movs	r3, #1
 80289b0:	4622      	mov	r2, r4
 80289b2:	4601      	mov	r1, r0
 80289b4:	68f8      	ldr	r0, [r7, #12]
 80289b6:	f7fb f897 	bl	8023ae8 <lfs_bd_prog>
 80289ba:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80289bc:	697b      	ldr	r3, [r7, #20]
 80289be:	2b00      	cmp	r3, #0
 80289c0:	d01c      	beq.n	80289fc <lfs_file_flushedwrite+0x20c>
                if (err == LFS_ERR_CORRUPT) {
 80289c2:	697b      	ldr	r3, [r7, #20]
 80289c4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80289c8:	d007      	beq.n	80289da <lfs_file_flushedwrite+0x1ea>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 80289ca:	68bb      	ldr	r3, [r7, #8]
 80289cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80289ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80289d2:	68bb      	ldr	r3, [r7, #8]
 80289d4:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 80289d6:	697b      	ldr	r3, [r7, #20]
 80289d8:	e02d      	b.n	8028a36 <lfs_file_flushedwrite+0x246>
                    goto relocate;
 80289da:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 80289dc:	68b9      	ldr	r1, [r7, #8]
 80289de:	68f8      	ldr	r0, [r7, #12]
 80289e0:	f7ff fba2 	bl	8028128 <lfs_file_relocate>
 80289e4:	6178      	str	r0, [r7, #20]
            if (err) {
 80289e6:	697b      	ldr	r3, [r7, #20]
 80289e8:	2b00      	cmp	r3, #0
 80289ea:	d0d2      	beq.n	8028992 <lfs_file_flushedwrite+0x1a2>
                file->flags |= LFS_F_ERRED;
 80289ec:	68bb      	ldr	r3, [r7, #8]
 80289ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80289f0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80289f4:	68bb      	ldr	r3, [r7, #8]
 80289f6:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 80289f8:	697b      	ldr	r3, [r7, #20]
 80289fa:	e01c      	b.n	8028a36 <lfs_file_flushedwrite+0x246>
            break;
 80289fc:	bf00      	nop
            }
        }

        file->pos += diff;
 80289fe:	68bb      	ldr	r3, [r7, #8]
 8028a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028a02:	69bb      	ldr	r3, [r7, #24]
 8028a04:	441a      	add	r2, r3
 8028a06:	68bb      	ldr	r3, [r7, #8]
 8028a08:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8028a0a:	68bb      	ldr	r3, [r7, #8]
 8028a0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8028a0e:	69bb      	ldr	r3, [r7, #24]
 8028a10:	441a      	add	r2, r3
 8028a12:	68bb      	ldr	r3, [r7, #8]
 8028a14:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8028a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028a18:	69bb      	ldr	r3, [r7, #24]
 8028a1a:	4413      	add	r3, r2
 8028a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8028a1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8028a20:	69bb      	ldr	r3, [r7, #24]
 8028a22:	1ad3      	subs	r3, r2, r3
 8028a24:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 8028a26:	68f8      	ldr	r0, [r7, #12]
 8028a28:	f7fb fc82 	bl	8024330 <lfs_alloc_ack>
    while (nsize > 0) {
 8028a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028a2e:	2b00      	cmp	r3, #0
 8028a30:	f47f af2b 	bne.w	802888a <lfs_file_flushedwrite+0x9a>
    }

    return size;
 8028a34:	683b      	ldr	r3, [r7, #0]
}
 8028a36:	4618      	mov	r0, r3
 8028a38:	3730      	adds	r7, #48	; 0x30
 8028a3a:	46bd      	mov	sp, r7
 8028a3c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08028a40 <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8028a40:	b580      	push	{r7, lr}
 8028a42:	b08a      	sub	sp, #40	; 0x28
 8028a44:	af00      	add	r7, sp, #0
 8028a46:	60f8      	str	r0, [r7, #12]
 8028a48:	60b9      	str	r1, [r7, #8]
 8028a4a:	607a      	str	r2, [r7, #4]
 8028a4c:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8028a4e:	68bb      	ldr	r3, [r7, #8]
 8028a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028a52:	f003 0302 	and.w	r3, r3, #2
 8028a56:	2b00      	cmp	r3, #0
 8028a58:	d106      	bne.n	8028a68 <lfs_file_rawwrite+0x28>
 8028a5a:	4b38      	ldr	r3, [pc, #224]	; (8028b3c <lfs_file_rawwrite+0xfc>)
 8028a5c:	4a38      	ldr	r2, [pc, #224]	; (8028b40 <lfs_file_rawwrite+0x100>)
 8028a5e:	f640 5155 	movw	r1, #3413	; 0xd55
 8028a62:	4838      	ldr	r0, [pc, #224]	; (8028b44 <lfs_file_rawwrite+0x104>)
 8028a64:	f003 fc62 	bl	802c32c <__assert_func>

    if (file->flags & LFS_F_READING) {
 8028a68:	68bb      	ldr	r3, [r7, #8]
 8028a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028a6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028a70:	2b00      	cmp	r3, #0
 8028a72:	d009      	beq.n	8028a88 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8028a74:	68b9      	ldr	r1, [r7, #8]
 8028a76:	68f8      	ldr	r0, [r7, #12]
 8028a78:	f7ff fc52 	bl	8028320 <lfs_file_flush>
 8028a7c:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8028a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028a80:	2b00      	cmp	r3, #0
 8028a82:	d001      	beq.n	8028a88 <lfs_file_rawwrite+0x48>
            return err;
 8028a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028a86:	e055      	b.n	8028b34 <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8028a88:	68bb      	ldr	r3, [r7, #8]
 8028a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028a8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8028a90:	2b00      	cmp	r3, #0
 8028a92:	d009      	beq.n	8028aa8 <lfs_file_rawwrite+0x68>
 8028a94:	68bb      	ldr	r3, [r7, #8]
 8028a96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028a98:	68bb      	ldr	r3, [r7, #8]
 8028a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028a9c:	429a      	cmp	r2, r3
 8028a9e:	d203      	bcs.n	8028aa8 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 8028aa0:	68bb      	ldr	r3, [r7, #8]
 8028aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028aa4:	68bb      	ldr	r3, [r7, #8]
 8028aa6:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8028aa8:	68bb      	ldr	r3, [r7, #8]
 8028aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028aac:	683b      	ldr	r3, [r7, #0]
 8028aae:	441a      	add	r2, r3
 8028ab0:	68fb      	ldr	r3, [r7, #12]
 8028ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028ab4:	429a      	cmp	r2, r3
 8028ab6:	d902      	bls.n	8028abe <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8028ab8:	f06f 031a 	mvn.w	r3, #26
 8028abc:	e03a      	b.n	8028b34 <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8028abe:	68bb      	ldr	r3, [r7, #8]
 8028ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028ac6:	2b00      	cmp	r3, #0
 8028ac8:	d121      	bne.n	8028b0e <lfs_file_rawwrite+0xce>
 8028aca:	68bb      	ldr	r3, [r7, #8]
 8028acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028ace:	68bb      	ldr	r3, [r7, #8]
 8028ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028ad2:	429a      	cmp	r2, r3
 8028ad4:	d91b      	bls.n	8028b0e <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8028ad6:	68bb      	ldr	r3, [r7, #8]
 8028ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028ada:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8028adc:	68bb      	ldr	r3, [r7, #8]
 8028ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028ae0:	68bb      	ldr	r3, [r7, #8]
 8028ae2:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8028ae4:	e00e      	b.n	8028b04 <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8028ae6:	2300      	movs	r3, #0
 8028ae8:	75fb      	strb	r3, [r7, #23]
 8028aea:	f107 0217 	add.w	r2, r7, #23
 8028aee:	2301      	movs	r3, #1
 8028af0:	68b9      	ldr	r1, [r7, #8]
 8028af2:	68f8      	ldr	r0, [r7, #12]
 8028af4:	f7ff fe7c 	bl	80287f0 <lfs_file_flushedwrite>
 8028af8:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8028afa:	69fb      	ldr	r3, [r7, #28]
 8028afc:	2b00      	cmp	r3, #0
 8028afe:	da01      	bge.n	8028b04 <lfs_file_rawwrite+0xc4>
                return res;
 8028b00:	69fb      	ldr	r3, [r7, #28]
 8028b02:	e017      	b.n	8028b34 <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 8028b04:	68bb      	ldr	r3, [r7, #8]
 8028b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028b08:	6a3a      	ldr	r2, [r7, #32]
 8028b0a:	429a      	cmp	r2, r3
 8028b0c:	d8eb      	bhi.n	8028ae6 <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8028b0e:	683b      	ldr	r3, [r7, #0]
 8028b10:	687a      	ldr	r2, [r7, #4]
 8028b12:	68b9      	ldr	r1, [r7, #8]
 8028b14:	68f8      	ldr	r0, [r7, #12]
 8028b16:	f7ff fe6b 	bl	80287f0 <lfs_file_flushedwrite>
 8028b1a:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8028b1c:	69bb      	ldr	r3, [r7, #24]
 8028b1e:	2b00      	cmp	r3, #0
 8028b20:	da01      	bge.n	8028b26 <lfs_file_rawwrite+0xe6>
        return nsize;
 8028b22:	69bb      	ldr	r3, [r7, #24]
 8028b24:	e006      	b.n	8028b34 <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8028b26:	68bb      	ldr	r3, [r7, #8]
 8028b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028b2a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8028b2e:	68bb      	ldr	r3, [r7, #8]
 8028b30:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 8028b32:	69bb      	ldr	r3, [r7, #24]
}
 8028b34:	4618      	mov	r0, r3
 8028b36:	3728      	adds	r7, #40	; 0x28
 8028b38:	46bd      	mov	sp, r7
 8028b3a:	bd80      	pop	{r7, pc}
 8028b3c:	08033684 	.word	0x08033684
 8028b40:	08034658 	.word	0x08034658
 8028b44:	08033318 	.word	0x08033318

08028b48 <lfs_file_rawseek>:
#endif

static lfs_soff_t lfs_file_rawseek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8028b48:	b580      	push	{r7, lr}
 8028b4a:	b08c      	sub	sp, #48	; 0x30
 8028b4c:	af00      	add	r7, sp, #0
 8028b4e:	60f8      	str	r0, [r7, #12]
 8028b50:	60b9      	str	r1, [r7, #8]
 8028b52:	607a      	str	r2, [r7, #4]
 8028b54:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8028b56:	68bb      	ldr	r3, [r7, #8]
 8028b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (whence == LFS_SEEK_SET) {
 8028b5c:	683b      	ldr	r3, [r7, #0]
 8028b5e:	2b00      	cmp	r3, #0
 8028b60:	d102      	bne.n	8028b68 <lfs_file_rawseek+0x20>
        npos = off;
 8028b62:	687b      	ldr	r3, [r7, #4]
 8028b64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8028b66:	e025      	b.n	8028bb4 <lfs_file_rawseek+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8028b68:	683b      	ldr	r3, [r7, #0]
 8028b6a:	2b01      	cmp	r3, #1
 8028b6c:	d10f      	bne.n	8028b8e <lfs_file_rawseek+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8028b6e:	68bb      	ldr	r3, [r7, #8]
 8028b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028b72:	461a      	mov	r2, r3
 8028b74:	687b      	ldr	r3, [r7, #4]
 8028b76:	4413      	add	r3, r2
 8028b78:	2b00      	cmp	r3, #0
 8028b7a:	da02      	bge.n	8028b82 <lfs_file_rawseek+0x3a>
            return LFS_ERR_INVAL;
 8028b7c:	f06f 0315 	mvn.w	r3, #21
 8028b80:	e067      	b.n	8028c52 <lfs_file_rawseek+0x10a>
        } else {
            npos = file->pos + off;
 8028b82:	68bb      	ldr	r3, [r7, #8]
 8028b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028b86:	687b      	ldr	r3, [r7, #4]
 8028b88:	4413      	add	r3, r2
 8028b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8028b8c:	e012      	b.n	8028bb4 <lfs_file_rawseek+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8028b8e:	683b      	ldr	r3, [r7, #0]
 8028b90:	2b02      	cmp	r3, #2
 8028b92:	d10f      	bne.n	8028bb4 <lfs_file_rawseek+0x6c>
        lfs_soff_t res = lfs_file_rawsize(lfs, file) + off;
 8028b94:	68b9      	ldr	r1, [r7, #8]
 8028b96:	68f8      	ldr	r0, [r7, #12]
 8028b98:	f000 f85f 	bl	8028c5a <lfs_file_rawsize>
 8028b9c:	4602      	mov	r2, r0
 8028b9e:	687b      	ldr	r3, [r7, #4]
 8028ba0:	4413      	add	r3, r2
 8028ba2:	62bb      	str	r3, [r7, #40]	; 0x28
        if (res < 0) {
 8028ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028ba6:	2b00      	cmp	r3, #0
 8028ba8:	da02      	bge.n	8028bb0 <lfs_file_rawseek+0x68>
            return LFS_ERR_INVAL;
 8028baa:	f06f 0315 	mvn.w	r3, #21
 8028bae:	e050      	b.n	8028c52 <lfs_file_rawseek+0x10a>
        } else {
            npos = res;
 8028bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    if (npos > lfs->file_max) {
 8028bb4:	68fb      	ldr	r3, [r7, #12]
 8028bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028bba:	429a      	cmp	r2, r3
 8028bbc:	d902      	bls.n	8028bc4 <lfs_file_rawseek+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 8028bbe:	f06f 0315 	mvn.w	r3, #21
 8028bc2:	e046      	b.n	8028c52 <lfs_file_rawseek+0x10a>
    }

    if (file->pos == npos) {
 8028bc4:	68bb      	ldr	r3, [r7, #8]
 8028bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028bca:	429a      	cmp	r2, r3
 8028bcc:	d101      	bne.n	8028bd2 <lfs_file_rawseek+0x8a>
        // noop - position has not changed
        return npos;
 8028bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028bd0:	e03f      	b.n	8028c52 <lfs_file_rawseek+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 8028bd2:	68bb      	ldr	r3, [r7, #8]
 8028bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    if (
 8028bda:	2b00      	cmp	r3, #0
 8028bdc:	d12b      	bne.n	8028c36 <lfs_file_rawseek+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 8028bde:	68bb      	ldr	r3, [r7, #8]
 8028be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028be2:	61bb      	str	r3, [r7, #24]
 8028be4:	f107 0318 	add.w	r3, r7, #24
 8028be8:	4619      	mov	r1, r3
 8028bea:	68f8      	ldr	r0, [r7, #12]
 8028bec:	f7fe fe86 	bl	80278fc <lfs_ctz_index>
 8028bf0:	6278      	str	r0, [r7, #36]	; 0x24
        lfs_off_t noff = npos;
 8028bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028bf4:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 8028bf6:	f107 0314 	add.w	r3, r7, #20
 8028bfa:	4619      	mov	r1, r3
 8028bfc:	68f8      	ldr	r0, [r7, #12]
 8028bfe:	f7fe fe7d 	bl	80278fc <lfs_ctz_index>
 8028c02:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 8028c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028c06:	6a3b      	ldr	r3, [r7, #32]
 8028c08:	429a      	cmp	r2, r3
 8028c0a:	d114      	bne.n	8028c36 <lfs_file_rawseek+0xee>
                && noff >= file->cache.off
 8028c0c:	68bb      	ldr	r3, [r7, #8]
 8028c0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8028c10:	697b      	ldr	r3, [r7, #20]
 8028c12:	429a      	cmp	r2, r3
 8028c14:	d80f      	bhi.n	8028c36 <lfs_file_rawseek+0xee>
                && noff < file->cache.off + file->cache.size) {
 8028c16:	68bb      	ldr	r3, [r7, #8]
 8028c18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8028c1a:	68bb      	ldr	r3, [r7, #8]
 8028c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8028c1e:	441a      	add	r2, r3
 8028c20:	697b      	ldr	r3, [r7, #20]
 8028c22:	429a      	cmp	r2, r3
 8028c24:	d907      	bls.n	8028c36 <lfs_file_rawseek+0xee>
            file->pos = npos;
 8028c26:	68bb      	ldr	r3, [r7, #8]
 8028c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028c2a:	635a      	str	r2, [r3, #52]	; 0x34
            file->off = noff;
 8028c2c:	697a      	ldr	r2, [r7, #20]
 8028c2e:	68bb      	ldr	r3, [r7, #8]
 8028c30:	63da      	str	r2, [r3, #60]	; 0x3c
            return npos;
 8028c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028c34:	e00d      	b.n	8028c52 <lfs_file_rawseek+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8028c36:	68b9      	ldr	r1, [r7, #8]
 8028c38:	68f8      	ldr	r0, [r7, #12]
 8028c3a:	f7ff fb71 	bl	8028320 <lfs_file_flush>
 8028c3e:	61f8      	str	r0, [r7, #28]
    if (err) {
 8028c40:	69fb      	ldr	r3, [r7, #28]
 8028c42:	2b00      	cmp	r3, #0
 8028c44:	d001      	beq.n	8028c4a <lfs_file_rawseek+0x102>
        return err;
 8028c46:	69fb      	ldr	r3, [r7, #28]
 8028c48:	e003      	b.n	8028c52 <lfs_file_rawseek+0x10a>
    }

    // update pos
    file->pos = npos;
 8028c4a:	68bb      	ldr	r3, [r7, #8]
 8028c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028c4e:	635a      	str	r2, [r3, #52]	; 0x34
    return npos;
 8028c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8028c52:	4618      	mov	r0, r3
 8028c54:	3730      	adds	r7, #48	; 0x30
 8028c56:	46bd      	mov	sp, r7
 8028c58:	bd80      	pop	{r7, pc}

08028c5a <lfs_file_rawsize>:
    }

    return 0;
}

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 8028c5a:	b580      	push	{r7, lr}
 8028c5c:	b082      	sub	sp, #8
 8028c5e:	af00      	add	r7, sp, #0
 8028c60:	6078      	str	r0, [r7, #4]
 8028c62:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8028c64:	683b      	ldr	r3, [r7, #0]
 8028c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028c6c:	2b00      	cmp	r3, #0
 8028c6e:	d009      	beq.n	8028c84 <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8028c70:	683b      	ldr	r3, [r7, #0]
 8028c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028c74:	683b      	ldr	r3, [r7, #0]
 8028c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028c78:	4619      	mov	r1, r3
 8028c7a:	4610      	mov	r0, r2
 8028c7c:	f7fa fc02 	bl	8023484 <lfs_max>
 8028c80:	4603      	mov	r3, r0
 8028c82:	e001      	b.n	8028c88 <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 8028c84:	683b      	ldr	r3, [r7, #0]
 8028c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8028c88:	4618      	mov	r0, r3
 8028c8a:	3708      	adds	r7, #8
 8028c8c:	46bd      	mov	sp, r7
 8028c8e:	bd80      	pop	{r7, pc}

08028c90 <lfs_rawstat>:


/// General fs operations ///
static int lfs_rawstat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 8028c90:	b580      	push	{r7, lr}
 8028c92:	b08e      	sub	sp, #56	; 0x38
 8028c94:	af00      	add	r7, sp, #0
 8028c96:	60f8      	str	r0, [r7, #12]
 8028c98:	60b9      	str	r1, [r7, #8]
 8028c9a:	607a      	str	r2, [r7, #4]
    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8028c9c:	f107 0208 	add.w	r2, r7, #8
 8028ca0:	f107 0114 	add.w	r1, r7, #20
 8028ca4:	2300      	movs	r3, #0
 8028ca6:	68f8      	ldr	r0, [r7, #12]
 8028ca8:	f7fc feae 	bl	8025a08 <lfs_dir_find>
 8028cac:	6378      	str	r0, [r7, #52]	; 0x34
    if (tag < 0) {
 8028cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028cb0:	2b00      	cmp	r3, #0
 8028cb2:	da01      	bge.n	8028cb8 <lfs_rawstat+0x28>
        return (int)tag;
 8028cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028cb6:	e00c      	b.n	8028cd2 <lfs_rawstat+0x42>
    }

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 8028cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028cba:	4618      	mov	r0, r3
 8028cbc:	f7fb f908 	bl	8023ed0 <lfs_tag_id>
 8028cc0:	4603      	mov	r3, r0
 8028cc2:	461a      	mov	r2, r3
 8028cc4:	f107 0114 	add.w	r1, r7, #20
 8028cc8:	687b      	ldr	r3, [r7, #4]
 8028cca:	68f8      	ldr	r0, [r7, #12]
 8028ccc:	f7fc fdd8 	bl	8025880 <lfs_dir_getinfo>
 8028cd0:	4603      	mov	r3, r0
}
 8028cd2:	4618      	mov	r0, r3
 8028cd4:	3738      	adds	r7, #56	; 0x38
 8028cd6:	46bd      	mov	sp, r7
 8028cd8:	bd80      	pop	{r7, pc}
	...

08028cdc <lfs_rawremove>:

#ifndef LFS_READONLY
static int lfs_rawremove(lfs_t *lfs, const char *path) {
 8028cdc:	b580      	push	{r7, lr}
 8028cde:	b0a0      	sub	sp, #128	; 0x80
 8028ce0:	af02      	add	r7, sp, #8
 8028ce2:	6078      	str	r0, [r7, #4]
 8028ce4:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8028ce6:	6878      	ldr	r0, [r7, #4]
 8028ce8:	f001 fba2 	bl	802a430 <lfs_fs_forceconsistency>
 8028cec:	6778      	str	r0, [r7, #116]	; 0x74
    if (err) {
 8028cee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028cf0:	2b00      	cmp	r3, #0
 8028cf2:	d001      	beq.n	8028cf8 <lfs_rawremove+0x1c>
        return err;
 8028cf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028cf6:	e0c4      	b.n	8028e82 <lfs_rawremove+0x1a6>
    }

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8028cf8:	463a      	mov	r2, r7
 8028cfa:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8028cfe:	2300      	movs	r3, #0
 8028d00:	6878      	ldr	r0, [r7, #4]
 8028d02:	f7fc fe81 	bl	8025a08 <lfs_dir_find>
 8028d06:	6738      	str	r0, [r7, #112]	; 0x70
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 8028d08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028d0a:	2b00      	cmp	r3, #0
 8028d0c:	db09      	blt.n	8028d22 <lfs_rawremove+0x46>
 8028d0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028d10:	4618      	mov	r0, r3
 8028d12:	f7fb f8dd 	bl	8023ed0 <lfs_tag_id>
 8028d16:	4603      	mov	r3, r0
 8028d18:	461a      	mov	r2, r3
 8028d1a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8028d1e:	429a      	cmp	r2, r3
 8028d20:	d107      	bne.n	8028d32 <lfs_rawremove+0x56>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 8028d22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028d24:	2b00      	cmp	r3, #0
 8028d26:	da01      	bge.n	8028d2c <lfs_rawremove+0x50>
 8028d28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028d2a:	e0aa      	b.n	8028e82 <lfs_rawremove+0x1a6>
 8028d2c:	f06f 0315 	mvn.w	r3, #21
 8028d30:	e0a7      	b.n	8028e82 <lfs_rawremove+0x1a6>
    }

    struct lfs_mlist dir;
    dir.next = lfs->mlist;
 8028d32:	687b      	ldr	r3, [r7, #4]
 8028d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028d36:	627b      	str	r3, [r7, #36]	; 0x24
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8028d38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028d3a:	4618      	mov	r0, r3
 8028d3c:	f7fb f89e 	bl	8023e7c <lfs_tag_type3>
 8028d40:	4603      	mov	r3, r0
 8028d42:	2b02      	cmp	r3, #2
 8028d44:	d14a      	bne.n	8028ddc <lfs_rawremove+0x100>
        // must be empty before removal
        lfs_block_t pair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8028d46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028d48:	4618      	mov	r0, r3
 8028d4a:	f7fb f8c1 	bl	8023ed0 <lfs_tag_id>
 8028d4e:	4603      	mov	r3, r0
 8028d50:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8028d52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8028d56:	f043 0308 	orr.w	r3, r3, #8
 8028d5a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8028d5e:	f107 020c 	add.w	r2, r7, #12
 8028d62:	9200      	str	r2, [sp, #0]
 8028d64:	4a49      	ldr	r2, [pc, #292]	; (8028e8c <lfs_rawremove+0x1b0>)
 8028d66:	6878      	ldr	r0, [r7, #4]
 8028d68:	f7fb fc9c 	bl	80246a4 <lfs_dir_get>
 8028d6c:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (res < 0) {
 8028d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8028d70:	2b00      	cmp	r3, #0
 8028d72:	da01      	bge.n	8028d78 <lfs_rawremove+0x9c>
            return (int)res;
 8028d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8028d76:	e084      	b.n	8028e82 <lfs_rawremove+0x1a6>
        }
        lfs_pair_fromle32(pair);
 8028d78:	f107 030c 	add.w	r3, r7, #12
 8028d7c:	4618      	mov	r0, r3
 8028d7e:	f7fb f818 	bl	8023db2 <lfs_pair_fromle32>

        err = lfs_dir_fetch(lfs, &dir.m, pair);
 8028d82:	f107 020c 	add.w	r2, r7, #12
 8028d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8028d8a:	3308      	adds	r3, #8
 8028d8c:	4619      	mov	r1, r3
 8028d8e:	6878      	ldr	r0, [r7, #4]
 8028d90:	f7fc fd28 	bl	80257e4 <lfs_dir_fetch>
 8028d94:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8028d96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028d98:	2b00      	cmp	r3, #0
 8028d9a:	d001      	beq.n	8028da0 <lfs_rawremove+0xc4>
            return err;
 8028d9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028d9e:	e070      	b.n	8028e82 <lfs_rawremove+0x1a6>
        }

        if (dir.m.count > 0 || dir.m.split) {
 8028da0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8028da4:	2b00      	cmp	r3, #0
 8028da6:	d103      	bne.n	8028db0 <lfs_rawremove+0xd4>
 8028da8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8028dac:	2b00      	cmp	r3, #0
 8028dae:	d002      	beq.n	8028db6 <lfs_rawremove+0xda>
            return LFS_ERR_NOTEMPTY;
 8028db0:	f06f 0326 	mvn.w	r3, #38	; 0x26
 8028db4:	e065      	b.n	8028e82 <lfs_rawremove+0x1a6>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 8028db6:	2101      	movs	r1, #1
 8028db8:	6878      	ldr	r0, [r7, #4]
 8028dba:	f001 f8bb 	bl	8029f34 <lfs_fs_preporphans>
 8028dbe:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8028dc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028dc2:	2b00      	cmp	r3, #0
 8028dc4:	d001      	beq.n	8028dca <lfs_rawremove+0xee>
            return err;
 8028dc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028dc8:	e05b      	b.n	8028e82 <lfs_rawremove+0x1a6>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
 8028dca:	2300      	movs	r3, #0
 8028dcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        dir.id = 0;
 8028dd0:	2300      	movs	r3, #0
 8028dd2:	853b      	strh	r3, [r7, #40]	; 0x28
        lfs->mlist = &dir;
 8028dd4:	687b      	ldr	r3, [r7, #4]
 8028dd6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8028dda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 8028ddc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028dde:	4618      	mov	r0, r3
 8028de0:	f7fb f876 	bl	8023ed0 <lfs_tag_id>
 8028de4:	4603      	mov	r3, r0
 8028de6:	029b      	lsls	r3, r3, #10
 8028de8:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8028dec:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8028df0:	61fb      	str	r3, [r7, #28]
 8028df2:	2300      	movs	r3, #0
 8028df4:	623b      	str	r3, [r7, #32]
 8028df6:	f107 021c 	add.w	r2, r7, #28
 8028dfa:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8028dfe:	2301      	movs	r3, #1
 8028e00:	6878      	ldr	r0, [r7, #4]
 8028e02:	f7fe fb09 	bl	8027418 <lfs_dir_commit>
 8028e06:	6778      	str	r0, [r7, #116]	; 0x74
            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));
    if (err) {
 8028e08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028e0a:	2b00      	cmp	r3, #0
 8028e0c:	d004      	beq.n	8028e18 <lfs_rawremove+0x13c>
        lfs->mlist = dir.next;
 8028e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028e10:	687b      	ldr	r3, [r7, #4]
 8028e12:	629a      	str	r2, [r3, #40]	; 0x28
        return err;
 8028e14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028e16:	e034      	b.n	8028e82 <lfs_rawremove+0x1a6>
    }

    lfs->mlist = dir.next;
 8028e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028e1a:	687b      	ldr	r3, [r7, #4]
 8028e1c:	629a      	str	r2, [r3, #40]	; 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8028e1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028e20:	4618      	mov	r0, r3
 8028e22:	f7fb f82b 	bl	8023e7c <lfs_tag_type3>
 8028e26:	4603      	mov	r3, r0
 8028e28:	2b02      	cmp	r3, #2
 8028e2a:	d129      	bne.n	8028e80 <lfs_rawremove+0x1a4>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 8028e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8028e30:	6878      	ldr	r0, [r7, #4]
 8028e32:	f001 f87f 	bl	8029f34 <lfs_fs_preporphans>
 8028e36:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8028e38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028e3a:	2b00      	cmp	r3, #0
 8028e3c:	d001      	beq.n	8028e42 <lfs_rawremove+0x166>
            return err;
 8028e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028e40:	e01f      	b.n	8028e82 <lfs_rawremove+0x1a6>
        }

        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 8028e42:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8028e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8028e4a:	3308      	adds	r3, #8
 8028e4c:	4619      	mov	r1, r3
 8028e4e:	6878      	ldr	r0, [r7, #4]
 8028e50:	f000 ff90 	bl	8029d74 <lfs_fs_pred>
 8028e54:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8028e56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028e58:	2b00      	cmp	r3, #0
 8028e5a:	d001      	beq.n	8028e60 <lfs_rawremove+0x184>
            return err;
 8028e5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028e5e:	e010      	b.n	8028e82 <lfs_rawremove+0x1a6>
        }

        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 8028e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8028e64:	f103 0208 	add.w	r2, r3, #8
 8028e68:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8028e6c:	4619      	mov	r1, r3
 8028e6e:	6878      	ldr	r0, [r7, #4]
 8028e70:	f7fd f930 	bl	80260d4 <lfs_dir_drop>
 8028e74:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8028e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028e78:	2b00      	cmp	r3, #0
 8028e7a:	d001      	beq.n	8028e80 <lfs_rawremove+0x1a4>
            return err;
 8028e7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028e7e:	e000      	b.n	8028e82 <lfs_rawremove+0x1a6>
        }
    }

    return 0;
 8028e80:	2300      	movs	r3, #0
}
 8028e82:	4618      	mov	r0, r3
 8028e84:	3778      	adds	r7, #120	; 0x78
 8028e86:	46bd      	mov	sp, r7
 8028e88:	bd80      	pop	{r7, pc}
 8028e8a:	bf00      	nop
 8028e8c:	700ffc00 	.word	0x700ffc00

08028e90 <lfs_rawrename>:
#endif

#ifndef LFS_READONLY
static int lfs_rawrename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 8028e90:	b590      	push	{r4, r7, lr}
 8028e92:	b0c3      	sub	sp, #268	; 0x10c
 8028e94:	af02      	add	r7, sp, #8
 8028e96:	60f8      	str	r0, [r7, #12]
 8028e98:	60b9      	str	r1, [r7, #8]
 8028e9a:	607a      	str	r2, [r7, #4]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8028e9c:	68f8      	ldr	r0, [r7, #12]
 8028e9e:	f001 fac7 	bl	802a430 <lfs_fs_forceconsistency>
 8028ea2:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
    if (err) {
 8028ea6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8028eaa:	2b00      	cmp	r3, #0
 8028eac:	d002      	beq.n	8028eb4 <lfs_rawrename+0x24>
        return err;
 8028eae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8028eb2:	e1f7      	b.n	80292a4 <lfs_rawrename+0x414>
    }

    // find old entry
    lfs_mdir_t oldcwd;
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
 8028eb4:	f107 0208 	add.w	r2, r7, #8
 8028eb8:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8028ebc:	2300      	movs	r3, #0
 8028ebe:	68f8      	ldr	r0, [r7, #12]
 8028ec0:	f7fc fda2 	bl	8025a08 <lfs_dir_find>
 8028ec4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 8028ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028ecc:	2b00      	cmp	r3, #0
 8028ece:	db0a      	blt.n	8028ee6 <lfs_rawrename+0x56>
 8028ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028ed4:	4618      	mov	r0, r3
 8028ed6:	f7fa fffb 	bl	8023ed0 <lfs_tag_id>
 8028eda:	4603      	mov	r3, r0
 8028edc:	461a      	mov	r2, r3
 8028ede:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8028ee2:	429a      	cmp	r2, r3
 8028ee4:	d109      	bne.n	8028efa <lfs_rawrename+0x6a>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
 8028ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028eea:	2b00      	cmp	r3, #0
 8028eec:	da02      	bge.n	8028ef4 <lfs_rawrename+0x64>
 8028eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028ef2:	e1d7      	b.n	80292a4 <lfs_rawrename+0x414>
 8028ef4:	f06f 0315 	mvn.w	r3, #21
 8028ef8:	e1d4      	b.n	80292a4 <lfs_rawrename+0x414>
    }

    // find new entry
    lfs_mdir_t newcwd;
    uint16_t newid;
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
 8028efa:	f107 03a2 	add.w	r3, r7, #162	; 0xa2
 8028efe:	1d3a      	adds	r2, r7, #4
 8028f00:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8028f04:	68f8      	ldr	r0, [r7, #12]
 8028f06:	f7fc fd7f 	bl	8025a08 <lfs_dir_find>
 8028f0a:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 8028f0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8028f12:	2b00      	cmp	r3, #0
 8028f14:	db0a      	blt.n	8028f2c <lfs_rawrename+0x9c>
 8028f16:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8028f1a:	4618      	mov	r0, r3
 8028f1c:	f7fa ffd8 	bl	8023ed0 <lfs_tag_id>
 8028f20:	4603      	mov	r3, r0
 8028f22:	461a      	mov	r2, r3
 8028f24:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8028f28:	429a      	cmp	r2, r3
 8028f2a:	d114      	bne.n	8028f56 <lfs_rawrename+0xc6>
 8028f2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8028f30:	f113 0f02 	cmn.w	r3, #2
 8028f34:	d105      	bne.n	8028f42 <lfs_rawrename+0xb2>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
 8028f36:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8028f3a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8028f3e:	4293      	cmp	r3, r2
 8028f40:	d109      	bne.n	8028f56 <lfs_rawrename+0xc6>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
 8028f42:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8028f46:	2b00      	cmp	r3, #0
 8028f48:	da02      	bge.n	8028f50 <lfs_rawrename+0xc0>
 8028f4a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8028f4e:	e1a9      	b.n	80292a4 <lfs_rawrename+0x414>
 8028f50:	f06f 0315 	mvn.w	r3, #21
 8028f54:	e1a6      	b.n	80292a4 <lfs_rawrename+0x414>
    }

    // if we're in the same pair there's a few special cases...
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
 8028f56:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8028f5a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8028f5e:	4611      	mov	r1, r2
 8028f60:	4618      	mov	r0, r3
 8028f62:	f7fa fecf 	bl	8023d04 <lfs_pair_cmp>
 8028f66:	4603      	mov	r3, r0
 8028f68:	2b00      	cmp	r3, #0
 8028f6a:	bf0c      	ite	eq
 8028f6c:	2301      	moveq	r3, #1
 8028f6e:	2300      	movne	r3, #0
 8028f70:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    uint16_t newoldid = lfs_tag_id(oldtag);
 8028f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028f78:	4618      	mov	r0, r3
 8028f7a:	f7fa ffa9 	bl	8023ed0 <lfs_tag_id>
 8028f7e:	4603      	mov	r3, r0
 8028f80:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
 8028f84:	68fb      	ldr	r3, [r7, #12]
 8028f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028f88:	67bb      	str	r3, [r7, #120]	; 0x78
    if (prevtag == LFS_ERR_NOENT) {
 8028f8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8028f8e:	f113 0f02 	cmn.w	r3, #2
 8028f92:	d11f      	bne.n	8028fd4 <lfs_rawrename+0x144>
        // check that name fits
        lfs_size_t nlen = strlen(newpath);
 8028f94:	687b      	ldr	r3, [r7, #4]
 8028f96:	4618      	mov	r0, r3
 8028f98:	f7e7 f982 	bl	80102a0 <strlen>
 8028f9c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
        if (nlen > lfs->name_max) {
 8028fa0:	68fb      	ldr	r3, [r7, #12]
 8028fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8028fa4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8028fa8:	429a      	cmp	r2, r3
 8028faa:	d902      	bls.n	8028fb2 <lfs_rawrename+0x122>
            return LFS_ERR_NAMETOOLONG;
 8028fac:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8028fb0:	e178      	b.n	80292a4 <lfs_rawrename+0x414>
        }

        // there is a small chance we are being renamed in the same
        // directory/ to an id less than our old id, the global update
        // to handle this is a bit messy
        if (samepair && newid <= newoldid) {
 8028fb2:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8028fb6:	2b00      	cmp	r3, #0
 8028fb8:	f000 8084 	beq.w	80290c4 <lfs_rawrename+0x234>
 8028fbc:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8028fc0:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8028fc4:	429a      	cmp	r2, r3
 8028fc6:	d37d      	bcc.n	80290c4 <lfs_rawrename+0x234>
            newoldid += 1;
 8028fc8:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8028fcc:	3301      	adds	r3, #1
 8028fce:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8028fd2:	e077      	b.n	80290c4 <lfs_rawrename+0x234>
        }
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
 8028fd4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8028fd8:	4618      	mov	r0, r3
 8028fda:	f7fa ff4f 	bl	8023e7c <lfs_tag_type3>
 8028fde:	4603      	mov	r3, r0
 8028fe0:	461c      	mov	r4, r3
 8028fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028fe6:	4618      	mov	r0, r3
 8028fe8:	f7fa ff48 	bl	8023e7c <lfs_tag_type3>
 8028fec:	4603      	mov	r3, r0
 8028fee:	429c      	cmp	r4, r3
 8028ff0:	d002      	beq.n	8028ff8 <lfs_rawrename+0x168>
        return LFS_ERR_ISDIR;
 8028ff2:	f06f 0314 	mvn.w	r3, #20
 8028ff6:	e155      	b.n	80292a4 <lfs_rawrename+0x414>
    } else if (samepair && newid == newoldid) {
 8028ff8:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8028ffc:	2b00      	cmp	r3, #0
 8028ffe:	d007      	beq.n	8029010 <lfs_rawrename+0x180>
 8029000:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8029004:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8029008:	429a      	cmp	r2, r3
 802900a:	d101      	bne.n	8029010 <lfs_rawrename+0x180>
        // we're renaming to ourselves??
        return 0;
 802900c:	2300      	movs	r3, #0
 802900e:	e149      	b.n	80292a4 <lfs_rawrename+0x414>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 8029010:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029014:	4618      	mov	r0, r3
 8029016:	f7fa ff31 	bl	8023e7c <lfs_tag_type3>
 802901a:	4603      	mov	r3, r0
 802901c:	2b02      	cmp	r3, #2
 802901e:	d151      	bne.n	80290c4 <lfs_rawrename+0x234>
        // must be empty before removal
        lfs_block_t prevpair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
 8029020:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8029024:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8029026:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802902a:	f043 0308 	orr.w	r3, r3, #8
 802902e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8029032:	f107 0220 	add.w	r2, r7, #32
 8029036:	9200      	str	r2, [sp, #0]
 8029038:	4a9d      	ldr	r2, [pc, #628]	; (80292b0 <lfs_rawrename+0x420>)
 802903a:	68f8      	ldr	r0, [r7, #12]
 802903c:	f7fb fb32 	bl	80246a4 <lfs_dir_get>
 8029040:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (res < 0) {
 8029044:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8029048:	2b00      	cmp	r3, #0
 802904a:	da02      	bge.n	8029052 <lfs_rawrename+0x1c2>
            return (int)res;
 802904c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8029050:	e128      	b.n	80292a4 <lfs_rawrename+0x414>
        }
        lfs_pair_fromle32(prevpair);
 8029052:	f107 0320 	add.w	r3, r7, #32
 8029056:	4618      	mov	r0, r3
 8029058:	f7fa feab 	bl	8023db2 <lfs_pair_fromle32>

        // must be empty before removal
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
 802905c:	f107 0220 	add.w	r2, r7, #32
 8029060:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8029064:	3308      	adds	r3, #8
 8029066:	4619      	mov	r1, r3
 8029068:	68f8      	ldr	r0, [r7, #12]
 802906a:	f7fc fbbb 	bl	80257e4 <lfs_dir_fetch>
 802906e:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 8029072:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8029076:	2b00      	cmp	r3, #0
 8029078:	d002      	beq.n	8029080 <lfs_rawrename+0x1f0>
            return err;
 802907a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802907e:	e111      	b.n	80292a4 <lfs_rawrename+0x414>
        }

        if (prevdir.m.count > 0 || prevdir.m.split) {
 8029080:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8029084:	2b00      	cmp	r3, #0
 8029086:	d103      	bne.n	8029090 <lfs_rawrename+0x200>
 8029088:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 802908c:	2b00      	cmp	r3, #0
 802908e:	d002      	beq.n	8029096 <lfs_rawrename+0x206>
            return LFS_ERR_NOTEMPTY;
 8029090:	f06f 0326 	mvn.w	r3, #38	; 0x26
 8029094:	e106      	b.n	80292a4 <lfs_rawrename+0x414>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 8029096:	2101      	movs	r1, #1
 8029098:	68f8      	ldr	r0, [r7, #12]
 802909a:	f000 ff4b 	bl	8029f34 <lfs_fs_preporphans>
 802909e:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 80290a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80290a6:	2b00      	cmp	r3, #0
 80290a8:	d002      	beq.n	80290b0 <lfs_rawrename+0x220>
            return err;
 80290aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80290ae:	e0f9      	b.n	80292a4 <lfs_rawrename+0x414>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        prevdir.type = 0;
 80290b0:	2300      	movs	r3, #0
 80290b2:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
        prevdir.id = 0;
 80290b6:	2300      	movs	r3, #0
 80290b8:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        lfs->mlist = &prevdir;
 80290bc:	68fb      	ldr	r3, [r7, #12]
 80290be:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80290c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (!samepair) {
 80290c4:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80290c8:	f083 0301 	eor.w	r3, r3, #1
 80290cc:	b2db      	uxtb	r3, r3
 80290ce:	2b00      	cmp	r3, #0
 80290d0:	d007      	beq.n	80290e2 <lfs_rawrename+0x252>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
 80290d2:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80290d6:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80290da:	4619      	mov	r1, r3
 80290dc:	68f8      	ldr	r0, [r7, #12]
 80290de:	f000 ff63 	bl	8029fa8 <lfs_fs_prepmove>
    }

    // move over all attributes
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 80290e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80290e6:	f113 0f02 	cmn.w	r3, #2
 80290ea:	d007      	beq.n	80290fc <lfs_rawrename+0x26c>
 80290ec:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80290f0:	029b      	lsls	r3, r3, #10
 80290f2:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80290f6:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80290fa:	e000      	b.n	80290fe <lfs_rawrename+0x26e>
 80290fc:	2300      	movs	r3, #0
 80290fe:	653b      	str	r3, [r7, #80]	; 0x50
 8029100:	2300      	movs	r3, #0
 8029102:	657b      	str	r3, [r7, #84]	; 0x54
 8029104:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8029108:	029b      	lsls	r3, r3, #10
 802910a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802910e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8029112:	65bb      	str	r3, [r7, #88]	; 0x58
 8029114:	2300      	movs	r3, #0
 8029116:	65fb      	str	r3, [r7, #92]	; 0x5c
 8029118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802911c:	4618      	mov	r0, r3
 802911e:	f7fa fead 	bl	8023e7c <lfs_tag_type3>
 8029122:	4603      	mov	r3, r0
 8029124:	051a      	lsls	r2, r3, #20
 8029126:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 802912a:	029b      	lsls	r3, r3, #10
 802912c:	ea42 0403 	orr.w	r4, r2, r3
 8029130:	687b      	ldr	r3, [r7, #4]
 8029132:	4618      	mov	r0, r3
 8029134:	f7e7 f8b4 	bl	80102a0 <strlen>
 8029138:	4603      	mov	r3, r0
 802913a:	4323      	orrs	r3, r4
 802913c:	663b      	str	r3, [r7, #96]	; 0x60
 802913e:	687b      	ldr	r3, [r7, #4]
 8029140:	667b      	str	r3, [r7, #100]	; 0x64
 8029142:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8029146:	029c      	lsls	r4, r3, #10
 8029148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802914c:	4618      	mov	r0, r3
 802914e:	f7fa febf 	bl	8023ed0 <lfs_tag_id>
 8029152:	4603      	mov	r3, r0
 8029154:	4323      	orrs	r3, r4
 8029156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802915a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802915e:	66bb      	str	r3, [r7, #104]	; 0x68
 8029160:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8029164:	66fb      	str	r3, [r7, #108]	; 0x6c
 8029166:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 802916a:	2b00      	cmp	r3, #0
 802916c:	d007      	beq.n	802917e <lfs_rawrename+0x2ee>
 802916e:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8029172:	029b      	lsls	r3, r3, #10
 8029174:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8029178:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802917c:	e000      	b.n	8029180 <lfs_rawrename+0x2f0>
 802917e:	2300      	movs	r3, #0
 8029180:	673b      	str	r3, [r7, #112]	; 0x70
 8029182:	2300      	movs	r3, #0
 8029184:	677b      	str	r3, [r7, #116]	; 0x74
 8029186:	f107 0250 	add.w	r2, r7, #80	; 0x50
 802918a:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 802918e:	2305      	movs	r3, #5
 8029190:	68f8      	ldr	r0, [r7, #12]
 8029192:	f7fe f941 	bl	8027418 <lfs_dir_commit>
 8029196:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
            {LFS_MKTAG(LFS_TYPE_CREATE, newid, 0), NULL},
            {LFS_MKTAG(lfs_tag_type3(oldtag), newid, strlen(newpath)), newpath},
            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},
            {LFS_MKTAG_IF(samepair,
                LFS_TYPE_DELETE, newoldid, 0), NULL}));
    if (err) {
 802919a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802919e:	2b00      	cmp	r3, #0
 80291a0:	d005      	beq.n	80291ae <lfs_rawrename+0x31e>
        lfs->mlist = prevdir.next;
 80291a2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80291a4:	68fb      	ldr	r3, [r7, #12]
 80291a6:	629a      	str	r2, [r3, #40]	; 0x28
        return err;
 80291a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80291ac:	e07a      	b.n	80292a4 <lfs_rawrename+0x414>
    }

    // let commit clean up after move (if we're different! otherwise move
    // logic already fixed it for us)
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 80291ae:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80291b2:	f083 0301 	eor.w	r3, r3, #1
 80291b6:	b2db      	uxtb	r3, r3
 80291b8:	2b00      	cmp	r3, #0
 80291ba:	d02f      	beq.n	802921c <lfs_rawrename+0x38c>
 80291bc:	68fb      	ldr	r3, [r7, #12]
 80291be:	3330      	adds	r3, #48	; 0x30
 80291c0:	4618      	mov	r0, r3
 80291c2:	f7fa ff1a 	bl	8023ffa <lfs_gstate_hasmove>
 80291c6:	4603      	mov	r3, r0
 80291c8:	2b00      	cmp	r3, #0
 80291ca:	d027      	beq.n	802921c <lfs_rawrename+0x38c>
        // prep gstate and delete move id
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80291cc:	2200      	movs	r2, #0
 80291ce:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80291d2:	68f8      	ldr	r0, [r7, #12]
 80291d4:	f000 fee8 	bl	8029fa8 <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
 80291d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80291dc:	4618      	mov	r0, r3
 80291de:	f7fa fe77 	bl	8023ed0 <lfs_tag_id>
 80291e2:	4603      	mov	r3, r0
 80291e4:	029b      	lsls	r3, r3, #10
 80291e6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80291ea:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80291ee:	61bb      	str	r3, [r7, #24]
 80291f0:	2300      	movs	r3, #0
 80291f2:	61fb      	str	r3, [r7, #28]
 80291f4:	f107 0218 	add.w	r2, r7, #24
 80291f8:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80291fc:	2301      	movs	r3, #1
 80291fe:	68f8      	ldr	r0, [r7, #12]
 8029200:	f7fe f90a 	bl	8027418 <lfs_dir_commit>
 8029204:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
                {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(oldtag), 0), NULL}));
        if (err) {
 8029208:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802920c:	2b00      	cmp	r3, #0
 802920e:	d005      	beq.n	802921c <lfs_rawrename+0x38c>
            lfs->mlist = prevdir.next;
 8029210:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8029212:	68fb      	ldr	r3, [r7, #12]
 8029214:	629a      	str	r2, [r3, #40]	; 0x28
            return err;
 8029216:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802921a:	e043      	b.n	80292a4 <lfs_rawrename+0x414>
        }
    }

    lfs->mlist = prevdir.next;
 802921c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 802921e:	68fb      	ldr	r3, [r7, #12]
 8029220:	629a      	str	r2, [r3, #40]	; 0x28
    if (prevtag != LFS_ERR_NOENT
 8029222:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029226:	f113 0f02 	cmn.w	r3, #2
 802922a:	d03a      	beq.n	80292a2 <lfs_rawrename+0x412>
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 802922c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029230:	4618      	mov	r0, r3
 8029232:	f7fa fe23 	bl	8023e7c <lfs_tag_type3>
 8029236:	4603      	mov	r3, r0
 8029238:	2b02      	cmp	r3, #2
 802923a:	d132      	bne.n	80292a2 <lfs_rawrename+0x412>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 802923c:	f04f 31ff 	mov.w	r1, #4294967295
 8029240:	68f8      	ldr	r0, [r7, #12]
 8029242:	f000 fe77 	bl	8029f34 <lfs_fs_preporphans>
 8029246:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 802924a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802924e:	2b00      	cmp	r3, #0
 8029250:	d002      	beq.n	8029258 <lfs_rawrename+0x3c8>
            return err;
 8029252:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8029256:	e025      	b.n	80292a4 <lfs_rawrename+0x414>
        }

        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
 8029258:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 802925c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8029260:	3308      	adds	r3, #8
 8029262:	4619      	mov	r1, r3
 8029264:	68f8      	ldr	r0, [r7, #12]
 8029266:	f000 fd85 	bl	8029d74 <lfs_fs_pred>
 802926a:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 802926e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8029272:	2b00      	cmp	r3, #0
 8029274:	d002      	beq.n	802927c <lfs_rawrename+0x3ec>
            return err;
 8029276:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802927a:	e013      	b.n	80292a4 <lfs_rawrename+0x414>
        }

        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
 802927c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8029280:	f103 0208 	add.w	r2, r3, #8
 8029284:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8029288:	4619      	mov	r1, r3
 802928a:	68f8      	ldr	r0, [r7, #12]
 802928c:	f7fc ff22 	bl	80260d4 <lfs_dir_drop>
 8029290:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 8029294:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8029298:	2b00      	cmp	r3, #0
 802929a:	d002      	beq.n	80292a2 <lfs_rawrename+0x412>
            return err;
 802929c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80292a0:	e000      	b.n	80292a4 <lfs_rawrename+0x414>
        }
    }

    return 0;
 80292a2:	2300      	movs	r3, #0
}
 80292a4:	4618      	mov	r0, r3
 80292a6:	f507 7782 	add.w	r7, r7, #260	; 0x104
 80292aa:	46bd      	mov	sp, r7
 80292ac:	bd90      	pop	{r4, r7, pc}
 80292ae:	bf00      	nop
 80292b0:	700ffc00 	.word	0x700ffc00

080292b4 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 80292b4:	b580      	push	{r7, lr}
 80292b6:	b08c      	sub	sp, #48	; 0x30
 80292b8:	af00      	add	r7, sp, #0
 80292ba:	6078      	str	r0, [r7, #4]
 80292bc:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 80292be:	687b      	ldr	r3, [r7, #4]
 80292c0:	683a      	ldr	r2, [r7, #0]
 80292c2:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 80292c4:	2300      	movs	r3, #0
 80292c6:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 80292c8:	687b      	ldr	r3, [r7, #4]
 80292ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80292cc:	695b      	ldr	r3, [r3, #20]
 80292ce:	2b00      	cmp	r3, #0
 80292d0:	d106      	bne.n	80292e0 <lfs_init+0x2c>
 80292d2:	4b92      	ldr	r3, [pc, #584]	; (802951c <lfs_init+0x268>)
 80292d4:	4a92      	ldr	r2, [pc, #584]	; (8029520 <lfs_init+0x26c>)
 80292d6:	f640 7146 	movw	r1, #3910	; 0xf46
 80292da:	4892      	ldr	r0, [pc, #584]	; (8029524 <lfs_init+0x270>)
 80292dc:	f003 f826 	bl	802c32c <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 80292e0:	687b      	ldr	r3, [r7, #4]
 80292e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80292e4:	699b      	ldr	r3, [r3, #24]
 80292e6:	2b00      	cmp	r3, #0
 80292e8:	d106      	bne.n	80292f8 <lfs_init+0x44>
 80292ea:	4b8f      	ldr	r3, [pc, #572]	; (8029528 <lfs_init+0x274>)
 80292ec:	4a8c      	ldr	r2, [pc, #560]	; (8029520 <lfs_init+0x26c>)
 80292ee:	f640 7147 	movw	r1, #3911	; 0xf47
 80292f2:	488c      	ldr	r0, [pc, #560]	; (8029524 <lfs_init+0x270>)
 80292f4:	f003 f81a 	bl	802c32c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 80292f8:	687b      	ldr	r3, [r7, #4]
 80292fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80292fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80292fe:	2b00      	cmp	r3, #0
 8029300:	d106      	bne.n	8029310 <lfs_init+0x5c>
 8029302:	4b8a      	ldr	r3, [pc, #552]	; (802952c <lfs_init+0x278>)
 8029304:	4a86      	ldr	r2, [pc, #536]	; (8029520 <lfs_init+0x26c>)
 8029306:	f640 7148 	movw	r1, #3912	; 0xf48
 802930a:	4886      	ldr	r0, [pc, #536]	; (8029524 <lfs_init+0x270>)
 802930c:	f003 f80e 	bl	802c32c <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8029310:	687b      	ldr	r3, [r7, #4]
 8029312:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029316:	687a      	ldr	r2, [r7, #4]
 8029318:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802931a:	6952      	ldr	r2, [r2, #20]
 802931c:	fbb3 f1f2 	udiv	r1, r3, r2
 8029320:	fb01 f202 	mul.w	r2, r1, r2
 8029324:	1a9b      	subs	r3, r3, r2
 8029326:	2b00      	cmp	r3, #0
 8029328:	d006      	beq.n	8029338 <lfs_init+0x84>
 802932a:	4b81      	ldr	r3, [pc, #516]	; (8029530 <lfs_init+0x27c>)
 802932c:	4a7c      	ldr	r2, [pc, #496]	; (8029520 <lfs_init+0x26c>)
 802932e:	f640 714c 	movw	r1, #3916	; 0xf4c
 8029332:	487c      	ldr	r0, [pc, #496]	; (8029524 <lfs_init+0x270>)
 8029334:	f002 fffa 	bl	802c32c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8029338:	687b      	ldr	r3, [r7, #4]
 802933a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802933c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802933e:	687a      	ldr	r2, [r7, #4]
 8029340:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8029342:	6992      	ldr	r2, [r2, #24]
 8029344:	fbb3 f1f2 	udiv	r1, r3, r2
 8029348:	fb01 f202 	mul.w	r2, r1, r2
 802934c:	1a9b      	subs	r3, r3, r2
 802934e:	2b00      	cmp	r3, #0
 8029350:	d006      	beq.n	8029360 <lfs_init+0xac>
 8029352:	4b78      	ldr	r3, [pc, #480]	; (8029534 <lfs_init+0x280>)
 8029354:	4a72      	ldr	r2, [pc, #456]	; (8029520 <lfs_init+0x26c>)
 8029356:	f640 714d 	movw	r1, #3917	; 0xf4d
 802935a:	4872      	ldr	r0, [pc, #456]	; (8029524 <lfs_init+0x270>)
 802935c:	f002 ffe6 	bl	802c32c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8029360:	687b      	ldr	r3, [r7, #4]
 8029362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029364:	69db      	ldr	r3, [r3, #28]
 8029366:	687a      	ldr	r2, [r7, #4]
 8029368:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802936a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 802936c:	fbb3 f1f2 	udiv	r1, r3, r2
 8029370:	fb01 f202 	mul.w	r2, r1, r2
 8029374:	1a9b      	subs	r3, r3, r2
 8029376:	2b00      	cmp	r3, #0
 8029378:	d006      	beq.n	8029388 <lfs_init+0xd4>
 802937a:	4b6f      	ldr	r3, [pc, #444]	; (8029538 <lfs_init+0x284>)
 802937c:	4a68      	ldr	r2, [pc, #416]	; (8029520 <lfs_init+0x26c>)
 802937e:	f640 714e 	movw	r1, #3918	; 0xf4e
 8029382:	4868      	ldr	r0, [pc, #416]	; (8029524 <lfs_init+0x270>)
 8029384:	f002 ffd2 	bl	802c32c <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8029388:	687b      	ldr	r3, [r7, #4]
 802938a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802938c:	69db      	ldr	r3, [r3, #28]
 802938e:	3b08      	subs	r3, #8
 8029390:	f04f 32ff 	mov.w	r2, #4294967295
 8029394:	fbb2 f3f3 	udiv	r3, r2, r3
 8029398:	4618      	mov	r0, r3
 802939a:	f7fa f8ba 	bl	8023512 <lfs_npw2>
 802939e:	4603      	mov	r3, r0
 80293a0:	009a      	lsls	r2, r3, #2
 80293a2:	687b      	ldr	r3, [r7, #4]
 80293a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80293a6:	69db      	ldr	r3, [r3, #28]
 80293a8:	429a      	cmp	r2, r3
 80293aa:	d906      	bls.n	80293ba <lfs_init+0x106>
 80293ac:	4b63      	ldr	r3, [pc, #396]	; (802953c <lfs_init+0x288>)
 80293ae:	4a5c      	ldr	r2, [pc, #368]	; (8029520 <lfs_init+0x26c>)
 80293b0:	f640 7151 	movw	r1, #3921	; 0xf51
 80293b4:	485b      	ldr	r0, [pc, #364]	; (8029524 <lfs_init+0x270>)
 80293b6:	f002 ffb9 	bl	802c32c <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 80293ba:	687b      	ldr	r3, [r7, #4]
 80293bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80293be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80293c0:	2b00      	cmp	r3, #0
 80293c2:	d106      	bne.n	80293d2 <lfs_init+0x11e>
 80293c4:	4b5e      	ldr	r3, [pc, #376]	; (8029540 <lfs_init+0x28c>)
 80293c6:	4a56      	ldr	r2, [pc, #344]	; (8029520 <lfs_init+0x26c>)
 80293c8:	f640 715a 	movw	r1, #3930	; 0xf5a
 80293cc:	4855      	ldr	r0, [pc, #340]	; (8029524 <lfs_init+0x270>)
 80293ce:	f002 ffad 	bl	802c32c <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 80293d2:	687b      	ldr	r3, [r7, #4]
 80293d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80293d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80293d8:	2b00      	cmp	r3, #0
 80293da:	d005      	beq.n	80293e8 <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 80293dc:	687b      	ldr	r3, [r7, #4]
 80293de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80293e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80293e2:	687b      	ldr	r3, [r7, #4]
 80293e4:	60da      	str	r2, [r3, #12]
 80293e6:	e010      	b.n	802940a <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80293e8:	687b      	ldr	r3, [r7, #4]
 80293ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80293ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80293ee:	4618      	mov	r0, r3
 80293f0:	f7fa f8f7 	bl	80235e2 <lfs_malloc>
 80293f4:	4602      	mov	r2, r0
 80293f6:	687b      	ldr	r3, [r7, #4]
 80293f8:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 80293fa:	687b      	ldr	r3, [r7, #4]
 80293fc:	68db      	ldr	r3, [r3, #12]
 80293fe:	2b00      	cmp	r3, #0
 8029400:	d103      	bne.n	802940a <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 8029402:	f06f 030b 	mvn.w	r3, #11
 8029406:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8029408:	e0fd      	b.n	8029606 <lfs_init+0x352>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 802940a:	687b      	ldr	r3, [r7, #4]
 802940c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802940e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8029410:	2b00      	cmp	r3, #0
 8029412:	d005      	beq.n	8029420 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8029414:	687b      	ldr	r3, [r7, #4]
 8029416:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802941a:	687b      	ldr	r3, [r7, #4]
 802941c:	61da      	str	r2, [r3, #28]
 802941e:	e010      	b.n	8029442 <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8029420:	687b      	ldr	r3, [r7, #4]
 8029422:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029426:	4618      	mov	r0, r3
 8029428:	f7fa f8db 	bl	80235e2 <lfs_malloc>
 802942c:	4602      	mov	r2, r0
 802942e:	687b      	ldr	r3, [r7, #4]
 8029430:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8029432:	687b      	ldr	r3, [r7, #4]
 8029434:	69db      	ldr	r3, [r3, #28]
 8029436:	2b00      	cmp	r3, #0
 8029438:	d103      	bne.n	8029442 <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 802943a:	f06f 030b 	mvn.w	r3, #11
 802943e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8029440:	e0e1      	b.n	8029606 <lfs_init+0x352>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8029442:	687b      	ldr	r3, [r7, #4]
 8029444:	4619      	mov	r1, r3
 8029446:	6878      	ldr	r0, [r7, #4]
 8029448:	f7fa f8f1 	bl	802362e <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 802944c:	687b      	ldr	r3, [r7, #4]
 802944e:	3310      	adds	r3, #16
 8029450:	4619      	mov	r1, r3
 8029452:	6878      	ldr	r0, [r7, #4]
 8029454:	f7fa f8eb 	bl	802362e <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8029458:	687b      	ldr	r3, [r7, #4]
 802945a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802945c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802945e:	2b00      	cmp	r3, #0
 8029460:	d106      	bne.n	8029470 <lfs_init+0x1bc>
 8029462:	4b38      	ldr	r3, [pc, #224]	; (8029544 <lfs_init+0x290>)
 8029464:	4a2e      	ldr	r2, [pc, #184]	; (8029520 <lfs_init+0x26c>)
 8029466:	f640 7178 	movw	r1, #3960	; 0xf78
 802946a:	482e      	ldr	r0, [pc, #184]	; (8029524 <lfs_init+0x270>)
 802946c:	f002 ff5e 	bl	802c32c <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8029470:	687b      	ldr	r3, [r7, #4]
 8029472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029476:	f003 0307 	and.w	r3, r3, #7
 802947a:	2b00      	cmp	r3, #0
 802947c:	d106      	bne.n	802948c <lfs_init+0x1d8>
 802947e:	687b      	ldr	r3, [r7, #4]
 8029480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029484:	f003 0303 	and.w	r3, r3, #3
 8029488:	2b00      	cmp	r3, #0
 802948a:	d006      	beq.n	802949a <lfs_init+0x1e6>
 802948c:	4b2e      	ldr	r3, [pc, #184]	; (8029548 <lfs_init+0x294>)
 802948e:	4a24      	ldr	r2, [pc, #144]	; (8029520 <lfs_init+0x26c>)
 8029490:	f640 7179 	movw	r1, #3961	; 0xf79
 8029494:	4823      	ldr	r0, [pc, #140]	; (8029524 <lfs_init+0x270>)
 8029496:	f002 ff49 	bl	802c32c <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 802949a:	687b      	ldr	r3, [r7, #4]
 802949c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802949e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80294a0:	2b00      	cmp	r3, #0
 80294a2:	d005      	beq.n	80294b0 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 80294a4:	687b      	ldr	r3, [r7, #4]
 80294a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80294a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80294aa:	687b      	ldr	r3, [r7, #4]
 80294ac:	665a      	str	r2, [r3, #100]	; 0x64
 80294ae:	e010      	b.n	80294d2 <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 80294b0:	687b      	ldr	r3, [r7, #4]
 80294b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80294b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80294b6:	4618      	mov	r0, r3
 80294b8:	f7fa f893 	bl	80235e2 <lfs_malloc>
 80294bc:	4602      	mov	r2, r0
 80294be:	687b      	ldr	r3, [r7, #4]
 80294c0:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 80294c2:	687b      	ldr	r3, [r7, #4]
 80294c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80294c6:	2b00      	cmp	r3, #0
 80294c8:	d103      	bne.n	80294d2 <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 80294ca:	f06f 030b 	mvn.w	r3, #11
 80294ce:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80294d0:	e099      	b.n	8029606 <lfs_init+0x352>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 80294d2:	687b      	ldr	r3, [r7, #4]
 80294d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80294d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80294d8:	2bff      	cmp	r3, #255	; 0xff
 80294da:	d906      	bls.n	80294ea <lfs_init+0x236>
 80294dc:	4b1b      	ldr	r3, [pc, #108]	; (802954c <lfs_init+0x298>)
 80294de:	4a10      	ldr	r2, [pc, #64]	; (8029520 <lfs_init+0x26c>)
 80294e0:	f640 7186 	movw	r1, #3974	; 0xf86
 80294e4:	480f      	ldr	r0, [pc, #60]	; (8029524 <lfs_init+0x270>)
 80294e6:	f002 ff21 	bl	802c32c <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 80294ea:	687b      	ldr	r3, [r7, #4]
 80294ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80294ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80294f0:	687b      	ldr	r3, [r7, #4]
 80294f2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 80294f4:	687b      	ldr	r3, [r7, #4]
 80294f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80294f8:	2b00      	cmp	r3, #0
 80294fa:	d102      	bne.n	8029502 <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 80294fc:	687b      	ldr	r3, [r7, #4]
 80294fe:	22ff      	movs	r2, #255	; 0xff
 8029500:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8029502:	687b      	ldr	r3, [r7, #4]
 8029504:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029508:	2b00      	cmp	r3, #0
 802950a:	da23      	bge.n	8029554 <lfs_init+0x2a0>
 802950c:	4b10      	ldr	r3, [pc, #64]	; (8029550 <lfs_init+0x29c>)
 802950e:	4a04      	ldr	r2, [pc, #16]	; (8029520 <lfs_init+0x26c>)
 8029510:	f640 718c 	movw	r1, #3980	; 0xf8c
 8029514:	4803      	ldr	r0, [pc, #12]	; (8029524 <lfs_init+0x270>)
 8029516:	f002 ff09 	bl	802c32c <__assert_func>
 802951a:	bf00      	nop
 802951c:	080336b4 	.word	0x080336b4
 8029520:	0803466c 	.word	0x0803466c
 8029524:	08033318 	.word	0x08033318
 8029528:	080336d0 	.word	0x080336d0
 802952c:	080336ec 	.word	0x080336ec
 8029530:	08033708 	.word	0x08033708
 8029534:	08033738 	.word	0x08033738
 8029538:	08033768 	.word	0x08033768
 802953c:	0803379c 	.word	0x0803379c
 8029540:	080337e8 	.word	0x080337e8
 8029544:	08033804 	.word	0x08033804
 8029548:	08033824 	.word	0x08033824
 802954c:	08033878 	.word	0x08033878
 8029550:	08033894 	.word	0x08033894
    lfs->file_max = lfs->cfg->file_max;
 8029554:	687b      	ldr	r3, [r7, #4]
 8029556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802955a:	687b      	ldr	r3, [r7, #4]
 802955c:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 802955e:	687b      	ldr	r3, [r7, #4]
 8029560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029562:	2b00      	cmp	r3, #0
 8029564:	d103      	bne.n	802956e <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 8029566:	687b      	ldr	r3, [r7, #4]
 8029568:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802956c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 802956e:	687b      	ldr	r3, [r7, #4]
 8029570:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8029574:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8029578:	4293      	cmp	r3, r2
 802957a:	d906      	bls.n	802958a <lfs_init+0x2d6>
 802957c:	4b26      	ldr	r3, [pc, #152]	; (8029618 <lfs_init+0x364>)
 802957e:	4a27      	ldr	r2, [pc, #156]	; (802961c <lfs_init+0x368>)
 8029580:	f640 7192 	movw	r1, #3986	; 0xf92
 8029584:	4826      	ldr	r0, [pc, #152]	; (8029620 <lfs_init+0x36c>)
 8029586:	f002 fed1 	bl	802c32c <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 802958a:	687b      	ldr	r3, [r7, #4]
 802958c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802958e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8029590:	687b      	ldr	r3, [r7, #4]
 8029592:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 8029594:	687b      	ldr	r3, [r7, #4]
 8029596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8029598:	2b00      	cmp	r3, #0
 802959a:	d103      	bne.n	80295a4 <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 802959c:	687b      	ldr	r3, [r7, #4]
 802959e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80295a2:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 80295a4:	687b      	ldr	r3, [r7, #4]
 80295a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80295a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80295aa:	687b      	ldr	r3, [r7, #4]
 80295ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80295ae:	69db      	ldr	r3, [r3, #28]
 80295b0:	429a      	cmp	r2, r3
 80295b2:	d906      	bls.n	80295c2 <lfs_init+0x30e>
 80295b4:	4b1b      	ldr	r3, [pc, #108]	; (8029624 <lfs_init+0x370>)
 80295b6:	4a19      	ldr	r2, [pc, #100]	; (802961c <lfs_init+0x368>)
 80295b8:	f640 7198 	movw	r1, #3992	; 0xf98
 80295bc:	4818      	ldr	r0, [pc, #96]	; (8029620 <lfs_init+0x36c>)
 80295be:	f002 feb5 	bl	802c32c <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 80295c2:	687b      	ldr	r3, [r7, #4]
 80295c4:	f04f 32ff 	mov.w	r2, #4294967295
 80295c8:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 80295ca:	687b      	ldr	r3, [r7, #4]
 80295cc:	f04f 32ff 	mov.w	r2, #4294967295
 80295d0:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 80295d2:	687b      	ldr	r3, [r7, #4]
 80295d4:	2200      	movs	r2, #0
 80295d6:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 80295d8:	687b      	ldr	r3, [r7, #4]
 80295da:	2200      	movs	r2, #0
 80295dc:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 80295de:	687b      	ldr	r3, [r7, #4]
 80295e0:	333c      	adds	r3, #60	; 0x3c
 80295e2:	2200      	movs	r2, #0
 80295e4:	601a      	str	r2, [r3, #0]
 80295e6:	605a      	str	r2, [r3, #4]
 80295e8:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 80295ea:	687b      	ldr	r3, [r7, #4]
 80295ec:	3330      	adds	r3, #48	; 0x30
 80295ee:	2200      	movs	r2, #0
 80295f0:	601a      	str	r2, [r3, #0]
 80295f2:	605a      	str	r2, [r3, #4]
 80295f4:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 80295f6:	687b      	ldr	r3, [r7, #4]
 80295f8:	3348      	adds	r3, #72	; 0x48
 80295fa:	2200      	movs	r2, #0
 80295fc:	601a      	str	r2, [r3, #0]
 80295fe:	605a      	str	r2, [r3, #4]
 8029600:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8029602:	2300      	movs	r3, #0
 8029604:	e003      	b.n	802960e <lfs_init+0x35a>

cleanup:
    lfs_deinit(lfs);
 8029606:	6878      	ldr	r0, [r7, #4]
 8029608:	f000 f80e 	bl	8029628 <lfs_deinit>
    return err;
 802960c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 802960e:	4618      	mov	r0, r3
 8029610:	3730      	adds	r7, #48	; 0x30
 8029612:	46bd      	mov	sp, r7
 8029614:	bd80      	pop	{r7, pc}
 8029616:	bf00      	nop
 8029618:	080338b8 	.word	0x080338b8
 802961c:	0803466c 	.word	0x0803466c
 8029620:	08033318 	.word	0x08033318
 8029624:	080338d4 	.word	0x080338d4

08029628 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8029628:	b580      	push	{r7, lr}
 802962a:	b082      	sub	sp, #8
 802962c:	af00      	add	r7, sp, #0
 802962e:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8029630:	687b      	ldr	r3, [r7, #4]
 8029632:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029636:	2b00      	cmp	r3, #0
 8029638:	d104      	bne.n	8029644 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 802963a:	687b      	ldr	r3, [r7, #4]
 802963c:	68db      	ldr	r3, [r3, #12]
 802963e:	4618      	mov	r0, r3
 8029640:	f7f9 ffdb 	bl	80235fa <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8029644:	687b      	ldr	r3, [r7, #4]
 8029646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802964a:	2b00      	cmp	r3, #0
 802964c:	d104      	bne.n	8029658 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 802964e:	687b      	ldr	r3, [r7, #4]
 8029650:	69db      	ldr	r3, [r3, #28]
 8029652:	4618      	mov	r0, r3
 8029654:	f7f9 ffd1 	bl	80235fa <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8029658:	687b      	ldr	r3, [r7, #4]
 802965a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802965c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802965e:	2b00      	cmp	r3, #0
 8029660:	d104      	bne.n	802966c <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 8029662:	687b      	ldr	r3, [r7, #4]
 8029664:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8029666:	4618      	mov	r0, r3
 8029668:	f7f9 ffc7 	bl	80235fa <lfs_free>
    }

    return 0;
 802966c:	2300      	movs	r3, #0
}
 802966e:	4618      	mov	r0, r3
 8029670:	3708      	adds	r7, #8
 8029672:	46bd      	mov	sp, r7
 8029674:	bd80      	pop	{r7, pc}
	...

08029678 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 8029678:	b580      	push	{r7, lr}
 802967a:	b0a0      	sub	sp, #128	; 0x80
 802967c:	af00      	add	r7, sp, #0
 802967e:	6078      	str	r0, [r7, #4]
 8029680:	6039      	str	r1, [r7, #0]
    int err = 0;
 8029682:	2300      	movs	r3, #0
 8029684:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 8029686:	6839      	ldr	r1, [r7, #0]
 8029688:	6878      	ldr	r0, [r7, #4]
 802968a:	f7ff fe13 	bl	80292b4 <lfs_init>
 802968e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8029690:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8029692:	2b00      	cmp	r3, #0
 8029694:	d001      	beq.n	802969a <lfs_rawformat+0x22>
            return err;
 8029696:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8029698:	e082      	b.n	80297a0 <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 802969a:	687b      	ldr	r3, [r7, #4]
 802969c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 802969e:	687b      	ldr	r3, [r7, #4]
 80296a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80296a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80296a4:	461a      	mov	r2, r3
 80296a6:	2100      	movs	r1, #0
 80296a8:	f004 f810 	bl	802d6cc <memset>
        lfs->free.off = 0;
 80296ac:	687b      	ldr	r3, [r7, #4]
 80296ae:	2200      	movs	r2, #0
 80296b0:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 80296b2:	687b      	ldr	r3, [r7, #4]
 80296b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80296b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80296b8:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 80296ba:	687b      	ldr	r3, [r7, #4]
 80296bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80296be:	6a1b      	ldr	r3, [r3, #32]
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 80296c0:	4619      	mov	r1, r3
 80296c2:	4610      	mov	r0, r2
 80296c4:	f7f9 feee 	bl	80234a4 <lfs_min>
 80296c8:	4602      	mov	r2, r0
 80296ca:	687b      	ldr	r3, [r7, #4]
 80296cc:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 80296ce:	687b      	ldr	r3, [r7, #4]
 80296d0:	2200      	movs	r2, #0
 80296d2:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 80296d4:	6878      	ldr	r0, [r7, #4]
 80296d6:	f7fa fe2b 	bl	8024330 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 80296da:	f107 030c 	add.w	r3, r7, #12
 80296de:	4619      	mov	r1, r3
 80296e0:	6878      	ldr	r0, [r7, #4]
 80296e2:	f7fc fc7d 	bl	8025fe0 <lfs_dir_alloc>
 80296e6:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80296e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80296ea:	2b00      	cmp	r3, #0
 80296ec:	d14f      	bne.n	802978e <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 80296ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80296f2:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 80296f4:	687b      	ldr	r3, [r7, #4]
 80296f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80296f8:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 80296fa:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 80296fc:	687b      	ldr	r3, [r7, #4]
 80296fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029700:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 8029702:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 8029704:	687b      	ldr	r3, [r7, #4]
 8029706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8029708:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 802970a:	687b      	ldr	r3, [r7, #4]
 802970c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 802970e:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 8029710:	687b      	ldr	r3, [r7, #4]
 8029712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 8029714:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 8029716:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802971a:	4618      	mov	r0, r3
 802971c:	f7fa fd48 	bl	80241b0 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8029720:	4b21      	ldr	r3, [pc, #132]	; (80297a8 <lfs_rawformat+0x130>)
 8029722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029724:	2300      	movs	r3, #0
 8029726:	653b      	str	r3, [r7, #80]	; 0x50
 8029728:	4b20      	ldr	r3, [pc, #128]	; (80297ac <lfs_rawformat+0x134>)
 802972a:	657b      	str	r3, [r7, #84]	; 0x54
 802972c:	4b20      	ldr	r3, [pc, #128]	; (80297b0 <lfs_rawformat+0x138>)
 802972e:	65bb      	str	r3, [r7, #88]	; 0x58
 8029730:	4b20      	ldr	r3, [pc, #128]	; (80297b4 <lfs_rawformat+0x13c>)
 8029732:	65fb      	str	r3, [r7, #92]	; 0x5c
 8029734:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8029738:	663b      	str	r3, [r7, #96]	; 0x60
 802973a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 802973e:	f107 010c 	add.w	r1, r7, #12
 8029742:	2303      	movs	r3, #3
 8029744:	6878      	ldr	r0, [r7, #4]
 8029746:	f7fd fe67 	bl	8027418 <lfs_dir_commit>
 802974a:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 802974c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802974e:	2b00      	cmp	r3, #0
 8029750:	d11f      	bne.n	8029792 <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8029752:	2300      	movs	r3, #0
 8029754:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8029758:	f107 010c 	add.w	r1, r7, #12
 802975c:	2300      	movs	r3, #0
 802975e:	2200      	movs	r2, #0
 8029760:	6878      	ldr	r0, [r7, #4]
 8029762:	f7fd fe59 	bl	8027418 <lfs_dir_commit>
 8029766:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8029768:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802976a:	2b00      	cmp	r3, #0
 802976c:	d113      	bne.n	8029796 <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 802976e:	2300      	movs	r3, #0
 8029770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8029772:	2301      	movs	r3, #1
 8029774:	633b      	str	r3, [r7, #48]	; 0x30
 8029776:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 802977a:	f107 030c 	add.w	r3, r7, #12
 802977e:	4619      	mov	r1, r3
 8029780:	6878      	ldr	r0, [r7, #4]
 8029782:	f7fc f82f 	bl	80257e4 <lfs_dir_fetch>
 8029786:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8029788:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802978a:	2b00      	cmp	r3, #0
 802978c:	e004      	b.n	8029798 <lfs_rawformat+0x120>
            goto cleanup;
 802978e:	bf00      	nop
 8029790:	e002      	b.n	8029798 <lfs_rawformat+0x120>
            goto cleanup;
 8029792:	bf00      	nop
 8029794:	e000      	b.n	8029798 <lfs_rawformat+0x120>
            goto cleanup;
 8029796:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8029798:	6878      	ldr	r0, [r7, #4]
 802979a:	f7ff ff45 	bl	8029628 <lfs_deinit>
    return err;
 802979e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 80297a0:	4618      	mov	r0, r3
 80297a2:	3780      	adds	r7, #128	; 0x80
 80297a4:	46bd      	mov	sp, r7
 80297a6:	bd80      	pop	{r7, pc}
 80297a8:	40100000 	.word	0x40100000
 80297ac:	0ff00008 	.word	0x0ff00008
 80297b0:	08033904 	.word	0x08033904
 80297b4:	20100018 	.word	0x20100018

080297b8 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 80297b8:	b580      	push	{r7, lr}
 80297ba:	b09c      	sub	sp, #112	; 0x70
 80297bc:	af04      	add	r7, sp, #16
 80297be:	6078      	str	r0, [r7, #4]
 80297c0:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 80297c2:	6839      	ldr	r1, [r7, #0]
 80297c4:	6878      	ldr	r0, [r7, #4]
 80297c6:	f7ff fd75 	bl	80292b4 <lfs_init>
 80297ca:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 80297cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80297ce:	2b00      	cmp	r3, #0
 80297d0:	d001      	beq.n	80297d6 <lfs_rawmount+0x1e>
        return err;
 80297d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80297d4:	e192      	b.n	8029afc <lfs_rawmount+0x344>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 80297d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80297da:	2220      	movs	r2, #32
 80297dc:	2100      	movs	r1, #0
 80297de:	4618      	mov	r0, r3
 80297e0:	f003 ff74 	bl	802d6cc <memset>
 80297e4:	2301      	movs	r3, #1
 80297e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    lfs_block_t cycle = 0;
 80297e8:	2300      	movs	r3, #0
 80297ea:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 80297ec:	e10b      	b.n	8029a06 <lfs_rawmount+0x24e>
        if (cycle >= lfs->cfg->block_count/2) {
 80297ee:	687b      	ldr	r3, [r7, #4]
 80297f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80297f2:	6a1b      	ldr	r3, [r3, #32]
 80297f4:	085b      	lsrs	r3, r3, #1
 80297f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80297f8:	429a      	cmp	r2, r3
 80297fa:	d303      	bcc.n	8029804 <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 80297fc:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8029800:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8029802:	e177      	b.n	8029af4 <lfs_rawmount+0x33c>
        }
        cycle += 1;
 8029804:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029806:	3301      	adds	r3, #1
 8029808:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 802980a:	687b      	ldr	r3, [r7, #4]
 802980c:	627b      	str	r3, [r7, #36]	; 0x24
 802980e:	4b8a      	ldr	r3, [pc, #552]	; (8029a38 <lfs_rawmount+0x280>)
 8029810:	62bb      	str	r3, [r7, #40]	; 0x28
 8029812:	2308      	movs	r3, #8
 8029814:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8029816:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802981a:	f103 0218 	add.w	r2, r3, #24
 802981e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8029822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8029826:	9303      	str	r3, [sp, #12]
 8029828:	4b84      	ldr	r3, [pc, #528]	; (8029a3c <lfs_rawmount+0x284>)
 802982a:	9302      	str	r3, [sp, #8]
 802982c:	2300      	movs	r3, #0
 802982e:	9301      	str	r3, [sp, #4]
 8029830:	4b83      	ldr	r3, [pc, #524]	; (8029a40 <lfs_rawmount+0x288>)
 8029832:	9300      	str	r3, [sp, #0]
 8029834:	4b83      	ldr	r3, [pc, #524]	; (8029a44 <lfs_rawmount+0x28c>)
 8029836:	6878      	ldr	r0, [r7, #4]
 8029838:	f7fb fc66 	bl	8025108 <lfs_dir_fetchmatch>
 802983c:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 802983e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029840:	2b00      	cmp	r3, #0
 8029842:	da02      	bge.n	802984a <lfs_rawmount+0x92>
            err = tag;
 8029844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029846:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8029848:	e154      	b.n	8029af4 <lfs_rawmount+0x33c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 802984a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802984c:	2b00      	cmp	r3, #0
 802984e:	f000 80cd 	beq.w	80299ec <lfs_rawmount+0x234>
 8029852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029854:	4618      	mov	r0, r3
 8029856:	f7fa faee 	bl	8023e36 <lfs_tag_isdelete>
 802985a:	4603      	mov	r3, r0
 802985c:	f083 0301 	eor.w	r3, r3, #1
 8029860:	b2db      	uxtb	r3, r3
 8029862:	2b00      	cmp	r3, #0
 8029864:	f000 80c2 	beq.w	80299ec <lfs_rawmount+0x234>
            // update root
            lfs->root[0] = dir.pair[0];
 8029868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802986a:	687b      	ldr	r3, [r7, #4]
 802986c:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 802986e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8029870:	687b      	ldr	r3, [r7, #4]
 8029872:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8029874:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8029878:	f107 030c 	add.w	r3, r7, #12
 802987c:	9300      	str	r3, [sp, #0]
 802987e:	4b72      	ldr	r3, [pc, #456]	; (8029a48 <lfs_rawmount+0x290>)
 8029880:	4a70      	ldr	r2, [pc, #448]	; (8029a44 <lfs_rawmount+0x28c>)
 8029882:	6878      	ldr	r0, [r7, #4]
 8029884:	f7fa ff0e 	bl	80246a4 <lfs_dir_get>
 8029888:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 802988a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802988c:	2b00      	cmp	r3, #0
 802988e:	da02      	bge.n	8029896 <lfs_rawmount+0xde>
                err = tag;
 8029890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029892:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8029894:	e12e      	b.n	8029af4 <lfs_rawmount+0x33c>
            }
            lfs_superblock_fromle32(&superblock);
 8029896:	f107 030c 	add.w	r3, r7, #12
 802989a:	4618      	mov	r0, r3
 802989c:	f7fa fc50 	bl	8024140 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 80298a0:	68fb      	ldr	r3, [r7, #12]
 80298a2:	0c1b      	lsrs	r3, r3, #16
 80298a4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 80298a8:	68fb      	ldr	r3, [r7, #12]
 80298aa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 80298ae:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80298b2:	2b02      	cmp	r3, #2
 80298b4:	d103      	bne.n	80298be <lfs_rawmount+0x106>
 80298b6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80298ba:	2b00      	cmp	r3, #0
 80298bc:	d011      	beq.n	80298e2 <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 80298be:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80298c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80298c6:	4961      	ldr	r1, [pc, #388]	; (8029a4c <lfs_rawmount+0x294>)
 80298c8:	9101      	str	r1, [sp, #4]
 80298ca:	9300      	str	r3, [sp, #0]
 80298cc:	4613      	mov	r3, r2
 80298ce:	f241 0233 	movw	r2, #4147	; 0x1033
 80298d2:	495f      	ldr	r1, [pc, #380]	; (8029a50 <lfs_rawmount+0x298>)
 80298d4:	485f      	ldr	r0, [pc, #380]	; (8029a54 <lfs_rawmount+0x29c>)
 80298d6:	f003 fd63 	bl	802d3a0 <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 80298da:	f06f 0315 	mvn.w	r3, #21
 80298de:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80298e0:	e083      	b.n	80299ea <lfs_rawmount+0x232>
            }

            // check superblock configuration
            if (superblock.name_max) {
 80298e2:	69bb      	ldr	r3, [r7, #24]
 80298e4:	2b00      	cmp	r3, #0
 80298e6:	d018      	beq.n	802991a <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 80298e8:	69ba      	ldr	r2, [r7, #24]
 80298ea:	687b      	ldr	r3, [r7, #4]
 80298ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80298ee:	429a      	cmp	r2, r3
 80298f0:	d910      	bls.n	8029914 <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 80298f2:	69ba      	ldr	r2, [r7, #24]
 80298f4:	687b      	ldr	r3, [r7, #4]
 80298f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80298f8:	4954      	ldr	r1, [pc, #336]	; (8029a4c <lfs_rawmount+0x294>)
 80298fa:	9101      	str	r1, [sp, #4]
 80298fc:	9300      	str	r3, [sp, #0]
 80298fe:	4613      	mov	r3, r2
 8029900:	f241 023c 	movw	r2, #4156	; 0x103c
 8029904:	4952      	ldr	r1, [pc, #328]	; (8029a50 <lfs_rawmount+0x298>)
 8029906:	4854      	ldr	r0, [pc, #336]	; (8029a58 <lfs_rawmount+0x2a0>)
 8029908:	f003 fd4a 	bl	802d3a0 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 802990c:	f06f 0315 	mvn.w	r3, #21
 8029910:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8029912:	e06a      	b.n	80299ea <lfs_rawmount+0x232>
                }

                lfs->name_max = superblock.name_max;
 8029914:	69ba      	ldr	r2, [r7, #24]
 8029916:	687b      	ldr	r3, [r7, #4]
 8029918:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 802991a:	69fb      	ldr	r3, [r7, #28]
 802991c:	2b00      	cmp	r3, #0
 802991e:	d018      	beq.n	8029952 <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 8029920:	69fa      	ldr	r2, [r7, #28]
 8029922:	687b      	ldr	r3, [r7, #4]
 8029924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029926:	429a      	cmp	r2, r3
 8029928:	d910      	bls.n	802994c <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 802992a:	69fa      	ldr	r2, [r7, #28]
 802992c:	687b      	ldr	r3, [r7, #4]
 802992e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029930:	4946      	ldr	r1, [pc, #280]	; (8029a4c <lfs_rawmount+0x294>)
 8029932:	9101      	str	r1, [sp, #4]
 8029934:	9300      	str	r3, [sp, #0]
 8029936:	4613      	mov	r3, r2
 8029938:	f241 0247 	movw	r2, #4167	; 0x1047
 802993c:	4944      	ldr	r1, [pc, #272]	; (8029a50 <lfs_rawmount+0x298>)
 802993e:	4847      	ldr	r0, [pc, #284]	; (8029a5c <lfs_rawmount+0x2a4>)
 8029940:	f003 fd2e 	bl	802d3a0 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8029944:	f06f 0315 	mvn.w	r3, #21
 8029948:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 802994a:	e04e      	b.n	80299ea <lfs_rawmount+0x232>
                }

                lfs->file_max = superblock.file_max;
 802994c:	69fa      	ldr	r2, [r7, #28]
 802994e:	687b      	ldr	r3, [r7, #4]
 8029950:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 8029952:	6a3b      	ldr	r3, [r7, #32]
 8029954:	2b00      	cmp	r3, #0
 8029956:	d018      	beq.n	802998a <lfs_rawmount+0x1d2>
                if (superblock.attr_max > lfs->attr_max) {
 8029958:	6a3a      	ldr	r2, [r7, #32]
 802995a:	687b      	ldr	r3, [r7, #4]
 802995c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802995e:	429a      	cmp	r2, r3
 8029960:	d910      	bls.n	8029984 <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8029962:	6a3a      	ldr	r2, [r7, #32]
 8029964:	687b      	ldr	r3, [r7, #4]
 8029966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8029968:	4938      	ldr	r1, [pc, #224]	; (8029a4c <lfs_rawmount+0x294>)
 802996a:	9101      	str	r1, [sp, #4]
 802996c:	9300      	str	r3, [sp, #0]
 802996e:	4613      	mov	r3, r2
 8029970:	f241 0252 	movw	r2, #4178	; 0x1052
 8029974:	4936      	ldr	r1, [pc, #216]	; (8029a50 <lfs_rawmount+0x298>)
 8029976:	483a      	ldr	r0, [pc, #232]	; (8029a60 <lfs_rawmount+0x2a8>)
 8029978:	f003 fd12 	bl	802d3a0 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 802997c:	f06f 0315 	mvn.w	r3, #21
 8029980:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8029982:	e032      	b.n	80299ea <lfs_rawmount+0x232>
                }

                lfs->attr_max = superblock.attr_max;
 8029984:	6a3a      	ldr	r2, [r7, #32]
 8029986:	687b      	ldr	r3, [r7, #4]
 8029988:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 802998a:	697a      	ldr	r2, [r7, #20]
 802998c:	687b      	ldr	r3, [r7, #4]
 802998e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029990:	6a1b      	ldr	r3, [r3, #32]
 8029992:	429a      	cmp	r2, r3
 8029994:	d011      	beq.n	80299ba <lfs_rawmount+0x202>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8029996:	697a      	ldr	r2, [r7, #20]
 8029998:	687b      	ldr	r3, [r7, #4]
 802999a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802999c:	6a1b      	ldr	r3, [r3, #32]
 802999e:	492b      	ldr	r1, [pc, #172]	; (8029a4c <lfs_rawmount+0x294>)
 80299a0:	9101      	str	r1, [sp, #4]
 80299a2:	9300      	str	r3, [sp, #0]
 80299a4:	4613      	mov	r3, r2
 80299a6:	f241 025c 	movw	r2, #4188	; 0x105c
 80299aa:	4929      	ldr	r1, [pc, #164]	; (8029a50 <lfs_rawmount+0x298>)
 80299ac:	482d      	ldr	r0, [pc, #180]	; (8029a64 <lfs_rawmount+0x2ac>)
 80299ae:	f003 fcf7 	bl	802d3a0 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 80299b2:	f06f 0315 	mvn.w	r3, #21
 80299b6:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80299b8:	e017      	b.n	80299ea <lfs_rawmount+0x232>
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 80299ba:	693a      	ldr	r2, [r7, #16]
 80299bc:	687b      	ldr	r3, [r7, #4]
 80299be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80299c0:	69db      	ldr	r3, [r3, #28]
 80299c2:	429a      	cmp	r2, r3
 80299c4:	d012      	beq.n	80299ec <lfs_rawmount+0x234>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 80299c6:	693a      	ldr	r2, [r7, #16]
 80299c8:	687b      	ldr	r3, [r7, #4]
 80299ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80299cc:	69db      	ldr	r3, [r3, #28]
 80299ce:	491f      	ldr	r1, [pc, #124]	; (8029a4c <lfs_rawmount+0x294>)
 80299d0:	9101      	str	r1, [sp, #4]
 80299d2:	9300      	str	r3, [sp, #0]
 80299d4:	4613      	mov	r3, r2
 80299d6:	f241 0263 	movw	r2, #4195	; 0x1063
 80299da:	491d      	ldr	r1, [pc, #116]	; (8029a50 <lfs_rawmount+0x298>)
 80299dc:	4822      	ldr	r0, [pc, #136]	; (8029a68 <lfs_rawmount+0x2b0>)
 80299de:	f003 fcdf 	bl	802d3a0 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 80299e2:	f06f 0315 	mvn.w	r3, #21
 80299e6:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80299e8:	bf00      	nop
            goto cleanup;
 80299ea:	e083      	b.n	8029af4 <lfs_rawmount+0x33c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 80299ec:	687b      	ldr	r3, [r7, #4]
 80299ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80299f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80299f6:	4619      	mov	r1, r3
 80299f8:	6878      	ldr	r0, [r7, #4]
 80299fa:	f7fb ff0f 	bl	802581c <lfs_dir_getgstate>
 80299fe:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 8029a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029a02:	2b00      	cmp	r3, #0
 8029a04:	d175      	bne.n	8029af2 <lfs_rawmount+0x33a>
    while (!lfs_pair_isnull(dir.tail)) {
 8029a06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029a0a:	3318      	adds	r3, #24
 8029a0c:	4618      	mov	r0, r3
 8029a0e:	f7fa f95e 	bl	8023cce <lfs_pair_isnull>
 8029a12:	4603      	mov	r3, r0
 8029a14:	f083 0301 	eor.w	r3, r3, #1
 8029a18:	b2db      	uxtb	r3, r3
 8029a1a:	2b00      	cmp	r3, #0
 8029a1c:	f47f aee7 	bne.w	80297ee <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 8029a20:	687b      	ldr	r3, [r7, #4]
 8029a22:	3320      	adds	r3, #32
 8029a24:	4618      	mov	r0, r3
 8029a26:	f7fa f952 	bl	8023cce <lfs_pair_isnull>
 8029a2a:	4603      	mov	r3, r0
 8029a2c:	2b00      	cmp	r3, #0
 8029a2e:	d01d      	beq.n	8029a6c <lfs_rawmount+0x2b4>
        err = LFS_ERR_INVAL;
 8029a30:	f06f 0315 	mvn.w	r3, #21
 8029a34:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8029a36:	e05d      	b.n	8029af4 <lfs_rawmount+0x33c>
 8029a38:	08033904 	.word	0x08033904
 8029a3c:	08025975 	.word	0x08025975
 8029a40:	0ff00008 	.word	0x0ff00008
 8029a44:	7ffffc00 	.word	0x7ffffc00
 8029a48:	20100018 	.word	0x20100018
 8029a4c:	0803342c 	.word	0x0803342c
 8029a50:	08033318 	.word	0x08033318
 8029a54:	08033910 	.word	0x08033910
 8029a58:	0803393c 	.word	0x0803393c
 8029a5c:	08033970 	.word	0x08033970
 8029a60:	080339a4 	.word	0x080339a4
 8029a64:	080339d8 	.word	0x080339d8
 8029a68:	08033a0c 	.word	0x08033a0c
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8029a6c:	687b      	ldr	r3, [r7, #4]
 8029a6e:	3330      	adds	r3, #48	; 0x30
 8029a70:	4618      	mov	r0, r3
 8029a72:	f7fa fa83 	bl	8023f7c <lfs_gstate_iszero>
 8029a76:	4603      	mov	r3, r0
 8029a78:	f083 0301 	eor.w	r3, r3, #1
 8029a7c:	b2db      	uxtb	r3, r3
 8029a7e:	2b00      	cmp	r3, #0
 8029a80:	d010      	beq.n	8029aa4 <lfs_rawmount+0x2ec>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8029a82:	687b      	ldr	r3, [r7, #4]
 8029a84:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8029a86:	687b      	ldr	r3, [r7, #4]
 8029a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8029a8a:	687a      	ldr	r2, [r7, #4]
 8029a8c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8029a8e:	481d      	ldr	r0, [pc, #116]	; (8029b04 <lfs_rawmount+0x34c>)
 8029a90:	9002      	str	r0, [sp, #8]
 8029a92:	9201      	str	r2, [sp, #4]
 8029a94:	9300      	str	r3, [sp, #0]
 8029a96:	460b      	mov	r3, r1
 8029a98:	f241 0279 	movw	r2, #4217	; 0x1079
 8029a9c:	491a      	ldr	r1, [pc, #104]	; (8029b08 <lfs_rawmount+0x350>)
 8029a9e:	481b      	ldr	r0, [pc, #108]	; (8029b0c <lfs_rawmount+0x354>)
 8029aa0:	f003 fc7e 	bl	802d3a0 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8029aa4:	687b      	ldr	r3, [r7, #4]
 8029aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029aa8:	4618      	mov	r0, r3
 8029aaa:	f7fa f9b6 	bl	8023e1a <lfs_tag_isvalid>
 8029aae:	4603      	mov	r3, r0
 8029ab0:	f083 0301 	eor.w	r3, r3, #1
 8029ab4:	b2db      	uxtb	r3, r3
 8029ab6:	461a      	mov	r2, r3
 8029ab8:	687b      	ldr	r3, [r7, #4]
 8029aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029abc:	441a      	add	r2, r3
 8029abe:	687b      	ldr	r3, [r7, #4]
 8029ac0:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8029ac2:	687b      	ldr	r3, [r7, #4]
 8029ac4:	687a      	ldr	r2, [r7, #4]
 8029ac6:	333c      	adds	r3, #60	; 0x3c
 8029ac8:	3230      	adds	r2, #48	; 0x30
 8029aca:	ca07      	ldmia	r2, {r0, r1, r2}
 8029acc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 8029ad0:	687b      	ldr	r3, [r7, #4]
 8029ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029ad4:	687a      	ldr	r2, [r7, #4]
 8029ad6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8029ad8:	6a12      	ldr	r2, [r2, #32]
 8029ada:	fbb3 f1f2 	udiv	r1, r3, r2
 8029ade:	fb01 f202 	mul.w	r2, r1, r2
 8029ae2:	1a9a      	subs	r2, r3, r2
 8029ae4:	687b      	ldr	r3, [r7, #4]
 8029ae6:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 8029ae8:	6878      	ldr	r0, [r7, #4]
 8029aea:	f7fa fc30 	bl	802434e <lfs_alloc_drop>

    return 0;
 8029aee:	2300      	movs	r3, #0
 8029af0:	e004      	b.n	8029afc <lfs_rawmount+0x344>
            goto cleanup;
 8029af2:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 8029af4:	6878      	ldr	r0, [r7, #4]
 8029af6:	f000 f80b 	bl	8029b10 <lfs_rawunmount>
    return err;
 8029afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8029afc:	4618      	mov	r0, r3
 8029afe:	3760      	adds	r7, #96	; 0x60
 8029b00:	46bd      	mov	sp, r7
 8029b02:	bd80      	pop	{r7, pc}
 8029b04:	0803342c 	.word	0x0803342c
 8029b08:	08033318 	.word	0x08033318
 8029b0c:	08033a3c 	.word	0x08033a3c

08029b10 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 8029b10:	b580      	push	{r7, lr}
 8029b12:	b082      	sub	sp, #8
 8029b14:	af00      	add	r7, sp, #0
 8029b16:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8029b18:	6878      	ldr	r0, [r7, #4]
 8029b1a:	f7ff fd85 	bl	8029628 <lfs_deinit>
 8029b1e:	4603      	mov	r3, r0
}
 8029b20:	4618      	mov	r0, r3
 8029b22:	3708      	adds	r7, #8
 8029b24:	46bd      	mov	sp, r7
 8029b26:	bd80      	pop	{r7, pc}

08029b28 <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8029b28:	b590      	push	{r4, r7, lr}
 8029b2a:	b09d      	sub	sp, #116	; 0x74
 8029b2c:	af04      	add	r7, sp, #16
 8029b2e:	60f8      	str	r0, [r7, #12]
 8029b30:	60b9      	str	r1, [r7, #8]
 8029b32:	607a      	str	r2, [r7, #4]
 8029b34:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8029b36:	f107 0318 	add.w	r3, r7, #24
 8029b3a:	2220      	movs	r2, #32
 8029b3c:	2100      	movs	r1, #0
 8029b3e:	4618      	mov	r0, r3
 8029b40:	f003 fdc4 	bl	802d6cc <memset>
 8029b44:	2301      	movs	r3, #1
 8029b46:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 8029b48:	2300      	movs	r3, #0
 8029b4a:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8029b4c:	e0a7      	b.n	8029c9e <lfs_fs_rawtraverse+0x176>
        if (cycle >= lfs->cfg->block_count/2) {
 8029b4e:	68fb      	ldr	r3, [r7, #12]
 8029b50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029b52:	6a1b      	ldr	r3, [r3, #32]
 8029b54:	085b      	lsrs	r3, r3, #1
 8029b56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8029b58:	429a      	cmp	r2, r3
 8029b5a:	d302      	bcc.n	8029b62 <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 8029b5c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8029b60:	e102      	b.n	8029d68 <lfs_fs_rawtraverse+0x240>
        }
        cycle += 1;
 8029b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029b64:	3301      	adds	r3, #1
 8029b66:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 8029b68:	2300      	movs	r3, #0
 8029b6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8029b6c:	e013      	b.n	8029b96 <lfs_fs_rawtraverse+0x6e>
            int err = cb(data, dir.tail[i]);
 8029b6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029b70:	3306      	adds	r3, #6
 8029b72:	009b      	lsls	r3, r3, #2
 8029b74:	3360      	adds	r3, #96	; 0x60
 8029b76:	443b      	add	r3, r7
 8029b78:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8029b7c:	68bb      	ldr	r3, [r7, #8]
 8029b7e:	4611      	mov	r1, r2
 8029b80:	6878      	ldr	r0, [r7, #4]
 8029b82:	4798      	blx	r3
 8029b84:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 8029b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029b88:	2b00      	cmp	r3, #0
 8029b8a:	d001      	beq.n	8029b90 <lfs_fs_rawtraverse+0x68>
                return err;
 8029b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029b8e:	e0eb      	b.n	8029d68 <lfs_fs_rawtraverse+0x240>
        for (int i = 0; i < 2; i++) {
 8029b90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029b92:	3301      	adds	r3, #1
 8029b94:	65bb      	str	r3, [r7, #88]	; 0x58
 8029b96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029b98:	2b01      	cmp	r3, #1
 8029b9a:	dde8      	ble.n	8029b6e <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8029b9c:	f107 0318 	add.w	r3, r7, #24
 8029ba0:	f103 0218 	add.w	r2, r3, #24
 8029ba4:	f107 0318 	add.w	r3, r7, #24
 8029ba8:	4619      	mov	r1, r3
 8029baa:	68f8      	ldr	r0, [r7, #12]
 8029bac:	f7fb fe1a 	bl	80257e4 <lfs_dir_fetch>
 8029bb0:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 8029bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029bb4:	2b00      	cmp	r3, #0
 8029bb6:	d001      	beq.n	8029bbc <lfs_fs_rawtraverse+0x94>
            return err;
 8029bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029bba:	e0d5      	b.n	8029d68 <lfs_fs_rawtraverse+0x240>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8029bbc:	2300      	movs	r3, #0
 8029bbe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8029bc2:	e067      	b.n	8029c94 <lfs_fs_rawtraverse+0x16c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8029bc4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8029bc8:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8029bca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8029bce:	f043 0308 	orr.w	r3, r3, #8
 8029bd2:	f107 0118 	add.w	r1, r7, #24
 8029bd6:	f107 0210 	add.w	r2, r7, #16
 8029bda:	9200      	str	r2, [sp, #0]
 8029bdc:	4a64      	ldr	r2, [pc, #400]	; (8029d70 <lfs_fs_rawtraverse+0x248>)
 8029bde:	68f8      	ldr	r0, [r7, #12]
 8029be0:	f7fa fd60 	bl	80246a4 <lfs_dir_get>
 8029be4:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 8029be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029be8:	2b00      	cmp	r3, #0
 8029bea:	da05      	bge.n	8029bf8 <lfs_fs_rawtraverse+0xd0>
                if (tag == LFS_ERR_NOENT) {
 8029bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029bee:	f113 0f02 	cmn.w	r3, #2
 8029bf2:	d049      	beq.n	8029c88 <lfs_fs_rawtraverse+0x160>
                    continue;
                }
                return tag;
 8029bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029bf6:	e0b7      	b.n	8029d68 <lfs_fs_rawtraverse+0x240>
            }
            lfs_ctz_fromle32(&ctz);
 8029bf8:	f107 0310 	add.w	r3, r7, #16
 8029bfc:	4618      	mov	r0, r3
 8029bfe:	f7fa fa6f 	bl	80240e0 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8029c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029c04:	4618      	mov	r0, r3
 8029c06:	f7fa f939 	bl	8023e7c <lfs_tag_type3>
 8029c0a:	4603      	mov	r3, r0
 8029c0c:	461a      	mov	r2, r3
 8029c0e:	f240 2302 	movw	r3, #514	; 0x202
 8029c12:	429a      	cmp	r2, r3
 8029c14:	d113      	bne.n	8029c3e <lfs_fs_rawtraverse+0x116>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8029c16:	68f9      	ldr	r1, [r7, #12]
 8029c18:	6938      	ldr	r0, [r7, #16]
 8029c1a:	697b      	ldr	r3, [r7, #20]
 8029c1c:	687a      	ldr	r2, [r7, #4]
 8029c1e:	9202      	str	r2, [sp, #8]
 8029c20:	68ba      	ldr	r2, [r7, #8]
 8029c22:	9201      	str	r2, [sp, #4]
 8029c24:	9300      	str	r3, [sp, #0]
 8029c26:	4603      	mov	r3, r0
 8029c28:	460a      	mov	r2, r1
 8029c2a:	2100      	movs	r1, #0
 8029c2c:	68f8      	ldr	r0, [r7, #12]
 8029c2e:	f7fe f811 	bl	8027c54 <lfs_ctz_traverse>
 8029c32:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8029c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029c36:	2b00      	cmp	r3, #0
 8029c38:	d027      	beq.n	8029c8a <lfs_fs_rawtraverse+0x162>
                    return err;
 8029c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029c3c:	e094      	b.n	8029d68 <lfs_fs_rawtraverse+0x240>
                }
            } else if (includeorphans &&
 8029c3e:	78fb      	ldrb	r3, [r7, #3]
 8029c40:	2b00      	cmp	r3, #0
 8029c42:	d022      	beq.n	8029c8a <lfs_fs_rawtraverse+0x162>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8029c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029c46:	4618      	mov	r0, r3
 8029c48:	f7fa f918 	bl	8023e7c <lfs_tag_type3>
 8029c4c:	4603      	mov	r3, r0
            } else if (includeorphans &&
 8029c4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8029c52:	d11a      	bne.n	8029c8a <lfs_fs_rawtraverse+0x162>
                for (int i = 0; i < 2; i++) {
 8029c54:	2300      	movs	r3, #0
 8029c56:	653b      	str	r3, [r7, #80]	; 0x50
 8029c58:	e012      	b.n	8029c80 <lfs_fs_rawtraverse+0x158>
                    err = cb(data, (&ctz.head)[i]);
 8029c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029c5c:	009b      	lsls	r3, r3, #2
 8029c5e:	f107 0210 	add.w	r2, r7, #16
 8029c62:	4413      	add	r3, r2
 8029c64:	681a      	ldr	r2, [r3, #0]
 8029c66:	68bb      	ldr	r3, [r7, #8]
 8029c68:	4611      	mov	r1, r2
 8029c6a:	6878      	ldr	r0, [r7, #4]
 8029c6c:	4798      	blx	r3
 8029c6e:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 8029c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029c72:	2b00      	cmp	r3, #0
 8029c74:	d001      	beq.n	8029c7a <lfs_fs_rawtraverse+0x152>
                        return err;
 8029c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029c78:	e076      	b.n	8029d68 <lfs_fs_rawtraverse+0x240>
                for (int i = 0; i < 2; i++) {
 8029c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029c7c:	3301      	adds	r3, #1
 8029c7e:	653b      	str	r3, [r7, #80]	; 0x50
 8029c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029c82:	2b01      	cmp	r3, #1
 8029c84:	dde9      	ble.n	8029c5a <lfs_fs_rawtraverse+0x132>
 8029c86:	e000      	b.n	8029c8a <lfs_fs_rawtraverse+0x162>
                    continue;
 8029c88:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8029c8a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8029c8e:	3301      	adds	r3, #1
 8029c90:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8029c94:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8029c96:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8029c9a:	429a      	cmp	r2, r3
 8029c9c:	d392      	bcc.n	8029bc4 <lfs_fs_rawtraverse+0x9c>
    while (!lfs_pair_isnull(dir.tail)) {
 8029c9e:	f107 0318 	add.w	r3, r7, #24
 8029ca2:	3318      	adds	r3, #24
 8029ca4:	4618      	mov	r0, r3
 8029ca6:	f7fa f812 	bl	8023cce <lfs_pair_isnull>
 8029caa:	4603      	mov	r3, r0
 8029cac:	f083 0301 	eor.w	r3, r3, #1
 8029cb0:	b2db      	uxtb	r3, r3
 8029cb2:	2b00      	cmp	r3, #0
 8029cb4:	f47f af4b 	bne.w	8029b4e <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8029cb8:	68fb      	ldr	r3, [r7, #12]
 8029cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029cbe:	e04f      	b.n	8029d60 <lfs_fs_rawtraverse+0x238>
        if (f->type != LFS_TYPE_REG) {
 8029cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029cc2:	799b      	ldrb	r3, [r3, #6]
 8029cc4:	2b01      	cmp	r3, #1
 8029cc6:	d147      	bne.n	8029d58 <lfs_fs_rawtraverse+0x230>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8029cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8029cd0:	2b00      	cmp	r3, #0
 8029cd2:	d01d      	beq.n	8029d10 <lfs_fs_rawtraverse+0x1e8>
 8029cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8029cdc:	2b00      	cmp	r3, #0
 8029cde:	d117      	bne.n	8029d10 <lfs_fs_rawtraverse+0x1e8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8029ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029ce2:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8029ce6:	68f8      	ldr	r0, [r7, #12]
 8029ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029cea:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8029cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029cf0:	687a      	ldr	r2, [r7, #4]
 8029cf2:	9202      	str	r2, [sp, #8]
 8029cf4:	68ba      	ldr	r2, [r7, #8]
 8029cf6:	9201      	str	r2, [sp, #4]
 8029cf8:	9300      	str	r3, [sp, #0]
 8029cfa:	4623      	mov	r3, r4
 8029cfc:	4602      	mov	r2, r0
 8029cfe:	68f8      	ldr	r0, [r7, #12]
 8029d00:	f7fd ffa8 	bl	8027c54 <lfs_ctz_traverse>
 8029d04:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8029d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029d08:	2b00      	cmp	r3, #0
 8029d0a:	d001      	beq.n	8029d10 <lfs_fs_rawtraverse+0x1e8>
                return err;
 8029d0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029d0e:	e02b      	b.n	8029d68 <lfs_fs_rawtraverse+0x240>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8029d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8029d18:	2b00      	cmp	r3, #0
 8029d1a:	d01e      	beq.n	8029d5a <lfs_fs_rawtraverse+0x232>
 8029d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029d20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8029d24:	2b00      	cmp	r3, #0
 8029d26:	d118      	bne.n	8029d5a <lfs_fs_rawtraverse+0x232>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8029d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d2a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8029d2e:	68f8      	ldr	r0, [r7, #12]
 8029d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d32:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8029d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8029d38:	687a      	ldr	r2, [r7, #4]
 8029d3a:	9202      	str	r2, [sp, #8]
 8029d3c:	68ba      	ldr	r2, [r7, #8]
 8029d3e:	9201      	str	r2, [sp, #4]
 8029d40:	9300      	str	r3, [sp, #0]
 8029d42:	4623      	mov	r3, r4
 8029d44:	4602      	mov	r2, r0
 8029d46:	68f8      	ldr	r0, [r7, #12]
 8029d48:	f7fd ff84 	bl	8027c54 <lfs_ctz_traverse>
 8029d4c:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 8029d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029d50:	2b00      	cmp	r3, #0
 8029d52:	d002      	beq.n	8029d5a <lfs_fs_rawtraverse+0x232>
                return err;
 8029d54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029d56:	e007      	b.n	8029d68 <lfs_fs_rawtraverse+0x240>
            continue;
 8029d58:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8029d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d5c:	681b      	ldr	r3, [r3, #0]
 8029d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d62:	2b00      	cmp	r3, #0
 8029d64:	d1ac      	bne.n	8029cc0 <lfs_fs_rawtraverse+0x198>
            }
        }
    }
#endif

    return 0;
 8029d66:	2300      	movs	r3, #0
}
 8029d68:	4618      	mov	r0, r3
 8029d6a:	3764      	adds	r7, #100	; 0x64
 8029d6c:	46bd      	mov	sp, r7
 8029d6e:	bd90      	pop	{r4, r7, pc}
 8029d70:	700ffc00 	.word	0x700ffc00

08029d74 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8029d74:	b580      	push	{r7, lr}
 8029d76:	b086      	sub	sp, #24
 8029d78:	af00      	add	r7, sp, #0
 8029d7a:	60f8      	str	r0, [r7, #12]
 8029d7c:	60b9      	str	r1, [r7, #8]
 8029d7e:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8029d80:	687b      	ldr	r3, [r7, #4]
 8029d82:	2200      	movs	r2, #0
 8029d84:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8029d86:	687b      	ldr	r3, [r7, #4]
 8029d88:	2201      	movs	r2, #1
 8029d8a:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8029d8c:	2300      	movs	r3, #0
 8029d8e:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 8029d90:	e024      	b.n	8029ddc <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 8029d92:	68fb      	ldr	r3, [r7, #12]
 8029d94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029d96:	6a1b      	ldr	r3, [r3, #32]
 8029d98:	085b      	lsrs	r3, r3, #1
 8029d9a:	697a      	ldr	r2, [r7, #20]
 8029d9c:	429a      	cmp	r2, r3
 8029d9e:	d302      	bcc.n	8029da6 <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 8029da0:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8029da4:	e027      	b.n	8029df6 <lfs_fs_pred+0x82>
        }
        cycle += 1;
 8029da6:	697b      	ldr	r3, [r7, #20]
 8029da8:	3301      	adds	r3, #1
 8029daa:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8029dac:	687b      	ldr	r3, [r7, #4]
 8029dae:	3318      	adds	r3, #24
 8029db0:	68b9      	ldr	r1, [r7, #8]
 8029db2:	4618      	mov	r0, r3
 8029db4:	f7f9 ffa6 	bl	8023d04 <lfs_pair_cmp>
 8029db8:	4603      	mov	r3, r0
 8029dba:	2b00      	cmp	r3, #0
 8029dbc:	d101      	bne.n	8029dc2 <lfs_fs_pred+0x4e>
            return 0;
 8029dbe:	2300      	movs	r3, #0
 8029dc0:	e019      	b.n	8029df6 <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8029dc2:	687b      	ldr	r3, [r7, #4]
 8029dc4:	3318      	adds	r3, #24
 8029dc6:	461a      	mov	r2, r3
 8029dc8:	6879      	ldr	r1, [r7, #4]
 8029dca:	68f8      	ldr	r0, [r7, #12]
 8029dcc:	f7fb fd0a 	bl	80257e4 <lfs_dir_fetch>
 8029dd0:	6138      	str	r0, [r7, #16]
        if (err) {
 8029dd2:	693b      	ldr	r3, [r7, #16]
 8029dd4:	2b00      	cmp	r3, #0
 8029dd6:	d001      	beq.n	8029ddc <lfs_fs_pred+0x68>
            return err;
 8029dd8:	693b      	ldr	r3, [r7, #16]
 8029dda:	e00c      	b.n	8029df6 <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 8029ddc:	687b      	ldr	r3, [r7, #4]
 8029dde:	3318      	adds	r3, #24
 8029de0:	4618      	mov	r0, r3
 8029de2:	f7f9 ff74 	bl	8023cce <lfs_pair_isnull>
 8029de6:	4603      	mov	r3, r0
 8029de8:	f083 0301 	eor.w	r3, r3, #1
 8029dec:	b2db      	uxtb	r3, r3
 8029dee:	2b00      	cmp	r3, #0
 8029df0:	d1cf      	bne.n	8029d92 <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 8029df2:	f06f 0301 	mvn.w	r3, #1
}
 8029df6:	4618      	mov	r0, r3
 8029df8:	3718      	adds	r7, #24
 8029dfa:	46bd      	mov	sp, r7
 8029dfc:	bd80      	pop	{r7, pc}

08029dfe <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8029dfe:	b5b0      	push	{r4, r5, r7, lr}
 8029e00:	b08e      	sub	sp, #56	; 0x38
 8029e02:	af04      	add	r7, sp, #16
 8029e04:	60f8      	str	r0, [r7, #12]
 8029e06:	60b9      	str	r1, [r7, #8]
 8029e08:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8029e0a:	68fb      	ldr	r3, [r7, #12]
 8029e0c:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 8029e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029e10:	681b      	ldr	r3, [r3, #0]
 8029e12:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8029e14:	687b      	ldr	r3, [r7, #4]
 8029e16:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8029e18:	6a3b      	ldr	r3, [r7, #32]
 8029e1a:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8029e1e:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8029e20:	6a3b      	ldr	r3, [r7, #32]
 8029e22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029e24:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 8029e26:	69fb      	ldr	r3, [r7, #28]
 8029e28:	681b      	ldr	r3, [r3, #0]
 8029e2a:	69fa      	ldr	r2, [r7, #28]
 8029e2c:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8029e2e:	2108      	movs	r1, #8
 8029e30:	9103      	str	r1, [sp, #12]
 8029e32:	f107 0110 	add.w	r1, r7, #16
 8029e36:	9102      	str	r1, [sp, #8]
 8029e38:	9201      	str	r2, [sp, #4]
 8029e3a:	9300      	str	r3, [sp, #0]
 8029e3c:	462b      	mov	r3, r5
 8029e3e:	4622      	mov	r2, r4
 8029e40:	4601      	mov	r1, r0
 8029e42:	6a38      	ldr	r0, [r7, #32]
 8029e44:	f7f9 fc0a 	bl	802365c <lfs_bd_read>
 8029e48:	61b8      	str	r0, [r7, #24]
    if (err) {
 8029e4a:	69bb      	ldr	r3, [r7, #24]
 8029e4c:	2b00      	cmp	r3, #0
 8029e4e:	d001      	beq.n	8029e54 <lfs_fs_parent_match+0x56>
        return err;
 8029e50:	69bb      	ldr	r3, [r7, #24]
 8029e52:	e012      	b.n	8029e7a <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8029e54:	f107 0310 	add.w	r3, r7, #16
 8029e58:	4618      	mov	r0, r3
 8029e5a:	f7f9 ffaa 	bl	8023db2 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8029e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029e60:	1d1a      	adds	r2, r3, #4
 8029e62:	f107 0310 	add.w	r3, r7, #16
 8029e66:	4611      	mov	r1, r2
 8029e68:	4618      	mov	r0, r3
 8029e6a:	f7f9 ff4b 	bl	8023d04 <lfs_pair_cmp>
 8029e6e:	4603      	mov	r3, r0
 8029e70:	2b00      	cmp	r3, #0
 8029e72:	bf14      	ite	ne
 8029e74:	2301      	movne	r3, #1
 8029e76:	2300      	moveq	r3, #0
 8029e78:	b2db      	uxtb	r3, r3
}
 8029e7a:	4618      	mov	r0, r3
 8029e7c:	3728      	adds	r7, #40	; 0x28
 8029e7e:	46bd      	mov	sp, r7
 8029e80:	bdb0      	pop	{r4, r5, r7, pc}
	...

08029e84 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8029e84:	b580      	push	{r7, lr}
 8029e86:	b08e      	sub	sp, #56	; 0x38
 8029e88:	af04      	add	r7, sp, #16
 8029e8a:	60f8      	str	r0, [r7, #12]
 8029e8c:	60b9      	str	r1, [r7, #8]
 8029e8e:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8029e90:	687b      	ldr	r3, [r7, #4]
 8029e92:	2200      	movs	r2, #0
 8029e94:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8029e96:	687b      	ldr	r3, [r7, #4]
 8029e98:	2201      	movs	r2, #1
 8029e9a:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8029e9c:	2300      	movs	r3, #0
 8029e9e:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 8029ea0:	e030      	b.n	8029f04 <lfs_fs_parent+0x80>
        if (cycle >= lfs->cfg->block_count/2) {
 8029ea2:	68fb      	ldr	r3, [r7, #12]
 8029ea4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029ea6:	6a1b      	ldr	r3, [r3, #32]
 8029ea8:	085b      	lsrs	r3, r3, #1
 8029eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029eac:	429a      	cmp	r2, r3
 8029eae:	d302      	bcc.n	8029eb6 <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 8029eb0:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8029eb4:	e033      	b.n	8029f1e <lfs_fs_parent+0x9a>
        }
        cycle += 1;
 8029eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029eb8:	3301      	adds	r3, #1
 8029eba:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8029ebc:	687b      	ldr	r3, [r7, #4]
 8029ebe:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8029ec2:	68fb      	ldr	r3, [r7, #12]
 8029ec4:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8029ec6:	68bb      	ldr	r3, [r7, #8]
 8029ec8:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8029eca:	61bb      	str	r3, [r7, #24]
                    lfs, {pair[0], pair[1]}});
 8029ecc:	68bb      	ldr	r3, [r7, #8]
 8029ece:	3304      	adds	r3, #4
 8029ed0:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8029ed2:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8029ed4:	f107 0314 	add.w	r3, r7, #20
 8029ed8:	9303      	str	r3, [sp, #12]
 8029eda:	4b13      	ldr	r3, [pc, #76]	; (8029f28 <lfs_fs_parent+0xa4>)
 8029edc:	9302      	str	r3, [sp, #8]
 8029ede:	2300      	movs	r3, #0
 8029ee0:	9301      	str	r3, [sp, #4]
 8029ee2:	4b12      	ldr	r3, [pc, #72]	; (8029f2c <lfs_fs_parent+0xa8>)
 8029ee4:	9300      	str	r3, [sp, #0]
 8029ee6:	4b12      	ldr	r3, [pc, #72]	; (8029f30 <lfs_fs_parent+0xac>)
 8029ee8:	6879      	ldr	r1, [r7, #4]
 8029eea:	68f8      	ldr	r0, [r7, #12]
 8029eec:	f7fb f90c 	bl	8025108 <lfs_dir_fetchmatch>
 8029ef0:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 8029ef2:	6a3b      	ldr	r3, [r7, #32]
 8029ef4:	2b00      	cmp	r3, #0
 8029ef6:	d005      	beq.n	8029f04 <lfs_fs_parent+0x80>
 8029ef8:	6a3b      	ldr	r3, [r7, #32]
 8029efa:	f113 0f02 	cmn.w	r3, #2
 8029efe:	d001      	beq.n	8029f04 <lfs_fs_parent+0x80>
            return tag;
 8029f00:	6a3b      	ldr	r3, [r7, #32]
 8029f02:	e00c      	b.n	8029f1e <lfs_fs_parent+0x9a>
    while (!lfs_pair_isnull(parent->tail)) {
 8029f04:	687b      	ldr	r3, [r7, #4]
 8029f06:	3318      	adds	r3, #24
 8029f08:	4618      	mov	r0, r3
 8029f0a:	f7f9 fee0 	bl	8023cce <lfs_pair_isnull>
 8029f0e:	4603      	mov	r3, r0
 8029f10:	f083 0301 	eor.w	r3, r3, #1
 8029f14:	b2db      	uxtb	r3, r3
 8029f16:	2b00      	cmp	r3, #0
 8029f18:	d1c3      	bne.n	8029ea2 <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 8029f1a:	f06f 0301 	mvn.w	r3, #1
}
 8029f1e:	4618      	mov	r0, r3
 8029f20:	3728      	adds	r7, #40	; 0x28
 8029f22:	46bd      	mov	sp, r7
 8029f24:	bd80      	pop	{r7, pc}
 8029f26:	bf00      	nop
 8029f28:	08029dff 	.word	0x08029dff
 8029f2c:	20000008 	.word	0x20000008
 8029f30:	7ff003ff 	.word	0x7ff003ff

08029f34 <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8029f34:	b590      	push	{r4, r7, lr}
 8029f36:	b083      	sub	sp, #12
 8029f38:	af00      	add	r7, sp, #0
 8029f3a:	6078      	str	r0, [r7, #4]
 8029f3c:	460b      	mov	r3, r1
 8029f3e:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 8029f40:	687b      	ldr	r3, [r7, #4]
 8029f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029f44:	4618      	mov	r0, r3
 8029f46:	f7f9 ffd3 	bl	8023ef0 <lfs_tag_size>
 8029f4a:	4603      	mov	r3, r0
 8029f4c:	2b00      	cmp	r3, #0
 8029f4e:	d10a      	bne.n	8029f66 <lfs_fs_preporphans+0x32>
 8029f50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8029f54:	2b00      	cmp	r3, #0
 8029f56:	da06      	bge.n	8029f66 <lfs_fs_preporphans+0x32>
 8029f58:	4b10      	ldr	r3, [pc, #64]	; (8029f9c <lfs_fs_preporphans+0x68>)
 8029f5a:	4a11      	ldr	r2, [pc, #68]	; (8029fa0 <lfs_fs_preporphans+0x6c>)
 8029f5c:	f241 114c 	movw	r1, #4428	; 0x114c
 8029f60:	4810      	ldr	r0, [pc, #64]	; (8029fa4 <lfs_fs_preporphans+0x70>)
 8029f62:	f002 f9e3 	bl	802c32c <__assert_func>
    lfs->gstate.tag += orphans;
 8029f66:	687b      	ldr	r3, [r7, #4]
 8029f68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8029f6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8029f6e:	441a      	add	r2, r3
 8029f70:	687b      	ldr	r3, [r7, #4]
 8029f72:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8029f74:	687b      	ldr	r3, [r7, #4]
 8029f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029f78:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8029f7c:	687b      	ldr	r3, [r7, #4]
 8029f7e:	3330      	adds	r3, #48	; 0x30
 8029f80:	4618      	mov	r0, r3
 8029f82:	f7fa f818 	bl	8023fb6 <lfs_gstate_hasorphans>
 8029f86:	4603      	mov	r3, r0
 8029f88:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8029f8a:	ea44 0203 	orr.w	r2, r4, r3
 8029f8e:	687b      	ldr	r3, [r7, #4]
 8029f90:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 8029f92:	2300      	movs	r3, #0
}
 8029f94:	4618      	mov	r0, r3
 8029f96:	370c      	adds	r7, #12
 8029f98:	46bd      	mov	sp, r7
 8029f9a:	bd90      	pop	{r4, r7, pc}
 8029f9c:	08033a74 	.word	0x08033a74
 8029fa0:	08034678 	.word	0x08034678
 8029fa4:	08033318 	.word	0x08033318

08029fa8 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8029fa8:	b480      	push	{r7}
 8029faa:	b085      	sub	sp, #20
 8029fac:	af00      	add	r7, sp, #0
 8029fae:	60f8      	str	r0, [r7, #12]
 8029fb0:	460b      	mov	r3, r1
 8029fb2:	607a      	str	r2, [r7, #4]
 8029fb4:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8029fb6:	68fb      	ldr	r3, [r7, #12]
 8029fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029fba:	4a17      	ldr	r2, [pc, #92]	; (802a018 <lfs_fs_prepmove+0x70>)
 8029fbc:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8029fbe:	897b      	ldrh	r3, [r7, #10]
 8029fc0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8029fc4:	428b      	cmp	r3, r1
 8029fc6:	d006      	beq.n	8029fd6 <lfs_fs_prepmove+0x2e>
 8029fc8:	897b      	ldrh	r3, [r7, #10]
 8029fca:	029b      	lsls	r3, r3, #10
 8029fcc:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8029fd0:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8029fd4:	e000      	b.n	8029fd8 <lfs_fs_prepmove+0x30>
 8029fd6:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8029fd8:	431a      	orrs	r2, r3
 8029fda:	68fb      	ldr	r3, [r7, #12]
 8029fdc:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8029fde:	897b      	ldrh	r3, [r7, #10]
 8029fe0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8029fe4:	4293      	cmp	r3, r2
 8029fe6:	d002      	beq.n	8029fee <lfs_fs_prepmove+0x46>
 8029fe8:	687b      	ldr	r3, [r7, #4]
 8029fea:	681b      	ldr	r3, [r3, #0]
 8029fec:	e000      	b.n	8029ff0 <lfs_fs_prepmove+0x48>
 8029fee:	2300      	movs	r3, #0
 8029ff0:	68fa      	ldr	r2, [r7, #12]
 8029ff2:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8029ff4:	897b      	ldrh	r3, [r7, #10]
 8029ff6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8029ffa:	4293      	cmp	r3, r2
 8029ffc:	d003      	beq.n	802a006 <lfs_fs_prepmove+0x5e>
 8029ffe:	687b      	ldr	r3, [r7, #4]
 802a000:	3304      	adds	r3, #4
 802a002:	681b      	ldr	r3, [r3, #0]
 802a004:	e000      	b.n	802a008 <lfs_fs_prepmove+0x60>
 802a006:	2300      	movs	r3, #0
 802a008:	68fa      	ldr	r2, [r7, #12]
 802a00a:	6393      	str	r3, [r2, #56]	; 0x38
}
 802a00c:	bf00      	nop
 802a00e:	3714      	adds	r7, #20
 802a010:	46bd      	mov	sp, r7
 802a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a016:	4770      	bx	lr
 802a018:	800003ff 	.word	0x800003ff

0802a01c <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 802a01c:	b5b0      	push	{r4, r5, r7, lr}
 802a01e:	b094      	sub	sp, #80	; 0x50
 802a020:	af04      	add	r7, sp, #16
 802a022:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 802a024:	687b      	ldr	r3, [r7, #4]
 802a026:	333c      	adds	r3, #60	; 0x3c
 802a028:	4618      	mov	r0, r3
 802a02a:	f7f9 ffe6 	bl	8023ffa <lfs_gstate_hasmove>
 802a02e:	4603      	mov	r3, r0
 802a030:	f083 0301 	eor.w	r3, r3, #1
 802a034:	b2db      	uxtb	r3, r3
 802a036:	2b00      	cmp	r3, #0
 802a038:	d001      	beq.n	802a03e <lfs_fs_demove+0x22>
        return 0;
 802a03a:	2300      	movs	r3, #0
 802a03c:	e049      	b.n	802a0d2 <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 802a03e:	687b      	ldr	r3, [r7, #4]
 802a040:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 802a042:	687b      	ldr	r3, [r7, #4]
 802a044:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 802a046:	687b      	ldr	r3, [r7, #4]
 802a048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a04a:	4618      	mov	r0, r3
 802a04c:	f7f9 ff40 	bl	8023ed0 <lfs_tag_id>
 802a050:	4603      	mov	r3, r0
 802a052:	461a      	mov	r2, r3
 802a054:	4b21      	ldr	r3, [pc, #132]	; (802a0dc <lfs_fs_demove+0xc0>)
 802a056:	9302      	str	r3, [sp, #8]
 802a058:	9201      	str	r2, [sp, #4]
 802a05a:	9400      	str	r4, [sp, #0]
 802a05c:	462b      	mov	r3, r5
 802a05e:	f241 1266 	movw	r2, #4454	; 0x1166
 802a062:	491f      	ldr	r1, [pc, #124]	; (802a0e0 <lfs_fs_demove+0xc4>)
 802a064:	481f      	ldr	r0, [pc, #124]	; (802a0e4 <lfs_fs_demove+0xc8>)
 802a066:	f003 f99b 	bl	802d3a0 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 802a06a:	687b      	ldr	r3, [r7, #4]
 802a06c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 802a070:	f107 0318 	add.w	r3, r7, #24
 802a074:	4619      	mov	r1, r3
 802a076:	6878      	ldr	r0, [r7, #4]
 802a078:	f7fb fbb4 	bl	80257e4 <lfs_dir_fetch>
 802a07c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 802a07e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a080:	2b00      	cmp	r3, #0
 802a082:	d001      	beq.n	802a088 <lfs_fs_demove+0x6c>
        return err;
 802a084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a086:	e024      	b.n	802a0d2 <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 802a088:	687b      	ldr	r3, [r7, #4]
 802a08a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a08c:	4618      	mov	r0, r3
 802a08e:	f7f9 ff1f 	bl	8023ed0 <lfs_tag_id>
 802a092:	4603      	mov	r3, r0
 802a094:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 802a096:	2200      	movs	r2, #0
 802a098:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802a09c:	6878      	ldr	r0, [r7, #4]
 802a09e:	f7ff ff83 	bl	8029fa8 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 802a0a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802a0a4:	029b      	lsls	r3, r3, #10
 802a0a6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 802a0aa:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802a0ae:	613b      	str	r3, [r7, #16]
 802a0b0:	2300      	movs	r3, #0
 802a0b2:	617b      	str	r3, [r7, #20]
 802a0b4:	f107 0210 	add.w	r2, r7, #16
 802a0b8:	f107 0118 	add.w	r1, r7, #24
 802a0bc:	2301      	movs	r3, #1
 802a0be:	6878      	ldr	r0, [r7, #4]
 802a0c0:	f7fd f9aa 	bl	8027418 <lfs_dir_commit>
 802a0c4:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 802a0c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a0c8:	2b00      	cmp	r3, #0
 802a0ca:	d001      	beq.n	802a0d0 <lfs_fs_demove+0xb4>
        return err;
 802a0cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a0ce:	e000      	b.n	802a0d2 <lfs_fs_demove+0xb6>
    }

    return 0;
 802a0d0:	2300      	movs	r3, #0
}
 802a0d2:	4618      	mov	r0, r3
 802a0d4:	3740      	adds	r7, #64	; 0x40
 802a0d6:	46bd      	mov	sp, r7
 802a0d8:	bdb0      	pop	{r4, r5, r7, pc}
 802a0da:	bf00      	nop
 802a0dc:	0803342c 	.word	0x0803342c
 802a0e0:	08033318 	.word	0x08033318
 802a0e4:	08033aa8 	.word	0x08033aa8

0802a0e8 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 802a0e8:	b5b0      	push	{r4, r5, r7, lr}
 802a0ea:	b0b2      	sub	sp, #200	; 0xc8
 802a0ec:	af04      	add	r7, sp, #16
 802a0ee:	6078      	str	r0, [r7, #4]
 802a0f0:	460b      	mov	r3, r1
 802a0f2:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 802a0f4:	687b      	ldr	r3, [r7, #4]
 802a0f6:	3330      	adds	r3, #48	; 0x30
 802a0f8:	4618      	mov	r0, r3
 802a0fa:	f7f9 ff5c 	bl	8023fb6 <lfs_gstate_hasorphans>
 802a0fe:	4603      	mov	r3, r0
 802a100:	f083 0301 	eor.w	r3, r3, #1
 802a104:	b2db      	uxtb	r3, r3
 802a106:	2b00      	cmp	r3, #0
 802a108:	d001      	beq.n	802a10e <lfs_fs_deorphan+0x26>
        return 0;
 802a10a:	2300      	movs	r3, #0
 802a10c:	e17c      	b.n	802a408 <lfs_fs_deorphan+0x320>
    }

    int8_t found = 0;
 802a10e:	2300      	movs	r3, #0
 802a110:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
restart:
    {
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 802a114:	f107 030c 	add.w	r3, r7, #12
 802a118:	2220      	movs	r2, #32
 802a11a:	2100      	movs	r1, #0
 802a11c:	4618      	mov	r0, r3
 802a11e:	f003 fad5 	bl	802d6cc <memset>
 802a122:	2301      	movs	r3, #1
 802a124:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 802a128:	2301      	movs	r3, #1
 802a12a:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_mdir_t dir;

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 802a12c:	e148      	b.n	802a3c0 <lfs_fs_deorphan+0x2d8>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 802a12e:	f107 030c 	add.w	r3, r7, #12
 802a132:	f103 0218 	add.w	r2, r3, #24
 802a136:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a13a:	4619      	mov	r1, r3
 802a13c:	6878      	ldr	r0, [r7, #4]
 802a13e:	f7fb fb51 	bl	80257e4 <lfs_dir_fetch>
 802a142:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            if (err) {
 802a146:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a14a:	2b00      	cmp	r3, #0
 802a14c:	d002      	beq.n	802a154 <lfs_fs_deorphan+0x6c>
                return err;
 802a14e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a152:	e159      	b.n	802a408 <lfs_fs_deorphan+0x320>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 802a154:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802a158:	f083 0301 	eor.w	r3, r3, #1
 802a15c:	b2db      	uxtb	r3, r3
 802a15e:	2b00      	cmp	r3, #0
 802a160:	f000 8124 	beq.w	802a3ac <lfs_fs_deorphan+0x2c4>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 802a164:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 802a168:	f107 030c 	add.w	r3, r7, #12
 802a16c:	3318      	adds	r3, #24
 802a16e:	4619      	mov	r1, r3
 802a170:	6878      	ldr	r0, [r7, #4]
 802a172:	f7ff fe87 	bl	8029e84 <lfs_fs_parent>
 802a176:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 802a17a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a17e:	2b00      	cmp	r3, #0
 802a180:	da07      	bge.n	802a192 <lfs_fs_deorphan+0xaa>
 802a182:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a186:	f113 0f02 	cmn.w	r3, #2
 802a18a:	d002      	beq.n	802a192 <lfs_fs_deorphan+0xaa>
                    return tag;
 802a18c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a190:	e13a      	b.n	802a408 <lfs_fs_deorphan+0x320>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (tag == LFS_ERR_NOENT && powerloss) {
 802a192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a196:	f113 0f02 	cmn.w	r3, #2
 802a19a:	d157      	bne.n	802a24c <lfs_fs_deorphan+0x164>
 802a19c:	78fb      	ldrb	r3, [r7, #3]
 802a19e:	2b00      	cmp	r3, #0
 802a1a0:	d054      	beq.n	802a24c <lfs_fs_deorphan+0x164>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 802a1a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802a1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a1a6:	499a      	ldr	r1, [pc, #616]	; (802a410 <lfs_fs_deorphan+0x328>)
 802a1a8:	9101      	str	r1, [sp, #4]
 802a1aa:	9300      	str	r3, [sp, #0]
 802a1ac:	4613      	mov	r3, r2
 802a1ae:	f241 12a1 	movw	r2, #4513	; 0x11a1
 802a1b2:	4998      	ldr	r1, [pc, #608]	; (802a414 <lfs_fs_deorphan+0x32c>)
 802a1b4:	4898      	ldr	r0, [pc, #608]	; (802a418 <lfs_fs_deorphan+0x330>)
 802a1b6:	f003 f8f3 	bl	802d3a0 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 802a1ba:	687b      	ldr	r3, [r7, #4]
 802a1bc:	f103 0248 	add.w	r2, r3, #72	; 0x48
 802a1c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a1c4:	4619      	mov	r1, r3
 802a1c6:	6878      	ldr	r0, [r7, #4]
 802a1c8:	f7fb fb28 	bl	802581c <lfs_dir_getgstate>
 802a1cc:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                    if (err) {
 802a1d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a1d4:	2b00      	cmp	r3, #0
 802a1d6:	d002      	beq.n	802a1de <lfs_fs_deorphan+0xf6>
                        return err;
 802a1d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a1dc:	e114      	b.n	802a408 <lfs_fs_deorphan+0x320>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 802a1de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a1e2:	3318      	adds	r3, #24
 802a1e4:	4618      	mov	r0, r3
 802a1e6:	f7f9 fdfe 	bl	8023de6 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 802a1ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802a1ee:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 802a1f2:	051a      	lsls	r2, r3, #20
 802a1f4:	4b89      	ldr	r3, [pc, #548]	; (802a41c <lfs_fs_deorphan+0x334>)
 802a1f6:	4313      	orrs	r3, r2
 802a1f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802a1fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a200:	3318      	adds	r3, #24
 802a202:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 802a206:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 802a20a:	f107 010c 	add.w	r1, r7, #12
 802a20e:	2301      	movs	r3, #1
 802a210:	6878      	ldr	r0, [r7, #4]
 802a212:	f7fc fe07 	bl	8026e24 <lfs_dir_orphaningcommit>
 802a216:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 802a21a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a21e:	3318      	adds	r3, #24
 802a220:	4618      	mov	r0, r3
 802a222:	f7f9 fdc6 	bl	8023db2 <lfs_pair_fromle32>
                    if (state < 0) {
 802a226:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 802a22a:	2b00      	cmp	r3, #0
 802a22c:	da02      	bge.n	802a234 <lfs_fs_deorphan+0x14c>
                        return state;
 802a22e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                    return tag;
 802a232:	e0e9      	b.n	802a408 <lfs_fs_deorphan+0x320>
                    }

                    found += 1;
 802a234:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 802a238:	3301      	adds	r3, #1
 802a23a:	b2db      	uxtb	r3, r3
 802a23c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 802a240:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 802a244:	2b03      	cmp	r3, #3
 802a246:	f040 80af 	bne.w	802a3a8 <lfs_fs_deorphan+0x2c0>
                        goto restart;
 802a24a:	e763      	b.n	802a114 <lfs_fs_deorphan+0x2c>

                    // refetch tail
                    continue;
                }

                if (tag != LFS_ERR_NOENT) {
 802a24c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a250:	f113 0f02 	cmn.w	r3, #2
 802a254:	f000 80aa 	beq.w	802a3ac <lfs_fs_deorphan+0x2c4>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 802a258:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 802a25c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 802a260:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a264:	9300      	str	r3, [sp, #0]
 802a266:	4613      	mov	r3, r2
 802a268:	4a6d      	ldr	r2, [pc, #436]	; (802a420 <lfs_fs_deorphan+0x338>)
 802a26a:	6878      	ldr	r0, [r7, #4]
 802a26c:	f7fa fa1a 	bl	80246a4 <lfs_dir_get>
 802a270:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 802a274:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a278:	2b00      	cmp	r3, #0
 802a27a:	da02      	bge.n	802a282 <lfs_fs_deorphan+0x19a>
                        return state;
 802a27c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a280:	e0c2      	b.n	802a408 <lfs_fs_deorphan+0x320>
                    }
                    lfs_pair_fromle32(pair);
 802a282:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a286:	4618      	mov	r0, r3
 802a288:	f7f9 fd93 	bl	8023db2 <lfs_pair_fromle32>

                    if (!lfs_pair_sync(pair, pdir.tail)) {
 802a28c:	f107 030c 	add.w	r3, r7, #12
 802a290:	f103 0218 	add.w	r2, r3, #24
 802a294:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a298:	4611      	mov	r1, r2
 802a29a:	4618      	mov	r0, r3
 802a29c:	f7f9 fd5c 	bl	8023d58 <lfs_pair_sync>
 802a2a0:	4603      	mov	r3, r0
 802a2a2:	f083 0301 	eor.w	r3, r3, #1
 802a2a6:	b2db      	uxtb	r3, r3
 802a2a8:	2b00      	cmp	r3, #0
 802a2aa:	d07f      	beq.n	802a3ac <lfs_fs_deorphan+0x2c4>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 802a2ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802a2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a2b0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 802a2b4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 802a2b8:	4c55      	ldr	r4, [pc, #340]	; (802a410 <lfs_fs_deorphan+0x328>)
 802a2ba:	9403      	str	r4, [sp, #12]
 802a2bc:	9102      	str	r1, [sp, #8]
 802a2be:	9201      	str	r2, [sp, #4]
 802a2c0:	9300      	str	r3, [sp, #0]
 802a2c2:	4603      	mov	r3, r0
 802a2c4:	f241 12ca 	movw	r2, #4554	; 0x11ca
 802a2c8:	4952      	ldr	r1, [pc, #328]	; (802a414 <lfs_fs_deorphan+0x32c>)
 802a2ca:	4856      	ldr	r0, [pc, #344]	; (802a424 <lfs_fs_deorphan+0x33c>)
 802a2cc:	f003 f868 	bl	802d3a0 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 802a2d0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 802a2d4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 802a2d8:	687b      	ldr	r3, [r7, #4]
 802a2da:	3330      	adds	r3, #48	; 0x30
 802a2dc:	f107 020c 	add.w	r2, r7, #12
 802a2e0:	4611      	mov	r1, r2
 802a2e2:	4618      	mov	r0, r3
 802a2e4:	f7f9 fe9c 	bl	8024020 <lfs_gstate_hasmovehere>
 802a2e8:	4603      	mov	r3, r0
 802a2ea:	2b00      	cmp	r3, #0
 802a2ec:	d01c      	beq.n	802a328 <lfs_fs_deorphan+0x240>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 802a2ee:	687b      	ldr	r3, [r7, #4]
 802a2f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a2f2:	4618      	mov	r0, r3
 802a2f4:	f7f9 fdec 	bl	8023ed0 <lfs_tag_id>
 802a2f8:	4603      	mov	r3, r0
 802a2fa:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                            LFS_DEBUG("Fixing move while fixing orphans "
 802a2fe:	68f9      	ldr	r1, [r7, #12]
 802a300:	693b      	ldr	r3, [r7, #16]
 802a302:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 802a306:	4842      	ldr	r0, [pc, #264]	; (802a410 <lfs_fs_deorphan+0x328>)
 802a308:	9002      	str	r0, [sp, #8]
 802a30a:	9201      	str	r2, [sp, #4]
 802a30c:	9300      	str	r3, [sp, #0]
 802a30e:	460b      	mov	r3, r1
 802a310:	f241 12d5 	movw	r2, #4565	; 0x11d5
 802a314:	493f      	ldr	r1, [pc, #252]	; (802a414 <lfs_fs_deorphan+0x32c>)
 802a316:	4844      	ldr	r0, [pc, #272]	; (802a428 <lfs_fs_deorphan+0x340>)
 802a318:	f003 f842 	bl	802d3a0 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 802a31c:	2200      	movs	r2, #0
 802a31e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802a322:	6878      	ldr	r0, [r7, #4]
 802a324:	f7ff fe40 	bl	8029fa8 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 802a328:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a32c:	4618      	mov	r0, r3
 802a32e:	f7f9 fd5a 	bl	8023de6 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 802a332:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 802a336:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802a33a:	4293      	cmp	r3, r2
 802a33c:	d007      	beq.n	802a34e <lfs_fs_deorphan+0x266>
 802a33e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 802a342:	029b      	lsls	r3, r3, #10
 802a344:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 802a348:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802a34c:	e000      	b.n	802a350 <lfs_fs_deorphan+0x268>
 802a34e:	2300      	movs	r3, #0
 802a350:	67fb      	str	r3, [r7, #124]	; 0x7c
 802a352:	2300      	movs	r3, #0
 802a354:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802a358:	4b34      	ldr	r3, [pc, #208]	; (802a42c <lfs_fs_deorphan+0x344>)
 802a35a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802a35e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a362:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 802a366:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 802a36a:	f107 010c 	add.w	r1, r7, #12
 802a36e:	2302      	movs	r3, #2
 802a370:	6878      	ldr	r0, [r7, #4]
 802a372:	f7fc fd57 	bl	8026e24 <lfs_dir_orphaningcommit>
 802a376:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 802a37a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a37e:	4618      	mov	r0, r3
 802a380:	f7f9 fd17 	bl	8023db2 <lfs_pair_fromle32>
                        if (state < 0) {
 802a384:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a388:	2b00      	cmp	r3, #0
 802a38a:	da02      	bge.n	802a392 <lfs_fs_deorphan+0x2aa>
                            return state;
 802a38c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 802a390:	e03a      	b.n	802a408 <lfs_fs_deorphan+0x320>
                        }

                        found += 1;
 802a392:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 802a396:	3301      	adds	r3, #1
 802a398:	b2db      	uxtb	r3, r3
 802a39a:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 802a39e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a3a2:	2b03      	cmp	r3, #3
 802a3a4:	d10c      	bne.n	802a3c0 <lfs_fs_deorphan+0x2d8>
 802a3a6:	e6b5      	b.n	802a114 <lfs_fs_deorphan+0x2c>
                    continue;
 802a3a8:	bf00      	nop
 802a3aa:	e009      	b.n	802a3c0 <lfs_fs_deorphan+0x2d8>
                        continue;
                    }
                }
            }

            pdir = dir;
 802a3ac:	f107 040c 	add.w	r4, r7, #12
 802a3b0:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 802a3b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802a3b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802a3b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802a3bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 802a3c0:	f107 030c 	add.w	r3, r7, #12
 802a3c4:	3318      	adds	r3, #24
 802a3c6:	4618      	mov	r0, r3
 802a3c8:	f7f9 fc81 	bl	8023cce <lfs_pair_isnull>
 802a3cc:	4603      	mov	r3, r0
 802a3ce:	f083 0301 	eor.w	r3, r3, #1
 802a3d2:	b2db      	uxtb	r3, r3
 802a3d4:	2b00      	cmp	r3, #0
 802a3d6:	f47f aeaa 	bne.w	802a12e <lfs_fs_deorphan+0x46>
        }
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_min(
            lfs_gstate_getorphans(&lfs->gstate),
 802a3da:	687b      	ldr	r3, [r7, #4]
 802a3dc:	3330      	adds	r3, #48	; 0x30
 802a3de:	4618      	mov	r0, r3
 802a3e0:	f7f9 fdfc 	bl	8023fdc <lfs_gstate_getorphans>
 802a3e4:	4603      	mov	r3, r0
    return lfs_fs_preporphans(lfs, -lfs_min(
 802a3e6:	461a      	mov	r2, r3
 802a3e8:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 802a3ec:	4619      	mov	r1, r3
 802a3ee:	4610      	mov	r0, r2
 802a3f0:	f7f9 f858 	bl	80234a4 <lfs_min>
 802a3f4:	4603      	mov	r3, r0
 802a3f6:	b2db      	uxtb	r3, r3
 802a3f8:	425b      	negs	r3, r3
 802a3fa:	b2db      	uxtb	r3, r3
 802a3fc:	b25b      	sxtb	r3, r3
 802a3fe:	4619      	mov	r1, r3
 802a400:	6878      	ldr	r0, [r7, #4]
 802a402:	f7ff fd97 	bl	8029f34 <lfs_fs_preporphans>
 802a406:	4603      	mov	r3, r0
            found));
}
 802a408:	4618      	mov	r0, r3
 802a40a:	37b8      	adds	r7, #184	; 0xb8
 802a40c:	46bd      	mov	sp, r7
 802a40e:	bdb0      	pop	{r4, r5, r7, pc}
 802a410:	0803342c 	.word	0x0803342c
 802a414:	08033318 	.word	0x08033318
 802a418:	08033adc 	.word	0x08033adc
 802a41c:	000ffc08 	.word	0x000ffc08
 802a420:	7ffffc00 	.word	0x7ffffc00
 802a424:	08033b0c 	.word	0x08033b0c
 802a428:	08033b50 	.word	0x08033b50
 802a42c:	600ffc08 	.word	0x600ffc08

0802a430 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 802a430:	b580      	push	{r7, lr}
 802a432:	b084      	sub	sp, #16
 802a434:	af00      	add	r7, sp, #0
 802a436:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 802a438:	6878      	ldr	r0, [r7, #4]
 802a43a:	f7ff fdef 	bl	802a01c <lfs_fs_demove>
 802a43e:	60f8      	str	r0, [r7, #12]
    if (err) {
 802a440:	68fb      	ldr	r3, [r7, #12]
 802a442:	2b00      	cmp	r3, #0
 802a444:	d001      	beq.n	802a44a <lfs_fs_forceconsistency+0x1a>
        return err;
 802a446:	68fb      	ldr	r3, [r7, #12]
 802a448:	e00a      	b.n	802a460 <lfs_fs_forceconsistency+0x30>
    }

    err = lfs_fs_deorphan(lfs, true);
 802a44a:	2101      	movs	r1, #1
 802a44c:	6878      	ldr	r0, [r7, #4]
 802a44e:	f7ff fe4b 	bl	802a0e8 <lfs_fs_deorphan>
 802a452:	60f8      	str	r0, [r7, #12]
    if (err) {
 802a454:	68fb      	ldr	r3, [r7, #12]
 802a456:	2b00      	cmp	r3, #0
 802a458:	d001      	beq.n	802a45e <lfs_fs_forceconsistency+0x2e>
        return err;
 802a45a:	68fb      	ldr	r3, [r7, #12]
 802a45c:	e000      	b.n	802a460 <lfs_fs_forceconsistency+0x30>
    }

    return 0;
 802a45e:	2300      	movs	r3, #0
}
 802a460:	4618      	mov	r0, r3
 802a462:	3710      	adds	r7, #16
 802a464:	46bd      	mov	sp, r7
 802a466:	bd80      	pop	{r7, pc}

0802a468 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 802a468:	b480      	push	{r7}
 802a46a:	b085      	sub	sp, #20
 802a46c:	af00      	add	r7, sp, #0
 802a46e:	6078      	str	r0, [r7, #4]
 802a470:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 802a472:	687b      	ldr	r3, [r7, #4]
 802a474:	60fb      	str	r3, [r7, #12]
    *size += 1;
 802a476:	68fb      	ldr	r3, [r7, #12]
 802a478:	681b      	ldr	r3, [r3, #0]
 802a47a:	1c5a      	adds	r2, r3, #1
 802a47c:	68fb      	ldr	r3, [r7, #12]
 802a47e:	601a      	str	r2, [r3, #0]
    return 0;
 802a480:	2300      	movs	r3, #0
}
 802a482:	4618      	mov	r0, r3
 802a484:	3714      	adds	r7, #20
 802a486:	46bd      	mov	sp, r7
 802a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a48c:	4770      	bx	lr
	...

0802a490 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 802a490:	b580      	push	{r7, lr}
 802a492:	b084      	sub	sp, #16
 802a494:	af00      	add	r7, sp, #0
 802a496:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 802a498:	2300      	movs	r3, #0
 802a49a:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 802a49c:	f107 0208 	add.w	r2, r7, #8
 802a4a0:	2300      	movs	r3, #0
 802a4a2:	4907      	ldr	r1, [pc, #28]	; (802a4c0 <lfs_fs_rawsize+0x30>)
 802a4a4:	6878      	ldr	r0, [r7, #4]
 802a4a6:	f7ff fb3f 	bl	8029b28 <lfs_fs_rawtraverse>
 802a4aa:	60f8      	str	r0, [r7, #12]
    if (err) {
 802a4ac:	68fb      	ldr	r3, [r7, #12]
 802a4ae:	2b00      	cmp	r3, #0
 802a4b0:	d001      	beq.n	802a4b6 <lfs_fs_rawsize+0x26>
        return err;
 802a4b2:	68fb      	ldr	r3, [r7, #12]
 802a4b4:	e000      	b.n	802a4b8 <lfs_fs_rawsize+0x28>
    }

    return size;
 802a4b6:	68bb      	ldr	r3, [r7, #8]
}
 802a4b8:	4618      	mov	r0, r3
 802a4ba:	3710      	adds	r7, #16
 802a4bc:	46bd      	mov	sp, r7
 802a4be:	bd80      	pop	{r7, pc}
 802a4c0:	0802a469 	.word	0x0802a469

0802a4c4 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 802a4c4:	b580      	push	{r7, lr}
 802a4c6:	b084      	sub	sp, #16
 802a4c8:	af00      	add	r7, sp, #0
 802a4ca:	6078      	str	r0, [r7, #4]
 802a4cc:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 802a4ce:	2300      	movs	r3, #0
 802a4d0:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a4d2:	68fb      	ldr	r3, [r7, #12]
 802a4d4:	2b00      	cmp	r3, #0
 802a4d6:	d001      	beq.n	802a4dc <lfs_format+0x18>
        return err;
 802a4d8:	68fb      	ldr	r3, [r7, #12]
 802a4da:	e005      	b.n	802a4e8 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 802a4dc:	6839      	ldr	r1, [r7, #0]
 802a4de:	6878      	ldr	r0, [r7, #4]
 802a4e0:	f7ff f8ca 	bl	8029678 <lfs_rawformat>
 802a4e4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 802a4e6:	68fb      	ldr	r3, [r7, #12]
}
 802a4e8:	4618      	mov	r0, r3
 802a4ea:	3710      	adds	r7, #16
 802a4ec:	46bd      	mov	sp, r7
 802a4ee:	bd80      	pop	{r7, pc}

0802a4f0 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 802a4f0:	b580      	push	{r7, lr}
 802a4f2:	b084      	sub	sp, #16
 802a4f4:	af00      	add	r7, sp, #0
 802a4f6:	6078      	str	r0, [r7, #4]
 802a4f8:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 802a4fa:	2300      	movs	r3, #0
 802a4fc:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a4fe:	68fb      	ldr	r3, [r7, #12]
 802a500:	2b00      	cmp	r3, #0
 802a502:	d001      	beq.n	802a508 <lfs_mount+0x18>
        return err;
 802a504:	68fb      	ldr	r3, [r7, #12]
 802a506:	e005      	b.n	802a514 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 802a508:	6839      	ldr	r1, [r7, #0]
 802a50a:	6878      	ldr	r0, [r7, #4]
 802a50c:	f7ff f954 	bl	80297b8 <lfs_rawmount>
 802a510:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 802a512:	68fb      	ldr	r3, [r7, #12]
}
 802a514:	4618      	mov	r0, r3
 802a516:	3710      	adds	r7, #16
 802a518:	46bd      	mov	sp, r7
 802a51a:	bd80      	pop	{r7, pc}

0802a51c <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 802a51c:	b580      	push	{r7, lr}
 802a51e:	b084      	sub	sp, #16
 802a520:	af00      	add	r7, sp, #0
 802a522:	6078      	str	r0, [r7, #4]
 802a524:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a526:	2300      	movs	r3, #0
 802a528:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a52a:	68fb      	ldr	r3, [r7, #12]
 802a52c:	2b00      	cmp	r3, #0
 802a52e:	d001      	beq.n	802a534 <lfs_remove+0x18>
        return err;
 802a530:	68fb      	ldr	r3, [r7, #12]
 802a532:	e005      	b.n	802a540 <lfs_remove+0x24>
    }
    LFS_TRACE("lfs_remove(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawremove(lfs, path);
 802a534:	6839      	ldr	r1, [r7, #0]
 802a536:	6878      	ldr	r0, [r7, #4]
 802a538:	f7fe fbd0 	bl	8028cdc <lfs_rawremove>
 802a53c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a53e:	68fb      	ldr	r3, [r7, #12]
}
 802a540:	4618      	mov	r0, r3
 802a542:	3710      	adds	r7, #16
 802a544:	46bd      	mov	sp, r7
 802a546:	bd80      	pop	{r7, pc}

0802a548 <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 802a548:	b580      	push	{r7, lr}
 802a54a:	b086      	sub	sp, #24
 802a54c:	af00      	add	r7, sp, #0
 802a54e:	60f8      	str	r0, [r7, #12]
 802a550:	60b9      	str	r1, [r7, #8]
 802a552:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802a554:	2300      	movs	r3, #0
 802a556:	617b      	str	r3, [r7, #20]
    if (err) {
 802a558:	697b      	ldr	r3, [r7, #20]
 802a55a:	2b00      	cmp	r3, #0
 802a55c:	d001      	beq.n	802a562 <lfs_rename+0x1a>
        return err;
 802a55e:	697b      	ldr	r3, [r7, #20]
 802a560:	e006      	b.n	802a570 <lfs_rename+0x28>
    }
    LFS_TRACE("lfs_rename(%p, \"%s\", \"%s\")", (void*)lfs, oldpath, newpath);

    err = lfs_rawrename(lfs, oldpath, newpath);
 802a562:	687a      	ldr	r2, [r7, #4]
 802a564:	68b9      	ldr	r1, [r7, #8]
 802a566:	68f8      	ldr	r0, [r7, #12]
 802a568:	f7fe fc92 	bl	8028e90 <lfs_rawrename>
 802a56c:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a56e:	697b      	ldr	r3, [r7, #20]
}
 802a570:	4618      	mov	r0, r3
 802a572:	3718      	adds	r7, #24
 802a574:	46bd      	mov	sp, r7
 802a576:	bd80      	pop	{r7, pc}

0802a578 <lfs_stat>:
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 802a578:	b580      	push	{r7, lr}
 802a57a:	b086      	sub	sp, #24
 802a57c:	af00      	add	r7, sp, #0
 802a57e:	60f8      	str	r0, [r7, #12]
 802a580:	60b9      	str	r1, [r7, #8]
 802a582:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802a584:	2300      	movs	r3, #0
 802a586:	617b      	str	r3, [r7, #20]
    if (err) {
 802a588:	697b      	ldr	r3, [r7, #20]
 802a58a:	2b00      	cmp	r3, #0
 802a58c:	d001      	beq.n	802a592 <lfs_stat+0x1a>
        return err;
 802a58e:	697b      	ldr	r3, [r7, #20]
 802a590:	e006      	b.n	802a5a0 <lfs_stat+0x28>
    }
    LFS_TRACE("lfs_stat(%p, \"%s\", %p)", (void*)lfs, path, (void*)info);

    err = lfs_rawstat(lfs, path, info);
 802a592:	687a      	ldr	r2, [r7, #4]
 802a594:	68b9      	ldr	r1, [r7, #8]
 802a596:	68f8      	ldr	r0, [r7, #12]
 802a598:	f7fe fb7a 	bl	8028c90 <lfs_rawstat>
 802a59c:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a59e:	697b      	ldr	r3, [r7, #20]
}
 802a5a0:	4618      	mov	r0, r3
 802a5a2:	3718      	adds	r7, #24
 802a5a4:	46bd      	mov	sp, r7
 802a5a6:	bd80      	pop	{r7, pc}

0802a5a8 <lfs_file_opencfg>:
}
#endif

int lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 802a5a8:	b580      	push	{r7, lr}
 802a5aa:	b088      	sub	sp, #32
 802a5ac:	af02      	add	r7, sp, #8
 802a5ae:	60f8      	str	r0, [r7, #12]
 802a5b0:	60b9      	str	r1, [r7, #8]
 802a5b2:	607a      	str	r2, [r7, #4]
 802a5b4:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a5b6:	2300      	movs	r3, #0
 802a5b8:	617b      	str	r3, [r7, #20]
    if (err) {
 802a5ba:	697b      	ldr	r3, [r7, #20]
 802a5bc:	2b00      	cmp	r3, #0
 802a5be:	d001      	beq.n	802a5c4 <lfs_file_opencfg+0x1c>
        return err;
 802a5c0:	697b      	ldr	r3, [r7, #20]
 802a5c2:	e01c      	b.n	802a5fe <lfs_file_opencfg+0x56>
    }
    LFS_TRACE("lfs_file_opencfg(%p, %p, \"%s\", %x, %p {"
                 ".buffer=%p, .attrs=%p, .attr_count=%"PRIu32"})",
            (void*)lfs, (void*)file, path, flags,
            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802a5c4:	68fb      	ldr	r3, [r7, #12]
 802a5c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a5c8:	68b9      	ldr	r1, [r7, #8]
 802a5ca:	4618      	mov	r0, r3
 802a5cc:	f7f9 fe28 	bl	8024220 <lfs_mlist_isopen>
 802a5d0:	4603      	mov	r3, r0
 802a5d2:	f083 0301 	eor.w	r3, r3, #1
 802a5d6:	b2db      	uxtb	r3, r3
 802a5d8:	2b00      	cmp	r3, #0
 802a5da:	d106      	bne.n	802a5ea <lfs_file_opencfg+0x42>
 802a5dc:	4b0a      	ldr	r3, [pc, #40]	; (802a608 <lfs_file_opencfg+0x60>)
 802a5de:	4a0b      	ldr	r2, [pc, #44]	; (802a60c <lfs_file_opencfg+0x64>)
 802a5e0:	f241 517b 	movw	r1, #5499	; 0x157b
 802a5e4:	480a      	ldr	r0, [pc, #40]	; (802a610 <lfs_file_opencfg+0x68>)
 802a5e6:	f001 fea1 	bl	802c32c <__assert_func>

    err = lfs_file_rawopencfg(lfs, file, path, flags, cfg);
 802a5ea:	6a3b      	ldr	r3, [r7, #32]
 802a5ec:	9300      	str	r3, [sp, #0]
 802a5ee:	683b      	ldr	r3, [r7, #0]
 802a5f0:	687a      	ldr	r2, [r7, #4]
 802a5f2:	68b9      	ldr	r1, [r7, #8]
 802a5f4:	68f8      	ldr	r0, [r7, #12]
 802a5f6:	f7fd fba9 	bl	8027d4c <lfs_file_rawopencfg>
 802a5fa:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a5fc:	697b      	ldr	r3, [r7, #20]
}
 802a5fe:	4618      	mov	r0, r3
 802a600:	3718      	adds	r7, #24
 802a602:	46bd      	mov	sp, r7
 802a604:	bd80      	pop	{r7, pc}
 802a606:	bf00      	nop
 802a608:	08033b98 	.word	0x08033b98
 802a60c:	0803468c 	.word	0x0803468c
 802a610:	08033318 	.word	0x08033318

0802a614 <lfs_file_close>:

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 802a614:	b580      	push	{r7, lr}
 802a616:	b084      	sub	sp, #16
 802a618:	af00      	add	r7, sp, #0
 802a61a:	6078      	str	r0, [r7, #4]
 802a61c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a61e:	2300      	movs	r3, #0
 802a620:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a622:	68fb      	ldr	r3, [r7, #12]
 802a624:	2b00      	cmp	r3, #0
 802a626:	d001      	beq.n	802a62c <lfs_file_close+0x18>
        return err;
 802a628:	68fb      	ldr	r3, [r7, #12]
 802a62a:	e015      	b.n	802a658 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802a62c:	687b      	ldr	r3, [r7, #4]
 802a62e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a630:	6839      	ldr	r1, [r7, #0]
 802a632:	4618      	mov	r0, r3
 802a634:	f7f9 fdf4 	bl	8024220 <lfs_mlist_isopen>
 802a638:	4603      	mov	r3, r0
 802a63a:	2b00      	cmp	r3, #0
 802a63c:	d106      	bne.n	802a64c <lfs_file_close+0x38>
 802a63e:	4b08      	ldr	r3, [pc, #32]	; (802a660 <lfs_file_close+0x4c>)
 802a640:	4a08      	ldr	r2, [pc, #32]	; (802a664 <lfs_file_close+0x50>)
 802a642:	f241 518a 	movw	r1, #5514	; 0x158a
 802a646:	4808      	ldr	r0, [pc, #32]	; (802a668 <lfs_file_close+0x54>)
 802a648:	f001 fe70 	bl	802c32c <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 802a64c:	6839      	ldr	r1, [r7, #0]
 802a64e:	6878      	ldr	r0, [r7, #4]
 802a650:	f7fd fd4c 	bl	80280ec <lfs_file_rawclose>
 802a654:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a656:	68fb      	ldr	r3, [r7, #12]
}
 802a658:	4618      	mov	r0, r3
 802a65a:	3710      	adds	r7, #16
 802a65c:	46bd      	mov	sp, r7
 802a65e:	bd80      	pop	{r7, pc}
 802a660:	08033bd0 	.word	0x08033bd0
 802a664:	080346a0 	.word	0x080346a0
 802a668:	08033318 	.word	0x08033318

0802a66c <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 802a66c:	b580      	push	{r7, lr}
 802a66e:	b086      	sub	sp, #24
 802a670:	af00      	add	r7, sp, #0
 802a672:	60f8      	str	r0, [r7, #12]
 802a674:	60b9      	str	r1, [r7, #8]
 802a676:	607a      	str	r2, [r7, #4]
 802a678:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a67a:	2300      	movs	r3, #0
 802a67c:	617b      	str	r3, [r7, #20]
    if (err) {
 802a67e:	697b      	ldr	r3, [r7, #20]
 802a680:	2b00      	cmp	r3, #0
 802a682:	d001      	beq.n	802a688 <lfs_file_read+0x1c>
        return err;
 802a684:	697b      	ldr	r3, [r7, #20]
 802a686:	e017      	b.n	802a6b8 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802a688:	68fb      	ldr	r3, [r7, #12]
 802a68a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a68c:	68b9      	ldr	r1, [r7, #8]
 802a68e:	4618      	mov	r0, r3
 802a690:	f7f9 fdc6 	bl	8024220 <lfs_mlist_isopen>
 802a694:	4603      	mov	r3, r0
 802a696:	2b00      	cmp	r3, #0
 802a698:	d106      	bne.n	802a6a8 <lfs_file_read+0x3c>
 802a69a:	4b09      	ldr	r3, [pc, #36]	; (802a6c0 <lfs_file_read+0x54>)
 802a69c:	4a09      	ldr	r2, [pc, #36]	; (802a6c4 <lfs_file_read+0x58>)
 802a69e:	f241 51ac 	movw	r1, #5548	; 0x15ac
 802a6a2:	4809      	ldr	r0, [pc, #36]	; (802a6c8 <lfs_file_read+0x5c>)
 802a6a4:	f001 fe42 	bl	802c32c <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 802a6a8:	683b      	ldr	r3, [r7, #0]
 802a6aa:	687a      	ldr	r2, [r7, #4]
 802a6ac:	68b9      	ldr	r1, [r7, #8]
 802a6ae:	68f8      	ldr	r0, [r7, #12]
 802a6b0:	f7fe f868 	bl	8028784 <lfs_file_rawread>
 802a6b4:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 802a6b6:	693b      	ldr	r3, [r7, #16]
}
 802a6b8:	4618      	mov	r0, r3
 802a6ba:	3718      	adds	r7, #24
 802a6bc:	46bd      	mov	sp, r7
 802a6be:	bd80      	pop	{r7, pc}
 802a6c0:	08033bd0 	.word	0x08033bd0
 802a6c4:	080346b0 	.word	0x080346b0
 802a6c8:	08033318 	.word	0x08033318

0802a6cc <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 802a6cc:	b580      	push	{r7, lr}
 802a6ce:	b086      	sub	sp, #24
 802a6d0:	af00      	add	r7, sp, #0
 802a6d2:	60f8      	str	r0, [r7, #12]
 802a6d4:	60b9      	str	r1, [r7, #8]
 802a6d6:	607a      	str	r2, [r7, #4]
 802a6d8:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a6da:	2300      	movs	r3, #0
 802a6dc:	617b      	str	r3, [r7, #20]
    if (err) {
 802a6de:	697b      	ldr	r3, [r7, #20]
 802a6e0:	2b00      	cmp	r3, #0
 802a6e2:	d001      	beq.n	802a6e8 <lfs_file_write+0x1c>
        return err;
 802a6e4:	697b      	ldr	r3, [r7, #20]
 802a6e6:	e017      	b.n	802a718 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802a6e8:	68fb      	ldr	r3, [r7, #12]
 802a6ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a6ec:	68b9      	ldr	r1, [r7, #8]
 802a6ee:	4618      	mov	r0, r3
 802a6f0:	f7f9 fd96 	bl	8024220 <lfs_mlist_isopen>
 802a6f4:	4603      	mov	r3, r0
 802a6f6:	2b00      	cmp	r3, #0
 802a6f8:	d106      	bne.n	802a708 <lfs_file_write+0x3c>
 802a6fa:	4b09      	ldr	r3, [pc, #36]	; (802a720 <lfs_file_write+0x54>)
 802a6fc:	4a09      	ldr	r2, [pc, #36]	; (802a724 <lfs_file_write+0x58>)
 802a6fe:	f241 51be 	movw	r1, #5566	; 0x15be
 802a702:	4809      	ldr	r0, [pc, #36]	; (802a728 <lfs_file_write+0x5c>)
 802a704:	f001 fe12 	bl	802c32c <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 802a708:	683b      	ldr	r3, [r7, #0]
 802a70a:	687a      	ldr	r2, [r7, #4]
 802a70c:	68b9      	ldr	r1, [r7, #8]
 802a70e:	68f8      	ldr	r0, [r7, #12]
 802a710:	f7fe f996 	bl	8028a40 <lfs_file_rawwrite>
 802a714:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 802a716:	693b      	ldr	r3, [r7, #16]
}
 802a718:	4618      	mov	r0, r3
 802a71a:	3718      	adds	r7, #24
 802a71c:	46bd      	mov	sp, r7
 802a71e:	bd80      	pop	{r7, pc}
 802a720:	08033bd0 	.word	0x08033bd0
 802a724:	080346c0 	.word	0x080346c0
 802a728:	08033318 	.word	0x08033318

0802a72c <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 802a72c:	b580      	push	{r7, lr}
 802a72e:	b086      	sub	sp, #24
 802a730:	af00      	add	r7, sp, #0
 802a732:	60f8      	str	r0, [r7, #12]
 802a734:	60b9      	str	r1, [r7, #8]
 802a736:	607a      	str	r2, [r7, #4]
 802a738:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a73a:	2300      	movs	r3, #0
 802a73c:	617b      	str	r3, [r7, #20]
    if (err) {
 802a73e:	697b      	ldr	r3, [r7, #20]
 802a740:	2b00      	cmp	r3, #0
 802a742:	d001      	beq.n	802a748 <lfs_file_seek+0x1c>
        return err;
 802a744:	697b      	ldr	r3, [r7, #20]
 802a746:	e017      	b.n	802a778 <lfs_file_seek+0x4c>
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802a748:	68fb      	ldr	r3, [r7, #12]
 802a74a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a74c:	68b9      	ldr	r1, [r7, #8]
 802a74e:	4618      	mov	r0, r3
 802a750:	f7f9 fd66 	bl	8024220 <lfs_mlist_isopen>
 802a754:	4603      	mov	r3, r0
 802a756:	2b00      	cmp	r3, #0
 802a758:	d106      	bne.n	802a768 <lfs_file_seek+0x3c>
 802a75a:	4b09      	ldr	r3, [pc, #36]	; (802a780 <lfs_file_seek+0x54>)
 802a75c:	4a09      	ldr	r2, [pc, #36]	; (802a784 <lfs_file_seek+0x58>)
 802a75e:	f241 51d0 	movw	r1, #5584	; 0x15d0
 802a762:	4809      	ldr	r0, [pc, #36]	; (802a788 <lfs_file_seek+0x5c>)
 802a764:	f001 fde2 	bl	802c32c <__assert_func>

    lfs_soff_t res = lfs_file_rawseek(lfs, file, off, whence);
 802a768:	683b      	ldr	r3, [r7, #0]
 802a76a:	687a      	ldr	r2, [r7, #4]
 802a76c:	68b9      	ldr	r1, [r7, #8]
 802a76e:	68f8      	ldr	r0, [r7, #12]
 802a770:	f7fe f9ea 	bl	8028b48 <lfs_file_rawseek>
 802a774:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 802a776:	693b      	ldr	r3, [r7, #16]
}
 802a778:	4618      	mov	r0, r3
 802a77a:	3718      	adds	r7, #24
 802a77c:	46bd      	mov	sp, r7
 802a77e:	bd80      	pop	{r7, pc}
 802a780:	08033bd0 	.word	0x08033bd0
 802a784:	080346d0 	.word	0x080346d0
 802a788:	08033318 	.word	0x08033318

0802a78c <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 802a78c:	b580      	push	{r7, lr}
 802a78e:	b084      	sub	sp, #16
 802a790:	af00      	add	r7, sp, #0
 802a792:	6078      	str	r0, [r7, #4]
 802a794:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a796:	2300      	movs	r3, #0
 802a798:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a79a:	68fb      	ldr	r3, [r7, #12]
 802a79c:	2b00      	cmp	r3, #0
 802a79e:	d001      	beq.n	802a7a4 <lfs_mkdir+0x18>
        return err;
 802a7a0:	68fb      	ldr	r3, [r7, #12]
 802a7a2:	e005      	b.n	802a7b0 <lfs_mkdir+0x24>
    }
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawmkdir(lfs, path);
 802a7a4:	6839      	ldr	r1, [r7, #0]
 802a7a6:	6878      	ldr	r0, [r7, #4]
 802a7a8:	f7fc fe5c 	bl	8027464 <lfs_rawmkdir>
 802a7ac:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a7ae:	68fb      	ldr	r3, [r7, #12]
}
 802a7b0:	4618      	mov	r0, r3
 802a7b2:	3710      	adds	r7, #16
 802a7b4:	46bd      	mov	sp, r7
 802a7b6:	bd80      	pop	{r7, pc}

0802a7b8 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 802a7b8:	b580      	push	{r7, lr}
 802a7ba:	b086      	sub	sp, #24
 802a7bc:	af00      	add	r7, sp, #0
 802a7be:	60f8      	str	r0, [r7, #12]
 802a7c0:	60b9      	str	r1, [r7, #8]
 802a7c2:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802a7c4:	2300      	movs	r3, #0
 802a7c6:	617b      	str	r3, [r7, #20]
    if (err) {
 802a7c8:	697b      	ldr	r3, [r7, #20]
 802a7ca:	2b00      	cmp	r3, #0
 802a7cc:	d001      	beq.n	802a7d2 <lfs_dir_open+0x1a>
        return err;
 802a7ce:	697b      	ldr	r3, [r7, #20]
 802a7d0:	e019      	b.n	802a806 <lfs_dir_open+0x4e>
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 802a7d2:	68fb      	ldr	r3, [r7, #12]
 802a7d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a7d6:	68b9      	ldr	r1, [r7, #8]
 802a7d8:	4618      	mov	r0, r3
 802a7da:	f7f9 fd21 	bl	8024220 <lfs_mlist_isopen>
 802a7de:	4603      	mov	r3, r0
 802a7e0:	f083 0301 	eor.w	r3, r3, #1
 802a7e4:	b2db      	uxtb	r3, r3
 802a7e6:	2b00      	cmp	r3, #0
 802a7e8:	d106      	bne.n	802a7f8 <lfs_dir_open+0x40>
 802a7ea:	4b09      	ldr	r3, [pc, #36]	; (802a810 <lfs_dir_open+0x58>)
 802a7ec:	4a09      	ldr	r2, [pc, #36]	; (802a814 <lfs_dir_open+0x5c>)
 802a7ee:	f241 612d 	movw	r1, #5677	; 0x162d
 802a7f2:	4809      	ldr	r0, [pc, #36]	; (802a818 <lfs_dir_open+0x60>)
 802a7f4:	f001 fd9a 	bl	802c32c <__assert_func>

    err = lfs_dir_rawopen(lfs, dir, path);
 802a7f8:	687a      	ldr	r2, [r7, #4]
 802a7fa:	68b9      	ldr	r1, [r7, #8]
 802a7fc:	68f8      	ldr	r0, [r7, #12]
 802a7fe:	f7fc ff71 	bl	80276e4 <lfs_dir_rawopen>
 802a802:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a804:	697b      	ldr	r3, [r7, #20]
}
 802a806:	4618      	mov	r0, r3
 802a808:	3718      	adds	r7, #24
 802a80a:	46bd      	mov	sp, r7
 802a80c:	bd80      	pop	{r7, pc}
 802a80e:	bf00      	nop
 802a810:	08033c08 	.word	0x08033c08
 802a814:	080346e0 	.word	0x080346e0
 802a818:	08033318 	.word	0x08033318

0802a81c <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 802a81c:	b580      	push	{r7, lr}
 802a81e:	b084      	sub	sp, #16
 802a820:	af00      	add	r7, sp, #0
 802a822:	6078      	str	r0, [r7, #4]
 802a824:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a826:	2300      	movs	r3, #0
 802a828:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a82a:	68fb      	ldr	r3, [r7, #12]
 802a82c:	2b00      	cmp	r3, #0
 802a82e:	d001      	beq.n	802a834 <lfs_dir_close+0x18>
        return err;
 802a830:	68fb      	ldr	r3, [r7, #12]
 802a832:	e005      	b.n	802a840 <lfs_dir_close+0x24>
    }
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);

    err = lfs_dir_rawclose(lfs, dir);
 802a834:	6839      	ldr	r1, [r7, #0]
 802a836:	6878      	ldr	r0, [r7, #4]
 802a838:	f7fc ffce 	bl	80277d8 <lfs_dir_rawclose>
 802a83c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a83e:	68fb      	ldr	r3, [r7, #12]
}
 802a840:	4618      	mov	r0, r3
 802a842:	3710      	adds	r7, #16
 802a844:	46bd      	mov	sp, r7
 802a846:	bd80      	pop	{r7, pc}

0802a848 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 802a848:	b580      	push	{r7, lr}
 802a84a:	b086      	sub	sp, #24
 802a84c:	af00      	add	r7, sp, #0
 802a84e:	60f8      	str	r0, [r7, #12]
 802a850:	60b9      	str	r1, [r7, #8]
 802a852:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802a854:	2300      	movs	r3, #0
 802a856:	617b      	str	r3, [r7, #20]
    if (err) {
 802a858:	697b      	ldr	r3, [r7, #20]
 802a85a:	2b00      	cmp	r3, #0
 802a85c:	d001      	beq.n	802a862 <lfs_dir_read+0x1a>
        return err;
 802a85e:	697b      	ldr	r3, [r7, #20]
 802a860:	e006      	b.n	802a870 <lfs_dir_read+0x28>
    }
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);

    err = lfs_dir_rawread(lfs, dir, info);
 802a862:	687a      	ldr	r2, [r7, #4]
 802a864:	68b9      	ldr	r1, [r7, #8]
 802a866:	68f8      	ldr	r0, [r7, #12]
 802a868:	f7fc ffc4 	bl	80277f4 <lfs_dir_rawread>
 802a86c:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a86e:	697b      	ldr	r3, [r7, #20]
}
 802a870:	4618      	mov	r0, r3
 802a872:	3718      	adds	r7, #24
 802a874:	46bd      	mov	sp, r7
 802a876:	bd80      	pop	{r7, pc}

0802a878 <io_fs_init>:
}

#endif

int io_fs_init(uint8_t * lfsReadBuff, uint8_t * lfsWriteBuff, uint8_t * lfslookaheadBuff, uint16_t buffers_size, struct lfs_config *cfg)
{
 802a878:	b580      	push	{r7, lr}
 802a87a:	b088      	sub	sp, #32
 802a87c:	af00      	add	r7, sp, #0
 802a87e:	60f8      	str	r0, [r7, #12]
 802a880:	60b9      	str	r1, [r7, #8]
 802a882:	607a      	str	r2, [r7, #4]
 802a884:	807b      	strh	r3, [r7, #2]
	struct SPI_flash_info  flash_info;

	flash_info = sFLASH_GetInfo();
 802a886:	f107 0310 	add.w	r3, r7, #16
 802a88a:	4618      	mov	r0, r3
 802a88c:	f7ea fb3c 	bl	8014f08 <sFLASH_GetInfo>

    cfg->read_size   = flash_info.read_size;
 802a890:	8abb      	ldrh	r3, [r7, #20]
 802a892:	461a      	mov	r2, r3
 802a894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a896:	615a      	str	r2, [r3, #20]
    cfg->prog_size   = flash_info.write_size;
 802a898:	8afb      	ldrh	r3, [r7, #22]
 802a89a:	461a      	mov	r2, r3
 802a89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a89e:	619a      	str	r2, [r3, #24]

    cfg->block_size  = flash_info.erase_size;
 802a8a0:	8b3b      	ldrh	r3, [r7, #24]
 802a8a2:	461a      	mov	r2, r3
 802a8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8a6:	61da      	str	r2, [r3, #28]
    cfg->block_count = flash_info.block_count;
 802a8a8:	8bbb      	ldrh	r3, [r7, #28]
 802a8aa:	461a      	mov	r2, r3
 802a8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8ae:	621a      	str	r2, [r3, #32]

    cfg->lookahead_size = buffers_size;
 802a8b0:	887a      	ldrh	r2, [r7, #2]
 802a8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8b4:	62da      	str	r2, [r3, #44]	; 0x2c
    cfg->cache_size     = buffers_size;
 802a8b6:	887a      	ldrh	r2, [r7, #2]
 802a8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8ba:	629a      	str	r2, [r3, #40]	; 0x28
    cfg->read_buffer = lfsReadBuff;
 802a8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8be:	68fa      	ldr	r2, [r7, #12]
 802a8c0:	631a      	str	r2, [r3, #48]	; 0x30
    cfg->prog_buffer = lfsWriteBuff;
 802a8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8c4:	68ba      	ldr	r2, [r7, #8]
 802a8c6:	635a      	str	r2, [r3, #52]	; 0x34
 //   cfg.file_buffer = lfsReadBuff;
    cfg->lookahead_buffer = lfslookaheadBuff;
 802a8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8ca:	687a      	ldr	r2, [r7, #4]
 802a8cc:	639a      	str	r2, [r3, #56]	; 0x38

    cfg->read   = block_device_read;
 802a8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8d0:	4a11      	ldr	r2, [pc, #68]	; (802a918 <io_fs_init+0xa0>)
 802a8d2:	605a      	str	r2, [r3, #4]
    cfg->prog   = block_device_prog;
 802a8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8d6:	4a11      	ldr	r2, [pc, #68]	; (802a91c <io_fs_init+0xa4>)
 802a8d8:	609a      	str	r2, [r3, #8]
    cfg->erase  = block_device_erase;
 802a8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8dc:	4a10      	ldr	r2, [pc, #64]	; (802a920 <io_fs_init+0xa8>)
 802a8de:	60da      	str	r2, [r3, #12]
    cfg->sync   = block_device_sync;
 802a8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8e2:	4a10      	ldr	r2, [pc, #64]	; (802a924 <io_fs_init+0xac>)
 802a8e4:	611a      	str	r2, [r3, #16]
#ifdef LFS_THREADSAFE
	cfg.lock 	= lfs_lock;
	cfg.unlock	= lfs_unlock;
#endif

    cfg->block_cycles 	= FLASH_BLOCK_CYCLES;
 802a8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8e8:	f242 7210 	movw	r2, #10000	; 0x2710
 802a8ec:	625a      	str	r2, [r3, #36]	; 0x24
    cfg->name_max  		= LFS_NAME_MAX;
 802a8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8f0:	22ff      	movs	r2, #255	; 0xff
 802a8f2:	63da      	str	r2, [r3, #60]	; 0x3c
    cfg->file_max		= LFS_FILE_MAX;
 802a8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8f6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802a8fa:	641a      	str	r2, [r3, #64]	; 0x40
    cfg->attr_max		= LFS_ATTR_MAX;
 802a8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8fe:	f240 32fe 	movw	r2, #1022	; 0x3fe
 802a902:	645a      	str	r2, [r3, #68]	; 0x44
    cfg->metadata_max	= flash_info.erase_size;
 802a904:	8b3b      	ldrh	r3, [r7, #24]
 802a906:	461a      	mov	r2, r3
 802a908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a90a:	649a      	str	r2, [r3, #72]	; 0x48

    return 0;
 802a90c:	2300      	movs	r3, #0
}
 802a90e:	4618      	mov	r0, r3
 802a910:	3720      	adds	r7, #32
 802a912:	46bd      	mov	sp, r7
 802a914:	bd80      	pop	{r7, pc}
 802a916:	bf00      	nop
 802a918:	0802a929 	.word	0x0802a929
 802a91c:	0802a9c5 	.word	0x0802a9c5
 802a920:	0802a97d 	.word	0x0802a97d
 802a924:	0802aa19 	.word	0x0802aa19

0802a928 <block_device_read>:

int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 802a928:	b580      	push	{r7, lr}
 802a92a:	b084      	sub	sp, #16
 802a92c:	af00      	add	r7, sp, #0
 802a92e:	60f8      	str	r0, [r7, #12]
 802a930:	60b9      	str	r1, [r7, #8]
 802a932:	607a      	str	r2, [r7, #4]
 802a934:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 802a936:	68fb      	ldr	r3, [r7, #12]
 802a938:	6a1b      	ldr	r3, [r3, #32]
 802a93a:	68ba      	ldr	r2, [r7, #8]
 802a93c:	429a      	cmp	r2, r3
 802a93e:	d305      	bcc.n	802a94c <block_device_read+0x24>
 802a940:	4b0b      	ldr	r3, [pc, #44]	; (802a970 <block_device_read+0x48>)
 802a942:	4a0c      	ldr	r2, [pc, #48]	; (802a974 <block_device_read+0x4c>)
 802a944:	2148      	movs	r1, #72	; 0x48
 802a946:	480c      	ldr	r0, [pc, #48]	; (802a978 <block_device_read+0x50>)
 802a948:	f001 fcf0 	bl	802c32c <__assert_func>
#endif
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 802a94c:	68fb      	ldr	r3, [r7, #12]
 802a94e:	69db      	ldr	r3, [r3, #28]
 802a950:	68ba      	ldr	r2, [r7, #8]
 802a952:	fb03 f202 	mul.w	r2, r3, r2
 802a956:	687b      	ldr	r3, [r7, #4]
 802a958:	4413      	add	r3, r2
 802a95a:	69ba      	ldr	r2, [r7, #24]
 802a95c:	b292      	uxth	r2, r2
 802a95e:	4619      	mov	r1, r3
 802a960:	6838      	ldr	r0, [r7, #0]
 802a962:	f7ea fc79 	bl	8015258 <sFLASH_ReadBuffer>
	return 0;
 802a966:	2300      	movs	r3, #0
}
 802a968:	4618      	mov	r0, r3
 802a96a:	3710      	adds	r7, #16
 802a96c:	46bd      	mov	sp, r7
 802a96e:	bd80      	pop	{r7, pc}
 802a970:	08033c40 	.word	0x08033c40
 802a974:	080346f0 	.word	0x080346f0
 802a978:	08033c58 	.word	0x08033c58

0802a97c <block_device_erase>:

int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 802a97c:	b580      	push	{r7, lr}
 802a97e:	b082      	sub	sp, #8
 802a980:	af00      	add	r7, sp, #0
 802a982:	6078      	str	r0, [r7, #4]
 802a984:	6039      	str	r1, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 802a986:	687b      	ldr	r3, [r7, #4]
 802a988:	6a1b      	ldr	r3, [r3, #32]
 802a98a:	683a      	ldr	r2, [r7, #0]
 802a98c:	429a      	cmp	r2, r3
 802a98e:	d305      	bcc.n	802a99c <block_device_erase+0x20>
 802a990:	4b09      	ldr	r3, [pc, #36]	; (802a9b8 <block_device_erase+0x3c>)
 802a992:	4a0a      	ldr	r2, [pc, #40]	; (802a9bc <block_device_erase+0x40>)
 802a994:	2150      	movs	r1, #80	; 0x50
 802a996:	480a      	ldr	r0, [pc, #40]	; (802a9c0 <block_device_erase+0x44>)
 802a998:	f001 fcc8 	bl	802c32c <__assert_func>
#endif
	sFLASH_EraseSector(block * (c -> block_size));
 802a99c:	687b      	ldr	r3, [r7, #4]
 802a99e:	69db      	ldr	r3, [r3, #28]
 802a9a0:	683a      	ldr	r2, [r7, #0]
 802a9a2:	fb02 f303 	mul.w	r3, r2, r3
 802a9a6:	4618      	mov	r0, r3
 802a9a8:	f7ea fb54 	bl	8015054 <sFLASH_EraseSector>
	return 0;
 802a9ac:	2300      	movs	r3, #0
}
 802a9ae:	4618      	mov	r0, r3
 802a9b0:	3708      	adds	r7, #8
 802a9b2:	46bd      	mov	sp, r7
 802a9b4:	bd80      	pop	{r7, pc}
 802a9b6:	bf00      	nop
 802a9b8:	08033c40 	.word	0x08033c40
 802a9bc:	08034704 	.word	0x08034704
 802a9c0:	08033c58 	.word	0x08033c58

0802a9c4 <block_device_prog>:

int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 802a9c4:	b580      	push	{r7, lr}
 802a9c6:	b084      	sub	sp, #16
 802a9c8:	af00      	add	r7, sp, #0
 802a9ca:	60f8      	str	r0, [r7, #12]
 802a9cc:	60b9      	str	r1, [r7, #8]
 802a9ce:	607a      	str	r2, [r7, #4]
 802a9d0:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 802a9d2:	68fb      	ldr	r3, [r7, #12]
 802a9d4:	6a1b      	ldr	r3, [r3, #32]
 802a9d6:	68ba      	ldr	r2, [r7, #8]
 802a9d8:	429a      	cmp	r2, r3
 802a9da:	d305      	bcc.n	802a9e8 <block_device_prog+0x24>
 802a9dc:	4b0b      	ldr	r3, [pc, #44]	; (802aa0c <block_device_prog+0x48>)
 802a9de:	4a0c      	ldr	r2, [pc, #48]	; (802aa10 <block_device_prog+0x4c>)
 802a9e0:	2158      	movs	r1, #88	; 0x58
 802a9e2:	480c      	ldr	r0, [pc, #48]	; (802aa14 <block_device_prog+0x50>)
 802a9e4:	f001 fca2 	bl	802c32c <__assert_func>
#endif
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 802a9e8:	68fb      	ldr	r3, [r7, #12]
 802a9ea:	69db      	ldr	r3, [r3, #28]
 802a9ec:	68ba      	ldr	r2, [r7, #8]
 802a9ee:	fb03 f202 	mul.w	r2, r3, r2
 802a9f2:	687b      	ldr	r3, [r7, #4]
 802a9f4:	4413      	add	r3, r2
 802a9f6:	69ba      	ldr	r2, [r7, #24]
 802a9f8:	b292      	uxth	r2, r2
 802a9fa:	4619      	mov	r1, r3
 802a9fc:	6838      	ldr	r0, [r7, #0]
 802a9fe:	f7ea fb82 	bl	8015106 <sFLASH_WriteBuffer>
	return 0;
 802aa02:	2300      	movs	r3, #0
}
 802aa04:	4618      	mov	r0, r3
 802aa06:	3710      	adds	r7, #16
 802aa08:	46bd      	mov	sp, r7
 802aa0a:	bd80      	pop	{r7, pc}
 802aa0c:	08033c40 	.word	0x08033c40
 802aa10:	08034718 	.word	0x08034718
 802aa14:	08033c58 	.word	0x08033c58

0802aa18 <block_device_sync>:

int block_device_sync(const struct lfs_config *c){
 802aa18:	b480      	push	{r7}
 802aa1a:	b083      	sub	sp, #12
 802aa1c:	af00      	add	r7, sp, #0
 802aa1e:	6078      	str	r0, [r7, #4]
	return 0;
 802aa20:	2300      	movs	r3, #0
}
 802aa22:	4618      	mov	r0, r3
 802aa24:	370c      	adds	r7, #12
 802aa26:	46bd      	mov	sp, r7
 802aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aa2c:	4770      	bx	lr
	...

0802aa30 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 802aa30:	b480      	push	{r7}
 802aa32:	b087      	sub	sp, #28
 802aa34:	af00      	add	r7, sp, #0
 802aa36:	60f8      	str	r0, [r7, #12]
 802aa38:	60b9      	str	r1, [r7, #8]
 802aa3a:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 802aa3c:	68bb      	ldr	r3, [r7, #8]
 802aa3e:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 802aa40:	2300      	movs	r3, #0
 802aa42:	617b      	str	r3, [r7, #20]
 802aa44:	e024      	b.n	802aa90 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 802aa46:	68fb      	ldr	r3, [r7, #12]
 802aa48:	091a      	lsrs	r2, r3, #4
 802aa4a:	6939      	ldr	r1, [r7, #16]
 802aa4c:	697b      	ldr	r3, [r7, #20]
 802aa4e:	440b      	add	r3, r1
 802aa50:	781b      	ldrb	r3, [r3, #0]
 802aa52:	4619      	mov	r1, r3
 802aa54:	68fb      	ldr	r3, [r7, #12]
 802aa56:	404b      	eors	r3, r1
 802aa58:	f003 030f 	and.w	r3, r3, #15
 802aa5c:	4912      	ldr	r1, [pc, #72]	; (802aaa8 <lfs_crc+0x78>)
 802aa5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802aa62:	4053      	eors	r3, r2
 802aa64:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 802aa66:	68fb      	ldr	r3, [r7, #12]
 802aa68:	091a      	lsrs	r2, r3, #4
 802aa6a:	6939      	ldr	r1, [r7, #16]
 802aa6c:	697b      	ldr	r3, [r7, #20]
 802aa6e:	440b      	add	r3, r1
 802aa70:	781b      	ldrb	r3, [r3, #0]
 802aa72:	091b      	lsrs	r3, r3, #4
 802aa74:	b2db      	uxtb	r3, r3
 802aa76:	4619      	mov	r1, r3
 802aa78:	68fb      	ldr	r3, [r7, #12]
 802aa7a:	404b      	eors	r3, r1
 802aa7c:	f003 030f 	and.w	r3, r3, #15
 802aa80:	4909      	ldr	r1, [pc, #36]	; (802aaa8 <lfs_crc+0x78>)
 802aa82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802aa86:	4053      	eors	r3, r2
 802aa88:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 802aa8a:	697b      	ldr	r3, [r7, #20]
 802aa8c:	3301      	adds	r3, #1
 802aa8e:	617b      	str	r3, [r7, #20]
 802aa90:	697a      	ldr	r2, [r7, #20]
 802aa92:	687b      	ldr	r3, [r7, #4]
 802aa94:	429a      	cmp	r2, r3
 802aa96:	d3d6      	bcc.n	802aa46 <lfs_crc+0x16>
    }

    return crc;
 802aa98:	68fb      	ldr	r3, [r7, #12]
}
 802aa9a:	4618      	mov	r0, r3
 802aa9c:	371c      	adds	r7, #28
 802aa9e:	46bd      	mov	sp, r7
 802aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aaa4:	4770      	bx	lr
 802aaa6:	bf00      	nop
 802aaa8:	0803472c 	.word	0x0803472c

0802aaac <spi_fs_init_mutex>:
//int (* lfs_unlock)(const struct lfs_config *c);

void (* FSMutexGet)		(void);
void (* FSMutexRelease)	(void);

void spi_fs_init_mutex(void (*get_mutex)(void), void (*release_mutex)(void)){
 802aaac:	b480      	push	{r7}
 802aaae:	b083      	sub	sp, #12
 802aab0:	af00      	add	r7, sp, #0
 802aab2:	6078      	str	r0, [r7, #4]
 802aab4:	6039      	str	r1, [r7, #0]

	if (get_mutex) FSMutexGet = get_mutex;
 802aab6:	687b      	ldr	r3, [r7, #4]
 802aab8:	2b00      	cmp	r3, #0
 802aaba:	d002      	beq.n	802aac2 <spi_fs_init_mutex+0x16>
 802aabc:	4a07      	ldr	r2, [pc, #28]	; (802aadc <spi_fs_init_mutex+0x30>)
 802aabe:	687b      	ldr	r3, [r7, #4]
 802aac0:	6013      	str	r3, [r2, #0]
	if (release_mutex) FSMutexRelease = release_mutex;
 802aac2:	683b      	ldr	r3, [r7, #0]
 802aac4:	2b00      	cmp	r3, #0
 802aac6:	d002      	beq.n	802aace <spi_fs_init_mutex+0x22>
 802aac8:	4a05      	ldr	r2, [pc, #20]	; (802aae0 <spi_fs_init_mutex+0x34>)
 802aaca:	683b      	ldr	r3, [r7, #0]
 802aacc:	6013      	str	r3, [r2, #0]

};
 802aace:	bf00      	nop
 802aad0:	370c      	adds	r7, #12
 802aad2:	46bd      	mov	sp, r7
 802aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aad8:	4770      	bx	lr
 802aada:	bf00      	nop
 802aadc:	2000d99c 	.word	0x2000d99c
 802aae0:	2000d9a0 	.word	0x2000d9a0

0802aae4 <spi_fs_init>:

int spi_fs_init(uint8_t * lfsReadBuff, uint8_t * lfsWriteBuff, uint8_t * lfslookaheadBuff, uint16_t buffers_size){
 802aae4:	b590      	push	{r4, r7, lr}
 802aae6:	b08b      	sub	sp, #44	; 0x2c
 802aae8:	af02      	add	r7, sp, #8
 802aaea:	61f8      	str	r0, [r7, #28]
 802aaec:	61b9      	str	r1, [r7, #24]
 802aaee:	617a      	str	r2, [r7, #20]
 802aaf0:	827b      	strh	r3, [r7, #18]

	flash_parameters = sFLASH_GetInfo();
 802aaf2:	4c14      	ldr	r4, [pc, #80]	; (802ab44 <spi_fs_init+0x60>)
 802aaf4:	463b      	mov	r3, r7
 802aaf6:	4618      	mov	r0, r3
 802aaf8:	f7ea fa06 	bl	8014f08 <sFLASH_GetInfo>
 802aafc:	463b      	mov	r3, r7
 802aafe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802ab00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (flash_parameters.flash_id == 0x0) return -1;
 802ab04:	4b0f      	ldr	r3, [pc, #60]	; (802ab44 <spi_fs_init+0x60>)
 802ab06:	681b      	ldr	r3, [r3, #0]
 802ab08:	2b00      	cmp	r3, #0
 802ab0a:	d102      	bne.n	802ab12 <spi_fs_init+0x2e>
 802ab0c:	f04f 33ff 	mov.w	r3, #4294967295
 802ab10:	e013      	b.n	802ab3a <spi_fs_init+0x56>

	io_fs_init(lfsReadBuff, lfsWriteBuff, lfslookaheadBuff, buffers_size, &cfg);
 802ab12:	8a7b      	ldrh	r3, [r7, #18]
 802ab14:	4a0c      	ldr	r2, [pc, #48]	; (802ab48 <spi_fs_init+0x64>)
 802ab16:	9200      	str	r2, [sp, #0]
 802ab18:	697a      	ldr	r2, [r7, #20]
 802ab1a:	69b9      	ldr	r1, [r7, #24]
 802ab1c:	69f8      	ldr	r0, [r7, #28]
 802ab1e:	f7ff feab 	bl	802a878 <io_fs_init>

	memset(&fileConf, 0, sizeof(struct lfs_file_config));
 802ab22:	220c      	movs	r2, #12
 802ab24:	2100      	movs	r1, #0
 802ab26:	4809      	ldr	r0, [pc, #36]	; (802ab4c <spi_fs_init+0x68>)
 802ab28:	f002 fdd0 	bl	802d6cc <memset>
	fileConf.buffer = lfs_file_buf;  						// use the static buffer
 802ab2c:	4b07      	ldr	r3, [pc, #28]	; (802ab4c <spi_fs_init+0x68>)
 802ab2e:	4a08      	ldr	r2, [pc, #32]	; (802ab50 <spi_fs_init+0x6c>)
 802ab30:	601a      	str	r2, [r3, #0]
	fileConf.attr_count = 0;
 802ab32:	4b06      	ldr	r3, [pc, #24]	; (802ab4c <spi_fs_init+0x68>)
 802ab34:	2200      	movs	r2, #0
 802ab36:	609a      	str	r2, [r3, #8]

	return 0;
 802ab38:	2300      	movs	r3, #0
}
 802ab3a:	4618      	mov	r0, r3
 802ab3c:	3724      	adds	r7, #36	; 0x24
 802ab3e:	46bd      	mov	sp, r7
 802ab40:	bd90      	pop	{r4, r7, pc}
 802ab42:	bf00      	nop
 802ab44:	2000d900 	.word	0x2000d900
 802ab48:	2000d8b4 	.word	0x2000d8b4
 802ab4c:	2000d910 	.word	0x2000d910
 802ab50:	2000d4a8 	.word	0x2000d4a8

0802ab54 <spi_fs_mount>:

int spi_fs_mount(void){
 802ab54:	b580      	push	{r7, lr}
 802ab56:	b082      	sub	sp, #8
 802ab58:	af00      	add	r7, sp, #0
	int err;

#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802ab5a:	4b0d      	ldr	r3, [pc, #52]	; (802ab90 <spi_fs_mount+0x3c>)
 802ab5c:	681b      	ldr	r3, [r3, #0]
 802ab5e:	4798      	blx	r3
#endif
	err = lfs_mount(&lfs, &cfg);
 802ab60:	490c      	ldr	r1, [pc, #48]	; (802ab94 <spi_fs_mount+0x40>)
 802ab62:	480d      	ldr	r0, [pc, #52]	; (802ab98 <spi_fs_mount+0x44>)
 802ab64:	f7ff fcc4 	bl	802a4f0 <lfs_mount>
 802ab68:	6078      	str	r0, [r7, #4]
	if (err) {
 802ab6a:	687b      	ldr	r3, [r7, #4]
 802ab6c:	2b00      	cmp	r3, #0
 802ab6e:	d003      	beq.n	802ab78 <spi_fs_mount+0x24>
		fs_mount_flag = 0;
 802ab70:	4b0a      	ldr	r3, [pc, #40]	; (802ab9c <spi_fs_mount+0x48>)
 802ab72:	2200      	movs	r2, #0
 802ab74:	701a      	strb	r2, [r3, #0]
 802ab76:	e002      	b.n	802ab7e <spi_fs_mount+0x2a>
	}else{
		fs_mount_flag = 1;
 802ab78:	4b08      	ldr	r3, [pc, #32]	; (802ab9c <spi_fs_mount+0x48>)
 802ab7a:	2201      	movs	r2, #1
 802ab7c:	701a      	strb	r2, [r3, #0]
	}
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802ab7e:	4b08      	ldr	r3, [pc, #32]	; (802aba0 <spi_fs_mount+0x4c>)
 802ab80:	681b      	ldr	r3, [r3, #0]
 802ab82:	4798      	blx	r3
#endif

	return err;
 802ab84:	687b      	ldr	r3, [r7, #4]
}
 802ab86:	4618      	mov	r0, r3
 802ab88:	3708      	adds	r7, #8
 802ab8a:	46bd      	mov	sp, r7
 802ab8c:	bd80      	pop	{r7, pc}
 802ab8e:	bf00      	nop
 802ab90:	2000d99c 	.word	0x2000d99c
 802ab94:	2000d8b4 	.word	0x2000d8b4
 802ab98:	2000d6ac 	.word	0x2000d6ac
 802ab9c:	2000d6a8 	.word	0x2000d6a8
 802aba0:	2000d9a0 	.word	0x2000d9a0

0802aba4 <spi_fs_format>:
int spi_fs_mount_status(void){

	return fs_mount_flag;
}

void spi_fs_format(void){
 802aba4:	b580      	push	{r7, lr}
 802aba6:	af00      	add	r7, sp, #0
	lfs_format(&lfs, &cfg);
 802aba8:	4902      	ldr	r1, [pc, #8]	; (802abb4 <spi_fs_format+0x10>)
 802abaa:	4803      	ldr	r0, [pc, #12]	; (802abb8 <spi_fs_format+0x14>)
 802abac:	f7ff fc8a 	bl	802a4c4 <lfs_format>
}
 802abb0:	bf00      	nop
 802abb2:	bd80      	pop	{r7, pc}
 802abb4:	2000d8b4 	.word	0x2000d8b4
 802abb8:	2000d6ac 	.word	0x2000d6ac

0802abbc <spi_fs_read_file_offset>:
	FSMutexRelease();
#endif
	return err;
}

int spi_fs_read_file_offset(const char *path, void *buffer, uint32_t offset, uint32_t read_size){
 802abbc:	b580      	push	{r7, lr}
 802abbe:	b088      	sub	sp, #32
 802abc0:	af02      	add	r7, sp, #8
 802abc2:	60f8      	str	r0, [r7, #12]
 802abc4:	60b9      	str	r1, [r7, #8]
 802abc6:	607a      	str	r2, [r7, #4]
 802abc8:	603b      	str	r3, [r7, #0]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802abca:	4b19      	ldr	r3, [pc, #100]	; (802ac30 <spi_fs_read_file_offset+0x74>)
 802abcc:	681b      	ldr	r3, [r3, #0]
 802abce:	4798      	blx	r3
#endif
	err =	lfs_file_opencfg(&lfs, &file, path, LFS_O_RDONLY | LFS_O_CREAT, &fileConf);
 802abd0:	4b18      	ldr	r3, [pc, #96]	; (802ac34 <spi_fs_read_file_offset+0x78>)
 802abd2:	9300      	str	r3, [sp, #0]
 802abd4:	f240 1301 	movw	r3, #257	; 0x101
 802abd8:	68fa      	ldr	r2, [r7, #12]
 802abda:	4917      	ldr	r1, [pc, #92]	; (802ac38 <spi_fs_read_file_offset+0x7c>)
 802abdc:	4817      	ldr	r0, [pc, #92]	; (802ac3c <spi_fs_read_file_offset+0x80>)
 802abde:	f7ff fce3 	bl	802a5a8 <lfs_file_opencfg>
 802abe2:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802abe4:	697b      	ldr	r3, [r7, #20]
 802abe6:	2b00      	cmp	r3, #0
 802abe8:	db13      	blt.n	802ac12 <spi_fs_read_file_offset+0x56>
	err =	lfs_file_seek(&lfs, &file, offset, LFS_SEEK_SET);
 802abea:	687a      	ldr	r2, [r7, #4]
 802abec:	2300      	movs	r3, #0
 802abee:	4912      	ldr	r1, [pc, #72]	; (802ac38 <spi_fs_read_file_offset+0x7c>)
 802abf0:	4812      	ldr	r0, [pc, #72]	; (802ac3c <spi_fs_read_file_offset+0x80>)
 802abf2:	f7ff fd9b 	bl	802a72c <lfs_file_seek>
 802abf6:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802abf8:	697b      	ldr	r3, [r7, #20]
 802abfa:	2b00      	cmp	r3, #0
 802abfc:	db0b      	blt.n	802ac16 <spi_fs_read_file_offset+0x5a>
	err =	lfs_file_read(&lfs, &file, buffer, read_size);
 802abfe:	683b      	ldr	r3, [r7, #0]
 802ac00:	68ba      	ldr	r2, [r7, #8]
 802ac02:	490d      	ldr	r1, [pc, #52]	; (802ac38 <spi_fs_read_file_offset+0x7c>)
 802ac04:	480d      	ldr	r0, [pc, #52]	; (802ac3c <spi_fs_read_file_offset+0x80>)
 802ac06:	f7ff fd31 	bl	802a66c <lfs_file_read>
 802ac0a:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802ac0c:	697b      	ldr	r3, [r7, #20]
 802ac0e:	2b00      	cmp	r3, #0

	func_end:
 802ac10:	e002      	b.n	802ac18 <spi_fs_read_file_offset+0x5c>
	if (err < 0) goto func_end;
 802ac12:	bf00      	nop
 802ac14:	e000      	b.n	802ac18 <spi_fs_read_file_offset+0x5c>
	if (err < 0) goto func_end;
 802ac16:	bf00      	nop
	lfs_file_close(&lfs, &file);
 802ac18:	4907      	ldr	r1, [pc, #28]	; (802ac38 <spi_fs_read_file_offset+0x7c>)
 802ac1a:	4808      	ldr	r0, [pc, #32]	; (802ac3c <spi_fs_read_file_offset+0x80>)
 802ac1c:	f7ff fcfa 	bl	802a614 <lfs_file_close>
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802ac20:	4b07      	ldr	r3, [pc, #28]	; (802ac40 <spi_fs_read_file_offset+0x84>)
 802ac22:	681b      	ldr	r3, [r3, #0]
 802ac24:	4798      	blx	r3
#endif
	return err;
 802ac26:	697b      	ldr	r3, [r7, #20]

}
 802ac28:	4618      	mov	r0, r3
 802ac2a:	3718      	adds	r7, #24
 802ac2c:	46bd      	mov	sp, r7
 802ac2e:	bd80      	pop	{r7, pc}
 802ac30:	2000d99c 	.word	0x2000d99c
 802ac34:	2000d910 	.word	0x2000d910
 802ac38:	2000d724 	.word	0x2000d724
 802ac3c:	2000d6ac 	.word	0x2000d6ac
 802ac40:	2000d9a0 	.word	0x2000d9a0

0802ac44 <spi_fs_over_write_file>:

int spi_fs_over_write_file(const char *path, void *buffer, uint32_t write_size){
 802ac44:	b580      	push	{r7, lr}
 802ac46:	b088      	sub	sp, #32
 802ac48:	af02      	add	r7, sp, #8
 802ac4a:	60f8      	str	r0, [r7, #12]
 802ac4c:	60b9      	str	r1, [r7, #8]
 802ac4e:	607a      	str	r2, [r7, #4]
	int err = 0;
 802ac50:	2300      	movs	r3, #0
 802ac52:	617b      	str	r3, [r7, #20]
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802ac54:	4b12      	ldr	r3, [pc, #72]	; (802aca0 <spi_fs_over_write_file+0x5c>)
 802ac56:	681b      	ldr	r3, [r3, #0]
 802ac58:	4798      	blx	r3
#endif

	err = lfs_file_opencfg(&lfs, &file, path, LFS_O_RDWR | LFS_O_CREAT | LFS_O_TRUNC, &fileConf);
 802ac5a:	4b12      	ldr	r3, [pc, #72]	; (802aca4 <spi_fs_over_write_file+0x60>)
 802ac5c:	9300      	str	r3, [sp, #0]
 802ac5e:	f240 5303 	movw	r3, #1283	; 0x503
 802ac62:	68fa      	ldr	r2, [r7, #12]
 802ac64:	4910      	ldr	r1, [pc, #64]	; (802aca8 <spi_fs_over_write_file+0x64>)
 802ac66:	4811      	ldr	r0, [pc, #68]	; (802acac <spi_fs_over_write_file+0x68>)
 802ac68:	f7ff fc9e 	bl	802a5a8 <lfs_file_opencfg>
 802ac6c:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802ac6e:	697b      	ldr	r3, [r7, #20]
 802ac70:	2b00      	cmp	r3, #0
 802ac72:	db0b      	blt.n	802ac8c <spi_fs_over_write_file+0x48>
	err = lfs_file_write(&lfs, &file, buffer, write_size);
 802ac74:	687b      	ldr	r3, [r7, #4]
 802ac76:	68ba      	ldr	r2, [r7, #8]
 802ac78:	490b      	ldr	r1, [pc, #44]	; (802aca8 <spi_fs_over_write_file+0x64>)
 802ac7a:	480c      	ldr	r0, [pc, #48]	; (802acac <spi_fs_over_write_file+0x68>)
 802ac7c:	f7ff fd26 	bl	802a6cc <lfs_file_write>
 802ac80:	6178      	str	r0, [r7, #20]

	lfs_file_close(&lfs, &file);
 802ac82:	4909      	ldr	r1, [pc, #36]	; (802aca8 <spi_fs_over_write_file+0x64>)
 802ac84:	4809      	ldr	r0, [pc, #36]	; (802acac <spi_fs_over_write_file+0x68>)
 802ac86:	f7ff fcc5 	bl	802a614 <lfs_file_close>
 802ac8a:	e000      	b.n	802ac8e <spi_fs_over_write_file+0x4a>
	if (err < 0) goto func_end;
 802ac8c:	bf00      	nop
	func_end:
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802ac8e:	4b08      	ldr	r3, [pc, #32]	; (802acb0 <spi_fs_over_write_file+0x6c>)
 802ac90:	681b      	ldr	r3, [r3, #0]
 802ac92:	4798      	blx	r3
#endif
	return err;
 802ac94:	697b      	ldr	r3, [r7, #20]
}
 802ac96:	4618      	mov	r0, r3
 802ac98:	3718      	adds	r7, #24
 802ac9a:	46bd      	mov	sp, r7
 802ac9c:	bd80      	pop	{r7, pc}
 802ac9e:	bf00      	nop
 802aca0:	2000d99c 	.word	0x2000d99c
 802aca4:	2000d910 	.word	0x2000d910
 802aca8:	2000d724 	.word	0x2000d724
 802acac:	2000d6ac 	.word	0x2000d6ac
 802acb0:	2000d9a0 	.word	0x2000d9a0

0802acb4 <spi_fs_file_size>:

int spi_fs_file_size(const char *path){
 802acb4:	b580      	push	{r7, lr}
 802acb6:	b084      	sub	sp, #16
 802acb8:	af00      	add	r7, sp, #0
 802acba:	6078      	str	r0, [r7, #4]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802acbc:	4b0b      	ldr	r3, [pc, #44]	; (802acec <spi_fs_file_size+0x38>)
 802acbe:	681b      	ldr	r3, [r3, #0]
 802acc0:	4798      	blx	r3
#endif

	err = lfs_stat(&lfs, path, &file_info);
 802acc2:	4a0b      	ldr	r2, [pc, #44]	; (802acf0 <spi_fs_file_size+0x3c>)
 802acc4:	6879      	ldr	r1, [r7, #4]
 802acc6:	480b      	ldr	r0, [pc, #44]	; (802acf4 <spi_fs_file_size+0x40>)
 802acc8:	f7ff fc56 	bl	802a578 <lfs_stat>
 802accc:	60f8      	str	r0, [r7, #12]
	if (err == 0){
 802acce:	68fb      	ldr	r3, [r7, #12]
 802acd0:	2b00      	cmp	r3, #0
 802acd2:	d102      	bne.n	802acda <spi_fs_file_size+0x26>
		err = file_info.size;
 802acd4:	4b06      	ldr	r3, [pc, #24]	; (802acf0 <spi_fs_file_size+0x3c>)
 802acd6:	685b      	ldr	r3, [r3, #4]
 802acd8:	60fb      	str	r3, [r7, #12]
	}

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802acda:	4b07      	ldr	r3, [pc, #28]	; (802acf8 <spi_fs_file_size+0x44>)
 802acdc:	681b      	ldr	r3, [r3, #0]
 802acde:	4798      	blx	r3
#endif
	return err;
 802ace0:	68fb      	ldr	r3, [r7, #12]
}
 802ace2:	4618      	mov	r0, r3
 802ace4:	3710      	adds	r7, #16
 802ace6:	46bd      	mov	sp, r7
 802ace8:	bd80      	pop	{r7, pc}
 802acea:	bf00      	nop
 802acec:	2000d99c 	.word	0x2000d99c
 802acf0:	2000d7ac 	.word	0x2000d7ac
 802acf4:	2000d6ac 	.word	0x2000d6ac
 802acf8:	2000d9a0 	.word	0x2000d9a0

0802acfc <spi_fs_write_file_to_end>:

int spi_fs_write_file_to_end(const char *path, void *buffer, uint32_t write_size){
 802acfc:	b580      	push	{r7, lr}
 802acfe:	b088      	sub	sp, #32
 802ad00:	af02      	add	r7, sp, #8
 802ad02:	60f8      	str	r0, [r7, #12]
 802ad04:	60b9      	str	r1, [r7, #8]
 802ad06:	607a      	str	r2, [r7, #4]
	int err = 0;
 802ad08:	2300      	movs	r3, #0
 802ad0a:	617b      	str	r3, [r7, #20]
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802ad0c:	4b13      	ldr	r3, [pc, #76]	; (802ad5c <spi_fs_write_file_to_end+0x60>)
 802ad0e:	681b      	ldr	r3, [r3, #0]
 802ad10:	4798      	blx	r3
#endif

	err = lfs_file_opencfg(&lfs, &file, path, LFS_O_RDWR | LFS_O_CREAT | LFS_O_APPEND, &fileConf);
 802ad12:	4b13      	ldr	r3, [pc, #76]	; (802ad60 <spi_fs_write_file_to_end+0x64>)
 802ad14:	9300      	str	r3, [sp, #0]
 802ad16:	f640 1303 	movw	r3, #2307	; 0x903
 802ad1a:	68fa      	ldr	r2, [r7, #12]
 802ad1c:	4911      	ldr	r1, [pc, #68]	; (802ad64 <spi_fs_write_file_to_end+0x68>)
 802ad1e:	4812      	ldr	r0, [pc, #72]	; (802ad68 <spi_fs_write_file_to_end+0x6c>)
 802ad20:	f7ff fc42 	bl	802a5a8 <lfs_file_opencfg>
 802ad24:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802ad26:	697b      	ldr	r3, [r7, #20]
 802ad28:	2b00      	cmp	r3, #0
 802ad2a:	db09      	blt.n	802ad40 <spi_fs_write_file_to_end+0x44>
	err = lfs_file_write(&lfs, &file, buffer, write_size);
 802ad2c:	687b      	ldr	r3, [r7, #4]
 802ad2e:	68ba      	ldr	r2, [r7, #8]
 802ad30:	490c      	ldr	r1, [pc, #48]	; (802ad64 <spi_fs_write_file_to_end+0x68>)
 802ad32:	480d      	ldr	r0, [pc, #52]	; (802ad68 <spi_fs_write_file_to_end+0x6c>)
 802ad34:	f7ff fcca 	bl	802a6cc <lfs_file_write>
 802ad38:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802ad3a:	697b      	ldr	r3, [r7, #20]
 802ad3c:	2b00      	cmp	r3, #0

	func_end:
 802ad3e:	e000      	b.n	802ad42 <spi_fs_write_file_to_end+0x46>
	if (err < 0) goto func_end;
 802ad40:	bf00      	nop
	lfs_file_close(&lfs, &file);
 802ad42:	4908      	ldr	r1, [pc, #32]	; (802ad64 <spi_fs_write_file_to_end+0x68>)
 802ad44:	4808      	ldr	r0, [pc, #32]	; (802ad68 <spi_fs_write_file_to_end+0x6c>)
 802ad46:	f7ff fc65 	bl	802a614 <lfs_file_close>
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802ad4a:	4b08      	ldr	r3, [pc, #32]	; (802ad6c <spi_fs_write_file_to_end+0x70>)
 802ad4c:	681b      	ldr	r3, [r3, #0]
 802ad4e:	4798      	blx	r3
#endif
	return err;
 802ad50:	697b      	ldr	r3, [r7, #20]
}
 802ad52:	4618      	mov	r0, r3
 802ad54:	3718      	adds	r7, #24
 802ad56:	46bd      	mov	sp, r7
 802ad58:	bd80      	pop	{r7, pc}
 802ad5a:	bf00      	nop
 802ad5c:	2000d99c 	.word	0x2000d99c
 802ad60:	2000d910 	.word	0x2000d910
 802ad64:	2000d724 	.word	0x2000d724
 802ad68:	2000d6ac 	.word	0x2000d6ac
 802ad6c:	2000d9a0 	.word	0x2000d9a0

0802ad70 <spi_fs_serch_file_in_dir>:

int spi_fs_serch_file_in_dir(const char * dir_path, const char * filename){
 802ad70:	b580      	push	{r7, lr}
 802ad72:	b084      	sub	sp, #16
 802ad74:	af00      	add	r7, sp, #0
 802ad76:	6078      	str	r0, [r7, #4]
 802ad78:	6039      	str	r1, [r7, #0]


	int err;
	memset(temp_buf, 0x0, PATH_BUF_SIZE);
 802ad7a:	2280      	movs	r2, #128	; 0x80
 802ad7c:	2100      	movs	r1, #0
 802ad7e:	480a      	ldr	r0, [pc, #40]	; (802ada8 <spi_fs_serch_file_in_dir+0x38>)
 802ad80:	f002 fca4 	bl	802d6cc <memset>
	strcpy((char *)temp_buf, dir_path);
 802ad84:	6879      	ldr	r1, [r7, #4]
 802ad86:	4808      	ldr	r0, [pc, #32]	; (802ada8 <spi_fs_serch_file_in_dir+0x38>)
 802ad88:	f002 fe6d 	bl	802da66 <strcpy>
	strcat((char *)temp_buf, filename);
 802ad8c:	6839      	ldr	r1, [r7, #0]
 802ad8e:	4806      	ldr	r0, [pc, #24]	; (802ada8 <spi_fs_serch_file_in_dir+0x38>)
 802ad90:	f002 fca4 	bl	802d6dc <strcat>
	err = spi_fs_file_size((const char *)temp_buf);
 802ad94:	4804      	ldr	r0, [pc, #16]	; (802ada8 <spi_fs_serch_file_in_dir+0x38>)
 802ad96:	f7ff ff8d 	bl	802acb4 <spi_fs_file_size>
 802ad9a:	60f8      	str	r0, [r7, #12]
	return err;
 802ad9c:	68fb      	ldr	r3, [r7, #12]

}
 802ad9e:	4618      	mov	r0, r3
 802ada0:	3710      	adds	r7, #16
 802ada2:	46bd      	mov	sp, r7
 802ada4:	bd80      	pop	{r7, pc}
 802ada6:	bf00      	nop
 802ada8:	2000d91c 	.word	0x2000d91c

0802adac <spi_fs_mkdir>:

int spi_fs_mkdir(const char *path){
 802adac:	b580      	push	{r7, lr}
 802adae:	b084      	sub	sp, #16
 802adb0:	af00      	add	r7, sp, #0
 802adb2:	6078      	str	r0, [r7, #4]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802adb4:	4b07      	ldr	r3, [pc, #28]	; (802add4 <spi_fs_mkdir+0x28>)
 802adb6:	681b      	ldr	r3, [r3, #0]
 802adb8:	4798      	blx	r3
#endif

	err = lfs_mkdir(&lfs, path);
 802adba:	6879      	ldr	r1, [r7, #4]
 802adbc:	4806      	ldr	r0, [pc, #24]	; (802add8 <spi_fs_mkdir+0x2c>)
 802adbe:	f7ff fce5 	bl	802a78c <lfs_mkdir>
 802adc2:	60f8      	str	r0, [r7, #12]

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802adc4:	4b05      	ldr	r3, [pc, #20]	; (802addc <spi_fs_mkdir+0x30>)
 802adc6:	681b      	ldr	r3, [r3, #0]
 802adc8:	4798      	blx	r3
#endif

	return err;
 802adca:	68fb      	ldr	r3, [r7, #12]
}
 802adcc:	4618      	mov	r0, r3
 802adce:	3710      	adds	r7, #16
 802add0:	46bd      	mov	sp, r7
 802add2:	bd80      	pop	{r7, pc}
 802add4:	2000d99c 	.word	0x2000d99c
 802add8:	2000d6ac 	.word	0x2000d6ac
 802addc:	2000d9a0 	.word	0x2000d9a0

0802ade0 <spi_fs_remove>:
	FSMutexRelease();
#endif

}

int spi_fs_remove(const char *path){
 802ade0:	b580      	push	{r7, lr}
 802ade2:	b084      	sub	sp, #16
 802ade4:	af00      	add	r7, sp, #0
 802ade6:	6078      	str	r0, [r7, #4]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802ade8:	4b07      	ldr	r3, [pc, #28]	; (802ae08 <spi_fs_remove+0x28>)
 802adea:	681b      	ldr	r3, [r3, #0]
 802adec:	4798      	blx	r3
#endif

	err = lfs_remove(&lfs, path);
 802adee:	6879      	ldr	r1, [r7, #4]
 802adf0:	4806      	ldr	r0, [pc, #24]	; (802ae0c <spi_fs_remove+0x2c>)
 802adf2:	f7ff fb93 	bl	802a51c <lfs_remove>
 802adf6:	60f8      	str	r0, [r7, #12]

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802adf8:	4b05      	ldr	r3, [pc, #20]	; (802ae10 <spi_fs_remove+0x30>)
 802adfa:	681b      	ldr	r3, [r3, #0]
 802adfc:	4798      	blx	r3
#endif
	return err;
 802adfe:	68fb      	ldr	r3, [r7, #12]
}
 802ae00:	4618      	mov	r0, r3
 802ae02:	3710      	adds	r7, #16
 802ae04:	46bd      	mov	sp, r7
 802ae06:	bd80      	pop	{r7, pc}
 802ae08:	2000d99c 	.word	0x2000d99c
 802ae0c:	2000d6ac 	.word	0x2000d6ac
 802ae10:	2000d9a0 	.word	0x2000d9a0

0802ae14 <remove_recursively_files_and_directories>:
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
#endif
}

void remove_recursively_files_and_directories(const char *path, uint8_t deep) {
 802ae14:	b580      	push	{r7, lr}
 802ae16:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 802ae1a:	af02      	add	r7, sp, #8
 802ae1c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802ae20:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802ae24:	6018      	str	r0, [r3, #0]
 802ae26:	460a      	mov	r2, r1
 802ae28:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802ae2c:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 802ae30:	701a      	strb	r2, [r3, #0]

    struct lfs_info info;

    if (lfs_dir_open(&lfs, &dir, path) == 0) {
 802ae32:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802ae36:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802ae3a:	681a      	ldr	r2, [r3, #0]
 802ae3c:	4945      	ldr	r1, [pc, #276]	; (802af54 <remove_recursively_files_and_directories+0x140>)
 802ae3e:	4846      	ldr	r0, [pc, #280]	; (802af58 <remove_recursively_files_and_directories+0x144>)
 802ae40:	f7ff fcba 	bl	802a7b8 <lfs_dir_open>
 802ae44:	4603      	mov	r3, r0
 802ae46:	2b00      	cmp	r3, #0
 802ae48:	d17f      	bne.n	802af4a <remove_recursively_files_and_directories+0x136>
        // Iterate through the directory entries
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 802ae4a:	e061      	b.n	802af10 <remove_recursively_files_and_directories+0xfc>
            if (info.type == LFS_TYPE_DIR) {
 802ae4c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802ae50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802ae54:	781b      	ldrb	r3, [r3, #0]
 802ae56:	2b02      	cmp	r3, #2
 802ae58:	d13d      	bne.n	802aed6 <remove_recursively_files_and_directories+0xc2>
            	if ( (strcmp(info.name, ".")==0)||(strcmp(info.name, "..")==0)) continue;
 802ae5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802ae5e:	3308      	adds	r3, #8
 802ae60:	493e      	ldr	r1, [pc, #248]	; (802af5c <remove_recursively_files_and_directories+0x148>)
 802ae62:	4618      	mov	r0, r3
 802ae64:	f7e5 f9bc 	bl	80101e0 <strcmp>
 802ae68:	4603      	mov	r3, r0
 802ae6a:	2b00      	cmp	r3, #0
 802ae6c:	d050      	beq.n	802af10 <remove_recursively_files_and_directories+0xfc>
 802ae6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802ae72:	3308      	adds	r3, #8
 802ae74:	493a      	ldr	r1, [pc, #232]	; (802af60 <remove_recursively_files_and_directories+0x14c>)
 802ae76:	4618      	mov	r0, r3
 802ae78:	f7e5 f9b2 	bl	80101e0 <strcmp>
 802ae7c:	4603      	mov	r3, r0
 802ae7e:	2b00      	cmp	r3, #0
 802ae80:	d100      	bne.n	802ae84 <remove_recursively_files_and_directories+0x70>
 802ae82:	e045      	b.n	802af10 <remove_recursively_files_and_directories+0xfc>
                printf("Directory: %s\n", info.name);
 802ae84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802ae88:	3308      	adds	r3, #8
 802ae8a:	4619      	mov	r1, r3
 802ae8c:	4835      	ldr	r0, [pc, #212]	; (802af64 <remove_recursively_files_and_directories+0x150>)
 802ae8e:	f002 fa87 	bl	802d3a0 <iprintf>
                char sub_path[256];  // Adjust the size based on your needs
                snprintf(sub_path, sizeof(sub_path), "%s/%s", path, info.name);
 802ae92:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802ae96:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802ae9a:	f107 0008 	add.w	r0, r7, #8
 802ae9e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 802aea2:	3208      	adds	r2, #8
 802aea4:	9200      	str	r2, [sp, #0]
 802aea6:	681b      	ldr	r3, [r3, #0]
 802aea8:	4a2f      	ldr	r2, [pc, #188]	; (802af68 <remove_recursively_files_and_directories+0x154>)
 802aeaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 802aeae:	f002 fa89 	bl	802d3c4 <sniprintf>
                lfs_dir_close(&lfs, &dir);
 802aeb2:	4928      	ldr	r1, [pc, #160]	; (802af54 <remove_recursively_files_and_directories+0x140>)
 802aeb4:	4828      	ldr	r0, [pc, #160]	; (802af58 <remove_recursively_files_and_directories+0x144>)
 802aeb6:	f7ff fcb1 	bl	802a81c <lfs_dir_close>
                remove_recursively_files_and_directories(sub_path, deep + 1);  // Recursive call for subdirectories
 802aeba:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802aebe:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 802aec2:	781b      	ldrb	r3, [r3, #0]
 802aec4:	3301      	adds	r3, #1
 802aec6:	b2da      	uxtb	r2, r3
 802aec8:	f107 0308 	add.w	r3, r7, #8
 802aecc:	4611      	mov	r1, r2
 802aece:	4618      	mov	r0, r3
 802aed0:	f7ff ffa0 	bl	802ae14 <remove_recursively_files_and_directories>
 802aed4:	e01c      	b.n	802af10 <remove_recursively_files_and_directories+0xfc>
            } else {
            	char sub_path2[256];
                printf("File: %s\n", info.name);
 802aed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802aeda:	3308      	adds	r3, #8
 802aedc:	4619      	mov	r1, r3
 802aede:	4823      	ldr	r0, [pc, #140]	; (802af6c <remove_recursively_files_and_directories+0x158>)
 802aee0:	f002 fa5e 	bl	802d3a0 <iprintf>
                snprintf(sub_path2, sizeof(sub_path2), "%s/%s", path, info.name);
 802aee4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802aee8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802aeec:	f107 0008 	add.w	r0, r7, #8
 802aef0:	f507 7284 	add.w	r2, r7, #264	; 0x108
 802aef4:	3208      	adds	r2, #8
 802aef6:	9200      	str	r2, [sp, #0]
 802aef8:	681b      	ldr	r3, [r3, #0]
 802aefa:	4a1b      	ldr	r2, [pc, #108]	; (802af68 <remove_recursively_files_and_directories+0x154>)
 802aefc:	f44f 7180 	mov.w	r1, #256	; 0x100
 802af00:	f002 fa60 	bl	802d3c4 <sniprintf>
                lfs_remove(&lfs, sub_path2);
 802af04:	f107 0308 	add.w	r3, r7, #8
 802af08:	4619      	mov	r1, r3
 802af0a:	4813      	ldr	r0, [pc, #76]	; (802af58 <remove_recursively_files_and_directories+0x144>)
 802af0c:	f7ff fb06 	bl	802a51c <lfs_remove>
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 802af10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802af14:	461a      	mov	r2, r3
 802af16:	490f      	ldr	r1, [pc, #60]	; (802af54 <remove_recursively_files_and_directories+0x140>)
 802af18:	480f      	ldr	r0, [pc, #60]	; (802af58 <remove_recursively_files_and_directories+0x144>)
 802af1a:	f7ff fc95 	bl	802a848 <lfs_dir_read>
 802af1e:	4603      	mov	r3, r0
 802af20:	2b00      	cmp	r3, #0
 802af22:	dc93      	bgt.n	802ae4c <remove_recursively_files_and_directories+0x38>
            }
        }
        lfs_dir_close(&lfs, &dir);
 802af24:	490b      	ldr	r1, [pc, #44]	; (802af54 <remove_recursively_files_and_directories+0x140>)
 802af26:	480c      	ldr	r0, [pc, #48]	; (802af58 <remove_recursively_files_and_directories+0x144>)
 802af28:	f7ff fc78 	bl	802a81c <lfs_dir_close>
        if (deep >= 1){
 802af2c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802af30:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 802af34:	781b      	ldrb	r3, [r3, #0]
 802af36:	2b00      	cmp	r3, #0
 802af38:	d007      	beq.n	802af4a <remove_recursively_files_and_directories+0x136>
        	lfs_remove(&lfs, path);
 802af3a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802af3e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802af42:	6819      	ldr	r1, [r3, #0]
 802af44:	4804      	ldr	r0, [pc, #16]	; (802af58 <remove_recursively_files_and_directories+0x144>)
 802af46:	f7ff fae9 	bl	802a51c <lfs_remove>
        }

    }
}
 802af4a:	bf00      	nop
 802af4c:	f507 7704 	add.w	r7, r7, #528	; 0x210
 802af50:	46bd      	mov	sp, r7
 802af52:	bd80      	pop	{r7, pc}
 802af54:	2000d778 	.word	0x2000d778
 802af58:	2000d6ac 	.word	0x2000d6ac
 802af5c:	08033c90 	.word	0x08033c90
 802af60:	08033c94 	.word	0x08033c94
 802af64:	08033c98 	.word	0x08033c98
 802af68:	08033ca8 	.word	0x08033ca8
 802af6c:	08033cb0 	.word	0x08033cb0

0802af70 <spi_fs_remove_recurcuve_in>:

void spi_fs_remove_recurcuve_in (const char *path){
 802af70:	b580      	push	{r7, lr}
 802af72:	b084      	sub	sp, #16
 802af74:	af00      	add	r7, sp, #0
 802af76:	6078      	str	r0, [r7, #4]
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802af78:	4b0b      	ldr	r3, [pc, #44]	; (802afa8 <spi_fs_remove_recurcuve_in+0x38>)
 802af7a:	681b      	ldr	r3, [r3, #0]
 802af7c:	4798      	blx	r3
#endif
	uint8_t deep = 0;
 802af7e:	2300      	movs	r3, #0
 802af80:	73fb      	strb	r3, [r7, #15]

	remove_recursively_files_and_directories(path, deep);
 802af82:	7bfb      	ldrb	r3, [r7, #15]
 802af84:	4619      	mov	r1, r3
 802af86:	6878      	ldr	r0, [r7, #4]
 802af88:	f7ff ff44 	bl	802ae14 <remove_recursively_files_and_directories>
	deep = 0;
 802af8c:	2300      	movs	r3, #0
 802af8e:	73fb      	strb	r3, [r7, #15]
	remove_recursively_files_and_directories(path, deep);
 802af90:	7bfb      	ldrb	r3, [r7, #15]
 802af92:	4619      	mov	r1, r3
 802af94:	6878      	ldr	r0, [r7, #4]
 802af96:	f7ff ff3d 	bl	802ae14 <remove_recursively_files_and_directories>

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802af9a:	4b04      	ldr	r3, [pc, #16]	; (802afac <spi_fs_remove_recurcuve_in+0x3c>)
 802af9c:	681b      	ldr	r3, [r3, #0]
 802af9e:	4798      	blx	r3
#endif
}
 802afa0:	bf00      	nop
 802afa2:	3710      	adds	r7, #16
 802afa4:	46bd      	mov	sp, r7
 802afa6:	bd80      	pop	{r7, pc}
 802afa8:	2000d99c 	.word	0x2000d99c
 802afac:	2000d9a0 	.word	0x2000d9a0

0802afb0 <spi_fs_mv>:

int spi_fs_mv(const char *oldpath, const char *newpath){
 802afb0:	b580      	push	{r7, lr}
 802afb2:	b084      	sub	sp, #16
 802afb4:	af00      	add	r7, sp, #0
 802afb6:	6078      	str	r0, [r7, #4]
 802afb8:	6039      	str	r1, [r7, #0]
	int err;

#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802afba:	4b08      	ldr	r3, [pc, #32]	; (802afdc <spi_fs_mv+0x2c>)
 802afbc:	681b      	ldr	r3, [r3, #0]
 802afbe:	4798      	blx	r3
#endif

	err = lfs_rename(&lfs, oldpath, newpath);
 802afc0:	683a      	ldr	r2, [r7, #0]
 802afc2:	6879      	ldr	r1, [r7, #4]
 802afc4:	4806      	ldr	r0, [pc, #24]	; (802afe0 <spi_fs_mv+0x30>)
 802afc6:	f7ff fabf 	bl	802a548 <lfs_rename>
 802afca:	60f8      	str	r0, [r7, #12]

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802afcc:	4b05      	ldr	r3, [pc, #20]	; (802afe4 <spi_fs_mv+0x34>)
 802afce:	681b      	ldr	r3, [r3, #0]
 802afd0:	4798      	blx	r3
#endif
	return err;
 802afd2:	68fb      	ldr	r3, [r7, #12]
}
 802afd4:	4618      	mov	r0, r3
 802afd6:	3710      	adds	r7, #16
 802afd8:	46bd      	mov	sp, r7
 802afda:	bd80      	pop	{r7, pc}
 802afdc:	2000d99c 	.word	0x2000d99c
 802afe0:	2000d6ac 	.word	0x2000d6ac
 802afe4:	2000d9a0 	.word	0x2000d9a0

0802afe8 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 802afe8:	b480      	push	{r7}
 802afea:	b08b      	sub	sp, #44	; 0x2c
 802afec:	af00      	add	r7, sp, #0
 802afee:	60f8      	str	r0, [r7, #12]
 802aff0:	60b9      	str	r1, [r7, #8]
 802aff2:	607a      	str	r2, [r7, #4]
 802aff4:	603b      	str	r3, [r7, #0]
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 802aff6:	2300      	movs	r3, #0
 802aff8:	61fb      	str	r3, [r7, #28]
 802affa:	2300      	movs	r3, #0
 802affc:	623b      	str	r3, [r7, #32]
 802affe:	6a3b      	ldr	r3, [r7, #32]
 802b000:	627b      	str	r3, [r7, #36]	; 0x24
 802b002:	e06f      	b.n	802b0e4 <mbedtls_base64_decode+0xfc>
    {
        /* Skip spaces before checking for EOL */
        x = 0;
 802b004:	2300      	movs	r3, #0
 802b006:	61bb      	str	r3, [r7, #24]
        while( i < slen && src[i] == ' ' )
 802b008:	e005      	b.n	802b016 <mbedtls_base64_decode+0x2e>
        {
            ++i;
 802b00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b00c:	3301      	adds	r3, #1
 802b00e:	627b      	str	r3, [r7, #36]	; 0x24
            ++x;
 802b010:	69bb      	ldr	r3, [r7, #24]
 802b012:	3301      	adds	r3, #1
 802b014:	61bb      	str	r3, [r7, #24]
        while( i < slen && src[i] == ' ' )
 802b016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b01a:	429a      	cmp	r2, r3
 802b01c:	d205      	bcs.n	802b02a <mbedtls_base64_decode+0x42>
 802b01e:	683a      	ldr	r2, [r7, #0]
 802b020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b022:	4413      	add	r3, r2
 802b024:	781b      	ldrb	r3, [r3, #0]
 802b026:	2b20      	cmp	r3, #32
 802b028:	d0ef      	beq.n	802b00a <mbedtls_base64_decode+0x22>
        }

        /* Spaces at end of buffer are OK */
        if( i == slen )
 802b02a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b02e:	429a      	cmp	r2, r3
 802b030:	d05d      	beq.n	802b0ee <mbedtls_base64_decode+0x106>
            break;

        if( ( slen - i ) >= 2 &&
 802b032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802b034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b036:	1ad3      	subs	r3, r2, r3
 802b038:	2b01      	cmp	r3, #1
 802b03a:	d90c      	bls.n	802b056 <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
 802b03c:	683a      	ldr	r2, [r7, #0]
 802b03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b040:	4413      	add	r3, r2
 802b042:	781b      	ldrb	r3, [r3, #0]
        if( ( slen - i ) >= 2 &&
 802b044:	2b0d      	cmp	r3, #13
 802b046:	d106      	bne.n	802b056 <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
 802b048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b04a:	3301      	adds	r3, #1
 802b04c:	683a      	ldr	r2, [r7, #0]
 802b04e:	4413      	add	r3, r2
 802b050:	781b      	ldrb	r3, [r3, #0]
 802b052:	2b0a      	cmp	r3, #10
 802b054:	d040      	beq.n	802b0d8 <mbedtls_base64_decode+0xf0>
            continue;

        if( src[i] == '\n' )
 802b056:	683a      	ldr	r2, [r7, #0]
 802b058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b05a:	4413      	add	r3, r2
 802b05c:	781b      	ldrb	r3, [r3, #0]
 802b05e:	2b0a      	cmp	r3, #10
 802b060:	d03c      	beq.n	802b0dc <mbedtls_base64_decode+0xf4>
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
 802b062:	69bb      	ldr	r3, [r7, #24]
 802b064:	2b00      	cmp	r3, #0
 802b066:	d002      	beq.n	802b06e <mbedtls_base64_decode+0x86>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802b068:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 802b06c:	e0d0      	b.n	802b210 <mbedtls_base64_decode+0x228>

        if( src[i] == '=' && ++j > 2 )
 802b06e:	683a      	ldr	r2, [r7, #0]
 802b070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b072:	4413      	add	r3, r2
 802b074:	781b      	ldrb	r3, [r3, #0]
 802b076:	2b3d      	cmp	r3, #61	; 0x3d
 802b078:	d108      	bne.n	802b08c <mbedtls_base64_decode+0xa4>
 802b07a:	69fb      	ldr	r3, [r7, #28]
 802b07c:	3301      	adds	r3, #1
 802b07e:	61fb      	str	r3, [r7, #28]
 802b080:	69fb      	ldr	r3, [r7, #28]
 802b082:	2b02      	cmp	r3, #2
 802b084:	d902      	bls.n	802b08c <mbedtls_base64_decode+0xa4>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802b086:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 802b08a:	e0c1      	b.n	802b210 <mbedtls_base64_decode+0x228>

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 802b08c:	683a      	ldr	r2, [r7, #0]
 802b08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b090:	4413      	add	r3, r2
 802b092:	781b      	ldrb	r3, [r3, #0]
 802b094:	b25b      	sxtb	r3, r3
 802b096:	2b00      	cmp	r3, #0
 802b098:	db08      	blt.n	802b0ac <mbedtls_base64_decode+0xc4>
 802b09a:	683a      	ldr	r2, [r7, #0]
 802b09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b09e:	4413      	add	r3, r2
 802b0a0:	781b      	ldrb	r3, [r3, #0]
 802b0a2:	461a      	mov	r2, r3
 802b0a4:	4b5d      	ldr	r3, [pc, #372]	; (802b21c <mbedtls_base64_decode+0x234>)
 802b0a6:	5c9b      	ldrb	r3, [r3, r2]
 802b0a8:	2b7f      	cmp	r3, #127	; 0x7f
 802b0aa:	d102      	bne.n	802b0b2 <mbedtls_base64_decode+0xca>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802b0ac:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 802b0b0:	e0ae      	b.n	802b210 <mbedtls_base64_decode+0x228>

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 802b0b2:	683a      	ldr	r2, [r7, #0]
 802b0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b0b6:	4413      	add	r3, r2
 802b0b8:	781b      	ldrb	r3, [r3, #0]
 802b0ba:	461a      	mov	r2, r3
 802b0bc:	4b57      	ldr	r3, [pc, #348]	; (802b21c <mbedtls_base64_decode+0x234>)
 802b0be:	5c9b      	ldrb	r3, [r3, r2]
 802b0c0:	2b3f      	cmp	r3, #63	; 0x3f
 802b0c2:	d805      	bhi.n	802b0d0 <mbedtls_base64_decode+0xe8>
 802b0c4:	69fb      	ldr	r3, [r7, #28]
 802b0c6:	2b00      	cmp	r3, #0
 802b0c8:	d002      	beq.n	802b0d0 <mbedtls_base64_decode+0xe8>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802b0ca:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 802b0ce:	e09f      	b.n	802b210 <mbedtls_base64_decode+0x228>

        n++;
 802b0d0:	6a3b      	ldr	r3, [r7, #32]
 802b0d2:	3301      	adds	r3, #1
 802b0d4:	623b      	str	r3, [r7, #32]
 802b0d6:	e002      	b.n	802b0de <mbedtls_base64_decode+0xf6>
            continue;
 802b0d8:	bf00      	nop
 802b0da:	e000      	b.n	802b0de <mbedtls_base64_decode+0xf6>
            continue;
 802b0dc:	bf00      	nop
    for( i = n = j = 0; i < slen; i++ )
 802b0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b0e0:	3301      	adds	r3, #1
 802b0e2:	627b      	str	r3, [r7, #36]	; 0x24
 802b0e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b0e8:	429a      	cmp	r2, r3
 802b0ea:	d38b      	bcc.n	802b004 <mbedtls_base64_decode+0x1c>
 802b0ec:	e000      	b.n	802b0f0 <mbedtls_base64_decode+0x108>
            break;
 802b0ee:	bf00      	nop
    }

    if( n == 0 )
 802b0f0:	6a3b      	ldr	r3, [r7, #32]
 802b0f2:	2b00      	cmp	r3, #0
 802b0f4:	d104      	bne.n	802b100 <mbedtls_base64_decode+0x118>
    {
        *olen = 0;
 802b0f6:	687b      	ldr	r3, [r7, #4]
 802b0f8:	2200      	movs	r2, #0
 802b0fa:	601a      	str	r2, [r3, #0]
        return( 0 );
 802b0fc:	2300      	movs	r3, #0
 802b0fe:	e087      	b.n	802b210 <mbedtls_base64_decode+0x228>

    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
 802b100:	6a3b      	ldr	r3, [r7, #32]
 802b102:	08da      	lsrs	r2, r3, #3
 802b104:	4613      	mov	r3, r2
 802b106:	005b      	lsls	r3, r3, #1
 802b108:	4413      	add	r3, r2
 802b10a:	005b      	lsls	r3, r3, #1
 802b10c:	4619      	mov	r1, r3
 802b10e:	6a3b      	ldr	r3, [r7, #32]
 802b110:	f003 0207 	and.w	r2, r3, #7
 802b114:	4613      	mov	r3, r2
 802b116:	005b      	lsls	r3, r3, #1
 802b118:	4413      	add	r3, r2
 802b11a:	005b      	lsls	r3, r3, #1
 802b11c:	3307      	adds	r3, #7
 802b11e:	08db      	lsrs	r3, r3, #3
 802b120:	440b      	add	r3, r1
 802b122:	623b      	str	r3, [r7, #32]
    n -= j;
 802b124:	6a3a      	ldr	r2, [r7, #32]
 802b126:	69fb      	ldr	r3, [r7, #28]
 802b128:	1ad3      	subs	r3, r2, r3
 802b12a:	623b      	str	r3, [r7, #32]

    if( dst == NULL || dlen < n )
 802b12c:	68fb      	ldr	r3, [r7, #12]
 802b12e:	2b00      	cmp	r3, #0
 802b130:	d003      	beq.n	802b13a <mbedtls_base64_decode+0x152>
 802b132:	68ba      	ldr	r2, [r7, #8]
 802b134:	6a3b      	ldr	r3, [r7, #32]
 802b136:	429a      	cmp	r2, r3
 802b138:	d205      	bcs.n	802b146 <mbedtls_base64_decode+0x15e>
    {
        *olen = n;
 802b13a:	687b      	ldr	r3, [r7, #4]
 802b13c:	6a3a      	ldr	r2, [r7, #32]
 802b13e:	601a      	str	r2, [r3, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 802b140:	f06f 0329 	mvn.w	r3, #41	; 0x29
 802b144:	e064      	b.n	802b210 <mbedtls_base64_decode+0x228>
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 802b146:	2303      	movs	r3, #3
 802b148:	61fb      	str	r3, [r7, #28]
 802b14a:	2300      	movs	r3, #0
 802b14c:	61bb      	str	r3, [r7, #24]
 802b14e:	2300      	movs	r3, #0
 802b150:	623b      	str	r3, [r7, #32]
 802b152:	68fb      	ldr	r3, [r7, #12]
 802b154:	617b      	str	r3, [r7, #20]
 802b156:	e051      	b.n	802b1fc <mbedtls_base64_decode+0x214>
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 802b158:	683b      	ldr	r3, [r7, #0]
 802b15a:	781b      	ldrb	r3, [r3, #0]
 802b15c:	2b0d      	cmp	r3, #13
 802b15e:	d046      	beq.n	802b1ee <mbedtls_base64_decode+0x206>
 802b160:	683b      	ldr	r3, [r7, #0]
 802b162:	781b      	ldrb	r3, [r3, #0]
 802b164:	2b0a      	cmp	r3, #10
 802b166:	d042      	beq.n	802b1ee <mbedtls_base64_decode+0x206>
 802b168:	683b      	ldr	r3, [r7, #0]
 802b16a:	781b      	ldrb	r3, [r3, #0]
 802b16c:	2b20      	cmp	r3, #32
 802b16e:	d03e      	beq.n	802b1ee <mbedtls_base64_decode+0x206>
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 802b170:	683b      	ldr	r3, [r7, #0]
 802b172:	781b      	ldrb	r3, [r3, #0]
 802b174:	461a      	mov	r2, r3
 802b176:	4b29      	ldr	r3, [pc, #164]	; (802b21c <mbedtls_base64_decode+0x234>)
 802b178:	5c9b      	ldrb	r3, [r3, r2]
 802b17a:	2b40      	cmp	r3, #64	; 0x40
 802b17c:	bf0c      	ite	eq
 802b17e:	2301      	moveq	r3, #1
 802b180:	2300      	movne	r3, #0
 802b182:	b2db      	uxtb	r3, r3
 802b184:	461a      	mov	r2, r3
 802b186:	69fb      	ldr	r3, [r7, #28]
 802b188:	1a9b      	subs	r3, r3, r2
 802b18a:	61fb      	str	r3, [r7, #28]
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 802b18c:	69bb      	ldr	r3, [r7, #24]
 802b18e:	019a      	lsls	r2, r3, #6
 802b190:	683b      	ldr	r3, [r7, #0]
 802b192:	781b      	ldrb	r3, [r3, #0]
 802b194:	4619      	mov	r1, r3
 802b196:	4b21      	ldr	r3, [pc, #132]	; (802b21c <mbedtls_base64_decode+0x234>)
 802b198:	5c5b      	ldrb	r3, [r3, r1]
 802b19a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802b19e:	4313      	orrs	r3, r2
 802b1a0:	61bb      	str	r3, [r7, #24]

        if( ++n == 4 )
 802b1a2:	6a3b      	ldr	r3, [r7, #32]
 802b1a4:	3301      	adds	r3, #1
 802b1a6:	623b      	str	r3, [r7, #32]
 802b1a8:	6a3b      	ldr	r3, [r7, #32]
 802b1aa:	2b04      	cmp	r3, #4
 802b1ac:	d120      	bne.n	802b1f0 <mbedtls_base64_decode+0x208>
        {
            n = 0;
 802b1ae:	2300      	movs	r3, #0
 802b1b0:	623b      	str	r3, [r7, #32]
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 802b1b2:	69fb      	ldr	r3, [r7, #28]
 802b1b4:	2b00      	cmp	r3, #0
 802b1b6:	d006      	beq.n	802b1c6 <mbedtls_base64_decode+0x1de>
 802b1b8:	69bb      	ldr	r3, [r7, #24]
 802b1ba:	0c19      	lsrs	r1, r3, #16
 802b1bc:	697b      	ldr	r3, [r7, #20]
 802b1be:	1c5a      	adds	r2, r3, #1
 802b1c0:	617a      	str	r2, [r7, #20]
 802b1c2:	b2ca      	uxtb	r2, r1
 802b1c4:	701a      	strb	r2, [r3, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 802b1c6:	69fb      	ldr	r3, [r7, #28]
 802b1c8:	2b01      	cmp	r3, #1
 802b1ca:	d906      	bls.n	802b1da <mbedtls_base64_decode+0x1f2>
 802b1cc:	69bb      	ldr	r3, [r7, #24]
 802b1ce:	0a19      	lsrs	r1, r3, #8
 802b1d0:	697b      	ldr	r3, [r7, #20]
 802b1d2:	1c5a      	adds	r2, r3, #1
 802b1d4:	617a      	str	r2, [r7, #20]
 802b1d6:	b2ca      	uxtb	r2, r1
 802b1d8:	701a      	strb	r2, [r3, #0]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 802b1da:	69fb      	ldr	r3, [r7, #28]
 802b1dc:	2b02      	cmp	r3, #2
 802b1de:	d907      	bls.n	802b1f0 <mbedtls_base64_decode+0x208>
 802b1e0:	697b      	ldr	r3, [r7, #20]
 802b1e2:	1c5a      	adds	r2, r3, #1
 802b1e4:	617a      	str	r2, [r7, #20]
 802b1e6:	69ba      	ldr	r2, [r7, #24]
 802b1e8:	b2d2      	uxtb	r2, r2
 802b1ea:	701a      	strb	r2, [r3, #0]
 802b1ec:	e000      	b.n	802b1f0 <mbedtls_base64_decode+0x208>
            continue;
 802b1ee:	bf00      	nop
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 802b1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b1f2:	3b01      	subs	r3, #1
 802b1f4:	627b      	str	r3, [r7, #36]	; 0x24
 802b1f6:	683b      	ldr	r3, [r7, #0]
 802b1f8:	3301      	adds	r3, #1
 802b1fa:	603b      	str	r3, [r7, #0]
 802b1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b1fe:	2b00      	cmp	r3, #0
 802b200:	d1aa      	bne.n	802b158 <mbedtls_base64_decode+0x170>
        }
    }

    *olen = p - dst;
 802b202:	697a      	ldr	r2, [r7, #20]
 802b204:	68fb      	ldr	r3, [r7, #12]
 802b206:	1ad3      	subs	r3, r2, r3
 802b208:	461a      	mov	r2, r3
 802b20a:	687b      	ldr	r3, [r7, #4]
 802b20c:	601a      	str	r2, [r3, #0]

    return( 0 );
 802b20e:	2300      	movs	r3, #0
}
 802b210:	4618      	mov	r0, r3
 802b212:	372c      	adds	r7, #44	; 0x2c
 802b214:	46bd      	mov	sp, r7
 802b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b21a:	4770      	bx	lr
 802b21c:	0803476c 	.word	0x0803476c

0802b220 <mbedtls_md5_init>:
    (b)[(i) + 3] = (unsigned char) ( ( (n) >> 24 ) & 0xFF );    \
}
#endif

void mbedtls_md5_init( mbedtls_md5_context *ctx )
{
 802b220:	b580      	push	{r7, lr}
 802b222:	b082      	sub	sp, #8
 802b224:	af00      	add	r7, sp, #0
 802b226:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_md5_context ) );
 802b228:	2258      	movs	r2, #88	; 0x58
 802b22a:	2100      	movs	r1, #0
 802b22c:	6878      	ldr	r0, [r7, #4]
 802b22e:	f002 fa4d 	bl	802d6cc <memset>
}
 802b232:	bf00      	nop
 802b234:	3708      	adds	r7, #8
 802b236:	46bd      	mov	sp, r7
 802b238:	bd80      	pop	{r7, pc}

0802b23a <mbedtls_md5_free>:

void mbedtls_md5_free( mbedtls_md5_context *ctx )
{
 802b23a:	b580      	push	{r7, lr}
 802b23c:	b082      	sub	sp, #8
 802b23e:	af00      	add	r7, sp, #0
 802b240:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 802b242:	687b      	ldr	r3, [r7, #4]
 802b244:	2b00      	cmp	r3, #0
 802b246:	d004      	beq.n	802b252 <mbedtls_md5_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md5_context ) );
 802b248:	2158      	movs	r1, #88	; 0x58
 802b24a:	6878      	ldr	r0, [r7, #4]
 802b24c:	f001 f85c 	bl	802c308 <mbedtls_platform_zeroize>
 802b250:	e000      	b.n	802b254 <mbedtls_md5_free+0x1a>
        return;
 802b252:	bf00      	nop
}
 802b254:	3708      	adds	r7, #8
 802b256:	46bd      	mov	sp, r7
 802b258:	bd80      	pop	{r7, pc}
	...

0802b25c <mbedtls_md5_starts_ret>:

/*
 * MD5 context setup
 */
int mbedtls_md5_starts_ret( mbedtls_md5_context *ctx )
{
 802b25c:	b480      	push	{r7}
 802b25e:	b083      	sub	sp, #12
 802b260:	af00      	add	r7, sp, #0
 802b262:	6078      	str	r0, [r7, #4]
    ctx->total[0] = 0;
 802b264:	687b      	ldr	r3, [r7, #4]
 802b266:	2200      	movs	r2, #0
 802b268:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 802b26a:	687b      	ldr	r3, [r7, #4]
 802b26c:	2200      	movs	r2, #0
 802b26e:	605a      	str	r2, [r3, #4]

    ctx->state[0] = 0x67452301;
 802b270:	687b      	ldr	r3, [r7, #4]
 802b272:	4a09      	ldr	r2, [pc, #36]	; (802b298 <mbedtls_md5_starts_ret+0x3c>)
 802b274:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 802b276:	687b      	ldr	r3, [r7, #4]
 802b278:	4a08      	ldr	r2, [pc, #32]	; (802b29c <mbedtls_md5_starts_ret+0x40>)
 802b27a:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 802b27c:	687b      	ldr	r3, [r7, #4]
 802b27e:	4a08      	ldr	r2, [pc, #32]	; (802b2a0 <mbedtls_md5_starts_ret+0x44>)
 802b280:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 802b282:	687b      	ldr	r3, [r7, #4]
 802b284:	4a07      	ldr	r2, [pc, #28]	; (802b2a4 <mbedtls_md5_starts_ret+0x48>)
 802b286:	615a      	str	r2, [r3, #20]

    return( 0 );
 802b288:	2300      	movs	r3, #0
}
 802b28a:	4618      	mov	r0, r3
 802b28c:	370c      	adds	r7, #12
 802b28e:	46bd      	mov	sp, r7
 802b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b294:	4770      	bx	lr
 802b296:	bf00      	nop
 802b298:	67452301 	.word	0x67452301
 802b29c:	efcdab89 	.word	0xefcdab89
 802b2a0:	98badcfe 	.word	0x98badcfe
 802b2a4:	10325476 	.word	0x10325476

0802b2a8 <mbedtls_internal_md5_process>:
#endif

#if !defined(MBEDTLS_MD5_PROCESS_ALT)
int mbedtls_internal_md5_process( mbedtls_md5_context *ctx,
                                  const unsigned char data[64] )
{
 802b2a8:	b480      	push	{r7}
 802b2aa:	b097      	sub	sp, #92	; 0x5c
 802b2ac:	af00      	add	r7, sp, #0
 802b2ae:	6078      	str	r0, [r7, #4]
 802b2b0:	6039      	str	r1, [r7, #0]
    uint32_t X[16], A, B, C, D;

    GET_UINT32_LE( X[ 0], data,  0 );
 802b2b2:	683b      	ldr	r3, [r7, #0]
 802b2b4:	781b      	ldrb	r3, [r3, #0]
 802b2b6:	461a      	mov	r2, r3
 802b2b8:	683b      	ldr	r3, [r7, #0]
 802b2ba:	3301      	adds	r3, #1
 802b2bc:	781b      	ldrb	r3, [r3, #0]
 802b2be:	021b      	lsls	r3, r3, #8
 802b2c0:	431a      	orrs	r2, r3
 802b2c2:	683b      	ldr	r3, [r7, #0]
 802b2c4:	3302      	adds	r3, #2
 802b2c6:	781b      	ldrb	r3, [r3, #0]
 802b2c8:	041b      	lsls	r3, r3, #16
 802b2ca:	431a      	orrs	r2, r3
 802b2cc:	683b      	ldr	r3, [r7, #0]
 802b2ce:	3303      	adds	r3, #3
 802b2d0:	781b      	ldrb	r3, [r3, #0]
 802b2d2:	061b      	lsls	r3, r3, #24
 802b2d4:	4313      	orrs	r3, r2
 802b2d6:	60bb      	str	r3, [r7, #8]
    GET_UINT32_LE( X[ 1], data,  4 );
 802b2d8:	683b      	ldr	r3, [r7, #0]
 802b2da:	3304      	adds	r3, #4
 802b2dc:	781b      	ldrb	r3, [r3, #0]
 802b2de:	461a      	mov	r2, r3
 802b2e0:	683b      	ldr	r3, [r7, #0]
 802b2e2:	3305      	adds	r3, #5
 802b2e4:	781b      	ldrb	r3, [r3, #0]
 802b2e6:	021b      	lsls	r3, r3, #8
 802b2e8:	431a      	orrs	r2, r3
 802b2ea:	683b      	ldr	r3, [r7, #0]
 802b2ec:	3306      	adds	r3, #6
 802b2ee:	781b      	ldrb	r3, [r3, #0]
 802b2f0:	041b      	lsls	r3, r3, #16
 802b2f2:	431a      	orrs	r2, r3
 802b2f4:	683b      	ldr	r3, [r7, #0]
 802b2f6:	3307      	adds	r3, #7
 802b2f8:	781b      	ldrb	r3, [r3, #0]
 802b2fa:	061b      	lsls	r3, r3, #24
 802b2fc:	4313      	orrs	r3, r2
 802b2fe:	60fb      	str	r3, [r7, #12]
    GET_UINT32_LE( X[ 2], data,  8 );
 802b300:	683b      	ldr	r3, [r7, #0]
 802b302:	3308      	adds	r3, #8
 802b304:	781b      	ldrb	r3, [r3, #0]
 802b306:	461a      	mov	r2, r3
 802b308:	683b      	ldr	r3, [r7, #0]
 802b30a:	3309      	adds	r3, #9
 802b30c:	781b      	ldrb	r3, [r3, #0]
 802b30e:	021b      	lsls	r3, r3, #8
 802b310:	431a      	orrs	r2, r3
 802b312:	683b      	ldr	r3, [r7, #0]
 802b314:	330a      	adds	r3, #10
 802b316:	781b      	ldrb	r3, [r3, #0]
 802b318:	041b      	lsls	r3, r3, #16
 802b31a:	431a      	orrs	r2, r3
 802b31c:	683b      	ldr	r3, [r7, #0]
 802b31e:	330b      	adds	r3, #11
 802b320:	781b      	ldrb	r3, [r3, #0]
 802b322:	061b      	lsls	r3, r3, #24
 802b324:	4313      	orrs	r3, r2
 802b326:	613b      	str	r3, [r7, #16]
    GET_UINT32_LE( X[ 3], data, 12 );
 802b328:	683b      	ldr	r3, [r7, #0]
 802b32a:	330c      	adds	r3, #12
 802b32c:	781b      	ldrb	r3, [r3, #0]
 802b32e:	461a      	mov	r2, r3
 802b330:	683b      	ldr	r3, [r7, #0]
 802b332:	330d      	adds	r3, #13
 802b334:	781b      	ldrb	r3, [r3, #0]
 802b336:	021b      	lsls	r3, r3, #8
 802b338:	431a      	orrs	r2, r3
 802b33a:	683b      	ldr	r3, [r7, #0]
 802b33c:	330e      	adds	r3, #14
 802b33e:	781b      	ldrb	r3, [r3, #0]
 802b340:	041b      	lsls	r3, r3, #16
 802b342:	431a      	orrs	r2, r3
 802b344:	683b      	ldr	r3, [r7, #0]
 802b346:	330f      	adds	r3, #15
 802b348:	781b      	ldrb	r3, [r3, #0]
 802b34a:	061b      	lsls	r3, r3, #24
 802b34c:	4313      	orrs	r3, r2
 802b34e:	617b      	str	r3, [r7, #20]
    GET_UINT32_LE( X[ 4], data, 16 );
 802b350:	683b      	ldr	r3, [r7, #0]
 802b352:	3310      	adds	r3, #16
 802b354:	781b      	ldrb	r3, [r3, #0]
 802b356:	461a      	mov	r2, r3
 802b358:	683b      	ldr	r3, [r7, #0]
 802b35a:	3311      	adds	r3, #17
 802b35c:	781b      	ldrb	r3, [r3, #0]
 802b35e:	021b      	lsls	r3, r3, #8
 802b360:	431a      	orrs	r2, r3
 802b362:	683b      	ldr	r3, [r7, #0]
 802b364:	3312      	adds	r3, #18
 802b366:	781b      	ldrb	r3, [r3, #0]
 802b368:	041b      	lsls	r3, r3, #16
 802b36a:	431a      	orrs	r2, r3
 802b36c:	683b      	ldr	r3, [r7, #0]
 802b36e:	3313      	adds	r3, #19
 802b370:	781b      	ldrb	r3, [r3, #0]
 802b372:	061b      	lsls	r3, r3, #24
 802b374:	4313      	orrs	r3, r2
 802b376:	61bb      	str	r3, [r7, #24]
    GET_UINT32_LE( X[ 5], data, 20 );
 802b378:	683b      	ldr	r3, [r7, #0]
 802b37a:	3314      	adds	r3, #20
 802b37c:	781b      	ldrb	r3, [r3, #0]
 802b37e:	461a      	mov	r2, r3
 802b380:	683b      	ldr	r3, [r7, #0]
 802b382:	3315      	adds	r3, #21
 802b384:	781b      	ldrb	r3, [r3, #0]
 802b386:	021b      	lsls	r3, r3, #8
 802b388:	431a      	orrs	r2, r3
 802b38a:	683b      	ldr	r3, [r7, #0]
 802b38c:	3316      	adds	r3, #22
 802b38e:	781b      	ldrb	r3, [r3, #0]
 802b390:	041b      	lsls	r3, r3, #16
 802b392:	431a      	orrs	r2, r3
 802b394:	683b      	ldr	r3, [r7, #0]
 802b396:	3317      	adds	r3, #23
 802b398:	781b      	ldrb	r3, [r3, #0]
 802b39a:	061b      	lsls	r3, r3, #24
 802b39c:	4313      	orrs	r3, r2
 802b39e:	61fb      	str	r3, [r7, #28]
    GET_UINT32_LE( X[ 6], data, 24 );
 802b3a0:	683b      	ldr	r3, [r7, #0]
 802b3a2:	3318      	adds	r3, #24
 802b3a4:	781b      	ldrb	r3, [r3, #0]
 802b3a6:	461a      	mov	r2, r3
 802b3a8:	683b      	ldr	r3, [r7, #0]
 802b3aa:	3319      	adds	r3, #25
 802b3ac:	781b      	ldrb	r3, [r3, #0]
 802b3ae:	021b      	lsls	r3, r3, #8
 802b3b0:	431a      	orrs	r2, r3
 802b3b2:	683b      	ldr	r3, [r7, #0]
 802b3b4:	331a      	adds	r3, #26
 802b3b6:	781b      	ldrb	r3, [r3, #0]
 802b3b8:	041b      	lsls	r3, r3, #16
 802b3ba:	431a      	orrs	r2, r3
 802b3bc:	683b      	ldr	r3, [r7, #0]
 802b3be:	331b      	adds	r3, #27
 802b3c0:	781b      	ldrb	r3, [r3, #0]
 802b3c2:	061b      	lsls	r3, r3, #24
 802b3c4:	4313      	orrs	r3, r2
 802b3c6:	623b      	str	r3, [r7, #32]
    GET_UINT32_LE( X[ 7], data, 28 );
 802b3c8:	683b      	ldr	r3, [r7, #0]
 802b3ca:	331c      	adds	r3, #28
 802b3cc:	781b      	ldrb	r3, [r3, #0]
 802b3ce:	461a      	mov	r2, r3
 802b3d0:	683b      	ldr	r3, [r7, #0]
 802b3d2:	331d      	adds	r3, #29
 802b3d4:	781b      	ldrb	r3, [r3, #0]
 802b3d6:	021b      	lsls	r3, r3, #8
 802b3d8:	431a      	orrs	r2, r3
 802b3da:	683b      	ldr	r3, [r7, #0]
 802b3dc:	331e      	adds	r3, #30
 802b3de:	781b      	ldrb	r3, [r3, #0]
 802b3e0:	041b      	lsls	r3, r3, #16
 802b3e2:	431a      	orrs	r2, r3
 802b3e4:	683b      	ldr	r3, [r7, #0]
 802b3e6:	331f      	adds	r3, #31
 802b3e8:	781b      	ldrb	r3, [r3, #0]
 802b3ea:	061b      	lsls	r3, r3, #24
 802b3ec:	4313      	orrs	r3, r2
 802b3ee:	627b      	str	r3, [r7, #36]	; 0x24
    GET_UINT32_LE( X[ 8], data, 32 );
 802b3f0:	683b      	ldr	r3, [r7, #0]
 802b3f2:	3320      	adds	r3, #32
 802b3f4:	781b      	ldrb	r3, [r3, #0]
 802b3f6:	461a      	mov	r2, r3
 802b3f8:	683b      	ldr	r3, [r7, #0]
 802b3fa:	3321      	adds	r3, #33	; 0x21
 802b3fc:	781b      	ldrb	r3, [r3, #0]
 802b3fe:	021b      	lsls	r3, r3, #8
 802b400:	431a      	orrs	r2, r3
 802b402:	683b      	ldr	r3, [r7, #0]
 802b404:	3322      	adds	r3, #34	; 0x22
 802b406:	781b      	ldrb	r3, [r3, #0]
 802b408:	041b      	lsls	r3, r3, #16
 802b40a:	431a      	orrs	r2, r3
 802b40c:	683b      	ldr	r3, [r7, #0]
 802b40e:	3323      	adds	r3, #35	; 0x23
 802b410:	781b      	ldrb	r3, [r3, #0]
 802b412:	061b      	lsls	r3, r3, #24
 802b414:	4313      	orrs	r3, r2
 802b416:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_UINT32_LE( X[ 9], data, 36 );
 802b418:	683b      	ldr	r3, [r7, #0]
 802b41a:	3324      	adds	r3, #36	; 0x24
 802b41c:	781b      	ldrb	r3, [r3, #0]
 802b41e:	461a      	mov	r2, r3
 802b420:	683b      	ldr	r3, [r7, #0]
 802b422:	3325      	adds	r3, #37	; 0x25
 802b424:	781b      	ldrb	r3, [r3, #0]
 802b426:	021b      	lsls	r3, r3, #8
 802b428:	431a      	orrs	r2, r3
 802b42a:	683b      	ldr	r3, [r7, #0]
 802b42c:	3326      	adds	r3, #38	; 0x26
 802b42e:	781b      	ldrb	r3, [r3, #0]
 802b430:	041b      	lsls	r3, r3, #16
 802b432:	431a      	orrs	r2, r3
 802b434:	683b      	ldr	r3, [r7, #0]
 802b436:	3327      	adds	r3, #39	; 0x27
 802b438:	781b      	ldrb	r3, [r3, #0]
 802b43a:	061b      	lsls	r3, r3, #24
 802b43c:	4313      	orrs	r3, r2
 802b43e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_UINT32_LE( X[10], data, 40 );
 802b440:	683b      	ldr	r3, [r7, #0]
 802b442:	3328      	adds	r3, #40	; 0x28
 802b444:	781b      	ldrb	r3, [r3, #0]
 802b446:	461a      	mov	r2, r3
 802b448:	683b      	ldr	r3, [r7, #0]
 802b44a:	3329      	adds	r3, #41	; 0x29
 802b44c:	781b      	ldrb	r3, [r3, #0]
 802b44e:	021b      	lsls	r3, r3, #8
 802b450:	431a      	orrs	r2, r3
 802b452:	683b      	ldr	r3, [r7, #0]
 802b454:	332a      	adds	r3, #42	; 0x2a
 802b456:	781b      	ldrb	r3, [r3, #0]
 802b458:	041b      	lsls	r3, r3, #16
 802b45a:	431a      	orrs	r2, r3
 802b45c:	683b      	ldr	r3, [r7, #0]
 802b45e:	332b      	adds	r3, #43	; 0x2b
 802b460:	781b      	ldrb	r3, [r3, #0]
 802b462:	061b      	lsls	r3, r3, #24
 802b464:	4313      	orrs	r3, r2
 802b466:	633b      	str	r3, [r7, #48]	; 0x30
    GET_UINT32_LE( X[11], data, 44 );
 802b468:	683b      	ldr	r3, [r7, #0]
 802b46a:	332c      	adds	r3, #44	; 0x2c
 802b46c:	781b      	ldrb	r3, [r3, #0]
 802b46e:	461a      	mov	r2, r3
 802b470:	683b      	ldr	r3, [r7, #0]
 802b472:	332d      	adds	r3, #45	; 0x2d
 802b474:	781b      	ldrb	r3, [r3, #0]
 802b476:	021b      	lsls	r3, r3, #8
 802b478:	431a      	orrs	r2, r3
 802b47a:	683b      	ldr	r3, [r7, #0]
 802b47c:	332e      	adds	r3, #46	; 0x2e
 802b47e:	781b      	ldrb	r3, [r3, #0]
 802b480:	041b      	lsls	r3, r3, #16
 802b482:	431a      	orrs	r2, r3
 802b484:	683b      	ldr	r3, [r7, #0]
 802b486:	332f      	adds	r3, #47	; 0x2f
 802b488:	781b      	ldrb	r3, [r3, #0]
 802b48a:	061b      	lsls	r3, r3, #24
 802b48c:	4313      	orrs	r3, r2
 802b48e:	637b      	str	r3, [r7, #52]	; 0x34
    GET_UINT32_LE( X[12], data, 48 );
 802b490:	683b      	ldr	r3, [r7, #0]
 802b492:	3330      	adds	r3, #48	; 0x30
 802b494:	781b      	ldrb	r3, [r3, #0]
 802b496:	461a      	mov	r2, r3
 802b498:	683b      	ldr	r3, [r7, #0]
 802b49a:	3331      	adds	r3, #49	; 0x31
 802b49c:	781b      	ldrb	r3, [r3, #0]
 802b49e:	021b      	lsls	r3, r3, #8
 802b4a0:	431a      	orrs	r2, r3
 802b4a2:	683b      	ldr	r3, [r7, #0]
 802b4a4:	3332      	adds	r3, #50	; 0x32
 802b4a6:	781b      	ldrb	r3, [r3, #0]
 802b4a8:	041b      	lsls	r3, r3, #16
 802b4aa:	431a      	orrs	r2, r3
 802b4ac:	683b      	ldr	r3, [r7, #0]
 802b4ae:	3333      	adds	r3, #51	; 0x33
 802b4b0:	781b      	ldrb	r3, [r3, #0]
 802b4b2:	061b      	lsls	r3, r3, #24
 802b4b4:	4313      	orrs	r3, r2
 802b4b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GET_UINT32_LE( X[13], data, 52 );
 802b4b8:	683b      	ldr	r3, [r7, #0]
 802b4ba:	3334      	adds	r3, #52	; 0x34
 802b4bc:	781b      	ldrb	r3, [r3, #0]
 802b4be:	461a      	mov	r2, r3
 802b4c0:	683b      	ldr	r3, [r7, #0]
 802b4c2:	3335      	adds	r3, #53	; 0x35
 802b4c4:	781b      	ldrb	r3, [r3, #0]
 802b4c6:	021b      	lsls	r3, r3, #8
 802b4c8:	431a      	orrs	r2, r3
 802b4ca:	683b      	ldr	r3, [r7, #0]
 802b4cc:	3336      	adds	r3, #54	; 0x36
 802b4ce:	781b      	ldrb	r3, [r3, #0]
 802b4d0:	041b      	lsls	r3, r3, #16
 802b4d2:	431a      	orrs	r2, r3
 802b4d4:	683b      	ldr	r3, [r7, #0]
 802b4d6:	3337      	adds	r3, #55	; 0x37
 802b4d8:	781b      	ldrb	r3, [r3, #0]
 802b4da:	061b      	lsls	r3, r3, #24
 802b4dc:	4313      	orrs	r3, r2
 802b4de:	63fb      	str	r3, [r7, #60]	; 0x3c
    GET_UINT32_LE( X[14], data, 56 );
 802b4e0:	683b      	ldr	r3, [r7, #0]
 802b4e2:	3338      	adds	r3, #56	; 0x38
 802b4e4:	781b      	ldrb	r3, [r3, #0]
 802b4e6:	461a      	mov	r2, r3
 802b4e8:	683b      	ldr	r3, [r7, #0]
 802b4ea:	3339      	adds	r3, #57	; 0x39
 802b4ec:	781b      	ldrb	r3, [r3, #0]
 802b4ee:	021b      	lsls	r3, r3, #8
 802b4f0:	431a      	orrs	r2, r3
 802b4f2:	683b      	ldr	r3, [r7, #0]
 802b4f4:	333a      	adds	r3, #58	; 0x3a
 802b4f6:	781b      	ldrb	r3, [r3, #0]
 802b4f8:	041b      	lsls	r3, r3, #16
 802b4fa:	431a      	orrs	r2, r3
 802b4fc:	683b      	ldr	r3, [r7, #0]
 802b4fe:	333b      	adds	r3, #59	; 0x3b
 802b500:	781b      	ldrb	r3, [r3, #0]
 802b502:	061b      	lsls	r3, r3, #24
 802b504:	4313      	orrs	r3, r2
 802b506:	643b      	str	r3, [r7, #64]	; 0x40
    GET_UINT32_LE( X[15], data, 60 );
 802b508:	683b      	ldr	r3, [r7, #0]
 802b50a:	333c      	adds	r3, #60	; 0x3c
 802b50c:	781b      	ldrb	r3, [r3, #0]
 802b50e:	461a      	mov	r2, r3
 802b510:	683b      	ldr	r3, [r7, #0]
 802b512:	333d      	adds	r3, #61	; 0x3d
 802b514:	781b      	ldrb	r3, [r3, #0]
 802b516:	021b      	lsls	r3, r3, #8
 802b518:	431a      	orrs	r2, r3
 802b51a:	683b      	ldr	r3, [r7, #0]
 802b51c:	333e      	adds	r3, #62	; 0x3e
 802b51e:	781b      	ldrb	r3, [r3, #0]
 802b520:	041b      	lsls	r3, r3, #16
 802b522:	431a      	orrs	r2, r3
 802b524:	683b      	ldr	r3, [r7, #0]
 802b526:	333f      	adds	r3, #63	; 0x3f
 802b528:	781b      	ldrb	r3, [r3, #0]
 802b52a:	061b      	lsls	r3, r3, #24
 802b52c:	4313      	orrs	r3, r2
 802b52e:	647b      	str	r3, [r7, #68]	; 0x44
    {                                                           \
        (a) += F((b),(c),(d)) + X[(k)] + (t);                   \
        (a) = S((a),(s)) + (b);                                 \
    } while( 0 )

    A = ctx->state[0];
 802b530:	687b      	ldr	r3, [r7, #4]
 802b532:	689b      	ldr	r3, [r3, #8]
 802b534:	657b      	str	r3, [r7, #84]	; 0x54
    B = ctx->state[1];
 802b536:	687b      	ldr	r3, [r7, #4]
 802b538:	68db      	ldr	r3, [r3, #12]
 802b53a:	653b      	str	r3, [r7, #80]	; 0x50
    C = ctx->state[2];
 802b53c:	687b      	ldr	r3, [r7, #4]
 802b53e:	691b      	ldr	r3, [r3, #16]
 802b540:	64fb      	str	r3, [r7, #76]	; 0x4c
    D = ctx->state[3];
 802b542:	687b      	ldr	r3, [r7, #4]
 802b544:	695b      	ldr	r3, [r3, #20]
 802b546:	64bb      	str	r3, [r7, #72]	; 0x48

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))

    P( A, B, C, D,  0,  7, 0xD76AA478 );
 802b548:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b54a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b54c:	405a      	eors	r2, r3
 802b54e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b550:	401a      	ands	r2, r3
 802b552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b554:	405a      	eors	r2, r3
 802b556:	68bb      	ldr	r3, [r7, #8]
 802b558:	441a      	add	r2, r3
 802b55a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b55c:	441a      	add	r2, r3
 802b55e:	4ba5      	ldr	r3, [pc, #660]	; (802b7f4 <mbedtls_internal_md5_process+0x54c>)
 802b560:	4413      	add	r3, r2
 802b562:	657b      	str	r3, [r7, #84]	; 0x54
 802b564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b566:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b56a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b56c:	4413      	add	r3, r2
 802b56e:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  1, 12, 0xE8C7B756 );
 802b570:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b574:	405a      	eors	r2, r3
 802b576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b578:	401a      	ands	r2, r3
 802b57a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b57c:	405a      	eors	r2, r3
 802b57e:	68fb      	ldr	r3, [r7, #12]
 802b580:	441a      	add	r2, r3
 802b582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b584:	441a      	add	r2, r3
 802b586:	4b9c      	ldr	r3, [pc, #624]	; (802b7f8 <mbedtls_internal_md5_process+0x550>)
 802b588:	4413      	add	r3, r2
 802b58a:	64bb      	str	r3, [r7, #72]	; 0x48
 802b58c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b58e:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b592:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b594:	4413      	add	r3, r2
 802b596:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  2, 17, 0x242070DB );
 802b598:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b59a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b59c:	405a      	eors	r2, r3
 802b59e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b5a0:	401a      	ands	r2, r3
 802b5a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b5a4:	405a      	eors	r2, r3
 802b5a6:	693b      	ldr	r3, [r7, #16]
 802b5a8:	441a      	add	r2, r3
 802b5aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b5ac:	441a      	add	r2, r3
 802b5ae:	4b93      	ldr	r3, [pc, #588]	; (802b7fc <mbedtls_internal_md5_process+0x554>)
 802b5b0:	4413      	add	r3, r2
 802b5b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b5b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b5b6:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802b5ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b5bc:	4413      	add	r3, r2
 802b5be:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  3, 22, 0xC1BDCEEE );
 802b5c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b5c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b5c4:	405a      	eors	r2, r3
 802b5c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b5c8:	401a      	ands	r2, r3
 802b5ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b5cc:	405a      	eors	r2, r3
 802b5ce:	697b      	ldr	r3, [r7, #20]
 802b5d0:	441a      	add	r2, r3
 802b5d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b5d4:	441a      	add	r2, r3
 802b5d6:	4b8a      	ldr	r3, [pc, #552]	; (802b800 <mbedtls_internal_md5_process+0x558>)
 802b5d8:	4413      	add	r3, r2
 802b5da:	653b      	str	r3, [r7, #80]	; 0x50
 802b5dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b5de:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802b5e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b5e4:	4413      	add	r3, r2
 802b5e6:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  4,  7, 0xF57C0FAF );
 802b5e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b5ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b5ec:	405a      	eors	r2, r3
 802b5ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b5f0:	401a      	ands	r2, r3
 802b5f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b5f4:	405a      	eors	r2, r3
 802b5f6:	69bb      	ldr	r3, [r7, #24]
 802b5f8:	441a      	add	r2, r3
 802b5fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b5fc:	441a      	add	r2, r3
 802b5fe:	4b81      	ldr	r3, [pc, #516]	; (802b804 <mbedtls_internal_md5_process+0x55c>)
 802b600:	4413      	add	r3, r2
 802b602:	657b      	str	r3, [r7, #84]	; 0x54
 802b604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b606:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b60a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b60c:	4413      	add	r3, r2
 802b60e:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  5, 12, 0x4787C62A );
 802b610:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b614:	405a      	eors	r2, r3
 802b616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b618:	401a      	ands	r2, r3
 802b61a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b61c:	405a      	eors	r2, r3
 802b61e:	69fb      	ldr	r3, [r7, #28]
 802b620:	441a      	add	r2, r3
 802b622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b624:	441a      	add	r2, r3
 802b626:	4b78      	ldr	r3, [pc, #480]	; (802b808 <mbedtls_internal_md5_process+0x560>)
 802b628:	4413      	add	r3, r2
 802b62a:	64bb      	str	r3, [r7, #72]	; 0x48
 802b62c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b62e:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b632:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b634:	4413      	add	r3, r2
 802b636:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  6, 17, 0xA8304613 );
 802b638:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b63a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b63c:	405a      	eors	r2, r3
 802b63e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b640:	401a      	ands	r2, r3
 802b642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b644:	405a      	eors	r2, r3
 802b646:	6a3b      	ldr	r3, [r7, #32]
 802b648:	441a      	add	r2, r3
 802b64a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b64c:	441a      	add	r2, r3
 802b64e:	4b6f      	ldr	r3, [pc, #444]	; (802b80c <mbedtls_internal_md5_process+0x564>)
 802b650:	4413      	add	r3, r2
 802b652:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b656:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802b65a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b65c:	4413      	add	r3, r2
 802b65e:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  7, 22, 0xFD469501 );
 802b660:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b664:	405a      	eors	r2, r3
 802b666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b668:	401a      	ands	r2, r3
 802b66a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b66c:	405a      	eors	r2, r3
 802b66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b670:	441a      	add	r2, r3
 802b672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b674:	441a      	add	r2, r3
 802b676:	4b66      	ldr	r3, [pc, #408]	; (802b810 <mbedtls_internal_md5_process+0x568>)
 802b678:	4413      	add	r3, r2
 802b67a:	653b      	str	r3, [r7, #80]	; 0x50
 802b67c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b67e:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802b682:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b684:	4413      	add	r3, r2
 802b686:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  8,  7, 0x698098D8 );
 802b688:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b68a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b68c:	405a      	eors	r2, r3
 802b68e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b690:	401a      	ands	r2, r3
 802b692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b694:	405a      	eors	r2, r3
 802b696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b698:	441a      	add	r2, r3
 802b69a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b69c:	441a      	add	r2, r3
 802b69e:	4b5d      	ldr	r3, [pc, #372]	; (802b814 <mbedtls_internal_md5_process+0x56c>)
 802b6a0:	4413      	add	r3, r2
 802b6a2:	657b      	str	r3, [r7, #84]	; 0x54
 802b6a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b6a6:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b6aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b6ac:	4413      	add	r3, r2
 802b6ae:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  9, 12, 0x8B44F7AF );
 802b6b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b6b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b6b4:	405a      	eors	r2, r3
 802b6b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b6b8:	401a      	ands	r2, r3
 802b6ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b6bc:	405a      	eors	r2, r3
 802b6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b6c0:	441a      	add	r2, r3
 802b6c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b6c4:	441a      	add	r2, r3
 802b6c6:	4b54      	ldr	r3, [pc, #336]	; (802b818 <mbedtls_internal_md5_process+0x570>)
 802b6c8:	4413      	add	r3, r2
 802b6ca:	64bb      	str	r3, [r7, #72]	; 0x48
 802b6cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b6ce:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b6d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b6d4:	4413      	add	r3, r2
 802b6d6:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 10, 17, 0xFFFF5BB1 );
 802b6d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b6da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b6dc:	405a      	eors	r2, r3
 802b6de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b6e0:	401a      	ands	r2, r3
 802b6e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b6e4:	405a      	eors	r2, r3
 802b6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b6e8:	441a      	add	r2, r3
 802b6ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b6ec:	4413      	add	r3, r2
 802b6ee:	f5a3 4324 	sub.w	r3, r3, #41984	; 0xa400
 802b6f2:	3b4f      	subs	r3, #79	; 0x4f
 802b6f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b6f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b6f8:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802b6fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b6fe:	4413      	add	r3, r2
 802b700:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 11, 22, 0x895CD7BE );
 802b702:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b706:	405a      	eors	r2, r3
 802b708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b70a:	401a      	ands	r2, r3
 802b70c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b70e:	405a      	eors	r2, r3
 802b710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802b712:	441a      	add	r2, r3
 802b714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b716:	441a      	add	r2, r3
 802b718:	4b40      	ldr	r3, [pc, #256]	; (802b81c <mbedtls_internal_md5_process+0x574>)
 802b71a:	4413      	add	r3, r2
 802b71c:	653b      	str	r3, [r7, #80]	; 0x50
 802b71e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b720:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802b724:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b726:	4413      	add	r3, r2
 802b728:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 12,  7, 0x6B901122 );
 802b72a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b72c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b72e:	405a      	eors	r2, r3
 802b730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b732:	401a      	ands	r2, r3
 802b734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b736:	405a      	eors	r2, r3
 802b738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b73a:	441a      	add	r2, r3
 802b73c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b73e:	441a      	add	r2, r3
 802b740:	4b37      	ldr	r3, [pc, #220]	; (802b820 <mbedtls_internal_md5_process+0x578>)
 802b742:	4413      	add	r3, r2
 802b744:	657b      	str	r3, [r7, #84]	; 0x54
 802b746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b748:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b74c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b74e:	4413      	add	r3, r2
 802b750:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 13, 12, 0xFD987193 );
 802b752:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b756:	405a      	eors	r2, r3
 802b758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b75a:	401a      	ands	r2, r3
 802b75c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b75e:	405a      	eors	r2, r3
 802b760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802b762:	441a      	add	r2, r3
 802b764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b766:	441a      	add	r2, r3
 802b768:	4b2e      	ldr	r3, [pc, #184]	; (802b824 <mbedtls_internal_md5_process+0x57c>)
 802b76a:	4413      	add	r3, r2
 802b76c:	64bb      	str	r3, [r7, #72]	; 0x48
 802b76e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b770:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b774:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b776:	4413      	add	r3, r2
 802b778:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 14, 17, 0xA679438E );
 802b77a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b77c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b77e:	405a      	eors	r2, r3
 802b780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b782:	401a      	ands	r2, r3
 802b784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b786:	405a      	eors	r2, r3
 802b788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802b78a:	441a      	add	r2, r3
 802b78c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b78e:	441a      	add	r2, r3
 802b790:	4b25      	ldr	r3, [pc, #148]	; (802b828 <mbedtls_internal_md5_process+0x580>)
 802b792:	4413      	add	r3, r2
 802b794:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b798:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802b79c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b79e:	4413      	add	r3, r2
 802b7a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 15, 22, 0x49B40821 );
 802b7a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b7a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b7a6:	405a      	eors	r2, r3
 802b7a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b7aa:	401a      	ands	r2, r3
 802b7ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b7ae:	405a      	eors	r2, r3
 802b7b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802b7b2:	441a      	add	r2, r3
 802b7b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b7b6:	441a      	add	r2, r3
 802b7b8:	4b1c      	ldr	r3, [pc, #112]	; (802b82c <mbedtls_internal_md5_process+0x584>)
 802b7ba:	4413      	add	r3, r2
 802b7bc:	653b      	str	r3, [r7, #80]	; 0x50
 802b7be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b7c0:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802b7c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b7c6:	4413      	add	r3, r2
 802b7c8:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) ((y) ^ ((z) & ((x) ^ (y))))

    P( A, B, C, D,  1,  5, 0xF61E2562 );
 802b7ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b7cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b7ce:	405a      	eors	r2, r3
 802b7d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b7d2:	401a      	ands	r2, r3
 802b7d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b7d6:	405a      	eors	r2, r3
 802b7d8:	68fb      	ldr	r3, [r7, #12]
 802b7da:	441a      	add	r2, r3
 802b7dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b7de:	441a      	add	r2, r3
 802b7e0:	4b13      	ldr	r3, [pc, #76]	; (802b830 <mbedtls_internal_md5_process+0x588>)
 802b7e2:	4413      	add	r3, r2
 802b7e4:	657b      	str	r3, [r7, #84]	; 0x54
 802b7e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b7e8:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802b7ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b7ee:	4413      	add	r3, r2
 802b7f0:	e020      	b.n	802b834 <mbedtls_internal_md5_process+0x58c>
 802b7f2:	bf00      	nop
 802b7f4:	d76aa478 	.word	0xd76aa478
 802b7f8:	e8c7b756 	.word	0xe8c7b756
 802b7fc:	242070db 	.word	0x242070db
 802b800:	c1bdceee 	.word	0xc1bdceee
 802b804:	f57c0faf 	.word	0xf57c0faf
 802b808:	4787c62a 	.word	0x4787c62a
 802b80c:	a8304613 	.word	0xa8304613
 802b810:	fd469501 	.word	0xfd469501
 802b814:	698098d8 	.word	0x698098d8
 802b818:	8b44f7af 	.word	0x8b44f7af
 802b81c:	895cd7be 	.word	0x895cd7be
 802b820:	6b901122 	.word	0x6b901122
 802b824:	fd987193 	.word	0xfd987193
 802b828:	a679438e 	.word	0xa679438e
 802b82c:	49b40821 	.word	0x49b40821
 802b830:	f61e2562 	.word	0xf61e2562
 802b834:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  6,  9, 0xC040B340 );
 802b836:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b83a:	405a      	eors	r2, r3
 802b83c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b83e:	401a      	ands	r2, r3
 802b840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b842:	405a      	eors	r2, r3
 802b844:	6a3b      	ldr	r3, [r7, #32]
 802b846:	441a      	add	r2, r3
 802b848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b84a:	441a      	add	r2, r3
 802b84c:	4ba4      	ldr	r3, [pc, #656]	; (802bae0 <mbedtls_internal_md5_process+0x838>)
 802b84e:	4413      	add	r3, r2
 802b850:	64bb      	str	r3, [r7, #72]	; 0x48
 802b852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b854:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802b858:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b85a:	4413      	add	r3, r2
 802b85c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 11, 14, 0x265E5A51 );
 802b85e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b862:	405a      	eors	r2, r3
 802b864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b866:	401a      	ands	r2, r3
 802b868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b86a:	405a      	eors	r2, r3
 802b86c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802b86e:	441a      	add	r2, r3
 802b870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b872:	441a      	add	r2, r3
 802b874:	4b9b      	ldr	r3, [pc, #620]	; (802bae4 <mbedtls_internal_md5_process+0x83c>)
 802b876:	4413      	add	r3, r2
 802b878:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b87a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b87c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802b880:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b882:	4413      	add	r3, r2
 802b884:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  0, 20, 0xE9B6C7AA );
 802b886:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b88a:	405a      	eors	r2, r3
 802b88c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b88e:	401a      	ands	r2, r3
 802b890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b892:	405a      	eors	r2, r3
 802b894:	68bb      	ldr	r3, [r7, #8]
 802b896:	441a      	add	r2, r3
 802b898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b89a:	441a      	add	r2, r3
 802b89c:	4b92      	ldr	r3, [pc, #584]	; (802bae8 <mbedtls_internal_md5_process+0x840>)
 802b89e:	4413      	add	r3, r2
 802b8a0:	653b      	str	r3, [r7, #80]	; 0x50
 802b8a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b8a4:	ea4f 3333 	mov.w	r3, r3, ror #12
 802b8a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b8aa:	4413      	add	r3, r2
 802b8ac:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  5,  5, 0xD62F105D );
 802b8ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b8b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b8b2:	405a      	eors	r2, r3
 802b8b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b8b6:	401a      	ands	r2, r3
 802b8b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b8ba:	405a      	eors	r2, r3
 802b8bc:	69fb      	ldr	r3, [r7, #28]
 802b8be:	441a      	add	r2, r3
 802b8c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b8c2:	441a      	add	r2, r3
 802b8c4:	4b89      	ldr	r3, [pc, #548]	; (802baec <mbedtls_internal_md5_process+0x844>)
 802b8c6:	4413      	add	r3, r2
 802b8c8:	657b      	str	r3, [r7, #84]	; 0x54
 802b8ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b8cc:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802b8d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b8d2:	4413      	add	r3, r2
 802b8d4:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 10,  9, 0x02441453 );
 802b8d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b8d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b8da:	405a      	eors	r2, r3
 802b8dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b8de:	401a      	ands	r2, r3
 802b8e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b8e2:	405a      	eors	r2, r3
 802b8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b8e6:	441a      	add	r2, r3
 802b8e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b8ea:	441a      	add	r2, r3
 802b8ec:	4b80      	ldr	r3, [pc, #512]	; (802baf0 <mbedtls_internal_md5_process+0x848>)
 802b8ee:	4413      	add	r3, r2
 802b8f0:	64bb      	str	r3, [r7, #72]	; 0x48
 802b8f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b8f4:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802b8f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b8fa:	4413      	add	r3, r2
 802b8fc:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 15, 14, 0xD8A1E681 );
 802b8fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b902:	405a      	eors	r2, r3
 802b904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b906:	401a      	ands	r2, r3
 802b908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b90a:	405a      	eors	r2, r3
 802b90c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802b90e:	441a      	add	r2, r3
 802b910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b912:	441a      	add	r2, r3
 802b914:	4b77      	ldr	r3, [pc, #476]	; (802baf4 <mbedtls_internal_md5_process+0x84c>)
 802b916:	4413      	add	r3, r2
 802b918:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b91a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b91c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802b920:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b922:	4413      	add	r3, r2
 802b924:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  4, 20, 0xE7D3FBC8 );
 802b926:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b92a:	405a      	eors	r2, r3
 802b92c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b92e:	401a      	ands	r2, r3
 802b930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b932:	405a      	eors	r2, r3
 802b934:	69bb      	ldr	r3, [r7, #24]
 802b936:	441a      	add	r2, r3
 802b938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b93a:	441a      	add	r2, r3
 802b93c:	4b6e      	ldr	r3, [pc, #440]	; (802baf8 <mbedtls_internal_md5_process+0x850>)
 802b93e:	4413      	add	r3, r2
 802b940:	653b      	str	r3, [r7, #80]	; 0x50
 802b942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b944:	ea4f 3333 	mov.w	r3, r3, ror #12
 802b948:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b94a:	4413      	add	r3, r2
 802b94c:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  9,  5, 0x21E1CDE6 );
 802b94e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b952:	405a      	eors	r2, r3
 802b954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b956:	401a      	ands	r2, r3
 802b958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b95a:	405a      	eors	r2, r3
 802b95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b95e:	441a      	add	r2, r3
 802b960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b962:	441a      	add	r2, r3
 802b964:	4b65      	ldr	r3, [pc, #404]	; (802bafc <mbedtls_internal_md5_process+0x854>)
 802b966:	4413      	add	r3, r2
 802b968:	657b      	str	r3, [r7, #84]	; 0x54
 802b96a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b96c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802b970:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b972:	4413      	add	r3, r2
 802b974:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 14,  9, 0xC33707D6 );
 802b976:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b97a:	405a      	eors	r2, r3
 802b97c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b97e:	401a      	ands	r2, r3
 802b980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b982:	405a      	eors	r2, r3
 802b984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802b986:	441a      	add	r2, r3
 802b988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b98a:	441a      	add	r2, r3
 802b98c:	4b5c      	ldr	r3, [pc, #368]	; (802bb00 <mbedtls_internal_md5_process+0x858>)
 802b98e:	4413      	add	r3, r2
 802b990:	64bb      	str	r3, [r7, #72]	; 0x48
 802b992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b994:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802b998:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b99a:	4413      	add	r3, r2
 802b99c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  3, 14, 0xF4D50D87 );
 802b99e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b9a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b9a2:	405a      	eors	r2, r3
 802b9a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b9a6:	401a      	ands	r2, r3
 802b9a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b9aa:	405a      	eors	r2, r3
 802b9ac:	697b      	ldr	r3, [r7, #20]
 802b9ae:	441a      	add	r2, r3
 802b9b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b9b2:	441a      	add	r2, r3
 802b9b4:	4b53      	ldr	r3, [pc, #332]	; (802bb04 <mbedtls_internal_md5_process+0x85c>)
 802b9b6:	4413      	add	r3, r2
 802b9b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b9ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b9bc:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802b9c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b9c2:	4413      	add	r3, r2
 802b9c4:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  8, 20, 0x455A14ED );
 802b9c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b9c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b9ca:	405a      	eors	r2, r3
 802b9cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b9ce:	401a      	ands	r2, r3
 802b9d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b9d2:	405a      	eors	r2, r3
 802b9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b9d6:	441a      	add	r2, r3
 802b9d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b9da:	441a      	add	r2, r3
 802b9dc:	4b4a      	ldr	r3, [pc, #296]	; (802bb08 <mbedtls_internal_md5_process+0x860>)
 802b9de:	4413      	add	r3, r2
 802b9e0:	653b      	str	r3, [r7, #80]	; 0x50
 802b9e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b9e4:	ea4f 3333 	mov.w	r3, r3, ror #12
 802b9e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b9ea:	4413      	add	r3, r2
 802b9ec:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 13,  5, 0xA9E3E905 );
 802b9ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b9f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b9f2:	405a      	eors	r2, r3
 802b9f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b9f6:	401a      	ands	r2, r3
 802b9f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b9fa:	405a      	eors	r2, r3
 802b9fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802b9fe:	441a      	add	r2, r3
 802ba00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba02:	441a      	add	r2, r3
 802ba04:	4b41      	ldr	r3, [pc, #260]	; (802bb0c <mbedtls_internal_md5_process+0x864>)
 802ba06:	4413      	add	r3, r2
 802ba08:	657b      	str	r3, [r7, #84]	; 0x54
 802ba0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba0c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802ba10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802ba12:	4413      	add	r3, r2
 802ba14:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  2,  9, 0xFCEFA3F8 );
 802ba16:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802ba18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba1a:	405a      	eors	r2, r3
 802ba1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba1e:	401a      	ands	r2, r3
 802ba20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba22:	405a      	eors	r2, r3
 802ba24:	693b      	ldr	r3, [r7, #16]
 802ba26:	441a      	add	r2, r3
 802ba28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba2a:	441a      	add	r2, r3
 802ba2c:	4b38      	ldr	r3, [pc, #224]	; (802bb10 <mbedtls_internal_md5_process+0x868>)
 802ba2e:	4413      	add	r3, r2
 802ba30:	64bb      	str	r3, [r7, #72]	; 0x48
 802ba32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba34:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802ba38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802ba3a:	4413      	add	r3, r2
 802ba3c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  7, 14, 0x676F02D9 );
 802ba3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802ba40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba42:	405a      	eors	r2, r3
 802ba44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba46:	401a      	ands	r2, r3
 802ba48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba4a:	405a      	eors	r2, r3
 802ba4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ba4e:	441a      	add	r2, r3
 802ba50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba52:	441a      	add	r2, r3
 802ba54:	4b2f      	ldr	r3, [pc, #188]	; (802bb14 <mbedtls_internal_md5_process+0x86c>)
 802ba56:	4413      	add	r3, r2
 802ba58:	64fb      	str	r3, [r7, #76]	; 0x4c
 802ba5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba5c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802ba60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802ba62:	4413      	add	r3, r2
 802ba64:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 12, 20, 0x8D2A4C8A );
 802ba66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802ba68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba6a:	405a      	eors	r2, r3
 802ba6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba6e:	401a      	ands	r2, r3
 802ba70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba72:	405a      	eors	r2, r3
 802ba74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ba76:	441a      	add	r2, r3
 802ba78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba7a:	441a      	add	r2, r3
 802ba7c:	4b26      	ldr	r3, [pc, #152]	; (802bb18 <mbedtls_internal_md5_process+0x870>)
 802ba7e:	4413      	add	r3, r2
 802ba80:	653b      	str	r3, [r7, #80]	; 0x50
 802ba82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba84:	ea4f 3333 	mov.w	r3, r3, ror #12
 802ba88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802ba8a:	4413      	add	r3, r2
 802ba8c:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))

    P( A, B, C, D,  5,  4, 0xFFFA3942 );
 802ba8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802ba90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba92:	405a      	eors	r2, r3
 802ba94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba96:	405a      	eors	r2, r3
 802ba98:	69fb      	ldr	r3, [r7, #28]
 802ba9a:	441a      	add	r2, r3
 802ba9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba9e:	4413      	add	r3, r2
 802baa0:	f5a3 23b8 	sub.w	r3, r3, #376832	; 0x5c000
 802baa4:	f2a3 63be 	subw	r3, r3, #1726	; 0x6be
 802baa8:	657b      	str	r3, [r7, #84]	; 0x54
 802baaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802baac:	ea4f 7333 	mov.w	r3, r3, ror #28
 802bab0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bab2:	4413      	add	r3, r2
 802bab4:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  8, 11, 0x8771F681 );
 802bab6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802baba:	405a      	eors	r2, r3
 802babc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802babe:	405a      	eors	r2, r3
 802bac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bac2:	441a      	add	r2, r3
 802bac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bac6:	441a      	add	r2, r3
 802bac8:	4b14      	ldr	r3, [pc, #80]	; (802bb1c <mbedtls_internal_md5_process+0x874>)
 802baca:	4413      	add	r3, r2
 802bacc:	64bb      	str	r3, [r7, #72]	; 0x48
 802bace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bad0:	ea4f 5373 	mov.w	r3, r3, ror #21
 802bad4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bad6:	4413      	add	r3, r2
 802bad8:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 11, 16, 0x6D9D6122 );
 802bada:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802badc:	e020      	b.n	802bb20 <mbedtls_internal_md5_process+0x878>
 802bade:	bf00      	nop
 802bae0:	c040b340 	.word	0xc040b340
 802bae4:	265e5a51 	.word	0x265e5a51
 802bae8:	e9b6c7aa 	.word	0xe9b6c7aa
 802baec:	d62f105d 	.word	0xd62f105d
 802baf0:	02441453 	.word	0x02441453
 802baf4:	d8a1e681 	.word	0xd8a1e681
 802baf8:	e7d3fbc8 	.word	0xe7d3fbc8
 802bafc:	21e1cde6 	.word	0x21e1cde6
 802bb00:	c33707d6 	.word	0xc33707d6
 802bb04:	f4d50d87 	.word	0xf4d50d87
 802bb08:	455a14ed 	.word	0x455a14ed
 802bb0c:	a9e3e905 	.word	0xa9e3e905
 802bb10:	fcefa3f8 	.word	0xfcefa3f8
 802bb14:	676f02d9 	.word	0x676f02d9
 802bb18:	8d2a4c8a 	.word	0x8d2a4c8a
 802bb1c:	8771f681 	.word	0x8771f681
 802bb20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb22:	405a      	eors	r2, r3
 802bb24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb26:	405a      	eors	r2, r3
 802bb28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802bb2a:	441a      	add	r2, r3
 802bb2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb2e:	441a      	add	r2, r3
 802bb30:	4ba4      	ldr	r3, [pc, #656]	; (802bdc4 <mbedtls_internal_md5_process+0xb1c>)
 802bb32:	4413      	add	r3, r2
 802bb34:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bb36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb38:	ea4f 4333 	mov.w	r3, r3, ror #16
 802bb3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bb3e:	4413      	add	r3, r2
 802bb40:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 14, 23, 0xFDE5380C );
 802bb42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bb44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb46:	405a      	eors	r2, r3
 802bb48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb4a:	405a      	eors	r2, r3
 802bb4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802bb4e:	441a      	add	r2, r3
 802bb50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb52:	441a      	add	r2, r3
 802bb54:	4b9c      	ldr	r3, [pc, #624]	; (802bdc8 <mbedtls_internal_md5_process+0xb20>)
 802bb56:	4413      	add	r3, r2
 802bb58:	653b      	str	r3, [r7, #80]	; 0x50
 802bb5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb5c:	ea4f 2373 	mov.w	r3, r3, ror #9
 802bb60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bb62:	4413      	add	r3, r2
 802bb64:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  1,  4, 0xA4BEEA44 );
 802bb66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bb68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb6a:	405a      	eors	r2, r3
 802bb6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb6e:	405a      	eors	r2, r3
 802bb70:	68fb      	ldr	r3, [r7, #12]
 802bb72:	441a      	add	r2, r3
 802bb74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb76:	441a      	add	r2, r3
 802bb78:	4b94      	ldr	r3, [pc, #592]	; (802bdcc <mbedtls_internal_md5_process+0xb24>)
 802bb7a:	4413      	add	r3, r2
 802bb7c:	657b      	str	r3, [r7, #84]	; 0x54
 802bb7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb80:	ea4f 7333 	mov.w	r3, r3, ror #28
 802bb84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bb86:	4413      	add	r3, r2
 802bb88:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  4, 11, 0x4BDECFA9 );
 802bb8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bb8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb8e:	405a      	eors	r2, r3
 802bb90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb92:	405a      	eors	r2, r3
 802bb94:	69bb      	ldr	r3, [r7, #24]
 802bb96:	441a      	add	r2, r3
 802bb98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb9a:	441a      	add	r2, r3
 802bb9c:	4b8c      	ldr	r3, [pc, #560]	; (802bdd0 <mbedtls_internal_md5_process+0xb28>)
 802bb9e:	4413      	add	r3, r2
 802bba0:	64bb      	str	r3, [r7, #72]	; 0x48
 802bba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bba4:	ea4f 5373 	mov.w	r3, r3, ror #21
 802bba8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bbaa:	4413      	add	r3, r2
 802bbac:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  7, 16, 0xF6BB4B60 );
 802bbae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bbb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bbb2:	405a      	eors	r2, r3
 802bbb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bbb6:	405a      	eors	r2, r3
 802bbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bbba:	441a      	add	r2, r3
 802bbbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bbbe:	441a      	add	r2, r3
 802bbc0:	4b84      	ldr	r3, [pc, #528]	; (802bdd4 <mbedtls_internal_md5_process+0xb2c>)
 802bbc2:	4413      	add	r3, r2
 802bbc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bbc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bbc8:	ea4f 4333 	mov.w	r3, r3, ror #16
 802bbcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bbce:	4413      	add	r3, r2
 802bbd0:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 10, 23, 0xBEBFBC70 );
 802bbd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bbd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bbd6:	405a      	eors	r2, r3
 802bbd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bbda:	405a      	eors	r2, r3
 802bbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802bbde:	441a      	add	r2, r3
 802bbe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bbe2:	441a      	add	r2, r3
 802bbe4:	4b7c      	ldr	r3, [pc, #496]	; (802bdd8 <mbedtls_internal_md5_process+0xb30>)
 802bbe6:	4413      	add	r3, r2
 802bbe8:	653b      	str	r3, [r7, #80]	; 0x50
 802bbea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bbec:	ea4f 2373 	mov.w	r3, r3, ror #9
 802bbf0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bbf2:	4413      	add	r3, r2
 802bbf4:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 13,  4, 0x289B7EC6 );
 802bbf6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bbf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bbfa:	405a      	eors	r2, r3
 802bbfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bbfe:	405a      	eors	r2, r3
 802bc00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802bc02:	441a      	add	r2, r3
 802bc04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc06:	441a      	add	r2, r3
 802bc08:	4b74      	ldr	r3, [pc, #464]	; (802bddc <mbedtls_internal_md5_process+0xb34>)
 802bc0a:	4413      	add	r3, r2
 802bc0c:	657b      	str	r3, [r7, #84]	; 0x54
 802bc0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc10:	ea4f 7333 	mov.w	r3, r3, ror #28
 802bc14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bc16:	4413      	add	r3, r2
 802bc18:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  0, 11, 0xEAA127FA );
 802bc1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bc1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc1e:	405a      	eors	r2, r3
 802bc20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc22:	405a      	eors	r2, r3
 802bc24:	68bb      	ldr	r3, [r7, #8]
 802bc26:	441a      	add	r2, r3
 802bc28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc2a:	441a      	add	r2, r3
 802bc2c:	4b6c      	ldr	r3, [pc, #432]	; (802bde0 <mbedtls_internal_md5_process+0xb38>)
 802bc2e:	4413      	add	r3, r2
 802bc30:	64bb      	str	r3, [r7, #72]	; 0x48
 802bc32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc34:	ea4f 5373 	mov.w	r3, r3, ror #21
 802bc38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bc3a:	4413      	add	r3, r2
 802bc3c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  3, 16, 0xD4EF3085 );
 802bc3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bc40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc42:	405a      	eors	r2, r3
 802bc44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc46:	405a      	eors	r2, r3
 802bc48:	697b      	ldr	r3, [r7, #20]
 802bc4a:	441a      	add	r2, r3
 802bc4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc4e:	441a      	add	r2, r3
 802bc50:	4b64      	ldr	r3, [pc, #400]	; (802bde4 <mbedtls_internal_md5_process+0xb3c>)
 802bc52:	4413      	add	r3, r2
 802bc54:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bc56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc58:	ea4f 4333 	mov.w	r3, r3, ror #16
 802bc5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bc5e:	4413      	add	r3, r2
 802bc60:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  6, 23, 0x04881D05 );
 802bc62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bc64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc66:	405a      	eors	r2, r3
 802bc68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc6a:	405a      	eors	r2, r3
 802bc6c:	6a3b      	ldr	r3, [r7, #32]
 802bc6e:	441a      	add	r2, r3
 802bc70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc72:	441a      	add	r2, r3
 802bc74:	4b5c      	ldr	r3, [pc, #368]	; (802bde8 <mbedtls_internal_md5_process+0xb40>)
 802bc76:	4413      	add	r3, r2
 802bc78:	653b      	str	r3, [r7, #80]	; 0x50
 802bc7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc7c:	ea4f 2373 	mov.w	r3, r3, ror #9
 802bc80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bc82:	4413      	add	r3, r2
 802bc84:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  9,  4, 0xD9D4D039 );
 802bc86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bc88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc8a:	405a      	eors	r2, r3
 802bc8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc8e:	405a      	eors	r2, r3
 802bc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802bc92:	441a      	add	r2, r3
 802bc94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc96:	441a      	add	r2, r3
 802bc98:	4b54      	ldr	r3, [pc, #336]	; (802bdec <mbedtls_internal_md5_process+0xb44>)
 802bc9a:	4413      	add	r3, r2
 802bc9c:	657b      	str	r3, [r7, #84]	; 0x54
 802bc9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bca0:	ea4f 7333 	mov.w	r3, r3, ror #28
 802bca4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bca6:	4413      	add	r3, r2
 802bca8:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 12, 11, 0xE6DB99E5 );
 802bcaa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bcac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bcae:	405a      	eors	r2, r3
 802bcb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bcb2:	405a      	eors	r2, r3
 802bcb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802bcb6:	441a      	add	r2, r3
 802bcb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bcba:	441a      	add	r2, r3
 802bcbc:	4b4c      	ldr	r3, [pc, #304]	; (802bdf0 <mbedtls_internal_md5_process+0xb48>)
 802bcbe:	4413      	add	r3, r2
 802bcc0:	64bb      	str	r3, [r7, #72]	; 0x48
 802bcc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bcc4:	ea4f 5373 	mov.w	r3, r3, ror #21
 802bcc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bcca:	4413      	add	r3, r2
 802bccc:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 15, 16, 0x1FA27CF8 );
 802bcce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bcd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bcd2:	405a      	eors	r2, r3
 802bcd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bcd6:	405a      	eors	r2, r3
 802bcd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802bcda:	441a      	add	r2, r3
 802bcdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bcde:	441a      	add	r2, r3
 802bce0:	4b44      	ldr	r3, [pc, #272]	; (802bdf4 <mbedtls_internal_md5_process+0xb4c>)
 802bce2:	4413      	add	r3, r2
 802bce4:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bce8:	ea4f 4333 	mov.w	r3, r3, ror #16
 802bcec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bcee:	4413      	add	r3, r2
 802bcf0:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  2, 23, 0xC4AC5665 );
 802bcf2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bcf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bcf6:	405a      	eors	r2, r3
 802bcf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bcfa:	405a      	eors	r2, r3
 802bcfc:	693b      	ldr	r3, [r7, #16]
 802bcfe:	441a      	add	r2, r3
 802bd00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bd02:	441a      	add	r2, r3
 802bd04:	4b3c      	ldr	r3, [pc, #240]	; (802bdf8 <mbedtls_internal_md5_process+0xb50>)
 802bd06:	4413      	add	r3, r2
 802bd08:	653b      	str	r3, [r7, #80]	; 0x50
 802bd0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bd0c:	ea4f 2373 	mov.w	r3, r3, ror #9
 802bd10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bd12:	4413      	add	r3, r2
 802bd14:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) ((y) ^ ((x) | ~(z)))

    P( A, B, C, D,  0,  6, 0xF4292244 );
 802bd16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd18:	43da      	mvns	r2, r3
 802bd1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bd1c:	431a      	orrs	r2, r3
 802bd1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bd20:	405a      	eors	r2, r3
 802bd22:	68bb      	ldr	r3, [r7, #8]
 802bd24:	441a      	add	r2, r3
 802bd26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bd28:	441a      	add	r2, r3
 802bd2a:	4b34      	ldr	r3, [pc, #208]	; (802bdfc <mbedtls_internal_md5_process+0xb54>)
 802bd2c:	4413      	add	r3, r2
 802bd2e:	657b      	str	r3, [r7, #84]	; 0x54
 802bd30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bd32:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802bd36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bd38:	4413      	add	r3, r2
 802bd3a:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  7, 10, 0x432AFF97 );
 802bd3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bd3e:	43da      	mvns	r2, r3
 802bd40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bd42:	431a      	orrs	r2, r3
 802bd44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bd46:	405a      	eors	r2, r3
 802bd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bd4a:	441a      	add	r2, r3
 802bd4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd4e:	441a      	add	r2, r3
 802bd50:	4b2b      	ldr	r3, [pc, #172]	; (802be00 <mbedtls_internal_md5_process+0xb58>)
 802bd52:	4413      	add	r3, r2
 802bd54:	64bb      	str	r3, [r7, #72]	; 0x48
 802bd56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd58:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802bd5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bd5e:	4413      	add	r3, r2
 802bd60:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 14, 15, 0xAB9423A7 );
 802bd62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bd64:	43da      	mvns	r2, r3
 802bd66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd68:	431a      	orrs	r2, r3
 802bd6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bd6c:	405a      	eors	r2, r3
 802bd6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802bd70:	441a      	add	r2, r3
 802bd72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bd74:	441a      	add	r2, r3
 802bd76:	4b23      	ldr	r3, [pc, #140]	; (802be04 <mbedtls_internal_md5_process+0xb5c>)
 802bd78:	4413      	add	r3, r2
 802bd7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bd7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bd7e:	ea4f 4373 	mov.w	r3, r3, ror #17
 802bd82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bd84:	4413      	add	r3, r2
 802bd86:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  5, 21, 0xFC93A039 );
 802bd88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bd8a:	43da      	mvns	r2, r3
 802bd8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bd8e:	431a      	orrs	r2, r3
 802bd90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd92:	405a      	eors	r2, r3
 802bd94:	69fb      	ldr	r3, [r7, #28]
 802bd96:	441a      	add	r2, r3
 802bd98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bd9a:	441a      	add	r2, r3
 802bd9c:	4b1a      	ldr	r3, [pc, #104]	; (802be08 <mbedtls_internal_md5_process+0xb60>)
 802bd9e:	4413      	add	r3, r2
 802bda0:	653b      	str	r3, [r7, #80]	; 0x50
 802bda2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bda4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802bda8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bdaa:	4413      	add	r3, r2
 802bdac:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 12,  6, 0x655B59C3 );
 802bdae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bdb0:	43da      	mvns	r2, r3
 802bdb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bdb4:	431a      	orrs	r2, r3
 802bdb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bdb8:	405a      	eors	r2, r3
 802bdba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802bdbc:	441a      	add	r2, r3
 802bdbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bdc0:	e024      	b.n	802be0c <mbedtls_internal_md5_process+0xb64>
 802bdc2:	bf00      	nop
 802bdc4:	6d9d6122 	.word	0x6d9d6122
 802bdc8:	fde5380c 	.word	0xfde5380c
 802bdcc:	a4beea44 	.word	0xa4beea44
 802bdd0:	4bdecfa9 	.word	0x4bdecfa9
 802bdd4:	f6bb4b60 	.word	0xf6bb4b60
 802bdd8:	bebfbc70 	.word	0xbebfbc70
 802bddc:	289b7ec6 	.word	0x289b7ec6
 802bde0:	eaa127fa 	.word	0xeaa127fa
 802bde4:	d4ef3085 	.word	0xd4ef3085
 802bde8:	04881d05 	.word	0x04881d05
 802bdec:	d9d4d039 	.word	0xd9d4d039
 802bdf0:	e6db99e5 	.word	0xe6db99e5
 802bdf4:	1fa27cf8 	.word	0x1fa27cf8
 802bdf8:	c4ac5665 	.word	0xc4ac5665
 802bdfc:	f4292244 	.word	0xf4292244
 802be00:	432aff97 	.word	0x432aff97
 802be04:	ab9423a7 	.word	0xab9423a7
 802be08:	fc93a039 	.word	0xfc93a039
 802be0c:	441a      	add	r2, r3
 802be0e:	4b7d      	ldr	r3, [pc, #500]	; (802c004 <mbedtls_internal_md5_process+0xd5c>)
 802be10:	4413      	add	r3, r2
 802be12:	657b      	str	r3, [r7, #84]	; 0x54
 802be14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802be16:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802be1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802be1c:	4413      	add	r3, r2
 802be1e:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  3, 10, 0x8F0CCC92 );
 802be20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802be22:	43da      	mvns	r2, r3
 802be24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802be26:	431a      	orrs	r2, r3
 802be28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802be2a:	405a      	eors	r2, r3
 802be2c:	697b      	ldr	r3, [r7, #20]
 802be2e:	441a      	add	r2, r3
 802be30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802be32:	441a      	add	r2, r3
 802be34:	4b74      	ldr	r3, [pc, #464]	; (802c008 <mbedtls_internal_md5_process+0xd60>)
 802be36:	4413      	add	r3, r2
 802be38:	64bb      	str	r3, [r7, #72]	; 0x48
 802be3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802be3c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802be40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802be42:	4413      	add	r3, r2
 802be44:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 10, 15, 0xFFEFF47D );
 802be46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802be48:	43da      	mvns	r2, r3
 802be4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802be4c:	431a      	orrs	r2, r3
 802be4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802be50:	405a      	eors	r2, r3
 802be52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802be54:	441a      	add	r2, r3
 802be56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802be58:	4413      	add	r3, r2
 802be5a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802be5e:	f6a3 3383 	subw	r3, r3, #2947	; 0xb83
 802be62:	64fb      	str	r3, [r7, #76]	; 0x4c
 802be64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802be66:	ea4f 4373 	mov.w	r3, r3, ror #17
 802be6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802be6c:	4413      	add	r3, r2
 802be6e:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  1, 21, 0x85845DD1 );
 802be70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802be72:	43da      	mvns	r2, r3
 802be74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802be76:	431a      	orrs	r2, r3
 802be78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802be7a:	405a      	eors	r2, r3
 802be7c:	68fb      	ldr	r3, [r7, #12]
 802be7e:	441a      	add	r2, r3
 802be80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802be82:	441a      	add	r2, r3
 802be84:	4b61      	ldr	r3, [pc, #388]	; (802c00c <mbedtls_internal_md5_process+0xd64>)
 802be86:	4413      	add	r3, r2
 802be88:	653b      	str	r3, [r7, #80]	; 0x50
 802be8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802be8c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802be90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802be92:	4413      	add	r3, r2
 802be94:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  8,  6, 0x6FA87E4F );
 802be96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802be98:	43da      	mvns	r2, r3
 802be9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802be9c:	431a      	orrs	r2, r3
 802be9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bea0:	405a      	eors	r2, r3
 802bea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bea4:	441a      	add	r2, r3
 802bea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bea8:	441a      	add	r2, r3
 802beaa:	4b59      	ldr	r3, [pc, #356]	; (802c010 <mbedtls_internal_md5_process+0xd68>)
 802beac:	4413      	add	r3, r2
 802beae:	657b      	str	r3, [r7, #84]	; 0x54
 802beb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802beb2:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802beb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802beb8:	4413      	add	r3, r2
 802beba:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 15, 10, 0xFE2CE6E0 );
 802bebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bebe:	43da      	mvns	r2, r3
 802bec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bec2:	431a      	orrs	r2, r3
 802bec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bec6:	405a      	eors	r2, r3
 802bec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802beca:	441a      	add	r2, r3
 802becc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bece:	441a      	add	r2, r3
 802bed0:	4b50      	ldr	r3, [pc, #320]	; (802c014 <mbedtls_internal_md5_process+0xd6c>)
 802bed2:	4413      	add	r3, r2
 802bed4:	64bb      	str	r3, [r7, #72]	; 0x48
 802bed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bed8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802bedc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bede:	4413      	add	r3, r2
 802bee0:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  6, 15, 0xA3014314 );
 802bee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bee4:	43da      	mvns	r2, r3
 802bee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bee8:	431a      	orrs	r2, r3
 802beea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802beec:	405a      	eors	r2, r3
 802beee:	6a3b      	ldr	r3, [r7, #32]
 802bef0:	441a      	add	r2, r3
 802bef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bef4:	441a      	add	r2, r3
 802bef6:	4b48      	ldr	r3, [pc, #288]	; (802c018 <mbedtls_internal_md5_process+0xd70>)
 802bef8:	4413      	add	r3, r2
 802befa:	64fb      	str	r3, [r7, #76]	; 0x4c
 802befc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802befe:	ea4f 4373 	mov.w	r3, r3, ror #17
 802bf02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bf04:	4413      	add	r3, r2
 802bf06:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 13, 21, 0x4E0811A1 );
 802bf08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bf0a:	43da      	mvns	r2, r3
 802bf0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bf0e:	431a      	orrs	r2, r3
 802bf10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bf12:	405a      	eors	r2, r3
 802bf14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802bf16:	441a      	add	r2, r3
 802bf18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bf1a:	441a      	add	r2, r3
 802bf1c:	4b3f      	ldr	r3, [pc, #252]	; (802c01c <mbedtls_internal_md5_process+0xd74>)
 802bf1e:	4413      	add	r3, r2
 802bf20:	653b      	str	r3, [r7, #80]	; 0x50
 802bf22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bf24:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802bf28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bf2a:	4413      	add	r3, r2
 802bf2c:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  4,  6, 0xF7537E82 );
 802bf2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bf30:	43da      	mvns	r2, r3
 802bf32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bf34:	431a      	orrs	r2, r3
 802bf36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bf38:	405a      	eors	r2, r3
 802bf3a:	69bb      	ldr	r3, [r7, #24]
 802bf3c:	441a      	add	r2, r3
 802bf3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bf40:	441a      	add	r2, r3
 802bf42:	4b37      	ldr	r3, [pc, #220]	; (802c020 <mbedtls_internal_md5_process+0xd78>)
 802bf44:	4413      	add	r3, r2
 802bf46:	657b      	str	r3, [r7, #84]	; 0x54
 802bf48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bf4a:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802bf4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bf50:	4413      	add	r3, r2
 802bf52:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 11, 10, 0xBD3AF235 );
 802bf54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bf56:	43da      	mvns	r2, r3
 802bf58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bf5a:	431a      	orrs	r2, r3
 802bf5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bf5e:	405a      	eors	r2, r3
 802bf60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802bf62:	441a      	add	r2, r3
 802bf64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bf66:	441a      	add	r2, r3
 802bf68:	4b2e      	ldr	r3, [pc, #184]	; (802c024 <mbedtls_internal_md5_process+0xd7c>)
 802bf6a:	4413      	add	r3, r2
 802bf6c:	64bb      	str	r3, [r7, #72]	; 0x48
 802bf6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bf70:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802bf74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bf76:	4413      	add	r3, r2
 802bf78:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  2, 15, 0x2AD7D2BB );
 802bf7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bf7c:	43da      	mvns	r2, r3
 802bf7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bf80:	431a      	orrs	r2, r3
 802bf82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bf84:	405a      	eors	r2, r3
 802bf86:	693b      	ldr	r3, [r7, #16]
 802bf88:	441a      	add	r2, r3
 802bf8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bf8c:	441a      	add	r2, r3
 802bf8e:	4b26      	ldr	r3, [pc, #152]	; (802c028 <mbedtls_internal_md5_process+0xd80>)
 802bf90:	4413      	add	r3, r2
 802bf92:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bf94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bf96:	ea4f 4373 	mov.w	r3, r3, ror #17
 802bf9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bf9c:	4413      	add	r3, r2
 802bf9e:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  9, 21, 0xEB86D391 );
 802bfa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bfa2:	43da      	mvns	r2, r3
 802bfa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bfa6:	431a      	orrs	r2, r3
 802bfa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bfaa:	405a      	eors	r2, r3
 802bfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802bfae:	441a      	add	r2, r3
 802bfb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bfb2:	441a      	add	r2, r3
 802bfb4:	4b1d      	ldr	r3, [pc, #116]	; (802c02c <mbedtls_internal_md5_process+0xd84>)
 802bfb6:	4413      	add	r3, r2
 802bfb8:	653b      	str	r3, [r7, #80]	; 0x50
 802bfba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bfbc:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802bfc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bfc2:	4413      	add	r3, r2
 802bfc4:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

    ctx->state[0] += A;
 802bfc6:	687b      	ldr	r3, [r7, #4]
 802bfc8:	689a      	ldr	r2, [r3, #8]
 802bfca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bfcc:	441a      	add	r2, r3
 802bfce:	687b      	ldr	r3, [r7, #4]
 802bfd0:	609a      	str	r2, [r3, #8]
    ctx->state[1] += B;
 802bfd2:	687b      	ldr	r3, [r7, #4]
 802bfd4:	68da      	ldr	r2, [r3, #12]
 802bfd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bfd8:	441a      	add	r2, r3
 802bfda:	687b      	ldr	r3, [r7, #4]
 802bfdc:	60da      	str	r2, [r3, #12]
    ctx->state[2] += C;
 802bfde:	687b      	ldr	r3, [r7, #4]
 802bfe0:	691a      	ldr	r2, [r3, #16]
 802bfe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bfe4:	441a      	add	r2, r3
 802bfe6:	687b      	ldr	r3, [r7, #4]
 802bfe8:	611a      	str	r2, [r3, #16]
    ctx->state[3] += D;
 802bfea:	687b      	ldr	r3, [r7, #4]
 802bfec:	695a      	ldr	r2, [r3, #20]
 802bfee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bff0:	441a      	add	r2, r3
 802bff2:	687b      	ldr	r3, [r7, #4]
 802bff4:	615a      	str	r2, [r3, #20]

    return( 0 );
 802bff6:	2300      	movs	r3, #0
}
 802bff8:	4618      	mov	r0, r3
 802bffa:	375c      	adds	r7, #92	; 0x5c
 802bffc:	46bd      	mov	sp, r7
 802bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c002:	4770      	bx	lr
 802c004:	655b59c3 	.word	0x655b59c3
 802c008:	8f0ccc92 	.word	0x8f0ccc92
 802c00c:	85845dd1 	.word	0x85845dd1
 802c010:	6fa87e4f 	.word	0x6fa87e4f
 802c014:	fe2ce6e0 	.word	0xfe2ce6e0
 802c018:	a3014314 	.word	0xa3014314
 802c01c:	4e0811a1 	.word	0x4e0811a1
 802c020:	f7537e82 	.word	0xf7537e82
 802c024:	bd3af235 	.word	0xbd3af235
 802c028:	2ad7d2bb 	.word	0x2ad7d2bb
 802c02c:	eb86d391 	.word	0xeb86d391

0802c030 <mbedtls_md5_update_ret>:
 * MD5 process buffer
 */
int mbedtls_md5_update_ret( mbedtls_md5_context *ctx,
                            const unsigned char *input,
                            size_t ilen )
{
 802c030:	b580      	push	{r7, lr}
 802c032:	b088      	sub	sp, #32
 802c034:	af00      	add	r7, sp, #0
 802c036:	60f8      	str	r0, [r7, #12]
 802c038:	60b9      	str	r1, [r7, #8]
 802c03a:	607a      	str	r2, [r7, #4]
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 802c03c:	687b      	ldr	r3, [r7, #4]
 802c03e:	2b00      	cmp	r3, #0
 802c040:	d101      	bne.n	802c046 <mbedtls_md5_update_ret+0x16>
        return( 0 );
 802c042:	2300      	movs	r3, #0
 802c044:	e065      	b.n	802c112 <mbedtls_md5_update_ret+0xe2>

    left = ctx->total[0] & 0x3F;
 802c046:	68fb      	ldr	r3, [r7, #12]
 802c048:	681b      	ldr	r3, [r3, #0]
 802c04a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802c04e:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 802c050:	69fb      	ldr	r3, [r7, #28]
 802c052:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 802c056:	61bb      	str	r3, [r7, #24]

    ctx->total[0] += (uint32_t) ilen;
 802c058:	68fb      	ldr	r3, [r7, #12]
 802c05a:	681a      	ldr	r2, [r3, #0]
 802c05c:	687b      	ldr	r3, [r7, #4]
 802c05e:	441a      	add	r2, r3
 802c060:	68fb      	ldr	r3, [r7, #12]
 802c062:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 802c064:	68fb      	ldr	r3, [r7, #12]
 802c066:	681a      	ldr	r2, [r3, #0]
 802c068:	68fb      	ldr	r3, [r7, #12]
 802c06a:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (uint32_t) ilen )
 802c06c:	68fb      	ldr	r3, [r7, #12]
 802c06e:	681b      	ldr	r3, [r3, #0]
 802c070:	687a      	ldr	r2, [r7, #4]
 802c072:	429a      	cmp	r2, r3
 802c074:	d904      	bls.n	802c080 <mbedtls_md5_update_ret+0x50>
        ctx->total[1]++;
 802c076:	68fb      	ldr	r3, [r7, #12]
 802c078:	685b      	ldr	r3, [r3, #4]
 802c07a:	1c5a      	adds	r2, r3, #1
 802c07c:	68fb      	ldr	r3, [r7, #12]
 802c07e:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
 802c080:	69fb      	ldr	r3, [r7, #28]
 802c082:	2b00      	cmp	r3, #0
 802c084:	d034      	beq.n	802c0f0 <mbedtls_md5_update_ret+0xc0>
 802c086:	687a      	ldr	r2, [r7, #4]
 802c088:	69bb      	ldr	r3, [r7, #24]
 802c08a:	429a      	cmp	r2, r3
 802c08c:	d330      	bcc.n	802c0f0 <mbedtls_md5_update_ret+0xc0>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 802c08e:	68fb      	ldr	r3, [r7, #12]
 802c090:	f103 0218 	add.w	r2, r3, #24
 802c094:	69fb      	ldr	r3, [r7, #28]
 802c096:	4413      	add	r3, r2
 802c098:	69ba      	ldr	r2, [r7, #24]
 802c09a:	68b9      	ldr	r1, [r7, #8]
 802c09c:	4618      	mov	r0, r3
 802c09e:	f001 fcea 	bl	802da76 <memcpy>
        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 802c0a2:	68fb      	ldr	r3, [r7, #12]
 802c0a4:	3318      	adds	r3, #24
 802c0a6:	4619      	mov	r1, r3
 802c0a8:	68f8      	ldr	r0, [r7, #12]
 802c0aa:	f7ff f8fd 	bl	802b2a8 <mbedtls_internal_md5_process>
 802c0ae:	6178      	str	r0, [r7, #20]
 802c0b0:	697b      	ldr	r3, [r7, #20]
 802c0b2:	2b00      	cmp	r3, #0
 802c0b4:	d001      	beq.n	802c0ba <mbedtls_md5_update_ret+0x8a>
            return( ret );
 802c0b6:	697b      	ldr	r3, [r7, #20]
 802c0b8:	e02b      	b.n	802c112 <mbedtls_md5_update_ret+0xe2>

        input += fill;
 802c0ba:	68ba      	ldr	r2, [r7, #8]
 802c0bc:	69bb      	ldr	r3, [r7, #24]
 802c0be:	4413      	add	r3, r2
 802c0c0:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 802c0c2:	687a      	ldr	r2, [r7, #4]
 802c0c4:	69bb      	ldr	r3, [r7, #24]
 802c0c6:	1ad3      	subs	r3, r2, r3
 802c0c8:	607b      	str	r3, [r7, #4]
        left = 0;
 802c0ca:	2300      	movs	r3, #0
 802c0cc:	61fb      	str	r3, [r7, #28]
    }

    while( ilen >= 64 )
 802c0ce:	e00f      	b.n	802c0f0 <mbedtls_md5_update_ret+0xc0>
    {
        if( ( ret = mbedtls_internal_md5_process( ctx, input ) ) != 0 )
 802c0d0:	68b9      	ldr	r1, [r7, #8]
 802c0d2:	68f8      	ldr	r0, [r7, #12]
 802c0d4:	f7ff f8e8 	bl	802b2a8 <mbedtls_internal_md5_process>
 802c0d8:	6178      	str	r0, [r7, #20]
 802c0da:	697b      	ldr	r3, [r7, #20]
 802c0dc:	2b00      	cmp	r3, #0
 802c0de:	d001      	beq.n	802c0e4 <mbedtls_md5_update_ret+0xb4>
            return( ret );
 802c0e0:	697b      	ldr	r3, [r7, #20]
 802c0e2:	e016      	b.n	802c112 <mbedtls_md5_update_ret+0xe2>

        input += 64;
 802c0e4:	68bb      	ldr	r3, [r7, #8]
 802c0e6:	3340      	adds	r3, #64	; 0x40
 802c0e8:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 802c0ea:	687b      	ldr	r3, [r7, #4]
 802c0ec:	3b40      	subs	r3, #64	; 0x40
 802c0ee:	607b      	str	r3, [r7, #4]
    while( ilen >= 64 )
 802c0f0:	687b      	ldr	r3, [r7, #4]
 802c0f2:	2b3f      	cmp	r3, #63	; 0x3f
 802c0f4:	d8ec      	bhi.n	802c0d0 <mbedtls_md5_update_ret+0xa0>
    }

    if( ilen > 0 )
 802c0f6:	687b      	ldr	r3, [r7, #4]
 802c0f8:	2b00      	cmp	r3, #0
 802c0fa:	d009      	beq.n	802c110 <mbedtls_md5_update_ret+0xe0>
    {
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 802c0fc:	68fb      	ldr	r3, [r7, #12]
 802c0fe:	f103 0218 	add.w	r2, r3, #24
 802c102:	69fb      	ldr	r3, [r7, #28]
 802c104:	4413      	add	r3, r2
 802c106:	687a      	ldr	r2, [r7, #4]
 802c108:	68b9      	ldr	r1, [r7, #8]
 802c10a:	4618      	mov	r0, r3
 802c10c:	f001 fcb3 	bl	802da76 <memcpy>
    }

    return( 0 );
 802c110:	2300      	movs	r3, #0
}
 802c112:	4618      	mov	r0, r3
 802c114:	3720      	adds	r7, #32
 802c116:	46bd      	mov	sp, r7
 802c118:	bd80      	pop	{r7, pc}

0802c11a <mbedtls_md5_finish_ret>:
/*
 * MD5 final digest
 */
int mbedtls_md5_finish_ret( mbedtls_md5_context *ctx,
                            unsigned char output[16] )
{
 802c11a:	b580      	push	{r7, lr}
 802c11c:	b086      	sub	sp, #24
 802c11e:	af00      	add	r7, sp, #0
 802c120:	6078      	str	r0, [r7, #4]
 802c122:	6039      	str	r1, [r7, #0]
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 802c124:	687b      	ldr	r3, [r7, #4]
 802c126:	681b      	ldr	r3, [r3, #0]
 802c128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802c12c:	617b      	str	r3, [r7, #20]

    ctx->buffer[used++] = 0x80;
 802c12e:	697b      	ldr	r3, [r7, #20]
 802c130:	1c5a      	adds	r2, r3, #1
 802c132:	617a      	str	r2, [r7, #20]
 802c134:	687a      	ldr	r2, [r7, #4]
 802c136:	4413      	add	r3, r2
 802c138:	2280      	movs	r2, #128	; 0x80
 802c13a:	761a      	strb	r2, [r3, #24]

    if( used <= 56 )
 802c13c:	697b      	ldr	r3, [r7, #20]
 802c13e:	2b38      	cmp	r3, #56	; 0x38
 802c140:	d80c      	bhi.n	802c15c <mbedtls_md5_finish_ret+0x42>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 802c142:	687b      	ldr	r3, [r7, #4]
 802c144:	f103 0218 	add.w	r2, r3, #24
 802c148:	697b      	ldr	r3, [r7, #20]
 802c14a:	18d0      	adds	r0, r2, r3
 802c14c:	697b      	ldr	r3, [r7, #20]
 802c14e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 802c152:	461a      	mov	r2, r3
 802c154:	2100      	movs	r1, #0
 802c156:	f001 fab9 	bl	802d6cc <memset>
 802c15a:	e01e      	b.n	802c19a <mbedtls_md5_finish_ret+0x80>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 802c15c:	687b      	ldr	r3, [r7, #4]
 802c15e:	f103 0218 	add.w	r2, r3, #24
 802c162:	697b      	ldr	r3, [r7, #20]
 802c164:	18d0      	adds	r0, r2, r3
 802c166:	697b      	ldr	r3, [r7, #20]
 802c168:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 802c16c:	461a      	mov	r2, r3
 802c16e:	2100      	movs	r1, #0
 802c170:	f001 faac 	bl	802d6cc <memset>

        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 802c174:	687b      	ldr	r3, [r7, #4]
 802c176:	3318      	adds	r3, #24
 802c178:	4619      	mov	r1, r3
 802c17a:	6878      	ldr	r0, [r7, #4]
 802c17c:	f7ff f894 	bl	802b2a8 <mbedtls_internal_md5_process>
 802c180:	6138      	str	r0, [r7, #16]
 802c182:	693b      	ldr	r3, [r7, #16]
 802c184:	2b00      	cmp	r3, #0
 802c186:	d001      	beq.n	802c18c <mbedtls_md5_finish_ret+0x72>
            return( ret );
 802c188:	693b      	ldr	r3, [r7, #16]
 802c18a:	e0b8      	b.n	802c2fe <mbedtls_md5_finish_ret+0x1e4>

        memset( ctx->buffer, 0, 56 );
 802c18c:	687b      	ldr	r3, [r7, #4]
 802c18e:	3318      	adds	r3, #24
 802c190:	2238      	movs	r2, #56	; 0x38
 802c192:	2100      	movs	r1, #0
 802c194:	4618      	mov	r0, r3
 802c196:	f001 fa99 	bl	802d6cc <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 802c19a:	687b      	ldr	r3, [r7, #4]
 802c19c:	681b      	ldr	r3, [r3, #0]
 802c19e:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 802c1a0:	687b      	ldr	r3, [r7, #4]
 802c1a2:	685b      	ldr	r3, [r3, #4]
 802c1a4:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 802c1a6:	4313      	orrs	r3, r2
 802c1a8:	60fb      	str	r3, [r7, #12]
    low  = ( ctx->total[0] <<  3 );
 802c1aa:	687b      	ldr	r3, [r7, #4]
 802c1ac:	681b      	ldr	r3, [r3, #0]
 802c1ae:	00db      	lsls	r3, r3, #3
 802c1b0:	60bb      	str	r3, [r7, #8]

    PUT_UINT32_LE( low,  ctx->buffer, 56 );
 802c1b2:	68bb      	ldr	r3, [r7, #8]
 802c1b4:	b2da      	uxtb	r2, r3
 802c1b6:	687b      	ldr	r3, [r7, #4]
 802c1b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 802c1bc:	68bb      	ldr	r3, [r7, #8]
 802c1be:	0a1b      	lsrs	r3, r3, #8
 802c1c0:	b2da      	uxtb	r2, r3
 802c1c2:	687b      	ldr	r3, [r7, #4]
 802c1c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 802c1c8:	68bb      	ldr	r3, [r7, #8]
 802c1ca:	0c1b      	lsrs	r3, r3, #16
 802c1cc:	b2da      	uxtb	r2, r3
 802c1ce:	687b      	ldr	r3, [r7, #4]
 802c1d0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 802c1d4:	68bb      	ldr	r3, [r7, #8]
 802c1d6:	0e1b      	lsrs	r3, r3, #24
 802c1d8:	b2da      	uxtb	r2, r3
 802c1da:	687b      	ldr	r3, [r7, #4]
 802c1dc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    PUT_UINT32_LE( high, ctx->buffer, 60 );
 802c1e0:	68fb      	ldr	r3, [r7, #12]
 802c1e2:	b2da      	uxtb	r2, r3
 802c1e4:	687b      	ldr	r3, [r7, #4]
 802c1e6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 802c1ea:	68fb      	ldr	r3, [r7, #12]
 802c1ec:	0a1b      	lsrs	r3, r3, #8
 802c1ee:	b2da      	uxtb	r2, r3
 802c1f0:	687b      	ldr	r3, [r7, #4]
 802c1f2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 802c1f6:	68fb      	ldr	r3, [r7, #12]
 802c1f8:	0c1b      	lsrs	r3, r3, #16
 802c1fa:	b2da      	uxtb	r2, r3
 802c1fc:	687b      	ldr	r3, [r7, #4]
 802c1fe:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 802c202:	68fb      	ldr	r3, [r7, #12]
 802c204:	0e1b      	lsrs	r3, r3, #24
 802c206:	b2da      	uxtb	r2, r3
 802c208:	687b      	ldr	r3, [r7, #4]
 802c20a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

    if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 802c20e:	687b      	ldr	r3, [r7, #4]
 802c210:	3318      	adds	r3, #24
 802c212:	4619      	mov	r1, r3
 802c214:	6878      	ldr	r0, [r7, #4]
 802c216:	f7ff f847 	bl	802b2a8 <mbedtls_internal_md5_process>
 802c21a:	6138      	str	r0, [r7, #16]
 802c21c:	693b      	ldr	r3, [r7, #16]
 802c21e:	2b00      	cmp	r3, #0
 802c220:	d001      	beq.n	802c226 <mbedtls_md5_finish_ret+0x10c>
        return( ret );
 802c222:	693b      	ldr	r3, [r7, #16]
 802c224:	e06b      	b.n	802c2fe <mbedtls_md5_finish_ret+0x1e4>

    /*
     * Output final state
     */
    PUT_UINT32_LE( ctx->state[0], output,  0 );
 802c226:	687b      	ldr	r3, [r7, #4]
 802c228:	689b      	ldr	r3, [r3, #8]
 802c22a:	b2da      	uxtb	r2, r3
 802c22c:	683b      	ldr	r3, [r7, #0]
 802c22e:	701a      	strb	r2, [r3, #0]
 802c230:	687b      	ldr	r3, [r7, #4]
 802c232:	689b      	ldr	r3, [r3, #8]
 802c234:	0a1a      	lsrs	r2, r3, #8
 802c236:	683b      	ldr	r3, [r7, #0]
 802c238:	3301      	adds	r3, #1
 802c23a:	b2d2      	uxtb	r2, r2
 802c23c:	701a      	strb	r2, [r3, #0]
 802c23e:	687b      	ldr	r3, [r7, #4]
 802c240:	689b      	ldr	r3, [r3, #8]
 802c242:	0c1a      	lsrs	r2, r3, #16
 802c244:	683b      	ldr	r3, [r7, #0]
 802c246:	3302      	adds	r3, #2
 802c248:	b2d2      	uxtb	r2, r2
 802c24a:	701a      	strb	r2, [r3, #0]
 802c24c:	687b      	ldr	r3, [r7, #4]
 802c24e:	689b      	ldr	r3, [r3, #8]
 802c250:	0e1a      	lsrs	r2, r3, #24
 802c252:	683b      	ldr	r3, [r7, #0]
 802c254:	3303      	adds	r3, #3
 802c256:	b2d2      	uxtb	r2, r2
 802c258:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[1], output,  4 );
 802c25a:	687b      	ldr	r3, [r7, #4]
 802c25c:	68da      	ldr	r2, [r3, #12]
 802c25e:	683b      	ldr	r3, [r7, #0]
 802c260:	3304      	adds	r3, #4
 802c262:	b2d2      	uxtb	r2, r2
 802c264:	701a      	strb	r2, [r3, #0]
 802c266:	687b      	ldr	r3, [r7, #4]
 802c268:	68db      	ldr	r3, [r3, #12]
 802c26a:	0a1a      	lsrs	r2, r3, #8
 802c26c:	683b      	ldr	r3, [r7, #0]
 802c26e:	3305      	adds	r3, #5
 802c270:	b2d2      	uxtb	r2, r2
 802c272:	701a      	strb	r2, [r3, #0]
 802c274:	687b      	ldr	r3, [r7, #4]
 802c276:	68db      	ldr	r3, [r3, #12]
 802c278:	0c1a      	lsrs	r2, r3, #16
 802c27a:	683b      	ldr	r3, [r7, #0]
 802c27c:	3306      	adds	r3, #6
 802c27e:	b2d2      	uxtb	r2, r2
 802c280:	701a      	strb	r2, [r3, #0]
 802c282:	687b      	ldr	r3, [r7, #4]
 802c284:	68db      	ldr	r3, [r3, #12]
 802c286:	0e1a      	lsrs	r2, r3, #24
 802c288:	683b      	ldr	r3, [r7, #0]
 802c28a:	3307      	adds	r3, #7
 802c28c:	b2d2      	uxtb	r2, r2
 802c28e:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[2], output,  8 );
 802c290:	687b      	ldr	r3, [r7, #4]
 802c292:	691a      	ldr	r2, [r3, #16]
 802c294:	683b      	ldr	r3, [r7, #0]
 802c296:	3308      	adds	r3, #8
 802c298:	b2d2      	uxtb	r2, r2
 802c29a:	701a      	strb	r2, [r3, #0]
 802c29c:	687b      	ldr	r3, [r7, #4]
 802c29e:	691b      	ldr	r3, [r3, #16]
 802c2a0:	0a1a      	lsrs	r2, r3, #8
 802c2a2:	683b      	ldr	r3, [r7, #0]
 802c2a4:	3309      	adds	r3, #9
 802c2a6:	b2d2      	uxtb	r2, r2
 802c2a8:	701a      	strb	r2, [r3, #0]
 802c2aa:	687b      	ldr	r3, [r7, #4]
 802c2ac:	691b      	ldr	r3, [r3, #16]
 802c2ae:	0c1a      	lsrs	r2, r3, #16
 802c2b0:	683b      	ldr	r3, [r7, #0]
 802c2b2:	330a      	adds	r3, #10
 802c2b4:	b2d2      	uxtb	r2, r2
 802c2b6:	701a      	strb	r2, [r3, #0]
 802c2b8:	687b      	ldr	r3, [r7, #4]
 802c2ba:	691b      	ldr	r3, [r3, #16]
 802c2bc:	0e1a      	lsrs	r2, r3, #24
 802c2be:	683b      	ldr	r3, [r7, #0]
 802c2c0:	330b      	adds	r3, #11
 802c2c2:	b2d2      	uxtb	r2, r2
 802c2c4:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[3], output, 12 );
 802c2c6:	687b      	ldr	r3, [r7, #4]
 802c2c8:	695a      	ldr	r2, [r3, #20]
 802c2ca:	683b      	ldr	r3, [r7, #0]
 802c2cc:	330c      	adds	r3, #12
 802c2ce:	b2d2      	uxtb	r2, r2
 802c2d0:	701a      	strb	r2, [r3, #0]
 802c2d2:	687b      	ldr	r3, [r7, #4]
 802c2d4:	695b      	ldr	r3, [r3, #20]
 802c2d6:	0a1a      	lsrs	r2, r3, #8
 802c2d8:	683b      	ldr	r3, [r7, #0]
 802c2da:	330d      	adds	r3, #13
 802c2dc:	b2d2      	uxtb	r2, r2
 802c2de:	701a      	strb	r2, [r3, #0]
 802c2e0:	687b      	ldr	r3, [r7, #4]
 802c2e2:	695b      	ldr	r3, [r3, #20]
 802c2e4:	0c1a      	lsrs	r2, r3, #16
 802c2e6:	683b      	ldr	r3, [r7, #0]
 802c2e8:	330e      	adds	r3, #14
 802c2ea:	b2d2      	uxtb	r2, r2
 802c2ec:	701a      	strb	r2, [r3, #0]
 802c2ee:	687b      	ldr	r3, [r7, #4]
 802c2f0:	695b      	ldr	r3, [r3, #20]
 802c2f2:	0e1a      	lsrs	r2, r3, #24
 802c2f4:	683b      	ldr	r3, [r7, #0]
 802c2f6:	330f      	adds	r3, #15
 802c2f8:	b2d2      	uxtb	r2, r2
 802c2fa:	701a      	strb	r2, [r3, #0]

    return( 0 );
 802c2fc:	2300      	movs	r3, #0
}
 802c2fe:	4618      	mov	r0, r3
 802c300:	3718      	adds	r7, #24
 802c302:	46bd      	mov	sp, r7
 802c304:	bd80      	pop	{r7, pc}
	...

0802c308 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 802c308:	b580      	push	{r7, lr}
 802c30a:	b082      	sub	sp, #8
 802c30c:	af00      	add	r7, sp, #0
 802c30e:	6078      	str	r0, [r7, #4]
 802c310:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 802c312:	4b05      	ldr	r3, [pc, #20]	; (802c328 <mbedtls_platform_zeroize+0x20>)
 802c314:	681b      	ldr	r3, [r3, #0]
 802c316:	683a      	ldr	r2, [r7, #0]
 802c318:	2100      	movs	r1, #0
 802c31a:	6878      	ldr	r0, [r7, #4]
 802c31c:	4798      	blx	r3
}
 802c31e:	bf00      	nop
 802c320:	3708      	adds	r7, #8
 802c322:	46bd      	mov	sp, r7
 802c324:	bd80      	pop	{r7, pc}
 802c326:	bf00      	nop
 802c328:	2000012c 	.word	0x2000012c

0802c32c <__assert_func>:
 802c32c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802c32e:	4614      	mov	r4, r2
 802c330:	461a      	mov	r2, r3
 802c332:	4b09      	ldr	r3, [pc, #36]	; (802c358 <__assert_func+0x2c>)
 802c334:	681b      	ldr	r3, [r3, #0]
 802c336:	4605      	mov	r5, r0
 802c338:	68d8      	ldr	r0, [r3, #12]
 802c33a:	b14c      	cbz	r4, 802c350 <__assert_func+0x24>
 802c33c:	4b07      	ldr	r3, [pc, #28]	; (802c35c <__assert_func+0x30>)
 802c33e:	9100      	str	r1, [sp, #0]
 802c340:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802c344:	4906      	ldr	r1, [pc, #24]	; (802c360 <__assert_func+0x34>)
 802c346:	462b      	mov	r3, r5
 802c348:	f000 fffa 	bl	802d340 <fiprintf>
 802c34c:	f001 fba8 	bl	802daa0 <abort>
 802c350:	4b04      	ldr	r3, [pc, #16]	; (802c364 <__assert_func+0x38>)
 802c352:	461c      	mov	r4, r3
 802c354:	e7f3      	b.n	802c33e <__assert_func+0x12>
 802c356:	bf00      	nop
 802c358:	20000188 	.word	0x20000188
 802c35c:	080347ec 	.word	0x080347ec
 802c360:	080347f9 	.word	0x080347f9
 802c364:	08034827 	.word	0x08034827

0802c368 <_calloc_r>:
 802c368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802c36a:	fba1 2402 	umull	r2, r4, r1, r2
 802c36e:	b94c      	cbnz	r4, 802c384 <_calloc_r+0x1c>
 802c370:	4611      	mov	r1, r2
 802c372:	9201      	str	r2, [sp, #4]
 802c374:	f000 f83e 	bl	802c3f4 <_malloc_r>
 802c378:	9a01      	ldr	r2, [sp, #4]
 802c37a:	4605      	mov	r5, r0
 802c37c:	b930      	cbnz	r0, 802c38c <_calloc_r+0x24>
 802c37e:	4628      	mov	r0, r5
 802c380:	b003      	add	sp, #12
 802c382:	bd30      	pop	{r4, r5, pc}
 802c384:	220c      	movs	r2, #12
 802c386:	6002      	str	r2, [r0, #0]
 802c388:	2500      	movs	r5, #0
 802c38a:	e7f8      	b.n	802c37e <_calloc_r+0x16>
 802c38c:	4621      	mov	r1, r4
 802c38e:	f001 f99d 	bl	802d6cc <memset>
 802c392:	e7f4      	b.n	802c37e <_calloc_r+0x16>

0802c394 <malloc>:
 802c394:	4b02      	ldr	r3, [pc, #8]	; (802c3a0 <malloc+0xc>)
 802c396:	4601      	mov	r1, r0
 802c398:	6818      	ldr	r0, [r3, #0]
 802c39a:	f000 b82b 	b.w	802c3f4 <_malloc_r>
 802c39e:	bf00      	nop
 802c3a0:	20000188 	.word	0x20000188

0802c3a4 <free>:
 802c3a4:	4b02      	ldr	r3, [pc, #8]	; (802c3b0 <free+0xc>)
 802c3a6:	4601      	mov	r1, r0
 802c3a8:	6818      	ldr	r0, [r3, #0]
 802c3aa:	f002 b9fb 	b.w	802e7a4 <_free_r>
 802c3ae:	bf00      	nop
 802c3b0:	20000188 	.word	0x20000188

0802c3b4 <sbrk_aligned>:
 802c3b4:	b570      	push	{r4, r5, r6, lr}
 802c3b6:	4e0e      	ldr	r6, [pc, #56]	; (802c3f0 <sbrk_aligned+0x3c>)
 802c3b8:	460c      	mov	r4, r1
 802c3ba:	6831      	ldr	r1, [r6, #0]
 802c3bc:	4605      	mov	r5, r0
 802c3be:	b911      	cbnz	r1, 802c3c6 <sbrk_aligned+0x12>
 802c3c0:	f001 fb02 	bl	802d9c8 <_sbrk_r>
 802c3c4:	6030      	str	r0, [r6, #0]
 802c3c6:	4621      	mov	r1, r4
 802c3c8:	4628      	mov	r0, r5
 802c3ca:	f001 fafd 	bl	802d9c8 <_sbrk_r>
 802c3ce:	1c43      	adds	r3, r0, #1
 802c3d0:	d00a      	beq.n	802c3e8 <sbrk_aligned+0x34>
 802c3d2:	1cc4      	adds	r4, r0, #3
 802c3d4:	f024 0403 	bic.w	r4, r4, #3
 802c3d8:	42a0      	cmp	r0, r4
 802c3da:	d007      	beq.n	802c3ec <sbrk_aligned+0x38>
 802c3dc:	1a21      	subs	r1, r4, r0
 802c3de:	4628      	mov	r0, r5
 802c3e0:	f001 faf2 	bl	802d9c8 <_sbrk_r>
 802c3e4:	3001      	adds	r0, #1
 802c3e6:	d101      	bne.n	802c3ec <sbrk_aligned+0x38>
 802c3e8:	f04f 34ff 	mov.w	r4, #4294967295
 802c3ec:	4620      	mov	r0, r4
 802c3ee:	bd70      	pop	{r4, r5, r6, pc}
 802c3f0:	2000d9a8 	.word	0x2000d9a8

0802c3f4 <_malloc_r>:
 802c3f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c3f8:	1ccd      	adds	r5, r1, #3
 802c3fa:	f025 0503 	bic.w	r5, r5, #3
 802c3fe:	3508      	adds	r5, #8
 802c400:	2d0c      	cmp	r5, #12
 802c402:	bf38      	it	cc
 802c404:	250c      	movcc	r5, #12
 802c406:	2d00      	cmp	r5, #0
 802c408:	4607      	mov	r7, r0
 802c40a:	db01      	blt.n	802c410 <_malloc_r+0x1c>
 802c40c:	42a9      	cmp	r1, r5
 802c40e:	d905      	bls.n	802c41c <_malloc_r+0x28>
 802c410:	230c      	movs	r3, #12
 802c412:	603b      	str	r3, [r7, #0]
 802c414:	2600      	movs	r6, #0
 802c416:	4630      	mov	r0, r6
 802c418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c41c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 802c4f0 <_malloc_r+0xfc>
 802c420:	f000 f868 	bl	802c4f4 <__malloc_lock>
 802c424:	f8d8 3000 	ldr.w	r3, [r8]
 802c428:	461c      	mov	r4, r3
 802c42a:	bb5c      	cbnz	r4, 802c484 <_malloc_r+0x90>
 802c42c:	4629      	mov	r1, r5
 802c42e:	4638      	mov	r0, r7
 802c430:	f7ff ffc0 	bl	802c3b4 <sbrk_aligned>
 802c434:	1c43      	adds	r3, r0, #1
 802c436:	4604      	mov	r4, r0
 802c438:	d155      	bne.n	802c4e6 <_malloc_r+0xf2>
 802c43a:	f8d8 4000 	ldr.w	r4, [r8]
 802c43e:	4626      	mov	r6, r4
 802c440:	2e00      	cmp	r6, #0
 802c442:	d145      	bne.n	802c4d0 <_malloc_r+0xdc>
 802c444:	2c00      	cmp	r4, #0
 802c446:	d048      	beq.n	802c4da <_malloc_r+0xe6>
 802c448:	6823      	ldr	r3, [r4, #0]
 802c44a:	4631      	mov	r1, r6
 802c44c:	4638      	mov	r0, r7
 802c44e:	eb04 0903 	add.w	r9, r4, r3
 802c452:	f001 fab9 	bl	802d9c8 <_sbrk_r>
 802c456:	4581      	cmp	r9, r0
 802c458:	d13f      	bne.n	802c4da <_malloc_r+0xe6>
 802c45a:	6821      	ldr	r1, [r4, #0]
 802c45c:	1a6d      	subs	r5, r5, r1
 802c45e:	4629      	mov	r1, r5
 802c460:	4638      	mov	r0, r7
 802c462:	f7ff ffa7 	bl	802c3b4 <sbrk_aligned>
 802c466:	3001      	adds	r0, #1
 802c468:	d037      	beq.n	802c4da <_malloc_r+0xe6>
 802c46a:	6823      	ldr	r3, [r4, #0]
 802c46c:	442b      	add	r3, r5
 802c46e:	6023      	str	r3, [r4, #0]
 802c470:	f8d8 3000 	ldr.w	r3, [r8]
 802c474:	2b00      	cmp	r3, #0
 802c476:	d038      	beq.n	802c4ea <_malloc_r+0xf6>
 802c478:	685a      	ldr	r2, [r3, #4]
 802c47a:	42a2      	cmp	r2, r4
 802c47c:	d12b      	bne.n	802c4d6 <_malloc_r+0xe2>
 802c47e:	2200      	movs	r2, #0
 802c480:	605a      	str	r2, [r3, #4]
 802c482:	e00f      	b.n	802c4a4 <_malloc_r+0xb0>
 802c484:	6822      	ldr	r2, [r4, #0]
 802c486:	1b52      	subs	r2, r2, r5
 802c488:	d41f      	bmi.n	802c4ca <_malloc_r+0xd6>
 802c48a:	2a0b      	cmp	r2, #11
 802c48c:	d917      	bls.n	802c4be <_malloc_r+0xca>
 802c48e:	1961      	adds	r1, r4, r5
 802c490:	42a3      	cmp	r3, r4
 802c492:	6025      	str	r5, [r4, #0]
 802c494:	bf18      	it	ne
 802c496:	6059      	strne	r1, [r3, #4]
 802c498:	6863      	ldr	r3, [r4, #4]
 802c49a:	bf08      	it	eq
 802c49c:	f8c8 1000 	streq.w	r1, [r8]
 802c4a0:	5162      	str	r2, [r4, r5]
 802c4a2:	604b      	str	r3, [r1, #4]
 802c4a4:	4638      	mov	r0, r7
 802c4a6:	f104 060b 	add.w	r6, r4, #11
 802c4aa:	f000 f829 	bl	802c500 <__malloc_unlock>
 802c4ae:	f026 0607 	bic.w	r6, r6, #7
 802c4b2:	1d23      	adds	r3, r4, #4
 802c4b4:	1af2      	subs	r2, r6, r3
 802c4b6:	d0ae      	beq.n	802c416 <_malloc_r+0x22>
 802c4b8:	1b9b      	subs	r3, r3, r6
 802c4ba:	50a3      	str	r3, [r4, r2]
 802c4bc:	e7ab      	b.n	802c416 <_malloc_r+0x22>
 802c4be:	42a3      	cmp	r3, r4
 802c4c0:	6862      	ldr	r2, [r4, #4]
 802c4c2:	d1dd      	bne.n	802c480 <_malloc_r+0x8c>
 802c4c4:	f8c8 2000 	str.w	r2, [r8]
 802c4c8:	e7ec      	b.n	802c4a4 <_malloc_r+0xb0>
 802c4ca:	4623      	mov	r3, r4
 802c4cc:	6864      	ldr	r4, [r4, #4]
 802c4ce:	e7ac      	b.n	802c42a <_malloc_r+0x36>
 802c4d0:	4634      	mov	r4, r6
 802c4d2:	6876      	ldr	r6, [r6, #4]
 802c4d4:	e7b4      	b.n	802c440 <_malloc_r+0x4c>
 802c4d6:	4613      	mov	r3, r2
 802c4d8:	e7cc      	b.n	802c474 <_malloc_r+0x80>
 802c4da:	230c      	movs	r3, #12
 802c4dc:	603b      	str	r3, [r7, #0]
 802c4de:	4638      	mov	r0, r7
 802c4e0:	f000 f80e 	bl	802c500 <__malloc_unlock>
 802c4e4:	e797      	b.n	802c416 <_malloc_r+0x22>
 802c4e6:	6025      	str	r5, [r4, #0]
 802c4e8:	e7dc      	b.n	802c4a4 <_malloc_r+0xb0>
 802c4ea:	605b      	str	r3, [r3, #4]
 802c4ec:	deff      	udf	#255	; 0xff
 802c4ee:	bf00      	nop
 802c4f0:	2000d9a4 	.word	0x2000d9a4

0802c4f4 <__malloc_lock>:
 802c4f4:	4801      	ldr	r0, [pc, #4]	; (802c4fc <__malloc_lock+0x8>)
 802c4f6:	f001 bab4 	b.w	802da62 <__retarget_lock_acquire_recursive>
 802c4fa:	bf00      	nop
 802c4fc:	2000daec 	.word	0x2000daec

0802c500 <__malloc_unlock>:
 802c500:	4801      	ldr	r0, [pc, #4]	; (802c508 <__malloc_unlock+0x8>)
 802c502:	f001 baaf 	b.w	802da64 <__retarget_lock_release_recursive>
 802c506:	bf00      	nop
 802c508:	2000daec 	.word	0x2000daec

0802c50c <__cvt>:
 802c50c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802c510:	ec55 4b10 	vmov	r4, r5, d0
 802c514:	2d00      	cmp	r5, #0
 802c516:	460e      	mov	r6, r1
 802c518:	4619      	mov	r1, r3
 802c51a:	462b      	mov	r3, r5
 802c51c:	bfbb      	ittet	lt
 802c51e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 802c522:	461d      	movlt	r5, r3
 802c524:	2300      	movge	r3, #0
 802c526:	232d      	movlt	r3, #45	; 0x2d
 802c528:	700b      	strb	r3, [r1, #0]
 802c52a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802c52c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 802c530:	4691      	mov	r9, r2
 802c532:	f023 0820 	bic.w	r8, r3, #32
 802c536:	bfbc      	itt	lt
 802c538:	4622      	movlt	r2, r4
 802c53a:	4614      	movlt	r4, r2
 802c53c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 802c540:	d005      	beq.n	802c54e <__cvt+0x42>
 802c542:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 802c546:	d100      	bne.n	802c54a <__cvt+0x3e>
 802c548:	3601      	adds	r6, #1
 802c54a:	2102      	movs	r1, #2
 802c54c:	e000      	b.n	802c550 <__cvt+0x44>
 802c54e:	2103      	movs	r1, #3
 802c550:	ab03      	add	r3, sp, #12
 802c552:	9301      	str	r3, [sp, #4]
 802c554:	ab02      	add	r3, sp, #8
 802c556:	9300      	str	r3, [sp, #0]
 802c558:	ec45 4b10 	vmov	d0, r4, r5
 802c55c:	4653      	mov	r3, sl
 802c55e:	4632      	mov	r2, r6
 802c560:	f001 fb2e 	bl	802dbc0 <_dtoa_r>
 802c564:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 802c568:	4607      	mov	r7, r0
 802c56a:	d102      	bne.n	802c572 <__cvt+0x66>
 802c56c:	f019 0f01 	tst.w	r9, #1
 802c570:	d022      	beq.n	802c5b8 <__cvt+0xac>
 802c572:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 802c576:	eb07 0906 	add.w	r9, r7, r6
 802c57a:	d110      	bne.n	802c59e <__cvt+0x92>
 802c57c:	783b      	ldrb	r3, [r7, #0]
 802c57e:	2b30      	cmp	r3, #48	; 0x30
 802c580:	d10a      	bne.n	802c598 <__cvt+0x8c>
 802c582:	2200      	movs	r2, #0
 802c584:	2300      	movs	r3, #0
 802c586:	4620      	mov	r0, r4
 802c588:	4629      	mov	r1, r5
 802c58a:	f7e4 fab5 	bl	8010af8 <__aeabi_dcmpeq>
 802c58e:	b918      	cbnz	r0, 802c598 <__cvt+0x8c>
 802c590:	f1c6 0601 	rsb	r6, r6, #1
 802c594:	f8ca 6000 	str.w	r6, [sl]
 802c598:	f8da 3000 	ldr.w	r3, [sl]
 802c59c:	4499      	add	r9, r3
 802c59e:	2200      	movs	r2, #0
 802c5a0:	2300      	movs	r3, #0
 802c5a2:	4620      	mov	r0, r4
 802c5a4:	4629      	mov	r1, r5
 802c5a6:	f7e4 faa7 	bl	8010af8 <__aeabi_dcmpeq>
 802c5aa:	b108      	cbz	r0, 802c5b0 <__cvt+0xa4>
 802c5ac:	f8cd 900c 	str.w	r9, [sp, #12]
 802c5b0:	2230      	movs	r2, #48	; 0x30
 802c5b2:	9b03      	ldr	r3, [sp, #12]
 802c5b4:	454b      	cmp	r3, r9
 802c5b6:	d307      	bcc.n	802c5c8 <__cvt+0xbc>
 802c5b8:	9b03      	ldr	r3, [sp, #12]
 802c5ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802c5bc:	1bdb      	subs	r3, r3, r7
 802c5be:	4638      	mov	r0, r7
 802c5c0:	6013      	str	r3, [r2, #0]
 802c5c2:	b004      	add	sp, #16
 802c5c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c5c8:	1c59      	adds	r1, r3, #1
 802c5ca:	9103      	str	r1, [sp, #12]
 802c5cc:	701a      	strb	r2, [r3, #0]
 802c5ce:	e7f0      	b.n	802c5b2 <__cvt+0xa6>

0802c5d0 <__exponent>:
 802c5d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802c5d2:	4603      	mov	r3, r0
 802c5d4:	2900      	cmp	r1, #0
 802c5d6:	bfb8      	it	lt
 802c5d8:	4249      	neglt	r1, r1
 802c5da:	f803 2b02 	strb.w	r2, [r3], #2
 802c5de:	bfb4      	ite	lt
 802c5e0:	222d      	movlt	r2, #45	; 0x2d
 802c5e2:	222b      	movge	r2, #43	; 0x2b
 802c5e4:	2909      	cmp	r1, #9
 802c5e6:	7042      	strb	r2, [r0, #1]
 802c5e8:	dd2a      	ble.n	802c640 <__exponent+0x70>
 802c5ea:	f10d 0207 	add.w	r2, sp, #7
 802c5ee:	4617      	mov	r7, r2
 802c5f0:	260a      	movs	r6, #10
 802c5f2:	4694      	mov	ip, r2
 802c5f4:	fb91 f5f6 	sdiv	r5, r1, r6
 802c5f8:	fb06 1415 	mls	r4, r6, r5, r1
 802c5fc:	3430      	adds	r4, #48	; 0x30
 802c5fe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 802c602:	460c      	mov	r4, r1
 802c604:	2c63      	cmp	r4, #99	; 0x63
 802c606:	f102 32ff 	add.w	r2, r2, #4294967295
 802c60a:	4629      	mov	r1, r5
 802c60c:	dcf1      	bgt.n	802c5f2 <__exponent+0x22>
 802c60e:	3130      	adds	r1, #48	; 0x30
 802c610:	f1ac 0402 	sub.w	r4, ip, #2
 802c614:	f802 1c01 	strb.w	r1, [r2, #-1]
 802c618:	1c41      	adds	r1, r0, #1
 802c61a:	4622      	mov	r2, r4
 802c61c:	42ba      	cmp	r2, r7
 802c61e:	d30a      	bcc.n	802c636 <__exponent+0x66>
 802c620:	f10d 0209 	add.w	r2, sp, #9
 802c624:	eba2 020c 	sub.w	r2, r2, ip
 802c628:	42bc      	cmp	r4, r7
 802c62a:	bf88      	it	hi
 802c62c:	2200      	movhi	r2, #0
 802c62e:	4413      	add	r3, r2
 802c630:	1a18      	subs	r0, r3, r0
 802c632:	b003      	add	sp, #12
 802c634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c636:	f812 5b01 	ldrb.w	r5, [r2], #1
 802c63a:	f801 5f01 	strb.w	r5, [r1, #1]!
 802c63e:	e7ed      	b.n	802c61c <__exponent+0x4c>
 802c640:	2330      	movs	r3, #48	; 0x30
 802c642:	3130      	adds	r1, #48	; 0x30
 802c644:	7083      	strb	r3, [r0, #2]
 802c646:	70c1      	strb	r1, [r0, #3]
 802c648:	1d03      	adds	r3, r0, #4
 802c64a:	e7f1      	b.n	802c630 <__exponent+0x60>

0802c64c <_printf_float>:
 802c64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c650:	ed2d 8b02 	vpush	{d8}
 802c654:	b08d      	sub	sp, #52	; 0x34
 802c656:	460c      	mov	r4, r1
 802c658:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 802c65c:	4616      	mov	r6, r2
 802c65e:	461f      	mov	r7, r3
 802c660:	4605      	mov	r5, r0
 802c662:	f001 f923 	bl	802d8ac <_localeconv_r>
 802c666:	f8d0 a000 	ldr.w	sl, [r0]
 802c66a:	4650      	mov	r0, sl
 802c66c:	f7e3 fe18 	bl	80102a0 <strlen>
 802c670:	2300      	movs	r3, #0
 802c672:	930a      	str	r3, [sp, #40]	; 0x28
 802c674:	6823      	ldr	r3, [r4, #0]
 802c676:	9305      	str	r3, [sp, #20]
 802c678:	f8d8 3000 	ldr.w	r3, [r8]
 802c67c:	f894 b018 	ldrb.w	fp, [r4, #24]
 802c680:	3307      	adds	r3, #7
 802c682:	f023 0307 	bic.w	r3, r3, #7
 802c686:	f103 0208 	add.w	r2, r3, #8
 802c68a:	f8c8 2000 	str.w	r2, [r8]
 802c68e:	e9d3 8900 	ldrd	r8, r9, [r3]
 802c692:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802c696:	9307      	str	r3, [sp, #28]
 802c698:	f8cd 8018 	str.w	r8, [sp, #24]
 802c69c:	ee08 0a10 	vmov	s16, r0
 802c6a0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 802c6a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802c6a8:	4b9e      	ldr	r3, [pc, #632]	; (802c924 <_printf_float+0x2d8>)
 802c6aa:	f04f 32ff 	mov.w	r2, #4294967295
 802c6ae:	f7e4 fa55 	bl	8010b5c <__aeabi_dcmpun>
 802c6b2:	bb88      	cbnz	r0, 802c718 <_printf_float+0xcc>
 802c6b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802c6b8:	4b9a      	ldr	r3, [pc, #616]	; (802c924 <_printf_float+0x2d8>)
 802c6ba:	f04f 32ff 	mov.w	r2, #4294967295
 802c6be:	f7e4 fa2f 	bl	8010b20 <__aeabi_dcmple>
 802c6c2:	bb48      	cbnz	r0, 802c718 <_printf_float+0xcc>
 802c6c4:	2200      	movs	r2, #0
 802c6c6:	2300      	movs	r3, #0
 802c6c8:	4640      	mov	r0, r8
 802c6ca:	4649      	mov	r1, r9
 802c6cc:	f7e4 fa1e 	bl	8010b0c <__aeabi_dcmplt>
 802c6d0:	b110      	cbz	r0, 802c6d8 <_printf_float+0x8c>
 802c6d2:	232d      	movs	r3, #45	; 0x2d
 802c6d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802c6d8:	4a93      	ldr	r2, [pc, #588]	; (802c928 <_printf_float+0x2dc>)
 802c6da:	4b94      	ldr	r3, [pc, #592]	; (802c92c <_printf_float+0x2e0>)
 802c6dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 802c6e0:	bf94      	ite	ls
 802c6e2:	4690      	movls	r8, r2
 802c6e4:	4698      	movhi	r8, r3
 802c6e6:	2303      	movs	r3, #3
 802c6e8:	6123      	str	r3, [r4, #16]
 802c6ea:	9b05      	ldr	r3, [sp, #20]
 802c6ec:	f023 0304 	bic.w	r3, r3, #4
 802c6f0:	6023      	str	r3, [r4, #0]
 802c6f2:	f04f 0900 	mov.w	r9, #0
 802c6f6:	9700      	str	r7, [sp, #0]
 802c6f8:	4633      	mov	r3, r6
 802c6fa:	aa0b      	add	r2, sp, #44	; 0x2c
 802c6fc:	4621      	mov	r1, r4
 802c6fe:	4628      	mov	r0, r5
 802c700:	f000 f9da 	bl	802cab8 <_printf_common>
 802c704:	3001      	adds	r0, #1
 802c706:	f040 8090 	bne.w	802c82a <_printf_float+0x1de>
 802c70a:	f04f 30ff 	mov.w	r0, #4294967295
 802c70e:	b00d      	add	sp, #52	; 0x34
 802c710:	ecbd 8b02 	vpop	{d8}
 802c714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c718:	4642      	mov	r2, r8
 802c71a:	464b      	mov	r3, r9
 802c71c:	4640      	mov	r0, r8
 802c71e:	4649      	mov	r1, r9
 802c720:	f7e4 fa1c 	bl	8010b5c <__aeabi_dcmpun>
 802c724:	b140      	cbz	r0, 802c738 <_printf_float+0xec>
 802c726:	464b      	mov	r3, r9
 802c728:	2b00      	cmp	r3, #0
 802c72a:	bfbc      	itt	lt
 802c72c:	232d      	movlt	r3, #45	; 0x2d
 802c72e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802c732:	4a7f      	ldr	r2, [pc, #508]	; (802c930 <_printf_float+0x2e4>)
 802c734:	4b7f      	ldr	r3, [pc, #508]	; (802c934 <_printf_float+0x2e8>)
 802c736:	e7d1      	b.n	802c6dc <_printf_float+0x90>
 802c738:	6863      	ldr	r3, [r4, #4]
 802c73a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 802c73e:	9206      	str	r2, [sp, #24]
 802c740:	1c5a      	adds	r2, r3, #1
 802c742:	d13f      	bne.n	802c7c4 <_printf_float+0x178>
 802c744:	2306      	movs	r3, #6
 802c746:	6063      	str	r3, [r4, #4]
 802c748:	9b05      	ldr	r3, [sp, #20]
 802c74a:	6861      	ldr	r1, [r4, #4]
 802c74c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 802c750:	2300      	movs	r3, #0
 802c752:	9303      	str	r3, [sp, #12]
 802c754:	ab0a      	add	r3, sp, #40	; 0x28
 802c756:	e9cd b301 	strd	fp, r3, [sp, #4]
 802c75a:	ab09      	add	r3, sp, #36	; 0x24
 802c75c:	ec49 8b10 	vmov	d0, r8, r9
 802c760:	9300      	str	r3, [sp, #0]
 802c762:	6022      	str	r2, [r4, #0]
 802c764:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 802c768:	4628      	mov	r0, r5
 802c76a:	f7ff fecf 	bl	802c50c <__cvt>
 802c76e:	9b06      	ldr	r3, [sp, #24]
 802c770:	9909      	ldr	r1, [sp, #36]	; 0x24
 802c772:	2b47      	cmp	r3, #71	; 0x47
 802c774:	4680      	mov	r8, r0
 802c776:	d108      	bne.n	802c78a <_printf_float+0x13e>
 802c778:	1cc8      	adds	r0, r1, #3
 802c77a:	db02      	blt.n	802c782 <_printf_float+0x136>
 802c77c:	6863      	ldr	r3, [r4, #4]
 802c77e:	4299      	cmp	r1, r3
 802c780:	dd41      	ble.n	802c806 <_printf_float+0x1ba>
 802c782:	f1ab 0302 	sub.w	r3, fp, #2
 802c786:	fa5f fb83 	uxtb.w	fp, r3
 802c78a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802c78e:	d820      	bhi.n	802c7d2 <_printf_float+0x186>
 802c790:	3901      	subs	r1, #1
 802c792:	465a      	mov	r2, fp
 802c794:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802c798:	9109      	str	r1, [sp, #36]	; 0x24
 802c79a:	f7ff ff19 	bl	802c5d0 <__exponent>
 802c79e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802c7a0:	1813      	adds	r3, r2, r0
 802c7a2:	2a01      	cmp	r2, #1
 802c7a4:	4681      	mov	r9, r0
 802c7a6:	6123      	str	r3, [r4, #16]
 802c7a8:	dc02      	bgt.n	802c7b0 <_printf_float+0x164>
 802c7aa:	6822      	ldr	r2, [r4, #0]
 802c7ac:	07d2      	lsls	r2, r2, #31
 802c7ae:	d501      	bpl.n	802c7b4 <_printf_float+0x168>
 802c7b0:	3301      	adds	r3, #1
 802c7b2:	6123      	str	r3, [r4, #16]
 802c7b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 802c7b8:	2b00      	cmp	r3, #0
 802c7ba:	d09c      	beq.n	802c6f6 <_printf_float+0xaa>
 802c7bc:	232d      	movs	r3, #45	; 0x2d
 802c7be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802c7c2:	e798      	b.n	802c6f6 <_printf_float+0xaa>
 802c7c4:	9a06      	ldr	r2, [sp, #24]
 802c7c6:	2a47      	cmp	r2, #71	; 0x47
 802c7c8:	d1be      	bne.n	802c748 <_printf_float+0xfc>
 802c7ca:	2b00      	cmp	r3, #0
 802c7cc:	d1bc      	bne.n	802c748 <_printf_float+0xfc>
 802c7ce:	2301      	movs	r3, #1
 802c7d0:	e7b9      	b.n	802c746 <_printf_float+0xfa>
 802c7d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 802c7d6:	d118      	bne.n	802c80a <_printf_float+0x1be>
 802c7d8:	2900      	cmp	r1, #0
 802c7da:	6863      	ldr	r3, [r4, #4]
 802c7dc:	dd0b      	ble.n	802c7f6 <_printf_float+0x1aa>
 802c7de:	6121      	str	r1, [r4, #16]
 802c7e0:	b913      	cbnz	r3, 802c7e8 <_printf_float+0x19c>
 802c7e2:	6822      	ldr	r2, [r4, #0]
 802c7e4:	07d0      	lsls	r0, r2, #31
 802c7e6:	d502      	bpl.n	802c7ee <_printf_float+0x1a2>
 802c7e8:	3301      	adds	r3, #1
 802c7ea:	440b      	add	r3, r1
 802c7ec:	6123      	str	r3, [r4, #16]
 802c7ee:	65a1      	str	r1, [r4, #88]	; 0x58
 802c7f0:	f04f 0900 	mov.w	r9, #0
 802c7f4:	e7de      	b.n	802c7b4 <_printf_float+0x168>
 802c7f6:	b913      	cbnz	r3, 802c7fe <_printf_float+0x1b2>
 802c7f8:	6822      	ldr	r2, [r4, #0]
 802c7fa:	07d2      	lsls	r2, r2, #31
 802c7fc:	d501      	bpl.n	802c802 <_printf_float+0x1b6>
 802c7fe:	3302      	adds	r3, #2
 802c800:	e7f4      	b.n	802c7ec <_printf_float+0x1a0>
 802c802:	2301      	movs	r3, #1
 802c804:	e7f2      	b.n	802c7ec <_printf_float+0x1a0>
 802c806:	f04f 0b67 	mov.w	fp, #103	; 0x67
 802c80a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c80c:	4299      	cmp	r1, r3
 802c80e:	db05      	blt.n	802c81c <_printf_float+0x1d0>
 802c810:	6823      	ldr	r3, [r4, #0]
 802c812:	6121      	str	r1, [r4, #16]
 802c814:	07d8      	lsls	r0, r3, #31
 802c816:	d5ea      	bpl.n	802c7ee <_printf_float+0x1a2>
 802c818:	1c4b      	adds	r3, r1, #1
 802c81a:	e7e7      	b.n	802c7ec <_printf_float+0x1a0>
 802c81c:	2900      	cmp	r1, #0
 802c81e:	bfd4      	ite	le
 802c820:	f1c1 0202 	rsble	r2, r1, #2
 802c824:	2201      	movgt	r2, #1
 802c826:	4413      	add	r3, r2
 802c828:	e7e0      	b.n	802c7ec <_printf_float+0x1a0>
 802c82a:	6823      	ldr	r3, [r4, #0]
 802c82c:	055a      	lsls	r2, r3, #21
 802c82e:	d407      	bmi.n	802c840 <_printf_float+0x1f4>
 802c830:	6923      	ldr	r3, [r4, #16]
 802c832:	4642      	mov	r2, r8
 802c834:	4631      	mov	r1, r6
 802c836:	4628      	mov	r0, r5
 802c838:	47b8      	blx	r7
 802c83a:	3001      	adds	r0, #1
 802c83c:	d12c      	bne.n	802c898 <_printf_float+0x24c>
 802c83e:	e764      	b.n	802c70a <_printf_float+0xbe>
 802c840:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802c844:	f240 80e0 	bls.w	802ca08 <_printf_float+0x3bc>
 802c848:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802c84c:	2200      	movs	r2, #0
 802c84e:	2300      	movs	r3, #0
 802c850:	f7e4 f952 	bl	8010af8 <__aeabi_dcmpeq>
 802c854:	2800      	cmp	r0, #0
 802c856:	d034      	beq.n	802c8c2 <_printf_float+0x276>
 802c858:	4a37      	ldr	r2, [pc, #220]	; (802c938 <_printf_float+0x2ec>)
 802c85a:	2301      	movs	r3, #1
 802c85c:	4631      	mov	r1, r6
 802c85e:	4628      	mov	r0, r5
 802c860:	47b8      	blx	r7
 802c862:	3001      	adds	r0, #1
 802c864:	f43f af51 	beq.w	802c70a <_printf_float+0xbe>
 802c868:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802c86c:	429a      	cmp	r2, r3
 802c86e:	db02      	blt.n	802c876 <_printf_float+0x22a>
 802c870:	6823      	ldr	r3, [r4, #0]
 802c872:	07d8      	lsls	r0, r3, #31
 802c874:	d510      	bpl.n	802c898 <_printf_float+0x24c>
 802c876:	ee18 3a10 	vmov	r3, s16
 802c87a:	4652      	mov	r2, sl
 802c87c:	4631      	mov	r1, r6
 802c87e:	4628      	mov	r0, r5
 802c880:	47b8      	blx	r7
 802c882:	3001      	adds	r0, #1
 802c884:	f43f af41 	beq.w	802c70a <_printf_float+0xbe>
 802c888:	f04f 0800 	mov.w	r8, #0
 802c88c:	f104 091a 	add.w	r9, r4, #26
 802c890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c892:	3b01      	subs	r3, #1
 802c894:	4543      	cmp	r3, r8
 802c896:	dc09      	bgt.n	802c8ac <_printf_float+0x260>
 802c898:	6823      	ldr	r3, [r4, #0]
 802c89a:	079b      	lsls	r3, r3, #30
 802c89c:	f100 8107 	bmi.w	802caae <_printf_float+0x462>
 802c8a0:	68e0      	ldr	r0, [r4, #12]
 802c8a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802c8a4:	4298      	cmp	r0, r3
 802c8a6:	bfb8      	it	lt
 802c8a8:	4618      	movlt	r0, r3
 802c8aa:	e730      	b.n	802c70e <_printf_float+0xc2>
 802c8ac:	2301      	movs	r3, #1
 802c8ae:	464a      	mov	r2, r9
 802c8b0:	4631      	mov	r1, r6
 802c8b2:	4628      	mov	r0, r5
 802c8b4:	47b8      	blx	r7
 802c8b6:	3001      	adds	r0, #1
 802c8b8:	f43f af27 	beq.w	802c70a <_printf_float+0xbe>
 802c8bc:	f108 0801 	add.w	r8, r8, #1
 802c8c0:	e7e6      	b.n	802c890 <_printf_float+0x244>
 802c8c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c8c4:	2b00      	cmp	r3, #0
 802c8c6:	dc39      	bgt.n	802c93c <_printf_float+0x2f0>
 802c8c8:	4a1b      	ldr	r2, [pc, #108]	; (802c938 <_printf_float+0x2ec>)
 802c8ca:	2301      	movs	r3, #1
 802c8cc:	4631      	mov	r1, r6
 802c8ce:	4628      	mov	r0, r5
 802c8d0:	47b8      	blx	r7
 802c8d2:	3001      	adds	r0, #1
 802c8d4:	f43f af19 	beq.w	802c70a <_printf_float+0xbe>
 802c8d8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 802c8dc:	4313      	orrs	r3, r2
 802c8de:	d102      	bne.n	802c8e6 <_printf_float+0x29a>
 802c8e0:	6823      	ldr	r3, [r4, #0]
 802c8e2:	07d9      	lsls	r1, r3, #31
 802c8e4:	d5d8      	bpl.n	802c898 <_printf_float+0x24c>
 802c8e6:	ee18 3a10 	vmov	r3, s16
 802c8ea:	4652      	mov	r2, sl
 802c8ec:	4631      	mov	r1, r6
 802c8ee:	4628      	mov	r0, r5
 802c8f0:	47b8      	blx	r7
 802c8f2:	3001      	adds	r0, #1
 802c8f4:	f43f af09 	beq.w	802c70a <_printf_float+0xbe>
 802c8f8:	f04f 0900 	mov.w	r9, #0
 802c8fc:	f104 0a1a 	add.w	sl, r4, #26
 802c900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c902:	425b      	negs	r3, r3
 802c904:	454b      	cmp	r3, r9
 802c906:	dc01      	bgt.n	802c90c <_printf_float+0x2c0>
 802c908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c90a:	e792      	b.n	802c832 <_printf_float+0x1e6>
 802c90c:	2301      	movs	r3, #1
 802c90e:	4652      	mov	r2, sl
 802c910:	4631      	mov	r1, r6
 802c912:	4628      	mov	r0, r5
 802c914:	47b8      	blx	r7
 802c916:	3001      	adds	r0, #1
 802c918:	f43f aef7 	beq.w	802c70a <_printf_float+0xbe>
 802c91c:	f109 0901 	add.w	r9, r9, #1
 802c920:	e7ee      	b.n	802c900 <_printf_float+0x2b4>
 802c922:	bf00      	nop
 802c924:	7fefffff 	.word	0x7fefffff
 802c928:	08034828 	.word	0x08034828
 802c92c:	0803482c 	.word	0x0803482c
 802c930:	08034830 	.word	0x08034830
 802c934:	08034834 	.word	0x08034834
 802c938:	08034c18 	.word	0x08034c18
 802c93c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802c93e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802c940:	429a      	cmp	r2, r3
 802c942:	bfa8      	it	ge
 802c944:	461a      	movge	r2, r3
 802c946:	2a00      	cmp	r2, #0
 802c948:	4691      	mov	r9, r2
 802c94a:	dc37      	bgt.n	802c9bc <_printf_float+0x370>
 802c94c:	f04f 0b00 	mov.w	fp, #0
 802c950:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802c954:	f104 021a 	add.w	r2, r4, #26
 802c958:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802c95a:	9305      	str	r3, [sp, #20]
 802c95c:	eba3 0309 	sub.w	r3, r3, r9
 802c960:	455b      	cmp	r3, fp
 802c962:	dc33      	bgt.n	802c9cc <_printf_float+0x380>
 802c964:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802c968:	429a      	cmp	r2, r3
 802c96a:	db3b      	blt.n	802c9e4 <_printf_float+0x398>
 802c96c:	6823      	ldr	r3, [r4, #0]
 802c96e:	07da      	lsls	r2, r3, #31
 802c970:	d438      	bmi.n	802c9e4 <_printf_float+0x398>
 802c972:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 802c976:	eba2 0903 	sub.w	r9, r2, r3
 802c97a:	9b05      	ldr	r3, [sp, #20]
 802c97c:	1ad2      	subs	r2, r2, r3
 802c97e:	4591      	cmp	r9, r2
 802c980:	bfa8      	it	ge
 802c982:	4691      	movge	r9, r2
 802c984:	f1b9 0f00 	cmp.w	r9, #0
 802c988:	dc35      	bgt.n	802c9f6 <_printf_float+0x3aa>
 802c98a:	f04f 0800 	mov.w	r8, #0
 802c98e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802c992:	f104 0a1a 	add.w	sl, r4, #26
 802c996:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802c99a:	1a9b      	subs	r3, r3, r2
 802c99c:	eba3 0309 	sub.w	r3, r3, r9
 802c9a0:	4543      	cmp	r3, r8
 802c9a2:	f77f af79 	ble.w	802c898 <_printf_float+0x24c>
 802c9a6:	2301      	movs	r3, #1
 802c9a8:	4652      	mov	r2, sl
 802c9aa:	4631      	mov	r1, r6
 802c9ac:	4628      	mov	r0, r5
 802c9ae:	47b8      	blx	r7
 802c9b0:	3001      	adds	r0, #1
 802c9b2:	f43f aeaa 	beq.w	802c70a <_printf_float+0xbe>
 802c9b6:	f108 0801 	add.w	r8, r8, #1
 802c9ba:	e7ec      	b.n	802c996 <_printf_float+0x34a>
 802c9bc:	4613      	mov	r3, r2
 802c9be:	4631      	mov	r1, r6
 802c9c0:	4642      	mov	r2, r8
 802c9c2:	4628      	mov	r0, r5
 802c9c4:	47b8      	blx	r7
 802c9c6:	3001      	adds	r0, #1
 802c9c8:	d1c0      	bne.n	802c94c <_printf_float+0x300>
 802c9ca:	e69e      	b.n	802c70a <_printf_float+0xbe>
 802c9cc:	2301      	movs	r3, #1
 802c9ce:	4631      	mov	r1, r6
 802c9d0:	4628      	mov	r0, r5
 802c9d2:	9205      	str	r2, [sp, #20]
 802c9d4:	47b8      	blx	r7
 802c9d6:	3001      	adds	r0, #1
 802c9d8:	f43f ae97 	beq.w	802c70a <_printf_float+0xbe>
 802c9dc:	9a05      	ldr	r2, [sp, #20]
 802c9de:	f10b 0b01 	add.w	fp, fp, #1
 802c9e2:	e7b9      	b.n	802c958 <_printf_float+0x30c>
 802c9e4:	ee18 3a10 	vmov	r3, s16
 802c9e8:	4652      	mov	r2, sl
 802c9ea:	4631      	mov	r1, r6
 802c9ec:	4628      	mov	r0, r5
 802c9ee:	47b8      	blx	r7
 802c9f0:	3001      	adds	r0, #1
 802c9f2:	d1be      	bne.n	802c972 <_printf_float+0x326>
 802c9f4:	e689      	b.n	802c70a <_printf_float+0xbe>
 802c9f6:	9a05      	ldr	r2, [sp, #20]
 802c9f8:	464b      	mov	r3, r9
 802c9fa:	4442      	add	r2, r8
 802c9fc:	4631      	mov	r1, r6
 802c9fe:	4628      	mov	r0, r5
 802ca00:	47b8      	blx	r7
 802ca02:	3001      	adds	r0, #1
 802ca04:	d1c1      	bne.n	802c98a <_printf_float+0x33e>
 802ca06:	e680      	b.n	802c70a <_printf_float+0xbe>
 802ca08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802ca0a:	2a01      	cmp	r2, #1
 802ca0c:	dc01      	bgt.n	802ca12 <_printf_float+0x3c6>
 802ca0e:	07db      	lsls	r3, r3, #31
 802ca10:	d53a      	bpl.n	802ca88 <_printf_float+0x43c>
 802ca12:	2301      	movs	r3, #1
 802ca14:	4642      	mov	r2, r8
 802ca16:	4631      	mov	r1, r6
 802ca18:	4628      	mov	r0, r5
 802ca1a:	47b8      	blx	r7
 802ca1c:	3001      	adds	r0, #1
 802ca1e:	f43f ae74 	beq.w	802c70a <_printf_float+0xbe>
 802ca22:	ee18 3a10 	vmov	r3, s16
 802ca26:	4652      	mov	r2, sl
 802ca28:	4631      	mov	r1, r6
 802ca2a:	4628      	mov	r0, r5
 802ca2c:	47b8      	blx	r7
 802ca2e:	3001      	adds	r0, #1
 802ca30:	f43f ae6b 	beq.w	802c70a <_printf_float+0xbe>
 802ca34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802ca38:	2200      	movs	r2, #0
 802ca3a:	2300      	movs	r3, #0
 802ca3c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 802ca40:	f7e4 f85a 	bl	8010af8 <__aeabi_dcmpeq>
 802ca44:	b9d8      	cbnz	r0, 802ca7e <_printf_float+0x432>
 802ca46:	f10a 33ff 	add.w	r3, sl, #4294967295
 802ca4a:	f108 0201 	add.w	r2, r8, #1
 802ca4e:	4631      	mov	r1, r6
 802ca50:	4628      	mov	r0, r5
 802ca52:	47b8      	blx	r7
 802ca54:	3001      	adds	r0, #1
 802ca56:	d10e      	bne.n	802ca76 <_printf_float+0x42a>
 802ca58:	e657      	b.n	802c70a <_printf_float+0xbe>
 802ca5a:	2301      	movs	r3, #1
 802ca5c:	4652      	mov	r2, sl
 802ca5e:	4631      	mov	r1, r6
 802ca60:	4628      	mov	r0, r5
 802ca62:	47b8      	blx	r7
 802ca64:	3001      	adds	r0, #1
 802ca66:	f43f ae50 	beq.w	802c70a <_printf_float+0xbe>
 802ca6a:	f108 0801 	add.w	r8, r8, #1
 802ca6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802ca70:	3b01      	subs	r3, #1
 802ca72:	4543      	cmp	r3, r8
 802ca74:	dcf1      	bgt.n	802ca5a <_printf_float+0x40e>
 802ca76:	464b      	mov	r3, r9
 802ca78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 802ca7c:	e6da      	b.n	802c834 <_printf_float+0x1e8>
 802ca7e:	f04f 0800 	mov.w	r8, #0
 802ca82:	f104 0a1a 	add.w	sl, r4, #26
 802ca86:	e7f2      	b.n	802ca6e <_printf_float+0x422>
 802ca88:	2301      	movs	r3, #1
 802ca8a:	4642      	mov	r2, r8
 802ca8c:	e7df      	b.n	802ca4e <_printf_float+0x402>
 802ca8e:	2301      	movs	r3, #1
 802ca90:	464a      	mov	r2, r9
 802ca92:	4631      	mov	r1, r6
 802ca94:	4628      	mov	r0, r5
 802ca96:	47b8      	blx	r7
 802ca98:	3001      	adds	r0, #1
 802ca9a:	f43f ae36 	beq.w	802c70a <_printf_float+0xbe>
 802ca9e:	f108 0801 	add.w	r8, r8, #1
 802caa2:	68e3      	ldr	r3, [r4, #12]
 802caa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802caa6:	1a5b      	subs	r3, r3, r1
 802caa8:	4543      	cmp	r3, r8
 802caaa:	dcf0      	bgt.n	802ca8e <_printf_float+0x442>
 802caac:	e6f8      	b.n	802c8a0 <_printf_float+0x254>
 802caae:	f04f 0800 	mov.w	r8, #0
 802cab2:	f104 0919 	add.w	r9, r4, #25
 802cab6:	e7f4      	b.n	802caa2 <_printf_float+0x456>

0802cab8 <_printf_common>:
 802cab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802cabc:	4616      	mov	r6, r2
 802cabe:	4699      	mov	r9, r3
 802cac0:	688a      	ldr	r2, [r1, #8]
 802cac2:	690b      	ldr	r3, [r1, #16]
 802cac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802cac8:	4293      	cmp	r3, r2
 802caca:	bfb8      	it	lt
 802cacc:	4613      	movlt	r3, r2
 802cace:	6033      	str	r3, [r6, #0]
 802cad0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802cad4:	4607      	mov	r7, r0
 802cad6:	460c      	mov	r4, r1
 802cad8:	b10a      	cbz	r2, 802cade <_printf_common+0x26>
 802cada:	3301      	adds	r3, #1
 802cadc:	6033      	str	r3, [r6, #0]
 802cade:	6823      	ldr	r3, [r4, #0]
 802cae0:	0699      	lsls	r1, r3, #26
 802cae2:	bf42      	ittt	mi
 802cae4:	6833      	ldrmi	r3, [r6, #0]
 802cae6:	3302      	addmi	r3, #2
 802cae8:	6033      	strmi	r3, [r6, #0]
 802caea:	6825      	ldr	r5, [r4, #0]
 802caec:	f015 0506 	ands.w	r5, r5, #6
 802caf0:	d106      	bne.n	802cb00 <_printf_common+0x48>
 802caf2:	f104 0a19 	add.w	sl, r4, #25
 802caf6:	68e3      	ldr	r3, [r4, #12]
 802caf8:	6832      	ldr	r2, [r6, #0]
 802cafa:	1a9b      	subs	r3, r3, r2
 802cafc:	42ab      	cmp	r3, r5
 802cafe:	dc26      	bgt.n	802cb4e <_printf_common+0x96>
 802cb00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802cb04:	1e13      	subs	r3, r2, #0
 802cb06:	6822      	ldr	r2, [r4, #0]
 802cb08:	bf18      	it	ne
 802cb0a:	2301      	movne	r3, #1
 802cb0c:	0692      	lsls	r2, r2, #26
 802cb0e:	d42b      	bmi.n	802cb68 <_printf_common+0xb0>
 802cb10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802cb14:	4649      	mov	r1, r9
 802cb16:	4638      	mov	r0, r7
 802cb18:	47c0      	blx	r8
 802cb1a:	3001      	adds	r0, #1
 802cb1c:	d01e      	beq.n	802cb5c <_printf_common+0xa4>
 802cb1e:	6823      	ldr	r3, [r4, #0]
 802cb20:	6922      	ldr	r2, [r4, #16]
 802cb22:	f003 0306 	and.w	r3, r3, #6
 802cb26:	2b04      	cmp	r3, #4
 802cb28:	bf02      	ittt	eq
 802cb2a:	68e5      	ldreq	r5, [r4, #12]
 802cb2c:	6833      	ldreq	r3, [r6, #0]
 802cb2e:	1aed      	subeq	r5, r5, r3
 802cb30:	68a3      	ldr	r3, [r4, #8]
 802cb32:	bf0c      	ite	eq
 802cb34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802cb38:	2500      	movne	r5, #0
 802cb3a:	4293      	cmp	r3, r2
 802cb3c:	bfc4      	itt	gt
 802cb3e:	1a9b      	subgt	r3, r3, r2
 802cb40:	18ed      	addgt	r5, r5, r3
 802cb42:	2600      	movs	r6, #0
 802cb44:	341a      	adds	r4, #26
 802cb46:	42b5      	cmp	r5, r6
 802cb48:	d11a      	bne.n	802cb80 <_printf_common+0xc8>
 802cb4a:	2000      	movs	r0, #0
 802cb4c:	e008      	b.n	802cb60 <_printf_common+0xa8>
 802cb4e:	2301      	movs	r3, #1
 802cb50:	4652      	mov	r2, sl
 802cb52:	4649      	mov	r1, r9
 802cb54:	4638      	mov	r0, r7
 802cb56:	47c0      	blx	r8
 802cb58:	3001      	adds	r0, #1
 802cb5a:	d103      	bne.n	802cb64 <_printf_common+0xac>
 802cb5c:	f04f 30ff 	mov.w	r0, #4294967295
 802cb60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802cb64:	3501      	adds	r5, #1
 802cb66:	e7c6      	b.n	802caf6 <_printf_common+0x3e>
 802cb68:	18e1      	adds	r1, r4, r3
 802cb6a:	1c5a      	adds	r2, r3, #1
 802cb6c:	2030      	movs	r0, #48	; 0x30
 802cb6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802cb72:	4422      	add	r2, r4
 802cb74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802cb78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802cb7c:	3302      	adds	r3, #2
 802cb7e:	e7c7      	b.n	802cb10 <_printf_common+0x58>
 802cb80:	2301      	movs	r3, #1
 802cb82:	4622      	mov	r2, r4
 802cb84:	4649      	mov	r1, r9
 802cb86:	4638      	mov	r0, r7
 802cb88:	47c0      	blx	r8
 802cb8a:	3001      	adds	r0, #1
 802cb8c:	d0e6      	beq.n	802cb5c <_printf_common+0xa4>
 802cb8e:	3601      	adds	r6, #1
 802cb90:	e7d9      	b.n	802cb46 <_printf_common+0x8e>
	...

0802cb94 <_printf_i>:
 802cb94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802cb98:	7e0f      	ldrb	r7, [r1, #24]
 802cb9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802cb9c:	2f78      	cmp	r7, #120	; 0x78
 802cb9e:	4691      	mov	r9, r2
 802cba0:	4680      	mov	r8, r0
 802cba2:	460c      	mov	r4, r1
 802cba4:	469a      	mov	sl, r3
 802cba6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802cbaa:	d807      	bhi.n	802cbbc <_printf_i+0x28>
 802cbac:	2f62      	cmp	r7, #98	; 0x62
 802cbae:	d80a      	bhi.n	802cbc6 <_printf_i+0x32>
 802cbb0:	2f00      	cmp	r7, #0
 802cbb2:	f000 80d4 	beq.w	802cd5e <_printf_i+0x1ca>
 802cbb6:	2f58      	cmp	r7, #88	; 0x58
 802cbb8:	f000 80c0 	beq.w	802cd3c <_printf_i+0x1a8>
 802cbbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802cbc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802cbc4:	e03a      	b.n	802cc3c <_printf_i+0xa8>
 802cbc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802cbca:	2b15      	cmp	r3, #21
 802cbcc:	d8f6      	bhi.n	802cbbc <_printf_i+0x28>
 802cbce:	a101      	add	r1, pc, #4	; (adr r1, 802cbd4 <_printf_i+0x40>)
 802cbd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802cbd4:	0802cc2d 	.word	0x0802cc2d
 802cbd8:	0802cc41 	.word	0x0802cc41
 802cbdc:	0802cbbd 	.word	0x0802cbbd
 802cbe0:	0802cbbd 	.word	0x0802cbbd
 802cbe4:	0802cbbd 	.word	0x0802cbbd
 802cbe8:	0802cbbd 	.word	0x0802cbbd
 802cbec:	0802cc41 	.word	0x0802cc41
 802cbf0:	0802cbbd 	.word	0x0802cbbd
 802cbf4:	0802cbbd 	.word	0x0802cbbd
 802cbf8:	0802cbbd 	.word	0x0802cbbd
 802cbfc:	0802cbbd 	.word	0x0802cbbd
 802cc00:	0802cd45 	.word	0x0802cd45
 802cc04:	0802cc6d 	.word	0x0802cc6d
 802cc08:	0802ccff 	.word	0x0802ccff
 802cc0c:	0802cbbd 	.word	0x0802cbbd
 802cc10:	0802cbbd 	.word	0x0802cbbd
 802cc14:	0802cd67 	.word	0x0802cd67
 802cc18:	0802cbbd 	.word	0x0802cbbd
 802cc1c:	0802cc6d 	.word	0x0802cc6d
 802cc20:	0802cbbd 	.word	0x0802cbbd
 802cc24:	0802cbbd 	.word	0x0802cbbd
 802cc28:	0802cd07 	.word	0x0802cd07
 802cc2c:	682b      	ldr	r3, [r5, #0]
 802cc2e:	1d1a      	adds	r2, r3, #4
 802cc30:	681b      	ldr	r3, [r3, #0]
 802cc32:	602a      	str	r2, [r5, #0]
 802cc34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802cc38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802cc3c:	2301      	movs	r3, #1
 802cc3e:	e09f      	b.n	802cd80 <_printf_i+0x1ec>
 802cc40:	6820      	ldr	r0, [r4, #0]
 802cc42:	682b      	ldr	r3, [r5, #0]
 802cc44:	0607      	lsls	r7, r0, #24
 802cc46:	f103 0104 	add.w	r1, r3, #4
 802cc4a:	6029      	str	r1, [r5, #0]
 802cc4c:	d501      	bpl.n	802cc52 <_printf_i+0xbe>
 802cc4e:	681e      	ldr	r6, [r3, #0]
 802cc50:	e003      	b.n	802cc5a <_printf_i+0xc6>
 802cc52:	0646      	lsls	r6, r0, #25
 802cc54:	d5fb      	bpl.n	802cc4e <_printf_i+0xba>
 802cc56:	f9b3 6000 	ldrsh.w	r6, [r3]
 802cc5a:	2e00      	cmp	r6, #0
 802cc5c:	da03      	bge.n	802cc66 <_printf_i+0xd2>
 802cc5e:	232d      	movs	r3, #45	; 0x2d
 802cc60:	4276      	negs	r6, r6
 802cc62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802cc66:	485a      	ldr	r0, [pc, #360]	; (802cdd0 <_printf_i+0x23c>)
 802cc68:	230a      	movs	r3, #10
 802cc6a:	e012      	b.n	802cc92 <_printf_i+0xfe>
 802cc6c:	682b      	ldr	r3, [r5, #0]
 802cc6e:	6820      	ldr	r0, [r4, #0]
 802cc70:	1d19      	adds	r1, r3, #4
 802cc72:	6029      	str	r1, [r5, #0]
 802cc74:	0605      	lsls	r5, r0, #24
 802cc76:	d501      	bpl.n	802cc7c <_printf_i+0xe8>
 802cc78:	681e      	ldr	r6, [r3, #0]
 802cc7a:	e002      	b.n	802cc82 <_printf_i+0xee>
 802cc7c:	0641      	lsls	r1, r0, #25
 802cc7e:	d5fb      	bpl.n	802cc78 <_printf_i+0xe4>
 802cc80:	881e      	ldrh	r6, [r3, #0]
 802cc82:	4853      	ldr	r0, [pc, #332]	; (802cdd0 <_printf_i+0x23c>)
 802cc84:	2f6f      	cmp	r7, #111	; 0x6f
 802cc86:	bf0c      	ite	eq
 802cc88:	2308      	moveq	r3, #8
 802cc8a:	230a      	movne	r3, #10
 802cc8c:	2100      	movs	r1, #0
 802cc8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802cc92:	6865      	ldr	r5, [r4, #4]
 802cc94:	60a5      	str	r5, [r4, #8]
 802cc96:	2d00      	cmp	r5, #0
 802cc98:	bfa2      	ittt	ge
 802cc9a:	6821      	ldrge	r1, [r4, #0]
 802cc9c:	f021 0104 	bicge.w	r1, r1, #4
 802cca0:	6021      	strge	r1, [r4, #0]
 802cca2:	b90e      	cbnz	r6, 802cca8 <_printf_i+0x114>
 802cca4:	2d00      	cmp	r5, #0
 802cca6:	d04b      	beq.n	802cd40 <_printf_i+0x1ac>
 802cca8:	4615      	mov	r5, r2
 802ccaa:	fbb6 f1f3 	udiv	r1, r6, r3
 802ccae:	fb03 6711 	mls	r7, r3, r1, r6
 802ccb2:	5dc7      	ldrb	r7, [r0, r7]
 802ccb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802ccb8:	4637      	mov	r7, r6
 802ccba:	42bb      	cmp	r3, r7
 802ccbc:	460e      	mov	r6, r1
 802ccbe:	d9f4      	bls.n	802ccaa <_printf_i+0x116>
 802ccc0:	2b08      	cmp	r3, #8
 802ccc2:	d10b      	bne.n	802ccdc <_printf_i+0x148>
 802ccc4:	6823      	ldr	r3, [r4, #0]
 802ccc6:	07de      	lsls	r6, r3, #31
 802ccc8:	d508      	bpl.n	802ccdc <_printf_i+0x148>
 802ccca:	6923      	ldr	r3, [r4, #16]
 802cccc:	6861      	ldr	r1, [r4, #4]
 802ccce:	4299      	cmp	r1, r3
 802ccd0:	bfde      	ittt	le
 802ccd2:	2330      	movle	r3, #48	; 0x30
 802ccd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 802ccd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 802ccdc:	1b52      	subs	r2, r2, r5
 802ccde:	6122      	str	r2, [r4, #16]
 802cce0:	f8cd a000 	str.w	sl, [sp]
 802cce4:	464b      	mov	r3, r9
 802cce6:	aa03      	add	r2, sp, #12
 802cce8:	4621      	mov	r1, r4
 802ccea:	4640      	mov	r0, r8
 802ccec:	f7ff fee4 	bl	802cab8 <_printf_common>
 802ccf0:	3001      	adds	r0, #1
 802ccf2:	d14a      	bne.n	802cd8a <_printf_i+0x1f6>
 802ccf4:	f04f 30ff 	mov.w	r0, #4294967295
 802ccf8:	b004      	add	sp, #16
 802ccfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ccfe:	6823      	ldr	r3, [r4, #0]
 802cd00:	f043 0320 	orr.w	r3, r3, #32
 802cd04:	6023      	str	r3, [r4, #0]
 802cd06:	4833      	ldr	r0, [pc, #204]	; (802cdd4 <_printf_i+0x240>)
 802cd08:	2778      	movs	r7, #120	; 0x78
 802cd0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802cd0e:	6823      	ldr	r3, [r4, #0]
 802cd10:	6829      	ldr	r1, [r5, #0]
 802cd12:	061f      	lsls	r7, r3, #24
 802cd14:	f851 6b04 	ldr.w	r6, [r1], #4
 802cd18:	d402      	bmi.n	802cd20 <_printf_i+0x18c>
 802cd1a:	065f      	lsls	r7, r3, #25
 802cd1c:	bf48      	it	mi
 802cd1e:	b2b6      	uxthmi	r6, r6
 802cd20:	07df      	lsls	r7, r3, #31
 802cd22:	bf48      	it	mi
 802cd24:	f043 0320 	orrmi.w	r3, r3, #32
 802cd28:	6029      	str	r1, [r5, #0]
 802cd2a:	bf48      	it	mi
 802cd2c:	6023      	strmi	r3, [r4, #0]
 802cd2e:	b91e      	cbnz	r6, 802cd38 <_printf_i+0x1a4>
 802cd30:	6823      	ldr	r3, [r4, #0]
 802cd32:	f023 0320 	bic.w	r3, r3, #32
 802cd36:	6023      	str	r3, [r4, #0]
 802cd38:	2310      	movs	r3, #16
 802cd3a:	e7a7      	b.n	802cc8c <_printf_i+0xf8>
 802cd3c:	4824      	ldr	r0, [pc, #144]	; (802cdd0 <_printf_i+0x23c>)
 802cd3e:	e7e4      	b.n	802cd0a <_printf_i+0x176>
 802cd40:	4615      	mov	r5, r2
 802cd42:	e7bd      	b.n	802ccc0 <_printf_i+0x12c>
 802cd44:	682b      	ldr	r3, [r5, #0]
 802cd46:	6826      	ldr	r6, [r4, #0]
 802cd48:	6961      	ldr	r1, [r4, #20]
 802cd4a:	1d18      	adds	r0, r3, #4
 802cd4c:	6028      	str	r0, [r5, #0]
 802cd4e:	0635      	lsls	r5, r6, #24
 802cd50:	681b      	ldr	r3, [r3, #0]
 802cd52:	d501      	bpl.n	802cd58 <_printf_i+0x1c4>
 802cd54:	6019      	str	r1, [r3, #0]
 802cd56:	e002      	b.n	802cd5e <_printf_i+0x1ca>
 802cd58:	0670      	lsls	r0, r6, #25
 802cd5a:	d5fb      	bpl.n	802cd54 <_printf_i+0x1c0>
 802cd5c:	8019      	strh	r1, [r3, #0]
 802cd5e:	2300      	movs	r3, #0
 802cd60:	6123      	str	r3, [r4, #16]
 802cd62:	4615      	mov	r5, r2
 802cd64:	e7bc      	b.n	802cce0 <_printf_i+0x14c>
 802cd66:	682b      	ldr	r3, [r5, #0]
 802cd68:	1d1a      	adds	r2, r3, #4
 802cd6a:	602a      	str	r2, [r5, #0]
 802cd6c:	681d      	ldr	r5, [r3, #0]
 802cd6e:	6862      	ldr	r2, [r4, #4]
 802cd70:	2100      	movs	r1, #0
 802cd72:	4628      	mov	r0, r5
 802cd74:	f7e3 fa44 	bl	8010200 <memchr>
 802cd78:	b108      	cbz	r0, 802cd7e <_printf_i+0x1ea>
 802cd7a:	1b40      	subs	r0, r0, r5
 802cd7c:	6060      	str	r0, [r4, #4]
 802cd7e:	6863      	ldr	r3, [r4, #4]
 802cd80:	6123      	str	r3, [r4, #16]
 802cd82:	2300      	movs	r3, #0
 802cd84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802cd88:	e7aa      	b.n	802cce0 <_printf_i+0x14c>
 802cd8a:	6923      	ldr	r3, [r4, #16]
 802cd8c:	462a      	mov	r2, r5
 802cd8e:	4649      	mov	r1, r9
 802cd90:	4640      	mov	r0, r8
 802cd92:	47d0      	blx	sl
 802cd94:	3001      	adds	r0, #1
 802cd96:	d0ad      	beq.n	802ccf4 <_printf_i+0x160>
 802cd98:	6823      	ldr	r3, [r4, #0]
 802cd9a:	079b      	lsls	r3, r3, #30
 802cd9c:	d413      	bmi.n	802cdc6 <_printf_i+0x232>
 802cd9e:	68e0      	ldr	r0, [r4, #12]
 802cda0:	9b03      	ldr	r3, [sp, #12]
 802cda2:	4298      	cmp	r0, r3
 802cda4:	bfb8      	it	lt
 802cda6:	4618      	movlt	r0, r3
 802cda8:	e7a6      	b.n	802ccf8 <_printf_i+0x164>
 802cdaa:	2301      	movs	r3, #1
 802cdac:	4632      	mov	r2, r6
 802cdae:	4649      	mov	r1, r9
 802cdb0:	4640      	mov	r0, r8
 802cdb2:	47d0      	blx	sl
 802cdb4:	3001      	adds	r0, #1
 802cdb6:	d09d      	beq.n	802ccf4 <_printf_i+0x160>
 802cdb8:	3501      	adds	r5, #1
 802cdba:	68e3      	ldr	r3, [r4, #12]
 802cdbc:	9903      	ldr	r1, [sp, #12]
 802cdbe:	1a5b      	subs	r3, r3, r1
 802cdc0:	42ab      	cmp	r3, r5
 802cdc2:	dcf2      	bgt.n	802cdaa <_printf_i+0x216>
 802cdc4:	e7eb      	b.n	802cd9e <_printf_i+0x20a>
 802cdc6:	2500      	movs	r5, #0
 802cdc8:	f104 0619 	add.w	r6, r4, #25
 802cdcc:	e7f5      	b.n	802cdba <_printf_i+0x226>
 802cdce:	bf00      	nop
 802cdd0:	08034838 	.word	0x08034838
 802cdd4:	08034849 	.word	0x08034849

0802cdd8 <_scanf_float>:
 802cdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cddc:	b087      	sub	sp, #28
 802cdde:	4617      	mov	r7, r2
 802cde0:	9303      	str	r3, [sp, #12]
 802cde2:	688b      	ldr	r3, [r1, #8]
 802cde4:	1e5a      	subs	r2, r3, #1
 802cde6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802cdea:	bf83      	ittte	hi
 802cdec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802cdf0:	195b      	addhi	r3, r3, r5
 802cdf2:	9302      	strhi	r3, [sp, #8]
 802cdf4:	2300      	movls	r3, #0
 802cdf6:	bf86      	itte	hi
 802cdf8:	f240 135d 	movwhi	r3, #349	; 0x15d
 802cdfc:	608b      	strhi	r3, [r1, #8]
 802cdfe:	9302      	strls	r3, [sp, #8]
 802ce00:	680b      	ldr	r3, [r1, #0]
 802ce02:	468b      	mov	fp, r1
 802ce04:	2500      	movs	r5, #0
 802ce06:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 802ce0a:	f84b 3b1c 	str.w	r3, [fp], #28
 802ce0e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 802ce12:	4680      	mov	r8, r0
 802ce14:	460c      	mov	r4, r1
 802ce16:	465e      	mov	r6, fp
 802ce18:	46aa      	mov	sl, r5
 802ce1a:	46a9      	mov	r9, r5
 802ce1c:	9501      	str	r5, [sp, #4]
 802ce1e:	68a2      	ldr	r2, [r4, #8]
 802ce20:	b152      	cbz	r2, 802ce38 <_scanf_float+0x60>
 802ce22:	683b      	ldr	r3, [r7, #0]
 802ce24:	781b      	ldrb	r3, [r3, #0]
 802ce26:	2b4e      	cmp	r3, #78	; 0x4e
 802ce28:	d864      	bhi.n	802cef4 <_scanf_float+0x11c>
 802ce2a:	2b40      	cmp	r3, #64	; 0x40
 802ce2c:	d83c      	bhi.n	802cea8 <_scanf_float+0xd0>
 802ce2e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 802ce32:	b2c8      	uxtb	r0, r1
 802ce34:	280e      	cmp	r0, #14
 802ce36:	d93a      	bls.n	802ceae <_scanf_float+0xd6>
 802ce38:	f1b9 0f00 	cmp.w	r9, #0
 802ce3c:	d003      	beq.n	802ce46 <_scanf_float+0x6e>
 802ce3e:	6823      	ldr	r3, [r4, #0]
 802ce40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802ce44:	6023      	str	r3, [r4, #0]
 802ce46:	f10a 3aff 	add.w	sl, sl, #4294967295
 802ce4a:	f1ba 0f01 	cmp.w	sl, #1
 802ce4e:	f200 8113 	bhi.w	802d078 <_scanf_float+0x2a0>
 802ce52:	455e      	cmp	r6, fp
 802ce54:	f200 8105 	bhi.w	802d062 <_scanf_float+0x28a>
 802ce58:	2501      	movs	r5, #1
 802ce5a:	4628      	mov	r0, r5
 802ce5c:	b007      	add	sp, #28
 802ce5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ce62:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 802ce66:	2a0d      	cmp	r2, #13
 802ce68:	d8e6      	bhi.n	802ce38 <_scanf_float+0x60>
 802ce6a:	a101      	add	r1, pc, #4	; (adr r1, 802ce70 <_scanf_float+0x98>)
 802ce6c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802ce70:	0802cfaf 	.word	0x0802cfaf
 802ce74:	0802ce39 	.word	0x0802ce39
 802ce78:	0802ce39 	.word	0x0802ce39
 802ce7c:	0802ce39 	.word	0x0802ce39
 802ce80:	0802d00f 	.word	0x0802d00f
 802ce84:	0802cfe7 	.word	0x0802cfe7
 802ce88:	0802ce39 	.word	0x0802ce39
 802ce8c:	0802ce39 	.word	0x0802ce39
 802ce90:	0802cfbd 	.word	0x0802cfbd
 802ce94:	0802ce39 	.word	0x0802ce39
 802ce98:	0802ce39 	.word	0x0802ce39
 802ce9c:	0802ce39 	.word	0x0802ce39
 802cea0:	0802ce39 	.word	0x0802ce39
 802cea4:	0802cf75 	.word	0x0802cf75
 802cea8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 802ceac:	e7db      	b.n	802ce66 <_scanf_float+0x8e>
 802ceae:	290e      	cmp	r1, #14
 802ceb0:	d8c2      	bhi.n	802ce38 <_scanf_float+0x60>
 802ceb2:	a001      	add	r0, pc, #4	; (adr r0, 802ceb8 <_scanf_float+0xe0>)
 802ceb4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 802ceb8:	0802cf67 	.word	0x0802cf67
 802cebc:	0802ce39 	.word	0x0802ce39
 802cec0:	0802cf67 	.word	0x0802cf67
 802cec4:	0802cffb 	.word	0x0802cffb
 802cec8:	0802ce39 	.word	0x0802ce39
 802cecc:	0802cf15 	.word	0x0802cf15
 802ced0:	0802cf51 	.word	0x0802cf51
 802ced4:	0802cf51 	.word	0x0802cf51
 802ced8:	0802cf51 	.word	0x0802cf51
 802cedc:	0802cf51 	.word	0x0802cf51
 802cee0:	0802cf51 	.word	0x0802cf51
 802cee4:	0802cf51 	.word	0x0802cf51
 802cee8:	0802cf51 	.word	0x0802cf51
 802ceec:	0802cf51 	.word	0x0802cf51
 802cef0:	0802cf51 	.word	0x0802cf51
 802cef4:	2b6e      	cmp	r3, #110	; 0x6e
 802cef6:	d809      	bhi.n	802cf0c <_scanf_float+0x134>
 802cef8:	2b60      	cmp	r3, #96	; 0x60
 802cefa:	d8b2      	bhi.n	802ce62 <_scanf_float+0x8a>
 802cefc:	2b54      	cmp	r3, #84	; 0x54
 802cefe:	d077      	beq.n	802cff0 <_scanf_float+0x218>
 802cf00:	2b59      	cmp	r3, #89	; 0x59
 802cf02:	d199      	bne.n	802ce38 <_scanf_float+0x60>
 802cf04:	2d07      	cmp	r5, #7
 802cf06:	d197      	bne.n	802ce38 <_scanf_float+0x60>
 802cf08:	2508      	movs	r5, #8
 802cf0a:	e029      	b.n	802cf60 <_scanf_float+0x188>
 802cf0c:	2b74      	cmp	r3, #116	; 0x74
 802cf0e:	d06f      	beq.n	802cff0 <_scanf_float+0x218>
 802cf10:	2b79      	cmp	r3, #121	; 0x79
 802cf12:	e7f6      	b.n	802cf02 <_scanf_float+0x12a>
 802cf14:	6821      	ldr	r1, [r4, #0]
 802cf16:	05c8      	lsls	r0, r1, #23
 802cf18:	d51a      	bpl.n	802cf50 <_scanf_float+0x178>
 802cf1a:	9b02      	ldr	r3, [sp, #8]
 802cf1c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 802cf20:	6021      	str	r1, [r4, #0]
 802cf22:	f109 0901 	add.w	r9, r9, #1
 802cf26:	b11b      	cbz	r3, 802cf30 <_scanf_float+0x158>
 802cf28:	3b01      	subs	r3, #1
 802cf2a:	3201      	adds	r2, #1
 802cf2c:	9302      	str	r3, [sp, #8]
 802cf2e:	60a2      	str	r2, [r4, #8]
 802cf30:	68a3      	ldr	r3, [r4, #8]
 802cf32:	3b01      	subs	r3, #1
 802cf34:	60a3      	str	r3, [r4, #8]
 802cf36:	6923      	ldr	r3, [r4, #16]
 802cf38:	3301      	adds	r3, #1
 802cf3a:	6123      	str	r3, [r4, #16]
 802cf3c:	687b      	ldr	r3, [r7, #4]
 802cf3e:	3b01      	subs	r3, #1
 802cf40:	2b00      	cmp	r3, #0
 802cf42:	607b      	str	r3, [r7, #4]
 802cf44:	f340 8084 	ble.w	802d050 <_scanf_float+0x278>
 802cf48:	683b      	ldr	r3, [r7, #0]
 802cf4a:	3301      	adds	r3, #1
 802cf4c:	603b      	str	r3, [r7, #0]
 802cf4e:	e766      	b.n	802ce1e <_scanf_float+0x46>
 802cf50:	eb1a 0f05 	cmn.w	sl, r5
 802cf54:	f47f af70 	bne.w	802ce38 <_scanf_float+0x60>
 802cf58:	6822      	ldr	r2, [r4, #0]
 802cf5a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 802cf5e:	6022      	str	r2, [r4, #0]
 802cf60:	f806 3b01 	strb.w	r3, [r6], #1
 802cf64:	e7e4      	b.n	802cf30 <_scanf_float+0x158>
 802cf66:	6822      	ldr	r2, [r4, #0]
 802cf68:	0610      	lsls	r0, r2, #24
 802cf6a:	f57f af65 	bpl.w	802ce38 <_scanf_float+0x60>
 802cf6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802cf72:	e7f4      	b.n	802cf5e <_scanf_float+0x186>
 802cf74:	f1ba 0f00 	cmp.w	sl, #0
 802cf78:	d10e      	bne.n	802cf98 <_scanf_float+0x1c0>
 802cf7a:	f1b9 0f00 	cmp.w	r9, #0
 802cf7e:	d10e      	bne.n	802cf9e <_scanf_float+0x1c6>
 802cf80:	6822      	ldr	r2, [r4, #0]
 802cf82:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 802cf86:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 802cf8a:	d108      	bne.n	802cf9e <_scanf_float+0x1c6>
 802cf8c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802cf90:	6022      	str	r2, [r4, #0]
 802cf92:	f04f 0a01 	mov.w	sl, #1
 802cf96:	e7e3      	b.n	802cf60 <_scanf_float+0x188>
 802cf98:	f1ba 0f02 	cmp.w	sl, #2
 802cf9c:	d055      	beq.n	802d04a <_scanf_float+0x272>
 802cf9e:	2d01      	cmp	r5, #1
 802cfa0:	d002      	beq.n	802cfa8 <_scanf_float+0x1d0>
 802cfa2:	2d04      	cmp	r5, #4
 802cfa4:	f47f af48 	bne.w	802ce38 <_scanf_float+0x60>
 802cfa8:	3501      	adds	r5, #1
 802cfaa:	b2ed      	uxtb	r5, r5
 802cfac:	e7d8      	b.n	802cf60 <_scanf_float+0x188>
 802cfae:	f1ba 0f01 	cmp.w	sl, #1
 802cfb2:	f47f af41 	bne.w	802ce38 <_scanf_float+0x60>
 802cfb6:	f04f 0a02 	mov.w	sl, #2
 802cfba:	e7d1      	b.n	802cf60 <_scanf_float+0x188>
 802cfbc:	b97d      	cbnz	r5, 802cfde <_scanf_float+0x206>
 802cfbe:	f1b9 0f00 	cmp.w	r9, #0
 802cfc2:	f47f af3c 	bne.w	802ce3e <_scanf_float+0x66>
 802cfc6:	6822      	ldr	r2, [r4, #0]
 802cfc8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 802cfcc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 802cfd0:	f47f af39 	bne.w	802ce46 <_scanf_float+0x6e>
 802cfd4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802cfd8:	6022      	str	r2, [r4, #0]
 802cfda:	2501      	movs	r5, #1
 802cfdc:	e7c0      	b.n	802cf60 <_scanf_float+0x188>
 802cfde:	2d03      	cmp	r5, #3
 802cfe0:	d0e2      	beq.n	802cfa8 <_scanf_float+0x1d0>
 802cfe2:	2d05      	cmp	r5, #5
 802cfe4:	e7de      	b.n	802cfa4 <_scanf_float+0x1cc>
 802cfe6:	2d02      	cmp	r5, #2
 802cfe8:	f47f af26 	bne.w	802ce38 <_scanf_float+0x60>
 802cfec:	2503      	movs	r5, #3
 802cfee:	e7b7      	b.n	802cf60 <_scanf_float+0x188>
 802cff0:	2d06      	cmp	r5, #6
 802cff2:	f47f af21 	bne.w	802ce38 <_scanf_float+0x60>
 802cff6:	2507      	movs	r5, #7
 802cff8:	e7b2      	b.n	802cf60 <_scanf_float+0x188>
 802cffa:	6822      	ldr	r2, [r4, #0]
 802cffc:	0591      	lsls	r1, r2, #22
 802cffe:	f57f af1b 	bpl.w	802ce38 <_scanf_float+0x60>
 802d002:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 802d006:	6022      	str	r2, [r4, #0]
 802d008:	f8cd 9004 	str.w	r9, [sp, #4]
 802d00c:	e7a8      	b.n	802cf60 <_scanf_float+0x188>
 802d00e:	6822      	ldr	r2, [r4, #0]
 802d010:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 802d014:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 802d018:	d006      	beq.n	802d028 <_scanf_float+0x250>
 802d01a:	0550      	lsls	r0, r2, #21
 802d01c:	f57f af0c 	bpl.w	802ce38 <_scanf_float+0x60>
 802d020:	f1b9 0f00 	cmp.w	r9, #0
 802d024:	f43f af0f 	beq.w	802ce46 <_scanf_float+0x6e>
 802d028:	0591      	lsls	r1, r2, #22
 802d02a:	bf58      	it	pl
 802d02c:	9901      	ldrpl	r1, [sp, #4]
 802d02e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802d032:	bf58      	it	pl
 802d034:	eba9 0101 	subpl.w	r1, r9, r1
 802d038:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 802d03c:	bf58      	it	pl
 802d03e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 802d042:	6022      	str	r2, [r4, #0]
 802d044:	f04f 0900 	mov.w	r9, #0
 802d048:	e78a      	b.n	802cf60 <_scanf_float+0x188>
 802d04a:	f04f 0a03 	mov.w	sl, #3
 802d04e:	e787      	b.n	802cf60 <_scanf_float+0x188>
 802d050:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802d054:	4639      	mov	r1, r7
 802d056:	4640      	mov	r0, r8
 802d058:	4798      	blx	r3
 802d05a:	2800      	cmp	r0, #0
 802d05c:	f43f aedf 	beq.w	802ce1e <_scanf_float+0x46>
 802d060:	e6ea      	b.n	802ce38 <_scanf_float+0x60>
 802d062:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d066:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802d06a:	463a      	mov	r2, r7
 802d06c:	4640      	mov	r0, r8
 802d06e:	4798      	blx	r3
 802d070:	6923      	ldr	r3, [r4, #16]
 802d072:	3b01      	subs	r3, #1
 802d074:	6123      	str	r3, [r4, #16]
 802d076:	e6ec      	b.n	802ce52 <_scanf_float+0x7a>
 802d078:	1e6b      	subs	r3, r5, #1
 802d07a:	2b06      	cmp	r3, #6
 802d07c:	d825      	bhi.n	802d0ca <_scanf_float+0x2f2>
 802d07e:	2d02      	cmp	r5, #2
 802d080:	d836      	bhi.n	802d0f0 <_scanf_float+0x318>
 802d082:	455e      	cmp	r6, fp
 802d084:	f67f aee8 	bls.w	802ce58 <_scanf_float+0x80>
 802d088:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d08c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802d090:	463a      	mov	r2, r7
 802d092:	4640      	mov	r0, r8
 802d094:	4798      	blx	r3
 802d096:	6923      	ldr	r3, [r4, #16]
 802d098:	3b01      	subs	r3, #1
 802d09a:	6123      	str	r3, [r4, #16]
 802d09c:	e7f1      	b.n	802d082 <_scanf_float+0x2aa>
 802d09e:	9802      	ldr	r0, [sp, #8]
 802d0a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d0a4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 802d0a8:	9002      	str	r0, [sp, #8]
 802d0aa:	463a      	mov	r2, r7
 802d0ac:	4640      	mov	r0, r8
 802d0ae:	4798      	blx	r3
 802d0b0:	6923      	ldr	r3, [r4, #16]
 802d0b2:	3b01      	subs	r3, #1
 802d0b4:	6123      	str	r3, [r4, #16]
 802d0b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 802d0ba:	fa5f fa8a 	uxtb.w	sl, sl
 802d0be:	f1ba 0f02 	cmp.w	sl, #2
 802d0c2:	d1ec      	bne.n	802d09e <_scanf_float+0x2c6>
 802d0c4:	3d03      	subs	r5, #3
 802d0c6:	b2ed      	uxtb	r5, r5
 802d0c8:	1b76      	subs	r6, r6, r5
 802d0ca:	6823      	ldr	r3, [r4, #0]
 802d0cc:	05da      	lsls	r2, r3, #23
 802d0ce:	d52f      	bpl.n	802d130 <_scanf_float+0x358>
 802d0d0:	055b      	lsls	r3, r3, #21
 802d0d2:	d510      	bpl.n	802d0f6 <_scanf_float+0x31e>
 802d0d4:	455e      	cmp	r6, fp
 802d0d6:	f67f aebf 	bls.w	802ce58 <_scanf_float+0x80>
 802d0da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d0de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802d0e2:	463a      	mov	r2, r7
 802d0e4:	4640      	mov	r0, r8
 802d0e6:	4798      	blx	r3
 802d0e8:	6923      	ldr	r3, [r4, #16]
 802d0ea:	3b01      	subs	r3, #1
 802d0ec:	6123      	str	r3, [r4, #16]
 802d0ee:	e7f1      	b.n	802d0d4 <_scanf_float+0x2fc>
 802d0f0:	46aa      	mov	sl, r5
 802d0f2:	9602      	str	r6, [sp, #8]
 802d0f4:	e7df      	b.n	802d0b6 <_scanf_float+0x2de>
 802d0f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 802d0fa:	6923      	ldr	r3, [r4, #16]
 802d0fc:	2965      	cmp	r1, #101	; 0x65
 802d0fe:	f103 33ff 	add.w	r3, r3, #4294967295
 802d102:	f106 35ff 	add.w	r5, r6, #4294967295
 802d106:	6123      	str	r3, [r4, #16]
 802d108:	d00c      	beq.n	802d124 <_scanf_float+0x34c>
 802d10a:	2945      	cmp	r1, #69	; 0x45
 802d10c:	d00a      	beq.n	802d124 <_scanf_float+0x34c>
 802d10e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d112:	463a      	mov	r2, r7
 802d114:	4640      	mov	r0, r8
 802d116:	4798      	blx	r3
 802d118:	6923      	ldr	r3, [r4, #16]
 802d11a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 802d11e:	3b01      	subs	r3, #1
 802d120:	1eb5      	subs	r5, r6, #2
 802d122:	6123      	str	r3, [r4, #16]
 802d124:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d128:	463a      	mov	r2, r7
 802d12a:	4640      	mov	r0, r8
 802d12c:	4798      	blx	r3
 802d12e:	462e      	mov	r6, r5
 802d130:	6825      	ldr	r5, [r4, #0]
 802d132:	f015 0510 	ands.w	r5, r5, #16
 802d136:	d158      	bne.n	802d1ea <_scanf_float+0x412>
 802d138:	7035      	strb	r5, [r6, #0]
 802d13a:	6823      	ldr	r3, [r4, #0]
 802d13c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 802d140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802d144:	d11c      	bne.n	802d180 <_scanf_float+0x3a8>
 802d146:	9b01      	ldr	r3, [sp, #4]
 802d148:	454b      	cmp	r3, r9
 802d14a:	eba3 0209 	sub.w	r2, r3, r9
 802d14e:	d124      	bne.n	802d19a <_scanf_float+0x3c2>
 802d150:	2200      	movs	r2, #0
 802d152:	4659      	mov	r1, fp
 802d154:	4640      	mov	r0, r8
 802d156:	f002 fe2b 	bl	802fdb0 <_strtod_r>
 802d15a:	9b03      	ldr	r3, [sp, #12]
 802d15c:	6821      	ldr	r1, [r4, #0]
 802d15e:	681b      	ldr	r3, [r3, #0]
 802d160:	f011 0f02 	tst.w	r1, #2
 802d164:	ec57 6b10 	vmov	r6, r7, d0
 802d168:	f103 0204 	add.w	r2, r3, #4
 802d16c:	d020      	beq.n	802d1b0 <_scanf_float+0x3d8>
 802d16e:	9903      	ldr	r1, [sp, #12]
 802d170:	600a      	str	r2, [r1, #0]
 802d172:	681b      	ldr	r3, [r3, #0]
 802d174:	e9c3 6700 	strd	r6, r7, [r3]
 802d178:	68e3      	ldr	r3, [r4, #12]
 802d17a:	3301      	adds	r3, #1
 802d17c:	60e3      	str	r3, [r4, #12]
 802d17e:	e66c      	b.n	802ce5a <_scanf_float+0x82>
 802d180:	9b04      	ldr	r3, [sp, #16]
 802d182:	2b00      	cmp	r3, #0
 802d184:	d0e4      	beq.n	802d150 <_scanf_float+0x378>
 802d186:	9905      	ldr	r1, [sp, #20]
 802d188:	230a      	movs	r3, #10
 802d18a:	462a      	mov	r2, r5
 802d18c:	3101      	adds	r1, #1
 802d18e:	4640      	mov	r0, r8
 802d190:	f002 fe96 	bl	802fec0 <_strtol_r>
 802d194:	9b04      	ldr	r3, [sp, #16]
 802d196:	9e05      	ldr	r6, [sp, #20]
 802d198:	1ac2      	subs	r2, r0, r3
 802d19a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 802d19e:	429e      	cmp	r6, r3
 802d1a0:	bf28      	it	cs
 802d1a2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 802d1a6:	4912      	ldr	r1, [pc, #72]	; (802d1f0 <_scanf_float+0x418>)
 802d1a8:	4630      	mov	r0, r6
 802d1aa:	f000 f93f 	bl	802d42c <siprintf>
 802d1ae:	e7cf      	b.n	802d150 <_scanf_float+0x378>
 802d1b0:	f011 0f04 	tst.w	r1, #4
 802d1b4:	9903      	ldr	r1, [sp, #12]
 802d1b6:	600a      	str	r2, [r1, #0]
 802d1b8:	d1db      	bne.n	802d172 <_scanf_float+0x39a>
 802d1ba:	f8d3 8000 	ldr.w	r8, [r3]
 802d1be:	ee10 2a10 	vmov	r2, s0
 802d1c2:	ee10 0a10 	vmov	r0, s0
 802d1c6:	463b      	mov	r3, r7
 802d1c8:	4639      	mov	r1, r7
 802d1ca:	f7e3 fcc7 	bl	8010b5c <__aeabi_dcmpun>
 802d1ce:	b128      	cbz	r0, 802d1dc <_scanf_float+0x404>
 802d1d0:	4808      	ldr	r0, [pc, #32]	; (802d1f4 <_scanf_float+0x41c>)
 802d1d2:	f000 fc5f 	bl	802da94 <nanf>
 802d1d6:	ed88 0a00 	vstr	s0, [r8]
 802d1da:	e7cd      	b.n	802d178 <_scanf_float+0x3a0>
 802d1dc:	4630      	mov	r0, r6
 802d1de:	4639      	mov	r1, r7
 802d1e0:	f7e3 fd1a 	bl	8010c18 <__aeabi_d2f>
 802d1e4:	f8c8 0000 	str.w	r0, [r8]
 802d1e8:	e7c6      	b.n	802d178 <_scanf_float+0x3a0>
 802d1ea:	2500      	movs	r5, #0
 802d1ec:	e635      	b.n	802ce5a <_scanf_float+0x82>
 802d1ee:	bf00      	nop
 802d1f0:	0803485a 	.word	0x0803485a
 802d1f4:	08034827 	.word	0x08034827

0802d1f8 <std>:
 802d1f8:	2300      	movs	r3, #0
 802d1fa:	b510      	push	{r4, lr}
 802d1fc:	4604      	mov	r4, r0
 802d1fe:	e9c0 3300 	strd	r3, r3, [r0]
 802d202:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802d206:	6083      	str	r3, [r0, #8]
 802d208:	8181      	strh	r1, [r0, #12]
 802d20a:	6643      	str	r3, [r0, #100]	; 0x64
 802d20c:	81c2      	strh	r2, [r0, #14]
 802d20e:	6183      	str	r3, [r0, #24]
 802d210:	4619      	mov	r1, r3
 802d212:	2208      	movs	r2, #8
 802d214:	305c      	adds	r0, #92	; 0x5c
 802d216:	f000 fa59 	bl	802d6cc <memset>
 802d21a:	4b0d      	ldr	r3, [pc, #52]	; (802d250 <std+0x58>)
 802d21c:	6263      	str	r3, [r4, #36]	; 0x24
 802d21e:	4b0d      	ldr	r3, [pc, #52]	; (802d254 <std+0x5c>)
 802d220:	62a3      	str	r3, [r4, #40]	; 0x28
 802d222:	4b0d      	ldr	r3, [pc, #52]	; (802d258 <std+0x60>)
 802d224:	62e3      	str	r3, [r4, #44]	; 0x2c
 802d226:	4b0d      	ldr	r3, [pc, #52]	; (802d25c <std+0x64>)
 802d228:	6323      	str	r3, [r4, #48]	; 0x30
 802d22a:	4b0d      	ldr	r3, [pc, #52]	; (802d260 <std+0x68>)
 802d22c:	6224      	str	r4, [r4, #32]
 802d22e:	429c      	cmp	r4, r3
 802d230:	d006      	beq.n	802d240 <std+0x48>
 802d232:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802d236:	4294      	cmp	r4, r2
 802d238:	d002      	beq.n	802d240 <std+0x48>
 802d23a:	33d0      	adds	r3, #208	; 0xd0
 802d23c:	429c      	cmp	r4, r3
 802d23e:	d105      	bne.n	802d24c <std+0x54>
 802d240:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802d244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d248:	f000 bc0a 	b.w	802da60 <__retarget_lock_init_recursive>
 802d24c:	bd10      	pop	{r4, pc}
 802d24e:	bf00      	nop
 802d250:	0802d4c5 	.word	0x0802d4c5
 802d254:	0802d4eb 	.word	0x0802d4eb
 802d258:	0802d523 	.word	0x0802d523
 802d25c:	0802d547 	.word	0x0802d547
 802d260:	2000d9ac 	.word	0x2000d9ac

0802d264 <stdio_exit_handler>:
 802d264:	4a02      	ldr	r2, [pc, #8]	; (802d270 <stdio_exit_handler+0xc>)
 802d266:	4903      	ldr	r1, [pc, #12]	; (802d274 <stdio_exit_handler+0x10>)
 802d268:	4803      	ldr	r0, [pc, #12]	; (802d278 <stdio_exit_handler+0x14>)
 802d26a:	f000 b87b 	b.w	802d364 <_fwalk_sglue>
 802d26e:	bf00      	nop
 802d270:	20000130 	.word	0x20000130
 802d274:	08030b49 	.word	0x08030b49
 802d278:	2000013c 	.word	0x2000013c

0802d27c <cleanup_stdio>:
 802d27c:	6841      	ldr	r1, [r0, #4]
 802d27e:	4b0c      	ldr	r3, [pc, #48]	; (802d2b0 <cleanup_stdio+0x34>)
 802d280:	4299      	cmp	r1, r3
 802d282:	b510      	push	{r4, lr}
 802d284:	4604      	mov	r4, r0
 802d286:	d001      	beq.n	802d28c <cleanup_stdio+0x10>
 802d288:	f003 fc5e 	bl	8030b48 <_fflush_r>
 802d28c:	68a1      	ldr	r1, [r4, #8]
 802d28e:	4b09      	ldr	r3, [pc, #36]	; (802d2b4 <cleanup_stdio+0x38>)
 802d290:	4299      	cmp	r1, r3
 802d292:	d002      	beq.n	802d29a <cleanup_stdio+0x1e>
 802d294:	4620      	mov	r0, r4
 802d296:	f003 fc57 	bl	8030b48 <_fflush_r>
 802d29a:	68e1      	ldr	r1, [r4, #12]
 802d29c:	4b06      	ldr	r3, [pc, #24]	; (802d2b8 <cleanup_stdio+0x3c>)
 802d29e:	4299      	cmp	r1, r3
 802d2a0:	d004      	beq.n	802d2ac <cleanup_stdio+0x30>
 802d2a2:	4620      	mov	r0, r4
 802d2a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d2a8:	f003 bc4e 	b.w	8030b48 <_fflush_r>
 802d2ac:	bd10      	pop	{r4, pc}
 802d2ae:	bf00      	nop
 802d2b0:	2000d9ac 	.word	0x2000d9ac
 802d2b4:	2000da14 	.word	0x2000da14
 802d2b8:	2000da7c 	.word	0x2000da7c

0802d2bc <global_stdio_init.part.0>:
 802d2bc:	b510      	push	{r4, lr}
 802d2be:	4b0b      	ldr	r3, [pc, #44]	; (802d2ec <global_stdio_init.part.0+0x30>)
 802d2c0:	4c0b      	ldr	r4, [pc, #44]	; (802d2f0 <global_stdio_init.part.0+0x34>)
 802d2c2:	4a0c      	ldr	r2, [pc, #48]	; (802d2f4 <global_stdio_init.part.0+0x38>)
 802d2c4:	601a      	str	r2, [r3, #0]
 802d2c6:	4620      	mov	r0, r4
 802d2c8:	2200      	movs	r2, #0
 802d2ca:	2104      	movs	r1, #4
 802d2cc:	f7ff ff94 	bl	802d1f8 <std>
 802d2d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 802d2d4:	2201      	movs	r2, #1
 802d2d6:	2109      	movs	r1, #9
 802d2d8:	f7ff ff8e 	bl	802d1f8 <std>
 802d2dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 802d2e0:	2202      	movs	r2, #2
 802d2e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d2e6:	2112      	movs	r1, #18
 802d2e8:	f7ff bf86 	b.w	802d1f8 <std>
 802d2ec:	2000dae4 	.word	0x2000dae4
 802d2f0:	2000d9ac 	.word	0x2000d9ac
 802d2f4:	0802d265 	.word	0x0802d265

0802d2f8 <__sfp_lock_acquire>:
 802d2f8:	4801      	ldr	r0, [pc, #4]	; (802d300 <__sfp_lock_acquire+0x8>)
 802d2fa:	f000 bbb2 	b.w	802da62 <__retarget_lock_acquire_recursive>
 802d2fe:	bf00      	nop
 802d300:	2000daed 	.word	0x2000daed

0802d304 <__sfp_lock_release>:
 802d304:	4801      	ldr	r0, [pc, #4]	; (802d30c <__sfp_lock_release+0x8>)
 802d306:	f000 bbad 	b.w	802da64 <__retarget_lock_release_recursive>
 802d30a:	bf00      	nop
 802d30c:	2000daed 	.word	0x2000daed

0802d310 <__sinit>:
 802d310:	b510      	push	{r4, lr}
 802d312:	4604      	mov	r4, r0
 802d314:	f7ff fff0 	bl	802d2f8 <__sfp_lock_acquire>
 802d318:	6a23      	ldr	r3, [r4, #32]
 802d31a:	b11b      	cbz	r3, 802d324 <__sinit+0x14>
 802d31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d320:	f7ff bff0 	b.w	802d304 <__sfp_lock_release>
 802d324:	4b04      	ldr	r3, [pc, #16]	; (802d338 <__sinit+0x28>)
 802d326:	6223      	str	r3, [r4, #32]
 802d328:	4b04      	ldr	r3, [pc, #16]	; (802d33c <__sinit+0x2c>)
 802d32a:	681b      	ldr	r3, [r3, #0]
 802d32c:	2b00      	cmp	r3, #0
 802d32e:	d1f5      	bne.n	802d31c <__sinit+0xc>
 802d330:	f7ff ffc4 	bl	802d2bc <global_stdio_init.part.0>
 802d334:	e7f2      	b.n	802d31c <__sinit+0xc>
 802d336:	bf00      	nop
 802d338:	0802d27d 	.word	0x0802d27d
 802d33c:	2000dae4 	.word	0x2000dae4

0802d340 <fiprintf>:
 802d340:	b40e      	push	{r1, r2, r3}
 802d342:	b503      	push	{r0, r1, lr}
 802d344:	4601      	mov	r1, r0
 802d346:	ab03      	add	r3, sp, #12
 802d348:	4805      	ldr	r0, [pc, #20]	; (802d360 <fiprintf+0x20>)
 802d34a:	f853 2b04 	ldr.w	r2, [r3], #4
 802d34e:	6800      	ldr	r0, [r0, #0]
 802d350:	9301      	str	r3, [sp, #4]
 802d352:	f003 f90b 	bl	803056c <_vfiprintf_r>
 802d356:	b002      	add	sp, #8
 802d358:	f85d eb04 	ldr.w	lr, [sp], #4
 802d35c:	b003      	add	sp, #12
 802d35e:	4770      	bx	lr
 802d360:	20000188 	.word	0x20000188

0802d364 <_fwalk_sglue>:
 802d364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802d368:	4607      	mov	r7, r0
 802d36a:	4688      	mov	r8, r1
 802d36c:	4614      	mov	r4, r2
 802d36e:	2600      	movs	r6, #0
 802d370:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802d374:	f1b9 0901 	subs.w	r9, r9, #1
 802d378:	d505      	bpl.n	802d386 <_fwalk_sglue+0x22>
 802d37a:	6824      	ldr	r4, [r4, #0]
 802d37c:	2c00      	cmp	r4, #0
 802d37e:	d1f7      	bne.n	802d370 <_fwalk_sglue+0xc>
 802d380:	4630      	mov	r0, r6
 802d382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802d386:	89ab      	ldrh	r3, [r5, #12]
 802d388:	2b01      	cmp	r3, #1
 802d38a:	d907      	bls.n	802d39c <_fwalk_sglue+0x38>
 802d38c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802d390:	3301      	adds	r3, #1
 802d392:	d003      	beq.n	802d39c <_fwalk_sglue+0x38>
 802d394:	4629      	mov	r1, r5
 802d396:	4638      	mov	r0, r7
 802d398:	47c0      	blx	r8
 802d39a:	4306      	orrs	r6, r0
 802d39c:	3568      	adds	r5, #104	; 0x68
 802d39e:	e7e9      	b.n	802d374 <_fwalk_sglue+0x10>

0802d3a0 <iprintf>:
 802d3a0:	b40f      	push	{r0, r1, r2, r3}
 802d3a2:	b507      	push	{r0, r1, r2, lr}
 802d3a4:	4906      	ldr	r1, [pc, #24]	; (802d3c0 <iprintf+0x20>)
 802d3a6:	ab04      	add	r3, sp, #16
 802d3a8:	6808      	ldr	r0, [r1, #0]
 802d3aa:	f853 2b04 	ldr.w	r2, [r3], #4
 802d3ae:	6881      	ldr	r1, [r0, #8]
 802d3b0:	9301      	str	r3, [sp, #4]
 802d3b2:	f003 f8db 	bl	803056c <_vfiprintf_r>
 802d3b6:	b003      	add	sp, #12
 802d3b8:	f85d eb04 	ldr.w	lr, [sp], #4
 802d3bc:	b004      	add	sp, #16
 802d3be:	4770      	bx	lr
 802d3c0:	20000188 	.word	0x20000188

0802d3c4 <sniprintf>:
 802d3c4:	b40c      	push	{r2, r3}
 802d3c6:	b530      	push	{r4, r5, lr}
 802d3c8:	4b17      	ldr	r3, [pc, #92]	; (802d428 <sniprintf+0x64>)
 802d3ca:	1e0c      	subs	r4, r1, #0
 802d3cc:	681d      	ldr	r5, [r3, #0]
 802d3ce:	b09d      	sub	sp, #116	; 0x74
 802d3d0:	da08      	bge.n	802d3e4 <sniprintf+0x20>
 802d3d2:	238b      	movs	r3, #139	; 0x8b
 802d3d4:	602b      	str	r3, [r5, #0]
 802d3d6:	f04f 30ff 	mov.w	r0, #4294967295
 802d3da:	b01d      	add	sp, #116	; 0x74
 802d3dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802d3e0:	b002      	add	sp, #8
 802d3e2:	4770      	bx	lr
 802d3e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 802d3e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 802d3ec:	bf14      	ite	ne
 802d3ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 802d3f2:	4623      	moveq	r3, r4
 802d3f4:	9304      	str	r3, [sp, #16]
 802d3f6:	9307      	str	r3, [sp, #28]
 802d3f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802d3fc:	9002      	str	r0, [sp, #8]
 802d3fe:	9006      	str	r0, [sp, #24]
 802d400:	f8ad 3016 	strh.w	r3, [sp, #22]
 802d404:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802d406:	ab21      	add	r3, sp, #132	; 0x84
 802d408:	a902      	add	r1, sp, #8
 802d40a:	4628      	mov	r0, r5
 802d40c:	9301      	str	r3, [sp, #4]
 802d40e:	f002 fdb3 	bl	802ff78 <_svfiprintf_r>
 802d412:	1c43      	adds	r3, r0, #1
 802d414:	bfbc      	itt	lt
 802d416:	238b      	movlt	r3, #139	; 0x8b
 802d418:	602b      	strlt	r3, [r5, #0]
 802d41a:	2c00      	cmp	r4, #0
 802d41c:	d0dd      	beq.n	802d3da <sniprintf+0x16>
 802d41e:	9b02      	ldr	r3, [sp, #8]
 802d420:	2200      	movs	r2, #0
 802d422:	701a      	strb	r2, [r3, #0]
 802d424:	e7d9      	b.n	802d3da <sniprintf+0x16>
 802d426:	bf00      	nop
 802d428:	20000188 	.word	0x20000188

0802d42c <siprintf>:
 802d42c:	b40e      	push	{r1, r2, r3}
 802d42e:	b500      	push	{lr}
 802d430:	b09c      	sub	sp, #112	; 0x70
 802d432:	ab1d      	add	r3, sp, #116	; 0x74
 802d434:	9002      	str	r0, [sp, #8]
 802d436:	9006      	str	r0, [sp, #24]
 802d438:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802d43c:	4809      	ldr	r0, [pc, #36]	; (802d464 <siprintf+0x38>)
 802d43e:	9107      	str	r1, [sp, #28]
 802d440:	9104      	str	r1, [sp, #16]
 802d442:	4909      	ldr	r1, [pc, #36]	; (802d468 <siprintf+0x3c>)
 802d444:	f853 2b04 	ldr.w	r2, [r3], #4
 802d448:	9105      	str	r1, [sp, #20]
 802d44a:	6800      	ldr	r0, [r0, #0]
 802d44c:	9301      	str	r3, [sp, #4]
 802d44e:	a902      	add	r1, sp, #8
 802d450:	f002 fd92 	bl	802ff78 <_svfiprintf_r>
 802d454:	9b02      	ldr	r3, [sp, #8]
 802d456:	2200      	movs	r2, #0
 802d458:	701a      	strb	r2, [r3, #0]
 802d45a:	b01c      	add	sp, #112	; 0x70
 802d45c:	f85d eb04 	ldr.w	lr, [sp], #4
 802d460:	b003      	add	sp, #12
 802d462:	4770      	bx	lr
 802d464:	20000188 	.word	0x20000188
 802d468:	ffff0208 	.word	0xffff0208

0802d46c <siscanf>:
 802d46c:	b40e      	push	{r1, r2, r3}
 802d46e:	b510      	push	{r4, lr}
 802d470:	b09f      	sub	sp, #124	; 0x7c
 802d472:	ac21      	add	r4, sp, #132	; 0x84
 802d474:	f44f 7101 	mov.w	r1, #516	; 0x204
 802d478:	f854 2b04 	ldr.w	r2, [r4], #4
 802d47c:	9201      	str	r2, [sp, #4]
 802d47e:	f8ad 101c 	strh.w	r1, [sp, #28]
 802d482:	9004      	str	r0, [sp, #16]
 802d484:	9008      	str	r0, [sp, #32]
 802d486:	f7e2 ff0b 	bl	80102a0 <strlen>
 802d48a:	4b0c      	ldr	r3, [pc, #48]	; (802d4bc <siscanf+0x50>)
 802d48c:	9005      	str	r0, [sp, #20]
 802d48e:	9009      	str	r0, [sp, #36]	; 0x24
 802d490:	930d      	str	r3, [sp, #52]	; 0x34
 802d492:	480b      	ldr	r0, [pc, #44]	; (802d4c0 <siscanf+0x54>)
 802d494:	9a01      	ldr	r2, [sp, #4]
 802d496:	6800      	ldr	r0, [r0, #0]
 802d498:	9403      	str	r4, [sp, #12]
 802d49a:	2300      	movs	r3, #0
 802d49c:	9311      	str	r3, [sp, #68]	; 0x44
 802d49e:	9316      	str	r3, [sp, #88]	; 0x58
 802d4a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802d4a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 802d4a8:	a904      	add	r1, sp, #16
 802d4aa:	4623      	mov	r3, r4
 802d4ac:	f002 febc 	bl	8030228 <__ssvfiscanf_r>
 802d4b0:	b01f      	add	sp, #124	; 0x7c
 802d4b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d4b6:	b003      	add	sp, #12
 802d4b8:	4770      	bx	lr
 802d4ba:	bf00      	nop
 802d4bc:	0802d4e7 	.word	0x0802d4e7
 802d4c0:	20000188 	.word	0x20000188

0802d4c4 <__sread>:
 802d4c4:	b510      	push	{r4, lr}
 802d4c6:	460c      	mov	r4, r1
 802d4c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d4cc:	f000 fa6a 	bl	802d9a4 <_read_r>
 802d4d0:	2800      	cmp	r0, #0
 802d4d2:	bfab      	itete	ge
 802d4d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802d4d6:	89a3      	ldrhlt	r3, [r4, #12]
 802d4d8:	181b      	addge	r3, r3, r0
 802d4da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802d4de:	bfac      	ite	ge
 802d4e0:	6563      	strge	r3, [r4, #84]	; 0x54
 802d4e2:	81a3      	strhlt	r3, [r4, #12]
 802d4e4:	bd10      	pop	{r4, pc}

0802d4e6 <__seofread>:
 802d4e6:	2000      	movs	r0, #0
 802d4e8:	4770      	bx	lr

0802d4ea <__swrite>:
 802d4ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d4ee:	461f      	mov	r7, r3
 802d4f0:	898b      	ldrh	r3, [r1, #12]
 802d4f2:	05db      	lsls	r3, r3, #23
 802d4f4:	4605      	mov	r5, r0
 802d4f6:	460c      	mov	r4, r1
 802d4f8:	4616      	mov	r6, r2
 802d4fa:	d505      	bpl.n	802d508 <__swrite+0x1e>
 802d4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d500:	2302      	movs	r3, #2
 802d502:	2200      	movs	r2, #0
 802d504:	f000 fa3c 	bl	802d980 <_lseek_r>
 802d508:	89a3      	ldrh	r3, [r4, #12]
 802d50a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802d50e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802d512:	81a3      	strh	r3, [r4, #12]
 802d514:	4632      	mov	r2, r6
 802d516:	463b      	mov	r3, r7
 802d518:	4628      	mov	r0, r5
 802d51a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802d51e:	f000 ba63 	b.w	802d9e8 <_write_r>

0802d522 <__sseek>:
 802d522:	b510      	push	{r4, lr}
 802d524:	460c      	mov	r4, r1
 802d526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d52a:	f000 fa29 	bl	802d980 <_lseek_r>
 802d52e:	1c43      	adds	r3, r0, #1
 802d530:	89a3      	ldrh	r3, [r4, #12]
 802d532:	bf15      	itete	ne
 802d534:	6560      	strne	r0, [r4, #84]	; 0x54
 802d536:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802d53a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802d53e:	81a3      	strheq	r3, [r4, #12]
 802d540:	bf18      	it	ne
 802d542:	81a3      	strhne	r3, [r4, #12]
 802d544:	bd10      	pop	{r4, pc}

0802d546 <__sclose>:
 802d546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d54a:	f000 b9b3 	b.w	802d8b4 <_close_r>

0802d54e <__swbuf_r>:
 802d54e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d550:	460e      	mov	r6, r1
 802d552:	4614      	mov	r4, r2
 802d554:	4605      	mov	r5, r0
 802d556:	b118      	cbz	r0, 802d560 <__swbuf_r+0x12>
 802d558:	6a03      	ldr	r3, [r0, #32]
 802d55a:	b90b      	cbnz	r3, 802d560 <__swbuf_r+0x12>
 802d55c:	f7ff fed8 	bl	802d310 <__sinit>
 802d560:	69a3      	ldr	r3, [r4, #24]
 802d562:	60a3      	str	r3, [r4, #8]
 802d564:	89a3      	ldrh	r3, [r4, #12]
 802d566:	071a      	lsls	r2, r3, #28
 802d568:	d525      	bpl.n	802d5b6 <__swbuf_r+0x68>
 802d56a:	6923      	ldr	r3, [r4, #16]
 802d56c:	b31b      	cbz	r3, 802d5b6 <__swbuf_r+0x68>
 802d56e:	6823      	ldr	r3, [r4, #0]
 802d570:	6922      	ldr	r2, [r4, #16]
 802d572:	1a98      	subs	r0, r3, r2
 802d574:	6963      	ldr	r3, [r4, #20]
 802d576:	b2f6      	uxtb	r6, r6
 802d578:	4283      	cmp	r3, r0
 802d57a:	4637      	mov	r7, r6
 802d57c:	dc04      	bgt.n	802d588 <__swbuf_r+0x3a>
 802d57e:	4621      	mov	r1, r4
 802d580:	4628      	mov	r0, r5
 802d582:	f003 fae1 	bl	8030b48 <_fflush_r>
 802d586:	b9e0      	cbnz	r0, 802d5c2 <__swbuf_r+0x74>
 802d588:	68a3      	ldr	r3, [r4, #8]
 802d58a:	3b01      	subs	r3, #1
 802d58c:	60a3      	str	r3, [r4, #8]
 802d58e:	6823      	ldr	r3, [r4, #0]
 802d590:	1c5a      	adds	r2, r3, #1
 802d592:	6022      	str	r2, [r4, #0]
 802d594:	701e      	strb	r6, [r3, #0]
 802d596:	6962      	ldr	r2, [r4, #20]
 802d598:	1c43      	adds	r3, r0, #1
 802d59a:	429a      	cmp	r2, r3
 802d59c:	d004      	beq.n	802d5a8 <__swbuf_r+0x5a>
 802d59e:	89a3      	ldrh	r3, [r4, #12]
 802d5a0:	07db      	lsls	r3, r3, #31
 802d5a2:	d506      	bpl.n	802d5b2 <__swbuf_r+0x64>
 802d5a4:	2e0a      	cmp	r6, #10
 802d5a6:	d104      	bne.n	802d5b2 <__swbuf_r+0x64>
 802d5a8:	4621      	mov	r1, r4
 802d5aa:	4628      	mov	r0, r5
 802d5ac:	f003 facc 	bl	8030b48 <_fflush_r>
 802d5b0:	b938      	cbnz	r0, 802d5c2 <__swbuf_r+0x74>
 802d5b2:	4638      	mov	r0, r7
 802d5b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d5b6:	4621      	mov	r1, r4
 802d5b8:	4628      	mov	r0, r5
 802d5ba:	f000 f805 	bl	802d5c8 <__swsetup_r>
 802d5be:	2800      	cmp	r0, #0
 802d5c0:	d0d5      	beq.n	802d56e <__swbuf_r+0x20>
 802d5c2:	f04f 37ff 	mov.w	r7, #4294967295
 802d5c6:	e7f4      	b.n	802d5b2 <__swbuf_r+0x64>

0802d5c8 <__swsetup_r>:
 802d5c8:	b538      	push	{r3, r4, r5, lr}
 802d5ca:	4b2a      	ldr	r3, [pc, #168]	; (802d674 <__swsetup_r+0xac>)
 802d5cc:	4605      	mov	r5, r0
 802d5ce:	6818      	ldr	r0, [r3, #0]
 802d5d0:	460c      	mov	r4, r1
 802d5d2:	b118      	cbz	r0, 802d5dc <__swsetup_r+0x14>
 802d5d4:	6a03      	ldr	r3, [r0, #32]
 802d5d6:	b90b      	cbnz	r3, 802d5dc <__swsetup_r+0x14>
 802d5d8:	f7ff fe9a 	bl	802d310 <__sinit>
 802d5dc:	89a3      	ldrh	r3, [r4, #12]
 802d5de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d5e2:	0718      	lsls	r0, r3, #28
 802d5e4:	d422      	bmi.n	802d62c <__swsetup_r+0x64>
 802d5e6:	06d9      	lsls	r1, r3, #27
 802d5e8:	d407      	bmi.n	802d5fa <__swsetup_r+0x32>
 802d5ea:	2309      	movs	r3, #9
 802d5ec:	602b      	str	r3, [r5, #0]
 802d5ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802d5f2:	81a3      	strh	r3, [r4, #12]
 802d5f4:	f04f 30ff 	mov.w	r0, #4294967295
 802d5f8:	e034      	b.n	802d664 <__swsetup_r+0x9c>
 802d5fa:	0758      	lsls	r0, r3, #29
 802d5fc:	d512      	bpl.n	802d624 <__swsetup_r+0x5c>
 802d5fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802d600:	b141      	cbz	r1, 802d614 <__swsetup_r+0x4c>
 802d602:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802d606:	4299      	cmp	r1, r3
 802d608:	d002      	beq.n	802d610 <__swsetup_r+0x48>
 802d60a:	4628      	mov	r0, r5
 802d60c:	f001 f8ca 	bl	802e7a4 <_free_r>
 802d610:	2300      	movs	r3, #0
 802d612:	6363      	str	r3, [r4, #52]	; 0x34
 802d614:	89a3      	ldrh	r3, [r4, #12]
 802d616:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802d61a:	81a3      	strh	r3, [r4, #12]
 802d61c:	2300      	movs	r3, #0
 802d61e:	6063      	str	r3, [r4, #4]
 802d620:	6923      	ldr	r3, [r4, #16]
 802d622:	6023      	str	r3, [r4, #0]
 802d624:	89a3      	ldrh	r3, [r4, #12]
 802d626:	f043 0308 	orr.w	r3, r3, #8
 802d62a:	81a3      	strh	r3, [r4, #12]
 802d62c:	6923      	ldr	r3, [r4, #16]
 802d62e:	b94b      	cbnz	r3, 802d644 <__swsetup_r+0x7c>
 802d630:	89a3      	ldrh	r3, [r4, #12]
 802d632:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802d636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802d63a:	d003      	beq.n	802d644 <__swsetup_r+0x7c>
 802d63c:	4621      	mov	r1, r4
 802d63e:	4628      	mov	r0, r5
 802d640:	f003 fad0 	bl	8030be4 <__smakebuf_r>
 802d644:	89a0      	ldrh	r0, [r4, #12]
 802d646:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d64a:	f010 0301 	ands.w	r3, r0, #1
 802d64e:	d00a      	beq.n	802d666 <__swsetup_r+0x9e>
 802d650:	2300      	movs	r3, #0
 802d652:	60a3      	str	r3, [r4, #8]
 802d654:	6963      	ldr	r3, [r4, #20]
 802d656:	425b      	negs	r3, r3
 802d658:	61a3      	str	r3, [r4, #24]
 802d65a:	6923      	ldr	r3, [r4, #16]
 802d65c:	b943      	cbnz	r3, 802d670 <__swsetup_r+0xa8>
 802d65e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802d662:	d1c4      	bne.n	802d5ee <__swsetup_r+0x26>
 802d664:	bd38      	pop	{r3, r4, r5, pc}
 802d666:	0781      	lsls	r1, r0, #30
 802d668:	bf58      	it	pl
 802d66a:	6963      	ldrpl	r3, [r4, #20]
 802d66c:	60a3      	str	r3, [r4, #8]
 802d66e:	e7f4      	b.n	802d65a <__swsetup_r+0x92>
 802d670:	2000      	movs	r0, #0
 802d672:	e7f7      	b.n	802d664 <__swsetup_r+0x9c>
 802d674:	20000188 	.word	0x20000188

0802d678 <memcmp>:
 802d678:	b510      	push	{r4, lr}
 802d67a:	3901      	subs	r1, #1
 802d67c:	4402      	add	r2, r0
 802d67e:	4290      	cmp	r0, r2
 802d680:	d101      	bne.n	802d686 <memcmp+0xe>
 802d682:	2000      	movs	r0, #0
 802d684:	e005      	b.n	802d692 <memcmp+0x1a>
 802d686:	7803      	ldrb	r3, [r0, #0]
 802d688:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802d68c:	42a3      	cmp	r3, r4
 802d68e:	d001      	beq.n	802d694 <memcmp+0x1c>
 802d690:	1b18      	subs	r0, r3, r4
 802d692:	bd10      	pop	{r4, pc}
 802d694:	3001      	adds	r0, #1
 802d696:	e7f2      	b.n	802d67e <memcmp+0x6>

0802d698 <memmove>:
 802d698:	4288      	cmp	r0, r1
 802d69a:	b510      	push	{r4, lr}
 802d69c:	eb01 0402 	add.w	r4, r1, r2
 802d6a0:	d902      	bls.n	802d6a8 <memmove+0x10>
 802d6a2:	4284      	cmp	r4, r0
 802d6a4:	4623      	mov	r3, r4
 802d6a6:	d807      	bhi.n	802d6b8 <memmove+0x20>
 802d6a8:	1e43      	subs	r3, r0, #1
 802d6aa:	42a1      	cmp	r1, r4
 802d6ac:	d008      	beq.n	802d6c0 <memmove+0x28>
 802d6ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 802d6b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 802d6b6:	e7f8      	b.n	802d6aa <memmove+0x12>
 802d6b8:	4402      	add	r2, r0
 802d6ba:	4601      	mov	r1, r0
 802d6bc:	428a      	cmp	r2, r1
 802d6be:	d100      	bne.n	802d6c2 <memmove+0x2a>
 802d6c0:	bd10      	pop	{r4, pc}
 802d6c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802d6c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802d6ca:	e7f7      	b.n	802d6bc <memmove+0x24>

0802d6cc <memset>:
 802d6cc:	4402      	add	r2, r0
 802d6ce:	4603      	mov	r3, r0
 802d6d0:	4293      	cmp	r3, r2
 802d6d2:	d100      	bne.n	802d6d6 <memset+0xa>
 802d6d4:	4770      	bx	lr
 802d6d6:	f803 1b01 	strb.w	r1, [r3], #1
 802d6da:	e7f9      	b.n	802d6d0 <memset+0x4>

0802d6dc <strcat>:
 802d6dc:	b510      	push	{r4, lr}
 802d6de:	4602      	mov	r2, r0
 802d6e0:	7814      	ldrb	r4, [r2, #0]
 802d6e2:	4613      	mov	r3, r2
 802d6e4:	3201      	adds	r2, #1
 802d6e6:	2c00      	cmp	r4, #0
 802d6e8:	d1fa      	bne.n	802d6e0 <strcat+0x4>
 802d6ea:	3b01      	subs	r3, #1
 802d6ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 802d6f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 802d6f4:	2a00      	cmp	r2, #0
 802d6f6:	d1f9      	bne.n	802d6ec <strcat+0x10>
 802d6f8:	bd10      	pop	{r4, pc}

0802d6fa <strchr>:
 802d6fa:	b2c9      	uxtb	r1, r1
 802d6fc:	4603      	mov	r3, r0
 802d6fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d702:	b11a      	cbz	r2, 802d70c <strchr+0x12>
 802d704:	428a      	cmp	r2, r1
 802d706:	d1f9      	bne.n	802d6fc <strchr+0x2>
 802d708:	4618      	mov	r0, r3
 802d70a:	4770      	bx	lr
 802d70c:	2900      	cmp	r1, #0
 802d70e:	bf18      	it	ne
 802d710:	2300      	movne	r3, #0
 802d712:	e7f9      	b.n	802d708 <strchr+0xe>

0802d714 <strcspn>:
 802d714:	b570      	push	{r4, r5, r6, lr}
 802d716:	4603      	mov	r3, r0
 802d718:	461e      	mov	r6, r3
 802d71a:	f813 4b01 	ldrb.w	r4, [r3], #1
 802d71e:	b144      	cbz	r4, 802d732 <strcspn+0x1e>
 802d720:	1e4a      	subs	r2, r1, #1
 802d722:	e001      	b.n	802d728 <strcspn+0x14>
 802d724:	42a5      	cmp	r5, r4
 802d726:	d004      	beq.n	802d732 <strcspn+0x1e>
 802d728:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802d72c:	2d00      	cmp	r5, #0
 802d72e:	d1f9      	bne.n	802d724 <strcspn+0x10>
 802d730:	e7f2      	b.n	802d718 <strcspn+0x4>
 802d732:	1a30      	subs	r0, r6, r0
 802d734:	bd70      	pop	{r4, r5, r6, pc}

0802d736 <strncat>:
 802d736:	b530      	push	{r4, r5, lr}
 802d738:	4604      	mov	r4, r0
 802d73a:	7825      	ldrb	r5, [r4, #0]
 802d73c:	4623      	mov	r3, r4
 802d73e:	3401      	adds	r4, #1
 802d740:	2d00      	cmp	r5, #0
 802d742:	d1fa      	bne.n	802d73a <strncat+0x4>
 802d744:	3a01      	subs	r2, #1
 802d746:	d304      	bcc.n	802d752 <strncat+0x1c>
 802d748:	f811 4b01 	ldrb.w	r4, [r1], #1
 802d74c:	f803 4b01 	strb.w	r4, [r3], #1
 802d750:	b904      	cbnz	r4, 802d754 <strncat+0x1e>
 802d752:	bd30      	pop	{r4, r5, pc}
 802d754:	2a00      	cmp	r2, #0
 802d756:	d1f5      	bne.n	802d744 <strncat+0xe>
 802d758:	701a      	strb	r2, [r3, #0]
 802d75a:	e7f3      	b.n	802d744 <strncat+0xe>

0802d75c <strncmp>:
 802d75c:	b510      	push	{r4, lr}
 802d75e:	b16a      	cbz	r2, 802d77c <strncmp+0x20>
 802d760:	3901      	subs	r1, #1
 802d762:	1884      	adds	r4, r0, r2
 802d764:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d768:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802d76c:	429a      	cmp	r2, r3
 802d76e:	d103      	bne.n	802d778 <strncmp+0x1c>
 802d770:	42a0      	cmp	r0, r4
 802d772:	d001      	beq.n	802d778 <strncmp+0x1c>
 802d774:	2a00      	cmp	r2, #0
 802d776:	d1f5      	bne.n	802d764 <strncmp+0x8>
 802d778:	1ad0      	subs	r0, r2, r3
 802d77a:	bd10      	pop	{r4, pc}
 802d77c:	4610      	mov	r0, r2
 802d77e:	e7fc      	b.n	802d77a <strncmp+0x1e>

0802d780 <strncpy>:
 802d780:	b510      	push	{r4, lr}
 802d782:	3901      	subs	r1, #1
 802d784:	4603      	mov	r3, r0
 802d786:	b132      	cbz	r2, 802d796 <strncpy+0x16>
 802d788:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802d78c:	f803 4b01 	strb.w	r4, [r3], #1
 802d790:	3a01      	subs	r2, #1
 802d792:	2c00      	cmp	r4, #0
 802d794:	d1f7      	bne.n	802d786 <strncpy+0x6>
 802d796:	441a      	add	r2, r3
 802d798:	2100      	movs	r1, #0
 802d79a:	4293      	cmp	r3, r2
 802d79c:	d100      	bne.n	802d7a0 <strncpy+0x20>
 802d79e:	bd10      	pop	{r4, pc}
 802d7a0:	f803 1b01 	strb.w	r1, [r3], #1
 802d7a4:	e7f9      	b.n	802d79a <strncpy+0x1a>

0802d7a6 <strspn>:
 802d7a6:	b570      	push	{r4, r5, r6, lr}
 802d7a8:	4603      	mov	r3, r0
 802d7aa:	461e      	mov	r6, r3
 802d7ac:	f813 4b01 	ldrb.w	r4, [r3], #1
 802d7b0:	b13c      	cbz	r4, 802d7c2 <strspn+0x1c>
 802d7b2:	1e4a      	subs	r2, r1, #1
 802d7b4:	e001      	b.n	802d7ba <strspn+0x14>
 802d7b6:	42a5      	cmp	r5, r4
 802d7b8:	d0f7      	beq.n	802d7aa <strspn+0x4>
 802d7ba:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802d7be:	2d00      	cmp	r5, #0
 802d7c0:	d1f9      	bne.n	802d7b6 <strspn+0x10>
 802d7c2:	1a30      	subs	r0, r6, r0
 802d7c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0802d7c8 <strtok>:
 802d7c8:	4b16      	ldr	r3, [pc, #88]	; (802d824 <strtok+0x5c>)
 802d7ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802d7cc:	681e      	ldr	r6, [r3, #0]
 802d7ce:	6c74      	ldr	r4, [r6, #68]	; 0x44
 802d7d0:	4605      	mov	r5, r0
 802d7d2:	b9fc      	cbnz	r4, 802d814 <strtok+0x4c>
 802d7d4:	2050      	movs	r0, #80	; 0x50
 802d7d6:	9101      	str	r1, [sp, #4]
 802d7d8:	f7fe fddc 	bl	802c394 <malloc>
 802d7dc:	9901      	ldr	r1, [sp, #4]
 802d7de:	6470      	str	r0, [r6, #68]	; 0x44
 802d7e0:	4602      	mov	r2, r0
 802d7e2:	b920      	cbnz	r0, 802d7ee <strtok+0x26>
 802d7e4:	4b10      	ldr	r3, [pc, #64]	; (802d828 <strtok+0x60>)
 802d7e6:	4811      	ldr	r0, [pc, #68]	; (802d82c <strtok+0x64>)
 802d7e8:	215b      	movs	r1, #91	; 0x5b
 802d7ea:	f7fe fd9f 	bl	802c32c <__assert_func>
 802d7ee:	e9c0 4400 	strd	r4, r4, [r0]
 802d7f2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 802d7f6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 802d7fa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 802d7fe:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 802d802:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 802d806:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 802d80a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 802d80e:	6184      	str	r4, [r0, #24]
 802d810:	7704      	strb	r4, [r0, #28]
 802d812:	6244      	str	r4, [r0, #36]	; 0x24
 802d814:	6c72      	ldr	r2, [r6, #68]	; 0x44
 802d816:	2301      	movs	r3, #1
 802d818:	4628      	mov	r0, r5
 802d81a:	b002      	add	sp, #8
 802d81c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802d820:	f000 b806 	b.w	802d830 <__strtok_r>
 802d824:	20000188 	.word	0x20000188
 802d828:	0803485f 	.word	0x0803485f
 802d82c:	08034876 	.word	0x08034876

0802d830 <__strtok_r>:
 802d830:	b5f0      	push	{r4, r5, r6, r7, lr}
 802d832:	b908      	cbnz	r0, 802d838 <__strtok_r+0x8>
 802d834:	6810      	ldr	r0, [r2, #0]
 802d836:	b188      	cbz	r0, 802d85c <__strtok_r+0x2c>
 802d838:	4604      	mov	r4, r0
 802d83a:	4620      	mov	r0, r4
 802d83c:	f814 5b01 	ldrb.w	r5, [r4], #1
 802d840:	460f      	mov	r7, r1
 802d842:	f817 6b01 	ldrb.w	r6, [r7], #1
 802d846:	b91e      	cbnz	r6, 802d850 <__strtok_r+0x20>
 802d848:	b965      	cbnz	r5, 802d864 <__strtok_r+0x34>
 802d84a:	6015      	str	r5, [r2, #0]
 802d84c:	4628      	mov	r0, r5
 802d84e:	e005      	b.n	802d85c <__strtok_r+0x2c>
 802d850:	42b5      	cmp	r5, r6
 802d852:	d1f6      	bne.n	802d842 <__strtok_r+0x12>
 802d854:	2b00      	cmp	r3, #0
 802d856:	d1f0      	bne.n	802d83a <__strtok_r+0xa>
 802d858:	6014      	str	r4, [r2, #0]
 802d85a:	7003      	strb	r3, [r0, #0]
 802d85c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d85e:	461c      	mov	r4, r3
 802d860:	e00c      	b.n	802d87c <__strtok_r+0x4c>
 802d862:	b915      	cbnz	r5, 802d86a <__strtok_r+0x3a>
 802d864:	f814 3b01 	ldrb.w	r3, [r4], #1
 802d868:	460e      	mov	r6, r1
 802d86a:	f816 5b01 	ldrb.w	r5, [r6], #1
 802d86e:	42ab      	cmp	r3, r5
 802d870:	d1f7      	bne.n	802d862 <__strtok_r+0x32>
 802d872:	2b00      	cmp	r3, #0
 802d874:	d0f3      	beq.n	802d85e <__strtok_r+0x2e>
 802d876:	2300      	movs	r3, #0
 802d878:	f804 3c01 	strb.w	r3, [r4, #-1]
 802d87c:	6014      	str	r4, [r2, #0]
 802d87e:	e7ed      	b.n	802d85c <__strtok_r+0x2c>

0802d880 <strstr>:
 802d880:	780a      	ldrb	r2, [r1, #0]
 802d882:	b570      	push	{r4, r5, r6, lr}
 802d884:	b96a      	cbnz	r2, 802d8a2 <strstr+0x22>
 802d886:	bd70      	pop	{r4, r5, r6, pc}
 802d888:	429a      	cmp	r2, r3
 802d88a:	d109      	bne.n	802d8a0 <strstr+0x20>
 802d88c:	460c      	mov	r4, r1
 802d88e:	4605      	mov	r5, r0
 802d890:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802d894:	2b00      	cmp	r3, #0
 802d896:	d0f6      	beq.n	802d886 <strstr+0x6>
 802d898:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802d89c:	429e      	cmp	r6, r3
 802d89e:	d0f7      	beq.n	802d890 <strstr+0x10>
 802d8a0:	3001      	adds	r0, #1
 802d8a2:	7803      	ldrb	r3, [r0, #0]
 802d8a4:	2b00      	cmp	r3, #0
 802d8a6:	d1ef      	bne.n	802d888 <strstr+0x8>
 802d8a8:	4618      	mov	r0, r3
 802d8aa:	e7ec      	b.n	802d886 <strstr+0x6>

0802d8ac <_localeconv_r>:
 802d8ac:	4800      	ldr	r0, [pc, #0]	; (802d8b0 <_localeconv_r+0x4>)
 802d8ae:	4770      	bx	lr
 802d8b0:	2000027c 	.word	0x2000027c

0802d8b4 <_close_r>:
 802d8b4:	b538      	push	{r3, r4, r5, lr}
 802d8b6:	4d06      	ldr	r5, [pc, #24]	; (802d8d0 <_close_r+0x1c>)
 802d8b8:	2300      	movs	r3, #0
 802d8ba:	4604      	mov	r4, r0
 802d8bc:	4608      	mov	r0, r1
 802d8be:	602b      	str	r3, [r5, #0]
 802d8c0:	f7e5 f949 	bl	8012b56 <_close>
 802d8c4:	1c43      	adds	r3, r0, #1
 802d8c6:	d102      	bne.n	802d8ce <_close_r+0x1a>
 802d8c8:	682b      	ldr	r3, [r5, #0]
 802d8ca:	b103      	cbz	r3, 802d8ce <_close_r+0x1a>
 802d8cc:	6023      	str	r3, [r4, #0]
 802d8ce:	bd38      	pop	{r3, r4, r5, pc}
 802d8d0:	2000dae8 	.word	0x2000dae8

0802d8d4 <_reclaim_reent>:
 802d8d4:	4b29      	ldr	r3, [pc, #164]	; (802d97c <_reclaim_reent+0xa8>)
 802d8d6:	681b      	ldr	r3, [r3, #0]
 802d8d8:	4283      	cmp	r3, r0
 802d8da:	b570      	push	{r4, r5, r6, lr}
 802d8dc:	4604      	mov	r4, r0
 802d8de:	d04b      	beq.n	802d978 <_reclaim_reent+0xa4>
 802d8e0:	69c3      	ldr	r3, [r0, #28]
 802d8e2:	b143      	cbz	r3, 802d8f6 <_reclaim_reent+0x22>
 802d8e4:	68db      	ldr	r3, [r3, #12]
 802d8e6:	2b00      	cmp	r3, #0
 802d8e8:	d144      	bne.n	802d974 <_reclaim_reent+0xa0>
 802d8ea:	69e3      	ldr	r3, [r4, #28]
 802d8ec:	6819      	ldr	r1, [r3, #0]
 802d8ee:	b111      	cbz	r1, 802d8f6 <_reclaim_reent+0x22>
 802d8f0:	4620      	mov	r0, r4
 802d8f2:	f000 ff57 	bl	802e7a4 <_free_r>
 802d8f6:	6961      	ldr	r1, [r4, #20]
 802d8f8:	b111      	cbz	r1, 802d900 <_reclaim_reent+0x2c>
 802d8fa:	4620      	mov	r0, r4
 802d8fc:	f000 ff52 	bl	802e7a4 <_free_r>
 802d900:	69e1      	ldr	r1, [r4, #28]
 802d902:	b111      	cbz	r1, 802d90a <_reclaim_reent+0x36>
 802d904:	4620      	mov	r0, r4
 802d906:	f000 ff4d 	bl	802e7a4 <_free_r>
 802d90a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802d90c:	b111      	cbz	r1, 802d914 <_reclaim_reent+0x40>
 802d90e:	4620      	mov	r0, r4
 802d910:	f000 ff48 	bl	802e7a4 <_free_r>
 802d914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802d916:	b111      	cbz	r1, 802d91e <_reclaim_reent+0x4a>
 802d918:	4620      	mov	r0, r4
 802d91a:	f000 ff43 	bl	802e7a4 <_free_r>
 802d91e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802d920:	b111      	cbz	r1, 802d928 <_reclaim_reent+0x54>
 802d922:	4620      	mov	r0, r4
 802d924:	f000 ff3e 	bl	802e7a4 <_free_r>
 802d928:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802d92a:	b111      	cbz	r1, 802d932 <_reclaim_reent+0x5e>
 802d92c:	4620      	mov	r0, r4
 802d92e:	f000 ff39 	bl	802e7a4 <_free_r>
 802d932:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802d934:	b111      	cbz	r1, 802d93c <_reclaim_reent+0x68>
 802d936:	4620      	mov	r0, r4
 802d938:	f000 ff34 	bl	802e7a4 <_free_r>
 802d93c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 802d93e:	b111      	cbz	r1, 802d946 <_reclaim_reent+0x72>
 802d940:	4620      	mov	r0, r4
 802d942:	f000 ff2f 	bl	802e7a4 <_free_r>
 802d946:	6a23      	ldr	r3, [r4, #32]
 802d948:	b1b3      	cbz	r3, 802d978 <_reclaim_reent+0xa4>
 802d94a:	4620      	mov	r0, r4
 802d94c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802d950:	4718      	bx	r3
 802d952:	5949      	ldr	r1, [r1, r5]
 802d954:	b941      	cbnz	r1, 802d968 <_reclaim_reent+0x94>
 802d956:	3504      	adds	r5, #4
 802d958:	69e3      	ldr	r3, [r4, #28]
 802d95a:	2d80      	cmp	r5, #128	; 0x80
 802d95c:	68d9      	ldr	r1, [r3, #12]
 802d95e:	d1f8      	bne.n	802d952 <_reclaim_reent+0x7e>
 802d960:	4620      	mov	r0, r4
 802d962:	f000 ff1f 	bl	802e7a4 <_free_r>
 802d966:	e7c0      	b.n	802d8ea <_reclaim_reent+0x16>
 802d968:	680e      	ldr	r6, [r1, #0]
 802d96a:	4620      	mov	r0, r4
 802d96c:	f000 ff1a 	bl	802e7a4 <_free_r>
 802d970:	4631      	mov	r1, r6
 802d972:	e7ef      	b.n	802d954 <_reclaim_reent+0x80>
 802d974:	2500      	movs	r5, #0
 802d976:	e7ef      	b.n	802d958 <_reclaim_reent+0x84>
 802d978:	bd70      	pop	{r4, r5, r6, pc}
 802d97a:	bf00      	nop
 802d97c:	20000188 	.word	0x20000188

0802d980 <_lseek_r>:
 802d980:	b538      	push	{r3, r4, r5, lr}
 802d982:	4d07      	ldr	r5, [pc, #28]	; (802d9a0 <_lseek_r+0x20>)
 802d984:	4604      	mov	r4, r0
 802d986:	4608      	mov	r0, r1
 802d988:	4611      	mov	r1, r2
 802d98a:	2200      	movs	r2, #0
 802d98c:	602a      	str	r2, [r5, #0]
 802d98e:	461a      	mov	r2, r3
 802d990:	f7e5 f908 	bl	8012ba4 <_lseek>
 802d994:	1c43      	adds	r3, r0, #1
 802d996:	d102      	bne.n	802d99e <_lseek_r+0x1e>
 802d998:	682b      	ldr	r3, [r5, #0]
 802d99a:	b103      	cbz	r3, 802d99e <_lseek_r+0x1e>
 802d99c:	6023      	str	r3, [r4, #0]
 802d99e:	bd38      	pop	{r3, r4, r5, pc}
 802d9a0:	2000dae8 	.word	0x2000dae8

0802d9a4 <_read_r>:
 802d9a4:	b538      	push	{r3, r4, r5, lr}
 802d9a6:	4d07      	ldr	r5, [pc, #28]	; (802d9c4 <_read_r+0x20>)
 802d9a8:	4604      	mov	r4, r0
 802d9aa:	4608      	mov	r0, r1
 802d9ac:	4611      	mov	r1, r2
 802d9ae:	2200      	movs	r2, #0
 802d9b0:	602a      	str	r2, [r5, #0]
 802d9b2:	461a      	mov	r2, r3
 802d9b4:	f7e5 f896 	bl	8012ae4 <_read>
 802d9b8:	1c43      	adds	r3, r0, #1
 802d9ba:	d102      	bne.n	802d9c2 <_read_r+0x1e>
 802d9bc:	682b      	ldr	r3, [r5, #0]
 802d9be:	b103      	cbz	r3, 802d9c2 <_read_r+0x1e>
 802d9c0:	6023      	str	r3, [r4, #0]
 802d9c2:	bd38      	pop	{r3, r4, r5, pc}
 802d9c4:	2000dae8 	.word	0x2000dae8

0802d9c8 <_sbrk_r>:
 802d9c8:	b538      	push	{r3, r4, r5, lr}
 802d9ca:	4d06      	ldr	r5, [pc, #24]	; (802d9e4 <_sbrk_r+0x1c>)
 802d9cc:	2300      	movs	r3, #0
 802d9ce:	4604      	mov	r4, r0
 802d9d0:	4608      	mov	r0, r1
 802d9d2:	602b      	str	r3, [r5, #0]
 802d9d4:	f7e5 f8f4 	bl	8012bc0 <_sbrk>
 802d9d8:	1c43      	adds	r3, r0, #1
 802d9da:	d102      	bne.n	802d9e2 <_sbrk_r+0x1a>
 802d9dc:	682b      	ldr	r3, [r5, #0]
 802d9de:	b103      	cbz	r3, 802d9e2 <_sbrk_r+0x1a>
 802d9e0:	6023      	str	r3, [r4, #0]
 802d9e2:	bd38      	pop	{r3, r4, r5, pc}
 802d9e4:	2000dae8 	.word	0x2000dae8

0802d9e8 <_write_r>:
 802d9e8:	b538      	push	{r3, r4, r5, lr}
 802d9ea:	4d07      	ldr	r5, [pc, #28]	; (802da08 <_write_r+0x20>)
 802d9ec:	4604      	mov	r4, r0
 802d9ee:	4608      	mov	r0, r1
 802d9f0:	4611      	mov	r1, r2
 802d9f2:	2200      	movs	r2, #0
 802d9f4:	602a      	str	r2, [r5, #0]
 802d9f6:	461a      	mov	r2, r3
 802d9f8:	f7e5 f891 	bl	8012b1e <_write>
 802d9fc:	1c43      	adds	r3, r0, #1
 802d9fe:	d102      	bne.n	802da06 <_write_r+0x1e>
 802da00:	682b      	ldr	r3, [r5, #0]
 802da02:	b103      	cbz	r3, 802da06 <_write_r+0x1e>
 802da04:	6023      	str	r3, [r4, #0]
 802da06:	bd38      	pop	{r3, r4, r5, pc}
 802da08:	2000dae8 	.word	0x2000dae8

0802da0c <__errno>:
 802da0c:	4b01      	ldr	r3, [pc, #4]	; (802da14 <__errno+0x8>)
 802da0e:	6818      	ldr	r0, [r3, #0]
 802da10:	4770      	bx	lr
 802da12:	bf00      	nop
 802da14:	20000188 	.word	0x20000188

0802da18 <__libc_init_array>:
 802da18:	b570      	push	{r4, r5, r6, lr}
 802da1a:	4d0d      	ldr	r5, [pc, #52]	; (802da50 <__libc_init_array+0x38>)
 802da1c:	4c0d      	ldr	r4, [pc, #52]	; (802da54 <__libc_init_array+0x3c>)
 802da1e:	1b64      	subs	r4, r4, r5
 802da20:	10a4      	asrs	r4, r4, #2
 802da22:	2600      	movs	r6, #0
 802da24:	42a6      	cmp	r6, r4
 802da26:	d109      	bne.n	802da3c <__libc_init_array+0x24>
 802da28:	4d0b      	ldr	r5, [pc, #44]	; (802da58 <__libc_init_array+0x40>)
 802da2a:	4c0c      	ldr	r4, [pc, #48]	; (802da5c <__libc_init_array+0x44>)
 802da2c:	f003 fe1a 	bl	8031664 <_init>
 802da30:	1b64      	subs	r4, r4, r5
 802da32:	10a4      	asrs	r4, r4, #2
 802da34:	2600      	movs	r6, #0
 802da36:	42a6      	cmp	r6, r4
 802da38:	d105      	bne.n	802da46 <__libc_init_array+0x2e>
 802da3a:	bd70      	pop	{r4, r5, r6, pc}
 802da3c:	f855 3b04 	ldr.w	r3, [r5], #4
 802da40:	4798      	blx	r3
 802da42:	3601      	adds	r6, #1
 802da44:	e7ee      	b.n	802da24 <__libc_init_array+0xc>
 802da46:	f855 3b04 	ldr.w	r3, [r5], #4
 802da4a:	4798      	blx	r3
 802da4c:	3601      	adds	r6, #1
 802da4e:	e7f2      	b.n	802da36 <__libc_init_array+0x1e>
 802da50:	08034c90 	.word	0x08034c90
 802da54:	08034c90 	.word	0x08034c90
 802da58:	08034c90 	.word	0x08034c90
 802da5c:	08034c94 	.word	0x08034c94

0802da60 <__retarget_lock_init_recursive>:
 802da60:	4770      	bx	lr

0802da62 <__retarget_lock_acquire_recursive>:
 802da62:	4770      	bx	lr

0802da64 <__retarget_lock_release_recursive>:
 802da64:	4770      	bx	lr

0802da66 <strcpy>:
 802da66:	4603      	mov	r3, r0
 802da68:	f811 2b01 	ldrb.w	r2, [r1], #1
 802da6c:	f803 2b01 	strb.w	r2, [r3], #1
 802da70:	2a00      	cmp	r2, #0
 802da72:	d1f9      	bne.n	802da68 <strcpy+0x2>
 802da74:	4770      	bx	lr

0802da76 <memcpy>:
 802da76:	440a      	add	r2, r1
 802da78:	4291      	cmp	r1, r2
 802da7a:	f100 33ff 	add.w	r3, r0, #4294967295
 802da7e:	d100      	bne.n	802da82 <memcpy+0xc>
 802da80:	4770      	bx	lr
 802da82:	b510      	push	{r4, lr}
 802da84:	f811 4b01 	ldrb.w	r4, [r1], #1
 802da88:	f803 4f01 	strb.w	r4, [r3, #1]!
 802da8c:	4291      	cmp	r1, r2
 802da8e:	d1f9      	bne.n	802da84 <memcpy+0xe>
 802da90:	bd10      	pop	{r4, pc}
	...

0802da94 <nanf>:
 802da94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802da9c <nanf+0x8>
 802da98:	4770      	bx	lr
 802da9a:	bf00      	nop
 802da9c:	7fc00000 	.word	0x7fc00000

0802daa0 <abort>:
 802daa0:	b508      	push	{r3, lr}
 802daa2:	2006      	movs	r0, #6
 802daa4:	f003 f976 	bl	8030d94 <raise>
 802daa8:	2001      	movs	r0, #1
 802daaa:	f7e5 f811 	bl	8012ad0 <_exit>

0802daae <quorem>:
 802daae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802dab2:	6903      	ldr	r3, [r0, #16]
 802dab4:	690c      	ldr	r4, [r1, #16]
 802dab6:	42a3      	cmp	r3, r4
 802dab8:	4607      	mov	r7, r0
 802daba:	db7e      	blt.n	802dbba <quorem+0x10c>
 802dabc:	3c01      	subs	r4, #1
 802dabe:	f101 0814 	add.w	r8, r1, #20
 802dac2:	f100 0514 	add.w	r5, r0, #20
 802dac6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802daca:	9301      	str	r3, [sp, #4]
 802dacc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802dad0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802dad4:	3301      	adds	r3, #1
 802dad6:	429a      	cmp	r2, r3
 802dad8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802dadc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802dae0:	fbb2 f6f3 	udiv	r6, r2, r3
 802dae4:	d331      	bcc.n	802db4a <quorem+0x9c>
 802dae6:	f04f 0e00 	mov.w	lr, #0
 802daea:	4640      	mov	r0, r8
 802daec:	46ac      	mov	ip, r5
 802daee:	46f2      	mov	sl, lr
 802daf0:	f850 2b04 	ldr.w	r2, [r0], #4
 802daf4:	b293      	uxth	r3, r2
 802daf6:	fb06 e303 	mla	r3, r6, r3, lr
 802dafa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802dafe:	0c1a      	lsrs	r2, r3, #16
 802db00:	b29b      	uxth	r3, r3
 802db02:	ebaa 0303 	sub.w	r3, sl, r3
 802db06:	f8dc a000 	ldr.w	sl, [ip]
 802db0a:	fa13 f38a 	uxtah	r3, r3, sl
 802db0e:	fb06 220e 	mla	r2, r6, lr, r2
 802db12:	9300      	str	r3, [sp, #0]
 802db14:	9b00      	ldr	r3, [sp, #0]
 802db16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802db1a:	b292      	uxth	r2, r2
 802db1c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 802db20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802db24:	f8bd 3000 	ldrh.w	r3, [sp]
 802db28:	4581      	cmp	r9, r0
 802db2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802db2e:	f84c 3b04 	str.w	r3, [ip], #4
 802db32:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802db36:	d2db      	bcs.n	802daf0 <quorem+0x42>
 802db38:	f855 300b 	ldr.w	r3, [r5, fp]
 802db3c:	b92b      	cbnz	r3, 802db4a <quorem+0x9c>
 802db3e:	9b01      	ldr	r3, [sp, #4]
 802db40:	3b04      	subs	r3, #4
 802db42:	429d      	cmp	r5, r3
 802db44:	461a      	mov	r2, r3
 802db46:	d32c      	bcc.n	802dba2 <quorem+0xf4>
 802db48:	613c      	str	r4, [r7, #16]
 802db4a:	4638      	mov	r0, r7
 802db4c:	f001 f93c 	bl	802edc8 <__mcmp>
 802db50:	2800      	cmp	r0, #0
 802db52:	db22      	blt.n	802db9a <quorem+0xec>
 802db54:	3601      	adds	r6, #1
 802db56:	4629      	mov	r1, r5
 802db58:	2000      	movs	r0, #0
 802db5a:	f858 2b04 	ldr.w	r2, [r8], #4
 802db5e:	f8d1 c000 	ldr.w	ip, [r1]
 802db62:	b293      	uxth	r3, r2
 802db64:	1ac3      	subs	r3, r0, r3
 802db66:	0c12      	lsrs	r2, r2, #16
 802db68:	fa13 f38c 	uxtah	r3, r3, ip
 802db6c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 802db70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802db74:	b29b      	uxth	r3, r3
 802db76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802db7a:	45c1      	cmp	r9, r8
 802db7c:	f841 3b04 	str.w	r3, [r1], #4
 802db80:	ea4f 4022 	mov.w	r0, r2, asr #16
 802db84:	d2e9      	bcs.n	802db5a <quorem+0xac>
 802db86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802db8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802db8e:	b922      	cbnz	r2, 802db9a <quorem+0xec>
 802db90:	3b04      	subs	r3, #4
 802db92:	429d      	cmp	r5, r3
 802db94:	461a      	mov	r2, r3
 802db96:	d30a      	bcc.n	802dbae <quorem+0x100>
 802db98:	613c      	str	r4, [r7, #16]
 802db9a:	4630      	mov	r0, r6
 802db9c:	b003      	add	sp, #12
 802db9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802dba2:	6812      	ldr	r2, [r2, #0]
 802dba4:	3b04      	subs	r3, #4
 802dba6:	2a00      	cmp	r2, #0
 802dba8:	d1ce      	bne.n	802db48 <quorem+0x9a>
 802dbaa:	3c01      	subs	r4, #1
 802dbac:	e7c9      	b.n	802db42 <quorem+0x94>
 802dbae:	6812      	ldr	r2, [r2, #0]
 802dbb0:	3b04      	subs	r3, #4
 802dbb2:	2a00      	cmp	r2, #0
 802dbb4:	d1f0      	bne.n	802db98 <quorem+0xea>
 802dbb6:	3c01      	subs	r4, #1
 802dbb8:	e7eb      	b.n	802db92 <quorem+0xe4>
 802dbba:	2000      	movs	r0, #0
 802dbbc:	e7ee      	b.n	802db9c <quorem+0xee>
	...

0802dbc0 <_dtoa_r>:
 802dbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802dbc4:	ed2d 8b04 	vpush	{d8-d9}
 802dbc8:	69c5      	ldr	r5, [r0, #28]
 802dbca:	b093      	sub	sp, #76	; 0x4c
 802dbcc:	ed8d 0b02 	vstr	d0, [sp, #8]
 802dbd0:	ec57 6b10 	vmov	r6, r7, d0
 802dbd4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802dbd8:	9107      	str	r1, [sp, #28]
 802dbda:	4604      	mov	r4, r0
 802dbdc:	920a      	str	r2, [sp, #40]	; 0x28
 802dbde:	930d      	str	r3, [sp, #52]	; 0x34
 802dbe0:	b975      	cbnz	r5, 802dc00 <_dtoa_r+0x40>
 802dbe2:	2010      	movs	r0, #16
 802dbe4:	f7fe fbd6 	bl	802c394 <malloc>
 802dbe8:	4602      	mov	r2, r0
 802dbea:	61e0      	str	r0, [r4, #28]
 802dbec:	b920      	cbnz	r0, 802dbf8 <_dtoa_r+0x38>
 802dbee:	4bae      	ldr	r3, [pc, #696]	; (802dea8 <_dtoa_r+0x2e8>)
 802dbf0:	21ef      	movs	r1, #239	; 0xef
 802dbf2:	48ae      	ldr	r0, [pc, #696]	; (802deac <_dtoa_r+0x2ec>)
 802dbf4:	f7fe fb9a 	bl	802c32c <__assert_func>
 802dbf8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802dbfc:	6005      	str	r5, [r0, #0]
 802dbfe:	60c5      	str	r5, [r0, #12]
 802dc00:	69e3      	ldr	r3, [r4, #28]
 802dc02:	6819      	ldr	r1, [r3, #0]
 802dc04:	b151      	cbz	r1, 802dc1c <_dtoa_r+0x5c>
 802dc06:	685a      	ldr	r2, [r3, #4]
 802dc08:	604a      	str	r2, [r1, #4]
 802dc0a:	2301      	movs	r3, #1
 802dc0c:	4093      	lsls	r3, r2
 802dc0e:	608b      	str	r3, [r1, #8]
 802dc10:	4620      	mov	r0, r4
 802dc12:	f000 fe53 	bl	802e8bc <_Bfree>
 802dc16:	69e3      	ldr	r3, [r4, #28]
 802dc18:	2200      	movs	r2, #0
 802dc1a:	601a      	str	r2, [r3, #0]
 802dc1c:	1e3b      	subs	r3, r7, #0
 802dc1e:	bfbb      	ittet	lt
 802dc20:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802dc24:	9303      	strlt	r3, [sp, #12]
 802dc26:	2300      	movge	r3, #0
 802dc28:	2201      	movlt	r2, #1
 802dc2a:	bfac      	ite	ge
 802dc2c:	f8c8 3000 	strge.w	r3, [r8]
 802dc30:	f8c8 2000 	strlt.w	r2, [r8]
 802dc34:	4b9e      	ldr	r3, [pc, #632]	; (802deb0 <_dtoa_r+0x2f0>)
 802dc36:	f8dd 800c 	ldr.w	r8, [sp, #12]
 802dc3a:	ea33 0308 	bics.w	r3, r3, r8
 802dc3e:	d11b      	bne.n	802dc78 <_dtoa_r+0xb8>
 802dc40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802dc42:	f242 730f 	movw	r3, #9999	; 0x270f
 802dc46:	6013      	str	r3, [r2, #0]
 802dc48:	f3c8 0313 	ubfx	r3, r8, #0, #20
 802dc4c:	4333      	orrs	r3, r6
 802dc4e:	f000 8593 	beq.w	802e778 <_dtoa_r+0xbb8>
 802dc52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802dc54:	b963      	cbnz	r3, 802dc70 <_dtoa_r+0xb0>
 802dc56:	4b97      	ldr	r3, [pc, #604]	; (802deb4 <_dtoa_r+0x2f4>)
 802dc58:	e027      	b.n	802dcaa <_dtoa_r+0xea>
 802dc5a:	4b97      	ldr	r3, [pc, #604]	; (802deb8 <_dtoa_r+0x2f8>)
 802dc5c:	9300      	str	r3, [sp, #0]
 802dc5e:	3308      	adds	r3, #8
 802dc60:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802dc62:	6013      	str	r3, [r2, #0]
 802dc64:	9800      	ldr	r0, [sp, #0]
 802dc66:	b013      	add	sp, #76	; 0x4c
 802dc68:	ecbd 8b04 	vpop	{d8-d9}
 802dc6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802dc70:	4b90      	ldr	r3, [pc, #576]	; (802deb4 <_dtoa_r+0x2f4>)
 802dc72:	9300      	str	r3, [sp, #0]
 802dc74:	3303      	adds	r3, #3
 802dc76:	e7f3      	b.n	802dc60 <_dtoa_r+0xa0>
 802dc78:	ed9d 7b02 	vldr	d7, [sp, #8]
 802dc7c:	2200      	movs	r2, #0
 802dc7e:	ec51 0b17 	vmov	r0, r1, d7
 802dc82:	eeb0 8a47 	vmov.f32	s16, s14
 802dc86:	eef0 8a67 	vmov.f32	s17, s15
 802dc8a:	2300      	movs	r3, #0
 802dc8c:	f7e2 ff34 	bl	8010af8 <__aeabi_dcmpeq>
 802dc90:	4681      	mov	r9, r0
 802dc92:	b160      	cbz	r0, 802dcae <_dtoa_r+0xee>
 802dc94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802dc96:	2301      	movs	r3, #1
 802dc98:	6013      	str	r3, [r2, #0]
 802dc9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802dc9c:	2b00      	cmp	r3, #0
 802dc9e:	f000 8568 	beq.w	802e772 <_dtoa_r+0xbb2>
 802dca2:	4b86      	ldr	r3, [pc, #536]	; (802debc <_dtoa_r+0x2fc>)
 802dca4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802dca6:	6013      	str	r3, [r2, #0]
 802dca8:	3b01      	subs	r3, #1
 802dcaa:	9300      	str	r3, [sp, #0]
 802dcac:	e7da      	b.n	802dc64 <_dtoa_r+0xa4>
 802dcae:	aa10      	add	r2, sp, #64	; 0x40
 802dcb0:	a911      	add	r1, sp, #68	; 0x44
 802dcb2:	4620      	mov	r0, r4
 802dcb4:	eeb0 0a48 	vmov.f32	s0, s16
 802dcb8:	eef0 0a68 	vmov.f32	s1, s17
 802dcbc:	f001 f99a 	bl	802eff4 <__d2b>
 802dcc0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 802dcc4:	4682      	mov	sl, r0
 802dcc6:	2d00      	cmp	r5, #0
 802dcc8:	d07f      	beq.n	802ddca <_dtoa_r+0x20a>
 802dcca:	ee18 3a90 	vmov	r3, s17
 802dcce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802dcd2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 802dcd6:	ec51 0b18 	vmov	r0, r1, d8
 802dcda:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802dcde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802dce2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 802dce6:	4619      	mov	r1, r3
 802dce8:	2200      	movs	r2, #0
 802dcea:	4b75      	ldr	r3, [pc, #468]	; (802dec0 <_dtoa_r+0x300>)
 802dcec:	f7e2 fae4 	bl	80102b8 <__aeabi_dsub>
 802dcf0:	a367      	add	r3, pc, #412	; (adr r3, 802de90 <_dtoa_r+0x2d0>)
 802dcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dcf6:	f7e2 fc97 	bl	8010628 <__aeabi_dmul>
 802dcfa:	a367      	add	r3, pc, #412	; (adr r3, 802de98 <_dtoa_r+0x2d8>)
 802dcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dd00:	f7e2 fadc 	bl	80102bc <__adddf3>
 802dd04:	4606      	mov	r6, r0
 802dd06:	4628      	mov	r0, r5
 802dd08:	460f      	mov	r7, r1
 802dd0a:	f7e2 fc23 	bl	8010554 <__aeabi_i2d>
 802dd0e:	a364      	add	r3, pc, #400	; (adr r3, 802dea0 <_dtoa_r+0x2e0>)
 802dd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dd14:	f7e2 fc88 	bl	8010628 <__aeabi_dmul>
 802dd18:	4602      	mov	r2, r0
 802dd1a:	460b      	mov	r3, r1
 802dd1c:	4630      	mov	r0, r6
 802dd1e:	4639      	mov	r1, r7
 802dd20:	f7e2 facc 	bl	80102bc <__adddf3>
 802dd24:	4606      	mov	r6, r0
 802dd26:	460f      	mov	r7, r1
 802dd28:	f7e2 ff2e 	bl	8010b88 <__aeabi_d2iz>
 802dd2c:	2200      	movs	r2, #0
 802dd2e:	4683      	mov	fp, r0
 802dd30:	2300      	movs	r3, #0
 802dd32:	4630      	mov	r0, r6
 802dd34:	4639      	mov	r1, r7
 802dd36:	f7e2 fee9 	bl	8010b0c <__aeabi_dcmplt>
 802dd3a:	b148      	cbz	r0, 802dd50 <_dtoa_r+0x190>
 802dd3c:	4658      	mov	r0, fp
 802dd3e:	f7e2 fc09 	bl	8010554 <__aeabi_i2d>
 802dd42:	4632      	mov	r2, r6
 802dd44:	463b      	mov	r3, r7
 802dd46:	f7e2 fed7 	bl	8010af8 <__aeabi_dcmpeq>
 802dd4a:	b908      	cbnz	r0, 802dd50 <_dtoa_r+0x190>
 802dd4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 802dd50:	f1bb 0f16 	cmp.w	fp, #22
 802dd54:	d857      	bhi.n	802de06 <_dtoa_r+0x246>
 802dd56:	4b5b      	ldr	r3, [pc, #364]	; (802dec4 <_dtoa_r+0x304>)
 802dd58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802dd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dd60:	ec51 0b18 	vmov	r0, r1, d8
 802dd64:	f7e2 fed2 	bl	8010b0c <__aeabi_dcmplt>
 802dd68:	2800      	cmp	r0, #0
 802dd6a:	d04e      	beq.n	802de0a <_dtoa_r+0x24a>
 802dd6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 802dd70:	2300      	movs	r3, #0
 802dd72:	930c      	str	r3, [sp, #48]	; 0x30
 802dd74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802dd76:	1b5b      	subs	r3, r3, r5
 802dd78:	1e5a      	subs	r2, r3, #1
 802dd7a:	bf45      	ittet	mi
 802dd7c:	f1c3 0301 	rsbmi	r3, r3, #1
 802dd80:	9305      	strmi	r3, [sp, #20]
 802dd82:	2300      	movpl	r3, #0
 802dd84:	2300      	movmi	r3, #0
 802dd86:	9206      	str	r2, [sp, #24]
 802dd88:	bf54      	ite	pl
 802dd8a:	9305      	strpl	r3, [sp, #20]
 802dd8c:	9306      	strmi	r3, [sp, #24]
 802dd8e:	f1bb 0f00 	cmp.w	fp, #0
 802dd92:	db3c      	blt.n	802de0e <_dtoa_r+0x24e>
 802dd94:	9b06      	ldr	r3, [sp, #24]
 802dd96:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 802dd9a:	445b      	add	r3, fp
 802dd9c:	9306      	str	r3, [sp, #24]
 802dd9e:	2300      	movs	r3, #0
 802dda0:	9308      	str	r3, [sp, #32]
 802dda2:	9b07      	ldr	r3, [sp, #28]
 802dda4:	2b09      	cmp	r3, #9
 802dda6:	d868      	bhi.n	802de7a <_dtoa_r+0x2ba>
 802dda8:	2b05      	cmp	r3, #5
 802ddaa:	bfc4      	itt	gt
 802ddac:	3b04      	subgt	r3, #4
 802ddae:	9307      	strgt	r3, [sp, #28]
 802ddb0:	9b07      	ldr	r3, [sp, #28]
 802ddb2:	f1a3 0302 	sub.w	r3, r3, #2
 802ddb6:	bfcc      	ite	gt
 802ddb8:	2500      	movgt	r5, #0
 802ddba:	2501      	movle	r5, #1
 802ddbc:	2b03      	cmp	r3, #3
 802ddbe:	f200 8085 	bhi.w	802decc <_dtoa_r+0x30c>
 802ddc2:	e8df f003 	tbb	[pc, r3]
 802ddc6:	3b2e      	.short	0x3b2e
 802ddc8:	5839      	.short	0x5839
 802ddca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 802ddce:	441d      	add	r5, r3
 802ddd0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802ddd4:	2b20      	cmp	r3, #32
 802ddd6:	bfc1      	itttt	gt
 802ddd8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802dddc:	fa08 f803 	lslgt.w	r8, r8, r3
 802dde0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 802dde4:	fa26 f303 	lsrgt.w	r3, r6, r3
 802dde8:	bfd6      	itet	le
 802ddea:	f1c3 0320 	rsble	r3, r3, #32
 802ddee:	ea48 0003 	orrgt.w	r0, r8, r3
 802ddf2:	fa06 f003 	lslle.w	r0, r6, r3
 802ddf6:	f7e2 fb9d 	bl	8010534 <__aeabi_ui2d>
 802ddfa:	2201      	movs	r2, #1
 802ddfc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 802de00:	3d01      	subs	r5, #1
 802de02:	920e      	str	r2, [sp, #56]	; 0x38
 802de04:	e76f      	b.n	802dce6 <_dtoa_r+0x126>
 802de06:	2301      	movs	r3, #1
 802de08:	e7b3      	b.n	802dd72 <_dtoa_r+0x1b2>
 802de0a:	900c      	str	r0, [sp, #48]	; 0x30
 802de0c:	e7b2      	b.n	802dd74 <_dtoa_r+0x1b4>
 802de0e:	9b05      	ldr	r3, [sp, #20]
 802de10:	eba3 030b 	sub.w	r3, r3, fp
 802de14:	9305      	str	r3, [sp, #20]
 802de16:	f1cb 0300 	rsb	r3, fp, #0
 802de1a:	9308      	str	r3, [sp, #32]
 802de1c:	2300      	movs	r3, #0
 802de1e:	930b      	str	r3, [sp, #44]	; 0x2c
 802de20:	e7bf      	b.n	802dda2 <_dtoa_r+0x1e2>
 802de22:	2300      	movs	r3, #0
 802de24:	9309      	str	r3, [sp, #36]	; 0x24
 802de26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802de28:	2b00      	cmp	r3, #0
 802de2a:	dc52      	bgt.n	802ded2 <_dtoa_r+0x312>
 802de2c:	2301      	movs	r3, #1
 802de2e:	9301      	str	r3, [sp, #4]
 802de30:	9304      	str	r3, [sp, #16]
 802de32:	461a      	mov	r2, r3
 802de34:	920a      	str	r2, [sp, #40]	; 0x28
 802de36:	e00b      	b.n	802de50 <_dtoa_r+0x290>
 802de38:	2301      	movs	r3, #1
 802de3a:	e7f3      	b.n	802de24 <_dtoa_r+0x264>
 802de3c:	2300      	movs	r3, #0
 802de3e:	9309      	str	r3, [sp, #36]	; 0x24
 802de40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802de42:	445b      	add	r3, fp
 802de44:	9301      	str	r3, [sp, #4]
 802de46:	3301      	adds	r3, #1
 802de48:	2b01      	cmp	r3, #1
 802de4a:	9304      	str	r3, [sp, #16]
 802de4c:	bfb8      	it	lt
 802de4e:	2301      	movlt	r3, #1
 802de50:	69e0      	ldr	r0, [r4, #28]
 802de52:	2100      	movs	r1, #0
 802de54:	2204      	movs	r2, #4
 802de56:	f102 0614 	add.w	r6, r2, #20
 802de5a:	429e      	cmp	r6, r3
 802de5c:	d93d      	bls.n	802deda <_dtoa_r+0x31a>
 802de5e:	6041      	str	r1, [r0, #4]
 802de60:	4620      	mov	r0, r4
 802de62:	f000 fceb 	bl	802e83c <_Balloc>
 802de66:	9000      	str	r0, [sp, #0]
 802de68:	2800      	cmp	r0, #0
 802de6a:	d139      	bne.n	802dee0 <_dtoa_r+0x320>
 802de6c:	4b16      	ldr	r3, [pc, #88]	; (802dec8 <_dtoa_r+0x308>)
 802de6e:	4602      	mov	r2, r0
 802de70:	f240 11af 	movw	r1, #431	; 0x1af
 802de74:	e6bd      	b.n	802dbf2 <_dtoa_r+0x32>
 802de76:	2301      	movs	r3, #1
 802de78:	e7e1      	b.n	802de3e <_dtoa_r+0x27e>
 802de7a:	2501      	movs	r5, #1
 802de7c:	2300      	movs	r3, #0
 802de7e:	9307      	str	r3, [sp, #28]
 802de80:	9509      	str	r5, [sp, #36]	; 0x24
 802de82:	f04f 33ff 	mov.w	r3, #4294967295
 802de86:	9301      	str	r3, [sp, #4]
 802de88:	9304      	str	r3, [sp, #16]
 802de8a:	2200      	movs	r2, #0
 802de8c:	2312      	movs	r3, #18
 802de8e:	e7d1      	b.n	802de34 <_dtoa_r+0x274>
 802de90:	636f4361 	.word	0x636f4361
 802de94:	3fd287a7 	.word	0x3fd287a7
 802de98:	8b60c8b3 	.word	0x8b60c8b3
 802de9c:	3fc68a28 	.word	0x3fc68a28
 802dea0:	509f79fb 	.word	0x509f79fb
 802dea4:	3fd34413 	.word	0x3fd34413
 802dea8:	0803485f 	.word	0x0803485f
 802deac:	080348dd 	.word	0x080348dd
 802deb0:	7ff00000 	.word	0x7ff00000
 802deb4:	080348d9 	.word	0x080348d9
 802deb8:	080348d0 	.word	0x080348d0
 802debc:	08034c19 	.word	0x08034c19
 802dec0:	3ff80000 	.word	0x3ff80000
 802dec4:	080349c8 	.word	0x080349c8
 802dec8:	08034935 	.word	0x08034935
 802decc:	2301      	movs	r3, #1
 802dece:	9309      	str	r3, [sp, #36]	; 0x24
 802ded0:	e7d7      	b.n	802de82 <_dtoa_r+0x2c2>
 802ded2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802ded4:	9301      	str	r3, [sp, #4]
 802ded6:	9304      	str	r3, [sp, #16]
 802ded8:	e7ba      	b.n	802de50 <_dtoa_r+0x290>
 802deda:	3101      	adds	r1, #1
 802dedc:	0052      	lsls	r2, r2, #1
 802dede:	e7ba      	b.n	802de56 <_dtoa_r+0x296>
 802dee0:	69e3      	ldr	r3, [r4, #28]
 802dee2:	9a00      	ldr	r2, [sp, #0]
 802dee4:	601a      	str	r2, [r3, #0]
 802dee6:	9b04      	ldr	r3, [sp, #16]
 802dee8:	2b0e      	cmp	r3, #14
 802deea:	f200 80a8 	bhi.w	802e03e <_dtoa_r+0x47e>
 802deee:	2d00      	cmp	r5, #0
 802def0:	f000 80a5 	beq.w	802e03e <_dtoa_r+0x47e>
 802def4:	f1bb 0f00 	cmp.w	fp, #0
 802def8:	dd38      	ble.n	802df6c <_dtoa_r+0x3ac>
 802defa:	4bc0      	ldr	r3, [pc, #768]	; (802e1fc <_dtoa_r+0x63c>)
 802defc:	f00b 020f 	and.w	r2, fp, #15
 802df00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802df04:	f41b 7f80 	tst.w	fp, #256	; 0x100
 802df08:	e9d3 6700 	ldrd	r6, r7, [r3]
 802df0c:	ea4f 182b 	mov.w	r8, fp, asr #4
 802df10:	d019      	beq.n	802df46 <_dtoa_r+0x386>
 802df12:	4bbb      	ldr	r3, [pc, #748]	; (802e200 <_dtoa_r+0x640>)
 802df14:	ec51 0b18 	vmov	r0, r1, d8
 802df18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802df1c:	f7e2 fcae 	bl	801087c <__aeabi_ddiv>
 802df20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802df24:	f008 080f 	and.w	r8, r8, #15
 802df28:	2503      	movs	r5, #3
 802df2a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 802e200 <_dtoa_r+0x640>
 802df2e:	f1b8 0f00 	cmp.w	r8, #0
 802df32:	d10a      	bne.n	802df4a <_dtoa_r+0x38a>
 802df34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802df38:	4632      	mov	r2, r6
 802df3a:	463b      	mov	r3, r7
 802df3c:	f7e2 fc9e 	bl	801087c <__aeabi_ddiv>
 802df40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802df44:	e02b      	b.n	802df9e <_dtoa_r+0x3de>
 802df46:	2502      	movs	r5, #2
 802df48:	e7ef      	b.n	802df2a <_dtoa_r+0x36a>
 802df4a:	f018 0f01 	tst.w	r8, #1
 802df4e:	d008      	beq.n	802df62 <_dtoa_r+0x3a2>
 802df50:	4630      	mov	r0, r6
 802df52:	4639      	mov	r1, r7
 802df54:	e9d9 2300 	ldrd	r2, r3, [r9]
 802df58:	f7e2 fb66 	bl	8010628 <__aeabi_dmul>
 802df5c:	3501      	adds	r5, #1
 802df5e:	4606      	mov	r6, r0
 802df60:	460f      	mov	r7, r1
 802df62:	ea4f 0868 	mov.w	r8, r8, asr #1
 802df66:	f109 0908 	add.w	r9, r9, #8
 802df6a:	e7e0      	b.n	802df2e <_dtoa_r+0x36e>
 802df6c:	f000 809f 	beq.w	802e0ae <_dtoa_r+0x4ee>
 802df70:	f1cb 0600 	rsb	r6, fp, #0
 802df74:	4ba1      	ldr	r3, [pc, #644]	; (802e1fc <_dtoa_r+0x63c>)
 802df76:	4fa2      	ldr	r7, [pc, #648]	; (802e200 <_dtoa_r+0x640>)
 802df78:	f006 020f 	and.w	r2, r6, #15
 802df7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802df80:	e9d3 2300 	ldrd	r2, r3, [r3]
 802df84:	ec51 0b18 	vmov	r0, r1, d8
 802df88:	f7e2 fb4e 	bl	8010628 <__aeabi_dmul>
 802df8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802df90:	1136      	asrs	r6, r6, #4
 802df92:	2300      	movs	r3, #0
 802df94:	2502      	movs	r5, #2
 802df96:	2e00      	cmp	r6, #0
 802df98:	d17e      	bne.n	802e098 <_dtoa_r+0x4d8>
 802df9a:	2b00      	cmp	r3, #0
 802df9c:	d1d0      	bne.n	802df40 <_dtoa_r+0x380>
 802df9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802dfa0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802dfa4:	2b00      	cmp	r3, #0
 802dfa6:	f000 8084 	beq.w	802e0b2 <_dtoa_r+0x4f2>
 802dfaa:	4b96      	ldr	r3, [pc, #600]	; (802e204 <_dtoa_r+0x644>)
 802dfac:	2200      	movs	r2, #0
 802dfae:	4640      	mov	r0, r8
 802dfb0:	4649      	mov	r1, r9
 802dfb2:	f7e2 fdab 	bl	8010b0c <__aeabi_dcmplt>
 802dfb6:	2800      	cmp	r0, #0
 802dfb8:	d07b      	beq.n	802e0b2 <_dtoa_r+0x4f2>
 802dfba:	9b04      	ldr	r3, [sp, #16]
 802dfbc:	2b00      	cmp	r3, #0
 802dfbe:	d078      	beq.n	802e0b2 <_dtoa_r+0x4f2>
 802dfc0:	9b01      	ldr	r3, [sp, #4]
 802dfc2:	2b00      	cmp	r3, #0
 802dfc4:	dd39      	ble.n	802e03a <_dtoa_r+0x47a>
 802dfc6:	4b90      	ldr	r3, [pc, #576]	; (802e208 <_dtoa_r+0x648>)
 802dfc8:	2200      	movs	r2, #0
 802dfca:	4640      	mov	r0, r8
 802dfcc:	4649      	mov	r1, r9
 802dfce:	f7e2 fb2b 	bl	8010628 <__aeabi_dmul>
 802dfd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802dfd6:	9e01      	ldr	r6, [sp, #4]
 802dfd8:	f10b 37ff 	add.w	r7, fp, #4294967295
 802dfdc:	3501      	adds	r5, #1
 802dfde:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802dfe2:	4628      	mov	r0, r5
 802dfe4:	f7e2 fab6 	bl	8010554 <__aeabi_i2d>
 802dfe8:	4642      	mov	r2, r8
 802dfea:	464b      	mov	r3, r9
 802dfec:	f7e2 fb1c 	bl	8010628 <__aeabi_dmul>
 802dff0:	4b86      	ldr	r3, [pc, #536]	; (802e20c <_dtoa_r+0x64c>)
 802dff2:	2200      	movs	r2, #0
 802dff4:	f7e2 f962 	bl	80102bc <__adddf3>
 802dff8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 802dffc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e000:	9303      	str	r3, [sp, #12]
 802e002:	2e00      	cmp	r6, #0
 802e004:	d158      	bne.n	802e0b8 <_dtoa_r+0x4f8>
 802e006:	4b82      	ldr	r3, [pc, #520]	; (802e210 <_dtoa_r+0x650>)
 802e008:	2200      	movs	r2, #0
 802e00a:	4640      	mov	r0, r8
 802e00c:	4649      	mov	r1, r9
 802e00e:	f7e2 f953 	bl	80102b8 <__aeabi_dsub>
 802e012:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802e016:	4680      	mov	r8, r0
 802e018:	4689      	mov	r9, r1
 802e01a:	f7e2 fd95 	bl	8010b48 <__aeabi_dcmpgt>
 802e01e:	2800      	cmp	r0, #0
 802e020:	f040 8296 	bne.w	802e550 <_dtoa_r+0x990>
 802e024:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802e028:	4640      	mov	r0, r8
 802e02a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802e02e:	4649      	mov	r1, r9
 802e030:	f7e2 fd6c 	bl	8010b0c <__aeabi_dcmplt>
 802e034:	2800      	cmp	r0, #0
 802e036:	f040 8289 	bne.w	802e54c <_dtoa_r+0x98c>
 802e03a:	ed8d 8b02 	vstr	d8, [sp, #8]
 802e03e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802e040:	2b00      	cmp	r3, #0
 802e042:	f2c0 814e 	blt.w	802e2e2 <_dtoa_r+0x722>
 802e046:	f1bb 0f0e 	cmp.w	fp, #14
 802e04a:	f300 814a 	bgt.w	802e2e2 <_dtoa_r+0x722>
 802e04e:	4b6b      	ldr	r3, [pc, #428]	; (802e1fc <_dtoa_r+0x63c>)
 802e050:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802e054:	e9d3 8900 	ldrd	r8, r9, [r3]
 802e058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802e05a:	2b00      	cmp	r3, #0
 802e05c:	f280 80dc 	bge.w	802e218 <_dtoa_r+0x658>
 802e060:	9b04      	ldr	r3, [sp, #16]
 802e062:	2b00      	cmp	r3, #0
 802e064:	f300 80d8 	bgt.w	802e218 <_dtoa_r+0x658>
 802e068:	f040 826f 	bne.w	802e54a <_dtoa_r+0x98a>
 802e06c:	4b68      	ldr	r3, [pc, #416]	; (802e210 <_dtoa_r+0x650>)
 802e06e:	2200      	movs	r2, #0
 802e070:	4640      	mov	r0, r8
 802e072:	4649      	mov	r1, r9
 802e074:	f7e2 fad8 	bl	8010628 <__aeabi_dmul>
 802e078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802e07c:	f7e2 fd5a 	bl	8010b34 <__aeabi_dcmpge>
 802e080:	9e04      	ldr	r6, [sp, #16]
 802e082:	4637      	mov	r7, r6
 802e084:	2800      	cmp	r0, #0
 802e086:	f040 8245 	bne.w	802e514 <_dtoa_r+0x954>
 802e08a:	9d00      	ldr	r5, [sp, #0]
 802e08c:	2331      	movs	r3, #49	; 0x31
 802e08e:	f805 3b01 	strb.w	r3, [r5], #1
 802e092:	f10b 0b01 	add.w	fp, fp, #1
 802e096:	e241      	b.n	802e51c <_dtoa_r+0x95c>
 802e098:	07f2      	lsls	r2, r6, #31
 802e09a:	d505      	bpl.n	802e0a8 <_dtoa_r+0x4e8>
 802e09c:	e9d7 2300 	ldrd	r2, r3, [r7]
 802e0a0:	f7e2 fac2 	bl	8010628 <__aeabi_dmul>
 802e0a4:	3501      	adds	r5, #1
 802e0a6:	2301      	movs	r3, #1
 802e0a8:	1076      	asrs	r6, r6, #1
 802e0aa:	3708      	adds	r7, #8
 802e0ac:	e773      	b.n	802df96 <_dtoa_r+0x3d6>
 802e0ae:	2502      	movs	r5, #2
 802e0b0:	e775      	b.n	802df9e <_dtoa_r+0x3de>
 802e0b2:	9e04      	ldr	r6, [sp, #16]
 802e0b4:	465f      	mov	r7, fp
 802e0b6:	e792      	b.n	802dfde <_dtoa_r+0x41e>
 802e0b8:	9900      	ldr	r1, [sp, #0]
 802e0ba:	4b50      	ldr	r3, [pc, #320]	; (802e1fc <_dtoa_r+0x63c>)
 802e0bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 802e0c0:	4431      	add	r1, r6
 802e0c2:	9102      	str	r1, [sp, #8]
 802e0c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 802e0c6:	eeb0 9a47 	vmov.f32	s18, s14
 802e0ca:	eef0 9a67 	vmov.f32	s19, s15
 802e0ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802e0d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802e0d6:	2900      	cmp	r1, #0
 802e0d8:	d044      	beq.n	802e164 <_dtoa_r+0x5a4>
 802e0da:	494e      	ldr	r1, [pc, #312]	; (802e214 <_dtoa_r+0x654>)
 802e0dc:	2000      	movs	r0, #0
 802e0de:	f7e2 fbcd 	bl	801087c <__aeabi_ddiv>
 802e0e2:	ec53 2b19 	vmov	r2, r3, d9
 802e0e6:	f7e2 f8e7 	bl	80102b8 <__aeabi_dsub>
 802e0ea:	9d00      	ldr	r5, [sp, #0]
 802e0ec:	ec41 0b19 	vmov	d9, r0, r1
 802e0f0:	4649      	mov	r1, r9
 802e0f2:	4640      	mov	r0, r8
 802e0f4:	f7e2 fd48 	bl	8010b88 <__aeabi_d2iz>
 802e0f8:	4606      	mov	r6, r0
 802e0fa:	f7e2 fa2b 	bl	8010554 <__aeabi_i2d>
 802e0fe:	4602      	mov	r2, r0
 802e100:	460b      	mov	r3, r1
 802e102:	4640      	mov	r0, r8
 802e104:	4649      	mov	r1, r9
 802e106:	f7e2 f8d7 	bl	80102b8 <__aeabi_dsub>
 802e10a:	3630      	adds	r6, #48	; 0x30
 802e10c:	f805 6b01 	strb.w	r6, [r5], #1
 802e110:	ec53 2b19 	vmov	r2, r3, d9
 802e114:	4680      	mov	r8, r0
 802e116:	4689      	mov	r9, r1
 802e118:	f7e2 fcf8 	bl	8010b0c <__aeabi_dcmplt>
 802e11c:	2800      	cmp	r0, #0
 802e11e:	d164      	bne.n	802e1ea <_dtoa_r+0x62a>
 802e120:	4642      	mov	r2, r8
 802e122:	464b      	mov	r3, r9
 802e124:	4937      	ldr	r1, [pc, #220]	; (802e204 <_dtoa_r+0x644>)
 802e126:	2000      	movs	r0, #0
 802e128:	f7e2 f8c6 	bl	80102b8 <__aeabi_dsub>
 802e12c:	ec53 2b19 	vmov	r2, r3, d9
 802e130:	f7e2 fcec 	bl	8010b0c <__aeabi_dcmplt>
 802e134:	2800      	cmp	r0, #0
 802e136:	f040 80b6 	bne.w	802e2a6 <_dtoa_r+0x6e6>
 802e13a:	9b02      	ldr	r3, [sp, #8]
 802e13c:	429d      	cmp	r5, r3
 802e13e:	f43f af7c 	beq.w	802e03a <_dtoa_r+0x47a>
 802e142:	4b31      	ldr	r3, [pc, #196]	; (802e208 <_dtoa_r+0x648>)
 802e144:	ec51 0b19 	vmov	r0, r1, d9
 802e148:	2200      	movs	r2, #0
 802e14a:	f7e2 fa6d 	bl	8010628 <__aeabi_dmul>
 802e14e:	4b2e      	ldr	r3, [pc, #184]	; (802e208 <_dtoa_r+0x648>)
 802e150:	ec41 0b19 	vmov	d9, r0, r1
 802e154:	2200      	movs	r2, #0
 802e156:	4640      	mov	r0, r8
 802e158:	4649      	mov	r1, r9
 802e15a:	f7e2 fa65 	bl	8010628 <__aeabi_dmul>
 802e15e:	4680      	mov	r8, r0
 802e160:	4689      	mov	r9, r1
 802e162:	e7c5      	b.n	802e0f0 <_dtoa_r+0x530>
 802e164:	ec51 0b17 	vmov	r0, r1, d7
 802e168:	f7e2 fa5e 	bl	8010628 <__aeabi_dmul>
 802e16c:	9b02      	ldr	r3, [sp, #8]
 802e16e:	9d00      	ldr	r5, [sp, #0]
 802e170:	930f      	str	r3, [sp, #60]	; 0x3c
 802e172:	ec41 0b19 	vmov	d9, r0, r1
 802e176:	4649      	mov	r1, r9
 802e178:	4640      	mov	r0, r8
 802e17a:	f7e2 fd05 	bl	8010b88 <__aeabi_d2iz>
 802e17e:	4606      	mov	r6, r0
 802e180:	f7e2 f9e8 	bl	8010554 <__aeabi_i2d>
 802e184:	3630      	adds	r6, #48	; 0x30
 802e186:	4602      	mov	r2, r0
 802e188:	460b      	mov	r3, r1
 802e18a:	4640      	mov	r0, r8
 802e18c:	4649      	mov	r1, r9
 802e18e:	f7e2 f893 	bl	80102b8 <__aeabi_dsub>
 802e192:	f805 6b01 	strb.w	r6, [r5], #1
 802e196:	9b02      	ldr	r3, [sp, #8]
 802e198:	429d      	cmp	r5, r3
 802e19a:	4680      	mov	r8, r0
 802e19c:	4689      	mov	r9, r1
 802e19e:	f04f 0200 	mov.w	r2, #0
 802e1a2:	d124      	bne.n	802e1ee <_dtoa_r+0x62e>
 802e1a4:	4b1b      	ldr	r3, [pc, #108]	; (802e214 <_dtoa_r+0x654>)
 802e1a6:	ec51 0b19 	vmov	r0, r1, d9
 802e1aa:	f7e2 f887 	bl	80102bc <__adddf3>
 802e1ae:	4602      	mov	r2, r0
 802e1b0:	460b      	mov	r3, r1
 802e1b2:	4640      	mov	r0, r8
 802e1b4:	4649      	mov	r1, r9
 802e1b6:	f7e2 fcc7 	bl	8010b48 <__aeabi_dcmpgt>
 802e1ba:	2800      	cmp	r0, #0
 802e1bc:	d173      	bne.n	802e2a6 <_dtoa_r+0x6e6>
 802e1be:	ec53 2b19 	vmov	r2, r3, d9
 802e1c2:	4914      	ldr	r1, [pc, #80]	; (802e214 <_dtoa_r+0x654>)
 802e1c4:	2000      	movs	r0, #0
 802e1c6:	f7e2 f877 	bl	80102b8 <__aeabi_dsub>
 802e1ca:	4602      	mov	r2, r0
 802e1cc:	460b      	mov	r3, r1
 802e1ce:	4640      	mov	r0, r8
 802e1d0:	4649      	mov	r1, r9
 802e1d2:	f7e2 fc9b 	bl	8010b0c <__aeabi_dcmplt>
 802e1d6:	2800      	cmp	r0, #0
 802e1d8:	f43f af2f 	beq.w	802e03a <_dtoa_r+0x47a>
 802e1dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802e1de:	1e6b      	subs	r3, r5, #1
 802e1e0:	930f      	str	r3, [sp, #60]	; 0x3c
 802e1e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802e1e6:	2b30      	cmp	r3, #48	; 0x30
 802e1e8:	d0f8      	beq.n	802e1dc <_dtoa_r+0x61c>
 802e1ea:	46bb      	mov	fp, r7
 802e1ec:	e04a      	b.n	802e284 <_dtoa_r+0x6c4>
 802e1ee:	4b06      	ldr	r3, [pc, #24]	; (802e208 <_dtoa_r+0x648>)
 802e1f0:	f7e2 fa1a 	bl	8010628 <__aeabi_dmul>
 802e1f4:	4680      	mov	r8, r0
 802e1f6:	4689      	mov	r9, r1
 802e1f8:	e7bd      	b.n	802e176 <_dtoa_r+0x5b6>
 802e1fa:	bf00      	nop
 802e1fc:	080349c8 	.word	0x080349c8
 802e200:	080349a0 	.word	0x080349a0
 802e204:	3ff00000 	.word	0x3ff00000
 802e208:	40240000 	.word	0x40240000
 802e20c:	401c0000 	.word	0x401c0000
 802e210:	40140000 	.word	0x40140000
 802e214:	3fe00000 	.word	0x3fe00000
 802e218:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802e21c:	9d00      	ldr	r5, [sp, #0]
 802e21e:	4642      	mov	r2, r8
 802e220:	464b      	mov	r3, r9
 802e222:	4630      	mov	r0, r6
 802e224:	4639      	mov	r1, r7
 802e226:	f7e2 fb29 	bl	801087c <__aeabi_ddiv>
 802e22a:	f7e2 fcad 	bl	8010b88 <__aeabi_d2iz>
 802e22e:	9001      	str	r0, [sp, #4]
 802e230:	f7e2 f990 	bl	8010554 <__aeabi_i2d>
 802e234:	4642      	mov	r2, r8
 802e236:	464b      	mov	r3, r9
 802e238:	f7e2 f9f6 	bl	8010628 <__aeabi_dmul>
 802e23c:	4602      	mov	r2, r0
 802e23e:	460b      	mov	r3, r1
 802e240:	4630      	mov	r0, r6
 802e242:	4639      	mov	r1, r7
 802e244:	f7e2 f838 	bl	80102b8 <__aeabi_dsub>
 802e248:	9e01      	ldr	r6, [sp, #4]
 802e24a:	9f04      	ldr	r7, [sp, #16]
 802e24c:	3630      	adds	r6, #48	; 0x30
 802e24e:	f805 6b01 	strb.w	r6, [r5], #1
 802e252:	9e00      	ldr	r6, [sp, #0]
 802e254:	1bae      	subs	r6, r5, r6
 802e256:	42b7      	cmp	r7, r6
 802e258:	4602      	mov	r2, r0
 802e25a:	460b      	mov	r3, r1
 802e25c:	d134      	bne.n	802e2c8 <_dtoa_r+0x708>
 802e25e:	f7e2 f82d 	bl	80102bc <__adddf3>
 802e262:	4642      	mov	r2, r8
 802e264:	464b      	mov	r3, r9
 802e266:	4606      	mov	r6, r0
 802e268:	460f      	mov	r7, r1
 802e26a:	f7e2 fc6d 	bl	8010b48 <__aeabi_dcmpgt>
 802e26e:	b9c8      	cbnz	r0, 802e2a4 <_dtoa_r+0x6e4>
 802e270:	4642      	mov	r2, r8
 802e272:	464b      	mov	r3, r9
 802e274:	4630      	mov	r0, r6
 802e276:	4639      	mov	r1, r7
 802e278:	f7e2 fc3e 	bl	8010af8 <__aeabi_dcmpeq>
 802e27c:	b110      	cbz	r0, 802e284 <_dtoa_r+0x6c4>
 802e27e:	9b01      	ldr	r3, [sp, #4]
 802e280:	07db      	lsls	r3, r3, #31
 802e282:	d40f      	bmi.n	802e2a4 <_dtoa_r+0x6e4>
 802e284:	4651      	mov	r1, sl
 802e286:	4620      	mov	r0, r4
 802e288:	f000 fb18 	bl	802e8bc <_Bfree>
 802e28c:	2300      	movs	r3, #0
 802e28e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802e290:	702b      	strb	r3, [r5, #0]
 802e292:	f10b 0301 	add.w	r3, fp, #1
 802e296:	6013      	str	r3, [r2, #0]
 802e298:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802e29a:	2b00      	cmp	r3, #0
 802e29c:	f43f ace2 	beq.w	802dc64 <_dtoa_r+0xa4>
 802e2a0:	601d      	str	r5, [r3, #0]
 802e2a2:	e4df      	b.n	802dc64 <_dtoa_r+0xa4>
 802e2a4:	465f      	mov	r7, fp
 802e2a6:	462b      	mov	r3, r5
 802e2a8:	461d      	mov	r5, r3
 802e2aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802e2ae:	2a39      	cmp	r2, #57	; 0x39
 802e2b0:	d106      	bne.n	802e2c0 <_dtoa_r+0x700>
 802e2b2:	9a00      	ldr	r2, [sp, #0]
 802e2b4:	429a      	cmp	r2, r3
 802e2b6:	d1f7      	bne.n	802e2a8 <_dtoa_r+0x6e8>
 802e2b8:	9900      	ldr	r1, [sp, #0]
 802e2ba:	2230      	movs	r2, #48	; 0x30
 802e2bc:	3701      	adds	r7, #1
 802e2be:	700a      	strb	r2, [r1, #0]
 802e2c0:	781a      	ldrb	r2, [r3, #0]
 802e2c2:	3201      	adds	r2, #1
 802e2c4:	701a      	strb	r2, [r3, #0]
 802e2c6:	e790      	b.n	802e1ea <_dtoa_r+0x62a>
 802e2c8:	4ba3      	ldr	r3, [pc, #652]	; (802e558 <_dtoa_r+0x998>)
 802e2ca:	2200      	movs	r2, #0
 802e2cc:	f7e2 f9ac 	bl	8010628 <__aeabi_dmul>
 802e2d0:	2200      	movs	r2, #0
 802e2d2:	2300      	movs	r3, #0
 802e2d4:	4606      	mov	r6, r0
 802e2d6:	460f      	mov	r7, r1
 802e2d8:	f7e2 fc0e 	bl	8010af8 <__aeabi_dcmpeq>
 802e2dc:	2800      	cmp	r0, #0
 802e2de:	d09e      	beq.n	802e21e <_dtoa_r+0x65e>
 802e2e0:	e7d0      	b.n	802e284 <_dtoa_r+0x6c4>
 802e2e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802e2e4:	2a00      	cmp	r2, #0
 802e2e6:	f000 80ca 	beq.w	802e47e <_dtoa_r+0x8be>
 802e2ea:	9a07      	ldr	r2, [sp, #28]
 802e2ec:	2a01      	cmp	r2, #1
 802e2ee:	f300 80ad 	bgt.w	802e44c <_dtoa_r+0x88c>
 802e2f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802e2f4:	2a00      	cmp	r2, #0
 802e2f6:	f000 80a5 	beq.w	802e444 <_dtoa_r+0x884>
 802e2fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802e2fe:	9e08      	ldr	r6, [sp, #32]
 802e300:	9d05      	ldr	r5, [sp, #20]
 802e302:	9a05      	ldr	r2, [sp, #20]
 802e304:	441a      	add	r2, r3
 802e306:	9205      	str	r2, [sp, #20]
 802e308:	9a06      	ldr	r2, [sp, #24]
 802e30a:	2101      	movs	r1, #1
 802e30c:	441a      	add	r2, r3
 802e30e:	4620      	mov	r0, r4
 802e310:	9206      	str	r2, [sp, #24]
 802e312:	f000 fbd3 	bl	802eabc <__i2b>
 802e316:	4607      	mov	r7, r0
 802e318:	b165      	cbz	r5, 802e334 <_dtoa_r+0x774>
 802e31a:	9b06      	ldr	r3, [sp, #24]
 802e31c:	2b00      	cmp	r3, #0
 802e31e:	dd09      	ble.n	802e334 <_dtoa_r+0x774>
 802e320:	42ab      	cmp	r3, r5
 802e322:	9a05      	ldr	r2, [sp, #20]
 802e324:	bfa8      	it	ge
 802e326:	462b      	movge	r3, r5
 802e328:	1ad2      	subs	r2, r2, r3
 802e32a:	9205      	str	r2, [sp, #20]
 802e32c:	9a06      	ldr	r2, [sp, #24]
 802e32e:	1aed      	subs	r5, r5, r3
 802e330:	1ad3      	subs	r3, r2, r3
 802e332:	9306      	str	r3, [sp, #24]
 802e334:	9b08      	ldr	r3, [sp, #32]
 802e336:	b1f3      	cbz	r3, 802e376 <_dtoa_r+0x7b6>
 802e338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e33a:	2b00      	cmp	r3, #0
 802e33c:	f000 80a3 	beq.w	802e486 <_dtoa_r+0x8c6>
 802e340:	2e00      	cmp	r6, #0
 802e342:	dd10      	ble.n	802e366 <_dtoa_r+0x7a6>
 802e344:	4639      	mov	r1, r7
 802e346:	4632      	mov	r2, r6
 802e348:	4620      	mov	r0, r4
 802e34a:	f000 fc77 	bl	802ec3c <__pow5mult>
 802e34e:	4652      	mov	r2, sl
 802e350:	4601      	mov	r1, r0
 802e352:	4607      	mov	r7, r0
 802e354:	4620      	mov	r0, r4
 802e356:	f000 fbc7 	bl	802eae8 <__multiply>
 802e35a:	4651      	mov	r1, sl
 802e35c:	4680      	mov	r8, r0
 802e35e:	4620      	mov	r0, r4
 802e360:	f000 faac 	bl	802e8bc <_Bfree>
 802e364:	46c2      	mov	sl, r8
 802e366:	9b08      	ldr	r3, [sp, #32]
 802e368:	1b9a      	subs	r2, r3, r6
 802e36a:	d004      	beq.n	802e376 <_dtoa_r+0x7b6>
 802e36c:	4651      	mov	r1, sl
 802e36e:	4620      	mov	r0, r4
 802e370:	f000 fc64 	bl	802ec3c <__pow5mult>
 802e374:	4682      	mov	sl, r0
 802e376:	2101      	movs	r1, #1
 802e378:	4620      	mov	r0, r4
 802e37a:	f000 fb9f 	bl	802eabc <__i2b>
 802e37e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802e380:	2b00      	cmp	r3, #0
 802e382:	4606      	mov	r6, r0
 802e384:	f340 8081 	ble.w	802e48a <_dtoa_r+0x8ca>
 802e388:	461a      	mov	r2, r3
 802e38a:	4601      	mov	r1, r0
 802e38c:	4620      	mov	r0, r4
 802e38e:	f000 fc55 	bl	802ec3c <__pow5mult>
 802e392:	9b07      	ldr	r3, [sp, #28]
 802e394:	2b01      	cmp	r3, #1
 802e396:	4606      	mov	r6, r0
 802e398:	dd7a      	ble.n	802e490 <_dtoa_r+0x8d0>
 802e39a:	f04f 0800 	mov.w	r8, #0
 802e39e:	6933      	ldr	r3, [r6, #16]
 802e3a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 802e3a4:	6918      	ldr	r0, [r3, #16]
 802e3a6:	f000 fb3b 	bl	802ea20 <__hi0bits>
 802e3aa:	f1c0 0020 	rsb	r0, r0, #32
 802e3ae:	9b06      	ldr	r3, [sp, #24]
 802e3b0:	4418      	add	r0, r3
 802e3b2:	f010 001f 	ands.w	r0, r0, #31
 802e3b6:	f000 8094 	beq.w	802e4e2 <_dtoa_r+0x922>
 802e3ba:	f1c0 0320 	rsb	r3, r0, #32
 802e3be:	2b04      	cmp	r3, #4
 802e3c0:	f340 8085 	ble.w	802e4ce <_dtoa_r+0x90e>
 802e3c4:	9b05      	ldr	r3, [sp, #20]
 802e3c6:	f1c0 001c 	rsb	r0, r0, #28
 802e3ca:	4403      	add	r3, r0
 802e3cc:	9305      	str	r3, [sp, #20]
 802e3ce:	9b06      	ldr	r3, [sp, #24]
 802e3d0:	4403      	add	r3, r0
 802e3d2:	4405      	add	r5, r0
 802e3d4:	9306      	str	r3, [sp, #24]
 802e3d6:	9b05      	ldr	r3, [sp, #20]
 802e3d8:	2b00      	cmp	r3, #0
 802e3da:	dd05      	ble.n	802e3e8 <_dtoa_r+0x828>
 802e3dc:	4651      	mov	r1, sl
 802e3de:	461a      	mov	r2, r3
 802e3e0:	4620      	mov	r0, r4
 802e3e2:	f000 fc85 	bl	802ecf0 <__lshift>
 802e3e6:	4682      	mov	sl, r0
 802e3e8:	9b06      	ldr	r3, [sp, #24]
 802e3ea:	2b00      	cmp	r3, #0
 802e3ec:	dd05      	ble.n	802e3fa <_dtoa_r+0x83a>
 802e3ee:	4631      	mov	r1, r6
 802e3f0:	461a      	mov	r2, r3
 802e3f2:	4620      	mov	r0, r4
 802e3f4:	f000 fc7c 	bl	802ecf0 <__lshift>
 802e3f8:	4606      	mov	r6, r0
 802e3fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802e3fc:	2b00      	cmp	r3, #0
 802e3fe:	d072      	beq.n	802e4e6 <_dtoa_r+0x926>
 802e400:	4631      	mov	r1, r6
 802e402:	4650      	mov	r0, sl
 802e404:	f000 fce0 	bl	802edc8 <__mcmp>
 802e408:	2800      	cmp	r0, #0
 802e40a:	da6c      	bge.n	802e4e6 <_dtoa_r+0x926>
 802e40c:	2300      	movs	r3, #0
 802e40e:	4651      	mov	r1, sl
 802e410:	220a      	movs	r2, #10
 802e412:	4620      	mov	r0, r4
 802e414:	f000 fa74 	bl	802e900 <__multadd>
 802e418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e41a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802e41e:	4682      	mov	sl, r0
 802e420:	2b00      	cmp	r3, #0
 802e422:	f000 81b0 	beq.w	802e786 <_dtoa_r+0xbc6>
 802e426:	2300      	movs	r3, #0
 802e428:	4639      	mov	r1, r7
 802e42a:	220a      	movs	r2, #10
 802e42c:	4620      	mov	r0, r4
 802e42e:	f000 fa67 	bl	802e900 <__multadd>
 802e432:	9b01      	ldr	r3, [sp, #4]
 802e434:	2b00      	cmp	r3, #0
 802e436:	4607      	mov	r7, r0
 802e438:	f300 8096 	bgt.w	802e568 <_dtoa_r+0x9a8>
 802e43c:	9b07      	ldr	r3, [sp, #28]
 802e43e:	2b02      	cmp	r3, #2
 802e440:	dc59      	bgt.n	802e4f6 <_dtoa_r+0x936>
 802e442:	e091      	b.n	802e568 <_dtoa_r+0x9a8>
 802e444:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802e446:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802e44a:	e758      	b.n	802e2fe <_dtoa_r+0x73e>
 802e44c:	9b04      	ldr	r3, [sp, #16]
 802e44e:	1e5e      	subs	r6, r3, #1
 802e450:	9b08      	ldr	r3, [sp, #32]
 802e452:	42b3      	cmp	r3, r6
 802e454:	bfbf      	itttt	lt
 802e456:	9b08      	ldrlt	r3, [sp, #32]
 802e458:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 802e45a:	9608      	strlt	r6, [sp, #32]
 802e45c:	1af3      	sublt	r3, r6, r3
 802e45e:	bfb4      	ite	lt
 802e460:	18d2      	addlt	r2, r2, r3
 802e462:	1b9e      	subge	r6, r3, r6
 802e464:	9b04      	ldr	r3, [sp, #16]
 802e466:	bfbc      	itt	lt
 802e468:	920b      	strlt	r2, [sp, #44]	; 0x2c
 802e46a:	2600      	movlt	r6, #0
 802e46c:	2b00      	cmp	r3, #0
 802e46e:	bfb7      	itett	lt
 802e470:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 802e474:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 802e478:	1a9d      	sublt	r5, r3, r2
 802e47a:	2300      	movlt	r3, #0
 802e47c:	e741      	b.n	802e302 <_dtoa_r+0x742>
 802e47e:	9e08      	ldr	r6, [sp, #32]
 802e480:	9d05      	ldr	r5, [sp, #20]
 802e482:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802e484:	e748      	b.n	802e318 <_dtoa_r+0x758>
 802e486:	9a08      	ldr	r2, [sp, #32]
 802e488:	e770      	b.n	802e36c <_dtoa_r+0x7ac>
 802e48a:	9b07      	ldr	r3, [sp, #28]
 802e48c:	2b01      	cmp	r3, #1
 802e48e:	dc19      	bgt.n	802e4c4 <_dtoa_r+0x904>
 802e490:	9b02      	ldr	r3, [sp, #8]
 802e492:	b9bb      	cbnz	r3, 802e4c4 <_dtoa_r+0x904>
 802e494:	9b03      	ldr	r3, [sp, #12]
 802e496:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802e49a:	b99b      	cbnz	r3, 802e4c4 <_dtoa_r+0x904>
 802e49c:	9b03      	ldr	r3, [sp, #12]
 802e49e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802e4a2:	0d1b      	lsrs	r3, r3, #20
 802e4a4:	051b      	lsls	r3, r3, #20
 802e4a6:	b183      	cbz	r3, 802e4ca <_dtoa_r+0x90a>
 802e4a8:	9b05      	ldr	r3, [sp, #20]
 802e4aa:	3301      	adds	r3, #1
 802e4ac:	9305      	str	r3, [sp, #20]
 802e4ae:	9b06      	ldr	r3, [sp, #24]
 802e4b0:	3301      	adds	r3, #1
 802e4b2:	9306      	str	r3, [sp, #24]
 802e4b4:	f04f 0801 	mov.w	r8, #1
 802e4b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802e4ba:	2b00      	cmp	r3, #0
 802e4bc:	f47f af6f 	bne.w	802e39e <_dtoa_r+0x7de>
 802e4c0:	2001      	movs	r0, #1
 802e4c2:	e774      	b.n	802e3ae <_dtoa_r+0x7ee>
 802e4c4:	f04f 0800 	mov.w	r8, #0
 802e4c8:	e7f6      	b.n	802e4b8 <_dtoa_r+0x8f8>
 802e4ca:	4698      	mov	r8, r3
 802e4cc:	e7f4      	b.n	802e4b8 <_dtoa_r+0x8f8>
 802e4ce:	d082      	beq.n	802e3d6 <_dtoa_r+0x816>
 802e4d0:	9a05      	ldr	r2, [sp, #20]
 802e4d2:	331c      	adds	r3, #28
 802e4d4:	441a      	add	r2, r3
 802e4d6:	9205      	str	r2, [sp, #20]
 802e4d8:	9a06      	ldr	r2, [sp, #24]
 802e4da:	441a      	add	r2, r3
 802e4dc:	441d      	add	r5, r3
 802e4de:	9206      	str	r2, [sp, #24]
 802e4e0:	e779      	b.n	802e3d6 <_dtoa_r+0x816>
 802e4e2:	4603      	mov	r3, r0
 802e4e4:	e7f4      	b.n	802e4d0 <_dtoa_r+0x910>
 802e4e6:	9b04      	ldr	r3, [sp, #16]
 802e4e8:	2b00      	cmp	r3, #0
 802e4ea:	dc37      	bgt.n	802e55c <_dtoa_r+0x99c>
 802e4ec:	9b07      	ldr	r3, [sp, #28]
 802e4ee:	2b02      	cmp	r3, #2
 802e4f0:	dd34      	ble.n	802e55c <_dtoa_r+0x99c>
 802e4f2:	9b04      	ldr	r3, [sp, #16]
 802e4f4:	9301      	str	r3, [sp, #4]
 802e4f6:	9b01      	ldr	r3, [sp, #4]
 802e4f8:	b963      	cbnz	r3, 802e514 <_dtoa_r+0x954>
 802e4fa:	4631      	mov	r1, r6
 802e4fc:	2205      	movs	r2, #5
 802e4fe:	4620      	mov	r0, r4
 802e500:	f000 f9fe 	bl	802e900 <__multadd>
 802e504:	4601      	mov	r1, r0
 802e506:	4606      	mov	r6, r0
 802e508:	4650      	mov	r0, sl
 802e50a:	f000 fc5d 	bl	802edc8 <__mcmp>
 802e50e:	2800      	cmp	r0, #0
 802e510:	f73f adbb 	bgt.w	802e08a <_dtoa_r+0x4ca>
 802e514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802e516:	9d00      	ldr	r5, [sp, #0]
 802e518:	ea6f 0b03 	mvn.w	fp, r3
 802e51c:	f04f 0800 	mov.w	r8, #0
 802e520:	4631      	mov	r1, r6
 802e522:	4620      	mov	r0, r4
 802e524:	f000 f9ca 	bl	802e8bc <_Bfree>
 802e528:	2f00      	cmp	r7, #0
 802e52a:	f43f aeab 	beq.w	802e284 <_dtoa_r+0x6c4>
 802e52e:	f1b8 0f00 	cmp.w	r8, #0
 802e532:	d005      	beq.n	802e540 <_dtoa_r+0x980>
 802e534:	45b8      	cmp	r8, r7
 802e536:	d003      	beq.n	802e540 <_dtoa_r+0x980>
 802e538:	4641      	mov	r1, r8
 802e53a:	4620      	mov	r0, r4
 802e53c:	f000 f9be 	bl	802e8bc <_Bfree>
 802e540:	4639      	mov	r1, r7
 802e542:	4620      	mov	r0, r4
 802e544:	f000 f9ba 	bl	802e8bc <_Bfree>
 802e548:	e69c      	b.n	802e284 <_dtoa_r+0x6c4>
 802e54a:	2600      	movs	r6, #0
 802e54c:	4637      	mov	r7, r6
 802e54e:	e7e1      	b.n	802e514 <_dtoa_r+0x954>
 802e550:	46bb      	mov	fp, r7
 802e552:	4637      	mov	r7, r6
 802e554:	e599      	b.n	802e08a <_dtoa_r+0x4ca>
 802e556:	bf00      	nop
 802e558:	40240000 	.word	0x40240000
 802e55c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e55e:	2b00      	cmp	r3, #0
 802e560:	f000 80c8 	beq.w	802e6f4 <_dtoa_r+0xb34>
 802e564:	9b04      	ldr	r3, [sp, #16]
 802e566:	9301      	str	r3, [sp, #4]
 802e568:	2d00      	cmp	r5, #0
 802e56a:	dd05      	ble.n	802e578 <_dtoa_r+0x9b8>
 802e56c:	4639      	mov	r1, r7
 802e56e:	462a      	mov	r2, r5
 802e570:	4620      	mov	r0, r4
 802e572:	f000 fbbd 	bl	802ecf0 <__lshift>
 802e576:	4607      	mov	r7, r0
 802e578:	f1b8 0f00 	cmp.w	r8, #0
 802e57c:	d05b      	beq.n	802e636 <_dtoa_r+0xa76>
 802e57e:	6879      	ldr	r1, [r7, #4]
 802e580:	4620      	mov	r0, r4
 802e582:	f000 f95b 	bl	802e83c <_Balloc>
 802e586:	4605      	mov	r5, r0
 802e588:	b928      	cbnz	r0, 802e596 <_dtoa_r+0x9d6>
 802e58a:	4b83      	ldr	r3, [pc, #524]	; (802e798 <_dtoa_r+0xbd8>)
 802e58c:	4602      	mov	r2, r0
 802e58e:	f240 21ef 	movw	r1, #751	; 0x2ef
 802e592:	f7ff bb2e 	b.w	802dbf2 <_dtoa_r+0x32>
 802e596:	693a      	ldr	r2, [r7, #16]
 802e598:	3202      	adds	r2, #2
 802e59a:	0092      	lsls	r2, r2, #2
 802e59c:	f107 010c 	add.w	r1, r7, #12
 802e5a0:	300c      	adds	r0, #12
 802e5a2:	f7ff fa68 	bl	802da76 <memcpy>
 802e5a6:	2201      	movs	r2, #1
 802e5a8:	4629      	mov	r1, r5
 802e5aa:	4620      	mov	r0, r4
 802e5ac:	f000 fba0 	bl	802ecf0 <__lshift>
 802e5b0:	9b00      	ldr	r3, [sp, #0]
 802e5b2:	3301      	adds	r3, #1
 802e5b4:	9304      	str	r3, [sp, #16]
 802e5b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 802e5ba:	4413      	add	r3, r2
 802e5bc:	9308      	str	r3, [sp, #32]
 802e5be:	9b02      	ldr	r3, [sp, #8]
 802e5c0:	f003 0301 	and.w	r3, r3, #1
 802e5c4:	46b8      	mov	r8, r7
 802e5c6:	9306      	str	r3, [sp, #24]
 802e5c8:	4607      	mov	r7, r0
 802e5ca:	9b04      	ldr	r3, [sp, #16]
 802e5cc:	4631      	mov	r1, r6
 802e5ce:	3b01      	subs	r3, #1
 802e5d0:	4650      	mov	r0, sl
 802e5d2:	9301      	str	r3, [sp, #4]
 802e5d4:	f7ff fa6b 	bl	802daae <quorem>
 802e5d8:	4641      	mov	r1, r8
 802e5da:	9002      	str	r0, [sp, #8]
 802e5dc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 802e5e0:	4650      	mov	r0, sl
 802e5e2:	f000 fbf1 	bl	802edc8 <__mcmp>
 802e5e6:	463a      	mov	r2, r7
 802e5e8:	9005      	str	r0, [sp, #20]
 802e5ea:	4631      	mov	r1, r6
 802e5ec:	4620      	mov	r0, r4
 802e5ee:	f000 fc07 	bl	802ee00 <__mdiff>
 802e5f2:	68c2      	ldr	r2, [r0, #12]
 802e5f4:	4605      	mov	r5, r0
 802e5f6:	bb02      	cbnz	r2, 802e63a <_dtoa_r+0xa7a>
 802e5f8:	4601      	mov	r1, r0
 802e5fa:	4650      	mov	r0, sl
 802e5fc:	f000 fbe4 	bl	802edc8 <__mcmp>
 802e600:	4602      	mov	r2, r0
 802e602:	4629      	mov	r1, r5
 802e604:	4620      	mov	r0, r4
 802e606:	9209      	str	r2, [sp, #36]	; 0x24
 802e608:	f000 f958 	bl	802e8bc <_Bfree>
 802e60c:	9b07      	ldr	r3, [sp, #28]
 802e60e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802e610:	9d04      	ldr	r5, [sp, #16]
 802e612:	ea43 0102 	orr.w	r1, r3, r2
 802e616:	9b06      	ldr	r3, [sp, #24]
 802e618:	4319      	orrs	r1, r3
 802e61a:	d110      	bne.n	802e63e <_dtoa_r+0xa7e>
 802e61c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802e620:	d029      	beq.n	802e676 <_dtoa_r+0xab6>
 802e622:	9b05      	ldr	r3, [sp, #20]
 802e624:	2b00      	cmp	r3, #0
 802e626:	dd02      	ble.n	802e62e <_dtoa_r+0xa6e>
 802e628:	9b02      	ldr	r3, [sp, #8]
 802e62a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 802e62e:	9b01      	ldr	r3, [sp, #4]
 802e630:	f883 9000 	strb.w	r9, [r3]
 802e634:	e774      	b.n	802e520 <_dtoa_r+0x960>
 802e636:	4638      	mov	r0, r7
 802e638:	e7ba      	b.n	802e5b0 <_dtoa_r+0x9f0>
 802e63a:	2201      	movs	r2, #1
 802e63c:	e7e1      	b.n	802e602 <_dtoa_r+0xa42>
 802e63e:	9b05      	ldr	r3, [sp, #20]
 802e640:	2b00      	cmp	r3, #0
 802e642:	db04      	blt.n	802e64e <_dtoa_r+0xa8e>
 802e644:	9907      	ldr	r1, [sp, #28]
 802e646:	430b      	orrs	r3, r1
 802e648:	9906      	ldr	r1, [sp, #24]
 802e64a:	430b      	orrs	r3, r1
 802e64c:	d120      	bne.n	802e690 <_dtoa_r+0xad0>
 802e64e:	2a00      	cmp	r2, #0
 802e650:	dded      	ble.n	802e62e <_dtoa_r+0xa6e>
 802e652:	4651      	mov	r1, sl
 802e654:	2201      	movs	r2, #1
 802e656:	4620      	mov	r0, r4
 802e658:	f000 fb4a 	bl	802ecf0 <__lshift>
 802e65c:	4631      	mov	r1, r6
 802e65e:	4682      	mov	sl, r0
 802e660:	f000 fbb2 	bl	802edc8 <__mcmp>
 802e664:	2800      	cmp	r0, #0
 802e666:	dc03      	bgt.n	802e670 <_dtoa_r+0xab0>
 802e668:	d1e1      	bne.n	802e62e <_dtoa_r+0xa6e>
 802e66a:	f019 0f01 	tst.w	r9, #1
 802e66e:	d0de      	beq.n	802e62e <_dtoa_r+0xa6e>
 802e670:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802e674:	d1d8      	bne.n	802e628 <_dtoa_r+0xa68>
 802e676:	9a01      	ldr	r2, [sp, #4]
 802e678:	2339      	movs	r3, #57	; 0x39
 802e67a:	7013      	strb	r3, [r2, #0]
 802e67c:	462b      	mov	r3, r5
 802e67e:	461d      	mov	r5, r3
 802e680:	3b01      	subs	r3, #1
 802e682:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802e686:	2a39      	cmp	r2, #57	; 0x39
 802e688:	d06c      	beq.n	802e764 <_dtoa_r+0xba4>
 802e68a:	3201      	adds	r2, #1
 802e68c:	701a      	strb	r2, [r3, #0]
 802e68e:	e747      	b.n	802e520 <_dtoa_r+0x960>
 802e690:	2a00      	cmp	r2, #0
 802e692:	dd07      	ble.n	802e6a4 <_dtoa_r+0xae4>
 802e694:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802e698:	d0ed      	beq.n	802e676 <_dtoa_r+0xab6>
 802e69a:	9a01      	ldr	r2, [sp, #4]
 802e69c:	f109 0301 	add.w	r3, r9, #1
 802e6a0:	7013      	strb	r3, [r2, #0]
 802e6a2:	e73d      	b.n	802e520 <_dtoa_r+0x960>
 802e6a4:	9b04      	ldr	r3, [sp, #16]
 802e6a6:	9a08      	ldr	r2, [sp, #32]
 802e6a8:	f803 9c01 	strb.w	r9, [r3, #-1]
 802e6ac:	4293      	cmp	r3, r2
 802e6ae:	d043      	beq.n	802e738 <_dtoa_r+0xb78>
 802e6b0:	4651      	mov	r1, sl
 802e6b2:	2300      	movs	r3, #0
 802e6b4:	220a      	movs	r2, #10
 802e6b6:	4620      	mov	r0, r4
 802e6b8:	f000 f922 	bl	802e900 <__multadd>
 802e6bc:	45b8      	cmp	r8, r7
 802e6be:	4682      	mov	sl, r0
 802e6c0:	f04f 0300 	mov.w	r3, #0
 802e6c4:	f04f 020a 	mov.w	r2, #10
 802e6c8:	4641      	mov	r1, r8
 802e6ca:	4620      	mov	r0, r4
 802e6cc:	d107      	bne.n	802e6de <_dtoa_r+0xb1e>
 802e6ce:	f000 f917 	bl	802e900 <__multadd>
 802e6d2:	4680      	mov	r8, r0
 802e6d4:	4607      	mov	r7, r0
 802e6d6:	9b04      	ldr	r3, [sp, #16]
 802e6d8:	3301      	adds	r3, #1
 802e6da:	9304      	str	r3, [sp, #16]
 802e6dc:	e775      	b.n	802e5ca <_dtoa_r+0xa0a>
 802e6de:	f000 f90f 	bl	802e900 <__multadd>
 802e6e2:	4639      	mov	r1, r7
 802e6e4:	4680      	mov	r8, r0
 802e6e6:	2300      	movs	r3, #0
 802e6e8:	220a      	movs	r2, #10
 802e6ea:	4620      	mov	r0, r4
 802e6ec:	f000 f908 	bl	802e900 <__multadd>
 802e6f0:	4607      	mov	r7, r0
 802e6f2:	e7f0      	b.n	802e6d6 <_dtoa_r+0xb16>
 802e6f4:	9b04      	ldr	r3, [sp, #16]
 802e6f6:	9301      	str	r3, [sp, #4]
 802e6f8:	9d00      	ldr	r5, [sp, #0]
 802e6fa:	4631      	mov	r1, r6
 802e6fc:	4650      	mov	r0, sl
 802e6fe:	f7ff f9d6 	bl	802daae <quorem>
 802e702:	f100 0930 	add.w	r9, r0, #48	; 0x30
 802e706:	9b00      	ldr	r3, [sp, #0]
 802e708:	f805 9b01 	strb.w	r9, [r5], #1
 802e70c:	1aea      	subs	r2, r5, r3
 802e70e:	9b01      	ldr	r3, [sp, #4]
 802e710:	4293      	cmp	r3, r2
 802e712:	dd07      	ble.n	802e724 <_dtoa_r+0xb64>
 802e714:	4651      	mov	r1, sl
 802e716:	2300      	movs	r3, #0
 802e718:	220a      	movs	r2, #10
 802e71a:	4620      	mov	r0, r4
 802e71c:	f000 f8f0 	bl	802e900 <__multadd>
 802e720:	4682      	mov	sl, r0
 802e722:	e7ea      	b.n	802e6fa <_dtoa_r+0xb3a>
 802e724:	9b01      	ldr	r3, [sp, #4]
 802e726:	2b00      	cmp	r3, #0
 802e728:	bfc8      	it	gt
 802e72a:	461d      	movgt	r5, r3
 802e72c:	9b00      	ldr	r3, [sp, #0]
 802e72e:	bfd8      	it	le
 802e730:	2501      	movle	r5, #1
 802e732:	441d      	add	r5, r3
 802e734:	f04f 0800 	mov.w	r8, #0
 802e738:	4651      	mov	r1, sl
 802e73a:	2201      	movs	r2, #1
 802e73c:	4620      	mov	r0, r4
 802e73e:	f000 fad7 	bl	802ecf0 <__lshift>
 802e742:	4631      	mov	r1, r6
 802e744:	4682      	mov	sl, r0
 802e746:	f000 fb3f 	bl	802edc8 <__mcmp>
 802e74a:	2800      	cmp	r0, #0
 802e74c:	dc96      	bgt.n	802e67c <_dtoa_r+0xabc>
 802e74e:	d102      	bne.n	802e756 <_dtoa_r+0xb96>
 802e750:	f019 0f01 	tst.w	r9, #1
 802e754:	d192      	bne.n	802e67c <_dtoa_r+0xabc>
 802e756:	462b      	mov	r3, r5
 802e758:	461d      	mov	r5, r3
 802e75a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802e75e:	2a30      	cmp	r2, #48	; 0x30
 802e760:	d0fa      	beq.n	802e758 <_dtoa_r+0xb98>
 802e762:	e6dd      	b.n	802e520 <_dtoa_r+0x960>
 802e764:	9a00      	ldr	r2, [sp, #0]
 802e766:	429a      	cmp	r2, r3
 802e768:	d189      	bne.n	802e67e <_dtoa_r+0xabe>
 802e76a:	f10b 0b01 	add.w	fp, fp, #1
 802e76e:	2331      	movs	r3, #49	; 0x31
 802e770:	e796      	b.n	802e6a0 <_dtoa_r+0xae0>
 802e772:	4b0a      	ldr	r3, [pc, #40]	; (802e79c <_dtoa_r+0xbdc>)
 802e774:	f7ff ba99 	b.w	802dcaa <_dtoa_r+0xea>
 802e778:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802e77a:	2b00      	cmp	r3, #0
 802e77c:	f47f aa6d 	bne.w	802dc5a <_dtoa_r+0x9a>
 802e780:	4b07      	ldr	r3, [pc, #28]	; (802e7a0 <_dtoa_r+0xbe0>)
 802e782:	f7ff ba92 	b.w	802dcaa <_dtoa_r+0xea>
 802e786:	9b01      	ldr	r3, [sp, #4]
 802e788:	2b00      	cmp	r3, #0
 802e78a:	dcb5      	bgt.n	802e6f8 <_dtoa_r+0xb38>
 802e78c:	9b07      	ldr	r3, [sp, #28]
 802e78e:	2b02      	cmp	r3, #2
 802e790:	f73f aeb1 	bgt.w	802e4f6 <_dtoa_r+0x936>
 802e794:	e7b0      	b.n	802e6f8 <_dtoa_r+0xb38>
 802e796:	bf00      	nop
 802e798:	08034935 	.word	0x08034935
 802e79c:	08034c18 	.word	0x08034c18
 802e7a0:	080348d0 	.word	0x080348d0

0802e7a4 <_free_r>:
 802e7a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802e7a6:	2900      	cmp	r1, #0
 802e7a8:	d044      	beq.n	802e834 <_free_r+0x90>
 802e7aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802e7ae:	9001      	str	r0, [sp, #4]
 802e7b0:	2b00      	cmp	r3, #0
 802e7b2:	f1a1 0404 	sub.w	r4, r1, #4
 802e7b6:	bfb8      	it	lt
 802e7b8:	18e4      	addlt	r4, r4, r3
 802e7ba:	f7fd fe9b 	bl	802c4f4 <__malloc_lock>
 802e7be:	4a1e      	ldr	r2, [pc, #120]	; (802e838 <_free_r+0x94>)
 802e7c0:	9801      	ldr	r0, [sp, #4]
 802e7c2:	6813      	ldr	r3, [r2, #0]
 802e7c4:	b933      	cbnz	r3, 802e7d4 <_free_r+0x30>
 802e7c6:	6063      	str	r3, [r4, #4]
 802e7c8:	6014      	str	r4, [r2, #0]
 802e7ca:	b003      	add	sp, #12
 802e7cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802e7d0:	f7fd be96 	b.w	802c500 <__malloc_unlock>
 802e7d4:	42a3      	cmp	r3, r4
 802e7d6:	d908      	bls.n	802e7ea <_free_r+0x46>
 802e7d8:	6825      	ldr	r5, [r4, #0]
 802e7da:	1961      	adds	r1, r4, r5
 802e7dc:	428b      	cmp	r3, r1
 802e7de:	bf01      	itttt	eq
 802e7e0:	6819      	ldreq	r1, [r3, #0]
 802e7e2:	685b      	ldreq	r3, [r3, #4]
 802e7e4:	1949      	addeq	r1, r1, r5
 802e7e6:	6021      	streq	r1, [r4, #0]
 802e7e8:	e7ed      	b.n	802e7c6 <_free_r+0x22>
 802e7ea:	461a      	mov	r2, r3
 802e7ec:	685b      	ldr	r3, [r3, #4]
 802e7ee:	b10b      	cbz	r3, 802e7f4 <_free_r+0x50>
 802e7f0:	42a3      	cmp	r3, r4
 802e7f2:	d9fa      	bls.n	802e7ea <_free_r+0x46>
 802e7f4:	6811      	ldr	r1, [r2, #0]
 802e7f6:	1855      	adds	r5, r2, r1
 802e7f8:	42a5      	cmp	r5, r4
 802e7fa:	d10b      	bne.n	802e814 <_free_r+0x70>
 802e7fc:	6824      	ldr	r4, [r4, #0]
 802e7fe:	4421      	add	r1, r4
 802e800:	1854      	adds	r4, r2, r1
 802e802:	42a3      	cmp	r3, r4
 802e804:	6011      	str	r1, [r2, #0]
 802e806:	d1e0      	bne.n	802e7ca <_free_r+0x26>
 802e808:	681c      	ldr	r4, [r3, #0]
 802e80a:	685b      	ldr	r3, [r3, #4]
 802e80c:	6053      	str	r3, [r2, #4]
 802e80e:	440c      	add	r4, r1
 802e810:	6014      	str	r4, [r2, #0]
 802e812:	e7da      	b.n	802e7ca <_free_r+0x26>
 802e814:	d902      	bls.n	802e81c <_free_r+0x78>
 802e816:	230c      	movs	r3, #12
 802e818:	6003      	str	r3, [r0, #0]
 802e81a:	e7d6      	b.n	802e7ca <_free_r+0x26>
 802e81c:	6825      	ldr	r5, [r4, #0]
 802e81e:	1961      	adds	r1, r4, r5
 802e820:	428b      	cmp	r3, r1
 802e822:	bf04      	itt	eq
 802e824:	6819      	ldreq	r1, [r3, #0]
 802e826:	685b      	ldreq	r3, [r3, #4]
 802e828:	6063      	str	r3, [r4, #4]
 802e82a:	bf04      	itt	eq
 802e82c:	1949      	addeq	r1, r1, r5
 802e82e:	6021      	streq	r1, [r4, #0]
 802e830:	6054      	str	r4, [r2, #4]
 802e832:	e7ca      	b.n	802e7ca <_free_r+0x26>
 802e834:	b003      	add	sp, #12
 802e836:	bd30      	pop	{r4, r5, pc}
 802e838:	2000d9a4 	.word	0x2000d9a4

0802e83c <_Balloc>:
 802e83c:	b570      	push	{r4, r5, r6, lr}
 802e83e:	69c6      	ldr	r6, [r0, #28]
 802e840:	4604      	mov	r4, r0
 802e842:	460d      	mov	r5, r1
 802e844:	b976      	cbnz	r6, 802e864 <_Balloc+0x28>
 802e846:	2010      	movs	r0, #16
 802e848:	f7fd fda4 	bl	802c394 <malloc>
 802e84c:	4602      	mov	r2, r0
 802e84e:	61e0      	str	r0, [r4, #28]
 802e850:	b920      	cbnz	r0, 802e85c <_Balloc+0x20>
 802e852:	4b18      	ldr	r3, [pc, #96]	; (802e8b4 <_Balloc+0x78>)
 802e854:	4818      	ldr	r0, [pc, #96]	; (802e8b8 <_Balloc+0x7c>)
 802e856:	216b      	movs	r1, #107	; 0x6b
 802e858:	f7fd fd68 	bl	802c32c <__assert_func>
 802e85c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802e860:	6006      	str	r6, [r0, #0]
 802e862:	60c6      	str	r6, [r0, #12]
 802e864:	69e6      	ldr	r6, [r4, #28]
 802e866:	68f3      	ldr	r3, [r6, #12]
 802e868:	b183      	cbz	r3, 802e88c <_Balloc+0x50>
 802e86a:	69e3      	ldr	r3, [r4, #28]
 802e86c:	68db      	ldr	r3, [r3, #12]
 802e86e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802e872:	b9b8      	cbnz	r0, 802e8a4 <_Balloc+0x68>
 802e874:	2101      	movs	r1, #1
 802e876:	fa01 f605 	lsl.w	r6, r1, r5
 802e87a:	1d72      	adds	r2, r6, #5
 802e87c:	0092      	lsls	r2, r2, #2
 802e87e:	4620      	mov	r0, r4
 802e880:	f7fd fd72 	bl	802c368 <_calloc_r>
 802e884:	b160      	cbz	r0, 802e8a0 <_Balloc+0x64>
 802e886:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802e88a:	e00e      	b.n	802e8aa <_Balloc+0x6e>
 802e88c:	2221      	movs	r2, #33	; 0x21
 802e88e:	2104      	movs	r1, #4
 802e890:	4620      	mov	r0, r4
 802e892:	f7fd fd69 	bl	802c368 <_calloc_r>
 802e896:	69e3      	ldr	r3, [r4, #28]
 802e898:	60f0      	str	r0, [r6, #12]
 802e89a:	68db      	ldr	r3, [r3, #12]
 802e89c:	2b00      	cmp	r3, #0
 802e89e:	d1e4      	bne.n	802e86a <_Balloc+0x2e>
 802e8a0:	2000      	movs	r0, #0
 802e8a2:	bd70      	pop	{r4, r5, r6, pc}
 802e8a4:	6802      	ldr	r2, [r0, #0]
 802e8a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802e8aa:	2300      	movs	r3, #0
 802e8ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802e8b0:	e7f7      	b.n	802e8a2 <_Balloc+0x66>
 802e8b2:	bf00      	nop
 802e8b4:	0803485f 	.word	0x0803485f
 802e8b8:	08034946 	.word	0x08034946

0802e8bc <_Bfree>:
 802e8bc:	b570      	push	{r4, r5, r6, lr}
 802e8be:	69c6      	ldr	r6, [r0, #28]
 802e8c0:	4605      	mov	r5, r0
 802e8c2:	460c      	mov	r4, r1
 802e8c4:	b976      	cbnz	r6, 802e8e4 <_Bfree+0x28>
 802e8c6:	2010      	movs	r0, #16
 802e8c8:	f7fd fd64 	bl	802c394 <malloc>
 802e8cc:	4602      	mov	r2, r0
 802e8ce:	61e8      	str	r0, [r5, #28]
 802e8d0:	b920      	cbnz	r0, 802e8dc <_Bfree+0x20>
 802e8d2:	4b09      	ldr	r3, [pc, #36]	; (802e8f8 <_Bfree+0x3c>)
 802e8d4:	4809      	ldr	r0, [pc, #36]	; (802e8fc <_Bfree+0x40>)
 802e8d6:	218f      	movs	r1, #143	; 0x8f
 802e8d8:	f7fd fd28 	bl	802c32c <__assert_func>
 802e8dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802e8e0:	6006      	str	r6, [r0, #0]
 802e8e2:	60c6      	str	r6, [r0, #12]
 802e8e4:	b13c      	cbz	r4, 802e8f6 <_Bfree+0x3a>
 802e8e6:	69eb      	ldr	r3, [r5, #28]
 802e8e8:	6862      	ldr	r2, [r4, #4]
 802e8ea:	68db      	ldr	r3, [r3, #12]
 802e8ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802e8f0:	6021      	str	r1, [r4, #0]
 802e8f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802e8f6:	bd70      	pop	{r4, r5, r6, pc}
 802e8f8:	0803485f 	.word	0x0803485f
 802e8fc:	08034946 	.word	0x08034946

0802e900 <__multadd>:
 802e900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e904:	690d      	ldr	r5, [r1, #16]
 802e906:	4607      	mov	r7, r0
 802e908:	460c      	mov	r4, r1
 802e90a:	461e      	mov	r6, r3
 802e90c:	f101 0c14 	add.w	ip, r1, #20
 802e910:	2000      	movs	r0, #0
 802e912:	f8dc 3000 	ldr.w	r3, [ip]
 802e916:	b299      	uxth	r1, r3
 802e918:	fb02 6101 	mla	r1, r2, r1, r6
 802e91c:	0c1e      	lsrs	r6, r3, #16
 802e91e:	0c0b      	lsrs	r3, r1, #16
 802e920:	fb02 3306 	mla	r3, r2, r6, r3
 802e924:	b289      	uxth	r1, r1
 802e926:	3001      	adds	r0, #1
 802e928:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802e92c:	4285      	cmp	r5, r0
 802e92e:	f84c 1b04 	str.w	r1, [ip], #4
 802e932:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802e936:	dcec      	bgt.n	802e912 <__multadd+0x12>
 802e938:	b30e      	cbz	r6, 802e97e <__multadd+0x7e>
 802e93a:	68a3      	ldr	r3, [r4, #8]
 802e93c:	42ab      	cmp	r3, r5
 802e93e:	dc19      	bgt.n	802e974 <__multadd+0x74>
 802e940:	6861      	ldr	r1, [r4, #4]
 802e942:	4638      	mov	r0, r7
 802e944:	3101      	adds	r1, #1
 802e946:	f7ff ff79 	bl	802e83c <_Balloc>
 802e94a:	4680      	mov	r8, r0
 802e94c:	b928      	cbnz	r0, 802e95a <__multadd+0x5a>
 802e94e:	4602      	mov	r2, r0
 802e950:	4b0c      	ldr	r3, [pc, #48]	; (802e984 <__multadd+0x84>)
 802e952:	480d      	ldr	r0, [pc, #52]	; (802e988 <__multadd+0x88>)
 802e954:	21ba      	movs	r1, #186	; 0xba
 802e956:	f7fd fce9 	bl	802c32c <__assert_func>
 802e95a:	6922      	ldr	r2, [r4, #16]
 802e95c:	3202      	adds	r2, #2
 802e95e:	f104 010c 	add.w	r1, r4, #12
 802e962:	0092      	lsls	r2, r2, #2
 802e964:	300c      	adds	r0, #12
 802e966:	f7ff f886 	bl	802da76 <memcpy>
 802e96a:	4621      	mov	r1, r4
 802e96c:	4638      	mov	r0, r7
 802e96e:	f7ff ffa5 	bl	802e8bc <_Bfree>
 802e972:	4644      	mov	r4, r8
 802e974:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802e978:	3501      	adds	r5, #1
 802e97a:	615e      	str	r6, [r3, #20]
 802e97c:	6125      	str	r5, [r4, #16]
 802e97e:	4620      	mov	r0, r4
 802e980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e984:	08034935 	.word	0x08034935
 802e988:	08034946 	.word	0x08034946

0802e98c <__s2b>:
 802e98c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802e990:	460c      	mov	r4, r1
 802e992:	4615      	mov	r5, r2
 802e994:	461f      	mov	r7, r3
 802e996:	2209      	movs	r2, #9
 802e998:	3308      	adds	r3, #8
 802e99a:	4606      	mov	r6, r0
 802e99c:	fb93 f3f2 	sdiv	r3, r3, r2
 802e9a0:	2100      	movs	r1, #0
 802e9a2:	2201      	movs	r2, #1
 802e9a4:	429a      	cmp	r2, r3
 802e9a6:	db09      	blt.n	802e9bc <__s2b+0x30>
 802e9a8:	4630      	mov	r0, r6
 802e9aa:	f7ff ff47 	bl	802e83c <_Balloc>
 802e9ae:	b940      	cbnz	r0, 802e9c2 <__s2b+0x36>
 802e9b0:	4602      	mov	r2, r0
 802e9b2:	4b19      	ldr	r3, [pc, #100]	; (802ea18 <__s2b+0x8c>)
 802e9b4:	4819      	ldr	r0, [pc, #100]	; (802ea1c <__s2b+0x90>)
 802e9b6:	21d3      	movs	r1, #211	; 0xd3
 802e9b8:	f7fd fcb8 	bl	802c32c <__assert_func>
 802e9bc:	0052      	lsls	r2, r2, #1
 802e9be:	3101      	adds	r1, #1
 802e9c0:	e7f0      	b.n	802e9a4 <__s2b+0x18>
 802e9c2:	9b08      	ldr	r3, [sp, #32]
 802e9c4:	6143      	str	r3, [r0, #20]
 802e9c6:	2d09      	cmp	r5, #9
 802e9c8:	f04f 0301 	mov.w	r3, #1
 802e9cc:	6103      	str	r3, [r0, #16]
 802e9ce:	dd16      	ble.n	802e9fe <__s2b+0x72>
 802e9d0:	f104 0909 	add.w	r9, r4, #9
 802e9d4:	46c8      	mov	r8, r9
 802e9d6:	442c      	add	r4, r5
 802e9d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 802e9dc:	4601      	mov	r1, r0
 802e9de:	3b30      	subs	r3, #48	; 0x30
 802e9e0:	220a      	movs	r2, #10
 802e9e2:	4630      	mov	r0, r6
 802e9e4:	f7ff ff8c 	bl	802e900 <__multadd>
 802e9e8:	45a0      	cmp	r8, r4
 802e9ea:	d1f5      	bne.n	802e9d8 <__s2b+0x4c>
 802e9ec:	f1a5 0408 	sub.w	r4, r5, #8
 802e9f0:	444c      	add	r4, r9
 802e9f2:	1b2d      	subs	r5, r5, r4
 802e9f4:	1963      	adds	r3, r4, r5
 802e9f6:	42bb      	cmp	r3, r7
 802e9f8:	db04      	blt.n	802ea04 <__s2b+0x78>
 802e9fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802e9fe:	340a      	adds	r4, #10
 802ea00:	2509      	movs	r5, #9
 802ea02:	e7f6      	b.n	802e9f2 <__s2b+0x66>
 802ea04:	f814 3b01 	ldrb.w	r3, [r4], #1
 802ea08:	4601      	mov	r1, r0
 802ea0a:	3b30      	subs	r3, #48	; 0x30
 802ea0c:	220a      	movs	r2, #10
 802ea0e:	4630      	mov	r0, r6
 802ea10:	f7ff ff76 	bl	802e900 <__multadd>
 802ea14:	e7ee      	b.n	802e9f4 <__s2b+0x68>
 802ea16:	bf00      	nop
 802ea18:	08034935 	.word	0x08034935
 802ea1c:	08034946 	.word	0x08034946

0802ea20 <__hi0bits>:
 802ea20:	0c03      	lsrs	r3, r0, #16
 802ea22:	041b      	lsls	r3, r3, #16
 802ea24:	b9d3      	cbnz	r3, 802ea5c <__hi0bits+0x3c>
 802ea26:	0400      	lsls	r0, r0, #16
 802ea28:	2310      	movs	r3, #16
 802ea2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802ea2e:	bf04      	itt	eq
 802ea30:	0200      	lsleq	r0, r0, #8
 802ea32:	3308      	addeq	r3, #8
 802ea34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802ea38:	bf04      	itt	eq
 802ea3a:	0100      	lsleq	r0, r0, #4
 802ea3c:	3304      	addeq	r3, #4
 802ea3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802ea42:	bf04      	itt	eq
 802ea44:	0080      	lsleq	r0, r0, #2
 802ea46:	3302      	addeq	r3, #2
 802ea48:	2800      	cmp	r0, #0
 802ea4a:	db05      	blt.n	802ea58 <__hi0bits+0x38>
 802ea4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802ea50:	f103 0301 	add.w	r3, r3, #1
 802ea54:	bf08      	it	eq
 802ea56:	2320      	moveq	r3, #32
 802ea58:	4618      	mov	r0, r3
 802ea5a:	4770      	bx	lr
 802ea5c:	2300      	movs	r3, #0
 802ea5e:	e7e4      	b.n	802ea2a <__hi0bits+0xa>

0802ea60 <__lo0bits>:
 802ea60:	6803      	ldr	r3, [r0, #0]
 802ea62:	f013 0207 	ands.w	r2, r3, #7
 802ea66:	d00c      	beq.n	802ea82 <__lo0bits+0x22>
 802ea68:	07d9      	lsls	r1, r3, #31
 802ea6a:	d422      	bmi.n	802eab2 <__lo0bits+0x52>
 802ea6c:	079a      	lsls	r2, r3, #30
 802ea6e:	bf49      	itett	mi
 802ea70:	085b      	lsrmi	r3, r3, #1
 802ea72:	089b      	lsrpl	r3, r3, #2
 802ea74:	6003      	strmi	r3, [r0, #0]
 802ea76:	2201      	movmi	r2, #1
 802ea78:	bf5c      	itt	pl
 802ea7a:	6003      	strpl	r3, [r0, #0]
 802ea7c:	2202      	movpl	r2, #2
 802ea7e:	4610      	mov	r0, r2
 802ea80:	4770      	bx	lr
 802ea82:	b299      	uxth	r1, r3
 802ea84:	b909      	cbnz	r1, 802ea8a <__lo0bits+0x2a>
 802ea86:	0c1b      	lsrs	r3, r3, #16
 802ea88:	2210      	movs	r2, #16
 802ea8a:	b2d9      	uxtb	r1, r3
 802ea8c:	b909      	cbnz	r1, 802ea92 <__lo0bits+0x32>
 802ea8e:	3208      	adds	r2, #8
 802ea90:	0a1b      	lsrs	r3, r3, #8
 802ea92:	0719      	lsls	r1, r3, #28
 802ea94:	bf04      	itt	eq
 802ea96:	091b      	lsreq	r3, r3, #4
 802ea98:	3204      	addeq	r2, #4
 802ea9a:	0799      	lsls	r1, r3, #30
 802ea9c:	bf04      	itt	eq
 802ea9e:	089b      	lsreq	r3, r3, #2
 802eaa0:	3202      	addeq	r2, #2
 802eaa2:	07d9      	lsls	r1, r3, #31
 802eaa4:	d403      	bmi.n	802eaae <__lo0bits+0x4e>
 802eaa6:	085b      	lsrs	r3, r3, #1
 802eaa8:	f102 0201 	add.w	r2, r2, #1
 802eaac:	d003      	beq.n	802eab6 <__lo0bits+0x56>
 802eaae:	6003      	str	r3, [r0, #0]
 802eab0:	e7e5      	b.n	802ea7e <__lo0bits+0x1e>
 802eab2:	2200      	movs	r2, #0
 802eab4:	e7e3      	b.n	802ea7e <__lo0bits+0x1e>
 802eab6:	2220      	movs	r2, #32
 802eab8:	e7e1      	b.n	802ea7e <__lo0bits+0x1e>
	...

0802eabc <__i2b>:
 802eabc:	b510      	push	{r4, lr}
 802eabe:	460c      	mov	r4, r1
 802eac0:	2101      	movs	r1, #1
 802eac2:	f7ff febb 	bl	802e83c <_Balloc>
 802eac6:	4602      	mov	r2, r0
 802eac8:	b928      	cbnz	r0, 802ead6 <__i2b+0x1a>
 802eaca:	4b05      	ldr	r3, [pc, #20]	; (802eae0 <__i2b+0x24>)
 802eacc:	4805      	ldr	r0, [pc, #20]	; (802eae4 <__i2b+0x28>)
 802eace:	f240 1145 	movw	r1, #325	; 0x145
 802ead2:	f7fd fc2b 	bl	802c32c <__assert_func>
 802ead6:	2301      	movs	r3, #1
 802ead8:	6144      	str	r4, [r0, #20]
 802eada:	6103      	str	r3, [r0, #16]
 802eadc:	bd10      	pop	{r4, pc}
 802eade:	bf00      	nop
 802eae0:	08034935 	.word	0x08034935
 802eae4:	08034946 	.word	0x08034946

0802eae8 <__multiply>:
 802eae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802eaec:	4691      	mov	r9, r2
 802eaee:	690a      	ldr	r2, [r1, #16]
 802eaf0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802eaf4:	429a      	cmp	r2, r3
 802eaf6:	bfb8      	it	lt
 802eaf8:	460b      	movlt	r3, r1
 802eafa:	460c      	mov	r4, r1
 802eafc:	bfbc      	itt	lt
 802eafe:	464c      	movlt	r4, r9
 802eb00:	4699      	movlt	r9, r3
 802eb02:	6927      	ldr	r7, [r4, #16]
 802eb04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 802eb08:	68a3      	ldr	r3, [r4, #8]
 802eb0a:	6861      	ldr	r1, [r4, #4]
 802eb0c:	eb07 060a 	add.w	r6, r7, sl
 802eb10:	42b3      	cmp	r3, r6
 802eb12:	b085      	sub	sp, #20
 802eb14:	bfb8      	it	lt
 802eb16:	3101      	addlt	r1, #1
 802eb18:	f7ff fe90 	bl	802e83c <_Balloc>
 802eb1c:	b930      	cbnz	r0, 802eb2c <__multiply+0x44>
 802eb1e:	4602      	mov	r2, r0
 802eb20:	4b44      	ldr	r3, [pc, #272]	; (802ec34 <__multiply+0x14c>)
 802eb22:	4845      	ldr	r0, [pc, #276]	; (802ec38 <__multiply+0x150>)
 802eb24:	f44f 71b1 	mov.w	r1, #354	; 0x162
 802eb28:	f7fd fc00 	bl	802c32c <__assert_func>
 802eb2c:	f100 0514 	add.w	r5, r0, #20
 802eb30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802eb34:	462b      	mov	r3, r5
 802eb36:	2200      	movs	r2, #0
 802eb38:	4543      	cmp	r3, r8
 802eb3a:	d321      	bcc.n	802eb80 <__multiply+0x98>
 802eb3c:	f104 0314 	add.w	r3, r4, #20
 802eb40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 802eb44:	f109 0314 	add.w	r3, r9, #20
 802eb48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 802eb4c:	9202      	str	r2, [sp, #8]
 802eb4e:	1b3a      	subs	r2, r7, r4
 802eb50:	3a15      	subs	r2, #21
 802eb52:	f022 0203 	bic.w	r2, r2, #3
 802eb56:	3204      	adds	r2, #4
 802eb58:	f104 0115 	add.w	r1, r4, #21
 802eb5c:	428f      	cmp	r7, r1
 802eb5e:	bf38      	it	cc
 802eb60:	2204      	movcc	r2, #4
 802eb62:	9201      	str	r2, [sp, #4]
 802eb64:	9a02      	ldr	r2, [sp, #8]
 802eb66:	9303      	str	r3, [sp, #12]
 802eb68:	429a      	cmp	r2, r3
 802eb6a:	d80c      	bhi.n	802eb86 <__multiply+0x9e>
 802eb6c:	2e00      	cmp	r6, #0
 802eb6e:	dd03      	ble.n	802eb78 <__multiply+0x90>
 802eb70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802eb74:	2b00      	cmp	r3, #0
 802eb76:	d05b      	beq.n	802ec30 <__multiply+0x148>
 802eb78:	6106      	str	r6, [r0, #16]
 802eb7a:	b005      	add	sp, #20
 802eb7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802eb80:	f843 2b04 	str.w	r2, [r3], #4
 802eb84:	e7d8      	b.n	802eb38 <__multiply+0x50>
 802eb86:	f8b3 a000 	ldrh.w	sl, [r3]
 802eb8a:	f1ba 0f00 	cmp.w	sl, #0
 802eb8e:	d024      	beq.n	802ebda <__multiply+0xf2>
 802eb90:	f104 0e14 	add.w	lr, r4, #20
 802eb94:	46a9      	mov	r9, r5
 802eb96:	f04f 0c00 	mov.w	ip, #0
 802eb9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 802eb9e:	f8d9 1000 	ldr.w	r1, [r9]
 802eba2:	fa1f fb82 	uxth.w	fp, r2
 802eba6:	b289      	uxth	r1, r1
 802eba8:	fb0a 110b 	mla	r1, sl, fp, r1
 802ebac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 802ebb0:	f8d9 2000 	ldr.w	r2, [r9]
 802ebb4:	4461      	add	r1, ip
 802ebb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802ebba:	fb0a c20b 	mla	r2, sl, fp, ip
 802ebbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802ebc2:	b289      	uxth	r1, r1
 802ebc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802ebc8:	4577      	cmp	r7, lr
 802ebca:	f849 1b04 	str.w	r1, [r9], #4
 802ebce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802ebd2:	d8e2      	bhi.n	802eb9a <__multiply+0xb2>
 802ebd4:	9a01      	ldr	r2, [sp, #4]
 802ebd6:	f845 c002 	str.w	ip, [r5, r2]
 802ebda:	9a03      	ldr	r2, [sp, #12]
 802ebdc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802ebe0:	3304      	adds	r3, #4
 802ebe2:	f1b9 0f00 	cmp.w	r9, #0
 802ebe6:	d021      	beq.n	802ec2c <__multiply+0x144>
 802ebe8:	6829      	ldr	r1, [r5, #0]
 802ebea:	f104 0c14 	add.w	ip, r4, #20
 802ebee:	46ae      	mov	lr, r5
 802ebf0:	f04f 0a00 	mov.w	sl, #0
 802ebf4:	f8bc b000 	ldrh.w	fp, [ip]
 802ebf8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802ebfc:	fb09 220b 	mla	r2, r9, fp, r2
 802ec00:	4452      	add	r2, sl
 802ec02:	b289      	uxth	r1, r1
 802ec04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802ec08:	f84e 1b04 	str.w	r1, [lr], #4
 802ec0c:	f85c 1b04 	ldr.w	r1, [ip], #4
 802ec10:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802ec14:	f8be 1000 	ldrh.w	r1, [lr]
 802ec18:	fb09 110a 	mla	r1, r9, sl, r1
 802ec1c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 802ec20:	4567      	cmp	r7, ip
 802ec22:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802ec26:	d8e5      	bhi.n	802ebf4 <__multiply+0x10c>
 802ec28:	9a01      	ldr	r2, [sp, #4]
 802ec2a:	50a9      	str	r1, [r5, r2]
 802ec2c:	3504      	adds	r5, #4
 802ec2e:	e799      	b.n	802eb64 <__multiply+0x7c>
 802ec30:	3e01      	subs	r6, #1
 802ec32:	e79b      	b.n	802eb6c <__multiply+0x84>
 802ec34:	08034935 	.word	0x08034935
 802ec38:	08034946 	.word	0x08034946

0802ec3c <__pow5mult>:
 802ec3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ec40:	4615      	mov	r5, r2
 802ec42:	f012 0203 	ands.w	r2, r2, #3
 802ec46:	4606      	mov	r6, r0
 802ec48:	460f      	mov	r7, r1
 802ec4a:	d007      	beq.n	802ec5c <__pow5mult+0x20>
 802ec4c:	4c25      	ldr	r4, [pc, #148]	; (802ece4 <__pow5mult+0xa8>)
 802ec4e:	3a01      	subs	r2, #1
 802ec50:	2300      	movs	r3, #0
 802ec52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802ec56:	f7ff fe53 	bl	802e900 <__multadd>
 802ec5a:	4607      	mov	r7, r0
 802ec5c:	10ad      	asrs	r5, r5, #2
 802ec5e:	d03d      	beq.n	802ecdc <__pow5mult+0xa0>
 802ec60:	69f4      	ldr	r4, [r6, #28]
 802ec62:	b97c      	cbnz	r4, 802ec84 <__pow5mult+0x48>
 802ec64:	2010      	movs	r0, #16
 802ec66:	f7fd fb95 	bl	802c394 <malloc>
 802ec6a:	4602      	mov	r2, r0
 802ec6c:	61f0      	str	r0, [r6, #28]
 802ec6e:	b928      	cbnz	r0, 802ec7c <__pow5mult+0x40>
 802ec70:	4b1d      	ldr	r3, [pc, #116]	; (802ece8 <__pow5mult+0xac>)
 802ec72:	481e      	ldr	r0, [pc, #120]	; (802ecec <__pow5mult+0xb0>)
 802ec74:	f240 11b3 	movw	r1, #435	; 0x1b3
 802ec78:	f7fd fb58 	bl	802c32c <__assert_func>
 802ec7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802ec80:	6004      	str	r4, [r0, #0]
 802ec82:	60c4      	str	r4, [r0, #12]
 802ec84:	f8d6 801c 	ldr.w	r8, [r6, #28]
 802ec88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802ec8c:	b94c      	cbnz	r4, 802eca2 <__pow5mult+0x66>
 802ec8e:	f240 2171 	movw	r1, #625	; 0x271
 802ec92:	4630      	mov	r0, r6
 802ec94:	f7ff ff12 	bl	802eabc <__i2b>
 802ec98:	2300      	movs	r3, #0
 802ec9a:	f8c8 0008 	str.w	r0, [r8, #8]
 802ec9e:	4604      	mov	r4, r0
 802eca0:	6003      	str	r3, [r0, #0]
 802eca2:	f04f 0900 	mov.w	r9, #0
 802eca6:	07eb      	lsls	r3, r5, #31
 802eca8:	d50a      	bpl.n	802ecc0 <__pow5mult+0x84>
 802ecaa:	4639      	mov	r1, r7
 802ecac:	4622      	mov	r2, r4
 802ecae:	4630      	mov	r0, r6
 802ecb0:	f7ff ff1a 	bl	802eae8 <__multiply>
 802ecb4:	4639      	mov	r1, r7
 802ecb6:	4680      	mov	r8, r0
 802ecb8:	4630      	mov	r0, r6
 802ecba:	f7ff fdff 	bl	802e8bc <_Bfree>
 802ecbe:	4647      	mov	r7, r8
 802ecc0:	106d      	asrs	r5, r5, #1
 802ecc2:	d00b      	beq.n	802ecdc <__pow5mult+0xa0>
 802ecc4:	6820      	ldr	r0, [r4, #0]
 802ecc6:	b938      	cbnz	r0, 802ecd8 <__pow5mult+0x9c>
 802ecc8:	4622      	mov	r2, r4
 802ecca:	4621      	mov	r1, r4
 802eccc:	4630      	mov	r0, r6
 802ecce:	f7ff ff0b 	bl	802eae8 <__multiply>
 802ecd2:	6020      	str	r0, [r4, #0]
 802ecd4:	f8c0 9000 	str.w	r9, [r0]
 802ecd8:	4604      	mov	r4, r0
 802ecda:	e7e4      	b.n	802eca6 <__pow5mult+0x6a>
 802ecdc:	4638      	mov	r0, r7
 802ecde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ece2:	bf00      	nop
 802ece4:	08034a90 	.word	0x08034a90
 802ece8:	0803485f 	.word	0x0803485f
 802ecec:	08034946 	.word	0x08034946

0802ecf0 <__lshift>:
 802ecf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ecf4:	460c      	mov	r4, r1
 802ecf6:	6849      	ldr	r1, [r1, #4]
 802ecf8:	6923      	ldr	r3, [r4, #16]
 802ecfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802ecfe:	68a3      	ldr	r3, [r4, #8]
 802ed00:	4607      	mov	r7, r0
 802ed02:	4691      	mov	r9, r2
 802ed04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802ed08:	f108 0601 	add.w	r6, r8, #1
 802ed0c:	42b3      	cmp	r3, r6
 802ed0e:	db0b      	blt.n	802ed28 <__lshift+0x38>
 802ed10:	4638      	mov	r0, r7
 802ed12:	f7ff fd93 	bl	802e83c <_Balloc>
 802ed16:	4605      	mov	r5, r0
 802ed18:	b948      	cbnz	r0, 802ed2e <__lshift+0x3e>
 802ed1a:	4602      	mov	r2, r0
 802ed1c:	4b28      	ldr	r3, [pc, #160]	; (802edc0 <__lshift+0xd0>)
 802ed1e:	4829      	ldr	r0, [pc, #164]	; (802edc4 <__lshift+0xd4>)
 802ed20:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 802ed24:	f7fd fb02 	bl	802c32c <__assert_func>
 802ed28:	3101      	adds	r1, #1
 802ed2a:	005b      	lsls	r3, r3, #1
 802ed2c:	e7ee      	b.n	802ed0c <__lshift+0x1c>
 802ed2e:	2300      	movs	r3, #0
 802ed30:	f100 0114 	add.w	r1, r0, #20
 802ed34:	f100 0210 	add.w	r2, r0, #16
 802ed38:	4618      	mov	r0, r3
 802ed3a:	4553      	cmp	r3, sl
 802ed3c:	db33      	blt.n	802eda6 <__lshift+0xb6>
 802ed3e:	6920      	ldr	r0, [r4, #16]
 802ed40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802ed44:	f104 0314 	add.w	r3, r4, #20
 802ed48:	f019 091f 	ands.w	r9, r9, #31
 802ed4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802ed50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802ed54:	d02b      	beq.n	802edae <__lshift+0xbe>
 802ed56:	f1c9 0e20 	rsb	lr, r9, #32
 802ed5a:	468a      	mov	sl, r1
 802ed5c:	2200      	movs	r2, #0
 802ed5e:	6818      	ldr	r0, [r3, #0]
 802ed60:	fa00 f009 	lsl.w	r0, r0, r9
 802ed64:	4310      	orrs	r0, r2
 802ed66:	f84a 0b04 	str.w	r0, [sl], #4
 802ed6a:	f853 2b04 	ldr.w	r2, [r3], #4
 802ed6e:	459c      	cmp	ip, r3
 802ed70:	fa22 f20e 	lsr.w	r2, r2, lr
 802ed74:	d8f3      	bhi.n	802ed5e <__lshift+0x6e>
 802ed76:	ebac 0304 	sub.w	r3, ip, r4
 802ed7a:	3b15      	subs	r3, #21
 802ed7c:	f023 0303 	bic.w	r3, r3, #3
 802ed80:	3304      	adds	r3, #4
 802ed82:	f104 0015 	add.w	r0, r4, #21
 802ed86:	4584      	cmp	ip, r0
 802ed88:	bf38      	it	cc
 802ed8a:	2304      	movcc	r3, #4
 802ed8c:	50ca      	str	r2, [r1, r3]
 802ed8e:	b10a      	cbz	r2, 802ed94 <__lshift+0xa4>
 802ed90:	f108 0602 	add.w	r6, r8, #2
 802ed94:	3e01      	subs	r6, #1
 802ed96:	4638      	mov	r0, r7
 802ed98:	612e      	str	r6, [r5, #16]
 802ed9a:	4621      	mov	r1, r4
 802ed9c:	f7ff fd8e 	bl	802e8bc <_Bfree>
 802eda0:	4628      	mov	r0, r5
 802eda2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802eda6:	f842 0f04 	str.w	r0, [r2, #4]!
 802edaa:	3301      	adds	r3, #1
 802edac:	e7c5      	b.n	802ed3a <__lshift+0x4a>
 802edae:	3904      	subs	r1, #4
 802edb0:	f853 2b04 	ldr.w	r2, [r3], #4
 802edb4:	f841 2f04 	str.w	r2, [r1, #4]!
 802edb8:	459c      	cmp	ip, r3
 802edba:	d8f9      	bhi.n	802edb0 <__lshift+0xc0>
 802edbc:	e7ea      	b.n	802ed94 <__lshift+0xa4>
 802edbe:	bf00      	nop
 802edc0:	08034935 	.word	0x08034935
 802edc4:	08034946 	.word	0x08034946

0802edc8 <__mcmp>:
 802edc8:	b530      	push	{r4, r5, lr}
 802edca:	6902      	ldr	r2, [r0, #16]
 802edcc:	690c      	ldr	r4, [r1, #16]
 802edce:	1b12      	subs	r2, r2, r4
 802edd0:	d10e      	bne.n	802edf0 <__mcmp+0x28>
 802edd2:	f100 0314 	add.w	r3, r0, #20
 802edd6:	3114      	adds	r1, #20
 802edd8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802eddc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802ede0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802ede4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802ede8:	42a5      	cmp	r5, r4
 802edea:	d003      	beq.n	802edf4 <__mcmp+0x2c>
 802edec:	d305      	bcc.n	802edfa <__mcmp+0x32>
 802edee:	2201      	movs	r2, #1
 802edf0:	4610      	mov	r0, r2
 802edf2:	bd30      	pop	{r4, r5, pc}
 802edf4:	4283      	cmp	r3, r0
 802edf6:	d3f3      	bcc.n	802ede0 <__mcmp+0x18>
 802edf8:	e7fa      	b.n	802edf0 <__mcmp+0x28>
 802edfa:	f04f 32ff 	mov.w	r2, #4294967295
 802edfe:	e7f7      	b.n	802edf0 <__mcmp+0x28>

0802ee00 <__mdiff>:
 802ee00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ee04:	460c      	mov	r4, r1
 802ee06:	4606      	mov	r6, r0
 802ee08:	4611      	mov	r1, r2
 802ee0a:	4620      	mov	r0, r4
 802ee0c:	4690      	mov	r8, r2
 802ee0e:	f7ff ffdb 	bl	802edc8 <__mcmp>
 802ee12:	1e05      	subs	r5, r0, #0
 802ee14:	d110      	bne.n	802ee38 <__mdiff+0x38>
 802ee16:	4629      	mov	r1, r5
 802ee18:	4630      	mov	r0, r6
 802ee1a:	f7ff fd0f 	bl	802e83c <_Balloc>
 802ee1e:	b930      	cbnz	r0, 802ee2e <__mdiff+0x2e>
 802ee20:	4b3a      	ldr	r3, [pc, #232]	; (802ef0c <__mdiff+0x10c>)
 802ee22:	4602      	mov	r2, r0
 802ee24:	f240 2137 	movw	r1, #567	; 0x237
 802ee28:	4839      	ldr	r0, [pc, #228]	; (802ef10 <__mdiff+0x110>)
 802ee2a:	f7fd fa7f 	bl	802c32c <__assert_func>
 802ee2e:	2301      	movs	r3, #1
 802ee30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802ee34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ee38:	bfa4      	itt	ge
 802ee3a:	4643      	movge	r3, r8
 802ee3c:	46a0      	movge	r8, r4
 802ee3e:	4630      	mov	r0, r6
 802ee40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802ee44:	bfa6      	itte	ge
 802ee46:	461c      	movge	r4, r3
 802ee48:	2500      	movge	r5, #0
 802ee4a:	2501      	movlt	r5, #1
 802ee4c:	f7ff fcf6 	bl	802e83c <_Balloc>
 802ee50:	b920      	cbnz	r0, 802ee5c <__mdiff+0x5c>
 802ee52:	4b2e      	ldr	r3, [pc, #184]	; (802ef0c <__mdiff+0x10c>)
 802ee54:	4602      	mov	r2, r0
 802ee56:	f240 2145 	movw	r1, #581	; 0x245
 802ee5a:	e7e5      	b.n	802ee28 <__mdiff+0x28>
 802ee5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802ee60:	6926      	ldr	r6, [r4, #16]
 802ee62:	60c5      	str	r5, [r0, #12]
 802ee64:	f104 0914 	add.w	r9, r4, #20
 802ee68:	f108 0514 	add.w	r5, r8, #20
 802ee6c:	f100 0e14 	add.w	lr, r0, #20
 802ee70:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 802ee74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 802ee78:	f108 0210 	add.w	r2, r8, #16
 802ee7c:	46f2      	mov	sl, lr
 802ee7e:	2100      	movs	r1, #0
 802ee80:	f859 3b04 	ldr.w	r3, [r9], #4
 802ee84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802ee88:	fa11 f88b 	uxtah	r8, r1, fp
 802ee8c:	b299      	uxth	r1, r3
 802ee8e:	0c1b      	lsrs	r3, r3, #16
 802ee90:	eba8 0801 	sub.w	r8, r8, r1
 802ee94:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802ee98:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802ee9c:	fa1f f888 	uxth.w	r8, r8
 802eea0:	1419      	asrs	r1, r3, #16
 802eea2:	454e      	cmp	r6, r9
 802eea4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802eea8:	f84a 3b04 	str.w	r3, [sl], #4
 802eeac:	d8e8      	bhi.n	802ee80 <__mdiff+0x80>
 802eeae:	1b33      	subs	r3, r6, r4
 802eeb0:	3b15      	subs	r3, #21
 802eeb2:	f023 0303 	bic.w	r3, r3, #3
 802eeb6:	3304      	adds	r3, #4
 802eeb8:	3415      	adds	r4, #21
 802eeba:	42a6      	cmp	r6, r4
 802eebc:	bf38      	it	cc
 802eebe:	2304      	movcc	r3, #4
 802eec0:	441d      	add	r5, r3
 802eec2:	4473      	add	r3, lr
 802eec4:	469e      	mov	lr, r3
 802eec6:	462e      	mov	r6, r5
 802eec8:	4566      	cmp	r6, ip
 802eeca:	d30e      	bcc.n	802eeea <__mdiff+0xea>
 802eecc:	f10c 0203 	add.w	r2, ip, #3
 802eed0:	1b52      	subs	r2, r2, r5
 802eed2:	f022 0203 	bic.w	r2, r2, #3
 802eed6:	3d03      	subs	r5, #3
 802eed8:	45ac      	cmp	ip, r5
 802eeda:	bf38      	it	cc
 802eedc:	2200      	movcc	r2, #0
 802eede:	4413      	add	r3, r2
 802eee0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802eee4:	b17a      	cbz	r2, 802ef06 <__mdiff+0x106>
 802eee6:	6107      	str	r7, [r0, #16]
 802eee8:	e7a4      	b.n	802ee34 <__mdiff+0x34>
 802eeea:	f856 8b04 	ldr.w	r8, [r6], #4
 802eeee:	fa11 f288 	uxtah	r2, r1, r8
 802eef2:	1414      	asrs	r4, r2, #16
 802eef4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802eef8:	b292      	uxth	r2, r2
 802eefa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802eefe:	f84e 2b04 	str.w	r2, [lr], #4
 802ef02:	1421      	asrs	r1, r4, #16
 802ef04:	e7e0      	b.n	802eec8 <__mdiff+0xc8>
 802ef06:	3f01      	subs	r7, #1
 802ef08:	e7ea      	b.n	802eee0 <__mdiff+0xe0>
 802ef0a:	bf00      	nop
 802ef0c:	08034935 	.word	0x08034935
 802ef10:	08034946 	.word	0x08034946

0802ef14 <__ulp>:
 802ef14:	b082      	sub	sp, #8
 802ef16:	ed8d 0b00 	vstr	d0, [sp]
 802ef1a:	9a01      	ldr	r2, [sp, #4]
 802ef1c:	4b0f      	ldr	r3, [pc, #60]	; (802ef5c <__ulp+0x48>)
 802ef1e:	4013      	ands	r3, r2
 802ef20:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 802ef24:	2b00      	cmp	r3, #0
 802ef26:	dc08      	bgt.n	802ef3a <__ulp+0x26>
 802ef28:	425b      	negs	r3, r3
 802ef2a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 802ef2e:	ea4f 5223 	mov.w	r2, r3, asr #20
 802ef32:	da04      	bge.n	802ef3e <__ulp+0x2a>
 802ef34:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 802ef38:	4113      	asrs	r3, r2
 802ef3a:	2200      	movs	r2, #0
 802ef3c:	e008      	b.n	802ef50 <__ulp+0x3c>
 802ef3e:	f1a2 0314 	sub.w	r3, r2, #20
 802ef42:	2b1e      	cmp	r3, #30
 802ef44:	bfda      	itte	le
 802ef46:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 802ef4a:	40da      	lsrle	r2, r3
 802ef4c:	2201      	movgt	r2, #1
 802ef4e:	2300      	movs	r3, #0
 802ef50:	4619      	mov	r1, r3
 802ef52:	4610      	mov	r0, r2
 802ef54:	ec41 0b10 	vmov	d0, r0, r1
 802ef58:	b002      	add	sp, #8
 802ef5a:	4770      	bx	lr
 802ef5c:	7ff00000 	.word	0x7ff00000

0802ef60 <__b2d>:
 802ef60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ef64:	6906      	ldr	r6, [r0, #16]
 802ef66:	f100 0814 	add.w	r8, r0, #20
 802ef6a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 802ef6e:	1f37      	subs	r7, r6, #4
 802ef70:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802ef74:	4610      	mov	r0, r2
 802ef76:	f7ff fd53 	bl	802ea20 <__hi0bits>
 802ef7a:	f1c0 0320 	rsb	r3, r0, #32
 802ef7e:	280a      	cmp	r0, #10
 802ef80:	600b      	str	r3, [r1, #0]
 802ef82:	491b      	ldr	r1, [pc, #108]	; (802eff0 <__b2d+0x90>)
 802ef84:	dc15      	bgt.n	802efb2 <__b2d+0x52>
 802ef86:	f1c0 0c0b 	rsb	ip, r0, #11
 802ef8a:	fa22 f30c 	lsr.w	r3, r2, ip
 802ef8e:	45b8      	cmp	r8, r7
 802ef90:	ea43 0501 	orr.w	r5, r3, r1
 802ef94:	bf34      	ite	cc
 802ef96:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802ef9a:	2300      	movcs	r3, #0
 802ef9c:	3015      	adds	r0, #21
 802ef9e:	fa02 f000 	lsl.w	r0, r2, r0
 802efa2:	fa23 f30c 	lsr.w	r3, r3, ip
 802efa6:	4303      	orrs	r3, r0
 802efa8:	461c      	mov	r4, r3
 802efaa:	ec45 4b10 	vmov	d0, r4, r5
 802efae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802efb2:	45b8      	cmp	r8, r7
 802efb4:	bf3a      	itte	cc
 802efb6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802efba:	f1a6 0708 	subcc.w	r7, r6, #8
 802efbe:	2300      	movcs	r3, #0
 802efc0:	380b      	subs	r0, #11
 802efc2:	d012      	beq.n	802efea <__b2d+0x8a>
 802efc4:	f1c0 0120 	rsb	r1, r0, #32
 802efc8:	fa23 f401 	lsr.w	r4, r3, r1
 802efcc:	4082      	lsls	r2, r0
 802efce:	4322      	orrs	r2, r4
 802efd0:	4547      	cmp	r7, r8
 802efd2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 802efd6:	bf8c      	ite	hi
 802efd8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 802efdc:	2200      	movls	r2, #0
 802efde:	4083      	lsls	r3, r0
 802efe0:	40ca      	lsrs	r2, r1
 802efe2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 802efe6:	4313      	orrs	r3, r2
 802efe8:	e7de      	b.n	802efa8 <__b2d+0x48>
 802efea:	ea42 0501 	orr.w	r5, r2, r1
 802efee:	e7db      	b.n	802efa8 <__b2d+0x48>
 802eff0:	3ff00000 	.word	0x3ff00000

0802eff4 <__d2b>:
 802eff4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802eff8:	460f      	mov	r7, r1
 802effa:	2101      	movs	r1, #1
 802effc:	ec59 8b10 	vmov	r8, r9, d0
 802f000:	4616      	mov	r6, r2
 802f002:	f7ff fc1b 	bl	802e83c <_Balloc>
 802f006:	4604      	mov	r4, r0
 802f008:	b930      	cbnz	r0, 802f018 <__d2b+0x24>
 802f00a:	4602      	mov	r2, r0
 802f00c:	4b24      	ldr	r3, [pc, #144]	; (802f0a0 <__d2b+0xac>)
 802f00e:	4825      	ldr	r0, [pc, #148]	; (802f0a4 <__d2b+0xb0>)
 802f010:	f240 310f 	movw	r1, #783	; 0x30f
 802f014:	f7fd f98a 	bl	802c32c <__assert_func>
 802f018:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802f01c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802f020:	bb2d      	cbnz	r5, 802f06e <__d2b+0x7a>
 802f022:	9301      	str	r3, [sp, #4]
 802f024:	f1b8 0300 	subs.w	r3, r8, #0
 802f028:	d026      	beq.n	802f078 <__d2b+0x84>
 802f02a:	4668      	mov	r0, sp
 802f02c:	9300      	str	r3, [sp, #0]
 802f02e:	f7ff fd17 	bl	802ea60 <__lo0bits>
 802f032:	e9dd 1200 	ldrd	r1, r2, [sp]
 802f036:	b1e8      	cbz	r0, 802f074 <__d2b+0x80>
 802f038:	f1c0 0320 	rsb	r3, r0, #32
 802f03c:	fa02 f303 	lsl.w	r3, r2, r3
 802f040:	430b      	orrs	r3, r1
 802f042:	40c2      	lsrs	r2, r0
 802f044:	6163      	str	r3, [r4, #20]
 802f046:	9201      	str	r2, [sp, #4]
 802f048:	9b01      	ldr	r3, [sp, #4]
 802f04a:	61a3      	str	r3, [r4, #24]
 802f04c:	2b00      	cmp	r3, #0
 802f04e:	bf14      	ite	ne
 802f050:	2202      	movne	r2, #2
 802f052:	2201      	moveq	r2, #1
 802f054:	6122      	str	r2, [r4, #16]
 802f056:	b1bd      	cbz	r5, 802f088 <__d2b+0x94>
 802f058:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802f05c:	4405      	add	r5, r0
 802f05e:	603d      	str	r5, [r7, #0]
 802f060:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802f064:	6030      	str	r0, [r6, #0]
 802f066:	4620      	mov	r0, r4
 802f068:	b003      	add	sp, #12
 802f06a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802f06e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802f072:	e7d6      	b.n	802f022 <__d2b+0x2e>
 802f074:	6161      	str	r1, [r4, #20]
 802f076:	e7e7      	b.n	802f048 <__d2b+0x54>
 802f078:	a801      	add	r0, sp, #4
 802f07a:	f7ff fcf1 	bl	802ea60 <__lo0bits>
 802f07e:	9b01      	ldr	r3, [sp, #4]
 802f080:	6163      	str	r3, [r4, #20]
 802f082:	3020      	adds	r0, #32
 802f084:	2201      	movs	r2, #1
 802f086:	e7e5      	b.n	802f054 <__d2b+0x60>
 802f088:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802f08c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802f090:	6038      	str	r0, [r7, #0]
 802f092:	6918      	ldr	r0, [r3, #16]
 802f094:	f7ff fcc4 	bl	802ea20 <__hi0bits>
 802f098:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802f09c:	e7e2      	b.n	802f064 <__d2b+0x70>
 802f09e:	bf00      	nop
 802f0a0:	08034935 	.word	0x08034935
 802f0a4:	08034946 	.word	0x08034946

0802f0a8 <__ratio>:
 802f0a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f0ac:	4688      	mov	r8, r1
 802f0ae:	4669      	mov	r1, sp
 802f0b0:	4681      	mov	r9, r0
 802f0b2:	f7ff ff55 	bl	802ef60 <__b2d>
 802f0b6:	a901      	add	r1, sp, #4
 802f0b8:	4640      	mov	r0, r8
 802f0ba:	ec55 4b10 	vmov	r4, r5, d0
 802f0be:	f7ff ff4f 	bl	802ef60 <__b2d>
 802f0c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802f0c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 802f0ca:	eba3 0c02 	sub.w	ip, r3, r2
 802f0ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 802f0d2:	1a9b      	subs	r3, r3, r2
 802f0d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 802f0d8:	ec51 0b10 	vmov	r0, r1, d0
 802f0dc:	2b00      	cmp	r3, #0
 802f0de:	bfd6      	itet	le
 802f0e0:	460a      	movle	r2, r1
 802f0e2:	462a      	movgt	r2, r5
 802f0e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802f0e8:	468b      	mov	fp, r1
 802f0ea:	462f      	mov	r7, r5
 802f0ec:	bfd4      	ite	le
 802f0ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 802f0f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802f0f6:	4620      	mov	r0, r4
 802f0f8:	ee10 2a10 	vmov	r2, s0
 802f0fc:	465b      	mov	r3, fp
 802f0fe:	4639      	mov	r1, r7
 802f100:	f7e1 fbbc 	bl	801087c <__aeabi_ddiv>
 802f104:	ec41 0b10 	vmov	d0, r0, r1
 802f108:	b003      	add	sp, #12
 802f10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802f10e <__copybits>:
 802f10e:	3901      	subs	r1, #1
 802f110:	b570      	push	{r4, r5, r6, lr}
 802f112:	1149      	asrs	r1, r1, #5
 802f114:	6914      	ldr	r4, [r2, #16]
 802f116:	3101      	adds	r1, #1
 802f118:	f102 0314 	add.w	r3, r2, #20
 802f11c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802f120:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802f124:	1f05      	subs	r5, r0, #4
 802f126:	42a3      	cmp	r3, r4
 802f128:	d30c      	bcc.n	802f144 <__copybits+0x36>
 802f12a:	1aa3      	subs	r3, r4, r2
 802f12c:	3b11      	subs	r3, #17
 802f12e:	f023 0303 	bic.w	r3, r3, #3
 802f132:	3211      	adds	r2, #17
 802f134:	42a2      	cmp	r2, r4
 802f136:	bf88      	it	hi
 802f138:	2300      	movhi	r3, #0
 802f13a:	4418      	add	r0, r3
 802f13c:	2300      	movs	r3, #0
 802f13e:	4288      	cmp	r0, r1
 802f140:	d305      	bcc.n	802f14e <__copybits+0x40>
 802f142:	bd70      	pop	{r4, r5, r6, pc}
 802f144:	f853 6b04 	ldr.w	r6, [r3], #4
 802f148:	f845 6f04 	str.w	r6, [r5, #4]!
 802f14c:	e7eb      	b.n	802f126 <__copybits+0x18>
 802f14e:	f840 3b04 	str.w	r3, [r0], #4
 802f152:	e7f4      	b.n	802f13e <__copybits+0x30>

0802f154 <__any_on>:
 802f154:	f100 0214 	add.w	r2, r0, #20
 802f158:	6900      	ldr	r0, [r0, #16]
 802f15a:	114b      	asrs	r3, r1, #5
 802f15c:	4298      	cmp	r0, r3
 802f15e:	b510      	push	{r4, lr}
 802f160:	db11      	blt.n	802f186 <__any_on+0x32>
 802f162:	dd0a      	ble.n	802f17a <__any_on+0x26>
 802f164:	f011 011f 	ands.w	r1, r1, #31
 802f168:	d007      	beq.n	802f17a <__any_on+0x26>
 802f16a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802f16e:	fa24 f001 	lsr.w	r0, r4, r1
 802f172:	fa00 f101 	lsl.w	r1, r0, r1
 802f176:	428c      	cmp	r4, r1
 802f178:	d10b      	bne.n	802f192 <__any_on+0x3e>
 802f17a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802f17e:	4293      	cmp	r3, r2
 802f180:	d803      	bhi.n	802f18a <__any_on+0x36>
 802f182:	2000      	movs	r0, #0
 802f184:	bd10      	pop	{r4, pc}
 802f186:	4603      	mov	r3, r0
 802f188:	e7f7      	b.n	802f17a <__any_on+0x26>
 802f18a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802f18e:	2900      	cmp	r1, #0
 802f190:	d0f5      	beq.n	802f17e <__any_on+0x2a>
 802f192:	2001      	movs	r0, #1
 802f194:	e7f6      	b.n	802f184 <__any_on+0x30>

0802f196 <sulp>:
 802f196:	b570      	push	{r4, r5, r6, lr}
 802f198:	4604      	mov	r4, r0
 802f19a:	460d      	mov	r5, r1
 802f19c:	ec45 4b10 	vmov	d0, r4, r5
 802f1a0:	4616      	mov	r6, r2
 802f1a2:	f7ff feb7 	bl	802ef14 <__ulp>
 802f1a6:	ec51 0b10 	vmov	r0, r1, d0
 802f1aa:	b17e      	cbz	r6, 802f1cc <sulp+0x36>
 802f1ac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 802f1b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802f1b4:	2b00      	cmp	r3, #0
 802f1b6:	dd09      	ble.n	802f1cc <sulp+0x36>
 802f1b8:	051b      	lsls	r3, r3, #20
 802f1ba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 802f1be:	2400      	movs	r4, #0
 802f1c0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 802f1c4:	4622      	mov	r2, r4
 802f1c6:	462b      	mov	r3, r5
 802f1c8:	f7e1 fa2e 	bl	8010628 <__aeabi_dmul>
 802f1cc:	bd70      	pop	{r4, r5, r6, pc}
	...

0802f1d0 <_strtod_l>:
 802f1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f1d4:	ed2d 8b02 	vpush	{d8}
 802f1d8:	b09b      	sub	sp, #108	; 0x6c
 802f1da:	4604      	mov	r4, r0
 802f1dc:	9213      	str	r2, [sp, #76]	; 0x4c
 802f1de:	2200      	movs	r2, #0
 802f1e0:	9216      	str	r2, [sp, #88]	; 0x58
 802f1e2:	460d      	mov	r5, r1
 802f1e4:	f04f 0800 	mov.w	r8, #0
 802f1e8:	f04f 0900 	mov.w	r9, #0
 802f1ec:	460a      	mov	r2, r1
 802f1ee:	9215      	str	r2, [sp, #84]	; 0x54
 802f1f0:	7811      	ldrb	r1, [r2, #0]
 802f1f2:	292b      	cmp	r1, #43	; 0x2b
 802f1f4:	d04c      	beq.n	802f290 <_strtod_l+0xc0>
 802f1f6:	d83a      	bhi.n	802f26e <_strtod_l+0x9e>
 802f1f8:	290d      	cmp	r1, #13
 802f1fa:	d834      	bhi.n	802f266 <_strtod_l+0x96>
 802f1fc:	2908      	cmp	r1, #8
 802f1fe:	d834      	bhi.n	802f26a <_strtod_l+0x9a>
 802f200:	2900      	cmp	r1, #0
 802f202:	d03d      	beq.n	802f280 <_strtod_l+0xb0>
 802f204:	2200      	movs	r2, #0
 802f206:	920a      	str	r2, [sp, #40]	; 0x28
 802f208:	9e15      	ldr	r6, [sp, #84]	; 0x54
 802f20a:	7832      	ldrb	r2, [r6, #0]
 802f20c:	2a30      	cmp	r2, #48	; 0x30
 802f20e:	f040 80b4 	bne.w	802f37a <_strtod_l+0x1aa>
 802f212:	7872      	ldrb	r2, [r6, #1]
 802f214:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 802f218:	2a58      	cmp	r2, #88	; 0x58
 802f21a:	d170      	bne.n	802f2fe <_strtod_l+0x12e>
 802f21c:	9302      	str	r3, [sp, #8]
 802f21e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802f220:	9301      	str	r3, [sp, #4]
 802f222:	ab16      	add	r3, sp, #88	; 0x58
 802f224:	9300      	str	r3, [sp, #0]
 802f226:	4a8e      	ldr	r2, [pc, #568]	; (802f460 <_strtod_l+0x290>)
 802f228:	ab17      	add	r3, sp, #92	; 0x5c
 802f22a:	a915      	add	r1, sp, #84	; 0x54
 802f22c:	4620      	mov	r0, r4
 802f22e:	f001 fe5f 	bl	8030ef0 <__gethex>
 802f232:	f010 070f 	ands.w	r7, r0, #15
 802f236:	4605      	mov	r5, r0
 802f238:	d005      	beq.n	802f246 <_strtod_l+0x76>
 802f23a:	2f06      	cmp	r7, #6
 802f23c:	d12a      	bne.n	802f294 <_strtod_l+0xc4>
 802f23e:	3601      	adds	r6, #1
 802f240:	2300      	movs	r3, #0
 802f242:	9615      	str	r6, [sp, #84]	; 0x54
 802f244:	930a      	str	r3, [sp, #40]	; 0x28
 802f246:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802f248:	2b00      	cmp	r3, #0
 802f24a:	f040 857f 	bne.w	802fd4c <_strtod_l+0xb7c>
 802f24e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802f250:	b1db      	cbz	r3, 802f28a <_strtod_l+0xba>
 802f252:	4642      	mov	r2, r8
 802f254:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 802f258:	ec43 2b10 	vmov	d0, r2, r3
 802f25c:	b01b      	add	sp, #108	; 0x6c
 802f25e:	ecbd 8b02 	vpop	{d8}
 802f262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f266:	2920      	cmp	r1, #32
 802f268:	d1cc      	bne.n	802f204 <_strtod_l+0x34>
 802f26a:	3201      	adds	r2, #1
 802f26c:	e7bf      	b.n	802f1ee <_strtod_l+0x1e>
 802f26e:	292d      	cmp	r1, #45	; 0x2d
 802f270:	d1c8      	bne.n	802f204 <_strtod_l+0x34>
 802f272:	2101      	movs	r1, #1
 802f274:	910a      	str	r1, [sp, #40]	; 0x28
 802f276:	1c51      	adds	r1, r2, #1
 802f278:	9115      	str	r1, [sp, #84]	; 0x54
 802f27a:	7852      	ldrb	r2, [r2, #1]
 802f27c:	2a00      	cmp	r2, #0
 802f27e:	d1c3      	bne.n	802f208 <_strtod_l+0x38>
 802f280:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802f282:	9515      	str	r5, [sp, #84]	; 0x54
 802f284:	2b00      	cmp	r3, #0
 802f286:	f040 855f 	bne.w	802fd48 <_strtod_l+0xb78>
 802f28a:	4642      	mov	r2, r8
 802f28c:	464b      	mov	r3, r9
 802f28e:	e7e3      	b.n	802f258 <_strtod_l+0x88>
 802f290:	2100      	movs	r1, #0
 802f292:	e7ef      	b.n	802f274 <_strtod_l+0xa4>
 802f294:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802f296:	b13a      	cbz	r2, 802f2a8 <_strtod_l+0xd8>
 802f298:	2135      	movs	r1, #53	; 0x35
 802f29a:	a818      	add	r0, sp, #96	; 0x60
 802f29c:	f7ff ff37 	bl	802f10e <__copybits>
 802f2a0:	9916      	ldr	r1, [sp, #88]	; 0x58
 802f2a2:	4620      	mov	r0, r4
 802f2a4:	f7ff fb0a 	bl	802e8bc <_Bfree>
 802f2a8:	3f01      	subs	r7, #1
 802f2aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802f2ac:	2f04      	cmp	r7, #4
 802f2ae:	d806      	bhi.n	802f2be <_strtod_l+0xee>
 802f2b0:	e8df f007 	tbb	[pc, r7]
 802f2b4:	201d0314 	.word	0x201d0314
 802f2b8:	14          	.byte	0x14
 802f2b9:	00          	.byte	0x00
 802f2ba:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 802f2be:	05e9      	lsls	r1, r5, #23
 802f2c0:	bf48      	it	mi
 802f2c2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 802f2c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802f2ca:	0d1b      	lsrs	r3, r3, #20
 802f2cc:	051b      	lsls	r3, r3, #20
 802f2ce:	2b00      	cmp	r3, #0
 802f2d0:	d1b9      	bne.n	802f246 <_strtod_l+0x76>
 802f2d2:	f7fe fb9b 	bl	802da0c <__errno>
 802f2d6:	2322      	movs	r3, #34	; 0x22
 802f2d8:	6003      	str	r3, [r0, #0]
 802f2da:	e7b4      	b.n	802f246 <_strtod_l+0x76>
 802f2dc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 802f2e0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 802f2e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 802f2e8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 802f2ec:	e7e7      	b.n	802f2be <_strtod_l+0xee>
 802f2ee:	f8df 9178 	ldr.w	r9, [pc, #376]	; 802f468 <_strtod_l+0x298>
 802f2f2:	e7e4      	b.n	802f2be <_strtod_l+0xee>
 802f2f4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 802f2f8:	f04f 38ff 	mov.w	r8, #4294967295
 802f2fc:	e7df      	b.n	802f2be <_strtod_l+0xee>
 802f2fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f300:	1c5a      	adds	r2, r3, #1
 802f302:	9215      	str	r2, [sp, #84]	; 0x54
 802f304:	785b      	ldrb	r3, [r3, #1]
 802f306:	2b30      	cmp	r3, #48	; 0x30
 802f308:	d0f9      	beq.n	802f2fe <_strtod_l+0x12e>
 802f30a:	2b00      	cmp	r3, #0
 802f30c:	d09b      	beq.n	802f246 <_strtod_l+0x76>
 802f30e:	2301      	movs	r3, #1
 802f310:	f04f 0a00 	mov.w	sl, #0
 802f314:	9304      	str	r3, [sp, #16]
 802f316:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f318:	930b      	str	r3, [sp, #44]	; 0x2c
 802f31a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 802f31e:	46d3      	mov	fp, sl
 802f320:	220a      	movs	r2, #10
 802f322:	9815      	ldr	r0, [sp, #84]	; 0x54
 802f324:	7806      	ldrb	r6, [r0, #0]
 802f326:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 802f32a:	b2d9      	uxtb	r1, r3
 802f32c:	2909      	cmp	r1, #9
 802f32e:	d926      	bls.n	802f37e <_strtod_l+0x1ae>
 802f330:	494c      	ldr	r1, [pc, #304]	; (802f464 <_strtod_l+0x294>)
 802f332:	2201      	movs	r2, #1
 802f334:	f7fe fa12 	bl	802d75c <strncmp>
 802f338:	2800      	cmp	r0, #0
 802f33a:	d030      	beq.n	802f39e <_strtod_l+0x1ce>
 802f33c:	2000      	movs	r0, #0
 802f33e:	4632      	mov	r2, r6
 802f340:	9005      	str	r0, [sp, #20]
 802f342:	465e      	mov	r6, fp
 802f344:	4603      	mov	r3, r0
 802f346:	2a65      	cmp	r2, #101	; 0x65
 802f348:	d001      	beq.n	802f34e <_strtod_l+0x17e>
 802f34a:	2a45      	cmp	r2, #69	; 0x45
 802f34c:	d113      	bne.n	802f376 <_strtod_l+0x1a6>
 802f34e:	b91e      	cbnz	r6, 802f358 <_strtod_l+0x188>
 802f350:	9a04      	ldr	r2, [sp, #16]
 802f352:	4302      	orrs	r2, r0
 802f354:	d094      	beq.n	802f280 <_strtod_l+0xb0>
 802f356:	2600      	movs	r6, #0
 802f358:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802f35a:	1c6a      	adds	r2, r5, #1
 802f35c:	9215      	str	r2, [sp, #84]	; 0x54
 802f35e:	786a      	ldrb	r2, [r5, #1]
 802f360:	2a2b      	cmp	r2, #43	; 0x2b
 802f362:	d074      	beq.n	802f44e <_strtod_l+0x27e>
 802f364:	2a2d      	cmp	r2, #45	; 0x2d
 802f366:	d078      	beq.n	802f45a <_strtod_l+0x28a>
 802f368:	f04f 0c00 	mov.w	ip, #0
 802f36c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 802f370:	2909      	cmp	r1, #9
 802f372:	d97f      	bls.n	802f474 <_strtod_l+0x2a4>
 802f374:	9515      	str	r5, [sp, #84]	; 0x54
 802f376:	2700      	movs	r7, #0
 802f378:	e09e      	b.n	802f4b8 <_strtod_l+0x2e8>
 802f37a:	2300      	movs	r3, #0
 802f37c:	e7c8      	b.n	802f310 <_strtod_l+0x140>
 802f37e:	f1bb 0f08 	cmp.w	fp, #8
 802f382:	bfd8      	it	le
 802f384:	9909      	ldrle	r1, [sp, #36]	; 0x24
 802f386:	f100 0001 	add.w	r0, r0, #1
 802f38a:	bfda      	itte	le
 802f38c:	fb02 3301 	mlale	r3, r2, r1, r3
 802f390:	9309      	strle	r3, [sp, #36]	; 0x24
 802f392:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 802f396:	f10b 0b01 	add.w	fp, fp, #1
 802f39a:	9015      	str	r0, [sp, #84]	; 0x54
 802f39c:	e7c1      	b.n	802f322 <_strtod_l+0x152>
 802f39e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f3a0:	1c5a      	adds	r2, r3, #1
 802f3a2:	9215      	str	r2, [sp, #84]	; 0x54
 802f3a4:	785a      	ldrb	r2, [r3, #1]
 802f3a6:	f1bb 0f00 	cmp.w	fp, #0
 802f3aa:	d037      	beq.n	802f41c <_strtod_l+0x24c>
 802f3ac:	9005      	str	r0, [sp, #20]
 802f3ae:	465e      	mov	r6, fp
 802f3b0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 802f3b4:	2b09      	cmp	r3, #9
 802f3b6:	d912      	bls.n	802f3de <_strtod_l+0x20e>
 802f3b8:	2301      	movs	r3, #1
 802f3ba:	e7c4      	b.n	802f346 <_strtod_l+0x176>
 802f3bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f3be:	1c5a      	adds	r2, r3, #1
 802f3c0:	9215      	str	r2, [sp, #84]	; 0x54
 802f3c2:	785a      	ldrb	r2, [r3, #1]
 802f3c4:	3001      	adds	r0, #1
 802f3c6:	2a30      	cmp	r2, #48	; 0x30
 802f3c8:	d0f8      	beq.n	802f3bc <_strtod_l+0x1ec>
 802f3ca:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 802f3ce:	2b08      	cmp	r3, #8
 802f3d0:	f200 84c1 	bhi.w	802fd56 <_strtod_l+0xb86>
 802f3d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f3d6:	9005      	str	r0, [sp, #20]
 802f3d8:	2000      	movs	r0, #0
 802f3da:	930b      	str	r3, [sp, #44]	; 0x2c
 802f3dc:	4606      	mov	r6, r0
 802f3de:	3a30      	subs	r2, #48	; 0x30
 802f3e0:	f100 0301 	add.w	r3, r0, #1
 802f3e4:	d014      	beq.n	802f410 <_strtod_l+0x240>
 802f3e6:	9905      	ldr	r1, [sp, #20]
 802f3e8:	4419      	add	r1, r3
 802f3ea:	9105      	str	r1, [sp, #20]
 802f3ec:	4633      	mov	r3, r6
 802f3ee:	eb00 0c06 	add.w	ip, r0, r6
 802f3f2:	210a      	movs	r1, #10
 802f3f4:	4563      	cmp	r3, ip
 802f3f6:	d113      	bne.n	802f420 <_strtod_l+0x250>
 802f3f8:	1833      	adds	r3, r6, r0
 802f3fa:	2b08      	cmp	r3, #8
 802f3fc:	f106 0601 	add.w	r6, r6, #1
 802f400:	4406      	add	r6, r0
 802f402:	dc1a      	bgt.n	802f43a <_strtod_l+0x26a>
 802f404:	9909      	ldr	r1, [sp, #36]	; 0x24
 802f406:	230a      	movs	r3, #10
 802f408:	fb03 2301 	mla	r3, r3, r1, r2
 802f40c:	9309      	str	r3, [sp, #36]	; 0x24
 802f40e:	2300      	movs	r3, #0
 802f410:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802f412:	1c51      	adds	r1, r2, #1
 802f414:	9115      	str	r1, [sp, #84]	; 0x54
 802f416:	7852      	ldrb	r2, [r2, #1]
 802f418:	4618      	mov	r0, r3
 802f41a:	e7c9      	b.n	802f3b0 <_strtod_l+0x1e0>
 802f41c:	4658      	mov	r0, fp
 802f41e:	e7d2      	b.n	802f3c6 <_strtod_l+0x1f6>
 802f420:	2b08      	cmp	r3, #8
 802f422:	f103 0301 	add.w	r3, r3, #1
 802f426:	dc03      	bgt.n	802f430 <_strtod_l+0x260>
 802f428:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802f42a:	434f      	muls	r7, r1
 802f42c:	9709      	str	r7, [sp, #36]	; 0x24
 802f42e:	e7e1      	b.n	802f3f4 <_strtod_l+0x224>
 802f430:	2b10      	cmp	r3, #16
 802f432:	bfd8      	it	le
 802f434:	fb01 fa0a 	mulle.w	sl, r1, sl
 802f438:	e7dc      	b.n	802f3f4 <_strtod_l+0x224>
 802f43a:	2e10      	cmp	r6, #16
 802f43c:	bfdc      	itt	le
 802f43e:	230a      	movle	r3, #10
 802f440:	fb03 2a0a 	mlale	sl, r3, sl, r2
 802f444:	e7e3      	b.n	802f40e <_strtod_l+0x23e>
 802f446:	2300      	movs	r3, #0
 802f448:	9305      	str	r3, [sp, #20]
 802f44a:	2301      	movs	r3, #1
 802f44c:	e780      	b.n	802f350 <_strtod_l+0x180>
 802f44e:	f04f 0c00 	mov.w	ip, #0
 802f452:	1caa      	adds	r2, r5, #2
 802f454:	9215      	str	r2, [sp, #84]	; 0x54
 802f456:	78aa      	ldrb	r2, [r5, #2]
 802f458:	e788      	b.n	802f36c <_strtod_l+0x19c>
 802f45a:	f04f 0c01 	mov.w	ip, #1
 802f45e:	e7f8      	b.n	802f452 <_strtod_l+0x282>
 802f460:	08034aa0 	.word	0x08034aa0
 802f464:	08034a9c 	.word	0x08034a9c
 802f468:	7ff00000 	.word	0x7ff00000
 802f46c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802f46e:	1c51      	adds	r1, r2, #1
 802f470:	9115      	str	r1, [sp, #84]	; 0x54
 802f472:	7852      	ldrb	r2, [r2, #1]
 802f474:	2a30      	cmp	r2, #48	; 0x30
 802f476:	d0f9      	beq.n	802f46c <_strtod_l+0x29c>
 802f478:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 802f47c:	2908      	cmp	r1, #8
 802f47e:	f63f af7a 	bhi.w	802f376 <_strtod_l+0x1a6>
 802f482:	3a30      	subs	r2, #48	; 0x30
 802f484:	9208      	str	r2, [sp, #32]
 802f486:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802f488:	920c      	str	r2, [sp, #48]	; 0x30
 802f48a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802f48c:	1c57      	adds	r7, r2, #1
 802f48e:	9715      	str	r7, [sp, #84]	; 0x54
 802f490:	7852      	ldrb	r2, [r2, #1]
 802f492:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 802f496:	f1be 0f09 	cmp.w	lr, #9
 802f49a:	d938      	bls.n	802f50e <_strtod_l+0x33e>
 802f49c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802f49e:	1a7f      	subs	r7, r7, r1
 802f4a0:	2f08      	cmp	r7, #8
 802f4a2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 802f4a6:	dc03      	bgt.n	802f4b0 <_strtod_l+0x2e0>
 802f4a8:	9908      	ldr	r1, [sp, #32]
 802f4aa:	428f      	cmp	r7, r1
 802f4ac:	bfa8      	it	ge
 802f4ae:	460f      	movge	r7, r1
 802f4b0:	f1bc 0f00 	cmp.w	ip, #0
 802f4b4:	d000      	beq.n	802f4b8 <_strtod_l+0x2e8>
 802f4b6:	427f      	negs	r7, r7
 802f4b8:	2e00      	cmp	r6, #0
 802f4ba:	d14f      	bne.n	802f55c <_strtod_l+0x38c>
 802f4bc:	9904      	ldr	r1, [sp, #16]
 802f4be:	4301      	orrs	r1, r0
 802f4c0:	f47f aec1 	bne.w	802f246 <_strtod_l+0x76>
 802f4c4:	2b00      	cmp	r3, #0
 802f4c6:	f47f aedb 	bne.w	802f280 <_strtod_l+0xb0>
 802f4ca:	2a69      	cmp	r2, #105	; 0x69
 802f4cc:	d029      	beq.n	802f522 <_strtod_l+0x352>
 802f4ce:	dc26      	bgt.n	802f51e <_strtod_l+0x34e>
 802f4d0:	2a49      	cmp	r2, #73	; 0x49
 802f4d2:	d026      	beq.n	802f522 <_strtod_l+0x352>
 802f4d4:	2a4e      	cmp	r2, #78	; 0x4e
 802f4d6:	f47f aed3 	bne.w	802f280 <_strtod_l+0xb0>
 802f4da:	499b      	ldr	r1, [pc, #620]	; (802f748 <_strtod_l+0x578>)
 802f4dc:	a815      	add	r0, sp, #84	; 0x54
 802f4de:	f001 ff47 	bl	8031370 <__match>
 802f4e2:	2800      	cmp	r0, #0
 802f4e4:	f43f aecc 	beq.w	802f280 <_strtod_l+0xb0>
 802f4e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f4ea:	781b      	ldrb	r3, [r3, #0]
 802f4ec:	2b28      	cmp	r3, #40	; 0x28
 802f4ee:	d12f      	bne.n	802f550 <_strtod_l+0x380>
 802f4f0:	4996      	ldr	r1, [pc, #600]	; (802f74c <_strtod_l+0x57c>)
 802f4f2:	aa18      	add	r2, sp, #96	; 0x60
 802f4f4:	a815      	add	r0, sp, #84	; 0x54
 802f4f6:	f001 ff4f 	bl	8031398 <__hexnan>
 802f4fa:	2805      	cmp	r0, #5
 802f4fc:	d128      	bne.n	802f550 <_strtod_l+0x380>
 802f4fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802f500:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 802f504:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 802f508:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 802f50c:	e69b      	b.n	802f246 <_strtod_l+0x76>
 802f50e:	9f08      	ldr	r7, [sp, #32]
 802f510:	210a      	movs	r1, #10
 802f512:	fb01 2107 	mla	r1, r1, r7, r2
 802f516:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 802f51a:	9208      	str	r2, [sp, #32]
 802f51c:	e7b5      	b.n	802f48a <_strtod_l+0x2ba>
 802f51e:	2a6e      	cmp	r2, #110	; 0x6e
 802f520:	e7d9      	b.n	802f4d6 <_strtod_l+0x306>
 802f522:	498b      	ldr	r1, [pc, #556]	; (802f750 <_strtod_l+0x580>)
 802f524:	a815      	add	r0, sp, #84	; 0x54
 802f526:	f001 ff23 	bl	8031370 <__match>
 802f52a:	2800      	cmp	r0, #0
 802f52c:	f43f aea8 	beq.w	802f280 <_strtod_l+0xb0>
 802f530:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f532:	4988      	ldr	r1, [pc, #544]	; (802f754 <_strtod_l+0x584>)
 802f534:	3b01      	subs	r3, #1
 802f536:	a815      	add	r0, sp, #84	; 0x54
 802f538:	9315      	str	r3, [sp, #84]	; 0x54
 802f53a:	f001 ff19 	bl	8031370 <__match>
 802f53e:	b910      	cbnz	r0, 802f546 <_strtod_l+0x376>
 802f540:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f542:	3301      	adds	r3, #1
 802f544:	9315      	str	r3, [sp, #84]	; 0x54
 802f546:	f8df 921c 	ldr.w	r9, [pc, #540]	; 802f764 <_strtod_l+0x594>
 802f54a:	f04f 0800 	mov.w	r8, #0
 802f54e:	e67a      	b.n	802f246 <_strtod_l+0x76>
 802f550:	4881      	ldr	r0, [pc, #516]	; (802f758 <_strtod_l+0x588>)
 802f552:	f001 fc5d 	bl	8030e10 <nan>
 802f556:	ec59 8b10 	vmov	r8, r9, d0
 802f55a:	e674      	b.n	802f246 <_strtod_l+0x76>
 802f55c:	9b05      	ldr	r3, [sp, #20]
 802f55e:	9809      	ldr	r0, [sp, #36]	; 0x24
 802f560:	1afb      	subs	r3, r7, r3
 802f562:	f1bb 0f00 	cmp.w	fp, #0
 802f566:	bf08      	it	eq
 802f568:	46b3      	moveq	fp, r6
 802f56a:	2e10      	cmp	r6, #16
 802f56c:	9308      	str	r3, [sp, #32]
 802f56e:	4635      	mov	r5, r6
 802f570:	bfa8      	it	ge
 802f572:	2510      	movge	r5, #16
 802f574:	f7e0 ffde 	bl	8010534 <__aeabi_ui2d>
 802f578:	2e09      	cmp	r6, #9
 802f57a:	4680      	mov	r8, r0
 802f57c:	4689      	mov	r9, r1
 802f57e:	dd13      	ble.n	802f5a8 <_strtod_l+0x3d8>
 802f580:	4b76      	ldr	r3, [pc, #472]	; (802f75c <_strtod_l+0x58c>)
 802f582:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 802f586:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 802f58a:	f7e1 f84d 	bl	8010628 <__aeabi_dmul>
 802f58e:	4680      	mov	r8, r0
 802f590:	4650      	mov	r0, sl
 802f592:	4689      	mov	r9, r1
 802f594:	f7e0 ffce 	bl	8010534 <__aeabi_ui2d>
 802f598:	4602      	mov	r2, r0
 802f59a:	460b      	mov	r3, r1
 802f59c:	4640      	mov	r0, r8
 802f59e:	4649      	mov	r1, r9
 802f5a0:	f7e0 fe8c 	bl	80102bc <__adddf3>
 802f5a4:	4680      	mov	r8, r0
 802f5a6:	4689      	mov	r9, r1
 802f5a8:	2e0f      	cmp	r6, #15
 802f5aa:	dc38      	bgt.n	802f61e <_strtod_l+0x44e>
 802f5ac:	9b08      	ldr	r3, [sp, #32]
 802f5ae:	2b00      	cmp	r3, #0
 802f5b0:	f43f ae49 	beq.w	802f246 <_strtod_l+0x76>
 802f5b4:	dd24      	ble.n	802f600 <_strtod_l+0x430>
 802f5b6:	2b16      	cmp	r3, #22
 802f5b8:	dc0b      	bgt.n	802f5d2 <_strtod_l+0x402>
 802f5ba:	4968      	ldr	r1, [pc, #416]	; (802f75c <_strtod_l+0x58c>)
 802f5bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802f5c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 802f5c4:	4642      	mov	r2, r8
 802f5c6:	464b      	mov	r3, r9
 802f5c8:	f7e1 f82e 	bl	8010628 <__aeabi_dmul>
 802f5cc:	4680      	mov	r8, r0
 802f5ce:	4689      	mov	r9, r1
 802f5d0:	e639      	b.n	802f246 <_strtod_l+0x76>
 802f5d2:	9a08      	ldr	r2, [sp, #32]
 802f5d4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 802f5d8:	4293      	cmp	r3, r2
 802f5da:	db20      	blt.n	802f61e <_strtod_l+0x44e>
 802f5dc:	4c5f      	ldr	r4, [pc, #380]	; (802f75c <_strtod_l+0x58c>)
 802f5de:	f1c6 060f 	rsb	r6, r6, #15
 802f5e2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 802f5e6:	4642      	mov	r2, r8
 802f5e8:	464b      	mov	r3, r9
 802f5ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 802f5ee:	f7e1 f81b 	bl	8010628 <__aeabi_dmul>
 802f5f2:	9b08      	ldr	r3, [sp, #32]
 802f5f4:	1b9e      	subs	r6, r3, r6
 802f5f6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 802f5fa:	e9d4 2300 	ldrd	r2, r3, [r4]
 802f5fe:	e7e3      	b.n	802f5c8 <_strtod_l+0x3f8>
 802f600:	9b08      	ldr	r3, [sp, #32]
 802f602:	3316      	adds	r3, #22
 802f604:	db0b      	blt.n	802f61e <_strtod_l+0x44e>
 802f606:	9b05      	ldr	r3, [sp, #20]
 802f608:	1bdf      	subs	r7, r3, r7
 802f60a:	4b54      	ldr	r3, [pc, #336]	; (802f75c <_strtod_l+0x58c>)
 802f60c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 802f610:	e9d7 2300 	ldrd	r2, r3, [r7]
 802f614:	4640      	mov	r0, r8
 802f616:	4649      	mov	r1, r9
 802f618:	f7e1 f930 	bl	801087c <__aeabi_ddiv>
 802f61c:	e7d6      	b.n	802f5cc <_strtod_l+0x3fc>
 802f61e:	9b08      	ldr	r3, [sp, #32]
 802f620:	1b75      	subs	r5, r6, r5
 802f622:	441d      	add	r5, r3
 802f624:	2d00      	cmp	r5, #0
 802f626:	dd70      	ble.n	802f70a <_strtod_l+0x53a>
 802f628:	f015 030f 	ands.w	r3, r5, #15
 802f62c:	d00a      	beq.n	802f644 <_strtod_l+0x474>
 802f62e:	494b      	ldr	r1, [pc, #300]	; (802f75c <_strtod_l+0x58c>)
 802f630:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802f634:	4642      	mov	r2, r8
 802f636:	464b      	mov	r3, r9
 802f638:	e9d1 0100 	ldrd	r0, r1, [r1]
 802f63c:	f7e0 fff4 	bl	8010628 <__aeabi_dmul>
 802f640:	4680      	mov	r8, r0
 802f642:	4689      	mov	r9, r1
 802f644:	f035 050f 	bics.w	r5, r5, #15
 802f648:	d04d      	beq.n	802f6e6 <_strtod_l+0x516>
 802f64a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 802f64e:	dd22      	ble.n	802f696 <_strtod_l+0x4c6>
 802f650:	2500      	movs	r5, #0
 802f652:	46ab      	mov	fp, r5
 802f654:	9509      	str	r5, [sp, #36]	; 0x24
 802f656:	9505      	str	r5, [sp, #20]
 802f658:	2322      	movs	r3, #34	; 0x22
 802f65a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 802f764 <_strtod_l+0x594>
 802f65e:	6023      	str	r3, [r4, #0]
 802f660:	f04f 0800 	mov.w	r8, #0
 802f664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f666:	2b00      	cmp	r3, #0
 802f668:	f43f aded 	beq.w	802f246 <_strtod_l+0x76>
 802f66c:	9916      	ldr	r1, [sp, #88]	; 0x58
 802f66e:	4620      	mov	r0, r4
 802f670:	f7ff f924 	bl	802e8bc <_Bfree>
 802f674:	9905      	ldr	r1, [sp, #20]
 802f676:	4620      	mov	r0, r4
 802f678:	f7ff f920 	bl	802e8bc <_Bfree>
 802f67c:	4659      	mov	r1, fp
 802f67e:	4620      	mov	r0, r4
 802f680:	f7ff f91c 	bl	802e8bc <_Bfree>
 802f684:	9909      	ldr	r1, [sp, #36]	; 0x24
 802f686:	4620      	mov	r0, r4
 802f688:	f7ff f918 	bl	802e8bc <_Bfree>
 802f68c:	4629      	mov	r1, r5
 802f68e:	4620      	mov	r0, r4
 802f690:	f7ff f914 	bl	802e8bc <_Bfree>
 802f694:	e5d7      	b.n	802f246 <_strtod_l+0x76>
 802f696:	4b32      	ldr	r3, [pc, #200]	; (802f760 <_strtod_l+0x590>)
 802f698:	9304      	str	r3, [sp, #16]
 802f69a:	2300      	movs	r3, #0
 802f69c:	112d      	asrs	r5, r5, #4
 802f69e:	4640      	mov	r0, r8
 802f6a0:	4649      	mov	r1, r9
 802f6a2:	469a      	mov	sl, r3
 802f6a4:	2d01      	cmp	r5, #1
 802f6a6:	dc21      	bgt.n	802f6ec <_strtod_l+0x51c>
 802f6a8:	b10b      	cbz	r3, 802f6ae <_strtod_l+0x4de>
 802f6aa:	4680      	mov	r8, r0
 802f6ac:	4689      	mov	r9, r1
 802f6ae:	492c      	ldr	r1, [pc, #176]	; (802f760 <_strtod_l+0x590>)
 802f6b0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 802f6b4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 802f6b8:	4642      	mov	r2, r8
 802f6ba:	464b      	mov	r3, r9
 802f6bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 802f6c0:	f7e0 ffb2 	bl	8010628 <__aeabi_dmul>
 802f6c4:	4b27      	ldr	r3, [pc, #156]	; (802f764 <_strtod_l+0x594>)
 802f6c6:	460a      	mov	r2, r1
 802f6c8:	400b      	ands	r3, r1
 802f6ca:	4927      	ldr	r1, [pc, #156]	; (802f768 <_strtod_l+0x598>)
 802f6cc:	428b      	cmp	r3, r1
 802f6ce:	4680      	mov	r8, r0
 802f6d0:	d8be      	bhi.n	802f650 <_strtod_l+0x480>
 802f6d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 802f6d6:	428b      	cmp	r3, r1
 802f6d8:	bf86      	itte	hi
 802f6da:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 802f76c <_strtod_l+0x59c>
 802f6de:	f04f 38ff 	movhi.w	r8, #4294967295
 802f6e2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 802f6e6:	2300      	movs	r3, #0
 802f6e8:	9304      	str	r3, [sp, #16]
 802f6ea:	e07b      	b.n	802f7e4 <_strtod_l+0x614>
 802f6ec:	07ea      	lsls	r2, r5, #31
 802f6ee:	d505      	bpl.n	802f6fc <_strtod_l+0x52c>
 802f6f0:	9b04      	ldr	r3, [sp, #16]
 802f6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f6f6:	f7e0 ff97 	bl	8010628 <__aeabi_dmul>
 802f6fa:	2301      	movs	r3, #1
 802f6fc:	9a04      	ldr	r2, [sp, #16]
 802f6fe:	3208      	adds	r2, #8
 802f700:	f10a 0a01 	add.w	sl, sl, #1
 802f704:	106d      	asrs	r5, r5, #1
 802f706:	9204      	str	r2, [sp, #16]
 802f708:	e7cc      	b.n	802f6a4 <_strtod_l+0x4d4>
 802f70a:	d0ec      	beq.n	802f6e6 <_strtod_l+0x516>
 802f70c:	426d      	negs	r5, r5
 802f70e:	f015 020f 	ands.w	r2, r5, #15
 802f712:	d00a      	beq.n	802f72a <_strtod_l+0x55a>
 802f714:	4b11      	ldr	r3, [pc, #68]	; (802f75c <_strtod_l+0x58c>)
 802f716:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802f71a:	4640      	mov	r0, r8
 802f71c:	4649      	mov	r1, r9
 802f71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f722:	f7e1 f8ab 	bl	801087c <__aeabi_ddiv>
 802f726:	4680      	mov	r8, r0
 802f728:	4689      	mov	r9, r1
 802f72a:	112d      	asrs	r5, r5, #4
 802f72c:	d0db      	beq.n	802f6e6 <_strtod_l+0x516>
 802f72e:	2d1f      	cmp	r5, #31
 802f730:	dd1e      	ble.n	802f770 <_strtod_l+0x5a0>
 802f732:	2500      	movs	r5, #0
 802f734:	46ab      	mov	fp, r5
 802f736:	9509      	str	r5, [sp, #36]	; 0x24
 802f738:	9505      	str	r5, [sp, #20]
 802f73a:	2322      	movs	r3, #34	; 0x22
 802f73c:	f04f 0800 	mov.w	r8, #0
 802f740:	f04f 0900 	mov.w	r9, #0
 802f744:	6023      	str	r3, [r4, #0]
 802f746:	e78d      	b.n	802f664 <_strtod_l+0x494>
 802f748:	08034835 	.word	0x08034835
 802f74c:	08034ab4 	.word	0x08034ab4
 802f750:	0803482d 	.word	0x0803482d
 802f754:	080348d3 	.word	0x080348d3
 802f758:	08034827 	.word	0x08034827
 802f75c:	080349c8 	.word	0x080349c8
 802f760:	080349a0 	.word	0x080349a0
 802f764:	7ff00000 	.word	0x7ff00000
 802f768:	7ca00000 	.word	0x7ca00000
 802f76c:	7fefffff 	.word	0x7fefffff
 802f770:	f015 0310 	ands.w	r3, r5, #16
 802f774:	bf18      	it	ne
 802f776:	236a      	movne	r3, #106	; 0x6a
 802f778:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 802fb1c <_strtod_l+0x94c>
 802f77c:	9304      	str	r3, [sp, #16]
 802f77e:	4640      	mov	r0, r8
 802f780:	4649      	mov	r1, r9
 802f782:	2300      	movs	r3, #0
 802f784:	07ea      	lsls	r2, r5, #31
 802f786:	d504      	bpl.n	802f792 <_strtod_l+0x5c2>
 802f788:	e9da 2300 	ldrd	r2, r3, [sl]
 802f78c:	f7e0 ff4c 	bl	8010628 <__aeabi_dmul>
 802f790:	2301      	movs	r3, #1
 802f792:	106d      	asrs	r5, r5, #1
 802f794:	f10a 0a08 	add.w	sl, sl, #8
 802f798:	d1f4      	bne.n	802f784 <_strtod_l+0x5b4>
 802f79a:	b10b      	cbz	r3, 802f7a0 <_strtod_l+0x5d0>
 802f79c:	4680      	mov	r8, r0
 802f79e:	4689      	mov	r9, r1
 802f7a0:	9b04      	ldr	r3, [sp, #16]
 802f7a2:	b1bb      	cbz	r3, 802f7d4 <_strtod_l+0x604>
 802f7a4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 802f7a8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 802f7ac:	2b00      	cmp	r3, #0
 802f7ae:	4649      	mov	r1, r9
 802f7b0:	dd10      	ble.n	802f7d4 <_strtod_l+0x604>
 802f7b2:	2b1f      	cmp	r3, #31
 802f7b4:	f340 811e 	ble.w	802f9f4 <_strtod_l+0x824>
 802f7b8:	2b34      	cmp	r3, #52	; 0x34
 802f7ba:	bfde      	ittt	le
 802f7bc:	f04f 33ff 	movle.w	r3, #4294967295
 802f7c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 802f7c4:	4093      	lslle	r3, r2
 802f7c6:	f04f 0800 	mov.w	r8, #0
 802f7ca:	bfcc      	ite	gt
 802f7cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 802f7d0:	ea03 0901 	andle.w	r9, r3, r1
 802f7d4:	2200      	movs	r2, #0
 802f7d6:	2300      	movs	r3, #0
 802f7d8:	4640      	mov	r0, r8
 802f7da:	4649      	mov	r1, r9
 802f7dc:	f7e1 f98c 	bl	8010af8 <__aeabi_dcmpeq>
 802f7e0:	2800      	cmp	r0, #0
 802f7e2:	d1a6      	bne.n	802f732 <_strtod_l+0x562>
 802f7e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f7e6:	9300      	str	r3, [sp, #0]
 802f7e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802f7ea:	4633      	mov	r3, r6
 802f7ec:	465a      	mov	r2, fp
 802f7ee:	4620      	mov	r0, r4
 802f7f0:	f7ff f8cc 	bl	802e98c <__s2b>
 802f7f4:	9009      	str	r0, [sp, #36]	; 0x24
 802f7f6:	2800      	cmp	r0, #0
 802f7f8:	f43f af2a 	beq.w	802f650 <_strtod_l+0x480>
 802f7fc:	9a08      	ldr	r2, [sp, #32]
 802f7fe:	9b05      	ldr	r3, [sp, #20]
 802f800:	2a00      	cmp	r2, #0
 802f802:	eba3 0307 	sub.w	r3, r3, r7
 802f806:	bfa8      	it	ge
 802f808:	2300      	movge	r3, #0
 802f80a:	930c      	str	r3, [sp, #48]	; 0x30
 802f80c:	2500      	movs	r5, #0
 802f80e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 802f812:	9312      	str	r3, [sp, #72]	; 0x48
 802f814:	46ab      	mov	fp, r5
 802f816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f818:	4620      	mov	r0, r4
 802f81a:	6859      	ldr	r1, [r3, #4]
 802f81c:	f7ff f80e 	bl	802e83c <_Balloc>
 802f820:	9005      	str	r0, [sp, #20]
 802f822:	2800      	cmp	r0, #0
 802f824:	f43f af18 	beq.w	802f658 <_strtod_l+0x488>
 802f828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f82a:	691a      	ldr	r2, [r3, #16]
 802f82c:	3202      	adds	r2, #2
 802f82e:	f103 010c 	add.w	r1, r3, #12
 802f832:	0092      	lsls	r2, r2, #2
 802f834:	300c      	adds	r0, #12
 802f836:	f7fe f91e 	bl	802da76 <memcpy>
 802f83a:	ec49 8b10 	vmov	d0, r8, r9
 802f83e:	aa18      	add	r2, sp, #96	; 0x60
 802f840:	a917      	add	r1, sp, #92	; 0x5c
 802f842:	4620      	mov	r0, r4
 802f844:	f7ff fbd6 	bl	802eff4 <__d2b>
 802f848:	ec49 8b18 	vmov	d8, r8, r9
 802f84c:	9016      	str	r0, [sp, #88]	; 0x58
 802f84e:	2800      	cmp	r0, #0
 802f850:	f43f af02 	beq.w	802f658 <_strtod_l+0x488>
 802f854:	2101      	movs	r1, #1
 802f856:	4620      	mov	r0, r4
 802f858:	f7ff f930 	bl	802eabc <__i2b>
 802f85c:	4683      	mov	fp, r0
 802f85e:	2800      	cmp	r0, #0
 802f860:	f43f aefa 	beq.w	802f658 <_strtod_l+0x488>
 802f864:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 802f866:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802f868:	2e00      	cmp	r6, #0
 802f86a:	bfab      	itete	ge
 802f86c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 802f86e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 802f870:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 802f872:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 802f876:	bfac      	ite	ge
 802f878:	eb06 0a03 	addge.w	sl, r6, r3
 802f87c:	1b9f      	sublt	r7, r3, r6
 802f87e:	9b04      	ldr	r3, [sp, #16]
 802f880:	1af6      	subs	r6, r6, r3
 802f882:	4416      	add	r6, r2
 802f884:	4ba0      	ldr	r3, [pc, #640]	; (802fb08 <_strtod_l+0x938>)
 802f886:	3e01      	subs	r6, #1
 802f888:	429e      	cmp	r6, r3
 802f88a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 802f88e:	f280 80c4 	bge.w	802fa1a <_strtod_l+0x84a>
 802f892:	1b9b      	subs	r3, r3, r6
 802f894:	2b1f      	cmp	r3, #31
 802f896:	eba2 0203 	sub.w	r2, r2, r3
 802f89a:	f04f 0101 	mov.w	r1, #1
 802f89e:	f300 80b0 	bgt.w	802fa02 <_strtod_l+0x832>
 802f8a2:	fa01 f303 	lsl.w	r3, r1, r3
 802f8a6:	930e      	str	r3, [sp, #56]	; 0x38
 802f8a8:	2300      	movs	r3, #0
 802f8aa:	930d      	str	r3, [sp, #52]	; 0x34
 802f8ac:	eb0a 0602 	add.w	r6, sl, r2
 802f8b0:	9b04      	ldr	r3, [sp, #16]
 802f8b2:	45b2      	cmp	sl, r6
 802f8b4:	4417      	add	r7, r2
 802f8b6:	441f      	add	r7, r3
 802f8b8:	4653      	mov	r3, sl
 802f8ba:	bfa8      	it	ge
 802f8bc:	4633      	movge	r3, r6
 802f8be:	42bb      	cmp	r3, r7
 802f8c0:	bfa8      	it	ge
 802f8c2:	463b      	movge	r3, r7
 802f8c4:	2b00      	cmp	r3, #0
 802f8c6:	bfc2      	ittt	gt
 802f8c8:	1af6      	subgt	r6, r6, r3
 802f8ca:	1aff      	subgt	r7, r7, r3
 802f8cc:	ebaa 0a03 	subgt.w	sl, sl, r3
 802f8d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802f8d2:	2b00      	cmp	r3, #0
 802f8d4:	dd17      	ble.n	802f906 <_strtod_l+0x736>
 802f8d6:	4659      	mov	r1, fp
 802f8d8:	461a      	mov	r2, r3
 802f8da:	4620      	mov	r0, r4
 802f8dc:	f7ff f9ae 	bl	802ec3c <__pow5mult>
 802f8e0:	4683      	mov	fp, r0
 802f8e2:	2800      	cmp	r0, #0
 802f8e4:	f43f aeb8 	beq.w	802f658 <_strtod_l+0x488>
 802f8e8:	4601      	mov	r1, r0
 802f8ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802f8ec:	4620      	mov	r0, r4
 802f8ee:	f7ff f8fb 	bl	802eae8 <__multiply>
 802f8f2:	900b      	str	r0, [sp, #44]	; 0x2c
 802f8f4:	2800      	cmp	r0, #0
 802f8f6:	f43f aeaf 	beq.w	802f658 <_strtod_l+0x488>
 802f8fa:	9916      	ldr	r1, [sp, #88]	; 0x58
 802f8fc:	4620      	mov	r0, r4
 802f8fe:	f7fe ffdd 	bl	802e8bc <_Bfree>
 802f902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802f904:	9316      	str	r3, [sp, #88]	; 0x58
 802f906:	2e00      	cmp	r6, #0
 802f908:	f300 808c 	bgt.w	802fa24 <_strtod_l+0x854>
 802f90c:	9b08      	ldr	r3, [sp, #32]
 802f90e:	2b00      	cmp	r3, #0
 802f910:	dd08      	ble.n	802f924 <_strtod_l+0x754>
 802f912:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802f914:	9905      	ldr	r1, [sp, #20]
 802f916:	4620      	mov	r0, r4
 802f918:	f7ff f990 	bl	802ec3c <__pow5mult>
 802f91c:	9005      	str	r0, [sp, #20]
 802f91e:	2800      	cmp	r0, #0
 802f920:	f43f ae9a 	beq.w	802f658 <_strtod_l+0x488>
 802f924:	2f00      	cmp	r7, #0
 802f926:	dd08      	ble.n	802f93a <_strtod_l+0x76a>
 802f928:	9905      	ldr	r1, [sp, #20]
 802f92a:	463a      	mov	r2, r7
 802f92c:	4620      	mov	r0, r4
 802f92e:	f7ff f9df 	bl	802ecf0 <__lshift>
 802f932:	9005      	str	r0, [sp, #20]
 802f934:	2800      	cmp	r0, #0
 802f936:	f43f ae8f 	beq.w	802f658 <_strtod_l+0x488>
 802f93a:	f1ba 0f00 	cmp.w	sl, #0
 802f93e:	dd08      	ble.n	802f952 <_strtod_l+0x782>
 802f940:	4659      	mov	r1, fp
 802f942:	4652      	mov	r2, sl
 802f944:	4620      	mov	r0, r4
 802f946:	f7ff f9d3 	bl	802ecf0 <__lshift>
 802f94a:	4683      	mov	fp, r0
 802f94c:	2800      	cmp	r0, #0
 802f94e:	f43f ae83 	beq.w	802f658 <_strtod_l+0x488>
 802f952:	9a05      	ldr	r2, [sp, #20]
 802f954:	9916      	ldr	r1, [sp, #88]	; 0x58
 802f956:	4620      	mov	r0, r4
 802f958:	f7ff fa52 	bl	802ee00 <__mdiff>
 802f95c:	4605      	mov	r5, r0
 802f95e:	2800      	cmp	r0, #0
 802f960:	f43f ae7a 	beq.w	802f658 <_strtod_l+0x488>
 802f964:	68c3      	ldr	r3, [r0, #12]
 802f966:	930b      	str	r3, [sp, #44]	; 0x2c
 802f968:	2300      	movs	r3, #0
 802f96a:	60c3      	str	r3, [r0, #12]
 802f96c:	4659      	mov	r1, fp
 802f96e:	f7ff fa2b 	bl	802edc8 <__mcmp>
 802f972:	2800      	cmp	r0, #0
 802f974:	da60      	bge.n	802fa38 <_strtod_l+0x868>
 802f976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802f978:	ea53 0308 	orrs.w	r3, r3, r8
 802f97c:	f040 8084 	bne.w	802fa88 <_strtod_l+0x8b8>
 802f980:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802f984:	2b00      	cmp	r3, #0
 802f986:	d17f      	bne.n	802fa88 <_strtod_l+0x8b8>
 802f988:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802f98c:	0d1b      	lsrs	r3, r3, #20
 802f98e:	051b      	lsls	r3, r3, #20
 802f990:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 802f994:	d978      	bls.n	802fa88 <_strtod_l+0x8b8>
 802f996:	696b      	ldr	r3, [r5, #20]
 802f998:	b913      	cbnz	r3, 802f9a0 <_strtod_l+0x7d0>
 802f99a:	692b      	ldr	r3, [r5, #16]
 802f99c:	2b01      	cmp	r3, #1
 802f99e:	dd73      	ble.n	802fa88 <_strtod_l+0x8b8>
 802f9a0:	4629      	mov	r1, r5
 802f9a2:	2201      	movs	r2, #1
 802f9a4:	4620      	mov	r0, r4
 802f9a6:	f7ff f9a3 	bl	802ecf0 <__lshift>
 802f9aa:	4659      	mov	r1, fp
 802f9ac:	4605      	mov	r5, r0
 802f9ae:	f7ff fa0b 	bl	802edc8 <__mcmp>
 802f9b2:	2800      	cmp	r0, #0
 802f9b4:	dd68      	ble.n	802fa88 <_strtod_l+0x8b8>
 802f9b6:	9904      	ldr	r1, [sp, #16]
 802f9b8:	4a54      	ldr	r2, [pc, #336]	; (802fb0c <_strtod_l+0x93c>)
 802f9ba:	464b      	mov	r3, r9
 802f9bc:	2900      	cmp	r1, #0
 802f9be:	f000 8084 	beq.w	802faca <_strtod_l+0x8fa>
 802f9c2:	ea02 0109 	and.w	r1, r2, r9
 802f9c6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 802f9ca:	dc7e      	bgt.n	802faca <_strtod_l+0x8fa>
 802f9cc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 802f9d0:	f77f aeb3 	ble.w	802f73a <_strtod_l+0x56a>
 802f9d4:	4b4e      	ldr	r3, [pc, #312]	; (802fb10 <_strtod_l+0x940>)
 802f9d6:	4640      	mov	r0, r8
 802f9d8:	4649      	mov	r1, r9
 802f9da:	2200      	movs	r2, #0
 802f9dc:	f7e0 fe24 	bl	8010628 <__aeabi_dmul>
 802f9e0:	4b4a      	ldr	r3, [pc, #296]	; (802fb0c <_strtod_l+0x93c>)
 802f9e2:	400b      	ands	r3, r1
 802f9e4:	4680      	mov	r8, r0
 802f9e6:	4689      	mov	r9, r1
 802f9e8:	2b00      	cmp	r3, #0
 802f9ea:	f47f ae3f 	bne.w	802f66c <_strtod_l+0x49c>
 802f9ee:	2322      	movs	r3, #34	; 0x22
 802f9f0:	6023      	str	r3, [r4, #0]
 802f9f2:	e63b      	b.n	802f66c <_strtod_l+0x49c>
 802f9f4:	f04f 32ff 	mov.w	r2, #4294967295
 802f9f8:	fa02 f303 	lsl.w	r3, r2, r3
 802f9fc:	ea03 0808 	and.w	r8, r3, r8
 802fa00:	e6e8      	b.n	802f7d4 <_strtod_l+0x604>
 802fa02:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 802fa06:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 802fa0a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 802fa0e:	36e2      	adds	r6, #226	; 0xe2
 802fa10:	fa01 f306 	lsl.w	r3, r1, r6
 802fa14:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 802fa18:	e748      	b.n	802f8ac <_strtod_l+0x6dc>
 802fa1a:	2100      	movs	r1, #0
 802fa1c:	2301      	movs	r3, #1
 802fa1e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 802fa22:	e743      	b.n	802f8ac <_strtod_l+0x6dc>
 802fa24:	9916      	ldr	r1, [sp, #88]	; 0x58
 802fa26:	4632      	mov	r2, r6
 802fa28:	4620      	mov	r0, r4
 802fa2a:	f7ff f961 	bl	802ecf0 <__lshift>
 802fa2e:	9016      	str	r0, [sp, #88]	; 0x58
 802fa30:	2800      	cmp	r0, #0
 802fa32:	f47f af6b 	bne.w	802f90c <_strtod_l+0x73c>
 802fa36:	e60f      	b.n	802f658 <_strtod_l+0x488>
 802fa38:	46ca      	mov	sl, r9
 802fa3a:	d171      	bne.n	802fb20 <_strtod_l+0x950>
 802fa3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802fa3e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802fa42:	b352      	cbz	r2, 802fa9a <_strtod_l+0x8ca>
 802fa44:	4a33      	ldr	r2, [pc, #204]	; (802fb14 <_strtod_l+0x944>)
 802fa46:	4293      	cmp	r3, r2
 802fa48:	d12a      	bne.n	802faa0 <_strtod_l+0x8d0>
 802fa4a:	9b04      	ldr	r3, [sp, #16]
 802fa4c:	4641      	mov	r1, r8
 802fa4e:	b1fb      	cbz	r3, 802fa90 <_strtod_l+0x8c0>
 802fa50:	4b2e      	ldr	r3, [pc, #184]	; (802fb0c <_strtod_l+0x93c>)
 802fa52:	ea09 0303 	and.w	r3, r9, r3
 802fa56:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 802fa5a:	f04f 32ff 	mov.w	r2, #4294967295
 802fa5e:	d81a      	bhi.n	802fa96 <_strtod_l+0x8c6>
 802fa60:	0d1b      	lsrs	r3, r3, #20
 802fa62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802fa66:	fa02 f303 	lsl.w	r3, r2, r3
 802fa6a:	4299      	cmp	r1, r3
 802fa6c:	d118      	bne.n	802faa0 <_strtod_l+0x8d0>
 802fa6e:	4b2a      	ldr	r3, [pc, #168]	; (802fb18 <_strtod_l+0x948>)
 802fa70:	459a      	cmp	sl, r3
 802fa72:	d102      	bne.n	802fa7a <_strtod_l+0x8aa>
 802fa74:	3101      	adds	r1, #1
 802fa76:	f43f adef 	beq.w	802f658 <_strtod_l+0x488>
 802fa7a:	4b24      	ldr	r3, [pc, #144]	; (802fb0c <_strtod_l+0x93c>)
 802fa7c:	ea0a 0303 	and.w	r3, sl, r3
 802fa80:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 802fa84:	f04f 0800 	mov.w	r8, #0
 802fa88:	9b04      	ldr	r3, [sp, #16]
 802fa8a:	2b00      	cmp	r3, #0
 802fa8c:	d1a2      	bne.n	802f9d4 <_strtod_l+0x804>
 802fa8e:	e5ed      	b.n	802f66c <_strtod_l+0x49c>
 802fa90:	f04f 33ff 	mov.w	r3, #4294967295
 802fa94:	e7e9      	b.n	802fa6a <_strtod_l+0x89a>
 802fa96:	4613      	mov	r3, r2
 802fa98:	e7e7      	b.n	802fa6a <_strtod_l+0x89a>
 802fa9a:	ea53 0308 	orrs.w	r3, r3, r8
 802fa9e:	d08a      	beq.n	802f9b6 <_strtod_l+0x7e6>
 802faa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802faa2:	b1e3      	cbz	r3, 802fade <_strtod_l+0x90e>
 802faa4:	ea13 0f0a 	tst.w	r3, sl
 802faa8:	d0ee      	beq.n	802fa88 <_strtod_l+0x8b8>
 802faaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802faac:	9a04      	ldr	r2, [sp, #16]
 802faae:	4640      	mov	r0, r8
 802fab0:	4649      	mov	r1, r9
 802fab2:	b1c3      	cbz	r3, 802fae6 <_strtod_l+0x916>
 802fab4:	f7ff fb6f 	bl	802f196 <sulp>
 802fab8:	4602      	mov	r2, r0
 802faba:	460b      	mov	r3, r1
 802fabc:	ec51 0b18 	vmov	r0, r1, d8
 802fac0:	f7e0 fbfc 	bl	80102bc <__adddf3>
 802fac4:	4680      	mov	r8, r0
 802fac6:	4689      	mov	r9, r1
 802fac8:	e7de      	b.n	802fa88 <_strtod_l+0x8b8>
 802faca:	4013      	ands	r3, r2
 802facc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802fad0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 802fad4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 802fad8:	f04f 38ff 	mov.w	r8, #4294967295
 802fadc:	e7d4      	b.n	802fa88 <_strtod_l+0x8b8>
 802fade:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802fae0:	ea13 0f08 	tst.w	r3, r8
 802fae4:	e7e0      	b.n	802faa8 <_strtod_l+0x8d8>
 802fae6:	f7ff fb56 	bl	802f196 <sulp>
 802faea:	4602      	mov	r2, r0
 802faec:	460b      	mov	r3, r1
 802faee:	ec51 0b18 	vmov	r0, r1, d8
 802faf2:	f7e0 fbe1 	bl	80102b8 <__aeabi_dsub>
 802faf6:	2200      	movs	r2, #0
 802faf8:	2300      	movs	r3, #0
 802fafa:	4680      	mov	r8, r0
 802fafc:	4689      	mov	r9, r1
 802fafe:	f7e0 fffb 	bl	8010af8 <__aeabi_dcmpeq>
 802fb02:	2800      	cmp	r0, #0
 802fb04:	d0c0      	beq.n	802fa88 <_strtod_l+0x8b8>
 802fb06:	e618      	b.n	802f73a <_strtod_l+0x56a>
 802fb08:	fffffc02 	.word	0xfffffc02
 802fb0c:	7ff00000 	.word	0x7ff00000
 802fb10:	39500000 	.word	0x39500000
 802fb14:	000fffff 	.word	0x000fffff
 802fb18:	7fefffff 	.word	0x7fefffff
 802fb1c:	08034ac8 	.word	0x08034ac8
 802fb20:	4659      	mov	r1, fp
 802fb22:	4628      	mov	r0, r5
 802fb24:	f7ff fac0 	bl	802f0a8 <__ratio>
 802fb28:	ec57 6b10 	vmov	r6, r7, d0
 802fb2c:	ee10 0a10 	vmov	r0, s0
 802fb30:	2200      	movs	r2, #0
 802fb32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802fb36:	4639      	mov	r1, r7
 802fb38:	f7e0 fff2 	bl	8010b20 <__aeabi_dcmple>
 802fb3c:	2800      	cmp	r0, #0
 802fb3e:	d071      	beq.n	802fc24 <_strtod_l+0xa54>
 802fb40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802fb42:	2b00      	cmp	r3, #0
 802fb44:	d17c      	bne.n	802fc40 <_strtod_l+0xa70>
 802fb46:	f1b8 0f00 	cmp.w	r8, #0
 802fb4a:	d15a      	bne.n	802fc02 <_strtod_l+0xa32>
 802fb4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802fb50:	2b00      	cmp	r3, #0
 802fb52:	d15d      	bne.n	802fc10 <_strtod_l+0xa40>
 802fb54:	4b90      	ldr	r3, [pc, #576]	; (802fd98 <_strtod_l+0xbc8>)
 802fb56:	2200      	movs	r2, #0
 802fb58:	4630      	mov	r0, r6
 802fb5a:	4639      	mov	r1, r7
 802fb5c:	f7e0 ffd6 	bl	8010b0c <__aeabi_dcmplt>
 802fb60:	2800      	cmp	r0, #0
 802fb62:	d15c      	bne.n	802fc1e <_strtod_l+0xa4e>
 802fb64:	4630      	mov	r0, r6
 802fb66:	4639      	mov	r1, r7
 802fb68:	4b8c      	ldr	r3, [pc, #560]	; (802fd9c <_strtod_l+0xbcc>)
 802fb6a:	2200      	movs	r2, #0
 802fb6c:	f7e0 fd5c 	bl	8010628 <__aeabi_dmul>
 802fb70:	4606      	mov	r6, r0
 802fb72:	460f      	mov	r7, r1
 802fb74:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 802fb78:	9606      	str	r6, [sp, #24]
 802fb7a:	9307      	str	r3, [sp, #28]
 802fb7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802fb80:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 802fb84:	4b86      	ldr	r3, [pc, #536]	; (802fda0 <_strtod_l+0xbd0>)
 802fb86:	ea0a 0303 	and.w	r3, sl, r3
 802fb8a:	930d      	str	r3, [sp, #52]	; 0x34
 802fb8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802fb8e:	4b85      	ldr	r3, [pc, #532]	; (802fda4 <_strtod_l+0xbd4>)
 802fb90:	429a      	cmp	r2, r3
 802fb92:	f040 8090 	bne.w	802fcb6 <_strtod_l+0xae6>
 802fb96:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 802fb9a:	ec49 8b10 	vmov	d0, r8, r9
 802fb9e:	f7ff f9b9 	bl	802ef14 <__ulp>
 802fba2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802fba6:	ec51 0b10 	vmov	r0, r1, d0
 802fbaa:	f7e0 fd3d 	bl	8010628 <__aeabi_dmul>
 802fbae:	4642      	mov	r2, r8
 802fbb0:	464b      	mov	r3, r9
 802fbb2:	f7e0 fb83 	bl	80102bc <__adddf3>
 802fbb6:	460b      	mov	r3, r1
 802fbb8:	4979      	ldr	r1, [pc, #484]	; (802fda0 <_strtod_l+0xbd0>)
 802fbba:	4a7b      	ldr	r2, [pc, #492]	; (802fda8 <_strtod_l+0xbd8>)
 802fbbc:	4019      	ands	r1, r3
 802fbbe:	4291      	cmp	r1, r2
 802fbc0:	4680      	mov	r8, r0
 802fbc2:	d944      	bls.n	802fc4e <_strtod_l+0xa7e>
 802fbc4:	ee18 2a90 	vmov	r2, s17
 802fbc8:	4b78      	ldr	r3, [pc, #480]	; (802fdac <_strtod_l+0xbdc>)
 802fbca:	429a      	cmp	r2, r3
 802fbcc:	d104      	bne.n	802fbd8 <_strtod_l+0xa08>
 802fbce:	ee18 3a10 	vmov	r3, s16
 802fbd2:	3301      	adds	r3, #1
 802fbd4:	f43f ad40 	beq.w	802f658 <_strtod_l+0x488>
 802fbd8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 802fdac <_strtod_l+0xbdc>
 802fbdc:	f04f 38ff 	mov.w	r8, #4294967295
 802fbe0:	9916      	ldr	r1, [sp, #88]	; 0x58
 802fbe2:	4620      	mov	r0, r4
 802fbe4:	f7fe fe6a 	bl	802e8bc <_Bfree>
 802fbe8:	9905      	ldr	r1, [sp, #20]
 802fbea:	4620      	mov	r0, r4
 802fbec:	f7fe fe66 	bl	802e8bc <_Bfree>
 802fbf0:	4659      	mov	r1, fp
 802fbf2:	4620      	mov	r0, r4
 802fbf4:	f7fe fe62 	bl	802e8bc <_Bfree>
 802fbf8:	4629      	mov	r1, r5
 802fbfa:	4620      	mov	r0, r4
 802fbfc:	f7fe fe5e 	bl	802e8bc <_Bfree>
 802fc00:	e609      	b.n	802f816 <_strtod_l+0x646>
 802fc02:	f1b8 0f01 	cmp.w	r8, #1
 802fc06:	d103      	bne.n	802fc10 <_strtod_l+0xa40>
 802fc08:	f1b9 0f00 	cmp.w	r9, #0
 802fc0c:	f43f ad95 	beq.w	802f73a <_strtod_l+0x56a>
 802fc10:	ed9f 7b55 	vldr	d7, [pc, #340]	; 802fd68 <_strtod_l+0xb98>
 802fc14:	4f60      	ldr	r7, [pc, #384]	; (802fd98 <_strtod_l+0xbc8>)
 802fc16:	ed8d 7b06 	vstr	d7, [sp, #24]
 802fc1a:	2600      	movs	r6, #0
 802fc1c:	e7ae      	b.n	802fb7c <_strtod_l+0x9ac>
 802fc1e:	4f5f      	ldr	r7, [pc, #380]	; (802fd9c <_strtod_l+0xbcc>)
 802fc20:	2600      	movs	r6, #0
 802fc22:	e7a7      	b.n	802fb74 <_strtod_l+0x9a4>
 802fc24:	4b5d      	ldr	r3, [pc, #372]	; (802fd9c <_strtod_l+0xbcc>)
 802fc26:	4630      	mov	r0, r6
 802fc28:	4639      	mov	r1, r7
 802fc2a:	2200      	movs	r2, #0
 802fc2c:	f7e0 fcfc 	bl	8010628 <__aeabi_dmul>
 802fc30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802fc32:	4606      	mov	r6, r0
 802fc34:	460f      	mov	r7, r1
 802fc36:	2b00      	cmp	r3, #0
 802fc38:	d09c      	beq.n	802fb74 <_strtod_l+0x9a4>
 802fc3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 802fc3e:	e79d      	b.n	802fb7c <_strtod_l+0x9ac>
 802fc40:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 802fd70 <_strtod_l+0xba0>
 802fc44:	ed8d 7b06 	vstr	d7, [sp, #24]
 802fc48:	ec57 6b17 	vmov	r6, r7, d7
 802fc4c:	e796      	b.n	802fb7c <_strtod_l+0x9ac>
 802fc4e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 802fc52:	9b04      	ldr	r3, [sp, #16]
 802fc54:	46ca      	mov	sl, r9
 802fc56:	2b00      	cmp	r3, #0
 802fc58:	d1c2      	bne.n	802fbe0 <_strtod_l+0xa10>
 802fc5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802fc5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802fc60:	0d1b      	lsrs	r3, r3, #20
 802fc62:	051b      	lsls	r3, r3, #20
 802fc64:	429a      	cmp	r2, r3
 802fc66:	d1bb      	bne.n	802fbe0 <_strtod_l+0xa10>
 802fc68:	4630      	mov	r0, r6
 802fc6a:	4639      	mov	r1, r7
 802fc6c:	f7e1 f850 	bl	8010d10 <__aeabi_d2lz>
 802fc70:	f7e0 fcac 	bl	80105cc <__aeabi_l2d>
 802fc74:	4602      	mov	r2, r0
 802fc76:	460b      	mov	r3, r1
 802fc78:	4630      	mov	r0, r6
 802fc7a:	4639      	mov	r1, r7
 802fc7c:	f7e0 fb1c 	bl	80102b8 <__aeabi_dsub>
 802fc80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802fc82:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802fc86:	ea43 0308 	orr.w	r3, r3, r8
 802fc8a:	4313      	orrs	r3, r2
 802fc8c:	4606      	mov	r6, r0
 802fc8e:	460f      	mov	r7, r1
 802fc90:	d054      	beq.n	802fd3c <_strtod_l+0xb6c>
 802fc92:	a339      	add	r3, pc, #228	; (adr r3, 802fd78 <_strtod_l+0xba8>)
 802fc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fc98:	f7e0 ff38 	bl	8010b0c <__aeabi_dcmplt>
 802fc9c:	2800      	cmp	r0, #0
 802fc9e:	f47f ace5 	bne.w	802f66c <_strtod_l+0x49c>
 802fca2:	a337      	add	r3, pc, #220	; (adr r3, 802fd80 <_strtod_l+0xbb0>)
 802fca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fca8:	4630      	mov	r0, r6
 802fcaa:	4639      	mov	r1, r7
 802fcac:	f7e0 ff4c 	bl	8010b48 <__aeabi_dcmpgt>
 802fcb0:	2800      	cmp	r0, #0
 802fcb2:	d095      	beq.n	802fbe0 <_strtod_l+0xa10>
 802fcb4:	e4da      	b.n	802f66c <_strtod_l+0x49c>
 802fcb6:	9b04      	ldr	r3, [sp, #16]
 802fcb8:	b333      	cbz	r3, 802fd08 <_strtod_l+0xb38>
 802fcba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802fcbc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 802fcc0:	d822      	bhi.n	802fd08 <_strtod_l+0xb38>
 802fcc2:	a331      	add	r3, pc, #196	; (adr r3, 802fd88 <_strtod_l+0xbb8>)
 802fcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fcc8:	4630      	mov	r0, r6
 802fcca:	4639      	mov	r1, r7
 802fccc:	f7e0 ff28 	bl	8010b20 <__aeabi_dcmple>
 802fcd0:	b1a0      	cbz	r0, 802fcfc <_strtod_l+0xb2c>
 802fcd2:	4639      	mov	r1, r7
 802fcd4:	4630      	mov	r0, r6
 802fcd6:	f7e0 ff7f 	bl	8010bd8 <__aeabi_d2uiz>
 802fcda:	2801      	cmp	r0, #1
 802fcdc:	bf38      	it	cc
 802fcde:	2001      	movcc	r0, #1
 802fce0:	f7e0 fc28 	bl	8010534 <__aeabi_ui2d>
 802fce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802fce6:	4606      	mov	r6, r0
 802fce8:	460f      	mov	r7, r1
 802fcea:	bb23      	cbnz	r3, 802fd36 <_strtod_l+0xb66>
 802fcec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802fcf0:	9010      	str	r0, [sp, #64]	; 0x40
 802fcf2:	9311      	str	r3, [sp, #68]	; 0x44
 802fcf4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 802fcf8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 802fcfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802fcfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802fd00:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 802fd04:	1a9b      	subs	r3, r3, r2
 802fd06:	930f      	str	r3, [sp, #60]	; 0x3c
 802fd08:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 802fd0c:	eeb0 0a48 	vmov.f32	s0, s16
 802fd10:	eef0 0a68 	vmov.f32	s1, s17
 802fd14:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 802fd18:	f7ff f8fc 	bl	802ef14 <__ulp>
 802fd1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 802fd20:	ec53 2b10 	vmov	r2, r3, d0
 802fd24:	f7e0 fc80 	bl	8010628 <__aeabi_dmul>
 802fd28:	ec53 2b18 	vmov	r2, r3, d8
 802fd2c:	f7e0 fac6 	bl	80102bc <__adddf3>
 802fd30:	4680      	mov	r8, r0
 802fd32:	4689      	mov	r9, r1
 802fd34:	e78d      	b.n	802fc52 <_strtod_l+0xa82>
 802fd36:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 802fd3a:	e7db      	b.n	802fcf4 <_strtod_l+0xb24>
 802fd3c:	a314      	add	r3, pc, #80	; (adr r3, 802fd90 <_strtod_l+0xbc0>)
 802fd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fd42:	f7e0 fee3 	bl	8010b0c <__aeabi_dcmplt>
 802fd46:	e7b3      	b.n	802fcb0 <_strtod_l+0xae0>
 802fd48:	2300      	movs	r3, #0
 802fd4a:	930a      	str	r3, [sp, #40]	; 0x28
 802fd4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802fd4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802fd50:	6013      	str	r3, [r2, #0]
 802fd52:	f7ff ba7c 	b.w	802f24e <_strtod_l+0x7e>
 802fd56:	2a65      	cmp	r2, #101	; 0x65
 802fd58:	f43f ab75 	beq.w	802f446 <_strtod_l+0x276>
 802fd5c:	2a45      	cmp	r2, #69	; 0x45
 802fd5e:	f43f ab72 	beq.w	802f446 <_strtod_l+0x276>
 802fd62:	2301      	movs	r3, #1
 802fd64:	f7ff bbaa 	b.w	802f4bc <_strtod_l+0x2ec>
 802fd68:	00000000 	.word	0x00000000
 802fd6c:	bff00000 	.word	0xbff00000
 802fd70:	00000000 	.word	0x00000000
 802fd74:	3ff00000 	.word	0x3ff00000
 802fd78:	94a03595 	.word	0x94a03595
 802fd7c:	3fdfffff 	.word	0x3fdfffff
 802fd80:	35afe535 	.word	0x35afe535
 802fd84:	3fe00000 	.word	0x3fe00000
 802fd88:	ffc00000 	.word	0xffc00000
 802fd8c:	41dfffff 	.word	0x41dfffff
 802fd90:	94a03595 	.word	0x94a03595
 802fd94:	3fcfffff 	.word	0x3fcfffff
 802fd98:	3ff00000 	.word	0x3ff00000
 802fd9c:	3fe00000 	.word	0x3fe00000
 802fda0:	7ff00000 	.word	0x7ff00000
 802fda4:	7fe00000 	.word	0x7fe00000
 802fda8:	7c9fffff 	.word	0x7c9fffff
 802fdac:	7fefffff 	.word	0x7fefffff

0802fdb0 <_strtod_r>:
 802fdb0:	4b01      	ldr	r3, [pc, #4]	; (802fdb8 <_strtod_r+0x8>)
 802fdb2:	f7ff ba0d 	b.w	802f1d0 <_strtod_l>
 802fdb6:	bf00      	nop
 802fdb8:	2000018c 	.word	0x2000018c

0802fdbc <_strtol_l.constprop.0>:
 802fdbc:	2b01      	cmp	r3, #1
 802fdbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802fdc2:	d001      	beq.n	802fdc8 <_strtol_l.constprop.0+0xc>
 802fdc4:	2b24      	cmp	r3, #36	; 0x24
 802fdc6:	d906      	bls.n	802fdd6 <_strtol_l.constprop.0+0x1a>
 802fdc8:	f7fd fe20 	bl	802da0c <__errno>
 802fdcc:	2316      	movs	r3, #22
 802fdce:	6003      	str	r3, [r0, #0]
 802fdd0:	2000      	movs	r0, #0
 802fdd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802fdd6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 802febc <_strtol_l.constprop.0+0x100>
 802fdda:	460d      	mov	r5, r1
 802fddc:	462e      	mov	r6, r5
 802fdde:	f815 4b01 	ldrb.w	r4, [r5], #1
 802fde2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 802fde6:	f017 0708 	ands.w	r7, r7, #8
 802fdea:	d1f7      	bne.n	802fddc <_strtol_l.constprop.0+0x20>
 802fdec:	2c2d      	cmp	r4, #45	; 0x2d
 802fdee:	d132      	bne.n	802fe56 <_strtol_l.constprop.0+0x9a>
 802fdf0:	782c      	ldrb	r4, [r5, #0]
 802fdf2:	2701      	movs	r7, #1
 802fdf4:	1cb5      	adds	r5, r6, #2
 802fdf6:	2b00      	cmp	r3, #0
 802fdf8:	d05b      	beq.n	802feb2 <_strtol_l.constprop.0+0xf6>
 802fdfa:	2b10      	cmp	r3, #16
 802fdfc:	d109      	bne.n	802fe12 <_strtol_l.constprop.0+0x56>
 802fdfe:	2c30      	cmp	r4, #48	; 0x30
 802fe00:	d107      	bne.n	802fe12 <_strtol_l.constprop.0+0x56>
 802fe02:	782c      	ldrb	r4, [r5, #0]
 802fe04:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 802fe08:	2c58      	cmp	r4, #88	; 0x58
 802fe0a:	d14d      	bne.n	802fea8 <_strtol_l.constprop.0+0xec>
 802fe0c:	786c      	ldrb	r4, [r5, #1]
 802fe0e:	2310      	movs	r3, #16
 802fe10:	3502      	adds	r5, #2
 802fe12:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 802fe16:	f108 38ff 	add.w	r8, r8, #4294967295
 802fe1a:	f04f 0e00 	mov.w	lr, #0
 802fe1e:	fbb8 f9f3 	udiv	r9, r8, r3
 802fe22:	4676      	mov	r6, lr
 802fe24:	fb03 8a19 	mls	sl, r3, r9, r8
 802fe28:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 802fe2c:	f1bc 0f09 	cmp.w	ip, #9
 802fe30:	d816      	bhi.n	802fe60 <_strtol_l.constprop.0+0xa4>
 802fe32:	4664      	mov	r4, ip
 802fe34:	42a3      	cmp	r3, r4
 802fe36:	dd24      	ble.n	802fe82 <_strtol_l.constprop.0+0xc6>
 802fe38:	f1be 3fff 	cmp.w	lr, #4294967295
 802fe3c:	d008      	beq.n	802fe50 <_strtol_l.constprop.0+0x94>
 802fe3e:	45b1      	cmp	r9, r6
 802fe40:	d31c      	bcc.n	802fe7c <_strtol_l.constprop.0+0xc0>
 802fe42:	d101      	bne.n	802fe48 <_strtol_l.constprop.0+0x8c>
 802fe44:	45a2      	cmp	sl, r4
 802fe46:	db19      	blt.n	802fe7c <_strtol_l.constprop.0+0xc0>
 802fe48:	fb06 4603 	mla	r6, r6, r3, r4
 802fe4c:	f04f 0e01 	mov.w	lr, #1
 802fe50:	f815 4b01 	ldrb.w	r4, [r5], #1
 802fe54:	e7e8      	b.n	802fe28 <_strtol_l.constprop.0+0x6c>
 802fe56:	2c2b      	cmp	r4, #43	; 0x2b
 802fe58:	bf04      	itt	eq
 802fe5a:	782c      	ldrbeq	r4, [r5, #0]
 802fe5c:	1cb5      	addeq	r5, r6, #2
 802fe5e:	e7ca      	b.n	802fdf6 <_strtol_l.constprop.0+0x3a>
 802fe60:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802fe64:	f1bc 0f19 	cmp.w	ip, #25
 802fe68:	d801      	bhi.n	802fe6e <_strtol_l.constprop.0+0xb2>
 802fe6a:	3c37      	subs	r4, #55	; 0x37
 802fe6c:	e7e2      	b.n	802fe34 <_strtol_l.constprop.0+0x78>
 802fe6e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802fe72:	f1bc 0f19 	cmp.w	ip, #25
 802fe76:	d804      	bhi.n	802fe82 <_strtol_l.constprop.0+0xc6>
 802fe78:	3c57      	subs	r4, #87	; 0x57
 802fe7a:	e7db      	b.n	802fe34 <_strtol_l.constprop.0+0x78>
 802fe7c:	f04f 3eff 	mov.w	lr, #4294967295
 802fe80:	e7e6      	b.n	802fe50 <_strtol_l.constprop.0+0x94>
 802fe82:	f1be 3fff 	cmp.w	lr, #4294967295
 802fe86:	d105      	bne.n	802fe94 <_strtol_l.constprop.0+0xd8>
 802fe88:	2322      	movs	r3, #34	; 0x22
 802fe8a:	6003      	str	r3, [r0, #0]
 802fe8c:	4646      	mov	r6, r8
 802fe8e:	b942      	cbnz	r2, 802fea2 <_strtol_l.constprop.0+0xe6>
 802fe90:	4630      	mov	r0, r6
 802fe92:	e79e      	b.n	802fdd2 <_strtol_l.constprop.0+0x16>
 802fe94:	b107      	cbz	r7, 802fe98 <_strtol_l.constprop.0+0xdc>
 802fe96:	4276      	negs	r6, r6
 802fe98:	2a00      	cmp	r2, #0
 802fe9a:	d0f9      	beq.n	802fe90 <_strtol_l.constprop.0+0xd4>
 802fe9c:	f1be 0f00 	cmp.w	lr, #0
 802fea0:	d000      	beq.n	802fea4 <_strtol_l.constprop.0+0xe8>
 802fea2:	1e69      	subs	r1, r5, #1
 802fea4:	6011      	str	r1, [r2, #0]
 802fea6:	e7f3      	b.n	802fe90 <_strtol_l.constprop.0+0xd4>
 802fea8:	2430      	movs	r4, #48	; 0x30
 802feaa:	2b00      	cmp	r3, #0
 802feac:	d1b1      	bne.n	802fe12 <_strtol_l.constprop.0+0x56>
 802feae:	2308      	movs	r3, #8
 802feb0:	e7af      	b.n	802fe12 <_strtol_l.constprop.0+0x56>
 802feb2:	2c30      	cmp	r4, #48	; 0x30
 802feb4:	d0a5      	beq.n	802fe02 <_strtol_l.constprop.0+0x46>
 802feb6:	230a      	movs	r3, #10
 802feb8:	e7ab      	b.n	802fe12 <_strtol_l.constprop.0+0x56>
 802feba:	bf00      	nop
 802febc:	08034af1 	.word	0x08034af1

0802fec0 <_strtol_r>:
 802fec0:	f7ff bf7c 	b.w	802fdbc <_strtol_l.constprop.0>

0802fec4 <__ssputs_r>:
 802fec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802fec8:	688e      	ldr	r6, [r1, #8]
 802feca:	461f      	mov	r7, r3
 802fecc:	42be      	cmp	r6, r7
 802fece:	680b      	ldr	r3, [r1, #0]
 802fed0:	4682      	mov	sl, r0
 802fed2:	460c      	mov	r4, r1
 802fed4:	4690      	mov	r8, r2
 802fed6:	d82c      	bhi.n	802ff32 <__ssputs_r+0x6e>
 802fed8:	898a      	ldrh	r2, [r1, #12]
 802feda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802fede:	d026      	beq.n	802ff2e <__ssputs_r+0x6a>
 802fee0:	6965      	ldr	r5, [r4, #20]
 802fee2:	6909      	ldr	r1, [r1, #16]
 802fee4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802fee8:	eba3 0901 	sub.w	r9, r3, r1
 802feec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802fef0:	1c7b      	adds	r3, r7, #1
 802fef2:	444b      	add	r3, r9
 802fef4:	106d      	asrs	r5, r5, #1
 802fef6:	429d      	cmp	r5, r3
 802fef8:	bf38      	it	cc
 802fefa:	461d      	movcc	r5, r3
 802fefc:	0553      	lsls	r3, r2, #21
 802fefe:	d527      	bpl.n	802ff50 <__ssputs_r+0x8c>
 802ff00:	4629      	mov	r1, r5
 802ff02:	f7fc fa77 	bl	802c3f4 <_malloc_r>
 802ff06:	4606      	mov	r6, r0
 802ff08:	b360      	cbz	r0, 802ff64 <__ssputs_r+0xa0>
 802ff0a:	6921      	ldr	r1, [r4, #16]
 802ff0c:	464a      	mov	r2, r9
 802ff0e:	f7fd fdb2 	bl	802da76 <memcpy>
 802ff12:	89a3      	ldrh	r3, [r4, #12]
 802ff14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802ff18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802ff1c:	81a3      	strh	r3, [r4, #12]
 802ff1e:	6126      	str	r6, [r4, #16]
 802ff20:	6165      	str	r5, [r4, #20]
 802ff22:	444e      	add	r6, r9
 802ff24:	eba5 0509 	sub.w	r5, r5, r9
 802ff28:	6026      	str	r6, [r4, #0]
 802ff2a:	60a5      	str	r5, [r4, #8]
 802ff2c:	463e      	mov	r6, r7
 802ff2e:	42be      	cmp	r6, r7
 802ff30:	d900      	bls.n	802ff34 <__ssputs_r+0x70>
 802ff32:	463e      	mov	r6, r7
 802ff34:	6820      	ldr	r0, [r4, #0]
 802ff36:	4632      	mov	r2, r6
 802ff38:	4641      	mov	r1, r8
 802ff3a:	f7fd fbad 	bl	802d698 <memmove>
 802ff3e:	68a3      	ldr	r3, [r4, #8]
 802ff40:	1b9b      	subs	r3, r3, r6
 802ff42:	60a3      	str	r3, [r4, #8]
 802ff44:	6823      	ldr	r3, [r4, #0]
 802ff46:	4433      	add	r3, r6
 802ff48:	6023      	str	r3, [r4, #0]
 802ff4a:	2000      	movs	r0, #0
 802ff4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ff50:	462a      	mov	r2, r5
 802ff52:	f001 face 	bl	80314f2 <_realloc_r>
 802ff56:	4606      	mov	r6, r0
 802ff58:	2800      	cmp	r0, #0
 802ff5a:	d1e0      	bne.n	802ff1e <__ssputs_r+0x5a>
 802ff5c:	6921      	ldr	r1, [r4, #16]
 802ff5e:	4650      	mov	r0, sl
 802ff60:	f7fe fc20 	bl	802e7a4 <_free_r>
 802ff64:	230c      	movs	r3, #12
 802ff66:	f8ca 3000 	str.w	r3, [sl]
 802ff6a:	89a3      	ldrh	r3, [r4, #12]
 802ff6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ff70:	81a3      	strh	r3, [r4, #12]
 802ff72:	f04f 30ff 	mov.w	r0, #4294967295
 802ff76:	e7e9      	b.n	802ff4c <__ssputs_r+0x88>

0802ff78 <_svfiprintf_r>:
 802ff78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ff7c:	4698      	mov	r8, r3
 802ff7e:	898b      	ldrh	r3, [r1, #12]
 802ff80:	061b      	lsls	r3, r3, #24
 802ff82:	b09d      	sub	sp, #116	; 0x74
 802ff84:	4607      	mov	r7, r0
 802ff86:	460d      	mov	r5, r1
 802ff88:	4614      	mov	r4, r2
 802ff8a:	d50e      	bpl.n	802ffaa <_svfiprintf_r+0x32>
 802ff8c:	690b      	ldr	r3, [r1, #16]
 802ff8e:	b963      	cbnz	r3, 802ffaa <_svfiprintf_r+0x32>
 802ff90:	2140      	movs	r1, #64	; 0x40
 802ff92:	f7fc fa2f 	bl	802c3f4 <_malloc_r>
 802ff96:	6028      	str	r0, [r5, #0]
 802ff98:	6128      	str	r0, [r5, #16]
 802ff9a:	b920      	cbnz	r0, 802ffa6 <_svfiprintf_r+0x2e>
 802ff9c:	230c      	movs	r3, #12
 802ff9e:	603b      	str	r3, [r7, #0]
 802ffa0:	f04f 30ff 	mov.w	r0, #4294967295
 802ffa4:	e0d0      	b.n	8030148 <_svfiprintf_r+0x1d0>
 802ffa6:	2340      	movs	r3, #64	; 0x40
 802ffa8:	616b      	str	r3, [r5, #20]
 802ffaa:	2300      	movs	r3, #0
 802ffac:	9309      	str	r3, [sp, #36]	; 0x24
 802ffae:	2320      	movs	r3, #32
 802ffb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802ffb4:	f8cd 800c 	str.w	r8, [sp, #12]
 802ffb8:	2330      	movs	r3, #48	; 0x30
 802ffba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8030160 <_svfiprintf_r+0x1e8>
 802ffbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802ffc2:	f04f 0901 	mov.w	r9, #1
 802ffc6:	4623      	mov	r3, r4
 802ffc8:	469a      	mov	sl, r3
 802ffca:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ffce:	b10a      	cbz	r2, 802ffd4 <_svfiprintf_r+0x5c>
 802ffd0:	2a25      	cmp	r2, #37	; 0x25
 802ffd2:	d1f9      	bne.n	802ffc8 <_svfiprintf_r+0x50>
 802ffd4:	ebba 0b04 	subs.w	fp, sl, r4
 802ffd8:	d00b      	beq.n	802fff2 <_svfiprintf_r+0x7a>
 802ffda:	465b      	mov	r3, fp
 802ffdc:	4622      	mov	r2, r4
 802ffde:	4629      	mov	r1, r5
 802ffe0:	4638      	mov	r0, r7
 802ffe2:	f7ff ff6f 	bl	802fec4 <__ssputs_r>
 802ffe6:	3001      	adds	r0, #1
 802ffe8:	f000 80a9 	beq.w	803013e <_svfiprintf_r+0x1c6>
 802ffec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802ffee:	445a      	add	r2, fp
 802fff0:	9209      	str	r2, [sp, #36]	; 0x24
 802fff2:	f89a 3000 	ldrb.w	r3, [sl]
 802fff6:	2b00      	cmp	r3, #0
 802fff8:	f000 80a1 	beq.w	803013e <_svfiprintf_r+0x1c6>
 802fffc:	2300      	movs	r3, #0
 802fffe:	f04f 32ff 	mov.w	r2, #4294967295
 8030002:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8030006:	f10a 0a01 	add.w	sl, sl, #1
 803000a:	9304      	str	r3, [sp, #16]
 803000c:	9307      	str	r3, [sp, #28]
 803000e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8030012:	931a      	str	r3, [sp, #104]	; 0x68
 8030014:	4654      	mov	r4, sl
 8030016:	2205      	movs	r2, #5
 8030018:	f814 1b01 	ldrb.w	r1, [r4], #1
 803001c:	4850      	ldr	r0, [pc, #320]	; (8030160 <_svfiprintf_r+0x1e8>)
 803001e:	f7e0 f8ef 	bl	8010200 <memchr>
 8030022:	9a04      	ldr	r2, [sp, #16]
 8030024:	b9d8      	cbnz	r0, 803005e <_svfiprintf_r+0xe6>
 8030026:	06d0      	lsls	r0, r2, #27
 8030028:	bf44      	itt	mi
 803002a:	2320      	movmi	r3, #32
 803002c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8030030:	0711      	lsls	r1, r2, #28
 8030032:	bf44      	itt	mi
 8030034:	232b      	movmi	r3, #43	; 0x2b
 8030036:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803003a:	f89a 3000 	ldrb.w	r3, [sl]
 803003e:	2b2a      	cmp	r3, #42	; 0x2a
 8030040:	d015      	beq.n	803006e <_svfiprintf_r+0xf6>
 8030042:	9a07      	ldr	r2, [sp, #28]
 8030044:	4654      	mov	r4, sl
 8030046:	2000      	movs	r0, #0
 8030048:	f04f 0c0a 	mov.w	ip, #10
 803004c:	4621      	mov	r1, r4
 803004e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8030052:	3b30      	subs	r3, #48	; 0x30
 8030054:	2b09      	cmp	r3, #9
 8030056:	d94d      	bls.n	80300f4 <_svfiprintf_r+0x17c>
 8030058:	b1b0      	cbz	r0, 8030088 <_svfiprintf_r+0x110>
 803005a:	9207      	str	r2, [sp, #28]
 803005c:	e014      	b.n	8030088 <_svfiprintf_r+0x110>
 803005e:	eba0 0308 	sub.w	r3, r0, r8
 8030062:	fa09 f303 	lsl.w	r3, r9, r3
 8030066:	4313      	orrs	r3, r2
 8030068:	9304      	str	r3, [sp, #16]
 803006a:	46a2      	mov	sl, r4
 803006c:	e7d2      	b.n	8030014 <_svfiprintf_r+0x9c>
 803006e:	9b03      	ldr	r3, [sp, #12]
 8030070:	1d19      	adds	r1, r3, #4
 8030072:	681b      	ldr	r3, [r3, #0]
 8030074:	9103      	str	r1, [sp, #12]
 8030076:	2b00      	cmp	r3, #0
 8030078:	bfbb      	ittet	lt
 803007a:	425b      	neglt	r3, r3
 803007c:	f042 0202 	orrlt.w	r2, r2, #2
 8030080:	9307      	strge	r3, [sp, #28]
 8030082:	9307      	strlt	r3, [sp, #28]
 8030084:	bfb8      	it	lt
 8030086:	9204      	strlt	r2, [sp, #16]
 8030088:	7823      	ldrb	r3, [r4, #0]
 803008a:	2b2e      	cmp	r3, #46	; 0x2e
 803008c:	d10c      	bne.n	80300a8 <_svfiprintf_r+0x130>
 803008e:	7863      	ldrb	r3, [r4, #1]
 8030090:	2b2a      	cmp	r3, #42	; 0x2a
 8030092:	d134      	bne.n	80300fe <_svfiprintf_r+0x186>
 8030094:	9b03      	ldr	r3, [sp, #12]
 8030096:	1d1a      	adds	r2, r3, #4
 8030098:	681b      	ldr	r3, [r3, #0]
 803009a:	9203      	str	r2, [sp, #12]
 803009c:	2b00      	cmp	r3, #0
 803009e:	bfb8      	it	lt
 80300a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80300a4:	3402      	adds	r4, #2
 80300a6:	9305      	str	r3, [sp, #20]
 80300a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8030170 <_svfiprintf_r+0x1f8>
 80300ac:	7821      	ldrb	r1, [r4, #0]
 80300ae:	2203      	movs	r2, #3
 80300b0:	4650      	mov	r0, sl
 80300b2:	f7e0 f8a5 	bl	8010200 <memchr>
 80300b6:	b138      	cbz	r0, 80300c8 <_svfiprintf_r+0x150>
 80300b8:	9b04      	ldr	r3, [sp, #16]
 80300ba:	eba0 000a 	sub.w	r0, r0, sl
 80300be:	2240      	movs	r2, #64	; 0x40
 80300c0:	4082      	lsls	r2, r0
 80300c2:	4313      	orrs	r3, r2
 80300c4:	3401      	adds	r4, #1
 80300c6:	9304      	str	r3, [sp, #16]
 80300c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80300cc:	4825      	ldr	r0, [pc, #148]	; (8030164 <_svfiprintf_r+0x1ec>)
 80300ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80300d2:	2206      	movs	r2, #6
 80300d4:	f7e0 f894 	bl	8010200 <memchr>
 80300d8:	2800      	cmp	r0, #0
 80300da:	d038      	beq.n	803014e <_svfiprintf_r+0x1d6>
 80300dc:	4b22      	ldr	r3, [pc, #136]	; (8030168 <_svfiprintf_r+0x1f0>)
 80300de:	bb1b      	cbnz	r3, 8030128 <_svfiprintf_r+0x1b0>
 80300e0:	9b03      	ldr	r3, [sp, #12]
 80300e2:	3307      	adds	r3, #7
 80300e4:	f023 0307 	bic.w	r3, r3, #7
 80300e8:	3308      	adds	r3, #8
 80300ea:	9303      	str	r3, [sp, #12]
 80300ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80300ee:	4433      	add	r3, r6
 80300f0:	9309      	str	r3, [sp, #36]	; 0x24
 80300f2:	e768      	b.n	802ffc6 <_svfiprintf_r+0x4e>
 80300f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80300f8:	460c      	mov	r4, r1
 80300fa:	2001      	movs	r0, #1
 80300fc:	e7a6      	b.n	803004c <_svfiprintf_r+0xd4>
 80300fe:	2300      	movs	r3, #0
 8030100:	3401      	adds	r4, #1
 8030102:	9305      	str	r3, [sp, #20]
 8030104:	4619      	mov	r1, r3
 8030106:	f04f 0c0a 	mov.w	ip, #10
 803010a:	4620      	mov	r0, r4
 803010c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8030110:	3a30      	subs	r2, #48	; 0x30
 8030112:	2a09      	cmp	r2, #9
 8030114:	d903      	bls.n	803011e <_svfiprintf_r+0x1a6>
 8030116:	2b00      	cmp	r3, #0
 8030118:	d0c6      	beq.n	80300a8 <_svfiprintf_r+0x130>
 803011a:	9105      	str	r1, [sp, #20]
 803011c:	e7c4      	b.n	80300a8 <_svfiprintf_r+0x130>
 803011e:	fb0c 2101 	mla	r1, ip, r1, r2
 8030122:	4604      	mov	r4, r0
 8030124:	2301      	movs	r3, #1
 8030126:	e7f0      	b.n	803010a <_svfiprintf_r+0x192>
 8030128:	ab03      	add	r3, sp, #12
 803012a:	9300      	str	r3, [sp, #0]
 803012c:	462a      	mov	r2, r5
 803012e:	4b0f      	ldr	r3, [pc, #60]	; (803016c <_svfiprintf_r+0x1f4>)
 8030130:	a904      	add	r1, sp, #16
 8030132:	4638      	mov	r0, r7
 8030134:	f7fc fa8a 	bl	802c64c <_printf_float>
 8030138:	1c42      	adds	r2, r0, #1
 803013a:	4606      	mov	r6, r0
 803013c:	d1d6      	bne.n	80300ec <_svfiprintf_r+0x174>
 803013e:	89ab      	ldrh	r3, [r5, #12]
 8030140:	065b      	lsls	r3, r3, #25
 8030142:	f53f af2d 	bmi.w	802ffa0 <_svfiprintf_r+0x28>
 8030146:	9809      	ldr	r0, [sp, #36]	; 0x24
 8030148:	b01d      	add	sp, #116	; 0x74
 803014a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803014e:	ab03      	add	r3, sp, #12
 8030150:	9300      	str	r3, [sp, #0]
 8030152:	462a      	mov	r2, r5
 8030154:	4b05      	ldr	r3, [pc, #20]	; (803016c <_svfiprintf_r+0x1f4>)
 8030156:	a904      	add	r1, sp, #16
 8030158:	4638      	mov	r0, r7
 803015a:	f7fc fd1b 	bl	802cb94 <_printf_i>
 803015e:	e7eb      	b.n	8030138 <_svfiprintf_r+0x1c0>
 8030160:	08034bf1 	.word	0x08034bf1
 8030164:	08034bfb 	.word	0x08034bfb
 8030168:	0802c64d 	.word	0x0802c64d
 803016c:	0802fec5 	.word	0x0802fec5
 8030170:	08034bf7 	.word	0x08034bf7

08030174 <_sungetc_r>:
 8030174:	b538      	push	{r3, r4, r5, lr}
 8030176:	1c4b      	adds	r3, r1, #1
 8030178:	4614      	mov	r4, r2
 803017a:	d103      	bne.n	8030184 <_sungetc_r+0x10>
 803017c:	f04f 35ff 	mov.w	r5, #4294967295
 8030180:	4628      	mov	r0, r5
 8030182:	bd38      	pop	{r3, r4, r5, pc}
 8030184:	8993      	ldrh	r3, [r2, #12]
 8030186:	f023 0320 	bic.w	r3, r3, #32
 803018a:	8193      	strh	r3, [r2, #12]
 803018c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 803018e:	6852      	ldr	r2, [r2, #4]
 8030190:	b2cd      	uxtb	r5, r1
 8030192:	b18b      	cbz	r3, 80301b8 <_sungetc_r+0x44>
 8030194:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8030196:	4293      	cmp	r3, r2
 8030198:	dd08      	ble.n	80301ac <_sungetc_r+0x38>
 803019a:	6823      	ldr	r3, [r4, #0]
 803019c:	1e5a      	subs	r2, r3, #1
 803019e:	6022      	str	r2, [r4, #0]
 80301a0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80301a4:	6863      	ldr	r3, [r4, #4]
 80301a6:	3301      	adds	r3, #1
 80301a8:	6063      	str	r3, [r4, #4]
 80301aa:	e7e9      	b.n	8030180 <_sungetc_r+0xc>
 80301ac:	4621      	mov	r1, r4
 80301ae:	f000 fd8e 	bl	8030cce <__submore>
 80301b2:	2800      	cmp	r0, #0
 80301b4:	d0f1      	beq.n	803019a <_sungetc_r+0x26>
 80301b6:	e7e1      	b.n	803017c <_sungetc_r+0x8>
 80301b8:	6921      	ldr	r1, [r4, #16]
 80301ba:	6823      	ldr	r3, [r4, #0]
 80301bc:	b151      	cbz	r1, 80301d4 <_sungetc_r+0x60>
 80301be:	4299      	cmp	r1, r3
 80301c0:	d208      	bcs.n	80301d4 <_sungetc_r+0x60>
 80301c2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80301c6:	42a9      	cmp	r1, r5
 80301c8:	d104      	bne.n	80301d4 <_sungetc_r+0x60>
 80301ca:	3b01      	subs	r3, #1
 80301cc:	3201      	adds	r2, #1
 80301ce:	6023      	str	r3, [r4, #0]
 80301d0:	6062      	str	r2, [r4, #4]
 80301d2:	e7d5      	b.n	8030180 <_sungetc_r+0xc>
 80301d4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80301d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80301dc:	6363      	str	r3, [r4, #52]	; 0x34
 80301de:	2303      	movs	r3, #3
 80301e0:	63a3      	str	r3, [r4, #56]	; 0x38
 80301e2:	4623      	mov	r3, r4
 80301e4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80301e8:	6023      	str	r3, [r4, #0]
 80301ea:	2301      	movs	r3, #1
 80301ec:	e7dc      	b.n	80301a8 <_sungetc_r+0x34>

080301ee <__ssrefill_r>:
 80301ee:	b510      	push	{r4, lr}
 80301f0:	460c      	mov	r4, r1
 80301f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80301f4:	b169      	cbz	r1, 8030212 <__ssrefill_r+0x24>
 80301f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80301fa:	4299      	cmp	r1, r3
 80301fc:	d001      	beq.n	8030202 <__ssrefill_r+0x14>
 80301fe:	f7fe fad1 	bl	802e7a4 <_free_r>
 8030202:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8030204:	6063      	str	r3, [r4, #4]
 8030206:	2000      	movs	r0, #0
 8030208:	6360      	str	r0, [r4, #52]	; 0x34
 803020a:	b113      	cbz	r3, 8030212 <__ssrefill_r+0x24>
 803020c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 803020e:	6023      	str	r3, [r4, #0]
 8030210:	bd10      	pop	{r4, pc}
 8030212:	6923      	ldr	r3, [r4, #16]
 8030214:	6023      	str	r3, [r4, #0]
 8030216:	2300      	movs	r3, #0
 8030218:	6063      	str	r3, [r4, #4]
 803021a:	89a3      	ldrh	r3, [r4, #12]
 803021c:	f043 0320 	orr.w	r3, r3, #32
 8030220:	81a3      	strh	r3, [r4, #12]
 8030222:	f04f 30ff 	mov.w	r0, #4294967295
 8030226:	e7f3      	b.n	8030210 <__ssrefill_r+0x22>

08030228 <__ssvfiscanf_r>:
 8030228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803022c:	460c      	mov	r4, r1
 803022e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8030232:	2100      	movs	r1, #0
 8030234:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8030238:	49a6      	ldr	r1, [pc, #664]	; (80304d4 <__ssvfiscanf_r+0x2ac>)
 803023a:	91a0      	str	r1, [sp, #640]	; 0x280
 803023c:	f10d 0804 	add.w	r8, sp, #4
 8030240:	49a5      	ldr	r1, [pc, #660]	; (80304d8 <__ssvfiscanf_r+0x2b0>)
 8030242:	4fa6      	ldr	r7, [pc, #664]	; (80304dc <__ssvfiscanf_r+0x2b4>)
 8030244:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80304e0 <__ssvfiscanf_r+0x2b8>
 8030248:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 803024c:	4606      	mov	r6, r0
 803024e:	91a1      	str	r1, [sp, #644]	; 0x284
 8030250:	9300      	str	r3, [sp, #0]
 8030252:	7813      	ldrb	r3, [r2, #0]
 8030254:	2b00      	cmp	r3, #0
 8030256:	f000 815a 	beq.w	803050e <__ssvfiscanf_r+0x2e6>
 803025a:	5cf9      	ldrb	r1, [r7, r3]
 803025c:	f011 0108 	ands.w	r1, r1, #8
 8030260:	f102 0501 	add.w	r5, r2, #1
 8030264:	d019      	beq.n	803029a <__ssvfiscanf_r+0x72>
 8030266:	6863      	ldr	r3, [r4, #4]
 8030268:	2b00      	cmp	r3, #0
 803026a:	dd0f      	ble.n	803028c <__ssvfiscanf_r+0x64>
 803026c:	6823      	ldr	r3, [r4, #0]
 803026e:	781a      	ldrb	r2, [r3, #0]
 8030270:	5cba      	ldrb	r2, [r7, r2]
 8030272:	0712      	lsls	r2, r2, #28
 8030274:	d401      	bmi.n	803027a <__ssvfiscanf_r+0x52>
 8030276:	462a      	mov	r2, r5
 8030278:	e7eb      	b.n	8030252 <__ssvfiscanf_r+0x2a>
 803027a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 803027c:	3201      	adds	r2, #1
 803027e:	9245      	str	r2, [sp, #276]	; 0x114
 8030280:	6862      	ldr	r2, [r4, #4]
 8030282:	3301      	adds	r3, #1
 8030284:	3a01      	subs	r2, #1
 8030286:	6062      	str	r2, [r4, #4]
 8030288:	6023      	str	r3, [r4, #0]
 803028a:	e7ec      	b.n	8030266 <__ssvfiscanf_r+0x3e>
 803028c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 803028e:	4621      	mov	r1, r4
 8030290:	4630      	mov	r0, r6
 8030292:	4798      	blx	r3
 8030294:	2800      	cmp	r0, #0
 8030296:	d0e9      	beq.n	803026c <__ssvfiscanf_r+0x44>
 8030298:	e7ed      	b.n	8030276 <__ssvfiscanf_r+0x4e>
 803029a:	2b25      	cmp	r3, #37	; 0x25
 803029c:	d012      	beq.n	80302c4 <__ssvfiscanf_r+0x9c>
 803029e:	469a      	mov	sl, r3
 80302a0:	6863      	ldr	r3, [r4, #4]
 80302a2:	2b00      	cmp	r3, #0
 80302a4:	f340 8091 	ble.w	80303ca <__ssvfiscanf_r+0x1a2>
 80302a8:	6822      	ldr	r2, [r4, #0]
 80302aa:	7813      	ldrb	r3, [r2, #0]
 80302ac:	4553      	cmp	r3, sl
 80302ae:	f040 812e 	bne.w	803050e <__ssvfiscanf_r+0x2e6>
 80302b2:	6863      	ldr	r3, [r4, #4]
 80302b4:	3b01      	subs	r3, #1
 80302b6:	6063      	str	r3, [r4, #4]
 80302b8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80302ba:	3201      	adds	r2, #1
 80302bc:	3301      	adds	r3, #1
 80302be:	6022      	str	r2, [r4, #0]
 80302c0:	9345      	str	r3, [sp, #276]	; 0x114
 80302c2:	e7d8      	b.n	8030276 <__ssvfiscanf_r+0x4e>
 80302c4:	9141      	str	r1, [sp, #260]	; 0x104
 80302c6:	9143      	str	r1, [sp, #268]	; 0x10c
 80302c8:	7853      	ldrb	r3, [r2, #1]
 80302ca:	2b2a      	cmp	r3, #42	; 0x2a
 80302cc:	bf02      	ittt	eq
 80302ce:	2310      	moveq	r3, #16
 80302d0:	1c95      	addeq	r5, r2, #2
 80302d2:	9341      	streq	r3, [sp, #260]	; 0x104
 80302d4:	220a      	movs	r2, #10
 80302d6:	46aa      	mov	sl, r5
 80302d8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80302dc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80302e0:	2b09      	cmp	r3, #9
 80302e2:	d91c      	bls.n	803031e <__ssvfiscanf_r+0xf6>
 80302e4:	487e      	ldr	r0, [pc, #504]	; (80304e0 <__ssvfiscanf_r+0x2b8>)
 80302e6:	2203      	movs	r2, #3
 80302e8:	f7df ff8a 	bl	8010200 <memchr>
 80302ec:	b138      	cbz	r0, 80302fe <__ssvfiscanf_r+0xd6>
 80302ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80302f0:	eba0 0009 	sub.w	r0, r0, r9
 80302f4:	2301      	movs	r3, #1
 80302f6:	4083      	lsls	r3, r0
 80302f8:	4313      	orrs	r3, r2
 80302fa:	9341      	str	r3, [sp, #260]	; 0x104
 80302fc:	4655      	mov	r5, sl
 80302fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8030302:	2b78      	cmp	r3, #120	; 0x78
 8030304:	d806      	bhi.n	8030314 <__ssvfiscanf_r+0xec>
 8030306:	2b57      	cmp	r3, #87	; 0x57
 8030308:	d810      	bhi.n	803032c <__ssvfiscanf_r+0x104>
 803030a:	2b25      	cmp	r3, #37	; 0x25
 803030c:	d0c7      	beq.n	803029e <__ssvfiscanf_r+0x76>
 803030e:	d857      	bhi.n	80303c0 <__ssvfiscanf_r+0x198>
 8030310:	2b00      	cmp	r3, #0
 8030312:	d065      	beq.n	80303e0 <__ssvfiscanf_r+0x1b8>
 8030314:	2303      	movs	r3, #3
 8030316:	9347      	str	r3, [sp, #284]	; 0x11c
 8030318:	230a      	movs	r3, #10
 803031a:	9342      	str	r3, [sp, #264]	; 0x108
 803031c:	e076      	b.n	803040c <__ssvfiscanf_r+0x1e4>
 803031e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8030320:	fb02 1103 	mla	r1, r2, r3, r1
 8030324:	3930      	subs	r1, #48	; 0x30
 8030326:	9143      	str	r1, [sp, #268]	; 0x10c
 8030328:	4655      	mov	r5, sl
 803032a:	e7d4      	b.n	80302d6 <__ssvfiscanf_r+0xae>
 803032c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8030330:	2a20      	cmp	r2, #32
 8030332:	d8ef      	bhi.n	8030314 <__ssvfiscanf_r+0xec>
 8030334:	a101      	add	r1, pc, #4	; (adr r1, 803033c <__ssvfiscanf_r+0x114>)
 8030336:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 803033a:	bf00      	nop
 803033c:	080303ef 	.word	0x080303ef
 8030340:	08030315 	.word	0x08030315
 8030344:	08030315 	.word	0x08030315
 8030348:	0803044d 	.word	0x0803044d
 803034c:	08030315 	.word	0x08030315
 8030350:	08030315 	.word	0x08030315
 8030354:	08030315 	.word	0x08030315
 8030358:	08030315 	.word	0x08030315
 803035c:	08030315 	.word	0x08030315
 8030360:	08030315 	.word	0x08030315
 8030364:	08030315 	.word	0x08030315
 8030368:	08030463 	.word	0x08030463
 803036c:	08030449 	.word	0x08030449
 8030370:	080303c7 	.word	0x080303c7
 8030374:	080303c7 	.word	0x080303c7
 8030378:	080303c7 	.word	0x080303c7
 803037c:	08030315 	.word	0x08030315
 8030380:	08030405 	.word	0x08030405
 8030384:	08030315 	.word	0x08030315
 8030388:	08030315 	.word	0x08030315
 803038c:	08030315 	.word	0x08030315
 8030390:	08030315 	.word	0x08030315
 8030394:	08030473 	.word	0x08030473
 8030398:	08030441 	.word	0x08030441
 803039c:	080303e7 	.word	0x080303e7
 80303a0:	08030315 	.word	0x08030315
 80303a4:	08030315 	.word	0x08030315
 80303a8:	0803046f 	.word	0x0803046f
 80303ac:	08030315 	.word	0x08030315
 80303b0:	08030449 	.word	0x08030449
 80303b4:	08030315 	.word	0x08030315
 80303b8:	08030315 	.word	0x08030315
 80303bc:	080303ef 	.word	0x080303ef
 80303c0:	3b45      	subs	r3, #69	; 0x45
 80303c2:	2b02      	cmp	r3, #2
 80303c4:	d8a6      	bhi.n	8030314 <__ssvfiscanf_r+0xec>
 80303c6:	2305      	movs	r3, #5
 80303c8:	e01f      	b.n	803040a <__ssvfiscanf_r+0x1e2>
 80303ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80303cc:	4621      	mov	r1, r4
 80303ce:	4630      	mov	r0, r6
 80303d0:	4798      	blx	r3
 80303d2:	2800      	cmp	r0, #0
 80303d4:	f43f af68 	beq.w	80302a8 <__ssvfiscanf_r+0x80>
 80303d8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80303da:	2800      	cmp	r0, #0
 80303dc:	f040 808d 	bne.w	80304fa <__ssvfiscanf_r+0x2d2>
 80303e0:	f04f 30ff 	mov.w	r0, #4294967295
 80303e4:	e08f      	b.n	8030506 <__ssvfiscanf_r+0x2de>
 80303e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80303e8:	f042 0220 	orr.w	r2, r2, #32
 80303ec:	9241      	str	r2, [sp, #260]	; 0x104
 80303ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80303f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80303f4:	9241      	str	r2, [sp, #260]	; 0x104
 80303f6:	2210      	movs	r2, #16
 80303f8:	2b6f      	cmp	r3, #111	; 0x6f
 80303fa:	9242      	str	r2, [sp, #264]	; 0x108
 80303fc:	bf34      	ite	cc
 80303fe:	2303      	movcc	r3, #3
 8030400:	2304      	movcs	r3, #4
 8030402:	e002      	b.n	803040a <__ssvfiscanf_r+0x1e2>
 8030404:	2300      	movs	r3, #0
 8030406:	9342      	str	r3, [sp, #264]	; 0x108
 8030408:	2303      	movs	r3, #3
 803040a:	9347      	str	r3, [sp, #284]	; 0x11c
 803040c:	6863      	ldr	r3, [r4, #4]
 803040e:	2b00      	cmp	r3, #0
 8030410:	dd3d      	ble.n	803048e <__ssvfiscanf_r+0x266>
 8030412:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8030414:	0659      	lsls	r1, r3, #25
 8030416:	d404      	bmi.n	8030422 <__ssvfiscanf_r+0x1fa>
 8030418:	6823      	ldr	r3, [r4, #0]
 803041a:	781a      	ldrb	r2, [r3, #0]
 803041c:	5cba      	ldrb	r2, [r7, r2]
 803041e:	0712      	lsls	r2, r2, #28
 8030420:	d43c      	bmi.n	803049c <__ssvfiscanf_r+0x274>
 8030422:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8030424:	2b02      	cmp	r3, #2
 8030426:	dc4b      	bgt.n	80304c0 <__ssvfiscanf_r+0x298>
 8030428:	466b      	mov	r3, sp
 803042a:	4622      	mov	r2, r4
 803042c:	a941      	add	r1, sp, #260	; 0x104
 803042e:	4630      	mov	r0, r6
 8030430:	f000 f9b6 	bl	80307a0 <_scanf_chars>
 8030434:	2801      	cmp	r0, #1
 8030436:	d06a      	beq.n	803050e <__ssvfiscanf_r+0x2e6>
 8030438:	2802      	cmp	r0, #2
 803043a:	f47f af1c 	bne.w	8030276 <__ssvfiscanf_r+0x4e>
 803043e:	e7cb      	b.n	80303d8 <__ssvfiscanf_r+0x1b0>
 8030440:	2308      	movs	r3, #8
 8030442:	9342      	str	r3, [sp, #264]	; 0x108
 8030444:	2304      	movs	r3, #4
 8030446:	e7e0      	b.n	803040a <__ssvfiscanf_r+0x1e2>
 8030448:	220a      	movs	r2, #10
 803044a:	e7d5      	b.n	80303f8 <__ssvfiscanf_r+0x1d0>
 803044c:	4629      	mov	r1, r5
 803044e:	4640      	mov	r0, r8
 8030450:	f000 fc04 	bl	8030c5c <__sccl>
 8030454:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8030456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803045a:	9341      	str	r3, [sp, #260]	; 0x104
 803045c:	4605      	mov	r5, r0
 803045e:	2301      	movs	r3, #1
 8030460:	e7d3      	b.n	803040a <__ssvfiscanf_r+0x1e2>
 8030462:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8030464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030468:	9341      	str	r3, [sp, #260]	; 0x104
 803046a:	2300      	movs	r3, #0
 803046c:	e7cd      	b.n	803040a <__ssvfiscanf_r+0x1e2>
 803046e:	2302      	movs	r3, #2
 8030470:	e7cb      	b.n	803040a <__ssvfiscanf_r+0x1e2>
 8030472:	9841      	ldr	r0, [sp, #260]	; 0x104
 8030474:	06c3      	lsls	r3, r0, #27
 8030476:	f53f aefe 	bmi.w	8030276 <__ssvfiscanf_r+0x4e>
 803047a:	9b00      	ldr	r3, [sp, #0]
 803047c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 803047e:	1d19      	adds	r1, r3, #4
 8030480:	9100      	str	r1, [sp, #0]
 8030482:	681b      	ldr	r3, [r3, #0]
 8030484:	07c0      	lsls	r0, r0, #31
 8030486:	bf4c      	ite	mi
 8030488:	801a      	strhmi	r2, [r3, #0]
 803048a:	601a      	strpl	r2, [r3, #0]
 803048c:	e6f3      	b.n	8030276 <__ssvfiscanf_r+0x4e>
 803048e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8030490:	4621      	mov	r1, r4
 8030492:	4630      	mov	r0, r6
 8030494:	4798      	blx	r3
 8030496:	2800      	cmp	r0, #0
 8030498:	d0bb      	beq.n	8030412 <__ssvfiscanf_r+0x1ea>
 803049a:	e79d      	b.n	80303d8 <__ssvfiscanf_r+0x1b0>
 803049c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 803049e:	3201      	adds	r2, #1
 80304a0:	9245      	str	r2, [sp, #276]	; 0x114
 80304a2:	6862      	ldr	r2, [r4, #4]
 80304a4:	3a01      	subs	r2, #1
 80304a6:	2a00      	cmp	r2, #0
 80304a8:	6062      	str	r2, [r4, #4]
 80304aa:	dd02      	ble.n	80304b2 <__ssvfiscanf_r+0x28a>
 80304ac:	3301      	adds	r3, #1
 80304ae:	6023      	str	r3, [r4, #0]
 80304b0:	e7b2      	b.n	8030418 <__ssvfiscanf_r+0x1f0>
 80304b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80304b4:	4621      	mov	r1, r4
 80304b6:	4630      	mov	r0, r6
 80304b8:	4798      	blx	r3
 80304ba:	2800      	cmp	r0, #0
 80304bc:	d0ac      	beq.n	8030418 <__ssvfiscanf_r+0x1f0>
 80304be:	e78b      	b.n	80303d8 <__ssvfiscanf_r+0x1b0>
 80304c0:	2b04      	cmp	r3, #4
 80304c2:	dc0f      	bgt.n	80304e4 <__ssvfiscanf_r+0x2bc>
 80304c4:	466b      	mov	r3, sp
 80304c6:	4622      	mov	r2, r4
 80304c8:	a941      	add	r1, sp, #260	; 0x104
 80304ca:	4630      	mov	r0, r6
 80304cc:	f000 f9c2 	bl	8030854 <_scanf_i>
 80304d0:	e7b0      	b.n	8030434 <__ssvfiscanf_r+0x20c>
 80304d2:	bf00      	nop
 80304d4:	08030175 	.word	0x08030175
 80304d8:	080301ef 	.word	0x080301ef
 80304dc:	08034af1 	.word	0x08034af1
 80304e0:	08034bf7 	.word	0x08034bf7
 80304e4:	4b0b      	ldr	r3, [pc, #44]	; (8030514 <__ssvfiscanf_r+0x2ec>)
 80304e6:	2b00      	cmp	r3, #0
 80304e8:	f43f aec5 	beq.w	8030276 <__ssvfiscanf_r+0x4e>
 80304ec:	466b      	mov	r3, sp
 80304ee:	4622      	mov	r2, r4
 80304f0:	a941      	add	r1, sp, #260	; 0x104
 80304f2:	4630      	mov	r0, r6
 80304f4:	f7fc fc70 	bl	802cdd8 <_scanf_float>
 80304f8:	e79c      	b.n	8030434 <__ssvfiscanf_r+0x20c>
 80304fa:	89a3      	ldrh	r3, [r4, #12]
 80304fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8030500:	bf18      	it	ne
 8030502:	f04f 30ff 	movne.w	r0, #4294967295
 8030506:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 803050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803050e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8030510:	e7f9      	b.n	8030506 <__ssvfiscanf_r+0x2de>
 8030512:	bf00      	nop
 8030514:	0802cdd9 	.word	0x0802cdd9

08030518 <__sfputc_r>:
 8030518:	6893      	ldr	r3, [r2, #8]
 803051a:	3b01      	subs	r3, #1
 803051c:	2b00      	cmp	r3, #0
 803051e:	b410      	push	{r4}
 8030520:	6093      	str	r3, [r2, #8]
 8030522:	da08      	bge.n	8030536 <__sfputc_r+0x1e>
 8030524:	6994      	ldr	r4, [r2, #24]
 8030526:	42a3      	cmp	r3, r4
 8030528:	db01      	blt.n	803052e <__sfputc_r+0x16>
 803052a:	290a      	cmp	r1, #10
 803052c:	d103      	bne.n	8030536 <__sfputc_r+0x1e>
 803052e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8030532:	f7fd b80c 	b.w	802d54e <__swbuf_r>
 8030536:	6813      	ldr	r3, [r2, #0]
 8030538:	1c58      	adds	r0, r3, #1
 803053a:	6010      	str	r0, [r2, #0]
 803053c:	7019      	strb	r1, [r3, #0]
 803053e:	4608      	mov	r0, r1
 8030540:	f85d 4b04 	ldr.w	r4, [sp], #4
 8030544:	4770      	bx	lr

08030546 <__sfputs_r>:
 8030546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8030548:	4606      	mov	r6, r0
 803054a:	460f      	mov	r7, r1
 803054c:	4614      	mov	r4, r2
 803054e:	18d5      	adds	r5, r2, r3
 8030550:	42ac      	cmp	r4, r5
 8030552:	d101      	bne.n	8030558 <__sfputs_r+0x12>
 8030554:	2000      	movs	r0, #0
 8030556:	e007      	b.n	8030568 <__sfputs_r+0x22>
 8030558:	f814 1b01 	ldrb.w	r1, [r4], #1
 803055c:	463a      	mov	r2, r7
 803055e:	4630      	mov	r0, r6
 8030560:	f7ff ffda 	bl	8030518 <__sfputc_r>
 8030564:	1c43      	adds	r3, r0, #1
 8030566:	d1f3      	bne.n	8030550 <__sfputs_r+0xa>
 8030568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0803056c <_vfiprintf_r>:
 803056c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030570:	460d      	mov	r5, r1
 8030572:	b09d      	sub	sp, #116	; 0x74
 8030574:	4614      	mov	r4, r2
 8030576:	4698      	mov	r8, r3
 8030578:	4606      	mov	r6, r0
 803057a:	b118      	cbz	r0, 8030584 <_vfiprintf_r+0x18>
 803057c:	6a03      	ldr	r3, [r0, #32]
 803057e:	b90b      	cbnz	r3, 8030584 <_vfiprintf_r+0x18>
 8030580:	f7fc fec6 	bl	802d310 <__sinit>
 8030584:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8030586:	07d9      	lsls	r1, r3, #31
 8030588:	d405      	bmi.n	8030596 <_vfiprintf_r+0x2a>
 803058a:	89ab      	ldrh	r3, [r5, #12]
 803058c:	059a      	lsls	r2, r3, #22
 803058e:	d402      	bmi.n	8030596 <_vfiprintf_r+0x2a>
 8030590:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8030592:	f7fd fa66 	bl	802da62 <__retarget_lock_acquire_recursive>
 8030596:	89ab      	ldrh	r3, [r5, #12]
 8030598:	071b      	lsls	r3, r3, #28
 803059a:	d501      	bpl.n	80305a0 <_vfiprintf_r+0x34>
 803059c:	692b      	ldr	r3, [r5, #16]
 803059e:	b99b      	cbnz	r3, 80305c8 <_vfiprintf_r+0x5c>
 80305a0:	4629      	mov	r1, r5
 80305a2:	4630      	mov	r0, r6
 80305a4:	f7fd f810 	bl	802d5c8 <__swsetup_r>
 80305a8:	b170      	cbz	r0, 80305c8 <_vfiprintf_r+0x5c>
 80305aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80305ac:	07dc      	lsls	r4, r3, #31
 80305ae:	d504      	bpl.n	80305ba <_vfiprintf_r+0x4e>
 80305b0:	f04f 30ff 	mov.w	r0, #4294967295
 80305b4:	b01d      	add	sp, #116	; 0x74
 80305b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80305ba:	89ab      	ldrh	r3, [r5, #12]
 80305bc:	0598      	lsls	r0, r3, #22
 80305be:	d4f7      	bmi.n	80305b0 <_vfiprintf_r+0x44>
 80305c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80305c2:	f7fd fa4f 	bl	802da64 <__retarget_lock_release_recursive>
 80305c6:	e7f3      	b.n	80305b0 <_vfiprintf_r+0x44>
 80305c8:	2300      	movs	r3, #0
 80305ca:	9309      	str	r3, [sp, #36]	; 0x24
 80305cc:	2320      	movs	r3, #32
 80305ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80305d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80305d6:	2330      	movs	r3, #48	; 0x30
 80305d8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 803078c <_vfiprintf_r+0x220>
 80305dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80305e0:	f04f 0901 	mov.w	r9, #1
 80305e4:	4623      	mov	r3, r4
 80305e6:	469a      	mov	sl, r3
 80305e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80305ec:	b10a      	cbz	r2, 80305f2 <_vfiprintf_r+0x86>
 80305ee:	2a25      	cmp	r2, #37	; 0x25
 80305f0:	d1f9      	bne.n	80305e6 <_vfiprintf_r+0x7a>
 80305f2:	ebba 0b04 	subs.w	fp, sl, r4
 80305f6:	d00b      	beq.n	8030610 <_vfiprintf_r+0xa4>
 80305f8:	465b      	mov	r3, fp
 80305fa:	4622      	mov	r2, r4
 80305fc:	4629      	mov	r1, r5
 80305fe:	4630      	mov	r0, r6
 8030600:	f7ff ffa1 	bl	8030546 <__sfputs_r>
 8030604:	3001      	adds	r0, #1
 8030606:	f000 80a9 	beq.w	803075c <_vfiprintf_r+0x1f0>
 803060a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803060c:	445a      	add	r2, fp
 803060e:	9209      	str	r2, [sp, #36]	; 0x24
 8030610:	f89a 3000 	ldrb.w	r3, [sl]
 8030614:	2b00      	cmp	r3, #0
 8030616:	f000 80a1 	beq.w	803075c <_vfiprintf_r+0x1f0>
 803061a:	2300      	movs	r3, #0
 803061c:	f04f 32ff 	mov.w	r2, #4294967295
 8030620:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8030624:	f10a 0a01 	add.w	sl, sl, #1
 8030628:	9304      	str	r3, [sp, #16]
 803062a:	9307      	str	r3, [sp, #28]
 803062c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8030630:	931a      	str	r3, [sp, #104]	; 0x68
 8030632:	4654      	mov	r4, sl
 8030634:	2205      	movs	r2, #5
 8030636:	f814 1b01 	ldrb.w	r1, [r4], #1
 803063a:	4854      	ldr	r0, [pc, #336]	; (803078c <_vfiprintf_r+0x220>)
 803063c:	f7df fde0 	bl	8010200 <memchr>
 8030640:	9a04      	ldr	r2, [sp, #16]
 8030642:	b9d8      	cbnz	r0, 803067c <_vfiprintf_r+0x110>
 8030644:	06d1      	lsls	r1, r2, #27
 8030646:	bf44      	itt	mi
 8030648:	2320      	movmi	r3, #32
 803064a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803064e:	0713      	lsls	r3, r2, #28
 8030650:	bf44      	itt	mi
 8030652:	232b      	movmi	r3, #43	; 0x2b
 8030654:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8030658:	f89a 3000 	ldrb.w	r3, [sl]
 803065c:	2b2a      	cmp	r3, #42	; 0x2a
 803065e:	d015      	beq.n	803068c <_vfiprintf_r+0x120>
 8030660:	9a07      	ldr	r2, [sp, #28]
 8030662:	4654      	mov	r4, sl
 8030664:	2000      	movs	r0, #0
 8030666:	f04f 0c0a 	mov.w	ip, #10
 803066a:	4621      	mov	r1, r4
 803066c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8030670:	3b30      	subs	r3, #48	; 0x30
 8030672:	2b09      	cmp	r3, #9
 8030674:	d94d      	bls.n	8030712 <_vfiprintf_r+0x1a6>
 8030676:	b1b0      	cbz	r0, 80306a6 <_vfiprintf_r+0x13a>
 8030678:	9207      	str	r2, [sp, #28]
 803067a:	e014      	b.n	80306a6 <_vfiprintf_r+0x13a>
 803067c:	eba0 0308 	sub.w	r3, r0, r8
 8030680:	fa09 f303 	lsl.w	r3, r9, r3
 8030684:	4313      	orrs	r3, r2
 8030686:	9304      	str	r3, [sp, #16]
 8030688:	46a2      	mov	sl, r4
 803068a:	e7d2      	b.n	8030632 <_vfiprintf_r+0xc6>
 803068c:	9b03      	ldr	r3, [sp, #12]
 803068e:	1d19      	adds	r1, r3, #4
 8030690:	681b      	ldr	r3, [r3, #0]
 8030692:	9103      	str	r1, [sp, #12]
 8030694:	2b00      	cmp	r3, #0
 8030696:	bfbb      	ittet	lt
 8030698:	425b      	neglt	r3, r3
 803069a:	f042 0202 	orrlt.w	r2, r2, #2
 803069e:	9307      	strge	r3, [sp, #28]
 80306a0:	9307      	strlt	r3, [sp, #28]
 80306a2:	bfb8      	it	lt
 80306a4:	9204      	strlt	r2, [sp, #16]
 80306a6:	7823      	ldrb	r3, [r4, #0]
 80306a8:	2b2e      	cmp	r3, #46	; 0x2e
 80306aa:	d10c      	bne.n	80306c6 <_vfiprintf_r+0x15a>
 80306ac:	7863      	ldrb	r3, [r4, #1]
 80306ae:	2b2a      	cmp	r3, #42	; 0x2a
 80306b0:	d134      	bne.n	803071c <_vfiprintf_r+0x1b0>
 80306b2:	9b03      	ldr	r3, [sp, #12]
 80306b4:	1d1a      	adds	r2, r3, #4
 80306b6:	681b      	ldr	r3, [r3, #0]
 80306b8:	9203      	str	r2, [sp, #12]
 80306ba:	2b00      	cmp	r3, #0
 80306bc:	bfb8      	it	lt
 80306be:	f04f 33ff 	movlt.w	r3, #4294967295
 80306c2:	3402      	adds	r4, #2
 80306c4:	9305      	str	r3, [sp, #20]
 80306c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 803079c <_vfiprintf_r+0x230>
 80306ca:	7821      	ldrb	r1, [r4, #0]
 80306cc:	2203      	movs	r2, #3
 80306ce:	4650      	mov	r0, sl
 80306d0:	f7df fd96 	bl	8010200 <memchr>
 80306d4:	b138      	cbz	r0, 80306e6 <_vfiprintf_r+0x17a>
 80306d6:	9b04      	ldr	r3, [sp, #16]
 80306d8:	eba0 000a 	sub.w	r0, r0, sl
 80306dc:	2240      	movs	r2, #64	; 0x40
 80306de:	4082      	lsls	r2, r0
 80306e0:	4313      	orrs	r3, r2
 80306e2:	3401      	adds	r4, #1
 80306e4:	9304      	str	r3, [sp, #16]
 80306e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80306ea:	4829      	ldr	r0, [pc, #164]	; (8030790 <_vfiprintf_r+0x224>)
 80306ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80306f0:	2206      	movs	r2, #6
 80306f2:	f7df fd85 	bl	8010200 <memchr>
 80306f6:	2800      	cmp	r0, #0
 80306f8:	d03f      	beq.n	803077a <_vfiprintf_r+0x20e>
 80306fa:	4b26      	ldr	r3, [pc, #152]	; (8030794 <_vfiprintf_r+0x228>)
 80306fc:	bb1b      	cbnz	r3, 8030746 <_vfiprintf_r+0x1da>
 80306fe:	9b03      	ldr	r3, [sp, #12]
 8030700:	3307      	adds	r3, #7
 8030702:	f023 0307 	bic.w	r3, r3, #7
 8030706:	3308      	adds	r3, #8
 8030708:	9303      	str	r3, [sp, #12]
 803070a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803070c:	443b      	add	r3, r7
 803070e:	9309      	str	r3, [sp, #36]	; 0x24
 8030710:	e768      	b.n	80305e4 <_vfiprintf_r+0x78>
 8030712:	fb0c 3202 	mla	r2, ip, r2, r3
 8030716:	460c      	mov	r4, r1
 8030718:	2001      	movs	r0, #1
 803071a:	e7a6      	b.n	803066a <_vfiprintf_r+0xfe>
 803071c:	2300      	movs	r3, #0
 803071e:	3401      	adds	r4, #1
 8030720:	9305      	str	r3, [sp, #20]
 8030722:	4619      	mov	r1, r3
 8030724:	f04f 0c0a 	mov.w	ip, #10
 8030728:	4620      	mov	r0, r4
 803072a:	f810 2b01 	ldrb.w	r2, [r0], #1
 803072e:	3a30      	subs	r2, #48	; 0x30
 8030730:	2a09      	cmp	r2, #9
 8030732:	d903      	bls.n	803073c <_vfiprintf_r+0x1d0>
 8030734:	2b00      	cmp	r3, #0
 8030736:	d0c6      	beq.n	80306c6 <_vfiprintf_r+0x15a>
 8030738:	9105      	str	r1, [sp, #20]
 803073a:	e7c4      	b.n	80306c6 <_vfiprintf_r+0x15a>
 803073c:	fb0c 2101 	mla	r1, ip, r1, r2
 8030740:	4604      	mov	r4, r0
 8030742:	2301      	movs	r3, #1
 8030744:	e7f0      	b.n	8030728 <_vfiprintf_r+0x1bc>
 8030746:	ab03      	add	r3, sp, #12
 8030748:	9300      	str	r3, [sp, #0]
 803074a:	462a      	mov	r2, r5
 803074c:	4b12      	ldr	r3, [pc, #72]	; (8030798 <_vfiprintf_r+0x22c>)
 803074e:	a904      	add	r1, sp, #16
 8030750:	4630      	mov	r0, r6
 8030752:	f7fb ff7b 	bl	802c64c <_printf_float>
 8030756:	4607      	mov	r7, r0
 8030758:	1c78      	adds	r0, r7, #1
 803075a:	d1d6      	bne.n	803070a <_vfiprintf_r+0x19e>
 803075c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803075e:	07d9      	lsls	r1, r3, #31
 8030760:	d405      	bmi.n	803076e <_vfiprintf_r+0x202>
 8030762:	89ab      	ldrh	r3, [r5, #12]
 8030764:	059a      	lsls	r2, r3, #22
 8030766:	d402      	bmi.n	803076e <_vfiprintf_r+0x202>
 8030768:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803076a:	f7fd f97b 	bl	802da64 <__retarget_lock_release_recursive>
 803076e:	89ab      	ldrh	r3, [r5, #12]
 8030770:	065b      	lsls	r3, r3, #25
 8030772:	f53f af1d 	bmi.w	80305b0 <_vfiprintf_r+0x44>
 8030776:	9809      	ldr	r0, [sp, #36]	; 0x24
 8030778:	e71c      	b.n	80305b4 <_vfiprintf_r+0x48>
 803077a:	ab03      	add	r3, sp, #12
 803077c:	9300      	str	r3, [sp, #0]
 803077e:	462a      	mov	r2, r5
 8030780:	4b05      	ldr	r3, [pc, #20]	; (8030798 <_vfiprintf_r+0x22c>)
 8030782:	a904      	add	r1, sp, #16
 8030784:	4630      	mov	r0, r6
 8030786:	f7fc fa05 	bl	802cb94 <_printf_i>
 803078a:	e7e4      	b.n	8030756 <_vfiprintf_r+0x1ea>
 803078c:	08034bf1 	.word	0x08034bf1
 8030790:	08034bfb 	.word	0x08034bfb
 8030794:	0802c64d 	.word	0x0802c64d
 8030798:	08030547 	.word	0x08030547
 803079c:	08034bf7 	.word	0x08034bf7

080307a0 <_scanf_chars>:
 80307a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80307a4:	4615      	mov	r5, r2
 80307a6:	688a      	ldr	r2, [r1, #8]
 80307a8:	4680      	mov	r8, r0
 80307aa:	460c      	mov	r4, r1
 80307ac:	b932      	cbnz	r2, 80307bc <_scanf_chars+0x1c>
 80307ae:	698a      	ldr	r2, [r1, #24]
 80307b0:	2a00      	cmp	r2, #0
 80307b2:	bf0c      	ite	eq
 80307b4:	2201      	moveq	r2, #1
 80307b6:	f04f 32ff 	movne.w	r2, #4294967295
 80307ba:	608a      	str	r2, [r1, #8]
 80307bc:	6822      	ldr	r2, [r4, #0]
 80307be:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8030850 <_scanf_chars+0xb0>
 80307c2:	06d1      	lsls	r1, r2, #27
 80307c4:	bf5f      	itttt	pl
 80307c6:	681a      	ldrpl	r2, [r3, #0]
 80307c8:	1d11      	addpl	r1, r2, #4
 80307ca:	6019      	strpl	r1, [r3, #0]
 80307cc:	6816      	ldrpl	r6, [r2, #0]
 80307ce:	2700      	movs	r7, #0
 80307d0:	69a0      	ldr	r0, [r4, #24]
 80307d2:	b188      	cbz	r0, 80307f8 <_scanf_chars+0x58>
 80307d4:	2801      	cmp	r0, #1
 80307d6:	d107      	bne.n	80307e8 <_scanf_chars+0x48>
 80307d8:	682a      	ldr	r2, [r5, #0]
 80307da:	7811      	ldrb	r1, [r2, #0]
 80307dc:	6962      	ldr	r2, [r4, #20]
 80307de:	5c52      	ldrb	r2, [r2, r1]
 80307e0:	b952      	cbnz	r2, 80307f8 <_scanf_chars+0x58>
 80307e2:	2f00      	cmp	r7, #0
 80307e4:	d031      	beq.n	803084a <_scanf_chars+0xaa>
 80307e6:	e022      	b.n	803082e <_scanf_chars+0x8e>
 80307e8:	2802      	cmp	r0, #2
 80307ea:	d120      	bne.n	803082e <_scanf_chars+0x8e>
 80307ec:	682b      	ldr	r3, [r5, #0]
 80307ee:	781b      	ldrb	r3, [r3, #0]
 80307f0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80307f4:	071b      	lsls	r3, r3, #28
 80307f6:	d41a      	bmi.n	803082e <_scanf_chars+0x8e>
 80307f8:	6823      	ldr	r3, [r4, #0]
 80307fa:	06da      	lsls	r2, r3, #27
 80307fc:	bf5e      	ittt	pl
 80307fe:	682b      	ldrpl	r3, [r5, #0]
 8030800:	781b      	ldrbpl	r3, [r3, #0]
 8030802:	f806 3b01 	strbpl.w	r3, [r6], #1
 8030806:	682a      	ldr	r2, [r5, #0]
 8030808:	686b      	ldr	r3, [r5, #4]
 803080a:	3201      	adds	r2, #1
 803080c:	602a      	str	r2, [r5, #0]
 803080e:	68a2      	ldr	r2, [r4, #8]
 8030810:	3b01      	subs	r3, #1
 8030812:	3a01      	subs	r2, #1
 8030814:	606b      	str	r3, [r5, #4]
 8030816:	3701      	adds	r7, #1
 8030818:	60a2      	str	r2, [r4, #8]
 803081a:	b142      	cbz	r2, 803082e <_scanf_chars+0x8e>
 803081c:	2b00      	cmp	r3, #0
 803081e:	dcd7      	bgt.n	80307d0 <_scanf_chars+0x30>
 8030820:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8030824:	4629      	mov	r1, r5
 8030826:	4640      	mov	r0, r8
 8030828:	4798      	blx	r3
 803082a:	2800      	cmp	r0, #0
 803082c:	d0d0      	beq.n	80307d0 <_scanf_chars+0x30>
 803082e:	6823      	ldr	r3, [r4, #0]
 8030830:	f013 0310 	ands.w	r3, r3, #16
 8030834:	d105      	bne.n	8030842 <_scanf_chars+0xa2>
 8030836:	68e2      	ldr	r2, [r4, #12]
 8030838:	3201      	adds	r2, #1
 803083a:	60e2      	str	r2, [r4, #12]
 803083c:	69a2      	ldr	r2, [r4, #24]
 803083e:	b102      	cbz	r2, 8030842 <_scanf_chars+0xa2>
 8030840:	7033      	strb	r3, [r6, #0]
 8030842:	6923      	ldr	r3, [r4, #16]
 8030844:	443b      	add	r3, r7
 8030846:	6123      	str	r3, [r4, #16]
 8030848:	2000      	movs	r0, #0
 803084a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803084e:	bf00      	nop
 8030850:	08034af1 	.word	0x08034af1

08030854 <_scanf_i>:
 8030854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030858:	4698      	mov	r8, r3
 803085a:	4b74      	ldr	r3, [pc, #464]	; (8030a2c <_scanf_i+0x1d8>)
 803085c:	460c      	mov	r4, r1
 803085e:	4682      	mov	sl, r0
 8030860:	4616      	mov	r6, r2
 8030862:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8030866:	b087      	sub	sp, #28
 8030868:	ab03      	add	r3, sp, #12
 803086a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 803086e:	4b70      	ldr	r3, [pc, #448]	; (8030a30 <_scanf_i+0x1dc>)
 8030870:	69a1      	ldr	r1, [r4, #24]
 8030872:	4a70      	ldr	r2, [pc, #448]	; (8030a34 <_scanf_i+0x1e0>)
 8030874:	2903      	cmp	r1, #3
 8030876:	bf18      	it	ne
 8030878:	461a      	movne	r2, r3
 803087a:	68a3      	ldr	r3, [r4, #8]
 803087c:	9201      	str	r2, [sp, #4]
 803087e:	1e5a      	subs	r2, r3, #1
 8030880:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8030884:	bf88      	it	hi
 8030886:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 803088a:	4627      	mov	r7, r4
 803088c:	bf82      	ittt	hi
 803088e:	eb03 0905 	addhi.w	r9, r3, r5
 8030892:	f240 135d 	movwhi	r3, #349	; 0x15d
 8030896:	60a3      	strhi	r3, [r4, #8]
 8030898:	f857 3b1c 	ldr.w	r3, [r7], #28
 803089c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80308a0:	bf98      	it	ls
 80308a2:	f04f 0900 	movls.w	r9, #0
 80308a6:	6023      	str	r3, [r4, #0]
 80308a8:	463d      	mov	r5, r7
 80308aa:	f04f 0b00 	mov.w	fp, #0
 80308ae:	6831      	ldr	r1, [r6, #0]
 80308b0:	ab03      	add	r3, sp, #12
 80308b2:	7809      	ldrb	r1, [r1, #0]
 80308b4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80308b8:	2202      	movs	r2, #2
 80308ba:	f7df fca1 	bl	8010200 <memchr>
 80308be:	b328      	cbz	r0, 803090c <_scanf_i+0xb8>
 80308c0:	f1bb 0f01 	cmp.w	fp, #1
 80308c4:	d159      	bne.n	803097a <_scanf_i+0x126>
 80308c6:	6862      	ldr	r2, [r4, #4]
 80308c8:	b92a      	cbnz	r2, 80308d6 <_scanf_i+0x82>
 80308ca:	6822      	ldr	r2, [r4, #0]
 80308cc:	2308      	movs	r3, #8
 80308ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80308d2:	6063      	str	r3, [r4, #4]
 80308d4:	6022      	str	r2, [r4, #0]
 80308d6:	6822      	ldr	r2, [r4, #0]
 80308d8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80308dc:	6022      	str	r2, [r4, #0]
 80308de:	68a2      	ldr	r2, [r4, #8]
 80308e0:	1e51      	subs	r1, r2, #1
 80308e2:	60a1      	str	r1, [r4, #8]
 80308e4:	b192      	cbz	r2, 803090c <_scanf_i+0xb8>
 80308e6:	6832      	ldr	r2, [r6, #0]
 80308e8:	1c51      	adds	r1, r2, #1
 80308ea:	6031      	str	r1, [r6, #0]
 80308ec:	7812      	ldrb	r2, [r2, #0]
 80308ee:	f805 2b01 	strb.w	r2, [r5], #1
 80308f2:	6872      	ldr	r2, [r6, #4]
 80308f4:	3a01      	subs	r2, #1
 80308f6:	2a00      	cmp	r2, #0
 80308f8:	6072      	str	r2, [r6, #4]
 80308fa:	dc07      	bgt.n	803090c <_scanf_i+0xb8>
 80308fc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8030900:	4631      	mov	r1, r6
 8030902:	4650      	mov	r0, sl
 8030904:	4790      	blx	r2
 8030906:	2800      	cmp	r0, #0
 8030908:	f040 8085 	bne.w	8030a16 <_scanf_i+0x1c2>
 803090c:	f10b 0b01 	add.w	fp, fp, #1
 8030910:	f1bb 0f03 	cmp.w	fp, #3
 8030914:	d1cb      	bne.n	80308ae <_scanf_i+0x5a>
 8030916:	6863      	ldr	r3, [r4, #4]
 8030918:	b90b      	cbnz	r3, 803091e <_scanf_i+0xca>
 803091a:	230a      	movs	r3, #10
 803091c:	6063      	str	r3, [r4, #4]
 803091e:	6863      	ldr	r3, [r4, #4]
 8030920:	4945      	ldr	r1, [pc, #276]	; (8030a38 <_scanf_i+0x1e4>)
 8030922:	6960      	ldr	r0, [r4, #20]
 8030924:	1ac9      	subs	r1, r1, r3
 8030926:	f000 f999 	bl	8030c5c <__sccl>
 803092a:	f04f 0b00 	mov.w	fp, #0
 803092e:	68a3      	ldr	r3, [r4, #8]
 8030930:	6822      	ldr	r2, [r4, #0]
 8030932:	2b00      	cmp	r3, #0
 8030934:	d03d      	beq.n	80309b2 <_scanf_i+0x15e>
 8030936:	6831      	ldr	r1, [r6, #0]
 8030938:	6960      	ldr	r0, [r4, #20]
 803093a:	f891 c000 	ldrb.w	ip, [r1]
 803093e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8030942:	2800      	cmp	r0, #0
 8030944:	d035      	beq.n	80309b2 <_scanf_i+0x15e>
 8030946:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 803094a:	d124      	bne.n	8030996 <_scanf_i+0x142>
 803094c:	0510      	lsls	r0, r2, #20
 803094e:	d522      	bpl.n	8030996 <_scanf_i+0x142>
 8030950:	f10b 0b01 	add.w	fp, fp, #1
 8030954:	f1b9 0f00 	cmp.w	r9, #0
 8030958:	d003      	beq.n	8030962 <_scanf_i+0x10e>
 803095a:	3301      	adds	r3, #1
 803095c:	f109 39ff 	add.w	r9, r9, #4294967295
 8030960:	60a3      	str	r3, [r4, #8]
 8030962:	6873      	ldr	r3, [r6, #4]
 8030964:	3b01      	subs	r3, #1
 8030966:	2b00      	cmp	r3, #0
 8030968:	6073      	str	r3, [r6, #4]
 803096a:	dd1b      	ble.n	80309a4 <_scanf_i+0x150>
 803096c:	6833      	ldr	r3, [r6, #0]
 803096e:	3301      	adds	r3, #1
 8030970:	6033      	str	r3, [r6, #0]
 8030972:	68a3      	ldr	r3, [r4, #8]
 8030974:	3b01      	subs	r3, #1
 8030976:	60a3      	str	r3, [r4, #8]
 8030978:	e7d9      	b.n	803092e <_scanf_i+0xda>
 803097a:	f1bb 0f02 	cmp.w	fp, #2
 803097e:	d1ae      	bne.n	80308de <_scanf_i+0x8a>
 8030980:	6822      	ldr	r2, [r4, #0]
 8030982:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8030986:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 803098a:	d1bf      	bne.n	803090c <_scanf_i+0xb8>
 803098c:	2310      	movs	r3, #16
 803098e:	6063      	str	r3, [r4, #4]
 8030990:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8030994:	e7a2      	b.n	80308dc <_scanf_i+0x88>
 8030996:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 803099a:	6022      	str	r2, [r4, #0]
 803099c:	780b      	ldrb	r3, [r1, #0]
 803099e:	f805 3b01 	strb.w	r3, [r5], #1
 80309a2:	e7de      	b.n	8030962 <_scanf_i+0x10e>
 80309a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80309a8:	4631      	mov	r1, r6
 80309aa:	4650      	mov	r0, sl
 80309ac:	4798      	blx	r3
 80309ae:	2800      	cmp	r0, #0
 80309b0:	d0df      	beq.n	8030972 <_scanf_i+0x11e>
 80309b2:	6823      	ldr	r3, [r4, #0]
 80309b4:	05d9      	lsls	r1, r3, #23
 80309b6:	d50d      	bpl.n	80309d4 <_scanf_i+0x180>
 80309b8:	42bd      	cmp	r5, r7
 80309ba:	d909      	bls.n	80309d0 <_scanf_i+0x17c>
 80309bc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80309c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80309c4:	4632      	mov	r2, r6
 80309c6:	4650      	mov	r0, sl
 80309c8:	4798      	blx	r3
 80309ca:	f105 39ff 	add.w	r9, r5, #4294967295
 80309ce:	464d      	mov	r5, r9
 80309d0:	42bd      	cmp	r5, r7
 80309d2:	d028      	beq.n	8030a26 <_scanf_i+0x1d2>
 80309d4:	6822      	ldr	r2, [r4, #0]
 80309d6:	f012 0210 	ands.w	r2, r2, #16
 80309da:	d113      	bne.n	8030a04 <_scanf_i+0x1b0>
 80309dc:	702a      	strb	r2, [r5, #0]
 80309de:	6863      	ldr	r3, [r4, #4]
 80309e0:	9e01      	ldr	r6, [sp, #4]
 80309e2:	4639      	mov	r1, r7
 80309e4:	4650      	mov	r0, sl
 80309e6:	47b0      	blx	r6
 80309e8:	f8d8 3000 	ldr.w	r3, [r8]
 80309ec:	6821      	ldr	r1, [r4, #0]
 80309ee:	1d1a      	adds	r2, r3, #4
 80309f0:	f8c8 2000 	str.w	r2, [r8]
 80309f4:	f011 0f20 	tst.w	r1, #32
 80309f8:	681b      	ldr	r3, [r3, #0]
 80309fa:	d00f      	beq.n	8030a1c <_scanf_i+0x1c8>
 80309fc:	6018      	str	r0, [r3, #0]
 80309fe:	68e3      	ldr	r3, [r4, #12]
 8030a00:	3301      	adds	r3, #1
 8030a02:	60e3      	str	r3, [r4, #12]
 8030a04:	6923      	ldr	r3, [r4, #16]
 8030a06:	1bed      	subs	r5, r5, r7
 8030a08:	445d      	add	r5, fp
 8030a0a:	442b      	add	r3, r5
 8030a0c:	6123      	str	r3, [r4, #16]
 8030a0e:	2000      	movs	r0, #0
 8030a10:	b007      	add	sp, #28
 8030a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030a16:	f04f 0b00 	mov.w	fp, #0
 8030a1a:	e7ca      	b.n	80309b2 <_scanf_i+0x15e>
 8030a1c:	07ca      	lsls	r2, r1, #31
 8030a1e:	bf4c      	ite	mi
 8030a20:	8018      	strhmi	r0, [r3, #0]
 8030a22:	6018      	strpl	r0, [r3, #0]
 8030a24:	e7eb      	b.n	80309fe <_scanf_i+0x1aa>
 8030a26:	2001      	movs	r0, #1
 8030a28:	e7f2      	b.n	8030a10 <_scanf_i+0x1bc>
 8030a2a:	bf00      	nop
 8030a2c:	08033cbc 	.word	0x08033cbc
 8030a30:	08031635 	.word	0x08031635
 8030a34:	0802fec1 	.word	0x0802fec1
 8030a38:	08034c12 	.word	0x08034c12

08030a3c <__sflush_r>:
 8030a3c:	898a      	ldrh	r2, [r1, #12]
 8030a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8030a42:	4605      	mov	r5, r0
 8030a44:	0710      	lsls	r0, r2, #28
 8030a46:	460c      	mov	r4, r1
 8030a48:	d458      	bmi.n	8030afc <__sflush_r+0xc0>
 8030a4a:	684b      	ldr	r3, [r1, #4]
 8030a4c:	2b00      	cmp	r3, #0
 8030a4e:	dc05      	bgt.n	8030a5c <__sflush_r+0x20>
 8030a50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8030a52:	2b00      	cmp	r3, #0
 8030a54:	dc02      	bgt.n	8030a5c <__sflush_r+0x20>
 8030a56:	2000      	movs	r0, #0
 8030a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8030a5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8030a5e:	2e00      	cmp	r6, #0
 8030a60:	d0f9      	beq.n	8030a56 <__sflush_r+0x1a>
 8030a62:	2300      	movs	r3, #0
 8030a64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8030a68:	682f      	ldr	r7, [r5, #0]
 8030a6a:	6a21      	ldr	r1, [r4, #32]
 8030a6c:	602b      	str	r3, [r5, #0]
 8030a6e:	d032      	beq.n	8030ad6 <__sflush_r+0x9a>
 8030a70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8030a72:	89a3      	ldrh	r3, [r4, #12]
 8030a74:	075a      	lsls	r2, r3, #29
 8030a76:	d505      	bpl.n	8030a84 <__sflush_r+0x48>
 8030a78:	6863      	ldr	r3, [r4, #4]
 8030a7a:	1ac0      	subs	r0, r0, r3
 8030a7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8030a7e:	b10b      	cbz	r3, 8030a84 <__sflush_r+0x48>
 8030a80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8030a82:	1ac0      	subs	r0, r0, r3
 8030a84:	2300      	movs	r3, #0
 8030a86:	4602      	mov	r2, r0
 8030a88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8030a8a:	6a21      	ldr	r1, [r4, #32]
 8030a8c:	4628      	mov	r0, r5
 8030a8e:	47b0      	blx	r6
 8030a90:	1c43      	adds	r3, r0, #1
 8030a92:	89a3      	ldrh	r3, [r4, #12]
 8030a94:	d106      	bne.n	8030aa4 <__sflush_r+0x68>
 8030a96:	6829      	ldr	r1, [r5, #0]
 8030a98:	291d      	cmp	r1, #29
 8030a9a:	d82b      	bhi.n	8030af4 <__sflush_r+0xb8>
 8030a9c:	4a29      	ldr	r2, [pc, #164]	; (8030b44 <__sflush_r+0x108>)
 8030a9e:	410a      	asrs	r2, r1
 8030aa0:	07d6      	lsls	r6, r2, #31
 8030aa2:	d427      	bmi.n	8030af4 <__sflush_r+0xb8>
 8030aa4:	2200      	movs	r2, #0
 8030aa6:	6062      	str	r2, [r4, #4]
 8030aa8:	04d9      	lsls	r1, r3, #19
 8030aaa:	6922      	ldr	r2, [r4, #16]
 8030aac:	6022      	str	r2, [r4, #0]
 8030aae:	d504      	bpl.n	8030aba <__sflush_r+0x7e>
 8030ab0:	1c42      	adds	r2, r0, #1
 8030ab2:	d101      	bne.n	8030ab8 <__sflush_r+0x7c>
 8030ab4:	682b      	ldr	r3, [r5, #0]
 8030ab6:	b903      	cbnz	r3, 8030aba <__sflush_r+0x7e>
 8030ab8:	6560      	str	r0, [r4, #84]	; 0x54
 8030aba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8030abc:	602f      	str	r7, [r5, #0]
 8030abe:	2900      	cmp	r1, #0
 8030ac0:	d0c9      	beq.n	8030a56 <__sflush_r+0x1a>
 8030ac2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8030ac6:	4299      	cmp	r1, r3
 8030ac8:	d002      	beq.n	8030ad0 <__sflush_r+0x94>
 8030aca:	4628      	mov	r0, r5
 8030acc:	f7fd fe6a 	bl	802e7a4 <_free_r>
 8030ad0:	2000      	movs	r0, #0
 8030ad2:	6360      	str	r0, [r4, #52]	; 0x34
 8030ad4:	e7c0      	b.n	8030a58 <__sflush_r+0x1c>
 8030ad6:	2301      	movs	r3, #1
 8030ad8:	4628      	mov	r0, r5
 8030ada:	47b0      	blx	r6
 8030adc:	1c41      	adds	r1, r0, #1
 8030ade:	d1c8      	bne.n	8030a72 <__sflush_r+0x36>
 8030ae0:	682b      	ldr	r3, [r5, #0]
 8030ae2:	2b00      	cmp	r3, #0
 8030ae4:	d0c5      	beq.n	8030a72 <__sflush_r+0x36>
 8030ae6:	2b1d      	cmp	r3, #29
 8030ae8:	d001      	beq.n	8030aee <__sflush_r+0xb2>
 8030aea:	2b16      	cmp	r3, #22
 8030aec:	d101      	bne.n	8030af2 <__sflush_r+0xb6>
 8030aee:	602f      	str	r7, [r5, #0]
 8030af0:	e7b1      	b.n	8030a56 <__sflush_r+0x1a>
 8030af2:	89a3      	ldrh	r3, [r4, #12]
 8030af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030af8:	81a3      	strh	r3, [r4, #12]
 8030afa:	e7ad      	b.n	8030a58 <__sflush_r+0x1c>
 8030afc:	690f      	ldr	r7, [r1, #16]
 8030afe:	2f00      	cmp	r7, #0
 8030b00:	d0a9      	beq.n	8030a56 <__sflush_r+0x1a>
 8030b02:	0793      	lsls	r3, r2, #30
 8030b04:	680e      	ldr	r6, [r1, #0]
 8030b06:	bf08      	it	eq
 8030b08:	694b      	ldreq	r3, [r1, #20]
 8030b0a:	600f      	str	r7, [r1, #0]
 8030b0c:	bf18      	it	ne
 8030b0e:	2300      	movne	r3, #0
 8030b10:	eba6 0807 	sub.w	r8, r6, r7
 8030b14:	608b      	str	r3, [r1, #8]
 8030b16:	f1b8 0f00 	cmp.w	r8, #0
 8030b1a:	dd9c      	ble.n	8030a56 <__sflush_r+0x1a>
 8030b1c:	6a21      	ldr	r1, [r4, #32]
 8030b1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8030b20:	4643      	mov	r3, r8
 8030b22:	463a      	mov	r2, r7
 8030b24:	4628      	mov	r0, r5
 8030b26:	47b0      	blx	r6
 8030b28:	2800      	cmp	r0, #0
 8030b2a:	dc06      	bgt.n	8030b3a <__sflush_r+0xfe>
 8030b2c:	89a3      	ldrh	r3, [r4, #12]
 8030b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030b32:	81a3      	strh	r3, [r4, #12]
 8030b34:	f04f 30ff 	mov.w	r0, #4294967295
 8030b38:	e78e      	b.n	8030a58 <__sflush_r+0x1c>
 8030b3a:	4407      	add	r7, r0
 8030b3c:	eba8 0800 	sub.w	r8, r8, r0
 8030b40:	e7e9      	b.n	8030b16 <__sflush_r+0xda>
 8030b42:	bf00      	nop
 8030b44:	dfbffffe 	.word	0xdfbffffe

08030b48 <_fflush_r>:
 8030b48:	b538      	push	{r3, r4, r5, lr}
 8030b4a:	690b      	ldr	r3, [r1, #16]
 8030b4c:	4605      	mov	r5, r0
 8030b4e:	460c      	mov	r4, r1
 8030b50:	b913      	cbnz	r3, 8030b58 <_fflush_r+0x10>
 8030b52:	2500      	movs	r5, #0
 8030b54:	4628      	mov	r0, r5
 8030b56:	bd38      	pop	{r3, r4, r5, pc}
 8030b58:	b118      	cbz	r0, 8030b62 <_fflush_r+0x1a>
 8030b5a:	6a03      	ldr	r3, [r0, #32]
 8030b5c:	b90b      	cbnz	r3, 8030b62 <_fflush_r+0x1a>
 8030b5e:	f7fc fbd7 	bl	802d310 <__sinit>
 8030b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8030b66:	2b00      	cmp	r3, #0
 8030b68:	d0f3      	beq.n	8030b52 <_fflush_r+0xa>
 8030b6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8030b6c:	07d0      	lsls	r0, r2, #31
 8030b6e:	d404      	bmi.n	8030b7a <_fflush_r+0x32>
 8030b70:	0599      	lsls	r1, r3, #22
 8030b72:	d402      	bmi.n	8030b7a <_fflush_r+0x32>
 8030b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8030b76:	f7fc ff74 	bl	802da62 <__retarget_lock_acquire_recursive>
 8030b7a:	4628      	mov	r0, r5
 8030b7c:	4621      	mov	r1, r4
 8030b7e:	f7ff ff5d 	bl	8030a3c <__sflush_r>
 8030b82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8030b84:	07da      	lsls	r2, r3, #31
 8030b86:	4605      	mov	r5, r0
 8030b88:	d4e4      	bmi.n	8030b54 <_fflush_r+0xc>
 8030b8a:	89a3      	ldrh	r3, [r4, #12]
 8030b8c:	059b      	lsls	r3, r3, #22
 8030b8e:	d4e1      	bmi.n	8030b54 <_fflush_r+0xc>
 8030b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8030b92:	f7fc ff67 	bl	802da64 <__retarget_lock_release_recursive>
 8030b96:	e7dd      	b.n	8030b54 <_fflush_r+0xc>

08030b98 <__swhatbuf_r>:
 8030b98:	b570      	push	{r4, r5, r6, lr}
 8030b9a:	460c      	mov	r4, r1
 8030b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8030ba0:	2900      	cmp	r1, #0
 8030ba2:	b096      	sub	sp, #88	; 0x58
 8030ba4:	4615      	mov	r5, r2
 8030ba6:	461e      	mov	r6, r3
 8030ba8:	da0d      	bge.n	8030bc6 <__swhatbuf_r+0x2e>
 8030baa:	89a3      	ldrh	r3, [r4, #12]
 8030bac:	f013 0f80 	tst.w	r3, #128	; 0x80
 8030bb0:	f04f 0100 	mov.w	r1, #0
 8030bb4:	bf0c      	ite	eq
 8030bb6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8030bba:	2340      	movne	r3, #64	; 0x40
 8030bbc:	2000      	movs	r0, #0
 8030bbe:	6031      	str	r1, [r6, #0]
 8030bc0:	602b      	str	r3, [r5, #0]
 8030bc2:	b016      	add	sp, #88	; 0x58
 8030bc4:	bd70      	pop	{r4, r5, r6, pc}
 8030bc6:	466a      	mov	r2, sp
 8030bc8:	f000 f8ec 	bl	8030da4 <_fstat_r>
 8030bcc:	2800      	cmp	r0, #0
 8030bce:	dbec      	blt.n	8030baa <__swhatbuf_r+0x12>
 8030bd0:	9901      	ldr	r1, [sp, #4]
 8030bd2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8030bd6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8030bda:	4259      	negs	r1, r3
 8030bdc:	4159      	adcs	r1, r3
 8030bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8030be2:	e7eb      	b.n	8030bbc <__swhatbuf_r+0x24>

08030be4 <__smakebuf_r>:
 8030be4:	898b      	ldrh	r3, [r1, #12]
 8030be6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8030be8:	079d      	lsls	r5, r3, #30
 8030bea:	4606      	mov	r6, r0
 8030bec:	460c      	mov	r4, r1
 8030bee:	d507      	bpl.n	8030c00 <__smakebuf_r+0x1c>
 8030bf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8030bf4:	6023      	str	r3, [r4, #0]
 8030bf6:	6123      	str	r3, [r4, #16]
 8030bf8:	2301      	movs	r3, #1
 8030bfa:	6163      	str	r3, [r4, #20]
 8030bfc:	b002      	add	sp, #8
 8030bfe:	bd70      	pop	{r4, r5, r6, pc}
 8030c00:	ab01      	add	r3, sp, #4
 8030c02:	466a      	mov	r2, sp
 8030c04:	f7ff ffc8 	bl	8030b98 <__swhatbuf_r>
 8030c08:	9900      	ldr	r1, [sp, #0]
 8030c0a:	4605      	mov	r5, r0
 8030c0c:	4630      	mov	r0, r6
 8030c0e:	f7fb fbf1 	bl	802c3f4 <_malloc_r>
 8030c12:	b948      	cbnz	r0, 8030c28 <__smakebuf_r+0x44>
 8030c14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8030c18:	059a      	lsls	r2, r3, #22
 8030c1a:	d4ef      	bmi.n	8030bfc <__smakebuf_r+0x18>
 8030c1c:	f023 0303 	bic.w	r3, r3, #3
 8030c20:	f043 0302 	orr.w	r3, r3, #2
 8030c24:	81a3      	strh	r3, [r4, #12]
 8030c26:	e7e3      	b.n	8030bf0 <__smakebuf_r+0xc>
 8030c28:	89a3      	ldrh	r3, [r4, #12]
 8030c2a:	6020      	str	r0, [r4, #0]
 8030c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8030c30:	81a3      	strh	r3, [r4, #12]
 8030c32:	9b00      	ldr	r3, [sp, #0]
 8030c34:	6163      	str	r3, [r4, #20]
 8030c36:	9b01      	ldr	r3, [sp, #4]
 8030c38:	6120      	str	r0, [r4, #16]
 8030c3a:	b15b      	cbz	r3, 8030c54 <__smakebuf_r+0x70>
 8030c3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8030c40:	4630      	mov	r0, r6
 8030c42:	f000 f8c1 	bl	8030dc8 <_isatty_r>
 8030c46:	b128      	cbz	r0, 8030c54 <__smakebuf_r+0x70>
 8030c48:	89a3      	ldrh	r3, [r4, #12]
 8030c4a:	f023 0303 	bic.w	r3, r3, #3
 8030c4e:	f043 0301 	orr.w	r3, r3, #1
 8030c52:	81a3      	strh	r3, [r4, #12]
 8030c54:	89a3      	ldrh	r3, [r4, #12]
 8030c56:	431d      	orrs	r5, r3
 8030c58:	81a5      	strh	r5, [r4, #12]
 8030c5a:	e7cf      	b.n	8030bfc <__smakebuf_r+0x18>

08030c5c <__sccl>:
 8030c5c:	b570      	push	{r4, r5, r6, lr}
 8030c5e:	780b      	ldrb	r3, [r1, #0]
 8030c60:	4604      	mov	r4, r0
 8030c62:	2b5e      	cmp	r3, #94	; 0x5e
 8030c64:	bf0b      	itete	eq
 8030c66:	784b      	ldrbeq	r3, [r1, #1]
 8030c68:	1c4a      	addne	r2, r1, #1
 8030c6a:	1c8a      	addeq	r2, r1, #2
 8030c6c:	2100      	movne	r1, #0
 8030c6e:	bf08      	it	eq
 8030c70:	2101      	moveq	r1, #1
 8030c72:	3801      	subs	r0, #1
 8030c74:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8030c78:	f800 1f01 	strb.w	r1, [r0, #1]!
 8030c7c:	42a8      	cmp	r0, r5
 8030c7e:	d1fb      	bne.n	8030c78 <__sccl+0x1c>
 8030c80:	b90b      	cbnz	r3, 8030c86 <__sccl+0x2a>
 8030c82:	1e50      	subs	r0, r2, #1
 8030c84:	bd70      	pop	{r4, r5, r6, pc}
 8030c86:	f081 0101 	eor.w	r1, r1, #1
 8030c8a:	54e1      	strb	r1, [r4, r3]
 8030c8c:	4610      	mov	r0, r2
 8030c8e:	4602      	mov	r2, r0
 8030c90:	f812 5b01 	ldrb.w	r5, [r2], #1
 8030c94:	2d2d      	cmp	r5, #45	; 0x2d
 8030c96:	d005      	beq.n	8030ca4 <__sccl+0x48>
 8030c98:	2d5d      	cmp	r5, #93	; 0x5d
 8030c9a:	d016      	beq.n	8030cca <__sccl+0x6e>
 8030c9c:	2d00      	cmp	r5, #0
 8030c9e:	d0f1      	beq.n	8030c84 <__sccl+0x28>
 8030ca0:	462b      	mov	r3, r5
 8030ca2:	e7f2      	b.n	8030c8a <__sccl+0x2e>
 8030ca4:	7846      	ldrb	r6, [r0, #1]
 8030ca6:	2e5d      	cmp	r6, #93	; 0x5d
 8030ca8:	d0fa      	beq.n	8030ca0 <__sccl+0x44>
 8030caa:	42b3      	cmp	r3, r6
 8030cac:	dcf8      	bgt.n	8030ca0 <__sccl+0x44>
 8030cae:	3002      	adds	r0, #2
 8030cb0:	461a      	mov	r2, r3
 8030cb2:	3201      	adds	r2, #1
 8030cb4:	4296      	cmp	r6, r2
 8030cb6:	54a1      	strb	r1, [r4, r2]
 8030cb8:	dcfb      	bgt.n	8030cb2 <__sccl+0x56>
 8030cba:	1af2      	subs	r2, r6, r3
 8030cbc:	3a01      	subs	r2, #1
 8030cbe:	1c5d      	adds	r5, r3, #1
 8030cc0:	42b3      	cmp	r3, r6
 8030cc2:	bfa8      	it	ge
 8030cc4:	2200      	movge	r2, #0
 8030cc6:	18ab      	adds	r3, r5, r2
 8030cc8:	e7e1      	b.n	8030c8e <__sccl+0x32>
 8030cca:	4610      	mov	r0, r2
 8030ccc:	e7da      	b.n	8030c84 <__sccl+0x28>

08030cce <__submore>:
 8030cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8030cd2:	460c      	mov	r4, r1
 8030cd4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8030cd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8030cda:	4299      	cmp	r1, r3
 8030cdc:	d11d      	bne.n	8030d1a <__submore+0x4c>
 8030cde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8030ce2:	f7fb fb87 	bl	802c3f4 <_malloc_r>
 8030ce6:	b918      	cbnz	r0, 8030cf0 <__submore+0x22>
 8030ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8030cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8030cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8030cf4:	63a3      	str	r3, [r4, #56]	; 0x38
 8030cf6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8030cfa:	6360      	str	r0, [r4, #52]	; 0x34
 8030cfc:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8030d00:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8030d04:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8030d08:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8030d0c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8030d10:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8030d14:	6020      	str	r0, [r4, #0]
 8030d16:	2000      	movs	r0, #0
 8030d18:	e7e8      	b.n	8030cec <__submore+0x1e>
 8030d1a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8030d1c:	0077      	lsls	r7, r6, #1
 8030d1e:	463a      	mov	r2, r7
 8030d20:	f000 fbe7 	bl	80314f2 <_realloc_r>
 8030d24:	4605      	mov	r5, r0
 8030d26:	2800      	cmp	r0, #0
 8030d28:	d0de      	beq.n	8030ce8 <__submore+0x1a>
 8030d2a:	eb00 0806 	add.w	r8, r0, r6
 8030d2e:	4601      	mov	r1, r0
 8030d30:	4632      	mov	r2, r6
 8030d32:	4640      	mov	r0, r8
 8030d34:	f7fc fe9f 	bl	802da76 <memcpy>
 8030d38:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8030d3c:	f8c4 8000 	str.w	r8, [r4]
 8030d40:	e7e9      	b.n	8030d16 <__submore+0x48>

08030d42 <_raise_r>:
 8030d42:	291f      	cmp	r1, #31
 8030d44:	b538      	push	{r3, r4, r5, lr}
 8030d46:	4604      	mov	r4, r0
 8030d48:	460d      	mov	r5, r1
 8030d4a:	d904      	bls.n	8030d56 <_raise_r+0x14>
 8030d4c:	2316      	movs	r3, #22
 8030d4e:	6003      	str	r3, [r0, #0]
 8030d50:	f04f 30ff 	mov.w	r0, #4294967295
 8030d54:	bd38      	pop	{r3, r4, r5, pc}
 8030d56:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8030d58:	b112      	cbz	r2, 8030d60 <_raise_r+0x1e>
 8030d5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8030d5e:	b94b      	cbnz	r3, 8030d74 <_raise_r+0x32>
 8030d60:	4620      	mov	r0, r4
 8030d62:	f000 f853 	bl	8030e0c <_getpid_r>
 8030d66:	462a      	mov	r2, r5
 8030d68:	4601      	mov	r1, r0
 8030d6a:	4620      	mov	r0, r4
 8030d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8030d70:	f000 b83a 	b.w	8030de8 <_kill_r>
 8030d74:	2b01      	cmp	r3, #1
 8030d76:	d00a      	beq.n	8030d8e <_raise_r+0x4c>
 8030d78:	1c59      	adds	r1, r3, #1
 8030d7a:	d103      	bne.n	8030d84 <_raise_r+0x42>
 8030d7c:	2316      	movs	r3, #22
 8030d7e:	6003      	str	r3, [r0, #0]
 8030d80:	2001      	movs	r0, #1
 8030d82:	e7e7      	b.n	8030d54 <_raise_r+0x12>
 8030d84:	2400      	movs	r4, #0
 8030d86:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8030d8a:	4628      	mov	r0, r5
 8030d8c:	4798      	blx	r3
 8030d8e:	2000      	movs	r0, #0
 8030d90:	e7e0      	b.n	8030d54 <_raise_r+0x12>
	...

08030d94 <raise>:
 8030d94:	4b02      	ldr	r3, [pc, #8]	; (8030da0 <raise+0xc>)
 8030d96:	4601      	mov	r1, r0
 8030d98:	6818      	ldr	r0, [r3, #0]
 8030d9a:	f7ff bfd2 	b.w	8030d42 <_raise_r>
 8030d9e:	bf00      	nop
 8030da0:	20000188 	.word	0x20000188

08030da4 <_fstat_r>:
 8030da4:	b538      	push	{r3, r4, r5, lr}
 8030da6:	4d07      	ldr	r5, [pc, #28]	; (8030dc4 <_fstat_r+0x20>)
 8030da8:	2300      	movs	r3, #0
 8030daa:	4604      	mov	r4, r0
 8030dac:	4608      	mov	r0, r1
 8030dae:	4611      	mov	r1, r2
 8030db0:	602b      	str	r3, [r5, #0]
 8030db2:	f7e1 fedc 	bl	8012b6e <_fstat>
 8030db6:	1c43      	adds	r3, r0, #1
 8030db8:	d102      	bne.n	8030dc0 <_fstat_r+0x1c>
 8030dba:	682b      	ldr	r3, [r5, #0]
 8030dbc:	b103      	cbz	r3, 8030dc0 <_fstat_r+0x1c>
 8030dbe:	6023      	str	r3, [r4, #0]
 8030dc0:	bd38      	pop	{r3, r4, r5, pc}
 8030dc2:	bf00      	nop
 8030dc4:	2000dae8 	.word	0x2000dae8

08030dc8 <_isatty_r>:
 8030dc8:	b538      	push	{r3, r4, r5, lr}
 8030dca:	4d06      	ldr	r5, [pc, #24]	; (8030de4 <_isatty_r+0x1c>)
 8030dcc:	2300      	movs	r3, #0
 8030dce:	4604      	mov	r4, r0
 8030dd0:	4608      	mov	r0, r1
 8030dd2:	602b      	str	r3, [r5, #0]
 8030dd4:	f7e1 fedb 	bl	8012b8e <_isatty>
 8030dd8:	1c43      	adds	r3, r0, #1
 8030dda:	d102      	bne.n	8030de2 <_isatty_r+0x1a>
 8030ddc:	682b      	ldr	r3, [r5, #0]
 8030dde:	b103      	cbz	r3, 8030de2 <_isatty_r+0x1a>
 8030de0:	6023      	str	r3, [r4, #0]
 8030de2:	bd38      	pop	{r3, r4, r5, pc}
 8030de4:	2000dae8 	.word	0x2000dae8

08030de8 <_kill_r>:
 8030de8:	b538      	push	{r3, r4, r5, lr}
 8030dea:	4d07      	ldr	r5, [pc, #28]	; (8030e08 <_kill_r+0x20>)
 8030dec:	2300      	movs	r3, #0
 8030dee:	4604      	mov	r4, r0
 8030df0:	4608      	mov	r0, r1
 8030df2:	4611      	mov	r1, r2
 8030df4:	602b      	str	r3, [r5, #0]
 8030df6:	f7e1 fe5b 	bl	8012ab0 <_kill>
 8030dfa:	1c43      	adds	r3, r0, #1
 8030dfc:	d102      	bne.n	8030e04 <_kill_r+0x1c>
 8030dfe:	682b      	ldr	r3, [r5, #0]
 8030e00:	b103      	cbz	r3, 8030e04 <_kill_r+0x1c>
 8030e02:	6023      	str	r3, [r4, #0]
 8030e04:	bd38      	pop	{r3, r4, r5, pc}
 8030e06:	bf00      	nop
 8030e08:	2000dae8 	.word	0x2000dae8

08030e0c <_getpid_r>:
 8030e0c:	f7e1 be48 	b.w	8012aa0 <_getpid>

08030e10 <nan>:
 8030e10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8030e18 <nan+0x8>
 8030e14:	4770      	bx	lr
 8030e16:	bf00      	nop
 8030e18:	00000000 	.word	0x00000000
 8030e1c:	7ff80000 	.word	0x7ff80000

08030e20 <rshift>:
 8030e20:	6903      	ldr	r3, [r0, #16]
 8030e22:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8030e26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8030e2a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8030e2e:	f100 0414 	add.w	r4, r0, #20
 8030e32:	dd45      	ble.n	8030ec0 <rshift+0xa0>
 8030e34:	f011 011f 	ands.w	r1, r1, #31
 8030e38:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8030e3c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8030e40:	d10c      	bne.n	8030e5c <rshift+0x3c>
 8030e42:	f100 0710 	add.w	r7, r0, #16
 8030e46:	4629      	mov	r1, r5
 8030e48:	42b1      	cmp	r1, r6
 8030e4a:	d334      	bcc.n	8030eb6 <rshift+0x96>
 8030e4c:	1a9b      	subs	r3, r3, r2
 8030e4e:	009b      	lsls	r3, r3, #2
 8030e50:	1eea      	subs	r2, r5, #3
 8030e52:	4296      	cmp	r6, r2
 8030e54:	bf38      	it	cc
 8030e56:	2300      	movcc	r3, #0
 8030e58:	4423      	add	r3, r4
 8030e5a:	e015      	b.n	8030e88 <rshift+0x68>
 8030e5c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8030e60:	f1c1 0820 	rsb	r8, r1, #32
 8030e64:	40cf      	lsrs	r7, r1
 8030e66:	f105 0e04 	add.w	lr, r5, #4
 8030e6a:	46a1      	mov	r9, r4
 8030e6c:	4576      	cmp	r6, lr
 8030e6e:	46f4      	mov	ip, lr
 8030e70:	d815      	bhi.n	8030e9e <rshift+0x7e>
 8030e72:	1a9a      	subs	r2, r3, r2
 8030e74:	0092      	lsls	r2, r2, #2
 8030e76:	3a04      	subs	r2, #4
 8030e78:	3501      	adds	r5, #1
 8030e7a:	42ae      	cmp	r6, r5
 8030e7c:	bf38      	it	cc
 8030e7e:	2200      	movcc	r2, #0
 8030e80:	18a3      	adds	r3, r4, r2
 8030e82:	50a7      	str	r7, [r4, r2]
 8030e84:	b107      	cbz	r7, 8030e88 <rshift+0x68>
 8030e86:	3304      	adds	r3, #4
 8030e88:	1b1a      	subs	r2, r3, r4
 8030e8a:	42a3      	cmp	r3, r4
 8030e8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8030e90:	bf08      	it	eq
 8030e92:	2300      	moveq	r3, #0
 8030e94:	6102      	str	r2, [r0, #16]
 8030e96:	bf08      	it	eq
 8030e98:	6143      	streq	r3, [r0, #20]
 8030e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8030e9e:	f8dc c000 	ldr.w	ip, [ip]
 8030ea2:	fa0c fc08 	lsl.w	ip, ip, r8
 8030ea6:	ea4c 0707 	orr.w	r7, ip, r7
 8030eaa:	f849 7b04 	str.w	r7, [r9], #4
 8030eae:	f85e 7b04 	ldr.w	r7, [lr], #4
 8030eb2:	40cf      	lsrs	r7, r1
 8030eb4:	e7da      	b.n	8030e6c <rshift+0x4c>
 8030eb6:	f851 cb04 	ldr.w	ip, [r1], #4
 8030eba:	f847 cf04 	str.w	ip, [r7, #4]!
 8030ebe:	e7c3      	b.n	8030e48 <rshift+0x28>
 8030ec0:	4623      	mov	r3, r4
 8030ec2:	e7e1      	b.n	8030e88 <rshift+0x68>

08030ec4 <__hexdig_fun>:
 8030ec4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8030ec8:	2b09      	cmp	r3, #9
 8030eca:	d802      	bhi.n	8030ed2 <__hexdig_fun+0xe>
 8030ecc:	3820      	subs	r0, #32
 8030ece:	b2c0      	uxtb	r0, r0
 8030ed0:	4770      	bx	lr
 8030ed2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8030ed6:	2b05      	cmp	r3, #5
 8030ed8:	d801      	bhi.n	8030ede <__hexdig_fun+0x1a>
 8030eda:	3847      	subs	r0, #71	; 0x47
 8030edc:	e7f7      	b.n	8030ece <__hexdig_fun+0xa>
 8030ede:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8030ee2:	2b05      	cmp	r3, #5
 8030ee4:	d801      	bhi.n	8030eea <__hexdig_fun+0x26>
 8030ee6:	3827      	subs	r0, #39	; 0x27
 8030ee8:	e7f1      	b.n	8030ece <__hexdig_fun+0xa>
 8030eea:	2000      	movs	r0, #0
 8030eec:	4770      	bx	lr
	...

08030ef0 <__gethex>:
 8030ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030ef4:	4617      	mov	r7, r2
 8030ef6:	680a      	ldr	r2, [r1, #0]
 8030ef8:	b085      	sub	sp, #20
 8030efa:	f102 0b02 	add.w	fp, r2, #2
 8030efe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8030f02:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8030f06:	4681      	mov	r9, r0
 8030f08:	468a      	mov	sl, r1
 8030f0a:	9302      	str	r3, [sp, #8]
 8030f0c:	32fe      	adds	r2, #254	; 0xfe
 8030f0e:	eb02 030b 	add.w	r3, r2, fp
 8030f12:	46d8      	mov	r8, fp
 8030f14:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8030f18:	9301      	str	r3, [sp, #4]
 8030f1a:	2830      	cmp	r0, #48	; 0x30
 8030f1c:	d0f7      	beq.n	8030f0e <__gethex+0x1e>
 8030f1e:	f7ff ffd1 	bl	8030ec4 <__hexdig_fun>
 8030f22:	4604      	mov	r4, r0
 8030f24:	2800      	cmp	r0, #0
 8030f26:	d138      	bne.n	8030f9a <__gethex+0xaa>
 8030f28:	49a7      	ldr	r1, [pc, #668]	; (80311c8 <__gethex+0x2d8>)
 8030f2a:	2201      	movs	r2, #1
 8030f2c:	4640      	mov	r0, r8
 8030f2e:	f7fc fc15 	bl	802d75c <strncmp>
 8030f32:	4606      	mov	r6, r0
 8030f34:	2800      	cmp	r0, #0
 8030f36:	d169      	bne.n	803100c <__gethex+0x11c>
 8030f38:	f898 0001 	ldrb.w	r0, [r8, #1]
 8030f3c:	465d      	mov	r5, fp
 8030f3e:	f7ff ffc1 	bl	8030ec4 <__hexdig_fun>
 8030f42:	2800      	cmp	r0, #0
 8030f44:	d064      	beq.n	8031010 <__gethex+0x120>
 8030f46:	465a      	mov	r2, fp
 8030f48:	7810      	ldrb	r0, [r2, #0]
 8030f4a:	2830      	cmp	r0, #48	; 0x30
 8030f4c:	4690      	mov	r8, r2
 8030f4e:	f102 0201 	add.w	r2, r2, #1
 8030f52:	d0f9      	beq.n	8030f48 <__gethex+0x58>
 8030f54:	f7ff ffb6 	bl	8030ec4 <__hexdig_fun>
 8030f58:	2301      	movs	r3, #1
 8030f5a:	fab0 f480 	clz	r4, r0
 8030f5e:	0964      	lsrs	r4, r4, #5
 8030f60:	465e      	mov	r6, fp
 8030f62:	9301      	str	r3, [sp, #4]
 8030f64:	4642      	mov	r2, r8
 8030f66:	4615      	mov	r5, r2
 8030f68:	3201      	adds	r2, #1
 8030f6a:	7828      	ldrb	r0, [r5, #0]
 8030f6c:	f7ff ffaa 	bl	8030ec4 <__hexdig_fun>
 8030f70:	2800      	cmp	r0, #0
 8030f72:	d1f8      	bne.n	8030f66 <__gethex+0x76>
 8030f74:	4994      	ldr	r1, [pc, #592]	; (80311c8 <__gethex+0x2d8>)
 8030f76:	2201      	movs	r2, #1
 8030f78:	4628      	mov	r0, r5
 8030f7a:	f7fc fbef 	bl	802d75c <strncmp>
 8030f7e:	b978      	cbnz	r0, 8030fa0 <__gethex+0xb0>
 8030f80:	b946      	cbnz	r6, 8030f94 <__gethex+0xa4>
 8030f82:	1c6e      	adds	r6, r5, #1
 8030f84:	4632      	mov	r2, r6
 8030f86:	4615      	mov	r5, r2
 8030f88:	3201      	adds	r2, #1
 8030f8a:	7828      	ldrb	r0, [r5, #0]
 8030f8c:	f7ff ff9a 	bl	8030ec4 <__hexdig_fun>
 8030f90:	2800      	cmp	r0, #0
 8030f92:	d1f8      	bne.n	8030f86 <__gethex+0x96>
 8030f94:	1b73      	subs	r3, r6, r5
 8030f96:	009e      	lsls	r6, r3, #2
 8030f98:	e004      	b.n	8030fa4 <__gethex+0xb4>
 8030f9a:	2400      	movs	r4, #0
 8030f9c:	4626      	mov	r6, r4
 8030f9e:	e7e1      	b.n	8030f64 <__gethex+0x74>
 8030fa0:	2e00      	cmp	r6, #0
 8030fa2:	d1f7      	bne.n	8030f94 <__gethex+0xa4>
 8030fa4:	782b      	ldrb	r3, [r5, #0]
 8030fa6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8030faa:	2b50      	cmp	r3, #80	; 0x50
 8030fac:	d13d      	bne.n	803102a <__gethex+0x13a>
 8030fae:	786b      	ldrb	r3, [r5, #1]
 8030fb0:	2b2b      	cmp	r3, #43	; 0x2b
 8030fb2:	d02f      	beq.n	8031014 <__gethex+0x124>
 8030fb4:	2b2d      	cmp	r3, #45	; 0x2d
 8030fb6:	d031      	beq.n	803101c <__gethex+0x12c>
 8030fb8:	1c69      	adds	r1, r5, #1
 8030fba:	f04f 0b00 	mov.w	fp, #0
 8030fbe:	7808      	ldrb	r0, [r1, #0]
 8030fc0:	f7ff ff80 	bl	8030ec4 <__hexdig_fun>
 8030fc4:	1e42      	subs	r2, r0, #1
 8030fc6:	b2d2      	uxtb	r2, r2
 8030fc8:	2a18      	cmp	r2, #24
 8030fca:	d82e      	bhi.n	803102a <__gethex+0x13a>
 8030fcc:	f1a0 0210 	sub.w	r2, r0, #16
 8030fd0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8030fd4:	f7ff ff76 	bl	8030ec4 <__hexdig_fun>
 8030fd8:	f100 3cff 	add.w	ip, r0, #4294967295
 8030fdc:	fa5f fc8c 	uxtb.w	ip, ip
 8030fe0:	f1bc 0f18 	cmp.w	ip, #24
 8030fe4:	d91d      	bls.n	8031022 <__gethex+0x132>
 8030fe6:	f1bb 0f00 	cmp.w	fp, #0
 8030fea:	d000      	beq.n	8030fee <__gethex+0xfe>
 8030fec:	4252      	negs	r2, r2
 8030fee:	4416      	add	r6, r2
 8030ff0:	f8ca 1000 	str.w	r1, [sl]
 8030ff4:	b1dc      	cbz	r4, 803102e <__gethex+0x13e>
 8030ff6:	9b01      	ldr	r3, [sp, #4]
 8030ff8:	2b00      	cmp	r3, #0
 8030ffa:	bf14      	ite	ne
 8030ffc:	f04f 0800 	movne.w	r8, #0
 8031000:	f04f 0806 	moveq.w	r8, #6
 8031004:	4640      	mov	r0, r8
 8031006:	b005      	add	sp, #20
 8031008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803100c:	4645      	mov	r5, r8
 803100e:	4626      	mov	r6, r4
 8031010:	2401      	movs	r4, #1
 8031012:	e7c7      	b.n	8030fa4 <__gethex+0xb4>
 8031014:	f04f 0b00 	mov.w	fp, #0
 8031018:	1ca9      	adds	r1, r5, #2
 803101a:	e7d0      	b.n	8030fbe <__gethex+0xce>
 803101c:	f04f 0b01 	mov.w	fp, #1
 8031020:	e7fa      	b.n	8031018 <__gethex+0x128>
 8031022:	230a      	movs	r3, #10
 8031024:	fb03 0002 	mla	r0, r3, r2, r0
 8031028:	e7d0      	b.n	8030fcc <__gethex+0xdc>
 803102a:	4629      	mov	r1, r5
 803102c:	e7e0      	b.n	8030ff0 <__gethex+0x100>
 803102e:	eba5 0308 	sub.w	r3, r5, r8
 8031032:	3b01      	subs	r3, #1
 8031034:	4621      	mov	r1, r4
 8031036:	2b07      	cmp	r3, #7
 8031038:	dc0a      	bgt.n	8031050 <__gethex+0x160>
 803103a:	4648      	mov	r0, r9
 803103c:	f7fd fbfe 	bl	802e83c <_Balloc>
 8031040:	4604      	mov	r4, r0
 8031042:	b940      	cbnz	r0, 8031056 <__gethex+0x166>
 8031044:	4b61      	ldr	r3, [pc, #388]	; (80311cc <__gethex+0x2dc>)
 8031046:	4602      	mov	r2, r0
 8031048:	21e4      	movs	r1, #228	; 0xe4
 803104a:	4861      	ldr	r0, [pc, #388]	; (80311d0 <__gethex+0x2e0>)
 803104c:	f7fb f96e 	bl	802c32c <__assert_func>
 8031050:	3101      	adds	r1, #1
 8031052:	105b      	asrs	r3, r3, #1
 8031054:	e7ef      	b.n	8031036 <__gethex+0x146>
 8031056:	f100 0a14 	add.w	sl, r0, #20
 803105a:	2300      	movs	r3, #0
 803105c:	495a      	ldr	r1, [pc, #360]	; (80311c8 <__gethex+0x2d8>)
 803105e:	f8cd a004 	str.w	sl, [sp, #4]
 8031062:	469b      	mov	fp, r3
 8031064:	45a8      	cmp	r8, r5
 8031066:	d342      	bcc.n	80310ee <__gethex+0x1fe>
 8031068:	9801      	ldr	r0, [sp, #4]
 803106a:	f840 bb04 	str.w	fp, [r0], #4
 803106e:	eba0 000a 	sub.w	r0, r0, sl
 8031072:	1080      	asrs	r0, r0, #2
 8031074:	6120      	str	r0, [r4, #16]
 8031076:	ea4f 1840 	mov.w	r8, r0, lsl #5
 803107a:	4658      	mov	r0, fp
 803107c:	f7fd fcd0 	bl	802ea20 <__hi0bits>
 8031080:	683d      	ldr	r5, [r7, #0]
 8031082:	eba8 0000 	sub.w	r0, r8, r0
 8031086:	42a8      	cmp	r0, r5
 8031088:	dd59      	ble.n	803113e <__gethex+0x24e>
 803108a:	eba0 0805 	sub.w	r8, r0, r5
 803108e:	4641      	mov	r1, r8
 8031090:	4620      	mov	r0, r4
 8031092:	f7fe f85f 	bl	802f154 <__any_on>
 8031096:	4683      	mov	fp, r0
 8031098:	b1b8      	cbz	r0, 80310ca <__gethex+0x1da>
 803109a:	f108 33ff 	add.w	r3, r8, #4294967295
 803109e:	1159      	asrs	r1, r3, #5
 80310a0:	f003 021f 	and.w	r2, r3, #31
 80310a4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80310a8:	f04f 0b01 	mov.w	fp, #1
 80310ac:	fa0b f202 	lsl.w	r2, fp, r2
 80310b0:	420a      	tst	r2, r1
 80310b2:	d00a      	beq.n	80310ca <__gethex+0x1da>
 80310b4:	455b      	cmp	r3, fp
 80310b6:	dd06      	ble.n	80310c6 <__gethex+0x1d6>
 80310b8:	f1a8 0102 	sub.w	r1, r8, #2
 80310bc:	4620      	mov	r0, r4
 80310be:	f7fe f849 	bl	802f154 <__any_on>
 80310c2:	2800      	cmp	r0, #0
 80310c4:	d138      	bne.n	8031138 <__gethex+0x248>
 80310c6:	f04f 0b02 	mov.w	fp, #2
 80310ca:	4641      	mov	r1, r8
 80310cc:	4620      	mov	r0, r4
 80310ce:	f7ff fea7 	bl	8030e20 <rshift>
 80310d2:	4446      	add	r6, r8
 80310d4:	68bb      	ldr	r3, [r7, #8]
 80310d6:	42b3      	cmp	r3, r6
 80310d8:	da41      	bge.n	803115e <__gethex+0x26e>
 80310da:	4621      	mov	r1, r4
 80310dc:	4648      	mov	r0, r9
 80310de:	f7fd fbed 	bl	802e8bc <_Bfree>
 80310e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80310e4:	2300      	movs	r3, #0
 80310e6:	6013      	str	r3, [r2, #0]
 80310e8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80310ec:	e78a      	b.n	8031004 <__gethex+0x114>
 80310ee:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80310f2:	2a2e      	cmp	r2, #46	; 0x2e
 80310f4:	d014      	beq.n	8031120 <__gethex+0x230>
 80310f6:	2b20      	cmp	r3, #32
 80310f8:	d106      	bne.n	8031108 <__gethex+0x218>
 80310fa:	9b01      	ldr	r3, [sp, #4]
 80310fc:	f843 bb04 	str.w	fp, [r3], #4
 8031100:	f04f 0b00 	mov.w	fp, #0
 8031104:	9301      	str	r3, [sp, #4]
 8031106:	465b      	mov	r3, fp
 8031108:	7828      	ldrb	r0, [r5, #0]
 803110a:	9303      	str	r3, [sp, #12]
 803110c:	f7ff feda 	bl	8030ec4 <__hexdig_fun>
 8031110:	9b03      	ldr	r3, [sp, #12]
 8031112:	f000 000f 	and.w	r0, r0, #15
 8031116:	4098      	lsls	r0, r3
 8031118:	ea4b 0b00 	orr.w	fp, fp, r0
 803111c:	3304      	adds	r3, #4
 803111e:	e7a1      	b.n	8031064 <__gethex+0x174>
 8031120:	45a8      	cmp	r8, r5
 8031122:	d8e8      	bhi.n	80310f6 <__gethex+0x206>
 8031124:	2201      	movs	r2, #1
 8031126:	4628      	mov	r0, r5
 8031128:	9303      	str	r3, [sp, #12]
 803112a:	f7fc fb17 	bl	802d75c <strncmp>
 803112e:	4926      	ldr	r1, [pc, #152]	; (80311c8 <__gethex+0x2d8>)
 8031130:	9b03      	ldr	r3, [sp, #12]
 8031132:	2800      	cmp	r0, #0
 8031134:	d1df      	bne.n	80310f6 <__gethex+0x206>
 8031136:	e795      	b.n	8031064 <__gethex+0x174>
 8031138:	f04f 0b03 	mov.w	fp, #3
 803113c:	e7c5      	b.n	80310ca <__gethex+0x1da>
 803113e:	da0b      	bge.n	8031158 <__gethex+0x268>
 8031140:	eba5 0800 	sub.w	r8, r5, r0
 8031144:	4621      	mov	r1, r4
 8031146:	4642      	mov	r2, r8
 8031148:	4648      	mov	r0, r9
 803114a:	f7fd fdd1 	bl	802ecf0 <__lshift>
 803114e:	eba6 0608 	sub.w	r6, r6, r8
 8031152:	4604      	mov	r4, r0
 8031154:	f100 0a14 	add.w	sl, r0, #20
 8031158:	f04f 0b00 	mov.w	fp, #0
 803115c:	e7ba      	b.n	80310d4 <__gethex+0x1e4>
 803115e:	687b      	ldr	r3, [r7, #4]
 8031160:	42b3      	cmp	r3, r6
 8031162:	dd73      	ble.n	803124c <__gethex+0x35c>
 8031164:	1b9e      	subs	r6, r3, r6
 8031166:	42b5      	cmp	r5, r6
 8031168:	dc34      	bgt.n	80311d4 <__gethex+0x2e4>
 803116a:	68fb      	ldr	r3, [r7, #12]
 803116c:	2b02      	cmp	r3, #2
 803116e:	d023      	beq.n	80311b8 <__gethex+0x2c8>
 8031170:	2b03      	cmp	r3, #3
 8031172:	d025      	beq.n	80311c0 <__gethex+0x2d0>
 8031174:	2b01      	cmp	r3, #1
 8031176:	d115      	bne.n	80311a4 <__gethex+0x2b4>
 8031178:	42b5      	cmp	r5, r6
 803117a:	d113      	bne.n	80311a4 <__gethex+0x2b4>
 803117c:	2d01      	cmp	r5, #1
 803117e:	d10b      	bne.n	8031198 <__gethex+0x2a8>
 8031180:	9a02      	ldr	r2, [sp, #8]
 8031182:	687b      	ldr	r3, [r7, #4]
 8031184:	6013      	str	r3, [r2, #0]
 8031186:	2301      	movs	r3, #1
 8031188:	6123      	str	r3, [r4, #16]
 803118a:	f8ca 3000 	str.w	r3, [sl]
 803118e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8031190:	f04f 0862 	mov.w	r8, #98	; 0x62
 8031194:	601c      	str	r4, [r3, #0]
 8031196:	e735      	b.n	8031004 <__gethex+0x114>
 8031198:	1e69      	subs	r1, r5, #1
 803119a:	4620      	mov	r0, r4
 803119c:	f7fd ffda 	bl	802f154 <__any_on>
 80311a0:	2800      	cmp	r0, #0
 80311a2:	d1ed      	bne.n	8031180 <__gethex+0x290>
 80311a4:	4621      	mov	r1, r4
 80311a6:	4648      	mov	r0, r9
 80311a8:	f7fd fb88 	bl	802e8bc <_Bfree>
 80311ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80311ae:	2300      	movs	r3, #0
 80311b0:	6013      	str	r3, [r2, #0]
 80311b2:	f04f 0850 	mov.w	r8, #80	; 0x50
 80311b6:	e725      	b.n	8031004 <__gethex+0x114>
 80311b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80311ba:	2b00      	cmp	r3, #0
 80311bc:	d1f2      	bne.n	80311a4 <__gethex+0x2b4>
 80311be:	e7df      	b.n	8031180 <__gethex+0x290>
 80311c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80311c2:	2b00      	cmp	r3, #0
 80311c4:	d1dc      	bne.n	8031180 <__gethex+0x290>
 80311c6:	e7ed      	b.n	80311a4 <__gethex+0x2b4>
 80311c8:	08034a9c 	.word	0x08034a9c
 80311cc:	08034935 	.word	0x08034935
 80311d0:	08034c25 	.word	0x08034c25
 80311d4:	f106 38ff 	add.w	r8, r6, #4294967295
 80311d8:	f1bb 0f00 	cmp.w	fp, #0
 80311dc:	d133      	bne.n	8031246 <__gethex+0x356>
 80311de:	f1b8 0f00 	cmp.w	r8, #0
 80311e2:	d004      	beq.n	80311ee <__gethex+0x2fe>
 80311e4:	4641      	mov	r1, r8
 80311e6:	4620      	mov	r0, r4
 80311e8:	f7fd ffb4 	bl	802f154 <__any_on>
 80311ec:	4683      	mov	fp, r0
 80311ee:	ea4f 1268 	mov.w	r2, r8, asr #5
 80311f2:	2301      	movs	r3, #1
 80311f4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80311f8:	f008 081f 	and.w	r8, r8, #31
 80311fc:	fa03 f308 	lsl.w	r3, r3, r8
 8031200:	4213      	tst	r3, r2
 8031202:	4631      	mov	r1, r6
 8031204:	4620      	mov	r0, r4
 8031206:	bf18      	it	ne
 8031208:	f04b 0b02 	orrne.w	fp, fp, #2
 803120c:	1bad      	subs	r5, r5, r6
 803120e:	f7ff fe07 	bl	8030e20 <rshift>
 8031212:	687e      	ldr	r6, [r7, #4]
 8031214:	f04f 0802 	mov.w	r8, #2
 8031218:	f1bb 0f00 	cmp.w	fp, #0
 803121c:	d04a      	beq.n	80312b4 <__gethex+0x3c4>
 803121e:	68fb      	ldr	r3, [r7, #12]
 8031220:	2b02      	cmp	r3, #2
 8031222:	d016      	beq.n	8031252 <__gethex+0x362>
 8031224:	2b03      	cmp	r3, #3
 8031226:	d018      	beq.n	803125a <__gethex+0x36a>
 8031228:	2b01      	cmp	r3, #1
 803122a:	d109      	bne.n	8031240 <__gethex+0x350>
 803122c:	f01b 0f02 	tst.w	fp, #2
 8031230:	d006      	beq.n	8031240 <__gethex+0x350>
 8031232:	f8da 3000 	ldr.w	r3, [sl]
 8031236:	ea4b 0b03 	orr.w	fp, fp, r3
 803123a:	f01b 0f01 	tst.w	fp, #1
 803123e:	d10f      	bne.n	8031260 <__gethex+0x370>
 8031240:	f048 0810 	orr.w	r8, r8, #16
 8031244:	e036      	b.n	80312b4 <__gethex+0x3c4>
 8031246:	f04f 0b01 	mov.w	fp, #1
 803124a:	e7d0      	b.n	80311ee <__gethex+0x2fe>
 803124c:	f04f 0801 	mov.w	r8, #1
 8031250:	e7e2      	b.n	8031218 <__gethex+0x328>
 8031252:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8031254:	f1c3 0301 	rsb	r3, r3, #1
 8031258:	930f      	str	r3, [sp, #60]	; 0x3c
 803125a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 803125c:	2b00      	cmp	r3, #0
 803125e:	d0ef      	beq.n	8031240 <__gethex+0x350>
 8031260:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8031264:	f104 0214 	add.w	r2, r4, #20
 8031268:	ea4f 038b 	mov.w	r3, fp, lsl #2
 803126c:	9301      	str	r3, [sp, #4]
 803126e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8031272:	2300      	movs	r3, #0
 8031274:	4694      	mov	ip, r2
 8031276:	f852 1b04 	ldr.w	r1, [r2], #4
 803127a:	f1b1 3fff 	cmp.w	r1, #4294967295
 803127e:	d01e      	beq.n	80312be <__gethex+0x3ce>
 8031280:	3101      	adds	r1, #1
 8031282:	f8cc 1000 	str.w	r1, [ip]
 8031286:	f1b8 0f02 	cmp.w	r8, #2
 803128a:	f104 0214 	add.w	r2, r4, #20
 803128e:	d13d      	bne.n	803130c <__gethex+0x41c>
 8031290:	683b      	ldr	r3, [r7, #0]
 8031292:	3b01      	subs	r3, #1
 8031294:	42ab      	cmp	r3, r5
 8031296:	d10b      	bne.n	80312b0 <__gethex+0x3c0>
 8031298:	1169      	asrs	r1, r5, #5
 803129a:	2301      	movs	r3, #1
 803129c:	f005 051f 	and.w	r5, r5, #31
 80312a0:	fa03 f505 	lsl.w	r5, r3, r5
 80312a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80312a8:	421d      	tst	r5, r3
 80312aa:	bf18      	it	ne
 80312ac:	f04f 0801 	movne.w	r8, #1
 80312b0:	f048 0820 	orr.w	r8, r8, #32
 80312b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80312b6:	601c      	str	r4, [r3, #0]
 80312b8:	9b02      	ldr	r3, [sp, #8]
 80312ba:	601e      	str	r6, [r3, #0]
 80312bc:	e6a2      	b.n	8031004 <__gethex+0x114>
 80312be:	4290      	cmp	r0, r2
 80312c0:	f842 3c04 	str.w	r3, [r2, #-4]
 80312c4:	d8d6      	bhi.n	8031274 <__gethex+0x384>
 80312c6:	68a2      	ldr	r2, [r4, #8]
 80312c8:	4593      	cmp	fp, r2
 80312ca:	db17      	blt.n	80312fc <__gethex+0x40c>
 80312cc:	6861      	ldr	r1, [r4, #4]
 80312ce:	4648      	mov	r0, r9
 80312d0:	3101      	adds	r1, #1
 80312d2:	f7fd fab3 	bl	802e83c <_Balloc>
 80312d6:	4682      	mov	sl, r0
 80312d8:	b918      	cbnz	r0, 80312e2 <__gethex+0x3f2>
 80312da:	4b1b      	ldr	r3, [pc, #108]	; (8031348 <__gethex+0x458>)
 80312dc:	4602      	mov	r2, r0
 80312de:	2184      	movs	r1, #132	; 0x84
 80312e0:	e6b3      	b.n	803104a <__gethex+0x15a>
 80312e2:	6922      	ldr	r2, [r4, #16]
 80312e4:	3202      	adds	r2, #2
 80312e6:	f104 010c 	add.w	r1, r4, #12
 80312ea:	0092      	lsls	r2, r2, #2
 80312ec:	300c      	adds	r0, #12
 80312ee:	f7fc fbc2 	bl	802da76 <memcpy>
 80312f2:	4621      	mov	r1, r4
 80312f4:	4648      	mov	r0, r9
 80312f6:	f7fd fae1 	bl	802e8bc <_Bfree>
 80312fa:	4654      	mov	r4, sl
 80312fc:	6922      	ldr	r2, [r4, #16]
 80312fe:	1c51      	adds	r1, r2, #1
 8031300:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8031304:	6121      	str	r1, [r4, #16]
 8031306:	2101      	movs	r1, #1
 8031308:	6151      	str	r1, [r2, #20]
 803130a:	e7bc      	b.n	8031286 <__gethex+0x396>
 803130c:	6921      	ldr	r1, [r4, #16]
 803130e:	4559      	cmp	r1, fp
 8031310:	dd0b      	ble.n	803132a <__gethex+0x43a>
 8031312:	2101      	movs	r1, #1
 8031314:	4620      	mov	r0, r4
 8031316:	f7ff fd83 	bl	8030e20 <rshift>
 803131a:	68bb      	ldr	r3, [r7, #8]
 803131c:	3601      	adds	r6, #1
 803131e:	42b3      	cmp	r3, r6
 8031320:	f6ff aedb 	blt.w	80310da <__gethex+0x1ea>
 8031324:	f04f 0801 	mov.w	r8, #1
 8031328:	e7c2      	b.n	80312b0 <__gethex+0x3c0>
 803132a:	f015 051f 	ands.w	r5, r5, #31
 803132e:	d0f9      	beq.n	8031324 <__gethex+0x434>
 8031330:	9b01      	ldr	r3, [sp, #4]
 8031332:	441a      	add	r2, r3
 8031334:	f1c5 0520 	rsb	r5, r5, #32
 8031338:	f852 0c04 	ldr.w	r0, [r2, #-4]
 803133c:	f7fd fb70 	bl	802ea20 <__hi0bits>
 8031340:	42a8      	cmp	r0, r5
 8031342:	dbe6      	blt.n	8031312 <__gethex+0x422>
 8031344:	e7ee      	b.n	8031324 <__gethex+0x434>
 8031346:	bf00      	nop
 8031348:	08034935 	.word	0x08034935

0803134c <L_shift>:
 803134c:	f1c2 0208 	rsb	r2, r2, #8
 8031350:	0092      	lsls	r2, r2, #2
 8031352:	b570      	push	{r4, r5, r6, lr}
 8031354:	f1c2 0620 	rsb	r6, r2, #32
 8031358:	6843      	ldr	r3, [r0, #4]
 803135a:	6804      	ldr	r4, [r0, #0]
 803135c:	fa03 f506 	lsl.w	r5, r3, r6
 8031360:	432c      	orrs	r4, r5
 8031362:	40d3      	lsrs	r3, r2
 8031364:	6004      	str	r4, [r0, #0]
 8031366:	f840 3f04 	str.w	r3, [r0, #4]!
 803136a:	4288      	cmp	r0, r1
 803136c:	d3f4      	bcc.n	8031358 <L_shift+0xc>
 803136e:	bd70      	pop	{r4, r5, r6, pc}

08031370 <__match>:
 8031370:	b530      	push	{r4, r5, lr}
 8031372:	6803      	ldr	r3, [r0, #0]
 8031374:	3301      	adds	r3, #1
 8031376:	f811 4b01 	ldrb.w	r4, [r1], #1
 803137a:	b914      	cbnz	r4, 8031382 <__match+0x12>
 803137c:	6003      	str	r3, [r0, #0]
 803137e:	2001      	movs	r0, #1
 8031380:	bd30      	pop	{r4, r5, pc}
 8031382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8031386:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 803138a:	2d19      	cmp	r5, #25
 803138c:	bf98      	it	ls
 803138e:	3220      	addls	r2, #32
 8031390:	42a2      	cmp	r2, r4
 8031392:	d0f0      	beq.n	8031376 <__match+0x6>
 8031394:	2000      	movs	r0, #0
 8031396:	e7f3      	b.n	8031380 <__match+0x10>

08031398 <__hexnan>:
 8031398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803139c:	680b      	ldr	r3, [r1, #0]
 803139e:	6801      	ldr	r1, [r0, #0]
 80313a0:	115e      	asrs	r6, r3, #5
 80313a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80313a6:	f013 031f 	ands.w	r3, r3, #31
 80313aa:	b087      	sub	sp, #28
 80313ac:	bf18      	it	ne
 80313ae:	3604      	addne	r6, #4
 80313b0:	2500      	movs	r5, #0
 80313b2:	1f37      	subs	r7, r6, #4
 80313b4:	4682      	mov	sl, r0
 80313b6:	4690      	mov	r8, r2
 80313b8:	9301      	str	r3, [sp, #4]
 80313ba:	f846 5c04 	str.w	r5, [r6, #-4]
 80313be:	46b9      	mov	r9, r7
 80313c0:	463c      	mov	r4, r7
 80313c2:	9502      	str	r5, [sp, #8]
 80313c4:	46ab      	mov	fp, r5
 80313c6:	784a      	ldrb	r2, [r1, #1]
 80313c8:	1c4b      	adds	r3, r1, #1
 80313ca:	9303      	str	r3, [sp, #12]
 80313cc:	b342      	cbz	r2, 8031420 <__hexnan+0x88>
 80313ce:	4610      	mov	r0, r2
 80313d0:	9105      	str	r1, [sp, #20]
 80313d2:	9204      	str	r2, [sp, #16]
 80313d4:	f7ff fd76 	bl	8030ec4 <__hexdig_fun>
 80313d8:	2800      	cmp	r0, #0
 80313da:	d14f      	bne.n	803147c <__hexnan+0xe4>
 80313dc:	9a04      	ldr	r2, [sp, #16]
 80313de:	9905      	ldr	r1, [sp, #20]
 80313e0:	2a20      	cmp	r2, #32
 80313e2:	d818      	bhi.n	8031416 <__hexnan+0x7e>
 80313e4:	9b02      	ldr	r3, [sp, #8]
 80313e6:	459b      	cmp	fp, r3
 80313e8:	dd13      	ble.n	8031412 <__hexnan+0x7a>
 80313ea:	454c      	cmp	r4, r9
 80313ec:	d206      	bcs.n	80313fc <__hexnan+0x64>
 80313ee:	2d07      	cmp	r5, #7
 80313f0:	dc04      	bgt.n	80313fc <__hexnan+0x64>
 80313f2:	462a      	mov	r2, r5
 80313f4:	4649      	mov	r1, r9
 80313f6:	4620      	mov	r0, r4
 80313f8:	f7ff ffa8 	bl	803134c <L_shift>
 80313fc:	4544      	cmp	r4, r8
 80313fe:	d950      	bls.n	80314a2 <__hexnan+0x10a>
 8031400:	2300      	movs	r3, #0
 8031402:	f1a4 0904 	sub.w	r9, r4, #4
 8031406:	f844 3c04 	str.w	r3, [r4, #-4]
 803140a:	f8cd b008 	str.w	fp, [sp, #8]
 803140e:	464c      	mov	r4, r9
 8031410:	461d      	mov	r5, r3
 8031412:	9903      	ldr	r1, [sp, #12]
 8031414:	e7d7      	b.n	80313c6 <__hexnan+0x2e>
 8031416:	2a29      	cmp	r2, #41	; 0x29
 8031418:	d155      	bne.n	80314c6 <__hexnan+0x12e>
 803141a:	3102      	adds	r1, #2
 803141c:	f8ca 1000 	str.w	r1, [sl]
 8031420:	f1bb 0f00 	cmp.w	fp, #0
 8031424:	d04f      	beq.n	80314c6 <__hexnan+0x12e>
 8031426:	454c      	cmp	r4, r9
 8031428:	d206      	bcs.n	8031438 <__hexnan+0xa0>
 803142a:	2d07      	cmp	r5, #7
 803142c:	dc04      	bgt.n	8031438 <__hexnan+0xa0>
 803142e:	462a      	mov	r2, r5
 8031430:	4649      	mov	r1, r9
 8031432:	4620      	mov	r0, r4
 8031434:	f7ff ff8a 	bl	803134c <L_shift>
 8031438:	4544      	cmp	r4, r8
 803143a:	d934      	bls.n	80314a6 <__hexnan+0x10e>
 803143c:	f1a8 0204 	sub.w	r2, r8, #4
 8031440:	4623      	mov	r3, r4
 8031442:	f853 1b04 	ldr.w	r1, [r3], #4
 8031446:	f842 1f04 	str.w	r1, [r2, #4]!
 803144a:	429f      	cmp	r7, r3
 803144c:	d2f9      	bcs.n	8031442 <__hexnan+0xaa>
 803144e:	1b3b      	subs	r3, r7, r4
 8031450:	f023 0303 	bic.w	r3, r3, #3
 8031454:	3304      	adds	r3, #4
 8031456:	3e03      	subs	r6, #3
 8031458:	3401      	adds	r4, #1
 803145a:	42a6      	cmp	r6, r4
 803145c:	bf38      	it	cc
 803145e:	2304      	movcc	r3, #4
 8031460:	4443      	add	r3, r8
 8031462:	2200      	movs	r2, #0
 8031464:	f843 2b04 	str.w	r2, [r3], #4
 8031468:	429f      	cmp	r7, r3
 803146a:	d2fb      	bcs.n	8031464 <__hexnan+0xcc>
 803146c:	683b      	ldr	r3, [r7, #0]
 803146e:	b91b      	cbnz	r3, 8031478 <__hexnan+0xe0>
 8031470:	4547      	cmp	r7, r8
 8031472:	d126      	bne.n	80314c2 <__hexnan+0x12a>
 8031474:	2301      	movs	r3, #1
 8031476:	603b      	str	r3, [r7, #0]
 8031478:	2005      	movs	r0, #5
 803147a:	e025      	b.n	80314c8 <__hexnan+0x130>
 803147c:	3501      	adds	r5, #1
 803147e:	2d08      	cmp	r5, #8
 8031480:	f10b 0b01 	add.w	fp, fp, #1
 8031484:	dd06      	ble.n	8031494 <__hexnan+0xfc>
 8031486:	4544      	cmp	r4, r8
 8031488:	d9c3      	bls.n	8031412 <__hexnan+0x7a>
 803148a:	2300      	movs	r3, #0
 803148c:	f844 3c04 	str.w	r3, [r4, #-4]
 8031490:	2501      	movs	r5, #1
 8031492:	3c04      	subs	r4, #4
 8031494:	6822      	ldr	r2, [r4, #0]
 8031496:	f000 000f 	and.w	r0, r0, #15
 803149a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 803149e:	6020      	str	r0, [r4, #0]
 80314a0:	e7b7      	b.n	8031412 <__hexnan+0x7a>
 80314a2:	2508      	movs	r5, #8
 80314a4:	e7b5      	b.n	8031412 <__hexnan+0x7a>
 80314a6:	9b01      	ldr	r3, [sp, #4]
 80314a8:	2b00      	cmp	r3, #0
 80314aa:	d0df      	beq.n	803146c <__hexnan+0xd4>
 80314ac:	f1c3 0320 	rsb	r3, r3, #32
 80314b0:	f04f 32ff 	mov.w	r2, #4294967295
 80314b4:	40da      	lsrs	r2, r3
 80314b6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80314ba:	4013      	ands	r3, r2
 80314bc:	f846 3c04 	str.w	r3, [r6, #-4]
 80314c0:	e7d4      	b.n	803146c <__hexnan+0xd4>
 80314c2:	3f04      	subs	r7, #4
 80314c4:	e7d2      	b.n	803146c <__hexnan+0xd4>
 80314c6:	2004      	movs	r0, #4
 80314c8:	b007      	add	sp, #28
 80314ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080314ce <__ascii_mbtowc>:
 80314ce:	b082      	sub	sp, #8
 80314d0:	b901      	cbnz	r1, 80314d4 <__ascii_mbtowc+0x6>
 80314d2:	a901      	add	r1, sp, #4
 80314d4:	b142      	cbz	r2, 80314e8 <__ascii_mbtowc+0x1a>
 80314d6:	b14b      	cbz	r3, 80314ec <__ascii_mbtowc+0x1e>
 80314d8:	7813      	ldrb	r3, [r2, #0]
 80314da:	600b      	str	r3, [r1, #0]
 80314dc:	7812      	ldrb	r2, [r2, #0]
 80314de:	1e10      	subs	r0, r2, #0
 80314e0:	bf18      	it	ne
 80314e2:	2001      	movne	r0, #1
 80314e4:	b002      	add	sp, #8
 80314e6:	4770      	bx	lr
 80314e8:	4610      	mov	r0, r2
 80314ea:	e7fb      	b.n	80314e4 <__ascii_mbtowc+0x16>
 80314ec:	f06f 0001 	mvn.w	r0, #1
 80314f0:	e7f8      	b.n	80314e4 <__ascii_mbtowc+0x16>

080314f2 <_realloc_r>:
 80314f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80314f6:	4680      	mov	r8, r0
 80314f8:	4614      	mov	r4, r2
 80314fa:	460e      	mov	r6, r1
 80314fc:	b921      	cbnz	r1, 8031508 <_realloc_r+0x16>
 80314fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8031502:	4611      	mov	r1, r2
 8031504:	f7fa bf76 	b.w	802c3f4 <_malloc_r>
 8031508:	b92a      	cbnz	r2, 8031516 <_realloc_r+0x24>
 803150a:	f7fd f94b 	bl	802e7a4 <_free_r>
 803150e:	4625      	mov	r5, r4
 8031510:	4628      	mov	r0, r5
 8031512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8031516:	f000 f89c 	bl	8031652 <_malloc_usable_size_r>
 803151a:	4284      	cmp	r4, r0
 803151c:	4607      	mov	r7, r0
 803151e:	d802      	bhi.n	8031526 <_realloc_r+0x34>
 8031520:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8031524:	d812      	bhi.n	803154c <_realloc_r+0x5a>
 8031526:	4621      	mov	r1, r4
 8031528:	4640      	mov	r0, r8
 803152a:	f7fa ff63 	bl	802c3f4 <_malloc_r>
 803152e:	4605      	mov	r5, r0
 8031530:	2800      	cmp	r0, #0
 8031532:	d0ed      	beq.n	8031510 <_realloc_r+0x1e>
 8031534:	42bc      	cmp	r4, r7
 8031536:	4622      	mov	r2, r4
 8031538:	4631      	mov	r1, r6
 803153a:	bf28      	it	cs
 803153c:	463a      	movcs	r2, r7
 803153e:	f7fc fa9a 	bl	802da76 <memcpy>
 8031542:	4631      	mov	r1, r6
 8031544:	4640      	mov	r0, r8
 8031546:	f7fd f92d 	bl	802e7a4 <_free_r>
 803154a:	e7e1      	b.n	8031510 <_realloc_r+0x1e>
 803154c:	4635      	mov	r5, r6
 803154e:	e7df      	b.n	8031510 <_realloc_r+0x1e>

08031550 <_strtoul_l.constprop.0>:
 8031550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8031554:	4f36      	ldr	r7, [pc, #216]	; (8031630 <_strtoul_l.constprop.0+0xe0>)
 8031556:	4686      	mov	lr, r0
 8031558:	460d      	mov	r5, r1
 803155a:	4628      	mov	r0, r5
 803155c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8031560:	5d3e      	ldrb	r6, [r7, r4]
 8031562:	f016 0608 	ands.w	r6, r6, #8
 8031566:	d1f8      	bne.n	803155a <_strtoul_l.constprop.0+0xa>
 8031568:	2c2d      	cmp	r4, #45	; 0x2d
 803156a:	d130      	bne.n	80315ce <_strtoul_l.constprop.0+0x7e>
 803156c:	782c      	ldrb	r4, [r5, #0]
 803156e:	2601      	movs	r6, #1
 8031570:	1c85      	adds	r5, r0, #2
 8031572:	2b00      	cmp	r3, #0
 8031574:	d057      	beq.n	8031626 <_strtoul_l.constprop.0+0xd6>
 8031576:	2b10      	cmp	r3, #16
 8031578:	d109      	bne.n	803158e <_strtoul_l.constprop.0+0x3e>
 803157a:	2c30      	cmp	r4, #48	; 0x30
 803157c:	d107      	bne.n	803158e <_strtoul_l.constprop.0+0x3e>
 803157e:	7828      	ldrb	r0, [r5, #0]
 8031580:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8031584:	2858      	cmp	r0, #88	; 0x58
 8031586:	d149      	bne.n	803161c <_strtoul_l.constprop.0+0xcc>
 8031588:	786c      	ldrb	r4, [r5, #1]
 803158a:	2310      	movs	r3, #16
 803158c:	3502      	adds	r5, #2
 803158e:	f04f 38ff 	mov.w	r8, #4294967295
 8031592:	2700      	movs	r7, #0
 8031594:	fbb8 f8f3 	udiv	r8, r8, r3
 8031598:	fb03 f908 	mul.w	r9, r3, r8
 803159c:	ea6f 0909 	mvn.w	r9, r9
 80315a0:	4638      	mov	r0, r7
 80315a2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80315a6:	f1bc 0f09 	cmp.w	ip, #9
 80315aa:	d815      	bhi.n	80315d8 <_strtoul_l.constprop.0+0x88>
 80315ac:	4664      	mov	r4, ip
 80315ae:	42a3      	cmp	r3, r4
 80315b0:	dd23      	ble.n	80315fa <_strtoul_l.constprop.0+0xaa>
 80315b2:	f1b7 3fff 	cmp.w	r7, #4294967295
 80315b6:	d007      	beq.n	80315c8 <_strtoul_l.constprop.0+0x78>
 80315b8:	4580      	cmp	r8, r0
 80315ba:	d31b      	bcc.n	80315f4 <_strtoul_l.constprop.0+0xa4>
 80315bc:	d101      	bne.n	80315c2 <_strtoul_l.constprop.0+0x72>
 80315be:	45a1      	cmp	r9, r4
 80315c0:	db18      	blt.n	80315f4 <_strtoul_l.constprop.0+0xa4>
 80315c2:	fb00 4003 	mla	r0, r0, r3, r4
 80315c6:	2701      	movs	r7, #1
 80315c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80315cc:	e7e9      	b.n	80315a2 <_strtoul_l.constprop.0+0x52>
 80315ce:	2c2b      	cmp	r4, #43	; 0x2b
 80315d0:	bf04      	itt	eq
 80315d2:	782c      	ldrbeq	r4, [r5, #0]
 80315d4:	1c85      	addeq	r5, r0, #2
 80315d6:	e7cc      	b.n	8031572 <_strtoul_l.constprop.0+0x22>
 80315d8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80315dc:	f1bc 0f19 	cmp.w	ip, #25
 80315e0:	d801      	bhi.n	80315e6 <_strtoul_l.constprop.0+0x96>
 80315e2:	3c37      	subs	r4, #55	; 0x37
 80315e4:	e7e3      	b.n	80315ae <_strtoul_l.constprop.0+0x5e>
 80315e6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80315ea:	f1bc 0f19 	cmp.w	ip, #25
 80315ee:	d804      	bhi.n	80315fa <_strtoul_l.constprop.0+0xaa>
 80315f0:	3c57      	subs	r4, #87	; 0x57
 80315f2:	e7dc      	b.n	80315ae <_strtoul_l.constprop.0+0x5e>
 80315f4:	f04f 37ff 	mov.w	r7, #4294967295
 80315f8:	e7e6      	b.n	80315c8 <_strtoul_l.constprop.0+0x78>
 80315fa:	1c7b      	adds	r3, r7, #1
 80315fc:	d106      	bne.n	803160c <_strtoul_l.constprop.0+0xbc>
 80315fe:	2322      	movs	r3, #34	; 0x22
 8031600:	f8ce 3000 	str.w	r3, [lr]
 8031604:	4638      	mov	r0, r7
 8031606:	b932      	cbnz	r2, 8031616 <_strtoul_l.constprop.0+0xc6>
 8031608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 803160c:	b106      	cbz	r6, 8031610 <_strtoul_l.constprop.0+0xc0>
 803160e:	4240      	negs	r0, r0
 8031610:	2a00      	cmp	r2, #0
 8031612:	d0f9      	beq.n	8031608 <_strtoul_l.constprop.0+0xb8>
 8031614:	b107      	cbz	r7, 8031618 <_strtoul_l.constprop.0+0xc8>
 8031616:	1e69      	subs	r1, r5, #1
 8031618:	6011      	str	r1, [r2, #0]
 803161a:	e7f5      	b.n	8031608 <_strtoul_l.constprop.0+0xb8>
 803161c:	2430      	movs	r4, #48	; 0x30
 803161e:	2b00      	cmp	r3, #0
 8031620:	d1b5      	bne.n	803158e <_strtoul_l.constprop.0+0x3e>
 8031622:	2308      	movs	r3, #8
 8031624:	e7b3      	b.n	803158e <_strtoul_l.constprop.0+0x3e>
 8031626:	2c30      	cmp	r4, #48	; 0x30
 8031628:	d0a9      	beq.n	803157e <_strtoul_l.constprop.0+0x2e>
 803162a:	230a      	movs	r3, #10
 803162c:	e7af      	b.n	803158e <_strtoul_l.constprop.0+0x3e>
 803162e:	bf00      	nop
 8031630:	08034af1 	.word	0x08034af1

08031634 <_strtoul_r>:
 8031634:	f7ff bf8c 	b.w	8031550 <_strtoul_l.constprop.0>

08031638 <__ascii_wctomb>:
 8031638:	b149      	cbz	r1, 803164e <__ascii_wctomb+0x16>
 803163a:	2aff      	cmp	r2, #255	; 0xff
 803163c:	bf85      	ittet	hi
 803163e:	238a      	movhi	r3, #138	; 0x8a
 8031640:	6003      	strhi	r3, [r0, #0]
 8031642:	700a      	strbls	r2, [r1, #0]
 8031644:	f04f 30ff 	movhi.w	r0, #4294967295
 8031648:	bf98      	it	ls
 803164a:	2001      	movls	r0, #1
 803164c:	4770      	bx	lr
 803164e:	4608      	mov	r0, r1
 8031650:	4770      	bx	lr

08031652 <_malloc_usable_size_r>:
 8031652:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8031656:	1f18      	subs	r0, r3, #4
 8031658:	2b00      	cmp	r3, #0
 803165a:	bfbc      	itt	lt
 803165c:	580b      	ldrlt	r3, [r1, r0]
 803165e:	18c0      	addlt	r0, r0, r3
 8031660:	4770      	bx	lr
	...

08031664 <_init>:
 8031664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031666:	bf00      	nop
 8031668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803166a:	bc08      	pop	{r3}
 803166c:	469e      	mov	lr, r3
 803166e:	4770      	bx	lr

08031670 <_fini>:
 8031670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031672:	bf00      	nop
 8031674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8031676:	bc08      	pop	{r3}
 8031678:	469e      	mov	lr, r3
 803167a:	4770      	bx	lr
