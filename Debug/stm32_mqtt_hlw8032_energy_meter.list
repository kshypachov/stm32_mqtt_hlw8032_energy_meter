
stm32_mqtt_hlw8032_energy_meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001febc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000033d8  08020060  08020060  00030060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023438  08023438  000402f8  2**0
                  CONTENTS
  4 .ARM          00000008  08023438  08023438  00033438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023440  08023440  000402f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023440  08023440  00033440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023444  08023444  00033444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  08023448  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d798  200002f8  08023740  000402f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000da90  08023740  0004da90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000402f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040328  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e426  00000000  00000000  0004036b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000078d5  00000000  00000000  0006e791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002a00  00000000  00000000  00076068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000021ec  00000000  00000000  00078a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000a2e7  00000000  00000000  0007ac54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031886  00000000  00000000  00084f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a9838  00000000  00000000  000b67c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000c7c0  00000000  00000000  0015fffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0016c7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002f8 	.word	0x200002f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08020044 	.word	0x08020044

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002fc 	.word	0x200002fc
 80001dc:	08020044 	.word	0x08020044

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9ba 	b.w	8001044 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f850 	bl	8000d7c <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__popcountsi2>:
 8000ce8:	0843      	lsrs	r3, r0, #1
 8000cea:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000cee:	1ac0      	subs	r0, r0, r3
 8000cf0:	0883      	lsrs	r3, r0, #2
 8000cf2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8000cf6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8000cfa:	4418      	add	r0, r3
 8000cfc:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000d00:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8000d04:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000d08:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000d0c:	0e00      	lsrs	r0, r0, #24
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_d2lz>:
 8000d10:	b538      	push	{r3, r4, r5, lr}
 8000d12:	2200      	movs	r2, #0
 8000d14:	2300      	movs	r3, #0
 8000d16:	4604      	mov	r4, r0
 8000d18:	460d      	mov	r5, r1
 8000d1a:	f7ff fef7 	bl	8000b0c <__aeabi_dcmplt>
 8000d1e:	b928      	cbnz	r0, 8000d2c <__aeabi_d2lz+0x1c>
 8000d20:	4620      	mov	r0, r4
 8000d22:	4629      	mov	r1, r5
 8000d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d28:	f000 b80a 	b.w	8000d40 <__aeabi_d2ulz>
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d32:	f000 f805 	bl	8000d40 <__aeabi_d2ulz>
 8000d36:	4240      	negs	r0, r0
 8000d38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3c:	bd38      	pop	{r3, r4, r5, pc}
 8000d3e:	bf00      	nop

08000d40 <__aeabi_d2ulz>:
 8000d40:	b5d0      	push	{r4, r6, r7, lr}
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <__aeabi_d2ulz+0x34>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	4606      	mov	r6, r0
 8000d48:	460f      	mov	r7, r1
 8000d4a:	f7ff fc6d 	bl	8000628 <__aeabi_dmul>
 8000d4e:	f7ff ff43 	bl	8000bd8 <__aeabi_d2uiz>
 8000d52:	4604      	mov	r4, r0
 8000d54:	f7ff fbee 	bl	8000534 <__aeabi_ui2d>
 8000d58:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <__aeabi_d2ulz+0x38>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f7ff fc64 	bl	8000628 <__aeabi_dmul>
 8000d60:	4602      	mov	r2, r0
 8000d62:	460b      	mov	r3, r1
 8000d64:	4630      	mov	r0, r6
 8000d66:	4639      	mov	r1, r7
 8000d68:	f7ff faa6 	bl	80002b8 <__aeabi_dsub>
 8000d6c:	f7ff ff34 	bl	8000bd8 <__aeabi_d2uiz>
 8000d70:	4621      	mov	r1, r4
 8000d72:	bdd0      	pop	{r4, r6, r7, pc}
 8000d74:	3df00000 	.word	0x3df00000
 8000d78:	41f00000 	.word	0x41f00000

08000d7c <__udivmoddi4>:
 8000d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d80:	9e08      	ldr	r6, [sp, #32]
 8000d82:	460d      	mov	r5, r1
 8000d84:	4604      	mov	r4, r0
 8000d86:	460f      	mov	r7, r1
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d14a      	bne.n	8000e22 <__udivmoddi4+0xa6>
 8000d8c:	428a      	cmp	r2, r1
 8000d8e:	4694      	mov	ip, r2
 8000d90:	d965      	bls.n	8000e5e <__udivmoddi4+0xe2>
 8000d92:	fab2 f382 	clz	r3, r2
 8000d96:	b143      	cbz	r3, 8000daa <__udivmoddi4+0x2e>
 8000d98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d9c:	f1c3 0220 	rsb	r2, r3, #32
 8000da0:	409f      	lsls	r7, r3
 8000da2:	fa20 f202 	lsr.w	r2, r0, r2
 8000da6:	4317      	orrs	r7, r2
 8000da8:	409c      	lsls	r4, r3
 8000daa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dae:	fa1f f58c 	uxth.w	r5, ip
 8000db2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000db6:	0c22      	lsrs	r2, r4, #16
 8000db8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dbc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000dc0:	fb01 f005 	mul.w	r0, r1, r5
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	d90a      	bls.n	8000dde <__udivmoddi4+0x62>
 8000dc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000dcc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dd0:	f080 811c 	bcs.w	800100c <__udivmoddi4+0x290>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f240 8119 	bls.w	800100c <__udivmoddi4+0x290>
 8000dda:	3902      	subs	r1, #2
 8000ddc:	4462      	add	r2, ip
 8000dde:	1a12      	subs	r2, r2, r0
 8000de0:	b2a4      	uxth	r4, r4
 8000de2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000de6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dee:	fb00 f505 	mul.w	r5, r0, r5
 8000df2:	42a5      	cmp	r5, r4
 8000df4:	d90a      	bls.n	8000e0c <__udivmoddi4+0x90>
 8000df6:	eb1c 0404 	adds.w	r4, ip, r4
 8000dfa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfe:	f080 8107 	bcs.w	8001010 <__udivmoddi4+0x294>
 8000e02:	42a5      	cmp	r5, r4
 8000e04:	f240 8104 	bls.w	8001010 <__udivmoddi4+0x294>
 8000e08:	4464      	add	r4, ip
 8000e0a:	3802      	subs	r0, #2
 8000e0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e10:	1b64      	subs	r4, r4, r5
 8000e12:	2100      	movs	r1, #0
 8000e14:	b11e      	cbz	r6, 8000e1e <__udivmoddi4+0xa2>
 8000e16:	40dc      	lsrs	r4, r3
 8000e18:	2300      	movs	r3, #0
 8000e1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0xbc>
 8000e26:	2e00      	cmp	r6, #0
 8000e28:	f000 80ed 	beq.w	8001006 <__udivmoddi4+0x28a>
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000e32:	4608      	mov	r0, r1
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	fab3 f183 	clz	r1, r3
 8000e3c:	2900      	cmp	r1, #0
 8000e3e:	d149      	bne.n	8000ed4 <__udivmoddi4+0x158>
 8000e40:	42ab      	cmp	r3, r5
 8000e42:	d302      	bcc.n	8000e4a <__udivmoddi4+0xce>
 8000e44:	4282      	cmp	r2, r0
 8000e46:	f200 80f8 	bhi.w	800103a <__udivmoddi4+0x2be>
 8000e4a:	1a84      	subs	r4, r0, r2
 8000e4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000e50:	2001      	movs	r0, #1
 8000e52:	4617      	mov	r7, r2
 8000e54:	2e00      	cmp	r6, #0
 8000e56:	d0e2      	beq.n	8000e1e <__udivmoddi4+0xa2>
 8000e58:	e9c6 4700 	strd	r4, r7, [r6]
 8000e5c:	e7df      	b.n	8000e1e <__udivmoddi4+0xa2>
 8000e5e:	b902      	cbnz	r2, 8000e62 <__udivmoddi4+0xe6>
 8000e60:	deff      	udf	#255	; 0xff
 8000e62:	fab2 f382 	clz	r3, r2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f040 8090 	bne.w	8000f8c <__udivmoddi4+0x210>
 8000e6c:	1a8a      	subs	r2, r1, r2
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2101      	movs	r1, #1
 8000e78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000e80:	0c22      	lsrs	r2, r4, #16
 8000e82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e86:	fb0e f005 	mul.w	r0, lr, r5
 8000e8a:	4290      	cmp	r0, r2
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x124>
 8000e8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000e92:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x122>
 8000e98:	4290      	cmp	r0, r2
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2b8>
 8000e9e:	4645      	mov	r5, r8
 8000ea0:	1a12      	subs	r2, r2, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea8:	fb07 2210 	mls	r2, r7, r0, r2
 8000eac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x14e>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x14c>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2c2>
 8000ec8:	4610      	mov	r0, r2
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ed2:	e79f      	b.n	8000e14 <__udivmoddi4+0x98>
 8000ed4:	f1c1 0720 	rsb	r7, r1, #32
 8000ed8:	408b      	lsls	r3, r1
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ee6:	fa20 f307 	lsr.w	r3, r0, r7
 8000eea:	40fd      	lsrs	r5, r7
 8000eec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef0:	4323      	orrs	r3, r4
 8000ef2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ef6:	fa1f fe8c 	uxth.w	lr, ip
 8000efa:	fb09 5518 	mls	r5, r9, r8, r5
 8000efe:	0c1c      	lsrs	r4, r3, #16
 8000f00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f04:	fb08 f50e 	mul.w	r5, r8, lr
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b0>
 8000f14:	eb1c 0404 	adds.w	r4, ip, r4
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2b4>
 8000f20:	42a5      	cmp	r5, r4
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2b4>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4464      	add	r4, ip
 8000f2c:	1b64      	subs	r4, r4, r5
 8000f2e:	b29d      	uxth	r5, r3
 8000f30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f34:	fb09 4413 	mls	r4, r9, r3, r4
 8000f38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f40:	45a6      	cmp	lr, r4
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1da>
 8000f44:	eb1c 0404 	adds.w	r4, ip, r4
 8000f48:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2ac>
 8000f4e:	45a6      	cmp	lr, r4
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2ac>
 8000f52:	3b02      	subs	r3, #2
 8000f54:	4464      	add	r4, ip
 8000f56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000f5e:	eba4 040e 	sub.w	r4, r4, lr
 8000f62:	42ac      	cmp	r4, r5
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46ae      	mov	lr, r5
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x29c>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x298>
 8000f6c:	b156      	cbz	r6, 8000f84 <__udivmoddi4+0x208>
 8000f6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000f72:	eb64 040e 	sbc.w	r4, r4, lr
 8000f76:	fa04 f707 	lsl.w	r7, r4, r7
 8000f7a:	40ca      	lsrs	r2, r1
 8000f7c:	40cc      	lsrs	r4, r1
 8000f7e:	4317      	orrs	r7, r2
 8000f80:	e9c6 7400 	strd	r7, r4, [r6]
 8000f84:	4618      	mov	r0, r3
 8000f86:	2100      	movs	r1, #0
 8000f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8c:	f1c3 0120 	rsb	r1, r3, #32
 8000f90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f94:	fa20 f201 	lsr.w	r2, r0, r1
 8000f98:	fa25 f101 	lsr.w	r1, r5, r1
 8000f9c:	409d      	lsls	r5, r3
 8000f9e:	432a      	orrs	r2, r5
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fac:	fb07 1510 	mls	r5, r7, r0, r1
 8000fb0:	0c11      	lsrs	r1, r2, #16
 8000fb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fb6:	fb00 f50e 	mul.w	r5, r0, lr
 8000fba:	428d      	cmp	r5, r1
 8000fbc:	fa04 f403 	lsl.w	r4, r4, r3
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x258>
 8000fc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b0>
 8000fcc:	428d      	cmp	r5, r1
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b0>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4461      	add	r1, ip
 8000fd4:	1b49      	subs	r1, r1, r5
 8000fd6:	b292      	uxth	r2, r2
 8000fd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fdc:	fb07 1115 	mls	r1, r7, r5, r1
 8000fe0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe4:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe8:	4291      	cmp	r1, r2
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x282>
 8000fec:	eb1c 0202 	adds.w	r2, ip, r2
 8000ff0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2a8>
 8000ff6:	4291      	cmp	r1, r2
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2a8>
 8000ffa:	3d02      	subs	r5, #2
 8000ffc:	4462      	add	r2, ip
 8000ffe:	1a52      	subs	r2, r2, r1
 8001000:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0xfc>
 8001006:	4631      	mov	r1, r6
 8001008:	4630      	mov	r0, r6
 800100a:	e708      	b.n	8000e1e <__udivmoddi4+0xa2>
 800100c:	4639      	mov	r1, r7
 800100e:	e6e6      	b.n	8000dde <__udivmoddi4+0x62>
 8001010:	4610      	mov	r0, r2
 8001012:	e6fb      	b.n	8000e0c <__udivmoddi4+0x90>
 8001014:	4548      	cmp	r0, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f0>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001020:	3b01      	subs	r3, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f0>
 8001024:	4645      	mov	r5, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x282>
 8001028:	462b      	mov	r3, r5
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1da>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x258>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b0>
 8001034:	3d02      	subs	r5, #2
 8001036:	4462      	add	r2, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x124>
 800103a:	4608      	mov	r0, r1
 800103c:	e70a      	b.n	8000e54 <__udivmoddi4+0xd8>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x14e>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <HAL_UARTEx_RxEventCallback>:
void EthMutexRelease (void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	807b      	strh	r3, [r7, #2]

	if (huart->Instance == USART2){
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a08      	ldr	r2, [pc, #32]	; (800107c <HAL_UARTEx_RxEventCallback+0x34>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d10a      	bne.n	8001074 <HAL_UARTEx_RxEventCallback+0x2c>
		if (Size == 24){
 800105e:	887b      	ldrh	r3, [r7, #2]
 8001060:	2b18      	cmp	r3, #24
 8001062:	d107      	bne.n	8001074 <HAL_UARTEx_RxEventCallback+0x2c>
		//	if (!osMessageQueueGetCount(Q_hlw8032_rawHandle)){
				osMessageQueuePut(rowPowerSensorQHandle, &data_bufer, 0, 0);
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_UARTEx_RxEventCallback+0x38>)
 8001066:	6818      	ldr	r0, [r3, #0]
 8001068:	2300      	movs	r3, #0
 800106a:	2200      	movs	r2, #0
 800106c:	4905      	ldr	r1, [pc, #20]	; (8001084 <HAL_UARTEx_RxEventCallback+0x3c>)
 800106e:	f00e fc23 	bl	800f8b8 <osMessageQueuePut>
		//	}
			//copy data to queue
			__NOP();
 8001072:	bf00      	nop
			//set data ready flag
		}
	//HAL_UARTEx_ReceiveToIdle_IT(&huart1, data_bufer,  24);
	}
	//HAL_UARTEx_ReceiveToIdle_IT(&huart1, data_bufer,  24);
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40004400 	.word	0x40004400
 8001080:	20000434 	.word	0x20000434
 8001084:	2000045c 	.word	0x2000045c

08001088 <EthMutexTake>:

void EthMutexTake(void){
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	osMutexAcquire(NetworkHandle, osWaitForever);
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <EthMutexTake+0x18>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	4618      	mov	r0, r3
 8001096:	f00e fb14 	bl	800f6c2 <osMutexAcquire>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	2000044c 	.word	0x2000044c

080010a4 <EthMutexRelease>:

void EthMutexRelease(void){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	osMutexRelease(NetworkHandle);
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <EthMutexRelease+0x14>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f00e fb53 	bl	800f758 <osMutexRelease>
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2000044c 	.word	0x2000044c

080010bc <LfsMutexTake>:

void LfsMutexTake(void){
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	osMutexAcquire(LFSHandle, osWaitForever);
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <LfsMutexTake+0x18>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f04f 31ff 	mov.w	r1, #4294967295
 80010c8:	4618      	mov	r0, r3
 80010ca:	f00e fafa 	bl	800f6c2 <osMutexAcquire>
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000450 	.word	0x20000450

080010d8 <LfsMutexRelease>:

void LfsMutexRelease(void){
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	osMutexRelease(LFSHandle);
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <LfsMutexRelease+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f00e fb39 	bl	800f758 <osMutexRelease>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000450 	.word	0x20000450

080010f0 <SocketMutexTake>:

void SocketMutexTake(void){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	osMutexAcquire(SocketHandle, osWaitForever);
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <SocketMutexTake+0x18>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f04f 31ff 	mov.w	r1, #4294967295
 80010fc:	4618      	mov	r0, r3
 80010fe:	f00e fae0 	bl	800f6c2 <osMutexAcquire>
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000454 	.word	0x20000454

0800110c <SocketMutexRelease>:

void SocketMutexRelease(void){
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	osMutexRelease(SocketHandle);
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <SocketMutexRelease+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4618      	mov	r0, r3
 8001116:	f00e fb1f 	bl	800f758 <osMutexRelease>
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000454 	.word	0x20000454

08001124 <ServiceSockMutexTake>:

void ServiceSockMutexTake(){
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	osMutexAcquire(ServiceSocketHandle, osWaitForever);
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <ServiceSockMutexTake+0x18>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f04f 31ff 	mov.w	r1, #4294967295
 8001130:	4618      	mov	r0, r3
 8001132:	f00e fac6 	bl	800f6c2 <osMutexAcquire>
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000458 	.word	0x20000458

08001140 <ServiceSockMutexRelease>:

void ServiceSockMutexRelease(){
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	osMutexRelease(ServiceSocketHandle);
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <ServiceSockMutexRelease+0x14>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f00e fb05 	bl	800f758 <osMutexRelease>
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000458 	.word	0x20000458

08001158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115c:	f003 fcd2 	bl	8004b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001160:	f000 f8f8 	bl	8001354 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  dns_service_reg_cb_net_ready(assigned_ip);
 8001164:	484e      	ldr	r0, [pc, #312]	; (80012a0 <main+0x148>)
 8001166:	f00a fe61 	bl	800be2c <dns_service_reg_cb_net_ready>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116a:	f000 fa09 	bl	8001580 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800116e:	f000 f9db 	bl	8001528 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001172:	f000 f96d 	bl	8001450 <MX_SPI1_Init>
  MX_SPI3_Init();
 8001176:	f000 f9a1 	bl	80014bc <MX_SPI3_Init>
  MX_MBEDTLS_Init();
 800117a:	f00e f89b 	bl	800f2b4 <MX_MBEDTLS_Init>
  MX_CRC_Init();
 800117e:	f000 f953 	bl	8001428 <MX_CRC_Init>
  /* Call PreOsInit function */
  MX_MBEDTLS_Init();
 8001182:	f00e f897 	bl	800f2b4 <MX_MBEDTLS_Init>
//  if (EthernetEthPool == NULL) Error_Handler();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001186:	f00e f8e1 	bl	800f34c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Network */
  NetworkHandle = osMutexNew(&Network_attributes);
 800118a:	4846      	ldr	r0, [pc, #280]	; (80012a4 <main+0x14c>)
 800118c:	f00e fa13 	bl	800f5b6 <osMutexNew>
 8001190:	4603      	mov	r3, r0
 8001192:	4a45      	ldr	r2, [pc, #276]	; (80012a8 <main+0x150>)
 8001194:	6013      	str	r3, [r2, #0]

  /* creation of LFS */
  LFSHandle = osMutexNew(&LFS_attributes);
 8001196:	4845      	ldr	r0, [pc, #276]	; (80012ac <main+0x154>)
 8001198:	f00e fa0d 	bl	800f5b6 <osMutexNew>
 800119c:	4603      	mov	r3, r0
 800119e:	4a44      	ldr	r2, [pc, #272]	; (80012b0 <main+0x158>)
 80011a0:	6013      	str	r3, [r2, #0]

  /* creation of Socket */
  SocketHandle = osMutexNew(&Socket_attributes);
 80011a2:	4844      	ldr	r0, [pc, #272]	; (80012b4 <main+0x15c>)
 80011a4:	f00e fa07 	bl	800f5b6 <osMutexNew>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4a43      	ldr	r2, [pc, #268]	; (80012b8 <main+0x160>)
 80011ac:	6013      	str	r3, [r2, #0]

  /* creation of ServiceSocket */
  ServiceSocketHandle = osMutexNew(&ServiceSocket_attributes);
 80011ae:	4843      	ldr	r0, [pc, #268]	; (80012bc <main+0x164>)
 80011b0:	f00e fa01 	bl	800f5b6 <osMutexNew>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4a42      	ldr	r2, [pc, #264]	; (80012c0 <main+0x168>)
 80011b8:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of rowPowerSensorQ */
  rowPowerSensorQHandle = osMessageQueueNew (1, 30, &rowPowerSensorQ_attributes);
 80011ba:	4a42      	ldr	r2, [pc, #264]	; (80012c4 <main+0x16c>)
 80011bc:	211e      	movs	r1, #30
 80011be:	2001      	movs	r0, #1
 80011c0:	f00e fb07 	bl	800f7d2 <osMessageQueueNew>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4a40      	ldr	r2, [pc, #256]	; (80012c8 <main+0x170>)
 80011c8:	6013      	str	r3, [r2, #0]

  /* creation of EthernetInfoQ */
  EthernetInfoQHandle = osMessageQueueNew (1, sizeof(Ethernet_info_struct), &EthernetInfoQ_attributes);
 80011ca:	4a40      	ldr	r2, [pc, #256]	; (80012cc <main+0x174>)
 80011cc:	2120      	movs	r1, #32
 80011ce:	2001      	movs	r0, #1
 80011d0:	f00e faff 	bl	800f7d2 <osMessageQueueNew>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a3e      	ldr	r2, [pc, #248]	; (80012d0 <main+0x178>)
 80011d8:	6013      	str	r3, [r2, #0]

  /* creation of PowerDataQ */
  PowerDataQHandle = osMessageQueueNew (1, sizeof(PowerSensStruct), &PowerDataQ_attributes);
 80011da:	4a3e      	ldr	r2, [pc, #248]	; (80012d4 <main+0x17c>)
 80011dc:	2118      	movs	r1, #24
 80011de:	2001      	movs	r0, #1
 80011e0:	f00e faf7 	bl	800f7d2 <osMessageQueueNew>
 80011e4:	4603      	mov	r3, r0
 80011e6:	4a3c      	ldr	r2, [pc, #240]	; (80012d8 <main+0x180>)
 80011e8:	6013      	str	r3, [r2, #0]

  /* creation of Curr_sensor_settings */
  Curr_sensor_settingsHandle = osMessageQueueNew (1, sizeof(P_sens_sett_struct), &Curr_sensor_settings_attributes);
 80011ea:	4a3c      	ldr	r2, [pc, #240]	; (80012dc <main+0x184>)
 80011ec:	2108      	movs	r1, #8
 80011ee:	2001      	movs	r0, #1
 80011f0:	f00e faef 	bl	800f7d2 <osMessageQueueNew>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a3a      	ldr	r2, [pc, #232]	; (80012e0 <main+0x188>)
 80011f8:	6013      	str	r3, [r2, #0]

  /* creation of mqttQ */
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 80011fa:	4a3a      	ldr	r2, [pc, #232]	; (80012e4 <main+0x18c>)
 80011fc:	21c6      	movs	r1, #198	; 0xc6
 80011fe:	2001      	movs	r0, #1
 8001200:	f00e fae7 	bl	800f7d2 <osMessageQueueNew>
 8001204:	4603      	mov	r3, r0
 8001206:	4a38      	ldr	r2, [pc, #224]	; (80012e8 <main+0x190>)
 8001208:	6013      	str	r3, [r2, #0]

  /* creation of mb_tcp_settingsQ */
  mb_tcp_settingsQHandle = osMessageQueueNew (1, sizeof(ModBusTCP_struct), &mb_tcp_settingsQ_attributes);
 800120a:	4a38      	ldr	r2, [pc, #224]	; (80012ec <main+0x194>)
 800120c:	2102      	movs	r1, #2
 800120e:	2001      	movs	r0, #1
 8001210:	f00e fadf 	bl	800f7d2 <osMessageQueueNew>
 8001214:	4603      	mov	r3, r0
 8001216:	4a36      	ldr	r2, [pc, #216]	; (80012f0 <main+0x198>)
 8001218:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800121a:	4a36      	ldr	r2, [pc, #216]	; (80012f4 <main+0x19c>)
 800121c:	2100      	movs	r1, #0
 800121e:	4836      	ldr	r0, [pc, #216]	; (80012f8 <main+0x1a0>)
 8001220:	f00e f8de 	bl	800f3e0 <osThreadNew>
 8001224:	4603      	mov	r3, r0
 8001226:	4a35      	ldr	r2, [pc, #212]	; (80012fc <main+0x1a4>)
 8001228:	6013      	str	r3, [r2, #0]

  /* creation of SensorsTask */
  SensorsTaskHandle = osThreadNew(vSensorsTask, NULL, &SensorsTask_attributes);
 800122a:	4a35      	ldr	r2, [pc, #212]	; (8001300 <main+0x1a8>)
 800122c:	2100      	movs	r1, #0
 800122e:	4835      	ldr	r0, [pc, #212]	; (8001304 <main+0x1ac>)
 8001230:	f00e f8d6 	bl	800f3e0 <osThreadNew>
 8001234:	4603      	mov	r3, r0
 8001236:	4a34      	ldr	r2, [pc, #208]	; (8001308 <main+0x1b0>)
 8001238:	6013      	str	r3, [r2, #0]

  /* creation of RW_Settings_Tas */
  RW_Settings_TasHandle = osThreadNew(vRW_Settings_Tas, NULL, &RW_Settings_Tas_attributes);
 800123a:	4a34      	ldr	r2, [pc, #208]	; (800130c <main+0x1b4>)
 800123c:	2100      	movs	r1, #0
 800123e:	4834      	ldr	r0, [pc, #208]	; (8001310 <main+0x1b8>)
 8001240:	f00e f8ce 	bl	800f3e0 <osThreadNew>
 8001244:	4603      	mov	r3, r0
 8001246:	4a33      	ldr	r2, [pc, #204]	; (8001314 <main+0x1bc>)
 8001248:	6013      	str	r3, [r2, #0]

  /* creation of oneSecondTickTa */
  oneSecondTickTaHandle = osThreadNew(vOneSecondTickTask, NULL, &oneSecondTickTa_attributes);
 800124a:	4a33      	ldr	r2, [pc, #204]	; (8001318 <main+0x1c0>)
 800124c:	2100      	movs	r1, #0
 800124e:	4833      	ldr	r0, [pc, #204]	; (800131c <main+0x1c4>)
 8001250:	f00e f8c6 	bl	800f3e0 <osThreadNew>
 8001254:	4603      	mov	r3, r0
 8001256:	4a32      	ldr	r2, [pc, #200]	; (8001320 <main+0x1c8>)
 8001258:	6013      	str	r3, [r2, #0]

  /* creation of maintEthTask */
  maintEthTaskHandle = osThreadNew(vMaintEthTask, NULL, &maintEthTask_attributes);
 800125a:	4a32      	ldr	r2, [pc, #200]	; (8001324 <main+0x1cc>)
 800125c:	2100      	movs	r1, #0
 800125e:	4832      	ldr	r0, [pc, #200]	; (8001328 <main+0x1d0>)
 8001260:	f00e f8be 	bl	800f3e0 <osThreadNew>
 8001264:	4603      	mov	r3, r0
 8001266:	4a31      	ldr	r2, [pc, #196]	; (800132c <main+0x1d4>)
 8001268:	6013      	str	r3, [r2, #0]

  /* creation of DebugMemUsageT */
  DebugMemUsageTHandle = osThreadNew(vDebugMemUsage, NULL, &DebugMemUsageT_attributes);
 800126a:	4a31      	ldr	r2, [pc, #196]	; (8001330 <main+0x1d8>)
 800126c:	2100      	movs	r1, #0
 800126e:	4831      	ldr	r0, [pc, #196]	; (8001334 <main+0x1dc>)
 8001270:	f00e f8b6 	bl	800f3e0 <osThreadNew>
 8001274:	4603      	mov	r3, r0
 8001276:	4a30      	ldr	r2, [pc, #192]	; (8001338 <main+0x1e0>)
 8001278:	6013      	str	r3, [r2, #0]

  /* creation of httpServTask */
  httpServTaskHandle = osThreadNew(httpServ, NULL, &httpServTask_attributes);
 800127a:	4a30      	ldr	r2, [pc, #192]	; (800133c <main+0x1e4>)
 800127c:	2100      	movs	r1, #0
 800127e:	4830      	ldr	r0, [pc, #192]	; (8001340 <main+0x1e8>)
 8001280:	f00e f8ae 	bl	800f3e0 <osThreadNew>
 8001284:	4603      	mov	r3, r0
 8001286:	4a2f      	ldr	r2, [pc, #188]	; (8001344 <main+0x1ec>)
 8001288:	6013      	str	r3, [r2, #0]

  /* creation of mqttClientTask */
  mqttClientTaskHandle = osThreadNew(vMQTT_Task, NULL, &mqttClientTask_attributes);
 800128a:	4a2f      	ldr	r2, [pc, #188]	; (8001348 <main+0x1f0>)
 800128c:	2100      	movs	r1, #0
 800128e:	482f      	ldr	r0, [pc, #188]	; (800134c <main+0x1f4>)
 8001290:	f00e f8a6 	bl	800f3e0 <osThreadNew>
 8001294:	4603      	mov	r3, r0
 8001296:	4a2e      	ldr	r2, [pc, #184]	; (8001350 <main+0x1f8>)
 8001298:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800129a:	f00e f87b 	bl	800f394 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800129e:	e7fe      	b.n	800129e <main+0x146>
 80012a0:	0800f0b9 	.word	0x0800f0b9
 80012a4:	08022674 	.word	0x08022674
 80012a8:	2000044c 	.word	0x2000044c
 80012ac:	08022684 	.word	0x08022684
 80012b0:	20000450 	.word	0x20000450
 80012b4:	08022694 	.word	0x08022694
 80012b8:	20000454 	.word	0x20000454
 80012bc:	080226a4 	.word	0x080226a4
 80012c0:	20000458 	.word	0x20000458
 80012c4:	080225e4 	.word	0x080225e4
 80012c8:	20000434 	.word	0x20000434
 80012cc:	080225fc 	.word	0x080225fc
 80012d0:	20000438 	.word	0x20000438
 80012d4:	08022614 	.word	0x08022614
 80012d8:	2000043c 	.word	0x2000043c
 80012dc:	0802262c 	.word	0x0802262c
 80012e0:	20000440 	.word	0x20000440
 80012e4:	08022644 	.word	0x08022644
 80012e8:	20000444 	.word	0x20000444
 80012ec:	0802265c 	.word	0x0802265c
 80012f0:	20000448 	.word	0x20000448
 80012f4:	080224c4 	.word	0x080224c4
 80012f8:	08001675 	.word	0x08001675
 80012fc:	20000414 	.word	0x20000414
 8001300:	080224e8 	.word	0x080224e8
 8001304:	08001685 	.word	0x08001685
 8001308:	20000418 	.word	0x20000418
 800130c:	0802250c 	.word	0x0802250c
 8001310:	080017cd 	.word	0x080017cd
 8001314:	2000041c 	.word	0x2000041c
 8001318:	08022530 	.word	0x08022530
 800131c:	08001a3d 	.word	0x08001a3d
 8001320:	20000420 	.word	0x20000420
 8001324:	08022554 	.word	0x08022554
 8001328:	08001a65 	.word	0x08001a65
 800132c:	20000424 	.word	0x20000424
 8001330:	08022578 	.word	0x08022578
 8001334:	08001fe1 	.word	0x08001fe1
 8001338:	20000428 	.word	0x20000428
 800133c:	0802259c 	.word	0x0802259c
 8001340:	0800207d 	.word	0x0800207d
 8001344:	2000042c 	.word	0x2000042c
 8001348:	080225c0 	.word	0x080225c0
 800134c:	080021f1 	.word	0x080021f1
 8001350:	20000430 	.word	0x20000430

08001354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b094      	sub	sp, #80	; 0x50
 8001358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135a:	f107 0320 	add.w	r3, r7, #32
 800135e:	2230      	movs	r2, #48	; 0x30
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f01a fea0 	bl	801c0a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	4b28      	ldr	r3, [pc, #160]	; (8001420 <SystemClock_Config+0xcc>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	4a27      	ldr	r2, [pc, #156]	; (8001420 <SystemClock_Config+0xcc>)
 8001382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001386:	6413      	str	r3, [r2, #64]	; 0x40
 8001388:	4b25      	ldr	r3, [pc, #148]	; (8001420 <SystemClock_Config+0xcc>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001394:	2300      	movs	r3, #0
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	4b22      	ldr	r3, [pc, #136]	; (8001424 <SystemClock_Config+0xd0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013a0:	4a20      	ldr	r2, [pc, #128]	; (8001424 <SystemClock_Config+0xd0>)
 80013a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <SystemClock_Config+0xd0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013b4:	2301      	movs	r3, #1
 80013b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013be:	2302      	movs	r3, #2
 80013c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013c8:	2304      	movs	r3, #4
 80013ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80013cc:	2354      	movs	r3, #84	; 0x54
 80013ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d0:	2302      	movs	r3, #2
 80013d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013d4:	2304      	movs	r3, #4
 80013d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d8:	f107 0320 	add.w	r3, r7, #32
 80013dc:	4618      	mov	r0, r3
 80013de:	f003 ff01 	bl	80051e4 <HAL_RCC_OscConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013e8:	f000 ffe0 	bl	80023ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ec:	230f      	movs	r3, #15
 80013ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f0:	2302      	movs	r3, #2
 80013f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	2102      	movs	r1, #2
 8001408:	4618      	mov	r0, r3
 800140a:	f004 f963 	bl	80056d4 <HAL_RCC_ClockConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001414:	f000 ffca 	bl	80023ac <Error_Handler>
  }
}
 8001418:	bf00      	nop
 800141a:	3750      	adds	r7, #80	; 0x50
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40023800 	.word	0x40023800
 8001424:	40007000 	.word	0x40007000

08001428 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_CRC_Init+0x20>)
 800142e:	4a07      	ldr	r2, [pc, #28]	; (800144c <MX_CRC_Init+0x24>)
 8001430:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_CRC_Init+0x20>)
 8001434:	f003 fc8a 	bl	8004d4c <HAL_CRC_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800143e:	f000 ffb5 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000314 	.word	0x20000314
 800144c:	40023000 	.word	0x40023000

08001450 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <MX_SPI1_Init+0x64>)
 8001456:	4a18      	ldr	r2, [pc, #96]	; (80014b8 <MX_SPI1_Init+0x68>)
 8001458:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <MX_SPI1_Init+0x64>)
 800145c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001460:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001462:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <MX_SPI1_Init+0x64>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <MX_SPI1_Init+0x64>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <MX_SPI1_Init+0x64>)
 8001470:	2202      	movs	r2, #2
 8001472:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <MX_SPI1_Init+0x64>)
 8001476:	2201      	movs	r2, #1
 8001478:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <MX_SPI1_Init+0x64>)
 800147c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001480:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <MX_SPI1_Init+0x64>)
 8001484:	2200      	movs	r2, #0
 8001486:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001488:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <MX_SPI1_Init+0x64>)
 800148a:	2200      	movs	r2, #0
 800148c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <MX_SPI1_Init+0x64>)
 8001490:	2200      	movs	r2, #0
 8001492:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <MX_SPI1_Init+0x64>)
 8001496:	2200      	movs	r2, #0
 8001498:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <MX_SPI1_Init+0x64>)
 800149c:	220a      	movs	r2, #10
 800149e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014a0:	4804      	ldr	r0, [pc, #16]	; (80014b4 <MX_SPI1_Init+0x64>)
 80014a2:	f004 fb69 	bl	8005b78 <HAL_SPI_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014ac:	f000 ff7e 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	2000031c 	.word	0x2000031c
 80014b8:	40013000 	.word	0x40013000

080014bc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80014c0:	4b17      	ldr	r3, [pc, #92]	; (8001520 <MX_SPI3_Init+0x64>)
 80014c2:	4a18      	ldr	r2, [pc, #96]	; (8001524 <MX_SPI3_Init+0x68>)
 80014c4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <MX_SPI3_Init+0x64>)
 80014c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014cc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <MX_SPI3_Init+0x64>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <MX_SPI3_Init+0x64>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <MX_SPI3_Init+0x64>)
 80014dc:	2202      	movs	r2, #2
 80014de:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <MX_SPI3_Init+0x64>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <MX_SPI3_Init+0x64>)
 80014e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ec:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <MX_SPI3_Init+0x64>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <MX_SPI3_Init+0x64>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <MX_SPI3_Init+0x64>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001500:	4b07      	ldr	r3, [pc, #28]	; (8001520 <MX_SPI3_Init+0x64>)
 8001502:	2200      	movs	r2, #0
 8001504:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <MX_SPI3_Init+0x64>)
 8001508:	220a      	movs	r2, #10
 800150a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800150c:	4804      	ldr	r0, [pc, #16]	; (8001520 <MX_SPI3_Init+0x64>)
 800150e:	f004 fb33 	bl	8005b78 <HAL_SPI_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001518:	f000 ff48 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000374 	.word	0x20000374
 8001524:	40003c00 	.word	0x40003c00

08001528 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <MX_USART2_UART_Init+0x50>)
 800152e:	4a13      	ldr	r2, [pc, #76]	; (800157c <MX_USART2_UART_Init+0x54>)
 8001530:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 4800;
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <MX_USART2_UART_Init+0x50>)
 8001534:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8001538:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <MX_USART2_UART_Init+0x50>)
 800153c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001540:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001542:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <MX_USART2_UART_Init+0x50>)
 8001544:	2200      	movs	r2, #0
 8001546:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <MX_USART2_UART_Init+0x50>)
 800154a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800154e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <MX_USART2_UART_Init+0x50>)
 8001552:	2204      	movs	r2, #4
 8001554:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <MX_USART2_UART_Init+0x50>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MX_USART2_UART_Init+0x50>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_USART2_UART_Init+0x50>)
 8001564:	f005 fb52 	bl	8006c0c <HAL_UART_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800156e:	f000 ff1d 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200003cc 	.word	0x200003cc
 800157c:	40004400 	.word	0x40004400

08001580 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	4b33      	ldr	r3, [pc, #204]	; (8001668 <MX_GPIO_Init+0xe8>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a32      	ldr	r2, [pc, #200]	; (8001668 <MX_GPIO_Init+0xe8>)
 80015a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b30      	ldr	r3, [pc, #192]	; (8001668 <MX_GPIO_Init+0xe8>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	4b2c      	ldr	r3, [pc, #176]	; (8001668 <MX_GPIO_Init+0xe8>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a2b      	ldr	r2, [pc, #172]	; (8001668 <MX_GPIO_Init+0xe8>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b29      	ldr	r3, [pc, #164]	; (8001668 <MX_GPIO_Init+0xe8>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	603b      	str	r3, [r7, #0]
 80015d2:	4b25      	ldr	r3, [pc, #148]	; (8001668 <MX_GPIO_Init+0xe8>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a24      	ldr	r2, [pc, #144]	; (8001668 <MX_GPIO_Init+0xe8>)
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b22      	ldr	r3, [pc, #136]	; (8001668 <MX_GPIO_Init+0xe8>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_flash_cs_GPIO_Port, SPI_flash_cs_Pin, GPIO_PIN_SET);
 80015ea:	2201      	movs	r2, #1
 80015ec:	2110      	movs	r1, #16
 80015ee:	481f      	ldr	r0, [pc, #124]	; (800166c <MX_GPIO_Init+0xec>)
 80015f0:	f003 fdde 	bl	80051b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ethernet_reset_GPIO_Port, Ethernet_reset_Pin, GPIO_PIN_RESET);
 80015f4:	2200      	movs	r2, #0
 80015f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015fa:	481c      	ldr	r0, [pc, #112]	; (800166c <MX_GPIO_Init+0xec>)
 80015fc:	f003 fdd8 	bl	80051b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ethernet_cs_GPIO_Port, Ethernet_cs_Pin, GPIO_PIN_RESET);
 8001600:	2200      	movs	r2, #0
 8001602:	2140      	movs	r1, #64	; 0x40
 8001604:	481a      	ldr	r0, [pc, #104]	; (8001670 <MX_GPIO_Init+0xf0>)
 8001606:	f003 fdd3 	bl	80051b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_flash_cs_Pin */
  GPIO_InitStruct.Pin = SPI_flash_cs_Pin;
 800160a:	2310      	movs	r3, #16
 800160c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_flash_cs_GPIO_Port, &GPIO_InitStruct);
 800161a:	f107 030c 	add.w	r3, r7, #12
 800161e:	4619      	mov	r1, r3
 8001620:	4812      	ldr	r0, [pc, #72]	; (800166c <MX_GPIO_Init+0xec>)
 8001622:	f003 fc41 	bl	8004ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ethernet_reset_Pin */
  GPIO_InitStruct.Pin = Ethernet_reset_Pin;
 8001626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800162a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Ethernet_reset_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	4619      	mov	r1, r3
 800163e:	480b      	ldr	r0, [pc, #44]	; (800166c <MX_GPIO_Init+0xec>)
 8001640:	f003 fc32 	bl	8004ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ethernet_cs_Pin */
  GPIO_InitStruct.Pin = Ethernet_cs_Pin;
 8001644:	2340      	movs	r3, #64	; 0x40
 8001646:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001648:	2301      	movs	r3, #1
 800164a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Ethernet_cs_GPIO_Port, &GPIO_InitStruct);
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	4619      	mov	r1, r3
 800165a:	4805      	ldr	r0, [pc, #20]	; (8001670 <MX_GPIO_Init+0xf0>)
 800165c:	f003 fc24 	bl	8004ea8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001660:	bf00      	nop
 8001662:	3720      	adds	r7, #32
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40023800 	.word	0x40023800
 800166c:	40020000 	.word	0x40020000
 8001670:	40020400 	.word	0x40020400

08001674 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800167c:	2001      	movs	r0, #1
 800167e:	f00d ff7f 	bl	800f580 <osDelay>
 8001682:	e7fb      	b.n	800167c <StartDefaultTask+0x8>

08001684 <vSensorsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vSensorsTask */
void vSensorsTask(void *argument)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b094      	sub	sp, #80	; 0x50
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	uint32_t			temp;
	uint8_t				array[30];
	PowerSensStruct		PowerData;
	P_sens_sett_struct	PowerSett;

	PowerSett.resistance = 0.001;
 800168c:	4b47      	ldr	r3, [pc, #284]	; (80017ac <vSensorsTask+0x128>)
 800168e:	613b      	str	r3, [r7, #16]
	PowerSett.save = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	733b      	strb	r3, [r7, #12]
	xQueueOverwrite(Curr_sensor_settingsHandle, (void *)&PowerSett);
 8001694:	4b46      	ldr	r3, [pc, #280]	; (80017b0 <vSensorsTask+0x12c>)
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	f107 010c 	add.w	r1, r7, #12
 800169c:	2302      	movs	r3, #2
 800169e:	2200      	movs	r2, #0
 80016a0:	f00e fcc4 	bl	801002c <xQueueGenericSend>

	sens_task_start:

	xQueuePeek(Curr_sensor_settingsHandle ,&PowerSett,0);
 80016a4:	4b42      	ldr	r3, [pc, #264]	; (80017b0 <vSensorsTask+0x12c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f107 010c 	add.w	r1, r7, #12
 80016ac:	2200      	movs	r2, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f00f f842 	bl	8010738 <xQueuePeek>
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24);
 80016b4:	2218      	movs	r2, #24
 80016b6:	493f      	ldr	r1, [pc, #252]	; (80017b4 <vSensorsTask+0x130>)
 80016b8:	483f      	ldr	r0, [pc, #252]	; (80017b8 <vSensorsTask+0x134>)
 80016ba:	f005 faf7 	bl	8006cac <HAL_UARTEx_ReceiveToIdle_IT>
	osDelay(100);
 80016be:	2064      	movs	r0, #100	; 0x64
 80016c0:	f00d ff5e 	bl	800f580 <osDelay>
	InitHLW8032(1880000, 1000, PowerSett.resistance);
 80016c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80016c8:	eeb0 0a67 	vmov.f32	s0, s15
 80016cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016d0:	483a      	ldr	r0, [pc, #232]	; (80017bc <vSensorsTask+0x138>)
 80016d2:	f002 fc6b 	bl	8003fac <InitHLW8032>
  /* Infinite loop */
  for(;;)
  {
	if (osMessageQueueGetCount(rowPowerSensorQHandle) != 0 ){
 80016d6:	4b3a      	ldr	r3, [pc, #232]	; (80017c0 <vSensorsTask+0x13c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f00e f9aa 	bl	800fa34 <osMessageQueueGetCount>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d040      	beq.n	8001768 <vSensorsTask+0xe4>
		osMessageQueueGet	(rowPowerSensorQHandle,&array,NULL, 1000);
 80016e6:	4b36      	ldr	r3, [pc, #216]	; (80017c0 <vSensorsTask+0x13c>)
 80016e8:	6818      	ldr	r0, [r3, #0]
 80016ea:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80016ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f2:	2200      	movs	r2, #0
 80016f4:	f00e f940 	bl	800f978 <osMessageQueueGet>
		if( RecvRawString((const unsigned char *)array) == 0){ // all OK if return 0
 80016f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016fc:	4618      	mov	r0, r3
 80016fe:	f002 fcc7 	bl	8004090 <RecvRawString>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d12f      	bne.n	8001768 <vSensorsTask+0xe4>
			PowerData.KWatt_h 		= GetKWh();
 8001708:	f002 fea2 	bl	8004450 <GetKWh>
 800170c:	eef0 7a40 	vmov.f32	s15, s0
 8001710:	edc7 7a07 	vstr	s15, [r7, #28]
			PowerData.Voltage 		= GetVoltage();
 8001714:	f002 fdc4 	bl	80042a0 <GetVoltage>
 8001718:	eef0 7a40 	vmov.f32	s15, s0
 800171c:	edc7 7a05 	vstr	s15, [r7, #20]
			PowerData.ApparPower 	= GetApparentPower();
 8001720:	f002 fe4a 	bl	80043b8 <GetApparentPower>
 8001724:	eef0 7a40 	vmov.f32	s15, s0
 8001728:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			PowerData.ActivPower 	= GetActivePower();
 800172c:	f002 fe12 	bl	8004354 <GetActivePower>
 8001730:	eef0 7a40 	vmov.f32	s15, s0
 8001734:	edc7 7a08 	vstr	s15, [r7, #32]
			PowerData.Current 		= GetCurrent();
 8001738:	f002 fdf2 	bl	8004320 <GetCurrent>
 800173c:	eef0 7a40 	vmov.f32	s15, s0
 8001740:	edc7 7a06 	vstr	s15, [r7, #24]
			PowerData.PowerFactor	= PowerFactor();
 8001744:	f002 fe53 	bl	80043ee <PowerFactor>
 8001748:	eef0 7a40 	vmov.f32	s15, s0
 800174c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			xQueueOverwrite(PowerDataQHandle, (void *)&PowerData);
 8001750:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <vSensorsTask+0x140>)
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	f107 0114 	add.w	r1, r7, #20
 8001758:	2302      	movs	r3, #2
 800175a:	2200      	movs	r2, #0
 800175c:	f00e fc66 	bl	801002c <xQueueGenericSend>
		}
	}
	while (HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24) == HAL_ERROR){
 8001760:	e002      	b.n	8001768 <vSensorsTask+0xe4>
		temp = USART2->DR;
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <vSensorsTask+0x144>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24) == HAL_ERROR){
 8001768:	2218      	movs	r2, #24
 800176a:	4912      	ldr	r1, [pc, #72]	; (80017b4 <vSensorsTask+0x130>)
 800176c:	4812      	ldr	r0, [pc, #72]	; (80017b8 <vSensorsTask+0x134>)
 800176e:	f005 fa9d 	bl	8006cac <HAL_UARTEx_ReceiveToIdle_IT>
 8001772:	4603      	mov	r3, r0
 8001774:	2b01      	cmp	r3, #1
 8001776:	d0f4      	beq.n	8001762 <vSensorsTask+0xde>
	}
    osDelay(1000);
 8001778:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800177c:	f00d ff00 	bl	800f580 <osDelay>
    xQueuePeek(Curr_sensor_settingsHandle ,&PowerSett,0);
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <vSensorsTask+0x12c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f107 010c 	add.w	r1, r7, #12
 8001788:	2200      	movs	r2, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f00e ffd4 	bl	8010738 <xQueuePeek>
    if (PowerSett.save == 1){
 8001790:	7b3b      	ldrb	r3, [r7, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d09f      	beq.n	80016d6 <vSensorsTask+0x52>
    	PowerSett.save = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	733b      	strb	r3, [r7, #12]
    	xQueueOverwrite(Curr_sensor_settingsHandle, (void *)&PowerSett);
 800179a:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <vSensorsTask+0x12c>)
 800179c:	6818      	ldr	r0, [r3, #0]
 800179e:	f107 010c 	add.w	r1, r7, #12
 80017a2:	2302      	movs	r3, #2
 80017a4:	2200      	movs	r2, #0
 80017a6:	f00e fc41 	bl	801002c <xQueueGenericSend>
    	goto sens_task_start;
 80017aa:	e77b      	b.n	80016a4 <vSensorsTask+0x20>
 80017ac:	3a83126f 	.word	0x3a83126f
 80017b0:	20000440 	.word	0x20000440
 80017b4:	2000045c 	.word	0x2000045c
 80017b8:	200003cc 	.word	0x200003cc
 80017bc:	001cafc0 	.word	0x001cafc0
 80017c0:	20000434 	.word	0x20000434
 80017c4:	2000043c 	.word	0x2000043c
 80017c8:	40004400 	.word	0x40004400

080017cc <vRW_Settings_Tas>:
* @retval None
*/

/* USER CODE END Header_vRW_Settings_Tas */
void vRW_Settings_Tas(void *argument)
{
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
 80017d2:	af12      	add	r7, sp, #72	; 0x48
 80017d4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80017d8:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80017dc:	6018      	str	r0, [r3, #0]
	uint8_t 				lookheadbuf[256];
	P_sens_sett_struct		PowerSett;
	MQTT_cred_struct		MQTT_cred;
	ModBusTCP_struct		mb_tcp_sett;

	SPI_flash_set(hspi1);
 80017de:	4c87      	ldr	r4, [pc, #540]	; (80019fc <vRW_Settings_Tas+0x230>)
 80017e0:	4668      	mov	r0, sp
 80017e2:	f104 0310 	add.w	r3, r4, #16
 80017e6:	2248      	movs	r2, #72	; 0x48
 80017e8:	4619      	mov	r1, r3
 80017ea:	f01a fe32 	bl	801c452 <memcpy>
 80017ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017f2:	f003 f933 	bl	8004a5c <SPI_flash_set>
	SPI_flash_reg_cb(SPI_flash_select, SPI_flash_deselect, SPI_flash_read_byte, SPI_flash_send_byte);
 80017f6:	4b82      	ldr	r3, [pc, #520]	; (8001a00 <vRW_Settings_Tas+0x234>)
 80017f8:	4a82      	ldr	r2, [pc, #520]	; (8001a04 <vRW_Settings_Tas+0x238>)
 80017fa:	4983      	ldr	r1, [pc, #524]	; (8001a08 <vRW_Settings_Tas+0x23c>)
 80017fc:	4883      	ldr	r0, [pc, #524]	; (8001a0c <vRW_Settings_Tas+0x240>)
 80017fe:	f002 fea7 	bl	8004550 <SPI_flash_reg_cb>
	spi_fs_init(buff_read, buff_write, lookheadbuf, 256 );
 8001802:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001806:	f507 71f0 	add.w	r1, r7, #480	; 0x1e0
 800180a:	f507 7038 	add.w	r0, r7, #736	; 0x2e0
 800180e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001812:	f017 ff8b 	bl	801972c <spi_fs_init>
	spi_fs_init_mutex(LfsMutexTake, LfsMutexRelease);
 8001816:	497e      	ldr	r1, [pc, #504]	; (8001a10 <vRW_Settings_Tas+0x244>)
 8001818:	487e      	ldr	r0, [pc, #504]	; (8001a14 <vRW_Settings_Tas+0x248>)
 800181a:	f017 ff6b 	bl	80196f4 <spi_fs_init_mutex>


	if (spi_fs_mount() < 0){
 800181e:	f017 ffbd 	bl	801979c <spi_fs_mount>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	da03      	bge.n	8001830 <vRW_Settings_Tas+0x64>
		spi_fs_format();
 8001828:	f017 ffe0 	bl	80197ec <spi_fs_format>
		spi_fs_mount();
 800182c:	f017 ffb6 	bl	801979c <spi_fs_mount>
	}

	if (0 < spi_fs_file_size(POW_SETT_FILE)){
 8001830:	4879      	ldr	r0, [pc, #484]	; (8001a18 <vRW_Settings_Tas+0x24c>)
 8001832:	f018 f865 	bl	8019900 <spi_fs_file_size>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	dd0f      	ble.n	800185c <vRW_Settings_Tas+0x90>
		spi_fs_read_file_offset(POW_SETT_FILE, &PowerSett, 0, sizeof(PowerSett));
 800183c:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8001840:	2308      	movs	r3, #8
 8001842:	2200      	movs	r2, #0
 8001844:	4874      	ldr	r0, [pc, #464]	; (8001a18 <vRW_Settings_Tas+0x24c>)
 8001846:	f017 ffdd 	bl	8019804 <spi_fs_read_file_offset>
		xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 800184a:	4b74      	ldr	r3, [pc, #464]	; (8001a1c <vRW_Settings_Tas+0x250>)
 800184c:	6818      	ldr	r0, [r3, #0]
 800184e:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8001852:	2302      	movs	r3, #2
 8001854:	2200      	movs	r2, #0
 8001856:	f00e fbe9 	bl	801002c <xQueueGenericSend>
 800185a:	e013      	b.n	8001884 <vRW_Settings_Tas+0xb8>
	}else{
		PowerSett.resistance 	= DEFAULT_SHUNT_RESISTANSE;
 800185c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8001860:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8001864:	4a6e      	ldr	r2, [pc, #440]	; (8001a20 <vRW_Settings_Tas+0x254>)
 8001866:	605a      	str	r2, [r3, #4]
		PowerSett.save 			= 1;
 8001868:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 800186c:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]
		xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 8001874:	4b69      	ldr	r3, [pc, #420]	; (8001a1c <vRW_Settings_Tas+0x250>)
 8001876:	6818      	ldr	r0, [r3, #0]
 8001878:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 800187c:	2302      	movs	r3, #2
 800187e:	2200      	movs	r2, #0
 8001880:	f00e fbd4 	bl	801002c <xQueueGenericSend>
	}

	if (0 < spi_fs_file_size(MQTT_SETT_FILE)){
 8001884:	4867      	ldr	r0, [pc, #412]	; (8001a24 <vRW_Settings_Tas+0x258>)
 8001886:	f018 f83b 	bl	8019900 <spi_fs_file_size>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	dd0f      	ble.n	80018b0 <vRW_Settings_Tas+0xe4>
		spi_fs_read_file_offset(MQTT_SETT_FILE, &MQTT_cred, 0, sizeof(MQTT_cred));
 8001890:	f107 0110 	add.w	r1, r7, #16
 8001894:	23c6      	movs	r3, #198	; 0xc6
 8001896:	2200      	movs	r2, #0
 8001898:	4862      	ldr	r0, [pc, #392]	; (8001a24 <vRW_Settings_Tas+0x258>)
 800189a:	f017 ffb3 	bl	8019804 <spi_fs_read_file_offset>
		xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 800189e:	4b62      	ldr	r3, [pc, #392]	; (8001a28 <vRW_Settings_Tas+0x25c>)
 80018a0:	6818      	ldr	r0, [r3, #0]
 80018a2:	f107 0110 	add.w	r1, r7, #16
 80018a6:	2302      	movs	r3, #2
 80018a8:	2200      	movs	r2, #0
 80018aa:	f00e fbbf 	bl	801002c <xQueueGenericSend>
 80018ae:	e013      	b.n	80018d8 <vRW_Settings_Tas+0x10c>
	}else{
		MQTT_cred.save 			= 1;
 80018b0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80018b4:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 80018b8:	2201      	movs	r2, #1
 80018ba:	701a      	strb	r2, [r3, #0]
		MQTT_cred.enable		= 0;
 80018bc:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80018c0:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 80018c4:	2200      	movs	r2, #0
 80018c6:	705a      	strb	r2, [r3, #1]
		xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 80018c8:	4b57      	ldr	r3, [pc, #348]	; (8001a28 <vRW_Settings_Tas+0x25c>)
 80018ca:	6818      	ldr	r0, [r3, #0]
 80018cc:	f107 0110 	add.w	r1, r7, #16
 80018d0:	2302      	movs	r3, #2
 80018d2:	2200      	movs	r2, #0
 80018d4:	f00e fbaa 	bl	801002c <xQueueGenericSend>
	}

	if (0 < spi_fs_file_size(MB_TCP_SETT_FILE)){
 80018d8:	4854      	ldr	r0, [pc, #336]	; (8001a2c <vRW_Settings_Tas+0x260>)
 80018da:	f018 f811 	bl	8019900 <spi_fs_file_size>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	dd0f      	ble.n	8001904 <vRW_Settings_Tas+0x138>
		spi_fs_read_file_offset(MB_TCP_SETT_FILE, &mb_tcp_sett, 0, sizeof(mb_tcp_sett));
 80018e4:	f107 010c 	add.w	r1, r7, #12
 80018e8:	2302      	movs	r3, #2
 80018ea:	2200      	movs	r2, #0
 80018ec:	484f      	ldr	r0, [pc, #316]	; (8001a2c <vRW_Settings_Tas+0x260>)
 80018ee:	f017 ff89 	bl	8019804 <spi_fs_read_file_offset>
		xQueueOverwrite(mb_tcp_settingsQHandle ,(void *)&mb_tcp_sett);
 80018f2:	4b4f      	ldr	r3, [pc, #316]	; (8001a30 <vRW_Settings_Tas+0x264>)
 80018f4:	6818      	ldr	r0, [r3, #0]
 80018f6:	f107 010c 	add.w	r1, r7, #12
 80018fa:	2302      	movs	r3, #2
 80018fc:	2200      	movs	r2, #0
 80018fe:	f00e fb95 	bl	801002c <xQueueGenericSend>
 8001902:	e00b      	b.n	800191c <vRW_Settings_Tas+0x150>
	}else{
		mb_tcp_sett.enable 		= 0;
 8001904:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8001908:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 800190c:	2200      	movs	r2, #0
 800190e:	705a      	strb	r2, [r3, #1]
		mb_tcp_sett.save		= 1;
 8001910:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8001914:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8001918:	2201      	movs	r2, #1
 800191a:	701a      	strb	r2, [r3, #0]
	}

//	spi_fs_remove_recurcuve_in("/web");
	spi_fs_mkdir("/web");
 800191c:	4845      	ldr	r0, [pc, #276]	; (8001a34 <vRW_Settings_Tas+0x268>)
 800191e:	f018 f86b 	bl	80199f8 <spi_fs_mkdir>
	spi_fs_mkdir("/web/assets");
 8001922:	4845      	ldr	r0, [pc, #276]	; (8001a38 <vRW_Settings_Tas+0x26c>)
 8001924:	f018 f868 	bl	80199f8 <spi_fs_mkdir>
  /* Infinite loop */

  for(;;)
  {
	  xQueuePeek(Curr_sensor_settingsHandle, (void *)&PowerSett, 0);
 8001928:	4b3c      	ldr	r3, [pc, #240]	; (8001a1c <vRW_Settings_Tas+0x250>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8001930:	2200      	movs	r2, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f00e ff00 	bl	8010738 <xQueuePeek>
	  if (PowerSett.save){
 8001938:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 800193c:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d014      	beq.n	8001970 <vRW_Settings_Tas+0x1a4>
		  PowerSett.save = 0;
 8001946:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 800194a:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(POW_SETT_FILE, &PowerSett, sizeof(PowerSett));
 8001952:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001956:	2208      	movs	r2, #8
 8001958:	4619      	mov	r1, r3
 800195a:	482f      	ldr	r0, [pc, #188]	; (8001a18 <vRW_Settings_Tas+0x24c>)
 800195c:	f017 ff96 	bl	801988c <spi_fs_over_write_file>
		  xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 8001960:	4b2e      	ldr	r3, [pc, #184]	; (8001a1c <vRW_Settings_Tas+0x250>)
 8001962:	6818      	ldr	r0, [r3, #0]
 8001964:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8001968:	2302      	movs	r3, #2
 800196a:	2200      	movs	r2, #0
 800196c:	f00e fb5e 	bl	801002c <xQueueGenericSend>
	  }

	  xQueuePeek(mqttQHandle, (void *)&MQTT_cred, 0);
 8001970:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <vRW_Settings_Tas+0x25c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f107 0110 	add.w	r1, r7, #16
 8001978:	2200      	movs	r2, #0
 800197a:	4618      	mov	r0, r3
 800197c:	f00e fedc 	bl	8010738 <xQueuePeek>
	  if (MQTT_cred.save){
 8001980:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8001984:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d014      	beq.n	80019b8 <vRW_Settings_Tas+0x1ec>
		  MQTT_cred.save = 0;
 800198e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8001992:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(MQTT_SETT_FILE, &MQTT_cred, sizeof(MQTT_cred));
 800199a:	f107 0310 	add.w	r3, r7, #16
 800199e:	22c6      	movs	r2, #198	; 0xc6
 80019a0:	4619      	mov	r1, r3
 80019a2:	4820      	ldr	r0, [pc, #128]	; (8001a24 <vRW_Settings_Tas+0x258>)
 80019a4:	f017 ff72 	bl	801988c <spi_fs_over_write_file>
		  xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 80019a8:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <vRW_Settings_Tas+0x25c>)
 80019aa:	6818      	ldr	r0, [r3, #0]
 80019ac:	f107 0110 	add.w	r1, r7, #16
 80019b0:	2302      	movs	r3, #2
 80019b2:	2200      	movs	r2, #0
 80019b4:	f00e fb3a 	bl	801002c <xQueueGenericSend>
	  }

	  xQueuePeek(mb_tcp_settingsQHandle, (void *)&mb_tcp_sett, 0);
 80019b8:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <vRW_Settings_Tas+0x264>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f107 010c 	add.w	r1, r7, #12
 80019c0:	2200      	movs	r2, #0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f00e feb8 	bl	8010738 <xQueuePeek>
	  if (mb_tcp_sett.save){
 80019c8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80019cc:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00c      	beq.n	80019f0 <vRW_Settings_Tas+0x224>
		  mb_tcp_sett.save = 0;
 80019d6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80019da:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(MB_TCP_SETT_FILE, &mb_tcp_sett, sizeof(mb_tcp_sett));
 80019e2:	f107 030c 	add.w	r3, r7, #12
 80019e6:	2202      	movs	r2, #2
 80019e8:	4619      	mov	r1, r3
 80019ea:	4810      	ldr	r0, [pc, #64]	; (8001a2c <vRW_Settings_Tas+0x260>)
 80019ec:	f017 ff4e 	bl	801988c <spi_fs_over_write_file>
	  }

    osDelay(delay1s);
 80019f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019f4:	f00d fdc4 	bl	800f580 <osDelay>
	  xQueuePeek(Curr_sensor_settingsHandle, (void *)&PowerSett, 0);
 80019f8:	e796      	b.n	8001928 <vRW_Settings_Tas+0x15c>
 80019fa:	bf00      	nop
 80019fc:	2000031c 	.word	0x2000031c
 8001a00:	08004ab1 	.word	0x08004ab1
 8001a04:	08004a8d 	.word	0x08004a8d
 8001a08:	08004aed 	.word	0x08004aed
 8001a0c:	08004ad5 	.word	0x08004ad5
 8001a10:	080010d9 	.word	0x080010d9
 8001a14:	080010bd 	.word	0x080010bd
 8001a18:	0802015c 	.word	0x0802015c
 8001a1c:	20000440 	.word	0x20000440
 8001a20:	3a83126f 	.word	0x3a83126f
 8001a24:	0802016c 	.word	0x0802016c
 8001a28:	20000444 	.word	0x20000444
 8001a2c:	0802017c 	.word	0x0802017c
 8001a30:	20000448 	.word	0x20000448
 8001a34:	08020190 	.word	0x08020190
 8001a38:	08020198 	.word	0x08020198

08001a3c <vOneSecondTickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vOneSecondTickTask */
void vOneSecondTickTask(void *argument)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vOneSecondTickTask */
	uint32_t seconds;
	seconds = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	seconds++ ;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	60fb      	str	r3, [r7, #12]
	DHCP_time_handler();
 8001a4e:	f009 fcc7 	bl	800b3e0 <DHCP_time_handler>
	httpServer_time_handler();
 8001a52:	f00d f8a1 	bl	800eb98 <httpServer_time_handler>
	dns_service_increment_second();
 8001a56:	f00a fa4f 	bl	800bef8 <dns_service_increment_second>
    osDelay(delay1s);
 8001a5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a5e:	f00d fd8f 	bl	800f580 <osDelay>
	seconds++ ;
 8001a62:	e7f1      	b.n	8001a48 <vOneSecondTickTask+0xc>

08001a64 <vMaintEthTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vMaintEthTask */
void vMaintEthTask(void *argument)
{
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	f5ad 5d84 	sub.w	sp, sp, #4224	; 0x1080
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af12      	add	r7, sp, #72	; 0x48
 8001a6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a72:	f843 0c3c 	str.w	r0, [r3, #-60]
	  Ethernet_info_struct	EthernetInfo;
	  uint8_t 				i;
	  uint8_t 				DHCP_DATABUF[SOCKET_BUFF_SIZE];
	  uint8_t				DNS_buff[SOCKET_BUFF_SIZE];

	  memset(&EthernetInfo, 0, sizeof(EthernetInfo));
 8001a76:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001a7a:	f103 0308 	add.w	r3, r3, #8
 8001a7e:	2220      	movs	r2, #32
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f01a fb10 	bl	801c0a8 <memset>
	  memset(&NetInfo, 		0, sizeof(NetInfo));
 8001a88:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001a8c:	f103 0308 	add.w	r3, r3, #8
 8001a90:	2217      	movs	r2, #23
 8001a92:	2100      	movs	r1, #0
 8001a94:	4618      	mov	r0, r3
 8001a96:	f01a fb07 	bl	801c0a8 <memset>

	  NetInfo.mac[0]	= 0x40;
 8001a9a:	2340      	movs	r3, #64	; 0x40
 8001a9c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001aa0:	f102 0208 	add.w	r2, r2, #8
 8001aa4:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[1]	= 0x08;
 8001aa6:	2308      	movs	r3, #8
 8001aa8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001aac:	f102 0209 	add.w	r2, r2, #9
 8001ab0:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[2]	= *(uint8_t*)(UID_BASE);
 8001ab2:	4bdc      	ldr	r3, [pc, #880]	; (8001e24 <vMaintEthTask+0x3c0>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001aba:	f102 020a 	add.w	r2, r2, #10
 8001abe:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[3]	= *(uint8_t*)(UID_BASE + 0x01);
 8001ac0:	4bd9      	ldr	r3, [pc, #868]	; (8001e28 <vMaintEthTask+0x3c4>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001ac8:	f102 020b 	add.w	r2, r2, #11
 8001acc:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[4]	= *(uint8_t*)(UID_BASE + 0x02);
 8001ace:	4bd7      	ldr	r3, [pc, #860]	; (8001e2c <vMaintEthTask+0x3c8>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001ad6:	f102 020c 	add.w	r2, r2, #12
 8001ada:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[5]	= *(uint8_t*)(UID_BASE + 0x03);
 8001adc:	4bd4      	ldr	r3, [pc, #848]	; (8001e30 <vMaintEthTask+0x3cc>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001ae4:	f102 020d 	add.w	r2, r2, #13
 8001ae8:	7013      	strb	r3, [r2, #0]

	  memcpy(&EthernetInfo.mac, &NetInfo.mac, sizeof(NetInfo.mac));
 8001aea:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001aee:	f103 030b 	add.w	r3, r3, #11
 8001af2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001af6:	f102 0208 	add.w	r2, r2, #8
 8001afa:	6810      	ldr	r0, [r2, #0]
 8001afc:	6018      	str	r0, [r3, #0]
 8001afe:	8892      	ldrh	r2, [r2, #4]
 8001b00:	809a      	strh	r2, [r3, #4]

		//NetInfo.ip[0]	= 0, NetInfo.ip[1] 	= 0, NetInfo.ip[2] 	= 0, NetInfo.ip[3] 	= 0;
		//NetInfo.sn[0] 	= 0, NetInfo.sn[1] 	= 0, NetInfo.sn[2] 	= 0, NetInfo.sn[3] 	= 0;
		//NetInfo.gw[0] 	= 0, NetInfo.gw[1] 	= 0, NetInfo.gw[2] 	= 0, NetInfo.gw[3] 	= 0;
		//NetInfo.dns[0] 	= 0, NetInfo.dns[1] = 0, NetInfo.dns[2] = 0, NetInfo.dns[3] = 0;
		NetInfo.dhcp 	= NETINFO_DHCP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001b08:	f102 021e 	add.w	r2, r2, #30
 8001b0c:	7013      	strb	r3, [r2, #0]
 8001b0e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001b12:	f103 030e 	add.w	r3, r3, #14
 8001b16:	681b      	ldr	r3, [r3, #0]
		// TODO rewrite with memcpy function

		memcpy(&EthernetInfo.ip, &NetInfo.ip, sizeof(NetInfo.ip));
 8001b18:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001b1c:	f102 0211 	add.w	r2, r2, #17
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001b26:	f103 0312 	add.w	r3, r3, #18
 8001b2a:	681b      	ldr	r3, [r3, #0]
		memcpy(&EthernetInfo.sn, &NetInfo.sn, sizeof(NetInfo.sn));
 8001b2c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001b30:	f102 0215 	add.w	r2, r2, #21
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001b3a:	f103 0316 	add.w	r3, r3, #22
 8001b3e:	681b      	ldr	r3, [r3, #0]
		memcpy(&EthernetInfo.gw, &NetInfo.gw, sizeof(NetInfo.gw));
 8001b40:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001b44:	f102 0219 	add.w	r2, r2, #25
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001b4e:	f103 031a 	add.w	r3, r3, #26
 8001b52:	681b      	ldr	r3, [r3, #0]
		memcpy(&EthernetInfo.dns, &NetInfo.dns, sizeof(NetInfo.dns));
 8001b54:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001b58:	f102 021d 	add.w	r2, r2, #29
 8001b5c:	6013      	str	r3, [r2, #0]
							EthernetInfo.sn[i] 	= NetInfo.sn[i];
							EthernetInfo.gw[i] 	= NetInfo.gw[i];
							EthernetInfo.dns[i] = NetInfo.dns[i];
						}
*/
	  Reg_eth_spi(hspi3);
 8001b5e:	4cb5      	ldr	r4, [pc, #724]	; (8001e34 <vMaintEthTask+0x3d0>)
 8001b60:	4668      	mov	r0, sp
 8001b62:	f104 0310 	add.w	r3, r4, #16
 8001b66:	2248      	movs	r2, #72	; 0x48
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f01a fc72 	bl	801c452 <memcpy>
 8001b6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b72:	f00d fb63 	bl	800f23c <Reg_eth_spi>
	  w5500_reset_cb(Eth_reset_on, Eth_reset_off);
 8001b76:	49b0      	ldr	r1, [pc, #704]	; (8001e38 <vMaintEthTask+0x3d4>)
 8001b78:	48b0      	ldr	r0, [pc, #704]	; (8001e3c <vMaintEthTask+0x3d8>)
 8001b7a:	f00d fb0b 	bl	800f194 <w5500_reset_cb>
	  w5500_delay_cb(osDelay);
 8001b7e:	48b0      	ldr	r0, [pc, #704]	; (8001e40 <vMaintEthTask+0x3dc>)
 8001b80:	f00d faf0 	bl	800f164 <w5500_delay_cb>
	  w5500_lib_init(&NetInfo);
 8001b84:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001b88:	f103 0308 	add.w	r3, r3, #8
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f00d f9ed 	bl	800ef6c <w5500_lib_init>
	  reg_wizchip_spi_cbfunc(Eth_spi_resv_byte, Eth_spi_send_byte);
 8001b92:	49ac      	ldr	r1, [pc, #688]	; (8001e44 <vMaintEthTask+0x3e0>)
 8001b94:	48ac      	ldr	r0, [pc, #688]	; (8001e48 <vMaintEthTask+0x3e4>)
 8001b96:	f007 fb6d 	bl	8009274 <reg_wizchip_spi_cbfunc>
	  reg_wizchip_cs_cbfunc(Eth_spi_select, Eth_spi_deselect);
 8001b9a:	49ac      	ldr	r1, [pc, #688]	; (8001e4c <vMaintEthTask+0x3e8>)
 8001b9c:	48ac      	ldr	r0, [pc, #688]	; (8001e50 <vMaintEthTask+0x3ec>)
 8001b9e:	f007 fb43 	bl	8009228 <reg_wizchip_cs_cbfunc>
	  reg_wizchip_cris_cbfunc(EthMutexTake, EthMutexRelease);
 8001ba2:	49ac      	ldr	r1, [pc, #688]	; (8001e54 <vMaintEthTask+0x3f0>)
 8001ba4:	48ac      	ldr	r0, [pc, #688]	; (8001e58 <vMaintEthTask+0x3f4>)
 8001ba6:	f007 fb19 	bl	80091dc <reg_wizchip_cris_cbfunc>
	  reg_dhcp_cbfunc(Callback_IPAssigned, Callback_IPAssigned, Callback_IPConflict);
 8001baa:	4aac      	ldr	r2, [pc, #688]	; (8001e5c <vMaintEthTask+0x3f8>)
 8001bac:	49ac      	ldr	r1, [pc, #688]	; (8001e60 <vMaintEthTask+0x3fc>)
 8001bae:	48ac      	ldr	r0, [pc, #688]	; (8001e60 <vMaintEthTask+0x3fc>)
 8001bb0:	f008 f8c4 	bl	8009d3c <reg_dhcp_cbfunc>
	  dns_service_init(SERVICE_SOCKET, (uint8_t *)DNS_buff, SOCKET_BUFF_SIZE);
 8001bb4:	f107 0320 	add.w	r3, r7, #32
 8001bb8:	3b18      	subs	r3, #24
 8001bba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	2004      	movs	r0, #4
 8001bc2:	f00a f945 	bl	800be50 <dns_service_init>
	  dns_service_reg_cb_net_ready(assigned_ip);
 8001bc6:	48a7      	ldr	r0, [pc, #668]	; (8001e64 <vMaintEthTask+0x400>)
 8001bc8:	f00a f930 	bl	800be2c <dns_service_reg_cb_net_ready>
	  dns_service_reg_cb_mutex(ServiceSockMutexTake, ServiceSockMutexRelease);
 8001bcc:	49a6      	ldr	r1, [pc, #664]	; (8001e68 <vMaintEthTask+0x404>)
 8001bce:	48a7      	ldr	r0, [pc, #668]	; (8001e6c <vMaintEthTask+0x408>)
 8001bd0:	f00a f910 	bl	800bdf4 <dns_service_reg_cb_mutex>


  /* Infinite loop */
  for(;;)
  {
		EthernetInfo.dhcp = NetInfo.dhcp;
 8001bd4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001bd8:	f103 031e 	add.w	r3, r3, #30
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001be2:	f102 0201 	add.w	r2, r2, #1
 8001be6:	7013      	strb	r3, [r2, #0]
		EthernetInfo.link = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001bee:	f102 0208 	add.w	r2, r2, #8
 8001bf2:	7013      	strb	r3, [r2, #0]

		if (w5500_init() != 0)continue; //try from begin in fail case
 8001bf4:	f00d fa78 	bl	800f0e8 <w5500_init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f040 81eb 	bne.w	8001fd6 <vMaintEthTask+0x572>
		vTaskDelay(delay0_5s);
 8001c00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c04:	f00f fa74 	bl	80110f0 <vTaskDelay>
		setSHAR(NetInfo.mac);			//set mac address
 8001c08:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001c0c:	f103 0308 	add.w	r3, r3, #8
 8001c10:	2206      	movs	r2, #6
 8001c12:	4619      	mov	r1, r3
 8001c14:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001c18:	f006 f89c 	bl	8007d54 <WIZCHIP_WRITE_BUF>

		if (NetInfo.dhcp == NETINFO_DHCP){
 8001c1c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001c20:	f103 031e 	add.w	r3, r3, #30
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d106      	bne.n	8001c38 <vMaintEthTask+0x1d4>
			DHCP_init(DHCP_SOCKET, DHCP_DATABUF);
 8001c2a:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001c2e:	4619      	mov	r1, r3
 8001c30:	2000      	movs	r0, #0
 8001c32:	f009 fb2b 	bl	800b28c <DHCP_init>
 8001c36:	e003      	b.n	8001c40 <vMaintEthTask+0x1dc>
			//todo DNS_init();
		}else{
			network_init();
 8001c38:	f00d f9a8 	bl	800ef8c <network_init>
			set_ip_aasigned();
 8001c3c:	f00d fa48 	bl	800f0d0 <set_ip_aasigned>
			if (NetInfo.dhcp == NETINFO_DHCP){

			}
//xSemaphoreTake(SocketMutex, portMAX_DELAY);
			//osMutexAcquire(NetworkHandle, osWaitForever);
			SocketMutexTake();
 8001c40:	f7ff fa56 	bl	80010f0 <SocketMutexTake>
			dhcp_rutine();
 8001c44:	f00d f9f2 	bl	800f02c <dhcp_rutine>

			if (!link_status()){
 8001c48:	f00d fa08 	bl	800f05c <link_status>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f040 80e0 	bne.w	8001e14 <vMaintEthTask+0x3b0>
				NetInfo.ip[0]	= 0, NetInfo.ip[1] 	= 0, NetInfo.ip[2] 	= 0, NetInfo.ip[3] 	= 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001c5a:	f102 020e 	add.w	r2, r2, #14
 8001c5e:	7013      	strb	r3, [r2, #0]
 8001c60:	2300      	movs	r3, #0
 8001c62:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001c66:	f102 020f 	add.w	r2, r2, #15
 8001c6a:	7013      	strb	r3, [r2, #0]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001c72:	f102 0210 	add.w	r2, r2, #16
 8001c76:	7013      	strb	r3, [r2, #0]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001c7e:	f102 0211 	add.w	r2, r2, #17
 8001c82:	7013      	strb	r3, [r2, #0]
				NetInfo.sn[0] 	= 0, NetInfo.sn[1] 	= 0, NetInfo.sn[2] 	= 0, NetInfo.sn[3] 	= 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001c8a:	f102 0212 	add.w	r2, r2, #18
 8001c8e:	7013      	strb	r3, [r2, #0]
 8001c90:	2300      	movs	r3, #0
 8001c92:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001c96:	f102 0213 	add.w	r2, r2, #19
 8001c9a:	7013      	strb	r3, [r2, #0]
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001ca2:	f102 0214 	add.w	r2, r2, #20
 8001ca6:	7013      	strb	r3, [r2, #0]
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001cae:	f102 0215 	add.w	r2, r2, #21
 8001cb2:	7013      	strb	r3, [r2, #0]
				NetInfo.gw[0] 	= 0, NetInfo.gw[1] 	= 0, NetInfo.gw[2] 	= 0, NetInfo.gw[3] 	= 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001cba:	f102 0216 	add.w	r2, r2, #22
 8001cbe:	7013      	strb	r3, [r2, #0]
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001cc6:	f102 0217 	add.w	r2, r2, #23
 8001cca:	7013      	strb	r3, [r2, #0]
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001cd2:	f102 0218 	add.w	r2, r2, #24
 8001cd6:	7013      	strb	r3, [r2, #0]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001cde:	f102 0219 	add.w	r2, r2, #25
 8001ce2:	7013      	strb	r3, [r2, #0]
				NetInfo.dns[0] 	= 0, NetInfo.dns[1] = 0, NetInfo.dns[2] = 0, NetInfo.dns[3] = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001cea:	f102 021a 	add.w	r2, r2, #26
 8001cee:	7013      	strb	r3, [r2, #0]
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001cf6:	f102 021b 	add.w	r2, r2, #27
 8001cfa:	7013      	strb	r3, [r2, #0]
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001d02:	f102 021c 	add.w	r2, r2, #28
 8001d06:	7013      	strb	r3, [r2, #0]
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001d0e:	f102 021d 	add.w	r2, r2, #29
 8001d12:	7013      	strb	r3, [r2, #0]

//xSemaphoreGive(SocketMutex);
				//osMutexRelease(NetworkHandle);
				SocketMutexRelease();
 8001d14:	f7ff f9fa 	bl	800110c <SocketMutexRelease>

				for(i = 0; i < 4; i++){
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001d1e:	f102 021f 	add.w	r2, r2, #31
 8001d22:	7013      	strb	r3, [r2, #0]
 8001d24:	e05a      	b.n	8001ddc <vMaintEthTask+0x378>
					EthernetInfo.ip[i] 	= NetInfo.ip[i];
 8001d26:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001d2a:	f103 031f 	add.w	r3, r3, #31
 8001d2e:	781a      	ldrb	r2, [r3, #0]
 8001d30:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001d34:	f103 031f 	add.w	r3, r3, #31
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8001d3e:	443a      	add	r2, r7
 8001d40:	f812 2c12 	ldrb.w	r2, [r2, #-18]
 8001d44:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001d48:	443b      	add	r3, r7
 8001d4a:	f803 2c2f 	strb.w	r2, [r3, #-47]
					EthernetInfo.sn[i] 	= NetInfo.sn[i];
 8001d4e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001d52:	f103 031f 	add.w	r3, r3, #31
 8001d56:	781a      	ldrb	r2, [r3, #0]
 8001d58:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001d5c:	f103 031f 	add.w	r3, r3, #31
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8001d66:	443a      	add	r2, r7
 8001d68:	f812 2c0e 	ldrb.w	r2, [r2, #-14]
 8001d6c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001d70:	443b      	add	r3, r7
 8001d72:	f803 2c2b 	strb.w	r2, [r3, #-43]
					EthernetInfo.gw[i] 	= NetInfo.gw[i];
 8001d76:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001d7a:	f103 031f 	add.w	r3, r3, #31
 8001d7e:	781a      	ldrb	r2, [r3, #0]
 8001d80:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001d84:	f103 031f 	add.w	r3, r3, #31
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8001d8e:	443a      	add	r2, r7
 8001d90:	f812 2c0a 	ldrb.w	r2, [r2, #-10]
 8001d94:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001d98:	443b      	add	r3, r7
 8001d9a:	f803 2c27 	strb.w	r2, [r3, #-39]
					EthernetInfo.dns[i] = NetInfo.dns[i];
 8001d9e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001da2:	f103 031f 	add.w	r3, r3, #31
 8001da6:	781a      	ldrb	r2, [r3, #0]
 8001da8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001dac:	f103 031f 	add.w	r3, r3, #31
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8001db6:	443a      	add	r2, r7
 8001db8:	f812 2c06 	ldrb.w	r2, [r2, #-6]
 8001dbc:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001dc0:	443b      	add	r3, r7
 8001dc2:	f803 2c23 	strb.w	r2, [r3, #-35]
				for(i = 0; i < 4; i++){
 8001dc6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001dca:	f103 031f 	add.w	r3, r3, #31
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001dd6:	f102 021f 	add.w	r2, r2, #31
 8001dda:	7013      	strb	r3, [r2, #0]
 8001ddc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001de0:	f103 031f 	add.w	r3, r3, #31
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	d99d      	bls.n	8001d26 <vMaintEthTask+0x2c2>
				}
				EthernetInfo.link 	= 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001df0:	f102 0208 	add.w	r2, r2, #8
 8001df4:	7013      	strb	r3, [r2, #0]
				xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 8001df6:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <vMaintEthTask+0x40c>)
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8001dfe:	f101 0108 	add.w	r1, r1, #8
 8001e02:	2302      	movs	r3, #2
 8001e04:	2200      	movs	r2, #0
 8001e06:	f00e f911 	bl	801002c <xQueueGenericSend>
				break;
 8001e0a:	bf00      	nop
			// SET DNS SERVER IP
			dns_service_set_dns_ip((uint8_t*)&EthernetInfo.dns);
			xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
			osDelay(delay1s);
		}
    osDelay(1);
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	f00d fbb7 	bl	800f580 <osDelay>
 8001e12:	e6df      	b.n	8001bd4 <vMaintEthTask+0x170>
			for(i = 0; i < 4; i++){//todo rewrite for get info from dhcp calbac
 8001e14:	2300      	movs	r3, #0
 8001e16:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001e1a:	f102 021f 	add.w	r2, r2, #31
 8001e1e:	7013      	strb	r3, [r2, #0]
 8001e20:	e083      	b.n	8001f2a <vMaintEthTask+0x4c6>
 8001e22:	bf00      	nop
 8001e24:	1fff7a10 	.word	0x1fff7a10
 8001e28:	1fff7a11 	.word	0x1fff7a11
 8001e2c:	1fff7a12 	.word	0x1fff7a12
 8001e30:	1fff7a13 	.word	0x1fff7a13
 8001e34:	20000374 	.word	0x20000374
 8001e38:	0800f1f5 	.word	0x0800f1f5
 8001e3c:	0800f1dd 	.word	0x0800f1dd
 8001e40:	0800f581 	.word	0x0800f581
 8001e44:	0800f26d 	.word	0x0800f26d
 8001e48:	0800f291 	.word	0x0800f291
 8001e4c:	0800f225 	.word	0x0800f225
 8001e50:	0800f20d 	.word	0x0800f20d
 8001e54:	080010a5 	.word	0x080010a5
 8001e58:	08001089 	.word	0x08001089
 8001e5c:	0800efc1 	.word	0x0800efc1
 8001e60:	0800efd9 	.word	0x0800efd9
 8001e64:	0800f0b9 	.word	0x0800f0b9
 8001e68:	08001141 	.word	0x08001141
 8001e6c:	08001125 	.word	0x08001125
 8001e70:	20000438 	.word	0x20000438
				EthernetInfo.ip[i] 	= NetInfo.ip[i];
 8001e74:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001e78:	f103 031f 	add.w	r3, r3, #31
 8001e7c:	781a      	ldrb	r2, [r3, #0]
 8001e7e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001e82:	f103 031f 	add.w	r3, r3, #31
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8001e8c:	443a      	add	r2, r7
 8001e8e:	f812 2c12 	ldrb.w	r2, [r2, #-18]
 8001e92:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001e96:	443b      	add	r3, r7
 8001e98:	f803 2c2f 	strb.w	r2, [r3, #-47]
				EthernetInfo.sn[i] 	= NetInfo.sn[i];
 8001e9c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001ea0:	f103 031f 	add.w	r3, r3, #31
 8001ea4:	781a      	ldrb	r2, [r3, #0]
 8001ea6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001eaa:	f103 031f 	add.w	r3, r3, #31
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8001eb4:	443a      	add	r2, r7
 8001eb6:	f812 2c0e 	ldrb.w	r2, [r2, #-14]
 8001eba:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001ebe:	443b      	add	r3, r7
 8001ec0:	f803 2c2b 	strb.w	r2, [r3, #-43]
				EthernetInfo.gw[i] 	= NetInfo.gw[i];
 8001ec4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001ec8:	f103 031f 	add.w	r3, r3, #31
 8001ecc:	781a      	ldrb	r2, [r3, #0]
 8001ece:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001ed2:	f103 031f 	add.w	r3, r3, #31
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8001edc:	443a      	add	r2, r7
 8001ede:	f812 2c0a 	ldrb.w	r2, [r2, #-10]
 8001ee2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001ee6:	443b      	add	r3, r7
 8001ee8:	f803 2c27 	strb.w	r2, [r3, #-39]
				EthernetInfo.dns[i] = NetInfo.dns[i];
 8001eec:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001ef0:	f103 031f 	add.w	r3, r3, #31
 8001ef4:	781a      	ldrb	r2, [r3, #0]
 8001ef6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001efa:	f103 031f 	add.w	r3, r3, #31
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8001f04:	443a      	add	r2, r7
 8001f06:	f812 2c06 	ldrb.w	r2, [r2, #-6]
 8001f0a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001f0e:	443b      	add	r3, r7
 8001f10:	f803 2c23 	strb.w	r2, [r3, #-35]
			for(i = 0; i < 4; i++){//todo rewrite for get info from dhcp calbac
 8001f14:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001f18:	f103 031f 	add.w	r3, r3, #31
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001f24:	f102 021f 	add.w	r2, r2, #31
 8001f28:	7013      	strb	r3, [r2, #0]
 8001f2a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001f2e:	f103 031f 	add.w	r3, r3, #31
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d99d      	bls.n	8001e74 <vMaintEthTask+0x410>
			EthernetInfo.link 		= 1;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001f3e:	f102 0208 	add.w	r2, r2, #8
 8001f42:	7013      	strb	r3, [r2, #0]
			EthernetInfo.speed 		= link_speed();
 8001f44:	f00d f8ac 	bl	800f0a0 <link_speed>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001f50:	f102 020a 	add.w	r2, r2, #10
 8001f54:	7013      	strb	r3, [r2, #0]
			EthernetInfo.duplex 	= link_duplex();
 8001f56:	f00d f897 	bl	800f088 <link_duplex>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001f62:	f102 0209 	add.w	r2, r2, #9
 8001f66:	7013      	strb	r3, [r2, #0]
			EthernetInfo.lease_s	= getDHCPLeasetime();
 8001f68:	f009 fac8 	bl	800b4fc <getDHCPLeasetime>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001f72:	f102 0204 	add.w	r2, r2, #4
 8001f76:	6013      	str	r3, [r2, #0]
			SocketMutexRelease();
 8001f78:	f7ff f8c8 	bl	800110c <SocketMutexRelease>
			if (NetInfo.ip[0]== 0){
 8001f7c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001f80:	f103 030e 	add.w	r3, r3, #14
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10e      	bne.n	8001fa8 <vMaintEthTask+0x544>
				xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <vMaintEthTask+0x578>)
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8001f92:	f101 0108 	add.w	r1, r1, #8
 8001f96:	2302      	movs	r3, #2
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f00e f847 	bl	801002c <xQueueGenericSend>
				osDelay(delay1s);
 8001f9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fa2:	f00d faed 	bl	800f580 <osDelay>
				continue;
 8001fa6:	e015      	b.n	8001fd4 <vMaintEthTask+0x570>
			dns_service_set_dns_ip((uint8_t*)&EthernetInfo.dns);
 8001fa8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001fac:	f103 0308 	add.w	r3, r3, #8
 8001fb0:	3315      	adds	r3, #21
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f009 ff66 	bl	800be84 <dns_service_set_dns_ip>
			xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <vMaintEthTask+0x578>)
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8001fc0:	f101 0108 	add.w	r1, r1, #8
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f00e f830 	bl	801002c <xQueueGenericSend>
			osDelay(delay1s);
 8001fcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fd0:	f00d fad6 	bl	800f580 <osDelay>
			if (NetInfo.dhcp == NETINFO_DHCP){
 8001fd4:	e634      	b.n	8001c40 <vMaintEthTask+0x1dc>
		if (w5500_init() != 0)continue; //try from begin in fail case
 8001fd6:	bf00      	nop
		EthernetInfo.dhcp = NetInfo.dhcp;
 8001fd8:	e5fc      	b.n	8001bd4 <vMaintEthTask+0x170>
 8001fda:	bf00      	nop
 8001fdc:	20000438 	.word	0x20000438

08001fe0 <vDebugMemUsage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vDebugMemUsage */
void vDebugMemUsage(void *argument)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vDebugMemUsage */
	uint32_t	mem;
  /* Infinite loop */
  for(;;)
  {
	  mem = osThreadGetStackSpace(defaultTaskHandle);
 8001fe8:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <vDebugMemUsage+0x80>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f00d fa89 	bl	800f504 <osThreadGetStackSpace>
 8001ff2:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(SensorsTaskHandle);
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <vDebugMemUsage+0x84>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f00d fa83 	bl	800f504 <osThreadGetStackSpace>
 8001ffe:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(RW_Settings_TasHandle);
 8002000:	4b19      	ldr	r3, [pc, #100]	; (8002068 <vDebugMemUsage+0x88>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f00d fa7d 	bl	800f504 <osThreadGetStackSpace>
 800200a:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(oneSecondTickTaHandle);
 800200c:	4b17      	ldr	r3, [pc, #92]	; (800206c <vDebugMemUsage+0x8c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f00d fa77 	bl	800f504 <osThreadGetStackSpace>
 8002016:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(maintEthTaskHandle);
 8002018:	4b15      	ldr	r3, [pc, #84]	; (8002070 <vDebugMemUsage+0x90>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f00d fa71 	bl	800f504 <osThreadGetStackSpace>
 8002022:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(DebugMemUsageTHandle);
 8002024:	4b13      	ldr	r3, [pc, #76]	; (8002074 <vDebugMemUsage+0x94>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f00d fa6b 	bl	800f504 <osThreadGetStackSpace>
 800202e:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(httpServTaskHandle);
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <vDebugMemUsage+0x98>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f00d fa65 	bl	800f504 <osThreadGetStackSpace>
 800203a:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(NULL);
 800203c:	2000      	movs	r0, #0
 800203e:	f00d fa61 	bl	800f504 <osThreadGetStackSpace>
 8002042:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(NULL);
 8002044:	2000      	movs	r0, #0
 8002046:	f00d fa5d 	bl	800f504 <osThreadGetStackSpace>
 800204a:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(NULL);
 800204c:	2000      	movs	r0, #0
 800204e:	f00d fa59 	bl	800f504 <osThreadGetStackSpace>
 8002052:	60f8      	str	r0, [r7, #12]
	  osDelay(delay1s);
 8002054:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002058:	f00d fa92 	bl	800f580 <osDelay>
	  mem = osThreadGetStackSpace(defaultTaskHandle);
 800205c:	e7c4      	b.n	8001fe8 <vDebugMemUsage+0x8>
 800205e:	bf00      	nop
 8002060:	20000414 	.word	0x20000414
 8002064:	20000418 	.word	0x20000418
 8002068:	2000041c 	.word	0x2000041c
 800206c:	20000420 	.word	0x20000420
 8002070:	20000424 	.word	0x20000424
 8002074:	20000428 	.word	0x20000428
 8002078:	2000042c 	.word	0x2000042c

0800207c <httpServ>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_httpServ */
void httpServ(void *argument)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800208a:	f843 0c2c 	str.w	r0, [r3, #-44]
  /* USER CODE BEGIN httpServ */
	Ethernet_info_struct	EthernetInfo;
	uint8_t 				socknumlist[] = {HTTP_SERVER_SOCKET, HTTP_SERVER_SOCKET1, HTTP_SERVER_SOCKET2};
 800208e:	4a4a      	ldr	r2, [pc, #296]	; (80021b8 <httpServ+0x13c>)
 8002090:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002094:	f103 0308 	add.w	r3, r3, #8
 8002098:	6812      	ldr	r2, [r2, #0]
 800209a:	4611      	mov	r1, r2
 800209c:	8019      	strh	r1, [r3, #0]
 800209e:	3302      	adds	r3, #2
 80020a0:	0c12      	lsrs	r2, r2, #16
 80020a2:	701a      	strb	r2, [r3, #0]
	uint8_t 				http_buffer_rx[2048];
	uint8_t 				http_buffer_tx[2048];
	uint8_t 				http_nsockets = sizeof(socknumlist) / sizeof(socknumlist[0]);
 80020a4:	2303      	movs	r3, #3
 80020a6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80020aa:	f102 020e 	add.w	r2, r2, #14
 80020ae:	7013      	strb	r3, [r2, #0]
	uint8_t					i;

	httpServer_init(http_buffer_tx, http_buffer_rx, http_nsockets, socknumlist);		// Tx/Rx buffers (2 kB) / The number of W5500 chip H/W sockets in use
 80020b0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80020b4:	f103 0308 	add.w	r3, r3, #8
 80020b8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80020bc:	f102 020e 	add.w	r2, r2, #14
 80020c0:	7812      	ldrb	r2, [r2, #0]
 80020c2:	f607 0108 	addw	r1, r7, #2056	; 0x808
 80020c6:	f107 0010 	add.w	r0, r7, #16
 80020ca:	3808      	subs	r0, #8
 80020cc:	f00b ff8c 	bl	800dfe8 <httpServer_init>
	reg_external_post_cgi_processor(http_post_cgi_processor);
 80020d0:	483a      	ldr	r0, [pc, #232]	; (80021bc <httpServ+0x140>)
 80020d2:	f00c fefb 	bl	800eecc <reg_external_post_cgi_processor>
	reg_external_get_cgi_processor(http_get_cgi_processor);
 80020d6:	483a      	ldr	r0, [pc, #232]	; (80021c0 <httpServ+0x144>)
 80020d8:	f00c ff10 	bl	800eefc <reg_external_get_cgi_processor>

	http_parse_params_init(PowerDataQHandle,			PowrData);
 80020dc:	4b39      	ldr	r3, [pc, #228]	; (80021c4 <httpServ+0x148>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2103      	movs	r1, #3
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 fc48 	bl	8002978 <http_parse_params_init>
	http_parse_params_init(Curr_sensor_settingsHandle,	PowrSensSett);
 80020e8:	4b37      	ldr	r3, [pc, #220]	; (80021c8 <httpServ+0x14c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2104      	movs	r1, #4
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 fc42 	bl	8002978 <http_parse_params_init>
	http_parse_params_init(mqttQHandle,					MQTT);
 80020f4:	4b35      	ldr	r3, [pc, #212]	; (80021cc <httpServ+0x150>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2100      	movs	r1, #0
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 fc3c 	bl	8002978 <http_parse_params_init>
	http_parse_params_init(mb_tcp_settingsQHandle,		ModBusTCP);
 8002100:	4b33      	ldr	r3, [pc, #204]	; (80021d0 <httpServ+0x154>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2102      	movs	r1, #2
 8002106:	4618      	mov	r0, r3
 8002108:	f000 fc36 	bl	8002978 <http_parse_params_init>

	reg_httpServer_webContent((uint8_t *)"index.html",			(uint8_t *)index_page);
 800210c:	4931      	ldr	r1, [pc, #196]	; (80021d4 <httpServ+0x158>)
 800210e:	4832      	ldr	r0, [pc, #200]	; (80021d8 <httpServ+0x15c>)
 8002110:	f00c fd5e 	bl	800ebd0 <reg_httpServer_webContent>
	reg_httpServer_webContent((uint8_t *)"power_settings.html",	(uint8_t *)setting_power_sens_page);
 8002114:	4931      	ldr	r1, [pc, #196]	; (80021dc <httpServ+0x160>)
 8002116:	4832      	ldr	r0, [pc, #200]	; (80021e0 <httpServ+0x164>)
 8002118:	f00c fd5a 	bl	800ebd0 <reg_httpServer_webContent>
	reg_httpServer_webContent((uint8_t *)"mqtt.html",			(uint8_t *)conf_page_mqtt);
 800211c:	4931      	ldr	r1, [pc, #196]	; (80021e4 <httpServ+0x168>)
 800211e:	4832      	ldr	r0, [pc, #200]	; (80021e8 <httpServ+0x16c>)
 8002120:	f00c fd56 	bl	800ebd0 <reg_httpServer_webContent>


  /* Infinite loop */
  for(;;)
  {
	  xQueuePeek(EthernetInfoQHandle, &EthernetInfo, 0);
 8002124:	4b31      	ldr	r3, [pc, #196]	; (80021ec <httpServ+0x170>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800212c:	f101 010c 	add.w	r1, r1, #12
 8002130:	2200      	movs	r2, #0
 8002132:	4618      	mov	r0, r3
 8002134:	f00e fb00 	bl	8010738 <xQueuePeek>
	  if ((EthernetInfo.link == ETH_LINK_UP) && (assigned_ip() == true)){
 8002138:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800213c:	f103 030c 	add.w	r3, r3, #12
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d031      	beq.n	80021aa <httpServ+0x12e>
 8002146:	f00c ffb7 	bl	800f0b8 <assigned_ip>
 800214a:	4603      	mov	r3, r0
 800214c:	2b01      	cmp	r3, #1
 800214e:	d12c      	bne.n	80021aa <httpServ+0x12e>
		  for(i = 0 ; i < http_nsockets; i++){
 8002150:	2300      	movs	r3, #0
 8002152:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002156:	f102 020f 	add.w	r2, r2, #15
 800215a:	7013      	strb	r3, [r2, #0]
 800215c:	e018      	b.n	8002190 <httpServ+0x114>
			  SocketMutexTake();
 800215e:	f7fe ffc7 	bl	80010f0 <SocketMutexTake>
			  httpServer_run(i); // HTTP Server handler
 8002162:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002166:	f103 030f 	add.w	r3, r3, #15
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f00b ff57 	bl	800e020 <httpServer_run>
			  SocketMutexRelease();
 8002172:	f7fe ffcb 	bl	800110c <SocketMutexRelease>
			  osThreadYield();
 8002176:	f00d f9e3 	bl	800f540 <osThreadYield>
		  for(i = 0 ; i < http_nsockets; i++){
 800217a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800217e:	f103 030f 	add.w	r3, r3, #15
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	3301      	adds	r3, #1
 8002186:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800218a:	f102 020f 	add.w	r2, r2, #15
 800218e:	7013      	strb	r3, [r2, #0]
 8002190:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002194:	f103 030f 	add.w	r3, r3, #15
 8002198:	781a      	ldrb	r2, [r3, #0]
 800219a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800219e:	f103 030e 	add.w	r3, r3, #14
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d3da      	bcc.n	800215e <httpServ+0xe2>
	  if ((EthernetInfo.link == ETH_LINK_UP) && (assigned_ip() == true)){
 80021a8:	e003      	b.n	80021b2 <httpServ+0x136>
		  }
	  }else{
		  osDelay(delay1s);
 80021aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021ae:	f00d f9e7 	bl	800f580 <osDelay>
	  }
	  osThreadYield();
 80021b2:	f00d f9c5 	bl	800f540 <osThreadYield>
	  xQueuePeek(EthernetInfoQHandle, &EthernetInfo, 0);
 80021b6:	e7b5      	b.n	8002124 <httpServ+0xa8>
 80021b8:	08020e5c 	.word	0x08020e5c
 80021bc:	080033b9 	.word	0x080033b9
 80021c0:	08003461 	.word	0x08003461
 80021c4:	2000043c 	.word	0x2000043c
 80021c8:	20000440 	.word	0x20000440
 80021cc:	20000444 	.word	0x20000444
 80021d0:	20000448 	.word	0x20000448
 80021d4:	080201a4 	.word	0x080201a4
 80021d8:	080204c0 	.word	0x080204c0
 80021dc:	080204cc 	.word	0x080204cc
 80021e0:	08020878 	.word	0x08020878
 80021e4:	0802088c 	.word	0x0802088c
 80021e8:	08020e50 	.word	0x08020e50
 80021ec:	20000438 	.word	0x20000438

080021f0 <vMQTT_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vMQTT_Task */
void vMQTT_Task(void *argument)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	f5ad 6d21 	sub.w	sp, sp, #2576	; 0xa10
 80021f6:	af02      	add	r7, sp, #8
 80021f8:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 80021fc:	f6a3 2304 	subw	r3, r3, #2564	; 0xa04
 8002200:	6018      	str	r0, [r3, #0]
	char 					MQTT_READ_BUF[MQTT_BUF_LEN];
	char					topik_name[TOPIK_MAX_LEN];
	char					topik_payload[128];


	init_mqtt_call_mutex(SocketMutexTake, SocketMutexRelease);
 8002202:	495a      	ldr	r1, [pc, #360]	; (800236c <vMQTT_Task+0x17c>)
 8002204:	485a      	ldr	r0, [pc, #360]	; (8002370 <vMQTT_Task+0x180>)
 8002206:	f001 f999 	bl	800353c <init_mqtt_call_mutex>
  /* Infinite loop */
	for(;;)
	{
		osDelay(delay1s);
 800220a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800220e:	f00d f9b7 	bl	800f580 <osDelay>
		xQueuePeek(EthernetInfoQHandle,  &EthernetInfo, 0);
 8002212:	4b58      	ldr	r3, [pc, #352]	; (8002374 <vMQTT_Task+0x184>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 800221a:	2200      	movs	r2, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f00e fa8b 	bl	8010738 <xQueuePeek>
		if ((EthernetInfo.link != ETH_LINK_UP) || (assigned_ip() != true)){
 8002222:	f897 39e8 	ldrb.w	r3, [r7, #2536]	; 0x9e8
 8002226:	f083 0301 	eor.w	r3, r3, #1
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	f040 8093 	bne.w	8002358 <vMQTT_Task+0x168>
 8002232:	f00c ff41 	bl	800f0b8 <assigned_ip>
 8002236:	4603      	mov	r3, r0
 8002238:	2b01      	cmp	r3, #1
 800223a:	f040 808d 	bne.w	8002358 <vMQTT_Task+0x168>
			continue;
		}
		xQueuePeek(mqttQHandle, &MQTT_cred, 0);
 800223e:	4b4e      	ldr	r3, [pc, #312]	; (8002378 <vMQTT_Task+0x188>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f507 6112 	add.w	r1, r7, #2336	; 0x920
 8002246:	2200      	movs	r2, #0
 8002248:	4618      	mov	r0, r3
 800224a:	f00e fa75 	bl	8010738 <xQueuePeek>
		while (MQTT_cred.enable == 0){
 800224e:	e00b      	b.n	8002268 <vMQTT_Task+0x78>
			osDelay(delay1s);
 8002250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002254:	f00d f994 	bl	800f580 <osDelay>
			xQueuePeek(mqttQHandle, &MQTT_cred, 0);
 8002258:	4b47      	ldr	r3, [pc, #284]	; (8002378 <vMQTT_Task+0x188>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f507 6112 	add.w	r1, r7, #2336	; 0x920
 8002260:	2200      	movs	r2, #0
 8002262:	4618      	mov	r0, r3
 8002264:	f00e fa68 	bl	8010738 <xQueuePeek>
		while (MQTT_cred.enable == 0){
 8002268:	f897 3921 	ldrb.w	r3, [r7, #2337]	; 0x921
 800226c:	f083 0301 	eor.w	r3, r3, #1
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1ec      	bne.n	8002250 <vMQTT_Task+0x60>
		}
		if (!MQTT_cred.enable) continue; //TODO mybe remove;
 8002276:	f897 3921 	ldrb.w	r3, [r7, #2337]	; 0x921
 800227a:	f083 0301 	eor.w	r3, r3, #1
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	d16b      	bne.n	800235c <vMQTT_Task+0x16c>
		if (mqtt_client_init(&EthernetInfo, &MQTT_cred, MQTT_SEND_BUF, MQTT_BUF_LEN, MQTT_READ_BUF, MQTT_BUF_LEN) != 0 ) {
 8002284:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 8002288:	f507 6112 	add.w	r1, r7, #2336	; 0x920
 800228c:	f607 10e8 	addw	r0, r7, #2536	; 0x9e8
 8002290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002294:	9301      	str	r3, [sp, #4]
 8002296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022a0:	f001 f968 	bl	8003574 <mqtt_client_init>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d15a      	bne.n	8002360 <vMQTT_Task+0x170>
			//TODO add message to log
			continue;
		}
		if (mqtt_client_connect() < 0) continue;
 80022aa:	f001 fa4f 	bl	800374c <mqtt_client_connect>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	db57      	blt.n	8002364 <vMQTT_Task+0x174>
		if (mqtt_client_reg_dev_on_home_assist() != 0) continue;
 80022b4:	f001 fa9a 	bl	80037ec <mqtt_client_reg_dev_on_home_assist>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d154      	bne.n	8002368 <vMQTT_Task+0x178>

		generate_status_topik(topik_name, 0);
 80022be:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80022c2:	2100      	movs	r1, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f001 fe1f 	bl	8003f08 <generate_status_topik>
		while (1){
			xQueuePeek(PowerDataQHandle, &PowerData, 0);
 80022ca:	4b2c      	ldr	r3, [pc, #176]	; (800237c <vMQTT_Task+0x18c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f607 1108 	addw	r1, r7, #2312	; 0x908
 80022d2:	2200      	movs	r2, #0
 80022d4:	4618      	mov	r0, r3
 80022d6:	f00e fa2f 	bl	8010738 <xQueuePeek>
			generate_key_value_JSON(topik_payload, dev_class_energy, PowerData.KWatt_h);
 80022da:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 80022de:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80022e6:	f107 0308 	add.w	r3, r7, #8
 80022ea:	eeb0 0a67 	vmov.f32	s0, s15
 80022ee:	4924      	ldr	r1, [pc, #144]	; (8002380 <vMQTT_Task+0x190>)
 80022f0:	4618      	mov	r0, r3
 80022f2:	f001 fe41 	bl	8003f78 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80022f6:	f107 0208 	add.w	r2, r7, #8
 80022fa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80022fe:	4611      	mov	r1, r2
 8002300:	4618      	mov	r0, r3
 8002302:	f001 fb81 	bl	8003a08 <send_data_to_topik>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d11d      	bne.n	8002348 <vMQTT_Task+0x158>

			generate_key_value_JSON(topik_payload, dev_class_voltage, PowerData.Voltage);
 800230c:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8002310:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002314:	edd3 7a00 	vldr	s15, [r3]
 8002318:	f107 0308 	add.w	r3, r7, #8
 800231c:	eeb0 0a67 	vmov.f32	s0, s15
 8002320:	4918      	ldr	r1, [pc, #96]	; (8002384 <vMQTT_Task+0x194>)
 8002322:	4618      	mov	r0, r3
 8002324:	f001 fe28 	bl	8003f78 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 8002328:	f107 0208 	add.w	r2, r7, #8
 800232c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002330:	4611      	mov	r1, r2
 8002332:	4618      	mov	r0, r3
 8002334:	f001 fb68 	bl	8003a08 <send_data_to_topik>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d106      	bne.n	800234c <vMQTT_Task+0x15c>


			//generate_status_topik
			osDelay(1000);
 800233e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002342:	f00d f91d 	bl	800f580 <osDelay>
			xQueuePeek(PowerDataQHandle, &PowerData, 0);
 8002346:	e7c0      	b.n	80022ca <vMQTT_Task+0xda>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 8002348:	bf00      	nop
 800234a:	e000      	b.n	800234e <vMQTT_Task+0x15e>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 800234c:	bf00      	nop
		}
		osDelay(1000);
 800234e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002352:	f00d f915 	bl	800f580 <osDelay>
 8002356:	e758      	b.n	800220a <vMQTT_Task+0x1a>
			continue;
 8002358:	bf00      	nop
 800235a:	e756      	b.n	800220a <vMQTT_Task+0x1a>
		if (!MQTT_cred.enable) continue; //TODO mybe remove;
 800235c:	bf00      	nop
 800235e:	e754      	b.n	800220a <vMQTT_Task+0x1a>
			continue;
 8002360:	bf00      	nop
 8002362:	e752      	b.n	800220a <vMQTT_Task+0x1a>
		if (mqtt_client_connect() < 0) continue;
 8002364:	bf00      	nop
 8002366:	e750      	b.n	800220a <vMQTT_Task+0x1a>
		if (mqtt_client_reg_dev_on_home_assist() != 0) continue;
 8002368:	bf00      	nop
		osDelay(delay1s);
 800236a:	e74e      	b.n	800220a <vMQTT_Task+0x1a>
 800236c:	0800110d 	.word	0x0800110d
 8002370:	080010f1 	.word	0x080010f1
 8002374:	20000438 	.word	0x20000438
 8002378:	20000444 	.word	0x20000444
 800237c:	2000043c 	.word	0x2000043c
 8002380:	08020e60 	.word	0x08020e60
 8002384:	08020e68 	.word	0x08020e68

08002388 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d101      	bne.n	800239e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800239a:	f002 fbd5 	bl	8004b48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40010000 	.word	0x40010000

080023ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023b0:	b672      	cpsid	i
}
 80023b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023b4:	e7fe      	b.n	80023b4 <Error_Handler+0x8>
	...

080023b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	607b      	str	r3, [r7, #4]
 80023c2:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_MspInit+0x54>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	4a11      	ldr	r2, [pc, #68]	; (800240c <HAL_MspInit+0x54>)
 80023c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023cc:	6453      	str	r3, [r2, #68]	; 0x44
 80023ce:	4b0f      	ldr	r3, [pc, #60]	; (800240c <HAL_MspInit+0x54>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d6:	607b      	str	r3, [r7, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	603b      	str	r3, [r7, #0]
 80023de:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_MspInit+0x54>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	4a0a      	ldr	r2, [pc, #40]	; (800240c <HAL_MspInit+0x54>)
 80023e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ea:	4b08      	ldr	r3, [pc, #32]	; (800240c <HAL_MspInit+0x54>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023f6:	2200      	movs	r2, #0
 80023f8:	210f      	movs	r1, #15
 80023fa:	f06f 0001 	mvn.w	r0, #1
 80023fe:	f002 fc7b 	bl	8004cf8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800

08002410 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a0b      	ldr	r2, [pc, #44]	; (800244c <HAL_CRC_MspInit+0x3c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d10d      	bne.n	800243e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <HAL_CRC_MspInit+0x40>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	4a09      	ldr	r2, [pc, #36]	; (8002450 <HAL_CRC_MspInit+0x40>)
 800242c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002430:	6313      	str	r3, [r2, #48]	; 0x30
 8002432:	4b07      	ldr	r3, [pc, #28]	; (8002450 <HAL_CRC_MspInit+0x40>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800243e:	bf00      	nop
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40023000 	.word	0x40023000
 8002450:	40023800 	.word	0x40023800

08002454 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08c      	sub	sp, #48	; 0x30
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 031c 	add.w	r3, r7, #28
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a32      	ldr	r2, [pc, #200]	; (800253c <HAL_SPI_MspInit+0xe8>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d12c      	bne.n	80024d0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	61bb      	str	r3, [r7, #24]
 800247a:	4b31      	ldr	r3, [pc, #196]	; (8002540 <HAL_SPI_MspInit+0xec>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	4a30      	ldr	r2, [pc, #192]	; (8002540 <HAL_SPI_MspInit+0xec>)
 8002480:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002484:	6453      	str	r3, [r2, #68]	; 0x44
 8002486:	4b2e      	ldr	r3, [pc, #184]	; (8002540 <HAL_SPI_MspInit+0xec>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800248e:	61bb      	str	r3, [r7, #24]
 8002490:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	4b2a      	ldr	r3, [pc, #168]	; (8002540 <HAL_SPI_MspInit+0xec>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	4a29      	ldr	r2, [pc, #164]	; (8002540 <HAL_SPI_MspInit+0xec>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	6313      	str	r3, [r2, #48]	; 0x30
 80024a2:	4b27      	ldr	r3, [pc, #156]	; (8002540 <HAL_SPI_MspInit+0xec>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80024ae:	23e0      	movs	r3, #224	; 0xe0
 80024b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b2:	2302      	movs	r3, #2
 80024b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ba:	2303      	movs	r3, #3
 80024bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024be:	2305      	movs	r3, #5
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c2:	f107 031c 	add.w	r3, r7, #28
 80024c6:	4619      	mov	r1, r3
 80024c8:	481e      	ldr	r0, [pc, #120]	; (8002544 <HAL_SPI_MspInit+0xf0>)
 80024ca:	f002 fced 	bl	8004ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80024ce:	e030      	b.n	8002532 <HAL_SPI_MspInit+0xde>
  else if(hspi->Instance==SPI3)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a1c      	ldr	r2, [pc, #112]	; (8002548 <HAL_SPI_MspInit+0xf4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d12b      	bne.n	8002532 <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	4b18      	ldr	r3, [pc, #96]	; (8002540 <HAL_SPI_MspInit+0xec>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	4a17      	ldr	r2, [pc, #92]	; (8002540 <HAL_SPI_MspInit+0xec>)
 80024e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024e8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ea:	4b15      	ldr	r3, [pc, #84]	; (8002540 <HAL_SPI_MspInit+0xec>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	4b11      	ldr	r3, [pc, #68]	; (8002540 <HAL_SPI_MspInit+0xec>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	4a10      	ldr	r2, [pc, #64]	; (8002540 <HAL_SPI_MspInit+0xec>)
 8002500:	f043 0302 	orr.w	r3, r3, #2
 8002504:	6313      	str	r3, [r2, #48]	; 0x30
 8002506:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <HAL_SPI_MspInit+0xec>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002512:	2338      	movs	r3, #56	; 0x38
 8002514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002516:	2302      	movs	r3, #2
 8002518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251e:	2303      	movs	r3, #3
 8002520:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002522:	2306      	movs	r3, #6
 8002524:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002526:	f107 031c 	add.w	r3, r7, #28
 800252a:	4619      	mov	r1, r3
 800252c:	4807      	ldr	r0, [pc, #28]	; (800254c <HAL_SPI_MspInit+0xf8>)
 800252e:	f002 fcbb 	bl	8004ea8 <HAL_GPIO_Init>
}
 8002532:	bf00      	nop
 8002534:	3730      	adds	r7, #48	; 0x30
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40013000 	.word	0x40013000
 8002540:	40023800 	.word	0x40023800
 8002544:	40020000 	.word	0x40020000
 8002548:	40003c00 	.word	0x40003c00
 800254c:	40020400 	.word	0x40020400

08002550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08a      	sub	sp, #40	; 0x28
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	60da      	str	r2, [r3, #12]
 8002566:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a1d      	ldr	r2, [pc, #116]	; (80025e4 <HAL_UART_MspInit+0x94>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d133      	bne.n	80025da <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	4b1c      	ldr	r3, [pc, #112]	; (80025e8 <HAL_UART_MspInit+0x98>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	4a1b      	ldr	r2, [pc, #108]	; (80025e8 <HAL_UART_MspInit+0x98>)
 800257c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002580:	6413      	str	r3, [r2, #64]	; 0x40
 8002582:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <HAL_UART_MspInit+0x98>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <HAL_UART_MspInit+0x98>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	4a14      	ldr	r2, [pc, #80]	; (80025e8 <HAL_UART_MspInit+0x98>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	6313      	str	r3, [r2, #48]	; 0x30
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_UART_MspInit+0x98>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025aa:	230c      	movs	r3, #12
 80025ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ae:	2302      	movs	r3, #2
 80025b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b6:	2303      	movs	r3, #3
 80025b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025ba:	2307      	movs	r3, #7
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025be:	f107 0314 	add.w	r3, r7, #20
 80025c2:	4619      	mov	r1, r3
 80025c4:	4809      	ldr	r0, [pc, #36]	; (80025ec <HAL_UART_MspInit+0x9c>)
 80025c6:	f002 fc6f 	bl	8004ea8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	2105      	movs	r1, #5
 80025ce:	2026      	movs	r0, #38	; 0x26
 80025d0:	f002 fb92 	bl	8004cf8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025d4:	2026      	movs	r0, #38	; 0x26
 80025d6:	f002 fbab 	bl	8004d30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025da:	bf00      	nop
 80025dc:	3728      	adds	r7, #40	; 0x28
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40004400 	.word	0x40004400
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40020000 	.word	0x40020000

080025f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08c      	sub	sp, #48	; 0x30
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002600:	2300      	movs	r3, #0
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	4b2e      	ldr	r3, [pc, #184]	; (80026c0 <HAL_InitTick+0xd0>)
 8002606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002608:	4a2d      	ldr	r2, [pc, #180]	; (80026c0 <HAL_InitTick+0xd0>)
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	6453      	str	r3, [r2, #68]	; 0x44
 8002610:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <HAL_InitTick+0xd0>)
 8002612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800261c:	f107 020c 	add.w	r2, r7, #12
 8002620:	f107 0310 	add.w	r3, r7, #16
 8002624:	4611      	mov	r1, r2
 8002626:	4618      	mov	r0, r3
 8002628:	f003 fa74 	bl	8005b14 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800262c:	f003 fa5e 	bl	8005aec <HAL_RCC_GetPCLK2Freq>
 8002630:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002634:	4a23      	ldr	r2, [pc, #140]	; (80026c4 <HAL_InitTick+0xd4>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	0c9b      	lsrs	r3, r3, #18
 800263c:	3b01      	subs	r3, #1
 800263e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002640:	4b21      	ldr	r3, [pc, #132]	; (80026c8 <HAL_InitTick+0xd8>)
 8002642:	4a22      	ldr	r2, [pc, #136]	; (80026cc <HAL_InitTick+0xdc>)
 8002644:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002646:	4b20      	ldr	r3, [pc, #128]	; (80026c8 <HAL_InitTick+0xd8>)
 8002648:	f240 32e7 	movw	r2, #999	; 0x3e7
 800264c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800264e:	4a1e      	ldr	r2, [pc, #120]	; (80026c8 <HAL_InitTick+0xd8>)
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002654:	4b1c      	ldr	r3, [pc, #112]	; (80026c8 <HAL_InitTick+0xd8>)
 8002656:	2200      	movs	r2, #0
 8002658:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800265a:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <HAL_InitTick+0xd8>)
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002660:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <HAL_InitTick+0xd8>)
 8002662:	2200      	movs	r2, #0
 8002664:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002666:	4818      	ldr	r0, [pc, #96]	; (80026c8 <HAL_InitTick+0xd8>)
 8002668:	f004 f85c 	bl	8006724 <HAL_TIM_Base_Init>
 800266c:	4603      	mov	r3, r0
 800266e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002672:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002676:	2b00      	cmp	r3, #0
 8002678:	d11b      	bne.n	80026b2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800267a:	4813      	ldr	r0, [pc, #76]	; (80026c8 <HAL_InitTick+0xd8>)
 800267c:	f004 f8ac 	bl	80067d8 <HAL_TIM_Base_Start_IT>
 8002680:	4603      	mov	r3, r0
 8002682:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002686:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800268a:	2b00      	cmp	r3, #0
 800268c:	d111      	bne.n	80026b2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800268e:	2019      	movs	r0, #25
 8002690:	f002 fb4e 	bl	8004d30 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b0f      	cmp	r3, #15
 8002698:	d808      	bhi.n	80026ac <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800269a:	2200      	movs	r2, #0
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	2019      	movs	r0, #25
 80026a0:	f002 fb2a 	bl	8004cf8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026a4:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <HAL_InitTick+0xe0>)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	e002      	b.n	80026b2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80026b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3730      	adds	r7, #48	; 0x30
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800
 80026c4:	431bde83 	.word	0x431bde83
 80026c8:	2000047c 	.word	0x2000047c
 80026cc:	40010000 	.word	0x40010000
 80026d0:	200000bc 	.word	0x200000bc

080026d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026d8:	e7fe      	b.n	80026d8 <NMI_Handler+0x4>

080026da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026da:	b480      	push	{r7}
 80026dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026de:	e7fe      	b.n	80026de <HardFault_Handler+0x4>

080026e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026e4:	e7fe      	b.n	80026e4 <MemManage_Handler+0x4>

080026e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026e6:	b480      	push	{r7}
 80026e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ea:	e7fe      	b.n	80026ea <BusFault_Handler+0x4>

080026ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026f0:	e7fe      	b.n	80026f0 <UsageFault_Handler+0x4>

080026f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026f2:	b480      	push	{r7}
 80026f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002704:	4802      	ldr	r0, [pc, #8]	; (8002710 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002706:	f004 f8c9 	bl	800689c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	2000047c 	.word	0x2000047c

08002714 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002718:	4802      	ldr	r0, [pc, #8]	; (8002724 <USART2_IRQHandler+0x10>)
 800271a:	f004 fb25 	bl	8006d68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	200003cc 	.word	0x200003cc

08002728 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return 1;
 800272c:	2301      	movs	r3, #1
}
 800272e:	4618      	mov	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <_kill>:

int _kill(int pid, int sig)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002742:	f019 fe51 	bl	801c3e8 <__errno>
 8002746:	4603      	mov	r3, r0
 8002748:	2216      	movs	r2, #22
 800274a:	601a      	str	r2, [r3, #0]
  return -1;
 800274c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <_exit>:

void _exit (int status)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002760:	f04f 31ff 	mov.w	r1, #4294967295
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff ffe7 	bl	8002738 <_kill>
  while (1) {}    /* Make sure we hang here */
 800276a:	e7fe      	b.n	800276a <_exit+0x12>

0800276c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	e00a      	b.n	8002794 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800277e:	f3af 8000 	nop.w
 8002782:	4601      	mov	r1, r0
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	60ba      	str	r2, [r7, #8]
 800278a:	b2ca      	uxtb	r2, r1
 800278c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	3301      	adds	r3, #1
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	429a      	cmp	r2, r3
 800279a:	dbf0      	blt.n	800277e <_read+0x12>
  }

  return len;
 800279c:	687b      	ldr	r3, [r7, #4]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b086      	sub	sp, #24
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	e009      	b.n	80027cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	60ba      	str	r2, [r7, #8]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	3301      	adds	r3, #1
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	dbf1      	blt.n	80027b8 <_write+0x12>
  }
  return len;
 80027d4:	687b      	ldr	r3, [r7, #4]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <_close>:

int _close(int file)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002806:	605a      	str	r2, [r3, #4]
  return 0;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <_isatty>:

int _isatty(int file)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800281e:	2301      	movs	r3, #1
}
 8002820:	4618      	mov	r0, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002850:	4a14      	ldr	r2, [pc, #80]	; (80028a4 <_sbrk+0x5c>)
 8002852:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <_sbrk+0x60>)
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800285c:	4b13      	ldr	r3, [pc, #76]	; (80028ac <_sbrk+0x64>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d102      	bne.n	800286a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002864:	4b11      	ldr	r3, [pc, #68]	; (80028ac <_sbrk+0x64>)
 8002866:	4a12      	ldr	r2, [pc, #72]	; (80028b0 <_sbrk+0x68>)
 8002868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800286a:	4b10      	ldr	r3, [pc, #64]	; (80028ac <_sbrk+0x64>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4413      	add	r3, r2
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	429a      	cmp	r2, r3
 8002876:	d207      	bcs.n	8002888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002878:	f019 fdb6 	bl	801c3e8 <__errno>
 800287c:	4603      	mov	r3, r0
 800287e:	220c      	movs	r2, #12
 8002880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002882:	f04f 33ff 	mov.w	r3, #4294967295
 8002886:	e009      	b.n	800289c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <_sbrk+0x64>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800288e:	4b07      	ldr	r3, [pc, #28]	; (80028ac <_sbrk+0x64>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4413      	add	r3, r2
 8002896:	4a05      	ldr	r2, [pc, #20]	; (80028ac <_sbrk+0x64>)
 8002898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800289a:	68fb      	ldr	r3, [r7, #12]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	20010000 	.word	0x20010000
 80028a8:	00000400 	.word	0x00000400
 80028ac:	200004c4 	.word	0x200004c4
 80028b0:	2000da90 	.word	0x2000da90

080028b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <SystemInit+0x20>)
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028be:	4a05      	ldr	r2, [pc, #20]	; (80028d4 <SystemInit+0x20>)
 80028c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002910 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80028dc:	f7ff ffea 	bl	80028b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028e0:	480c      	ldr	r0, [pc, #48]	; (8002914 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028e2:	490d      	ldr	r1, [pc, #52]	; (8002918 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028e4:	4a0d      	ldr	r2, [pc, #52]	; (800291c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e8:	e002      	b.n	80028f0 <LoopCopyDataInit>

080028ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ee:	3304      	adds	r3, #4

080028f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f4:	d3f9      	bcc.n	80028ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028f6:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028f8:	4c0a      	ldr	r4, [pc, #40]	; (8002924 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028fc:	e001      	b.n	8002902 <LoopFillZerobss>

080028fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002900:	3204      	adds	r2, #4

08002902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002904:	d3fb      	bcc.n	80028fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002906:	f019 fd75 	bl	801c3f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800290a:	f7fe fc25 	bl	8001158 <main>
  bx  lr    
 800290e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002910:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002918:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 800291c:	08023448 	.word	0x08023448
  ldr r2, =_sbss
 8002920:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8002924:	2000da90 	.word	0x2000da90

08002928 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002928:	e7fe      	b.n	8002928 <ADC_IRQHandler>

0800292a <CharToDec>:

float float_temp;

int part = 0;

int CharToDec(char c){
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	4603      	mov	r3, r0
 8002932:	71fb      	strb	r3, [r7, #7]
    if(c>='0' && c<='9') return c-'0';
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	2b2f      	cmp	r3, #47	; 0x2f
 8002938:	d905      	bls.n	8002946 <CharToDec+0x1c>
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	2b39      	cmp	r3, #57	; 0x39
 800293e:	d802      	bhi.n	8002946 <CharToDec+0x1c>
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	3b30      	subs	r3, #48	; 0x30
 8002944:	e012      	b.n	800296c <CharToDec+0x42>
    if(c>='a' && c<='f') return c-'a'+10;
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	2b60      	cmp	r3, #96	; 0x60
 800294a:	d905      	bls.n	8002958 <CharToDec+0x2e>
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	2b66      	cmp	r3, #102	; 0x66
 8002950:	d802      	bhi.n	8002958 <CharToDec+0x2e>
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	3b57      	subs	r3, #87	; 0x57
 8002956:	e009      	b.n	800296c <CharToDec+0x42>
    if(c>='A' && c<='F') return c-'A'+10;
 8002958:	79fb      	ldrb	r3, [r7, #7]
 800295a:	2b40      	cmp	r3, #64	; 0x40
 800295c:	d905      	bls.n	800296a <CharToDec+0x40>
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	2b46      	cmp	r3, #70	; 0x46
 8002962:	d802      	bhi.n	800296a <CharToDec+0x40>
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	3b37      	subs	r3, #55	; 0x37
 8002968:	e000      	b.n	800296c <CharToDec+0x42>
    return 0;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <http_parse_params_init>:

void http_parse_params_init (xQueueHandle xQueue, uint8_t parameters_type){
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	70fb      	strb	r3, [r7, #3]

	if (parameters_type == MQTT){
 8002984:	78fb      	ldrb	r3, [r7, #3]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d106      	bne.n	8002998 <http_parse_params_init+0x20>
		if (xQueue){
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d02a      	beq.n	80029e6 <http_parse_params_init+0x6e>
			MQTT_Q = xQueue;
 8002990:	4a18      	ldr	r2, [pc, #96]	; (80029f4 <http_parse_params_init+0x7c>)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6013      	str	r3, [r2, #0]
	}else if (parameters_type == PowrSensSett){
		if (xQueue){
			PowerSensSettings_Q = xQueue;
		}
	}
}
 8002996:	e026      	b.n	80029e6 <http_parse_params_init+0x6e>
	}else if (parameters_type == HA){
 8002998:	78fb      	ldrb	r3, [r7, #3]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d106      	bne.n	80029ac <http_parse_params_init+0x34>
		if (xQueue){
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d020      	beq.n	80029e6 <http_parse_params_init+0x6e>
			HomeAsistant_Q = xQueue;
 80029a4:	4a14      	ldr	r2, [pc, #80]	; (80029f8 <http_parse_params_init+0x80>)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6013      	str	r3, [r2, #0]
}
 80029aa:	e01c      	b.n	80029e6 <http_parse_params_init+0x6e>
	}else if (parameters_type == ModBusTCP){
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d106      	bne.n	80029c0 <http_parse_params_init+0x48>
		if (xQueue){
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d016      	beq.n	80029e6 <http_parse_params_init+0x6e>
			ModbusTCP_Q = xQueue;
 80029b8:	4a10      	ldr	r2, [pc, #64]	; (80029fc <http_parse_params_init+0x84>)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6013      	str	r3, [r2, #0]
}
 80029be:	e012      	b.n	80029e6 <http_parse_params_init+0x6e>
	}else if (parameters_type == PowrData){
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d106      	bne.n	80029d4 <http_parse_params_init+0x5c>
		if (xQueue){
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00c      	beq.n	80029e6 <http_parse_params_init+0x6e>
			Power_Data_Q = xQueue;
 80029cc:	4a0c      	ldr	r2, [pc, #48]	; (8002a00 <http_parse_params_init+0x88>)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6013      	str	r3, [r2, #0]
}
 80029d2:	e008      	b.n	80029e6 <http_parse_params_init+0x6e>
	}else if (parameters_type == PowrSensSett){
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d105      	bne.n	80029e6 <http_parse_params_init+0x6e>
		if (xQueue){
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <http_parse_params_init+0x6e>
			PowerSensSettings_Q = xQueue;
 80029e0:	4a08      	ldr	r2, [pc, #32]	; (8002a04 <http_parse_params_init+0x8c>)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6013      	str	r3, [r2, #0]
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	200004c8 	.word	0x200004c8
 80029f8:	200004cc 	.word	0x200004cc
 80029fc:	200004d0 	.word	0x200004d0
 8002a00:	200004d4 	.word	0x200004d4
 8002a04:	200004d8 	.word	0x200004d8

08002a08 <param_from_http_to_Q>:

void param_from_http_to_Q(char * http_resp, const uint8_t parameters_type){
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b0cc      	sub	sp, #304	; 0x130
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002a12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a16:	6018      	str	r0, [r3, #0]
 8002a18:	460a      	mov	r2, r1
 8002a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002a1e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8002a22:	701a      	strb	r2, [r3, #0]
	float				shunt_value;
	P_sens_sett_struct	PowShunSett;

	uint8_t * buf;

	switch (parameters_type) {
 8002a24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002a28:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	f200 814f 	bhi.w	8002cd2 <param_from_http_to_Q+0x2ca>
 8002a34:	a201      	add	r2, pc, #4	; (adr r2, 8002a3c <param_from_http_to_Q+0x34>)
 8002a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3a:	bf00      	nop
 8002a3c:	08002a51 	.word	0x08002a51
 8002a40:	08002cd3 	.word	0x08002cd3
 8002a44:	08002bdd 	.word	0x08002bdd
 8002a48:	08002cd3 	.word	0x08002cd3
 8002a4c:	08002c63 	.word	0x08002c63

		case MQTT:

			memset(&MQTT_params, 0, sizeof(MQTT_params));
 8002a50:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a54:	22c6      	movs	r2, #198	; 0xc6
 8002a56:	2100      	movs	r1, #0
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f019 fb25 	bl	801c0a8 <memset>

			if (strstr(get_http_param_value( http_resp, "mqtt"), "1")){
 8002a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002a62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a66:	49a2      	ldr	r1, [pc, #648]	; (8002cf0 <param_from_http_to_Q+0x2e8>)
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	f00b f929 	bl	800dcc0 <get_http_param_value>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2131      	movs	r1, #49	; 0x31
 8002a72:	4618      	mov	r0, r3
 8002a74:	f019 fb2f 	bl	801c0d6 <strchr>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <param_from_http_to_Q+0x7e>
				MQTT_params.enable = 1;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8002a84:	e012      	b.n	8002aac <param_from_http_to_Q+0xa4>
			}else if (strstr(get_http_param_value( http_resp, "mqtt"), "0")) {
 8002a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002a8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a8e:	4998      	ldr	r1, [pc, #608]	; (8002cf0 <param_from_http_to_Q+0x2e8>)
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	f00b f915 	bl	800dcc0 <get_http_param_value>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2130      	movs	r1, #48	; 0x30
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f019 fb1b 	bl	801c0d6 <strchr>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <param_from_http_to_Q+0xa4>
				MQTT_params.enable = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "login");
 8002aac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002ab0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ab4:	498f      	ldr	r1, [pc, #572]	; (8002cf4 <param_from_http_to_Q+0x2ec>)
 8002ab6:	6818      	ldr	r0, [r3, #0]
 8002ab8:	f00b f902 	bl	800dcc0 <get_http_param_value>
 8002abc:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) < sizeof(MQTT_params.login) / sizeof(char)) ){
 8002ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d106      	bne.n	8002ad6 <param_from_http_to_Q+0xce>
 8002ac8:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8002acc:	f7fd fbe8 	bl	80002a0 <strlen>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b20      	cmp	r3, #32
 8002ad4:	d807      	bhi.n	8002ae6 <param_from_http_to_Q+0xde>
				strcpy(MQTT_params.login, buf);
 8002ad6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002ada:	3384      	adds	r3, #132	; 0x84
 8002adc:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f019 fcae 	bl	801c442 <strcpy>
				//TODO change to strncpy
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "password");
 8002ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002aea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002aee:	4982      	ldr	r1, [pc, #520]	; (8002cf8 <param_from_http_to_Q+0x2f0>)
 8002af0:	6818      	ldr	r0, [r3, #0]
 8002af2:	f00b f8e5 	bl	800dcc0 <get_http_param_value>
 8002af6:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) < sizeof(MQTT_params.pass) / sizeof(char)) ){
 8002afa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <param_from_http_to_Q+0x108>
 8002b02:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8002b06:	f7fd fbcb 	bl	80002a0 <strlen>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b20      	cmp	r3, #32
 8002b0e:	d807      	bhi.n	8002b20 <param_from_http_to_Q+0x118>
				strcpy(MQTT_params.pass, buf);
 8002b10:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b14:	33a5      	adds	r3, #165	; 0xa5
 8002b16:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f019 fc91 	bl	801c442 <strcpy>
				//TODO change to strncpy
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "uri");
 8002b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b28:	4974      	ldr	r1, [pc, #464]	; (8002cfc <param_from_http_to_Q+0x2f4>)
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	f00b f8c8 	bl	800dcc0 <get_http_param_value>
 8002b30:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) <= MAX_DOMAIN_NAME -1 ) ) {						 // 15 ��������, ������������ ����� IPv4
 8002b34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d106      	bne.n	8002b4a <param_from_http_to_Q+0x142>
 8002b3c:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8002b40:	f7fd fbae 	bl	80002a0 <strlen>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b7f      	cmp	r3, #127	; 0x7f
 8002b48:	d808      	bhi.n	8002b5c <param_from_http_to_Q+0x154>
				//sscanf(buf, "%d.%d.%d.%d", &ip_addr[0], &ip_addr[1], &ip_addr[2], &ip_addr[3]);
				strncpy(MQTT_params.uri, buf, MAX_DOMAIN_NAME - 1);
 8002b4a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b4e:	3302      	adds	r3, #2
 8002b50:	227f      	movs	r2, #127	; 0x7f
 8002b52:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8002b56:	4618      	mov	r0, r3
 8002b58:	f019 fb00 	bl	801c15c <strncpy>
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "port");
 8002b5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b64:	4966      	ldr	r1, [pc, #408]	; (8002d00 <param_from_http_to_Q+0x2f8>)
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	f00b f8aa 	bl	800dcc0 <get_http_param_value>
 8002b6c:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) <= 5) ) {						// 5 ��������, ������������ ����� ������ �����
 8002b70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d106      	bne.n	8002b86 <param_from_http_to_Q+0x17e>
 8002b78:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8002b7c:	f7fd fb90 	bl	80002a0 <strlen>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b05      	cmp	r3, #5
 8002b84:	d81e      	bhi.n	8002bc4 <param_from_http_to_Q+0x1bc>
				sscanf(buf, "%d", &port);
 8002b86:	f107 0316 	add.w	r3, r7, #22
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	495d      	ldr	r1, [pc, #372]	; (8002d04 <param_from_http_to_Q+0x2fc>)
 8002b8e:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8002b92:	f019 f959 	bl	801be48 <siscanf>
				if ((port > 0) && (port < 65535)){
 8002b96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b9a:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00f      	beq.n	8002bc4 <param_from_http_to_Q+0x1bc>
 8002ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002ba8:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d006      	beq.n	8002bc4 <param_from_http_to_Q+0x1bc>
					MQTT_params.port = port;
 8002bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002bba:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
				}
			}

			MQTT_params.save = 1;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

			xQueueOverwrite(MQTT_Q, (void *)&MQTT_params);
 8002bca:	4b4f      	ldr	r3, [pc, #316]	; (8002d08 <param_from_http_to_Q+0x300>)
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f00d fa29 	bl	801002c <xQueueGenericSend>

			break;
 8002bda:	e07d      	b.n	8002cd8 <param_from_http_to_Q+0x2d0>

		case ModBusTCP:
			memset(&ModBusTCP_parameters, 0, sizeof(ModBusTCP_parameters));
 8002bdc:	f107 031c 	add.w	r3, r7, #28
 8002be0:	2202      	movs	r2, #2
 8002be2:	2100      	movs	r1, #0
 8002be4:	4618      	mov	r0, r3
 8002be6:	f019 fa5f 	bl	801c0a8 <memset>
			if (strstr(get_http_param_value( http_resp, "mb_tcp"), "1")){
 8002bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002bee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002bf2:	4946      	ldr	r1, [pc, #280]	; (8002d0c <param_from_http_to_Q+0x304>)
 8002bf4:	6818      	ldr	r0, [r3, #0]
 8002bf6:	f00b f863 	bl	800dcc0 <get_http_param_value>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2131      	movs	r1, #49	; 0x31
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f019 fa69 	bl	801c0d6 <strchr>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d006      	beq.n	8002c18 <param_from_http_to_Q+0x210>
				ModBusTCP_parameters.enable = 1;
 8002c0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c0e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c12:	2201      	movs	r2, #1
 8002c14:	705a      	strb	r2, [r3, #1]
 8002c16:	e015      	b.n	8002c44 <param_from_http_to_Q+0x23c>
			}else if (strstr(get_http_param_value( http_resp, "mb_tcp"), "0")) {
 8002c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002c20:	493a      	ldr	r1, [pc, #232]	; (8002d0c <param_from_http_to_Q+0x304>)
 8002c22:	6818      	ldr	r0, [r3, #0]
 8002c24:	f00b f84c 	bl	800dcc0 <get_http_param_value>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2130      	movs	r1, #48	; 0x30
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f019 fa52 	bl	801c0d6 <strchr>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <param_from_http_to_Q+0x23c>
				ModBusTCP_parameters.enable = 0;
 8002c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c3c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c40:	2200      	movs	r2, #0
 8002c42:	705a      	strb	r2, [r3, #1]
			}
			ModBusTCP_parameters.save = 1;
 8002c44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c48:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	701a      	strb	r2, [r3, #0]

			xQueueOverwrite(ModbusTCP_Q, (void *)&ModBusTCP_parameters);
 8002c50:	4b2f      	ldr	r3, [pc, #188]	; (8002d10 <param_from_http_to_Q+0x308>)
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	f107 011c 	add.w	r1, r7, #28
 8002c58:	2302      	movs	r3, #2
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f00d f9e6 	bl	801002c <xQueueGenericSend>
			break;
 8002c60:	e03a      	b.n	8002cd8 <param_from_http_to_Q+0x2d0>
		case HA:

			break;
//TODO hui pizda zalupa
		case PowrSensSett:
			buf = (uint8_t *) get_http_param_value( http_resp, "shunt");
 8002c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002c6a:	492a      	ldr	r1, [pc, #168]	; (8002d14 <param_from_http_to_Q+0x30c>)
 8002c6c:	6818      	ldr	r0, [r3, #0]
 8002c6e:	f00b f827 	bl	800dcc0 <get_http_param_value>
 8002c72:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf ) {						// 5 ��������, ������������ ����� ������ �����
 8002c76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d02b      	beq.n	8002cd6 <param_from_http_to_Q+0x2ce>
				sscanf(buf, "%f", &float_temp);							//TODO add validation
 8002c7e:	4a26      	ldr	r2, [pc, #152]	; (8002d18 <param_from_http_to_Q+0x310>)
 8002c80:	4926      	ldr	r1, [pc, #152]	; (8002d1c <param_from_http_to_Q+0x314>)
 8002c82:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8002c86:	f019 f8df 	bl	801be48 <siscanf>
				if (float_temp > 0.0001){ 									//validate value
 8002c8a:	4b23      	ldr	r3, [pc, #140]	; (8002d18 <param_from_http_to_Q+0x310>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fd fc72 	bl	8000578 <__aeabi_f2d>
 8002c94:	a314      	add	r3, pc, #80	; (adr r3, 8002ce8 <param_from_http_to_Q+0x2e0>)
 8002c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9a:	f7fd ff55 	bl	8000b48 <__aeabi_dcmpgt>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d100      	bne.n	8002ca6 <param_from_http_to_Q+0x29e>
				PowShunSett.resistance = float_temp;
				PowShunSett.save = 1;
				xQueueOverwrite(PowerSensSettings_Q, (void *)&PowShunSett);
				}
			}
			break;
 8002ca4:	e017      	b.n	8002cd6 <param_from_http_to_Q+0x2ce>
				PowShunSett.resistance = float_temp;
 8002ca6:	4b1c      	ldr	r3, [pc, #112]	; (8002d18 <param_from_http_to_Q+0x310>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002cae:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002cb2:	605a      	str	r2, [r3, #4]
				PowShunSett.save = 1;
 8002cb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002cb8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	701a      	strb	r2, [r3, #0]
				xQueueOverwrite(PowerSensSettings_Q, (void *)&PowShunSett);
 8002cc0:	4b17      	ldr	r3, [pc, #92]	; (8002d20 <param_from_http_to_Q+0x318>)
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	f107 010c 	add.w	r1, r7, #12
 8002cc8:	2302      	movs	r3, #2
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f00d f9ae 	bl	801002c <xQueueGenericSend>
			break;
 8002cd0:	e001      	b.n	8002cd6 <param_from_http_to_Q+0x2ce>
		default:
			break;
 8002cd2:	bf00      	nop
 8002cd4:	e000      	b.n	8002cd8 <param_from_http_to_Q+0x2d0>
			break;
 8002cd6:	bf00      	nop
	}
}
 8002cd8:	bf00      	nop
 8002cda:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	f3af 8000 	nop.w
 8002ce8:	eb1c432d 	.word	0xeb1c432d
 8002cec:	3f1a36e2 	.word	0x3f1a36e2
 8002cf0:	08020e70 	.word	0x08020e70
 8002cf4:	08020e78 	.word	0x08020e78
 8002cf8:	08020e80 	.word	0x08020e80
 8002cfc:	08020e8c 	.word	0x08020e8c
 8002d00:	08020e90 	.word	0x08020e90
 8002d04:	08020e98 	.word	0x08020e98
 8002d08:	200004c8 	.word	0x200004c8
 8002d0c:	08020e9c 	.word	0x08020e9c
 8002d10:	200004d0 	.word	0x200004d0
 8002d14:	08020ea4 	.word	0x08020ea4
 8002d18:	200004dc 	.word	0x200004dc
 8002d1c:	08020eac 	.word	0x08020eac
 8002d20:	200004d8 	.word	0x200004d8

08002d24 <param_from_Q_to_JSON>:

void param_from_Q_to_JSON(char * buf, const uint8_t parameters_type, uint16_t * len){
 8002d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d28:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8002d2c:	af0a      	add	r7, sp, #40	; 0x28
 8002d2e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002d32:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002d36:	6018      	str	r0, [r3, #0]
 8002d38:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002d3c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002d46:	f2a3 13dd 	subw	r3, r3, #477	; 0x1dd
 8002d4a:	460a      	mov	r2, r1
 8002d4c:	701a      	strb	r2, [r3, #0]

	MQTT_cred_struct	MQTT_params;
	PowerSensStruct		PowerParm;
	P_sens_sett_struct	PowShunSett;

	unsigned const char template_mqtt_data[] 	= {"{\"login\": \"%s\", \"pass\": \"********\", \"addr\": \"%s\", \"port\": \"%u\", \"enabled\": \"%u\"}"};//{"login": "admin", "pass": "1234", "addr": "10.0.2.20", "port": "1883", "enabled": 1 }
 8002d4e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002d52:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002d56:	4a73      	ldr	r2, [pc, #460]	; (8002f24 <param_from_Q_to_JSON+0x200>)
 8002d58:	4618      	mov	r0, r3
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	2351      	movs	r3, #81	; 0x51
 8002d5e:	461a      	mov	r2, r3
 8002d60:	f019 fb77 	bl	801c452 <memcpy>
	unsigned const char template_power_data[] 	= {"{\"voltage\": \"%.2f\", \"current\": \"%.2f\", \"active_power_w\": \"%.2f\", \"apparent_power_w\": \"%.2f\", \"power_factor\": \"%.2f\", \"W_h\": \"%.2f\"}"};//{"voltage": "233.2", "current": "0.56", "active_power_w": "33.4", "apparent_power_w": "65.2", "power_factor": "0.5", "KW/h": "0.5634"}
 8002d64:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002d68:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002d6c:	4a6e      	ldr	r2, [pc, #440]	; (8002f28 <param_from_Q_to_JSON+0x204>)
 8002d6e:	4618      	mov	r0, r3
 8002d70:	4611      	mov	r1, r2
 8002d72:	2384      	movs	r3, #132	; 0x84
 8002d74:	461a      	mov	r2, r3
 8002d76:	f019 fb6c 	bl	801c452 <memcpy>
	unsigned const char template_shunt_sett[]   = {"{\"shunt\": \"%.4f\"}"};
 8002d7a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002d7e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d82:	4a6a      	ldr	r2, [pc, #424]	; (8002f2c <param_from_Q_to_JSON+0x208>)
 8002d84:	461c      	mov	r4, r3
 8002d86:	4615      	mov	r5, r2
 8002d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d8c:	682b      	ldr	r3, [r5, #0]
 8002d8e:	8023      	strh	r3, [r4, #0]

	switch (parameters_type) {
 8002d90:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002d94:	f2a3 13dd 	subw	r3, r3, #477	; 0x1dd
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	f000 8093 	beq.w	8002ec6 <param_from_Q_to_JSON+0x1a2>
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	f300 80b8 	bgt.w	8002f16 <param_from_Q_to_JSON+0x1f2>
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d002      	beq.n	8002db0 <param_from_Q_to_JSON+0x8c>
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d031      	beq.n	8002e12 <param_from_Q_to_JSON+0xee>
			sprintf(buf, (const char *)template_shunt_sett, PowShunSett.resistance);
			*len = strlen(buf);

			break;
		default:
			break;
 8002dae:	e0b2      	b.n	8002f16 <param_from_Q_to_JSON+0x1f2>
			xQueuePeek(MQTT_Q ,&MQTT_params,0);
 8002db0:	4b5f      	ldr	r3, [pc, #380]	; (8002f30 <param_from_Q_to_JSON+0x20c>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8002db8:	2200      	movs	r2, #0
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f00d fcbc 	bl	8010738 <xQueuePeek>
			sprintf(buf, (const char *)template_mqtt_data, MQTT_params.login, MQTT_params.uri, MQTT_params.port, MQTT_params.enable);
 8002dc0:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	; 0x1b2
 8002dc4:	461d      	mov	r5, r3
 8002dc6:	f897 3131 	ldrb.w	r3, [r7, #305]	; 0x131
 8002dca:	461e      	mov	r6, r3
 8002dcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002dd0:	1c9c      	adds	r4, r3, #2
 8002dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002dd6:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8002dda:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8002dde:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002de2:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 8002de6:	9601      	str	r6, [sp, #4]
 8002de8:	9500      	str	r5, [sp, #0]
 8002dea:	4623      	mov	r3, r4
 8002dec:	6800      	ldr	r0, [r0, #0]
 8002dee:	f019 f80b 	bl	801be08 <siprintf>
			*len = strlen(buf);
 8002df2:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002df6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002dfa:	6818      	ldr	r0, [r3, #0]
 8002dfc:	f7fd fa50 	bl	80002a0 <strlen>
 8002e00:	4603      	mov	r3, r0
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002e08:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	801a      	strh	r2, [r3, #0]
			break;
 8002e10:	e082      	b.n	8002f18 <param_from_Q_to_JSON+0x1f4>
			xQueuePeek(Power_Data_Q ,&PowerParm,0);
 8002e12:	4b48      	ldr	r3, [pc, #288]	; (8002f34 <param_from_Q_to_JSON+0x210>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f00d fc8b 	bl	8010738 <xQueuePeek>
			sprintf(buf, (const char *)template_power_data, PowerParm.Voltage, PowerParm.Current, PowerParm.ActivPower, PowerParm.ApparPower, PowerParm.PowerFactor, PowerParm.KWatt_h);
 8002e22:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fd fba6 	bl	8000578 <__aeabi_f2d>
 8002e2c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002e30:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fd fb9f 	bl	8000578 <__aeabi_f2d>
 8002e3a:	4604      	mov	r4, r0
 8002e3c:	460d      	mov	r5, r1
 8002e3e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fd fb98 	bl	8000578 <__aeabi_f2d>
 8002e48:	4680      	mov	r8, r0
 8002e4a:	4689      	mov	r9, r1
 8002e4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fd fb91 	bl	8000578 <__aeabi_f2d>
 8002e56:	4682      	mov	sl, r0
 8002e58:	468b      	mov	fp, r1
 8002e5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fd fb8a 	bl	8000578 <__aeabi_f2d>
 8002e64:	e9c7 0100 	strd	r0, r1, [r7]
 8002e68:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7fd fb83 	bl	8000578 <__aeabi_f2d>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	f107 0638 	add.w	r6, r7, #56	; 0x38
 8002e7a:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 8002e7e:	f5a1 70ee 	sub.w	r0, r1, #476	; 0x1dc
 8002e82:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002e86:	ed97 7b00 	vldr	d7, [r7]
 8002e8a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002e8e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002e92:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002e96:	e9cd 4500 	strd	r4, r5, [sp]
 8002e9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e9e:	4631      	mov	r1, r6
 8002ea0:	6800      	ldr	r0, [r0, #0]
 8002ea2:	f018 ffb1 	bl	801be08 <siprintf>
			*len = strlen(buf);
 8002ea6:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002eaa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	f7fd f9f6 	bl	80002a0 <strlen>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002ebc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	801a      	strh	r2, [r3, #0]
			break;
 8002ec4:	e028      	b.n	8002f18 <param_from_Q_to_JSON+0x1f4>
			xQueuePeek(PowerSensSettings_Q ,&PowShunSett,0);
 8002ec6:	4b1c      	ldr	r3, [pc, #112]	; (8002f38 <param_from_Q_to_JSON+0x214>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002ece:	2200      	movs	r2, #0
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f00d fc31 	bl	8010738 <xQueuePeek>
			sprintf(buf, (const char *)template_shunt_sett, PowShunSett.resistance);
 8002ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fd fb4c 	bl	8000578 <__aeabi_f2d>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002ee8:	f507 70fc 	add.w	r0, r7, #504	; 0x1f8
 8002eec:	f5a0 70ee 	sub.w	r0, r0, #476	; 0x1dc
 8002ef0:	6800      	ldr	r0, [r0, #0]
 8002ef2:	f018 ff89 	bl	801be08 <siprintf>
			*len = strlen(buf);
 8002ef6:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002efa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002efe:	6818      	ldr	r0, [r3, #0]
 8002f00:	f7fd f9ce 	bl	80002a0 <strlen>
 8002f04:	4603      	mov	r3, r0
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002f0c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	801a      	strh	r2, [r3, #0]
			break;
 8002f14:	e000      	b.n	8002f18 <param_from_Q_to_JSON+0x1f4>
			break;
 8002f16:	bf00      	nop
	}
}
 8002f18:	bf00      	nop
 8002f1a:	f507 77fe 	add.w	r7, r7, #508	; 0x1fc
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f24:	08020eb0 	.word	0x08020eb0
 8002f28:	08020f04 	.word	0x08020f04
 8002f2c:	08020f88 	.word	0x08020f88
 8002f30:	200004c8 	.word	0x200004c8
 8002f34:	200004d4 	.word	0x200004d4
 8002f38:	200004d8 	.word	0x200004d8

08002f3c <write_to_file>:

int write_to_file(char * buf, uint16_t * len, char * response){
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	f5ad 7d3e 	sub.w	sp, sp, #760	; 0x2f8
 8002f42:	af02      	add	r7, sp, #8
 8002f44:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f48:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8002f4c:	6018      	str	r0, [r3, #0]
 8002f4e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f52:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8002f56:	6019      	str	r1, [r3, #0]
 8002f58:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f5c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8002f60:	601a      	str	r2, [r3, #0]
	unsigned char output[17];
	unsigned char recv_digest_bin[17];
	int i, t ,t2 ,r;


	p_len = &parsed_len;
 8002f62:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f66:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4

	param_value = get_http_param_value((char *)buf, "filename");
 8002f6a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f6e:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8002f72:	49ab      	ldr	r1, [pc, #684]	; (8003220 <write_to_file+0x2e4>)
 8002f74:	6818      	ldr	r0, [r3, #0]
 8002f76:	f00a fea3 	bl	800dcc0 <get_http_param_value>
 8002f7a:	f8c7 02e0 	str.w	r0, [r7, #736]	; 0x2e0
	if (param_value){
 8002f7e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d023      	beq.n	8002fce <write_to_file+0x92>
		strcpy(filename, HTTP_FS_DIR);
 8002f86:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f8a:	4aa6      	ldr	r2, [pc, #664]	; (8003224 <write_to_file+0x2e8>)
 8002f8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f90:	6018      	str	r0, [r3, #0]
 8002f92:	3304      	adds	r3, #4
 8002f94:	7019      	strb	r1, [r3, #0]
		strncat(filename, param_value, MAX_CONTENT_NAME_LEN-5);
 8002f96:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f9a:	222d      	movs	r2, #45	; 0x2d
 8002f9c:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f019 f8b6 	bl	801c112 <strncat>
		return;
	}

	//step_number = get_http_param_value((char *)buf, "step");

	param_value = get_http_param_value((char *)buf, "data");
 8002fa6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002faa:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8002fae:	499e      	ldr	r1, [pc, #632]	; (8003228 <write_to_file+0x2ec>)
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	f00a fe85 	bl	800dcc0 <get_http_param_value>
 8002fb6:	f8c7 02e0 	str.w	r0, [r7, #736]	; 0x2e0

	if (strlen(param_value) >=  TMP_BUFF_FOR_FILE_RECV){ //check if resieved data in parameter "data" not bigger then buffer
 8002fba:	f8d7 02e0 	ldr.w	r0, [r7, #736]	; 0x2e0
 8002fbe:	f7fd f96f 	bl	80002a0 <strlen>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc8:	f080 8113 	bcs.w	80031f2 <write_to_file+0x2b6>
 8002fcc:	e011      	b.n	8002ff2 <write_to_file+0xb6>
		strncpy(response, "error", strlen("error")+1);
 8002fce:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002fd2:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a94      	ldr	r2, [pc, #592]	; (800322c <write_to_file+0x2f0>)
 8002fda:	6810      	ldr	r0, [r2, #0]
 8002fdc:	6018      	str	r0, [r3, #0]
 8002fde:	8892      	ldrh	r2, [r2, #4]
 8002fe0:	809a      	strh	r2, [r3, #4]
		*len = strlen("error");
 8002fe2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002fe6:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2205      	movs	r2, #5
 8002fee:	801a      	strh	r2, [r3, #0]
		return;
 8002ff0:	e111      	b.n	8003216 <write_to_file+0x2da>

	}else if (param_value){								//check if resieved data len > 0
 8002ff2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 80e9 	beq.w	80031ce <write_to_file+0x292>
		recv_len = strlen(param_value);
 8002ffc:	f8d7 02e0 	ldr.w	r0, [r7, #736]	; 0x2e0
 8003000:	f7fd f94e 	bl	80002a0 <strlen>
 8003004:	4603      	mov	r3, r0
 8003006:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
//		replacetochar(param_value, ' ', '+');
		err = mbedtls_base64_decode((unsigned char *)tmp_data_buf, TMP_BUFF_FOR_FILE_RECV, p_len, (const unsigned char *)param_value, recv_len);
 800300a:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 800300e:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8003018:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 800301c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003020:	f016 fd04 	bl	8019a2c <mbedtls_base64_decode>
 8003024:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec

		parsed_digest = get_http_param_value((char *)buf, "digest");
 8003028:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800302c:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8003030:	497f      	ldr	r1, [pc, #508]	; (8003230 <write_to_file+0x2f4>)
 8003032:	6818      	ldr	r0, [r3, #0]
 8003034:	f00a fe44 	bl	800dcc0 <get_http_param_value>
 8003038:	f8c7 02d8 	str.w	r0, [r7, #728]	; 0x2d8

	    for (i = 0; i< 32 ; i+=2){
 800303c:	2300      	movs	r3, #0
 800303e:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8003042:	e030      	b.n	80030a6 <write_to_file+0x16a>
	        t = CharToDec(parsed_digest[i]);
 8003044:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8003048:	f8d7 22d8 	ldr.w	r2, [r7, #728]	; 0x2d8
 800304c:	4413      	add	r3, r2
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff fc6a 	bl	800292a <CharToDec>
 8003056:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	        t2 = CharToDec(parsed_digest[i+1]);
 800305a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800305e:	3301      	adds	r3, #1
 8003060:	f8d7 22d8 	ldr.w	r2, [r7, #728]	; 0x2d8
 8003064:	4413      	add	r3, r2
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff fc5e 	bl	800292a <CharToDec>
 800306e:	f8c7 02c8 	str.w	r0, [r7, #712]	; 0x2c8
	        recv_digest_bin[i/2] = t << 4 | t2;
 8003072:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	b25a      	sxtb	r2, r3
 800307a:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 800307e:	b25b      	sxtb	r3, r3
 8003080:	4313      	orrs	r3, r2
 8003082:	b259      	sxtb	r1, r3
 8003084:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8003088:	0fda      	lsrs	r2, r3, #31
 800308a:	4413      	add	r3, r2
 800308c:	105b      	asrs	r3, r3, #1
 800308e:	461a      	mov	r2, r3
 8003090:	b2c9      	uxtb	r1, r1
 8003092:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003096:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800309a:	5499      	strb	r1, [r3, r2]
	    for (i = 0; i< 32 ; i+=2){
 800309c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80030a0:	3302      	adds	r3, #2
 80030a2:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 80030a6:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80030aa:	2b1f      	cmp	r3, #31
 80030ac:	ddca      	ble.n	8003044 <write_to_file+0x108>
	    }
	    recv_digest_bin[16] = '\0';
 80030ae:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80030b2:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80030b6:	2200      	movs	r2, #0
 80030b8:	741a      	strb	r2, [r3, #16]


		mbedtls_md5_context md5_ctx;

		mbedtls_md5_init(&md5_ctx);
 80030ba:	f107 0310 	add.w	r3, r7, #16
 80030be:	4618      	mov	r0, r3
 80030c0:	f016 fdd0 	bl	8019c64 <mbedtls_md5_init>
		mbedtls_md5_starts_ret(&md5_ctx);
 80030c4:	f107 0310 	add.w	r3, r7, #16
 80030c8:	4618      	mov	r0, r3
 80030ca:	f016 fde9 	bl	8019ca0 <mbedtls_md5_starts_ret>
		mbedtls_md5_update_ret(&md5_ctx, tmp_data_buf, *p_len);
 80030ce:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80030d8:	f107 0310 	add.w	r3, r7, #16
 80030dc:	4618      	mov	r0, r3
 80030de:	f017 fcc9 	bl	801aa74 <mbedtls_md5_update_ret>
		mbedtls_md5_finish_ret(&md5_ctx, output);
 80030e2:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80030e6:	f107 0310 	add.w	r3, r7, #16
 80030ea:	4611      	mov	r1, r2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f017 fd36 	bl	801ab5e <mbedtls_md5_finish_ret>
		mbedtls_md5_free(&md5_ctx);
 80030f2:	f107 0310 	add.w	r3, r7, #16
 80030f6:	4618      	mov	r0, r3
 80030f8:	f016 fdc1 	bl	8019c7e <mbedtls_md5_free>
		output[16] = '\0';
 80030fc:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003100:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8003104:	2200      	movs	r2, #0
 8003106:	741a      	strb	r2, [r3, #16]



		if (strncmp(&recv_digest_bin, &output, 16)){
 8003108:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800310c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003110:	2210      	movs	r2, #16
 8003112:	4618      	mov	r0, r3
 8003114:	f019 f810 	bl	801c138 <strncmp>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d006      	beq.n	800312c <write_to_file+0x1f0>
			err = -1;
 800311e:	f04f 33ff 	mov.w	r3, #4294967295
 8003122:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
			return err;
 8003126:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800312a:	e074      	b.n	8003216 <write_to_file+0x2da>
		}

		step_number = get_http_param_value((char *)buf, "step");
 800312c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003130:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8003134:	493f      	ldr	r1, [pc, #252]	; (8003234 <write_to_file+0x2f8>)
 8003136:	6818      	ldr	r0, [r3, #0]
 8003138:	f00a fdc2 	bl	800dcc0 <get_http_param_value>
 800313c:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
		number = ATOI(step_number, 10);
 8003140:	210a      	movs	r1, #10
 8003142:	f8d7 02d4 	ldr.w	r0, [r7, #724]	; 0x2d4
 8003146:	f00a fe6d 	bl	800de24 <ATOI>
 800314a:	4603      	mov	r3, r0
 800314c:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0

		if(number == 0){
 8003150:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10f      	bne.n	8003178 <write_to_file+0x23c>
			part =0;
 8003158:	4b37      	ldr	r3, [pc, #220]	; (8003238 <write_to_file+0x2fc>)
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
			err = spi_fs_over_write_file(filename, tmp_data_buf, *p_len);
 800315e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8003168:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800316c:	4618      	mov	r0, r3
 800316e:	f016 fb8d 	bl	801988c <spi_fs_over_write_file>
 8003172:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec
 8003176:	e01d      	b.n	80031b4 <write_to_file+0x278>
		}else{

			if(ATOI(step_number, 10)!= part){
 8003178:	210a      	movs	r1, #10
 800317a:	f8d7 02d4 	ldr.w	r0, [r7, #724]	; 0x2d4
 800317e:	f00a fe51 	bl	800de24 <ATOI>
 8003182:	4603      	mov	r3, r0
 8003184:	461a      	mov	r2, r3
 8003186:	4b2c      	ldr	r3, [pc, #176]	; (8003238 <write_to_file+0x2fc>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d006      	beq.n	800319c <write_to_file+0x260>
				err = -1;
 800318e:	f04f 33ff 	mov.w	r3, #4294967295
 8003192:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
				return err;
 8003196:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800319a:	e03c      	b.n	8003216 <write_to_file+0x2da>
			}

			err = spi_fs_write_file_to_end(filename, tmp_data_buf, *p_len);
 800319c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80031a6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80031aa:	4618      	mov	r0, r3
 80031ac:	f016 fbcc 	bl	8019948 <spi_fs_write_file_to_end>
 80031b0:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec
		}

		part++;
 80031b4:	4b20      	ldr	r3, [pc, #128]	; (8003238 <write_to_file+0x2fc>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	3301      	adds	r3, #1
 80031ba:	4a1f      	ldr	r2, [pc, #124]	; (8003238 <write_to_file+0x2fc>)
 80031bc:	6013      	str	r3, [r2, #0]

		if (err < 0){
 80031be:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	da15      	bge.n	80031f2 <write_to_file+0x2b6>
			err = 0;
 80031c6:	2300      	movs	r3, #0
 80031c8:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80031cc:	e011      	b.n	80031f2 <write_to_file+0x2b6>
		}

		//strncpy(tmp_data_buf, param_value, TMP_BUFF_FOR_FILE_RECV-1);
	}else{
		strncpy(response, "error", strlen("error")+1);
 80031ce:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031d2:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a14      	ldr	r2, [pc, #80]	; (800322c <write_to_file+0x2f0>)
 80031da:	6810      	ldr	r0, [r2, #0]
 80031dc:	6018      	str	r0, [r3, #0]
 80031de:	8892      	ldrh	r2, [r2, #4]
 80031e0:	809a      	strh	r2, [r3, #4]
		*len = strlen("error");
 80031e2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031e6:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2205      	movs	r2, #5
 80031ee:	801a      	strh	r2, [r3, #0]
		return;
 80031f0:	e011      	b.n	8003216 <write_to_file+0x2da>
	}
	strncpy(response, "ok", strlen("ok")+1);
 80031f2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80031f6:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a0f      	ldr	r2, [pc, #60]	; (800323c <write_to_file+0x300>)
 80031fe:	8811      	ldrh	r1, [r2, #0]
 8003200:	7892      	ldrb	r2, [r2, #2]
 8003202:	8019      	strh	r1, [r3, #0]
 8003204:	709a      	strb	r2, [r3, #2]
	*len = strlen("ok");
 8003206:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800320a:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2202      	movs	r2, #2
 8003212:	801a      	strh	r2, [r3, #0]
}
 8003214:	e7ff      	b.n	8003216 <write_to_file+0x2da>
 8003216:	4618      	mov	r0, r3
 8003218:	f507 773c 	add.w	r7, r7, #752	; 0x2f0
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	08020f9c 	.word	0x08020f9c
 8003224:	08020fa8 	.word	0x08020fa8
 8003228:	08020fb8 	.word	0x08020fb8
 800322c:	08020fb0 	.word	0x08020fb0
 8003230:	08020fc0 	.word	0x08020fc0
 8003234:	08020fc8 	.word	0x08020fc8
 8003238:	200004e0 	.word	0x200004e0
 800323c:	08020fd0 	.word	0x08020fd0

08003240 <read_all_parameters>:

int8_t read_all_parameters(uint8_t * buf, uint16_t * len){
 8003240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003244:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8003248:	af12      	add	r7, sp, #72	; 0x48
 800324a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800324e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003252:	6018      	str	r0, [r3, #0]
 8003254:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8003258:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800325c:	6019      	str	r1, [r3, #0]
	PowerSensStruct		PowerParm;
	P_sens_sett_struct	PowShunSett;
	MQTT_cred_struct	MQTT_params;
	ModBusTCP_struct	mb_tcp_params;

	unsigned const char template_data[] = {"{\"voltage\": \"%.2f\", \"current\": \"%.2f\", \"active_power_w\": \"%.2f\", \"apparent_power_w\": \"%.2f\", \"power_factor\": \"%.2f\", \"w_h\": \"%.2f\", \"shunt\": \"%.4f\", \"mb_tcp\": %u, \"mqtt\": %u, \"mqtt_login\": \"%s\", \"mqtt_port\": \"%u\", \"uri\": \"%s\" }"};
 800325e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8003262:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003266:	4a4f      	ldr	r2, [pc, #316]	; (80033a4 <read_all_parameters+0x164>)
 8003268:	4618      	mov	r0, r3
 800326a:	4611      	mov	r1, r2
 800326c:	23e4      	movs	r3, #228	; 0xe4
 800326e:	461a      	mov	r2, r3
 8003270:	f019 f8ef 	bl	801c452 <memcpy>

	xQueuePeek(Power_Data_Q,			(void *)&PowerParm,0);
 8003274:	4b4c      	ldr	r3, [pc, #304]	; (80033a8 <read_all_parameters+0x168>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f507 71f0 	add.w	r1, r7, #480	; 0x1e0
 800327c:	2200      	movs	r2, #0
 800327e:	4618      	mov	r0, r3
 8003280:	f00d fa5a 	bl	8010738 <xQueuePeek>
	xQueuePeek(PowerSensSettings_Q ,	(void *)&PowShunSett,0);
 8003284:	4b49      	ldr	r3, [pc, #292]	; (80033ac <read_all_parameters+0x16c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
 800328c:	2200      	movs	r2, #0
 800328e:	4618      	mov	r0, r3
 8003290:	f00d fa52 	bl	8010738 <xQueuePeek>
	xQueuePeek(MQTT_Q ,					(void *)&MQTT_params,0);
 8003294:	4b46      	ldr	r3, [pc, #280]	; (80033b0 <read_all_parameters+0x170>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800329c:	2200      	movs	r2, #0
 800329e:	4618      	mov	r0, r3
 80032a0:	f00d fa4a 	bl	8010738 <xQueuePeek>
	xQueuePeek(ModbusTCP_Q,				(void *)&mb_tcp_params, 0);
 80032a4:	4b43      	ldr	r3, [pc, #268]	; (80033b4 <read_all_parameters+0x174>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 80032ac:	2200      	movs	r2, #0
 80032ae:	4618      	mov	r0, r3
 80032b0:	f00d fa42 	bl	8010738 <xQueuePeek>


	sprintf(buf, (const char *)template_data, PowerParm.Voltage, PowerParm.Current, PowerParm.ActivPower, PowerParm.ApparPower, PowerParm.PowerFactor, PowerParm.KWatt_h, PowShunSett.resistance, mb_tcp_params.enable, MQTT_params.enable, MQTT_params.login, MQTT_params.port, MQTT_params.uri);
 80032b4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fd f95d 	bl	8000578 <__aeabi_f2d>
 80032be:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80032c2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fd f956 	bl	8000578 <__aeabi_f2d>
 80032cc:	4682      	mov	sl, r0
 80032ce:	468b      	mov	fp, r1
 80032d0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fd f94f 	bl	8000578 <__aeabi_f2d>
 80032da:	4605      	mov	r5, r0
 80032dc:	460e      	mov	r6, r1
 80032de:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fd f948 	bl	8000578 <__aeabi_f2d>
 80032e8:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80032ec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fd f941 	bl	8000578 <__aeabi_f2d>
 80032f6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80032fa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fd f93a 	bl	8000578 <__aeabi_f2d>
 8003304:	4680      	mov	r8, r0
 8003306:	4689      	mov	r9, r1
 8003308:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800330c:	4618      	mov	r0, r3
 800330e:	f7fd f933 	bl	8000578 <__aeabi_f2d>
 8003312:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8003316:	607b      	str	r3, [r7, #4]
 8003318:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 800331c:	603b      	str	r3, [r7, #0]
 800331e:	f8b7 3192 	ldrh.w	r3, [r7, #402]	; 0x192
 8003322:	461a      	mov	r2, r3
 8003324:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8003328:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800332c:	f5a3 74ea 	sub.w	r4, r3, #468	; 0x1d4
 8003330:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003334:	3302      	adds	r3, #2
 8003336:	9310      	str	r3, [sp, #64]	; 0x40
 8003338:	920f      	str	r2, [sp, #60]	; 0x3c
 800333a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800333e:	3384      	adds	r3, #132	; 0x84
 8003340:	930e      	str	r3, [sp, #56]	; 0x38
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	930d      	str	r3, [sp, #52]	; 0x34
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	930c      	str	r3, [sp, #48]	; 0x30
 800334a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800334e:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8003352:	ed97 7b02 	vldr	d7, [r7, #8]
 8003356:	ed8d 7b06 	vstr	d7, [sp, #24]
 800335a:	ed97 7b04 	vldr	d7, [r7, #16]
 800335e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003362:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8003366:	e9cd ab00 	strd	sl, fp, [sp]
 800336a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800336e:	4661      	mov	r1, ip
 8003370:	6820      	ldr	r0, [r4, #0]
 8003372:	f018 fd49 	bl	801be08 <siprintf>
	*len = strlen(buf);
 8003376:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800337a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800337e:	6818      	ldr	r0, [r3, #0]
 8003380:	f7fc ff8e 	bl	80002a0 <strlen>
 8003384:	4603      	mov	r3, r0
 8003386:	b29a      	uxth	r2, r3
 8003388:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800338c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	801a      	strh	r2, [r3, #0]

	return 0 ;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	f507 77fe 	add.w	r7, r7, #508	; 0x1fc
 800339c:	46bd      	mov	sp, r7
 800339e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033a2:	bf00      	nop
 80033a4:	08020fd4 	.word	0x08020fd4
 80033a8:	200004d4 	.word	0x200004d4
 80033ac:	200004d8 	.word	0x200004d8
 80033b0:	200004c8 	.word	0x200004c8
 80033b4:	200004d0 	.word	0x200004d0

080033b8 <http_post_cgi_processor>:


uint8_t http_post_cgi_processor(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len){
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
 80033c4:	603b      	str	r3, [r7, #0]

	uint8_t ret;
	len = 0;
 80033c6:	2300      	movs	r3, #0
 80033c8:	603b      	str	r3, [r7, #0]

	if(strcmp((const char *)uri_name, "settings_mqtt.cgi") == 0){
 80033ca:	4921      	ldr	r1, [pc, #132]	; (8003450 <http_post_cgi_processor+0x98>)
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f7fc ff07 	bl	80001e0 <strcmp>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d106      	bne.n	80033e6 <http_post_cgi_processor+0x2e>
		param_from_http_to_Q((char *)uri, MQTT);
 80033d8:	2100      	movs	r1, #0
 80033da:	68b8      	ldr	r0, [r7, #8]
 80033dc:	f7ff fb14 	bl	8002a08 <param_from_http_to_Q>
		ret = HTTP_OK;
 80033e0:	2301      	movs	r3, #1
 80033e2:	75fb      	strb	r3, [r7, #23]
 80033e4:	e02f      	b.n	8003446 <http_post_cgi_processor+0x8e>
	}else if (strcmp((const char *)uri_name, "mb_tcp_settings.cgi") == 0){
 80033e6:	491b      	ldr	r1, [pc, #108]	; (8003454 <http_post_cgi_processor+0x9c>)
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f7fc fef9 	bl	80001e0 <strcmp>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d106      	bne.n	8003402 <http_post_cgi_processor+0x4a>
		param_from_http_to_Q((char *)uri, ModBusTCP);
 80033f4:	2102      	movs	r1, #2
 80033f6:	68b8      	ldr	r0, [r7, #8]
 80033f8:	f7ff fb06 	bl	8002a08 <param_from_http_to_Q>
		ret = HTTP_OK;
 80033fc:	2301      	movs	r3, #1
 80033fe:	75fb      	strb	r3, [r7, #23]
 8003400:	e021      	b.n	8003446 <http_post_cgi_processor+0x8e>
	}else if (strcmp((const char *)uri_name, "file_upload.cgi") == 0){
 8003402:	4915      	ldr	r1, [pc, #84]	; (8003458 <http_post_cgi_processor+0xa0>)
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f7fc feeb 	bl	80001e0 <strcmp>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10d      	bne.n	800342c <http_post_cgi_processor+0x74>
		if (write_to_file((char *)uri, len, buf) < 0 ){
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6839      	ldr	r1, [r7, #0]
 8003414:	68b8      	ldr	r0, [r7, #8]
 8003416:	f7ff fd91 	bl	8002f3c <write_to_file>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	da02      	bge.n	8003426 <http_post_cgi_processor+0x6e>
			ret = HTTP_FAILED;
 8003420:	2300      	movs	r3, #0
 8003422:	75fb      	strb	r3, [r7, #23]
 8003424:	e00f      	b.n	8003446 <http_post_cgi_processor+0x8e>
		}else{
			ret = HTTP_OK;
 8003426:	2301      	movs	r3, #1
 8003428:	75fb      	strb	r3, [r7, #23]
 800342a:	e00c      	b.n	8003446 <http_post_cgi_processor+0x8e>
		}
	}else if (strcmp((const char *)uri_name, "settings_resistance.cgi") == 0){
 800342c:	490b      	ldr	r1, [pc, #44]	; (800345c <http_post_cgi_processor+0xa4>)
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f7fc fed6 	bl	80001e0 <strcmp>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d105      	bne.n	8003446 <http_post_cgi_processor+0x8e>
		param_from_http_to_Q((char *)uri, PowrSensSett);
 800343a:	2104      	movs	r1, #4
 800343c:	68b8      	ldr	r0, [r7, #8]
 800343e:	f7ff fae3 	bl	8002a08 <param_from_http_to_Q>
		ret = HTTP_OK;
 8003442:	2301      	movs	r3, #1
 8003444:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003446:	7dfb      	ldrb	r3, [r7, #23]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	080210b8 	.word	0x080210b8
 8003454:	080210cc 	.word	0x080210cc
 8003458:	080210e0 	.word	0x080210e0
 800345c:	080210f0 	.word	0x080210f0

08003460 <http_get_cgi_processor>:

uint8_t http_get_cgi_processor(uint8_t * uri_name, uint8_t * buf, uint16_t * len){
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]

	uint8_t ret = HTTP_FAILED;
 800346c:	2300      	movs	r3, #0
 800346e:	75fb      	strb	r3, [r7, #23]

	if(strcmp((const char *)uri_name, "settings_MQTT.cgi") == 0){
 8003470:	4928      	ldr	r1, [pc, #160]	; (8003514 <http_get_cgi_processor+0xb4>)
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f7fc feb4 	bl	80001e0 <strcmp>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d107      	bne.n	800348e <http_get_cgi_processor+0x2e>
		param_from_Q_to_JSON((char *)buf, MQTT, len);
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	2100      	movs	r1, #0
 8003482:	68b8      	ldr	r0, [r7, #8]
 8003484:	f7ff fc4e 	bl	8002d24 <param_from_Q_to_JSON>
		ret = HTTP_OK;
 8003488:	2301      	movs	r3, #1
 800348a:	75fb      	strb	r3, [r7, #23]
 800348c:	e03d      	b.n	800350a <http_get_cgi_processor+0xaa>
	}else if(strcmp((const char *)uri_name, "test.cgi") == 0){
 800348e:	4922      	ldr	r1, [pc, #136]	; (8003518 <http_get_cgi_processor+0xb8>)
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f7fc fea5 	bl	80001e0 <strcmp>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10b      	bne.n	80034b4 <http_get_cgi_processor+0x54>
		strncpy((const char *)buf, "ok", strlen("ok"));
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	491f      	ldr	r1, [pc, #124]	; (800351c <http_get_cgi_processor+0xbc>)
 80034a0:	461a      	mov	r2, r3
 80034a2:	460b      	mov	r3, r1
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	8013      	strh	r3, [r2, #0]
		ret = HTTP_OK;
 80034a8:	2301      	movs	r3, #1
 80034aa:	75fb      	strb	r3, [r7, #23]
		*len = strlen("ok");
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	801a      	strh	r2, [r3, #0]
 80034b2:	e02a      	b.n	800350a <http_get_cgi_processor+0xaa>
	}else if(strcmp((const char *)uri_name, "power.cgi") == 0){
 80034b4:	491a      	ldr	r1, [pc, #104]	; (8003520 <http_get_cgi_processor+0xc0>)
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f7fc fe92 	bl	80001e0 <strcmp>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d107      	bne.n	80034d2 <http_get_cgi_processor+0x72>
		param_from_Q_to_JSON((char *)buf, PowrData, len);
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	2103      	movs	r1, #3
 80034c6:	68b8      	ldr	r0, [r7, #8]
 80034c8:	f7ff fc2c 	bl	8002d24 <param_from_Q_to_JSON>
		ret = HTTP_OK;
 80034cc:	2301      	movs	r3, #1
 80034ce:	75fb      	strb	r3, [r7, #23]
 80034d0:	e01b      	b.n	800350a <http_get_cgi_processor+0xaa>
	}else if(strcmp((const char *)uri_name, "get_shunt_sett.cgi") == 0){
 80034d2:	4914      	ldr	r1, [pc, #80]	; (8003524 <http_get_cgi_processor+0xc4>)
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f7fc fe83 	bl	80001e0 <strcmp>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d107      	bne.n	80034f0 <http_get_cgi_processor+0x90>
		param_from_Q_to_JSON((char *)buf, PowrSensSett, len);
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	2104      	movs	r1, #4
 80034e4:	68b8      	ldr	r0, [r7, #8]
 80034e6:	f7ff fc1d 	bl	8002d24 <param_from_Q_to_JSON>
		ret = HTTP_OK;
 80034ea:	2301      	movs	r3, #1
 80034ec:	75fb      	strb	r3, [r7, #23]
 80034ee:	e00c      	b.n	800350a <http_get_cgi_processor+0xaa>
	}else if(strcmp((const char *)uri_name, "get_all.cgi") == 0){
 80034f0:	490d      	ldr	r1, [pc, #52]	; (8003528 <http_get_cgi_processor+0xc8>)
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f7fc fe74 	bl	80001e0 <strcmp>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d105      	bne.n	800350a <http_get_cgi_processor+0xaa>
		read_all_parameters((char *)buf, len);
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	68b8      	ldr	r0, [r7, #8]
 8003502:	f7ff fe9d 	bl	8003240 <read_all_parameters>
		ret = HTTP_OK;
 8003506:	2301      	movs	r3, #1
 8003508:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 800350a:	7dfb      	ldrb	r3, [r7, #23]
}
 800350c:	4618      	mov	r0, r3
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	08021108 	.word	0x08021108
 8003518:	0802111c 	.word	0x0802111c
 800351c:	08020fd0 	.word	0x08020fd0
 8003520:	08021128 	.word	0x08021128
 8003524:	08021134 	.word	0x08021134
 8003528:	08021148 	.word	0x08021148

0800352c <func_prototype>:

//need optimaze
char		 			sub_topik_template[] = "biver_%s/+/set";
char					sub_topik[SUBSCR_TOPIK_BUF_LEN];

void func_prototype(void){};
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
 8003530:	bf00      	nop
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
	...

0800353c <init_mqtt_call_mutex>:
void (* set_mutex)(void) 		= &func_prototype;
void (* release_mutex)(void) 	= &func_prototype;
uint8_t (* read_coils)(void)	= &func_prototype;
void (* write_coils)(uint8_t)	= &func_prototype;

void init_mqtt_call_mutex(void (* set_mut), void (* rel_mut)){
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]

	if(set_mut) set_mutex 		= set_mut;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <init_mqtt_call_mutex+0x16>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a07      	ldr	r2, [pc, #28]	; (800356c <init_mqtt_call_mutex+0x30>)
 8003550:	6013      	str	r3, [r2, #0]
	if(rel_mut) release_mutex 	= rel_mut;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <init_mqtt_call_mutex+0x22>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	4a05      	ldr	r2, [pc, #20]	; (8003570 <init_mqtt_call_mutex+0x34>)
 800355c:	6013      	str	r3, [r2, #0]
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	2000005c 	.word	0x2000005c
 8003570:	20000060 	.word	0x20000060

08003574 <mqtt_client_init>:
}



int mqtt_client_init(Ethernet_info_struct* eth_data, MQTT_cred_struct * mqtt_data, char * send_buf, \
		uint16_t send_buf_suze, char * receive_buf, uint16_t receive_buf_len){
 8003574:	b5b0      	push	{r4, r5, r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af04      	add	r7, sp, #16
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	807b      	strh	r3, [r7, #2]

	EthernetInfo 		= eth_data;
 8003582:	4a5e      	ldr	r2, [pc, #376]	; (80036fc <mqtt_client_init+0x188>)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6013      	str	r3, [r2, #0]
	MQTT_credentials	= mqtt_data;
 8003588:	4a5d      	ldr	r2, [pc, #372]	; (8003700 <mqtt_client_init+0x18c>)
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	6013      	str	r3, [r2, #0]
	mqtt_send_buf		= send_buf;
 800358e:	4a5d      	ldr	r2, [pc, #372]	; (8003704 <mqtt_client_init+0x190>)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6013      	str	r3, [r2, #0]
	mqtt_recv_buf		= receive_buf;
 8003594:	4a5c      	ldr	r2, [pc, #368]	; (8003708 <mqtt_client_init+0x194>)
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	6013      	str	r3, [r2, #0]
	mqtt_send_buf_len	= send_buf_suze;
 800359a:	4a5c      	ldr	r2, [pc, #368]	; (800370c <mqtt_client_init+0x198>)
 800359c:	887b      	ldrh	r3, [r7, #2]
 800359e:	8013      	strh	r3, [r2, #0]
	mqtt_recv_buf_len	= receive_buf_len;
 80035a0:	4a5b      	ldr	r2, [pc, #364]	; (8003710 <mqtt_client_init+0x19c>)
 80035a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035a4:	8013      	strh	r3, [r2, #0]

	sprintf(MAC_ADDR_CHR,"%02X%02X%02X%02X%02X%02X", EthernetInfo->mac[0],EthernetInfo->mac[1],EthernetInfo->mac[2],EthernetInfo->mac[3],EthernetInfo->mac[4],EthernetInfo->mac[5]);
 80035a6:	4b55      	ldr	r3, [pc, #340]	; (80036fc <mqtt_client_init+0x188>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	78db      	ldrb	r3, [r3, #3]
 80035ac:	461c      	mov	r4, r3
 80035ae:	4b53      	ldr	r3, [pc, #332]	; (80036fc <mqtt_client_init+0x188>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	791b      	ldrb	r3, [r3, #4]
 80035b4:	461d      	mov	r5, r3
 80035b6:	4b51      	ldr	r3, [pc, #324]	; (80036fc <mqtt_client_init+0x188>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	795b      	ldrb	r3, [r3, #5]
 80035bc:	461a      	mov	r2, r3
 80035be:	4b4f      	ldr	r3, [pc, #316]	; (80036fc <mqtt_client_init+0x188>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	799b      	ldrb	r3, [r3, #6]
 80035c4:	4619      	mov	r1, r3
 80035c6:	4b4d      	ldr	r3, [pc, #308]	; (80036fc <mqtt_client_init+0x188>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	79db      	ldrb	r3, [r3, #7]
 80035cc:	4618      	mov	r0, r3
 80035ce:	4b4b      	ldr	r3, [pc, #300]	; (80036fc <mqtt_client_init+0x188>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	7a1b      	ldrb	r3, [r3, #8]
 80035d4:	9303      	str	r3, [sp, #12]
 80035d6:	9002      	str	r0, [sp, #8]
 80035d8:	9101      	str	r1, [sp, #4]
 80035da:	9200      	str	r2, [sp, #0]
 80035dc:	462b      	mov	r3, r5
 80035de:	4622      	mov	r2, r4
 80035e0:	494c      	ldr	r1, [pc, #304]	; (8003714 <mqtt_client_init+0x1a0>)
 80035e2:	484d      	ldr	r0, [pc, #308]	; (8003718 <mqtt_client_init+0x1a4>)
 80035e4:	f018 fc10 	bl	801be08 <siprintf>
	set_device_id(&MAC_ADDR_CHR);
 80035e8:	484b      	ldr	r0, [pc, #300]	; (8003718 <mqtt_client_init+0x1a4>)
 80035ea:	f000 fa3d 	bl	8003a68 <set_device_id>
	sprintf(IP_ADDR_CHR, "%u.%u.%u.%u", EthernetInfo->ip[0], EthernetInfo->ip[1], EthernetInfo->ip[2], EthernetInfo->ip[3]);
 80035ee:	4b43      	ldr	r3, [pc, #268]	; (80036fc <mqtt_client_init+0x188>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	7a5b      	ldrb	r3, [r3, #9]
 80035f4:	4619      	mov	r1, r3
 80035f6:	4b41      	ldr	r3, [pc, #260]	; (80036fc <mqtt_client_init+0x188>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	7a9b      	ldrb	r3, [r3, #10]
 80035fc:	4618      	mov	r0, r3
 80035fe:	4b3f      	ldr	r3, [pc, #252]	; (80036fc <mqtt_client_init+0x188>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	7adb      	ldrb	r3, [r3, #11]
 8003604:	461a      	mov	r2, r3
 8003606:	4b3d      	ldr	r3, [pc, #244]	; (80036fc <mqtt_client_init+0x188>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	7b1b      	ldrb	r3, [r3, #12]
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	9200      	str	r2, [sp, #0]
 8003610:	4603      	mov	r3, r0
 8003612:	460a      	mov	r2, r1
 8003614:	4941      	ldr	r1, [pc, #260]	; (800371c <mqtt_client_init+0x1a8>)
 8003616:	4842      	ldr	r0, [pc, #264]	; (8003720 <mqtt_client_init+0x1ac>)
 8003618:	f018 fbf6 	bl	801be08 <siprintf>
	set_device_conf_ip(&IP_ADDR_CHR);
 800361c:	4840      	ldr	r0, [pc, #256]	; (8003720 <mqtt_client_init+0x1ac>)
 800361e:	f000 fa45 	bl	8003aac <set_device_conf_ip>

	//strncpy(mqtt_send_buf, MQTT_credentials->uri, MAX_DOMAIN_NAME);
	if ( isValidIPv4(MQTT_credentials->uri)){
 8003622:	4b37      	ldr	r3, [pc, #220]	; (8003700 <mqtt_client_init+0x18c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	3302      	adds	r3, #2
 8003628:	4618      	mov	r0, r3
 800362a:	f008 fc6b 	bl	800bf04 <isValidIPv4>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00c      	beq.n	800364e <mqtt_client_init+0xda>
		sscanf(MQTT_credentials->uri, "%d.%d.%d.%d", &mqtt_server_ip[0], &mqtt_server_ip[1], &mqtt_server_ip[2], &mqtt_server_ip[3]);
 8003634:	4b32      	ldr	r3, [pc, #200]	; (8003700 <mqtt_client_init+0x18c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	1c98      	adds	r0, r3, #2
 800363a:	4b3a      	ldr	r3, [pc, #232]	; (8003724 <mqtt_client_init+0x1b0>)
 800363c:	9301      	str	r3, [sp, #4]
 800363e:	4b3a      	ldr	r3, [pc, #232]	; (8003728 <mqtt_client_init+0x1b4>)
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	4b3a      	ldr	r3, [pc, #232]	; (800372c <mqtt_client_init+0x1b8>)
 8003644:	4a3a      	ldr	r2, [pc, #232]	; (8003730 <mqtt_client_init+0x1bc>)
 8003646:	493b      	ldr	r1, [pc, #236]	; (8003734 <mqtt_client_init+0x1c0>)
 8003648:	f018 fbfe 	bl	801be48 <siscanf>
 800364c:	e00d      	b.n	800366a <mqtt_client_init+0xf6>
	}else if(dns_service_resolve_name(MQTT_credentials->uri, &mqtt_server_ip)== -1){
 800364e:	4b2c      	ldr	r3, [pc, #176]	; (8003700 <mqtt_client_init+0x18c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	3302      	adds	r3, #2
 8003654:	4936      	ldr	r1, [pc, #216]	; (8003730 <mqtt_client_init+0x1bc>)
 8003656:	4618      	mov	r0, r3
 8003658:	f008 fc26 	bl	800bea8 <dns_service_resolve_name>
 800365c:	4603      	mov	r3, r0
 800365e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003662:	d102      	bne.n	800366a <mqtt_client_init+0xf6>
		return -1; // DNS resolve error;
 8003664:	f04f 33ff 	mov.w	r3, #4294967295
 8003668:	e043      	b.n	80036f2 <mqtt_client_init+0x17e>
	}

	mqtt_packet_data.willFlag			= 0;
 800366a:	4b33      	ldr	r3, [pc, #204]	; (8003738 <mqtt_client_init+0x1c4>)
 800366c:	2200      	movs	r2, #0
 800366e:	76da      	strb	r2, [r3, #27]
	mqtt_packet_data.MQTTVersion		= 3;
 8003670:	4b31      	ldr	r3, [pc, #196]	; (8003738 <mqtt_client_init+0x1c4>)
 8003672:	2203      	movs	r2, #3
 8003674:	721a      	strb	r2, [r3, #8]
	mqtt_packet_data.clientID.cstring	= &MAC_ADDR_CHR;
 8003676:	4b30      	ldr	r3, [pc, #192]	; (8003738 <mqtt_client_init+0x1c4>)
 8003678:	4a27      	ldr	r2, [pc, #156]	; (8003718 <mqtt_client_init+0x1a4>)
 800367a:	60da      	str	r2, [r3, #12]
	mqtt_packet_data.keepAliveInterval	= 5000;
 800367c:	4b2e      	ldr	r3, [pc, #184]	; (8003738 <mqtt_client_init+0x1c4>)
 800367e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003682:	831a      	strh	r2, [r3, #24]
	mqtt_packet_data.cleansession		= 1;
 8003684:	4b2c      	ldr	r3, [pc, #176]	; (8003738 <mqtt_client_init+0x1c4>)
 8003686:	2201      	movs	r2, #1
 8003688:	769a      	strb	r2, [r3, #26]
	mqtt_packet_data.username.cstring 	= &MQTT_credentials->login;
 800368a:	4b1d      	ldr	r3, [pc, #116]	; (8003700 <mqtt_client_init+0x18c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	3384      	adds	r3, #132	; 0x84
 8003690:	4a29      	ldr	r2, [pc, #164]	; (8003738 <mqtt_client_init+0x1c4>)
 8003692:	6413      	str	r3, [r2, #64]	; 0x40
	mqtt_packet_data.password.cstring 	= &MQTT_credentials->pass;
 8003694:	4b1a      	ldr	r3, [pc, #104]	; (8003700 <mqtt_client_init+0x18c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	33a5      	adds	r3, #165	; 0xa5
 800369a:	4a27      	ldr	r2, [pc, #156]	; (8003738 <mqtt_client_init+0x1c4>)
 800369c:	64d3      	str	r3, [r2, #76]	; 0x4c
//	mqtt_server_ip						= MQTT_credentials->ip;
	mqtt_server_port					= (uint16_t) MQTT_credentials->port;
 800369e:	4b18      	ldr	r3, [pc, #96]	; (8003700 <mqtt_client_init+0x18c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 80036a6:	4b25      	ldr	r3, [pc, #148]	; (800373c <mqtt_client_init+0x1c8>)
 80036a8:	801a      	strh	r2, [r3, #0]

	mqtt_message.id						= 0;
 80036aa:	4b25      	ldr	r3, [pc, #148]	; (8003740 <mqtt_client_init+0x1cc>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	809a      	strh	r2, [r3, #4]
	mqtt_message.qos					= QOS0;
 80036b0:	4b23      	ldr	r3, [pc, #140]	; (8003740 <mqtt_client_init+0x1cc>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	701a      	strb	r2, [r3, #0]
	mqtt_message.dup					= 0;
 80036b6:	4b22      	ldr	r3, [pc, #136]	; (8003740 <mqtt_client_init+0x1cc>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	709a      	strb	r2, [r3, #2]
	mqtt_message.retained				= 0;
 80036bc:	4b20      	ldr	r3, [pc, #128]	; (8003740 <mqtt_client_init+0x1cc>)
 80036be:	2200      	movs	r2, #0
 80036c0:	705a      	strb	r2, [r3, #1]

	NewNetwork(&MQTT_network, MQTT_CLIENT_SOCKET);
 80036c2:	2105      	movs	r1, #5
 80036c4:	481f      	ldr	r0, [pc, #124]	; (8003744 <mqtt_client_init+0x1d0>)
 80036c6:	f009 f9b7 	bl	800ca38 <NewNetwork>
	MQTTClientInit(&MQTT_Client, &MQTT_network, COMMAND_TIMEOUT_MS, mqtt_send_buf, mqtt_send_buf_len, mqtt_recv_buf, mqtt_recv_buf_len);
 80036ca:	4b0e      	ldr	r3, [pc, #56]	; (8003704 <mqtt_client_init+0x190>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	4b0f      	ldr	r3, [pc, #60]	; (800370c <mqtt_client_init+0x198>)
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <mqtt_client_init+0x194>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	490d      	ldr	r1, [pc, #52]	; (8003710 <mqtt_client_init+0x19c>)
 80036da:	8809      	ldrh	r1, [r1, #0]
 80036dc:	9102      	str	r1, [sp, #8]
 80036de:	9301      	str	r3, [sp, #4]
 80036e0:	9000      	str	r0, [sp, #0]
 80036e2:	4613      	mov	r3, r2
 80036e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036e8:	4916      	ldr	r1, [pc, #88]	; (8003744 <mqtt_client_init+0x1d0>)
 80036ea:	4817      	ldr	r0, [pc, #92]	; (8003748 <mqtt_client_init+0x1d4>)
 80036ec:	f008 fcf4 	bl	800c0d8 <MQTTClientInit>

	return 0;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bdb0      	pop	{r4, r5, r7, pc}
 80036fa:	bf00      	nop
 80036fc:	200004e8 	.word	0x200004e8
 8003700:	200004e4 	.word	0x200004e4
 8003704:	20000514 	.word	0x20000514
 8003708:	20000510 	.word	0x20000510
 800370c:	200007f2 	.word	0x200007f2
 8003710:	200007f0 	.word	0x200007f0
 8003714:	08021154 	.word	0x08021154
 8003718:	200004ec 	.word	0x200004ec
 800371c:	08021170 	.word	0x08021170
 8003720:	200004fc 	.word	0x200004fc
 8003724:	200007f7 	.word	0x200007f7
 8003728:	200007f6 	.word	0x200007f6
 800372c:	200007f5 	.word	0x200007f5
 8003730:	200007f4 	.word	0x200007f4
 8003734:	0802117c 	.word	0x0802117c
 8003738:	20000004 	.word	0x20000004
 800373c:	200007f8 	.word	0x200007f8
 8003740:	20000868 	.word	0x20000868
 8003744:	200007fc 	.word	0x200007fc
 8003748:	2000080c 	.word	0x2000080c

0800374c <mqtt_client_connect>:


int16_t mqtt_client_connect(void){
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0

	int16_t result;

	set_mutex();
 8003752:	4b1f      	ldr	r3, [pc, #124]	; (80037d0 <mqtt_client_connect+0x84>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4798      	blx	r3
	result = ConnectNetwork(&MQTT_network, mqtt_server_ip, mqtt_server_port);
 8003758:	4b1e      	ldr	r3, [pc, #120]	; (80037d4 <mqtt_client_connect+0x88>)
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	461a      	mov	r2, r3
 800375e:	491e      	ldr	r1, [pc, #120]	; (80037d8 <mqtt_client_connect+0x8c>)
 8003760:	481e      	ldr	r0, [pc, #120]	; (80037dc <mqtt_client_connect+0x90>)
 8003762:	f009 f9e6 	bl	800cb32 <ConnectNetwork>
 8003766:	4603      	mov	r3, r0
 8003768:	80fb      	strh	r3, [r7, #6]
	release_mutex();
 800376a:	4b1d      	ldr	r3, [pc, #116]	; (80037e0 <mqtt_client_connect+0x94>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4798      	blx	r3
	if (result != 1) {
 8003770:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d010      	beq.n	800379a <mqtt_client_connect+0x4e>
		set_mutex();
 8003778:	4b15      	ldr	r3, [pc, #84]	; (80037d0 <mqtt_client_connect+0x84>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4798      	blx	r3
		//disconnect(MQTT_network.my_socket);
		close(MQTT_network.my_socket);
 800377e:	4b17      	ldr	r3, [pc, #92]	; (80037dc <mqtt_client_connect+0x90>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	4618      	mov	r0, r3
 8003786:	f004 fdef 	bl	8008368 <close>
		release_mutex();
 800378a:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <mqtt_client_connect+0x94>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4798      	blx	r3
		return result - 10;    // 1 means SOCK_OK;
 8003790:	88fb      	ldrh	r3, [r7, #6]
 8003792:	3b0a      	subs	r3, #10
 8003794:	b29b      	uxth	r3, r3
 8003796:	b21b      	sxth	r3, r3
 8003798:	e016      	b.n	80037c8 <mqtt_client_connect+0x7c>
	}
	set_mutex();
 800379a:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <mqtt_client_connect+0x84>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4798      	blx	r3
	result = MQTTConnect(&MQTT_Client, &mqtt_packet_data);
 80037a0:	4910      	ldr	r1, [pc, #64]	; (80037e4 <mqtt_client_connect+0x98>)
 80037a2:	4811      	ldr	r0, [pc, #68]	; (80037e8 <mqtt_client_connect+0x9c>)
 80037a4:	f008 ff9e 	bl	800c6e4 <MQTTConnect>
 80037a8:	4603      	mov	r3, r0
 80037aa:	80fb      	strh	r3, [r7, #6]
	release_mutex();
 80037ac:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <mqtt_client_connect+0x94>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4798      	blx	r3
	if (result != SUCCESSS) return result - 20;
 80037b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d004      	beq.n	80037c4 <mqtt_client_connect+0x78>
 80037ba:	88fb      	ldrh	r3, [r7, #6]
 80037bc:	3b14      	subs	r3, #20
 80037be:	b29b      	uxth	r3, r3
 80037c0:	b21b      	sxth	r3, r3
 80037c2:	e001      	b.n	80037c8 <mqtt_client_connect+0x7c>
	return result; // if returned value < 0 then means error
 80037c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	2000005c 	.word	0x2000005c
 80037d4:	200007f8 	.word	0x200007f8
 80037d8:	200007f4 	.word	0x200007f4
 80037dc:	200007fc 	.word	0x200007fc
 80037e0:	20000060 	.word	0x20000060
 80037e4:	20000004 	.word	0x20000004
 80037e8:	2000080c 	.word	0x2000080c

080037ec <mqtt_client_reg_dev_on_home_assist>:

int8_t mqtt_client_reg_dev_on_home_assist(void){
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0

	uint8_t i;
	int8_t result;
//------------------------------REG ENERGY SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 80037f2:	2280      	movs	r2, #128	; 0x80
 80037f4:	2100      	movs	r1, #0
 80037f6:	487e      	ldr	r0, [pc, #504]	; (80039f0 <mqtt_client_reg_dev_on_home_assist+0x204>)
 80037f8:	f018 fc56 	bl	801c0a8 <memset>
		get_config_topik_string(buf_topik, ENERGY_SENSOR_TOPIK, 0);
 80037fc:	2200      	movs	r2, #0
 80037fe:	2103      	movs	r1, #3
 8003800:	487b      	ldr	r0, [pc, #492]	; (80039f0 <mqtt_client_reg_dev_on_home_assist+0x204>)
 8003802:	f000 f973 	bl	8003aec <get_config_topik_string>
		get_config_payload_string(buf_payload, ENERGY_SENSOR_PAYLOAD, 0);
 8003806:	2200      	movs	r2, #0
 8003808:	2103      	movs	r1, #3
 800380a:	487a      	ldr	r0, [pc, #488]	; (80039f4 <mqtt_client_reg_dev_on_home_assist+0x208>)
 800380c:	f000 fa0e 	bl	8003c2c <get_config_payload_string>
		mqtt_message.payloadlen = strlen(buf_payload);
 8003810:	4878      	ldr	r0, [pc, #480]	; (80039f4 <mqtt_client_reg_dev_on_home_assist+0x208>)
 8003812:	f7fc fd45 	bl	80002a0 <strlen>
 8003816:	4603      	mov	r3, r0
 8003818:	4a77      	ldr	r2, [pc, #476]	; (80039f8 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 800381a:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload = buf_payload;
 800381c:	4b76      	ldr	r3, [pc, #472]	; (80039f8 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 800381e:	4a75      	ldr	r2, [pc, #468]	; (80039f4 <mqtt_client_reg_dev_on_home_assist+0x208>)
 8003820:	609a      	str	r2, [r3, #8]
		set_mutex();
 8003822:	4b76      	ldr	r3, [pc, #472]	; (80039fc <mqtt_client_reg_dev_on_home_assist+0x210>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8003828:	4a73      	ldr	r2, [pc, #460]	; (80039f8 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 800382a:	4971      	ldr	r1, [pc, #452]	; (80039f0 <mqtt_client_reg_dev_on_home_assist+0x204>)
 800382c:	4874      	ldr	r0, [pc, #464]	; (8003a00 <mqtt_client_reg_dev_on_home_assist+0x214>)
 800382e:	f008 ffdf 	bl	800c7f0 <MQTTPublish>
 8003832:	4603      	mov	r3, r0
 8003834:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 8003836:	4b73      	ldr	r3, [pc, #460]	; (8003a04 <mqtt_client_reg_dev_on_home_assist+0x218>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 800383c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <mqtt_client_reg_dev_on_home_assist+0x5e>
 8003844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003848:	e0ce      	b.n	80039e8 <mqtt_client_reg_dev_on_home_assist+0x1fc>
		mqtt_message.id++;
 800384a:	4b6b      	ldr	r3, [pc, #428]	; (80039f8 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 800384c:	889b      	ldrh	r3, [r3, #4]
 800384e:	3301      	adds	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	4b69      	ldr	r3, [pc, #420]	; (80039f8 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8003854:	809a      	strh	r2, [r3, #4]
//------------------------------REG ENERGY SENSOR-------------------------------
//------------------------------REG VOLTAGE SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 8003856:	2280      	movs	r2, #128	; 0x80
 8003858:	2100      	movs	r1, #0
 800385a:	4865      	ldr	r0, [pc, #404]	; (80039f0 <mqtt_client_reg_dev_on_home_assist+0x204>)
 800385c:	f018 fc24 	bl	801c0a8 <memset>
		get_config_topik_string(buf_topik, VOLTAGE_SENSOR_TOPIK, 0);
 8003860:	2200      	movs	r2, #0
 8003862:	2105      	movs	r1, #5
 8003864:	4862      	ldr	r0, [pc, #392]	; (80039f0 <mqtt_client_reg_dev_on_home_assist+0x204>)
 8003866:	f000 f941 	bl	8003aec <get_config_topik_string>
		get_config_payload_string(buf_payload, VOLTAGE_SENSOR_PAYLOAD, 0);
 800386a:	2200      	movs	r2, #0
 800386c:	2105      	movs	r1, #5
 800386e:	4861      	ldr	r0, [pc, #388]	; (80039f4 <mqtt_client_reg_dev_on_home_assist+0x208>)
 8003870:	f000 f9dc 	bl	8003c2c <get_config_payload_string>
		mqtt_message.payloadlen = strlen(buf_payload);
 8003874:	485f      	ldr	r0, [pc, #380]	; (80039f4 <mqtt_client_reg_dev_on_home_assist+0x208>)
 8003876:	f7fc fd13 	bl	80002a0 <strlen>
 800387a:	4603      	mov	r3, r0
 800387c:	4a5e      	ldr	r2, [pc, #376]	; (80039f8 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 800387e:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload = buf_payload;
 8003880:	4b5d      	ldr	r3, [pc, #372]	; (80039f8 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8003882:	4a5c      	ldr	r2, [pc, #368]	; (80039f4 <mqtt_client_reg_dev_on_home_assist+0x208>)
 8003884:	609a      	str	r2, [r3, #8]
		set_mutex();
 8003886:	4b5d      	ldr	r3, [pc, #372]	; (80039fc <mqtt_client_reg_dev_on_home_assist+0x210>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 800388c:	4a5a      	ldr	r2, [pc, #360]	; (80039f8 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 800388e:	4958      	ldr	r1, [pc, #352]	; (80039f0 <mqtt_client_reg_dev_on_home_assist+0x204>)
 8003890:	485b      	ldr	r0, [pc, #364]	; (8003a00 <mqtt_client_reg_dev_on_home_assist+0x214>)
 8003892:	f008 ffad 	bl	800c7f0 <MQTTPublish>
 8003896:	4603      	mov	r3, r0
 8003898:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 800389a:	4b5a      	ldr	r3, [pc, #360]	; (8003a04 <mqtt_client_reg_dev_on_home_assist+0x218>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 80038a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d002      	beq.n	80038ae <mqtt_client_reg_dev_on_home_assist+0xc2>
 80038a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ac:	e09c      	b.n	80039e8 <mqtt_client_reg_dev_on_home_assist+0x1fc>
		mqtt_message.id++;
 80038ae:	4b52      	ldr	r3, [pc, #328]	; (80039f8 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 80038b0:	889b      	ldrh	r3, [r3, #4]
 80038b2:	3301      	adds	r3, #1
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	4b50      	ldr	r3, [pc, #320]	; (80039f8 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 80038b8:	809a      	strh	r2, [r3, #4]
//------------------------------REG VOLTAGE SENSOR-------------------------------
//------------------------------REG POWER SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 80038ba:	2280      	movs	r2, #128	; 0x80
 80038bc:	2100      	movs	r1, #0
 80038be:	484c      	ldr	r0, [pc, #304]	; (80039f0 <mqtt_client_reg_dev_on_home_assist+0x204>)
 80038c0:	f018 fbf2 	bl	801c0a8 <memset>
		get_config_topik_string(buf_topik, POWER_SENSOR_TOPIK, 0);
 80038c4:	2200      	movs	r2, #0
 80038c6:	2104      	movs	r1, #4
 80038c8:	4849      	ldr	r0, [pc, #292]	; (80039f0 <mqtt_client_reg_dev_on_home_assist+0x204>)
 80038ca:	f000 f90f 	bl	8003aec <get_config_topik_string>
		get_config_payload_string(buf_payload, POWER_SENSOR_PAYLOAD, 0);
 80038ce:	2200      	movs	r2, #0
 80038d0:	2104      	movs	r1, #4
 80038d2:	4848      	ldr	r0, [pc, #288]	; (80039f4 <mqtt_client_reg_dev_on_home_assist+0x208>)
 80038d4:	f000 f9aa 	bl	8003c2c <get_config_payload_string>
		mqtt_message.payloadlen = strlen(buf_payload);
 80038d8:	4846      	ldr	r0, [pc, #280]	; (80039f4 <mqtt_client_reg_dev_on_home_assist+0x208>)
 80038da:	f7fc fce1 	bl	80002a0 <strlen>
 80038de:	4603      	mov	r3, r0
 80038e0:	4a45      	ldr	r2, [pc, #276]	; (80039f8 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 80038e2:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload = buf_payload;
 80038e4:	4b44      	ldr	r3, [pc, #272]	; (80039f8 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 80038e6:	4a43      	ldr	r2, [pc, #268]	; (80039f4 <mqtt_client_reg_dev_on_home_assist+0x208>)
 80038e8:	609a      	str	r2, [r3, #8]
		set_mutex();
 80038ea:	4b44      	ldr	r3, [pc, #272]	; (80039fc <mqtt_client_reg_dev_on_home_assist+0x210>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 80038f0:	4a41      	ldr	r2, [pc, #260]	; (80039f8 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 80038f2:	493f      	ldr	r1, [pc, #252]	; (80039f0 <mqtt_client_reg_dev_on_home_assist+0x204>)
 80038f4:	4842      	ldr	r0, [pc, #264]	; (8003a00 <mqtt_client_reg_dev_on_home_assist+0x214>)
 80038f6:	f008 ff7b 	bl	800c7f0 <MQTTPublish>
 80038fa:	4603      	mov	r3, r0
 80038fc:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 80038fe:	4b41      	ldr	r3, [pc, #260]	; (8003a04 <mqtt_client_reg_dev_on_home_assist+0x218>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 8003904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <mqtt_client_reg_dev_on_home_assist+0x126>
 800390c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003910:	e06a      	b.n	80039e8 <mqtt_client_reg_dev_on_home_assist+0x1fc>
		mqtt_message.id++;
 8003912:	4b39      	ldr	r3, [pc, #228]	; (80039f8 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8003914:	889b      	ldrh	r3, [r3, #4]
 8003916:	3301      	adds	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	4b37      	ldr	r3, [pc, #220]	; (80039f8 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 800391c:	809a      	strh	r2, [r3, #4]

//------------------------------REG POWER SENSOR-------------------------------
//------------------------------REG POWER FACTOR SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 800391e:	2280      	movs	r2, #128	; 0x80
 8003920:	2100      	movs	r1, #0
 8003922:	4833      	ldr	r0, [pc, #204]	; (80039f0 <mqtt_client_reg_dev_on_home_assist+0x204>)
 8003924:	f018 fbc0 	bl	801c0a8 <memset>
		get_config_topik_string(buf_topik, POWER_FACTOR_SENSOR_TOPIK, 0);
 8003928:	2200      	movs	r2, #0
 800392a:	2106      	movs	r1, #6
 800392c:	4830      	ldr	r0, [pc, #192]	; (80039f0 <mqtt_client_reg_dev_on_home_assist+0x204>)
 800392e:	f000 f8dd 	bl	8003aec <get_config_topik_string>
		get_config_payload_string(buf_payload, POWER_FACTOR_SENSOR_PAYLOAD, 0);
 8003932:	2200      	movs	r2, #0
 8003934:	2106      	movs	r1, #6
 8003936:	482f      	ldr	r0, [pc, #188]	; (80039f4 <mqtt_client_reg_dev_on_home_assist+0x208>)
 8003938:	f000 f978 	bl	8003c2c <get_config_payload_string>
		mqtt_message.payloadlen = strlen(buf_payload);
 800393c:	482d      	ldr	r0, [pc, #180]	; (80039f4 <mqtt_client_reg_dev_on_home_assist+0x208>)
 800393e:	f7fc fcaf 	bl	80002a0 <strlen>
 8003942:	4603      	mov	r3, r0
 8003944:	4a2c      	ldr	r2, [pc, #176]	; (80039f8 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8003946:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload = buf_payload;
 8003948:	4b2b      	ldr	r3, [pc, #172]	; (80039f8 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 800394a:	4a2a      	ldr	r2, [pc, #168]	; (80039f4 <mqtt_client_reg_dev_on_home_assist+0x208>)
 800394c:	609a      	str	r2, [r3, #8]
		set_mutex();
 800394e:	4b2b      	ldr	r3, [pc, #172]	; (80039fc <mqtt_client_reg_dev_on_home_assist+0x210>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8003954:	4a28      	ldr	r2, [pc, #160]	; (80039f8 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8003956:	4926      	ldr	r1, [pc, #152]	; (80039f0 <mqtt_client_reg_dev_on_home_assist+0x204>)
 8003958:	4829      	ldr	r0, [pc, #164]	; (8003a00 <mqtt_client_reg_dev_on_home_assist+0x214>)
 800395a:	f008 ff49 	bl	800c7f0 <MQTTPublish>
 800395e:	4603      	mov	r3, r0
 8003960:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 8003962:	4b28      	ldr	r3, [pc, #160]	; (8003a04 <mqtt_client_reg_dev_on_home_assist+0x218>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 8003968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <mqtt_client_reg_dev_on_home_assist+0x18a>
 8003970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003974:	e038      	b.n	80039e8 <mqtt_client_reg_dev_on_home_assist+0x1fc>
		mqtt_message.id++;
 8003976:	4b20      	ldr	r3, [pc, #128]	; (80039f8 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8003978:	889b      	ldrh	r3, [r3, #4]
 800397a:	3301      	adds	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	4b1e      	ldr	r3, [pc, #120]	; (80039f8 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8003980:	809a      	strh	r2, [r3, #4]

//------------------------------REG POWER FACTOR SENSOR-------------------------------
//------------------------------REG CURRENT SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 8003982:	2280      	movs	r2, #128	; 0x80
 8003984:	2100      	movs	r1, #0
 8003986:	481a      	ldr	r0, [pc, #104]	; (80039f0 <mqtt_client_reg_dev_on_home_assist+0x204>)
 8003988:	f018 fb8e 	bl	801c0a8 <memset>
		get_config_topik_string(buf_topik, CURRENT_SENSOR_TOPIK, 0);
 800398c:	2200      	movs	r2, #0
 800398e:	2107      	movs	r1, #7
 8003990:	4817      	ldr	r0, [pc, #92]	; (80039f0 <mqtt_client_reg_dev_on_home_assist+0x204>)
 8003992:	f000 f8ab 	bl	8003aec <get_config_topik_string>
		get_config_payload_string(buf_payload, CURRENT_SENSOR_PAYLOAD, 0);
 8003996:	2200      	movs	r2, #0
 8003998:	2107      	movs	r1, #7
 800399a:	4816      	ldr	r0, [pc, #88]	; (80039f4 <mqtt_client_reg_dev_on_home_assist+0x208>)
 800399c:	f000 f946 	bl	8003c2c <get_config_payload_string>
		mqtt_message.payloadlen = strlen(buf_payload);
 80039a0:	4814      	ldr	r0, [pc, #80]	; (80039f4 <mqtt_client_reg_dev_on_home_assist+0x208>)
 80039a2:	f7fc fc7d 	bl	80002a0 <strlen>
 80039a6:	4603      	mov	r3, r0
 80039a8:	4a13      	ldr	r2, [pc, #76]	; (80039f8 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 80039aa:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload = buf_payload;
 80039ac:	4b12      	ldr	r3, [pc, #72]	; (80039f8 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 80039ae:	4a11      	ldr	r2, [pc, #68]	; (80039f4 <mqtt_client_reg_dev_on_home_assist+0x208>)
 80039b0:	609a      	str	r2, [r3, #8]
		set_mutex();
 80039b2:	4b12      	ldr	r3, [pc, #72]	; (80039fc <mqtt_client_reg_dev_on_home_assist+0x210>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 80039b8:	4a0f      	ldr	r2, [pc, #60]	; (80039f8 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 80039ba:	490d      	ldr	r1, [pc, #52]	; (80039f0 <mqtt_client_reg_dev_on_home_assist+0x204>)
 80039bc:	4810      	ldr	r0, [pc, #64]	; (8003a00 <mqtt_client_reg_dev_on_home_assist+0x214>)
 80039be:	f008 ff17 	bl	800c7f0 <MQTTPublish>
 80039c2:	4603      	mov	r3, r0
 80039c4:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 80039c6:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <mqtt_client_reg_dev_on_home_assist+0x218>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 80039cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <mqtt_client_reg_dev_on_home_assist+0x1ee>
 80039d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d8:	e006      	b.n	80039e8 <mqtt_client_reg_dev_on_home_assist+0x1fc>
		mqtt_message.id++;
 80039da:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 80039dc:	889b      	ldrh	r3, [r3, #4]
 80039de:	3301      	adds	r3, #1
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 80039e4:	809a      	strh	r2, [r3, #4]

//------------------------------REG CURRENT SENSOR-------------------------------
		return 0;
 80039e6:	2300      	movs	r3, #0
		if (result != SUCCESSS) return result;
		mqtt_message.id++;
	}
	return result;// if all Ok, return SUCCESSS. SUCCESSS = 0;
	*/
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	20000518 	.word	0x20000518
 80039f4:	20000598 	.word	0x20000598
 80039f8:	20000868 	.word	0x20000868
 80039fc:	2000005c 	.word	0x2000005c
 8003a00:	2000080c 	.word	0x2000080c
 8003a04:	20000060 	.word	0x20000060

08003a08 <send_data_to_topik>:
	result = MQTTSubscribe(&MQTT_Client, sub_topik, QOS1, mqtt_message_resieve);
	release_mutex();
	return result;  // if all Ok, return SUCCESSS. SUCCESSS = 0;
}

int8_t send_data_to_topik(const char* topik, char* payload){
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
	int8_t result;

	mqtt_message.payloadlen = strlen(payload);
 8003a12:	6838      	ldr	r0, [r7, #0]
 8003a14:	f7fc fc44 	bl	80002a0 <strlen>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	4a0f      	ldr	r2, [pc, #60]	; (8003a58 <send_data_to_topik+0x50>)
 8003a1c:	60d3      	str	r3, [r2, #12]
	mqtt_message.payload	= payload;
 8003a1e:	4a0e      	ldr	r2, [pc, #56]	; (8003a58 <send_data_to_topik+0x50>)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	6093      	str	r3, [r2, #8]
	mqtt_message.id++;
 8003a24:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <send_data_to_topik+0x50>)
 8003a26:	889b      	ldrh	r3, [r3, #4]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <send_data_to_topik+0x50>)
 8003a2e:	809a      	strh	r2, [r3, #4]
	set_mutex();
 8003a30:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <send_data_to_topik+0x54>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4798      	blx	r3
	result = MQTTPublish(&MQTT_Client, topik , &mqtt_message);
 8003a36:	4a08      	ldr	r2, [pc, #32]	; (8003a58 <send_data_to_topik+0x50>)
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	4809      	ldr	r0, [pc, #36]	; (8003a60 <send_data_to_topik+0x58>)
 8003a3c:	f008 fed8 	bl	800c7f0 <MQTTPublish>
 8003a40:	4603      	mov	r3, r0
 8003a42:	73fb      	strb	r3, [r7, #15]
	release_mutex();
 8003a44:	4b07      	ldr	r3, [pc, #28]	; (8003a64 <send_data_to_topik+0x5c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4798      	blx	r3
	return result; // if all Ok, return SUCCESSS. SUCCESSS = 0;
 8003a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20000868 	.word	0x20000868
 8003a5c:	2000005c 	.word	0x2000005c
 8003a60:	2000080c 	.word	0x2000080c
 8003a64:	20000060 	.word	0x20000060

08003a68 <set_device_id>:
char switch_status_topik_temp[] = {"%s_%s/switches"	};

unsigned char unical_id[DEV_UID_LEN] = {'\0'};
unsigned char dev_conf_ip[IP_v4_LEN] = {'\0'};

int set_device_id(unsigned char * dev_id){
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
	uint8_t cpy_len = 0;
 8003a70:	2300      	movs	r3, #0
 8003a72:	73fb      	strb	r3, [r7, #15]
	if (strlen(dev_id) >= DEV_UID_LEN ){
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7fc fc13 	bl	80002a0 <strlen>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b0d      	cmp	r3, #13
 8003a7e:	d902      	bls.n	8003a86 <set_device_id+0x1e>
		cpy_len = DEV_UID_LEN;
 8003a80:	230e      	movs	r3, #14
 8003a82:	73fb      	strb	r3, [r7, #15]
 8003a84:	e004      	b.n	8003a90 <set_device_id+0x28>
	}else{
		cpy_len = strlen(dev_id);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7fc fc0a 	bl	80002a0 <strlen>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	73fb      	strb	r3, [r7, #15]
	}
	strncpy(unical_id, dev_id, cpy_len);
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	461a      	mov	r2, r3
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	4804      	ldr	r0, [pc, #16]	; (8003aa8 <set_device_id+0x40>)
 8003a98:	f018 fb60 	bl	801c15c <strncpy>
	return 0;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	20000878 	.word	0x20000878

08003aac <set_device_conf_ip>:

int set_device_conf_ip(unsigned char * chr_ip){
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]

	strcpy(dev_conf_ip, "\0");
 8003ab4:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <set_device_conf_ip+0x3c>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
	if(strlen(chr_ip) <= IP_v4_LEN){
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7fc fbf0 	bl	80002a0 <strlen>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b12      	cmp	r3, #18
 8003ac4:	d80a      	bhi.n	8003adc <set_device_conf_ip+0x30>
		strncpy(dev_conf_ip, chr_ip, strlen(chr_ip));
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7fc fbea 	bl	80002a0 <strlen>
 8003acc:	4603      	mov	r3, r0
 8003ace:	461a      	mov	r2, r3
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	4805      	ldr	r0, [pc, #20]	; (8003ae8 <set_device_conf_ip+0x3c>)
 8003ad4:	f018 fb42 	bl	801c15c <strncpy>
		return 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	e001      	b.n	8003ae0 <set_device_conf_ip+0x34>
	}
	return -1;
 8003adc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20000888 	.word	0x20000888

08003aec <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint8_t topik_type, uint8_t obj_number){
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af04      	add	r7, sp, #16
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	70fb      	strb	r3, [r7, #3]
 8003af8:	4613      	mov	r3, r2
 8003afa:	70bb      	strb	r3, [r7, #2]

	strcpy(buff, '\0');
 8003afc:	2100      	movs	r1, #0
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f018 fc9f 	bl	801c442 <strcpy>
	switch (topik_type) {
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	2b06      	cmp	r3, #6
 8003b0a:	d86c      	bhi.n	8003be6 <get_config_topik_string+0xfa>
 8003b0c:	a201      	add	r2, pc, #4	; (adr r2, 8003b14 <get_config_topik_string+0x28>)
 8003b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b12:	bf00      	nop
 8003b14:	08003b31 	.word	0x08003b31
 8003b18:	08003b4b 	.word	0x08003b4b
 8003b1c:	08003b65 	.word	0x08003b65
 8003b20:	08003b99 	.word	0x08003b99
 8003b24:	08003b7f 	.word	0x08003b7f
 8003b28:	08003bb3 	.word	0x08003bb3
 8003b2c:	08003bcd 	.word	0x08003bcd
		case INPUT_TOPIK:
			sprintf(buff, config_topik_temlate, home_assistant_prefix, bin_sens, unical_id, input, obj_number);
 8003b30:	78bb      	ldrb	r3, [r7, #2]
 8003b32:	9302      	str	r3, [sp, #8]
 8003b34:	4b2f      	ldr	r3, [pc, #188]	; (8003bf4 <get_config_topik_string+0x108>)
 8003b36:	9301      	str	r3, [sp, #4]
 8003b38:	4b2f      	ldr	r3, [pc, #188]	; (8003bf8 <get_config_topik_string+0x10c>)
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	4b2f      	ldr	r3, [pc, #188]	; (8003bfc <get_config_topik_string+0x110>)
 8003b3e:	4a30      	ldr	r2, [pc, #192]	; (8003c00 <get_config_topik_string+0x114>)
 8003b40:	4930      	ldr	r1, [pc, #192]	; (8003c04 <get_config_topik_string+0x118>)
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f018 f960 	bl	801be08 <siprintf>
			break;
 8003b48:	e04e      	b.n	8003be8 <get_config_topik_string+0xfc>

		case OUTPUT_TOPIK:
			sprintf(buff, config_topik_temlate, home_assistant_prefix, switch_sens, unical_id, switch_sens, obj_number);
 8003b4a:	78bb      	ldrb	r3, [r7, #2]
 8003b4c:	9302      	str	r3, [sp, #8]
 8003b4e:	4b2e      	ldr	r3, [pc, #184]	; (8003c08 <get_config_topik_string+0x11c>)
 8003b50:	9301      	str	r3, [sp, #4]
 8003b52:	4b29      	ldr	r3, [pc, #164]	; (8003bf8 <get_config_topik_string+0x10c>)
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	4b2c      	ldr	r3, [pc, #176]	; (8003c08 <get_config_topik_string+0x11c>)
 8003b58:	4a29      	ldr	r2, [pc, #164]	; (8003c00 <get_config_topik_string+0x114>)
 8003b5a:	492a      	ldr	r1, [pc, #168]	; (8003c04 <get_config_topik_string+0x118>)
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f018 f953 	bl	801be08 <siprintf>
			break;
 8003b62:	e041      	b.n	8003be8 <get_config_topik_string+0xfc>

		case ENERGY_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy);
 8003b64:	4b29      	ldr	r3, [pc, #164]	; (8003c0c <get_config_topik_string+0x120>)
 8003b66:	9302      	str	r3, [sp, #8]
 8003b68:	4b23      	ldr	r3, [pc, #140]	; (8003bf8 <get_config_topik_string+0x10c>)
 8003b6a:	9301      	str	r3, [sp, #4]
 8003b6c:	4b28      	ldr	r3, [pc, #160]	; (8003c10 <get_config_topik_string+0x124>)
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	4b28      	ldr	r3, [pc, #160]	; (8003c14 <get_config_topik_string+0x128>)
 8003b72:	4a23      	ldr	r2, [pc, #140]	; (8003c00 <get_config_topik_string+0x114>)
 8003b74:	4928      	ldr	r1, [pc, #160]	; (8003c18 <get_config_topik_string+0x12c>)
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f018 f946 	bl	801be08 <siprintf>
			break;
 8003b7c:	e034      	b.n	8003be8 <get_config_topik_string+0xfc>
		case VOLTAGE_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage);
 8003b7e:	4b27      	ldr	r3, [pc, #156]	; (8003c1c <get_config_topik_string+0x130>)
 8003b80:	9302      	str	r3, [sp, #8]
 8003b82:	4b1d      	ldr	r3, [pc, #116]	; (8003bf8 <get_config_topik_string+0x10c>)
 8003b84:	9301      	str	r3, [sp, #4]
 8003b86:	4b22      	ldr	r3, [pc, #136]	; (8003c10 <get_config_topik_string+0x124>)
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	4b22      	ldr	r3, [pc, #136]	; (8003c14 <get_config_topik_string+0x128>)
 8003b8c:	4a1c      	ldr	r2, [pc, #112]	; (8003c00 <get_config_topik_string+0x114>)
 8003b8e:	4922      	ldr	r1, [pc, #136]	; (8003c18 <get_config_topik_string+0x12c>)
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f018 f939 	bl	801be08 <siprintf>
			break;
 8003b96:	e027      	b.n	8003be8 <get_config_topik_string+0xfc>
		case POWER_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power);
 8003b98:	4b21      	ldr	r3, [pc, #132]	; (8003c20 <get_config_topik_string+0x134>)
 8003b9a:	9302      	str	r3, [sp, #8]
 8003b9c:	4b16      	ldr	r3, [pc, #88]	; (8003bf8 <get_config_topik_string+0x10c>)
 8003b9e:	9301      	str	r3, [sp, #4]
 8003ba0:	4b1b      	ldr	r3, [pc, #108]	; (8003c10 <get_config_topik_string+0x124>)
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	4b1b      	ldr	r3, [pc, #108]	; (8003c14 <get_config_topik_string+0x128>)
 8003ba6:	4a16      	ldr	r2, [pc, #88]	; (8003c00 <get_config_topik_string+0x114>)
 8003ba8:	491b      	ldr	r1, [pc, #108]	; (8003c18 <get_config_topik_string+0x12c>)
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f018 f92c 	bl	801be08 <siprintf>
			break;
 8003bb0:	e01a      	b.n	8003be8 <get_config_topik_string+0xfc>
		case POWER_FACTOR_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor);
 8003bb2:	4b1c      	ldr	r3, [pc, #112]	; (8003c24 <get_config_topik_string+0x138>)
 8003bb4:	9302      	str	r3, [sp, #8]
 8003bb6:	4b10      	ldr	r3, [pc, #64]	; (8003bf8 <get_config_topik_string+0x10c>)
 8003bb8:	9301      	str	r3, [sp, #4]
 8003bba:	4b15      	ldr	r3, [pc, #84]	; (8003c10 <get_config_topik_string+0x124>)
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	4b15      	ldr	r3, [pc, #84]	; (8003c14 <get_config_topik_string+0x128>)
 8003bc0:	4a0f      	ldr	r2, [pc, #60]	; (8003c00 <get_config_topik_string+0x114>)
 8003bc2:	4915      	ldr	r1, [pc, #84]	; (8003c18 <get_config_topik_string+0x12c>)
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f018 f91f 	bl	801be08 <siprintf>
			break;
 8003bca:	e00d      	b.n	8003be8 <get_config_topik_string+0xfc>
		case CURRENT_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current);
 8003bcc:	4b16      	ldr	r3, [pc, #88]	; (8003c28 <get_config_topik_string+0x13c>)
 8003bce:	9302      	str	r3, [sp, #8]
 8003bd0:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <get_config_topik_string+0x10c>)
 8003bd2:	9301      	str	r3, [sp, #4]
 8003bd4:	4b0e      	ldr	r3, [pc, #56]	; (8003c10 <get_config_topik_string+0x124>)
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <get_config_topik_string+0x128>)
 8003bda:	4a09      	ldr	r2, [pc, #36]	; (8003c00 <get_config_topik_string+0x114>)
 8003bdc:	490e      	ldr	r1, [pc, #56]	; (8003c18 <get_config_topik_string+0x12c>)
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f018 f912 	bl	801be08 <siprintf>
			break;
 8003be4:	e000      	b.n	8003be8 <get_config_topik_string+0xfc>
		default:
			break;
 8003be6:	bf00      	nop
	}


	return 0;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	2000008c 	.word	0x2000008c
 8003bf8:	20000878 	.word	0x20000878
 8003bfc:	20000074 	.word	0x20000074
 8003c00:	20000064 	.word	0x20000064
 8003c04:	080226cc 	.word	0x080226cc
 8003c08:	20000084 	.word	0x20000084
 8003c0c:	080211b8 	.word	0x080211b8
 8003c10:	080211c0 	.word	0x080211c0
 8003c14:	08021198 	.word	0x08021198
 8003c18:	080211a0 	.word	0x080211a0
 8003c1c:	080211c8 	.word	0x080211c8
 8003c20:	080211d0 	.word	0x080211d0
 8003c24:	080211d8 	.word	0x080211d8
 8003c28:	080211e8 	.word	0x080211e8

08003c2c <get_config_payload_string>:

int get_config_payload_string( char * payload, uint8_t payload_type, uint8_t obj_number){
 8003c2c:	b590      	push	{r4, r7, lr}
 8003c2e:	b097      	sub	sp, #92	; 0x5c
 8003c30:	af12      	add	r7, sp, #72	; 0x48
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	460b      	mov	r3, r1
 8003c36:	70fb      	strb	r3, [r7, #3]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	70bb      	strb	r3, [r7, #2]

	uint8_t len = 0;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	73fb      	strb	r3, [r7, #15]
	strcpy(payload, "\0");
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	701a      	strb	r2, [r3, #0]

	switch (payload_type) {
 8003c46:	78fb      	ldrb	r3, [r7, #3]
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	2b06      	cmp	r3, #6
 8003c4c:	f200 811a 	bhi.w	8003e84 <get_config_payload_string+0x258>
 8003c50:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <get_config_payload_string+0x2c>)
 8003c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c56:	bf00      	nop
 8003c58:	08003ca9 	.word	0x08003ca9
 8003c5c:	08003c75 	.word	0x08003c75
 8003c60:	08003cd7 	.word	0x08003cd7
 8003c64:	08003d83 	.word	0x08003d83
 8003c68:	08003d2d 	.word	0x08003d2d
 8003c6c:	08003dd9 	.word	0x08003dd9
 8003c70:	08003e2f 	.word	0x08003e2f
		case OUT_CONF_PAYLOAD:
			len = sprintf(payload, switch_conf_payload_templ, unical_id, unical_id, obj_number, obj_number, obj_number, unical_id, obj_number, unical_id, unical_id, dev_conf_ip);
 8003c74:	78bb      	ldrb	r3, [r7, #2]
 8003c76:	78ba      	ldrb	r2, [r7, #2]
 8003c78:	78b9      	ldrb	r1, [r7, #2]
 8003c7a:	78b8      	ldrb	r0, [r7, #2]
 8003c7c:	4c85      	ldr	r4, [pc, #532]	; (8003e94 <get_config_payload_string+0x268>)
 8003c7e:	9407      	str	r4, [sp, #28]
 8003c80:	4c85      	ldr	r4, [pc, #532]	; (8003e98 <get_config_payload_string+0x26c>)
 8003c82:	9406      	str	r4, [sp, #24]
 8003c84:	4c84      	ldr	r4, [pc, #528]	; (8003e98 <get_config_payload_string+0x26c>)
 8003c86:	9405      	str	r4, [sp, #20]
 8003c88:	9004      	str	r0, [sp, #16]
 8003c8a:	4883      	ldr	r0, [pc, #524]	; (8003e98 <get_config_payload_string+0x26c>)
 8003c8c:	9003      	str	r0, [sp, #12]
 8003c8e:	9102      	str	r1, [sp, #8]
 8003c90:	9201      	str	r2, [sp, #4]
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	4b80      	ldr	r3, [pc, #512]	; (8003e98 <get_config_payload_string+0x26c>)
 8003c96:	4a80      	ldr	r2, [pc, #512]	; (8003e98 <get_config_payload_string+0x26c>)
 8003c98:	4980      	ldr	r1, [pc, #512]	; (8003e9c <get_config_payload_string+0x270>)
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f018 f8b4 	bl	801be08 <siprintf>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	73fb      	strb	r3, [r7, #15]
			return len;
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
 8003ca6:	e0f0      	b.n	8003e8a <get_config_payload_string+0x25e>
			break;

		case INP_CONF_PAYLOAD:
			len = sprintf(payload, input_conf_payload_templ, unical_id, obj_number, obj_number,  unical_id, obj_number, unical_id, unical_id, dev_conf_ip);
 8003ca8:	78b9      	ldrb	r1, [r7, #2]
 8003caa:	78bb      	ldrb	r3, [r7, #2]
 8003cac:	78ba      	ldrb	r2, [r7, #2]
 8003cae:	4879      	ldr	r0, [pc, #484]	; (8003e94 <get_config_payload_string+0x268>)
 8003cb0:	9005      	str	r0, [sp, #20]
 8003cb2:	4879      	ldr	r0, [pc, #484]	; (8003e98 <get_config_payload_string+0x26c>)
 8003cb4:	9004      	str	r0, [sp, #16]
 8003cb6:	4878      	ldr	r0, [pc, #480]	; (8003e98 <get_config_payload_string+0x26c>)
 8003cb8:	9003      	str	r0, [sp, #12]
 8003cba:	9202      	str	r2, [sp, #8]
 8003cbc:	4a76      	ldr	r2, [pc, #472]	; (8003e98 <get_config_payload_string+0x26c>)
 8003cbe:	9201      	str	r2, [sp, #4]
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4a74      	ldr	r2, [pc, #464]	; (8003e98 <get_config_payload_string+0x26c>)
 8003cc6:	4976      	ldr	r1, [pc, #472]	; (8003ea0 <get_config_payload_string+0x274>)
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f018 f89d 	bl	801be08 <siprintf>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	73fb      	strb	r3, [r7, #15]
			return len;
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
 8003cd4:	e0d9      	b.n	8003e8a <get_config_payload_string+0x25e>
			break;
		case ENERGY_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 8003cd6:	4b6f      	ldr	r3, [pc, #444]	; (8003e94 <get_config_payload_string+0x268>)
 8003cd8:	9310      	str	r3, [sp, #64]	; 0x40
 8003cda:	4b72      	ldr	r3, [pc, #456]	; (8003ea4 <get_config_payload_string+0x278>)
 8003cdc:	930f      	str	r3, [sp, #60]	; 0x3c
 8003cde:	4b72      	ldr	r3, [pc, #456]	; (8003ea8 <get_config_payload_string+0x27c>)
 8003ce0:	930e      	str	r3, [sp, #56]	; 0x38
 8003ce2:	4b72      	ldr	r3, [pc, #456]	; (8003eac <get_config_payload_string+0x280>)
 8003ce4:	930d      	str	r3, [sp, #52]	; 0x34
 8003ce6:	4b72      	ldr	r3, [pc, #456]	; (8003eb0 <get_config_payload_string+0x284>)
 8003ce8:	930c      	str	r3, [sp, #48]	; 0x30
 8003cea:	4b72      	ldr	r3, [pc, #456]	; (8003eb4 <get_config_payload_string+0x288>)
 8003cec:	930b      	str	r3, [sp, #44]	; 0x2c
 8003cee:	4b6a      	ldr	r3, [pc, #424]	; (8003e98 <get_config_payload_string+0x26c>)
 8003cf0:	930a      	str	r3, [sp, #40]	; 0x28
 8003cf2:	4b71      	ldr	r3, [pc, #452]	; (8003eb8 <get_config_payload_string+0x28c>)
 8003cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8003cf6:	4b71      	ldr	r3, [pc, #452]	; (8003ebc <get_config_payload_string+0x290>)
 8003cf8:	9308      	str	r3, [sp, #32]
 8003cfa:	4b71      	ldr	r3, [pc, #452]	; (8003ec0 <get_config_payload_string+0x294>)
 8003cfc:	9307      	str	r3, [sp, #28]
 8003cfe:	4b66      	ldr	r3, [pc, #408]	; (8003e98 <get_config_payload_string+0x26c>)
 8003d00:	9306      	str	r3, [sp, #24]
 8003d02:	4b6d      	ldr	r3, [pc, #436]	; (8003eb8 <get_config_payload_string+0x28c>)
 8003d04:	9305      	str	r3, [sp, #20]
 8003d06:	4b6f      	ldr	r3, [pc, #444]	; (8003ec4 <get_config_payload_string+0x298>)
 8003d08:	9304      	str	r3, [sp, #16]
 8003d0a:	4b6f      	ldr	r3, [pc, #444]	; (8003ec8 <get_config_payload_string+0x29c>)
 8003d0c:	9303      	str	r3, [sp, #12]
 8003d0e:	4b6c      	ldr	r3, [pc, #432]	; (8003ec0 <get_config_payload_string+0x294>)
 8003d10:	9302      	str	r3, [sp, #8]
 8003d12:	4b6e      	ldr	r3, [pc, #440]	; (8003ecc <get_config_payload_string+0x2a0>)
 8003d14:	9301      	str	r3, [sp, #4]
 8003d16:	4b60      	ldr	r3, [pc, #384]	; (8003e98 <get_config_payload_string+0x26c>)
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	4b67      	ldr	r3, [pc, #412]	; (8003eb8 <get_config_payload_string+0x28c>)
 8003d1c:	4a68      	ldr	r2, [pc, #416]	; (8003ec0 <get_config_payload_string+0x294>)
 8003d1e:	496c      	ldr	r1, [pc, #432]	; (8003ed0 <get_config_payload_string+0x2a4>)
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f018 f871 	bl	801be08 <siprintf>
 8003d26:	4603      	mov	r3, r0
 8003d28:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_energy, dev_class_energy_state, dev_class_energy_human, dev_system, unical_id, \
					dev_class_energy, dev_class_energy_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8003d2a:	e0ae      	b.n	8003e8a <get_config_payload_string+0x25e>
		case VOLTAGE_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 8003d2c:	4b59      	ldr	r3, [pc, #356]	; (8003e94 <get_config_payload_string+0x268>)
 8003d2e:	9310      	str	r3, [sp, #64]	; 0x40
 8003d30:	4b5c      	ldr	r3, [pc, #368]	; (8003ea4 <get_config_payload_string+0x278>)
 8003d32:	930f      	str	r3, [sp, #60]	; 0x3c
 8003d34:	4b5c      	ldr	r3, [pc, #368]	; (8003ea8 <get_config_payload_string+0x27c>)
 8003d36:	930e      	str	r3, [sp, #56]	; 0x38
 8003d38:	4b5c      	ldr	r3, [pc, #368]	; (8003eac <get_config_payload_string+0x280>)
 8003d3a:	930d      	str	r3, [sp, #52]	; 0x34
 8003d3c:	4b5c      	ldr	r3, [pc, #368]	; (8003eb0 <get_config_payload_string+0x284>)
 8003d3e:	930c      	str	r3, [sp, #48]	; 0x30
 8003d40:	4b5c      	ldr	r3, [pc, #368]	; (8003eb4 <get_config_payload_string+0x288>)
 8003d42:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d44:	4b54      	ldr	r3, [pc, #336]	; (8003e98 <get_config_payload_string+0x26c>)
 8003d46:	930a      	str	r3, [sp, #40]	; 0x28
 8003d48:	4b5b      	ldr	r3, [pc, #364]	; (8003eb8 <get_config_payload_string+0x28c>)
 8003d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8003d4c:	4b61      	ldr	r3, [pc, #388]	; (8003ed4 <get_config_payload_string+0x2a8>)
 8003d4e:	9308      	str	r3, [sp, #32]
 8003d50:	4b61      	ldr	r3, [pc, #388]	; (8003ed8 <get_config_payload_string+0x2ac>)
 8003d52:	9307      	str	r3, [sp, #28]
 8003d54:	4b50      	ldr	r3, [pc, #320]	; (8003e98 <get_config_payload_string+0x26c>)
 8003d56:	9306      	str	r3, [sp, #24]
 8003d58:	4b57      	ldr	r3, [pc, #348]	; (8003eb8 <get_config_payload_string+0x28c>)
 8003d5a:	9305      	str	r3, [sp, #20]
 8003d5c:	4b5f      	ldr	r3, [pc, #380]	; (8003edc <get_config_payload_string+0x2b0>)
 8003d5e:	9304      	str	r3, [sp, #16]
 8003d60:	4b5f      	ldr	r3, [pc, #380]	; (8003ee0 <get_config_payload_string+0x2b4>)
 8003d62:	9303      	str	r3, [sp, #12]
 8003d64:	4b5c      	ldr	r3, [pc, #368]	; (8003ed8 <get_config_payload_string+0x2ac>)
 8003d66:	9302      	str	r3, [sp, #8]
 8003d68:	4b58      	ldr	r3, [pc, #352]	; (8003ecc <get_config_payload_string+0x2a0>)
 8003d6a:	9301      	str	r3, [sp, #4]
 8003d6c:	4b4a      	ldr	r3, [pc, #296]	; (8003e98 <get_config_payload_string+0x26c>)
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	4b51      	ldr	r3, [pc, #324]	; (8003eb8 <get_config_payload_string+0x28c>)
 8003d72:	4a59      	ldr	r2, [pc, #356]	; (8003ed8 <get_config_payload_string+0x2ac>)
 8003d74:	4956      	ldr	r1, [pc, #344]	; (8003ed0 <get_config_payload_string+0x2a4>)
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f018 f846 	bl	801be08 <siprintf>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_voltage, "\n", dev_class_voltage_human, dev_system, unical_id, \
					dev_class_voltage, dev_class_voltage_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8003d80:	e083      	b.n	8003e8a <get_config_payload_string+0x25e>
		case POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 8003d82:	4b44      	ldr	r3, [pc, #272]	; (8003e94 <get_config_payload_string+0x268>)
 8003d84:	9310      	str	r3, [sp, #64]	; 0x40
 8003d86:	4b47      	ldr	r3, [pc, #284]	; (8003ea4 <get_config_payload_string+0x278>)
 8003d88:	930f      	str	r3, [sp, #60]	; 0x3c
 8003d8a:	4b47      	ldr	r3, [pc, #284]	; (8003ea8 <get_config_payload_string+0x27c>)
 8003d8c:	930e      	str	r3, [sp, #56]	; 0x38
 8003d8e:	4b47      	ldr	r3, [pc, #284]	; (8003eac <get_config_payload_string+0x280>)
 8003d90:	930d      	str	r3, [sp, #52]	; 0x34
 8003d92:	4b47      	ldr	r3, [pc, #284]	; (8003eb0 <get_config_payload_string+0x284>)
 8003d94:	930c      	str	r3, [sp, #48]	; 0x30
 8003d96:	4b47      	ldr	r3, [pc, #284]	; (8003eb4 <get_config_payload_string+0x288>)
 8003d98:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d9a:	4b3f      	ldr	r3, [pc, #252]	; (8003e98 <get_config_payload_string+0x26c>)
 8003d9c:	930a      	str	r3, [sp, #40]	; 0x28
 8003d9e:	4b46      	ldr	r3, [pc, #280]	; (8003eb8 <get_config_payload_string+0x28c>)
 8003da0:	9309      	str	r3, [sp, #36]	; 0x24
 8003da2:	4b50      	ldr	r3, [pc, #320]	; (8003ee4 <get_config_payload_string+0x2b8>)
 8003da4:	9308      	str	r3, [sp, #32]
 8003da6:	4b50      	ldr	r3, [pc, #320]	; (8003ee8 <get_config_payload_string+0x2bc>)
 8003da8:	9307      	str	r3, [sp, #28]
 8003daa:	4b3b      	ldr	r3, [pc, #236]	; (8003e98 <get_config_payload_string+0x26c>)
 8003dac:	9306      	str	r3, [sp, #24]
 8003dae:	4b42      	ldr	r3, [pc, #264]	; (8003eb8 <get_config_payload_string+0x28c>)
 8003db0:	9305      	str	r3, [sp, #20]
 8003db2:	4b4e      	ldr	r3, [pc, #312]	; (8003eec <get_config_payload_string+0x2c0>)
 8003db4:	9304      	str	r3, [sp, #16]
 8003db6:	4b4a      	ldr	r3, [pc, #296]	; (8003ee0 <get_config_payload_string+0x2b4>)
 8003db8:	9303      	str	r3, [sp, #12]
 8003dba:	4b4b      	ldr	r3, [pc, #300]	; (8003ee8 <get_config_payload_string+0x2bc>)
 8003dbc:	9302      	str	r3, [sp, #8]
 8003dbe:	4b43      	ldr	r3, [pc, #268]	; (8003ecc <get_config_payload_string+0x2a0>)
 8003dc0:	9301      	str	r3, [sp, #4]
 8003dc2:	4b35      	ldr	r3, [pc, #212]	; (8003e98 <get_config_payload_string+0x26c>)
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	4b3c      	ldr	r3, [pc, #240]	; (8003eb8 <get_config_payload_string+0x28c>)
 8003dc8:	4a47      	ldr	r2, [pc, #284]	; (8003ee8 <get_config_payload_string+0x2bc>)
 8003dca:	4941      	ldr	r1, [pc, #260]	; (8003ed0 <get_config_payload_string+0x2a4>)
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f018 f81b 	bl	801be08 <siprintf>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_power, "\n", dev_class_power_human, dev_system, unical_id, \
					dev_class_power, dev_class_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8003dd6:	e058      	b.n	8003e8a <get_config_payload_string+0x25e>
		case POWER_FACTOR_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 8003dd8:	4b2e      	ldr	r3, [pc, #184]	; (8003e94 <get_config_payload_string+0x268>)
 8003dda:	9310      	str	r3, [sp, #64]	; 0x40
 8003ddc:	4b31      	ldr	r3, [pc, #196]	; (8003ea4 <get_config_payload_string+0x278>)
 8003dde:	930f      	str	r3, [sp, #60]	; 0x3c
 8003de0:	4b31      	ldr	r3, [pc, #196]	; (8003ea8 <get_config_payload_string+0x27c>)
 8003de2:	930e      	str	r3, [sp, #56]	; 0x38
 8003de4:	4b31      	ldr	r3, [pc, #196]	; (8003eac <get_config_payload_string+0x280>)
 8003de6:	930d      	str	r3, [sp, #52]	; 0x34
 8003de8:	4b31      	ldr	r3, [pc, #196]	; (8003eb0 <get_config_payload_string+0x284>)
 8003dea:	930c      	str	r3, [sp, #48]	; 0x30
 8003dec:	4b31      	ldr	r3, [pc, #196]	; (8003eb4 <get_config_payload_string+0x288>)
 8003dee:	930b      	str	r3, [sp, #44]	; 0x2c
 8003df0:	4b29      	ldr	r3, [pc, #164]	; (8003e98 <get_config_payload_string+0x26c>)
 8003df2:	930a      	str	r3, [sp, #40]	; 0x28
 8003df4:	4b30      	ldr	r3, [pc, #192]	; (8003eb8 <get_config_payload_string+0x28c>)
 8003df6:	9309      	str	r3, [sp, #36]	; 0x24
 8003df8:	4b3d      	ldr	r3, [pc, #244]	; (8003ef0 <get_config_payload_string+0x2c4>)
 8003dfa:	9308      	str	r3, [sp, #32]
 8003dfc:	4b3d      	ldr	r3, [pc, #244]	; (8003ef4 <get_config_payload_string+0x2c8>)
 8003dfe:	9307      	str	r3, [sp, #28]
 8003e00:	4b25      	ldr	r3, [pc, #148]	; (8003e98 <get_config_payload_string+0x26c>)
 8003e02:	9306      	str	r3, [sp, #24]
 8003e04:	4b2c      	ldr	r3, [pc, #176]	; (8003eb8 <get_config_payload_string+0x28c>)
 8003e06:	9305      	str	r3, [sp, #20]
 8003e08:	4b3b      	ldr	r3, [pc, #236]	; (8003ef8 <get_config_payload_string+0x2cc>)
 8003e0a:	9304      	str	r3, [sp, #16]
 8003e0c:	4b34      	ldr	r3, [pc, #208]	; (8003ee0 <get_config_payload_string+0x2b4>)
 8003e0e:	9303      	str	r3, [sp, #12]
 8003e10:	4b38      	ldr	r3, [pc, #224]	; (8003ef4 <get_config_payload_string+0x2c8>)
 8003e12:	9302      	str	r3, [sp, #8]
 8003e14:	4b2d      	ldr	r3, [pc, #180]	; (8003ecc <get_config_payload_string+0x2a0>)
 8003e16:	9301      	str	r3, [sp, #4]
 8003e18:	4b1f      	ldr	r3, [pc, #124]	; (8003e98 <get_config_payload_string+0x26c>)
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	4b26      	ldr	r3, [pc, #152]	; (8003eb8 <get_config_payload_string+0x28c>)
 8003e1e:	4a35      	ldr	r2, [pc, #212]	; (8003ef4 <get_config_payload_string+0x2c8>)
 8003e20:	492b      	ldr	r1, [pc, #172]	; (8003ed0 <get_config_payload_string+0x2a4>)
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f017 fff0 	bl	801be08 <siprintf>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_power_factor, "\n", dev_class_power_factor_human, dev_system, unical_id, \
					dev_class_power_factor, dev_class_power_factor_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8003e2c:	e02d      	b.n	8003e8a <get_config_payload_string+0x25e>
		case CURRENT_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 8003e2e:	4b19      	ldr	r3, [pc, #100]	; (8003e94 <get_config_payload_string+0x268>)
 8003e30:	9310      	str	r3, [sp, #64]	; 0x40
 8003e32:	4b1c      	ldr	r3, [pc, #112]	; (8003ea4 <get_config_payload_string+0x278>)
 8003e34:	930f      	str	r3, [sp, #60]	; 0x3c
 8003e36:	4b1c      	ldr	r3, [pc, #112]	; (8003ea8 <get_config_payload_string+0x27c>)
 8003e38:	930e      	str	r3, [sp, #56]	; 0x38
 8003e3a:	4b1c      	ldr	r3, [pc, #112]	; (8003eac <get_config_payload_string+0x280>)
 8003e3c:	930d      	str	r3, [sp, #52]	; 0x34
 8003e3e:	4b1c      	ldr	r3, [pc, #112]	; (8003eb0 <get_config_payload_string+0x284>)
 8003e40:	930c      	str	r3, [sp, #48]	; 0x30
 8003e42:	4b1c      	ldr	r3, [pc, #112]	; (8003eb4 <get_config_payload_string+0x288>)
 8003e44:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e46:	4b14      	ldr	r3, [pc, #80]	; (8003e98 <get_config_payload_string+0x26c>)
 8003e48:	930a      	str	r3, [sp, #40]	; 0x28
 8003e4a:	4b1b      	ldr	r3, [pc, #108]	; (8003eb8 <get_config_payload_string+0x28c>)
 8003e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e4e:	4b2b      	ldr	r3, [pc, #172]	; (8003efc <get_config_payload_string+0x2d0>)
 8003e50:	9308      	str	r3, [sp, #32]
 8003e52:	4b2b      	ldr	r3, [pc, #172]	; (8003f00 <get_config_payload_string+0x2d4>)
 8003e54:	9307      	str	r3, [sp, #28]
 8003e56:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <get_config_payload_string+0x26c>)
 8003e58:	9306      	str	r3, [sp, #24]
 8003e5a:	4b17      	ldr	r3, [pc, #92]	; (8003eb8 <get_config_payload_string+0x28c>)
 8003e5c:	9305      	str	r3, [sp, #20]
 8003e5e:	4b29      	ldr	r3, [pc, #164]	; (8003f04 <get_config_payload_string+0x2d8>)
 8003e60:	9304      	str	r3, [sp, #16]
 8003e62:	4b1f      	ldr	r3, [pc, #124]	; (8003ee0 <get_config_payload_string+0x2b4>)
 8003e64:	9303      	str	r3, [sp, #12]
 8003e66:	4b26      	ldr	r3, [pc, #152]	; (8003f00 <get_config_payload_string+0x2d4>)
 8003e68:	9302      	str	r3, [sp, #8]
 8003e6a:	4b18      	ldr	r3, [pc, #96]	; (8003ecc <get_config_payload_string+0x2a0>)
 8003e6c:	9301      	str	r3, [sp, #4]
 8003e6e:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <get_config_payload_string+0x26c>)
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <get_config_payload_string+0x28c>)
 8003e74:	4a22      	ldr	r2, [pc, #136]	; (8003f00 <get_config_payload_string+0x2d4>)
 8003e76:	4916      	ldr	r1, [pc, #88]	; (8003ed0 <get_config_payload_string+0x2a4>)
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f017 ffc5 	bl	801be08 <siprintf>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_current, "\n", dev_class_current_human, dev_system, unical_id, \
					dev_class_current, dev_class_current_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8003e82:	e002      	b.n	8003e8a <get_config_payload_string+0x25e>

		default:
			return -1;
 8003e84:	f04f 33ff 	mov.w	r3, #4294967295
 8003e88:	e7ff      	b.n	8003e8a <get_config_payload_string+0x25e>
			break;
	}
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd90      	pop	{r4, r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20000888 	.word	0x20000888
 8003e98:	20000878 	.word	0x20000878
 8003e9c:	080226e8 	.word	0x080226e8
 8003ea0:	080228a8 	.word	0x080228a8
 8003ea4:	080211f0 	.word	0x080211f0
 8003ea8:	080211f8 	.word	0x080211f8
 8003eac:	08021200 	.word	0x08021200
 8003eb0:	08021210 	.word	0x08021210
 8003eb4:	08021220 	.word	0x08021220
 8003eb8:	080211c0 	.word	0x080211c0
 8003ebc:	08021230 	.word	0x08021230
 8003ec0:	080211b8 	.word	0x080211b8
 8003ec4:	08021234 	.word	0x08021234
 8003ec8:	0802123c 	.word	0x0802123c
 8003ecc:	08021260 	.word	0x08021260
 8003ed0:	08022a40 	.word	0x08022a40
 8003ed4:	08021268 	.word	0x08021268
 8003ed8:	080211c8 	.word	0x080211c8
 8003edc:	0802126c 	.word	0x0802126c
 8003ee0:	08021274 	.word	0x08021274
 8003ee4:	08021278 	.word	0x08021278
 8003ee8:	080211d0 	.word	0x080211d0
 8003eec:	0802127c 	.word	0x0802127c
 8003ef0:	08021284 	.word	0x08021284
 8003ef4:	080211d8 	.word	0x080211d8
 8003ef8:	08021288 	.word	0x08021288
 8003efc:	0802128c 	.word	0x0802128c
 8003f00:	080211e8 	.word	0x080211e8
 8003f04:	08021290 	.word	0x08021290

08003f08 <generate_status_topik>:
	strcpy(buff, "\0");
	sprintf(buff, subscr_topik_template, unical_id, obj_number);
	return 0;
}

int generate_status_topik(char * buff, mqtt_topik_string_type topik_type){
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	460b      	mov	r3, r1
 8003f12:	70fb      	strb	r3, [r7, #3]

	strcpy(buff, "\0");
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	701a      	strb	r2, [r3, #0]

	sprintf(buff, universal_status_topik_template, dev_system, unical_id, state_topik);
 8003f1a:	4b11      	ldr	r3, [pc, #68]	; (8003f60 <generate_status_topik+0x58>)
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	4b11      	ldr	r3, [pc, #68]	; (8003f64 <generate_status_topik+0x5c>)
 8003f20:	4a11      	ldr	r2, [pc, #68]	; (8003f68 <generate_status_topik+0x60>)
 8003f22:	4912      	ldr	r1, [pc, #72]	; (8003f6c <generate_status_topik+0x64>)
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f017 ff6f 	bl	801be08 <siprintf>

	switch (topik_type) {
 8003f2a:	78fb      	ldrb	r3, [r7, #3]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d002      	beq.n	8003f36 <generate_status_topik+0x2e>
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d006      	beq.n	8003f42 <generate_status_topik+0x3a>
 8003f34:	e00b      	b.n	8003f4e <generate_status_topik+0x46>
		case INPUT_TOPIK:
			sprintf(buff, input_status_topik_temp, unical_id);
 8003f36:	4a0b      	ldr	r2, [pc, #44]	; (8003f64 <generate_status_topik+0x5c>)
 8003f38:	490d      	ldr	r1, [pc, #52]	; (8003f70 <generate_status_topik+0x68>)
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f017 ff64 	bl	801be08 <siprintf>
			break;
 8003f40:	e008      	b.n	8003f54 <generate_status_topik+0x4c>

		case OUTPUT_TOPIK:
			sprintf(buff, switch_status_topik_temp, unical_id);
 8003f42:	4a08      	ldr	r2, [pc, #32]	; (8003f64 <generate_status_topik+0x5c>)
 8003f44:	490b      	ldr	r1, [pc, #44]	; (8003f74 <generate_status_topik+0x6c>)
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f017 ff5e 	bl	801be08 <siprintf>
			break;
 8003f4c:	e002      	b.n	8003f54 <generate_status_topik+0x4c>

		default:
			return -1;
 8003f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f52:	e000      	b.n	8003f56 <generate_status_topik+0x4e>
			break;
	}

	return 0;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	08021260 	.word	0x08021260
 8003f64:	20000878 	.word	0x20000878
 8003f68:	080211c0 	.word	0x080211c0
 8003f6c:	080212b8 	.word	0x080212b8
 8003f70:	20000094 	.word	0x20000094
 8003f74:	200000a4 	.word	0x200000a4

08003f78 <generate_key_value_JSON>:

void generate_key_value_JSON(char * buf, char * key, float value){
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af02      	add	r7, sp, #8
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	ed87 0a01 	vstr	s0, [r7, #4]

	sprintf(buf, key_value_float_JSON_template, key, value);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fc faf6 	bl	8000578 <__aeabi_f2d>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	e9cd 2300 	strd	r2, r3, [sp]
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	4904      	ldr	r1, [pc, #16]	; (8003fa8 <generate_key_value_JSON+0x30>)
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f017 ff35 	bl	801be08 <siprintf>
}
 8003f9e:	bf00      	nop
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	080212c4 	.word	0x080212c4

08003fac <InitHLW8032>:
uint32_t	PFData = 0;
uint32_t	PulsCountFor1kWh;
uint16_t 	PF_reg, PF_reg_old;
uint32_t	test_flag = 0;

void InitHLW8032(uint32_t VolR1, uint32_t VolR2, float CurrentShuntR){
 8003fac:	b5b0      	push	{r4, r5, r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	ed87 0a01 	vstr	s0, [r7, #4]

	//VolR1 - Resistanse on OM for first resistor
	//VolR2 - Resistanse on OM for second resistor
	//ShuntR - Resistanse in OM for current shunt resistor

	VF = VolR1 / (VolR2 * 1000.0);
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f7fc faba 	bl	8000534 <__aeabi_ui2d>
 8003fc0:	4604      	mov	r4, r0
 8003fc2:	460d      	mov	r5, r1
 8003fc4:	68b8      	ldr	r0, [r7, #8]
 8003fc6:	f7fc fab5 	bl	8000534 <__aeabi_ui2d>
 8003fca:	f04f 0200 	mov.w	r2, #0
 8003fce:	4b17      	ldr	r3, [pc, #92]	; (800402c <InitHLW8032+0x80>)
 8003fd0:	f7fc fb2a 	bl	8000628 <__aeabi_dmul>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4620      	mov	r0, r4
 8003fda:	4629      	mov	r1, r5
 8003fdc:	f7fc fc4e 	bl	800087c <__aeabi_ddiv>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	f7fc fe16 	bl	8000c18 <__aeabi_d2f>
 8003fec:	4603      	mov	r3, r0
 8003fee:	4a10      	ldr	r2, [pc, #64]	; (8004030 <InitHLW8032+0x84>)
 8003ff0:	6013      	str	r3, [r2, #0]
	CF = 1.0 / (CurrentShuntR * 1000.0);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fc fac0 	bl	8000578 <__aeabi_f2d>
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	; (800402c <InitHLW8032+0x80>)
 8003ffe:	f7fc fb13 	bl	8000628 <__aeabi_dmul>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	f04f 0000 	mov.w	r0, #0
 800400a:	490a      	ldr	r1, [pc, #40]	; (8004034 <InitHLW8032+0x88>)
 800400c:	f7fc fc36 	bl	800087c <__aeabi_ddiv>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4610      	mov	r0, r2
 8004016:	4619      	mov	r1, r3
 8004018:	f7fc fdfe 	bl	8000c18 <__aeabi_d2f>
 800401c:	4603      	mov	r3, r0
 800401e:	4a06      	ldr	r2, [pc, #24]	; (8004038 <InitHLW8032+0x8c>)
 8004020:	6013      	str	r3, [r2, #0]
}
 8004022:	bf00      	nop
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bdb0      	pop	{r4, r5, r7, pc}
 800402a:	bf00      	nop
 800402c:	408f4000 	.word	0x408f4000
 8004030:	200000b4 	.word	0x200000b4
 8004034:	3ff00000 	.word	0x3ff00000
 8004038:	200000b8 	.word	0x200000b8

0800403c <Checksum>:

	VF = Data;

}

uint8_t Checksum(char * string){
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
	uint8_t i, tmp;
	char byte;

	byte = 0;
 8004044:	2300      	movs	r3, #0
 8004046:	73bb      	strb	r3, [r7, #14]
	for ( i = 2; i <= 22; i++){
 8004048:	2302      	movs	r3, #2
 800404a:	73fb      	strb	r3, [r7, #15]
 800404c:	e00e      	b.n	800406c <Checksum+0x30>
		tmp = string[i];
 800404e:	7bfb      	ldrb	r3, [r7, #15]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	4413      	add	r3, r2
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	737b      	strb	r3, [r7, #13]
		byte = byte + string[i];
 8004058:	7bfb      	ldrb	r3, [r7, #15]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	4413      	add	r3, r2
 800405e:	781a      	ldrb	r2, [r3, #0]
 8004060:	7bbb      	ldrb	r3, [r7, #14]
 8004062:	4413      	add	r3, r2
 8004064:	73bb      	strb	r3, [r7, #14]
	for ( i = 2; i <= 22; i++){
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	3301      	adds	r3, #1
 800406a:	73fb      	strb	r3, [r7, #15]
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	2b16      	cmp	r3, #22
 8004070:	d9ed      	bls.n	800404e <Checksum+0x12>
	}
	if (byte == string[23])
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3317      	adds	r3, #23
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	7bba      	ldrb	r2, [r7, #14]
 800407a:	429a      	cmp	r2, r3
 800407c:	d101      	bne.n	8004082 <Checksum+0x46>
	{
		return 1;
 800407e:	2301      	movs	r3, #1
 8004080:	e000      	b.n	8004084 <Checksum+0x48>
	}
	return 0;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <RecvRawString>:


int RecvRawString(const unsigned char * string){
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]

	if (!strcmp(string+1, 0x5A)){
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3301      	adds	r3, #1
 800409c:	215a      	movs	r1, #90	; 0x5a
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fc f89e 	bl	80001e0 <strcmp>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d102      	bne.n	80040b0 <RecvRawString+0x20>
		return -1; //error code
 80040aa:	f04f 33ff 	mov.w	r3, #4294967295
 80040ae:	e0b6      	b.n	800421e <RecvRawString+0x18e>
	}
	//if(string[1] =! 0x5A){
	//	return -1; //error code
	//}

	if (!Checksum(string)){
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff ffc3 	bl	800403c <Checksum>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d102      	bne.n	80040c2 <RecvRawString+0x32>
		return -2; //Checksum Error
 80040bc:	f06f 0301 	mvn.w	r3, #1
 80040c0:	e0ad      	b.n	800421e <RecvRawString+0x18e>
	}

	VolPar = ((uint32_t)string[2] << 16) + ((uint32_t)string[3] << 8) + string[4];
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3302      	adds	r3, #2
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	041a      	lsls	r2, r3, #16
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3303      	adds	r3, #3
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	4413      	add	r3, r2
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	3204      	adds	r2, #4
 80040d8:	7812      	ldrb	r2, [r2, #0]
 80040da:	4413      	add	r3, r2
 80040dc:	4a52      	ldr	r2, [pc, #328]	; (8004228 <RecvRawString+0x198>)
 80040de:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20],6) == 1){
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3314      	adds	r3, #20
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	099b      	lsrs	r3, r3, #6
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d01b      	beq.n	800412a <RecvRawString+0x9a>
		VolData = ((uint32_t)string[5]  <<16) + ((uint32_t)string[6] <<8) + string[7];
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3305      	adds	r3, #5
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	041a      	lsls	r2, r3, #16
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3306      	adds	r3, #6
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	021b      	lsls	r3, r3, #8
 8004102:	4413      	add	r3, r2
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	3207      	adds	r2, #7
 8004108:	7812      	ldrb	r2, [r2, #0]
 800410a:	4413      	add	r3, r2
 800410c:	4a47      	ldr	r2, [pc, #284]	; (800422c <RecvRawString+0x19c>)
 800410e:	6013      	str	r3, [r2, #0]
		VoltageAnalog = VolPar / VolData;
 8004110:	4b45      	ldr	r3, [pc, #276]	; (8004228 <RecvRawString+0x198>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	4b45      	ldr	r3, [pc, #276]	; (800422c <RecvRawString+0x19c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	fbb2 f3f3 	udiv	r3, r2, r3
 800411c:	ee07 3a90 	vmov	s15, r3
 8004120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004124:	4b42      	ldr	r3, [pc, #264]	; (8004230 <RecvRawString+0x1a0>)
 8004126:	edc3 7a00 	vstr	s15, [r3]

	}

	CurrentPar = ((uint32_t)string[8]  <<16) + ((uint32_t)string[9] <<8) + string[10];
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	3308      	adds	r3, #8
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	041a      	lsls	r2, r3, #16
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3309      	adds	r3, #9
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	021b      	lsls	r3, r3, #8
 800413a:	4413      	add	r3, r2
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	320a      	adds	r2, #10
 8004140:	7812      	ldrb	r2, [r2, #0]
 8004142:	4413      	add	r3, r2
 8004144:	4a3b      	ldr	r2, [pc, #236]	; (8004234 <RecvRawString+0x1a4>)
 8004146:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20], 5) == 1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3314      	adds	r3, #20
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	b2db      	uxtb	r3, r3
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00e      	beq.n	8004178 <RecvRawString+0xe8>
	{
		CurrentData = ((uint32_t)string[11]  <<16) + ((uint32_t)string[12] <<8) + string[13];
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	330b      	adds	r3, #11
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	041a      	lsls	r2, r3, #16
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	330c      	adds	r3, #12
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	021b      	lsls	r3, r3, #8
 800416a:	4413      	add	r3, r2
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	320d      	adds	r2, #13
 8004170:	7812      	ldrb	r2, [r2, #0]
 8004172:	4413      	add	r3, r2
 8004174:	4a30      	ldr	r2, [pc, #192]	; (8004238 <RecvRawString+0x1a8>)
 8004176:	6013      	str	r3, [r2, #0]
	}
	PowerPar = ((uint32_t)string[14]  <<16) + ((uint32_t)string[15] <<8) + string[16];
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	330e      	adds	r3, #14
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	041a      	lsls	r2, r3, #16
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	330f      	adds	r3, #15
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	021b      	lsls	r3, r3, #8
 8004188:	4413      	add	r3, r2
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	3210      	adds	r2, #16
 800418e:	7812      	ldrb	r2, [r2, #0]
 8004190:	4413      	add	r3, r2
 8004192:	4a2a      	ldr	r2, [pc, #168]	; (800423c <RecvRawString+0x1ac>)
 8004194:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20], 4) == 1)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	3314      	adds	r3, #20
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	091b      	lsrs	r3, r3, #4
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00e      	beq.n	80041c6 <RecvRawString+0x136>
	{
		PowerData = ((uint32_t)string[17]  <<16) + ((uint32_t)string[18] <<8) + string[19];
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3311      	adds	r3, #17
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	041a      	lsls	r2, r3, #16
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3312      	adds	r3, #18
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	021b      	lsls	r3, r3, #8
 80041b8:	4413      	add	r3, r2
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	3213      	adds	r2, #19
 80041be:	7812      	ldrb	r2, [r2, #0]
 80041c0:	4413      	add	r3, r2
 80041c2:	4a1f      	ldr	r2, [pc, #124]	; (8004240 <RecvRawString+0x1b0>)
 80041c4:	6013      	str	r3, [r2, #0]
	}

	PF_reg = ((uint32_t)string[21] <<8) + string[22];
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3315      	adds	r3, #21
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	021b      	lsls	r3, r3, #8
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3316      	adds	r3, #22
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	b29b      	uxth	r3, r3
 80041da:	4413      	add	r3, r2
 80041dc:	b29a      	uxth	r2, r3
 80041de:	4b19      	ldr	r3, [pc, #100]	; (8004244 <RecvRawString+0x1b4>)
 80041e0:	801a      	strh	r2, [r3, #0]

	if(bitRead(string[20], 7) == 1)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3314      	adds	r3, #20
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	09db      	lsrs	r3, r3, #7
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d004      	beq.n	80041fe <RecvRawString+0x16e>
	{
		PFData++;
 80041f4:	4b14      	ldr	r3, [pc, #80]	; (8004248 <RecvRawString+0x1b8>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3301      	adds	r3, #1
 80041fa:	4a13      	ldr	r2, [pc, #76]	; (8004248 <RecvRawString+0x1b8>)
 80041fc:	6013      	str	r3, [r2, #0]
	}

	//TODO Когда переполняется регистр, выставляется флаг и обнудяется регистр, проверить, можем ли мы ловить этот флаг еще и не совпадением старого и нового значения регистров.
	if(PF_reg_old > PF_reg){
 80041fe:	4b13      	ldr	r3, [pc, #76]	; (800424c <RecvRawString+0x1bc>)
 8004200:	881a      	ldrh	r2, [r3, #0]
 8004202:	4b10      	ldr	r3, [pc, #64]	; (8004244 <RecvRawString+0x1b4>)
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	429a      	cmp	r2, r3
 8004208:	d904      	bls.n	8004214 <RecvRawString+0x184>
		test_flag++;
 800420a:	4b11      	ldr	r3, [pc, #68]	; (8004250 <RecvRawString+0x1c0>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3301      	adds	r3, #1
 8004210:	4a0f      	ldr	r2, [pc, #60]	; (8004250 <RecvRawString+0x1c0>)
 8004212:	6013      	str	r3, [r2, #0]
	}

	PF_reg_old = PF_reg;
 8004214:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <RecvRawString+0x1b4>)
 8004216:	881a      	ldrh	r2, [r3, #0]
 8004218:	4b0c      	ldr	r3, [pc, #48]	; (800424c <RecvRawString+0x1bc>)
 800421a:	801a      	strh	r2, [r3, #0]

	return 0;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	2000089c 	.word	0x2000089c
 800422c:	200008a0 	.word	0x200008a0
 8004230:	200008b4 	.word	0x200008b4
 8004234:	200008ac 	.word	0x200008ac
 8004238:	200008b0 	.word	0x200008b0
 800423c:	200008a4 	.word	0x200008a4
 8004240:	200008a8 	.word	0x200008a8
 8004244:	200008bc 	.word	0x200008bc
 8004248:	200008b8 	.word	0x200008b8
 800424c:	200008be 	.word	0x200008be
 8004250:	200008c0 	.word	0x200008c0

08004254 <GetVolRaw>:

float GetVolRaw(void){
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0

	if ( VolData == 0){
 8004258:	4b0e      	ldr	r3, [pc, #56]	; (8004294 <GetVolRaw+0x40>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d102      	bne.n	8004266 <GetVolRaw+0x12>
		return 0;
 8004260:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8004298 <GetVolRaw+0x44>
 8004264:	e00d      	b.n	8004282 <GetVolRaw+0x2e>
	}

	return VolPar / (float)VolData;
 8004266:	4b0d      	ldr	r3, [pc, #52]	; (800429c <GetVolRaw+0x48>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	ee07 3a90 	vmov	s15, r3
 800426e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004272:	4b08      	ldr	r3, [pc, #32]	; (8004294 <GetVolRaw+0x40>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	ee07 3a90 	vmov	s15, r3
 800427a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800427e:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 8004282:	eef0 7a66 	vmov.f32	s15, s13
 8004286:	eeb0 0a67 	vmov.f32	s0, s15
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	200008a0 	.word	0x200008a0
 8004298:	00000000 	.word	0x00000000
 800429c:	2000089c 	.word	0x2000089c

080042a0 <GetVoltage>:

float GetVoltage(void){
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0

	float tmp;
	float RealVolt;

	tmp = GetVolRaw();
 80042a6:	f7ff ffd5 	bl	8004254 <GetVolRaw>
 80042aa:	ed87 0a01 	vstr	s0, [r7, #4]
	RealVolt = tmp * VF;
 80042ae:	4b08      	ldr	r3, [pc, #32]	; (80042d0 <GetVoltage+0x30>)
 80042b0:	edd3 7a00 	vldr	s15, [r3]
 80042b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80042b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042bc:	edc7 7a00 	vstr	s15, [r7]
	return RealVolt;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	ee07 3a90 	vmov	s15, r3
}
 80042c6:	eeb0 0a67 	vmov.f32	s0, s15
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	200000b4 	.word	0x200000b4

080042d4 <GetCurrentRaw>:

float GetCurrentRaw(void){
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0

	if ( CurrentData == 0){
 80042d8:	4b0e      	ldr	r3, [pc, #56]	; (8004314 <GetCurrentRaw+0x40>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d102      	bne.n	80042e6 <GetCurrentRaw+0x12>
		return 0;
 80042e0:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8004318 <GetCurrentRaw+0x44>
 80042e4:	e00d      	b.n	8004302 <GetCurrentRaw+0x2e>
	}

	return CurrentPar / (float)CurrentData;
 80042e6:	4b0d      	ldr	r3, [pc, #52]	; (800431c <GetCurrentRaw+0x48>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	ee07 3a90 	vmov	s15, r3
 80042ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042f2:	4b08      	ldr	r3, [pc, #32]	; (8004314 <GetCurrentRaw+0x40>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	ee07 3a90 	vmov	s15, r3
 80042fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 8004302:	eef0 7a66 	vmov.f32	s15, s13
 8004306:	eeb0 0a67 	vmov.f32	s0, s15
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	200008b0 	.word	0x200008b0
 8004318:	00000000 	.word	0x00000000
 800431c:	200008ac 	.word	0x200008ac

08004320 <GetCurrent>:

float GetCurrent(void){
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0

	float tmp;
	float RaelCurrent;

	tmp = GetCurrentRaw();
 8004326:	f7ff ffd5 	bl	80042d4 <GetCurrentRaw>
 800432a:	ed87 0a01 	vstr	s0, [r7, #4]
	RaelCurrent = tmp * CF;
 800432e:	4b08      	ldr	r3, [pc, #32]	; (8004350 <GetCurrent+0x30>)
 8004330:	edd3 7a00 	vldr	s15, [r3]
 8004334:	ed97 7a01 	vldr	s14, [r7, #4]
 8004338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800433c:	edc7 7a00 	vstr	s15, [r7]
	return RaelCurrent;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	ee07 3a90 	vmov	s15, r3
}
 8004346:	eeb0 0a67 	vmov.f32	s0, s15
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	200000b8 	.word	0x200000b8

08004354 <GetActivePower>:

float GetActivePower(void){
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
	float tmp;

	if (PowerData == 0){
 800435a:	4b13      	ldr	r3, [pc, #76]	; (80043a8 <GetActivePower+0x54>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d102      	bne.n	8004368 <GetActivePower+0x14>
		return 0;
 8004362:	f04f 0300 	mov.w	r3, #0
 8004366:	e016      	b.n	8004396 <GetActivePower+0x42>
	}
	tmp = (float)(PowerPar / PowerData) * VF * CF;
 8004368:	4b10      	ldr	r3, [pc, #64]	; (80043ac <GetActivePower+0x58>)
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	4b0e      	ldr	r3, [pc, #56]	; (80043a8 <GetActivePower+0x54>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	fbb2 f3f3 	udiv	r3, r2, r3
 8004374:	ee07 3a90 	vmov	s15, r3
 8004378:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800437c:	4b0c      	ldr	r3, [pc, #48]	; (80043b0 <GetActivePower+0x5c>)
 800437e:	edd3 7a00 	vldr	s15, [r3]
 8004382:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004386:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <GetActivePower+0x60>)
 8004388:	edd3 7a00 	vldr	s15, [r3]
 800438c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004390:	edc7 7a01 	vstr	s15, [r7, #4]
	return tmp;
 8004394:	687b      	ldr	r3, [r7, #4]
}
 8004396:	ee07 3a90 	vmov	s15, r3
 800439a:	eeb0 0a67 	vmov.f32	s0, s15
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	200008a8 	.word	0x200008a8
 80043ac:	200008a4 	.word	0x200008a4
 80043b0:	200000b4 	.word	0x200000b4
 80043b4:	200000b8 	.word	0x200000b8

080043b8 <GetApparentPower>:

float GetApparentPower(void){
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0

	float voltage;
	float current;
	float ApparentPower;

	voltage = GetVoltage();
 80043be:	f7ff ff6f 	bl	80042a0 <GetVoltage>
 80043c2:	ed87 0a03 	vstr	s0, [r7, #12]
	current = GetCurrent();
 80043c6:	f7ff ffab 	bl	8004320 <GetCurrent>
 80043ca:	ed87 0a02 	vstr	s0, [r7, #8]
	ApparentPower = voltage * current;
 80043ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80043d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80043d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043da:	edc7 7a01 	vstr	s15, [r7, #4]

	return ApparentPower;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	ee07 3a90 	vmov	s15, r3
}
 80043e4:	eeb0 0a67 	vmov.f32	s0, s15
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <PowerFactor>:

float PowerFactor(void){
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0

	float ActivePower;
	float ApparentPower;
	float PowerFactor;

	ActivePower 	= GetActivePower();
 80043f4:	f7ff ffae 	bl	8004354 <GetActivePower>
 80043f8:	ed87 0a03 	vstr	s0, [r7, #12]
	ApparentPower	= GetApparentPower();
 80043fc:	f7ff ffdc 	bl	80043b8 <GetApparentPower>
 8004400:	ed87 0a02 	vstr	s0, [r7, #8]
	if (ApparentPower == 0) return 1;
 8004404:	edd7 7a02 	vldr	s15, [r7, #8]
 8004408:	eef5 7a40 	vcmp.f32	s15, #0.0
 800440c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004410:	d102      	bne.n	8004418 <PowerFactor+0x2a>
 8004412:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004416:	e014      	b.n	8004442 <PowerFactor+0x54>
	if (ActivePower > ApparentPower) return 1.000000000000;
 8004418:	ed97 7a03 	vldr	s14, [r7, #12]
 800441c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004420:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004428:	dd02      	ble.n	8004430 <PowerFactor+0x42>
 800442a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800442e:	e008      	b.n	8004442 <PowerFactor+0x54>
	PowerFactor		= ActivePower / ApparentPower;
 8004430:	edd7 6a03 	vldr	s13, [r7, #12]
 8004434:	ed97 7a02 	vldr	s14, [r7, #8]
 8004438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800443c:	edc7 7a01 	vstr	s15, [r7, #4]

	return PowerFactor;
 8004440:	687b      	ldr	r3, [r7, #4]
}
 8004442:	ee07 3a90 	vmov	s15, r3
 8004446:	eeb0 0a67 	vmov.f32	s0, s15
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <GetKWh>:

uint32_t GetPulsCnF1kWh(){

}

float GetKWh(void){
 8004450:	b5b0      	push	{r4, r5, r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
	float pulseCountFor1kWh;
	float kWh;
	int PFcount;


	apparentPower		= GetApparentPower();
 8004456:	f7ff ffaf 	bl	80043b8 <GetApparentPower>
 800445a:	ed87 0a03 	vstr	s0, [r7, #12]
	pulseCountFor1kWh	= (1.0/PowerPar) * (1.0/(VF * CF)) * 1000000000.0 * 3600.0;
 800445e:	4b32      	ldr	r3, [pc, #200]	; (8004528 <GetKWh+0xd8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f7fc f866 	bl	8000534 <__aeabi_ui2d>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	f04f 0000 	mov.w	r0, #0
 8004470:	492e      	ldr	r1, [pc, #184]	; (800452c <GetKWh+0xdc>)
 8004472:	f7fc fa03 	bl	800087c <__aeabi_ddiv>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4614      	mov	r4, r2
 800447c:	461d      	mov	r5, r3
 800447e:	4b2c      	ldr	r3, [pc, #176]	; (8004530 <GetKWh+0xe0>)
 8004480:	ed93 7a00 	vldr	s14, [r3]
 8004484:	4b2b      	ldr	r3, [pc, #172]	; (8004534 <GetKWh+0xe4>)
 8004486:	edd3 7a00 	vldr	s15, [r3]
 800448a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800448e:	ee17 0a90 	vmov	r0, s15
 8004492:	f7fc f871 	bl	8000578 <__aeabi_f2d>
 8004496:	4602      	mov	r2, r0
 8004498:	460b      	mov	r3, r1
 800449a:	f04f 0000 	mov.w	r0, #0
 800449e:	4923      	ldr	r1, [pc, #140]	; (800452c <GetKWh+0xdc>)
 80044a0:	f7fc f9ec 	bl	800087c <__aeabi_ddiv>
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4620      	mov	r0, r4
 80044aa:	4629      	mov	r1, r5
 80044ac:	f7fc f8bc 	bl	8000628 <__aeabi_dmul>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4610      	mov	r0, r2
 80044b6:	4619      	mov	r1, r3
 80044b8:	a317      	add	r3, pc, #92	; (adr r3, 8004518 <GetKWh+0xc8>)
 80044ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044be:	f7fc f8b3 	bl	8000628 <__aeabi_dmul>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4610      	mov	r0, r2
 80044c8:	4619      	mov	r1, r3
 80044ca:	a315      	add	r3, pc, #84	; (adr r3, 8004520 <GetKWh+0xd0>)
 80044cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d0:	f7fc f8aa 	bl	8000628 <__aeabi_dmul>
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	4610      	mov	r0, r2
 80044da:	4619      	mov	r1, r3
 80044dc:	f7fc fb9c 	bl	8000c18 <__aeabi_d2f>
 80044e0:	4603      	mov	r3, r0
 80044e2:	60bb      	str	r3, [r7, #8]
	PFcount				= PFData * 65536 + PF_reg;
 80044e4:	4b14      	ldr	r3, [pc, #80]	; (8004538 <GetKWh+0xe8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	041b      	lsls	r3, r3, #16
 80044ea:	4a14      	ldr	r2, [pc, #80]	; (800453c <GetKWh+0xec>)
 80044ec:	8812      	ldrh	r2, [r2, #0]
 80044ee:	4413      	add	r3, r2
 80044f0:	607b      	str	r3, [r7, #4]
	//kWh					= (PFData * PF_reg) / (float)pulseCountFor1kWh;
	kWh					= PFcount / (float)pulseCountFor1kWh;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	ee07 3a90 	vmov	s15, r3
 80044f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80044fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8004500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004504:	edc7 7a00 	vstr	s15, [r7]

	return kWh;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	ee07 3a90 	vmov	s15, r3
}
 800450e:	eeb0 0a67 	vmov.f32	s0, s15
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bdb0      	pop	{r4, r5, r7, pc}
 8004518:	00000000 	.word	0x00000000
 800451c:	41cdcd65 	.word	0x41cdcd65
 8004520:	00000000 	.word	0x00000000
 8004524:	40ac2000 	.word	0x40ac2000
 8004528:	200008a4 	.word	0x200008a4
 800452c:	3ff00000 	.word	0x3ff00000
 8004530:	200000b4 	.word	0x200000b4
 8004534:	200000b8 	.word	0x200000b8
 8004538:	200008b8 	.word	0x200008b8
 800453c:	200008bc 	.word	0x200008bc

08004540 <function_prototype>:
uint8_t sFLASH_ReadByte(void);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
 8004544:	bf00      	nop
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
	...

08004550 <SPI_flash_reg_cb>:

//void (*flash_conf.select_chip)() = &function_prototype;

/* Private functions ---------------------------------------------------------*/
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), uint8_t (*receive_byte)(void), void (*send_byte)(uint8_t)){
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	603b      	str	r3, [r7, #0]

	if (chip_select){
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <SPI_flash_reg_cb+0x1c>
		flash_conf.select_chip		= chip_select;
 8004564:	4a0e      	ldr	r2, [pc, #56]	; (80045a0 <SPI_flash_reg_cb+0x50>)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	60d3      	str	r3, [r2, #12]
 800456a:	e002      	b.n	8004572 <SPI_flash_reg_cb+0x22>
	}else{
		flash_conf.select_chip		= function_prototype;
 800456c:	4b0c      	ldr	r3, [pc, #48]	; (80045a0 <SPI_flash_reg_cb+0x50>)
 800456e:	4a0d      	ldr	r2, [pc, #52]	; (80045a4 <SPI_flash_reg_cb+0x54>)
 8004570:	60da      	str	r2, [r3, #12]
	}
	if (chip_deselect){
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <SPI_flash_reg_cb+0x30>
		flash_conf.deselect_chip	= chip_deselect;
 8004578:	4a09      	ldr	r2, [pc, #36]	; (80045a0 <SPI_flash_reg_cb+0x50>)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	6113      	str	r3, [r2, #16]
 800457e:	e002      	b.n	8004586 <SPI_flash_reg_cb+0x36>
	}else{
		flash_conf.deselect_chip	= function_prototype;
 8004580:	4b07      	ldr	r3, [pc, #28]	; (80045a0 <SPI_flash_reg_cb+0x50>)
 8004582:	4a08      	ldr	r2, [pc, #32]	; (80045a4 <SPI_flash_reg_cb+0x54>)
 8004584:	611a      	str	r2, [r3, #16]
	}

	flash_conf.receive_byte		= receive_byte;
 8004586:	4a06      	ldr	r2, [pc, #24]	; (80045a0 <SPI_flash_reg_cb+0x50>)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6053      	str	r3, [r2, #4]
	flash_conf.send_byte		= send_byte;
 800458c:	4a04      	ldr	r2, [pc, #16]	; (80045a0 <SPI_flash_reg_cb+0x50>)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	6093      	str	r3, [r2, #8]

}
 8004592:	bf00      	nop
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	200008c4 	.word	0x200008c4
 80045a4:	08004541 	.word	0x08004541

080045a8 <sFLASH_Reset>:
//	flash_conf.deselect_chip = FlashChipDeselect;
//	flash_conf.receive_byte = SPI_ReceiveByte;
//	flash_conf.send_byte = SPI_SendByte;
}

void sFLASH_Reset(void){
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
//    cs_set();
//    tx_buf[0] = W25_ENABLE_RESET;
//    tx_buf[1] = W25_RESET;
//    SPI1_Send(tx_buf, 2);
//    cs_reset();
    sFLASH_CS_LOW();
 80045ac:	f000 f89c 	bl	80046e8 <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 80045b0:	2066      	movs	r0, #102	; 0x66
 80045b2:	f000 fa1f 	bl	80049f4 <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 80045b6:	2099      	movs	r0, #153	; 0x99
 80045b8:	f000 fa1c 	bl	80049f4 <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 80045bc:	f000 f89e 	bl	80046fc <sFLASH_CS_HIGH>
}
 80045c0:	bf00      	nop
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <sFLASH_GetInfo>:
    HAL_Delay(100);
    unsigned int id = W25_Read_ID();

}

struct SPI_flash_info sFLASH_GetInfo(void){
 80045c4:	b590      	push	{r4, r7, lr}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
	uint32_t flash_id;

//	HAL_Delay(100);
	sFLASH_Reset();
 80045cc:	f7ff ffec 	bl	80045a8 <sFLASH_Reset>
//	HAL_Delay(100);
//	HAL_Delay(100);

	flash_id = sFLASH_ReadID();
 80045d0:	f000 f9d2 	bl	8004978 <sFLASH_ReadID>
 80045d4:	60f8      	str	r0, [r7, #12]

	switch (flash_id) {
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4a3e      	ldr	r2, [pc, #248]	; (80046d4 <sFLASH_GetInfo+0x110>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d03f      	beq.n	800465e <sFLASH_GetInfo+0x9a>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4a3c      	ldr	r2, [pc, #240]	; (80046d4 <sFLASH_GetInfo+0x110>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d867      	bhi.n	80046b6 <sFLASH_GetInfo+0xf2>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	4a3b      	ldr	r2, [pc, #236]	; (80046d8 <sFLASH_GetInfo+0x114>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d021      	beq.n	8004632 <sFLASH_GetInfo+0x6e>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4a39      	ldr	r2, [pc, #228]	; (80046d8 <sFLASH_GetInfo+0x114>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d85f      	bhi.n	80046b6 <sFLASH_GetInfo+0xf2>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4a38      	ldr	r2, [pc, #224]	; (80046dc <sFLASH_GetInfo+0x118>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d045      	beq.n	800468a <sFLASH_GetInfo+0xc6>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	4a37      	ldr	r2, [pc, #220]	; (80046e0 <sFLASH_GetInfo+0x11c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d157      	bne.n	80046b6 <sFLASH_GetInfo+0xf2>
		case sFLASH_W25Q16BV_ID:
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 8004606:	4b37      	ldr	r3, [pc, #220]	; (80046e4 <sFLASH_GetInfo+0x120>)
 8004608:	4a35      	ldr	r2, [pc, #212]	; (80046e0 <sFLASH_GetInfo+0x11c>)
 800460a:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 800460c:	4b35      	ldr	r3, [pc, #212]	; (80046e4 <sFLASH_GetInfo+0x120>)
 800460e:	2201      	movs	r2, #1
 8004610:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8004612:	4b34      	ldr	r3, [pc, #208]	; (80046e4 <sFLASH_GetInfo+0x120>)
 8004614:	2201      	movs	r2, #1
 8004616:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8004618:	4b32      	ldr	r3, [pc, #200]	; (80046e4 <sFLASH_GetInfo+0x120>)
 800461a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800461e:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8004620:	4b30      	ldr	r3, [pc, #192]	; (80046e4 <sFLASH_GetInfo+0x120>)
 8004622:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004626:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 512;
 8004628:	4b2e      	ldr	r3, [pc, #184]	; (80046e4 <sFLASH_GetInfo+0x120>)
 800462a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800462e:	819a      	strh	r2, [r3, #12]
			break;
 8004630:	e045      	b.n	80046be <sFLASH_GetInfo+0xfa>
		case sFLASH_W25Q32BV_ID:
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 8004632:	4b2c      	ldr	r3, [pc, #176]	; (80046e4 <sFLASH_GetInfo+0x120>)
 8004634:	4a28      	ldr	r2, [pc, #160]	; (80046d8 <sFLASH_GetInfo+0x114>)
 8004636:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8004638:	4b2a      	ldr	r3, [pc, #168]	; (80046e4 <sFLASH_GetInfo+0x120>)
 800463a:	2201      	movs	r2, #1
 800463c:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 800463e:	4b29      	ldr	r3, [pc, #164]	; (80046e4 <sFLASH_GetInfo+0x120>)
 8004640:	2201      	movs	r2, #1
 8004642:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8004644:	4b27      	ldr	r3, [pc, #156]	; (80046e4 <sFLASH_GetInfo+0x120>)
 8004646:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800464a:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 800464c:	4b25      	ldr	r3, [pc, #148]	; (80046e4 <sFLASH_GetInfo+0x120>)
 800464e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004652:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 8004654:	4b23      	ldr	r3, [pc, #140]	; (80046e4 <sFLASH_GetInfo+0x120>)
 8004656:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800465a:	819a      	strh	r2, [r3, #12]
			break;
 800465c:	e02f      	b.n	80046be <sFLASH_GetInfo+0xfa>
		case sFLASH_W25Q64BV_ID:
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 800465e:	4b21      	ldr	r3, [pc, #132]	; (80046e4 <sFLASH_GetInfo+0x120>)
 8004660:	4a1c      	ldr	r2, [pc, #112]	; (80046d4 <sFLASH_GetInfo+0x110>)
 8004662:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8004664:	4b1f      	ldr	r3, [pc, #124]	; (80046e4 <sFLASH_GetInfo+0x120>)
 8004666:	2201      	movs	r2, #1
 8004668:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 800466a:	4b1e      	ldr	r3, [pc, #120]	; (80046e4 <sFLASH_GetInfo+0x120>)
 800466c:	2201      	movs	r2, #1
 800466e:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8004670:	4b1c      	ldr	r3, [pc, #112]	; (80046e4 <sFLASH_GetInfo+0x120>)
 8004672:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004676:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8004678:	4b1a      	ldr	r3, [pc, #104]	; (80046e4 <sFLASH_GetInfo+0x120>)
 800467a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800467e:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 2048;
 8004680:	4b18      	ldr	r3, [pc, #96]	; (80046e4 <sFLASH_GetInfo+0x120>)
 8004682:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004686:	819a      	strh	r2, [r3, #12]
			break;
 8004688:	e019      	b.n	80046be <sFLASH_GetInfo+0xfa>
		case sFLASH_MX25L32xxx_ID:
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 800468a:	4b16      	ldr	r3, [pc, #88]	; (80046e4 <sFLASH_GetInfo+0x120>)
 800468c:	4a13      	ldr	r2, [pc, #76]	; (80046dc <sFLASH_GetInfo+0x118>)
 800468e:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8004690:	4b14      	ldr	r3, [pc, #80]	; (80046e4 <sFLASH_GetInfo+0x120>)
 8004692:	2201      	movs	r2, #1
 8004694:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8004696:	4b13      	ldr	r3, [pc, #76]	; (80046e4 <sFLASH_GetInfo+0x120>)
 8004698:	2201      	movs	r2, #1
 800469a:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 800469c:	4b11      	ldr	r3, [pc, #68]	; (80046e4 <sFLASH_GetInfo+0x120>)
 800469e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80046a2:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 80046a4:	4b0f      	ldr	r3, [pc, #60]	; (80046e4 <sFLASH_GetInfo+0x120>)
 80046a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046aa:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 80046ac:	4b0d      	ldr	r3, [pc, #52]	; (80046e4 <sFLASH_GetInfo+0x120>)
 80046ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046b2:	819a      	strh	r2, [r3, #12]
			break;
 80046b4:	e003      	b.n	80046be <sFLASH_GetInfo+0xfa>

		default:
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 80046b6:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <sFLASH_GetInfo+0x120>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]
			break;
 80046bc:	bf00      	nop
	}

	return flash_info;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a08      	ldr	r2, [pc, #32]	; (80046e4 <sFLASH_GetInfo+0x120>)
 80046c2:	461c      	mov	r4, r3
 80046c4:	4613      	mov	r3, r2
 80046c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd90      	pop	{r4, r7, pc}
 80046d4:	00ef4017 	.word	0x00ef4017
 80046d8:	00ef4016 	.word	0x00ef4016
 80046dc:	00c22016 	.word	0x00c22016
 80046e0:	00ef4015 	.word	0x00ef4015
 80046e4:	200008d8 	.word	0x200008d8

080046e8 <sFLASH_CS_LOW>:

void sFLASH_CS_LOW(void){ //select chip
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0

	flash_conf.select_chip();
 80046ec:	4b02      	ldr	r3, [pc, #8]	; (80046f8 <sFLASH_CS_LOW+0x10>)
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	4798      	blx	r3

}
 80046f2:	bf00      	nop
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	200008c4 	.word	0x200008c4

080046fc <sFLASH_CS_HIGH>:

void sFLASH_CS_HIGH(void){ //deselect chip
 80046fc:	b580      	push	{r7, lr}
 80046fe:	af00      	add	r7, sp, #0

	flash_conf.deselect_chip();
 8004700:	4b02      	ldr	r3, [pc, #8]	; (800470c <sFLASH_CS_HIGH+0x10>)
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	4798      	blx	r3
}
 8004706:	bf00      	nop
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	200008c4 	.word	0x200008c4

08004710 <sFLASH_EraseSector>:
  * @brief  Erases the specified FLASH sector.
  * @param  SectorAddr: address of the sector to erase.
  * @retval None
  */
void sFLASH_EraseSector(uint32_t SectorAddr)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /*!< Send write enable instruction */
  sFLASH_WriteEnable();
 8004718:	f000 f97c 	bl	8004a14 <sFLASH_WriteEnable>

  /*!< Sector Erase */
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 800471c:	f7ff ffe4 	bl	80046e8 <sFLASH_CS_LOW>
  /*!< Send Sector Erase instruction */
  sFLASH_SendByte(sFLASH_CMD_SE);
 8004720:	2020      	movs	r0, #32
 8004722:	f000 f967 	bl	80049f4 <sFLASH_SendByte>
  /*!< Send SectorAddr high nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	0c1b      	lsrs	r3, r3, #16
 800472a:	b2db      	uxtb	r3, r3
 800472c:	4618      	mov	r0, r3
 800472e:	f000 f961 	bl	80049f4 <sFLASH_SendByte>
  /*!< Send SectorAddr medium nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	0a1b      	lsrs	r3, r3, #8
 8004736:	b2db      	uxtb	r3, r3
 8004738:	4618      	mov	r0, r3
 800473a:	f000 f95b 	bl	80049f4 <sFLASH_SendByte>
  /*!< Send SectorAddr low nibble address byte */
  sFLASH_SendByte(SectorAddr & 0xFF);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	b2db      	uxtb	r3, r3
 8004742:	4618      	mov	r0, r3
 8004744:	f000 f956 	bl	80049f4 <sFLASH_SendByte>
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8004748:	f7ff ffd8 	bl	80046fc <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 800474c:	f000 f96d 	bl	8004a2a <sFLASH_WaitForWriteEnd>
}
 8004750:	bf00      	nop
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <sFLASH_WritePage>:
  * @param  NumByteToWrite: number of bytes to write to the FLASH, must be equal
  *         or less than "sFLASH_PAGESIZE" value.
  * @retval None
  */
void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	4613      	mov	r3, r2
 8004764:	80fb      	strh	r3, [r7, #6]
  /*!< Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 8004766:	f000 f955 	bl	8004a14 <sFLASH_WriteEnable>

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 800476a:	f7ff ffbd 	bl	80046e8 <sFLASH_CS_LOW>
  /*!< Send "Write to Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 800476e:	2002      	movs	r0, #2
 8004770:	f000 f940 	bl	80049f4 <sFLASH_SendByte>
  /*!< Send WriteAddr high nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	0c1b      	lsrs	r3, r3, #16
 8004778:	b2db      	uxtb	r3, r3
 800477a:	4618      	mov	r0, r3
 800477c:	f000 f93a 	bl	80049f4 <sFLASH_SendByte>
  /*!< Send WriteAddr medium nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	0a1b      	lsrs	r3, r3, #8
 8004784:	b2db      	uxtb	r3, r3
 8004786:	4618      	mov	r0, r3
 8004788:	f000 f934 	bl	80049f4 <sFLASH_SendByte>
  /*!< Send WriteAddr low nibble address byte to write to */
  sFLASH_SendByte(WriteAddr & 0xFF);
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	b2db      	uxtb	r3, r3
 8004790:	4618      	mov	r0, r3
 8004792:	f000 f92f 	bl	80049f4 <sFLASH_SendByte>

  /*!< while there is data to be written on the FLASH */
  while (NumByteToWrite--)
 8004796:	e007      	b.n	80047a8 <sFLASH_WritePage+0x50>
  {
    /*!< Send the current byte */
    sFLASH_SendByte(*pBuffer);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	4618      	mov	r0, r3
 800479e:	f000 f929 	bl	80049f4 <sFLASH_SendByte>
    /*!< Point on the next byte to be written */
    pBuffer++;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3301      	adds	r3, #1
 80047a6:	60fb      	str	r3, [r7, #12]
  while (NumByteToWrite--)
 80047a8:	88fb      	ldrh	r3, [r7, #6]
 80047aa:	1e5a      	subs	r2, r3, #1
 80047ac:	80fa      	strh	r2, [r7, #6]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f2      	bne.n	8004798 <sFLASH_WritePage+0x40>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80047b2:	f7ff ffa3 	bl	80046fc <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 80047b6:	f000 f938 	bl	8004a2a <sFLASH_WaitForWriteEnd>
}
 80047ba:	bf00      	nop
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <sFLASH_WriteBuffer>:
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b086      	sub	sp, #24
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	4613      	mov	r3, r2
 80047ce:	80fb      	strh	r3, [r7, #6]
  uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 80047d0:	2300      	movs	r3, #0
 80047d2:	75fb      	strb	r3, [r7, #23]
 80047d4:	2300      	movs	r3, #0
 80047d6:	75bb      	strb	r3, [r7, #22]
 80047d8:	2300      	movs	r3, #0
 80047da:	757b      	strb	r3, [r7, #21]
 80047dc:	2300      	movs	r3, #0
 80047de:	753b      	strb	r3, [r7, #20]
 80047e0:	2300      	movs	r3, #0
 80047e2:	74fb      	strb	r3, [r7, #19]

  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	757b      	strb	r3, [r7, #21]
  count = sFLASH_SPI_PAGESIZE - Addr;
 80047e8:	7d7b      	ldrb	r3, [r7, #21]
 80047ea:	425b      	negs	r3, r3
 80047ec:	753b      	strb	r3, [r7, #20]
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 80047ee:	88fb      	ldrh	r3, [r7, #6]
 80047f0:	0a1b      	lsrs	r3, r3, #8
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	75fb      	strb	r3, [r7, #23]
  NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 80047f6:	88fb      	ldrh	r3, [r7, #6]
 80047f8:	75bb      	strb	r3, [r7, #22]

  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 80047fa:	7d7b      	ldrb	r3, [r7, #21]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d124      	bne.n	800484a <sFLASH_WriteBuffer+0x88>
  {
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8004800:	7dfb      	ldrb	r3, [r7, #23]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d114      	bne.n	8004830 <sFLASH_WriteBuffer+0x6e>
    {
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 8004806:	88fb      	ldrh	r3, [r7, #6]
 8004808:	461a      	mov	r2, r3
 800480a:	68b9      	ldr	r1, [r7, #8]
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f7ff ffa3 	bl	8004758 <sFLASH_WritePage>
      {
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
      }
    }
  }
}
 8004812:	e07b      	b.n	800490c <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8004814:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004818:	68b9      	ldr	r1, [r7, #8]
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f7ff ff9c 	bl	8004758 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004826:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800482e:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8004830:	7dfb      	ldrb	r3, [r7, #23]
 8004832:	1e5a      	subs	r2, r3, #1
 8004834:	75fa      	strb	r2, [r7, #23]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1ec      	bne.n	8004814 <sFLASH_WriteBuffer+0x52>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 800483a:	7dbb      	ldrb	r3, [r7, #22]
 800483c:	b29b      	uxth	r3, r3
 800483e:	461a      	mov	r2, r3
 8004840:	68b9      	ldr	r1, [r7, #8]
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f7ff ff88 	bl	8004758 <sFLASH_WritePage>
}
 8004848:	e060      	b.n	800490c <sFLASH_WriteBuffer+0x14a>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 800484a:	7dfb      	ldrb	r3, [r7, #23]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d125      	bne.n	800489c <sFLASH_WriteBuffer+0xda>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 8004850:	7dba      	ldrb	r2, [r7, #22]
 8004852:	7d3b      	ldrb	r3, [r7, #20]
 8004854:	429a      	cmp	r2, r3
 8004856:	d91a      	bls.n	800488e <sFLASH_WriteBuffer+0xcc>
        temp = NumOfSingle - count;
 8004858:	7dba      	ldrb	r2, [r7, #22]
 800485a:	7d3b      	ldrb	r3, [r7, #20]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	74fb      	strb	r3, [r7, #19]
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 8004860:	7d3b      	ldrb	r3, [r7, #20]
 8004862:	b29b      	uxth	r3, r3
 8004864:	461a      	mov	r2, r3
 8004866:	68b9      	ldr	r1, [r7, #8]
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f7ff ff75 	bl	8004758 <sFLASH_WritePage>
        WriteAddr +=  count;
 800486e:	7d3b      	ldrb	r3, [r7, #20]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	4413      	add	r3, r2
 8004874:	60bb      	str	r3, [r7, #8]
        pBuffer += count;
 8004876:	7d3b      	ldrb	r3, [r7, #20]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	4413      	add	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 800487e:	7cfb      	ldrb	r3, [r7, #19]
 8004880:	b29b      	uxth	r3, r3
 8004882:	461a      	mov	r2, r3
 8004884:	68b9      	ldr	r1, [r7, #8]
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f7ff ff66 	bl	8004758 <sFLASH_WritePage>
}
 800488c:	e03e      	b.n	800490c <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 800488e:	88fb      	ldrh	r3, [r7, #6]
 8004890:	461a      	mov	r2, r3
 8004892:	68b9      	ldr	r1, [r7, #8]
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f7ff ff5f 	bl	8004758 <sFLASH_WritePage>
}
 800489a:	e037      	b.n	800490c <sFLASH_WriteBuffer+0x14a>
      NumByteToWrite -= count;
 800489c:	7d3b      	ldrb	r3, [r7, #20]
 800489e:	b29b      	uxth	r3, r3
 80048a0:	88fa      	ldrh	r2, [r7, #6]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	80fb      	strh	r3, [r7, #6]
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 80048a6:	88fb      	ldrh	r3, [r7, #6]
 80048a8:	0a1b      	lsrs	r3, r3, #8
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	75fb      	strb	r3, [r7, #23]
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 80048ae:	88fb      	ldrh	r3, [r7, #6]
 80048b0:	75bb      	strb	r3, [r7, #22]
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 80048b2:	7d3b      	ldrb	r3, [r7, #20]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	461a      	mov	r2, r3
 80048b8:	68b9      	ldr	r1, [r7, #8]
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f7ff ff4c 	bl	8004758 <sFLASH_WritePage>
      WriteAddr +=  count;
 80048c0:	7d3b      	ldrb	r3, [r7, #20]
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	4413      	add	r3, r2
 80048c6:	60bb      	str	r3, [r7, #8]
      pBuffer += count;
 80048c8:	7d3b      	ldrb	r3, [r7, #20]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4413      	add	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 80048d0:	e00d      	b.n	80048ee <sFLASH_WriteBuffer+0x12c>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 80048d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048d6:	68b9      	ldr	r1, [r7, #8]
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f7ff ff3d 	bl	8004758 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80048e4:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80048ec:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 80048ee:	7dfb      	ldrb	r3, [r7, #23]
 80048f0:	1e5a      	subs	r2, r3, #1
 80048f2:	75fa      	strb	r2, [r7, #23]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1ec      	bne.n	80048d2 <sFLASH_WriteBuffer+0x110>
      if (NumOfSingle != 0)
 80048f8:	7dbb      	ldrb	r3, [r7, #22]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d006      	beq.n	800490c <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 80048fe:	7dbb      	ldrb	r3, [r7, #22]
 8004900:	b29b      	uxth	r3, r3
 8004902:	461a      	mov	r2, r3
 8004904:	68b9      	ldr	r1, [r7, #8]
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f7ff ff26 	bl	8004758 <sFLASH_WritePage>
}
 800490c:	bf00      	nop
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <sFLASH_ReadBuffer>:
  * @param  ReadAddr: FLASH's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the FLASH.
  * @retval None
  */
void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	4613      	mov	r3, r2
 8004920:	80fb      	strh	r3, [r7, #6]
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8004922:	f7ff fee1 	bl	80046e8 <sFLASH_CS_LOW>

  /*!< Send "Read from Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_READ);
 8004926:	2003      	movs	r0, #3
 8004928:	f000 f864 	bl	80049f4 <sFLASH_SendByte>

  /*!< Send ReadAddr high nibble address byte to read from */
  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	0c1b      	lsrs	r3, r3, #16
 8004930:	b2db      	uxtb	r3, r3
 8004932:	4618      	mov	r0, r3
 8004934:	f000 f85e 	bl	80049f4 <sFLASH_SendByte>
  /*!< Send ReadAddr medium nibble address byte to read from */
  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	0a1b      	lsrs	r3, r3, #8
 800493c:	b2db      	uxtb	r3, r3
 800493e:	4618      	mov	r0, r3
 8004940:	f000 f858 	bl	80049f4 <sFLASH_SendByte>
  /*!< Send ReadAddr low nibble address byte to read from */
  sFLASH_SendByte(ReadAddr & 0xFF);
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	b2db      	uxtb	r3, r3
 8004948:	4618      	mov	r0, r3
 800494a:	f000 f853 	bl	80049f4 <sFLASH_SendByte>

  while (NumByteToRead--) /*!< while there is data to be read */
 800494e:	e008      	b.n	8004962 <sFLASH_ReadBuffer+0x4e>
  {
    /*!< Read a byte from the FLASH */
    //*pBuffer = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
	  *pBuffer = sFLASH_ReadByte();
 8004950:	f000 f846 	bl	80049e0 <sFLASH_ReadByte>
 8004954:	4603      	mov	r3, r0
 8004956:	461a      	mov	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	701a      	strb	r2, [r3, #0]
    /*!< Point to the next location where the byte read will be saved */
    pBuffer++;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	3301      	adds	r3, #1
 8004960:	60fb      	str	r3, [r7, #12]
  while (NumByteToRead--) /*!< while there is data to be read */
 8004962:	88fb      	ldrh	r3, [r7, #6]
 8004964:	1e5a      	subs	r2, r3, #1
 8004966:	80fa      	strh	r2, [r7, #6]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1f1      	bne.n	8004950 <sFLASH_ReadBuffer+0x3c>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 800496c:	f7ff fec6 	bl	80046fc <sFLASH_CS_HIGH>
}
 8004970:	bf00      	nop
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <sFLASH_ReadID>:
  * @brief  Reads FLASH identification.
  * @param  None
  * @retval FLASH identification
  */
uint32_t sFLASH_ReadID(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800497e:	2300      	movs	r3, #0
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	2300      	movs	r3, #0
 8004984:	60bb      	str	r3, [r7, #8]
 8004986:	2300      	movs	r3, #0
 8004988:	607b      	str	r3, [r7, #4]
 800498a:	2300      	movs	r3, #0
 800498c:	603b      	str	r3, [r7, #0]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 800498e:	f7ff feab 	bl	80046e8 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 8004992:	f7ff feb3 	bl	80046fc <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 8004996:	f7ff fea7 	bl	80046e8 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 800499a:	f7ff feaf 	bl	80046fc <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 800499e:	f7ff fea3 	bl	80046e8 <sFLASH_CS_LOW>


  /*!< Send "RDID " instruction */
  sFLASH_SendByte(sFLASH_CMD_RDID);
 80049a2:	209f      	movs	r0, #159	; 0x9f
 80049a4:	f000 f826 	bl	80049f4 <sFLASH_SendByte>

  /*!< Read a byte from the FLASH */
  Temp0 = sFLASH_ReadByte();
 80049a8:	f000 f81a 	bl	80049e0 <sFLASH_ReadByte>
 80049ac:	4603      	mov	r3, r0
 80049ae:	60bb      	str	r3, [r7, #8]

  /*!< Read a byte from the FLASH */
  Temp1 = sFLASH_ReadByte();
 80049b0:	f000 f816 	bl	80049e0 <sFLASH_ReadByte>
 80049b4:	4603      	mov	r3, r0
 80049b6:	607b      	str	r3, [r7, #4]

  /*!< Read a byte from the FLASH */
  Temp2 = sFLASH_ReadByte();
 80049b8:	f000 f812 	bl	80049e0 <sFLASH_ReadByte>
 80049bc:	4603      	mov	r3, r0
 80049be:	603b      	str	r3, [r7, #0]

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80049c0:	f7ff fe9c 	bl	80046fc <sFLASH_CS_HIGH>

  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	041a      	lsls	r2, r3, #16
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	021b      	lsls	r3, r3, #8
 80049cc:	4313      	orrs	r3, r2
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]

  return Temp;
 80049d4:	68fb      	ldr	r3, [r7, #12]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <sFLASH_ReadByte>:
  *         has been previously called.
  * @param  None
  * @retval Byte Read from the SPI Flash.
  */
uint8_t sFLASH_ReadByte(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
	return flash_conf.receive_byte();
 80049e4:	4b02      	ldr	r3, [pc, #8]	; (80049f0 <sFLASH_ReadByte+0x10>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	4798      	blx	r3
 80049ea:	4603      	mov	r3, r0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	200008c4 	.word	0x200008c4

080049f4 <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	4603      	mov	r3, r0
 80049fc:	71fb      	strb	r3, [r7, #7]
	flash_conf.send_byte(byte);
 80049fe:	4b04      	ldr	r3, [pc, #16]	; (8004a10 <sFLASH_SendByte+0x1c>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	79fa      	ldrb	r2, [r7, #7]
 8004a04:	4610      	mov	r0, r2
 8004a06:	4798      	blx	r3
}
 8004a08:	bf00      	nop
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	200008c4 	.word	0x200008c4

08004a14 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8004a18:	f7ff fe66 	bl	80046e8 <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 8004a1c:	2006      	movs	r0, #6
 8004a1e:	f7ff ffe9 	bl	80049f4 <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8004a22:	f7ff fe6b 	bl	80046fc <sFLASH_CS_HIGH>
}
 8004a26:	bf00      	nop
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b082      	sub	sp, #8
 8004a2e:	af00      	add	r7, sp, #0
  uint8_t flashstatus = 0;
 8004a30:	2300      	movs	r3, #0
 8004a32:	71fb      	strb	r3, [r7, #7]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8004a34:	f7ff fe58 	bl	80046e8 <sFLASH_CS_LOW>

  /*!< Send "Read Status Register" instruction */
  sFLASH_SendByte(sFLASH_CMD_RDSR);
 8004a38:	2005      	movs	r0, #5
 8004a3a:	f7ff ffdb 	bl	80049f4 <sFLASH_SendByte>
  do
  {
    /*!< Send a dummy byte to generate the clock needed by the FLASH
    and put the value of the status register in FLASH_Status variable */
    //flashstatus = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
	  flashstatus = sFLASH_ReadByte();
 8004a3e:	f7ff ffcf 	bl	80049e0 <sFLASH_ReadByte>
 8004a42:	4603      	mov	r3, r0
 8004a44:	71fb      	strb	r3, [r7, #7]

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 8004a46:	79fb      	ldrb	r3, [r7, #7]
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1f6      	bne.n	8004a3e <sFLASH_WaitForWriteEnd+0x14>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8004a50:	f7ff fe54 	bl	80046fc <sFLASH_CS_HIGH>
}
 8004a54:	bf00      	nop
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <SPI_flash_set>:
#include "SPI_flash_io.h"


SPI_HandleTypeDef spi_interface;

void SPI_flash_set(SPI_HandleTypeDef hspi){
 8004a5c:	b084      	sub	sp, #16
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	f107 0c08 	add.w	ip, r7, #8
 8004a66:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	spi_interface = hspi;
 8004a6a:	4b07      	ldr	r3, [pc, #28]	; (8004a88 <SPI_flash_set+0x2c>)
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f107 0308 	add.w	r3, r7, #8
 8004a72:	2258      	movs	r2, #88	; 0x58
 8004a74:	4619      	mov	r1, r3
 8004a76:	f017 fcec 	bl	801c452 <memcpy>
}
 8004a7a:	bf00      	nop
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a82:	b004      	add	sp, #16
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	200008e8 	.word	0x200008e8

08004a8c <SPI_flash_read_byte>:

uint8_t SPI_flash_read_byte(void){
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
	uint8_t byte;

	HAL_SPI_Receive(&spi_interface, &byte, 1, 5000);
 8004a92:	1df9      	adds	r1, r7, #7
 8004a94:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a98:	2201      	movs	r2, #1
 8004a9a:	4804      	ldr	r0, [pc, #16]	; (8004aac <SPI_flash_read_byte+0x20>)
 8004a9c:	f001 fa38 	bl	8005f10 <HAL_SPI_Receive>
	return byte;
 8004aa0:	79fb      	ldrb	r3, [r7, #7]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	200008e8 	.word	0x200008e8

08004ab0 <SPI_flash_send_byte>:


void SPI_flash_send_byte(uint8_t byte){
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&spi_interface, &byte, 1, 5000);
 8004aba:	1df9      	adds	r1, r7, #7
 8004abc:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	4803      	ldr	r0, [pc, #12]	; (8004ad0 <SPI_flash_send_byte+0x20>)
 8004ac4:	f001 f8e1 	bl	8005c8a <HAL_SPI_Transmit>

}
 8004ac8:	bf00      	nop
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	200008e8 	.word	0x200008e8

08004ad4 <SPI_flash_select>:

void SPI_flash_select(void){
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8004ad8:	2200      	movs	r2, #0
 8004ada:	2110      	movs	r1, #16
 8004adc:	4802      	ldr	r0, [pc, #8]	; (8004ae8 <SPI_flash_select+0x14>)
 8004ade:	f000 fb67 	bl	80051b0 <HAL_GPIO_WritePin>
}
 8004ae2:	bf00      	nop
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40020000 	.word	0x40020000

08004aec <SPI_flash_deselect>:

void SPI_flash_deselect(void){
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8004af0:	2201      	movs	r2, #1
 8004af2:	2110      	movs	r1, #16
 8004af4:	4802      	ldr	r0, [pc, #8]	; (8004b00 <SPI_flash_deselect+0x14>)
 8004af6:	f000 fb5b 	bl	80051b0 <HAL_GPIO_WritePin>
}
 8004afa:	bf00      	nop
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	40020000 	.word	0x40020000

08004b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b08:	4b0e      	ldr	r3, [pc, #56]	; (8004b44 <HAL_Init+0x40>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a0d      	ldr	r2, [pc, #52]	; (8004b44 <HAL_Init+0x40>)
 8004b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b14:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <HAL_Init+0x40>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a0a      	ldr	r2, [pc, #40]	; (8004b44 <HAL_Init+0x40>)
 8004b1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b20:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <HAL_Init+0x40>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a07      	ldr	r2, [pc, #28]	; (8004b44 <HAL_Init+0x40>)
 8004b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b2c:	2003      	movs	r0, #3
 8004b2e:	f000 f8d8 	bl	8004ce2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b32:	200f      	movs	r0, #15
 8004b34:	f7fd fd5c 	bl	80025f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b38:	f7fd fc3e 	bl	80023b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	40023c00 	.word	0x40023c00

08004b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b4c:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <HAL_IncTick+0x20>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	461a      	mov	r2, r3
 8004b52:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <HAL_IncTick+0x24>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4413      	add	r3, r2
 8004b58:	4a04      	ldr	r2, [pc, #16]	; (8004b6c <HAL_IncTick+0x24>)
 8004b5a:	6013      	str	r3, [r2, #0]
}
 8004b5c:	bf00      	nop
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	200000c0 	.word	0x200000c0
 8004b6c:	20000940 	.word	0x20000940

08004b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  return uwTick;
 8004b74:	4b03      	ldr	r3, [pc, #12]	; (8004b84 <HAL_GetTick+0x14>)
 8004b76:	681b      	ldr	r3, [r3, #0]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	20000940 	.word	0x20000940

08004b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f003 0307 	and.w	r3, r3, #7
 8004b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b98:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <__NVIC_SetPriorityGrouping+0x44>)
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bba:	4a04      	ldr	r2, [pc, #16]	; (8004bcc <__NVIC_SetPriorityGrouping+0x44>)
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	60d3      	str	r3, [r2, #12]
}
 8004bc0:	bf00      	nop
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	e000ed00 	.word	0xe000ed00

08004bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bd4:	4b04      	ldr	r3, [pc, #16]	; (8004be8 <__NVIC_GetPriorityGrouping+0x18>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	0a1b      	lsrs	r3, r3, #8
 8004bda:	f003 0307 	and.w	r3, r3, #7
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	e000ed00 	.word	0xe000ed00

08004bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	db0b      	blt.n	8004c16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bfe:	79fb      	ldrb	r3, [r7, #7]
 8004c00:	f003 021f 	and.w	r2, r3, #31
 8004c04:	4907      	ldr	r1, [pc, #28]	; (8004c24 <__NVIC_EnableIRQ+0x38>)
 8004c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c0a:	095b      	lsrs	r3, r3, #5
 8004c0c:	2001      	movs	r0, #1
 8004c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8004c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	e000e100 	.word	0xe000e100

08004c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	4603      	mov	r3, r0
 8004c30:	6039      	str	r1, [r7, #0]
 8004c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	db0a      	blt.n	8004c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	490c      	ldr	r1, [pc, #48]	; (8004c74 <__NVIC_SetPriority+0x4c>)
 8004c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c46:	0112      	lsls	r2, r2, #4
 8004c48:	b2d2      	uxtb	r2, r2
 8004c4a:	440b      	add	r3, r1
 8004c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c50:	e00a      	b.n	8004c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	4908      	ldr	r1, [pc, #32]	; (8004c78 <__NVIC_SetPriority+0x50>)
 8004c58:	79fb      	ldrb	r3, [r7, #7]
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	3b04      	subs	r3, #4
 8004c60:	0112      	lsls	r2, r2, #4
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	440b      	add	r3, r1
 8004c66:	761a      	strb	r2, [r3, #24]
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	e000e100 	.word	0xe000e100
 8004c78:	e000ed00 	.word	0xe000ed00

08004c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b089      	sub	sp, #36	; 0x24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f003 0307 	and.w	r3, r3, #7
 8004c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	f1c3 0307 	rsb	r3, r3, #7
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	bf28      	it	cs
 8004c9a:	2304      	movcs	r3, #4
 8004c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	2b06      	cmp	r3, #6
 8004ca4:	d902      	bls.n	8004cac <NVIC_EncodePriority+0x30>
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	3b03      	subs	r3, #3
 8004caa:	e000      	b.n	8004cae <NVIC_EncodePriority+0x32>
 8004cac:	2300      	movs	r3, #0
 8004cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cba:	43da      	mvns	r2, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	401a      	ands	r2, r3
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	fa01 f303 	lsl.w	r3, r1, r3
 8004cce:	43d9      	mvns	r1, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cd4:	4313      	orrs	r3, r2
         );
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3724      	adds	r7, #36	; 0x24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b082      	sub	sp, #8
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7ff ff4c 	bl	8004b88 <__NVIC_SetPriorityGrouping>
}
 8004cf0:	bf00      	nop
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	4603      	mov	r3, r0
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
 8004d04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d0a:	f7ff ff61 	bl	8004bd0 <__NVIC_GetPriorityGrouping>
 8004d0e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	68b9      	ldr	r1, [r7, #8]
 8004d14:	6978      	ldr	r0, [r7, #20]
 8004d16:	f7ff ffb1 	bl	8004c7c <NVIC_EncodePriority>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d20:	4611      	mov	r1, r2
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7ff ff80 	bl	8004c28 <__NVIC_SetPriority>
}
 8004d28:	bf00      	nop
 8004d2a:	3718      	adds	r7, #24
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	4603      	mov	r3, r0
 8004d38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff ff54 	bl	8004bec <__NVIC_EnableIRQ>
}
 8004d44:	bf00      	nop
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e00e      	b.n	8004d7c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	795b      	ldrb	r3, [r3, #5]
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d105      	bne.n	8004d74 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7fd fb4e 	bl	8002410 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d90:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004d92:	f7ff feed 	bl	8004b70 <HAL_GetTick>
 8004d96:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d008      	beq.n	8004db6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2280      	movs	r2, #128	; 0x80
 8004da8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e052      	b.n	8004e5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0216 	bic.w	r2, r2, #22
 8004dc4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695a      	ldr	r2, [r3, #20]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dd4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d103      	bne.n	8004de6 <HAL_DMA_Abort+0x62>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d007      	beq.n	8004df6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0208 	bic.w	r2, r2, #8
 8004df4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 0201 	bic.w	r2, r2, #1
 8004e04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e06:	e013      	b.n	8004e30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e08:	f7ff feb2 	bl	8004b70 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b05      	cmp	r3, #5
 8004e14:	d90c      	bls.n	8004e30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2203      	movs	r2, #3
 8004e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e015      	b.n	8004e5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1e4      	bne.n	8004e08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e42:	223f      	movs	r2, #63	; 0x3f
 8004e44:	409a      	lsls	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d004      	beq.n	8004e82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2280      	movs	r2, #128	; 0x80
 8004e7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e00c      	b.n	8004e9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2205      	movs	r2, #5
 8004e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0201 	bic.w	r2, r2, #1
 8004e98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b089      	sub	sp, #36	; 0x24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61fb      	str	r3, [r7, #28]
 8004ec2:	e159      	b.n	8005178 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ecc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	f040 8148 	bne.w	8005172 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f003 0303 	and.w	r3, r3, #3
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d005      	beq.n	8004efa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d130      	bne.n	8004f5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	2203      	movs	r2, #3
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	43db      	mvns	r3, r3
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f30:	2201      	movs	r2, #1
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	43db      	mvns	r3, r3
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	091b      	lsrs	r3, r3, #4
 8004f46:	f003 0201 	and.w	r2, r3, #1
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f003 0303 	and.w	r3, r3, #3
 8004f64:	2b03      	cmp	r3, #3
 8004f66:	d017      	beq.n	8004f98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	2203      	movs	r2, #3
 8004f74:	fa02 f303 	lsl.w	r3, r2, r3
 8004f78:	43db      	mvns	r3, r3
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	005b      	lsls	r3, r3, #1
 8004f88:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f003 0303 	and.w	r3, r3, #3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d123      	bne.n	8004fec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	08da      	lsrs	r2, r3, #3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3208      	adds	r2, #8
 8004fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	220f      	movs	r2, #15
 8004fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc0:	43db      	mvns	r3, r3
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	691a      	ldr	r2, [r3, #16]
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	f003 0307 	and.w	r3, r3, #7
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	08da      	lsrs	r2, r3, #3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	3208      	adds	r2, #8
 8004fe6:	69b9      	ldr	r1, [r7, #24]
 8004fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	2203      	movs	r2, #3
 8004ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffc:	43db      	mvns	r3, r3
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	4013      	ands	r3, r2
 8005002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f003 0203 	and.w	r2, r3, #3
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4313      	orrs	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 80a2 	beq.w	8005172 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800502e:	2300      	movs	r3, #0
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	4b57      	ldr	r3, [pc, #348]	; (8005190 <HAL_GPIO_Init+0x2e8>)
 8005034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005036:	4a56      	ldr	r2, [pc, #344]	; (8005190 <HAL_GPIO_Init+0x2e8>)
 8005038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800503c:	6453      	str	r3, [r2, #68]	; 0x44
 800503e:	4b54      	ldr	r3, [pc, #336]	; (8005190 <HAL_GPIO_Init+0x2e8>)
 8005040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005046:	60fb      	str	r3, [r7, #12]
 8005048:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800504a:	4a52      	ldr	r2, [pc, #328]	; (8005194 <HAL_GPIO_Init+0x2ec>)
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	089b      	lsrs	r3, r3, #2
 8005050:	3302      	adds	r3, #2
 8005052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	220f      	movs	r2, #15
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	43db      	mvns	r3, r3
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	4013      	ands	r3, r2
 800506c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a49      	ldr	r2, [pc, #292]	; (8005198 <HAL_GPIO_Init+0x2f0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d019      	beq.n	80050aa <HAL_GPIO_Init+0x202>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a48      	ldr	r2, [pc, #288]	; (800519c <HAL_GPIO_Init+0x2f4>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d013      	beq.n	80050a6 <HAL_GPIO_Init+0x1fe>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a47      	ldr	r2, [pc, #284]	; (80051a0 <HAL_GPIO_Init+0x2f8>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d00d      	beq.n	80050a2 <HAL_GPIO_Init+0x1fa>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a46      	ldr	r2, [pc, #280]	; (80051a4 <HAL_GPIO_Init+0x2fc>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d007      	beq.n	800509e <HAL_GPIO_Init+0x1f6>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a45      	ldr	r2, [pc, #276]	; (80051a8 <HAL_GPIO_Init+0x300>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d101      	bne.n	800509a <HAL_GPIO_Init+0x1f2>
 8005096:	2304      	movs	r3, #4
 8005098:	e008      	b.n	80050ac <HAL_GPIO_Init+0x204>
 800509a:	2307      	movs	r3, #7
 800509c:	e006      	b.n	80050ac <HAL_GPIO_Init+0x204>
 800509e:	2303      	movs	r3, #3
 80050a0:	e004      	b.n	80050ac <HAL_GPIO_Init+0x204>
 80050a2:	2302      	movs	r3, #2
 80050a4:	e002      	b.n	80050ac <HAL_GPIO_Init+0x204>
 80050a6:	2301      	movs	r3, #1
 80050a8:	e000      	b.n	80050ac <HAL_GPIO_Init+0x204>
 80050aa:	2300      	movs	r3, #0
 80050ac:	69fa      	ldr	r2, [r7, #28]
 80050ae:	f002 0203 	and.w	r2, r2, #3
 80050b2:	0092      	lsls	r2, r2, #2
 80050b4:	4093      	lsls	r3, r2
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050bc:	4935      	ldr	r1, [pc, #212]	; (8005194 <HAL_GPIO_Init+0x2ec>)
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	089b      	lsrs	r3, r3, #2
 80050c2:	3302      	adds	r3, #2
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050ca:	4b38      	ldr	r3, [pc, #224]	; (80051ac <HAL_GPIO_Init+0x304>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	43db      	mvns	r3, r3
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	4013      	ands	r3, r2
 80050d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050ee:	4a2f      	ldr	r2, [pc, #188]	; (80051ac <HAL_GPIO_Init+0x304>)
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050f4:	4b2d      	ldr	r3, [pc, #180]	; (80051ac <HAL_GPIO_Init+0x304>)
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	43db      	mvns	r3, r3
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	4013      	ands	r3, r2
 8005102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005118:	4a24      	ldr	r2, [pc, #144]	; (80051ac <HAL_GPIO_Init+0x304>)
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800511e:	4b23      	ldr	r3, [pc, #140]	; (80051ac <HAL_GPIO_Init+0x304>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	43db      	mvns	r3, r3
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	4013      	ands	r3, r2
 800512c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	4313      	orrs	r3, r2
 8005140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005142:	4a1a      	ldr	r2, [pc, #104]	; (80051ac <HAL_GPIO_Init+0x304>)
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005148:	4b18      	ldr	r3, [pc, #96]	; (80051ac <HAL_GPIO_Init+0x304>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	43db      	mvns	r3, r3
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	4013      	ands	r3, r2
 8005156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	4313      	orrs	r3, r2
 800516a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800516c:	4a0f      	ldr	r2, [pc, #60]	; (80051ac <HAL_GPIO_Init+0x304>)
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	3301      	adds	r3, #1
 8005176:	61fb      	str	r3, [r7, #28]
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	2b0f      	cmp	r3, #15
 800517c:	f67f aea2 	bls.w	8004ec4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005180:	bf00      	nop
 8005182:	bf00      	nop
 8005184:	3724      	adds	r7, #36	; 0x24
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	40023800 	.word	0x40023800
 8005194:	40013800 	.word	0x40013800
 8005198:	40020000 	.word	0x40020000
 800519c:	40020400 	.word	0x40020400
 80051a0:	40020800 	.word	0x40020800
 80051a4:	40020c00 	.word	0x40020c00
 80051a8:	40021000 	.word	0x40021000
 80051ac:	40013c00 	.word	0x40013c00

080051b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	460b      	mov	r3, r1
 80051ba:	807b      	strh	r3, [r7, #2]
 80051bc:	4613      	mov	r3, r2
 80051be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051c0:	787b      	ldrb	r3, [r7, #1]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051c6:	887a      	ldrh	r2, [r7, #2]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80051cc:	e003      	b.n	80051d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80051ce:	887b      	ldrh	r3, [r7, #2]
 80051d0:	041a      	lsls	r2, r3, #16
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	619a      	str	r2, [r3, #24]
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
	...

080051e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e267      	b.n	80056c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d075      	beq.n	80052ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005202:	4b88      	ldr	r3, [pc, #544]	; (8005424 <HAL_RCC_OscConfig+0x240>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 030c 	and.w	r3, r3, #12
 800520a:	2b04      	cmp	r3, #4
 800520c:	d00c      	beq.n	8005228 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800520e:	4b85      	ldr	r3, [pc, #532]	; (8005424 <HAL_RCC_OscConfig+0x240>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005216:	2b08      	cmp	r3, #8
 8005218:	d112      	bne.n	8005240 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800521a:	4b82      	ldr	r3, [pc, #520]	; (8005424 <HAL_RCC_OscConfig+0x240>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005222:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005226:	d10b      	bne.n	8005240 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005228:	4b7e      	ldr	r3, [pc, #504]	; (8005424 <HAL_RCC_OscConfig+0x240>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d05b      	beq.n	80052ec <HAL_RCC_OscConfig+0x108>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d157      	bne.n	80052ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e242      	b.n	80056c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005248:	d106      	bne.n	8005258 <HAL_RCC_OscConfig+0x74>
 800524a:	4b76      	ldr	r3, [pc, #472]	; (8005424 <HAL_RCC_OscConfig+0x240>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a75      	ldr	r2, [pc, #468]	; (8005424 <HAL_RCC_OscConfig+0x240>)
 8005250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005254:	6013      	str	r3, [r2, #0]
 8005256:	e01d      	b.n	8005294 <HAL_RCC_OscConfig+0xb0>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005260:	d10c      	bne.n	800527c <HAL_RCC_OscConfig+0x98>
 8005262:	4b70      	ldr	r3, [pc, #448]	; (8005424 <HAL_RCC_OscConfig+0x240>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a6f      	ldr	r2, [pc, #444]	; (8005424 <HAL_RCC_OscConfig+0x240>)
 8005268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	4b6d      	ldr	r3, [pc, #436]	; (8005424 <HAL_RCC_OscConfig+0x240>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a6c      	ldr	r2, [pc, #432]	; (8005424 <HAL_RCC_OscConfig+0x240>)
 8005274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005278:	6013      	str	r3, [r2, #0]
 800527a:	e00b      	b.n	8005294 <HAL_RCC_OscConfig+0xb0>
 800527c:	4b69      	ldr	r3, [pc, #420]	; (8005424 <HAL_RCC_OscConfig+0x240>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a68      	ldr	r2, [pc, #416]	; (8005424 <HAL_RCC_OscConfig+0x240>)
 8005282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005286:	6013      	str	r3, [r2, #0]
 8005288:	4b66      	ldr	r3, [pc, #408]	; (8005424 <HAL_RCC_OscConfig+0x240>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a65      	ldr	r2, [pc, #404]	; (8005424 <HAL_RCC_OscConfig+0x240>)
 800528e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d013      	beq.n	80052c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800529c:	f7ff fc68 	bl	8004b70 <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052a2:	e008      	b.n	80052b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052a4:	f7ff fc64 	bl	8004b70 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b64      	cmp	r3, #100	; 0x64
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e207      	b.n	80056c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052b6:	4b5b      	ldr	r3, [pc, #364]	; (8005424 <HAL_RCC_OscConfig+0x240>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d0f0      	beq.n	80052a4 <HAL_RCC_OscConfig+0xc0>
 80052c2:	e014      	b.n	80052ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c4:	f7ff fc54 	bl	8004b70 <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052cc:	f7ff fc50 	bl	8004b70 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b64      	cmp	r3, #100	; 0x64
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e1f3      	b.n	80056c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052de:	4b51      	ldr	r3, [pc, #324]	; (8005424 <HAL_RCC_OscConfig+0x240>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1f0      	bne.n	80052cc <HAL_RCC_OscConfig+0xe8>
 80052ea:	e000      	b.n	80052ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d063      	beq.n	80053c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052fa:	4b4a      	ldr	r3, [pc, #296]	; (8005424 <HAL_RCC_OscConfig+0x240>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f003 030c 	and.w	r3, r3, #12
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00b      	beq.n	800531e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005306:	4b47      	ldr	r3, [pc, #284]	; (8005424 <HAL_RCC_OscConfig+0x240>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800530e:	2b08      	cmp	r3, #8
 8005310:	d11c      	bne.n	800534c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005312:	4b44      	ldr	r3, [pc, #272]	; (8005424 <HAL_RCC_OscConfig+0x240>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d116      	bne.n	800534c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800531e:	4b41      	ldr	r3, [pc, #260]	; (8005424 <HAL_RCC_OscConfig+0x240>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	2b00      	cmp	r3, #0
 8005328:	d005      	beq.n	8005336 <HAL_RCC_OscConfig+0x152>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d001      	beq.n	8005336 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e1c7      	b.n	80056c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005336:	4b3b      	ldr	r3, [pc, #236]	; (8005424 <HAL_RCC_OscConfig+0x240>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	4937      	ldr	r1, [pc, #220]	; (8005424 <HAL_RCC_OscConfig+0x240>)
 8005346:	4313      	orrs	r3, r2
 8005348:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800534a:	e03a      	b.n	80053c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d020      	beq.n	8005396 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005354:	4b34      	ldr	r3, [pc, #208]	; (8005428 <HAL_RCC_OscConfig+0x244>)
 8005356:	2201      	movs	r2, #1
 8005358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535a:	f7ff fc09 	bl	8004b70 <HAL_GetTick>
 800535e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005360:	e008      	b.n	8005374 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005362:	f7ff fc05 	bl	8004b70 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b02      	cmp	r3, #2
 800536e:	d901      	bls.n	8005374 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e1a8      	b.n	80056c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005374:	4b2b      	ldr	r3, [pc, #172]	; (8005424 <HAL_RCC_OscConfig+0x240>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d0f0      	beq.n	8005362 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005380:	4b28      	ldr	r3, [pc, #160]	; (8005424 <HAL_RCC_OscConfig+0x240>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	00db      	lsls	r3, r3, #3
 800538e:	4925      	ldr	r1, [pc, #148]	; (8005424 <HAL_RCC_OscConfig+0x240>)
 8005390:	4313      	orrs	r3, r2
 8005392:	600b      	str	r3, [r1, #0]
 8005394:	e015      	b.n	80053c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005396:	4b24      	ldr	r3, [pc, #144]	; (8005428 <HAL_RCC_OscConfig+0x244>)
 8005398:	2200      	movs	r2, #0
 800539a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800539c:	f7ff fbe8 	bl	8004b70 <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053a4:	f7ff fbe4 	bl	8004b70 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e187      	b.n	80056c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053b6:	4b1b      	ldr	r3, [pc, #108]	; (8005424 <HAL_RCC_OscConfig+0x240>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1f0      	bne.n	80053a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0308 	and.w	r3, r3, #8
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d036      	beq.n	800543c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d016      	beq.n	8005404 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053d6:	4b15      	ldr	r3, [pc, #84]	; (800542c <HAL_RCC_OscConfig+0x248>)
 80053d8:	2201      	movs	r2, #1
 80053da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053dc:	f7ff fbc8 	bl	8004b70 <HAL_GetTick>
 80053e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053e4:	f7ff fbc4 	bl	8004b70 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e167      	b.n	80056c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053f6:	4b0b      	ldr	r3, [pc, #44]	; (8005424 <HAL_RCC_OscConfig+0x240>)
 80053f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0f0      	beq.n	80053e4 <HAL_RCC_OscConfig+0x200>
 8005402:	e01b      	b.n	800543c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005404:	4b09      	ldr	r3, [pc, #36]	; (800542c <HAL_RCC_OscConfig+0x248>)
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800540a:	f7ff fbb1 	bl	8004b70 <HAL_GetTick>
 800540e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005410:	e00e      	b.n	8005430 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005412:	f7ff fbad 	bl	8004b70 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d907      	bls.n	8005430 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e150      	b.n	80056c6 <HAL_RCC_OscConfig+0x4e2>
 8005424:	40023800 	.word	0x40023800
 8005428:	42470000 	.word	0x42470000
 800542c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005430:	4b88      	ldr	r3, [pc, #544]	; (8005654 <HAL_RCC_OscConfig+0x470>)
 8005432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1ea      	bne.n	8005412 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 8097 	beq.w	8005578 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800544a:	2300      	movs	r3, #0
 800544c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800544e:	4b81      	ldr	r3, [pc, #516]	; (8005654 <HAL_RCC_OscConfig+0x470>)
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10f      	bne.n	800547a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800545a:	2300      	movs	r3, #0
 800545c:	60bb      	str	r3, [r7, #8]
 800545e:	4b7d      	ldr	r3, [pc, #500]	; (8005654 <HAL_RCC_OscConfig+0x470>)
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	4a7c      	ldr	r2, [pc, #496]	; (8005654 <HAL_RCC_OscConfig+0x470>)
 8005464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005468:	6413      	str	r3, [r2, #64]	; 0x40
 800546a:	4b7a      	ldr	r3, [pc, #488]	; (8005654 <HAL_RCC_OscConfig+0x470>)
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005472:	60bb      	str	r3, [r7, #8]
 8005474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005476:	2301      	movs	r3, #1
 8005478:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800547a:	4b77      	ldr	r3, [pc, #476]	; (8005658 <HAL_RCC_OscConfig+0x474>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005482:	2b00      	cmp	r3, #0
 8005484:	d118      	bne.n	80054b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005486:	4b74      	ldr	r3, [pc, #464]	; (8005658 <HAL_RCC_OscConfig+0x474>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a73      	ldr	r2, [pc, #460]	; (8005658 <HAL_RCC_OscConfig+0x474>)
 800548c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005492:	f7ff fb6d 	bl	8004b70 <HAL_GetTick>
 8005496:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005498:	e008      	b.n	80054ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800549a:	f7ff fb69 	bl	8004b70 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d901      	bls.n	80054ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e10c      	b.n	80056c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ac:	4b6a      	ldr	r3, [pc, #424]	; (8005658 <HAL_RCC_OscConfig+0x474>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0f0      	beq.n	800549a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d106      	bne.n	80054ce <HAL_RCC_OscConfig+0x2ea>
 80054c0:	4b64      	ldr	r3, [pc, #400]	; (8005654 <HAL_RCC_OscConfig+0x470>)
 80054c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c4:	4a63      	ldr	r2, [pc, #396]	; (8005654 <HAL_RCC_OscConfig+0x470>)
 80054c6:	f043 0301 	orr.w	r3, r3, #1
 80054ca:	6713      	str	r3, [r2, #112]	; 0x70
 80054cc:	e01c      	b.n	8005508 <HAL_RCC_OscConfig+0x324>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	2b05      	cmp	r3, #5
 80054d4:	d10c      	bne.n	80054f0 <HAL_RCC_OscConfig+0x30c>
 80054d6:	4b5f      	ldr	r3, [pc, #380]	; (8005654 <HAL_RCC_OscConfig+0x470>)
 80054d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054da:	4a5e      	ldr	r2, [pc, #376]	; (8005654 <HAL_RCC_OscConfig+0x470>)
 80054dc:	f043 0304 	orr.w	r3, r3, #4
 80054e0:	6713      	str	r3, [r2, #112]	; 0x70
 80054e2:	4b5c      	ldr	r3, [pc, #368]	; (8005654 <HAL_RCC_OscConfig+0x470>)
 80054e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e6:	4a5b      	ldr	r2, [pc, #364]	; (8005654 <HAL_RCC_OscConfig+0x470>)
 80054e8:	f043 0301 	orr.w	r3, r3, #1
 80054ec:	6713      	str	r3, [r2, #112]	; 0x70
 80054ee:	e00b      	b.n	8005508 <HAL_RCC_OscConfig+0x324>
 80054f0:	4b58      	ldr	r3, [pc, #352]	; (8005654 <HAL_RCC_OscConfig+0x470>)
 80054f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f4:	4a57      	ldr	r2, [pc, #348]	; (8005654 <HAL_RCC_OscConfig+0x470>)
 80054f6:	f023 0301 	bic.w	r3, r3, #1
 80054fa:	6713      	str	r3, [r2, #112]	; 0x70
 80054fc:	4b55      	ldr	r3, [pc, #340]	; (8005654 <HAL_RCC_OscConfig+0x470>)
 80054fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005500:	4a54      	ldr	r2, [pc, #336]	; (8005654 <HAL_RCC_OscConfig+0x470>)
 8005502:	f023 0304 	bic.w	r3, r3, #4
 8005506:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d015      	beq.n	800553c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005510:	f7ff fb2e 	bl	8004b70 <HAL_GetTick>
 8005514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005516:	e00a      	b.n	800552e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005518:	f7ff fb2a 	bl	8004b70 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	f241 3288 	movw	r2, #5000	; 0x1388
 8005526:	4293      	cmp	r3, r2
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e0cb      	b.n	80056c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800552e:	4b49      	ldr	r3, [pc, #292]	; (8005654 <HAL_RCC_OscConfig+0x470>)
 8005530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d0ee      	beq.n	8005518 <HAL_RCC_OscConfig+0x334>
 800553a:	e014      	b.n	8005566 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800553c:	f7ff fb18 	bl	8004b70 <HAL_GetTick>
 8005540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005542:	e00a      	b.n	800555a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005544:	f7ff fb14 	bl	8004b70 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005552:	4293      	cmp	r3, r2
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e0b5      	b.n	80056c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800555a:	4b3e      	ldr	r3, [pc, #248]	; (8005654 <HAL_RCC_OscConfig+0x470>)
 800555c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1ee      	bne.n	8005544 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005566:	7dfb      	ldrb	r3, [r7, #23]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d105      	bne.n	8005578 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800556c:	4b39      	ldr	r3, [pc, #228]	; (8005654 <HAL_RCC_OscConfig+0x470>)
 800556e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005570:	4a38      	ldr	r2, [pc, #224]	; (8005654 <HAL_RCC_OscConfig+0x470>)
 8005572:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005576:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 80a1 	beq.w	80056c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005582:	4b34      	ldr	r3, [pc, #208]	; (8005654 <HAL_RCC_OscConfig+0x470>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 030c 	and.w	r3, r3, #12
 800558a:	2b08      	cmp	r3, #8
 800558c:	d05c      	beq.n	8005648 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	2b02      	cmp	r3, #2
 8005594:	d141      	bne.n	800561a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005596:	4b31      	ldr	r3, [pc, #196]	; (800565c <HAL_RCC_OscConfig+0x478>)
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800559c:	f7ff fae8 	bl	8004b70 <HAL_GetTick>
 80055a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055a2:	e008      	b.n	80055b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055a4:	f7ff fae4 	bl	8004b70 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e087      	b.n	80056c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055b6:	4b27      	ldr	r3, [pc, #156]	; (8005654 <HAL_RCC_OscConfig+0x470>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1f0      	bne.n	80055a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	69da      	ldr	r2, [r3, #28]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	431a      	orrs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	019b      	lsls	r3, r3, #6
 80055d2:	431a      	orrs	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d8:	085b      	lsrs	r3, r3, #1
 80055da:	3b01      	subs	r3, #1
 80055dc:	041b      	lsls	r3, r3, #16
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e4:	061b      	lsls	r3, r3, #24
 80055e6:	491b      	ldr	r1, [pc, #108]	; (8005654 <HAL_RCC_OscConfig+0x470>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055ec:	4b1b      	ldr	r3, [pc, #108]	; (800565c <HAL_RCC_OscConfig+0x478>)
 80055ee:	2201      	movs	r2, #1
 80055f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f2:	f7ff fabd 	bl	8004b70 <HAL_GetTick>
 80055f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055f8:	e008      	b.n	800560c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055fa:	f7ff fab9 	bl	8004b70 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d901      	bls.n	800560c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e05c      	b.n	80056c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800560c:	4b11      	ldr	r3, [pc, #68]	; (8005654 <HAL_RCC_OscConfig+0x470>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0f0      	beq.n	80055fa <HAL_RCC_OscConfig+0x416>
 8005618:	e054      	b.n	80056c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800561a:	4b10      	ldr	r3, [pc, #64]	; (800565c <HAL_RCC_OscConfig+0x478>)
 800561c:	2200      	movs	r2, #0
 800561e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005620:	f7ff faa6 	bl	8004b70 <HAL_GetTick>
 8005624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005626:	e008      	b.n	800563a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005628:	f7ff faa2 	bl	8004b70 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b02      	cmp	r3, #2
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e045      	b.n	80056c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800563a:	4b06      	ldr	r3, [pc, #24]	; (8005654 <HAL_RCC_OscConfig+0x470>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1f0      	bne.n	8005628 <HAL_RCC_OscConfig+0x444>
 8005646:	e03d      	b.n	80056c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d107      	bne.n	8005660 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e038      	b.n	80056c6 <HAL_RCC_OscConfig+0x4e2>
 8005654:	40023800 	.word	0x40023800
 8005658:	40007000 	.word	0x40007000
 800565c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005660:	4b1b      	ldr	r3, [pc, #108]	; (80056d0 <HAL_RCC_OscConfig+0x4ec>)
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d028      	beq.n	80056c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005678:	429a      	cmp	r2, r3
 800567a:	d121      	bne.n	80056c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005686:	429a      	cmp	r2, r3
 8005688:	d11a      	bne.n	80056c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005690:	4013      	ands	r3, r2
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005696:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005698:	4293      	cmp	r3, r2
 800569a:	d111      	bne.n	80056c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a6:	085b      	lsrs	r3, r3, #1
 80056a8:	3b01      	subs	r3, #1
 80056aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d107      	bne.n	80056c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056bc:	429a      	cmp	r2, r3
 80056be:	d001      	beq.n	80056c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e000      	b.n	80056c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3718      	adds	r7, #24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	40023800 	.word	0x40023800

080056d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e0cc      	b.n	8005882 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056e8:	4b68      	ldr	r3, [pc, #416]	; (800588c <HAL_RCC_ClockConfig+0x1b8>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0307 	and.w	r3, r3, #7
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d90c      	bls.n	8005710 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056f6:	4b65      	ldr	r3, [pc, #404]	; (800588c <HAL_RCC_ClockConfig+0x1b8>)
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056fe:	4b63      	ldr	r3, [pc, #396]	; (800588c <HAL_RCC_ClockConfig+0x1b8>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0307 	and.w	r3, r3, #7
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	429a      	cmp	r2, r3
 800570a:	d001      	beq.n	8005710 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e0b8      	b.n	8005882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d020      	beq.n	800575e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	2b00      	cmp	r3, #0
 8005726:	d005      	beq.n	8005734 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005728:	4b59      	ldr	r3, [pc, #356]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	4a58      	ldr	r2, [pc, #352]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 800572e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005732:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0308 	and.w	r3, r3, #8
 800573c:	2b00      	cmp	r3, #0
 800573e:	d005      	beq.n	800574c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005740:	4b53      	ldr	r3, [pc, #332]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	4a52      	ldr	r2, [pc, #328]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 8005746:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800574a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800574c:	4b50      	ldr	r3, [pc, #320]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	494d      	ldr	r1, [pc, #308]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 800575a:	4313      	orrs	r3, r2
 800575c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d044      	beq.n	80057f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d107      	bne.n	8005782 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005772:	4b47      	ldr	r3, [pc, #284]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d119      	bne.n	80057b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e07f      	b.n	8005882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d003      	beq.n	8005792 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800578e:	2b03      	cmp	r3, #3
 8005790:	d107      	bne.n	80057a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005792:	4b3f      	ldr	r3, [pc, #252]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d109      	bne.n	80057b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e06f      	b.n	8005882 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057a2:	4b3b      	ldr	r3, [pc, #236]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e067      	b.n	8005882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057b2:	4b37      	ldr	r3, [pc, #220]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f023 0203 	bic.w	r2, r3, #3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	4934      	ldr	r1, [pc, #208]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057c4:	f7ff f9d4 	bl	8004b70 <HAL_GetTick>
 80057c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ca:	e00a      	b.n	80057e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057cc:	f7ff f9d0 	bl	8004b70 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057da:	4293      	cmp	r3, r2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e04f      	b.n	8005882 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057e2:	4b2b      	ldr	r3, [pc, #172]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 020c 	and.w	r2, r3, #12
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d1eb      	bne.n	80057cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057f4:	4b25      	ldr	r3, [pc, #148]	; (800588c <HAL_RCC_ClockConfig+0x1b8>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0307 	and.w	r3, r3, #7
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d20c      	bcs.n	800581c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005802:	4b22      	ldr	r3, [pc, #136]	; (800588c <HAL_RCC_ClockConfig+0x1b8>)
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	b2d2      	uxtb	r2, r2
 8005808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800580a:	4b20      	ldr	r3, [pc, #128]	; (800588c <HAL_RCC_ClockConfig+0x1b8>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	429a      	cmp	r2, r3
 8005816:	d001      	beq.n	800581c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e032      	b.n	8005882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	d008      	beq.n	800583a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005828:	4b19      	ldr	r3, [pc, #100]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	4916      	ldr	r1, [pc, #88]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 8005836:	4313      	orrs	r3, r2
 8005838:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0308 	and.w	r3, r3, #8
 8005842:	2b00      	cmp	r3, #0
 8005844:	d009      	beq.n	800585a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005846:	4b12      	ldr	r3, [pc, #72]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	490e      	ldr	r1, [pc, #56]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 8005856:	4313      	orrs	r3, r2
 8005858:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800585a:	f000 f821 	bl	80058a0 <HAL_RCC_GetSysClockFreq>
 800585e:	4602      	mov	r2, r0
 8005860:	4b0b      	ldr	r3, [pc, #44]	; (8005890 <HAL_RCC_ClockConfig+0x1bc>)
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	091b      	lsrs	r3, r3, #4
 8005866:	f003 030f 	and.w	r3, r3, #15
 800586a:	490a      	ldr	r1, [pc, #40]	; (8005894 <HAL_RCC_ClockConfig+0x1c0>)
 800586c:	5ccb      	ldrb	r3, [r1, r3]
 800586e:	fa22 f303 	lsr.w	r3, r2, r3
 8005872:	4a09      	ldr	r2, [pc, #36]	; (8005898 <HAL_RCC_ClockConfig+0x1c4>)
 8005874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005876:	4b09      	ldr	r3, [pc, #36]	; (800589c <HAL_RCC_ClockConfig+0x1c8>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4618      	mov	r0, r3
 800587c:	f7fc feb8 	bl	80025f0 <HAL_InitTick>

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	40023c00 	.word	0x40023c00
 8005890:	40023800 	.word	0x40023800
 8005894:	080226b4 	.word	0x080226b4
 8005898:	20000000 	.word	0x20000000
 800589c:	200000bc 	.word	0x200000bc

080058a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058a4:	b094      	sub	sp, #80	; 0x50
 80058a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	647b      	str	r3, [r7, #68]	; 0x44
 80058ac:	2300      	movs	r3, #0
 80058ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058b0:	2300      	movs	r3, #0
 80058b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058b8:	4b79      	ldr	r3, [pc, #484]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f003 030c 	and.w	r3, r3, #12
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d00d      	beq.n	80058e0 <HAL_RCC_GetSysClockFreq+0x40>
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	f200 80e1 	bhi.w	8005a8c <HAL_RCC_GetSysClockFreq+0x1ec>
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d002      	beq.n	80058d4 <HAL_RCC_GetSysClockFreq+0x34>
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	d003      	beq.n	80058da <HAL_RCC_GetSysClockFreq+0x3a>
 80058d2:	e0db      	b.n	8005a8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058d4:	4b73      	ldr	r3, [pc, #460]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x204>)
 80058d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80058d8:	e0db      	b.n	8005a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058da:	4b73      	ldr	r3, [pc, #460]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x208>)
 80058dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058de:	e0d8      	b.n	8005a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058e0:	4b6f      	ldr	r3, [pc, #444]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058ea:	4b6d      	ldr	r3, [pc, #436]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d063      	beq.n	80059be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058f6:	4b6a      	ldr	r3, [pc, #424]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	099b      	lsrs	r3, r3, #6
 80058fc:	2200      	movs	r2, #0
 80058fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005900:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005908:	633b      	str	r3, [r7, #48]	; 0x30
 800590a:	2300      	movs	r3, #0
 800590c:	637b      	str	r3, [r7, #52]	; 0x34
 800590e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005912:	4622      	mov	r2, r4
 8005914:	462b      	mov	r3, r5
 8005916:	f04f 0000 	mov.w	r0, #0
 800591a:	f04f 0100 	mov.w	r1, #0
 800591e:	0159      	lsls	r1, r3, #5
 8005920:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005924:	0150      	lsls	r0, r2, #5
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	4621      	mov	r1, r4
 800592c:	1a51      	subs	r1, r2, r1
 800592e:	6139      	str	r1, [r7, #16]
 8005930:	4629      	mov	r1, r5
 8005932:	eb63 0301 	sbc.w	r3, r3, r1
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	f04f 0200 	mov.w	r2, #0
 800593c:	f04f 0300 	mov.w	r3, #0
 8005940:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005944:	4659      	mov	r1, fp
 8005946:	018b      	lsls	r3, r1, #6
 8005948:	4651      	mov	r1, sl
 800594a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800594e:	4651      	mov	r1, sl
 8005950:	018a      	lsls	r2, r1, #6
 8005952:	4651      	mov	r1, sl
 8005954:	ebb2 0801 	subs.w	r8, r2, r1
 8005958:	4659      	mov	r1, fp
 800595a:	eb63 0901 	sbc.w	r9, r3, r1
 800595e:	f04f 0200 	mov.w	r2, #0
 8005962:	f04f 0300 	mov.w	r3, #0
 8005966:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800596a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800596e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005972:	4690      	mov	r8, r2
 8005974:	4699      	mov	r9, r3
 8005976:	4623      	mov	r3, r4
 8005978:	eb18 0303 	adds.w	r3, r8, r3
 800597c:	60bb      	str	r3, [r7, #8]
 800597e:	462b      	mov	r3, r5
 8005980:	eb49 0303 	adc.w	r3, r9, r3
 8005984:	60fb      	str	r3, [r7, #12]
 8005986:	f04f 0200 	mov.w	r2, #0
 800598a:	f04f 0300 	mov.w	r3, #0
 800598e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005992:	4629      	mov	r1, r5
 8005994:	024b      	lsls	r3, r1, #9
 8005996:	4621      	mov	r1, r4
 8005998:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800599c:	4621      	mov	r1, r4
 800599e:	024a      	lsls	r2, r1, #9
 80059a0:	4610      	mov	r0, r2
 80059a2:	4619      	mov	r1, r3
 80059a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059a6:	2200      	movs	r2, #0
 80059a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80059aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059b0:	f7fb f982 	bl	8000cb8 <__aeabi_uldivmod>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4613      	mov	r3, r2
 80059ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059bc:	e058      	b.n	8005a70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059be:	4b38      	ldr	r3, [pc, #224]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	099b      	lsrs	r3, r3, #6
 80059c4:	2200      	movs	r2, #0
 80059c6:	4618      	mov	r0, r3
 80059c8:	4611      	mov	r1, r2
 80059ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80059ce:	623b      	str	r3, [r7, #32]
 80059d0:	2300      	movs	r3, #0
 80059d2:	627b      	str	r3, [r7, #36]	; 0x24
 80059d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80059d8:	4642      	mov	r2, r8
 80059da:	464b      	mov	r3, r9
 80059dc:	f04f 0000 	mov.w	r0, #0
 80059e0:	f04f 0100 	mov.w	r1, #0
 80059e4:	0159      	lsls	r1, r3, #5
 80059e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059ea:	0150      	lsls	r0, r2, #5
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	4641      	mov	r1, r8
 80059f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80059f6:	4649      	mov	r1, r9
 80059f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80059fc:	f04f 0200 	mov.w	r2, #0
 8005a00:	f04f 0300 	mov.w	r3, #0
 8005a04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a10:	ebb2 040a 	subs.w	r4, r2, sl
 8005a14:	eb63 050b 	sbc.w	r5, r3, fp
 8005a18:	f04f 0200 	mov.w	r2, #0
 8005a1c:	f04f 0300 	mov.w	r3, #0
 8005a20:	00eb      	lsls	r3, r5, #3
 8005a22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a26:	00e2      	lsls	r2, r4, #3
 8005a28:	4614      	mov	r4, r2
 8005a2a:	461d      	mov	r5, r3
 8005a2c:	4643      	mov	r3, r8
 8005a2e:	18e3      	adds	r3, r4, r3
 8005a30:	603b      	str	r3, [r7, #0]
 8005a32:	464b      	mov	r3, r9
 8005a34:	eb45 0303 	adc.w	r3, r5, r3
 8005a38:	607b      	str	r3, [r7, #4]
 8005a3a:	f04f 0200 	mov.w	r2, #0
 8005a3e:	f04f 0300 	mov.w	r3, #0
 8005a42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a46:	4629      	mov	r1, r5
 8005a48:	028b      	lsls	r3, r1, #10
 8005a4a:	4621      	mov	r1, r4
 8005a4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a50:	4621      	mov	r1, r4
 8005a52:	028a      	lsls	r2, r1, #10
 8005a54:	4610      	mov	r0, r2
 8005a56:	4619      	mov	r1, r3
 8005a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	61bb      	str	r3, [r7, #24]
 8005a5e:	61fa      	str	r2, [r7, #28]
 8005a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a64:	f7fb f928 	bl	8000cb8 <__aeabi_uldivmod>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a70:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	0c1b      	lsrs	r3, r3, #16
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005a80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a8a:	e002      	b.n	8005a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a8c:	4b05      	ldr	r3, [pc, #20]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3750      	adds	r7, #80	; 0x50
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a9e:	bf00      	nop
 8005aa0:	40023800 	.word	0x40023800
 8005aa4:	00f42400 	.word	0x00f42400
 8005aa8:	007a1200 	.word	0x007a1200

08005aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ab0:	4b03      	ldr	r3, [pc, #12]	; (8005ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	20000000 	.word	0x20000000

08005ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ac8:	f7ff fff0 	bl	8005aac <HAL_RCC_GetHCLKFreq>
 8005acc:	4602      	mov	r2, r0
 8005ace:	4b05      	ldr	r3, [pc, #20]	; (8005ae4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	0a9b      	lsrs	r3, r3, #10
 8005ad4:	f003 0307 	and.w	r3, r3, #7
 8005ad8:	4903      	ldr	r1, [pc, #12]	; (8005ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ada:	5ccb      	ldrb	r3, [r1, r3]
 8005adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	40023800 	.word	0x40023800
 8005ae8:	080226c4 	.word	0x080226c4

08005aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005af0:	f7ff ffdc 	bl	8005aac <HAL_RCC_GetHCLKFreq>
 8005af4:	4602      	mov	r2, r0
 8005af6:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	0b5b      	lsrs	r3, r3, #13
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	4903      	ldr	r1, [pc, #12]	; (8005b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b02:	5ccb      	ldrb	r3, [r1, r3]
 8005b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	40023800 	.word	0x40023800
 8005b10:	080226c4 	.word	0x080226c4

08005b14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	220f      	movs	r2, #15
 8005b22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005b24:	4b12      	ldr	r3, [pc, #72]	; (8005b70 <HAL_RCC_GetClockConfig+0x5c>)
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f003 0203 	and.w	r2, r3, #3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005b30:	4b0f      	ldr	r3, [pc, #60]	; (8005b70 <HAL_RCC_GetClockConfig+0x5c>)
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005b3c:	4b0c      	ldr	r3, [pc, #48]	; (8005b70 <HAL_RCC_GetClockConfig+0x5c>)
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005b48:	4b09      	ldr	r3, [pc, #36]	; (8005b70 <HAL_RCC_GetClockConfig+0x5c>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	08db      	lsrs	r3, r3, #3
 8005b4e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005b56:	4b07      	ldr	r3, [pc, #28]	; (8005b74 <HAL_RCC_GetClockConfig+0x60>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0207 	and.w	r2, r3, #7
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	601a      	str	r2, [r3, #0]
}
 8005b62:	bf00      	nop
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	40023800 	.word	0x40023800
 8005b74:	40023c00 	.word	0x40023c00

08005b78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e07b      	b.n	8005c82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d108      	bne.n	8005ba4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b9a:	d009      	beq.n	8005bb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	61da      	str	r2, [r3, #28]
 8005ba2:	e005      	b.n	8005bb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d106      	bne.n	8005bd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7fc fc42 	bl	8002454 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005be6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c02:	431a      	orrs	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	f003 0302 	and.w	r3, r3, #2
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	431a      	orrs	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c20:	431a      	orrs	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c34:	ea42 0103 	orr.w	r1, r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	0c1b      	lsrs	r3, r3, #16
 8005c4e:	f003 0104 	and.w	r1, r3, #4
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	f003 0210 	and.w	r2, r3, #16
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	69da      	ldr	r2, [r3, #28]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b088      	sub	sp, #32
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	60f8      	str	r0, [r7, #12]
 8005c92:	60b9      	str	r1, [r7, #8]
 8005c94:	603b      	str	r3, [r7, #0]
 8005c96:	4613      	mov	r3, r2
 8005c98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d101      	bne.n	8005cac <HAL_SPI_Transmit+0x22>
 8005ca8:	2302      	movs	r3, #2
 8005caa:	e12d      	b.n	8005f08 <HAL_SPI_Transmit+0x27e>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cb4:	f7fe ff5c 	bl	8004b70 <HAL_GetTick>
 8005cb8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005cba:	88fb      	ldrh	r3, [r7, #6]
 8005cbc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d002      	beq.n	8005cd0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005cca:	2302      	movs	r3, #2
 8005ccc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005cce:	e116      	b.n	8005efe <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <HAL_SPI_Transmit+0x52>
 8005cd6:	88fb      	ldrh	r3, [r7, #6]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d102      	bne.n	8005ce2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ce0:	e10d      	b.n	8005efe <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2203      	movs	r2, #3
 8005ce6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	88fa      	ldrh	r2, [r7, #6]
 8005cfa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	88fa      	ldrh	r2, [r7, #6]
 8005d00:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d28:	d10f      	bne.n	8005d4a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d54:	2b40      	cmp	r3, #64	; 0x40
 8005d56:	d007      	beq.n	8005d68 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d70:	d14f      	bne.n	8005e12 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d002      	beq.n	8005d80 <HAL_SPI_Transmit+0xf6>
 8005d7a:	8afb      	ldrh	r3, [r7, #22]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d142      	bne.n	8005e06 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d84:	881a      	ldrh	r2, [r3, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d90:	1c9a      	adds	r2, r3, #2
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005da4:	e02f      	b.n	8005e06 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d112      	bne.n	8005dda <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db8:	881a      	ldrh	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc4:	1c9a      	adds	r2, r3, #2
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	86da      	strh	r2, [r3, #54]	; 0x36
 8005dd8:	e015      	b.n	8005e06 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dda:	f7fe fec9 	bl	8004b70 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d803      	bhi.n	8005df2 <HAL_SPI_Transmit+0x168>
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df0:	d102      	bne.n	8005df8 <HAL_SPI_Transmit+0x16e>
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d106      	bne.n	8005e06 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005e04:	e07b      	b.n	8005efe <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1ca      	bne.n	8005da6 <HAL_SPI_Transmit+0x11c>
 8005e10:	e050      	b.n	8005eb4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d002      	beq.n	8005e20 <HAL_SPI_Transmit+0x196>
 8005e1a:	8afb      	ldrh	r3, [r7, #22]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d144      	bne.n	8005eaa <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	330c      	adds	r3, #12
 8005e2a:	7812      	ldrb	r2, [r2, #0]
 8005e2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005e46:	e030      	b.n	8005eaa <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d113      	bne.n	8005e7e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	330c      	adds	r3, #12
 8005e60:	7812      	ldrb	r2, [r2, #0]
 8005e62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e68:	1c5a      	adds	r2, r3, #1
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	3b01      	subs	r3, #1
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e7c:	e015      	b.n	8005eaa <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e7e:	f7fe fe77 	bl	8004b70 <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d803      	bhi.n	8005e96 <HAL_SPI_Transmit+0x20c>
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e94:	d102      	bne.n	8005e9c <HAL_SPI_Transmit+0x212>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d106      	bne.n	8005eaa <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005ea8:	e029      	b.n	8005efe <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1c9      	bne.n	8005e48 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	6839      	ldr	r1, [r7, #0]
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 fbdf 	bl	800667c <SPI_EndRxTxTransaction>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10a      	bne.n	8005ee8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	613b      	str	r3, [r7, #16]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	613b      	str	r3, [r7, #16]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	613b      	str	r3, [r7, #16]
 8005ee6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d002      	beq.n	8005ef6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	77fb      	strb	r3, [r7, #31]
 8005ef4:	e003      	b.n	8005efe <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f06:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3720      	adds	r7, #32
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b088      	sub	sp, #32
 8005f14:	af02      	add	r7, sp, #8
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	603b      	str	r3, [r7, #0]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f20:	2300      	movs	r3, #0
 8005f22:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d002      	beq.n	8005f36 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005f30:	2302      	movs	r3, #2
 8005f32:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f34:	e0fb      	b.n	800612e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f3e:	d112      	bne.n	8005f66 <HAL_SPI_Receive+0x56>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10e      	bne.n	8005f66 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2204      	movs	r2, #4
 8005f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005f50:	88fa      	ldrh	r2, [r7, #6]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	4613      	mov	r3, r2
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	68b9      	ldr	r1, [r7, #8]
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 f8ef 	bl	8006140 <HAL_SPI_TransmitReceive>
 8005f62:	4603      	mov	r3, r0
 8005f64:	e0e8      	b.n	8006138 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d101      	bne.n	8005f74 <HAL_SPI_Receive+0x64>
 8005f70:	2302      	movs	r3, #2
 8005f72:	e0e1      	b.n	8006138 <HAL_SPI_Receive+0x228>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f7c:	f7fe fdf8 	bl	8004b70 <HAL_GetTick>
 8005f80:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d002      	beq.n	8005f8e <HAL_SPI_Receive+0x7e>
 8005f88:	88fb      	ldrh	r3, [r7, #6]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d102      	bne.n	8005f94 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f92:	e0cc      	b.n	800612e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2204      	movs	r2, #4
 8005f98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	88fa      	ldrh	r2, [r7, #6]
 8005fac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	88fa      	ldrh	r2, [r7, #6]
 8005fb2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fda:	d10f      	bne.n	8005ffc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ffa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006006:	2b40      	cmp	r3, #64	; 0x40
 8006008:	d007      	beq.n	800601a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006018:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d16a      	bne.n	80060f8 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006022:	e032      	b.n	800608a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	2b01      	cmp	r3, #1
 8006030:	d115      	bne.n	800605e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f103 020c 	add.w	r2, r3, #12
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603e:	7812      	ldrb	r2, [r2, #0]
 8006040:	b2d2      	uxtb	r2, r2
 8006042:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006052:	b29b      	uxth	r3, r3
 8006054:	3b01      	subs	r3, #1
 8006056:	b29a      	uxth	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800605c:	e015      	b.n	800608a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800605e:	f7fe fd87 	bl	8004b70 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	429a      	cmp	r2, r3
 800606c:	d803      	bhi.n	8006076 <HAL_SPI_Receive+0x166>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006074:	d102      	bne.n	800607c <HAL_SPI_Receive+0x16c>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d106      	bne.n	800608a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006088:	e051      	b.n	800612e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800608e:	b29b      	uxth	r3, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1c7      	bne.n	8006024 <HAL_SPI_Receive+0x114>
 8006094:	e035      	b.n	8006102 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d113      	bne.n	80060cc <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68da      	ldr	r2, [r3, #12]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ae:	b292      	uxth	r2, r2
 80060b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b6:	1c9a      	adds	r2, r3, #2
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	3b01      	subs	r3, #1
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060ca:	e015      	b.n	80060f8 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060cc:	f7fe fd50 	bl	8004b70 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d803      	bhi.n	80060e4 <HAL_SPI_Receive+0x1d4>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e2:	d102      	bne.n	80060ea <HAL_SPI_Receive+0x1da>
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d106      	bne.n	80060f8 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80060f6:	e01a      	b.n	800612e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1c9      	bne.n	8006096 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	6839      	ldr	r1, [r7, #0]
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 fa52 	bl	80065b0 <SPI_EndRxTransaction>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2220      	movs	r2, #32
 8006116:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	75fb      	strb	r3, [r7, #23]
 8006124:	e003      	b.n	800612e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006136:	7dfb      	ldrb	r3, [r7, #23]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3718      	adds	r7, #24
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b08c      	sub	sp, #48	; 0x30
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800614e:	2301      	movs	r3, #1
 8006150:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006152:	2300      	movs	r3, #0
 8006154:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800615e:	2b01      	cmp	r3, #1
 8006160:	d101      	bne.n	8006166 <HAL_SPI_TransmitReceive+0x26>
 8006162:	2302      	movs	r3, #2
 8006164:	e198      	b.n	8006498 <HAL_SPI_TransmitReceive+0x358>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800616e:	f7fe fcff 	bl	8004b70 <HAL_GetTick>
 8006172:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800617a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006184:	887b      	ldrh	r3, [r7, #2]
 8006186:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006188:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800618c:	2b01      	cmp	r3, #1
 800618e:	d00f      	beq.n	80061b0 <HAL_SPI_TransmitReceive+0x70>
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006196:	d107      	bne.n	80061a8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d103      	bne.n	80061a8 <HAL_SPI_TransmitReceive+0x68>
 80061a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	d003      	beq.n	80061b0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80061a8:	2302      	movs	r3, #2
 80061aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80061ae:	e16d      	b.n	800648c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d005      	beq.n	80061c2 <HAL_SPI_TransmitReceive+0x82>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d002      	beq.n	80061c2 <HAL_SPI_TransmitReceive+0x82>
 80061bc:	887b      	ldrh	r3, [r7, #2]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d103      	bne.n	80061ca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80061c8:	e160      	b.n	800648c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	d003      	beq.n	80061de <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2205      	movs	r2, #5
 80061da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	887a      	ldrh	r2, [r7, #2]
 80061ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	887a      	ldrh	r2, [r7, #2]
 80061f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	887a      	ldrh	r2, [r7, #2]
 8006200:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	887a      	ldrh	r2, [r7, #2]
 8006206:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800621e:	2b40      	cmp	r3, #64	; 0x40
 8006220:	d007      	beq.n	8006232 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006230:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800623a:	d17c      	bne.n	8006336 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d002      	beq.n	800624a <HAL_SPI_TransmitReceive+0x10a>
 8006244:	8b7b      	ldrh	r3, [r7, #26]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d16a      	bne.n	8006320 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624e:	881a      	ldrh	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625a:	1c9a      	adds	r2, r3, #2
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006264:	b29b      	uxth	r3, r3
 8006266:	3b01      	subs	r3, #1
 8006268:	b29a      	uxth	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800626e:	e057      	b.n	8006320 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b02      	cmp	r3, #2
 800627c:	d11b      	bne.n	80062b6 <HAL_SPI_TransmitReceive+0x176>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006282:	b29b      	uxth	r3, r3
 8006284:	2b00      	cmp	r3, #0
 8006286:	d016      	beq.n	80062b6 <HAL_SPI_TransmitReceive+0x176>
 8006288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628a:	2b01      	cmp	r3, #1
 800628c:	d113      	bne.n	80062b6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006292:	881a      	ldrh	r2, [r3, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629e:	1c9a      	adds	r2, r3, #2
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	3b01      	subs	r3, #1
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062b2:	2300      	movs	r3, #0
 80062b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d119      	bne.n	80062f8 <HAL_SPI_TransmitReceive+0x1b8>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d014      	beq.n	80062f8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68da      	ldr	r2, [r3, #12]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d8:	b292      	uxth	r2, r2
 80062da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e0:	1c9a      	adds	r2, r3, #2
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	3b01      	subs	r3, #1
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062f4:	2301      	movs	r3, #1
 80062f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80062f8:	f7fe fc3a 	bl	8004b70 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006304:	429a      	cmp	r2, r3
 8006306:	d80b      	bhi.n	8006320 <HAL_SPI_TransmitReceive+0x1e0>
 8006308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630e:	d007      	beq.n	8006320 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800631e:	e0b5      	b.n	800648c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006324:	b29b      	uxth	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1a2      	bne.n	8006270 <HAL_SPI_TransmitReceive+0x130>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800632e:	b29b      	uxth	r3, r3
 8006330:	2b00      	cmp	r3, #0
 8006332:	d19d      	bne.n	8006270 <HAL_SPI_TransmitReceive+0x130>
 8006334:	e080      	b.n	8006438 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d002      	beq.n	8006344 <HAL_SPI_TransmitReceive+0x204>
 800633e:	8b7b      	ldrh	r3, [r7, #26]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d16f      	bne.n	8006424 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	330c      	adds	r3, #12
 800634e:	7812      	ldrb	r2, [r2, #0]
 8006350:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006360:	b29b      	uxth	r3, r3
 8006362:	3b01      	subs	r3, #1
 8006364:	b29a      	uxth	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800636a:	e05b      	b.n	8006424 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b02      	cmp	r3, #2
 8006378:	d11c      	bne.n	80063b4 <HAL_SPI_TransmitReceive+0x274>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800637e:	b29b      	uxth	r3, r3
 8006380:	2b00      	cmp	r3, #0
 8006382:	d017      	beq.n	80063b4 <HAL_SPI_TransmitReceive+0x274>
 8006384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006386:	2b01      	cmp	r3, #1
 8006388:	d114      	bne.n	80063b4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	330c      	adds	r3, #12
 8006394:	7812      	ldrb	r2, [r2, #0]
 8006396:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639c:	1c5a      	adds	r2, r3, #1
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	3b01      	subs	r3, #1
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063b0:	2300      	movs	r3, #0
 80063b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d119      	bne.n	80063f6 <HAL_SPI_TransmitReceive+0x2b6>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d014      	beq.n	80063f6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68da      	ldr	r2, [r3, #12]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d6:	b2d2      	uxtb	r2, r2
 80063d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063de:	1c5a      	adds	r2, r3, #1
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	3b01      	subs	r3, #1
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063f2:	2301      	movs	r3, #1
 80063f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80063f6:	f7fe fbbb 	bl	8004b70 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006402:	429a      	cmp	r2, r3
 8006404:	d803      	bhi.n	800640e <HAL_SPI_TransmitReceive+0x2ce>
 8006406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800640c:	d102      	bne.n	8006414 <HAL_SPI_TransmitReceive+0x2d4>
 800640e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006410:	2b00      	cmp	r3, #0
 8006412:	d107      	bne.n	8006424 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006422:	e033      	b.n	800648c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006428:	b29b      	uxth	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d19e      	bne.n	800636c <HAL_SPI_TransmitReceive+0x22c>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006432:	b29b      	uxth	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d199      	bne.n	800636c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800643a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 f91d 	bl	800667c <SPI_EndRxTxTransaction>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d006      	beq.n	8006456 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2220      	movs	r2, #32
 8006452:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006454:	e01a      	b.n	800648c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10a      	bne.n	8006474 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800645e:	2300      	movs	r3, #0
 8006460:	617b      	str	r3, [r7, #20]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	617b      	str	r3, [r7, #20]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	617b      	str	r3, [r7, #20]
 8006472:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006478:	2b00      	cmp	r3, #0
 800647a:	d003      	beq.n	8006484 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006482:	e003      	b.n	800648c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006494:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006498:	4618      	mov	r0, r3
 800649a:	3730      	adds	r7, #48	; 0x30
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b088      	sub	sp, #32
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	603b      	str	r3, [r7, #0]
 80064ac:	4613      	mov	r3, r2
 80064ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80064b0:	f7fe fb5e 	bl	8004b70 <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b8:	1a9b      	subs	r3, r3, r2
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	4413      	add	r3, r2
 80064be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80064c0:	f7fe fb56 	bl	8004b70 <HAL_GetTick>
 80064c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80064c6:	4b39      	ldr	r3, [pc, #228]	; (80065ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	015b      	lsls	r3, r3, #5
 80064cc:	0d1b      	lsrs	r3, r3, #20
 80064ce:	69fa      	ldr	r2, [r7, #28]
 80064d0:	fb02 f303 	mul.w	r3, r2, r3
 80064d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064d6:	e054      	b.n	8006582 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064de:	d050      	beq.n	8006582 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064e0:	f7fe fb46 	bl	8004b70 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	69fa      	ldr	r2, [r7, #28]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d902      	bls.n	80064f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d13d      	bne.n	8006572 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006504:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800650e:	d111      	bne.n	8006534 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006518:	d004      	beq.n	8006524 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006522:	d107      	bne.n	8006534 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006532:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800653c:	d10f      	bne.n	800655e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800654c:	601a      	str	r2, [r3, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800655c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e017      	b.n	80065a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006578:	2300      	movs	r3, #0
 800657a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	3b01      	subs	r3, #1
 8006580:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689a      	ldr	r2, [r3, #8]
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	4013      	ands	r3, r2
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	429a      	cmp	r2, r3
 8006590:	bf0c      	ite	eq
 8006592:	2301      	moveq	r3, #1
 8006594:	2300      	movne	r3, #0
 8006596:	b2db      	uxtb	r3, r3
 8006598:	461a      	mov	r2, r3
 800659a:	79fb      	ldrb	r3, [r7, #7]
 800659c:	429a      	cmp	r2, r3
 800659e:	d19b      	bne.n	80064d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3720      	adds	r7, #32
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	20000000 	.word	0x20000000

080065b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af02      	add	r7, sp, #8
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065c4:	d111      	bne.n	80065ea <SPI_EndRxTransaction+0x3a>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065ce:	d004      	beq.n	80065da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065d8:	d107      	bne.n	80065ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065e8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065f2:	d12a      	bne.n	800664a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065fc:	d012      	beq.n	8006624 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2200      	movs	r2, #0
 8006606:	2180      	movs	r1, #128	; 0x80
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f7ff ff49 	bl	80064a0 <SPI_WaitFlagStateUntilTimeout>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d02d      	beq.n	8006670 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006618:	f043 0220 	orr.w	r2, r3, #32
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e026      	b.n	8006672 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	2200      	movs	r2, #0
 800662c:	2101      	movs	r1, #1
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f7ff ff36 	bl	80064a0 <SPI_WaitFlagStateUntilTimeout>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d01a      	beq.n	8006670 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800663e:	f043 0220 	orr.w	r2, r3, #32
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e013      	b.n	8006672 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2200      	movs	r2, #0
 8006652:	2101      	movs	r1, #1
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f7ff ff23 	bl	80064a0 <SPI_WaitFlagStateUntilTimeout>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d007      	beq.n	8006670 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006664:	f043 0220 	orr.w	r2, r3, #32
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e000      	b.n	8006672 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
	...

0800667c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b088      	sub	sp, #32
 8006680:	af02      	add	r7, sp, #8
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2201      	movs	r2, #1
 8006690:	2102      	movs	r1, #2
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f7ff ff04 	bl	80064a0 <SPI_WaitFlagStateUntilTimeout>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d007      	beq.n	80066ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a2:	f043 0220 	orr.w	r2, r3, #32
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e032      	b.n	8006714 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80066ae:	4b1b      	ldr	r3, [pc, #108]	; (800671c <SPI_EndRxTxTransaction+0xa0>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a1b      	ldr	r2, [pc, #108]	; (8006720 <SPI_EndRxTxTransaction+0xa4>)
 80066b4:	fba2 2303 	umull	r2, r3, r2, r3
 80066b8:	0d5b      	lsrs	r3, r3, #21
 80066ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80066be:	fb02 f303 	mul.w	r3, r2, r3
 80066c2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066cc:	d112      	bne.n	80066f4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	2200      	movs	r2, #0
 80066d6:	2180      	movs	r1, #128	; 0x80
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f7ff fee1 	bl	80064a0 <SPI_WaitFlagStateUntilTimeout>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d016      	beq.n	8006712 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e8:	f043 0220 	orr.w	r2, r3, #32
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e00f      	b.n	8006714 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	3b01      	subs	r3, #1
 80066fe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800670a:	2b80      	cmp	r3, #128	; 0x80
 800670c:	d0f2      	beq.n	80066f4 <SPI_EndRxTxTransaction+0x78>
 800670e:	e000      	b.n	8006712 <SPI_EndRxTxTransaction+0x96>
        break;
 8006710:	bf00      	nop
  }

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3718      	adds	r7, #24
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	20000000 	.word	0x20000000
 8006720:	165e9f81 	.word	0x165e9f81

08006724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e041      	b.n	80067ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d106      	bne.n	8006750 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f839 	bl	80067c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	3304      	adds	r3, #4
 8006760:	4619      	mov	r1, r3
 8006762:	4610      	mov	r0, r2
 8006764:	f000 f9b2 	bl	8006acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80067ca:	bf00      	nop
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
	...

080067d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d001      	beq.n	80067f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e044      	b.n	800687a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2202      	movs	r2, #2
 80067f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68da      	ldr	r2, [r3, #12]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f042 0201 	orr.w	r2, r2, #1
 8006806:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a1e      	ldr	r2, [pc, #120]	; (8006888 <HAL_TIM_Base_Start_IT+0xb0>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d018      	beq.n	8006844 <HAL_TIM_Base_Start_IT+0x6c>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800681a:	d013      	beq.n	8006844 <HAL_TIM_Base_Start_IT+0x6c>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a1a      	ldr	r2, [pc, #104]	; (800688c <HAL_TIM_Base_Start_IT+0xb4>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d00e      	beq.n	8006844 <HAL_TIM_Base_Start_IT+0x6c>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a19      	ldr	r2, [pc, #100]	; (8006890 <HAL_TIM_Base_Start_IT+0xb8>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d009      	beq.n	8006844 <HAL_TIM_Base_Start_IT+0x6c>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a17      	ldr	r2, [pc, #92]	; (8006894 <HAL_TIM_Base_Start_IT+0xbc>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d004      	beq.n	8006844 <HAL_TIM_Base_Start_IT+0x6c>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a16      	ldr	r2, [pc, #88]	; (8006898 <HAL_TIM_Base_Start_IT+0xc0>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d111      	bne.n	8006868 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f003 0307 	and.w	r3, r3, #7
 800684e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2b06      	cmp	r3, #6
 8006854:	d010      	beq.n	8006878 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f042 0201 	orr.w	r2, r2, #1
 8006864:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006866:	e007      	b.n	8006878 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f042 0201 	orr.w	r2, r2, #1
 8006876:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	40010000 	.word	0x40010000
 800688c:	40000400 	.word	0x40000400
 8006890:	40000800 	.word	0x40000800
 8006894:	40000c00 	.word	0x40000c00
 8006898:	40014000 	.word	0x40014000

0800689c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d020      	beq.n	8006900 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d01b      	beq.n	8006900 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f06f 0202 	mvn.w	r2, #2
 80068d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	f003 0303 	and.w	r3, r3, #3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f8d2 	bl	8006a90 <HAL_TIM_IC_CaptureCallback>
 80068ec:	e005      	b.n	80068fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f8c4 	bl	8006a7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f8d5 	bl	8006aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f003 0304 	and.w	r3, r3, #4
 8006906:	2b00      	cmp	r3, #0
 8006908:	d020      	beq.n	800694c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f003 0304 	and.w	r3, r3, #4
 8006910:	2b00      	cmp	r3, #0
 8006912:	d01b      	beq.n	800694c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f06f 0204 	mvn.w	r2, #4
 800691c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2202      	movs	r2, #2
 8006922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800692e:	2b00      	cmp	r3, #0
 8006930:	d003      	beq.n	800693a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f8ac 	bl	8006a90 <HAL_TIM_IC_CaptureCallback>
 8006938:	e005      	b.n	8006946 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f89e 	bl	8006a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f8af 	bl	8006aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f003 0308 	and.w	r3, r3, #8
 8006952:	2b00      	cmp	r3, #0
 8006954:	d020      	beq.n	8006998 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f003 0308 	and.w	r3, r3, #8
 800695c:	2b00      	cmp	r3, #0
 800695e:	d01b      	beq.n	8006998 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f06f 0208 	mvn.w	r2, #8
 8006968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2204      	movs	r2, #4
 800696e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	f003 0303 	and.w	r3, r3, #3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d003      	beq.n	8006986 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f886 	bl	8006a90 <HAL_TIM_IC_CaptureCallback>
 8006984:	e005      	b.n	8006992 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f878 	bl	8006a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f889 	bl	8006aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	f003 0310 	and.w	r3, r3, #16
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d020      	beq.n	80069e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f003 0310 	and.w	r3, r3, #16
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d01b      	beq.n	80069e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f06f 0210 	mvn.w	r2, #16
 80069b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2208      	movs	r2, #8
 80069ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f860 	bl	8006a90 <HAL_TIM_IC_CaptureCallback>
 80069d0:	e005      	b.n	80069de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f852 	bl	8006a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f863 	bl	8006aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00c      	beq.n	8006a08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f003 0301 	and.w	r3, r3, #1
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d007      	beq.n	8006a08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f06f 0201 	mvn.w	r2, #1
 8006a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f7fb fcc0 	bl	8002388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00c      	beq.n	8006a2c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d007      	beq.n	8006a2c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f8e6 	bl	8006bf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00c      	beq.n	8006a50 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d007      	beq.n	8006a50 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f834 	bl	8006ab8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	f003 0320 	and.w	r3, r3, #32
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00c      	beq.n	8006a74 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f003 0320 	and.w	r3, r3, #32
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d007      	beq.n	8006a74 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f06f 0220 	mvn.w	r2, #32
 8006a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f8b8 	bl	8006be4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a74:	bf00      	nop
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a3a      	ldr	r2, [pc, #232]	; (8006bc8 <TIM_Base_SetConfig+0xfc>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d00f      	beq.n	8006b04 <TIM_Base_SetConfig+0x38>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aea:	d00b      	beq.n	8006b04 <TIM_Base_SetConfig+0x38>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a37      	ldr	r2, [pc, #220]	; (8006bcc <TIM_Base_SetConfig+0x100>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d007      	beq.n	8006b04 <TIM_Base_SetConfig+0x38>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a36      	ldr	r2, [pc, #216]	; (8006bd0 <TIM_Base_SetConfig+0x104>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d003      	beq.n	8006b04 <TIM_Base_SetConfig+0x38>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a35      	ldr	r2, [pc, #212]	; (8006bd4 <TIM_Base_SetConfig+0x108>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d108      	bne.n	8006b16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a2b      	ldr	r2, [pc, #172]	; (8006bc8 <TIM_Base_SetConfig+0xfc>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d01b      	beq.n	8006b56 <TIM_Base_SetConfig+0x8a>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b24:	d017      	beq.n	8006b56 <TIM_Base_SetConfig+0x8a>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a28      	ldr	r2, [pc, #160]	; (8006bcc <TIM_Base_SetConfig+0x100>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d013      	beq.n	8006b56 <TIM_Base_SetConfig+0x8a>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a27      	ldr	r2, [pc, #156]	; (8006bd0 <TIM_Base_SetConfig+0x104>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d00f      	beq.n	8006b56 <TIM_Base_SetConfig+0x8a>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a26      	ldr	r2, [pc, #152]	; (8006bd4 <TIM_Base_SetConfig+0x108>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d00b      	beq.n	8006b56 <TIM_Base_SetConfig+0x8a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a25      	ldr	r2, [pc, #148]	; (8006bd8 <TIM_Base_SetConfig+0x10c>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d007      	beq.n	8006b56 <TIM_Base_SetConfig+0x8a>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a24      	ldr	r2, [pc, #144]	; (8006bdc <TIM_Base_SetConfig+0x110>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d003      	beq.n	8006b56 <TIM_Base_SetConfig+0x8a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a23      	ldr	r2, [pc, #140]	; (8006be0 <TIM_Base_SetConfig+0x114>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d108      	bne.n	8006b68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	689a      	ldr	r2, [r3, #8]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a0e      	ldr	r2, [pc, #56]	; (8006bc8 <TIM_Base_SetConfig+0xfc>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d103      	bne.n	8006b9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	691a      	ldr	r2, [r3, #16]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d105      	bne.n	8006bba <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	f023 0201 	bic.w	r2, r3, #1
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	611a      	str	r2, [r3, #16]
  }
}
 8006bba:	bf00      	nop
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	40010000 	.word	0x40010000
 8006bcc:	40000400 	.word	0x40000400
 8006bd0:	40000800 	.word	0x40000800
 8006bd4:	40000c00 	.word	0x40000c00
 8006bd8:	40014000 	.word	0x40014000
 8006bdc:	40014400 	.word	0x40014400
 8006be0:	40014800 	.word	0x40014800

08006be4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e042      	b.n	8006ca4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d106      	bne.n	8006c38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7fb fc8c 	bl	8002550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2224      	movs	r2, #36	; 0x24
 8006c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fd11 	bl	8007678 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	691a      	ldr	r2, [r3, #16]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	695a      	ldr	r2, [r3, #20]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68da      	ldr	r2, [r3, #12]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2220      	movs	r2, #32
 8006c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b08c      	sub	sp, #48	; 0x30
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b20      	cmp	r3, #32
 8006cc4:	d14a      	bne.n	8006d5c <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d002      	beq.n	8006cd2 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8006ccc:	88fb      	ldrh	r3, [r7, #6]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e043      	b.n	8006d5e <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8006ce2:	88fb      	ldrh	r3, [r7, #6]
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	68b9      	ldr	r1, [r7, #8]
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 faed 	bl	80072c8 <UART_Start_Receive_IT>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006cf4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d12c      	bne.n	8006d56 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d125      	bne.n	8006d50 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d04:	2300      	movs	r3, #0
 8006d06:	613b      	str	r3, [r7, #16]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	613b      	str	r3, [r7, #16]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	613b      	str	r3, [r7, #16]
 8006d18:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	330c      	adds	r3, #12
 8006d20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	e853 3f00 	ldrex	r3, [r3]
 8006d28:	617b      	str	r3, [r7, #20]
   return(result);
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f043 0310 	orr.w	r3, r3, #16
 8006d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	330c      	adds	r3, #12
 8006d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d3a:	627a      	str	r2, [r7, #36]	; 0x24
 8006d3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3e:	6a39      	ldr	r1, [r7, #32]
 8006d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d42:	e841 2300 	strex	r3, r2, [r1]
 8006d46:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1e5      	bne.n	8006d1a <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8006d4e:	e002      	b.n	8006d56 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006d56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d5a:	e000      	b.n	8006d5e <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006d5c:	2302      	movs	r3, #2
  }
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3730      	adds	r7, #48	; 0x30
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
	...

08006d68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b0ba      	sub	sp, #232	; 0xe8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006d94:	2300      	movs	r3, #0
 8006d96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d9e:	f003 030f 	and.w	r3, r3, #15
 8006da2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006da6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10f      	bne.n	8006dce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db2:	f003 0320 	and.w	r3, r3, #32
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d009      	beq.n	8006dce <HAL_UART_IRQHandler+0x66>
 8006dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dbe:	f003 0320 	and.w	r3, r3, #32
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d003      	beq.n	8006dce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fb97 	bl	80074fa <UART_Receive_IT>
      return;
 8006dcc:	e25b      	b.n	8007286 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006dce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 80de 	beq.w	8006f94 <HAL_UART_IRQHandler+0x22c>
 8006dd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d106      	bne.n	8006df2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006de8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 80d1 	beq.w	8006f94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00b      	beq.n	8006e16 <HAL_UART_IRQHandler+0xae>
 8006dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d005      	beq.n	8006e16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e0e:	f043 0201 	orr.w	r2, r3, #1
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e1a:	f003 0304 	and.w	r3, r3, #4
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00b      	beq.n	8006e3a <HAL_UART_IRQHandler+0xd2>
 8006e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d005      	beq.n	8006e3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e32:	f043 0202 	orr.w	r2, r3, #2
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e3e:	f003 0302 	and.w	r3, r3, #2
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00b      	beq.n	8006e5e <HAL_UART_IRQHandler+0xf6>
 8006e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d005      	beq.n	8006e5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e56:	f043 0204 	orr.w	r2, r3, #4
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e62:	f003 0308 	and.w	r3, r3, #8
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d011      	beq.n	8006e8e <HAL_UART_IRQHandler+0x126>
 8006e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e6e:	f003 0320 	and.w	r3, r3, #32
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d105      	bne.n	8006e82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d005      	beq.n	8006e8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e86:	f043 0208 	orr.w	r2, r3, #8
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 81f2 	beq.w	800727c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e9c:	f003 0320 	and.w	r3, r3, #32
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d008      	beq.n	8006eb6 <HAL_UART_IRQHandler+0x14e>
 8006ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ea8:	f003 0320 	and.w	r3, r3, #32
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fb22 	bl	80074fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	695b      	ldr	r3, [r3, #20]
 8006ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec0:	2b40      	cmp	r3, #64	; 0x40
 8006ec2:	bf0c      	ite	eq
 8006ec4:	2301      	moveq	r3, #1
 8006ec6:	2300      	movne	r3, #0
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed2:	f003 0308 	and.w	r3, r3, #8
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d103      	bne.n	8006ee2 <HAL_UART_IRQHandler+0x17a>
 8006eda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d04f      	beq.n	8006f82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fa2a 	bl	800733c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef2:	2b40      	cmp	r3, #64	; 0x40
 8006ef4:	d141      	bne.n	8006f7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	3314      	adds	r3, #20
 8006efc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f04:	e853 3f00 	ldrex	r3, [r3]
 8006f08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006f0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	3314      	adds	r3, #20
 8006f1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f32:	e841 2300 	strex	r3, r2, [r1]
 8006f36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1d9      	bne.n	8006ef6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d013      	beq.n	8006f72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f4e:	4a7e      	ldr	r2, [pc, #504]	; (8007148 <HAL_UART_IRQHandler+0x3e0>)
 8006f50:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fd ff84 	bl	8004e64 <HAL_DMA_Abort_IT>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d016      	beq.n	8006f90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f70:	e00e      	b.n	8006f90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f99e 	bl	80072b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f78:	e00a      	b.n	8006f90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f99a 	bl	80072b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f80:	e006      	b.n	8006f90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f996 	bl	80072b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006f8e:	e175      	b.n	800727c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f90:	bf00      	nop
    return;
 8006f92:	e173      	b.n	800727c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	f040 814f 	bne.w	800723c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa2:	f003 0310 	and.w	r3, r3, #16
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f000 8148 	beq.w	800723c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fb0:	f003 0310 	and.w	r3, r3, #16
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f000 8141 	beq.w	800723c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60bb      	str	r3, [r7, #8]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	60bb      	str	r3, [r7, #8]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	60bb      	str	r3, [r7, #8]
 8006fce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fda:	2b40      	cmp	r3, #64	; 0x40
 8006fdc:	f040 80b6 	bne.w	800714c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006fec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 8145 	beq.w	8007280 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ffa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ffe:	429a      	cmp	r2, r3
 8007000:	f080 813e 	bcs.w	8007280 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800700a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007010:	69db      	ldr	r3, [r3, #28]
 8007012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007016:	f000 8088 	beq.w	800712a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	330c      	adds	r3, #12
 8007020:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007024:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007028:	e853 3f00 	ldrex	r3, [r3]
 800702c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007030:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007038:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	330c      	adds	r3, #12
 8007042:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007046:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800704a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007052:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007056:	e841 2300 	strex	r3, r2, [r1]
 800705a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800705e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1d9      	bne.n	800701a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3314      	adds	r3, #20
 800706c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007070:	e853 3f00 	ldrex	r3, [r3]
 8007074:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007076:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007078:	f023 0301 	bic.w	r3, r3, #1
 800707c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	3314      	adds	r3, #20
 8007086:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800708a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800708e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007090:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007092:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007096:	e841 2300 	strex	r3, r2, [r1]
 800709a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800709c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1e1      	bne.n	8007066 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	3314      	adds	r3, #20
 80070a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070ac:	e853 3f00 	ldrex	r3, [r3]
 80070b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80070b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	3314      	adds	r3, #20
 80070c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80070c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80070c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80070cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80070ce:	e841 2300 	strex	r3, r2, [r1]
 80070d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80070d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1e3      	bne.n	80070a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2220      	movs	r2, #32
 80070de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	330c      	adds	r3, #12
 80070ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070f2:	e853 3f00 	ldrex	r3, [r3]
 80070f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070fa:	f023 0310 	bic.w	r3, r3, #16
 80070fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	330c      	adds	r3, #12
 8007108:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800710c:	65ba      	str	r2, [r7, #88]	; 0x58
 800710e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007110:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007112:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007114:	e841 2300 	strex	r3, r2, [r1]
 8007118:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800711a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1e3      	bne.n	80070e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007124:	4618      	mov	r0, r3
 8007126:	f7fd fe2d 	bl	8004d84 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2202      	movs	r2, #2
 800712e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007138:	b29b      	uxth	r3, r3
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	b29b      	uxth	r3, r3
 800713e:	4619      	mov	r1, r3
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7f9 ff81 	bl	8001048 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007146:	e09b      	b.n	8007280 <HAL_UART_IRQHandler+0x518>
 8007148:	08007403 	.word	0x08007403
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007154:	b29b      	uxth	r3, r3
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007160:	b29b      	uxth	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	f000 808e 	beq.w	8007284 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007168:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 8089 	beq.w	8007284 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	330c      	adds	r3, #12
 8007178:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717c:	e853 3f00 	ldrex	r3, [r3]
 8007180:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007184:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007188:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	330c      	adds	r3, #12
 8007192:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007196:	647a      	str	r2, [r7, #68]	; 0x44
 8007198:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800719c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800719e:	e841 2300 	strex	r3, r2, [r1]
 80071a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1e3      	bne.n	8007172 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	3314      	adds	r3, #20
 80071b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	e853 3f00 	ldrex	r3, [r3]
 80071b8:	623b      	str	r3, [r7, #32]
   return(result);
 80071ba:	6a3b      	ldr	r3, [r7, #32]
 80071bc:	f023 0301 	bic.w	r3, r3, #1
 80071c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	3314      	adds	r3, #20
 80071ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80071ce:	633a      	str	r2, [r7, #48]	; 0x30
 80071d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071d6:	e841 2300 	strex	r3, r2, [r1]
 80071da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1e3      	bne.n	80071aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2220      	movs	r2, #32
 80071e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	330c      	adds	r3, #12
 80071f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	e853 3f00 	ldrex	r3, [r3]
 80071fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f023 0310 	bic.w	r3, r3, #16
 8007206:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	330c      	adds	r3, #12
 8007210:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007214:	61fa      	str	r2, [r7, #28]
 8007216:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007218:	69b9      	ldr	r1, [r7, #24]
 800721a:	69fa      	ldr	r2, [r7, #28]
 800721c:	e841 2300 	strex	r3, r2, [r1]
 8007220:	617b      	str	r3, [r7, #20]
   return(result);
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1e3      	bne.n	80071f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2202      	movs	r2, #2
 800722c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800722e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007232:	4619      	mov	r1, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7f9 ff07 	bl	8001048 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800723a:	e023      	b.n	8007284 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800723c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007244:	2b00      	cmp	r3, #0
 8007246:	d009      	beq.n	800725c <HAL_UART_IRQHandler+0x4f4>
 8007248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800724c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007250:	2b00      	cmp	r3, #0
 8007252:	d003      	beq.n	800725c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f8e8 	bl	800742a <UART_Transmit_IT>
    return;
 800725a:	e014      	b.n	8007286 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800725c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00e      	beq.n	8007286 <HAL_UART_IRQHandler+0x51e>
 8007268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800726c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007270:	2b00      	cmp	r3, #0
 8007272:	d008      	beq.n	8007286 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f928 	bl	80074ca <UART_EndTransmit_IT>
    return;
 800727a:	e004      	b.n	8007286 <HAL_UART_IRQHandler+0x51e>
    return;
 800727c:	bf00      	nop
 800727e:	e002      	b.n	8007286 <HAL_UART_IRQHandler+0x51e>
      return;
 8007280:	bf00      	nop
 8007282:	e000      	b.n	8007286 <HAL_UART_IRQHandler+0x51e>
      return;
 8007284:	bf00      	nop
  }
}
 8007286:	37e8      	adds	r7, #232	; 0xe8
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80072a8:	bf00      	nop
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	4613      	mov	r3, r2
 80072d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	88fa      	ldrh	r2, [r7, #6]
 80072e0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	88fa      	ldrh	r2, [r7, #6]
 80072e6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2222      	movs	r2, #34	; 0x22
 80072f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d007      	beq.n	800730e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68da      	ldr	r2, [r3, #12]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800730c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	695a      	ldr	r2, [r3, #20]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f042 0201 	orr.w	r2, r2, #1
 800731c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68da      	ldr	r2, [r3, #12]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f042 0220 	orr.w	r2, r2, #32
 800732c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800733c:	b480      	push	{r7}
 800733e:	b095      	sub	sp, #84	; 0x54
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	330c      	adds	r3, #12
 800734a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800734e:	e853 3f00 	ldrex	r3, [r3]
 8007352:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007356:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800735a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	330c      	adds	r3, #12
 8007362:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007364:	643a      	str	r2, [r7, #64]	; 0x40
 8007366:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007368:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800736a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800736c:	e841 2300 	strex	r3, r2, [r1]
 8007370:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1e5      	bne.n	8007344 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	3314      	adds	r3, #20
 800737e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007380:	6a3b      	ldr	r3, [r7, #32]
 8007382:	e853 3f00 	ldrex	r3, [r3]
 8007386:	61fb      	str	r3, [r7, #28]
   return(result);
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	f023 0301 	bic.w	r3, r3, #1
 800738e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	3314      	adds	r3, #20
 8007396:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007398:	62fa      	str	r2, [r7, #44]	; 0x2c
 800739a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800739e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073a0:	e841 2300 	strex	r3, r2, [r1]
 80073a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1e5      	bne.n	8007378 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d119      	bne.n	80073e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	330c      	adds	r3, #12
 80073ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	e853 3f00 	ldrex	r3, [r3]
 80073c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	f023 0310 	bic.w	r3, r3, #16
 80073ca:	647b      	str	r3, [r7, #68]	; 0x44
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	330c      	adds	r3, #12
 80073d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073d4:	61ba      	str	r2, [r7, #24]
 80073d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d8:	6979      	ldr	r1, [r7, #20]
 80073da:	69ba      	ldr	r2, [r7, #24]
 80073dc:	e841 2300 	strex	r3, r2, [r1]
 80073e0:	613b      	str	r3, [r7, #16]
   return(result);
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1e5      	bne.n	80073b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2220      	movs	r2, #32
 80073ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80073f6:	bf00      	nop
 80073f8:	3754      	adds	r7, #84	; 0x54
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b084      	sub	sp, #16
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f7ff ff49 	bl	80072b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007422:	bf00      	nop
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800742a:	b480      	push	{r7}
 800742c:	b085      	sub	sp, #20
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b21      	cmp	r3, #33	; 0x21
 800743c:	d13e      	bne.n	80074bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007446:	d114      	bne.n	8007472 <UART_Transmit_IT+0x48>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d110      	bne.n	8007472 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a1b      	ldr	r3, [r3, #32]
 8007454:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	461a      	mov	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007464:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	1c9a      	adds	r2, r3, #2
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	621a      	str	r2, [r3, #32]
 8007470:	e008      	b.n	8007484 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	1c59      	adds	r1, r3, #1
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	6211      	str	r1, [r2, #32]
 800747c:	781a      	ldrb	r2, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007488:	b29b      	uxth	r3, r3
 800748a:	3b01      	subs	r3, #1
 800748c:	b29b      	uxth	r3, r3
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	4619      	mov	r1, r3
 8007492:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10f      	bne.n	80074b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68da      	ldr	r2, [r3, #12]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68da      	ldr	r2, [r3, #12]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80074b8:	2300      	movs	r3, #0
 80074ba:	e000      	b.n	80074be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80074bc:	2302      	movs	r3, #2
  }
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b082      	sub	sp, #8
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68da      	ldr	r2, [r3, #12]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2220      	movs	r2, #32
 80074e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f7ff fece 	bl	800728c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3708      	adds	r7, #8
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b08c      	sub	sp, #48	; 0x30
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b22      	cmp	r3, #34	; 0x22
 800750c:	f040 80ae 	bne.w	800766c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007518:	d117      	bne.n	800754a <UART_Receive_IT+0x50>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d113      	bne.n	800754a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007522:	2300      	movs	r3, #0
 8007524:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	b29b      	uxth	r3, r3
 8007534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007538:	b29a      	uxth	r2, r3
 800753a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007542:	1c9a      	adds	r2, r3, #2
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	629a      	str	r2, [r3, #40]	; 0x28
 8007548:	e026      	b.n	8007598 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007550:	2300      	movs	r3, #0
 8007552:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800755c:	d007      	beq.n	800756e <UART_Receive_IT+0x74>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10a      	bne.n	800757c <UART_Receive_IT+0x82>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d106      	bne.n	800757c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	b2da      	uxtb	r2, r3
 8007576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007578:	701a      	strb	r2, [r3, #0]
 800757a:	e008      	b.n	800758e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	b2db      	uxtb	r3, r3
 8007584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007588:	b2da      	uxtb	r2, r3
 800758a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007592:	1c5a      	adds	r2, r3, #1
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800759c:	b29b      	uxth	r3, r3
 800759e:	3b01      	subs	r3, #1
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	4619      	mov	r1, r3
 80075a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d15d      	bne.n	8007668 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68da      	ldr	r2, [r3, #12]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f022 0220 	bic.w	r2, r2, #32
 80075ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68da      	ldr	r2, [r3, #12]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	695a      	ldr	r2, [r3, #20]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f022 0201 	bic.w	r2, r2, #1
 80075da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2220      	movs	r2, #32
 80075e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d135      	bne.n	800765e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	330c      	adds	r3, #12
 80075fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	e853 3f00 	ldrex	r3, [r3]
 8007606:	613b      	str	r3, [r7, #16]
   return(result);
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	f023 0310 	bic.w	r3, r3, #16
 800760e:	627b      	str	r3, [r7, #36]	; 0x24
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	330c      	adds	r3, #12
 8007616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007618:	623a      	str	r2, [r7, #32]
 800761a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761c:	69f9      	ldr	r1, [r7, #28]
 800761e:	6a3a      	ldr	r2, [r7, #32]
 8007620:	e841 2300 	strex	r3, r2, [r1]
 8007624:	61bb      	str	r3, [r7, #24]
   return(result);
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1e5      	bne.n	80075f8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 0310 	and.w	r3, r3, #16
 8007636:	2b10      	cmp	r3, #16
 8007638:	d10a      	bne.n	8007650 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800763a:	2300      	movs	r3, #0
 800763c:	60fb      	str	r3, [r7, #12]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	60fb      	str	r3, [r7, #12]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	60fb      	str	r3, [r7, #12]
 800764e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007654:	4619      	mov	r1, r3
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f7f9 fcf6 	bl	8001048 <HAL_UARTEx_RxEventCallback>
 800765c:	e002      	b.n	8007664 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f7ff fe1e 	bl	80072a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007664:	2300      	movs	r3, #0
 8007666:	e002      	b.n	800766e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007668:	2300      	movs	r3, #0
 800766a:	e000      	b.n	800766e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800766c:	2302      	movs	r3, #2
  }
}
 800766e:	4618      	mov	r0, r3
 8007670:	3730      	adds	r7, #48	; 0x30
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
	...

08007678 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800767c:	b0c0      	sub	sp, #256	; 0x100
 800767e:	af00      	add	r7, sp, #0
 8007680:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007694:	68d9      	ldr	r1, [r3, #12]
 8007696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	ea40 0301 	orr.w	r3, r0, r1
 80076a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80076a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a6:	689a      	ldr	r2, [r3, #8]
 80076a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	431a      	orrs	r2, r3
 80076b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	431a      	orrs	r2, r3
 80076b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076bc:	69db      	ldr	r3, [r3, #28]
 80076be:	4313      	orrs	r3, r2
 80076c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80076c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80076d0:	f021 010c 	bic.w	r1, r1, #12
 80076d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80076de:	430b      	orrs	r3, r1
 80076e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80076ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076f2:	6999      	ldr	r1, [r3, #24]
 80076f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	ea40 0301 	orr.w	r3, r0, r1
 80076fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	4b8f      	ldr	r3, [pc, #572]	; (8007944 <UART_SetConfig+0x2cc>)
 8007708:	429a      	cmp	r2, r3
 800770a:	d005      	beq.n	8007718 <UART_SetConfig+0xa0>
 800770c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	4b8d      	ldr	r3, [pc, #564]	; (8007948 <UART_SetConfig+0x2d0>)
 8007714:	429a      	cmp	r2, r3
 8007716:	d104      	bne.n	8007722 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007718:	f7fe f9e8 	bl	8005aec <HAL_RCC_GetPCLK2Freq>
 800771c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007720:	e003      	b.n	800772a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007722:	f7fe f9cf 	bl	8005ac4 <HAL_RCC_GetPCLK1Freq>
 8007726:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800772a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800772e:	69db      	ldr	r3, [r3, #28]
 8007730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007734:	f040 810c 	bne.w	8007950 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007738:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800773c:	2200      	movs	r2, #0
 800773e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007742:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007746:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800774a:	4622      	mov	r2, r4
 800774c:	462b      	mov	r3, r5
 800774e:	1891      	adds	r1, r2, r2
 8007750:	65b9      	str	r1, [r7, #88]	; 0x58
 8007752:	415b      	adcs	r3, r3
 8007754:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007756:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800775a:	4621      	mov	r1, r4
 800775c:	eb12 0801 	adds.w	r8, r2, r1
 8007760:	4629      	mov	r1, r5
 8007762:	eb43 0901 	adc.w	r9, r3, r1
 8007766:	f04f 0200 	mov.w	r2, #0
 800776a:	f04f 0300 	mov.w	r3, #0
 800776e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007772:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007776:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800777a:	4690      	mov	r8, r2
 800777c:	4699      	mov	r9, r3
 800777e:	4623      	mov	r3, r4
 8007780:	eb18 0303 	adds.w	r3, r8, r3
 8007784:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007788:	462b      	mov	r3, r5
 800778a:	eb49 0303 	adc.w	r3, r9, r3
 800778e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800779e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80077a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80077a6:	460b      	mov	r3, r1
 80077a8:	18db      	adds	r3, r3, r3
 80077aa:	653b      	str	r3, [r7, #80]	; 0x50
 80077ac:	4613      	mov	r3, r2
 80077ae:	eb42 0303 	adc.w	r3, r2, r3
 80077b2:	657b      	str	r3, [r7, #84]	; 0x54
 80077b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80077b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80077bc:	f7f9 fa7c 	bl	8000cb8 <__aeabi_uldivmod>
 80077c0:	4602      	mov	r2, r0
 80077c2:	460b      	mov	r3, r1
 80077c4:	4b61      	ldr	r3, [pc, #388]	; (800794c <UART_SetConfig+0x2d4>)
 80077c6:	fba3 2302 	umull	r2, r3, r3, r2
 80077ca:	095b      	lsrs	r3, r3, #5
 80077cc:	011c      	lsls	r4, r3, #4
 80077ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077d2:	2200      	movs	r2, #0
 80077d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80077dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80077e0:	4642      	mov	r2, r8
 80077e2:	464b      	mov	r3, r9
 80077e4:	1891      	adds	r1, r2, r2
 80077e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80077e8:	415b      	adcs	r3, r3
 80077ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80077f0:	4641      	mov	r1, r8
 80077f2:	eb12 0a01 	adds.w	sl, r2, r1
 80077f6:	4649      	mov	r1, r9
 80077f8:	eb43 0b01 	adc.w	fp, r3, r1
 80077fc:	f04f 0200 	mov.w	r2, #0
 8007800:	f04f 0300 	mov.w	r3, #0
 8007804:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007808:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800780c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007810:	4692      	mov	sl, r2
 8007812:	469b      	mov	fp, r3
 8007814:	4643      	mov	r3, r8
 8007816:	eb1a 0303 	adds.w	r3, sl, r3
 800781a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800781e:	464b      	mov	r3, r9
 8007820:	eb4b 0303 	adc.w	r3, fp, r3
 8007824:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007834:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007838:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800783c:	460b      	mov	r3, r1
 800783e:	18db      	adds	r3, r3, r3
 8007840:	643b      	str	r3, [r7, #64]	; 0x40
 8007842:	4613      	mov	r3, r2
 8007844:	eb42 0303 	adc.w	r3, r2, r3
 8007848:	647b      	str	r3, [r7, #68]	; 0x44
 800784a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800784e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007852:	f7f9 fa31 	bl	8000cb8 <__aeabi_uldivmod>
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	4611      	mov	r1, r2
 800785c:	4b3b      	ldr	r3, [pc, #236]	; (800794c <UART_SetConfig+0x2d4>)
 800785e:	fba3 2301 	umull	r2, r3, r3, r1
 8007862:	095b      	lsrs	r3, r3, #5
 8007864:	2264      	movs	r2, #100	; 0x64
 8007866:	fb02 f303 	mul.w	r3, r2, r3
 800786a:	1acb      	subs	r3, r1, r3
 800786c:	00db      	lsls	r3, r3, #3
 800786e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007872:	4b36      	ldr	r3, [pc, #216]	; (800794c <UART_SetConfig+0x2d4>)
 8007874:	fba3 2302 	umull	r2, r3, r3, r2
 8007878:	095b      	lsrs	r3, r3, #5
 800787a:	005b      	lsls	r3, r3, #1
 800787c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007880:	441c      	add	r4, r3
 8007882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007886:	2200      	movs	r2, #0
 8007888:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800788c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007890:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007894:	4642      	mov	r2, r8
 8007896:	464b      	mov	r3, r9
 8007898:	1891      	adds	r1, r2, r2
 800789a:	63b9      	str	r1, [r7, #56]	; 0x38
 800789c:	415b      	adcs	r3, r3
 800789e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80078a4:	4641      	mov	r1, r8
 80078a6:	1851      	adds	r1, r2, r1
 80078a8:	6339      	str	r1, [r7, #48]	; 0x30
 80078aa:	4649      	mov	r1, r9
 80078ac:	414b      	adcs	r3, r1
 80078ae:	637b      	str	r3, [r7, #52]	; 0x34
 80078b0:	f04f 0200 	mov.w	r2, #0
 80078b4:	f04f 0300 	mov.w	r3, #0
 80078b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80078bc:	4659      	mov	r1, fp
 80078be:	00cb      	lsls	r3, r1, #3
 80078c0:	4651      	mov	r1, sl
 80078c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078c6:	4651      	mov	r1, sl
 80078c8:	00ca      	lsls	r2, r1, #3
 80078ca:	4610      	mov	r0, r2
 80078cc:	4619      	mov	r1, r3
 80078ce:	4603      	mov	r3, r0
 80078d0:	4642      	mov	r2, r8
 80078d2:	189b      	adds	r3, r3, r2
 80078d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078d8:	464b      	mov	r3, r9
 80078da:	460a      	mov	r2, r1
 80078dc:	eb42 0303 	adc.w	r3, r2, r3
 80078e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80078f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80078f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80078f8:	460b      	mov	r3, r1
 80078fa:	18db      	adds	r3, r3, r3
 80078fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80078fe:	4613      	mov	r3, r2
 8007900:	eb42 0303 	adc.w	r3, r2, r3
 8007904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007906:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800790a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800790e:	f7f9 f9d3 	bl	8000cb8 <__aeabi_uldivmod>
 8007912:	4602      	mov	r2, r0
 8007914:	460b      	mov	r3, r1
 8007916:	4b0d      	ldr	r3, [pc, #52]	; (800794c <UART_SetConfig+0x2d4>)
 8007918:	fba3 1302 	umull	r1, r3, r3, r2
 800791c:	095b      	lsrs	r3, r3, #5
 800791e:	2164      	movs	r1, #100	; 0x64
 8007920:	fb01 f303 	mul.w	r3, r1, r3
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	00db      	lsls	r3, r3, #3
 8007928:	3332      	adds	r3, #50	; 0x32
 800792a:	4a08      	ldr	r2, [pc, #32]	; (800794c <UART_SetConfig+0x2d4>)
 800792c:	fba2 2303 	umull	r2, r3, r2, r3
 8007930:	095b      	lsrs	r3, r3, #5
 8007932:	f003 0207 	and.w	r2, r3, #7
 8007936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4422      	add	r2, r4
 800793e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007940:	e106      	b.n	8007b50 <UART_SetConfig+0x4d8>
 8007942:	bf00      	nop
 8007944:	40011000 	.word	0x40011000
 8007948:	40011400 	.word	0x40011400
 800794c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007950:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007954:	2200      	movs	r2, #0
 8007956:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800795a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800795e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007962:	4642      	mov	r2, r8
 8007964:	464b      	mov	r3, r9
 8007966:	1891      	adds	r1, r2, r2
 8007968:	6239      	str	r1, [r7, #32]
 800796a:	415b      	adcs	r3, r3
 800796c:	627b      	str	r3, [r7, #36]	; 0x24
 800796e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007972:	4641      	mov	r1, r8
 8007974:	1854      	adds	r4, r2, r1
 8007976:	4649      	mov	r1, r9
 8007978:	eb43 0501 	adc.w	r5, r3, r1
 800797c:	f04f 0200 	mov.w	r2, #0
 8007980:	f04f 0300 	mov.w	r3, #0
 8007984:	00eb      	lsls	r3, r5, #3
 8007986:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800798a:	00e2      	lsls	r2, r4, #3
 800798c:	4614      	mov	r4, r2
 800798e:	461d      	mov	r5, r3
 8007990:	4643      	mov	r3, r8
 8007992:	18e3      	adds	r3, r4, r3
 8007994:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007998:	464b      	mov	r3, r9
 800799a:	eb45 0303 	adc.w	r3, r5, r3
 800799e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80079a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80079ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80079b2:	f04f 0200 	mov.w	r2, #0
 80079b6:	f04f 0300 	mov.w	r3, #0
 80079ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80079be:	4629      	mov	r1, r5
 80079c0:	008b      	lsls	r3, r1, #2
 80079c2:	4621      	mov	r1, r4
 80079c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079c8:	4621      	mov	r1, r4
 80079ca:	008a      	lsls	r2, r1, #2
 80079cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80079d0:	f7f9 f972 	bl	8000cb8 <__aeabi_uldivmod>
 80079d4:	4602      	mov	r2, r0
 80079d6:	460b      	mov	r3, r1
 80079d8:	4b60      	ldr	r3, [pc, #384]	; (8007b5c <UART_SetConfig+0x4e4>)
 80079da:	fba3 2302 	umull	r2, r3, r3, r2
 80079de:	095b      	lsrs	r3, r3, #5
 80079e0:	011c      	lsls	r4, r3, #4
 80079e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079e6:	2200      	movs	r2, #0
 80079e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80079ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80079f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80079f4:	4642      	mov	r2, r8
 80079f6:	464b      	mov	r3, r9
 80079f8:	1891      	adds	r1, r2, r2
 80079fa:	61b9      	str	r1, [r7, #24]
 80079fc:	415b      	adcs	r3, r3
 80079fe:	61fb      	str	r3, [r7, #28]
 8007a00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a04:	4641      	mov	r1, r8
 8007a06:	1851      	adds	r1, r2, r1
 8007a08:	6139      	str	r1, [r7, #16]
 8007a0a:	4649      	mov	r1, r9
 8007a0c:	414b      	adcs	r3, r1
 8007a0e:	617b      	str	r3, [r7, #20]
 8007a10:	f04f 0200 	mov.w	r2, #0
 8007a14:	f04f 0300 	mov.w	r3, #0
 8007a18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a1c:	4659      	mov	r1, fp
 8007a1e:	00cb      	lsls	r3, r1, #3
 8007a20:	4651      	mov	r1, sl
 8007a22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a26:	4651      	mov	r1, sl
 8007a28:	00ca      	lsls	r2, r1, #3
 8007a2a:	4610      	mov	r0, r2
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	4603      	mov	r3, r0
 8007a30:	4642      	mov	r2, r8
 8007a32:	189b      	adds	r3, r3, r2
 8007a34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a38:	464b      	mov	r3, r9
 8007a3a:	460a      	mov	r2, r1
 8007a3c:	eb42 0303 	adc.w	r3, r2, r3
 8007a40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007a50:	f04f 0200 	mov.w	r2, #0
 8007a54:	f04f 0300 	mov.w	r3, #0
 8007a58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007a5c:	4649      	mov	r1, r9
 8007a5e:	008b      	lsls	r3, r1, #2
 8007a60:	4641      	mov	r1, r8
 8007a62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a66:	4641      	mov	r1, r8
 8007a68:	008a      	lsls	r2, r1, #2
 8007a6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007a6e:	f7f9 f923 	bl	8000cb8 <__aeabi_uldivmod>
 8007a72:	4602      	mov	r2, r0
 8007a74:	460b      	mov	r3, r1
 8007a76:	4611      	mov	r1, r2
 8007a78:	4b38      	ldr	r3, [pc, #224]	; (8007b5c <UART_SetConfig+0x4e4>)
 8007a7a:	fba3 2301 	umull	r2, r3, r3, r1
 8007a7e:	095b      	lsrs	r3, r3, #5
 8007a80:	2264      	movs	r2, #100	; 0x64
 8007a82:	fb02 f303 	mul.w	r3, r2, r3
 8007a86:	1acb      	subs	r3, r1, r3
 8007a88:	011b      	lsls	r3, r3, #4
 8007a8a:	3332      	adds	r3, #50	; 0x32
 8007a8c:	4a33      	ldr	r2, [pc, #204]	; (8007b5c <UART_SetConfig+0x4e4>)
 8007a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a92:	095b      	lsrs	r3, r3, #5
 8007a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a98:	441c      	add	r4, r3
 8007a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	673b      	str	r3, [r7, #112]	; 0x70
 8007aa2:	677a      	str	r2, [r7, #116]	; 0x74
 8007aa4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007aa8:	4642      	mov	r2, r8
 8007aaa:	464b      	mov	r3, r9
 8007aac:	1891      	adds	r1, r2, r2
 8007aae:	60b9      	str	r1, [r7, #8]
 8007ab0:	415b      	adcs	r3, r3
 8007ab2:	60fb      	str	r3, [r7, #12]
 8007ab4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ab8:	4641      	mov	r1, r8
 8007aba:	1851      	adds	r1, r2, r1
 8007abc:	6039      	str	r1, [r7, #0]
 8007abe:	4649      	mov	r1, r9
 8007ac0:	414b      	adcs	r3, r1
 8007ac2:	607b      	str	r3, [r7, #4]
 8007ac4:	f04f 0200 	mov.w	r2, #0
 8007ac8:	f04f 0300 	mov.w	r3, #0
 8007acc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007ad0:	4659      	mov	r1, fp
 8007ad2:	00cb      	lsls	r3, r1, #3
 8007ad4:	4651      	mov	r1, sl
 8007ad6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ada:	4651      	mov	r1, sl
 8007adc:	00ca      	lsls	r2, r1, #3
 8007ade:	4610      	mov	r0, r2
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	4642      	mov	r2, r8
 8007ae6:	189b      	adds	r3, r3, r2
 8007ae8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007aea:	464b      	mov	r3, r9
 8007aec:	460a      	mov	r2, r1
 8007aee:	eb42 0303 	adc.w	r3, r2, r3
 8007af2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	663b      	str	r3, [r7, #96]	; 0x60
 8007afe:	667a      	str	r2, [r7, #100]	; 0x64
 8007b00:	f04f 0200 	mov.w	r2, #0
 8007b04:	f04f 0300 	mov.w	r3, #0
 8007b08:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007b0c:	4649      	mov	r1, r9
 8007b0e:	008b      	lsls	r3, r1, #2
 8007b10:	4641      	mov	r1, r8
 8007b12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b16:	4641      	mov	r1, r8
 8007b18:	008a      	lsls	r2, r1, #2
 8007b1a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007b1e:	f7f9 f8cb 	bl	8000cb8 <__aeabi_uldivmod>
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	4b0d      	ldr	r3, [pc, #52]	; (8007b5c <UART_SetConfig+0x4e4>)
 8007b28:	fba3 1302 	umull	r1, r3, r3, r2
 8007b2c:	095b      	lsrs	r3, r3, #5
 8007b2e:	2164      	movs	r1, #100	; 0x64
 8007b30:	fb01 f303 	mul.w	r3, r1, r3
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	011b      	lsls	r3, r3, #4
 8007b38:	3332      	adds	r3, #50	; 0x32
 8007b3a:	4a08      	ldr	r2, [pc, #32]	; (8007b5c <UART_SetConfig+0x4e4>)
 8007b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b40:	095b      	lsrs	r3, r3, #5
 8007b42:	f003 020f 	and.w	r2, r3, #15
 8007b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4422      	add	r2, r4
 8007b4e:	609a      	str	r2, [r3, #8]
}
 8007b50:	bf00      	nop
 8007b52:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007b56:	46bd      	mov	sp, r7
 8007b58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b5c:	51eb851f 	.word	0x51eb851f

08007b60 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8007b68:	4b22      	ldr	r3, [pc, #136]	; (8007bf4 <WIZCHIP_READ+0x94>)
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	4798      	blx	r3
   WIZCHIP.CS._select();
 8007b6e:	4b21      	ldr	r3, [pc, #132]	; (8007bf4 <WIZCHIP_READ+0x94>)
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007b74:	4b1f      	ldr	r3, [pc, #124]	; (8007bf4 <WIZCHIP_READ+0x94>)
 8007b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d003      	beq.n	8007b84 <WIZCHIP_READ+0x24>
 8007b7c:	4b1d      	ldr	r3, [pc, #116]	; (8007bf4 <WIZCHIP_READ+0x94>)
 8007b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d114      	bne.n	8007bae <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8007b84:	4b1b      	ldr	r3, [pc, #108]	; (8007bf4 <WIZCHIP_READ+0x94>)
 8007b86:	6a1b      	ldr	r3, [r3, #32]
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	0c12      	lsrs	r2, r2, #16
 8007b8c:	b2d2      	uxtb	r2, r2
 8007b8e:	4610      	mov	r0, r2
 8007b90:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8007b92:	4b18      	ldr	r3, [pc, #96]	; (8007bf4 <WIZCHIP_READ+0x94>)
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	0a12      	lsrs	r2, r2, #8
 8007b9a:	b2d2      	uxtb	r2, r2
 8007b9c:	4610      	mov	r0, r2
 8007b9e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8007ba0:	4b14      	ldr	r3, [pc, #80]	; (8007bf4 <WIZCHIP_READ+0x94>)
 8007ba2:	6a1b      	ldr	r3, [r3, #32]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	b2d2      	uxtb	r2, r2
 8007ba8:	4610      	mov	r0, r2
 8007baa:	4798      	blx	r3
 8007bac:	e011      	b.n	8007bd2 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	0c1b      	lsrs	r3, r3, #16
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	0a1b      	lsrs	r3, r3, #8
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8007bc4:	4b0b      	ldr	r3, [pc, #44]	; (8007bf4 <WIZCHIP_READ+0x94>)
 8007bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc8:	f107 020c 	add.w	r2, r7, #12
 8007bcc:	2103      	movs	r1, #3
 8007bce:	4610      	mov	r0, r2
 8007bd0:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8007bd2:	4b08      	ldr	r3, [pc, #32]	; (8007bf4 <WIZCHIP_READ+0x94>)
 8007bd4:	69db      	ldr	r3, [r3, #28]
 8007bd6:	4798      	blx	r3
 8007bd8:	4603      	mov	r3, r0
 8007bda:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8007bdc:	4b05      	ldr	r3, [pc, #20]	; (8007bf4 <WIZCHIP_READ+0x94>)
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8007be2:	4b04      	ldr	r3, [pc, #16]	; (8007bf4 <WIZCHIP_READ+0x94>)
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	4798      	blx	r3
   return ret;
 8007be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	200000c4 	.word	0x200000c4

08007bf8 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	460b      	mov	r3, r1
 8007c02:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8007c04:	4b22      	ldr	r3, [pc, #136]	; (8007c90 <WIZCHIP_WRITE+0x98>)
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	4798      	blx	r3
   WIZCHIP.CS._select();
 8007c0a:	4b21      	ldr	r3, [pc, #132]	; (8007c90 <WIZCHIP_WRITE+0x98>)
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f043 0304 	orr.w	r3, r3, #4
 8007c16:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007c18:	4b1d      	ldr	r3, [pc, #116]	; (8007c90 <WIZCHIP_WRITE+0x98>)
 8007c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d119      	bne.n	8007c54 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8007c20:	4b1b      	ldr	r3, [pc, #108]	; (8007c90 <WIZCHIP_WRITE+0x98>)
 8007c22:	6a1b      	ldr	r3, [r3, #32]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	0c12      	lsrs	r2, r2, #16
 8007c28:	b2d2      	uxtb	r2, r2
 8007c2a:	4610      	mov	r0, r2
 8007c2c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8007c2e:	4b18      	ldr	r3, [pc, #96]	; (8007c90 <WIZCHIP_WRITE+0x98>)
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	0a12      	lsrs	r2, r2, #8
 8007c36:	b2d2      	uxtb	r2, r2
 8007c38:	4610      	mov	r0, r2
 8007c3a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8007c3c:	4b14      	ldr	r3, [pc, #80]	; (8007c90 <WIZCHIP_WRITE+0x98>)
 8007c3e:	6a1b      	ldr	r3, [r3, #32]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	b2d2      	uxtb	r2, r2
 8007c44:	4610      	mov	r0, r2
 8007c46:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8007c48:	4b11      	ldr	r3, [pc, #68]	; (8007c90 <WIZCHIP_WRITE+0x98>)
 8007c4a:	6a1b      	ldr	r3, [r3, #32]
 8007c4c:	78fa      	ldrb	r2, [r7, #3]
 8007c4e:	4610      	mov	r0, r2
 8007c50:	4798      	blx	r3
 8007c52:	e013      	b.n	8007c7c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	0c1b      	lsrs	r3, r3, #16
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	0a1b      	lsrs	r3, r3, #8
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8007c6a:	78fb      	ldrb	r3, [r7, #3]
 8007c6c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8007c6e:	4b08      	ldr	r3, [pc, #32]	; (8007c90 <WIZCHIP_WRITE+0x98>)
 8007c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c72:	f107 020c 	add.w	r2, r7, #12
 8007c76:	2104      	movs	r1, #4
 8007c78:	4610      	mov	r0, r2
 8007c7a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8007c7c:	4b04      	ldr	r3, [pc, #16]	; (8007c90 <WIZCHIP_WRITE+0x98>)
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8007c82:	4b03      	ldr	r3, [pc, #12]	; (8007c90 <WIZCHIP_WRITE+0x98>)
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	4798      	blx	r3
}
 8007c88:	bf00      	nop
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	200000c4 	.word	0x200000c4

08007c94 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8007c94:	b590      	push	{r4, r7, lr}
 8007c96:	b087      	sub	sp, #28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8007ca2:	4b2b      	ldr	r3, [pc, #172]	; (8007d50 <WIZCHIP_READ_BUF+0xbc>)
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	4798      	blx	r3
   WIZCHIP.CS._select();
 8007ca8:	4b29      	ldr	r3, [pc, #164]	; (8007d50 <WIZCHIP_READ_BUF+0xbc>)
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007cae:	4b28      	ldr	r3, [pc, #160]	; (8007d50 <WIZCHIP_READ_BUF+0xbc>)
 8007cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d003      	beq.n	8007cbe <WIZCHIP_READ_BUF+0x2a>
 8007cb6:	4b26      	ldr	r3, [pc, #152]	; (8007d50 <WIZCHIP_READ_BUF+0xbc>)
 8007cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d126      	bne.n	8007d0c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8007cbe:	4b24      	ldr	r3, [pc, #144]	; (8007d50 <WIZCHIP_READ_BUF+0xbc>)
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	0c12      	lsrs	r2, r2, #16
 8007cc6:	b2d2      	uxtb	r2, r2
 8007cc8:	4610      	mov	r0, r2
 8007cca:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8007ccc:	4b20      	ldr	r3, [pc, #128]	; (8007d50 <WIZCHIP_READ_BUF+0xbc>)
 8007cce:	6a1b      	ldr	r3, [r3, #32]
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	0a12      	lsrs	r2, r2, #8
 8007cd4:	b2d2      	uxtb	r2, r2
 8007cd6:	4610      	mov	r0, r2
 8007cd8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8007cda:	4b1d      	ldr	r3, [pc, #116]	; (8007d50 <WIZCHIP_READ_BUF+0xbc>)
 8007cdc:	6a1b      	ldr	r3, [r3, #32]
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	b2d2      	uxtb	r2, r2
 8007ce2:	4610      	mov	r0, r2
 8007ce4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	82fb      	strh	r3, [r7, #22]
 8007cea:	e00a      	b.n	8007d02 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8007cec:	4b18      	ldr	r3, [pc, #96]	; (8007d50 <WIZCHIP_READ_BUF+0xbc>)
 8007cee:	69db      	ldr	r3, [r3, #28]
 8007cf0:	8afa      	ldrh	r2, [r7, #22]
 8007cf2:	68b9      	ldr	r1, [r7, #8]
 8007cf4:	188c      	adds	r4, r1, r2
 8007cf6:	4798      	blx	r3
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8007cfc:	8afb      	ldrh	r3, [r7, #22]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	82fb      	strh	r3, [r7, #22]
 8007d02:	8afa      	ldrh	r2, [r7, #22]
 8007d04:	88fb      	ldrh	r3, [r7, #6]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d3f0      	bcc.n	8007cec <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007d0a:	e017      	b.n	8007d3c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	0c1b      	lsrs	r3, r3, #16
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	0a1b      	lsrs	r3, r3, #8
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8007d22:	4b0b      	ldr	r3, [pc, #44]	; (8007d50 <WIZCHIP_READ_BUF+0xbc>)
 8007d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d26:	f107 0210 	add.w	r2, r7, #16
 8007d2a:	2103      	movs	r1, #3
 8007d2c:	4610      	mov	r0, r2
 8007d2e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8007d30:	4b07      	ldr	r3, [pc, #28]	; (8007d50 <WIZCHIP_READ_BUF+0xbc>)
 8007d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d34:	88fa      	ldrh	r2, [r7, #6]
 8007d36:	4611      	mov	r1, r2
 8007d38:	68b8      	ldr	r0, [r7, #8]
 8007d3a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8007d3c:	4b04      	ldr	r3, [pc, #16]	; (8007d50 <WIZCHIP_READ_BUF+0xbc>)
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8007d42:	4b03      	ldr	r3, [pc, #12]	; (8007d50 <WIZCHIP_READ_BUF+0xbc>)
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	4798      	blx	r3
}
 8007d48:	bf00      	nop
 8007d4a:	371c      	adds	r7, #28
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd90      	pop	{r4, r7, pc}
 8007d50:	200000c4 	.word	0x200000c4

08007d54 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8007d62:	4b2b      	ldr	r3, [pc, #172]	; (8007e10 <WIZCHIP_WRITE_BUF+0xbc>)
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	4798      	blx	r3
   WIZCHIP.CS._select();
 8007d68:	4b29      	ldr	r3, [pc, #164]	; (8007e10 <WIZCHIP_WRITE_BUF+0xbc>)
 8007d6a:	695b      	ldr	r3, [r3, #20]
 8007d6c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f043 0304 	orr.w	r3, r3, #4
 8007d74:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007d76:	4b26      	ldr	r3, [pc, #152]	; (8007e10 <WIZCHIP_WRITE_BUF+0xbc>)
 8007d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d126      	bne.n	8007dcc <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8007d7e:	4b24      	ldr	r3, [pc, #144]	; (8007e10 <WIZCHIP_WRITE_BUF+0xbc>)
 8007d80:	6a1b      	ldr	r3, [r3, #32]
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	0c12      	lsrs	r2, r2, #16
 8007d86:	b2d2      	uxtb	r2, r2
 8007d88:	4610      	mov	r0, r2
 8007d8a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8007d8c:	4b20      	ldr	r3, [pc, #128]	; (8007e10 <WIZCHIP_WRITE_BUF+0xbc>)
 8007d8e:	6a1b      	ldr	r3, [r3, #32]
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	0a12      	lsrs	r2, r2, #8
 8007d94:	b2d2      	uxtb	r2, r2
 8007d96:	4610      	mov	r0, r2
 8007d98:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8007d9a:	4b1d      	ldr	r3, [pc, #116]	; (8007e10 <WIZCHIP_WRITE_BUF+0xbc>)
 8007d9c:	6a1b      	ldr	r3, [r3, #32]
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	b2d2      	uxtb	r2, r2
 8007da2:	4610      	mov	r0, r2
 8007da4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8007da6:	2300      	movs	r3, #0
 8007da8:	82fb      	strh	r3, [r7, #22]
 8007daa:	e00a      	b.n	8007dc2 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8007dac:	4b18      	ldr	r3, [pc, #96]	; (8007e10 <WIZCHIP_WRITE_BUF+0xbc>)
 8007dae:	6a1b      	ldr	r3, [r3, #32]
 8007db0:	8afa      	ldrh	r2, [r7, #22]
 8007db2:	68b9      	ldr	r1, [r7, #8]
 8007db4:	440a      	add	r2, r1
 8007db6:	7812      	ldrb	r2, [r2, #0]
 8007db8:	4610      	mov	r0, r2
 8007dba:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8007dbc:	8afb      	ldrh	r3, [r7, #22]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	82fb      	strh	r3, [r7, #22]
 8007dc2:	8afa      	ldrh	r2, [r7, #22]
 8007dc4:	88fb      	ldrh	r3, [r7, #6]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d3f0      	bcc.n	8007dac <WIZCHIP_WRITE_BUF+0x58>
 8007dca:	e017      	b.n	8007dfc <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	0c1b      	lsrs	r3, r3, #16
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	0a1b      	lsrs	r3, r3, #8
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8007de2:	4b0b      	ldr	r3, [pc, #44]	; (8007e10 <WIZCHIP_WRITE_BUF+0xbc>)
 8007de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de6:	f107 0210 	add.w	r2, r7, #16
 8007dea:	2103      	movs	r1, #3
 8007dec:	4610      	mov	r0, r2
 8007dee:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8007df0:	4b07      	ldr	r3, [pc, #28]	; (8007e10 <WIZCHIP_WRITE_BUF+0xbc>)
 8007df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df4:	88fa      	ldrh	r2, [r7, #6]
 8007df6:	4611      	mov	r1, r2
 8007df8:	68b8      	ldr	r0, [r7, #8]
 8007dfa:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8007dfc:	4b04      	ldr	r3, [pc, #16]	; (8007e10 <WIZCHIP_WRITE_BUF+0xbc>)
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8007e02:	4b03      	ldr	r3, [pc, #12]	; (8007e10 <WIZCHIP_WRITE_BUF+0xbc>)
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	4798      	blx	r3
}
 8007e08:	bf00      	nop
 8007e0a:	3718      	adds	r7, #24
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	200000c4 	.word	0x200000c4

08007e14 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8007e14:	b590      	push	{r4, r7, lr}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	81fb      	strh	r3, [r7, #14]
 8007e22:	2300      	movs	r3, #0
 8007e24:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8007e26:	79fb      	ldrb	r3, [r7, #7]
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	00db      	lsls	r3, r3, #3
 8007e2e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7ff fe94 	bl	8007b60 <WIZCHIP_READ>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8007e3c:	89bb      	ldrh	r3, [r7, #12]
 8007e3e:	021b      	lsls	r3, r3, #8
 8007e40:	b29c      	uxth	r4, r3
 8007e42:	79fb      	ldrb	r3, [r7, #7]
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	3301      	adds	r3, #1
 8007e48:	00db      	lsls	r3, r3, #3
 8007e4a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7ff fe86 	bl	8007b60 <WIZCHIP_READ>
 8007e54:	4603      	mov	r3, r0
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	4423      	add	r3, r4
 8007e5a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8007e5c:	89bb      	ldrh	r3, [r7, #12]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d01a      	beq.n	8007e98 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8007e62:	79fb      	ldrb	r3, [r7, #7]
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	3301      	adds	r3, #1
 8007e68:	00db      	lsls	r3, r3, #3
 8007e6a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7ff fe76 	bl	8007b60 <WIZCHIP_READ>
 8007e74:	4603      	mov	r3, r0
 8007e76:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8007e78:	89fb      	ldrh	r3, [r7, #14]
 8007e7a:	021b      	lsls	r3, r3, #8
 8007e7c:	b29c      	uxth	r4, r3
 8007e7e:	79fb      	ldrb	r3, [r7, #7]
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	3301      	adds	r3, #1
 8007e84:	00db      	lsls	r3, r3, #3
 8007e86:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7ff fe68 	bl	8007b60 <WIZCHIP_READ>
 8007e90:	4603      	mov	r3, r0
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	4423      	add	r3, r4
 8007e96:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8007e98:	89fa      	ldrh	r2, [r7, #14]
 8007e9a:	89bb      	ldrh	r3, [r7, #12]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d1c2      	bne.n	8007e26 <getSn_TX_FSR+0x12>
   return val;
 8007ea0:	89fb      	ldrh	r3, [r7, #14]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3714      	adds	r7, #20
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd90      	pop	{r4, r7, pc}

08007eaa <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8007eaa:	b590      	push	{r4, r7, lr}
 8007eac:	b085      	sub	sp, #20
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	81fb      	strh	r3, [r7, #14]
 8007eb8:	2300      	movs	r3, #0
 8007eba:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8007ebc:	79fb      	ldrb	r3, [r7, #7]
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	00db      	lsls	r3, r3, #3
 8007ec4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7ff fe49 	bl	8007b60 <WIZCHIP_READ>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8007ed2:	89bb      	ldrh	r3, [r7, #12]
 8007ed4:	021b      	lsls	r3, r3, #8
 8007ed6:	b29c      	uxth	r4, r3
 8007ed8:	79fb      	ldrb	r3, [r7, #7]
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	3301      	adds	r3, #1
 8007ede:	00db      	lsls	r3, r3, #3
 8007ee0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7ff fe3b 	bl	8007b60 <WIZCHIP_READ>
 8007eea:	4603      	mov	r3, r0
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	4423      	add	r3, r4
 8007ef0:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8007ef2:	89bb      	ldrh	r3, [r7, #12]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d01a      	beq.n	8007f2e <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8007ef8:	79fb      	ldrb	r3, [r7, #7]
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	3301      	adds	r3, #1
 8007efe:	00db      	lsls	r3, r3, #3
 8007f00:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7ff fe2b 	bl	8007b60 <WIZCHIP_READ>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8007f0e:	89fb      	ldrh	r3, [r7, #14]
 8007f10:	021b      	lsls	r3, r3, #8
 8007f12:	b29c      	uxth	r4, r3
 8007f14:	79fb      	ldrb	r3, [r7, #7]
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	3301      	adds	r3, #1
 8007f1a:	00db      	lsls	r3, r3, #3
 8007f1c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7ff fe1d 	bl	8007b60 <WIZCHIP_READ>
 8007f26:	4603      	mov	r3, r0
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	4423      	add	r3, r4
 8007f2c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8007f2e:	89fa      	ldrh	r2, [r7, #14]
 8007f30:	89bb      	ldrh	r3, [r7, #12]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d1c2      	bne.n	8007ebc <getSn_RX_RSR+0x12>
   return val;
 8007f36:	89fb      	ldrh	r3, [r7, #14]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd90      	pop	{r4, r7, pc}

08007f40 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8007f40:	b590      	push	{r4, r7, lr}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	4603      	mov	r3, r0
 8007f48:	6039      	str	r1, [r7, #0]
 8007f4a:	71fb      	strb	r3, [r7, #7]
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8007f50:	2300      	movs	r3, #0
 8007f52:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8007f54:	2300      	movs	r3, #0
 8007f56:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8007f58:	88bb      	ldrh	r3, [r7, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d048      	beq.n	8007ff0 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8007f5e:	79fb      	ldrb	r3, [r7, #7]
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	3301      	adds	r3, #1
 8007f64:	00db      	lsls	r3, r3, #3
 8007f66:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7ff fdf8 	bl	8007b60 <WIZCHIP_READ>
 8007f70:	4603      	mov	r3, r0
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	021b      	lsls	r3, r3, #8
 8007f76:	b29c      	uxth	r4, r3
 8007f78:	79fb      	ldrb	r3, [r7, #7]
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	00db      	lsls	r3, r3, #3
 8007f80:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7ff fdeb 	bl	8007b60 <WIZCHIP_READ>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	4423      	add	r3, r4
 8007f90:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8007f92:	89fb      	ldrh	r3, [r7, #14]
 8007f94:	021b      	lsls	r3, r3, #8
 8007f96:	79fa      	ldrb	r2, [r7, #7]
 8007f98:	0092      	lsls	r2, r2, #2
 8007f9a:	3202      	adds	r2, #2
 8007f9c:	00d2      	lsls	r2, r2, #3
 8007f9e:	4413      	add	r3, r2
 8007fa0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8007fa2:	88bb      	ldrh	r3, [r7, #4]
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	6839      	ldr	r1, [r7, #0]
 8007fa8:	68b8      	ldr	r0, [r7, #8]
 8007faa:	f7ff fed3 	bl	8007d54 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8007fae:	89fa      	ldrh	r2, [r7, #14]
 8007fb0:	88bb      	ldrh	r3, [r7, #4]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8007fb6:	79fb      	ldrb	r3, [r7, #7]
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	3301      	adds	r3, #1
 8007fbc:	00db      	lsls	r3, r3, #3
 8007fbe:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	89fb      	ldrh	r3, [r7, #14]
 8007fc6:	0a1b      	lsrs	r3, r3, #8
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	4619      	mov	r1, r3
 8007fce:	4610      	mov	r0, r2
 8007fd0:	f7ff fe12 	bl	8007bf8 <WIZCHIP_WRITE>
 8007fd4:	79fb      	ldrb	r3, [r7, #7]
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	3301      	adds	r3, #1
 8007fda:	00db      	lsls	r3, r3, #3
 8007fdc:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	89fb      	ldrh	r3, [r7, #14]
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	4610      	mov	r0, r2
 8007fea:	f7ff fe05 	bl	8007bf8 <WIZCHIP_WRITE>
 8007fee:	e000      	b.n	8007ff2 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8007ff0:	bf00      	nop
}
 8007ff2:	3714      	adds	r7, #20
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd90      	pop	{r4, r7, pc}

08007ff8 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8007ff8:	b590      	push	{r4, r7, lr}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	4603      	mov	r3, r0
 8008000:	6039      	str	r1, [r7, #0]
 8008002:	71fb      	strb	r3, [r7, #7]
 8008004:	4613      	mov	r3, r2
 8008006:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8008008:	2300      	movs	r3, #0
 800800a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800800c:	2300      	movs	r3, #0
 800800e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8008010:	88bb      	ldrh	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d048      	beq.n	80080a8 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8008016:	79fb      	ldrb	r3, [r7, #7]
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	3301      	adds	r3, #1
 800801c:	00db      	lsls	r3, r3, #3
 800801e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8008022:	4618      	mov	r0, r3
 8008024:	f7ff fd9c 	bl	8007b60 <WIZCHIP_READ>
 8008028:	4603      	mov	r3, r0
 800802a:	b29b      	uxth	r3, r3
 800802c:	021b      	lsls	r3, r3, #8
 800802e:	b29c      	uxth	r4, r3
 8008030:	79fb      	ldrb	r3, [r7, #7]
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	3301      	adds	r3, #1
 8008036:	00db      	lsls	r3, r3, #3
 8008038:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800803c:	4618      	mov	r0, r3
 800803e:	f7ff fd8f 	bl	8007b60 <WIZCHIP_READ>
 8008042:	4603      	mov	r3, r0
 8008044:	b29b      	uxth	r3, r3
 8008046:	4423      	add	r3, r4
 8008048:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800804a:	89fb      	ldrh	r3, [r7, #14]
 800804c:	021b      	lsls	r3, r3, #8
 800804e:	79fa      	ldrb	r2, [r7, #7]
 8008050:	0092      	lsls	r2, r2, #2
 8008052:	3203      	adds	r2, #3
 8008054:	00d2      	lsls	r2, r2, #3
 8008056:	4413      	add	r3, r2
 8008058:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800805a:	88bb      	ldrh	r3, [r7, #4]
 800805c:	461a      	mov	r2, r3
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	68b8      	ldr	r0, [r7, #8]
 8008062:	f7ff fe17 	bl	8007c94 <WIZCHIP_READ_BUF>
   ptr += len;
 8008066:	89fa      	ldrh	r2, [r7, #14]
 8008068:	88bb      	ldrh	r3, [r7, #4]
 800806a:	4413      	add	r3, r2
 800806c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800806e:	79fb      	ldrb	r3, [r7, #7]
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	3301      	adds	r3, #1
 8008074:	00db      	lsls	r3, r3, #3
 8008076:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800807a:	461a      	mov	r2, r3
 800807c:	89fb      	ldrh	r3, [r7, #14]
 800807e:	0a1b      	lsrs	r3, r3, #8
 8008080:	b29b      	uxth	r3, r3
 8008082:	b2db      	uxtb	r3, r3
 8008084:	4619      	mov	r1, r3
 8008086:	4610      	mov	r0, r2
 8008088:	f7ff fdb6 	bl	8007bf8 <WIZCHIP_WRITE>
 800808c:	79fb      	ldrb	r3, [r7, #7]
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	3301      	adds	r3, #1
 8008092:	00db      	lsls	r3, r3, #3
 8008094:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8008098:	461a      	mov	r2, r3
 800809a:	89fb      	ldrh	r3, [r7, #14]
 800809c:	b2db      	uxtb	r3, r3
 800809e:	4619      	mov	r1, r3
 80080a0:	4610      	mov	r0, r2
 80080a2:	f7ff fda9 	bl	8007bf8 <WIZCHIP_WRITE>
 80080a6:	e000      	b.n	80080aa <wiz_recv_data+0xb2>
   if(len == 0) return;
 80080a8:	bf00      	nop
}
 80080aa:	3714      	adds	r7, #20
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd90      	pop	{r4, r7, pc}

080080b0 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 80080b0:	b590      	push	{r4, r7, lr}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	4603      	mov	r3, r0
 80080b8:	460a      	mov	r2, r1
 80080ba:	71fb      	strb	r3, [r7, #7]
 80080bc:	4613      	mov	r3, r2
 80080be:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80080c0:	2300      	movs	r3, #0
 80080c2:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 80080c4:	79fb      	ldrb	r3, [r7, #7]
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	3301      	adds	r3, #1
 80080ca:	00db      	lsls	r3, r3, #3
 80080cc:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7ff fd45 	bl	8007b60 <WIZCHIP_READ>
 80080d6:	4603      	mov	r3, r0
 80080d8:	b29b      	uxth	r3, r3
 80080da:	021b      	lsls	r3, r3, #8
 80080dc:	b29c      	uxth	r4, r3
 80080de:	79fb      	ldrb	r3, [r7, #7]
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	3301      	adds	r3, #1
 80080e4:	00db      	lsls	r3, r3, #3
 80080e6:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7ff fd38 	bl	8007b60 <WIZCHIP_READ>
 80080f0:	4603      	mov	r3, r0
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	4423      	add	r3, r4
 80080f6:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 80080f8:	89fa      	ldrh	r2, [r7, #14]
 80080fa:	88bb      	ldrh	r3, [r7, #4]
 80080fc:	4413      	add	r3, r2
 80080fe:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8008100:	79fb      	ldrb	r3, [r7, #7]
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	3301      	adds	r3, #1
 8008106:	00db      	lsls	r3, r3, #3
 8008108:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800810c:	461a      	mov	r2, r3
 800810e:	89fb      	ldrh	r3, [r7, #14]
 8008110:	0a1b      	lsrs	r3, r3, #8
 8008112:	b29b      	uxth	r3, r3
 8008114:	b2db      	uxtb	r3, r3
 8008116:	4619      	mov	r1, r3
 8008118:	4610      	mov	r0, r2
 800811a:	f7ff fd6d 	bl	8007bf8 <WIZCHIP_WRITE>
 800811e:	79fb      	ldrb	r3, [r7, #7]
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	3301      	adds	r3, #1
 8008124:	00db      	lsls	r3, r3, #3
 8008126:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800812a:	461a      	mov	r2, r3
 800812c:	89fb      	ldrh	r3, [r7, #14]
 800812e:	b2db      	uxtb	r3, r3
 8008130:	4619      	mov	r1, r3
 8008132:	4610      	mov	r0, r2
 8008134:	f7ff fd60 	bl	8007bf8 <WIZCHIP_WRITE>
}
 8008138:	bf00      	nop
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	bd90      	pop	{r4, r7, pc}

08008140 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8008140:	b590      	push	{r4, r7, lr}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	4604      	mov	r4, r0
 8008148:	4608      	mov	r0, r1
 800814a:	4611      	mov	r1, r2
 800814c:	461a      	mov	r2, r3
 800814e:	4623      	mov	r3, r4
 8008150:	71fb      	strb	r3, [r7, #7]
 8008152:	4603      	mov	r3, r0
 8008154:	71bb      	strb	r3, [r7, #6]
 8008156:	460b      	mov	r3, r1
 8008158:	80bb      	strh	r3, [r7, #4]
 800815a:	4613      	mov	r3, r2
 800815c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800815e:	79fb      	ldrb	r3, [r7, #7]
 8008160:	2b08      	cmp	r3, #8
 8008162:	d902      	bls.n	800816a <socket+0x2a>
 8008164:	f04f 33ff 	mov.w	r3, #4294967295
 8008168:	e0f0      	b.n	800834c <socket+0x20c>
	switch(protocol)
 800816a:	79bb      	ldrb	r3, [r7, #6]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d005      	beq.n	800817c <socket+0x3c>
 8008170:	2b00      	cmp	r3, #0
 8008172:	dd11      	ble.n	8008198 <socket+0x58>
 8008174:	3b02      	subs	r3, #2
 8008176:	2b02      	cmp	r3, #2
 8008178:	d80e      	bhi.n	8008198 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800817a:	e011      	b.n	80081a0 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 800817c:	f107 030c 	add.w	r3, r7, #12
 8008180:	2204      	movs	r2, #4
 8008182:	4619      	mov	r1, r3
 8008184:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8008188:	f7ff fd84 	bl	8007c94 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d105      	bne.n	800819e <socket+0x5e>
 8008192:	f06f 0302 	mvn.w	r3, #2
 8008196:	e0d9      	b.n	800834c <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8008198:	f06f 0304 	mvn.w	r3, #4
 800819c:	e0d6      	b.n	800834c <socket+0x20c>
	    break;
 800819e:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80081a0:	78fb      	ldrb	r3, [r7, #3]
 80081a2:	f003 0304 	and.w	r3, r3, #4
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d002      	beq.n	80081b0 <socket+0x70>
 80081aa:	f06f 0305 	mvn.w	r3, #5
 80081ae:	e0cd      	b.n	800834c <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80081b0:	78fb      	ldrb	r3, [r7, #3]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d028      	beq.n	8008208 <socket+0xc8>
	{
   	switch(protocol)
 80081b6:	79bb      	ldrb	r3, [r7, #6]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d002      	beq.n	80081c2 <socket+0x82>
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d008      	beq.n	80081d2 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80081c0:	e022      	b.n	8008208 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80081c2:	78fb      	ldrb	r3, [r7, #3]
 80081c4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d11a      	bne.n	8008202 <socket+0xc2>
 80081cc:	f06f 0305 	mvn.w	r3, #5
 80081d0:	e0bc      	b.n	800834c <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 80081d2:	78fb      	ldrb	r3, [r7, #3]
 80081d4:	f003 0320 	and.w	r3, r3, #32
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d006      	beq.n	80081ea <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80081dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	db02      	blt.n	80081ea <socket+0xaa>
 80081e4:	f06f 0305 	mvn.w	r3, #5
 80081e8:	e0b0      	b.n	800834c <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 80081ea:	78fb      	ldrb	r3, [r7, #3]
 80081ec:	f003 0310 	and.w	r3, r3, #16
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d008      	beq.n	8008206 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80081f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	db04      	blt.n	8008206 <socket+0xc6>
 80081fc:	f06f 0305 	mvn.w	r3, #5
 8008200:	e0a4      	b.n	800834c <socket+0x20c>
   	      break;
 8008202:	bf00      	nop
 8008204:	e000      	b.n	8008208 <socket+0xc8>
   	      break;
 8008206:	bf00      	nop
   	}
   }
	close(sn);
 8008208:	79fb      	ldrb	r3, [r7, #7]
 800820a:	4618      	mov	r0, r3
 800820c:	f000 f8ac 	bl	8008368 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8008210:	79fb      	ldrb	r3, [r7, #7]
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	3301      	adds	r3, #1
 8008216:	00db      	lsls	r3, r3, #3
 8008218:	4618      	mov	r0, r3
 800821a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800821e:	f023 030f 	bic.w	r3, r3, #15
 8008222:	b25a      	sxtb	r2, r3
 8008224:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008228:	4313      	orrs	r3, r2
 800822a:	b25b      	sxtb	r3, r3
 800822c:	b2db      	uxtb	r3, r3
 800822e:	4619      	mov	r1, r3
 8008230:	f7ff fce2 	bl	8007bf8 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8008234:	88bb      	ldrh	r3, [r7, #4]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d110      	bne.n	800825c <socket+0x11c>
	{
	   port = sock_any_port++;
 800823a:	4b46      	ldr	r3, [pc, #280]	; (8008354 <socket+0x214>)
 800823c:	881b      	ldrh	r3, [r3, #0]
 800823e:	1c5a      	adds	r2, r3, #1
 8008240:	b291      	uxth	r1, r2
 8008242:	4a44      	ldr	r2, [pc, #272]	; (8008354 <socket+0x214>)
 8008244:	8011      	strh	r1, [r2, #0]
 8008246:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8008248:	4b42      	ldr	r3, [pc, #264]	; (8008354 <socket+0x214>)
 800824a:	881b      	ldrh	r3, [r3, #0]
 800824c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8008250:	4293      	cmp	r3, r2
 8008252:	d103      	bne.n	800825c <socket+0x11c>
 8008254:	4b3f      	ldr	r3, [pc, #252]	; (8008354 <socket+0x214>)
 8008256:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800825a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800825c:	79fb      	ldrb	r3, [r7, #7]
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	3301      	adds	r3, #1
 8008262:	00db      	lsls	r3, r3, #3
 8008264:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008268:	461a      	mov	r2, r3
 800826a:	88bb      	ldrh	r3, [r7, #4]
 800826c:	0a1b      	lsrs	r3, r3, #8
 800826e:	b29b      	uxth	r3, r3
 8008270:	b2db      	uxtb	r3, r3
 8008272:	4619      	mov	r1, r3
 8008274:	4610      	mov	r0, r2
 8008276:	f7ff fcbf 	bl	8007bf8 <WIZCHIP_WRITE>
 800827a:	79fb      	ldrb	r3, [r7, #7]
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	3301      	adds	r3, #1
 8008280:	00db      	lsls	r3, r3, #3
 8008282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008286:	461a      	mov	r2, r3
 8008288:	88bb      	ldrh	r3, [r7, #4]
 800828a:	b2db      	uxtb	r3, r3
 800828c:	4619      	mov	r1, r3
 800828e:	4610      	mov	r0, r2
 8008290:	f7ff fcb2 	bl	8007bf8 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8008294:	79fb      	ldrb	r3, [r7, #7]
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	3301      	adds	r3, #1
 800829a:	00db      	lsls	r3, r3, #3
 800829c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80082a0:	2101      	movs	r1, #1
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7ff fca8 	bl	8007bf8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80082a8:	bf00      	nop
 80082aa:	79fb      	ldrb	r3, [r7, #7]
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	3301      	adds	r3, #1
 80082b0:	00db      	lsls	r3, r3, #3
 80082b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7ff fc52 	bl	8007b60 <WIZCHIP_READ>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1f3      	bne.n	80082aa <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80082c2:	79fb      	ldrb	r3, [r7, #7]
 80082c4:	2201      	movs	r2, #1
 80082c6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ca:	b21b      	sxth	r3, r3
 80082cc:	43db      	mvns	r3, r3
 80082ce:	b21a      	sxth	r2, r3
 80082d0:	4b21      	ldr	r3, [pc, #132]	; (8008358 <socket+0x218>)
 80082d2:	881b      	ldrh	r3, [r3, #0]
 80082d4:	b21b      	sxth	r3, r3
 80082d6:	4013      	ands	r3, r2
 80082d8:	b21b      	sxth	r3, r3
 80082da:	b29a      	uxth	r2, r3
 80082dc:	4b1e      	ldr	r3, [pc, #120]	; (8008358 <socket+0x218>)
 80082de:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80082e0:	78fb      	ldrb	r3, [r7, #3]
 80082e2:	f003 0201 	and.w	r2, r3, #1
 80082e6:	79fb      	ldrb	r3, [r7, #7]
 80082e8:	fa02 f303 	lsl.w	r3, r2, r3
 80082ec:	b21a      	sxth	r2, r3
 80082ee:	4b1a      	ldr	r3, [pc, #104]	; (8008358 <socket+0x218>)
 80082f0:	881b      	ldrh	r3, [r3, #0]
 80082f2:	b21b      	sxth	r3, r3
 80082f4:	4313      	orrs	r3, r2
 80082f6:	b21b      	sxth	r3, r3
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	4b17      	ldr	r3, [pc, #92]	; (8008358 <socket+0x218>)
 80082fc:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80082fe:	79fb      	ldrb	r3, [r7, #7]
 8008300:	2201      	movs	r2, #1
 8008302:	fa02 f303 	lsl.w	r3, r2, r3
 8008306:	b21b      	sxth	r3, r3
 8008308:	43db      	mvns	r3, r3
 800830a:	b21a      	sxth	r2, r3
 800830c:	4b13      	ldr	r3, [pc, #76]	; (800835c <socket+0x21c>)
 800830e:	881b      	ldrh	r3, [r3, #0]
 8008310:	b21b      	sxth	r3, r3
 8008312:	4013      	ands	r3, r2
 8008314:	b21b      	sxth	r3, r3
 8008316:	b29a      	uxth	r2, r3
 8008318:	4b10      	ldr	r3, [pc, #64]	; (800835c <socket+0x21c>)
 800831a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800831c:	79fb      	ldrb	r3, [r7, #7]
 800831e:	4a10      	ldr	r2, [pc, #64]	; (8008360 <socket+0x220>)
 8008320:	2100      	movs	r1, #0
 8008322:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8008326:	79fb      	ldrb	r3, [r7, #7]
 8008328:	4a0e      	ldr	r2, [pc, #56]	; (8008364 <socket+0x224>)
 800832a:	2100      	movs	r1, #0
 800832c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800832e:	bf00      	nop
 8008330:	79fb      	ldrb	r3, [r7, #7]
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	3301      	adds	r3, #1
 8008336:	00db      	lsls	r3, r3, #3
 8008338:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800833c:	4618      	mov	r0, r3
 800833e:	f7ff fc0f 	bl	8007b60 <WIZCHIP_READ>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d0f3      	beq.n	8008330 <socket+0x1f0>
   return (int8_t)sn;
 8008348:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800834c:	4618      	mov	r0, r3
 800834e:	3714      	adds	r7, #20
 8008350:	46bd      	mov	sp, r7
 8008352:	bd90      	pop	{r4, r7, pc}
 8008354:	200000c2 	.word	0x200000c2
 8008358:	20000944 	.word	0x20000944
 800835c:	20000946 	.word	0x20000946
 8008360:	20000948 	.word	0x20000948
 8008364:	20000958 	.word	0x20000958

08008368 <close>:

int8_t close(uint8_t sn)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	4603      	mov	r3, r0
 8008370:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8008372:	79fb      	ldrb	r3, [r7, #7]
 8008374:	2b08      	cmp	r3, #8
 8008376:	d902      	bls.n	800837e <close+0x16>
 8008378:	f04f 33ff 	mov.w	r3, #4294967295
 800837c:	e055      	b.n	800842a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800837e:	79fb      	ldrb	r3, [r7, #7]
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	3301      	adds	r3, #1
 8008384:	00db      	lsls	r3, r3, #3
 8008386:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800838a:	2110      	movs	r1, #16
 800838c:	4618      	mov	r0, r3
 800838e:	f7ff fc33 	bl	8007bf8 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8008392:	bf00      	nop
 8008394:	79fb      	ldrb	r3, [r7, #7]
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	3301      	adds	r3, #1
 800839a:	00db      	lsls	r3, r3, #3
 800839c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7ff fbdd 	bl	8007b60 <WIZCHIP_READ>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1f3      	bne.n	8008394 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80083ac:	79fb      	ldrb	r3, [r7, #7]
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	3301      	adds	r3, #1
 80083b2:	00db      	lsls	r3, r3, #3
 80083b4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80083b8:	211f      	movs	r1, #31
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7ff fc1c 	bl	8007bf8 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80083c0:	79fb      	ldrb	r3, [r7, #7]
 80083c2:	2201      	movs	r2, #1
 80083c4:	fa02 f303 	lsl.w	r3, r2, r3
 80083c8:	b21b      	sxth	r3, r3
 80083ca:	43db      	mvns	r3, r3
 80083cc:	b21a      	sxth	r2, r3
 80083ce:	4b19      	ldr	r3, [pc, #100]	; (8008434 <close+0xcc>)
 80083d0:	881b      	ldrh	r3, [r3, #0]
 80083d2:	b21b      	sxth	r3, r3
 80083d4:	4013      	ands	r3, r2
 80083d6:	b21b      	sxth	r3, r3
 80083d8:	b29a      	uxth	r2, r3
 80083da:	4b16      	ldr	r3, [pc, #88]	; (8008434 <close+0xcc>)
 80083dc:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80083de:	79fb      	ldrb	r3, [r7, #7]
 80083e0:	2201      	movs	r2, #1
 80083e2:	fa02 f303 	lsl.w	r3, r2, r3
 80083e6:	b21b      	sxth	r3, r3
 80083e8:	43db      	mvns	r3, r3
 80083ea:	b21a      	sxth	r2, r3
 80083ec:	4b12      	ldr	r3, [pc, #72]	; (8008438 <close+0xd0>)
 80083ee:	881b      	ldrh	r3, [r3, #0]
 80083f0:	b21b      	sxth	r3, r3
 80083f2:	4013      	ands	r3, r2
 80083f4:	b21b      	sxth	r3, r3
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	4b0f      	ldr	r3, [pc, #60]	; (8008438 <close+0xd0>)
 80083fa:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80083fc:	79fb      	ldrb	r3, [r7, #7]
 80083fe:	4a0f      	ldr	r2, [pc, #60]	; (800843c <close+0xd4>)
 8008400:	2100      	movs	r1, #0
 8008402:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8008406:	79fb      	ldrb	r3, [r7, #7]
 8008408:	4a0d      	ldr	r2, [pc, #52]	; (8008440 <close+0xd8>)
 800840a:	2100      	movs	r1, #0
 800840c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800840e:	bf00      	nop
 8008410:	79fb      	ldrb	r3, [r7, #7]
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	3301      	adds	r3, #1
 8008416:	00db      	lsls	r3, r3, #3
 8008418:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800841c:	4618      	mov	r0, r3
 800841e:	f7ff fb9f 	bl	8007b60 <WIZCHIP_READ>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d1f3      	bne.n	8008410 <close+0xa8>
	return SOCK_OK;
 8008428:	2301      	movs	r3, #1
}
 800842a:	4618      	mov	r0, r3
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	20000944 	.word	0x20000944
 8008438:	20000946 	.word	0x20000946
 800843c:	20000948 	.word	0x20000948
 8008440:	20000958 	.word	0x20000958

08008444 <listen>:

int8_t listen(uint8_t sn)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	4603      	mov	r3, r0
 800844c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800844e:	79fb      	ldrb	r3, [r7, #7]
 8008450:	2b08      	cmp	r3, #8
 8008452:	d902      	bls.n	800845a <listen+0x16>
 8008454:	f04f 33ff 	mov.w	r3, #4294967295
 8008458:	e049      	b.n	80084ee <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800845a:	79fb      	ldrb	r3, [r7, #7]
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	3301      	adds	r3, #1
 8008460:	00db      	lsls	r3, r3, #3
 8008462:	4618      	mov	r0, r3
 8008464:	f7ff fb7c 	bl	8007b60 <WIZCHIP_READ>
 8008468:	4603      	mov	r3, r0
 800846a:	f003 030f 	and.w	r3, r3, #15
 800846e:	2b01      	cmp	r3, #1
 8008470:	d002      	beq.n	8008478 <listen+0x34>
 8008472:	f06f 0304 	mvn.w	r3, #4
 8008476:	e03a      	b.n	80084ee <listen+0xaa>
	CHECK_SOCKINIT();
 8008478:	79fb      	ldrb	r3, [r7, #7]
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	3301      	adds	r3, #1
 800847e:	00db      	lsls	r3, r3, #3
 8008480:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008484:	4618      	mov	r0, r3
 8008486:	f7ff fb6b 	bl	8007b60 <WIZCHIP_READ>
 800848a:	4603      	mov	r3, r0
 800848c:	2b13      	cmp	r3, #19
 800848e:	d002      	beq.n	8008496 <listen+0x52>
 8008490:	f06f 0302 	mvn.w	r3, #2
 8008494:	e02b      	b.n	80084ee <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8008496:	79fb      	ldrb	r3, [r7, #7]
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	3301      	adds	r3, #1
 800849c:	00db      	lsls	r3, r3, #3
 800849e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80084a2:	2102      	movs	r1, #2
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7ff fba7 	bl	8007bf8 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 80084aa:	bf00      	nop
 80084ac:	79fb      	ldrb	r3, [r7, #7]
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	3301      	adds	r3, #1
 80084b2:	00db      	lsls	r3, r3, #3
 80084b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7ff fb51 	bl	8007b60 <WIZCHIP_READ>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1f3      	bne.n	80084ac <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80084c4:	e006      	b.n	80084d4 <listen+0x90>
   {
         close(sn);
 80084c6:	79fb      	ldrb	r3, [r7, #7]
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7ff ff4d 	bl	8008368 <close>
         return SOCKERR_SOCKCLOSED;
 80084ce:	f06f 0303 	mvn.w	r3, #3
 80084d2:	e00c      	b.n	80084ee <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80084d4:	79fb      	ldrb	r3, [r7, #7]
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	3301      	adds	r3, #1
 80084da:	00db      	lsls	r3, r3, #3
 80084dc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80084e0:	4618      	mov	r0, r3
 80084e2:	f7ff fb3d 	bl	8007b60 <WIZCHIP_READ>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b14      	cmp	r3, #20
 80084ea:	d1ec      	bne.n	80084c6 <listen+0x82>
   }
   return SOCK_OK;
 80084ec:	2301      	movs	r3, #1
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3708      	adds	r7, #8
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
	...

080084f8 <connect>:


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	4603      	mov	r3, r0
 8008500:	6039      	str	r1, [r7, #0]
 8008502:	71fb      	strb	r3, [r7, #7]
 8008504:	4613      	mov	r3, r2
 8008506:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8008508:	79fb      	ldrb	r3, [r7, #7]
 800850a:	2b08      	cmp	r3, #8
 800850c:	d902      	bls.n	8008514 <connect+0x1c>
 800850e:	f04f 33ff 	mov.w	r3, #4294967295
 8008512:	e0c6      	b.n	80086a2 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8008514:	79fb      	ldrb	r3, [r7, #7]
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	3301      	adds	r3, #1
 800851a:	00db      	lsls	r3, r3, #3
 800851c:	4618      	mov	r0, r3
 800851e:	f7ff fb1f 	bl	8007b60 <WIZCHIP_READ>
 8008522:	4603      	mov	r3, r0
 8008524:	f003 030f 	and.w	r3, r3, #15
 8008528:	2b01      	cmp	r3, #1
 800852a:	d002      	beq.n	8008532 <connect+0x3a>
 800852c:	f06f 0304 	mvn.w	r3, #4
 8008530:	e0b7      	b.n	80086a2 <connect+0x1aa>
   CHECK_SOCKINIT();
 8008532:	79fb      	ldrb	r3, [r7, #7]
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	3301      	adds	r3, #1
 8008538:	00db      	lsls	r3, r3, #3
 800853a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800853e:	4618      	mov	r0, r3
 8008540:	f7ff fb0e 	bl	8007b60 <WIZCHIP_READ>
 8008544:	4603      	mov	r3, r0
 8008546:	2b13      	cmp	r3, #19
 8008548:	d002      	beq.n	8008550 <connect+0x58>
 800854a:	f06f 0302 	mvn.w	r3, #2
 800854e:	e0a8      	b.n	80086a2 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	021b      	lsls	r3, r3, #8
 800855a:	683a      	ldr	r2, [r7, #0]
 800855c:	3201      	adds	r2, #1
 800855e:	7812      	ldrb	r2, [r2, #0]
 8008560:	4413      	add	r3, r2
 8008562:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	021b      	lsls	r3, r3, #8
 8008568:	683a      	ldr	r2, [r7, #0]
 800856a:	3202      	adds	r2, #2
 800856c:	7812      	ldrb	r2, [r2, #0]
 800856e:	4413      	add	r3, r2
 8008570:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	021b      	lsls	r3, r3, #8
 8008576:	683a      	ldr	r2, [r7, #0]
 8008578:	3203      	adds	r2, #3
 800857a:	7812      	ldrb	r2, [r2, #0]
 800857c:	4413      	add	r3, r2
 800857e:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008586:	d002      	beq.n	800858e <connect+0x96>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d102      	bne.n	8008594 <connect+0x9c>
 800858e:	f06f 030b 	mvn.w	r3, #11
 8008592:	e086      	b.n	80086a2 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8008594:	88bb      	ldrh	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d102      	bne.n	80085a0 <connect+0xa8>
 800859a:	f06f 030a 	mvn.w	r3, #10
 800859e:	e080      	b.n	80086a2 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 80085a0:	79fb      	ldrb	r3, [r7, #7]
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	3301      	adds	r3, #1
 80085a6:	00db      	lsls	r3, r3, #3
 80085a8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80085ac:	2204      	movs	r2, #4
 80085ae:	6839      	ldr	r1, [r7, #0]
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7ff fbcf 	bl	8007d54 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 80085b6:	79fb      	ldrb	r3, [r7, #7]
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	3301      	adds	r3, #1
 80085bc:	00db      	lsls	r3, r3, #3
 80085be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085c2:	461a      	mov	r2, r3
 80085c4:	88bb      	ldrh	r3, [r7, #4]
 80085c6:	0a1b      	lsrs	r3, r3, #8
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	4619      	mov	r1, r3
 80085ce:	4610      	mov	r0, r2
 80085d0:	f7ff fb12 	bl	8007bf8 <WIZCHIP_WRITE>
 80085d4:	79fb      	ldrb	r3, [r7, #7]
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	3301      	adds	r3, #1
 80085da:	00db      	lsls	r3, r3, #3
 80085dc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80085e0:	461a      	mov	r2, r3
 80085e2:	88bb      	ldrh	r3, [r7, #4]
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	4619      	mov	r1, r3
 80085e8:	4610      	mov	r0, r2
 80085ea:	f7ff fb05 	bl	8007bf8 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 80085ee:	79fb      	ldrb	r3, [r7, #7]
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	3301      	adds	r3, #1
 80085f4:	00db      	lsls	r3, r3, #3
 80085f6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80085fa:	2104      	movs	r1, #4
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7ff fafb 	bl	8007bf8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8008602:	bf00      	nop
 8008604:	79fb      	ldrb	r3, [r7, #7]
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	3301      	adds	r3, #1
 800860a:	00db      	lsls	r3, r3, #3
 800860c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008610:	4618      	mov	r0, r3
 8008612:	f7ff faa5 	bl	8007b60 <WIZCHIP_READ>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1f3      	bne.n	8008604 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800861c:	4b23      	ldr	r3, [pc, #140]	; (80086ac <connect+0x1b4>)
 800861e:	881b      	ldrh	r3, [r3, #0]
 8008620:	461a      	mov	r2, r3
 8008622:	79fb      	ldrb	r3, [r7, #7]
 8008624:	fa42 f303 	asr.w	r3, r2, r3
 8008628:	f003 0301 	and.w	r3, r3, #1
 800862c:	2b00      	cmp	r3, #0
 800862e:	d02b      	beq.n	8008688 <connect+0x190>
 8008630:	2300      	movs	r3, #0
 8008632:	e036      	b.n	80086a2 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8008634:	79fb      	ldrb	r3, [r7, #7]
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	3301      	adds	r3, #1
 800863a:	00db      	lsls	r3, r3, #3
 800863c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008640:	4618      	mov	r0, r3
 8008642:	f7ff fa8d 	bl	8007b60 <WIZCHIP_READ>
 8008646:	4603      	mov	r3, r0
 8008648:	f003 0308 	and.w	r3, r3, #8
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00c      	beq.n	800866a <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8008650:	79fb      	ldrb	r3, [r7, #7]
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	3301      	adds	r3, #1
 8008656:	00db      	lsls	r3, r3, #3
 8008658:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800865c:	2108      	movs	r1, #8
 800865e:	4618      	mov	r0, r3
 8008660:	f7ff faca 	bl	8007bf8 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8008664:	f06f 030c 	mvn.w	r3, #12
 8008668:	e01b      	b.n	80086a2 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 800866a:	79fb      	ldrb	r3, [r7, #7]
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	3301      	adds	r3, #1
 8008670:	00db      	lsls	r3, r3, #3
 8008672:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008676:	4618      	mov	r0, r3
 8008678:	f7ff fa72 	bl	8007b60 <WIZCHIP_READ>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d102      	bne.n	8008688 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8008682:	f06f 0303 	mvn.w	r3, #3
 8008686:	e00c      	b.n	80086a2 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8008688:	79fb      	ldrb	r3, [r7, #7]
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	3301      	adds	r3, #1
 800868e:	00db      	lsls	r3, r3, #3
 8008690:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008694:	4618      	mov	r0, r3
 8008696:	f7ff fa63 	bl	8007b60 <WIZCHIP_READ>
 800869a:	4603      	mov	r3, r0
 800869c:	2b17      	cmp	r3, #23
 800869e:	d1c9      	bne.n	8008634 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 80086a0:	2301      	movs	r3, #1
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	20000944 	.word	0x20000944

080086b0 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	4603      	mov	r3, r0
 80086b8:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80086ba:	79fb      	ldrb	r3, [r7, #7]
 80086bc:	2b08      	cmp	r3, #8
 80086be:	d902      	bls.n	80086c6 <disconnect+0x16>
 80086c0:	f04f 33ff 	mov.w	r3, #4294967295
 80086c4:	e062      	b.n	800878c <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80086c6:	79fb      	ldrb	r3, [r7, #7]
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	3301      	adds	r3, #1
 80086cc:	00db      	lsls	r3, r3, #3
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7ff fa46 	bl	8007b60 <WIZCHIP_READ>
 80086d4:	4603      	mov	r3, r0
 80086d6:	f003 030f 	and.w	r3, r3, #15
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d002      	beq.n	80086e4 <disconnect+0x34>
 80086de:	f06f 0304 	mvn.w	r3, #4
 80086e2:	e053      	b.n	800878c <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 80086e4:	79fb      	ldrb	r3, [r7, #7]
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	3301      	adds	r3, #1
 80086ea:	00db      	lsls	r3, r3, #3
 80086ec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80086f0:	2108      	movs	r1, #8
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7ff fa80 	bl	8007bf8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80086f8:	bf00      	nop
 80086fa:	79fb      	ldrb	r3, [r7, #7]
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	3301      	adds	r3, #1
 8008700:	00db      	lsls	r3, r3, #3
 8008702:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008706:	4618      	mov	r0, r3
 8008708:	f7ff fa2a 	bl	8007b60 <WIZCHIP_READ>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1f3      	bne.n	80086fa <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8008712:	79fb      	ldrb	r3, [r7, #7]
 8008714:	2201      	movs	r2, #1
 8008716:	fa02 f303 	lsl.w	r3, r2, r3
 800871a:	b21b      	sxth	r3, r3
 800871c:	43db      	mvns	r3, r3
 800871e:	b21a      	sxth	r2, r3
 8008720:	4b1c      	ldr	r3, [pc, #112]	; (8008794 <disconnect+0xe4>)
 8008722:	881b      	ldrh	r3, [r3, #0]
 8008724:	b21b      	sxth	r3, r3
 8008726:	4013      	ands	r3, r2
 8008728:	b21b      	sxth	r3, r3
 800872a:	b29a      	uxth	r2, r3
 800872c:	4b19      	ldr	r3, [pc, #100]	; (8008794 <disconnect+0xe4>)
 800872e:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8008730:	4b19      	ldr	r3, [pc, #100]	; (8008798 <disconnect+0xe8>)
 8008732:	881b      	ldrh	r3, [r3, #0]
 8008734:	461a      	mov	r2, r3
 8008736:	79fb      	ldrb	r3, [r7, #7]
 8008738:	fa42 f303 	asr.w	r3, r2, r3
 800873c:	f003 0301 	and.w	r3, r3, #1
 8008740:	2b00      	cmp	r3, #0
 8008742:	d016      	beq.n	8008772 <disconnect+0xc2>
 8008744:	2300      	movs	r3, #0
 8008746:	e021      	b.n	800878c <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{	//TODO add task yeld
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8008748:	79fb      	ldrb	r3, [r7, #7]
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	3301      	adds	r3, #1
 800874e:	00db      	lsls	r3, r3, #3
 8008750:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008754:	4618      	mov	r0, r3
 8008756:	f7ff fa03 	bl	8007b60 <WIZCHIP_READ>
 800875a:	4603      	mov	r3, r0
 800875c:	f003 0308 	and.w	r3, r3, #8
 8008760:	2b00      	cmp	r3, #0
 8008762:	d006      	beq.n	8008772 <disconnect+0xc2>
	   {
	      close(sn);
 8008764:	79fb      	ldrb	r3, [r7, #7]
 8008766:	4618      	mov	r0, r3
 8008768:	f7ff fdfe 	bl	8008368 <close>
	      return SOCKERR_TIMEOUT;
 800876c:	f06f 030c 	mvn.w	r3, #12
 8008770:	e00c      	b.n	800878c <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8008772:	79fb      	ldrb	r3, [r7, #7]
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	3301      	adds	r3, #1
 8008778:	00db      	lsls	r3, r3, #3
 800877a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800877e:	4618      	mov	r0, r3
 8008780:	f7ff f9ee 	bl	8007b60 <WIZCHIP_READ>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1de      	bne.n	8008748 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 800878a:	2301      	movs	r3, #1
}
 800878c:	4618      	mov	r0, r3
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	20000946 	.word	0x20000946
 8008798:	20000944 	.word	0x20000944

0800879c <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	4603      	mov	r3, r0
 80087a4:	6039      	str	r1, [r7, #0]
 80087a6:	71fb      	strb	r3, [r7, #7]
 80087a8:	4613      	mov	r3, r2
 80087aa:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80087ac:	2300      	movs	r3, #0
 80087ae:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80087b0:	2300      	movs	r3, #0
 80087b2:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 80087b4:	79fb      	ldrb	r3, [r7, #7]
 80087b6:	2b08      	cmp	r3, #8
 80087b8:	d902      	bls.n	80087c0 <send+0x24>
 80087ba:	f04f 33ff 	mov.w	r3, #4294967295
 80087be:	e0de      	b.n	800897e <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80087c0:	79fb      	ldrb	r3, [r7, #7]
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	3301      	adds	r3, #1
 80087c6:	00db      	lsls	r3, r3, #3
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7ff f9c9 	bl	8007b60 <WIZCHIP_READ>
 80087ce:	4603      	mov	r3, r0
 80087d0:	f003 030f 	and.w	r3, r3, #15
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d002      	beq.n	80087de <send+0x42>
 80087d8:	f06f 0304 	mvn.w	r3, #4
 80087dc:	e0cf      	b.n	800897e <send+0x1e2>
   CHECK_SOCKDATA();
 80087de:	88bb      	ldrh	r3, [r7, #4]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d102      	bne.n	80087ea <send+0x4e>
 80087e4:	f06f 030d 	mvn.w	r3, #13
 80087e8:	e0c9      	b.n	800897e <send+0x1e2>
   tmp = getSn_SR(sn);
 80087ea:	79fb      	ldrb	r3, [r7, #7]
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	3301      	adds	r3, #1
 80087f0:	00db      	lsls	r3, r3, #3
 80087f2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7ff f9b2 	bl	8007b60 <WIZCHIP_READ>
 80087fc:	4603      	mov	r3, r0
 80087fe:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8008800:	7bfb      	ldrb	r3, [r7, #15]
 8008802:	2b17      	cmp	r3, #23
 8008804:	d005      	beq.n	8008812 <send+0x76>
 8008806:	7bfb      	ldrb	r3, [r7, #15]
 8008808:	2b1c      	cmp	r3, #28
 800880a:	d002      	beq.n	8008812 <send+0x76>
 800880c:	f06f 0306 	mvn.w	r3, #6
 8008810:	e0b5      	b.n	800897e <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8008812:	4b5d      	ldr	r3, [pc, #372]	; (8008988 <send+0x1ec>)
 8008814:	881b      	ldrh	r3, [r3, #0]
 8008816:	461a      	mov	r2, r3
 8008818:	79fb      	ldrb	r3, [r7, #7]
 800881a:	fa42 f303 	asr.w	r3, r2, r3
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	2b00      	cmp	r3, #0
 8008824:	d039      	beq.n	800889a <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8008826:	79fb      	ldrb	r3, [r7, #7]
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	3301      	adds	r3, #1
 800882c:	00db      	lsls	r3, r3, #3
 800882e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008832:	4618      	mov	r0, r3
 8008834:	f7ff f994 	bl	8007b60 <WIZCHIP_READ>
 8008838:	4603      	mov	r3, r0
 800883a:	f003 031f 	and.w	r3, r3, #31
 800883e:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8008840:	7bfb      	ldrb	r3, [r7, #15]
 8008842:	f003 0310 	and.w	r3, r3, #16
 8008846:	2b00      	cmp	r3, #0
 8008848:	d019      	beq.n	800887e <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800884a:	79fb      	ldrb	r3, [r7, #7]
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	3301      	adds	r3, #1
 8008850:	00db      	lsls	r3, r3, #3
 8008852:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008856:	2110      	movs	r1, #16
 8008858:	4618      	mov	r0, r3
 800885a:	f7ff f9cd 	bl	8007bf8 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 800885e:	79fb      	ldrb	r3, [r7, #7]
 8008860:	2201      	movs	r2, #1
 8008862:	fa02 f303 	lsl.w	r3, r2, r3
 8008866:	b21b      	sxth	r3, r3
 8008868:	43db      	mvns	r3, r3
 800886a:	b21a      	sxth	r2, r3
 800886c:	4b46      	ldr	r3, [pc, #280]	; (8008988 <send+0x1ec>)
 800886e:	881b      	ldrh	r3, [r3, #0]
 8008870:	b21b      	sxth	r3, r3
 8008872:	4013      	ands	r3, r2
 8008874:	b21b      	sxth	r3, r3
 8008876:	b29a      	uxth	r2, r3
 8008878:	4b43      	ldr	r3, [pc, #268]	; (8008988 <send+0x1ec>)
 800887a:	801a      	strh	r2, [r3, #0]
 800887c:	e00d      	b.n	800889a <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 800887e:	7bfb      	ldrb	r3, [r7, #15]
 8008880:	f003 0308 	and.w	r3, r3, #8
 8008884:	2b00      	cmp	r3, #0
 8008886:	d006      	beq.n	8008896 <send+0xfa>
      {
         close(sn);
 8008888:	79fb      	ldrb	r3, [r7, #7]
 800888a:	4618      	mov	r0, r3
 800888c:	f7ff fd6c 	bl	8008368 <close>
         return SOCKERR_TIMEOUT;
 8008890:	f06f 030c 	mvn.w	r3, #12
 8008894:	e073      	b.n	800897e <send+0x1e2>
      }
      else return SOCK_BUSY;
 8008896:	2300      	movs	r3, #0
 8008898:	e071      	b.n	800897e <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 800889a:	79fb      	ldrb	r3, [r7, #7]
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	3301      	adds	r3, #1
 80088a0:	00db      	lsls	r3, r3, #3
 80088a2:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7ff f95a 	bl	8007b60 <WIZCHIP_READ>
 80088ac:	4603      	mov	r3, r0
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	029b      	lsls	r3, r3, #10
 80088b2:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80088b4:	88ba      	ldrh	r2, [r7, #4]
 80088b6:	89bb      	ldrh	r3, [r7, #12]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d901      	bls.n	80088c0 <send+0x124>
 80088bc:	89bb      	ldrh	r3, [r7, #12]
 80088be:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80088c0:	79fb      	ldrb	r3, [r7, #7]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7ff faa6 	bl	8007e14 <getSn_TX_FSR>
 80088c8:	4603      	mov	r3, r0
 80088ca:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80088cc:	79fb      	ldrb	r3, [r7, #7]
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	3301      	adds	r3, #1
 80088d2:	00db      	lsls	r3, r3, #3
 80088d4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80088d8:	4618      	mov	r0, r3
 80088da:	f7ff f941 	bl	8007b60 <WIZCHIP_READ>
 80088de:	4603      	mov	r3, r0
 80088e0:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80088e2:	7bfb      	ldrb	r3, [r7, #15]
 80088e4:	2b17      	cmp	r3, #23
 80088e6:	d009      	beq.n	80088fc <send+0x160>
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
 80088ea:	2b1c      	cmp	r3, #28
 80088ec:	d006      	beq.n	80088fc <send+0x160>
      {
         close(sn);
 80088ee:	79fb      	ldrb	r3, [r7, #7]
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7ff fd39 	bl	8008368 <close>
         return SOCKERR_SOCKSTATUS;
 80088f6:	f06f 0306 	mvn.w	r3, #6
 80088fa:	e040      	b.n	800897e <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80088fc:	4b23      	ldr	r3, [pc, #140]	; (800898c <send+0x1f0>)
 80088fe:	881b      	ldrh	r3, [r3, #0]
 8008900:	461a      	mov	r2, r3
 8008902:	79fb      	ldrb	r3, [r7, #7]
 8008904:	fa42 f303 	asr.w	r3, r2, r3
 8008908:	f003 0301 	and.w	r3, r3, #1
 800890c:	2b00      	cmp	r3, #0
 800890e:	d005      	beq.n	800891c <send+0x180>
 8008910:	88ba      	ldrh	r2, [r7, #4]
 8008912:	89bb      	ldrh	r3, [r7, #12]
 8008914:	429a      	cmp	r2, r3
 8008916:	d901      	bls.n	800891c <send+0x180>
 8008918:	2300      	movs	r3, #0
 800891a:	e030      	b.n	800897e <send+0x1e2>
      if(len <= freesize) break;
 800891c:	88ba      	ldrh	r2, [r7, #4]
 800891e:	89bb      	ldrh	r3, [r7, #12]
 8008920:	429a      	cmp	r2, r3
 8008922:	d900      	bls.n	8008926 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8008924:	e7cc      	b.n	80088c0 <send+0x124>
      if(len <= freesize) break;
 8008926:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8008928:	88ba      	ldrh	r2, [r7, #4]
 800892a:	79fb      	ldrb	r3, [r7, #7]
 800892c:	6839      	ldr	r1, [r7, #0]
 800892e:	4618      	mov	r0, r3
 8008930:	f7ff fb06 	bl	8007f40 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8008934:	79fb      	ldrb	r3, [r7, #7]
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	3301      	adds	r3, #1
 800893a:	00db      	lsls	r3, r3, #3
 800893c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008940:	2120      	movs	r1, #32
 8008942:	4618      	mov	r0, r3
 8008944:	f7ff f958 	bl	8007bf8 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8008948:	bf00      	nop
 800894a:	79fb      	ldrb	r3, [r7, #7]
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	3301      	adds	r3, #1
 8008950:	00db      	lsls	r3, r3, #3
 8008952:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008956:	4618      	mov	r0, r3
 8008958:	f7ff f902 	bl	8007b60 <WIZCHIP_READ>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1f3      	bne.n	800894a <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8008962:	79fb      	ldrb	r3, [r7, #7]
 8008964:	2201      	movs	r2, #1
 8008966:	fa02 f303 	lsl.w	r3, r2, r3
 800896a:	b21a      	sxth	r2, r3
 800896c:	4b06      	ldr	r3, [pc, #24]	; (8008988 <send+0x1ec>)
 800896e:	881b      	ldrh	r3, [r3, #0]
 8008970:	b21b      	sxth	r3, r3
 8008972:	4313      	orrs	r3, r2
 8008974:	b21b      	sxth	r3, r3
 8008976:	b29a      	uxth	r2, r3
 8008978:	4b03      	ldr	r3, [pc, #12]	; (8008988 <send+0x1ec>)
 800897a:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800897c:	88bb      	ldrh	r3, [r7, #4]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	20000946 	.word	0x20000946
 800898c:	20000944 	.word	0x20000944

08008990 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8008990:	b590      	push	{r4, r7, lr}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	4603      	mov	r3, r0
 8008998:	6039      	str	r1, [r7, #0]
 800899a:	71fb      	strb	r3, [r7, #7]
 800899c:	4613      	mov	r3, r2
 800899e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80089a0:	2300      	movs	r3, #0
 80089a2:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 80089a4:	2300      	movs	r3, #0
 80089a6:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 80089a8:	79fb      	ldrb	r3, [r7, #7]
 80089aa:	2b08      	cmp	r3, #8
 80089ac:	d902      	bls.n	80089b4 <recv+0x24>
 80089ae:	f04f 33ff 	mov.w	r3, #4294967295
 80089b2:	e09c      	b.n	8008aee <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80089b4:	79fb      	ldrb	r3, [r7, #7]
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	3301      	adds	r3, #1
 80089ba:	00db      	lsls	r3, r3, #3
 80089bc:	4618      	mov	r0, r3
 80089be:	f7ff f8cf 	bl	8007b60 <WIZCHIP_READ>
 80089c2:	4603      	mov	r3, r0
 80089c4:	f003 030f 	and.w	r3, r3, #15
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d002      	beq.n	80089d2 <recv+0x42>
 80089cc:	f06f 0304 	mvn.w	r3, #4
 80089d0:	e08d      	b.n	8008aee <recv+0x15e>
   CHECK_SOCKDATA();
 80089d2:	88bb      	ldrh	r3, [r7, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d102      	bne.n	80089de <recv+0x4e>
 80089d8:	f06f 030d 	mvn.w	r3, #13
 80089dc:	e087      	b.n	8008aee <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 80089de:	79fb      	ldrb	r3, [r7, #7]
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	3301      	adds	r3, #1
 80089e4:	00db      	lsls	r3, r3, #3
 80089e6:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7ff f8b8 	bl	8007b60 <WIZCHIP_READ>
 80089f0:	4603      	mov	r3, r0
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	029b      	lsls	r3, r3, #10
 80089f6:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80089f8:	89ba      	ldrh	r2, [r7, #12]
 80089fa:	88bb      	ldrh	r3, [r7, #4]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d201      	bcs.n	8008a04 <recv+0x74>
 8008a00:	89bb      	ldrh	r3, [r7, #12]
 8008a02:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8008a04:	79fb      	ldrb	r3, [r7, #7]
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7ff fa4f 	bl	8007eaa <getSn_RX_RSR>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8008a10:	79fb      	ldrb	r3, [r7, #7]
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	3301      	adds	r3, #1
 8008a16:	00db      	lsls	r3, r3, #3
 8008a18:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7ff f89f 	bl	8007b60 <WIZCHIP_READ>
 8008a22:	4603      	mov	r3, r0
 8008a24:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8008a26:	7bfb      	ldrb	r3, [r7, #15]
 8008a28:	2b17      	cmp	r3, #23
 8008a2a:	d026      	beq.n	8008a7a <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8008a2c:	7bfb      	ldrb	r3, [r7, #15]
 8008a2e:	2b1c      	cmp	r3, #28
 8008a30:	d11c      	bne.n	8008a6c <recv+0xdc>
            {
               if(recvsize != 0) break;
 8008a32:	89bb      	ldrh	r3, [r7, #12]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d133      	bne.n	8008aa0 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8008a38:	79fb      	ldrb	r3, [r7, #7]
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7ff f9ea 	bl	8007e14 <getSn_TX_FSR>
 8008a40:	4603      	mov	r3, r0
 8008a42:	461c      	mov	r4, r3
 8008a44:	79fb      	ldrb	r3, [r7, #7]
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	3301      	adds	r3, #1
 8008a4a:	00db      	lsls	r3, r3, #3
 8008a4c:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7ff f885 	bl	8007b60 <WIZCHIP_READ>
 8008a56:	4603      	mov	r3, r0
 8008a58:	029b      	lsls	r3, r3, #10
 8008a5a:	429c      	cmp	r4, r3
 8008a5c:	d10d      	bne.n	8008a7a <recv+0xea>
               {
                  close(sn);
 8008a5e:	79fb      	ldrb	r3, [r7, #7]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7ff fc81 	bl	8008368 <close>
                  return SOCKERR_SOCKSTATUS;
 8008a66:	f06f 0306 	mvn.w	r3, #6
 8008a6a:	e040      	b.n	8008aee <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8008a6c:	79fb      	ldrb	r3, [r7, #7]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7ff fc7a 	bl	8008368 <close>
               return SOCKERR_SOCKSTATUS;
 8008a74:	f06f 0306 	mvn.w	r3, #6
 8008a78:	e039      	b.n	8008aee <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8008a7a:	4b1f      	ldr	r3, [pc, #124]	; (8008af8 <recv+0x168>)
 8008a7c:	881b      	ldrh	r3, [r3, #0]
 8008a7e:	461a      	mov	r2, r3
 8008a80:	79fb      	ldrb	r3, [r7, #7]
 8008a82:	fa42 f303 	asr.w	r3, r2, r3
 8008a86:	f003 0301 	and.w	r3, r3, #1
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d004      	beq.n	8008a98 <recv+0x108>
 8008a8e:	89bb      	ldrh	r3, [r7, #12]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d101      	bne.n	8008a98 <recv+0x108>
 8008a94:	2300      	movs	r3, #0
 8008a96:	e02a      	b.n	8008aee <recv+0x15e>
         if(recvsize != 0) break;
 8008a98:	89bb      	ldrh	r3, [r7, #12]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d102      	bne.n	8008aa4 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 8008a9e:	e7b1      	b.n	8008a04 <recv+0x74>
               if(recvsize != 0) break;
 8008aa0:	bf00      	nop
 8008aa2:	e000      	b.n	8008aa6 <recv+0x116>
         if(recvsize != 0) break;
 8008aa4:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8008aa6:	89ba      	ldrh	r2, [r7, #12]
 8008aa8:	88bb      	ldrh	r3, [r7, #4]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d201      	bcs.n	8008ab2 <recv+0x122>
 8008aae:	89bb      	ldrh	r3, [r7, #12]
 8008ab0:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8008ab2:	88ba      	ldrh	r2, [r7, #4]
 8008ab4:	79fb      	ldrb	r3, [r7, #7]
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7ff fa9d 	bl	8007ff8 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8008abe:	79fb      	ldrb	r3, [r7, #7]
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	00db      	lsls	r3, r3, #3
 8008ac6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008aca:	2140      	movs	r1, #64	; 0x40
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7ff f893 	bl	8007bf8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8008ad2:	bf00      	nop
 8008ad4:	79fb      	ldrb	r3, [r7, #7]
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	3301      	adds	r3, #1
 8008ada:	00db      	lsls	r3, r3, #3
 8008adc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7ff f83d 	bl	8007b60 <WIZCHIP_READ>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1f3      	bne.n	8008ad4 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8008aec:	88bb      	ldrh	r3, [r7, #4]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3714      	adds	r7, #20
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd90      	pop	{r4, r7, pc}
 8008af6:	bf00      	nop
 8008af8:	20000944 	.word	0x20000944

08008afc <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b086      	sub	sp, #24
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60b9      	str	r1, [r7, #8]
 8008b04:	607b      	str	r3, [r7, #4]
 8008b06:	4603      	mov	r3, r0
 8008b08:	73fb      	strb	r3, [r7, #15]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8008b12:	2300      	movs	r3, #0
 8008b14:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8008b16:	7bfb      	ldrb	r3, [r7, #15]
 8008b18:	2b08      	cmp	r3, #8
 8008b1a:	d902      	bls.n	8008b22 <sendto+0x26>
 8008b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b20:	e11b      	b.n	8008d5a <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	3301      	adds	r3, #1
 8008b28:	00db      	lsls	r3, r3, #3
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7ff f818 	bl	8007b60 <WIZCHIP_READ>
 8008b30:	4603      	mov	r3, r0
 8008b32:	f003 030f 	and.w	r3, r3, #15
 8008b36:	3b02      	subs	r3, #2
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	d902      	bls.n	8008b42 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8008b3c:	f06f 0304 	mvn.w	r3, #4
 8008b40:	e10b      	b.n	8008d5a <sendto+0x25e>
         break;
 8008b42:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8008b44:	89bb      	ldrh	r3, [r7, #12]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d102      	bne.n	8008b50 <sendto+0x54>
 8008b4a:	f06f 030d 	mvn.w	r3, #13
 8008b4e:	e104      	b.n	8008d5a <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	021b      	lsls	r3, r3, #8
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	3201      	adds	r2, #1
 8008b5e:	7812      	ldrb	r2, [r2, #0]
 8008b60:	4413      	add	r3, r2
 8008b62:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	021b      	lsls	r3, r3, #8
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	3202      	adds	r2, #2
 8008b6c:	7812      	ldrb	r2, [r2, #0]
 8008b6e:	4413      	add	r3, r2
 8008b70:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	021b      	lsls	r3, r3, #8
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	3203      	adds	r2, #3
 8008b7a:	7812      	ldrb	r2, [r2, #0]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d10e      	bne.n	8008ba4 <sendto+0xa8>
 8008b86:	7bfb      	ldrb	r3, [r7, #15]
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	00db      	lsls	r3, r3, #3
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7fe ffe6 	bl	8007b60 <WIZCHIP_READ>
 8008b94:	4603      	mov	r3, r0
 8008b96:	f003 0304 	and.w	r3, r3, #4
 8008b9a:	2b04      	cmp	r3, #4
 8008b9c:	d002      	beq.n	8008ba4 <sendto+0xa8>
 8008b9e:	f06f 030b 	mvn.w	r3, #11
 8008ba2:	e0da      	b.n	8008d5a <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8008ba4:	8c3b      	ldrh	r3, [r7, #32]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10e      	bne.n	8008bc8 <sendto+0xcc>
 8008baa:	7bfb      	ldrb	r3, [r7, #15]
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	3301      	adds	r3, #1
 8008bb0:	00db      	lsls	r3, r3, #3
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7fe ffd4 	bl	8007b60 <WIZCHIP_READ>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	f003 0304 	and.w	r3, r3, #4
 8008bbe:	2b04      	cmp	r3, #4
 8008bc0:	d002      	beq.n	8008bc8 <sendto+0xcc>
 8008bc2:	f06f 030a 	mvn.w	r3, #10
 8008bc6:	e0c8      	b.n	8008d5a <sendto+0x25e>
   tmp = getSn_SR(sn);
 8008bc8:	7bfb      	ldrb	r3, [r7, #15]
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	3301      	adds	r3, #1
 8008bce:	00db      	lsls	r3, r3, #3
 8008bd0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7fe ffc3 	bl	8007b60 <WIZCHIP_READ>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8008bde:	7dfb      	ldrb	r3, [r7, #23]
 8008be0:	2b42      	cmp	r3, #66	; 0x42
 8008be2:	d008      	beq.n	8008bf6 <sendto+0xfa>
 8008be4:	7dfb      	ldrb	r3, [r7, #23]
 8008be6:	2b22      	cmp	r3, #34	; 0x22
 8008be8:	d005      	beq.n	8008bf6 <sendto+0xfa>
 8008bea:	7dfb      	ldrb	r3, [r7, #23]
 8008bec:	2b32      	cmp	r3, #50	; 0x32
 8008bee:	d002      	beq.n	8008bf6 <sendto+0xfa>
 8008bf0:	f06f 0306 	mvn.w	r3, #6
 8008bf4:	e0b1      	b.n	8008d5a <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8008bf6:	7bfb      	ldrb	r3, [r7, #15]
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	00db      	lsls	r3, r3, #3
 8008bfe:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8008c02:	2204      	movs	r2, #4
 8008c04:	6879      	ldr	r1, [r7, #4]
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7ff f8a4 	bl	8007d54 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8008c0c:	7bfb      	ldrb	r3, [r7, #15]
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	3301      	adds	r3, #1
 8008c12:	00db      	lsls	r3, r3, #3
 8008c14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c18:	461a      	mov	r2, r3
 8008c1a:	8c3b      	ldrh	r3, [r7, #32]
 8008c1c:	0a1b      	lsrs	r3, r3, #8
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	4619      	mov	r1, r3
 8008c24:	4610      	mov	r0, r2
 8008c26:	f7fe ffe7 	bl	8007bf8 <WIZCHIP_WRITE>
 8008c2a:	7bfb      	ldrb	r3, [r7, #15]
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	3301      	adds	r3, #1
 8008c30:	00db      	lsls	r3, r3, #3
 8008c32:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8008c36:	461a      	mov	r2, r3
 8008c38:	8c3b      	ldrh	r3, [r7, #32]
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	4610      	mov	r0, r2
 8008c40:	f7fe ffda 	bl	8007bf8 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8008c44:	7bfb      	ldrb	r3, [r7, #15]
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	3301      	adds	r3, #1
 8008c4a:	00db      	lsls	r3, r3, #3
 8008c4c:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7fe ff85 	bl	8007b60 <WIZCHIP_READ>
 8008c56:	4603      	mov	r3, r0
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	029b      	lsls	r3, r3, #10
 8008c5c:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8008c5e:	89ba      	ldrh	r2, [r7, #12]
 8008c60:	8abb      	ldrh	r3, [r7, #20]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d901      	bls.n	8008c6a <sendto+0x16e>
 8008c66:	8abb      	ldrh	r3, [r7, #20]
 8008c68:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8008c6a:	7bfb      	ldrb	r3, [r7, #15]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7ff f8d1 	bl	8007e14 <getSn_TX_FSR>
 8008c72:	4603      	mov	r3, r0
 8008c74:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8008c76:	7bfb      	ldrb	r3, [r7, #15]
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	00db      	lsls	r3, r3, #3
 8008c7e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fe ff6c 	bl	8007b60 <WIZCHIP_READ>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d102      	bne.n	8008c94 <sendto+0x198>
 8008c8e:	f06f 0303 	mvn.w	r3, #3
 8008c92:	e062      	b.n	8008d5a <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8008c94:	4b33      	ldr	r3, [pc, #204]	; (8008d64 <sendto+0x268>)
 8008c96:	881b      	ldrh	r3, [r3, #0]
 8008c98:	461a      	mov	r2, r3
 8008c9a:	7bfb      	ldrb	r3, [r7, #15]
 8008c9c:	fa42 f303 	asr.w	r3, r2, r3
 8008ca0:	f003 0301 	and.w	r3, r3, #1
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d005      	beq.n	8008cb4 <sendto+0x1b8>
 8008ca8:	89ba      	ldrh	r2, [r7, #12]
 8008caa:	8abb      	ldrh	r3, [r7, #20]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d901      	bls.n	8008cb4 <sendto+0x1b8>
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	e052      	b.n	8008d5a <sendto+0x25e>
      if(len <= freesize) break;
 8008cb4:	89ba      	ldrh	r2, [r7, #12]
 8008cb6:	8abb      	ldrh	r3, [r7, #20]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d900      	bls.n	8008cbe <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 8008cbc:	e7d5      	b.n	8008c6a <sendto+0x16e>
      if(len <= freesize) break;
 8008cbe:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8008cc0:	89ba      	ldrh	r2, [r7, #12]
 8008cc2:	7bfb      	ldrb	r3, [r7, #15]
 8008cc4:	68b9      	ldr	r1, [r7, #8]
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7ff f93a 	bl	8007f40 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8008ccc:	7bfb      	ldrb	r3, [r7, #15]
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	00db      	lsls	r3, r3, #3
 8008cd4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008cd8:	2120      	movs	r1, #32
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7fe ff8c 	bl	8007bf8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8008ce0:	bf00      	nop
 8008ce2:	7bfb      	ldrb	r3, [r7, #15]
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	00db      	lsls	r3, r3, #3
 8008cea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7fe ff36 	bl	8007b60 <WIZCHIP_READ>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1f3      	bne.n	8008ce2 <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8008cfa:	7bfb      	ldrb	r3, [r7, #15]
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	3301      	adds	r3, #1
 8008d00:	00db      	lsls	r3, r3, #3
 8008d02:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7fe ff2a 	bl	8007b60 <WIZCHIP_READ>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	f003 031f 	and.w	r3, r3, #31
 8008d12:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8008d14:	7dfb      	ldrb	r3, [r7, #23]
 8008d16:	f003 0310 	and.w	r3, r3, #16
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00c      	beq.n	8008d38 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8008d1e:	7bfb      	ldrb	r3, [r7, #15]
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	3301      	adds	r3, #1
 8008d24:	00db      	lsls	r3, r3, #3
 8008d26:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008d2a:	2110      	movs	r1, #16
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7fe ff63 	bl	8007bf8 <WIZCHIP_WRITE>
         break;
 8008d32:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8008d34:	89bb      	ldrh	r3, [r7, #12]
 8008d36:	e010      	b.n	8008d5a <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8008d38:	7dfb      	ldrb	r3, [r7, #23]
 8008d3a:	f003 0308 	and.w	r3, r3, #8
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d0db      	beq.n	8008cfa <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8008d42:	7bfb      	ldrb	r3, [r7, #15]
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	3301      	adds	r3, #1
 8008d48:	00db      	lsls	r3, r3, #3
 8008d4a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008d4e:	2108      	movs	r1, #8
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7fe ff51 	bl	8007bf8 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8008d56:	f06f 030c 	mvn.w	r3, #12
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3718      	adds	r7, #24
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	20000944 	.word	0x20000944

08008d68 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b088      	sub	sp, #32
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60b9      	str	r1, [r7, #8]
 8008d70:	607b      	str	r3, [r7, #4]
 8008d72:	4603      	mov	r3, r0
 8008d74:	73fb      	strb	r3, [r7, #15]
 8008d76:	4613      	mov	r3, r2
 8008d78:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
 8008d80:	2b08      	cmp	r3, #8
 8008d82:	d902      	bls.n	8008d8a <recvfrom+0x22>
 8008d84:	f04f 33ff 	mov.w	r3, #4294967295
 8008d88:	e1d4      	b.n	8009134 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8008d8a:	7bfb      	ldrb	r3, [r7, #15]
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	3301      	adds	r3, #1
 8008d90:	00db      	lsls	r3, r3, #3
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7fe fee4 	bl	8007b60 <WIZCHIP_READ>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	777b      	strb	r3, [r7, #29]
 8008d9c:	7f7b      	ldrb	r3, [r7, #29]
 8008d9e:	f003 030f 	and.w	r3, r3, #15
 8008da2:	3b02      	subs	r3, #2
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d902      	bls.n	8008dae <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8008da8:	f06f 0304 	mvn.w	r3, #4
 8008dac:	e1c2      	b.n	8009134 <recvfrom+0x3cc>
         break;
 8008dae:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8008db0:	89bb      	ldrh	r3, [r7, #12]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d102      	bne.n	8008dbc <recvfrom+0x54>
 8008db6:	f06f 030d 	mvn.w	r3, #13
 8008dba:	e1bb      	b.n	8009134 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 8008dbc:	7bfb      	ldrb	r3, [r7, #15]
 8008dbe:	4a88      	ldr	r2, [pc, #544]	; (8008fe0 <recvfrom+0x278>)
 8008dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d128      	bne.n	8008e1a <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7ff f86d 	bl	8007eaa <getSn_RX_RSR>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8008dd4:	7bfb      	ldrb	r3, [r7, #15]
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	3301      	adds	r3, #1
 8008dda:	00db      	lsls	r3, r3, #3
 8008ddc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7fe febd 	bl	8007b60 <WIZCHIP_READ>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d102      	bne.n	8008df2 <recvfrom+0x8a>
 8008dec:	f06f 0303 	mvn.w	r3, #3
 8008df0:	e1a0      	b.n	8009134 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8008df2:	4b7c      	ldr	r3, [pc, #496]	; (8008fe4 <recvfrom+0x27c>)
 8008df4:	881b      	ldrh	r3, [r3, #0]
 8008df6:	461a      	mov	r2, r3
 8008df8:	7bfb      	ldrb	r3, [r7, #15]
 8008dfa:	fa42 f303 	asr.w	r3, r2, r3
 8008dfe:	f003 0301 	and.w	r3, r3, #1
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d004      	beq.n	8008e10 <recvfrom+0xa8>
 8008e06:	8bfb      	ldrh	r3, [r7, #30]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d101      	bne.n	8008e10 <recvfrom+0xa8>
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	e191      	b.n	8009134 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 8008e10:	8bfb      	ldrh	r3, [r7, #30]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d100      	bne.n	8008e18 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8008e16:	e7d7      	b.n	8008dc8 <recvfrom+0x60>
         if(pack_len != 0) break;
 8008e18:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8008e1a:	7f7b      	ldrb	r3, [r7, #29]
 8008e1c:	f003 0307 	and.w	r3, r3, #7
 8008e20:	2b04      	cmp	r3, #4
 8008e22:	d079      	beq.n	8008f18 <recvfrom+0x1b0>
 8008e24:	2b04      	cmp	r3, #4
 8008e26:	f300 8142 	bgt.w	80090ae <recvfrom+0x346>
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d003      	beq.n	8008e36 <recvfrom+0xce>
 8008e2e:	2b03      	cmp	r3, #3
 8008e30:	f000 80dc 	beq.w	8008fec <recvfrom+0x284>
 8008e34:	e13b      	b.n	80090ae <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8008e36:	7bfb      	ldrb	r3, [r7, #15]
 8008e38:	4a69      	ldr	r2, [pc, #420]	; (8008fe0 <recvfrom+0x278>)
 8008e3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d152      	bne.n	8008ee8 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 8008e42:	f107 0114 	add.w	r1, r7, #20
 8008e46:	7bfb      	ldrb	r3, [r7, #15]
 8008e48:	2208      	movs	r2, #8
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7ff f8d4 	bl	8007ff8 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8008e50:	7bfb      	ldrb	r3, [r7, #15]
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	3301      	adds	r3, #1
 8008e56:	00db      	lsls	r3, r3, #3
 8008e58:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008e5c:	2140      	movs	r1, #64	; 0x40
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fe feca 	bl	8007bf8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8008e64:	bf00      	nop
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	00db      	lsls	r3, r3, #3
 8008e6e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7fe fe74 	bl	8007b60 <WIZCHIP_READ>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d1f3      	bne.n	8008e66 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8008e7e:	7d3a      	ldrb	r2, [r7, #20]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	3301      	adds	r3, #1
 8008e88:	7d7a      	ldrb	r2, [r7, #21]
 8008e8a:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	3302      	adds	r3, #2
 8008e90:	7dba      	ldrb	r2, [r7, #22]
 8008e92:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	3303      	adds	r3, #3
 8008e98:	7dfa      	ldrb	r2, [r7, #23]
 8008e9a:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8008e9c:	7e3b      	ldrb	r3, [r7, #24]
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea2:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8008ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea6:	881b      	ldrh	r3, [r3, #0]
 8008ea8:	021b      	lsls	r3, r3, #8
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	7e7b      	ldrb	r3, [r7, #25]
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	4413      	add	r3, r2
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb6:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8008eb8:	7eba      	ldrb	r2, [r7, #26]
 8008eba:	7bfb      	ldrb	r3, [r7, #15]
 8008ebc:	b291      	uxth	r1, r2
 8008ebe:	4a48      	ldr	r2, [pc, #288]	; (8008fe0 <recvfrom+0x278>)
 8008ec0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8008ec4:	7bfb      	ldrb	r3, [r7, #15]
 8008ec6:	4a46      	ldr	r2, [pc, #280]	; (8008fe0 <recvfrom+0x278>)
 8008ec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ecc:	021b      	lsls	r3, r3, #8
 8008ece:	b299      	uxth	r1, r3
 8008ed0:	7efb      	ldrb	r3, [r7, #27]
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	7bfb      	ldrb	r3, [r7, #15]
 8008ed6:	440a      	add	r2, r1
 8008ed8:	b291      	uxth	r1, r2
 8008eda:	4a41      	ldr	r2, [pc, #260]	; (8008fe0 <recvfrom+0x278>)
 8008edc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8008ee0:	7bfb      	ldrb	r3, [r7, #15]
 8008ee2:	4a41      	ldr	r2, [pc, #260]	; (8008fe8 <recvfrom+0x280>)
 8008ee4:	2180      	movs	r1, #128	; 0x80
 8008ee6:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8008ee8:	7bfb      	ldrb	r3, [r7, #15]
 8008eea:	4a3d      	ldr	r2, [pc, #244]	; (8008fe0 <recvfrom+0x278>)
 8008eec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ef0:	89ba      	ldrh	r2, [r7, #12]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d202      	bcs.n	8008efc <recvfrom+0x194>
 8008ef6:	89bb      	ldrh	r3, [r7, #12]
 8008ef8:	83fb      	strh	r3, [r7, #30]
 8008efa:	e004      	b.n	8008f06 <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 8008efc:	7bfb      	ldrb	r3, [r7, #15]
 8008efe:	4a38      	ldr	r2, [pc, #224]	; (8008fe0 <recvfrom+0x278>)
 8008f00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f04:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8008f06:	8bfb      	ldrh	r3, [r7, #30]
 8008f08:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8008f0a:	8bfa      	ldrh	r2, [r7, #30]
 8008f0c:	7bfb      	ldrb	r3, [r7, #15]
 8008f0e:	68b9      	ldr	r1, [r7, #8]
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7ff f871 	bl	8007ff8 <wiz_recv_data>
			break;
 8008f16:	e0d6      	b.n	80090c6 <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8008f18:	7bfb      	ldrb	r3, [r7, #15]
 8008f1a:	4a31      	ldr	r2, [pc, #196]	; (8008fe0 <recvfrom+0x278>)
 8008f1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d146      	bne.n	8008fb2 <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8008f24:	f107 0114 	add.w	r1, r7, #20
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7ff f863 	bl	8007ff8 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8008f32:	7bfb      	ldrb	r3, [r7, #15]
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	3301      	adds	r3, #1
 8008f38:	00db      	lsls	r3, r3, #3
 8008f3a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008f3e:	2140      	movs	r1, #64	; 0x40
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7fe fe59 	bl	8007bf8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8008f46:	bf00      	nop
 8008f48:	7bfb      	ldrb	r3, [r7, #15]
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	00db      	lsls	r3, r3, #3
 8008f50:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7fe fe03 	bl	8007b60 <WIZCHIP_READ>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d1f3      	bne.n	8008f48 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8008f60:	7d3a      	ldrb	r2, [r7, #20]
 8008f62:	7bfb      	ldrb	r3, [r7, #15]
 8008f64:	b291      	uxth	r1, r2
 8008f66:	4a1e      	ldr	r2, [pc, #120]	; (8008fe0 <recvfrom+0x278>)
 8008f68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
 8008f6e:	4a1c      	ldr	r2, [pc, #112]	; (8008fe0 <recvfrom+0x278>)
 8008f70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f74:	021b      	lsls	r3, r3, #8
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	7d7b      	ldrb	r3, [r7, #21]
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	4413      	add	r3, r2
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	7bfb      	ldrb	r3, [r7, #15]
 8008f82:	3a02      	subs	r2, #2
 8008f84:	b291      	uxth	r1, r2
 8008f86:	4a16      	ldr	r2, [pc, #88]	; (8008fe0 <recvfrom+0x278>)
 8008f88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8008f8c:	7bfb      	ldrb	r3, [r7, #15]
 8008f8e:	4a14      	ldr	r2, [pc, #80]	; (8008fe0 <recvfrom+0x278>)
 8008f90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f94:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d906      	bls.n	8008faa <recvfrom+0x242>
   			{
   			   close(sn);
 8008f9c:	7bfb      	ldrb	r3, [r7, #15]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7ff f9e2 	bl	8008368 <close>
   			   return SOCKFATAL_PACKLEN;
 8008fa4:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8008fa8:	e0c4      	b.n	8009134 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8008faa:	7bfb      	ldrb	r3, [r7, #15]
 8008fac:	4a0e      	ldr	r2, [pc, #56]	; (8008fe8 <recvfrom+0x280>)
 8008fae:	2180      	movs	r1, #128	; 0x80
 8008fb0:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8008fb2:	7bfb      	ldrb	r3, [r7, #15]
 8008fb4:	4a0a      	ldr	r2, [pc, #40]	; (8008fe0 <recvfrom+0x278>)
 8008fb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fba:	89ba      	ldrh	r2, [r7, #12]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d202      	bcs.n	8008fc6 <recvfrom+0x25e>
 8008fc0:	89bb      	ldrh	r3, [r7, #12]
 8008fc2:	83fb      	strh	r3, [r7, #30]
 8008fc4:	e004      	b.n	8008fd0 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 8008fc6:	7bfb      	ldrb	r3, [r7, #15]
 8008fc8:	4a05      	ldr	r2, [pc, #20]	; (8008fe0 <recvfrom+0x278>)
 8008fca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fce:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8008fd0:	8bfa      	ldrh	r2, [r7, #30]
 8008fd2:	7bfb      	ldrb	r3, [r7, #15]
 8008fd4:	68b9      	ldr	r1, [r7, #8]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7ff f80e 	bl	8007ff8 <wiz_recv_data>
		   break;
 8008fdc:	e073      	b.n	80090c6 <recvfrom+0x35e>
 8008fde:	bf00      	nop
 8008fe0:	20000948 	.word	0x20000948
 8008fe4:	20000944 	.word	0x20000944
 8008fe8:	20000958 	.word	0x20000958
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8008fec:	7bfb      	ldrb	r3, [r7, #15]
 8008fee:	4a53      	ldr	r2, [pc, #332]	; (800913c <recvfrom+0x3d4>)
 8008ff0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d144      	bne.n	8009082 <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8008ff8:	f107 0114 	add.w	r1, r7, #20
 8008ffc:	7bfb      	ldrb	r3, [r7, #15]
 8008ffe:	2206      	movs	r2, #6
 8009000:	4618      	mov	r0, r3
 8009002:	f7fe fff9 	bl	8007ff8 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8009006:	7bfb      	ldrb	r3, [r7, #15]
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	3301      	adds	r3, #1
 800900c:	00db      	lsls	r3, r3, #3
 800900e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009012:	2140      	movs	r1, #64	; 0x40
 8009014:	4618      	mov	r0, r3
 8009016:	f7fe fdef 	bl	8007bf8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800901a:	bf00      	nop
 800901c:	7bfb      	ldrb	r3, [r7, #15]
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	3301      	adds	r3, #1
 8009022:	00db      	lsls	r3, r3, #3
 8009024:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009028:	4618      	mov	r0, r3
 800902a:	f7fe fd99 	bl	8007b60 <WIZCHIP_READ>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d1f3      	bne.n	800901c <recvfrom+0x2b4>
   			addr[0] = head[0];
 8009034:	7d3a      	ldrb	r2, [r7, #20]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	3301      	adds	r3, #1
 800903e:	7d7a      	ldrb	r2, [r7, #21]
 8009040:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	3302      	adds	r3, #2
 8009046:	7dba      	ldrb	r2, [r7, #22]
 8009048:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	3303      	adds	r3, #3
 800904e:	7dfa      	ldrb	r2, [r7, #23]
 8009050:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8009052:	7e3a      	ldrb	r2, [r7, #24]
 8009054:	7bfb      	ldrb	r3, [r7, #15]
 8009056:	b291      	uxth	r1, r2
 8009058:	4a38      	ldr	r2, [pc, #224]	; (800913c <recvfrom+0x3d4>)
 800905a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 800905e:	7bfb      	ldrb	r3, [r7, #15]
 8009060:	4a36      	ldr	r2, [pc, #216]	; (800913c <recvfrom+0x3d4>)
 8009062:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009066:	021b      	lsls	r3, r3, #8
 8009068:	b299      	uxth	r1, r3
 800906a:	7e7b      	ldrb	r3, [r7, #25]
 800906c:	b29a      	uxth	r2, r3
 800906e:	7bfb      	ldrb	r3, [r7, #15]
 8009070:	440a      	add	r2, r1
 8009072:	b291      	uxth	r1, r2
 8009074:	4a31      	ldr	r2, [pc, #196]	; (800913c <recvfrom+0x3d4>)
 8009076:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 800907a:	7bfb      	ldrb	r3, [r7, #15]
 800907c:	4a30      	ldr	r2, [pc, #192]	; (8009140 <recvfrom+0x3d8>)
 800907e:	2180      	movs	r1, #128	; 0x80
 8009080:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8009082:	7bfb      	ldrb	r3, [r7, #15]
 8009084:	4a2d      	ldr	r2, [pc, #180]	; (800913c <recvfrom+0x3d4>)
 8009086:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800908a:	89ba      	ldrh	r2, [r7, #12]
 800908c:	429a      	cmp	r2, r3
 800908e:	d202      	bcs.n	8009096 <recvfrom+0x32e>
 8009090:	89bb      	ldrh	r3, [r7, #12]
 8009092:	83fb      	strh	r3, [r7, #30]
 8009094:	e004      	b.n	80090a0 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 8009096:	7bfb      	ldrb	r3, [r7, #15]
 8009098:	4a28      	ldr	r2, [pc, #160]	; (800913c <recvfrom+0x3d4>)
 800909a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800909e:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80090a0:	8bfa      	ldrh	r2, [r7, #30]
 80090a2:	7bfb      	ldrb	r3, [r7, #15]
 80090a4:	68b9      	ldr	r1, [r7, #8]
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fe ffa6 	bl	8007ff8 <wiz_recv_data>
			break;
 80090ac:	e00b      	b.n	80090c6 <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 80090ae:	8bfa      	ldrh	r2, [r7, #30]
 80090b0:	7bfb      	ldrb	r3, [r7, #15]
 80090b2:	4611      	mov	r1, r2
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7fe fffb 	bl	80080b0 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 80090ba:	7bfb      	ldrb	r3, [r7, #15]
 80090bc:	491f      	ldr	r1, [pc, #124]	; (800913c <recvfrom+0x3d4>)
 80090be:	8bfa      	ldrh	r2, [r7, #30]
 80090c0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 80090c4:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 80090c6:	7bfb      	ldrb	r3, [r7, #15]
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	3301      	adds	r3, #1
 80090cc:	00db      	lsls	r3, r3, #3
 80090ce:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80090d2:	2140      	movs	r1, #64	; 0x40
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7fe fd8f 	bl	8007bf8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 80090da:	bf00      	nop
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	3301      	adds	r3, #1
 80090e2:	00db      	lsls	r3, r3, #3
 80090e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7fe fd39 	bl	8007b60 <WIZCHIP_READ>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1f3      	bne.n	80090dc <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 80090f4:	7bfb      	ldrb	r3, [r7, #15]
 80090f6:	4a11      	ldr	r2, [pc, #68]	; (800913c <recvfrom+0x3d4>)
 80090f8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80090fc:	7bfb      	ldrb	r3, [r7, #15]
 80090fe:	8bfa      	ldrh	r2, [r7, #30]
 8009100:	1a8a      	subs	r2, r1, r2
 8009102:	b291      	uxth	r1, r2
 8009104:	4a0d      	ldr	r2, [pc, #52]	; (800913c <recvfrom+0x3d4>)
 8009106:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 800910a:	7bfb      	ldrb	r3, [r7, #15]
 800910c:	4a0b      	ldr	r2, [pc, #44]	; (800913c <recvfrom+0x3d4>)
 800910e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d009      	beq.n	800912a <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8009116:	7bfb      	ldrb	r3, [r7, #15]
 8009118:	4a09      	ldr	r2, [pc, #36]	; (8009140 <recvfrom+0x3d8>)
 800911a:	5cd2      	ldrb	r2, [r2, r3]
 800911c:	7bfb      	ldrb	r3, [r7, #15]
 800911e:	f042 0201 	orr.w	r2, r2, #1
 8009122:	b2d1      	uxtb	r1, r2
 8009124:	4a06      	ldr	r2, [pc, #24]	; (8009140 <recvfrom+0x3d8>)
 8009126:	54d1      	strb	r1, [r2, r3]
 8009128:	e003      	b.n	8009132 <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 800912a:	7bfb      	ldrb	r3, [r7, #15]
 800912c:	4a04      	ldr	r2, [pc, #16]	; (8009140 <recvfrom+0x3d8>)
 800912e:	2100      	movs	r1, #0
 8009130:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8009132:	8bfb      	ldrh	r3, [r7, #30]
}
 8009134:	4618      	mov	r0, r3
 8009136:	3720      	adds	r7, #32
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	20000948 	.word	0x20000948
 8009140:	20000958 	.word	0x20000958

08009144 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8009144:	b480      	push	{r7}
 8009146:	af00      	add	r7, sp, #0
 8009148:	bf00      	nop
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr

08009152 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8009152:	b480      	push	{r7}
 8009154:	af00      	add	r7, sp, #0
 8009156:	bf00      	nop
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8009160:	b480      	push	{r7}
 8009162:	af00      	add	r7, sp, #0
 8009164:	bf00      	nop
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr

0800916e <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800916e:	b480      	push	{r7}
 8009170:	af00      	add	r7, sp, #0
 8009172:	bf00      	nop
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	b2db      	uxtb	r3, r3
 800918a:	4618      	mov	r0, r3
 800918c:	370c      	adds	r7, #12
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr

08009196 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8009196:	b480      	push	{r7}
 8009198:	b083      	sub	sp, #12
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
 800919e:	460b      	mov	r3, r1
 80091a0:	70fb      	strb	r3, [r7, #3]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	78fa      	ldrb	r2, [r7, #3]
 80091a6:	701a      	strb	r2, [r3, #0]
 80091a8:	bf00      	nop
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80091b4:	b480      	push	{r7}
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	2300      	movs	r3, #0
 80091ba:	4618      	mov	r0, r3
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	4603      	mov	r3, r0
 80091cc:	71fb      	strb	r3, [r7, #7]
 80091ce:	bf00      	nop
 80091d0:	370c      	adds	r7, #12
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr
	...

080091dc <reg_wizchip_cris_cbfunc>:

static uint8_t    _DNS_[4];      // DNS server ip address
static dhcp_mode  _DHCP_;        // DHCP mode

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d002      	beq.n	80091f2 <reg_wizchip_cris_cbfunc+0x16>
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d106      	bne.n	8009200 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 80091f2:	4b0a      	ldr	r3, [pc, #40]	; (800921c <reg_wizchip_cris_cbfunc+0x40>)
 80091f4:	4a0a      	ldr	r2, [pc, #40]	; (8009220 <reg_wizchip_cris_cbfunc+0x44>)
 80091f6:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 80091f8:	4b08      	ldr	r3, [pc, #32]	; (800921c <reg_wizchip_cris_cbfunc+0x40>)
 80091fa:	4a0a      	ldr	r2, [pc, #40]	; (8009224 <reg_wizchip_cris_cbfunc+0x48>)
 80091fc:	611a      	str	r2, [r3, #16]
 80091fe:	e006      	b.n	800920e <reg_wizchip_cris_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 8009200:	4a06      	ldr	r2, [pc, #24]	; (800921c <reg_wizchip_cris_cbfunc+0x40>)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	60d3      	str	r3, [r2, #12]
      WIZCHIP.CRIS._exit  = cris_ex;
 8009206:	4a05      	ldr	r2, [pc, #20]	; (800921c <reg_wizchip_cris_cbfunc+0x40>)
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	6113      	str	r3, [r2, #16]
   }
}
 800920c:	bf00      	nop
 800920e:	bf00      	nop
 8009210:	370c      	adds	r7, #12
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	200000c4 	.word	0x200000c4
 8009220:	08009145 	.word	0x08009145
 8009224:	08009153 	.word	0x08009153

08009228 <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d002      	beq.n	800923e <reg_wizchip_cs_cbfunc+0x16>
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d106      	bne.n	800924c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800923e:	4b0a      	ldr	r3, [pc, #40]	; (8009268 <reg_wizchip_cs_cbfunc+0x40>)
 8009240:	4a0a      	ldr	r2, [pc, #40]	; (800926c <reg_wizchip_cs_cbfunc+0x44>)
 8009242:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8009244:	4b08      	ldr	r3, [pc, #32]	; (8009268 <reg_wizchip_cs_cbfunc+0x40>)
 8009246:	4a0a      	ldr	r2, [pc, #40]	; (8009270 <reg_wizchip_cs_cbfunc+0x48>)
 8009248:	619a      	str	r2, [r3, #24]
 800924a:	e006      	b.n	800925a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 800924c:	4a06      	ldr	r2, [pc, #24]	; (8009268 <reg_wizchip_cs_cbfunc+0x40>)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8009252:	4a05      	ldr	r2, [pc, #20]	; (8009268 <reg_wizchip_cs_cbfunc+0x40>)
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	6193      	str	r3, [r2, #24]
   }
}
 8009258:	bf00      	nop
 800925a:	bf00      	nop
 800925c:	370c      	adds	r7, #12
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	200000c4 	.word	0x200000c4
 800926c:	08009161 	.word	0x08009161
 8009270:	0800916f 	.word	0x0800916f

08009274 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800927e:	bf00      	nop
 8009280:	4b0f      	ldr	r3, [pc, #60]	; (80092c0 <reg_wizchip_spi_cbfunc+0x4c>)
 8009282:	881b      	ldrh	r3, [r3, #0]
 8009284:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009288:	2b00      	cmp	r3, #0
 800928a:	d0f9      	beq.n	8009280 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d002      	beq.n	8009298 <reg_wizchip_spi_cbfunc+0x24>
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d106      	bne.n	80092a6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8009298:	4b09      	ldr	r3, [pc, #36]	; (80092c0 <reg_wizchip_spi_cbfunc+0x4c>)
 800929a:	4a0a      	ldr	r2, [pc, #40]	; (80092c4 <reg_wizchip_spi_cbfunc+0x50>)
 800929c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800929e:	4b08      	ldr	r3, [pc, #32]	; (80092c0 <reg_wizchip_spi_cbfunc+0x4c>)
 80092a0:	4a09      	ldr	r2, [pc, #36]	; (80092c8 <reg_wizchip_spi_cbfunc+0x54>)
 80092a2:	621a      	str	r2, [r3, #32]
 80092a4:	e006      	b.n	80092b4 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80092a6:	4a06      	ldr	r2, [pc, #24]	; (80092c0 <reg_wizchip_spi_cbfunc+0x4c>)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80092ac:	4a04      	ldr	r2, [pc, #16]	; (80092c0 <reg_wizchip_spi_cbfunc+0x4c>)
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	6213      	str	r3, [r2, #32]
   }
}
 80092b2:	bf00      	nop
 80092b4:	bf00      	nop
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr
 80092c0:	200000c4 	.word	0x200000c4
 80092c4:	080091b5 	.word	0x080091b5
 80092c8:	080091c5 	.word	0x080091c5

080092cc <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 80092cc:	b590      	push	{r4, r7, lr}
 80092ce:	b087      	sub	sp, #28
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	4603      	mov	r3, r0
 80092d4:	6039      	str	r1, [r7, #0]
 80092d6:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 80092d8:	2300      	movs	r3, #0
 80092da:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 80092dc:	2300      	movs	r3, #0
 80092de:	60fb      	str	r3, [r7, #12]
 80092e0:	2300      	movs	r3, #0
 80092e2:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 80092e4:	79fb      	ldrb	r3, [r7, #7]
 80092e6:	2b0f      	cmp	r3, #15
 80092e8:	f200 80c7 	bhi.w	800947a <ctlwizchip+0x1ae>
 80092ec:	a201      	add	r2, pc, #4	; (adr r2, 80092f4 <ctlwizchip+0x28>)
 80092ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f2:	bf00      	nop
 80092f4:	08009335 	.word	0x08009335
 80092f8:	0800933b 	.word	0x0800933b
 80092fc:	08009367 	.word	0x08009367
 8009300:	0800935b 	.word	0x0800935b
 8009304:	08009375 	.word	0x08009375
 8009308:	08009381 	.word	0x08009381
 800930c:	0800938f 	.word	0x0800938f
 8009310:	080093b5 	.word	0x080093b5
 8009314:	080093db 	.word	0x080093db
 8009318:	0800941f 	.word	0x0800941f
 800931c:	08009425 	.word	0x08009425
 8009320:	0800942d 	.word	0x0800942d
 8009324:	08009481 	.word	0x08009481
 8009328:	08009435 	.word	0x08009435
 800932c:	08009443 	.word	0x08009443
 8009330:	0800945f 	.word	0x0800945f
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8009334:	f000 f8ea 	bl	800950c <wizchip_sw_reset>
         break;
 8009338:	e0a3      	b.n	8009482 <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d004      	beq.n	800934a <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	3308      	adds	r3, #8
 8009348:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	693a      	ldr	r2, [r7, #16]
 800934e:	4611      	mov	r1, r2
 8009350:	4618      	mov	r0, r3
 8009352:	f000 f927 	bl	80095a4 <wizchip_init>
 8009356:	4603      	mov	r3, r0
 8009358:	e094      	b.n	8009484 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	881b      	ldrh	r3, [r3, #0]
 800935e:	4618      	mov	r0, r3
 8009360:	f000 f9ac 	bl	80096bc <wizchip_clrinterrupt>
         break;
 8009364:	e08d      	b.n	8009482 <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8009366:	f000 f9dd 	bl	8009724 <wizchip_getinterrupt>
 800936a:	4603      	mov	r3, r0
 800936c:	461a      	mov	r2, r3
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	801a      	strh	r2, [r3, #0]
         break;
 8009372:	e086      	b.n	8009482 <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	881b      	ldrh	r3, [r3, #0]
 8009378:	4618      	mov	r0, r3
 800937a:	f000 f9f8 	bl	800976e <wizchip_setinterruptmask>
         break;         
 800937e:	e080      	b.n	8009482 <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8009380:	f000 fa10 	bl	80097a4 <wizchip_getinterruptmask>
 8009384:	4603      	mov	r3, r0
 8009386:	461a      	mov	r2, r3
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	801a      	strh	r2, [r3, #0]
         break;
 800938c:	e079      	b.n	8009482 <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	881b      	ldrh	r3, [r3, #0]
 8009392:	0a1b      	lsrs	r3, r3, #8
 8009394:	b29b      	uxth	r3, r3
 8009396:	b2db      	uxtb	r3, r3
 8009398:	4619      	mov	r1, r3
 800939a:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800939e:	f7fe fc2b 	bl	8007bf8 <WIZCHIP_WRITE>
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	881b      	ldrh	r3, [r3, #0]
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	4619      	mov	r1, r3
 80093aa:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80093ae:	f7fe fc23 	bl	8007bf8 <WIZCHIP_WRITE>
         break;
 80093b2:	e066      	b.n	8009482 <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 80093b4:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80093b8:	f7fe fbd2 	bl	8007b60 <WIZCHIP_READ>
 80093bc:	4603      	mov	r3, r0
 80093be:	b29b      	uxth	r3, r3
 80093c0:	021b      	lsls	r3, r3, #8
 80093c2:	b29c      	uxth	r4, r3
 80093c4:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80093c8:	f7fe fbca 	bl	8007b60 <WIZCHIP_READ>
 80093cc:	4603      	mov	r3, r0
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	4423      	add	r3, r4
 80093d2:	b29a      	uxth	r2, r3
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	801a      	strh	r2, [r3, #0]
         break;
 80093d8:	e053      	b.n	8009482 <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80093da:	4b2c      	ldr	r3, [pc, #176]	; (800948c <ctlwizchip+0x1c0>)
 80093dc:	789a      	ldrb	r2, [r3, #2]
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	3301      	adds	r3, #1
 80093e6:	4a29      	ldr	r2, [pc, #164]	; (800948c <ctlwizchip+0x1c0>)
 80093e8:	78d2      	ldrb	r2, [r2, #3]
 80093ea:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	3302      	adds	r3, #2
 80093f0:	4a26      	ldr	r2, [pc, #152]	; (800948c <ctlwizchip+0x1c0>)
 80093f2:	7912      	ldrb	r2, [r2, #4]
 80093f4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	3303      	adds	r3, #3
 80093fa:	4a24      	ldr	r2, [pc, #144]	; (800948c <ctlwizchip+0x1c0>)
 80093fc:	7952      	ldrb	r2, [r2, #5]
 80093fe:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	3304      	adds	r3, #4
 8009404:	4a21      	ldr	r2, [pc, #132]	; (800948c <ctlwizchip+0x1c0>)
 8009406:	7992      	ldrb	r2, [r2, #6]
 8009408:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	3305      	adds	r3, #5
 800940e:	4a1f      	ldr	r2, [pc, #124]	; (800948c <ctlwizchip+0x1c0>)
 8009410:	79d2      	ldrb	r2, [r2, #7]
 8009412:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	3306      	adds	r3, #6
 8009418:	2200      	movs	r2, #0
 800941a:	701a      	strb	r2, [r3, #0]
         break;
 800941c:	e031      	b.n	8009482 <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 800941e:	f000 fa13 	bl	8009848 <wizphy_reset>
         break;
 8009422:	e02e      	b.n	8009482 <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8009424:	6838      	ldr	r0, [r7, #0]
 8009426:	f000 fa36 	bl	8009896 <wizphy_setphyconf>
         break;
 800942a:	e02a      	b.n	8009482 <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 800942c:	6838      	ldr	r0, [r7, #0]
 800942e:	f000 fa75 	bl	800991c <wizphy_getphyconf>
         break;
 8009432:	e026      	b.n	8009482 <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	4618      	mov	r0, r3
 800943a:	f000 faf7 	bl	8009a2c <wizphy_setphypmode>
 800943e:	4603      	mov	r3, r0
 8009440:	e020      	b.n	8009484 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8009442:	f000 f9e8 	bl	8009816 <wizphy_getphypmode>
 8009446:	4603      	mov	r3, r0
 8009448:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 800944a:	7dfb      	ldrb	r3, [r7, #23]
 800944c:	2bff      	cmp	r3, #255	; 0xff
 800944e:	d102      	bne.n	8009456 <ctlwizchip+0x18a>
 8009450:	f04f 33ff 	mov.w	r3, #4294967295
 8009454:	e016      	b.n	8009484 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	7dfa      	ldrb	r2, [r7, #23]
 800945a:	701a      	strb	r2, [r3, #0]
         break;
 800945c:	e011      	b.n	8009482 <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 800945e:	f000 f9c4 	bl	80097ea <wizphy_getphylink>
 8009462:	4603      	mov	r3, r0
 8009464:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8009466:	7dfb      	ldrb	r3, [r7, #23]
 8009468:	2bff      	cmp	r3, #255	; 0xff
 800946a:	d102      	bne.n	8009472 <ctlwizchip+0x1a6>
 800946c:	f04f 33ff 	mov.w	r3, #4294967295
 8009470:	e008      	b.n	8009484 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	7dfa      	ldrb	r2, [r7, #23]
 8009476:	701a      	strb	r2, [r3, #0]
         break;
 8009478:	e003      	b.n	8009482 <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 800947a:	f04f 33ff 	mov.w	r3, #4294967295
 800947e:	e001      	b.n	8009484 <ctlwizchip+0x1b8>
         break;
 8009480:	bf00      	nop
   }
   return 0;
 8009482:	2300      	movs	r3, #0
}
 8009484:	4618      	mov	r0, r3
 8009486:	371c      	adds	r7, #28
 8009488:	46bd      	mov	sp, r7
 800948a:	bd90      	pop	{r4, r7, pc}
 800948c:	200000c4 	.word	0x200000c4

08009490 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	4603      	mov	r3, r0
 8009498:	6039      	str	r1, [r7, #0]
 800949a:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 800949c:	79fb      	ldrb	r3, [r7, #7]
 800949e:	2b05      	cmp	r3, #5
 80094a0:	d82c      	bhi.n	80094fc <ctlnetwork+0x6c>
 80094a2:	a201      	add	r2, pc, #4	; (adr r2, 80094a8 <ctlnetwork+0x18>)
 80094a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a8:	080094c1 	.word	0x080094c1
 80094ac:	080094c9 	.word	0x080094c9
 80094b0:	080094d1 	.word	0x080094d1
 80094b4:	080094df 	.word	0x080094df
 80094b8:	080094ed 	.word	0x080094ed
 80094bc:	080094f5 	.word	0x080094f5
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 80094c0:	6838      	ldr	r0, [r7, #0]
 80094c2:	f000 fafd 	bl	8009ac0 <wizchip_setnetinfo>
         break;
 80094c6:	e01c      	b.n	8009502 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 80094c8:	6838      	ldr	r0, [r7, #0]
 80094ca:	f000 fb39 	bl	8009b40 <wizchip_getnetinfo>
         break;
 80094ce:	e018      	b.n	8009502 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f000 fb73 	bl	8009bc0 <wizchip_setnetmode>
 80094da:	4603      	mov	r3, r0
 80094dc:	e012      	b.n	8009504 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 80094de:	f000 fb91 	bl	8009c04 <wizchip_getnetmode>
 80094e2:	4603      	mov	r3, r0
 80094e4:	461a      	mov	r2, r3
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	701a      	strb	r2, [r3, #0]
         break;
 80094ea:	e00a      	b.n	8009502 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 80094ec:	6838      	ldr	r0, [r7, #0]
 80094ee:	f000 fb91 	bl	8009c14 <wizchip_settimeout>
         break;
 80094f2:	e006      	b.n	8009502 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 80094f4:	6838      	ldr	r0, [r7, #0]
 80094f6:	f000 fbae 	bl	8009c56 <wizchip_gettimeout>
         break;
 80094fa:	e002      	b.n	8009502 <ctlnetwork+0x72>
      default:
         return -1;
 80094fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009500:	e000      	b.n	8009504 <ctlnetwork+0x74>
   }
   return 0;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	3708      	adds	r7, #8
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b086      	sub	sp, #24
 8009510:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8009512:	1d3b      	adds	r3, r7, #4
 8009514:	2206      	movs	r2, #6
 8009516:	4619      	mov	r1, r3
 8009518:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800951c:	f7fe fbba 	bl	8007c94 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8009520:	f107 0314 	add.w	r3, r7, #20
 8009524:	2204      	movs	r2, #4
 8009526:	4619      	mov	r1, r3
 8009528:	f44f 7080 	mov.w	r0, #256	; 0x100
 800952c:	f7fe fbb2 	bl	8007c94 <WIZCHIP_READ_BUF>
 8009530:	f107 0310 	add.w	r3, r7, #16
 8009534:	2204      	movs	r2, #4
 8009536:	4619      	mov	r1, r3
 8009538:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800953c:	f7fe fbaa 	bl	8007c94 <WIZCHIP_READ_BUF>
 8009540:	f107 030c 	add.w	r3, r7, #12
 8009544:	2204      	movs	r2, #4
 8009546:	4619      	mov	r1, r3
 8009548:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800954c:	f7fe fba2 	bl	8007c94 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8009550:	2180      	movs	r1, #128	; 0x80
 8009552:	2000      	movs	r0, #0
 8009554:	f7fe fb50 	bl	8007bf8 <WIZCHIP_WRITE>
   getMR(); // for delay
 8009558:	2000      	movs	r0, #0
 800955a:	f7fe fb01 	bl	8007b60 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800955e:	1d3b      	adds	r3, r7, #4
 8009560:	2206      	movs	r2, #6
 8009562:	4619      	mov	r1, r3
 8009564:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8009568:	f7fe fbf4 	bl	8007d54 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800956c:	f107 0314 	add.w	r3, r7, #20
 8009570:	2204      	movs	r2, #4
 8009572:	4619      	mov	r1, r3
 8009574:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009578:	f7fe fbec 	bl	8007d54 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800957c:	f107 0310 	add.w	r3, r7, #16
 8009580:	2204      	movs	r2, #4
 8009582:	4619      	mov	r1, r3
 8009584:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8009588:	f7fe fbe4 	bl	8007d54 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800958c:	f107 030c 	add.w	r3, r7, #12
 8009590:	2204      	movs	r2, #4
 8009592:	4619      	mov	r1, r3
 8009594:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8009598:	f7fe fbdc 	bl	8007d54 <WIZCHIP_WRITE_BUF>
}
 800959c:	bf00      	nop
 800959e:	3718      	adds	r7, #24
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80095ae:	2300      	movs	r3, #0
 80095b0:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80095b2:	f7ff ffab 	bl	800950c <wizchip_sw_reset>
   if(txsize)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d03b      	beq.n	8009634 <wizchip_init+0x90>
   {
      tmp = 0;
 80095bc:	2300      	movs	r3, #0
 80095be:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80095c0:	2300      	movs	r3, #0
 80095c2:	73fb      	strb	r3, [r7, #15]
 80095c4:	e015      	b.n	80095f2 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80095c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	4413      	add	r3, r2
 80095ce:	781a      	ldrb	r2, [r3, #0]
 80095d0:	7bbb      	ldrb	r3, [r7, #14]
 80095d2:	4413      	add	r3, r2
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80095d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095dc:	2b10      	cmp	r3, #16
 80095de:	dd02      	ble.n	80095e6 <wizchip_init+0x42>
 80095e0:	f04f 33ff 	mov.w	r3, #4294967295
 80095e4:	e066      	b.n	80096b4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80095e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	3301      	adds	r3, #1
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	73fb      	strb	r3, [r7, #15]
 80095f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095f6:	2b07      	cmp	r3, #7
 80095f8:	dde5      	ble.n	80095c6 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80095fa:	2300      	movs	r3, #0
 80095fc:	73fb      	strb	r3, [r7, #15]
 80095fe:	e015      	b.n	800962c <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8009600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	3301      	adds	r3, #1
 8009608:	00db      	lsls	r3, r3, #3
 800960a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800960e:	4618      	mov	r0, r3
 8009610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	4413      	add	r3, r2
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	4619      	mov	r1, r3
 800961c:	f7fe faec 	bl	8007bf8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009624:	b2db      	uxtb	r3, r3
 8009626:	3301      	adds	r3, #1
 8009628:	b2db      	uxtb	r3, r3
 800962a:	73fb      	strb	r3, [r7, #15]
 800962c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009630:	2b07      	cmp	r3, #7
 8009632:	dde5      	ble.n	8009600 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d03b      	beq.n	80096b2 <wizchip_init+0x10e>
   {
      tmp = 0;
 800963a:	2300      	movs	r3, #0
 800963c:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800963e:	2300      	movs	r3, #0
 8009640:	73fb      	strb	r3, [r7, #15]
 8009642:	e015      	b.n	8009670 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8009644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009648:	683a      	ldr	r2, [r7, #0]
 800964a:	4413      	add	r3, r2
 800964c:	781a      	ldrb	r2, [r3, #0]
 800964e:	7bbb      	ldrb	r3, [r7, #14]
 8009650:	4413      	add	r3, r2
 8009652:	b2db      	uxtb	r3, r3
 8009654:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8009656:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800965a:	2b10      	cmp	r3, #16
 800965c:	dd02      	ble.n	8009664 <wizchip_init+0xc0>
 800965e:	f04f 33ff 	mov.w	r3, #4294967295
 8009662:	e027      	b.n	80096b4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009668:	b2db      	uxtb	r3, r3
 800966a:	3301      	adds	r3, #1
 800966c:	b2db      	uxtb	r3, r3
 800966e:	73fb      	strb	r3, [r7, #15]
 8009670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009674:	2b07      	cmp	r3, #7
 8009676:	dde5      	ble.n	8009644 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009678:	2300      	movs	r3, #0
 800967a:	73fb      	strb	r3, [r7, #15]
 800967c:	e015      	b.n	80096aa <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800967e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	3301      	adds	r3, #1
 8009686:	00db      	lsls	r3, r3, #3
 8009688:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800968c:	4618      	mov	r0, r3
 800968e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009692:	683a      	ldr	r2, [r7, #0]
 8009694:	4413      	add	r3, r2
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	4619      	mov	r1, r3
 800969a:	f7fe faad 	bl	8007bf8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800969e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	3301      	adds	r3, #1
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	73fb      	strb	r3, [r7, #15]
 80096aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096ae:	2b07      	cmp	r3, #7
 80096b0:	dde5      	ble.n	800967e <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3710      	adds	r7, #16
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	4603      	mov	r3, r0
 80096c4:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80096c6:	88fb      	ldrh	r3, [r7, #6]
 80096c8:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80096ca:	88fb      	ldrh	r3, [r7, #6]
 80096cc:	0a1b      	lsrs	r3, r3, #8
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 80096d2:	7bfb      	ldrb	r3, [r7, #15]
 80096d4:	f023 030f 	bic.w	r3, r3, #15
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	4619      	mov	r1, r3
 80096dc:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80096e0:	f7fe fa8a 	bl	8007bf8 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 80096e4:	2300      	movs	r3, #0
 80096e6:	73fb      	strb	r3, [r7, #15]
 80096e8:	e014      	b.n	8009714 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 80096ea:	7bba      	ldrb	r2, [r7, #14]
 80096ec:	7bfb      	ldrb	r3, [r7, #15]
 80096ee:	fa42 f303 	asr.w	r3, r2, r3
 80096f2:	f003 0301 	and.w	r3, r3, #1
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d009      	beq.n	800970e <wizchip_clrinterrupt+0x52>
 80096fa:	7bfb      	ldrb	r3, [r7, #15]
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	3301      	adds	r3, #1
 8009700:	00db      	lsls	r3, r3, #3
 8009702:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009706:	211f      	movs	r1, #31
 8009708:	4618      	mov	r0, r3
 800970a:	f7fe fa75 	bl	8007bf8 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 800970e:	7bfb      	ldrb	r3, [r7, #15]
 8009710:	3301      	adds	r3, #1
 8009712:	73fb      	strb	r3, [r7, #15]
 8009714:	7bfb      	ldrb	r3, [r7, #15]
 8009716:	2b07      	cmp	r3, #7
 8009718:	d9e7      	bls.n	80096ea <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 800971a:	bf00      	nop
 800971c:	bf00      	nop
 800971e:	3710      	adds	r7, #16
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 800972a:	2300      	movs	r3, #0
 800972c:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 800972e:	2300      	movs	r3, #0
 8009730:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8009732:	2300      	movs	r3, #0
 8009734:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8009736:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 800973a:	f7fe fa11 	bl	8007b60 <WIZCHIP_READ>
 800973e:	4603      	mov	r3, r0
 8009740:	f023 030f 	bic.w	r3, r3, #15
 8009744:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8009746:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 800974a:	f7fe fa09 	bl	8007b60 <WIZCHIP_READ>
 800974e:	4603      	mov	r3, r0
 8009750:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8009752:	79bb      	ldrb	r3, [r7, #6]
 8009754:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8009756:	88bb      	ldrh	r3, [r7, #4]
 8009758:	021b      	lsls	r3, r3, #8
 800975a:	b29a      	uxth	r2, r3
 800975c:	79fb      	ldrb	r3, [r7, #7]
 800975e:	b29b      	uxth	r3, r3
 8009760:	4413      	add	r3, r2
 8009762:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8009764:	88bb      	ldrh	r3, [r7, #4]
}
 8009766:	4618      	mov	r0, r3
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}

0800976e <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 800976e:	b580      	push	{r7, lr}
 8009770:	b084      	sub	sp, #16
 8009772:	af00      	add	r7, sp, #0
 8009774:	4603      	mov	r3, r0
 8009776:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8009778:	88fb      	ldrh	r3, [r7, #6]
 800977a:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 800977c:	88fb      	ldrh	r3, [r7, #6]
 800977e:	0a1b      	lsrs	r3, r3, #8
 8009780:	b29b      	uxth	r3, r3
 8009782:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8009784:	7bfb      	ldrb	r3, [r7, #15]
 8009786:	4619      	mov	r1, r3
 8009788:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800978c:	f7fe fa34 	bl	8007bf8 <WIZCHIP_WRITE>
   setSIMR(simr);
 8009790:	7bbb      	ldrb	r3, [r7, #14]
 8009792:	4619      	mov	r1, r3
 8009794:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8009798:	f7fe fa2e 	bl	8007bf8 <WIZCHIP_WRITE>
#endif   
}
 800979c:	bf00      	nop
 800979e:	3710      	adds	r7, #16
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 80097aa:	2300      	movs	r3, #0
 80097ac:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 80097ae:	2300      	movs	r3, #0
 80097b0:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80097b2:	2300      	movs	r3, #0
 80097b4:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 80097b6:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80097ba:	f7fe f9d1 	bl	8007b60 <WIZCHIP_READ>
 80097be:	4603      	mov	r3, r0
 80097c0:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 80097c2:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80097c6:	f7fe f9cb 	bl	8007b60 <WIZCHIP_READ>
 80097ca:	4603      	mov	r3, r0
 80097cc:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80097ce:	79bb      	ldrb	r3, [r7, #6]
 80097d0:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 80097d2:	88bb      	ldrh	r3, [r7, #4]
 80097d4:	021b      	lsls	r3, r3, #8
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	79fb      	ldrb	r3, [r7, #7]
 80097da:	b29b      	uxth	r3, r3
 80097dc:	4413      	add	r3, r2
 80097de:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80097e0:	88bb      	ldrh	r3, [r7, #4]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b082      	sub	sp, #8
 80097ee:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 80097f0:	2300      	movs	r3, #0
 80097f2:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 80097f4:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80097f8:	f7fe f9b2 	bl	8007b60 <WIZCHIP_READ>
 80097fc:	4603      	mov	r3, r0
 80097fe:	f003 0301 	and.w	r3, r3, #1
 8009802:	2b00      	cmp	r3, #0
 8009804:	d001      	beq.n	800980a <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8009806:	2301      	movs	r3, #1
 8009808:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 800980a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800980e:	4618      	mov	r0, r3
 8009810:	3708      	adds	r7, #8
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8009816:	b580      	push	{r7, lr}
 8009818:	b082      	sub	sp, #8
 800981a:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 800981c:	2300      	movs	r3, #0
 800981e:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8009820:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8009824:	f7fe f99c 	bl	8007b60 <WIZCHIP_READ>
 8009828:	4603      	mov	r3, r0
 800982a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800982e:	2b30      	cmp	r3, #48	; 0x30
 8009830:	d102      	bne.n	8009838 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8009832:	2301      	movs	r3, #1
 8009834:	71fb      	strb	r3, [r7, #7]
 8009836:	e001      	b.n	800983c <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8009838:	2300      	movs	r3, #0
 800983a:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 800983c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 800984e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8009852:	f7fe f985 	bl	8007b60 <WIZCHIP_READ>
 8009856:	4603      	mov	r3, r0
 8009858:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 800985a:	79fb      	ldrb	r3, [r7, #7]
 800985c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009860:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8009862:	79fb      	ldrb	r3, [r7, #7]
 8009864:	4619      	mov	r1, r3
 8009866:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800986a:	f7fe f9c5 	bl	8007bf8 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 800986e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8009872:	f7fe f975 	bl	8007b60 <WIZCHIP_READ>
 8009876:	4603      	mov	r3, r0
 8009878:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 800987a:	79fb      	ldrb	r3, [r7, #7]
 800987c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009880:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8009882:	79fb      	ldrb	r3, [r7, #7]
 8009884:	4619      	mov	r1, r3
 8009886:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800988a:	f7fe f9b5 	bl	8007bf8 <WIZCHIP_WRITE>
}
 800988e:	bf00      	nop
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b084      	sub	sp, #16
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800989e:	2300      	movs	r3, #0
 80098a0:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d104      	bne.n	80098b4 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 80098aa:	7bfb      	ldrb	r3, [r7, #15]
 80098ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098b0:	73fb      	strb	r3, [r7, #15]
 80098b2:	e003      	b.n	80098bc <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 80098b4:	7bfb      	ldrb	r3, [r7, #15]
 80098b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098ba:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	785b      	ldrb	r3, [r3, #1]
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d104      	bne.n	80098ce <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
 80098c6:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80098ca:	73fb      	strb	r3, [r7, #15]
 80098cc:	e019      	b.n	8009902 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	78db      	ldrb	r3, [r3, #3]
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d10d      	bne.n	80098f2 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	789b      	ldrb	r3, [r3, #2]
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d104      	bne.n	80098e8 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80098de:	7bfb      	ldrb	r3, [r7, #15]
 80098e0:	f043 0318 	orr.w	r3, r3, #24
 80098e4:	73fb      	strb	r3, [r7, #15]
 80098e6:	e00c      	b.n	8009902 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80098e8:	7bfb      	ldrb	r3, [r7, #15]
 80098ea:	f043 0308 	orr.w	r3, r3, #8
 80098ee:	73fb      	strb	r3, [r7, #15]
 80098f0:	e007      	b.n	8009902 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	789b      	ldrb	r3, [r3, #2]
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d103      	bne.n	8009902 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 80098fa:	7bfb      	ldrb	r3, [r7, #15]
 80098fc:	f043 0310 	orr.w	r3, r3, #16
 8009900:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8009902:	7bfb      	ldrb	r3, [r7, #15]
 8009904:	4619      	mov	r1, r3
 8009906:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800990a:	f7fe f975 	bl	8007bf8 <WIZCHIP_WRITE>
   wizphy_reset();
 800990e:	f7ff ff9b 	bl	8009848 <wizphy_reset>
}
 8009912:	bf00      	nop
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
	...

0800991c <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8009924:	2300      	movs	r3, #0
 8009926:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8009928:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800992c:	f7fe f918 	bl	8007b60 <WIZCHIP_READ>
 8009930:	4603      	mov	r3, r0
 8009932:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8009934:	7bfb      	ldrb	r3, [r7, #15]
 8009936:	119b      	asrs	r3, r3, #6
 8009938:	b2db      	uxtb	r3, r3
 800993a:	f003 0301 	and.w	r3, r3, #1
 800993e:	b2da      	uxtb	r2, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8009944:	7bfb      	ldrb	r3, [r7, #15]
 8009946:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800994a:	2b20      	cmp	r3, #32
 800994c:	d001      	beq.n	8009952 <wizphy_getphyconf+0x36>
 800994e:	2b38      	cmp	r3, #56	; 0x38
 8009950:	d103      	bne.n	800995a <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2201      	movs	r2, #1
 8009956:	705a      	strb	r2, [r3, #1]
         break;
 8009958:	e003      	b.n	8009962 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	705a      	strb	r2, [r3, #1]
         break;
 8009960:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8009962:	7bfb      	ldrb	r3, [r7, #15]
 8009964:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009968:	3b10      	subs	r3, #16
 800996a:	2b10      	cmp	r3, #16
 800996c:	bf8c      	ite	hi
 800996e:	2201      	movhi	r2, #1
 8009970:	2200      	movls	r2, #0
 8009972:	b2d2      	uxtb	r2, r2
 8009974:	2a00      	cmp	r2, #0
 8009976:	d10f      	bne.n	8009998 <wizphy_getphyconf+0x7c>
 8009978:	4a1b      	ldr	r2, [pc, #108]	; (80099e8 <wizphy_getphyconf+0xcc>)
 800997a:	fa22 f303 	lsr.w	r3, r2, r3
 800997e:	f003 0301 	and.w	r3, r3, #1
 8009982:	2b00      	cmp	r3, #0
 8009984:	bf14      	ite	ne
 8009986:	2301      	movne	r3, #1
 8009988:	2300      	moveq	r3, #0
 800998a:	b2db      	uxtb	r3, r3
 800998c:	2b00      	cmp	r3, #0
 800998e:	d003      	beq.n	8009998 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	709a      	strb	r2, [r3, #2]
         break;
 8009996:	e003      	b.n	80099a0 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	709a      	strb	r2, [r3, #2]
         break;
 800999e:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80099a0:	7bfb      	ldrb	r3, [r7, #15]
 80099a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099a6:	3b08      	subs	r3, #8
 80099a8:	2b18      	cmp	r3, #24
 80099aa:	bf8c      	ite	hi
 80099ac:	2201      	movhi	r2, #1
 80099ae:	2200      	movls	r2, #0
 80099b0:	b2d2      	uxtb	r2, r2
 80099b2:	2a00      	cmp	r2, #0
 80099b4:	d10f      	bne.n	80099d6 <wizphy_getphyconf+0xba>
 80099b6:	4a0d      	ldr	r2, [pc, #52]	; (80099ec <wizphy_getphyconf+0xd0>)
 80099b8:	fa22 f303 	lsr.w	r3, r2, r3
 80099bc:	f003 0301 	and.w	r3, r3, #1
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	bf14      	ite	ne
 80099c4:	2301      	movne	r3, #1
 80099c6:	2300      	moveq	r3, #0
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d003      	beq.n	80099d6 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2201      	movs	r2, #1
 80099d2:	70da      	strb	r2, [r3, #3]
         break;
 80099d4:	e003      	b.n	80099de <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2200      	movs	r2, #0
 80099da:	70da      	strb	r2, [r3, #3]
         break;
 80099dc:	bf00      	nop
   }
}
 80099de:	bf00      	nop
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	00010101 	.word	0x00010101
 80099ec:	01010001 	.word	0x01010001

080099f0 <wizphy_getphystat>:

void wizphy_getphystat(wiz_PhyConf* phyconf)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
   uint8_t tmp = getPHYCFGR();
 80099f8:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80099fc:	f7fe f8b0 	bl	8007b60 <WIZCHIP_READ>
 8009a00:	4603      	mov	r3, r0
 8009a02:	73fb      	strb	r3, [r7, #15]
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
 8009a04:	7bfb      	ldrb	r3, [r7, #15]
 8009a06:	109b      	asrs	r3, r3, #2
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	f003 0301 	and.w	r3, r3, #1
 8009a0e:	b2da      	uxtb	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	70da      	strb	r2, [r3, #3]
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
 8009a16:	105b      	asrs	r3, r3, #1
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	f003 0301 	and.w	r3, r3, #1
 8009a1e:	b2da      	uxtb	r2, r3
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	709a      	strb	r2, [r3, #2]
}
 8009a24:	bf00      	nop
 8009a26:	3710      	adds	r7, #16
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <wizphy_setphypmode>:

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	4603      	mov	r3, r0
 8009a34:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8009a36:	2300      	movs	r3, #0
 8009a38:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8009a3a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8009a3e:	f7fe f88f 	bl	8007b60 <WIZCHIP_READ>
 8009a42:	4603      	mov	r3, r0
 8009a44:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8009a46:	7bfb      	ldrb	r3, [r7, #15]
 8009a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d102      	bne.n	8009a56 <wizphy_setphypmode+0x2a>
 8009a50:	f04f 33ff 	mov.w	r3, #4294967295
 8009a54:	e030      	b.n	8009ab8 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8009a56:	7bfb      	ldrb	r3, [r7, #15]
 8009a58:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8009a5c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8009a5e:	79fb      	ldrb	r3, [r7, #7]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d104      	bne.n	8009a6e <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8009a64:	7bfb      	ldrb	r3, [r7, #15]
 8009a66:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009a6a:	73fb      	strb	r3, [r7, #15]
 8009a6c:	e003      	b.n	8009a76 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8009a6e:	7bfb      	ldrb	r3, [r7, #15]
 8009a70:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8009a74:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8009a76:	7bfb      	ldrb	r3, [r7, #15]
 8009a78:	4619      	mov	r1, r3
 8009a7a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8009a7e:	f7fe f8bb 	bl	8007bf8 <WIZCHIP_WRITE>
   wizphy_reset();
 8009a82:	f7ff fee1 	bl	8009848 <wizphy_reset>
   tmp = getPHYCFGR();
 8009a86:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8009a8a:	f7fe f869 	bl	8007b60 <WIZCHIP_READ>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8009a92:	79fb      	ldrb	r3, [r7, #7]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d106      	bne.n	8009aa6 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8009a98:	7bfb      	ldrb	r3, [r7, #15]
 8009a9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d008      	beq.n	8009ab4 <wizphy_setphypmode+0x88>
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	e008      	b.n	8009ab8 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8009aa6:	7bfb      	ldrb	r3, [r7, #15]
 8009aa8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d001      	beq.n	8009ab4 <wizphy_setphypmode+0x88>
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	e001      	b.n	8009ab8 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8009ab4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3710      	adds	r7, #16
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2206      	movs	r2, #6
 8009acc:	4619      	mov	r1, r3
 8009ace:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8009ad2:	f7fe f93f 	bl	8007d54 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	330e      	adds	r3, #14
 8009ada:	2204      	movs	r2, #4
 8009adc:	4619      	mov	r1, r3
 8009ade:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009ae2:	f7fe f937 	bl	8007d54 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	330a      	adds	r3, #10
 8009aea:	2204      	movs	r2, #4
 8009aec:	4619      	mov	r1, r3
 8009aee:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8009af2:	f7fe f92f 	bl	8007d54 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	3306      	adds	r3, #6
 8009afa:	2204      	movs	r2, #4
 8009afc:	4619      	mov	r1, r3
 8009afe:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8009b02:	f7fe f927 	bl	8007d54 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	7c9a      	ldrb	r2, [r3, #18]
 8009b0a:	4b0b      	ldr	r3, [pc, #44]	; (8009b38 <wizchip_setnetinfo+0x78>)
 8009b0c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	7cda      	ldrb	r2, [r3, #19]
 8009b12:	4b09      	ldr	r3, [pc, #36]	; (8009b38 <wizchip_setnetinfo+0x78>)
 8009b14:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	7d1a      	ldrb	r2, [r3, #20]
 8009b1a:	4b07      	ldr	r3, [pc, #28]	; (8009b38 <wizchip_setnetinfo+0x78>)
 8009b1c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	7d5a      	ldrb	r2, [r3, #21]
 8009b22:	4b05      	ldr	r3, [pc, #20]	; (8009b38 <wizchip_setnetinfo+0x78>)
 8009b24:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	7d9a      	ldrb	r2, [r3, #22]
 8009b2a:	4b04      	ldr	r3, [pc, #16]	; (8009b3c <wizchip_setnetinfo+0x7c>)
 8009b2c:	701a      	strb	r2, [r3, #0]
}
 8009b2e:	bf00      	nop
 8009b30:	3708      	adds	r7, #8
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	20000960 	.word	0x20000960
 8009b3c:	20000964 	.word	0x20000964

08009b40 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2206      	movs	r2, #6
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8009b52:	f7fe f89f 	bl	8007c94 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	330e      	adds	r3, #14
 8009b5a:	2204      	movs	r2, #4
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009b62:	f7fe f897 	bl	8007c94 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	330a      	adds	r3, #10
 8009b6a:	2204      	movs	r2, #4
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8009b72:	f7fe f88f 	bl	8007c94 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	3306      	adds	r3, #6
 8009b7a:	2204      	movs	r2, #4
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8009b82:	f7fe f887 	bl	8007c94 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8009b86:	4b0c      	ldr	r3, [pc, #48]	; (8009bb8 <wizchip_getnetinfo+0x78>)
 8009b88:	781a      	ldrb	r2, [r3, #0]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8009b8e:	4b0a      	ldr	r3, [pc, #40]	; (8009bb8 <wizchip_getnetinfo+0x78>)
 8009b90:	785a      	ldrb	r2, [r3, #1]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8009b96:	4b08      	ldr	r3, [pc, #32]	; (8009bb8 <wizchip_getnetinfo+0x78>)
 8009b98:	789a      	ldrb	r2, [r3, #2]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8009b9e:	4b06      	ldr	r3, [pc, #24]	; (8009bb8 <wizchip_getnetinfo+0x78>)
 8009ba0:	78da      	ldrb	r2, [r3, #3]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8009ba6:	4b05      	ldr	r3, [pc, #20]	; (8009bbc <wizchip_getnetinfo+0x7c>)
 8009ba8:	781a      	ldrb	r2, [r3, #0]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	759a      	strb	r2, [r3, #22]
}
 8009bae:	bf00      	nop
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	20000960 	.word	0x20000960
 8009bbc:	20000964 	.word	0x20000964

08009bc0 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8009bce:	79fb      	ldrb	r3, [r7, #7]
 8009bd0:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d002      	beq.n	8009bde <wizchip_setnetmode+0x1e>
 8009bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8009bdc:	e00e      	b.n	8009bfc <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8009bde:	2000      	movs	r0, #0
 8009be0:	f7fd ffbe 	bl	8007b60 <WIZCHIP_READ>
 8009be4:	4603      	mov	r3, r0
 8009be6:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8009be8:	7bfa      	ldrb	r2, [r7, #15]
 8009bea:	79fb      	ldrb	r3, [r7, #7]
 8009bec:	4313      	orrs	r3, r2
 8009bee:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8009bf0:	7bfb      	ldrb	r3, [r7, #15]
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	f7fd ffff 	bl	8007bf8 <WIZCHIP_WRITE>
   return 0;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3710      	adds	r7, #16
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8009c08:	2000      	movs	r0, #0
 8009c0a:	f7fd ffa9 	bl	8007b60 <WIZCHIP_READ>
 8009c0e:	4603      	mov	r3, r0
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	4619      	mov	r1, r3
 8009c22:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8009c26:	f7fd ffe7 	bl	8007bf8 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	885b      	ldrh	r3, [r3, #2]
 8009c2e:	0a1b      	lsrs	r3, r3, #8
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	4619      	mov	r1, r3
 8009c36:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8009c3a:	f7fd ffdd 	bl	8007bf8 <WIZCHIP_WRITE>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	885b      	ldrh	r3, [r3, #2]
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	4619      	mov	r1, r3
 8009c46:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8009c4a:	f7fd ffd5 	bl	8007bf8 <WIZCHIP_WRITE>
}
 8009c4e:	bf00      	nop
 8009c50:	3708      	adds	r7, #8
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8009c56:	b590      	push	{r4, r7, lr}
 8009c58:	b083      	sub	sp, #12
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8009c5e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8009c62:	f7fd ff7d 	bl	8007b60 <WIZCHIP_READ>
 8009c66:	4603      	mov	r3, r0
 8009c68:	461a      	mov	r2, r3
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8009c6e:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8009c72:	f7fd ff75 	bl	8007b60 <WIZCHIP_READ>
 8009c76:	4603      	mov	r3, r0
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	021b      	lsls	r3, r3, #8
 8009c7c:	b29c      	uxth	r4, r3
 8009c7e:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8009c82:	f7fd ff6d 	bl	8007b60 <WIZCHIP_READ>
 8009c86:	4603      	mov	r3, r0
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	4423      	add	r3, r4
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	805a      	strh	r2, [r3, #2]
}
 8009c92:	bf00      	nop
 8009c94:	370c      	adds	r7, #12
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd90      	pop	{r4, r7, pc}
	...

08009c9c <default_ip_assign>:
	if (delay_func) delay = delay_func;
}

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8009ca0:	2204      	movs	r2, #4
 8009ca2:	4909      	ldr	r1, [pc, #36]	; (8009cc8 <default_ip_assign+0x2c>)
 8009ca4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8009ca8:	f7fe f854 	bl	8007d54 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8009cac:	2204      	movs	r2, #4
 8009cae:	4907      	ldr	r1, [pc, #28]	; (8009ccc <default_ip_assign+0x30>)
 8009cb0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8009cb4:	f7fe f84e 	bl	8007d54 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8009cb8:	2204      	movs	r2, #4
 8009cba:	4905      	ldr	r1, [pc, #20]	; (8009cd0 <default_ip_assign+0x34>)
 8009cbc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009cc0:	f7fe f848 	bl	8007d54 <WIZCHIP_WRITE_BUF>
}
 8009cc4:	bf00      	nop
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	20000974 	.word	0x20000974
 8009ccc:	2000097c 	.word	0x2000097c
 8009cd0:	20000978 	.word	0x20000978

08009cd4 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8009cd8:	2180      	movs	r1, #128	; 0x80
 8009cda:	2000      	movs	r0, #0
 8009cdc:	f7fd ff8c 	bl	8007bf8 <WIZCHIP_WRITE>
   getMR(); // for delay
 8009ce0:	2000      	movs	r0, #0
 8009ce2:	f7fd ff3d 	bl	8007b60 <WIZCHIP_READ>
   default_ip_assign();
 8009ce6:	f7ff ffd9 	bl	8009c9c <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8009cea:	2206      	movs	r2, #6
 8009cec:	4903      	ldr	r1, [pc, #12]	; (8009cfc <default_ip_update+0x28>)
 8009cee:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8009cf2:	f7fe f82f 	bl	8007d54 <WIZCHIP_WRITE_BUF>
}
 8009cf6:	bf00      	nop
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	20000994 	.word	0x20000994

08009d00 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8009d04:	2180      	movs	r1, #128	; 0x80
 8009d06:	2000      	movs	r0, #0
 8009d08:	f7fd ff76 	bl	8007bf8 <WIZCHIP_WRITE>
	getMR(); // for delay
 8009d0c:	2000      	movs	r0, #0
 8009d0e:	f7fd ff27 	bl	8007b60 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8009d12:	2206      	movs	r2, #6
 8009d14:	4903      	ldr	r1, [pc, #12]	; (8009d24 <default_ip_conflict+0x24>)
 8009d16:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8009d1a:	f7fe f81b 	bl	8007d54 <WIZCHIP_WRITE_BUF>
}
 8009d1e:	bf00      	nop
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	20000994 	.word	0x20000994

08009d28 <default_delay>:

void default_delay(uint32_t time){}
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	bf00      	nop
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8009d48:	4b10      	ldr	r3, [pc, #64]	; (8009d8c <reg_dhcp_cbfunc+0x50>)
 8009d4a:	4a11      	ldr	r2, [pc, #68]	; (8009d90 <reg_dhcp_cbfunc+0x54>)
 8009d4c:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 8009d4e:	4b11      	ldr	r3, [pc, #68]	; (8009d94 <reg_dhcp_cbfunc+0x58>)
 8009d50:	4a11      	ldr	r2, [pc, #68]	; (8009d98 <reg_dhcp_cbfunc+0x5c>)
 8009d52:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8009d54:	4b11      	ldr	r3, [pc, #68]	; (8009d9c <reg_dhcp_cbfunc+0x60>)
 8009d56:	4a12      	ldr	r2, [pc, #72]	; (8009da0 <reg_dhcp_cbfunc+0x64>)
 8009d58:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d002      	beq.n	8009d66 <reg_dhcp_cbfunc+0x2a>
 8009d60:	4a0a      	ldr	r2, [pc, #40]	; (8009d8c <reg_dhcp_cbfunc+0x50>)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d002      	beq.n	8009d72 <reg_dhcp_cbfunc+0x36>
 8009d6c:	4a09      	ldr	r2, [pc, #36]	; (8009d94 <reg_dhcp_cbfunc+0x58>)
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d002      	beq.n	8009d7e <reg_dhcp_cbfunc+0x42>
 8009d78:	4a08      	ldr	r2, [pc, #32]	; (8009d9c <reg_dhcp_cbfunc+0x60>)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6013      	str	r3, [r2, #0]
}
 8009d7e:	bf00      	nop
 8009d80:	3714      	adds	r7, #20
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr
 8009d8a:	bf00      	nop
 8009d8c:	20000104 	.word	0x20000104
 8009d90:	08009c9d 	.word	0x08009c9d
 8009d94:	20000108 	.word	0x20000108
 8009d98:	08009cd5 	.word	0x08009cd5
 8009d9c:	2000010c 	.word	0x2000010c
 8009da0:	08009d01 	.word	0x08009d01

08009da4 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8009daa:	463b      	mov	r3, r7
 8009dac:	2206      	movs	r2, #6
 8009dae:	4619      	mov	r1, r3
 8009db0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8009db4:	f7fd ff6e 	bl	8007c94 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8009db8:	4b72      	ldr	r3, [pc, #456]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8009dc0:	4b70      	ldr	r3, [pc, #448]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8009dc8:	4b6e      	ldr	r3, [pc, #440]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2206      	movs	r2, #6
 8009dce:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8009dd0:	4b6c      	ldr	r3, [pc, #432]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8009dd8:	4b6a      	ldr	r3, [pc, #424]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	3304      	adds	r3, #4
 8009dde:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8009de0:	4b69      	ldr	r3, [pc, #420]	; (8009f88 <makeDHCPMSG+0x1e4>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	0e1b      	lsrs	r3, r3, #24
 8009de6:	b2da      	uxtb	r2, r3
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8009dec:	4b66      	ldr	r3, [pc, #408]	; (8009f88 <makeDHCPMSG+0x1e4>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	0c1a      	lsrs	r2, r3, #16
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	3301      	adds	r3, #1
 8009df6:	b2d2      	uxtb	r2, r2
 8009df8:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8009dfa:	4b63      	ldr	r3, [pc, #396]	; (8009f88 <makeDHCPMSG+0x1e4>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	0a1a      	lsrs	r2, r3, #8
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	3302      	adds	r3, #2
 8009e04:	b2d2      	uxtb	r2, r2
 8009e06:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8009e08:	4b5f      	ldr	r3, [pc, #380]	; (8009f88 <makeDHCPMSG+0x1e4>)
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	3303      	adds	r3, #3
 8009e10:	b2d2      	uxtb	r2, r2
 8009e12:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8009e14:	4b5b      	ldr	r3, [pc, #364]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8009e1c:	4b59      	ldr	r3, [pc, #356]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	330a      	adds	r3, #10
 8009e22:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	2280      	movs	r2, #128	; 0x80
 8009e28:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	2200      	movs	r2, #0
 8009e30:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8009e32:	4b54      	ldr	r3, [pc, #336]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2200      	movs	r2, #0
 8009e38:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8009e3a:	4b52      	ldr	r3, [pc, #328]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8009e42:	4b50      	ldr	r3, [pc, #320]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2200      	movs	r2, #0
 8009e48:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8009e4a:	4b4e      	ldr	r3, [pc, #312]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8009e52:	4b4c      	ldr	r3, [pc, #304]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2200      	movs	r2, #0
 8009e58:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8009e5a:	4b4a      	ldr	r3, [pc, #296]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8009e62:	4b48      	ldr	r3, [pc, #288]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2200      	movs	r2, #0
 8009e68:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8009e6a:	4b46      	ldr	r3, [pc, #280]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8009e72:	4b44      	ldr	r3, [pc, #272]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2200      	movs	r2, #0
 8009e78:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8009e7a:	4b42      	ldr	r3, [pc, #264]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8009e82:	4b40      	ldr	r3, [pc, #256]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2200      	movs	r2, #0
 8009e88:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8009e8a:	4b3e      	ldr	r3, [pc, #248]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8009e92:	4b3c      	ldr	r3, [pc, #240]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2200      	movs	r2, #0
 8009e98:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8009e9a:	4b3a      	ldr	r3, [pc, #232]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8009ea2:	4b38      	ldr	r3, [pc, #224]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 8009eaa:	4b36      	ldr	r3, [pc, #216]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8009eb2:	4b34      	ldr	r3, [pc, #208]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a35      	ldr	r2, [pc, #212]	; (8009f8c <makeDHCPMSG+0x1e8>)
 8009eb8:	7812      	ldrb	r2, [r2, #0]
 8009eba:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8009ebc:	4b31      	ldr	r3, [pc, #196]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a32      	ldr	r2, [pc, #200]	; (8009f8c <makeDHCPMSG+0x1e8>)
 8009ec2:	7852      	ldrb	r2, [r2, #1]
 8009ec4:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8009ec6:	4b2f      	ldr	r3, [pc, #188]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a30      	ldr	r2, [pc, #192]	; (8009f8c <makeDHCPMSG+0x1e8>)
 8009ecc:	7892      	ldrb	r2, [r2, #2]
 8009ece:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8009ed0:	4b2c      	ldr	r3, [pc, #176]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a2d      	ldr	r2, [pc, #180]	; (8009f8c <makeDHCPMSG+0x1e8>)
 8009ed6:	78d2      	ldrb	r2, [r2, #3]
 8009ed8:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8009eda:	4b2a      	ldr	r3, [pc, #168]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a2b      	ldr	r2, [pc, #172]	; (8009f8c <makeDHCPMSG+0x1e8>)
 8009ee0:	7912      	ldrb	r2, [r2, #4]
 8009ee2:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8009ee6:	4b27      	ldr	r3, [pc, #156]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a28      	ldr	r2, [pc, #160]	; (8009f8c <makeDHCPMSG+0x1e8>)
 8009eec:	7952      	ldrb	r2, [r2, #5]
 8009eee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8009ef2:	2306      	movs	r3, #6
 8009ef4:	73fb      	strb	r3, [r7, #15]
 8009ef6:	e008      	b.n	8009f0a <makeDHCPMSG+0x166>
 8009ef8:	4b22      	ldr	r3, [pc, #136]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	7bfb      	ldrb	r3, [r7, #15]
 8009efe:	4413      	add	r3, r2
 8009f00:	2200      	movs	r2, #0
 8009f02:	771a      	strb	r2, [r3, #28]
 8009f04:	7bfb      	ldrb	r3, [r7, #15]
 8009f06:	3301      	adds	r3, #1
 8009f08:	73fb      	strb	r3, [r7, #15]
 8009f0a:	7bfb      	ldrb	r3, [r7, #15]
 8009f0c:	2b0f      	cmp	r3, #15
 8009f0e:	d9f3      	bls.n	8009ef8 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8009f10:	2300      	movs	r3, #0
 8009f12:	73fb      	strb	r3, [r7, #15]
 8009f14:	e009      	b.n	8009f2a <makeDHCPMSG+0x186>
 8009f16:	4b1b      	ldr	r3, [pc, #108]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	7bfb      	ldrb	r3, [r7, #15]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8009f24:	7bfb      	ldrb	r3, [r7, #15]
 8009f26:	3301      	adds	r3, #1
 8009f28:	73fb      	strb	r3, [r7, #15]
 8009f2a:	7bfb      	ldrb	r3, [r7, #15]
 8009f2c:	2b3f      	cmp	r3, #63	; 0x3f
 8009f2e:	d9f2      	bls.n	8009f16 <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8009f30:	2300      	movs	r3, #0
 8009f32:	73fb      	strb	r3, [r7, #15]
 8009f34:	e009      	b.n	8009f4a <makeDHCPMSG+0x1a6>
 8009f36:	4b13      	ldr	r3, [pc, #76]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	7bfb      	ldrb	r3, [r7, #15]
 8009f3c:	4413      	add	r3, r2
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8009f44:	7bfb      	ldrb	r3, [r7, #15]
 8009f46:	3301      	adds	r3, #1
 8009f48:	73fb      	strb	r3, [r7, #15]
 8009f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	daf1      	bge.n	8009f36 <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8009f52:	4b0c      	ldr	r3, [pc, #48]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2263      	movs	r2, #99	; 0x63
 8009f58:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8009f5c:	4b09      	ldr	r3, [pc, #36]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2282      	movs	r2, #130	; 0x82
 8009f62:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8009f66:	4b07      	ldr	r3, [pc, #28]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2253      	movs	r2, #83	; 0x53
 8009f6c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8009f70:	4b04      	ldr	r3, [pc, #16]	; (8009f84 <makeDHCPMSG+0x1e0>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	2263      	movs	r2, #99	; 0x63
 8009f76:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 8009f7a:	bf00      	nop
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	20000990 	.word	0x20000990
 8009f88:	2000098c 	.word	0x2000098c
 8009f8c:	20000994 	.word	0x20000994

08009f90 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8009f90:	b5b0      	push	{r4, r5, r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 8009f96:	2300      	movs	r3, #0
 8009f98:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 8009f9a:	f7ff ff03 	bl	8009da4 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8009f9e:	4b56      	ldr	r3, [pc, #344]	; (800a0f8 <send_DHCP_DISCOVER+0x168>)
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8009fa4:	4b54      	ldr	r3, [pc, #336]	; (800a0f8 <send_DHCP_DISCOVER+0x168>)
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 8009faa:	4b53      	ldr	r3, [pc, #332]	; (800a0f8 <send_DHCP_DISCOVER+0x168>)
 8009fac:	2200      	movs	r2, #0
 8009fae:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8009fb0:	4b51      	ldr	r3, [pc, #324]	; (800a0f8 <send_DHCP_DISCOVER+0x168>)
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 8009fb6:	4b51      	ldr	r3, [pc, #324]	; (800a0fc <send_DHCP_DISCOVER+0x16c>)
 8009fb8:	2200      	movs	r2, #0
 8009fba:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8009fbc:	4b4f      	ldr	r3, [pc, #316]	; (800a0fc <send_DHCP_DISCOVER+0x16c>)
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8009fc2:	4b4e      	ldr	r3, [pc, #312]	; (800a0fc <send_DHCP_DISCOVER+0x16c>)
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8009fc8:	4b4c      	ldr	r3, [pc, #304]	; (800a0fc <send_DHCP_DISCOVER+0x16c>)
 8009fca:	2200      	movs	r2, #0
 8009fcc:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 8009fce:	2304      	movs	r3, #4
 8009fd0:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8009fd2:	4b4b      	ldr	r3, [pc, #300]	; (800a100 <send_DHCP_DISCOVER+0x170>)
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	88bb      	ldrh	r3, [r7, #4]
 8009fd8:	1c59      	adds	r1, r3, #1
 8009fda:	80b9      	strh	r1, [r7, #4]
 8009fdc:	4413      	add	r3, r2
 8009fde:	2235      	movs	r2, #53	; 0x35
 8009fe0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8009fe4:	4b46      	ldr	r3, [pc, #280]	; (800a100 <send_DHCP_DISCOVER+0x170>)
 8009fe6:	681a      	ldr	r2, [r3, #0]
 8009fe8:	88bb      	ldrh	r3, [r7, #4]
 8009fea:	1c59      	adds	r1, r3, #1
 8009fec:	80b9      	strh	r1, [r7, #4]
 8009fee:	4413      	add	r3, r2
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 8009ff6:	4b42      	ldr	r3, [pc, #264]	; (800a100 <send_DHCP_DISCOVER+0x170>)
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	88bb      	ldrh	r3, [r7, #4]
 8009ffc:	1c59      	adds	r1, r3, #1
 8009ffe:	80b9      	strh	r1, [r7, #4]
 800a000:	4413      	add	r3, r2
 800a002:	2201      	movs	r2, #1
 800a004:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800a008:	4b3d      	ldr	r3, [pc, #244]	; (800a100 <send_DHCP_DISCOVER+0x170>)
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	88bb      	ldrh	r3, [r7, #4]
 800a00e:	1c59      	adds	r1, r3, #1
 800a010:	80b9      	strh	r1, [r7, #4]
 800a012:	4413      	add	r3, r2
 800a014:	223d      	movs	r2, #61	; 0x3d
 800a016:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 800a01a:	4b39      	ldr	r3, [pc, #228]	; (800a100 <send_DHCP_DISCOVER+0x170>)
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	88bb      	ldrh	r3, [r7, #4]
 800a020:	1c59      	adds	r1, r3, #1
 800a022:	80b9      	strh	r1, [r7, #4]
 800a024:	4413      	add	r3, r2
 800a026:	2207      	movs	r2, #7
 800a028:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800a02c:	4b34      	ldr	r3, [pc, #208]	; (800a100 <send_DHCP_DISCOVER+0x170>)
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	88bb      	ldrh	r3, [r7, #4]
 800a032:	1c59      	adds	r1, r3, #1
 800a034:	80b9      	strh	r1, [r7, #4]
 800a036:	4413      	add	r3, r2
 800a038:	2201      	movs	r2, #1
 800a03a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800a03e:	4b30      	ldr	r3, [pc, #192]	; (800a100 <send_DHCP_DISCOVER+0x170>)
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	88bb      	ldrh	r3, [r7, #4]
 800a044:	1c59      	adds	r1, r3, #1
 800a046:	80b9      	strh	r1, [r7, #4]
 800a048:	4618      	mov	r0, r3
 800a04a:	4b2e      	ldr	r3, [pc, #184]	; (800a104 <send_DHCP_DISCOVER+0x174>)
 800a04c:	7819      	ldrb	r1, [r3, #0]
 800a04e:	1813      	adds	r3, r2, r0
 800a050:	460a      	mov	r2, r1
 800a052:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800a056:	4b2a      	ldr	r3, [pc, #168]	; (800a100 <send_DHCP_DISCOVER+0x170>)
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	88bb      	ldrh	r3, [r7, #4]
 800a05c:	1c59      	adds	r1, r3, #1
 800a05e:	80b9      	strh	r1, [r7, #4]
 800a060:	4618      	mov	r0, r3
 800a062:	4b28      	ldr	r3, [pc, #160]	; (800a104 <send_DHCP_DISCOVER+0x174>)
 800a064:	7859      	ldrb	r1, [r3, #1]
 800a066:	1813      	adds	r3, r2, r0
 800a068:	460a      	mov	r2, r1
 800a06a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800a06e:	4b24      	ldr	r3, [pc, #144]	; (800a100 <send_DHCP_DISCOVER+0x170>)
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	88bb      	ldrh	r3, [r7, #4]
 800a074:	1c59      	adds	r1, r3, #1
 800a076:	80b9      	strh	r1, [r7, #4]
 800a078:	4618      	mov	r0, r3
 800a07a:	4b22      	ldr	r3, [pc, #136]	; (800a104 <send_DHCP_DISCOVER+0x174>)
 800a07c:	7899      	ldrb	r1, [r3, #2]
 800a07e:	1813      	adds	r3, r2, r0
 800a080:	460a      	mov	r2, r1
 800a082:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800a086:	4b1e      	ldr	r3, [pc, #120]	; (800a100 <send_DHCP_DISCOVER+0x170>)
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	88bb      	ldrh	r3, [r7, #4]
 800a08c:	1c59      	adds	r1, r3, #1
 800a08e:	80b9      	strh	r1, [r7, #4]
 800a090:	4618      	mov	r0, r3
 800a092:	4b1c      	ldr	r3, [pc, #112]	; (800a104 <send_DHCP_DISCOVER+0x174>)
 800a094:	78d9      	ldrb	r1, [r3, #3]
 800a096:	1813      	adds	r3, r2, r0
 800a098:	460a      	mov	r2, r1
 800a09a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800a09e:	4b18      	ldr	r3, [pc, #96]	; (800a100 <send_DHCP_DISCOVER+0x170>)
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	88bb      	ldrh	r3, [r7, #4]
 800a0a4:	1c59      	adds	r1, r3, #1
 800a0a6:	80b9      	strh	r1, [r7, #4]
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	4b16      	ldr	r3, [pc, #88]	; (800a104 <send_DHCP_DISCOVER+0x174>)
 800a0ac:	7919      	ldrb	r1, [r3, #4]
 800a0ae:	1813      	adds	r3, r2, r0
 800a0b0:	460a      	mov	r2, r1
 800a0b2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800a0b6:	4b12      	ldr	r3, [pc, #72]	; (800a100 <send_DHCP_DISCOVER+0x170>)
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	88bb      	ldrh	r3, [r7, #4]
 800a0bc:	1c59      	adds	r1, r3, #1
 800a0be:	80b9      	strh	r1, [r7, #4]
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	4b10      	ldr	r3, [pc, #64]	; (800a104 <send_DHCP_DISCOVER+0x174>)
 800a0c4:	7959      	ldrb	r1, [r3, #5]
 800a0c6:	1813      	adds	r3, r2, r0
 800a0c8:	460a      	mov	r2, r1
 800a0ca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 800a0ce:	4b0c      	ldr	r3, [pc, #48]	; (800a100 <send_DHCP_DISCOVER+0x170>)
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	88bb      	ldrh	r3, [r7, #4]
 800a0d4:	1c59      	adds	r1, r3, #1
 800a0d6:	80b9      	strh	r1, [r7, #4]
 800a0d8:	4413      	add	r3, r2
 800a0da:	220c      	movs	r2, #12
 800a0dc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 800a0e0:	4b07      	ldr	r3, [pc, #28]	; (800a100 <send_DHCP_DISCOVER+0x170>)
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	88bb      	ldrh	r3, [r7, #4]
 800a0e6:	1c59      	adds	r1, r3, #1
 800a0e8:	80b9      	strh	r1, [r7, #4]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	80fb      	strh	r3, [r7, #6]
 800a0f6:	e017      	b.n	800a128 <send_DHCP_DISCOVER+0x198>
 800a0f8:	20000968 	.word	0x20000968
 800a0fc:	2000096c 	.word	0x2000096c
 800a100:	20000990 	.word	0x20000990
 800a104:	20000994 	.word	0x20000994
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 800a108:	88f9      	ldrh	r1, [r7, #6]
 800a10a:	4b80      	ldr	r3, [pc, #512]	; (800a30c <send_DHCP_DISCOVER+0x37c>)
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	88bb      	ldrh	r3, [r7, #4]
 800a110:	1c58      	adds	r0, r3, #1
 800a112:	80b8      	strh	r0, [r7, #4]
 800a114:	4618      	mov	r0, r3
 800a116:	4b7e      	ldr	r3, [pc, #504]	; (800a310 <send_DHCP_DISCOVER+0x380>)
 800a118:	5c59      	ldrb	r1, [r3, r1]
 800a11a:	1813      	adds	r3, r2, r0
 800a11c:	460a      	mov	r2, r1
 800a11e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800a122:	88fb      	ldrh	r3, [r7, #6]
 800a124:	3301      	adds	r3, #1
 800a126:	80fb      	strh	r3, [r7, #6]
 800a128:	88fb      	ldrh	r3, [r7, #6]
 800a12a:	4a79      	ldr	r2, [pc, #484]	; (800a310 <send_DHCP_DISCOVER+0x380>)
 800a12c:	5cd3      	ldrb	r3, [r2, r3]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d1ea      	bne.n	800a108 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 800a132:	4b78      	ldr	r3, [pc, #480]	; (800a314 <send_DHCP_DISCOVER+0x384>)
 800a134:	78db      	ldrb	r3, [r3, #3]
 800a136:	091b      	lsrs	r3, r3, #4
 800a138:	b2da      	uxtb	r2, r3
 800a13a:	4b74      	ldr	r3, [pc, #464]	; (800a30c <send_DHCP_DISCOVER+0x37c>)
 800a13c:	681c      	ldr	r4, [r3, #0]
 800a13e:	88bb      	ldrh	r3, [r7, #4]
 800a140:	1c59      	adds	r1, r3, #1
 800a142:	80b9      	strh	r1, [r7, #4]
 800a144:	461d      	mov	r5, r3
 800a146:	4610      	mov	r0, r2
 800a148:	f001 f9e4 	bl	800b514 <NibbleToHex>
 800a14c:	4603      	mov	r3, r0
 800a14e:	461a      	mov	r2, r3
 800a150:	1963      	adds	r3, r4, r5
 800a152:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800a156:	4b6f      	ldr	r3, [pc, #444]	; (800a314 <send_DHCP_DISCOVER+0x384>)
 800a158:	78da      	ldrb	r2, [r3, #3]
 800a15a:	4b6c      	ldr	r3, [pc, #432]	; (800a30c <send_DHCP_DISCOVER+0x37c>)
 800a15c:	681c      	ldr	r4, [r3, #0]
 800a15e:	88bb      	ldrh	r3, [r7, #4]
 800a160:	1c59      	adds	r1, r3, #1
 800a162:	80b9      	strh	r1, [r7, #4]
 800a164:	461d      	mov	r5, r3
 800a166:	4610      	mov	r0, r2
 800a168:	f001 f9d4 	bl	800b514 <NibbleToHex>
 800a16c:	4603      	mov	r3, r0
 800a16e:	461a      	mov	r2, r3
 800a170:	1963      	adds	r3, r4, r5
 800a172:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 800a176:	4b67      	ldr	r3, [pc, #412]	; (800a314 <send_DHCP_DISCOVER+0x384>)
 800a178:	791b      	ldrb	r3, [r3, #4]
 800a17a:	091b      	lsrs	r3, r3, #4
 800a17c:	b2da      	uxtb	r2, r3
 800a17e:	4b63      	ldr	r3, [pc, #396]	; (800a30c <send_DHCP_DISCOVER+0x37c>)
 800a180:	681c      	ldr	r4, [r3, #0]
 800a182:	88bb      	ldrh	r3, [r7, #4]
 800a184:	1c59      	adds	r1, r3, #1
 800a186:	80b9      	strh	r1, [r7, #4]
 800a188:	461d      	mov	r5, r3
 800a18a:	4610      	mov	r0, r2
 800a18c:	f001 f9c2 	bl	800b514 <NibbleToHex>
 800a190:	4603      	mov	r3, r0
 800a192:	461a      	mov	r2, r3
 800a194:	1963      	adds	r3, r4, r5
 800a196:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 800a19a:	4b5e      	ldr	r3, [pc, #376]	; (800a314 <send_DHCP_DISCOVER+0x384>)
 800a19c:	791a      	ldrb	r2, [r3, #4]
 800a19e:	4b5b      	ldr	r3, [pc, #364]	; (800a30c <send_DHCP_DISCOVER+0x37c>)
 800a1a0:	681c      	ldr	r4, [r3, #0]
 800a1a2:	88bb      	ldrh	r3, [r7, #4]
 800a1a4:	1c59      	adds	r1, r3, #1
 800a1a6:	80b9      	strh	r1, [r7, #4]
 800a1a8:	461d      	mov	r5, r3
 800a1aa:	4610      	mov	r0, r2
 800a1ac:	f001 f9b2 	bl	800b514 <NibbleToHex>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	1963      	adds	r3, r4, r5
 800a1b6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 800a1ba:	4b56      	ldr	r3, [pc, #344]	; (800a314 <send_DHCP_DISCOVER+0x384>)
 800a1bc:	795b      	ldrb	r3, [r3, #5]
 800a1be:	091b      	lsrs	r3, r3, #4
 800a1c0:	b2da      	uxtb	r2, r3
 800a1c2:	4b52      	ldr	r3, [pc, #328]	; (800a30c <send_DHCP_DISCOVER+0x37c>)
 800a1c4:	681c      	ldr	r4, [r3, #0]
 800a1c6:	88bb      	ldrh	r3, [r7, #4]
 800a1c8:	1c59      	adds	r1, r3, #1
 800a1ca:	80b9      	strh	r1, [r7, #4]
 800a1cc:	461d      	mov	r5, r3
 800a1ce:	4610      	mov	r0, r2
 800a1d0:	f001 f9a0 	bl	800b514 <NibbleToHex>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	1963      	adds	r3, r4, r5
 800a1da:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 800a1de:	4b4d      	ldr	r3, [pc, #308]	; (800a314 <send_DHCP_DISCOVER+0x384>)
 800a1e0:	795a      	ldrb	r2, [r3, #5]
 800a1e2:	4b4a      	ldr	r3, [pc, #296]	; (800a30c <send_DHCP_DISCOVER+0x37c>)
 800a1e4:	681c      	ldr	r4, [r3, #0]
 800a1e6:	88bb      	ldrh	r3, [r7, #4]
 800a1e8:	1c59      	adds	r1, r3, #1
 800a1ea:	80b9      	strh	r1, [r7, #4]
 800a1ec:	461d      	mov	r5, r3
 800a1ee:	4610      	mov	r0, r2
 800a1f0:	f001 f990 	bl	800b514 <NibbleToHex>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	1963      	adds	r3, r4, r5
 800a1fa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 800a1fe:	88fb      	ldrh	r3, [r7, #6]
 800a200:	b2d9      	uxtb	r1, r3
 800a202:	4b42      	ldr	r3, [pc, #264]	; (800a30c <send_DHCP_DISCOVER+0x37c>)
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	88b8      	ldrh	r0, [r7, #4]
 800a208:	88fb      	ldrh	r3, [r7, #6]
 800a20a:	3307      	adds	r3, #7
 800a20c:	1ac3      	subs	r3, r0, r3
 800a20e:	3106      	adds	r1, #6
 800a210:	b2c9      	uxtb	r1, r1
 800a212:	4413      	add	r3, r2
 800a214:	460a      	mov	r2, r1
 800a216:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800a21a:	4b3c      	ldr	r3, [pc, #240]	; (800a30c <send_DHCP_DISCOVER+0x37c>)
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	88bb      	ldrh	r3, [r7, #4]
 800a220:	1c59      	adds	r1, r3, #1
 800a222:	80b9      	strh	r1, [r7, #4]
 800a224:	4413      	add	r3, r2
 800a226:	2237      	movs	r2, #55	; 0x37
 800a228:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 800a22c:	4b37      	ldr	r3, [pc, #220]	; (800a30c <send_DHCP_DISCOVER+0x37c>)
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	88bb      	ldrh	r3, [r7, #4]
 800a232:	1c59      	adds	r1, r3, #1
 800a234:	80b9      	strh	r1, [r7, #4]
 800a236:	4413      	add	r3, r2
 800a238:	2206      	movs	r2, #6
 800a23a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 800a23e:	4b33      	ldr	r3, [pc, #204]	; (800a30c <send_DHCP_DISCOVER+0x37c>)
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	88bb      	ldrh	r3, [r7, #4]
 800a244:	1c59      	adds	r1, r3, #1
 800a246:	80b9      	strh	r1, [r7, #4]
 800a248:	4413      	add	r3, r2
 800a24a:	2201      	movs	r2, #1
 800a24c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 800a250:	4b2e      	ldr	r3, [pc, #184]	; (800a30c <send_DHCP_DISCOVER+0x37c>)
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	88bb      	ldrh	r3, [r7, #4]
 800a256:	1c59      	adds	r1, r3, #1
 800a258:	80b9      	strh	r1, [r7, #4]
 800a25a:	4413      	add	r3, r2
 800a25c:	2203      	movs	r2, #3
 800a25e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 800a262:	4b2a      	ldr	r3, [pc, #168]	; (800a30c <send_DHCP_DISCOVER+0x37c>)
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	88bb      	ldrh	r3, [r7, #4]
 800a268:	1c59      	adds	r1, r3, #1
 800a26a:	80b9      	strh	r1, [r7, #4]
 800a26c:	4413      	add	r3, r2
 800a26e:	2206      	movs	r2, #6
 800a270:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 800a274:	4b25      	ldr	r3, [pc, #148]	; (800a30c <send_DHCP_DISCOVER+0x37c>)
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	88bb      	ldrh	r3, [r7, #4]
 800a27a:	1c59      	adds	r1, r3, #1
 800a27c:	80b9      	strh	r1, [r7, #4]
 800a27e:	4413      	add	r3, r2
 800a280:	220f      	movs	r2, #15
 800a282:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 800a286:	4b21      	ldr	r3, [pc, #132]	; (800a30c <send_DHCP_DISCOVER+0x37c>)
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	88bb      	ldrh	r3, [r7, #4]
 800a28c:	1c59      	adds	r1, r3, #1
 800a28e:	80b9      	strh	r1, [r7, #4]
 800a290:	4413      	add	r3, r2
 800a292:	223a      	movs	r2, #58	; 0x3a
 800a294:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 800a298:	4b1c      	ldr	r3, [pc, #112]	; (800a30c <send_DHCP_DISCOVER+0x37c>)
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	88bb      	ldrh	r3, [r7, #4]
 800a29e:	1c59      	adds	r1, r3, #1
 800a2a0:	80b9      	strh	r1, [r7, #4]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	223b      	movs	r2, #59	; 0x3b
 800a2a6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 800a2aa:	4b18      	ldr	r3, [pc, #96]	; (800a30c <send_DHCP_DISCOVER+0x37c>)
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	88bb      	ldrh	r3, [r7, #4]
 800a2b0:	1c59      	adds	r1, r3, #1
 800a2b2:	80b9      	strh	r1, [r7, #4]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	22ff      	movs	r2, #255	; 0xff
 800a2b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 800a2bc:	88bb      	ldrh	r3, [r7, #4]
 800a2be:	80fb      	strh	r3, [r7, #6]
 800a2c0:	e009      	b.n	800a2d6 <send_DHCP_DISCOVER+0x346>
 800a2c2:	4b12      	ldr	r3, [pc, #72]	; (800a30c <send_DHCP_DISCOVER+0x37c>)
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	88fb      	ldrh	r3, [r7, #6]
 800a2c8:	4413      	add	r3, r2
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800a2d0:	88fb      	ldrh	r3, [r7, #6]
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	80fb      	strh	r3, [r7, #6]
 800a2d6:	88fb      	ldrh	r3, [r7, #6]
 800a2d8:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 800a2dc:	d3f1      	bcc.n	800a2c2 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 800a2de:	23ff      	movs	r3, #255	; 0xff
 800a2e0:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 800a2e2:	23ff      	movs	r3, #255	; 0xff
 800a2e4:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 800a2e6:	23ff      	movs	r3, #255	; 0xff
 800a2e8:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 800a2ea:	23ff      	movs	r3, #255	; 0xff
 800a2ec:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800a2ee:	4b0a      	ldr	r3, [pc, #40]	; (800a318 <send_DHCP_DISCOVER+0x388>)
 800a2f0:	7818      	ldrb	r0, [r3, #0]
 800a2f2:	4b06      	ldr	r3, [pc, #24]	; (800a30c <send_DHCP_DISCOVER+0x37c>)
 800a2f4:	6819      	ldr	r1, [r3, #0]
 800a2f6:	463b      	mov	r3, r7
 800a2f8:	2243      	movs	r2, #67	; 0x43
 800a2fa:	9200      	str	r2, [sp, #0]
 800a2fc:	f44f 7209 	mov.w	r2, #548	; 0x224
 800a300:	f7fe fbfc 	bl	8008afc <sendto>
}
 800a304:	bf00      	nop
 800a306:	3708      	adds	r7, #8
 800a308:	46bd      	mov	sp, r7
 800a30a:	bdb0      	pop	{r4, r5, r7, pc}
 800a30c:	20000990 	.word	0x20000990
 800a310:	200000f8 	.word	0x200000f8
 800a314:	20000994 	.word	0x20000994
 800a318:	20000965 	.word	0x20000965

0800a31c <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 800a31c:	b5b0      	push	{r4, r5, r7, lr}
 800a31e:	b086      	sub	sp, #24
 800a320:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 800a322:	2300      	movs	r3, #0
 800a324:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 800a326:	f7ff fd3d 	bl	8009da4 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 800a32a:	4b1b      	ldr	r3, [pc, #108]	; (800a398 <send_DHCP_REQUEST+0x7c>)
 800a32c:	f993 3000 	ldrsb.w	r3, [r3]
 800a330:	2b03      	cmp	r3, #3
 800a332:	d004      	beq.n	800a33e <send_DHCP_REQUEST+0x22>
 800a334:	4b18      	ldr	r3, [pc, #96]	; (800a398 <send_DHCP_REQUEST+0x7c>)
 800a336:	f993 3000 	ldrsb.w	r3, [r3]
 800a33a:	2b04      	cmp	r3, #4
 800a33c:	d134      	bne.n	800a3a8 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 800a33e:	4b17      	ldr	r3, [pc, #92]	; (800a39c <send_DHCP_REQUEST+0x80>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	330a      	adds	r3, #10
 800a344:	2200      	movs	r2, #0
 800a346:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 800a348:	4b14      	ldr	r3, [pc, #80]	; (800a39c <send_DHCP_REQUEST+0x80>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	330a      	adds	r3, #10
 800a34e:	3301      	adds	r3, #1
 800a350:	2200      	movs	r2, #0
 800a352:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 800a354:	4b11      	ldr	r3, [pc, #68]	; (800a39c <send_DHCP_REQUEST+0x80>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a11      	ldr	r2, [pc, #68]	; (800a3a0 <send_DHCP_REQUEST+0x84>)
 800a35a:	7812      	ldrb	r2, [r2, #0]
 800a35c:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 800a35e:	4b0f      	ldr	r3, [pc, #60]	; (800a39c <send_DHCP_REQUEST+0x80>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a0f      	ldr	r2, [pc, #60]	; (800a3a0 <send_DHCP_REQUEST+0x84>)
 800a364:	7852      	ldrb	r2, [r2, #1]
 800a366:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 800a368:	4b0c      	ldr	r3, [pc, #48]	; (800a39c <send_DHCP_REQUEST+0x80>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a0c      	ldr	r2, [pc, #48]	; (800a3a0 <send_DHCP_REQUEST+0x84>)
 800a36e:	7892      	ldrb	r2, [r2, #2]
 800a370:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 800a372:	4b0a      	ldr	r3, [pc, #40]	; (800a39c <send_DHCP_REQUEST+0x80>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a0a      	ldr	r2, [pc, #40]	; (800a3a0 <send_DHCP_REQUEST+0x84>)
 800a378:	78d2      	ldrb	r2, [r2, #3]
 800a37a:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 800a37c:	4b09      	ldr	r3, [pc, #36]	; (800a3a4 <send_DHCP_REQUEST+0x88>)
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 800a382:	4b08      	ldr	r3, [pc, #32]	; (800a3a4 <send_DHCP_REQUEST+0x88>)
 800a384:	785b      	ldrb	r3, [r3, #1]
 800a386:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 800a388:	4b06      	ldr	r3, [pc, #24]	; (800a3a4 <send_DHCP_REQUEST+0x88>)
 800a38a:	789b      	ldrb	r3, [r3, #2]
 800a38c:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 800a38e:	4b05      	ldr	r3, [pc, #20]	; (800a3a4 <send_DHCP_REQUEST+0x88>)
 800a390:	78db      	ldrb	r3, [r3, #3]
 800a392:	71fb      	strb	r3, [r7, #7]
 800a394:	e010      	b.n	800a3b8 <send_DHCP_REQUEST+0x9c>
 800a396:	bf00      	nop
 800a398:	20000984 	.word	0x20000984
 800a39c:	20000990 	.word	0x20000990
 800a3a0:	20000974 	.word	0x20000974
 800a3a4:	20000968 	.word	0x20000968
   }
   else
   {
   	ip[0] = 255;
 800a3a8:	23ff      	movs	r3, #255	; 0xff
 800a3aa:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 800a3ac:	23ff      	movs	r3, #255	; 0xff
 800a3ae:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 800a3b0:	23ff      	movs	r3, #255	; 0xff
 800a3b2:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 800a3b4:	23ff      	movs	r3, #255	; 0xff
 800a3b6:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 800a3b8:	2304      	movs	r3, #4
 800a3ba:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800a3bc:	4b8d      	ldr	r3, [pc, #564]	; (800a5f4 <send_DHCP_REQUEST+0x2d8>)
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	897b      	ldrh	r3, [r7, #10]
 800a3c2:	1c59      	adds	r1, r3, #1
 800a3c4:	8179      	strh	r1, [r7, #10]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	2235      	movs	r2, #53	; 0x35
 800a3ca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800a3ce:	4b89      	ldr	r3, [pc, #548]	; (800a5f4 <send_DHCP_REQUEST+0x2d8>)
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	897b      	ldrh	r3, [r7, #10]
 800a3d4:	1c59      	adds	r1, r3, #1
 800a3d6:	8179      	strh	r1, [r7, #10]
 800a3d8:	4413      	add	r3, r2
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 800a3e0:	4b84      	ldr	r3, [pc, #528]	; (800a5f4 <send_DHCP_REQUEST+0x2d8>)
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	897b      	ldrh	r3, [r7, #10]
 800a3e6:	1c59      	adds	r1, r3, #1
 800a3e8:	8179      	strh	r1, [r7, #10]
 800a3ea:	4413      	add	r3, r2
 800a3ec:	2203      	movs	r2, #3
 800a3ee:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800a3f2:	4b80      	ldr	r3, [pc, #512]	; (800a5f4 <send_DHCP_REQUEST+0x2d8>)
 800a3f4:	681a      	ldr	r2, [r3, #0]
 800a3f6:	897b      	ldrh	r3, [r7, #10]
 800a3f8:	1c59      	adds	r1, r3, #1
 800a3fa:	8179      	strh	r1, [r7, #10]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	223d      	movs	r2, #61	; 0x3d
 800a400:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 800a404:	4b7b      	ldr	r3, [pc, #492]	; (800a5f4 <send_DHCP_REQUEST+0x2d8>)
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	897b      	ldrh	r3, [r7, #10]
 800a40a:	1c59      	adds	r1, r3, #1
 800a40c:	8179      	strh	r1, [r7, #10]
 800a40e:	4413      	add	r3, r2
 800a410:	2207      	movs	r2, #7
 800a412:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800a416:	4b77      	ldr	r3, [pc, #476]	; (800a5f4 <send_DHCP_REQUEST+0x2d8>)
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	897b      	ldrh	r3, [r7, #10]
 800a41c:	1c59      	adds	r1, r3, #1
 800a41e:	8179      	strh	r1, [r7, #10]
 800a420:	4413      	add	r3, r2
 800a422:	2201      	movs	r2, #1
 800a424:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800a428:	4b72      	ldr	r3, [pc, #456]	; (800a5f4 <send_DHCP_REQUEST+0x2d8>)
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	897b      	ldrh	r3, [r7, #10]
 800a42e:	1c59      	adds	r1, r3, #1
 800a430:	8179      	strh	r1, [r7, #10]
 800a432:	4618      	mov	r0, r3
 800a434:	4b70      	ldr	r3, [pc, #448]	; (800a5f8 <send_DHCP_REQUEST+0x2dc>)
 800a436:	7819      	ldrb	r1, [r3, #0]
 800a438:	1813      	adds	r3, r2, r0
 800a43a:	460a      	mov	r2, r1
 800a43c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800a440:	4b6c      	ldr	r3, [pc, #432]	; (800a5f4 <send_DHCP_REQUEST+0x2d8>)
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	897b      	ldrh	r3, [r7, #10]
 800a446:	1c59      	adds	r1, r3, #1
 800a448:	8179      	strh	r1, [r7, #10]
 800a44a:	4618      	mov	r0, r3
 800a44c:	4b6a      	ldr	r3, [pc, #424]	; (800a5f8 <send_DHCP_REQUEST+0x2dc>)
 800a44e:	7859      	ldrb	r1, [r3, #1]
 800a450:	1813      	adds	r3, r2, r0
 800a452:	460a      	mov	r2, r1
 800a454:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800a458:	4b66      	ldr	r3, [pc, #408]	; (800a5f4 <send_DHCP_REQUEST+0x2d8>)
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	897b      	ldrh	r3, [r7, #10]
 800a45e:	1c59      	adds	r1, r3, #1
 800a460:	8179      	strh	r1, [r7, #10]
 800a462:	4618      	mov	r0, r3
 800a464:	4b64      	ldr	r3, [pc, #400]	; (800a5f8 <send_DHCP_REQUEST+0x2dc>)
 800a466:	7899      	ldrb	r1, [r3, #2]
 800a468:	1813      	adds	r3, r2, r0
 800a46a:	460a      	mov	r2, r1
 800a46c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800a470:	4b60      	ldr	r3, [pc, #384]	; (800a5f4 <send_DHCP_REQUEST+0x2d8>)
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	897b      	ldrh	r3, [r7, #10]
 800a476:	1c59      	adds	r1, r3, #1
 800a478:	8179      	strh	r1, [r7, #10]
 800a47a:	4618      	mov	r0, r3
 800a47c:	4b5e      	ldr	r3, [pc, #376]	; (800a5f8 <send_DHCP_REQUEST+0x2dc>)
 800a47e:	78d9      	ldrb	r1, [r3, #3]
 800a480:	1813      	adds	r3, r2, r0
 800a482:	460a      	mov	r2, r1
 800a484:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800a488:	4b5a      	ldr	r3, [pc, #360]	; (800a5f4 <send_DHCP_REQUEST+0x2d8>)
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	897b      	ldrh	r3, [r7, #10]
 800a48e:	1c59      	adds	r1, r3, #1
 800a490:	8179      	strh	r1, [r7, #10]
 800a492:	4618      	mov	r0, r3
 800a494:	4b58      	ldr	r3, [pc, #352]	; (800a5f8 <send_DHCP_REQUEST+0x2dc>)
 800a496:	7919      	ldrb	r1, [r3, #4]
 800a498:	1813      	adds	r3, r2, r0
 800a49a:	460a      	mov	r2, r1
 800a49c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800a4a0:	4b54      	ldr	r3, [pc, #336]	; (800a5f4 <send_DHCP_REQUEST+0x2d8>)
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	897b      	ldrh	r3, [r7, #10]
 800a4a6:	1c59      	adds	r1, r3, #1
 800a4a8:	8179      	strh	r1, [r7, #10]
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	4b52      	ldr	r3, [pc, #328]	; (800a5f8 <send_DHCP_REQUEST+0x2dc>)
 800a4ae:	7959      	ldrb	r1, [r3, #5]
 800a4b0:	1813      	adds	r3, r2, r0
 800a4b2:	460a      	mov	r2, r1
 800a4b4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 800a4b8:	79fb      	ldrb	r3, [r7, #7]
 800a4ba:	2bff      	cmp	r3, #255	; 0xff
 800a4bc:	f040 8084 	bne.w	800a5c8 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 800a4c0:	4b4c      	ldr	r3, [pc, #304]	; (800a5f4 <send_DHCP_REQUEST+0x2d8>)
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	897b      	ldrh	r3, [r7, #10]
 800a4c6:	1c59      	adds	r1, r3, #1
 800a4c8:	8179      	strh	r1, [r7, #10]
 800a4ca:	4413      	add	r3, r2
 800a4cc:	2232      	movs	r2, #50	; 0x32
 800a4ce:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 800a4d2:	4b48      	ldr	r3, [pc, #288]	; (800a5f4 <send_DHCP_REQUEST+0x2d8>)
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	897b      	ldrh	r3, [r7, #10]
 800a4d8:	1c59      	adds	r1, r3, #1
 800a4da:	8179      	strh	r1, [r7, #10]
 800a4dc:	4413      	add	r3, r2
 800a4de:	2204      	movs	r2, #4
 800a4e0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 800a4e4:	4b43      	ldr	r3, [pc, #268]	; (800a5f4 <send_DHCP_REQUEST+0x2d8>)
 800a4e6:	681a      	ldr	r2, [r3, #0]
 800a4e8:	897b      	ldrh	r3, [r7, #10]
 800a4ea:	1c59      	adds	r1, r3, #1
 800a4ec:	8179      	strh	r1, [r7, #10]
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	4b42      	ldr	r3, [pc, #264]	; (800a5fc <send_DHCP_REQUEST+0x2e0>)
 800a4f2:	7819      	ldrb	r1, [r3, #0]
 800a4f4:	1813      	adds	r3, r2, r0
 800a4f6:	460a      	mov	r2, r1
 800a4f8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 800a4fc:	4b3d      	ldr	r3, [pc, #244]	; (800a5f4 <send_DHCP_REQUEST+0x2d8>)
 800a4fe:	681a      	ldr	r2, [r3, #0]
 800a500:	897b      	ldrh	r3, [r7, #10]
 800a502:	1c59      	adds	r1, r3, #1
 800a504:	8179      	strh	r1, [r7, #10]
 800a506:	4618      	mov	r0, r3
 800a508:	4b3c      	ldr	r3, [pc, #240]	; (800a5fc <send_DHCP_REQUEST+0x2e0>)
 800a50a:	7859      	ldrb	r1, [r3, #1]
 800a50c:	1813      	adds	r3, r2, r0
 800a50e:	460a      	mov	r2, r1
 800a510:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 800a514:	4b37      	ldr	r3, [pc, #220]	; (800a5f4 <send_DHCP_REQUEST+0x2d8>)
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	897b      	ldrh	r3, [r7, #10]
 800a51a:	1c59      	adds	r1, r3, #1
 800a51c:	8179      	strh	r1, [r7, #10]
 800a51e:	4618      	mov	r0, r3
 800a520:	4b36      	ldr	r3, [pc, #216]	; (800a5fc <send_DHCP_REQUEST+0x2e0>)
 800a522:	7899      	ldrb	r1, [r3, #2]
 800a524:	1813      	adds	r3, r2, r0
 800a526:	460a      	mov	r2, r1
 800a528:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 800a52c:	4b31      	ldr	r3, [pc, #196]	; (800a5f4 <send_DHCP_REQUEST+0x2d8>)
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	897b      	ldrh	r3, [r7, #10]
 800a532:	1c59      	adds	r1, r3, #1
 800a534:	8179      	strh	r1, [r7, #10]
 800a536:	4618      	mov	r0, r3
 800a538:	4b30      	ldr	r3, [pc, #192]	; (800a5fc <send_DHCP_REQUEST+0x2e0>)
 800a53a:	78d9      	ldrb	r1, [r3, #3]
 800a53c:	1813      	adds	r3, r2, r0
 800a53e:	460a      	mov	r2, r1
 800a540:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 800a544:	4b2b      	ldr	r3, [pc, #172]	; (800a5f4 <send_DHCP_REQUEST+0x2d8>)
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	897b      	ldrh	r3, [r7, #10]
 800a54a:	1c59      	adds	r1, r3, #1
 800a54c:	8179      	strh	r1, [r7, #10]
 800a54e:	4413      	add	r3, r2
 800a550:	2236      	movs	r2, #54	; 0x36
 800a552:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 800a556:	4b27      	ldr	r3, [pc, #156]	; (800a5f4 <send_DHCP_REQUEST+0x2d8>)
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	897b      	ldrh	r3, [r7, #10]
 800a55c:	1c59      	adds	r1, r3, #1
 800a55e:	8179      	strh	r1, [r7, #10]
 800a560:	4413      	add	r3, r2
 800a562:	2204      	movs	r2, #4
 800a564:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 800a568:	4b22      	ldr	r3, [pc, #136]	; (800a5f4 <send_DHCP_REQUEST+0x2d8>)
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	897b      	ldrh	r3, [r7, #10]
 800a56e:	1c59      	adds	r1, r3, #1
 800a570:	8179      	strh	r1, [r7, #10]
 800a572:	4618      	mov	r0, r3
 800a574:	4b22      	ldr	r3, [pc, #136]	; (800a600 <send_DHCP_REQUEST+0x2e4>)
 800a576:	7819      	ldrb	r1, [r3, #0]
 800a578:	1813      	adds	r3, r2, r0
 800a57a:	460a      	mov	r2, r1
 800a57c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 800a580:	4b1c      	ldr	r3, [pc, #112]	; (800a5f4 <send_DHCP_REQUEST+0x2d8>)
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	897b      	ldrh	r3, [r7, #10]
 800a586:	1c59      	adds	r1, r3, #1
 800a588:	8179      	strh	r1, [r7, #10]
 800a58a:	4618      	mov	r0, r3
 800a58c:	4b1c      	ldr	r3, [pc, #112]	; (800a600 <send_DHCP_REQUEST+0x2e4>)
 800a58e:	7859      	ldrb	r1, [r3, #1]
 800a590:	1813      	adds	r3, r2, r0
 800a592:	460a      	mov	r2, r1
 800a594:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 800a598:	4b16      	ldr	r3, [pc, #88]	; (800a5f4 <send_DHCP_REQUEST+0x2d8>)
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	897b      	ldrh	r3, [r7, #10]
 800a59e:	1c59      	adds	r1, r3, #1
 800a5a0:	8179      	strh	r1, [r7, #10]
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	4b16      	ldr	r3, [pc, #88]	; (800a600 <send_DHCP_REQUEST+0x2e4>)
 800a5a6:	7899      	ldrb	r1, [r3, #2]
 800a5a8:	1813      	adds	r3, r2, r0
 800a5aa:	460a      	mov	r2, r1
 800a5ac:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 800a5b0:	4b10      	ldr	r3, [pc, #64]	; (800a5f4 <send_DHCP_REQUEST+0x2d8>)
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	897b      	ldrh	r3, [r7, #10]
 800a5b6:	1c59      	adds	r1, r3, #1
 800a5b8:	8179      	strh	r1, [r7, #10]
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	4b10      	ldr	r3, [pc, #64]	; (800a600 <send_DHCP_REQUEST+0x2e4>)
 800a5be:	78d9      	ldrb	r1, [r3, #3]
 800a5c0:	1813      	adds	r3, r2, r0
 800a5c2:	460a      	mov	r2, r1
 800a5c4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 800a5c8:	4b0a      	ldr	r3, [pc, #40]	; (800a5f4 <send_DHCP_REQUEST+0x2d8>)
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	897b      	ldrh	r3, [r7, #10]
 800a5ce:	1c59      	adds	r1, r3, #1
 800a5d0:	8179      	strh	r1, [r7, #10]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	220c      	movs	r2, #12
 800a5d6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 800a5da:	4b06      	ldr	r3, [pc, #24]	; (800a5f4 <send_DHCP_REQUEST+0x2d8>)
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	897b      	ldrh	r3, [r7, #10]
 800a5e0:	1c59      	adds	r1, r3, #1
 800a5e2:	8179      	strh	r1, [r7, #10]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	60fb      	str	r3, [r7, #12]
 800a5f0:	e019      	b.n	800a626 <send_DHCP_REQUEST+0x30a>
 800a5f2:	bf00      	nop
 800a5f4:	20000990 	.word	0x20000990
 800a5f8:	20000994 	.word	0x20000994
 800a5fc:	20000974 	.word	0x20000974
 800a600:	20000968 	.word	0x20000968
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 800a604:	4b86      	ldr	r3, [pc, #536]	; (800a820 <send_DHCP_REQUEST+0x504>)
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	897b      	ldrh	r3, [r7, #10]
 800a60a:	1c59      	adds	r1, r3, #1
 800a60c:	8179      	strh	r1, [r7, #10]
 800a60e:	4618      	mov	r0, r3
 800a610:	4984      	ldr	r1, [pc, #528]	; (800a824 <send_DHCP_REQUEST+0x508>)
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	440b      	add	r3, r1
 800a616:	7819      	ldrb	r1, [r3, #0]
 800a618:	1813      	adds	r3, r2, r0
 800a61a:	460a      	mov	r2, r1
 800a61c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	3301      	adds	r3, #1
 800a624:	60fb      	str	r3, [r7, #12]
 800a626:	4a7f      	ldr	r2, [pc, #508]	; (800a824 <send_DHCP_REQUEST+0x508>)
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	4413      	add	r3, r2
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1e8      	bne.n	800a604 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 800a632:	4b7d      	ldr	r3, [pc, #500]	; (800a828 <send_DHCP_REQUEST+0x50c>)
 800a634:	78db      	ldrb	r3, [r3, #3]
 800a636:	091b      	lsrs	r3, r3, #4
 800a638:	b2da      	uxtb	r2, r3
 800a63a:	4b79      	ldr	r3, [pc, #484]	; (800a820 <send_DHCP_REQUEST+0x504>)
 800a63c:	681c      	ldr	r4, [r3, #0]
 800a63e:	897b      	ldrh	r3, [r7, #10]
 800a640:	1c59      	adds	r1, r3, #1
 800a642:	8179      	strh	r1, [r7, #10]
 800a644:	461d      	mov	r5, r3
 800a646:	4610      	mov	r0, r2
 800a648:	f000 ff64 	bl	800b514 <NibbleToHex>
 800a64c:	4603      	mov	r3, r0
 800a64e:	461a      	mov	r2, r3
 800a650:	1963      	adds	r3, r4, r5
 800a652:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800a656:	4b74      	ldr	r3, [pc, #464]	; (800a828 <send_DHCP_REQUEST+0x50c>)
 800a658:	78da      	ldrb	r2, [r3, #3]
 800a65a:	4b71      	ldr	r3, [pc, #452]	; (800a820 <send_DHCP_REQUEST+0x504>)
 800a65c:	681c      	ldr	r4, [r3, #0]
 800a65e:	897b      	ldrh	r3, [r7, #10]
 800a660:	1c59      	adds	r1, r3, #1
 800a662:	8179      	strh	r1, [r7, #10]
 800a664:	461d      	mov	r5, r3
 800a666:	4610      	mov	r0, r2
 800a668:	f000 ff54 	bl	800b514 <NibbleToHex>
 800a66c:	4603      	mov	r3, r0
 800a66e:	461a      	mov	r2, r3
 800a670:	1963      	adds	r3, r4, r5
 800a672:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 800a676:	4b6c      	ldr	r3, [pc, #432]	; (800a828 <send_DHCP_REQUEST+0x50c>)
 800a678:	791b      	ldrb	r3, [r3, #4]
 800a67a:	091b      	lsrs	r3, r3, #4
 800a67c:	b2da      	uxtb	r2, r3
 800a67e:	4b68      	ldr	r3, [pc, #416]	; (800a820 <send_DHCP_REQUEST+0x504>)
 800a680:	681c      	ldr	r4, [r3, #0]
 800a682:	897b      	ldrh	r3, [r7, #10]
 800a684:	1c59      	adds	r1, r3, #1
 800a686:	8179      	strh	r1, [r7, #10]
 800a688:	461d      	mov	r5, r3
 800a68a:	4610      	mov	r0, r2
 800a68c:	f000 ff42 	bl	800b514 <NibbleToHex>
 800a690:	4603      	mov	r3, r0
 800a692:	461a      	mov	r2, r3
 800a694:	1963      	adds	r3, r4, r5
 800a696:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 800a69a:	4b63      	ldr	r3, [pc, #396]	; (800a828 <send_DHCP_REQUEST+0x50c>)
 800a69c:	791a      	ldrb	r2, [r3, #4]
 800a69e:	4b60      	ldr	r3, [pc, #384]	; (800a820 <send_DHCP_REQUEST+0x504>)
 800a6a0:	681c      	ldr	r4, [r3, #0]
 800a6a2:	897b      	ldrh	r3, [r7, #10]
 800a6a4:	1c59      	adds	r1, r3, #1
 800a6a6:	8179      	strh	r1, [r7, #10]
 800a6a8:	461d      	mov	r5, r3
 800a6aa:	4610      	mov	r0, r2
 800a6ac:	f000 ff32 	bl	800b514 <NibbleToHex>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	1963      	adds	r3, r4, r5
 800a6b6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 800a6ba:	4b5b      	ldr	r3, [pc, #364]	; (800a828 <send_DHCP_REQUEST+0x50c>)
 800a6bc:	795b      	ldrb	r3, [r3, #5]
 800a6be:	091b      	lsrs	r3, r3, #4
 800a6c0:	b2da      	uxtb	r2, r3
 800a6c2:	4b57      	ldr	r3, [pc, #348]	; (800a820 <send_DHCP_REQUEST+0x504>)
 800a6c4:	681c      	ldr	r4, [r3, #0]
 800a6c6:	897b      	ldrh	r3, [r7, #10]
 800a6c8:	1c59      	adds	r1, r3, #1
 800a6ca:	8179      	strh	r1, [r7, #10]
 800a6cc:	461d      	mov	r5, r3
 800a6ce:	4610      	mov	r0, r2
 800a6d0:	f000 ff20 	bl	800b514 <NibbleToHex>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	1963      	adds	r3, r4, r5
 800a6da:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 800a6de:	4b52      	ldr	r3, [pc, #328]	; (800a828 <send_DHCP_REQUEST+0x50c>)
 800a6e0:	795a      	ldrb	r2, [r3, #5]
 800a6e2:	4b4f      	ldr	r3, [pc, #316]	; (800a820 <send_DHCP_REQUEST+0x504>)
 800a6e4:	681c      	ldr	r4, [r3, #0]
 800a6e6:	897b      	ldrh	r3, [r7, #10]
 800a6e8:	1c59      	adds	r1, r3, #1
 800a6ea:	8179      	strh	r1, [r7, #10]
 800a6ec:	461d      	mov	r5, r3
 800a6ee:	4610      	mov	r0, r2
 800a6f0:	f000 ff10 	bl	800b514 <NibbleToHex>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	1963      	adds	r3, r4, r5
 800a6fa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	b2d9      	uxtb	r1, r3
 800a702:	4b47      	ldr	r3, [pc, #284]	; (800a820 <send_DHCP_REQUEST+0x504>)
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	8978      	ldrh	r0, [r7, #10]
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	3307      	adds	r3, #7
 800a70c:	1ac3      	subs	r3, r0, r3
 800a70e:	3106      	adds	r1, #6
 800a710:	b2c9      	uxtb	r1, r1
 800a712:	4413      	add	r3, r2
 800a714:	460a      	mov	r2, r1
 800a716:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800a71a:	4b41      	ldr	r3, [pc, #260]	; (800a820 <send_DHCP_REQUEST+0x504>)
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	897b      	ldrh	r3, [r7, #10]
 800a720:	1c59      	adds	r1, r3, #1
 800a722:	8179      	strh	r1, [r7, #10]
 800a724:	4413      	add	r3, r2
 800a726:	2237      	movs	r2, #55	; 0x37
 800a728:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 800a72c:	4b3c      	ldr	r3, [pc, #240]	; (800a820 <send_DHCP_REQUEST+0x504>)
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	897b      	ldrh	r3, [r7, #10]
 800a732:	1c59      	adds	r1, r3, #1
 800a734:	8179      	strh	r1, [r7, #10]
 800a736:	4413      	add	r3, r2
 800a738:	2208      	movs	r2, #8
 800a73a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 800a73e:	4b38      	ldr	r3, [pc, #224]	; (800a820 <send_DHCP_REQUEST+0x504>)
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	897b      	ldrh	r3, [r7, #10]
 800a744:	1c59      	adds	r1, r3, #1
 800a746:	8179      	strh	r1, [r7, #10]
 800a748:	4413      	add	r3, r2
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 800a750:	4b33      	ldr	r3, [pc, #204]	; (800a820 <send_DHCP_REQUEST+0x504>)
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	897b      	ldrh	r3, [r7, #10]
 800a756:	1c59      	adds	r1, r3, #1
 800a758:	8179      	strh	r1, [r7, #10]
 800a75a:	4413      	add	r3, r2
 800a75c:	2203      	movs	r2, #3
 800a75e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 800a762:	4b2f      	ldr	r3, [pc, #188]	; (800a820 <send_DHCP_REQUEST+0x504>)
 800a764:	681a      	ldr	r2, [r3, #0]
 800a766:	897b      	ldrh	r3, [r7, #10]
 800a768:	1c59      	adds	r1, r3, #1
 800a76a:	8179      	strh	r1, [r7, #10]
 800a76c:	4413      	add	r3, r2
 800a76e:	2206      	movs	r2, #6
 800a770:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 800a774:	4b2a      	ldr	r3, [pc, #168]	; (800a820 <send_DHCP_REQUEST+0x504>)
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	897b      	ldrh	r3, [r7, #10]
 800a77a:	1c59      	adds	r1, r3, #1
 800a77c:	8179      	strh	r1, [r7, #10]
 800a77e:	4413      	add	r3, r2
 800a780:	220f      	movs	r2, #15
 800a782:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 800a786:	4b26      	ldr	r3, [pc, #152]	; (800a820 <send_DHCP_REQUEST+0x504>)
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	897b      	ldrh	r3, [r7, #10]
 800a78c:	1c59      	adds	r1, r3, #1
 800a78e:	8179      	strh	r1, [r7, #10]
 800a790:	4413      	add	r3, r2
 800a792:	223a      	movs	r2, #58	; 0x3a
 800a794:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 800a798:	4b21      	ldr	r3, [pc, #132]	; (800a820 <send_DHCP_REQUEST+0x504>)
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	897b      	ldrh	r3, [r7, #10]
 800a79e:	1c59      	adds	r1, r3, #1
 800a7a0:	8179      	strh	r1, [r7, #10]
 800a7a2:	4413      	add	r3, r2
 800a7a4:	223b      	movs	r2, #59	; 0x3b
 800a7a6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 800a7aa:	4b1d      	ldr	r3, [pc, #116]	; (800a820 <send_DHCP_REQUEST+0x504>)
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	897b      	ldrh	r3, [r7, #10]
 800a7b0:	1c59      	adds	r1, r3, #1
 800a7b2:	8179      	strh	r1, [r7, #10]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	221f      	movs	r2, #31
 800a7b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 800a7bc:	4b18      	ldr	r3, [pc, #96]	; (800a820 <send_DHCP_REQUEST+0x504>)
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	897b      	ldrh	r3, [r7, #10]
 800a7c2:	1c59      	adds	r1, r3, #1
 800a7c4:	8179      	strh	r1, [r7, #10]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	2221      	movs	r2, #33	; 0x21
 800a7ca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 800a7ce:	4b14      	ldr	r3, [pc, #80]	; (800a820 <send_DHCP_REQUEST+0x504>)
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	897b      	ldrh	r3, [r7, #10]
 800a7d4:	1c59      	adds	r1, r3, #1
 800a7d6:	8179      	strh	r1, [r7, #10]
 800a7d8:	4413      	add	r3, r2
 800a7da:	22ff      	movs	r2, #255	; 0xff
 800a7dc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 800a7e0:	897b      	ldrh	r3, [r7, #10]
 800a7e2:	60fb      	str	r3, [r7, #12]
 800a7e4:	e009      	b.n	800a7fa <send_DHCP_REQUEST+0x4de>
 800a7e6:	4b0e      	ldr	r3, [pc, #56]	; (800a820 <send_DHCP_REQUEST+0x504>)
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	4413      	add	r3, r2
 800a7ee:	33ec      	adds	r3, #236	; 0xec
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	701a      	strb	r2, [r3, #0]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	60fb      	str	r3, [r7, #12]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 800a800:	dbf1      	blt.n	800a7e6 <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800a802:	4b0a      	ldr	r3, [pc, #40]	; (800a82c <send_DHCP_REQUEST+0x510>)
 800a804:	7818      	ldrb	r0, [r3, #0]
 800a806:	4b06      	ldr	r3, [pc, #24]	; (800a820 <send_DHCP_REQUEST+0x504>)
 800a808:	6819      	ldr	r1, [r3, #0]
 800a80a:	1d3b      	adds	r3, r7, #4
 800a80c:	2243      	movs	r2, #67	; 0x43
 800a80e:	9200      	str	r2, [sp, #0]
 800a810:	f44f 7209 	mov.w	r2, #548	; 0x224
 800a814:	f7fe f972 	bl	8008afc <sendto>

}
 800a818:	bf00      	nop
 800a81a:	3710      	adds	r7, #16
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bdb0      	pop	{r4, r5, r7, pc}
 800a820:	20000990 	.word	0x20000990
 800a824:	200000f8 	.word	0x200000f8
 800a828:	20000994 	.word	0x20000994
 800a82c:	20000965 	.word	0x20000965

0800a830 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b086      	sub	sp, #24
 800a834:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 800a836:	2300      	movs	r3, #0
 800a838:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 800a83a:	f7ff fab3 	bl	8009da4 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 800a83e:	2304      	movs	r3, #4
 800a840:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 800a842:	4b9f      	ldr	r3, [pc, #636]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	330a      	adds	r3, #10
 800a848:	2200      	movs	r2, #0
 800a84a:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 800a84c:	4b9c      	ldr	r3, [pc, #624]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	330a      	adds	r3, #10
 800a852:	3301      	adds	r3, #1
 800a854:	2200      	movs	r2, #0
 800a856:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800a858:	4b99      	ldr	r3, [pc, #612]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	897b      	ldrh	r3, [r7, #10]
 800a85e:	1c59      	adds	r1, r3, #1
 800a860:	8179      	strh	r1, [r7, #10]
 800a862:	4413      	add	r3, r2
 800a864:	2235      	movs	r2, #53	; 0x35
 800a866:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800a86a:	4b95      	ldr	r3, [pc, #596]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	897b      	ldrh	r3, [r7, #10]
 800a870:	1c59      	adds	r1, r3, #1
 800a872:	8179      	strh	r1, [r7, #10]
 800a874:	4413      	add	r3, r2
 800a876:	2201      	movs	r2, #1
 800a878:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 800a87c:	4b90      	ldr	r3, [pc, #576]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	897b      	ldrh	r3, [r7, #10]
 800a882:	1c59      	adds	r1, r3, #1
 800a884:	8179      	strh	r1, [r7, #10]
 800a886:	4413      	add	r3, r2
 800a888:	2204      	movs	r2, #4
 800a88a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800a88e:	4b8c      	ldr	r3, [pc, #560]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	897b      	ldrh	r3, [r7, #10]
 800a894:	1c59      	adds	r1, r3, #1
 800a896:	8179      	strh	r1, [r7, #10]
 800a898:	4413      	add	r3, r2
 800a89a:	223d      	movs	r2, #61	; 0x3d
 800a89c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 800a8a0:	4b87      	ldr	r3, [pc, #540]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	897b      	ldrh	r3, [r7, #10]
 800a8a6:	1c59      	adds	r1, r3, #1
 800a8a8:	8179      	strh	r1, [r7, #10]
 800a8aa:	4413      	add	r3, r2
 800a8ac:	2207      	movs	r2, #7
 800a8ae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800a8b2:	4b83      	ldr	r3, [pc, #524]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	897b      	ldrh	r3, [r7, #10]
 800a8b8:	1c59      	adds	r1, r3, #1
 800a8ba:	8179      	strh	r1, [r7, #10]
 800a8bc:	4413      	add	r3, r2
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800a8c4:	4b7e      	ldr	r3, [pc, #504]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	897b      	ldrh	r3, [r7, #10]
 800a8ca:	1c59      	adds	r1, r3, #1
 800a8cc:	8179      	strh	r1, [r7, #10]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	4b7c      	ldr	r3, [pc, #496]	; (800aac4 <send_DHCP_DECLINE+0x294>)
 800a8d2:	7819      	ldrb	r1, [r3, #0]
 800a8d4:	1813      	adds	r3, r2, r0
 800a8d6:	460a      	mov	r2, r1
 800a8d8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800a8dc:	4b78      	ldr	r3, [pc, #480]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	897b      	ldrh	r3, [r7, #10]
 800a8e2:	1c59      	adds	r1, r3, #1
 800a8e4:	8179      	strh	r1, [r7, #10]
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	4b76      	ldr	r3, [pc, #472]	; (800aac4 <send_DHCP_DECLINE+0x294>)
 800a8ea:	7859      	ldrb	r1, [r3, #1]
 800a8ec:	1813      	adds	r3, r2, r0
 800a8ee:	460a      	mov	r2, r1
 800a8f0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800a8f4:	4b72      	ldr	r3, [pc, #456]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800a8f6:	681a      	ldr	r2, [r3, #0]
 800a8f8:	897b      	ldrh	r3, [r7, #10]
 800a8fa:	1c59      	adds	r1, r3, #1
 800a8fc:	8179      	strh	r1, [r7, #10]
 800a8fe:	4618      	mov	r0, r3
 800a900:	4b70      	ldr	r3, [pc, #448]	; (800aac4 <send_DHCP_DECLINE+0x294>)
 800a902:	7899      	ldrb	r1, [r3, #2]
 800a904:	1813      	adds	r3, r2, r0
 800a906:	460a      	mov	r2, r1
 800a908:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800a90c:	4b6c      	ldr	r3, [pc, #432]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	897b      	ldrh	r3, [r7, #10]
 800a912:	1c59      	adds	r1, r3, #1
 800a914:	8179      	strh	r1, [r7, #10]
 800a916:	4618      	mov	r0, r3
 800a918:	4b6a      	ldr	r3, [pc, #424]	; (800aac4 <send_DHCP_DECLINE+0x294>)
 800a91a:	78d9      	ldrb	r1, [r3, #3]
 800a91c:	1813      	adds	r3, r2, r0
 800a91e:	460a      	mov	r2, r1
 800a920:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800a924:	4b66      	ldr	r3, [pc, #408]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	897b      	ldrh	r3, [r7, #10]
 800a92a:	1c59      	adds	r1, r3, #1
 800a92c:	8179      	strh	r1, [r7, #10]
 800a92e:	4618      	mov	r0, r3
 800a930:	4b64      	ldr	r3, [pc, #400]	; (800aac4 <send_DHCP_DECLINE+0x294>)
 800a932:	7919      	ldrb	r1, [r3, #4]
 800a934:	1813      	adds	r3, r2, r0
 800a936:	460a      	mov	r2, r1
 800a938:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800a93c:	4b60      	ldr	r3, [pc, #384]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	897b      	ldrh	r3, [r7, #10]
 800a942:	1c59      	adds	r1, r3, #1
 800a944:	8179      	strh	r1, [r7, #10]
 800a946:	4618      	mov	r0, r3
 800a948:	4b5e      	ldr	r3, [pc, #376]	; (800aac4 <send_DHCP_DECLINE+0x294>)
 800a94a:	7959      	ldrb	r1, [r3, #5]
 800a94c:	1813      	adds	r3, r2, r0
 800a94e:	460a      	mov	r2, r1
 800a950:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 800a954:	4b5a      	ldr	r3, [pc, #360]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	897b      	ldrh	r3, [r7, #10]
 800a95a:	1c59      	adds	r1, r3, #1
 800a95c:	8179      	strh	r1, [r7, #10]
 800a95e:	4413      	add	r3, r2
 800a960:	2232      	movs	r2, #50	; 0x32
 800a962:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 800a966:	4b56      	ldr	r3, [pc, #344]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	897b      	ldrh	r3, [r7, #10]
 800a96c:	1c59      	adds	r1, r3, #1
 800a96e:	8179      	strh	r1, [r7, #10]
 800a970:	4413      	add	r3, r2
 800a972:	2204      	movs	r2, #4
 800a974:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 800a978:	4b51      	ldr	r3, [pc, #324]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	897b      	ldrh	r3, [r7, #10]
 800a97e:	1c59      	adds	r1, r3, #1
 800a980:	8179      	strh	r1, [r7, #10]
 800a982:	4618      	mov	r0, r3
 800a984:	4b50      	ldr	r3, [pc, #320]	; (800aac8 <send_DHCP_DECLINE+0x298>)
 800a986:	7819      	ldrb	r1, [r3, #0]
 800a988:	1813      	adds	r3, r2, r0
 800a98a:	460a      	mov	r2, r1
 800a98c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 800a990:	4b4b      	ldr	r3, [pc, #300]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	897b      	ldrh	r3, [r7, #10]
 800a996:	1c59      	adds	r1, r3, #1
 800a998:	8179      	strh	r1, [r7, #10]
 800a99a:	4618      	mov	r0, r3
 800a99c:	4b4a      	ldr	r3, [pc, #296]	; (800aac8 <send_DHCP_DECLINE+0x298>)
 800a99e:	7859      	ldrb	r1, [r3, #1]
 800a9a0:	1813      	adds	r3, r2, r0
 800a9a2:	460a      	mov	r2, r1
 800a9a4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 800a9a8:	4b45      	ldr	r3, [pc, #276]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	897b      	ldrh	r3, [r7, #10]
 800a9ae:	1c59      	adds	r1, r3, #1
 800a9b0:	8179      	strh	r1, [r7, #10]
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	4b44      	ldr	r3, [pc, #272]	; (800aac8 <send_DHCP_DECLINE+0x298>)
 800a9b6:	7899      	ldrb	r1, [r3, #2]
 800a9b8:	1813      	adds	r3, r2, r0
 800a9ba:	460a      	mov	r2, r1
 800a9bc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 800a9c0:	4b3f      	ldr	r3, [pc, #252]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	897b      	ldrh	r3, [r7, #10]
 800a9c6:	1c59      	adds	r1, r3, #1
 800a9c8:	8179      	strh	r1, [r7, #10]
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	4b3e      	ldr	r3, [pc, #248]	; (800aac8 <send_DHCP_DECLINE+0x298>)
 800a9ce:	78d9      	ldrb	r1, [r3, #3]
 800a9d0:	1813      	adds	r3, r2, r0
 800a9d2:	460a      	mov	r2, r1
 800a9d4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 800a9d8:	4b39      	ldr	r3, [pc, #228]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	897b      	ldrh	r3, [r7, #10]
 800a9de:	1c59      	adds	r1, r3, #1
 800a9e0:	8179      	strh	r1, [r7, #10]
 800a9e2:	4413      	add	r3, r2
 800a9e4:	2236      	movs	r2, #54	; 0x36
 800a9e6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 800a9ea:	4b35      	ldr	r3, [pc, #212]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	897b      	ldrh	r3, [r7, #10]
 800a9f0:	1c59      	adds	r1, r3, #1
 800a9f2:	8179      	strh	r1, [r7, #10]
 800a9f4:	4413      	add	r3, r2
 800a9f6:	2204      	movs	r2, #4
 800a9f8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 800a9fc:	4b30      	ldr	r3, [pc, #192]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800a9fe:	681a      	ldr	r2, [r3, #0]
 800aa00:	897b      	ldrh	r3, [r7, #10]
 800aa02:	1c59      	adds	r1, r3, #1
 800aa04:	8179      	strh	r1, [r7, #10]
 800aa06:	4618      	mov	r0, r3
 800aa08:	4b30      	ldr	r3, [pc, #192]	; (800aacc <send_DHCP_DECLINE+0x29c>)
 800aa0a:	7819      	ldrb	r1, [r3, #0]
 800aa0c:	1813      	adds	r3, r2, r0
 800aa0e:	460a      	mov	r2, r1
 800aa10:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 800aa14:	4b2a      	ldr	r3, [pc, #168]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	897b      	ldrh	r3, [r7, #10]
 800aa1a:	1c59      	adds	r1, r3, #1
 800aa1c:	8179      	strh	r1, [r7, #10]
 800aa1e:	4618      	mov	r0, r3
 800aa20:	4b2a      	ldr	r3, [pc, #168]	; (800aacc <send_DHCP_DECLINE+0x29c>)
 800aa22:	7859      	ldrb	r1, [r3, #1]
 800aa24:	1813      	adds	r3, r2, r0
 800aa26:	460a      	mov	r2, r1
 800aa28:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 800aa2c:	4b24      	ldr	r3, [pc, #144]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	897b      	ldrh	r3, [r7, #10]
 800aa32:	1c59      	adds	r1, r3, #1
 800aa34:	8179      	strh	r1, [r7, #10]
 800aa36:	4618      	mov	r0, r3
 800aa38:	4b24      	ldr	r3, [pc, #144]	; (800aacc <send_DHCP_DECLINE+0x29c>)
 800aa3a:	7899      	ldrb	r1, [r3, #2]
 800aa3c:	1813      	adds	r3, r2, r0
 800aa3e:	460a      	mov	r2, r1
 800aa40:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 800aa44:	4b1e      	ldr	r3, [pc, #120]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	897b      	ldrh	r3, [r7, #10]
 800aa4a:	1c59      	adds	r1, r3, #1
 800aa4c:	8179      	strh	r1, [r7, #10]
 800aa4e:	4618      	mov	r0, r3
 800aa50:	4b1e      	ldr	r3, [pc, #120]	; (800aacc <send_DHCP_DECLINE+0x29c>)
 800aa52:	78d9      	ldrb	r1, [r3, #3]
 800aa54:	1813      	adds	r3, r2, r0
 800aa56:	460a      	mov	r2, r1
 800aa58:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 800aa5c:	4b18      	ldr	r3, [pc, #96]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	897b      	ldrh	r3, [r7, #10]
 800aa62:	1c59      	adds	r1, r3, #1
 800aa64:	8179      	strh	r1, [r7, #10]
 800aa66:	4413      	add	r3, r2
 800aa68:	22ff      	movs	r2, #255	; 0xff
 800aa6a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 800aa6e:	897b      	ldrh	r3, [r7, #10]
 800aa70:	60fb      	str	r3, [r7, #12]
 800aa72:	e009      	b.n	800aa88 <send_DHCP_DECLINE+0x258>
 800aa74:	4b12      	ldr	r3, [pc, #72]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	33ec      	adds	r3, #236	; 0xec
 800aa7e:	2200      	movs	r2, #0
 800aa80:	701a      	strb	r2, [r3, #0]
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	3301      	adds	r3, #1
 800aa86:	60fb      	str	r3, [r7, #12]
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 800aa8e:	dbf1      	blt.n	800aa74 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 800aa90:	23ff      	movs	r3, #255	; 0xff
 800aa92:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 800aa94:	23ff      	movs	r3, #255	; 0xff
 800aa96:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 800aa98:	23ff      	movs	r3, #255	; 0xff
 800aa9a:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 800aa9c:	23ff      	movs	r3, #255	; 0xff
 800aa9e:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800aaa0:	4b0b      	ldr	r3, [pc, #44]	; (800aad0 <send_DHCP_DECLINE+0x2a0>)
 800aaa2:	7818      	ldrb	r0, [r3, #0]
 800aaa4:	4b06      	ldr	r3, [pc, #24]	; (800aac0 <send_DHCP_DECLINE+0x290>)
 800aaa6:	6819      	ldr	r1, [r3, #0]
 800aaa8:	1d3b      	adds	r3, r7, #4
 800aaaa:	2243      	movs	r2, #67	; 0x43
 800aaac:	9200      	str	r2, [sp, #0]
 800aaae:	f44f 7209 	mov.w	r2, #548	; 0x224
 800aab2:	f7fe f823 	bl	8008afc <sendto>
}
 800aab6:	bf00      	nop
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	20000990 	.word	0x20000990
 800aac4:	20000994 	.word	0x20000994
 800aac8:	20000974 	.word	0x20000974
 800aacc:	20000968 	.word	0x20000968
 800aad0:	20000965 	.word	0x20000965

0800aad4 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 800aad4:	b590      	push	{r4, r7, lr}
 800aad6:	b089      	sub	sp, #36	; 0x24
 800aad8:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 800aada:	2300      	movs	r3, #0
 800aadc:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 800aade:	4ba1      	ldr	r3, [pc, #644]	; (800ad64 <parseDHCPMSG+0x290>)
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7fd f9e1 	bl	8007eaa <getSn_RX_RSR>
 800aae8:	4603      	mov	r3, r0
 800aaea:	823b      	strh	r3, [r7, #16]
 800aaec:	8a3b      	ldrh	r3, [r7, #16]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d011      	beq.n	800ab16 <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 800aaf2:	4b9c      	ldr	r3, [pc, #624]	; (800ad64 <parseDHCPMSG+0x290>)
 800aaf4:	7818      	ldrb	r0, [r3, #0]
 800aaf6:	4b9c      	ldr	r3, [pc, #624]	; (800ad68 <parseDHCPMSG+0x294>)
 800aaf8:	6819      	ldr	r1, [r3, #0]
 800aafa:	1d3c      	adds	r4, r7, #4
 800aafc:	8a3a      	ldrh	r2, [r7, #16]
 800aafe:	1cbb      	adds	r3, r7, #2
 800ab00:	9300      	str	r3, [sp, #0]
 800ab02:	4623      	mov	r3, r4
 800ab04:	f7fe f930 	bl	8008d68 <recvfrom>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 800ab0c:	887b      	ldrh	r3, [r7, #2]
 800ab0e:	2b43      	cmp	r3, #67	; 0x43
 800ab10:	f040 81ed 	bne.w	800aeee <parseDHCPMSG+0x41a>
 800ab14:	e001      	b.n	800ab1a <parseDHCPMSG+0x46>
   else return 0;
 800ab16:	2300      	movs	r3, #0
 800ab18:	e1eb      	b.n	800aef2 <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 800ab1a:	4b93      	ldr	r3, [pc, #588]	; (800ad68 <parseDHCPMSG+0x294>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	7f1a      	ldrb	r2, [r3, #28]
 800ab20:	4b92      	ldr	r3, [pc, #584]	; (800ad6c <parseDHCPMSG+0x298>)
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d124      	bne.n	800ab72 <parseDHCPMSG+0x9e>
 800ab28:	4b8f      	ldr	r3, [pc, #572]	; (800ad68 <parseDHCPMSG+0x294>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	7f5a      	ldrb	r2, [r3, #29]
 800ab2e:	4b8f      	ldr	r3, [pc, #572]	; (800ad6c <parseDHCPMSG+0x298>)
 800ab30:	785b      	ldrb	r3, [r3, #1]
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d11d      	bne.n	800ab72 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 800ab36:	4b8c      	ldr	r3, [pc, #560]	; (800ad68 <parseDHCPMSG+0x294>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	7f9a      	ldrb	r2, [r3, #30]
 800ab3c:	4b8b      	ldr	r3, [pc, #556]	; (800ad6c <parseDHCPMSG+0x298>)
 800ab3e:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d116      	bne.n	800ab72 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 800ab44:	4b88      	ldr	r3, [pc, #544]	; (800ad68 <parseDHCPMSG+0x294>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	7fda      	ldrb	r2, [r3, #31]
 800ab4a:	4b88      	ldr	r3, [pc, #544]	; (800ad6c <parseDHCPMSG+0x298>)
 800ab4c:	78db      	ldrb	r3, [r3, #3]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d10f      	bne.n	800ab72 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 800ab52:	4b85      	ldr	r3, [pc, #532]	; (800ad68 <parseDHCPMSG+0x294>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f893 2020 	ldrb.w	r2, [r3, #32]
 800ab5a:	4b84      	ldr	r3, [pc, #528]	; (800ad6c <parseDHCPMSG+0x298>)
 800ab5c:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d107      	bne.n	800ab72 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 800ab62:	4b81      	ldr	r3, [pc, #516]	; (800ad68 <parseDHCPMSG+0x294>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800ab6a:	4b80      	ldr	r3, [pc, #512]	; (800ad6c <parseDHCPMSG+0x298>)
 800ab6c:	795b      	ldrb	r3, [r3, #5]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d001      	beq.n	800ab76 <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 800ab72:	2300      	movs	r3, #0
 800ab74:	e1bd      	b.n	800aef2 <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 800ab76:	4b7e      	ldr	r3, [pc, #504]	; (800ad70 <parseDHCPMSG+0x29c>)
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d10b      	bne.n	800ab96 <parseDHCPMSG+0xc2>
 800ab7e:	4b7c      	ldr	r3, [pc, #496]	; (800ad70 <parseDHCPMSG+0x29c>)
 800ab80:	785b      	ldrb	r3, [r3, #1]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d107      	bne.n	800ab96 <parseDHCPMSG+0xc2>
 800ab86:	4b7a      	ldr	r3, [pc, #488]	; (800ad70 <parseDHCPMSG+0x29c>)
 800ab88:	789b      	ldrb	r3, [r3, #2]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d103      	bne.n	800ab96 <parseDHCPMSG+0xc2>
 800ab8e:	4b78      	ldr	r3, [pc, #480]	; (800ad70 <parseDHCPMSG+0x29c>)
 800ab90:	78db      	ldrb	r3, [r3, #3]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d029      	beq.n	800abea <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800ab96:	793a      	ldrb	r2, [r7, #4]
 800ab98:	4b75      	ldr	r3, [pc, #468]	; (800ad70 <parseDHCPMSG+0x29c>)
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d10e      	bne.n	800abbe <parseDHCPMSG+0xea>
 800aba0:	797a      	ldrb	r2, [r7, #5]
 800aba2:	4b73      	ldr	r3, [pc, #460]	; (800ad70 <parseDHCPMSG+0x29c>)
 800aba4:	785b      	ldrb	r3, [r3, #1]
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d109      	bne.n	800abbe <parseDHCPMSG+0xea>
 800abaa:	79ba      	ldrb	r2, [r7, #6]
 800abac:	4b70      	ldr	r3, [pc, #448]	; (800ad70 <parseDHCPMSG+0x29c>)
 800abae:	789b      	ldrb	r3, [r3, #2]
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d104      	bne.n	800abbe <parseDHCPMSG+0xea>
 800abb4:	79fa      	ldrb	r2, [r7, #7]
 800abb6:	4b6e      	ldr	r3, [pc, #440]	; (800ad70 <parseDHCPMSG+0x29c>)
 800abb8:	78db      	ldrb	r3, [r3, #3]
 800abba:	429a      	cmp	r2, r3
 800abbc:	d015      	beq.n	800abea <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 800abbe:	793a      	ldrb	r2, [r7, #4]
 800abc0:	4b6c      	ldr	r3, [pc, #432]	; (800ad74 <parseDHCPMSG+0x2a0>)
 800abc2:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d10e      	bne.n	800abe6 <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 800abc8:	797a      	ldrb	r2, [r7, #5]
 800abca:	4b6a      	ldr	r3, [pc, #424]	; (800ad74 <parseDHCPMSG+0x2a0>)
 800abcc:	785b      	ldrb	r3, [r3, #1]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d109      	bne.n	800abe6 <parseDHCPMSG+0x112>
 800abd2:	79ba      	ldrb	r2, [r7, #6]
 800abd4:	4b67      	ldr	r3, [pc, #412]	; (800ad74 <parseDHCPMSG+0x2a0>)
 800abd6:	789b      	ldrb	r3, [r3, #2]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d104      	bne.n	800abe6 <parseDHCPMSG+0x112>
 800abdc:	79fa      	ldrb	r2, [r7, #7]
 800abde:	4b65      	ldr	r3, [pc, #404]	; (800ad74 <parseDHCPMSG+0x2a0>)
 800abe0:	78db      	ldrb	r3, [r3, #3]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d001      	beq.n	800abea <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 800abe6:	2300      	movs	r3, #0
 800abe8:	e183      	b.n	800aef2 <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 800abea:	4b5f      	ldr	r3, [pc, #380]	; (800ad68 <parseDHCPMSG+0x294>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	33f0      	adds	r3, #240	; 0xf0
 800abf4:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 800abf6:	8a3b      	ldrh	r3, [r7, #16]
 800abf8:	3bf0      	subs	r3, #240	; 0xf0
 800abfa:	697a      	ldr	r2, [r7, #20]
 800abfc:	4413      	add	r3, r2
 800abfe:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 800ac00:	e170      	b.n	800aee4 <parseDHCPMSG+0x410>

			switch ( *p ) {
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	2b36      	cmp	r3, #54	; 0x36
 800ac08:	dc76      	bgt.n	800acf8 <parseDHCPMSG+0x224>
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	f2c0 815d 	blt.w	800aeca <parseDHCPMSG+0x3f6>
 800ac10:	2b36      	cmp	r3, #54	; 0x36
 800ac12:	f200 815a 	bhi.w	800aeca <parseDHCPMSG+0x3f6>
 800ac16:	a201      	add	r2, pc, #4	; (adr r2, 800ac1c <parseDHCPMSG+0x148>)
 800ac18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac1c:	0800ad05 	.word	0x0800ad05
 800ac20:	0800ad25 	.word	0x0800ad25
 800ac24:	0800aecb 	.word	0x0800aecb
 800ac28:	0800ad7d 	.word	0x0800ad7d
 800ac2c:	0800aecb 	.word	0x0800aecb
 800ac30:	0800aecb 	.word	0x0800aecb
 800ac34:	0800adc9 	.word	0x0800adc9
 800ac38:	0800aecb 	.word	0x0800aecb
 800ac3c:	0800aecb 	.word	0x0800aecb
 800ac40:	0800aecb 	.word	0x0800aecb
 800ac44:	0800aecb 	.word	0x0800aecb
 800ac48:	0800aecb 	.word	0x0800aecb
 800ac4c:	0800aecb 	.word	0x0800aecb
 800ac50:	0800aecb 	.word	0x0800aecb
 800ac54:	0800aecb 	.word	0x0800aecb
 800ac58:	0800aecb 	.word	0x0800aecb
 800ac5c:	0800aecb 	.word	0x0800aecb
 800ac60:	0800aecb 	.word	0x0800aecb
 800ac64:	0800aecb 	.word	0x0800aecb
 800ac68:	0800aecb 	.word	0x0800aecb
 800ac6c:	0800aecb 	.word	0x0800aecb
 800ac70:	0800aecb 	.word	0x0800aecb
 800ac74:	0800aecb 	.word	0x0800aecb
 800ac78:	0800aecb 	.word	0x0800aecb
 800ac7c:	0800aecb 	.word	0x0800aecb
 800ac80:	0800aecb 	.word	0x0800aecb
 800ac84:	0800aecb 	.word	0x0800aecb
 800ac88:	0800aecb 	.word	0x0800aecb
 800ac8c:	0800aecb 	.word	0x0800aecb
 800ac90:	0800aecb 	.word	0x0800aecb
 800ac94:	0800aecb 	.word	0x0800aecb
 800ac98:	0800aecb 	.word	0x0800aecb
 800ac9c:	0800aecb 	.word	0x0800aecb
 800aca0:	0800aecb 	.word	0x0800aecb
 800aca4:	0800aecb 	.word	0x0800aecb
 800aca8:	0800aecb 	.word	0x0800aecb
 800acac:	0800aecb 	.word	0x0800aecb
 800acb0:	0800aecb 	.word	0x0800aecb
 800acb4:	0800aecb 	.word	0x0800aecb
 800acb8:	0800aecb 	.word	0x0800aecb
 800acbc:	0800aecb 	.word	0x0800aecb
 800acc0:	0800aecb 	.word	0x0800aecb
 800acc4:	0800aecb 	.word	0x0800aecb
 800acc8:	0800aecb 	.word	0x0800aecb
 800accc:	0800aecb 	.word	0x0800aecb
 800acd0:	0800aecb 	.word	0x0800aecb
 800acd4:	0800aecb 	.word	0x0800aecb
 800acd8:	0800aecb 	.word	0x0800aecb
 800acdc:	0800aecb 	.word	0x0800aecb
 800ace0:	0800aecb 	.word	0x0800aecb
 800ace4:	0800aecb 	.word	0x0800aecb
 800ace8:	0800ae15 	.word	0x0800ae15
 800acec:	0800aecb 	.word	0x0800aecb
 800acf0:	0800ad0d 	.word	0x0800ad0d
 800acf4:	0800ae71 	.word	0x0800ae71
 800acf8:	2bff      	cmp	r3, #255	; 0xff
 800acfa:	f040 80e6 	bne.w	800aeca <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	617b      	str	r3, [r7, #20]
   				break;
 800ad02:	e0ef      	b.n	800aee4 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	3301      	adds	r3, #1
 800ad08:	617b      	str	r3, [r7, #20]
   				break;
 800ad0a:	e0eb      	b.n	800aee4 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	617b      	str	r3, [r7, #20]
   				p++;
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	3301      	adds	r3, #1
 800ad16:	617b      	str	r3, [r7, #20]
   				type = *p++;
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	1c5a      	adds	r2, r3, #1
 800ad1c:	617a      	str	r2, [r7, #20]
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	74fb      	strb	r3, [r7, #19]
   				break;
 800ad22:	e0df      	b.n	800aee4 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	3301      	adds	r3, #1
 800ad28:	617b      	str	r3, [r7, #20]
   				p++;
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	1c5a      	adds	r2, r3, #1
 800ad34:	617a      	str	r2, [r7, #20]
 800ad36:	781a      	ldrb	r2, [r3, #0]
 800ad38:	4b0f      	ldr	r3, [pc, #60]	; (800ad78 <parseDHCPMSG+0x2a4>)
 800ad3a:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	1c5a      	adds	r2, r3, #1
 800ad40:	617a      	str	r2, [r7, #20]
 800ad42:	781a      	ldrb	r2, [r3, #0]
 800ad44:	4b0c      	ldr	r3, [pc, #48]	; (800ad78 <parseDHCPMSG+0x2a4>)
 800ad46:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	1c5a      	adds	r2, r3, #1
 800ad4c:	617a      	str	r2, [r7, #20]
 800ad4e:	781a      	ldrb	r2, [r3, #0]
 800ad50:	4b09      	ldr	r3, [pc, #36]	; (800ad78 <parseDHCPMSG+0x2a4>)
 800ad52:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	1c5a      	adds	r2, r3, #1
 800ad58:	617a      	str	r2, [r7, #20]
 800ad5a:	781a      	ldrb	r2, [r3, #0]
 800ad5c:	4b06      	ldr	r3, [pc, #24]	; (800ad78 <parseDHCPMSG+0x2a4>)
 800ad5e:	70da      	strb	r2, [r3, #3]
   				break;
 800ad60:	e0c0      	b.n	800aee4 <parseDHCPMSG+0x410>
 800ad62:	bf00      	nop
 800ad64:	20000965 	.word	0x20000965
 800ad68:	20000990 	.word	0x20000990
 800ad6c:	20000994 	.word	0x20000994
 800ad70:	20000968 	.word	0x20000968
 800ad74:	2000096c 	.word	0x2000096c
 800ad78:	2000097c 	.word	0x2000097c
   			case routersOnSubnet :
   				p++;
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	1c5a      	adds	r2, r3, #1
 800ad86:	617a      	str	r2, [r7, #20]
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	1c5a      	adds	r2, r3, #1
 800ad90:	617a      	str	r2, [r7, #20]
 800ad92:	781a      	ldrb	r2, [r3, #0]
 800ad94:	4b59      	ldr	r3, [pc, #356]	; (800aefc <parseDHCPMSG+0x428>)
 800ad96:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	1c5a      	adds	r2, r3, #1
 800ad9c:	617a      	str	r2, [r7, #20]
 800ad9e:	781a      	ldrb	r2, [r3, #0]
 800ada0:	4b56      	ldr	r3, [pc, #344]	; (800aefc <parseDHCPMSG+0x428>)
 800ada2:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	1c5a      	adds	r2, r3, #1
 800ada8:	617a      	str	r2, [r7, #20]
 800adaa:	781a      	ldrb	r2, [r3, #0]
 800adac:	4b53      	ldr	r3, [pc, #332]	; (800aefc <parseDHCPMSG+0x428>)
 800adae:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	1c5a      	adds	r2, r3, #1
 800adb4:	617a      	str	r2, [r7, #20]
 800adb6:	781a      	ldrb	r2, [r3, #0]
 800adb8:	4b50      	ldr	r3, [pc, #320]	; (800aefc <parseDHCPMSG+0x428>)
 800adba:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 800adbc:	7afb      	ldrb	r3, [r7, #11]
 800adbe:	3b04      	subs	r3, #4
 800adc0:	697a      	ldr	r2, [r7, #20]
 800adc2:	4413      	add	r3, r2
 800adc4:	617b      	str	r3, [r7, #20]
   				break;
 800adc6:	e08d      	b.n	800aee4 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	3301      	adds	r3, #1
 800adcc:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	1c5a      	adds	r2, r3, #1
 800add2:	617a      	str	r2, [r7, #20]
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	1c5a      	adds	r2, r3, #1
 800addc:	617a      	str	r2, [r7, #20]
 800adde:	781a      	ldrb	r2, [r3, #0]
 800ade0:	4b47      	ldr	r3, [pc, #284]	; (800af00 <parseDHCPMSG+0x42c>)
 800ade2:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	1c5a      	adds	r2, r3, #1
 800ade8:	617a      	str	r2, [r7, #20]
 800adea:	781a      	ldrb	r2, [r3, #0]
 800adec:	4b44      	ldr	r3, [pc, #272]	; (800af00 <parseDHCPMSG+0x42c>)
 800adee:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	1c5a      	adds	r2, r3, #1
 800adf4:	617a      	str	r2, [r7, #20]
 800adf6:	781a      	ldrb	r2, [r3, #0]
 800adf8:	4b41      	ldr	r3, [pc, #260]	; (800af00 <parseDHCPMSG+0x42c>)
 800adfa:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	1c5a      	adds	r2, r3, #1
 800ae00:	617a      	str	r2, [r7, #20]
 800ae02:	781a      	ldrb	r2, [r3, #0]
 800ae04:	4b3e      	ldr	r3, [pc, #248]	; (800af00 <parseDHCPMSG+0x42c>)
 800ae06:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 800ae08:	7afb      	ldrb	r3, [r7, #11]
 800ae0a:	3b04      	subs	r3, #4
 800ae0c:	697a      	ldr	r2, [r7, #20]
 800ae0e:	4413      	add	r3, r2
 800ae10:	617b      	str	r3, [r7, #20]
   				break;
 800ae12:	e067      	b.n	800aee4 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	3301      	adds	r3, #1
 800ae18:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	1c5a      	adds	r2, r3, #1
 800ae1e:	617a      	str	r2, [r7, #20]
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	1c5a      	adds	r2, r3, #1
 800ae28:	617a      	str	r2, [r7, #20]
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	4b35      	ldr	r3, [pc, #212]	; (800af04 <parseDHCPMSG+0x430>)
 800ae30:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800ae32:	4b34      	ldr	r3, [pc, #208]	; (800af04 <parseDHCPMSG+0x430>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	021a      	lsls	r2, r3, #8
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	1c59      	adds	r1, r3, #1
 800ae3c:	6179      	str	r1, [r7, #20]
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	4413      	add	r3, r2
 800ae42:	4a30      	ldr	r2, [pc, #192]	; (800af04 <parseDHCPMSG+0x430>)
 800ae44:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800ae46:	4b2f      	ldr	r3, [pc, #188]	; (800af04 <parseDHCPMSG+0x430>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	021a      	lsls	r2, r3, #8
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	1c59      	adds	r1, r3, #1
 800ae50:	6179      	str	r1, [r7, #20]
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	4413      	add	r3, r2
 800ae56:	4a2b      	ldr	r2, [pc, #172]	; (800af04 <parseDHCPMSG+0x430>)
 800ae58:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800ae5a:	4b2a      	ldr	r3, [pc, #168]	; (800af04 <parseDHCPMSG+0x430>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	021a      	lsls	r2, r3, #8
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	1c59      	adds	r1, r3, #1
 800ae64:	6179      	str	r1, [r7, #20]
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	4413      	add	r3, r2
 800ae6a:	4a26      	ldr	r2, [pc, #152]	; (800af04 <parseDHCPMSG+0x430>)
 800ae6c:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 800ae6e:	e039      	b.n	800aee4 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	3301      	adds	r3, #1
 800ae74:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	1c5a      	adds	r2, r3, #1
 800ae7a:	617a      	str	r2, [r7, #20]
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	1c5a      	adds	r2, r3, #1
 800ae84:	617a      	str	r2, [r7, #20]
 800ae86:	781a      	ldrb	r2, [r3, #0]
 800ae88:	4b1f      	ldr	r3, [pc, #124]	; (800af08 <parseDHCPMSG+0x434>)
 800ae8a:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	1c5a      	adds	r2, r3, #1
 800ae90:	617a      	str	r2, [r7, #20]
 800ae92:	781a      	ldrb	r2, [r3, #0]
 800ae94:	4b1c      	ldr	r3, [pc, #112]	; (800af08 <parseDHCPMSG+0x434>)
 800ae96:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	1c5a      	adds	r2, r3, #1
 800ae9c:	617a      	str	r2, [r7, #20]
 800ae9e:	781a      	ldrb	r2, [r3, #0]
 800aea0:	4b19      	ldr	r3, [pc, #100]	; (800af08 <parseDHCPMSG+0x434>)
 800aea2:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	1c5a      	adds	r2, r3, #1
 800aea8:	617a      	str	r2, [r7, #20]
 800aeaa:	781a      	ldrb	r2, [r3, #0]
 800aeac:	4b16      	ldr	r3, [pc, #88]	; (800af08 <parseDHCPMSG+0x434>)
 800aeae:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 800aeb0:	793a      	ldrb	r2, [r7, #4]
 800aeb2:	4b16      	ldr	r3, [pc, #88]	; (800af0c <parseDHCPMSG+0x438>)
 800aeb4:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 800aeb6:	797a      	ldrb	r2, [r7, #5]
 800aeb8:	4b14      	ldr	r3, [pc, #80]	; (800af0c <parseDHCPMSG+0x438>)
 800aeba:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 800aebc:	79ba      	ldrb	r2, [r7, #6]
 800aebe:	4b13      	ldr	r3, [pc, #76]	; (800af0c <parseDHCPMSG+0x438>)
 800aec0:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 800aec2:	79fa      	ldrb	r2, [r7, #7]
 800aec4:	4b11      	ldr	r3, [pc, #68]	; (800af0c <parseDHCPMSG+0x438>)
 800aec6:	70da      	strb	r2, [r3, #3]
   				break;
 800aec8:	e00c      	b.n	800aee4 <parseDHCPMSG+0x410>
   			default :
   				p++;
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	3301      	adds	r3, #1
 800aece:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	1c5a      	adds	r2, r3, #1
 800aed4:	617a      	str	r2, [r7, #20]
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 800aeda:	7afb      	ldrb	r3, [r7, #11]
 800aedc:	697a      	ldr	r2, [r7, #20]
 800aede:	4413      	add	r3, r2
 800aee0:	617b      	str	r3, [r7, #20]
   				break;
 800aee2:	bf00      	nop
		while ( p < e ) {
 800aee4:	697a      	ldr	r2, [r7, #20]
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	f4ff ae8a 	bcc.w	800ac02 <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 800aeee:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	371c      	adds	r7, #28
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd90      	pop	{r4, r7, pc}
 800aefa:	bf00      	nop
 800aefc:	20000978 	.word	0x20000978
 800af00:	20000980 	.word	0x20000980
 800af04:	200000f0 	.word	0x200000f0
 800af08:	20000968 	.word	0x20000968
 800af0c:	2000096c 	.word	0x2000096c

0800af10 <DHCP_run>:

uint8_t DHCP_run(void)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b082      	sub	sp, #8
 800af14:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 800af16:	4b7f      	ldr	r3, [pc, #508]	; (800b114 <DHCP_run+0x204>)
 800af18:	f993 3000 	ldrsb.w	r3, [r3]
 800af1c:	2b06      	cmp	r3, #6
 800af1e:	d101      	bne.n	800af24 <DHCP_run+0x14>
 800af20:	2305      	movs	r3, #5
 800af22:	e0f3      	b.n	800b10c <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 800af24:	4b7c      	ldr	r3, [pc, #496]	; (800b118 <DHCP_run+0x208>)
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	009b      	lsls	r3, r3, #2
 800af2a:	3301      	adds	r3, #1
 800af2c:	00db      	lsls	r3, r3, #3
 800af2e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800af32:	4618      	mov	r0, r3
 800af34:	f7fc fe14 	bl	8007b60 <WIZCHIP_READ>
 800af38:	4603      	mov	r3, r0
 800af3a:	2b22      	cmp	r3, #34	; 0x22
 800af3c:	d006      	beq.n	800af4c <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 800af3e:	4b76      	ldr	r3, [pc, #472]	; (800b118 <DHCP_run+0x208>)
 800af40:	7818      	ldrb	r0, [r3, #0]
 800af42:	2300      	movs	r3, #0
 800af44:	2244      	movs	r2, #68	; 0x44
 800af46:	2102      	movs	r1, #2
 800af48:	f7fd f8fa 	bl	8008140 <socket>

	ret = DHCP_RUNNING;
 800af4c:	2301      	movs	r3, #1
 800af4e:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 800af50:	f7ff fdc0 	bl	800aad4 <parseDHCPMSG>
 800af54:	4603      	mov	r3, r0
 800af56:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 800af58:	4b6e      	ldr	r3, [pc, #440]	; (800b114 <DHCP_run+0x204>)
 800af5a:	f993 3000 	ldrsb.w	r3, [r3]
 800af5e:	2b04      	cmp	r3, #4
 800af60:	f200 80d0 	bhi.w	800b104 <DHCP_run+0x1f4>
 800af64:	a201      	add	r2, pc, #4	; (adr r2, 800af6c <DHCP_run+0x5c>)
 800af66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af6a:	bf00      	nop
 800af6c:	0800af81 	.word	0x0800af81
 800af70:	0800afa5 	.word	0x0800afa5
 800af74:	0800afe9 	.word	0x0800afe9
 800af78:	0800b039 	.word	0x0800b039
 800af7c:	0800b093 	.word	0x0800b093
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 800af80:	4b66      	ldr	r3, [pc, #408]	; (800b11c <DHCP_run+0x20c>)
 800af82:	2200      	movs	r2, #0
 800af84:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 800af86:	4b65      	ldr	r3, [pc, #404]	; (800b11c <DHCP_run+0x20c>)
 800af88:	2200      	movs	r2, #0
 800af8a:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 800af8c:	4b63      	ldr	r3, [pc, #396]	; (800b11c <DHCP_run+0x20c>)
 800af8e:	2200      	movs	r2, #0
 800af90:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 800af92:	4b62      	ldr	r3, [pc, #392]	; (800b11c <DHCP_run+0x20c>)
 800af94:	2200      	movs	r2, #0
 800af96:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 800af98:	f7fe fffa 	bl	8009f90 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 800af9c:	4b5d      	ldr	r3, [pc, #372]	; (800b114 <DHCP_run+0x204>)
 800af9e:	2201      	movs	r2, #1
 800afa0:	701a      	strb	r2, [r3, #0]
   		break;
 800afa2:	e0b2      	b.n	800b10a <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 800afa4:	79bb      	ldrb	r3, [r7, #6]
 800afa6:	2b02      	cmp	r3, #2
 800afa8:	d119      	bne.n	800afde <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 800afaa:	4b5d      	ldr	r3, [pc, #372]	; (800b120 <DHCP_run+0x210>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	7c1a      	ldrb	r2, [r3, #16]
 800afb0:	4b5a      	ldr	r3, [pc, #360]	; (800b11c <DHCP_run+0x20c>)
 800afb2:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 800afb4:	4b5a      	ldr	r3, [pc, #360]	; (800b120 <DHCP_run+0x210>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	7c5a      	ldrb	r2, [r3, #17]
 800afba:	4b58      	ldr	r3, [pc, #352]	; (800b11c <DHCP_run+0x20c>)
 800afbc:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 800afbe:	4b58      	ldr	r3, [pc, #352]	; (800b120 <DHCP_run+0x210>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	7c9a      	ldrb	r2, [r3, #18]
 800afc4:	4b55      	ldr	r3, [pc, #340]	; (800b11c <DHCP_run+0x20c>)
 800afc6:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 800afc8:	4b55      	ldr	r3, [pc, #340]	; (800b120 <DHCP_run+0x210>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	7cda      	ldrb	r2, [r3, #19]
 800afce:	4b53      	ldr	r3, [pc, #332]	; (800b11c <DHCP_run+0x20c>)
 800afd0:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 800afd2:	f7ff f9a3 	bl	800a31c <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 800afd6:	4b4f      	ldr	r3, [pc, #316]	; (800b114 <DHCP_run+0x204>)
 800afd8:	2202      	movs	r2, #2
 800afda:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 800afdc:	e095      	b.n	800b10a <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800afde:	f000 f8b1 	bl	800b144 <check_DHCP_timeout>
 800afe2:	4603      	mov	r3, r0
 800afe4:	71fb      	strb	r3, [r7, #7]
         break;
 800afe6:	e090      	b.n	800b10a <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 800afe8:	79bb      	ldrb	r3, [r7, #6]
 800afea:	2b05      	cmp	r3, #5
 800afec:	d116      	bne.n	800b01c <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 800afee:	f000 f909 	bl	800b204 <check_DHCP_leasedIP>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d008      	beq.n	800b00a <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 800aff8:	4b4a      	ldr	r3, [pc, #296]	; (800b124 <DHCP_run+0x214>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4798      	blx	r3
					reset_DHCP_timeout();
 800affe:	f000 f9d9 	bl	800b3b4 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 800b002:	4b44      	ldr	r3, [pc, #272]	; (800b114 <DHCP_run+0x204>)
 800b004:	2203      	movs	r2, #3
 800b006:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 800b008:	e07f      	b.n	800b10a <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 800b00a:	f000 f9d3 	bl	800b3b4 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 800b00e:	4b46      	ldr	r3, [pc, #280]	; (800b128 <DHCP_run+0x218>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 800b014:	4b3f      	ldr	r3, [pc, #252]	; (800b114 <DHCP_run+0x204>)
 800b016:	2200      	movs	r2, #0
 800b018:	701a      	strb	r2, [r3, #0]
		break;
 800b01a:	e076      	b.n	800b10a <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 800b01c:	79bb      	ldrb	r3, [r7, #6]
 800b01e:	2b06      	cmp	r3, #6
 800b020:	d105      	bne.n	800b02e <DHCP_run+0x11e>
				reset_DHCP_timeout();
 800b022:	f000 f9c7 	bl	800b3b4 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 800b026:	4b3b      	ldr	r3, [pc, #236]	; (800b114 <DHCP_run+0x204>)
 800b028:	2201      	movs	r2, #1
 800b02a:	701a      	strb	r2, [r3, #0]
		break;
 800b02c:	e06d      	b.n	800b10a <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800b02e:	f000 f889 	bl	800b144 <check_DHCP_timeout>
 800b032:	4603      	mov	r3, r0
 800b034:	71fb      	strb	r3, [r7, #7]
		break;
 800b036:	e068      	b.n	800b10a <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 800b038:	2304      	movs	r3, #4
 800b03a:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/4) < dhcp_tick_1s)) {
 800b03c:	4b3b      	ldr	r3, [pc, #236]	; (800b12c <DHCP_run+0x21c>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b044:	d060      	beq.n	800b108 <DHCP_run+0x1f8>
 800b046:	4b39      	ldr	r3, [pc, #228]	; (800b12c <DHCP_run+0x21c>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	089a      	lsrs	r2, r3, #2
 800b04c:	4b38      	ldr	r3, [pc, #224]	; (800b130 <DHCP_run+0x220>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	429a      	cmp	r2, r3
 800b052:	d259      	bcs.n	800b108 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 800b054:	2300      	movs	r3, #0
 800b056:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 800b058:	4b30      	ldr	r3, [pc, #192]	; (800b11c <DHCP_run+0x20c>)
 800b05a:	781a      	ldrb	r2, [r3, #0]
 800b05c:	4b35      	ldr	r3, [pc, #212]	; (800b134 <DHCP_run+0x224>)
 800b05e:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 800b060:	4b2e      	ldr	r3, [pc, #184]	; (800b11c <DHCP_run+0x20c>)
 800b062:	785a      	ldrb	r2, [r3, #1]
 800b064:	4b33      	ldr	r3, [pc, #204]	; (800b134 <DHCP_run+0x224>)
 800b066:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 800b068:	4b2c      	ldr	r3, [pc, #176]	; (800b11c <DHCP_run+0x20c>)
 800b06a:	789a      	ldrb	r2, [r3, #2]
 800b06c:	4b31      	ldr	r3, [pc, #196]	; (800b134 <DHCP_run+0x224>)
 800b06e:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 800b070:	4b2a      	ldr	r3, [pc, #168]	; (800b11c <DHCP_run+0x20c>)
 800b072:	78da      	ldrb	r2, [r3, #3]
 800b074:	4b2f      	ldr	r3, [pc, #188]	; (800b134 <DHCP_run+0x224>)
 800b076:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 800b078:	4b2f      	ldr	r3, [pc, #188]	; (800b138 <DHCP_run+0x228>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	3301      	adds	r3, #1
 800b07e:	4a2e      	ldr	r2, [pc, #184]	; (800b138 <DHCP_run+0x228>)
 800b080:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 800b082:	f7ff f94b 	bl	800a31c <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 800b086:	f000 f995 	bl	800b3b4 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 800b08a:	4b22      	ldr	r3, [pc, #136]	; (800b114 <DHCP_run+0x204>)
 800b08c:	2204      	movs	r2, #4
 800b08e:	701a      	strb	r2, [r3, #0]
			}
		break;
 800b090:	e03a      	b.n	800b108 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 800b092:	2304      	movs	r3, #4
 800b094:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 800b096:	79bb      	ldrb	r3, [r7, #6]
 800b098:	2b05      	cmp	r3, #5
 800b09a:	d125      	bne.n	800b0e8 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 800b09c:	4b27      	ldr	r3, [pc, #156]	; (800b13c <DHCP_run+0x22c>)
 800b09e:	2200      	movs	r2, #0
 800b0a0:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 800b0a2:	4b24      	ldr	r3, [pc, #144]	; (800b134 <DHCP_run+0x224>)
 800b0a4:	781a      	ldrb	r2, [r3, #0]
 800b0a6:	4b1d      	ldr	r3, [pc, #116]	; (800b11c <DHCP_run+0x20c>)
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d111      	bne.n	800b0d2 <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 800b0ae:	4b21      	ldr	r3, [pc, #132]	; (800b134 <DHCP_run+0x224>)
 800b0b0:	785a      	ldrb	r2, [r3, #1]
 800b0b2:	4b1a      	ldr	r3, [pc, #104]	; (800b11c <DHCP_run+0x20c>)
 800b0b4:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d10b      	bne.n	800b0d2 <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800b0ba:	4b1e      	ldr	r3, [pc, #120]	; (800b134 <DHCP_run+0x224>)
 800b0bc:	789a      	ldrb	r2, [r3, #2]
 800b0be:	4b17      	ldr	r3, [pc, #92]	; (800b11c <DHCP_run+0x20c>)
 800b0c0:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d105      	bne.n	800b0d2 <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 800b0c6:	4b1b      	ldr	r3, [pc, #108]	; (800b134 <DHCP_run+0x224>)
 800b0c8:	78da      	ldrb	r2, [r3, #3]
 800b0ca:	4b14      	ldr	r3, [pc, #80]	; (800b11c <DHCP_run+0x20c>)
 800b0cc:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d004      	beq.n	800b0dc <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 800b0d2:	2303      	movs	r3, #3
 800b0d4:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 800b0d6:	4b1a      	ldr	r3, [pc, #104]	; (800b140 <DHCP_run+0x230>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 800b0dc:	f000 f96a 	bl	800b3b4 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 800b0e0:	4b0c      	ldr	r3, [pc, #48]	; (800b114 <DHCP_run+0x204>)
 800b0e2:	2203      	movs	r2, #3
 800b0e4:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 800b0e6:	e010      	b.n	800b10a <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 800b0e8:	79bb      	ldrb	r3, [r7, #6]
 800b0ea:	2b06      	cmp	r3, #6
 800b0ec:	d105      	bne.n	800b0fa <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 800b0ee:	f000 f961 	bl	800b3b4 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 800b0f2:	4b08      	ldr	r3, [pc, #32]	; (800b114 <DHCP_run+0x204>)
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	701a      	strb	r2, [r3, #0]
	   	break;
 800b0f8:	e007      	b.n	800b10a <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800b0fa:	f000 f823 	bl	800b144 <check_DHCP_timeout>
 800b0fe:	4603      	mov	r3, r0
 800b100:	71fb      	strb	r3, [r7, #7]
	   	break;
 800b102:	e002      	b.n	800b10a <DHCP_run+0x1fa>
		default :
   		break;
 800b104:	bf00      	nop
 800b106:	e000      	b.n	800b10a <DHCP_run+0x1fa>
		break;
 800b108:	bf00      	nop
	}

	return ret;
 800b10a:	79fb      	ldrb	r3, [r7, #7]
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3708      	adds	r7, #8
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}
 800b114:	20000984 	.word	0x20000984
 800b118:	20000965 	.word	0x20000965
 800b11c:	20000974 	.word	0x20000974
 800b120:	20000990 	.word	0x20000990
 800b124:	20000104 	.word	0x20000104
 800b128:	2000010c 	.word	0x2000010c
 800b12c:	200000f0 	.word	0x200000f0
 800b130:	20000988 	.word	0x20000988
 800b134:	20000970 	.word	0x20000970
 800b138:	2000098c 	.word	0x2000098c
 800b13c:	20000985 	.word	0x20000985
 800b140:	20000108 	.word	0x20000108

0800b144 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b082      	sub	sp, #8
 800b148:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 800b14a:	2301      	movs	r3, #1
 800b14c:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 800b14e:	4b29      	ldr	r3, [pc, #164]	; (800b1f4 <check_DHCP_timeout+0xb0>)
 800b150:	f993 3000 	ldrsb.w	r3, [r3]
 800b154:	2b63      	cmp	r3, #99	; 0x63
 800b156:	dc2d      	bgt.n	800b1b4 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 800b158:	4b27      	ldr	r3, [pc, #156]	; (800b1f8 <check_DHCP_timeout+0xb4>)
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	4b27      	ldr	r3, [pc, #156]	; (800b1fc <check_DHCP_timeout+0xb8>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	429a      	cmp	r2, r3
 800b162:	d242      	bcs.n	800b1ea <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 800b164:	4b26      	ldr	r3, [pc, #152]	; (800b200 <check_DHCP_timeout+0xbc>)
 800b166:	f993 3000 	ldrsb.w	r3, [r3]
 800b16a:	2b04      	cmp	r3, #4
 800b16c:	d00c      	beq.n	800b188 <check_DHCP_timeout+0x44>
 800b16e:	2b04      	cmp	r3, #4
 800b170:	dc0d      	bgt.n	800b18e <check_DHCP_timeout+0x4a>
 800b172:	2b01      	cmp	r3, #1
 800b174:	d002      	beq.n	800b17c <check_DHCP_timeout+0x38>
 800b176:	2b02      	cmp	r3, #2
 800b178:	d003      	beq.n	800b182 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 800b17a:	e008      	b.n	800b18e <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 800b17c:	f7fe ff08 	bl	8009f90 <send_DHCP_DISCOVER>
				break;
 800b180:	e006      	b.n	800b190 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 800b182:	f7ff f8cb 	bl	800a31c <send_DHCP_REQUEST>
				break;
 800b186:	e003      	b.n	800b190 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 800b188:	f7ff f8c8 	bl	800a31c <send_DHCP_REQUEST>
				break;
 800b18c:	e000      	b.n	800b190 <check_DHCP_timeout+0x4c>
				break;
 800b18e:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 800b190:	4b1a      	ldr	r3, [pc, #104]	; (800b1fc <check_DHCP_timeout+0xb8>)
 800b192:	2200      	movs	r2, #0
 800b194:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 800b196:	4b19      	ldr	r3, [pc, #100]	; (800b1fc <check_DHCP_timeout+0xb8>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	3302      	adds	r3, #2
 800b19c:	4a16      	ldr	r2, [pc, #88]	; (800b1f8 <check_DHCP_timeout+0xb4>)
 800b19e:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 800b1a0:	4b14      	ldr	r3, [pc, #80]	; (800b1f4 <check_DHCP_timeout+0xb0>)
 800b1a2:	f993 3000 	ldrsb.w	r3, [r3]
 800b1a6:	b2db      	uxtb	r3, r3
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	b25a      	sxtb	r2, r3
 800b1ae:	4b11      	ldr	r3, [pc, #68]	; (800b1f4 <check_DHCP_timeout+0xb0>)
 800b1b0:	701a      	strb	r2, [r3, #0]
 800b1b2:	e01a      	b.n	800b1ea <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 800b1b4:	4b12      	ldr	r3, [pc, #72]	; (800b200 <check_DHCP_timeout+0xbc>)
 800b1b6:	f993 3000 	ldrsb.w	r3, [r3]
 800b1ba:	2b04      	cmp	r3, #4
 800b1bc:	d00c      	beq.n	800b1d8 <check_DHCP_timeout+0x94>
 800b1be:	2b04      	cmp	r3, #4
 800b1c0:	dc10      	bgt.n	800b1e4 <check_DHCP_timeout+0xa0>
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d002      	beq.n	800b1cc <check_DHCP_timeout+0x88>
 800b1c6:	2b02      	cmp	r3, #2
 800b1c8:	d006      	beq.n	800b1d8 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 800b1ca:	e00b      	b.n	800b1e4 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 800b1cc:	4b0c      	ldr	r3, [pc, #48]	; (800b200 <check_DHCP_timeout+0xbc>)
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	71fb      	strb	r3, [r7, #7]
				break;
 800b1d6:	e006      	b.n	800b1e6 <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 800b1d8:	f7fe feda 	bl	8009f90 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 800b1dc:	4b08      	ldr	r3, [pc, #32]	; (800b200 <check_DHCP_timeout+0xbc>)
 800b1de:	2201      	movs	r2, #1
 800b1e0:	701a      	strb	r2, [r3, #0]
				break;
 800b1e2:	e000      	b.n	800b1e6 <check_DHCP_timeout+0xa2>
				break;
 800b1e4:	bf00      	nop
		}
		reset_DHCP_timeout();
 800b1e6:	f000 f8e5 	bl	800b3b4 <reset_DHCP_timeout>
	}
	return ret;
 800b1ea:	79fb      	ldrb	r3, [r7, #7]
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3708      	adds	r7, #8
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}
 800b1f4:	20000985 	.word	0x20000985
 800b1f8:	200000f4 	.word	0x200000f4
 800b1fc:	20000988 	.word	0x20000988
 800b200:	20000984 	.word	0x20000984

0800b204 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 800b20a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800b20e:	f7fc fca7 	bl	8007b60 <WIZCHIP_READ>
 800b212:	4603      	mov	r3, r0
 800b214:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 800b216:	2103      	movs	r1, #3
 800b218:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800b21c:	f7fc fcec 	bl	8007bf8 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 800b220:	4b15      	ldr	r3, [pc, #84]	; (800b278 <check_DHCP_leasedIP+0x74>)
 800b222:	7818      	ldrb	r0, [r3, #0]
 800b224:	f241 3388 	movw	r3, #5000	; 0x1388
 800b228:	9300      	str	r3, [sp, #0]
 800b22a:	4b14      	ldr	r3, [pc, #80]	; (800b27c <check_DHCP_leasedIP+0x78>)
 800b22c:	2211      	movs	r2, #17
 800b22e:	4914      	ldr	r1, [pc, #80]	; (800b280 <check_DHCP_leasedIP+0x7c>)
 800b230:	f7fd fc64 	bl	8008afc <sendto>
 800b234:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 800b236:	79fb      	ldrb	r3, [r7, #7]
 800b238:	4619      	mov	r1, r3
 800b23a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800b23e:	f7fc fcdb 	bl	8007bf8 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	f113 0f0d 	cmn.w	r3, #13
 800b248:	d101      	bne.n	800b24e <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 800b24a:	2301      	movs	r3, #1
 800b24c:	e010      	b.n	800b270 <check_DHCP_leasedIP+0x6c>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 800b24e:	f7ff faef 	bl	800a830 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 800b252:	4b0c      	ldr	r3, [pc, #48]	; (800b284 <check_DHCP_leasedIP+0x80>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2){ // wait for 1s over; wait to complete to send DECLINE message;
 800b258:	e003      	b.n	800b262 <check_DHCP_leasedIP+0x5e>

			delay(200);
 800b25a:	4b0b      	ldr	r3, [pc, #44]	; (800b288 <check_DHCP_leasedIP+0x84>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	20c8      	movs	r0, #200	; 0xc8
 800b260:	4798      	blx	r3
		while((dhcp_tick_1s - ret) < 2){ // wait for 1s over; wait to complete to send DECLINE message;
 800b262:	4b08      	ldr	r3, [pc, #32]	; (800b284 <check_DHCP_leasedIP+0x80>)
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	1ad3      	subs	r3, r2, r3
 800b26a:	2b01      	cmp	r3, #1
 800b26c:	d9f5      	bls.n	800b25a <check_DHCP_leasedIP+0x56>

		}
		return 0;
 800b26e:	2300      	movs	r3, #0
	}
}	
 800b270:	4618      	mov	r0, r3
 800b272:	3708      	adds	r7, #8
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}
 800b278:	20000965 	.word	0x20000965
 800b27c:	20000974 	.word	0x20000974
 800b280:	080212d4 	.word	0x080212d4
 800b284:	20000988 	.word	0x20000988
 800b288:	20000110 	.word	0x20000110

0800b28c <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
 800b292:	4603      	mov	r3, r0
 800b294:	6039      	str	r1, [r7, #0]
 800b296:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 800b298:	2300      	movs	r3, #0
 800b29a:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 800b29c:	2206      	movs	r2, #6
 800b29e:	493f      	ldr	r1, [pc, #252]	; (800b39c <DHCP_init+0x110>)
 800b2a0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800b2a4:	f7fc fcf6 	bl	8007c94 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 800b2a8:	4b3c      	ldr	r3, [pc, #240]	; (800b39c <DHCP_init+0x110>)
 800b2aa:	781a      	ldrb	r2, [r3, #0]
 800b2ac:	4b3b      	ldr	r3, [pc, #236]	; (800b39c <DHCP_init+0x110>)
 800b2ae:	785b      	ldrb	r3, [r3, #1]
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	b2da      	uxtb	r2, r3
 800b2b4:	4b39      	ldr	r3, [pc, #228]	; (800b39c <DHCP_init+0x110>)
 800b2b6:	789b      	ldrb	r3, [r3, #2]
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	b2da      	uxtb	r2, r3
 800b2bc:	4b37      	ldr	r3, [pc, #220]	; (800b39c <DHCP_init+0x110>)
 800b2be:	78db      	ldrb	r3, [r3, #3]
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	b2da      	uxtb	r2, r3
 800b2c4:	4b35      	ldr	r3, [pc, #212]	; (800b39c <DHCP_init+0x110>)
 800b2c6:	791b      	ldrb	r3, [r3, #4]
 800b2c8:	4313      	orrs	r3, r2
 800b2ca:	b2da      	uxtb	r2, r3
 800b2cc:	4b33      	ldr	r3, [pc, #204]	; (800b39c <DHCP_init+0x110>)
 800b2ce:	795b      	ldrb	r3, [r3, #5]
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	b2db      	uxtb	r3, r3
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d117      	bne.n	800b308 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 800b2d8:	4b30      	ldr	r3, [pc, #192]	; (800b39c <DHCP_init+0x110>)
 800b2da:	2200      	movs	r2, #0
 800b2dc:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 800b2de:	4b2f      	ldr	r3, [pc, #188]	; (800b39c <DHCP_init+0x110>)
 800b2e0:	2208      	movs	r2, #8
 800b2e2:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 800b2e4:	4b2d      	ldr	r3, [pc, #180]	; (800b39c <DHCP_init+0x110>)
 800b2e6:	22dc      	movs	r2, #220	; 0xdc
 800b2e8:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 800b2ea:	4b2c      	ldr	r3, [pc, #176]	; (800b39c <DHCP_init+0x110>)
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 800b2f0:	4b2a      	ldr	r3, [pc, #168]	; (800b39c <DHCP_init+0x110>)
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 800b2f6:	4b29      	ldr	r3, [pc, #164]	; (800b39c <DHCP_init+0x110>)
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 800b2fc:	2206      	movs	r2, #6
 800b2fe:	4927      	ldr	r1, [pc, #156]	; (800b39c <DHCP_init+0x110>)
 800b300:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800b304:	f7fc fd26 	bl	8007d54 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 800b308:	4a25      	ldr	r2, [pc, #148]	; (800b3a0 <DHCP_init+0x114>)
 800b30a:	79fb      	ldrb	r3, [r7, #7]
 800b30c:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 800b30e:	4a25      	ldr	r2, [pc, #148]	; (800b3a4 <DHCP_init+0x118>)
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 800b314:	4b24      	ldr	r3, [pc, #144]	; (800b3a8 <DHCP_init+0x11c>)
 800b316:	4a25      	ldr	r2, [pc, #148]	; (800b3ac <DHCP_init+0x120>)
 800b318:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 800b31a:	4b20      	ldr	r3, [pc, #128]	; (800b39c <DHCP_init+0x110>)
 800b31c:	78db      	ldrb	r3, [r3, #3]
 800b31e:	461a      	mov	r2, r3
 800b320:	4b21      	ldr	r3, [pc, #132]	; (800b3a8 <DHCP_init+0x11c>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4413      	add	r3, r2
 800b326:	4a20      	ldr	r2, [pc, #128]	; (800b3a8 <DHCP_init+0x11c>)
 800b328:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 800b32a:	4b1c      	ldr	r3, [pc, #112]	; (800b39c <DHCP_init+0x110>)
 800b32c:	791b      	ldrb	r3, [r3, #4]
 800b32e:	461a      	mov	r2, r3
 800b330:	4b1d      	ldr	r3, [pc, #116]	; (800b3a8 <DHCP_init+0x11c>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4413      	add	r3, r2
 800b336:	4a1c      	ldr	r2, [pc, #112]	; (800b3a8 <DHCP_init+0x11c>)
 800b338:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 800b33a:	4b18      	ldr	r3, [pc, #96]	; (800b39c <DHCP_init+0x110>)
 800b33c:	795b      	ldrb	r3, [r3, #5]
 800b33e:	461a      	mov	r2, r3
 800b340:	4b19      	ldr	r3, [pc, #100]	; (800b3a8 <DHCP_init+0x11c>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4413      	add	r3, r2
 800b346:	4a18      	ldr	r2, [pc, #96]	; (800b3a8 <DHCP_init+0x11c>)
 800b348:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 800b34a:	4b14      	ldr	r3, [pc, #80]	; (800b39c <DHCP_init+0x110>)
 800b34c:	78da      	ldrb	r2, [r3, #3]
 800b34e:	4b13      	ldr	r3, [pc, #76]	; (800b39c <DHCP_init+0x110>)
 800b350:	791b      	ldrb	r3, [r3, #4]
 800b352:	4053      	eors	r3, r2
 800b354:	b2da      	uxtb	r2, r3
 800b356:	4b11      	ldr	r3, [pc, #68]	; (800b39c <DHCP_init+0x110>)
 800b358:	795b      	ldrb	r3, [r3, #5]
 800b35a:	4053      	eors	r3, r2
 800b35c:	b2db      	uxtb	r3, r3
 800b35e:	461a      	mov	r2, r3
 800b360:	4b11      	ldr	r3, [pc, #68]	; (800b3a8 <DHCP_init+0x11c>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4413      	add	r3, r2
 800b366:	4a10      	ldr	r2, [pc, #64]	; (800b3a8 <DHCP_init+0x11c>)
 800b368:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 800b36a:	f107 030c 	add.w	r3, r7, #12
 800b36e:	2204      	movs	r2, #4
 800b370:	4619      	mov	r1, r3
 800b372:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800b376:	f7fc fced 	bl	8007d54 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 800b37a:	f107 030c 	add.w	r3, r7, #12
 800b37e:	2204      	movs	r2, #4
 800b380:	4619      	mov	r1, r3
 800b382:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b386:	f7fc fce5 	bl	8007d54 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 800b38a:	f000 f813 	bl	800b3b4 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 800b38e:	4b08      	ldr	r3, [pc, #32]	; (800b3b0 <DHCP_init+0x124>)
 800b390:	2200      	movs	r2, #0
 800b392:	701a      	strb	r2, [r3, #0]
}
 800b394:	bf00      	nop
 800b396:	3710      	adds	r7, #16
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}
 800b39c:	20000994 	.word	0x20000994
 800b3a0:	20000965 	.word	0x20000965
 800b3a4:	20000990 	.word	0x20000990
 800b3a8:	2000098c 	.word	0x2000098c
 800b3ac:	12345678 	.word	0x12345678
 800b3b0:	20000984 	.word	0x20000984

0800b3b4 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 800b3b8:	4b06      	ldr	r3, [pc, #24]	; (800b3d4 <reset_DHCP_timeout+0x20>)
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 800b3be:	4b06      	ldr	r3, [pc, #24]	; (800b3d8 <reset_DHCP_timeout+0x24>)
 800b3c0:	2202      	movs	r2, #2
 800b3c2:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 800b3c4:	4b05      	ldr	r3, [pc, #20]	; (800b3dc <reset_DHCP_timeout+0x28>)
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	701a      	strb	r2, [r3, #0]
}
 800b3ca:	bf00      	nop
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr
 800b3d4:	20000988 	.word	0x20000988
 800b3d8:	200000f4 	.word	0x200000f4
 800b3dc:	20000985 	.word	0x20000985

0800b3e0 <DHCP_time_handler>:

void DHCP_time_handler(void)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 800b3e4:	4b04      	ldr	r3, [pc, #16]	; (800b3f8 <DHCP_time_handler+0x18>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	4a03      	ldr	r2, [pc, #12]	; (800b3f8 <DHCP_time_handler+0x18>)
 800b3ec:	6013      	str	r3, [r2, #0]
}
 800b3ee:	bf00      	nop
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr
 800b3f8:	20000988 	.word	0x20000988

0800b3fc <getIPfromDHCP>:

void getIPfromDHCP(uint8_t* ip)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 800b404:	4b0c      	ldr	r3, [pc, #48]	; (800b438 <getIPfromDHCP+0x3c>)
 800b406:	781a      	ldrb	r2, [r3, #0]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	3301      	adds	r3, #1
 800b410:	4a09      	ldr	r2, [pc, #36]	; (800b438 <getIPfromDHCP+0x3c>)
 800b412:	7852      	ldrb	r2, [r2, #1]
 800b414:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	3302      	adds	r3, #2
 800b41a:	4a07      	ldr	r2, [pc, #28]	; (800b438 <getIPfromDHCP+0x3c>)
 800b41c:	7892      	ldrb	r2, [r2, #2]
 800b41e:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	3303      	adds	r3, #3
 800b424:	4a04      	ldr	r2, [pc, #16]	; (800b438 <getIPfromDHCP+0x3c>)
 800b426:	78d2      	ldrb	r2, [r2, #3]
 800b428:	701a      	strb	r2, [r3, #0]
}
 800b42a:	bf00      	nop
 800b42c:	370c      	adds	r7, #12
 800b42e:	46bd      	mov	sp, r7
 800b430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b434:	4770      	bx	lr
 800b436:	bf00      	nop
 800b438:	20000974 	.word	0x20000974

0800b43c <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 800b444:	4b0c      	ldr	r3, [pc, #48]	; (800b478 <getGWfromDHCP+0x3c>)
 800b446:	781a      	ldrb	r2, [r3, #0]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	3301      	adds	r3, #1
 800b450:	4a09      	ldr	r2, [pc, #36]	; (800b478 <getGWfromDHCP+0x3c>)
 800b452:	7852      	ldrb	r2, [r2, #1]
 800b454:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	3302      	adds	r3, #2
 800b45a:	4a07      	ldr	r2, [pc, #28]	; (800b478 <getGWfromDHCP+0x3c>)
 800b45c:	7892      	ldrb	r2, [r2, #2]
 800b45e:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	3303      	adds	r3, #3
 800b464:	4a04      	ldr	r2, [pc, #16]	; (800b478 <getGWfromDHCP+0x3c>)
 800b466:	78d2      	ldrb	r2, [r2, #3]
 800b468:	701a      	strb	r2, [r3, #0]
}
 800b46a:	bf00      	nop
 800b46c:	370c      	adds	r7, #12
 800b46e:	46bd      	mov	sp, r7
 800b470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b474:	4770      	bx	lr
 800b476:	bf00      	nop
 800b478:	20000978 	.word	0x20000978

0800b47c <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b083      	sub	sp, #12
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 800b484:	4b0c      	ldr	r3, [pc, #48]	; (800b4b8 <getSNfromDHCP+0x3c>)
 800b486:	781a      	ldrb	r2, [r3, #0]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	3301      	adds	r3, #1
 800b490:	4a09      	ldr	r2, [pc, #36]	; (800b4b8 <getSNfromDHCP+0x3c>)
 800b492:	7852      	ldrb	r2, [r2, #1]
 800b494:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	3302      	adds	r3, #2
 800b49a:	4a07      	ldr	r2, [pc, #28]	; (800b4b8 <getSNfromDHCP+0x3c>)
 800b49c:	7892      	ldrb	r2, [r2, #2]
 800b49e:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	3303      	adds	r3, #3
 800b4a4:	4a04      	ldr	r2, [pc, #16]	; (800b4b8 <getSNfromDHCP+0x3c>)
 800b4a6:	78d2      	ldrb	r2, [r2, #3]
 800b4a8:	701a      	strb	r2, [r3, #0]
}
 800b4aa:	bf00      	nop
 800b4ac:	370c      	adds	r7, #12
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop
 800b4b8:	2000097c 	.word	0x2000097c

0800b4bc <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b083      	sub	sp, #12
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 800b4c4:	4b0c      	ldr	r3, [pc, #48]	; (800b4f8 <getDNSfromDHCP+0x3c>)
 800b4c6:	781a      	ldrb	r2, [r3, #0]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	4a09      	ldr	r2, [pc, #36]	; (800b4f8 <getDNSfromDHCP+0x3c>)
 800b4d2:	7852      	ldrb	r2, [r2, #1]
 800b4d4:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	3302      	adds	r3, #2
 800b4da:	4a07      	ldr	r2, [pc, #28]	; (800b4f8 <getDNSfromDHCP+0x3c>)
 800b4dc:	7892      	ldrb	r2, [r2, #2]
 800b4de:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	3303      	adds	r3, #3
 800b4e4:	4a04      	ldr	r2, [pc, #16]	; (800b4f8 <getDNSfromDHCP+0x3c>)
 800b4e6:	78d2      	ldrb	r2, [r2, #3]
 800b4e8:	701a      	strb	r2, [r3, #0]
}
 800b4ea:	bf00      	nop
 800b4ec:	370c      	adds	r7, #12
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f4:	4770      	bx	lr
 800b4f6:	bf00      	nop
 800b4f8:	20000980 	.word	0x20000980

0800b4fc <getDHCPLeasetime>:

uint32_t getDHCPLeasetime(void)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	af00      	add	r7, sp, #0
	return dhcp_lease_time;
 800b500:	4b03      	ldr	r3, [pc, #12]	; (800b510 <getDHCPLeasetime+0x14>)
 800b502:	681b      	ldr	r3, [r3, #0]
}
 800b504:	4618      	mov	r0, r3
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr
 800b50e:	bf00      	nop
 800b510:	200000f0 	.word	0x200000f0

0800b514 <NibbleToHex>:

char NibbleToHex(uint8_t nibble)
{
 800b514:	b480      	push	{r7}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
 800b51a:	4603      	mov	r3, r0
 800b51c:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 800b51e:	79fb      	ldrb	r3, [r7, #7]
 800b520:	f003 030f 	and.w	r3, r3, #15
 800b524:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 800b526:	79fb      	ldrb	r3, [r7, #7]
 800b528:	2b09      	cmp	r3, #9
 800b52a:	d803      	bhi.n	800b534 <NibbleToHex+0x20>
    return nibble + '0';
 800b52c:	79fb      	ldrb	r3, [r7, #7]
 800b52e:	3330      	adds	r3, #48	; 0x30
 800b530:	b2db      	uxtb	r3, r3
 800b532:	e002      	b.n	800b53a <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 800b534:	79fb      	ldrb	r3, [r7, #7]
 800b536:	3337      	adds	r3, #55	; 0x37
 800b538:	b2db      	uxtb	r3, r3
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	370c      	adds	r7, #12
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr

0800b546 <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 800b546:	b480      	push	{r7}
 800b548:	b085      	sub	sp, #20
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	1c5a      	adds	r2, r3, #1
 800b552:	607a      	str	r2, [r7, #4]
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	b29b      	uxth	r3, r3
 800b558:	021b      	lsls	r3, r3, #8
 800b55a:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	b29a      	uxth	r2, r3
 800b562:	89fb      	ldrh	r3, [r7, #14]
 800b564:	4413      	add	r3, r2
 800b566:	81fb      	strh	r3, [r7, #14]
	return i;
 800b568:	89fb      	ldrh	r3, [r7, #14]
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3714      	adds	r7, #20
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr

0800b576 <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 800b576:	b480      	push	{r7}
 800b578:	b083      	sub	sp, #12
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
 800b57e:	460b      	mov	r3, r1
 800b580:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 800b582:	887b      	ldrh	r3, [r7, #2]
 800b584:	0a1b      	lsrs	r3, r3, #8
 800b586:	b299      	uxth	r1, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	1c5a      	adds	r2, r3, #1
 800b58c:	607a      	str	r2, [r7, #4]
 800b58e:	b2ca      	uxtb	r2, r1
 800b590:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	1c5a      	adds	r2, r3, #1
 800b596:	607a      	str	r2, [r7, #4]
 800b598:	887a      	ldrh	r2, [r7, #2]
 800b59a:	b2d2      	uxtb	r2, r2
 800b59c:	701a      	strb	r2, [r3, #0]
	return s;
 800b59e:	687b      	ldr	r3, [r7, #4]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	370c      	adds	r7, #12
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b08b      	sub	sp, #44	; 0x2c
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	60b9      	str	r1, [r7, #8]
 800b5b6:	607a      	str	r2, [r7, #4]
 800b5b8:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 800b5be:	2300      	movs	r3, #0
 800b5c0:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	617b      	str	r3, [r7, #20]

	cp = compressed;
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 800b5ca:	6a3b      	ldr	r3, [r7, #32]
 800b5cc:	1c5a      	adds	r2, r3, #1
 800b5ce:	623a      	str	r2, [r7, #32]
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (!indirect) clen++;
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d102      	bne.n	800b5e0 <parse_name+0x34>
 800b5da:	69fb      	ldr	r3, [r7, #28]
 800b5dc:	3301      	adds	r3, #1
 800b5de:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 800b5e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b5e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b5e6:	2bc0      	cmp	r3, #192	; 0xc0
 800b5e8:	d117      	bne.n	800b61a <parse_name+0x6e>
		{
			if (!indirect)
 800b5ea:	69bb      	ldr	r3, [r7, #24]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d102      	bne.n	800b5f6 <parse_name+0x4a>
				clen++;
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 800b5fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b5fc:	021b      	lsls	r3, r3, #8
 800b5fe:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800b602:	6a3a      	ldr	r2, [r7, #32]
 800b604:	7812      	ldrb	r2, [r2, #0]
 800b606:	4413      	add	r3, r2
 800b608:	461a      	mov	r2, r3
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	4413      	add	r3, r2
 800b60e:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 800b610:	6a3b      	ldr	r3, [r7, #32]
 800b612:	1c5a      	adds	r2, r3, #1
 800b614:	623a      	str	r2, [r7, #32]
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		if (slen == 0)	/* zero length == all done */
 800b61a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d02b      	beq.n	800b678 <parse_name+0xcc>
			break;

		len -= slen + 1;
 800b620:	887a      	ldrh	r2, [r7, #2]
 800b622:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b624:	1ad3      	subs	r3, r2, r3
 800b626:	b29b      	uxth	r3, r3
 800b628:	3b01      	subs	r3, #1
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 800b62e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b632:	2b00      	cmp	r3, #0
 800b634:	da02      	bge.n	800b63c <parse_name+0x90>
 800b636:	f04f 33ff 	mov.w	r3, #4294967295
 800b63a:	e038      	b.n	800b6ae <parse_name+0x102>

		if (!indirect) clen += slen;
 800b63c:	69bb      	ldr	r3, [r7, #24]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d10c      	bne.n	800b65c <parse_name+0xb0>
 800b642:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b644:	69fa      	ldr	r2, [r7, #28]
 800b646:	4413      	add	r3, r2
 800b648:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 800b64a:	e007      	b.n	800b65c <parse_name+0xb0>
 800b64c:	6a3a      	ldr	r2, [r7, #32]
 800b64e:	1c53      	adds	r3, r2, #1
 800b650:	623b      	str	r3, [r7, #32]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	1c59      	adds	r1, r3, #1
 800b656:	6079      	str	r1, [r7, #4]
 800b658:	7812      	ldrb	r2, [r2, #0]
 800b65a:	701a      	strb	r2, [r3, #0]
 800b65c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b65e:	1e5a      	subs	r2, r3, #1
 800b660:	84fa      	strh	r2, [r7, #38]	; 0x26
 800b662:	2b00      	cmp	r3, #0
 800b664:	d1f2      	bne.n	800b64c <parse_name+0xa0>
		*buf++ = '.';
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	1c5a      	adds	r2, r3, #1
 800b66a:	607a      	str	r2, [r7, #4]
 800b66c:	222e      	movs	r2, #46	; 0x2e
 800b66e:	701a      	strb	r2, [r3, #0]
		nseg++;
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	3301      	adds	r3, #1
 800b674:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 800b676:	e7a8      	b.n	800b5ca <parse_name+0x1e>
			break;
 800b678:	bf00      	nop
	}

	if (nseg == 0)
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d10a      	bne.n	800b696 <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	1c5a      	adds	r2, r3, #1
 800b684:	607a      	str	r2, [r7, #4]
 800b686:	222e      	movs	r2, #46	; 0x2e
 800b688:	701a      	strb	r2, [r3, #0]
		len--;
 800b68a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b68e:	b29b      	uxth	r3, r3
 800b690:	3b01      	subs	r3, #1
 800b692:	b29b      	uxth	r3, r3
 800b694:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	1c5a      	adds	r2, r3, #1
 800b69a:	607a      	str	r2, [r7, #4]
 800b69c:	2200      	movs	r2, #0
 800b69e:	701a      	strb	r2, [r3, #0]
	len--;
 800b6a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	3b01      	subs	r3, #1
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 800b6ac:	69fb      	ldr	r3, [r7, #28]
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	372c      	adds	r7, #44	; 0x2c
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr

0800b6ba <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 800b6ba:	b580      	push	{r7, lr}
 800b6bc:	b0b4      	sub	sp, #208	; 0xd0
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
 800b6c2:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 800b6c4:	f107 020c 	add.w	r2, r7, #12
 800b6c8:	23c0      	movs	r3, #192	; 0xc0
 800b6ca:	6839      	ldr	r1, [r7, #0]
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f7ff ff6d 	bl	800b5ac <parse_name>
 800b6d2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc


	if (len == -1) return 0;
 800b6d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b6da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6de:	d101      	bne.n	800b6e4 <dns_question+0x2a>
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	e00b      	b.n	800b6fc <dns_question+0x42>

	cp += len;
 800b6e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b6e8:	683a      	ldr	r2, [r7, #0]
 800b6ea:	4413      	add	r3, r2
 800b6ec:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	3302      	adds	r3, #2
 800b6f2:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	3302      	adds	r3, #2
 800b6f8:	603b      	str	r3, [r7, #0]

	return cp;
 800b6fa:	683b      	ldr	r3, [r7, #0]
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	37d0      	adds	r7, #208	; 0xd0
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}

0800b704 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b0b6      	sub	sp, #216	; 0xd8
 800b708:	af00      	add	r7, sp, #0
 800b70a:	60f8      	str	r0, [r7, #12]
 800b70c:	60b9      	str	r1, [r7, #8]
 800b70e:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 800b710:	f107 0210 	add.w	r2, r7, #16
 800b714:	23c0      	movs	r3, #192	; 0xc0
 800b716:	68b9      	ldr	r1, [r7, #8]
 800b718:	68f8      	ldr	r0, [r7, #12]
 800b71a:	f7ff ff47 	bl	800b5ac <parse_name>
 800b71e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

	if (len == -1) return 0;
 800b722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b72a:	d101      	bne.n	800b730 <dns_answer+0x2c>
 800b72c:	2300      	movs	r3, #0
 800b72e:	e0f9      	b.n	800b924 <dns_answer+0x220>

	cp += len;
 800b730:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b734:	68ba      	ldr	r2, [r7, #8]
 800b736:	4413      	add	r3, r2
 800b738:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 800b73a:	68b8      	ldr	r0, [r7, #8]
 800b73c:	f7ff ff03 	bl	800b546 <get16>
 800b740:	4603      	mov	r3, r0
 800b742:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	cp += 2;		/* type */
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	3302      	adds	r3, #2
 800b74a:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	3302      	adds	r3, #2
 800b750:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	3304      	adds	r3, #4
 800b756:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	3302      	adds	r3, #2
 800b75c:	60bb      	str	r3, [r7, #8]


	switch (type)
 800b75e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b762:	2b10      	cmp	r3, #16
 800b764:	f000 80da 	beq.w	800b91c <dns_answer+0x218>
 800b768:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b76c:	2b10      	cmp	r3, #16
 800b76e:	f300 80d7 	bgt.w	800b920 <dns_answer+0x21c>
 800b772:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b776:	2b0f      	cmp	r3, #15
 800b778:	d07d      	beq.n	800b876 <dns_answer+0x172>
 800b77a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b77e:	2b0f      	cmp	r3, #15
 800b780:	f300 80ce 	bgt.w	800b920 <dns_answer+0x21c>
 800b784:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b788:	2b0c      	cmp	r3, #12
 800b78a:	dc26      	bgt.n	800b7da <dns_answer+0xd6>
 800b78c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b790:	2b00      	cmp	r3, #0
 800b792:	f340 80c5 	ble.w	800b920 <dns_answer+0x21c>
 800b796:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b79a:	2201      	movs	r2, #1
 800b79c:	fa02 f303 	lsl.w	r3, r2, r3
 800b7a0:	f241 32a4 	movw	r2, #5028	; 0x13a4
 800b7a4:	401a      	ands	r2, r3
 800b7a6:	2a00      	cmp	r2, #0
 800b7a8:	bf14      	ite	ne
 800b7aa:	2201      	movne	r2, #1
 800b7ac:	2200      	moveq	r2, #0
 800b7ae:	b2d2      	uxtb	r2, r2
 800b7b0:	2a00      	cmp	r2, #0
 800b7b2:	d133      	bne.n	800b81c <dns_answer+0x118>
 800b7b4:	f003 0240 	and.w	r2, r3, #64	; 0x40
 800b7b8:	2a00      	cmp	r2, #0
 800b7ba:	bf14      	ite	ne
 800b7bc:	2201      	movne	r2, #1
 800b7be:	2200      	moveq	r2, #0
 800b7c0:	b2d2      	uxtb	r2, r2
 800b7c2:	2a00      	cmp	r2, #0
 800b7c4:	d170      	bne.n	800b8a8 <dns_answer+0x1a4>
 800b7c6:	f003 0302 	and.w	r3, r3, #2
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	bf14      	ite	ne
 800b7ce:	2301      	movne	r3, #1
 800b7d0:	2300      	moveq	r3, #0
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d105      	bne.n	800b7e4 <dns_answer+0xe0>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 800b7d8:	e0a2      	b.n	800b920 <dns_answer+0x21c>
	switch (type)
 800b7da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b7de:	2b0d      	cmp	r3, #13
 800b7e0:	d032      	beq.n	800b848 <dns_answer+0x144>
		break;
 800b7e2:	e09d      	b.n	800b920 <dns_answer+0x21c>
		ip_from_dns[0] = *cp++;
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	1c5a      	adds	r2, r3, #1
 800b7e8:	60ba      	str	r2, [r7, #8]
 800b7ea:	781a      	ldrb	r2, [r3, #0]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	1c5a      	adds	r2, r3, #1
 800b7f4:	60ba      	str	r2, [r7, #8]
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	3201      	adds	r2, #1
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	1c5a      	adds	r2, r3, #1
 800b802:	60ba      	str	r2, [r7, #8]
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	3202      	adds	r2, #2
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	1c5a      	adds	r2, r3, #1
 800b810:	60ba      	str	r2, [r7, #8]
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	3203      	adds	r2, #3
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	7013      	strb	r3, [r2, #0]
		break;
 800b81a:	e082      	b.n	800b922 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 800b81c:	f107 0210 	add.w	r2, r7, #16
 800b820:	23c0      	movs	r3, #192	; 0xc0
 800b822:	68b9      	ldr	r1, [r7, #8]
 800b824:	68f8      	ldr	r0, [r7, #12]
 800b826:	f7ff fec1 	bl	800b5ac <parse_name>
 800b82a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 800b82e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b832:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b836:	d101      	bne.n	800b83c <dns_answer+0x138>
 800b838:	2300      	movs	r3, #0
 800b83a:	e073      	b.n	800b924 <dns_answer+0x220>
		cp += len;
 800b83c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b840:	68ba      	ldr	r2, [r7, #8]
 800b842:	4413      	add	r3, r2
 800b844:	60bb      	str	r3, [r7, #8]
		break;
 800b846:	e06c      	b.n	800b922 <dns_answer+0x21e>
		len = *cp++;
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	1c5a      	adds	r2, r3, #1
 800b84c:	60ba      	str	r2, [r7, #8]
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 800b854:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b858:	68ba      	ldr	r2, [r7, #8]
 800b85a:	4413      	add	r3, r2
 800b85c:	60bb      	str	r3, [r7, #8]
		len = *cp++;
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	1c5a      	adds	r2, r3, #1
 800b862:	60ba      	str	r2, [r7, #8]
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 800b86a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b86e:	68ba      	ldr	r2, [r7, #8]
 800b870:	4413      	add	r3, r2
 800b872:	60bb      	str	r3, [r7, #8]
		break;
 800b874:	e055      	b.n	800b922 <dns_answer+0x21e>
		cp += 2;
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	3302      	adds	r3, #2
 800b87a:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 800b87c:	f107 0210 	add.w	r2, r7, #16
 800b880:	23c0      	movs	r3, #192	; 0xc0
 800b882:	68b9      	ldr	r1, [r7, #8]
 800b884:	68f8      	ldr	r0, [r7, #12]
 800b886:	f7ff fe91 	bl	800b5ac <parse_name>
 800b88a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 800b88e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b892:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b896:	d101      	bne.n	800b89c <dns_answer+0x198>
 800b898:	2300      	movs	r3, #0
 800b89a:	e043      	b.n	800b924 <dns_answer+0x220>
		cp += len;
 800b89c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b8a0:	68ba      	ldr	r2, [r7, #8]
 800b8a2:	4413      	add	r3, r2
 800b8a4:	60bb      	str	r3, [r7, #8]
		break;
 800b8a6:	e03c      	b.n	800b922 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 800b8a8:	f107 0210 	add.w	r2, r7, #16
 800b8ac:	23c0      	movs	r3, #192	; 0xc0
 800b8ae:	68b9      	ldr	r1, [r7, #8]
 800b8b0:	68f8      	ldr	r0, [r7, #12]
 800b8b2:	f7ff fe7b 	bl	800b5ac <parse_name>
 800b8b6:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 800b8ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8c2:	d101      	bne.n	800b8c8 <dns_answer+0x1c4>
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	e02d      	b.n	800b924 <dns_answer+0x220>
		cp += len;
 800b8c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b8cc:	68ba      	ldr	r2, [r7, #8]
 800b8ce:	4413      	add	r3, r2
 800b8d0:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 800b8d2:	f107 0210 	add.w	r2, r7, #16
 800b8d6:	23c0      	movs	r3, #192	; 0xc0
 800b8d8:	68b9      	ldr	r1, [r7, #8]
 800b8da:	68f8      	ldr	r0, [r7, #12]
 800b8dc:	f7ff fe66 	bl	800b5ac <parse_name>
 800b8e0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 800b8e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b8e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ec:	d101      	bne.n	800b8f2 <dns_answer+0x1ee>
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	e018      	b.n	800b924 <dns_answer+0x220>
		cp += len;
 800b8f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b8f6:	68ba      	ldr	r2, [r7, #8]
 800b8f8:	4413      	add	r3, r2
 800b8fa:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	3304      	adds	r3, #4
 800b900:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	3304      	adds	r3, #4
 800b906:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	3304      	adds	r3, #4
 800b90c:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	3304      	adds	r3, #4
 800b912:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	3304      	adds	r3, #4
 800b918:	60bb      	str	r3, [r7, #8]
		break;
 800b91a:	e002      	b.n	800b922 <dns_answer+0x21e>
		break;
 800b91c:	bf00      	nop
 800b91e:	e000      	b.n	800b922 <dns_answer+0x21e>
		break;
 800b920:	bf00      	nop
	}

	return cp;
 800b922:	68bb      	ldr	r3, [r7, #8]
}
 800b924:	4618      	mov	r0, r3
 800b926:	37d8      	adds	r7, #216	; 0xd8
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b088      	sub	sp, #32
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 800b93c:	2212      	movs	r2, #18
 800b93e:	2100      	movs	r1, #0
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	f010 fbb1 	bl	801c0a8 <memset>

	pdhdr->id = get16(&msg[0]);
 800b946:	6978      	ldr	r0, [r7, #20]
 800b948:	f7ff fdfd 	bl	800b546 <get16>
 800b94c:	4603      	mov	r3, r0
 800b94e:	461a      	mov	r2, r3
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	3302      	adds	r3, #2
 800b958:	4618      	mov	r0, r3
 800b95a:	f7ff fdf4 	bl	800b546 <get16>
 800b95e:	4603      	mov	r3, r0
 800b960:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 800b962:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b966:	2b00      	cmp	r3, #0
 800b968:	da02      	bge.n	800b970 <parseDNSMSG+0x44>
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2201      	movs	r2, #1
 800b96e:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 800b970:	8a7b      	ldrh	r3, [r7, #18]
 800b972:	0adb      	lsrs	r3, r3, #11
 800b974:	b29b      	uxth	r3, r3
 800b976:	b2db      	uxtb	r3, r3
 800b978:	f003 030f 	and.w	r3, r3, #15
 800b97c:	b2da      	uxtb	r2, r3
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 800b982:	8a7b      	ldrh	r3, [r7, #18]
 800b984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d002      	beq.n	800b992 <parseDNSMSG+0x66>
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2201      	movs	r2, #1
 800b990:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 800b992:	8a7b      	ldrh	r3, [r7, #18]
 800b994:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d002      	beq.n	800b9a2 <parseDNSMSG+0x76>
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 800b9a2:	8a7b      	ldrh	r3, [r7, #18]
 800b9a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d002      	beq.n	800b9b2 <parseDNSMSG+0x86>
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 800b9b2:	8a7b      	ldrh	r3, [r7, #18]
 800b9b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d002      	beq.n	800b9c2 <parseDNSMSG+0x96>
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 800b9c2:	8a7b      	ldrh	r3, [r7, #18]
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	f003 030f 	and.w	r3, r3, #15
 800b9ca:	b2da      	uxtb	r2, r3
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	3304      	adds	r3, #4
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7ff fdb6 	bl	800b546 <get16>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	461a      	mov	r2, r3
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	3306      	adds	r3, #6
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7ff fdad 	bl	800b546 <get16>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	3308      	adds	r3, #8
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7ff fda4 	bl	800b546 <get16>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	461a      	mov	r2, r3
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	330a      	adds	r3, #10
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7ff fd9b 	bl	800b546 <get16>
 800ba10:	4603      	mov	r3, r0
 800ba12:	461a      	mov	r2, r3
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	330c      	adds	r3, #12
 800ba1c:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 800ba1e:	2300      	movs	r3, #0
 800ba20:	83fb      	strh	r3, [r7, #30]
 800ba22:	e00d      	b.n	800ba40 <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 800ba24:	69b9      	ldr	r1, [r7, #24]
 800ba26:	6978      	ldr	r0, [r7, #20]
 800ba28:	f7ff fe47 	bl	800b6ba <dns_question>
 800ba2c:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 800ba2e:	69bb      	ldr	r3, [r7, #24]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d102      	bne.n	800ba3a <parseDNSMSG+0x10e>
 800ba34:	f04f 33ff 	mov.w	r3, #4294967295
 800ba38:	e03b      	b.n	800bab2 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 800ba3a:	8bfb      	ldrh	r3, [r7, #30]
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	83fb      	strh	r3, [r7, #30]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	895b      	ldrh	r3, [r3, #10]
 800ba44:	8bfa      	ldrh	r2, [r7, #30]
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d3ec      	bcc.n	800ba24 <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	83fb      	strh	r3, [r7, #30]
 800ba4e:	e00e      	b.n	800ba6e <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 800ba50:	687a      	ldr	r2, [r7, #4]
 800ba52:	69b9      	ldr	r1, [r7, #24]
 800ba54:	6978      	ldr	r0, [r7, #20]
 800ba56:	f7ff fe55 	bl	800b704 <dns_answer>
 800ba5a:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 800ba5c:	69bb      	ldr	r3, [r7, #24]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d102      	bne.n	800ba68 <parseDNSMSG+0x13c>
 800ba62:	f04f 33ff 	mov.w	r3, #4294967295
 800ba66:	e024      	b.n	800bab2 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 800ba68:	8bfb      	ldrh	r3, [r7, #30]
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	83fb      	strh	r3, [r7, #30]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	899b      	ldrh	r3, [r3, #12]
 800ba72:	8bfa      	ldrh	r2, [r7, #30]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d3eb      	bcc.n	800ba50 <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 800ba78:	2300      	movs	r3, #0
 800ba7a:	83fb      	strh	r3, [r7, #30]
 800ba7c:	e002      	b.n	800ba84 <parseDNSMSG+0x158>
 800ba7e:	8bfb      	ldrh	r3, [r7, #30]
 800ba80:	3301      	adds	r3, #1
 800ba82:	83fb      	strh	r3, [r7, #30]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	89db      	ldrh	r3, [r3, #14]
 800ba88:	8bfa      	ldrh	r2, [r7, #30]
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d3f7      	bcc.n	800ba7e <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 800ba8e:	2300      	movs	r3, #0
 800ba90:	83fb      	strh	r3, [r7, #30]
 800ba92:	e002      	b.n	800ba9a <parseDNSMSG+0x16e>
 800ba94:	8bfb      	ldrh	r3, [r7, #30]
 800ba96:	3301      	adds	r3, #1
 800ba98:	83fb      	strh	r3, [r7, #30]
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	8a1b      	ldrh	r3, [r3, #16]
 800ba9e:	8bfa      	ldrh	r2, [r7, #30]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d3f7      	bcc.n	800ba94 <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	7a1b      	ldrb	r3, [r3, #8]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d101      	bne.n	800bab0 <parseDNSMSG+0x184>
 800baac:	2301      	movs	r3, #1
 800baae:	e000      	b.n	800bab2 <parseDNSMSG+0x186>
	else return 0;
 800bab0:	2300      	movs	r3, #0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3720      	adds	r7, #32
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
	...

0800babc <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b0b8      	sub	sp, #224	; 0xe0
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	60b9      	str	r1, [r7, #8]
 800bac4:	607a      	str	r2, [r7, #4]
 800bac6:	461a      	mov	r2, r3
 800bac8:	4603      	mov	r3, r0
 800baca:	81fb      	strh	r3, [r7, #14]
 800bacc:	4613      	mov	r3, r2
 800bace:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	DNS_MSGID++;
 800bad6:	4b57      	ldr	r3, [pc, #348]	; (800bc34 <dns_makequery+0x178>)
 800bad8:	881b      	ldrh	r3, [r3, #0]
 800bada:	3301      	adds	r3, #1
 800badc:	b29a      	uxth	r2, r3
 800bade:	4b55      	ldr	r3, [pc, #340]	; (800bc34 <dns_makequery+0x178>)
 800bae0:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 800bae2:	4b54      	ldr	r3, [pc, #336]	; (800bc34 <dns_makequery+0x178>)
 800bae4:	881b      	ldrh	r3, [r3, #0]
 800bae6:	4619      	mov	r1, r3
 800bae8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800baec:	f7ff fd43 	bl	800b576 <put16>
 800baf0:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 800baf4:	89fb      	ldrh	r3, [r7, #14]
 800baf6:	02db      	lsls	r3, r3, #11
 800baf8:	b21b      	sxth	r3, r3
 800bafa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bafe:	b21b      	sxth	r3, r3
 800bb00:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	cp = put16(cp, p);
 800bb04:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800bb08:	4619      	mov	r1, r3
 800bb0a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800bb0e:	f7ff fd32 	bl	800b576 <put16>
 800bb12:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 1);
 800bb16:	2101      	movs	r1, #1
 800bb18:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800bb1c:	f7ff fd2b 	bl	800b576 <put16>
 800bb20:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 800bb24:	2100      	movs	r1, #0
 800bb26:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800bb2a:	f7ff fd24 	bl	800b576 <put16>
 800bb2e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 800bb32:	2100      	movs	r1, #0
 800bb34:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800bb38:	f7ff fd1d 	bl	800b576 <put16>
 800bb3c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 800bb40:	2100      	movs	r1, #0
 800bb42:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800bb46:	f7ff fd16 	bl	800b576 <put16>
 800bb4a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	strcpy(sname, name);
 800bb4e:	f107 0310 	add.w	r3, r7, #16
 800bb52:	68b9      	ldr	r1, [r7, #8]
 800bb54:	4618      	mov	r0, r3
 800bb56:	f010 fc74 	bl	801c442 <strcpy>
	dname = sname;
 800bb5a:	f107 0310 	add.w	r3, r7, #16
 800bb5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	dlen = strlen(dname);
 800bb62:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800bb66:	f7f4 fb9b 	bl	80002a0 <strlen>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 800bb70:	212e      	movs	r1, #46	; 0x2e
 800bb72:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800bb76:	f010 faae 	bl	801c0d6 <strchr>
 800bb7a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 800bb7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d006      	beq.n	800bb94 <dns_makequery+0xd8>
 800bb86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bb8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb8e:	1ad3      	subs	r3, r2, r3
 800bb90:	81bb      	strh	r3, [r7, #12]
 800bb92:	e002      	b.n	800bb9a <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 800bb94:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800bb98:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 800bb9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb9e:	1c5a      	adds	r2, r3, #1
 800bba0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bba4:	89ba      	ldrh	r2, [r7, #12]
 800bba6:	b2d2      	uxtb	r2, r2
 800bba8:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 800bbaa:	89bb      	ldrh	r3, [r7, #12]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d029      	beq.n	800bc04 <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 800bbb0:	89bb      	ldrh	r3, [r7, #12]
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800bbb8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800bbbc:	f010 face 	bl	801c15c <strncpy>
		cp += len;
 800bbc0:	89bb      	ldrh	r3, [r7, #12]
 800bbc2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bbc6:	4413      	add	r3, r2
 800bbc8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		if (cp1 == NULL)
 800bbcc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d107      	bne.n	800bbe4 <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 800bbd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbd8:	1c5a      	adds	r2, r3, #1
 800bbda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bbde:	2200      	movs	r2, #0
 800bbe0:	701a      	strb	r2, [r3, #0]
			break;
 800bbe2:	e010      	b.n	800bc06 <dns_makequery+0x14a>
		}
		dname += len+1;
 800bbe4:	89bb      	ldrh	r3, [r7, #12]
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800bbec:	4413      	add	r3, r2
 800bbee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		dlen -= len+1;
 800bbf2:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 800bbf6:	89bb      	ldrh	r3, [r7, #12]
 800bbf8:	1ad3      	subs	r3, r2, r3
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	3b01      	subs	r3, #1
 800bbfe:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		cp1 = strchr(dname, '.');
 800bc02:	e7b5      	b.n	800bb70 <dns_makequery+0xb4>
		if (len == 0) break;
 800bc04:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 800bc06:	2101      	movs	r1, #1
 800bc08:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800bc0c:	f7ff fcb3 	bl	800b576 <put16>
 800bc10:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0x0001);				/* class */
 800bc14:	2101      	movs	r1, #1
 800bc16:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800bc1a:	f7ff fcac 	bl	800b576 <put16>
 800bc1e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 800bc22:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	1ad3      	subs	r3, r2, r3
 800bc2a:	b21b      	sxth	r3, r3
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	37e0      	adds	r7, #224	; 0xe0
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	200009a2 	.word	0x200009a2

0800bc38 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 800bc3c:	4b0f      	ldr	r3, [pc, #60]	; (800bc7c <check_DNS_timeout+0x44>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	2b02      	cmp	r3, #2
 800bc42:	d914      	bls.n	800bc6e <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 800bc44:	4b0d      	ldr	r3, [pc, #52]	; (800bc7c <check_DNS_timeout+0x44>)
 800bc46:	2200      	movs	r2, #0
 800bc48:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 800bc4a:	4b0d      	ldr	r3, [pc, #52]	; (800bc80 <check_DNS_timeout+0x48>)
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d905      	bls.n	800bc5e <check_DNS_timeout+0x26>
			retry_count = 0;
 800bc52:	4b0b      	ldr	r3, [pc, #44]	; (800bc80 <check_DNS_timeout+0x48>)
 800bc54:	2200      	movs	r2, #0
 800bc56:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 800bc58:	f04f 33ff 	mov.w	r3, #4294967295
 800bc5c:	e008      	b.n	800bc70 <check_DNS_timeout+0x38>
		}
		retry_count++;
 800bc5e:	4b08      	ldr	r3, [pc, #32]	; (800bc80 <check_DNS_timeout+0x48>)
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	3301      	adds	r3, #1
 800bc64:	b2da      	uxtb	r2, r3
 800bc66:	4b06      	ldr	r3, [pc, #24]	; (800bc80 <check_DNS_timeout+0x48>)
 800bc68:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	e000      	b.n	800bc70 <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 800bc6e:	2301      	movs	r3, #1
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop
 800bc7c:	200009a4 	.word	0x200009a4
 800bc80:	200009a8 	.word	0x200009a8

0800bc84 <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	6039      	str	r1, [r7, #0]
 800bc8e:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 800bc90:	4a07      	ldr	r2, [pc, #28]	; (800bcb0 <DNS_init+0x2c>)
 800bc92:	79fb      	ldrb	r3, [r7, #7]
 800bc94:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 800bc96:	4a07      	ldr	r2, [pc, #28]	; (800bcb4 <DNS_init+0x30>)
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 800bc9c:	4b06      	ldr	r3, [pc, #24]	; (800bcb8 <DNS_init+0x34>)
 800bc9e:	f241 1222 	movw	r2, #4386	; 0x1122
 800bca2:	801a      	strh	r2, [r3, #0]
}
 800bca4:	bf00      	nop
 800bca6:	370c      	adds	r7, #12
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr
 800bcb0:	200009a0 	.word	0x200009a0
 800bcb4:	2000099c 	.word	0x2000099c
 800bcb8:	200009a2 	.word	0x200009a2

0800bcbc <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, const uint8_t * name, uint8_t * ip_from_dns)
{
 800bcbc:	b590      	push	{r4, r7, lr}
 800bcbe:	b08f      	sub	sp, #60	; 0x3c
 800bcc0:	af02      	add	r7, sp, #8
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 800bcc8:	4b3b      	ldr	r3, [pc, #236]	; (800bdb8 <DNS_run+0xfc>)
 800bcca:	2200      	movs	r2, #0
 800bccc:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 800bcce:	4b3b      	ldr	r3, [pc, #236]	; (800bdbc <DNS_run+0x100>)
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 800bcd4:	4b3a      	ldr	r3, [pc, #232]	; (800bdc0 <DNS_run+0x104>)
 800bcd6:	7818      	ldrb	r0, [r3, #0]
 800bcd8:	2300      	movs	r3, #0
 800bcda:	2200      	movs	r2, #0
 800bcdc:	2102      	movs	r1, #2
 800bcde:	f7fc fa2f 	bl	8008140 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 800bce2:	4b38      	ldr	r3, [pc, #224]	; (800bdc4 <DNS_run+0x108>)
 800bce4:	681a      	ldr	r2, [r3, #0]
 800bce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcea:	68b9      	ldr	r1, [r7, #8]
 800bcec:	2000      	movs	r0, #0
 800bcee:	f7ff fee5 	bl	800babc <dns_makequery>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 800bcf6:	4b32      	ldr	r3, [pc, #200]	; (800bdc0 <DNS_run+0x104>)
 800bcf8:	7818      	ldrb	r0, [r3, #0]
 800bcfa:	4b32      	ldr	r3, [pc, #200]	; (800bdc4 <DNS_run+0x108>)
 800bcfc:	6819      	ldr	r1, [r3, #0]
 800bcfe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bd00:	2335      	movs	r3, #53	; 0x35
 800bd02:	9300      	str	r3, [sp, #0]
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f7fc fef9 	bl	8008afc <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 800bd0a:	4b2d      	ldr	r3, [pc, #180]	; (800bdc0 <DNS_run+0x104>)
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7fc f8cb 	bl	8007eaa <getSn_RX_RSR>
 800bd14:	4603      	mov	r3, r0
 800bd16:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bd18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d029      	beq.n	800bd72 <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 800bd1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd24:	d902      	bls.n	800bd2c <DNS_run+0x70>
 800bd26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd2a:	85fb      	strh	r3, [r7, #46]	; 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 800bd2c:	4b24      	ldr	r3, [pc, #144]	; (800bdc0 <DNS_run+0x104>)
 800bd2e:	7818      	ldrb	r0, [r3, #0]
 800bd30:	4b24      	ldr	r3, [pc, #144]	; (800bdc4 <DNS_run+0x108>)
 800bd32:	6819      	ldr	r1, [r3, #0]
 800bd34:	f107 0414 	add.w	r4, r7, #20
 800bd38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bd3a:	f107 0312 	add.w	r3, r7, #18
 800bd3e:	9300      	str	r3, [sp, #0]
 800bd40:	4623      	mov	r3, r4
 800bd42:	f7fd f811 	bl	8008d68 <recvfrom>
 800bd46:	4603      	mov	r3, r0
 800bd48:	85fb      	strh	r3, [r7, #46]	; 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 800bd4a:	4b1e      	ldr	r3, [pc, #120]	; (800bdc4 <DNS_run+0x108>)
 800bd4c:	6819      	ldr	r1, [r3, #0]
 800bd4e:	f107 0318 	add.w	r3, r7, #24
 800bd52:	687a      	ldr	r2, [r7, #4]
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7ff fde9 	bl	800b92c <parseDNSMSG>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			break;
 800bd60:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 800bd62:	4b17      	ldr	r3, [pc, #92]	; (800bdc0 <DNS_run+0x104>)
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	4618      	mov	r0, r3
 800bd68:	f7fc fafe 	bl	8008368 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 800bd6c:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 800bd70:	e01e      	b.n	800bdb0 <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 800bd72:	f7ff ff61 	bl	800bc38 <check_DNS_timeout>
 800bd76:	4603      	mov	r3, r0
 800bd78:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (ret_check_timeout < 0) {
 800bd7c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	da06      	bge.n	800bd92 <DNS_run+0xd6>
			close(DNS_SOCKET);
 800bd84:	4b0e      	ldr	r3, [pc, #56]	; (800bdc0 <DNS_run+0x104>)
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f7fc faed 	bl	8008368 <close>
			return 0; // timeout occurred
 800bd8e:	2300      	movs	r3, #0
 800bd90:	e00e      	b.n	800bdb0 <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 800bd92:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d1b7      	bne.n	800bd0a <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 800bd9a:	4b09      	ldr	r3, [pc, #36]	; (800bdc0 <DNS_run+0x104>)
 800bd9c:	7818      	ldrb	r0, [r3, #0]
 800bd9e:	4b09      	ldr	r3, [pc, #36]	; (800bdc4 <DNS_run+0x108>)
 800bda0:	6819      	ldr	r1, [r3, #0]
 800bda2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bda4:	2335      	movs	r3, #53	; 0x35
 800bda6:	9300      	str	r3, [sp, #0]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f7fc fea7 	bl	8008afc <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 800bdae:	e7ac      	b.n	800bd0a <DNS_run+0x4e>
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3734      	adds	r7, #52	; 0x34
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd90      	pop	{r4, r7, pc}
 800bdb8:	200009a8 	.word	0x200009a8
 800bdbc:	200009a4 	.word	0x200009a4
 800bdc0:	200009a0 	.word	0x200009a0
 800bdc4:	2000099c 	.word	0x2000099c

0800bdc8 <DNS_time_handler>:


/* DNS TIMER HANDLER */
void DNS_time_handler(void)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	af00      	add	r7, sp, #0
	dns_1s_tick++;
 800bdcc:	4b04      	ldr	r3, [pc, #16]	; (800bde0 <DNS_time_handler+0x18>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	4a03      	ldr	r2, [pc, #12]	; (800bde0 <DNS_time_handler+0x18>)
 800bdd4:	6013      	str	r3, [r2, #0]
}
 800bdd6:	bf00      	nop
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr
 800bde0:	200009a4 	.word	0x200009a4

0800bde4 <Prototype>:
#include "definition.h"
#include "dns.h"
#include "string.h"


void Prototype(void){};
 800bde4:	b480      	push	{r7}
 800bde6:	af00      	add	r7, sp, #0
 800bde8:	bf00      	nop
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr
	...

0800bdf4 <dns_service_reg_cb_mutex>:

uint8_t  dns_server_ip[4];

//NetworkReady = *Prototype;

void dns_service_reg_cb_mutex(void (*get_mutex)(void), void (*release_mutex)(void)){
 800bdf4:	b480      	push	{r7}
 800bdf6:	b083      	sub	sp, #12
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	6039      	str	r1, [r7, #0]

	if (get_mutex) DNSMutexGet = get_mutex;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d002      	beq.n	800be0a <dns_service_reg_cb_mutex+0x16>
 800be04:	4a07      	ldr	r2, [pc, #28]	; (800be24 <dns_service_reg_cb_mutex+0x30>)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6013      	str	r3, [r2, #0]
	if (release_mutex) DNSMutexRelease = release_mutex;
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d002      	beq.n	800be16 <dns_service_reg_cb_mutex+0x22>
 800be10:	4a05      	ldr	r2, [pc, #20]	; (800be28 <dns_service_reg_cb_mutex+0x34>)
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	6013      	str	r3, [r2, #0]

}
 800be16:	bf00      	nop
 800be18:	370c      	adds	r7, #12
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop
 800be24:	20000114 	.word	0x20000114
 800be28:	20000118 	.word	0x20000118

0800be2c <dns_service_reg_cb_net_ready>:

void dns_service_reg_cb_net_ready(void (*func)){
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]

	if ( func ) NetworkReady = func;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d002      	beq.n	800be40 <dns_service_reg_cb_net_ready+0x14>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	4a03      	ldr	r2, [pc, #12]	; (800be4c <dns_service_reg_cb_net_ready+0x20>)
 800be3e:	6013      	str	r3, [r2, #0]

}
 800be40:	bf00      	nop
 800be42:	370c      	adds	r7, #12
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr
 800be4c:	2000011c 	.word	0x2000011c

0800be50 <dns_service_init>:

int dns_service_init(uint8_t socket, uint8_t * buf, uint16_t buf_len){
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	4603      	mov	r3, r0
 800be58:	6039      	str	r1, [r7, #0]
 800be5a:	71fb      	strb	r3, [r7, #7]
 800be5c:	4613      	mov	r3, r2
 800be5e:	80bb      	strh	r3, [r7, #4]

	if (buf_len < MAX_DNS_BUF_SIZE) return -1;
 800be60:	88bb      	ldrh	r3, [r7, #4]
 800be62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be66:	d202      	bcs.n	800be6e <dns_service_init+0x1e>
 800be68:	f04f 33ff 	mov.w	r3, #4294967295
 800be6c:	e005      	b.n	800be7a <dns_service_init+0x2a>
	// if buff  less then MAX_DNS_BUF_SIZE return error;
	DNS_init(socket, buf);
 800be6e:	79fb      	ldrb	r3, [r7, #7]
 800be70:	6839      	ldr	r1, [r7, #0]
 800be72:	4618      	mov	r0, r3
 800be74:	f7ff ff06 	bl	800bc84 <DNS_init>
	return 0;
 800be78:	2300      	movs	r3, #0
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3708      	adds	r7, #8
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
	...

0800be84 <dns_service_set_dns_ip>:

void dns_service_set_dns_ip(uint8_t * ip_addr){
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	461a      	mov	r2, r3
	memcpy(dns_server_ip, ip_addr, sizeof(dns_server_ip));
 800be92:	4b04      	ldr	r3, [pc, #16]	; (800bea4 <dns_service_set_dns_ip+0x20>)
 800be94:	601a      	str	r2, [r3, #0]
}
 800be96:	bf00      	nop
 800be98:	370c      	adds	r7, #12
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr
 800bea2:	bf00      	nop
 800bea4:	200009ac 	.word	0x200009ac

0800bea8 <dns_service_resolve_name>:

int8_t dns_service_resolve_name(const char * domain_name, uint8_t * resolved_ip){
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
#ifdef DNS_USE_MUTEX
	DNSMutexGet();
 800beb2:	4b0d      	ldr	r3, [pc, #52]	; (800bee8 <dns_service_resolve_name+0x40>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4798      	blx	r3
#endif
	int8_t err;
	if (NetworkReady){
 800beb8:	4b0c      	ldr	r3, [pc, #48]	; (800beec <dns_service_resolve_name+0x44>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d007      	beq.n	800bed0 <dns_service_resolve_name+0x28>
		err = DNS_run(dns_server_ip, domain_name, resolved_ip);
 800bec0:	683a      	ldr	r2, [r7, #0]
 800bec2:	6879      	ldr	r1, [r7, #4]
 800bec4:	480a      	ldr	r0, [pc, #40]	; (800bef0 <dns_service_resolve_name+0x48>)
 800bec6:	f7ff fef9 	bl	800bcbc <DNS_run>
 800beca:	4603      	mov	r3, r0
 800becc:	73fb      	strb	r3, [r7, #15]
 800bece:	e001      	b.n	800bed4 <dns_service_resolve_name+0x2c>
	}else{
		err = -1;
 800bed0:	23ff      	movs	r3, #255	; 0xff
 800bed2:	73fb      	strb	r3, [r7, #15]
	}


#ifdef DNS_USE_MUTEX
	DNSMutexRelease();
 800bed4:	4b07      	ldr	r3, [pc, #28]	; (800bef4 <dns_service_resolve_name+0x4c>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	4798      	blx	r3
#endif
	return err;
 800beda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3710      	adds	r7, #16
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	20000114 	.word	0x20000114
 800beec:	2000011c 	.word	0x2000011c
 800bef0:	200009ac 	.word	0x200009ac
 800bef4:	20000118 	.word	0x20000118

0800bef8 <dns_service_increment_second>:

void dns_service_increment_second(void){
 800bef8:	b580      	push	{r7, lr}
 800befa:	af00      	add	r7, sp, #0
	DNS_time_handler();
 800befc:	f7ff ff64 	bl	800bdc8 <DNS_time_handler>
}
 800bf00:	bf00      	nop
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <isValidIPv4>:
        str++; //point to next character
    }
    return 1;
}

bool isValidIPv4(const char* ipAddress) {
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b086      	sub	sp, #24
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
    if (ipAddress == NULL) {
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d101      	bne.n	800bf16 <isValidIPv4+0x12>
        return false;
 800bf12:	2300      	movs	r3, #0
 800bf14:	e068      	b.n	800bfe8 <isValidIPv4+0xe4>
    }

    int num = 0;    // Current segment value
 800bf16:	2300      	movs	r3, #0
 800bf18:	617b      	str	r3, [r7, #20]
    int count = 0;  // Count of segments in the IP address
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	613b      	str	r3, [r7, #16]
    int segmentLength = 0;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	60fb      	str	r3, [r7, #12]

    for (size_t i = 0; ipAddress[i] != '\0'; ++i) {
 800bf22:	2300      	movs	r3, #0
 800bf24:	60bb      	str	r3, [r7, #8]
 800bf26:	e043      	b.n	800bfb0 <isValidIPv4+0xac>
        if (isdigit((unsigned char)ipAddress[i])) {
 800bf28:	687a      	ldr	r2, [r7, #4]
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	4413      	add	r3, r2
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	3b30      	subs	r3, #48	; 0x30
 800bf32:	2b09      	cmp	r3, #9
 800bf34:	d818      	bhi.n	800bf68 <isValidIPv4+0x64>
            num = num * 10 + (ipAddress[i] - '0');
 800bf36:	697a      	ldr	r2, [r7, #20]
 800bf38:	4613      	mov	r3, r2
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	4413      	add	r3, r2
 800bf3e:	005b      	lsls	r3, r3, #1
 800bf40:	4619      	mov	r1, r3
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	4413      	add	r3, r2
 800bf48:	781b      	ldrb	r3, [r3, #0]
 800bf4a:	3b30      	subs	r3, #48	; 0x30
 800bf4c:	440b      	add	r3, r1
 800bf4e:	617b      	str	r3, [r7, #20]

            // Check if the segment value is in the valid range
            if (num < 0 || num > 255) {
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	db02      	blt.n	800bf5c <isValidIPv4+0x58>
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	2bff      	cmp	r3, #255	; 0xff
 800bf5a:	dd01      	ble.n	800bf60 <isValidIPv4+0x5c>
                return false;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	e043      	b.n	800bfe8 <isValidIPv4+0xe4>
            }

            segmentLength++;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	3301      	adds	r3, #1
 800bf64:	60fb      	str	r3, [r7, #12]
 800bf66:	e020      	b.n	800bfaa <isValidIPv4+0xa6>
        } else if (ipAddress[i] == '.') {
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	4413      	add	r3, r2
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	2b2e      	cmp	r3, #46	; 0x2e
 800bf72:	d118      	bne.n	800bfa6 <isValidIPv4+0xa2>
            // Check if the segment has leading zeros
            if (segmentLength > 1 && ipAddress[i - segmentLength] == '0') {
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2b01      	cmp	r3, #1
 800bf78:	dd09      	ble.n	800bf8e <isValidIPv4+0x8a>
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	68ba      	ldr	r2, [r7, #8]
 800bf7e:	1ad3      	subs	r3, r2, r3
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	4413      	add	r3, r2
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	2b30      	cmp	r3, #48	; 0x30
 800bf88:	d101      	bne.n	800bf8e <isValidIPv4+0x8a>
                return false;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	e02c      	b.n	800bfe8 <isValidIPv4+0xe4>
            }

            // Move to the next segment
            num = 0;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	617b      	str	r3, [r7, #20]
            count++;
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	3301      	adds	r3, #1
 800bf96:	613b      	str	r3, [r7, #16]
            segmentLength = 0;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	60fb      	str	r3, [r7, #12]

            // Check if there are more than 4 segments
            if (count > 3) {
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	2b03      	cmp	r3, #3
 800bfa0:	dd03      	ble.n	800bfaa <isValidIPv4+0xa6>
                return false;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	e020      	b.n	800bfe8 <isValidIPv4+0xe4>
            }
        } else {
            // Invalid character in the IP address
            return false;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	e01e      	b.n	800bfe8 <isValidIPv4+0xe4>
    for (size_t i = 0; ipAddress[i] != '\0'; ++i) {
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	3301      	adds	r3, #1
 800bfae:	60bb      	str	r3, [r7, #8]
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	4413      	add	r3, r2
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d1b5      	bne.n	800bf28 <isValidIPv4+0x24>
        }
    }

    // Check if the last segment has leading zeros
    if (segmentLength > 1 && ipAddress[strlen(ipAddress) - segmentLength] == '0') {
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	dd0c      	ble.n	800bfdc <isValidIPv4+0xd8>
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f7f4 f96c 	bl	80002a0 <strlen>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	1ad3      	subs	r3, r2, r3
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	2b30      	cmp	r3, #48	; 0x30
 800bfd6:	d101      	bne.n	800bfdc <isValidIPv4+0xd8>
        return false;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	e005      	b.n	800bfe8 <isValidIPv4+0xe4>
    }

    // Check if there are exactly 4 segments in the IP address
    return count == 3;
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	2b03      	cmp	r3, #3
 800bfe0:	bf0c      	ite	eq
 800bfe2:	2301      	moveq	r3, #1
 800bfe4:	2300      	movne	r3, #0
 800bfe6:	b2db      	uxtb	r3, r3
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3718      	adds	r7, #24
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <NewMessageData>:
 * Contributors:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/
#include "MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 800bff0:	b480      	push	{r7}
 800bff2:	b085      	sub	sp, #20
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	60f8      	str	r0, [r7, #12]
 800bff8:	60b9      	str	r1, [r7, #8]
 800bffa:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	68ba      	ldr	r2, [r7, #8]
 800c000:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	601a      	str	r2, [r3, #0]
}
 800c008:	bf00      	nop
 800c00a:	3714      	adds	r7, #20
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr

0800c014 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 800c014:	b480      	push	{r7}
 800c016:	b083      	sub	sp, #12
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c024:	4293      	cmp	r3, r2
 800c026:	d003      	beq.n	800c030 <getNextPacketId+0x1c>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	3301      	adds	r3, #1
 800c02e:	e000      	b.n	800c032 <getNextPacketId+0x1e>
 800c030:	2301      	movs	r3, #1
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	6013      	str	r3, [r2, #0]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	370c      	adds	r7, #12
 800c03e:	46bd      	mov	sp, r7
 800c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c044:	4770      	bx	lr

0800c046 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 800c046:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c048:	b087      	sub	sp, #28
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	60f8      	str	r0, [r7, #12]
 800c04e:	60b9      	str	r1, [r7, #8]
 800c050:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 800c052:	f04f 33ff 	mov.w	r3, #4294967295
 800c056:	617b      	str	r3, [r7, #20]
        sent = 0;
 800c058:	2300      	movs	r3, #0
 800c05a:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 800c05c:	e018      	b.n	800c090 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c062:	689c      	ldr	r4, [r3, #8]
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	691a      	ldr	r2, [r3, #16]
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	18d6      	adds	r6, r2, r3
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f000 fccb 	bl	800ca0c <TimerLeftMS>
 800c076:	4603      	mov	r3, r0
 800c078:	68ba      	ldr	r2, [r7, #8]
 800c07a:	4631      	mov	r1, r6
 800c07c:	4628      	mov	r0, r5
 800c07e:	47a0      	blx	r4
 800c080:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	2b00      	cmp	r3, #0
 800c086:	db0e      	blt.n	800c0a6 <sendPacket+0x60>
            break;
        sent += rc;
 800c088:	693a      	ldr	r2, [r7, #16]
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	4413      	add	r3, r2
 800c08e:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 800c090:	693a      	ldr	r2, [r7, #16]
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	429a      	cmp	r2, r3
 800c096:	da07      	bge.n	800c0a8 <sendPacket+0x62>
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 fc75 	bl	800c988 <TimerIsExpired>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d0dc      	beq.n	800c05e <sendPacket+0x18>
 800c0a4:	e000      	b.n	800c0a8 <sendPacket+0x62>
            break;
 800c0a6:	bf00      	nop
    }
    if (sent == length)
 800c0a8:	693a      	ldr	r2, [r7, #16]
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d10b      	bne.n	800c0c8 <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	699b      	ldr	r3, [r3, #24]
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	4610      	mov	r0, r2
 800c0be:	f000 fc8d 	bl	800c9dc <TimerCountdown>
        rc = SUCCESSS;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	617b      	str	r3, [r7, #20]
 800c0c6:	e002      	b.n	800c0ce <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 800c0c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c0cc:	617b      	str	r3, [r7, #20]
    return rc;
 800c0ce:	697b      	ldr	r3, [r7, #20]
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	371c      	adds	r7, #28
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c0d8 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b086      	sub	sp, #24
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	60f8      	str	r0, [r7, #12]
 800c0e0:	60b9      	str	r1, [r7, #8]
 800c0e2:	607a      	str	r2, [r7, #4]
 800c0e4:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	68ba      	ldr	r2, [r7, #8]
 800c0ea:	651a      	str	r2, [r3, #80]	; 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	617b      	str	r3, [r7, #20]
 800c0f0:	e009      	b.n	800c106 <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 800c0f2:	68fa      	ldr	r2, [r7, #12]
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	3304      	adds	r3, #4
 800c0f8:	00db      	lsls	r3, r3, #3
 800c0fa:	4413      	add	r3, r2
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	3301      	adds	r3, #1
 800c104:	617b      	str	r3, [r7, #20]
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	2b04      	cmp	r3, #4
 800c10a:	ddf2      	ble.n	800c0f2 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	683a      	ldr	r2, [r7, #0]
 800c116:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	6a3a      	ldr	r2, [r7, #32]
 800c11c:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c122:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c128:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2200      	movs	r2, #0
 800c12e:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2200      	movs	r2, #0
 800c134:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	2200      	movs	r2, #0
 800c13a:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	2201      	movs	r2, #1
 800c140:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	3354      	adds	r3, #84	; 0x54
 800c146:	4618      	mov	r0, r3
 800c148:	f000 fc11 	bl	800c96e <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 800c14c:	bf00      	nop
 800c14e:	3718      	adds	r7, #24
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}

0800c154 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 800c154:	b590      	push	{r4, r7, lr}
 800c156:	b08b      	sub	sp, #44	; 0x2c
 800c158:	af00      	add	r7, sp, #0
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 800c160:	2301      	movs	r3, #1
 800c162:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 800c164:	2300      	movs	r3, #0
 800c166:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 800c168:	2304      	movs	r3, #4
 800c16a:	61fb      	str	r3, [r7, #28]

    *value = 0;
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	2200      	movs	r2, #0
 800c170:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 800c172:	f04f 33ff 	mov.w	r3, #4294967295
 800c176:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800c178:	6a3b      	ldr	r3, [r7, #32]
 800c17a:	3301      	adds	r3, #1
 800c17c:	623b      	str	r3, [r7, #32]
 800c17e:	6a3a      	ldr	r2, [r7, #32]
 800c180:	69fb      	ldr	r3, [r7, #28]
 800c182:	429a      	cmp	r2, r3
 800c184:	dd03      	ble.n	800c18e <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 800c186:	f04f 33ff 	mov.w	r3, #4294967295
 800c18a:	61bb      	str	r3, [r7, #24]
            goto exit;
 800c18c:	e021      	b.n	800c1d2 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c192:	685c      	ldr	r4, [r3, #4]
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c198:	f107 0117 	add.w	r1, r7, #23
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2201      	movs	r2, #1
 800c1a0:	47a0      	blx	r4
 800c1a2:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 800c1a4:	69bb      	ldr	r3, [r7, #24]
 800c1a6:	2b01      	cmp	r3, #1
 800c1a8:	d112      	bne.n	800c1d0 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	681a      	ldr	r2, [r3, #0]
 800c1ae:	7dfb      	ldrb	r3, [r7, #23]
 800c1b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c1b6:	fb01 f303 	mul.w	r3, r1, r3
 800c1ba:	441a      	add	r2, r3
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 800c1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c2:	01db      	lsls	r3, r3, #7
 800c1c4:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 800c1c6:	7dfb      	ldrb	r3, [r7, #23]
 800c1c8:	b25b      	sxtb	r3, r3
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	dbd1      	blt.n	800c172 <decodePacket+0x1e>
exit:
 800c1ce:	e000      	b.n	800c1d2 <decodePacket+0x7e>
            goto exit;
 800c1d0:	bf00      	nop
    return len;
 800c1d2:	6a3b      	ldr	r3, [r7, #32]
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	372c      	adds	r7, #44	; 0x2c
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd90      	pop	{r4, r7, pc}

0800c1dc <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 800c1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1de:	b089      	sub	sp, #36	; 0x24
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	60f8      	str	r0, [r7, #12]
 800c1e4:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 800c1e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ea:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	617b      	str	r3, [r7, #20]
    int len = 0;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1fc:	685c      	ldr	r4, [r3, #4]
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	695e      	ldr	r6, [r3, #20]
 800c206:	68b8      	ldr	r0, [r7, #8]
 800c208:	f000 fc00 	bl	800ca0c <TimerLeftMS>
 800c20c:	4603      	mov	r3, r0
 800c20e:	2201      	movs	r2, #1
 800c210:	4631      	mov	r1, r6
 800c212:	4628      	mov	r0, r5
 800c214:	47a0      	blx	r4
 800c216:	4603      	mov	r3, r0
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d13b      	bne.n	800c294 <readPacket+0xb8>
        goto exit;

    len = 1;
 800c21c:	2301      	movs	r3, #1
 800c21e:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 800c220:	68b8      	ldr	r0, [r7, #8]
 800c222:	f000 fbf3 	bl	800ca0c <TimerLeftMS>
 800c226:	4602      	mov	r2, r0
 800c228:	f107 0310 	add.w	r3, r7, #16
 800c22c:	4619      	mov	r1, r3
 800c22e:	68f8      	ldr	r0, [r7, #12]
 800c230:	f7ff ff90 	bl	800c154 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	695b      	ldr	r3, [r3, #20]
 800c238:	3301      	adds	r3, #1
 800c23a:	693a      	ldr	r2, [r7, #16]
 800c23c:	4611      	mov	r1, r2
 800c23e:	4618      	mov	r0, r3
 800c240:	f000 ff49 	bl	800d0d6 <MQTTPacket_encode>
 800c244:	4602      	mov	r2, r0
 800c246:	69bb      	ldr	r3, [r7, #24]
 800c248:	4413      	add	r3, r2
 800c24a:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	dd16      	ble.n	800c280 <readPacket+0xa4>
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c256:	685c      	ldr	r4, [r3, #4]
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	695a      	ldr	r2, [r3, #20]
 800c260:	69bb      	ldr	r3, [r7, #24]
 800c262:	18d6      	adds	r6, r2, r3
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	607b      	str	r3, [r7, #4]
 800c268:	68b8      	ldr	r0, [r7, #8]
 800c26a:	f000 fbcf 	bl	800ca0c <TimerLeftMS>
 800c26e:	4603      	mov	r3, r0
 800c270:	687a      	ldr	r2, [r7, #4]
 800c272:	4631      	mov	r1, r6
 800c274:	4628      	mov	r0, r5
 800c276:	47a0      	blx	r4
 800c278:	4602      	mov	r2, r0
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d10b      	bne.n	800c298 <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	695b      	ldr	r3, [r3, #20]
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 800c288:	7d3b      	ldrb	r3, [r7, #20]
 800c28a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800c28e:	b2db      	uxtb	r3, r3
 800c290:	61fb      	str	r3, [r7, #28]
 800c292:	e002      	b.n	800c29a <readPacket+0xbe>
        goto exit;
 800c294:	bf00      	nop
 800c296:	e000      	b.n	800c29a <readPacket+0xbe>
        goto exit;
 800c298:	bf00      	nop
exit:
    return rc;
 800c29a:	69fb      	ldr	r3, [r7, #28]
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3724      	adds	r7, #36	; 0x24
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c2a4 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b087      	sub	sp, #28
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	689b      	ldr	r3, [r3, #8]
 800c2b6:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	461a      	mov	r2, r3
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	4413      	add	r3, r2
 800c2c2:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 800c2c4:	e039      	b.n	800c33a <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	2b2f      	cmp	r3, #47	; 0x2f
 800c2cc:	d103      	bne.n	800c2d6 <isTopicMatched+0x32>
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	2b2f      	cmp	r3, #47	; 0x2f
 800c2d4:	d13a      	bne.n	800c34c <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	781b      	ldrb	r3, [r3, #0]
 800c2da:	2b2b      	cmp	r3, #43	; 0x2b
 800c2dc:	d009      	beq.n	800c2f2 <isTopicMatched+0x4e>
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	2b23      	cmp	r3, #35	; 0x23
 800c2e4:	d005      	beq.n	800c2f2 <isTopicMatched+0x4e>
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	781a      	ldrb	r2, [r3, #0]
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	781b      	ldrb	r3, [r3, #0]
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d12e      	bne.n	800c350 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	2b2b      	cmp	r3, #43	; 0x2b
 800c2f8:	d112      	bne.n	800c320 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 800c300:	e005      	b.n	800c30e <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	3301      	adds	r3, #1
 800c306:	613b      	str	r3, [r7, #16]
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	3301      	adds	r3, #1
 800c30c:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 800c30e:	68fa      	ldr	r2, [r7, #12]
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	429a      	cmp	r2, r3
 800c314:	d20b      	bcs.n	800c32e <isTopicMatched+0x8a>
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	2b2f      	cmp	r3, #47	; 0x2f
 800c31c:	d1f1      	bne.n	800c302 <isTopicMatched+0x5e>
 800c31e:	e006      	b.n	800c32e <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	2b23      	cmp	r3, #35	; 0x23
 800c326:	d102      	bne.n	800c32e <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	3b01      	subs	r3, #1
 800c32c:	613b      	str	r3, [r7, #16]
        curf++;
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	3301      	adds	r3, #1
 800c332:	617b      	str	r3, [r7, #20]
        curn++;
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	3301      	adds	r3, #1
 800c338:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d007      	beq.n	800c352 <isTopicMatched+0xae>
 800c342:	693a      	ldr	r2, [r7, #16]
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	429a      	cmp	r2, r3
 800c348:	d3bd      	bcc.n	800c2c6 <isTopicMatched+0x22>
 800c34a:	e002      	b.n	800c352 <isTopicMatched+0xae>
            break;
 800c34c:	bf00      	nop
 800c34e:	e000      	b.n	800c352 <isTopicMatched+0xae>
            break;
 800c350:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 800c352:	693a      	ldr	r2, [r7, #16]
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	429a      	cmp	r2, r3
 800c358:	d105      	bne.n	800c366 <isTopicMatched+0xc2>
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d101      	bne.n	800c366 <isTopicMatched+0xc2>
 800c362:	2301      	movs	r3, #1
 800c364:	e000      	b.n	800c368 <isTopicMatched+0xc4>
 800c366:	2300      	movs	r3, #0
 800c368:	b2db      	uxtb	r3, r3
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	371c      	adds	r7, #28
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr

0800c376 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 800c376:	b580      	push	{r7, lr}
 800c378:	b08a      	sub	sp, #40	; 0x28
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	60f8      	str	r0, [r7, #12]
 800c37e:	60b9      	str	r1, [r7, #8]
 800c380:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 800c382:	f04f 33ff 	mov.w	r3, #4294967295
 800c386:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800c388:	2300      	movs	r3, #0
 800c38a:	627b      	str	r3, [r7, #36]	; 0x24
 800c38c:	e03f      	b.n	800c40e <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800c38e:	68fa      	ldr	r2, [r7, #12]
 800c390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c392:	3304      	adds	r3, #4
 800c394:	00db      	lsls	r3, r3, #3
 800c396:	4413      	add	r3, r2
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d034      	beq.n	800c408 <deliverMessage+0x92>
 800c39e:	68fa      	ldr	r2, [r7, #12]
 800c3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a2:	3304      	adds	r3, #4
 800c3a4:	00db      	lsls	r3, r3, #3
 800c3a6:	4413      	add	r3, r2
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	4619      	mov	r1, r3
 800c3ac:	68b8      	ldr	r0, [r7, #8]
 800c3ae:	f001 f861 	bl	800d474 <MQTTPacket_equals>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d10c      	bne.n	800c3d2 <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 800c3b8:	68fa      	ldr	r2, [r7, #12]
 800c3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3bc:	3304      	adds	r3, #4
 800c3be:	00db      	lsls	r3, r3, #3
 800c3c0:	4413      	add	r3, r2
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	68b9      	ldr	r1, [r7, #8]
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7ff ff6c 	bl	800c2a4 <isTopicMatched>
 800c3cc:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d01a      	beq.n	800c408 <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 800c3d2:	68fa      	ldr	r2, [r7, #12]
 800c3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d6:	3304      	adds	r3, #4
 800c3d8:	00db      	lsls	r3, r3, #3
 800c3da:	4413      	add	r3, r2
 800c3dc:	689b      	ldr	r3, [r3, #8]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d012      	beq.n	800c408 <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 800c3e2:	f107 0318 	add.w	r3, r7, #24
 800c3e6:	687a      	ldr	r2, [r7, #4]
 800c3e8:	68b9      	ldr	r1, [r7, #8]
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7ff fe00 	bl	800bff0 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 800c3f0:	68fa      	ldr	r2, [r7, #12]
 800c3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f4:	3304      	adds	r3, #4
 800c3f6:	00db      	lsls	r3, r3, #3
 800c3f8:	4413      	add	r3, r2
 800c3fa:	689b      	ldr	r3, [r3, #8]
 800c3fc:	f107 0218 	add.w	r2, r7, #24
 800c400:	4610      	mov	r0, r2
 800c402:	4798      	blx	r3
                rc = SUCCESSS;
 800c404:	2300      	movs	r3, #0
 800c406:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800c408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c40a:	3301      	adds	r3, #1
 800c40c:	627b      	str	r3, [r7, #36]	; 0x24
 800c40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c410:	2b04      	cmp	r3, #4
 800c412:	ddbc      	ble.n	800c38e <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 800c414:	6a3b      	ldr	r3, [r7, #32]
 800c416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c41a:	d112      	bne.n	800c442 <deliverMessage+0xcc>
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c420:	2b00      	cmp	r3, #0
 800c422:	d00e      	beq.n	800c442 <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 800c424:	f107 0310 	add.w	r3, r7, #16
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	68b9      	ldr	r1, [r7, #8]
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7ff fddf 	bl	800bff0 <NewMessageData>
        c->defaultMessageHandler(&md);
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c436:	f107 0210 	add.w	r2, r7, #16
 800c43a:	4610      	mov	r0, r2
 800c43c:	4798      	blx	r3
        rc = SUCCESSS;
 800c43e:	2300      	movs	r3, #0
 800c440:	623b      	str	r3, [r7, #32]
    }

    return rc;
 800c442:	6a3b      	ldr	r3, [r7, #32]
}
 800c444:	4618      	mov	r0, r3
 800c446:	3728      	adds	r7, #40	; 0x28
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <keepalive>:


int keepalive(MQTTClient* c)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b086      	sub	sp, #24
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 800c454:	f04f 33ff 	mov.w	r3, #4294967295
 800c458:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	699b      	ldr	r3, [r3, #24]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d102      	bne.n	800c468 <keepalive+0x1c>
    {
        rc = SUCCESSS;
 800c462:	2300      	movs	r3, #0
 800c464:	617b      	str	r3, [r7, #20]
        goto exit;
 800c466:	e033      	b.n	800c4d0 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	3354      	adds	r3, #84	; 0x54
 800c46c:	4618      	mov	r0, r3
 800c46e:	f000 fa8b 	bl	800c988 <TimerIsExpired>
 800c472:	4603      	mov	r3, r0
 800c474:	2b00      	cmp	r3, #0
 800c476:	d02a      	beq.n	800c4ce <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	7f1b      	ldrb	r3, [r3, #28]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d126      	bne.n	800c4ce <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 800c480:	f107 0308 	add.w	r3, r7, #8
 800c484:	4618      	mov	r0, r3
 800c486:	f000 fa72 	bl	800c96e <TimerInit>
            TimerCountdownMS(&timer, 1000);
 800c48a:	f107 0308 	add.w	r3, r7, #8
 800c48e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c492:	4618      	mov	r0, r3
 800c494:	f000 fa8e 	bl	800c9b4 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	691a      	ldr	r2, [r3, #16]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	689b      	ldr	r3, [r3, #8]
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	4610      	mov	r0, r2
 800c4a4:	f000 fd4b 	bl	800cf3e <MQTTSerialize_pingreq>
 800c4a8:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	dd0f      	ble.n	800c4d0 <keepalive+0x84>
 800c4b0:	f107 0308 	add.w	r3, r7, #8
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	6939      	ldr	r1, [r7, #16]
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f7ff fdc4 	bl	800c046 <sendPacket>
 800c4be:	6178      	str	r0, [r7, #20]
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d104      	bne.n	800c4d0 <keepalive+0x84>
                c->ping_outstanding = 1;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	771a      	strb	r2, [r3, #28]
 800c4cc:	e000      	b.n	800c4d0 <keepalive+0x84>
        }
    }

exit:
 800c4ce:	bf00      	nop
    return rc;
 800c4d0:	697b      	ldr	r3, [r7, #20]
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3718      	adds	r7, #24
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}
	...

0800c4dc <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 800c4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4de:	b095      	sub	sp, #84	; 0x54
 800c4e0:	af06      	add	r7, sp, #24
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 800c4e6:	6839      	ldr	r1, [r7, #0]
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f7ff fe77 	bl	800c1dc <readPacket>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    int len = 0,
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESSS;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 800c4fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c4fc:	3b02      	subs	r3, #2
 800c4fe:	2b0b      	cmp	r3, #11
 800c500:	f200 80c0 	bhi.w	800c684 <cycle+0x1a8>
 800c504:	a201      	add	r2, pc, #4	; (adr r2, 800c50c <cycle+0x30>)
 800c506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c50a:	bf00      	nop
 800c50c:	0800c685 	.word	0x0800c685
 800c510:	0800c53d 	.word	0x0800c53d
 800c514:	0800c685 	.word	0x0800c685
 800c518:	0800c605 	.word	0x0800c605
 800c51c:	0800c685 	.word	0x0800c685
 800c520:	0800c685 	.word	0x0800c685
 800c524:	0800c685 	.word	0x0800c685
 800c528:	0800c685 	.word	0x0800c685
 800c52c:	0800c685 	.word	0x0800c685
 800c530:	0800c685 	.word	0x0800c685
 800c534:	0800c685 	.word	0x0800c685
 800c538:	0800c677 	.word	0x0800c677
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 800c540:	687a      	ldr	r2, [r7, #4]
 800c542:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 800c544:	4616      	mov	r6, r2
 800c546:	f107 0210 	add.w	r2, r7, #16
 800c54a:	1d15      	adds	r5, r2, #4
 800c54c:	f107 0210 	add.w	r2, r7, #16
 800c550:	1c54      	adds	r4, r2, #1
 800c552:	f107 010c 	add.w	r1, r7, #12
 800c556:	f107 0210 	add.w	r2, r7, #16
 800c55a:	1c90      	adds	r0, r2, #2
 800c55c:	9604      	str	r6, [sp, #16]
 800c55e:	9303      	str	r3, [sp, #12]
 800c560:	f107 0310 	add.w	r3, r7, #16
 800c564:	330c      	adds	r3, #12
 800c566:	9302      	str	r3, [sp, #8]
 800c568:	f107 0310 	add.w	r3, r7, #16
 800c56c:	3308      	adds	r3, #8
 800c56e:	9301      	str	r3, [sp, #4]
 800c570:	f107 0320 	add.w	r3, r7, #32
 800c574:	9300      	str	r3, [sp, #0]
 800c576:	462b      	mov	r3, r5
 800c578:	4622      	mov	r2, r4
 800c57a:	f000 fcef 	bl	800cf5c <MQTTDeserialize_publish>
 800c57e:	4603      	mov	r3, r0
 800c580:	2b01      	cmp	r3, #1
 800c582:	f040 8083 	bne.w	800c68c <cycle+0x1b0>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 800c58c:	f107 0210 	add.w	r2, r7, #16
 800c590:	f107 0320 	add.w	r3, r7, #32
 800c594:	4619      	mov	r1, r3
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f7ff feed 	bl	800c376 <deliverMessage>
            if (msg.qos != QOS0)
 800c59c:	7c3b      	ldrb	r3, [r7, #16]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d06d      	beq.n	800c67e <cycle+0x1a2>
            {
                if (msg.qos == QOS1)
 800c5a2:	7c3b      	ldrb	r3, [r7, #16]
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d10c      	bne.n	800c5c2 <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6918      	ldr	r0, [r3, #16]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	689b      	ldr	r3, [r3, #8]
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	8abb      	ldrh	r3, [r7, #20]
 800c5b4:	9300      	str	r3, [sp, #0]
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	2204      	movs	r2, #4
 800c5ba:	f001 f828 	bl	800d60e <MQTTSerialize_ack>
 800c5be:	6378      	str	r0, [r7, #52]	; 0x34
 800c5c0:	e00e      	b.n	800c5e0 <cycle+0x104>
                else if (msg.qos == QOS2)
 800c5c2:	7c3b      	ldrb	r3, [r7, #16]
 800c5c4:	2b02      	cmp	r3, #2
 800c5c6:	d10b      	bne.n	800c5e0 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6918      	ldr	r0, [r3, #16]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	689b      	ldr	r3, [r3, #8]
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	8abb      	ldrh	r3, [r7, #20]
 800c5d4:	9300      	str	r3, [sp, #0]
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	2205      	movs	r2, #5
 800c5da:	f001 f818 	bl	800d60e <MQTTSerialize_ack>
 800c5de:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 800c5e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	dc03      	bgt.n	800c5ee <cycle+0x112>
                    rc = FAILURE;
 800c5e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c5ea:	633b      	str	r3, [r7, #48]	; 0x30
 800c5ec:	e005      	b.n	800c5fa <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 800c5ee:	683a      	ldr	r2, [r7, #0]
 800c5f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f7ff fd27 	bl	800c046 <sendPacket>
 800c5f8:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 800c5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c600:	d13d      	bne.n	800c67e <cycle+0x1a2>
                    goto exit; // there was a problem
 800c602:	e044      	b.n	800c68e <cycle+0x1b2>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	695c      	ldr	r4, [r3, #20]
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	68db      	ldr	r3, [r3, #12]
 800c60c:	f107 020a 	add.w	r2, r7, #10
 800c610:	f107 0109 	add.w	r1, r7, #9
 800c614:	f107 0008 	add.w	r0, r7, #8
 800c618:	9300      	str	r3, [sp, #0]
 800c61a:	4623      	mov	r3, r4
 800c61c:	f000 fd10 	bl	800d040 <MQTTDeserialize_ack>
 800c620:	4603      	mov	r3, r0
 800c622:	2b01      	cmp	r3, #1
 800c624:	d003      	beq.n	800c62e <cycle+0x152>
                rc = FAILURE;
 800c626:	f04f 33ff 	mov.w	r3, #4294967295
 800c62a:	633b      	str	r3, [r7, #48]	; 0x30
 800c62c:	e01e      	b.n	800c66c <cycle+0x190>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6918      	ldr	r0, [r3, #16]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	689b      	ldr	r3, [r3, #8]
 800c636:	4619      	mov	r1, r3
 800c638:	897b      	ldrh	r3, [r7, #10]
 800c63a:	9300      	str	r3, [sp, #0]
 800c63c:	2300      	movs	r3, #0
 800c63e:	2206      	movs	r2, #6
 800c640:	f000 ffe5 	bl	800d60e <MQTTSerialize_ack>
 800c644:	6378      	str	r0, [r7, #52]	; 0x34
 800c646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c648:	2b00      	cmp	r3, #0
 800c64a:	dc03      	bgt.n	800c654 <cycle+0x178>
                rc = FAILURE;
 800c64c:	f04f 33ff 	mov.w	r3, #4294967295
 800c650:	633b      	str	r3, [r7, #48]	; 0x30
 800c652:	e00b      	b.n	800c66c <cycle+0x190>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 800c654:	683a      	ldr	r2, [r7, #0]
 800c656:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f7ff fcf4 	bl	800c046 <sendPacket>
 800c65e:	6338      	str	r0, [r7, #48]	; 0x30
 800c660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c662:	2b00      	cmp	r3, #0
 800c664:	d002      	beq.n	800c66c <cycle+0x190>
                rc = FAILURE; // there was a problem
 800c666:	f04f 33ff 	mov.w	r3, #4294967295
 800c66a:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 800c66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c672:	d106      	bne.n	800c682 <cycle+0x1a6>
                goto exit; // there was a problem
 800c674:	e00b      	b.n	800c68e <cycle+0x1b2>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2200      	movs	r2, #0
 800c67a:	771a      	strb	r2, [r3, #28]
            break;
 800c67c:	e002      	b.n	800c684 <cycle+0x1a8>
            break;
 800c67e:	bf00      	nop
 800c680:	e000      	b.n	800c684 <cycle+0x1a8>
            break;
 800c682:	bf00      	nop
    }
    keepalive(c);
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f7ff fee1 	bl	800c44c <keepalive>
 800c68a:	e000      	b.n	800c68e <cycle+0x1b2>
                goto exit;
 800c68c:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 800c68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c690:	2b00      	cmp	r3, #0
 800c692:	d101      	bne.n	800c698 <cycle+0x1bc>
        rc = packet_type;
 800c694:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c696:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 800c698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	373c      	adds	r7, #60	; 0x3c
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6a2:	bf00      	nop

0800c6a4 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b086      	sub	sp, #24
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	60f8      	str	r0, [r7, #12]
 800c6ac:	60b9      	str	r1, [r7, #8]
 800c6ae:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 800c6b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c6b4:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 f966 	bl	800c988 <TimerIsExpired>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d109      	bne.n	800c6d6 <waitfor+0x32>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);
 800c6c2:	6879      	ldr	r1, [r7, #4]
 800c6c4:	68f8      	ldr	r0, [r7, #12]
 800c6c6:	f7ff ff09 	bl	800c4dc <cycle>
 800c6ca:	6178      	str	r0, [r7, #20]
 800c6cc:	697a      	ldr	r2, [r7, #20]
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d1f0      	bne.n	800c6b6 <waitfor+0x12>
 800c6d4:	e000      	b.n	800c6d8 <waitfor+0x34>
            break; // we timed out
 800c6d6:	bf00      	nop

    return rc;
 800c6d8:	697b      	ldr	r3, [r7, #20]
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3718      	adds	r7, #24
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
	...

0800c6e4 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b09e      	sub	sp, #120	; 0x78
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
 800c6ec:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 800c6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c6f2:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 800c6f4:	4a3d      	ldr	r2, [pc, #244]	; (800c7ec <MQTTConnect+0x108>)
 800c6f6:	f107 0310 	add.w	r3, r7, #16
 800c6fa:	4611      	mov	r1, r2
 800c6fc:	2258      	movs	r2, #88	; 0x58
 800c6fe:	4618      	mov	r0, r3
 800c700:	f00f fea7 	bl	801c452 <memcpy>
    int len = 0;
 800c704:	2300      	movs	r3, #0
 800c706:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6a1b      	ldr	r3, [r3, #32]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d15d      	bne.n	800c7cc <MQTTConnect+0xe8>
		goto exit;

    TimerInit(&connect_timer);
 800c710:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c714:	4618      	mov	r0, r3
 800c716:	f000 f92a 	bl	800c96e <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	685a      	ldr	r2, [r3, #4]
 800c71e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c722:	4611      	mov	r1, r2
 800c724:	4618      	mov	r0, r3
 800c726:	f000 f945 	bl	800c9b4 <TimerCountdownMS>

    if (options == 0)
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d102      	bne.n	800c736 <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 800c730:	f107 0310 	add.w	r3, r7, #16
 800c734:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	8b1b      	ldrh	r3, [r3, #24]
 800c73a:	461a      	mov	r2, r3
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	699b      	ldr	r3, [r3, #24]
 800c74a:	4619      	mov	r1, r3
 800c74c:	4610      	mov	r0, r2
 800c74e:	f000 f945 	bl	800c9dc <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6918      	ldr	r0, [r3, #16]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	689b      	ldr	r3, [r3, #8]
 800c75a:	683a      	ldr	r2, [r7, #0]
 800c75c:	4619      	mov	r1, r3
 800c75e:	f000 fa75 	bl	800cc4c <MQTTSerialize_connect>
 800c762:	6738      	str	r0, [r7, #112]	; 0x70
 800c764:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c766:	2b00      	cmp	r3, #0
 800c768:	dd32      	ble.n	800c7d0 <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 800c76a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c76e:	461a      	mov	r2, r3
 800c770:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f7ff fc67 	bl	800c046 <sendPacket>
 800c778:	6778      	str	r0, [r7, #116]	; 0x74
 800c77a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d129      	bne.n	800c7d4 <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 800c780:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c784:	461a      	mov	r2, r3
 800c786:	2102      	movs	r1, #2
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f7ff ff8b 	bl	800c6a4 <waitfor>
 800c78e:	4603      	mov	r3, r0
 800c790:	2b02      	cmp	r3, #2
 800c792:	d117      	bne.n	800c7c4 <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 800c794:	23ff      	movs	r3, #255	; 0xff
 800c796:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 800c798:	2300      	movs	r3, #0
 800c79a:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	695a      	ldr	r2, [r3, #20]
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	68db      	ldr	r3, [r3, #12]
 800c7a4:	f107 010f 	add.w	r1, r7, #15
 800c7a8:	f107 000e 	add.w	r0, r7, #14
 800c7ac:	f000 fb3a 	bl	800ce24 <MQTTDeserialize_connack>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	2b01      	cmp	r3, #1
 800c7b4:	d102      	bne.n	800c7bc <MQTTConnect+0xd8>
            rc = connack_rc;
 800c7b6:	7bfb      	ldrb	r3, [r7, #15]
 800c7b8:	677b      	str	r3, [r7, #116]	; 0x74
 800c7ba:	e00c      	b.n	800c7d6 <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 800c7bc:	f04f 33ff 	mov.w	r3, #4294967295
 800c7c0:	677b      	str	r3, [r7, #116]	; 0x74
 800c7c2:	e008      	b.n	800c7d6 <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 800c7c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c7c8:	677b      	str	r3, [r7, #116]	; 0x74
 800c7ca:	e004      	b.n	800c7d6 <MQTTConnect+0xf2>
		goto exit;
 800c7cc:	bf00      	nop
 800c7ce:	e002      	b.n	800c7d6 <MQTTConnect+0xf2>
        goto exit;
 800c7d0:	bf00      	nop
 800c7d2:	e000      	b.n	800c7d6 <MQTTConnect+0xf2>
        goto exit; // there was a problem
 800c7d4:	bf00      	nop

exit:
    if (rc == SUCCESSS)
 800c7d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d102      	bne.n	800c7e2 <MQTTConnect+0xfe>
        c->isconnected = 1;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2201      	movs	r2, #1
 800c7e0:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 800c7e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3778      	adds	r7, #120	; 0x78
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}
 800c7ec:	080212e8 	.word	0x080212e8

0800c7f0 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 800c7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7f2:	b097      	sub	sp, #92	; 0x5c
 800c7f4:	af08      	add	r7, sp, #32
 800c7f6:	60f8      	str	r0, [r7, #12]
 800c7f8:	60b9      	str	r1, [r7, #8]
 800c7fa:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 800c7fc:	f04f 33ff 	mov.w	r3, #4294967295
 800c800:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 800c802:	2300      	movs	r3, #0
 800c804:	61fb      	str	r3, [r7, #28]
 800c806:	2300      	movs	r3, #0
 800c808:	623b      	str	r3, [r7, #32]
 800c80a:	2300      	movs	r3, #0
 800c80c:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	61fb      	str	r3, [r7, #28]
    int len = 0;
 800c812:	2300      	movs	r3, #0
 800c814:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	6a1b      	ldr	r3, [r3, #32]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	f000 809b 	beq.w	800c956 <MQTTPublish+0x166>
		goto exit;

    TimerInit(&timer);
 800c820:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c824:	4618      	mov	r0, r3
 800c826:	f000 f8a2 	bl	800c96e <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	685a      	ldr	r2, [r3, #4]
 800c82e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c832:	4611      	mov	r1, r2
 800c834:	4618      	mov	r0, r3
 800c836:	f000 f8bd 	bl	800c9b4 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	781b      	ldrb	r3, [r3, #0]
 800c83e:	2b01      	cmp	r3, #1
 800c840:	d003      	beq.n	800c84a <MQTTPublish+0x5a>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	2b02      	cmp	r3, #2
 800c848:	d106      	bne.n	800c858 <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 800c84a:	68f8      	ldr	r0, [r7, #12]
 800c84c:	f7ff fbe2 	bl	800c014 <getNextPacketId>
 800c850:	4603      	mov	r3, r0
 800c852:	b29a      	uxth	r2, r3
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	691b      	ldr	r3, [r3, #16]
 800c85c:	603b      	str	r3, [r7, #0]
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	689b      	ldr	r3, [r3, #8]
 800c862:	469c      	mov	ip, r3
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	469e      	mov	lr, r3
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	785d      	ldrb	r5, [r3, #1]
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	689b      	ldr	r3, [r3, #8]
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 800c87a:	9206      	str	r2, [sp, #24]
 800c87c:	9305      	str	r3, [sp, #20]
 800c87e:	ac02      	add	r4, sp, #8
 800c880:	f107 031c 	add.w	r3, r7, #28
 800c884:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c888:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c88c:	9601      	str	r6, [sp, #4]
 800c88e:	9500      	str	r5, [sp, #0]
 800c890:	4673      	mov	r3, lr
 800c892:	2200      	movs	r2, #0
 800c894:	4661      	mov	r1, ip
 800c896:	6838      	ldr	r0, [r7, #0]
 800c898:	f000 fe43 	bl	800d522 <MQTTSerialize_publish>
 800c89c:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 800c89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	dd5a      	ble.n	800c95a <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 800c8a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c8ac:	68f8      	ldr	r0, [r7, #12]
 800c8ae:	f7ff fbca 	bl	800c046 <sendPacket>
 800c8b2:	6378      	str	r0, [r7, #52]	; 0x34
 800c8b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d151      	bne.n	800c95e <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d122      	bne.n	800c908 <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 800c8c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	2104      	movs	r1, #4
 800c8ca:	68f8      	ldr	r0, [r7, #12]
 800c8cc:	f7ff feea 	bl	800c6a4 <waitfor>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	2b04      	cmp	r3, #4
 800c8d4:	d114      	bne.n	800c900 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	695c      	ldr	r4, [r3, #20]
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	68db      	ldr	r3, [r3, #12]
 800c8de:	f107 021a 	add.w	r2, r7, #26
 800c8e2:	f107 0119 	add.w	r1, r7, #25
 800c8e6:	f107 0018 	add.w	r0, r7, #24
 800c8ea:	9300      	str	r3, [sp, #0]
 800c8ec:	4623      	mov	r3, r4
 800c8ee:	f000 fba7 	bl	800d040 <MQTTDeserialize_ack>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d035      	beq.n	800c964 <MQTTPublish+0x174>
                rc = FAILURE;
 800c8f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c8fc:	637b      	str	r3, [r7, #52]	; 0x34
 800c8fe:	e031      	b.n	800c964 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 800c900:	f04f 33ff 	mov.w	r3, #4294967295
 800c904:	637b      	str	r3, [r7, #52]	; 0x34
 800c906:	e02d      	b.n	800c964 <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	2b02      	cmp	r3, #2
 800c90e:	d128      	bne.n	800c962 <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 800c910:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c914:	461a      	mov	r2, r3
 800c916:	2107      	movs	r1, #7
 800c918:	68f8      	ldr	r0, [r7, #12]
 800c91a:	f7ff fec3 	bl	800c6a4 <waitfor>
 800c91e:	4603      	mov	r3, r0
 800c920:	2b07      	cmp	r3, #7
 800c922:	d114      	bne.n	800c94e <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	695c      	ldr	r4, [r3, #20]
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	68db      	ldr	r3, [r3, #12]
 800c92c:	f107 0216 	add.w	r2, r7, #22
 800c930:	f107 0115 	add.w	r1, r7, #21
 800c934:	f107 0014 	add.w	r0, r7, #20
 800c938:	9300      	str	r3, [sp, #0]
 800c93a:	4623      	mov	r3, r4
 800c93c:	f000 fb80 	bl	800d040 <MQTTDeserialize_ack>
 800c940:	4603      	mov	r3, r0
 800c942:	2b01      	cmp	r3, #1
 800c944:	d00e      	beq.n	800c964 <MQTTPublish+0x174>
                rc = FAILURE;
 800c946:	f04f 33ff 	mov.w	r3, #4294967295
 800c94a:	637b      	str	r3, [r7, #52]	; 0x34
 800c94c:	e00a      	b.n	800c964 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 800c94e:	f04f 33ff 	mov.w	r3, #4294967295
 800c952:	637b      	str	r3, [r7, #52]	; 0x34
 800c954:	e006      	b.n	800c964 <MQTTPublish+0x174>
		goto exit;
 800c956:	bf00      	nop
 800c958:	e004      	b.n	800c964 <MQTTPublish+0x174>
        goto exit;
 800c95a:	bf00      	nop
 800c95c:	e002      	b.n	800c964 <MQTTPublish+0x174>
        goto exit; // there was a problem
 800c95e:	bf00      	nop
 800c960:	e000      	b.n	800c964 <MQTTPublish+0x174>
    }

exit:
 800c962:	bf00      	nop
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 800c964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c966:	4618      	mov	r0, r3
 800c968:	373c      	adds	r7, #60	; 0x3c
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c96e <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 800c96e:	b480      	push	{r7}
 800c970:	b083      	sub	sp, #12
 800c972:	af00      	add	r7, sp, #0
 800c974:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2200      	movs	r2, #0
 800c97a:	605a      	str	r2, [r3, #4]
}
 800c97c:	bf00      	nop
 800c97e:	370c      	adds	r7, #12
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr

0800c988 <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 800c988:	b480      	push	{r7}
 800c98a:	b085      	sub	sp, #20
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	685a      	ldr	r2, [r3, #4]
 800c994:	4b06      	ldr	r3, [pc, #24]	; (800c9b0 <TimerIsExpired+0x28>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	1ad3      	subs	r3, r2, r3
 800c99a:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	0fdb      	lsrs	r3, r3, #31
 800c9a0:	b2db      	uxtb	r3, r3
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3714      	adds	r7, #20
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ac:	4770      	bx	lr
 800c9ae:	bf00      	nop
 800c9b0:	200009b0 	.word	0x200009b0

0800c9b4 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 800c9b4:	b480      	push	{r7}
 800c9b6:	b083      	sub	sp, #12
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
 800c9bc:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 800c9be:	4b06      	ldr	r3, [pc, #24]	; (800c9d8 <TimerCountdownMS+0x24>)
 800c9c0:	681a      	ldr	r2, [r3, #0]
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	441a      	add	r2, r3
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	605a      	str	r2, [r3, #4]
}
 800c9ca:	bf00      	nop
 800c9cc:	370c      	adds	r7, #12
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d4:	4770      	bx	lr
 800c9d6:	bf00      	nop
 800c9d8:	200009b0 	.word	0x200009b0

0800c9dc <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 800c9dc:	b480      	push	{r7}
 800c9de:	b083      	sub	sp, #12
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c9ec:	fb03 f202 	mul.w	r2, r3, r2
 800c9f0:	4b05      	ldr	r3, [pc, #20]	; (800ca08 <TimerCountdown+0x2c>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	441a      	add	r2, r3
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	605a      	str	r2, [r3, #4]
}
 800c9fa:	bf00      	nop
 800c9fc:	370c      	adds	r7, #12
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca04:	4770      	bx	lr
 800ca06:	bf00      	nop
 800ca08:	200009b0 	.word	0x200009b0

0800ca0c <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 800ca0c:	b480      	push	{r7}
 800ca0e:	b085      	sub	sp, #20
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	685a      	ldr	r2, [r3, #4]
 800ca18:	4b06      	ldr	r3, [pc, #24]	; (800ca34 <TimerLeftMS+0x28>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	1ad3      	subs	r3, r2, r3
 800ca1e:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3714      	adds	r7, #20
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr
 800ca32:	bf00      	nop
 800ca34:	200009b0 	.word	0x200009b0

0800ca38 <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 800ca38:	b480      	push	{r7}
 800ca3a:	b083      	sub	sp, #12
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	683a      	ldr	r2, [r7, #0]
 800ca46:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	4a07      	ldr	r2, [pc, #28]	; (800ca68 <NewNetwork+0x30>)
 800ca4c:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	4a06      	ldr	r2, [pc, #24]	; (800ca6c <NewNetwork+0x34>)
 800ca52:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	4a06      	ldr	r2, [pc, #24]	; (800ca70 <NewNetwork+0x38>)
 800ca58:	60da      	str	r2, [r3, #12]
}
 800ca5a:	bf00      	nop
 800ca5c:	370c      	adds	r7, #12
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop
 800ca68:	0800ca75 	.word	0x0800ca75
 800ca6c:	0800cacf 	.word	0x0800cacf
 800ca70:	0800cb17 	.word	0x0800cb17

0800ca74 <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b084      	sub	sp, #16
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	60f8      	str	r0, [r7, #12]
 800ca7c:	60b9      	str	r1, [r7, #8]
 800ca7e:	607a      	str	r2, [r7, #4]
 800ca80:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	009b      	lsls	r3, r3, #2
 800ca88:	3301      	adds	r3, #1
 800ca8a:	00db      	lsls	r3, r3, #3
 800ca8c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ca90:	4618      	mov	r0, r3
 800ca92:	f7fb f865 	bl	8007b60 <WIZCHIP_READ>
 800ca96:	4603      	mov	r3, r0
 800ca98:	2b17      	cmp	r3, #23
 800ca9a:	d113      	bne.n	800cac4 <w5x00_read+0x50>
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	4618      	mov	r0, r3
 800caa4:	f7fb fa01 	bl	8007eaa <getSn_RX_RSR>
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d00a      	beq.n	800cac4 <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	b2db      	uxtb	r3, r3
 800cab4:	687a      	ldr	r2, [r7, #4]
 800cab6:	b292      	uxth	r2, r2
 800cab8:	68b9      	ldr	r1, [r7, #8]
 800caba:	4618      	mov	r0, r3
 800cabc:	f7fb ff68 	bl	8008990 <recv>
 800cac0:	4603      	mov	r3, r0
 800cac2:	e000      	b.n	800cac6 <w5x00_read+0x52>

	return SOCK_ERROR;
 800cac4:	2300      	movs	r3, #0
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3710      	adds	r7, #16
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}

0800cace <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 800cace:	b580      	push	{r7, lr}
 800cad0:	b084      	sub	sp, #16
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	60f8      	str	r0, [r7, #12]
 800cad6:	60b9      	str	r1, [r7, #8]
 800cad8:	607a      	str	r2, [r7, #4]
 800cada:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	3301      	adds	r3, #1
 800cae4:	00db      	lsls	r3, r3, #3
 800cae6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800caea:	4618      	mov	r0, r3
 800caec:	f7fb f838 	bl	8007b60 <WIZCHIP_READ>
 800caf0:	4603      	mov	r3, r0
 800caf2:	2b17      	cmp	r3, #23
 800caf4:	d10a      	bne.n	800cb0c <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	b2db      	uxtb	r3, r3
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	b292      	uxth	r2, r2
 800cb00:	68b9      	ldr	r1, [r7, #8]
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7fb fe4a 	bl	800879c <send>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	e000      	b.n	800cb0e <w5x00_write+0x40>

	return SOCK_ERROR;
 800cb0c:	2300      	movs	r3, #0
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3710      	adds	r7, #16
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}

0800cb16 <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 800cb16:	b580      	push	{r7, lr}
 800cb18:	b082      	sub	sp, #8
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	4618      	mov	r0, r3
 800cb26:	f7fb fdc3 	bl	80086b0 <disconnect>
}
 800cb2a:	bf00      	nop
 800cb2c:	3708      	adds	r7, #8
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 800cb32:	b580      	push	{r7, lr}
 800cb34:	b086      	sub	sp, #24
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	60f8      	str	r0, [r7, #12]
 800cb3a:	60b9      	str	r1, [r7, #8]
 800cb3c:	4613      	mov	r3, r2
 800cb3e:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 800cb40:	f243 0339 	movw	r3, #12345	; 0x3039
 800cb44:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	b2d8      	uxtb	r0, r3
 800cb4c:	8afa      	ldrh	r2, [r7, #22]
 800cb4e:	2300      	movs	r3, #0
 800cb50:	2101      	movs	r1, #1
 800cb52:	f7fb faf5 	bl	8008140 <socket>
 800cb56:	4603      	mov	r3, r0
 800cb58:	461a      	mov	r2, r3
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d001      	beq.n	800cb66 <ConnectNetwork+0x34>
		return SOCK_ERROR;
 800cb62:	2300      	movs	r3, #0
 800cb64:	e00d      	b.n	800cb82 <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	b2db      	uxtb	r3, r3
 800cb6c:	88fa      	ldrh	r2, [r7, #6]
 800cb6e:	68b9      	ldr	r1, [r7, #8]
 800cb70:	4618      	mov	r0, r3
 800cb72:	f7fb fcc1 	bl	80084f8 <connect>
 800cb76:	4603      	mov	r3, r0
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d001      	beq.n	800cb80 <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	e000      	b.n	800cb82 <ConnectNetwork+0x50>

	return SOCK_OK;
 800cb80:	2301      	movs	r3, #1
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3718      	adds	r7, #24
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}

0800cb8a <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 800cb8a:	b590      	push	{r4, r7, lr}
 800cb8c:	b085      	sub	sp, #20
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
	int len = 0;
 800cb92:	2300      	movs	r3, #0
 800cb94:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	7a1b      	ldrb	r3, [r3, #8]
 800cb9a:	2b03      	cmp	r3, #3
 800cb9c:	d102      	bne.n	800cba4 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 800cb9e:	230c      	movs	r3, #12
 800cba0:	60fb      	str	r3, [r7, #12]
 800cba2:	e005      	b.n	800cbb0 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	7a1b      	ldrb	r3, [r3, #8]
 800cba8:	2b04      	cmp	r3, #4
 800cbaa:	d101      	bne.n	800cbb0 <MQTTSerialize_connectLength+0x26>
		len = 10;
 800cbac:	230a      	movs	r3, #10
 800cbae:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	330c      	adds	r3, #12
 800cbb4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cbb8:	f000 fc43 	bl	800d442 <MQTTstrlen>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	3302      	adds	r3, #2
 800cbc0:	68fa      	ldr	r2, [r7, #12]
 800cbc2:	4413      	add	r3, r2
 800cbc4:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	7edb      	ldrb	r3, [r3, #27]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d013      	beq.n	800cbf6 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	3324      	adds	r3, #36	; 0x24
 800cbd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cbd6:	f000 fc34 	bl	800d442 <MQTTstrlen>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	1c9c      	adds	r4, r3, #2
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	3330      	adds	r3, #48	; 0x30
 800cbe2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cbe6:	f000 fc2c 	bl	800d442 <MQTTstrlen>
 800cbea:	4603      	mov	r3, r0
 800cbec:	4423      	add	r3, r4
 800cbee:	3302      	adds	r3, #2
 800cbf0:	68fa      	ldr	r2, [r7, #12]
 800cbf2:	4413      	add	r3, r2
 800cbf4:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d103      	bne.n	800cc06 <MQTTSerialize_connectLength+0x7c>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d00a      	beq.n	800cc1c <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	3340      	adds	r3, #64	; 0x40
 800cc0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cc0e:	f000 fc18 	bl	800d442 <MQTTstrlen>
 800cc12:	4603      	mov	r3, r0
 800cc14:	3302      	adds	r3, #2
 800cc16:	68fa      	ldr	r2, [r7, #12]
 800cc18:	4413      	add	r3, r2
 800cc1a:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d103      	bne.n	800cc2c <MQTTSerialize_connectLength+0xa2>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d00a      	beq.n	800cc42 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	334c      	adds	r3, #76	; 0x4c
 800cc30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cc34:	f000 fc05 	bl	800d442 <MQTTstrlen>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	3302      	adds	r3, #2
 800cc3c:	68fa      	ldr	r2, [r7, #12]
 800cc3e:	4413      	add	r3, r2
 800cc40:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 800cc42:	68fb      	ldr	r3, [r7, #12]
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3714      	adds	r7, #20
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd90      	pop	{r4, r7, pc}

0800cc4c <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b08a      	sub	sp, #40	; 0x28
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	60f8      	str	r0, [r7, #12]
 800cc54:	60b9      	str	r1, [r7, #8]
 800cc56:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 800cc60:	2300      	movs	r3, #0
 800cc62:	617b      	str	r3, [r7, #20]
	int len = 0;
 800cc64:	2300      	movs	r3, #0
 800cc66:	623b      	str	r3, [r7, #32]
	int rc = -1;
 800cc68:	f04f 33ff 	mov.w	r3, #4294967295
 800cc6c:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f7ff ff8b 	bl	800cb8a <MQTTSerialize_connectLength>
 800cc74:	6238      	str	r0, [r7, #32]
 800cc76:	6a38      	ldr	r0, [r7, #32]
 800cc78:	f000 fa98 	bl	800d1ac <MQTTPacket_len>
 800cc7c:	4602      	mov	r2, r0
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	4293      	cmp	r3, r2
 800cc82:	da03      	bge.n	800cc8c <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800cc84:	f06f 0301 	mvn.w	r3, #1
 800cc88:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 800cc8a:	e0c2      	b.n	800ce12 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 800cc90:	7e3b      	ldrb	r3, [r7, #24]
 800cc92:	2201      	movs	r2, #1
 800cc94:	f362 1307 	bfi	r3, r2, #4, #4
 800cc98:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800cc9a:	7e3a      	ldrb	r2, [r7, #24]
 800cc9c:	f107 031c 	add.w	r3, r7, #28
 800cca0:	4611      	mov	r1, r2
 800cca2:	4618      	mov	r0, r3
 800cca4:	f000 fb11 	bl	800d2ca <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800cca8:	69fb      	ldr	r3, [r7, #28]
 800ccaa:	6a39      	ldr	r1, [r7, #32]
 800ccac:	4618      	mov	r0, r3
 800ccae:	f000 fa12 	bl	800d0d6 <MQTTPacket_encode>
 800ccb2:	4602      	mov	r2, r0
 800ccb4:	69fb      	ldr	r3, [r7, #28]
 800ccb6:	4413      	add	r3, r2
 800ccb8:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	7a1b      	ldrb	r3, [r3, #8]
 800ccbe:	2b04      	cmp	r3, #4
 800ccc0:	d10c      	bne.n	800ccdc <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 800ccc2:	f107 031c 	add.w	r3, r7, #28
 800ccc6:	4955      	ldr	r1, [pc, #340]	; (800ce1c <MQTTSerialize_connect+0x1d0>)
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f000 fb3c 	bl	800d346 <writeCString>
		writeChar(&ptr, (char) 4);
 800ccce:	f107 031c 	add.w	r3, r7, #28
 800ccd2:	2104      	movs	r1, #4
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f000 faf8 	bl	800d2ca <writeChar>
 800ccda:	e00b      	b.n	800ccf4 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 800ccdc:	f107 031c 	add.w	r3, r7, #28
 800cce0:	494f      	ldr	r1, [pc, #316]	; (800ce20 <MQTTSerialize_connect+0x1d4>)
 800cce2:	4618      	mov	r0, r3
 800cce4:	f000 fb2f 	bl	800d346 <writeCString>
		writeChar(&ptr, (char) 3);
 800cce8:	f107 031c 	add.w	r3, r7, #28
 800ccec:	2103      	movs	r1, #3
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f000 faeb 	bl	800d2ca <writeChar>
	}

	flags.all = 0;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	7e9b      	ldrb	r3, [r3, #26]
 800ccfc:	f003 0301 	and.w	r3, r3, #1
 800cd00:	b2da      	uxtb	r2, r3
 800cd02:	7d3b      	ldrb	r3, [r7, #20]
 800cd04:	f362 0341 	bfi	r3, r2, #1, #1
 800cd08:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	7edb      	ldrb	r3, [r3, #27]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	bf14      	ite	ne
 800cd12:	2301      	movne	r3, #1
 800cd14:	2300      	moveq	r3, #0
 800cd16:	b2da      	uxtb	r2, r3
 800cd18:	7d3b      	ldrb	r3, [r7, #20]
 800cd1a:	f362 0382 	bfi	r3, r2, #2, #1
 800cd1e:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 800cd20:	7d3b      	ldrb	r3, [r7, #20]
 800cd22:	f003 0304 	and.w	r3, r3, #4
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d013      	beq.n	800cd54 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd32:	f003 0303 	and.w	r3, r3, #3
 800cd36:	b2da      	uxtb	r2, r3
 800cd38:	7d3b      	ldrb	r3, [r7, #20]
 800cd3a:	f362 03c4 	bfi	r3, r2, #3, #2
 800cd3e:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd46:	f003 0301 	and.w	r3, r3, #1
 800cd4a:	b2da      	uxtb	r2, r3
 800cd4c:	7d3b      	ldrb	r3, [r7, #20]
 800cd4e:	f362 1345 	bfi	r3, r2, #5, #1
 800cd52:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d103      	bne.n	800cd64 <MQTTSerialize_connect+0x118>
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d003      	beq.n	800cd6c <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 800cd64:	7d3b      	ldrb	r3, [r7, #20]
 800cd66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd6a:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d103      	bne.n	800cd7c <MQTTSerialize_connect+0x130>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d003      	beq.n	800cd84 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 800cd7c:	7d3b      	ldrb	r3, [r7, #20]
 800cd7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd82:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 800cd84:	7d3a      	ldrb	r2, [r7, #20]
 800cd86:	f107 031c 	add.w	r3, r7, #28
 800cd8a:	4611      	mov	r1, r2
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f000 fa9c 	bl	800d2ca <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	8b1b      	ldrh	r3, [r3, #24]
 800cd96:	461a      	mov	r2, r3
 800cd98:	f107 031c 	add.w	r3, r7, #28
 800cd9c:	4611      	mov	r1, r2
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f000 faa8 	bl	800d2f4 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f107 001c 	add.w	r0, r7, #28
 800cdaa:	330c      	adds	r3, #12
 800cdac:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cdae:	f000 fae9 	bl	800d384 <writeMQTTString>
	if (options->willFlag)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	7edb      	ldrb	r3, [r3, #27]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d00d      	beq.n	800cdd6 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f107 001c 	add.w	r0, r7, #28
 800cdc0:	3324      	adds	r3, #36	; 0x24
 800cdc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cdc4:	f000 fade 	bl	800d384 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f107 001c 	add.w	r0, r7, #28
 800cdce:	3330      	adds	r3, #48	; 0x30
 800cdd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cdd2:	f000 fad7 	bl	800d384 <writeMQTTString>
	}
	if (flags.bits.username)
 800cdd6:	7d3b      	ldrb	r3, [r7, #20]
 800cdd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cddc:	b2db      	uxtb	r3, r3
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d006      	beq.n	800cdf0 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f107 001c 	add.w	r0, r7, #28
 800cde8:	3340      	adds	r3, #64	; 0x40
 800cdea:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cdec:	f000 faca 	bl	800d384 <writeMQTTString>
	if (flags.bits.password)
 800cdf0:	7d3b      	ldrb	r3, [r7, #20]
 800cdf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdf6:	b2db      	uxtb	r3, r3
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d006      	beq.n	800ce0a <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f107 001c 	add.w	r0, r7, #28
 800ce02:	334c      	adds	r3, #76	; 0x4c
 800ce04:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ce06:	f000 fabd 	bl	800d384 <writeMQTTString>

	rc = ptr - buf;
 800ce0a:	69fa      	ldr	r2, [r7, #28]
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	1ad3      	subs	r3, r2, r3
 800ce10:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 800ce12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3728      	adds	r7, #40	; 0x28
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	08021340 	.word	0x08021340
 800ce20:	08021348 	.word	0x08021348

0800ce24 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b08a      	sub	sp, #40	; 0x28
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	60f8      	str	r0, [r7, #12]
 800ce2c:	60b9      	str	r1, [r7, #8]
 800ce2e:	607a      	str	r2, [r7, #4]
 800ce30:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800ce32:	2300      	movs	r3, #0
 800ce34:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 800ce42:	2300      	movs	r3, #0
 800ce44:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800ce46:	f107 0318 	add.w	r3, r7, #24
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f000 fa29 	bl	800d2a2 <readChar>
 800ce50:	4603      	mov	r3, r0
 800ce52:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 800ce54:	7f3b      	ldrb	r3, [r7, #28]
 800ce56:	f023 030f 	bic.w	r3, r3, #15
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	2b20      	cmp	r3, #32
 800ce5e:	d12e      	bne.n	800cebe <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800ce60:	69bb      	ldr	r3, [r7, #24]
 800ce62:	f107 0214 	add.w	r2, r7, #20
 800ce66:	4611      	mov	r1, r2
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f000 f9e9 	bl	800d240 <MQTTPacket_decodeBuf>
 800ce6e:	6278      	str	r0, [r7, #36]	; 0x24
 800ce70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce72:	69bb      	ldr	r3, [r7, #24]
 800ce74:	4413      	add	r3, r2
 800ce76:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800ce78:	69bb      	ldr	r3, [r7, #24]
 800ce7a:	697a      	ldr	r2, [r7, #20]
 800ce7c:	4413      	add	r3, r2
 800ce7e:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 800ce80:	69bb      	ldr	r3, [r7, #24]
 800ce82:	6a3a      	ldr	r2, [r7, #32]
 800ce84:	1ad3      	subs	r3, r2, r3
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	dd1b      	ble.n	800cec2 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 800ce8a:	f107 0318 	add.w	r3, r7, #24
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f000 fa07 	bl	800d2a2 <readChar>
 800ce94:	4603      	mov	r3, r0
 800ce96:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 800ce98:	7c3b      	ldrb	r3, [r7, #16]
 800ce9a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ce9e:	b2db      	uxtb	r3, r3
 800cea0:	461a      	mov	r2, r3
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 800cea6:	f107 0318 	add.w	r3, r7, #24
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f000 f9f9 	bl	800d2a2 <readChar>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	701a      	strb	r2, [r3, #0]

	rc = 1;
 800ceb8:	2301      	movs	r3, #1
 800ceba:	627b      	str	r3, [r7, #36]	; 0x24
 800cebc:	e002      	b.n	800cec4 <MQTTDeserialize_connack+0xa0>
		goto exit;
 800cebe:	bf00      	nop
 800cec0:	e000      	b.n	800cec4 <MQTTDeserialize_connack+0xa0>
		goto exit;
 800cec2:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800cec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3728      	adds	r7, #40	; 0x28
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}

0800cece <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 800cece:	b580      	push	{r7, lr}
 800ced0:	b088      	sub	sp, #32
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	60f8      	str	r0, [r7, #12]
 800ced6:	60b9      	str	r1, [r7, #8]
 800ced8:	4613      	mov	r3, r2
 800ceda:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 800cedc:	2300      	movs	r3, #0
 800cede:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 800cee0:	f04f 33ff 	mov.w	r3, #4294967295
 800cee4:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	2b01      	cmp	r3, #1
 800ceee:	dc03      	bgt.n	800cef8 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800cef0:	f06f 0301 	mvn.w	r3, #1
 800cef4:	61fb      	str	r3, [r7, #28]
		goto exit;
 800cef6:	e01d      	b.n	800cf34 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 800cef8:	2300      	movs	r3, #0
 800cefa:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 800cefc:	79fb      	ldrb	r3, [r7, #7]
 800cefe:	f003 030f 	and.w	r3, r3, #15
 800cf02:	b2da      	uxtb	r2, r3
 800cf04:	7e3b      	ldrb	r3, [r7, #24]
 800cf06:	f362 1307 	bfi	r3, r2, #4, #4
 800cf0a:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800cf0c:	7e3a      	ldrb	r2, [r7, #24]
 800cf0e:	f107 0314 	add.w	r3, r7, #20
 800cf12:	4611      	mov	r1, r2
 800cf14:	4618      	mov	r0, r3
 800cf16:	f000 f9d8 	bl	800d2ca <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	2100      	movs	r1, #0
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f000 f8d9 	bl	800d0d6 <MQTTPacket_encode>
 800cf24:	4602      	mov	r2, r0
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	4413      	add	r3, r2
 800cf2a:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 800cf2c:	697a      	ldr	r2, [r7, #20]
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	1ad3      	subs	r3, r2, r3
 800cf32:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800cf34:	69fb      	ldr	r3, [r7, #28]
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3720      	adds	r7, #32
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}

0800cf3e <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 800cf3e:	b580      	push	{r7, lr}
 800cf40:	b082      	sub	sp, #8
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	6078      	str	r0, [r7, #4]
 800cf46:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 800cf48:	220c      	movs	r2, #12
 800cf4a:	6839      	ldr	r1, [r7, #0]
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f7ff ffbe 	bl	800cece <MQTTSerialize_zero>
 800cf52:	4603      	mov	r3, r0
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3708      	adds	r7, #8
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b08a      	sub	sp, #40	; 0x28
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	60b9      	str	r1, [r7, #8]
 800cf66:	607a      	str	r2, [r7, #4]
 800cf68:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800cf6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf70:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800cf72:	2300      	movs	r3, #0
 800cf74:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800cf76:	2300      	movs	r3, #0
 800cf78:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800cf7e:	f107 0318 	add.w	r3, r7, #24
 800cf82:	4618      	mov	r0, r3
 800cf84:	f000 f98d 	bl	800d2a2 <readChar>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 800cf8c:	7f3b      	ldrb	r3, [r7, #28]
 800cf8e:	f023 030f 	bic.w	r3, r3, #15
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	2b30      	cmp	r3, #48	; 0x30
 800cf96:	d14b      	bne.n	800d030 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 800cf98:	7f3b      	ldrb	r3, [r7, #28]
 800cf9a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800cf9e:	b2db      	uxtb	r3, r3
 800cfa0:	461a      	mov	r2, r3
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 800cfa6:	7f3b      	ldrb	r3, [r7, #28]
 800cfa8:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800cfac:	b2db      	uxtb	r3, r3
 800cfae:	461a      	mov	r2, r3
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 800cfb4:	7f3b      	ldrb	r3, [r7, #28]
 800cfb6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800cfba:	b2db      	uxtb	r3, r3
 800cfbc:	461a      	mov	r2, r3
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800cfc2:	69bb      	ldr	r3, [r7, #24]
 800cfc4:	f107 0214 	add.w	r2, r7, #20
 800cfc8:	4611      	mov	r1, r2
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f000 f938 	bl	800d240 <MQTTPacket_decodeBuf>
 800cfd0:	6278      	str	r0, [r7, #36]	; 0x24
 800cfd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfd4:	69bb      	ldr	r3, [r7, #24]
 800cfd6:	4413      	add	r3, r2
 800cfd8:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800cfda:	69bb      	ldr	r3, [r7, #24]
 800cfdc:	697a      	ldr	r2, [r7, #20]
 800cfde:	4413      	add	r3, r2
 800cfe0:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800cfe2:	f107 0318 	add.w	r3, r7, #24
 800cfe6:	6a3a      	ldr	r2, [r7, #32]
 800cfe8:	4619      	mov	r1, r3
 800cfea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfec:	f000 f9f8 	bl	800d3e0 <readMQTTLenString>
 800cff0:	4603      	mov	r3, r0
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d01e      	beq.n	800d034 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 800cff6:	69bb      	ldr	r3, [r7, #24]
 800cff8:	6a3a      	ldr	r2, [r7, #32]
 800cffa:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	db19      	blt.n	800d034 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	2b00      	cmp	r3, #0
 800d006:	dd08      	ble.n	800d01a <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 800d008:	f107 0318 	add.w	r3, r7, #24
 800d00c:	4618      	mov	r0, r3
 800d00e:	f000 f92d 	bl	800d26c <readInt>
 800d012:	4603      	mov	r3, r0
 800d014:	b29a      	uxth	r2, r3
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 800d01a:	69bb      	ldr	r3, [r7, #24]
 800d01c:	6a3a      	ldr	r2, [r7, #32]
 800d01e:	1ad2      	subs	r2, r2, r3
 800d020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d022:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 800d024:	69ba      	ldr	r2, [r7, #24]
 800d026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d028:	601a      	str	r2, [r3, #0]
	rc = 1;
 800d02a:	2301      	movs	r3, #1
 800d02c:	627b      	str	r3, [r7, #36]	; 0x24
 800d02e:	e002      	b.n	800d036 <MQTTDeserialize_publish+0xda>
		goto exit;
 800d030:	bf00      	nop
 800d032:	e000      	b.n	800d036 <MQTTDeserialize_publish+0xda>
		goto exit;
 800d034:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800d036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3728      	adds	r7, #40	; 0x28
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b08a      	sub	sp, #40	; 0x28
 800d044:	af00      	add	r7, sp, #0
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	60b9      	str	r1, [r7, #8]
 800d04a:	607a      	str	r2, [r7, #4]
 800d04c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800d04e:	2300      	movs	r3, #0
 800d050:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800d056:	2300      	movs	r3, #0
 800d058:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800d05a:	2300      	movs	r3, #0
 800d05c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800d05e:	f107 0318 	add.w	r3, r7, #24
 800d062:	4618      	mov	r0, r3
 800d064:	f000 f91d 	bl	800d2a2 <readChar>
 800d068:	4603      	mov	r3, r0
 800d06a:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 800d06c:	7f3b      	ldrb	r3, [r7, #28]
 800d06e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800d072:	b2db      	uxtb	r3, r3
 800d074:	461a      	mov	r2, r3
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 800d07a:	7f3b      	ldrb	r3, [r7, #28]
 800d07c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800d080:	b2db      	uxtb	r3, r3
 800d082:	461a      	mov	r2, r3
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d088:	69bb      	ldr	r3, [r7, #24]
 800d08a:	f107 0214 	add.w	r2, r7, #20
 800d08e:	4611      	mov	r1, r2
 800d090:	4618      	mov	r0, r3
 800d092:	f000 f8d5 	bl	800d240 <MQTTPacket_decodeBuf>
 800d096:	6278      	str	r0, [r7, #36]	; 0x24
 800d098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d09a:	69bb      	ldr	r3, [r7, #24]
 800d09c:	4413      	add	r3, r2
 800d09e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800d0a0:	69bb      	ldr	r3, [r7, #24]
 800d0a2:	697a      	ldr	r2, [r7, #20]
 800d0a4:	4413      	add	r3, r2
 800d0a6:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 800d0a8:	69bb      	ldr	r3, [r7, #24]
 800d0aa:	6a3a      	ldr	r2, [r7, #32]
 800d0ac:	1ad3      	subs	r3, r2, r3
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	dd0b      	ble.n	800d0ca <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 800d0b2:	f107 0318 	add.w	r3, r7, #24
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f000 f8d8 	bl	800d26c <readInt>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	b29a      	uxth	r2, r3
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	801a      	strh	r2, [r3, #0]

	rc = 1;
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	627b      	str	r3, [r7, #36]	; 0x24
 800d0c8:	e000      	b.n	800d0cc <MQTTDeserialize_ack+0x8c>
		goto exit;
 800d0ca:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800d0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3728      	adds	r7, #40	; 0x28
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}

0800d0d6 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 800d0d6:	b480      	push	{r7}
 800d0d8:	b085      	sub	sp, #20
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
 800d0de:	6039      	str	r1, [r7, #0]
	int rc = 0;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	425a      	negs	r2, r3
 800d0e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d0f0:	bf58      	it	pl
 800d0f2:	4253      	negpl	r3, r2
 800d0f4:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	da00      	bge.n	800d0fe <MQTTPacket_encode+0x28>
 800d0fc:	337f      	adds	r3, #127	; 0x7f
 800d0fe:	11db      	asrs	r3, r3, #7
 800d100:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	2b00      	cmp	r3, #0
 800d106:	dd03      	ble.n	800d110 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 800d108:	7afb      	ldrb	r3, [r7, #11]
 800d10a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d10e:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	1c5a      	adds	r2, r3, #1
 800d114:	60fa      	str	r2, [r7, #12]
 800d116:	461a      	mov	r2, r3
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	4413      	add	r3, r2
 800d11c:	7afa      	ldrb	r2, [r7, #11]
 800d11e:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	2b00      	cmp	r3, #0
 800d124:	dcde      	bgt.n	800d0e4 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 800d126:	68fb      	ldr	r3, [r7, #12]
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3714      	adds	r7, #20
 800d12c:	46bd      	mov	sp, r7
 800d12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d132:	4770      	bx	lr

0800d134 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b086      	sub	sp, #24
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
 800d13c:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 800d13e:	2301      	movs	r3, #1
 800d140:	617b      	str	r3, [r7, #20]
	int len = 0;
 800d142:	2300      	movs	r3, #0
 800d144:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	2200      	movs	r2, #0
 800d14a:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 800d14c:	f04f 33ff 	mov.w	r3, #4294967295
 800d150:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	3301      	adds	r3, #1
 800d156:	613b      	str	r3, [r7, #16]
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	2b04      	cmp	r3, #4
 800d15c:	dd03      	ble.n	800d166 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 800d15e:	f04f 33ff 	mov.w	r3, #4294967295
 800d162:	60fb      	str	r3, [r7, #12]
			goto exit;
 800d164:	e01d      	b.n	800d1a2 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 800d166:	f107 020b 	add.w	r2, r7, #11
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2101      	movs	r1, #1
 800d16e:	4610      	mov	r0, r2
 800d170:	4798      	blx	r3
 800d172:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2b01      	cmp	r3, #1
 800d178:	d112      	bne.n	800d1a0 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	681a      	ldr	r2, [r3, #0]
 800d17e:	7afb      	ldrb	r3, [r7, #11]
 800d180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d184:	6979      	ldr	r1, [r7, #20]
 800d186:	fb01 f303 	mul.w	r3, r1, r3
 800d18a:	441a      	add	r2, r3
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	01db      	lsls	r3, r3, #7
 800d194:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 800d196:	7afb      	ldrb	r3, [r7, #11]
 800d198:	b25b      	sxtb	r3, r3
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	dbd6      	blt.n	800d14c <MQTTPacket_decode+0x18>
exit:
 800d19e:	e000      	b.n	800d1a2 <MQTTPacket_decode+0x6e>
			goto exit;
 800d1a0:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 800d1a2:	693b      	ldr	r3, [r7, #16]
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3718      	adds	r7, #24
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b083      	sub	sp, #12
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2b7f      	cmp	r3, #127	; 0x7f
 800d1be:	dc03      	bgt.n	800d1c8 <MQTTPacket_len+0x1c>
		rem_len += 1;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	3301      	adds	r3, #1
 800d1c4:	607b      	str	r3, [r7, #4]
 800d1c6:	e012      	b.n	800d1ee <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d1ce:	da03      	bge.n	800d1d8 <MQTTPacket_len+0x2c>
		rem_len += 2;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	3302      	adds	r3, #2
 800d1d4:	607b      	str	r3, [r7, #4]
 800d1d6:	e00a      	b.n	800d1ee <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	4a08      	ldr	r2, [pc, #32]	; (800d1fc <MQTTPacket_len+0x50>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	dc03      	bgt.n	800d1e8 <MQTTPacket_len+0x3c>
		rem_len += 3;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	3303      	adds	r3, #3
 800d1e4:	607b      	str	r3, [r7, #4]
 800d1e6:	e002      	b.n	800d1ee <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	3304      	adds	r3, #4
 800d1ec:	607b      	str	r3, [r7, #4]
	return rem_len;
 800d1ee:	687b      	ldr	r3, [r7, #4]
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	370c      	adds	r7, #12
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr
 800d1fc:	001ffffe 	.word	0x001ffffe

0800d200 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 800d200:	b480      	push	{r7}
 800d202:	b085      	sub	sp, #20
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 800d20a:	2300      	movs	r3, #0
 800d20c:	60fb      	str	r3, [r7, #12]
 800d20e:	e00a      	b.n	800d226 <bufchar+0x26>
		*c = *bufptr++;
 800d210:	4b0a      	ldr	r3, [pc, #40]	; (800d23c <bufchar+0x3c>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	1c5a      	adds	r2, r3, #1
 800d216:	4909      	ldr	r1, [pc, #36]	; (800d23c <bufchar+0x3c>)
 800d218:	600a      	str	r2, [r1, #0]
 800d21a:	781a      	ldrb	r2, [r3, #0]
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	3301      	adds	r3, #1
 800d224:	60fb      	str	r3, [r7, #12]
 800d226:	68fa      	ldr	r2, [r7, #12]
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	429a      	cmp	r2, r3
 800d22c:	dbf0      	blt.n	800d210 <bufchar+0x10>
	return count;
 800d22e:	683b      	ldr	r3, [r7, #0]
}
 800d230:	4618      	mov	r0, r3
 800d232:	3714      	adds	r7, #20
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr
 800d23c:	200009b4 	.word	0x200009b4

0800d240 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b082      	sub	sp, #8
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 800d24a:	4a06      	ldr	r2, [pc, #24]	; (800d264 <MQTTPacket_decodeBuf+0x24>)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 800d250:	6839      	ldr	r1, [r7, #0]
 800d252:	4805      	ldr	r0, [pc, #20]	; (800d268 <MQTTPacket_decodeBuf+0x28>)
 800d254:	f7ff ff6e 	bl	800d134 <MQTTPacket_decode>
 800d258:	4603      	mov	r3, r0
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3708      	adds	r7, #8
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
 800d262:	bf00      	nop
 800d264:	200009b4 	.word	0x200009b4
 800d268:	0800d201 	.word	0x0800d201

0800d26c <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 800d26c:	b480      	push	{r7}
 800d26e:	b085      	sub	sp, #20
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	021b      	lsls	r3, r3, #8
 800d280:	68fa      	ldr	r2, [r7, #12]
 800d282:	3201      	adds	r2, #1
 800d284:	7812      	ldrb	r2, [r2, #0]
 800d286:	4413      	add	r3, r2
 800d288:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	1c9a      	adds	r2, r3, #2
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	601a      	str	r2, [r3, #0]
	return len;
 800d294:	68bb      	ldr	r3, [r7, #8]
}
 800d296:	4618      	mov	r0, r3
 800d298:	3714      	adds	r7, #20
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr

0800d2a2 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 800d2a2:	b480      	push	{r7}
 800d2a4:	b085      	sub	sp, #20
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	1c5a      	adds	r2, r3, #1
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	601a      	str	r2, [r3, #0]
	return c;
 800d2bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3714      	adds	r7, #20
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr

0800d2ca <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 800d2ca:	b480      	push	{r7}
 800d2cc:	b083      	sub	sp, #12
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
 800d2d2:	460b      	mov	r3, r1
 800d2d4:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	78fa      	ldrb	r2, [r7, #3]
 800d2dc:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	1c5a      	adds	r2, r3, #1
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	601a      	str	r2, [r3, #0]
}
 800d2e8:	bf00      	nop
 800d2ea:	370c      	adds	r7, #12
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr

0800d2f4 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b083      	sub	sp, #12
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	2b00      	cmp	r3, #0
 800d302:	da00      	bge.n	800d306 <writeInt+0x12>
 800d304:	33ff      	adds	r3, #255	; 0xff
 800d306:	121b      	asrs	r3, r3, #8
 800d308:	461a      	mov	r2, r3
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	b2d2      	uxtb	r2, r2
 800d310:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	1c5a      	adds	r2, r3, #1
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	425a      	negs	r2, r3
 800d320:	b2db      	uxtb	r3, r3
 800d322:	b2d2      	uxtb	r2, r2
 800d324:	bf58      	it	pl
 800d326:	4253      	negpl	r3, r2
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	6812      	ldr	r2, [r2, #0]
 800d32c:	b2db      	uxtb	r3, r3
 800d32e:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	1c5a      	adds	r2, r3, #1
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	601a      	str	r2, [r3, #0]
}
 800d33a:	bf00      	nop
 800d33c:	370c      	adds	r7, #12
 800d33e:	46bd      	mov	sp, r7
 800d340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d344:	4770      	bx	lr

0800d346 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 800d346:	b580      	push	{r7, lr}
 800d348:	b084      	sub	sp, #16
 800d34a:	af00      	add	r7, sp, #0
 800d34c:	6078      	str	r0, [r7, #4]
 800d34e:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 800d350:	6838      	ldr	r0, [r7, #0]
 800d352:	f7f2 ffa5 	bl	80002a0 <strlen>
 800d356:	4603      	mov	r3, r0
 800d358:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 800d35a:	68f9      	ldr	r1, [r7, #12]
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f7ff ffc9 	bl	800d2f4 <writeInt>
	memcpy(*pptr, string, len);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	68fa      	ldr	r2, [r7, #12]
 800d368:	6839      	ldr	r1, [r7, #0]
 800d36a:	4618      	mov	r0, r3
 800d36c:	f00f f871 	bl	801c452 <memcpy>
	*pptr += len;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681a      	ldr	r2, [r3, #0]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	441a      	add	r2, r3
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	601a      	str	r2, [r3, #0]
}
 800d37c:	bf00      	nop
 800d37e:	3710      	adds	r7, #16
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b084      	sub	sp, #16
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	4638      	mov	r0, r7
 800d38e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2b00      	cmp	r3, #0
 800d396:	dd12      	ble.n	800d3be <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	4619      	mov	r1, r3
 800d39c:	68f8      	ldr	r0, [r7, #12]
 800d39e:	f7ff ffa9 	bl	800d2f4 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	68b9      	ldr	r1, [r7, #8]
 800d3a8:	687a      	ldr	r2, [r7, #4]
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f00f f851 	bl	801c452 <memcpy>
		*pptr += mqttstring.lenstring.len;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	687a      	ldr	r2, [r7, #4]
 800d3b6:	441a      	add	r2, r3
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 800d3bc:	e00c      	b.n	800d3d8 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d005      	beq.n	800d3d0 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	68f8      	ldr	r0, [r7, #12]
 800d3ca:	f7ff ffbc 	bl	800d346 <writeCString>
}
 800d3ce:	e003      	b.n	800d3d8 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 800d3d0:	2100      	movs	r1, #0
 800d3d2:	68f8      	ldr	r0, [r7, #12]
 800d3d4:	f7ff ff8e 	bl	800d2f4 <writeInt>
}
 800d3d8:	bf00      	nop
 800d3da:	3710      	adds	r7, #16
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}

0800d3e0 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b086      	sub	sp, #24
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	60f8      	str	r0, [r7, #12]
 800d3e8:	60b9      	str	r1, [r7, #8]
 800d3ea:	607a      	str	r2, [r7, #4]
	int rc = 0;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	687a      	ldr	r2, [r7, #4]
 800d3f6:	1ad3      	subs	r3, r2, r3
 800d3f8:	2b01      	cmp	r3, #1
 800d3fa:	dd1a      	ble.n	800d432 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 800d3fc:	68b8      	ldr	r0, [r7, #8]
 800d3fe:	f7ff ff35 	bl	800d26c <readInt>
 800d402:	4602      	mov	r2, r0
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	68fa      	ldr	r2, [r7, #12]
 800d40e:	6852      	ldr	r2, [r2, #4]
 800d410:	4413      	add	r3, r2
 800d412:	687a      	ldr	r2, [r7, #4]
 800d414:	429a      	cmp	r2, r3
 800d416:	d30c      	bcc.n	800d432 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	681a      	ldr	r2, [r3, #0]
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	68fa      	ldr	r2, [r7, #12]
 800d426:	6852      	ldr	r2, [r2, #4]
 800d428:	441a      	add	r2, r3
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	601a      	str	r2, [r3, #0]
			rc = 1;
 800d42e:	2301      	movs	r3, #1
 800d430:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2200      	movs	r2, #0
 800d436:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 800d438:	697b      	ldr	r3, [r7, #20]
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3718      	adds	r7, #24
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}

0800d442 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 800d442:	b580      	push	{r7, lr}
 800d444:	b086      	sub	sp, #24
 800d446:	af00      	add	r7, sp, #0
 800d448:	1d3b      	adds	r3, r7, #4
 800d44a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 800d44e:	2300      	movs	r3, #0
 800d450:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d006      	beq.n	800d466 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7f2 ff20 	bl	80002a0 <strlen>
 800d460:	4603      	mov	r3, r0
 800d462:	617b      	str	r3, [r7, #20]
 800d464:	e001      	b.n	800d46a <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	617b      	str	r3, [r7, #20]
	return rc;
 800d46a:	697b      	ldr	r3, [r7, #20]
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3718      	adds	r7, #24
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b086      	sub	sp, #24
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	6039      	str	r1, [r7, #0]
	int alen = 0,
 800d47e:	2300      	movs	r3, #0
 800d480:	617b      	str	r3, [r7, #20]
		blen = 0;
 800d482:	2300      	movs	r3, #0
 800d484:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d00a      	beq.n	800d4a4 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4618      	mov	r0, r3
 800d49a:	f7f2 ff01 	bl	80002a0 <strlen>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	617b      	str	r3, [r7, #20]
 800d4a2:	e005      	b.n	800d4b0 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	689b      	ldr	r3, [r3, #8]
 800d4a8:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 800d4b0:	6838      	ldr	r0, [r7, #0]
 800d4b2:	f7f2 fef5 	bl	80002a0 <strlen>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 800d4ba:	697a      	ldr	r2, [r7, #20]
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	429a      	cmp	r2, r3
 800d4c0:	d10a      	bne.n	800d4d8 <MQTTPacket_equals+0x64>
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	6839      	ldr	r1, [r7, #0]
 800d4c8:	6938      	ldr	r0, [r7, #16]
 800d4ca:	f00e fe35 	bl	801c138 <strncmp>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d101      	bne.n	800d4d8 <MQTTPacket_equals+0x64>
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	e000      	b.n	800d4da <MQTTPacket_equals+0x66>
 800d4d8:	2300      	movs	r3, #0
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3718      	adds	r7, #24
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}

0800d4e2 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 800d4e2:	b580      	push	{r7, lr}
 800d4e4:	b086      	sub	sp, #24
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	60f8      	str	r0, [r7, #12]
 800d4ea:	4638      	mov	r0, r7
 800d4ec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 800d4f4:	463b      	mov	r3, r7
 800d4f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d4fa:	f7ff ffa2 	bl	800d442 <MQTTstrlen>
 800d4fe:	4603      	mov	r3, r0
 800d500:	1c9a      	adds	r2, r3, #2
 800d502:	6a3b      	ldr	r3, [r7, #32]
 800d504:	4413      	add	r3, r2
 800d506:	697a      	ldr	r2, [r7, #20]
 800d508:	4413      	add	r3, r2
 800d50a:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	dd02      	ble.n	800d518 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	3302      	adds	r3, #2
 800d516:	617b      	str	r3, [r7, #20]
	return len;
 800d518:	697b      	ldr	r3, [r7, #20]
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3718      	adds	r7, #24
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}

0800d522 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 800d522:	b580      	push	{r7, lr}
 800d524:	b08a      	sub	sp, #40	; 0x28
 800d526:	af02      	add	r7, sp, #8
 800d528:	60f8      	str	r0, [r7, #12]
 800d52a:	60b9      	str	r1, [r7, #8]
 800d52c:	603b      	str	r3, [r7, #0]
 800d52e:	4613      	mov	r3, r2
 800d530:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 800d536:	2300      	movs	r3, #0
 800d538:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 800d53a:	2300      	movs	r3, #0
 800d53c:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800d53e:	2300      	movs	r3, #0
 800d540:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 800d542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d544:	9300      	str	r3, [sp, #0]
 800d546:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d54a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d54c:	6838      	ldr	r0, [r7, #0]
 800d54e:	f7ff ffc8 	bl	800d4e2 <MQTTSerialize_publishLength>
 800d552:	61b8      	str	r0, [r7, #24]
 800d554:	69b8      	ldr	r0, [r7, #24]
 800d556:	f7ff fe29 	bl	800d1ac <MQTTPacket_len>
 800d55a:	4602      	mov	r2, r0
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	4293      	cmp	r3, r2
 800d560:	da03      	bge.n	800d56a <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800d562:	f06f 0301 	mvn.w	r3, #1
 800d566:	61fb      	str	r3, [r7, #28]
		goto exit;
 800d568:	e04c      	b.n	800d604 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 800d56a:	7c3b      	ldrb	r3, [r7, #16]
 800d56c:	2203      	movs	r2, #3
 800d56e:	f362 1307 	bfi	r3, r2, #4, #4
 800d572:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 800d574:	79fb      	ldrb	r3, [r7, #7]
 800d576:	f003 0301 	and.w	r3, r3, #1
 800d57a:	b2da      	uxtb	r2, r3
 800d57c:	7c3b      	ldrb	r3, [r7, #16]
 800d57e:	f362 03c3 	bfi	r3, r2, #3, #1
 800d582:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	f003 0303 	and.w	r3, r3, #3
 800d58a:	b2da      	uxtb	r2, r3
 800d58c:	7c3b      	ldrb	r3, [r7, #16]
 800d58e:	f362 0342 	bfi	r3, r2, #1, #2
 800d592:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 800d594:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d598:	f003 0301 	and.w	r3, r3, #1
 800d59c:	b2da      	uxtb	r2, r3
 800d59e:	7c3b      	ldrb	r3, [r7, #16]
 800d5a0:	f362 0300 	bfi	r3, r2, #0, #1
 800d5a4:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 800d5a6:	7c3a      	ldrb	r2, [r7, #16]
 800d5a8:	f107 0314 	add.w	r3, r7, #20
 800d5ac:	4611      	mov	r1, r2
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7ff fe8b 	bl	800d2ca <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	69b9      	ldr	r1, [r7, #24]
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f7ff fd8c 	bl	800d0d6 <MQTTPacket_encode>
 800d5be:	4602      	mov	r2, r0
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	4413      	add	r3, r2
 800d5c4:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 800d5c6:	f107 0014 	add.w	r0, r7, #20
 800d5ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d5ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d5d0:	f7ff fed8 	bl	800d384 <writeMQTTString>

	if (qos > 0)
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	dd06      	ble.n	800d5e8 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 800d5da:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800d5dc:	f107 0314 	add.w	r3, r7, #20
 800d5e0:	4611      	mov	r1, r2
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7ff fe86 	bl	800d2f4 <writeInt>

	memcpy(ptr, payload, payloadlen);
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d5ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f00e ff2f 	bl	801c452 <memcpy>
	ptr += payloadlen;
 800d5f4:	697a      	ldr	r2, [r7, #20]
 800d5f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5f8:	4413      	add	r3, r2
 800d5fa:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 800d5fc:	697a      	ldr	r2, [r7, #20]
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	1ad3      	subs	r3, r2, r3
 800d602:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800d604:	69fb      	ldr	r3, [r7, #28]
}
 800d606:	4618      	mov	r0, r3
 800d608:	3720      	adds	r7, #32
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}

0800d60e <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 800d60e:	b580      	push	{r7, lr}
 800d610:	b088      	sub	sp, #32
 800d612:	af00      	add	r7, sp, #0
 800d614:	60f8      	str	r0, [r7, #12]
 800d616:	60b9      	str	r1, [r7, #8]
 800d618:	4611      	mov	r1, r2
 800d61a:	461a      	mov	r2, r3
 800d61c:	460b      	mov	r3, r1
 800d61e:	71fb      	strb	r3, [r7, #7]
 800d620:	4613      	mov	r3, r2
 800d622:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 800d624:	2300      	movs	r3, #0
 800d626:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800d628:	2300      	movs	r3, #0
 800d62a:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	2b03      	cmp	r3, #3
 800d634:	dc03      	bgt.n	800d63e <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800d636:	f06f 0301 	mvn.w	r3, #1
 800d63a:	61fb      	str	r3, [r7, #28]
		goto exit;
 800d63c:	e037      	b.n	800d6ae <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 800d63e:	79fb      	ldrb	r3, [r7, #7]
 800d640:	f003 030f 	and.w	r3, r3, #15
 800d644:	b2da      	uxtb	r2, r3
 800d646:	7e3b      	ldrb	r3, [r7, #24]
 800d648:	f362 1307 	bfi	r3, r2, #4, #4
 800d64c:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 800d64e:	79bb      	ldrb	r3, [r7, #6]
 800d650:	f003 0301 	and.w	r3, r3, #1
 800d654:	b2da      	uxtb	r2, r3
 800d656:	7e3b      	ldrb	r3, [r7, #24]
 800d658:	f362 03c3 	bfi	r3, r2, #3, #1
 800d65c:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 800d65e:	79fb      	ldrb	r3, [r7, #7]
 800d660:	2b06      	cmp	r3, #6
 800d662:	bf0c      	ite	eq
 800d664:	2301      	moveq	r3, #1
 800d666:	2300      	movne	r3, #0
 800d668:	b2db      	uxtb	r3, r3
 800d66a:	f003 0303 	and.w	r3, r3, #3
 800d66e:	b2da      	uxtb	r2, r3
 800d670:	7e3b      	ldrb	r3, [r7, #24]
 800d672:	f362 0342 	bfi	r3, r2, #1, #2
 800d676:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800d678:	7e3a      	ldrb	r2, [r7, #24]
 800d67a:	f107 0314 	add.w	r3, r7, #20
 800d67e:	4611      	mov	r1, r2
 800d680:	4618      	mov	r0, r3
 800d682:	f7ff fe22 	bl	800d2ca <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	2102      	movs	r1, #2
 800d68a:	4618      	mov	r0, r3
 800d68c:	f7ff fd23 	bl	800d0d6 <MQTTPacket_encode>
 800d690:	4602      	mov	r2, r0
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	4413      	add	r3, r2
 800d696:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 800d698:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d69a:	f107 0314 	add.w	r3, r7, #20
 800d69e:	4611      	mov	r1, r2
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f7ff fe27 	bl	800d2f4 <writeInt>
	rc = ptr - buf;
 800d6a6:	697a      	ldr	r2, [r7, #20]
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	1ad3      	subs	r3, r2, r3
 800d6ac:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800d6ae:	69fb      	ldr	r3, [r7, #28]
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3720      	adds	r7, #32
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}

0800d6b8 <unescape_http_url>:
 @brief	convert escape characters(%XX) to ASCII character
 */ 
void unescape_http_url(
	char * url	/**< pointer to be converted ( escape characters )*/
	)
{
 800d6b8:	b590      	push	{r4, r7, lr}
 800d6ba:	b085      	sub	sp, #20
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
	int x, y;

	for (x = 0, y = 0; url[y]; ++x, ++y) {
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	60fb      	str	r3, [r7, #12]
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	60bb      	str	r3, [r7, #8]
 800d6c8:	e02e      	b.n	800d728 <unescape_http_url+0x70>
		if ((url[x] = url[y]) == '%') {
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	687a      	ldr	r2, [r7, #4]
 800d6ce:	441a      	add	r2, r3
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	6879      	ldr	r1, [r7, #4]
 800d6d4:	440b      	add	r3, r1
 800d6d6:	7812      	ldrb	r2, [r2, #0]
 800d6d8:	701a      	strb	r2, [r3, #0]
 800d6da:	781b      	ldrb	r3, [r3, #0]
 800d6dc:	2b25      	cmp	r3, #37	; 0x25
 800d6de:	d11d      	bne.n	800d71c <unescape_http_url+0x64>
			url[x] = C2D(url[y+1])*0x10+C2D(url[y+2]);
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	3301      	adds	r3, #1
 800d6e4:	687a      	ldr	r2, [r7, #4]
 800d6e6:	4413      	add	r3, r2
 800d6e8:	781b      	ldrb	r3, [r3, #0]
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f000 fbf1 	bl	800ded2 <C2D>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	011b      	lsls	r3, r3, #4
 800d6f4:	b2dc      	uxtb	r4, r3
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	3302      	adds	r3, #2
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	4413      	add	r3, r2
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	4618      	mov	r0, r3
 800d702:	f000 fbe6 	bl	800ded2 <C2D>
 800d706:	4603      	mov	r3, r0
 800d708:	4619      	mov	r1, r3
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	4413      	add	r3, r2
 800d710:	1862      	adds	r2, r4, r1
 800d712:	b2d2      	uxtb	r2, r2
 800d714:	701a      	strb	r2, [r3, #0]
			y+=2;
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	3302      	adds	r3, #2
 800d71a:	60bb      	str	r3, [r7, #8]
	for (x = 0, y = 0; url[y]; ++x, ++y) {
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	3301      	adds	r3, #1
 800d720:	60fb      	str	r3, [r7, #12]
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	3301      	adds	r3, #1
 800d726:	60bb      	str	r3, [r7, #8]
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	687a      	ldr	r2, [r7, #4]
 800d72c:	4413      	add	r3, r2
 800d72e:	781b      	ldrb	r3, [r3, #0]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d1ca      	bne.n	800d6ca <unescape_http_url+0x12>
		}
	}
	url[x] = '\0';
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	687a      	ldr	r2, [r7, #4]
 800d738:	4413      	add	r3, r2
 800d73a:	2200      	movs	r2, #0
 800d73c:	701a      	strb	r2, [r3, #0]
}
 800d73e:	bf00      	nop
 800d740:	3714      	adds	r7, #20
 800d742:	46bd      	mov	sp, r7
 800d744:	bd90      	pop	{r4, r7, pc}
	...

0800d748 <make_http_response_head>:
void make_http_response_head(
	char * buf, 	/**< pointer to response header to be made */
	char type, 	/**< response type */
	uint32_t len	/**< size of response header */
	)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b088      	sub	sp, #32
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	60f8      	str	r0, [r7, #12]
 800d750:	460b      	mov	r3, r1
 800d752:	607a      	str	r2, [r7, #4]
 800d754:	72fb      	strb	r3, [r7, #11]
	char * head;
	char tmp[10];
			
	/*  file type*/
	if 	(type == PTYPE_HTML) 		head = RES_HTMLHEAD_OK;
 800d756:	7afb      	ldrb	r3, [r7, #11]
 800d758:	2b01      	cmp	r3, #1
 800d75a:	d102      	bne.n	800d762 <make_http_response_head+0x1a>
 800d75c:	4b42      	ldr	r3, [pc, #264]	; (800d868 <make_http_response_head+0x120>)
 800d75e:	61fb      	str	r3, [r7, #28]
 800d760:	e061      	b.n	800d826 <make_http_response_head+0xde>
	else if (type == PTYPE_GIF)		head = RES_GIFHEAD_OK;
 800d762:	7afb      	ldrb	r3, [r7, #11]
 800d764:	2b02      	cmp	r3, #2
 800d766:	d102      	bne.n	800d76e <make_http_response_head+0x26>
 800d768:	4b40      	ldr	r3, [pc, #256]	; (800d86c <make_http_response_head+0x124>)
 800d76a:	61fb      	str	r3, [r7, #28]
 800d76c:	e05b      	b.n	800d826 <make_http_response_head+0xde>
	else if (type == PTYPE_TEXT)	head = RES_TEXTHEAD_OK;
 800d76e:	7afb      	ldrb	r3, [r7, #11]
 800d770:	2b03      	cmp	r3, #3
 800d772:	d102      	bne.n	800d77a <make_http_response_head+0x32>
 800d774:	4b3e      	ldr	r3, [pc, #248]	; (800d870 <make_http_response_head+0x128>)
 800d776:	61fb      	str	r3, [r7, #28]
 800d778:	e055      	b.n	800d826 <make_http_response_head+0xde>
	else if (type == PTYPE_JPEG)	head = RES_JPEGHEAD_OK;
 800d77a:	7afb      	ldrb	r3, [r7, #11]
 800d77c:	2b04      	cmp	r3, #4
 800d77e:	d102      	bne.n	800d786 <make_http_response_head+0x3e>
 800d780:	4b3c      	ldr	r3, [pc, #240]	; (800d874 <make_http_response_head+0x12c>)
 800d782:	61fb      	str	r3, [r7, #28]
 800d784:	e04f      	b.n	800d826 <make_http_response_head+0xde>
	else if (type == PTYPE_FLASH)	head = RES_FLASHHEAD_OK;
 800d786:	7afb      	ldrb	r3, [r7, #11]
 800d788:	2b05      	cmp	r3, #5
 800d78a:	d102      	bne.n	800d792 <make_http_response_head+0x4a>
 800d78c:	4b3a      	ldr	r3, [pc, #232]	; (800d878 <make_http_response_head+0x130>)
 800d78e:	61fb      	str	r3, [r7, #28]
 800d790:	e049      	b.n	800d826 <make_http_response_head+0xde>
	else if (type == PTYPE_XML) 	head =  RES_XMLHEAD_OK;
 800d792:	7afb      	ldrb	r3, [r7, #11]
 800d794:	2b09      	cmp	r3, #9
 800d796:	d102      	bne.n	800d79e <make_http_response_head+0x56>
 800d798:	4b38      	ldr	r3, [pc, #224]	; (800d87c <make_http_response_head+0x134>)
 800d79a:	61fb      	str	r3, [r7, #28]
 800d79c:	e043      	b.n	800d826 <make_http_response_head+0xde>
	else if (type == PTYPE_CSS) 	head = RES_CSSHEAD_OK;
 800d79e:	7afb      	ldrb	r3, [r7, #11]
 800d7a0:	2b0a      	cmp	r3, #10
 800d7a2:	d102      	bne.n	800d7aa <make_http_response_head+0x62>
 800d7a4:	4b36      	ldr	r3, [pc, #216]	; (800d880 <make_http_response_head+0x138>)
 800d7a6:	61fb      	str	r3, [r7, #28]
 800d7a8:	e03d      	b.n	800d826 <make_http_response_head+0xde>
	else if (type == PTYPE_JSON)	head = RES_JSONHEAD_OK;
 800d7aa:	7afb      	ldrb	r3, [r7, #11]
 800d7ac:	2b0c      	cmp	r3, #12
 800d7ae:	d102      	bne.n	800d7b6 <make_http_response_head+0x6e>
 800d7b0:	4b34      	ldr	r3, [pc, #208]	; (800d884 <make_http_response_head+0x13c>)
 800d7b2:	61fb      	str	r3, [r7, #28]
 800d7b4:	e037      	b.n	800d826 <make_http_response_head+0xde>
	else if (type == PTYPE_JS)		head = RES_JSHEAD_OK;
 800d7b6:	7afb      	ldrb	r3, [r7, #11]
 800d7b8:	2b0b      	cmp	r3, #11
 800d7ba:	d102      	bne.n	800d7c2 <make_http_response_head+0x7a>
 800d7bc:	4b32      	ldr	r3, [pc, #200]	; (800d888 <make_http_response_head+0x140>)
 800d7be:	61fb      	str	r3, [r7, #28]
 800d7c0:	e031      	b.n	800d826 <make_http_response_head+0xde>
////	else if (type == PTYPE_CGI)		head = RES_CGIHEAD_OK;
	else if (type == PTYPE_CGI)		head = RES_CGIHEAD_OK_CHANGED;
 800d7c2:	7afb      	ldrb	r3, [r7, #11]
 800d7c4:	2b08      	cmp	r3, #8
 800d7c6:	d102      	bne.n	800d7ce <make_http_response_head+0x86>
 800d7c8:	4b30      	ldr	r3, [pc, #192]	; (800d88c <make_http_response_head+0x144>)
 800d7ca:	61fb      	str	r3, [r7, #28]
 800d7cc:	e02b      	b.n	800d826 <make_http_response_head+0xde>
	else if (type == PTYPE_PNG)		head = RES_PNGHEAD_OK;
 800d7ce:	7afb      	ldrb	r3, [r7, #11]
 800d7d0:	2b0d      	cmp	r3, #13
 800d7d2:	d102      	bne.n	800d7da <make_http_response_head+0x92>
 800d7d4:	4b2e      	ldr	r3, [pc, #184]	; (800d890 <make_http_response_head+0x148>)
 800d7d6:	61fb      	str	r3, [r7, #28]
 800d7d8:	e025      	b.n	800d826 <make_http_response_head+0xde>
	else if (type == PTYPE_ICO)		head = RES_ICOHEAD_OK;
 800d7da:	7afb      	ldrb	r3, [r7, #11]
 800d7dc:	2b0e      	cmp	r3, #14
 800d7de:	d102      	bne.n	800d7e6 <make_http_response_head+0x9e>
 800d7e0:	4b2c      	ldr	r3, [pc, #176]	; (800d894 <make_http_response_head+0x14c>)
 800d7e2:	61fb      	str	r3, [r7, #28]
 800d7e4:	e01f      	b.n	800d826 <make_http_response_head+0xde>
	else if (type == PTYPE_TTF)		head = RES_TTFHEAD_OK;
 800d7e6:	7afb      	ldrb	r3, [r7, #11]
 800d7e8:	2b14      	cmp	r3, #20
 800d7ea:	d102      	bne.n	800d7f2 <make_http_response_head+0xaa>
 800d7ec:	4b2a      	ldr	r3, [pc, #168]	; (800d898 <make_http_response_head+0x150>)
 800d7ee:	61fb      	str	r3, [r7, #28]
 800d7f0:	e019      	b.n	800d826 <make_http_response_head+0xde>
	else if (type == PTYPE_OTF)		head = RES_OTFHEAD_OK;
 800d7f2:	7afb      	ldrb	r3, [r7, #11]
 800d7f4:	2b15      	cmp	r3, #21
 800d7f6:	d102      	bne.n	800d7fe <make_http_response_head+0xb6>
 800d7f8:	4b28      	ldr	r3, [pc, #160]	; (800d89c <make_http_response_head+0x154>)
 800d7fa:	61fb      	str	r3, [r7, #28]
 800d7fc:	e013      	b.n	800d826 <make_http_response_head+0xde>
	else if (type == PTYPE_WOFF)	head = RES_WOFFHEAD_OK;
 800d7fe:	7afb      	ldrb	r3, [r7, #11]
 800d800:	2b16      	cmp	r3, #22
 800d802:	d102      	bne.n	800d80a <make_http_response_head+0xc2>
 800d804:	4b26      	ldr	r3, [pc, #152]	; (800d8a0 <make_http_response_head+0x158>)
 800d806:	61fb      	str	r3, [r7, #28]
 800d808:	e00d      	b.n	800d826 <make_http_response_head+0xde>
	else if (type == PTYPE_EOT)		head = RES_EOTHEAD_OK;
 800d80a:	7afb      	ldrb	r3, [r7, #11]
 800d80c:	2b17      	cmp	r3, #23
 800d80e:	d102      	bne.n	800d816 <make_http_response_head+0xce>
 800d810:	4b24      	ldr	r3, [pc, #144]	; (800d8a4 <make_http_response_head+0x15c>)
 800d812:	61fb      	str	r3, [r7, #28]
 800d814:	e007      	b.n	800d826 <make_http_response_head+0xde>
	else if (type == PTYPE_SVG)		head = RES_SVGHEAD_OK;
 800d816:	7afb      	ldrb	r3, [r7, #11]
 800d818:	2b18      	cmp	r3, #24
 800d81a:	d102      	bne.n	800d822 <make_http_response_head+0xda>
 800d81c:	4b22      	ldr	r3, [pc, #136]	; (800d8a8 <make_http_response_head+0x160>)
 800d81e:	61fb      	str	r3, [r7, #28]
 800d820:	e001      	b.n	800d826 <make_http_response_head+0xde>
	{
		head = NULL;
		printf("\r\n\r\n-MAKE HEAD UNKNOWN-\r\n");
	}
#else
	else head = NULL;
 800d822:	2300      	movs	r3, #0
 800d824:	61fb      	str	r3, [r7, #28]
#endif	

	sprintf(tmp, "%ld", len);
 800d826:	f107 0310 	add.w	r3, r7, #16
 800d82a:	687a      	ldr	r2, [r7, #4]
 800d82c:	491f      	ldr	r1, [pc, #124]	; (800d8ac <make_http_response_head+0x164>)
 800d82e:	4618      	mov	r0, r3
 800d830:	f00e faea 	bl	801be08 <siprintf>
	strcpy(buf, head);
 800d834:	69f9      	ldr	r1, [r7, #28]
 800d836:	68f8      	ldr	r0, [r7, #12]
 800d838:	f00e fe03 	bl	801c442 <strcpy>
	strcat(buf, tmp);
 800d83c:	f107 0310 	add.w	r3, r7, #16
 800d840:	4619      	mov	r1, r3
 800d842:	68f8      	ldr	r0, [r7, #12]
 800d844:	f00e fc38 	bl	801c0b8 <strcat>
	strcat(buf, "\r\n\r\n");
 800d848:	68f8      	ldr	r0, [r7, #12]
 800d84a:	f7f2 fd29 	bl	80002a0 <strlen>
 800d84e:	4603      	mov	r3, r0
 800d850:	461a      	mov	r2, r3
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	4413      	add	r3, r2
 800d856:	4a16      	ldr	r2, [pc, #88]	; (800d8b0 <make_http_response_head+0x168>)
 800d858:	6810      	ldr	r0, [r2, #0]
 800d85a:	6018      	str	r0, [r3, #0]
 800d85c:	7912      	ldrb	r2, [r2, #4]
 800d85e:	711a      	strb	r2, [r3, #4]
}
 800d860:	bf00      	nop
 800d862:	3720      	adds	r7, #32
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}
 800d868:	08021350 	.word	0x08021350
 800d86c:	080213a4 	.word	0x080213a4
 800d870:	080213e0 	.word	0x080213e0
 800d874:	0802141c 	.word	0x0802141c
 800d878:	08021458 	.word	0x08021458
 800d87c:	080214a8 	.word	0x080214a8
 800d880:	080214fc 	.word	0x080214fc
 800d884:	08021538 	.word	0x08021538
 800d888:	0802157c 	.word	0x0802157c
 800d88c:	080215c4 	.word	0x080215c4
 800d890:	08021620 	.word	0x08021620
 800d894:	0802165c 	.word	0x0802165c
 800d898:	0802169c 	.word	0x0802169c
 800d89c:	080216ec 	.word	0x080216ec
 800d8a0:	0802173c 	.word	0x0802173c
 800d8a4:	08021784 	.word	0x08021784
 800d8a8:	080217d4 	.word	0x080217d4
 800d8ac:	08021814 	.word	0x08021814
 800d8b0:	08021818 	.word	0x08021818

0800d8b4 <find_http_uri_type>:
 */ 
void find_http_uri_type(
	uint8_t * type, 	/**< type to be returned */
	uint8_t * buff		/**< file name */
	) 
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b084      	sub	sp, #16
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6039      	str	r1, [r7, #0]
	/* Decide type according to extension*/

	char * buf;
	buf = (char *)buff;
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	60fb      	str	r3, [r7, #12]

	if 	(strstr(buf, ".htm")	|| strstr(buf, ".html"))	*type = PTYPE_HTML;
 800d8c2:	499f      	ldr	r1, [pc, #636]	; (800db40 <find_http_uri_type+0x28c>)
 800d8c4:	68f8      	ldr	r0, [r7, #12]
 800d8c6:	f00e fcc9 	bl	801c25c <strstr>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d106      	bne.n	800d8de <find_http_uri_type+0x2a>
 800d8d0:	499c      	ldr	r1, [pc, #624]	; (800db44 <find_http_uri_type+0x290>)
 800d8d2:	68f8      	ldr	r0, [r7, #12]
 800d8d4:	f00e fcc2 	bl	801c25c <strstr>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d003      	beq.n	800d8e6 <find_http_uri_type+0x32>
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2201      	movs	r2, #1
 800d8e2:	701a      	strb	r2, [r3, #0]
 800d8e4:	e127      	b.n	800db36 <find_http_uri_type+0x282>
	else if (strstr(buf, ".gif"))							*type = PTYPE_GIF;
 800d8e6:	4998      	ldr	r1, [pc, #608]	; (800db48 <find_http_uri_type+0x294>)
 800d8e8:	68f8      	ldr	r0, [r7, #12]
 800d8ea:	f00e fcb7 	bl	801c25c <strstr>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d003      	beq.n	800d8fc <find_http_uri_type+0x48>
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2202      	movs	r2, #2
 800d8f8:	701a      	strb	r2, [r3, #0]
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
	else 													*type = PTYPE_ERR;
}
 800d8fa:	e11c      	b.n	800db36 <find_http_uri_type+0x282>
	else if (strstr(buf, ".text") 	|| strstr(buf,".txt"))	*type = PTYPE_TEXT;
 800d8fc:	4993      	ldr	r1, [pc, #588]	; (800db4c <find_http_uri_type+0x298>)
 800d8fe:	68f8      	ldr	r0, [r7, #12]
 800d900:	f00e fcac 	bl	801c25c <strstr>
 800d904:	4603      	mov	r3, r0
 800d906:	2b00      	cmp	r3, #0
 800d908:	d106      	bne.n	800d918 <find_http_uri_type+0x64>
 800d90a:	4991      	ldr	r1, [pc, #580]	; (800db50 <find_http_uri_type+0x29c>)
 800d90c:	68f8      	ldr	r0, [r7, #12]
 800d90e:	f00e fca5 	bl	801c25c <strstr>
 800d912:	4603      	mov	r3, r0
 800d914:	2b00      	cmp	r3, #0
 800d916:	d003      	beq.n	800d920 <find_http_uri_type+0x6c>
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2203      	movs	r2, #3
 800d91c:	701a      	strb	r2, [r3, #0]
 800d91e:	e10a      	b.n	800db36 <find_http_uri_type+0x282>
	else if (strstr(buf, ".jpeg") 	|| strstr(buf,".jpg"))	*type = PTYPE_JPEG;
 800d920:	498c      	ldr	r1, [pc, #560]	; (800db54 <find_http_uri_type+0x2a0>)
 800d922:	68f8      	ldr	r0, [r7, #12]
 800d924:	f00e fc9a 	bl	801c25c <strstr>
 800d928:	4603      	mov	r3, r0
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d106      	bne.n	800d93c <find_http_uri_type+0x88>
 800d92e:	498a      	ldr	r1, [pc, #552]	; (800db58 <find_http_uri_type+0x2a4>)
 800d930:	68f8      	ldr	r0, [r7, #12]
 800d932:	f00e fc93 	bl	801c25c <strstr>
 800d936:	4603      	mov	r3, r0
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d003      	beq.n	800d944 <find_http_uri_type+0x90>
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2204      	movs	r2, #4
 800d940:	701a      	strb	r2, [r3, #0]
 800d942:	e0f8      	b.n	800db36 <find_http_uri_type+0x282>
	else if (strstr(buf, ".swf")) 							*type = PTYPE_FLASH;
 800d944:	4985      	ldr	r1, [pc, #532]	; (800db5c <find_http_uri_type+0x2a8>)
 800d946:	68f8      	ldr	r0, [r7, #12]
 800d948:	f00e fc88 	bl	801c25c <strstr>
 800d94c:	4603      	mov	r3, r0
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d003      	beq.n	800d95a <find_http_uri_type+0xa6>
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2205      	movs	r2, #5
 800d956:	701a      	strb	r2, [r3, #0]
}
 800d958:	e0ed      	b.n	800db36 <find_http_uri_type+0x282>
	else if (strstr(buf, ".cgi") 	|| strstr(buf,".CGI"))	*type = PTYPE_CGI;
 800d95a:	4981      	ldr	r1, [pc, #516]	; (800db60 <find_http_uri_type+0x2ac>)
 800d95c:	68f8      	ldr	r0, [r7, #12]
 800d95e:	f00e fc7d 	bl	801c25c <strstr>
 800d962:	4603      	mov	r3, r0
 800d964:	2b00      	cmp	r3, #0
 800d966:	d106      	bne.n	800d976 <find_http_uri_type+0xc2>
 800d968:	497e      	ldr	r1, [pc, #504]	; (800db64 <find_http_uri_type+0x2b0>)
 800d96a:	68f8      	ldr	r0, [r7, #12]
 800d96c:	f00e fc76 	bl	801c25c <strstr>
 800d970:	4603      	mov	r3, r0
 800d972:	2b00      	cmp	r3, #0
 800d974:	d003      	beq.n	800d97e <find_http_uri_type+0xca>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2208      	movs	r2, #8
 800d97a:	701a      	strb	r2, [r3, #0]
 800d97c:	e0db      	b.n	800db36 <find_http_uri_type+0x282>
	else if (strstr(buf, ".json") 	|| strstr(buf,".JSON"))	*type = PTYPE_JSON;
 800d97e:	497a      	ldr	r1, [pc, #488]	; (800db68 <find_http_uri_type+0x2b4>)
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	f00e fc6b 	bl	801c25c <strstr>
 800d986:	4603      	mov	r3, r0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d106      	bne.n	800d99a <find_http_uri_type+0xe6>
 800d98c:	4977      	ldr	r1, [pc, #476]	; (800db6c <find_http_uri_type+0x2b8>)
 800d98e:	68f8      	ldr	r0, [r7, #12]
 800d990:	f00e fc64 	bl	801c25c <strstr>
 800d994:	4603      	mov	r3, r0
 800d996:	2b00      	cmp	r3, #0
 800d998:	d003      	beq.n	800d9a2 <find_http_uri_type+0xee>
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	220c      	movs	r2, #12
 800d99e:	701a      	strb	r2, [r3, #0]
 800d9a0:	e0c9      	b.n	800db36 <find_http_uri_type+0x282>
	else if (strstr(buf, ".js") 	|| strstr(buf,".JS"))	*type = PTYPE_JS;
 800d9a2:	4973      	ldr	r1, [pc, #460]	; (800db70 <find_http_uri_type+0x2bc>)
 800d9a4:	68f8      	ldr	r0, [r7, #12]
 800d9a6:	f00e fc59 	bl	801c25c <strstr>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d106      	bne.n	800d9be <find_http_uri_type+0x10a>
 800d9b0:	4970      	ldr	r1, [pc, #448]	; (800db74 <find_http_uri_type+0x2c0>)
 800d9b2:	68f8      	ldr	r0, [r7, #12]
 800d9b4:	f00e fc52 	bl	801c25c <strstr>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d003      	beq.n	800d9c6 <find_http_uri_type+0x112>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	220b      	movs	r2, #11
 800d9c2:	701a      	strb	r2, [r3, #0]
 800d9c4:	e0b7      	b.n	800db36 <find_http_uri_type+0x282>
	else if (strstr(buf, ".CGI") 	|| strstr(buf,".cgi"))	*type = PTYPE_CGI;
 800d9c6:	4967      	ldr	r1, [pc, #412]	; (800db64 <find_http_uri_type+0x2b0>)
 800d9c8:	68f8      	ldr	r0, [r7, #12]
 800d9ca:	f00e fc47 	bl	801c25c <strstr>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d106      	bne.n	800d9e2 <find_http_uri_type+0x12e>
 800d9d4:	4962      	ldr	r1, [pc, #392]	; (800db60 <find_http_uri_type+0x2ac>)
 800d9d6:	68f8      	ldr	r0, [r7, #12]
 800d9d8:	f00e fc40 	bl	801c25c <strstr>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d003      	beq.n	800d9ea <find_http_uri_type+0x136>
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2208      	movs	r2, #8
 800d9e6:	701a      	strb	r2, [r3, #0]
 800d9e8:	e0a5      	b.n	800db36 <find_http_uri_type+0x282>
	else if (strstr(buf, ".xml") 	|| strstr(buf,".XML"))	*type = PTYPE_XML;
 800d9ea:	4963      	ldr	r1, [pc, #396]	; (800db78 <find_http_uri_type+0x2c4>)
 800d9ec:	68f8      	ldr	r0, [r7, #12]
 800d9ee:	f00e fc35 	bl	801c25c <strstr>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d106      	bne.n	800da06 <find_http_uri_type+0x152>
 800d9f8:	4960      	ldr	r1, [pc, #384]	; (800db7c <find_http_uri_type+0x2c8>)
 800d9fa:	68f8      	ldr	r0, [r7, #12]
 800d9fc:	f00e fc2e 	bl	801c25c <strstr>
 800da00:	4603      	mov	r3, r0
 800da02:	2b00      	cmp	r3, #0
 800da04:	d003      	beq.n	800da0e <find_http_uri_type+0x15a>
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2209      	movs	r2, #9
 800da0a:	701a      	strb	r2, [r3, #0]
 800da0c:	e093      	b.n	800db36 <find_http_uri_type+0x282>
	else if (strstr(buf, ".css") 	|| strstr(buf,".CSS"))	*type = PTYPE_CSS;
 800da0e:	495c      	ldr	r1, [pc, #368]	; (800db80 <find_http_uri_type+0x2cc>)
 800da10:	68f8      	ldr	r0, [r7, #12]
 800da12:	f00e fc23 	bl	801c25c <strstr>
 800da16:	4603      	mov	r3, r0
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d106      	bne.n	800da2a <find_http_uri_type+0x176>
 800da1c:	4959      	ldr	r1, [pc, #356]	; (800db84 <find_http_uri_type+0x2d0>)
 800da1e:	68f8      	ldr	r0, [r7, #12]
 800da20:	f00e fc1c 	bl	801c25c <strstr>
 800da24:	4603      	mov	r3, r0
 800da26:	2b00      	cmp	r3, #0
 800da28:	d003      	beq.n	800da32 <find_http_uri_type+0x17e>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	220a      	movs	r2, #10
 800da2e:	701a      	strb	r2, [r3, #0]
 800da30:	e081      	b.n	800db36 <find_http_uri_type+0x282>
	else if (strstr(buf, ".png") 	|| strstr(buf,".PNG"))	*type = PTYPE_PNG;
 800da32:	4955      	ldr	r1, [pc, #340]	; (800db88 <find_http_uri_type+0x2d4>)
 800da34:	68f8      	ldr	r0, [r7, #12]
 800da36:	f00e fc11 	bl	801c25c <strstr>
 800da3a:	4603      	mov	r3, r0
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d106      	bne.n	800da4e <find_http_uri_type+0x19a>
 800da40:	4952      	ldr	r1, [pc, #328]	; (800db8c <find_http_uri_type+0x2d8>)
 800da42:	68f8      	ldr	r0, [r7, #12]
 800da44:	f00e fc0a 	bl	801c25c <strstr>
 800da48:	4603      	mov	r3, r0
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d003      	beq.n	800da56 <find_http_uri_type+0x1a2>
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	220d      	movs	r2, #13
 800da52:	701a      	strb	r2, [r3, #0]
 800da54:	e06f      	b.n	800db36 <find_http_uri_type+0x282>
	else if (strstr(buf, ".ico") 	|| strstr(buf,".ICO"))	*type = PTYPE_ICO;
 800da56:	494e      	ldr	r1, [pc, #312]	; (800db90 <find_http_uri_type+0x2dc>)
 800da58:	68f8      	ldr	r0, [r7, #12]
 800da5a:	f00e fbff 	bl	801c25c <strstr>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	d106      	bne.n	800da72 <find_http_uri_type+0x1be>
 800da64:	494b      	ldr	r1, [pc, #300]	; (800db94 <find_http_uri_type+0x2e0>)
 800da66:	68f8      	ldr	r0, [r7, #12]
 800da68:	f00e fbf8 	bl	801c25c <strstr>
 800da6c:	4603      	mov	r3, r0
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d003      	beq.n	800da7a <find_http_uri_type+0x1c6>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	220e      	movs	r2, #14
 800da76:	701a      	strb	r2, [r3, #0]
 800da78:	e05d      	b.n	800db36 <find_http_uri_type+0x282>
	else if (strstr(buf, ".ttf") 	|| strstr(buf,".TTF"))	*type = PTYPE_TTF;
 800da7a:	4947      	ldr	r1, [pc, #284]	; (800db98 <find_http_uri_type+0x2e4>)
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	f00e fbed 	bl	801c25c <strstr>
 800da82:	4603      	mov	r3, r0
 800da84:	2b00      	cmp	r3, #0
 800da86:	d106      	bne.n	800da96 <find_http_uri_type+0x1e2>
 800da88:	4944      	ldr	r1, [pc, #272]	; (800db9c <find_http_uri_type+0x2e8>)
 800da8a:	68f8      	ldr	r0, [r7, #12]
 800da8c:	f00e fbe6 	bl	801c25c <strstr>
 800da90:	4603      	mov	r3, r0
 800da92:	2b00      	cmp	r3, #0
 800da94:	d003      	beq.n	800da9e <find_http_uri_type+0x1ea>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2214      	movs	r2, #20
 800da9a:	701a      	strb	r2, [r3, #0]
 800da9c:	e04b      	b.n	800db36 <find_http_uri_type+0x282>
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
 800da9e:	4940      	ldr	r1, [pc, #256]	; (800dba0 <find_http_uri_type+0x2ec>)
 800daa0:	68f8      	ldr	r0, [r7, #12]
 800daa2:	f00e fbdb 	bl	801c25c <strstr>
 800daa6:	4603      	mov	r3, r0
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d106      	bne.n	800daba <find_http_uri_type+0x206>
 800daac:	493d      	ldr	r1, [pc, #244]	; (800dba4 <find_http_uri_type+0x2f0>)
 800daae:	68f8      	ldr	r0, [r7, #12]
 800dab0:	f00e fbd4 	bl	801c25c <strstr>
 800dab4:	4603      	mov	r3, r0
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d003      	beq.n	800dac2 <find_http_uri_type+0x20e>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2215      	movs	r2, #21
 800dabe:	701a      	strb	r2, [r3, #0]
 800dac0:	e039      	b.n	800db36 <find_http_uri_type+0x282>
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
 800dac2:	4939      	ldr	r1, [pc, #228]	; (800dba8 <find_http_uri_type+0x2f4>)
 800dac4:	68f8      	ldr	r0, [r7, #12]
 800dac6:	f00e fbc9 	bl	801c25c <strstr>
 800daca:	4603      	mov	r3, r0
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d106      	bne.n	800dade <find_http_uri_type+0x22a>
 800dad0:	4936      	ldr	r1, [pc, #216]	; (800dbac <find_http_uri_type+0x2f8>)
 800dad2:	68f8      	ldr	r0, [r7, #12]
 800dad4:	f00e fbc2 	bl	801c25c <strstr>
 800dad8:	4603      	mov	r3, r0
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d003      	beq.n	800dae6 <find_http_uri_type+0x232>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2216      	movs	r2, #22
 800dae2:	701a      	strb	r2, [r3, #0]
 800dae4:	e027      	b.n	800db36 <find_http_uri_type+0x282>
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
 800dae6:	4932      	ldr	r1, [pc, #200]	; (800dbb0 <find_http_uri_type+0x2fc>)
 800dae8:	68f8      	ldr	r0, [r7, #12]
 800daea:	f00e fbb7 	bl	801c25c <strstr>
 800daee:	4603      	mov	r3, r0
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d106      	bne.n	800db02 <find_http_uri_type+0x24e>
 800daf4:	492f      	ldr	r1, [pc, #188]	; (800dbb4 <find_http_uri_type+0x300>)
 800daf6:	68f8      	ldr	r0, [r7, #12]
 800daf8:	f00e fbb0 	bl	801c25c <strstr>
 800dafc:	4603      	mov	r3, r0
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d003      	beq.n	800db0a <find_http_uri_type+0x256>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2217      	movs	r2, #23
 800db06:	701a      	strb	r2, [r3, #0]
 800db08:	e015      	b.n	800db36 <find_http_uri_type+0x282>
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
 800db0a:	492b      	ldr	r1, [pc, #172]	; (800dbb8 <find_http_uri_type+0x304>)
 800db0c:	68f8      	ldr	r0, [r7, #12]
 800db0e:	f00e fba5 	bl	801c25c <strstr>
 800db12:	4603      	mov	r3, r0
 800db14:	2b00      	cmp	r3, #0
 800db16:	d106      	bne.n	800db26 <find_http_uri_type+0x272>
 800db18:	4928      	ldr	r1, [pc, #160]	; (800dbbc <find_http_uri_type+0x308>)
 800db1a:	68f8      	ldr	r0, [r7, #12]
 800db1c:	f00e fb9e 	bl	801c25c <strstr>
 800db20:	4603      	mov	r3, r0
 800db22:	2b00      	cmp	r3, #0
 800db24:	d003      	beq.n	800db2e <find_http_uri_type+0x27a>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2218      	movs	r2, #24
 800db2a:	701a      	strb	r2, [r3, #0]
 800db2c:	e003      	b.n	800db36 <find_http_uri_type+0x282>
	else 													*type = PTYPE_ERR;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2200      	movs	r2, #0
 800db32:	701a      	strb	r2, [r3, #0]
}
 800db34:	e7ff      	b.n	800db36 <find_http_uri_type+0x282>
 800db36:	bf00      	nop
 800db38:	3710      	adds	r7, #16
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
 800db3e:	bf00      	nop
 800db40:	08021820 	.word	0x08021820
 800db44:	08021828 	.word	0x08021828
 800db48:	08021830 	.word	0x08021830
 800db4c:	08021838 	.word	0x08021838
 800db50:	08021840 	.word	0x08021840
 800db54:	08021848 	.word	0x08021848
 800db58:	08021850 	.word	0x08021850
 800db5c:	08021858 	.word	0x08021858
 800db60:	08021860 	.word	0x08021860
 800db64:	08021868 	.word	0x08021868
 800db68:	08021870 	.word	0x08021870
 800db6c:	08021878 	.word	0x08021878
 800db70:	08021880 	.word	0x08021880
 800db74:	08021884 	.word	0x08021884
 800db78:	08021888 	.word	0x08021888
 800db7c:	08021890 	.word	0x08021890
 800db80:	08021898 	.word	0x08021898
 800db84:	080218a0 	.word	0x080218a0
 800db88:	080218a8 	.word	0x080218a8
 800db8c:	080218b0 	.word	0x080218b0
 800db90:	080218b8 	.word	0x080218b8
 800db94:	080218c0 	.word	0x080218c0
 800db98:	080218c8 	.word	0x080218c8
 800db9c:	080218d0 	.word	0x080218d0
 800dba0:	080218d8 	.word	0x080218d8
 800dba4:	080218e0 	.word	0x080218e0
 800dba8:	080218e8 	.word	0x080218e8
 800dbac:	080218f0 	.word	0x080218f0
 800dbb0:	080218f8 	.word	0x080218f8
 800dbb4:	08021900 	.word	0x08021900
 800dbb8:	08021908 	.word	0x08021908
 800dbbc:	08021910 	.word	0x08021910

0800dbc0 <parse_http_request>:
 */ 
void parse_http_request(
	st_http_request * request, 	/**< request to be returned */
	uint8_t * buf				/**< pointer to be parsed */
	)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b084      	sub	sp, #16
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
 800dbc8:	6039      	str	r1, [r7, #0]
  char * nexttok;
  nexttok = strtok((char*)buf," ");
 800dbca:	4935      	ldr	r1, [pc, #212]	; (800dca0 <parse_http_request+0xe0>)
 800dbcc:	6838      	ldr	r0, [r7, #0]
 800dbce:	f00e fae9 	bl	801c1a4 <strtok>
 800dbd2:	60f8      	str	r0, [r7, #12]
  if(!nexttok)
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d103      	bne.n	800dbe2 <parse_http_request+0x22>
  {
    request->METHOD = METHOD_ERR;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	701a      	strb	r2, [r3, #0]
    return;
 800dbe0:	e05a      	b.n	800dc98 <parse_http_request+0xd8>
  }
  if(!strcmp(nexttok, "GET") || !strcmp(nexttok,"get"))
 800dbe2:	4930      	ldr	r1, [pc, #192]	; (800dca4 <parse_http_request+0xe4>)
 800dbe4:	68f8      	ldr	r0, [r7, #12]
 800dbe6:	f7f2 fafb 	bl	80001e0 <strcmp>
 800dbea:	4603      	mov	r3, r0
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d006      	beq.n	800dbfe <parse_http_request+0x3e>
 800dbf0:	492d      	ldr	r1, [pc, #180]	; (800dca8 <parse_http_request+0xe8>)
 800dbf2:	68f8      	ldr	r0, [r7, #12]
 800dbf4:	f7f2 faf4 	bl	80001e0 <strcmp>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d10a      	bne.n	800dc14 <parse_http_request+0x54>
  {
    request->METHOD = METHOD_GET;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2201      	movs	r2, #1
 800dc02:	701a      	strb	r2, [r3, #0]
//    nexttok = strtok(NULL," ");
    nexttok = strtok(nexttok+4," ");
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	3304      	adds	r3, #4
 800dc08:	4925      	ldr	r1, [pc, #148]	; (800dca0 <parse_http_request+0xe0>)
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f00e faca 	bl	801c1a4 <strtok>
 800dc10:	60f8      	str	r0, [r7, #12]
 800dc12:	e034      	b.n	800dc7e <parse_http_request+0xbe>

  }
  else if (!strcmp(nexttok, "HEAD") || !strcmp(nexttok,"head"))
 800dc14:	4925      	ldr	r1, [pc, #148]	; (800dcac <parse_http_request+0xec>)
 800dc16:	68f8      	ldr	r0, [r7, #12]
 800dc18:	f7f2 fae2 	bl	80001e0 <strcmp>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d006      	beq.n	800dc30 <parse_http_request+0x70>
 800dc22:	4923      	ldr	r1, [pc, #140]	; (800dcb0 <parse_http_request+0xf0>)
 800dc24:	68f8      	ldr	r0, [r7, #12]
 800dc26:	f7f2 fadb 	bl	80001e0 <strcmp>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d10a      	bne.n	800dc46 <parse_http_request+0x86>
  {
    request->METHOD = METHOD_HEAD;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2202      	movs	r2, #2
 800dc34:	701a      	strb	r2, [r3, #0]
//    nexttok = strtok(NULL," ");
    nexttok = strtok(nexttok+5," ");
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	3305      	adds	r3, #5
 800dc3a:	4919      	ldr	r1, [pc, #100]	; (800dca0 <parse_http_request+0xe0>)
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f00e fab1 	bl	801c1a4 <strtok>
 800dc42:	60f8      	str	r0, [r7, #12]
 800dc44:	e01b      	b.n	800dc7e <parse_http_request+0xbe>

  }
  else if (!strcmp(nexttok, "POST") || !strcmp(nexttok,"post"))
 800dc46:	491b      	ldr	r1, [pc, #108]	; (800dcb4 <parse_http_request+0xf4>)
 800dc48:	68f8      	ldr	r0, [r7, #12]
 800dc4a:	f7f2 fac9 	bl	80001e0 <strcmp>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d006      	beq.n	800dc62 <parse_http_request+0xa2>
 800dc54:	4918      	ldr	r1, [pc, #96]	; (800dcb8 <parse_http_request+0xf8>)
 800dc56:	68f8      	ldr	r0, [r7, #12]
 800dc58:	f7f2 fac2 	bl	80001e0 <strcmp>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d10a      	bne.n	800dc78 <parse_http_request+0xb8>
  {
//    nexttok = strtok(NULL,"\0");
	  nexttok = strtok(nexttok+5,"\0");
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	3305      	adds	r3, #5
 800dc66:	4915      	ldr	r1, [pc, #84]	; (800dcbc <parse_http_request+0xfc>)
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f00e fa9b 	bl	801c1a4 <strtok>
 800dc6e:	60f8      	str	r0, [r7, #12]
    request->METHOD = METHOD_POST;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2203      	movs	r2, #3
 800dc74:	701a      	strb	r2, [r3, #0]
 800dc76:	e002      	b.n	800dc7e <parse_http_request+0xbe>
  }
  else
  {
    request->METHOD = METHOD_ERR;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	701a      	strb	r2, [r3, #0]
  }

  if(!nexttok)
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d103      	bne.n	800dc8c <parse_http_request+0xcc>
  {
    request->METHOD = METHOD_ERR;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2200      	movs	r2, #0
 800dc88:	701a      	strb	r2, [r3, #0]
    return;
 800dc8a:	e005      	b.n	800dc98 <parse_http_request+0xd8>
  }
  strcpy((char *)request->URI, nexttok);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	3302      	adds	r3, #2
 800dc90:	68f9      	ldr	r1, [r7, #12]
 800dc92:	4618      	mov	r0, r3
 800dc94:	f00e fbd5 	bl	801c442 <strcpy>
}
 800dc98:	3710      	adds	r7, #16
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}
 800dc9e:	bf00      	nop
 800dca0:	08021918 	.word	0x08021918
 800dca4:	0802191c 	.word	0x0802191c
 800dca8:	08021920 	.word	0x08021920
 800dcac:	08021924 	.word	0x08021924
 800dcb0:	0802192c 	.word	0x0802192c
 800dcb4:	08021934 	.word	0x08021934
 800dcb8:	0802193c 	.word	0x0802193c
 800dcbc:	08021944 	.word	0x08021944

0800dcc0 <get_http_param_value>:
#else
/**
 @brief	get next parameter value in the request
 */
uint8_t * get_http_param_value(char* uri, char* param_name)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b08a      	sub	sp, #40	; 0x28
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	6039      	str	r1, [r7, #0]

	uint8_t * name = 0;
 800dcca:	2300      	movs	r3, #0
 800dccc:	623b      	str	r3, [r7, #32]
	uint8_t * ret = BUFPUB;
 800dcce:	4b3c      	ldr	r3, [pc, #240]	; (800ddc0 <get_http_param_value+0x100>)
 800dcd0:	61fb      	str	r3, [r7, #28]
	uint8_t * pos2;
	uint16_t len = 0, content_len = 0;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	837b      	strh	r3, [r7, #26]
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	833b      	strh	r3, [r7, #24]
	uint8_t tmp_buf[10]={0x00, };
 800dcda:	2300      	movs	r3, #0
 800dcdc:	60bb      	str	r3, [r7, #8]
 800dcde:	f107 030c 	add.w	r3, r7, #12
 800dce2:	2200      	movs	r2, #0
 800dce4:	601a      	str	r2, [r3, #0]
 800dce6:	809a      	strh	r2, [r3, #4]
	uint8_t * test;

	if(!uri || !param_name) return 0;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d002      	beq.n	800dcf4 <get_http_param_value+0x34>
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d101      	bne.n	800dcf8 <get_http_param_value+0x38>
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	e05f      	b.n	800ddb8 <get_http_param_value+0xf8>

	/***************/
	if (mid(uri, "Content-Length: ", "\r\n", (char *)tmp_buf)){
 800dcf8:	f107 0308 	add.w	r3, r7, #8
 800dcfc:	4a31      	ldr	r2, [pc, #196]	; (800ddc4 <get_http_param_value+0x104>)
 800dcfe:	4932      	ldr	r1, [pc, #200]	; (800ddc8 <get_http_param_value+0x108>)
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f000 f8b4 	bl	800de6e <mid>
 800dd06:	4603      	mov	r3, r0
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d001      	beq.n	800dd10 <get_http_param_value+0x50>
		return 0;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	e053      	b.n	800ddb8 <get_http_param_value+0xf8>
	}
	content_len = ATOI(tmp_buf, 10);
 800dd10:	f107 0308 	add.w	r3, r7, #8
 800dd14:	210a      	movs	r1, #10
 800dd16:	4618      	mov	r0, r3
 800dd18:	f000 f884 	bl	800de24 <ATOI>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	833b      	strh	r3, [r7, #24]
	uri = strstr(uri, "\r\n\r\n");
 800dd20:	492a      	ldr	r1, [pc, #168]	; (800ddcc <get_http_param_value+0x10c>)
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f00e fa9a 	bl	801c25c <strstr>
 800dd28:	6078      	str	r0, [r7, #4]
	uri += 4;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	3304      	adds	r3, #4
 800dd2e:	607b      	str	r3, [r7, #4]
	uri[content_len] = 0;
 800dd30:	8b3b      	ldrh	r3, [r7, #24]
 800dd32:	687a      	ldr	r2, [r7, #4]
 800dd34:	4413      	add	r3, r2
 800dd36:	2200      	movs	r2, #0
 800dd38:	701a      	strb	r2, [r3, #0]
	/***************/

	if((name = (uint8_t *)strstr(uri, param_name)))
 800dd3a:	6839      	ldr	r1, [r7, #0]
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f00e fa8d 	bl	801c25c <strstr>
 800dd42:	6238      	str	r0, [r7, #32]
 800dd44:	6a3b      	ldr	r3, [r7, #32]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d033      	beq.n	800ddb2 <get_http_param_value+0xf2>
	{
		test = name + 1;
 800dd4a:	6a3b      	ldr	r3, [r7, #32]
 800dd4c:	3301      	adds	r3, #1
 800dd4e:	617b      	str	r3, [r7, #20]
//		if (isalpha((int)test) || isdigit((int)test)){
//			4 +2;
//		}
		name += strlen(param_name) + 1;
 800dd50:	6838      	ldr	r0, [r7, #0]
 800dd52:	f7f2 faa5 	bl	80002a0 <strlen>
 800dd56:	4603      	mov	r3, r0
 800dd58:	3301      	adds	r3, #1
 800dd5a:	6a3a      	ldr	r2, [r7, #32]
 800dd5c:	4413      	add	r3, r2
 800dd5e:	623b      	str	r3, [r7, #32]
		pos2 = (uint8_t*)strstr((char*)name, "&");
 800dd60:	2126      	movs	r1, #38	; 0x26
 800dd62:	6a38      	ldr	r0, [r7, #32]
 800dd64:	f00e f9b7 	bl	801c0d6 <strchr>
 800dd68:	6278      	str	r0, [r7, #36]	; 0x24
		if(!pos2)
 800dd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d106      	bne.n	800dd7e <get_http_param_value+0xbe>
		{
			pos2 = name + strlen((char*)name);
 800dd70:	6a38      	ldr	r0, [r7, #32]
 800dd72:	f7f2 fa95 	bl	80002a0 <strlen>
 800dd76:	4602      	mov	r2, r0
 800dd78:	6a3b      	ldr	r3, [r7, #32]
 800dd7a:	4413      	add	r3, r2
 800dd7c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		len = pos2 - name;
 800dd7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd80:	6a3b      	ldr	r3, [r7, #32]
 800dd82:	1ad3      	subs	r3, r2, r3
 800dd84:	837b      	strh	r3, [r7, #26]

		if(len)
 800dd86:	8b7b      	ldrh	r3, [r7, #26]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d00e      	beq.n	800ddaa <get_http_param_value+0xea>
		{
			ret[len] = 0;
 800dd8c:	8b7b      	ldrh	r3, [r7, #26]
 800dd8e:	69fa      	ldr	r2, [r7, #28]
 800dd90:	4413      	add	r3, r2
 800dd92:	2200      	movs	r2, #0
 800dd94:	701a      	strb	r2, [r3, #0]
			strncpy((char*)ret,(char*)name, len);
 800dd96:	8b7b      	ldrh	r3, [r7, #26]
 800dd98:	461a      	mov	r2, r3
 800dd9a:	6a39      	ldr	r1, [r7, #32]
 800dd9c:	69f8      	ldr	r0, [r7, #28]
 800dd9e:	f00e f9dd 	bl	801c15c <strncpy>
			unescape_http_url((char *)ret);
 800dda2:	69f8      	ldr	r0, [r7, #28]
 800dda4:	f7ff fc88 	bl	800d6b8 <unescape_http_url>
 800dda8:	e005      	b.n	800ddb6 <get_http_param_value+0xf6>
			//ret[strlen((int8*)ret)] = 0;
			//printf("len=%d\r\n",len);
		}
		else
		{
			ret[0] = 0;
 800ddaa:	69fb      	ldr	r3, [r7, #28]
 800ddac:	2200      	movs	r2, #0
 800ddae:	701a      	strb	r2, [r3, #0]
 800ddb0:	e001      	b.n	800ddb6 <get_http_param_value+0xf6>
		}
	}
	else
	{
		return 0;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	e000      	b.n	800ddb8 <get_http_param_value+0xf8>
	}
#ifdef _HTTPPARSER_DEBUG_
	printf("  %s=%s\r\n", param_name, ret);
#endif
	return ret;
 800ddb6:	69fb      	ldr	r3, [r7, #28]
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	3728      	adds	r7, #40	; 0x28
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}
 800ddc0:	200009b8 	.word	0x200009b8
 800ddc4:	08021948 	.word	0x08021948
 800ddc8:	0802194c 	.word	0x0802194c
 800ddcc:	08021818 	.word	0x08021818

0800ddd0 <get_http_uri_name>:
	return uri_name;
}
#else

uint8_t get_http_uri_name(uint8_t * uri, uint8_t * uri_buf)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b084      	sub	sp, #16
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
 800ddd8:	6039      	str	r1, [r7, #0]
	uint8_t * uri_ptr;
	if(!uri) return 0;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d101      	bne.n	800dde4 <get_http_uri_name+0x14>
 800dde0:	2300      	movs	r3, #0
 800dde2:	e017      	b.n	800de14 <get_http_uri_name+0x44>

	strcpy((char *)uri_buf, (char *)uri);
 800dde4:	6879      	ldr	r1, [r7, #4]
 800dde6:	6838      	ldr	r0, [r7, #0]
 800dde8:	f00e fb2b 	bl	801c442 <strcpy>

	uri_ptr = (uint8_t *)strtok((char *)uri_buf, " ?");
 800ddec:	490b      	ldr	r1, [pc, #44]	; (800de1c <get_http_uri_name+0x4c>)
 800ddee:	6838      	ldr	r0, [r7, #0]
 800ddf0:	f00e f9d8 	bl	801c1a4 <strtok>
 800ddf4:	60f8      	str	r0, [r7, #12]

	if(strcmp((char *)uri_ptr,"/")) uri_ptr++;
 800ddf6:	490a      	ldr	r1, [pc, #40]	; (800de20 <get_http_uri_name+0x50>)
 800ddf8:	68f8      	ldr	r0, [r7, #12]
 800ddfa:	f7f2 f9f1 	bl	80001e0 <strcmp>
 800ddfe:	4603      	mov	r3, r0
 800de00:	2b00      	cmp	r3, #0
 800de02:	d002      	beq.n	800de0a <get_http_uri_name+0x3a>
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	3301      	adds	r3, #1
 800de08:	60fb      	str	r3, [r7, #12]
	strcpy((char *)uri_buf, (char *)uri_ptr);
 800de0a:	68f9      	ldr	r1, [r7, #12]
 800de0c:	6838      	ldr	r0, [r7, #0]
 800de0e:	f00e fb18 	bl	801c442 <strcpy>

#ifdef _HTTPPARSER_DEBUG_
	printf("  uri_name = %s\r\n", uri_buf);
#endif

	return 1;
 800de12:	2301      	movs	r3, #1
}
 800de14:	4618      	mov	r0, r3
 800de16:	3710      	adds	r7, #16
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}
 800de1c:	08021960 	.word	0x08021960
 800de20:	08021964 	.word	0x08021964

0800de24 <ATOI>:
*/
uint16_t ATOI(
	uint8_t * str,	/**< is a pointer to convert */
	uint8_t base	/**< is a base value (must be in the range 2 - 16) */
	)
{
 800de24:	b590      	push	{r4, r7, lr}
 800de26:	b085      	sub	sp, #20
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	460b      	mov	r3, r1
 800de2e:	70fb      	strb	r3, [r7, #3]
        unsigned int num = 0;
 800de30:	2300      	movs	r3, #0
 800de32:	60fb      	str	r3, [r7, #12]
// debug_2013_11_25
//        while (*str !=0)
        while ((*str !=0) && (*str != 0x20)) // not include the space(0x020)
 800de34:	e00d      	b.n	800de52 <ATOI+0x2e>
                num = num * base + C2D(*str++);
 800de36:	78fb      	ldrb	r3, [r7, #3]
 800de38:	68fa      	ldr	r2, [r7, #12]
 800de3a:	fb02 f403 	mul.w	r4, r2, r3
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	1c5a      	adds	r2, r3, #1
 800de42:	607a      	str	r2, [r7, #4]
 800de44:	781b      	ldrb	r3, [r3, #0]
 800de46:	4618      	mov	r0, r3
 800de48:	f000 f843 	bl	800ded2 <C2D>
 800de4c:	4603      	mov	r3, r0
 800de4e:	4423      	add	r3, r4
 800de50:	60fb      	str	r3, [r7, #12]
        while ((*str !=0) && (*str != 0x20)) // not include the space(0x020)
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d003      	beq.n	800de62 <ATOI+0x3e>
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	2b20      	cmp	r3, #32
 800de60:	d1e9      	bne.n	800de36 <ATOI+0x12>
	return num;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	b29b      	uxth	r3, r3
}
 800de66:	4618      	mov	r0, r3
 800de68:	3714      	adds	r7, #20
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd90      	pop	{r4, r7, pc}

0800de6e <mid>:
 * @param s2 The end string to be researched
 * @param sub The string between s1 and s2
 * @return The length value atfer working
 */
int8_t mid(char* src, char* s1, char* s2, char* sub)
{
 800de6e:	b580      	push	{r7, lr}
 800de70:	b088      	sub	sp, #32
 800de72:	af00      	add	r7, sp, #0
 800de74:	60f8      	str	r0, [r7, #12]
 800de76:	60b9      	str	r1, [r7, #8]
 800de78:	607a      	str	r2, [r7, #4]
 800de7a:	603b      	str	r3, [r7, #0]
	char* sub1;
	char* sub2;
	uint16_t n;

	sub1=strstr((char*)src,(char*)s1);
 800de7c:	68b9      	ldr	r1, [r7, #8]
 800de7e:	68f8      	ldr	r0, [r7, #12]
 800de80:	f00e f9ec 	bl	801c25c <strstr>
 800de84:	61f8      	str	r0, [r7, #28]
	if (sub1 == 0) return -1;
 800de86:	69fb      	ldr	r3, [r7, #28]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d102      	bne.n	800de92 <mid+0x24>
 800de8c:	f04f 33ff 	mov.w	r3, #4294967295
 800de90:	e01b      	b.n	800deca <mid+0x5c>
	sub1+=strlen((char*)s1);
 800de92:	68b8      	ldr	r0, [r7, #8]
 800de94:	f7f2 fa04 	bl	80002a0 <strlen>
 800de98:	4602      	mov	r2, r0
 800de9a:	69fb      	ldr	r3, [r7, #28]
 800de9c:	4413      	add	r3, r2
 800de9e:	61fb      	str	r3, [r7, #28]
	sub2=strstr((char*)sub1,(char*)s2);
 800dea0:	6879      	ldr	r1, [r7, #4]
 800dea2:	69f8      	ldr	r0, [r7, #28]
 800dea4:	f00e f9da 	bl	801c25c <strstr>
 800dea8:	61b8      	str	r0, [r7, #24]

	n=sub2-sub1;
 800deaa:	69ba      	ldr	r2, [r7, #24]
 800deac:	69fb      	ldr	r3, [r7, #28]
 800deae:	1ad3      	subs	r3, r2, r3
 800deb0:	82fb      	strh	r3, [r7, #22]
	strncpy((char*)sub,(char*)sub1,n);
 800deb2:	8afb      	ldrh	r3, [r7, #22]
 800deb4:	461a      	mov	r2, r3
 800deb6:	69f9      	ldr	r1, [r7, #28]
 800deb8:	6838      	ldr	r0, [r7, #0]
 800deba:	f00e f94f 	bl	801c15c <strncpy>
	sub[n]='\0';
 800debe:	8afb      	ldrh	r3, [r7, #22]
 800dec0:	683a      	ldr	r2, [r7, #0]
 800dec2:	4413      	add	r3, r2
 800dec4:	2200      	movs	r2, #0
 800dec6:	701a      	strb	r2, [r3, #0]
	return 0;
 800dec8:	2300      	movs	r3, #0
}
 800deca:	4618      	mov	r0, r3
 800decc:	3720      	adds	r7, #32
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}

0800ded2 <C2D>:
This function converts HEX(0-F) to a character
*/
static uint8_t C2D(
		uint8_t c	/**< is a character('0'-'F') to convert to HEX */
	)
{
 800ded2:	b480      	push	{r7}
 800ded4:	b083      	sub	sp, #12
 800ded6:	af00      	add	r7, sp, #0
 800ded8:	4603      	mov	r3, r0
 800deda:	71fb      	strb	r3, [r7, #7]
	if (c >= '0' && c <= '9')
 800dedc:	79fb      	ldrb	r3, [r7, #7]
 800dede:	2b2f      	cmp	r3, #47	; 0x2f
 800dee0:	d906      	bls.n	800def0 <C2D+0x1e>
 800dee2:	79fb      	ldrb	r3, [r7, #7]
 800dee4:	2b39      	cmp	r3, #57	; 0x39
 800dee6:	d803      	bhi.n	800def0 <C2D+0x1e>
		return c - '0';
 800dee8:	79fb      	ldrb	r3, [r7, #7]
 800deea:	3b30      	subs	r3, #48	; 0x30
 800deec:	b2db      	uxtb	r3, r3
 800deee:	e014      	b.n	800df1a <C2D+0x48>
	if (c >= 'a' && c <= 'f')
 800def0:	79fb      	ldrb	r3, [r7, #7]
 800def2:	2b60      	cmp	r3, #96	; 0x60
 800def4:	d906      	bls.n	800df04 <C2D+0x32>
 800def6:	79fb      	ldrb	r3, [r7, #7]
 800def8:	2b66      	cmp	r3, #102	; 0x66
 800defa:	d803      	bhi.n	800df04 <C2D+0x32>
		return 10 + c -'a';
 800defc:	79fb      	ldrb	r3, [r7, #7]
 800defe:	3b57      	subs	r3, #87	; 0x57
 800df00:	b2db      	uxtb	r3, r3
 800df02:	e00a      	b.n	800df1a <C2D+0x48>
	if (c >= 'A' && c <= 'F')
 800df04:	79fb      	ldrb	r3, [r7, #7]
 800df06:	2b40      	cmp	r3, #64	; 0x40
 800df08:	d906      	bls.n	800df18 <C2D+0x46>
 800df0a:	79fb      	ldrb	r3, [r7, #7]
 800df0c:	2b46      	cmp	r3, #70	; 0x46
 800df0e:	d803      	bhi.n	800df18 <C2D+0x46>
		return 10 + c -'A';
 800df10:	79fb      	ldrb	r3, [r7, #7]
 800df12:	3b37      	subs	r3, #55	; 0x37
 800df14:	b2db      	uxtb	r3, r3
 800df16:	e000      	b.n	800df1a <C2D+0x48>

	return (char)c;
 800df18:	79fb      	ldrb	r3, [r7, #7]
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	370c      	adds	r7, #12
 800df1e:	46bd      	mov	sp, r7
 800df20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df24:	4770      	bx	lr

0800df26 <default_mcu_reset>:

/*****************************************************************************
 * Public functions
 ****************************************************************************/
// Callback functions definition: MCU Reset / WDT Reset
void default_mcu_reset(void) {;}
 800df26:	b480      	push	{r7}
 800df28:	af00      	add	r7, sp, #0
 800df2a:	bf00      	nop
 800df2c:	46bd      	mov	sp, r7
 800df2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df32:	4770      	bx	lr

0800df34 <default_function>:
void default_wdt_reset(void) {;}
void default_function(void)  {;}
 800df34:	b480      	push	{r7}
 800df36:	af00      	add	r7, sp, #0
 800df38:	bf00      	nop
 800df3a:	46bd      	mov	sp, r7
 800df3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df40:	4770      	bx	lr
	...

0800df44 <httpServer_Sockinit>:

	if (delay_function) delay_os_ms = delay_function;
}

void httpServer_Sockinit(uint8_t cnt, uint8_t * socklist)
{
 800df44:	b480      	push	{r7}
 800df46:	b085      	sub	sp, #20
 800df48:	af00      	add	r7, sp, #0
 800df4a:	4603      	mov	r3, r0
 800df4c:	6039      	str	r1, [r7, #0]
 800df4e:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < cnt; i++)
 800df50:	2300      	movs	r3, #0
 800df52:	73fb      	strb	r3, [r7, #15]
 800df54:	e009      	b.n	800df6a <httpServer_Sockinit+0x26>
	{
		// Mapping the H/W socket numbers to the sequential index numbers
		HTTPSock_Num[i] = socklist[i];
 800df56:	7bfb      	ldrb	r3, [r7, #15]
 800df58:	683a      	ldr	r2, [r7, #0]
 800df5a:	441a      	add	r2, r3
 800df5c:	7bfb      	ldrb	r3, [r7, #15]
 800df5e:	7811      	ldrb	r1, [r2, #0]
 800df60:	4a07      	ldr	r2, [pc, #28]	; (800df80 <httpServer_Sockinit+0x3c>)
 800df62:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < cnt; i++)
 800df64:	7bfb      	ldrb	r3, [r7, #15]
 800df66:	3301      	adds	r3, #1
 800df68:	73fb      	strb	r3, [r7, #15]
 800df6a:	7bfa      	ldrb	r2, [r7, #15]
 800df6c:	79fb      	ldrb	r3, [r7, #7]
 800df6e:	429a      	cmp	r2, r3
 800df70:	d3f1      	bcc.n	800df56 <httpServer_Sockinit+0x12>
	}
}
 800df72:	bf00      	nop
 800df74:	bf00      	nop
 800df76:	3714      	adds	r7, #20
 800df78:	46bd      	mov	sp, r7
 800df7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7e:	4770      	bx	lr
 800df80:	200011b8 	.word	0x200011b8

0800df84 <getHTTPSocketNum>:

static uint8_t getHTTPSocketNum(uint8_t seqnum)
{
 800df84:	b480      	push	{r7}
 800df86:	b083      	sub	sp, #12
 800df88:	af00      	add	r7, sp, #0
 800df8a:	4603      	mov	r3, r0
 800df8c:	71fb      	strb	r3, [r7, #7]
	// Return the 'H/W socket number' corresponding to the index number
	return HTTPSock_Num[seqnum];
 800df8e:	79fb      	ldrb	r3, [r7, #7]
 800df90:	4a03      	ldr	r2, [pc, #12]	; (800dfa0 <getHTTPSocketNum+0x1c>)
 800df92:	5cd3      	ldrb	r3, [r2, r3]
}
 800df94:	4618      	mov	r0, r3
 800df96:	370c      	adds	r7, #12
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr
 800dfa0:	200011b8 	.word	0x200011b8

0800dfa4 <getHTTPSequenceNum>:

static int8_t getHTTPSequenceNum(uint8_t socket)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b085      	sub	sp, #20
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	4603      	mov	r3, r0
 800dfac:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 800dfae:	2300      	movs	r3, #0
 800dfb0:	73fb      	strb	r3, [r7, #15]
 800dfb2:	e00b      	b.n	800dfcc <getHTTPSequenceNum+0x28>
		if(HTTPSock_Num[i] == socket) return i;
 800dfb4:	7bfb      	ldrb	r3, [r7, #15]
 800dfb6:	4a0b      	ldr	r2, [pc, #44]	; (800dfe4 <getHTTPSequenceNum+0x40>)
 800dfb8:	5cd3      	ldrb	r3, [r2, r3]
 800dfba:	79fa      	ldrb	r2, [r7, #7]
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d102      	bne.n	800dfc6 <getHTTPSequenceNum+0x22>
 800dfc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfc4:	e007      	b.n	800dfd6 <getHTTPSequenceNum+0x32>
	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 800dfc6:	7bfb      	ldrb	r3, [r7, #15]
 800dfc8:	3301      	adds	r3, #1
 800dfca:	73fb      	strb	r3, [r7, #15]
 800dfcc:	7bfb      	ldrb	r3, [r7, #15]
 800dfce:	2b07      	cmp	r3, #7
 800dfd0:	d9f0      	bls.n	800dfb4 <getHTTPSequenceNum+0x10>

	return -1;
 800dfd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3714      	adds	r7, #20
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr
 800dfe2:	bf00      	nop
 800dfe4:	200011b8 	.word	0x200011b8

0800dfe8 <httpServer_init>:

void httpServer_init(uint8_t * tx_buf, uint8_t * rx_buf, uint8_t cnt, uint8_t * socklist)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b084      	sub	sp, #16
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	60f8      	str	r0, [r7, #12]
 800dff0:	60b9      	str	r1, [r7, #8]
 800dff2:	603b      	str	r3, [r7, #0]
 800dff4:	4613      	mov	r3, r2
 800dff6:	71fb      	strb	r3, [r7, #7]
	// User's shared buffer
	pHTTP_TX = tx_buf;
 800dff8:	4a07      	ldr	r2, [pc, #28]	; (800e018 <httpServer_init+0x30>)
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	6013      	str	r3, [r2, #0]
	pHTTP_RX = rx_buf;
 800dffe:	4a07      	ldr	r2, [pc, #28]	; (800e01c <httpServer_init+0x34>)
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	6013      	str	r3, [r2, #0]

	// H/W Socket number mapping
	httpServer_Sockinit(cnt, socklist);
 800e004:	79fb      	ldrb	r3, [r7, #7]
 800e006:	6839      	ldr	r1, [r7, #0]
 800e008:	4618      	mov	r0, r3
 800e00a:	f7ff ff9b 	bl	800df44 <httpServer_Sockinit>
}
 800e00e:	bf00      	nop
 800e010:	3710      	adds	r7, #16
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}
 800e016:	bf00      	nop
 800e018:	20001298 	.word	0x20001298
 800e01c:	2000129c 	.word	0x2000129c

0800e020 <httpServer_run>:
	if(wdt_reset) HTTPServer_WDT_Reset = wdt_reset;
}


void httpServer_run(uint8_t seqnum)
{
 800e020:	b590      	push	{r4, r7, lr}
 800e022:	b089      	sub	sp, #36	; 0x24
 800e024:	af02      	add	r7, sp, #8
 800e026:	4603      	mov	r3, r0
 800e028:	71fb      	strb	r3, [r7, #7]
	uint8_t s;	// socket number
	uint16_t len;
	uint32_t gettime = 0;
 800e02a:	2300      	movs	r3, #0
 800e02c:	613b      	str	r3, [r7, #16]
#ifdef _HTTPSERVER_DEBUG_
	uint8_t destip[4] = {0, };
	uint16_t destport = 0;
#endif

	http_request = (st_http_request *)pHTTP_RX;		// Structure of HTTP Request
 800e02e:	4bb4      	ldr	r3, [pc, #720]	; (800e300 <httpServer_run+0x2e0>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	4ab4      	ldr	r2, [pc, #720]	; (800e304 <httpServer_run+0x2e4>)
 800e034:	6013      	str	r3, [r2, #0]
	parsed_http_request = (st_http_request *)pHTTP_TX;
 800e036:	4bb4      	ldr	r3, [pc, #720]	; (800e308 <httpServer_run+0x2e8>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	4ab4      	ldr	r2, [pc, #720]	; (800e30c <httpServer_run+0x2ec>)
 800e03c:	6013      	str	r3, [r2, #0]

	// Get the H/W socket number
	s = getHTTPSocketNum(seqnum);
 800e03e:	79fb      	ldrb	r3, [r7, #7]
 800e040:	4618      	mov	r0, r3
 800e042:	f7ff ff9f 	bl	800df84 <getHTTPSocketNum>
 800e046:	4603      	mov	r3, r0
 800e048:	73fb      	strb	r3, [r7, #15]

	/* HTTP Service Start */
	debug = getSn_SR(s);
 800e04a:	7bfb      	ldrb	r3, [r7, #15]
 800e04c:	009b      	lsls	r3, r3, #2
 800e04e:	3301      	adds	r3, #1
 800e050:	00db      	lsls	r3, r3, #3
 800e052:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800e056:	4618      	mov	r0, r3
 800e058:	f7f9 fd82 	bl	8007b60 <WIZCHIP_READ>
 800e05c:	4603      	mov	r3, r0
 800e05e:	81bb      	strh	r3, [r7, #12]
	switch(getSn_SR(s))
 800e060:	7bfb      	ldrb	r3, [r7, #15]
 800e062:	009b      	lsls	r3, r3, #2
 800e064:	3301      	adds	r3, #1
 800e066:	00db      	lsls	r3, r3, #3
 800e068:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800e06c:	4618      	mov	r0, r3
 800e06e:	f7f9 fd77 	bl	8007b60 <WIZCHIP_READ>
 800e072:	4603      	mov	r3, r0
 800e074:	2b1c      	cmp	r3, #28
 800e076:	f200 813e 	bhi.w	800e2f6 <httpServer_run+0x2d6>
 800e07a:	a201      	add	r2, pc, #4	; (adr r2, 800e080 <httpServer_run+0x60>)
 800e07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e080:	0800e2df 	.word	0x0800e2df
 800e084:	0800e2f7 	.word	0x0800e2f7
 800e088:	0800e2f7 	.word	0x0800e2f7
 800e08c:	0800e2f7 	.word	0x0800e2f7
 800e090:	0800e2f7 	.word	0x0800e2f7
 800e094:	0800e2f7 	.word	0x0800e2f7
 800e098:	0800e2f7 	.word	0x0800e2f7
 800e09c:	0800e2f7 	.word	0x0800e2f7
 800e0a0:	0800e2f7 	.word	0x0800e2f7
 800e0a4:	0800e2f7 	.word	0x0800e2f7
 800e0a8:	0800e2f7 	.word	0x0800e2f7
 800e0ac:	0800e2f7 	.word	0x0800e2f7
 800e0b0:	0800e2f7 	.word	0x0800e2f7
 800e0b4:	0800e2f7 	.word	0x0800e2f7
 800e0b8:	0800e2f7 	.word	0x0800e2f7
 800e0bc:	0800e2f7 	.word	0x0800e2f7
 800e0c0:	0800e2f7 	.word	0x0800e2f7
 800e0c4:	0800e2f7 	.word	0x0800e2f7
 800e0c8:	0800e2f7 	.word	0x0800e2f7
 800e0cc:	0800e2ed 	.word	0x0800e2ed
 800e0d0:	0800e2f7 	.word	0x0800e2f7
 800e0d4:	0800e2f7 	.word	0x0800e2f7
 800e0d8:	0800e2f7 	.word	0x0800e2f7
 800e0dc:	0800e0f5 	.word	0x0800e0f5
 800e0e0:	0800e2f7 	.word	0x0800e2f7
 800e0e4:	0800e2f7 	.word	0x0800e2f7
 800e0e8:	0800e2f7 	.word	0x0800e2f7
 800e0ec:	0800e2f7 	.word	0x0800e2f7
 800e0f0:	0800e2d5 	.word	0x0800e2d5
	{
		case SOCK_ESTABLISHED:
			// Interrupt clear
			if(getSn_IR(s) & Sn_IR_CON)
 800e0f4:	7bfb      	ldrb	r3, [r7, #15]
 800e0f6:	009b      	lsls	r3, r3, #2
 800e0f8:	3301      	adds	r3, #1
 800e0fa:	00db      	lsls	r3, r3, #3
 800e0fc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e100:	4618      	mov	r0, r3
 800e102:	f7f9 fd2d 	bl	8007b60 <WIZCHIP_READ>
 800e106:	4603      	mov	r3, r0
 800e108:	f003 0301 	and.w	r3, r3, #1
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d009      	beq.n	800e124 <httpServer_run+0x104>
			{
				setSn_IR(s, Sn_IR_CON);
 800e110:	7bfb      	ldrb	r3, [r7, #15]
 800e112:	009b      	lsls	r3, r3, #2
 800e114:	3301      	adds	r3, #1
 800e116:	00db      	lsls	r3, r3, #3
 800e118:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e11c:	2101      	movs	r1, #1
 800e11e:	4618      	mov	r0, r3
 800e120:	f7f9 fd6a 	bl	8007bf8 <WIZCHIP_WRITE>
			}

			// HTTP Process states
			switch(HTTPSock_Status[seqnum].sock_status)
 800e124:	79fa      	ldrb	r2, [r7, #7]
 800e126:	497a      	ldr	r1, [pc, #488]	; (800e310 <httpServer_run+0x2f0>)
 800e128:	4613      	mov	r3, r2
 800e12a:	011b      	lsls	r3, r3, #4
 800e12c:	4413      	add	r3, r2
 800e12e:	009b      	lsls	r3, r3, #2
 800e130:	440b      	add	r3, r1
 800e132:	781b      	ldrb	r3, [r3, #0]
 800e134:	2b04      	cmp	r3, #4
 800e136:	f000 809b 	beq.w	800e270 <httpServer_run+0x250>
 800e13a:	2b04      	cmp	r3, #4
 800e13c:	f300 80c4 	bgt.w	800e2c8 <httpServer_run+0x2a8>
 800e140:	2b00      	cmp	r3, #0
 800e142:	d002      	beq.n	800e14a <httpServer_run+0x12a>
 800e144:	2b03      	cmp	r3, #3
 800e146:	d06e      	beq.n	800e226 <httpServer_run+0x206>
#endif
					http_disconnect(s);
					break;

				default :
					break;
 800e148:	e0be      	b.n	800e2c8 <httpServer_run+0x2a8>
					if ((len = getSn_RX_RSR(s)) > 0)
 800e14a:	7bfb      	ldrb	r3, [r7, #15]
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7f9 feac 	bl	8007eaa <getSn_RX_RSR>
 800e152:	4603      	mov	r3, r0
 800e154:	82fb      	strh	r3, [r7, #22]
 800e156:	8afb      	ldrh	r3, [r7, #22]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	f000 80b7 	beq.w	800e2cc <httpServer_run+0x2ac>
						if (len > DATA_BUF_SIZE) len = DATA_BUF_SIZE;
 800e15e:	8afb      	ldrh	r3, [r7, #22]
 800e160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e164:	d902      	bls.n	800e16c <httpServer_run+0x14c>
 800e166:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e16a:	82fb      	strh	r3, [r7, #22]
						len = recv(s, (uint8_t *)http_request, len);
 800e16c:	4b65      	ldr	r3, [pc, #404]	; (800e304 <httpServer_run+0x2e4>)
 800e16e:	6819      	ldr	r1, [r3, #0]
 800e170:	8afa      	ldrh	r2, [r7, #22]
 800e172:	7bfb      	ldrb	r3, [r7, #15]
 800e174:	4618      	mov	r0, r3
 800e176:	f7fa fc0b 	bl	8008990 <recv>
 800e17a:	4603      	mov	r3, r0
 800e17c:	82fb      	strh	r3, [r7, #22]
						*(((uint8_t *)http_request) + len) = '\0';
 800e17e:	4b61      	ldr	r3, [pc, #388]	; (800e304 <httpServer_run+0x2e4>)
 800e180:	681a      	ldr	r2, [r3, #0]
 800e182:	8afb      	ldrh	r3, [r7, #22]
 800e184:	4413      	add	r3, r2
 800e186:	2200      	movs	r2, #0
 800e188:	701a      	strb	r2, [r3, #0]
						parse_http_request(parsed_http_request, (uint8_t *)http_request);
 800e18a:	4b60      	ldr	r3, [pc, #384]	; (800e30c <httpServer_run+0x2ec>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	4a5d      	ldr	r2, [pc, #372]	; (800e304 <httpServer_run+0x2e4>)
 800e190:	6812      	ldr	r2, [r2, #0]
 800e192:	4611      	mov	r1, r2
 800e194:	4618      	mov	r0, r3
 800e196:	f7ff fd13 	bl	800dbc0 <parse_http_request>
						http_process_handler(s, parsed_http_request);
 800e19a:	4b5c      	ldr	r3, [pc, #368]	; (800e30c <httpServer_run+0x2ec>)
 800e19c:	681a      	ldr	r2, [r3, #0]
 800e19e:	7bfb      	ldrb	r3, [r7, #15]
 800e1a0:	4611      	mov	r1, r2
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f000 fac4 	bl	800e730 <http_process_handler>
						gettime = get_httpServer_timecount();
 800e1a8:	f000 fd04 	bl	800ebb4 <get_httpServer_timecount>
 800e1ac:	6138      	str	r0, [r7, #16]
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 800e1ae:	e006      	b.n	800e1be <httpServer_run+0x19e>
							if((get_httpServer_timecount() - gettime) > 3)
 800e1b0:	f000 fd00 	bl	800ebb4 <get_httpServer_timecount>
 800e1b4:	4602      	mov	r2, r0
 800e1b6:	693b      	ldr	r3, [r7, #16]
 800e1b8:	1ad3      	subs	r3, r2, r3
 800e1ba:	2b03      	cmp	r3, #3
 800e1bc:	d813      	bhi.n	800e1e6 <httpServer_run+0x1c6>
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 800e1be:	7bfb      	ldrb	r3, [r7, #15]
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f7f9 fe27 	bl	8007e14 <getSn_TX_FSR>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	461c      	mov	r4, r3
 800e1ca:	7bfb      	ldrb	r3, [r7, #15]
 800e1cc:	009b      	lsls	r3, r3, #2
 800e1ce:	3301      	adds	r3, #1
 800e1d0:	00db      	lsls	r3, r3, #3
 800e1d2:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f7f9 fcc2 	bl	8007b60 <WIZCHIP_READ>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	029b      	lsls	r3, r3, #10
 800e1e0:	429c      	cmp	r4, r3
 800e1e2:	d1e5      	bne.n	800e1b0 <httpServer_run+0x190>
 800e1e4:	e000      	b.n	800e1e8 <httpServer_run+0x1c8>
								break;
 800e1e6:	bf00      	nop
						if(HTTPSock_Status[seqnum].file_len > 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_INPROC;
 800e1e8:	79fa      	ldrb	r2, [r7, #7]
 800e1ea:	4949      	ldr	r1, [pc, #292]	; (800e310 <httpServer_run+0x2f0>)
 800e1ec:	4613      	mov	r3, r2
 800e1ee:	011b      	lsls	r3, r3, #4
 800e1f0:	4413      	add	r3, r2
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	440b      	add	r3, r1
 800e1f6:	3338      	adds	r3, #56	; 0x38
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d009      	beq.n	800e212 <httpServer_run+0x1f2>
 800e1fe:	79fa      	ldrb	r2, [r7, #7]
 800e200:	4943      	ldr	r1, [pc, #268]	; (800e310 <httpServer_run+0x2f0>)
 800e202:	4613      	mov	r3, r2
 800e204:	011b      	lsls	r3, r3, #4
 800e206:	4413      	add	r3, r2
 800e208:	009b      	lsls	r3, r3, #2
 800e20a:	440b      	add	r3, r1
 800e20c:	2203      	movs	r2, #3
 800e20e:	701a      	strb	r2, [r3, #0]
					break;
 800e210:	e05c      	b.n	800e2cc <httpServer_run+0x2ac>
						else HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE; // Send the 'HTTP response' end
 800e212:	79fa      	ldrb	r2, [r7, #7]
 800e214:	493e      	ldr	r1, [pc, #248]	; (800e310 <httpServer_run+0x2f0>)
 800e216:	4613      	mov	r3, r2
 800e218:	011b      	lsls	r3, r3, #4
 800e21a:	4413      	add	r3, r2
 800e21c:	009b      	lsls	r3, r3, #2
 800e21e:	440b      	add	r3, r1
 800e220:	2204      	movs	r2, #4
 800e222:	701a      	strb	r2, [r3, #0]
					break;
 800e224:	e052      	b.n	800e2cc <httpServer_run+0x2ac>
					send_http_response_body(s, HTTPSock_Status[seqnum].file_name, http_response, 0, 0);
 800e226:	79fa      	ldrb	r2, [r7, #7]
 800e228:	4613      	mov	r3, r2
 800e22a:	011b      	lsls	r3, r3, #4
 800e22c:	4413      	add	r3, r2
 800e22e:	009b      	lsls	r3, r3, #2
 800e230:	4a37      	ldr	r2, [pc, #220]	; (800e310 <httpServer_run+0x2f0>)
 800e232:	4413      	add	r3, r2
 800e234:	1c59      	adds	r1, r3, #1
 800e236:	4b37      	ldr	r3, [pc, #220]	; (800e314 <httpServer_run+0x2f4>)
 800e238:	681a      	ldr	r2, [r3, #0]
 800e23a:	7bf8      	ldrb	r0, [r7, #15]
 800e23c:	2300      	movs	r3, #0
 800e23e:	9300      	str	r3, [sp, #0]
 800e240:	2300      	movs	r3, #0
 800e242:	f000 f8d5 	bl	800e3f0 <send_http_response_body>
					if(HTTPSock_Status[seqnum].file_len == 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE;
 800e246:	79fa      	ldrb	r2, [r7, #7]
 800e248:	4931      	ldr	r1, [pc, #196]	; (800e310 <httpServer_run+0x2f0>)
 800e24a:	4613      	mov	r3, r2
 800e24c:	011b      	lsls	r3, r3, #4
 800e24e:	4413      	add	r3, r2
 800e250:	009b      	lsls	r3, r3, #2
 800e252:	440b      	add	r3, r1
 800e254:	3338      	adds	r3, #56	; 0x38
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d139      	bne.n	800e2d0 <httpServer_run+0x2b0>
 800e25c:	79fa      	ldrb	r2, [r7, #7]
 800e25e:	492c      	ldr	r1, [pc, #176]	; (800e310 <httpServer_run+0x2f0>)
 800e260:	4613      	mov	r3, r2
 800e262:	011b      	lsls	r3, r3, #4
 800e264:	4413      	add	r3, r2
 800e266:	009b      	lsls	r3, r3, #2
 800e268:	440b      	add	r3, r1
 800e26a:	2204      	movs	r2, #4
 800e26c:	701a      	strb	r2, [r3, #0]
					break;
 800e26e:	e02f      	b.n	800e2d0 <httpServer_run+0x2b0>
					HTTPSock_Status[seqnum].file_len = 0;
 800e270:	79fa      	ldrb	r2, [r7, #7]
 800e272:	4927      	ldr	r1, [pc, #156]	; (800e310 <httpServer_run+0x2f0>)
 800e274:	4613      	mov	r3, r2
 800e276:	011b      	lsls	r3, r3, #4
 800e278:	4413      	add	r3, r2
 800e27a:	009b      	lsls	r3, r3, #2
 800e27c:	440b      	add	r3, r1
 800e27e:	3338      	adds	r3, #56	; 0x38
 800e280:	2200      	movs	r2, #0
 800e282:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_offset = 0;
 800e284:	79fa      	ldrb	r2, [r7, #7]
 800e286:	4922      	ldr	r1, [pc, #136]	; (800e310 <httpServer_run+0x2f0>)
 800e288:	4613      	mov	r3, r2
 800e28a:	011b      	lsls	r3, r3, #4
 800e28c:	4413      	add	r3, r2
 800e28e:	009b      	lsls	r3, r3, #2
 800e290:	440b      	add	r3, r1
 800e292:	333c      	adds	r3, #60	; 0x3c
 800e294:	2200      	movs	r2, #0
 800e296:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_start = 0;
 800e298:	79fa      	ldrb	r2, [r7, #7]
 800e29a:	491d      	ldr	r1, [pc, #116]	; (800e310 <httpServer_run+0x2f0>)
 800e29c:	4613      	mov	r3, r2
 800e29e:	011b      	lsls	r3, r3, #4
 800e2a0:	4413      	add	r3, r2
 800e2a2:	009b      	lsls	r3, r3, #2
 800e2a4:	440b      	add	r3, r1
 800e2a6:	3334      	adds	r3, #52	; 0x34
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].sock_status = STATE_HTTP_IDLE;
 800e2ac:	79fa      	ldrb	r2, [r7, #7]
 800e2ae:	4918      	ldr	r1, [pc, #96]	; (800e310 <httpServer_run+0x2f0>)
 800e2b0:	4613      	mov	r3, r2
 800e2b2:	011b      	lsls	r3, r3, #4
 800e2b4:	4413      	add	r3, r2
 800e2b6:	009b      	lsls	r3, r3, #2
 800e2b8:	440b      	add	r3, r1
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	701a      	strb	r2, [r3, #0]
					http_disconnect(s);
 800e2be:	7bfb      	ldrb	r3, [r7, #15]
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f000 fa13 	bl	800e6ec <http_disconnect>
					break;
 800e2c6:	e004      	b.n	800e2d2 <httpServer_run+0x2b2>
					break;
 800e2c8:	bf00      	nop
 800e2ca:	e015      	b.n	800e2f8 <httpServer_run+0x2d8>
					break;
 800e2cc:	bf00      	nop
 800e2ce:	e013      	b.n	800e2f8 <httpServer_run+0x2d8>
					break;
 800e2d0:	bf00      	nop
			}
			break;
 800e2d2:	e011      	b.n	800e2f8 <httpServer_run+0x2d8>

		case SOCK_CLOSE_WAIT:
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : ClOSE_WAIT\r\n", s);	// if a peer requests to close the current connection
#endif
			disconnect(s);
 800e2d4:	7bfb      	ldrb	r3, [r7, #15]
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f7fa f9ea 	bl	80086b0 <disconnect>
			break;
 800e2dc:	e00c      	b.n	800e2f8 <httpServer_run+0x2d8>

		case SOCK_CLOSED:
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : CLOSED\r\n", s);
#endif
			if(socket(s, Sn_MR_TCP, HTTP_SERVER_PORT, 0x00) == s)    /* Reinitialize the socket */
 800e2de:	7bf8      	ldrb	r0, [r7, #15]
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	2250      	movs	r2, #80	; 0x50
 800e2e4:	2101      	movs	r1, #1
 800e2e6:	f7f9 ff2b 	bl	8008140 <socket>
			{
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : OPEN\r\n", s);
#endif
			}
			break;
 800e2ea:	e005      	b.n	800e2f8 <httpServer_run+0x2d8>

		case SOCK_INIT:
			listen(s);
 800e2ec:	7bfb      	ldrb	r3, [r7, #15]
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f7fa f8a8 	bl	8008444 <listen>
			break;
 800e2f4:	e000      	b.n	800e2f8 <httpServer_run+0x2d8>

		case SOCK_FIN_WAIT:
			//close(s);
			break;
		default :
			break;
 800e2f6:	bf00      	nop
	} // end of switch

#ifdef _USE_WATCHDOG_
	HTTPServer_WDT_Reset();
#endif
}
 800e2f8:	bf00      	nop
 800e2fa:	371c      	adds	r7, #28
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd90      	pop	{r4, r7, pc}
 800e300:	2000129c 	.word	0x2000129c
 800e304:	200011c0 	.word	0x200011c0
 800e308:	20001298 	.word	0x20001298
 800e30c:	200011c4 	.word	0x200011c4
 800e310:	200012a4 	.word	0x200012a4
 800e314:	200011c8 	.word	0x200011c8

0800e318 <send_http_response_header>:

////////////////////////////////////////////
// Private Functions
////////////////////////////////////////////
static void send_http_response_header(uint8_t s, uint8_t content_type, uint32_t body_len, uint16_t http_status)
{
 800e318:	b590      	push	{r4, r7, lr}
 800e31a:	b083      	sub	sp, #12
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	603a      	str	r2, [r7, #0]
 800e320:	461a      	mov	r2, r3
 800e322:	4603      	mov	r3, r0
 800e324:	71fb      	strb	r3, [r7, #7]
 800e326:	460b      	mov	r3, r1
 800e328:	71bb      	strb	r3, [r7, #6]
 800e32a:	4613      	mov	r3, r2
 800e32c:	80bb      	strh	r3, [r7, #4]
	switch(http_status)
 800e32e:	88bb      	ldrh	r3, [r7, #4]
 800e330:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 800e334:	d029      	beq.n	800e38a <send_http_response_header+0x72>
 800e336:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 800e33a:	dc3a      	bgt.n	800e3b2 <send_http_response_header+0x9a>
 800e33c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800e340:	d019      	beq.n	800e376 <send_http_response_header+0x5e>
 800e342:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800e346:	dc34      	bgt.n	800e3b2 <send_http_response_header+0x9a>
 800e348:	2bc8      	cmp	r3, #200	; 0xc8
 800e34a:	d003      	beq.n	800e354 <send_http_response_header+0x3c>
 800e34c:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800e350:	d025      	beq.n	800e39e <send_http_response_header+0x86>
			break;
		case STATUS_MV_TEMP:	// HTTP/1.1 302 Not Found
			memcpy(http_response, REDIRECT_HTML_PAGE, sizeof(REDIRECT_HTML_PAGE));
			break;
		default:
			break;
 800e352:	e02e      	b.n	800e3b2 <send_http_response_header+0x9a>
			if((content_type != PTYPE_CGI) && (content_type != PTYPE_XML)) // CGI/XML type request does not respond HTTP header
 800e354:	79bb      	ldrb	r3, [r7, #6]
 800e356:	2b08      	cmp	r3, #8
 800e358:	d00a      	beq.n	800e370 <send_http_response_header+0x58>
 800e35a:	79bb      	ldrb	r3, [r7, #6]
 800e35c:	2b09      	cmp	r3, #9
 800e35e:	d007      	beq.n	800e370 <send_http_response_header+0x58>
				make_http_response_head((char*)http_response, content_type, body_len);
 800e360:	4b1f      	ldr	r3, [pc, #124]	; (800e3e0 <send_http_response_header+0xc8>)
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	79b9      	ldrb	r1, [r7, #6]
 800e366:	683a      	ldr	r2, [r7, #0]
 800e368:	4618      	mov	r0, r3
 800e36a:	f7ff f9ed 	bl	800d748 <make_http_response_head>
			break;
 800e36e:	e021      	b.n	800e3b4 <send_http_response_header+0x9c>
				http_status = 0;
 800e370:	2300      	movs	r3, #0
 800e372:	80bb      	strh	r3, [r7, #4]
			break;
 800e374:	e01e      	b.n	800e3b4 <send_http_response_header+0x9c>
			memcpy(http_response, ERROR_REQUEST_PAGE, sizeof(ERROR_REQUEST_PAGE));
 800e376:	4b1a      	ldr	r3, [pc, #104]	; (800e3e0 <send_http_response_header+0xc8>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4a1a      	ldr	r2, [pc, #104]	; (800e3e4 <send_http_response_header+0xcc>)
 800e37c:	4618      	mov	r0, r3
 800e37e:	4611      	mov	r1, r2
 800e380:	2376      	movs	r3, #118	; 0x76
 800e382:	461a      	mov	r2, r3
 800e384:	f00e f865 	bl	801c452 <memcpy>
			break;
 800e388:	e014      	b.n	800e3b4 <send_http_response_header+0x9c>
			memcpy(http_response, ERROR_HTML_PAGE, sizeof(ERROR_HTML_PAGE));
 800e38a:	4b15      	ldr	r3, [pc, #84]	; (800e3e0 <send_http_response_header+0xc8>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	4a16      	ldr	r2, [pc, #88]	; (800e3e8 <send_http_response_header+0xd0>)
 800e390:	4618      	mov	r0, r3
 800e392:	4611      	mov	r1, r2
 800e394:	2399      	movs	r3, #153	; 0x99
 800e396:	461a      	mov	r2, r3
 800e398:	f00e f85b 	bl	801c452 <memcpy>
			break;
 800e39c:	e00a      	b.n	800e3b4 <send_http_response_header+0x9c>
			memcpy(http_response, REDIRECT_HTML_PAGE, sizeof(REDIRECT_HTML_PAGE));
 800e39e:	4b10      	ldr	r3, [pc, #64]	; (800e3e0 <send_http_response_header+0xc8>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	4a12      	ldr	r2, [pc, #72]	; (800e3ec <send_http_response_header+0xd4>)
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	4611      	mov	r1, r2
 800e3a8:	239e      	movs	r3, #158	; 0x9e
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	f00e f851 	bl	801c452 <memcpy>
			break;
 800e3b0:	e000      	b.n	800e3b4 <send_http_response_header+0x9c>
			break;
 800e3b2:	bf00      	nop
	}

	// Send the HTTP Response 'header'
	if(http_status)
 800e3b4:	88bb      	ldrh	r3, [r7, #4]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d00d      	beq.n	800e3d6 <send_http_response_header+0xbe>
	{
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : [Send] HTTP Response Header [ %d ]byte\r\n", s, (uint16_t)strlen((char *)http_response));
#endif
		send(s, http_response, strlen((char *)http_response));
 800e3ba:	4b09      	ldr	r3, [pc, #36]	; (800e3e0 <send_http_response_header+0xc8>)
 800e3bc:	681c      	ldr	r4, [r3, #0]
 800e3be:	4b08      	ldr	r3, [pc, #32]	; (800e3e0 <send_http_response_header+0xc8>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7f1 ff6c 	bl	80002a0 <strlen>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	b29a      	uxth	r2, r3
 800e3cc:	79fb      	ldrb	r3, [r7, #7]
 800e3ce:	4621      	mov	r1, r4
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f7fa f9e3 	bl	800879c <send>
	}
}
 800e3d6:	bf00      	nop
 800e3d8:	370c      	adds	r7, #12
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd90      	pop	{r4, r7, pc}
 800e3de:	bf00      	nop
 800e3e0:	200011c8 	.word	0x200011c8
 800e3e4:	08022c50 	.word	0x08022c50
 800e3e8:	08022bb4 	.word	0x08022bb4
 800e3ec:	08022cc8 	.word	0x08022cc8

0800e3f0 <send_http_response_body>:

static void send_http_response_body(uint8_t s, uint8_t * uri_name, uint8_t * buf, uint32_t start_addr, uint32_t file_len)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b0a6      	sub	sp, #152	; 0x98
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	60b9      	str	r1, [r7, #8]
 800e3f8:	607a      	str	r2, [r7, #4]
 800e3fa:	603b      	str	r3, [r7, #0]
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	73fb      	strb	r3, [r7, #15]
	int8_t get_seqnum;
	uint32_t send_len;

	uint8_t flag_datasend_end = 0;
 800e400:	2300      	movs	r3, #0
 800e402:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

#ifdef _USE_USER_SPI_FLASH_
	char tmp_path[PATH_BUF_SIZE] = {0x00, };
 800e406:	2300      	movs	r3, #0
 800e408:	613b      	str	r3, [r7, #16]
 800e40a:	f107 0314 	add.w	r3, r7, #20
 800e40e:	227c      	movs	r2, #124	; 0x7c
 800e410:	2100      	movs	r1, #0
 800e412:	4618      	mov	r0, r3
 800e414:	f00d fe48 	bl	801c0a8 <memset>
#endif
#ifdef _USE_FLASH_
	uint32_t addr = 0;
#endif

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 800e418:	7bfb      	ldrb	r3, [r7, #15]
 800e41a:	4618      	mov	r0, r3
 800e41c:	f7ff fdc2 	bl	800dfa4 <getHTTPSequenceNum>
 800e420:	4603      	mov	r3, r0
 800e422:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 800e426:	f997 3092 	ldrsb.w	r3, [r7, #146]	; 0x92
 800e42a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e42e:	f000 812e 	beq.w	800e68e <send_http_response_body+0x29e>

	// Send the HTTP Response 'body'; requested file
	if(!HTTPSock_Status[get_seqnum].file_len) // ### Send HTTP response body: First part ###
 800e432:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e436:	4998      	ldr	r1, [pc, #608]	; (800e698 <send_http_response_body+0x2a8>)
 800e438:	4613      	mov	r3, r2
 800e43a:	011b      	lsls	r3, r3, #4
 800e43c:	4413      	add	r3, r2
 800e43e:	009b      	lsls	r3, r3, #2
 800e440:	440b      	add	r3, r1
 800e442:	3338      	adds	r3, #56	; 0x38
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d140      	bne.n	800e4cc <send_http_response_body+0xdc>
	{
		if (file_len > DATA_BUF_SIZE - 1)
 800e44a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e44e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e452:	d336      	bcc.n	800e4c2 <send_http_response_body+0xd2>
		{
			HTTPSock_Status[get_seqnum].file_start = start_addr;
 800e454:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e458:	498f      	ldr	r1, [pc, #572]	; (800e698 <send_http_response_body+0x2a8>)
 800e45a:	4613      	mov	r3, r2
 800e45c:	011b      	lsls	r3, r3, #4
 800e45e:	4413      	add	r3, r2
 800e460:	009b      	lsls	r3, r3, #2
 800e462:	440b      	add	r3, r1
 800e464:	3334      	adds	r3, #52	; 0x34
 800e466:	683a      	ldr	r2, [r7, #0]
 800e468:	601a      	str	r2, [r3, #0]
			HTTPSock_Status[get_seqnum].file_len = file_len;
 800e46a:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e46e:	498a      	ldr	r1, [pc, #552]	; (800e698 <send_http_response_body+0x2a8>)
 800e470:	4613      	mov	r3, r2
 800e472:	011b      	lsls	r3, r3, #4
 800e474:	4413      	add	r3, r2
 800e476:	009b      	lsls	r3, r3, #2
 800e478:	440b      	add	r3, r1
 800e47a:	3338      	adds	r3, #56	; 0x38
 800e47c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800e480:	601a      	str	r2, [r3, #0]
			send_len = DATA_BUF_SIZE - 1;
 800e482:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800e486:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

/////////////////////////////////////////////////////////////////////////////////////////////////
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
			memset(HTTPSock_Status[get_seqnum].file_name, 0x00, MAX_CONTENT_NAME_LEN);
 800e48a:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e48e:	4613      	mov	r3, r2
 800e490:	011b      	lsls	r3, r3, #4
 800e492:	4413      	add	r3, r2
 800e494:	009b      	lsls	r3, r3, #2
 800e496:	4a80      	ldr	r2, [pc, #512]	; (800e698 <send_http_response_body+0x2a8>)
 800e498:	4413      	add	r3, r2
 800e49a:	3301      	adds	r3, #1
 800e49c:	2232      	movs	r2, #50	; 0x32
 800e49e:	2100      	movs	r1, #0
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f00d fe01 	bl	801c0a8 <memset>
			strcpy((char *)HTTPSock_Status[get_seqnum].file_name, (char *)uri_name);
 800e4a6:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e4aa:	4613      	mov	r3, r2
 800e4ac:	011b      	lsls	r3, r3, #4
 800e4ae:	4413      	add	r3, r2
 800e4b0:	009b      	lsls	r3, r3, #2
 800e4b2:	4a79      	ldr	r2, [pc, #484]	; (800e698 <send_http_response_body+0x2a8>)
 800e4b4:	4413      	add	r3, r2
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	68b9      	ldr	r1, [r7, #8]
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f00d ffc1 	bl	801c442 <strcpy>
 800e4c0:	e028      	b.n	800e514 <send_http_response_body+0x124>
#endif
		}
		else
		{
			// Send process end
			send_len = file_len;
 800e4c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e4c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e4ca:	e023      	b.n	800e514 <send_http_response_body+0x124>
		if(HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH)
		{
			addr = HTTPSock_Status[get_seqnum].file_start + HTTPSock_Status[get_seqnum].file_offset;
		}
#endif
		send_len = HTTPSock_Status[get_seqnum].file_len - HTTPSock_Status[get_seqnum].file_offset;
 800e4cc:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e4d0:	4971      	ldr	r1, [pc, #452]	; (800e698 <send_http_response_body+0x2a8>)
 800e4d2:	4613      	mov	r3, r2
 800e4d4:	011b      	lsls	r3, r3, #4
 800e4d6:	4413      	add	r3, r2
 800e4d8:	009b      	lsls	r3, r3, #2
 800e4da:	440b      	add	r3, r1
 800e4dc:	3338      	adds	r3, #56	; 0x38
 800e4de:	6819      	ldr	r1, [r3, #0]
 800e4e0:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e4e4:	486c      	ldr	r0, [pc, #432]	; (800e698 <send_http_response_body+0x2a8>)
 800e4e6:	4613      	mov	r3, r2
 800e4e8:	011b      	lsls	r3, r3, #4
 800e4ea:	4413      	add	r3, r2
 800e4ec:	009b      	lsls	r3, r3, #2
 800e4ee:	4403      	add	r3, r0
 800e4f0:	333c      	adds	r3, #60	; 0x3c
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	1acb      	subs	r3, r1, r3
 800e4f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		if(send_len > DATA_BUF_SIZE - 1)
 800e4fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e4fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e502:	d304      	bcc.n	800e50e <send_http_response_body+0x11e>
		{
			send_len = DATA_BUF_SIZE - 1;
 800e504:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800e508:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e50c:	e002      	b.n	800e514 <send_http_response_body+0x124>
		{
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response end - file len [ %ld ]byte\r\n", s, HTTPSock_Status[get_seqnum].file_len);
#endif
			// Send process end
			flag_datasend_end = 1;
 800e50e:	2301      	movs	r3, #1
 800e510:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	//HTTPSock_Status[get_seqnum]->storage_type == SDCARD
	//HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH
	//HTTPSock_Status[get_seqnum]->storage_type == USERSPIFLASH
/*****************************************************/

	if(HTTPSock_Status[get_seqnum].storage_type == CODEFLASH)
 800e514:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e518:	495f      	ldr	r1, [pc, #380]	; (800e698 <send_http_response_body+0x2a8>)
 800e51a:	4613      	mov	r3, r2
 800e51c:	011b      	lsls	r3, r3, #4
 800e51e:	4413      	add	r3, r2
 800e520:	009b      	lsls	r3, r3, #2
 800e522:	440b      	add	r3, r1
 800e524:	3340      	adds	r3, #64	; 0x40
 800e526:	781b      	ldrb	r3, [r3, #0]
 800e528:	2b01      	cmp	r3, #1
 800e52a:	d129      	bne.n	800e580 <send_http_response_body+0x190>
	{
		if(HTTPSock_Status[get_seqnum].file_len) start_addr = HTTPSock_Status[get_seqnum].file_start;
 800e52c:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e530:	4959      	ldr	r1, [pc, #356]	; (800e698 <send_http_response_body+0x2a8>)
 800e532:	4613      	mov	r3, r2
 800e534:	011b      	lsls	r3, r3, #4
 800e536:	4413      	add	r3, r2
 800e538:	009b      	lsls	r3, r3, #2
 800e53a:	440b      	add	r3, r1
 800e53c:	3338      	adds	r3, #56	; 0x38
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d00a      	beq.n	800e55a <send_http_response_body+0x16a>
 800e544:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e548:	4953      	ldr	r1, [pc, #332]	; (800e698 <send_http_response_body+0x2a8>)
 800e54a:	4613      	mov	r3, r2
 800e54c:	011b      	lsls	r3, r3, #4
 800e54e:	4413      	add	r3, r2
 800e550:	009b      	lsls	r3, r3, #2
 800e552:	440b      	add	r3, r1
 800e554:	3334      	adds	r3, #52	; 0x34
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	603b      	str	r3, [r7, #0]
		read_userReg_webContent(start_addr, &buf[0], HTTPSock_Status[get_seqnum].file_offset, send_len);
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	b298      	uxth	r0, r3
 800e55e:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e562:	494d      	ldr	r1, [pc, #308]	; (800e698 <send_http_response_body+0x2a8>)
 800e564:	4613      	mov	r3, r2
 800e566:	011b      	lsls	r3, r3, #4
 800e568:	4413      	add	r3, r2
 800e56a:	009b      	lsls	r3, r3, #2
 800e56c:	440b      	add	r3, r1
 800e56e:	333c      	adds	r3, #60	; 0x3c
 800e570:	681a      	ldr	r2, [r3, #0]
 800e572:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e576:	b29b      	uxth	r3, r3
 800e578:	6879      	ldr	r1, [r7, #4]
 800e57a:	f000 fbc9 	bl	800ed10 <read_userReg_webContent>
 800e57e:	e035      	b.n	800e5ec <send_http_response_body+0x1fc>
	}

#ifdef _USE_USER_SPI_FLASH_
	else if(HTTPSock_Status[get_seqnum].storage_type == USERSPIFLASH){
 800e580:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e584:	4944      	ldr	r1, [pc, #272]	; (800e698 <send_http_response_body+0x2a8>)
 800e586:	4613      	mov	r3, r2
 800e588:	011b      	lsls	r3, r3, #4
 800e58a:	4413      	add	r3, r2
 800e58c:	009b      	lsls	r3, r3, #2
 800e58e:	440b      	add	r3, r1
 800e590:	3340      	adds	r3, #64	; 0x40
 800e592:	781b      	ldrb	r3, [r3, #0]
 800e594:	2b04      	cmp	r3, #4
 800e596:	d126      	bne.n	800e5e6 <send_http_response_body+0x1f6>


		memset(tmp_path, 0x0, PATH_BUF_SIZE);
 800e598:	f107 0310 	add.w	r3, r7, #16
 800e59c:	2280      	movs	r2, #128	; 0x80
 800e59e:	2100      	movs	r1, #0
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f00d fd81 	bl	801c0a8 <memset>
		strcpy((char *)tmp_path, HTTP_FS_DIR);
 800e5a6:	f107 0310 	add.w	r3, r7, #16
 800e5aa:	4a3c      	ldr	r2, [pc, #240]	; (800e69c <send_http_response_body+0x2ac>)
 800e5ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e5b0:	6018      	str	r0, [r3, #0]
 800e5b2:	3304      	adds	r3, #4
 800e5b4:	7019      	strb	r1, [r3, #0]
		strcat((char *)tmp_path, (const char *)uri_name);
 800e5b6:	f107 0310 	add.w	r3, r7, #16
 800e5ba:	68b9      	ldr	r1, [r7, #8]
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f00d fd7b 	bl	801c0b8 <strcat>
		spi_fs_read_file_offset((const char *)tmp_path, &buf[0], HTTPSock_Status[get_seqnum].file_offset, send_len);
 800e5c2:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e5c6:	4934      	ldr	r1, [pc, #208]	; (800e698 <send_http_response_body+0x2a8>)
 800e5c8:	4613      	mov	r3, r2
 800e5ca:	011b      	lsls	r3, r3, #4
 800e5cc:	4413      	add	r3, r2
 800e5ce:	009b      	lsls	r3, r3, #2
 800e5d0:	440b      	add	r3, r1
 800e5d2:	333c      	adds	r3, #60	; 0x3c
 800e5d4:	681a      	ldr	r2, [r3, #0]
 800e5d6:	f107 0010 	add.w	r0, r7, #16
 800e5da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e5de:	6879      	ldr	r1, [r7, #4]
 800e5e0:	f00b f910 	bl	8019804 <spi_fs_read_file_offset>
 800e5e4:	e002      	b.n	800e5ec <send_http_response_body+0x1fc>
		*(buf+send_len+1) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
	}
#endif
	else
	{
		send_len = 0;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	// Requested content send to HTTP client
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : [Send] HTTP Response body [ %ld ]byte\r\n", s, send_len);
#endif

	if(send_len) send(s, buf, send_len);
 800e5ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d008      	beq.n	800e606 <send_http_response_body+0x216>
 800e5f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e5f8:	b29a      	uxth	r2, r3
 800e5fa:	7bfb      	ldrb	r3, [r7, #15]
 800e5fc:	6879      	ldr	r1, [r7, #4]
 800e5fe:	4618      	mov	r0, r3
 800e600:	f7fa f8cc 	bl	800879c <send>
 800e604:	e002      	b.n	800e60c <send_http_response_body+0x21c>
	else flag_datasend_end = 1;
 800e606:	2301      	movs	r3, #1
 800e608:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

	if(flag_datasend_end)
 800e60c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800e610:	2b00      	cmp	r3, #0
 800e612:	d024      	beq.n	800e65e <send_http_response_body+0x26e>
	{
		HTTPSock_Status[get_seqnum].file_start = 0;
 800e614:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e618:	491f      	ldr	r1, [pc, #124]	; (800e698 <send_http_response_body+0x2a8>)
 800e61a:	4613      	mov	r3, r2
 800e61c:	011b      	lsls	r3, r3, #4
 800e61e:	4413      	add	r3, r2
 800e620:	009b      	lsls	r3, r3, #2
 800e622:	440b      	add	r3, r1
 800e624:	3334      	adds	r3, #52	; 0x34
 800e626:	2200      	movs	r2, #0
 800e628:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_len = 0;
 800e62a:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e62e:	491a      	ldr	r1, [pc, #104]	; (800e698 <send_http_response_body+0x2a8>)
 800e630:	4613      	mov	r3, r2
 800e632:	011b      	lsls	r3, r3, #4
 800e634:	4413      	add	r3, r2
 800e636:	009b      	lsls	r3, r3, #2
 800e638:	440b      	add	r3, r1
 800e63a:	3338      	adds	r3, #56	; 0x38
 800e63c:	2200      	movs	r2, #0
 800e63e:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_offset = 0;
 800e640:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e644:	4914      	ldr	r1, [pc, #80]	; (800e698 <send_http_response_body+0x2a8>)
 800e646:	4613      	mov	r3, r2
 800e648:	011b      	lsls	r3, r3, #4
 800e64a:	4413      	add	r3, r2
 800e64c:	009b      	lsls	r3, r3, #2
 800e64e:	440b      	add	r3, r1
 800e650:	333c      	adds	r3, #60	; 0x3c
 800e652:	2200      	movs	r2, #0
 800e654:	601a      	str	r2, [r3, #0]
		flag_datasend_end = 0;
 800e656:	2300      	movs	r3, #0
 800e658:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 800e65c:	e018      	b.n	800e690 <send_http_response_body+0x2a0>
	}
	else
	{
		HTTPSock_Status[get_seqnum].file_offset += send_len;
 800e65e:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e662:	490d      	ldr	r1, [pc, #52]	; (800e698 <send_http_response_body+0x2a8>)
 800e664:	4613      	mov	r3, r2
 800e666:	011b      	lsls	r3, r3, #4
 800e668:	4413      	add	r3, r2
 800e66a:	009b      	lsls	r3, r3, #2
 800e66c:	440b      	add	r3, r1
 800e66e:	333c      	adds	r3, #60	; 0x3c
 800e670:	6819      	ldr	r1, [r3, #0]
 800e672:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e676:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e67a:	4419      	add	r1, r3
 800e67c:	4806      	ldr	r0, [pc, #24]	; (800e698 <send_http_response_body+0x2a8>)
 800e67e:	4613      	mov	r3, r2
 800e680:	011b      	lsls	r3, r3, #4
 800e682:	4413      	add	r3, r2
 800e684:	009b      	lsls	r3, r3, #2
 800e686:	4403      	add	r3, r0
 800e688:	333c      	adds	r3, #60	; 0x3c
 800e68a:	6019      	str	r1, [r3, #0]
 800e68c:	e000      	b.n	800e690 <send_http_response_body+0x2a0>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 800e68e:	bf00      	nop
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
#ifdef _USE_SDCARD_
	f_close(&fs);
#endif
// ## 20141219 added end
}
 800e690:	3798      	adds	r7, #152	; 0x98
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}
 800e696:	bf00      	nop
 800e698:	200012a4 	.word	0x200012a4
 800e69c:	0802196c 	.word	0x0802196c

0800e6a0 <send_http_response_cgi>:

static void send_http_response_cgi(uint8_t s, uint8_t * buf, uint8_t * http_body, uint16_t file_len)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b088      	sub	sp, #32
 800e6a4:	af02      	add	r7, sp, #8
 800e6a6:	60b9      	str	r1, [r7, #8]
 800e6a8:	607a      	str	r2, [r7, #4]
 800e6aa:	461a      	mov	r2, r3
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	73fb      	strb	r3, [r7, #15]
 800e6b0:	4613      	mov	r3, r2
 800e6b2:	81bb      	strh	r3, [r7, #12]
	uint16_t send_len = 0;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	82fb      	strh	r3, [r7, #22]

#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - CGI\r\n", s);
#endif
	send_len = sprintf((char *)buf, "%s%d\r\n\r\n%s", RES_CGIHEAD_OK_CHANGED, file_len, http_body);
 800e6b8:	89ba      	ldrh	r2, [r7, #12]
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	9300      	str	r3, [sp, #0]
 800e6be:	4613      	mov	r3, r2
 800e6c0:	4a08      	ldr	r2, [pc, #32]	; (800e6e4 <send_http_response_cgi+0x44>)
 800e6c2:	4909      	ldr	r1, [pc, #36]	; (800e6e8 <send_http_response_cgi+0x48>)
 800e6c4:	68b8      	ldr	r0, [r7, #8]
 800e6c6:	f00d fb9f 	bl	801be08 <siprintf>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	82fb      	strh	r3, [r7, #22]
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - send len [ %d ]byte\r\n", s, send_len);
#endif

	send(s, buf, send_len);
 800e6ce:	8afa      	ldrh	r2, [r7, #22]
 800e6d0:	7bfb      	ldrb	r3, [r7, #15]
 800e6d2:	68b9      	ldr	r1, [r7, #8]
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f7fa f861 	bl	800879c <send>
}
 800e6da:	bf00      	nop
 800e6dc:	3718      	adds	r7, #24
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}
 800e6e2:	bf00      	nop
 800e6e4:	08021974 	.word	0x08021974
 800e6e8:	080219d0 	.word	0x080219d0

0800e6ec <http_disconnect>:


static int8_t http_disconnect(uint8_t sn)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	71fb      	strb	r3, [r7, #7]
	setSn_CR(sn,Sn_CR_DISCON);
 800e6f6:	79fb      	ldrb	r3, [r7, #7]
 800e6f8:	009b      	lsls	r3, r3, #2
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	00db      	lsls	r3, r3, #3
 800e6fe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e702:	2108      	movs	r1, #8
 800e704:	4618      	mov	r0, r3
 800e706:	f7f9 fa77 	bl	8007bf8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800e70a:	bf00      	nop
 800e70c:	79fb      	ldrb	r3, [r7, #7]
 800e70e:	009b      	lsls	r3, r3, #2
 800e710:	3301      	adds	r3, #1
 800e712:	00db      	lsls	r3, r3, #3
 800e714:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e718:	4618      	mov	r0, r3
 800e71a:	f7f9 fa21 	bl	8007b60 <WIZCHIP_READ>
 800e71e:	4603      	mov	r3, r0
 800e720:	2b00      	cmp	r3, #0
 800e722:	d1f3      	bne.n	800e70c <http_disconnect+0x20>

	return SOCK_OK;
 800e724:	2301      	movs	r3, #1
}
 800e726:	4618      	mov	r0, r3
 800e728:	3708      	adds	r7, #8
 800e72a:	46bd      	mov	sp, r7
 800e72c:	bd80      	pop	{r7, pc}
	...

0800e730 <http_process_handler>:


static void http_process_handler(uint8_t s, st_http_request * p_http_request)
{
 800e730:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e734:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 800e738:	af02      	add	r7, sp, #8
 800e73a:	4602      	mov	r2, r0
 800e73c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e740:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800e744:	6019      	str	r1, [r3, #0]
 800e746:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e74a:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 800e74e:	701a      	strb	r2, [r3, #0]
	uint8_t * uri_name;
	uint32_t content_addr = 0;
 800e750:	2300      	movs	r3, #0
 800e752:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	uint16_t content_num = 0;
 800e756:	2300      	movs	r3, #0
 800e758:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
	uint32_t file_len = 0;
 800e75c:	2300      	movs	r3, #0
 800e75e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208

	uint8_t uri_buf[MAX_URI_SIZE]={0x00, };
 800e762:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e766:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800e76a:	2200      	movs	r2, #0
 800e76c:	601a      	str	r2, [r3, #0]
 800e76e:	3304      	adds	r3, #4
 800e770:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 800e774:	2100      	movs	r1, #0
 800e776:	4618      	mov	r0, r3
 800e778:	f00d fc96 	bl	801c0a8 <memset>
	uint16_t http_status;
	int8_t get_seqnum;
	uint8_t content_found;

#ifdef _USE_USER_SPI_FLASH_
	int64_t err = 0;
 800e77c:	f04f 0200 	mov.w	r2, #0
 800e780:	f04f 0300 	mov.w	r3, #0
 800e784:	e9c7 2386 	strd	r2, r3, [r7, #536]	; 0x218
#endif

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 800e788:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e78c:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 800e790:	781b      	ldrb	r3, [r3, #0]
 800e792:	4618      	mov	r0, r3
 800e794:	f7ff fc06 	bl	800dfa4 <getHTTPSequenceNum>
 800e798:	4603      	mov	r3, r0
 800e79a:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 800e79e:	f997 3217 	ldrsb.w	r3, [r7, #535]	; 0x217
 800e7a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7a6:	f000 81e5 	beq.w	800eb74 <http_process_handler+0x444>

	http_status = 0;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
	http_response = pHTTP_RX;
 800e7b0:	4ba6      	ldr	r3, [pc, #664]	; (800ea4c <http_process_handler+0x31c>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	4aa6      	ldr	r2, [pc, #664]	; (800ea50 <http_process_handler+0x320>)
 800e7b6:	6013      	str	r3, [r2, #0]
	file_len = 0;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208


	//method Analyze
	switch (p_http_request->METHOD)
 800e7be:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e7c2:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	781b      	ldrb	r3, [r3, #0]
 800e7ca:	2b03      	cmp	r3, #3
 800e7cc:	f000 8154 	beq.w	800ea78 <http_process_handler+0x348>
 800e7d0:	2b03      	cmp	r3, #3
 800e7d2:	f300 81be 	bgt.w	800eb52 <http_process_handler+0x422>
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d007      	beq.n	800e7ea <http_process_handler+0xba>
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	f2c0 81b9 	blt.w	800eb52 <http_process_handler+0x422>
 800e7e0:	3b01      	subs	r3, #1
 800e7e2:	2b01      	cmp	r3, #1
 800e7e4:	f200 81b5 	bhi.w	800eb52 <http_process_handler+0x422>
 800e7e8:	e010      	b.n	800e80c <http_process_handler+0xdc>
	{
		case METHOD_ERR :
			http_status = STATUS_BAD_REQ;
 800e7ea:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800e7ee:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
			send_http_response_header(s, 0, 0, http_status);
 800e7f2:	f8b7 2222 	ldrh.w	r2, [r7, #546]	; 0x222
 800e7f6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e7fa:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 800e7fe:	7818      	ldrb	r0, [r3, #0]
 800e800:	4613      	mov	r3, r2
 800e802:	2200      	movs	r2, #0
 800e804:	2100      	movs	r1, #0
 800e806:	f7ff fd87 	bl	800e318 <send_http_response_header>
			break;
 800e80a:	e1b6      	b.n	800eb7a <http_process_handler+0x44a>

		case METHOD_HEAD :
		case METHOD_GET :
			get_http_uri_name(p_http_request->URI, uri_buf);
 800e80c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e810:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	3302      	adds	r3, #2
 800e818:	f107 0208 	add.w	r2, r7, #8
 800e81c:	4611      	mov	r1, r2
 800e81e:	4618      	mov	r0, r3
 800e820:	f7ff fad6 	bl	800ddd0 <get_http_uri_name>
			uri_name = uri_buf;
 800e824:	f107 0308 	add.w	r3, r7, #8
 800e828:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

			if (!strcmp((char *)uri_name, "/")) strcpy((char *)uri_name, INITIAL_WEBPAGE);	// If URI is "/", respond by index.html
 800e82c:	4989      	ldr	r1, [pc, #548]	; (800ea54 <http_process_handler+0x324>)
 800e82e:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 800e832:	f7f1 fcd5 	bl	80001e0 <strcmp>
 800e836:	4603      	mov	r3, r0
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d10b      	bne.n	800e854 <http_process_handler+0x124>
 800e83c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800e840:	4985      	ldr	r1, [pc, #532]	; (800ea58 <http_process_handler+0x328>)
 800e842:	461a      	mov	r2, r3
 800e844:	460b      	mov	r3, r1
 800e846:	cb03      	ldmia	r3!, {r0, r1}
 800e848:	6010      	str	r0, [r2, #0]
 800e84a:	6051      	str	r1, [r2, #4]
 800e84c:	8819      	ldrh	r1, [r3, #0]
 800e84e:	789b      	ldrb	r3, [r3, #2]
 800e850:	8111      	strh	r1, [r2, #8]
 800e852:	7293      	strb	r3, [r2, #10]
			if (!strcmp((char *)uri_name, "m")) strcpy((char *)uri_name, M_INITIAL_WEBPAGE);
 800e854:	4981      	ldr	r1, [pc, #516]	; (800ea5c <http_process_handler+0x32c>)
 800e856:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 800e85a:	f7f1 fcc1 	bl	80001e0 <strcmp>
 800e85e:	4603      	mov	r3, r0
 800e860:	2b00      	cmp	r3, #0
 800e862:	d10a      	bne.n	800e87a <http_process_handler+0x14a>
 800e864:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800e868:	4a7d      	ldr	r2, [pc, #500]	; (800ea60 <http_process_handler+0x330>)
 800e86a:	461c      	mov	r4, r3
 800e86c:	4613      	mov	r3, r2
 800e86e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e870:	6020      	str	r0, [r4, #0]
 800e872:	6061      	str	r1, [r4, #4]
 800e874:	60a2      	str	r2, [r4, #8]
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	7323      	strb	r3, [r4, #12]
			if (!strcmp((char *)uri_name, "mobile")) strcpy((char *)uri_name, MOBILE_INITIAL_WEBPAGE);
 800e87a:	497a      	ldr	r1, [pc, #488]	; (800ea64 <http_process_handler+0x334>)
 800e87c:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 800e880:	f7f1 fcae 	bl	80001e0 <strcmp>
 800e884:	4603      	mov	r3, r0
 800e886:	2b00      	cmp	r3, #0
 800e888:	d10b      	bne.n	800e8a2 <http_process_handler+0x172>
 800e88a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800e88e:	4a76      	ldr	r2, [pc, #472]	; (800ea68 <http_process_handler+0x338>)
 800e890:	461d      	mov	r5, r3
 800e892:	4614      	mov	r4, r2
 800e894:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e896:	6028      	str	r0, [r5, #0]
 800e898:	6069      	str	r1, [r5, #4]
 800e89a:	60aa      	str	r2, [r5, #8]
 800e89c:	60eb      	str	r3, [r5, #12]
 800e89e:	8823      	ldrh	r3, [r4, #0]
 800e8a0:	822b      	strh	r3, [r5, #16]
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Checking requested file types (HTML, TEXT, GIF, JPEG and Etc. are included)
 800e8a2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e8a6:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	3301      	adds	r3, #1
 800e8ae:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f7fe fffe 	bl	800d8b4 <find_http_uri_type>
			printf("\r\n> HTTPSocket[%d] : HTTP Method GET\r\n", s);
			printf("> HTTPSocket[%d] : Request Type = %d\r\n", s, p_http_request->TYPE);
			printf("> HTTPSocket[%d] : Request URI = %s\r\n", s, uri_name);
#endif

			if(p_http_request->TYPE == PTYPE_CGI)
 800e8b8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e8bc:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	785b      	ldrb	r3, [r3, #1]
 800e8c4:	2b08      	cmp	r3, #8
 800e8c6:	d131      	bne.n	800e92c <http_process_handler+0x1fc>
			{
				content_found = http_get_cgi_handler(uri_name, pHTTP_TX, &file_len);
 800e8c8:	4b68      	ldr	r3, [pc, #416]	; (800ea6c <http_process_handler+0x33c>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800e8d0:	4619      	mov	r1, r3
 800e8d2:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 800e8d6:	f000 fa59 	bl	800ed8c <http_get_cgi_handler>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK_CHANGED)+8))))
 800e8e0:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d015      	beq.n	800e914 <http_process_handler+0x1e4>
 800e8e8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800e8ec:	f240 729e 	movw	r2, #1950	; 0x79e
 800e8f0:	4293      	cmp	r3, r2
 800e8f2:	d80f      	bhi.n	800e914 <http_process_handler+0x1e4>
				{
					send_http_response_cgi(s, http_response, pHTTP_TX, (uint16_t)file_len);
 800e8f4:	4b56      	ldr	r3, [pc, #344]	; (800ea50 <http_process_handler+0x320>)
 800e8f6:	6819      	ldr	r1, [r3, #0]
 800e8f8:	4b5c      	ldr	r3, [pc, #368]	; (800ea6c <http_process_handler+0x33c>)
 800e8fa:	681a      	ldr	r2, [r3, #0]
 800e8fc:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800e900:	b29c      	uxth	r4, r3
 800e902:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e906:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 800e90a:	7818      	ldrb	r0, [r3, #0]
 800e90c:	4623      	mov	r3, r4
 800e90e:	f7ff fec7 	bl	800e6a0 <send_http_response_cgi>
				if(http_status == STATUS_OK)
				{
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
				}
			}
			break;
 800e912:	e131      	b.n	800eb78 <http_process_handler+0x448>
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 800e914:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e918:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 800e91c:	7818      	ldrb	r0, [r3, #0]
 800e91e:	f44f 73ca 	mov.w	r3, #404	; 0x194
 800e922:	2200      	movs	r2, #0
 800e924:	2108      	movs	r1, #8
 800e926:	f7ff fcf7 	bl	800e318 <send_http_response_header>
			break;
 800e92a:	e125      	b.n	800eb78 <http_process_handler+0x448>
				if(0 < ( err = spi_fs_serch_file_in_dir(HTTP_FS_DIR, (const char *)uri_name)))/* Read content from spi flash */
 800e92c:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 800e930:	484f      	ldr	r0, [pc, #316]	; (800ea70 <http_process_handler+0x340>)
 800e932:	f00b f843 	bl	80199bc <spi_fs_serch_file_in_dir>
 800e936:	4603      	mov	r3, r0
 800e938:	17da      	asrs	r2, r3, #31
 800e93a:	4698      	mov	r8, r3
 800e93c:	4691      	mov	r9, r2
 800e93e:	e9c7 8986 	strd	r8, r9, [r7, #536]	; 0x218
 800e942:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 800e946:	2a01      	cmp	r2, #1
 800e948:	f173 0300 	sbcs.w	r3, r3, #0
 800e94c:	db12      	blt.n	800e974 <http_process_handler+0x244>
					file_len = err;
 800e94e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800e952:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
					content_found = 1;
 800e956:	2301      	movs	r3, #1
 800e958:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
					HTTPSock_Status[get_seqnum].storage_type = USERSPIFLASH;
 800e95c:	f997 2217 	ldrsb.w	r2, [r7, #535]	; 0x217
 800e960:	4944      	ldr	r1, [pc, #272]	; (800ea74 <http_process_handler+0x344>)
 800e962:	4613      	mov	r3, r2
 800e964:	011b      	lsls	r3, r3, #4
 800e966:	4413      	add	r3, r2
 800e968:	009b      	lsls	r3, r3, #2
 800e96a:	440b      	add	r3, r1
 800e96c:	3340      	adds	r3, #64	; 0x40
 800e96e:	2204      	movs	r2, #4
 800e970:	701a      	strb	r2, [r3, #0]
 800e972:	e024      	b.n	800e9be <http_process_handler+0x28e>
				else if(find_userReg_webContent(uri_buf, &content_num, &file_len))
 800e974:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800e978:	f207 210e 	addw	r1, r7, #526	; 0x20e
 800e97c:	f107 0308 	add.w	r3, r7, #8
 800e980:	4618      	mov	r0, r3
 800e982:	f000 f989 	bl	800ec98 <find_userReg_webContent>
 800e986:	4603      	mov	r3, r0
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d012      	beq.n	800e9b2 <http_process_handler+0x282>
					content_found = 1; // Web content found in code flash memory
 800e98c:	2301      	movs	r3, #1
 800e98e:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
					content_addr = (uint32_t)content_num;
 800e992:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800e996:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
					HTTPSock_Status[get_seqnum].storage_type = CODEFLASH;
 800e99a:	f997 2217 	ldrsb.w	r2, [r7, #535]	; 0x217
 800e99e:	4935      	ldr	r1, [pc, #212]	; (800ea74 <http_process_handler+0x344>)
 800e9a0:	4613      	mov	r3, r2
 800e9a2:	011b      	lsls	r3, r3, #4
 800e9a4:	4413      	add	r3, r2
 800e9a6:	009b      	lsls	r3, r3, #2
 800e9a8:	440b      	add	r3, r1
 800e9aa:	3340      	adds	r3, #64	; 0x40
 800e9ac:	2201      	movs	r2, #1
 800e9ae:	701a      	strb	r2, [r3, #0]
 800e9b0:	e005      	b.n	800e9be <http_process_handler+0x28e>
					content_found = 0; // fail to find content
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
					file_len = 0;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
				if(!content_found)
 800e9be:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d111      	bne.n	800e9ea <http_process_handler+0x2ba>
					if (!strcmp((char *)uri_name, INITIAL_WEBPAGE)){
 800e9c6:	4924      	ldr	r1, [pc, #144]	; (800ea58 <http_process_handler+0x328>)
 800e9c8:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 800e9cc:	f7f1 fc08 	bl	80001e0 <strcmp>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d104      	bne.n	800e9e0 <http_process_handler+0x2b0>
						http_status = STATUS_NOT_FOUND;
 800e9d6:	f44f 73ca 	mov.w	r3, #404	; 0x194
 800e9da:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
 800e9de:	e007      	b.n	800e9f0 <http_process_handler+0x2c0>
						http_status = STATUS_MV_TEMP;
 800e9e0:	f44f 7397 	mov.w	r3, #302	; 0x12e
 800e9e4:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
 800e9e8:	e002      	b.n	800e9f0 <http_process_handler+0x2c0>
					http_status = STATUS_OK;
 800e9ea:	23c8      	movs	r3, #200	; 0xc8
 800e9ec:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
				if(http_status)
 800e9f0:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d011      	beq.n	800ea1c <http_process_handler+0x2ec>
					send_http_response_header(s, p_http_request->TYPE, file_len, http_status);
 800e9f8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e9fc:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	7859      	ldrb	r1, [r3, #1]
 800ea04:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 800ea08:	f8b7 4222 	ldrh.w	r4, [r7, #546]	; 0x222
 800ea0c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800ea10:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 800ea14:	7818      	ldrb	r0, [r3, #0]
 800ea16:	4623      	mov	r3, r4
 800ea18:	f7ff fc7e 	bl	800e318 <send_http_response_header>
				if(http_status == STATUS_OK)
 800ea1c:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 800ea20:	2bc8      	cmp	r3, #200	; 0xc8
 800ea22:	f040 80a9 	bne.w	800eb78 <http_process_handler+0x448>
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
 800ea26:	4b0a      	ldr	r3, [pc, #40]	; (800ea50 <http_process_handler+0x320>)
 800ea28:	6819      	ldr	r1, [r3, #0]
 800ea2a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800ea2e:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800ea32:	f2a2 2221 	subw	r2, r2, #545	; 0x221
 800ea36:	7810      	ldrb	r0, [r2, #0]
 800ea38:	9300      	str	r3, [sp, #0]
 800ea3a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800ea3e:	460a      	mov	r2, r1
 800ea40:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 800ea44:	f7ff fcd4 	bl	800e3f0 <send_http_response_body>
			break;
 800ea48:	e096      	b.n	800eb78 <http_process_handler+0x448>
 800ea4a:	bf00      	nop
 800ea4c:	2000129c 	.word	0x2000129c
 800ea50:	200011c8 	.word	0x200011c8
 800ea54:	080219dc 	.word	0x080219dc
 800ea58:	080219e0 	.word	0x080219e0
 800ea5c:	080219ec 	.word	0x080219ec
 800ea60:	080219f0 	.word	0x080219f0
 800ea64:	08021a00 	.word	0x08021a00
 800ea68:	08021a08 	.word	0x08021a08
 800ea6c:	20001298 	.word	0x20001298
 800ea70:	0802196c 	.word	0x0802196c
 800ea74:	200012a4 	.word	0x200012a4

		case METHOD_POST :
			mid((char *)p_http_request->URI, "/", " HTTP", (char *)uri_buf);
 800ea78:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800ea7c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	1c98      	adds	r0, r3, #2
 800ea84:	f107 0308 	add.w	r3, r7, #8
 800ea88:	4a3e      	ldr	r2, [pc, #248]	; (800eb84 <http_process_handler+0x454>)
 800ea8a:	493f      	ldr	r1, [pc, #252]	; (800eb88 <http_process_handler+0x458>)
 800ea8c:	f7ff f9ef 	bl	800de6e <mid>
			uri_name = uri_buf;
 800ea90:	f107 0308 	add.w	r3, r7, #8
 800ea94:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Check file type (HTML, TEXT, GIF, JPEG are included)
 800ea98:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800ea9c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f7fe ff03 	bl	800d8b4 <find_http_uri_type>
			printf("\r\n> HTTPSocket[%d] : HTTP Method POST\r\n", s);
			printf("> HTTPSocket[%d] : Request URI = %s ", s, uri_name);
			printf("Type = %d\r\n", p_http_request->TYPE);
#endif

			if(p_http_request->TYPE == PTYPE_CGI)	// HTTP POST Method; CGI Process
 800eaae:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800eab2:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	785b      	ldrb	r3, [r3, #1]
 800eaba:	2b08      	cmp	r3, #8
 800eabc:	d13c      	bne.n	800eb38 <http_process_handler+0x408>
			{
				content_found = http_post_cgi_handler(uri_name, p_http_request, http_response, &file_len);
 800eabe:	4b33      	ldr	r3, [pc, #204]	; (800eb8c <http_process_handler+0x45c>)
 800eac0:	681a      	ldr	r2, [r3, #0]
 800eac2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800eac6:	f507 710a 	add.w	r1, r7, #552	; 0x228
 800eaca:	f5a1 710a 	sub.w	r1, r1, #552	; 0x228
 800eace:	6809      	ldr	r1, [r1, #0]
 800ead0:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 800ead4:	f000 f988 	bl	800ede8 <http_post_cgi_handler>
 800ead8:	4603      	mov	r3, r0
 800eada:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : [CGI: %s] / Response len [ %ld ]byte\r\n", s, content_found?"Content found":"Content not found", file_len);
#endif
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK)+8))))
 800eade:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d01c      	beq.n	800eb20 <http_process_handler+0x3f0>
 800eae6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800eaea:	f240 72be 	movw	r2, #1982	; 0x7be
 800eaee:	4293      	cmp	r3, r2
 800eaf0:	d816      	bhi.n	800eb20 <http_process_handler+0x3f0>
				{
					send_http_response_cgi(s, pHTTP_TX, http_response, (uint16_t)file_len);
 800eaf2:	4b27      	ldr	r3, [pc, #156]	; (800eb90 <http_process_handler+0x460>)
 800eaf4:	6819      	ldr	r1, [r3, #0]
 800eaf6:	4b25      	ldr	r3, [pc, #148]	; (800eb8c <http_process_handler+0x45c>)
 800eaf8:	681a      	ldr	r2, [r3, #0]
 800eafa:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800eafe:	b29c      	uxth	r4, r3
 800eb00:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800eb04:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 800eb08:	7818      	ldrb	r0, [r3, #0]
 800eb0a:	4623      	mov	r3, r4
 800eb0c:	f7ff fdc8 	bl	800e6a0 <send_http_response_cgi>
					//TODO, maybefix
					//http_disconnect(s);

					// Reset the H/W for apply to the change configuration information
					if(content_found == HTTP_RESET) HTTPServer_ReStart();
 800eb10:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 800eb14:	2b02      	cmp	r3, #2
 800eb16:	d11b      	bne.n	800eb50 <http_process_handler+0x420>
 800eb18:	4b1e      	ldr	r3, [pc, #120]	; (800eb94 <http_process_handler+0x464>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	4798      	blx	r3
 800eb1e:	e017      	b.n	800eb50 <http_process_handler+0x420>
				}
				else
				{
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 800eb20:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800eb24:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 800eb28:	7818      	ldrb	r0, [r3, #0]
 800eb2a:	f44f 73ca 	mov.w	r3, #404	; 0x194
 800eb2e:	2200      	movs	r2, #0
 800eb30:	2108      	movs	r1, #8
 800eb32:	f7ff fbf1 	bl	800e318 <send_http_response_header>
			}
			else	// HTTP POST Method; Content not found
			{
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
			}
			break;
 800eb36:	e020      	b.n	800eb7a <http_process_handler+0x44a>
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
 800eb38:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800eb3c:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 800eb40:	7818      	ldrb	r0, [r3, #0]
 800eb42:	f44f 73ca 	mov.w	r3, #404	; 0x194
 800eb46:	2200      	movs	r2, #0
 800eb48:	2100      	movs	r1, #0
 800eb4a:	f7ff fbe5 	bl	800e318 <send_http_response_header>
			break;
 800eb4e:	e014      	b.n	800eb7a <http_process_handler+0x44a>
 800eb50:	e013      	b.n	800eb7a <http_process_handler+0x44a>

		default :
			http_status = STATUS_BAD_REQ;
 800eb52:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800eb56:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
			send_http_response_header(s, 0, 0, http_status);
 800eb5a:	f8b7 2222 	ldrh.w	r2, [r7, #546]	; 0x222
 800eb5e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800eb62:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 800eb66:	7818      	ldrb	r0, [r3, #0]
 800eb68:	4613      	mov	r3, r2
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	2100      	movs	r1, #0
 800eb6e:	f7ff fbd3 	bl	800e318 <send_http_response_header>
			break;
 800eb72:	e002      	b.n	800eb7a <http_process_handler+0x44a>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 800eb74:	bf00      	nop
 800eb76:	e000      	b.n	800eb7a <http_process_handler+0x44a>
			break;
 800eb78:	bf00      	nop
	}
}
 800eb7a:	f507 770a 	add.w	r7, r7, #552	; 0x228
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800eb84:	08021a1c 	.word	0x08021a1c
 800eb88:	080219dc 	.word	0x080219dc
 800eb8c:	200011c8 	.word	0x200011c8
 800eb90:	20001298 	.word	0x20001298
 800eb94:	20000120 	.word	0x20000120

0800eb98 <httpServer_time_handler>:

void httpServer_time_handler(void)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	af00      	add	r7, sp, #0
	httpServer_tick_1s++;
 800eb9c:	4b04      	ldr	r3, [pc, #16]	; (800ebb0 <httpServer_time_handler+0x18>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	3301      	adds	r3, #1
 800eba2:	4a03      	ldr	r2, [pc, #12]	; (800ebb0 <httpServer_time_handler+0x18>)
 800eba4:	6013      	str	r3, [r2, #0]
}
 800eba6:	bf00      	nop
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr
 800ebb0:	200012a0 	.word	0x200012a0

0800ebb4 <get_httpServer_timecount>:

uint32_t get_httpServer_timecount(void)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	af00      	add	r7, sp, #0
	delay_os_ms(1);
 800ebb8:	4b03      	ldr	r3, [pc, #12]	; (800ebc8 <get_httpServer_timecount+0x14>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	2001      	movs	r0, #1
 800ebbe:	4798      	blx	r3
	return httpServer_tick_1s;
 800ebc0:	4b02      	ldr	r3, [pc, #8]	; (800ebcc <get_httpServer_timecount+0x18>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	bd80      	pop	{r7, pc}
 800ebc8:	20000124 	.word	0x20000124
 800ebcc:	200012a0 	.word	0x200012a0

0800ebd0 <reg_httpServer_webContent>:



void reg_httpServer_webContent(uint8_t * content_name, uint8_t * content)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b084      	sub	sp, #16
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	6039      	str	r1, [r7, #0]
	uint16_t name_len;
	uint32_t content_len;

	if(content_name == NULL || content == NULL)
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d04e      	beq.n	800ec7e <reg_httpServer_webContent+0xae>
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d04b      	beq.n	800ec7e <reg_httpServer_webContent+0xae>
	{
		return;
	}
	else if(total_content_cnt >= MAX_CONTENT_CALLBACK)
 800ebe6:	4b29      	ldr	r3, [pc, #164]	; (800ec8c <reg_httpServer_webContent+0xbc>)
 800ebe8:	881b      	ldrh	r3, [r3, #0]
 800ebea:	2b03      	cmp	r3, #3
 800ebec:	d849      	bhi.n	800ec82 <reg_httpServer_webContent+0xb2>
	{
		return;
	}

	name_len = strlen((char *)content_name);
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f7f1 fb56 	bl	80002a0 <strlen>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	81fb      	strh	r3, [r7, #14]
	content_len = strlen((char *)content);
 800ebf8:	6838      	ldr	r0, [r7, #0]
 800ebfa:	f7f1 fb51 	bl	80002a0 <strlen>
 800ebfe:	60b8      	str	r0, [r7, #8]

	//web_content[total_content_cnt].content_name = malloc(name_len+1);//todo only for test
	web_content[total_content_cnt].content_name = &content_name_massive[total_content_cnt];
 800ec00:	4b22      	ldr	r3, [pc, #136]	; (800ec8c <reg_httpServer_webContent+0xbc>)
 800ec02:	881b      	ldrh	r3, [r3, #0]
 800ec04:	461a      	mov	r2, r3
 800ec06:	4b21      	ldr	r3, [pc, #132]	; (800ec8c <reg_httpServer_webContent+0xbc>)
 800ec08:	881b      	ldrh	r3, [r3, #0]
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	2332      	movs	r3, #50	; 0x32
 800ec0e:	fb02 f303 	mul.w	r3, r2, r3
 800ec12:	4a1f      	ldr	r2, [pc, #124]	; (800ec90 <reg_httpServer_webContent+0xc0>)
 800ec14:	441a      	add	r2, r3
 800ec16:	491f      	ldr	r1, [pc, #124]	; (800ec94 <reg_httpServer_webContent+0xc4>)
 800ec18:	4603      	mov	r3, r0
 800ec1a:	005b      	lsls	r3, r3, #1
 800ec1c:	4403      	add	r3, r0
 800ec1e:	009b      	lsls	r3, r3, #2
 800ec20:	440b      	add	r3, r1
 800ec22:	601a      	str	r2, [r3, #0]
	strcpy((char *)web_content[total_content_cnt].content_name, (const char *)content_name);
 800ec24:	4b19      	ldr	r3, [pc, #100]	; (800ec8c <reg_httpServer_webContent+0xbc>)
 800ec26:	881b      	ldrh	r3, [r3, #0]
 800ec28:	4619      	mov	r1, r3
 800ec2a:	4a1a      	ldr	r2, [pc, #104]	; (800ec94 <reg_httpServer_webContent+0xc4>)
 800ec2c:	460b      	mov	r3, r1
 800ec2e:	005b      	lsls	r3, r3, #1
 800ec30:	440b      	add	r3, r1
 800ec32:	009b      	lsls	r3, r3, #2
 800ec34:	4413      	add	r3, r2
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	6879      	ldr	r1, [r7, #4]
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f00d fc01 	bl	801c442 <strcpy>
	web_content[total_content_cnt].content_len = content_len;
 800ec40:	4b12      	ldr	r3, [pc, #72]	; (800ec8c <reg_httpServer_webContent+0xbc>)
 800ec42:	881b      	ldrh	r3, [r3, #0]
 800ec44:	4619      	mov	r1, r3
 800ec46:	4a13      	ldr	r2, [pc, #76]	; (800ec94 <reg_httpServer_webContent+0xc4>)
 800ec48:	460b      	mov	r3, r1
 800ec4a:	005b      	lsls	r3, r3, #1
 800ec4c:	440b      	add	r3, r1
 800ec4e:	009b      	lsls	r3, r3, #2
 800ec50:	4413      	add	r3, r2
 800ec52:	3304      	adds	r3, #4
 800ec54:	68ba      	ldr	r2, [r7, #8]
 800ec56:	601a      	str	r2, [r3, #0]
	web_content[total_content_cnt].content = content;
 800ec58:	4b0c      	ldr	r3, [pc, #48]	; (800ec8c <reg_httpServer_webContent+0xbc>)
 800ec5a:	881b      	ldrh	r3, [r3, #0]
 800ec5c:	4619      	mov	r1, r3
 800ec5e:	4a0d      	ldr	r2, [pc, #52]	; (800ec94 <reg_httpServer_webContent+0xc4>)
 800ec60:	460b      	mov	r3, r1
 800ec62:	005b      	lsls	r3, r3, #1
 800ec64:	440b      	add	r3, r1
 800ec66:	009b      	lsls	r3, r3, #2
 800ec68:	4413      	add	r3, r2
 800ec6a:	3308      	adds	r3, #8
 800ec6c:	683a      	ldr	r2, [r7, #0]
 800ec6e:	601a      	str	r2, [r3, #0]

	total_content_cnt++;
 800ec70:	4b06      	ldr	r3, [pc, #24]	; (800ec8c <reg_httpServer_webContent+0xbc>)
 800ec72:	881b      	ldrh	r3, [r3, #0]
 800ec74:	3301      	adds	r3, #1
 800ec76:	b29a      	uxth	r2, r3
 800ec78:	4b04      	ldr	r3, [pc, #16]	; (800ec8c <reg_httpServer_webContent+0xbc>)
 800ec7a:	801a      	strh	r2, [r3, #0]
 800ec7c:	e002      	b.n	800ec84 <reg_httpServer_webContent+0xb4>
		return;
 800ec7e:	bf00      	nop
 800ec80:	e000      	b.n	800ec84 <reg_httpServer_webContent+0xb4>
		return;
 800ec82:	bf00      	nop
}
 800ec84:	3710      	adds	r7, #16
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}
 800ec8a:	bf00      	nop
 800ec8c:	20001294 	.word	0x20001294
 800ec90:	200011cc 	.word	0x200011cc
 800ec94:	200014c4 	.word	0x200014c4

0800ec98 <find_userReg_webContent>:

	return ret;
}

uint8_t find_userReg_webContent(uint8_t * content_name, uint16_t * content_num, uint32_t * file_len)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b086      	sub	sp, #24
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	60f8      	str	r0, [r7, #12]
 800eca0:	60b9      	str	r1, [r7, #8]
 800eca2:	607a      	str	r2, [r7, #4]
	uint16_t i;
	uint8_t ret = 0; // '0' means 'File Not Found'
 800eca4:	2300      	movs	r3, #0
 800eca6:	757b      	strb	r3, [r7, #21]

	for(i = 0; i < total_content_cnt; i++)
 800eca8:	2300      	movs	r3, #0
 800ecaa:	82fb      	strh	r3, [r7, #22]
 800ecac:	e022      	b.n	800ecf4 <find_userReg_webContent+0x5c>
	{
		if(!strcmp((char *)content_name, (char *)web_content[i].content_name))
 800ecae:	8afa      	ldrh	r2, [r7, #22]
 800ecb0:	4915      	ldr	r1, [pc, #84]	; (800ed08 <find_userReg_webContent+0x70>)
 800ecb2:	4613      	mov	r3, r2
 800ecb4:	005b      	lsls	r3, r3, #1
 800ecb6:	4413      	add	r3, r2
 800ecb8:	009b      	lsls	r3, r3, #2
 800ecba:	440b      	add	r3, r1
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	4619      	mov	r1, r3
 800ecc0:	68f8      	ldr	r0, [r7, #12]
 800ecc2:	f7f1 fa8d 	bl	80001e0 <strcmp>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d110      	bne.n	800ecee <find_userReg_webContent+0x56>
		{
			*file_len = web_content[i].content_len;
 800eccc:	8afa      	ldrh	r2, [r7, #22]
 800ecce:	490e      	ldr	r1, [pc, #56]	; (800ed08 <find_userReg_webContent+0x70>)
 800ecd0:	4613      	mov	r3, r2
 800ecd2:	005b      	lsls	r3, r3, #1
 800ecd4:	4413      	add	r3, r2
 800ecd6:	009b      	lsls	r3, r3, #2
 800ecd8:	440b      	add	r3, r1
 800ecda:	3304      	adds	r3, #4
 800ecdc:	681a      	ldr	r2, [r3, #0]
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	601a      	str	r2, [r3, #0]
			*content_num = i;
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	8afa      	ldrh	r2, [r7, #22]
 800ece6:	801a      	strh	r2, [r3, #0]
			ret = 1; // If the requested content found, ret set to '1' (Found)
 800ece8:	2301      	movs	r3, #1
 800ecea:	757b      	strb	r3, [r7, #21]
			break;
 800ecec:	e007      	b.n	800ecfe <find_userReg_webContent+0x66>
	for(i = 0; i < total_content_cnt; i++)
 800ecee:	8afb      	ldrh	r3, [r7, #22]
 800ecf0:	3301      	adds	r3, #1
 800ecf2:	82fb      	strh	r3, [r7, #22]
 800ecf4:	4b05      	ldr	r3, [pc, #20]	; (800ed0c <find_userReg_webContent+0x74>)
 800ecf6:	881b      	ldrh	r3, [r3, #0]
 800ecf8:	8afa      	ldrh	r2, [r7, #22]
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	d3d7      	bcc.n	800ecae <find_userReg_webContent+0x16>
		}
	}
	return ret;
 800ecfe:	7d7b      	ldrb	r3, [r7, #21]
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	3718      	adds	r7, #24
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}
 800ed08:	200014c4 	.word	0x200014c4
 800ed0c:	20001294 	.word	0x20001294

0800ed10 <read_userReg_webContent>:


uint16_t read_userReg_webContent(uint16_t content_num, uint8_t * buf, uint32_t offset, uint16_t size)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b086      	sub	sp, #24
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	60b9      	str	r1, [r7, #8]
 800ed18:	607a      	str	r2, [r7, #4]
 800ed1a:	461a      	mov	r2, r3
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	81fb      	strh	r3, [r7, #14]
 800ed20:	4613      	mov	r3, r2
 800ed22:	81bb      	strh	r3, [r7, #12]
	uint16_t ret = 0;
 800ed24:	2300      	movs	r3, #0
 800ed26:	827b      	strh	r3, [r7, #18]
	uint8_t * ptr;

	if(content_num > total_content_cnt) return 0;
 800ed28:	4b16      	ldr	r3, [pc, #88]	; (800ed84 <read_userReg_webContent+0x74>)
 800ed2a:	881b      	ldrh	r3, [r3, #0]
 800ed2c:	89fa      	ldrh	r2, [r7, #14]
 800ed2e:	429a      	cmp	r2, r3
 800ed30:	d901      	bls.n	800ed36 <read_userReg_webContent+0x26>
 800ed32:	2300      	movs	r3, #0
 800ed34:	e021      	b.n	800ed7a <read_userReg_webContent+0x6a>

	ptr = web_content[content_num].content;
 800ed36:	89fa      	ldrh	r2, [r7, #14]
 800ed38:	4913      	ldr	r1, [pc, #76]	; (800ed88 <read_userReg_webContent+0x78>)
 800ed3a:	4613      	mov	r3, r2
 800ed3c:	005b      	lsls	r3, r3, #1
 800ed3e:	4413      	add	r3, r2
 800ed40:	009b      	lsls	r3, r3, #2
 800ed42:	440b      	add	r3, r1
 800ed44:	3308      	adds	r3, #8
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	617b      	str	r3, [r7, #20]
	if(offset) ptr += offset;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d003      	beq.n	800ed58 <read_userReg_webContent+0x48>
 800ed50:	697a      	ldr	r2, [r7, #20]
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	4413      	add	r3, r2
 800ed56:	617b      	str	r3, [r7, #20]

	strncpy((char *)buf, (char *)ptr, size);
 800ed58:	89bb      	ldrh	r3, [r7, #12]
 800ed5a:	461a      	mov	r2, r3
 800ed5c:	6979      	ldr	r1, [r7, #20]
 800ed5e:	68b8      	ldr	r0, [r7, #8]
 800ed60:	f00d f9fc 	bl	801c15c <strncpy>
	*(buf+size) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
 800ed64:	89bb      	ldrh	r3, [r7, #12]
 800ed66:	68ba      	ldr	r2, [r7, #8]
 800ed68:	4413      	add	r3, r2
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	701a      	strb	r2, [r3, #0]

	ret = strlen((void *)buf);
 800ed6e:	68b8      	ldr	r0, [r7, #8]
 800ed70:	f7f1 fa96 	bl	80002a0 <strlen>
 800ed74:	4603      	mov	r3, r0
 800ed76:	827b      	strh	r3, [r7, #18]
	return ret;
 800ed78:	8a7b      	ldrh	r3, [r7, #18]
}
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	3718      	adds	r7, #24
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bd80      	pop	{r7, pc}
 800ed82:	bf00      	nop
 800ed84:	20001294 	.word	0x20001294
 800ed88:	200014c4 	.word	0x200014c4

0800ed8c <http_get_cgi_handler>:

uint8_t (*predefined_set_cgi_processor)(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len);
uint8_t (*predefined_get_cgi_processor)(uint8_t * uri_name, uint8_t * buf, uint16_t * len);

uint8_t http_get_cgi_handler(uint8_t * uri_name, uint8_t * buf, uint32_t * file_len)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b086      	sub	sp, #24
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	60f8      	str	r0, [r7, #12]
 800ed94:	60b9      	str	r1, [r7, #8]
 800ed96:	607a      	str	r2, [r7, #4]
	uint8_t ret = HTTP_OK;
 800ed98:	2301      	movs	r3, #1
 800ed9a:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	82bb      	strh	r3, [r7, #20]

	if(predefined_get_cgi_processor(uri_name, buf, &len))
 800eda0:	4b0f      	ldr	r3, [pc, #60]	; (800ede0 <http_get_cgi_handler+0x54>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	f107 0214 	add.w	r2, r7, #20
 800eda8:	68b9      	ldr	r1, [r7, #8]
 800edaa:	68f8      	ldr	r0, [r7, #12]
 800edac:	4798      	blx	r3
 800edae:	4603      	mov	r3, r0
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d108      	bne.n	800edc6 <http_get_cgi_handler+0x3a>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 800edb4:	490b      	ldr	r1, [pc, #44]	; (800ede4 <http_get_cgi_handler+0x58>)
 800edb6:	68f8      	ldr	r0, [r7, #12]
 800edb8:	f7f1 fa12 	bl	80001e0 <strcmp>
 800edbc:	4603      	mov	r3, r0
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d001      	beq.n	800edc6 <http_get_cgi_handler+0x3a>
		;
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 800edc2:	2300      	movs	r3, #0
 800edc4:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 800edc6:	7dfb      	ldrb	r3, [r7, #23]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d003      	beq.n	800edd4 <http_get_cgi_handler+0x48>
 800edcc:	8abb      	ldrh	r3, [r7, #20]
 800edce:	461a      	mov	r2, r3
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	601a      	str	r2, [r3, #0]
	return ret;
 800edd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3718      	adds	r7, #24
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}
 800edde:	bf00      	nop
 800ede0:	200014f8 	.word	0x200014f8
 800ede4:	08021ad4 	.word	0x08021ad4

0800ede8 <http_post_cgi_handler>:

uint8_t http_post_cgi_handler(uint8_t * uri_name, st_http_request * p_http_request, uint8_t * buf, uint32_t * file_len)
{
 800ede8:	b590      	push	{r4, r7, lr}
 800edea:	b087      	sub	sp, #28
 800edec:	af00      	add	r7, sp, #0
 800edee:	60f8      	str	r0, [r7, #12]
 800edf0:	60b9      	str	r1, [r7, #8]
 800edf2:	607a      	str	r2, [r7, #4]
 800edf4:	603b      	str	r3, [r7, #0]
	uint8_t ret = HTTP_OK;
 800edf6:	2301      	movs	r3, #1
 800edf8:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 800edfa:	2300      	movs	r3, #0
 800edfc:	82bb      	strh	r3, [r7, #20]
	uint8_t val = 0;
 800edfe:	2300      	movs	r3, #0
 800ee00:	75bb      	strb	r3, [r7, #22]

	if(predefined_set_cgi_processor(uri_name, p_http_request->URI, buf, &len))
 800ee02:	4b20      	ldr	r3, [pc, #128]	; (800ee84 <http_post_cgi_handler+0x9c>)
 800ee04:	681c      	ldr	r4, [r3, #0]
 800ee06:	68bb      	ldr	r3, [r7, #8]
 800ee08:	1c99      	adds	r1, r3, #2
 800ee0a:	f107 0314 	add.w	r3, r7, #20
 800ee0e:	687a      	ldr	r2, [r7, #4]
 800ee10:	68f8      	ldr	r0, [r7, #12]
 800ee12:	47a0      	blx	r4
 800ee14:	4603      	mov	r3, r0
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d127      	bne.n	800ee6a <http_post_cgi_handler+0x82>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 800ee1a:	491b      	ldr	r1, [pc, #108]	; (800ee88 <http_post_cgi_handler+0xa0>)
 800ee1c:	68f8      	ldr	r0, [r7, #12]
 800ee1e:	f7f1 f9df 	bl	80001e0 <strcmp>
 800ee22:	4603      	mov	r3, r0
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d10b      	bne.n	800ee40 <http_post_cgi_handler+0x58>
	{
		// To do
		val = 1;
 800ee28:	2301      	movs	r3, #1
 800ee2a:	75bb      	strb	r3, [r7, #22]
		len = sprintf((char *)buf, "%d", val);
 800ee2c:	7dbb      	ldrb	r3, [r7, #22]
 800ee2e:	461a      	mov	r2, r3
 800ee30:	4916      	ldr	r1, [pc, #88]	; (800ee8c <http_post_cgi_handler+0xa4>)
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f00c ffe8 	bl	801be08 <siprintf>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	b29b      	uxth	r3, r3
 800ee3c:	82bb      	strh	r3, [r7, #20]
 800ee3e:	e014      	b.n	800ee6a <http_post_cgi_handler+0x82>
	}
	else if(strcmp((const char *)uri_name, "settings_MQTT.cgi") == 0)
 800ee40:	4913      	ldr	r1, [pc, #76]	; (800ee90 <http_post_cgi_handler+0xa8>)
 800ee42:	68f8      	ldr	r0, [r7, #12]
 800ee44:	f7f1 f9cc 	bl	80001e0 <strcmp>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d10b      	bne.n	800ee66 <http_post_cgi_handler+0x7e>
	{
		// To do
		val = 1;
 800ee4e:	2301      	movs	r3, #1
 800ee50:	75bb      	strb	r3, [r7, #22]
		len = sprintf((char *)buf, "%d", val);
 800ee52:	7dbb      	ldrb	r3, [r7, #22]
 800ee54:	461a      	mov	r2, r3
 800ee56:	490d      	ldr	r1, [pc, #52]	; (800ee8c <http_post_cgi_handler+0xa4>)
 800ee58:	6878      	ldr	r0, [r7, #4]
 800ee5a:	f00c ffd5 	bl	801be08 <siprintf>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	b29b      	uxth	r3, r3
 800ee62:	82bb      	strh	r3, [r7, #20]
 800ee64:	e001      	b.n	800ee6a <http_post_cgi_handler+0x82>
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 800ee66:	2300      	movs	r3, #0
 800ee68:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 800ee6a:	7dfb      	ldrb	r3, [r7, #23]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d003      	beq.n	800ee78 <http_post_cgi_handler+0x90>
 800ee70:	8abb      	ldrh	r3, [r7, #20]
 800ee72:	461a      	mov	r2, r3
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	601a      	str	r2, [r3, #0]
	return ret;
 800ee78:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	371c      	adds	r7, #28
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd90      	pop	{r4, r7, pc}
 800ee82:	bf00      	nop
 800ee84:	200014f4 	.word	0x200014f4
 800ee88:	08021ad4 	.word	0x08021ad4
 800ee8c:	08021ae0 	.word	0x08021ae0
 800ee90:	08021ae4 	.word	0x08021ae4

0800ee94 <default_get_cgi_processor>:

uint8_t default_get_cgi_processor(uint8_t * uri_name, uint8_t * buf, uint16_t * len)
{
 800ee94:	b480      	push	{r7}
 800ee96:	b085      	sub	sp, #20
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	60f8      	str	r0, [r7, #12]
 800ee9c:	60b9      	str	r1, [r7, #8]
 800ee9e:	607a      	str	r2, [r7, #4]

	;
}
 800eea0:	bf00      	nop
 800eea2:	4618      	mov	r0, r3
 800eea4:	3714      	adds	r7, #20
 800eea6:	46bd      	mov	sp, r7
 800eea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeac:	4770      	bx	lr

0800eeae <default_set_cgi_processor>:

uint8_t default_set_cgi_processor(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len)
{
 800eeae:	b480      	push	{r7}
 800eeb0:	b085      	sub	sp, #20
 800eeb2:	af00      	add	r7, sp, #0
 800eeb4:	60f8      	str	r0, [r7, #12]
 800eeb6:	60b9      	str	r1, [r7, #8]
 800eeb8:	607a      	str	r2, [r7, #4]
 800eeba:	603b      	str	r3, [r7, #0]
	;
}
 800eebc:	bf00      	nop
 800eebe:	4618      	mov	r0, r3
 800eec0:	3714      	adds	r7, #20
 800eec2:	46bd      	mov	sp, r7
 800eec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec8:	4770      	bx	lr
	...

0800eecc <reg_external_post_cgi_processor>:

void reg_external_post_cgi_processor( uint8_t (*function)(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len)){
 800eecc:	b480      	push	{r7}
 800eece:	b083      	sub	sp, #12
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]

	predefined_set_cgi_processor = default_set_cgi_processor;
 800eed4:	4b07      	ldr	r3, [pc, #28]	; (800eef4 <reg_external_post_cgi_processor+0x28>)
 800eed6:	4a08      	ldr	r2, [pc, #32]	; (800eef8 <reg_external_post_cgi_processor+0x2c>)
 800eed8:	601a      	str	r2, [r3, #0]
	if (function) {
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d002      	beq.n	800eee6 <reg_external_post_cgi_processor+0x1a>
		predefined_set_cgi_processor = function;
 800eee0:	4a04      	ldr	r2, [pc, #16]	; (800eef4 <reg_external_post_cgi_processor+0x28>)
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	6013      	str	r3, [r2, #0]
	}

}
 800eee6:	bf00      	nop
 800eee8:	370c      	adds	r7, #12
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr
 800eef2:	bf00      	nop
 800eef4:	200014f4 	.word	0x200014f4
 800eef8:	0800eeaf 	.word	0x0800eeaf

0800eefc <reg_external_get_cgi_processor>:

void reg_external_get_cgi_processor(uint8_t (*function)(uint8_t * uri_name, uint8_t * buf, uint16_t * len)){
 800eefc:	b480      	push	{r7}
 800eefe:	b083      	sub	sp, #12
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]

	predefined_get_cgi_processor = default_get_cgi_processor;
 800ef04:	4b07      	ldr	r3, [pc, #28]	; (800ef24 <reg_external_get_cgi_processor+0x28>)
 800ef06:	4a08      	ldr	r2, [pc, #32]	; (800ef28 <reg_external_get_cgi_processor+0x2c>)
 800ef08:	601a      	str	r2, [r3, #0]
	if (function) predefined_get_cgi_processor = function;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d002      	beq.n	800ef16 <reg_external_get_cgi_processor+0x1a>
 800ef10:	4a04      	ldr	r2, [pc, #16]	; (800ef24 <reg_external_get_cgi_processor+0x28>)
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	6013      	str	r3, [r2, #0]

}
 800ef16:	bf00      	nop
 800ef18:	370c      	adds	r7, #12
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef20:	4770      	bx	lr
 800ef22:	bf00      	nop
 800ef24:	200014f8 	.word	0x200014f8
 800ef28:	0800ee95 	.word	0x0800ee95

0800ef2c <proto_reset>:
void (*delay_ms)(uint32_t sec);

void (*ResetON)	(void);
void (*ResetOFF)(void);

void proto_reset(void){};
 800ef2c:	b480      	push	{r7}
 800ef2e:	af00      	add	r7, sp, #0
 800ef30:	bf00      	nop
 800ef32:	46bd      	mov	sp, r7
 800ef34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef38:	4770      	bx	lr

0800ef3a <proto_delay_func>:

void proto_delay_func(uint32_t sec){
 800ef3a:	b480      	push	{r7}
 800ef3c:	b083      	sub	sp, #12
 800ef3e:	af00      	add	r7, sp, #0
 800ef40:	6078      	str	r0, [r7, #4]
	sec = sec * 10000;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	f242 7210 	movw	r2, #10000	; 0x2710
 800ef48:	fb02 f303 	mul.w	r3, r2, r3
 800ef4c:	607b      	str	r3, [r7, #4]

	while (sec){
 800ef4e:	e002      	b.n	800ef56 <proto_delay_func+0x1c>
		sec--;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	3b01      	subs	r3, #1
 800ef54:	607b      	str	r3, [r7, #4]
	while (sec){
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d1f9      	bne.n	800ef50 <proto_delay_func+0x16>
	}

}
 800ef5c:	bf00      	nop
 800ef5e:	bf00      	nop
 800ef60:	370c      	adds	r7, #12
 800ef62:	46bd      	mov	sp, r7
 800ef64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef68:	4770      	bx	lr
	...

0800ef6c <w5500_lib_init>:

void w5500_lib_init(wiz_NetInfo * NetInfoStructure)
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	b083      	sub	sp, #12
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
	NetInfo = NetInfoStructure;
 800ef74:	4a04      	ldr	r2, [pc, #16]	; (800ef88 <w5500_lib_init+0x1c>)
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6013      	str	r3, [r2, #0]
}
 800ef7a:	bf00      	nop
 800ef7c:	370c      	adds	r7, #12
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef84:	4770      	bx	lr
 800ef86:	bf00      	nop
 800ef88:	20001500 	.word	0x20001500

0800ef8c <network_init>:

void network_init(void)
{	wiz_NetTimeout 	nettimeout;
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b082      	sub	sp, #8
 800ef90:	af00      	add	r7, sp, #0

	nettimeout.retry_cnt	= 3;
 800ef92:	2303      	movs	r3, #3
 800ef94:	713b      	strb	r3, [r7, #4]
	nettimeout.time_100us	= 500;
 800ef96:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800ef9a:	80fb      	strh	r3, [r7, #6]

	// Set Network information from netinfo structure
	ctlnetwork(CN_SET_NETINFO, NetInfo);
 800ef9c:	4b07      	ldr	r3, [pc, #28]	; (800efbc <network_init+0x30>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	4619      	mov	r1, r3
 800efa2:	2000      	movs	r0, #0
 800efa4:	f7fa fa74 	bl	8009490 <ctlnetwork>
	ctlnetwork(CN_SET_TIMEOUT, (void*)&nettimeout);
 800efa8:	1d3b      	adds	r3, r7, #4
 800efaa:	4619      	mov	r1, r3
 800efac:	2004      	movs	r0, #4
 800efae:	f7fa fa6f 	bl	8009490 <ctlnetwork>
}
 800efb2:	bf00      	nop
 800efb4:	3708      	adds	r7, #8
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}
 800efba:	bf00      	nop
 800efbc:	20001500 	.word	0x20001500

0800efc0 <Callback_IPConflict>:

void Callback_IPConflict(void)
{
 800efc0:	b480      	push	{r7}
 800efc2:	af00      	add	r7, sp, #0
	ip_dhcp_assigned = false;
 800efc4:	4b03      	ldr	r3, [pc, #12]	; (800efd4 <Callback_IPConflict+0x14>)
 800efc6:	2200      	movs	r2, #0
 800efc8:	701a      	strb	r2, [r3, #0]
}
 800efca:	bf00      	nop
 800efcc:	46bd      	mov	sp, r7
 800efce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd2:	4770      	bx	lr
 800efd4:	200014fc 	.word	0x200014fc

0800efd8 <Callback_IPAssigned>:

void Callback_IPAssigned(void)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	af00      	add	r7, sp, #0
   getIPfromDHCP(NetInfo->ip);
 800efdc:	4b11      	ldr	r3, [pc, #68]	; (800f024 <Callback_IPAssigned+0x4c>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	3306      	adds	r3, #6
 800efe2:	4618      	mov	r0, r3
 800efe4:	f7fc fa0a 	bl	800b3fc <getIPfromDHCP>
   getGWfromDHCP(NetInfo->gw);
 800efe8:	4b0e      	ldr	r3, [pc, #56]	; (800f024 <Callback_IPAssigned+0x4c>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	330e      	adds	r3, #14
 800efee:	4618      	mov	r0, r3
 800eff0:	f7fc fa24 	bl	800b43c <getGWfromDHCP>
   getSNfromDHCP(NetInfo->sn);
 800eff4:	4b0b      	ldr	r3, [pc, #44]	; (800f024 <Callback_IPAssigned+0x4c>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	330a      	adds	r3, #10
 800effa:	4618      	mov	r0, r3
 800effc:	f7fc fa3e 	bl	800b47c <getSNfromDHCP>
   getDNSfromDHCP(NetInfo->dns);
 800f000:	4b08      	ldr	r3, [pc, #32]	; (800f024 <Callback_IPAssigned+0x4c>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	3312      	adds	r3, #18
 800f006:	4618      	mov	r0, r3
 800f008:	f7fc fa58 	bl	800b4bc <getDNSfromDHCP>
   NetInfo->dhcp = NETINFO_DHCP;
 800f00c:	4b05      	ldr	r3, [pc, #20]	; (800f024 <Callback_IPAssigned+0x4c>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	2202      	movs	r2, #2
 800f012:	759a      	strb	r2, [r3, #22]
   // Network initialization
   network_init();      // apply from dhcp
 800f014:	f7ff ffba 	bl	800ef8c <network_init>

   ip_dhcp_assigned = true;
 800f018:	4b03      	ldr	r3, [pc, #12]	; (800f028 <Callback_IPAssigned+0x50>)
 800f01a:	2201      	movs	r2, #1
 800f01c:	701a      	strb	r2, [r3, #0]
#ifdef _MAIN_DEBUG_
   printf("DHCP LEASED TIME : %ld Sec.\r\n", getDHCPLeasetime());//Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬â€�Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬Â¢Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â»Ãƒï¿½Ã‚Â¡Ãƒâ€˜Ã¢â‚¬Å“Ãƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¡Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬ËœÃƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã…Â  Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â Ãƒâ€˜Ã‹Å“Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¯Â¿Â½ Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â°Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â¦Ãƒï¿½Ã‚Â Ãƒâ€™Ã¢â‚¬ËœÃƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¹ Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â¦Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â° Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã†â€™Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Âµ DHCP
#endif
}
 800f01e:	bf00      	nop
 800f020:	bd80      	pop	{r7, pc}
 800f022:	bf00      	nop
 800f024:	20001500 	.word	0x20001500
 800f028:	200014fc 	.word	0x200014fc

0800f02c <dhcp_rutine>:

void dhcp_rutine(void){
 800f02c:	b580      	push	{r7, lr}
 800f02e:	af00      	add	r7, sp, #0
	switch(DHCP_run())
 800f030:	f7fb ff6e 	bl	800af10 <DHCP_run>
 800f034:	4603      	mov	r3, r0
 800f036:	2b00      	cmp	r3, #0
 800f038:	d004      	beq.n	800f044 <dhcp_rutine+0x18>
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	db09      	blt.n	800f052 <dhcp_rutine+0x26>
 800f03e:	3b02      	subs	r3, #2
 800f040:	2b02      	cmp	r3, #2
					DHCP_stop();      // if restart, recall DHCP_init()
					network_init();
					ip_dhcp_assigned = false;
				}
			default:
				break;
 800f042:	e006      	b.n	800f052 <dhcp_rutine+0x26>
				my_dhcp_retry++;
 800f044:	4b04      	ldr	r3, [pc, #16]	; (800f058 <dhcp_rutine+0x2c>)
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	3301      	adds	r3, #1
 800f04a:	b2da      	uxtb	r2, r3
 800f04c:	4b02      	ldr	r3, [pc, #8]	; (800f058 <dhcp_rutine+0x2c>)
 800f04e:	701a      	strb	r2, [r3, #0]
				break;
 800f050:	e000      	b.n	800f054 <dhcp_rutine+0x28>
				break;
 800f052:	bf00      	nop
			}
}
 800f054:	bf00      	nop
 800f056:	bd80      	pop	{r7, pc}
 800f058:	20001504 	.word	0x20001504

0800f05c <link_status>:

int link_status(void){
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b082      	sub	sp, #8
 800f060:	af00      	add	r7, sp, #0
	uint8_t temp;
	ctlwizchip(CW_GET_PHYLINK, (void*)&temp);
 800f062:	1dfb      	adds	r3, r7, #7
 800f064:	4619      	mov	r1, r3
 800f066:	200f      	movs	r0, #15
 800f068:	f7fa f930 	bl	80092cc <ctlwizchip>
	if (!temp)ip_dhcp_assigned = false;
 800f06c:	79fb      	ldrb	r3, [r7, #7]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d102      	bne.n	800f078 <link_status+0x1c>
 800f072:	4b04      	ldr	r3, [pc, #16]	; (800f084 <link_status+0x28>)
 800f074:	2200      	movs	r2, #0
 800f076:	701a      	strb	r2, [r3, #0]
	return temp;
 800f078:	79fb      	ldrb	r3, [r7, #7]
}
 800f07a:	4618      	mov	r0, r3
 800f07c:	3708      	adds	r7, #8
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}
 800f082:	bf00      	nop
 800f084:	200014fc 	.word	0x200014fc

0800f088 <link_duplex>:

int link_duplex(void){
 800f088:	b580      	push	{r7, lr}
 800f08a:	b082      	sub	sp, #8
 800f08c:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_status;
	wizphy_getphystat(&phy_status);
 800f08e:	1d3b      	adds	r3, r7, #4
 800f090:	4618      	mov	r0, r3
 800f092:	f7fa fcad 	bl	80099f0 <wizphy_getphystat>
	return phy_status.duplex;
 800f096:	79fb      	ldrb	r3, [r7, #7]
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3708      	adds	r7, #8
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}

0800f0a0 <link_speed>:

int link_speed(void){
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b082      	sub	sp, #8
 800f0a4:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_status;
	wizphy_getphystat(&phy_status);
 800f0a6:	1d3b      	adds	r3, r7, #4
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f7fa fca1 	bl	80099f0 <wizphy_getphystat>
	return phy_status.speed;
 800f0ae:	79bb      	ldrb	r3, [r7, #6]
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	3708      	adds	r7, #8
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}

0800f0b8 <assigned_ip>:

int assigned_ip(void){
 800f0b8:	b480      	push	{r7}
 800f0ba:	af00      	add	r7, sp, #0
	return ip_dhcp_assigned;
 800f0bc:	4b03      	ldr	r3, [pc, #12]	; (800f0cc <assigned_ip+0x14>)
 800f0be:	781b      	ldrb	r3, [r3, #0]
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c8:	4770      	bx	lr
 800f0ca:	bf00      	nop
 800f0cc:	200014fc 	.word	0x200014fc

0800f0d0 <set_ip_aasigned>:

void set_ip_aasigned(void){
 800f0d0:	b480      	push	{r7}
 800f0d2:	af00      	add	r7, sp, #0
	ip_dhcp_assigned = true;
 800f0d4:	4b03      	ldr	r3, [pc, #12]	; (800f0e4 <set_ip_aasigned+0x14>)
 800f0d6:	2201      	movs	r2, #1
 800f0d8:	701a      	strb	r2, [r3, #0]
}
 800f0da:	bf00      	nop
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e2:	4770      	bx	lr
 800f0e4:	200014fc 	.word	0x200014fc

0800f0e8 <w5500_init>:

int w5500_init(void)
{
 800f0e8:	b590      	push	{r4, r7, lr}
 800f0ea:	b085      	sub	sp, #20
 800f0ec:	af00      	add	r7, sp, #0
  uint8_t W5500FifoSize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2, }, {2, 2, 2, 2, 2, 2, 2, 2}};
 800f0ee:	4b18      	ldr	r3, [pc, #96]	; (800f150 <w5500_init+0x68>)
 800f0f0:	463c      	mov	r4, r7
 800f0f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f0f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ResetON();
 800f0f8:	4b16      	ldr	r3, [pc, #88]	; (800f154 <w5500_init+0x6c>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	4798      	blx	r3
  delay_ms(delay0_5s);
 800f0fe:	4b16      	ldr	r3, [pc, #88]	; (800f158 <w5500_init+0x70>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f106:	4798      	blx	r3
  ResetOFF();
 800f108:	4b14      	ldr	r3, [pc, #80]	; (800f15c <w5500_init+0x74>)
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	4798      	blx	r3
  delay_ms(delay3s);
 800f10e:	4b12      	ldr	r3, [pc, #72]	; (800f158 <w5500_init+0x70>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800f116:	4798      	blx	r3

  if (ctlwizchip(CW_INIT_WIZCHIP, (void*)W5500FifoSize) == -1)
 800f118:	463b      	mov	r3, r7
 800f11a:	4619      	mov	r1, r3
 800f11c:	2001      	movs	r0, #1
 800f11e:	f7fa f8d5 	bl	80092cc <ctlwizchip>
 800f122:	4603      	mov	r3, r0
 800f124:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f128:	d102      	bne.n	800f130 <w5500_init+0x48>
  {
	  return -1;
 800f12a:	f04f 33ff 	mov.w	r3, #4294967295
 800f12e:	e00b      	b.n	800f148 <w5500_init+0x60>
  }

  if (link_status()==PHY_LINK_OFF){
 800f130:	f7ff ff94 	bl	800f05c <link_status>
 800f134:	4603      	mov	r3, r0
 800f136:	2b00      	cmp	r3, #0
 800f138:	d102      	bne.n	800f140 <w5500_init+0x58>
	   return -1;
 800f13a:	f04f 33ff 	mov.w	r3, #4294967295
 800f13e:	e003      	b.n	800f148 <w5500_init+0x60>
  }

  ip_dhcp_assigned = false;
 800f140:	4b07      	ldr	r3, [pc, #28]	; (800f160 <w5500_init+0x78>)
 800f142:	2200      	movs	r2, #0
 800f144:	701a      	strb	r2, [r3, #0]
  return 0;
 800f146:	2300      	movs	r3, #0
}
 800f148:	4618      	mov	r0, r3
 800f14a:	3714      	adds	r7, #20
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd90      	pop	{r4, r7, pc}
 800f150:	08021af8 	.word	0x08021af8
 800f154:	2000150c 	.word	0x2000150c
 800f158:	20001508 	.word	0x20001508
 800f15c:	20001510 	.word	0x20001510
 800f160:	200014fc 	.word	0x200014fc

0800f164 <w5500_delay_cb>:

void w5500_delay_cb(void (*function)(uint32_t time))
{
 800f164:	b480      	push	{r7}
 800f166:	b083      	sub	sp, #12
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
	delay_ms = proto_delay_func;
 800f16c:	4b07      	ldr	r3, [pc, #28]	; (800f18c <w5500_delay_cb+0x28>)
 800f16e:	4a08      	ldr	r2, [pc, #32]	; (800f190 <w5500_delay_cb+0x2c>)
 800f170:	601a      	str	r2, [r3, #0]

	if (function){
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d002      	beq.n	800f17e <w5500_delay_cb+0x1a>
		delay_ms = function;
 800f178:	4a04      	ldr	r2, [pc, #16]	; (800f18c <w5500_delay_cb+0x28>)
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	6013      	str	r3, [r2, #0]
	}
}
 800f17e:	bf00      	nop
 800f180:	370c      	adds	r7, #12
 800f182:	46bd      	mov	sp, r7
 800f184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f188:	4770      	bx	lr
 800f18a:	bf00      	nop
 800f18c:	20001508 	.word	0x20001508
 800f190:	0800ef3b 	.word	0x0800ef3b

0800f194 <w5500_reset_cb>:

void w5500_reset_cb(void(* reset)(void), void (* unreset)(void)){
 800f194:	b480      	push	{r7}
 800f196:	b083      	sub	sp, #12
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
 800f19c:	6039      	str	r1, [r7, #0]

	ResetON 	= proto_reset;
 800f19e:	4b0c      	ldr	r3, [pc, #48]	; (800f1d0 <w5500_reset_cb+0x3c>)
 800f1a0:	4a0c      	ldr	r2, [pc, #48]	; (800f1d4 <w5500_reset_cb+0x40>)
 800f1a2:	601a      	str	r2, [r3, #0]
	ResetOFF	= proto_reset;
 800f1a4:	4b0c      	ldr	r3, [pc, #48]	; (800f1d8 <w5500_reset_cb+0x44>)
 800f1a6:	4a0b      	ldr	r2, [pc, #44]	; (800f1d4 <w5500_reset_cb+0x40>)
 800f1a8:	601a      	str	r2, [r3, #0]
	if (reset) 	ResetON =  reset;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d002      	beq.n	800f1b6 <w5500_reset_cb+0x22>
 800f1b0:	4a07      	ldr	r2, [pc, #28]	; (800f1d0 <w5500_reset_cb+0x3c>)
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6013      	str	r3, [r2, #0]
	if (unreset)ResetOFF = unreset;
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d002      	beq.n	800f1c2 <w5500_reset_cb+0x2e>
 800f1bc:	4a06      	ldr	r2, [pc, #24]	; (800f1d8 <w5500_reset_cb+0x44>)
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	6013      	str	r3, [r2, #0]
}
 800f1c2:	bf00      	nop
 800f1c4:	370c      	adds	r7, #12
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1cc:	4770      	bx	lr
 800f1ce:	bf00      	nop
 800f1d0:	2000150c 	.word	0x2000150c
 800f1d4:	0800ef2d 	.word	0x0800ef2d
 800f1d8:	20001510 	.word	0x20001510

0800f1dc <Eth_reset_on>:
#include "ll_SPI_enh_abstractions.h"

SPI_HandleTypeDef spi_handler;


void Eth_reset_on(void){
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_RESET);
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f1e6:	4802      	ldr	r0, [pc, #8]	; (800f1f0 <Eth_reset_on+0x14>)
 800f1e8:	f7f5 ffe2 	bl	80051b0 <HAL_GPIO_WritePin>
}
 800f1ec:	bf00      	nop
 800f1ee:	bd80      	pop	{r7, pc}
 800f1f0:	40020000 	.word	0x40020000

0800f1f4 <Eth_reset_off>:

void Eth_reset_off(void){
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_SET);
 800f1f8:	2201      	movs	r2, #1
 800f1fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f1fe:	4802      	ldr	r0, [pc, #8]	; (800f208 <Eth_reset_off+0x14>)
 800f200:	f7f5 ffd6 	bl	80051b0 <HAL_GPIO_WritePin>
}
 800f204:	bf00      	nop
 800f206:	bd80      	pop	{r7, pc}
 800f208:	40020000 	.word	0x40020000

0800f20c <Eth_spi_select>:

void Eth_spi_select(void){
 800f20c:	b580      	push	{r7, lr}
 800f20e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 800f210:	2200      	movs	r2, #0
 800f212:	2140      	movs	r1, #64	; 0x40
 800f214:	4802      	ldr	r0, [pc, #8]	; (800f220 <Eth_spi_select+0x14>)
 800f216:	f7f5 ffcb 	bl	80051b0 <HAL_GPIO_WritePin>
}
 800f21a:	bf00      	nop
 800f21c:	bd80      	pop	{r7, pc}
 800f21e:	bf00      	nop
 800f220:	40020400 	.word	0x40020400

0800f224 <Eth_spi_deselect>:

void Eth_spi_deselect(void){
 800f224:	b580      	push	{r7, lr}
 800f226:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 800f228:	2201      	movs	r2, #1
 800f22a:	2140      	movs	r1, #64	; 0x40
 800f22c:	4802      	ldr	r0, [pc, #8]	; (800f238 <Eth_spi_deselect+0x14>)
 800f22e:	f7f5 ffbf 	bl	80051b0 <HAL_GPIO_WritePin>
}
 800f232:	bf00      	nop
 800f234:	bd80      	pop	{r7, pc}
 800f236:	bf00      	nop
 800f238:	40020400 	.word	0x40020400

0800f23c <Reg_eth_spi>:

void Reg_eth_spi(SPI_HandleTypeDef hspi){
 800f23c:	b084      	sub	sp, #16
 800f23e:	b580      	push	{r7, lr}
 800f240:	af00      	add	r7, sp, #0
 800f242:	f107 0c08 	add.w	ip, r7, #8
 800f246:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	spi_handler = hspi;
 800f24a:	4b07      	ldr	r3, [pc, #28]	; (800f268 <Reg_eth_spi+0x2c>)
 800f24c:	4618      	mov	r0, r3
 800f24e:	f107 0308 	add.w	r3, r7, #8
 800f252:	2258      	movs	r2, #88	; 0x58
 800f254:	4619      	mov	r1, r3
 800f256:	f00d f8fc 	bl	801c452 <memcpy>
}
 800f25a:	bf00      	nop
 800f25c:	46bd      	mov	sp, r7
 800f25e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f262:	b004      	add	sp, #16
 800f264:	4770      	bx	lr
 800f266:	bf00      	nop
 800f268:	20001514 	.word	0x20001514

0800f26c <Eth_spi_send_byte>:

void Eth_spi_send_byte(uint8_t byte){
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b082      	sub	sp, #8
 800f270:	af00      	add	r7, sp, #0
 800f272:	4603      	mov	r3, r0
 800f274:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&spi_handler, &byte, 1, 5000);
 800f276:	1df9      	adds	r1, r7, #7
 800f278:	f241 3388 	movw	r3, #5000	; 0x1388
 800f27c:	2201      	movs	r2, #1
 800f27e:	4803      	ldr	r0, [pc, #12]	; (800f28c <Eth_spi_send_byte+0x20>)
 800f280:	f7f6 fd03 	bl	8005c8a <HAL_SPI_Transmit>
}
 800f284:	bf00      	nop
 800f286:	3708      	adds	r7, #8
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}
 800f28c:	20001514 	.word	0x20001514

0800f290 <Eth_spi_resv_byte>:

uint8_t Eth_spi_resv_byte(void){
 800f290:	b580      	push	{r7, lr}
 800f292:	b082      	sub	sp, #8
 800f294:	af00      	add	r7, sp, #0
	uint8_t byte;

	HAL_SPI_Receive(&spi_handler, &byte, 1, 5000);
 800f296:	1df9      	adds	r1, r7, #7
 800f298:	f241 3388 	movw	r3, #5000	; 0x1388
 800f29c:	2201      	movs	r2, #1
 800f29e:	4804      	ldr	r0, [pc, #16]	; (800f2b0 <Eth_spi_resv_byte+0x20>)
 800f2a0:	f7f6 fe36 	bl	8005f10 <HAL_SPI_Receive>
	return byte;
 800f2a4:	79fb      	ldrb	r3, [r7, #7]
}
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	3708      	adds	r7, #8
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}
 800f2ae:	bf00      	nop
 800f2b0:	20001514 	.word	0x20001514

0800f2b4 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 800f2b4:	b480      	push	{r7}
 800f2b6:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 800f2b8:	bf00      	nop
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c0:	4770      	bx	lr
	...

0800f2c4 <__NVIC_SetPriority>:
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b083      	sub	sp, #12
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	6039      	str	r1, [r7, #0]
 800f2ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f2d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	db0a      	blt.n	800f2ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	b2da      	uxtb	r2, r3
 800f2dc:	490c      	ldr	r1, [pc, #48]	; (800f310 <__NVIC_SetPriority+0x4c>)
 800f2de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f2e2:	0112      	lsls	r2, r2, #4
 800f2e4:	b2d2      	uxtb	r2, r2
 800f2e6:	440b      	add	r3, r1
 800f2e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f2ec:	e00a      	b.n	800f304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	b2da      	uxtb	r2, r3
 800f2f2:	4908      	ldr	r1, [pc, #32]	; (800f314 <__NVIC_SetPriority+0x50>)
 800f2f4:	79fb      	ldrb	r3, [r7, #7]
 800f2f6:	f003 030f 	and.w	r3, r3, #15
 800f2fa:	3b04      	subs	r3, #4
 800f2fc:	0112      	lsls	r2, r2, #4
 800f2fe:	b2d2      	uxtb	r2, r2
 800f300:	440b      	add	r3, r1
 800f302:	761a      	strb	r2, [r3, #24]
}
 800f304:	bf00      	nop
 800f306:	370c      	adds	r7, #12
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr
 800f310:	e000e100 	.word	0xe000e100
 800f314:	e000ed00 	.word	0xe000ed00

0800f318 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f318:	b580      	push	{r7, lr}
 800f31a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f31c:	4b05      	ldr	r3, [pc, #20]	; (800f334 <SysTick_Handler+0x1c>)
 800f31e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f320:	f002 fbbe 	bl	8011aa0 <xTaskGetSchedulerState>
 800f324:	4603      	mov	r3, r0
 800f326:	2b01      	cmp	r3, #1
 800f328:	d001      	beq.n	800f32e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f32a:	f003 faa5 	bl	8012878 <xPortSysTickHandler>
  }
}
 800f32e:	bf00      	nop
 800f330:	bd80      	pop	{r7, pc}
 800f332:	bf00      	nop
 800f334:	e000e010 	.word	0xe000e010

0800f338 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f338:	b580      	push	{r7, lr}
 800f33a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f33c:	2100      	movs	r1, #0
 800f33e:	f06f 0004 	mvn.w	r0, #4
 800f342:	f7ff ffbf 	bl	800f2c4 <__NVIC_SetPriority>
#endif
}
 800f346:	bf00      	nop
 800f348:	bd80      	pop	{r7, pc}
	...

0800f34c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f34c:	b480      	push	{r7}
 800f34e:	b083      	sub	sp, #12
 800f350:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f352:	f3ef 8305 	mrs	r3, IPSR
 800f356:	603b      	str	r3, [r7, #0]
  return(result);
 800f358:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d003      	beq.n	800f366 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f35e:	f06f 0305 	mvn.w	r3, #5
 800f362:	607b      	str	r3, [r7, #4]
 800f364:	e00c      	b.n	800f380 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f366:	4b0a      	ldr	r3, [pc, #40]	; (800f390 <osKernelInitialize+0x44>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d105      	bne.n	800f37a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f36e:	4b08      	ldr	r3, [pc, #32]	; (800f390 <osKernelInitialize+0x44>)
 800f370:	2201      	movs	r2, #1
 800f372:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f374:	2300      	movs	r3, #0
 800f376:	607b      	str	r3, [r7, #4]
 800f378:	e002      	b.n	800f380 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f37a:	f04f 33ff 	mov.w	r3, #4294967295
 800f37e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f380:	687b      	ldr	r3, [r7, #4]
}
 800f382:	4618      	mov	r0, r3
 800f384:	370c      	adds	r7, #12
 800f386:	46bd      	mov	sp, r7
 800f388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38c:	4770      	bx	lr
 800f38e:	bf00      	nop
 800f390:	2000156c 	.word	0x2000156c

0800f394 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f394:	b580      	push	{r7, lr}
 800f396:	b082      	sub	sp, #8
 800f398:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f39a:	f3ef 8305 	mrs	r3, IPSR
 800f39e:	603b      	str	r3, [r7, #0]
  return(result);
 800f3a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d003      	beq.n	800f3ae <osKernelStart+0x1a>
    stat = osErrorISR;
 800f3a6:	f06f 0305 	mvn.w	r3, #5
 800f3aa:	607b      	str	r3, [r7, #4]
 800f3ac:	e010      	b.n	800f3d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f3ae:	4b0b      	ldr	r3, [pc, #44]	; (800f3dc <osKernelStart+0x48>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	2b01      	cmp	r3, #1
 800f3b4:	d109      	bne.n	800f3ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f3b6:	f7ff ffbf 	bl	800f338 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f3ba:	4b08      	ldr	r3, [pc, #32]	; (800f3dc <osKernelStart+0x48>)
 800f3bc:	2202      	movs	r2, #2
 800f3be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f3c0:	f001 feca 	bl	8011158 <vTaskStartScheduler>
      stat = osOK;
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	607b      	str	r3, [r7, #4]
 800f3c8:	e002      	b.n	800f3d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f3ca:	f04f 33ff 	mov.w	r3, #4294967295
 800f3ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f3d0:	687b      	ldr	r3, [r7, #4]
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	3708      	adds	r7, #8
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}
 800f3da:	bf00      	nop
 800f3dc:	2000156c 	.word	0x2000156c

0800f3e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b08e      	sub	sp, #56	; 0x38
 800f3e4:	af04      	add	r7, sp, #16
 800f3e6:	60f8      	str	r0, [r7, #12]
 800f3e8:	60b9      	str	r1, [r7, #8]
 800f3ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f3f0:	f3ef 8305 	mrs	r3, IPSR
 800f3f4:	617b      	str	r3, [r7, #20]
  return(result);
 800f3f6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d17e      	bne.n	800f4fa <osThreadNew+0x11a>
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d07b      	beq.n	800f4fa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f402:	2380      	movs	r3, #128	; 0x80
 800f404:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f406:	2318      	movs	r3, #24
 800f408:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f40a:	2300      	movs	r3, #0
 800f40c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800f40e:	f04f 33ff 	mov.w	r3, #4294967295
 800f412:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d045      	beq.n	800f4a6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d002      	beq.n	800f428 <osThreadNew+0x48>
        name = attr->name;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	699b      	ldr	r3, [r3, #24]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d002      	beq.n	800f436 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	699b      	ldr	r3, [r3, #24]
 800f434:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f436:	69fb      	ldr	r3, [r7, #28]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d008      	beq.n	800f44e <osThreadNew+0x6e>
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	2b38      	cmp	r3, #56	; 0x38
 800f440:	d805      	bhi.n	800f44e <osThreadNew+0x6e>
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	685b      	ldr	r3, [r3, #4]
 800f446:	f003 0301 	and.w	r3, r3, #1
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d001      	beq.n	800f452 <osThreadNew+0x72>
        return (NULL);
 800f44e:	2300      	movs	r3, #0
 800f450:	e054      	b.n	800f4fc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	695b      	ldr	r3, [r3, #20]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d003      	beq.n	800f462 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	695b      	ldr	r3, [r3, #20]
 800f45e:	089b      	lsrs	r3, r3, #2
 800f460:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	689b      	ldr	r3, [r3, #8]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d00e      	beq.n	800f488 <osThreadNew+0xa8>
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	68db      	ldr	r3, [r3, #12]
 800f46e:	2ba7      	cmp	r3, #167	; 0xa7
 800f470:	d90a      	bls.n	800f488 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f476:	2b00      	cmp	r3, #0
 800f478:	d006      	beq.n	800f488 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	695b      	ldr	r3, [r3, #20]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d002      	beq.n	800f488 <osThreadNew+0xa8>
        mem = 1;
 800f482:	2301      	movs	r3, #1
 800f484:	61bb      	str	r3, [r7, #24]
 800f486:	e010      	b.n	800f4aa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	689b      	ldr	r3, [r3, #8]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d10c      	bne.n	800f4aa <osThreadNew+0xca>
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	68db      	ldr	r3, [r3, #12]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d108      	bne.n	800f4aa <osThreadNew+0xca>
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	691b      	ldr	r3, [r3, #16]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d104      	bne.n	800f4aa <osThreadNew+0xca>
          mem = 0;
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	61bb      	str	r3, [r7, #24]
 800f4a4:	e001      	b.n	800f4aa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f4aa:	69bb      	ldr	r3, [r7, #24]
 800f4ac:	2b01      	cmp	r3, #1
 800f4ae:	d110      	bne.n	800f4d2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f4b4:	687a      	ldr	r2, [r7, #4]
 800f4b6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f4b8:	9202      	str	r2, [sp, #8]
 800f4ba:	9301      	str	r3, [sp, #4]
 800f4bc:	69fb      	ldr	r3, [r7, #28]
 800f4be:	9300      	str	r3, [sp, #0]
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	6a3a      	ldr	r2, [r7, #32]
 800f4c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f4c6:	68f8      	ldr	r0, [r7, #12]
 800f4c8:	f001 fc5a 	bl	8010d80 <xTaskCreateStatic>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	613b      	str	r3, [r7, #16]
 800f4d0:	e013      	b.n	800f4fa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f4d2:	69bb      	ldr	r3, [r7, #24]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d110      	bne.n	800f4fa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f4d8:	6a3b      	ldr	r3, [r7, #32]
 800f4da:	b29a      	uxth	r2, r3
 800f4dc:	f107 0310 	add.w	r3, r7, #16
 800f4e0:	9301      	str	r3, [sp, #4]
 800f4e2:	69fb      	ldr	r3, [r7, #28]
 800f4e4:	9300      	str	r3, [sp, #0]
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f4ea:	68f8      	ldr	r0, [r7, #12]
 800f4ec:	f001 fca5 	bl	8010e3a <xTaskCreate>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	2b01      	cmp	r3, #1
 800f4f4:	d001      	beq.n	800f4fa <osThreadNew+0x11a>
            hTask = NULL;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f4fa:	693b      	ldr	r3, [r7, #16]
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	3728      	adds	r7, #40	; 0x28
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}

0800f504 <osThreadGetStackSpace>:
  }

  return (state);
}

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 800f504:	b580      	push	{r7, lr}
 800f506:	b086      	sub	sp, #24
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f510:	f3ef 8305 	mrs	r3, IPSR
 800f514:	60fb      	str	r3, [r7, #12]
  return(result);
 800f516:	68fb      	ldr	r3, [r7, #12]
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d102      	bne.n	800f522 <osThreadGetStackSpace+0x1e>
 800f51c:	693b      	ldr	r3, [r7, #16]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d102      	bne.n	800f528 <osThreadGetStackSpace+0x24>
    sz = 0U;
 800f522:	2300      	movs	r3, #0
 800f524:	617b      	str	r3, [r7, #20]
 800f526:	e005      	b.n	800f534 <osThreadGetStackSpace+0x30>
  } else {
    sz = (uint32_t)(uxTaskGetStackHighWaterMark(hTask) * sizeof(StackType_t));
 800f528:	6938      	ldr	r0, [r7, #16]
 800f52a:	f002 fa39 	bl	80119a0 <uxTaskGetStackHighWaterMark>
 800f52e:	4603      	mov	r3, r0
 800f530:	009b      	lsls	r3, r3, #2
 800f532:	617b      	str	r3, [r7, #20]
  }

  return (sz);
 800f534:	697b      	ldr	r3, [r7, #20]
}
 800f536:	4618      	mov	r0, r3
 800f538:	3718      	adds	r7, #24
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}
	...

0800f540 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800f540:	b480      	push	{r7}
 800f542:	b083      	sub	sp, #12
 800f544:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f546:	f3ef 8305 	mrs	r3, IPSR
 800f54a:	603b      	str	r3, [r7, #0]
  return(result);
 800f54c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d003      	beq.n	800f55a <osThreadYield+0x1a>
    stat = osErrorISR;
 800f552:	f06f 0305 	mvn.w	r3, #5
 800f556:	607b      	str	r3, [r7, #4]
 800f558:	e009      	b.n	800f56e <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800f55a:	2300      	movs	r3, #0
 800f55c:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800f55e:	4b07      	ldr	r3, [pc, #28]	; (800f57c <osThreadYield+0x3c>)
 800f560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f564:	601a      	str	r2, [r3, #0]
 800f566:	f3bf 8f4f 	dsb	sy
 800f56a:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800f56e:	687b      	ldr	r3, [r7, #4]
}
 800f570:	4618      	mov	r0, r3
 800f572:	370c      	adds	r7, #12
 800f574:	46bd      	mov	sp, r7
 800f576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57a:	4770      	bx	lr
 800f57c:	e000ed04 	.word	0xe000ed04

0800f580 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f580:	b580      	push	{r7, lr}
 800f582:	b084      	sub	sp, #16
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f588:	f3ef 8305 	mrs	r3, IPSR
 800f58c:	60bb      	str	r3, [r7, #8]
  return(result);
 800f58e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f590:	2b00      	cmp	r3, #0
 800f592:	d003      	beq.n	800f59c <osDelay+0x1c>
    stat = osErrorISR;
 800f594:	f06f 0305 	mvn.w	r3, #5
 800f598:	60fb      	str	r3, [r7, #12]
 800f59a:	e007      	b.n	800f5ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f59c:	2300      	movs	r3, #0
 800f59e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d002      	beq.n	800f5ac <osDelay+0x2c>
      vTaskDelay(ticks);
 800f5a6:	6878      	ldr	r0, [r7, #4]
 800f5a8:	f001 fda2 	bl	80110f0 <vTaskDelay>
    }
  }

  return (stat);
 800f5ac:	68fb      	ldr	r3, [r7, #12]
}
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	3710      	adds	r7, #16
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}

0800f5b6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800f5b6:	b580      	push	{r7, lr}
 800f5b8:	b088      	sub	sp, #32
 800f5ba:	af00      	add	r7, sp, #0
 800f5bc:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f5c2:	f3ef 8305 	mrs	r3, IPSR
 800f5c6:	60bb      	str	r3, [r7, #8]
  return(result);
 800f5c8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d174      	bne.n	800f6b8 <osMutexNew+0x102>
    if (attr != NULL) {
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d003      	beq.n	800f5dc <osMutexNew+0x26>
      type = attr->attr_bits;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	685b      	ldr	r3, [r3, #4]
 800f5d8:	61bb      	str	r3, [r7, #24]
 800f5da:	e001      	b.n	800f5e0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800f5e0:	69bb      	ldr	r3, [r7, #24]
 800f5e2:	f003 0301 	and.w	r3, r3, #1
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d002      	beq.n	800f5f0 <osMutexNew+0x3a>
      rmtx = 1U;
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	617b      	str	r3, [r7, #20]
 800f5ee:	e001      	b.n	800f5f4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800f5f4:	69bb      	ldr	r3, [r7, #24]
 800f5f6:	f003 0308 	and.w	r3, r3, #8
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d15c      	bne.n	800f6b8 <osMutexNew+0x102>
      mem = -1;
 800f5fe:	f04f 33ff 	mov.w	r3, #4294967295
 800f602:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d015      	beq.n	800f636 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	689b      	ldr	r3, [r3, #8]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d006      	beq.n	800f620 <osMutexNew+0x6a>
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	68db      	ldr	r3, [r3, #12]
 800f616:	2b4f      	cmp	r3, #79	; 0x4f
 800f618:	d902      	bls.n	800f620 <osMutexNew+0x6a>
          mem = 1;
 800f61a:	2301      	movs	r3, #1
 800f61c:	613b      	str	r3, [r7, #16]
 800f61e:	e00c      	b.n	800f63a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	689b      	ldr	r3, [r3, #8]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d108      	bne.n	800f63a <osMutexNew+0x84>
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	68db      	ldr	r3, [r3, #12]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d104      	bne.n	800f63a <osMutexNew+0x84>
            mem = 0;
 800f630:	2300      	movs	r3, #0
 800f632:	613b      	str	r3, [r7, #16]
 800f634:	e001      	b.n	800f63a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800f636:	2300      	movs	r3, #0
 800f638:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800f63a:	693b      	ldr	r3, [r7, #16]
 800f63c:	2b01      	cmp	r3, #1
 800f63e:	d112      	bne.n	800f666 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d007      	beq.n	800f656 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	689b      	ldr	r3, [r3, #8]
 800f64a:	4619      	mov	r1, r3
 800f64c:	2004      	movs	r0, #4
 800f64e:	f000 fc68 	bl	800ff22 <xQueueCreateMutexStatic>
 800f652:	61f8      	str	r0, [r7, #28]
 800f654:	e016      	b.n	800f684 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	689b      	ldr	r3, [r3, #8]
 800f65a:	4619      	mov	r1, r3
 800f65c:	2001      	movs	r0, #1
 800f65e:	f000 fc60 	bl	800ff22 <xQueueCreateMutexStatic>
 800f662:	61f8      	str	r0, [r7, #28]
 800f664:	e00e      	b.n	800f684 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800f666:	693b      	ldr	r3, [r7, #16]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d10b      	bne.n	800f684 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d004      	beq.n	800f67c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800f672:	2004      	movs	r0, #4
 800f674:	f000 fc3d 	bl	800fef2 <xQueueCreateMutex>
 800f678:	61f8      	str	r0, [r7, #28]
 800f67a:	e003      	b.n	800f684 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800f67c:	2001      	movs	r0, #1
 800f67e:	f000 fc38 	bl	800fef2 <xQueueCreateMutex>
 800f682:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800f684:	69fb      	ldr	r3, [r7, #28]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d00c      	beq.n	800f6a4 <osMutexNew+0xee>
        if (attr != NULL) {
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d003      	beq.n	800f698 <osMutexNew+0xe2>
          name = attr->name;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	60fb      	str	r3, [r7, #12]
 800f696:	e001      	b.n	800f69c <osMutexNew+0xe6>
        } else {
          name = NULL;
 800f698:	2300      	movs	r3, #0
 800f69a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800f69c:	68f9      	ldr	r1, [r7, #12]
 800f69e:	69f8      	ldr	r0, [r7, #28]
 800f6a0:	f001 fb10 	bl	8010cc4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800f6a4:	69fb      	ldr	r3, [r7, #28]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d006      	beq.n	800f6b8 <osMutexNew+0x102>
 800f6aa:	697b      	ldr	r3, [r7, #20]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d003      	beq.n	800f6b8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800f6b0:	69fb      	ldr	r3, [r7, #28]
 800f6b2:	f043 0301 	orr.w	r3, r3, #1
 800f6b6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800f6b8:	69fb      	ldr	r3, [r7, #28]
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	3720      	adds	r7, #32
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}

0800f6c2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800f6c2:	b580      	push	{r7, lr}
 800f6c4:	b086      	sub	sp, #24
 800f6c6:	af00      	add	r7, sp, #0
 800f6c8:	6078      	str	r0, [r7, #4]
 800f6ca:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f023 0301 	bic.w	r3, r3, #1
 800f6d2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f003 0301 	and.w	r3, r3, #1
 800f6da:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f6e0:	f3ef 8305 	mrs	r3, IPSR
 800f6e4:	60bb      	str	r3, [r7, #8]
  return(result);
 800f6e6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d003      	beq.n	800f6f4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800f6ec:	f06f 0305 	mvn.w	r3, #5
 800f6f0:	617b      	str	r3, [r7, #20]
 800f6f2:	e02c      	b.n	800f74e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800f6f4:	693b      	ldr	r3, [r7, #16]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d103      	bne.n	800f702 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800f6fa:	f06f 0303 	mvn.w	r3, #3
 800f6fe:	617b      	str	r3, [r7, #20]
 800f700:	e025      	b.n	800f74e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d011      	beq.n	800f72c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800f708:	6839      	ldr	r1, [r7, #0]
 800f70a:	6938      	ldr	r0, [r7, #16]
 800f70c:	f000 fc58 	bl	800ffc0 <xQueueTakeMutexRecursive>
 800f710:	4603      	mov	r3, r0
 800f712:	2b01      	cmp	r3, #1
 800f714:	d01b      	beq.n	800f74e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d003      	beq.n	800f724 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800f71c:	f06f 0301 	mvn.w	r3, #1
 800f720:	617b      	str	r3, [r7, #20]
 800f722:	e014      	b.n	800f74e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800f724:	f06f 0302 	mvn.w	r3, #2
 800f728:	617b      	str	r3, [r7, #20]
 800f72a:	e010      	b.n	800f74e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800f72c:	6839      	ldr	r1, [r7, #0]
 800f72e:	6938      	ldr	r0, [r7, #16]
 800f730:	f000 fef6 	bl	8010520 <xQueueSemaphoreTake>
 800f734:	4603      	mov	r3, r0
 800f736:	2b01      	cmp	r3, #1
 800f738:	d009      	beq.n	800f74e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d003      	beq.n	800f748 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800f740:	f06f 0301 	mvn.w	r3, #1
 800f744:	617b      	str	r3, [r7, #20]
 800f746:	e002      	b.n	800f74e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800f748:	f06f 0302 	mvn.w	r3, #2
 800f74c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800f74e:	697b      	ldr	r3, [r7, #20]
}
 800f750:	4618      	mov	r0, r3
 800f752:	3718      	adds	r7, #24
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}

0800f758 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800f758:	b580      	push	{r7, lr}
 800f75a:	b086      	sub	sp, #24
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f023 0301 	bic.w	r3, r3, #1
 800f766:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f003 0301 	and.w	r3, r3, #1
 800f76e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800f770:	2300      	movs	r3, #0
 800f772:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f774:	f3ef 8305 	mrs	r3, IPSR
 800f778:	60bb      	str	r3, [r7, #8]
  return(result);
 800f77a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d003      	beq.n	800f788 <osMutexRelease+0x30>
    stat = osErrorISR;
 800f780:	f06f 0305 	mvn.w	r3, #5
 800f784:	617b      	str	r3, [r7, #20]
 800f786:	e01f      	b.n	800f7c8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800f788:	693b      	ldr	r3, [r7, #16]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d103      	bne.n	800f796 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800f78e:	f06f 0303 	mvn.w	r3, #3
 800f792:	617b      	str	r3, [r7, #20]
 800f794:	e018      	b.n	800f7c8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d009      	beq.n	800f7b0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800f79c:	6938      	ldr	r0, [r7, #16]
 800f79e:	f000 fbdb 	bl	800ff58 <xQueueGiveMutexRecursive>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	2b01      	cmp	r3, #1
 800f7a6:	d00f      	beq.n	800f7c8 <osMutexRelease+0x70>
        stat = osErrorResource;
 800f7a8:	f06f 0302 	mvn.w	r3, #2
 800f7ac:	617b      	str	r3, [r7, #20]
 800f7ae:	e00b      	b.n	800f7c8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	2100      	movs	r1, #0
 800f7b6:	6938      	ldr	r0, [r7, #16]
 800f7b8:	f000 fc38 	bl	801002c <xQueueGenericSend>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	2b01      	cmp	r3, #1
 800f7c0:	d002      	beq.n	800f7c8 <osMutexRelease+0x70>
        stat = osErrorResource;
 800f7c2:	f06f 0302 	mvn.w	r3, #2
 800f7c6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f7c8:	697b      	ldr	r3, [r7, #20]
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3718      	adds	r7, #24
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}

0800f7d2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f7d2:	b580      	push	{r7, lr}
 800f7d4:	b08a      	sub	sp, #40	; 0x28
 800f7d6:	af02      	add	r7, sp, #8
 800f7d8:	60f8      	str	r0, [r7, #12]
 800f7da:	60b9      	str	r1, [r7, #8]
 800f7dc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f7e2:	f3ef 8305 	mrs	r3, IPSR
 800f7e6:	613b      	str	r3, [r7, #16]
  return(result);
 800f7e8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d15f      	bne.n	800f8ae <osMessageQueueNew+0xdc>
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d05c      	beq.n	800f8ae <osMessageQueueNew+0xdc>
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d059      	beq.n	800f8ae <osMessageQueueNew+0xdc>
    mem = -1;
 800f7fa:	f04f 33ff 	mov.w	r3, #4294967295
 800f7fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d029      	beq.n	800f85a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	689b      	ldr	r3, [r3, #8]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d012      	beq.n	800f834 <osMessageQueueNew+0x62>
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	68db      	ldr	r3, [r3, #12]
 800f812:	2b4f      	cmp	r3, #79	; 0x4f
 800f814:	d90e      	bls.n	800f834 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d00a      	beq.n	800f834 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	695a      	ldr	r2, [r3, #20]
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	68b9      	ldr	r1, [r7, #8]
 800f826:	fb01 f303 	mul.w	r3, r1, r3
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d302      	bcc.n	800f834 <osMessageQueueNew+0x62>
        mem = 1;
 800f82e:	2301      	movs	r3, #1
 800f830:	61bb      	str	r3, [r7, #24]
 800f832:	e014      	b.n	800f85e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	689b      	ldr	r3, [r3, #8]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d110      	bne.n	800f85e <osMessageQueueNew+0x8c>
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	68db      	ldr	r3, [r3, #12]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d10c      	bne.n	800f85e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d108      	bne.n	800f85e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	695b      	ldr	r3, [r3, #20]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d104      	bne.n	800f85e <osMessageQueueNew+0x8c>
          mem = 0;
 800f854:	2300      	movs	r3, #0
 800f856:	61bb      	str	r3, [r7, #24]
 800f858:	e001      	b.n	800f85e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800f85a:	2300      	movs	r3, #0
 800f85c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f85e:	69bb      	ldr	r3, [r7, #24]
 800f860:	2b01      	cmp	r3, #1
 800f862:	d10b      	bne.n	800f87c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	691a      	ldr	r2, [r3, #16]
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	689b      	ldr	r3, [r3, #8]
 800f86c:	2100      	movs	r1, #0
 800f86e:	9100      	str	r1, [sp, #0]
 800f870:	68b9      	ldr	r1, [r7, #8]
 800f872:	68f8      	ldr	r0, [r7, #12]
 800f874:	f000 fa4e 	bl	800fd14 <xQueueGenericCreateStatic>
 800f878:	61f8      	str	r0, [r7, #28]
 800f87a:	e008      	b.n	800f88e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800f87c:	69bb      	ldr	r3, [r7, #24]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d105      	bne.n	800f88e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800f882:	2200      	movs	r2, #0
 800f884:	68b9      	ldr	r1, [r7, #8]
 800f886:	68f8      	ldr	r0, [r7, #12]
 800f888:	f000 fabc 	bl	800fe04 <xQueueGenericCreate>
 800f88c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f88e:	69fb      	ldr	r3, [r7, #28]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d00c      	beq.n	800f8ae <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d003      	beq.n	800f8a2 <osMessageQueueNew+0xd0>
        name = attr->name;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	617b      	str	r3, [r7, #20]
 800f8a0:	e001      	b.n	800f8a6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800f8a6:	6979      	ldr	r1, [r7, #20]
 800f8a8:	69f8      	ldr	r0, [r7, #28]
 800f8aa:	f001 fa0b 	bl	8010cc4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f8ae:	69fb      	ldr	r3, [r7, #28]
}
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	3720      	adds	r7, #32
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}

0800f8b8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b088      	sub	sp, #32
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	60f8      	str	r0, [r7, #12]
 800f8c0:	60b9      	str	r1, [r7, #8]
 800f8c2:	603b      	str	r3, [r7, #0]
 800f8c4:	4613      	mov	r3, r2
 800f8c6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f8d0:	f3ef 8305 	mrs	r3, IPSR
 800f8d4:	617b      	str	r3, [r7, #20]
  return(result);
 800f8d6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d028      	beq.n	800f92e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f8dc:	69bb      	ldr	r3, [r7, #24]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d005      	beq.n	800f8ee <osMessageQueuePut+0x36>
 800f8e2:	68bb      	ldr	r3, [r7, #8]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d002      	beq.n	800f8ee <osMessageQueuePut+0x36>
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d003      	beq.n	800f8f6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800f8ee:	f06f 0303 	mvn.w	r3, #3
 800f8f2:	61fb      	str	r3, [r7, #28]
 800f8f4:	e038      	b.n	800f968 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f8fa:	f107 0210 	add.w	r2, r7, #16
 800f8fe:	2300      	movs	r3, #0
 800f900:	68b9      	ldr	r1, [r7, #8]
 800f902:	69b8      	ldr	r0, [r7, #24]
 800f904:	f000 fc90 	bl	8010228 <xQueueGenericSendFromISR>
 800f908:	4603      	mov	r3, r0
 800f90a:	2b01      	cmp	r3, #1
 800f90c:	d003      	beq.n	800f916 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800f90e:	f06f 0302 	mvn.w	r3, #2
 800f912:	61fb      	str	r3, [r7, #28]
 800f914:	e028      	b.n	800f968 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800f916:	693b      	ldr	r3, [r7, #16]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d025      	beq.n	800f968 <osMessageQueuePut+0xb0>
 800f91c:	4b15      	ldr	r3, [pc, #84]	; (800f974 <osMessageQueuePut+0xbc>)
 800f91e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f922:	601a      	str	r2, [r3, #0]
 800f924:	f3bf 8f4f 	dsb	sy
 800f928:	f3bf 8f6f 	isb	sy
 800f92c:	e01c      	b.n	800f968 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f92e:	69bb      	ldr	r3, [r7, #24]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d002      	beq.n	800f93a <osMessageQueuePut+0x82>
 800f934:	68bb      	ldr	r3, [r7, #8]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d103      	bne.n	800f942 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800f93a:	f06f 0303 	mvn.w	r3, #3
 800f93e:	61fb      	str	r3, [r7, #28]
 800f940:	e012      	b.n	800f968 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f942:	2300      	movs	r3, #0
 800f944:	683a      	ldr	r2, [r7, #0]
 800f946:	68b9      	ldr	r1, [r7, #8]
 800f948:	69b8      	ldr	r0, [r7, #24]
 800f94a:	f000 fb6f 	bl	801002c <xQueueGenericSend>
 800f94e:	4603      	mov	r3, r0
 800f950:	2b01      	cmp	r3, #1
 800f952:	d009      	beq.n	800f968 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d003      	beq.n	800f962 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800f95a:	f06f 0301 	mvn.w	r3, #1
 800f95e:	61fb      	str	r3, [r7, #28]
 800f960:	e002      	b.n	800f968 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800f962:	f06f 0302 	mvn.w	r3, #2
 800f966:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f968:	69fb      	ldr	r3, [r7, #28]
}
 800f96a:	4618      	mov	r0, r3
 800f96c:	3720      	adds	r7, #32
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}
 800f972:	bf00      	nop
 800f974:	e000ed04 	.word	0xe000ed04

0800f978 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f978:	b580      	push	{r7, lr}
 800f97a:	b088      	sub	sp, #32
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	60f8      	str	r0, [r7, #12]
 800f980:	60b9      	str	r1, [r7, #8]
 800f982:	607a      	str	r2, [r7, #4]
 800f984:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f98a:	2300      	movs	r3, #0
 800f98c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f98e:	f3ef 8305 	mrs	r3, IPSR
 800f992:	617b      	str	r3, [r7, #20]
  return(result);
 800f994:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f996:	2b00      	cmp	r3, #0
 800f998:	d028      	beq.n	800f9ec <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f99a:	69bb      	ldr	r3, [r7, #24]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d005      	beq.n	800f9ac <osMessageQueueGet+0x34>
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d002      	beq.n	800f9ac <osMessageQueueGet+0x34>
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d003      	beq.n	800f9b4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800f9ac:	f06f 0303 	mvn.w	r3, #3
 800f9b0:	61fb      	str	r3, [r7, #28]
 800f9b2:	e037      	b.n	800fa24 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f9b8:	f107 0310 	add.w	r3, r7, #16
 800f9bc:	461a      	mov	r2, r3
 800f9be:	68b9      	ldr	r1, [r7, #8]
 800f9c0:	69b8      	ldr	r0, [r7, #24]
 800f9c2:	f000 ff9b 	bl	80108fc <xQueueReceiveFromISR>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	2b01      	cmp	r3, #1
 800f9ca:	d003      	beq.n	800f9d4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800f9cc:	f06f 0302 	mvn.w	r3, #2
 800f9d0:	61fb      	str	r3, [r7, #28]
 800f9d2:	e027      	b.n	800fa24 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800f9d4:	693b      	ldr	r3, [r7, #16]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d024      	beq.n	800fa24 <osMessageQueueGet+0xac>
 800f9da:	4b15      	ldr	r3, [pc, #84]	; (800fa30 <osMessageQueueGet+0xb8>)
 800f9dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9e0:	601a      	str	r2, [r3, #0]
 800f9e2:	f3bf 8f4f 	dsb	sy
 800f9e6:	f3bf 8f6f 	isb	sy
 800f9ea:	e01b      	b.n	800fa24 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f9ec:	69bb      	ldr	r3, [r7, #24]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d002      	beq.n	800f9f8 <osMessageQueueGet+0x80>
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d103      	bne.n	800fa00 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800f9f8:	f06f 0303 	mvn.w	r3, #3
 800f9fc:	61fb      	str	r3, [r7, #28]
 800f9fe:	e011      	b.n	800fa24 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fa00:	683a      	ldr	r2, [r7, #0]
 800fa02:	68b9      	ldr	r1, [r7, #8]
 800fa04:	69b8      	ldr	r0, [r7, #24]
 800fa06:	f000 fcab 	bl	8010360 <xQueueReceive>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	2b01      	cmp	r3, #1
 800fa0e:	d009      	beq.n	800fa24 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d003      	beq.n	800fa1e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800fa16:	f06f 0301 	mvn.w	r3, #1
 800fa1a:	61fb      	str	r3, [r7, #28]
 800fa1c:	e002      	b.n	800fa24 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800fa1e:	f06f 0302 	mvn.w	r3, #2
 800fa22:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800fa24:	69fb      	ldr	r3, [r7, #28]
}
 800fa26:	4618      	mov	r0, r3
 800fa28:	3720      	adds	r7, #32
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	bd80      	pop	{r7, pc}
 800fa2e:	bf00      	nop
 800fa30:	e000ed04 	.word	0xe000ed04

0800fa34 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b086      	sub	sp, #24
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800fa40:	693b      	ldr	r3, [r7, #16]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d102      	bne.n	800fa4c <osMessageQueueGetCount+0x18>
    count = 0U;
 800fa46:	2300      	movs	r3, #0
 800fa48:	617b      	str	r3, [r7, #20]
 800fa4a:	e00e      	b.n	800fa6a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa4c:	f3ef 8305 	mrs	r3, IPSR
 800fa50:	60fb      	str	r3, [r7, #12]
  return(result);
 800fa52:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d004      	beq.n	800fa62 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800fa58:	6938      	ldr	r0, [r7, #16]
 800fa5a:	f000 ffed 	bl	8010a38 <uxQueueMessagesWaitingFromISR>
 800fa5e:	6178      	str	r0, [r7, #20]
 800fa60:	e003      	b.n	800fa6a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800fa62:	6938      	ldr	r0, [r7, #16]
 800fa64:	f000 ffca 	bl	80109fc <uxQueueMessagesWaiting>
 800fa68:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800fa6a:	697b      	ldr	r3, [r7, #20]
}
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3718      	adds	r7, #24
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}

0800fa74 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800fa74:	b480      	push	{r7}
 800fa76:	b085      	sub	sp, #20
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	60f8      	str	r0, [r7, #12]
 800fa7c:	60b9      	str	r1, [r7, #8]
 800fa7e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	4a07      	ldr	r2, [pc, #28]	; (800faa0 <vApplicationGetIdleTaskMemory+0x2c>)
 800fa84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800fa86:	68bb      	ldr	r3, [r7, #8]
 800fa88:	4a06      	ldr	r2, [pc, #24]	; (800faa4 <vApplicationGetIdleTaskMemory+0x30>)
 800fa8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2280      	movs	r2, #128	; 0x80
 800fa90:	601a      	str	r2, [r3, #0]
}
 800fa92:	bf00      	nop
 800fa94:	3714      	adds	r7, #20
 800fa96:	46bd      	mov	sp, r7
 800fa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9c:	4770      	bx	lr
 800fa9e:	bf00      	nop
 800faa0:	20001570 	.word	0x20001570
 800faa4:	20001618 	.word	0x20001618

0800faa8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800faa8:	b480      	push	{r7}
 800faaa:	b085      	sub	sp, #20
 800faac:	af00      	add	r7, sp, #0
 800faae:	60f8      	str	r0, [r7, #12]
 800fab0:	60b9      	str	r1, [r7, #8]
 800fab2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	4a07      	ldr	r2, [pc, #28]	; (800fad4 <vApplicationGetTimerTaskMemory+0x2c>)
 800fab8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	4a06      	ldr	r2, [pc, #24]	; (800fad8 <vApplicationGetTimerTaskMemory+0x30>)
 800fabe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fac6:	601a      	str	r2, [r3, #0]
}
 800fac8:	bf00      	nop
 800faca:	3714      	adds	r7, #20
 800facc:	46bd      	mov	sp, r7
 800face:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad2:	4770      	bx	lr
 800fad4:	20001818 	.word	0x20001818
 800fad8:	200018c0 	.word	0x200018c0

0800fadc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fadc:	b480      	push	{r7}
 800fade:	b083      	sub	sp, #12
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	f103 0208 	add.w	r2, r3, #8
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f04f 32ff 	mov.w	r2, #4294967295
 800faf4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	f103 0208 	add.w	r2, r3, #8
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f103 0208 	add.w	r2, r3, #8
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fb10:	bf00      	nop
 800fb12:	370c      	adds	r7, #12
 800fb14:	46bd      	mov	sp, r7
 800fb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1a:	4770      	bx	lr

0800fb1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fb1c:	b480      	push	{r7}
 800fb1e:	b083      	sub	sp, #12
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2200      	movs	r2, #0
 800fb28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fb2a:	bf00      	nop
 800fb2c:	370c      	adds	r7, #12
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb34:	4770      	bx	lr

0800fb36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fb36:	b480      	push	{r7}
 800fb38:	b085      	sub	sp, #20
 800fb3a:	af00      	add	r7, sp, #0
 800fb3c:	6078      	str	r0, [r7, #4]
 800fb3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	685b      	ldr	r3, [r3, #4]
 800fb44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	68fa      	ldr	r2, [r7, #12]
 800fb4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	689a      	ldr	r2, [r3, #8]
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	689b      	ldr	r3, [r3, #8]
 800fb58:	683a      	ldr	r2, [r7, #0]
 800fb5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	683a      	ldr	r2, [r7, #0]
 800fb60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fb62:	683b      	ldr	r3, [r7, #0]
 800fb64:	687a      	ldr	r2, [r7, #4]
 800fb66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	1c5a      	adds	r2, r3, #1
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	601a      	str	r2, [r3, #0]
}
 800fb72:	bf00      	nop
 800fb74:	3714      	adds	r7, #20
 800fb76:	46bd      	mov	sp, r7
 800fb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7c:	4770      	bx	lr

0800fb7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fb7e:	b480      	push	{r7}
 800fb80:	b085      	sub	sp, #20
 800fb82:	af00      	add	r7, sp, #0
 800fb84:	6078      	str	r0, [r7, #4]
 800fb86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fb8e:	68bb      	ldr	r3, [r7, #8]
 800fb90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb94:	d103      	bne.n	800fb9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	691b      	ldr	r3, [r3, #16]
 800fb9a:	60fb      	str	r3, [r7, #12]
 800fb9c:	e00c      	b.n	800fbb8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	3308      	adds	r3, #8
 800fba2:	60fb      	str	r3, [r7, #12]
 800fba4:	e002      	b.n	800fbac <vListInsert+0x2e>
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	685b      	ldr	r3, [r3, #4]
 800fbaa:	60fb      	str	r3, [r7, #12]
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	685b      	ldr	r3, [r3, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	68ba      	ldr	r2, [r7, #8]
 800fbb4:	429a      	cmp	r2, r3
 800fbb6:	d2f6      	bcs.n	800fba6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	685a      	ldr	r2, [r3, #4]
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	685b      	ldr	r3, [r3, #4]
 800fbc4:	683a      	ldr	r2, [r7, #0]
 800fbc6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	68fa      	ldr	r2, [r7, #12]
 800fbcc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	683a      	ldr	r2, [r7, #0]
 800fbd2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	687a      	ldr	r2, [r7, #4]
 800fbd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	1c5a      	adds	r2, r3, #1
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	601a      	str	r2, [r3, #0]
}
 800fbe4:	bf00      	nop
 800fbe6:	3714      	adds	r7, #20
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbee:	4770      	bx	lr

0800fbf0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fbf0:	b480      	push	{r7}
 800fbf2:	b085      	sub	sp, #20
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	691b      	ldr	r3, [r3, #16]
 800fbfc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	685b      	ldr	r3, [r3, #4]
 800fc02:	687a      	ldr	r2, [r7, #4]
 800fc04:	6892      	ldr	r2, [r2, #8]
 800fc06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	689b      	ldr	r3, [r3, #8]
 800fc0c:	687a      	ldr	r2, [r7, #4]
 800fc0e:	6852      	ldr	r2, [r2, #4]
 800fc10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	685b      	ldr	r3, [r3, #4]
 800fc16:	687a      	ldr	r2, [r7, #4]
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d103      	bne.n	800fc24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	689a      	ldr	r2, [r3, #8]
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2200      	movs	r2, #0
 800fc28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	1e5a      	subs	r2, r3, #1
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	681b      	ldr	r3, [r3, #0]
}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	3714      	adds	r7, #20
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc42:	4770      	bx	lr

0800fc44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b084      	sub	sp, #16
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d10a      	bne.n	800fc6e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fc58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc5c:	f383 8811 	msr	BASEPRI, r3
 800fc60:	f3bf 8f6f 	isb	sy
 800fc64:	f3bf 8f4f 	dsb	sy
 800fc68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800fc6a:	bf00      	nop
 800fc6c:	e7fe      	b.n	800fc6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800fc6e:	f002 fd71 	bl	8012754 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	681a      	ldr	r2, [r3, #0]
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc7a:	68f9      	ldr	r1, [r7, #12]
 800fc7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fc7e:	fb01 f303 	mul.w	r3, r1, r3
 800fc82:	441a      	add	r2, r3
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	681a      	ldr	r2, [r3, #0]
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	681a      	ldr	r2, [r3, #0]
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc9e:	3b01      	subs	r3, #1
 800fca0:	68f9      	ldr	r1, [r7, #12]
 800fca2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fca4:	fb01 f303 	mul.w	r3, r1, r3
 800fca8:	441a      	add	r2, r3
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	22ff      	movs	r2, #255	; 0xff
 800fcb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	22ff      	movs	r2, #255	; 0xff
 800fcba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d114      	bne.n	800fcee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	691b      	ldr	r3, [r3, #16]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d01a      	beq.n	800fd02 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	3310      	adds	r3, #16
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	f001 fcdb 	bl	801168c <xTaskRemoveFromEventList>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d012      	beq.n	800fd02 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fcdc:	4b0c      	ldr	r3, [pc, #48]	; (800fd10 <xQueueGenericReset+0xcc>)
 800fcde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fce2:	601a      	str	r2, [r3, #0]
 800fce4:	f3bf 8f4f 	dsb	sy
 800fce8:	f3bf 8f6f 	isb	sy
 800fcec:	e009      	b.n	800fd02 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	3310      	adds	r3, #16
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f7ff fef2 	bl	800fadc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	3324      	adds	r3, #36	; 0x24
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7ff feed 	bl	800fadc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fd02:	f002 fd57 	bl	80127b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fd06:	2301      	movs	r3, #1
}
 800fd08:	4618      	mov	r0, r3
 800fd0a:	3710      	adds	r7, #16
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	bd80      	pop	{r7, pc}
 800fd10:	e000ed04 	.word	0xe000ed04

0800fd14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b08e      	sub	sp, #56	; 0x38
 800fd18:	af02      	add	r7, sp, #8
 800fd1a:	60f8      	str	r0, [r7, #12]
 800fd1c:	60b9      	str	r1, [r7, #8]
 800fd1e:	607a      	str	r2, [r7, #4]
 800fd20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d10a      	bne.n	800fd3e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800fd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd2c:	f383 8811 	msr	BASEPRI, r3
 800fd30:	f3bf 8f6f 	isb	sy
 800fd34:	f3bf 8f4f 	dsb	sy
 800fd38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fd3a:	bf00      	nop
 800fd3c:	e7fe      	b.n	800fd3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d10a      	bne.n	800fd5a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800fd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd48:	f383 8811 	msr	BASEPRI, r3
 800fd4c:	f3bf 8f6f 	isb	sy
 800fd50:	f3bf 8f4f 	dsb	sy
 800fd54:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fd56:	bf00      	nop
 800fd58:	e7fe      	b.n	800fd58 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d002      	beq.n	800fd66 <xQueueGenericCreateStatic+0x52>
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d001      	beq.n	800fd6a <xQueueGenericCreateStatic+0x56>
 800fd66:	2301      	movs	r3, #1
 800fd68:	e000      	b.n	800fd6c <xQueueGenericCreateStatic+0x58>
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d10a      	bne.n	800fd86 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800fd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd74:	f383 8811 	msr	BASEPRI, r3
 800fd78:	f3bf 8f6f 	isb	sy
 800fd7c:	f3bf 8f4f 	dsb	sy
 800fd80:	623b      	str	r3, [r7, #32]
}
 800fd82:	bf00      	nop
 800fd84:	e7fe      	b.n	800fd84 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d102      	bne.n	800fd92 <xQueueGenericCreateStatic+0x7e>
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d101      	bne.n	800fd96 <xQueueGenericCreateStatic+0x82>
 800fd92:	2301      	movs	r3, #1
 800fd94:	e000      	b.n	800fd98 <xQueueGenericCreateStatic+0x84>
 800fd96:	2300      	movs	r3, #0
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d10a      	bne.n	800fdb2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800fd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda0:	f383 8811 	msr	BASEPRI, r3
 800fda4:	f3bf 8f6f 	isb	sy
 800fda8:	f3bf 8f4f 	dsb	sy
 800fdac:	61fb      	str	r3, [r7, #28]
}
 800fdae:	bf00      	nop
 800fdb0:	e7fe      	b.n	800fdb0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fdb2:	2350      	movs	r3, #80	; 0x50
 800fdb4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fdb6:	697b      	ldr	r3, [r7, #20]
 800fdb8:	2b50      	cmp	r3, #80	; 0x50
 800fdba:	d00a      	beq.n	800fdd2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800fdbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc0:	f383 8811 	msr	BASEPRI, r3
 800fdc4:	f3bf 8f6f 	isb	sy
 800fdc8:	f3bf 8f4f 	dsb	sy
 800fdcc:	61bb      	str	r3, [r7, #24]
}
 800fdce:	bf00      	nop
 800fdd0:	e7fe      	b.n	800fdd0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fdd2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800fdd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d00d      	beq.n	800fdfa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fdde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde0:	2201      	movs	r2, #1
 800fde2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fde6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fdea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdec:	9300      	str	r3, [sp, #0]
 800fdee:	4613      	mov	r3, r2
 800fdf0:	687a      	ldr	r2, [r7, #4]
 800fdf2:	68b9      	ldr	r1, [r7, #8]
 800fdf4:	68f8      	ldr	r0, [r7, #12]
 800fdf6:	f000 f83f 	bl	800fe78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	3730      	adds	r7, #48	; 0x30
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}

0800fe04 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b08a      	sub	sp, #40	; 0x28
 800fe08:	af02      	add	r7, sp, #8
 800fe0a:	60f8      	str	r0, [r7, #12]
 800fe0c:	60b9      	str	r1, [r7, #8]
 800fe0e:	4613      	mov	r3, r2
 800fe10:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d10a      	bne.n	800fe2e <xQueueGenericCreate+0x2a>
	__asm volatile
 800fe18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe1c:	f383 8811 	msr	BASEPRI, r3
 800fe20:	f3bf 8f6f 	isb	sy
 800fe24:	f3bf 8f4f 	dsb	sy
 800fe28:	613b      	str	r3, [r7, #16]
}
 800fe2a:	bf00      	nop
 800fe2c:	e7fe      	b.n	800fe2c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	68ba      	ldr	r2, [r7, #8]
 800fe32:	fb02 f303 	mul.w	r3, r2, r3
 800fe36:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fe38:	69fb      	ldr	r3, [r7, #28]
 800fe3a:	3350      	adds	r3, #80	; 0x50
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f002 fdab 	bl	8012998 <pvPortMalloc>
 800fe42:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fe44:	69bb      	ldr	r3, [r7, #24]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d011      	beq.n	800fe6e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fe4a:	69bb      	ldr	r3, [r7, #24]
 800fe4c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	3350      	adds	r3, #80	; 0x50
 800fe52:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fe54:	69bb      	ldr	r3, [r7, #24]
 800fe56:	2200      	movs	r2, #0
 800fe58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fe5c:	79fa      	ldrb	r2, [r7, #7]
 800fe5e:	69bb      	ldr	r3, [r7, #24]
 800fe60:	9300      	str	r3, [sp, #0]
 800fe62:	4613      	mov	r3, r2
 800fe64:	697a      	ldr	r2, [r7, #20]
 800fe66:	68b9      	ldr	r1, [r7, #8]
 800fe68:	68f8      	ldr	r0, [r7, #12]
 800fe6a:	f000 f805 	bl	800fe78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fe6e:	69bb      	ldr	r3, [r7, #24]
	}
 800fe70:	4618      	mov	r0, r3
 800fe72:	3720      	adds	r7, #32
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}

0800fe78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b084      	sub	sp, #16
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	60f8      	str	r0, [r7, #12]
 800fe80:	60b9      	str	r1, [r7, #8]
 800fe82:	607a      	str	r2, [r7, #4]
 800fe84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d103      	bne.n	800fe94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fe8c:	69bb      	ldr	r3, [r7, #24]
 800fe8e:	69ba      	ldr	r2, [r7, #24]
 800fe90:	601a      	str	r2, [r3, #0]
 800fe92:	e002      	b.n	800fe9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fe94:	69bb      	ldr	r3, [r7, #24]
 800fe96:	687a      	ldr	r2, [r7, #4]
 800fe98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fe9a:	69bb      	ldr	r3, [r7, #24]
 800fe9c:	68fa      	ldr	r2, [r7, #12]
 800fe9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fea0:	69bb      	ldr	r3, [r7, #24]
 800fea2:	68ba      	ldr	r2, [r7, #8]
 800fea4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fea6:	2101      	movs	r1, #1
 800fea8:	69b8      	ldr	r0, [r7, #24]
 800feaa:	f7ff fecb 	bl	800fc44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800feae:	69bb      	ldr	r3, [r7, #24]
 800feb0:	78fa      	ldrb	r2, [r7, #3]
 800feb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800feb6:	bf00      	nop
 800feb8:	3710      	adds	r7, #16
 800feba:	46bd      	mov	sp, r7
 800febc:	bd80      	pop	{r7, pc}

0800febe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800febe:	b580      	push	{r7, lr}
 800fec0:	b082      	sub	sp, #8
 800fec2:	af00      	add	r7, sp, #0
 800fec4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d00e      	beq.n	800feea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	2200      	movs	r2, #0
 800fed0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2200      	movs	r2, #0
 800fed6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2200      	movs	r2, #0
 800fedc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fede:	2300      	movs	r3, #0
 800fee0:	2200      	movs	r2, #0
 800fee2:	2100      	movs	r1, #0
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f000 f8a1 	bl	801002c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800feea:	bf00      	nop
 800feec:	3708      	adds	r7, #8
 800feee:	46bd      	mov	sp, r7
 800fef0:	bd80      	pop	{r7, pc}

0800fef2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800fef2:	b580      	push	{r7, lr}
 800fef4:	b086      	sub	sp, #24
 800fef6:	af00      	add	r7, sp, #0
 800fef8:	4603      	mov	r3, r0
 800fefa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fefc:	2301      	movs	r3, #1
 800fefe:	617b      	str	r3, [r7, #20]
 800ff00:	2300      	movs	r3, #0
 800ff02:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ff04:	79fb      	ldrb	r3, [r7, #7]
 800ff06:	461a      	mov	r2, r3
 800ff08:	6939      	ldr	r1, [r7, #16]
 800ff0a:	6978      	ldr	r0, [r7, #20]
 800ff0c:	f7ff ff7a 	bl	800fe04 <xQueueGenericCreate>
 800ff10:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ff12:	68f8      	ldr	r0, [r7, #12]
 800ff14:	f7ff ffd3 	bl	800febe <prvInitialiseMutex>

		return xNewQueue;
 800ff18:	68fb      	ldr	r3, [r7, #12]
	}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	3718      	adds	r7, #24
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd80      	pop	{r7, pc}

0800ff22 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ff22:	b580      	push	{r7, lr}
 800ff24:	b088      	sub	sp, #32
 800ff26:	af02      	add	r7, sp, #8
 800ff28:	4603      	mov	r3, r0
 800ff2a:	6039      	str	r1, [r7, #0]
 800ff2c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ff2e:	2301      	movs	r3, #1
 800ff30:	617b      	str	r3, [r7, #20]
 800ff32:	2300      	movs	r3, #0
 800ff34:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ff36:	79fb      	ldrb	r3, [r7, #7]
 800ff38:	9300      	str	r3, [sp, #0]
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	6939      	ldr	r1, [r7, #16]
 800ff40:	6978      	ldr	r0, [r7, #20]
 800ff42:	f7ff fee7 	bl	800fd14 <xQueueGenericCreateStatic>
 800ff46:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ff48:	68f8      	ldr	r0, [r7, #12]
 800ff4a:	f7ff ffb8 	bl	800febe <prvInitialiseMutex>

		return xNewQueue;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
	}
 800ff50:	4618      	mov	r0, r3
 800ff52:	3718      	adds	r7, #24
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}

0800ff58 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800ff58:	b590      	push	{r4, r7, lr}
 800ff5a:	b087      	sub	sp, #28
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ff64:	693b      	ldr	r3, [r7, #16]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d10a      	bne.n	800ff80 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800ff6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff6e:	f383 8811 	msr	BASEPRI, r3
 800ff72:	f3bf 8f6f 	isb	sy
 800ff76:	f3bf 8f4f 	dsb	sy
 800ff7a:	60fb      	str	r3, [r7, #12]
}
 800ff7c:	bf00      	nop
 800ff7e:	e7fe      	b.n	800ff7e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	689c      	ldr	r4, [r3, #8]
 800ff84:	f001 fd7c 	bl	8011a80 <xTaskGetCurrentTaskHandle>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	429c      	cmp	r4, r3
 800ff8c:	d111      	bne.n	800ffb2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800ff8e:	693b      	ldr	r3, [r7, #16]
 800ff90:	68db      	ldr	r3, [r3, #12]
 800ff92:	1e5a      	subs	r2, r3, #1
 800ff94:	693b      	ldr	r3, [r7, #16]
 800ff96:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800ff98:	693b      	ldr	r3, [r7, #16]
 800ff9a:	68db      	ldr	r3, [r3, #12]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d105      	bne.n	800ffac <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	2100      	movs	r1, #0
 800ffa6:	6938      	ldr	r0, [r7, #16]
 800ffa8:	f000 f840 	bl	801002c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800ffac:	2301      	movs	r3, #1
 800ffae:	617b      	str	r3, [r7, #20]
 800ffb0:	e001      	b.n	800ffb6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800ffb6:	697b      	ldr	r3, [r7, #20]
	}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	371c      	adds	r7, #28
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd90      	pop	{r4, r7, pc}

0800ffc0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800ffc0:	b590      	push	{r4, r7, lr}
 800ffc2:	b087      	sub	sp, #28
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d10a      	bne.n	800ffea <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800ffd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffd8:	f383 8811 	msr	BASEPRI, r3
 800ffdc:	f3bf 8f6f 	isb	sy
 800ffe0:	f3bf 8f4f 	dsb	sy
 800ffe4:	60fb      	str	r3, [r7, #12]
}
 800ffe6:	bf00      	nop
 800ffe8:	e7fe      	b.n	800ffe8 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ffea:	693b      	ldr	r3, [r7, #16]
 800ffec:	689c      	ldr	r4, [r3, #8]
 800ffee:	f001 fd47 	bl	8011a80 <xTaskGetCurrentTaskHandle>
 800fff2:	4603      	mov	r3, r0
 800fff4:	429c      	cmp	r4, r3
 800fff6:	d107      	bne.n	8010008 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800fff8:	693b      	ldr	r3, [r7, #16]
 800fffa:	68db      	ldr	r3, [r3, #12]
 800fffc:	1c5a      	adds	r2, r3, #1
 800fffe:	693b      	ldr	r3, [r7, #16]
 8010000:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8010002:	2301      	movs	r3, #1
 8010004:	617b      	str	r3, [r7, #20]
 8010006:	e00c      	b.n	8010022 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8010008:	6839      	ldr	r1, [r7, #0]
 801000a:	6938      	ldr	r0, [r7, #16]
 801000c:	f000 fa88 	bl	8010520 <xQueueSemaphoreTake>
 8010010:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d004      	beq.n	8010022 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010018:	693b      	ldr	r3, [r7, #16]
 801001a:	68db      	ldr	r3, [r3, #12]
 801001c:	1c5a      	adds	r2, r3, #1
 801001e:	693b      	ldr	r3, [r7, #16]
 8010020:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8010022:	697b      	ldr	r3, [r7, #20]
	}
 8010024:	4618      	mov	r0, r3
 8010026:	371c      	adds	r7, #28
 8010028:	46bd      	mov	sp, r7
 801002a:	bd90      	pop	{r4, r7, pc}

0801002c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b08e      	sub	sp, #56	; 0x38
 8010030:	af00      	add	r7, sp, #0
 8010032:	60f8      	str	r0, [r7, #12]
 8010034:	60b9      	str	r1, [r7, #8]
 8010036:	607a      	str	r2, [r7, #4]
 8010038:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801003a:	2300      	movs	r3, #0
 801003c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010044:	2b00      	cmp	r3, #0
 8010046:	d10a      	bne.n	801005e <xQueueGenericSend+0x32>
	__asm volatile
 8010048:	f04f 0350 	mov.w	r3, #80	; 0x50
 801004c:	f383 8811 	msr	BASEPRI, r3
 8010050:	f3bf 8f6f 	isb	sy
 8010054:	f3bf 8f4f 	dsb	sy
 8010058:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801005a:	bf00      	nop
 801005c:	e7fe      	b.n	801005c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d103      	bne.n	801006c <xQueueGenericSend+0x40>
 8010064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010068:	2b00      	cmp	r3, #0
 801006a:	d101      	bne.n	8010070 <xQueueGenericSend+0x44>
 801006c:	2301      	movs	r3, #1
 801006e:	e000      	b.n	8010072 <xQueueGenericSend+0x46>
 8010070:	2300      	movs	r3, #0
 8010072:	2b00      	cmp	r3, #0
 8010074:	d10a      	bne.n	801008c <xQueueGenericSend+0x60>
	__asm volatile
 8010076:	f04f 0350 	mov.w	r3, #80	; 0x50
 801007a:	f383 8811 	msr	BASEPRI, r3
 801007e:	f3bf 8f6f 	isb	sy
 8010082:	f3bf 8f4f 	dsb	sy
 8010086:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010088:	bf00      	nop
 801008a:	e7fe      	b.n	801008a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801008c:	683b      	ldr	r3, [r7, #0]
 801008e:	2b02      	cmp	r3, #2
 8010090:	d103      	bne.n	801009a <xQueueGenericSend+0x6e>
 8010092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010096:	2b01      	cmp	r3, #1
 8010098:	d101      	bne.n	801009e <xQueueGenericSend+0x72>
 801009a:	2301      	movs	r3, #1
 801009c:	e000      	b.n	80100a0 <xQueueGenericSend+0x74>
 801009e:	2300      	movs	r3, #0
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d10a      	bne.n	80100ba <xQueueGenericSend+0x8e>
	__asm volatile
 80100a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a8:	f383 8811 	msr	BASEPRI, r3
 80100ac:	f3bf 8f6f 	isb	sy
 80100b0:	f3bf 8f4f 	dsb	sy
 80100b4:	623b      	str	r3, [r7, #32]
}
 80100b6:	bf00      	nop
 80100b8:	e7fe      	b.n	80100b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80100ba:	f001 fcf1 	bl	8011aa0 <xTaskGetSchedulerState>
 80100be:	4603      	mov	r3, r0
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d102      	bne.n	80100ca <xQueueGenericSend+0x9e>
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d101      	bne.n	80100ce <xQueueGenericSend+0xa2>
 80100ca:	2301      	movs	r3, #1
 80100cc:	e000      	b.n	80100d0 <xQueueGenericSend+0xa4>
 80100ce:	2300      	movs	r3, #0
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d10a      	bne.n	80100ea <xQueueGenericSend+0xbe>
	__asm volatile
 80100d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100d8:	f383 8811 	msr	BASEPRI, r3
 80100dc:	f3bf 8f6f 	isb	sy
 80100e0:	f3bf 8f4f 	dsb	sy
 80100e4:	61fb      	str	r3, [r7, #28]
}
 80100e6:	bf00      	nop
 80100e8:	e7fe      	b.n	80100e8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80100ea:	f002 fb33 	bl	8012754 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80100ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80100f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100f6:	429a      	cmp	r2, r3
 80100f8:	d302      	bcc.n	8010100 <xQueueGenericSend+0xd4>
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	2b02      	cmp	r3, #2
 80100fe:	d129      	bne.n	8010154 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010100:	683a      	ldr	r2, [r7, #0]
 8010102:	68b9      	ldr	r1, [r7, #8]
 8010104:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010106:	f000 fccd 	bl	8010aa4 <prvCopyDataToQueue>
 801010a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801010c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801010e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010110:	2b00      	cmp	r3, #0
 8010112:	d010      	beq.n	8010136 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010116:	3324      	adds	r3, #36	; 0x24
 8010118:	4618      	mov	r0, r3
 801011a:	f001 fab7 	bl	801168c <xTaskRemoveFromEventList>
 801011e:	4603      	mov	r3, r0
 8010120:	2b00      	cmp	r3, #0
 8010122:	d013      	beq.n	801014c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010124:	4b3f      	ldr	r3, [pc, #252]	; (8010224 <xQueueGenericSend+0x1f8>)
 8010126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801012a:	601a      	str	r2, [r3, #0]
 801012c:	f3bf 8f4f 	dsb	sy
 8010130:	f3bf 8f6f 	isb	sy
 8010134:	e00a      	b.n	801014c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010138:	2b00      	cmp	r3, #0
 801013a:	d007      	beq.n	801014c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801013c:	4b39      	ldr	r3, [pc, #228]	; (8010224 <xQueueGenericSend+0x1f8>)
 801013e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010142:	601a      	str	r2, [r3, #0]
 8010144:	f3bf 8f4f 	dsb	sy
 8010148:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801014c:	f002 fb32 	bl	80127b4 <vPortExitCritical>
				return pdPASS;
 8010150:	2301      	movs	r3, #1
 8010152:	e063      	b.n	801021c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d103      	bne.n	8010162 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801015a:	f002 fb2b 	bl	80127b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801015e:	2300      	movs	r3, #0
 8010160:	e05c      	b.n	801021c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010164:	2b00      	cmp	r3, #0
 8010166:	d106      	bne.n	8010176 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010168:	f107 0314 	add.w	r3, r7, #20
 801016c:	4618      	mov	r0, r3
 801016e:	f001 faf1 	bl	8011754 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010172:	2301      	movs	r3, #1
 8010174:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010176:	f002 fb1d 	bl	80127b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801017a:	f001 f85d 	bl	8011238 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801017e:	f002 fae9 	bl	8012754 <vPortEnterCritical>
 8010182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010184:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010188:	b25b      	sxtb	r3, r3
 801018a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801018e:	d103      	bne.n	8010198 <xQueueGenericSend+0x16c>
 8010190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010192:	2200      	movs	r2, #0
 8010194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801019a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801019e:	b25b      	sxtb	r3, r3
 80101a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101a4:	d103      	bne.n	80101ae <xQueueGenericSend+0x182>
 80101a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101a8:	2200      	movs	r2, #0
 80101aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80101ae:	f002 fb01 	bl	80127b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80101b2:	1d3a      	adds	r2, r7, #4
 80101b4:	f107 0314 	add.w	r3, r7, #20
 80101b8:	4611      	mov	r1, r2
 80101ba:	4618      	mov	r0, r3
 80101bc:	f001 fae0 	bl	8011780 <xTaskCheckForTimeOut>
 80101c0:	4603      	mov	r3, r0
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d124      	bne.n	8010210 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80101c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101c8:	f000 fd64 	bl	8010c94 <prvIsQueueFull>
 80101cc:	4603      	mov	r3, r0
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d018      	beq.n	8010204 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80101d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101d4:	3310      	adds	r3, #16
 80101d6:	687a      	ldr	r2, [r7, #4]
 80101d8:	4611      	mov	r1, r2
 80101da:	4618      	mov	r0, r3
 80101dc:	f001 fa06 	bl	80115ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80101e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101e2:	f000 fcef 	bl	8010bc4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80101e6:	f001 f835 	bl	8011254 <xTaskResumeAll>
 80101ea:	4603      	mov	r3, r0
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	f47f af7c 	bne.w	80100ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80101f2:	4b0c      	ldr	r3, [pc, #48]	; (8010224 <xQueueGenericSend+0x1f8>)
 80101f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101f8:	601a      	str	r2, [r3, #0]
 80101fa:	f3bf 8f4f 	dsb	sy
 80101fe:	f3bf 8f6f 	isb	sy
 8010202:	e772      	b.n	80100ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010206:	f000 fcdd 	bl	8010bc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801020a:	f001 f823 	bl	8011254 <xTaskResumeAll>
 801020e:	e76c      	b.n	80100ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010212:	f000 fcd7 	bl	8010bc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010216:	f001 f81d 	bl	8011254 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801021a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801021c:	4618      	mov	r0, r3
 801021e:	3738      	adds	r7, #56	; 0x38
 8010220:	46bd      	mov	sp, r7
 8010222:	bd80      	pop	{r7, pc}
 8010224:	e000ed04 	.word	0xe000ed04

08010228 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b090      	sub	sp, #64	; 0x40
 801022c:	af00      	add	r7, sp, #0
 801022e:	60f8      	str	r0, [r7, #12]
 8010230:	60b9      	str	r1, [r7, #8]
 8010232:	607a      	str	r2, [r7, #4]
 8010234:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801023a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801023c:	2b00      	cmp	r3, #0
 801023e:	d10a      	bne.n	8010256 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010244:	f383 8811 	msr	BASEPRI, r3
 8010248:	f3bf 8f6f 	isb	sy
 801024c:	f3bf 8f4f 	dsb	sy
 8010250:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010252:	bf00      	nop
 8010254:	e7fe      	b.n	8010254 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010256:	68bb      	ldr	r3, [r7, #8]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d103      	bne.n	8010264 <xQueueGenericSendFromISR+0x3c>
 801025c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801025e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010260:	2b00      	cmp	r3, #0
 8010262:	d101      	bne.n	8010268 <xQueueGenericSendFromISR+0x40>
 8010264:	2301      	movs	r3, #1
 8010266:	e000      	b.n	801026a <xQueueGenericSendFromISR+0x42>
 8010268:	2300      	movs	r3, #0
 801026a:	2b00      	cmp	r3, #0
 801026c:	d10a      	bne.n	8010284 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801026e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010272:	f383 8811 	msr	BASEPRI, r3
 8010276:	f3bf 8f6f 	isb	sy
 801027a:	f3bf 8f4f 	dsb	sy
 801027e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010280:	bf00      	nop
 8010282:	e7fe      	b.n	8010282 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	2b02      	cmp	r3, #2
 8010288:	d103      	bne.n	8010292 <xQueueGenericSendFromISR+0x6a>
 801028a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801028c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801028e:	2b01      	cmp	r3, #1
 8010290:	d101      	bne.n	8010296 <xQueueGenericSendFromISR+0x6e>
 8010292:	2301      	movs	r3, #1
 8010294:	e000      	b.n	8010298 <xQueueGenericSendFromISR+0x70>
 8010296:	2300      	movs	r3, #0
 8010298:	2b00      	cmp	r3, #0
 801029a:	d10a      	bne.n	80102b2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801029c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102a0:	f383 8811 	msr	BASEPRI, r3
 80102a4:	f3bf 8f6f 	isb	sy
 80102a8:	f3bf 8f4f 	dsb	sy
 80102ac:	623b      	str	r3, [r7, #32]
}
 80102ae:	bf00      	nop
 80102b0:	e7fe      	b.n	80102b0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80102b2:	f002 fb31 	bl	8012918 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80102b6:	f3ef 8211 	mrs	r2, BASEPRI
 80102ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102be:	f383 8811 	msr	BASEPRI, r3
 80102c2:	f3bf 8f6f 	isb	sy
 80102c6:	f3bf 8f4f 	dsb	sy
 80102ca:	61fa      	str	r2, [r7, #28]
 80102cc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80102ce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80102d0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80102d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80102d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102da:	429a      	cmp	r2, r3
 80102dc:	d302      	bcc.n	80102e4 <xQueueGenericSendFromISR+0xbc>
 80102de:	683b      	ldr	r3, [r7, #0]
 80102e0:	2b02      	cmp	r3, #2
 80102e2:	d12f      	bne.n	8010344 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80102e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80102ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80102ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80102f4:	683a      	ldr	r2, [r7, #0]
 80102f6:	68b9      	ldr	r1, [r7, #8]
 80102f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80102fa:	f000 fbd3 	bl	8010aa4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80102fe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8010302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010306:	d112      	bne.n	801032e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801030a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801030c:	2b00      	cmp	r3, #0
 801030e:	d016      	beq.n	801033e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010312:	3324      	adds	r3, #36	; 0x24
 8010314:	4618      	mov	r0, r3
 8010316:	f001 f9b9 	bl	801168c <xTaskRemoveFromEventList>
 801031a:	4603      	mov	r3, r0
 801031c:	2b00      	cmp	r3, #0
 801031e:	d00e      	beq.n	801033e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d00b      	beq.n	801033e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	2201      	movs	r2, #1
 801032a:	601a      	str	r2, [r3, #0]
 801032c:	e007      	b.n	801033e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801032e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010332:	3301      	adds	r3, #1
 8010334:	b2db      	uxtb	r3, r3
 8010336:	b25a      	sxtb	r2, r3
 8010338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801033a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801033e:	2301      	movs	r3, #1
 8010340:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010342:	e001      	b.n	8010348 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010344:	2300      	movs	r3, #0
 8010346:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801034a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801034c:	697b      	ldr	r3, [r7, #20]
 801034e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010352:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010356:	4618      	mov	r0, r3
 8010358:	3740      	adds	r7, #64	; 0x40
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}
	...

08010360 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b08c      	sub	sp, #48	; 0x30
 8010364:	af00      	add	r7, sp, #0
 8010366:	60f8      	str	r0, [r7, #12]
 8010368:	60b9      	str	r1, [r7, #8]
 801036a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801036c:	2300      	movs	r3, #0
 801036e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010376:	2b00      	cmp	r3, #0
 8010378:	d10a      	bne.n	8010390 <xQueueReceive+0x30>
	__asm volatile
 801037a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801037e:	f383 8811 	msr	BASEPRI, r3
 8010382:	f3bf 8f6f 	isb	sy
 8010386:	f3bf 8f4f 	dsb	sy
 801038a:	623b      	str	r3, [r7, #32]
}
 801038c:	bf00      	nop
 801038e:	e7fe      	b.n	801038e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010390:	68bb      	ldr	r3, [r7, #8]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d103      	bne.n	801039e <xQueueReceive+0x3e>
 8010396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801039a:	2b00      	cmp	r3, #0
 801039c:	d101      	bne.n	80103a2 <xQueueReceive+0x42>
 801039e:	2301      	movs	r3, #1
 80103a0:	e000      	b.n	80103a4 <xQueueReceive+0x44>
 80103a2:	2300      	movs	r3, #0
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d10a      	bne.n	80103be <xQueueReceive+0x5e>
	__asm volatile
 80103a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ac:	f383 8811 	msr	BASEPRI, r3
 80103b0:	f3bf 8f6f 	isb	sy
 80103b4:	f3bf 8f4f 	dsb	sy
 80103b8:	61fb      	str	r3, [r7, #28]
}
 80103ba:	bf00      	nop
 80103bc:	e7fe      	b.n	80103bc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80103be:	f001 fb6f 	bl	8011aa0 <xTaskGetSchedulerState>
 80103c2:	4603      	mov	r3, r0
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d102      	bne.n	80103ce <xQueueReceive+0x6e>
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d101      	bne.n	80103d2 <xQueueReceive+0x72>
 80103ce:	2301      	movs	r3, #1
 80103d0:	e000      	b.n	80103d4 <xQueueReceive+0x74>
 80103d2:	2300      	movs	r3, #0
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d10a      	bne.n	80103ee <xQueueReceive+0x8e>
	__asm volatile
 80103d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103dc:	f383 8811 	msr	BASEPRI, r3
 80103e0:	f3bf 8f6f 	isb	sy
 80103e4:	f3bf 8f4f 	dsb	sy
 80103e8:	61bb      	str	r3, [r7, #24]
}
 80103ea:	bf00      	nop
 80103ec:	e7fe      	b.n	80103ec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80103ee:	f002 f9b1 	bl	8012754 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80103f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80103f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d01f      	beq.n	801043e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80103fe:	68b9      	ldr	r1, [r7, #8]
 8010400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010402:	f000 fbb9 	bl	8010b78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010408:	1e5a      	subs	r2, r3, #1
 801040a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801040c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801040e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010410:	691b      	ldr	r3, [r3, #16]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d00f      	beq.n	8010436 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010418:	3310      	adds	r3, #16
 801041a:	4618      	mov	r0, r3
 801041c:	f001 f936 	bl	801168c <xTaskRemoveFromEventList>
 8010420:	4603      	mov	r3, r0
 8010422:	2b00      	cmp	r3, #0
 8010424:	d007      	beq.n	8010436 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010426:	4b3d      	ldr	r3, [pc, #244]	; (801051c <xQueueReceive+0x1bc>)
 8010428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801042c:	601a      	str	r2, [r3, #0]
 801042e:	f3bf 8f4f 	dsb	sy
 8010432:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010436:	f002 f9bd 	bl	80127b4 <vPortExitCritical>
				return pdPASS;
 801043a:	2301      	movs	r3, #1
 801043c:	e069      	b.n	8010512 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d103      	bne.n	801044c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010444:	f002 f9b6 	bl	80127b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010448:	2300      	movs	r3, #0
 801044a:	e062      	b.n	8010512 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801044c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801044e:	2b00      	cmp	r3, #0
 8010450:	d106      	bne.n	8010460 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010452:	f107 0310 	add.w	r3, r7, #16
 8010456:	4618      	mov	r0, r3
 8010458:	f001 f97c 	bl	8011754 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801045c:	2301      	movs	r3, #1
 801045e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010460:	f002 f9a8 	bl	80127b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010464:	f000 fee8 	bl	8011238 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010468:	f002 f974 	bl	8012754 <vPortEnterCritical>
 801046c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801046e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010472:	b25b      	sxtb	r3, r3
 8010474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010478:	d103      	bne.n	8010482 <xQueueReceive+0x122>
 801047a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801047c:	2200      	movs	r2, #0
 801047e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010484:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010488:	b25b      	sxtb	r3, r3
 801048a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801048e:	d103      	bne.n	8010498 <xQueueReceive+0x138>
 8010490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010492:	2200      	movs	r2, #0
 8010494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010498:	f002 f98c 	bl	80127b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801049c:	1d3a      	adds	r2, r7, #4
 801049e:	f107 0310 	add.w	r3, r7, #16
 80104a2:	4611      	mov	r1, r2
 80104a4:	4618      	mov	r0, r3
 80104a6:	f001 f96b 	bl	8011780 <xTaskCheckForTimeOut>
 80104aa:	4603      	mov	r3, r0
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d123      	bne.n	80104f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80104b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104b2:	f000 fbd9 	bl	8010c68 <prvIsQueueEmpty>
 80104b6:	4603      	mov	r3, r0
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d017      	beq.n	80104ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80104bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104be:	3324      	adds	r3, #36	; 0x24
 80104c0:	687a      	ldr	r2, [r7, #4]
 80104c2:	4611      	mov	r1, r2
 80104c4:	4618      	mov	r0, r3
 80104c6:	f001 f891 	bl	80115ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80104ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104cc:	f000 fb7a 	bl	8010bc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80104d0:	f000 fec0 	bl	8011254 <xTaskResumeAll>
 80104d4:	4603      	mov	r3, r0
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d189      	bne.n	80103ee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80104da:	4b10      	ldr	r3, [pc, #64]	; (801051c <xQueueReceive+0x1bc>)
 80104dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104e0:	601a      	str	r2, [r3, #0]
 80104e2:	f3bf 8f4f 	dsb	sy
 80104e6:	f3bf 8f6f 	isb	sy
 80104ea:	e780      	b.n	80103ee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80104ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104ee:	f000 fb69 	bl	8010bc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80104f2:	f000 feaf 	bl	8011254 <xTaskResumeAll>
 80104f6:	e77a      	b.n	80103ee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80104f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104fa:	f000 fb63 	bl	8010bc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80104fe:	f000 fea9 	bl	8011254 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010502:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010504:	f000 fbb0 	bl	8010c68 <prvIsQueueEmpty>
 8010508:	4603      	mov	r3, r0
 801050a:	2b00      	cmp	r3, #0
 801050c:	f43f af6f 	beq.w	80103ee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010510:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010512:	4618      	mov	r0, r3
 8010514:	3730      	adds	r7, #48	; 0x30
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}
 801051a:	bf00      	nop
 801051c:	e000ed04 	.word	0xe000ed04

08010520 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b08e      	sub	sp, #56	; 0x38
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
 8010528:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801052a:	2300      	movs	r3, #0
 801052c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010532:	2300      	movs	r3, #0
 8010534:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010538:	2b00      	cmp	r3, #0
 801053a:	d10a      	bne.n	8010552 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801053c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010540:	f383 8811 	msr	BASEPRI, r3
 8010544:	f3bf 8f6f 	isb	sy
 8010548:	f3bf 8f4f 	dsb	sy
 801054c:	623b      	str	r3, [r7, #32]
}
 801054e:	bf00      	nop
 8010550:	e7fe      	b.n	8010550 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010556:	2b00      	cmp	r3, #0
 8010558:	d00a      	beq.n	8010570 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801055a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801055e:	f383 8811 	msr	BASEPRI, r3
 8010562:	f3bf 8f6f 	isb	sy
 8010566:	f3bf 8f4f 	dsb	sy
 801056a:	61fb      	str	r3, [r7, #28]
}
 801056c:	bf00      	nop
 801056e:	e7fe      	b.n	801056e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010570:	f001 fa96 	bl	8011aa0 <xTaskGetSchedulerState>
 8010574:	4603      	mov	r3, r0
 8010576:	2b00      	cmp	r3, #0
 8010578:	d102      	bne.n	8010580 <xQueueSemaphoreTake+0x60>
 801057a:	683b      	ldr	r3, [r7, #0]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d101      	bne.n	8010584 <xQueueSemaphoreTake+0x64>
 8010580:	2301      	movs	r3, #1
 8010582:	e000      	b.n	8010586 <xQueueSemaphoreTake+0x66>
 8010584:	2300      	movs	r3, #0
 8010586:	2b00      	cmp	r3, #0
 8010588:	d10a      	bne.n	80105a0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801058a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801058e:	f383 8811 	msr	BASEPRI, r3
 8010592:	f3bf 8f6f 	isb	sy
 8010596:	f3bf 8f4f 	dsb	sy
 801059a:	61bb      	str	r3, [r7, #24]
}
 801059c:	bf00      	nop
 801059e:	e7fe      	b.n	801059e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80105a0:	f002 f8d8 	bl	8012754 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80105a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105a8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80105aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d024      	beq.n	80105fa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80105b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b2:	1e5a      	subs	r2, r3, #1
 80105b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105b6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80105b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d104      	bne.n	80105ca <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80105c0:	f001 fbe4 	bl	8011d8c <pvTaskIncrementMutexHeldCount>
 80105c4:	4602      	mov	r2, r0
 80105c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80105ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105cc:	691b      	ldr	r3, [r3, #16]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d00f      	beq.n	80105f2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80105d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105d4:	3310      	adds	r3, #16
 80105d6:	4618      	mov	r0, r3
 80105d8:	f001 f858 	bl	801168c <xTaskRemoveFromEventList>
 80105dc:	4603      	mov	r3, r0
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d007      	beq.n	80105f2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80105e2:	4b54      	ldr	r3, [pc, #336]	; (8010734 <xQueueSemaphoreTake+0x214>)
 80105e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105e8:	601a      	str	r2, [r3, #0]
 80105ea:	f3bf 8f4f 	dsb	sy
 80105ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80105f2:	f002 f8df 	bl	80127b4 <vPortExitCritical>
				return pdPASS;
 80105f6:	2301      	movs	r3, #1
 80105f8:	e097      	b.n	801072a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d111      	bne.n	8010624 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010602:	2b00      	cmp	r3, #0
 8010604:	d00a      	beq.n	801061c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8010606:	f04f 0350 	mov.w	r3, #80	; 0x50
 801060a:	f383 8811 	msr	BASEPRI, r3
 801060e:	f3bf 8f6f 	isb	sy
 8010612:	f3bf 8f4f 	dsb	sy
 8010616:	617b      	str	r3, [r7, #20]
}
 8010618:	bf00      	nop
 801061a:	e7fe      	b.n	801061a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801061c:	f002 f8ca 	bl	80127b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010620:	2300      	movs	r3, #0
 8010622:	e082      	b.n	801072a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010626:	2b00      	cmp	r3, #0
 8010628:	d106      	bne.n	8010638 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801062a:	f107 030c 	add.w	r3, r7, #12
 801062e:	4618      	mov	r0, r3
 8010630:	f001 f890 	bl	8011754 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010634:	2301      	movs	r3, #1
 8010636:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010638:	f002 f8bc 	bl	80127b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801063c:	f000 fdfc 	bl	8011238 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010640:	f002 f888 	bl	8012754 <vPortEnterCritical>
 8010644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010646:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801064a:	b25b      	sxtb	r3, r3
 801064c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010650:	d103      	bne.n	801065a <xQueueSemaphoreTake+0x13a>
 8010652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010654:	2200      	movs	r2, #0
 8010656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801065a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801065c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010660:	b25b      	sxtb	r3, r3
 8010662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010666:	d103      	bne.n	8010670 <xQueueSemaphoreTake+0x150>
 8010668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801066a:	2200      	movs	r2, #0
 801066c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010670:	f002 f8a0 	bl	80127b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010674:	463a      	mov	r2, r7
 8010676:	f107 030c 	add.w	r3, r7, #12
 801067a:	4611      	mov	r1, r2
 801067c:	4618      	mov	r0, r3
 801067e:	f001 f87f 	bl	8011780 <xTaskCheckForTimeOut>
 8010682:	4603      	mov	r3, r0
 8010684:	2b00      	cmp	r3, #0
 8010686:	d132      	bne.n	80106ee <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010688:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801068a:	f000 faed 	bl	8010c68 <prvIsQueueEmpty>
 801068e:	4603      	mov	r3, r0
 8010690:	2b00      	cmp	r3, #0
 8010692:	d026      	beq.n	80106e2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d109      	bne.n	80106b0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 801069c:	f002 f85a 	bl	8012754 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80106a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106a2:	689b      	ldr	r3, [r3, #8]
 80106a4:	4618      	mov	r0, r3
 80106a6:	f001 fa19 	bl	8011adc <xTaskPriorityInherit>
 80106aa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80106ac:	f002 f882 	bl	80127b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80106b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106b2:	3324      	adds	r3, #36	; 0x24
 80106b4:	683a      	ldr	r2, [r7, #0]
 80106b6:	4611      	mov	r1, r2
 80106b8:	4618      	mov	r0, r3
 80106ba:	f000 ff97 	bl	80115ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80106be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106c0:	f000 fa80 	bl	8010bc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80106c4:	f000 fdc6 	bl	8011254 <xTaskResumeAll>
 80106c8:	4603      	mov	r3, r0
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	f47f af68 	bne.w	80105a0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80106d0:	4b18      	ldr	r3, [pc, #96]	; (8010734 <xQueueSemaphoreTake+0x214>)
 80106d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106d6:	601a      	str	r2, [r3, #0]
 80106d8:	f3bf 8f4f 	dsb	sy
 80106dc:	f3bf 8f6f 	isb	sy
 80106e0:	e75e      	b.n	80105a0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80106e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106e4:	f000 fa6e 	bl	8010bc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80106e8:	f000 fdb4 	bl	8011254 <xTaskResumeAll>
 80106ec:	e758      	b.n	80105a0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80106ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106f0:	f000 fa68 	bl	8010bc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80106f4:	f000 fdae 	bl	8011254 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80106f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106fa:	f000 fab5 	bl	8010c68 <prvIsQueueEmpty>
 80106fe:	4603      	mov	r3, r0
 8010700:	2b00      	cmp	r3, #0
 8010702:	f43f af4d 	beq.w	80105a0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010708:	2b00      	cmp	r3, #0
 801070a:	d00d      	beq.n	8010728 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801070c:	f002 f822 	bl	8012754 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010710:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010712:	f000 f9af 	bl	8010a74 <prvGetDisinheritPriorityAfterTimeout>
 8010716:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801071a:	689b      	ldr	r3, [r3, #8]
 801071c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801071e:	4618      	mov	r0, r3
 8010720:	f001 fab2 	bl	8011c88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010724:	f002 f846 	bl	80127b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010728:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801072a:	4618      	mov	r0, r3
 801072c:	3738      	adds	r7, #56	; 0x38
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}
 8010732:	bf00      	nop
 8010734:	e000ed04 	.word	0xe000ed04

08010738 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b08e      	sub	sp, #56	; 0x38
 801073c:	af00      	add	r7, sp, #0
 801073e:	60f8      	str	r0, [r7, #12]
 8010740:	60b9      	str	r1, [r7, #8]
 8010742:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010744:	2300      	movs	r3, #0
 8010746:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801074c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801074e:	2b00      	cmp	r3, #0
 8010750:	d10a      	bne.n	8010768 <xQueuePeek+0x30>
	__asm volatile
 8010752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010756:	f383 8811 	msr	BASEPRI, r3
 801075a:	f3bf 8f6f 	isb	sy
 801075e:	f3bf 8f4f 	dsb	sy
 8010762:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010764:	bf00      	nop
 8010766:	e7fe      	b.n	8010766 <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010768:	68bb      	ldr	r3, [r7, #8]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d103      	bne.n	8010776 <xQueuePeek+0x3e>
 801076e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010772:	2b00      	cmp	r3, #0
 8010774:	d101      	bne.n	801077a <xQueuePeek+0x42>
 8010776:	2301      	movs	r3, #1
 8010778:	e000      	b.n	801077c <xQueuePeek+0x44>
 801077a:	2300      	movs	r3, #0
 801077c:	2b00      	cmp	r3, #0
 801077e:	d10a      	bne.n	8010796 <xQueuePeek+0x5e>
	__asm volatile
 8010780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010784:	f383 8811 	msr	BASEPRI, r3
 8010788:	f3bf 8f6f 	isb	sy
 801078c:	f3bf 8f4f 	dsb	sy
 8010790:	623b      	str	r3, [r7, #32]
}
 8010792:	bf00      	nop
 8010794:	e7fe      	b.n	8010794 <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010796:	f001 f983 	bl	8011aa0 <xTaskGetSchedulerState>
 801079a:	4603      	mov	r3, r0
 801079c:	2b00      	cmp	r3, #0
 801079e:	d102      	bne.n	80107a6 <xQueuePeek+0x6e>
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d101      	bne.n	80107aa <xQueuePeek+0x72>
 80107a6:	2301      	movs	r3, #1
 80107a8:	e000      	b.n	80107ac <xQueuePeek+0x74>
 80107aa:	2300      	movs	r3, #0
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d10a      	bne.n	80107c6 <xQueuePeek+0x8e>
	__asm volatile
 80107b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107b4:	f383 8811 	msr	BASEPRI, r3
 80107b8:	f3bf 8f6f 	isb	sy
 80107bc:	f3bf 8f4f 	dsb	sy
 80107c0:	61fb      	str	r3, [r7, #28]
}
 80107c2:	bf00      	nop
 80107c4:	e7fe      	b.n	80107c4 <xQueuePeek+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80107c6:	f001 ffc5 	bl	8012754 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80107ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107ce:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80107d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d021      	beq.n	801081a <xQueuePeek+0xe2>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 80107d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107d8:	68db      	ldr	r3, [r3, #12]
 80107da:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80107dc:	68b9      	ldr	r1, [r7, #8]
 80107de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107e0:	f000 f9ca 	bl	8010b78 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 80107e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107e8:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80107ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d00f      	beq.n	8010812 <xQueuePeek+0xda>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80107f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107f4:	3324      	adds	r3, #36	; 0x24
 80107f6:	4618      	mov	r0, r3
 80107f8:	f000 ff48 	bl	801168c <xTaskRemoveFromEventList>
 80107fc:	4603      	mov	r3, r0
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d007      	beq.n	8010812 <xQueuePeek+0xda>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8010802:	4b3d      	ldr	r3, [pc, #244]	; (80108f8 <xQueuePeek+0x1c0>)
 8010804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010808:	601a      	str	r2, [r3, #0]
 801080a:	f3bf 8f4f 	dsb	sy
 801080e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010812:	f001 ffcf 	bl	80127b4 <vPortExitCritical>
				return pdPASS;
 8010816:	2301      	movs	r3, #1
 8010818:	e069      	b.n	80108ee <xQueuePeek+0x1b6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d103      	bne.n	8010828 <xQueuePeek+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010820:	f001 ffc8 	bl	80127b4 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010824:	2300      	movs	r3, #0
 8010826:	e062      	b.n	80108ee <xQueuePeek+0x1b6>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801082a:	2b00      	cmp	r3, #0
 801082c:	d106      	bne.n	801083c <xQueuePeek+0x104>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801082e:	f107 0314 	add.w	r3, r7, #20
 8010832:	4618      	mov	r0, r3
 8010834:	f000 ff8e 	bl	8011754 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010838:	2301      	movs	r3, #1
 801083a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801083c:	f001 ffba 	bl	80127b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010840:	f000 fcfa 	bl	8011238 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010844:	f001 ff86 	bl	8012754 <vPortEnterCritical>
 8010848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801084a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801084e:	b25b      	sxtb	r3, r3
 8010850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010854:	d103      	bne.n	801085e <xQueuePeek+0x126>
 8010856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010858:	2200      	movs	r2, #0
 801085a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801085e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010860:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010864:	b25b      	sxtb	r3, r3
 8010866:	f1b3 3fff 	cmp.w	r3, #4294967295
 801086a:	d103      	bne.n	8010874 <xQueuePeek+0x13c>
 801086c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801086e:	2200      	movs	r2, #0
 8010870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010874:	f001 ff9e 	bl	80127b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010878:	1d3a      	adds	r2, r7, #4
 801087a:	f107 0314 	add.w	r3, r7, #20
 801087e:	4611      	mov	r1, r2
 8010880:	4618      	mov	r0, r3
 8010882:	f000 ff7d 	bl	8011780 <xTaskCheckForTimeOut>
 8010886:	4603      	mov	r3, r0
 8010888:	2b00      	cmp	r3, #0
 801088a:	d123      	bne.n	80108d4 <xQueuePeek+0x19c>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801088c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801088e:	f000 f9eb 	bl	8010c68 <prvIsQueueEmpty>
 8010892:	4603      	mov	r3, r0
 8010894:	2b00      	cmp	r3, #0
 8010896:	d017      	beq.n	80108c8 <xQueuePeek+0x190>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801089a:	3324      	adds	r3, #36	; 0x24
 801089c:	687a      	ldr	r2, [r7, #4]
 801089e:	4611      	mov	r1, r2
 80108a0:	4618      	mov	r0, r3
 80108a2:	f000 fea3 	bl	80115ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80108a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108a8:	f000 f98c 	bl	8010bc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80108ac:	f000 fcd2 	bl	8011254 <xTaskResumeAll>
 80108b0:	4603      	mov	r3, r0
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d187      	bne.n	80107c6 <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 80108b6:	4b10      	ldr	r3, [pc, #64]	; (80108f8 <xQueuePeek+0x1c0>)
 80108b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108bc:	601a      	str	r2, [r3, #0]
 80108be:	f3bf 8f4f 	dsb	sy
 80108c2:	f3bf 8f6f 	isb	sy
 80108c6:	e77e      	b.n	80107c6 <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 80108c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108ca:	f000 f97b 	bl	8010bc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80108ce:	f000 fcc1 	bl	8011254 <xTaskResumeAll>
 80108d2:	e778      	b.n	80107c6 <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 80108d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108d6:	f000 f975 	bl	8010bc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80108da:	f000 fcbb 	bl	8011254 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80108de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108e0:	f000 f9c2 	bl	8010c68 <prvIsQueueEmpty>
 80108e4:	4603      	mov	r3, r0
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	f43f af6d 	beq.w	80107c6 <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80108ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	3738      	adds	r7, #56	; 0x38
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}
 80108f6:	bf00      	nop
 80108f8:	e000ed04 	.word	0xe000ed04

080108fc <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b08e      	sub	sp, #56	; 0x38
 8010900:	af00      	add	r7, sp, #0
 8010902:	60f8      	str	r0, [r7, #12]
 8010904:	60b9      	str	r1, [r7, #8]
 8010906:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801090c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801090e:	2b00      	cmp	r3, #0
 8010910:	d10a      	bne.n	8010928 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010916:	f383 8811 	msr	BASEPRI, r3
 801091a:	f3bf 8f6f 	isb	sy
 801091e:	f3bf 8f4f 	dsb	sy
 8010922:	623b      	str	r3, [r7, #32]
}
 8010924:	bf00      	nop
 8010926:	e7fe      	b.n	8010926 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d103      	bne.n	8010936 <xQueueReceiveFromISR+0x3a>
 801092e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010932:	2b00      	cmp	r3, #0
 8010934:	d101      	bne.n	801093a <xQueueReceiveFromISR+0x3e>
 8010936:	2301      	movs	r3, #1
 8010938:	e000      	b.n	801093c <xQueueReceiveFromISR+0x40>
 801093a:	2300      	movs	r3, #0
 801093c:	2b00      	cmp	r3, #0
 801093e:	d10a      	bne.n	8010956 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010944:	f383 8811 	msr	BASEPRI, r3
 8010948:	f3bf 8f6f 	isb	sy
 801094c:	f3bf 8f4f 	dsb	sy
 8010950:	61fb      	str	r3, [r7, #28]
}
 8010952:	bf00      	nop
 8010954:	e7fe      	b.n	8010954 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010956:	f001 ffdf 	bl	8012918 <vPortValidateInterruptPriority>
	__asm volatile
 801095a:	f3ef 8211 	mrs	r2, BASEPRI
 801095e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010962:	f383 8811 	msr	BASEPRI, r3
 8010966:	f3bf 8f6f 	isb	sy
 801096a:	f3bf 8f4f 	dsb	sy
 801096e:	61ba      	str	r2, [r7, #24]
 8010970:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010972:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010974:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801097a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801097c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801097e:	2b00      	cmp	r3, #0
 8010980:	d02f      	beq.n	80109e2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010984:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801098c:	68b9      	ldr	r1, [r7, #8]
 801098e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010990:	f000 f8f2 	bl	8010b78 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010996:	1e5a      	subs	r2, r3, #1
 8010998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801099a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801099c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80109a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109a4:	d112      	bne.n	80109cc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80109a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109a8:	691b      	ldr	r3, [r3, #16]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d016      	beq.n	80109dc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80109ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b0:	3310      	adds	r3, #16
 80109b2:	4618      	mov	r0, r3
 80109b4:	f000 fe6a 	bl	801168c <xTaskRemoveFromEventList>
 80109b8:	4603      	mov	r3, r0
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d00e      	beq.n	80109dc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d00b      	beq.n	80109dc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2201      	movs	r2, #1
 80109c8:	601a      	str	r2, [r3, #0]
 80109ca:	e007      	b.n	80109dc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80109cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80109d0:	3301      	adds	r3, #1
 80109d2:	b2db      	uxtb	r3, r3
 80109d4:	b25a      	sxtb	r2, r3
 80109d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80109dc:	2301      	movs	r3, #1
 80109de:	637b      	str	r3, [r7, #52]	; 0x34
 80109e0:	e001      	b.n	80109e6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80109e2:	2300      	movs	r3, #0
 80109e4:	637b      	str	r3, [r7, #52]	; 0x34
 80109e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80109ea:	693b      	ldr	r3, [r7, #16]
 80109ec:	f383 8811 	msr	BASEPRI, r3
}
 80109f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80109f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80109f4:	4618      	mov	r0, r3
 80109f6:	3738      	adds	r7, #56	; 0x38
 80109f8:	46bd      	mov	sp, r7
 80109fa:	bd80      	pop	{r7, pc}

080109fc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b084      	sub	sp, #16
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d10a      	bne.n	8010a20 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8010a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a0e:	f383 8811 	msr	BASEPRI, r3
 8010a12:	f3bf 8f6f 	isb	sy
 8010a16:	f3bf 8f4f 	dsb	sy
 8010a1a:	60bb      	str	r3, [r7, #8]
}
 8010a1c:	bf00      	nop
 8010a1e:	e7fe      	b.n	8010a1e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8010a20:	f001 fe98 	bl	8012754 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a28:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8010a2a:	f001 fec3 	bl	80127b4 <vPortExitCritical>

	return uxReturn;
 8010a2e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010a30:	4618      	mov	r0, r3
 8010a32:	3710      	adds	r7, #16
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd80      	pop	{r7, pc}

08010a38 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8010a38:	b480      	push	{r7}
 8010a3a:	b087      	sub	sp, #28
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8010a44:	697b      	ldr	r3, [r7, #20]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d10a      	bne.n	8010a60 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8010a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a4e:	f383 8811 	msr	BASEPRI, r3
 8010a52:	f3bf 8f6f 	isb	sy
 8010a56:	f3bf 8f4f 	dsb	sy
 8010a5a:	60fb      	str	r3, [r7, #12]
}
 8010a5c:	bf00      	nop
 8010a5e:	e7fe      	b.n	8010a5e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8010a60:	697b      	ldr	r3, [r7, #20]
 8010a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a64:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8010a66:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010a68:	4618      	mov	r0, r3
 8010a6a:	371c      	adds	r7, #28
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a72:	4770      	bx	lr

08010a74 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010a74:	b480      	push	{r7}
 8010a76:	b085      	sub	sp, #20
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d006      	beq.n	8010a92 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8010a8e:	60fb      	str	r3, [r7, #12]
 8010a90:	e001      	b.n	8010a96 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010a92:	2300      	movs	r3, #0
 8010a94:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010a96:	68fb      	ldr	r3, [r7, #12]
	}
 8010a98:	4618      	mov	r0, r3
 8010a9a:	3714      	adds	r7, #20
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa2:	4770      	bx	lr

08010aa4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b086      	sub	sp, #24
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	60f8      	str	r0, [r7, #12]
 8010aac:	60b9      	str	r1, [r7, #8]
 8010aae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ab8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d10d      	bne.n	8010ade <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d14d      	bne.n	8010b66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	689b      	ldr	r3, [r3, #8]
 8010ace:	4618      	mov	r0, r3
 8010ad0:	f001 f86c 	bl	8011bac <xTaskPriorityDisinherit>
 8010ad4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	2200      	movs	r2, #0
 8010ada:	609a      	str	r2, [r3, #8]
 8010adc:	e043      	b.n	8010b66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d119      	bne.n	8010b18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	6858      	ldr	r0, [r3, #4]
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aec:	461a      	mov	r2, r3
 8010aee:	68b9      	ldr	r1, [r7, #8]
 8010af0:	f00b fcaf 	bl	801c452 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	685a      	ldr	r2, [r3, #4]
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010afc:	441a      	add	r2, r3
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	685a      	ldr	r2, [r3, #4]
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	689b      	ldr	r3, [r3, #8]
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d32b      	bcc.n	8010b66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	681a      	ldr	r2, [r3, #0]
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	605a      	str	r2, [r3, #4]
 8010b16:	e026      	b.n	8010b66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	68d8      	ldr	r0, [r3, #12]
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b20:	461a      	mov	r2, r3
 8010b22:	68b9      	ldr	r1, [r7, #8]
 8010b24:	f00b fc95 	bl	801c452 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	68da      	ldr	r2, [r3, #12]
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b30:	425b      	negs	r3, r3
 8010b32:	441a      	add	r2, r3
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	68da      	ldr	r2, [r3, #12]
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	429a      	cmp	r2, r3
 8010b42:	d207      	bcs.n	8010b54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	689a      	ldr	r2, [r3, #8]
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b4c:	425b      	negs	r3, r3
 8010b4e:	441a      	add	r2, r3
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	2b02      	cmp	r3, #2
 8010b58:	d105      	bne.n	8010b66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010b5a:	693b      	ldr	r3, [r7, #16]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d002      	beq.n	8010b66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010b60:	693b      	ldr	r3, [r7, #16]
 8010b62:	3b01      	subs	r3, #1
 8010b64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010b66:	693b      	ldr	r3, [r7, #16]
 8010b68:	1c5a      	adds	r2, r3, #1
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010b6e:	697b      	ldr	r3, [r7, #20]
}
 8010b70:	4618      	mov	r0, r3
 8010b72:	3718      	adds	r7, #24
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}

08010b78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b082      	sub	sp, #8
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
 8010b80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d018      	beq.n	8010bbc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	68da      	ldr	r2, [r3, #12]
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b92:	441a      	add	r2, r3
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	68da      	ldr	r2, [r3, #12]
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	689b      	ldr	r3, [r3, #8]
 8010ba0:	429a      	cmp	r2, r3
 8010ba2:	d303      	bcc.n	8010bac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681a      	ldr	r2, [r3, #0]
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	68d9      	ldr	r1, [r3, #12]
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bb4:	461a      	mov	r2, r3
 8010bb6:	6838      	ldr	r0, [r7, #0]
 8010bb8:	f00b fc4b 	bl	801c452 <memcpy>
	}
}
 8010bbc:	bf00      	nop
 8010bbe:	3708      	adds	r7, #8
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}

08010bc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b084      	sub	sp, #16
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010bcc:	f001 fdc2 	bl	8012754 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010bd6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010bd8:	e011      	b.n	8010bfe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d012      	beq.n	8010c08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	3324      	adds	r3, #36	; 0x24
 8010be6:	4618      	mov	r0, r3
 8010be8:	f000 fd50 	bl	801168c <xTaskRemoveFromEventList>
 8010bec:	4603      	mov	r3, r0
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d001      	beq.n	8010bf6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010bf2:	f000 fe27 	bl	8011844 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010bf6:	7bfb      	ldrb	r3, [r7, #15]
 8010bf8:	3b01      	subs	r3, #1
 8010bfa:	b2db      	uxtb	r3, r3
 8010bfc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	dce9      	bgt.n	8010bda <prvUnlockQueue+0x16>
 8010c06:	e000      	b.n	8010c0a <prvUnlockQueue+0x46>
					break;
 8010c08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	22ff      	movs	r2, #255	; 0xff
 8010c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010c12:	f001 fdcf 	bl	80127b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010c16:	f001 fd9d 	bl	8012754 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010c20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010c22:	e011      	b.n	8010c48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	691b      	ldr	r3, [r3, #16]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d012      	beq.n	8010c52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	3310      	adds	r3, #16
 8010c30:	4618      	mov	r0, r3
 8010c32:	f000 fd2b 	bl	801168c <xTaskRemoveFromEventList>
 8010c36:	4603      	mov	r3, r0
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d001      	beq.n	8010c40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010c3c:	f000 fe02 	bl	8011844 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010c40:	7bbb      	ldrb	r3, [r7, #14]
 8010c42:	3b01      	subs	r3, #1
 8010c44:	b2db      	uxtb	r3, r3
 8010c46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010c48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	dce9      	bgt.n	8010c24 <prvUnlockQueue+0x60>
 8010c50:	e000      	b.n	8010c54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010c52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	22ff      	movs	r2, #255	; 0xff
 8010c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010c5c:	f001 fdaa 	bl	80127b4 <vPortExitCritical>
}
 8010c60:	bf00      	nop
 8010c62:	3710      	adds	r7, #16
 8010c64:	46bd      	mov	sp, r7
 8010c66:	bd80      	pop	{r7, pc}

08010c68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b084      	sub	sp, #16
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010c70:	f001 fd70 	bl	8012754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d102      	bne.n	8010c82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010c7c:	2301      	movs	r3, #1
 8010c7e:	60fb      	str	r3, [r7, #12]
 8010c80:	e001      	b.n	8010c86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010c82:	2300      	movs	r3, #0
 8010c84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010c86:	f001 fd95 	bl	80127b4 <vPortExitCritical>

	return xReturn;
 8010c8a:	68fb      	ldr	r3, [r7, #12]
}
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	3710      	adds	r7, #16
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}

08010c94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b084      	sub	sp, #16
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010c9c:	f001 fd5a 	bl	8012754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ca8:	429a      	cmp	r2, r3
 8010caa:	d102      	bne.n	8010cb2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010cac:	2301      	movs	r3, #1
 8010cae:	60fb      	str	r3, [r7, #12]
 8010cb0:	e001      	b.n	8010cb6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010cb6:	f001 fd7d 	bl	80127b4 <vPortExitCritical>

	return xReturn;
 8010cba:	68fb      	ldr	r3, [r7, #12]
}
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	3710      	adds	r7, #16
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bd80      	pop	{r7, pc}

08010cc4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010cc4:	b480      	push	{r7}
 8010cc6:	b085      	sub	sp, #20
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
 8010ccc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010cce:	2300      	movs	r3, #0
 8010cd0:	60fb      	str	r3, [r7, #12]
 8010cd2:	e014      	b.n	8010cfe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010cd4:	4a0f      	ldr	r2, [pc, #60]	; (8010d14 <vQueueAddToRegistry+0x50>)
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d10b      	bne.n	8010cf8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010ce0:	490c      	ldr	r1, [pc, #48]	; (8010d14 <vQueueAddToRegistry+0x50>)
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	683a      	ldr	r2, [r7, #0]
 8010ce6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010cea:	4a0a      	ldr	r2, [pc, #40]	; (8010d14 <vQueueAddToRegistry+0x50>)
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	00db      	lsls	r3, r3, #3
 8010cf0:	4413      	add	r3, r2
 8010cf2:	687a      	ldr	r2, [r7, #4]
 8010cf4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010cf6:	e006      	b.n	8010d06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	3301      	adds	r3, #1
 8010cfc:	60fb      	str	r3, [r7, #12]
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	2b09      	cmp	r3, #9
 8010d02:	d9e7      	bls.n	8010cd4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010d04:	bf00      	nop
 8010d06:	bf00      	nop
 8010d08:	3714      	adds	r7, #20
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d10:	4770      	bx	lr
 8010d12:	bf00      	nop
 8010d14:	20001cc0 	.word	0x20001cc0

08010d18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b086      	sub	sp, #24
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	60f8      	str	r0, [r7, #12]
 8010d20:	60b9      	str	r1, [r7, #8]
 8010d22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010d28:	f001 fd14 	bl	8012754 <vPortEnterCritical>
 8010d2c:	697b      	ldr	r3, [r7, #20]
 8010d2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010d32:	b25b      	sxtb	r3, r3
 8010d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d38:	d103      	bne.n	8010d42 <vQueueWaitForMessageRestricted+0x2a>
 8010d3a:	697b      	ldr	r3, [r7, #20]
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010d42:	697b      	ldr	r3, [r7, #20]
 8010d44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010d48:	b25b      	sxtb	r3, r3
 8010d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d4e:	d103      	bne.n	8010d58 <vQueueWaitForMessageRestricted+0x40>
 8010d50:	697b      	ldr	r3, [r7, #20]
 8010d52:	2200      	movs	r2, #0
 8010d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010d58:	f001 fd2c 	bl	80127b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010d5c:	697b      	ldr	r3, [r7, #20]
 8010d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d106      	bne.n	8010d72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010d64:	697b      	ldr	r3, [r7, #20]
 8010d66:	3324      	adds	r3, #36	; 0x24
 8010d68:	687a      	ldr	r2, [r7, #4]
 8010d6a:	68b9      	ldr	r1, [r7, #8]
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f000 fc61 	bl	8011634 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010d72:	6978      	ldr	r0, [r7, #20]
 8010d74:	f7ff ff26 	bl	8010bc4 <prvUnlockQueue>
	}
 8010d78:	bf00      	nop
 8010d7a:	3718      	adds	r7, #24
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bd80      	pop	{r7, pc}

08010d80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b08e      	sub	sp, #56	; 0x38
 8010d84:	af04      	add	r7, sp, #16
 8010d86:	60f8      	str	r0, [r7, #12]
 8010d88:	60b9      	str	r1, [r7, #8]
 8010d8a:	607a      	str	r2, [r7, #4]
 8010d8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d10a      	bne.n	8010daa <xTaskCreateStatic+0x2a>
	__asm volatile
 8010d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d98:	f383 8811 	msr	BASEPRI, r3
 8010d9c:	f3bf 8f6f 	isb	sy
 8010da0:	f3bf 8f4f 	dsb	sy
 8010da4:	623b      	str	r3, [r7, #32]
}
 8010da6:	bf00      	nop
 8010da8:	e7fe      	b.n	8010da8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d10a      	bne.n	8010dc6 <xTaskCreateStatic+0x46>
	__asm volatile
 8010db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010db4:	f383 8811 	msr	BASEPRI, r3
 8010db8:	f3bf 8f6f 	isb	sy
 8010dbc:	f3bf 8f4f 	dsb	sy
 8010dc0:	61fb      	str	r3, [r7, #28]
}
 8010dc2:	bf00      	nop
 8010dc4:	e7fe      	b.n	8010dc4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010dc6:	23a8      	movs	r3, #168	; 0xa8
 8010dc8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010dca:	693b      	ldr	r3, [r7, #16]
 8010dcc:	2ba8      	cmp	r3, #168	; 0xa8
 8010dce:	d00a      	beq.n	8010de6 <xTaskCreateStatic+0x66>
	__asm volatile
 8010dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dd4:	f383 8811 	msr	BASEPRI, r3
 8010dd8:	f3bf 8f6f 	isb	sy
 8010ddc:	f3bf 8f4f 	dsb	sy
 8010de0:	61bb      	str	r3, [r7, #24]
}
 8010de2:	bf00      	nop
 8010de4:	e7fe      	b.n	8010de4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010de6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d01e      	beq.n	8010e2c <xTaskCreateStatic+0xac>
 8010dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d01b      	beq.n	8010e2c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010df6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010dfc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e00:	2202      	movs	r2, #2
 8010e02:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010e06:	2300      	movs	r3, #0
 8010e08:	9303      	str	r3, [sp, #12]
 8010e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e0c:	9302      	str	r3, [sp, #8]
 8010e0e:	f107 0314 	add.w	r3, r7, #20
 8010e12:	9301      	str	r3, [sp, #4]
 8010e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e16:	9300      	str	r3, [sp, #0]
 8010e18:	683b      	ldr	r3, [r7, #0]
 8010e1a:	687a      	ldr	r2, [r7, #4]
 8010e1c:	68b9      	ldr	r1, [r7, #8]
 8010e1e:	68f8      	ldr	r0, [r7, #12]
 8010e20:	f000 f850 	bl	8010ec4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010e24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e26:	f000 f8f3 	bl	8011010 <prvAddNewTaskToReadyList>
 8010e2a:	e001      	b.n	8010e30 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010e30:	697b      	ldr	r3, [r7, #20]
	}
 8010e32:	4618      	mov	r0, r3
 8010e34:	3728      	adds	r7, #40	; 0x28
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}

08010e3a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010e3a:	b580      	push	{r7, lr}
 8010e3c:	b08c      	sub	sp, #48	; 0x30
 8010e3e:	af04      	add	r7, sp, #16
 8010e40:	60f8      	str	r0, [r7, #12]
 8010e42:	60b9      	str	r1, [r7, #8]
 8010e44:	603b      	str	r3, [r7, #0]
 8010e46:	4613      	mov	r3, r2
 8010e48:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010e4a:	88fb      	ldrh	r3, [r7, #6]
 8010e4c:	009b      	lsls	r3, r3, #2
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f001 fda2 	bl	8012998 <pvPortMalloc>
 8010e54:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010e56:	697b      	ldr	r3, [r7, #20]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d00e      	beq.n	8010e7a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010e5c:	20a8      	movs	r0, #168	; 0xa8
 8010e5e:	f001 fd9b 	bl	8012998 <pvPortMalloc>
 8010e62:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010e64:	69fb      	ldr	r3, [r7, #28]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d003      	beq.n	8010e72 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010e6a:	69fb      	ldr	r3, [r7, #28]
 8010e6c:	697a      	ldr	r2, [r7, #20]
 8010e6e:	631a      	str	r2, [r3, #48]	; 0x30
 8010e70:	e005      	b.n	8010e7e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010e72:	6978      	ldr	r0, [r7, #20]
 8010e74:	f001 fdd6 	bl	8012a24 <vPortFree>
 8010e78:	e001      	b.n	8010e7e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010e7e:	69fb      	ldr	r3, [r7, #28]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d017      	beq.n	8010eb4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010e84:	69fb      	ldr	r3, [r7, #28]
 8010e86:	2200      	movs	r2, #0
 8010e88:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010e8c:	88fa      	ldrh	r2, [r7, #6]
 8010e8e:	2300      	movs	r3, #0
 8010e90:	9303      	str	r3, [sp, #12]
 8010e92:	69fb      	ldr	r3, [r7, #28]
 8010e94:	9302      	str	r3, [sp, #8]
 8010e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e98:	9301      	str	r3, [sp, #4]
 8010e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e9c:	9300      	str	r3, [sp, #0]
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	68b9      	ldr	r1, [r7, #8]
 8010ea2:	68f8      	ldr	r0, [r7, #12]
 8010ea4:	f000 f80e 	bl	8010ec4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010ea8:	69f8      	ldr	r0, [r7, #28]
 8010eaa:	f000 f8b1 	bl	8011010 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010eae:	2301      	movs	r3, #1
 8010eb0:	61bb      	str	r3, [r7, #24]
 8010eb2:	e002      	b.n	8010eba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8010eb8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010eba:	69bb      	ldr	r3, [r7, #24]
	}
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	3720      	adds	r7, #32
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bd80      	pop	{r7, pc}

08010ec4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b088      	sub	sp, #32
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	60f8      	str	r0, [r7, #12]
 8010ecc:	60b9      	str	r1, [r7, #8]
 8010ece:	607a      	str	r2, [r7, #4]
 8010ed0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ed4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	009b      	lsls	r3, r3, #2
 8010eda:	461a      	mov	r2, r3
 8010edc:	21a5      	movs	r1, #165	; 0xa5
 8010ede:	f00b f8e3 	bl	801c0a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010eec:	3b01      	subs	r3, #1
 8010eee:	009b      	lsls	r3, r3, #2
 8010ef0:	4413      	add	r3, r2
 8010ef2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010ef4:	69bb      	ldr	r3, [r7, #24]
 8010ef6:	f023 0307 	bic.w	r3, r3, #7
 8010efa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010efc:	69bb      	ldr	r3, [r7, #24]
 8010efe:	f003 0307 	and.w	r3, r3, #7
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d00a      	beq.n	8010f1c <prvInitialiseNewTask+0x58>
	__asm volatile
 8010f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f0a:	f383 8811 	msr	BASEPRI, r3
 8010f0e:	f3bf 8f6f 	isb	sy
 8010f12:	f3bf 8f4f 	dsb	sy
 8010f16:	617b      	str	r3, [r7, #20]
}
 8010f18:	bf00      	nop
 8010f1a:	e7fe      	b.n	8010f1a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010f1c:	68bb      	ldr	r3, [r7, #8]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d01f      	beq.n	8010f62 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010f22:	2300      	movs	r3, #0
 8010f24:	61fb      	str	r3, [r7, #28]
 8010f26:	e012      	b.n	8010f4e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010f28:	68ba      	ldr	r2, [r7, #8]
 8010f2a:	69fb      	ldr	r3, [r7, #28]
 8010f2c:	4413      	add	r3, r2
 8010f2e:	7819      	ldrb	r1, [r3, #0]
 8010f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f32:	69fb      	ldr	r3, [r7, #28]
 8010f34:	4413      	add	r3, r2
 8010f36:	3334      	adds	r3, #52	; 0x34
 8010f38:	460a      	mov	r2, r1
 8010f3a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010f3c:	68ba      	ldr	r2, [r7, #8]
 8010f3e:	69fb      	ldr	r3, [r7, #28]
 8010f40:	4413      	add	r3, r2
 8010f42:	781b      	ldrb	r3, [r3, #0]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d006      	beq.n	8010f56 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010f48:	69fb      	ldr	r3, [r7, #28]
 8010f4a:	3301      	adds	r3, #1
 8010f4c:	61fb      	str	r3, [r7, #28]
 8010f4e:	69fb      	ldr	r3, [r7, #28]
 8010f50:	2b0f      	cmp	r3, #15
 8010f52:	d9e9      	bls.n	8010f28 <prvInitialiseNewTask+0x64>
 8010f54:	e000      	b.n	8010f58 <prvInitialiseNewTask+0x94>
			{
				break;
 8010f56:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010f60:	e003      	b.n	8010f6a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f64:	2200      	movs	r2, #0
 8010f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f6c:	2b37      	cmp	r3, #55	; 0x37
 8010f6e:	d901      	bls.n	8010f74 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010f70:	2337      	movs	r3, #55	; 0x37
 8010f72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f7e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f82:	2200      	movs	r2, #0
 8010f84:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f88:	3304      	adds	r3, #4
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f7fe fdc6 	bl	800fb1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f92:	3318      	adds	r3, #24
 8010f94:	4618      	mov	r0, r3
 8010f96:	f7fe fdc1 	bl	800fb1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fa2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fa8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fba:	2200      	movs	r2, #0
 8010fbc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fc2:	3354      	adds	r3, #84	; 0x54
 8010fc4:	224c      	movs	r2, #76	; 0x4c
 8010fc6:	2100      	movs	r1, #0
 8010fc8:	4618      	mov	r0, r3
 8010fca:	f00b f86d 	bl	801c0a8 <memset>
 8010fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd0:	4a0c      	ldr	r2, [pc, #48]	; (8011004 <prvInitialiseNewTask+0x140>)
 8010fd2:	659a      	str	r2, [r3, #88]	; 0x58
 8010fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd6:	4a0c      	ldr	r2, [pc, #48]	; (8011008 <prvInitialiseNewTask+0x144>)
 8010fd8:	65da      	str	r2, [r3, #92]	; 0x5c
 8010fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fdc:	4a0b      	ldr	r2, [pc, #44]	; (801100c <prvInitialiseNewTask+0x148>)
 8010fde:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010fe0:	683a      	ldr	r2, [r7, #0]
 8010fe2:	68f9      	ldr	r1, [r7, #12]
 8010fe4:	69b8      	ldr	r0, [r7, #24]
 8010fe6:	f001 fa87 	bl	80124f8 <pxPortInitialiseStack>
 8010fea:	4602      	mov	r2, r0
 8010fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d002      	beq.n	8010ffc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ffa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010ffc:	bf00      	nop
 8010ffe:	3720      	adds	r7, #32
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}
 8011004:	2000d94c 	.word	0x2000d94c
 8011008:	2000d9b4 	.word	0x2000d9b4
 801100c:	2000da1c 	.word	0x2000da1c

08011010 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b082      	sub	sp, #8
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011018:	f001 fb9c 	bl	8012754 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801101c:	4b2d      	ldr	r3, [pc, #180]	; (80110d4 <prvAddNewTaskToReadyList+0xc4>)
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	3301      	adds	r3, #1
 8011022:	4a2c      	ldr	r2, [pc, #176]	; (80110d4 <prvAddNewTaskToReadyList+0xc4>)
 8011024:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011026:	4b2c      	ldr	r3, [pc, #176]	; (80110d8 <prvAddNewTaskToReadyList+0xc8>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d109      	bne.n	8011042 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801102e:	4a2a      	ldr	r2, [pc, #168]	; (80110d8 <prvAddNewTaskToReadyList+0xc8>)
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011034:	4b27      	ldr	r3, [pc, #156]	; (80110d4 <prvAddNewTaskToReadyList+0xc4>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	2b01      	cmp	r3, #1
 801103a:	d110      	bne.n	801105e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801103c:	f000 fc26 	bl	801188c <prvInitialiseTaskLists>
 8011040:	e00d      	b.n	801105e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011042:	4b26      	ldr	r3, [pc, #152]	; (80110dc <prvAddNewTaskToReadyList+0xcc>)
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d109      	bne.n	801105e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801104a:	4b23      	ldr	r3, [pc, #140]	; (80110d8 <prvAddNewTaskToReadyList+0xc8>)
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011054:	429a      	cmp	r2, r3
 8011056:	d802      	bhi.n	801105e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011058:	4a1f      	ldr	r2, [pc, #124]	; (80110d8 <prvAddNewTaskToReadyList+0xc8>)
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801105e:	4b20      	ldr	r3, [pc, #128]	; (80110e0 <prvAddNewTaskToReadyList+0xd0>)
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	3301      	adds	r3, #1
 8011064:	4a1e      	ldr	r2, [pc, #120]	; (80110e0 <prvAddNewTaskToReadyList+0xd0>)
 8011066:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011068:	4b1d      	ldr	r3, [pc, #116]	; (80110e0 <prvAddNewTaskToReadyList+0xd0>)
 801106a:	681a      	ldr	r2, [r3, #0]
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011074:	4b1b      	ldr	r3, [pc, #108]	; (80110e4 <prvAddNewTaskToReadyList+0xd4>)
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	429a      	cmp	r2, r3
 801107a:	d903      	bls.n	8011084 <prvAddNewTaskToReadyList+0x74>
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011080:	4a18      	ldr	r2, [pc, #96]	; (80110e4 <prvAddNewTaskToReadyList+0xd4>)
 8011082:	6013      	str	r3, [r2, #0]
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011088:	4613      	mov	r3, r2
 801108a:	009b      	lsls	r3, r3, #2
 801108c:	4413      	add	r3, r2
 801108e:	009b      	lsls	r3, r3, #2
 8011090:	4a15      	ldr	r2, [pc, #84]	; (80110e8 <prvAddNewTaskToReadyList+0xd8>)
 8011092:	441a      	add	r2, r3
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	3304      	adds	r3, #4
 8011098:	4619      	mov	r1, r3
 801109a:	4610      	mov	r0, r2
 801109c:	f7fe fd4b 	bl	800fb36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80110a0:	f001 fb88 	bl	80127b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80110a4:	4b0d      	ldr	r3, [pc, #52]	; (80110dc <prvAddNewTaskToReadyList+0xcc>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d00e      	beq.n	80110ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80110ac:	4b0a      	ldr	r3, [pc, #40]	; (80110d8 <prvAddNewTaskToReadyList+0xc8>)
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110b6:	429a      	cmp	r2, r3
 80110b8:	d207      	bcs.n	80110ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80110ba:	4b0c      	ldr	r3, [pc, #48]	; (80110ec <prvAddNewTaskToReadyList+0xdc>)
 80110bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110c0:	601a      	str	r2, [r3, #0]
 80110c2:	f3bf 8f4f 	dsb	sy
 80110c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80110ca:	bf00      	nop
 80110cc:	3708      	adds	r7, #8
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}
 80110d2:	bf00      	nop
 80110d4:	200021e4 	.word	0x200021e4
 80110d8:	20001d10 	.word	0x20001d10
 80110dc:	200021f0 	.word	0x200021f0
 80110e0:	20002200 	.word	0x20002200
 80110e4:	200021ec 	.word	0x200021ec
 80110e8:	20001d14 	.word	0x20001d14
 80110ec:	e000ed04 	.word	0xe000ed04

080110f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b084      	sub	sp, #16
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80110f8:	2300      	movs	r3, #0
 80110fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d017      	beq.n	8011132 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011102:	4b13      	ldr	r3, [pc, #76]	; (8011150 <vTaskDelay+0x60>)
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d00a      	beq.n	8011120 <vTaskDelay+0x30>
	__asm volatile
 801110a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801110e:	f383 8811 	msr	BASEPRI, r3
 8011112:	f3bf 8f6f 	isb	sy
 8011116:	f3bf 8f4f 	dsb	sy
 801111a:	60bb      	str	r3, [r7, #8]
}
 801111c:	bf00      	nop
 801111e:	e7fe      	b.n	801111e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011120:	f000 f88a 	bl	8011238 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011124:	2100      	movs	r1, #0
 8011126:	6878      	ldr	r0, [r7, #4]
 8011128:	f000 fe44 	bl	8011db4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801112c:	f000 f892 	bl	8011254 <xTaskResumeAll>
 8011130:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d107      	bne.n	8011148 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011138:	4b06      	ldr	r3, [pc, #24]	; (8011154 <vTaskDelay+0x64>)
 801113a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801113e:	601a      	str	r2, [r3, #0]
 8011140:	f3bf 8f4f 	dsb	sy
 8011144:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011148:	bf00      	nop
 801114a:	3710      	adds	r7, #16
 801114c:	46bd      	mov	sp, r7
 801114e:	bd80      	pop	{r7, pc}
 8011150:	2000220c 	.word	0x2000220c
 8011154:	e000ed04 	.word	0xe000ed04

08011158 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b08a      	sub	sp, #40	; 0x28
 801115c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801115e:	2300      	movs	r3, #0
 8011160:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011162:	2300      	movs	r3, #0
 8011164:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011166:	463a      	mov	r2, r7
 8011168:	1d39      	adds	r1, r7, #4
 801116a:	f107 0308 	add.w	r3, r7, #8
 801116e:	4618      	mov	r0, r3
 8011170:	f7fe fc80 	bl	800fa74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011174:	6839      	ldr	r1, [r7, #0]
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	68ba      	ldr	r2, [r7, #8]
 801117a:	9202      	str	r2, [sp, #8]
 801117c:	9301      	str	r3, [sp, #4]
 801117e:	2300      	movs	r3, #0
 8011180:	9300      	str	r3, [sp, #0]
 8011182:	2300      	movs	r3, #0
 8011184:	460a      	mov	r2, r1
 8011186:	4924      	ldr	r1, [pc, #144]	; (8011218 <vTaskStartScheduler+0xc0>)
 8011188:	4824      	ldr	r0, [pc, #144]	; (801121c <vTaskStartScheduler+0xc4>)
 801118a:	f7ff fdf9 	bl	8010d80 <xTaskCreateStatic>
 801118e:	4603      	mov	r3, r0
 8011190:	4a23      	ldr	r2, [pc, #140]	; (8011220 <vTaskStartScheduler+0xc8>)
 8011192:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011194:	4b22      	ldr	r3, [pc, #136]	; (8011220 <vTaskStartScheduler+0xc8>)
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d002      	beq.n	80111a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801119c:	2301      	movs	r3, #1
 801119e:	617b      	str	r3, [r7, #20]
 80111a0:	e001      	b.n	80111a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80111a2:	2300      	movs	r3, #0
 80111a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	2b01      	cmp	r3, #1
 80111aa:	d102      	bne.n	80111b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80111ac:	f000 fe56 	bl	8011e5c <xTimerCreateTimerTask>
 80111b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80111b2:	697b      	ldr	r3, [r7, #20]
 80111b4:	2b01      	cmp	r3, #1
 80111b6:	d11b      	bne.n	80111f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80111b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111bc:	f383 8811 	msr	BASEPRI, r3
 80111c0:	f3bf 8f6f 	isb	sy
 80111c4:	f3bf 8f4f 	dsb	sy
 80111c8:	613b      	str	r3, [r7, #16]
}
 80111ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80111cc:	4b15      	ldr	r3, [pc, #84]	; (8011224 <vTaskStartScheduler+0xcc>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	3354      	adds	r3, #84	; 0x54
 80111d2:	4a15      	ldr	r2, [pc, #84]	; (8011228 <vTaskStartScheduler+0xd0>)
 80111d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80111d6:	4b15      	ldr	r3, [pc, #84]	; (801122c <vTaskStartScheduler+0xd4>)
 80111d8:	f04f 32ff 	mov.w	r2, #4294967295
 80111dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80111de:	4b14      	ldr	r3, [pc, #80]	; (8011230 <vTaskStartScheduler+0xd8>)
 80111e0:	2201      	movs	r2, #1
 80111e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80111e4:	4b13      	ldr	r3, [pc, #76]	; (8011234 <vTaskStartScheduler+0xdc>)
 80111e6:	2200      	movs	r2, #0
 80111e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80111ea:	f001 fa11 	bl	8012610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80111ee:	e00e      	b.n	801120e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80111f0:	697b      	ldr	r3, [r7, #20]
 80111f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111f6:	d10a      	bne.n	801120e <vTaskStartScheduler+0xb6>
	__asm volatile
 80111f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111fc:	f383 8811 	msr	BASEPRI, r3
 8011200:	f3bf 8f6f 	isb	sy
 8011204:	f3bf 8f4f 	dsb	sy
 8011208:	60fb      	str	r3, [r7, #12]
}
 801120a:	bf00      	nop
 801120c:	e7fe      	b.n	801120c <vTaskStartScheduler+0xb4>
}
 801120e:	bf00      	nop
 8011210:	3718      	adds	r7, #24
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}
 8011216:	bf00      	nop
 8011218:	08021b08 	.word	0x08021b08
 801121c:	0801185d 	.word	0x0801185d
 8011220:	20002208 	.word	0x20002208
 8011224:	20001d10 	.word	0x20001d10
 8011228:	20000188 	.word	0x20000188
 801122c:	20002204 	.word	0x20002204
 8011230:	200021f0 	.word	0x200021f0
 8011234:	200021e8 	.word	0x200021e8

08011238 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011238:	b480      	push	{r7}
 801123a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801123c:	4b04      	ldr	r3, [pc, #16]	; (8011250 <vTaskSuspendAll+0x18>)
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	3301      	adds	r3, #1
 8011242:	4a03      	ldr	r2, [pc, #12]	; (8011250 <vTaskSuspendAll+0x18>)
 8011244:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011246:	bf00      	nop
 8011248:	46bd      	mov	sp, r7
 801124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124e:	4770      	bx	lr
 8011250:	2000220c 	.word	0x2000220c

08011254 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b084      	sub	sp, #16
 8011258:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801125a:	2300      	movs	r3, #0
 801125c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801125e:	2300      	movs	r3, #0
 8011260:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011262:	4b42      	ldr	r3, [pc, #264]	; (801136c <xTaskResumeAll+0x118>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d10a      	bne.n	8011280 <xTaskResumeAll+0x2c>
	__asm volatile
 801126a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801126e:	f383 8811 	msr	BASEPRI, r3
 8011272:	f3bf 8f6f 	isb	sy
 8011276:	f3bf 8f4f 	dsb	sy
 801127a:	603b      	str	r3, [r7, #0]
}
 801127c:	bf00      	nop
 801127e:	e7fe      	b.n	801127e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011280:	f001 fa68 	bl	8012754 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011284:	4b39      	ldr	r3, [pc, #228]	; (801136c <xTaskResumeAll+0x118>)
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	3b01      	subs	r3, #1
 801128a:	4a38      	ldr	r2, [pc, #224]	; (801136c <xTaskResumeAll+0x118>)
 801128c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801128e:	4b37      	ldr	r3, [pc, #220]	; (801136c <xTaskResumeAll+0x118>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d162      	bne.n	801135c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011296:	4b36      	ldr	r3, [pc, #216]	; (8011370 <xTaskResumeAll+0x11c>)
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d05e      	beq.n	801135c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801129e:	e02f      	b.n	8011300 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80112a0:	4b34      	ldr	r3, [pc, #208]	; (8011374 <xTaskResumeAll+0x120>)
 80112a2:	68db      	ldr	r3, [r3, #12]
 80112a4:	68db      	ldr	r3, [r3, #12]
 80112a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	3318      	adds	r3, #24
 80112ac:	4618      	mov	r0, r3
 80112ae:	f7fe fc9f 	bl	800fbf0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	3304      	adds	r3, #4
 80112b6:	4618      	mov	r0, r3
 80112b8:	f7fe fc9a 	bl	800fbf0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112c0:	4b2d      	ldr	r3, [pc, #180]	; (8011378 <xTaskResumeAll+0x124>)
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	429a      	cmp	r2, r3
 80112c6:	d903      	bls.n	80112d0 <xTaskResumeAll+0x7c>
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112cc:	4a2a      	ldr	r2, [pc, #168]	; (8011378 <xTaskResumeAll+0x124>)
 80112ce:	6013      	str	r3, [r2, #0]
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112d4:	4613      	mov	r3, r2
 80112d6:	009b      	lsls	r3, r3, #2
 80112d8:	4413      	add	r3, r2
 80112da:	009b      	lsls	r3, r3, #2
 80112dc:	4a27      	ldr	r2, [pc, #156]	; (801137c <xTaskResumeAll+0x128>)
 80112de:	441a      	add	r2, r3
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	3304      	adds	r3, #4
 80112e4:	4619      	mov	r1, r3
 80112e6:	4610      	mov	r0, r2
 80112e8:	f7fe fc25 	bl	800fb36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112f0:	4b23      	ldr	r3, [pc, #140]	; (8011380 <xTaskResumeAll+0x12c>)
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112f6:	429a      	cmp	r2, r3
 80112f8:	d302      	bcc.n	8011300 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80112fa:	4b22      	ldr	r3, [pc, #136]	; (8011384 <xTaskResumeAll+0x130>)
 80112fc:	2201      	movs	r2, #1
 80112fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011300:	4b1c      	ldr	r3, [pc, #112]	; (8011374 <xTaskResumeAll+0x120>)
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d1cb      	bne.n	80112a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d001      	beq.n	8011312 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801130e:	f000 fb97 	bl	8011a40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011312:	4b1d      	ldr	r3, [pc, #116]	; (8011388 <xTaskResumeAll+0x134>)
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d010      	beq.n	8011340 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801131e:	f000 f847 	bl	80113b0 <xTaskIncrementTick>
 8011322:	4603      	mov	r3, r0
 8011324:	2b00      	cmp	r3, #0
 8011326:	d002      	beq.n	801132e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011328:	4b16      	ldr	r3, [pc, #88]	; (8011384 <xTaskResumeAll+0x130>)
 801132a:	2201      	movs	r2, #1
 801132c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	3b01      	subs	r3, #1
 8011332:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d1f1      	bne.n	801131e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801133a:	4b13      	ldr	r3, [pc, #76]	; (8011388 <xTaskResumeAll+0x134>)
 801133c:	2200      	movs	r2, #0
 801133e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011340:	4b10      	ldr	r3, [pc, #64]	; (8011384 <xTaskResumeAll+0x130>)
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d009      	beq.n	801135c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011348:	2301      	movs	r3, #1
 801134a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801134c:	4b0f      	ldr	r3, [pc, #60]	; (801138c <xTaskResumeAll+0x138>)
 801134e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011352:	601a      	str	r2, [r3, #0]
 8011354:	f3bf 8f4f 	dsb	sy
 8011358:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801135c:	f001 fa2a 	bl	80127b4 <vPortExitCritical>

	return xAlreadyYielded;
 8011360:	68bb      	ldr	r3, [r7, #8]
}
 8011362:	4618      	mov	r0, r3
 8011364:	3710      	adds	r7, #16
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}
 801136a:	bf00      	nop
 801136c:	2000220c 	.word	0x2000220c
 8011370:	200021e4 	.word	0x200021e4
 8011374:	200021a4 	.word	0x200021a4
 8011378:	200021ec 	.word	0x200021ec
 801137c:	20001d14 	.word	0x20001d14
 8011380:	20001d10 	.word	0x20001d10
 8011384:	200021f8 	.word	0x200021f8
 8011388:	200021f4 	.word	0x200021f4
 801138c:	e000ed04 	.word	0xe000ed04

08011390 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011390:	b480      	push	{r7}
 8011392:	b083      	sub	sp, #12
 8011394:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011396:	4b05      	ldr	r3, [pc, #20]	; (80113ac <xTaskGetTickCount+0x1c>)
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801139c:	687b      	ldr	r3, [r7, #4]
}
 801139e:	4618      	mov	r0, r3
 80113a0:	370c      	adds	r7, #12
 80113a2:	46bd      	mov	sp, r7
 80113a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a8:	4770      	bx	lr
 80113aa:	bf00      	nop
 80113ac:	200021e8 	.word	0x200021e8

080113b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b086      	sub	sp, #24
 80113b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80113b6:	2300      	movs	r3, #0
 80113b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80113ba:	4b4f      	ldr	r3, [pc, #316]	; (80114f8 <xTaskIncrementTick+0x148>)
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	f040 808f 	bne.w	80114e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80113c4:	4b4d      	ldr	r3, [pc, #308]	; (80114fc <xTaskIncrementTick+0x14c>)
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	3301      	adds	r3, #1
 80113ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80113cc:	4a4b      	ldr	r2, [pc, #300]	; (80114fc <xTaskIncrementTick+0x14c>)
 80113ce:	693b      	ldr	r3, [r7, #16]
 80113d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80113d2:	693b      	ldr	r3, [r7, #16]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d120      	bne.n	801141a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80113d8:	4b49      	ldr	r3, [pc, #292]	; (8011500 <xTaskIncrementTick+0x150>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d00a      	beq.n	80113f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80113e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113e6:	f383 8811 	msr	BASEPRI, r3
 80113ea:	f3bf 8f6f 	isb	sy
 80113ee:	f3bf 8f4f 	dsb	sy
 80113f2:	603b      	str	r3, [r7, #0]
}
 80113f4:	bf00      	nop
 80113f6:	e7fe      	b.n	80113f6 <xTaskIncrementTick+0x46>
 80113f8:	4b41      	ldr	r3, [pc, #260]	; (8011500 <xTaskIncrementTick+0x150>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	60fb      	str	r3, [r7, #12]
 80113fe:	4b41      	ldr	r3, [pc, #260]	; (8011504 <xTaskIncrementTick+0x154>)
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	4a3f      	ldr	r2, [pc, #252]	; (8011500 <xTaskIncrementTick+0x150>)
 8011404:	6013      	str	r3, [r2, #0]
 8011406:	4a3f      	ldr	r2, [pc, #252]	; (8011504 <xTaskIncrementTick+0x154>)
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	6013      	str	r3, [r2, #0]
 801140c:	4b3e      	ldr	r3, [pc, #248]	; (8011508 <xTaskIncrementTick+0x158>)
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	3301      	adds	r3, #1
 8011412:	4a3d      	ldr	r2, [pc, #244]	; (8011508 <xTaskIncrementTick+0x158>)
 8011414:	6013      	str	r3, [r2, #0]
 8011416:	f000 fb13 	bl	8011a40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801141a:	4b3c      	ldr	r3, [pc, #240]	; (801150c <xTaskIncrementTick+0x15c>)
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	693a      	ldr	r2, [r7, #16]
 8011420:	429a      	cmp	r2, r3
 8011422:	d349      	bcc.n	80114b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011424:	4b36      	ldr	r3, [pc, #216]	; (8011500 <xTaskIncrementTick+0x150>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d104      	bne.n	8011438 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801142e:	4b37      	ldr	r3, [pc, #220]	; (801150c <xTaskIncrementTick+0x15c>)
 8011430:	f04f 32ff 	mov.w	r2, #4294967295
 8011434:	601a      	str	r2, [r3, #0]
					break;
 8011436:	e03f      	b.n	80114b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011438:	4b31      	ldr	r3, [pc, #196]	; (8011500 <xTaskIncrementTick+0x150>)
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	68db      	ldr	r3, [r3, #12]
 801143e:	68db      	ldr	r3, [r3, #12]
 8011440:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011442:	68bb      	ldr	r3, [r7, #8]
 8011444:	685b      	ldr	r3, [r3, #4]
 8011446:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011448:	693a      	ldr	r2, [r7, #16]
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	429a      	cmp	r2, r3
 801144e:	d203      	bcs.n	8011458 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011450:	4a2e      	ldr	r2, [pc, #184]	; (801150c <xTaskIncrementTick+0x15c>)
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011456:	e02f      	b.n	80114b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011458:	68bb      	ldr	r3, [r7, #8]
 801145a:	3304      	adds	r3, #4
 801145c:	4618      	mov	r0, r3
 801145e:	f7fe fbc7 	bl	800fbf0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011462:	68bb      	ldr	r3, [r7, #8]
 8011464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011466:	2b00      	cmp	r3, #0
 8011468:	d004      	beq.n	8011474 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801146a:	68bb      	ldr	r3, [r7, #8]
 801146c:	3318      	adds	r3, #24
 801146e:	4618      	mov	r0, r3
 8011470:	f7fe fbbe 	bl	800fbf0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011474:	68bb      	ldr	r3, [r7, #8]
 8011476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011478:	4b25      	ldr	r3, [pc, #148]	; (8011510 <xTaskIncrementTick+0x160>)
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	429a      	cmp	r2, r3
 801147e:	d903      	bls.n	8011488 <xTaskIncrementTick+0xd8>
 8011480:	68bb      	ldr	r3, [r7, #8]
 8011482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011484:	4a22      	ldr	r2, [pc, #136]	; (8011510 <xTaskIncrementTick+0x160>)
 8011486:	6013      	str	r3, [r2, #0]
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801148c:	4613      	mov	r3, r2
 801148e:	009b      	lsls	r3, r3, #2
 8011490:	4413      	add	r3, r2
 8011492:	009b      	lsls	r3, r3, #2
 8011494:	4a1f      	ldr	r2, [pc, #124]	; (8011514 <xTaskIncrementTick+0x164>)
 8011496:	441a      	add	r2, r3
 8011498:	68bb      	ldr	r3, [r7, #8]
 801149a:	3304      	adds	r3, #4
 801149c:	4619      	mov	r1, r3
 801149e:	4610      	mov	r0, r2
 80114a0:	f7fe fb49 	bl	800fb36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80114a4:	68bb      	ldr	r3, [r7, #8]
 80114a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114a8:	4b1b      	ldr	r3, [pc, #108]	; (8011518 <xTaskIncrementTick+0x168>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114ae:	429a      	cmp	r2, r3
 80114b0:	d3b8      	bcc.n	8011424 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80114b2:	2301      	movs	r3, #1
 80114b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80114b6:	e7b5      	b.n	8011424 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80114b8:	4b17      	ldr	r3, [pc, #92]	; (8011518 <xTaskIncrementTick+0x168>)
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114be:	4915      	ldr	r1, [pc, #84]	; (8011514 <xTaskIncrementTick+0x164>)
 80114c0:	4613      	mov	r3, r2
 80114c2:	009b      	lsls	r3, r3, #2
 80114c4:	4413      	add	r3, r2
 80114c6:	009b      	lsls	r3, r3, #2
 80114c8:	440b      	add	r3, r1
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	2b01      	cmp	r3, #1
 80114ce:	d901      	bls.n	80114d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80114d0:	2301      	movs	r3, #1
 80114d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80114d4:	4b11      	ldr	r3, [pc, #68]	; (801151c <xTaskIncrementTick+0x16c>)
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d007      	beq.n	80114ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80114dc:	2301      	movs	r3, #1
 80114de:	617b      	str	r3, [r7, #20]
 80114e0:	e004      	b.n	80114ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80114e2:	4b0f      	ldr	r3, [pc, #60]	; (8011520 <xTaskIncrementTick+0x170>)
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	3301      	adds	r3, #1
 80114e8:	4a0d      	ldr	r2, [pc, #52]	; (8011520 <xTaskIncrementTick+0x170>)
 80114ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80114ec:	697b      	ldr	r3, [r7, #20]
}
 80114ee:	4618      	mov	r0, r3
 80114f0:	3718      	adds	r7, #24
 80114f2:	46bd      	mov	sp, r7
 80114f4:	bd80      	pop	{r7, pc}
 80114f6:	bf00      	nop
 80114f8:	2000220c 	.word	0x2000220c
 80114fc:	200021e8 	.word	0x200021e8
 8011500:	2000219c 	.word	0x2000219c
 8011504:	200021a0 	.word	0x200021a0
 8011508:	200021fc 	.word	0x200021fc
 801150c:	20002204 	.word	0x20002204
 8011510:	200021ec 	.word	0x200021ec
 8011514:	20001d14 	.word	0x20001d14
 8011518:	20001d10 	.word	0x20001d10
 801151c:	200021f8 	.word	0x200021f8
 8011520:	200021f4 	.word	0x200021f4

08011524 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011524:	b480      	push	{r7}
 8011526:	b085      	sub	sp, #20
 8011528:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801152a:	4b2a      	ldr	r3, [pc, #168]	; (80115d4 <vTaskSwitchContext+0xb0>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d003      	beq.n	801153a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011532:	4b29      	ldr	r3, [pc, #164]	; (80115d8 <vTaskSwitchContext+0xb4>)
 8011534:	2201      	movs	r2, #1
 8011536:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011538:	e046      	b.n	80115c8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801153a:	4b27      	ldr	r3, [pc, #156]	; (80115d8 <vTaskSwitchContext+0xb4>)
 801153c:	2200      	movs	r2, #0
 801153e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011540:	4b26      	ldr	r3, [pc, #152]	; (80115dc <vTaskSwitchContext+0xb8>)
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	60fb      	str	r3, [r7, #12]
 8011546:	e010      	b.n	801156a <vTaskSwitchContext+0x46>
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d10a      	bne.n	8011564 <vTaskSwitchContext+0x40>
	__asm volatile
 801154e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011552:	f383 8811 	msr	BASEPRI, r3
 8011556:	f3bf 8f6f 	isb	sy
 801155a:	f3bf 8f4f 	dsb	sy
 801155e:	607b      	str	r3, [r7, #4]
}
 8011560:	bf00      	nop
 8011562:	e7fe      	b.n	8011562 <vTaskSwitchContext+0x3e>
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	3b01      	subs	r3, #1
 8011568:	60fb      	str	r3, [r7, #12]
 801156a:	491d      	ldr	r1, [pc, #116]	; (80115e0 <vTaskSwitchContext+0xbc>)
 801156c:	68fa      	ldr	r2, [r7, #12]
 801156e:	4613      	mov	r3, r2
 8011570:	009b      	lsls	r3, r3, #2
 8011572:	4413      	add	r3, r2
 8011574:	009b      	lsls	r3, r3, #2
 8011576:	440b      	add	r3, r1
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d0e4      	beq.n	8011548 <vTaskSwitchContext+0x24>
 801157e:	68fa      	ldr	r2, [r7, #12]
 8011580:	4613      	mov	r3, r2
 8011582:	009b      	lsls	r3, r3, #2
 8011584:	4413      	add	r3, r2
 8011586:	009b      	lsls	r3, r3, #2
 8011588:	4a15      	ldr	r2, [pc, #84]	; (80115e0 <vTaskSwitchContext+0xbc>)
 801158a:	4413      	add	r3, r2
 801158c:	60bb      	str	r3, [r7, #8]
 801158e:	68bb      	ldr	r3, [r7, #8]
 8011590:	685b      	ldr	r3, [r3, #4]
 8011592:	685a      	ldr	r2, [r3, #4]
 8011594:	68bb      	ldr	r3, [r7, #8]
 8011596:	605a      	str	r2, [r3, #4]
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	685a      	ldr	r2, [r3, #4]
 801159c:	68bb      	ldr	r3, [r7, #8]
 801159e:	3308      	adds	r3, #8
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d104      	bne.n	80115ae <vTaskSwitchContext+0x8a>
 80115a4:	68bb      	ldr	r3, [r7, #8]
 80115a6:	685b      	ldr	r3, [r3, #4]
 80115a8:	685a      	ldr	r2, [r3, #4]
 80115aa:	68bb      	ldr	r3, [r7, #8]
 80115ac:	605a      	str	r2, [r3, #4]
 80115ae:	68bb      	ldr	r3, [r7, #8]
 80115b0:	685b      	ldr	r3, [r3, #4]
 80115b2:	68db      	ldr	r3, [r3, #12]
 80115b4:	4a0b      	ldr	r2, [pc, #44]	; (80115e4 <vTaskSwitchContext+0xc0>)
 80115b6:	6013      	str	r3, [r2, #0]
 80115b8:	4a08      	ldr	r2, [pc, #32]	; (80115dc <vTaskSwitchContext+0xb8>)
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80115be:	4b09      	ldr	r3, [pc, #36]	; (80115e4 <vTaskSwitchContext+0xc0>)
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	3354      	adds	r3, #84	; 0x54
 80115c4:	4a08      	ldr	r2, [pc, #32]	; (80115e8 <vTaskSwitchContext+0xc4>)
 80115c6:	6013      	str	r3, [r2, #0]
}
 80115c8:	bf00      	nop
 80115ca:	3714      	adds	r7, #20
 80115cc:	46bd      	mov	sp, r7
 80115ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d2:	4770      	bx	lr
 80115d4:	2000220c 	.word	0x2000220c
 80115d8:	200021f8 	.word	0x200021f8
 80115dc:	200021ec 	.word	0x200021ec
 80115e0:	20001d14 	.word	0x20001d14
 80115e4:	20001d10 	.word	0x20001d10
 80115e8:	20000188 	.word	0x20000188

080115ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b084      	sub	sp, #16
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
 80115f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d10a      	bne.n	8011612 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80115fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011600:	f383 8811 	msr	BASEPRI, r3
 8011604:	f3bf 8f6f 	isb	sy
 8011608:	f3bf 8f4f 	dsb	sy
 801160c:	60fb      	str	r3, [r7, #12]
}
 801160e:	bf00      	nop
 8011610:	e7fe      	b.n	8011610 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011612:	4b07      	ldr	r3, [pc, #28]	; (8011630 <vTaskPlaceOnEventList+0x44>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	3318      	adds	r3, #24
 8011618:	4619      	mov	r1, r3
 801161a:	6878      	ldr	r0, [r7, #4]
 801161c:	f7fe faaf 	bl	800fb7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011620:	2101      	movs	r1, #1
 8011622:	6838      	ldr	r0, [r7, #0]
 8011624:	f000 fbc6 	bl	8011db4 <prvAddCurrentTaskToDelayedList>
}
 8011628:	bf00      	nop
 801162a:	3710      	adds	r7, #16
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}
 8011630:	20001d10 	.word	0x20001d10

08011634 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011634:	b580      	push	{r7, lr}
 8011636:	b086      	sub	sp, #24
 8011638:	af00      	add	r7, sp, #0
 801163a:	60f8      	str	r0, [r7, #12]
 801163c:	60b9      	str	r1, [r7, #8]
 801163e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d10a      	bne.n	801165c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8011646:	f04f 0350 	mov.w	r3, #80	; 0x50
 801164a:	f383 8811 	msr	BASEPRI, r3
 801164e:	f3bf 8f6f 	isb	sy
 8011652:	f3bf 8f4f 	dsb	sy
 8011656:	617b      	str	r3, [r7, #20]
}
 8011658:	bf00      	nop
 801165a:	e7fe      	b.n	801165a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801165c:	4b0a      	ldr	r3, [pc, #40]	; (8011688 <vTaskPlaceOnEventListRestricted+0x54>)
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	3318      	adds	r3, #24
 8011662:	4619      	mov	r1, r3
 8011664:	68f8      	ldr	r0, [r7, #12]
 8011666:	f7fe fa66 	bl	800fb36 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d002      	beq.n	8011676 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011670:	f04f 33ff 	mov.w	r3, #4294967295
 8011674:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011676:	6879      	ldr	r1, [r7, #4]
 8011678:	68b8      	ldr	r0, [r7, #8]
 801167a:	f000 fb9b 	bl	8011db4 <prvAddCurrentTaskToDelayedList>
	}
 801167e:	bf00      	nop
 8011680:	3718      	adds	r7, #24
 8011682:	46bd      	mov	sp, r7
 8011684:	bd80      	pop	{r7, pc}
 8011686:	bf00      	nop
 8011688:	20001d10 	.word	0x20001d10

0801168c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b086      	sub	sp, #24
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	68db      	ldr	r3, [r3, #12]
 8011698:	68db      	ldr	r3, [r3, #12]
 801169a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801169c:	693b      	ldr	r3, [r7, #16]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d10a      	bne.n	80116b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80116a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116a6:	f383 8811 	msr	BASEPRI, r3
 80116aa:	f3bf 8f6f 	isb	sy
 80116ae:	f3bf 8f4f 	dsb	sy
 80116b2:	60fb      	str	r3, [r7, #12]
}
 80116b4:	bf00      	nop
 80116b6:	e7fe      	b.n	80116b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80116b8:	693b      	ldr	r3, [r7, #16]
 80116ba:	3318      	adds	r3, #24
 80116bc:	4618      	mov	r0, r3
 80116be:	f7fe fa97 	bl	800fbf0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80116c2:	4b1e      	ldr	r3, [pc, #120]	; (801173c <xTaskRemoveFromEventList+0xb0>)
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d11d      	bne.n	8011706 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80116ca:	693b      	ldr	r3, [r7, #16]
 80116cc:	3304      	adds	r3, #4
 80116ce:	4618      	mov	r0, r3
 80116d0:	f7fe fa8e 	bl	800fbf0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80116d4:	693b      	ldr	r3, [r7, #16]
 80116d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116d8:	4b19      	ldr	r3, [pc, #100]	; (8011740 <xTaskRemoveFromEventList+0xb4>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	429a      	cmp	r2, r3
 80116de:	d903      	bls.n	80116e8 <xTaskRemoveFromEventList+0x5c>
 80116e0:	693b      	ldr	r3, [r7, #16]
 80116e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116e4:	4a16      	ldr	r2, [pc, #88]	; (8011740 <xTaskRemoveFromEventList+0xb4>)
 80116e6:	6013      	str	r3, [r2, #0]
 80116e8:	693b      	ldr	r3, [r7, #16]
 80116ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116ec:	4613      	mov	r3, r2
 80116ee:	009b      	lsls	r3, r3, #2
 80116f0:	4413      	add	r3, r2
 80116f2:	009b      	lsls	r3, r3, #2
 80116f4:	4a13      	ldr	r2, [pc, #76]	; (8011744 <xTaskRemoveFromEventList+0xb8>)
 80116f6:	441a      	add	r2, r3
 80116f8:	693b      	ldr	r3, [r7, #16]
 80116fa:	3304      	adds	r3, #4
 80116fc:	4619      	mov	r1, r3
 80116fe:	4610      	mov	r0, r2
 8011700:	f7fe fa19 	bl	800fb36 <vListInsertEnd>
 8011704:	e005      	b.n	8011712 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011706:	693b      	ldr	r3, [r7, #16]
 8011708:	3318      	adds	r3, #24
 801170a:	4619      	mov	r1, r3
 801170c:	480e      	ldr	r0, [pc, #56]	; (8011748 <xTaskRemoveFromEventList+0xbc>)
 801170e:	f7fe fa12 	bl	800fb36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011712:	693b      	ldr	r3, [r7, #16]
 8011714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011716:	4b0d      	ldr	r3, [pc, #52]	; (801174c <xTaskRemoveFromEventList+0xc0>)
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801171c:	429a      	cmp	r2, r3
 801171e:	d905      	bls.n	801172c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011720:	2301      	movs	r3, #1
 8011722:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011724:	4b0a      	ldr	r3, [pc, #40]	; (8011750 <xTaskRemoveFromEventList+0xc4>)
 8011726:	2201      	movs	r2, #1
 8011728:	601a      	str	r2, [r3, #0]
 801172a:	e001      	b.n	8011730 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801172c:	2300      	movs	r3, #0
 801172e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011730:	697b      	ldr	r3, [r7, #20]
}
 8011732:	4618      	mov	r0, r3
 8011734:	3718      	adds	r7, #24
 8011736:	46bd      	mov	sp, r7
 8011738:	bd80      	pop	{r7, pc}
 801173a:	bf00      	nop
 801173c:	2000220c 	.word	0x2000220c
 8011740:	200021ec 	.word	0x200021ec
 8011744:	20001d14 	.word	0x20001d14
 8011748:	200021a4 	.word	0x200021a4
 801174c:	20001d10 	.word	0x20001d10
 8011750:	200021f8 	.word	0x200021f8

08011754 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011754:	b480      	push	{r7}
 8011756:	b083      	sub	sp, #12
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801175c:	4b06      	ldr	r3, [pc, #24]	; (8011778 <vTaskInternalSetTimeOutState+0x24>)
 801175e:	681a      	ldr	r2, [r3, #0]
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011764:	4b05      	ldr	r3, [pc, #20]	; (801177c <vTaskInternalSetTimeOutState+0x28>)
 8011766:	681a      	ldr	r2, [r3, #0]
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	605a      	str	r2, [r3, #4]
}
 801176c:	bf00      	nop
 801176e:	370c      	adds	r7, #12
 8011770:	46bd      	mov	sp, r7
 8011772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011776:	4770      	bx	lr
 8011778:	200021fc 	.word	0x200021fc
 801177c:	200021e8 	.word	0x200021e8

08011780 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b088      	sub	sp, #32
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
 8011788:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d10a      	bne.n	80117a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011794:	f383 8811 	msr	BASEPRI, r3
 8011798:	f3bf 8f6f 	isb	sy
 801179c:	f3bf 8f4f 	dsb	sy
 80117a0:	613b      	str	r3, [r7, #16]
}
 80117a2:	bf00      	nop
 80117a4:	e7fe      	b.n	80117a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80117a6:	683b      	ldr	r3, [r7, #0]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d10a      	bne.n	80117c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80117ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117b0:	f383 8811 	msr	BASEPRI, r3
 80117b4:	f3bf 8f6f 	isb	sy
 80117b8:	f3bf 8f4f 	dsb	sy
 80117bc:	60fb      	str	r3, [r7, #12]
}
 80117be:	bf00      	nop
 80117c0:	e7fe      	b.n	80117c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80117c2:	f000 ffc7 	bl	8012754 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80117c6:	4b1d      	ldr	r3, [pc, #116]	; (801183c <xTaskCheckForTimeOut+0xbc>)
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	685b      	ldr	r3, [r3, #4]
 80117d0:	69ba      	ldr	r2, [r7, #24]
 80117d2:	1ad3      	subs	r3, r2, r3
 80117d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117de:	d102      	bne.n	80117e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80117e0:	2300      	movs	r3, #0
 80117e2:	61fb      	str	r3, [r7, #28]
 80117e4:	e023      	b.n	801182e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	681a      	ldr	r2, [r3, #0]
 80117ea:	4b15      	ldr	r3, [pc, #84]	; (8011840 <xTaskCheckForTimeOut+0xc0>)
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	429a      	cmp	r2, r3
 80117f0:	d007      	beq.n	8011802 <xTaskCheckForTimeOut+0x82>
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	685b      	ldr	r3, [r3, #4]
 80117f6:	69ba      	ldr	r2, [r7, #24]
 80117f8:	429a      	cmp	r2, r3
 80117fa:	d302      	bcc.n	8011802 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80117fc:	2301      	movs	r3, #1
 80117fe:	61fb      	str	r3, [r7, #28]
 8011800:	e015      	b.n	801182e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	697a      	ldr	r2, [r7, #20]
 8011808:	429a      	cmp	r2, r3
 801180a:	d20b      	bcs.n	8011824 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801180c:	683b      	ldr	r3, [r7, #0]
 801180e:	681a      	ldr	r2, [r3, #0]
 8011810:	697b      	ldr	r3, [r7, #20]
 8011812:	1ad2      	subs	r2, r2, r3
 8011814:	683b      	ldr	r3, [r7, #0]
 8011816:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011818:	6878      	ldr	r0, [r7, #4]
 801181a:	f7ff ff9b 	bl	8011754 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801181e:	2300      	movs	r3, #0
 8011820:	61fb      	str	r3, [r7, #28]
 8011822:	e004      	b.n	801182e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011824:	683b      	ldr	r3, [r7, #0]
 8011826:	2200      	movs	r2, #0
 8011828:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801182a:	2301      	movs	r3, #1
 801182c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801182e:	f000 ffc1 	bl	80127b4 <vPortExitCritical>

	return xReturn;
 8011832:	69fb      	ldr	r3, [r7, #28]
}
 8011834:	4618      	mov	r0, r3
 8011836:	3720      	adds	r7, #32
 8011838:	46bd      	mov	sp, r7
 801183a:	bd80      	pop	{r7, pc}
 801183c:	200021e8 	.word	0x200021e8
 8011840:	200021fc 	.word	0x200021fc

08011844 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011844:	b480      	push	{r7}
 8011846:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011848:	4b03      	ldr	r3, [pc, #12]	; (8011858 <vTaskMissedYield+0x14>)
 801184a:	2201      	movs	r2, #1
 801184c:	601a      	str	r2, [r3, #0]
}
 801184e:	bf00      	nop
 8011850:	46bd      	mov	sp, r7
 8011852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011856:	4770      	bx	lr
 8011858:	200021f8 	.word	0x200021f8

0801185c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b082      	sub	sp, #8
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011864:	f000 f852 	bl	801190c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011868:	4b06      	ldr	r3, [pc, #24]	; (8011884 <prvIdleTask+0x28>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	2b01      	cmp	r3, #1
 801186e:	d9f9      	bls.n	8011864 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011870:	4b05      	ldr	r3, [pc, #20]	; (8011888 <prvIdleTask+0x2c>)
 8011872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011876:	601a      	str	r2, [r3, #0]
 8011878:	f3bf 8f4f 	dsb	sy
 801187c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011880:	e7f0      	b.n	8011864 <prvIdleTask+0x8>
 8011882:	bf00      	nop
 8011884:	20001d14 	.word	0x20001d14
 8011888:	e000ed04 	.word	0xe000ed04

0801188c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b082      	sub	sp, #8
 8011890:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011892:	2300      	movs	r3, #0
 8011894:	607b      	str	r3, [r7, #4]
 8011896:	e00c      	b.n	80118b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011898:	687a      	ldr	r2, [r7, #4]
 801189a:	4613      	mov	r3, r2
 801189c:	009b      	lsls	r3, r3, #2
 801189e:	4413      	add	r3, r2
 80118a0:	009b      	lsls	r3, r3, #2
 80118a2:	4a12      	ldr	r2, [pc, #72]	; (80118ec <prvInitialiseTaskLists+0x60>)
 80118a4:	4413      	add	r3, r2
 80118a6:	4618      	mov	r0, r3
 80118a8:	f7fe f918 	bl	800fadc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	3301      	adds	r3, #1
 80118b0:	607b      	str	r3, [r7, #4]
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	2b37      	cmp	r3, #55	; 0x37
 80118b6:	d9ef      	bls.n	8011898 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80118b8:	480d      	ldr	r0, [pc, #52]	; (80118f0 <prvInitialiseTaskLists+0x64>)
 80118ba:	f7fe f90f 	bl	800fadc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80118be:	480d      	ldr	r0, [pc, #52]	; (80118f4 <prvInitialiseTaskLists+0x68>)
 80118c0:	f7fe f90c 	bl	800fadc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80118c4:	480c      	ldr	r0, [pc, #48]	; (80118f8 <prvInitialiseTaskLists+0x6c>)
 80118c6:	f7fe f909 	bl	800fadc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80118ca:	480c      	ldr	r0, [pc, #48]	; (80118fc <prvInitialiseTaskLists+0x70>)
 80118cc:	f7fe f906 	bl	800fadc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80118d0:	480b      	ldr	r0, [pc, #44]	; (8011900 <prvInitialiseTaskLists+0x74>)
 80118d2:	f7fe f903 	bl	800fadc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80118d6:	4b0b      	ldr	r3, [pc, #44]	; (8011904 <prvInitialiseTaskLists+0x78>)
 80118d8:	4a05      	ldr	r2, [pc, #20]	; (80118f0 <prvInitialiseTaskLists+0x64>)
 80118da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80118dc:	4b0a      	ldr	r3, [pc, #40]	; (8011908 <prvInitialiseTaskLists+0x7c>)
 80118de:	4a05      	ldr	r2, [pc, #20]	; (80118f4 <prvInitialiseTaskLists+0x68>)
 80118e0:	601a      	str	r2, [r3, #0]
}
 80118e2:	bf00      	nop
 80118e4:	3708      	adds	r7, #8
 80118e6:	46bd      	mov	sp, r7
 80118e8:	bd80      	pop	{r7, pc}
 80118ea:	bf00      	nop
 80118ec:	20001d14 	.word	0x20001d14
 80118f0:	20002174 	.word	0x20002174
 80118f4:	20002188 	.word	0x20002188
 80118f8:	200021a4 	.word	0x200021a4
 80118fc:	200021b8 	.word	0x200021b8
 8011900:	200021d0 	.word	0x200021d0
 8011904:	2000219c 	.word	0x2000219c
 8011908:	200021a0 	.word	0x200021a0

0801190c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b082      	sub	sp, #8
 8011910:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011912:	e019      	b.n	8011948 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011914:	f000 ff1e 	bl	8012754 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011918:	4b10      	ldr	r3, [pc, #64]	; (801195c <prvCheckTasksWaitingTermination+0x50>)
 801191a:	68db      	ldr	r3, [r3, #12]
 801191c:	68db      	ldr	r3, [r3, #12]
 801191e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	3304      	adds	r3, #4
 8011924:	4618      	mov	r0, r3
 8011926:	f7fe f963 	bl	800fbf0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801192a:	4b0d      	ldr	r3, [pc, #52]	; (8011960 <prvCheckTasksWaitingTermination+0x54>)
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	3b01      	subs	r3, #1
 8011930:	4a0b      	ldr	r2, [pc, #44]	; (8011960 <prvCheckTasksWaitingTermination+0x54>)
 8011932:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011934:	4b0b      	ldr	r3, [pc, #44]	; (8011964 <prvCheckTasksWaitingTermination+0x58>)
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	3b01      	subs	r3, #1
 801193a:	4a0a      	ldr	r2, [pc, #40]	; (8011964 <prvCheckTasksWaitingTermination+0x58>)
 801193c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801193e:	f000 ff39 	bl	80127b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011942:	6878      	ldr	r0, [r7, #4]
 8011944:	f000 f848 	bl	80119d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011948:	4b06      	ldr	r3, [pc, #24]	; (8011964 <prvCheckTasksWaitingTermination+0x58>)
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d1e1      	bne.n	8011914 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011950:	bf00      	nop
 8011952:	bf00      	nop
 8011954:	3708      	adds	r7, #8
 8011956:	46bd      	mov	sp, r7
 8011958:	bd80      	pop	{r7, pc}
 801195a:	bf00      	nop
 801195c:	200021b8 	.word	0x200021b8
 8011960:	200021e4 	.word	0x200021e4
 8011964:	200021cc 	.word	0x200021cc

08011968 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8011968:	b480      	push	{r7}
 801196a:	b085      	sub	sp, #20
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8011970:	2300      	movs	r3, #0
 8011972:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8011974:	e005      	b.n	8011982 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	3301      	adds	r3, #1
 801197a:	607b      	str	r3, [r7, #4]
			ulCount++;
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	3301      	adds	r3, #1
 8011980:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	781b      	ldrb	r3, [r3, #0]
 8011986:	2ba5      	cmp	r3, #165	; 0xa5
 8011988:	d0f5      	beq.n	8011976 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	089b      	lsrs	r3, r3, #2
 801198e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	b29b      	uxth	r3, r3
	}
 8011994:	4618      	mov	r0, r3
 8011996:	3714      	adds	r7, #20
 8011998:	46bd      	mov	sp, r7
 801199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199e:	4770      	bx	lr

080119a0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b086      	sub	sp, #24
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d102      	bne.n	80119b4 <uxTaskGetStackHighWaterMark+0x14>
 80119ae:	4b09      	ldr	r3, [pc, #36]	; (80119d4 <uxTaskGetStackHighWaterMark+0x34>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	e000      	b.n	80119b6 <uxTaskGetStackHighWaterMark+0x16>
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80119b8:	697b      	ldr	r3, [r7, #20]
 80119ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119bc:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80119be:	6938      	ldr	r0, [r7, #16]
 80119c0:	f7ff ffd2 	bl	8011968 <prvTaskCheckFreeStackSpace>
 80119c4:	4603      	mov	r3, r0
 80119c6:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80119c8:	68fb      	ldr	r3, [r7, #12]
	}
 80119ca:	4618      	mov	r0, r3
 80119cc:	3718      	adds	r7, #24
 80119ce:	46bd      	mov	sp, r7
 80119d0:	bd80      	pop	{r7, pc}
 80119d2:	bf00      	nop
 80119d4:	20001d10 	.word	0x20001d10

080119d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b084      	sub	sp, #16
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	3354      	adds	r3, #84	; 0x54
 80119e4:	4618      	mov	r0, r3
 80119e6:	f00a fc63 	bl	801c2b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d108      	bne.n	8011a06 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119f8:	4618      	mov	r0, r3
 80119fa:	f001 f813 	bl	8012a24 <vPortFree>
				vPortFree( pxTCB );
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	f001 f810 	bl	8012a24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011a04:	e018      	b.n	8011a38 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8011a0c:	2b01      	cmp	r3, #1
 8011a0e:	d103      	bne.n	8011a18 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011a10:	6878      	ldr	r0, [r7, #4]
 8011a12:	f001 f807 	bl	8012a24 <vPortFree>
	}
 8011a16:	e00f      	b.n	8011a38 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8011a1e:	2b02      	cmp	r3, #2
 8011a20:	d00a      	beq.n	8011a38 <prvDeleteTCB+0x60>
	__asm volatile
 8011a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a26:	f383 8811 	msr	BASEPRI, r3
 8011a2a:	f3bf 8f6f 	isb	sy
 8011a2e:	f3bf 8f4f 	dsb	sy
 8011a32:	60fb      	str	r3, [r7, #12]
}
 8011a34:	bf00      	nop
 8011a36:	e7fe      	b.n	8011a36 <prvDeleteTCB+0x5e>
	}
 8011a38:	bf00      	nop
 8011a3a:	3710      	adds	r7, #16
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	bd80      	pop	{r7, pc}

08011a40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011a40:	b480      	push	{r7}
 8011a42:	b083      	sub	sp, #12
 8011a44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a46:	4b0c      	ldr	r3, [pc, #48]	; (8011a78 <prvResetNextTaskUnblockTime+0x38>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d104      	bne.n	8011a5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011a50:	4b0a      	ldr	r3, [pc, #40]	; (8011a7c <prvResetNextTaskUnblockTime+0x3c>)
 8011a52:	f04f 32ff 	mov.w	r2, #4294967295
 8011a56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011a58:	e008      	b.n	8011a6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a5a:	4b07      	ldr	r3, [pc, #28]	; (8011a78 <prvResetNextTaskUnblockTime+0x38>)
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	68db      	ldr	r3, [r3, #12]
 8011a60:	68db      	ldr	r3, [r3, #12]
 8011a62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	685b      	ldr	r3, [r3, #4]
 8011a68:	4a04      	ldr	r2, [pc, #16]	; (8011a7c <prvResetNextTaskUnblockTime+0x3c>)
 8011a6a:	6013      	str	r3, [r2, #0]
}
 8011a6c:	bf00      	nop
 8011a6e:	370c      	adds	r7, #12
 8011a70:	46bd      	mov	sp, r7
 8011a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a76:	4770      	bx	lr
 8011a78:	2000219c 	.word	0x2000219c
 8011a7c:	20002204 	.word	0x20002204

08011a80 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8011a80:	b480      	push	{r7}
 8011a82:	b083      	sub	sp, #12
 8011a84:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8011a86:	4b05      	ldr	r3, [pc, #20]	; (8011a9c <xTaskGetCurrentTaskHandle+0x1c>)
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8011a8c:	687b      	ldr	r3, [r7, #4]
	}
 8011a8e:	4618      	mov	r0, r3
 8011a90:	370c      	adds	r7, #12
 8011a92:	46bd      	mov	sp, r7
 8011a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a98:	4770      	bx	lr
 8011a9a:	bf00      	nop
 8011a9c:	20001d10 	.word	0x20001d10

08011aa0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011aa0:	b480      	push	{r7}
 8011aa2:	b083      	sub	sp, #12
 8011aa4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011aa6:	4b0b      	ldr	r3, [pc, #44]	; (8011ad4 <xTaskGetSchedulerState+0x34>)
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d102      	bne.n	8011ab4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011aae:	2301      	movs	r3, #1
 8011ab0:	607b      	str	r3, [r7, #4]
 8011ab2:	e008      	b.n	8011ac6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ab4:	4b08      	ldr	r3, [pc, #32]	; (8011ad8 <xTaskGetSchedulerState+0x38>)
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d102      	bne.n	8011ac2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011abc:	2302      	movs	r3, #2
 8011abe:	607b      	str	r3, [r7, #4]
 8011ac0:	e001      	b.n	8011ac6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011ac6:	687b      	ldr	r3, [r7, #4]
	}
 8011ac8:	4618      	mov	r0, r3
 8011aca:	370c      	adds	r7, #12
 8011acc:	46bd      	mov	sp, r7
 8011ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad2:	4770      	bx	lr
 8011ad4:	200021f0 	.word	0x200021f0
 8011ad8:	2000220c 	.word	0x2000220c

08011adc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b084      	sub	sp, #16
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011ae8:	2300      	movs	r3, #0
 8011aea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d051      	beq.n	8011b96 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011af2:	68bb      	ldr	r3, [r7, #8]
 8011af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011af6:	4b2a      	ldr	r3, [pc, #168]	; (8011ba0 <xTaskPriorityInherit+0xc4>)
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011afc:	429a      	cmp	r2, r3
 8011afe:	d241      	bcs.n	8011b84 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011b00:	68bb      	ldr	r3, [r7, #8]
 8011b02:	699b      	ldr	r3, [r3, #24]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	db06      	blt.n	8011b16 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b08:	4b25      	ldr	r3, [pc, #148]	; (8011ba0 <xTaskPriorityInherit+0xc4>)
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011b12:	68bb      	ldr	r3, [r7, #8]
 8011b14:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	6959      	ldr	r1, [r3, #20]
 8011b1a:	68bb      	ldr	r3, [r7, #8]
 8011b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b1e:	4613      	mov	r3, r2
 8011b20:	009b      	lsls	r3, r3, #2
 8011b22:	4413      	add	r3, r2
 8011b24:	009b      	lsls	r3, r3, #2
 8011b26:	4a1f      	ldr	r2, [pc, #124]	; (8011ba4 <xTaskPriorityInherit+0xc8>)
 8011b28:	4413      	add	r3, r2
 8011b2a:	4299      	cmp	r1, r3
 8011b2c:	d122      	bne.n	8011b74 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b2e:	68bb      	ldr	r3, [r7, #8]
 8011b30:	3304      	adds	r3, #4
 8011b32:	4618      	mov	r0, r3
 8011b34:	f7fe f85c 	bl	800fbf0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011b38:	4b19      	ldr	r3, [pc, #100]	; (8011ba0 <xTaskPriorityInherit+0xc4>)
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b3e:	68bb      	ldr	r3, [r7, #8]
 8011b40:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011b42:	68bb      	ldr	r3, [r7, #8]
 8011b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b46:	4b18      	ldr	r3, [pc, #96]	; (8011ba8 <xTaskPriorityInherit+0xcc>)
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	429a      	cmp	r2, r3
 8011b4c:	d903      	bls.n	8011b56 <xTaskPriorityInherit+0x7a>
 8011b4e:	68bb      	ldr	r3, [r7, #8]
 8011b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b52:	4a15      	ldr	r2, [pc, #84]	; (8011ba8 <xTaskPriorityInherit+0xcc>)
 8011b54:	6013      	str	r3, [r2, #0]
 8011b56:	68bb      	ldr	r3, [r7, #8]
 8011b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b5a:	4613      	mov	r3, r2
 8011b5c:	009b      	lsls	r3, r3, #2
 8011b5e:	4413      	add	r3, r2
 8011b60:	009b      	lsls	r3, r3, #2
 8011b62:	4a10      	ldr	r2, [pc, #64]	; (8011ba4 <xTaskPriorityInherit+0xc8>)
 8011b64:	441a      	add	r2, r3
 8011b66:	68bb      	ldr	r3, [r7, #8]
 8011b68:	3304      	adds	r3, #4
 8011b6a:	4619      	mov	r1, r3
 8011b6c:	4610      	mov	r0, r2
 8011b6e:	f7fd ffe2 	bl	800fb36 <vListInsertEnd>
 8011b72:	e004      	b.n	8011b7e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011b74:	4b0a      	ldr	r3, [pc, #40]	; (8011ba0 <xTaskPriorityInherit+0xc4>)
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b7a:	68bb      	ldr	r3, [r7, #8]
 8011b7c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011b7e:	2301      	movs	r3, #1
 8011b80:	60fb      	str	r3, [r7, #12]
 8011b82:	e008      	b.n	8011b96 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011b84:	68bb      	ldr	r3, [r7, #8]
 8011b86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011b88:	4b05      	ldr	r3, [pc, #20]	; (8011ba0 <xTaskPriorityInherit+0xc4>)
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b8e:	429a      	cmp	r2, r3
 8011b90:	d201      	bcs.n	8011b96 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011b92:	2301      	movs	r3, #1
 8011b94:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011b96:	68fb      	ldr	r3, [r7, #12]
	}
 8011b98:	4618      	mov	r0, r3
 8011b9a:	3710      	adds	r7, #16
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	bd80      	pop	{r7, pc}
 8011ba0:	20001d10 	.word	0x20001d10
 8011ba4:	20001d14 	.word	0x20001d14
 8011ba8:	200021ec 	.word	0x200021ec

08011bac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b086      	sub	sp, #24
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011bb8:	2300      	movs	r3, #0
 8011bba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d056      	beq.n	8011c70 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011bc2:	4b2e      	ldr	r3, [pc, #184]	; (8011c7c <xTaskPriorityDisinherit+0xd0>)
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	693a      	ldr	r2, [r7, #16]
 8011bc8:	429a      	cmp	r2, r3
 8011bca:	d00a      	beq.n	8011be2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bd0:	f383 8811 	msr	BASEPRI, r3
 8011bd4:	f3bf 8f6f 	isb	sy
 8011bd8:	f3bf 8f4f 	dsb	sy
 8011bdc:	60fb      	str	r3, [r7, #12]
}
 8011bde:	bf00      	nop
 8011be0:	e7fe      	b.n	8011be0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011be2:	693b      	ldr	r3, [r7, #16]
 8011be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d10a      	bne.n	8011c00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bee:	f383 8811 	msr	BASEPRI, r3
 8011bf2:	f3bf 8f6f 	isb	sy
 8011bf6:	f3bf 8f4f 	dsb	sy
 8011bfa:	60bb      	str	r3, [r7, #8]
}
 8011bfc:	bf00      	nop
 8011bfe:	e7fe      	b.n	8011bfe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011c00:	693b      	ldr	r3, [r7, #16]
 8011c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c04:	1e5a      	subs	r2, r3, #1
 8011c06:	693b      	ldr	r3, [r7, #16]
 8011c08:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011c0a:	693b      	ldr	r3, [r7, #16]
 8011c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c0e:	693b      	ldr	r3, [r7, #16]
 8011c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011c12:	429a      	cmp	r2, r3
 8011c14:	d02c      	beq.n	8011c70 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d128      	bne.n	8011c70 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c1e:	693b      	ldr	r3, [r7, #16]
 8011c20:	3304      	adds	r3, #4
 8011c22:	4618      	mov	r0, r3
 8011c24:	f7fd ffe4 	bl	800fbf0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011c28:	693b      	ldr	r3, [r7, #16]
 8011c2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011c2c:	693b      	ldr	r3, [r7, #16]
 8011c2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c30:	693b      	ldr	r3, [r7, #16]
 8011c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011c38:	693b      	ldr	r3, [r7, #16]
 8011c3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011c3c:	693b      	ldr	r3, [r7, #16]
 8011c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c40:	4b0f      	ldr	r3, [pc, #60]	; (8011c80 <xTaskPriorityDisinherit+0xd4>)
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	429a      	cmp	r2, r3
 8011c46:	d903      	bls.n	8011c50 <xTaskPriorityDisinherit+0xa4>
 8011c48:	693b      	ldr	r3, [r7, #16]
 8011c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c4c:	4a0c      	ldr	r2, [pc, #48]	; (8011c80 <xTaskPriorityDisinherit+0xd4>)
 8011c4e:	6013      	str	r3, [r2, #0]
 8011c50:	693b      	ldr	r3, [r7, #16]
 8011c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c54:	4613      	mov	r3, r2
 8011c56:	009b      	lsls	r3, r3, #2
 8011c58:	4413      	add	r3, r2
 8011c5a:	009b      	lsls	r3, r3, #2
 8011c5c:	4a09      	ldr	r2, [pc, #36]	; (8011c84 <xTaskPriorityDisinherit+0xd8>)
 8011c5e:	441a      	add	r2, r3
 8011c60:	693b      	ldr	r3, [r7, #16]
 8011c62:	3304      	adds	r3, #4
 8011c64:	4619      	mov	r1, r3
 8011c66:	4610      	mov	r0, r2
 8011c68:	f7fd ff65 	bl	800fb36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011c6c:	2301      	movs	r3, #1
 8011c6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011c70:	697b      	ldr	r3, [r7, #20]
	}
 8011c72:	4618      	mov	r0, r3
 8011c74:	3718      	adds	r7, #24
 8011c76:	46bd      	mov	sp, r7
 8011c78:	bd80      	pop	{r7, pc}
 8011c7a:	bf00      	nop
 8011c7c:	20001d10 	.word	0x20001d10
 8011c80:	200021ec 	.word	0x200021ec
 8011c84:	20001d14 	.word	0x20001d14

08011c88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b088      	sub	sp, #32
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
 8011c90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011c96:	2301      	movs	r3, #1
 8011c98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d06a      	beq.n	8011d76 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011ca0:	69bb      	ldr	r3, [r7, #24]
 8011ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d10a      	bne.n	8011cbe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cac:	f383 8811 	msr	BASEPRI, r3
 8011cb0:	f3bf 8f6f 	isb	sy
 8011cb4:	f3bf 8f4f 	dsb	sy
 8011cb8:	60fb      	str	r3, [r7, #12]
}
 8011cba:	bf00      	nop
 8011cbc:	e7fe      	b.n	8011cbc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011cbe:	69bb      	ldr	r3, [r7, #24]
 8011cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011cc2:	683a      	ldr	r2, [r7, #0]
 8011cc4:	429a      	cmp	r2, r3
 8011cc6:	d902      	bls.n	8011cce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011cc8:	683b      	ldr	r3, [r7, #0]
 8011cca:	61fb      	str	r3, [r7, #28]
 8011ccc:	e002      	b.n	8011cd4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011cce:	69bb      	ldr	r3, [r7, #24]
 8011cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011cd2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011cd4:	69bb      	ldr	r3, [r7, #24]
 8011cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cd8:	69fa      	ldr	r2, [r7, #28]
 8011cda:	429a      	cmp	r2, r3
 8011cdc:	d04b      	beq.n	8011d76 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011cde:	69bb      	ldr	r3, [r7, #24]
 8011ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ce2:	697a      	ldr	r2, [r7, #20]
 8011ce4:	429a      	cmp	r2, r3
 8011ce6:	d146      	bne.n	8011d76 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011ce8:	4b25      	ldr	r3, [pc, #148]	; (8011d80 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	69ba      	ldr	r2, [r7, #24]
 8011cee:	429a      	cmp	r2, r3
 8011cf0:	d10a      	bne.n	8011d08 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8011cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cf6:	f383 8811 	msr	BASEPRI, r3
 8011cfa:	f3bf 8f6f 	isb	sy
 8011cfe:	f3bf 8f4f 	dsb	sy
 8011d02:	60bb      	str	r3, [r7, #8]
}
 8011d04:	bf00      	nop
 8011d06:	e7fe      	b.n	8011d06 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011d08:	69bb      	ldr	r3, [r7, #24]
 8011d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d0c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011d0e:	69bb      	ldr	r3, [r7, #24]
 8011d10:	69fa      	ldr	r2, [r7, #28]
 8011d12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011d14:	69bb      	ldr	r3, [r7, #24]
 8011d16:	699b      	ldr	r3, [r3, #24]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	db04      	blt.n	8011d26 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d1c:	69fb      	ldr	r3, [r7, #28]
 8011d1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011d22:	69bb      	ldr	r3, [r7, #24]
 8011d24:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011d26:	69bb      	ldr	r3, [r7, #24]
 8011d28:	6959      	ldr	r1, [r3, #20]
 8011d2a:	693a      	ldr	r2, [r7, #16]
 8011d2c:	4613      	mov	r3, r2
 8011d2e:	009b      	lsls	r3, r3, #2
 8011d30:	4413      	add	r3, r2
 8011d32:	009b      	lsls	r3, r3, #2
 8011d34:	4a13      	ldr	r2, [pc, #76]	; (8011d84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011d36:	4413      	add	r3, r2
 8011d38:	4299      	cmp	r1, r3
 8011d3a:	d11c      	bne.n	8011d76 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011d3c:	69bb      	ldr	r3, [r7, #24]
 8011d3e:	3304      	adds	r3, #4
 8011d40:	4618      	mov	r0, r3
 8011d42:	f7fd ff55 	bl	800fbf0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011d46:	69bb      	ldr	r3, [r7, #24]
 8011d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d4a:	4b0f      	ldr	r3, [pc, #60]	; (8011d88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d903      	bls.n	8011d5a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8011d52:	69bb      	ldr	r3, [r7, #24]
 8011d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d56:	4a0c      	ldr	r2, [pc, #48]	; (8011d88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011d58:	6013      	str	r3, [r2, #0]
 8011d5a:	69bb      	ldr	r3, [r7, #24]
 8011d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d5e:	4613      	mov	r3, r2
 8011d60:	009b      	lsls	r3, r3, #2
 8011d62:	4413      	add	r3, r2
 8011d64:	009b      	lsls	r3, r3, #2
 8011d66:	4a07      	ldr	r2, [pc, #28]	; (8011d84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011d68:	441a      	add	r2, r3
 8011d6a:	69bb      	ldr	r3, [r7, #24]
 8011d6c:	3304      	adds	r3, #4
 8011d6e:	4619      	mov	r1, r3
 8011d70:	4610      	mov	r0, r2
 8011d72:	f7fd fee0 	bl	800fb36 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011d76:	bf00      	nop
 8011d78:	3720      	adds	r7, #32
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	bd80      	pop	{r7, pc}
 8011d7e:	bf00      	nop
 8011d80:	20001d10 	.word	0x20001d10
 8011d84:	20001d14 	.word	0x20001d14
 8011d88:	200021ec 	.word	0x200021ec

08011d8c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011d8c:	b480      	push	{r7}
 8011d8e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011d90:	4b07      	ldr	r3, [pc, #28]	; (8011db0 <pvTaskIncrementMutexHeldCount+0x24>)
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d004      	beq.n	8011da2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011d98:	4b05      	ldr	r3, [pc, #20]	; (8011db0 <pvTaskIncrementMutexHeldCount+0x24>)
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011d9e:	3201      	adds	r2, #1
 8011da0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8011da2:	4b03      	ldr	r3, [pc, #12]	; (8011db0 <pvTaskIncrementMutexHeldCount+0x24>)
 8011da4:	681b      	ldr	r3, [r3, #0]
	}
 8011da6:	4618      	mov	r0, r3
 8011da8:	46bd      	mov	sp, r7
 8011daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dae:	4770      	bx	lr
 8011db0:	20001d10 	.word	0x20001d10

08011db4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b084      	sub	sp, #16
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
 8011dbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011dbe:	4b21      	ldr	r3, [pc, #132]	; (8011e44 <prvAddCurrentTaskToDelayedList+0x90>)
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011dc4:	4b20      	ldr	r3, [pc, #128]	; (8011e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	3304      	adds	r3, #4
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f7fd ff10 	bl	800fbf0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dd6:	d10a      	bne.n	8011dee <prvAddCurrentTaskToDelayedList+0x3a>
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d007      	beq.n	8011dee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011dde:	4b1a      	ldr	r3, [pc, #104]	; (8011e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	3304      	adds	r3, #4
 8011de4:	4619      	mov	r1, r3
 8011de6:	4819      	ldr	r0, [pc, #100]	; (8011e4c <prvAddCurrentTaskToDelayedList+0x98>)
 8011de8:	f7fd fea5 	bl	800fb36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011dec:	e026      	b.n	8011e3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011dee:	68fa      	ldr	r2, [r7, #12]
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	4413      	add	r3, r2
 8011df4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011df6:	4b14      	ldr	r3, [pc, #80]	; (8011e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	68ba      	ldr	r2, [r7, #8]
 8011dfc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011dfe:	68ba      	ldr	r2, [r7, #8]
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	429a      	cmp	r2, r3
 8011e04:	d209      	bcs.n	8011e1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011e06:	4b12      	ldr	r3, [pc, #72]	; (8011e50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011e08:	681a      	ldr	r2, [r3, #0]
 8011e0a:	4b0f      	ldr	r3, [pc, #60]	; (8011e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	3304      	adds	r3, #4
 8011e10:	4619      	mov	r1, r3
 8011e12:	4610      	mov	r0, r2
 8011e14:	f7fd feb3 	bl	800fb7e <vListInsert>
}
 8011e18:	e010      	b.n	8011e3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011e1a:	4b0e      	ldr	r3, [pc, #56]	; (8011e54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011e1c:	681a      	ldr	r2, [r3, #0]
 8011e1e:	4b0a      	ldr	r3, [pc, #40]	; (8011e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	3304      	adds	r3, #4
 8011e24:	4619      	mov	r1, r3
 8011e26:	4610      	mov	r0, r2
 8011e28:	f7fd fea9 	bl	800fb7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011e2c:	4b0a      	ldr	r3, [pc, #40]	; (8011e58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	68ba      	ldr	r2, [r7, #8]
 8011e32:	429a      	cmp	r2, r3
 8011e34:	d202      	bcs.n	8011e3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011e36:	4a08      	ldr	r2, [pc, #32]	; (8011e58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011e38:	68bb      	ldr	r3, [r7, #8]
 8011e3a:	6013      	str	r3, [r2, #0]
}
 8011e3c:	bf00      	nop
 8011e3e:	3710      	adds	r7, #16
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd80      	pop	{r7, pc}
 8011e44:	200021e8 	.word	0x200021e8
 8011e48:	20001d10 	.word	0x20001d10
 8011e4c:	200021d0 	.word	0x200021d0
 8011e50:	200021a0 	.word	0x200021a0
 8011e54:	2000219c 	.word	0x2000219c
 8011e58:	20002204 	.word	0x20002204

08011e5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b08a      	sub	sp, #40	; 0x28
 8011e60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011e62:	2300      	movs	r3, #0
 8011e64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011e66:	f000 fb07 	bl	8012478 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011e6a:	4b1c      	ldr	r3, [pc, #112]	; (8011edc <xTimerCreateTimerTask+0x80>)
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d021      	beq.n	8011eb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011e72:	2300      	movs	r3, #0
 8011e74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011e76:	2300      	movs	r3, #0
 8011e78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011e7a:	1d3a      	adds	r2, r7, #4
 8011e7c:	f107 0108 	add.w	r1, r7, #8
 8011e80:	f107 030c 	add.w	r3, r7, #12
 8011e84:	4618      	mov	r0, r3
 8011e86:	f7fd fe0f 	bl	800faa8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011e8a:	6879      	ldr	r1, [r7, #4]
 8011e8c:	68bb      	ldr	r3, [r7, #8]
 8011e8e:	68fa      	ldr	r2, [r7, #12]
 8011e90:	9202      	str	r2, [sp, #8]
 8011e92:	9301      	str	r3, [sp, #4]
 8011e94:	2302      	movs	r3, #2
 8011e96:	9300      	str	r3, [sp, #0]
 8011e98:	2300      	movs	r3, #0
 8011e9a:	460a      	mov	r2, r1
 8011e9c:	4910      	ldr	r1, [pc, #64]	; (8011ee0 <xTimerCreateTimerTask+0x84>)
 8011e9e:	4811      	ldr	r0, [pc, #68]	; (8011ee4 <xTimerCreateTimerTask+0x88>)
 8011ea0:	f7fe ff6e 	bl	8010d80 <xTaskCreateStatic>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	4a10      	ldr	r2, [pc, #64]	; (8011ee8 <xTimerCreateTimerTask+0x8c>)
 8011ea8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011eaa:	4b0f      	ldr	r3, [pc, #60]	; (8011ee8 <xTimerCreateTimerTask+0x8c>)
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d001      	beq.n	8011eb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011eb2:	2301      	movs	r3, #1
 8011eb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011eb6:	697b      	ldr	r3, [r7, #20]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d10a      	bne.n	8011ed2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8011ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ec0:	f383 8811 	msr	BASEPRI, r3
 8011ec4:	f3bf 8f6f 	isb	sy
 8011ec8:	f3bf 8f4f 	dsb	sy
 8011ecc:	613b      	str	r3, [r7, #16]
}
 8011ece:	bf00      	nop
 8011ed0:	e7fe      	b.n	8011ed0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011ed2:	697b      	ldr	r3, [r7, #20]
}
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	3718      	adds	r7, #24
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	bd80      	pop	{r7, pc}
 8011edc:	20002240 	.word	0x20002240
 8011ee0:	08021b10 	.word	0x08021b10
 8011ee4:	08012021 	.word	0x08012021
 8011ee8:	20002244 	.word	0x20002244

08011eec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b08a      	sub	sp, #40	; 0x28
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	60f8      	str	r0, [r7, #12]
 8011ef4:	60b9      	str	r1, [r7, #8]
 8011ef6:	607a      	str	r2, [r7, #4]
 8011ef8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011efa:	2300      	movs	r3, #0
 8011efc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d10a      	bne.n	8011f1a <xTimerGenericCommand+0x2e>
	__asm volatile
 8011f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f08:	f383 8811 	msr	BASEPRI, r3
 8011f0c:	f3bf 8f6f 	isb	sy
 8011f10:	f3bf 8f4f 	dsb	sy
 8011f14:	623b      	str	r3, [r7, #32]
}
 8011f16:	bf00      	nop
 8011f18:	e7fe      	b.n	8011f18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011f1a:	4b1a      	ldr	r3, [pc, #104]	; (8011f84 <xTimerGenericCommand+0x98>)
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d02a      	beq.n	8011f78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011f22:	68bb      	ldr	r3, [r7, #8]
 8011f24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011f2e:	68bb      	ldr	r3, [r7, #8]
 8011f30:	2b05      	cmp	r3, #5
 8011f32:	dc18      	bgt.n	8011f66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011f34:	f7ff fdb4 	bl	8011aa0 <xTaskGetSchedulerState>
 8011f38:	4603      	mov	r3, r0
 8011f3a:	2b02      	cmp	r3, #2
 8011f3c:	d109      	bne.n	8011f52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011f3e:	4b11      	ldr	r3, [pc, #68]	; (8011f84 <xTimerGenericCommand+0x98>)
 8011f40:	6818      	ldr	r0, [r3, #0]
 8011f42:	f107 0110 	add.w	r1, r7, #16
 8011f46:	2300      	movs	r3, #0
 8011f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f4a:	f7fe f86f 	bl	801002c <xQueueGenericSend>
 8011f4e:	6278      	str	r0, [r7, #36]	; 0x24
 8011f50:	e012      	b.n	8011f78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011f52:	4b0c      	ldr	r3, [pc, #48]	; (8011f84 <xTimerGenericCommand+0x98>)
 8011f54:	6818      	ldr	r0, [r3, #0]
 8011f56:	f107 0110 	add.w	r1, r7, #16
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	f7fe f865 	bl	801002c <xQueueGenericSend>
 8011f62:	6278      	str	r0, [r7, #36]	; 0x24
 8011f64:	e008      	b.n	8011f78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011f66:	4b07      	ldr	r3, [pc, #28]	; (8011f84 <xTimerGenericCommand+0x98>)
 8011f68:	6818      	ldr	r0, [r3, #0]
 8011f6a:	f107 0110 	add.w	r1, r7, #16
 8011f6e:	2300      	movs	r3, #0
 8011f70:	683a      	ldr	r2, [r7, #0]
 8011f72:	f7fe f959 	bl	8010228 <xQueueGenericSendFromISR>
 8011f76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	3728      	adds	r7, #40	; 0x28
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	bd80      	pop	{r7, pc}
 8011f82:	bf00      	nop
 8011f84:	20002240 	.word	0x20002240

08011f88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b088      	sub	sp, #32
 8011f8c:	af02      	add	r7, sp, #8
 8011f8e:	6078      	str	r0, [r7, #4]
 8011f90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f92:	4b22      	ldr	r3, [pc, #136]	; (801201c <prvProcessExpiredTimer+0x94>)
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	68db      	ldr	r3, [r3, #12]
 8011f98:	68db      	ldr	r3, [r3, #12]
 8011f9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011f9c:	697b      	ldr	r3, [r7, #20]
 8011f9e:	3304      	adds	r3, #4
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	f7fd fe25 	bl	800fbf0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011fa6:	697b      	ldr	r3, [r7, #20]
 8011fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011fac:	f003 0304 	and.w	r3, r3, #4
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d022      	beq.n	8011ffa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011fb4:	697b      	ldr	r3, [r7, #20]
 8011fb6:	699a      	ldr	r2, [r3, #24]
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	18d1      	adds	r1, r2, r3
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	683a      	ldr	r2, [r7, #0]
 8011fc0:	6978      	ldr	r0, [r7, #20]
 8011fc2:	f000 f8d1 	bl	8012168 <prvInsertTimerInActiveList>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d01f      	beq.n	801200c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011fcc:	2300      	movs	r3, #0
 8011fce:	9300      	str	r3, [sp, #0]
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	687a      	ldr	r2, [r7, #4]
 8011fd4:	2100      	movs	r1, #0
 8011fd6:	6978      	ldr	r0, [r7, #20]
 8011fd8:	f7ff ff88 	bl	8011eec <xTimerGenericCommand>
 8011fdc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011fde:	693b      	ldr	r3, [r7, #16]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d113      	bne.n	801200c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8011fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fe8:	f383 8811 	msr	BASEPRI, r3
 8011fec:	f3bf 8f6f 	isb	sy
 8011ff0:	f3bf 8f4f 	dsb	sy
 8011ff4:	60fb      	str	r3, [r7, #12]
}
 8011ff6:	bf00      	nop
 8011ff8:	e7fe      	b.n	8011ff8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011ffa:	697b      	ldr	r3, [r7, #20]
 8011ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012000:	f023 0301 	bic.w	r3, r3, #1
 8012004:	b2da      	uxtb	r2, r3
 8012006:	697b      	ldr	r3, [r7, #20]
 8012008:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801200c:	697b      	ldr	r3, [r7, #20]
 801200e:	6a1b      	ldr	r3, [r3, #32]
 8012010:	6978      	ldr	r0, [r7, #20]
 8012012:	4798      	blx	r3
}
 8012014:	bf00      	nop
 8012016:	3718      	adds	r7, #24
 8012018:	46bd      	mov	sp, r7
 801201a:	bd80      	pop	{r7, pc}
 801201c:	20002238 	.word	0x20002238

08012020 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b084      	sub	sp, #16
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012028:	f107 0308 	add.w	r3, r7, #8
 801202c:	4618      	mov	r0, r3
 801202e:	f000 f857 	bl	80120e0 <prvGetNextExpireTime>
 8012032:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012034:	68bb      	ldr	r3, [r7, #8]
 8012036:	4619      	mov	r1, r3
 8012038:	68f8      	ldr	r0, [r7, #12]
 801203a:	f000 f803 	bl	8012044 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801203e:	f000 f8d5 	bl	80121ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012042:	e7f1      	b.n	8012028 <prvTimerTask+0x8>

08012044 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012044:	b580      	push	{r7, lr}
 8012046:	b084      	sub	sp, #16
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
 801204c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801204e:	f7ff f8f3 	bl	8011238 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012052:	f107 0308 	add.w	r3, r7, #8
 8012056:	4618      	mov	r0, r3
 8012058:	f000 f866 	bl	8012128 <prvSampleTimeNow>
 801205c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801205e:	68bb      	ldr	r3, [r7, #8]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d130      	bne.n	80120c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012064:	683b      	ldr	r3, [r7, #0]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d10a      	bne.n	8012080 <prvProcessTimerOrBlockTask+0x3c>
 801206a:	687a      	ldr	r2, [r7, #4]
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	429a      	cmp	r2, r3
 8012070:	d806      	bhi.n	8012080 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012072:	f7ff f8ef 	bl	8011254 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012076:	68f9      	ldr	r1, [r7, #12]
 8012078:	6878      	ldr	r0, [r7, #4]
 801207a:	f7ff ff85 	bl	8011f88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801207e:	e024      	b.n	80120ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012080:	683b      	ldr	r3, [r7, #0]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d008      	beq.n	8012098 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012086:	4b13      	ldr	r3, [pc, #76]	; (80120d4 <prvProcessTimerOrBlockTask+0x90>)
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d101      	bne.n	8012094 <prvProcessTimerOrBlockTask+0x50>
 8012090:	2301      	movs	r3, #1
 8012092:	e000      	b.n	8012096 <prvProcessTimerOrBlockTask+0x52>
 8012094:	2300      	movs	r3, #0
 8012096:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012098:	4b0f      	ldr	r3, [pc, #60]	; (80120d8 <prvProcessTimerOrBlockTask+0x94>)
 801209a:	6818      	ldr	r0, [r3, #0]
 801209c:	687a      	ldr	r2, [r7, #4]
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	1ad3      	subs	r3, r2, r3
 80120a2:	683a      	ldr	r2, [r7, #0]
 80120a4:	4619      	mov	r1, r3
 80120a6:	f7fe fe37 	bl	8010d18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80120aa:	f7ff f8d3 	bl	8011254 <xTaskResumeAll>
 80120ae:	4603      	mov	r3, r0
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d10a      	bne.n	80120ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80120b4:	4b09      	ldr	r3, [pc, #36]	; (80120dc <prvProcessTimerOrBlockTask+0x98>)
 80120b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80120ba:	601a      	str	r2, [r3, #0]
 80120bc:	f3bf 8f4f 	dsb	sy
 80120c0:	f3bf 8f6f 	isb	sy
}
 80120c4:	e001      	b.n	80120ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80120c6:	f7ff f8c5 	bl	8011254 <xTaskResumeAll>
}
 80120ca:	bf00      	nop
 80120cc:	3710      	adds	r7, #16
 80120ce:	46bd      	mov	sp, r7
 80120d0:	bd80      	pop	{r7, pc}
 80120d2:	bf00      	nop
 80120d4:	2000223c 	.word	0x2000223c
 80120d8:	20002240 	.word	0x20002240
 80120dc:	e000ed04 	.word	0xe000ed04

080120e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80120e0:	b480      	push	{r7}
 80120e2:	b085      	sub	sp, #20
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80120e8:	4b0e      	ldr	r3, [pc, #56]	; (8012124 <prvGetNextExpireTime+0x44>)
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d101      	bne.n	80120f6 <prvGetNextExpireTime+0x16>
 80120f2:	2201      	movs	r2, #1
 80120f4:	e000      	b.n	80120f8 <prvGetNextExpireTime+0x18>
 80120f6:	2200      	movs	r2, #0
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d105      	bne.n	8012110 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012104:	4b07      	ldr	r3, [pc, #28]	; (8012124 <prvGetNextExpireTime+0x44>)
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	68db      	ldr	r3, [r3, #12]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	60fb      	str	r3, [r7, #12]
 801210e:	e001      	b.n	8012114 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012110:	2300      	movs	r3, #0
 8012112:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012114:	68fb      	ldr	r3, [r7, #12]
}
 8012116:	4618      	mov	r0, r3
 8012118:	3714      	adds	r7, #20
 801211a:	46bd      	mov	sp, r7
 801211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012120:	4770      	bx	lr
 8012122:	bf00      	nop
 8012124:	20002238 	.word	0x20002238

08012128 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b084      	sub	sp, #16
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012130:	f7ff f92e 	bl	8011390 <xTaskGetTickCount>
 8012134:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012136:	4b0b      	ldr	r3, [pc, #44]	; (8012164 <prvSampleTimeNow+0x3c>)
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	68fa      	ldr	r2, [r7, #12]
 801213c:	429a      	cmp	r2, r3
 801213e:	d205      	bcs.n	801214c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012140:	f000 f936 	bl	80123b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	2201      	movs	r2, #1
 8012148:	601a      	str	r2, [r3, #0]
 801214a:	e002      	b.n	8012152 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2200      	movs	r2, #0
 8012150:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012152:	4a04      	ldr	r2, [pc, #16]	; (8012164 <prvSampleTimeNow+0x3c>)
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012158:	68fb      	ldr	r3, [r7, #12]
}
 801215a:	4618      	mov	r0, r3
 801215c:	3710      	adds	r7, #16
 801215e:	46bd      	mov	sp, r7
 8012160:	bd80      	pop	{r7, pc}
 8012162:	bf00      	nop
 8012164:	20002248 	.word	0x20002248

08012168 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b086      	sub	sp, #24
 801216c:	af00      	add	r7, sp, #0
 801216e:	60f8      	str	r0, [r7, #12]
 8012170:	60b9      	str	r1, [r7, #8]
 8012172:	607a      	str	r2, [r7, #4]
 8012174:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012176:	2300      	movs	r3, #0
 8012178:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	68ba      	ldr	r2, [r7, #8]
 801217e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	68fa      	ldr	r2, [r7, #12]
 8012184:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012186:	68ba      	ldr	r2, [r7, #8]
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	429a      	cmp	r2, r3
 801218c:	d812      	bhi.n	80121b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801218e:	687a      	ldr	r2, [r7, #4]
 8012190:	683b      	ldr	r3, [r7, #0]
 8012192:	1ad2      	subs	r2, r2, r3
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	699b      	ldr	r3, [r3, #24]
 8012198:	429a      	cmp	r2, r3
 801219a:	d302      	bcc.n	80121a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801219c:	2301      	movs	r3, #1
 801219e:	617b      	str	r3, [r7, #20]
 80121a0:	e01b      	b.n	80121da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80121a2:	4b10      	ldr	r3, [pc, #64]	; (80121e4 <prvInsertTimerInActiveList+0x7c>)
 80121a4:	681a      	ldr	r2, [r3, #0]
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	3304      	adds	r3, #4
 80121aa:	4619      	mov	r1, r3
 80121ac:	4610      	mov	r0, r2
 80121ae:	f7fd fce6 	bl	800fb7e <vListInsert>
 80121b2:	e012      	b.n	80121da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80121b4:	687a      	ldr	r2, [r7, #4]
 80121b6:	683b      	ldr	r3, [r7, #0]
 80121b8:	429a      	cmp	r2, r3
 80121ba:	d206      	bcs.n	80121ca <prvInsertTimerInActiveList+0x62>
 80121bc:	68ba      	ldr	r2, [r7, #8]
 80121be:	683b      	ldr	r3, [r7, #0]
 80121c0:	429a      	cmp	r2, r3
 80121c2:	d302      	bcc.n	80121ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80121c4:	2301      	movs	r3, #1
 80121c6:	617b      	str	r3, [r7, #20]
 80121c8:	e007      	b.n	80121da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80121ca:	4b07      	ldr	r3, [pc, #28]	; (80121e8 <prvInsertTimerInActiveList+0x80>)
 80121cc:	681a      	ldr	r2, [r3, #0]
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	3304      	adds	r3, #4
 80121d2:	4619      	mov	r1, r3
 80121d4:	4610      	mov	r0, r2
 80121d6:	f7fd fcd2 	bl	800fb7e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80121da:	697b      	ldr	r3, [r7, #20]
}
 80121dc:	4618      	mov	r0, r3
 80121de:	3718      	adds	r7, #24
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bd80      	pop	{r7, pc}
 80121e4:	2000223c 	.word	0x2000223c
 80121e8:	20002238 	.word	0x20002238

080121ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80121ec:	b580      	push	{r7, lr}
 80121ee:	b08e      	sub	sp, #56	; 0x38
 80121f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80121f2:	e0ca      	b.n	801238a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	da18      	bge.n	801222c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80121fa:	1d3b      	adds	r3, r7, #4
 80121fc:	3304      	adds	r3, #4
 80121fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012202:	2b00      	cmp	r3, #0
 8012204:	d10a      	bne.n	801221c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8012206:	f04f 0350 	mov.w	r3, #80	; 0x50
 801220a:	f383 8811 	msr	BASEPRI, r3
 801220e:	f3bf 8f6f 	isb	sy
 8012212:	f3bf 8f4f 	dsb	sy
 8012216:	61fb      	str	r3, [r7, #28]
}
 8012218:	bf00      	nop
 801221a:	e7fe      	b.n	801221a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801221c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012222:	6850      	ldr	r0, [r2, #4]
 8012224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012226:	6892      	ldr	r2, [r2, #8]
 8012228:	4611      	mov	r1, r2
 801222a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2b00      	cmp	r3, #0
 8012230:	f2c0 80ab 	blt.w	801238a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801223a:	695b      	ldr	r3, [r3, #20]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d004      	beq.n	801224a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012242:	3304      	adds	r3, #4
 8012244:	4618      	mov	r0, r3
 8012246:	f7fd fcd3 	bl	800fbf0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801224a:	463b      	mov	r3, r7
 801224c:	4618      	mov	r0, r3
 801224e:	f7ff ff6b 	bl	8012128 <prvSampleTimeNow>
 8012252:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	2b09      	cmp	r3, #9
 8012258:	f200 8096 	bhi.w	8012388 <prvProcessReceivedCommands+0x19c>
 801225c:	a201      	add	r2, pc, #4	; (adr r2, 8012264 <prvProcessReceivedCommands+0x78>)
 801225e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012262:	bf00      	nop
 8012264:	0801228d 	.word	0x0801228d
 8012268:	0801228d 	.word	0x0801228d
 801226c:	0801228d 	.word	0x0801228d
 8012270:	08012301 	.word	0x08012301
 8012274:	08012315 	.word	0x08012315
 8012278:	0801235f 	.word	0x0801235f
 801227c:	0801228d 	.word	0x0801228d
 8012280:	0801228d 	.word	0x0801228d
 8012284:	08012301 	.word	0x08012301
 8012288:	08012315 	.word	0x08012315
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801228c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801228e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012292:	f043 0301 	orr.w	r3, r3, #1
 8012296:	b2da      	uxtb	r2, r3
 8012298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801229a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801229e:	68ba      	ldr	r2, [r7, #8]
 80122a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122a2:	699b      	ldr	r3, [r3, #24]
 80122a4:	18d1      	adds	r1, r2, r3
 80122a6:	68bb      	ldr	r3, [r7, #8]
 80122a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122ac:	f7ff ff5c 	bl	8012168 <prvInsertTimerInActiveList>
 80122b0:	4603      	mov	r3, r0
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d069      	beq.n	801238a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80122b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122b8:	6a1b      	ldr	r3, [r3, #32]
 80122ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80122be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80122c4:	f003 0304 	and.w	r3, r3, #4
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d05e      	beq.n	801238a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80122cc:	68ba      	ldr	r2, [r7, #8]
 80122ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122d0:	699b      	ldr	r3, [r3, #24]
 80122d2:	441a      	add	r2, r3
 80122d4:	2300      	movs	r3, #0
 80122d6:	9300      	str	r3, [sp, #0]
 80122d8:	2300      	movs	r3, #0
 80122da:	2100      	movs	r1, #0
 80122dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122de:	f7ff fe05 	bl	8011eec <xTimerGenericCommand>
 80122e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80122e4:	6a3b      	ldr	r3, [r7, #32]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d14f      	bne.n	801238a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80122ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122ee:	f383 8811 	msr	BASEPRI, r3
 80122f2:	f3bf 8f6f 	isb	sy
 80122f6:	f3bf 8f4f 	dsb	sy
 80122fa:	61bb      	str	r3, [r7, #24]
}
 80122fc:	bf00      	nop
 80122fe:	e7fe      	b.n	80122fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012302:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012306:	f023 0301 	bic.w	r3, r3, #1
 801230a:	b2da      	uxtb	r2, r3
 801230c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801230e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012312:	e03a      	b.n	801238a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012316:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801231a:	f043 0301 	orr.w	r3, r3, #1
 801231e:	b2da      	uxtb	r2, r3
 8012320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012322:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012326:	68ba      	ldr	r2, [r7, #8]
 8012328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801232a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801232c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801232e:	699b      	ldr	r3, [r3, #24]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d10a      	bne.n	801234a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8012334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012338:	f383 8811 	msr	BASEPRI, r3
 801233c:	f3bf 8f6f 	isb	sy
 8012340:	f3bf 8f4f 	dsb	sy
 8012344:	617b      	str	r3, [r7, #20]
}
 8012346:	bf00      	nop
 8012348:	e7fe      	b.n	8012348 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801234a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801234c:	699a      	ldr	r2, [r3, #24]
 801234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012350:	18d1      	adds	r1, r2, r3
 8012352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012358:	f7ff ff06 	bl	8012168 <prvInsertTimerInActiveList>
					break;
 801235c:	e015      	b.n	801238a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801235e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012360:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012364:	f003 0302 	and.w	r3, r3, #2
 8012368:	2b00      	cmp	r3, #0
 801236a:	d103      	bne.n	8012374 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801236c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801236e:	f000 fb59 	bl	8012a24 <vPortFree>
 8012372:	e00a      	b.n	801238a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012376:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801237a:	f023 0301 	bic.w	r3, r3, #1
 801237e:	b2da      	uxtb	r2, r3
 8012380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012382:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012386:	e000      	b.n	801238a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8012388:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801238a:	4b08      	ldr	r3, [pc, #32]	; (80123ac <prvProcessReceivedCommands+0x1c0>)
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	1d39      	adds	r1, r7, #4
 8012390:	2200      	movs	r2, #0
 8012392:	4618      	mov	r0, r3
 8012394:	f7fd ffe4 	bl	8010360 <xQueueReceive>
 8012398:	4603      	mov	r3, r0
 801239a:	2b00      	cmp	r3, #0
 801239c:	f47f af2a 	bne.w	80121f4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80123a0:	bf00      	nop
 80123a2:	bf00      	nop
 80123a4:	3730      	adds	r7, #48	; 0x30
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bd80      	pop	{r7, pc}
 80123aa:	bf00      	nop
 80123ac:	20002240 	.word	0x20002240

080123b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b088      	sub	sp, #32
 80123b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80123b6:	e048      	b.n	801244a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80123b8:	4b2d      	ldr	r3, [pc, #180]	; (8012470 <prvSwitchTimerLists+0xc0>)
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	68db      	ldr	r3, [r3, #12]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80123c2:	4b2b      	ldr	r3, [pc, #172]	; (8012470 <prvSwitchTimerLists+0xc0>)
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	68db      	ldr	r3, [r3, #12]
 80123c8:	68db      	ldr	r3, [r3, #12]
 80123ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	3304      	adds	r3, #4
 80123d0:	4618      	mov	r0, r3
 80123d2:	f7fd fc0d 	bl	800fbf0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	6a1b      	ldr	r3, [r3, #32]
 80123da:	68f8      	ldr	r0, [r7, #12]
 80123dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80123e4:	f003 0304 	and.w	r3, r3, #4
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d02e      	beq.n	801244a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	699b      	ldr	r3, [r3, #24]
 80123f0:	693a      	ldr	r2, [r7, #16]
 80123f2:	4413      	add	r3, r2
 80123f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80123f6:	68ba      	ldr	r2, [r7, #8]
 80123f8:	693b      	ldr	r3, [r7, #16]
 80123fa:	429a      	cmp	r2, r3
 80123fc:	d90e      	bls.n	801241c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	68ba      	ldr	r2, [r7, #8]
 8012402:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	68fa      	ldr	r2, [r7, #12]
 8012408:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801240a:	4b19      	ldr	r3, [pc, #100]	; (8012470 <prvSwitchTimerLists+0xc0>)
 801240c:	681a      	ldr	r2, [r3, #0]
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	3304      	adds	r3, #4
 8012412:	4619      	mov	r1, r3
 8012414:	4610      	mov	r0, r2
 8012416:	f7fd fbb2 	bl	800fb7e <vListInsert>
 801241a:	e016      	b.n	801244a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801241c:	2300      	movs	r3, #0
 801241e:	9300      	str	r3, [sp, #0]
 8012420:	2300      	movs	r3, #0
 8012422:	693a      	ldr	r2, [r7, #16]
 8012424:	2100      	movs	r1, #0
 8012426:	68f8      	ldr	r0, [r7, #12]
 8012428:	f7ff fd60 	bl	8011eec <xTimerGenericCommand>
 801242c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d10a      	bne.n	801244a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012438:	f383 8811 	msr	BASEPRI, r3
 801243c:	f3bf 8f6f 	isb	sy
 8012440:	f3bf 8f4f 	dsb	sy
 8012444:	603b      	str	r3, [r7, #0]
}
 8012446:	bf00      	nop
 8012448:	e7fe      	b.n	8012448 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801244a:	4b09      	ldr	r3, [pc, #36]	; (8012470 <prvSwitchTimerLists+0xc0>)
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d1b1      	bne.n	80123b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012454:	4b06      	ldr	r3, [pc, #24]	; (8012470 <prvSwitchTimerLists+0xc0>)
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801245a:	4b06      	ldr	r3, [pc, #24]	; (8012474 <prvSwitchTimerLists+0xc4>)
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	4a04      	ldr	r2, [pc, #16]	; (8012470 <prvSwitchTimerLists+0xc0>)
 8012460:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012462:	4a04      	ldr	r2, [pc, #16]	; (8012474 <prvSwitchTimerLists+0xc4>)
 8012464:	697b      	ldr	r3, [r7, #20]
 8012466:	6013      	str	r3, [r2, #0]
}
 8012468:	bf00      	nop
 801246a:	3718      	adds	r7, #24
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}
 8012470:	20002238 	.word	0x20002238
 8012474:	2000223c 	.word	0x2000223c

08012478 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b082      	sub	sp, #8
 801247c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801247e:	f000 f969 	bl	8012754 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012482:	4b15      	ldr	r3, [pc, #84]	; (80124d8 <prvCheckForValidListAndQueue+0x60>)
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d120      	bne.n	80124cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801248a:	4814      	ldr	r0, [pc, #80]	; (80124dc <prvCheckForValidListAndQueue+0x64>)
 801248c:	f7fd fb26 	bl	800fadc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012490:	4813      	ldr	r0, [pc, #76]	; (80124e0 <prvCheckForValidListAndQueue+0x68>)
 8012492:	f7fd fb23 	bl	800fadc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012496:	4b13      	ldr	r3, [pc, #76]	; (80124e4 <prvCheckForValidListAndQueue+0x6c>)
 8012498:	4a10      	ldr	r2, [pc, #64]	; (80124dc <prvCheckForValidListAndQueue+0x64>)
 801249a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801249c:	4b12      	ldr	r3, [pc, #72]	; (80124e8 <prvCheckForValidListAndQueue+0x70>)
 801249e:	4a10      	ldr	r2, [pc, #64]	; (80124e0 <prvCheckForValidListAndQueue+0x68>)
 80124a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80124a2:	2300      	movs	r3, #0
 80124a4:	9300      	str	r3, [sp, #0]
 80124a6:	4b11      	ldr	r3, [pc, #68]	; (80124ec <prvCheckForValidListAndQueue+0x74>)
 80124a8:	4a11      	ldr	r2, [pc, #68]	; (80124f0 <prvCheckForValidListAndQueue+0x78>)
 80124aa:	2110      	movs	r1, #16
 80124ac:	200a      	movs	r0, #10
 80124ae:	f7fd fc31 	bl	800fd14 <xQueueGenericCreateStatic>
 80124b2:	4603      	mov	r3, r0
 80124b4:	4a08      	ldr	r2, [pc, #32]	; (80124d8 <prvCheckForValidListAndQueue+0x60>)
 80124b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80124b8:	4b07      	ldr	r3, [pc, #28]	; (80124d8 <prvCheckForValidListAndQueue+0x60>)
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d005      	beq.n	80124cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80124c0:	4b05      	ldr	r3, [pc, #20]	; (80124d8 <prvCheckForValidListAndQueue+0x60>)
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	490b      	ldr	r1, [pc, #44]	; (80124f4 <prvCheckForValidListAndQueue+0x7c>)
 80124c6:	4618      	mov	r0, r3
 80124c8:	f7fe fbfc 	bl	8010cc4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80124cc:	f000 f972 	bl	80127b4 <vPortExitCritical>
}
 80124d0:	bf00      	nop
 80124d2:	46bd      	mov	sp, r7
 80124d4:	bd80      	pop	{r7, pc}
 80124d6:	bf00      	nop
 80124d8:	20002240 	.word	0x20002240
 80124dc:	20002210 	.word	0x20002210
 80124e0:	20002224 	.word	0x20002224
 80124e4:	20002238 	.word	0x20002238
 80124e8:	2000223c 	.word	0x2000223c
 80124ec:	200022ec 	.word	0x200022ec
 80124f0:	2000224c 	.word	0x2000224c
 80124f4:	08021b18 	.word	0x08021b18

080124f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80124f8:	b480      	push	{r7}
 80124fa:	b085      	sub	sp, #20
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	60f8      	str	r0, [r7, #12]
 8012500:	60b9      	str	r1, [r7, #8]
 8012502:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	3b04      	subs	r3, #4
 8012508:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012510:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	3b04      	subs	r3, #4
 8012516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012518:	68bb      	ldr	r3, [r7, #8]
 801251a:	f023 0201 	bic.w	r2, r3, #1
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	3b04      	subs	r3, #4
 8012526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012528:	4a0c      	ldr	r2, [pc, #48]	; (801255c <pxPortInitialiseStack+0x64>)
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	3b14      	subs	r3, #20
 8012532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012534:	687a      	ldr	r2, [r7, #4]
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	3b04      	subs	r3, #4
 801253e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	f06f 0202 	mvn.w	r2, #2
 8012546:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	3b20      	subs	r3, #32
 801254c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801254e:	68fb      	ldr	r3, [r7, #12]
}
 8012550:	4618      	mov	r0, r3
 8012552:	3714      	adds	r7, #20
 8012554:	46bd      	mov	sp, r7
 8012556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255a:	4770      	bx	lr
 801255c:	08012561 	.word	0x08012561

08012560 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012560:	b480      	push	{r7}
 8012562:	b085      	sub	sp, #20
 8012564:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012566:	2300      	movs	r3, #0
 8012568:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801256a:	4b12      	ldr	r3, [pc, #72]	; (80125b4 <prvTaskExitError+0x54>)
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012572:	d00a      	beq.n	801258a <prvTaskExitError+0x2a>
	__asm volatile
 8012574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012578:	f383 8811 	msr	BASEPRI, r3
 801257c:	f3bf 8f6f 	isb	sy
 8012580:	f3bf 8f4f 	dsb	sy
 8012584:	60fb      	str	r3, [r7, #12]
}
 8012586:	bf00      	nop
 8012588:	e7fe      	b.n	8012588 <prvTaskExitError+0x28>
	__asm volatile
 801258a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801258e:	f383 8811 	msr	BASEPRI, r3
 8012592:	f3bf 8f6f 	isb	sy
 8012596:	f3bf 8f4f 	dsb	sy
 801259a:	60bb      	str	r3, [r7, #8]
}
 801259c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801259e:	bf00      	nop
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d0fc      	beq.n	80125a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80125a6:	bf00      	nop
 80125a8:	bf00      	nop
 80125aa:	3714      	adds	r7, #20
 80125ac:	46bd      	mov	sp, r7
 80125ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b2:	4770      	bx	lr
 80125b4:	20000128 	.word	0x20000128
	...

080125c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80125c0:	4b07      	ldr	r3, [pc, #28]	; (80125e0 <pxCurrentTCBConst2>)
 80125c2:	6819      	ldr	r1, [r3, #0]
 80125c4:	6808      	ldr	r0, [r1, #0]
 80125c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125ca:	f380 8809 	msr	PSP, r0
 80125ce:	f3bf 8f6f 	isb	sy
 80125d2:	f04f 0000 	mov.w	r0, #0
 80125d6:	f380 8811 	msr	BASEPRI, r0
 80125da:	4770      	bx	lr
 80125dc:	f3af 8000 	nop.w

080125e0 <pxCurrentTCBConst2>:
 80125e0:	20001d10 	.word	0x20001d10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80125e4:	bf00      	nop
 80125e6:	bf00      	nop

080125e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80125e8:	4808      	ldr	r0, [pc, #32]	; (801260c <prvPortStartFirstTask+0x24>)
 80125ea:	6800      	ldr	r0, [r0, #0]
 80125ec:	6800      	ldr	r0, [r0, #0]
 80125ee:	f380 8808 	msr	MSP, r0
 80125f2:	f04f 0000 	mov.w	r0, #0
 80125f6:	f380 8814 	msr	CONTROL, r0
 80125fa:	b662      	cpsie	i
 80125fc:	b661      	cpsie	f
 80125fe:	f3bf 8f4f 	dsb	sy
 8012602:	f3bf 8f6f 	isb	sy
 8012606:	df00      	svc	0
 8012608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801260a:	bf00      	nop
 801260c:	e000ed08 	.word	0xe000ed08

08012610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b086      	sub	sp, #24
 8012614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012616:	4b46      	ldr	r3, [pc, #280]	; (8012730 <xPortStartScheduler+0x120>)
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	4a46      	ldr	r2, [pc, #280]	; (8012734 <xPortStartScheduler+0x124>)
 801261c:	4293      	cmp	r3, r2
 801261e:	d10a      	bne.n	8012636 <xPortStartScheduler+0x26>
	__asm volatile
 8012620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012624:	f383 8811 	msr	BASEPRI, r3
 8012628:	f3bf 8f6f 	isb	sy
 801262c:	f3bf 8f4f 	dsb	sy
 8012630:	613b      	str	r3, [r7, #16]
}
 8012632:	bf00      	nop
 8012634:	e7fe      	b.n	8012634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012636:	4b3e      	ldr	r3, [pc, #248]	; (8012730 <xPortStartScheduler+0x120>)
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	4a3f      	ldr	r2, [pc, #252]	; (8012738 <xPortStartScheduler+0x128>)
 801263c:	4293      	cmp	r3, r2
 801263e:	d10a      	bne.n	8012656 <xPortStartScheduler+0x46>
	__asm volatile
 8012640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012644:	f383 8811 	msr	BASEPRI, r3
 8012648:	f3bf 8f6f 	isb	sy
 801264c:	f3bf 8f4f 	dsb	sy
 8012650:	60fb      	str	r3, [r7, #12]
}
 8012652:	bf00      	nop
 8012654:	e7fe      	b.n	8012654 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012656:	4b39      	ldr	r3, [pc, #228]	; (801273c <xPortStartScheduler+0x12c>)
 8012658:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801265a:	697b      	ldr	r3, [r7, #20]
 801265c:	781b      	ldrb	r3, [r3, #0]
 801265e:	b2db      	uxtb	r3, r3
 8012660:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012662:	697b      	ldr	r3, [r7, #20]
 8012664:	22ff      	movs	r2, #255	; 0xff
 8012666:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012668:	697b      	ldr	r3, [r7, #20]
 801266a:	781b      	ldrb	r3, [r3, #0]
 801266c:	b2db      	uxtb	r3, r3
 801266e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012670:	78fb      	ldrb	r3, [r7, #3]
 8012672:	b2db      	uxtb	r3, r3
 8012674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012678:	b2da      	uxtb	r2, r3
 801267a:	4b31      	ldr	r3, [pc, #196]	; (8012740 <xPortStartScheduler+0x130>)
 801267c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801267e:	4b31      	ldr	r3, [pc, #196]	; (8012744 <xPortStartScheduler+0x134>)
 8012680:	2207      	movs	r2, #7
 8012682:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012684:	e009      	b.n	801269a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012686:	4b2f      	ldr	r3, [pc, #188]	; (8012744 <xPortStartScheduler+0x134>)
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	3b01      	subs	r3, #1
 801268c:	4a2d      	ldr	r2, [pc, #180]	; (8012744 <xPortStartScheduler+0x134>)
 801268e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012690:	78fb      	ldrb	r3, [r7, #3]
 8012692:	b2db      	uxtb	r3, r3
 8012694:	005b      	lsls	r3, r3, #1
 8012696:	b2db      	uxtb	r3, r3
 8012698:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801269a:	78fb      	ldrb	r3, [r7, #3]
 801269c:	b2db      	uxtb	r3, r3
 801269e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80126a2:	2b80      	cmp	r3, #128	; 0x80
 80126a4:	d0ef      	beq.n	8012686 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80126a6:	4b27      	ldr	r3, [pc, #156]	; (8012744 <xPortStartScheduler+0x134>)
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	f1c3 0307 	rsb	r3, r3, #7
 80126ae:	2b04      	cmp	r3, #4
 80126b0:	d00a      	beq.n	80126c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80126b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126b6:	f383 8811 	msr	BASEPRI, r3
 80126ba:	f3bf 8f6f 	isb	sy
 80126be:	f3bf 8f4f 	dsb	sy
 80126c2:	60bb      	str	r3, [r7, #8]
}
 80126c4:	bf00      	nop
 80126c6:	e7fe      	b.n	80126c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80126c8:	4b1e      	ldr	r3, [pc, #120]	; (8012744 <xPortStartScheduler+0x134>)
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	021b      	lsls	r3, r3, #8
 80126ce:	4a1d      	ldr	r2, [pc, #116]	; (8012744 <xPortStartScheduler+0x134>)
 80126d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80126d2:	4b1c      	ldr	r3, [pc, #112]	; (8012744 <xPortStartScheduler+0x134>)
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80126da:	4a1a      	ldr	r2, [pc, #104]	; (8012744 <xPortStartScheduler+0x134>)
 80126dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	b2da      	uxtb	r2, r3
 80126e2:	697b      	ldr	r3, [r7, #20]
 80126e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80126e6:	4b18      	ldr	r3, [pc, #96]	; (8012748 <xPortStartScheduler+0x138>)
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	4a17      	ldr	r2, [pc, #92]	; (8012748 <xPortStartScheduler+0x138>)
 80126ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80126f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80126f2:	4b15      	ldr	r3, [pc, #84]	; (8012748 <xPortStartScheduler+0x138>)
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	4a14      	ldr	r2, [pc, #80]	; (8012748 <xPortStartScheduler+0x138>)
 80126f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80126fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80126fe:	f000 f8dd 	bl	80128bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012702:	4b12      	ldr	r3, [pc, #72]	; (801274c <xPortStartScheduler+0x13c>)
 8012704:	2200      	movs	r2, #0
 8012706:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012708:	f000 f8fc 	bl	8012904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801270c:	4b10      	ldr	r3, [pc, #64]	; (8012750 <xPortStartScheduler+0x140>)
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	4a0f      	ldr	r2, [pc, #60]	; (8012750 <xPortStartScheduler+0x140>)
 8012712:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012716:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012718:	f7ff ff66 	bl	80125e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801271c:	f7fe ff02 	bl	8011524 <vTaskSwitchContext>
	prvTaskExitError();
 8012720:	f7ff ff1e 	bl	8012560 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012724:	2300      	movs	r3, #0
}
 8012726:	4618      	mov	r0, r3
 8012728:	3718      	adds	r7, #24
 801272a:	46bd      	mov	sp, r7
 801272c:	bd80      	pop	{r7, pc}
 801272e:	bf00      	nop
 8012730:	e000ed00 	.word	0xe000ed00
 8012734:	410fc271 	.word	0x410fc271
 8012738:	410fc270 	.word	0x410fc270
 801273c:	e000e400 	.word	0xe000e400
 8012740:	2000233c 	.word	0x2000233c
 8012744:	20002340 	.word	0x20002340
 8012748:	e000ed20 	.word	0xe000ed20
 801274c:	20000128 	.word	0x20000128
 8012750:	e000ef34 	.word	0xe000ef34

08012754 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012754:	b480      	push	{r7}
 8012756:	b083      	sub	sp, #12
 8012758:	af00      	add	r7, sp, #0
	__asm volatile
 801275a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801275e:	f383 8811 	msr	BASEPRI, r3
 8012762:	f3bf 8f6f 	isb	sy
 8012766:	f3bf 8f4f 	dsb	sy
 801276a:	607b      	str	r3, [r7, #4]
}
 801276c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801276e:	4b0f      	ldr	r3, [pc, #60]	; (80127ac <vPortEnterCritical+0x58>)
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	3301      	adds	r3, #1
 8012774:	4a0d      	ldr	r2, [pc, #52]	; (80127ac <vPortEnterCritical+0x58>)
 8012776:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012778:	4b0c      	ldr	r3, [pc, #48]	; (80127ac <vPortEnterCritical+0x58>)
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	2b01      	cmp	r3, #1
 801277e:	d10f      	bne.n	80127a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012780:	4b0b      	ldr	r3, [pc, #44]	; (80127b0 <vPortEnterCritical+0x5c>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	b2db      	uxtb	r3, r3
 8012786:	2b00      	cmp	r3, #0
 8012788:	d00a      	beq.n	80127a0 <vPortEnterCritical+0x4c>
	__asm volatile
 801278a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801278e:	f383 8811 	msr	BASEPRI, r3
 8012792:	f3bf 8f6f 	isb	sy
 8012796:	f3bf 8f4f 	dsb	sy
 801279a:	603b      	str	r3, [r7, #0]
}
 801279c:	bf00      	nop
 801279e:	e7fe      	b.n	801279e <vPortEnterCritical+0x4a>
	}
}
 80127a0:	bf00      	nop
 80127a2:	370c      	adds	r7, #12
 80127a4:	46bd      	mov	sp, r7
 80127a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127aa:	4770      	bx	lr
 80127ac:	20000128 	.word	0x20000128
 80127b0:	e000ed04 	.word	0xe000ed04

080127b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80127b4:	b480      	push	{r7}
 80127b6:	b083      	sub	sp, #12
 80127b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80127ba:	4b12      	ldr	r3, [pc, #72]	; (8012804 <vPortExitCritical+0x50>)
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d10a      	bne.n	80127d8 <vPortExitCritical+0x24>
	__asm volatile
 80127c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127c6:	f383 8811 	msr	BASEPRI, r3
 80127ca:	f3bf 8f6f 	isb	sy
 80127ce:	f3bf 8f4f 	dsb	sy
 80127d2:	607b      	str	r3, [r7, #4]
}
 80127d4:	bf00      	nop
 80127d6:	e7fe      	b.n	80127d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80127d8:	4b0a      	ldr	r3, [pc, #40]	; (8012804 <vPortExitCritical+0x50>)
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	3b01      	subs	r3, #1
 80127de:	4a09      	ldr	r2, [pc, #36]	; (8012804 <vPortExitCritical+0x50>)
 80127e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80127e2:	4b08      	ldr	r3, [pc, #32]	; (8012804 <vPortExitCritical+0x50>)
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d105      	bne.n	80127f6 <vPortExitCritical+0x42>
 80127ea:	2300      	movs	r3, #0
 80127ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80127ee:	683b      	ldr	r3, [r7, #0]
 80127f0:	f383 8811 	msr	BASEPRI, r3
}
 80127f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80127f6:	bf00      	nop
 80127f8:	370c      	adds	r7, #12
 80127fa:	46bd      	mov	sp, r7
 80127fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012800:	4770      	bx	lr
 8012802:	bf00      	nop
 8012804:	20000128 	.word	0x20000128
	...

08012810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012810:	f3ef 8009 	mrs	r0, PSP
 8012814:	f3bf 8f6f 	isb	sy
 8012818:	4b15      	ldr	r3, [pc, #84]	; (8012870 <pxCurrentTCBConst>)
 801281a:	681a      	ldr	r2, [r3, #0]
 801281c:	f01e 0f10 	tst.w	lr, #16
 8012820:	bf08      	it	eq
 8012822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801282a:	6010      	str	r0, [r2, #0]
 801282c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012830:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012834:	f380 8811 	msr	BASEPRI, r0
 8012838:	f3bf 8f4f 	dsb	sy
 801283c:	f3bf 8f6f 	isb	sy
 8012840:	f7fe fe70 	bl	8011524 <vTaskSwitchContext>
 8012844:	f04f 0000 	mov.w	r0, #0
 8012848:	f380 8811 	msr	BASEPRI, r0
 801284c:	bc09      	pop	{r0, r3}
 801284e:	6819      	ldr	r1, [r3, #0]
 8012850:	6808      	ldr	r0, [r1, #0]
 8012852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012856:	f01e 0f10 	tst.w	lr, #16
 801285a:	bf08      	it	eq
 801285c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012860:	f380 8809 	msr	PSP, r0
 8012864:	f3bf 8f6f 	isb	sy
 8012868:	4770      	bx	lr
 801286a:	bf00      	nop
 801286c:	f3af 8000 	nop.w

08012870 <pxCurrentTCBConst>:
 8012870:	20001d10 	.word	0x20001d10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012874:	bf00      	nop
 8012876:	bf00      	nop

08012878 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b082      	sub	sp, #8
 801287c:	af00      	add	r7, sp, #0
	__asm volatile
 801287e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012882:	f383 8811 	msr	BASEPRI, r3
 8012886:	f3bf 8f6f 	isb	sy
 801288a:	f3bf 8f4f 	dsb	sy
 801288e:	607b      	str	r3, [r7, #4]
}
 8012890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012892:	f7fe fd8d 	bl	80113b0 <xTaskIncrementTick>
 8012896:	4603      	mov	r3, r0
 8012898:	2b00      	cmp	r3, #0
 801289a:	d003      	beq.n	80128a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801289c:	4b06      	ldr	r3, [pc, #24]	; (80128b8 <xPortSysTickHandler+0x40>)
 801289e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128a2:	601a      	str	r2, [r3, #0]
 80128a4:	2300      	movs	r3, #0
 80128a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80128a8:	683b      	ldr	r3, [r7, #0]
 80128aa:	f383 8811 	msr	BASEPRI, r3
}
 80128ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80128b0:	bf00      	nop
 80128b2:	3708      	adds	r7, #8
 80128b4:	46bd      	mov	sp, r7
 80128b6:	bd80      	pop	{r7, pc}
 80128b8:	e000ed04 	.word	0xe000ed04

080128bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80128bc:	b480      	push	{r7}
 80128be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80128c0:	4b0b      	ldr	r3, [pc, #44]	; (80128f0 <vPortSetupTimerInterrupt+0x34>)
 80128c2:	2200      	movs	r2, #0
 80128c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80128c6:	4b0b      	ldr	r3, [pc, #44]	; (80128f4 <vPortSetupTimerInterrupt+0x38>)
 80128c8:	2200      	movs	r2, #0
 80128ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80128cc:	4b0a      	ldr	r3, [pc, #40]	; (80128f8 <vPortSetupTimerInterrupt+0x3c>)
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	4a0a      	ldr	r2, [pc, #40]	; (80128fc <vPortSetupTimerInterrupt+0x40>)
 80128d2:	fba2 2303 	umull	r2, r3, r2, r3
 80128d6:	099b      	lsrs	r3, r3, #6
 80128d8:	4a09      	ldr	r2, [pc, #36]	; (8012900 <vPortSetupTimerInterrupt+0x44>)
 80128da:	3b01      	subs	r3, #1
 80128dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80128de:	4b04      	ldr	r3, [pc, #16]	; (80128f0 <vPortSetupTimerInterrupt+0x34>)
 80128e0:	2207      	movs	r2, #7
 80128e2:	601a      	str	r2, [r3, #0]
}
 80128e4:	bf00      	nop
 80128e6:	46bd      	mov	sp, r7
 80128e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ec:	4770      	bx	lr
 80128ee:	bf00      	nop
 80128f0:	e000e010 	.word	0xe000e010
 80128f4:	e000e018 	.word	0xe000e018
 80128f8:	20000000 	.word	0x20000000
 80128fc:	10624dd3 	.word	0x10624dd3
 8012900:	e000e014 	.word	0xe000e014

08012904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012904:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012914 <vPortEnableVFP+0x10>
 8012908:	6801      	ldr	r1, [r0, #0]
 801290a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801290e:	6001      	str	r1, [r0, #0]
 8012910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012912:	bf00      	nop
 8012914:	e000ed88 	.word	0xe000ed88

08012918 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012918:	b480      	push	{r7}
 801291a:	b085      	sub	sp, #20
 801291c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801291e:	f3ef 8305 	mrs	r3, IPSR
 8012922:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	2b0f      	cmp	r3, #15
 8012928:	d914      	bls.n	8012954 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801292a:	4a17      	ldr	r2, [pc, #92]	; (8012988 <vPortValidateInterruptPriority+0x70>)
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	4413      	add	r3, r2
 8012930:	781b      	ldrb	r3, [r3, #0]
 8012932:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012934:	4b15      	ldr	r3, [pc, #84]	; (801298c <vPortValidateInterruptPriority+0x74>)
 8012936:	781b      	ldrb	r3, [r3, #0]
 8012938:	7afa      	ldrb	r2, [r7, #11]
 801293a:	429a      	cmp	r2, r3
 801293c:	d20a      	bcs.n	8012954 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801293e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012942:	f383 8811 	msr	BASEPRI, r3
 8012946:	f3bf 8f6f 	isb	sy
 801294a:	f3bf 8f4f 	dsb	sy
 801294e:	607b      	str	r3, [r7, #4]
}
 8012950:	bf00      	nop
 8012952:	e7fe      	b.n	8012952 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012954:	4b0e      	ldr	r3, [pc, #56]	; (8012990 <vPortValidateInterruptPriority+0x78>)
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801295c:	4b0d      	ldr	r3, [pc, #52]	; (8012994 <vPortValidateInterruptPriority+0x7c>)
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	429a      	cmp	r2, r3
 8012962:	d90a      	bls.n	801297a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012968:	f383 8811 	msr	BASEPRI, r3
 801296c:	f3bf 8f6f 	isb	sy
 8012970:	f3bf 8f4f 	dsb	sy
 8012974:	603b      	str	r3, [r7, #0]
}
 8012976:	bf00      	nop
 8012978:	e7fe      	b.n	8012978 <vPortValidateInterruptPriority+0x60>
	}
 801297a:	bf00      	nop
 801297c:	3714      	adds	r7, #20
 801297e:	46bd      	mov	sp, r7
 8012980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012984:	4770      	bx	lr
 8012986:	bf00      	nop
 8012988:	e000e3f0 	.word	0xe000e3f0
 801298c:	2000233c 	.word	0x2000233c
 8012990:	e000ed0c 	.word	0xe000ed0c
 8012994:	20002340 	.word	0x20002340

08012998 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b084      	sub	sp, #16
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 80129a0:	2300      	movs	r3, #0
 80129a2:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	f003 0307 	and.w	r3, r3, #7
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d004      	beq.n	80129b8 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	f023 0307 	bic.w	r3, r3, #7
 80129b4:	3308      	adds	r3, #8
 80129b6:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 80129b8:	f7fe fc3e 	bl	8011238 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 80129bc:	4b16      	ldr	r3, [pc, #88]	; (8012a18 <pvPortMalloc+0x80>)
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d105      	bne.n	80129d0 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80129c4:	4b15      	ldr	r3, [pc, #84]	; (8012a1c <pvPortMalloc+0x84>)
 80129c6:	f023 0307 	bic.w	r3, r3, #7
 80129ca:	461a      	mov	r2, r3
 80129cc:	4b12      	ldr	r3, [pc, #72]	; (8012a18 <pvPortMalloc+0x80>)
 80129ce:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80129d0:	4b13      	ldr	r3, [pc, #76]	; (8012a20 <pvPortMalloc+0x88>)
 80129d2:	681a      	ldr	r2, [r3, #0]
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	4413      	add	r3, r2
 80129d8:	f24b 1227 	movw	r2, #45351	; 0xb127
 80129dc:	4293      	cmp	r3, r2
 80129de:	d813      	bhi.n	8012a08 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 80129e0:	4b0f      	ldr	r3, [pc, #60]	; (8012a20 <pvPortMalloc+0x88>)
 80129e2:	681a      	ldr	r2, [r3, #0]
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	441a      	add	r2, r3
 80129e8:	4b0d      	ldr	r3, [pc, #52]	; (8012a20 <pvPortMalloc+0x88>)
 80129ea:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80129ec:	429a      	cmp	r2, r3
 80129ee:	d90b      	bls.n	8012a08 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 80129f0:	4b09      	ldr	r3, [pc, #36]	; (8012a18 <pvPortMalloc+0x80>)
 80129f2:	681a      	ldr	r2, [r3, #0]
 80129f4:	4b0a      	ldr	r3, [pc, #40]	; (8012a20 <pvPortMalloc+0x88>)
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	4413      	add	r3, r2
 80129fa:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 80129fc:	4b08      	ldr	r3, [pc, #32]	; (8012a20 <pvPortMalloc+0x88>)
 80129fe:	681a      	ldr	r2, [r3, #0]
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	4413      	add	r3, r2
 8012a04:	4a06      	ldr	r2, [pc, #24]	; (8012a20 <pvPortMalloc+0x88>)
 8012a06:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012a08:	f7fe fc24 	bl	8011254 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8012a0c:	68fb      	ldr	r3, [r7, #12]
}
 8012a0e:	4618      	mov	r0, r3
 8012a10:	3710      	adds	r7, #16
 8012a12:	46bd      	mov	sp, r7
 8012a14:	bd80      	pop	{r7, pc}
 8012a16:	bf00      	nop
 8012a18:	2000d478 	.word	0x2000d478
 8012a1c:	2000234c 	.word	0x2000234c
 8012a20:	2000d474 	.word	0x2000d474

08012a24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012a24:	b480      	push	{r7}
 8012a26:	b085      	sub	sp, #20
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d00a      	beq.n	8012a48 <vPortFree+0x24>
	__asm volatile
 8012a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a36:	f383 8811 	msr	BASEPRI, r3
 8012a3a:	f3bf 8f6f 	isb	sy
 8012a3e:	f3bf 8f4f 	dsb	sy
 8012a42:	60fb      	str	r3, [r7, #12]
}
 8012a44:	bf00      	nop
 8012a46:	e7fe      	b.n	8012a46 <vPortFree+0x22>
}
 8012a48:	bf00      	nop
 8012a4a:	3714      	adds	r7, #20
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a52:	4770      	bx	lr

08012a54 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8012a54:	b480      	push	{r7}
 8012a56:	b083      	sub	sp, #12
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
 8012a5c:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8012a5e:	683a      	ldr	r2, [r7, #0]
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	4293      	cmp	r3, r2
 8012a64:	bf38      	it	cc
 8012a66:	4613      	movcc	r3, r2
}
 8012a68:	4618      	mov	r0, r3
 8012a6a:	370c      	adds	r7, #12
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a72:	4770      	bx	lr

08012a74 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8012a74:	b480      	push	{r7}
 8012a76:	b083      	sub	sp, #12
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	6078      	str	r0, [r7, #4]
 8012a7c:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8012a7e:	683a      	ldr	r2, [r7, #0]
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	4293      	cmp	r3, r2
 8012a84:	bf28      	it	cs
 8012a86:	4613      	movcs	r3, r2
}
 8012a88:	4618      	mov	r0, r3
 8012a8a:	370c      	adds	r7, #12
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a92:	4770      	bx	lr

08012a94 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8012a94:	b480      	push	{r7}
 8012a96:	b083      	sub	sp, #12
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	6078      	str	r0, [r7, #4]
 8012a9c:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	683a      	ldr	r2, [r7, #0]
 8012aa2:	fbb3 f2f2 	udiv	r2, r3, r2
 8012aa6:	6839      	ldr	r1, [r7, #0]
 8012aa8:	fb01 f202 	mul.w	r2, r1, r2
 8012aac:	1a9b      	subs	r3, r3, r2
 8012aae:	687a      	ldr	r2, [r7, #4]
 8012ab0:	1ad3      	subs	r3, r2, r3
}
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	370c      	adds	r7, #12
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012abc:	4770      	bx	lr

08012abe <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8012abe:	b580      	push	{r7, lr}
 8012ac0:	b082      	sub	sp, #8
 8012ac2:	af00      	add	r7, sp, #0
 8012ac4:	6078      	str	r0, [r7, #4]
 8012ac6:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8012ac8:	687a      	ldr	r2, [r7, #4]
 8012aca:	683b      	ldr	r3, [r7, #0]
 8012acc:	4413      	add	r3, r2
 8012ace:	3b01      	subs	r3, #1
 8012ad0:	6839      	ldr	r1, [r7, #0]
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	f7ff ffde 	bl	8012a94 <lfs_aligndown>
 8012ad8:	4603      	mov	r3, r0
}
 8012ada:	4618      	mov	r0, r3
 8012adc:	3708      	adds	r7, #8
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	bd80      	pop	{r7, pc}

08012ae2 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8012ae2:	b480      	push	{r7}
 8012ae4:	b083      	sub	sp, #12
 8012ae6:	af00      	add	r7, sp, #0
 8012ae8:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	3b01      	subs	r3, #1
 8012aee:	fab3 f383 	clz	r3, r3
 8012af2:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8012af6:	4618      	mov	r0, r3
 8012af8:	370c      	adds	r7, #12
 8012afa:	46bd      	mov	sp, r7
 8012afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b00:	4770      	bx	lr

08012b02 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8012b02:	b480      	push	{r7}
 8012b04:	b083      	sub	sp, #12
 8012b06:	af00      	add	r7, sp, #0
 8012b08:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	fa93 f3a3 	rbit	r3, r3
 8012b10:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8012b14:	4618      	mov	r0, r3
 8012b16:	370c      	adds	r7, #12
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1e:	4770      	bx	lr

08012b20 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b082      	sub	sp, #8
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8012b28:	6878      	ldr	r0, [r7, #4]
 8012b2a:	f7ee f8dd 	bl	8000ce8 <__popcountsi2>
 8012b2e:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8012b30:	4618      	mov	r0, r3
 8012b32:	3708      	adds	r7, #8
 8012b34:	46bd      	mov	sp, r7
 8012b36:	bd80      	pop	{r7, pc}

08012b38 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8012b38:	b480      	push	{r7}
 8012b3a:	b083      	sub	sp, #12
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
 8012b40:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8012b42:	687a      	ldr	r2, [r7, #4]
 8012b44:	683b      	ldr	r3, [r7, #0]
 8012b46:	1ad3      	subs	r3, r2, r3
}
 8012b48:	4618      	mov	r0, r3
 8012b4a:	370c      	adds	r7, #12
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b52:	4770      	bx	lr

08012b54 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8012b54:	b480      	push	{r7}
 8012b56:	b083      	sub	sp, #12
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 8012b5c:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8012b5e:	4618      	mov	r0, r3
 8012b60:	370c      	adds	r7, #12
 8012b62:	46bd      	mov	sp, r7
 8012b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b68:	4770      	bx	lr

08012b6a <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8012b6a:	b580      	push	{r7, lr}
 8012b6c:	b082      	sub	sp, #8
 8012b6e:	af00      	add	r7, sp, #0
 8012b70:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8012b72:	6878      	ldr	r0, [r7, #4]
 8012b74:	f7ff ffee 	bl	8012b54 <lfs_fromle32>
 8012b78:	4603      	mov	r3, r0
}
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	3708      	adds	r7, #8
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	bd80      	pop	{r7, pc}

08012b82 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8012b82:	b480      	push	{r7}
 8012b84:	b083      	sub	sp, #12
 8012b86:	af00      	add	r7, sp, #0
 8012b88:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8012b8e:	4618      	mov	r0, r3
 8012b90:	370c      	adds	r7, #12
 8012b92:	46bd      	mov	sp, r7
 8012b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b98:	4770      	bx	lr

08012b9a <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8012b9a:	b580      	push	{r7, lr}
 8012b9c:	b082      	sub	sp, #8
 8012b9e:	af00      	add	r7, sp, #0
 8012ba0:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8012ba2:	6878      	ldr	r0, [r7, #4]
 8012ba4:	f7ff ffed 	bl	8012b82 <lfs_frombe32>
 8012ba8:	4603      	mov	r3, r0
}
 8012baa:	4618      	mov	r0, r3
 8012bac:	3708      	adds	r7, #8
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	bd80      	pop	{r7, pc}

08012bb2 <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 8012bb2:	b580      	push	{r7, lr}
 8012bb4:	b082      	sub	sp, #8
 8012bb6:	af00      	add	r7, sp, #0
 8012bb8:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 8012bba:	6878      	ldr	r0, [r7, #4]
 8012bbc:	f008 f90c 	bl	801add8 <malloc>
 8012bc0:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	3708      	adds	r7, #8
 8012bc6:	46bd      	mov	sp, r7
 8012bc8:	bd80      	pop	{r7, pc}

08012bca <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8012bca:	b580      	push	{r7, lr}
 8012bcc:	b082      	sub	sp, #8
 8012bce:	af00      	add	r7, sp, #0
 8012bd0:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 8012bd2:	6878      	ldr	r0, [r7, #4]
 8012bd4:	f008 f908 	bl	801ade8 <free>
#else
    (void)p;
#endif
}
 8012bd8:	bf00      	nop
 8012bda:	3708      	adds	r7, #8
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}

08012be0 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8012be0:	b480      	push	{r7}
 8012be2:	b083      	sub	sp, #12
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
 8012be8:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8012bea:	683b      	ldr	r3, [r7, #0]
 8012bec:	f04f 32ff 	mov.w	r2, #4294967295
 8012bf0:	601a      	str	r2, [r3, #0]
}
 8012bf2:	bf00      	nop
 8012bf4:	370c      	adds	r7, #12
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfc:	4770      	bx	lr

08012bfe <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8012bfe:	b580      	push	{r7, lr}
 8012c00:	b082      	sub	sp, #8
 8012c02:	af00      	add	r7, sp, #0
 8012c04:	6078      	str	r0, [r7, #4]
 8012c06:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8012c08:	683b      	ldr	r3, [r7, #0]
 8012c0a:	68d8      	ldr	r0, [r3, #12]
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c12:	461a      	mov	r2, r3
 8012c14:	21ff      	movs	r1, #255	; 0xff
 8012c16:	f009 fa47 	bl	801c0a8 <memset>
    pcache->block = LFS_BLOCK_NULL;
 8012c1a:	683b      	ldr	r3, [r7, #0]
 8012c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8012c20:	601a      	str	r2, [r3, #0]
}
 8012c22:	bf00      	nop
 8012c24:	3708      	adds	r7, #8
 8012c26:	46bd      	mov	sp, r7
 8012c28:	bd80      	pop	{r7, pc}
	...

08012c2c <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8012c2c:	b5b0      	push	{r4, r5, r7, lr}
 8012c2e:	b08a      	sub	sp, #40	; 0x28
 8012c30:	af02      	add	r7, sp, #8
 8012c32:	60f8      	str	r0, [r7, #12]
 8012c34:	60b9      	str	r1, [r7, #8]
 8012c36:	607a      	str	r2, [r7, #4]
 8012c38:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8012c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c3c:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012c42:	6a1b      	ldr	r3, [r3, #32]
 8012c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c46:	429a      	cmp	r2, r3
 8012c48:	d208      	bcs.n	8012c5c <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 8012c4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c4e:	441a      	add	r2, r3
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012c54:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 8012c56:	429a      	cmp	r2, r3
 8012c58:	f240 811b 	bls.w	8012e92 <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 8012c5c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8012c60:	e11c      	b.n	8012e9c <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8012c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c64:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8012c66:	68bb      	ldr	r3, [r7, #8]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d03f      	beq.n	8012cec <lfs_bd_read+0xc0>
 8012c6c:	68bb      	ldr	r3, [r7, #8]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c72:	429a      	cmp	r2, r3
 8012c74:	d13a      	bne.n	8012cec <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 8012c76:	68bb      	ldr	r3, [r7, #8]
 8012c78:	685a      	ldr	r2, [r3, #4]
 8012c7a:	68bb      	ldr	r3, [r7, #8]
 8012c7c:	689b      	ldr	r3, [r3, #8]
 8012c7e:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8012c80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c82:	429a      	cmp	r2, r3
 8012c84:	d232      	bcs.n	8012cec <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 8012c86:	68bb      	ldr	r3, [r7, #8]
 8012c88:	685b      	ldr	r3, [r3, #4]
 8012c8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c8c:	429a      	cmp	r2, r3
 8012c8e:	d324      	bcc.n	8012cda <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8012c90:	68bb      	ldr	r3, [r7, #8]
 8012c92:	689a      	ldr	r2, [r3, #8]
 8012c94:	68bb      	ldr	r3, [r7, #8]
 8012c96:	6859      	ldr	r1, [r3, #4]
 8012c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c9a:	1acb      	subs	r3, r1, r3
 8012c9c:	4413      	add	r3, r2
 8012c9e:	4619      	mov	r1, r3
 8012ca0:	69b8      	ldr	r0, [r7, #24]
 8012ca2:	f7ff fee7 	bl	8012a74 <lfs_min>
 8012ca6:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8012ca8:	68bb      	ldr	r3, [r7, #8]
 8012caa:	68da      	ldr	r2, [r3, #12]
 8012cac:	68bb      	ldr	r3, [r7, #8]
 8012cae:	685b      	ldr	r3, [r3, #4]
 8012cb0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012cb2:	1acb      	subs	r3, r1, r3
 8012cb4:	4413      	add	r3, r2
 8012cb6:	69ba      	ldr	r2, [r7, #24]
 8012cb8:	4619      	mov	r1, r3
 8012cba:	69f8      	ldr	r0, [r7, #28]
 8012cbc:	f009 fbc9 	bl	801c452 <memcpy>

                data += diff;
 8012cc0:	69fa      	ldr	r2, [r7, #28]
 8012cc2:	69bb      	ldr	r3, [r7, #24]
 8012cc4:	4413      	add	r3, r2
 8012cc6:	61fb      	str	r3, [r7, #28]
                off += diff;
 8012cc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012cca:	69bb      	ldr	r3, [r7, #24]
 8012ccc:	4413      	add	r3, r2
 8012cce:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8012cd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012cd2:	69bb      	ldr	r3, [r7, #24]
 8012cd4:	1ad3      	subs	r3, r2, r3
 8012cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8012cd8:	e0db      	b.n	8012e92 <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8012cda:	68bb      	ldr	r3, [r7, #8]
 8012cdc:	685a      	ldr	r2, [r3, #4]
 8012cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ce0:	1ad3      	subs	r3, r2, r3
 8012ce2:	4619      	mov	r1, r3
 8012ce4:	69b8      	ldr	r0, [r7, #24]
 8012ce6:	f7ff fec5 	bl	8012a74 <lfs_min>
 8012cea:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012cf2:	429a      	cmp	r2, r3
 8012cf4:	d13a      	bne.n	8012d6c <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	685a      	ldr	r2, [r3, #4]
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	689b      	ldr	r3, [r3, #8]
 8012cfe:	4413      	add	r3, r2
        if (block == rcache->block &&
 8012d00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012d02:	429a      	cmp	r2, r3
 8012d04:	d232      	bcs.n	8012d6c <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	685b      	ldr	r3, [r3, #4]
 8012d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012d0c:	429a      	cmp	r2, r3
 8012d0e:	d324      	bcc.n	8012d5a <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	689a      	ldr	r2, [r3, #8]
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	6859      	ldr	r1, [r3, #4]
 8012d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d1a:	1acb      	subs	r3, r1, r3
 8012d1c:	4413      	add	r3, r2
 8012d1e:	4619      	mov	r1, r3
 8012d20:	69b8      	ldr	r0, [r7, #24]
 8012d22:	f7ff fea7 	bl	8012a74 <lfs_min>
 8012d26:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	68da      	ldr	r2, [r3, #12]
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	685b      	ldr	r3, [r3, #4]
 8012d30:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012d32:	1acb      	subs	r3, r1, r3
 8012d34:	4413      	add	r3, r2
 8012d36:	69ba      	ldr	r2, [r7, #24]
 8012d38:	4619      	mov	r1, r3
 8012d3a:	69f8      	ldr	r0, [r7, #28]
 8012d3c:	f009 fb89 	bl	801c452 <memcpy>

                data += diff;
 8012d40:	69fa      	ldr	r2, [r7, #28]
 8012d42:	69bb      	ldr	r3, [r7, #24]
 8012d44:	4413      	add	r3, r2
 8012d46:	61fb      	str	r3, [r7, #28]
                off += diff;
 8012d48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012d4a:	69bb      	ldr	r3, [r7, #24]
 8012d4c:	4413      	add	r3, r2
 8012d4e:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8012d50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d52:	69bb      	ldr	r3, [r7, #24]
 8012d54:	1ad3      	subs	r3, r2, r3
 8012d56:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8012d58:	e09b      	b.n	8012e92 <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	685a      	ldr	r2, [r3, #4]
 8012d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d60:	1ad3      	subs	r3, r2, r3
 8012d62:	4619      	mov	r1, r3
 8012d64:	69b8      	ldr	r0, [r7, #24]
 8012d66:	f7ff fe85 	bl	8012a74 <lfs_min>
 8012d6a:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8012d6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d6e:	683b      	ldr	r3, [r7, #0]
 8012d70:	429a      	cmp	r2, r3
 8012d72:	d336      	bcc.n	8012de2 <lfs_bd_read+0x1b6>
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012d78:	695a      	ldr	r2, [r3, #20]
 8012d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012d80:	fb01 f202 	mul.w	r2, r1, r2
 8012d84:	1a9b      	subs	r3, r3, r2
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d12b      	bne.n	8012de2 <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012d8e:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8012d90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d92:	429a      	cmp	r2, r3
 8012d94:	d325      	bcc.n	8012de2 <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012d9a:	695b      	ldr	r3, [r3, #20]
 8012d9c:	4619      	mov	r1, r3
 8012d9e:	69b8      	ldr	r0, [r7, #24]
 8012da0:	f7ff fe78 	bl	8012a94 <lfs_aligndown>
 8012da4:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012daa:	685c      	ldr	r4, [r3, #4]
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8012db0:	69bb      	ldr	r3, [r7, #24]
 8012db2:	9300      	str	r3, [sp, #0]
 8012db4:	69fb      	ldr	r3, [r7, #28]
 8012db6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012db8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012dba:	47a0      	blx	r4
 8012dbc:	6178      	str	r0, [r7, #20]
            if (err) {
 8012dbe:	697b      	ldr	r3, [r7, #20]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d001      	beq.n	8012dc8 <lfs_bd_read+0x19c>
                return err;
 8012dc4:	697b      	ldr	r3, [r7, #20]
 8012dc6:	e069      	b.n	8012e9c <lfs_bd_read+0x270>
            }

            data += diff;
 8012dc8:	69fa      	ldr	r2, [r7, #28]
 8012dca:	69bb      	ldr	r3, [r7, #24]
 8012dcc:	4413      	add	r3, r2
 8012dce:	61fb      	str	r3, [r7, #28]
            off += diff;
 8012dd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012dd2:	69bb      	ldr	r3, [r7, #24]
 8012dd4:	4413      	add	r3, r2
 8012dd6:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8012dd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012dda:	69bb      	ldr	r3, [r7, #24]
 8012ddc:	1ad3      	subs	r3, r2, r3
 8012dde:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8012de0:	e057      	b.n	8012e92 <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012de6:	6a1b      	ldr	r3, [r3, #32]
 8012de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012dea:	429a      	cmp	r2, r3
 8012dec:	d305      	bcc.n	8012dfa <lfs_bd_read+0x1ce>
 8012dee:	4b2d      	ldr	r3, [pc, #180]	; (8012ea4 <lfs_bd_read+0x278>)
 8012df0:	4a2d      	ldr	r2, [pc, #180]	; (8012ea8 <lfs_bd_read+0x27c>)
 8012df2:	216b      	movs	r1, #107	; 0x6b
 8012df4:	482d      	ldr	r0, [pc, #180]	; (8012eac <lfs_bd_read+0x280>)
 8012df6:	f007 ffbb 	bl	801ad70 <__assert_func>
        rcache->block = block;
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012dfe:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012e04:	695b      	ldr	r3, [r3, #20]
 8012e06:	4619      	mov	r1, r3
 8012e08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012e0a:	f7ff fe43 	bl	8012a94 <lfs_aligndown>
 8012e0e:	4602      	mov	r2, r0
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8012e14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012e16:	683b      	ldr	r3, [r7, #0]
 8012e18:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012e1e:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 8012e20:	4619      	mov	r1, r3
 8012e22:	4610      	mov	r0, r2
 8012e24:	f7ff fe4b 	bl	8012abe <lfs_alignup>
 8012e28:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012e2e:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 8012e30:	4619      	mov	r1, r3
 8012e32:	4610      	mov	r0, r2
 8012e34:	f7ff fe1e 	bl	8012a74 <lfs_min>
 8012e38:	4602      	mov	r2, r0
                - rcache->off,
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8012e3e:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(
 8012e46:	4619      	mov	r1, r3
 8012e48:	4610      	mov	r0, r2
 8012e4a:	f7ff fe13 	bl	8012a74 <lfs_min>
 8012e4e:	4602      	mov	r2, r0
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012e58:	685c      	ldr	r4, [r3, #4]
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	6819      	ldr	r1, [r3, #0]
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	689b      	ldr	r3, [r3, #8]
 8012e6e:	9300      	str	r3, [sp, #0]
 8012e70:	462b      	mov	r3, r5
 8012e72:	47a0      	blx	r4
 8012e74:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8012e76:	693b      	ldr	r3, [r7, #16]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	dd05      	ble.n	8012e88 <lfs_bd_read+0x25c>
 8012e7c:	4b0c      	ldr	r3, [pc, #48]	; (8012eb0 <lfs_bd_read+0x284>)
 8012e7e:	4a0a      	ldr	r2, [pc, #40]	; (8012ea8 <lfs_bd_read+0x27c>)
 8012e80:	2176      	movs	r1, #118	; 0x76
 8012e82:	480a      	ldr	r0, [pc, #40]	; (8012eac <lfs_bd_read+0x280>)
 8012e84:	f007 ff74 	bl	801ad70 <__assert_func>
        if (err) {
 8012e88:	693b      	ldr	r3, [r7, #16]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d001      	beq.n	8012e92 <lfs_bd_read+0x266>
            return err;
 8012e8e:	693b      	ldr	r3, [r7, #16]
 8012e90:	e004      	b.n	8012e9c <lfs_bd_read+0x270>
    while (size > 0) {
 8012e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	f47f aee4 	bne.w	8012c62 <lfs_bd_read+0x36>
        }
    }

    return 0;
 8012e9a:	2300      	movs	r3, #0
}
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	3720      	adds	r7, #32
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bdb0      	pop	{r4, r5, r7, pc}
 8012ea4:	08021b20 	.word	0x08021b20
 8012ea8:	08022d68 	.word	0x08022d68
 8012eac:	08021b40 	.word	0x08021b40
 8012eb0:	08021b74 	.word	0x08021b74

08012eb4 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b08e      	sub	sp, #56	; 0x38
 8012eb8:	af04      	add	r7, sp, #16
 8012eba:	60f8      	str	r0, [r7, #12]
 8012ebc:	60b9      	str	r1, [r7, #8]
 8012ebe:	607a      	str	r2, [r7, #4]
 8012ec0:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8012ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ec4:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8012eca:	2300      	movs	r3, #0
 8012ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8012ece:	e039      	b.n	8012f44 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8012ed0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ed4:	1ad3      	subs	r3, r2, r3
 8012ed6:	2108      	movs	r1, #8
 8012ed8:	4618      	mov	r0, r3
 8012eda:	f7ff fdcb 	bl	8012a74 <lfs_min>
 8012ede:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 8012ee0:	683a      	ldr	r2, [r7, #0]
 8012ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ee4:	1ad1      	subs	r1, r2, r3
 8012ee6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eea:	4413      	add	r3, r2
 8012eec:	69fa      	ldr	r2, [r7, #28]
 8012eee:	9203      	str	r2, [sp, #12]
 8012ef0:	f107 0210 	add.w	r2, r7, #16
 8012ef4:	9202      	str	r2, [sp, #8]
 8012ef6:	9301      	str	r3, [sp, #4]
 8012ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012efa:	9300      	str	r3, [sp, #0]
 8012efc:	460b      	mov	r3, r1
 8012efe:	687a      	ldr	r2, [r7, #4]
 8012f00:	68b9      	ldr	r1, [r7, #8]
 8012f02:	68f8      	ldr	r0, [r7, #12]
 8012f04:	f7ff fe92 	bl	8012c2c <lfs_bd_read>
 8012f08:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 8012f0a:	69bb      	ldr	r3, [r7, #24]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d001      	beq.n	8012f14 <lfs_bd_cmp+0x60>
            return res;
 8012f10:	69bb      	ldr	r3, [r7, #24]
 8012f12:	e01c      	b.n	8012f4e <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 8012f14:	6a3a      	ldr	r2, [r7, #32]
 8012f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f18:	18d1      	adds	r1, r2, r3
 8012f1a:	f107 0310 	add.w	r3, r7, #16
 8012f1e:	69fa      	ldr	r2, [r7, #28]
 8012f20:	4618      	mov	r0, r3
 8012f22:	f009 f897 	bl	801c054 <memcmp>
 8012f26:	61b8      	str	r0, [r7, #24]
        if (res) {
 8012f28:	69bb      	ldr	r3, [r7, #24]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d006      	beq.n	8012f3c <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8012f2e:	69bb      	ldr	r3, [r7, #24]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	da01      	bge.n	8012f38 <lfs_bd_cmp+0x84>
 8012f34:	2301      	movs	r3, #1
 8012f36:	e00a      	b.n	8012f4e <lfs_bd_cmp+0x9a>
 8012f38:	2302      	movs	r3, #2
 8012f3a:	e008      	b.n	8012f4e <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8012f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f3e:	69fb      	ldr	r3, [r7, #28]
 8012f40:	4413      	add	r3, r2
 8012f42:	627b      	str	r3, [r7, #36]	; 0x24
 8012f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f48:	429a      	cmp	r2, r3
 8012f4a:	d3c1      	bcc.n	8012ed0 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8012f4c:	2300      	movs	r3, #0
}
 8012f4e:	4618      	mov	r0, r3
 8012f50:	3728      	adds	r7, #40	; 0x28
 8012f52:	46bd      	mov	sp, r7
 8012f54:	bd80      	pop	{r7, pc}
	...

08012f58 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8012f58:	b5b0      	push	{r4, r5, r7, lr}
 8012f5a:	b08c      	sub	sp, #48	; 0x30
 8012f5c:	af04      	add	r7, sp, #16
 8012f5e:	60f8      	str	r0, [r7, #12]
 8012f60:	60b9      	str	r1, [r7, #8]
 8012f62:	607a      	str	r2, [r7, #4]
 8012f64:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f6e:	d061      	beq.n	8013034 <lfs_bd_flush+0xdc>
 8012f70:	68bb      	ldr	r3, [r7, #8]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	f113 0f02 	cmn.w	r3, #2
 8012f78:	d05c      	beq.n	8013034 <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8012f7a:	68bb      	ldr	r3, [r7, #8]
 8012f7c:	681a      	ldr	r2, [r3, #0]
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012f82:	6a1b      	ldr	r3, [r3, #32]
 8012f84:	429a      	cmp	r2, r3
 8012f86:	d305      	bcc.n	8012f94 <lfs_bd_flush+0x3c>
 8012f88:	4b2d      	ldr	r3, [pc, #180]	; (8013040 <lfs_bd_flush+0xe8>)
 8012f8a:	4a2e      	ldr	r2, [pc, #184]	; (8013044 <lfs_bd_flush+0xec>)
 8012f8c:	219e      	movs	r1, #158	; 0x9e
 8012f8e:	482e      	ldr	r0, [pc, #184]	; (8013048 <lfs_bd_flush+0xf0>)
 8012f90:	f007 feee 	bl	801ad70 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8012f94:	68bb      	ldr	r3, [r7, #8]
 8012f96:	689a      	ldr	r2, [r3, #8]
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012f9c:	699b      	ldr	r3, [r3, #24]
 8012f9e:	4619      	mov	r1, r3
 8012fa0:	4610      	mov	r0, r2
 8012fa2:	f7ff fd8c 	bl	8012abe <lfs_alignup>
 8012fa6:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012fac:	689c      	ldr	r4, [r3, #8]
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8012fb2:	68bb      	ldr	r3, [r7, #8]
 8012fb4:	6819      	ldr	r1, [r3, #0]
 8012fb6:	68bb      	ldr	r3, [r7, #8]
 8012fb8:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8012fba:	68bb      	ldr	r3, [r7, #8]
 8012fbc:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8012fbe:	69fb      	ldr	r3, [r7, #28]
 8012fc0:	9300      	str	r3, [sp, #0]
 8012fc2:	462b      	mov	r3, r5
 8012fc4:	47a0      	blx	r4
 8012fc6:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8012fc8:	69bb      	ldr	r3, [r7, #24]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	dd05      	ble.n	8012fda <lfs_bd_flush+0x82>
 8012fce:	4b1f      	ldr	r3, [pc, #124]	; (801304c <lfs_bd_flush+0xf4>)
 8012fd0:	4a1c      	ldr	r2, [pc, #112]	; (8013044 <lfs_bd_flush+0xec>)
 8012fd2:	21a2      	movs	r1, #162	; 0xa2
 8012fd4:	481c      	ldr	r0, [pc, #112]	; (8013048 <lfs_bd_flush+0xf0>)
 8012fd6:	f007 fecb 	bl	801ad70 <__assert_func>
        if (err) {
 8012fda:	69bb      	ldr	r3, [r7, #24]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d001      	beq.n	8012fe4 <lfs_bd_flush+0x8c>
            return err;
 8012fe0:	69bb      	ldr	r3, [r7, #24]
 8012fe2:	e028      	b.n	8013036 <lfs_bd_flush+0xde>
        }

        if (validate) {
 8012fe4:	78fb      	ldrb	r3, [r7, #3]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d020      	beq.n	801302c <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8012fea:	6879      	ldr	r1, [r7, #4]
 8012fec:	68f8      	ldr	r0, [r7, #12]
 8012fee:	f7ff fdf7 	bl	8012be0 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8012ff2:	68bb      	ldr	r3, [r7, #8]
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	68ba      	ldr	r2, [r7, #8]
 8012ff8:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8012ffa:	68b9      	ldr	r1, [r7, #8]
 8012ffc:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8012ffe:	69f8      	ldr	r0, [r7, #28]
 8013000:	9003      	str	r0, [sp, #12]
 8013002:	9102      	str	r1, [sp, #8]
 8013004:	9201      	str	r2, [sp, #4]
 8013006:	9300      	str	r3, [sp, #0]
 8013008:	69fb      	ldr	r3, [r7, #28]
 801300a:	687a      	ldr	r2, [r7, #4]
 801300c:	2100      	movs	r1, #0
 801300e:	68f8      	ldr	r0, [r7, #12]
 8013010:	f7ff ff50 	bl	8012eb4 <lfs_bd_cmp>
 8013014:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8013016:	697b      	ldr	r3, [r7, #20]
 8013018:	2b00      	cmp	r3, #0
 801301a:	da01      	bge.n	8013020 <lfs_bd_flush+0xc8>
                return res;
 801301c:	697b      	ldr	r3, [r7, #20]
 801301e:	e00a      	b.n	8013036 <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 8013020:	697b      	ldr	r3, [r7, #20]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d002      	beq.n	801302c <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 8013026:	f06f 0353 	mvn.w	r3, #83	; 0x53
 801302a:	e004      	b.n	8013036 <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 801302c:	68b9      	ldr	r1, [r7, #8]
 801302e:	68f8      	ldr	r0, [r7, #12]
 8013030:	f7ff fde5 	bl	8012bfe <lfs_cache_zero>
    }

    return 0;
 8013034:	2300      	movs	r3, #0
}
 8013036:	4618      	mov	r0, r3
 8013038:	3720      	adds	r7, #32
 801303a:	46bd      	mov	sp, r7
 801303c:	bdb0      	pop	{r4, r5, r7, pc}
 801303e:	bf00      	nop
 8013040:	08021b80 	.word	0x08021b80
 8013044:	08022d74 	.word	0x08022d74
 8013048:	08021b40 	.word	0x08021b40
 801304c:	08021b74 	.word	0x08021b74

08013050 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8013050:	b580      	push	{r7, lr}
 8013052:	b086      	sub	sp, #24
 8013054:	af00      	add	r7, sp, #0
 8013056:	60f8      	str	r0, [r7, #12]
 8013058:	60b9      	str	r1, [r7, #8]
 801305a:	607a      	str	r2, [r7, #4]
 801305c:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 801305e:	6879      	ldr	r1, [r7, #4]
 8013060:	68f8      	ldr	r0, [r7, #12]
 8013062:	f7ff fdbd 	bl	8012be0 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8013066:	78fb      	ldrb	r3, [r7, #3]
 8013068:	687a      	ldr	r2, [r7, #4]
 801306a:	68b9      	ldr	r1, [r7, #8]
 801306c:	68f8      	ldr	r0, [r7, #12]
 801306e:	f7ff ff73 	bl	8012f58 <lfs_bd_flush>
 8013072:	6178      	str	r0, [r7, #20]
    if (err) {
 8013074:	697b      	ldr	r3, [r7, #20]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d001      	beq.n	801307e <lfs_bd_sync+0x2e>
        return err;
 801307a:	697b      	ldr	r3, [r7, #20]
 801307c:	e011      	b.n	80130a2 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013082:	691b      	ldr	r3, [r3, #16]
 8013084:	68fa      	ldr	r2, [r7, #12]
 8013086:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8013088:	4610      	mov	r0, r2
 801308a:	4798      	blx	r3
 801308c:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 801308e:	697b      	ldr	r3, [r7, #20]
 8013090:	2b00      	cmp	r3, #0
 8013092:	dd05      	ble.n	80130a0 <lfs_bd_sync+0x50>
 8013094:	4b05      	ldr	r3, [pc, #20]	; (80130ac <lfs_bd_sync+0x5c>)
 8013096:	4a06      	ldr	r2, [pc, #24]	; (80130b0 <lfs_bd_sync+0x60>)
 8013098:	21c8      	movs	r1, #200	; 0xc8
 801309a:	4806      	ldr	r0, [pc, #24]	; (80130b4 <lfs_bd_sync+0x64>)
 801309c:	f007 fe68 	bl	801ad70 <__assert_func>
    return err;
 80130a0:	697b      	ldr	r3, [r7, #20]
}
 80130a2:	4618      	mov	r0, r3
 80130a4:	3718      	adds	r7, #24
 80130a6:	46bd      	mov	sp, r7
 80130a8:	bd80      	pop	{r7, pc}
 80130aa:	bf00      	nop
 80130ac:	08021b74 	.word	0x08021b74
 80130b0:	08022d84 	.word	0x08022d84
 80130b4:	08021b40 	.word	0x08021b40

080130b8 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b088      	sub	sp, #32
 80130bc:	af00      	add	r7, sp, #0
 80130be:	60f8      	str	r0, [r7, #12]
 80130c0:	60b9      	str	r1, [r7, #8]
 80130c2:	607a      	str	r2, [r7, #4]
 80130c4:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 80130c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130c8:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 80130ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130cc:	f113 0f02 	cmn.w	r3, #2
 80130d0:	d00b      	beq.n	80130ea <lfs_bd_prog+0x32>
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80130d6:	6a1b      	ldr	r3, [r3, #32]
 80130d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80130da:	429a      	cmp	r2, r3
 80130dc:	d305      	bcc.n	80130ea <lfs_bd_prog+0x32>
 80130de:	4b47      	ldr	r3, [pc, #284]	; (80131fc <lfs_bd_prog+0x144>)
 80130e0:	4a47      	ldr	r2, [pc, #284]	; (8013200 <lfs_bd_prog+0x148>)
 80130e2:	21d3      	movs	r1, #211	; 0xd3
 80130e4:	4847      	ldr	r0, [pc, #284]	; (8013204 <lfs_bd_prog+0x14c>)
 80130e6:	f007 fe43 	bl	801ad70 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 80130ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80130ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130ee:	441a      	add	r2, r3
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80130f4:	69db      	ldr	r3, [r3, #28]
 80130f6:	429a      	cmp	r2, r3
 80130f8:	d977      	bls.n	80131ea <lfs_bd_prog+0x132>
 80130fa:	4b43      	ldr	r3, [pc, #268]	; (8013208 <lfs_bd_prog+0x150>)
 80130fc:	4a40      	ldr	r2, [pc, #256]	; (8013200 <lfs_bd_prog+0x148>)
 80130fe:	21d4      	movs	r1, #212	; 0xd4
 8013100:	4840      	ldr	r0, [pc, #256]	; (8013204 <lfs_bd_prog+0x14c>)
 8013102:	f007 fe35 	bl	801ad70 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8013106:	68bb      	ldr	r3, [r7, #8]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801310c:	429a      	cmp	r2, r3
 801310e:	d151      	bne.n	80131b4 <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 8013110:	68bb      	ldr	r3, [r7, #8]
 8013112:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8013114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013116:	429a      	cmp	r2, r3
 8013118:	d34c      	bcc.n	80131b4 <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 801311a:	68bb      	ldr	r3, [r7, #8]
 801311c:	685a      	ldr	r2, [r3, #4]
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013124:	4413      	add	r3, r2
                off >= pcache->off &&
 8013126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013128:	429a      	cmp	r2, r3
 801312a:	d243      	bcs.n	80131b4 <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013130:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013132:	68bb      	ldr	r3, [r7, #8]
 8013134:	6859      	ldr	r1, [r3, #4]
 8013136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013138:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 801313a:	4413      	add	r3, r2
 801313c:	4619      	mov	r1, r3
 801313e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013140:	f7ff fc98 	bl	8012a74 <lfs_min>
 8013144:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8013146:	68bb      	ldr	r3, [r7, #8]
 8013148:	68da      	ldr	r2, [r3, #12]
 801314a:	68bb      	ldr	r3, [r7, #8]
 801314c:	685b      	ldr	r3, [r3, #4]
 801314e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013150:	1acb      	subs	r3, r1, r3
 8013152:	4413      	add	r3, r2
 8013154:	69ba      	ldr	r2, [r7, #24]
 8013156:	69f9      	ldr	r1, [r7, #28]
 8013158:	4618      	mov	r0, r3
 801315a:	f009 f97a 	bl	801c452 <memcpy>

            data += diff;
 801315e:	69fa      	ldr	r2, [r7, #28]
 8013160:	69bb      	ldr	r3, [r7, #24]
 8013162:	4413      	add	r3, r2
 8013164:	61fb      	str	r3, [r7, #28]
            off += diff;
 8013166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013168:	69bb      	ldr	r3, [r7, #24]
 801316a:	4413      	add	r3, r2
 801316c:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 801316e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013170:	69bb      	ldr	r3, [r7, #24]
 8013172:	1ad3      	subs	r3, r2, r3
 8013174:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8013176:	68bb      	ldr	r3, [r7, #8]
 8013178:	6898      	ldr	r0, [r3, #8]
 801317a:	68bb      	ldr	r3, [r7, #8]
 801317c:	685b      	ldr	r3, [r3, #4]
 801317e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013180:	1ad3      	subs	r3, r2, r3
 8013182:	4619      	mov	r1, r3
 8013184:	f7ff fc66 	bl	8012a54 <lfs_max>
 8013188:	4602      	mov	r2, r0
 801318a:	68bb      	ldr	r3, [r7, #8]
 801318c:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 801318e:	68bb      	ldr	r3, [r7, #8]
 8013190:	689a      	ldr	r2, [r3, #8]
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013198:	429a      	cmp	r2, r3
 801319a:	d126      	bne.n	80131ea <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801319c:	78fb      	ldrb	r3, [r7, #3]
 801319e:	687a      	ldr	r2, [r7, #4]
 80131a0:	68b9      	ldr	r1, [r7, #8]
 80131a2:	68f8      	ldr	r0, [r7, #12]
 80131a4:	f7ff fed8 	bl	8012f58 <lfs_bd_flush>
 80131a8:	6178      	str	r0, [r7, #20]
                if (err) {
 80131aa:	697b      	ldr	r3, [r7, #20]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d01c      	beq.n	80131ea <lfs_bd_prog+0x132>
                    return err;
 80131b0:	697b      	ldr	r3, [r7, #20]
 80131b2:	e01e      	b.n	80131f2 <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 80131b4:	68bb      	ldr	r3, [r7, #8]
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131bc:	d005      	beq.n	80131ca <lfs_bd_prog+0x112>
 80131be:	4b13      	ldr	r3, [pc, #76]	; (801320c <lfs_bd_prog+0x154>)
 80131c0:	4a0f      	ldr	r2, [pc, #60]	; (8013200 <lfs_bd_prog+0x148>)
 80131c2:	21f1      	movs	r1, #241	; 0xf1
 80131c4:	480f      	ldr	r0, [pc, #60]	; (8013204 <lfs_bd_prog+0x14c>)
 80131c6:	f007 fdd3 	bl	801ad70 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 80131ca:	68bb      	ldr	r3, [r7, #8]
 80131cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80131ce:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80131d4:	699b      	ldr	r3, [r3, #24]
 80131d6:	4619      	mov	r1, r3
 80131d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80131da:	f7ff fc5b 	bl	8012a94 <lfs_aligndown>
 80131de:	4602      	mov	r2, r0
 80131e0:	68bb      	ldr	r3, [r7, #8]
 80131e2:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 80131e4:	68bb      	ldr	r3, [r7, #8]
 80131e6:	2200      	movs	r2, #0
 80131e8:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 80131ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d18a      	bne.n	8013106 <lfs_bd_prog+0x4e>
    }

    return 0;
 80131f0:	2300      	movs	r3, #0
}
 80131f2:	4618      	mov	r0, r3
 80131f4:	3720      	adds	r7, #32
 80131f6:	46bd      	mov	sp, r7
 80131f8:	bd80      	pop	{r7, pc}
 80131fa:	bf00      	nop
 80131fc:	08021ba8 	.word	0x08021ba8
 8013200:	08022d90 	.word	0x08022d90
 8013204:	08021b40 	.word	0x08021b40
 8013208:	08021be4 	.word	0x08021be4
 801320c:	08021c08 	.word	0x08021c08

08013210 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8013210:	b580      	push	{r7, lr}
 8013212:	b084      	sub	sp, #16
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]
 8013218:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801321e:	6a1b      	ldr	r3, [r3, #32]
 8013220:	683a      	ldr	r2, [r7, #0]
 8013222:	429a      	cmp	r2, r3
 8013224:	d305      	bcc.n	8013232 <lfs_bd_erase+0x22>
 8013226:	4b0f      	ldr	r3, [pc, #60]	; (8013264 <lfs_bd_erase+0x54>)
 8013228:	4a0f      	ldr	r2, [pc, #60]	; (8013268 <lfs_bd_erase+0x58>)
 801322a:	21ff      	movs	r1, #255	; 0xff
 801322c:	480f      	ldr	r0, [pc, #60]	; (801326c <lfs_bd_erase+0x5c>)
 801322e:	f007 fd9f 	bl	801ad70 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013236:	68db      	ldr	r3, [r3, #12]
 8013238:	687a      	ldr	r2, [r7, #4]
 801323a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801323c:	6839      	ldr	r1, [r7, #0]
 801323e:	4610      	mov	r0, r2
 8013240:	4798      	blx	r3
 8013242:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	2b00      	cmp	r3, #0
 8013248:	dd06      	ble.n	8013258 <lfs_bd_erase+0x48>
 801324a:	4b09      	ldr	r3, [pc, #36]	; (8013270 <lfs_bd_erase+0x60>)
 801324c:	4a06      	ldr	r2, [pc, #24]	; (8013268 <lfs_bd_erase+0x58>)
 801324e:	f240 1101 	movw	r1, #257	; 0x101
 8013252:	4806      	ldr	r0, [pc, #24]	; (801326c <lfs_bd_erase+0x5c>)
 8013254:	f007 fd8c 	bl	801ad70 <__assert_func>
    return err;
 8013258:	68fb      	ldr	r3, [r7, #12]
}
 801325a:	4618      	mov	r0, r3
 801325c:	3710      	adds	r7, #16
 801325e:	46bd      	mov	sp, r7
 8013260:	bd80      	pop	{r7, pc}
 8013262:	bf00      	nop
 8013264:	08021b20 	.word	0x08021b20
 8013268:	08022d9c 	.word	0x08022d9c
 801326c:	08021b40 	.word	0x08021b40
 8013270:	08021b74 	.word	0x08021b74

08013274 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8013274:	b480      	push	{r7}
 8013276:	b085      	sub	sp, #20
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	685a      	ldr	r2, [r3, #4]
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	3304      	adds	r3, #4
 801328e:	68fa      	ldr	r2, [r7, #12]
 8013290:	601a      	str	r2, [r3, #0]
}
 8013292:	bf00      	nop
 8013294:	3714      	adds	r7, #20
 8013296:	46bd      	mov	sp, r7
 8013298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801329c:	4770      	bx	lr

0801329e <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 801329e:	b480      	push	{r7}
 80132a0:	b083      	sub	sp, #12
 80132a2:	af00      	add	r7, sp, #0
 80132a4:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132ae:	d005      	beq.n	80132bc <lfs_pair_isnull+0x1e>
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	3304      	adds	r3, #4
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132ba:	d101      	bne.n	80132c0 <lfs_pair_isnull+0x22>
 80132bc:	2301      	movs	r3, #1
 80132be:	e000      	b.n	80132c2 <lfs_pair_isnull+0x24>
 80132c0:	2300      	movs	r3, #0
 80132c2:	f003 0301 	and.w	r3, r3, #1
 80132c6:	b2db      	uxtb	r3, r3
}
 80132c8:	4618      	mov	r0, r3
 80132ca:	370c      	adds	r7, #12
 80132cc:	46bd      	mov	sp, r7
 80132ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d2:	4770      	bx	lr

080132d4 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 80132d4:	b480      	push	{r7}
 80132d6:	b083      	sub	sp, #12
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]
 80132dc:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	681a      	ldr	r2, [r3, #0]
 80132e2:	683b      	ldr	r3, [r7, #0]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	429a      	cmp	r2, r3
 80132e8:	d017      	beq.n	801331a <lfs_pair_cmp+0x46>
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	3304      	adds	r3, #4
 80132ee:	681a      	ldr	r2, [r3, #0]
 80132f0:	683b      	ldr	r3, [r7, #0]
 80132f2:	3304      	adds	r3, #4
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	429a      	cmp	r2, r3
 80132f8:	d00f      	beq.n	801331a <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	681a      	ldr	r2, [r3, #0]
 80132fe:	683b      	ldr	r3, [r7, #0]
 8013300:	3304      	adds	r3, #4
 8013302:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8013304:	429a      	cmp	r2, r3
 8013306:	d008      	beq.n	801331a <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	3304      	adds	r3, #4
 801330c:	681a      	ldr	r2, [r3, #0]
 801330e:	683b      	ldr	r3, [r7, #0]
 8013310:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8013312:	429a      	cmp	r2, r3
 8013314:	d001      	beq.n	801331a <lfs_pair_cmp+0x46>
 8013316:	2301      	movs	r3, #1
 8013318:	e000      	b.n	801331c <lfs_pair_cmp+0x48>
 801331a:	2300      	movs	r3, #0
}
 801331c:	4618      	mov	r0, r3
 801331e:	370c      	adds	r7, #12
 8013320:	46bd      	mov	sp, r7
 8013322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013326:	4770      	bx	lr

08013328 <lfs_pair_sync>:

#ifndef LFS_READONLY
static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8013328:	b480      	push	{r7}
 801332a:	b083      	sub	sp, #12
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]
 8013330:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	681a      	ldr	r2, [r3, #0]
 8013336:	683b      	ldr	r3, [r7, #0]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	429a      	cmp	r2, r3
 801333c:	d107      	bne.n	801334e <lfs_pair_sync+0x26>
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	3304      	adds	r3, #4
 8013342:	681a      	ldr	r2, [r3, #0]
 8013344:	683b      	ldr	r3, [r7, #0]
 8013346:	3304      	adds	r3, #4
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	429a      	cmp	r2, r3
 801334c:	d00d      	beq.n	801336a <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	681a      	ldr	r2, [r3, #0]
 8013352:	683b      	ldr	r3, [r7, #0]
 8013354:	3304      	adds	r3, #4
 8013356:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8013358:	429a      	cmp	r2, r3
 801335a:	d108      	bne.n	801336e <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	3304      	adds	r3, #4
 8013360:	681a      	ldr	r2, [r3, #0]
 8013362:	683b      	ldr	r3, [r7, #0]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	429a      	cmp	r2, r3
 8013368:	d101      	bne.n	801336e <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801336a:	2301      	movs	r3, #1
 801336c:	e000      	b.n	8013370 <lfs_pair_sync+0x48>
 801336e:	2300      	movs	r3, #0
 8013370:	f003 0301 	and.w	r3, r3, #1
 8013374:	b2db      	uxtb	r3, r3
}
 8013376:	4618      	mov	r0, r3
 8013378:	370c      	adds	r7, #12
 801337a:	46bd      	mov	sp, r7
 801337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013380:	4770      	bx	lr

08013382 <lfs_pair_fromle32>:
#endif

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8013382:	b590      	push	{r4, r7, lr}
 8013384:	b083      	sub	sp, #12
 8013386:	af00      	add	r7, sp, #0
 8013388:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	4618      	mov	r0, r3
 8013390:	f7ff fbe0 	bl	8012b54 <lfs_fromle32>
 8013394:	4602      	mov	r2, r0
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	3304      	adds	r3, #4
 801339e:	681a      	ldr	r2, [r3, #0]
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	1d1c      	adds	r4, r3, #4
 80133a4:	4610      	mov	r0, r2
 80133a6:	f7ff fbd5 	bl	8012b54 <lfs_fromle32>
 80133aa:	4603      	mov	r3, r0
 80133ac:	6023      	str	r3, [r4, #0]
}
 80133ae:	bf00      	nop
 80133b0:	370c      	adds	r7, #12
 80133b2:	46bd      	mov	sp, r7
 80133b4:	bd90      	pop	{r4, r7, pc}

080133b6 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 80133b6:	b590      	push	{r4, r7, lr}
 80133b8:	b083      	sub	sp, #12
 80133ba:	af00      	add	r7, sp, #0
 80133bc:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	4618      	mov	r0, r3
 80133c4:	f7ff fbd1 	bl	8012b6a <lfs_tole32>
 80133c8:	4602      	mov	r2, r0
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	3304      	adds	r3, #4
 80133d2:	681a      	ldr	r2, [r3, #0]
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	1d1c      	adds	r4, r3, #4
 80133d8:	4610      	mov	r0, r2
 80133da:	f7ff fbc6 	bl	8012b6a <lfs_tole32>
 80133de:	4603      	mov	r3, r0
 80133e0:	6023      	str	r3, [r4, #0]
}
 80133e2:	bf00      	nop
 80133e4:	370c      	adds	r7, #12
 80133e6:	46bd      	mov	sp, r7
 80133e8:	bd90      	pop	{r4, r7, pc}

080133ea <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 80133ea:	b480      	push	{r7}
 80133ec:	b083      	sub	sp, #12
 80133ee:	af00      	add	r7, sp, #0
 80133f0:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	43db      	mvns	r3, r3
 80133f6:	0fdb      	lsrs	r3, r3, #31
 80133f8:	b2db      	uxtb	r3, r3
}
 80133fa:	4618      	mov	r0, r3
 80133fc:	370c      	adds	r7, #12
 80133fe:	46bd      	mov	sp, r7
 8013400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013404:	4770      	bx	lr

08013406 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8013406:	b480      	push	{r7}
 8013408:	b083      	sub	sp, #12
 801340a:	af00      	add	r7, sp, #0
 801340c:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	059b      	lsls	r3, r3, #22
 8013412:	159b      	asrs	r3, r3, #22
 8013414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013418:	bf0c      	ite	eq
 801341a:	2301      	moveq	r3, #1
 801341c:	2300      	movne	r3, #0
 801341e:	b2db      	uxtb	r3, r3
}
 8013420:	4618      	mov	r0, r3
 8013422:	370c      	adds	r7, #12
 8013424:	46bd      	mov	sp, r7
 8013426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801342a:	4770      	bx	lr

0801342c <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 801342c:	b480      	push	{r7}
 801342e:	b083      	sub	sp, #12
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	0d1b      	lsrs	r3, r3, #20
 8013438:	b29b      	uxth	r3, r3
 801343a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801343e:	b29b      	uxth	r3, r3
}
 8013440:	4618      	mov	r0, r3
 8013442:	370c      	adds	r7, #12
 8013444:	46bd      	mov	sp, r7
 8013446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344a:	4770      	bx	lr

0801344c <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 801344c:	b480      	push	{r7}
 801344e:	b083      	sub	sp, #12
 8013450:	af00      	add	r7, sp, #0
 8013452:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	0d1b      	lsrs	r3, r3, #20
 8013458:	b29b      	uxth	r3, r3
 801345a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801345e:	b29b      	uxth	r3, r3
}
 8013460:	4618      	mov	r0, r3
 8013462:	370c      	adds	r7, #12
 8013464:	46bd      	mov	sp, r7
 8013466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346a:	4770      	bx	lr

0801346c <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 801346c:	b480      	push	{r7}
 801346e:	b083      	sub	sp, #12
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	0d1b      	lsrs	r3, r3, #20
 8013478:	b2db      	uxtb	r3, r3
}
 801347a:	4618      	mov	r0, r3
 801347c:	370c      	adds	r7, #12
 801347e:	46bd      	mov	sp, r7
 8013480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013484:	4770      	bx	lr

08013486 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 8013486:	b580      	push	{r7, lr}
 8013488:	b082      	sub	sp, #8
 801348a:	af00      	add	r7, sp, #0
 801348c:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 801348e:	6878      	ldr	r0, [r7, #4]
 8013490:	f7ff ffec 	bl	801346c <lfs_tag_chunk>
 8013494:	4603      	mov	r3, r0
 8013496:	b25b      	sxtb	r3, r3
}
 8013498:	4618      	mov	r0, r3
 801349a:	3708      	adds	r7, #8
 801349c:	46bd      	mov	sp, r7
 801349e:	bd80      	pop	{r7, pc}

080134a0 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 80134a0:	b480      	push	{r7}
 80134a2:	b083      	sub	sp, #12
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	0a9b      	lsrs	r3, r3, #10
 80134ac:	b29b      	uxth	r3, r3
 80134ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80134b2:	b29b      	uxth	r3, r3
}
 80134b4:	4618      	mov	r0, r3
 80134b6:	370c      	adds	r7, #12
 80134b8:	46bd      	mov	sp, r7
 80134ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134be:	4770      	bx	lr

080134c0 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 80134c0:	b480      	push	{r7}
 80134c2:	b083      	sub	sp, #12
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 80134ce:	4618      	mov	r0, r3
 80134d0:	370c      	adds	r7, #12
 80134d2:	46bd      	mov	sp, r7
 80134d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d8:	4770      	bx	lr

080134da <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 80134da:	b580      	push	{r7, lr}
 80134dc:	b082      	sub	sp, #8
 80134de:	af00      	add	r7, sp, #0
 80134e0:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 80134e2:	6878      	ldr	r0, [r7, #4]
 80134e4:	f7ff ff8f 	bl	8013406 <lfs_tag_isdelete>
 80134e8:	4603      	mov	r3, r0
 80134ea:	461a      	mov	r2, r3
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	4413      	add	r3, r2
 80134f0:	4618      	mov	r0, r3
 80134f2:	f7ff ffe5 	bl	80134c0 <lfs_tag_size>
 80134f6:	4603      	mov	r3, r0
 80134f8:	3304      	adds	r3, #4
}
 80134fa:	4618      	mov	r0, r3
 80134fc:	3708      	adds	r7, #8
 80134fe:	46bd      	mov	sp, r7
 8013500:	bd80      	pop	{r7, pc}

08013502 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8013502:	b480      	push	{r7}
 8013504:	b085      	sub	sp, #20
 8013506:	af00      	add	r7, sp, #0
 8013508:	6078      	str	r0, [r7, #4]
 801350a:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 801350c:	2300      	movs	r3, #0
 801350e:	60fb      	str	r3, [r7, #12]
 8013510:	e012      	b.n	8013538 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	009b      	lsls	r3, r3, #2
 8013516:	687a      	ldr	r2, [r7, #4]
 8013518:	4413      	add	r3, r2
 801351a:	6819      	ldr	r1, [r3, #0]
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	009b      	lsls	r3, r3, #2
 8013520:	683a      	ldr	r2, [r7, #0]
 8013522:	4413      	add	r3, r2
 8013524:	681a      	ldr	r2, [r3, #0]
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	009b      	lsls	r3, r3, #2
 801352a:	6878      	ldr	r0, [r7, #4]
 801352c:	4403      	add	r3, r0
 801352e:	404a      	eors	r2, r1
 8013530:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	3301      	adds	r3, #1
 8013536:	60fb      	str	r3, [r7, #12]
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	2b02      	cmp	r3, #2
 801353c:	dde9      	ble.n	8013512 <lfs_gstate_xor+0x10>
    }
}
 801353e:	bf00      	nop
 8013540:	bf00      	nop
 8013542:	3714      	adds	r7, #20
 8013544:	46bd      	mov	sp, r7
 8013546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801354a:	4770      	bx	lr

0801354c <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 801354c:	b480      	push	{r7}
 801354e:	b085      	sub	sp, #20
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8013554:	2300      	movs	r3, #0
 8013556:	60fb      	str	r3, [r7, #12]
 8013558:	e00b      	b.n	8013572 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	009b      	lsls	r3, r3, #2
 801355e:	687a      	ldr	r2, [r7, #4]
 8013560:	4413      	add	r3, r2
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d001      	beq.n	801356c <lfs_gstate_iszero+0x20>
            return false;
 8013568:	2300      	movs	r3, #0
 801356a:	e006      	b.n	801357a <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	3301      	adds	r3, #1
 8013570:	60fb      	str	r3, [r7, #12]
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	2b02      	cmp	r3, #2
 8013576:	ddf0      	ble.n	801355a <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 8013578:	2301      	movs	r3, #1
}
 801357a:	4618      	mov	r0, r3
 801357c:	3714      	adds	r7, #20
 801357e:	46bd      	mov	sp, r7
 8013580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013584:	4770      	bx	lr

08013586 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 8013586:	b580      	push	{r7, lr}
 8013588:	b082      	sub	sp, #8
 801358a:	af00      	add	r7, sp, #0
 801358c:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	4618      	mov	r0, r3
 8013594:	f7ff ff94 	bl	80134c0 <lfs_tag_size>
 8013598:	4603      	mov	r3, r0
 801359a:	2b00      	cmp	r3, #0
 801359c:	bf14      	ite	ne
 801359e:	2301      	movne	r3, #1
 80135a0:	2300      	moveq	r3, #0
 80135a2:	b2db      	uxtb	r3, r3
}
 80135a4:	4618      	mov	r0, r3
 80135a6:	3708      	adds	r7, #8
 80135a8:	46bd      	mov	sp, r7
 80135aa:	bd80      	pop	{r7, pc}

080135ac <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b082      	sub	sp, #8
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	4618      	mov	r0, r3
 80135ba:	f7ff ff81 	bl	80134c0 <lfs_tag_size>
 80135be:	4603      	mov	r3, r0
 80135c0:	b2db      	uxtb	r3, r3
}
 80135c2:	4618      	mov	r0, r3
 80135c4:	3708      	adds	r7, #8
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bd80      	pop	{r7, pc}

080135ca <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 80135ca:	b580      	push	{r7, lr}
 80135cc:	b082      	sub	sp, #8
 80135ce:	af00      	add	r7, sp, #0
 80135d0:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	4618      	mov	r0, r3
 80135d8:	f7ff ff28 	bl	801342c <lfs_tag_type1>
 80135dc:	4603      	mov	r3, r0
 80135de:	2b00      	cmp	r3, #0
 80135e0:	bf14      	ite	ne
 80135e2:	2301      	movne	r3, #1
 80135e4:	2300      	moveq	r3, #0
 80135e6:	b2db      	uxtb	r3, r3
}
 80135e8:	4618      	mov	r0, r3
 80135ea:	3708      	adds	r7, #8
 80135ec:	46bd      	mov	sp, r7
 80135ee:	bd80      	pop	{r7, pc}

080135f0 <lfs_gstate_hasmovehere>:
#endif

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b082      	sub	sp, #8
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
 80135f8:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	4618      	mov	r0, r3
 8013600:	f7ff ff14 	bl	801342c <lfs_tag_type1>
 8013604:	4603      	mov	r3, r0
 8013606:	2b00      	cmp	r3, #0
 8013608:	d00a      	beq.n	8013620 <lfs_gstate_hasmovehere+0x30>
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	3304      	adds	r3, #4
 801360e:	6839      	ldr	r1, [r7, #0]
 8013610:	4618      	mov	r0, r3
 8013612:	f7ff fe5f 	bl	80132d4 <lfs_pair_cmp>
 8013616:	4603      	mov	r3, r0
 8013618:	2b00      	cmp	r3, #0
 801361a:	d101      	bne.n	8013620 <lfs_gstate_hasmovehere+0x30>
 801361c:	2301      	movs	r3, #1
 801361e:	e000      	b.n	8013622 <lfs_gstate_hasmovehere+0x32>
 8013620:	2300      	movs	r3, #0
 8013622:	f003 0301 	and.w	r3, r3, #1
 8013626:	b2db      	uxtb	r3, r3
}
 8013628:	4618      	mov	r0, r3
 801362a:	3708      	adds	r7, #8
 801362c:	46bd      	mov	sp, r7
 801362e:	bd80      	pop	{r7, pc}

08013630 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8013630:	b580      	push	{r7, lr}
 8013632:	b082      	sub	sp, #8
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	4618      	mov	r0, r3
 801363e:	f7ff fa89 	bl	8012b54 <lfs_fromle32>
 8013642:	4602      	mov	r2, r0
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	685b      	ldr	r3, [r3, #4]
 801364c:	4618      	mov	r0, r3
 801364e:	f7ff fa81 	bl	8012b54 <lfs_fromle32>
 8013652:	4602      	mov	r2, r0
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	689b      	ldr	r3, [r3, #8]
 801365c:	4618      	mov	r0, r3
 801365e:	f7ff fa79 	bl	8012b54 <lfs_fromle32>
 8013662:	4602      	mov	r2, r0
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	609a      	str	r2, [r3, #8]
}
 8013668:	bf00      	nop
 801366a:	3708      	adds	r7, #8
 801366c:	46bd      	mov	sp, r7
 801366e:	bd80      	pop	{r7, pc}

08013670 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8013670:	b580      	push	{r7, lr}
 8013672:	b082      	sub	sp, #8
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	4618      	mov	r0, r3
 801367e:	f7ff fa74 	bl	8012b6a <lfs_tole32>
 8013682:	4602      	mov	r2, r0
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	685b      	ldr	r3, [r3, #4]
 801368c:	4618      	mov	r0, r3
 801368e:	f7ff fa6c 	bl	8012b6a <lfs_tole32>
 8013692:	4602      	mov	r2, r0
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	689b      	ldr	r3, [r3, #8]
 801369c:	4618      	mov	r0, r3
 801369e:	f7ff fa64 	bl	8012b6a <lfs_tole32>
 80136a2:	4602      	mov	r2, r0
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	609a      	str	r2, [r3, #8]
}
 80136a8:	bf00      	nop
 80136aa:	3708      	adds	r7, #8
 80136ac:	46bd      	mov	sp, r7
 80136ae:	bd80      	pop	{r7, pc}

080136b0 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b082      	sub	sp, #8
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	4618      	mov	r0, r3
 80136be:	f7ff fa49 	bl	8012b54 <lfs_fromle32>
 80136c2:	4602      	mov	r2, r0
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	685b      	ldr	r3, [r3, #4]
 80136cc:	4618      	mov	r0, r3
 80136ce:	f7ff fa41 	bl	8012b54 <lfs_fromle32>
 80136d2:	4602      	mov	r2, r0
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	605a      	str	r2, [r3, #4]
}
 80136d8:	bf00      	nop
 80136da:	3708      	adds	r7, #8
 80136dc:	46bd      	mov	sp, r7
 80136de:	bd80      	pop	{r7, pc}

080136e0 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b082      	sub	sp, #8
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	4618      	mov	r0, r3
 80136ee:	f7ff fa3c 	bl	8012b6a <lfs_tole32>
 80136f2:	4602      	mov	r2, r0
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	685b      	ldr	r3, [r3, #4]
 80136fc:	4618      	mov	r0, r3
 80136fe:	f7ff fa34 	bl	8012b6a <lfs_tole32>
 8013702:	4602      	mov	r2, r0
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	605a      	str	r2, [r3, #4]
}
 8013708:	bf00      	nop
 801370a:	3708      	adds	r7, #8
 801370c:	46bd      	mov	sp, r7
 801370e:	bd80      	pop	{r7, pc}

08013710 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8013710:	b580      	push	{r7, lr}
 8013712:	b082      	sub	sp, #8
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	4618      	mov	r0, r3
 801371e:	f7ff fa19 	bl	8012b54 <lfs_fromle32>
 8013722:	4602      	mov	r2, r0
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	685b      	ldr	r3, [r3, #4]
 801372c:	4618      	mov	r0, r3
 801372e:	f7ff fa11 	bl	8012b54 <lfs_fromle32>
 8013732:	4602      	mov	r2, r0
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	689b      	ldr	r3, [r3, #8]
 801373c:	4618      	mov	r0, r3
 801373e:	f7ff fa09 	bl	8012b54 <lfs_fromle32>
 8013742:	4602      	mov	r2, r0
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	68db      	ldr	r3, [r3, #12]
 801374c:	4618      	mov	r0, r3
 801374e:	f7ff fa01 	bl	8012b54 <lfs_fromle32>
 8013752:	4602      	mov	r2, r0
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	691b      	ldr	r3, [r3, #16]
 801375c:	4618      	mov	r0, r3
 801375e:	f7ff f9f9 	bl	8012b54 <lfs_fromle32>
 8013762:	4602      	mov	r2, r0
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	695b      	ldr	r3, [r3, #20]
 801376c:	4618      	mov	r0, r3
 801376e:	f7ff f9f1 	bl	8012b54 <lfs_fromle32>
 8013772:	4602      	mov	r2, r0
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	615a      	str	r2, [r3, #20]
}
 8013778:	bf00      	nop
 801377a:	3708      	adds	r7, #8
 801377c:	46bd      	mov	sp, r7
 801377e:	bd80      	pop	{r7, pc}

08013780 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8013780:	b580      	push	{r7, lr}
 8013782:	b082      	sub	sp, #8
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	4618      	mov	r0, r3
 801378e:	f7ff f9ec 	bl	8012b6a <lfs_tole32>
 8013792:	4602      	mov	r2, r0
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	685b      	ldr	r3, [r3, #4]
 801379c:	4618      	mov	r0, r3
 801379e:	f7ff f9e4 	bl	8012b6a <lfs_tole32>
 80137a2:	4602      	mov	r2, r0
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	689b      	ldr	r3, [r3, #8]
 80137ac:	4618      	mov	r0, r3
 80137ae:	f7ff f9dc 	bl	8012b6a <lfs_tole32>
 80137b2:	4602      	mov	r2, r0
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	68db      	ldr	r3, [r3, #12]
 80137bc:	4618      	mov	r0, r3
 80137be:	f7ff f9d4 	bl	8012b6a <lfs_tole32>
 80137c2:	4602      	mov	r2, r0
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	691b      	ldr	r3, [r3, #16]
 80137cc:	4618      	mov	r0, r3
 80137ce:	f7ff f9cc 	bl	8012b6a <lfs_tole32>
 80137d2:	4602      	mov	r2, r0
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	695b      	ldr	r3, [r3, #20]
 80137dc:	4618      	mov	r0, r3
 80137de:	f7ff f9c4 	bl	8012b6a <lfs_tole32>
 80137e2:	4602      	mov	r2, r0
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	615a      	str	r2, [r3, #20]
}
 80137e8:	bf00      	nop
 80137ea:	3708      	adds	r7, #8
 80137ec:	46bd      	mov	sp, r7
 80137ee:	bd80      	pop	{r7, pc}

080137f0 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 80137f0:	b480      	push	{r7}
 80137f2:	b085      	sub	sp, #20
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
 80137f8:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80137fa:	1d3b      	adds	r3, r7, #4
 80137fc:	60fb      	str	r3, [r7, #12]
 80137fe:	e009      	b.n	8013814 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	683a      	ldr	r2, [r7, #0]
 8013806:	429a      	cmp	r2, r3
 8013808:	d101      	bne.n	801380e <lfs_mlist_isopen+0x1e>
            return true;
 801380a:	2301      	movs	r3, #1
 801380c:	e007      	b.n	801381e <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	60fb      	str	r3, [r7, #12]
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d1f1      	bne.n	8013800 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 801381c:	2300      	movs	r3, #0
}
 801381e:	4618      	mov	r0, r3
 8013820:	3714      	adds	r7, #20
 8013822:	46bd      	mov	sp, r7
 8013824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013828:	4770      	bx	lr

0801382a <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 801382a:	b480      	push	{r7}
 801382c:	b085      	sub	sp, #20
 801382e:	af00      	add	r7, sp, #0
 8013830:	6078      	str	r0, [r7, #4]
 8013832:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	3328      	adds	r3, #40	; 0x28
 8013838:	60fb      	str	r3, [r7, #12]
 801383a:	e00d      	b.n	8013858 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	683a      	ldr	r2, [r7, #0]
 8013842:	429a      	cmp	r2, r3
 8013844:	d105      	bne.n	8013852 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	681a      	ldr	r2, [r3, #0]
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	601a      	str	r2, [r3, #0]
            break;
 8013850:	e007      	b.n	8013862 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	60fb      	str	r3, [r7, #12]
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d1ed      	bne.n	801383c <lfs_mlist_remove+0x12>
        }
    }
}
 8013860:	bf00      	nop
 8013862:	bf00      	nop
 8013864:	3714      	adds	r7, #20
 8013866:	46bd      	mov	sp, r7
 8013868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801386c:	4770      	bx	lr

0801386e <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 801386e:	b480      	push	{r7}
 8013870:	b083      	sub	sp, #12
 8013872:	af00      	add	r7, sp, #0
 8013874:	6078      	str	r0, [r7, #4]
 8013876:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801387c:	683b      	ldr	r3, [r7, #0]
 801387e:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	683a      	ldr	r2, [r7, #0]
 8013884:	629a      	str	r2, [r3, #40]	; 0x28
}
 8013886:	bf00      	nop
 8013888:	370c      	adds	r7, #12
 801388a:	46bd      	mov	sp, r7
 801388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013890:	4770      	bx	lr

08013892 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8013892:	b480      	push	{r7}
 8013894:	b085      	sub	sp, #20
 8013896:	af00      	add	r7, sp, #0
 8013898:	6078      	str	r0, [r7, #4]
 801389a:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80138a4:	683a      	ldr	r2, [r7, #0]
 80138a6:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80138ac:	6a1b      	ldr	r3, [r3, #32]
 80138ae:	4413      	add	r3, r2
 80138b0:	68fa      	ldr	r2, [r7, #12]
 80138b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80138b4:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 80138b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80138ba:	fb01 f202 	mul.w	r2, r1, r2
 80138be:	1a9b      	subs	r3, r3, r2
 80138c0:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80138c6:	68ba      	ldr	r2, [r7, #8]
 80138c8:	429a      	cmp	r2, r3
 80138ca:	d212      	bcs.n	80138f2 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80138d0:	68bb      	ldr	r3, [r7, #8]
 80138d2:	095b      	lsrs	r3, r3, #5
 80138d4:	009a      	lsls	r2, r3, #2
 80138d6:	440a      	add	r2, r1
 80138d8:	6811      	ldr	r1, [r2, #0]
 80138da:	68ba      	ldr	r2, [r7, #8]
 80138dc:	f002 021f 	and.w	r2, r2, #31
 80138e0:	2001      	movs	r0, #1
 80138e2:	fa00 f202 	lsl.w	r2, r0, r2
 80138e6:	68f8      	ldr	r0, [r7, #12]
 80138e8:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80138ea:	009b      	lsls	r3, r3, #2
 80138ec:	4403      	add	r3, r0
 80138ee:	430a      	orrs	r2, r1
 80138f0:	601a      	str	r2, [r3, #0]
    }

    return 0;
 80138f2:	2300      	movs	r3, #0
}
 80138f4:	4618      	mov	r0, r3
 80138f6:	3714      	adds	r7, #20
 80138f8:	46bd      	mov	sp, r7
 80138fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fe:	4770      	bx	lr

08013900 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8013900:	b480      	push	{r7}
 8013902:	b083      	sub	sp, #12
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801390c:	6a1a      	ldr	r2, [r3, #32]
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	661a      	str	r2, [r3, #96]	; 0x60
}
 8013912:	bf00      	nop
 8013914:	370c      	adds	r7, #12
 8013916:	46bd      	mov	sp, r7
 8013918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801391c:	4770      	bx	lr

0801391e <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 801391e:	b580      	push	{r7, lr}
 8013920:	b082      	sub	sp, #8
 8013922:	af00      	add	r7, sp, #0
 8013924:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	2200      	movs	r2, #0
 801392a:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	2200      	movs	r2, #0
 8013930:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 8013932:	6878      	ldr	r0, [r7, #4]
 8013934:	f7ff ffe4 	bl	8013900 <lfs_alloc_ack>
}
 8013938:	bf00      	nop
 801393a:	3708      	adds	r7, #8
 801393c:	46bd      	mov	sp, r7
 801393e:	bd80      	pop	{r7, pc}

08013940 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8013940:	b580      	push	{r7, lr}
 8013942:	b086      	sub	sp, #24
 8013944:	af02      	add	r7, sp, #8
 8013946:	6078      	str	r0, [r7, #4]
 8013948:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 801394a:	e04f      	b.n	80139ec <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013950:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013956:	1c5a      	adds	r2, r3, #1
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013960:	1e5a      	subs	r2, r3, #1
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801396a:	68bb      	ldr	r3, [r7, #8]
 801396c:	095b      	lsrs	r3, r3, #5
 801396e:	009b      	lsls	r3, r3, #2
 8013970:	4413      	add	r3, r2
 8013972:	681a      	ldr	r2, [r3, #0]
 8013974:	68bb      	ldr	r3, [r7, #8]
 8013976:	f003 031f 	and.w	r3, r3, #31
 801397a:	2101      	movs	r1, #1
 801397c:	fa01 f303 	lsl.w	r3, r1, r3
 8013980:	4013      	ands	r3, r2
 8013982:	2b00      	cmp	r3, #0
 8013984:	d132      	bne.n	80139ec <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801398a:	68bb      	ldr	r3, [r7, #8]
 801398c:	4413      	add	r3, r2
 801398e:	687a      	ldr	r2, [r7, #4]
 8013990:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8013992:	6a12      	ldr	r2, [r2, #32]
 8013994:	fbb3 f1f2 	udiv	r1, r3, r2
 8013998:	fb01 f202 	mul.w	r2, r1, r2
 801399c:	1a9a      	subs	r2, r3, r2
 801399e:	683b      	ldr	r3, [r7, #0]
 80139a0:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 80139a2:	e009      	b.n	80139b8 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80139a8:	1c5a      	adds	r2, r3, #1
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80139b2:	1e5a      	subs	r2, r3, #1
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80139c0:	429a      	cmp	r2, r3
 80139c2:	d011      	beq.n	80139e8 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80139cc:	095b      	lsrs	r3, r3, #5
 80139ce:	009b      	lsls	r3, r3, #2
 80139d0:	4413      	add	r3, r2
 80139d2:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80139d8:	f003 031f 	and.w	r3, r3, #31
 80139dc:	2101      	movs	r1, #1
 80139de:	fa01 f303 	lsl.w	r3, r1, r3
 80139e2:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d1dd      	bne.n	80139a4 <lfs_alloc+0x64>
                }

                return 0;
 80139e8:	2300      	movs	r3, #0
 80139ea:	e050      	b.n	8013a8e <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80139f4:	429a      	cmp	r2, r3
 80139f6:	d1a9      	bne.n	801394c <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d10f      	bne.n	8013a20 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a08:	4413      	add	r3, r2
 8013a0a:	4a23      	ldr	r2, [pc, #140]	; (8013a98 <lfs_alloc+0x158>)
 8013a0c:	9200      	str	r2, [sp, #0]
 8013a0e:	f240 2247 	movw	r2, #583	; 0x247
 8013a12:	4922      	ldr	r1, [pc, #136]	; (8013a9c <lfs_alloc+0x15c>)
 8013a14:	4822      	ldr	r0, [pc, #136]	; (8013aa0 <lfs_alloc+0x160>)
 8013a16:	f008 f9e5 	bl	801bde4 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 8013a1a:	f06f 031b 	mvn.w	r3, #27
 8013a1e:	e036      	b.n	8013a8e <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013a28:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 8013a2a:	687a      	ldr	r2, [r7, #4]
 8013a2c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8013a2e:	6a12      	ldr	r2, [r2, #32]
 8013a30:	fbb3 f1f2 	udiv	r1, r3, r2
 8013a34:	fb01 f202 	mul.w	r2, r1, r2
 8013a38:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a44:	00da      	lsls	r2, r3, #3
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013a4a:	4619      	mov	r1, r3
 8013a4c:	4610      	mov	r0, r2
 8013a4e:	f7ff f811 	bl	8012a74 <lfs_min>
 8013a52:	4602      	mov	r2, r0
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a68:	461a      	mov	r2, r3
 8013a6a:	2100      	movs	r1, #0
 8013a6c:	f008 fb1c 	bl	801c0a8 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8013a70:	2301      	movs	r3, #1
 8013a72:	687a      	ldr	r2, [r7, #4]
 8013a74:	490b      	ldr	r1, [pc, #44]	; (8013aa4 <lfs_alloc+0x164>)
 8013a76:	6878      	ldr	r0, [r7, #4]
 8013a78:	f004 ff08 	bl	801888c <lfs_fs_rawtraverse>
 8013a7c:	60f8      	str	r0, [r7, #12]
        if (err) {
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	f43f af62 	beq.w	801394a <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 8013a86:	6878      	ldr	r0, [r7, #4]
 8013a88:	f7ff ff49 	bl	801391e <lfs_alloc_drop>
            return err;
 8013a8c:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8013a8e:	4618      	mov	r0, r3
 8013a90:	3710      	adds	r7, #16
 8013a92:	46bd      	mov	sp, r7
 8013a94:	bd80      	pop	{r7, pc}
 8013a96:	bf00      	nop
 8013a98:	08021c54 	.word	0x08021c54
 8013a9c:	08021b40 	.word	0x08021b40
 8013aa0:	08021c2c 	.word	0x08021c2c
 8013aa4:	08013893 	.word	0x08013893

08013aa8 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8013aa8:	b590      	push	{r4, r7, lr}
 8013aaa:	b08f      	sub	sp, #60	; 0x3c
 8013aac:	af04      	add	r7, sp, #16
 8013aae:	60f8      	str	r0, [r7, #12]
 8013ab0:	60b9      	str	r1, [r7, #8]
 8013ab2:	607a      	str	r2, [r7, #4]
 8013ab4:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8013ab6:	68bb      	ldr	r3, [r7, #8]
 8013ab8:	68db      	ldr	r3, [r3, #12]
 8013aba:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 8013abc:	68bb      	ldr	r3, [r7, #8]
 8013abe:	691b      	ldr	r3, [r3, #16]
 8013ac0:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	333c      	adds	r3, #60	; 0x3c
 8013aca:	68ba      	ldr	r2, [r7, #8]
 8013acc:	4611      	mov	r1, r2
 8013ace:	4618      	mov	r0, r3
 8013ad0:	f7ff fd8e 	bl	80135f0 <lfs_gstate_hasmovehere>
 8013ad4:	4603      	mov	r3, r0
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	f000 80ba 	beq.w	8013c50 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(gmask) != 0 &&
 8013adc:	6878      	ldr	r0, [r7, #4]
 8013ade:	f7ff fcdf 	bl	80134a0 <lfs_tag_id>
 8013ae2:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	f000 80b3 	beq.w	8013c50 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013aee:	4618      	mov	r0, r3
 8013af0:	f7ff fcd6 	bl	80134a0 <lfs_tag_id>
 8013af4:	4603      	mov	r3, r0
 8013af6:	461c      	mov	r4, r3
 8013af8:	6838      	ldr	r0, [r7, #0]
 8013afa:	f7ff fcd1 	bl	80134a0 <lfs_tag_id>
 8013afe:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8013b00:	429c      	cmp	r4, r3
 8013b02:	f200 80a5 	bhi.w	8013c50 <lfs_dir_getslice+0x1a8>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8013b06:	6a3b      	ldr	r3, [r7, #32]
 8013b08:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8013b0c:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8013b0e:	e09f      	b.n	8013c50 <lfs_dir_getslice+0x1a8>
        off -= lfs_tag_dsize(ntag);
 8013b10:	693b      	ldr	r3, [r7, #16]
 8013b12:	4618      	mov	r0, r3
 8013b14:	f7ff fce1 	bl	80134da <lfs_tag_dsize>
 8013b18:	4602      	mov	r2, r0
 8013b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b1c:	1a9b      	subs	r3, r3, r2
 8013b1e:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8013b20:	693b      	ldr	r3, [r7, #16]
 8013b22:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8013b24:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 8013b26:	68bb      	ldr	r3, [r7, #8]
 8013b28:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 8013b2a:	2204      	movs	r2, #4
 8013b2c:	9203      	str	r2, [sp, #12]
 8013b2e:	f107 0210 	add.w	r2, r7, #16
 8013b32:	9202      	str	r2, [sp, #8]
 8013b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b36:	9201      	str	r2, [sp, #4]
 8013b38:	9300      	str	r3, [sp, #0]
 8013b3a:	2304      	movs	r3, #4
 8013b3c:	460a      	mov	r2, r1
 8013b3e:	2100      	movs	r1, #0
 8013b40:	68f8      	ldr	r0, [r7, #12]
 8013b42:	f7ff f873 	bl	8012c2c <lfs_bd_read>
 8013b46:	61b8      	str	r0, [r7, #24]
        if (err) {
 8013b48:	69bb      	ldr	r3, [r7, #24]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d001      	beq.n	8013b52 <lfs_dir_getslice+0xaa>
            return err;
 8013b4e:	69bb      	ldr	r3, [r7, #24]
 8013b50:	e08a      	b.n	8013c68 <lfs_dir_getslice+0x1c0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8013b52:	693b      	ldr	r3, [r7, #16]
 8013b54:	4618      	mov	r0, r3
 8013b56:	f7ff f814 	bl	8012b82 <lfs_frombe32>
 8013b5a:	4602      	mov	r2, r0
 8013b5c:	69fb      	ldr	r3, [r7, #28]
 8013b5e:	4053      	eors	r3, r2
 8013b60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013b64:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8013b66:	6878      	ldr	r0, [r7, #4]
 8013b68:	f7ff fc9a 	bl	80134a0 <lfs_tag_id>
 8013b6c:	4603      	mov	r3, r0
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d02b      	beq.n	8013bca <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8013b72:	69f8      	ldr	r0, [r7, #28]
 8013b74:	f7ff fc5a 	bl	801342c <lfs_tag_type1>
 8013b78:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8013b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013b7e:	d124      	bne.n	8013bca <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8013b80:	69f8      	ldr	r0, [r7, #28]
 8013b82:	f7ff fc8d 	bl	80134a0 <lfs_tag_id>
 8013b86:	4603      	mov	r3, r0
 8013b88:	461c      	mov	r4, r3
 8013b8a:	6a3b      	ldr	r3, [r7, #32]
 8013b8c:	683a      	ldr	r2, [r7, #0]
 8013b8e:	1ad3      	subs	r3, r2, r3
 8013b90:	4618      	mov	r0, r3
 8013b92:	f7ff fc85 	bl	80134a0 <lfs_tag_id>
 8013b96:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8013b98:	429c      	cmp	r4, r3
 8013b9a:	d816      	bhi.n	8013bca <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8013b9c:	6a3b      	ldr	r3, [r7, #32]
 8013b9e:	683a      	ldr	r2, [r7, #0]
 8013ba0:	1ad2      	subs	r2, r2, r3
 8013ba2:	4b33      	ldr	r3, [pc, #204]	; (8013c70 <lfs_dir_getslice+0x1c8>)
 8013ba4:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8013ba6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013baa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013bae:	69fa      	ldr	r2, [r7, #28]
 8013bb0:	429a      	cmp	r2, r3
 8013bb2:	d102      	bne.n	8013bba <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8013bb4:	f06f 0301 	mvn.w	r3, #1
 8013bb8:	e056      	b.n	8013c68 <lfs_dir_getslice+0x1c0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8013bba:	69f8      	ldr	r0, [r7, #28]
 8013bbc:	f7ff fc63 	bl	8013486 <lfs_tag_splice>
 8013bc0:	4603      	mov	r3, r0
 8013bc2:	029a      	lsls	r2, r3, #10
 8013bc4:	6a3b      	ldr	r3, [r7, #32]
 8013bc6:	4413      	add	r3, r2
 8013bc8:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8013bca:	687a      	ldr	r2, [r7, #4]
 8013bcc:	69fb      	ldr	r3, [r7, #28]
 8013bce:	401a      	ands	r2, r3
 8013bd0:	6a3b      	ldr	r3, [r7, #32]
 8013bd2:	6839      	ldr	r1, [r7, #0]
 8013bd4:	1ac9      	subs	r1, r1, r3
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	400b      	ands	r3, r1
 8013bda:	429a      	cmp	r2, r3
 8013bdc:	d138      	bne.n	8013c50 <lfs_dir_getslice+0x1a8>
            if (lfs_tag_isdelete(tag)) {
 8013bde:	69f8      	ldr	r0, [r7, #28]
 8013be0:	f7ff fc11 	bl	8013406 <lfs_tag_isdelete>
 8013be4:	4603      	mov	r3, r0
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d002      	beq.n	8013bf0 <lfs_dir_getslice+0x148>
                return LFS_ERR_NOENT;
 8013bea:	f06f 0301 	mvn.w	r3, #1
 8013bee:	e03b      	b.n	8013c68 <lfs_dir_getslice+0x1c0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8013bf0:	69f8      	ldr	r0, [r7, #28]
 8013bf2:	f7ff fc65 	bl	80134c0 <lfs_tag_size>
 8013bf6:	4603      	mov	r3, r0
 8013bf8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	f7fe ff3a 	bl	8012a74 <lfs_min>
 8013c00:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8013c02:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8013c04:	68bb      	ldr	r3, [r7, #8]
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013c0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013c0c:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8013c0e:	3204      	adds	r2, #4
 8013c10:	6979      	ldr	r1, [r7, #20]
 8013c12:	9103      	str	r1, [sp, #12]
 8013c14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013c16:	9102      	str	r1, [sp, #8]
 8013c18:	9201      	str	r2, [sp, #4]
 8013c1a:	9300      	str	r3, [sp, #0]
 8013c1c:	697b      	ldr	r3, [r7, #20]
 8013c1e:	4602      	mov	r2, r0
 8013c20:	2100      	movs	r1, #0
 8013c22:	68f8      	ldr	r0, [r7, #12]
 8013c24:	f7ff f802 	bl	8012c2c <lfs_bd_read>
 8013c28:	61b8      	str	r0, [r7, #24]
            if (err) {
 8013c2a:	69bb      	ldr	r3, [r7, #24]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d001      	beq.n	8013c34 <lfs_dir_getslice+0x18c>
                return err;
 8013c30:	69bb      	ldr	r3, [r7, #24]
 8013c32:	e019      	b.n	8013c68 <lfs_dir_getslice+0x1c0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8013c34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013c36:	697b      	ldr	r3, [r7, #20]
 8013c38:	18d0      	adds	r0, r2, r3
 8013c3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013c3c:	697b      	ldr	r3, [r7, #20]
 8013c3e:	1ad3      	subs	r3, r2, r3
 8013c40:	461a      	mov	r2, r3
 8013c42:	2100      	movs	r1, #0
 8013c44:	f008 fa30 	bl	801c0a8 <memset>

            return tag + gdiff;
 8013c48:	6a3a      	ldr	r2, [r7, #32]
 8013c4a:	69fb      	ldr	r3, [r7, #28]
 8013c4c:	4413      	add	r3, r2
 8013c4e:	e00b      	b.n	8013c68 <lfs_dir_getslice+0x1c0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8013c50:	693b      	ldr	r3, [r7, #16]
 8013c52:	4618      	mov	r0, r3
 8013c54:	f7ff fc41 	bl	80134da <lfs_tag_dsize>
 8013c58:	4603      	mov	r3, r0
 8013c5a:	3304      	adds	r3, #4
 8013c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c5e:	429a      	cmp	r2, r3
 8013c60:	f4bf af56 	bcs.w	8013b10 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 8013c64:	f06f 0301 	mvn.w	r3, #1
}
 8013c68:	4618      	mov	r0, r3
 8013c6a:	372c      	adds	r7, #44	; 0x2c
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	bd90      	pop	{r4, r7, pc}
 8013c70:	000ffc00 	.word	0x000ffc00

08013c74 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b088      	sub	sp, #32
 8013c78:	af04      	add	r7, sp, #16
 8013c7a:	60f8      	str	r0, [r7, #12]
 8013c7c:	60b9      	str	r1, [r7, #8]
 8013c7e:	607a      	str	r2, [r7, #4]
 8013c80:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8013c82:	6838      	ldr	r0, [r7, #0]
 8013c84:	f7ff fc1c 	bl	80134c0 <lfs_tag_size>
 8013c88:	4603      	mov	r3, r0
 8013c8a:	9302      	str	r3, [sp, #8]
 8013c8c:	69bb      	ldr	r3, [r7, #24]
 8013c8e:	9301      	str	r3, [sp, #4]
 8013c90:	2300      	movs	r3, #0
 8013c92:	9300      	str	r3, [sp, #0]
 8013c94:	683b      	ldr	r3, [r7, #0]
 8013c96:	687a      	ldr	r2, [r7, #4]
 8013c98:	68b9      	ldr	r1, [r7, #8]
 8013c9a:	68f8      	ldr	r0, [r7, #12]
 8013c9c:	f7ff ff04 	bl	8013aa8 <lfs_dir_getslice>
 8013ca0:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	3710      	adds	r7, #16
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	bd80      	pop	{r7, pc}

08013caa <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8013caa:	b580      	push	{r7, lr}
 8013cac:	b08c      	sub	sp, #48	; 0x30
 8013cae:	af04      	add	r7, sp, #16
 8013cb0:	60f8      	str	r0, [r7, #12]
 8013cb2:	60b9      	str	r1, [r7, #8]
 8013cb4:	607a      	str	r2, [r7, #4]
 8013cb6:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8013cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cba:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8013cbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cc0:	441a      	add	r2, r3
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013cc6:	69db      	ldr	r3, [r3, #28]
 8013cc8:	429a      	cmp	r2, r3
 8013cca:	f240 80c0 	bls.w	8013e4e <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8013cce:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8013cd2:	e0c1      	b.n	8013e58 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8013cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cd6:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d03f      	beq.n	8013d5e <lfs_dir_getread+0xb4>
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	f113 0f02 	cmn.w	r3, #2
 8013ce6:	d13a      	bne.n	8013d5e <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	685a      	ldr	r2, [r3, #4]
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	689b      	ldr	r3, [r3, #8]
 8013cf0:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8013cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013cf4:	429a      	cmp	r2, r3
 8013cf6:	d232      	bcs.n	8013d5e <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	685b      	ldr	r3, [r3, #4]
 8013cfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013cfe:	429a      	cmp	r2, r3
 8013d00:	d324      	bcc.n	8013d4c <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	689a      	ldr	r2, [r3, #8]
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	6859      	ldr	r1, [r3, #4]
 8013d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d0c:	1acb      	subs	r3, r1, r3
 8013d0e:	4413      	add	r3, r2
 8013d10:	4619      	mov	r1, r3
 8013d12:	69b8      	ldr	r0, [r7, #24]
 8013d14:	f7fe feae 	bl	8012a74 <lfs_min>
 8013d18:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	68da      	ldr	r2, [r3, #12]
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	685b      	ldr	r3, [r3, #4]
 8013d22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013d24:	1acb      	subs	r3, r1, r3
 8013d26:	4413      	add	r3, r2
 8013d28:	69ba      	ldr	r2, [r7, #24]
 8013d2a:	4619      	mov	r1, r3
 8013d2c:	69f8      	ldr	r0, [r7, #28]
 8013d2e:	f008 fb90 	bl	801c452 <memcpy>

                data += diff;
 8013d32:	69fa      	ldr	r2, [r7, #28]
 8013d34:	69bb      	ldr	r3, [r7, #24]
 8013d36:	4413      	add	r3, r2
 8013d38:	61fb      	str	r3, [r7, #28]
                off += diff;
 8013d3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013d3c:	69bb      	ldr	r3, [r7, #24]
 8013d3e:	4413      	add	r3, r2
 8013d40:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8013d42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013d44:	69bb      	ldr	r3, [r7, #24]
 8013d46:	1ad3      	subs	r3, r2, r3
 8013d48:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8013d4a:	e080      	b.n	8013e4e <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	685a      	ldr	r2, [r3, #4]
 8013d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d52:	1ad3      	subs	r3, r2, r3
 8013d54:	4619      	mov	r1, r3
 8013d56:	69b8      	ldr	r0, [r7, #24]
 8013d58:	f7fe fe8c 	bl	8012a74 <lfs_min>
 8013d5c:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8013d5e:	683b      	ldr	r3, [r7, #0]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	f113 0f02 	cmn.w	r3, #2
 8013d66:	d13a      	bne.n	8013dde <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8013d68:	683b      	ldr	r3, [r7, #0]
 8013d6a:	685a      	ldr	r2, [r3, #4]
 8013d6c:	683b      	ldr	r3, [r7, #0]
 8013d6e:	689b      	ldr	r3, [r3, #8]
 8013d70:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8013d72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013d74:	429a      	cmp	r2, r3
 8013d76:	d232      	bcs.n	8013dde <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8013d78:	683b      	ldr	r3, [r7, #0]
 8013d7a:	685b      	ldr	r3, [r3, #4]
 8013d7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013d7e:	429a      	cmp	r2, r3
 8013d80:	d324      	bcc.n	8013dcc <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	689a      	ldr	r2, [r3, #8]
 8013d86:	683b      	ldr	r3, [r7, #0]
 8013d88:	6859      	ldr	r1, [r3, #4]
 8013d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d8c:	1acb      	subs	r3, r1, r3
 8013d8e:	4413      	add	r3, r2
 8013d90:	4619      	mov	r1, r3
 8013d92:	69b8      	ldr	r0, [r7, #24]
 8013d94:	f7fe fe6e 	bl	8012a74 <lfs_min>
 8013d98:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8013d9a:	683b      	ldr	r3, [r7, #0]
 8013d9c:	68da      	ldr	r2, [r3, #12]
 8013d9e:	683b      	ldr	r3, [r7, #0]
 8013da0:	685b      	ldr	r3, [r3, #4]
 8013da2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013da4:	1acb      	subs	r3, r1, r3
 8013da6:	4413      	add	r3, r2
 8013da8:	69ba      	ldr	r2, [r7, #24]
 8013daa:	4619      	mov	r1, r3
 8013dac:	69f8      	ldr	r0, [r7, #28]
 8013dae:	f008 fb50 	bl	801c452 <memcpy>

                data += diff;
 8013db2:	69fa      	ldr	r2, [r7, #28]
 8013db4:	69bb      	ldr	r3, [r7, #24]
 8013db6:	4413      	add	r3, r2
 8013db8:	61fb      	str	r3, [r7, #28]
                off += diff;
 8013dba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013dbc:	69bb      	ldr	r3, [r7, #24]
 8013dbe:	4413      	add	r3, r2
 8013dc0:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8013dc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013dc4:	69bb      	ldr	r3, [r7, #24]
 8013dc6:	1ad3      	subs	r3, r2, r3
 8013dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8013dca:	e040      	b.n	8013e4e <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8013dcc:	683b      	ldr	r3, [r7, #0]
 8013dce:	685a      	ldr	r2, [r3, #4]
 8013dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dd2:	1ad3      	subs	r3, r2, r3
 8013dd4:	4619      	mov	r1, r3
 8013dd6:	69b8      	ldr	r0, [r7, #24]
 8013dd8:	f7fe fe4c 	bl	8012a74 <lfs_min>
 8013ddc:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8013dde:	683b      	ldr	r3, [r7, #0]
 8013de0:	f06f 0201 	mvn.w	r2, #1
 8013de4:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013dea:	695b      	ldr	r3, [r3, #20]
 8013dec:	4619      	mov	r1, r3
 8013dee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013df0:	f7fe fe50 	bl	8012a94 <lfs_aligndown>
 8013df4:	4602      	mov	r2, r0
 8013df6:	683b      	ldr	r3, [r7, #0]
 8013df8:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8013dfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dfe:	441a      	add	r2, r3
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013e04:	695b      	ldr	r3, [r3, #20]
 8013e06:	4619      	mov	r1, r3
 8013e08:	4610      	mov	r0, r2
 8013e0a:	f7fe fe58 	bl	8012abe <lfs_alignup>
 8013e0e:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8013e16:	4619      	mov	r1, r3
 8013e18:	4610      	mov	r0, r2
 8013e1a:	f7fe fe2b 	bl	8012a74 <lfs_min>
 8013e1e:	4602      	mov	r2, r0
 8013e20:	683b      	ldr	r3, [r7, #0]
 8013e22:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8013e24:	683b      	ldr	r3, [r7, #0]
 8013e26:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8013e28:	683a      	ldr	r2, [r7, #0]
 8013e2a:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8013e2c:	6839      	ldr	r1, [r7, #0]
 8013e2e:	6889      	ldr	r1, [r1, #8]
 8013e30:	9102      	str	r1, [sp, #8]
 8013e32:	9201      	str	r2, [sp, #4]
 8013e34:	9300      	str	r3, [sp, #0]
 8013e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e3a:	68b9      	ldr	r1, [r7, #8]
 8013e3c:	68f8      	ldr	r0, [r7, #12]
 8013e3e:	f7ff fe33 	bl	8013aa8 <lfs_dir_getslice>
 8013e42:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8013e44:	697b      	ldr	r3, [r7, #20]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	da01      	bge.n	8013e4e <lfs_dir_getread+0x1a4>
            return err;
 8013e4a:	697b      	ldr	r3, [r7, #20]
 8013e4c:	e004      	b.n	8013e58 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8013e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	f47f af3f 	bne.w	8013cd4 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8013e56:	2300      	movs	r3, #0
}
 8013e58:	4618      	mov	r0, r3
 8013e5a:	3720      	adds	r7, #32
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	bd80      	pop	{r7, pc}

08013e60 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8013e60:	b590      	push	{r4, r7, lr}
 8013e62:	b087      	sub	sp, #28
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	60f8      	str	r0, [r7, #12]
 8013e68:	60b9      	str	r1, [r7, #8]
 8013e6a:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8013e70:	68bb      	ldr	r3, [r7, #8]
 8013e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d001      	beq.n	8013e7e <lfs_dir_traverse_filter+0x1e>
 8013e7a:	4b24      	ldr	r3, [pc, #144]	; (8013f0c <lfs_dir_traverse_filter+0xac>)
 8013e7c:	e000      	b.n	8013e80 <lfs_dir_traverse_filter+0x20>
 8013e7e:	4b24      	ldr	r3, [pc, #144]	; (8013f10 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8013e80:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8013e82:	697b      	ldr	r3, [r7, #20]
 8013e84:	681a      	ldr	r2, [r3, #0]
 8013e86:	68bb      	ldr	r3, [r7, #8]
 8013e88:	405a      	eors	r2, r3
 8013e8a:	693b      	ldr	r3, [r7, #16]
 8013e8c:	4013      	ands	r3, r2
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d014      	beq.n	8013ebc <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8013e92:	697b      	ldr	r3, [r7, #20]
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	4618      	mov	r0, r3
 8013e98:	f7ff fab5 	bl	8013406 <lfs_tag_isdelete>
 8013e9c:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d10c      	bne.n	8013ebc <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8013ea2:	68bb      	ldr	r3, [r7, #8]
 8013ea4:	4a19      	ldr	r2, [pc, #100]	; (8013f0c <lfs_dir_traverse_filter+0xac>)
 8013ea6:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8013ea8:	697b      	ldr	r3, [r7, #20]
 8013eaa:	6819      	ldr	r1, [r3, #0]
 8013eac:	4b19      	ldr	r3, [pc, #100]	; (8013f14 <lfs_dir_traverse_filter+0xb4>)
 8013eae:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8013eb0:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8013eb4:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8013eb8:	429a      	cmp	r2, r3
 8013eba:	d104      	bne.n	8013ec6 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8013ebc:	697b      	ldr	r3, [r7, #20]
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	601a      	str	r2, [r3, #0]
        return true;
 8013ec2:	2301      	movs	r3, #1
 8013ec4:	e01e      	b.n	8013f04 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8013ec6:	68b8      	ldr	r0, [r7, #8]
 8013ec8:	f7ff fab0 	bl	801342c <lfs_tag_type1>
 8013ecc:	4603      	mov	r3, r0
 8013ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013ed2:	d116      	bne.n	8013f02 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8013ed4:	68b8      	ldr	r0, [r7, #8]
 8013ed6:	f7ff fae3 	bl	80134a0 <lfs_tag_id>
 8013eda:	4603      	mov	r3, r0
 8013edc:	461c      	mov	r4, r3
 8013ede:	697b      	ldr	r3, [r7, #20]
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	f7ff fadc 	bl	80134a0 <lfs_tag_id>
 8013ee8:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8013eea:	429c      	cmp	r4, r3
 8013eec:	d809      	bhi.n	8013f02 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8013eee:	68b8      	ldr	r0, [r7, #8]
 8013ef0:	f7ff fac9 	bl	8013486 <lfs_tag_splice>
 8013ef4:	4603      	mov	r3, r0
 8013ef6:	029a      	lsls	r2, r3, #10
 8013ef8:	697b      	ldr	r3, [r7, #20]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	441a      	add	r2, r3
 8013efe:	697b      	ldr	r3, [r7, #20]
 8013f00:	601a      	str	r2, [r3, #0]
    }

    return false;
 8013f02:	2300      	movs	r3, #0
}
 8013f04:	4618      	mov	r0, r3
 8013f06:	371c      	adds	r7, #28
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	bd90      	pop	{r4, r7, pc}
 8013f0c:	7ffffc00 	.word	0x7ffffc00
 8013f10:	700ffc00 	.word	0x700ffc00
 8013f14:	000ffc00 	.word	0x000ffc00

08013f18 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8013f18:	b590      	push	{r4, r7, lr}
 8013f1a:	b0c1      	sub	sp, #260	; 0x104
 8013f1c:	af04      	add	r7, sp, #16
 8013f1e:	60f8      	str	r0, [r7, #12]
 8013f20:	60b9      	str	r1, [r7, #8]
 8013f22:	607a      	str	r2, [r7, #4]
 8013f24:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8013f26:	2300      	movs	r3, #0
 8013f28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8013f2c:	6838      	ldr	r0, [r7, #0]
 8013f2e:	f7ff fad4 	bl	80134da <lfs_tag_dsize>
 8013f32:	4602      	mov	r2, r0
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	441a      	add	r2, r3
 8013f38:	68bb      	ldr	r3, [r7, #8]
 8013f3a:	68db      	ldr	r3, [r3, #12]
 8013f3c:	429a      	cmp	r2, r3
 8013f3e:	d237      	bcs.n	8013fb0 <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 8013f40:	6838      	ldr	r0, [r7, #0]
 8013f42:	f7ff faca 	bl	80134da <lfs_tag_dsize>
 8013f46:	4602      	mov	r2, r0
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	4413      	add	r3, r2
 8013f4c:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8013f4e:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 8013f50:	68bb      	ldr	r3, [r7, #8]
 8013f52:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 8013f54:	2204      	movs	r2, #4
 8013f56:	9203      	str	r2, [sp, #12]
 8013f58:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8013f5c:	9202      	str	r2, [sp, #8]
 8013f5e:	687a      	ldr	r2, [r7, #4]
 8013f60:	9201      	str	r2, [sp, #4]
 8013f62:	9300      	str	r3, [sp, #0]
 8013f64:	2304      	movs	r3, #4
 8013f66:	460a      	mov	r2, r1
 8013f68:	2100      	movs	r1, #0
 8013f6a:	68f8      	ldr	r0, [r7, #12]
 8013f6c:	f7fe fe5e 	bl	8012c2c <lfs_bd_read>
 8013f70:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                if (err) {
 8013f74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d002      	beq.n	8013f82 <lfs_dir_traverse+0x6a>
                    return err;
 8013f7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013f80:	e3a6      	b.n	80146d0 <lfs_dir_traverse+0x7b8>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8013f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013f84:	4618      	mov	r0, r3
 8013f86:	f7fe fdfc 	bl	8012b82 <lfs_frombe32>
 8013f8a:	4602      	mov	r2, r0
 8013f8c:	683b      	ldr	r3, [r7, #0]
 8013f8e:	4053      	eors	r3, r2
 8013f90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013f94:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 8013f96:	68bb      	ldr	r3, [r7, #8]
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	3304      	adds	r3, #4
 8013fa0:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 8013fa2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 8013faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013fac:	603b      	str	r3, [r7, #0]
 8013fae:	e01b      	b.n	8013fe8 <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 8013fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	dd13      	ble.n	8013fe0 <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 8013fb8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 8013fc0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013fc4:	685b      	ldr	r3, [r3, #4]
 8013fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 8013fca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013fce:	3308      	adds	r3, #8
 8013fd0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 8013fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013fd8:	3b01      	subs	r3, #1
 8013fda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8013fde:	e003      	b.n	8013fe8 <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 8013fe6:	e2a2      	b.n	801452e <lfs_dir_traverse+0x616>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8013fe8:	4b7e      	ldr	r3, [pc, #504]	; (80141e4 <lfs_dir_traverse+0x2cc>)
 8013fea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8013fee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013ff4:	405a      	eors	r2, r3
 8013ff6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8013ffa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8013ffe:	400b      	ands	r3, r1
 8014000:	4013      	ands	r3, r2
 8014002:	2b00      	cmp	r3, #0
 8014004:	f040 8285 	bne.w	8014512 <lfs_dir_traverse+0x5fa>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8014008:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 801400c:	f7ff fa48 	bl	80134a0 <lfs_tag_id>
 8014010:	4603      	mov	r3, r0
 8014012:	2b00      	cmp	r3, #0
 8014014:	f000 80f0 	beq.w	80141f8 <lfs_dir_traverse+0x2e0>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8014018:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801401c:	2b02      	cmp	r3, #2
 801401e:	d906      	bls.n	801402e <lfs_dir_traverse+0x116>
 8014020:	4b71      	ldr	r3, [pc, #452]	; (80141e8 <lfs_dir_traverse+0x2d0>)
 8014022:	4a72      	ldr	r2, [pc, #456]	; (80141ec <lfs_dir_traverse+0x2d4>)
 8014024:	f240 314e 	movw	r1, #846	; 0x34e
 8014028:	4871      	ldr	r0, [pc, #452]	; (80141f0 <lfs_dir_traverse+0x2d8>)
 801402a:	f006 fea1 	bl	801ad70 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 801402e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014030:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8014034:	4613      	mov	r3, r2
 8014036:	011b      	lsls	r3, r3, #4
 8014038:	1a9b      	subs	r3, r3, r2
 801403a:	009b      	lsls	r3, r3, #2
 801403c:	33f0      	adds	r3, #240	; 0xf0
 801403e:	443b      	add	r3, r7
 8014040:	3b98      	subs	r3, #152	; 0x98
 8014042:	68ba      	ldr	r2, [r7, #8]
 8014044:	601a      	str	r2, [r3, #0]
 8014046:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801404a:	4613      	mov	r3, r2
 801404c:	011b      	lsls	r3, r3, #4
 801404e:	1a9b      	subs	r3, r3, r2
 8014050:	009b      	lsls	r3, r3, #2
 8014052:	33f0      	adds	r3, #240	; 0xf0
 8014054:	443b      	add	r3, r7
 8014056:	3b94      	subs	r3, #148	; 0x94
 8014058:	687a      	ldr	r2, [r7, #4]
 801405a:	601a      	str	r2, [r3, #0]
 801405c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8014060:	4613      	mov	r3, r2
 8014062:	011b      	lsls	r3, r3, #4
 8014064:	1a9b      	subs	r3, r3, r2
 8014066:	009b      	lsls	r3, r3, #2
 8014068:	33f0      	adds	r3, #240	; 0xf0
 801406a:	443b      	add	r3, r7
 801406c:	3b90      	subs	r3, #144	; 0x90
 801406e:	683a      	ldr	r2, [r7, #0]
 8014070:	601a      	str	r2, [r3, #0]
 8014072:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8014076:	4613      	mov	r3, r2
 8014078:	011b      	lsls	r3, r3, #4
 801407a:	1a9b      	subs	r3, r3, r2
 801407c:	009b      	lsls	r3, r3, #2
 801407e:	33f0      	adds	r3, #240	; 0xf0
 8014080:	443b      	add	r3, r7
 8014082:	3b8c      	subs	r3, #140	; 0x8c
 8014084:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8014088:	601a      	str	r2, [r3, #0]
 801408a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801408e:	4613      	mov	r3, r2
 8014090:	011b      	lsls	r3, r3, #4
 8014092:	1a9b      	subs	r3, r3, r2
 8014094:	009b      	lsls	r3, r3, #2
 8014096:	33f0      	adds	r3, #240	; 0xf0
 8014098:	443b      	add	r3, r7
 801409a:	3b88      	subs	r3, #136	; 0x88
 801409c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80140a0:	601a      	str	r2, [r3, #0]
 80140a2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80140a6:	4613      	mov	r3, r2
 80140a8:	011b      	lsls	r3, r3, #4
 80140aa:	1a9b      	subs	r3, r3, r2
 80140ac:	009b      	lsls	r3, r3, #2
 80140ae:	33f0      	adds	r3, #240	; 0xf0
 80140b0:	443b      	add	r3, r7
 80140b2:	3b84      	subs	r3, #132	; 0x84
 80140b4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80140b8:	601a      	str	r2, [r3, #0]
 80140ba:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80140be:	4613      	mov	r3, r2
 80140c0:	011b      	lsls	r3, r3, #4
 80140c2:	1a9b      	subs	r3, r3, r2
 80140c4:	009b      	lsls	r3, r3, #2
 80140c6:	33f0      	adds	r3, #240	; 0xf0
 80140c8:	443b      	add	r3, r7
 80140ca:	3b80      	subs	r3, #128	; 0x80
 80140cc:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80140d0:	601a      	str	r2, [r3, #0]
 80140d2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80140d6:	4613      	mov	r3, r2
 80140d8:	011b      	lsls	r3, r3, #4
 80140da:	1a9b      	subs	r3, r3, r2
 80140dc:	009b      	lsls	r3, r3, #2
 80140de:	33f0      	adds	r3, #240	; 0xf0
 80140e0:	443b      	add	r3, r7
 80140e2:	3b7c      	subs	r3, #124	; 0x7c
 80140e4:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 80140e8:	801a      	strh	r2, [r3, #0]
 80140ea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80140ee:	4613      	mov	r3, r2
 80140f0:	011b      	lsls	r3, r3, #4
 80140f2:	1a9b      	subs	r3, r3, r2
 80140f4:	009b      	lsls	r3, r3, #2
 80140f6:	33f0      	adds	r3, #240	; 0xf0
 80140f8:	443b      	add	r3, r7
 80140fa:	3b7a      	subs	r3, #122	; 0x7a
 80140fc:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8014100:	801a      	strh	r2, [r3, #0]
 8014102:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8014106:	4613      	mov	r3, r2
 8014108:	011b      	lsls	r3, r3, #4
 801410a:	1a9b      	subs	r3, r3, r2
 801410c:	009b      	lsls	r3, r3, #2
 801410e:	33f0      	adds	r3, #240	; 0xf0
 8014110:	443b      	add	r3, r7
 8014112:	3b78      	subs	r3, #120	; 0x78
 8014114:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8014118:	801a      	strh	r2, [r3, #0]
 801411a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801411e:	4613      	mov	r3, r2
 8014120:	011b      	lsls	r3, r3, #4
 8014122:	1a9b      	subs	r3, r3, r2
 8014124:	009b      	lsls	r3, r3, #2
 8014126:	33f0      	adds	r3, #240	; 0xf0
 8014128:	443b      	add	r3, r7
 801412a:	3b74      	subs	r3, #116	; 0x74
 801412c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8014130:	601a      	str	r2, [r3, #0]
 8014132:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8014136:	4613      	mov	r3, r2
 8014138:	011b      	lsls	r3, r3, #4
 801413a:	1a9b      	subs	r3, r3, r2
 801413c:	009b      	lsls	r3, r3, #2
 801413e:	33f0      	adds	r3, #240	; 0xf0
 8014140:	443b      	add	r3, r7
 8014142:	3b70      	subs	r3, #112	; 0x70
 8014144:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8014148:	601a      	str	r2, [r3, #0]
 801414a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801414e:	4613      	mov	r3, r2
 8014150:	011b      	lsls	r3, r3, #4
 8014152:	1a9b      	subs	r3, r3, r2
 8014154:	009b      	lsls	r3, r3, #2
 8014156:	33f0      	adds	r3, #240	; 0xf0
 8014158:	443b      	add	r3, r7
 801415a:	3b6c      	subs	r3, #108	; 0x6c
 801415c:	6019      	str	r1, [r3, #0]
 801415e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8014162:	4613      	mov	r3, r2
 8014164:	011b      	lsls	r3, r3, #4
 8014166:	1a9b      	subs	r3, r3, r2
 8014168:	009b      	lsls	r3, r3, #2
 801416a:	33f0      	adds	r3, #240	; 0xf0
 801416c:	443b      	add	r3, r7
 801416e:	3b68      	subs	r3, #104	; 0x68
 8014170:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8014174:	601a      	str	r2, [r3, #0]
 8014176:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801417a:	4613      	mov	r3, r2
 801417c:	011b      	lsls	r3, r3, #4
 801417e:	1a9b      	subs	r3, r3, r2
 8014180:	009b      	lsls	r3, r3, #2
 8014182:	33f0      	adds	r3, #240	; 0xf0
 8014184:	443b      	add	r3, r7
 8014186:	3b68      	subs	r3, #104	; 0x68
 8014188:	3304      	adds	r3, #4
 801418a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801418e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014192:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8014196:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801419a:	3301      	adds	r3, #1
 801419c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 80141a0:	2300      	movs	r3, #0
 80141a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 80141a6:	2300      	movs	r3, #0
 80141a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 80141ac:	2300      	movs	r3, #0
 80141ae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 80141b2:	2300      	movs	r3, #0
 80141b4:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 80141b8:	2300      	movs	r3, #0
 80141ba:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 80141be:	4b0d      	ldr	r3, [pc, #52]	; (80141f4 <lfs_dir_traverse+0x2dc>)
 80141c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 80141c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80141c8:	1e5a      	subs	r2, r3, #1
 80141ca:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80141ce:	4613      	mov	r3, r2
 80141d0:	011b      	lsls	r3, r3, #4
 80141d2:	1a9b      	subs	r3, r3, r2
 80141d4:	009b      	lsls	r3, r3, #2
 80141d6:	3328      	adds	r3, #40	; 0x28
 80141d8:	440b      	add	r3, r1
 80141da:	3304      	adds	r3, #4
 80141dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                continue;
 80141e0:	e19e      	b.n	8014520 <lfs_dir_traverse+0x608>
 80141e2:	bf00      	nop
 80141e4:	7ff00000 	.word	0x7ff00000
 80141e8:	08021c58 	.word	0x08021c58
 80141ec:	08022dac 	.word	0x08022dac
 80141f0:	08021b40 	.word	0x08021b40
 80141f4:	08013e61 	.word	0x08013e61
            }
        }

popped:
 80141f8:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 80141fa:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 80141fe:	f7ff f94f 	bl	80134a0 <lfs_tag_id>
 8014202:	4603      	mov	r3, r0
 8014204:	2b00      	cmp	r3, #0
 8014206:	d015      	beq.n	8014234 <lfs_dir_traverse+0x31c>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8014208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801420a:	4618      	mov	r0, r3
 801420c:	f7ff f948 	bl	80134a0 <lfs_tag_id>
 8014210:	4603      	mov	r3, r0
 8014212:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8014214:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8014218:	4293      	cmp	r3, r2
 801421a:	f200 817c 	bhi.w	8014516 <lfs_dir_traverse+0x5fe>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 801421e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014220:	4618      	mov	r0, r3
 8014222:	f7ff f93d 	bl	80134a0 <lfs_tag_id>
 8014226:	4603      	mov	r3, r0
 8014228:	461a      	mov	r2, r3
 801422a:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 801422e:	4293      	cmp	r3, r2
 8014230:	f240 8171 	bls.w	8014516 <lfs_dir_traverse+0x5fe>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8014234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014236:	4618      	mov	r0, r3
 8014238:	f7ff f908 	bl	801344c <lfs_tag_type3>
 801423c:	4603      	mov	r3, r0
 801423e:	2b00      	cmp	r3, #0
 8014240:	f43f ae74 	beq.w	8013f2c <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8014244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014246:	4618      	mov	r0, r3
 8014248:	f7ff f900 	bl	801344c <lfs_tag_type3>
 801424c:	4603      	mov	r3, r0
 801424e:	461a      	mov	r2, r3
 8014250:	f240 1301 	movw	r3, #257	; 0x101
 8014254:	429a      	cmp	r2, r3
 8014256:	f040 80e0 	bne.w	801441a <lfs_dir_traverse+0x502>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 801425a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801425e:	4ab1      	ldr	r2, [pc, #708]	; (8014524 <lfs_dir_traverse+0x60c>)
 8014260:	4293      	cmp	r3, r2
 8014262:	f000 815a 	beq.w	801451a <lfs_dir_traverse+0x602>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 8014266:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801426a:	4613      	mov	r3, r2
 801426c:	011b      	lsls	r3, r3, #4
 801426e:	1a9b      	subs	r3, r3, r2
 8014270:	009b      	lsls	r3, r3, #2
 8014272:	33f0      	adds	r3, #240	; 0xf0
 8014274:	443b      	add	r3, r7
 8014276:	3b98      	subs	r3, #152	; 0x98
 8014278:	4618      	mov	r0, r3
 801427a:	233c      	movs	r3, #60	; 0x3c
 801427c:	461a      	mov	r2, r3
 801427e:	2100      	movs	r1, #0
 8014280:	f007 ff12 	bl	801c0a8 <memset>
 8014284:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8014288:	4613      	mov	r3, r2
 801428a:	011b      	lsls	r3, r3, #4
 801428c:	1a9b      	subs	r3, r3, r2
 801428e:	009b      	lsls	r3, r3, #2
 8014290:	33f0      	adds	r3, #240	; 0xf0
 8014292:	443b      	add	r3, r7
 8014294:	3b98      	subs	r3, #152	; 0x98
 8014296:	68ba      	ldr	r2, [r7, #8]
 8014298:	601a      	str	r2, [r3, #0]
 801429a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801429e:	4613      	mov	r3, r2
 80142a0:	011b      	lsls	r3, r3, #4
 80142a2:	1a9b      	subs	r3, r3, r2
 80142a4:	009b      	lsls	r3, r3, #2
 80142a6:	33f0      	adds	r3, #240	; 0xf0
 80142a8:	443b      	add	r3, r7
 80142aa:	3b94      	subs	r3, #148	; 0x94
 80142ac:	687a      	ldr	r2, [r7, #4]
 80142ae:	601a      	str	r2, [r3, #0]
 80142b0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80142b4:	4613      	mov	r3, r2
 80142b6:	011b      	lsls	r3, r3, #4
 80142b8:	1a9b      	subs	r3, r3, r2
 80142ba:	009b      	lsls	r3, r3, #2
 80142bc:	33f0      	adds	r3, #240	; 0xf0
 80142be:	443b      	add	r3, r7
 80142c0:	3b90      	subs	r3, #144	; 0x90
 80142c2:	683a      	ldr	r2, [r7, #0]
 80142c4:	601a      	str	r2, [r3, #0]
 80142c6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80142ca:	4613      	mov	r3, r2
 80142cc:	011b      	lsls	r3, r3, #4
 80142ce:	1a9b      	subs	r3, r3, r2
 80142d0:	009b      	lsls	r3, r3, #2
 80142d2:	33f0      	adds	r3, #240	; 0xf0
 80142d4:	443b      	add	r3, r7
 80142d6:	3b8c      	subs	r3, #140	; 0x8c
 80142d8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80142dc:	601a      	str	r2, [r3, #0]
 80142de:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80142e2:	4613      	mov	r3, r2
 80142e4:	011b      	lsls	r3, r3, #4
 80142e6:	1a9b      	subs	r3, r3, r2
 80142e8:	009b      	lsls	r3, r3, #2
 80142ea:	33f0      	adds	r3, #240	; 0xf0
 80142ec:	443b      	add	r3, r7
 80142ee:	3b88      	subs	r3, #136	; 0x88
 80142f0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80142f4:	601a      	str	r2, [r3, #0]
 80142f6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80142fa:	4613      	mov	r3, r2
 80142fc:	011b      	lsls	r3, r3, #4
 80142fe:	1a9b      	subs	r3, r3, r2
 8014300:	009b      	lsls	r3, r3, #2
 8014302:	33f0      	adds	r3, #240	; 0xf0
 8014304:	443b      	add	r3, r7
 8014306:	3b84      	subs	r3, #132	; 0x84
 8014308:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801430c:	601a      	str	r2, [r3, #0]
 801430e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8014312:	4613      	mov	r3, r2
 8014314:	011b      	lsls	r3, r3, #4
 8014316:	1a9b      	subs	r3, r3, r2
 8014318:	009b      	lsls	r3, r3, #2
 801431a:	33f0      	adds	r3, #240	; 0xf0
 801431c:	443b      	add	r3, r7
 801431e:	3b80      	subs	r3, #128	; 0x80
 8014320:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8014324:	601a      	str	r2, [r3, #0]
 8014326:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801432a:	4613      	mov	r3, r2
 801432c:	011b      	lsls	r3, r3, #4
 801432e:	1a9b      	subs	r3, r3, r2
 8014330:	009b      	lsls	r3, r3, #2
 8014332:	33f0      	adds	r3, #240	; 0xf0
 8014334:	443b      	add	r3, r7
 8014336:	3b7c      	subs	r3, #124	; 0x7c
 8014338:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 801433c:	801a      	strh	r2, [r3, #0]
 801433e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8014342:	4613      	mov	r3, r2
 8014344:	011b      	lsls	r3, r3, #4
 8014346:	1a9b      	subs	r3, r3, r2
 8014348:	009b      	lsls	r3, r3, #2
 801434a:	33f0      	adds	r3, #240	; 0xf0
 801434c:	443b      	add	r3, r7
 801434e:	3b7a      	subs	r3, #122	; 0x7a
 8014350:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8014354:	801a      	strh	r2, [r3, #0]
 8014356:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801435a:	4613      	mov	r3, r2
 801435c:	011b      	lsls	r3, r3, #4
 801435e:	1a9b      	subs	r3, r3, r2
 8014360:	009b      	lsls	r3, r3, #2
 8014362:	33f0      	adds	r3, #240	; 0xf0
 8014364:	443b      	add	r3, r7
 8014366:	3b78      	subs	r3, #120	; 0x78
 8014368:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 801436c:	801a      	strh	r2, [r3, #0]
 801436e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8014372:	4613      	mov	r3, r2
 8014374:	011b      	lsls	r3, r3, #4
 8014376:	1a9b      	subs	r3, r3, r2
 8014378:	009b      	lsls	r3, r3, #2
 801437a:	33f0      	adds	r3, #240	; 0xf0
 801437c:	443b      	add	r3, r7
 801437e:	3b74      	subs	r3, #116	; 0x74
 8014380:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8014384:	601a      	str	r2, [r3, #0]
 8014386:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801438a:	4613      	mov	r3, r2
 801438c:	011b      	lsls	r3, r3, #4
 801438e:	1a9b      	subs	r3, r3, r2
 8014390:	009b      	lsls	r3, r3, #2
 8014392:	33f0      	adds	r3, #240	; 0xf0
 8014394:	443b      	add	r3, r7
 8014396:	3b70      	subs	r3, #112	; 0x70
 8014398:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801439c:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 801439e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80143a2:	3301      	adds	r3, #1
 80143a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 80143a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80143aa:	4618      	mov	r0, r3
 80143ac:	f7ff f888 	bl	80134c0 <lfs_tag_size>
 80143b0:	4603      	mov	r3, r0
 80143b2:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 80143b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80143b8:	4618      	mov	r0, r3
 80143ba:	f7ff f871 	bl	80134a0 <lfs_tag_id>
 80143be:	4603      	mov	r3, r0
 80143c0:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 80143c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80143c8:	60bb      	str	r3, [r7, #8]
            off = 0;
 80143ca:	2300      	movs	r3, #0
 80143cc:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 80143ce:	f04f 33ff 	mov.w	r3, #4294967295
 80143d2:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 80143d4:	2300      	movs	r3, #0
 80143d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 80143da:	2300      	movs	r3, #0
 80143dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 80143e0:	4b51      	ldr	r3, [pc, #324]	; (8014528 <lfs_dir_traverse+0x610>)
 80143e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 80143e6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80143ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 80143ee:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80143f2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 80143f6:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80143fa:	3301      	adds	r3, #1
 80143fc:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 8014400:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8014404:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8014408:	1ad3      	subs	r3, r2, r3
 801440a:	b29a      	uxth	r2, r3
 801440c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8014410:	4413      	add	r3, r2
 8014412:	b29b      	uxth	r3, r3
 8014414:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8014418:	e588      	b.n	8013f2c <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 801441a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801441c:	4618      	mov	r0, r3
 801441e:	f7ff f815 	bl	801344c <lfs_tag_type3>
 8014422:	4603      	mov	r3, r0
 8014424:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8014428:	d159      	bne.n	80144de <lfs_dir_traverse+0x5c6>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801442a:	2300      	movs	r3, #0
 801442c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8014430:	e04b      	b.n	80144ca <lfs_dir_traverse+0x5b2>
                const struct lfs_attr *a = buffer;
 8014432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014436:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801443a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801443e:	4613      	mov	r3, r2
 8014440:	005b      	lsls	r3, r3, #1
 8014442:	4413      	add	r3, r2
 8014444:	009b      	lsls	r3, r3, #2
 8014446:	461a      	mov	r2, r3
 8014448:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801444c:	4413      	add	r3, r2
 801444e:	781b      	ldrb	r3, [r3, #0]
 8014450:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8014454:	051c      	lsls	r4, r3, #20
 8014456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014458:	4618      	mov	r0, r3
 801445a:	f7ff f821 	bl	80134a0 <lfs_tag_id>
 801445e:	4603      	mov	r3, r0
 8014460:	461a      	mov	r2, r3
 8014462:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8014466:	4413      	add	r3, r2
 8014468:	029b      	lsls	r3, r3, #10
 801446a:	ea44 0103 	orr.w	r1, r4, r3
 801446e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8014472:	4613      	mov	r3, r2
 8014474:	005b      	lsls	r3, r3, #1
 8014476:	4413      	add	r3, r2
 8014478:	009b      	lsls	r3, r3, #2
 801447a:	461a      	mov	r2, r3
 801447c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014480:	4413      	add	r3, r2
 8014482:	689b      	ldr	r3, [r3, #8]
 8014484:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 8014486:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801448a:	4613      	mov	r3, r2
 801448c:	005b      	lsls	r3, r3, #1
 801448e:	4413      	add	r3, r2
 8014490:	009b      	lsls	r3, r3, #2
 8014492:	461a      	mov	r2, r3
 8014494:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014498:	4413      	add	r3, r2
 801449a:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801449c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80144a0:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80144a4:	4798      	blx	r3
 80144a6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 80144aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	da02      	bge.n	80144b8 <lfs_dir_traverse+0x5a0>
                    return res;
 80144b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80144b6:	e10b      	b.n	80146d0 <lfs_dir_traverse+0x7b8>
                }

                if (res) {
 80144b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d12e      	bne.n	801451e <lfs_dir_traverse+0x606>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 80144c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80144c4:	3301      	adds	r3, #1
 80144c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80144ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80144cc:	4618      	mov	r0, r3
 80144ce:	f7fe fff7 	bl	80134c0 <lfs_tag_size>
 80144d2:	4602      	mov	r2, r0
 80144d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80144d8:	4293      	cmp	r3, r2
 80144da:	d3aa      	bcc.n	8014432 <lfs_dir_traverse+0x51a>
 80144dc:	e526      	b.n	8013f2c <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 80144de:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 80144e2:	029a      	lsls	r2, r3, #10
 80144e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80144e6:	18d1      	adds	r1, r2, r3
 80144e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80144ec:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80144f0:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80144f4:	4798      	blx	r3
 80144f6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 80144fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80144fe:	2b00      	cmp	r3, #0
 8014500:	da02      	bge.n	8014508 <lfs_dir_traverse+0x5f0>
                return res;
 8014502:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014506:	e0e3      	b.n	80146d0 <lfs_dir_traverse+0x7b8>
            }

            if (res) {
 8014508:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801450c:	2b00      	cmp	r3, #0
 801450e:	d10d      	bne.n	801452c <lfs_dir_traverse+0x614>
 8014510:	e50c      	b.n	8013f2c <lfs_dir_traverse+0x14>
                continue;
 8014512:	bf00      	nop
 8014514:	e50a      	b.n	8013f2c <lfs_dir_traverse+0x14>
            continue;
 8014516:	bf00      	nop
 8014518:	e508      	b.n	8013f2c <lfs_dir_traverse+0x14>
                continue;
 801451a:	bf00      	nop
 801451c:	e506      	b.n	8013f2c <lfs_dir_traverse+0x14>
                    break;
 801451e:	bf00      	nop
        {
 8014520:	e504      	b.n	8013f2c <lfs_dir_traverse+0x14>
 8014522:	bf00      	nop
 8014524:	08013e61 	.word	0x08013e61
 8014528:	600ffc00 	.word	0x600ffc00
                break;
 801452c:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 801452e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014532:	2b00      	cmp	r3, #0
 8014534:	f000 80ca 	beq.w	80146cc <lfs_dir_traverse+0x7b4>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8014538:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801453c:	1e5a      	subs	r2, r3, #1
 801453e:	4613      	mov	r3, r2
 8014540:	011b      	lsls	r3, r3, #4
 8014542:	1a9b      	subs	r3, r3, r2
 8014544:	009b      	lsls	r3, r3, #2
 8014546:	33f0      	adds	r3, #240	; 0xf0
 8014548:	443b      	add	r3, r7
 801454a:	3b98      	subs	r3, #152	; 0x98
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 8014550:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014554:	1e5a      	subs	r2, r3, #1
 8014556:	4613      	mov	r3, r2
 8014558:	011b      	lsls	r3, r3, #4
 801455a:	1a9b      	subs	r3, r3, r2
 801455c:	009b      	lsls	r3, r3, #2
 801455e:	33f0      	adds	r3, #240	; 0xf0
 8014560:	443b      	add	r3, r7
 8014562:	3b94      	subs	r3, #148	; 0x94
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 8014568:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801456c:	1e5a      	subs	r2, r3, #1
 801456e:	4613      	mov	r3, r2
 8014570:	011b      	lsls	r3, r3, #4
 8014572:	1a9b      	subs	r3, r3, r2
 8014574:	009b      	lsls	r3, r3, #2
 8014576:	33f0      	adds	r3, #240	; 0xf0
 8014578:	443b      	add	r3, r7
 801457a:	3b90      	subs	r3, #144	; 0x90
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8014580:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014584:	1e5a      	subs	r2, r3, #1
 8014586:	4613      	mov	r3, r2
 8014588:	011b      	lsls	r3, r3, #4
 801458a:	1a9b      	subs	r3, r3, r2
 801458c:	009b      	lsls	r3, r3, #2
 801458e:	33f0      	adds	r3, #240	; 0xf0
 8014590:	443b      	add	r3, r7
 8014592:	3b8c      	subs	r3, #140	; 0x8c
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 801459a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801459e:	1e5a      	subs	r2, r3, #1
 80145a0:	4613      	mov	r3, r2
 80145a2:	011b      	lsls	r3, r3, #4
 80145a4:	1a9b      	subs	r3, r3, r2
 80145a6:	009b      	lsls	r3, r3, #2
 80145a8:	33f0      	adds	r3, #240	; 0xf0
 80145aa:	443b      	add	r3, r7
 80145ac:	3b88      	subs	r3, #136	; 0x88
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 80145b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80145b8:	1e5a      	subs	r2, r3, #1
 80145ba:	4613      	mov	r3, r2
 80145bc:	011b      	lsls	r3, r3, #4
 80145be:	1a9b      	subs	r3, r3, r2
 80145c0:	009b      	lsls	r3, r3, #2
 80145c2:	33f0      	adds	r3, #240	; 0xf0
 80145c4:	443b      	add	r3, r7
 80145c6:	3b84      	subs	r3, #132	; 0x84
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 80145ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80145d2:	1e5a      	subs	r2, r3, #1
 80145d4:	4613      	mov	r3, r2
 80145d6:	011b      	lsls	r3, r3, #4
 80145d8:	1a9b      	subs	r3, r3, r2
 80145da:	009b      	lsls	r3, r3, #2
 80145dc:	33f0      	adds	r3, #240	; 0xf0
 80145de:	443b      	add	r3, r7
 80145e0:	3b80      	subs	r3, #128	; 0x80
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 80145e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80145ec:	1e5a      	subs	r2, r3, #1
 80145ee:	4613      	mov	r3, r2
 80145f0:	011b      	lsls	r3, r3, #4
 80145f2:	1a9b      	subs	r3, r3, r2
 80145f4:	009b      	lsls	r3, r3, #2
 80145f6:	33f0      	adds	r3, #240	; 0xf0
 80145f8:	443b      	add	r3, r7
 80145fa:	3b7c      	subs	r3, #124	; 0x7c
 80145fc:	881b      	ldrh	r3, [r3, #0]
 80145fe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 8014602:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014606:	1e5a      	subs	r2, r3, #1
 8014608:	4613      	mov	r3, r2
 801460a:	011b      	lsls	r3, r3, #4
 801460c:	1a9b      	subs	r3, r3, r2
 801460e:	009b      	lsls	r3, r3, #2
 8014610:	33f0      	adds	r3, #240	; 0xf0
 8014612:	443b      	add	r3, r7
 8014614:	3b7a      	subs	r3, #122	; 0x7a
 8014616:	881b      	ldrh	r3, [r3, #0]
 8014618:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 801461c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014620:	1e5a      	subs	r2, r3, #1
 8014622:	4613      	mov	r3, r2
 8014624:	011b      	lsls	r3, r3, #4
 8014626:	1a9b      	subs	r3, r3, r2
 8014628:	009b      	lsls	r3, r3, #2
 801462a:	33f0      	adds	r3, #240	; 0xf0
 801462c:	443b      	add	r3, r7
 801462e:	3b78      	subs	r3, #120	; 0x78
 8014630:	881b      	ldrh	r3, [r3, #0]
 8014632:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 8014636:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801463a:	1e5a      	subs	r2, r3, #1
 801463c:	4613      	mov	r3, r2
 801463e:	011b      	lsls	r3, r3, #4
 8014640:	1a9b      	subs	r3, r3, r2
 8014642:	009b      	lsls	r3, r3, #2
 8014644:	33f0      	adds	r3, #240	; 0xf0
 8014646:	443b      	add	r3, r7
 8014648:	3b74      	subs	r3, #116	; 0x74
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 8014650:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014654:	1e5a      	subs	r2, r3, #1
 8014656:	4613      	mov	r3, r2
 8014658:	011b      	lsls	r3, r3, #4
 801465a:	1a9b      	subs	r3, r3, r2
 801465c:	009b      	lsls	r3, r3, #2
 801465e:	33f0      	adds	r3, #240	; 0xf0
 8014660:	443b      	add	r3, r7
 8014662:	3b70      	subs	r3, #112	; 0x70
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 801466a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801466e:	1e5a      	subs	r2, r3, #1
 8014670:	4613      	mov	r3, r2
 8014672:	011b      	lsls	r3, r3, #4
 8014674:	1a9b      	subs	r3, r3, r2
 8014676:	009b      	lsls	r3, r3, #2
 8014678:	33f0      	adds	r3, #240	; 0xf0
 801467a:	443b      	add	r3, r7
 801467c:	3b6c      	subs	r3, #108	; 0x6c
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 8014682:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014686:	1e5a      	subs	r2, r3, #1
 8014688:	4613      	mov	r3, r2
 801468a:	011b      	lsls	r3, r3, #4
 801468c:	1a9b      	subs	r3, r3, r2
 801468e:	009b      	lsls	r3, r3, #2
 8014690:	33f0      	adds	r3, #240	; 0xf0
 8014692:	443b      	add	r3, r7
 8014694:	3b68      	subs	r3, #104	; 0x68
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 801469c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80146a0:	1e5a      	subs	r2, r3, #1
 80146a2:	4613      	mov	r3, r2
 80146a4:	011b      	lsls	r3, r3, #4
 80146a6:	1a9b      	subs	r3, r3, r2
 80146a8:	009b      	lsls	r3, r3, #2
 80146aa:	33f0      	adds	r3, #240	; 0xf0
 80146ac:	443b      	add	r3, r7
 80146ae:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 80146b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80146b6:	3204      	adds	r2, #4
 80146b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80146bc:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 80146c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80146c4:	3b01      	subs	r3, #1
 80146c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 80146ca:	e596      	b.n	80141fa <lfs_dir_traverse+0x2e2>
    } else {
        return res;
 80146cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 80146d0:	4618      	mov	r0, r3
 80146d2:	37f4      	adds	r7, #244	; 0xf4
 80146d4:	46bd      	mov	sp, r7
 80146d6:	bd90      	pop	{r4, r7, pc}

080146d8 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 80146d8:	b590      	push	{r4, r7, lr}
 80146da:	b09f      	sub	sp, #124	; 0x7c
 80146dc:	af04      	add	r7, sp, #16
 80146de:	60f8      	str	r0, [r7, #12]
 80146e0:	60b9      	str	r1, [r7, #8]
 80146e2:	607a      	str	r2, [r7, #4]
 80146e4:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 80146e6:	f04f 33ff 	mov.w	r3, #4294967295
 80146ea:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	681a      	ldr	r2, [r3, #0]
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80146f4:	6a1b      	ldr	r3, [r3, #32]
 80146f6:	429a      	cmp	r2, r3
 80146f8:	d207      	bcs.n	801470a <lfs_dir_fetchmatch+0x32>
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	3304      	adds	r3, #4
 80146fe:	681a      	ldr	r2, [r3, #0]
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014704:	6a1b      	ldr	r3, [r3, #32]
 8014706:	429a      	cmp	r2, r3
 8014708:	d302      	bcc.n	8014710 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 801470a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 801470e:	e342      	b.n	8014d96 <lfs_dir_fetchmatch+0x6be>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8014710:	2300      	movs	r3, #0
 8014712:	633b      	str	r3, [r7, #48]	; 0x30
 8014714:	2300      	movs	r3, #0
 8014716:	637b      	str	r3, [r7, #52]	; 0x34
    int r = 0;
 8014718:	2300      	movs	r3, #0
 801471a:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 801471c:	2300      	movs	r3, #0
 801471e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014720:	e052      	b.n	80147c8 <lfs_dir_fetchmatch+0xf0>
        int err = lfs_bd_read(lfs,
 8014722:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8014724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014726:	009b      	lsls	r3, r3, #2
 8014728:	687a      	ldr	r2, [r7, #4]
 801472a:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 801472c:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 801472e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8014732:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014734:	0092      	lsls	r2, r2, #2
 8014736:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8014738:	2104      	movs	r1, #4
 801473a:	9103      	str	r1, [sp, #12]
 801473c:	9202      	str	r2, [sp, #8]
 801473e:	2200      	movs	r2, #0
 8014740:	9201      	str	r2, [sp, #4]
 8014742:	9300      	str	r3, [sp, #0]
 8014744:	2304      	movs	r3, #4
 8014746:	4602      	mov	r2, r0
 8014748:	2100      	movs	r1, #0
 801474a:	68f8      	ldr	r0, [r7, #12]
 801474c:	f7fe fa6e 	bl	8012c2c <lfs_bd_read>
 8014750:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 8014752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014754:	009b      	lsls	r3, r3, #2
 8014756:	3368      	adds	r3, #104	; 0x68
 8014758:	443b      	add	r3, r7
 801475a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 801475e:	4618      	mov	r0, r3
 8014760:	f7fe f9f8 	bl	8012b54 <lfs_fromle32>
 8014764:	4602      	mov	r2, r0
 8014766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014768:	009b      	lsls	r3, r3, #2
 801476a:	3368      	adds	r3, #104	; 0x68
 801476c:	443b      	add	r3, r7
 801476e:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 8014772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014774:	2b00      	cmp	r3, #0
 8014776:	d005      	beq.n	8014784 <lfs_dir_fetchmatch+0xac>
 8014778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801477a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 801477e:	d001      	beq.n	8014784 <lfs_dir_fetchmatch+0xac>
            return err;
 8014780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014782:	e308      	b.n	8014d96 <lfs_dir_fetchmatch+0x6be>
        }

        if (err != LFS_ERR_CORRUPT &&
 8014784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014786:	f113 0f54 	cmn.w	r3, #84	; 0x54
 801478a:	d01a      	beq.n	80147c2 <lfs_dir_fetchmatch+0xea>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 801478c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801478e:	009b      	lsls	r3, r3, #2
 8014790:	3368      	adds	r3, #104	; 0x68
 8014792:	443b      	add	r3, r7
 8014794:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8014798:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801479a:	3301      	adds	r3, #1
 801479c:	2b00      	cmp	r3, #0
 801479e:	f003 0301 	and.w	r3, r3, #1
 80147a2:	bfb8      	it	lt
 80147a4:	425b      	neglt	r3, r3
 80147a6:	009b      	lsls	r3, r3, #2
 80147a8:	3368      	adds	r3, #104	; 0x68
 80147aa:	443b      	add	r3, r7
 80147ac:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80147b0:	4619      	mov	r1, r3
 80147b2:	4610      	mov	r0, r2
 80147b4:	f7fe f9c0 	bl	8012b38 <lfs_scmp>
 80147b8:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	dd01      	ble.n	80147c2 <lfs_dir_fetchmatch+0xea>
            r = i;
 80147be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80147c0:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 80147c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80147c4:	3301      	adds	r3, #1
 80147c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80147c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80147ca:	2b01      	cmp	r3, #1
 80147cc:	dda9      	ble.n	8014722 <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 80147ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	f003 0301 	and.w	r3, r3, #1
 80147d6:	bfb8      	it	lt
 80147d8:	425b      	neglt	r3, r3
 80147da:	009b      	lsls	r3, r3, #2
 80147dc:	687a      	ldr	r2, [r7, #4]
 80147de:	4413      	add	r3, r2
 80147e0:	681a      	ldr	r2, [r3, #0]
 80147e2:	68bb      	ldr	r3, [r7, #8]
 80147e4:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 80147e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80147e8:	3301      	adds	r3, #1
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	f003 0301 	and.w	r3, r3, #1
 80147f0:	bfb8      	it	lt
 80147f2:	425b      	neglt	r3, r3
 80147f4:	009b      	lsls	r3, r3, #2
 80147f6:	687a      	ldr	r2, [r7, #4]
 80147f8:	4413      	add	r3, r2
 80147fa:	681a      	ldr	r2, [r3, #0]
 80147fc:	68bb      	ldr	r3, [r7, #8]
 80147fe:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8014800:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014802:	2b00      	cmp	r3, #0
 8014804:	f003 0301 	and.w	r3, r3, #1
 8014808:	bfb8      	it	lt
 801480a:	425b      	neglt	r3, r3
 801480c:	009b      	lsls	r3, r3, #2
 801480e:	3368      	adds	r3, #104	; 0x68
 8014810:	443b      	add	r3, r7
 8014812:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8014816:	68bb      	ldr	r3, [r7, #8]
 8014818:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 801481a:	68bb      	ldr	r3, [r7, #8]
 801481c:	2200      	movs	r2, #0
 801481e:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8014820:	2300      	movs	r3, #0
 8014822:	65bb      	str	r3, [r7, #88]	; 0x58
 8014824:	e2a3      	b.n	8014d6e <lfs_dir_fetchmatch+0x696>
        lfs_off_t off = 0;
 8014826:	2300      	movs	r3, #0
 8014828:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 801482a:	f04f 33ff 	mov.w	r3, #4294967295
 801482e:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 8014830:	2300      	movs	r3, #0
 8014832:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8014836:	4a96      	ldr	r2, [pc, #600]	; (8014a90 <lfs_dir_fetchmatch+0x3b8>)
 8014838:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801483c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014840:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8014844:	2300      	movs	r3, #0
 8014846:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 801484a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801484c:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 801484e:	68bb      	ldr	r3, [r7, #8]
 8014850:	689b      	ldr	r3, [r3, #8]
 8014852:	4618      	mov	r0, r3
 8014854:	f7fe f989 	bl	8012b6a <lfs_tole32>
 8014858:	4602      	mov	r2, r0
 801485a:	68bb      	ldr	r3, [r7, #8]
 801485c:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 801485e:	68bb      	ldr	r3, [r7, #8]
 8014860:	3308      	adds	r3, #8
 8014862:	2204      	movs	r2, #4
 8014864:	4619      	mov	r1, r3
 8014866:	f04f 30ff 	mov.w	r0, #4294967295
 801486a:	f004 ff05 	bl	8019678 <lfs_crc>
 801486e:	4603      	mov	r3, r0
 8014870:	627b      	str	r3, [r7, #36]	; 0x24
        dir->rev = lfs_fromle32(dir->rev);
 8014872:	68bb      	ldr	r3, [r7, #8]
 8014874:	689b      	ldr	r3, [r3, #8]
 8014876:	4618      	mov	r0, r3
 8014878:	f7fe f96c 	bl	8012b54 <lfs_fromle32>
 801487c:	4602      	mov	r2, r0
 801487e:	68bb      	ldr	r3, [r7, #8]
 8014880:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8014882:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8014884:	f7fe fe29 	bl	80134da <lfs_tag_dsize>
 8014888:	4602      	mov	r2, r0
 801488a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801488c:	4413      	add	r3, r2
 801488e:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 8014890:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014896:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 8014898:	68bb      	ldr	r3, [r7, #8]
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	2204      	movs	r2, #4
 801489e:	9203      	str	r2, [sp, #12]
 80148a0:	f107 0220 	add.w	r2, r7, #32
 80148a4:	9202      	str	r2, [sp, #8]
 80148a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80148a8:	9201      	str	r2, [sp, #4]
 80148aa:	9300      	str	r3, [sp, #0]
 80148ac:	4603      	mov	r3, r0
 80148ae:	460a      	mov	r2, r1
 80148b0:	2100      	movs	r1, #0
 80148b2:	68f8      	ldr	r0, [r7, #12]
 80148b4:	f7fe f9ba 	bl	8012c2c <lfs_bd_read>
 80148b8:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 80148ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d009      	beq.n	80148d4 <lfs_dir_fetchmatch+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 80148c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80148c2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80148c6:	d103      	bne.n	80148d0 <lfs_dir_fetchmatch+0x1f8>
                    // can't continue?
                    dir->erased = false;
 80148c8:	68bb      	ldr	r3, [r7, #8]
 80148ca:	2200      	movs	r2, #0
 80148cc:	759a      	strb	r2, [r3, #22]
                    break;
 80148ce:	e1d6      	b.n	8014c7e <lfs_dir_fetchmatch+0x5a6>
                }
                return err;
 80148d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80148d2:	e260      	b.n	8014d96 <lfs_dir_fetchmatch+0x6be>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 80148d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148d6:	f107 0120 	add.w	r1, r7, #32
 80148da:	2204      	movs	r2, #4
 80148dc:	4618      	mov	r0, r3
 80148de:	f004 fecb 	bl	8019678 <lfs_crc>
 80148e2:	4603      	mov	r3, r0
 80148e4:	627b      	str	r3, [r7, #36]	; 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 80148e6:	6a3b      	ldr	r3, [r7, #32]
 80148e8:	4618      	mov	r0, r3
 80148ea:	f7fe f94a 	bl	8012b82 <lfs_frombe32>
 80148ee:	4602      	mov	r2, r0
 80148f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148f2:	4053      	eors	r3, r2
 80148f4:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 80148f6:	6a3b      	ldr	r3, [r7, #32]
 80148f8:	4618      	mov	r0, r3
 80148fa:	f7fe fd76 	bl	80133ea <lfs_tag_isvalid>
 80148fe:	4603      	mov	r3, r0
 8014900:	f083 0301 	eor.w	r3, r3, #1
 8014904:	b2db      	uxtb	r3, r3
 8014906:	2b00      	cmp	r3, #0
 8014908:	d01b      	beq.n	8014942 <lfs_dir_fetchmatch+0x26a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 801490a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801490c:	f7fe fd8e 	bl	801342c <lfs_tag_type1>
 8014910:	4603      	mov	r3, r0
 8014912:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8014916:	d10d      	bne.n	8014934 <lfs_dir_fetchmatch+0x25c>
                        dir->off % lfs->cfg->prog_size == 0);
 8014918:	68bb      	ldr	r3, [r7, #8]
 801491a:	68db      	ldr	r3, [r3, #12]
 801491c:	68fa      	ldr	r2, [r7, #12]
 801491e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8014920:	6992      	ldr	r2, [r2, #24]
 8014922:	fbb3 f1f2 	udiv	r1, r3, r2
 8014926:	fb01 f202 	mul.w	r2, r1, r2
 801492a:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 801492c:	2b00      	cmp	r3, #0
 801492e:	d101      	bne.n	8014934 <lfs_dir_fetchmatch+0x25c>
 8014930:	2301      	movs	r3, #1
 8014932:	e000      	b.n	8014936 <lfs_dir_fetchmatch+0x25e>
 8014934:	2300      	movs	r3, #0
 8014936:	f003 0301 	and.w	r3, r3, #1
 801493a:	b2da      	uxtb	r2, r3
 801493c:	68bb      	ldr	r3, [r7, #8]
 801493e:	759a      	strb	r2, [r3, #22]
                break;
 8014940:	e19d      	b.n	8014c7e <lfs_dir_fetchmatch+0x5a6>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8014942:	6a3b      	ldr	r3, [r7, #32]
 8014944:	4618      	mov	r0, r3
 8014946:	f7fe fdc8 	bl	80134da <lfs_tag_dsize>
 801494a:	4602      	mov	r2, r0
 801494c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801494e:	441a      	add	r2, r3
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014954:	69db      	ldr	r3, [r3, #28]
 8014956:	429a      	cmp	r2, r3
 8014958:	d903      	bls.n	8014962 <lfs_dir_fetchmatch+0x28a>
                dir->erased = false;
 801495a:	68bb      	ldr	r3, [r7, #8]
 801495c:	2200      	movs	r2, #0
 801495e:	759a      	strb	r2, [r3, #22]
                break;
 8014960:	e18d      	b.n	8014c7e <lfs_dir_fetchmatch+0x5a6>
            }

            ptag = tag;
 8014962:	6a3b      	ldr	r3, [r7, #32]
 8014964:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 8014966:	6a3b      	ldr	r3, [r7, #32]
 8014968:	4618      	mov	r0, r3
 801496a:	f7fe fd5f 	bl	801342c <lfs_tag_type1>
 801496e:	4603      	mov	r3, r0
 8014970:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8014974:	d164      	bne.n	8014a40 <lfs_dir_fetchmatch+0x368>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8014976:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801497c:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 801497e:	68bb      	ldr	r3, [r7, #8]
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014984:	3204      	adds	r2, #4
 8014986:	2104      	movs	r1, #4
 8014988:	9103      	str	r1, [sp, #12]
 801498a:	f107 011c 	add.w	r1, r7, #28
 801498e:	9102      	str	r1, [sp, #8]
 8014990:	9201      	str	r2, [sp, #4]
 8014992:	9300      	str	r3, [sp, #0]
 8014994:	4623      	mov	r3, r4
 8014996:	4602      	mov	r2, r0
 8014998:	2100      	movs	r1, #0
 801499a:	68f8      	ldr	r0, [r7, #12]
 801499c:	f7fe f946 	bl	8012c2c <lfs_bd_read>
 80149a0:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 80149a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d009      	beq.n	80149bc <lfs_dir_fetchmatch+0x2e4>
                    if (err == LFS_ERR_CORRUPT) {
 80149a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149aa:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80149ae:	d103      	bne.n	80149b8 <lfs_dir_fetchmatch+0x2e0>
                        dir->erased = false;
 80149b0:	68bb      	ldr	r3, [r7, #8]
 80149b2:	2200      	movs	r2, #0
 80149b4:	759a      	strb	r2, [r3, #22]
                        break;
 80149b6:	e162      	b.n	8014c7e <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 80149b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 80149ba:	e1ec      	b.n	8014d96 <lfs_dir_fetchmatch+0x6be>
                }
                dcrc = lfs_fromle32(dcrc);
 80149bc:	69fb      	ldr	r3, [r7, #28]
 80149be:	4618      	mov	r0, r3
 80149c0:	f7fe f8c8 	bl	8012b54 <lfs_fromle32>
 80149c4:	4603      	mov	r3, r0
 80149c6:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 80149c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80149ca:	69fb      	ldr	r3, [r7, #28]
 80149cc:	429a      	cmp	r2, r3
 80149ce:	d003      	beq.n	80149d8 <lfs_dir_fetchmatch+0x300>
                    dir->erased = false;
 80149d0:	68bb      	ldr	r3, [r7, #8]
 80149d2:	2200      	movs	r2, #0
 80149d4:	759a      	strb	r2, [r3, #22]
                    break;
 80149d6:	e152      	b.n	8014c7e <lfs_dir_fetchmatch+0x5a6>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 80149d8:	6a3b      	ldr	r3, [r7, #32]
 80149da:	4618      	mov	r0, r3
 80149dc:	f7fe fd46 	bl	801346c <lfs_tag_chunk>
 80149e0:	4603      	mov	r3, r0
 80149e2:	07db      	lsls	r3, r3, #31
 80149e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80149e6:	4053      	eors	r3, r2
 80149e8:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149ee:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80149f2:	2204      	movs	r2, #4
 80149f4:	4618      	mov	r0, r3
 80149f6:	f004 fe3f 	bl	8019678 <lfs_crc>
 80149fa:	4602      	mov	r2, r0
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8014a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a02:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 8014a04:	6a3b      	ldr	r3, [r7, #32]
 8014a06:	4618      	mov	r0, r3
 8014a08:	f7fe fd67 	bl	80134da <lfs_tag_dsize>
 8014a0c:	4602      	mov	r2, r0
 8014a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a10:	441a      	add	r2, r3
 8014a12:	68bb      	ldr	r3, [r7, #8]
 8014a14:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8014a16:	68bb      	ldr	r3, [r7, #8]
 8014a18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014a1a:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 8014a1c:	68bb      	ldr	r3, [r7, #8]
 8014a1e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014a22:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8014a24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014a26:	68bb      	ldr	r3, [r7, #8]
 8014a28:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8014a2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014a2c:	68bb      	ldr	r3, [r7, #8]
 8014a2e:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8014a30:	68bb      	ldr	r3, [r7, #8]
 8014a32:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8014a36:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 8014a38:	f04f 33ff 	mov.w	r3, #4294967295
 8014a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8014a3e:	e720      	b.n	8014882 <lfs_dir_fetchmatch+0x1aa>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8014a40:	2304      	movs	r3, #4
 8014a42:	647b      	str	r3, [r7, #68]	; 0x44
 8014a44:	e032      	b.n	8014aac <lfs_dir_fetchmatch+0x3d4>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 8014a46:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014a4c:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8014a4e:	68bb      	ldr	r3, [r7, #8]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014a54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014a56:	440a      	add	r2, r1
 8014a58:	2101      	movs	r1, #1
 8014a5a:	9103      	str	r1, [sp, #12]
 8014a5c:	f107 011b 	add.w	r1, r7, #27
 8014a60:	9102      	str	r1, [sp, #8]
 8014a62:	9201      	str	r2, [sp, #4]
 8014a64:	9300      	str	r3, [sp, #0]
 8014a66:	4623      	mov	r3, r4
 8014a68:	4602      	mov	r2, r0
 8014a6a:	2100      	movs	r1, #0
 8014a6c:	68f8      	ldr	r0, [r7, #12]
 8014a6e:	f7fe f8dd 	bl	8012c2c <lfs_bd_read>
 8014a72:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 8014a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d00c      	beq.n	8014a94 <lfs_dir_fetchmatch+0x3bc>
                    if (err == LFS_ERR_CORRUPT) {
 8014a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a7c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8014a80:	d103      	bne.n	8014a8a <lfs_dir_fetchmatch+0x3b2>
                        dir->erased = false;
 8014a82:	68bb      	ldr	r3, [r7, #8]
 8014a84:	2200      	movs	r2, #0
 8014a86:	759a      	strb	r2, [r3, #22]
 8014a88:	e018      	b.n	8014abc <lfs_dir_fetchmatch+0x3e4>
                        break;
                    }
                    return err;
 8014a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 8014a8c:	e183      	b.n	8014d96 <lfs_dir_fetchmatch+0x6be>
 8014a8e:	bf00      	nop
 8014a90:	08021c98 	.word	0x08021c98
                }

                crc = lfs_crc(crc, &dat, 1);
 8014a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a96:	f107 011b 	add.w	r1, r7, #27
 8014a9a:	2201      	movs	r2, #1
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	f004 fdeb 	bl	8019678 <lfs_crc>
 8014aa2:	4603      	mov	r3, r0
 8014aa4:	627b      	str	r3, [r7, #36]	; 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8014aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014aa8:	3301      	adds	r3, #1
 8014aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8014aac:	6a3b      	ldr	r3, [r7, #32]
 8014aae:	4618      	mov	r0, r3
 8014ab0:	f7fe fd13 	bl	80134da <lfs_tag_dsize>
 8014ab4:	4602      	mov	r2, r0
 8014ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ab8:	4293      	cmp	r3, r2
 8014aba:	d3c4      	bcc.n	8014a46 <lfs_dir_fetchmatch+0x36e>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8014abc:	6a3b      	ldr	r3, [r7, #32]
 8014abe:	4618      	mov	r0, r3
 8014ac0:	f7fe fcb4 	bl	801342c <lfs_tag_type1>
 8014ac4:	4603      	mov	r3, r0
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d113      	bne.n	8014af2 <lfs_dir_fetchmatch+0x41a>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8014aca:	6a3b      	ldr	r3, [r7, #32]
 8014acc:	4618      	mov	r0, r3
 8014ace:	f7fe fce7 	bl	80134a0 <lfs_tag_id>
 8014ad2:	4603      	mov	r3, r0
 8014ad4:	461a      	mov	r2, r3
 8014ad6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014ada:	4293      	cmp	r3, r2
 8014adc:	f200 8083 	bhi.w	8014be6 <lfs_dir_fetchmatch+0x50e>
                    tempcount = lfs_tag_id(tag) + 1;
 8014ae0:	6a3b      	ldr	r3, [r7, #32]
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	f7fe fcdc 	bl	80134a0 <lfs_tag_id>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	3301      	adds	r3, #1
 8014aec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8014af0:	e079      	b.n	8014be6 <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8014af2:	6a3b      	ldr	r3, [r7, #32]
 8014af4:	4618      	mov	r0, r3
 8014af6:	f7fe fc99 	bl	801342c <lfs_tag_type1>
 8014afa:	4603      	mov	r3, r0
 8014afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014b00:	d134      	bne.n	8014b6c <lfs_dir_fetchmatch+0x494>
                tempcount += lfs_tag_splice(tag);
 8014b02:	6a3b      	ldr	r3, [r7, #32]
 8014b04:	4618      	mov	r0, r3
 8014b06:	f7fe fcbe 	bl	8013486 <lfs_tag_splice>
 8014b0a:	4603      	mov	r3, r0
 8014b0c:	b29a      	uxth	r2, r3
 8014b0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014b12:	4413      	add	r3, r2
 8014b14:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8014b18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014b1a:	4ba1      	ldr	r3, [pc, #644]	; (8014da0 <lfs_dir_fetchmatch+0x6c8>)
 8014b1c:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8014b1e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8014b22:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8014b26:	6a3a      	ldr	r2, [r7, #32]
 8014b28:	4293      	cmp	r3, r2
 8014b2a:	d104      	bne.n	8014b36 <lfs_dir_fetchmatch+0x45e>
                    tempbesttag |= 0x80000000;
 8014b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014b32:	64bb      	str	r3, [r7, #72]	; 0x48
 8014b34:	e057      	b.n	8014be6 <lfs_dir_fetchmatch+0x50e>
                } else if (tempbesttag != -1 &&
 8014b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b3c:	d053      	beq.n	8014be6 <lfs_dir_fetchmatch+0x50e>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8014b3e:	6a3b      	ldr	r3, [r7, #32]
 8014b40:	4618      	mov	r0, r3
 8014b42:	f7fe fcad 	bl	80134a0 <lfs_tag_id>
 8014b46:	4603      	mov	r3, r0
 8014b48:	461c      	mov	r4, r3
 8014b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	f7fe fca7 	bl	80134a0 <lfs_tag_id>
 8014b52:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8014b54:	429c      	cmp	r4, r3
 8014b56:	d846      	bhi.n	8014be6 <lfs_dir_fetchmatch+0x50e>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8014b58:	6a3b      	ldr	r3, [r7, #32]
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	f7fe fc93 	bl	8013486 <lfs_tag_splice>
 8014b60:	4603      	mov	r3, r0
 8014b62:	029a      	lsls	r2, r3, #10
 8014b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b66:	4413      	add	r3, r2
 8014b68:	64bb      	str	r3, [r7, #72]	; 0x48
 8014b6a:	e03c      	b.n	8014be6 <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8014b6c:	6a3b      	ldr	r3, [r7, #32]
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f7fe fc5c 	bl	801342c <lfs_tag_type1>
 8014b74:	4603      	mov	r3, r0
 8014b76:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8014b7a:	d134      	bne.n	8014be6 <lfs_dir_fetchmatch+0x50e>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8014b7c:	6a3b      	ldr	r3, [r7, #32]
 8014b7e:	4618      	mov	r0, r3
 8014b80:	f7fe fc74 	bl	801346c <lfs_tag_chunk>
 8014b84:	4603      	mov	r3, r0
 8014b86:	f003 0301 	and.w	r3, r3, #1
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	bf14      	ite	ne
 8014b8e:	2301      	movne	r3, #1
 8014b90:	2300      	moveq	r3, #0
 8014b92:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 8014b96:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014b9c:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8014b9e:	68bb      	ldr	r3, [r7, #8]
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014ba4:	3204      	adds	r2, #4
 8014ba6:	2108      	movs	r1, #8
 8014ba8:	9103      	str	r1, [sp, #12]
 8014baa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8014bae:	9102      	str	r1, [sp, #8]
 8014bb0:	9201      	str	r2, [sp, #4]
 8014bb2:	9300      	str	r3, [sp, #0]
 8014bb4:	4623      	mov	r3, r4
 8014bb6:	4602      	mov	r2, r0
 8014bb8:	2100      	movs	r1, #0
 8014bba:	68f8      	ldr	r0, [r7, #12]
 8014bbc:	f7fe f836 	bl	8012c2c <lfs_bd_read>
 8014bc0:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8014bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d009      	beq.n	8014bdc <lfs_dir_fetchmatch+0x504>
                    if (err == LFS_ERR_CORRUPT) {
 8014bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014bca:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8014bce:	d103      	bne.n	8014bd8 <lfs_dir_fetchmatch+0x500>
                        dir->erased = false;
 8014bd0:	68bb      	ldr	r3, [r7, #8]
 8014bd2:	2200      	movs	r2, #0
 8014bd4:	759a      	strb	r2, [r3, #22]
                        break;
 8014bd6:	e052      	b.n	8014c7e <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 8014bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014bda:	e0dc      	b.n	8014d96 <lfs_dir_fetchmatch+0x6be>
                }
                lfs_pair_fromle32(temptail);
 8014bdc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014be0:	4618      	mov	r0, r3
 8014be2:	f7fe fbce 	bl	8013382 <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8014be6:	6a3a      	ldr	r2, [r7, #32]
 8014be8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014bea:	405a      	eors	r2, r3
 8014bec:	683b      	ldr	r3, [r7, #0]
 8014bee:	4013      	ands	r3, r2
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	f47f ae46 	bne.w	8014882 <lfs_dir_fetchmatch+0x1aa>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8014bf6:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8014bf8:	68bb      	ldr	r3, [r7, #8]
 8014bfa:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8014bfc:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 8014bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c00:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8014c02:	617b      	str	r3, [r7, #20]
 8014c04:	f107 0210 	add.w	r2, r7, #16
 8014c08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014c0c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8014c10:	4798      	blx	r3
 8014c12:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 8014c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	da09      	bge.n	8014c2e <lfs_dir_fetchmatch+0x556>
                    if (res == LFS_ERR_CORRUPT) {
 8014c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c1c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8014c20:	d103      	bne.n	8014c2a <lfs_dir_fetchmatch+0x552>
                        dir->erased = false;
 8014c22:	68bb      	ldr	r3, [r7, #8]
 8014c24:	2200      	movs	r2, #0
 8014c26:	759a      	strb	r2, [r3, #22]
 8014c28:	e029      	b.n	8014c7e <lfs_dir_fetchmatch+0x5a6>
                        break;
                    }
                    return res;
 8014c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 8014c2c:	e0b3      	b.n	8014d96 <lfs_dir_fetchmatch+0x6be>
                }

                if (res == LFS_CMP_EQ) {
 8014c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d102      	bne.n	8014c3a <lfs_dir_fetchmatch+0x562>
                    // found a match
                    tempbesttag = tag;
 8014c34:	6a3b      	ldr	r3, [r7, #32]
 8014c36:	64bb      	str	r3, [r7, #72]	; 0x48
 8014c38:	e623      	b.n	8014882 <lfs_dir_fetchmatch+0x1aa>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8014c3a:	6a3a      	ldr	r2, [r7, #32]
 8014c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c3e:	405a      	eors	r2, r3
 8014c40:	4b58      	ldr	r3, [pc, #352]	; (8014da4 <lfs_dir_fetchmatch+0x6cc>)
 8014c42:	4013      	ands	r3, r2
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d103      	bne.n	8014c50 <lfs_dir_fetchmatch+0x578>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8014c48:	f04f 33ff 	mov.w	r3, #4294967295
 8014c4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8014c4e:	e618      	b.n	8014882 <lfs_dir_fetchmatch+0x1aa>
                } else if (res == LFS_CMP_GT &&
 8014c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c52:	2b02      	cmp	r3, #2
 8014c54:	f47f ae15 	bne.w	8014882 <lfs_dir_fetchmatch+0x1aa>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8014c58:	6a3b      	ldr	r3, [r7, #32]
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	f7fe fc20 	bl	80134a0 <lfs_tag_id>
 8014c60:	4603      	mov	r3, r0
 8014c62:	461c      	mov	r4, r3
 8014c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c66:	4618      	mov	r0, r3
 8014c68:	f7fe fc1a 	bl	80134a0 <lfs_tag_id>
 8014c6c:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8014c6e:	429c      	cmp	r4, r3
 8014c70:	f63f ae07 	bhi.w	8014882 <lfs_dir_fetchmatch+0x1aa>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8014c74:	6a3b      	ldr	r3, [r7, #32]
 8014c76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014c7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8014c7c:	e601      	b.n	8014882 <lfs_dir_fetchmatch+0x1aa>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 8014c7e:	68bb      	ldr	r3, [r7, #8]
 8014c80:	68db      	ldr	r3, [r3, #12]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d100      	bne.n	8014c88 <lfs_dir_fetchmatch+0x5b0>
 8014c86:	e05d      	b.n	8014d44 <lfs_dir_fetchmatch+0x66c>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	333c      	adds	r3, #60	; 0x3c
 8014c8c:	68ba      	ldr	r2, [r7, #8]
 8014c8e:	4611      	mov	r1, r2
 8014c90:	4618      	mov	r0, r3
 8014c92:	f7fe fcad 	bl	80135f0 <lfs_gstate_hasmovehere>
 8014c96:	4603      	mov	r3, r0
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d028      	beq.n	8014cee <lfs_dir_fetchmatch+0x616>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	f7fe fbfd 	bl	80134a0 <lfs_tag_id>
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	461c      	mov	r4, r3
 8014caa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014cac:	4618      	mov	r0, r3
 8014cae:	f7fe fbf7 	bl	80134a0 <lfs_tag_id>
 8014cb2:	4603      	mov	r3, r0
 8014cb4:	429c      	cmp	r4, r3
 8014cb6:	d104      	bne.n	8014cc2 <lfs_dir_fetchmatch+0x5ea>
                    besttag |= 0x80000000;
 8014cb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014cba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014cbe:	667b      	str	r3, [r7, #100]	; 0x64
 8014cc0:	e015      	b.n	8014cee <lfs_dir_fetchmatch+0x616>
                } else if (besttag != -1 &&
 8014cc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cc8:	d011      	beq.n	8014cee <lfs_dir_fetchmatch+0x616>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014cce:	4618      	mov	r0, r3
 8014cd0:	f7fe fbe6 	bl	80134a0 <lfs_tag_id>
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	461c      	mov	r4, r3
 8014cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014cda:	4618      	mov	r0, r3
 8014cdc:	f7fe fbe0 	bl	80134a0 <lfs_tag_id>
 8014ce0:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 8014ce2:	429c      	cmp	r4, r3
 8014ce4:	d203      	bcs.n	8014cee <lfs_dir_fetchmatch+0x616>
                    besttag -= LFS_MKTAG(0, 1, 0);
 8014ce6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014ce8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8014cec:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 8014cee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d00f      	beq.n	8014d14 <lfs_dir_fetchmatch+0x63c>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8014cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	f7fe fbd2 	bl	80134a0 <lfs_tag_id>
 8014cfc:	4603      	mov	r3, r0
 8014cfe:	461a      	mov	r2, r3
 8014d00:	68bb      	ldr	r3, [r7, #8]
 8014d02:	8a9b      	ldrh	r3, [r3, #20]
 8014d04:	4619      	mov	r1, r3
 8014d06:	4610      	mov	r0, r2
 8014d08:	f7fd feb4 	bl	8012a74 <lfs_min>
 8014d0c:	4603      	mov	r3, r0
 8014d0e:	b29a      	uxth	r2, r3
 8014d10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014d12:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 8014d14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014d16:	4618      	mov	r0, r3
 8014d18:	f7fe fb67 	bl	80133ea <lfs_tag_isvalid>
 8014d1c:	4603      	mov	r3, r0
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d001      	beq.n	8014d26 <lfs_dir_fetchmatch+0x64e>
                return besttag;
 8014d22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014d24:	e037      	b.n	8014d96 <lfs_dir_fetchmatch+0x6be>
            } else if (lfs_tag_id(besttag) < dir->count) {
 8014d26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014d28:	4618      	mov	r0, r3
 8014d2a:	f7fe fbb9 	bl	80134a0 <lfs_tag_id>
 8014d2e:	4603      	mov	r3, r0
 8014d30:	461a      	mov	r2, r3
 8014d32:	68bb      	ldr	r3, [r7, #8]
 8014d34:	8a9b      	ldrh	r3, [r3, #20]
 8014d36:	429a      	cmp	r2, r3
 8014d38:	d202      	bcs.n	8014d40 <lfs_dir_fetchmatch+0x668>
                return LFS_ERR_NOENT;
 8014d3a:	f06f 0301 	mvn.w	r3, #1
 8014d3e:	e02a      	b.n	8014d96 <lfs_dir_fetchmatch+0x6be>
            } else {
                return 0;
 8014d40:	2300      	movs	r3, #0
 8014d42:	e028      	b.n	8014d96 <lfs_dir_fetchmatch+0x6be>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 8014d44:	68bb      	ldr	r3, [r7, #8]
 8014d46:	4618      	mov	r0, r3
 8014d48:	f7fe fa94 	bl	8013274 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 8014d4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014d4e:	3301      	adds	r3, #1
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	f003 0301 	and.w	r3, r3, #1
 8014d56:	bfb8      	it	lt
 8014d58:	425b      	neglt	r3, r3
 8014d5a:	009b      	lsls	r3, r3, #2
 8014d5c:	3368      	adds	r3, #104	; 0x68
 8014d5e:	443b      	add	r3, r7
 8014d60:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8014d64:	68bb      	ldr	r3, [r7, #8]
 8014d66:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8014d68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014d6a:	3301      	adds	r3, #1
 8014d6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8014d6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014d70:	2b01      	cmp	r3, #1
 8014d72:	f77f ad58 	ble.w	8014826 <lfs_dir_fetchmatch+0x14e>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8014d76:	68bb      	ldr	r3, [r7, #8]
 8014d78:	681a      	ldr	r2, [r3, #0]
 8014d7a:	68bb      	ldr	r3, [r7, #8]
 8014d7c:	685b      	ldr	r3, [r3, #4]
 8014d7e:	490a      	ldr	r1, [pc, #40]	; (8014da8 <lfs_dir_fetchmatch+0x6d0>)
 8014d80:	9101      	str	r1, [sp, #4]
 8014d82:	9300      	str	r3, [sp, #0]
 8014d84:	4613      	mov	r3, r2
 8014d86:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8014d8a:	4908      	ldr	r1, [pc, #32]	; (8014dac <lfs_dir_fetchmatch+0x6d4>)
 8014d8c:	4808      	ldr	r0, [pc, #32]	; (8014db0 <lfs_dir_fetchmatch+0x6d8>)
 8014d8e:	f007 f829 	bl	801bde4 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8014d92:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8014d96:	4618      	mov	r0, r3
 8014d98:	376c      	adds	r7, #108	; 0x6c
 8014d9a:	46bd      	mov	sp, r7
 8014d9c:	bd90      	pop	{r4, r7, pc}
 8014d9e:	bf00      	nop
 8014da0:	000ffc00 	.word	0x000ffc00
 8014da4:	7ffffc00 	.word	0x7ffffc00
 8014da8:	08021c54 	.word	0x08021c54
 8014dac:	08021b40 	.word	0x08021b40
 8014db0:	08021c60 	.word	0x08021c60

08014db4 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8014db4:	b580      	push	{r7, lr}
 8014db6:	b088      	sub	sp, #32
 8014db8:	af04      	add	r7, sp, #16
 8014dba:	60f8      	str	r0, [r7, #12]
 8014dbc:	60b9      	str	r1, [r7, #8]
 8014dbe:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8014dc0:	2300      	movs	r3, #0
 8014dc2:	9303      	str	r3, [sp, #12]
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	9302      	str	r3, [sp, #8]
 8014dc8:	2300      	movs	r3, #0
 8014dca:	9301      	str	r3, [sp, #4]
 8014dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8014dd0:	9300      	str	r3, [sp, #0]
 8014dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8014dd6:	687a      	ldr	r2, [r7, #4]
 8014dd8:	68b9      	ldr	r1, [r7, #8]
 8014dda:	68f8      	ldr	r0, [r7, #12]
 8014ddc:	f7ff fc7c 	bl	80146d8 <lfs_dir_fetchmatch>
 8014de0:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8014de2:	4618      	mov	r0, r3
 8014de4:	3710      	adds	r7, #16
 8014de6:	46bd      	mov	sp, r7
 8014de8:	bd80      	pop	{r7, pc}
	...

08014dec <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8014dec:	b580      	push	{r7, lr}
 8014dee:	b08a      	sub	sp, #40	; 0x28
 8014df0:	af02      	add	r7, sp, #8
 8014df2:	60f8      	str	r0, [r7, #12]
 8014df4:	60b9      	str	r1, [r7, #8]
 8014df6:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8014df8:	f107 0310 	add.w	r3, r7, #16
 8014dfc:	9300      	str	r3, [sp, #0]
 8014dfe:	4b12      	ldr	r3, [pc, #72]	; (8014e48 <lfs_dir_getgstate+0x5c>)
 8014e00:	4a12      	ldr	r2, [pc, #72]	; (8014e4c <lfs_dir_getgstate+0x60>)
 8014e02:	68b9      	ldr	r1, [r7, #8]
 8014e04:	68f8      	ldr	r0, [r7, #12]
 8014e06:	f7fe ff35 	bl	8013c74 <lfs_dir_get>
 8014e0a:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8014e0c:	69fb      	ldr	r3, [r7, #28]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	da05      	bge.n	8014e1e <lfs_dir_getgstate+0x32>
 8014e12:	69fb      	ldr	r3, [r7, #28]
 8014e14:	f113 0f02 	cmn.w	r3, #2
 8014e18:	d001      	beq.n	8014e1e <lfs_dir_getgstate+0x32>
        return res;
 8014e1a:	69fb      	ldr	r3, [r7, #28]
 8014e1c:	e00f      	b.n	8014e3e <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8014e1e:	69fb      	ldr	r3, [r7, #28]
 8014e20:	f113 0f02 	cmn.w	r3, #2
 8014e24:	d00a      	beq.n	8014e3c <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8014e26:	f107 0310 	add.w	r3, r7, #16
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	f7fe fc00 	bl	8013630 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8014e30:	f107 0310 	add.w	r3, r7, #16
 8014e34:	4619      	mov	r1, r3
 8014e36:	6878      	ldr	r0, [r7, #4]
 8014e38:	f7fe fb63 	bl	8013502 <lfs_gstate_xor>
    }

    return 0;
 8014e3c:	2300      	movs	r3, #0
}
 8014e3e:	4618      	mov	r0, r3
 8014e40:	3720      	adds	r7, #32
 8014e42:	46bd      	mov	sp, r7
 8014e44:	bd80      	pop	{r7, pc}
 8014e46:	bf00      	nop
 8014e48:	7ff0000c 	.word	0x7ff0000c
 8014e4c:	7ff00000 	.word	0x7ff00000

08014e50 <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b08a      	sub	sp, #40	; 0x28
 8014e54:	af02      	add	r7, sp, #8
 8014e56:	60f8      	str	r0, [r7, #12]
 8014e58:	60b9      	str	r1, [r7, #8]
 8014e5a:	603b      	str	r3, [r7, #0]
 8014e5c:	4613      	mov	r3, r2
 8014e5e:	80fb      	strh	r3, [r7, #6]
    if (id == 0x3ff) {
 8014e60:	88fb      	ldrh	r3, [r7, #6]
 8014e62:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8014e66:	4293      	cmp	r3, r2
 8014e68:	d10b      	bne.n	8014e82 <lfs_dir_getinfo+0x32>
        // special case for root
        strcpy(info->name, "/");
 8014e6a:	683b      	ldr	r3, [r7, #0]
 8014e6c:	3308      	adds	r3, #8
 8014e6e:	4932      	ldr	r1, [pc, #200]	; (8014f38 <lfs_dir_getinfo+0xe8>)
 8014e70:	461a      	mov	r2, r3
 8014e72:	460b      	mov	r3, r1
 8014e74:	881b      	ldrh	r3, [r3, #0]
 8014e76:	8013      	strh	r3, [r2, #0]
        info->type = LFS_TYPE_DIR;
 8014e78:	683b      	ldr	r3, [r7, #0]
 8014e7a:	2202      	movs	r2, #2
 8014e7c:	701a      	strb	r2, [r3, #0]
        return 0;
 8014e7e:	2300      	movs	r3, #0
 8014e80:	e055      	b.n	8014f2e <lfs_dir_getinfo+0xde>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8014e82:	88fb      	ldrh	r3, [r7, #6]
 8014e84:	029a      	lsls	r2, r3, #10
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e8a:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8014e8c:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8014e8e:	683b      	ldr	r3, [r7, #0]
 8014e90:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8014e92:	9300      	str	r3, [sp, #0]
 8014e94:	4613      	mov	r3, r2
 8014e96:	4a29      	ldr	r2, [pc, #164]	; (8014f3c <lfs_dir_getinfo+0xec>)
 8014e98:	68b9      	ldr	r1, [r7, #8]
 8014e9a:	68f8      	ldr	r0, [r7, #12]
 8014e9c:	f7fe feea 	bl	8013c74 <lfs_dir_get>
 8014ea0:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 8014ea2:	69fb      	ldr	r3, [r7, #28]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	da01      	bge.n	8014eac <lfs_dir_getinfo+0x5c>
        return (int)tag;
 8014ea8:	69fb      	ldr	r3, [r7, #28]
 8014eaa:	e040      	b.n	8014f2e <lfs_dir_getinfo+0xde>
    }

    info->type = lfs_tag_type3(tag);
 8014eac:	69fb      	ldr	r3, [r7, #28]
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f7fe facc 	bl	801344c <lfs_tag_type3>
 8014eb4:	4603      	mov	r3, r0
 8014eb6:	b2da      	uxtb	r2, r3
 8014eb8:	683b      	ldr	r3, [r7, #0]
 8014eba:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8014ebc:	88fb      	ldrh	r3, [r7, #6]
 8014ebe:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8014ec0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014ec4:	f043 0308 	orr.w	r3, r3, #8
 8014ec8:	f107 0214 	add.w	r2, r7, #20
 8014ecc:	9200      	str	r2, [sp, #0]
 8014ece:	4a1c      	ldr	r2, [pc, #112]	; (8014f40 <lfs_dir_getinfo+0xf0>)
 8014ed0:	68b9      	ldr	r1, [r7, #8]
 8014ed2:	68f8      	ldr	r0, [r7, #12]
 8014ed4:	f7fe fece 	bl	8013c74 <lfs_dir_get>
 8014ed8:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 8014eda:	69fb      	ldr	r3, [r7, #28]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	da01      	bge.n	8014ee4 <lfs_dir_getinfo+0x94>
        return (int)tag;
 8014ee0:	69fb      	ldr	r3, [r7, #28]
 8014ee2:	e024      	b.n	8014f2e <lfs_dir_getinfo+0xde>
    }
    lfs_ctz_fromle32(&ctz);
 8014ee4:	f107 0314 	add.w	r3, r7, #20
 8014ee8:	4618      	mov	r0, r3
 8014eea:	f7fe fbe1 	bl	80136b0 <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8014eee:	69fb      	ldr	r3, [r7, #28]
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	f7fe faab 	bl	801344c <lfs_tag_type3>
 8014ef6:	4603      	mov	r3, r0
 8014ef8:	461a      	mov	r2, r3
 8014efa:	f240 2302 	movw	r3, #514	; 0x202
 8014efe:	429a      	cmp	r2, r3
 8014f00:	d103      	bne.n	8014f0a <lfs_dir_getinfo+0xba>
        info->size = ctz.size;
 8014f02:	69ba      	ldr	r2, [r7, #24]
 8014f04:	683b      	ldr	r3, [r7, #0]
 8014f06:	605a      	str	r2, [r3, #4]
 8014f08:	e010      	b.n	8014f2c <lfs_dir_getinfo+0xdc>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8014f0a:	69fb      	ldr	r3, [r7, #28]
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	f7fe fa9d 	bl	801344c <lfs_tag_type3>
 8014f12:	4603      	mov	r3, r0
 8014f14:	461a      	mov	r2, r3
 8014f16:	f240 2301 	movw	r3, #513	; 0x201
 8014f1a:	429a      	cmp	r2, r3
 8014f1c:	d106      	bne.n	8014f2c <lfs_dir_getinfo+0xdc>
        info->size = lfs_tag_size(tag);
 8014f1e:	69fb      	ldr	r3, [r7, #28]
 8014f20:	4618      	mov	r0, r3
 8014f22:	f7fe facd 	bl	80134c0 <lfs_tag_size>
 8014f26:	4602      	mov	r2, r0
 8014f28:	683b      	ldr	r3, [r7, #0]
 8014f2a:	605a      	str	r2, [r3, #4]
    }

    return 0;
 8014f2c:	2300      	movs	r3, #0
}
 8014f2e:	4618      	mov	r0, r3
 8014f30:	3720      	adds	r7, #32
 8014f32:	46bd      	mov	sp, r7
 8014f34:	bd80      	pop	{r7, pc}
 8014f36:	bf00      	nop
 8014f38:	08021ca0 	.word	0x08021ca0
 8014f3c:	780ffc00 	.word	0x780ffc00
 8014f40:	700ffc00 	.word	0x700ffc00

08014f44 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8014f44:	b590      	push	{r4, r7, lr}
 8014f46:	b08f      	sub	sp, #60	; 0x3c
 8014f48:	af04      	add	r7, sp, #16
 8014f4a:	60f8      	str	r0, [r7, #12]
 8014f4c:	60b9      	str	r1, [r7, #8]
 8014f4e:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8014f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8014f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f60:	689c      	ldr	r4, [r3, #8]
 8014f62:	68b8      	ldr	r0, [r7, #8]
 8014f64:	f7fe faac 	bl	80134c0 <lfs_tag_size>
 8014f68:	4603      	mov	r3, r0
 8014f6a:	4619      	mov	r1, r3
 8014f6c:	4620      	mov	r0, r4
 8014f6e:	f7fd fd81 	bl	8012a74 <lfs_min>
 8014f72:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8014f74:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 8014f76:	69fb      	ldr	r3, [r7, #28]
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	69fa      	ldr	r2, [r7, #28]
 8014f7c:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 8014f7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014f80:	6849      	ldr	r1, [r1, #4]
 8014f82:	69b8      	ldr	r0, [r7, #24]
 8014f84:	9003      	str	r0, [sp, #12]
 8014f86:	9102      	str	r1, [sp, #8]
 8014f88:	9201      	str	r2, [sp, #4]
 8014f8a:	9300      	str	r3, [sp, #0]
 8014f8c:	69bb      	ldr	r3, [r7, #24]
 8014f8e:	4622      	mov	r2, r4
 8014f90:	2100      	movs	r1, #0
 8014f92:	6a38      	ldr	r0, [r7, #32]
 8014f94:	f7fd ff8e 	bl	8012eb4 <lfs_bd_cmp>
 8014f98:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 8014f9a:	697b      	ldr	r3, [r7, #20]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d001      	beq.n	8014fa4 <lfs_dir_find_match+0x60>
        return res;
 8014fa0:	697b      	ldr	r3, [r7, #20]
 8014fa2:	e014      	b.n	8014fce <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8014fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fa6:	689c      	ldr	r4, [r3, #8]
 8014fa8:	68b8      	ldr	r0, [r7, #8]
 8014faa:	f7fe fa89 	bl	80134c0 <lfs_tag_size>
 8014fae:	4603      	mov	r3, r0
 8014fb0:	429c      	cmp	r4, r3
 8014fb2:	d00b      	beq.n	8014fcc <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8014fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fb6:	689c      	ldr	r4, [r3, #8]
 8014fb8:	68b8      	ldr	r0, [r7, #8]
 8014fba:	f7fe fa81 	bl	80134c0 <lfs_tag_size>
 8014fbe:	4603      	mov	r3, r0
 8014fc0:	429c      	cmp	r4, r3
 8014fc2:	d201      	bcs.n	8014fc8 <lfs_dir_find_match+0x84>
 8014fc4:	2301      	movs	r3, #1
 8014fc6:	e002      	b.n	8014fce <lfs_dir_find_match+0x8a>
 8014fc8:	2302      	movs	r3, #2
 8014fca:	e000      	b.n	8014fce <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8014fcc:	2300      	movs	r3, #0
}
 8014fce:	4618      	mov	r0, r3
 8014fd0:	372c      	adds	r7, #44	; 0x2c
 8014fd2:	46bd      	mov	sp, r7
 8014fd4:	bd90      	pop	{r4, r7, pc}
	...

08014fd8 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8014fd8:	b590      	push	{r4, r7, lr}
 8014fda:	b093      	sub	sp, #76	; 0x4c
 8014fdc:	af04      	add	r7, sp, #16
 8014fde:	60f8      	str	r0, [r7, #12]
 8014fe0:	60b9      	str	r1, [r7, #8]
 8014fe2:	607a      	str	r2, [r7, #4]
 8014fe4:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8014fec:	683b      	ldr	r3, [r7, #0]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d003      	beq.n	8014ffa <lfs_dir_find+0x22>
        *id = 0x3ff;
 8014ff2:	683b      	ldr	r3, [r7, #0]
 8014ff4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8014ff8:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8014ffa:	4b6e      	ldr	r3, [pc, #440]	; (80151b4 <lfs_dir_find+0x1dc>)
 8014ffc:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	6a1a      	ldr	r2, [r3, #32]
 8015002:	68bb      	ldr	r3, [r7, #8]
 8015004:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801500a:	68bb      	ldr	r3, [r7, #8]
 801500c:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 801500e:	496a      	ldr	r1, [pc, #424]	; (80151b8 <lfs_dir_find+0x1e0>)
 8015010:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015012:	f007 f8b6 	bl	801c182 <strspn>
 8015016:	4602      	mov	r2, r0
 8015018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801501a:	4413      	add	r3, r2
 801501c:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 801501e:	4966      	ldr	r1, [pc, #408]	; (80151b8 <lfs_dir_find+0x1e0>)
 8015020:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015022:	f007 f865 	bl	801c0f0 <strcspn>
 8015026:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8015028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801502a:	2b01      	cmp	r3, #1
 801502c:	d105      	bne.n	801503a <lfs_dir_find+0x62>
 801502e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015030:	781a      	ldrb	r2, [r3, #0]
 8015032:	4b62      	ldr	r3, [pc, #392]	; (80151bc <lfs_dir_find+0x1e4>)
 8015034:	781b      	ldrb	r3, [r3, #0]
 8015036:	429a      	cmp	r2, r3
 8015038:	d00a      	beq.n	8015050 <lfs_dir_find+0x78>
 801503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801503c:	2b02      	cmp	r3, #2
 801503e:	d10c      	bne.n	801505a <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8015040:	2202      	movs	r2, #2
 8015042:	495f      	ldr	r1, [pc, #380]	; (80151c0 <lfs_dir_find+0x1e8>)
 8015044:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015046:	f007 f805 	bl	801c054 <memcmp>
 801504a:	4603      	mov	r3, r0
 801504c:	2b00      	cmp	r3, #0
 801504e:	d104      	bne.n	801505a <lfs_dir_find+0x82>
            name += namelen;
 8015050:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015054:	4413      	add	r3, r2
 8015056:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8015058:	e7d9      	b.n	801500e <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 801505a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801505e:	4413      	add	r3, r2
 8015060:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8015062:	2301      	movs	r3, #1
 8015064:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8015066:	4954      	ldr	r1, [pc, #336]	; (80151b8 <lfs_dir_find+0x1e0>)
 8015068:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801506a:	f007 f88a 	bl	801c182 <strspn>
 801506e:	4602      	mov	r2, r0
 8015070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015072:	4413      	add	r3, r2
 8015074:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8015076:	4950      	ldr	r1, [pc, #320]	; (80151b8 <lfs_dir_find+0x1e0>)
 8015078:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801507a:	f007 f839 	bl	801c0f0 <strcspn>
 801507e:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8015080:	6a3b      	ldr	r3, [r7, #32]
 8015082:	2b00      	cmp	r3, #0
 8015084:	d01d      	beq.n	80150c2 <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8015086:	6a3b      	ldr	r3, [r7, #32]
 8015088:	2b02      	cmp	r3, #2
 801508a:	d112      	bne.n	80150b2 <lfs_dir_find+0xda>
 801508c:	2202      	movs	r2, #2
 801508e:	494c      	ldr	r1, [pc, #304]	; (80151c0 <lfs_dir_find+0x1e8>)
 8015090:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015092:	f006 ffdf 	bl	801c054 <memcmp>
 8015096:	4603      	mov	r3, r0
 8015098:	2b00      	cmp	r3, #0
 801509a:	d10a      	bne.n	80150b2 <lfs_dir_find+0xda>
                depth -= 1;
 801509c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801509e:	3b01      	subs	r3, #1
 80150a0:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 80150a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d107      	bne.n	80150b8 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 80150a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80150aa:	6a3b      	ldr	r3, [r7, #32]
 80150ac:	4413      	add	r3, r2
 80150ae:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 80150b0:	e7ad      	b.n	801500e <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 80150b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150b4:	3301      	adds	r3, #1
 80150b6:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 80150b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80150ba:	6a3b      	ldr	r3, [r7, #32]
 80150bc:	4413      	add	r3, r2
 80150be:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 80150c0:	e7d1      	b.n	8015066 <lfs_dir_find+0x8e>
                break;
 80150c2:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 80150c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150c6:	781b      	ldrb	r3, [r3, #0]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d101      	bne.n	80150d0 <lfs_dir_find+0xf8>
            return tag;
 80150cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150ce:	e06c      	b.n	80151aa <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80150d4:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 80150d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150d8:	4618      	mov	r0, r3
 80150da:	f7fe f9b7 	bl	801344c <lfs_tag_type3>
 80150de:	4603      	mov	r3, r0
 80150e0:	2b02      	cmp	r3, #2
 80150e2:	d002      	beq.n	80150ea <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 80150e4:	f06f 0313 	mvn.w	r3, #19
 80150e8:	e05f      	b.n	80151aa <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 80150ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150ec:	4618      	mov	r0, r3
 80150ee:	f7fe f9d7 	bl	80134a0 <lfs_tag_id>
 80150f2:	4603      	mov	r3, r0
 80150f4:	461a      	mov	r2, r3
 80150f6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80150fa:	429a      	cmp	r2, r3
 80150fc:	d01c      	beq.n	8015138 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 80150fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015100:	4618      	mov	r0, r3
 8015102:	f7fe f9cd 	bl	80134a0 <lfs_tag_id>
 8015106:	4603      	mov	r3, r0
 8015108:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801510a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801510e:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8015112:	68ba      	ldr	r2, [r7, #8]
 8015114:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8015116:	9200      	str	r2, [sp, #0]
 8015118:	4a2a      	ldr	r2, [pc, #168]	; (80151c4 <lfs_dir_find+0x1ec>)
 801511a:	68b9      	ldr	r1, [r7, #8]
 801511c:	68f8      	ldr	r0, [r7, #12]
 801511e:	f7fe fda9 	bl	8013c74 <lfs_dir_get>
 8015122:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8015124:	69fb      	ldr	r3, [r7, #28]
 8015126:	2b00      	cmp	r3, #0
 8015128:	da01      	bge.n	801512e <lfs_dir_find+0x156>
                return res;
 801512a:	69fb      	ldr	r3, [r7, #28]
 801512c:	e03d      	b.n	80151aa <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 801512e:	68bb      	ldr	r3, [r7, #8]
 8015130:	3318      	adds	r3, #24
 8015132:	4618      	mov	r0, r3
 8015134:	f7fe f925 	bl	8013382 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8015138:	68bb      	ldr	r3, [r7, #8]
 801513a:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 801513e:	212f      	movs	r1, #47	; 0x2f
 8015140:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015142:	f006 ffc8 	bl	801c0d6 <strchr>
 8015146:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8015148:	2b00      	cmp	r3, #0
 801514a:	d101      	bne.n	8015150 <lfs_dir_find+0x178>
 801514c:	683b      	ldr	r3, [r7, #0]
 801514e:	e000      	b.n	8015152 <lfs_dir_find+0x17a>
 8015150:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8015152:	68fa      	ldr	r2, [r7, #12]
 8015154:	613a      	str	r2, [r7, #16]
 8015156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015158:	617a      	str	r2, [r7, #20]
 801515a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801515c:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801515e:	f107 0210 	add.w	r2, r7, #16
 8015162:	9203      	str	r2, [sp, #12]
 8015164:	4a18      	ldr	r2, [pc, #96]	; (80151c8 <lfs_dir_find+0x1f0>)
 8015166:	9202      	str	r2, [sp, #8]
 8015168:	9301      	str	r3, [sp, #4]
 801516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801516c:	9300      	str	r3, [sp, #0]
 801516e:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8015172:	4622      	mov	r2, r4
 8015174:	68b9      	ldr	r1, [r7, #8]
 8015176:	68f8      	ldr	r0, [r7, #12]
 8015178:	f7ff faae 	bl	80146d8 <lfs_dir_fetchmatch>
 801517c:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 801517e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015180:	2b00      	cmp	r3, #0
 8015182:	da01      	bge.n	8015188 <lfs_dir_find+0x1b0>
                return tag;
 8015184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015186:	e010      	b.n	80151aa <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8015188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801518a:	2b00      	cmp	r3, #0
 801518c:	d004      	beq.n	8015198 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 801518e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015192:	4413      	add	r3, r2
 8015194:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 8015196:	e73a      	b.n	801500e <lfs_dir_find+0x36>
            if (!dir->split) {
 8015198:	68bb      	ldr	r3, [r7, #8]
 801519a:	7ddb      	ldrb	r3, [r3, #23]
 801519c:	f083 0301 	eor.w	r3, r3, #1
 80151a0:	b2db      	uxtb	r3, r3
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d0c8      	beq.n	8015138 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 80151a6:	f06f 0301 	mvn.w	r3, #1
    }
}
 80151aa:	4618      	mov	r0, r3
 80151ac:	373c      	adds	r7, #60	; 0x3c
 80151ae:	46bd      	mov	sp, r7
 80151b0:	bd90      	pop	{r4, r7, pc}
 80151b2:	bf00      	nop
 80151b4:	002ffc00 	.word	0x002ffc00
 80151b8:	08021ca0 	.word	0x08021ca0
 80151bc:	08021ca4 	.word	0x08021ca4
 80151c0:	08021ca8 	.word	0x08021ca8
 80151c4:	700ffc00 	.word	0x700ffc00
 80151c8:	08014f45 	.word	0x08014f45

080151cc <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 80151cc:	b590      	push	{r4, r7, lr}
 80151ce:	b08b      	sub	sp, #44	; 0x2c
 80151d0:	af04      	add	r7, sp, #16
 80151d2:	60f8      	str	r0, [r7, #12]
 80151d4:	60b9      	str	r1, [r7, #8]
 80151d6:	607a      	str	r2, [r7, #4]
 80151d8:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	f103 0010 	add.w	r0, r3, #16
 80151e0:	68fc      	ldr	r4, [r7, #12]
 80151e2:	68bb      	ldr	r3, [r7, #8]
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	68ba      	ldr	r2, [r7, #8]
 80151e8:	6852      	ldr	r2, [r2, #4]
 80151ea:	6839      	ldr	r1, [r7, #0]
 80151ec:	9103      	str	r1, [sp, #12]
 80151ee:	6879      	ldr	r1, [r7, #4]
 80151f0:	9102      	str	r1, [sp, #8]
 80151f2:	9201      	str	r2, [sp, #4]
 80151f4:	9300      	str	r3, [sp, #0]
 80151f6:	2300      	movs	r3, #0
 80151f8:	4622      	mov	r2, r4
 80151fa:	4601      	mov	r1, r0
 80151fc:	68f8      	ldr	r0, [r7, #12]
 80151fe:	f7fd ff5b 	bl	80130b8 <lfs_bd_prog>
 8015202:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8015204:	697b      	ldr	r3, [r7, #20]
 8015206:	2b00      	cmp	r3, #0
 8015208:	d001      	beq.n	801520e <lfs_dir_commitprog+0x42>
        return err;
 801520a:	697b      	ldr	r3, [r7, #20]
 801520c:	e010      	b.n	8015230 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 801520e:	68bb      	ldr	r3, [r7, #8]
 8015210:	68db      	ldr	r3, [r3, #12]
 8015212:	683a      	ldr	r2, [r7, #0]
 8015214:	6879      	ldr	r1, [r7, #4]
 8015216:	4618      	mov	r0, r3
 8015218:	f004 fa2e 	bl	8019678 <lfs_crc>
 801521c:	4602      	mov	r2, r0
 801521e:	68bb      	ldr	r3, [r7, #8]
 8015220:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8015222:	68bb      	ldr	r3, [r7, #8]
 8015224:	685a      	ldr	r2, [r3, #4]
 8015226:	683b      	ldr	r3, [r7, #0]
 8015228:	441a      	add	r2, r3
 801522a:	68bb      	ldr	r3, [r7, #8]
 801522c:	605a      	str	r2, [r3, #4]
    return 0;
 801522e:	2300      	movs	r3, #0
}
 8015230:	4618      	mov	r0, r3
 8015232:	371c      	adds	r7, #28
 8015234:	46bd      	mov	sp, r7
 8015236:	bd90      	pop	{r4, r7, pc}

08015238 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8015238:	b590      	push	{r4, r7, lr}
 801523a:	b08f      	sub	sp, #60	; 0x3c
 801523c:	af04      	add	r7, sp, #16
 801523e:	60f8      	str	r0, [r7, #12]
 8015240:	60b9      	str	r1, [r7, #8]
 8015242:	607a      	str	r2, [r7, #4]
 8015244:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8015246:	6878      	ldr	r0, [r7, #4]
 8015248:	f7fe f947 	bl	80134da <lfs_tag_dsize>
 801524c:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 801524e:	68bb      	ldr	r3, [r7, #8]
 8015250:	685a      	ldr	r2, [r3, #4]
 8015252:	6a3b      	ldr	r3, [r7, #32]
 8015254:	441a      	add	r2, r3
 8015256:	68bb      	ldr	r3, [r7, #8]
 8015258:	695b      	ldr	r3, [r3, #20]
 801525a:	429a      	cmp	r2, r3
 801525c:	d902      	bls.n	8015264 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 801525e:	f06f 031b 	mvn.w	r3, #27
 8015262:	e065      	b.n	8015330 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801526a:	68bb      	ldr	r3, [r7, #8]
 801526c:	689b      	ldr	r3, [r3, #8]
 801526e:	4053      	eors	r3, r2
 8015270:	4618      	mov	r0, r3
 8015272:	f7fd fc92 	bl	8012b9a <lfs_tobe32>
 8015276:	4603      	mov	r3, r0
 8015278:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 801527a:	f107 0214 	add.w	r2, r7, #20
 801527e:	2304      	movs	r3, #4
 8015280:	68b9      	ldr	r1, [r7, #8]
 8015282:	68f8      	ldr	r0, [r7, #12]
 8015284:	f7ff ffa2 	bl	80151cc <lfs_dir_commitprog>
 8015288:	61f8      	str	r0, [r7, #28]
    if (err) {
 801528a:	69fb      	ldr	r3, [r7, #28]
 801528c:	2b00      	cmp	r3, #0
 801528e:	d001      	beq.n	8015294 <lfs_dir_commitattr+0x5c>
        return err;
 8015290:	69fb      	ldr	r3, [r7, #28]
 8015292:	e04d      	b.n	8015330 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	2b00      	cmp	r3, #0
 8015298:	db0c      	blt.n	80152b4 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 801529a:	6a3b      	ldr	r3, [r7, #32]
 801529c:	3b04      	subs	r3, #4
 801529e:	683a      	ldr	r2, [r7, #0]
 80152a0:	68b9      	ldr	r1, [r7, #8]
 80152a2:	68f8      	ldr	r0, [r7, #12]
 80152a4:	f7ff ff92 	bl	80151cc <lfs_dir_commitprog>
 80152a8:	61f8      	str	r0, [r7, #28]
        if (err) {
 80152aa:	69fb      	ldr	r3, [r7, #28]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d039      	beq.n	8015324 <lfs_dir_commitattr+0xec>
            return err;
 80152b0:	69fb      	ldr	r3, [r7, #28]
 80152b2:	e03d      	b.n	8015330 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 80152b4:	683b      	ldr	r3, [r7, #0]
 80152b6:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 80152b8:	2300      	movs	r3, #0
 80152ba:	627b      	str	r3, [r7, #36]	; 0x24
 80152bc:	e02d      	b.n	801531a <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 80152be:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 80152c0:	6a3a      	ldr	r2, [r7, #32]
 80152c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152c4:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 80152c6:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 80152c8:	69bb      	ldr	r3, [r7, #24]
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	69ba      	ldr	r2, [r7, #24]
 80152ce:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 80152d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80152d2:	440a      	add	r2, r1
 80152d4:	2101      	movs	r1, #1
 80152d6:	9103      	str	r1, [sp, #12]
 80152d8:	f107 0113 	add.w	r1, r7, #19
 80152dc:	9102      	str	r1, [sp, #8]
 80152de:	9201      	str	r2, [sp, #4]
 80152e0:	9300      	str	r3, [sp, #0]
 80152e2:	4623      	mov	r3, r4
 80152e4:	4602      	mov	r2, r0
 80152e6:	2100      	movs	r1, #0
 80152e8:	68f8      	ldr	r0, [r7, #12]
 80152ea:	f7fd fc9f 	bl	8012c2c <lfs_bd_read>
 80152ee:	61f8      	str	r0, [r7, #28]
            if (err) {
 80152f0:	69fb      	ldr	r3, [r7, #28]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d001      	beq.n	80152fa <lfs_dir_commitattr+0xc2>
                return err;
 80152f6:	69fb      	ldr	r3, [r7, #28]
 80152f8:	e01a      	b.n	8015330 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 80152fa:	f107 0213 	add.w	r2, r7, #19
 80152fe:	2301      	movs	r3, #1
 8015300:	68b9      	ldr	r1, [r7, #8]
 8015302:	68f8      	ldr	r0, [r7, #12]
 8015304:	f7ff ff62 	bl	80151cc <lfs_dir_commitprog>
 8015308:	61f8      	str	r0, [r7, #28]
            if (err) {
 801530a:	69fb      	ldr	r3, [r7, #28]
 801530c:	2b00      	cmp	r3, #0
 801530e:	d001      	beq.n	8015314 <lfs_dir_commitattr+0xdc>
                return err;
 8015310:	69fb      	ldr	r3, [r7, #28]
 8015312:	e00d      	b.n	8015330 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8015314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015316:	3301      	adds	r3, #1
 8015318:	627b      	str	r3, [r7, #36]	; 0x24
 801531a:	6a3b      	ldr	r3, [r7, #32]
 801531c:	3b04      	subs	r3, #4
 801531e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015320:	429a      	cmp	r2, r3
 8015322:	d3cc      	bcc.n	80152be <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801532a:	68bb      	ldr	r3, [r7, #8]
 801532c:	609a      	str	r2, [r3, #8]
    return 0;
 801532e:	2300      	movs	r3, #0
}
 8015330:	4618      	mov	r0, r3
 8015332:	372c      	adds	r7, #44	; 0x2c
 8015334:	46bd      	mov	sp, r7
 8015336:	bd90      	pop	{r4, r7, pc}

08015338 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8015338:	b590      	push	{r4, r7, lr}
 801533a:	b097      	sub	sp, #92	; 0x5c
 801533c:	af04      	add	r7, sp, #16
 801533e:	6078      	str	r0, [r7, #4]
 8015340:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8015342:	683b      	ldr	r3, [r7, #0]
 8015344:	685b      	ldr	r3, [r3, #4]
 8015346:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801534e:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8015350:	4619      	mov	r1, r3
 8015352:	4610      	mov	r0, r2
 8015354:	f7fd fbb3 	bl	8012abe <lfs_alignup>
 8015358:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 801535a:	2300      	movs	r3, #0
 801535c:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 801535e:	2300      	movs	r3, #0
 8015360:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8015362:	e0a6      	b.n	80154b2 <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 8015364:	683b      	ldr	r3, [r7, #0]
 8015366:	685b      	ldr	r3, [r3, #4]
 8015368:	3304      	adds	r3, #4
 801536a:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 801536c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801536e:	6a3b      	ldr	r3, [r7, #32]
 8015370:	1ad3      	subs	r3, r2, r3
 8015372:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8015376:	4618      	mov	r0, r3
 8015378:	f7fd fb7c 	bl	8012a74 <lfs_min>
 801537c:	4602      	mov	r2, r0
 801537e:	6a3b      	ldr	r3, [r7, #32]
 8015380:	4413      	add	r3, r2
 8015382:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 8015384:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015388:	429a      	cmp	r2, r3
 801538a:	d206      	bcs.n	801539a <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 801538c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801538e:	3b08      	subs	r3, #8
 8015390:	4619      	mov	r1, r3
 8015392:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015394:	f7fd fb6e 	bl	8012a74 <lfs_min>
 8015398:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 801539a:	f04f 33ff 	mov.w	r3, #4294967295
 801539e:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 80153a0:	6879      	ldr	r1, [r7, #4]
 80153a2:	683b      	ldr	r3, [r7, #0]
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	2204      	movs	r2, #4
 80153a8:	9203      	str	r2, [sp, #12]
 80153aa:	f107 0214 	add.w	r2, r7, #20
 80153ae:	9202      	str	r2, [sp, #8]
 80153b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80153b2:	9201      	str	r2, [sp, #4]
 80153b4:	9300      	str	r3, [sp, #0]
 80153b6:	2304      	movs	r3, #4
 80153b8:	460a      	mov	r2, r1
 80153ba:	2100      	movs	r1, #0
 80153bc:	6878      	ldr	r0, [r7, #4]
 80153be:	f7fd fc35 	bl	8012c2c <lfs_bd_read>
 80153c2:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 80153c4:	69fb      	ldr	r3, [r7, #28]
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d005      	beq.n	80153d6 <lfs_dir_commitcrc+0x9e>
 80153ca:	69fb      	ldr	r3, [r7, #28]
 80153cc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80153d0:	d001      	beq.n	80153d6 <lfs_dir_commitcrc+0x9e>
            return err;
 80153d2:	69fb      	ldr	r3, [r7, #28]
 80153d4:	e0e8      	b.n	80155a8 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 80153d6:	697b      	ldr	r3, [r7, #20]
 80153d8:	4618      	mov	r0, r3
 80153da:	f7fd fbd2 	bl	8012b82 <lfs_frombe32>
 80153de:	4603      	mov	r3, r0
 80153e0:	43db      	mvns	r3, r3
 80153e2:	0fdb      	lsrs	r3, r3, #31
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	bf14      	ite	ne
 80153e8:	2301      	movne	r3, #1
 80153ea:	2300      	moveq	r3, #0
 80153ec:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 80153ee:	7efb      	ldrb	r3, [r7, #27]
 80153f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80153f4:	051a      	lsls	r2, r3, #20
 80153f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80153f8:	6a3b      	ldr	r3, [r7, #32]
 80153fa:	1acb      	subs	r3, r1, r3
 80153fc:	4313      	orrs	r3, r2
 80153fe:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 8015402:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8015406:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8015408:	683b      	ldr	r3, [r7, #0]
 801540a:	689a      	ldr	r2, [r3, #8]
 801540c:	697b      	ldr	r3, [r7, #20]
 801540e:	4053      	eors	r3, r2
 8015410:	4618      	mov	r0, r3
 8015412:	f7fd fbc2 	bl	8012b9a <lfs_tobe32>
 8015416:	4603      	mov	r3, r0
 8015418:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 801541a:	683b      	ldr	r3, [r7, #0]
 801541c:	68db      	ldr	r3, [r3, #12]
 801541e:	f107 010c 	add.w	r1, r7, #12
 8015422:	2204      	movs	r2, #4
 8015424:	4618      	mov	r0, r3
 8015426:	f004 f927 	bl	8019678 <lfs_crc>
 801542a:	4602      	mov	r2, r0
 801542c:	683b      	ldr	r3, [r7, #0]
 801542e:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 8015430:	683b      	ldr	r3, [r7, #0]
 8015432:	68db      	ldr	r3, [r3, #12]
 8015434:	4618      	mov	r0, r3
 8015436:	f7fd fb98 	bl	8012b6a <lfs_tole32>
 801543a:	4603      	mov	r3, r0
 801543c:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	f103 0010 	add.w	r0, r3, #16
 8015444:	687c      	ldr	r4, [r7, #4]
 8015446:	683b      	ldr	r3, [r7, #0]
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	683a      	ldr	r2, [r7, #0]
 801544c:	6852      	ldr	r2, [r2, #4]
 801544e:	2108      	movs	r1, #8
 8015450:	9103      	str	r1, [sp, #12]
 8015452:	f107 010c 	add.w	r1, r7, #12
 8015456:	9102      	str	r1, [sp, #8]
 8015458:	9201      	str	r2, [sp, #4]
 801545a:	9300      	str	r3, [sp, #0]
 801545c:	2300      	movs	r3, #0
 801545e:	4622      	mov	r2, r4
 8015460:	4601      	mov	r1, r0
 8015462:	6878      	ldr	r0, [r7, #4]
 8015464:	f7fd fe28 	bl	80130b8 <lfs_bd_prog>
 8015468:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 801546a:	69fb      	ldr	r3, [r7, #28]
 801546c:	2b00      	cmp	r3, #0
 801546e:	d001      	beq.n	8015474 <lfs_dir_commitcrc+0x13c>
            return err;
 8015470:	69fb      	ldr	r3, [r7, #28]
 8015472:	e099      	b.n	80155a8 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8015474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015476:	2b00      	cmp	r3, #0
 8015478:	d106      	bne.n	8015488 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 801547a:	683b      	ldr	r3, [r7, #0]
 801547c:	685b      	ldr	r3, [r3, #4]
 801547e:	3304      	adds	r3, #4
 8015480:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 8015482:	683b      	ldr	r3, [r7, #0]
 8015484:	68db      	ldr	r3, [r3, #12]
 8015486:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 8015488:	697b      	ldr	r3, [r7, #20]
 801548a:	4618      	mov	r0, r3
 801548c:	f7fe f818 	bl	80134c0 <lfs_tag_size>
 8015490:	4603      	mov	r3, r0
 8015492:	1d1a      	adds	r2, r3, #4
 8015494:	683b      	ldr	r3, [r7, #0]
 8015496:	685b      	ldr	r3, [r3, #4]
 8015498:	441a      	add	r2, r3
 801549a:	683b      	ldr	r3, [r7, #0]
 801549c:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 801549e:	7efb      	ldrb	r3, [r7, #27]
 80154a0:	07da      	lsls	r2, r3, #31
 80154a2:	697b      	ldr	r3, [r7, #20]
 80154a4:	405a      	eors	r2, r3
 80154a6:	683b      	ldr	r3, [r7, #0]
 80154a8:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 80154aa:	683b      	ldr	r3, [r7, #0]
 80154ac:	f04f 32ff 	mov.w	r2, #4294967295
 80154b0:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 80154b2:	683b      	ldr	r3, [r7, #0]
 80154b4:	685b      	ldr	r3, [r3, #4]
 80154b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80154b8:	429a      	cmp	r2, r3
 80154ba:	f63f af53 	bhi.w	8015364 <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	f103 0110 	add.w	r1, r3, #16
 80154c4:	687a      	ldr	r2, [r7, #4]
 80154c6:	2300      	movs	r3, #0
 80154c8:	6878      	ldr	r0, [r7, #4]
 80154ca:	f7fd fdc1 	bl	8013050 <lfs_bd_sync>
 80154ce:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 80154d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d001      	beq.n	80154da <lfs_dir_commitcrc+0x1a2>
        return err;
 80154d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154d8:	e066      	b.n	80155a8 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 80154da:	683b      	ldr	r3, [r7, #0]
 80154dc:	691b      	ldr	r3, [r3, #16]
 80154de:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 80154e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80154e2:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 80154e4:	e05b      	b.n	801559e <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 80154e6:	f04f 33ff 	mov.w	r3, #4294967295
 80154ea:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 80154ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80154f0:	e030      	b.n	8015554 <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 80154f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80154f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80154f6:	429a      	cmp	r2, r3
 80154f8:	d106      	bne.n	8015508 <lfs_dir_commitcrc+0x1d0>
 80154fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80154fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80154fe:	429a      	cmp	r2, r3
 8015500:	d002      	beq.n	8015508 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 8015502:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8015506:	e04f      	b.n	80155a8 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8015508:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 801550a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801550c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801550e:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8015510:	1d18      	adds	r0, r3, #4
 8015512:	683b      	ldr	r3, [r7, #0]
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	2201      	movs	r2, #1
 8015518:	9203      	str	r2, [sp, #12]
 801551a:	f107 020b 	add.w	r2, r7, #11
 801551e:	9202      	str	r2, [sp, #8]
 8015520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015522:	9201      	str	r2, [sp, #4]
 8015524:	9300      	str	r3, [sp, #0]
 8015526:	4603      	mov	r3, r0
 8015528:	460a      	mov	r2, r1
 801552a:	2100      	movs	r1, #0
 801552c:	6878      	ldr	r0, [r7, #4]
 801552e:	f7fd fb7d 	bl	8012c2c <lfs_bd_read>
 8015532:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 8015534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015536:	2b00      	cmp	r3, #0
 8015538:	d001      	beq.n	801553e <lfs_dir_commitcrc+0x206>
                return err;
 801553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801553c:	e034      	b.n	80155a8 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 801553e:	f107 030b 	add.w	r3, r7, #11
 8015542:	2201      	movs	r2, #1
 8015544:	4619      	mov	r1, r3
 8015546:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015548:	f004 f896 	bl	8019678 <lfs_crc>
 801554c:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 801554e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015550:	3301      	adds	r3, #1
 8015552:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015556:	3304      	adds	r3, #4
 8015558:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801555a:	429a      	cmp	r2, r3
 801555c:	d3c9      	bcc.n	80154f2 <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 801555e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015560:	2b00      	cmp	r3, #0
 8015562:	d002      	beq.n	801556a <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 8015564:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8015568:	e01e      	b.n	80155a8 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 801556a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801556c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801556e:	1ad3      	subs	r3, r2, r3
 8015570:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8015574:	4618      	mov	r0, r3
 8015576:	f7fd fa7d 	bl	8012a74 <lfs_min>
 801557a:	4602      	mov	r2, r0
 801557c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801557e:	4413      	add	r3, r2
 8015580:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 8015582:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015586:	429a      	cmp	r2, r3
 8015588:	d206      	bcs.n	8015598 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 801558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801558c:	3b08      	subs	r3, #8
 801558e:	4619      	mov	r1, r3
 8015590:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015592:	f7fd fa6f 	bl	8012a74 <lfs_min>
 8015596:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 8015598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801559a:	3304      	adds	r3, #4
 801559c:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 801559e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80155a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155a2:	429a      	cmp	r2, r3
 80155a4:	d39f      	bcc.n	80154e6 <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 80155a6:	2300      	movs	r3, #0
}
 80155a8:	4618      	mov	r0, r3
 80155aa:	374c      	adds	r7, #76	; 0x4c
 80155ac:	46bd      	mov	sp, r7
 80155ae:	bd90      	pop	{r4, r7, pc}

080155b0 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b08a      	sub	sp, #40	; 0x28
 80155b4:	af04      	add	r7, sp, #16
 80155b6:	6078      	str	r0, [r7, #4]
 80155b8:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 80155ba:	2300      	movs	r3, #0
 80155bc:	617b      	str	r3, [r7, #20]
 80155be:	e016      	b.n	80155ee <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 80155c0:	697b      	ldr	r3, [r7, #20]
 80155c2:	3301      	adds	r3, #1
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	f003 0301 	and.w	r3, r3, #1
 80155ca:	bfb8      	it	lt
 80155cc:	425b      	neglt	r3, r3
 80155ce:	009b      	lsls	r3, r3, #2
 80155d0:	683a      	ldr	r2, [r7, #0]
 80155d2:	4413      	add	r3, r2
 80155d4:	4619      	mov	r1, r3
 80155d6:	6878      	ldr	r0, [r7, #4]
 80155d8:	f7fe f9b2 	bl	8013940 <lfs_alloc>
 80155dc:	60f8      	str	r0, [r7, #12]
        if (err) {
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d001      	beq.n	80155e8 <lfs_dir_alloc+0x38>
            return err;
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	e058      	b.n	801569a <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 80155e8:	697b      	ldr	r3, [r7, #20]
 80155ea:	3301      	adds	r3, #1
 80155ec:	617b      	str	r3, [r7, #20]
 80155ee:	697b      	ldr	r3, [r7, #20]
 80155f0:	2b01      	cmp	r3, #1
 80155f2:	dde5      	ble.n	80155c0 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 80155f4:	683b      	ldr	r3, [r7, #0]
 80155f6:	2200      	movs	r2, #0
 80155f8:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 80155fa:	6879      	ldr	r1, [r7, #4]
 80155fc:	683b      	ldr	r3, [r7, #0]
 80155fe:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8015600:	683a      	ldr	r2, [r7, #0]
 8015602:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8015604:	2004      	movs	r0, #4
 8015606:	9003      	str	r0, [sp, #12]
 8015608:	9202      	str	r2, [sp, #8]
 801560a:	2200      	movs	r2, #0
 801560c:	9201      	str	r2, [sp, #4]
 801560e:	9300      	str	r3, [sp, #0]
 8015610:	2304      	movs	r3, #4
 8015612:	460a      	mov	r2, r1
 8015614:	2100      	movs	r1, #0
 8015616:	6878      	ldr	r0, [r7, #4]
 8015618:	f7fd fb08 	bl	8012c2c <lfs_bd_read>
 801561c:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 801561e:	683b      	ldr	r3, [r7, #0]
 8015620:	689b      	ldr	r3, [r3, #8]
 8015622:	4618      	mov	r0, r3
 8015624:	f7fd fa96 	bl	8012b54 <lfs_fromle32>
 8015628:	4602      	mov	r2, r0
 801562a:	683b      	ldr	r3, [r7, #0]
 801562c:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 801562e:	693b      	ldr	r3, [r7, #16]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d005      	beq.n	8015640 <lfs_dir_alloc+0x90>
 8015634:	693b      	ldr	r3, [r7, #16]
 8015636:	f113 0f54 	cmn.w	r3, #84	; 0x54
 801563a:	d001      	beq.n	8015640 <lfs_dir_alloc+0x90>
        return err;
 801563c:	693b      	ldr	r3, [r7, #16]
 801563e:	e02c      	b.n	801569a <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015646:	2b00      	cmp	r3, #0
 8015648:	dd0e      	ble.n	8015668 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 801564a:	683b      	ldr	r3, [r7, #0]
 801564c:	689a      	ldr	r2, [r3, #8]
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015654:	3301      	adds	r3, #1
 8015656:	f043 0301 	orr.w	r3, r3, #1
 801565a:	4619      	mov	r1, r3
 801565c:	4610      	mov	r0, r2
 801565e:	f7fd fa2e 	bl	8012abe <lfs_alignup>
 8015662:	4602      	mov	r2, r0
 8015664:	683b      	ldr	r3, [r7, #0]
 8015666:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8015668:	683b      	ldr	r3, [r7, #0]
 801566a:	2204      	movs	r2, #4
 801566c:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 801566e:	683b      	ldr	r3, [r7, #0]
 8015670:	f04f 32ff 	mov.w	r2, #4294967295
 8015674:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 8015676:	683b      	ldr	r3, [r7, #0]
 8015678:	2200      	movs	r2, #0
 801567a:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 801567c:	683b      	ldr	r3, [r7, #0]
 801567e:	f04f 32ff 	mov.w	r2, #4294967295
 8015682:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8015684:	683b      	ldr	r3, [r7, #0]
 8015686:	f04f 32ff 	mov.w	r2, #4294967295
 801568a:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 801568c:	683b      	ldr	r3, [r7, #0]
 801568e:	2200      	movs	r2, #0
 8015690:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 8015692:	683b      	ldr	r3, [r7, #0]
 8015694:	2200      	movs	r2, #0
 8015696:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8015698:	2300      	movs	r3, #0
}
 801569a:	4618      	mov	r0, r3
 801569c:	3718      	adds	r7, #24
 801569e:	46bd      	mov	sp, r7
 80156a0:	bd80      	pop	{r7, pc}

080156a2 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 80156a2:	b580      	push	{r7, lr}
 80156a4:	b092      	sub	sp, #72	; 0x48
 80156a6:	af04      	add	r7, sp, #16
 80156a8:	60f8      	str	r0, [r7, #12]
 80156aa:	60b9      	str	r1, [r7, #8]
 80156ac:	607a      	str	r2, [r7, #4]
 80156ae:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 80156b0:	f107 0310 	add.w	r3, r7, #16
 80156b4:	4619      	mov	r1, r3
 80156b6:	68f8      	ldr	r0, [r7, #12]
 80156b8:	f7ff ff7a 	bl	80155b0 <lfs_dir_alloc>
 80156bc:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 80156be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d001      	beq.n	80156c8 <lfs_dir_split+0x26>
        return err;
 80156c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156c6:	e03c      	b.n	8015742 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 80156c8:	68bb      	ldr	r3, [r7, #8]
 80156ca:	7ddb      	ldrb	r3, [r3, #23]
 80156cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 80156d0:	68bb      	ldr	r3, [r7, #8]
 80156d2:	699b      	ldr	r3, [r3, #24]
 80156d4:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 80156d6:	68bb      	ldr	r3, [r7, #8]
 80156d8:	69db      	ldr	r3, [r3, #28]
 80156da:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 80156dc:	f107 0110 	add.w	r1, r7, #16
 80156e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80156e4:	9302      	str	r3, [sp, #8]
 80156e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80156ea:	9301      	str	r3, [sp, #4]
 80156ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80156ee:	9300      	str	r3, [sp, #0]
 80156f0:	683b      	ldr	r3, [r7, #0]
 80156f2:	687a      	ldr	r2, [r7, #4]
 80156f4:	68f8      	ldr	r0, [r7, #12]
 80156f6:	f000 f879 	bl	80157ec <lfs_dir_compact>
 80156fa:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 80156fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156fe:	2b00      	cmp	r3, #0
 8015700:	da01      	bge.n	8015706 <lfs_dir_split+0x64>
        return res;
 8015702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015704:	e01d      	b.n	8015742 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 8015706:	693a      	ldr	r2, [r7, #16]
 8015708:	68bb      	ldr	r3, [r7, #8]
 801570a:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 801570c:	697a      	ldr	r2, [r7, #20]
 801570e:	68bb      	ldr	r3, [r7, #8]
 8015710:	61da      	str	r2, [r3, #28]
    dir->split = true;
 8015712:	68bb      	ldr	r3, [r7, #8]
 8015714:	2201      	movs	r2, #1
 8015716:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8015718:	68ba      	ldr	r2, [r7, #8]
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	3320      	adds	r3, #32
 801571e:	4619      	mov	r1, r3
 8015720:	4610      	mov	r0, r2
 8015722:	f7fd fdd7 	bl	80132d4 <lfs_pair_cmp>
 8015726:	4603      	mov	r3, r0
 8015728:	2b00      	cmp	r3, #0
 801572a:	d109      	bne.n	8015740 <lfs_dir_split+0x9e>
 801572c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015730:	2b00      	cmp	r3, #0
 8015732:	d105      	bne.n	8015740 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8015734:	693a      	ldr	r2, [r7, #16]
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 801573a:	697a      	ldr	r2, [r7, #20]
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 8015740:	2300      	movs	r3, #0
}
 8015742:	4618      	mov	r0, r3
 8015744:	3738      	adds	r7, #56	; 0x38
 8015746:	46bd      	mov	sp, r7
 8015748:	bd80      	pop	{r7, pc}

0801574a <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 801574a:	b580      	push	{r7, lr}
 801574c:	b086      	sub	sp, #24
 801574e:	af00      	add	r7, sp, #0
 8015750:	60f8      	str	r0, [r7, #12]
 8015752:	60b9      	str	r1, [r7, #8]
 8015754:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 801575a:	68b8      	ldr	r0, [r7, #8]
 801575c:	f7fd febd 	bl	80134da <lfs_tag_dsize>
 8015760:	4602      	mov	r2, r0
 8015762:	697b      	ldr	r3, [r7, #20]
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	441a      	add	r2, r3
 8015768:	697b      	ldr	r3, [r7, #20]
 801576a:	601a      	str	r2, [r3, #0]
    return 0;
 801576c:	2300      	movs	r3, #0
}
 801576e:	4618      	mov	r0, r3
 8015770:	3718      	adds	r7, #24
 8015772:	46bd      	mov	sp, r7
 8015774:	bd80      	pop	{r7, pc}

08015776 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8015776:	b580      	push	{r7, lr}
 8015778:	b086      	sub	sp, #24
 801577a:	af00      	add	r7, sp, #0
 801577c:	60f8      	str	r0, [r7, #12]
 801577e:	60b9      	str	r1, [r7, #8]
 8015780:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8015786:	697b      	ldr	r3, [r7, #20]
 8015788:	6818      	ldr	r0, [r3, #0]
 801578a:	697b      	ldr	r3, [r7, #20]
 801578c:	6859      	ldr	r1, [r3, #4]
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	68ba      	ldr	r2, [r7, #8]
 8015792:	f7ff fd51 	bl	8015238 <lfs_dir_commitattr>
 8015796:	4603      	mov	r3, r0
}
 8015798:	4618      	mov	r0, r3
 801579a:	3718      	adds	r7, #24
 801579c:	46bd      	mov	sp, r7
 801579e:	bd80      	pop	{r7, pc}

080157a0 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 80157a0:	b480      	push	{r7}
 80157a2:	b083      	sub	sp, #12
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	6078      	str	r0, [r7, #4]
 80157a8:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80157ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	dd11      	ble.n	80157d8 <lfs_dir_needsrelocation+0x38>
 80157b4:	683b      	ldr	r3, [r7, #0]
 80157b6:	689b      	ldr	r3, [r3, #8]
 80157b8:	3301      	adds	r3, #1
 80157ba:	687a      	ldr	r2, [r7, #4]
 80157bc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80157be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80157c0:	3201      	adds	r2, #1
 80157c2:	f042 0201 	orr.w	r2, r2, #1
 80157c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80157ca:	fb01 f202 	mul.w	r2, r1, r2
 80157ce:	1a9b      	subs	r3, r3, r2
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d101      	bne.n	80157d8 <lfs_dir_needsrelocation+0x38>
 80157d4:	2301      	movs	r3, #1
 80157d6:	e000      	b.n	80157da <lfs_dir_needsrelocation+0x3a>
 80157d8:	2300      	movs	r3, #0
 80157da:	f003 0301 	and.w	r3, r3, #1
 80157de:	b2db      	uxtb	r3, r3
}
 80157e0:	4618      	mov	r0, r3
 80157e2:	370c      	adds	r7, #12
 80157e4:	46bd      	mov	sp, r7
 80157e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ea:	4770      	bx	lr

080157ec <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b0a4      	sub	sp, #144	; 0x90
 80157f0:	af0a      	add	r7, sp, #40	; 0x28
 80157f2:	60f8      	str	r0, [r7, #12]
 80157f4:	60b9      	str	r1, [r7, #8]
 80157f6:	607a      	str	r2, [r7, #4]
 80157f8:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 80157fa:	2300      	movs	r3, #0
 80157fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 8015800:	68b9      	ldr	r1, [r7, #8]
 8015802:	68f8      	ldr	r0, [r7, #12]
 8015804:	f7ff ffcc 	bl	80157a0 <lfs_dir_needsrelocation>
 8015808:	4603      	mov	r3, r0
 801580a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 801580e:	68bb      	ldr	r3, [r7, #8]
 8015810:	689b      	ldr	r3, [r3, #8]
 8015812:	1c5a      	adds	r2, r3, #1
 8015814:	68bb      	ldr	r3, [r7, #8]
 8015816:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8015818:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 801581c:	2b00      	cmp	r3, #0
 801581e:	d00e      	beq.n	801583e <lfs_dir_compact+0x52>
 8015820:	68bb      	ldr	r3, [r7, #8]
 8015822:	2200      	movs	r2, #0
 8015824:	657a      	str	r2, [r7, #84]	; 0x54
 8015826:	2201      	movs	r2, #1
 8015828:	65ba      	str	r2, [r7, #88]	; 0x58
 801582a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801582e:	4611      	mov	r1, r2
 8015830:	4618      	mov	r0, r3
 8015832:	f7fd fd4f 	bl	80132d4 <lfs_pair_cmp>
 8015836:	4603      	mov	r3, r0
 8015838:	2b00      	cmp	r3, #0
 801583a:	f040 8155 	bne.w	8015ae8 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 801583e:	68bb      	ldr	r3, [r7, #8]
 8015840:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 8015842:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015844:	2300      	movs	r3, #0
 8015846:	643b      	str	r3, [r7, #64]	; 0x40
 8015848:	f04f 33ff 	mov.w	r3, #4294967295
 801584c:	647b      	str	r3, [r7, #68]	; 0x44
 801584e:	f04f 33ff 	mov.w	r3, #4294967295
 8015852:	64bb      	str	r3, [r7, #72]	; 0x48
 8015854:	2300      	movs	r3, #0
 8015856:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801585c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801585e:	2b00      	cmp	r3, #0
 8015860:	d004      	beq.n	801586c <lfs_dir_compact+0x80>
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015868:	3b08      	subs	r3, #8
 801586a:	e003      	b.n	8015874 <lfs_dir_compact+0x88>
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015870:	69db      	ldr	r3, [r3, #28]
 8015872:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8015874:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8015876:	68bb      	ldr	r3, [r7, #8]
 8015878:	685b      	ldr	r3, [r3, #4]
 801587a:	4619      	mov	r1, r3
 801587c:	68f8      	ldr	r0, [r7, #12]
 801587e:	f7fd fcc7 	bl	8013210 <lfs_bd_erase>
 8015882:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8015884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015886:	2b00      	cmp	r3, #0
 8015888:	d006      	beq.n	8015898 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 801588a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801588c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8015890:	f000 812c 	beq.w	8015aec <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8015894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015896:	e188      	b.n	8015baa <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8015898:	68bb      	ldr	r3, [r7, #8]
 801589a:	689b      	ldr	r3, [r3, #8]
 801589c:	4618      	mov	r0, r3
 801589e:	f7fd f964 	bl	8012b6a <lfs_tole32>
 80158a2:	4602      	mov	r2, r0
 80158a4:	68bb      	ldr	r3, [r7, #8]
 80158a6:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 80158a8:	68bb      	ldr	r3, [r7, #8]
 80158aa:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 80158ae:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80158b2:	2304      	movs	r3, #4
 80158b4:	68f8      	ldr	r0, [r7, #12]
 80158b6:	f7ff fc89 	bl	80151cc <lfs_dir_commitprog>
 80158ba:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 80158bc:	68bb      	ldr	r3, [r7, #8]
 80158be:	689b      	ldr	r3, [r3, #8]
 80158c0:	4618      	mov	r0, r3
 80158c2:	f7fd f947 	bl	8012b54 <lfs_fromle32>
 80158c6:	4602      	mov	r2, r0
 80158c8:	68bb      	ldr	r3, [r7, #8]
 80158ca:	609a      	str	r2, [r3, #8]
            if (err) {
 80158cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d006      	beq.n	80158e0 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 80158d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80158d4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80158d8:	f000 810a 	beq.w	8015af0 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 80158dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80158de:	e164      	b.n	8015baa <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 80158e0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80158e4:	425b      	negs	r3, r3
 80158e6:	b29b      	uxth	r3, r3
 80158e8:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80158ea:	68fa      	ldr	r2, [r7, #12]
 80158ec:	637a      	str	r2, [r7, #52]	; 0x34
 80158ee:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80158f2:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 80158f4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80158f8:	9208      	str	r2, [sp, #32]
 80158fa:	4aae      	ldr	r2, [pc, #696]	; (8015bb4 <lfs_dir_compact+0x3c8>)
 80158fc:	9207      	str	r2, [sp, #28]
 80158fe:	9306      	str	r3, [sp, #24]
 8015900:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8015904:	9305      	str	r3, [sp, #20]
 8015906:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 801590a:	9304      	str	r3, [sp, #16]
 801590c:	2300      	movs	r3, #0
 801590e:	9303      	str	r3, [sp, #12]
 8015910:	4ba9      	ldr	r3, [pc, #676]	; (8015bb8 <lfs_dir_compact+0x3cc>)
 8015912:	9302      	str	r3, [sp, #8]
 8015914:	683b      	ldr	r3, [r7, #0]
 8015916:	9301      	str	r3, [sp, #4]
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	9300      	str	r3, [sp, #0]
 801591c:	f04f 33ff 	mov.w	r3, #4294967295
 8015920:	2200      	movs	r2, #0
 8015922:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8015924:	68f8      	ldr	r0, [r7, #12]
 8015926:	f7fe faf7 	bl	8013f18 <lfs_dir_traverse>
 801592a:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 801592c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801592e:	2b00      	cmp	r3, #0
 8015930:	d006      	beq.n	8015940 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 8015932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015934:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8015938:	f000 80dc 	beq.w	8015af4 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 801593c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801593e:	e134      	b.n	8015baa <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8015940:	68bb      	ldr	r3, [r7, #8]
 8015942:	3318      	adds	r3, #24
 8015944:	4618      	mov	r0, r3
 8015946:	f7fd fcaa 	bl	801329e <lfs_pair_isnull>
 801594a:	4603      	mov	r3, r0
 801594c:	f083 0301 	eor.w	r3, r3, #1
 8015950:	b2db      	uxtb	r3, r3
 8015952:	2b00      	cmp	r3, #0
 8015954:	d022      	beq.n	801599c <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8015956:	68bb      	ldr	r3, [r7, #8]
 8015958:	3318      	adds	r3, #24
 801595a:	4618      	mov	r0, r3
 801595c:	f7fd fd2b 	bl	80133b6 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8015960:	68bb      	ldr	r3, [r7, #8]
 8015962:	7ddb      	ldrb	r3, [r3, #23]
 8015964:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8015968:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 801596a:	4a94      	ldr	r2, [pc, #592]	; (8015bbc <lfs_dir_compact+0x3d0>)
 801596c:	431a      	orrs	r2, r3
                        dir->tail);
 801596e:	68bb      	ldr	r3, [r7, #8]
 8015970:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8015972:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8015976:	68f8      	ldr	r0, [r7, #12]
 8015978:	f7ff fc5e 	bl	8015238 <lfs_dir_commitattr>
 801597c:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 801597e:	68bb      	ldr	r3, [r7, #8]
 8015980:	3318      	adds	r3, #24
 8015982:	4618      	mov	r0, r3
 8015984:	f7fd fcfd 	bl	8013382 <lfs_pair_fromle32>
                if (err) {
 8015988:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801598a:	2b00      	cmp	r3, #0
 801598c:	d006      	beq.n	801599c <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 801598e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015990:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8015994:	f000 80b0 	beq.w	8015af8 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8015998:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801599a:	e106      	b.n	8015baa <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 801599c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80159a0:	2200      	movs	r2, #0
 80159a2:	601a      	str	r2, [r3, #0]
 80159a4:	605a      	str	r2, [r3, #4]
 80159a6:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 80159a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80159ac:	f083 0301 	eor.w	r3, r3, #1
 80159b0:	b2db      	uxtb	r3, r3
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d011      	beq.n	80159da <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80159bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80159c0:	4611      	mov	r1, r2
 80159c2:	4618      	mov	r0, r3
 80159c4:	f7fd fd9d 	bl	8013502 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80159ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80159d2:	4611      	mov	r1, r2
 80159d4:	4618      	mov	r0, r3
 80159d6:	f7fd fd94 	bl	8013502 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80159e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80159e4:	4611      	mov	r1, r2
 80159e6:	4618      	mov	r0, r3
 80159e8:	f7fd fd8b 	bl	8013502 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80159ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80159f2:	f023 0303 	bic.w	r3, r3, #3
 80159f6:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 80159f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80159fc:	461a      	mov	r2, r3
 80159fe:	68b9      	ldr	r1, [r7, #8]
 8015a00:	68f8      	ldr	r0, [r7, #12]
 8015a02:	f7ff f9f3 	bl	8014dec <lfs_dir_getgstate>
 8015a06:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8015a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d001      	beq.n	8015a12 <lfs_dir_compact+0x226>
                return err;
 8015a0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015a10:	e0cb      	b.n	8015baa <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8015a12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015a16:	4618      	mov	r0, r3
 8015a18:	f7fd fd98 	bl	801354c <lfs_gstate_iszero>
 8015a1c:	4603      	mov	r3, r0
 8015a1e:	f083 0301 	eor.w	r3, r3, #1
 8015a22:	b2db      	uxtb	r3, r3
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d016      	beq.n	8015a56 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8015a28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	f7fd fe1f 	bl	8013670 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8015a32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015a36:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8015a3a:	4a61      	ldr	r2, [pc, #388]	; (8015bc0 <lfs_dir_compact+0x3d4>)
 8015a3c:	68f8      	ldr	r0, [r7, #12]
 8015a3e:	f7ff fbfb 	bl	8015238 <lfs_dir_commitattr>
 8015a42:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8015a44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d005      	beq.n	8015a56 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 8015a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015a4c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8015a50:	d054      	beq.n	8015afc <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 8015a52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015a54:	e0a9      	b.n	8015baa <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8015a56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015a5a:	4619      	mov	r1, r3
 8015a5c:	68f8      	ldr	r0, [r7, #12]
 8015a5e:	f7ff fc6b 	bl	8015338 <lfs_dir_commitcrc>
 8015a62:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8015a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d005      	beq.n	8015a76 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8015a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015a6c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8015a70:	d046      	beq.n	8015b00 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8015a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015a74:	e099      	b.n	8015baa <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8015a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015a78:	68fa      	ldr	r2, [r7, #12]
 8015a7a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8015a7c:	6992      	ldr	r2, [r2, #24]
 8015a7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8015a82:	fb01 f202 	mul.w	r2, r1, r2
 8015a86:	1a9b      	subs	r3, r3, r2
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d006      	beq.n	8015a9a <lfs_dir_compact+0x2ae>
 8015a8c:	4b4d      	ldr	r3, [pc, #308]	; (8015bc4 <lfs_dir_compact+0x3d8>)
 8015a8e:	4a4e      	ldr	r2, [pc, #312]	; (8015bc8 <lfs_dir_compact+0x3dc>)
 8015a90:	f44f 61e9 	mov.w	r1, #1864	; 0x748
 8015a94:	484d      	ldr	r0, [pc, #308]	; (8015bcc <lfs_dir_compact+0x3e0>)
 8015a96:	f005 f96b 	bl	801ad70 <__assert_func>
            lfs_pair_swap(dir->pair);
 8015a9a:	68bb      	ldr	r3, [r7, #8]
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	f7fd fbe9 	bl	8013274 <lfs_pair_swap>
            dir->count = end - begin;
 8015aa2:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8015aa6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8015aaa:	1ad3      	subs	r3, r2, r3
 8015aac:	b29a      	uxth	r2, r3
 8015aae:	68bb      	ldr	r3, [r7, #8]
 8015ab0:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8015ab2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015ab4:	68bb      	ldr	r3, [r7, #8]
 8015ab6:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8015ab8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015aba:	68bb      	ldr	r3, [r7, #8]
 8015abc:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	3348      	adds	r3, #72	; 0x48
 8015ac2:	2200      	movs	r2, #0
 8015ac4:	601a      	str	r2, [r3, #0]
 8015ac6:	605a      	str	r2, [r3, #4]
 8015ac8:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8015aca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8015ace:	f083 0301 	eor.w	r3, r3, #1
 8015ad2:	b2db      	uxtb	r3, r3
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d065      	beq.n	8015ba4 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	68fa      	ldr	r2, [r7, #12]
 8015adc:	333c      	adds	r3, #60	; 0x3c
 8015ade:	3230      	adds	r2, #48	; 0x30
 8015ae0:	ca07      	ldmia	r2, {r0, r1, r2}
 8015ae2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8015ae6:	e05d      	b.n	8015ba4 <lfs_dir_compact+0x3b8>
        goto relocate;
 8015ae8:	bf00      	nop
 8015aea:	e00a      	b.n	8015b02 <lfs_dir_compact+0x316>
                    goto relocate;
 8015aec:	bf00      	nop
 8015aee:	e008      	b.n	8015b02 <lfs_dir_compact+0x316>
                    goto relocate;
 8015af0:	bf00      	nop
 8015af2:	e006      	b.n	8015b02 <lfs_dir_compact+0x316>
                    goto relocate;
 8015af4:	bf00      	nop
 8015af6:	e004      	b.n	8015b02 <lfs_dir_compact+0x316>
                        goto relocate;
 8015af8:	bf00      	nop
 8015afa:	e002      	b.n	8015b02 <lfs_dir_compact+0x316>
                        goto relocate;
 8015afc:	bf00      	nop
 8015afe:	e000      	b.n	8015b02 <lfs_dir_compact+0x316>
                    goto relocate;
 8015b00:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8015b02:	2301      	movs	r3, #1
 8015b04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	3310      	adds	r3, #16
 8015b0c:	4619      	mov	r1, r3
 8015b0e:	68f8      	ldr	r0, [r7, #12]
 8015b10:	f7fd f866 	bl	8012be0 <lfs_cache_drop>
        if (!tired) {
 8015b14:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8015b18:	f083 0301 	eor.w	r3, r3, #1
 8015b1c:	b2db      	uxtb	r3, r3
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d009      	beq.n	8015b36 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8015b22:	68bb      	ldr	r3, [r7, #8]
 8015b24:	685b      	ldr	r3, [r3, #4]
 8015b26:	4a2a      	ldr	r2, [pc, #168]	; (8015bd0 <lfs_dir_compact+0x3e4>)
 8015b28:	9200      	str	r2, [sp, #0]
 8015b2a:	f240 725a 	movw	r2, #1882	; 0x75a
 8015b2e:	4927      	ldr	r1, [pc, #156]	; (8015bcc <lfs_dir_compact+0x3e0>)
 8015b30:	4828      	ldr	r0, [pc, #160]	; (8015bd4 <lfs_dir_compact+0x3e8>)
 8015b32:	f006 f957 	bl	801bde4 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8015b36:	68bb      	ldr	r3, [r7, #8]
 8015b38:	2200      	movs	r2, #0
 8015b3a:	617a      	str	r2, [r7, #20]
 8015b3c:	2201      	movs	r2, #1
 8015b3e:	61ba      	str	r2, [r7, #24]
 8015b40:	f107 0214 	add.w	r2, r7, #20
 8015b44:	4611      	mov	r1, r2
 8015b46:	4618      	mov	r0, r3
 8015b48:	f7fd fbc4 	bl	80132d4 <lfs_pair_cmp>
 8015b4c:	4603      	mov	r3, r0
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d10c      	bne.n	8015b6c <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8015b52:	68bb      	ldr	r3, [r7, #8]
 8015b54:	685b      	ldr	r3, [r3, #4]
 8015b56:	4a1e      	ldr	r2, [pc, #120]	; (8015bd0 <lfs_dir_compact+0x3e4>)
 8015b58:	9200      	str	r2, [sp, #0]
 8015b5a:	f240 725f 	movw	r2, #1887	; 0x75f
 8015b5e:	491b      	ldr	r1, [pc, #108]	; (8015bcc <lfs_dir_compact+0x3e0>)
 8015b60:	481d      	ldr	r0, [pc, #116]	; (8015bd8 <lfs_dir_compact+0x3ec>)
 8015b62:	f006 f93f 	bl	801bde4 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8015b66:	f06f 031b 	mvn.w	r3, #27
 8015b6a:	e01e      	b.n	8015baa <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8015b6c:	68bb      	ldr	r3, [r7, #8]
 8015b6e:	3304      	adds	r3, #4
 8015b70:	4619      	mov	r1, r3
 8015b72:	68f8      	ldr	r0, [r7, #12]
 8015b74:	f7fd fee4 	bl	8013940 <lfs_alloc>
 8015b78:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8015b7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d00c      	beq.n	8015b9a <lfs_dir_compact+0x3ae>
 8015b80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015b82:	f113 0f1c 	cmn.w	r3, #28
 8015b86:	d106      	bne.n	8015b96 <lfs_dir_compact+0x3aa>
 8015b88:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8015b8c:	f083 0301 	eor.w	r3, r3, #1
 8015b90:	b2db      	uxtb	r3, r3
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d001      	beq.n	8015b9a <lfs_dir_compact+0x3ae>
            return err;
 8015b96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015b98:	e007      	b.n	8015baa <lfs_dir_compact+0x3be>
        }

        tired = false;
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
        continue;
 8015ba0:	bf00      	nop
    while (true) {
 8015ba2:	e64c      	b.n	801583e <lfs_dir_compact+0x52>
        break;
 8015ba4:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8015ba6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8015baa:	4618      	mov	r0, r3
 8015bac:	3768      	adds	r7, #104	; 0x68
 8015bae:	46bd      	mov	sp, r7
 8015bb0:	bd80      	pop	{r7, pc}
 8015bb2:	bf00      	nop
 8015bb4:	08015777 	.word	0x08015777
 8015bb8:	400ffc00 	.word	0x400ffc00
 8015bbc:	000ffc08 	.word	0x000ffc08
 8015bc0:	7ffffc0c 	.word	0x7ffffc0c
 8015bc4:	08021cac 	.word	0x08021cac
 8015bc8:	08022dc0 	.word	0x08022dc0
 8015bcc:	08021b40 	.word	0x08021b40
 8015bd0:	08021c54 	.word	0x08021c54
 8015bd4:	08021cd4 	.word	0x08021cd4
 8015bd8:	08021cf8 	.word	0x08021cf8

08015bdc <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8015bdc:	b590      	push	{r4, r7, lr}
 8015bde:	b097      	sub	sp, #92	; 0x5c
 8015be0:	af0a      	add	r7, sp, #40	; 0x28
 8015be2:	60f8      	str	r0, [r7, #12]
 8015be4:	60b9      	str	r1, [r7, #8]
 8015be6:	607a      	str	r2, [r7, #4]
 8015be8:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8015bea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015bee:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8015bf0:	e058      	b.n	8015ca4 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8015bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bf8:	b29b      	uxth	r3, r3
 8015bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015bfc:	b292      	uxth	r2, r2
 8015bfe:	4252      	negs	r2, r2
 8015c00:	b292      	uxth	r2, r2
 8015c02:	b212      	sxth	r2, r2
 8015c04:	f107 0118 	add.w	r1, r7, #24
 8015c08:	9108      	str	r1, [sp, #32]
 8015c0a:	4979      	ldr	r1, [pc, #484]	; (8015df0 <lfs_dir_splittingcompact+0x214>)
 8015c0c:	9107      	str	r1, [sp, #28]
 8015c0e:	9206      	str	r2, [sp, #24]
 8015c10:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8015c14:	9205      	str	r2, [sp, #20]
 8015c16:	9304      	str	r3, [sp, #16]
 8015c18:	2300      	movs	r3, #0
 8015c1a:	9303      	str	r3, [sp, #12]
 8015c1c:	4b75      	ldr	r3, [pc, #468]	; (8015df4 <lfs_dir_splittingcompact+0x218>)
 8015c1e:	9302      	str	r3, [sp, #8]
 8015c20:	683b      	ldr	r3, [r7, #0]
 8015c22:	9301      	str	r3, [sp, #4]
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	9300      	str	r3, [sp, #0]
 8015c28:	f04f 33ff 	mov.w	r3, #4294967295
 8015c2c:	2200      	movs	r2, #0
 8015c2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015c30:	68f8      	ldr	r0, [r7, #12]
 8015c32:	f7fe f971 	bl	8013f18 <lfs_dir_traverse>
 8015c36:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8015c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d001      	beq.n	8015c42 <lfs_dir_splittingcompact+0x66>
                return err;
 8015c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c40:	e0d1      	b.n	8015de6 <lfs_dir_splittingcompact+0x20a>
            }

            // space is complicated, we need room for tail, crc, gstate,
            // cleanup delete, and we cap at half a block to give room
            // for metadata updates.
            if (end - split < 0xff
 8015c42:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8015c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c48:	1ad3      	subs	r3, r2, r3
 8015c4a:	2bfe      	cmp	r3, #254	; 0xfe
 8015c4c:	d822      	bhi.n	8015c94 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015c52:	69db      	ldr	r3, [r3, #28]
 8015c54:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d004      	beq.n	8015c6c <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8015c68:	085b      	lsrs	r3, r3, #1
 8015c6a:	e003      	b.n	8015c74 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8015c6c:	68fb      	ldr	r3, [r7, #12]
 8015c6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015c70:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8015c72:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8015c74:	68fa      	ldr	r2, [r7, #12]
 8015c76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8015c78:	6992      	ldr	r2, [r2, #24]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8015c7a:	4611      	mov	r1, r2
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	f7fc ff1e 	bl	8012abe <lfs_alignup>
 8015c82:	4603      	mov	r3, r0
 8015c84:	4619      	mov	r1, r3
 8015c86:	4620      	mov	r0, r4
 8015c88:	f7fc fef4 	bl	8012a74 <lfs_min>
 8015c8c:	4602      	mov	r2, r0
 8015c8e:	69bb      	ldr	r3, [r7, #24]
 8015c90:	429a      	cmp	r2, r3
 8015c92:	d20e      	bcs.n	8015cb2 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8015c94:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8015c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c9a:	1ad3      	subs	r3, r2, r3
 8015c9c:	085b      	lsrs	r3, r3, #1
 8015c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ca0:	4413      	add	r3, r2
 8015ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8015ca4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8015ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015caa:	1ad3      	subs	r3, r2, r3
 8015cac:	2b01      	cmp	r3, #1
 8015cae:	d8a0      	bhi.n	8015bf2 <lfs_dir_splittingcompact+0x16>
 8015cb0:	e000      	b.n	8015cb4 <lfs_dir_splittingcompact+0xd8>
                break;
 8015cb2:	bf00      	nop
        }

        if (split == begin) {
 8015cb4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015cba:	429a      	cmp	r2, r3
 8015cbc:	d02d      	beq.n	8015d1a <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8015cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cc0:	b29b      	uxth	r3, r3
 8015cc2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8015cc6:	9202      	str	r2, [sp, #8]
 8015cc8:	9301      	str	r3, [sp, #4]
 8015cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015ccc:	9300      	str	r3, [sp, #0]
 8015cce:	683b      	ldr	r3, [r7, #0]
 8015cd0:	687a      	ldr	r2, [r7, #4]
 8015cd2:	68b9      	ldr	r1, [r7, #8]
 8015cd4:	68f8      	ldr	r0, [r7, #12]
 8015cd6:	f7ff fce4 	bl	80156a2 <lfs_dir_split>
 8015cda:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8015cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d005      	beq.n	8015cee <lfs_dir_splittingcompact+0x112>
 8015ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ce4:	f113 0f1c 	cmn.w	r3, #28
 8015ce8:	d001      	beq.n	8015cee <lfs_dir_splittingcompact+0x112>
            return err;
 8015cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cec:	e07b      	b.n	8015de6 <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 8015cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d00e      	beq.n	8015d12 <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8015cf4:	68bb      	ldr	r3, [r7, #8]
 8015cf6:	681a      	ldr	r2, [r3, #0]
 8015cf8:	68bb      	ldr	r3, [r7, #8]
 8015cfa:	685b      	ldr	r3, [r3, #4]
 8015cfc:	493e      	ldr	r1, [pc, #248]	; (8015df8 <lfs_dir_splittingcompact+0x21c>)
 8015cfe:	9101      	str	r1, [sp, #4]
 8015d00:	9300      	str	r3, [sp, #0]
 8015d02:	4613      	mov	r3, r2
 8015d04:	f240 72a9 	movw	r2, #1961	; 0x7a9
 8015d08:	493c      	ldr	r1, [pc, #240]	; (8015dfc <lfs_dir_splittingcompact+0x220>)
 8015d0a:	483d      	ldr	r0, [pc, #244]	; (8015e00 <lfs_dir_splittingcompact+0x224>)
 8015d0c:	f006 f86a 	bl	801bde4 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8015d10:	e004      	b.n	8015d1c <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8015d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d14:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 8015d18:	e767      	b.n	8015bea <lfs_dir_splittingcompact+0xe>
            break;
 8015d1a:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8015d1c:	68b9      	ldr	r1, [r7, #8]
 8015d1e:	68f8      	ldr	r0, [r7, #12]
 8015d20:	f7ff fd3e 	bl	80157a0 <lfs_dir_needsrelocation>
 8015d24:	4603      	mov	r3, r0
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d04e      	beq.n	8015dc8 <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8015d2a:	68bb      	ldr	r3, [r7, #8]
 8015d2c:	2200      	movs	r2, #0
 8015d2e:	613a      	str	r2, [r7, #16]
 8015d30:	2201      	movs	r2, #1
 8015d32:	617a      	str	r2, [r7, #20]
 8015d34:	f107 0210 	add.w	r2, r7, #16
 8015d38:	4611      	mov	r1, r2
 8015d3a:	4618      	mov	r0, r3
 8015d3c:	f7fd faca 	bl	80132d4 <lfs_pair_cmp>
 8015d40:	4603      	mov	r3, r0
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d140      	bne.n	8015dc8 <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 8015d46:	68f8      	ldr	r0, [r7, #12]
 8015d48:	f003 fa54 	bl	80191f4 <lfs_fs_rawsize>
 8015d4c:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8015d4e:	6a3b      	ldr	r3, [r7, #32]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	da01      	bge.n	8015d58 <lfs_dir_splittingcompact+0x17c>
            return size;
 8015d54:	6a3b      	ldr	r3, [r7, #32]
 8015d56:	e046      	b.n	8015de6 <lfs_dir_splittingcompact+0x20a>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015d5c:	6a1b      	ldr	r3, [r3, #32]
 8015d5e:	085a      	lsrs	r2, r3, #1
 8015d60:	6a3b      	ldr	r3, [r7, #32]
 8015d62:	429a      	cmp	r2, r3
 8015d64:	d930      	bls.n	8015dc8 <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8015d66:	68bb      	ldr	r3, [r7, #8]
 8015d68:	689b      	ldr	r3, [r3, #8]
 8015d6a:	4a23      	ldr	r2, [pc, #140]	; (8015df8 <lfs_dir_splittingcompact+0x21c>)
 8015d6c:	9200      	str	r2, [sp, #0]
 8015d6e:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8015d72:	4922      	ldr	r1, [pc, #136]	; (8015dfc <lfs_dir_splittingcompact+0x220>)
 8015d74:	4823      	ldr	r0, [pc, #140]	; (8015e04 <lfs_dir_splittingcompact+0x228>)
 8015d76:	f006 f835 	bl	801bde4 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8015d7a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8015d7e:	9302      	str	r3, [sp, #8]
 8015d80:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015d84:	9301      	str	r3, [sp, #4]
 8015d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015d88:	9300      	str	r3, [sp, #0]
 8015d8a:	683b      	ldr	r3, [r7, #0]
 8015d8c:	687a      	ldr	r2, [r7, #4]
 8015d8e:	68b9      	ldr	r1, [r7, #8]
 8015d90:	68f8      	ldr	r0, [r7, #12]
 8015d92:	f7ff fc86 	bl	80156a2 <lfs_dir_split>
 8015d96:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8015d98:	69fb      	ldr	r3, [r7, #28]
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d005      	beq.n	8015daa <lfs_dir_splittingcompact+0x1ce>
 8015d9e:	69fb      	ldr	r3, [r7, #28]
 8015da0:	f113 0f1c 	cmn.w	r3, #28
 8015da4:	d001      	beq.n	8015daa <lfs_dir_splittingcompact+0x1ce>
                return err;
 8015da6:	69fb      	ldr	r3, [r7, #28]
 8015da8:	e01d      	b.n	8015de6 <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 8015daa:	69fb      	ldr	r3, [r7, #28]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d007      	beq.n	8015dc0 <lfs_dir_splittingcompact+0x1e4>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8015db0:	4b11      	ldr	r3, [pc, #68]	; (8015df8 <lfs_dir_splittingcompact+0x21c>)
 8015db2:	f240 72c7 	movw	r2, #1991	; 0x7c7
 8015db6:	4911      	ldr	r1, [pc, #68]	; (8015dfc <lfs_dir_splittingcompact+0x220>)
 8015db8:	4813      	ldr	r0, [pc, #76]	; (8015e08 <lfs_dir_splittingcompact+0x22c>)
 8015dba:	f006 f813 	bl	801bde4 <iprintf>
 8015dbe:	e003      	b.n	8015dc8 <lfs_dir_splittingcompact+0x1ec>
            } else {
                end = begin;
 8015dc0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015dc4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8015dc8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8015dcc:	9302      	str	r3, [sp, #8]
 8015dce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015dd2:	9301      	str	r3, [sp, #4]
 8015dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015dd6:	9300      	str	r3, [sp, #0]
 8015dd8:	683b      	ldr	r3, [r7, #0]
 8015dda:	687a      	ldr	r2, [r7, #4]
 8015ddc:	68b9      	ldr	r1, [r7, #8]
 8015dde:	68f8      	ldr	r0, [r7, #12]
 8015de0:	f7ff fd04 	bl	80157ec <lfs_dir_compact>
 8015de4:	4603      	mov	r3, r0
}
 8015de6:	4618      	mov	r0, r3
 8015de8:	3734      	adds	r7, #52	; 0x34
 8015dea:	46bd      	mov	sp, r7
 8015dec:	bd90      	pop	{r4, r7, pc}
 8015dee:	bf00      	nop
 8015df0:	0801574b 	.word	0x0801574b
 8015df4:	400ffc00 	.word	0x400ffc00
 8015df8:	08021c54 	.word	0x08021c54
 8015dfc:	08021b40 	.word	0x08021b40
 8015e00:	08021d30 	.word	0x08021d30
 8015e04:	08021d60 	.word	0x08021d60
 8015e08:	08021d90 	.word	0x08021d90

08015e0c <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8015e0c:	b5b0      	push	{r4, r5, r7, lr}
 8015e0e:	b0a6      	sub	sp, #152	; 0x98
 8015e10:	af0a      	add	r7, sp, #40	; 0x28
 8015e12:	60f8      	str	r0, [r7, #12]
 8015e14:	60b9      	str	r1, [r7, #8]
 8015e16:	607a      	str	r2, [r7, #4]
 8015e18:	603b      	str	r3, [r7, #0]
    int state = 0;
 8015e1a:	2300      	movs	r3, #0
 8015e1c:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8015e1e:	2300      	movs	r3, #0
 8015e20:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 8015e24:	2300      	movs	r3, #0
 8015e26:	667b      	str	r3, [r7, #100]	; 0x64
 8015e28:	e06d      	b.n	8015f06 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8015e2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015e2c:	00db      	lsls	r3, r3, #3
 8015e2e:	683a      	ldr	r2, [r7, #0]
 8015e30:	4413      	add	r3, r2
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	4618      	mov	r0, r3
 8015e36:	f7fd fb09 	bl	801344c <lfs_tag_type3>
 8015e3a:	4603      	mov	r3, r0
 8015e3c:	461a      	mov	r2, r3
 8015e3e:	f240 4301 	movw	r3, #1025	; 0x401
 8015e42:	429a      	cmp	r2, r3
 8015e44:	d106      	bne.n	8015e54 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8015e46:	68bb      	ldr	r3, [r7, #8]
 8015e48:	8a9b      	ldrh	r3, [r3, #20]
 8015e4a:	3301      	adds	r3, #1
 8015e4c:	b29a      	uxth	r2, r3
 8015e4e:	68bb      	ldr	r3, [r7, #8]
 8015e50:	829a      	strh	r2, [r3, #20]
 8015e52:	e055      	b.n	8015f00 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8015e54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015e56:	00db      	lsls	r3, r3, #3
 8015e58:	683a      	ldr	r2, [r7, #0]
 8015e5a:	4413      	add	r3, r2
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	4618      	mov	r0, r3
 8015e60:	f7fd faf4 	bl	801344c <lfs_tag_type3>
 8015e64:	4603      	mov	r3, r0
 8015e66:	461a      	mov	r2, r3
 8015e68:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8015e6c:	429a      	cmp	r2, r3
 8015e6e:	d114      	bne.n	8015e9a <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8015e70:	68bb      	ldr	r3, [r7, #8]
 8015e72:	8a9b      	ldrh	r3, [r3, #20]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d106      	bne.n	8015e86 <lfs_dir_relocatingcommit+0x7a>
 8015e78:	4ba4      	ldr	r3, [pc, #656]	; (801610c <lfs_dir_relocatingcommit+0x300>)
 8015e7a:	4aa5      	ldr	r2, [pc, #660]	; (8016110 <lfs_dir_relocatingcommit+0x304>)
 8015e7c:	f240 71df 	movw	r1, #2015	; 0x7df
 8015e80:	48a4      	ldr	r0, [pc, #656]	; (8016114 <lfs_dir_relocatingcommit+0x308>)
 8015e82:	f004 ff75 	bl	801ad70 <__assert_func>
            dir->count -= 1;
 8015e86:	68bb      	ldr	r3, [r7, #8]
 8015e88:	8a9b      	ldrh	r3, [r3, #20]
 8015e8a:	3b01      	subs	r3, #1
 8015e8c:	b29a      	uxth	r2, r3
 8015e8e:	68bb      	ldr	r3, [r7, #8]
 8015e90:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8015e92:	2301      	movs	r3, #1
 8015e94:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8015e98:	e032      	b.n	8015f00 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8015e9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015e9c:	00db      	lsls	r3, r3, #3
 8015e9e:	683a      	ldr	r2, [r7, #0]
 8015ea0:	4413      	add	r3, r2
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	f7fd fac1 	bl	801342c <lfs_tag_type1>
 8015eaa:	4603      	mov	r3, r0
 8015eac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8015eb0:	d126      	bne.n	8015f00 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8015eb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015eb4:	00db      	lsls	r3, r3, #3
 8015eb6:	683a      	ldr	r2, [r7, #0]
 8015eb8:	4413      	add	r3, r2
 8015eba:	685b      	ldr	r3, [r3, #4]
 8015ebc:	681a      	ldr	r2, [r3, #0]
 8015ebe:	68bb      	ldr	r3, [r7, #8]
 8015ec0:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8015ec2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015ec4:	00db      	lsls	r3, r3, #3
 8015ec6:	683a      	ldr	r2, [r7, #0]
 8015ec8:	4413      	add	r3, r2
 8015eca:	685b      	ldr	r3, [r3, #4]
 8015ecc:	685a      	ldr	r2, [r3, #4]
 8015ece:	68bb      	ldr	r3, [r7, #8]
 8015ed0:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8015ed2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015ed4:	00db      	lsls	r3, r3, #3
 8015ed6:	683a      	ldr	r2, [r7, #0]
 8015ed8:	4413      	add	r3, r2
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	4618      	mov	r0, r3
 8015ede:	f7fd fac5 	bl	801346c <lfs_tag_chunk>
 8015ee2:	4603      	mov	r3, r0
 8015ee4:	f003 0301 	and.w	r3, r3, #1
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	bf14      	ite	ne
 8015eec:	2301      	movne	r3, #1
 8015eee:	2300      	moveq	r3, #0
 8015ef0:	b2da      	uxtb	r2, r3
 8015ef2:	68bb      	ldr	r3, [r7, #8]
 8015ef4:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8015ef6:	68bb      	ldr	r3, [r7, #8]
 8015ef8:	3318      	adds	r3, #24
 8015efa:	4618      	mov	r0, r3
 8015efc:	f7fd fa41 	bl	8013382 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8015f00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015f02:	3301      	adds	r3, #1
 8015f04:	667b      	str	r3, [r7, #100]	; 0x64
 8015f06:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015f08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015f0c:	429a      	cmp	r2, r3
 8015f0e:	db8c      	blt.n	8015e2a <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8015f10:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d02b      	beq.n	8015f70 <lfs_dir_relocatingcommit+0x164>
 8015f18:	68bb      	ldr	r3, [r7, #8]
 8015f1a:	8a9b      	ldrh	r3, [r3, #20]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d127      	bne.n	8015f70 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8015f20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d106      	bne.n	8015f36 <lfs_dir_relocatingcommit+0x12a>
 8015f28:	4b7b      	ldr	r3, [pc, #492]	; (8016118 <lfs_dir_relocatingcommit+0x30c>)
 8015f2a:	4a79      	ldr	r2, [pc, #484]	; (8016110 <lfs_dir_relocatingcommit+0x304>)
 8015f2c:	f240 71ec 	movw	r1, #2028	; 0x7ec
 8015f30:	4878      	ldr	r0, [pc, #480]	; (8016114 <lfs_dir_relocatingcommit+0x308>)
 8015f32:	f004 ff1d 	bl	801ad70 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8015f36:	68bb      	ldr	r3, [r7, #8]
 8015f38:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015f3c:	4619      	mov	r1, r3
 8015f3e:	68f8      	ldr	r0, [r7, #12]
 8015f40:	f002 fdca 	bl	8018ad8 <lfs_fs_pred>
 8015f44:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 8015f46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d005      	beq.n	8015f58 <lfs_dir_relocatingcommit+0x14c>
 8015f4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015f4e:	f113 0f02 	cmn.w	r3, #2
 8015f52:	d001      	beq.n	8015f58 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8015f54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015f56:	e204      	b.n	8016362 <lfs_dir_relocatingcommit+0x556>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8015f58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015f5a:	f113 0f02 	cmn.w	r3, #2
 8015f5e:	d007      	beq.n	8015f70 <lfs_dir_relocatingcommit+0x164>
 8015f60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015f64:	7ddb      	ldrb	r3, [r3, #23]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d002      	beq.n	8015f70 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8015f6a:	2302      	movs	r3, #2
 8015f6c:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 8015f6e:	e121      	b.n	80161b4 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8015f70:	68bb      	ldr	r3, [r7, #8]
 8015f72:	7d9b      	ldrb	r3, [r3, #22]
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	f000 80fb 	beq.w	8016170 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8015f7a:	68bb      	ldr	r3, [r7, #8]
 8015f7c:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8015f7e:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 8015f80:	68bb      	ldr	r3, [r7, #8]
 8015f82:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8015f84:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 8015f86:	68bb      	ldr	r3, [r7, #8]
 8015f88:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8015f8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8015f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8015f90:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8015f92:	68bb      	ldr	r3, [r7, #8]
 8015f94:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8015f96:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d004      	beq.n	8015fac <lfs_dir_relocatingcommit+0x1a0>
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015fa8:	3b08      	subs	r3, #8
 8015faa:	e003      	b.n	8015fb4 <lfs_dir_relocatingcommit+0x1a8>
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015fb0:	69db      	ldr	r3, [r3, #28]
 8015fb2:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8015fb4:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8015fb6:	68bb      	ldr	r3, [r7, #8]
 8015fb8:	3318      	adds	r3, #24
 8015fba:	4618      	mov	r0, r3
 8015fbc:	f7fd f9fb 	bl	80133b6 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8015fc0:	68bb      	ldr	r3, [r7, #8]
 8015fc2:	68da      	ldr	r2, [r3, #12]
 8015fc4:	68bb      	ldr	r3, [r7, #8]
 8015fc6:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8015fcc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 8015fd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015fd6:	9308      	str	r3, [sp, #32]
 8015fd8:	4b50      	ldr	r3, [pc, #320]	; (801611c <lfs_dir_relocatingcommit+0x310>)
 8015fda:	9307      	str	r3, [sp, #28]
 8015fdc:	2300      	movs	r3, #0
 8015fde:	9306      	str	r3, [sp, #24]
 8015fe0:	2300      	movs	r3, #0
 8015fe2:	9305      	str	r3, [sp, #20]
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	9304      	str	r3, [sp, #16]
 8015fe8:	2300      	movs	r3, #0
 8015fea:	9303      	str	r3, [sp, #12]
 8015fec:	2300      	movs	r3, #0
 8015fee:	9302      	str	r3, [sp, #8]
 8015ff0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015ff4:	9301      	str	r3, [sp, #4]
 8015ff6:	683b      	ldr	r3, [r7, #0]
 8015ff8:	9300      	str	r3, [sp, #0]
 8015ffa:	460b      	mov	r3, r1
 8015ffc:	68b9      	ldr	r1, [r7, #8]
 8015ffe:	68f8      	ldr	r0, [r7, #12]
 8016000:	f7fd ff8a 	bl	8013f18 <lfs_dir_traverse>
 8016004:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8016006:	68bb      	ldr	r3, [r7, #8]
 8016008:	3318      	adds	r3, #24
 801600a:	4618      	mov	r0, r3
 801600c:	f7fd f9b9 	bl	8013382 <lfs_pair_fromle32>
        if (err) {
 8016010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016012:	2b00      	cmp	r3, #0
 8016014:	d00b      	beq.n	801602e <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8016016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016018:	f113 0f1c 	cmn.w	r3, #28
 801601c:	f000 80aa 	beq.w	8016174 <lfs_dir_relocatingcommit+0x368>
 8016020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016022:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8016026:	f000 80a5 	beq.w	8016174 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 801602a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801602c:	e199      	b.n	8016362 <lfs_dir_relocatingcommit+0x556>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 801602e:	f107 031c 	add.w	r3, r7, #28
 8016032:	2200      	movs	r2, #0
 8016034:	601a      	str	r2, [r3, #0]
 8016036:	605a      	str	r2, [r3, #4]
 8016038:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016040:	f107 031c 	add.w	r3, r7, #28
 8016044:	4611      	mov	r1, r2
 8016046:	4618      	mov	r0, r3
 8016048:	f7fd fa5b 	bl	8013502 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8016052:	f107 031c 	add.w	r3, r7, #28
 8016056:	4611      	mov	r1, r2
 8016058:	4618      	mov	r0, r3
 801605a:	f7fd fa52 	bl	8013502 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8016064:	f107 031c 	add.w	r3, r7, #28
 8016068:	4611      	mov	r1, r2
 801606a:	4618      	mov	r0, r3
 801606c:	f7fd fa49 	bl	8013502 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8016070:	69fb      	ldr	r3, [r7, #28]
 8016072:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8016076:	f023 0303 	bic.w	r3, r3, #3
 801607a:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 801607c:	f107 031c 	add.w	r3, r7, #28
 8016080:	4618      	mov	r0, r3
 8016082:	f7fd fa63 	bl	801354c <lfs_gstate_iszero>
 8016086:	4603      	mov	r3, r0
 8016088:	f083 0301 	eor.w	r3, r3, #1
 801608c:	b2db      	uxtb	r3, r3
 801608e:	2b00      	cmp	r3, #0
 8016090:	d027      	beq.n	80160e2 <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8016092:	f107 031c 	add.w	r3, r7, #28
 8016096:	461a      	mov	r2, r3
 8016098:	68b9      	ldr	r1, [r7, #8]
 801609a:	68f8      	ldr	r0, [r7, #12]
 801609c:	f7fe fea6 	bl	8014dec <lfs_dir_getgstate>
 80160a0:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 80160a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d001      	beq.n	80160ac <lfs_dir_relocatingcommit+0x2a0>
                return err;
 80160a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80160aa:	e15a      	b.n	8016362 <lfs_dir_relocatingcommit+0x556>
            }

            lfs_gstate_tole32(&delta);
 80160ac:	f107 031c 	add.w	r3, r7, #28
 80160b0:	4618      	mov	r0, r3
 80160b2:	f7fd fadd 	bl	8013670 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 80160b6:	f107 031c 	add.w	r3, r7, #28
 80160ba:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80160be:	4a18      	ldr	r2, [pc, #96]	; (8016120 <lfs_dir_relocatingcommit+0x314>)
 80160c0:	68f8      	ldr	r0, [r7, #12]
 80160c2:	f7ff f8b9 	bl	8015238 <lfs_dir_commitattr>
 80160c6:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 80160c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d009      	beq.n	80160e2 <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80160ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80160d0:	f113 0f1c 	cmn.w	r3, #28
 80160d4:	d050      	beq.n	8016178 <lfs_dir_relocatingcommit+0x36c>
 80160d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80160d8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80160dc:	d04c      	beq.n	8016178 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 80160de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80160e0:	e13f      	b.n	8016362 <lfs_dir_relocatingcommit+0x556>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 80160e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80160e6:	4619      	mov	r1, r3
 80160e8:	68f8      	ldr	r0, [r7, #12]
 80160ea:	f7ff f925 	bl	8015338 <lfs_dir_commitcrc>
 80160ee:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 80160f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d016      	beq.n	8016124 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80160f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80160f8:	f113 0f1c 	cmn.w	r3, #28
 80160fc:	d03e      	beq.n	801617c <lfs_dir_relocatingcommit+0x370>
 80160fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016100:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8016104:	d03a      	beq.n	801617c <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8016106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016108:	e12b      	b.n	8016362 <lfs_dir_relocatingcommit+0x556>
 801610a:	bf00      	nop
 801610c:	08021dbc 	.word	0x08021dbc
 8016110:	08022dd0 	.word	0x08022dd0
 8016114:	08021b40 	.word	0x08021b40
 8016118:	08021dcc 	.word	0x08021dcc
 801611c:	08015777 	.word	0x08015777
 8016120:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8016124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016126:	68fa      	ldr	r2, [r7, #12]
 8016128:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801612a:	6992      	ldr	r2, [r2, #24]
 801612c:	fbb3 f1f2 	udiv	r1, r3, r2
 8016130:	fb01 f202 	mul.w	r2, r1, r2
 8016134:	1a9b      	subs	r3, r3, r2
 8016136:	2b00      	cmp	r3, #0
 8016138:	d006      	beq.n	8016148 <lfs_dir_relocatingcommit+0x33c>
 801613a:	4b8c      	ldr	r3, [pc, #560]	; (801636c <lfs_dir_relocatingcommit+0x560>)
 801613c:	4a8c      	ldr	r2, [pc, #560]	; (8016370 <lfs_dir_relocatingcommit+0x564>)
 801613e:	f640 0136 	movw	r1, #2102	; 0x836
 8016142:	488c      	ldr	r0, [pc, #560]	; (8016374 <lfs_dir_relocatingcommit+0x568>)
 8016144:	f004 fe14 	bl	801ad70 <__assert_func>
        dir->off = commit.off;
 8016148:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801614a:	68bb      	ldr	r3, [r7, #8]
 801614c:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 801614e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016150:	68bb      	ldr	r3, [r7, #8]
 8016152:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	68fa      	ldr	r2, [r7, #12]
 8016158:	333c      	adds	r3, #60	; 0x3c
 801615a:	3230      	adds	r2, #48	; 0x30
 801615c:	ca07      	ldmia	r2, {r0, r1, r2}
 801615e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	3348      	adds	r3, #72	; 0x48
 8016166:	2200      	movs	r2, #0
 8016168:	601a      	str	r2, [r3, #0]
 801616a:	605a      	str	r2, [r3, #4]
 801616c:	609a      	str	r2, [r3, #8]
 801616e:	e021      	b.n	80161b4 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8016170:	bf00      	nop
 8016172:	e004      	b.n	801617e <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8016174:	bf00      	nop
 8016176:	e002      	b.n	801617e <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8016178:	bf00      	nop
 801617a:	e000      	b.n	801617e <lfs_dir_relocatingcommit+0x372>
                goto compact;
 801617c:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	3310      	adds	r3, #16
 8016182:	4619      	mov	r1, r3
 8016184:	68f8      	ldr	r0, [r7, #12]
 8016186:	f7fc fd2b 	bl	8012be0 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 801618a:	68bb      	ldr	r3, [r7, #8]
 801618c:	8a9b      	ldrh	r3, [r3, #20]
 801618e:	9302      	str	r3, [sp, #8]
 8016190:	2300      	movs	r3, #0
 8016192:	9301      	str	r3, [sp, #4]
 8016194:	68bb      	ldr	r3, [r7, #8]
 8016196:	9300      	str	r3, [sp, #0]
 8016198:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801619c:	683a      	ldr	r2, [r7, #0]
 801619e:	68b9      	ldr	r1, [r7, #8]
 80161a0:	68f8      	ldr	r0, [r7, #12]
 80161a2:	f7ff fd1b 	bl	8015bdc <lfs_dir_splittingcompact>
 80161a6:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 80161a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	da01      	bge.n	80161b2 <lfs_dir_relocatingcommit+0x3a6>
        return state;
 80161ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80161b0:	e0d7      	b.n	8016362 <lfs_dir_relocatingcommit+0x556>
    }

    goto fixmlist;
 80161b2:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	3304      	adds	r3, #4
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80161c6:	663b      	str	r3, [r7, #96]	; 0x60
 80161c8:	e0c6      	b.n	8016358 <lfs_dir_relocatingcommit+0x54c>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 80161ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80161cc:	3308      	adds	r3, #8
 80161ce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80161d2:	4611      	mov	r1, r2
 80161d4:	4618      	mov	r0, r3
 80161d6:	f7fd f87d 	bl	80132d4 <lfs_pair_cmp>
 80161da:	4603      	mov	r3, r0
 80161dc:	2b00      	cmp	r3, #0
 80161de:	f040 80b8 	bne.w	8016352 <lfs_dir_relocatingcommit+0x546>
            d->m = *dir;
 80161e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80161e4:	68ba      	ldr	r2, [r7, #8]
 80161e6:	f103 0408 	add.w	r4, r3, #8
 80161ea:	4615      	mov	r5, r2
 80161ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80161ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80161f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80161f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 80161f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80161fa:	3308      	adds	r3, #8
 80161fc:	687a      	ldr	r2, [r7, #4]
 80161fe:	429a      	cmp	r2, r3
 8016200:	f000 809d 	beq.w	801633e <lfs_dir_relocatingcommit+0x532>
                for (int i = 0; i < attrcount; i++) {
 8016204:	2300      	movs	r3, #0
 8016206:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016208:	e07b      	b.n	8016302 <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801620a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801620c:	00db      	lsls	r3, r3, #3
 801620e:	683a      	ldr	r2, [r7, #0]
 8016210:	4413      	add	r3, r2
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	4618      	mov	r0, r3
 8016216:	f7fd f919 	bl	801344c <lfs_tag_type3>
 801621a:	4603      	mov	r3, r0
 801621c:	461a      	mov	r2, r3
 801621e:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8016222:	429a      	cmp	r2, r3
 8016224:	d115      	bne.n	8016252 <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8016226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016228:	889c      	ldrh	r4, [r3, #4]
 801622a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801622c:	00db      	lsls	r3, r3, #3
 801622e:	683a      	ldr	r2, [r7, #0]
 8016230:	4413      	add	r3, r2
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	4618      	mov	r0, r3
 8016236:	f7fd f933 	bl	80134a0 <lfs_tag_id>
 801623a:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801623c:	429c      	cmp	r4, r3
 801623e:	d108      	bne.n	8016252 <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8016240:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016242:	f04f 32ff 	mov.w	r2, #4294967295
 8016246:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8016248:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801624a:	f04f 32ff 	mov.w	r2, #4294967295
 801624e:	60da      	str	r2, [r3, #12]
 8016250:	e054      	b.n	80162fc <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8016252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016254:	00db      	lsls	r3, r3, #3
 8016256:	683a      	ldr	r2, [r7, #0]
 8016258:	4413      	add	r3, r2
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	4618      	mov	r0, r3
 801625e:	f7fd f8f5 	bl	801344c <lfs_tag_type3>
 8016262:	4603      	mov	r3, r0
 8016264:	461a      	mov	r2, r3
 8016266:	f240 43ff 	movw	r3, #1279	; 0x4ff
 801626a:	429a      	cmp	r2, r3
 801626c:	d11c      	bne.n	80162a8 <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 801626e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016270:	889c      	ldrh	r4, [r3, #4]
 8016272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016274:	00db      	lsls	r3, r3, #3
 8016276:	683a      	ldr	r2, [r7, #0]
 8016278:	4413      	add	r3, r2
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	4618      	mov	r0, r3
 801627e:	f7fd f90f 	bl	80134a0 <lfs_tag_id>
 8016282:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8016284:	429c      	cmp	r4, r3
 8016286:	d90f      	bls.n	80162a8 <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 8016288:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801628a:	889b      	ldrh	r3, [r3, #4]
 801628c:	3b01      	subs	r3, #1
 801628e:	b29a      	uxth	r2, r3
 8016290:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016292:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8016294:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016296:	799b      	ldrb	r3, [r3, #6]
 8016298:	2b02      	cmp	r3, #2
 801629a:	d12f      	bne.n	80162fc <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 801629c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801629e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80162a0:	1e5a      	subs	r2, r3, #1
 80162a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80162a4:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 80162a6:	e029      	b.n	80162fc <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 80162a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80162aa:	00db      	lsls	r3, r3, #3
 80162ac:	683a      	ldr	r2, [r7, #0]
 80162ae:	4413      	add	r3, r2
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	4618      	mov	r0, r3
 80162b4:	f7fd f8ca 	bl	801344c <lfs_tag_type3>
 80162b8:	4603      	mov	r3, r0
 80162ba:	461a      	mov	r2, r3
 80162bc:	f240 4301 	movw	r3, #1025	; 0x401
 80162c0:	429a      	cmp	r2, r3
 80162c2:	d11b      	bne.n	80162fc <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 80162c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80162c6:	889c      	ldrh	r4, [r3, #4]
 80162c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80162ca:	00db      	lsls	r3, r3, #3
 80162cc:	683a      	ldr	r2, [r7, #0]
 80162ce:	4413      	add	r3, r2
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	4618      	mov	r0, r3
 80162d4:	f7fd f8e4 	bl	80134a0 <lfs_tag_id>
 80162d8:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 80162da:	429c      	cmp	r4, r3
 80162dc:	d30e      	bcc.n	80162fc <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 80162de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80162e0:	889b      	ldrh	r3, [r3, #4]
 80162e2:	3301      	adds	r3, #1
 80162e4:	b29a      	uxth	r2, r3
 80162e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80162e8:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 80162ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80162ec:	799b      	ldrb	r3, [r3, #6]
 80162ee:	2b02      	cmp	r3, #2
 80162f0:	d104      	bne.n	80162fc <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 80162f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80162f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80162f6:	1c5a      	adds	r2, r3, #1
 80162f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80162fa:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 80162fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80162fe:	3301      	adds	r3, #1
 8016300:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016302:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016304:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016308:	429a      	cmp	r2, r3
 801630a:	f6ff af7e 	blt.w	801620a <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 801630e:	e016      	b.n	801633e <lfs_dir_relocatingcommit+0x532>
                // we split and id is on tail now
                d->id -= d->m.count;
 8016310:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016312:	889a      	ldrh	r2, [r3, #4]
 8016314:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016316:	8b9b      	ldrh	r3, [r3, #28]
 8016318:	1ad3      	subs	r3, r2, r3
 801631a:	b29a      	uxth	r2, r3
 801631c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801631e:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8016320:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016322:	f103 0108 	add.w	r1, r3, #8
 8016326:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016328:	3320      	adds	r3, #32
 801632a:	461a      	mov	r2, r3
 801632c:	68f8      	ldr	r0, [r7, #12]
 801632e:	f7fe fd41 	bl	8014db4 <lfs_dir_fetch>
 8016332:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 8016334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016336:	2b00      	cmp	r3, #0
 8016338:	d001      	beq.n	801633e <lfs_dir_relocatingcommit+0x532>
                    return err;
 801633a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801633c:	e011      	b.n	8016362 <lfs_dir_relocatingcommit+0x556>
            while (d->id >= d->m.count && d->m.split) {
 801633e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016340:	889a      	ldrh	r2, [r3, #4]
 8016342:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016344:	8b9b      	ldrh	r3, [r3, #28]
 8016346:	429a      	cmp	r2, r3
 8016348:	d303      	bcc.n	8016352 <lfs_dir_relocatingcommit+0x546>
 801634a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801634c:	7fdb      	ldrb	r3, [r3, #31]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d1de      	bne.n	8016310 <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8016352:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	663b      	str	r3, [r7, #96]	; 0x60
 8016358:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801635a:	2b00      	cmp	r3, #0
 801635c:	f47f af35 	bne.w	80161ca <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 8016360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8016362:	4618      	mov	r0, r3
 8016364:	3770      	adds	r7, #112	; 0x70
 8016366:	46bd      	mov	sp, r7
 8016368:	bdb0      	pop	{r4, r5, r7, pc}
 801636a:	bf00      	nop
 801636c:	08021cac 	.word	0x08021cac
 8016370:	08022dd0 	.word	0x08022dd0
 8016374:	08021b40 	.word	0x08021b40

08016378 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8016378:	b5b0      	push	{r4, r5, r7, lr}
 801637a:	b0bc      	sub	sp, #240	; 0xf0
 801637c:	af04      	add	r7, sp, #16
 801637e:	60f8      	str	r0, [r7, #12]
 8016380:	60b9      	str	r1, [r7, #8]
 8016382:	607a      	str	r2, [r7, #4]
 8016384:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801638a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801638e:	e045      	b.n	801641c <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8016390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016394:	3308      	adds	r3, #8
 8016396:	68ba      	ldr	r2, [r7, #8]
 8016398:	429a      	cmp	r2, r3
 801639a:	d03a      	beq.n	8016412 <lfs_dir_orphaningcommit+0x9a>
 801639c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80163a0:	3308      	adds	r3, #8
 80163a2:	68ba      	ldr	r2, [r7, #8]
 80163a4:	4611      	mov	r1, r2
 80163a6:	4618      	mov	r0, r3
 80163a8:	f7fc ff94 	bl	80132d4 <lfs_pair_cmp>
 80163ac:	4603      	mov	r3, r0
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d12f      	bne.n	8016412 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80163b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80163b6:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80163b8:	2b01      	cmp	r3, #1
 80163ba:	d12a      	bne.n	8016412 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80163bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80163c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80163c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d023      	beq.n	8016412 <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 80163ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80163ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80163d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80163d6:	429a      	cmp	r2, r3
 80163d8:	d91b      	bls.n	8016412 <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 80163da:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80163de:	68f8      	ldr	r0, [r7, #12]
 80163e0:	f001 f91a 	bl	8017618 <lfs_file_outline>
 80163e4:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 80163e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d002      	beq.n	80163f6 <lfs_dir_orphaningcommit+0x7e>
                return err;
 80163f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80163f4:	e2ad      	b.n	8016952 <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 80163f6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80163fa:	68f8      	ldr	r0, [r7, #12]
 80163fc:	f001 f92e 	bl	801765c <lfs_file_flush>
 8016400:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8016404:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016408:	2b00      	cmp	r3, #0
 801640a:	d002      	beq.n	8016412 <lfs_dir_orphaningcommit+0x9a>
                return err;
 801640c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016410:	e29f      	b.n	8016952 <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8016412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801641c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016420:	2b00      	cmp	r3, #0
 8016422:	d1b5      	bne.n	8016390 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8016424:	68bb      	ldr	r3, [r7, #8]
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801642c:	68bb      	ldr	r3, [r7, #8]
 801642e:	685b      	ldr	r3, [r3, #4]
 8016430:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 8016434:	68bb      	ldr	r3, [r7, #8]
 8016436:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 801643a:	461d      	mov	r5, r3
 801643c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801643e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016440:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8016444:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8016448:	68ba      	ldr	r2, [r7, #8]
 801644a:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 801644e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8016452:	9301      	str	r3, [sp, #4]
 8016454:	683b      	ldr	r3, [r7, #0]
 8016456:	9300      	str	r3, [sp, #0]
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	68f8      	ldr	r0, [r7, #12]
 801645c:	f7ff fcd6 	bl	8015e0c <lfs_dir_relocatingcommit>
 8016460:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8016464:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016468:	2b00      	cmp	r3, #0
 801646a:	da02      	bge.n	8016472 <lfs_dir_orphaningcommit+0xfa>
        return state;
 801646c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016470:	e26f      	b.n	8016952 <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8016472:	68bb      	ldr	r3, [r7, #8]
 8016474:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8016478:	4611      	mov	r1, r2
 801647a:	4618      	mov	r0, r3
 801647c:	f7fc ff2a 	bl	80132d4 <lfs_pair_cmp>
 8016480:	4603      	mov	r3, r0
 8016482:	2b00      	cmp	r3, #0
 8016484:	d109      	bne.n	801649a <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8016486:	68bb      	ldr	r3, [r7, #8]
 8016488:	461d      	mov	r5, r3
 801648a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 801648e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016490:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016492:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016496:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 801649a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801649e:	2b02      	cmp	r3, #2
 80164a0:	d14a      	bne.n	8016538 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	3348      	adds	r3, #72	; 0x48
 80164a6:	461a      	mov	r2, r3
 80164a8:	68b9      	ldr	r1, [r7, #8]
 80164aa:	68f8      	ldr	r0, [r7, #12]
 80164ac:	f7fe fc9e 	bl	8014dec <lfs_dir_getgstate>
 80164b0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 80164b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d002      	beq.n	80164c2 <lfs_dir_orphaningcommit+0x14a>
            return err;
 80164bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80164c0:	e247      	b.n	8016952 <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 80164c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80164c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 80164c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80164ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 80164ce:	68bb      	ldr	r3, [r7, #8]
 80164d0:	3318      	adds	r3, #24
 80164d2:	4618      	mov	r0, r3
 80164d4:	f7fc ff6f 	bl	80133b6 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80164d8:	68bb      	ldr	r3, [r7, #8]
 80164da:	7ddb      	ldrb	r3, [r3, #23]
 80164dc:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80164e0:	051a      	lsls	r2, r3, #20
 80164e2:	4bc2      	ldr	r3, [pc, #776]	; (80167ec <lfs_dir_orphaningcommit+0x474>)
 80164e4:	4313      	orrs	r3, r2
 80164e6:	667b      	str	r3, [r7, #100]	; 0x64
 80164e8:	68bb      	ldr	r3, [r7, #8]
 80164ea:	3318      	adds	r3, #24
 80164ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80164ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80164f2:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80164f6:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80164fa:	2000      	movs	r0, #0
 80164fc:	9001      	str	r0, [sp, #4]
 80164fe:	2001      	movs	r0, #1
 8016500:	9000      	str	r0, [sp, #0]
 8016502:	68f8      	ldr	r0, [r7, #12]
 8016504:	f7ff fc82 	bl	8015e0c <lfs_dir_relocatingcommit>
 8016508:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 801650c:	68bb      	ldr	r3, [r7, #8]
 801650e:	3318      	adds	r3, #24
 8016510:	4618      	mov	r0, r3
 8016512:	f7fc ff36 	bl	8013382 <lfs_pair_fromle32>
        if (state < 0) {
 8016516:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801651a:	2b00      	cmp	r3, #0
 801651c:	da02      	bge.n	8016524 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 801651e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016522:	e216      	b.n	8016952 <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8016524:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8016528:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 801652c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801652e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016530:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8016534:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8016538:	2300      	movs	r3, #0
 801653a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 801653e:	e1fc      	b.n	801693a <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8016540:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8016544:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016548:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801654c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8016550:	4ca7      	ldr	r4, [pc, #668]	; (80167f0 <lfs_dir_orphaningcommit+0x478>)
 8016552:	9403      	str	r4, [sp, #12]
 8016554:	9102      	str	r1, [sp, #8]
 8016556:	9201      	str	r2, [sp, #4]
 8016558:	9300      	str	r3, [sp, #0]
 801655a:	4603      	mov	r3, r0
 801655c:	f44f 620c 	mov.w	r2, #2240	; 0x8c0
 8016560:	49a4      	ldr	r1, [pc, #656]	; (80167f4 <lfs_dir_orphaningcommit+0x47c>)
 8016562:	48a5      	ldr	r0, [pc, #660]	; (80167f8 <lfs_dir_orphaningcommit+0x480>)
 8016564:	f005 fc3e 	bl	801bde4 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8016568:	2300      	movs	r3, #0
 801656a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	f103 0220 	add.w	r2, r3, #32
 8016574:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8016578:	4611      	mov	r1, r2
 801657a:	4618      	mov	r0, r3
 801657c:	f7fc feaa 	bl	80132d4 <lfs_pair_cmp>
 8016580:	4603      	mov	r3, r0
 8016582:	2b00      	cmp	r3, #0
 8016584:	d107      	bne.n	8016596 <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8016586:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 801658e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801659a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801659e:	e037      	b.n	8016610 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 80165a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80165a4:	f103 0208 	add.w	r2, r3, #8
 80165a8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80165ac:	4611      	mov	r1, r2
 80165ae:	4618      	mov	r0, r3
 80165b0:	f7fc fe90 	bl	80132d4 <lfs_pair_cmp>
 80165b4:	4603      	mov	r3, r0
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d109      	bne.n	80165ce <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 80165ba:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80165be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80165c2:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 80165c4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80165c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80165cc:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 80165ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80165d2:	799b      	ldrb	r3, [r3, #6]
 80165d4:	2b02      	cmp	r3, #2
 80165d6:	d116      	bne.n	8016606 <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 80165d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80165dc:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80165e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80165e4:	4611      	mov	r1, r2
 80165e6:	4618      	mov	r0, r3
 80165e8:	f7fc fe74 	bl	80132d4 <lfs_pair_cmp>
 80165ec:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d109      	bne.n	8016606 <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 80165f2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80165f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80165fa:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 80165fc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8016600:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8016604:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8016606:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8016610:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8016614:	2b00      	cmp	r3, #0
 8016616:	d1c3      	bne.n	80165a0 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8016618:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801661c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8016620:	4619      	mov	r1, r3
 8016622:	68f8      	ldr	r0, [r7, #12]
 8016624:	f002 fae0 	bl	8018be8 <lfs_fs_parent>
 8016628:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 801662c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016630:	2b00      	cmp	r3, #0
 8016632:	da07      	bge.n	8016644 <lfs_dir_orphaningcommit+0x2cc>
 8016634:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016638:	f113 0f02 	cmn.w	r3, #2
 801663c:	d002      	beq.n	8016644 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 801663e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016642:	e186      	b.n	8016952 <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8016644:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016648:	f113 0f02 	cmn.w	r3, #2
 801664c:	bf14      	ite	ne
 801664e:	2301      	movne	r3, #1
 8016650:	2300      	moveq	r3, #0
 8016652:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 8016656:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801665a:	f113 0f02 	cmn.w	r3, #2
 801665e:	f000 809e 	beq.w	801679e <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 8016662:	2101      	movs	r1, #1
 8016664:	68f8      	ldr	r0, [r7, #12]
 8016666:	f002 fb17 	bl	8018c98 <lfs_fs_preporphans>
 801666a:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 801666e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016672:	2b00      	cmp	r3, #0
 8016674:	d002      	beq.n	801667c <lfs_dir_orphaningcommit+0x304>
                return err;
 8016676:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801667a:	e16a      	b.n	8016952 <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 801667c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8016680:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	3330      	adds	r3, #48	; 0x30
 8016688:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801668c:	4611      	mov	r1, r2
 801668e:	4618      	mov	r0, r3
 8016690:	f7fc ffae 	bl	80135f0 <lfs_gstate_hasmovehere>
 8016694:	4603      	mov	r3, r0
 8016696:	2b00      	cmp	r3, #0
 8016698:	d02d      	beq.n	80166f6 <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801669e:	4618      	mov	r0, r3
 80166a0:	f7fc fefe 	bl	80134a0 <lfs_tag_id>
 80166a4:	4603      	mov	r3, r0
 80166a6:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 80166aa:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80166ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80166ae:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 80166b2:	484f      	ldr	r0, [pc, #316]	; (80167f0 <lfs_dir_orphaningcommit+0x478>)
 80166b4:	9002      	str	r0, [sp, #8]
 80166b6:	9201      	str	r2, [sp, #4]
 80166b8:	9300      	str	r3, [sp, #0]
 80166ba:	460b      	mov	r3, r1
 80166bc:	f640 02ed 	movw	r2, #2285	; 0x8ed
 80166c0:	494c      	ldr	r1, [pc, #304]	; (80167f4 <lfs_dir_orphaningcommit+0x47c>)
 80166c2:	484e      	ldr	r0, [pc, #312]	; (80167fc <lfs_dir_orphaningcommit+0x484>)
 80166c4:	f005 fb8e 	bl	801bde4 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80166c8:	2200      	movs	r2, #0
 80166ca:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80166ce:	68f8      	ldr	r0, [r7, #12]
 80166d0:	f002 fb1c 	bl	8018d0c <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 80166d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80166d8:	4618      	mov	r0, r3
 80166da:	f7fc fee1 	bl	80134a0 <lfs_tag_id>
 80166de:	4603      	mov	r3, r0
 80166e0:	461a      	mov	r2, r3
 80166e2:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80166e6:	4293      	cmp	r3, r2
 80166e8:	d205      	bcs.n	80166f6 <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 80166ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80166ee:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80166f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 80166f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80166f8:	657b      	str	r3, [r7, #84]	; 0x54
 80166fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80166fc:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 80166fe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8016702:	4618      	mov	r0, r3
 8016704:	f7fc fe57 	bl	80133b6 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8016708:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 801670c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8016710:	4293      	cmp	r3, r2
 8016712:	d007      	beq.n	8016724 <lfs_dir_orphaningcommit+0x3ac>
 8016714:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8016718:	029b      	lsls	r3, r3, #10
 801671a:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 801671e:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8016722:	e000      	b.n	8016726 <lfs_dir_orphaningcommit+0x3ae>
 8016724:	2300      	movs	r3, #0
 8016726:	647b      	str	r3, [r7, #68]	; 0x44
 8016728:	2300      	movs	r3, #0
 801672a:	64bb      	str	r3, [r7, #72]	; 0x48
 801672c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016730:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016732:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8016736:	653b      	str	r3, [r7, #80]	; 0x50
 8016738:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801673c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8016740:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8016744:	2000      	movs	r0, #0
 8016746:	9001      	str	r0, [sp, #4]
 8016748:	2002      	movs	r0, #2
 801674a:	9000      	str	r0, [sp, #0]
 801674c:	68f8      	ldr	r0, [r7, #12]
 801674e:	f7ff fb5d 	bl	8015e0c <lfs_dir_relocatingcommit>
 8016752:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8016756:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801675a:	4618      	mov	r0, r3
 801675c:	f7fc fe11 	bl	8013382 <lfs_pair_fromle32>
            if (state < 0) {
 8016760:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016764:	2b00      	cmp	r3, #0
 8016766:	da02      	bge.n	801676e <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8016768:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801676c:	e0f1      	b.n	8016952 <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 801676e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016772:	2b01      	cmp	r3, #1
 8016774:	d113      	bne.n	801679e <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8016776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016778:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 801677c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801677e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 8016782:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8016786:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 801678a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801678c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801678e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8016792:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8016796:	2301      	movs	r3, #1
 8016798:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 801679c:	e0cd      	b.n	801693a <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 801679e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80167a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80167a6:	4619      	mov	r1, r3
 80167a8:	68f8      	ldr	r0, [r7, #12]
 80167aa:	f002 f995 	bl	8018ad8 <lfs_fs_pred>
 80167ae:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 80167b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d007      	beq.n	80167ca <lfs_dir_orphaningcommit+0x452>
 80167ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80167be:	f113 0f02 	cmn.w	r3, #2
 80167c2:	d002      	beq.n	80167ca <lfs_dir_orphaningcommit+0x452>
            return err;
 80167c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80167c8:	e0c3      	b.n	8016952 <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 80167ca:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d01a      	beq.n	8016808 <lfs_dir_orphaningcommit+0x490>
 80167d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80167d6:	f113 0f02 	cmn.w	r3, #2
 80167da:	d115      	bne.n	8016808 <lfs_dir_orphaningcommit+0x490>
 80167dc:	4b08      	ldr	r3, [pc, #32]	; (8016800 <lfs_dir_orphaningcommit+0x488>)
 80167de:	4a09      	ldr	r2, [pc, #36]	; (8016804 <lfs_dir_orphaningcommit+0x48c>)
 80167e0:	f44f 6111 	mov.w	r1, #2320	; 0x910
 80167e4:	4803      	ldr	r0, [pc, #12]	; (80167f4 <lfs_dir_orphaningcommit+0x47c>)
 80167e6:	f004 fac3 	bl	801ad70 <__assert_func>
 80167ea:	bf00      	nop
 80167ec:	000ffc08 	.word	0x000ffc08
 80167f0:	08021c54 	.word	0x08021c54
 80167f4:	08021b40 	.word	0x08021b40
 80167f8:	08021dd4 	.word	0x08021dd4
 80167fc:	08021e10 	.word	0x08021e10
 8016800:	08021e54 	.word	0x08021e54
 8016804:	08022dec 	.word	0x08022dec

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8016808:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801680c:	f113 0f02 	cmn.w	r3, #2
 8016810:	f000 8093 	beq.w	801693a <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8016814:	68fb      	ldr	r3, [r7, #12]
 8016816:	3330      	adds	r3, #48	; 0x30
 8016818:	4618      	mov	r0, r3
 801681a:	f7fc feb4 	bl	8013586 <lfs_gstate_hasorphans>
 801681e:	4603      	mov	r3, r0
 8016820:	2b00      	cmp	r3, #0
 8016822:	d011      	beq.n	8016848 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8016824:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8016828:	425b      	negs	r3, r3
 801682a:	b2db      	uxtb	r3, r3
 801682c:	b25b      	sxtb	r3, r3
 801682e:	4619      	mov	r1, r3
 8016830:	68f8      	ldr	r0, [r7, #12]
 8016832:	f002 fa31 	bl	8018c98 <lfs_fs_preporphans>
 8016836:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 801683a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801683e:	2b00      	cmp	r3, #0
 8016840:	d002      	beq.n	8016848 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 8016842:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016846:	e084      	b.n	8016952 <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8016848:	f240 33ff 	movw	r3, #1023	; 0x3ff
 801684c:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	3330      	adds	r3, #48	; 0x30
 8016854:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8016858:	4611      	mov	r1, r2
 801685a:	4618      	mov	r0, r3
 801685c:	f7fc fec8 	bl	80135f0 <lfs_gstate_hasmovehere>
 8016860:	4603      	mov	r3, r0
 8016862:	2b00      	cmp	r3, #0
 8016864:	d01c      	beq.n	80168a0 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801686a:	4618      	mov	r0, r3
 801686c:	f7fc fe18 	bl	80134a0 <lfs_tag_id>
 8016870:	4603      	mov	r3, r0
 8016872:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8016876:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8016878:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801687a:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 801687e:	4837      	ldr	r0, [pc, #220]	; (801695c <lfs_dir_orphaningcommit+0x5e4>)
 8016880:	9002      	str	r0, [sp, #8]
 8016882:	9201      	str	r2, [sp, #4]
 8016884:	9300      	str	r3, [sp, #0]
 8016886:	460b      	mov	r3, r1
 8016888:	f640 1221 	movw	r2, #2337	; 0x921
 801688c:	4934      	ldr	r1, [pc, #208]	; (8016960 <lfs_dir_orphaningcommit+0x5e8>)
 801688e:	4835      	ldr	r0, [pc, #212]	; (8016964 <lfs_dir_orphaningcommit+0x5ec>)
 8016890:	f005 faa8 	bl	801bde4 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8016894:	2200      	movs	r2, #0
 8016896:	f240 31ff 	movw	r1, #1023	; 0x3ff
 801689a:	68f8      	ldr	r0, [r7, #12]
 801689c:	f002 fa36 	bl	8018d0c <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 80168a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80168a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 80168a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80168a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 80168ac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80168b0:	4618      	mov	r0, r3
 80168b2:	f7fc fd80 	bl	80133b6 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80168b6:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80168ba:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80168be:	4293      	cmp	r3, r2
 80168c0:	d007      	beq.n	80168d2 <lfs_dir_orphaningcommit+0x55a>
 80168c2:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80168c6:	029b      	lsls	r3, r3, #10
 80168c8:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80168cc:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80168d0:	e000      	b.n	80168d4 <lfs_dir_orphaningcommit+0x55c>
 80168d2:	2300      	movs	r3, #0
 80168d4:	627b      	str	r3, [r7, #36]	; 0x24
 80168d6:	2300      	movs	r3, #0
 80168d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80168da:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80168de:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80168e2:	051a      	lsls	r2, r3, #20
 80168e4:	4b20      	ldr	r3, [pc, #128]	; (8016968 <lfs_dir_orphaningcommit+0x5f0>)
 80168e6:	4313      	orrs	r3, r2
 80168e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80168ea:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80168ee:	633b      	str	r3, [r7, #48]	; 0x30
 80168f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80168f4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80168f8:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80168fc:	2000      	movs	r0, #0
 80168fe:	9001      	str	r0, [sp, #4]
 8016900:	2002      	movs	r0, #2
 8016902:	9000      	str	r0, [sp, #0]
 8016904:	68f8      	ldr	r0, [r7, #12]
 8016906:	f7ff fa81 	bl	8015e0c <lfs_dir_relocatingcommit>
 801690a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 801690e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8016912:	4618      	mov	r0, r3
 8016914:	f7fc fd35 	bl	8013382 <lfs_pair_fromle32>
            if (state < 0) {
 8016918:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801691c:	2b00      	cmp	r3, #0
 801691e:	da02      	bge.n	8016926 <lfs_dir_orphaningcommit+0x5ae>
                return state;
 8016920:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016924:	e015      	b.n	8016952 <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 8016926:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 801692a:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 801692e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016930:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016932:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8016936:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 801693a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801693e:	2b01      	cmp	r3, #1
 8016940:	f43f adfe 	beq.w	8016540 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8016944:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8016948:	2b00      	cmp	r3, #0
 801694a:	d001      	beq.n	8016950 <lfs_dir_orphaningcommit+0x5d8>
 801694c:	2303      	movs	r3, #3
 801694e:	e000      	b.n	8016952 <lfs_dir_orphaningcommit+0x5da>
 8016950:	2300      	movs	r3, #0
}
 8016952:	4618      	mov	r0, r3
 8016954:	37e0      	adds	r7, #224	; 0xe0
 8016956:	46bd      	mov	sp, r7
 8016958:	bdb0      	pop	{r4, r5, r7, pc}
 801695a:	bf00      	nop
 801695c:	08021c54 	.word	0x08021c54
 8016960:	08021b40 	.word	0x08021b40
 8016964:	08021e10 	.word	0x08021e10
 8016968:	000ffc08 	.word	0x000ffc08

0801696c <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 801696c:	b580      	push	{r7, lr}
 801696e:	b086      	sub	sp, #24
 8016970:	af00      	add	r7, sp, #0
 8016972:	60f8      	str	r0, [r7, #12]
 8016974:	60b9      	str	r1, [r7, #8]
 8016976:	607a      	str	r2, [r7, #4]
 8016978:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 801697a:	683b      	ldr	r3, [r7, #0]
 801697c:	687a      	ldr	r2, [r7, #4]
 801697e:	68b9      	ldr	r1, [r7, #8]
 8016980:	68f8      	ldr	r0, [r7, #12]
 8016982:	f7ff fcf9 	bl	8016378 <lfs_dir_orphaningcommit>
 8016986:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8016988:	697b      	ldr	r3, [r7, #20]
 801698a:	2b00      	cmp	r3, #0
 801698c:	da01      	bge.n	8016992 <lfs_dir_commit+0x26>
        return orphans;
 801698e:	697b      	ldr	r3, [r7, #20]
 8016990:	e00d      	b.n	80169ae <lfs_dir_commit+0x42>
    }

    if (orphans) {
 8016992:	697b      	ldr	r3, [r7, #20]
 8016994:	2b00      	cmp	r3, #0
 8016996:	d009      	beq.n	80169ac <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8016998:	2100      	movs	r1, #0
 801699a:	68f8      	ldr	r0, [r7, #12]
 801699c:	f002 fa56 	bl	8018e4c <lfs_fs_deorphan>
 80169a0:	6138      	str	r0, [r7, #16]
        if (err) {
 80169a2:	693b      	ldr	r3, [r7, #16]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d001      	beq.n	80169ac <lfs_dir_commit+0x40>
            return err;
 80169a8:	693b      	ldr	r3, [r7, #16]
 80169aa:	e000      	b.n	80169ae <lfs_dir_commit+0x42>
        }
    }

    return 0;
 80169ac:	2300      	movs	r3, #0
}
 80169ae:	4618      	mov	r0, r3
 80169b0:	3718      	adds	r7, #24
 80169b2:	46bd      	mov	sp, r7
 80169b4:	bd80      	pop	{r7, pc}
	...

080169b8 <lfs_rawmkdir>:
#endif


/// Top level directory operations ///
#ifndef LFS_READONLY
static int lfs_rawmkdir(lfs_t *lfs, const char *path) {
 80169b8:	b5b0      	push	{r4, r5, r7, lr}
 80169ba:	b0b8      	sub	sp, #224	; 0xe0
 80169bc:	af00      	add	r7, sp, #0
 80169be:	6078      	str	r0, [r7, #4]
 80169c0:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 80169c2:	6878      	ldr	r0, [r7, #4]
 80169c4:	f002 fbe6 	bl	8019194 <lfs_fs_forceconsistency>
 80169c8:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 80169cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d002      	beq.n	80169da <lfs_rawmkdir+0x22>
        return err;
 80169d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80169d8:	e128      	b.n	8016c2c <lfs_rawmkdir+0x274>
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80169de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 80169e2:	f107 00ae 	add.w	r0, r7, #174	; 0xae
 80169e6:	463a      	mov	r2, r7
 80169e8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80169ec:	f103 0108 	add.w	r1, r3, #8
 80169f0:	4603      	mov	r3, r0
 80169f2:	6878      	ldr	r0, [r7, #4]
 80169f4:	f7fe faf0 	bl	8014fd8 <lfs_dir_find>
 80169f8:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 80169fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016a00:	f113 0f02 	cmn.w	r3, #2
 8016a04:	d105      	bne.n	8016a12 <lfs_rawmkdir+0x5a>
 8016a06:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8016a0a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8016a0e:	4293      	cmp	r3, r2
 8016a10:	d109      	bne.n	8016a26 <lfs_rawmkdir+0x6e>
        return (err < 0) ? err : LFS_ERR_EXIST;
 8016a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	da02      	bge.n	8016a20 <lfs_rawmkdir+0x68>
 8016a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016a1e:	e105      	b.n	8016c2c <lfs_rawmkdir+0x274>
 8016a20:	f06f 0310 	mvn.w	r3, #16
 8016a24:	e102      	b.n	8016c2c <lfs_rawmkdir+0x274>
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
 8016a26:	683b      	ldr	r3, [r7, #0]
 8016a28:	4618      	mov	r0, r3
 8016a2a:	f7e9 fc39 	bl	80002a0 <strlen>
 8016a2e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    if (nlen > lfs->name_max) {
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a36:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8016a3a:	429a      	cmp	r2, r3
 8016a3c:	d902      	bls.n	8016a44 <lfs_rawmkdir+0x8c>
        return LFS_ERR_NAMETOOLONG;
 8016a3e:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8016a42:	e0f3      	b.n	8016c2c <lfs_rawmkdir+0x274>
    }

    // build up new directory
    lfs_alloc_ack(lfs);
 8016a44:	6878      	ldr	r0, [r7, #4]
 8016a46:	f7fc ff5b 	bl	8013900 <lfs_alloc_ack>
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
 8016a4a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8016a4e:	4619      	mov	r1, r3
 8016a50:	6878      	ldr	r0, [r7, #4]
 8016a52:	f7fe fdad 	bl	80155b0 <lfs_dir_alloc>
 8016a56:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 8016a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d002      	beq.n	8016a68 <lfs_rawmkdir+0xb0>
        return err;
 8016a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016a66:	e0e1      	b.n	8016c2c <lfs_rawmkdir+0x274>
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
 8016a68:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8016a6c:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 8016a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016a74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8016a78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
 8016a7c:	e012      	b.n	8016aa4 <lfs_rawmkdir+0xec>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 8016a7e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8016a82:	f103 0218 	add.w	r2, r3, #24
 8016a86:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8016a8a:	4619      	mov	r1, r3
 8016a8c:	6878      	ldr	r0, [r7, #4]
 8016a8e:	f7fe f991 	bl	8014db4 <lfs_dir_fetch>
 8016a92:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8016a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d002      	beq.n	8016aa4 <lfs_rawmkdir+0xec>
            return err;
 8016a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016aa2:	e0c3      	b.n	8016c2c <lfs_rawmkdir+0x274>
    while (pred.split) {
 8016aa4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d1e8      	bne.n	8016a7e <lfs_rawmkdir+0xc6>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
 8016aac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8016ab0:	3318      	adds	r3, #24
 8016ab2:	4618      	mov	r0, r3
 8016ab4:	f7fc fc7f 	bl	80133b6 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 8016ab8:	4b5e      	ldr	r3, [pc, #376]	; (8016c34 <lfs_rawmkdir+0x27c>)
 8016aba:	667b      	str	r3, [r7, #100]	; 0x64
 8016abc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8016ac0:	3318      	adds	r3, #24
 8016ac2:	66bb      	str	r3, [r7, #104]	; 0x68
 8016ac4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8016ac8:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8016acc:	2301      	movs	r3, #1
 8016ace:	6878      	ldr	r0, [r7, #4]
 8016ad0:	f7ff ff4c 	bl	801696c <lfs_dir_commit>
 8016ad4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
 8016ad8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8016adc:	3318      	adds	r3, #24
 8016ade:	4618      	mov	r0, r3
 8016ae0:	f7fc fc4f 	bl	8013382 <lfs_pair_fromle32>
    if (err) {
 8016ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d002      	beq.n	8016af2 <lfs_rawmkdir+0x13a>
        return err;
 8016aec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016af0:	e09c      	b.n	8016c2c <lfs_rawmkdir+0x274>
    }

    // current block not end of list?
    if (cwd.m.split) {
 8016af2:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d04c      	beq.n	8016b94 <lfs_rawmkdir+0x1dc>
        // update tails, this creates a desync
        err = lfs_fs_preporphans(lfs, +1);
 8016afa:	2101      	movs	r1, #1
 8016afc:	6878      	ldr	r0, [r7, #4]
 8016afe:	f002 f8cb 	bl	8018c98 <lfs_fs_preporphans>
 8016b02:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8016b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d002      	beq.n	8016b14 <lfs_rawmkdir+0x15c>
            return err;
 8016b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016b12:	e08b      	b.n	8016c2c <lfs_rawmkdir+0x274>

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
 8016b14:	2300      	movs	r3, #0
 8016b16:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
        cwd.id = 0;
 8016b1a:	2300      	movs	r3, #0
 8016b1c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        lfs->mlist = &cwd;
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8016b26:	629a      	str	r2, [r3, #40]	; 0x28

        lfs_pair_tole32(dir.pair);
 8016b28:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	f7fc fc42 	bl	80133b6 <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 8016b32:	4b40      	ldr	r3, [pc, #256]	; (8016c34 <lfs_rawmkdir+0x27c>)
 8016b34:	617b      	str	r3, [r7, #20]
 8016b36:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8016b3a:	61bb      	str	r3, [r7, #24]
 8016b3c:	f107 0214 	add.w	r2, r7, #20
 8016b40:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8016b44:	2301      	movs	r3, #1
 8016b46:	6878      	ldr	r0, [r7, #4]
 8016b48:	f7ff ff10 	bl	801696c <lfs_dir_commit>
 8016b4c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
 8016b50:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8016b54:	4618      	mov	r0, r3
 8016b56:	f7fc fc14 	bl	8013382 <lfs_pair_fromle32>
        if (err) {
 8016b5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d006      	beq.n	8016b70 <lfs_rawmkdir+0x1b8>
            lfs->mlist = cwd.next;
 8016b62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	629a      	str	r2, [r3, #40]	; 0x28
            return err;
 8016b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016b6e:	e05d      	b.n	8016c2c <lfs_rawmkdir+0x274>
        }

        lfs->mlist = cwd.next;
 8016b70:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	629a      	str	r2, [r3, #40]	; 0x28
        err = lfs_fs_preporphans(lfs, -1);
 8016b78:	f04f 31ff 	mov.w	r1, #4294967295
 8016b7c:	6878      	ldr	r0, [r7, #4]
 8016b7e:	f002 f88b 	bl	8018c98 <lfs_fs_preporphans>
 8016b82:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8016b86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d002      	beq.n	8016b94 <lfs_rawmkdir+0x1dc>
            return err;
 8016b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016b92:	e04b      	b.n	8016c2c <lfs_rawmkdir+0x274>
        }
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
 8016b94:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8016b98:	4618      	mov	r0, r3
 8016b9a:	f7fc fc0c 	bl	80133b6 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 8016b9e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8016ba2:	029b      	lsls	r3, r3, #10
 8016ba4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8016ba8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016bac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016bae:	2300      	movs	r3, #0
 8016bb0:	643b      	str	r3, [r7, #64]	; 0x40
 8016bb2:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8016bb6:	029a      	lsls	r2, r3, #10
 8016bb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016bbc:	4313      	orrs	r3, r2
 8016bbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8016bc2:	647b      	str	r3, [r7, #68]	; 0x44
 8016bc4:	683b      	ldr	r3, [r7, #0]
 8016bc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8016bc8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8016bcc:	029b      	lsls	r3, r3, #10
 8016bce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8016bd2:	f043 0308 	orr.w	r3, r3, #8
 8016bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016bd8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8016bdc:	653b      	str	r3, [r7, #80]	; 0x50
 8016bde:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8016be2:	f083 0301 	eor.w	r3, r3, #1
 8016be6:	b2db      	uxtb	r3, r3
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d001      	beq.n	8016bf0 <lfs_rawmkdir+0x238>
 8016bec:	4b11      	ldr	r3, [pc, #68]	; (8016c34 <lfs_rawmkdir+0x27c>)
 8016bee:	e000      	b.n	8016bf2 <lfs_rawmkdir+0x23a>
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	657b      	str	r3, [r7, #84]	; 0x54
 8016bf4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8016bf8:	65bb      	str	r3, [r7, #88]	; 0x58
 8016bfa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8016bfe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8016c02:	f103 0108 	add.w	r1, r3, #8
 8016c06:	2304      	movs	r3, #4
 8016c08:	6878      	ldr	r0, [r7, #4]
 8016c0a:	f7ff feaf 	bl	801696c <lfs_dir_commit>
 8016c0e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},
            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},
            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},
            {LFS_MKTAG_IF(!cwd.m.split,
                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
    lfs_pair_fromle32(dir.pair);
 8016c12:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8016c16:	4618      	mov	r0, r3
 8016c18:	f7fc fbb3 	bl	8013382 <lfs_pair_fromle32>
    if (err) {
 8016c1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d002      	beq.n	8016c2a <lfs_rawmkdir+0x272>
        return err;
 8016c24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016c28:	e000      	b.n	8016c2c <lfs_rawmkdir+0x274>
    }

    return 0;
 8016c2a:	2300      	movs	r3, #0
}
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	37e0      	adds	r7, #224	; 0xe0
 8016c30:	46bd      	mov	sp, r7
 8016c32:	bdb0      	pop	{r4, r5, r7, pc}
 8016c34:	600ffc08 	.word	0x600ffc08

08016c38 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8016c38:	b590      	push	{r4, r7, lr}
 8016c3a:	b087      	sub	sp, #28
 8016c3c:	af00      	add	r7, sp, #0
 8016c3e:	6078      	str	r0, [r7, #4]
 8016c40:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8016c42:	683b      	ldr	r3, [r7, #0]
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016c4c:	69db      	ldr	r3, [r3, #28]
 8016c4e:	3b08      	subs	r3, #8
 8016c50:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8016c52:	697a      	ldr	r2, [r7, #20]
 8016c54:	693b      	ldr	r3, [r7, #16]
 8016c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8016c5a:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8016c5c:	68fb      	ldr	r3, [r7, #12]
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d101      	bne.n	8016c66 <lfs_ctz_index+0x2e>
        return 0;
 8016c62:	2300      	movs	r3, #0
 8016c64:	e01c      	b.n	8016ca0 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	3b01      	subs	r3, #1
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	f7fb ff58 	bl	8012b20 <lfs_popc>
 8016c70:	4603      	mov	r3, r0
 8016c72:	3302      	adds	r3, #2
 8016c74:	009b      	lsls	r3, r3, #2
 8016c76:	697a      	ldr	r2, [r7, #20]
 8016c78:	1ad2      	subs	r2, r2, r3
 8016c7a:	693b      	ldr	r3, [r7, #16]
 8016c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8016c80:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8016c82:	693b      	ldr	r3, [r7, #16]
 8016c84:	68fa      	ldr	r2, [r7, #12]
 8016c86:	fb02 f303 	mul.w	r3, r2, r3
 8016c8a:	697a      	ldr	r2, [r7, #20]
 8016c8c:	1ad4      	subs	r4, r2, r3
 8016c8e:	68f8      	ldr	r0, [r7, #12]
 8016c90:	f7fb ff46 	bl	8012b20 <lfs_popc>
 8016c94:	4603      	mov	r3, r0
 8016c96:	009b      	lsls	r3, r3, #2
 8016c98:	1ae2      	subs	r2, r4, r3
 8016c9a:	683b      	ldr	r3, [r7, #0]
 8016c9c:	601a      	str	r2, [r3, #0]
    return i;
 8016c9e:	68fb      	ldr	r3, [r7, #12]
}
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	371c      	adds	r7, #28
 8016ca4:	46bd      	mov	sp, r7
 8016ca6:	bd90      	pop	{r4, r7, pc}

08016ca8 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8016ca8:	b590      	push	{r4, r7, lr}
 8016caa:	b08f      	sub	sp, #60	; 0x3c
 8016cac:	af04      	add	r7, sp, #16
 8016cae:	60f8      	str	r0, [r7, #12]
 8016cb0:	60b9      	str	r1, [r7, #8]
 8016cb2:	607a      	str	r2, [r7, #4]
 8016cb4:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8016cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d108      	bne.n	8016cce <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8016cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8016cc2:	601a      	str	r2, [r3, #0]
        *off = 0;
 8016cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016cc6:	2200      	movs	r2, #0
 8016cc8:	601a      	str	r2, [r3, #0]
        return 0;
 8016cca:	2300      	movs	r3, #0
 8016ccc:	e053      	b.n	8016d76 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8016cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cd0:	3b01      	subs	r3, #1
 8016cd2:	617b      	str	r3, [r7, #20]
 8016cd4:	f107 0314 	add.w	r3, r7, #20
 8016cd8:	4619      	mov	r1, r3
 8016cda:	68f8      	ldr	r0, [r7, #12]
 8016cdc:	f7ff ffac 	bl	8016c38 <lfs_ctz_index>
 8016ce0:	4603      	mov	r3, r0
 8016ce2:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8016ce4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016ce8:	4619      	mov	r1, r3
 8016cea:	68f8      	ldr	r0, [r7, #12]
 8016cec:	f7ff ffa4 	bl	8016c38 <lfs_ctz_index>
 8016cf0:	4603      	mov	r3, r0
 8016cf2:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8016cf4:	e034      	b.n	8016d60 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8016cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016cf8:	6a3b      	ldr	r3, [r7, #32]
 8016cfa:	1ad3      	subs	r3, r2, r3
 8016cfc:	3301      	adds	r3, #1
 8016cfe:	4618      	mov	r0, r3
 8016d00:	f7fb feef 	bl	8012ae2 <lfs_npw2>
 8016d04:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8016d06:	1e5c      	subs	r4, r3, #1
 8016d08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016d0a:	f7fb fefa 	bl	8012b02 <lfs_ctz>
 8016d0e:	4603      	mov	r3, r0
 8016d10:	4619      	mov	r1, r3
 8016d12:	4620      	mov	r0, r4
 8016d14:	f7fb feae 	bl	8012a74 <lfs_min>
 8016d18:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8016d1a:	683b      	ldr	r3, [r7, #0]
 8016d1c:	69fa      	ldr	r2, [r7, #28]
 8016d1e:	0092      	lsls	r2, r2, #2
 8016d20:	2104      	movs	r1, #4
 8016d22:	9103      	str	r1, [sp, #12]
 8016d24:	4639      	mov	r1, r7
 8016d26:	9102      	str	r1, [sp, #8]
 8016d28:	9201      	str	r2, [sp, #4]
 8016d2a:	9300      	str	r3, [sp, #0]
 8016d2c:	2304      	movs	r3, #4
 8016d2e:	687a      	ldr	r2, [r7, #4]
 8016d30:	68b9      	ldr	r1, [r7, #8]
 8016d32:	68f8      	ldr	r0, [r7, #12]
 8016d34:	f7fb ff7a 	bl	8012c2c <lfs_bd_read>
 8016d38:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8016d3a:	683b      	ldr	r3, [r7, #0]
 8016d3c:	4618      	mov	r0, r3
 8016d3e:	f7fb ff09 	bl	8012b54 <lfs_fromle32>
 8016d42:	4603      	mov	r3, r0
 8016d44:	603b      	str	r3, [r7, #0]
        if (err) {
 8016d46:	69bb      	ldr	r3, [r7, #24]
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d001      	beq.n	8016d50 <lfs_ctz_find+0xa8>
            return err;
 8016d4c:	69bb      	ldr	r3, [r7, #24]
 8016d4e:	e012      	b.n	8016d76 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8016d50:	2201      	movs	r2, #1
 8016d52:	69fb      	ldr	r3, [r7, #28]
 8016d54:	fa02 f303 	lsl.w	r3, r2, r3
 8016d58:	461a      	mov	r2, r3
 8016d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d5c:	1a9b      	subs	r3, r3, r2
 8016d5e:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8016d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d62:	6a3b      	ldr	r3, [r7, #32]
 8016d64:	429a      	cmp	r2, r3
 8016d66:	d8c6      	bhi.n	8016cf6 <lfs_ctz_find+0x4e>
    }

    *block = head;
 8016d68:	683a      	ldr	r2, [r7, #0]
 8016d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016d6c:	601a      	str	r2, [r3, #0]
    *off = pos;
 8016d6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d72:	601a      	str	r2, [r3, #0]
    return 0;
 8016d74:	2300      	movs	r3, #0
}
 8016d76:	4618      	mov	r0, r3
 8016d78:	372c      	adds	r7, #44	; 0x2c
 8016d7a:	46bd      	mov	sp, r7
 8016d7c:	bd90      	pop	{r4, r7, pc}
	...

08016d80 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8016d80:	b580      	push	{r7, lr}
 8016d82:	b092      	sub	sp, #72	; 0x48
 8016d84:	af04      	add	r7, sp, #16
 8016d86:	60f8      	str	r0, [r7, #12]
 8016d88:	60b9      	str	r1, [r7, #8]
 8016d8a:	607a      	str	r2, [r7, #4]
 8016d8c:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8016d8e:	f107 0320 	add.w	r3, r7, #32
 8016d92:	4619      	mov	r1, r3
 8016d94:	68f8      	ldr	r0, [r7, #12]
 8016d96:	f7fc fdd3 	bl	8013940 <lfs_alloc>
 8016d9a:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 8016d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d001      	beq.n	8016da6 <lfs_ctz_extend+0x26>
            return err;
 8016da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016da4:	e0e9      	b.n	8016f7a <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8016da6:	6a3b      	ldr	r3, [r7, #32]
 8016da8:	4619      	mov	r1, r3
 8016daa:	68f8      	ldr	r0, [r7, #12]
 8016dac:	f7fc fa30 	bl	8013210 <lfs_bd_erase>
 8016db0:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8016db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d006      	beq.n	8016dc6 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8016db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dba:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8016dbe:	f000 80cb 	beq.w	8016f58 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8016dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dc4:	e0d9      	b.n	8016f7a <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8016dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d107      	bne.n	8016ddc <lfs_ctz_extend+0x5c>
                *block = nblock;
 8016dcc:	6a3a      	ldr	r2, [r7, #32]
 8016dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016dd0:	601a      	str	r2, [r3, #0]
                *off = 0;
 8016dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016dd4:	2200      	movs	r2, #0
 8016dd6:	601a      	str	r2, [r3, #0]
                return 0;
 8016dd8:	2300      	movs	r3, #0
 8016dda:	e0ce      	b.n	8016f7a <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8016ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016dde:	3b01      	subs	r3, #1
 8016de0:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8016de2:	f107 031c 	add.w	r3, r7, #28
 8016de6:	4619      	mov	r1, r3
 8016de8:	68f8      	ldr	r0, [r7, #12]
 8016dea:	f7ff ff25 	bl	8016c38 <lfs_ctz_index>
 8016dee:	4603      	mov	r3, r0
 8016df0:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 8016df2:	69fb      	ldr	r3, [r7, #28]
 8016df4:	3301      	adds	r3, #1
 8016df6:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016dfc:	69da      	ldr	r2, [r3, #28]
 8016dfe:	69fb      	ldr	r3, [r7, #28]
 8016e00:	429a      	cmp	r2, r3
 8016e02:	d044      	beq.n	8016e8e <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8016e04:	2300      	movs	r3, #0
 8016e06:	637b      	str	r3, [r7, #52]	; 0x34
 8016e08:	e035      	b.n	8016e76 <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8016e0a:	69fa      	ldr	r2, [r7, #28]
 8016e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e0e:	1ad2      	subs	r2, r2, r3
 8016e10:	2301      	movs	r3, #1
 8016e12:	9303      	str	r3, [sp, #12]
 8016e14:	f107 0317 	add.w	r3, r7, #23
 8016e18:	9302      	str	r3, [sp, #8]
 8016e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e1c:	9301      	str	r3, [sp, #4]
 8016e1e:	683b      	ldr	r3, [r7, #0]
 8016e20:	9300      	str	r3, [sp, #0]
 8016e22:	4613      	mov	r3, r2
 8016e24:	687a      	ldr	r2, [r7, #4]
 8016e26:	2100      	movs	r1, #0
 8016e28:	68f8      	ldr	r0, [r7, #12]
 8016e2a:	f7fb feff 	bl	8012c2c <lfs_bd_read>
 8016e2e:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8016e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d001      	beq.n	8016e3a <lfs_ctz_extend+0xba>
                        return err;
 8016e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e38:	e09f      	b.n	8016f7a <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 8016e3a:	6a3b      	ldr	r3, [r7, #32]
 8016e3c:	2201      	movs	r2, #1
 8016e3e:	9203      	str	r2, [sp, #12]
 8016e40:	f107 0217 	add.w	r2, r7, #23
 8016e44:	9202      	str	r2, [sp, #8]
 8016e46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016e48:	9201      	str	r2, [sp, #4]
 8016e4a:	9300      	str	r3, [sp, #0]
 8016e4c:	2301      	movs	r3, #1
 8016e4e:	687a      	ldr	r2, [r7, #4]
 8016e50:	68b9      	ldr	r1, [r7, #8]
 8016e52:	68f8      	ldr	r0, [r7, #12]
 8016e54:	f7fc f930 	bl	80130b8 <lfs_bd_prog>
 8016e58:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8016e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d007      	beq.n	8016e70 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8016e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e62:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8016e66:	d101      	bne.n	8016e6c <lfs_ctz_extend+0xec>
                            goto relocate;
 8016e68:	bf00      	nop
                    goto relocate;
 8016e6a:	e075      	b.n	8016f58 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8016e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 8016e6e:	e084      	b.n	8016f7a <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8016e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e72:	3301      	adds	r3, #1
 8016e74:	637b      	str	r3, [r7, #52]	; 0x34
 8016e76:	69fb      	ldr	r3, [r7, #28]
 8016e78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016e7a:	429a      	cmp	r2, r3
 8016e7c:	d3c5      	bcc.n	8016e0a <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8016e7e:	6a3a      	ldr	r2, [r7, #32]
 8016e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016e82:	601a      	str	r2, [r3, #0]
                *off = noff;
 8016e84:	69fa      	ldr	r2, [r7, #28]
 8016e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016e88:	601a      	str	r2, [r3, #0]
                return 0;
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	e075      	b.n	8016f7a <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 8016e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e90:	3301      	adds	r3, #1
 8016e92:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8016e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e96:	f7fb fe34 	bl	8012b02 <lfs_ctz>
 8016e9a:	4603      	mov	r3, r0
 8016e9c:	3301      	adds	r3, #1
 8016e9e:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8016ea0:	683b      	ldr	r3, [r7, #0]
 8016ea2:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	633b      	str	r3, [r7, #48]	; 0x30
 8016ea8:	e049      	b.n	8016f3e <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8016eaa:	69bb      	ldr	r3, [r7, #24]
 8016eac:	4618      	mov	r0, r3
 8016eae:	f7fb fe5c 	bl	8012b6a <lfs_tole32>
 8016eb2:	4603      	mov	r3, r0
 8016eb4:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8016eb6:	6a3b      	ldr	r3, [r7, #32]
 8016eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016eba:	0092      	lsls	r2, r2, #2
 8016ebc:	2104      	movs	r1, #4
 8016ebe:	9103      	str	r1, [sp, #12]
 8016ec0:	f107 0118 	add.w	r1, r7, #24
 8016ec4:	9102      	str	r1, [sp, #8]
 8016ec6:	9201      	str	r2, [sp, #4]
 8016ec8:	9300      	str	r3, [sp, #0]
 8016eca:	2301      	movs	r3, #1
 8016ecc:	687a      	ldr	r2, [r7, #4]
 8016ece:	68b9      	ldr	r1, [r7, #8]
 8016ed0:	68f8      	ldr	r0, [r7, #12]
 8016ed2:	f7fc f8f1 	bl	80130b8 <lfs_bd_prog>
 8016ed6:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8016ed8:	69bb      	ldr	r3, [r7, #24]
 8016eda:	4618      	mov	r0, r3
 8016edc:	f7fb fe3a 	bl	8012b54 <lfs_fromle32>
 8016ee0:	4603      	mov	r3, r0
 8016ee2:	61bb      	str	r3, [r7, #24]
                if (err) {
 8016ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d005      	beq.n	8016ef6 <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8016eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eec:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8016ef0:	d034      	beq.n	8016f5c <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8016ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ef4:	e041      	b.n	8016f7a <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8016ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ef8:	3b01      	subs	r3, #1
 8016efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016efc:	429a      	cmp	r2, r3
 8016efe:	d01b      	beq.n	8016f38 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8016f00:	69bb      	ldr	r3, [r7, #24]
 8016f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016f04:	0092      	lsls	r2, r2, #2
 8016f06:	2104      	movs	r1, #4
 8016f08:	9103      	str	r1, [sp, #12]
 8016f0a:	f107 0118 	add.w	r1, r7, #24
 8016f0e:	9102      	str	r1, [sp, #8]
 8016f10:	9201      	str	r2, [sp, #4]
 8016f12:	9300      	str	r3, [sp, #0]
 8016f14:	2304      	movs	r3, #4
 8016f16:	687a      	ldr	r2, [r7, #4]
 8016f18:	2100      	movs	r1, #0
 8016f1a:	68f8      	ldr	r0, [r7, #12]
 8016f1c:	f7fb fe86 	bl	8012c2c <lfs_bd_read>
 8016f20:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8016f22:	69bb      	ldr	r3, [r7, #24]
 8016f24:	4618      	mov	r0, r3
 8016f26:	f7fb fe15 	bl	8012b54 <lfs_fromle32>
 8016f2a:	4603      	mov	r3, r0
 8016f2c:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8016f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d001      	beq.n	8016f38 <lfs_ctz_extend+0x1b8>
                        return err;
 8016f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f36:	e020      	b.n	8016f7a <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8016f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f3a:	3301      	adds	r3, #1
 8016f3c:	633b      	str	r3, [r7, #48]	; 0x30
 8016f3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f42:	429a      	cmp	r2, r3
 8016f44:	d3b1      	bcc.n	8016eaa <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8016f46:	6a3a      	ldr	r2, [r7, #32]
 8016f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016f4a:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8016f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f4e:	009a      	lsls	r2, r3, #2
 8016f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016f52:	601a      	str	r2, [r3, #0]
            return 0;
 8016f54:	2300      	movs	r3, #0
 8016f56:	e010      	b.n	8016f7a <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8016f58:	bf00      	nop
 8016f5a:	e000      	b.n	8016f5e <lfs_ctz_extend+0x1de>
                        goto relocate;
 8016f5c:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8016f5e:	6a3b      	ldr	r3, [r7, #32]
 8016f60:	4a08      	ldr	r2, [pc, #32]	; (8016f84 <lfs_ctz_extend+0x204>)
 8016f62:	9200      	str	r2, [sp, #0]
 8016f64:	f640 22da 	movw	r2, #2778	; 0xada
 8016f68:	4907      	ldr	r1, [pc, #28]	; (8016f88 <lfs_ctz_extend+0x208>)
 8016f6a:	4808      	ldr	r0, [pc, #32]	; (8016f8c <lfs_ctz_extend+0x20c>)
 8016f6c:	f004 ff3a 	bl	801bde4 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8016f70:	68b9      	ldr	r1, [r7, #8]
 8016f72:	68f8      	ldr	r0, [r7, #12]
 8016f74:	f7fb fe34 	bl	8012be0 <lfs_cache_drop>
    while (true) {
 8016f78:	e709      	b.n	8016d8e <lfs_ctz_extend+0xe>
    }
}
 8016f7a:	4618      	mov	r0, r3
 8016f7c:	3738      	adds	r7, #56	; 0x38
 8016f7e:	46bd      	mov	sp, r7
 8016f80:	bd80      	pop	{r7, pc}
 8016f82:	bf00      	nop
 8016f84:	08021c54 	.word	0x08021c54
 8016f88:	08021b40 	.word	0x08021b40
 8016f8c:	08021cd4 	.word	0x08021cd4

08016f90 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8016f90:	b580      	push	{r7, lr}
 8016f92:	b090      	sub	sp, #64	; 0x40
 8016f94:	af04      	add	r7, sp, #16
 8016f96:	60f8      	str	r0, [r7, #12]
 8016f98:	60b9      	str	r1, [r7, #8]
 8016f9a:	607a      	str	r2, [r7, #4]
 8016f9c:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8016f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d101      	bne.n	8016fa8 <lfs_ctz_traverse+0x18>
        return 0;
 8016fa4:	2300      	movs	r3, #0
 8016fa6:	e06b      	b.n	8017080 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8016fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016faa:	3b01      	subs	r3, #1
 8016fac:	61fb      	str	r3, [r7, #28]
 8016fae:	f107 031c 	add.w	r3, r7, #28
 8016fb2:	4619      	mov	r1, r3
 8016fb4:	68f8      	ldr	r0, [r7, #12]
 8016fb6:	f7ff fe3f 	bl	8016c38 <lfs_ctz_index>
 8016fba:	4603      	mov	r3, r0
 8016fbc:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 8016fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016fc0:	6839      	ldr	r1, [r7, #0]
 8016fc2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8016fc4:	4798      	blx	r3
 8016fc6:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8016fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d001      	beq.n	8016fd2 <lfs_ctz_traverse+0x42>
            return err;
 8016fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fd0:	e056      	b.n	8017080 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8016fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d101      	bne.n	8016fdc <lfs_ctz_traverse+0x4c>
            return 0;
 8016fd8:	2300      	movs	r3, #0
 8016fda:	e051      	b.n	8017080 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8016fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fde:	f003 0301 	and.w	r3, r3, #1
 8016fe2:	f1c3 0302 	rsb	r3, r3, #2
 8016fe6:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8016fe8:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8016fea:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8016fec:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8016fee:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8016ff0:	9303      	str	r3, [sp, #12]
 8016ff2:	f107 0314 	add.w	r3, r7, #20
 8016ff6:	9302      	str	r3, [sp, #8]
 8016ff8:	2300      	movs	r3, #0
 8016ffa:	9301      	str	r3, [sp, #4]
 8016ffc:	683b      	ldr	r3, [r7, #0]
 8016ffe:	9300      	str	r3, [sp, #0]
 8017000:	4613      	mov	r3, r2
 8017002:	687a      	ldr	r2, [r7, #4]
 8017004:	68b9      	ldr	r1, [r7, #8]
 8017006:	68f8      	ldr	r0, [r7, #12]
 8017008:	f7fb fe10 	bl	8012c2c <lfs_bd_read>
 801700c:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 801700e:	697b      	ldr	r3, [r7, #20]
 8017010:	4618      	mov	r0, r3
 8017012:	f7fb fd9f 	bl	8012b54 <lfs_fromle32>
 8017016:	4603      	mov	r3, r0
 8017018:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 801701a:	69bb      	ldr	r3, [r7, #24]
 801701c:	4618      	mov	r0, r3
 801701e:	f7fb fd99 	bl	8012b54 <lfs_fromle32>
 8017022:	4603      	mov	r3, r0
 8017024:	61bb      	str	r3, [r7, #24]
        if (err) {
 8017026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017028:	2b00      	cmp	r3, #0
 801702a:	d001      	beq.n	8017030 <lfs_ctz_traverse+0xa0>
            return err;
 801702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801702e:	e027      	b.n	8017080 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8017030:	2300      	movs	r3, #0
 8017032:	62bb      	str	r3, [r7, #40]	; 0x28
 8017034:	e012      	b.n	801705c <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8017036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017038:	009b      	lsls	r3, r3, #2
 801703a:	3330      	adds	r3, #48	; 0x30
 801703c:	443b      	add	r3, r7
 801703e:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8017042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017044:	4611      	mov	r1, r2
 8017046:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8017048:	4798      	blx	r3
 801704a:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 801704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801704e:	2b00      	cmp	r3, #0
 8017050:	d001      	beq.n	8017056 <lfs_ctz_traverse+0xc6>
                return err;
 8017052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017054:	e014      	b.n	8017080 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8017056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017058:	3301      	adds	r3, #1
 801705a:	62bb      	str	r3, [r7, #40]	; 0x28
 801705c:	6a3b      	ldr	r3, [r7, #32]
 801705e:	3b01      	subs	r3, #1
 8017060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017062:	429a      	cmp	r2, r3
 8017064:	dbe7      	blt.n	8017036 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8017066:	6a3b      	ldr	r3, [r7, #32]
 8017068:	3b01      	subs	r3, #1
 801706a:	009b      	lsls	r3, r3, #2
 801706c:	3330      	adds	r3, #48	; 0x30
 801706e:	443b      	add	r3, r7
 8017070:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8017074:	603b      	str	r3, [r7, #0]
        index -= count;
 8017076:	6a3b      	ldr	r3, [r7, #32]
 8017078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801707a:	1ad3      	subs	r3, r2, r3
 801707c:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 801707e:	e79e      	b.n	8016fbe <lfs_ctz_traverse+0x2e>
    }
}
 8017080:	4618      	mov	r0, r3
 8017082:	3730      	adds	r7, #48	; 0x30
 8017084:	46bd      	mov	sp, r7
 8017086:	bd80      	pop	{r7, pc}

08017088 <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8017088:	b5b0      	push	{r4, r5, r7, lr}
 801708a:	b09a      	sub	sp, #104	; 0x68
 801708c:	af02      	add	r7, sp, #8
 801708e:	60f8      	str	r0, [r7, #12]
 8017090:	60b9      	str	r1, [r7, #8]
 8017092:	607a      	str	r2, [r7, #4]
 8017094:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8017096:	683b      	ldr	r3, [r7, #0]
 8017098:	f003 0302 	and.w	r3, r3, #2
 801709c:	2b00      	cmp	r3, #0
 801709e:	d008      	beq.n	80170b2 <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 80170a0:	68f8      	ldr	r0, [r7, #12]
 80170a2:	f002 f877 	bl	8019194 <lfs_fs_forceconsistency>
 80170a6:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 80170a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d001      	beq.n	80170b2 <lfs_file_rawopencfg+0x2a>
            return err;
 80170ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80170b0:	e1b0      	b.n	8017414 <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 80170b2:	68bb      	ldr	r3, [r7, #8]
 80170b4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80170b6:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 80170b8:	683a      	ldr	r2, [r7, #0]
 80170ba:	68bb      	ldr	r3, [r7, #8]
 80170bc:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 80170be:	68bb      	ldr	r3, [r7, #8]
 80170c0:	2200      	movs	r2, #0
 80170c2:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 80170c4:	68bb      	ldr	r3, [r7, #8]
 80170c6:	2200      	movs	r2, #0
 80170c8:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 80170ca:	68bb      	ldr	r3, [r7, #8]
 80170cc:	2200      	movs	r2, #0
 80170ce:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 80170d0:	68bb      	ldr	r3, [r7, #8]
 80170d2:	f103 0108 	add.w	r1, r3, #8
 80170d6:	68bb      	ldr	r3, [r7, #8]
 80170d8:	3304      	adds	r3, #4
 80170da:	1d3a      	adds	r2, r7, #4
 80170dc:	68f8      	ldr	r0, [r7, #12]
 80170de:	f7fd ff7b 	bl	8014fd8 <lfs_dir_find>
 80170e2:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 80170e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	da0c      	bge.n	8017104 <lfs_file_rawopencfg+0x7c>
 80170ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80170ec:	f113 0f02 	cmn.w	r3, #2
 80170f0:	d105      	bne.n	80170fe <lfs_file_rawopencfg+0x76>
 80170f2:	68bb      	ldr	r3, [r7, #8]
 80170f4:	889b      	ldrh	r3, [r3, #4]
 80170f6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80170fa:	4293      	cmp	r3, r2
 80170fc:	d102      	bne.n	8017104 <lfs_file_rawopencfg+0x7c>
        err = tag;
 80170fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017100:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8017102:	e17c      	b.n	80173fe <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8017104:	68bb      	ldr	r3, [r7, #8]
 8017106:	2201      	movs	r2, #1
 8017108:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 801710a:	68b9      	ldr	r1, [r7, #8]
 801710c:	68f8      	ldr	r0, [r7, #12]
 801710e:	f7fc fbae 	bl	801386e <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8017112:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017114:	f113 0f02 	cmn.w	r3, #2
 8017118:	d14e      	bne.n	80171b8 <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 801711a:	683b      	ldr	r3, [r7, #0]
 801711c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017120:	2b00      	cmp	r3, #0
 8017122:	d103      	bne.n	801712c <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8017124:	f06f 0301 	mvn.w	r3, #1
 8017128:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 801712a:	e168      	b.n	80173fe <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	4618      	mov	r0, r3
 8017130:	f7e9 f8b6 	bl	80002a0 <strlen>
 8017134:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801713a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801713c:	429a      	cmp	r2, r3
 801713e:	d903      	bls.n	8017148 <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8017140:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8017144:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8017146:	e15a      	b.n	80173fe <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8017148:	68bb      	ldr	r3, [r7, #8]
 801714a:	f103 0108 	add.w	r1, r3, #8
 801714e:	68bb      	ldr	r3, [r7, #8]
 8017150:	889b      	ldrh	r3, [r3, #4]
 8017152:	029b      	lsls	r3, r3, #10
 8017154:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8017158:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801715c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801715e:	2300      	movs	r3, #0
 8017160:	633b      	str	r3, [r7, #48]	; 0x30
 8017162:	68bb      	ldr	r3, [r7, #8]
 8017164:	889b      	ldrh	r3, [r3, #4]
 8017166:	029a      	lsls	r2, r3, #10
 8017168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801716a:	4313      	orrs	r3, r2
 801716c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017170:	637b      	str	r3, [r7, #52]	; 0x34
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	63bb      	str	r3, [r7, #56]	; 0x38
 8017176:	68bb      	ldr	r3, [r7, #8]
 8017178:	889b      	ldrh	r3, [r3, #4]
 801717a:	029b      	lsls	r3, r3, #10
 801717c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017180:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017186:	2300      	movs	r3, #0
 8017188:	643b      	str	r3, [r7, #64]	; 0x40
 801718a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801718e:	2303      	movs	r3, #3
 8017190:	68f8      	ldr	r0, [r7, #12]
 8017192:	f7ff fbeb 	bl	801696c <lfs_dir_commit>
 8017196:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8017198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801719a:	f113 0f1c 	cmn.w	r3, #28
 801719e:	d001      	beq.n	80171a4 <lfs_file_rawopencfg+0x11c>
 80171a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80171a2:	e001      	b.n	80171a8 <lfs_file_rawopencfg+0x120>
 80171a4:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80171a8:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 80171aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	f040 8125 	bne.w	80173fc <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 80171b2:	4b9a      	ldr	r3, [pc, #616]	; (801741c <lfs_file_rawopencfg+0x394>)
 80171b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80171b6:	e044      	b.n	8017242 <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 80171b8:	683b      	ldr	r3, [r7, #0]
 80171ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d003      	beq.n	80171ca <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 80171c2:	f06f 0310 	mvn.w	r3, #16
 80171c6:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80171c8:	e119      	b.n	80173fe <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 80171ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80171cc:	4618      	mov	r0, r3
 80171ce:	f7fc f93d 	bl	801344c <lfs_tag_type3>
 80171d2:	4603      	mov	r3, r0
 80171d4:	2b01      	cmp	r3, #1
 80171d6:	d003      	beq.n	80171e0 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 80171d8:	f06f 0314 	mvn.w	r3, #20
 80171dc:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80171de:	e10e      	b.n	80173fe <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 80171e0:	683b      	ldr	r3, [r7, #0]
 80171e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d00e      	beq.n	8017208 <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 80171ea:	68bb      	ldr	r3, [r7, #8]
 80171ec:	889b      	ldrh	r3, [r3, #4]
 80171ee:	029b      	lsls	r3, r3, #10
 80171f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80171f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80171f8:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 80171fa:	68bb      	ldr	r3, [r7, #8]
 80171fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80171fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8017202:	68bb      	ldr	r3, [r7, #8]
 8017204:	631a      	str	r2, [r3, #48]	; 0x30
 8017206:	e01c      	b.n	8017242 <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8017208:	68bb      	ldr	r3, [r7, #8]
 801720a:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 801720e:	68bb      	ldr	r3, [r7, #8]
 8017210:	889b      	ldrh	r3, [r3, #4]
 8017212:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8017214:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017218:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 801721c:	68ba      	ldr	r2, [r7, #8]
 801721e:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8017220:	9200      	str	r2, [sp, #0]
 8017222:	4a7f      	ldr	r2, [pc, #508]	; (8017420 <lfs_file_rawopencfg+0x398>)
 8017224:	68f8      	ldr	r0, [r7, #12]
 8017226:	f7fc fd25 	bl	8013c74 <lfs_dir_get>
 801722a:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 801722c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801722e:	2b00      	cmp	r3, #0
 8017230:	da02      	bge.n	8017238 <lfs_file_rawopencfg+0x1b0>
            err = tag;
 8017232:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017234:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8017236:	e0e2      	b.n	80173fe <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8017238:	68bb      	ldr	r3, [r7, #8]
 801723a:	3328      	adds	r3, #40	; 0x28
 801723c:	4618      	mov	r0, r3
 801723e:	f7fc fa37 	bl	80136b0 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8017242:	2300      	movs	r3, #0
 8017244:	657b      	str	r3, [r7, #84]	; 0x54
 8017246:	e063      	b.n	8017310 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8017248:	68bb      	ldr	r3, [r7, #8]
 801724a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801724c:	f003 0301 	and.w	r3, r3, #1
 8017250:	2b00      	cmp	r3, #0
 8017252:	d03c      	beq.n	80172ce <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8017254:	68bb      	ldr	r3, [r7, #8]
 8017256:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 801725a:	68bb      	ldr	r3, [r7, #8]
 801725c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801725e:	6859      	ldr	r1, [r3, #4]
 8017260:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017262:	4613      	mov	r3, r2
 8017264:	005b      	lsls	r3, r3, #1
 8017266:	4413      	add	r3, r2
 8017268:	009b      	lsls	r3, r3, #2
 801726a:	440b      	add	r3, r1
 801726c:	781b      	ldrb	r3, [r3, #0]
 801726e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8017272:	051a      	lsls	r2, r3, #20
 8017274:	68bb      	ldr	r3, [r7, #8]
 8017276:	889b      	ldrh	r3, [r3, #4]
 8017278:	029b      	lsls	r3, r3, #10
 801727a:	ea42 0103 	orr.w	r1, r2, r3
 801727e:	68bb      	ldr	r3, [r7, #8]
 8017280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017282:	6858      	ldr	r0, [r3, #4]
 8017284:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017286:	4613      	mov	r3, r2
 8017288:	005b      	lsls	r3, r3, #1
 801728a:	4413      	add	r3, r2
 801728c:	009b      	lsls	r3, r3, #2
 801728e:	4403      	add	r3, r0
 8017290:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8017292:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8017296:	68bb      	ldr	r3, [r7, #8]
 8017298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801729a:	6859      	ldr	r1, [r3, #4]
 801729c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801729e:	4613      	mov	r3, r2
 80172a0:	005b      	lsls	r3, r3, #1
 80172a2:	4413      	add	r3, r2
 80172a4:	009b      	lsls	r3, r3, #2
 80172a6:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80172a8:	685b      	ldr	r3, [r3, #4]
 80172aa:	9300      	str	r3, [sp, #0]
 80172ac:	4603      	mov	r3, r0
 80172ae:	4a5d      	ldr	r2, [pc, #372]	; (8017424 <lfs_file_rawopencfg+0x39c>)
 80172b0:	4621      	mov	r1, r4
 80172b2:	68f8      	ldr	r0, [r7, #12]
 80172b4:	f7fc fcde 	bl	8013c74 <lfs_dir_get>
 80172b8:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 80172ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80172bc:	2b00      	cmp	r3, #0
 80172be:	da06      	bge.n	80172ce <lfs_file_rawopencfg+0x246>
 80172c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80172c2:	f113 0f02 	cmn.w	r3, #2
 80172c6:	d002      	beq.n	80172ce <lfs_file_rawopencfg+0x246>
                err = res;
 80172c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80172ca:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80172cc:	e097      	b.n	80173fe <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 80172ce:	68bb      	ldr	r3, [r7, #8]
 80172d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172d2:	f003 0302 	and.w	r3, r3, #2
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d017      	beq.n	801730a <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 80172da:	68bb      	ldr	r3, [r7, #8]
 80172dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80172de:	6859      	ldr	r1, [r3, #4]
 80172e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80172e2:	4613      	mov	r3, r2
 80172e4:	005b      	lsls	r3, r3, #1
 80172e6:	4413      	add	r3, r2
 80172e8:	009b      	lsls	r3, r3, #2
 80172ea:	440b      	add	r3, r1
 80172ec:	689a      	ldr	r2, [r3, #8]
 80172ee:	68fb      	ldr	r3, [r7, #12]
 80172f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80172f2:	429a      	cmp	r2, r3
 80172f4:	d903      	bls.n	80172fe <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 80172f6:	f06f 031b 	mvn.w	r3, #27
 80172fa:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80172fc:	e07f      	b.n	80173fe <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 80172fe:	68bb      	ldr	r3, [r7, #8]
 8017300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017302:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8017306:	68bb      	ldr	r3, [r7, #8]
 8017308:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 801730a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801730c:	3301      	adds	r3, #1
 801730e:	657b      	str	r3, [r7, #84]	; 0x54
 8017310:	68bb      	ldr	r3, [r7, #8]
 8017312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017314:	689b      	ldr	r3, [r3, #8]
 8017316:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017318:	429a      	cmp	r2, r3
 801731a:	d395      	bcc.n	8017248 <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 801731c:	68bb      	ldr	r3, [r7, #8]
 801731e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017320:	681b      	ldr	r3, [r3, #0]
 8017322:	2b00      	cmp	r3, #0
 8017324:	d005      	beq.n	8017332 <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8017326:	68bb      	ldr	r3, [r7, #8]
 8017328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801732a:	681a      	ldr	r2, [r3, #0]
 801732c:	68bb      	ldr	r3, [r7, #8]
 801732e:	64da      	str	r2, [r3, #76]	; 0x4c
 8017330:	e010      	b.n	8017354 <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017338:	4618      	mov	r0, r3
 801733a:	f7fb fc3a 	bl	8012bb2 <lfs_malloc>
 801733e:	4602      	mov	r2, r0
 8017340:	68bb      	ldr	r3, [r7, #8]
 8017342:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 8017344:	68bb      	ldr	r3, [r7, #8]
 8017346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017348:	2b00      	cmp	r3, #0
 801734a:	d103      	bne.n	8017354 <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 801734c:	f06f 030b 	mvn.w	r3, #11
 8017350:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8017352:	e054      	b.n	80173fe <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8017354:	68bb      	ldr	r3, [r7, #8]
 8017356:	3340      	adds	r3, #64	; 0x40
 8017358:	4619      	mov	r1, r3
 801735a:	68f8      	ldr	r0, [r7, #12]
 801735c:	f7fb fc4f 	bl	8012bfe <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8017360:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017362:	4618      	mov	r0, r3
 8017364:	f7fc f872 	bl	801344c <lfs_tag_type3>
 8017368:	4603      	mov	r3, r0
 801736a:	461a      	mov	r2, r3
 801736c:	f240 2301 	movw	r3, #513	; 0x201
 8017370:	429a      	cmp	r2, r3
 8017372:	d141      	bne.n	80173f8 <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8017374:	68bb      	ldr	r3, [r7, #8]
 8017376:	f06f 0201 	mvn.w	r2, #1
 801737a:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 801737c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801737e:	4618      	mov	r0, r3
 8017380:	f7fc f89e 	bl	80134c0 <lfs_tag_size>
 8017384:	4602      	mov	r2, r0
 8017386:	68bb      	ldr	r3, [r7, #8]
 8017388:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 801738a:	68bb      	ldr	r3, [r7, #8]
 801738c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801738e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8017392:	68bb      	ldr	r3, [r7, #8]
 8017394:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 8017396:	68bb      	ldr	r3, [r7, #8]
 8017398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801739a:	68bb      	ldr	r3, [r7, #8]
 801739c:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 801739e:	68bb      	ldr	r3, [r7, #8]
 80173a0:	2200      	movs	r2, #0
 80173a2:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80173a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80173aa:	68bb      	ldr	r3, [r7, #8]
 80173ac:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 80173ae:	68bb      	ldr	r3, [r7, #8]
 80173b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d020      	beq.n	80173f8 <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80173b6:	68bb      	ldr	r3, [r7, #8]
 80173b8:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 80173bc:	68bb      	ldr	r3, [r7, #8]
 80173be:	889b      	ldrh	r3, [r3, #4]
 80173c0:	029c      	lsls	r4, r3, #10
 80173c2:	68bb      	ldr	r3, [r7, #8]
 80173c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80173c6:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80173ca:	4618      	mov	r0, r3
 80173cc:	f7fb fb52 	bl	8012a74 <lfs_min>
 80173d0:	4603      	mov	r3, r0
 80173d2:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80173d4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 80173d8:	68bb      	ldr	r3, [r7, #8]
 80173da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80173dc:	9300      	str	r3, [sp, #0]
 80173de:	4613      	mov	r3, r2
 80173e0:	4a0f      	ldr	r2, [pc, #60]	; (8017420 <lfs_file_rawopencfg+0x398>)
 80173e2:	4629      	mov	r1, r5
 80173e4:	68f8      	ldr	r0, [r7, #12]
 80173e6:	f7fc fc45 	bl	8013c74 <lfs_dir_get>
 80173ea:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 80173ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	da02      	bge.n	80173f8 <lfs_file_rawopencfg+0x370>
                err = res;
 80173f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80173f4:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80173f6:	e002      	b.n	80173fe <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 80173f8:	2300      	movs	r3, #0
 80173fa:	e00b      	b.n	8017414 <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 80173fc:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 80173fe:	68bb      	ldr	r3, [r7, #8]
 8017400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017402:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8017406:	68bb      	ldr	r3, [r7, #8]
 8017408:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 801740a:	68b9      	ldr	r1, [r7, #8]
 801740c:	68f8      	ldr	r0, [r7, #12]
 801740e:	f000 f80b 	bl	8017428 <lfs_file_rawclose>
    return err;
 8017412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8017414:	4618      	mov	r0, r3
 8017416:	3760      	adds	r7, #96	; 0x60
 8017418:	46bd      	mov	sp, r7
 801741a:	bdb0      	pop	{r4, r5, r7, pc}
 801741c:	20100000 	.word	0x20100000
 8017420:	700ffc00 	.word	0x700ffc00
 8017424:	7ffffc00 	.word	0x7ffffc00

08017428 <lfs_file_rawclose>:
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
    return err;
}
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 8017428:	b580      	push	{r7, lr}
 801742a:	b084      	sub	sp, #16
 801742c:	af00      	add	r7, sp, #0
 801742e:	6078      	str	r0, [r7, #4]
 8017430:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 8017432:	6839      	ldr	r1, [r7, #0]
 8017434:	6878      	ldr	r0, [r7, #4]
 8017436:	f000 f9e5 	bl	8017804 <lfs_file_rawsync>
 801743a:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 801743c:	6839      	ldr	r1, [r7, #0]
 801743e:	6878      	ldr	r0, [r7, #4]
 8017440:	f7fc f9f3 	bl	801382a <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8017444:	683b      	ldr	r3, [r7, #0]
 8017446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017448:	681b      	ldr	r3, [r3, #0]
 801744a:	2b00      	cmp	r3, #0
 801744c:	d104      	bne.n	8017458 <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 801744e:	683b      	ldr	r3, [r7, #0]
 8017450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017452:	4618      	mov	r0, r3
 8017454:	f7fb fbb9 	bl	8012bca <lfs_free>
    }

    return err;
 8017458:	68fb      	ldr	r3, [r7, #12]
}
 801745a:	4618      	mov	r0, r3
 801745c:	3710      	adds	r7, #16
 801745e:	46bd      	mov	sp, r7
 8017460:	bd80      	pop	{r7, pc}
	...

08017464 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8017464:	b590      	push	{r4, r7, lr}
 8017466:	b08d      	sub	sp, #52	; 0x34
 8017468:	af06      	add	r7, sp, #24
 801746a:	6078      	str	r0, [r7, #4]
 801746c:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 801746e:	f107 030c 	add.w	r3, r7, #12
 8017472:	4619      	mov	r1, r3
 8017474:	6878      	ldr	r0, [r7, #4]
 8017476:	f7fc fa63 	bl	8013940 <lfs_alloc>
 801747a:	6138      	str	r0, [r7, #16]
        if (err) {
 801747c:	693b      	ldr	r3, [r7, #16]
 801747e:	2b00      	cmp	r3, #0
 8017480:	d001      	beq.n	8017486 <lfs_file_relocate+0x22>
            return err;
 8017482:	693b      	ldr	r3, [r7, #16]
 8017484:	e0bb      	b.n	80175fe <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	4619      	mov	r1, r3
 801748a:	6878      	ldr	r0, [r7, #4]
 801748c:	f7fb fec0 	bl	8013210 <lfs_bd_erase>
 8017490:	6138      	str	r0, [r7, #16]
        if (err) {
 8017492:	693b      	ldr	r3, [r7, #16]
 8017494:	2b00      	cmp	r3, #0
 8017496:	d006      	beq.n	80174a6 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8017498:	693b      	ldr	r3, [r7, #16]
 801749a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 801749e:	f000 809b 	beq.w	80175d8 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 80174a2:	693b      	ldr	r3, [r7, #16]
 80174a4:	e0ab      	b.n	80175fe <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 80174a6:	2300      	movs	r3, #0
 80174a8:	617b      	str	r3, [r7, #20]
 80174aa:	e069      	b.n	8017580 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 80174ac:	683b      	ldr	r3, [r7, #0]
 80174ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80174b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d027      	beq.n	8017508 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 80174b8:	683b      	ldr	r3, [r7, #0]
 80174ba:	f103 0008 	add.w	r0, r3, #8
 80174be:	683b      	ldr	r3, [r7, #0]
 80174c0:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 80174c4:	683b      	ldr	r3, [r7, #0]
 80174c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 80174c8:	697b      	ldr	r3, [r7, #20]
 80174ca:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80174cc:	683b      	ldr	r3, [r7, #0]
 80174ce:	889b      	ldrh	r3, [r3, #4]
 80174d0:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 80174d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80174d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80174da:	2101      	movs	r1, #1
 80174dc:	9105      	str	r1, [sp, #20]
 80174de:	f107 010b 	add.w	r1, r7, #11
 80174e2:	9104      	str	r1, [sp, #16]
 80174e4:	6979      	ldr	r1, [r7, #20]
 80174e6:	9103      	str	r1, [sp, #12]
 80174e8:	9302      	str	r3, [sp, #8]
 80174ea:	4b47      	ldr	r3, [pc, #284]	; (8017608 <lfs_file_relocate+0x1a4>)
 80174ec:	9301      	str	r3, [sp, #4]
 80174ee:	9200      	str	r2, [sp, #0]
 80174f0:	4623      	mov	r3, r4
 80174f2:	2200      	movs	r2, #0
 80174f4:	4601      	mov	r1, r0
 80174f6:	6878      	ldr	r0, [r7, #4]
 80174f8:	f7fc fbd7 	bl	8013caa <lfs_dir_getread>
 80174fc:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 80174fe:	693b      	ldr	r3, [r7, #16]
 8017500:	2b00      	cmp	r3, #0
 8017502:	d01e      	beq.n	8017542 <lfs_file_relocate+0xde>
                    return err;
 8017504:	693b      	ldr	r3, [r7, #16]
 8017506:	e07a      	b.n	80175fe <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8017508:	683b      	ldr	r3, [r7, #0]
 801750a:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 801750e:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8017510:	683b      	ldr	r3, [r7, #0]
 8017512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 8017514:	697b      	ldr	r3, [r7, #20]
 8017516:	1ad4      	subs	r4, r2, r3
 8017518:	683b      	ldr	r3, [r7, #0]
 801751a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801751c:	2201      	movs	r2, #1
 801751e:	9203      	str	r2, [sp, #12]
 8017520:	f107 020b 	add.w	r2, r7, #11
 8017524:	9202      	str	r2, [sp, #8]
 8017526:	697a      	ldr	r2, [r7, #20]
 8017528:	9201      	str	r2, [sp, #4]
 801752a:	9300      	str	r3, [sp, #0]
 801752c:	4623      	mov	r3, r4
 801752e:	4602      	mov	r2, r0
 8017530:	6878      	ldr	r0, [r7, #4]
 8017532:	f7fb fb7b 	bl	8012c2c <lfs_bd_read>
 8017536:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8017538:	693b      	ldr	r3, [r7, #16]
 801753a:	2b00      	cmp	r3, #0
 801753c:	d001      	beq.n	8017542 <lfs_file_relocate+0xde>
                    return err;
 801753e:	693b      	ldr	r3, [r7, #16]
 8017540:	e05d      	b.n	80175fe <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	f103 0110 	add.w	r1, r3, #16
 8017548:	6878      	ldr	r0, [r7, #4]
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	2201      	movs	r2, #1
 801754e:	9203      	str	r2, [sp, #12]
 8017550:	f107 020b 	add.w	r2, r7, #11
 8017554:	9202      	str	r2, [sp, #8]
 8017556:	697a      	ldr	r2, [r7, #20]
 8017558:	9201      	str	r2, [sp, #4]
 801755a:	9300      	str	r3, [sp, #0]
 801755c:	2301      	movs	r3, #1
 801755e:	4602      	mov	r2, r0
 8017560:	6878      	ldr	r0, [r7, #4]
 8017562:	f7fb fda9 	bl	80130b8 <lfs_bd_prog>
 8017566:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8017568:	693b      	ldr	r3, [r7, #16]
 801756a:	2b00      	cmp	r3, #0
 801756c:	d005      	beq.n	801757a <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 801756e:	693b      	ldr	r3, [r7, #16]
 8017570:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8017574:	d032      	beq.n	80175dc <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 8017576:	693b      	ldr	r3, [r7, #16]
 8017578:	e041      	b.n	80175fe <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801757a:	697b      	ldr	r3, [r7, #20]
 801757c:	3301      	adds	r3, #1
 801757e:	617b      	str	r3, [r7, #20]
 8017580:	683b      	ldr	r3, [r7, #0]
 8017582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017584:	697a      	ldr	r2, [r7, #20]
 8017586:	429a      	cmp	r2, r3
 8017588:	d390      	bcc.n	80174ac <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 801758a:	683b      	ldr	r3, [r7, #0]
 801758c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	69d9      	ldr	r1, [r3, #28]
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017598:	461a      	mov	r2, r3
 801759a:	f004 ff5a 	bl	801c452 <memcpy>
        file->cache.block = lfs->pcache.block;
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	691a      	ldr	r2, [r3, #16]
 80175a2:	683b      	ldr	r3, [r7, #0]
 80175a4:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	695a      	ldr	r2, [r3, #20]
 80175aa:	683b      	ldr	r3, [r7, #0]
 80175ac:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	699a      	ldr	r2, [r3, #24]
 80175b2:	683b      	ldr	r3, [r7, #0]
 80175b4:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	3310      	adds	r3, #16
 80175ba:	4619      	mov	r1, r3
 80175bc:	6878      	ldr	r0, [r7, #4]
 80175be:	f7fb fb1e 	bl	8012bfe <lfs_cache_zero>

        file->block = nblock;
 80175c2:	68fa      	ldr	r2, [r7, #12]
 80175c4:	683b      	ldr	r3, [r7, #0]
 80175c6:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 80175c8:	683b      	ldr	r3, [r7, #0]
 80175ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80175cc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80175d0:	683b      	ldr	r3, [r7, #0]
 80175d2:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 80175d4:	2300      	movs	r3, #0
 80175d6:	e012      	b.n	80175fe <lfs_file_relocate+0x19a>
                goto relocate;
 80175d8:	bf00      	nop
 80175da:	e000      	b.n	80175de <lfs_file_relocate+0x17a>
                    goto relocate;
 80175dc:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	4a0a      	ldr	r2, [pc, #40]	; (801760c <lfs_file_relocate+0x1a8>)
 80175e2:	9200      	str	r2, [sp, #0]
 80175e4:	f44f 6241 	mov.w	r2, #3088	; 0xc10
 80175e8:	4909      	ldr	r1, [pc, #36]	; (8017610 <lfs_file_relocate+0x1ac>)
 80175ea:	480a      	ldr	r0, [pc, #40]	; (8017614 <lfs_file_relocate+0x1b0>)
 80175ec:	f004 fbfa 	bl	801bde4 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	3310      	adds	r3, #16
 80175f4:	4619      	mov	r1, r3
 80175f6:	6878      	ldr	r0, [r7, #4]
 80175f8:	f7fb faf2 	bl	8012be0 <lfs_cache_drop>
    while (true) {
 80175fc:	e737      	b.n	801746e <lfs_file_relocate+0xa>
    }
}
 80175fe:	4618      	mov	r0, r3
 8017600:	371c      	adds	r7, #28
 8017602:	46bd      	mov	sp, r7
 8017604:	bd90      	pop	{r4, r7, pc}
 8017606:	bf00      	nop
 8017608:	fff7fc00 	.word	0xfff7fc00
 801760c:	08021c54 	.word	0x08021c54
 8017610:	08021b40 	.word	0x08021b40
 8017614:	08021cd4 	.word	0x08021cd4

08017618 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8017618:	b580      	push	{r7, lr}
 801761a:	b084      	sub	sp, #16
 801761c:	af00      	add	r7, sp, #0
 801761e:	6078      	str	r0, [r7, #4]
 8017620:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8017622:	683b      	ldr	r3, [r7, #0]
 8017624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017626:	683b      	ldr	r3, [r7, #0]
 8017628:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 801762a:	6878      	ldr	r0, [r7, #4]
 801762c:	f7fc f968 	bl	8013900 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 8017630:	6839      	ldr	r1, [r7, #0]
 8017632:	6878      	ldr	r0, [r7, #4]
 8017634:	f7ff ff16 	bl	8017464 <lfs_file_relocate>
 8017638:	60f8      	str	r0, [r7, #12]
    if (err) {
 801763a:	68fb      	ldr	r3, [r7, #12]
 801763c:	2b00      	cmp	r3, #0
 801763e:	d001      	beq.n	8017644 <lfs_file_outline+0x2c>
        return err;
 8017640:	68fb      	ldr	r3, [r7, #12]
 8017642:	e006      	b.n	8017652 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8017644:	683b      	ldr	r3, [r7, #0]
 8017646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017648:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801764c:	683b      	ldr	r3, [r7, #0]
 801764e:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 8017650:	2300      	movs	r3, #0
}
 8017652:	4618      	mov	r0, r3
 8017654:	3710      	adds	r7, #16
 8017656:	46bd      	mov	sp, r7
 8017658:	bd80      	pop	{r7, pc}
	...

0801765c <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 801765c:	b590      	push	{r4, r7, lr}
 801765e:	b09f      	sub	sp, #124	; 0x7c
 8017660:	af02      	add	r7, sp, #8
 8017662:	6078      	str	r0, [r7, #4]
 8017664:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 8017666:	683b      	ldr	r3, [r7, #0]
 8017668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801766a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801766e:	2b00      	cmp	r3, #0
 8017670:	d011      	beq.n	8017696 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8017672:	683b      	ldr	r3, [r7, #0]
 8017674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801767a:	2b00      	cmp	r3, #0
 801767c:	d105      	bne.n	801768a <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 801767e:	683b      	ldr	r3, [r7, #0]
 8017680:	3340      	adds	r3, #64	; 0x40
 8017682:	4619      	mov	r1, r3
 8017684:	6878      	ldr	r0, [r7, #4]
 8017686:	f7fb faab 	bl	8012be0 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 801768a:	683b      	ldr	r3, [r7, #0]
 801768c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801768e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8017692:	683b      	ldr	r3, [r7, #0]
 8017694:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8017696:	683b      	ldr	r3, [r7, #0]
 8017698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801769a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801769e:	2b00      	cmp	r3, #0
 80176a0:	f000 80a4 	beq.w	80177ec <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 80176a4:	683b      	ldr	r3, [r7, #0]
 80176a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80176a8:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 80176aa:	683b      	ldr	r3, [r7, #0]
 80176ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d176      	bne.n	80177a4 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 80176b6:	f107 030c 	add.w	r3, r7, #12
 80176ba:	2254      	movs	r2, #84	; 0x54
 80176bc:	2100      	movs	r1, #0
 80176be:	4618      	mov	r0, r3
 80176c0:	f004 fcf2 	bl	801c0a8 <memset>
                .ctz.head = file->ctz.head,
 80176c4:	683b      	ldr	r3, [r7, #0]
 80176c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 80176c8:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 80176ca:	683b      	ldr	r3, [r7, #0]
 80176cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 80176ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80176d0:	2301      	movs	r3, #1
 80176d2:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 80176d4:	683b      	ldr	r3, [r7, #0]
 80176d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 80176d8:	643b      	str	r3, [r7, #64]	; 0x40
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80176e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80176e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	4619      	mov	r1, r3
 80176ea:	6878      	ldr	r0, [r7, #4]
 80176ec:	f7fb fa78 	bl	8012be0 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 80176f0:	e02b      	b.n	801774a <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 80176f2:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80176f6:	f107 010c 	add.w	r1, r7, #12
 80176fa:	2301      	movs	r3, #1
 80176fc:	6878      	ldr	r0, [r7, #4]
 80176fe:	f000 f90d 	bl	801791c <lfs_file_flushedread>
 8017702:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8017704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017706:	2b00      	cmp	r3, #0
 8017708:	da01      	bge.n	801770e <lfs_file_flush+0xb2>
                    return res;
 801770a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801770c:	e06f      	b.n	80177ee <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 801770e:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8017712:	2301      	movs	r3, #1
 8017714:	6839      	ldr	r1, [r7, #0]
 8017716:	6878      	ldr	r0, [r7, #4]
 8017718:	f000 fa08 	bl	8017b2c <lfs_file_flushedwrite>
 801771c:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 801771e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017720:	2b00      	cmp	r3, #0
 8017722:	da01      	bge.n	8017728 <lfs_file_flush+0xcc>
                    return res;
 8017724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017726:	e062      	b.n	80177ee <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017730:	d00b      	beq.n	801774a <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 8017732:	f107 030c 	add.w	r3, r7, #12
 8017736:	3340      	adds	r3, #64	; 0x40
 8017738:	4619      	mov	r1, r3
 801773a:	6878      	ldr	r0, [r7, #4]
 801773c:	f7fb fa50 	bl	8012be0 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	4619      	mov	r1, r3
 8017744:	6878      	ldr	r0, [r7, #4]
 8017746:	f7fb fa4b 	bl	8012be0 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 801774a:	683b      	ldr	r3, [r7, #0]
 801774c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801774e:	683b      	ldr	r3, [r7, #0]
 8017750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017752:	429a      	cmp	r2, r3
 8017754:	d3cd      	bcc.n	80176f2 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8017756:	683b      	ldr	r3, [r7, #0]
 8017758:	f103 0140 	add.w	r1, r3, #64	; 0x40
 801775c:	687a      	ldr	r2, [r7, #4]
 801775e:	2301      	movs	r3, #1
 8017760:	6878      	ldr	r0, [r7, #4]
 8017762:	f7fb fbf9 	bl	8012f58 <lfs_bd_flush>
 8017766:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8017768:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801776a:	2b00      	cmp	r3, #0
 801776c:	d026      	beq.n	80177bc <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 801776e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017770:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8017774:	d001      	beq.n	801777a <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 8017776:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017778:	e039      	b.n	80177ee <lfs_file_flush+0x192>
                        goto relocate;
 801777a:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 801777c:	683b      	ldr	r3, [r7, #0]
 801777e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017780:	4a1d      	ldr	r2, [pc, #116]	; (80177f8 <lfs_file_flush+0x19c>)
 8017782:	9200      	str	r2, [sp, #0]
 8017784:	f640 425f 	movw	r2, #3167	; 0xc5f
 8017788:	491c      	ldr	r1, [pc, #112]	; (80177fc <lfs_file_flush+0x1a0>)
 801778a:	481d      	ldr	r0, [pc, #116]	; (8017800 <lfs_file_flush+0x1a4>)
 801778c:	f004 fb2a 	bl	801bde4 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8017790:	6839      	ldr	r1, [r7, #0]
 8017792:	6878      	ldr	r0, [r7, #4]
 8017794:	f7ff fe66 	bl	8017464 <lfs_file_relocate>
 8017798:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 801779a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801779c:	2b00      	cmp	r3, #0
 801779e:	d0da      	beq.n	8017756 <lfs_file_flush+0xfa>
                    return err;
 80177a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80177a2:	e024      	b.n	80177ee <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 80177a4:	683b      	ldr	r3, [r7, #0]
 80177a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80177a8:	683b      	ldr	r3, [r7, #0]
 80177aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177ac:	4619      	mov	r1, r3
 80177ae:	4610      	mov	r0, r2
 80177b0:	f7fb f950 	bl	8012a54 <lfs_max>
 80177b4:	4602      	mov	r2, r0
 80177b6:	683b      	ldr	r3, [r7, #0]
 80177b8:	635a      	str	r2, [r3, #52]	; 0x34
 80177ba:	e000      	b.n	80177be <lfs_file_flush+0x162>
                break;
 80177bc:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 80177be:	683b      	ldr	r3, [r7, #0]
 80177c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80177c2:	683b      	ldr	r3, [r7, #0]
 80177c4:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 80177c6:	683b      	ldr	r3, [r7, #0]
 80177c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80177ca:	683b      	ldr	r3, [r7, #0]
 80177cc:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 80177ce:	683b      	ldr	r3, [r7, #0]
 80177d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80177d6:	683b      	ldr	r3, [r7, #0]
 80177d8:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 80177da:	683b      	ldr	r3, [r7, #0]
 80177dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80177e2:	683b      	ldr	r3, [r7, #0]
 80177e4:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 80177e6:	683b      	ldr	r3, [r7, #0]
 80177e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80177ea:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 80177ec:	2300      	movs	r3, #0
}
 80177ee:	4618      	mov	r0, r3
 80177f0:	3774      	adds	r7, #116	; 0x74
 80177f2:	46bd      	mov	sp, r7
 80177f4:	bd90      	pop	{r4, r7, pc}
 80177f6:	bf00      	nop
 80177f8:	08021c54 	.word	0x08021c54
 80177fc:	08021b40 	.word	0x08021b40
 8017800:	08021cd4 	.word	0x08021cd4

08017804 <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 8017804:	b580      	push	{r7, lr}
 8017806:	b090      	sub	sp, #64	; 0x40
 8017808:	af00      	add	r7, sp, #0
 801780a:	6078      	str	r0, [r7, #4]
 801780c:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 801780e:	683b      	ldr	r3, [r7, #0]
 8017810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8017816:	2b00      	cmp	r3, #0
 8017818:	d001      	beq.n	801781e <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 801781a:	2300      	movs	r3, #0
 801781c:	e07a      	b.n	8017914 <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 801781e:	6839      	ldr	r1, [r7, #0]
 8017820:	6878      	ldr	r0, [r7, #4]
 8017822:	f7ff ff1b 	bl	801765c <lfs_file_flush>
 8017826:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 8017828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801782a:	2b00      	cmp	r3, #0
 801782c:	d007      	beq.n	801783e <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 801782e:	683b      	ldr	r3, [r7, #0]
 8017830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017832:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8017836:	683b      	ldr	r3, [r7, #0]
 8017838:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 801783a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801783c:	e06a      	b.n	8017914 <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 801783e:	683b      	ldr	r3, [r7, #0]
 8017840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017846:	2b00      	cmp	r3, #0
 8017848:	d063      	beq.n	8017912 <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 801784a:	683b      	ldr	r3, [r7, #0]
 801784c:	3308      	adds	r3, #8
 801784e:	4618      	mov	r0, r3
 8017850:	f7fb fd25 	bl	801329e <lfs_pair_isnull>
 8017854:	4603      	mov	r3, r0
 8017856:	f083 0301 	eor.w	r3, r3, #1
 801785a:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 801785c:	2b00      	cmp	r3, #0
 801785e:	d058      	beq.n	8017912 <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8017860:	683b      	ldr	r3, [r7, #0]
 8017862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017864:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017868:	2b00      	cmp	r3, #0
 801786a:	d009      	beq.n	8017880 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 801786c:	f240 2301 	movw	r3, #513	; 0x201
 8017870:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 8017872:	683b      	ldr	r3, [r7, #0]
 8017874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017876:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 8017878:	683b      	ldr	r3, [r7, #0]
 801787a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801787c:	637b      	str	r3, [r7, #52]	; 0x34
 801787e:	e014      	b.n	80178aa <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8017880:	f240 2302 	movw	r3, #514	; 0x202
 8017884:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 8017886:	683a      	ldr	r2, [r7, #0]
 8017888:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801788c:	3228      	adds	r2, #40	; 0x28
 801788e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017892:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 8017896:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801789a:	4618      	mov	r0, r3
 801789c:	f7fb ff20 	bl	80136e0 <lfs_ctz_tole32>
            buffer = &ctz;
 80178a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80178a4:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 80178a6:	2308      	movs	r3, #8
 80178a8:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 80178aa:	683b      	ldr	r3, [r7, #0]
 80178ac:	f103 0108 	add.w	r1, r3, #8
 80178b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80178b2:	051a      	lsls	r2, r3, #20
 80178b4:	683b      	ldr	r3, [r7, #0]
 80178b6:	889b      	ldrh	r3, [r3, #4]
 80178b8:	029b      	lsls	r3, r3, #10
 80178ba:	431a      	orrs	r2, r3
 80178bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80178be:	4313      	orrs	r3, r2
 80178c0:	61bb      	str	r3, [r7, #24]
 80178c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178c4:	61fb      	str	r3, [r7, #28]
 80178c6:	683b      	ldr	r3, [r7, #0]
 80178c8:	889b      	ldrh	r3, [r3, #4]
 80178ca:	029a      	lsls	r2, r3, #10
 80178cc:	683b      	ldr	r3, [r7, #0]
 80178ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80178d0:	689b      	ldr	r3, [r3, #8]
 80178d2:	4313      	orrs	r3, r2
 80178d4:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 80178d8:	623b      	str	r3, [r7, #32]
 80178da:	683b      	ldr	r3, [r7, #0]
 80178dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80178de:	685b      	ldr	r3, [r3, #4]
 80178e0:	627b      	str	r3, [r7, #36]	; 0x24
 80178e2:	f107 0218 	add.w	r2, r7, #24
 80178e6:	2302      	movs	r3, #2
 80178e8:	6878      	ldr	r0, [r7, #4]
 80178ea:	f7ff f83f 	bl	801696c <lfs_dir_commit>
 80178ee:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 80178f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d007      	beq.n	8017906 <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 80178f6:	683b      	ldr	r3, [r7, #0]
 80178f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80178fe:	683b      	ldr	r3, [r7, #0]
 8017900:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8017902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017904:	e006      	b.n	8017914 <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 8017906:	683b      	ldr	r3, [r7, #0]
 8017908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801790a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801790e:	683b      	ldr	r3, [r7, #0]
 8017910:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 8017912:	2300      	movs	r3, #0
}
 8017914:	4618      	mov	r0, r3
 8017916:	3740      	adds	r7, #64	; 0x40
 8017918:	46bd      	mov	sp, r7
 801791a:	bd80      	pop	{r7, pc}

0801791c <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 801791c:	b5b0      	push	{r4, r5, r7, lr}
 801791e:	b090      	sub	sp, #64	; 0x40
 8017920:	af06      	add	r7, sp, #24
 8017922:	60f8      	str	r0, [r7, #12]
 8017924:	60b9      	str	r1, [r7, #8]
 8017926:	607a      	str	r2, [r7, #4]
 8017928:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 801792e:	683b      	ldr	r3, [r7, #0]
 8017930:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8017932:	68bb      	ldr	r3, [r7, #8]
 8017934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017936:	68bb      	ldr	r3, [r7, #8]
 8017938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801793a:	429a      	cmp	r2, r3
 801793c:	d301      	bcc.n	8017942 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 801793e:	2300      	movs	r3, #0
 8017940:	e0b7      	b.n	8017ab2 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8017942:	68bb      	ldr	r3, [r7, #8]
 8017944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017946:	68bb      	ldr	r3, [r7, #8]
 8017948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801794a:	1ad3      	subs	r3, r2, r3
 801794c:	4619      	mov	r1, r3
 801794e:	6838      	ldr	r0, [r7, #0]
 8017950:	f7fb f890 	bl	8012a74 <lfs_min>
 8017954:	6038      	str	r0, [r7, #0]
    nsize = size;
 8017956:	683b      	ldr	r3, [r7, #0]
 8017958:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 801795a:	e0a5      	b.n	8017aa8 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 801795c:	68bb      	ldr	r3, [r7, #8]
 801795e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017960:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8017964:	2b00      	cmp	r3, #0
 8017966:	d006      	beq.n	8017976 <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8017968:	68bb      	ldr	r3, [r7, #8]
 801796a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017970:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8017972:	429a      	cmp	r2, r3
 8017974:	d130      	bne.n	80179d8 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 8017976:	68bb      	ldr	r3, [r7, #8]
 8017978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801797a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801797e:	2b00      	cmp	r3, #0
 8017980:	d11c      	bne.n	80179bc <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8017982:	68bb      	ldr	r3, [r7, #8]
 8017984:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8017988:	68bb      	ldr	r3, [r7, #8]
 801798a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 801798c:	68bb      	ldr	r3, [r7, #8]
 801798e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017990:	68ba      	ldr	r2, [r7, #8]
 8017992:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8017994:	68b9      	ldr	r1, [r7, #8]
 8017996:	3138      	adds	r1, #56	; 0x38
 8017998:	68b8      	ldr	r0, [r7, #8]
 801799a:	303c      	adds	r0, #60	; 0x3c
 801799c:	9003      	str	r0, [sp, #12]
 801799e:	9102      	str	r1, [sp, #8]
 80179a0:	9201      	str	r2, [sp, #4]
 80179a2:	9300      	str	r3, [sp, #0]
 80179a4:	462b      	mov	r3, r5
 80179a6:	4622      	mov	r2, r4
 80179a8:	2100      	movs	r1, #0
 80179aa:	68f8      	ldr	r0, [r7, #12]
 80179ac:	f7ff f97c 	bl	8016ca8 <lfs_ctz_find>
 80179b0:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 80179b2:	69fb      	ldr	r3, [r7, #28]
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d009      	beq.n	80179cc <lfs_file_flushedread+0xb0>
                    return err;
 80179b8:	69fb      	ldr	r3, [r7, #28]
 80179ba:	e07a      	b.n	8017ab2 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 80179bc:	68bb      	ldr	r3, [r7, #8]
 80179be:	f06f 0201 	mvn.w	r2, #1
 80179c2:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 80179c4:	68bb      	ldr	r3, [r7, #8]
 80179c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80179c8:	68bb      	ldr	r3, [r7, #8]
 80179ca:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 80179cc:	68bb      	ldr	r3, [r7, #8]
 80179ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80179d4:	68bb      	ldr	r3, [r7, #8]
 80179d6:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80179dc:	69da      	ldr	r2, [r3, #28]
 80179de:	68bb      	ldr	r3, [r7, #8]
 80179e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80179e2:	1ad3      	subs	r3, r2, r3
 80179e4:	4619      	mov	r1, r3
 80179e6:	6a38      	ldr	r0, [r7, #32]
 80179e8:	f7fb f844 	bl	8012a74 <lfs_min>
 80179ec:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 80179ee:	68bb      	ldr	r3, [r7, #8]
 80179f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d026      	beq.n	8017a48 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 80179fa:	68bb      	ldr	r3, [r7, #8]
 80179fc:	f103 0408 	add.w	r4, r3, #8
 8017a00:	68bb      	ldr	r3, [r7, #8]
 8017a02:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017a0a:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8017a0c:	68bb      	ldr	r3, [r7, #8]
 8017a0e:	889b      	ldrh	r3, [r3, #4]
 8017a10:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8017a12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017a16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017a1a:	68b9      	ldr	r1, [r7, #8]
 8017a1c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8017a1e:	69b8      	ldr	r0, [r7, #24]
 8017a20:	9005      	str	r0, [sp, #20]
 8017a22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017a24:	9004      	str	r0, [sp, #16]
 8017a26:	9103      	str	r1, [sp, #12]
 8017a28:	9302      	str	r3, [sp, #8]
 8017a2a:	4b24      	ldr	r3, [pc, #144]	; (8017abc <lfs_file_flushedread+0x1a0>)
 8017a2c:	9301      	str	r3, [sp, #4]
 8017a2e:	9200      	str	r2, [sp, #0]
 8017a30:	462b      	mov	r3, r5
 8017a32:	2200      	movs	r2, #0
 8017a34:	4621      	mov	r1, r4
 8017a36:	68f8      	ldr	r0, [r7, #12]
 8017a38:	f7fc f937 	bl	8013caa <lfs_dir_getread>
 8017a3c:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8017a3e:	693b      	ldr	r3, [r7, #16]
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d01d      	beq.n	8017a80 <lfs_file_flushedread+0x164>
                return err;
 8017a44:	693b      	ldr	r3, [r7, #16]
 8017a46:	e034      	b.n	8017ab2 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8017a48:	68bb      	ldr	r3, [r7, #8]
 8017a4a:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8017a4e:	68fb      	ldr	r3, [r7, #12]
 8017a50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017a52:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 8017a54:	68bb      	ldr	r3, [r7, #8]
 8017a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a58:	68ba      	ldr	r2, [r7, #8]
 8017a5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8017a5c:	69b9      	ldr	r1, [r7, #24]
 8017a5e:	9103      	str	r1, [sp, #12]
 8017a60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017a62:	9102      	str	r1, [sp, #8]
 8017a64:	9201      	str	r2, [sp, #4]
 8017a66:	9300      	str	r3, [sp, #0]
 8017a68:	4623      	mov	r3, r4
 8017a6a:	4602      	mov	r2, r0
 8017a6c:	2100      	movs	r1, #0
 8017a6e:	68f8      	ldr	r0, [r7, #12]
 8017a70:	f7fb f8dc 	bl	8012c2c <lfs_bd_read>
 8017a74:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8017a76:	697b      	ldr	r3, [r7, #20]
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d001      	beq.n	8017a80 <lfs_file_flushedread+0x164>
                return err;
 8017a7c:	697b      	ldr	r3, [r7, #20]
 8017a7e:	e018      	b.n	8017ab2 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8017a80:	68bb      	ldr	r3, [r7, #8]
 8017a82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017a84:	69bb      	ldr	r3, [r7, #24]
 8017a86:	441a      	add	r2, r3
 8017a88:	68bb      	ldr	r3, [r7, #8]
 8017a8a:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8017a8c:	68bb      	ldr	r3, [r7, #8]
 8017a8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8017a90:	69bb      	ldr	r3, [r7, #24]
 8017a92:	441a      	add	r2, r3
 8017a94:	68bb      	ldr	r3, [r7, #8]
 8017a96:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8017a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017a9a:	69bb      	ldr	r3, [r7, #24]
 8017a9c:	4413      	add	r3, r2
 8017a9e:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8017aa0:	6a3a      	ldr	r2, [r7, #32]
 8017aa2:	69bb      	ldr	r3, [r7, #24]
 8017aa4:	1ad3      	subs	r3, r2, r3
 8017aa6:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8017aa8:	6a3b      	ldr	r3, [r7, #32]
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	f47f af56 	bne.w	801795c <lfs_file_flushedread+0x40>
    }

    return size;
 8017ab0:	683b      	ldr	r3, [r7, #0]
}
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	3728      	adds	r7, #40	; 0x28
 8017ab6:	46bd      	mov	sp, r7
 8017ab8:	bdb0      	pop	{r4, r5, r7, pc}
 8017aba:	bf00      	nop
 8017abc:	fff7fc00 	.word	0xfff7fc00

08017ac0 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8017ac0:	b580      	push	{r7, lr}
 8017ac2:	b086      	sub	sp, #24
 8017ac4:	af00      	add	r7, sp, #0
 8017ac6:	60f8      	str	r0, [r7, #12]
 8017ac8:	60b9      	str	r1, [r7, #8]
 8017aca:	607a      	str	r2, [r7, #4]
 8017acc:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8017ace:	68bb      	ldr	r3, [r7, #8]
 8017ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ad2:	f003 0301 	and.w	r3, r3, #1
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d106      	bne.n	8017ae8 <lfs_file_rawread+0x28>
 8017ada:	4b11      	ldr	r3, [pc, #68]	; (8017b20 <lfs_file_rawread+0x60>)
 8017adc:	4a11      	ldr	r2, [pc, #68]	; (8017b24 <lfs_file_rawread+0x64>)
 8017ade:	f640 41ea 	movw	r1, #3306	; 0xcea
 8017ae2:	4811      	ldr	r0, [pc, #68]	; (8017b28 <lfs_file_rawread+0x68>)
 8017ae4:	f003 f944 	bl	801ad70 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8017ae8:	68bb      	ldr	r3, [r7, #8]
 8017aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d009      	beq.n	8017b08 <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8017af4:	68b9      	ldr	r1, [r7, #8]
 8017af6:	68f8      	ldr	r0, [r7, #12]
 8017af8:	f7ff fdb0 	bl	801765c <lfs_file_flush>
 8017afc:	6178      	str	r0, [r7, #20]
        if (err) {
 8017afe:	697b      	ldr	r3, [r7, #20]
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d001      	beq.n	8017b08 <lfs_file_rawread+0x48>
            return err;
 8017b04:	697b      	ldr	r3, [r7, #20]
 8017b06:	e006      	b.n	8017b16 <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8017b08:	683b      	ldr	r3, [r7, #0]
 8017b0a:	687a      	ldr	r2, [r7, #4]
 8017b0c:	68b9      	ldr	r1, [r7, #8]
 8017b0e:	68f8      	ldr	r0, [r7, #12]
 8017b10:	f7ff ff04 	bl	801791c <lfs_file_flushedread>
 8017b14:	4603      	mov	r3, r0
}
 8017b16:	4618      	mov	r0, r3
 8017b18:	3718      	adds	r7, #24
 8017b1a:	46bd      	mov	sp, r7
 8017b1c:	bd80      	pop	{r7, pc}
 8017b1e:	bf00      	nop
 8017b20:	08021e7c 	.word	0x08021e7c
 8017b24:	08022e04 	.word	0x08022e04
 8017b28:	08021b40 	.word	0x08021b40

08017b2c <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8017b2c:	b5b0      	push	{r4, r5, r7, lr}
 8017b2e:	b090      	sub	sp, #64	; 0x40
 8017b30:	af04      	add	r7, sp, #16
 8017b32:	60f8      	str	r0, [r7, #12]
 8017b34:	60b9      	str	r1, [r7, #8]
 8017b36:	607a      	str	r2, [r7, #4]
 8017b38:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 8017b3e:	683b      	ldr	r3, [r7, #0]
 8017b40:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8017b42:	68bb      	ldr	r3, [r7, #8]
 8017b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	f000 810c 	beq.w	8017d68 <lfs_file_flushedwrite+0x23c>
            lfs_max(file->pos+nsize, file->ctz.size) >
 8017b50:	68bb      	ldr	r3, [r7, #8]
 8017b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b56:	441a      	add	r2, r3
 8017b58:	68bb      	ldr	r3, [r7, #8]
 8017b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b5c:	4619      	mov	r1, r3
 8017b5e:	4610      	mov	r0, r2
 8017b60:	f7fa ff78 	bl	8012a54 <lfs_max>
 8017b64:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 8017b66:	68fb      	ldr	r3, [r7, #12]
 8017b68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017b6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	d004      	beq.n	8017b80 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8017b76:	68fb      	ldr	r3, [r7, #12]
 8017b78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8017b7c:	08db      	lsrs	r3, r3, #3
 8017b7e:	e003      	b.n	8017b88 <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017b84:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 8017b86:	08db      	lsrs	r3, r3, #3
 8017b88:	4619      	mov	r1, r3
 8017b8a:	4610      	mov	r0, r2
 8017b8c:	f7fa ff72 	bl	8012a74 <lfs_min>
 8017b90:	4603      	mov	r3, r0
 8017b92:	4619      	mov	r1, r3
 8017b94:	f240 30fe 	movw	r0, #1022	; 0x3fe
 8017b98:	f7fa ff6c 	bl	8012a74 <lfs_min>
 8017b9c:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 8017b9e:	429c      	cmp	r4, r3
 8017ba0:	f240 80e2 	bls.w	8017d68 <lfs_file_flushedwrite+0x23c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8017ba4:	68b9      	ldr	r1, [r7, #8]
 8017ba6:	68f8      	ldr	r0, [r7, #12]
 8017ba8:	f7ff fd36 	bl	8017618 <lfs_file_outline>
 8017bac:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8017bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	f000 80d9 	beq.w	8017d68 <lfs_file_flushedwrite+0x23c>
            file->flags |= LFS_F_ERRED;
 8017bb6:	68bb      	ldr	r3, [r7, #8]
 8017bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017bba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8017bbe:	68bb      	ldr	r3, [r7, #8]
 8017bc0:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8017bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bc4:	e0d5      	b.n	8017d72 <lfs_file_flushedwrite+0x246>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8017bc6:	68bb      	ldr	r3, [r7, #8]
 8017bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d006      	beq.n	8017be0 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 8017bd2:	68bb      	ldr	r3, [r7, #8]
 8017bd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8017bd6:	68fb      	ldr	r3, [r7, #12]
 8017bd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017bda:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8017bdc:	429a      	cmp	r2, r3
 8017bde:	d16b      	bne.n	8017cb8 <lfs_file_flushedwrite+0x18c>
            if (!(file->flags & LFS_F_INLINE)) {
 8017be0:	68bb      	ldr	r3, [r7, #8]
 8017be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017be4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d157      	bne.n	8017c9c <lfs_file_flushedwrite+0x170>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8017bec:	68bb      	ldr	r3, [r7, #8]
 8017bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d12d      	bne.n	8017c54 <lfs_file_flushedwrite+0x128>
 8017bf8:	68bb      	ldr	r3, [r7, #8]
 8017bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d029      	beq.n	8017c54 <lfs_file_flushedwrite+0x128>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8017c00:	68bb      	ldr	r3, [r7, #8]
 8017c02:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8017c06:	68bb      	ldr	r3, [r7, #8]
 8017c08:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8017c0a:	68bb      	ldr	r3, [r7, #8]
 8017c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 8017c0e:	68ba      	ldr	r2, [r7, #8]
 8017c10:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8017c12:	3a01      	subs	r2, #1
 8017c14:	68b9      	ldr	r1, [r7, #8]
 8017c16:	3138      	adds	r1, #56	; 0x38
 8017c18:	68b8      	ldr	r0, [r7, #8]
 8017c1a:	303c      	adds	r0, #60	; 0x3c
 8017c1c:	9003      	str	r0, [sp, #12]
 8017c1e:	9102      	str	r1, [sp, #8]
 8017c20:	9201      	str	r2, [sp, #4]
 8017c22:	9300      	str	r3, [sp, #0]
 8017c24:	462b      	mov	r3, r5
 8017c26:	4622      	mov	r2, r4
 8017c28:	2100      	movs	r1, #0
 8017c2a:	68f8      	ldr	r0, [r7, #12]
 8017c2c:	f7ff f83c 	bl	8016ca8 <lfs_ctz_find>
 8017c30:	6238      	str	r0, [r7, #32]
                    if (err) {
 8017c32:	6a3b      	ldr	r3, [r7, #32]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d007      	beq.n	8017c48 <lfs_file_flushedwrite+0x11c>
                        file->flags |= LFS_F_ERRED;
 8017c38:	68bb      	ldr	r3, [r7, #8]
 8017c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c3c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8017c40:	68bb      	ldr	r3, [r7, #8]
 8017c42:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8017c44:	6a3b      	ldr	r3, [r7, #32]
 8017c46:	e094      	b.n	8017d72 <lfs_file_flushedwrite+0x246>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8017c48:	68bb      	ldr	r3, [r7, #8]
 8017c4a:	3340      	adds	r3, #64	; 0x40
 8017c4c:	4619      	mov	r1, r3
 8017c4e:	68f8      	ldr	r0, [r7, #12]
 8017c50:	f7fa ffd5 	bl	8012bfe <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 8017c54:	68f8      	ldr	r0, [r7, #12]
 8017c56:	f7fb fe53 	bl	8013900 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8017c5a:	68bb      	ldr	r3, [r7, #8]
 8017c5c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8017c60:	68fc      	ldr	r4, [r7, #12]
 8017c62:	68bb      	ldr	r3, [r7, #8]
 8017c64:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8017c66:	68bb      	ldr	r3, [r7, #8]
 8017c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017c6a:	68ba      	ldr	r2, [r7, #8]
 8017c6c:	3238      	adds	r2, #56	; 0x38
 8017c6e:	68b9      	ldr	r1, [r7, #8]
 8017c70:	313c      	adds	r1, #60	; 0x3c
 8017c72:	9102      	str	r1, [sp, #8]
 8017c74:	9201      	str	r2, [sp, #4]
 8017c76:	9300      	str	r3, [sp, #0]
 8017c78:	462b      	mov	r3, r5
 8017c7a:	4622      	mov	r2, r4
 8017c7c:	4601      	mov	r1, r0
 8017c7e:	68f8      	ldr	r0, [r7, #12]
 8017c80:	f7ff f87e 	bl	8016d80 <lfs_ctz_extend>
 8017c84:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8017c86:	69fb      	ldr	r3, [r7, #28]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d00f      	beq.n	8017cac <lfs_file_flushedwrite+0x180>
                    file->flags |= LFS_F_ERRED;
 8017c8c:	68bb      	ldr	r3, [r7, #8]
 8017c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c90:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8017c94:	68bb      	ldr	r3, [r7, #8]
 8017c96:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 8017c98:	69fb      	ldr	r3, [r7, #28]
 8017c9a:	e06a      	b.n	8017d72 <lfs_file_flushedwrite+0x246>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8017c9c:	68bb      	ldr	r3, [r7, #8]
 8017c9e:	f06f 0201 	mvn.w	r2, #1
 8017ca2:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8017ca4:	68bb      	ldr	r3, [r7, #8]
 8017ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017ca8:	68bb      	ldr	r3, [r7, #8]
 8017caa:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8017cac:	68bb      	ldr	r3, [r7, #8]
 8017cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017cb0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8017cb4:	68bb      	ldr	r3, [r7, #8]
 8017cb6:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8017cb8:	68fb      	ldr	r3, [r7, #12]
 8017cba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017cbc:	69da      	ldr	r2, [r3, #28]
 8017cbe:	68bb      	ldr	r3, [r7, #8]
 8017cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017cc2:	1ad3      	subs	r3, r2, r3
 8017cc4:	4619      	mov	r1, r3
 8017cc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017cc8:	f7fa fed4 	bl	8012a74 <lfs_min>
 8017ccc:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8017cce:	68bb      	ldr	r3, [r7, #8]
 8017cd0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8017cd4:	68fc      	ldr	r4, [r7, #12]
 8017cd6:	68bb      	ldr	r3, [r7, #8]
 8017cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017cda:	68ba      	ldr	r2, [r7, #8]
 8017cdc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8017cde:	69b9      	ldr	r1, [r7, #24]
 8017ce0:	9103      	str	r1, [sp, #12]
 8017ce2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017ce4:	9102      	str	r1, [sp, #8]
 8017ce6:	9201      	str	r2, [sp, #4]
 8017ce8:	9300      	str	r3, [sp, #0]
 8017cea:	2301      	movs	r3, #1
 8017cec:	4622      	mov	r2, r4
 8017cee:	4601      	mov	r1, r0
 8017cf0:	68f8      	ldr	r0, [r7, #12]
 8017cf2:	f7fb f9e1 	bl	80130b8 <lfs_bd_prog>
 8017cf6:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8017cf8:	697b      	ldr	r3, [r7, #20]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d01c      	beq.n	8017d38 <lfs_file_flushedwrite+0x20c>
                if (err == LFS_ERR_CORRUPT) {
 8017cfe:	697b      	ldr	r3, [r7, #20]
 8017d00:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8017d04:	d007      	beq.n	8017d16 <lfs_file_flushedwrite+0x1ea>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8017d06:	68bb      	ldr	r3, [r7, #8]
 8017d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d0a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8017d0e:	68bb      	ldr	r3, [r7, #8]
 8017d10:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8017d12:	697b      	ldr	r3, [r7, #20]
 8017d14:	e02d      	b.n	8017d72 <lfs_file_flushedwrite+0x246>
                    goto relocate;
 8017d16:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8017d18:	68b9      	ldr	r1, [r7, #8]
 8017d1a:	68f8      	ldr	r0, [r7, #12]
 8017d1c:	f7ff fba2 	bl	8017464 <lfs_file_relocate>
 8017d20:	6178      	str	r0, [r7, #20]
            if (err) {
 8017d22:	697b      	ldr	r3, [r7, #20]
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d0d2      	beq.n	8017cce <lfs_file_flushedwrite+0x1a2>
                file->flags |= LFS_F_ERRED;
 8017d28:	68bb      	ldr	r3, [r7, #8]
 8017d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d2c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8017d30:	68bb      	ldr	r3, [r7, #8]
 8017d32:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8017d34:	697b      	ldr	r3, [r7, #20]
 8017d36:	e01c      	b.n	8017d72 <lfs_file_flushedwrite+0x246>
            break;
 8017d38:	bf00      	nop
            }
        }

        file->pos += diff;
 8017d3a:	68bb      	ldr	r3, [r7, #8]
 8017d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017d3e:	69bb      	ldr	r3, [r7, #24]
 8017d40:	441a      	add	r2, r3
 8017d42:	68bb      	ldr	r3, [r7, #8]
 8017d44:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8017d46:	68bb      	ldr	r3, [r7, #8]
 8017d48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8017d4a:	69bb      	ldr	r3, [r7, #24]
 8017d4c:	441a      	add	r2, r3
 8017d4e:	68bb      	ldr	r3, [r7, #8]
 8017d50:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8017d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d54:	69bb      	ldr	r3, [r7, #24]
 8017d56:	4413      	add	r3, r2
 8017d58:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8017d5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017d5c:	69bb      	ldr	r3, [r7, #24]
 8017d5e:	1ad3      	subs	r3, r2, r3
 8017d60:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 8017d62:	68f8      	ldr	r0, [r7, #12]
 8017d64:	f7fb fdcc 	bl	8013900 <lfs_alloc_ack>
    while (nsize > 0) {
 8017d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	f47f af2b 	bne.w	8017bc6 <lfs_file_flushedwrite+0x9a>
    }

    return size;
 8017d70:	683b      	ldr	r3, [r7, #0]
}
 8017d72:	4618      	mov	r0, r3
 8017d74:	3730      	adds	r7, #48	; 0x30
 8017d76:	46bd      	mov	sp, r7
 8017d78:	bdb0      	pop	{r4, r5, r7, pc}
	...

08017d7c <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8017d7c:	b580      	push	{r7, lr}
 8017d7e:	b08a      	sub	sp, #40	; 0x28
 8017d80:	af00      	add	r7, sp, #0
 8017d82:	60f8      	str	r0, [r7, #12]
 8017d84:	60b9      	str	r1, [r7, #8]
 8017d86:	607a      	str	r2, [r7, #4]
 8017d88:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8017d8a:	68bb      	ldr	r3, [r7, #8]
 8017d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d8e:	f003 0302 	and.w	r3, r3, #2
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d106      	bne.n	8017da4 <lfs_file_rawwrite+0x28>
 8017d96:	4b38      	ldr	r3, [pc, #224]	; (8017e78 <lfs_file_rawwrite+0xfc>)
 8017d98:	4a38      	ldr	r2, [pc, #224]	; (8017e7c <lfs_file_rawwrite+0x100>)
 8017d9a:	f640 5155 	movw	r1, #3413	; 0xd55
 8017d9e:	4838      	ldr	r0, [pc, #224]	; (8017e80 <lfs_file_rawwrite+0x104>)
 8017da0:	f002 ffe6 	bl	801ad70 <__assert_func>

    if (file->flags & LFS_F_READING) {
 8017da4:	68bb      	ldr	r3, [r7, #8]
 8017da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017da8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	d009      	beq.n	8017dc4 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8017db0:	68b9      	ldr	r1, [r7, #8]
 8017db2:	68f8      	ldr	r0, [r7, #12]
 8017db4:	f7ff fc52 	bl	801765c <lfs_file_flush>
 8017db8:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8017dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d001      	beq.n	8017dc4 <lfs_file_rawwrite+0x48>
            return err;
 8017dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dc2:	e055      	b.n	8017e70 <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8017dc4:	68bb      	ldr	r3, [r7, #8]
 8017dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d009      	beq.n	8017de4 <lfs_file_rawwrite+0x68>
 8017dd0:	68bb      	ldr	r3, [r7, #8]
 8017dd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017dd4:	68bb      	ldr	r3, [r7, #8]
 8017dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017dd8:	429a      	cmp	r2, r3
 8017dda:	d203      	bcs.n	8017de4 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 8017ddc:	68bb      	ldr	r3, [r7, #8]
 8017dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017de0:	68bb      	ldr	r3, [r7, #8]
 8017de2:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8017de4:	68bb      	ldr	r3, [r7, #8]
 8017de6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017de8:	683b      	ldr	r3, [r7, #0]
 8017dea:	441a      	add	r2, r3
 8017dec:	68fb      	ldr	r3, [r7, #12]
 8017dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017df0:	429a      	cmp	r2, r3
 8017df2:	d902      	bls.n	8017dfa <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8017df4:	f06f 031a 	mvn.w	r3, #26
 8017df8:	e03a      	b.n	8017e70 <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8017dfa:	68bb      	ldr	r3, [r7, #8]
 8017dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d121      	bne.n	8017e4a <lfs_file_rawwrite+0xce>
 8017e06:	68bb      	ldr	r3, [r7, #8]
 8017e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017e0a:	68bb      	ldr	r3, [r7, #8]
 8017e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e0e:	429a      	cmp	r2, r3
 8017e10:	d91b      	bls.n	8017e4a <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8017e12:	68bb      	ldr	r3, [r7, #8]
 8017e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017e16:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8017e18:	68bb      	ldr	r3, [r7, #8]
 8017e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e1c:	68bb      	ldr	r3, [r7, #8]
 8017e1e:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8017e20:	e00e      	b.n	8017e40 <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8017e22:	2300      	movs	r3, #0
 8017e24:	75fb      	strb	r3, [r7, #23]
 8017e26:	f107 0217 	add.w	r2, r7, #23
 8017e2a:	2301      	movs	r3, #1
 8017e2c:	68b9      	ldr	r1, [r7, #8]
 8017e2e:	68f8      	ldr	r0, [r7, #12]
 8017e30:	f7ff fe7c 	bl	8017b2c <lfs_file_flushedwrite>
 8017e34:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8017e36:	69fb      	ldr	r3, [r7, #28]
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	da01      	bge.n	8017e40 <lfs_file_rawwrite+0xc4>
                return res;
 8017e3c:	69fb      	ldr	r3, [r7, #28]
 8017e3e:	e017      	b.n	8017e70 <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 8017e40:	68bb      	ldr	r3, [r7, #8]
 8017e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017e44:	6a3a      	ldr	r2, [r7, #32]
 8017e46:	429a      	cmp	r2, r3
 8017e48:	d8eb      	bhi.n	8017e22 <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8017e4a:	683b      	ldr	r3, [r7, #0]
 8017e4c:	687a      	ldr	r2, [r7, #4]
 8017e4e:	68b9      	ldr	r1, [r7, #8]
 8017e50:	68f8      	ldr	r0, [r7, #12]
 8017e52:	f7ff fe6b 	bl	8017b2c <lfs_file_flushedwrite>
 8017e56:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8017e58:	69bb      	ldr	r3, [r7, #24]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	da01      	bge.n	8017e62 <lfs_file_rawwrite+0xe6>
        return nsize;
 8017e5e:	69bb      	ldr	r3, [r7, #24]
 8017e60:	e006      	b.n	8017e70 <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8017e62:	68bb      	ldr	r3, [r7, #8]
 8017e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e66:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8017e6a:	68bb      	ldr	r3, [r7, #8]
 8017e6c:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 8017e6e:	69bb      	ldr	r3, [r7, #24]
}
 8017e70:	4618      	mov	r0, r3
 8017e72:	3728      	adds	r7, #40	; 0x28
 8017e74:	46bd      	mov	sp, r7
 8017e76:	bd80      	pop	{r7, pc}
 8017e78:	08021eac 	.word	0x08021eac
 8017e7c:	08022e18 	.word	0x08022e18
 8017e80:	08021b40 	.word	0x08021b40

08017e84 <lfs_file_rawseek>:
#endif

static lfs_soff_t lfs_file_rawseek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8017e84:	b580      	push	{r7, lr}
 8017e86:	b08c      	sub	sp, #48	; 0x30
 8017e88:	af00      	add	r7, sp, #0
 8017e8a:	60f8      	str	r0, [r7, #12]
 8017e8c:	60b9      	str	r1, [r7, #8]
 8017e8e:	607a      	str	r2, [r7, #4]
 8017e90:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8017e92:	68bb      	ldr	r3, [r7, #8]
 8017e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (whence == LFS_SEEK_SET) {
 8017e98:	683b      	ldr	r3, [r7, #0]
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	d102      	bne.n	8017ea4 <lfs_file_rawseek+0x20>
        npos = off;
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017ea2:	e025      	b.n	8017ef0 <lfs_file_rawseek+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8017ea4:	683b      	ldr	r3, [r7, #0]
 8017ea6:	2b01      	cmp	r3, #1
 8017ea8:	d10f      	bne.n	8017eca <lfs_file_rawseek+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8017eaa:	68bb      	ldr	r3, [r7, #8]
 8017eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017eae:	461a      	mov	r2, r3
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	4413      	add	r3, r2
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	da02      	bge.n	8017ebe <lfs_file_rawseek+0x3a>
            return LFS_ERR_INVAL;
 8017eb8:	f06f 0315 	mvn.w	r3, #21
 8017ebc:	e067      	b.n	8017f8e <lfs_file_rawseek+0x10a>
        } else {
            npos = file->pos + off;
 8017ebe:	68bb      	ldr	r3, [r7, #8]
 8017ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	4413      	add	r3, r2
 8017ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017ec8:	e012      	b.n	8017ef0 <lfs_file_rawseek+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8017eca:	683b      	ldr	r3, [r7, #0]
 8017ecc:	2b02      	cmp	r3, #2
 8017ece:	d10f      	bne.n	8017ef0 <lfs_file_rawseek+0x6c>
        lfs_soff_t res = lfs_file_rawsize(lfs, file) + off;
 8017ed0:	68b9      	ldr	r1, [r7, #8]
 8017ed2:	68f8      	ldr	r0, [r7, #12]
 8017ed4:	f000 f85f 	bl	8017f96 <lfs_file_rawsize>
 8017ed8:	4602      	mov	r2, r0
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	4413      	add	r3, r2
 8017ede:	62bb      	str	r3, [r7, #40]	; 0x28
        if (res < 0) {
 8017ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	da02      	bge.n	8017eec <lfs_file_rawseek+0x68>
            return LFS_ERR_INVAL;
 8017ee6:	f06f 0315 	mvn.w	r3, #21
 8017eea:	e050      	b.n	8017f8e <lfs_file_rawseek+0x10a>
        } else {
            npos = res;
 8017eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    if (npos > lfs->file_max) {
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017ef6:	429a      	cmp	r2, r3
 8017ef8:	d902      	bls.n	8017f00 <lfs_file_rawseek+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 8017efa:	f06f 0315 	mvn.w	r3, #21
 8017efe:	e046      	b.n	8017f8e <lfs_file_rawseek+0x10a>
    }

    if (file->pos == npos) {
 8017f00:	68bb      	ldr	r3, [r7, #8]
 8017f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f06:	429a      	cmp	r2, r3
 8017f08:	d101      	bne.n	8017f0e <lfs_file_rawseek+0x8a>
        // noop - position has not changed
        return npos;
 8017f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f0c:	e03f      	b.n	8017f8e <lfs_file_rawseek+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 8017f0e:	68bb      	ldr	r3, [r7, #8]
 8017f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    if (
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	d12b      	bne.n	8017f72 <lfs_file_rawseek+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 8017f1a:	68bb      	ldr	r3, [r7, #8]
 8017f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f1e:	61bb      	str	r3, [r7, #24]
 8017f20:	f107 0318 	add.w	r3, r7, #24
 8017f24:	4619      	mov	r1, r3
 8017f26:	68f8      	ldr	r0, [r7, #12]
 8017f28:	f7fe fe86 	bl	8016c38 <lfs_ctz_index>
 8017f2c:	6278      	str	r0, [r7, #36]	; 0x24
        lfs_off_t noff = npos;
 8017f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f30:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 8017f32:	f107 0314 	add.w	r3, r7, #20
 8017f36:	4619      	mov	r1, r3
 8017f38:	68f8      	ldr	r0, [r7, #12]
 8017f3a:	f7fe fe7d 	bl	8016c38 <lfs_ctz_index>
 8017f3e:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 8017f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017f42:	6a3b      	ldr	r3, [r7, #32]
 8017f44:	429a      	cmp	r2, r3
 8017f46:	d114      	bne.n	8017f72 <lfs_file_rawseek+0xee>
                && noff >= file->cache.off
 8017f48:	68bb      	ldr	r3, [r7, #8]
 8017f4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017f4c:	697b      	ldr	r3, [r7, #20]
 8017f4e:	429a      	cmp	r2, r3
 8017f50:	d80f      	bhi.n	8017f72 <lfs_file_rawseek+0xee>
                && noff < file->cache.off + file->cache.size) {
 8017f52:	68bb      	ldr	r3, [r7, #8]
 8017f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017f56:	68bb      	ldr	r3, [r7, #8]
 8017f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017f5a:	441a      	add	r2, r3
 8017f5c:	697b      	ldr	r3, [r7, #20]
 8017f5e:	429a      	cmp	r2, r3
 8017f60:	d907      	bls.n	8017f72 <lfs_file_rawseek+0xee>
            file->pos = npos;
 8017f62:	68bb      	ldr	r3, [r7, #8]
 8017f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f66:	635a      	str	r2, [r3, #52]	; 0x34
            file->off = noff;
 8017f68:	697a      	ldr	r2, [r7, #20]
 8017f6a:	68bb      	ldr	r3, [r7, #8]
 8017f6c:	63da      	str	r2, [r3, #60]	; 0x3c
            return npos;
 8017f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f70:	e00d      	b.n	8017f8e <lfs_file_rawseek+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8017f72:	68b9      	ldr	r1, [r7, #8]
 8017f74:	68f8      	ldr	r0, [r7, #12]
 8017f76:	f7ff fb71 	bl	801765c <lfs_file_flush>
 8017f7a:	61f8      	str	r0, [r7, #28]
    if (err) {
 8017f7c:	69fb      	ldr	r3, [r7, #28]
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d001      	beq.n	8017f86 <lfs_file_rawseek+0x102>
        return err;
 8017f82:	69fb      	ldr	r3, [r7, #28]
 8017f84:	e003      	b.n	8017f8e <lfs_file_rawseek+0x10a>
    }

    // update pos
    file->pos = npos;
 8017f86:	68bb      	ldr	r3, [r7, #8]
 8017f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f8a:	635a      	str	r2, [r3, #52]	; 0x34
    return npos;
 8017f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8017f8e:	4618      	mov	r0, r3
 8017f90:	3730      	adds	r7, #48	; 0x30
 8017f92:	46bd      	mov	sp, r7
 8017f94:	bd80      	pop	{r7, pc}

08017f96 <lfs_file_rawsize>:
    }

    return 0;
}

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 8017f96:	b580      	push	{r7, lr}
 8017f98:	b082      	sub	sp, #8
 8017f9a:	af00      	add	r7, sp, #0
 8017f9c:	6078      	str	r0, [r7, #4]
 8017f9e:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8017fa0:	683b      	ldr	r3, [r7, #0]
 8017fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d009      	beq.n	8017fc0 <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8017fac:	683b      	ldr	r3, [r7, #0]
 8017fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017fb0:	683b      	ldr	r3, [r7, #0]
 8017fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fb4:	4619      	mov	r1, r3
 8017fb6:	4610      	mov	r0, r2
 8017fb8:	f7fa fd4c 	bl	8012a54 <lfs_max>
 8017fbc:	4603      	mov	r3, r0
 8017fbe:	e001      	b.n	8017fc4 <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 8017fc0:	683b      	ldr	r3, [r7, #0]
 8017fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8017fc4:	4618      	mov	r0, r3
 8017fc6:	3708      	adds	r7, #8
 8017fc8:	46bd      	mov	sp, r7
 8017fca:	bd80      	pop	{r7, pc}

08017fcc <lfs_rawstat>:


/// General fs operations ///
static int lfs_rawstat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 8017fcc:	b580      	push	{r7, lr}
 8017fce:	b08e      	sub	sp, #56	; 0x38
 8017fd0:	af00      	add	r7, sp, #0
 8017fd2:	60f8      	str	r0, [r7, #12]
 8017fd4:	60b9      	str	r1, [r7, #8]
 8017fd6:	607a      	str	r2, [r7, #4]
    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8017fd8:	f107 0208 	add.w	r2, r7, #8
 8017fdc:	f107 0114 	add.w	r1, r7, #20
 8017fe0:	2300      	movs	r3, #0
 8017fe2:	68f8      	ldr	r0, [r7, #12]
 8017fe4:	f7fc fff8 	bl	8014fd8 <lfs_dir_find>
 8017fe8:	6378      	str	r0, [r7, #52]	; 0x34
    if (tag < 0) {
 8017fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	da01      	bge.n	8017ff4 <lfs_rawstat+0x28>
        return (int)tag;
 8017ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ff2:	e00c      	b.n	801800e <lfs_rawstat+0x42>
    }

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 8017ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	f7fb fa52 	bl	80134a0 <lfs_tag_id>
 8017ffc:	4603      	mov	r3, r0
 8017ffe:	461a      	mov	r2, r3
 8018000:	f107 0114 	add.w	r1, r7, #20
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	68f8      	ldr	r0, [r7, #12]
 8018008:	f7fc ff22 	bl	8014e50 <lfs_dir_getinfo>
 801800c:	4603      	mov	r3, r0
}
 801800e:	4618      	mov	r0, r3
 8018010:	3738      	adds	r7, #56	; 0x38
 8018012:	46bd      	mov	sp, r7
 8018014:	bd80      	pop	{r7, pc}
	...

08018018 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8018018:	b580      	push	{r7, lr}
 801801a:	b08c      	sub	sp, #48	; 0x30
 801801c:	af00      	add	r7, sp, #0
 801801e:	6078      	str	r0, [r7, #4]
 8018020:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	683a      	ldr	r2, [r7, #0]
 8018026:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 8018028:	2300      	movs	r3, #0
 801802a:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018030:	695b      	ldr	r3, [r3, #20]
 8018032:	2b00      	cmp	r3, #0
 8018034:	d106      	bne.n	8018044 <lfs_init+0x2c>
 8018036:	4b92      	ldr	r3, [pc, #584]	; (8018280 <lfs_init+0x268>)
 8018038:	4a92      	ldr	r2, [pc, #584]	; (8018284 <lfs_init+0x26c>)
 801803a:	f640 7146 	movw	r1, #3910	; 0xf46
 801803e:	4892      	ldr	r0, [pc, #584]	; (8018288 <lfs_init+0x270>)
 8018040:	f002 fe96 	bl	801ad70 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018048:	699b      	ldr	r3, [r3, #24]
 801804a:	2b00      	cmp	r3, #0
 801804c:	d106      	bne.n	801805c <lfs_init+0x44>
 801804e:	4b8f      	ldr	r3, [pc, #572]	; (801828c <lfs_init+0x274>)
 8018050:	4a8c      	ldr	r2, [pc, #560]	; (8018284 <lfs_init+0x26c>)
 8018052:	f640 7147 	movw	r1, #3911	; 0xf47
 8018056:	488c      	ldr	r0, [pc, #560]	; (8018288 <lfs_init+0x270>)
 8018058:	f002 fe8a 	bl	801ad70 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018062:	2b00      	cmp	r3, #0
 8018064:	d106      	bne.n	8018074 <lfs_init+0x5c>
 8018066:	4b8a      	ldr	r3, [pc, #552]	; (8018290 <lfs_init+0x278>)
 8018068:	4a86      	ldr	r2, [pc, #536]	; (8018284 <lfs_init+0x26c>)
 801806a:	f640 7148 	movw	r1, #3912	; 0xf48
 801806e:	4886      	ldr	r0, [pc, #536]	; (8018288 <lfs_init+0x270>)
 8018070:	f002 fe7e 	bl	801ad70 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801807a:	687a      	ldr	r2, [r7, #4]
 801807c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801807e:	6952      	ldr	r2, [r2, #20]
 8018080:	fbb3 f1f2 	udiv	r1, r3, r2
 8018084:	fb01 f202 	mul.w	r2, r1, r2
 8018088:	1a9b      	subs	r3, r3, r2
 801808a:	2b00      	cmp	r3, #0
 801808c:	d006      	beq.n	801809c <lfs_init+0x84>
 801808e:	4b81      	ldr	r3, [pc, #516]	; (8018294 <lfs_init+0x27c>)
 8018090:	4a7c      	ldr	r2, [pc, #496]	; (8018284 <lfs_init+0x26c>)
 8018092:	f640 714c 	movw	r1, #3916	; 0xf4c
 8018096:	487c      	ldr	r0, [pc, #496]	; (8018288 <lfs_init+0x270>)
 8018098:	f002 fe6a 	bl	801ad70 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80180a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80180a2:	687a      	ldr	r2, [r7, #4]
 80180a4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80180a6:	6992      	ldr	r2, [r2, #24]
 80180a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80180ac:	fb01 f202 	mul.w	r2, r1, r2
 80180b0:	1a9b      	subs	r3, r3, r2
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d006      	beq.n	80180c4 <lfs_init+0xac>
 80180b6:	4b78      	ldr	r3, [pc, #480]	; (8018298 <lfs_init+0x280>)
 80180b8:	4a72      	ldr	r2, [pc, #456]	; (8018284 <lfs_init+0x26c>)
 80180ba:	f640 714d 	movw	r1, #3917	; 0xf4d
 80180be:	4872      	ldr	r0, [pc, #456]	; (8018288 <lfs_init+0x270>)
 80180c0:	f002 fe56 	bl	801ad70 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80180c8:	69db      	ldr	r3, [r3, #28]
 80180ca:	687a      	ldr	r2, [r7, #4]
 80180cc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80180ce:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80180d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80180d4:	fb01 f202 	mul.w	r2, r1, r2
 80180d8:	1a9b      	subs	r3, r3, r2
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d006      	beq.n	80180ec <lfs_init+0xd4>
 80180de:	4b6f      	ldr	r3, [pc, #444]	; (801829c <lfs_init+0x284>)
 80180e0:	4a68      	ldr	r2, [pc, #416]	; (8018284 <lfs_init+0x26c>)
 80180e2:	f640 714e 	movw	r1, #3918	; 0xf4e
 80180e6:	4868      	ldr	r0, [pc, #416]	; (8018288 <lfs_init+0x270>)
 80180e8:	f002 fe42 	bl	801ad70 <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80180f0:	69db      	ldr	r3, [r3, #28]
 80180f2:	3b08      	subs	r3, #8
 80180f4:	f04f 32ff 	mov.w	r2, #4294967295
 80180f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80180fc:	4618      	mov	r0, r3
 80180fe:	f7fa fcf0 	bl	8012ae2 <lfs_npw2>
 8018102:	4603      	mov	r3, r0
 8018104:	009a      	lsls	r2, r3, #2
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801810a:	69db      	ldr	r3, [r3, #28]
 801810c:	429a      	cmp	r2, r3
 801810e:	d906      	bls.n	801811e <lfs_init+0x106>
 8018110:	4b63      	ldr	r3, [pc, #396]	; (80182a0 <lfs_init+0x288>)
 8018112:	4a5c      	ldr	r2, [pc, #368]	; (8018284 <lfs_init+0x26c>)
 8018114:	f640 7151 	movw	r1, #3921	; 0xf51
 8018118:	485b      	ldr	r0, [pc, #364]	; (8018288 <lfs_init+0x270>)
 801811a:	f002 fe29 	bl	801ad70 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018124:	2b00      	cmp	r3, #0
 8018126:	d106      	bne.n	8018136 <lfs_init+0x11e>
 8018128:	4b5e      	ldr	r3, [pc, #376]	; (80182a4 <lfs_init+0x28c>)
 801812a:	4a56      	ldr	r2, [pc, #344]	; (8018284 <lfs_init+0x26c>)
 801812c:	f640 715a 	movw	r1, #3930	; 0xf5a
 8018130:	4855      	ldr	r0, [pc, #340]	; (8018288 <lfs_init+0x270>)
 8018132:	f002 fe1d 	bl	801ad70 <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801813a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801813c:	2b00      	cmp	r3, #0
 801813e:	d005      	beq.n	801814c <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	60da      	str	r2, [r3, #12]
 801814a:	e010      	b.n	801816e <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018152:	4618      	mov	r0, r3
 8018154:	f7fa fd2d 	bl	8012bb2 <lfs_malloc>
 8018158:	4602      	mov	r2, r0
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	68db      	ldr	r3, [r3, #12]
 8018162:	2b00      	cmp	r3, #0
 8018164:	d103      	bne.n	801816e <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 8018166:	f06f 030b 	mvn.w	r3, #11
 801816a:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 801816c:	e0fd      	b.n	801836a <lfs_init+0x352>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018174:	2b00      	cmp	r3, #0
 8018176:	d005      	beq.n	8018184 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801817c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	61da      	str	r2, [r3, #28]
 8018182:	e010      	b.n	80181a6 <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801818a:	4618      	mov	r0, r3
 801818c:	f7fa fd11 	bl	8012bb2 <lfs_malloc>
 8018190:	4602      	mov	r2, r0
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	69db      	ldr	r3, [r3, #28]
 801819a:	2b00      	cmp	r3, #0
 801819c:	d103      	bne.n	80181a6 <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 801819e:	f06f 030b 	mvn.w	r3, #11
 80181a2:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80181a4:	e0e1      	b.n	801836a <lfs_init+0x352>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	4619      	mov	r1, r3
 80181aa:	6878      	ldr	r0, [r7, #4]
 80181ac:	f7fa fd27 	bl	8012bfe <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	3310      	adds	r3, #16
 80181b4:	4619      	mov	r1, r3
 80181b6:	6878      	ldr	r0, [r7, #4]
 80181b8:	f7fa fd21 	bl	8012bfe <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80181c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d106      	bne.n	80181d4 <lfs_init+0x1bc>
 80181c6:	4b38      	ldr	r3, [pc, #224]	; (80182a8 <lfs_init+0x290>)
 80181c8:	4a2e      	ldr	r2, [pc, #184]	; (8018284 <lfs_init+0x26c>)
 80181ca:	f640 7178 	movw	r1, #3960	; 0xf78
 80181ce:	482e      	ldr	r0, [pc, #184]	; (8018288 <lfs_init+0x270>)
 80181d0:	f002 fdce 	bl	801ad70 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80181d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181da:	f003 0307 	and.w	r3, r3, #7
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d106      	bne.n	80181f0 <lfs_init+0x1d8>
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80181e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80181e8:	f003 0303 	and.w	r3, r3, #3
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d006      	beq.n	80181fe <lfs_init+0x1e6>
 80181f0:	4b2e      	ldr	r3, [pc, #184]	; (80182ac <lfs_init+0x294>)
 80181f2:	4a24      	ldr	r2, [pc, #144]	; (8018284 <lfs_init+0x26c>)
 80181f4:	f640 7179 	movw	r1, #3961	; 0xf79
 80181f8:	4823      	ldr	r0, [pc, #140]	; (8018288 <lfs_init+0x270>)
 80181fa:	f002 fdb9 	bl	801ad70 <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018204:	2b00      	cmp	r3, #0
 8018206:	d005      	beq.n	8018214 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801820c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	665a      	str	r2, [r3, #100]	; 0x64
 8018212:	e010      	b.n	8018236 <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801821a:	4618      	mov	r0, r3
 801821c:	f7fa fcc9 	bl	8012bb2 <lfs_malloc>
 8018220:	4602      	mov	r2, r0
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801822a:	2b00      	cmp	r3, #0
 801822c:	d103      	bne.n	8018236 <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 801822e:	f06f 030b 	mvn.w	r3, #11
 8018232:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8018234:	e099      	b.n	801836a <lfs_init+0x352>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801823a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801823c:	2bff      	cmp	r3, #255	; 0xff
 801823e:	d906      	bls.n	801824e <lfs_init+0x236>
 8018240:	4b1b      	ldr	r3, [pc, #108]	; (80182b0 <lfs_init+0x298>)
 8018242:	4a10      	ldr	r2, [pc, #64]	; (8018284 <lfs_init+0x26c>)
 8018244:	f640 7186 	movw	r1, #3974	; 0xf86
 8018248:	480f      	ldr	r0, [pc, #60]	; (8018288 <lfs_init+0x270>)
 801824a:	f002 fd91 	bl	801ad70 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018252:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801825c:	2b00      	cmp	r3, #0
 801825e:	d102      	bne.n	8018266 <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	22ff      	movs	r2, #255	; 0xff
 8018264:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801826a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801826c:	2b00      	cmp	r3, #0
 801826e:	da23      	bge.n	80182b8 <lfs_init+0x2a0>
 8018270:	4b10      	ldr	r3, [pc, #64]	; (80182b4 <lfs_init+0x29c>)
 8018272:	4a04      	ldr	r2, [pc, #16]	; (8018284 <lfs_init+0x26c>)
 8018274:	f640 718c 	movw	r1, #3980	; 0xf8c
 8018278:	4803      	ldr	r0, [pc, #12]	; (8018288 <lfs_init+0x270>)
 801827a:	f002 fd79 	bl	801ad70 <__assert_func>
 801827e:	bf00      	nop
 8018280:	08021edc 	.word	0x08021edc
 8018284:	08022e2c 	.word	0x08022e2c
 8018288:	08021b40 	.word	0x08021b40
 801828c:	08021ef8 	.word	0x08021ef8
 8018290:	08021f14 	.word	0x08021f14
 8018294:	08021f30 	.word	0x08021f30
 8018298:	08021f60 	.word	0x08021f60
 801829c:	08021f90 	.word	0x08021f90
 80182a0:	08021fc4 	.word	0x08021fc4
 80182a4:	08022010 	.word	0x08022010
 80182a8:	0802202c 	.word	0x0802202c
 80182ac:	0802204c 	.word	0x0802204c
 80182b0:	080220a0 	.word	0x080220a0
 80182b4:	080220bc 	.word	0x080220bc
    lfs->file_max = lfs->cfg->file_max;
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80182bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d103      	bne.n	80182d2 <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80182d0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80182d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80182d8:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80182dc:	4293      	cmp	r3, r2
 80182de:	d906      	bls.n	80182ee <lfs_init+0x2d6>
 80182e0:	4b26      	ldr	r3, [pc, #152]	; (801837c <lfs_init+0x364>)
 80182e2:	4a27      	ldr	r2, [pc, #156]	; (8018380 <lfs_init+0x368>)
 80182e4:	f640 7192 	movw	r1, #3986	; 0xf92
 80182e8:	4826      	ldr	r0, [pc, #152]	; (8018384 <lfs_init+0x36c>)
 80182ea:	f002 fd41 	bl	801ad70 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80182f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d103      	bne.n	8018308 <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8018306:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801830c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018312:	69db      	ldr	r3, [r3, #28]
 8018314:	429a      	cmp	r2, r3
 8018316:	d906      	bls.n	8018326 <lfs_init+0x30e>
 8018318:	4b1b      	ldr	r3, [pc, #108]	; (8018388 <lfs_init+0x370>)
 801831a:	4a19      	ldr	r2, [pc, #100]	; (8018380 <lfs_init+0x368>)
 801831c:	f640 7198 	movw	r1, #3992	; 0xf98
 8018320:	4818      	ldr	r0, [pc, #96]	; (8018384 <lfs_init+0x36c>)
 8018322:	f002 fd25 	bl	801ad70 <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	f04f 32ff 	mov.w	r2, #4294967295
 801832c:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	f04f 32ff 	mov.w	r2, #4294967295
 8018334:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	2200      	movs	r2, #0
 801833a:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	2200      	movs	r2, #0
 8018340:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	333c      	adds	r3, #60	; 0x3c
 8018346:	2200      	movs	r2, #0
 8018348:	601a      	str	r2, [r3, #0]
 801834a:	605a      	str	r2, [r3, #4]
 801834c:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	3330      	adds	r3, #48	; 0x30
 8018352:	2200      	movs	r2, #0
 8018354:	601a      	str	r2, [r3, #0]
 8018356:	605a      	str	r2, [r3, #4]
 8018358:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	3348      	adds	r3, #72	; 0x48
 801835e:	2200      	movs	r2, #0
 8018360:	601a      	str	r2, [r3, #0]
 8018362:	605a      	str	r2, [r3, #4]
 8018364:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8018366:	2300      	movs	r3, #0
 8018368:	e003      	b.n	8018372 <lfs_init+0x35a>

cleanup:
    lfs_deinit(lfs);
 801836a:	6878      	ldr	r0, [r7, #4]
 801836c:	f000 f80e 	bl	801838c <lfs_deinit>
    return err;
 8018370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8018372:	4618      	mov	r0, r3
 8018374:	3730      	adds	r7, #48	; 0x30
 8018376:	46bd      	mov	sp, r7
 8018378:	bd80      	pop	{r7, pc}
 801837a:	bf00      	nop
 801837c:	080220e0 	.word	0x080220e0
 8018380:	08022e2c 	.word	0x08022e2c
 8018384:	08021b40 	.word	0x08021b40
 8018388:	080220fc 	.word	0x080220fc

0801838c <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 801838c:	b580      	push	{r7, lr}
 801838e:	b082      	sub	sp, #8
 8018390:	af00      	add	r7, sp, #0
 8018392:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801839a:	2b00      	cmp	r3, #0
 801839c:	d104      	bne.n	80183a8 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	68db      	ldr	r3, [r3, #12]
 80183a2:	4618      	mov	r0, r3
 80183a4:	f7fa fc11 	bl	8012bca <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80183ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d104      	bne.n	80183bc <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	69db      	ldr	r3, [r3, #28]
 80183b6:	4618      	mov	r0, r3
 80183b8:	f7fa fc07 	bl	8012bca <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80183c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	d104      	bne.n	80183d0 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80183ca:	4618      	mov	r0, r3
 80183cc:	f7fa fbfd 	bl	8012bca <lfs_free>
    }

    return 0;
 80183d0:	2300      	movs	r3, #0
}
 80183d2:	4618      	mov	r0, r3
 80183d4:	3708      	adds	r7, #8
 80183d6:	46bd      	mov	sp, r7
 80183d8:	bd80      	pop	{r7, pc}
	...

080183dc <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 80183dc:	b580      	push	{r7, lr}
 80183de:	b0a0      	sub	sp, #128	; 0x80
 80183e0:	af00      	add	r7, sp, #0
 80183e2:	6078      	str	r0, [r7, #4]
 80183e4:	6039      	str	r1, [r7, #0]
    int err = 0;
 80183e6:	2300      	movs	r3, #0
 80183e8:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 80183ea:	6839      	ldr	r1, [r7, #0]
 80183ec:	6878      	ldr	r0, [r7, #4]
 80183ee:	f7ff fe13 	bl	8018018 <lfs_init>
 80183f2:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80183f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d001      	beq.n	80183fe <lfs_rawformat+0x22>
            return err;
 80183fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80183fc:	e082      	b.n	8018504 <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018408:	461a      	mov	r2, r3
 801840a:	2100      	movs	r1, #0
 801840c:	f003 fe4c 	bl	801c0a8 <memset>
        lfs->free.off = 0;
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	2200      	movs	r2, #0
 8018414:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801841a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801841c:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018422:	6a1b      	ldr	r3, [r3, #32]
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8018424:	4619      	mov	r1, r3
 8018426:	4610      	mov	r0, r2
 8018428:	f7fa fb24 	bl	8012a74 <lfs_min>
 801842c:	4602      	mov	r2, r0
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	2200      	movs	r2, #0
 8018436:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 8018438:	6878      	ldr	r0, [r7, #4]
 801843a:	f7fb fa61 	bl	8013900 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 801843e:	f107 030c 	add.w	r3, r7, #12
 8018442:	4619      	mov	r1, r3
 8018444:	6878      	ldr	r0, [r7, #4]
 8018446:	f7fd f8b3 	bl	80155b0 <lfs_dir_alloc>
 801844a:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 801844c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801844e:	2b00      	cmp	r3, #0
 8018450:	d14f      	bne.n	80184f2 <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 8018452:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8018456:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801845c:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 801845e:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018464:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 8018466:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 801846c:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 8018472:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 8018478:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 801847a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801847e:	4618      	mov	r0, r3
 8018480:	f7fb f97e 	bl	8013780 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8018484:	4b21      	ldr	r3, [pc, #132]	; (801850c <lfs_rawformat+0x130>)
 8018486:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018488:	2300      	movs	r3, #0
 801848a:	653b      	str	r3, [r7, #80]	; 0x50
 801848c:	4b20      	ldr	r3, [pc, #128]	; (8018510 <lfs_rawformat+0x134>)
 801848e:	657b      	str	r3, [r7, #84]	; 0x54
 8018490:	4b20      	ldr	r3, [pc, #128]	; (8018514 <lfs_rawformat+0x138>)
 8018492:	65bb      	str	r3, [r7, #88]	; 0x58
 8018494:	4b20      	ldr	r3, [pc, #128]	; (8018518 <lfs_rawformat+0x13c>)
 8018496:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018498:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801849c:	663b      	str	r3, [r7, #96]	; 0x60
 801849e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80184a2:	f107 010c 	add.w	r1, r7, #12
 80184a6:	2303      	movs	r3, #3
 80184a8:	6878      	ldr	r0, [r7, #4]
 80184aa:	f7fe fa5f 	bl	801696c <lfs_dir_commit>
 80184ae:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 80184b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d11f      	bne.n	80184f6 <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 80184b6:	2300      	movs	r3, #0
 80184b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 80184bc:	f107 010c 	add.w	r1, r7, #12
 80184c0:	2300      	movs	r3, #0
 80184c2:	2200      	movs	r2, #0
 80184c4:	6878      	ldr	r0, [r7, #4]
 80184c6:	f7fe fa51 	bl	801696c <lfs_dir_commit>
 80184ca:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80184cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d113      	bne.n	80184fa <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 80184d2:	2300      	movs	r3, #0
 80184d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80184d6:	2301      	movs	r3, #1
 80184d8:	633b      	str	r3, [r7, #48]	; 0x30
 80184da:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80184de:	f107 030c 	add.w	r3, r7, #12
 80184e2:	4619      	mov	r1, r3
 80184e4:	6878      	ldr	r0, [r7, #4]
 80184e6:	f7fc fc65 	bl	8014db4 <lfs_dir_fetch>
 80184ea:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80184ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	e004      	b.n	80184fc <lfs_rawformat+0x120>
            goto cleanup;
 80184f2:	bf00      	nop
 80184f4:	e002      	b.n	80184fc <lfs_rawformat+0x120>
            goto cleanup;
 80184f6:	bf00      	nop
 80184f8:	e000      	b.n	80184fc <lfs_rawformat+0x120>
            goto cleanup;
 80184fa:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 80184fc:	6878      	ldr	r0, [r7, #4]
 80184fe:	f7ff ff45 	bl	801838c <lfs_deinit>
    return err;
 8018502:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 8018504:	4618      	mov	r0, r3
 8018506:	3780      	adds	r7, #128	; 0x80
 8018508:	46bd      	mov	sp, r7
 801850a:	bd80      	pop	{r7, pc}
 801850c:	40100000 	.word	0x40100000
 8018510:	0ff00008 	.word	0x0ff00008
 8018514:	0802212c 	.word	0x0802212c
 8018518:	20100018 	.word	0x20100018

0801851c <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 801851c:	b580      	push	{r7, lr}
 801851e:	b09c      	sub	sp, #112	; 0x70
 8018520:	af04      	add	r7, sp, #16
 8018522:	6078      	str	r0, [r7, #4]
 8018524:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8018526:	6839      	ldr	r1, [r7, #0]
 8018528:	6878      	ldr	r0, [r7, #4]
 801852a:	f7ff fd75 	bl	8018018 <lfs_init>
 801852e:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 8018530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018532:	2b00      	cmp	r3, #0
 8018534:	d001      	beq.n	801853a <lfs_rawmount+0x1e>
        return err;
 8018536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018538:	e192      	b.n	8018860 <lfs_rawmount+0x344>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 801853a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801853e:	2220      	movs	r2, #32
 8018540:	2100      	movs	r1, #0
 8018542:	4618      	mov	r0, r3
 8018544:	f003 fdb0 	bl	801c0a8 <memset>
 8018548:	2301      	movs	r3, #1
 801854a:	64fb      	str	r3, [r7, #76]	; 0x4c
    lfs_block_t cycle = 0;
 801854c:	2300      	movs	r3, #0
 801854e:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 8018550:	e10b      	b.n	801876a <lfs_rawmount+0x24e>
        if (cycle >= lfs->cfg->block_count/2) {
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018556:	6a1b      	ldr	r3, [r3, #32]
 8018558:	085b      	lsrs	r3, r3, #1
 801855a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801855c:	429a      	cmp	r2, r3
 801855e:	d303      	bcc.n	8018568 <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 8018560:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8018564:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8018566:	e177      	b.n	8018858 <lfs_rawmount+0x33c>
        }
        cycle += 1;
 8018568:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801856a:	3301      	adds	r3, #1
 801856c:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	627b      	str	r3, [r7, #36]	; 0x24
 8018572:	4b8a      	ldr	r3, [pc, #552]	; (801879c <lfs_rawmount+0x280>)
 8018574:	62bb      	str	r3, [r7, #40]	; 0x28
 8018576:	2308      	movs	r3, #8
 8018578:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 801857a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801857e:	f103 0218 	add.w	r2, r3, #24
 8018582:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8018586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801858a:	9303      	str	r3, [sp, #12]
 801858c:	4b84      	ldr	r3, [pc, #528]	; (80187a0 <lfs_rawmount+0x284>)
 801858e:	9302      	str	r3, [sp, #8]
 8018590:	2300      	movs	r3, #0
 8018592:	9301      	str	r3, [sp, #4]
 8018594:	4b83      	ldr	r3, [pc, #524]	; (80187a4 <lfs_rawmount+0x288>)
 8018596:	9300      	str	r3, [sp, #0]
 8018598:	4b83      	ldr	r3, [pc, #524]	; (80187a8 <lfs_rawmount+0x28c>)
 801859a:	6878      	ldr	r0, [r7, #4]
 801859c:	f7fc f89c 	bl	80146d8 <lfs_dir_fetchmatch>
 80185a0:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 80185a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	da02      	bge.n	80185ae <lfs_rawmount+0x92>
            err = tag;
 80185a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80185aa:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80185ac:	e154      	b.n	8018858 <lfs_rawmount+0x33c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 80185ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	f000 80cd 	beq.w	8018750 <lfs_rawmount+0x234>
 80185b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80185b8:	4618      	mov	r0, r3
 80185ba:	f7fa ff24 	bl	8013406 <lfs_tag_isdelete>
 80185be:	4603      	mov	r3, r0
 80185c0:	f083 0301 	eor.w	r3, r3, #1
 80185c4:	b2db      	uxtb	r3, r3
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	f000 80c2 	beq.w	8018750 <lfs_rawmount+0x234>
            // update root
            lfs->root[0] = dir.pair[0];
 80185cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 80185d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 80185d8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80185dc:	f107 030c 	add.w	r3, r7, #12
 80185e0:	9300      	str	r3, [sp, #0]
 80185e2:	4b72      	ldr	r3, [pc, #456]	; (80187ac <lfs_rawmount+0x290>)
 80185e4:	4a70      	ldr	r2, [pc, #448]	; (80187a8 <lfs_rawmount+0x28c>)
 80185e6:	6878      	ldr	r0, [r7, #4]
 80185e8:	f7fb fb44 	bl	8013c74 <lfs_dir_get>
 80185ec:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 80185ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	da02      	bge.n	80185fa <lfs_rawmount+0xde>
                err = tag;
 80185f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80185f6:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80185f8:	e12e      	b.n	8018858 <lfs_rawmount+0x33c>
            }
            lfs_superblock_fromle32(&superblock);
 80185fa:	f107 030c 	add.w	r3, r7, #12
 80185fe:	4618      	mov	r0, r3
 8018600:	f7fb f886 	bl	8013710 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	0c1b      	lsrs	r3, r3, #16
 8018608:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 801860c:	68fb      	ldr	r3, [r7, #12]
 801860e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 8018612:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8018616:	2b02      	cmp	r3, #2
 8018618:	d103      	bne.n	8018622 <lfs_rawmount+0x106>
 801861a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801861e:	2b00      	cmp	r3, #0
 8018620:	d011      	beq.n	8018646 <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 8018622:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8018626:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801862a:	4961      	ldr	r1, [pc, #388]	; (80187b0 <lfs_rawmount+0x294>)
 801862c:	9101      	str	r1, [sp, #4]
 801862e:	9300      	str	r3, [sp, #0]
 8018630:	4613      	mov	r3, r2
 8018632:	f241 0233 	movw	r2, #4147	; 0x1033
 8018636:	495f      	ldr	r1, [pc, #380]	; (80187b4 <lfs_rawmount+0x298>)
 8018638:	485f      	ldr	r0, [pc, #380]	; (80187b8 <lfs_rawmount+0x29c>)
 801863a:	f003 fbd3 	bl	801bde4 <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 801863e:	f06f 0315 	mvn.w	r3, #21
 8018642:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8018644:	e083      	b.n	801874e <lfs_rawmount+0x232>
            }

            // check superblock configuration
            if (superblock.name_max) {
 8018646:	69bb      	ldr	r3, [r7, #24]
 8018648:	2b00      	cmp	r3, #0
 801864a:	d018      	beq.n	801867e <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 801864c:	69ba      	ldr	r2, [r7, #24]
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018652:	429a      	cmp	r2, r3
 8018654:	d910      	bls.n	8018678 <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8018656:	69ba      	ldr	r2, [r7, #24]
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801865c:	4954      	ldr	r1, [pc, #336]	; (80187b0 <lfs_rawmount+0x294>)
 801865e:	9101      	str	r1, [sp, #4]
 8018660:	9300      	str	r3, [sp, #0]
 8018662:	4613      	mov	r3, r2
 8018664:	f241 023c 	movw	r2, #4156	; 0x103c
 8018668:	4952      	ldr	r1, [pc, #328]	; (80187b4 <lfs_rawmount+0x298>)
 801866a:	4854      	ldr	r0, [pc, #336]	; (80187bc <lfs_rawmount+0x2a0>)
 801866c:	f003 fbba 	bl	801bde4 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8018670:	f06f 0315 	mvn.w	r3, #21
 8018674:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8018676:	e06a      	b.n	801874e <lfs_rawmount+0x232>
                }

                lfs->name_max = superblock.name_max;
 8018678:	69ba      	ldr	r2, [r7, #24]
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 801867e:	69fb      	ldr	r3, [r7, #28]
 8018680:	2b00      	cmp	r3, #0
 8018682:	d018      	beq.n	80186b6 <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 8018684:	69fa      	ldr	r2, [r7, #28]
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801868a:	429a      	cmp	r2, r3
 801868c:	d910      	bls.n	80186b0 <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 801868e:	69fa      	ldr	r2, [r7, #28]
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018694:	4946      	ldr	r1, [pc, #280]	; (80187b0 <lfs_rawmount+0x294>)
 8018696:	9101      	str	r1, [sp, #4]
 8018698:	9300      	str	r3, [sp, #0]
 801869a:	4613      	mov	r3, r2
 801869c:	f241 0247 	movw	r2, #4167	; 0x1047
 80186a0:	4944      	ldr	r1, [pc, #272]	; (80187b4 <lfs_rawmount+0x298>)
 80186a2:	4847      	ldr	r0, [pc, #284]	; (80187c0 <lfs_rawmount+0x2a4>)
 80186a4:	f003 fb9e 	bl	801bde4 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 80186a8:	f06f 0315 	mvn.w	r3, #21
 80186ac:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 80186ae:	e04e      	b.n	801874e <lfs_rawmount+0x232>
                }

                lfs->file_max = superblock.file_max;
 80186b0:	69fa      	ldr	r2, [r7, #28]
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 80186b6:	6a3b      	ldr	r3, [r7, #32]
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	d018      	beq.n	80186ee <lfs_rawmount+0x1d2>
                if (superblock.attr_max > lfs->attr_max) {
 80186bc:	6a3a      	ldr	r2, [r7, #32]
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80186c2:	429a      	cmp	r2, r3
 80186c4:	d910      	bls.n	80186e8 <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 80186c6:	6a3a      	ldr	r2, [r7, #32]
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80186cc:	4938      	ldr	r1, [pc, #224]	; (80187b0 <lfs_rawmount+0x294>)
 80186ce:	9101      	str	r1, [sp, #4]
 80186d0:	9300      	str	r3, [sp, #0]
 80186d2:	4613      	mov	r3, r2
 80186d4:	f241 0252 	movw	r2, #4178	; 0x1052
 80186d8:	4936      	ldr	r1, [pc, #216]	; (80187b4 <lfs_rawmount+0x298>)
 80186da:	483a      	ldr	r0, [pc, #232]	; (80187c4 <lfs_rawmount+0x2a8>)
 80186dc:	f003 fb82 	bl	801bde4 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 80186e0:	f06f 0315 	mvn.w	r3, #21
 80186e4:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 80186e6:	e032      	b.n	801874e <lfs_rawmount+0x232>
                }

                lfs->attr_max = superblock.attr_max;
 80186e8:	6a3a      	ldr	r2, [r7, #32]
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 80186ee:	697a      	ldr	r2, [r7, #20]
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80186f4:	6a1b      	ldr	r3, [r3, #32]
 80186f6:	429a      	cmp	r2, r3
 80186f8:	d011      	beq.n	801871e <lfs_rawmount+0x202>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 80186fa:	697a      	ldr	r2, [r7, #20]
 80186fc:	687b      	ldr	r3, [r7, #4]
 80186fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018700:	6a1b      	ldr	r3, [r3, #32]
 8018702:	492b      	ldr	r1, [pc, #172]	; (80187b0 <lfs_rawmount+0x294>)
 8018704:	9101      	str	r1, [sp, #4]
 8018706:	9300      	str	r3, [sp, #0]
 8018708:	4613      	mov	r3, r2
 801870a:	f241 025c 	movw	r2, #4188	; 0x105c
 801870e:	4929      	ldr	r1, [pc, #164]	; (80187b4 <lfs_rawmount+0x298>)
 8018710:	482d      	ldr	r0, [pc, #180]	; (80187c8 <lfs_rawmount+0x2ac>)
 8018712:	f003 fb67 	bl	801bde4 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8018716:	f06f 0315 	mvn.w	r3, #21
 801871a:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 801871c:	e017      	b.n	801874e <lfs_rawmount+0x232>
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 801871e:	693a      	ldr	r2, [r7, #16]
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018724:	69db      	ldr	r3, [r3, #28]
 8018726:	429a      	cmp	r2, r3
 8018728:	d012      	beq.n	8018750 <lfs_rawmount+0x234>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 801872a:	693a      	ldr	r2, [r7, #16]
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018730:	69db      	ldr	r3, [r3, #28]
 8018732:	491f      	ldr	r1, [pc, #124]	; (80187b0 <lfs_rawmount+0x294>)
 8018734:	9101      	str	r1, [sp, #4]
 8018736:	9300      	str	r3, [sp, #0]
 8018738:	4613      	mov	r3, r2
 801873a:	f241 0263 	movw	r2, #4195	; 0x1063
 801873e:	491d      	ldr	r1, [pc, #116]	; (80187b4 <lfs_rawmount+0x298>)
 8018740:	4822      	ldr	r0, [pc, #136]	; (80187cc <lfs_rawmount+0x2b0>)
 8018742:	f003 fb4f 	bl	801bde4 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8018746:	f06f 0315 	mvn.w	r3, #21
 801874a:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 801874c:	bf00      	nop
            goto cleanup;
 801874e:	e083      	b.n	8018858 <lfs_rawmount+0x33c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018756:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801875a:	4619      	mov	r1, r3
 801875c:	6878      	ldr	r0, [r7, #4]
 801875e:	f7fc fb45 	bl	8014dec <lfs_dir_getgstate>
 8018762:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 8018764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018766:	2b00      	cmp	r3, #0
 8018768:	d175      	bne.n	8018856 <lfs_rawmount+0x33a>
    while (!lfs_pair_isnull(dir.tail)) {
 801876a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801876e:	3318      	adds	r3, #24
 8018770:	4618      	mov	r0, r3
 8018772:	f7fa fd94 	bl	801329e <lfs_pair_isnull>
 8018776:	4603      	mov	r3, r0
 8018778:	f083 0301 	eor.w	r3, r3, #1
 801877c:	b2db      	uxtb	r3, r3
 801877e:	2b00      	cmp	r3, #0
 8018780:	f47f aee7 	bne.w	8018552 <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	3320      	adds	r3, #32
 8018788:	4618      	mov	r0, r3
 801878a:	f7fa fd88 	bl	801329e <lfs_pair_isnull>
 801878e:	4603      	mov	r3, r0
 8018790:	2b00      	cmp	r3, #0
 8018792:	d01d      	beq.n	80187d0 <lfs_rawmount+0x2b4>
        err = LFS_ERR_INVAL;
 8018794:	f06f 0315 	mvn.w	r3, #21
 8018798:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 801879a:	e05d      	b.n	8018858 <lfs_rawmount+0x33c>
 801879c:	0802212c 	.word	0x0802212c
 80187a0:	08014f45 	.word	0x08014f45
 80187a4:	0ff00008 	.word	0x0ff00008
 80187a8:	7ffffc00 	.word	0x7ffffc00
 80187ac:	20100018 	.word	0x20100018
 80187b0:	08021c54 	.word	0x08021c54
 80187b4:	08021b40 	.word	0x08021b40
 80187b8:	08022138 	.word	0x08022138
 80187bc:	08022164 	.word	0x08022164
 80187c0:	08022198 	.word	0x08022198
 80187c4:	080221cc 	.word	0x080221cc
 80187c8:	08022200 	.word	0x08022200
 80187cc:	08022234 	.word	0x08022234
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	3330      	adds	r3, #48	; 0x30
 80187d4:	4618      	mov	r0, r3
 80187d6:	f7fa feb9 	bl	801354c <lfs_gstate_iszero>
 80187da:	4603      	mov	r3, r0
 80187dc:	f083 0301 	eor.w	r3, r3, #1
 80187e0:	b2db      	uxtb	r3, r3
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d010      	beq.n	8018808 <lfs_rawmount+0x2ec>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80187ee:	687a      	ldr	r2, [r7, #4]
 80187f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80187f2:	481d      	ldr	r0, [pc, #116]	; (8018868 <lfs_rawmount+0x34c>)
 80187f4:	9002      	str	r0, [sp, #8]
 80187f6:	9201      	str	r2, [sp, #4]
 80187f8:	9300      	str	r3, [sp, #0]
 80187fa:	460b      	mov	r3, r1
 80187fc:	f241 0279 	movw	r2, #4217	; 0x1079
 8018800:	491a      	ldr	r1, [pc, #104]	; (801886c <lfs_rawmount+0x350>)
 8018802:	481b      	ldr	r0, [pc, #108]	; (8018870 <lfs_rawmount+0x354>)
 8018804:	f003 faee 	bl	801bde4 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801880c:	4618      	mov	r0, r3
 801880e:	f7fa fdec 	bl	80133ea <lfs_tag_isvalid>
 8018812:	4603      	mov	r3, r0
 8018814:	f083 0301 	eor.w	r3, r3, #1
 8018818:	b2db      	uxtb	r3, r3
 801881a:	461a      	mov	r2, r3
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018820:	441a      	add	r2, r3
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	687a      	ldr	r2, [r7, #4]
 801882a:	333c      	adds	r3, #60	; 0x3c
 801882c:	3230      	adds	r2, #48	; 0x30
 801882e:	ca07      	ldmia	r2, {r0, r1, r2}
 8018830:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018838:	687a      	ldr	r2, [r7, #4]
 801883a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801883c:	6a12      	ldr	r2, [r2, #32]
 801883e:	fbb3 f1f2 	udiv	r1, r3, r2
 8018842:	fb01 f202 	mul.w	r2, r1, r2
 8018846:	1a9a      	subs	r2, r3, r2
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 801884c:	6878      	ldr	r0, [r7, #4]
 801884e:	f7fb f866 	bl	801391e <lfs_alloc_drop>

    return 0;
 8018852:	2300      	movs	r3, #0
 8018854:	e004      	b.n	8018860 <lfs_rawmount+0x344>
            goto cleanup;
 8018856:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 8018858:	6878      	ldr	r0, [r7, #4]
 801885a:	f000 f80b 	bl	8018874 <lfs_rawunmount>
    return err;
 801885e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8018860:	4618      	mov	r0, r3
 8018862:	3760      	adds	r7, #96	; 0x60
 8018864:	46bd      	mov	sp, r7
 8018866:	bd80      	pop	{r7, pc}
 8018868:	08021c54 	.word	0x08021c54
 801886c:	08021b40 	.word	0x08021b40
 8018870:	08022264 	.word	0x08022264

08018874 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 8018874:	b580      	push	{r7, lr}
 8018876:	b082      	sub	sp, #8
 8018878:	af00      	add	r7, sp, #0
 801887a:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 801887c:	6878      	ldr	r0, [r7, #4]
 801887e:	f7ff fd85 	bl	801838c <lfs_deinit>
 8018882:	4603      	mov	r3, r0
}
 8018884:	4618      	mov	r0, r3
 8018886:	3708      	adds	r7, #8
 8018888:	46bd      	mov	sp, r7
 801888a:	bd80      	pop	{r7, pc}

0801888c <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 801888c:	b590      	push	{r4, r7, lr}
 801888e:	b09d      	sub	sp, #116	; 0x74
 8018890:	af04      	add	r7, sp, #16
 8018892:	60f8      	str	r0, [r7, #12]
 8018894:	60b9      	str	r1, [r7, #8]
 8018896:	607a      	str	r2, [r7, #4]
 8018898:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 801889a:	f107 0318 	add.w	r3, r7, #24
 801889e:	2220      	movs	r2, #32
 80188a0:	2100      	movs	r1, #0
 80188a2:	4618      	mov	r0, r3
 80188a4:	f003 fc00 	bl	801c0a8 <memset>
 80188a8:	2301      	movs	r3, #1
 80188aa:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 80188ac:	2300      	movs	r3, #0
 80188ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 80188b0:	e0a7      	b.n	8018a02 <lfs_fs_rawtraverse+0x176>
        if (cycle >= lfs->cfg->block_count/2) {
 80188b2:	68fb      	ldr	r3, [r7, #12]
 80188b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80188b6:	6a1b      	ldr	r3, [r3, #32]
 80188b8:	085b      	lsrs	r3, r3, #1
 80188ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80188bc:	429a      	cmp	r2, r3
 80188be:	d302      	bcc.n	80188c6 <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 80188c0:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80188c4:	e102      	b.n	8018acc <lfs_fs_rawtraverse+0x240>
        }
        cycle += 1;
 80188c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80188c8:	3301      	adds	r3, #1
 80188ca:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 80188cc:	2300      	movs	r3, #0
 80188ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80188d0:	e013      	b.n	80188fa <lfs_fs_rawtraverse+0x6e>
            int err = cb(data, dir.tail[i]);
 80188d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80188d4:	3306      	adds	r3, #6
 80188d6:	009b      	lsls	r3, r3, #2
 80188d8:	3360      	adds	r3, #96	; 0x60
 80188da:	443b      	add	r3, r7
 80188dc:	f853 2c48 	ldr.w	r2, [r3, #-72]
 80188e0:	68bb      	ldr	r3, [r7, #8]
 80188e2:	4611      	mov	r1, r2
 80188e4:	6878      	ldr	r0, [r7, #4]
 80188e6:	4798      	blx	r3
 80188e8:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 80188ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d001      	beq.n	80188f4 <lfs_fs_rawtraverse+0x68>
                return err;
 80188f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188f2:	e0eb      	b.n	8018acc <lfs_fs_rawtraverse+0x240>
        for (int i = 0; i < 2; i++) {
 80188f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80188f6:	3301      	adds	r3, #1
 80188f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80188fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80188fc:	2b01      	cmp	r3, #1
 80188fe:	dde8      	ble.n	80188d2 <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8018900:	f107 0318 	add.w	r3, r7, #24
 8018904:	f103 0218 	add.w	r2, r3, #24
 8018908:	f107 0318 	add.w	r3, r7, #24
 801890c:	4619      	mov	r1, r3
 801890e:	68f8      	ldr	r0, [r7, #12]
 8018910:	f7fc fa50 	bl	8014db4 <lfs_dir_fetch>
 8018914:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 8018916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018918:	2b00      	cmp	r3, #0
 801891a:	d001      	beq.n	8018920 <lfs_fs_rawtraverse+0x94>
            return err;
 801891c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801891e:	e0d5      	b.n	8018acc <lfs_fs_rawtraverse+0x240>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8018920:	2300      	movs	r3, #0
 8018922:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8018926:	e067      	b.n	80189f8 <lfs_fs_rawtraverse+0x16c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8018928:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801892c:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801892e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8018932:	f043 0308 	orr.w	r3, r3, #8
 8018936:	f107 0118 	add.w	r1, r7, #24
 801893a:	f107 0210 	add.w	r2, r7, #16
 801893e:	9200      	str	r2, [sp, #0]
 8018940:	4a64      	ldr	r2, [pc, #400]	; (8018ad4 <lfs_fs_rawtraverse+0x248>)
 8018942:	68f8      	ldr	r0, [r7, #12]
 8018944:	f7fb f996 	bl	8013c74 <lfs_dir_get>
 8018948:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 801894a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801894c:	2b00      	cmp	r3, #0
 801894e:	da05      	bge.n	801895c <lfs_fs_rawtraverse+0xd0>
                if (tag == LFS_ERR_NOENT) {
 8018950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018952:	f113 0f02 	cmn.w	r3, #2
 8018956:	d049      	beq.n	80189ec <lfs_fs_rawtraverse+0x160>
                    continue;
                }
                return tag;
 8018958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801895a:	e0b7      	b.n	8018acc <lfs_fs_rawtraverse+0x240>
            }
            lfs_ctz_fromle32(&ctz);
 801895c:	f107 0310 	add.w	r3, r7, #16
 8018960:	4618      	mov	r0, r3
 8018962:	f7fa fea5 	bl	80136b0 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8018966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018968:	4618      	mov	r0, r3
 801896a:	f7fa fd6f 	bl	801344c <lfs_tag_type3>
 801896e:	4603      	mov	r3, r0
 8018970:	461a      	mov	r2, r3
 8018972:	f240 2302 	movw	r3, #514	; 0x202
 8018976:	429a      	cmp	r2, r3
 8018978:	d113      	bne.n	80189a2 <lfs_fs_rawtraverse+0x116>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 801897a:	68f9      	ldr	r1, [r7, #12]
 801897c:	6938      	ldr	r0, [r7, #16]
 801897e:	697b      	ldr	r3, [r7, #20]
 8018980:	687a      	ldr	r2, [r7, #4]
 8018982:	9202      	str	r2, [sp, #8]
 8018984:	68ba      	ldr	r2, [r7, #8]
 8018986:	9201      	str	r2, [sp, #4]
 8018988:	9300      	str	r3, [sp, #0]
 801898a:	4603      	mov	r3, r0
 801898c:	460a      	mov	r2, r1
 801898e:	2100      	movs	r1, #0
 8018990:	68f8      	ldr	r0, [r7, #12]
 8018992:	f7fe fafd 	bl	8016f90 <lfs_ctz_traverse>
 8018996:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8018998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801899a:	2b00      	cmp	r3, #0
 801899c:	d027      	beq.n	80189ee <lfs_fs_rawtraverse+0x162>
                    return err;
 801899e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80189a0:	e094      	b.n	8018acc <lfs_fs_rawtraverse+0x240>
                }
            } else if (includeorphans &&
 80189a2:	78fb      	ldrb	r3, [r7, #3]
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d022      	beq.n	80189ee <lfs_fs_rawtraverse+0x162>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 80189a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80189aa:	4618      	mov	r0, r3
 80189ac:	f7fa fd4e 	bl	801344c <lfs_tag_type3>
 80189b0:	4603      	mov	r3, r0
            } else if (includeorphans &&
 80189b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80189b6:	d11a      	bne.n	80189ee <lfs_fs_rawtraverse+0x162>
                for (int i = 0; i < 2; i++) {
 80189b8:	2300      	movs	r3, #0
 80189ba:	653b      	str	r3, [r7, #80]	; 0x50
 80189bc:	e012      	b.n	80189e4 <lfs_fs_rawtraverse+0x158>
                    err = cb(data, (&ctz.head)[i]);
 80189be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80189c0:	009b      	lsls	r3, r3, #2
 80189c2:	f107 0210 	add.w	r2, r7, #16
 80189c6:	4413      	add	r3, r2
 80189c8:	681a      	ldr	r2, [r3, #0]
 80189ca:	68bb      	ldr	r3, [r7, #8]
 80189cc:	4611      	mov	r1, r2
 80189ce:	6878      	ldr	r0, [r7, #4]
 80189d0:	4798      	blx	r3
 80189d2:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 80189d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d001      	beq.n	80189de <lfs_fs_rawtraverse+0x152>
                        return err;
 80189da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80189dc:	e076      	b.n	8018acc <lfs_fs_rawtraverse+0x240>
                for (int i = 0; i < 2; i++) {
 80189de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80189e0:	3301      	adds	r3, #1
 80189e2:	653b      	str	r3, [r7, #80]	; 0x50
 80189e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80189e6:	2b01      	cmp	r3, #1
 80189e8:	dde9      	ble.n	80189be <lfs_fs_rawtraverse+0x132>
 80189ea:	e000      	b.n	80189ee <lfs_fs_rawtraverse+0x162>
                    continue;
 80189ec:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 80189ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80189f2:	3301      	adds	r3, #1
 80189f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80189f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80189fa:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80189fe:	429a      	cmp	r2, r3
 8018a00:	d392      	bcc.n	8018928 <lfs_fs_rawtraverse+0x9c>
    while (!lfs_pair_isnull(dir.tail)) {
 8018a02:	f107 0318 	add.w	r3, r7, #24
 8018a06:	3318      	adds	r3, #24
 8018a08:	4618      	mov	r0, r3
 8018a0a:	f7fa fc48 	bl	801329e <lfs_pair_isnull>
 8018a0e:	4603      	mov	r3, r0
 8018a10:	f083 0301 	eor.w	r3, r3, #1
 8018a14:	b2db      	uxtb	r3, r3
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	f47f af4b 	bne.w	80188b2 <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8018a1c:	68fb      	ldr	r3, [r7, #12]
 8018a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018a22:	e04f      	b.n	8018ac4 <lfs_fs_rawtraverse+0x238>
        if (f->type != LFS_TYPE_REG) {
 8018a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a26:	799b      	ldrb	r3, [r3, #6]
 8018a28:	2b01      	cmp	r3, #1
 8018a2a:	d147      	bne.n	8018abc <lfs_fs_rawtraverse+0x230>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8018a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d01d      	beq.n	8018a74 <lfs_fs_rawtraverse+0x1e8>
 8018a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d117      	bne.n	8018a74 <lfs_fs_rawtraverse+0x1e8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8018a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a46:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8018a4a:	68f8      	ldr	r0, [r7, #12]
 8018a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a4e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8018a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a54:	687a      	ldr	r2, [r7, #4]
 8018a56:	9202      	str	r2, [sp, #8]
 8018a58:	68ba      	ldr	r2, [r7, #8]
 8018a5a:	9201      	str	r2, [sp, #4]
 8018a5c:	9300      	str	r3, [sp, #0]
 8018a5e:	4623      	mov	r3, r4
 8018a60:	4602      	mov	r2, r0
 8018a62:	68f8      	ldr	r0, [r7, #12]
 8018a64:	f7fe fa94 	bl	8016f90 <lfs_ctz_traverse>
 8018a68:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8018a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	d001      	beq.n	8018a74 <lfs_fs_rawtraverse+0x1e8>
                return err;
 8018a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018a72:	e02b      	b.n	8018acc <lfs_fs_rawtraverse+0x240>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8018a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d01e      	beq.n	8018abe <lfs_fs_rawtraverse+0x232>
 8018a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	d118      	bne.n	8018abe <lfs_fs_rawtraverse+0x232>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8018a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a8e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8018a92:	68f8      	ldr	r0, [r7, #12]
 8018a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a96:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8018a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018a9c:	687a      	ldr	r2, [r7, #4]
 8018a9e:	9202      	str	r2, [sp, #8]
 8018aa0:	68ba      	ldr	r2, [r7, #8]
 8018aa2:	9201      	str	r2, [sp, #4]
 8018aa4:	9300      	str	r3, [sp, #0]
 8018aa6:	4623      	mov	r3, r4
 8018aa8:	4602      	mov	r2, r0
 8018aaa:	68f8      	ldr	r0, [r7, #12]
 8018aac:	f7fe fa70 	bl	8016f90 <lfs_ctz_traverse>
 8018ab0:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 8018ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	d002      	beq.n	8018abe <lfs_fs_rawtraverse+0x232>
                return err;
 8018ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018aba:	e007      	b.n	8018acc <lfs_fs_rawtraverse+0x240>
            continue;
 8018abc:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8018abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d1ac      	bne.n	8018a24 <lfs_fs_rawtraverse+0x198>
            }
        }
    }
#endif

    return 0;
 8018aca:	2300      	movs	r3, #0
}
 8018acc:	4618      	mov	r0, r3
 8018ace:	3764      	adds	r7, #100	; 0x64
 8018ad0:	46bd      	mov	sp, r7
 8018ad2:	bd90      	pop	{r4, r7, pc}
 8018ad4:	700ffc00 	.word	0x700ffc00

08018ad8 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8018ad8:	b580      	push	{r7, lr}
 8018ada:	b086      	sub	sp, #24
 8018adc:	af00      	add	r7, sp, #0
 8018ade:	60f8      	str	r0, [r7, #12]
 8018ae0:	60b9      	str	r1, [r7, #8]
 8018ae2:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	2200      	movs	r2, #0
 8018ae8:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	2201      	movs	r2, #1
 8018aee:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8018af0:	2300      	movs	r3, #0
 8018af2:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 8018af4:	e024      	b.n	8018b40 <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 8018af6:	68fb      	ldr	r3, [r7, #12]
 8018af8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018afa:	6a1b      	ldr	r3, [r3, #32]
 8018afc:	085b      	lsrs	r3, r3, #1
 8018afe:	697a      	ldr	r2, [r7, #20]
 8018b00:	429a      	cmp	r2, r3
 8018b02:	d302      	bcc.n	8018b0a <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 8018b04:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8018b08:	e027      	b.n	8018b5a <lfs_fs_pred+0x82>
        }
        cycle += 1;
 8018b0a:	697b      	ldr	r3, [r7, #20]
 8018b0c:	3301      	adds	r3, #1
 8018b0e:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	3318      	adds	r3, #24
 8018b14:	68b9      	ldr	r1, [r7, #8]
 8018b16:	4618      	mov	r0, r3
 8018b18:	f7fa fbdc 	bl	80132d4 <lfs_pair_cmp>
 8018b1c:	4603      	mov	r3, r0
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	d101      	bne.n	8018b26 <lfs_fs_pred+0x4e>
            return 0;
 8018b22:	2300      	movs	r3, #0
 8018b24:	e019      	b.n	8018b5a <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	3318      	adds	r3, #24
 8018b2a:	461a      	mov	r2, r3
 8018b2c:	6879      	ldr	r1, [r7, #4]
 8018b2e:	68f8      	ldr	r0, [r7, #12]
 8018b30:	f7fc f940 	bl	8014db4 <lfs_dir_fetch>
 8018b34:	6138      	str	r0, [r7, #16]
        if (err) {
 8018b36:	693b      	ldr	r3, [r7, #16]
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	d001      	beq.n	8018b40 <lfs_fs_pred+0x68>
            return err;
 8018b3c:	693b      	ldr	r3, [r7, #16]
 8018b3e:	e00c      	b.n	8018b5a <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	3318      	adds	r3, #24
 8018b44:	4618      	mov	r0, r3
 8018b46:	f7fa fbaa 	bl	801329e <lfs_pair_isnull>
 8018b4a:	4603      	mov	r3, r0
 8018b4c:	f083 0301 	eor.w	r3, r3, #1
 8018b50:	b2db      	uxtb	r3, r3
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	d1cf      	bne.n	8018af6 <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 8018b56:	f06f 0301 	mvn.w	r3, #1
}
 8018b5a:	4618      	mov	r0, r3
 8018b5c:	3718      	adds	r7, #24
 8018b5e:	46bd      	mov	sp, r7
 8018b60:	bd80      	pop	{r7, pc}

08018b62 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8018b62:	b5b0      	push	{r4, r5, r7, lr}
 8018b64:	b08e      	sub	sp, #56	; 0x38
 8018b66:	af04      	add	r7, sp, #16
 8018b68:	60f8      	str	r0, [r7, #12]
 8018b6a:	60b9      	str	r1, [r7, #8]
 8018b6c:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8018b6e:	68fb      	ldr	r3, [r7, #12]
 8018b70:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 8018b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8018b7c:	6a3b      	ldr	r3, [r7, #32]
 8018b7e:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8018b82:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8018b84:	6a3b      	ldr	r3, [r7, #32]
 8018b86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018b88:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 8018b8a:	69fb      	ldr	r3, [r7, #28]
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	69fa      	ldr	r2, [r7, #28]
 8018b90:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8018b92:	2108      	movs	r1, #8
 8018b94:	9103      	str	r1, [sp, #12]
 8018b96:	f107 0110 	add.w	r1, r7, #16
 8018b9a:	9102      	str	r1, [sp, #8]
 8018b9c:	9201      	str	r2, [sp, #4]
 8018b9e:	9300      	str	r3, [sp, #0]
 8018ba0:	462b      	mov	r3, r5
 8018ba2:	4622      	mov	r2, r4
 8018ba4:	4601      	mov	r1, r0
 8018ba6:	6a38      	ldr	r0, [r7, #32]
 8018ba8:	f7fa f840 	bl	8012c2c <lfs_bd_read>
 8018bac:	61b8      	str	r0, [r7, #24]
    if (err) {
 8018bae:	69bb      	ldr	r3, [r7, #24]
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d001      	beq.n	8018bb8 <lfs_fs_parent_match+0x56>
        return err;
 8018bb4:	69bb      	ldr	r3, [r7, #24]
 8018bb6:	e012      	b.n	8018bde <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8018bb8:	f107 0310 	add.w	r3, r7, #16
 8018bbc:	4618      	mov	r0, r3
 8018bbe:	f7fa fbe0 	bl	8013382 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8018bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bc4:	1d1a      	adds	r2, r3, #4
 8018bc6:	f107 0310 	add.w	r3, r7, #16
 8018bca:	4611      	mov	r1, r2
 8018bcc:	4618      	mov	r0, r3
 8018bce:	f7fa fb81 	bl	80132d4 <lfs_pair_cmp>
 8018bd2:	4603      	mov	r3, r0
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	bf14      	ite	ne
 8018bd8:	2301      	movne	r3, #1
 8018bda:	2300      	moveq	r3, #0
 8018bdc:	b2db      	uxtb	r3, r3
}
 8018bde:	4618      	mov	r0, r3
 8018be0:	3728      	adds	r7, #40	; 0x28
 8018be2:	46bd      	mov	sp, r7
 8018be4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08018be8 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8018be8:	b580      	push	{r7, lr}
 8018bea:	b08e      	sub	sp, #56	; 0x38
 8018bec:	af04      	add	r7, sp, #16
 8018bee:	60f8      	str	r0, [r7, #12]
 8018bf0:	60b9      	str	r1, [r7, #8]
 8018bf2:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	2200      	movs	r2, #0
 8018bf8:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	2201      	movs	r2, #1
 8018bfe:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8018c00:	2300      	movs	r3, #0
 8018c02:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 8018c04:	e030      	b.n	8018c68 <lfs_fs_parent+0x80>
        if (cycle >= lfs->cfg->block_count/2) {
 8018c06:	68fb      	ldr	r3, [r7, #12]
 8018c08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018c0a:	6a1b      	ldr	r3, [r3, #32]
 8018c0c:	085b      	lsrs	r3, r3, #1
 8018c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018c10:	429a      	cmp	r2, r3
 8018c12:	d302      	bcc.n	8018c1a <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 8018c14:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8018c18:	e033      	b.n	8018c82 <lfs_fs_parent+0x9a>
        }
        cycle += 1;
 8018c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c1c:	3301      	adds	r3, #1
 8018c1e:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8018c26:	68fb      	ldr	r3, [r7, #12]
 8018c28:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8018c2a:	68bb      	ldr	r3, [r7, #8]
 8018c2c:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8018c2e:	61bb      	str	r3, [r7, #24]
                    lfs, {pair[0], pair[1]}});
 8018c30:	68bb      	ldr	r3, [r7, #8]
 8018c32:	3304      	adds	r3, #4
 8018c34:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8018c36:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8018c38:	f107 0314 	add.w	r3, r7, #20
 8018c3c:	9303      	str	r3, [sp, #12]
 8018c3e:	4b13      	ldr	r3, [pc, #76]	; (8018c8c <lfs_fs_parent+0xa4>)
 8018c40:	9302      	str	r3, [sp, #8]
 8018c42:	2300      	movs	r3, #0
 8018c44:	9301      	str	r3, [sp, #4]
 8018c46:	4b12      	ldr	r3, [pc, #72]	; (8018c90 <lfs_fs_parent+0xa8>)
 8018c48:	9300      	str	r3, [sp, #0]
 8018c4a:	4b12      	ldr	r3, [pc, #72]	; (8018c94 <lfs_fs_parent+0xac>)
 8018c4c:	6879      	ldr	r1, [r7, #4]
 8018c4e:	68f8      	ldr	r0, [r7, #12]
 8018c50:	f7fb fd42 	bl	80146d8 <lfs_dir_fetchmatch>
 8018c54:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 8018c56:	6a3b      	ldr	r3, [r7, #32]
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	d005      	beq.n	8018c68 <lfs_fs_parent+0x80>
 8018c5c:	6a3b      	ldr	r3, [r7, #32]
 8018c5e:	f113 0f02 	cmn.w	r3, #2
 8018c62:	d001      	beq.n	8018c68 <lfs_fs_parent+0x80>
            return tag;
 8018c64:	6a3b      	ldr	r3, [r7, #32]
 8018c66:	e00c      	b.n	8018c82 <lfs_fs_parent+0x9a>
    while (!lfs_pair_isnull(parent->tail)) {
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	3318      	adds	r3, #24
 8018c6c:	4618      	mov	r0, r3
 8018c6e:	f7fa fb16 	bl	801329e <lfs_pair_isnull>
 8018c72:	4603      	mov	r3, r0
 8018c74:	f083 0301 	eor.w	r3, r3, #1
 8018c78:	b2db      	uxtb	r3, r3
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d1c3      	bne.n	8018c06 <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 8018c7e:	f06f 0301 	mvn.w	r3, #1
}
 8018c82:	4618      	mov	r0, r3
 8018c84:	3728      	adds	r7, #40	; 0x28
 8018c86:	46bd      	mov	sp, r7
 8018c88:	bd80      	pop	{r7, pc}
 8018c8a:	bf00      	nop
 8018c8c:	08018b63 	.word	0x08018b63
 8018c90:	20000008 	.word	0x20000008
 8018c94:	7ff003ff 	.word	0x7ff003ff

08018c98 <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8018c98:	b590      	push	{r4, r7, lr}
 8018c9a:	b083      	sub	sp, #12
 8018c9c:	af00      	add	r7, sp, #0
 8018c9e:	6078      	str	r0, [r7, #4]
 8018ca0:	460b      	mov	r3, r1
 8018ca2:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ca8:	4618      	mov	r0, r3
 8018caa:	f7fa fc09 	bl	80134c0 <lfs_tag_size>
 8018cae:	4603      	mov	r3, r0
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d10a      	bne.n	8018cca <lfs_fs_preporphans+0x32>
 8018cb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	da06      	bge.n	8018cca <lfs_fs_preporphans+0x32>
 8018cbc:	4b10      	ldr	r3, [pc, #64]	; (8018d00 <lfs_fs_preporphans+0x68>)
 8018cbe:	4a11      	ldr	r2, [pc, #68]	; (8018d04 <lfs_fs_preporphans+0x6c>)
 8018cc0:	f241 114c 	movw	r1, #4428	; 0x114c
 8018cc4:	4810      	ldr	r0, [pc, #64]	; (8018d08 <lfs_fs_preporphans+0x70>)
 8018cc6:	f002 f853 	bl	801ad70 <__assert_func>
    lfs->gstate.tag += orphans;
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018cce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018cd2:	441a      	add	r2, r3
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018cdc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	3330      	adds	r3, #48	; 0x30
 8018ce4:	4618      	mov	r0, r3
 8018ce6:	f7fa fc4e 	bl	8013586 <lfs_gstate_hasorphans>
 8018cea:	4603      	mov	r3, r0
 8018cec:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8018cee:	ea44 0203 	orr.w	r2, r4, r3
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 8018cf6:	2300      	movs	r3, #0
}
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	370c      	adds	r7, #12
 8018cfc:	46bd      	mov	sp, r7
 8018cfe:	bd90      	pop	{r4, r7, pc}
 8018d00:	0802229c 	.word	0x0802229c
 8018d04:	08022e38 	.word	0x08022e38
 8018d08:	08021b40 	.word	0x08021b40

08018d0c <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8018d0c:	b480      	push	{r7}
 8018d0e:	b085      	sub	sp, #20
 8018d10:	af00      	add	r7, sp, #0
 8018d12:	60f8      	str	r0, [r7, #12]
 8018d14:	460b      	mov	r3, r1
 8018d16:	607a      	str	r2, [r7, #4]
 8018d18:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8018d1a:	68fb      	ldr	r3, [r7, #12]
 8018d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018d1e:	4a17      	ldr	r2, [pc, #92]	; (8018d7c <lfs_fs_prepmove+0x70>)
 8018d20:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8018d22:	897b      	ldrh	r3, [r7, #10]
 8018d24:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8018d28:	428b      	cmp	r3, r1
 8018d2a:	d006      	beq.n	8018d3a <lfs_fs_prepmove+0x2e>
 8018d2c:	897b      	ldrh	r3, [r7, #10]
 8018d2e:	029b      	lsls	r3, r3, #10
 8018d30:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8018d34:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8018d38:	e000      	b.n	8018d3c <lfs_fs_prepmove+0x30>
 8018d3a:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8018d3c:	431a      	orrs	r2, r3
 8018d3e:	68fb      	ldr	r3, [r7, #12]
 8018d40:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8018d42:	897b      	ldrh	r3, [r7, #10]
 8018d44:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8018d48:	4293      	cmp	r3, r2
 8018d4a:	d002      	beq.n	8018d52 <lfs_fs_prepmove+0x46>
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	681b      	ldr	r3, [r3, #0]
 8018d50:	e000      	b.n	8018d54 <lfs_fs_prepmove+0x48>
 8018d52:	2300      	movs	r3, #0
 8018d54:	68fa      	ldr	r2, [r7, #12]
 8018d56:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8018d58:	897b      	ldrh	r3, [r7, #10]
 8018d5a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8018d5e:	4293      	cmp	r3, r2
 8018d60:	d003      	beq.n	8018d6a <lfs_fs_prepmove+0x5e>
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	3304      	adds	r3, #4
 8018d66:	681b      	ldr	r3, [r3, #0]
 8018d68:	e000      	b.n	8018d6c <lfs_fs_prepmove+0x60>
 8018d6a:	2300      	movs	r3, #0
 8018d6c:	68fa      	ldr	r2, [r7, #12]
 8018d6e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8018d70:	bf00      	nop
 8018d72:	3714      	adds	r7, #20
 8018d74:	46bd      	mov	sp, r7
 8018d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d7a:	4770      	bx	lr
 8018d7c:	800003ff 	.word	0x800003ff

08018d80 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8018d80:	b5b0      	push	{r4, r5, r7, lr}
 8018d82:	b094      	sub	sp, #80	; 0x50
 8018d84:	af04      	add	r7, sp, #16
 8018d86:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	333c      	adds	r3, #60	; 0x3c
 8018d8c:	4618      	mov	r0, r3
 8018d8e:	f7fa fc1c 	bl	80135ca <lfs_gstate_hasmove>
 8018d92:	4603      	mov	r3, r0
 8018d94:	f083 0301 	eor.w	r3, r3, #1
 8018d98:	b2db      	uxtb	r3, r3
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d001      	beq.n	8018da2 <lfs_fs_demove+0x22>
        return 0;
 8018d9e:	2300      	movs	r3, #0
 8018da0:	e049      	b.n	8018e36 <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018dae:	4618      	mov	r0, r3
 8018db0:	f7fa fb76 	bl	80134a0 <lfs_tag_id>
 8018db4:	4603      	mov	r3, r0
 8018db6:	461a      	mov	r2, r3
 8018db8:	4b21      	ldr	r3, [pc, #132]	; (8018e40 <lfs_fs_demove+0xc0>)
 8018dba:	9302      	str	r3, [sp, #8]
 8018dbc:	9201      	str	r2, [sp, #4]
 8018dbe:	9400      	str	r4, [sp, #0]
 8018dc0:	462b      	mov	r3, r5
 8018dc2:	f241 1266 	movw	r2, #4454	; 0x1166
 8018dc6:	491f      	ldr	r1, [pc, #124]	; (8018e44 <lfs_fs_demove+0xc4>)
 8018dc8:	481f      	ldr	r0, [pc, #124]	; (8018e48 <lfs_fs_demove+0xc8>)
 8018dca:	f003 f80b 	bl	801bde4 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8018dd4:	f107 0318 	add.w	r3, r7, #24
 8018dd8:	4619      	mov	r1, r3
 8018dda:	6878      	ldr	r0, [r7, #4]
 8018ddc:	f7fb ffea 	bl	8014db4 <lfs_dir_fetch>
 8018de0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 8018de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d001      	beq.n	8018dec <lfs_fs_demove+0x6c>
        return err;
 8018de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018dea:	e024      	b.n	8018e36 <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018df0:	4618      	mov	r0, r3
 8018df2:	f7fa fb55 	bl	80134a0 <lfs_tag_id>
 8018df6:	4603      	mov	r3, r0
 8018df8:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8018dfa:	2200      	movs	r2, #0
 8018dfc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8018e00:	6878      	ldr	r0, [r7, #4]
 8018e02:	f7ff ff83 	bl	8018d0c <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8018e06:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018e08:	029b      	lsls	r3, r3, #10
 8018e0a:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8018e0e:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8018e12:	613b      	str	r3, [r7, #16]
 8018e14:	2300      	movs	r3, #0
 8018e16:	617b      	str	r3, [r7, #20]
 8018e18:	f107 0210 	add.w	r2, r7, #16
 8018e1c:	f107 0118 	add.w	r1, r7, #24
 8018e20:	2301      	movs	r3, #1
 8018e22:	6878      	ldr	r0, [r7, #4]
 8018e24:	f7fd fda2 	bl	801696c <lfs_dir_commit>
 8018e28:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8018e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	d001      	beq.n	8018e34 <lfs_fs_demove+0xb4>
        return err;
 8018e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018e32:	e000      	b.n	8018e36 <lfs_fs_demove+0xb6>
    }

    return 0;
 8018e34:	2300      	movs	r3, #0
}
 8018e36:	4618      	mov	r0, r3
 8018e38:	3740      	adds	r7, #64	; 0x40
 8018e3a:	46bd      	mov	sp, r7
 8018e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8018e3e:	bf00      	nop
 8018e40:	08021c54 	.word	0x08021c54
 8018e44:	08021b40 	.word	0x08021b40
 8018e48:	080222d0 	.word	0x080222d0

08018e4c <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8018e4c:	b5b0      	push	{r4, r5, r7, lr}
 8018e4e:	b0b2      	sub	sp, #200	; 0xc8
 8018e50:	af04      	add	r7, sp, #16
 8018e52:	6078      	str	r0, [r7, #4]
 8018e54:	460b      	mov	r3, r1
 8018e56:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	3330      	adds	r3, #48	; 0x30
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	f7fa fb92 	bl	8013586 <lfs_gstate_hasorphans>
 8018e62:	4603      	mov	r3, r0
 8018e64:	f083 0301 	eor.w	r3, r3, #1
 8018e68:	b2db      	uxtb	r3, r3
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d001      	beq.n	8018e72 <lfs_fs_deorphan+0x26>
        return 0;
 8018e6e:	2300      	movs	r3, #0
 8018e70:	e17c      	b.n	801916c <lfs_fs_deorphan+0x320>
    }

    int8_t found = 0;
 8018e72:	2300      	movs	r3, #0
 8018e74:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
restart:
    {
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8018e78:	f107 030c 	add.w	r3, r7, #12
 8018e7c:	2220      	movs	r2, #32
 8018e7e:	2100      	movs	r1, #0
 8018e80:	4618      	mov	r0, r3
 8018e82:	f003 f911 	bl	801c0a8 <memset>
 8018e86:	2301      	movs	r3, #1
 8018e88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8018e8c:	2301      	movs	r3, #1
 8018e8e:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_mdir_t dir;

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 8018e90:	e148      	b.n	8019124 <lfs_fs_deorphan+0x2d8>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8018e92:	f107 030c 	add.w	r3, r7, #12
 8018e96:	f103 0218 	add.w	r2, r3, #24
 8018e9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018e9e:	4619      	mov	r1, r3
 8018ea0:	6878      	ldr	r0, [r7, #4]
 8018ea2:	f7fb ff87 	bl	8014db4 <lfs_dir_fetch>
 8018ea6:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            if (err) {
 8018eaa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	d002      	beq.n	8018eb8 <lfs_fs_deorphan+0x6c>
                return err;
 8018eb2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018eb6:	e159      	b.n	801916c <lfs_fs_deorphan+0x320>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 8018eb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018ebc:	f083 0301 	eor.w	r3, r3, #1
 8018ec0:	b2db      	uxtb	r3, r3
 8018ec2:	2b00      	cmp	r3, #0
 8018ec4:	f000 8124 	beq.w	8019110 <lfs_fs_deorphan+0x2c4>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8018ec8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8018ecc:	f107 030c 	add.w	r3, r7, #12
 8018ed0:	3318      	adds	r3, #24
 8018ed2:	4619      	mov	r1, r3
 8018ed4:	6878      	ldr	r0, [r7, #4]
 8018ed6:	f7ff fe87 	bl	8018be8 <lfs_fs_parent>
 8018eda:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 8018ede:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	da07      	bge.n	8018ef6 <lfs_fs_deorphan+0xaa>
 8018ee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018eea:	f113 0f02 	cmn.w	r3, #2
 8018eee:	d002      	beq.n	8018ef6 <lfs_fs_deorphan+0xaa>
                    return tag;
 8018ef0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018ef4:	e13a      	b.n	801916c <lfs_fs_deorphan+0x320>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (tag == LFS_ERR_NOENT && powerloss) {
 8018ef6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018efa:	f113 0f02 	cmn.w	r3, #2
 8018efe:	d157      	bne.n	8018fb0 <lfs_fs_deorphan+0x164>
 8018f00:	78fb      	ldrb	r3, [r7, #3]
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d054      	beq.n	8018fb0 <lfs_fs_deorphan+0x164>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8018f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f0a:	499a      	ldr	r1, [pc, #616]	; (8019174 <lfs_fs_deorphan+0x328>)
 8018f0c:	9101      	str	r1, [sp, #4]
 8018f0e:	9300      	str	r3, [sp, #0]
 8018f10:	4613      	mov	r3, r2
 8018f12:	f241 12a1 	movw	r2, #4513	; 0x11a1
 8018f16:	4998      	ldr	r1, [pc, #608]	; (8019178 <lfs_fs_deorphan+0x32c>)
 8018f18:	4898      	ldr	r0, [pc, #608]	; (801917c <lfs_fs_deorphan+0x330>)
 8018f1a:	f002 ff63 	bl	801bde4 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8018f24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018f28:	4619      	mov	r1, r3
 8018f2a:	6878      	ldr	r0, [r7, #4]
 8018f2c:	f7fb ff5e 	bl	8014dec <lfs_dir_getgstate>
 8018f30:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                    if (err) {
 8018f34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018f38:	2b00      	cmp	r3, #0
 8018f3a:	d002      	beq.n	8018f42 <lfs_fs_deorphan+0xf6>
                        return err;
 8018f3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018f40:	e114      	b.n	801916c <lfs_fs_deorphan+0x320>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8018f42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018f46:	3318      	adds	r3, #24
 8018f48:	4618      	mov	r0, r3
 8018f4a:	f7fa fa34 	bl	80133b6 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8018f4e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8018f52:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8018f56:	051a      	lsls	r2, r3, #20
 8018f58:	4b89      	ldr	r3, [pc, #548]	; (8019180 <lfs_fs_deorphan+0x334>)
 8018f5a:	4313      	orrs	r3, r2
 8018f5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8018f60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018f64:	3318      	adds	r3, #24
 8018f66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8018f6a:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8018f6e:	f107 010c 	add.w	r1, r7, #12
 8018f72:	2301      	movs	r3, #1
 8018f74:	6878      	ldr	r0, [r7, #4]
 8018f76:	f7fd f9ff 	bl	8016378 <lfs_dir_orphaningcommit>
 8018f7a:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8018f7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018f82:	3318      	adds	r3, #24
 8018f84:	4618      	mov	r0, r3
 8018f86:	f7fa f9fc 	bl	8013382 <lfs_pair_fromle32>
                    if (state < 0) {
 8018f8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	da02      	bge.n	8018f98 <lfs_fs_deorphan+0x14c>
                        return state;
 8018f92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                    return tag;
 8018f96:	e0e9      	b.n	801916c <lfs_fs_deorphan+0x320>
                    }

                    found += 1;
 8018f98:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8018f9c:	3301      	adds	r3, #1
 8018f9e:	b2db      	uxtb	r3, r3
 8018fa0:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 8018fa4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018fa8:	2b03      	cmp	r3, #3
 8018faa:	f040 80af 	bne.w	801910c <lfs_fs_deorphan+0x2c0>
                        goto restart;
 8018fae:	e763      	b.n	8018e78 <lfs_fs_deorphan+0x2c>

                    // refetch tail
                    continue;
                }

                if (tag != LFS_ERR_NOENT) {
 8018fb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018fb4:	f113 0f02 	cmn.w	r3, #2
 8018fb8:	f000 80aa 	beq.w	8019110 <lfs_fs_deorphan+0x2c4>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8018fbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8018fc0:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8018fc4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8018fc8:	9300      	str	r3, [sp, #0]
 8018fca:	4613      	mov	r3, r2
 8018fcc:	4a6d      	ldr	r2, [pc, #436]	; (8019184 <lfs_fs_deorphan+0x338>)
 8018fce:	6878      	ldr	r0, [r7, #4]
 8018fd0:	f7fa fe50 	bl	8013c74 <lfs_dir_get>
 8018fd4:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8018fd8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	da02      	bge.n	8018fe6 <lfs_fs_deorphan+0x19a>
                        return state;
 8018fe0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018fe4:	e0c2      	b.n	801916c <lfs_fs_deorphan+0x320>
                    }
                    lfs_pair_fromle32(pair);
 8018fe6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8018fea:	4618      	mov	r0, r3
 8018fec:	f7fa f9c9 	bl	8013382 <lfs_pair_fromle32>

                    if (!lfs_pair_sync(pair, pdir.tail)) {
 8018ff0:	f107 030c 	add.w	r3, r7, #12
 8018ff4:	f103 0218 	add.w	r2, r3, #24
 8018ff8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8018ffc:	4611      	mov	r1, r2
 8018ffe:	4618      	mov	r0, r3
 8019000:	f7fa f992 	bl	8013328 <lfs_pair_sync>
 8019004:	4603      	mov	r3, r0
 8019006:	f083 0301 	eor.w	r3, r3, #1
 801900a:	b2db      	uxtb	r3, r3
 801900c:	2b00      	cmp	r3, #0
 801900e:	d07f      	beq.n	8019110 <lfs_fs_deorphan+0x2c4>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 8019010:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019014:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8019018:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801901c:	4c55      	ldr	r4, [pc, #340]	; (8019174 <lfs_fs_deorphan+0x328>)
 801901e:	9403      	str	r4, [sp, #12]
 8019020:	9102      	str	r1, [sp, #8]
 8019022:	9201      	str	r2, [sp, #4]
 8019024:	9300      	str	r3, [sp, #0]
 8019026:	4603      	mov	r3, r0
 8019028:	f241 12ca 	movw	r2, #4554	; 0x11ca
 801902c:	4952      	ldr	r1, [pc, #328]	; (8019178 <lfs_fs_deorphan+0x32c>)
 801902e:	4856      	ldr	r0, [pc, #344]	; (8019188 <lfs_fs_deorphan+0x33c>)
 8019030:	f002 fed8 	bl	801bde4 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8019034:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8019038:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	3330      	adds	r3, #48	; 0x30
 8019040:	f107 020c 	add.w	r2, r7, #12
 8019044:	4611      	mov	r1, r2
 8019046:	4618      	mov	r0, r3
 8019048:	f7fa fad2 	bl	80135f0 <lfs_gstate_hasmovehere>
 801904c:	4603      	mov	r3, r0
 801904e:	2b00      	cmp	r3, #0
 8019050:	d01c      	beq.n	801908c <lfs_fs_deorphan+0x240>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019056:	4618      	mov	r0, r3
 8019058:	f7fa fa22 	bl	80134a0 <lfs_tag_id>
 801905c:	4603      	mov	r3, r0
 801905e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                            LFS_DEBUG("Fixing move while fixing orphans "
 8019062:	68f9      	ldr	r1, [r7, #12]
 8019064:	693b      	ldr	r3, [r7, #16]
 8019066:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 801906a:	4842      	ldr	r0, [pc, #264]	; (8019174 <lfs_fs_deorphan+0x328>)
 801906c:	9002      	str	r0, [sp, #8]
 801906e:	9201      	str	r2, [sp, #4]
 8019070:	9300      	str	r3, [sp, #0]
 8019072:	460b      	mov	r3, r1
 8019074:	f241 12d5 	movw	r2, #4565	; 0x11d5
 8019078:	493f      	ldr	r1, [pc, #252]	; (8019178 <lfs_fs_deorphan+0x32c>)
 801907a:	4844      	ldr	r0, [pc, #272]	; (801918c <lfs_fs_deorphan+0x340>)
 801907c:	f002 feb2 	bl	801bde4 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8019080:	2200      	movs	r2, #0
 8019082:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8019086:	6878      	ldr	r0, [r7, #4]
 8019088:	f7ff fe40 	bl	8018d0c <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 801908c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8019090:	4618      	mov	r0, r3
 8019092:	f7fa f990 	bl	80133b6 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8019096:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 801909a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801909e:	4293      	cmp	r3, r2
 80190a0:	d007      	beq.n	80190b2 <lfs_fs_deorphan+0x266>
 80190a2:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80190a6:	029b      	lsls	r3, r3, #10
 80190a8:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80190ac:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80190b0:	e000      	b.n	80190b4 <lfs_fs_deorphan+0x268>
 80190b2:	2300      	movs	r3, #0
 80190b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80190b6:	2300      	movs	r3, #0
 80190b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80190bc:	4b34      	ldr	r3, [pc, #208]	; (8019190 <lfs_fs_deorphan+0x344>)
 80190be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80190c2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80190c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80190ca:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80190ce:	f107 010c 	add.w	r1, r7, #12
 80190d2:	2302      	movs	r3, #2
 80190d4:	6878      	ldr	r0, [r7, #4]
 80190d6:	f7fd f94f 	bl	8016378 <lfs_dir_orphaningcommit>
 80190da:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 80190de:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80190e2:	4618      	mov	r0, r3
 80190e4:	f7fa f94d 	bl	8013382 <lfs_pair_fromle32>
                        if (state < 0) {
 80190e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	da02      	bge.n	80190f6 <lfs_fs_deorphan+0x2aa>
                            return state;
 80190f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 80190f4:	e03a      	b.n	801916c <lfs_fs_deorphan+0x320>
                        }

                        found += 1;
 80190f6:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80190fa:	3301      	adds	r3, #1
 80190fc:	b2db      	uxtb	r3, r3
 80190fe:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 8019102:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019106:	2b03      	cmp	r3, #3
 8019108:	d10c      	bne.n	8019124 <lfs_fs_deorphan+0x2d8>
 801910a:	e6b5      	b.n	8018e78 <lfs_fs_deorphan+0x2c>
                    continue;
 801910c:	bf00      	nop
 801910e:	e009      	b.n	8019124 <lfs_fs_deorphan+0x2d8>
                        continue;
                    }
                }
            }

            pdir = dir;
 8019110:	f107 040c 	add.w	r4, r7, #12
 8019114:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8019118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801911a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801911c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8019120:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 8019124:	f107 030c 	add.w	r3, r7, #12
 8019128:	3318      	adds	r3, #24
 801912a:	4618      	mov	r0, r3
 801912c:	f7fa f8b7 	bl	801329e <lfs_pair_isnull>
 8019130:	4603      	mov	r3, r0
 8019132:	f083 0301 	eor.w	r3, r3, #1
 8019136:	b2db      	uxtb	r3, r3
 8019138:	2b00      	cmp	r3, #0
 801913a:	f47f aeaa 	bne.w	8018e92 <lfs_fs_deorphan+0x46>
        }
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_min(
            lfs_gstate_getorphans(&lfs->gstate),
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	3330      	adds	r3, #48	; 0x30
 8019142:	4618      	mov	r0, r3
 8019144:	f7fa fa32 	bl	80135ac <lfs_gstate_getorphans>
 8019148:	4603      	mov	r3, r0
    return lfs_fs_preporphans(lfs, -lfs_min(
 801914a:	461a      	mov	r2, r3
 801914c:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 8019150:	4619      	mov	r1, r3
 8019152:	4610      	mov	r0, r2
 8019154:	f7f9 fc8e 	bl	8012a74 <lfs_min>
 8019158:	4603      	mov	r3, r0
 801915a:	b2db      	uxtb	r3, r3
 801915c:	425b      	negs	r3, r3
 801915e:	b2db      	uxtb	r3, r3
 8019160:	b25b      	sxtb	r3, r3
 8019162:	4619      	mov	r1, r3
 8019164:	6878      	ldr	r0, [r7, #4]
 8019166:	f7ff fd97 	bl	8018c98 <lfs_fs_preporphans>
 801916a:	4603      	mov	r3, r0
            found));
}
 801916c:	4618      	mov	r0, r3
 801916e:	37b8      	adds	r7, #184	; 0xb8
 8019170:	46bd      	mov	sp, r7
 8019172:	bdb0      	pop	{r4, r5, r7, pc}
 8019174:	08021c54 	.word	0x08021c54
 8019178:	08021b40 	.word	0x08021b40
 801917c:	08022304 	.word	0x08022304
 8019180:	000ffc08 	.word	0x000ffc08
 8019184:	7ffffc00 	.word	0x7ffffc00
 8019188:	08022334 	.word	0x08022334
 801918c:	08022378 	.word	0x08022378
 8019190:	600ffc08 	.word	0x600ffc08

08019194 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8019194:	b580      	push	{r7, lr}
 8019196:	b084      	sub	sp, #16
 8019198:	af00      	add	r7, sp, #0
 801919a:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 801919c:	6878      	ldr	r0, [r7, #4]
 801919e:	f7ff fdef 	bl	8018d80 <lfs_fs_demove>
 80191a2:	60f8      	str	r0, [r7, #12]
    if (err) {
 80191a4:	68fb      	ldr	r3, [r7, #12]
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d001      	beq.n	80191ae <lfs_fs_forceconsistency+0x1a>
        return err;
 80191aa:	68fb      	ldr	r3, [r7, #12]
 80191ac:	e00a      	b.n	80191c4 <lfs_fs_forceconsistency+0x30>
    }

    err = lfs_fs_deorphan(lfs, true);
 80191ae:	2101      	movs	r1, #1
 80191b0:	6878      	ldr	r0, [r7, #4]
 80191b2:	f7ff fe4b 	bl	8018e4c <lfs_fs_deorphan>
 80191b6:	60f8      	str	r0, [r7, #12]
    if (err) {
 80191b8:	68fb      	ldr	r3, [r7, #12]
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	d001      	beq.n	80191c2 <lfs_fs_forceconsistency+0x2e>
        return err;
 80191be:	68fb      	ldr	r3, [r7, #12]
 80191c0:	e000      	b.n	80191c4 <lfs_fs_forceconsistency+0x30>
    }

    return 0;
 80191c2:	2300      	movs	r3, #0
}
 80191c4:	4618      	mov	r0, r3
 80191c6:	3710      	adds	r7, #16
 80191c8:	46bd      	mov	sp, r7
 80191ca:	bd80      	pop	{r7, pc}

080191cc <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 80191cc:	b480      	push	{r7}
 80191ce:	b085      	sub	sp, #20
 80191d0:	af00      	add	r7, sp, #0
 80191d2:	6078      	str	r0, [r7, #4]
 80191d4:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	60fb      	str	r3, [r7, #12]
    *size += 1;
 80191da:	68fb      	ldr	r3, [r7, #12]
 80191dc:	681b      	ldr	r3, [r3, #0]
 80191de:	1c5a      	adds	r2, r3, #1
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	601a      	str	r2, [r3, #0]
    return 0;
 80191e4:	2300      	movs	r3, #0
}
 80191e6:	4618      	mov	r0, r3
 80191e8:	3714      	adds	r7, #20
 80191ea:	46bd      	mov	sp, r7
 80191ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191f0:	4770      	bx	lr
	...

080191f4 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 80191f4:	b580      	push	{r7, lr}
 80191f6:	b084      	sub	sp, #16
 80191f8:	af00      	add	r7, sp, #0
 80191fa:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 80191fc:	2300      	movs	r3, #0
 80191fe:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 8019200:	f107 0208 	add.w	r2, r7, #8
 8019204:	2300      	movs	r3, #0
 8019206:	4907      	ldr	r1, [pc, #28]	; (8019224 <lfs_fs_rawsize+0x30>)
 8019208:	6878      	ldr	r0, [r7, #4]
 801920a:	f7ff fb3f 	bl	801888c <lfs_fs_rawtraverse>
 801920e:	60f8      	str	r0, [r7, #12]
    if (err) {
 8019210:	68fb      	ldr	r3, [r7, #12]
 8019212:	2b00      	cmp	r3, #0
 8019214:	d001      	beq.n	801921a <lfs_fs_rawsize+0x26>
        return err;
 8019216:	68fb      	ldr	r3, [r7, #12]
 8019218:	e000      	b.n	801921c <lfs_fs_rawsize+0x28>
    }

    return size;
 801921a:	68bb      	ldr	r3, [r7, #8]
}
 801921c:	4618      	mov	r0, r3
 801921e:	3710      	adds	r7, #16
 8019220:	46bd      	mov	sp, r7
 8019222:	bd80      	pop	{r7, pc}
 8019224:	080191cd 	.word	0x080191cd

08019228 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8019228:	b580      	push	{r7, lr}
 801922a:	b084      	sub	sp, #16
 801922c:	af00      	add	r7, sp, #0
 801922e:	6078      	str	r0, [r7, #4]
 8019230:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8019232:	2300      	movs	r3, #0
 8019234:	60fb      	str	r3, [r7, #12]
    if (err) {
 8019236:	68fb      	ldr	r3, [r7, #12]
 8019238:	2b00      	cmp	r3, #0
 801923a:	d001      	beq.n	8019240 <lfs_format+0x18>
        return err;
 801923c:	68fb      	ldr	r3, [r7, #12]
 801923e:	e005      	b.n	801924c <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 8019240:	6839      	ldr	r1, [r7, #0]
 8019242:	6878      	ldr	r0, [r7, #4]
 8019244:	f7ff f8ca 	bl	80183dc <lfs_rawformat>
 8019248:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 801924a:	68fb      	ldr	r3, [r7, #12]
}
 801924c:	4618      	mov	r0, r3
 801924e:	3710      	adds	r7, #16
 8019250:	46bd      	mov	sp, r7
 8019252:	bd80      	pop	{r7, pc}

08019254 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8019254:	b580      	push	{r7, lr}
 8019256:	b084      	sub	sp, #16
 8019258:	af00      	add	r7, sp, #0
 801925a:	6078      	str	r0, [r7, #4]
 801925c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 801925e:	2300      	movs	r3, #0
 8019260:	60fb      	str	r3, [r7, #12]
    if (err) {
 8019262:	68fb      	ldr	r3, [r7, #12]
 8019264:	2b00      	cmp	r3, #0
 8019266:	d001      	beq.n	801926c <lfs_mount+0x18>
        return err;
 8019268:	68fb      	ldr	r3, [r7, #12]
 801926a:	e005      	b.n	8019278 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 801926c:	6839      	ldr	r1, [r7, #0]
 801926e:	6878      	ldr	r0, [r7, #4]
 8019270:	f7ff f954 	bl	801851c <lfs_rawmount>
 8019274:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8019276:	68fb      	ldr	r3, [r7, #12]
}
 8019278:	4618      	mov	r0, r3
 801927a:	3710      	adds	r7, #16
 801927c:	46bd      	mov	sp, r7
 801927e:	bd80      	pop	{r7, pc}

08019280 <lfs_stat>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 8019280:	b580      	push	{r7, lr}
 8019282:	b086      	sub	sp, #24
 8019284:	af00      	add	r7, sp, #0
 8019286:	60f8      	str	r0, [r7, #12]
 8019288:	60b9      	str	r1, [r7, #8]
 801928a:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 801928c:	2300      	movs	r3, #0
 801928e:	617b      	str	r3, [r7, #20]
    if (err) {
 8019290:	697b      	ldr	r3, [r7, #20]
 8019292:	2b00      	cmp	r3, #0
 8019294:	d001      	beq.n	801929a <lfs_stat+0x1a>
        return err;
 8019296:	697b      	ldr	r3, [r7, #20]
 8019298:	e006      	b.n	80192a8 <lfs_stat+0x28>
    }
    LFS_TRACE("lfs_stat(%p, \"%s\", %p)", (void*)lfs, path, (void*)info);

    err = lfs_rawstat(lfs, path, info);
 801929a:	687a      	ldr	r2, [r7, #4]
 801929c:	68b9      	ldr	r1, [r7, #8]
 801929e:	68f8      	ldr	r0, [r7, #12]
 80192a0:	f7fe fe94 	bl	8017fcc <lfs_rawstat>
 80192a4:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80192a6:	697b      	ldr	r3, [r7, #20]
}
 80192a8:	4618      	mov	r0, r3
 80192aa:	3718      	adds	r7, #24
 80192ac:	46bd      	mov	sp, r7
 80192ae:	bd80      	pop	{r7, pc}

080192b0 <lfs_file_opencfg>:
}
#endif

int lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 80192b0:	b580      	push	{r7, lr}
 80192b2:	b088      	sub	sp, #32
 80192b4:	af02      	add	r7, sp, #8
 80192b6:	60f8      	str	r0, [r7, #12]
 80192b8:	60b9      	str	r1, [r7, #8]
 80192ba:	607a      	str	r2, [r7, #4]
 80192bc:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80192be:	2300      	movs	r3, #0
 80192c0:	617b      	str	r3, [r7, #20]
    if (err) {
 80192c2:	697b      	ldr	r3, [r7, #20]
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d001      	beq.n	80192cc <lfs_file_opencfg+0x1c>
        return err;
 80192c8:	697b      	ldr	r3, [r7, #20]
 80192ca:	e01c      	b.n	8019306 <lfs_file_opencfg+0x56>
    }
    LFS_TRACE("lfs_file_opencfg(%p, %p, \"%s\", %x, %p {"
                 ".buffer=%p, .attrs=%p, .attr_count=%"PRIu32"})",
            (void*)lfs, (void*)file, path, flags,
            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80192cc:	68fb      	ldr	r3, [r7, #12]
 80192ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80192d0:	68b9      	ldr	r1, [r7, #8]
 80192d2:	4618      	mov	r0, r3
 80192d4:	f7fa fa8c 	bl	80137f0 <lfs_mlist_isopen>
 80192d8:	4603      	mov	r3, r0
 80192da:	f083 0301 	eor.w	r3, r3, #1
 80192de:	b2db      	uxtb	r3, r3
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d106      	bne.n	80192f2 <lfs_file_opencfg+0x42>
 80192e4:	4b0a      	ldr	r3, [pc, #40]	; (8019310 <lfs_file_opencfg+0x60>)
 80192e6:	4a0b      	ldr	r2, [pc, #44]	; (8019314 <lfs_file_opencfg+0x64>)
 80192e8:	f241 517b 	movw	r1, #5499	; 0x157b
 80192ec:	480a      	ldr	r0, [pc, #40]	; (8019318 <lfs_file_opencfg+0x68>)
 80192ee:	f001 fd3f 	bl	801ad70 <__assert_func>

    err = lfs_file_rawopencfg(lfs, file, path, flags, cfg);
 80192f2:	6a3b      	ldr	r3, [r7, #32]
 80192f4:	9300      	str	r3, [sp, #0]
 80192f6:	683b      	ldr	r3, [r7, #0]
 80192f8:	687a      	ldr	r2, [r7, #4]
 80192fa:	68b9      	ldr	r1, [r7, #8]
 80192fc:	68f8      	ldr	r0, [r7, #12]
 80192fe:	f7fd fec3 	bl	8017088 <lfs_file_rawopencfg>
 8019302:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8019304:	697b      	ldr	r3, [r7, #20]
}
 8019306:	4618      	mov	r0, r3
 8019308:	3718      	adds	r7, #24
 801930a:	46bd      	mov	sp, r7
 801930c:	bd80      	pop	{r7, pc}
 801930e:	bf00      	nop
 8019310:	080223c0 	.word	0x080223c0
 8019314:	08022e4c 	.word	0x08022e4c
 8019318:	08021b40 	.word	0x08021b40

0801931c <lfs_file_close>:

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 801931c:	b580      	push	{r7, lr}
 801931e:	b084      	sub	sp, #16
 8019320:	af00      	add	r7, sp, #0
 8019322:	6078      	str	r0, [r7, #4]
 8019324:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8019326:	2300      	movs	r3, #0
 8019328:	60fb      	str	r3, [r7, #12]
    if (err) {
 801932a:	68fb      	ldr	r3, [r7, #12]
 801932c:	2b00      	cmp	r3, #0
 801932e:	d001      	beq.n	8019334 <lfs_file_close+0x18>
        return err;
 8019330:	68fb      	ldr	r3, [r7, #12]
 8019332:	e015      	b.n	8019360 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019338:	6839      	ldr	r1, [r7, #0]
 801933a:	4618      	mov	r0, r3
 801933c:	f7fa fa58 	bl	80137f0 <lfs_mlist_isopen>
 8019340:	4603      	mov	r3, r0
 8019342:	2b00      	cmp	r3, #0
 8019344:	d106      	bne.n	8019354 <lfs_file_close+0x38>
 8019346:	4b08      	ldr	r3, [pc, #32]	; (8019368 <lfs_file_close+0x4c>)
 8019348:	4a08      	ldr	r2, [pc, #32]	; (801936c <lfs_file_close+0x50>)
 801934a:	f241 518a 	movw	r1, #5514	; 0x158a
 801934e:	4808      	ldr	r0, [pc, #32]	; (8019370 <lfs_file_close+0x54>)
 8019350:	f001 fd0e 	bl	801ad70 <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 8019354:	6839      	ldr	r1, [r7, #0]
 8019356:	6878      	ldr	r0, [r7, #4]
 8019358:	f7fe f866 	bl	8017428 <lfs_file_rawclose>
 801935c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 801935e:	68fb      	ldr	r3, [r7, #12]
}
 8019360:	4618      	mov	r0, r3
 8019362:	3710      	adds	r7, #16
 8019364:	46bd      	mov	sp, r7
 8019366:	bd80      	pop	{r7, pc}
 8019368:	080223f8 	.word	0x080223f8
 801936c:	08022e60 	.word	0x08022e60
 8019370:	08021b40 	.word	0x08021b40

08019374 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8019374:	b580      	push	{r7, lr}
 8019376:	b086      	sub	sp, #24
 8019378:	af00      	add	r7, sp, #0
 801937a:	60f8      	str	r0, [r7, #12]
 801937c:	60b9      	str	r1, [r7, #8]
 801937e:	607a      	str	r2, [r7, #4]
 8019380:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8019382:	2300      	movs	r3, #0
 8019384:	617b      	str	r3, [r7, #20]
    if (err) {
 8019386:	697b      	ldr	r3, [r7, #20]
 8019388:	2b00      	cmp	r3, #0
 801938a:	d001      	beq.n	8019390 <lfs_file_read+0x1c>
        return err;
 801938c:	697b      	ldr	r3, [r7, #20]
 801938e:	e017      	b.n	80193c0 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8019390:	68fb      	ldr	r3, [r7, #12]
 8019392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019394:	68b9      	ldr	r1, [r7, #8]
 8019396:	4618      	mov	r0, r3
 8019398:	f7fa fa2a 	bl	80137f0 <lfs_mlist_isopen>
 801939c:	4603      	mov	r3, r0
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d106      	bne.n	80193b0 <lfs_file_read+0x3c>
 80193a2:	4b09      	ldr	r3, [pc, #36]	; (80193c8 <lfs_file_read+0x54>)
 80193a4:	4a09      	ldr	r2, [pc, #36]	; (80193cc <lfs_file_read+0x58>)
 80193a6:	f241 51ac 	movw	r1, #5548	; 0x15ac
 80193aa:	4809      	ldr	r0, [pc, #36]	; (80193d0 <lfs_file_read+0x5c>)
 80193ac:	f001 fce0 	bl	801ad70 <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 80193b0:	683b      	ldr	r3, [r7, #0]
 80193b2:	687a      	ldr	r2, [r7, #4]
 80193b4:	68b9      	ldr	r1, [r7, #8]
 80193b6:	68f8      	ldr	r0, [r7, #12]
 80193b8:	f7fe fb82 	bl	8017ac0 <lfs_file_rawread>
 80193bc:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 80193be:	693b      	ldr	r3, [r7, #16]
}
 80193c0:	4618      	mov	r0, r3
 80193c2:	3718      	adds	r7, #24
 80193c4:	46bd      	mov	sp, r7
 80193c6:	bd80      	pop	{r7, pc}
 80193c8:	080223f8 	.word	0x080223f8
 80193cc:	08022e70 	.word	0x08022e70
 80193d0:	08021b40 	.word	0x08021b40

080193d4 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80193d4:	b580      	push	{r7, lr}
 80193d6:	b086      	sub	sp, #24
 80193d8:	af00      	add	r7, sp, #0
 80193da:	60f8      	str	r0, [r7, #12]
 80193dc:	60b9      	str	r1, [r7, #8]
 80193de:	607a      	str	r2, [r7, #4]
 80193e0:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80193e2:	2300      	movs	r3, #0
 80193e4:	617b      	str	r3, [r7, #20]
    if (err) {
 80193e6:	697b      	ldr	r3, [r7, #20]
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	d001      	beq.n	80193f0 <lfs_file_write+0x1c>
        return err;
 80193ec:	697b      	ldr	r3, [r7, #20]
 80193ee:	e017      	b.n	8019420 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80193f0:	68fb      	ldr	r3, [r7, #12]
 80193f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80193f4:	68b9      	ldr	r1, [r7, #8]
 80193f6:	4618      	mov	r0, r3
 80193f8:	f7fa f9fa 	bl	80137f0 <lfs_mlist_isopen>
 80193fc:	4603      	mov	r3, r0
 80193fe:	2b00      	cmp	r3, #0
 8019400:	d106      	bne.n	8019410 <lfs_file_write+0x3c>
 8019402:	4b09      	ldr	r3, [pc, #36]	; (8019428 <lfs_file_write+0x54>)
 8019404:	4a09      	ldr	r2, [pc, #36]	; (801942c <lfs_file_write+0x58>)
 8019406:	f241 51be 	movw	r1, #5566	; 0x15be
 801940a:	4809      	ldr	r0, [pc, #36]	; (8019430 <lfs_file_write+0x5c>)
 801940c:	f001 fcb0 	bl	801ad70 <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 8019410:	683b      	ldr	r3, [r7, #0]
 8019412:	687a      	ldr	r2, [r7, #4]
 8019414:	68b9      	ldr	r1, [r7, #8]
 8019416:	68f8      	ldr	r0, [r7, #12]
 8019418:	f7fe fcb0 	bl	8017d7c <lfs_file_rawwrite>
 801941c:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 801941e:	693b      	ldr	r3, [r7, #16]
}
 8019420:	4618      	mov	r0, r3
 8019422:	3718      	adds	r7, #24
 8019424:	46bd      	mov	sp, r7
 8019426:	bd80      	pop	{r7, pc}
 8019428:	080223f8 	.word	0x080223f8
 801942c:	08022e80 	.word	0x08022e80
 8019430:	08021b40 	.word	0x08021b40

08019434 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8019434:	b580      	push	{r7, lr}
 8019436:	b086      	sub	sp, #24
 8019438:	af00      	add	r7, sp, #0
 801943a:	60f8      	str	r0, [r7, #12]
 801943c:	60b9      	str	r1, [r7, #8]
 801943e:	607a      	str	r2, [r7, #4]
 8019440:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8019442:	2300      	movs	r3, #0
 8019444:	617b      	str	r3, [r7, #20]
    if (err) {
 8019446:	697b      	ldr	r3, [r7, #20]
 8019448:	2b00      	cmp	r3, #0
 801944a:	d001      	beq.n	8019450 <lfs_file_seek+0x1c>
        return err;
 801944c:	697b      	ldr	r3, [r7, #20]
 801944e:	e017      	b.n	8019480 <lfs_file_seek+0x4c>
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8019450:	68fb      	ldr	r3, [r7, #12]
 8019452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019454:	68b9      	ldr	r1, [r7, #8]
 8019456:	4618      	mov	r0, r3
 8019458:	f7fa f9ca 	bl	80137f0 <lfs_mlist_isopen>
 801945c:	4603      	mov	r3, r0
 801945e:	2b00      	cmp	r3, #0
 8019460:	d106      	bne.n	8019470 <lfs_file_seek+0x3c>
 8019462:	4b09      	ldr	r3, [pc, #36]	; (8019488 <lfs_file_seek+0x54>)
 8019464:	4a09      	ldr	r2, [pc, #36]	; (801948c <lfs_file_seek+0x58>)
 8019466:	f241 51d0 	movw	r1, #5584	; 0x15d0
 801946a:	4809      	ldr	r0, [pc, #36]	; (8019490 <lfs_file_seek+0x5c>)
 801946c:	f001 fc80 	bl	801ad70 <__assert_func>

    lfs_soff_t res = lfs_file_rawseek(lfs, file, off, whence);
 8019470:	683b      	ldr	r3, [r7, #0]
 8019472:	687a      	ldr	r2, [r7, #4]
 8019474:	68b9      	ldr	r1, [r7, #8]
 8019476:	68f8      	ldr	r0, [r7, #12]
 8019478:	f7fe fd04 	bl	8017e84 <lfs_file_rawseek>
 801947c:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 801947e:	693b      	ldr	r3, [r7, #16]
}
 8019480:	4618      	mov	r0, r3
 8019482:	3718      	adds	r7, #24
 8019484:	46bd      	mov	sp, r7
 8019486:	bd80      	pop	{r7, pc}
 8019488:	080223f8 	.word	0x080223f8
 801948c:	08022e90 	.word	0x08022e90
 8019490:	08021b40 	.word	0x08021b40

08019494 <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 8019494:	b580      	push	{r7, lr}
 8019496:	b084      	sub	sp, #16
 8019498:	af00      	add	r7, sp, #0
 801949a:	6078      	str	r0, [r7, #4]
 801949c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 801949e:	2300      	movs	r3, #0
 80194a0:	60fb      	str	r3, [r7, #12]
    if (err) {
 80194a2:	68fb      	ldr	r3, [r7, #12]
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	d001      	beq.n	80194ac <lfs_mkdir+0x18>
        return err;
 80194a8:	68fb      	ldr	r3, [r7, #12]
 80194aa:	e005      	b.n	80194b8 <lfs_mkdir+0x24>
    }
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawmkdir(lfs, path);
 80194ac:	6839      	ldr	r1, [r7, #0]
 80194ae:	6878      	ldr	r0, [r7, #4]
 80194b0:	f7fd fa82 	bl	80169b8 <lfs_rawmkdir>
 80194b4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80194b6:	68fb      	ldr	r3, [r7, #12]
}
 80194b8:	4618      	mov	r0, r3
 80194ba:	3710      	adds	r7, #16
 80194bc:	46bd      	mov	sp, r7
 80194be:	bd80      	pop	{r7, pc}

080194c0 <io_fs_init>:
}

#endif

int io_fs_init(uint8_t * lfsReadBuff, uint8_t * lfsWriteBuff, uint8_t * lfslookaheadBuff, uint16_t buffers_size, struct lfs_config *cfg)
{
 80194c0:	b580      	push	{r7, lr}
 80194c2:	b088      	sub	sp, #32
 80194c4:	af00      	add	r7, sp, #0
 80194c6:	60f8      	str	r0, [r7, #12]
 80194c8:	60b9      	str	r1, [r7, #8]
 80194ca:	607a      	str	r2, [r7, #4]
 80194cc:	807b      	strh	r3, [r7, #2]
	struct SPI_flash_info  flash_info;

	flash_info = sFLASH_GetInfo();
 80194ce:	f107 0310 	add.w	r3, r7, #16
 80194d2:	4618      	mov	r0, r3
 80194d4:	f7eb f876 	bl	80045c4 <sFLASH_GetInfo>

    cfg->read_size   = flash_info.read_size;
 80194d8:	8abb      	ldrh	r3, [r7, #20]
 80194da:	461a      	mov	r2, r3
 80194dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194de:	615a      	str	r2, [r3, #20]
    cfg->prog_size   = flash_info.write_size;
 80194e0:	8afb      	ldrh	r3, [r7, #22]
 80194e2:	461a      	mov	r2, r3
 80194e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194e6:	619a      	str	r2, [r3, #24]

    cfg->block_size  = flash_info.erase_size;
 80194e8:	8b3b      	ldrh	r3, [r7, #24]
 80194ea:	461a      	mov	r2, r3
 80194ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194ee:	61da      	str	r2, [r3, #28]
    cfg->block_count = flash_info.block_count;
 80194f0:	8bbb      	ldrh	r3, [r7, #28]
 80194f2:	461a      	mov	r2, r3
 80194f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194f6:	621a      	str	r2, [r3, #32]

    cfg->lookahead_size = buffers_size;
 80194f8:	887a      	ldrh	r2, [r7, #2]
 80194fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194fc:	62da      	str	r2, [r3, #44]	; 0x2c
    cfg->cache_size     = buffers_size;
 80194fe:	887a      	ldrh	r2, [r7, #2]
 8019500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019502:	629a      	str	r2, [r3, #40]	; 0x28
    cfg->read_buffer = lfsReadBuff;
 8019504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019506:	68fa      	ldr	r2, [r7, #12]
 8019508:	631a      	str	r2, [r3, #48]	; 0x30
    cfg->prog_buffer = lfsWriteBuff;
 801950a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801950c:	68ba      	ldr	r2, [r7, #8]
 801950e:	635a      	str	r2, [r3, #52]	; 0x34
 //   cfg.file_buffer = lfsReadBuff;
    cfg->lookahead_buffer = lfslookaheadBuff;
 8019510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019512:	687a      	ldr	r2, [r7, #4]
 8019514:	639a      	str	r2, [r3, #56]	; 0x38

    cfg->read   = block_device_read;
 8019516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019518:	4a11      	ldr	r2, [pc, #68]	; (8019560 <io_fs_init+0xa0>)
 801951a:	605a      	str	r2, [r3, #4]
    cfg->prog   = block_device_prog;
 801951c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801951e:	4a11      	ldr	r2, [pc, #68]	; (8019564 <io_fs_init+0xa4>)
 8019520:	609a      	str	r2, [r3, #8]
    cfg->erase  = block_device_erase;
 8019522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019524:	4a10      	ldr	r2, [pc, #64]	; (8019568 <io_fs_init+0xa8>)
 8019526:	60da      	str	r2, [r3, #12]
    cfg->sync   = block_device_sync;
 8019528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801952a:	4a10      	ldr	r2, [pc, #64]	; (801956c <io_fs_init+0xac>)
 801952c:	611a      	str	r2, [r3, #16]
#ifdef LFS_THREADSAFE
	cfg.lock 	= lfs_lock;
	cfg.unlock	= lfs_unlock;
#endif

    cfg->block_cycles 	= FLASH_BLOCK_CYCLES;
 801952e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019530:	f242 7210 	movw	r2, #10000	; 0x2710
 8019534:	625a      	str	r2, [r3, #36]	; 0x24
    cfg->name_max  		= LFS_NAME_MAX;
 8019536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019538:	22ff      	movs	r2, #255	; 0xff
 801953a:	63da      	str	r2, [r3, #60]	; 0x3c
    cfg->file_max		= LFS_FILE_MAX;
 801953c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801953e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8019542:	641a      	str	r2, [r3, #64]	; 0x40
    cfg->attr_max		= LFS_ATTR_MAX;
 8019544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019546:	f240 32fe 	movw	r2, #1022	; 0x3fe
 801954a:	645a      	str	r2, [r3, #68]	; 0x44
    cfg->metadata_max	= flash_info.erase_size;
 801954c:	8b3b      	ldrh	r3, [r7, #24]
 801954e:	461a      	mov	r2, r3
 8019550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019552:	649a      	str	r2, [r3, #72]	; 0x48

    return 0;
 8019554:	2300      	movs	r3, #0
}
 8019556:	4618      	mov	r0, r3
 8019558:	3720      	adds	r7, #32
 801955a:	46bd      	mov	sp, r7
 801955c:	bd80      	pop	{r7, pc}
 801955e:	bf00      	nop
 8019560:	08019571 	.word	0x08019571
 8019564:	0801960d 	.word	0x0801960d
 8019568:	080195c5 	.word	0x080195c5
 801956c:	08019661 	.word	0x08019661

08019570 <block_device_read>:

int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 8019570:	b580      	push	{r7, lr}
 8019572:	b084      	sub	sp, #16
 8019574:	af00      	add	r7, sp, #0
 8019576:	60f8      	str	r0, [r7, #12]
 8019578:	60b9      	str	r1, [r7, #8]
 801957a:	607a      	str	r2, [r7, #4]
 801957c:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 801957e:	68fb      	ldr	r3, [r7, #12]
 8019580:	6a1b      	ldr	r3, [r3, #32]
 8019582:	68ba      	ldr	r2, [r7, #8]
 8019584:	429a      	cmp	r2, r3
 8019586:	d305      	bcc.n	8019594 <block_device_read+0x24>
 8019588:	4b0b      	ldr	r3, [pc, #44]	; (80195b8 <block_device_read+0x48>)
 801958a:	4a0c      	ldr	r2, [pc, #48]	; (80195bc <block_device_read+0x4c>)
 801958c:	2148      	movs	r1, #72	; 0x48
 801958e:	480c      	ldr	r0, [pc, #48]	; (80195c0 <block_device_read+0x50>)
 8019590:	f001 fbee 	bl	801ad70 <__assert_func>
#endif
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 8019594:	68fb      	ldr	r3, [r7, #12]
 8019596:	69db      	ldr	r3, [r3, #28]
 8019598:	68ba      	ldr	r2, [r7, #8]
 801959a:	fb03 f202 	mul.w	r2, r3, r2
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	4413      	add	r3, r2
 80195a2:	69ba      	ldr	r2, [r7, #24]
 80195a4:	b292      	uxth	r2, r2
 80195a6:	4619      	mov	r1, r3
 80195a8:	6838      	ldr	r0, [r7, #0]
 80195aa:	f7eb f9b3 	bl	8004914 <sFLASH_ReadBuffer>
	return 0;
 80195ae:	2300      	movs	r3, #0
}
 80195b0:	4618      	mov	r0, r3
 80195b2:	3710      	adds	r7, #16
 80195b4:	46bd      	mov	sp, r7
 80195b6:	bd80      	pop	{r7, pc}
 80195b8:	08022468 	.word	0x08022468
 80195bc:	08022ea0 	.word	0x08022ea0
 80195c0:	08022480 	.word	0x08022480

080195c4 <block_device_erase>:

int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 80195c4:	b580      	push	{r7, lr}
 80195c6:	b082      	sub	sp, #8
 80195c8:	af00      	add	r7, sp, #0
 80195ca:	6078      	str	r0, [r7, #4]
 80195cc:	6039      	str	r1, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	6a1b      	ldr	r3, [r3, #32]
 80195d2:	683a      	ldr	r2, [r7, #0]
 80195d4:	429a      	cmp	r2, r3
 80195d6:	d305      	bcc.n	80195e4 <block_device_erase+0x20>
 80195d8:	4b09      	ldr	r3, [pc, #36]	; (8019600 <block_device_erase+0x3c>)
 80195da:	4a0a      	ldr	r2, [pc, #40]	; (8019604 <block_device_erase+0x40>)
 80195dc:	2150      	movs	r1, #80	; 0x50
 80195de:	480a      	ldr	r0, [pc, #40]	; (8019608 <block_device_erase+0x44>)
 80195e0:	f001 fbc6 	bl	801ad70 <__assert_func>
#endif
	sFLASH_EraseSector(block * (c -> block_size));
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	69db      	ldr	r3, [r3, #28]
 80195e8:	683a      	ldr	r2, [r7, #0]
 80195ea:	fb02 f303 	mul.w	r3, r2, r3
 80195ee:	4618      	mov	r0, r3
 80195f0:	f7eb f88e 	bl	8004710 <sFLASH_EraseSector>
	return 0;
 80195f4:	2300      	movs	r3, #0
}
 80195f6:	4618      	mov	r0, r3
 80195f8:	3708      	adds	r7, #8
 80195fa:	46bd      	mov	sp, r7
 80195fc:	bd80      	pop	{r7, pc}
 80195fe:	bf00      	nop
 8019600:	08022468 	.word	0x08022468
 8019604:	08022eb4 	.word	0x08022eb4
 8019608:	08022480 	.word	0x08022480

0801960c <block_device_prog>:

int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 801960c:	b580      	push	{r7, lr}
 801960e:	b084      	sub	sp, #16
 8019610:	af00      	add	r7, sp, #0
 8019612:	60f8      	str	r0, [r7, #12]
 8019614:	60b9      	str	r1, [r7, #8]
 8019616:	607a      	str	r2, [r7, #4]
 8019618:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 801961a:	68fb      	ldr	r3, [r7, #12]
 801961c:	6a1b      	ldr	r3, [r3, #32]
 801961e:	68ba      	ldr	r2, [r7, #8]
 8019620:	429a      	cmp	r2, r3
 8019622:	d305      	bcc.n	8019630 <block_device_prog+0x24>
 8019624:	4b0b      	ldr	r3, [pc, #44]	; (8019654 <block_device_prog+0x48>)
 8019626:	4a0c      	ldr	r2, [pc, #48]	; (8019658 <block_device_prog+0x4c>)
 8019628:	2158      	movs	r1, #88	; 0x58
 801962a:	480c      	ldr	r0, [pc, #48]	; (801965c <block_device_prog+0x50>)
 801962c:	f001 fba0 	bl	801ad70 <__assert_func>
#endif
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 8019630:	68fb      	ldr	r3, [r7, #12]
 8019632:	69db      	ldr	r3, [r3, #28]
 8019634:	68ba      	ldr	r2, [r7, #8]
 8019636:	fb03 f202 	mul.w	r2, r3, r2
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	4413      	add	r3, r2
 801963e:	69ba      	ldr	r2, [r7, #24]
 8019640:	b292      	uxth	r2, r2
 8019642:	4619      	mov	r1, r3
 8019644:	6838      	ldr	r0, [r7, #0]
 8019646:	f7eb f8bc 	bl	80047c2 <sFLASH_WriteBuffer>
	return 0;
 801964a:	2300      	movs	r3, #0
}
 801964c:	4618      	mov	r0, r3
 801964e:	3710      	adds	r7, #16
 8019650:	46bd      	mov	sp, r7
 8019652:	bd80      	pop	{r7, pc}
 8019654:	08022468 	.word	0x08022468
 8019658:	08022ec8 	.word	0x08022ec8
 801965c:	08022480 	.word	0x08022480

08019660 <block_device_sync>:

int block_device_sync(const struct lfs_config *c){
 8019660:	b480      	push	{r7}
 8019662:	b083      	sub	sp, #12
 8019664:	af00      	add	r7, sp, #0
 8019666:	6078      	str	r0, [r7, #4]
	return 0;
 8019668:	2300      	movs	r3, #0
}
 801966a:	4618      	mov	r0, r3
 801966c:	370c      	adds	r7, #12
 801966e:	46bd      	mov	sp, r7
 8019670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019674:	4770      	bx	lr
	...

08019678 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8019678:	b480      	push	{r7}
 801967a:	b087      	sub	sp, #28
 801967c:	af00      	add	r7, sp, #0
 801967e:	60f8      	str	r0, [r7, #12]
 8019680:	60b9      	str	r1, [r7, #8]
 8019682:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8019684:	68bb      	ldr	r3, [r7, #8]
 8019686:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8019688:	2300      	movs	r3, #0
 801968a:	617b      	str	r3, [r7, #20]
 801968c:	e024      	b.n	80196d8 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 801968e:	68fb      	ldr	r3, [r7, #12]
 8019690:	091a      	lsrs	r2, r3, #4
 8019692:	6939      	ldr	r1, [r7, #16]
 8019694:	697b      	ldr	r3, [r7, #20]
 8019696:	440b      	add	r3, r1
 8019698:	781b      	ldrb	r3, [r3, #0]
 801969a:	4619      	mov	r1, r3
 801969c:	68fb      	ldr	r3, [r7, #12]
 801969e:	404b      	eors	r3, r1
 80196a0:	f003 030f 	and.w	r3, r3, #15
 80196a4:	4912      	ldr	r1, [pc, #72]	; (80196f0 <lfs_crc+0x78>)
 80196a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80196aa:	4053      	eors	r3, r2
 80196ac:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 80196ae:	68fb      	ldr	r3, [r7, #12]
 80196b0:	091a      	lsrs	r2, r3, #4
 80196b2:	6939      	ldr	r1, [r7, #16]
 80196b4:	697b      	ldr	r3, [r7, #20]
 80196b6:	440b      	add	r3, r1
 80196b8:	781b      	ldrb	r3, [r3, #0]
 80196ba:	091b      	lsrs	r3, r3, #4
 80196bc:	b2db      	uxtb	r3, r3
 80196be:	4619      	mov	r1, r3
 80196c0:	68fb      	ldr	r3, [r7, #12]
 80196c2:	404b      	eors	r3, r1
 80196c4:	f003 030f 	and.w	r3, r3, #15
 80196c8:	4909      	ldr	r1, [pc, #36]	; (80196f0 <lfs_crc+0x78>)
 80196ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80196ce:	4053      	eors	r3, r2
 80196d0:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 80196d2:	697b      	ldr	r3, [r7, #20]
 80196d4:	3301      	adds	r3, #1
 80196d6:	617b      	str	r3, [r7, #20]
 80196d8:	697a      	ldr	r2, [r7, #20]
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	429a      	cmp	r2, r3
 80196de:	d3d6      	bcc.n	801968e <lfs_crc+0x16>
    }

    return crc;
 80196e0:	68fb      	ldr	r3, [r7, #12]
}
 80196e2:	4618      	mov	r0, r3
 80196e4:	371c      	adds	r7, #28
 80196e6:	46bd      	mov	sp, r7
 80196e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196ec:	4770      	bx	lr
 80196ee:	bf00      	nop
 80196f0:	08022edc 	.word	0x08022edc

080196f4 <spi_fs_init_mutex>:
//int (* lfs_unlock)(const struct lfs_config *c);

void (* FSMutexGet)		(void);
void (* FSMutexRelease)	(void);

void spi_fs_init_mutex(void (*get_mutex)(void), void (*release_mutex)(void)){
 80196f4:	b480      	push	{r7}
 80196f6:	b083      	sub	sp, #12
 80196f8:	af00      	add	r7, sp, #0
 80196fa:	6078      	str	r0, [r7, #4]
 80196fc:	6039      	str	r1, [r7, #0]

	if (get_mutex) FSMutexGet = get_mutex;
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	2b00      	cmp	r3, #0
 8019702:	d002      	beq.n	801970a <spi_fs_init_mutex+0x16>
 8019704:	4a07      	ldr	r2, [pc, #28]	; (8019724 <spi_fs_init_mutex+0x30>)
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	6013      	str	r3, [r2, #0]
	if (release_mutex) FSMutexRelease = release_mutex;
 801970a:	683b      	ldr	r3, [r7, #0]
 801970c:	2b00      	cmp	r3, #0
 801970e:	d002      	beq.n	8019716 <spi_fs_init_mutex+0x22>
 8019710:	4a05      	ldr	r2, [pc, #20]	; (8019728 <spi_fs_init_mutex+0x34>)
 8019712:	683b      	ldr	r3, [r7, #0]
 8019714:	6013      	str	r3, [r2, #0]

};
 8019716:	bf00      	nop
 8019718:	370c      	adds	r7, #12
 801971a:	46bd      	mov	sp, r7
 801971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019720:	4770      	bx	lr
 8019722:	bf00      	nop
 8019724:	2000d93c 	.word	0x2000d93c
 8019728:	2000d940 	.word	0x2000d940

0801972c <spi_fs_init>:

int spi_fs_init(uint8_t * lfsReadBuff, uint8_t * lfsWriteBuff, uint8_t * lfslookaheadBuff, uint16_t buffers_size){
 801972c:	b590      	push	{r4, r7, lr}
 801972e:	b08b      	sub	sp, #44	; 0x2c
 8019730:	af02      	add	r7, sp, #8
 8019732:	61f8      	str	r0, [r7, #28]
 8019734:	61b9      	str	r1, [r7, #24]
 8019736:	617a      	str	r2, [r7, #20]
 8019738:	827b      	strh	r3, [r7, #18]

	flash_parameters = sFLASH_GetInfo();
 801973a:	4c14      	ldr	r4, [pc, #80]	; (801978c <spi_fs_init+0x60>)
 801973c:	463b      	mov	r3, r7
 801973e:	4618      	mov	r0, r3
 8019740:	f7ea ff40 	bl	80045c4 <sFLASH_GetInfo>
 8019744:	463b      	mov	r3, r7
 8019746:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019748:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (flash_parameters.flash_id == 0x0) return -1;
 801974c:	4b0f      	ldr	r3, [pc, #60]	; (801978c <spi_fs_init+0x60>)
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	2b00      	cmp	r3, #0
 8019752:	d102      	bne.n	801975a <spi_fs_init+0x2e>
 8019754:	f04f 33ff 	mov.w	r3, #4294967295
 8019758:	e013      	b.n	8019782 <spi_fs_init+0x56>

	io_fs_init(lfsReadBuff, lfsWriteBuff, lfslookaheadBuff, buffers_size, &cfg);
 801975a:	8a7b      	ldrh	r3, [r7, #18]
 801975c:	4a0c      	ldr	r2, [pc, #48]	; (8019790 <spi_fs_init+0x64>)
 801975e:	9200      	str	r2, [sp, #0]
 8019760:	697a      	ldr	r2, [r7, #20]
 8019762:	69b9      	ldr	r1, [r7, #24]
 8019764:	69f8      	ldr	r0, [r7, #28]
 8019766:	f7ff feab 	bl	80194c0 <io_fs_init>

	memset(&fileConf, 0, sizeof(struct lfs_file_config));
 801976a:	220c      	movs	r2, #12
 801976c:	2100      	movs	r1, #0
 801976e:	4809      	ldr	r0, [pc, #36]	; (8019794 <spi_fs_init+0x68>)
 8019770:	f002 fc9a 	bl	801c0a8 <memset>
	fileConf.buffer = lfs_file_buf;  						// use the static buffer
 8019774:	4b07      	ldr	r3, [pc, #28]	; (8019794 <spi_fs_init+0x68>)
 8019776:	4a08      	ldr	r2, [pc, #32]	; (8019798 <spi_fs_init+0x6c>)
 8019778:	601a      	str	r2, [r3, #0]
	fileConf.attr_count = 0;
 801977a:	4b06      	ldr	r3, [pc, #24]	; (8019794 <spi_fs_init+0x68>)
 801977c:	2200      	movs	r2, #0
 801977e:	609a      	str	r2, [r3, #8]

	return 0;
 8019780:	2300      	movs	r3, #0
}
 8019782:	4618      	mov	r0, r3
 8019784:	3724      	adds	r7, #36	; 0x24
 8019786:	46bd      	mov	sp, r7
 8019788:	bd90      	pop	{r4, r7, pc}
 801978a:	bf00      	nop
 801978c:	2000d8a0 	.word	0x2000d8a0
 8019790:	2000d854 	.word	0x2000d854
 8019794:	2000d8b0 	.word	0x2000d8b0
 8019798:	2000d47c 	.word	0x2000d47c

0801979c <spi_fs_mount>:

int spi_fs_mount(void){
 801979c:	b580      	push	{r7, lr}
 801979e:	b082      	sub	sp, #8
 80197a0:	af00      	add	r7, sp, #0
	int err;

#ifdef LFS_USE_MUTEX
	FSMutexGet();
 80197a2:	4b0d      	ldr	r3, [pc, #52]	; (80197d8 <spi_fs_mount+0x3c>)
 80197a4:	681b      	ldr	r3, [r3, #0]
 80197a6:	4798      	blx	r3
#endif
	err = lfs_mount(&lfs, &cfg);
 80197a8:	490c      	ldr	r1, [pc, #48]	; (80197dc <spi_fs_mount+0x40>)
 80197aa:	480d      	ldr	r0, [pc, #52]	; (80197e0 <spi_fs_mount+0x44>)
 80197ac:	f7ff fd52 	bl	8019254 <lfs_mount>
 80197b0:	6078      	str	r0, [r7, #4]
	if (err) {
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	d003      	beq.n	80197c0 <spi_fs_mount+0x24>
		fs_mount_flag = 0;
 80197b8:	4b0a      	ldr	r3, [pc, #40]	; (80197e4 <spi_fs_mount+0x48>)
 80197ba:	2200      	movs	r2, #0
 80197bc:	701a      	strb	r2, [r3, #0]
 80197be:	e002      	b.n	80197c6 <spi_fs_mount+0x2a>
	}else{
		fs_mount_flag = 1;
 80197c0:	4b08      	ldr	r3, [pc, #32]	; (80197e4 <spi_fs_mount+0x48>)
 80197c2:	2201      	movs	r2, #1
 80197c4:	701a      	strb	r2, [r3, #0]
	}
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 80197c6:	4b08      	ldr	r3, [pc, #32]	; (80197e8 <spi_fs_mount+0x4c>)
 80197c8:	681b      	ldr	r3, [r3, #0]
 80197ca:	4798      	blx	r3
#endif

	return err;
 80197cc:	687b      	ldr	r3, [r7, #4]
}
 80197ce:	4618      	mov	r0, r3
 80197d0:	3708      	adds	r7, #8
 80197d2:	46bd      	mov	sp, r7
 80197d4:	bd80      	pop	{r7, pc}
 80197d6:	bf00      	nop
 80197d8:	2000d93c 	.word	0x2000d93c
 80197dc:	2000d854 	.word	0x2000d854
 80197e0:	2000d680 	.word	0x2000d680
 80197e4:	2000d67c 	.word	0x2000d67c
 80197e8:	2000d940 	.word	0x2000d940

080197ec <spi_fs_format>:
int spi_fs_mount_status(void){

	return fs_mount_flag;
}

void spi_fs_format(void){
 80197ec:	b580      	push	{r7, lr}
 80197ee:	af00      	add	r7, sp, #0
	lfs_format(&lfs, &cfg);
 80197f0:	4902      	ldr	r1, [pc, #8]	; (80197fc <spi_fs_format+0x10>)
 80197f2:	4803      	ldr	r0, [pc, #12]	; (8019800 <spi_fs_format+0x14>)
 80197f4:	f7ff fd18 	bl	8019228 <lfs_format>
}
 80197f8:	bf00      	nop
 80197fa:	bd80      	pop	{r7, pc}
 80197fc:	2000d854 	.word	0x2000d854
 8019800:	2000d680 	.word	0x2000d680

08019804 <spi_fs_read_file_offset>:
	FSMutexRelease();
#endif
	return err;
}

int spi_fs_read_file_offset(const char *path, void *buffer, uint32_t offset, uint32_t read_size){
 8019804:	b580      	push	{r7, lr}
 8019806:	b088      	sub	sp, #32
 8019808:	af02      	add	r7, sp, #8
 801980a:	60f8      	str	r0, [r7, #12]
 801980c:	60b9      	str	r1, [r7, #8]
 801980e:	607a      	str	r2, [r7, #4]
 8019810:	603b      	str	r3, [r7, #0]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 8019812:	4b19      	ldr	r3, [pc, #100]	; (8019878 <spi_fs_read_file_offset+0x74>)
 8019814:	681b      	ldr	r3, [r3, #0]
 8019816:	4798      	blx	r3
#endif
	err =	lfs_file_opencfg(&lfs, &file, path, LFS_O_RDONLY | LFS_O_CREAT, &fileConf);
 8019818:	4b18      	ldr	r3, [pc, #96]	; (801987c <spi_fs_read_file_offset+0x78>)
 801981a:	9300      	str	r3, [sp, #0]
 801981c:	f240 1301 	movw	r3, #257	; 0x101
 8019820:	68fa      	ldr	r2, [r7, #12]
 8019822:	4917      	ldr	r1, [pc, #92]	; (8019880 <spi_fs_read_file_offset+0x7c>)
 8019824:	4817      	ldr	r0, [pc, #92]	; (8019884 <spi_fs_read_file_offset+0x80>)
 8019826:	f7ff fd43 	bl	80192b0 <lfs_file_opencfg>
 801982a:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 801982c:	697b      	ldr	r3, [r7, #20]
 801982e:	2b00      	cmp	r3, #0
 8019830:	db13      	blt.n	801985a <spi_fs_read_file_offset+0x56>
	err =	lfs_file_seek(&lfs, &file, offset, LFS_SEEK_SET);
 8019832:	687a      	ldr	r2, [r7, #4]
 8019834:	2300      	movs	r3, #0
 8019836:	4912      	ldr	r1, [pc, #72]	; (8019880 <spi_fs_read_file_offset+0x7c>)
 8019838:	4812      	ldr	r0, [pc, #72]	; (8019884 <spi_fs_read_file_offset+0x80>)
 801983a:	f7ff fdfb 	bl	8019434 <lfs_file_seek>
 801983e:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 8019840:	697b      	ldr	r3, [r7, #20]
 8019842:	2b00      	cmp	r3, #0
 8019844:	db0b      	blt.n	801985e <spi_fs_read_file_offset+0x5a>
	err =	lfs_file_read(&lfs, &file, buffer, read_size);
 8019846:	683b      	ldr	r3, [r7, #0]
 8019848:	68ba      	ldr	r2, [r7, #8]
 801984a:	490d      	ldr	r1, [pc, #52]	; (8019880 <spi_fs_read_file_offset+0x7c>)
 801984c:	480d      	ldr	r0, [pc, #52]	; (8019884 <spi_fs_read_file_offset+0x80>)
 801984e:	f7ff fd91 	bl	8019374 <lfs_file_read>
 8019852:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 8019854:	697b      	ldr	r3, [r7, #20]
 8019856:	2b00      	cmp	r3, #0

	func_end:
 8019858:	e002      	b.n	8019860 <spi_fs_read_file_offset+0x5c>
	if (err < 0) goto func_end;
 801985a:	bf00      	nop
 801985c:	e000      	b.n	8019860 <spi_fs_read_file_offset+0x5c>
	if (err < 0) goto func_end;
 801985e:	bf00      	nop
	lfs_file_close(&lfs, &file);
 8019860:	4907      	ldr	r1, [pc, #28]	; (8019880 <spi_fs_read_file_offset+0x7c>)
 8019862:	4808      	ldr	r0, [pc, #32]	; (8019884 <spi_fs_read_file_offset+0x80>)
 8019864:	f7ff fd5a 	bl	801931c <lfs_file_close>
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 8019868:	4b07      	ldr	r3, [pc, #28]	; (8019888 <spi_fs_read_file_offset+0x84>)
 801986a:	681b      	ldr	r3, [r3, #0]
 801986c:	4798      	blx	r3
#endif
	return err;
 801986e:	697b      	ldr	r3, [r7, #20]

}
 8019870:	4618      	mov	r0, r3
 8019872:	3718      	adds	r7, #24
 8019874:	46bd      	mov	sp, r7
 8019876:	bd80      	pop	{r7, pc}
 8019878:	2000d93c 	.word	0x2000d93c
 801987c:	2000d8b0 	.word	0x2000d8b0
 8019880:	2000d6f8 	.word	0x2000d6f8
 8019884:	2000d680 	.word	0x2000d680
 8019888:	2000d940 	.word	0x2000d940

0801988c <spi_fs_over_write_file>:

int spi_fs_over_write_file(const char *path, void *buffer, uint32_t write_size){
 801988c:	b580      	push	{r7, lr}
 801988e:	b088      	sub	sp, #32
 8019890:	af02      	add	r7, sp, #8
 8019892:	60f8      	str	r0, [r7, #12]
 8019894:	60b9      	str	r1, [r7, #8]
 8019896:	607a      	str	r2, [r7, #4]
	int err = 0;
 8019898:	2300      	movs	r3, #0
 801989a:	617b      	str	r3, [r7, #20]
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 801989c:	4b13      	ldr	r3, [pc, #76]	; (80198ec <spi_fs_over_write_file+0x60>)
 801989e:	681b      	ldr	r3, [r3, #0]
 80198a0:	4798      	blx	r3
#endif

	err = lfs_file_opencfg(&lfs, &file, path, LFS_O_RDWR | LFS_O_CREAT | LFS_O_TRUNC, &fileConf);
 80198a2:	4b13      	ldr	r3, [pc, #76]	; (80198f0 <spi_fs_over_write_file+0x64>)
 80198a4:	9300      	str	r3, [sp, #0]
 80198a6:	f240 5303 	movw	r3, #1283	; 0x503
 80198aa:	68fa      	ldr	r2, [r7, #12]
 80198ac:	4911      	ldr	r1, [pc, #68]	; (80198f4 <spi_fs_over_write_file+0x68>)
 80198ae:	4812      	ldr	r0, [pc, #72]	; (80198f8 <spi_fs_over_write_file+0x6c>)
 80198b0:	f7ff fcfe 	bl	80192b0 <lfs_file_opencfg>
 80198b4:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 80198b6:	697b      	ldr	r3, [r7, #20]
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	db09      	blt.n	80198d0 <spi_fs_over_write_file+0x44>
	err = lfs_file_write(&lfs, &file, buffer, write_size);
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	68ba      	ldr	r2, [r7, #8]
 80198c0:	490c      	ldr	r1, [pc, #48]	; (80198f4 <spi_fs_over_write_file+0x68>)
 80198c2:	480d      	ldr	r0, [pc, #52]	; (80198f8 <spi_fs_over_write_file+0x6c>)
 80198c4:	f7ff fd86 	bl	80193d4 <lfs_file_write>
 80198c8:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 80198ca:	697b      	ldr	r3, [r7, #20]
 80198cc:	2b00      	cmp	r3, #0

	func_end:
 80198ce:	e000      	b.n	80198d2 <spi_fs_over_write_file+0x46>
	if (err < 0) goto func_end;
 80198d0:	bf00      	nop
	lfs_file_close(&lfs, &file);
 80198d2:	4908      	ldr	r1, [pc, #32]	; (80198f4 <spi_fs_over_write_file+0x68>)
 80198d4:	4808      	ldr	r0, [pc, #32]	; (80198f8 <spi_fs_over_write_file+0x6c>)
 80198d6:	f7ff fd21 	bl	801931c <lfs_file_close>
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 80198da:	4b08      	ldr	r3, [pc, #32]	; (80198fc <spi_fs_over_write_file+0x70>)
 80198dc:	681b      	ldr	r3, [r3, #0]
 80198de:	4798      	blx	r3
#endif
	return err;
 80198e0:	697b      	ldr	r3, [r7, #20]
}
 80198e2:	4618      	mov	r0, r3
 80198e4:	3718      	adds	r7, #24
 80198e6:	46bd      	mov	sp, r7
 80198e8:	bd80      	pop	{r7, pc}
 80198ea:	bf00      	nop
 80198ec:	2000d93c 	.word	0x2000d93c
 80198f0:	2000d8b0 	.word	0x2000d8b0
 80198f4:	2000d6f8 	.word	0x2000d6f8
 80198f8:	2000d680 	.word	0x2000d680
 80198fc:	2000d940 	.word	0x2000d940

08019900 <spi_fs_file_size>:

int spi_fs_file_size(const char *path){
 8019900:	b580      	push	{r7, lr}
 8019902:	b084      	sub	sp, #16
 8019904:	af00      	add	r7, sp, #0
 8019906:	6078      	str	r0, [r7, #4]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 8019908:	4b0b      	ldr	r3, [pc, #44]	; (8019938 <spi_fs_file_size+0x38>)
 801990a:	681b      	ldr	r3, [r3, #0]
 801990c:	4798      	blx	r3
#endif

	err = lfs_stat(&lfs, path, &file_info);
 801990e:	4a0b      	ldr	r2, [pc, #44]	; (801993c <spi_fs_file_size+0x3c>)
 8019910:	6879      	ldr	r1, [r7, #4]
 8019912:	480b      	ldr	r0, [pc, #44]	; (8019940 <spi_fs_file_size+0x40>)
 8019914:	f7ff fcb4 	bl	8019280 <lfs_stat>
 8019918:	60f8      	str	r0, [r7, #12]
	if (err == 0){
 801991a:	68fb      	ldr	r3, [r7, #12]
 801991c:	2b00      	cmp	r3, #0
 801991e:	d102      	bne.n	8019926 <spi_fs_file_size+0x26>
		err = file_info.size;
 8019920:	4b06      	ldr	r3, [pc, #24]	; (801993c <spi_fs_file_size+0x3c>)
 8019922:	685b      	ldr	r3, [r3, #4]
 8019924:	60fb      	str	r3, [r7, #12]
	}

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 8019926:	4b07      	ldr	r3, [pc, #28]	; (8019944 <spi_fs_file_size+0x44>)
 8019928:	681b      	ldr	r3, [r3, #0]
 801992a:	4798      	blx	r3
#endif
	return err;
 801992c:	68fb      	ldr	r3, [r7, #12]
}
 801992e:	4618      	mov	r0, r3
 8019930:	3710      	adds	r7, #16
 8019932:	46bd      	mov	sp, r7
 8019934:	bd80      	pop	{r7, pc}
 8019936:	bf00      	nop
 8019938:	2000d93c 	.word	0x2000d93c
 801993c:	2000d74c 	.word	0x2000d74c
 8019940:	2000d680 	.word	0x2000d680
 8019944:	2000d940 	.word	0x2000d940

08019948 <spi_fs_write_file_to_end>:

int spi_fs_write_file_to_end(const char *path, void *buffer, uint32_t write_size){
 8019948:	b580      	push	{r7, lr}
 801994a:	b088      	sub	sp, #32
 801994c:	af02      	add	r7, sp, #8
 801994e:	60f8      	str	r0, [r7, #12]
 8019950:	60b9      	str	r1, [r7, #8]
 8019952:	607a      	str	r2, [r7, #4]
	int err = 0;
 8019954:	2300      	movs	r3, #0
 8019956:	617b      	str	r3, [r7, #20]
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 8019958:	4b13      	ldr	r3, [pc, #76]	; (80199a8 <spi_fs_write_file_to_end+0x60>)
 801995a:	681b      	ldr	r3, [r3, #0]
 801995c:	4798      	blx	r3
#endif

	err = lfs_file_opencfg(&lfs, &file, path, LFS_O_RDWR | LFS_O_CREAT | LFS_O_APPEND, &fileConf);
 801995e:	4b13      	ldr	r3, [pc, #76]	; (80199ac <spi_fs_write_file_to_end+0x64>)
 8019960:	9300      	str	r3, [sp, #0]
 8019962:	f640 1303 	movw	r3, #2307	; 0x903
 8019966:	68fa      	ldr	r2, [r7, #12]
 8019968:	4911      	ldr	r1, [pc, #68]	; (80199b0 <spi_fs_write_file_to_end+0x68>)
 801996a:	4812      	ldr	r0, [pc, #72]	; (80199b4 <spi_fs_write_file_to_end+0x6c>)
 801996c:	f7ff fca0 	bl	80192b0 <lfs_file_opencfg>
 8019970:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 8019972:	697b      	ldr	r3, [r7, #20]
 8019974:	2b00      	cmp	r3, #0
 8019976:	db09      	blt.n	801998c <spi_fs_write_file_to_end+0x44>
	err = lfs_file_write(&lfs, &file, buffer, write_size);
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	68ba      	ldr	r2, [r7, #8]
 801997c:	490c      	ldr	r1, [pc, #48]	; (80199b0 <spi_fs_write_file_to_end+0x68>)
 801997e:	480d      	ldr	r0, [pc, #52]	; (80199b4 <spi_fs_write_file_to_end+0x6c>)
 8019980:	f7ff fd28 	bl	80193d4 <lfs_file_write>
 8019984:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 8019986:	697b      	ldr	r3, [r7, #20]
 8019988:	2b00      	cmp	r3, #0

	func_end:
 801998a:	e000      	b.n	801998e <spi_fs_write_file_to_end+0x46>
	if (err < 0) goto func_end;
 801998c:	bf00      	nop
	lfs_file_close(&lfs, &file);
 801998e:	4908      	ldr	r1, [pc, #32]	; (80199b0 <spi_fs_write_file_to_end+0x68>)
 8019990:	4808      	ldr	r0, [pc, #32]	; (80199b4 <spi_fs_write_file_to_end+0x6c>)
 8019992:	f7ff fcc3 	bl	801931c <lfs_file_close>
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 8019996:	4b08      	ldr	r3, [pc, #32]	; (80199b8 <spi_fs_write_file_to_end+0x70>)
 8019998:	681b      	ldr	r3, [r3, #0]
 801999a:	4798      	blx	r3
#endif
	return err;
 801999c:	697b      	ldr	r3, [r7, #20]
}
 801999e:	4618      	mov	r0, r3
 80199a0:	3718      	adds	r7, #24
 80199a2:	46bd      	mov	sp, r7
 80199a4:	bd80      	pop	{r7, pc}
 80199a6:	bf00      	nop
 80199a8:	2000d93c 	.word	0x2000d93c
 80199ac:	2000d8b0 	.word	0x2000d8b0
 80199b0:	2000d6f8 	.word	0x2000d6f8
 80199b4:	2000d680 	.word	0x2000d680
 80199b8:	2000d940 	.word	0x2000d940

080199bc <spi_fs_serch_file_in_dir>:

int spi_fs_serch_file_in_dir(const char * dir_path, const char * filename){
 80199bc:	b580      	push	{r7, lr}
 80199be:	b084      	sub	sp, #16
 80199c0:	af00      	add	r7, sp, #0
 80199c2:	6078      	str	r0, [r7, #4]
 80199c4:	6039      	str	r1, [r7, #0]


	int err;
	memset(temp_buf, 0x0, PATH_BUF_SIZE);
 80199c6:	2280      	movs	r2, #128	; 0x80
 80199c8:	2100      	movs	r1, #0
 80199ca:	480a      	ldr	r0, [pc, #40]	; (80199f4 <spi_fs_serch_file_in_dir+0x38>)
 80199cc:	f002 fb6c 	bl	801c0a8 <memset>
	strcpy((char *)temp_buf, dir_path);
 80199d0:	6879      	ldr	r1, [r7, #4]
 80199d2:	4808      	ldr	r0, [pc, #32]	; (80199f4 <spi_fs_serch_file_in_dir+0x38>)
 80199d4:	f002 fd35 	bl	801c442 <strcpy>
	strcat((char *)temp_buf, filename);
 80199d8:	6839      	ldr	r1, [r7, #0]
 80199da:	4806      	ldr	r0, [pc, #24]	; (80199f4 <spi_fs_serch_file_in_dir+0x38>)
 80199dc:	f002 fb6c 	bl	801c0b8 <strcat>
	err = spi_fs_file_size((const char *)temp_buf);
 80199e0:	4804      	ldr	r0, [pc, #16]	; (80199f4 <spi_fs_serch_file_in_dir+0x38>)
 80199e2:	f7ff ff8d 	bl	8019900 <spi_fs_file_size>
 80199e6:	60f8      	str	r0, [r7, #12]
	return err;
 80199e8:	68fb      	ldr	r3, [r7, #12]

}
 80199ea:	4618      	mov	r0, r3
 80199ec:	3710      	adds	r7, #16
 80199ee:	46bd      	mov	sp, r7
 80199f0:	bd80      	pop	{r7, pc}
 80199f2:	bf00      	nop
 80199f4:	2000d8bc 	.word	0x2000d8bc

080199f8 <spi_fs_mkdir>:

int spi_fs_mkdir(const char *path){
 80199f8:	b580      	push	{r7, lr}
 80199fa:	b084      	sub	sp, #16
 80199fc:	af00      	add	r7, sp, #0
 80199fe:	6078      	str	r0, [r7, #4]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 8019a00:	4b07      	ldr	r3, [pc, #28]	; (8019a20 <spi_fs_mkdir+0x28>)
 8019a02:	681b      	ldr	r3, [r3, #0]
 8019a04:	4798      	blx	r3
#endif

	err = lfs_mkdir(&lfs, path);
 8019a06:	6879      	ldr	r1, [r7, #4]
 8019a08:	4806      	ldr	r0, [pc, #24]	; (8019a24 <spi_fs_mkdir+0x2c>)
 8019a0a:	f7ff fd43 	bl	8019494 <lfs_mkdir>
 8019a0e:	60f8      	str	r0, [r7, #12]

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 8019a10:	4b05      	ldr	r3, [pc, #20]	; (8019a28 <spi_fs_mkdir+0x30>)
 8019a12:	681b      	ldr	r3, [r3, #0]
 8019a14:	4798      	blx	r3
#endif

	return err;
 8019a16:	68fb      	ldr	r3, [r7, #12]
}
 8019a18:	4618      	mov	r0, r3
 8019a1a:	3710      	adds	r7, #16
 8019a1c:	46bd      	mov	sp, r7
 8019a1e:	bd80      	pop	{r7, pc}
 8019a20:	2000d93c 	.word	0x2000d93c
 8019a24:	2000d680 	.word	0x2000d680
 8019a28:	2000d940 	.word	0x2000d940

08019a2c <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 8019a2c:	b480      	push	{r7}
 8019a2e:	b08b      	sub	sp, #44	; 0x2c
 8019a30:	af00      	add	r7, sp, #0
 8019a32:	60f8      	str	r0, [r7, #12]
 8019a34:	60b9      	str	r1, [r7, #8]
 8019a36:	607a      	str	r2, [r7, #4]
 8019a38:	603b      	str	r3, [r7, #0]
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 8019a3a:	2300      	movs	r3, #0
 8019a3c:	61fb      	str	r3, [r7, #28]
 8019a3e:	2300      	movs	r3, #0
 8019a40:	623b      	str	r3, [r7, #32]
 8019a42:	6a3b      	ldr	r3, [r7, #32]
 8019a44:	627b      	str	r3, [r7, #36]	; 0x24
 8019a46:	e06f      	b.n	8019b28 <mbedtls_base64_decode+0xfc>
    {
        /* Skip spaces before checking for EOL */
        x = 0;
 8019a48:	2300      	movs	r3, #0
 8019a4a:	61bb      	str	r3, [r7, #24]
        while( i < slen && src[i] == ' ' )
 8019a4c:	e005      	b.n	8019a5a <mbedtls_base64_decode+0x2e>
        {
            ++i;
 8019a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a50:	3301      	adds	r3, #1
 8019a52:	627b      	str	r3, [r7, #36]	; 0x24
            ++x;
 8019a54:	69bb      	ldr	r3, [r7, #24]
 8019a56:	3301      	adds	r3, #1
 8019a58:	61bb      	str	r3, [r7, #24]
        while( i < slen && src[i] == ' ' )
 8019a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a5e:	429a      	cmp	r2, r3
 8019a60:	d205      	bcs.n	8019a6e <mbedtls_base64_decode+0x42>
 8019a62:	683a      	ldr	r2, [r7, #0]
 8019a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a66:	4413      	add	r3, r2
 8019a68:	781b      	ldrb	r3, [r3, #0]
 8019a6a:	2b20      	cmp	r3, #32
 8019a6c:	d0ef      	beq.n	8019a4e <mbedtls_base64_decode+0x22>
        }

        /* Spaces at end of buffer are OK */
        if( i == slen )
 8019a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a72:	429a      	cmp	r2, r3
 8019a74:	d05d      	beq.n	8019b32 <mbedtls_base64_decode+0x106>
            break;

        if( ( slen - i ) >= 2 &&
 8019a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a7a:	1ad3      	subs	r3, r2, r3
 8019a7c:	2b01      	cmp	r3, #1
 8019a7e:	d90c      	bls.n	8019a9a <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
 8019a80:	683a      	ldr	r2, [r7, #0]
 8019a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a84:	4413      	add	r3, r2
 8019a86:	781b      	ldrb	r3, [r3, #0]
        if( ( slen - i ) >= 2 &&
 8019a88:	2b0d      	cmp	r3, #13
 8019a8a:	d106      	bne.n	8019a9a <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
 8019a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a8e:	3301      	adds	r3, #1
 8019a90:	683a      	ldr	r2, [r7, #0]
 8019a92:	4413      	add	r3, r2
 8019a94:	781b      	ldrb	r3, [r3, #0]
 8019a96:	2b0a      	cmp	r3, #10
 8019a98:	d040      	beq.n	8019b1c <mbedtls_base64_decode+0xf0>
            continue;

        if( src[i] == '\n' )
 8019a9a:	683a      	ldr	r2, [r7, #0]
 8019a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a9e:	4413      	add	r3, r2
 8019aa0:	781b      	ldrb	r3, [r3, #0]
 8019aa2:	2b0a      	cmp	r3, #10
 8019aa4:	d03c      	beq.n	8019b20 <mbedtls_base64_decode+0xf4>
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
 8019aa6:	69bb      	ldr	r3, [r7, #24]
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	d002      	beq.n	8019ab2 <mbedtls_base64_decode+0x86>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 8019aac:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 8019ab0:	e0d0      	b.n	8019c54 <mbedtls_base64_decode+0x228>

        if( src[i] == '=' && ++j > 2 )
 8019ab2:	683a      	ldr	r2, [r7, #0]
 8019ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ab6:	4413      	add	r3, r2
 8019ab8:	781b      	ldrb	r3, [r3, #0]
 8019aba:	2b3d      	cmp	r3, #61	; 0x3d
 8019abc:	d108      	bne.n	8019ad0 <mbedtls_base64_decode+0xa4>
 8019abe:	69fb      	ldr	r3, [r7, #28]
 8019ac0:	3301      	adds	r3, #1
 8019ac2:	61fb      	str	r3, [r7, #28]
 8019ac4:	69fb      	ldr	r3, [r7, #28]
 8019ac6:	2b02      	cmp	r3, #2
 8019ac8:	d902      	bls.n	8019ad0 <mbedtls_base64_decode+0xa4>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 8019aca:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 8019ace:	e0c1      	b.n	8019c54 <mbedtls_base64_decode+0x228>

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 8019ad0:	683a      	ldr	r2, [r7, #0]
 8019ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ad4:	4413      	add	r3, r2
 8019ad6:	781b      	ldrb	r3, [r3, #0]
 8019ad8:	b25b      	sxtb	r3, r3
 8019ada:	2b00      	cmp	r3, #0
 8019adc:	db08      	blt.n	8019af0 <mbedtls_base64_decode+0xc4>
 8019ade:	683a      	ldr	r2, [r7, #0]
 8019ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ae2:	4413      	add	r3, r2
 8019ae4:	781b      	ldrb	r3, [r3, #0]
 8019ae6:	461a      	mov	r2, r3
 8019ae8:	4b5d      	ldr	r3, [pc, #372]	; (8019c60 <mbedtls_base64_decode+0x234>)
 8019aea:	5c9b      	ldrb	r3, [r3, r2]
 8019aec:	2b7f      	cmp	r3, #127	; 0x7f
 8019aee:	d102      	bne.n	8019af6 <mbedtls_base64_decode+0xca>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 8019af0:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 8019af4:	e0ae      	b.n	8019c54 <mbedtls_base64_decode+0x228>

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 8019af6:	683a      	ldr	r2, [r7, #0]
 8019af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019afa:	4413      	add	r3, r2
 8019afc:	781b      	ldrb	r3, [r3, #0]
 8019afe:	461a      	mov	r2, r3
 8019b00:	4b57      	ldr	r3, [pc, #348]	; (8019c60 <mbedtls_base64_decode+0x234>)
 8019b02:	5c9b      	ldrb	r3, [r3, r2]
 8019b04:	2b3f      	cmp	r3, #63	; 0x3f
 8019b06:	d805      	bhi.n	8019b14 <mbedtls_base64_decode+0xe8>
 8019b08:	69fb      	ldr	r3, [r7, #28]
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	d002      	beq.n	8019b14 <mbedtls_base64_decode+0xe8>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 8019b0e:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 8019b12:	e09f      	b.n	8019c54 <mbedtls_base64_decode+0x228>

        n++;
 8019b14:	6a3b      	ldr	r3, [r7, #32]
 8019b16:	3301      	adds	r3, #1
 8019b18:	623b      	str	r3, [r7, #32]
 8019b1a:	e002      	b.n	8019b22 <mbedtls_base64_decode+0xf6>
            continue;
 8019b1c:	bf00      	nop
 8019b1e:	e000      	b.n	8019b22 <mbedtls_base64_decode+0xf6>
            continue;
 8019b20:	bf00      	nop
    for( i = n = j = 0; i < slen; i++ )
 8019b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b24:	3301      	adds	r3, #1
 8019b26:	627b      	str	r3, [r7, #36]	; 0x24
 8019b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b2c:	429a      	cmp	r2, r3
 8019b2e:	d38b      	bcc.n	8019a48 <mbedtls_base64_decode+0x1c>
 8019b30:	e000      	b.n	8019b34 <mbedtls_base64_decode+0x108>
            break;
 8019b32:	bf00      	nop
    }

    if( n == 0 )
 8019b34:	6a3b      	ldr	r3, [r7, #32]
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d104      	bne.n	8019b44 <mbedtls_base64_decode+0x118>
    {
        *olen = 0;
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	2200      	movs	r2, #0
 8019b3e:	601a      	str	r2, [r3, #0]
        return( 0 );
 8019b40:	2300      	movs	r3, #0
 8019b42:	e087      	b.n	8019c54 <mbedtls_base64_decode+0x228>

    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
 8019b44:	6a3b      	ldr	r3, [r7, #32]
 8019b46:	08da      	lsrs	r2, r3, #3
 8019b48:	4613      	mov	r3, r2
 8019b4a:	005b      	lsls	r3, r3, #1
 8019b4c:	4413      	add	r3, r2
 8019b4e:	005b      	lsls	r3, r3, #1
 8019b50:	4619      	mov	r1, r3
 8019b52:	6a3b      	ldr	r3, [r7, #32]
 8019b54:	f003 0207 	and.w	r2, r3, #7
 8019b58:	4613      	mov	r3, r2
 8019b5a:	005b      	lsls	r3, r3, #1
 8019b5c:	4413      	add	r3, r2
 8019b5e:	005b      	lsls	r3, r3, #1
 8019b60:	3307      	adds	r3, #7
 8019b62:	08db      	lsrs	r3, r3, #3
 8019b64:	440b      	add	r3, r1
 8019b66:	623b      	str	r3, [r7, #32]
    n -= j;
 8019b68:	6a3a      	ldr	r2, [r7, #32]
 8019b6a:	69fb      	ldr	r3, [r7, #28]
 8019b6c:	1ad3      	subs	r3, r2, r3
 8019b6e:	623b      	str	r3, [r7, #32]

    if( dst == NULL || dlen < n )
 8019b70:	68fb      	ldr	r3, [r7, #12]
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d003      	beq.n	8019b7e <mbedtls_base64_decode+0x152>
 8019b76:	68ba      	ldr	r2, [r7, #8]
 8019b78:	6a3b      	ldr	r3, [r7, #32]
 8019b7a:	429a      	cmp	r2, r3
 8019b7c:	d205      	bcs.n	8019b8a <mbedtls_base64_decode+0x15e>
    {
        *olen = n;
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	6a3a      	ldr	r2, [r7, #32]
 8019b82:	601a      	str	r2, [r3, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 8019b84:	f06f 0329 	mvn.w	r3, #41	; 0x29
 8019b88:	e064      	b.n	8019c54 <mbedtls_base64_decode+0x228>
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 8019b8a:	2303      	movs	r3, #3
 8019b8c:	61fb      	str	r3, [r7, #28]
 8019b8e:	2300      	movs	r3, #0
 8019b90:	61bb      	str	r3, [r7, #24]
 8019b92:	2300      	movs	r3, #0
 8019b94:	623b      	str	r3, [r7, #32]
 8019b96:	68fb      	ldr	r3, [r7, #12]
 8019b98:	617b      	str	r3, [r7, #20]
 8019b9a:	e051      	b.n	8019c40 <mbedtls_base64_decode+0x214>
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 8019b9c:	683b      	ldr	r3, [r7, #0]
 8019b9e:	781b      	ldrb	r3, [r3, #0]
 8019ba0:	2b0d      	cmp	r3, #13
 8019ba2:	d046      	beq.n	8019c32 <mbedtls_base64_decode+0x206>
 8019ba4:	683b      	ldr	r3, [r7, #0]
 8019ba6:	781b      	ldrb	r3, [r3, #0]
 8019ba8:	2b0a      	cmp	r3, #10
 8019baa:	d042      	beq.n	8019c32 <mbedtls_base64_decode+0x206>
 8019bac:	683b      	ldr	r3, [r7, #0]
 8019bae:	781b      	ldrb	r3, [r3, #0]
 8019bb0:	2b20      	cmp	r3, #32
 8019bb2:	d03e      	beq.n	8019c32 <mbedtls_base64_decode+0x206>
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 8019bb4:	683b      	ldr	r3, [r7, #0]
 8019bb6:	781b      	ldrb	r3, [r3, #0]
 8019bb8:	461a      	mov	r2, r3
 8019bba:	4b29      	ldr	r3, [pc, #164]	; (8019c60 <mbedtls_base64_decode+0x234>)
 8019bbc:	5c9b      	ldrb	r3, [r3, r2]
 8019bbe:	2b40      	cmp	r3, #64	; 0x40
 8019bc0:	bf0c      	ite	eq
 8019bc2:	2301      	moveq	r3, #1
 8019bc4:	2300      	movne	r3, #0
 8019bc6:	b2db      	uxtb	r3, r3
 8019bc8:	461a      	mov	r2, r3
 8019bca:	69fb      	ldr	r3, [r7, #28]
 8019bcc:	1a9b      	subs	r3, r3, r2
 8019bce:	61fb      	str	r3, [r7, #28]
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 8019bd0:	69bb      	ldr	r3, [r7, #24]
 8019bd2:	019a      	lsls	r2, r3, #6
 8019bd4:	683b      	ldr	r3, [r7, #0]
 8019bd6:	781b      	ldrb	r3, [r3, #0]
 8019bd8:	4619      	mov	r1, r3
 8019bda:	4b21      	ldr	r3, [pc, #132]	; (8019c60 <mbedtls_base64_decode+0x234>)
 8019bdc:	5c5b      	ldrb	r3, [r3, r1]
 8019bde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019be2:	4313      	orrs	r3, r2
 8019be4:	61bb      	str	r3, [r7, #24]

        if( ++n == 4 )
 8019be6:	6a3b      	ldr	r3, [r7, #32]
 8019be8:	3301      	adds	r3, #1
 8019bea:	623b      	str	r3, [r7, #32]
 8019bec:	6a3b      	ldr	r3, [r7, #32]
 8019bee:	2b04      	cmp	r3, #4
 8019bf0:	d120      	bne.n	8019c34 <mbedtls_base64_decode+0x208>
        {
            n = 0;
 8019bf2:	2300      	movs	r3, #0
 8019bf4:	623b      	str	r3, [r7, #32]
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 8019bf6:	69fb      	ldr	r3, [r7, #28]
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d006      	beq.n	8019c0a <mbedtls_base64_decode+0x1de>
 8019bfc:	69bb      	ldr	r3, [r7, #24]
 8019bfe:	0c19      	lsrs	r1, r3, #16
 8019c00:	697b      	ldr	r3, [r7, #20]
 8019c02:	1c5a      	adds	r2, r3, #1
 8019c04:	617a      	str	r2, [r7, #20]
 8019c06:	b2ca      	uxtb	r2, r1
 8019c08:	701a      	strb	r2, [r3, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8019c0a:	69fb      	ldr	r3, [r7, #28]
 8019c0c:	2b01      	cmp	r3, #1
 8019c0e:	d906      	bls.n	8019c1e <mbedtls_base64_decode+0x1f2>
 8019c10:	69bb      	ldr	r3, [r7, #24]
 8019c12:	0a19      	lsrs	r1, r3, #8
 8019c14:	697b      	ldr	r3, [r7, #20]
 8019c16:	1c5a      	adds	r2, r3, #1
 8019c18:	617a      	str	r2, [r7, #20]
 8019c1a:	b2ca      	uxtb	r2, r1
 8019c1c:	701a      	strb	r2, [r3, #0]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 8019c1e:	69fb      	ldr	r3, [r7, #28]
 8019c20:	2b02      	cmp	r3, #2
 8019c22:	d907      	bls.n	8019c34 <mbedtls_base64_decode+0x208>
 8019c24:	697b      	ldr	r3, [r7, #20]
 8019c26:	1c5a      	adds	r2, r3, #1
 8019c28:	617a      	str	r2, [r7, #20]
 8019c2a:	69ba      	ldr	r2, [r7, #24]
 8019c2c:	b2d2      	uxtb	r2, r2
 8019c2e:	701a      	strb	r2, [r3, #0]
 8019c30:	e000      	b.n	8019c34 <mbedtls_base64_decode+0x208>
            continue;
 8019c32:	bf00      	nop
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 8019c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c36:	3b01      	subs	r3, #1
 8019c38:	627b      	str	r3, [r7, #36]	; 0x24
 8019c3a:	683b      	ldr	r3, [r7, #0]
 8019c3c:	3301      	adds	r3, #1
 8019c3e:	603b      	str	r3, [r7, #0]
 8019c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d1aa      	bne.n	8019b9c <mbedtls_base64_decode+0x170>
        }
    }

    *olen = p - dst;
 8019c46:	697a      	ldr	r2, [r7, #20]
 8019c48:	68fb      	ldr	r3, [r7, #12]
 8019c4a:	1ad3      	subs	r3, r2, r3
 8019c4c:	461a      	mov	r2, r3
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	601a      	str	r2, [r3, #0]

    return( 0 );
 8019c52:	2300      	movs	r3, #0
}
 8019c54:	4618      	mov	r0, r3
 8019c56:	372c      	adds	r7, #44	; 0x2c
 8019c58:	46bd      	mov	sp, r7
 8019c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c5e:	4770      	bx	lr
 8019c60:	08022f1c 	.word	0x08022f1c

08019c64 <mbedtls_md5_init>:
    (b)[(i) + 3] = (unsigned char) ( ( (n) >> 24 ) & 0xFF );    \
}
#endif

void mbedtls_md5_init( mbedtls_md5_context *ctx )
{
 8019c64:	b580      	push	{r7, lr}
 8019c66:	b082      	sub	sp, #8
 8019c68:	af00      	add	r7, sp, #0
 8019c6a:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_md5_context ) );
 8019c6c:	2258      	movs	r2, #88	; 0x58
 8019c6e:	2100      	movs	r1, #0
 8019c70:	6878      	ldr	r0, [r7, #4]
 8019c72:	f002 fa19 	bl	801c0a8 <memset>
}
 8019c76:	bf00      	nop
 8019c78:	3708      	adds	r7, #8
 8019c7a:	46bd      	mov	sp, r7
 8019c7c:	bd80      	pop	{r7, pc}

08019c7e <mbedtls_md5_free>:

void mbedtls_md5_free( mbedtls_md5_context *ctx )
{
 8019c7e:	b580      	push	{r7, lr}
 8019c80:	b082      	sub	sp, #8
 8019c82:	af00      	add	r7, sp, #0
 8019c84:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d004      	beq.n	8019c96 <mbedtls_md5_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md5_context ) );
 8019c8c:	2158      	movs	r1, #88	; 0x58
 8019c8e:	6878      	ldr	r0, [r7, #4]
 8019c90:	f001 f85c 	bl	801ad4c <mbedtls_platform_zeroize>
 8019c94:	e000      	b.n	8019c98 <mbedtls_md5_free+0x1a>
        return;
 8019c96:	bf00      	nop
}
 8019c98:	3708      	adds	r7, #8
 8019c9a:	46bd      	mov	sp, r7
 8019c9c:	bd80      	pop	{r7, pc}
	...

08019ca0 <mbedtls_md5_starts_ret>:

/*
 * MD5 context setup
 */
int mbedtls_md5_starts_ret( mbedtls_md5_context *ctx )
{
 8019ca0:	b480      	push	{r7}
 8019ca2:	b083      	sub	sp, #12
 8019ca4:	af00      	add	r7, sp, #0
 8019ca6:	6078      	str	r0, [r7, #4]
    ctx->total[0] = 0;
 8019ca8:	687b      	ldr	r3, [r7, #4]
 8019caa:	2200      	movs	r2, #0
 8019cac:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	2200      	movs	r2, #0
 8019cb2:	605a      	str	r2, [r3, #4]

    ctx->state[0] = 0x67452301;
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	4a09      	ldr	r2, [pc, #36]	; (8019cdc <mbedtls_md5_starts_ret+0x3c>)
 8019cb8:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	4a08      	ldr	r2, [pc, #32]	; (8019ce0 <mbedtls_md5_starts_ret+0x40>)
 8019cbe:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	4a08      	ldr	r2, [pc, #32]	; (8019ce4 <mbedtls_md5_starts_ret+0x44>)
 8019cc4:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	4a07      	ldr	r2, [pc, #28]	; (8019ce8 <mbedtls_md5_starts_ret+0x48>)
 8019cca:	615a      	str	r2, [r3, #20]

    return( 0 );
 8019ccc:	2300      	movs	r3, #0
}
 8019cce:	4618      	mov	r0, r3
 8019cd0:	370c      	adds	r7, #12
 8019cd2:	46bd      	mov	sp, r7
 8019cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cd8:	4770      	bx	lr
 8019cda:	bf00      	nop
 8019cdc:	67452301 	.word	0x67452301
 8019ce0:	efcdab89 	.word	0xefcdab89
 8019ce4:	98badcfe 	.word	0x98badcfe
 8019ce8:	10325476 	.word	0x10325476

08019cec <mbedtls_internal_md5_process>:
#endif

#if !defined(MBEDTLS_MD5_PROCESS_ALT)
int mbedtls_internal_md5_process( mbedtls_md5_context *ctx,
                                  const unsigned char data[64] )
{
 8019cec:	b480      	push	{r7}
 8019cee:	b097      	sub	sp, #92	; 0x5c
 8019cf0:	af00      	add	r7, sp, #0
 8019cf2:	6078      	str	r0, [r7, #4]
 8019cf4:	6039      	str	r1, [r7, #0]
    uint32_t X[16], A, B, C, D;

    GET_UINT32_LE( X[ 0], data,  0 );
 8019cf6:	683b      	ldr	r3, [r7, #0]
 8019cf8:	781b      	ldrb	r3, [r3, #0]
 8019cfa:	461a      	mov	r2, r3
 8019cfc:	683b      	ldr	r3, [r7, #0]
 8019cfe:	3301      	adds	r3, #1
 8019d00:	781b      	ldrb	r3, [r3, #0]
 8019d02:	021b      	lsls	r3, r3, #8
 8019d04:	431a      	orrs	r2, r3
 8019d06:	683b      	ldr	r3, [r7, #0]
 8019d08:	3302      	adds	r3, #2
 8019d0a:	781b      	ldrb	r3, [r3, #0]
 8019d0c:	041b      	lsls	r3, r3, #16
 8019d0e:	431a      	orrs	r2, r3
 8019d10:	683b      	ldr	r3, [r7, #0]
 8019d12:	3303      	adds	r3, #3
 8019d14:	781b      	ldrb	r3, [r3, #0]
 8019d16:	061b      	lsls	r3, r3, #24
 8019d18:	4313      	orrs	r3, r2
 8019d1a:	60bb      	str	r3, [r7, #8]
    GET_UINT32_LE( X[ 1], data,  4 );
 8019d1c:	683b      	ldr	r3, [r7, #0]
 8019d1e:	3304      	adds	r3, #4
 8019d20:	781b      	ldrb	r3, [r3, #0]
 8019d22:	461a      	mov	r2, r3
 8019d24:	683b      	ldr	r3, [r7, #0]
 8019d26:	3305      	adds	r3, #5
 8019d28:	781b      	ldrb	r3, [r3, #0]
 8019d2a:	021b      	lsls	r3, r3, #8
 8019d2c:	431a      	orrs	r2, r3
 8019d2e:	683b      	ldr	r3, [r7, #0]
 8019d30:	3306      	adds	r3, #6
 8019d32:	781b      	ldrb	r3, [r3, #0]
 8019d34:	041b      	lsls	r3, r3, #16
 8019d36:	431a      	orrs	r2, r3
 8019d38:	683b      	ldr	r3, [r7, #0]
 8019d3a:	3307      	adds	r3, #7
 8019d3c:	781b      	ldrb	r3, [r3, #0]
 8019d3e:	061b      	lsls	r3, r3, #24
 8019d40:	4313      	orrs	r3, r2
 8019d42:	60fb      	str	r3, [r7, #12]
    GET_UINT32_LE( X[ 2], data,  8 );
 8019d44:	683b      	ldr	r3, [r7, #0]
 8019d46:	3308      	adds	r3, #8
 8019d48:	781b      	ldrb	r3, [r3, #0]
 8019d4a:	461a      	mov	r2, r3
 8019d4c:	683b      	ldr	r3, [r7, #0]
 8019d4e:	3309      	adds	r3, #9
 8019d50:	781b      	ldrb	r3, [r3, #0]
 8019d52:	021b      	lsls	r3, r3, #8
 8019d54:	431a      	orrs	r2, r3
 8019d56:	683b      	ldr	r3, [r7, #0]
 8019d58:	330a      	adds	r3, #10
 8019d5a:	781b      	ldrb	r3, [r3, #0]
 8019d5c:	041b      	lsls	r3, r3, #16
 8019d5e:	431a      	orrs	r2, r3
 8019d60:	683b      	ldr	r3, [r7, #0]
 8019d62:	330b      	adds	r3, #11
 8019d64:	781b      	ldrb	r3, [r3, #0]
 8019d66:	061b      	lsls	r3, r3, #24
 8019d68:	4313      	orrs	r3, r2
 8019d6a:	613b      	str	r3, [r7, #16]
    GET_UINT32_LE( X[ 3], data, 12 );
 8019d6c:	683b      	ldr	r3, [r7, #0]
 8019d6e:	330c      	adds	r3, #12
 8019d70:	781b      	ldrb	r3, [r3, #0]
 8019d72:	461a      	mov	r2, r3
 8019d74:	683b      	ldr	r3, [r7, #0]
 8019d76:	330d      	adds	r3, #13
 8019d78:	781b      	ldrb	r3, [r3, #0]
 8019d7a:	021b      	lsls	r3, r3, #8
 8019d7c:	431a      	orrs	r2, r3
 8019d7e:	683b      	ldr	r3, [r7, #0]
 8019d80:	330e      	adds	r3, #14
 8019d82:	781b      	ldrb	r3, [r3, #0]
 8019d84:	041b      	lsls	r3, r3, #16
 8019d86:	431a      	orrs	r2, r3
 8019d88:	683b      	ldr	r3, [r7, #0]
 8019d8a:	330f      	adds	r3, #15
 8019d8c:	781b      	ldrb	r3, [r3, #0]
 8019d8e:	061b      	lsls	r3, r3, #24
 8019d90:	4313      	orrs	r3, r2
 8019d92:	617b      	str	r3, [r7, #20]
    GET_UINT32_LE( X[ 4], data, 16 );
 8019d94:	683b      	ldr	r3, [r7, #0]
 8019d96:	3310      	adds	r3, #16
 8019d98:	781b      	ldrb	r3, [r3, #0]
 8019d9a:	461a      	mov	r2, r3
 8019d9c:	683b      	ldr	r3, [r7, #0]
 8019d9e:	3311      	adds	r3, #17
 8019da0:	781b      	ldrb	r3, [r3, #0]
 8019da2:	021b      	lsls	r3, r3, #8
 8019da4:	431a      	orrs	r2, r3
 8019da6:	683b      	ldr	r3, [r7, #0]
 8019da8:	3312      	adds	r3, #18
 8019daa:	781b      	ldrb	r3, [r3, #0]
 8019dac:	041b      	lsls	r3, r3, #16
 8019dae:	431a      	orrs	r2, r3
 8019db0:	683b      	ldr	r3, [r7, #0]
 8019db2:	3313      	adds	r3, #19
 8019db4:	781b      	ldrb	r3, [r3, #0]
 8019db6:	061b      	lsls	r3, r3, #24
 8019db8:	4313      	orrs	r3, r2
 8019dba:	61bb      	str	r3, [r7, #24]
    GET_UINT32_LE( X[ 5], data, 20 );
 8019dbc:	683b      	ldr	r3, [r7, #0]
 8019dbe:	3314      	adds	r3, #20
 8019dc0:	781b      	ldrb	r3, [r3, #0]
 8019dc2:	461a      	mov	r2, r3
 8019dc4:	683b      	ldr	r3, [r7, #0]
 8019dc6:	3315      	adds	r3, #21
 8019dc8:	781b      	ldrb	r3, [r3, #0]
 8019dca:	021b      	lsls	r3, r3, #8
 8019dcc:	431a      	orrs	r2, r3
 8019dce:	683b      	ldr	r3, [r7, #0]
 8019dd0:	3316      	adds	r3, #22
 8019dd2:	781b      	ldrb	r3, [r3, #0]
 8019dd4:	041b      	lsls	r3, r3, #16
 8019dd6:	431a      	orrs	r2, r3
 8019dd8:	683b      	ldr	r3, [r7, #0]
 8019dda:	3317      	adds	r3, #23
 8019ddc:	781b      	ldrb	r3, [r3, #0]
 8019dde:	061b      	lsls	r3, r3, #24
 8019de0:	4313      	orrs	r3, r2
 8019de2:	61fb      	str	r3, [r7, #28]
    GET_UINT32_LE( X[ 6], data, 24 );
 8019de4:	683b      	ldr	r3, [r7, #0]
 8019de6:	3318      	adds	r3, #24
 8019de8:	781b      	ldrb	r3, [r3, #0]
 8019dea:	461a      	mov	r2, r3
 8019dec:	683b      	ldr	r3, [r7, #0]
 8019dee:	3319      	adds	r3, #25
 8019df0:	781b      	ldrb	r3, [r3, #0]
 8019df2:	021b      	lsls	r3, r3, #8
 8019df4:	431a      	orrs	r2, r3
 8019df6:	683b      	ldr	r3, [r7, #0]
 8019df8:	331a      	adds	r3, #26
 8019dfa:	781b      	ldrb	r3, [r3, #0]
 8019dfc:	041b      	lsls	r3, r3, #16
 8019dfe:	431a      	orrs	r2, r3
 8019e00:	683b      	ldr	r3, [r7, #0]
 8019e02:	331b      	adds	r3, #27
 8019e04:	781b      	ldrb	r3, [r3, #0]
 8019e06:	061b      	lsls	r3, r3, #24
 8019e08:	4313      	orrs	r3, r2
 8019e0a:	623b      	str	r3, [r7, #32]
    GET_UINT32_LE( X[ 7], data, 28 );
 8019e0c:	683b      	ldr	r3, [r7, #0]
 8019e0e:	331c      	adds	r3, #28
 8019e10:	781b      	ldrb	r3, [r3, #0]
 8019e12:	461a      	mov	r2, r3
 8019e14:	683b      	ldr	r3, [r7, #0]
 8019e16:	331d      	adds	r3, #29
 8019e18:	781b      	ldrb	r3, [r3, #0]
 8019e1a:	021b      	lsls	r3, r3, #8
 8019e1c:	431a      	orrs	r2, r3
 8019e1e:	683b      	ldr	r3, [r7, #0]
 8019e20:	331e      	adds	r3, #30
 8019e22:	781b      	ldrb	r3, [r3, #0]
 8019e24:	041b      	lsls	r3, r3, #16
 8019e26:	431a      	orrs	r2, r3
 8019e28:	683b      	ldr	r3, [r7, #0]
 8019e2a:	331f      	adds	r3, #31
 8019e2c:	781b      	ldrb	r3, [r3, #0]
 8019e2e:	061b      	lsls	r3, r3, #24
 8019e30:	4313      	orrs	r3, r2
 8019e32:	627b      	str	r3, [r7, #36]	; 0x24
    GET_UINT32_LE( X[ 8], data, 32 );
 8019e34:	683b      	ldr	r3, [r7, #0]
 8019e36:	3320      	adds	r3, #32
 8019e38:	781b      	ldrb	r3, [r3, #0]
 8019e3a:	461a      	mov	r2, r3
 8019e3c:	683b      	ldr	r3, [r7, #0]
 8019e3e:	3321      	adds	r3, #33	; 0x21
 8019e40:	781b      	ldrb	r3, [r3, #0]
 8019e42:	021b      	lsls	r3, r3, #8
 8019e44:	431a      	orrs	r2, r3
 8019e46:	683b      	ldr	r3, [r7, #0]
 8019e48:	3322      	adds	r3, #34	; 0x22
 8019e4a:	781b      	ldrb	r3, [r3, #0]
 8019e4c:	041b      	lsls	r3, r3, #16
 8019e4e:	431a      	orrs	r2, r3
 8019e50:	683b      	ldr	r3, [r7, #0]
 8019e52:	3323      	adds	r3, #35	; 0x23
 8019e54:	781b      	ldrb	r3, [r3, #0]
 8019e56:	061b      	lsls	r3, r3, #24
 8019e58:	4313      	orrs	r3, r2
 8019e5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_UINT32_LE( X[ 9], data, 36 );
 8019e5c:	683b      	ldr	r3, [r7, #0]
 8019e5e:	3324      	adds	r3, #36	; 0x24
 8019e60:	781b      	ldrb	r3, [r3, #0]
 8019e62:	461a      	mov	r2, r3
 8019e64:	683b      	ldr	r3, [r7, #0]
 8019e66:	3325      	adds	r3, #37	; 0x25
 8019e68:	781b      	ldrb	r3, [r3, #0]
 8019e6a:	021b      	lsls	r3, r3, #8
 8019e6c:	431a      	orrs	r2, r3
 8019e6e:	683b      	ldr	r3, [r7, #0]
 8019e70:	3326      	adds	r3, #38	; 0x26
 8019e72:	781b      	ldrb	r3, [r3, #0]
 8019e74:	041b      	lsls	r3, r3, #16
 8019e76:	431a      	orrs	r2, r3
 8019e78:	683b      	ldr	r3, [r7, #0]
 8019e7a:	3327      	adds	r3, #39	; 0x27
 8019e7c:	781b      	ldrb	r3, [r3, #0]
 8019e7e:	061b      	lsls	r3, r3, #24
 8019e80:	4313      	orrs	r3, r2
 8019e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_UINT32_LE( X[10], data, 40 );
 8019e84:	683b      	ldr	r3, [r7, #0]
 8019e86:	3328      	adds	r3, #40	; 0x28
 8019e88:	781b      	ldrb	r3, [r3, #0]
 8019e8a:	461a      	mov	r2, r3
 8019e8c:	683b      	ldr	r3, [r7, #0]
 8019e8e:	3329      	adds	r3, #41	; 0x29
 8019e90:	781b      	ldrb	r3, [r3, #0]
 8019e92:	021b      	lsls	r3, r3, #8
 8019e94:	431a      	orrs	r2, r3
 8019e96:	683b      	ldr	r3, [r7, #0]
 8019e98:	332a      	adds	r3, #42	; 0x2a
 8019e9a:	781b      	ldrb	r3, [r3, #0]
 8019e9c:	041b      	lsls	r3, r3, #16
 8019e9e:	431a      	orrs	r2, r3
 8019ea0:	683b      	ldr	r3, [r7, #0]
 8019ea2:	332b      	adds	r3, #43	; 0x2b
 8019ea4:	781b      	ldrb	r3, [r3, #0]
 8019ea6:	061b      	lsls	r3, r3, #24
 8019ea8:	4313      	orrs	r3, r2
 8019eaa:	633b      	str	r3, [r7, #48]	; 0x30
    GET_UINT32_LE( X[11], data, 44 );
 8019eac:	683b      	ldr	r3, [r7, #0]
 8019eae:	332c      	adds	r3, #44	; 0x2c
 8019eb0:	781b      	ldrb	r3, [r3, #0]
 8019eb2:	461a      	mov	r2, r3
 8019eb4:	683b      	ldr	r3, [r7, #0]
 8019eb6:	332d      	adds	r3, #45	; 0x2d
 8019eb8:	781b      	ldrb	r3, [r3, #0]
 8019eba:	021b      	lsls	r3, r3, #8
 8019ebc:	431a      	orrs	r2, r3
 8019ebe:	683b      	ldr	r3, [r7, #0]
 8019ec0:	332e      	adds	r3, #46	; 0x2e
 8019ec2:	781b      	ldrb	r3, [r3, #0]
 8019ec4:	041b      	lsls	r3, r3, #16
 8019ec6:	431a      	orrs	r2, r3
 8019ec8:	683b      	ldr	r3, [r7, #0]
 8019eca:	332f      	adds	r3, #47	; 0x2f
 8019ecc:	781b      	ldrb	r3, [r3, #0]
 8019ece:	061b      	lsls	r3, r3, #24
 8019ed0:	4313      	orrs	r3, r2
 8019ed2:	637b      	str	r3, [r7, #52]	; 0x34
    GET_UINT32_LE( X[12], data, 48 );
 8019ed4:	683b      	ldr	r3, [r7, #0]
 8019ed6:	3330      	adds	r3, #48	; 0x30
 8019ed8:	781b      	ldrb	r3, [r3, #0]
 8019eda:	461a      	mov	r2, r3
 8019edc:	683b      	ldr	r3, [r7, #0]
 8019ede:	3331      	adds	r3, #49	; 0x31
 8019ee0:	781b      	ldrb	r3, [r3, #0]
 8019ee2:	021b      	lsls	r3, r3, #8
 8019ee4:	431a      	orrs	r2, r3
 8019ee6:	683b      	ldr	r3, [r7, #0]
 8019ee8:	3332      	adds	r3, #50	; 0x32
 8019eea:	781b      	ldrb	r3, [r3, #0]
 8019eec:	041b      	lsls	r3, r3, #16
 8019eee:	431a      	orrs	r2, r3
 8019ef0:	683b      	ldr	r3, [r7, #0]
 8019ef2:	3333      	adds	r3, #51	; 0x33
 8019ef4:	781b      	ldrb	r3, [r3, #0]
 8019ef6:	061b      	lsls	r3, r3, #24
 8019ef8:	4313      	orrs	r3, r2
 8019efa:	63bb      	str	r3, [r7, #56]	; 0x38
    GET_UINT32_LE( X[13], data, 52 );
 8019efc:	683b      	ldr	r3, [r7, #0]
 8019efe:	3334      	adds	r3, #52	; 0x34
 8019f00:	781b      	ldrb	r3, [r3, #0]
 8019f02:	461a      	mov	r2, r3
 8019f04:	683b      	ldr	r3, [r7, #0]
 8019f06:	3335      	adds	r3, #53	; 0x35
 8019f08:	781b      	ldrb	r3, [r3, #0]
 8019f0a:	021b      	lsls	r3, r3, #8
 8019f0c:	431a      	orrs	r2, r3
 8019f0e:	683b      	ldr	r3, [r7, #0]
 8019f10:	3336      	adds	r3, #54	; 0x36
 8019f12:	781b      	ldrb	r3, [r3, #0]
 8019f14:	041b      	lsls	r3, r3, #16
 8019f16:	431a      	orrs	r2, r3
 8019f18:	683b      	ldr	r3, [r7, #0]
 8019f1a:	3337      	adds	r3, #55	; 0x37
 8019f1c:	781b      	ldrb	r3, [r3, #0]
 8019f1e:	061b      	lsls	r3, r3, #24
 8019f20:	4313      	orrs	r3, r2
 8019f22:	63fb      	str	r3, [r7, #60]	; 0x3c
    GET_UINT32_LE( X[14], data, 56 );
 8019f24:	683b      	ldr	r3, [r7, #0]
 8019f26:	3338      	adds	r3, #56	; 0x38
 8019f28:	781b      	ldrb	r3, [r3, #0]
 8019f2a:	461a      	mov	r2, r3
 8019f2c:	683b      	ldr	r3, [r7, #0]
 8019f2e:	3339      	adds	r3, #57	; 0x39
 8019f30:	781b      	ldrb	r3, [r3, #0]
 8019f32:	021b      	lsls	r3, r3, #8
 8019f34:	431a      	orrs	r2, r3
 8019f36:	683b      	ldr	r3, [r7, #0]
 8019f38:	333a      	adds	r3, #58	; 0x3a
 8019f3a:	781b      	ldrb	r3, [r3, #0]
 8019f3c:	041b      	lsls	r3, r3, #16
 8019f3e:	431a      	orrs	r2, r3
 8019f40:	683b      	ldr	r3, [r7, #0]
 8019f42:	333b      	adds	r3, #59	; 0x3b
 8019f44:	781b      	ldrb	r3, [r3, #0]
 8019f46:	061b      	lsls	r3, r3, #24
 8019f48:	4313      	orrs	r3, r2
 8019f4a:	643b      	str	r3, [r7, #64]	; 0x40
    GET_UINT32_LE( X[15], data, 60 );
 8019f4c:	683b      	ldr	r3, [r7, #0]
 8019f4e:	333c      	adds	r3, #60	; 0x3c
 8019f50:	781b      	ldrb	r3, [r3, #0]
 8019f52:	461a      	mov	r2, r3
 8019f54:	683b      	ldr	r3, [r7, #0]
 8019f56:	333d      	adds	r3, #61	; 0x3d
 8019f58:	781b      	ldrb	r3, [r3, #0]
 8019f5a:	021b      	lsls	r3, r3, #8
 8019f5c:	431a      	orrs	r2, r3
 8019f5e:	683b      	ldr	r3, [r7, #0]
 8019f60:	333e      	adds	r3, #62	; 0x3e
 8019f62:	781b      	ldrb	r3, [r3, #0]
 8019f64:	041b      	lsls	r3, r3, #16
 8019f66:	431a      	orrs	r2, r3
 8019f68:	683b      	ldr	r3, [r7, #0]
 8019f6a:	333f      	adds	r3, #63	; 0x3f
 8019f6c:	781b      	ldrb	r3, [r3, #0]
 8019f6e:	061b      	lsls	r3, r3, #24
 8019f70:	4313      	orrs	r3, r2
 8019f72:	647b      	str	r3, [r7, #68]	; 0x44
    {                                                           \
        (a) += F((b),(c),(d)) + X[(k)] + (t);                   \
        (a) = S((a),(s)) + (b);                                 \
    } while( 0 )

    A = ctx->state[0];
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	689b      	ldr	r3, [r3, #8]
 8019f78:	657b      	str	r3, [r7, #84]	; 0x54
    B = ctx->state[1];
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	68db      	ldr	r3, [r3, #12]
 8019f7e:	653b      	str	r3, [r7, #80]	; 0x50
    C = ctx->state[2];
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	691b      	ldr	r3, [r3, #16]
 8019f84:	64fb      	str	r3, [r7, #76]	; 0x4c
    D = ctx->state[3];
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	695b      	ldr	r3, [r3, #20]
 8019f8a:	64bb      	str	r3, [r7, #72]	; 0x48

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))

    P( A, B, C, D,  0,  7, 0xD76AA478 );
 8019f8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019f90:	405a      	eors	r2, r3
 8019f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019f94:	401a      	ands	r2, r3
 8019f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019f98:	405a      	eors	r2, r3
 8019f9a:	68bb      	ldr	r3, [r7, #8]
 8019f9c:	441a      	add	r2, r3
 8019f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019fa0:	441a      	add	r2, r3
 8019fa2:	4ba5      	ldr	r3, [pc, #660]	; (801a238 <mbedtls_internal_md5_process+0x54c>)
 8019fa4:	4413      	add	r3, r2
 8019fa6:	657b      	str	r3, [r7, #84]	; 0x54
 8019fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019faa:	ea4f 6373 	mov.w	r3, r3, ror #25
 8019fae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019fb0:	4413      	add	r3, r2
 8019fb2:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  1, 12, 0xE8C7B756 );
 8019fb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019fb8:	405a      	eors	r2, r3
 8019fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019fbc:	401a      	ands	r2, r3
 8019fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019fc0:	405a      	eors	r2, r3
 8019fc2:	68fb      	ldr	r3, [r7, #12]
 8019fc4:	441a      	add	r2, r3
 8019fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019fc8:	441a      	add	r2, r3
 8019fca:	4b9c      	ldr	r3, [pc, #624]	; (801a23c <mbedtls_internal_md5_process+0x550>)
 8019fcc:	4413      	add	r3, r2
 8019fce:	64bb      	str	r3, [r7, #72]	; 0x48
 8019fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019fd2:	ea4f 5333 	mov.w	r3, r3, ror #20
 8019fd6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019fd8:	4413      	add	r3, r2
 8019fda:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  2, 17, 0x242070DB );
 8019fdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019fde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019fe0:	405a      	eors	r2, r3
 8019fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019fe4:	401a      	ands	r2, r3
 8019fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019fe8:	405a      	eors	r2, r3
 8019fea:	693b      	ldr	r3, [r7, #16]
 8019fec:	441a      	add	r2, r3
 8019fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019ff0:	441a      	add	r2, r3
 8019ff2:	4b93      	ldr	r3, [pc, #588]	; (801a240 <mbedtls_internal_md5_process+0x554>)
 8019ff4:	4413      	add	r3, r2
 8019ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019ffa:	ea4f 33f3 	mov.w	r3, r3, ror #15
 8019ffe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a000:	4413      	add	r3, r2
 801a002:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  3, 22, 0xC1BDCEEE );
 801a004:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a008:	405a      	eors	r2, r3
 801a00a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a00c:	401a      	ands	r2, r3
 801a00e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a010:	405a      	eors	r2, r3
 801a012:	697b      	ldr	r3, [r7, #20]
 801a014:	441a      	add	r2, r3
 801a016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a018:	441a      	add	r2, r3
 801a01a:	4b8a      	ldr	r3, [pc, #552]	; (801a244 <mbedtls_internal_md5_process+0x558>)
 801a01c:	4413      	add	r3, r2
 801a01e:	653b      	str	r3, [r7, #80]	; 0x50
 801a020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a022:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801a026:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a028:	4413      	add	r3, r2
 801a02a:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  4,  7, 0xF57C0FAF );
 801a02c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a02e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a030:	405a      	eors	r2, r3
 801a032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a034:	401a      	ands	r2, r3
 801a036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a038:	405a      	eors	r2, r3
 801a03a:	69bb      	ldr	r3, [r7, #24]
 801a03c:	441a      	add	r2, r3
 801a03e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a040:	441a      	add	r2, r3
 801a042:	4b81      	ldr	r3, [pc, #516]	; (801a248 <mbedtls_internal_md5_process+0x55c>)
 801a044:	4413      	add	r3, r2
 801a046:	657b      	str	r3, [r7, #84]	; 0x54
 801a048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a04a:	ea4f 6373 	mov.w	r3, r3, ror #25
 801a04e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a050:	4413      	add	r3, r2
 801a052:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  5, 12, 0x4787C62A );
 801a054:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a058:	405a      	eors	r2, r3
 801a05a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a05c:	401a      	ands	r2, r3
 801a05e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a060:	405a      	eors	r2, r3
 801a062:	69fb      	ldr	r3, [r7, #28]
 801a064:	441a      	add	r2, r3
 801a066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a068:	441a      	add	r2, r3
 801a06a:	4b78      	ldr	r3, [pc, #480]	; (801a24c <mbedtls_internal_md5_process+0x560>)
 801a06c:	4413      	add	r3, r2
 801a06e:	64bb      	str	r3, [r7, #72]	; 0x48
 801a070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a072:	ea4f 5333 	mov.w	r3, r3, ror #20
 801a076:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a078:	4413      	add	r3, r2
 801a07a:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  6, 17, 0xA8304613 );
 801a07c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a07e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a080:	405a      	eors	r2, r3
 801a082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a084:	401a      	ands	r2, r3
 801a086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a088:	405a      	eors	r2, r3
 801a08a:	6a3b      	ldr	r3, [r7, #32]
 801a08c:	441a      	add	r2, r3
 801a08e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a090:	441a      	add	r2, r3
 801a092:	4b6f      	ldr	r3, [pc, #444]	; (801a250 <mbedtls_internal_md5_process+0x564>)
 801a094:	4413      	add	r3, r2
 801a096:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a09a:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801a09e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a0a0:	4413      	add	r3, r2
 801a0a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  7, 22, 0xFD469501 );
 801a0a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a0a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a0a8:	405a      	eors	r2, r3
 801a0aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a0ac:	401a      	ands	r2, r3
 801a0ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a0b0:	405a      	eors	r2, r3
 801a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0b4:	441a      	add	r2, r3
 801a0b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a0b8:	441a      	add	r2, r3
 801a0ba:	4b66      	ldr	r3, [pc, #408]	; (801a254 <mbedtls_internal_md5_process+0x568>)
 801a0bc:	4413      	add	r3, r2
 801a0be:	653b      	str	r3, [r7, #80]	; 0x50
 801a0c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a0c2:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801a0c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a0c8:	4413      	add	r3, r2
 801a0ca:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  8,  7, 0x698098D8 );
 801a0cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a0ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a0d0:	405a      	eors	r2, r3
 801a0d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a0d4:	401a      	ands	r2, r3
 801a0d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a0d8:	405a      	eors	r2, r3
 801a0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0dc:	441a      	add	r2, r3
 801a0de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a0e0:	441a      	add	r2, r3
 801a0e2:	4b5d      	ldr	r3, [pc, #372]	; (801a258 <mbedtls_internal_md5_process+0x56c>)
 801a0e4:	4413      	add	r3, r2
 801a0e6:	657b      	str	r3, [r7, #84]	; 0x54
 801a0e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a0ea:	ea4f 6373 	mov.w	r3, r3, ror #25
 801a0ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a0f0:	4413      	add	r3, r2
 801a0f2:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  9, 12, 0x8B44F7AF );
 801a0f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a0f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a0f8:	405a      	eors	r2, r3
 801a0fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a0fc:	401a      	ands	r2, r3
 801a0fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a100:	405a      	eors	r2, r3
 801a102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a104:	441a      	add	r2, r3
 801a106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a108:	441a      	add	r2, r3
 801a10a:	4b54      	ldr	r3, [pc, #336]	; (801a25c <mbedtls_internal_md5_process+0x570>)
 801a10c:	4413      	add	r3, r2
 801a10e:	64bb      	str	r3, [r7, #72]	; 0x48
 801a110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a112:	ea4f 5333 	mov.w	r3, r3, ror #20
 801a116:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a118:	4413      	add	r3, r2
 801a11a:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 10, 17, 0xFFFF5BB1 );
 801a11c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a11e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a120:	405a      	eors	r2, r3
 801a122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a124:	401a      	ands	r2, r3
 801a126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a128:	405a      	eors	r2, r3
 801a12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a12c:	441a      	add	r2, r3
 801a12e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a130:	4413      	add	r3, r2
 801a132:	f5a3 4324 	sub.w	r3, r3, #41984	; 0xa400
 801a136:	3b4f      	subs	r3, #79	; 0x4f
 801a138:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a13a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a13c:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801a140:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a142:	4413      	add	r3, r2
 801a144:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 11, 22, 0x895CD7BE );
 801a146:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a14a:	405a      	eors	r2, r3
 801a14c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a14e:	401a      	ands	r2, r3
 801a150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a152:	405a      	eors	r2, r3
 801a154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a156:	441a      	add	r2, r3
 801a158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a15a:	441a      	add	r2, r3
 801a15c:	4b40      	ldr	r3, [pc, #256]	; (801a260 <mbedtls_internal_md5_process+0x574>)
 801a15e:	4413      	add	r3, r2
 801a160:	653b      	str	r3, [r7, #80]	; 0x50
 801a162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a164:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801a168:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a16a:	4413      	add	r3, r2
 801a16c:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 12,  7, 0x6B901122 );
 801a16e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a172:	405a      	eors	r2, r3
 801a174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a176:	401a      	ands	r2, r3
 801a178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a17a:	405a      	eors	r2, r3
 801a17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a17e:	441a      	add	r2, r3
 801a180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a182:	441a      	add	r2, r3
 801a184:	4b37      	ldr	r3, [pc, #220]	; (801a264 <mbedtls_internal_md5_process+0x578>)
 801a186:	4413      	add	r3, r2
 801a188:	657b      	str	r3, [r7, #84]	; 0x54
 801a18a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a18c:	ea4f 6373 	mov.w	r3, r3, ror #25
 801a190:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a192:	4413      	add	r3, r2
 801a194:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 13, 12, 0xFD987193 );
 801a196:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a19a:	405a      	eors	r2, r3
 801a19c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a19e:	401a      	ands	r2, r3
 801a1a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a1a2:	405a      	eors	r2, r3
 801a1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a1a6:	441a      	add	r2, r3
 801a1a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a1aa:	441a      	add	r2, r3
 801a1ac:	4b2e      	ldr	r3, [pc, #184]	; (801a268 <mbedtls_internal_md5_process+0x57c>)
 801a1ae:	4413      	add	r3, r2
 801a1b0:	64bb      	str	r3, [r7, #72]	; 0x48
 801a1b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a1b4:	ea4f 5333 	mov.w	r3, r3, ror #20
 801a1b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a1ba:	4413      	add	r3, r2
 801a1bc:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 14, 17, 0xA679438E );
 801a1be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a1c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a1c2:	405a      	eors	r2, r3
 801a1c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a1c6:	401a      	ands	r2, r3
 801a1c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a1ca:	405a      	eors	r2, r3
 801a1cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a1ce:	441a      	add	r2, r3
 801a1d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a1d2:	441a      	add	r2, r3
 801a1d4:	4b25      	ldr	r3, [pc, #148]	; (801a26c <mbedtls_internal_md5_process+0x580>)
 801a1d6:	4413      	add	r3, r2
 801a1d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a1da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a1dc:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801a1e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a1e2:	4413      	add	r3, r2
 801a1e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 15, 22, 0x49B40821 );
 801a1e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a1e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a1ea:	405a      	eors	r2, r3
 801a1ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a1ee:	401a      	ands	r2, r3
 801a1f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a1f2:	405a      	eors	r2, r3
 801a1f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a1f6:	441a      	add	r2, r3
 801a1f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a1fa:	441a      	add	r2, r3
 801a1fc:	4b1c      	ldr	r3, [pc, #112]	; (801a270 <mbedtls_internal_md5_process+0x584>)
 801a1fe:	4413      	add	r3, r2
 801a200:	653b      	str	r3, [r7, #80]	; 0x50
 801a202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a204:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801a208:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a20a:	4413      	add	r3, r2
 801a20c:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) ((y) ^ ((z) & ((x) ^ (y))))

    P( A, B, C, D,  1,  5, 0xF61E2562 );
 801a20e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a212:	405a      	eors	r2, r3
 801a214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a216:	401a      	ands	r2, r3
 801a218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a21a:	405a      	eors	r2, r3
 801a21c:	68fb      	ldr	r3, [r7, #12]
 801a21e:	441a      	add	r2, r3
 801a220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a222:	441a      	add	r2, r3
 801a224:	4b13      	ldr	r3, [pc, #76]	; (801a274 <mbedtls_internal_md5_process+0x588>)
 801a226:	4413      	add	r3, r2
 801a228:	657b      	str	r3, [r7, #84]	; 0x54
 801a22a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a22c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801a230:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a232:	4413      	add	r3, r2
 801a234:	e020      	b.n	801a278 <mbedtls_internal_md5_process+0x58c>
 801a236:	bf00      	nop
 801a238:	d76aa478 	.word	0xd76aa478
 801a23c:	e8c7b756 	.word	0xe8c7b756
 801a240:	242070db 	.word	0x242070db
 801a244:	c1bdceee 	.word	0xc1bdceee
 801a248:	f57c0faf 	.word	0xf57c0faf
 801a24c:	4787c62a 	.word	0x4787c62a
 801a250:	a8304613 	.word	0xa8304613
 801a254:	fd469501 	.word	0xfd469501
 801a258:	698098d8 	.word	0x698098d8
 801a25c:	8b44f7af 	.word	0x8b44f7af
 801a260:	895cd7be 	.word	0x895cd7be
 801a264:	6b901122 	.word	0x6b901122
 801a268:	fd987193 	.word	0xfd987193
 801a26c:	a679438e 	.word	0xa679438e
 801a270:	49b40821 	.word	0x49b40821
 801a274:	f61e2562 	.word	0xf61e2562
 801a278:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  6,  9, 0xC040B340 );
 801a27a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a27c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a27e:	405a      	eors	r2, r3
 801a280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a282:	401a      	ands	r2, r3
 801a284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a286:	405a      	eors	r2, r3
 801a288:	6a3b      	ldr	r3, [r7, #32]
 801a28a:	441a      	add	r2, r3
 801a28c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a28e:	441a      	add	r2, r3
 801a290:	4ba4      	ldr	r3, [pc, #656]	; (801a524 <mbedtls_internal_md5_process+0x838>)
 801a292:	4413      	add	r3, r2
 801a294:	64bb      	str	r3, [r7, #72]	; 0x48
 801a296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a298:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801a29c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a29e:	4413      	add	r3, r2
 801a2a0:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 11, 14, 0x265E5A51 );
 801a2a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a2a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a2a6:	405a      	eors	r2, r3
 801a2a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a2aa:	401a      	ands	r2, r3
 801a2ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a2ae:	405a      	eors	r2, r3
 801a2b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2b2:	441a      	add	r2, r3
 801a2b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a2b6:	441a      	add	r2, r3
 801a2b8:	4b9b      	ldr	r3, [pc, #620]	; (801a528 <mbedtls_internal_md5_process+0x83c>)
 801a2ba:	4413      	add	r3, r2
 801a2bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a2be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a2c0:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801a2c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a2c6:	4413      	add	r3, r2
 801a2c8:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  0, 20, 0xE9B6C7AA );
 801a2ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a2cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a2ce:	405a      	eors	r2, r3
 801a2d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a2d2:	401a      	ands	r2, r3
 801a2d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a2d6:	405a      	eors	r2, r3
 801a2d8:	68bb      	ldr	r3, [r7, #8]
 801a2da:	441a      	add	r2, r3
 801a2dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a2de:	441a      	add	r2, r3
 801a2e0:	4b92      	ldr	r3, [pc, #584]	; (801a52c <mbedtls_internal_md5_process+0x840>)
 801a2e2:	4413      	add	r3, r2
 801a2e4:	653b      	str	r3, [r7, #80]	; 0x50
 801a2e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a2e8:	ea4f 3333 	mov.w	r3, r3, ror #12
 801a2ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a2ee:	4413      	add	r3, r2
 801a2f0:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  5,  5, 0xD62F105D );
 801a2f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a2f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a2f6:	405a      	eors	r2, r3
 801a2f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a2fa:	401a      	ands	r2, r3
 801a2fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a2fe:	405a      	eors	r2, r3
 801a300:	69fb      	ldr	r3, [r7, #28]
 801a302:	441a      	add	r2, r3
 801a304:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a306:	441a      	add	r2, r3
 801a308:	4b89      	ldr	r3, [pc, #548]	; (801a530 <mbedtls_internal_md5_process+0x844>)
 801a30a:	4413      	add	r3, r2
 801a30c:	657b      	str	r3, [r7, #84]	; 0x54
 801a30e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a310:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801a314:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a316:	4413      	add	r3, r2
 801a318:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 10,  9, 0x02441453 );
 801a31a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a31c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a31e:	405a      	eors	r2, r3
 801a320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a322:	401a      	ands	r2, r3
 801a324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a326:	405a      	eors	r2, r3
 801a328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a32a:	441a      	add	r2, r3
 801a32c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a32e:	441a      	add	r2, r3
 801a330:	4b80      	ldr	r3, [pc, #512]	; (801a534 <mbedtls_internal_md5_process+0x848>)
 801a332:	4413      	add	r3, r2
 801a334:	64bb      	str	r3, [r7, #72]	; 0x48
 801a336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a338:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801a33c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a33e:	4413      	add	r3, r2
 801a340:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 15, 14, 0xD8A1E681 );
 801a342:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a346:	405a      	eors	r2, r3
 801a348:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a34a:	401a      	ands	r2, r3
 801a34c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a34e:	405a      	eors	r2, r3
 801a350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a352:	441a      	add	r2, r3
 801a354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a356:	441a      	add	r2, r3
 801a358:	4b77      	ldr	r3, [pc, #476]	; (801a538 <mbedtls_internal_md5_process+0x84c>)
 801a35a:	4413      	add	r3, r2
 801a35c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a35e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a360:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801a364:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a366:	4413      	add	r3, r2
 801a368:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  4, 20, 0xE7D3FBC8 );
 801a36a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a36c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a36e:	405a      	eors	r2, r3
 801a370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a372:	401a      	ands	r2, r3
 801a374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a376:	405a      	eors	r2, r3
 801a378:	69bb      	ldr	r3, [r7, #24]
 801a37a:	441a      	add	r2, r3
 801a37c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a37e:	441a      	add	r2, r3
 801a380:	4b6e      	ldr	r3, [pc, #440]	; (801a53c <mbedtls_internal_md5_process+0x850>)
 801a382:	4413      	add	r3, r2
 801a384:	653b      	str	r3, [r7, #80]	; 0x50
 801a386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a388:	ea4f 3333 	mov.w	r3, r3, ror #12
 801a38c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a38e:	4413      	add	r3, r2
 801a390:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  9,  5, 0x21E1CDE6 );
 801a392:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a396:	405a      	eors	r2, r3
 801a398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a39a:	401a      	ands	r2, r3
 801a39c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a39e:	405a      	eors	r2, r3
 801a3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3a2:	441a      	add	r2, r3
 801a3a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a3a6:	441a      	add	r2, r3
 801a3a8:	4b65      	ldr	r3, [pc, #404]	; (801a540 <mbedtls_internal_md5_process+0x854>)
 801a3aa:	4413      	add	r3, r2
 801a3ac:	657b      	str	r3, [r7, #84]	; 0x54
 801a3ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a3b0:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801a3b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a3b6:	4413      	add	r3, r2
 801a3b8:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 14,  9, 0xC33707D6 );
 801a3ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a3bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3be:	405a      	eors	r2, r3
 801a3c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a3c2:	401a      	ands	r2, r3
 801a3c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3c6:	405a      	eors	r2, r3
 801a3c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a3ca:	441a      	add	r2, r3
 801a3cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a3ce:	441a      	add	r2, r3
 801a3d0:	4b5c      	ldr	r3, [pc, #368]	; (801a544 <mbedtls_internal_md5_process+0x858>)
 801a3d2:	4413      	add	r3, r2
 801a3d4:	64bb      	str	r3, [r7, #72]	; 0x48
 801a3d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a3d8:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801a3dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a3de:	4413      	add	r3, r2
 801a3e0:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  3, 14, 0xF4D50D87 );
 801a3e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a3e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a3e6:	405a      	eors	r2, r3
 801a3e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3ea:	401a      	ands	r2, r3
 801a3ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a3ee:	405a      	eors	r2, r3
 801a3f0:	697b      	ldr	r3, [r7, #20]
 801a3f2:	441a      	add	r2, r3
 801a3f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a3f6:	441a      	add	r2, r3
 801a3f8:	4b53      	ldr	r3, [pc, #332]	; (801a548 <mbedtls_internal_md5_process+0x85c>)
 801a3fa:	4413      	add	r3, r2
 801a3fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a3fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a400:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801a404:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a406:	4413      	add	r3, r2
 801a408:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  8, 20, 0x455A14ED );
 801a40a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a40c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a40e:	405a      	eors	r2, r3
 801a410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a412:	401a      	ands	r2, r3
 801a414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a416:	405a      	eors	r2, r3
 801a418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a41a:	441a      	add	r2, r3
 801a41c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a41e:	441a      	add	r2, r3
 801a420:	4b4a      	ldr	r3, [pc, #296]	; (801a54c <mbedtls_internal_md5_process+0x860>)
 801a422:	4413      	add	r3, r2
 801a424:	653b      	str	r3, [r7, #80]	; 0x50
 801a426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a428:	ea4f 3333 	mov.w	r3, r3, ror #12
 801a42c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a42e:	4413      	add	r3, r2
 801a430:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 13,  5, 0xA9E3E905 );
 801a432:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a436:	405a      	eors	r2, r3
 801a438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a43a:	401a      	ands	r2, r3
 801a43c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a43e:	405a      	eors	r2, r3
 801a440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a442:	441a      	add	r2, r3
 801a444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a446:	441a      	add	r2, r3
 801a448:	4b41      	ldr	r3, [pc, #260]	; (801a550 <mbedtls_internal_md5_process+0x864>)
 801a44a:	4413      	add	r3, r2
 801a44c:	657b      	str	r3, [r7, #84]	; 0x54
 801a44e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a450:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801a454:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a456:	4413      	add	r3, r2
 801a458:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  2,  9, 0xFCEFA3F8 );
 801a45a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a45c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a45e:	405a      	eors	r2, r3
 801a460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a462:	401a      	ands	r2, r3
 801a464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a466:	405a      	eors	r2, r3
 801a468:	693b      	ldr	r3, [r7, #16]
 801a46a:	441a      	add	r2, r3
 801a46c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a46e:	441a      	add	r2, r3
 801a470:	4b38      	ldr	r3, [pc, #224]	; (801a554 <mbedtls_internal_md5_process+0x868>)
 801a472:	4413      	add	r3, r2
 801a474:	64bb      	str	r3, [r7, #72]	; 0x48
 801a476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a478:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801a47c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a47e:	4413      	add	r3, r2
 801a480:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  7, 14, 0x676F02D9 );
 801a482:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a486:	405a      	eors	r2, r3
 801a488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a48a:	401a      	ands	r2, r3
 801a48c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a48e:	405a      	eors	r2, r3
 801a490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a492:	441a      	add	r2, r3
 801a494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a496:	441a      	add	r2, r3
 801a498:	4b2f      	ldr	r3, [pc, #188]	; (801a558 <mbedtls_internal_md5_process+0x86c>)
 801a49a:	4413      	add	r3, r2
 801a49c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a49e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a4a0:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801a4a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a4a6:	4413      	add	r3, r2
 801a4a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 12, 20, 0x8D2A4C8A );
 801a4aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a4ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a4ae:	405a      	eors	r2, r3
 801a4b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a4b2:	401a      	ands	r2, r3
 801a4b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a4b6:	405a      	eors	r2, r3
 801a4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4ba:	441a      	add	r2, r3
 801a4bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a4be:	441a      	add	r2, r3
 801a4c0:	4b26      	ldr	r3, [pc, #152]	; (801a55c <mbedtls_internal_md5_process+0x870>)
 801a4c2:	4413      	add	r3, r2
 801a4c4:	653b      	str	r3, [r7, #80]	; 0x50
 801a4c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a4c8:	ea4f 3333 	mov.w	r3, r3, ror #12
 801a4cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a4ce:	4413      	add	r3, r2
 801a4d0:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))

    P( A, B, C, D,  5,  4, 0xFFFA3942 );
 801a4d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a4d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a4d6:	405a      	eors	r2, r3
 801a4d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a4da:	405a      	eors	r2, r3
 801a4dc:	69fb      	ldr	r3, [r7, #28]
 801a4de:	441a      	add	r2, r3
 801a4e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a4e2:	4413      	add	r3, r2
 801a4e4:	f5a3 23b8 	sub.w	r3, r3, #376832	; 0x5c000
 801a4e8:	f2a3 63be 	subw	r3, r3, #1726	; 0x6be
 801a4ec:	657b      	str	r3, [r7, #84]	; 0x54
 801a4ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a4f0:	ea4f 7333 	mov.w	r3, r3, ror #28
 801a4f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a4f6:	4413      	add	r3, r2
 801a4f8:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  8, 11, 0x8771F681 );
 801a4fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a4fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a4fe:	405a      	eors	r2, r3
 801a500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a502:	405a      	eors	r2, r3
 801a504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a506:	441a      	add	r2, r3
 801a508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a50a:	441a      	add	r2, r3
 801a50c:	4b14      	ldr	r3, [pc, #80]	; (801a560 <mbedtls_internal_md5_process+0x874>)
 801a50e:	4413      	add	r3, r2
 801a510:	64bb      	str	r3, [r7, #72]	; 0x48
 801a512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a514:	ea4f 5373 	mov.w	r3, r3, ror #21
 801a518:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a51a:	4413      	add	r3, r2
 801a51c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 11, 16, 0x6D9D6122 );
 801a51e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a520:	e020      	b.n	801a564 <mbedtls_internal_md5_process+0x878>
 801a522:	bf00      	nop
 801a524:	c040b340 	.word	0xc040b340
 801a528:	265e5a51 	.word	0x265e5a51
 801a52c:	e9b6c7aa 	.word	0xe9b6c7aa
 801a530:	d62f105d 	.word	0xd62f105d
 801a534:	02441453 	.word	0x02441453
 801a538:	d8a1e681 	.word	0xd8a1e681
 801a53c:	e7d3fbc8 	.word	0xe7d3fbc8
 801a540:	21e1cde6 	.word	0x21e1cde6
 801a544:	c33707d6 	.word	0xc33707d6
 801a548:	f4d50d87 	.word	0xf4d50d87
 801a54c:	455a14ed 	.word	0x455a14ed
 801a550:	a9e3e905 	.word	0xa9e3e905
 801a554:	fcefa3f8 	.word	0xfcefa3f8
 801a558:	676f02d9 	.word	0x676f02d9
 801a55c:	8d2a4c8a 	.word	0x8d2a4c8a
 801a560:	8771f681 	.word	0x8771f681
 801a564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a566:	405a      	eors	r2, r3
 801a568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a56a:	405a      	eors	r2, r3
 801a56c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a56e:	441a      	add	r2, r3
 801a570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a572:	441a      	add	r2, r3
 801a574:	4ba4      	ldr	r3, [pc, #656]	; (801a808 <mbedtls_internal_md5_process+0xb1c>)
 801a576:	4413      	add	r3, r2
 801a578:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a57a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a57c:	ea4f 4333 	mov.w	r3, r3, ror #16
 801a580:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a582:	4413      	add	r3, r2
 801a584:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 14, 23, 0xFDE5380C );
 801a586:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a58a:	405a      	eors	r2, r3
 801a58c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a58e:	405a      	eors	r2, r3
 801a590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a592:	441a      	add	r2, r3
 801a594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a596:	441a      	add	r2, r3
 801a598:	4b9c      	ldr	r3, [pc, #624]	; (801a80c <mbedtls_internal_md5_process+0xb20>)
 801a59a:	4413      	add	r3, r2
 801a59c:	653b      	str	r3, [r7, #80]	; 0x50
 801a59e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a5a0:	ea4f 2373 	mov.w	r3, r3, ror #9
 801a5a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a5a6:	4413      	add	r3, r2
 801a5a8:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  1,  4, 0xA4BEEA44 );
 801a5aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a5ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a5ae:	405a      	eors	r2, r3
 801a5b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a5b2:	405a      	eors	r2, r3
 801a5b4:	68fb      	ldr	r3, [r7, #12]
 801a5b6:	441a      	add	r2, r3
 801a5b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a5ba:	441a      	add	r2, r3
 801a5bc:	4b94      	ldr	r3, [pc, #592]	; (801a810 <mbedtls_internal_md5_process+0xb24>)
 801a5be:	4413      	add	r3, r2
 801a5c0:	657b      	str	r3, [r7, #84]	; 0x54
 801a5c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a5c4:	ea4f 7333 	mov.w	r3, r3, ror #28
 801a5c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a5ca:	4413      	add	r3, r2
 801a5cc:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  4, 11, 0x4BDECFA9 );
 801a5ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a5d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a5d2:	405a      	eors	r2, r3
 801a5d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a5d6:	405a      	eors	r2, r3
 801a5d8:	69bb      	ldr	r3, [r7, #24]
 801a5da:	441a      	add	r2, r3
 801a5dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a5de:	441a      	add	r2, r3
 801a5e0:	4b8c      	ldr	r3, [pc, #560]	; (801a814 <mbedtls_internal_md5_process+0xb28>)
 801a5e2:	4413      	add	r3, r2
 801a5e4:	64bb      	str	r3, [r7, #72]	; 0x48
 801a5e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a5e8:	ea4f 5373 	mov.w	r3, r3, ror #21
 801a5ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a5ee:	4413      	add	r3, r2
 801a5f0:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  7, 16, 0xF6BB4B60 );
 801a5f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a5f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a5f6:	405a      	eors	r2, r3
 801a5f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a5fa:	405a      	eors	r2, r3
 801a5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5fe:	441a      	add	r2, r3
 801a600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a602:	441a      	add	r2, r3
 801a604:	4b84      	ldr	r3, [pc, #528]	; (801a818 <mbedtls_internal_md5_process+0xb2c>)
 801a606:	4413      	add	r3, r2
 801a608:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a60a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a60c:	ea4f 4333 	mov.w	r3, r3, ror #16
 801a610:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a612:	4413      	add	r3, r2
 801a614:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 10, 23, 0xBEBFBC70 );
 801a616:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a61a:	405a      	eors	r2, r3
 801a61c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a61e:	405a      	eors	r2, r3
 801a620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a622:	441a      	add	r2, r3
 801a624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a626:	441a      	add	r2, r3
 801a628:	4b7c      	ldr	r3, [pc, #496]	; (801a81c <mbedtls_internal_md5_process+0xb30>)
 801a62a:	4413      	add	r3, r2
 801a62c:	653b      	str	r3, [r7, #80]	; 0x50
 801a62e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a630:	ea4f 2373 	mov.w	r3, r3, ror #9
 801a634:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a636:	4413      	add	r3, r2
 801a638:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 13,  4, 0x289B7EC6 );
 801a63a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a63c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a63e:	405a      	eors	r2, r3
 801a640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a642:	405a      	eors	r2, r3
 801a644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a646:	441a      	add	r2, r3
 801a648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a64a:	441a      	add	r2, r3
 801a64c:	4b74      	ldr	r3, [pc, #464]	; (801a820 <mbedtls_internal_md5_process+0xb34>)
 801a64e:	4413      	add	r3, r2
 801a650:	657b      	str	r3, [r7, #84]	; 0x54
 801a652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a654:	ea4f 7333 	mov.w	r3, r3, ror #28
 801a658:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a65a:	4413      	add	r3, r2
 801a65c:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  0, 11, 0xEAA127FA );
 801a65e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a662:	405a      	eors	r2, r3
 801a664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a666:	405a      	eors	r2, r3
 801a668:	68bb      	ldr	r3, [r7, #8]
 801a66a:	441a      	add	r2, r3
 801a66c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a66e:	441a      	add	r2, r3
 801a670:	4b6c      	ldr	r3, [pc, #432]	; (801a824 <mbedtls_internal_md5_process+0xb38>)
 801a672:	4413      	add	r3, r2
 801a674:	64bb      	str	r3, [r7, #72]	; 0x48
 801a676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a678:	ea4f 5373 	mov.w	r3, r3, ror #21
 801a67c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a67e:	4413      	add	r3, r2
 801a680:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  3, 16, 0xD4EF3085 );
 801a682:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a686:	405a      	eors	r2, r3
 801a688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a68a:	405a      	eors	r2, r3
 801a68c:	697b      	ldr	r3, [r7, #20]
 801a68e:	441a      	add	r2, r3
 801a690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a692:	441a      	add	r2, r3
 801a694:	4b64      	ldr	r3, [pc, #400]	; (801a828 <mbedtls_internal_md5_process+0xb3c>)
 801a696:	4413      	add	r3, r2
 801a698:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a69a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a69c:	ea4f 4333 	mov.w	r3, r3, ror #16
 801a6a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a6a2:	4413      	add	r3, r2
 801a6a4:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  6, 23, 0x04881D05 );
 801a6a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a6a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a6aa:	405a      	eors	r2, r3
 801a6ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a6ae:	405a      	eors	r2, r3
 801a6b0:	6a3b      	ldr	r3, [r7, #32]
 801a6b2:	441a      	add	r2, r3
 801a6b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a6b6:	441a      	add	r2, r3
 801a6b8:	4b5c      	ldr	r3, [pc, #368]	; (801a82c <mbedtls_internal_md5_process+0xb40>)
 801a6ba:	4413      	add	r3, r2
 801a6bc:	653b      	str	r3, [r7, #80]	; 0x50
 801a6be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a6c0:	ea4f 2373 	mov.w	r3, r3, ror #9
 801a6c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a6c6:	4413      	add	r3, r2
 801a6c8:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  9,  4, 0xD9D4D039 );
 801a6ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a6cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a6ce:	405a      	eors	r2, r3
 801a6d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a6d2:	405a      	eors	r2, r3
 801a6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6d6:	441a      	add	r2, r3
 801a6d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a6da:	441a      	add	r2, r3
 801a6dc:	4b54      	ldr	r3, [pc, #336]	; (801a830 <mbedtls_internal_md5_process+0xb44>)
 801a6de:	4413      	add	r3, r2
 801a6e0:	657b      	str	r3, [r7, #84]	; 0x54
 801a6e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a6e4:	ea4f 7333 	mov.w	r3, r3, ror #28
 801a6e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a6ea:	4413      	add	r3, r2
 801a6ec:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 12, 11, 0xE6DB99E5 );
 801a6ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a6f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a6f2:	405a      	eors	r2, r3
 801a6f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a6f6:	405a      	eors	r2, r3
 801a6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a6fa:	441a      	add	r2, r3
 801a6fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a6fe:	441a      	add	r2, r3
 801a700:	4b4c      	ldr	r3, [pc, #304]	; (801a834 <mbedtls_internal_md5_process+0xb48>)
 801a702:	4413      	add	r3, r2
 801a704:	64bb      	str	r3, [r7, #72]	; 0x48
 801a706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a708:	ea4f 5373 	mov.w	r3, r3, ror #21
 801a70c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a70e:	4413      	add	r3, r2
 801a710:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 15, 16, 0x1FA27CF8 );
 801a712:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a716:	405a      	eors	r2, r3
 801a718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a71a:	405a      	eors	r2, r3
 801a71c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a71e:	441a      	add	r2, r3
 801a720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a722:	441a      	add	r2, r3
 801a724:	4b44      	ldr	r3, [pc, #272]	; (801a838 <mbedtls_internal_md5_process+0xb4c>)
 801a726:	4413      	add	r3, r2
 801a728:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a72a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a72c:	ea4f 4333 	mov.w	r3, r3, ror #16
 801a730:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a732:	4413      	add	r3, r2
 801a734:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  2, 23, 0xC4AC5665 );
 801a736:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a73a:	405a      	eors	r2, r3
 801a73c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a73e:	405a      	eors	r2, r3
 801a740:	693b      	ldr	r3, [r7, #16]
 801a742:	441a      	add	r2, r3
 801a744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a746:	441a      	add	r2, r3
 801a748:	4b3c      	ldr	r3, [pc, #240]	; (801a83c <mbedtls_internal_md5_process+0xb50>)
 801a74a:	4413      	add	r3, r2
 801a74c:	653b      	str	r3, [r7, #80]	; 0x50
 801a74e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a750:	ea4f 2373 	mov.w	r3, r3, ror #9
 801a754:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a756:	4413      	add	r3, r2
 801a758:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) ((y) ^ ((x) | ~(z)))

    P( A, B, C, D,  0,  6, 0xF4292244 );
 801a75a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a75c:	43da      	mvns	r2, r3
 801a75e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a760:	431a      	orrs	r2, r3
 801a762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a764:	405a      	eors	r2, r3
 801a766:	68bb      	ldr	r3, [r7, #8]
 801a768:	441a      	add	r2, r3
 801a76a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a76c:	441a      	add	r2, r3
 801a76e:	4b34      	ldr	r3, [pc, #208]	; (801a840 <mbedtls_internal_md5_process+0xb54>)
 801a770:	4413      	add	r3, r2
 801a772:	657b      	str	r3, [r7, #84]	; 0x54
 801a774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a776:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801a77a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a77c:	4413      	add	r3, r2
 801a77e:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  7, 10, 0x432AFF97 );
 801a780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a782:	43da      	mvns	r2, r3
 801a784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a786:	431a      	orrs	r2, r3
 801a788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a78a:	405a      	eors	r2, r3
 801a78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a78e:	441a      	add	r2, r3
 801a790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a792:	441a      	add	r2, r3
 801a794:	4b2b      	ldr	r3, [pc, #172]	; (801a844 <mbedtls_internal_md5_process+0xb58>)
 801a796:	4413      	add	r3, r2
 801a798:	64bb      	str	r3, [r7, #72]	; 0x48
 801a79a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a79c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801a7a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a7a2:	4413      	add	r3, r2
 801a7a4:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 14, 15, 0xAB9423A7 );
 801a7a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a7a8:	43da      	mvns	r2, r3
 801a7aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a7ac:	431a      	orrs	r2, r3
 801a7ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a7b0:	405a      	eors	r2, r3
 801a7b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a7b4:	441a      	add	r2, r3
 801a7b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a7b8:	441a      	add	r2, r3
 801a7ba:	4b23      	ldr	r3, [pc, #140]	; (801a848 <mbedtls_internal_md5_process+0xb5c>)
 801a7bc:	4413      	add	r3, r2
 801a7be:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a7c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a7c2:	ea4f 4373 	mov.w	r3, r3, ror #17
 801a7c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a7c8:	4413      	add	r3, r2
 801a7ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  5, 21, 0xFC93A039 );
 801a7cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a7ce:	43da      	mvns	r2, r3
 801a7d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a7d2:	431a      	orrs	r2, r3
 801a7d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a7d6:	405a      	eors	r2, r3
 801a7d8:	69fb      	ldr	r3, [r7, #28]
 801a7da:	441a      	add	r2, r3
 801a7dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a7de:	441a      	add	r2, r3
 801a7e0:	4b1a      	ldr	r3, [pc, #104]	; (801a84c <mbedtls_internal_md5_process+0xb60>)
 801a7e2:	4413      	add	r3, r2
 801a7e4:	653b      	str	r3, [r7, #80]	; 0x50
 801a7e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a7e8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801a7ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a7ee:	4413      	add	r3, r2
 801a7f0:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 12,  6, 0x655B59C3 );
 801a7f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a7f4:	43da      	mvns	r2, r3
 801a7f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a7f8:	431a      	orrs	r2, r3
 801a7fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a7fc:	405a      	eors	r2, r3
 801a7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a800:	441a      	add	r2, r3
 801a802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a804:	e024      	b.n	801a850 <mbedtls_internal_md5_process+0xb64>
 801a806:	bf00      	nop
 801a808:	6d9d6122 	.word	0x6d9d6122
 801a80c:	fde5380c 	.word	0xfde5380c
 801a810:	a4beea44 	.word	0xa4beea44
 801a814:	4bdecfa9 	.word	0x4bdecfa9
 801a818:	f6bb4b60 	.word	0xf6bb4b60
 801a81c:	bebfbc70 	.word	0xbebfbc70
 801a820:	289b7ec6 	.word	0x289b7ec6
 801a824:	eaa127fa 	.word	0xeaa127fa
 801a828:	d4ef3085 	.word	0xd4ef3085
 801a82c:	04881d05 	.word	0x04881d05
 801a830:	d9d4d039 	.word	0xd9d4d039
 801a834:	e6db99e5 	.word	0xe6db99e5
 801a838:	1fa27cf8 	.word	0x1fa27cf8
 801a83c:	c4ac5665 	.word	0xc4ac5665
 801a840:	f4292244 	.word	0xf4292244
 801a844:	432aff97 	.word	0x432aff97
 801a848:	ab9423a7 	.word	0xab9423a7
 801a84c:	fc93a039 	.word	0xfc93a039
 801a850:	441a      	add	r2, r3
 801a852:	4b7d      	ldr	r3, [pc, #500]	; (801aa48 <mbedtls_internal_md5_process+0xd5c>)
 801a854:	4413      	add	r3, r2
 801a856:	657b      	str	r3, [r7, #84]	; 0x54
 801a858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a85a:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801a85e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a860:	4413      	add	r3, r2
 801a862:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  3, 10, 0x8F0CCC92 );
 801a864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a866:	43da      	mvns	r2, r3
 801a868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a86a:	431a      	orrs	r2, r3
 801a86c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a86e:	405a      	eors	r2, r3
 801a870:	697b      	ldr	r3, [r7, #20]
 801a872:	441a      	add	r2, r3
 801a874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a876:	441a      	add	r2, r3
 801a878:	4b74      	ldr	r3, [pc, #464]	; (801aa4c <mbedtls_internal_md5_process+0xd60>)
 801a87a:	4413      	add	r3, r2
 801a87c:	64bb      	str	r3, [r7, #72]	; 0x48
 801a87e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a880:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801a884:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a886:	4413      	add	r3, r2
 801a888:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 10, 15, 0xFFEFF47D );
 801a88a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a88c:	43da      	mvns	r2, r3
 801a88e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a890:	431a      	orrs	r2, r3
 801a892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a894:	405a      	eors	r2, r3
 801a896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a898:	441a      	add	r2, r3
 801a89a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a89c:	4413      	add	r3, r2
 801a89e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801a8a2:	f6a3 3383 	subw	r3, r3, #2947	; 0xb83
 801a8a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a8a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a8aa:	ea4f 4373 	mov.w	r3, r3, ror #17
 801a8ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a8b0:	4413      	add	r3, r2
 801a8b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  1, 21, 0x85845DD1 );
 801a8b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a8b6:	43da      	mvns	r2, r3
 801a8b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a8ba:	431a      	orrs	r2, r3
 801a8bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a8be:	405a      	eors	r2, r3
 801a8c0:	68fb      	ldr	r3, [r7, #12]
 801a8c2:	441a      	add	r2, r3
 801a8c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a8c6:	441a      	add	r2, r3
 801a8c8:	4b61      	ldr	r3, [pc, #388]	; (801aa50 <mbedtls_internal_md5_process+0xd64>)
 801a8ca:	4413      	add	r3, r2
 801a8cc:	653b      	str	r3, [r7, #80]	; 0x50
 801a8ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a8d0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801a8d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a8d6:	4413      	add	r3, r2
 801a8d8:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  8,  6, 0x6FA87E4F );
 801a8da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a8dc:	43da      	mvns	r2, r3
 801a8de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a8e0:	431a      	orrs	r2, r3
 801a8e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a8e4:	405a      	eors	r2, r3
 801a8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8e8:	441a      	add	r2, r3
 801a8ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a8ec:	441a      	add	r2, r3
 801a8ee:	4b59      	ldr	r3, [pc, #356]	; (801aa54 <mbedtls_internal_md5_process+0xd68>)
 801a8f0:	4413      	add	r3, r2
 801a8f2:	657b      	str	r3, [r7, #84]	; 0x54
 801a8f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a8f6:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801a8fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a8fc:	4413      	add	r3, r2
 801a8fe:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 15, 10, 0xFE2CE6E0 );
 801a900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a902:	43da      	mvns	r2, r3
 801a904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a906:	431a      	orrs	r2, r3
 801a908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a90a:	405a      	eors	r2, r3
 801a90c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a90e:	441a      	add	r2, r3
 801a910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a912:	441a      	add	r2, r3
 801a914:	4b50      	ldr	r3, [pc, #320]	; (801aa58 <mbedtls_internal_md5_process+0xd6c>)
 801a916:	4413      	add	r3, r2
 801a918:	64bb      	str	r3, [r7, #72]	; 0x48
 801a91a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a91c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801a920:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a922:	4413      	add	r3, r2
 801a924:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  6, 15, 0xA3014314 );
 801a926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a928:	43da      	mvns	r2, r3
 801a92a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a92c:	431a      	orrs	r2, r3
 801a92e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a930:	405a      	eors	r2, r3
 801a932:	6a3b      	ldr	r3, [r7, #32]
 801a934:	441a      	add	r2, r3
 801a936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a938:	441a      	add	r2, r3
 801a93a:	4b48      	ldr	r3, [pc, #288]	; (801aa5c <mbedtls_internal_md5_process+0xd70>)
 801a93c:	4413      	add	r3, r2
 801a93e:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a942:	ea4f 4373 	mov.w	r3, r3, ror #17
 801a946:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a948:	4413      	add	r3, r2
 801a94a:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 13, 21, 0x4E0811A1 );
 801a94c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a94e:	43da      	mvns	r2, r3
 801a950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a952:	431a      	orrs	r2, r3
 801a954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a956:	405a      	eors	r2, r3
 801a958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a95a:	441a      	add	r2, r3
 801a95c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a95e:	441a      	add	r2, r3
 801a960:	4b3f      	ldr	r3, [pc, #252]	; (801aa60 <mbedtls_internal_md5_process+0xd74>)
 801a962:	4413      	add	r3, r2
 801a964:	653b      	str	r3, [r7, #80]	; 0x50
 801a966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a968:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801a96c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a96e:	4413      	add	r3, r2
 801a970:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  4,  6, 0xF7537E82 );
 801a972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a974:	43da      	mvns	r2, r3
 801a976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a978:	431a      	orrs	r2, r3
 801a97a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a97c:	405a      	eors	r2, r3
 801a97e:	69bb      	ldr	r3, [r7, #24]
 801a980:	441a      	add	r2, r3
 801a982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a984:	441a      	add	r2, r3
 801a986:	4b37      	ldr	r3, [pc, #220]	; (801aa64 <mbedtls_internal_md5_process+0xd78>)
 801a988:	4413      	add	r3, r2
 801a98a:	657b      	str	r3, [r7, #84]	; 0x54
 801a98c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a98e:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801a992:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a994:	4413      	add	r3, r2
 801a996:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 11, 10, 0xBD3AF235 );
 801a998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a99a:	43da      	mvns	r2, r3
 801a99c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a99e:	431a      	orrs	r2, r3
 801a9a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a9a2:	405a      	eors	r2, r3
 801a9a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a9a6:	441a      	add	r2, r3
 801a9a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a9aa:	441a      	add	r2, r3
 801a9ac:	4b2e      	ldr	r3, [pc, #184]	; (801aa68 <mbedtls_internal_md5_process+0xd7c>)
 801a9ae:	4413      	add	r3, r2
 801a9b0:	64bb      	str	r3, [r7, #72]	; 0x48
 801a9b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a9b4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801a9b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a9ba:	4413      	add	r3, r2
 801a9bc:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  2, 15, 0x2AD7D2BB );
 801a9be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a9c0:	43da      	mvns	r2, r3
 801a9c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a9c4:	431a      	orrs	r2, r3
 801a9c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a9c8:	405a      	eors	r2, r3
 801a9ca:	693b      	ldr	r3, [r7, #16]
 801a9cc:	441a      	add	r2, r3
 801a9ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a9d0:	441a      	add	r2, r3
 801a9d2:	4b26      	ldr	r3, [pc, #152]	; (801aa6c <mbedtls_internal_md5_process+0xd80>)
 801a9d4:	4413      	add	r3, r2
 801a9d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a9d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a9da:	ea4f 4373 	mov.w	r3, r3, ror #17
 801a9de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a9e0:	4413      	add	r3, r2
 801a9e2:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  9, 21, 0xEB86D391 );
 801a9e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a9e6:	43da      	mvns	r2, r3
 801a9e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a9ea:	431a      	orrs	r2, r3
 801a9ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a9ee:	405a      	eors	r2, r3
 801a9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9f2:	441a      	add	r2, r3
 801a9f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a9f6:	441a      	add	r2, r3
 801a9f8:	4b1d      	ldr	r3, [pc, #116]	; (801aa70 <mbedtls_internal_md5_process+0xd84>)
 801a9fa:	4413      	add	r3, r2
 801a9fc:	653b      	str	r3, [r7, #80]	; 0x50
 801a9fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aa00:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801aa04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801aa06:	4413      	add	r3, r2
 801aa08:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

    ctx->state[0] += A;
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	689a      	ldr	r2, [r3, #8]
 801aa0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801aa10:	441a      	add	r2, r3
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	609a      	str	r2, [r3, #8]
    ctx->state[1] += B;
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	68da      	ldr	r2, [r3, #12]
 801aa1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801aa1c:	441a      	add	r2, r3
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	60da      	str	r2, [r3, #12]
    ctx->state[2] += C;
 801aa22:	687b      	ldr	r3, [r7, #4]
 801aa24:	691a      	ldr	r2, [r3, #16]
 801aa26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801aa28:	441a      	add	r2, r3
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	611a      	str	r2, [r3, #16]
    ctx->state[3] += D;
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	695a      	ldr	r2, [r3, #20]
 801aa32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801aa34:	441a      	add	r2, r3
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	615a      	str	r2, [r3, #20]

    return( 0 );
 801aa3a:	2300      	movs	r3, #0
}
 801aa3c:	4618      	mov	r0, r3
 801aa3e:	375c      	adds	r7, #92	; 0x5c
 801aa40:	46bd      	mov	sp, r7
 801aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa46:	4770      	bx	lr
 801aa48:	655b59c3 	.word	0x655b59c3
 801aa4c:	8f0ccc92 	.word	0x8f0ccc92
 801aa50:	85845dd1 	.word	0x85845dd1
 801aa54:	6fa87e4f 	.word	0x6fa87e4f
 801aa58:	fe2ce6e0 	.word	0xfe2ce6e0
 801aa5c:	a3014314 	.word	0xa3014314
 801aa60:	4e0811a1 	.word	0x4e0811a1
 801aa64:	f7537e82 	.word	0xf7537e82
 801aa68:	bd3af235 	.word	0xbd3af235
 801aa6c:	2ad7d2bb 	.word	0x2ad7d2bb
 801aa70:	eb86d391 	.word	0xeb86d391

0801aa74 <mbedtls_md5_update_ret>:
 * MD5 process buffer
 */
int mbedtls_md5_update_ret( mbedtls_md5_context *ctx,
                            const unsigned char *input,
                            size_t ilen )
{
 801aa74:	b580      	push	{r7, lr}
 801aa76:	b088      	sub	sp, #32
 801aa78:	af00      	add	r7, sp, #0
 801aa7a:	60f8      	str	r0, [r7, #12]
 801aa7c:	60b9      	str	r1, [r7, #8]
 801aa7e:	607a      	str	r2, [r7, #4]
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	2b00      	cmp	r3, #0
 801aa84:	d101      	bne.n	801aa8a <mbedtls_md5_update_ret+0x16>
        return( 0 );
 801aa86:	2300      	movs	r3, #0
 801aa88:	e065      	b.n	801ab56 <mbedtls_md5_update_ret+0xe2>

    left = ctx->total[0] & 0x3F;
 801aa8a:	68fb      	ldr	r3, [r7, #12]
 801aa8c:	681b      	ldr	r3, [r3, #0]
 801aa8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801aa92:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 801aa94:	69fb      	ldr	r3, [r7, #28]
 801aa96:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801aa9a:	61bb      	str	r3, [r7, #24]

    ctx->total[0] += (uint32_t) ilen;
 801aa9c:	68fb      	ldr	r3, [r7, #12]
 801aa9e:	681a      	ldr	r2, [r3, #0]
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	441a      	add	r2, r3
 801aaa4:	68fb      	ldr	r3, [r7, #12]
 801aaa6:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 801aaa8:	68fb      	ldr	r3, [r7, #12]
 801aaaa:	681a      	ldr	r2, [r3, #0]
 801aaac:	68fb      	ldr	r3, [r7, #12]
 801aaae:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (uint32_t) ilen )
 801aab0:	68fb      	ldr	r3, [r7, #12]
 801aab2:	681b      	ldr	r3, [r3, #0]
 801aab4:	687a      	ldr	r2, [r7, #4]
 801aab6:	429a      	cmp	r2, r3
 801aab8:	d904      	bls.n	801aac4 <mbedtls_md5_update_ret+0x50>
        ctx->total[1]++;
 801aaba:	68fb      	ldr	r3, [r7, #12]
 801aabc:	685b      	ldr	r3, [r3, #4]
 801aabe:	1c5a      	adds	r2, r3, #1
 801aac0:	68fb      	ldr	r3, [r7, #12]
 801aac2:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
 801aac4:	69fb      	ldr	r3, [r7, #28]
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	d034      	beq.n	801ab34 <mbedtls_md5_update_ret+0xc0>
 801aaca:	687a      	ldr	r2, [r7, #4]
 801aacc:	69bb      	ldr	r3, [r7, #24]
 801aace:	429a      	cmp	r2, r3
 801aad0:	d330      	bcc.n	801ab34 <mbedtls_md5_update_ret+0xc0>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 801aad2:	68fb      	ldr	r3, [r7, #12]
 801aad4:	f103 0218 	add.w	r2, r3, #24
 801aad8:	69fb      	ldr	r3, [r7, #28]
 801aada:	4413      	add	r3, r2
 801aadc:	69ba      	ldr	r2, [r7, #24]
 801aade:	68b9      	ldr	r1, [r7, #8]
 801aae0:	4618      	mov	r0, r3
 801aae2:	f001 fcb6 	bl	801c452 <memcpy>
        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 801aae6:	68fb      	ldr	r3, [r7, #12]
 801aae8:	3318      	adds	r3, #24
 801aaea:	4619      	mov	r1, r3
 801aaec:	68f8      	ldr	r0, [r7, #12]
 801aaee:	f7ff f8fd 	bl	8019cec <mbedtls_internal_md5_process>
 801aaf2:	6178      	str	r0, [r7, #20]
 801aaf4:	697b      	ldr	r3, [r7, #20]
 801aaf6:	2b00      	cmp	r3, #0
 801aaf8:	d001      	beq.n	801aafe <mbedtls_md5_update_ret+0x8a>
            return( ret );
 801aafa:	697b      	ldr	r3, [r7, #20]
 801aafc:	e02b      	b.n	801ab56 <mbedtls_md5_update_ret+0xe2>

        input += fill;
 801aafe:	68ba      	ldr	r2, [r7, #8]
 801ab00:	69bb      	ldr	r3, [r7, #24]
 801ab02:	4413      	add	r3, r2
 801ab04:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 801ab06:	687a      	ldr	r2, [r7, #4]
 801ab08:	69bb      	ldr	r3, [r7, #24]
 801ab0a:	1ad3      	subs	r3, r2, r3
 801ab0c:	607b      	str	r3, [r7, #4]
        left = 0;
 801ab0e:	2300      	movs	r3, #0
 801ab10:	61fb      	str	r3, [r7, #28]
    }

    while( ilen >= 64 )
 801ab12:	e00f      	b.n	801ab34 <mbedtls_md5_update_ret+0xc0>
    {
        if( ( ret = mbedtls_internal_md5_process( ctx, input ) ) != 0 )
 801ab14:	68b9      	ldr	r1, [r7, #8]
 801ab16:	68f8      	ldr	r0, [r7, #12]
 801ab18:	f7ff f8e8 	bl	8019cec <mbedtls_internal_md5_process>
 801ab1c:	6178      	str	r0, [r7, #20]
 801ab1e:	697b      	ldr	r3, [r7, #20]
 801ab20:	2b00      	cmp	r3, #0
 801ab22:	d001      	beq.n	801ab28 <mbedtls_md5_update_ret+0xb4>
            return( ret );
 801ab24:	697b      	ldr	r3, [r7, #20]
 801ab26:	e016      	b.n	801ab56 <mbedtls_md5_update_ret+0xe2>

        input += 64;
 801ab28:	68bb      	ldr	r3, [r7, #8]
 801ab2a:	3340      	adds	r3, #64	; 0x40
 801ab2c:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 801ab2e:	687b      	ldr	r3, [r7, #4]
 801ab30:	3b40      	subs	r3, #64	; 0x40
 801ab32:	607b      	str	r3, [r7, #4]
    while( ilen >= 64 )
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	2b3f      	cmp	r3, #63	; 0x3f
 801ab38:	d8ec      	bhi.n	801ab14 <mbedtls_md5_update_ret+0xa0>
    }

    if( ilen > 0 )
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d009      	beq.n	801ab54 <mbedtls_md5_update_ret+0xe0>
    {
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 801ab40:	68fb      	ldr	r3, [r7, #12]
 801ab42:	f103 0218 	add.w	r2, r3, #24
 801ab46:	69fb      	ldr	r3, [r7, #28]
 801ab48:	4413      	add	r3, r2
 801ab4a:	687a      	ldr	r2, [r7, #4]
 801ab4c:	68b9      	ldr	r1, [r7, #8]
 801ab4e:	4618      	mov	r0, r3
 801ab50:	f001 fc7f 	bl	801c452 <memcpy>
    }

    return( 0 );
 801ab54:	2300      	movs	r3, #0
}
 801ab56:	4618      	mov	r0, r3
 801ab58:	3720      	adds	r7, #32
 801ab5a:	46bd      	mov	sp, r7
 801ab5c:	bd80      	pop	{r7, pc}

0801ab5e <mbedtls_md5_finish_ret>:
/*
 * MD5 final digest
 */
int mbedtls_md5_finish_ret( mbedtls_md5_context *ctx,
                            unsigned char output[16] )
{
 801ab5e:	b580      	push	{r7, lr}
 801ab60:	b086      	sub	sp, #24
 801ab62:	af00      	add	r7, sp, #0
 801ab64:	6078      	str	r0, [r7, #4]
 801ab66:	6039      	str	r1, [r7, #0]
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	681b      	ldr	r3, [r3, #0]
 801ab6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ab70:	617b      	str	r3, [r7, #20]

    ctx->buffer[used++] = 0x80;
 801ab72:	697b      	ldr	r3, [r7, #20]
 801ab74:	1c5a      	adds	r2, r3, #1
 801ab76:	617a      	str	r2, [r7, #20]
 801ab78:	687a      	ldr	r2, [r7, #4]
 801ab7a:	4413      	add	r3, r2
 801ab7c:	2280      	movs	r2, #128	; 0x80
 801ab7e:	761a      	strb	r2, [r3, #24]

    if( used <= 56 )
 801ab80:	697b      	ldr	r3, [r7, #20]
 801ab82:	2b38      	cmp	r3, #56	; 0x38
 801ab84:	d80c      	bhi.n	801aba0 <mbedtls_md5_finish_ret+0x42>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 801ab86:	687b      	ldr	r3, [r7, #4]
 801ab88:	f103 0218 	add.w	r2, r3, #24
 801ab8c:	697b      	ldr	r3, [r7, #20]
 801ab8e:	18d0      	adds	r0, r2, r3
 801ab90:	697b      	ldr	r3, [r7, #20]
 801ab92:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801ab96:	461a      	mov	r2, r3
 801ab98:	2100      	movs	r1, #0
 801ab9a:	f001 fa85 	bl	801c0a8 <memset>
 801ab9e:	e01e      	b.n	801abde <mbedtls_md5_finish_ret+0x80>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	f103 0218 	add.w	r2, r3, #24
 801aba6:	697b      	ldr	r3, [r7, #20]
 801aba8:	18d0      	adds	r0, r2, r3
 801abaa:	697b      	ldr	r3, [r7, #20]
 801abac:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801abb0:	461a      	mov	r2, r3
 801abb2:	2100      	movs	r1, #0
 801abb4:	f001 fa78 	bl	801c0a8 <memset>

        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	3318      	adds	r3, #24
 801abbc:	4619      	mov	r1, r3
 801abbe:	6878      	ldr	r0, [r7, #4]
 801abc0:	f7ff f894 	bl	8019cec <mbedtls_internal_md5_process>
 801abc4:	6138      	str	r0, [r7, #16]
 801abc6:	693b      	ldr	r3, [r7, #16]
 801abc8:	2b00      	cmp	r3, #0
 801abca:	d001      	beq.n	801abd0 <mbedtls_md5_finish_ret+0x72>
            return( ret );
 801abcc:	693b      	ldr	r3, [r7, #16]
 801abce:	e0b8      	b.n	801ad42 <mbedtls_md5_finish_ret+0x1e4>

        memset( ctx->buffer, 0, 56 );
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	3318      	adds	r3, #24
 801abd4:	2238      	movs	r2, #56	; 0x38
 801abd6:	2100      	movs	r1, #0
 801abd8:	4618      	mov	r0, r3
 801abda:	f001 fa65 	bl	801c0a8 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 801abde:	687b      	ldr	r3, [r7, #4]
 801abe0:	681b      	ldr	r3, [r3, #0]
 801abe2:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 801abe4:	687b      	ldr	r3, [r7, #4]
 801abe6:	685b      	ldr	r3, [r3, #4]
 801abe8:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 801abea:	4313      	orrs	r3, r2
 801abec:	60fb      	str	r3, [r7, #12]
    low  = ( ctx->total[0] <<  3 );
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	681b      	ldr	r3, [r3, #0]
 801abf2:	00db      	lsls	r3, r3, #3
 801abf4:	60bb      	str	r3, [r7, #8]

    PUT_UINT32_LE( low,  ctx->buffer, 56 );
 801abf6:	68bb      	ldr	r3, [r7, #8]
 801abf8:	b2da      	uxtb	r2, r3
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 801ac00:	68bb      	ldr	r3, [r7, #8]
 801ac02:	0a1b      	lsrs	r3, r3, #8
 801ac04:	b2da      	uxtb	r2, r3
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 801ac0c:	68bb      	ldr	r3, [r7, #8]
 801ac0e:	0c1b      	lsrs	r3, r3, #16
 801ac10:	b2da      	uxtb	r2, r3
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 801ac18:	68bb      	ldr	r3, [r7, #8]
 801ac1a:	0e1b      	lsrs	r3, r3, #24
 801ac1c:	b2da      	uxtb	r2, r3
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    PUT_UINT32_LE( high, ctx->buffer, 60 );
 801ac24:	68fb      	ldr	r3, [r7, #12]
 801ac26:	b2da      	uxtb	r2, r3
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 801ac2e:	68fb      	ldr	r3, [r7, #12]
 801ac30:	0a1b      	lsrs	r3, r3, #8
 801ac32:	b2da      	uxtb	r2, r3
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 801ac3a:	68fb      	ldr	r3, [r7, #12]
 801ac3c:	0c1b      	lsrs	r3, r3, #16
 801ac3e:	b2da      	uxtb	r2, r3
 801ac40:	687b      	ldr	r3, [r7, #4]
 801ac42:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 801ac46:	68fb      	ldr	r3, [r7, #12]
 801ac48:	0e1b      	lsrs	r3, r3, #24
 801ac4a:	b2da      	uxtb	r2, r3
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

    if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 801ac52:	687b      	ldr	r3, [r7, #4]
 801ac54:	3318      	adds	r3, #24
 801ac56:	4619      	mov	r1, r3
 801ac58:	6878      	ldr	r0, [r7, #4]
 801ac5a:	f7ff f847 	bl	8019cec <mbedtls_internal_md5_process>
 801ac5e:	6138      	str	r0, [r7, #16]
 801ac60:	693b      	ldr	r3, [r7, #16]
 801ac62:	2b00      	cmp	r3, #0
 801ac64:	d001      	beq.n	801ac6a <mbedtls_md5_finish_ret+0x10c>
        return( ret );
 801ac66:	693b      	ldr	r3, [r7, #16]
 801ac68:	e06b      	b.n	801ad42 <mbedtls_md5_finish_ret+0x1e4>

    /*
     * Output final state
     */
    PUT_UINT32_LE( ctx->state[0], output,  0 );
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	689b      	ldr	r3, [r3, #8]
 801ac6e:	b2da      	uxtb	r2, r3
 801ac70:	683b      	ldr	r3, [r7, #0]
 801ac72:	701a      	strb	r2, [r3, #0]
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	689b      	ldr	r3, [r3, #8]
 801ac78:	0a1a      	lsrs	r2, r3, #8
 801ac7a:	683b      	ldr	r3, [r7, #0]
 801ac7c:	3301      	adds	r3, #1
 801ac7e:	b2d2      	uxtb	r2, r2
 801ac80:	701a      	strb	r2, [r3, #0]
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	689b      	ldr	r3, [r3, #8]
 801ac86:	0c1a      	lsrs	r2, r3, #16
 801ac88:	683b      	ldr	r3, [r7, #0]
 801ac8a:	3302      	adds	r3, #2
 801ac8c:	b2d2      	uxtb	r2, r2
 801ac8e:	701a      	strb	r2, [r3, #0]
 801ac90:	687b      	ldr	r3, [r7, #4]
 801ac92:	689b      	ldr	r3, [r3, #8]
 801ac94:	0e1a      	lsrs	r2, r3, #24
 801ac96:	683b      	ldr	r3, [r7, #0]
 801ac98:	3303      	adds	r3, #3
 801ac9a:	b2d2      	uxtb	r2, r2
 801ac9c:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[1], output,  4 );
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	68da      	ldr	r2, [r3, #12]
 801aca2:	683b      	ldr	r3, [r7, #0]
 801aca4:	3304      	adds	r3, #4
 801aca6:	b2d2      	uxtb	r2, r2
 801aca8:	701a      	strb	r2, [r3, #0]
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	68db      	ldr	r3, [r3, #12]
 801acae:	0a1a      	lsrs	r2, r3, #8
 801acb0:	683b      	ldr	r3, [r7, #0]
 801acb2:	3305      	adds	r3, #5
 801acb4:	b2d2      	uxtb	r2, r2
 801acb6:	701a      	strb	r2, [r3, #0]
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	68db      	ldr	r3, [r3, #12]
 801acbc:	0c1a      	lsrs	r2, r3, #16
 801acbe:	683b      	ldr	r3, [r7, #0]
 801acc0:	3306      	adds	r3, #6
 801acc2:	b2d2      	uxtb	r2, r2
 801acc4:	701a      	strb	r2, [r3, #0]
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	68db      	ldr	r3, [r3, #12]
 801acca:	0e1a      	lsrs	r2, r3, #24
 801accc:	683b      	ldr	r3, [r7, #0]
 801acce:	3307      	adds	r3, #7
 801acd0:	b2d2      	uxtb	r2, r2
 801acd2:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[2], output,  8 );
 801acd4:	687b      	ldr	r3, [r7, #4]
 801acd6:	691a      	ldr	r2, [r3, #16]
 801acd8:	683b      	ldr	r3, [r7, #0]
 801acda:	3308      	adds	r3, #8
 801acdc:	b2d2      	uxtb	r2, r2
 801acde:	701a      	strb	r2, [r3, #0]
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	691b      	ldr	r3, [r3, #16]
 801ace4:	0a1a      	lsrs	r2, r3, #8
 801ace6:	683b      	ldr	r3, [r7, #0]
 801ace8:	3309      	adds	r3, #9
 801acea:	b2d2      	uxtb	r2, r2
 801acec:	701a      	strb	r2, [r3, #0]
 801acee:	687b      	ldr	r3, [r7, #4]
 801acf0:	691b      	ldr	r3, [r3, #16]
 801acf2:	0c1a      	lsrs	r2, r3, #16
 801acf4:	683b      	ldr	r3, [r7, #0]
 801acf6:	330a      	adds	r3, #10
 801acf8:	b2d2      	uxtb	r2, r2
 801acfa:	701a      	strb	r2, [r3, #0]
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	691b      	ldr	r3, [r3, #16]
 801ad00:	0e1a      	lsrs	r2, r3, #24
 801ad02:	683b      	ldr	r3, [r7, #0]
 801ad04:	330b      	adds	r3, #11
 801ad06:	b2d2      	uxtb	r2, r2
 801ad08:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[3], output, 12 );
 801ad0a:	687b      	ldr	r3, [r7, #4]
 801ad0c:	695a      	ldr	r2, [r3, #20]
 801ad0e:	683b      	ldr	r3, [r7, #0]
 801ad10:	330c      	adds	r3, #12
 801ad12:	b2d2      	uxtb	r2, r2
 801ad14:	701a      	strb	r2, [r3, #0]
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	695b      	ldr	r3, [r3, #20]
 801ad1a:	0a1a      	lsrs	r2, r3, #8
 801ad1c:	683b      	ldr	r3, [r7, #0]
 801ad1e:	330d      	adds	r3, #13
 801ad20:	b2d2      	uxtb	r2, r2
 801ad22:	701a      	strb	r2, [r3, #0]
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	695b      	ldr	r3, [r3, #20]
 801ad28:	0c1a      	lsrs	r2, r3, #16
 801ad2a:	683b      	ldr	r3, [r7, #0]
 801ad2c:	330e      	adds	r3, #14
 801ad2e:	b2d2      	uxtb	r2, r2
 801ad30:	701a      	strb	r2, [r3, #0]
 801ad32:	687b      	ldr	r3, [r7, #4]
 801ad34:	695b      	ldr	r3, [r3, #20]
 801ad36:	0e1a      	lsrs	r2, r3, #24
 801ad38:	683b      	ldr	r3, [r7, #0]
 801ad3a:	330f      	adds	r3, #15
 801ad3c:	b2d2      	uxtb	r2, r2
 801ad3e:	701a      	strb	r2, [r3, #0]

    return( 0 );
 801ad40:	2300      	movs	r3, #0
}
 801ad42:	4618      	mov	r0, r3
 801ad44:	3718      	adds	r7, #24
 801ad46:	46bd      	mov	sp, r7
 801ad48:	bd80      	pop	{r7, pc}
	...

0801ad4c <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 801ad4c:	b580      	push	{r7, lr}
 801ad4e:	b082      	sub	sp, #8
 801ad50:	af00      	add	r7, sp, #0
 801ad52:	6078      	str	r0, [r7, #4]
 801ad54:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 801ad56:	4b05      	ldr	r3, [pc, #20]	; (801ad6c <mbedtls_platform_zeroize+0x20>)
 801ad58:	681b      	ldr	r3, [r3, #0]
 801ad5a:	683a      	ldr	r2, [r7, #0]
 801ad5c:	2100      	movs	r1, #0
 801ad5e:	6878      	ldr	r0, [r7, #4]
 801ad60:	4798      	blx	r3
}
 801ad62:	bf00      	nop
 801ad64:	3708      	adds	r7, #8
 801ad66:	46bd      	mov	sp, r7
 801ad68:	bd80      	pop	{r7, pc}
 801ad6a:	bf00      	nop
 801ad6c:	2000012c 	.word	0x2000012c

0801ad70 <__assert_func>:
 801ad70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ad72:	4614      	mov	r4, r2
 801ad74:	461a      	mov	r2, r3
 801ad76:	4b09      	ldr	r3, [pc, #36]	; (801ad9c <__assert_func+0x2c>)
 801ad78:	681b      	ldr	r3, [r3, #0]
 801ad7a:	4605      	mov	r5, r0
 801ad7c:	68d8      	ldr	r0, [r3, #12]
 801ad7e:	b14c      	cbz	r4, 801ad94 <__assert_func+0x24>
 801ad80:	4b07      	ldr	r3, [pc, #28]	; (801ada0 <__assert_func+0x30>)
 801ad82:	9100      	str	r1, [sp, #0]
 801ad84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ad88:	4906      	ldr	r1, [pc, #24]	; (801ada4 <__assert_func+0x34>)
 801ad8a:	462b      	mov	r3, r5
 801ad8c:	f000 fffa 	bl	801bd84 <fiprintf>
 801ad90:	f001 fb74 	bl	801c47c <abort>
 801ad94:	4b04      	ldr	r3, [pc, #16]	; (801ada8 <__assert_func+0x38>)
 801ad96:	461c      	mov	r4, r3
 801ad98:	e7f3      	b.n	801ad82 <__assert_func+0x12>
 801ad9a:	bf00      	nop
 801ad9c:	20000188 	.word	0x20000188
 801ada0:	08022f9c 	.word	0x08022f9c
 801ada4:	08022fa9 	.word	0x08022fa9
 801ada8:	08022fd7 	.word	0x08022fd7

0801adac <_calloc_r>:
 801adac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801adae:	fba1 2402 	umull	r2, r4, r1, r2
 801adb2:	b94c      	cbnz	r4, 801adc8 <_calloc_r+0x1c>
 801adb4:	4611      	mov	r1, r2
 801adb6:	9201      	str	r2, [sp, #4]
 801adb8:	f000 f83e 	bl	801ae38 <_malloc_r>
 801adbc:	9a01      	ldr	r2, [sp, #4]
 801adbe:	4605      	mov	r5, r0
 801adc0:	b930      	cbnz	r0, 801add0 <_calloc_r+0x24>
 801adc2:	4628      	mov	r0, r5
 801adc4:	b003      	add	sp, #12
 801adc6:	bd30      	pop	{r4, r5, pc}
 801adc8:	220c      	movs	r2, #12
 801adca:	6002      	str	r2, [r0, #0]
 801adcc:	2500      	movs	r5, #0
 801adce:	e7f8      	b.n	801adc2 <_calloc_r+0x16>
 801add0:	4621      	mov	r1, r4
 801add2:	f001 f969 	bl	801c0a8 <memset>
 801add6:	e7f4      	b.n	801adc2 <_calloc_r+0x16>

0801add8 <malloc>:
 801add8:	4b02      	ldr	r3, [pc, #8]	; (801ade4 <malloc+0xc>)
 801adda:	4601      	mov	r1, r0
 801addc:	6818      	ldr	r0, [r3, #0]
 801adde:	f000 b82b 	b.w	801ae38 <_malloc_r>
 801ade2:	bf00      	nop
 801ade4:	20000188 	.word	0x20000188

0801ade8 <free>:
 801ade8:	4b02      	ldr	r3, [pc, #8]	; (801adf4 <free+0xc>)
 801adea:	4601      	mov	r1, r0
 801adec:	6818      	ldr	r0, [r3, #0]
 801adee:	f002 b9c9 	b.w	801d184 <_free_r>
 801adf2:	bf00      	nop
 801adf4:	20000188 	.word	0x20000188

0801adf8 <sbrk_aligned>:
 801adf8:	b570      	push	{r4, r5, r6, lr}
 801adfa:	4e0e      	ldr	r6, [pc, #56]	; (801ae34 <sbrk_aligned+0x3c>)
 801adfc:	460c      	mov	r4, r1
 801adfe:	6831      	ldr	r1, [r6, #0]
 801ae00:	4605      	mov	r5, r0
 801ae02:	b911      	cbnz	r1, 801ae0a <sbrk_aligned+0x12>
 801ae04:	f001 face 	bl	801c3a4 <_sbrk_r>
 801ae08:	6030      	str	r0, [r6, #0]
 801ae0a:	4621      	mov	r1, r4
 801ae0c:	4628      	mov	r0, r5
 801ae0e:	f001 fac9 	bl	801c3a4 <_sbrk_r>
 801ae12:	1c43      	adds	r3, r0, #1
 801ae14:	d00a      	beq.n	801ae2c <sbrk_aligned+0x34>
 801ae16:	1cc4      	adds	r4, r0, #3
 801ae18:	f024 0403 	bic.w	r4, r4, #3
 801ae1c:	42a0      	cmp	r0, r4
 801ae1e:	d007      	beq.n	801ae30 <sbrk_aligned+0x38>
 801ae20:	1a21      	subs	r1, r4, r0
 801ae22:	4628      	mov	r0, r5
 801ae24:	f001 fabe 	bl	801c3a4 <_sbrk_r>
 801ae28:	3001      	adds	r0, #1
 801ae2a:	d101      	bne.n	801ae30 <sbrk_aligned+0x38>
 801ae2c:	f04f 34ff 	mov.w	r4, #4294967295
 801ae30:	4620      	mov	r0, r4
 801ae32:	bd70      	pop	{r4, r5, r6, pc}
 801ae34:	2000d948 	.word	0x2000d948

0801ae38 <_malloc_r>:
 801ae38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ae3c:	1ccd      	adds	r5, r1, #3
 801ae3e:	f025 0503 	bic.w	r5, r5, #3
 801ae42:	3508      	adds	r5, #8
 801ae44:	2d0c      	cmp	r5, #12
 801ae46:	bf38      	it	cc
 801ae48:	250c      	movcc	r5, #12
 801ae4a:	2d00      	cmp	r5, #0
 801ae4c:	4607      	mov	r7, r0
 801ae4e:	db01      	blt.n	801ae54 <_malloc_r+0x1c>
 801ae50:	42a9      	cmp	r1, r5
 801ae52:	d905      	bls.n	801ae60 <_malloc_r+0x28>
 801ae54:	230c      	movs	r3, #12
 801ae56:	603b      	str	r3, [r7, #0]
 801ae58:	2600      	movs	r6, #0
 801ae5a:	4630      	mov	r0, r6
 801ae5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ae60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801af34 <_malloc_r+0xfc>
 801ae64:	f000 f868 	bl	801af38 <__malloc_lock>
 801ae68:	f8d8 3000 	ldr.w	r3, [r8]
 801ae6c:	461c      	mov	r4, r3
 801ae6e:	bb5c      	cbnz	r4, 801aec8 <_malloc_r+0x90>
 801ae70:	4629      	mov	r1, r5
 801ae72:	4638      	mov	r0, r7
 801ae74:	f7ff ffc0 	bl	801adf8 <sbrk_aligned>
 801ae78:	1c43      	adds	r3, r0, #1
 801ae7a:	4604      	mov	r4, r0
 801ae7c:	d155      	bne.n	801af2a <_malloc_r+0xf2>
 801ae7e:	f8d8 4000 	ldr.w	r4, [r8]
 801ae82:	4626      	mov	r6, r4
 801ae84:	2e00      	cmp	r6, #0
 801ae86:	d145      	bne.n	801af14 <_malloc_r+0xdc>
 801ae88:	2c00      	cmp	r4, #0
 801ae8a:	d048      	beq.n	801af1e <_malloc_r+0xe6>
 801ae8c:	6823      	ldr	r3, [r4, #0]
 801ae8e:	4631      	mov	r1, r6
 801ae90:	4638      	mov	r0, r7
 801ae92:	eb04 0903 	add.w	r9, r4, r3
 801ae96:	f001 fa85 	bl	801c3a4 <_sbrk_r>
 801ae9a:	4581      	cmp	r9, r0
 801ae9c:	d13f      	bne.n	801af1e <_malloc_r+0xe6>
 801ae9e:	6821      	ldr	r1, [r4, #0]
 801aea0:	1a6d      	subs	r5, r5, r1
 801aea2:	4629      	mov	r1, r5
 801aea4:	4638      	mov	r0, r7
 801aea6:	f7ff ffa7 	bl	801adf8 <sbrk_aligned>
 801aeaa:	3001      	adds	r0, #1
 801aeac:	d037      	beq.n	801af1e <_malloc_r+0xe6>
 801aeae:	6823      	ldr	r3, [r4, #0]
 801aeb0:	442b      	add	r3, r5
 801aeb2:	6023      	str	r3, [r4, #0]
 801aeb4:	f8d8 3000 	ldr.w	r3, [r8]
 801aeb8:	2b00      	cmp	r3, #0
 801aeba:	d038      	beq.n	801af2e <_malloc_r+0xf6>
 801aebc:	685a      	ldr	r2, [r3, #4]
 801aebe:	42a2      	cmp	r2, r4
 801aec0:	d12b      	bne.n	801af1a <_malloc_r+0xe2>
 801aec2:	2200      	movs	r2, #0
 801aec4:	605a      	str	r2, [r3, #4]
 801aec6:	e00f      	b.n	801aee8 <_malloc_r+0xb0>
 801aec8:	6822      	ldr	r2, [r4, #0]
 801aeca:	1b52      	subs	r2, r2, r5
 801aecc:	d41f      	bmi.n	801af0e <_malloc_r+0xd6>
 801aece:	2a0b      	cmp	r2, #11
 801aed0:	d917      	bls.n	801af02 <_malloc_r+0xca>
 801aed2:	1961      	adds	r1, r4, r5
 801aed4:	42a3      	cmp	r3, r4
 801aed6:	6025      	str	r5, [r4, #0]
 801aed8:	bf18      	it	ne
 801aeda:	6059      	strne	r1, [r3, #4]
 801aedc:	6863      	ldr	r3, [r4, #4]
 801aede:	bf08      	it	eq
 801aee0:	f8c8 1000 	streq.w	r1, [r8]
 801aee4:	5162      	str	r2, [r4, r5]
 801aee6:	604b      	str	r3, [r1, #4]
 801aee8:	4638      	mov	r0, r7
 801aeea:	f104 060b 	add.w	r6, r4, #11
 801aeee:	f000 f829 	bl	801af44 <__malloc_unlock>
 801aef2:	f026 0607 	bic.w	r6, r6, #7
 801aef6:	1d23      	adds	r3, r4, #4
 801aef8:	1af2      	subs	r2, r6, r3
 801aefa:	d0ae      	beq.n	801ae5a <_malloc_r+0x22>
 801aefc:	1b9b      	subs	r3, r3, r6
 801aefe:	50a3      	str	r3, [r4, r2]
 801af00:	e7ab      	b.n	801ae5a <_malloc_r+0x22>
 801af02:	42a3      	cmp	r3, r4
 801af04:	6862      	ldr	r2, [r4, #4]
 801af06:	d1dd      	bne.n	801aec4 <_malloc_r+0x8c>
 801af08:	f8c8 2000 	str.w	r2, [r8]
 801af0c:	e7ec      	b.n	801aee8 <_malloc_r+0xb0>
 801af0e:	4623      	mov	r3, r4
 801af10:	6864      	ldr	r4, [r4, #4]
 801af12:	e7ac      	b.n	801ae6e <_malloc_r+0x36>
 801af14:	4634      	mov	r4, r6
 801af16:	6876      	ldr	r6, [r6, #4]
 801af18:	e7b4      	b.n	801ae84 <_malloc_r+0x4c>
 801af1a:	4613      	mov	r3, r2
 801af1c:	e7cc      	b.n	801aeb8 <_malloc_r+0x80>
 801af1e:	230c      	movs	r3, #12
 801af20:	603b      	str	r3, [r7, #0]
 801af22:	4638      	mov	r0, r7
 801af24:	f000 f80e 	bl	801af44 <__malloc_unlock>
 801af28:	e797      	b.n	801ae5a <_malloc_r+0x22>
 801af2a:	6025      	str	r5, [r4, #0]
 801af2c:	e7dc      	b.n	801aee8 <_malloc_r+0xb0>
 801af2e:	605b      	str	r3, [r3, #4]
 801af30:	deff      	udf	#255	; 0xff
 801af32:	bf00      	nop
 801af34:	2000d944 	.word	0x2000d944

0801af38 <__malloc_lock>:
 801af38:	4801      	ldr	r0, [pc, #4]	; (801af40 <__malloc_lock+0x8>)
 801af3a:	f001 ba80 	b.w	801c43e <__retarget_lock_acquire_recursive>
 801af3e:	bf00      	nop
 801af40:	2000da8c 	.word	0x2000da8c

0801af44 <__malloc_unlock>:
 801af44:	4801      	ldr	r0, [pc, #4]	; (801af4c <__malloc_unlock+0x8>)
 801af46:	f001 ba7b 	b.w	801c440 <__retarget_lock_release_recursive>
 801af4a:	bf00      	nop
 801af4c:	2000da8c 	.word	0x2000da8c

0801af50 <__cvt>:
 801af50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801af54:	ec55 4b10 	vmov	r4, r5, d0
 801af58:	2d00      	cmp	r5, #0
 801af5a:	460e      	mov	r6, r1
 801af5c:	4619      	mov	r1, r3
 801af5e:	462b      	mov	r3, r5
 801af60:	bfbb      	ittet	lt
 801af62:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801af66:	461d      	movlt	r5, r3
 801af68:	2300      	movge	r3, #0
 801af6a:	232d      	movlt	r3, #45	; 0x2d
 801af6c:	700b      	strb	r3, [r1, #0]
 801af6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801af70:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801af74:	4691      	mov	r9, r2
 801af76:	f023 0820 	bic.w	r8, r3, #32
 801af7a:	bfbc      	itt	lt
 801af7c:	4622      	movlt	r2, r4
 801af7e:	4614      	movlt	r4, r2
 801af80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801af84:	d005      	beq.n	801af92 <__cvt+0x42>
 801af86:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801af8a:	d100      	bne.n	801af8e <__cvt+0x3e>
 801af8c:	3601      	adds	r6, #1
 801af8e:	2102      	movs	r1, #2
 801af90:	e000      	b.n	801af94 <__cvt+0x44>
 801af92:	2103      	movs	r1, #3
 801af94:	ab03      	add	r3, sp, #12
 801af96:	9301      	str	r3, [sp, #4]
 801af98:	ab02      	add	r3, sp, #8
 801af9a:	9300      	str	r3, [sp, #0]
 801af9c:	ec45 4b10 	vmov	d0, r4, r5
 801afa0:	4653      	mov	r3, sl
 801afa2:	4632      	mov	r2, r6
 801afa4:	f001 fafc 	bl	801c5a0 <_dtoa_r>
 801afa8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801afac:	4607      	mov	r7, r0
 801afae:	d102      	bne.n	801afb6 <__cvt+0x66>
 801afb0:	f019 0f01 	tst.w	r9, #1
 801afb4:	d022      	beq.n	801affc <__cvt+0xac>
 801afb6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801afba:	eb07 0906 	add.w	r9, r7, r6
 801afbe:	d110      	bne.n	801afe2 <__cvt+0x92>
 801afc0:	783b      	ldrb	r3, [r7, #0]
 801afc2:	2b30      	cmp	r3, #48	; 0x30
 801afc4:	d10a      	bne.n	801afdc <__cvt+0x8c>
 801afc6:	2200      	movs	r2, #0
 801afc8:	2300      	movs	r3, #0
 801afca:	4620      	mov	r0, r4
 801afcc:	4629      	mov	r1, r5
 801afce:	f7e5 fd93 	bl	8000af8 <__aeabi_dcmpeq>
 801afd2:	b918      	cbnz	r0, 801afdc <__cvt+0x8c>
 801afd4:	f1c6 0601 	rsb	r6, r6, #1
 801afd8:	f8ca 6000 	str.w	r6, [sl]
 801afdc:	f8da 3000 	ldr.w	r3, [sl]
 801afe0:	4499      	add	r9, r3
 801afe2:	2200      	movs	r2, #0
 801afe4:	2300      	movs	r3, #0
 801afe6:	4620      	mov	r0, r4
 801afe8:	4629      	mov	r1, r5
 801afea:	f7e5 fd85 	bl	8000af8 <__aeabi_dcmpeq>
 801afee:	b108      	cbz	r0, 801aff4 <__cvt+0xa4>
 801aff0:	f8cd 900c 	str.w	r9, [sp, #12]
 801aff4:	2230      	movs	r2, #48	; 0x30
 801aff6:	9b03      	ldr	r3, [sp, #12]
 801aff8:	454b      	cmp	r3, r9
 801affa:	d307      	bcc.n	801b00c <__cvt+0xbc>
 801affc:	9b03      	ldr	r3, [sp, #12]
 801affe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b000:	1bdb      	subs	r3, r3, r7
 801b002:	4638      	mov	r0, r7
 801b004:	6013      	str	r3, [r2, #0]
 801b006:	b004      	add	sp, #16
 801b008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b00c:	1c59      	adds	r1, r3, #1
 801b00e:	9103      	str	r1, [sp, #12]
 801b010:	701a      	strb	r2, [r3, #0]
 801b012:	e7f0      	b.n	801aff6 <__cvt+0xa6>

0801b014 <__exponent>:
 801b014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b016:	4603      	mov	r3, r0
 801b018:	2900      	cmp	r1, #0
 801b01a:	bfb8      	it	lt
 801b01c:	4249      	neglt	r1, r1
 801b01e:	f803 2b02 	strb.w	r2, [r3], #2
 801b022:	bfb4      	ite	lt
 801b024:	222d      	movlt	r2, #45	; 0x2d
 801b026:	222b      	movge	r2, #43	; 0x2b
 801b028:	2909      	cmp	r1, #9
 801b02a:	7042      	strb	r2, [r0, #1]
 801b02c:	dd2a      	ble.n	801b084 <__exponent+0x70>
 801b02e:	f10d 0207 	add.w	r2, sp, #7
 801b032:	4617      	mov	r7, r2
 801b034:	260a      	movs	r6, #10
 801b036:	4694      	mov	ip, r2
 801b038:	fb91 f5f6 	sdiv	r5, r1, r6
 801b03c:	fb06 1415 	mls	r4, r6, r5, r1
 801b040:	3430      	adds	r4, #48	; 0x30
 801b042:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801b046:	460c      	mov	r4, r1
 801b048:	2c63      	cmp	r4, #99	; 0x63
 801b04a:	f102 32ff 	add.w	r2, r2, #4294967295
 801b04e:	4629      	mov	r1, r5
 801b050:	dcf1      	bgt.n	801b036 <__exponent+0x22>
 801b052:	3130      	adds	r1, #48	; 0x30
 801b054:	f1ac 0402 	sub.w	r4, ip, #2
 801b058:	f802 1c01 	strb.w	r1, [r2, #-1]
 801b05c:	1c41      	adds	r1, r0, #1
 801b05e:	4622      	mov	r2, r4
 801b060:	42ba      	cmp	r2, r7
 801b062:	d30a      	bcc.n	801b07a <__exponent+0x66>
 801b064:	f10d 0209 	add.w	r2, sp, #9
 801b068:	eba2 020c 	sub.w	r2, r2, ip
 801b06c:	42bc      	cmp	r4, r7
 801b06e:	bf88      	it	hi
 801b070:	2200      	movhi	r2, #0
 801b072:	4413      	add	r3, r2
 801b074:	1a18      	subs	r0, r3, r0
 801b076:	b003      	add	sp, #12
 801b078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b07a:	f812 5b01 	ldrb.w	r5, [r2], #1
 801b07e:	f801 5f01 	strb.w	r5, [r1, #1]!
 801b082:	e7ed      	b.n	801b060 <__exponent+0x4c>
 801b084:	2330      	movs	r3, #48	; 0x30
 801b086:	3130      	adds	r1, #48	; 0x30
 801b088:	7083      	strb	r3, [r0, #2]
 801b08a:	70c1      	strb	r1, [r0, #3]
 801b08c:	1d03      	adds	r3, r0, #4
 801b08e:	e7f1      	b.n	801b074 <__exponent+0x60>

0801b090 <_printf_float>:
 801b090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b094:	ed2d 8b02 	vpush	{d8}
 801b098:	b08d      	sub	sp, #52	; 0x34
 801b09a:	460c      	mov	r4, r1
 801b09c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801b0a0:	4616      	mov	r6, r2
 801b0a2:	461f      	mov	r7, r3
 801b0a4:	4605      	mov	r5, r0
 801b0a6:	f001 f8ef 	bl	801c288 <_localeconv_r>
 801b0aa:	f8d0 a000 	ldr.w	sl, [r0]
 801b0ae:	4650      	mov	r0, sl
 801b0b0:	f7e5 f8f6 	bl	80002a0 <strlen>
 801b0b4:	2300      	movs	r3, #0
 801b0b6:	930a      	str	r3, [sp, #40]	; 0x28
 801b0b8:	6823      	ldr	r3, [r4, #0]
 801b0ba:	9305      	str	r3, [sp, #20]
 801b0bc:	f8d8 3000 	ldr.w	r3, [r8]
 801b0c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 801b0c4:	3307      	adds	r3, #7
 801b0c6:	f023 0307 	bic.w	r3, r3, #7
 801b0ca:	f103 0208 	add.w	r2, r3, #8
 801b0ce:	f8c8 2000 	str.w	r2, [r8]
 801b0d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b0d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801b0da:	9307      	str	r3, [sp, #28]
 801b0dc:	f8cd 8018 	str.w	r8, [sp, #24]
 801b0e0:	ee08 0a10 	vmov	s16, r0
 801b0e4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801b0e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b0ec:	4b9e      	ldr	r3, [pc, #632]	; (801b368 <_printf_float+0x2d8>)
 801b0ee:	f04f 32ff 	mov.w	r2, #4294967295
 801b0f2:	f7e5 fd33 	bl	8000b5c <__aeabi_dcmpun>
 801b0f6:	bb88      	cbnz	r0, 801b15c <_printf_float+0xcc>
 801b0f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b0fc:	4b9a      	ldr	r3, [pc, #616]	; (801b368 <_printf_float+0x2d8>)
 801b0fe:	f04f 32ff 	mov.w	r2, #4294967295
 801b102:	f7e5 fd0d 	bl	8000b20 <__aeabi_dcmple>
 801b106:	bb48      	cbnz	r0, 801b15c <_printf_float+0xcc>
 801b108:	2200      	movs	r2, #0
 801b10a:	2300      	movs	r3, #0
 801b10c:	4640      	mov	r0, r8
 801b10e:	4649      	mov	r1, r9
 801b110:	f7e5 fcfc 	bl	8000b0c <__aeabi_dcmplt>
 801b114:	b110      	cbz	r0, 801b11c <_printf_float+0x8c>
 801b116:	232d      	movs	r3, #45	; 0x2d
 801b118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b11c:	4a93      	ldr	r2, [pc, #588]	; (801b36c <_printf_float+0x2dc>)
 801b11e:	4b94      	ldr	r3, [pc, #592]	; (801b370 <_printf_float+0x2e0>)
 801b120:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801b124:	bf94      	ite	ls
 801b126:	4690      	movls	r8, r2
 801b128:	4698      	movhi	r8, r3
 801b12a:	2303      	movs	r3, #3
 801b12c:	6123      	str	r3, [r4, #16]
 801b12e:	9b05      	ldr	r3, [sp, #20]
 801b130:	f023 0304 	bic.w	r3, r3, #4
 801b134:	6023      	str	r3, [r4, #0]
 801b136:	f04f 0900 	mov.w	r9, #0
 801b13a:	9700      	str	r7, [sp, #0]
 801b13c:	4633      	mov	r3, r6
 801b13e:	aa0b      	add	r2, sp, #44	; 0x2c
 801b140:	4621      	mov	r1, r4
 801b142:	4628      	mov	r0, r5
 801b144:	f000 f9da 	bl	801b4fc <_printf_common>
 801b148:	3001      	adds	r0, #1
 801b14a:	f040 8090 	bne.w	801b26e <_printf_float+0x1de>
 801b14e:	f04f 30ff 	mov.w	r0, #4294967295
 801b152:	b00d      	add	sp, #52	; 0x34
 801b154:	ecbd 8b02 	vpop	{d8}
 801b158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b15c:	4642      	mov	r2, r8
 801b15e:	464b      	mov	r3, r9
 801b160:	4640      	mov	r0, r8
 801b162:	4649      	mov	r1, r9
 801b164:	f7e5 fcfa 	bl	8000b5c <__aeabi_dcmpun>
 801b168:	b140      	cbz	r0, 801b17c <_printf_float+0xec>
 801b16a:	464b      	mov	r3, r9
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	bfbc      	itt	lt
 801b170:	232d      	movlt	r3, #45	; 0x2d
 801b172:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801b176:	4a7f      	ldr	r2, [pc, #508]	; (801b374 <_printf_float+0x2e4>)
 801b178:	4b7f      	ldr	r3, [pc, #508]	; (801b378 <_printf_float+0x2e8>)
 801b17a:	e7d1      	b.n	801b120 <_printf_float+0x90>
 801b17c:	6863      	ldr	r3, [r4, #4]
 801b17e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801b182:	9206      	str	r2, [sp, #24]
 801b184:	1c5a      	adds	r2, r3, #1
 801b186:	d13f      	bne.n	801b208 <_printf_float+0x178>
 801b188:	2306      	movs	r3, #6
 801b18a:	6063      	str	r3, [r4, #4]
 801b18c:	9b05      	ldr	r3, [sp, #20]
 801b18e:	6861      	ldr	r1, [r4, #4]
 801b190:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801b194:	2300      	movs	r3, #0
 801b196:	9303      	str	r3, [sp, #12]
 801b198:	ab0a      	add	r3, sp, #40	; 0x28
 801b19a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801b19e:	ab09      	add	r3, sp, #36	; 0x24
 801b1a0:	ec49 8b10 	vmov	d0, r8, r9
 801b1a4:	9300      	str	r3, [sp, #0]
 801b1a6:	6022      	str	r2, [r4, #0]
 801b1a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801b1ac:	4628      	mov	r0, r5
 801b1ae:	f7ff fecf 	bl	801af50 <__cvt>
 801b1b2:	9b06      	ldr	r3, [sp, #24]
 801b1b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b1b6:	2b47      	cmp	r3, #71	; 0x47
 801b1b8:	4680      	mov	r8, r0
 801b1ba:	d108      	bne.n	801b1ce <_printf_float+0x13e>
 801b1bc:	1cc8      	adds	r0, r1, #3
 801b1be:	db02      	blt.n	801b1c6 <_printf_float+0x136>
 801b1c0:	6863      	ldr	r3, [r4, #4]
 801b1c2:	4299      	cmp	r1, r3
 801b1c4:	dd41      	ble.n	801b24a <_printf_float+0x1ba>
 801b1c6:	f1ab 0302 	sub.w	r3, fp, #2
 801b1ca:	fa5f fb83 	uxtb.w	fp, r3
 801b1ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801b1d2:	d820      	bhi.n	801b216 <_printf_float+0x186>
 801b1d4:	3901      	subs	r1, #1
 801b1d6:	465a      	mov	r2, fp
 801b1d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b1dc:	9109      	str	r1, [sp, #36]	; 0x24
 801b1de:	f7ff ff19 	bl	801b014 <__exponent>
 801b1e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b1e4:	1813      	adds	r3, r2, r0
 801b1e6:	2a01      	cmp	r2, #1
 801b1e8:	4681      	mov	r9, r0
 801b1ea:	6123      	str	r3, [r4, #16]
 801b1ec:	dc02      	bgt.n	801b1f4 <_printf_float+0x164>
 801b1ee:	6822      	ldr	r2, [r4, #0]
 801b1f0:	07d2      	lsls	r2, r2, #31
 801b1f2:	d501      	bpl.n	801b1f8 <_printf_float+0x168>
 801b1f4:	3301      	adds	r3, #1
 801b1f6:	6123      	str	r3, [r4, #16]
 801b1f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801b1fc:	2b00      	cmp	r3, #0
 801b1fe:	d09c      	beq.n	801b13a <_printf_float+0xaa>
 801b200:	232d      	movs	r3, #45	; 0x2d
 801b202:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b206:	e798      	b.n	801b13a <_printf_float+0xaa>
 801b208:	9a06      	ldr	r2, [sp, #24]
 801b20a:	2a47      	cmp	r2, #71	; 0x47
 801b20c:	d1be      	bne.n	801b18c <_printf_float+0xfc>
 801b20e:	2b00      	cmp	r3, #0
 801b210:	d1bc      	bne.n	801b18c <_printf_float+0xfc>
 801b212:	2301      	movs	r3, #1
 801b214:	e7b9      	b.n	801b18a <_printf_float+0xfa>
 801b216:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801b21a:	d118      	bne.n	801b24e <_printf_float+0x1be>
 801b21c:	2900      	cmp	r1, #0
 801b21e:	6863      	ldr	r3, [r4, #4]
 801b220:	dd0b      	ble.n	801b23a <_printf_float+0x1aa>
 801b222:	6121      	str	r1, [r4, #16]
 801b224:	b913      	cbnz	r3, 801b22c <_printf_float+0x19c>
 801b226:	6822      	ldr	r2, [r4, #0]
 801b228:	07d0      	lsls	r0, r2, #31
 801b22a:	d502      	bpl.n	801b232 <_printf_float+0x1a2>
 801b22c:	3301      	adds	r3, #1
 801b22e:	440b      	add	r3, r1
 801b230:	6123      	str	r3, [r4, #16]
 801b232:	65a1      	str	r1, [r4, #88]	; 0x58
 801b234:	f04f 0900 	mov.w	r9, #0
 801b238:	e7de      	b.n	801b1f8 <_printf_float+0x168>
 801b23a:	b913      	cbnz	r3, 801b242 <_printf_float+0x1b2>
 801b23c:	6822      	ldr	r2, [r4, #0]
 801b23e:	07d2      	lsls	r2, r2, #31
 801b240:	d501      	bpl.n	801b246 <_printf_float+0x1b6>
 801b242:	3302      	adds	r3, #2
 801b244:	e7f4      	b.n	801b230 <_printf_float+0x1a0>
 801b246:	2301      	movs	r3, #1
 801b248:	e7f2      	b.n	801b230 <_printf_float+0x1a0>
 801b24a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801b24e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b250:	4299      	cmp	r1, r3
 801b252:	db05      	blt.n	801b260 <_printf_float+0x1d0>
 801b254:	6823      	ldr	r3, [r4, #0]
 801b256:	6121      	str	r1, [r4, #16]
 801b258:	07d8      	lsls	r0, r3, #31
 801b25a:	d5ea      	bpl.n	801b232 <_printf_float+0x1a2>
 801b25c:	1c4b      	adds	r3, r1, #1
 801b25e:	e7e7      	b.n	801b230 <_printf_float+0x1a0>
 801b260:	2900      	cmp	r1, #0
 801b262:	bfd4      	ite	le
 801b264:	f1c1 0202 	rsble	r2, r1, #2
 801b268:	2201      	movgt	r2, #1
 801b26a:	4413      	add	r3, r2
 801b26c:	e7e0      	b.n	801b230 <_printf_float+0x1a0>
 801b26e:	6823      	ldr	r3, [r4, #0]
 801b270:	055a      	lsls	r2, r3, #21
 801b272:	d407      	bmi.n	801b284 <_printf_float+0x1f4>
 801b274:	6923      	ldr	r3, [r4, #16]
 801b276:	4642      	mov	r2, r8
 801b278:	4631      	mov	r1, r6
 801b27a:	4628      	mov	r0, r5
 801b27c:	47b8      	blx	r7
 801b27e:	3001      	adds	r0, #1
 801b280:	d12c      	bne.n	801b2dc <_printf_float+0x24c>
 801b282:	e764      	b.n	801b14e <_printf_float+0xbe>
 801b284:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801b288:	f240 80e0 	bls.w	801b44c <_printf_float+0x3bc>
 801b28c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b290:	2200      	movs	r2, #0
 801b292:	2300      	movs	r3, #0
 801b294:	f7e5 fc30 	bl	8000af8 <__aeabi_dcmpeq>
 801b298:	2800      	cmp	r0, #0
 801b29a:	d034      	beq.n	801b306 <_printf_float+0x276>
 801b29c:	4a37      	ldr	r2, [pc, #220]	; (801b37c <_printf_float+0x2ec>)
 801b29e:	2301      	movs	r3, #1
 801b2a0:	4631      	mov	r1, r6
 801b2a2:	4628      	mov	r0, r5
 801b2a4:	47b8      	blx	r7
 801b2a6:	3001      	adds	r0, #1
 801b2a8:	f43f af51 	beq.w	801b14e <_printf_float+0xbe>
 801b2ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b2b0:	429a      	cmp	r2, r3
 801b2b2:	db02      	blt.n	801b2ba <_printf_float+0x22a>
 801b2b4:	6823      	ldr	r3, [r4, #0]
 801b2b6:	07d8      	lsls	r0, r3, #31
 801b2b8:	d510      	bpl.n	801b2dc <_printf_float+0x24c>
 801b2ba:	ee18 3a10 	vmov	r3, s16
 801b2be:	4652      	mov	r2, sl
 801b2c0:	4631      	mov	r1, r6
 801b2c2:	4628      	mov	r0, r5
 801b2c4:	47b8      	blx	r7
 801b2c6:	3001      	adds	r0, #1
 801b2c8:	f43f af41 	beq.w	801b14e <_printf_float+0xbe>
 801b2cc:	f04f 0800 	mov.w	r8, #0
 801b2d0:	f104 091a 	add.w	r9, r4, #26
 801b2d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b2d6:	3b01      	subs	r3, #1
 801b2d8:	4543      	cmp	r3, r8
 801b2da:	dc09      	bgt.n	801b2f0 <_printf_float+0x260>
 801b2dc:	6823      	ldr	r3, [r4, #0]
 801b2de:	079b      	lsls	r3, r3, #30
 801b2e0:	f100 8107 	bmi.w	801b4f2 <_printf_float+0x462>
 801b2e4:	68e0      	ldr	r0, [r4, #12]
 801b2e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b2e8:	4298      	cmp	r0, r3
 801b2ea:	bfb8      	it	lt
 801b2ec:	4618      	movlt	r0, r3
 801b2ee:	e730      	b.n	801b152 <_printf_float+0xc2>
 801b2f0:	2301      	movs	r3, #1
 801b2f2:	464a      	mov	r2, r9
 801b2f4:	4631      	mov	r1, r6
 801b2f6:	4628      	mov	r0, r5
 801b2f8:	47b8      	blx	r7
 801b2fa:	3001      	adds	r0, #1
 801b2fc:	f43f af27 	beq.w	801b14e <_printf_float+0xbe>
 801b300:	f108 0801 	add.w	r8, r8, #1
 801b304:	e7e6      	b.n	801b2d4 <_printf_float+0x244>
 801b306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b308:	2b00      	cmp	r3, #0
 801b30a:	dc39      	bgt.n	801b380 <_printf_float+0x2f0>
 801b30c:	4a1b      	ldr	r2, [pc, #108]	; (801b37c <_printf_float+0x2ec>)
 801b30e:	2301      	movs	r3, #1
 801b310:	4631      	mov	r1, r6
 801b312:	4628      	mov	r0, r5
 801b314:	47b8      	blx	r7
 801b316:	3001      	adds	r0, #1
 801b318:	f43f af19 	beq.w	801b14e <_printf_float+0xbe>
 801b31c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801b320:	4313      	orrs	r3, r2
 801b322:	d102      	bne.n	801b32a <_printf_float+0x29a>
 801b324:	6823      	ldr	r3, [r4, #0]
 801b326:	07d9      	lsls	r1, r3, #31
 801b328:	d5d8      	bpl.n	801b2dc <_printf_float+0x24c>
 801b32a:	ee18 3a10 	vmov	r3, s16
 801b32e:	4652      	mov	r2, sl
 801b330:	4631      	mov	r1, r6
 801b332:	4628      	mov	r0, r5
 801b334:	47b8      	blx	r7
 801b336:	3001      	adds	r0, #1
 801b338:	f43f af09 	beq.w	801b14e <_printf_float+0xbe>
 801b33c:	f04f 0900 	mov.w	r9, #0
 801b340:	f104 0a1a 	add.w	sl, r4, #26
 801b344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b346:	425b      	negs	r3, r3
 801b348:	454b      	cmp	r3, r9
 801b34a:	dc01      	bgt.n	801b350 <_printf_float+0x2c0>
 801b34c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b34e:	e792      	b.n	801b276 <_printf_float+0x1e6>
 801b350:	2301      	movs	r3, #1
 801b352:	4652      	mov	r2, sl
 801b354:	4631      	mov	r1, r6
 801b356:	4628      	mov	r0, r5
 801b358:	47b8      	blx	r7
 801b35a:	3001      	adds	r0, #1
 801b35c:	f43f aef7 	beq.w	801b14e <_printf_float+0xbe>
 801b360:	f109 0901 	add.w	r9, r9, #1
 801b364:	e7ee      	b.n	801b344 <_printf_float+0x2b4>
 801b366:	bf00      	nop
 801b368:	7fefffff 	.word	0x7fefffff
 801b36c:	08022fd8 	.word	0x08022fd8
 801b370:	08022fdc 	.word	0x08022fdc
 801b374:	08022fe0 	.word	0x08022fe0
 801b378:	08022fe4 	.word	0x08022fe4
 801b37c:	080233c8 	.word	0x080233c8
 801b380:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b382:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b384:	429a      	cmp	r2, r3
 801b386:	bfa8      	it	ge
 801b388:	461a      	movge	r2, r3
 801b38a:	2a00      	cmp	r2, #0
 801b38c:	4691      	mov	r9, r2
 801b38e:	dc37      	bgt.n	801b400 <_printf_float+0x370>
 801b390:	f04f 0b00 	mov.w	fp, #0
 801b394:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b398:	f104 021a 	add.w	r2, r4, #26
 801b39c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b39e:	9305      	str	r3, [sp, #20]
 801b3a0:	eba3 0309 	sub.w	r3, r3, r9
 801b3a4:	455b      	cmp	r3, fp
 801b3a6:	dc33      	bgt.n	801b410 <_printf_float+0x380>
 801b3a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b3ac:	429a      	cmp	r2, r3
 801b3ae:	db3b      	blt.n	801b428 <_printf_float+0x398>
 801b3b0:	6823      	ldr	r3, [r4, #0]
 801b3b2:	07da      	lsls	r2, r3, #31
 801b3b4:	d438      	bmi.n	801b428 <_printf_float+0x398>
 801b3b6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801b3ba:	eba2 0903 	sub.w	r9, r2, r3
 801b3be:	9b05      	ldr	r3, [sp, #20]
 801b3c0:	1ad2      	subs	r2, r2, r3
 801b3c2:	4591      	cmp	r9, r2
 801b3c4:	bfa8      	it	ge
 801b3c6:	4691      	movge	r9, r2
 801b3c8:	f1b9 0f00 	cmp.w	r9, #0
 801b3cc:	dc35      	bgt.n	801b43a <_printf_float+0x3aa>
 801b3ce:	f04f 0800 	mov.w	r8, #0
 801b3d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b3d6:	f104 0a1a 	add.w	sl, r4, #26
 801b3da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b3de:	1a9b      	subs	r3, r3, r2
 801b3e0:	eba3 0309 	sub.w	r3, r3, r9
 801b3e4:	4543      	cmp	r3, r8
 801b3e6:	f77f af79 	ble.w	801b2dc <_printf_float+0x24c>
 801b3ea:	2301      	movs	r3, #1
 801b3ec:	4652      	mov	r2, sl
 801b3ee:	4631      	mov	r1, r6
 801b3f0:	4628      	mov	r0, r5
 801b3f2:	47b8      	blx	r7
 801b3f4:	3001      	adds	r0, #1
 801b3f6:	f43f aeaa 	beq.w	801b14e <_printf_float+0xbe>
 801b3fa:	f108 0801 	add.w	r8, r8, #1
 801b3fe:	e7ec      	b.n	801b3da <_printf_float+0x34a>
 801b400:	4613      	mov	r3, r2
 801b402:	4631      	mov	r1, r6
 801b404:	4642      	mov	r2, r8
 801b406:	4628      	mov	r0, r5
 801b408:	47b8      	blx	r7
 801b40a:	3001      	adds	r0, #1
 801b40c:	d1c0      	bne.n	801b390 <_printf_float+0x300>
 801b40e:	e69e      	b.n	801b14e <_printf_float+0xbe>
 801b410:	2301      	movs	r3, #1
 801b412:	4631      	mov	r1, r6
 801b414:	4628      	mov	r0, r5
 801b416:	9205      	str	r2, [sp, #20]
 801b418:	47b8      	blx	r7
 801b41a:	3001      	adds	r0, #1
 801b41c:	f43f ae97 	beq.w	801b14e <_printf_float+0xbe>
 801b420:	9a05      	ldr	r2, [sp, #20]
 801b422:	f10b 0b01 	add.w	fp, fp, #1
 801b426:	e7b9      	b.n	801b39c <_printf_float+0x30c>
 801b428:	ee18 3a10 	vmov	r3, s16
 801b42c:	4652      	mov	r2, sl
 801b42e:	4631      	mov	r1, r6
 801b430:	4628      	mov	r0, r5
 801b432:	47b8      	blx	r7
 801b434:	3001      	adds	r0, #1
 801b436:	d1be      	bne.n	801b3b6 <_printf_float+0x326>
 801b438:	e689      	b.n	801b14e <_printf_float+0xbe>
 801b43a:	9a05      	ldr	r2, [sp, #20]
 801b43c:	464b      	mov	r3, r9
 801b43e:	4442      	add	r2, r8
 801b440:	4631      	mov	r1, r6
 801b442:	4628      	mov	r0, r5
 801b444:	47b8      	blx	r7
 801b446:	3001      	adds	r0, #1
 801b448:	d1c1      	bne.n	801b3ce <_printf_float+0x33e>
 801b44a:	e680      	b.n	801b14e <_printf_float+0xbe>
 801b44c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b44e:	2a01      	cmp	r2, #1
 801b450:	dc01      	bgt.n	801b456 <_printf_float+0x3c6>
 801b452:	07db      	lsls	r3, r3, #31
 801b454:	d53a      	bpl.n	801b4cc <_printf_float+0x43c>
 801b456:	2301      	movs	r3, #1
 801b458:	4642      	mov	r2, r8
 801b45a:	4631      	mov	r1, r6
 801b45c:	4628      	mov	r0, r5
 801b45e:	47b8      	blx	r7
 801b460:	3001      	adds	r0, #1
 801b462:	f43f ae74 	beq.w	801b14e <_printf_float+0xbe>
 801b466:	ee18 3a10 	vmov	r3, s16
 801b46a:	4652      	mov	r2, sl
 801b46c:	4631      	mov	r1, r6
 801b46e:	4628      	mov	r0, r5
 801b470:	47b8      	blx	r7
 801b472:	3001      	adds	r0, #1
 801b474:	f43f ae6b 	beq.w	801b14e <_printf_float+0xbe>
 801b478:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b47c:	2200      	movs	r2, #0
 801b47e:	2300      	movs	r3, #0
 801b480:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801b484:	f7e5 fb38 	bl	8000af8 <__aeabi_dcmpeq>
 801b488:	b9d8      	cbnz	r0, 801b4c2 <_printf_float+0x432>
 801b48a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801b48e:	f108 0201 	add.w	r2, r8, #1
 801b492:	4631      	mov	r1, r6
 801b494:	4628      	mov	r0, r5
 801b496:	47b8      	blx	r7
 801b498:	3001      	adds	r0, #1
 801b49a:	d10e      	bne.n	801b4ba <_printf_float+0x42a>
 801b49c:	e657      	b.n	801b14e <_printf_float+0xbe>
 801b49e:	2301      	movs	r3, #1
 801b4a0:	4652      	mov	r2, sl
 801b4a2:	4631      	mov	r1, r6
 801b4a4:	4628      	mov	r0, r5
 801b4a6:	47b8      	blx	r7
 801b4a8:	3001      	adds	r0, #1
 801b4aa:	f43f ae50 	beq.w	801b14e <_printf_float+0xbe>
 801b4ae:	f108 0801 	add.w	r8, r8, #1
 801b4b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b4b4:	3b01      	subs	r3, #1
 801b4b6:	4543      	cmp	r3, r8
 801b4b8:	dcf1      	bgt.n	801b49e <_printf_float+0x40e>
 801b4ba:	464b      	mov	r3, r9
 801b4bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b4c0:	e6da      	b.n	801b278 <_printf_float+0x1e8>
 801b4c2:	f04f 0800 	mov.w	r8, #0
 801b4c6:	f104 0a1a 	add.w	sl, r4, #26
 801b4ca:	e7f2      	b.n	801b4b2 <_printf_float+0x422>
 801b4cc:	2301      	movs	r3, #1
 801b4ce:	4642      	mov	r2, r8
 801b4d0:	e7df      	b.n	801b492 <_printf_float+0x402>
 801b4d2:	2301      	movs	r3, #1
 801b4d4:	464a      	mov	r2, r9
 801b4d6:	4631      	mov	r1, r6
 801b4d8:	4628      	mov	r0, r5
 801b4da:	47b8      	blx	r7
 801b4dc:	3001      	adds	r0, #1
 801b4de:	f43f ae36 	beq.w	801b14e <_printf_float+0xbe>
 801b4e2:	f108 0801 	add.w	r8, r8, #1
 801b4e6:	68e3      	ldr	r3, [r4, #12]
 801b4e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b4ea:	1a5b      	subs	r3, r3, r1
 801b4ec:	4543      	cmp	r3, r8
 801b4ee:	dcf0      	bgt.n	801b4d2 <_printf_float+0x442>
 801b4f0:	e6f8      	b.n	801b2e4 <_printf_float+0x254>
 801b4f2:	f04f 0800 	mov.w	r8, #0
 801b4f6:	f104 0919 	add.w	r9, r4, #25
 801b4fa:	e7f4      	b.n	801b4e6 <_printf_float+0x456>

0801b4fc <_printf_common>:
 801b4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b500:	4616      	mov	r6, r2
 801b502:	4699      	mov	r9, r3
 801b504:	688a      	ldr	r2, [r1, #8]
 801b506:	690b      	ldr	r3, [r1, #16]
 801b508:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b50c:	4293      	cmp	r3, r2
 801b50e:	bfb8      	it	lt
 801b510:	4613      	movlt	r3, r2
 801b512:	6033      	str	r3, [r6, #0]
 801b514:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b518:	4607      	mov	r7, r0
 801b51a:	460c      	mov	r4, r1
 801b51c:	b10a      	cbz	r2, 801b522 <_printf_common+0x26>
 801b51e:	3301      	adds	r3, #1
 801b520:	6033      	str	r3, [r6, #0]
 801b522:	6823      	ldr	r3, [r4, #0]
 801b524:	0699      	lsls	r1, r3, #26
 801b526:	bf42      	ittt	mi
 801b528:	6833      	ldrmi	r3, [r6, #0]
 801b52a:	3302      	addmi	r3, #2
 801b52c:	6033      	strmi	r3, [r6, #0]
 801b52e:	6825      	ldr	r5, [r4, #0]
 801b530:	f015 0506 	ands.w	r5, r5, #6
 801b534:	d106      	bne.n	801b544 <_printf_common+0x48>
 801b536:	f104 0a19 	add.w	sl, r4, #25
 801b53a:	68e3      	ldr	r3, [r4, #12]
 801b53c:	6832      	ldr	r2, [r6, #0]
 801b53e:	1a9b      	subs	r3, r3, r2
 801b540:	42ab      	cmp	r3, r5
 801b542:	dc26      	bgt.n	801b592 <_printf_common+0x96>
 801b544:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b548:	1e13      	subs	r3, r2, #0
 801b54a:	6822      	ldr	r2, [r4, #0]
 801b54c:	bf18      	it	ne
 801b54e:	2301      	movne	r3, #1
 801b550:	0692      	lsls	r2, r2, #26
 801b552:	d42b      	bmi.n	801b5ac <_printf_common+0xb0>
 801b554:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b558:	4649      	mov	r1, r9
 801b55a:	4638      	mov	r0, r7
 801b55c:	47c0      	blx	r8
 801b55e:	3001      	adds	r0, #1
 801b560:	d01e      	beq.n	801b5a0 <_printf_common+0xa4>
 801b562:	6823      	ldr	r3, [r4, #0]
 801b564:	6922      	ldr	r2, [r4, #16]
 801b566:	f003 0306 	and.w	r3, r3, #6
 801b56a:	2b04      	cmp	r3, #4
 801b56c:	bf02      	ittt	eq
 801b56e:	68e5      	ldreq	r5, [r4, #12]
 801b570:	6833      	ldreq	r3, [r6, #0]
 801b572:	1aed      	subeq	r5, r5, r3
 801b574:	68a3      	ldr	r3, [r4, #8]
 801b576:	bf0c      	ite	eq
 801b578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b57c:	2500      	movne	r5, #0
 801b57e:	4293      	cmp	r3, r2
 801b580:	bfc4      	itt	gt
 801b582:	1a9b      	subgt	r3, r3, r2
 801b584:	18ed      	addgt	r5, r5, r3
 801b586:	2600      	movs	r6, #0
 801b588:	341a      	adds	r4, #26
 801b58a:	42b5      	cmp	r5, r6
 801b58c:	d11a      	bne.n	801b5c4 <_printf_common+0xc8>
 801b58e:	2000      	movs	r0, #0
 801b590:	e008      	b.n	801b5a4 <_printf_common+0xa8>
 801b592:	2301      	movs	r3, #1
 801b594:	4652      	mov	r2, sl
 801b596:	4649      	mov	r1, r9
 801b598:	4638      	mov	r0, r7
 801b59a:	47c0      	blx	r8
 801b59c:	3001      	adds	r0, #1
 801b59e:	d103      	bne.n	801b5a8 <_printf_common+0xac>
 801b5a0:	f04f 30ff 	mov.w	r0, #4294967295
 801b5a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b5a8:	3501      	adds	r5, #1
 801b5aa:	e7c6      	b.n	801b53a <_printf_common+0x3e>
 801b5ac:	18e1      	adds	r1, r4, r3
 801b5ae:	1c5a      	adds	r2, r3, #1
 801b5b0:	2030      	movs	r0, #48	; 0x30
 801b5b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b5b6:	4422      	add	r2, r4
 801b5b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b5bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b5c0:	3302      	adds	r3, #2
 801b5c2:	e7c7      	b.n	801b554 <_printf_common+0x58>
 801b5c4:	2301      	movs	r3, #1
 801b5c6:	4622      	mov	r2, r4
 801b5c8:	4649      	mov	r1, r9
 801b5ca:	4638      	mov	r0, r7
 801b5cc:	47c0      	blx	r8
 801b5ce:	3001      	adds	r0, #1
 801b5d0:	d0e6      	beq.n	801b5a0 <_printf_common+0xa4>
 801b5d2:	3601      	adds	r6, #1
 801b5d4:	e7d9      	b.n	801b58a <_printf_common+0x8e>
	...

0801b5d8 <_printf_i>:
 801b5d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b5dc:	7e0f      	ldrb	r7, [r1, #24]
 801b5de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b5e0:	2f78      	cmp	r7, #120	; 0x78
 801b5e2:	4691      	mov	r9, r2
 801b5e4:	4680      	mov	r8, r0
 801b5e6:	460c      	mov	r4, r1
 801b5e8:	469a      	mov	sl, r3
 801b5ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b5ee:	d807      	bhi.n	801b600 <_printf_i+0x28>
 801b5f0:	2f62      	cmp	r7, #98	; 0x62
 801b5f2:	d80a      	bhi.n	801b60a <_printf_i+0x32>
 801b5f4:	2f00      	cmp	r7, #0
 801b5f6:	f000 80d4 	beq.w	801b7a2 <_printf_i+0x1ca>
 801b5fa:	2f58      	cmp	r7, #88	; 0x58
 801b5fc:	f000 80c0 	beq.w	801b780 <_printf_i+0x1a8>
 801b600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b604:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b608:	e03a      	b.n	801b680 <_printf_i+0xa8>
 801b60a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b60e:	2b15      	cmp	r3, #21
 801b610:	d8f6      	bhi.n	801b600 <_printf_i+0x28>
 801b612:	a101      	add	r1, pc, #4	; (adr r1, 801b618 <_printf_i+0x40>)
 801b614:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b618:	0801b671 	.word	0x0801b671
 801b61c:	0801b685 	.word	0x0801b685
 801b620:	0801b601 	.word	0x0801b601
 801b624:	0801b601 	.word	0x0801b601
 801b628:	0801b601 	.word	0x0801b601
 801b62c:	0801b601 	.word	0x0801b601
 801b630:	0801b685 	.word	0x0801b685
 801b634:	0801b601 	.word	0x0801b601
 801b638:	0801b601 	.word	0x0801b601
 801b63c:	0801b601 	.word	0x0801b601
 801b640:	0801b601 	.word	0x0801b601
 801b644:	0801b789 	.word	0x0801b789
 801b648:	0801b6b1 	.word	0x0801b6b1
 801b64c:	0801b743 	.word	0x0801b743
 801b650:	0801b601 	.word	0x0801b601
 801b654:	0801b601 	.word	0x0801b601
 801b658:	0801b7ab 	.word	0x0801b7ab
 801b65c:	0801b601 	.word	0x0801b601
 801b660:	0801b6b1 	.word	0x0801b6b1
 801b664:	0801b601 	.word	0x0801b601
 801b668:	0801b601 	.word	0x0801b601
 801b66c:	0801b74b 	.word	0x0801b74b
 801b670:	682b      	ldr	r3, [r5, #0]
 801b672:	1d1a      	adds	r2, r3, #4
 801b674:	681b      	ldr	r3, [r3, #0]
 801b676:	602a      	str	r2, [r5, #0]
 801b678:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b67c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b680:	2301      	movs	r3, #1
 801b682:	e09f      	b.n	801b7c4 <_printf_i+0x1ec>
 801b684:	6820      	ldr	r0, [r4, #0]
 801b686:	682b      	ldr	r3, [r5, #0]
 801b688:	0607      	lsls	r7, r0, #24
 801b68a:	f103 0104 	add.w	r1, r3, #4
 801b68e:	6029      	str	r1, [r5, #0]
 801b690:	d501      	bpl.n	801b696 <_printf_i+0xbe>
 801b692:	681e      	ldr	r6, [r3, #0]
 801b694:	e003      	b.n	801b69e <_printf_i+0xc6>
 801b696:	0646      	lsls	r6, r0, #25
 801b698:	d5fb      	bpl.n	801b692 <_printf_i+0xba>
 801b69a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b69e:	2e00      	cmp	r6, #0
 801b6a0:	da03      	bge.n	801b6aa <_printf_i+0xd2>
 801b6a2:	232d      	movs	r3, #45	; 0x2d
 801b6a4:	4276      	negs	r6, r6
 801b6a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b6aa:	485a      	ldr	r0, [pc, #360]	; (801b814 <_printf_i+0x23c>)
 801b6ac:	230a      	movs	r3, #10
 801b6ae:	e012      	b.n	801b6d6 <_printf_i+0xfe>
 801b6b0:	682b      	ldr	r3, [r5, #0]
 801b6b2:	6820      	ldr	r0, [r4, #0]
 801b6b4:	1d19      	adds	r1, r3, #4
 801b6b6:	6029      	str	r1, [r5, #0]
 801b6b8:	0605      	lsls	r5, r0, #24
 801b6ba:	d501      	bpl.n	801b6c0 <_printf_i+0xe8>
 801b6bc:	681e      	ldr	r6, [r3, #0]
 801b6be:	e002      	b.n	801b6c6 <_printf_i+0xee>
 801b6c0:	0641      	lsls	r1, r0, #25
 801b6c2:	d5fb      	bpl.n	801b6bc <_printf_i+0xe4>
 801b6c4:	881e      	ldrh	r6, [r3, #0]
 801b6c6:	4853      	ldr	r0, [pc, #332]	; (801b814 <_printf_i+0x23c>)
 801b6c8:	2f6f      	cmp	r7, #111	; 0x6f
 801b6ca:	bf0c      	ite	eq
 801b6cc:	2308      	moveq	r3, #8
 801b6ce:	230a      	movne	r3, #10
 801b6d0:	2100      	movs	r1, #0
 801b6d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b6d6:	6865      	ldr	r5, [r4, #4]
 801b6d8:	60a5      	str	r5, [r4, #8]
 801b6da:	2d00      	cmp	r5, #0
 801b6dc:	bfa2      	ittt	ge
 801b6de:	6821      	ldrge	r1, [r4, #0]
 801b6e0:	f021 0104 	bicge.w	r1, r1, #4
 801b6e4:	6021      	strge	r1, [r4, #0]
 801b6e6:	b90e      	cbnz	r6, 801b6ec <_printf_i+0x114>
 801b6e8:	2d00      	cmp	r5, #0
 801b6ea:	d04b      	beq.n	801b784 <_printf_i+0x1ac>
 801b6ec:	4615      	mov	r5, r2
 801b6ee:	fbb6 f1f3 	udiv	r1, r6, r3
 801b6f2:	fb03 6711 	mls	r7, r3, r1, r6
 801b6f6:	5dc7      	ldrb	r7, [r0, r7]
 801b6f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b6fc:	4637      	mov	r7, r6
 801b6fe:	42bb      	cmp	r3, r7
 801b700:	460e      	mov	r6, r1
 801b702:	d9f4      	bls.n	801b6ee <_printf_i+0x116>
 801b704:	2b08      	cmp	r3, #8
 801b706:	d10b      	bne.n	801b720 <_printf_i+0x148>
 801b708:	6823      	ldr	r3, [r4, #0]
 801b70a:	07de      	lsls	r6, r3, #31
 801b70c:	d508      	bpl.n	801b720 <_printf_i+0x148>
 801b70e:	6923      	ldr	r3, [r4, #16]
 801b710:	6861      	ldr	r1, [r4, #4]
 801b712:	4299      	cmp	r1, r3
 801b714:	bfde      	ittt	le
 801b716:	2330      	movle	r3, #48	; 0x30
 801b718:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b71c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b720:	1b52      	subs	r2, r2, r5
 801b722:	6122      	str	r2, [r4, #16]
 801b724:	f8cd a000 	str.w	sl, [sp]
 801b728:	464b      	mov	r3, r9
 801b72a:	aa03      	add	r2, sp, #12
 801b72c:	4621      	mov	r1, r4
 801b72e:	4640      	mov	r0, r8
 801b730:	f7ff fee4 	bl	801b4fc <_printf_common>
 801b734:	3001      	adds	r0, #1
 801b736:	d14a      	bne.n	801b7ce <_printf_i+0x1f6>
 801b738:	f04f 30ff 	mov.w	r0, #4294967295
 801b73c:	b004      	add	sp, #16
 801b73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b742:	6823      	ldr	r3, [r4, #0]
 801b744:	f043 0320 	orr.w	r3, r3, #32
 801b748:	6023      	str	r3, [r4, #0]
 801b74a:	4833      	ldr	r0, [pc, #204]	; (801b818 <_printf_i+0x240>)
 801b74c:	2778      	movs	r7, #120	; 0x78
 801b74e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b752:	6823      	ldr	r3, [r4, #0]
 801b754:	6829      	ldr	r1, [r5, #0]
 801b756:	061f      	lsls	r7, r3, #24
 801b758:	f851 6b04 	ldr.w	r6, [r1], #4
 801b75c:	d402      	bmi.n	801b764 <_printf_i+0x18c>
 801b75e:	065f      	lsls	r7, r3, #25
 801b760:	bf48      	it	mi
 801b762:	b2b6      	uxthmi	r6, r6
 801b764:	07df      	lsls	r7, r3, #31
 801b766:	bf48      	it	mi
 801b768:	f043 0320 	orrmi.w	r3, r3, #32
 801b76c:	6029      	str	r1, [r5, #0]
 801b76e:	bf48      	it	mi
 801b770:	6023      	strmi	r3, [r4, #0]
 801b772:	b91e      	cbnz	r6, 801b77c <_printf_i+0x1a4>
 801b774:	6823      	ldr	r3, [r4, #0]
 801b776:	f023 0320 	bic.w	r3, r3, #32
 801b77a:	6023      	str	r3, [r4, #0]
 801b77c:	2310      	movs	r3, #16
 801b77e:	e7a7      	b.n	801b6d0 <_printf_i+0xf8>
 801b780:	4824      	ldr	r0, [pc, #144]	; (801b814 <_printf_i+0x23c>)
 801b782:	e7e4      	b.n	801b74e <_printf_i+0x176>
 801b784:	4615      	mov	r5, r2
 801b786:	e7bd      	b.n	801b704 <_printf_i+0x12c>
 801b788:	682b      	ldr	r3, [r5, #0]
 801b78a:	6826      	ldr	r6, [r4, #0]
 801b78c:	6961      	ldr	r1, [r4, #20]
 801b78e:	1d18      	adds	r0, r3, #4
 801b790:	6028      	str	r0, [r5, #0]
 801b792:	0635      	lsls	r5, r6, #24
 801b794:	681b      	ldr	r3, [r3, #0]
 801b796:	d501      	bpl.n	801b79c <_printf_i+0x1c4>
 801b798:	6019      	str	r1, [r3, #0]
 801b79a:	e002      	b.n	801b7a2 <_printf_i+0x1ca>
 801b79c:	0670      	lsls	r0, r6, #25
 801b79e:	d5fb      	bpl.n	801b798 <_printf_i+0x1c0>
 801b7a0:	8019      	strh	r1, [r3, #0]
 801b7a2:	2300      	movs	r3, #0
 801b7a4:	6123      	str	r3, [r4, #16]
 801b7a6:	4615      	mov	r5, r2
 801b7a8:	e7bc      	b.n	801b724 <_printf_i+0x14c>
 801b7aa:	682b      	ldr	r3, [r5, #0]
 801b7ac:	1d1a      	adds	r2, r3, #4
 801b7ae:	602a      	str	r2, [r5, #0]
 801b7b0:	681d      	ldr	r5, [r3, #0]
 801b7b2:	6862      	ldr	r2, [r4, #4]
 801b7b4:	2100      	movs	r1, #0
 801b7b6:	4628      	mov	r0, r5
 801b7b8:	f7e4 fd22 	bl	8000200 <memchr>
 801b7bc:	b108      	cbz	r0, 801b7c2 <_printf_i+0x1ea>
 801b7be:	1b40      	subs	r0, r0, r5
 801b7c0:	6060      	str	r0, [r4, #4]
 801b7c2:	6863      	ldr	r3, [r4, #4]
 801b7c4:	6123      	str	r3, [r4, #16]
 801b7c6:	2300      	movs	r3, #0
 801b7c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b7cc:	e7aa      	b.n	801b724 <_printf_i+0x14c>
 801b7ce:	6923      	ldr	r3, [r4, #16]
 801b7d0:	462a      	mov	r2, r5
 801b7d2:	4649      	mov	r1, r9
 801b7d4:	4640      	mov	r0, r8
 801b7d6:	47d0      	blx	sl
 801b7d8:	3001      	adds	r0, #1
 801b7da:	d0ad      	beq.n	801b738 <_printf_i+0x160>
 801b7dc:	6823      	ldr	r3, [r4, #0]
 801b7de:	079b      	lsls	r3, r3, #30
 801b7e0:	d413      	bmi.n	801b80a <_printf_i+0x232>
 801b7e2:	68e0      	ldr	r0, [r4, #12]
 801b7e4:	9b03      	ldr	r3, [sp, #12]
 801b7e6:	4298      	cmp	r0, r3
 801b7e8:	bfb8      	it	lt
 801b7ea:	4618      	movlt	r0, r3
 801b7ec:	e7a6      	b.n	801b73c <_printf_i+0x164>
 801b7ee:	2301      	movs	r3, #1
 801b7f0:	4632      	mov	r2, r6
 801b7f2:	4649      	mov	r1, r9
 801b7f4:	4640      	mov	r0, r8
 801b7f6:	47d0      	blx	sl
 801b7f8:	3001      	adds	r0, #1
 801b7fa:	d09d      	beq.n	801b738 <_printf_i+0x160>
 801b7fc:	3501      	adds	r5, #1
 801b7fe:	68e3      	ldr	r3, [r4, #12]
 801b800:	9903      	ldr	r1, [sp, #12]
 801b802:	1a5b      	subs	r3, r3, r1
 801b804:	42ab      	cmp	r3, r5
 801b806:	dcf2      	bgt.n	801b7ee <_printf_i+0x216>
 801b808:	e7eb      	b.n	801b7e2 <_printf_i+0x20a>
 801b80a:	2500      	movs	r5, #0
 801b80c:	f104 0619 	add.w	r6, r4, #25
 801b810:	e7f5      	b.n	801b7fe <_printf_i+0x226>
 801b812:	bf00      	nop
 801b814:	08022fe8 	.word	0x08022fe8
 801b818:	08022ff9 	.word	0x08022ff9

0801b81c <_scanf_float>:
 801b81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b820:	b087      	sub	sp, #28
 801b822:	4617      	mov	r7, r2
 801b824:	9303      	str	r3, [sp, #12]
 801b826:	688b      	ldr	r3, [r1, #8]
 801b828:	1e5a      	subs	r2, r3, #1
 801b82a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801b82e:	bf83      	ittte	hi
 801b830:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801b834:	195b      	addhi	r3, r3, r5
 801b836:	9302      	strhi	r3, [sp, #8]
 801b838:	2300      	movls	r3, #0
 801b83a:	bf86      	itte	hi
 801b83c:	f240 135d 	movwhi	r3, #349	; 0x15d
 801b840:	608b      	strhi	r3, [r1, #8]
 801b842:	9302      	strls	r3, [sp, #8]
 801b844:	680b      	ldr	r3, [r1, #0]
 801b846:	468b      	mov	fp, r1
 801b848:	2500      	movs	r5, #0
 801b84a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801b84e:	f84b 3b1c 	str.w	r3, [fp], #28
 801b852:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b856:	4680      	mov	r8, r0
 801b858:	460c      	mov	r4, r1
 801b85a:	465e      	mov	r6, fp
 801b85c:	46aa      	mov	sl, r5
 801b85e:	46a9      	mov	r9, r5
 801b860:	9501      	str	r5, [sp, #4]
 801b862:	68a2      	ldr	r2, [r4, #8]
 801b864:	b152      	cbz	r2, 801b87c <_scanf_float+0x60>
 801b866:	683b      	ldr	r3, [r7, #0]
 801b868:	781b      	ldrb	r3, [r3, #0]
 801b86a:	2b4e      	cmp	r3, #78	; 0x4e
 801b86c:	d864      	bhi.n	801b938 <_scanf_float+0x11c>
 801b86e:	2b40      	cmp	r3, #64	; 0x40
 801b870:	d83c      	bhi.n	801b8ec <_scanf_float+0xd0>
 801b872:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801b876:	b2c8      	uxtb	r0, r1
 801b878:	280e      	cmp	r0, #14
 801b87a:	d93a      	bls.n	801b8f2 <_scanf_float+0xd6>
 801b87c:	f1b9 0f00 	cmp.w	r9, #0
 801b880:	d003      	beq.n	801b88a <_scanf_float+0x6e>
 801b882:	6823      	ldr	r3, [r4, #0]
 801b884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b888:	6023      	str	r3, [r4, #0]
 801b88a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b88e:	f1ba 0f01 	cmp.w	sl, #1
 801b892:	f200 8113 	bhi.w	801babc <_scanf_float+0x2a0>
 801b896:	455e      	cmp	r6, fp
 801b898:	f200 8105 	bhi.w	801baa6 <_scanf_float+0x28a>
 801b89c:	2501      	movs	r5, #1
 801b89e:	4628      	mov	r0, r5
 801b8a0:	b007      	add	sp, #28
 801b8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8a6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801b8aa:	2a0d      	cmp	r2, #13
 801b8ac:	d8e6      	bhi.n	801b87c <_scanf_float+0x60>
 801b8ae:	a101      	add	r1, pc, #4	; (adr r1, 801b8b4 <_scanf_float+0x98>)
 801b8b0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b8b4:	0801b9f3 	.word	0x0801b9f3
 801b8b8:	0801b87d 	.word	0x0801b87d
 801b8bc:	0801b87d 	.word	0x0801b87d
 801b8c0:	0801b87d 	.word	0x0801b87d
 801b8c4:	0801ba53 	.word	0x0801ba53
 801b8c8:	0801ba2b 	.word	0x0801ba2b
 801b8cc:	0801b87d 	.word	0x0801b87d
 801b8d0:	0801b87d 	.word	0x0801b87d
 801b8d4:	0801ba01 	.word	0x0801ba01
 801b8d8:	0801b87d 	.word	0x0801b87d
 801b8dc:	0801b87d 	.word	0x0801b87d
 801b8e0:	0801b87d 	.word	0x0801b87d
 801b8e4:	0801b87d 	.word	0x0801b87d
 801b8e8:	0801b9b9 	.word	0x0801b9b9
 801b8ec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801b8f0:	e7db      	b.n	801b8aa <_scanf_float+0x8e>
 801b8f2:	290e      	cmp	r1, #14
 801b8f4:	d8c2      	bhi.n	801b87c <_scanf_float+0x60>
 801b8f6:	a001      	add	r0, pc, #4	; (adr r0, 801b8fc <_scanf_float+0xe0>)
 801b8f8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801b8fc:	0801b9ab 	.word	0x0801b9ab
 801b900:	0801b87d 	.word	0x0801b87d
 801b904:	0801b9ab 	.word	0x0801b9ab
 801b908:	0801ba3f 	.word	0x0801ba3f
 801b90c:	0801b87d 	.word	0x0801b87d
 801b910:	0801b959 	.word	0x0801b959
 801b914:	0801b995 	.word	0x0801b995
 801b918:	0801b995 	.word	0x0801b995
 801b91c:	0801b995 	.word	0x0801b995
 801b920:	0801b995 	.word	0x0801b995
 801b924:	0801b995 	.word	0x0801b995
 801b928:	0801b995 	.word	0x0801b995
 801b92c:	0801b995 	.word	0x0801b995
 801b930:	0801b995 	.word	0x0801b995
 801b934:	0801b995 	.word	0x0801b995
 801b938:	2b6e      	cmp	r3, #110	; 0x6e
 801b93a:	d809      	bhi.n	801b950 <_scanf_float+0x134>
 801b93c:	2b60      	cmp	r3, #96	; 0x60
 801b93e:	d8b2      	bhi.n	801b8a6 <_scanf_float+0x8a>
 801b940:	2b54      	cmp	r3, #84	; 0x54
 801b942:	d077      	beq.n	801ba34 <_scanf_float+0x218>
 801b944:	2b59      	cmp	r3, #89	; 0x59
 801b946:	d199      	bne.n	801b87c <_scanf_float+0x60>
 801b948:	2d07      	cmp	r5, #7
 801b94a:	d197      	bne.n	801b87c <_scanf_float+0x60>
 801b94c:	2508      	movs	r5, #8
 801b94e:	e029      	b.n	801b9a4 <_scanf_float+0x188>
 801b950:	2b74      	cmp	r3, #116	; 0x74
 801b952:	d06f      	beq.n	801ba34 <_scanf_float+0x218>
 801b954:	2b79      	cmp	r3, #121	; 0x79
 801b956:	e7f6      	b.n	801b946 <_scanf_float+0x12a>
 801b958:	6821      	ldr	r1, [r4, #0]
 801b95a:	05c8      	lsls	r0, r1, #23
 801b95c:	d51a      	bpl.n	801b994 <_scanf_float+0x178>
 801b95e:	9b02      	ldr	r3, [sp, #8]
 801b960:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801b964:	6021      	str	r1, [r4, #0]
 801b966:	f109 0901 	add.w	r9, r9, #1
 801b96a:	b11b      	cbz	r3, 801b974 <_scanf_float+0x158>
 801b96c:	3b01      	subs	r3, #1
 801b96e:	3201      	adds	r2, #1
 801b970:	9302      	str	r3, [sp, #8]
 801b972:	60a2      	str	r2, [r4, #8]
 801b974:	68a3      	ldr	r3, [r4, #8]
 801b976:	3b01      	subs	r3, #1
 801b978:	60a3      	str	r3, [r4, #8]
 801b97a:	6923      	ldr	r3, [r4, #16]
 801b97c:	3301      	adds	r3, #1
 801b97e:	6123      	str	r3, [r4, #16]
 801b980:	687b      	ldr	r3, [r7, #4]
 801b982:	3b01      	subs	r3, #1
 801b984:	2b00      	cmp	r3, #0
 801b986:	607b      	str	r3, [r7, #4]
 801b988:	f340 8084 	ble.w	801ba94 <_scanf_float+0x278>
 801b98c:	683b      	ldr	r3, [r7, #0]
 801b98e:	3301      	adds	r3, #1
 801b990:	603b      	str	r3, [r7, #0]
 801b992:	e766      	b.n	801b862 <_scanf_float+0x46>
 801b994:	eb1a 0f05 	cmn.w	sl, r5
 801b998:	f47f af70 	bne.w	801b87c <_scanf_float+0x60>
 801b99c:	6822      	ldr	r2, [r4, #0]
 801b99e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801b9a2:	6022      	str	r2, [r4, #0]
 801b9a4:	f806 3b01 	strb.w	r3, [r6], #1
 801b9a8:	e7e4      	b.n	801b974 <_scanf_float+0x158>
 801b9aa:	6822      	ldr	r2, [r4, #0]
 801b9ac:	0610      	lsls	r0, r2, #24
 801b9ae:	f57f af65 	bpl.w	801b87c <_scanf_float+0x60>
 801b9b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801b9b6:	e7f4      	b.n	801b9a2 <_scanf_float+0x186>
 801b9b8:	f1ba 0f00 	cmp.w	sl, #0
 801b9bc:	d10e      	bne.n	801b9dc <_scanf_float+0x1c0>
 801b9be:	f1b9 0f00 	cmp.w	r9, #0
 801b9c2:	d10e      	bne.n	801b9e2 <_scanf_float+0x1c6>
 801b9c4:	6822      	ldr	r2, [r4, #0]
 801b9c6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b9ca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b9ce:	d108      	bne.n	801b9e2 <_scanf_float+0x1c6>
 801b9d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b9d4:	6022      	str	r2, [r4, #0]
 801b9d6:	f04f 0a01 	mov.w	sl, #1
 801b9da:	e7e3      	b.n	801b9a4 <_scanf_float+0x188>
 801b9dc:	f1ba 0f02 	cmp.w	sl, #2
 801b9e0:	d055      	beq.n	801ba8e <_scanf_float+0x272>
 801b9e2:	2d01      	cmp	r5, #1
 801b9e4:	d002      	beq.n	801b9ec <_scanf_float+0x1d0>
 801b9e6:	2d04      	cmp	r5, #4
 801b9e8:	f47f af48 	bne.w	801b87c <_scanf_float+0x60>
 801b9ec:	3501      	adds	r5, #1
 801b9ee:	b2ed      	uxtb	r5, r5
 801b9f0:	e7d8      	b.n	801b9a4 <_scanf_float+0x188>
 801b9f2:	f1ba 0f01 	cmp.w	sl, #1
 801b9f6:	f47f af41 	bne.w	801b87c <_scanf_float+0x60>
 801b9fa:	f04f 0a02 	mov.w	sl, #2
 801b9fe:	e7d1      	b.n	801b9a4 <_scanf_float+0x188>
 801ba00:	b97d      	cbnz	r5, 801ba22 <_scanf_float+0x206>
 801ba02:	f1b9 0f00 	cmp.w	r9, #0
 801ba06:	f47f af3c 	bne.w	801b882 <_scanf_float+0x66>
 801ba0a:	6822      	ldr	r2, [r4, #0]
 801ba0c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801ba10:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801ba14:	f47f af39 	bne.w	801b88a <_scanf_float+0x6e>
 801ba18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801ba1c:	6022      	str	r2, [r4, #0]
 801ba1e:	2501      	movs	r5, #1
 801ba20:	e7c0      	b.n	801b9a4 <_scanf_float+0x188>
 801ba22:	2d03      	cmp	r5, #3
 801ba24:	d0e2      	beq.n	801b9ec <_scanf_float+0x1d0>
 801ba26:	2d05      	cmp	r5, #5
 801ba28:	e7de      	b.n	801b9e8 <_scanf_float+0x1cc>
 801ba2a:	2d02      	cmp	r5, #2
 801ba2c:	f47f af26 	bne.w	801b87c <_scanf_float+0x60>
 801ba30:	2503      	movs	r5, #3
 801ba32:	e7b7      	b.n	801b9a4 <_scanf_float+0x188>
 801ba34:	2d06      	cmp	r5, #6
 801ba36:	f47f af21 	bne.w	801b87c <_scanf_float+0x60>
 801ba3a:	2507      	movs	r5, #7
 801ba3c:	e7b2      	b.n	801b9a4 <_scanf_float+0x188>
 801ba3e:	6822      	ldr	r2, [r4, #0]
 801ba40:	0591      	lsls	r1, r2, #22
 801ba42:	f57f af1b 	bpl.w	801b87c <_scanf_float+0x60>
 801ba46:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801ba4a:	6022      	str	r2, [r4, #0]
 801ba4c:	f8cd 9004 	str.w	r9, [sp, #4]
 801ba50:	e7a8      	b.n	801b9a4 <_scanf_float+0x188>
 801ba52:	6822      	ldr	r2, [r4, #0]
 801ba54:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801ba58:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801ba5c:	d006      	beq.n	801ba6c <_scanf_float+0x250>
 801ba5e:	0550      	lsls	r0, r2, #21
 801ba60:	f57f af0c 	bpl.w	801b87c <_scanf_float+0x60>
 801ba64:	f1b9 0f00 	cmp.w	r9, #0
 801ba68:	f43f af0f 	beq.w	801b88a <_scanf_float+0x6e>
 801ba6c:	0591      	lsls	r1, r2, #22
 801ba6e:	bf58      	it	pl
 801ba70:	9901      	ldrpl	r1, [sp, #4]
 801ba72:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801ba76:	bf58      	it	pl
 801ba78:	eba9 0101 	subpl.w	r1, r9, r1
 801ba7c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801ba80:	bf58      	it	pl
 801ba82:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801ba86:	6022      	str	r2, [r4, #0]
 801ba88:	f04f 0900 	mov.w	r9, #0
 801ba8c:	e78a      	b.n	801b9a4 <_scanf_float+0x188>
 801ba8e:	f04f 0a03 	mov.w	sl, #3
 801ba92:	e787      	b.n	801b9a4 <_scanf_float+0x188>
 801ba94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801ba98:	4639      	mov	r1, r7
 801ba9a:	4640      	mov	r0, r8
 801ba9c:	4798      	blx	r3
 801ba9e:	2800      	cmp	r0, #0
 801baa0:	f43f aedf 	beq.w	801b862 <_scanf_float+0x46>
 801baa4:	e6ea      	b.n	801b87c <_scanf_float+0x60>
 801baa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801baaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801baae:	463a      	mov	r2, r7
 801bab0:	4640      	mov	r0, r8
 801bab2:	4798      	blx	r3
 801bab4:	6923      	ldr	r3, [r4, #16]
 801bab6:	3b01      	subs	r3, #1
 801bab8:	6123      	str	r3, [r4, #16]
 801baba:	e6ec      	b.n	801b896 <_scanf_float+0x7a>
 801babc:	1e6b      	subs	r3, r5, #1
 801babe:	2b06      	cmp	r3, #6
 801bac0:	d825      	bhi.n	801bb0e <_scanf_float+0x2f2>
 801bac2:	2d02      	cmp	r5, #2
 801bac4:	d836      	bhi.n	801bb34 <_scanf_float+0x318>
 801bac6:	455e      	cmp	r6, fp
 801bac8:	f67f aee8 	bls.w	801b89c <_scanf_float+0x80>
 801bacc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bad0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bad4:	463a      	mov	r2, r7
 801bad6:	4640      	mov	r0, r8
 801bad8:	4798      	blx	r3
 801bada:	6923      	ldr	r3, [r4, #16]
 801badc:	3b01      	subs	r3, #1
 801bade:	6123      	str	r3, [r4, #16]
 801bae0:	e7f1      	b.n	801bac6 <_scanf_float+0x2aa>
 801bae2:	9802      	ldr	r0, [sp, #8]
 801bae4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bae8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801baec:	9002      	str	r0, [sp, #8]
 801baee:	463a      	mov	r2, r7
 801baf0:	4640      	mov	r0, r8
 801baf2:	4798      	blx	r3
 801baf4:	6923      	ldr	r3, [r4, #16]
 801baf6:	3b01      	subs	r3, #1
 801baf8:	6123      	str	r3, [r4, #16]
 801bafa:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bafe:	fa5f fa8a 	uxtb.w	sl, sl
 801bb02:	f1ba 0f02 	cmp.w	sl, #2
 801bb06:	d1ec      	bne.n	801bae2 <_scanf_float+0x2c6>
 801bb08:	3d03      	subs	r5, #3
 801bb0a:	b2ed      	uxtb	r5, r5
 801bb0c:	1b76      	subs	r6, r6, r5
 801bb0e:	6823      	ldr	r3, [r4, #0]
 801bb10:	05da      	lsls	r2, r3, #23
 801bb12:	d52f      	bpl.n	801bb74 <_scanf_float+0x358>
 801bb14:	055b      	lsls	r3, r3, #21
 801bb16:	d510      	bpl.n	801bb3a <_scanf_float+0x31e>
 801bb18:	455e      	cmp	r6, fp
 801bb1a:	f67f aebf 	bls.w	801b89c <_scanf_float+0x80>
 801bb1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bb22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801bb26:	463a      	mov	r2, r7
 801bb28:	4640      	mov	r0, r8
 801bb2a:	4798      	blx	r3
 801bb2c:	6923      	ldr	r3, [r4, #16]
 801bb2e:	3b01      	subs	r3, #1
 801bb30:	6123      	str	r3, [r4, #16]
 801bb32:	e7f1      	b.n	801bb18 <_scanf_float+0x2fc>
 801bb34:	46aa      	mov	sl, r5
 801bb36:	9602      	str	r6, [sp, #8]
 801bb38:	e7df      	b.n	801bafa <_scanf_float+0x2de>
 801bb3a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801bb3e:	6923      	ldr	r3, [r4, #16]
 801bb40:	2965      	cmp	r1, #101	; 0x65
 801bb42:	f103 33ff 	add.w	r3, r3, #4294967295
 801bb46:	f106 35ff 	add.w	r5, r6, #4294967295
 801bb4a:	6123      	str	r3, [r4, #16]
 801bb4c:	d00c      	beq.n	801bb68 <_scanf_float+0x34c>
 801bb4e:	2945      	cmp	r1, #69	; 0x45
 801bb50:	d00a      	beq.n	801bb68 <_scanf_float+0x34c>
 801bb52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bb56:	463a      	mov	r2, r7
 801bb58:	4640      	mov	r0, r8
 801bb5a:	4798      	blx	r3
 801bb5c:	6923      	ldr	r3, [r4, #16]
 801bb5e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801bb62:	3b01      	subs	r3, #1
 801bb64:	1eb5      	subs	r5, r6, #2
 801bb66:	6123      	str	r3, [r4, #16]
 801bb68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801bb6c:	463a      	mov	r2, r7
 801bb6e:	4640      	mov	r0, r8
 801bb70:	4798      	blx	r3
 801bb72:	462e      	mov	r6, r5
 801bb74:	6825      	ldr	r5, [r4, #0]
 801bb76:	f015 0510 	ands.w	r5, r5, #16
 801bb7a:	d158      	bne.n	801bc2e <_scanf_float+0x412>
 801bb7c:	7035      	strb	r5, [r6, #0]
 801bb7e:	6823      	ldr	r3, [r4, #0]
 801bb80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801bb84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bb88:	d11c      	bne.n	801bbc4 <_scanf_float+0x3a8>
 801bb8a:	9b01      	ldr	r3, [sp, #4]
 801bb8c:	454b      	cmp	r3, r9
 801bb8e:	eba3 0209 	sub.w	r2, r3, r9
 801bb92:	d124      	bne.n	801bbde <_scanf_float+0x3c2>
 801bb94:	2200      	movs	r2, #0
 801bb96:	4659      	mov	r1, fp
 801bb98:	4640      	mov	r0, r8
 801bb9a:	f002 fdf9 	bl	801e790 <_strtod_r>
 801bb9e:	9b03      	ldr	r3, [sp, #12]
 801bba0:	6821      	ldr	r1, [r4, #0]
 801bba2:	681b      	ldr	r3, [r3, #0]
 801bba4:	f011 0f02 	tst.w	r1, #2
 801bba8:	ec57 6b10 	vmov	r6, r7, d0
 801bbac:	f103 0204 	add.w	r2, r3, #4
 801bbb0:	d020      	beq.n	801bbf4 <_scanf_float+0x3d8>
 801bbb2:	9903      	ldr	r1, [sp, #12]
 801bbb4:	600a      	str	r2, [r1, #0]
 801bbb6:	681b      	ldr	r3, [r3, #0]
 801bbb8:	e9c3 6700 	strd	r6, r7, [r3]
 801bbbc:	68e3      	ldr	r3, [r4, #12]
 801bbbe:	3301      	adds	r3, #1
 801bbc0:	60e3      	str	r3, [r4, #12]
 801bbc2:	e66c      	b.n	801b89e <_scanf_float+0x82>
 801bbc4:	9b04      	ldr	r3, [sp, #16]
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	d0e4      	beq.n	801bb94 <_scanf_float+0x378>
 801bbca:	9905      	ldr	r1, [sp, #20]
 801bbcc:	230a      	movs	r3, #10
 801bbce:	462a      	mov	r2, r5
 801bbd0:	3101      	adds	r1, #1
 801bbd2:	4640      	mov	r0, r8
 801bbd4:	f002 fe64 	bl	801e8a0 <_strtol_r>
 801bbd8:	9b04      	ldr	r3, [sp, #16]
 801bbda:	9e05      	ldr	r6, [sp, #20]
 801bbdc:	1ac2      	subs	r2, r0, r3
 801bbde:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801bbe2:	429e      	cmp	r6, r3
 801bbe4:	bf28      	it	cs
 801bbe6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801bbea:	4912      	ldr	r1, [pc, #72]	; (801bc34 <_scanf_float+0x418>)
 801bbec:	4630      	mov	r0, r6
 801bbee:	f000 f90b 	bl	801be08 <siprintf>
 801bbf2:	e7cf      	b.n	801bb94 <_scanf_float+0x378>
 801bbf4:	f011 0f04 	tst.w	r1, #4
 801bbf8:	9903      	ldr	r1, [sp, #12]
 801bbfa:	600a      	str	r2, [r1, #0]
 801bbfc:	d1db      	bne.n	801bbb6 <_scanf_float+0x39a>
 801bbfe:	f8d3 8000 	ldr.w	r8, [r3]
 801bc02:	ee10 2a10 	vmov	r2, s0
 801bc06:	ee10 0a10 	vmov	r0, s0
 801bc0a:	463b      	mov	r3, r7
 801bc0c:	4639      	mov	r1, r7
 801bc0e:	f7e4 ffa5 	bl	8000b5c <__aeabi_dcmpun>
 801bc12:	b128      	cbz	r0, 801bc20 <_scanf_float+0x404>
 801bc14:	4808      	ldr	r0, [pc, #32]	; (801bc38 <_scanf_float+0x41c>)
 801bc16:	f000 fc2b 	bl	801c470 <nanf>
 801bc1a:	ed88 0a00 	vstr	s0, [r8]
 801bc1e:	e7cd      	b.n	801bbbc <_scanf_float+0x3a0>
 801bc20:	4630      	mov	r0, r6
 801bc22:	4639      	mov	r1, r7
 801bc24:	f7e4 fff8 	bl	8000c18 <__aeabi_d2f>
 801bc28:	f8c8 0000 	str.w	r0, [r8]
 801bc2c:	e7c6      	b.n	801bbbc <_scanf_float+0x3a0>
 801bc2e:	2500      	movs	r5, #0
 801bc30:	e635      	b.n	801b89e <_scanf_float+0x82>
 801bc32:	bf00      	nop
 801bc34:	0802300a 	.word	0x0802300a
 801bc38:	08022fd7 	.word	0x08022fd7

0801bc3c <std>:
 801bc3c:	2300      	movs	r3, #0
 801bc3e:	b510      	push	{r4, lr}
 801bc40:	4604      	mov	r4, r0
 801bc42:	e9c0 3300 	strd	r3, r3, [r0]
 801bc46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bc4a:	6083      	str	r3, [r0, #8]
 801bc4c:	8181      	strh	r1, [r0, #12]
 801bc4e:	6643      	str	r3, [r0, #100]	; 0x64
 801bc50:	81c2      	strh	r2, [r0, #14]
 801bc52:	6183      	str	r3, [r0, #24]
 801bc54:	4619      	mov	r1, r3
 801bc56:	2208      	movs	r2, #8
 801bc58:	305c      	adds	r0, #92	; 0x5c
 801bc5a:	f000 fa25 	bl	801c0a8 <memset>
 801bc5e:	4b0d      	ldr	r3, [pc, #52]	; (801bc94 <std+0x58>)
 801bc60:	6263      	str	r3, [r4, #36]	; 0x24
 801bc62:	4b0d      	ldr	r3, [pc, #52]	; (801bc98 <std+0x5c>)
 801bc64:	62a3      	str	r3, [r4, #40]	; 0x28
 801bc66:	4b0d      	ldr	r3, [pc, #52]	; (801bc9c <std+0x60>)
 801bc68:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bc6a:	4b0d      	ldr	r3, [pc, #52]	; (801bca0 <std+0x64>)
 801bc6c:	6323      	str	r3, [r4, #48]	; 0x30
 801bc6e:	4b0d      	ldr	r3, [pc, #52]	; (801bca4 <std+0x68>)
 801bc70:	6224      	str	r4, [r4, #32]
 801bc72:	429c      	cmp	r4, r3
 801bc74:	d006      	beq.n	801bc84 <std+0x48>
 801bc76:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801bc7a:	4294      	cmp	r4, r2
 801bc7c:	d002      	beq.n	801bc84 <std+0x48>
 801bc7e:	33d0      	adds	r3, #208	; 0xd0
 801bc80:	429c      	cmp	r4, r3
 801bc82:	d105      	bne.n	801bc90 <std+0x54>
 801bc84:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801bc88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc8c:	f000 bbd6 	b.w	801c43c <__retarget_lock_init_recursive>
 801bc90:	bd10      	pop	{r4, pc}
 801bc92:	bf00      	nop
 801bc94:	0801bea1 	.word	0x0801bea1
 801bc98:	0801bec7 	.word	0x0801bec7
 801bc9c:	0801beff 	.word	0x0801beff
 801bca0:	0801bf23 	.word	0x0801bf23
 801bca4:	2000d94c 	.word	0x2000d94c

0801bca8 <stdio_exit_handler>:
 801bca8:	4a02      	ldr	r2, [pc, #8]	; (801bcb4 <stdio_exit_handler+0xc>)
 801bcaa:	4903      	ldr	r1, [pc, #12]	; (801bcb8 <stdio_exit_handler+0x10>)
 801bcac:	4803      	ldr	r0, [pc, #12]	; (801bcbc <stdio_exit_handler+0x14>)
 801bcae:	f000 b87b 	b.w	801bda8 <_fwalk_sglue>
 801bcb2:	bf00      	nop
 801bcb4:	20000130 	.word	0x20000130
 801bcb8:	0801f529 	.word	0x0801f529
 801bcbc:	2000013c 	.word	0x2000013c

0801bcc0 <cleanup_stdio>:
 801bcc0:	6841      	ldr	r1, [r0, #4]
 801bcc2:	4b0c      	ldr	r3, [pc, #48]	; (801bcf4 <cleanup_stdio+0x34>)
 801bcc4:	4299      	cmp	r1, r3
 801bcc6:	b510      	push	{r4, lr}
 801bcc8:	4604      	mov	r4, r0
 801bcca:	d001      	beq.n	801bcd0 <cleanup_stdio+0x10>
 801bccc:	f003 fc2c 	bl	801f528 <_fflush_r>
 801bcd0:	68a1      	ldr	r1, [r4, #8]
 801bcd2:	4b09      	ldr	r3, [pc, #36]	; (801bcf8 <cleanup_stdio+0x38>)
 801bcd4:	4299      	cmp	r1, r3
 801bcd6:	d002      	beq.n	801bcde <cleanup_stdio+0x1e>
 801bcd8:	4620      	mov	r0, r4
 801bcda:	f003 fc25 	bl	801f528 <_fflush_r>
 801bcde:	68e1      	ldr	r1, [r4, #12]
 801bce0:	4b06      	ldr	r3, [pc, #24]	; (801bcfc <cleanup_stdio+0x3c>)
 801bce2:	4299      	cmp	r1, r3
 801bce4:	d004      	beq.n	801bcf0 <cleanup_stdio+0x30>
 801bce6:	4620      	mov	r0, r4
 801bce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bcec:	f003 bc1c 	b.w	801f528 <_fflush_r>
 801bcf0:	bd10      	pop	{r4, pc}
 801bcf2:	bf00      	nop
 801bcf4:	2000d94c 	.word	0x2000d94c
 801bcf8:	2000d9b4 	.word	0x2000d9b4
 801bcfc:	2000da1c 	.word	0x2000da1c

0801bd00 <global_stdio_init.part.0>:
 801bd00:	b510      	push	{r4, lr}
 801bd02:	4b0b      	ldr	r3, [pc, #44]	; (801bd30 <global_stdio_init.part.0+0x30>)
 801bd04:	4c0b      	ldr	r4, [pc, #44]	; (801bd34 <global_stdio_init.part.0+0x34>)
 801bd06:	4a0c      	ldr	r2, [pc, #48]	; (801bd38 <global_stdio_init.part.0+0x38>)
 801bd08:	601a      	str	r2, [r3, #0]
 801bd0a:	4620      	mov	r0, r4
 801bd0c:	2200      	movs	r2, #0
 801bd0e:	2104      	movs	r1, #4
 801bd10:	f7ff ff94 	bl	801bc3c <std>
 801bd14:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801bd18:	2201      	movs	r2, #1
 801bd1a:	2109      	movs	r1, #9
 801bd1c:	f7ff ff8e 	bl	801bc3c <std>
 801bd20:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801bd24:	2202      	movs	r2, #2
 801bd26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd2a:	2112      	movs	r1, #18
 801bd2c:	f7ff bf86 	b.w	801bc3c <std>
 801bd30:	2000da84 	.word	0x2000da84
 801bd34:	2000d94c 	.word	0x2000d94c
 801bd38:	0801bca9 	.word	0x0801bca9

0801bd3c <__sfp_lock_acquire>:
 801bd3c:	4801      	ldr	r0, [pc, #4]	; (801bd44 <__sfp_lock_acquire+0x8>)
 801bd3e:	f000 bb7e 	b.w	801c43e <__retarget_lock_acquire_recursive>
 801bd42:	bf00      	nop
 801bd44:	2000da8d 	.word	0x2000da8d

0801bd48 <__sfp_lock_release>:
 801bd48:	4801      	ldr	r0, [pc, #4]	; (801bd50 <__sfp_lock_release+0x8>)
 801bd4a:	f000 bb79 	b.w	801c440 <__retarget_lock_release_recursive>
 801bd4e:	bf00      	nop
 801bd50:	2000da8d 	.word	0x2000da8d

0801bd54 <__sinit>:
 801bd54:	b510      	push	{r4, lr}
 801bd56:	4604      	mov	r4, r0
 801bd58:	f7ff fff0 	bl	801bd3c <__sfp_lock_acquire>
 801bd5c:	6a23      	ldr	r3, [r4, #32]
 801bd5e:	b11b      	cbz	r3, 801bd68 <__sinit+0x14>
 801bd60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd64:	f7ff bff0 	b.w	801bd48 <__sfp_lock_release>
 801bd68:	4b04      	ldr	r3, [pc, #16]	; (801bd7c <__sinit+0x28>)
 801bd6a:	6223      	str	r3, [r4, #32]
 801bd6c:	4b04      	ldr	r3, [pc, #16]	; (801bd80 <__sinit+0x2c>)
 801bd6e:	681b      	ldr	r3, [r3, #0]
 801bd70:	2b00      	cmp	r3, #0
 801bd72:	d1f5      	bne.n	801bd60 <__sinit+0xc>
 801bd74:	f7ff ffc4 	bl	801bd00 <global_stdio_init.part.0>
 801bd78:	e7f2      	b.n	801bd60 <__sinit+0xc>
 801bd7a:	bf00      	nop
 801bd7c:	0801bcc1 	.word	0x0801bcc1
 801bd80:	2000da84 	.word	0x2000da84

0801bd84 <fiprintf>:
 801bd84:	b40e      	push	{r1, r2, r3}
 801bd86:	b503      	push	{r0, r1, lr}
 801bd88:	4601      	mov	r1, r0
 801bd8a:	ab03      	add	r3, sp, #12
 801bd8c:	4805      	ldr	r0, [pc, #20]	; (801bda4 <fiprintf+0x20>)
 801bd8e:	f853 2b04 	ldr.w	r2, [r3], #4
 801bd92:	6800      	ldr	r0, [r0, #0]
 801bd94:	9301      	str	r3, [sp, #4]
 801bd96:	f003 f8d9 	bl	801ef4c <_vfiprintf_r>
 801bd9a:	b002      	add	sp, #8
 801bd9c:	f85d eb04 	ldr.w	lr, [sp], #4
 801bda0:	b003      	add	sp, #12
 801bda2:	4770      	bx	lr
 801bda4:	20000188 	.word	0x20000188

0801bda8 <_fwalk_sglue>:
 801bda8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bdac:	4607      	mov	r7, r0
 801bdae:	4688      	mov	r8, r1
 801bdb0:	4614      	mov	r4, r2
 801bdb2:	2600      	movs	r6, #0
 801bdb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801bdb8:	f1b9 0901 	subs.w	r9, r9, #1
 801bdbc:	d505      	bpl.n	801bdca <_fwalk_sglue+0x22>
 801bdbe:	6824      	ldr	r4, [r4, #0]
 801bdc0:	2c00      	cmp	r4, #0
 801bdc2:	d1f7      	bne.n	801bdb4 <_fwalk_sglue+0xc>
 801bdc4:	4630      	mov	r0, r6
 801bdc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bdca:	89ab      	ldrh	r3, [r5, #12]
 801bdcc:	2b01      	cmp	r3, #1
 801bdce:	d907      	bls.n	801bde0 <_fwalk_sglue+0x38>
 801bdd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bdd4:	3301      	adds	r3, #1
 801bdd6:	d003      	beq.n	801bde0 <_fwalk_sglue+0x38>
 801bdd8:	4629      	mov	r1, r5
 801bdda:	4638      	mov	r0, r7
 801bddc:	47c0      	blx	r8
 801bdde:	4306      	orrs	r6, r0
 801bde0:	3568      	adds	r5, #104	; 0x68
 801bde2:	e7e9      	b.n	801bdb8 <_fwalk_sglue+0x10>

0801bde4 <iprintf>:
 801bde4:	b40f      	push	{r0, r1, r2, r3}
 801bde6:	b507      	push	{r0, r1, r2, lr}
 801bde8:	4906      	ldr	r1, [pc, #24]	; (801be04 <iprintf+0x20>)
 801bdea:	ab04      	add	r3, sp, #16
 801bdec:	6808      	ldr	r0, [r1, #0]
 801bdee:	f853 2b04 	ldr.w	r2, [r3], #4
 801bdf2:	6881      	ldr	r1, [r0, #8]
 801bdf4:	9301      	str	r3, [sp, #4]
 801bdf6:	f003 f8a9 	bl	801ef4c <_vfiprintf_r>
 801bdfa:	b003      	add	sp, #12
 801bdfc:	f85d eb04 	ldr.w	lr, [sp], #4
 801be00:	b004      	add	sp, #16
 801be02:	4770      	bx	lr
 801be04:	20000188 	.word	0x20000188

0801be08 <siprintf>:
 801be08:	b40e      	push	{r1, r2, r3}
 801be0a:	b500      	push	{lr}
 801be0c:	b09c      	sub	sp, #112	; 0x70
 801be0e:	ab1d      	add	r3, sp, #116	; 0x74
 801be10:	9002      	str	r0, [sp, #8]
 801be12:	9006      	str	r0, [sp, #24]
 801be14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801be18:	4809      	ldr	r0, [pc, #36]	; (801be40 <siprintf+0x38>)
 801be1a:	9107      	str	r1, [sp, #28]
 801be1c:	9104      	str	r1, [sp, #16]
 801be1e:	4909      	ldr	r1, [pc, #36]	; (801be44 <siprintf+0x3c>)
 801be20:	f853 2b04 	ldr.w	r2, [r3], #4
 801be24:	9105      	str	r1, [sp, #20]
 801be26:	6800      	ldr	r0, [r0, #0]
 801be28:	9301      	str	r3, [sp, #4]
 801be2a:	a902      	add	r1, sp, #8
 801be2c:	f002 fd94 	bl	801e958 <_svfiprintf_r>
 801be30:	9b02      	ldr	r3, [sp, #8]
 801be32:	2200      	movs	r2, #0
 801be34:	701a      	strb	r2, [r3, #0]
 801be36:	b01c      	add	sp, #112	; 0x70
 801be38:	f85d eb04 	ldr.w	lr, [sp], #4
 801be3c:	b003      	add	sp, #12
 801be3e:	4770      	bx	lr
 801be40:	20000188 	.word	0x20000188
 801be44:	ffff0208 	.word	0xffff0208

0801be48 <siscanf>:
 801be48:	b40e      	push	{r1, r2, r3}
 801be4a:	b510      	push	{r4, lr}
 801be4c:	b09f      	sub	sp, #124	; 0x7c
 801be4e:	ac21      	add	r4, sp, #132	; 0x84
 801be50:	f44f 7101 	mov.w	r1, #516	; 0x204
 801be54:	f854 2b04 	ldr.w	r2, [r4], #4
 801be58:	9201      	str	r2, [sp, #4]
 801be5a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801be5e:	9004      	str	r0, [sp, #16]
 801be60:	9008      	str	r0, [sp, #32]
 801be62:	f7e4 fa1d 	bl	80002a0 <strlen>
 801be66:	4b0c      	ldr	r3, [pc, #48]	; (801be98 <siscanf+0x50>)
 801be68:	9005      	str	r0, [sp, #20]
 801be6a:	9009      	str	r0, [sp, #36]	; 0x24
 801be6c:	930d      	str	r3, [sp, #52]	; 0x34
 801be6e:	480b      	ldr	r0, [pc, #44]	; (801be9c <siscanf+0x54>)
 801be70:	9a01      	ldr	r2, [sp, #4]
 801be72:	6800      	ldr	r0, [r0, #0]
 801be74:	9403      	str	r4, [sp, #12]
 801be76:	2300      	movs	r3, #0
 801be78:	9311      	str	r3, [sp, #68]	; 0x44
 801be7a:	9316      	str	r3, [sp, #88]	; 0x58
 801be7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801be80:	f8ad 301e 	strh.w	r3, [sp, #30]
 801be84:	a904      	add	r1, sp, #16
 801be86:	4623      	mov	r3, r4
 801be88:	f002 febe 	bl	801ec08 <__ssvfiscanf_r>
 801be8c:	b01f      	add	sp, #124	; 0x7c
 801be8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801be92:	b003      	add	sp, #12
 801be94:	4770      	bx	lr
 801be96:	bf00      	nop
 801be98:	0801bec3 	.word	0x0801bec3
 801be9c:	20000188 	.word	0x20000188

0801bea0 <__sread>:
 801bea0:	b510      	push	{r4, lr}
 801bea2:	460c      	mov	r4, r1
 801bea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bea8:	f000 fa6a 	bl	801c380 <_read_r>
 801beac:	2800      	cmp	r0, #0
 801beae:	bfab      	itete	ge
 801beb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801beb2:	89a3      	ldrhlt	r3, [r4, #12]
 801beb4:	181b      	addge	r3, r3, r0
 801beb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801beba:	bfac      	ite	ge
 801bebc:	6563      	strge	r3, [r4, #84]	; 0x54
 801bebe:	81a3      	strhlt	r3, [r4, #12]
 801bec0:	bd10      	pop	{r4, pc}

0801bec2 <__seofread>:
 801bec2:	2000      	movs	r0, #0
 801bec4:	4770      	bx	lr

0801bec6 <__swrite>:
 801bec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801beca:	461f      	mov	r7, r3
 801becc:	898b      	ldrh	r3, [r1, #12]
 801bece:	05db      	lsls	r3, r3, #23
 801bed0:	4605      	mov	r5, r0
 801bed2:	460c      	mov	r4, r1
 801bed4:	4616      	mov	r6, r2
 801bed6:	d505      	bpl.n	801bee4 <__swrite+0x1e>
 801bed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bedc:	2302      	movs	r3, #2
 801bede:	2200      	movs	r2, #0
 801bee0:	f000 fa3c 	bl	801c35c <_lseek_r>
 801bee4:	89a3      	ldrh	r3, [r4, #12]
 801bee6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801beea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801beee:	81a3      	strh	r3, [r4, #12]
 801bef0:	4632      	mov	r2, r6
 801bef2:	463b      	mov	r3, r7
 801bef4:	4628      	mov	r0, r5
 801bef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801befa:	f000 ba63 	b.w	801c3c4 <_write_r>

0801befe <__sseek>:
 801befe:	b510      	push	{r4, lr}
 801bf00:	460c      	mov	r4, r1
 801bf02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf06:	f000 fa29 	bl	801c35c <_lseek_r>
 801bf0a:	1c43      	adds	r3, r0, #1
 801bf0c:	89a3      	ldrh	r3, [r4, #12]
 801bf0e:	bf15      	itete	ne
 801bf10:	6560      	strne	r0, [r4, #84]	; 0x54
 801bf12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801bf16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801bf1a:	81a3      	strheq	r3, [r4, #12]
 801bf1c:	bf18      	it	ne
 801bf1e:	81a3      	strhne	r3, [r4, #12]
 801bf20:	bd10      	pop	{r4, pc}

0801bf22 <__sclose>:
 801bf22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf26:	f000 b9b3 	b.w	801c290 <_close_r>

0801bf2a <__swbuf_r>:
 801bf2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf2c:	460e      	mov	r6, r1
 801bf2e:	4614      	mov	r4, r2
 801bf30:	4605      	mov	r5, r0
 801bf32:	b118      	cbz	r0, 801bf3c <__swbuf_r+0x12>
 801bf34:	6a03      	ldr	r3, [r0, #32]
 801bf36:	b90b      	cbnz	r3, 801bf3c <__swbuf_r+0x12>
 801bf38:	f7ff ff0c 	bl	801bd54 <__sinit>
 801bf3c:	69a3      	ldr	r3, [r4, #24]
 801bf3e:	60a3      	str	r3, [r4, #8]
 801bf40:	89a3      	ldrh	r3, [r4, #12]
 801bf42:	071a      	lsls	r2, r3, #28
 801bf44:	d525      	bpl.n	801bf92 <__swbuf_r+0x68>
 801bf46:	6923      	ldr	r3, [r4, #16]
 801bf48:	b31b      	cbz	r3, 801bf92 <__swbuf_r+0x68>
 801bf4a:	6823      	ldr	r3, [r4, #0]
 801bf4c:	6922      	ldr	r2, [r4, #16]
 801bf4e:	1a98      	subs	r0, r3, r2
 801bf50:	6963      	ldr	r3, [r4, #20]
 801bf52:	b2f6      	uxtb	r6, r6
 801bf54:	4283      	cmp	r3, r0
 801bf56:	4637      	mov	r7, r6
 801bf58:	dc04      	bgt.n	801bf64 <__swbuf_r+0x3a>
 801bf5a:	4621      	mov	r1, r4
 801bf5c:	4628      	mov	r0, r5
 801bf5e:	f003 fae3 	bl	801f528 <_fflush_r>
 801bf62:	b9e0      	cbnz	r0, 801bf9e <__swbuf_r+0x74>
 801bf64:	68a3      	ldr	r3, [r4, #8]
 801bf66:	3b01      	subs	r3, #1
 801bf68:	60a3      	str	r3, [r4, #8]
 801bf6a:	6823      	ldr	r3, [r4, #0]
 801bf6c:	1c5a      	adds	r2, r3, #1
 801bf6e:	6022      	str	r2, [r4, #0]
 801bf70:	701e      	strb	r6, [r3, #0]
 801bf72:	6962      	ldr	r2, [r4, #20]
 801bf74:	1c43      	adds	r3, r0, #1
 801bf76:	429a      	cmp	r2, r3
 801bf78:	d004      	beq.n	801bf84 <__swbuf_r+0x5a>
 801bf7a:	89a3      	ldrh	r3, [r4, #12]
 801bf7c:	07db      	lsls	r3, r3, #31
 801bf7e:	d506      	bpl.n	801bf8e <__swbuf_r+0x64>
 801bf80:	2e0a      	cmp	r6, #10
 801bf82:	d104      	bne.n	801bf8e <__swbuf_r+0x64>
 801bf84:	4621      	mov	r1, r4
 801bf86:	4628      	mov	r0, r5
 801bf88:	f003 face 	bl	801f528 <_fflush_r>
 801bf8c:	b938      	cbnz	r0, 801bf9e <__swbuf_r+0x74>
 801bf8e:	4638      	mov	r0, r7
 801bf90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf92:	4621      	mov	r1, r4
 801bf94:	4628      	mov	r0, r5
 801bf96:	f000 f805 	bl	801bfa4 <__swsetup_r>
 801bf9a:	2800      	cmp	r0, #0
 801bf9c:	d0d5      	beq.n	801bf4a <__swbuf_r+0x20>
 801bf9e:	f04f 37ff 	mov.w	r7, #4294967295
 801bfa2:	e7f4      	b.n	801bf8e <__swbuf_r+0x64>

0801bfa4 <__swsetup_r>:
 801bfa4:	b538      	push	{r3, r4, r5, lr}
 801bfa6:	4b2a      	ldr	r3, [pc, #168]	; (801c050 <__swsetup_r+0xac>)
 801bfa8:	4605      	mov	r5, r0
 801bfaa:	6818      	ldr	r0, [r3, #0]
 801bfac:	460c      	mov	r4, r1
 801bfae:	b118      	cbz	r0, 801bfb8 <__swsetup_r+0x14>
 801bfb0:	6a03      	ldr	r3, [r0, #32]
 801bfb2:	b90b      	cbnz	r3, 801bfb8 <__swsetup_r+0x14>
 801bfb4:	f7ff fece 	bl	801bd54 <__sinit>
 801bfb8:	89a3      	ldrh	r3, [r4, #12]
 801bfba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bfbe:	0718      	lsls	r0, r3, #28
 801bfc0:	d422      	bmi.n	801c008 <__swsetup_r+0x64>
 801bfc2:	06d9      	lsls	r1, r3, #27
 801bfc4:	d407      	bmi.n	801bfd6 <__swsetup_r+0x32>
 801bfc6:	2309      	movs	r3, #9
 801bfc8:	602b      	str	r3, [r5, #0]
 801bfca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801bfce:	81a3      	strh	r3, [r4, #12]
 801bfd0:	f04f 30ff 	mov.w	r0, #4294967295
 801bfd4:	e034      	b.n	801c040 <__swsetup_r+0x9c>
 801bfd6:	0758      	lsls	r0, r3, #29
 801bfd8:	d512      	bpl.n	801c000 <__swsetup_r+0x5c>
 801bfda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bfdc:	b141      	cbz	r1, 801bff0 <__swsetup_r+0x4c>
 801bfde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bfe2:	4299      	cmp	r1, r3
 801bfe4:	d002      	beq.n	801bfec <__swsetup_r+0x48>
 801bfe6:	4628      	mov	r0, r5
 801bfe8:	f001 f8cc 	bl	801d184 <_free_r>
 801bfec:	2300      	movs	r3, #0
 801bfee:	6363      	str	r3, [r4, #52]	; 0x34
 801bff0:	89a3      	ldrh	r3, [r4, #12]
 801bff2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bff6:	81a3      	strh	r3, [r4, #12]
 801bff8:	2300      	movs	r3, #0
 801bffa:	6063      	str	r3, [r4, #4]
 801bffc:	6923      	ldr	r3, [r4, #16]
 801bffe:	6023      	str	r3, [r4, #0]
 801c000:	89a3      	ldrh	r3, [r4, #12]
 801c002:	f043 0308 	orr.w	r3, r3, #8
 801c006:	81a3      	strh	r3, [r4, #12]
 801c008:	6923      	ldr	r3, [r4, #16]
 801c00a:	b94b      	cbnz	r3, 801c020 <__swsetup_r+0x7c>
 801c00c:	89a3      	ldrh	r3, [r4, #12]
 801c00e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c016:	d003      	beq.n	801c020 <__swsetup_r+0x7c>
 801c018:	4621      	mov	r1, r4
 801c01a:	4628      	mov	r0, r5
 801c01c:	f003 fad2 	bl	801f5c4 <__smakebuf_r>
 801c020:	89a0      	ldrh	r0, [r4, #12]
 801c022:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c026:	f010 0301 	ands.w	r3, r0, #1
 801c02a:	d00a      	beq.n	801c042 <__swsetup_r+0x9e>
 801c02c:	2300      	movs	r3, #0
 801c02e:	60a3      	str	r3, [r4, #8]
 801c030:	6963      	ldr	r3, [r4, #20]
 801c032:	425b      	negs	r3, r3
 801c034:	61a3      	str	r3, [r4, #24]
 801c036:	6923      	ldr	r3, [r4, #16]
 801c038:	b943      	cbnz	r3, 801c04c <__swsetup_r+0xa8>
 801c03a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c03e:	d1c4      	bne.n	801bfca <__swsetup_r+0x26>
 801c040:	bd38      	pop	{r3, r4, r5, pc}
 801c042:	0781      	lsls	r1, r0, #30
 801c044:	bf58      	it	pl
 801c046:	6963      	ldrpl	r3, [r4, #20]
 801c048:	60a3      	str	r3, [r4, #8]
 801c04a:	e7f4      	b.n	801c036 <__swsetup_r+0x92>
 801c04c:	2000      	movs	r0, #0
 801c04e:	e7f7      	b.n	801c040 <__swsetup_r+0x9c>
 801c050:	20000188 	.word	0x20000188

0801c054 <memcmp>:
 801c054:	b510      	push	{r4, lr}
 801c056:	3901      	subs	r1, #1
 801c058:	4402      	add	r2, r0
 801c05a:	4290      	cmp	r0, r2
 801c05c:	d101      	bne.n	801c062 <memcmp+0xe>
 801c05e:	2000      	movs	r0, #0
 801c060:	e005      	b.n	801c06e <memcmp+0x1a>
 801c062:	7803      	ldrb	r3, [r0, #0]
 801c064:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c068:	42a3      	cmp	r3, r4
 801c06a:	d001      	beq.n	801c070 <memcmp+0x1c>
 801c06c:	1b18      	subs	r0, r3, r4
 801c06e:	bd10      	pop	{r4, pc}
 801c070:	3001      	adds	r0, #1
 801c072:	e7f2      	b.n	801c05a <memcmp+0x6>

0801c074 <memmove>:
 801c074:	4288      	cmp	r0, r1
 801c076:	b510      	push	{r4, lr}
 801c078:	eb01 0402 	add.w	r4, r1, r2
 801c07c:	d902      	bls.n	801c084 <memmove+0x10>
 801c07e:	4284      	cmp	r4, r0
 801c080:	4623      	mov	r3, r4
 801c082:	d807      	bhi.n	801c094 <memmove+0x20>
 801c084:	1e43      	subs	r3, r0, #1
 801c086:	42a1      	cmp	r1, r4
 801c088:	d008      	beq.n	801c09c <memmove+0x28>
 801c08a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c08e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c092:	e7f8      	b.n	801c086 <memmove+0x12>
 801c094:	4402      	add	r2, r0
 801c096:	4601      	mov	r1, r0
 801c098:	428a      	cmp	r2, r1
 801c09a:	d100      	bne.n	801c09e <memmove+0x2a>
 801c09c:	bd10      	pop	{r4, pc}
 801c09e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c0a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c0a6:	e7f7      	b.n	801c098 <memmove+0x24>

0801c0a8 <memset>:
 801c0a8:	4402      	add	r2, r0
 801c0aa:	4603      	mov	r3, r0
 801c0ac:	4293      	cmp	r3, r2
 801c0ae:	d100      	bne.n	801c0b2 <memset+0xa>
 801c0b0:	4770      	bx	lr
 801c0b2:	f803 1b01 	strb.w	r1, [r3], #1
 801c0b6:	e7f9      	b.n	801c0ac <memset+0x4>

0801c0b8 <strcat>:
 801c0b8:	b510      	push	{r4, lr}
 801c0ba:	4602      	mov	r2, r0
 801c0bc:	7814      	ldrb	r4, [r2, #0]
 801c0be:	4613      	mov	r3, r2
 801c0c0:	3201      	adds	r2, #1
 801c0c2:	2c00      	cmp	r4, #0
 801c0c4:	d1fa      	bne.n	801c0bc <strcat+0x4>
 801c0c6:	3b01      	subs	r3, #1
 801c0c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c0cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c0d0:	2a00      	cmp	r2, #0
 801c0d2:	d1f9      	bne.n	801c0c8 <strcat+0x10>
 801c0d4:	bd10      	pop	{r4, pc}

0801c0d6 <strchr>:
 801c0d6:	b2c9      	uxtb	r1, r1
 801c0d8:	4603      	mov	r3, r0
 801c0da:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c0de:	b11a      	cbz	r2, 801c0e8 <strchr+0x12>
 801c0e0:	428a      	cmp	r2, r1
 801c0e2:	d1f9      	bne.n	801c0d8 <strchr+0x2>
 801c0e4:	4618      	mov	r0, r3
 801c0e6:	4770      	bx	lr
 801c0e8:	2900      	cmp	r1, #0
 801c0ea:	bf18      	it	ne
 801c0ec:	2300      	movne	r3, #0
 801c0ee:	e7f9      	b.n	801c0e4 <strchr+0xe>

0801c0f0 <strcspn>:
 801c0f0:	b570      	push	{r4, r5, r6, lr}
 801c0f2:	4603      	mov	r3, r0
 801c0f4:	461e      	mov	r6, r3
 801c0f6:	f813 4b01 	ldrb.w	r4, [r3], #1
 801c0fa:	b144      	cbz	r4, 801c10e <strcspn+0x1e>
 801c0fc:	1e4a      	subs	r2, r1, #1
 801c0fe:	e001      	b.n	801c104 <strcspn+0x14>
 801c100:	42a5      	cmp	r5, r4
 801c102:	d004      	beq.n	801c10e <strcspn+0x1e>
 801c104:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801c108:	2d00      	cmp	r5, #0
 801c10a:	d1f9      	bne.n	801c100 <strcspn+0x10>
 801c10c:	e7f2      	b.n	801c0f4 <strcspn+0x4>
 801c10e:	1a30      	subs	r0, r6, r0
 801c110:	bd70      	pop	{r4, r5, r6, pc}

0801c112 <strncat>:
 801c112:	b530      	push	{r4, r5, lr}
 801c114:	4604      	mov	r4, r0
 801c116:	7825      	ldrb	r5, [r4, #0]
 801c118:	4623      	mov	r3, r4
 801c11a:	3401      	adds	r4, #1
 801c11c:	2d00      	cmp	r5, #0
 801c11e:	d1fa      	bne.n	801c116 <strncat+0x4>
 801c120:	3a01      	subs	r2, #1
 801c122:	d304      	bcc.n	801c12e <strncat+0x1c>
 801c124:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c128:	f803 4b01 	strb.w	r4, [r3], #1
 801c12c:	b904      	cbnz	r4, 801c130 <strncat+0x1e>
 801c12e:	bd30      	pop	{r4, r5, pc}
 801c130:	2a00      	cmp	r2, #0
 801c132:	d1f5      	bne.n	801c120 <strncat+0xe>
 801c134:	701a      	strb	r2, [r3, #0]
 801c136:	e7f3      	b.n	801c120 <strncat+0xe>

0801c138 <strncmp>:
 801c138:	b510      	push	{r4, lr}
 801c13a:	b16a      	cbz	r2, 801c158 <strncmp+0x20>
 801c13c:	3901      	subs	r1, #1
 801c13e:	1884      	adds	r4, r0, r2
 801c140:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c144:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801c148:	429a      	cmp	r2, r3
 801c14a:	d103      	bne.n	801c154 <strncmp+0x1c>
 801c14c:	42a0      	cmp	r0, r4
 801c14e:	d001      	beq.n	801c154 <strncmp+0x1c>
 801c150:	2a00      	cmp	r2, #0
 801c152:	d1f5      	bne.n	801c140 <strncmp+0x8>
 801c154:	1ad0      	subs	r0, r2, r3
 801c156:	bd10      	pop	{r4, pc}
 801c158:	4610      	mov	r0, r2
 801c15a:	e7fc      	b.n	801c156 <strncmp+0x1e>

0801c15c <strncpy>:
 801c15c:	b510      	push	{r4, lr}
 801c15e:	3901      	subs	r1, #1
 801c160:	4603      	mov	r3, r0
 801c162:	b132      	cbz	r2, 801c172 <strncpy+0x16>
 801c164:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c168:	f803 4b01 	strb.w	r4, [r3], #1
 801c16c:	3a01      	subs	r2, #1
 801c16e:	2c00      	cmp	r4, #0
 801c170:	d1f7      	bne.n	801c162 <strncpy+0x6>
 801c172:	441a      	add	r2, r3
 801c174:	2100      	movs	r1, #0
 801c176:	4293      	cmp	r3, r2
 801c178:	d100      	bne.n	801c17c <strncpy+0x20>
 801c17a:	bd10      	pop	{r4, pc}
 801c17c:	f803 1b01 	strb.w	r1, [r3], #1
 801c180:	e7f9      	b.n	801c176 <strncpy+0x1a>

0801c182 <strspn>:
 801c182:	b570      	push	{r4, r5, r6, lr}
 801c184:	4603      	mov	r3, r0
 801c186:	461e      	mov	r6, r3
 801c188:	f813 4b01 	ldrb.w	r4, [r3], #1
 801c18c:	b13c      	cbz	r4, 801c19e <strspn+0x1c>
 801c18e:	1e4a      	subs	r2, r1, #1
 801c190:	e001      	b.n	801c196 <strspn+0x14>
 801c192:	42a5      	cmp	r5, r4
 801c194:	d0f7      	beq.n	801c186 <strspn+0x4>
 801c196:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801c19a:	2d00      	cmp	r5, #0
 801c19c:	d1f9      	bne.n	801c192 <strspn+0x10>
 801c19e:	1a30      	subs	r0, r6, r0
 801c1a0:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c1a4 <strtok>:
 801c1a4:	4b16      	ldr	r3, [pc, #88]	; (801c200 <strtok+0x5c>)
 801c1a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c1a8:	681e      	ldr	r6, [r3, #0]
 801c1aa:	6c74      	ldr	r4, [r6, #68]	; 0x44
 801c1ac:	4605      	mov	r5, r0
 801c1ae:	b9fc      	cbnz	r4, 801c1f0 <strtok+0x4c>
 801c1b0:	2050      	movs	r0, #80	; 0x50
 801c1b2:	9101      	str	r1, [sp, #4]
 801c1b4:	f7fe fe10 	bl	801add8 <malloc>
 801c1b8:	9901      	ldr	r1, [sp, #4]
 801c1ba:	6470      	str	r0, [r6, #68]	; 0x44
 801c1bc:	4602      	mov	r2, r0
 801c1be:	b920      	cbnz	r0, 801c1ca <strtok+0x26>
 801c1c0:	4b10      	ldr	r3, [pc, #64]	; (801c204 <strtok+0x60>)
 801c1c2:	4811      	ldr	r0, [pc, #68]	; (801c208 <strtok+0x64>)
 801c1c4:	215b      	movs	r1, #91	; 0x5b
 801c1c6:	f7fe fdd3 	bl	801ad70 <__assert_func>
 801c1ca:	e9c0 4400 	strd	r4, r4, [r0]
 801c1ce:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801c1d2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801c1d6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801c1da:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801c1de:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801c1e2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801c1e6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801c1ea:	6184      	str	r4, [r0, #24]
 801c1ec:	7704      	strb	r4, [r0, #28]
 801c1ee:	6244      	str	r4, [r0, #36]	; 0x24
 801c1f0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 801c1f2:	2301      	movs	r3, #1
 801c1f4:	4628      	mov	r0, r5
 801c1f6:	b002      	add	sp, #8
 801c1f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c1fc:	f000 b806 	b.w	801c20c <__strtok_r>
 801c200:	20000188 	.word	0x20000188
 801c204:	0802300f 	.word	0x0802300f
 801c208:	08023026 	.word	0x08023026

0801c20c <__strtok_r>:
 801c20c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c20e:	b908      	cbnz	r0, 801c214 <__strtok_r+0x8>
 801c210:	6810      	ldr	r0, [r2, #0]
 801c212:	b188      	cbz	r0, 801c238 <__strtok_r+0x2c>
 801c214:	4604      	mov	r4, r0
 801c216:	4620      	mov	r0, r4
 801c218:	f814 5b01 	ldrb.w	r5, [r4], #1
 801c21c:	460f      	mov	r7, r1
 801c21e:	f817 6b01 	ldrb.w	r6, [r7], #1
 801c222:	b91e      	cbnz	r6, 801c22c <__strtok_r+0x20>
 801c224:	b965      	cbnz	r5, 801c240 <__strtok_r+0x34>
 801c226:	6015      	str	r5, [r2, #0]
 801c228:	4628      	mov	r0, r5
 801c22a:	e005      	b.n	801c238 <__strtok_r+0x2c>
 801c22c:	42b5      	cmp	r5, r6
 801c22e:	d1f6      	bne.n	801c21e <__strtok_r+0x12>
 801c230:	2b00      	cmp	r3, #0
 801c232:	d1f0      	bne.n	801c216 <__strtok_r+0xa>
 801c234:	6014      	str	r4, [r2, #0]
 801c236:	7003      	strb	r3, [r0, #0]
 801c238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c23a:	461c      	mov	r4, r3
 801c23c:	e00c      	b.n	801c258 <__strtok_r+0x4c>
 801c23e:	b915      	cbnz	r5, 801c246 <__strtok_r+0x3a>
 801c240:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c244:	460e      	mov	r6, r1
 801c246:	f816 5b01 	ldrb.w	r5, [r6], #1
 801c24a:	42ab      	cmp	r3, r5
 801c24c:	d1f7      	bne.n	801c23e <__strtok_r+0x32>
 801c24e:	2b00      	cmp	r3, #0
 801c250:	d0f3      	beq.n	801c23a <__strtok_r+0x2e>
 801c252:	2300      	movs	r3, #0
 801c254:	f804 3c01 	strb.w	r3, [r4, #-1]
 801c258:	6014      	str	r4, [r2, #0]
 801c25a:	e7ed      	b.n	801c238 <__strtok_r+0x2c>

0801c25c <strstr>:
 801c25c:	780a      	ldrb	r2, [r1, #0]
 801c25e:	b570      	push	{r4, r5, r6, lr}
 801c260:	b96a      	cbnz	r2, 801c27e <strstr+0x22>
 801c262:	bd70      	pop	{r4, r5, r6, pc}
 801c264:	429a      	cmp	r2, r3
 801c266:	d109      	bne.n	801c27c <strstr+0x20>
 801c268:	460c      	mov	r4, r1
 801c26a:	4605      	mov	r5, r0
 801c26c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801c270:	2b00      	cmp	r3, #0
 801c272:	d0f6      	beq.n	801c262 <strstr+0x6>
 801c274:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801c278:	429e      	cmp	r6, r3
 801c27a:	d0f7      	beq.n	801c26c <strstr+0x10>
 801c27c:	3001      	adds	r0, #1
 801c27e:	7803      	ldrb	r3, [r0, #0]
 801c280:	2b00      	cmp	r3, #0
 801c282:	d1ef      	bne.n	801c264 <strstr+0x8>
 801c284:	4618      	mov	r0, r3
 801c286:	e7ec      	b.n	801c262 <strstr+0x6>

0801c288 <_localeconv_r>:
 801c288:	4800      	ldr	r0, [pc, #0]	; (801c28c <_localeconv_r+0x4>)
 801c28a:	4770      	bx	lr
 801c28c:	2000027c 	.word	0x2000027c

0801c290 <_close_r>:
 801c290:	b538      	push	{r3, r4, r5, lr}
 801c292:	4d06      	ldr	r5, [pc, #24]	; (801c2ac <_close_r+0x1c>)
 801c294:	2300      	movs	r3, #0
 801c296:	4604      	mov	r4, r0
 801c298:	4608      	mov	r0, r1
 801c29a:	602b      	str	r3, [r5, #0]
 801c29c:	f7e6 fa9f 	bl	80027de <_close>
 801c2a0:	1c43      	adds	r3, r0, #1
 801c2a2:	d102      	bne.n	801c2aa <_close_r+0x1a>
 801c2a4:	682b      	ldr	r3, [r5, #0]
 801c2a6:	b103      	cbz	r3, 801c2aa <_close_r+0x1a>
 801c2a8:	6023      	str	r3, [r4, #0]
 801c2aa:	bd38      	pop	{r3, r4, r5, pc}
 801c2ac:	2000da88 	.word	0x2000da88

0801c2b0 <_reclaim_reent>:
 801c2b0:	4b29      	ldr	r3, [pc, #164]	; (801c358 <_reclaim_reent+0xa8>)
 801c2b2:	681b      	ldr	r3, [r3, #0]
 801c2b4:	4283      	cmp	r3, r0
 801c2b6:	b570      	push	{r4, r5, r6, lr}
 801c2b8:	4604      	mov	r4, r0
 801c2ba:	d04b      	beq.n	801c354 <_reclaim_reent+0xa4>
 801c2bc:	69c3      	ldr	r3, [r0, #28]
 801c2be:	b143      	cbz	r3, 801c2d2 <_reclaim_reent+0x22>
 801c2c0:	68db      	ldr	r3, [r3, #12]
 801c2c2:	2b00      	cmp	r3, #0
 801c2c4:	d144      	bne.n	801c350 <_reclaim_reent+0xa0>
 801c2c6:	69e3      	ldr	r3, [r4, #28]
 801c2c8:	6819      	ldr	r1, [r3, #0]
 801c2ca:	b111      	cbz	r1, 801c2d2 <_reclaim_reent+0x22>
 801c2cc:	4620      	mov	r0, r4
 801c2ce:	f000 ff59 	bl	801d184 <_free_r>
 801c2d2:	6961      	ldr	r1, [r4, #20]
 801c2d4:	b111      	cbz	r1, 801c2dc <_reclaim_reent+0x2c>
 801c2d6:	4620      	mov	r0, r4
 801c2d8:	f000 ff54 	bl	801d184 <_free_r>
 801c2dc:	69e1      	ldr	r1, [r4, #28]
 801c2de:	b111      	cbz	r1, 801c2e6 <_reclaim_reent+0x36>
 801c2e0:	4620      	mov	r0, r4
 801c2e2:	f000 ff4f 	bl	801d184 <_free_r>
 801c2e6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c2e8:	b111      	cbz	r1, 801c2f0 <_reclaim_reent+0x40>
 801c2ea:	4620      	mov	r0, r4
 801c2ec:	f000 ff4a 	bl	801d184 <_free_r>
 801c2f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c2f2:	b111      	cbz	r1, 801c2fa <_reclaim_reent+0x4a>
 801c2f4:	4620      	mov	r0, r4
 801c2f6:	f000 ff45 	bl	801d184 <_free_r>
 801c2fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c2fc:	b111      	cbz	r1, 801c304 <_reclaim_reent+0x54>
 801c2fe:	4620      	mov	r0, r4
 801c300:	f000 ff40 	bl	801d184 <_free_r>
 801c304:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801c306:	b111      	cbz	r1, 801c30e <_reclaim_reent+0x5e>
 801c308:	4620      	mov	r0, r4
 801c30a:	f000 ff3b 	bl	801d184 <_free_r>
 801c30e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801c310:	b111      	cbz	r1, 801c318 <_reclaim_reent+0x68>
 801c312:	4620      	mov	r0, r4
 801c314:	f000 ff36 	bl	801d184 <_free_r>
 801c318:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801c31a:	b111      	cbz	r1, 801c322 <_reclaim_reent+0x72>
 801c31c:	4620      	mov	r0, r4
 801c31e:	f000 ff31 	bl	801d184 <_free_r>
 801c322:	6a23      	ldr	r3, [r4, #32]
 801c324:	b1b3      	cbz	r3, 801c354 <_reclaim_reent+0xa4>
 801c326:	4620      	mov	r0, r4
 801c328:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c32c:	4718      	bx	r3
 801c32e:	5949      	ldr	r1, [r1, r5]
 801c330:	b941      	cbnz	r1, 801c344 <_reclaim_reent+0x94>
 801c332:	3504      	adds	r5, #4
 801c334:	69e3      	ldr	r3, [r4, #28]
 801c336:	2d80      	cmp	r5, #128	; 0x80
 801c338:	68d9      	ldr	r1, [r3, #12]
 801c33a:	d1f8      	bne.n	801c32e <_reclaim_reent+0x7e>
 801c33c:	4620      	mov	r0, r4
 801c33e:	f000 ff21 	bl	801d184 <_free_r>
 801c342:	e7c0      	b.n	801c2c6 <_reclaim_reent+0x16>
 801c344:	680e      	ldr	r6, [r1, #0]
 801c346:	4620      	mov	r0, r4
 801c348:	f000 ff1c 	bl	801d184 <_free_r>
 801c34c:	4631      	mov	r1, r6
 801c34e:	e7ef      	b.n	801c330 <_reclaim_reent+0x80>
 801c350:	2500      	movs	r5, #0
 801c352:	e7ef      	b.n	801c334 <_reclaim_reent+0x84>
 801c354:	bd70      	pop	{r4, r5, r6, pc}
 801c356:	bf00      	nop
 801c358:	20000188 	.word	0x20000188

0801c35c <_lseek_r>:
 801c35c:	b538      	push	{r3, r4, r5, lr}
 801c35e:	4d07      	ldr	r5, [pc, #28]	; (801c37c <_lseek_r+0x20>)
 801c360:	4604      	mov	r4, r0
 801c362:	4608      	mov	r0, r1
 801c364:	4611      	mov	r1, r2
 801c366:	2200      	movs	r2, #0
 801c368:	602a      	str	r2, [r5, #0]
 801c36a:	461a      	mov	r2, r3
 801c36c:	f7e6 fa5e 	bl	800282c <_lseek>
 801c370:	1c43      	adds	r3, r0, #1
 801c372:	d102      	bne.n	801c37a <_lseek_r+0x1e>
 801c374:	682b      	ldr	r3, [r5, #0]
 801c376:	b103      	cbz	r3, 801c37a <_lseek_r+0x1e>
 801c378:	6023      	str	r3, [r4, #0]
 801c37a:	bd38      	pop	{r3, r4, r5, pc}
 801c37c:	2000da88 	.word	0x2000da88

0801c380 <_read_r>:
 801c380:	b538      	push	{r3, r4, r5, lr}
 801c382:	4d07      	ldr	r5, [pc, #28]	; (801c3a0 <_read_r+0x20>)
 801c384:	4604      	mov	r4, r0
 801c386:	4608      	mov	r0, r1
 801c388:	4611      	mov	r1, r2
 801c38a:	2200      	movs	r2, #0
 801c38c:	602a      	str	r2, [r5, #0]
 801c38e:	461a      	mov	r2, r3
 801c390:	f7e6 f9ec 	bl	800276c <_read>
 801c394:	1c43      	adds	r3, r0, #1
 801c396:	d102      	bne.n	801c39e <_read_r+0x1e>
 801c398:	682b      	ldr	r3, [r5, #0]
 801c39a:	b103      	cbz	r3, 801c39e <_read_r+0x1e>
 801c39c:	6023      	str	r3, [r4, #0]
 801c39e:	bd38      	pop	{r3, r4, r5, pc}
 801c3a0:	2000da88 	.word	0x2000da88

0801c3a4 <_sbrk_r>:
 801c3a4:	b538      	push	{r3, r4, r5, lr}
 801c3a6:	4d06      	ldr	r5, [pc, #24]	; (801c3c0 <_sbrk_r+0x1c>)
 801c3a8:	2300      	movs	r3, #0
 801c3aa:	4604      	mov	r4, r0
 801c3ac:	4608      	mov	r0, r1
 801c3ae:	602b      	str	r3, [r5, #0]
 801c3b0:	f7e6 fa4a 	bl	8002848 <_sbrk>
 801c3b4:	1c43      	adds	r3, r0, #1
 801c3b6:	d102      	bne.n	801c3be <_sbrk_r+0x1a>
 801c3b8:	682b      	ldr	r3, [r5, #0]
 801c3ba:	b103      	cbz	r3, 801c3be <_sbrk_r+0x1a>
 801c3bc:	6023      	str	r3, [r4, #0]
 801c3be:	bd38      	pop	{r3, r4, r5, pc}
 801c3c0:	2000da88 	.word	0x2000da88

0801c3c4 <_write_r>:
 801c3c4:	b538      	push	{r3, r4, r5, lr}
 801c3c6:	4d07      	ldr	r5, [pc, #28]	; (801c3e4 <_write_r+0x20>)
 801c3c8:	4604      	mov	r4, r0
 801c3ca:	4608      	mov	r0, r1
 801c3cc:	4611      	mov	r1, r2
 801c3ce:	2200      	movs	r2, #0
 801c3d0:	602a      	str	r2, [r5, #0]
 801c3d2:	461a      	mov	r2, r3
 801c3d4:	f7e6 f9e7 	bl	80027a6 <_write>
 801c3d8:	1c43      	adds	r3, r0, #1
 801c3da:	d102      	bne.n	801c3e2 <_write_r+0x1e>
 801c3dc:	682b      	ldr	r3, [r5, #0]
 801c3de:	b103      	cbz	r3, 801c3e2 <_write_r+0x1e>
 801c3e0:	6023      	str	r3, [r4, #0]
 801c3e2:	bd38      	pop	{r3, r4, r5, pc}
 801c3e4:	2000da88 	.word	0x2000da88

0801c3e8 <__errno>:
 801c3e8:	4b01      	ldr	r3, [pc, #4]	; (801c3f0 <__errno+0x8>)
 801c3ea:	6818      	ldr	r0, [r3, #0]
 801c3ec:	4770      	bx	lr
 801c3ee:	bf00      	nop
 801c3f0:	20000188 	.word	0x20000188

0801c3f4 <__libc_init_array>:
 801c3f4:	b570      	push	{r4, r5, r6, lr}
 801c3f6:	4d0d      	ldr	r5, [pc, #52]	; (801c42c <__libc_init_array+0x38>)
 801c3f8:	4c0d      	ldr	r4, [pc, #52]	; (801c430 <__libc_init_array+0x3c>)
 801c3fa:	1b64      	subs	r4, r4, r5
 801c3fc:	10a4      	asrs	r4, r4, #2
 801c3fe:	2600      	movs	r6, #0
 801c400:	42a6      	cmp	r6, r4
 801c402:	d109      	bne.n	801c418 <__libc_init_array+0x24>
 801c404:	4d0b      	ldr	r5, [pc, #44]	; (801c434 <__libc_init_array+0x40>)
 801c406:	4c0c      	ldr	r4, [pc, #48]	; (801c438 <__libc_init_array+0x44>)
 801c408:	f003 fe1c 	bl	8020044 <_init>
 801c40c:	1b64      	subs	r4, r4, r5
 801c40e:	10a4      	asrs	r4, r4, #2
 801c410:	2600      	movs	r6, #0
 801c412:	42a6      	cmp	r6, r4
 801c414:	d105      	bne.n	801c422 <__libc_init_array+0x2e>
 801c416:	bd70      	pop	{r4, r5, r6, pc}
 801c418:	f855 3b04 	ldr.w	r3, [r5], #4
 801c41c:	4798      	blx	r3
 801c41e:	3601      	adds	r6, #1
 801c420:	e7ee      	b.n	801c400 <__libc_init_array+0xc>
 801c422:	f855 3b04 	ldr.w	r3, [r5], #4
 801c426:	4798      	blx	r3
 801c428:	3601      	adds	r6, #1
 801c42a:	e7f2      	b.n	801c412 <__libc_init_array+0x1e>
 801c42c:	08023440 	.word	0x08023440
 801c430:	08023440 	.word	0x08023440
 801c434:	08023440 	.word	0x08023440
 801c438:	08023444 	.word	0x08023444

0801c43c <__retarget_lock_init_recursive>:
 801c43c:	4770      	bx	lr

0801c43e <__retarget_lock_acquire_recursive>:
 801c43e:	4770      	bx	lr

0801c440 <__retarget_lock_release_recursive>:
 801c440:	4770      	bx	lr

0801c442 <strcpy>:
 801c442:	4603      	mov	r3, r0
 801c444:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c448:	f803 2b01 	strb.w	r2, [r3], #1
 801c44c:	2a00      	cmp	r2, #0
 801c44e:	d1f9      	bne.n	801c444 <strcpy+0x2>
 801c450:	4770      	bx	lr

0801c452 <memcpy>:
 801c452:	440a      	add	r2, r1
 801c454:	4291      	cmp	r1, r2
 801c456:	f100 33ff 	add.w	r3, r0, #4294967295
 801c45a:	d100      	bne.n	801c45e <memcpy+0xc>
 801c45c:	4770      	bx	lr
 801c45e:	b510      	push	{r4, lr}
 801c460:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c464:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c468:	4291      	cmp	r1, r2
 801c46a:	d1f9      	bne.n	801c460 <memcpy+0xe>
 801c46c:	bd10      	pop	{r4, pc}
	...

0801c470 <nanf>:
 801c470:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801c478 <nanf+0x8>
 801c474:	4770      	bx	lr
 801c476:	bf00      	nop
 801c478:	7fc00000 	.word	0x7fc00000

0801c47c <abort>:
 801c47c:	b508      	push	{r3, lr}
 801c47e:	2006      	movs	r0, #6
 801c480:	f003 f978 	bl	801f774 <raise>
 801c484:	2001      	movs	r0, #1
 801c486:	f7e6 f967 	bl	8002758 <_exit>

0801c48a <quorem>:
 801c48a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c48e:	6903      	ldr	r3, [r0, #16]
 801c490:	690c      	ldr	r4, [r1, #16]
 801c492:	42a3      	cmp	r3, r4
 801c494:	4607      	mov	r7, r0
 801c496:	db7e      	blt.n	801c596 <quorem+0x10c>
 801c498:	3c01      	subs	r4, #1
 801c49a:	f101 0814 	add.w	r8, r1, #20
 801c49e:	f100 0514 	add.w	r5, r0, #20
 801c4a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c4a6:	9301      	str	r3, [sp, #4]
 801c4a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c4ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c4b0:	3301      	adds	r3, #1
 801c4b2:	429a      	cmp	r2, r3
 801c4b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c4b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c4bc:	fbb2 f6f3 	udiv	r6, r2, r3
 801c4c0:	d331      	bcc.n	801c526 <quorem+0x9c>
 801c4c2:	f04f 0e00 	mov.w	lr, #0
 801c4c6:	4640      	mov	r0, r8
 801c4c8:	46ac      	mov	ip, r5
 801c4ca:	46f2      	mov	sl, lr
 801c4cc:	f850 2b04 	ldr.w	r2, [r0], #4
 801c4d0:	b293      	uxth	r3, r2
 801c4d2:	fb06 e303 	mla	r3, r6, r3, lr
 801c4d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c4da:	0c1a      	lsrs	r2, r3, #16
 801c4dc:	b29b      	uxth	r3, r3
 801c4de:	ebaa 0303 	sub.w	r3, sl, r3
 801c4e2:	f8dc a000 	ldr.w	sl, [ip]
 801c4e6:	fa13 f38a 	uxtah	r3, r3, sl
 801c4ea:	fb06 220e 	mla	r2, r6, lr, r2
 801c4ee:	9300      	str	r3, [sp, #0]
 801c4f0:	9b00      	ldr	r3, [sp, #0]
 801c4f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c4f6:	b292      	uxth	r2, r2
 801c4f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801c4fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c500:	f8bd 3000 	ldrh.w	r3, [sp]
 801c504:	4581      	cmp	r9, r0
 801c506:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c50a:	f84c 3b04 	str.w	r3, [ip], #4
 801c50e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801c512:	d2db      	bcs.n	801c4cc <quorem+0x42>
 801c514:	f855 300b 	ldr.w	r3, [r5, fp]
 801c518:	b92b      	cbnz	r3, 801c526 <quorem+0x9c>
 801c51a:	9b01      	ldr	r3, [sp, #4]
 801c51c:	3b04      	subs	r3, #4
 801c51e:	429d      	cmp	r5, r3
 801c520:	461a      	mov	r2, r3
 801c522:	d32c      	bcc.n	801c57e <quorem+0xf4>
 801c524:	613c      	str	r4, [r7, #16]
 801c526:	4638      	mov	r0, r7
 801c528:	f001 f93e 	bl	801d7a8 <__mcmp>
 801c52c:	2800      	cmp	r0, #0
 801c52e:	db22      	blt.n	801c576 <quorem+0xec>
 801c530:	3601      	adds	r6, #1
 801c532:	4629      	mov	r1, r5
 801c534:	2000      	movs	r0, #0
 801c536:	f858 2b04 	ldr.w	r2, [r8], #4
 801c53a:	f8d1 c000 	ldr.w	ip, [r1]
 801c53e:	b293      	uxth	r3, r2
 801c540:	1ac3      	subs	r3, r0, r3
 801c542:	0c12      	lsrs	r2, r2, #16
 801c544:	fa13 f38c 	uxtah	r3, r3, ip
 801c548:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801c54c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c550:	b29b      	uxth	r3, r3
 801c552:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c556:	45c1      	cmp	r9, r8
 801c558:	f841 3b04 	str.w	r3, [r1], #4
 801c55c:	ea4f 4022 	mov.w	r0, r2, asr #16
 801c560:	d2e9      	bcs.n	801c536 <quorem+0xac>
 801c562:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c566:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c56a:	b922      	cbnz	r2, 801c576 <quorem+0xec>
 801c56c:	3b04      	subs	r3, #4
 801c56e:	429d      	cmp	r5, r3
 801c570:	461a      	mov	r2, r3
 801c572:	d30a      	bcc.n	801c58a <quorem+0x100>
 801c574:	613c      	str	r4, [r7, #16]
 801c576:	4630      	mov	r0, r6
 801c578:	b003      	add	sp, #12
 801c57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c57e:	6812      	ldr	r2, [r2, #0]
 801c580:	3b04      	subs	r3, #4
 801c582:	2a00      	cmp	r2, #0
 801c584:	d1ce      	bne.n	801c524 <quorem+0x9a>
 801c586:	3c01      	subs	r4, #1
 801c588:	e7c9      	b.n	801c51e <quorem+0x94>
 801c58a:	6812      	ldr	r2, [r2, #0]
 801c58c:	3b04      	subs	r3, #4
 801c58e:	2a00      	cmp	r2, #0
 801c590:	d1f0      	bne.n	801c574 <quorem+0xea>
 801c592:	3c01      	subs	r4, #1
 801c594:	e7eb      	b.n	801c56e <quorem+0xe4>
 801c596:	2000      	movs	r0, #0
 801c598:	e7ee      	b.n	801c578 <quorem+0xee>
 801c59a:	0000      	movs	r0, r0
 801c59c:	0000      	movs	r0, r0
	...

0801c5a0 <_dtoa_r>:
 801c5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5a4:	ed2d 8b04 	vpush	{d8-d9}
 801c5a8:	69c5      	ldr	r5, [r0, #28]
 801c5aa:	b093      	sub	sp, #76	; 0x4c
 801c5ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 801c5b0:	ec57 6b10 	vmov	r6, r7, d0
 801c5b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801c5b8:	9107      	str	r1, [sp, #28]
 801c5ba:	4604      	mov	r4, r0
 801c5bc:	920a      	str	r2, [sp, #40]	; 0x28
 801c5be:	930d      	str	r3, [sp, #52]	; 0x34
 801c5c0:	b975      	cbnz	r5, 801c5e0 <_dtoa_r+0x40>
 801c5c2:	2010      	movs	r0, #16
 801c5c4:	f7fe fc08 	bl	801add8 <malloc>
 801c5c8:	4602      	mov	r2, r0
 801c5ca:	61e0      	str	r0, [r4, #28]
 801c5cc:	b920      	cbnz	r0, 801c5d8 <_dtoa_r+0x38>
 801c5ce:	4bae      	ldr	r3, [pc, #696]	; (801c888 <_dtoa_r+0x2e8>)
 801c5d0:	21ef      	movs	r1, #239	; 0xef
 801c5d2:	48ae      	ldr	r0, [pc, #696]	; (801c88c <_dtoa_r+0x2ec>)
 801c5d4:	f7fe fbcc 	bl	801ad70 <__assert_func>
 801c5d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c5dc:	6005      	str	r5, [r0, #0]
 801c5de:	60c5      	str	r5, [r0, #12]
 801c5e0:	69e3      	ldr	r3, [r4, #28]
 801c5e2:	6819      	ldr	r1, [r3, #0]
 801c5e4:	b151      	cbz	r1, 801c5fc <_dtoa_r+0x5c>
 801c5e6:	685a      	ldr	r2, [r3, #4]
 801c5e8:	604a      	str	r2, [r1, #4]
 801c5ea:	2301      	movs	r3, #1
 801c5ec:	4093      	lsls	r3, r2
 801c5ee:	608b      	str	r3, [r1, #8]
 801c5f0:	4620      	mov	r0, r4
 801c5f2:	f000 fe53 	bl	801d29c <_Bfree>
 801c5f6:	69e3      	ldr	r3, [r4, #28]
 801c5f8:	2200      	movs	r2, #0
 801c5fa:	601a      	str	r2, [r3, #0]
 801c5fc:	1e3b      	subs	r3, r7, #0
 801c5fe:	bfbb      	ittet	lt
 801c600:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c604:	9303      	strlt	r3, [sp, #12]
 801c606:	2300      	movge	r3, #0
 801c608:	2201      	movlt	r2, #1
 801c60a:	bfac      	ite	ge
 801c60c:	f8c8 3000 	strge.w	r3, [r8]
 801c610:	f8c8 2000 	strlt.w	r2, [r8]
 801c614:	4b9e      	ldr	r3, [pc, #632]	; (801c890 <_dtoa_r+0x2f0>)
 801c616:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801c61a:	ea33 0308 	bics.w	r3, r3, r8
 801c61e:	d11b      	bne.n	801c658 <_dtoa_r+0xb8>
 801c620:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c622:	f242 730f 	movw	r3, #9999	; 0x270f
 801c626:	6013      	str	r3, [r2, #0]
 801c628:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801c62c:	4333      	orrs	r3, r6
 801c62e:	f000 8593 	beq.w	801d158 <_dtoa_r+0xbb8>
 801c632:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c634:	b963      	cbnz	r3, 801c650 <_dtoa_r+0xb0>
 801c636:	4b97      	ldr	r3, [pc, #604]	; (801c894 <_dtoa_r+0x2f4>)
 801c638:	e027      	b.n	801c68a <_dtoa_r+0xea>
 801c63a:	4b97      	ldr	r3, [pc, #604]	; (801c898 <_dtoa_r+0x2f8>)
 801c63c:	9300      	str	r3, [sp, #0]
 801c63e:	3308      	adds	r3, #8
 801c640:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c642:	6013      	str	r3, [r2, #0]
 801c644:	9800      	ldr	r0, [sp, #0]
 801c646:	b013      	add	sp, #76	; 0x4c
 801c648:	ecbd 8b04 	vpop	{d8-d9}
 801c64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c650:	4b90      	ldr	r3, [pc, #576]	; (801c894 <_dtoa_r+0x2f4>)
 801c652:	9300      	str	r3, [sp, #0]
 801c654:	3303      	adds	r3, #3
 801c656:	e7f3      	b.n	801c640 <_dtoa_r+0xa0>
 801c658:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c65c:	2200      	movs	r2, #0
 801c65e:	ec51 0b17 	vmov	r0, r1, d7
 801c662:	eeb0 8a47 	vmov.f32	s16, s14
 801c666:	eef0 8a67 	vmov.f32	s17, s15
 801c66a:	2300      	movs	r3, #0
 801c66c:	f7e4 fa44 	bl	8000af8 <__aeabi_dcmpeq>
 801c670:	4681      	mov	r9, r0
 801c672:	b160      	cbz	r0, 801c68e <_dtoa_r+0xee>
 801c674:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c676:	2301      	movs	r3, #1
 801c678:	6013      	str	r3, [r2, #0]
 801c67a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c67c:	2b00      	cmp	r3, #0
 801c67e:	f000 8568 	beq.w	801d152 <_dtoa_r+0xbb2>
 801c682:	4b86      	ldr	r3, [pc, #536]	; (801c89c <_dtoa_r+0x2fc>)
 801c684:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c686:	6013      	str	r3, [r2, #0]
 801c688:	3b01      	subs	r3, #1
 801c68a:	9300      	str	r3, [sp, #0]
 801c68c:	e7da      	b.n	801c644 <_dtoa_r+0xa4>
 801c68e:	aa10      	add	r2, sp, #64	; 0x40
 801c690:	a911      	add	r1, sp, #68	; 0x44
 801c692:	4620      	mov	r0, r4
 801c694:	eeb0 0a48 	vmov.f32	s0, s16
 801c698:	eef0 0a68 	vmov.f32	s1, s17
 801c69c:	f001 f99a 	bl	801d9d4 <__d2b>
 801c6a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801c6a4:	4682      	mov	sl, r0
 801c6a6:	2d00      	cmp	r5, #0
 801c6a8:	d07f      	beq.n	801c7aa <_dtoa_r+0x20a>
 801c6aa:	ee18 3a90 	vmov	r3, s17
 801c6ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c6b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801c6b6:	ec51 0b18 	vmov	r0, r1, d8
 801c6ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801c6be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801c6c2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801c6c6:	4619      	mov	r1, r3
 801c6c8:	2200      	movs	r2, #0
 801c6ca:	4b75      	ldr	r3, [pc, #468]	; (801c8a0 <_dtoa_r+0x300>)
 801c6cc:	f7e3 fdf4 	bl	80002b8 <__aeabi_dsub>
 801c6d0:	a367      	add	r3, pc, #412	; (adr r3, 801c870 <_dtoa_r+0x2d0>)
 801c6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6d6:	f7e3 ffa7 	bl	8000628 <__aeabi_dmul>
 801c6da:	a367      	add	r3, pc, #412	; (adr r3, 801c878 <_dtoa_r+0x2d8>)
 801c6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6e0:	f7e3 fdec 	bl	80002bc <__adddf3>
 801c6e4:	4606      	mov	r6, r0
 801c6e6:	4628      	mov	r0, r5
 801c6e8:	460f      	mov	r7, r1
 801c6ea:	f7e3 ff33 	bl	8000554 <__aeabi_i2d>
 801c6ee:	a364      	add	r3, pc, #400	; (adr r3, 801c880 <_dtoa_r+0x2e0>)
 801c6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6f4:	f7e3 ff98 	bl	8000628 <__aeabi_dmul>
 801c6f8:	4602      	mov	r2, r0
 801c6fa:	460b      	mov	r3, r1
 801c6fc:	4630      	mov	r0, r6
 801c6fe:	4639      	mov	r1, r7
 801c700:	f7e3 fddc 	bl	80002bc <__adddf3>
 801c704:	4606      	mov	r6, r0
 801c706:	460f      	mov	r7, r1
 801c708:	f7e4 fa3e 	bl	8000b88 <__aeabi_d2iz>
 801c70c:	2200      	movs	r2, #0
 801c70e:	4683      	mov	fp, r0
 801c710:	2300      	movs	r3, #0
 801c712:	4630      	mov	r0, r6
 801c714:	4639      	mov	r1, r7
 801c716:	f7e4 f9f9 	bl	8000b0c <__aeabi_dcmplt>
 801c71a:	b148      	cbz	r0, 801c730 <_dtoa_r+0x190>
 801c71c:	4658      	mov	r0, fp
 801c71e:	f7e3 ff19 	bl	8000554 <__aeabi_i2d>
 801c722:	4632      	mov	r2, r6
 801c724:	463b      	mov	r3, r7
 801c726:	f7e4 f9e7 	bl	8000af8 <__aeabi_dcmpeq>
 801c72a:	b908      	cbnz	r0, 801c730 <_dtoa_r+0x190>
 801c72c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c730:	f1bb 0f16 	cmp.w	fp, #22
 801c734:	d857      	bhi.n	801c7e6 <_dtoa_r+0x246>
 801c736:	4b5b      	ldr	r3, [pc, #364]	; (801c8a4 <_dtoa_r+0x304>)
 801c738:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c740:	ec51 0b18 	vmov	r0, r1, d8
 801c744:	f7e4 f9e2 	bl	8000b0c <__aeabi_dcmplt>
 801c748:	2800      	cmp	r0, #0
 801c74a:	d04e      	beq.n	801c7ea <_dtoa_r+0x24a>
 801c74c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c750:	2300      	movs	r3, #0
 801c752:	930c      	str	r3, [sp, #48]	; 0x30
 801c754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c756:	1b5b      	subs	r3, r3, r5
 801c758:	1e5a      	subs	r2, r3, #1
 801c75a:	bf45      	ittet	mi
 801c75c:	f1c3 0301 	rsbmi	r3, r3, #1
 801c760:	9305      	strmi	r3, [sp, #20]
 801c762:	2300      	movpl	r3, #0
 801c764:	2300      	movmi	r3, #0
 801c766:	9206      	str	r2, [sp, #24]
 801c768:	bf54      	ite	pl
 801c76a:	9305      	strpl	r3, [sp, #20]
 801c76c:	9306      	strmi	r3, [sp, #24]
 801c76e:	f1bb 0f00 	cmp.w	fp, #0
 801c772:	db3c      	blt.n	801c7ee <_dtoa_r+0x24e>
 801c774:	9b06      	ldr	r3, [sp, #24]
 801c776:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801c77a:	445b      	add	r3, fp
 801c77c:	9306      	str	r3, [sp, #24]
 801c77e:	2300      	movs	r3, #0
 801c780:	9308      	str	r3, [sp, #32]
 801c782:	9b07      	ldr	r3, [sp, #28]
 801c784:	2b09      	cmp	r3, #9
 801c786:	d868      	bhi.n	801c85a <_dtoa_r+0x2ba>
 801c788:	2b05      	cmp	r3, #5
 801c78a:	bfc4      	itt	gt
 801c78c:	3b04      	subgt	r3, #4
 801c78e:	9307      	strgt	r3, [sp, #28]
 801c790:	9b07      	ldr	r3, [sp, #28]
 801c792:	f1a3 0302 	sub.w	r3, r3, #2
 801c796:	bfcc      	ite	gt
 801c798:	2500      	movgt	r5, #0
 801c79a:	2501      	movle	r5, #1
 801c79c:	2b03      	cmp	r3, #3
 801c79e:	f200 8085 	bhi.w	801c8ac <_dtoa_r+0x30c>
 801c7a2:	e8df f003 	tbb	[pc, r3]
 801c7a6:	3b2e      	.short	0x3b2e
 801c7a8:	5839      	.short	0x5839
 801c7aa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801c7ae:	441d      	add	r5, r3
 801c7b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801c7b4:	2b20      	cmp	r3, #32
 801c7b6:	bfc1      	itttt	gt
 801c7b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801c7bc:	fa08 f803 	lslgt.w	r8, r8, r3
 801c7c0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801c7c4:	fa26 f303 	lsrgt.w	r3, r6, r3
 801c7c8:	bfd6      	itet	le
 801c7ca:	f1c3 0320 	rsble	r3, r3, #32
 801c7ce:	ea48 0003 	orrgt.w	r0, r8, r3
 801c7d2:	fa06 f003 	lslle.w	r0, r6, r3
 801c7d6:	f7e3 fead 	bl	8000534 <__aeabi_ui2d>
 801c7da:	2201      	movs	r2, #1
 801c7dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801c7e0:	3d01      	subs	r5, #1
 801c7e2:	920e      	str	r2, [sp, #56]	; 0x38
 801c7e4:	e76f      	b.n	801c6c6 <_dtoa_r+0x126>
 801c7e6:	2301      	movs	r3, #1
 801c7e8:	e7b3      	b.n	801c752 <_dtoa_r+0x1b2>
 801c7ea:	900c      	str	r0, [sp, #48]	; 0x30
 801c7ec:	e7b2      	b.n	801c754 <_dtoa_r+0x1b4>
 801c7ee:	9b05      	ldr	r3, [sp, #20]
 801c7f0:	eba3 030b 	sub.w	r3, r3, fp
 801c7f4:	9305      	str	r3, [sp, #20]
 801c7f6:	f1cb 0300 	rsb	r3, fp, #0
 801c7fa:	9308      	str	r3, [sp, #32]
 801c7fc:	2300      	movs	r3, #0
 801c7fe:	930b      	str	r3, [sp, #44]	; 0x2c
 801c800:	e7bf      	b.n	801c782 <_dtoa_r+0x1e2>
 801c802:	2300      	movs	r3, #0
 801c804:	9309      	str	r3, [sp, #36]	; 0x24
 801c806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c808:	2b00      	cmp	r3, #0
 801c80a:	dc52      	bgt.n	801c8b2 <_dtoa_r+0x312>
 801c80c:	2301      	movs	r3, #1
 801c80e:	9301      	str	r3, [sp, #4]
 801c810:	9304      	str	r3, [sp, #16]
 801c812:	461a      	mov	r2, r3
 801c814:	920a      	str	r2, [sp, #40]	; 0x28
 801c816:	e00b      	b.n	801c830 <_dtoa_r+0x290>
 801c818:	2301      	movs	r3, #1
 801c81a:	e7f3      	b.n	801c804 <_dtoa_r+0x264>
 801c81c:	2300      	movs	r3, #0
 801c81e:	9309      	str	r3, [sp, #36]	; 0x24
 801c820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c822:	445b      	add	r3, fp
 801c824:	9301      	str	r3, [sp, #4]
 801c826:	3301      	adds	r3, #1
 801c828:	2b01      	cmp	r3, #1
 801c82a:	9304      	str	r3, [sp, #16]
 801c82c:	bfb8      	it	lt
 801c82e:	2301      	movlt	r3, #1
 801c830:	69e0      	ldr	r0, [r4, #28]
 801c832:	2100      	movs	r1, #0
 801c834:	2204      	movs	r2, #4
 801c836:	f102 0614 	add.w	r6, r2, #20
 801c83a:	429e      	cmp	r6, r3
 801c83c:	d93d      	bls.n	801c8ba <_dtoa_r+0x31a>
 801c83e:	6041      	str	r1, [r0, #4]
 801c840:	4620      	mov	r0, r4
 801c842:	f000 fceb 	bl	801d21c <_Balloc>
 801c846:	9000      	str	r0, [sp, #0]
 801c848:	2800      	cmp	r0, #0
 801c84a:	d139      	bne.n	801c8c0 <_dtoa_r+0x320>
 801c84c:	4b16      	ldr	r3, [pc, #88]	; (801c8a8 <_dtoa_r+0x308>)
 801c84e:	4602      	mov	r2, r0
 801c850:	f240 11af 	movw	r1, #431	; 0x1af
 801c854:	e6bd      	b.n	801c5d2 <_dtoa_r+0x32>
 801c856:	2301      	movs	r3, #1
 801c858:	e7e1      	b.n	801c81e <_dtoa_r+0x27e>
 801c85a:	2501      	movs	r5, #1
 801c85c:	2300      	movs	r3, #0
 801c85e:	9307      	str	r3, [sp, #28]
 801c860:	9509      	str	r5, [sp, #36]	; 0x24
 801c862:	f04f 33ff 	mov.w	r3, #4294967295
 801c866:	9301      	str	r3, [sp, #4]
 801c868:	9304      	str	r3, [sp, #16]
 801c86a:	2200      	movs	r2, #0
 801c86c:	2312      	movs	r3, #18
 801c86e:	e7d1      	b.n	801c814 <_dtoa_r+0x274>
 801c870:	636f4361 	.word	0x636f4361
 801c874:	3fd287a7 	.word	0x3fd287a7
 801c878:	8b60c8b3 	.word	0x8b60c8b3
 801c87c:	3fc68a28 	.word	0x3fc68a28
 801c880:	509f79fb 	.word	0x509f79fb
 801c884:	3fd34413 	.word	0x3fd34413
 801c888:	0802300f 	.word	0x0802300f
 801c88c:	0802308d 	.word	0x0802308d
 801c890:	7ff00000 	.word	0x7ff00000
 801c894:	08023089 	.word	0x08023089
 801c898:	08023080 	.word	0x08023080
 801c89c:	080233c9 	.word	0x080233c9
 801c8a0:	3ff80000 	.word	0x3ff80000
 801c8a4:	08023178 	.word	0x08023178
 801c8a8:	080230e5 	.word	0x080230e5
 801c8ac:	2301      	movs	r3, #1
 801c8ae:	9309      	str	r3, [sp, #36]	; 0x24
 801c8b0:	e7d7      	b.n	801c862 <_dtoa_r+0x2c2>
 801c8b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c8b4:	9301      	str	r3, [sp, #4]
 801c8b6:	9304      	str	r3, [sp, #16]
 801c8b8:	e7ba      	b.n	801c830 <_dtoa_r+0x290>
 801c8ba:	3101      	adds	r1, #1
 801c8bc:	0052      	lsls	r2, r2, #1
 801c8be:	e7ba      	b.n	801c836 <_dtoa_r+0x296>
 801c8c0:	69e3      	ldr	r3, [r4, #28]
 801c8c2:	9a00      	ldr	r2, [sp, #0]
 801c8c4:	601a      	str	r2, [r3, #0]
 801c8c6:	9b04      	ldr	r3, [sp, #16]
 801c8c8:	2b0e      	cmp	r3, #14
 801c8ca:	f200 80a8 	bhi.w	801ca1e <_dtoa_r+0x47e>
 801c8ce:	2d00      	cmp	r5, #0
 801c8d0:	f000 80a5 	beq.w	801ca1e <_dtoa_r+0x47e>
 801c8d4:	f1bb 0f00 	cmp.w	fp, #0
 801c8d8:	dd38      	ble.n	801c94c <_dtoa_r+0x3ac>
 801c8da:	4bc0      	ldr	r3, [pc, #768]	; (801cbdc <_dtoa_r+0x63c>)
 801c8dc:	f00b 020f 	and.w	r2, fp, #15
 801c8e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c8e4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801c8e8:	e9d3 6700 	ldrd	r6, r7, [r3]
 801c8ec:	ea4f 182b 	mov.w	r8, fp, asr #4
 801c8f0:	d019      	beq.n	801c926 <_dtoa_r+0x386>
 801c8f2:	4bbb      	ldr	r3, [pc, #748]	; (801cbe0 <_dtoa_r+0x640>)
 801c8f4:	ec51 0b18 	vmov	r0, r1, d8
 801c8f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c8fc:	f7e3 ffbe 	bl	800087c <__aeabi_ddiv>
 801c900:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c904:	f008 080f 	and.w	r8, r8, #15
 801c908:	2503      	movs	r5, #3
 801c90a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 801cbe0 <_dtoa_r+0x640>
 801c90e:	f1b8 0f00 	cmp.w	r8, #0
 801c912:	d10a      	bne.n	801c92a <_dtoa_r+0x38a>
 801c914:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c918:	4632      	mov	r2, r6
 801c91a:	463b      	mov	r3, r7
 801c91c:	f7e3 ffae 	bl	800087c <__aeabi_ddiv>
 801c920:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c924:	e02b      	b.n	801c97e <_dtoa_r+0x3de>
 801c926:	2502      	movs	r5, #2
 801c928:	e7ef      	b.n	801c90a <_dtoa_r+0x36a>
 801c92a:	f018 0f01 	tst.w	r8, #1
 801c92e:	d008      	beq.n	801c942 <_dtoa_r+0x3a2>
 801c930:	4630      	mov	r0, r6
 801c932:	4639      	mov	r1, r7
 801c934:	e9d9 2300 	ldrd	r2, r3, [r9]
 801c938:	f7e3 fe76 	bl	8000628 <__aeabi_dmul>
 801c93c:	3501      	adds	r5, #1
 801c93e:	4606      	mov	r6, r0
 801c940:	460f      	mov	r7, r1
 801c942:	ea4f 0868 	mov.w	r8, r8, asr #1
 801c946:	f109 0908 	add.w	r9, r9, #8
 801c94a:	e7e0      	b.n	801c90e <_dtoa_r+0x36e>
 801c94c:	f000 809f 	beq.w	801ca8e <_dtoa_r+0x4ee>
 801c950:	f1cb 0600 	rsb	r6, fp, #0
 801c954:	4ba1      	ldr	r3, [pc, #644]	; (801cbdc <_dtoa_r+0x63c>)
 801c956:	4fa2      	ldr	r7, [pc, #648]	; (801cbe0 <_dtoa_r+0x640>)
 801c958:	f006 020f 	and.w	r2, r6, #15
 801c95c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c960:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c964:	ec51 0b18 	vmov	r0, r1, d8
 801c968:	f7e3 fe5e 	bl	8000628 <__aeabi_dmul>
 801c96c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c970:	1136      	asrs	r6, r6, #4
 801c972:	2300      	movs	r3, #0
 801c974:	2502      	movs	r5, #2
 801c976:	2e00      	cmp	r6, #0
 801c978:	d17e      	bne.n	801ca78 <_dtoa_r+0x4d8>
 801c97a:	2b00      	cmp	r3, #0
 801c97c:	d1d0      	bne.n	801c920 <_dtoa_r+0x380>
 801c97e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c980:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801c984:	2b00      	cmp	r3, #0
 801c986:	f000 8084 	beq.w	801ca92 <_dtoa_r+0x4f2>
 801c98a:	4b96      	ldr	r3, [pc, #600]	; (801cbe4 <_dtoa_r+0x644>)
 801c98c:	2200      	movs	r2, #0
 801c98e:	4640      	mov	r0, r8
 801c990:	4649      	mov	r1, r9
 801c992:	f7e4 f8bb 	bl	8000b0c <__aeabi_dcmplt>
 801c996:	2800      	cmp	r0, #0
 801c998:	d07b      	beq.n	801ca92 <_dtoa_r+0x4f2>
 801c99a:	9b04      	ldr	r3, [sp, #16]
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	d078      	beq.n	801ca92 <_dtoa_r+0x4f2>
 801c9a0:	9b01      	ldr	r3, [sp, #4]
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	dd39      	ble.n	801ca1a <_dtoa_r+0x47a>
 801c9a6:	4b90      	ldr	r3, [pc, #576]	; (801cbe8 <_dtoa_r+0x648>)
 801c9a8:	2200      	movs	r2, #0
 801c9aa:	4640      	mov	r0, r8
 801c9ac:	4649      	mov	r1, r9
 801c9ae:	f7e3 fe3b 	bl	8000628 <__aeabi_dmul>
 801c9b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c9b6:	9e01      	ldr	r6, [sp, #4]
 801c9b8:	f10b 37ff 	add.w	r7, fp, #4294967295
 801c9bc:	3501      	adds	r5, #1
 801c9be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801c9c2:	4628      	mov	r0, r5
 801c9c4:	f7e3 fdc6 	bl	8000554 <__aeabi_i2d>
 801c9c8:	4642      	mov	r2, r8
 801c9ca:	464b      	mov	r3, r9
 801c9cc:	f7e3 fe2c 	bl	8000628 <__aeabi_dmul>
 801c9d0:	4b86      	ldr	r3, [pc, #536]	; (801cbec <_dtoa_r+0x64c>)
 801c9d2:	2200      	movs	r2, #0
 801c9d4:	f7e3 fc72 	bl	80002bc <__adddf3>
 801c9d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801c9dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c9e0:	9303      	str	r3, [sp, #12]
 801c9e2:	2e00      	cmp	r6, #0
 801c9e4:	d158      	bne.n	801ca98 <_dtoa_r+0x4f8>
 801c9e6:	4b82      	ldr	r3, [pc, #520]	; (801cbf0 <_dtoa_r+0x650>)
 801c9e8:	2200      	movs	r2, #0
 801c9ea:	4640      	mov	r0, r8
 801c9ec:	4649      	mov	r1, r9
 801c9ee:	f7e3 fc63 	bl	80002b8 <__aeabi_dsub>
 801c9f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c9f6:	4680      	mov	r8, r0
 801c9f8:	4689      	mov	r9, r1
 801c9fa:	f7e4 f8a5 	bl	8000b48 <__aeabi_dcmpgt>
 801c9fe:	2800      	cmp	r0, #0
 801ca00:	f040 8296 	bne.w	801cf30 <_dtoa_r+0x990>
 801ca04:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801ca08:	4640      	mov	r0, r8
 801ca0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ca0e:	4649      	mov	r1, r9
 801ca10:	f7e4 f87c 	bl	8000b0c <__aeabi_dcmplt>
 801ca14:	2800      	cmp	r0, #0
 801ca16:	f040 8289 	bne.w	801cf2c <_dtoa_r+0x98c>
 801ca1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801ca1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ca20:	2b00      	cmp	r3, #0
 801ca22:	f2c0 814e 	blt.w	801ccc2 <_dtoa_r+0x722>
 801ca26:	f1bb 0f0e 	cmp.w	fp, #14
 801ca2a:	f300 814a 	bgt.w	801ccc2 <_dtoa_r+0x722>
 801ca2e:	4b6b      	ldr	r3, [pc, #428]	; (801cbdc <_dtoa_r+0x63c>)
 801ca30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801ca34:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ca38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ca3a:	2b00      	cmp	r3, #0
 801ca3c:	f280 80dc 	bge.w	801cbf8 <_dtoa_r+0x658>
 801ca40:	9b04      	ldr	r3, [sp, #16]
 801ca42:	2b00      	cmp	r3, #0
 801ca44:	f300 80d8 	bgt.w	801cbf8 <_dtoa_r+0x658>
 801ca48:	f040 826f 	bne.w	801cf2a <_dtoa_r+0x98a>
 801ca4c:	4b68      	ldr	r3, [pc, #416]	; (801cbf0 <_dtoa_r+0x650>)
 801ca4e:	2200      	movs	r2, #0
 801ca50:	4640      	mov	r0, r8
 801ca52:	4649      	mov	r1, r9
 801ca54:	f7e3 fde8 	bl	8000628 <__aeabi_dmul>
 801ca58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ca5c:	f7e4 f86a 	bl	8000b34 <__aeabi_dcmpge>
 801ca60:	9e04      	ldr	r6, [sp, #16]
 801ca62:	4637      	mov	r7, r6
 801ca64:	2800      	cmp	r0, #0
 801ca66:	f040 8245 	bne.w	801cef4 <_dtoa_r+0x954>
 801ca6a:	9d00      	ldr	r5, [sp, #0]
 801ca6c:	2331      	movs	r3, #49	; 0x31
 801ca6e:	f805 3b01 	strb.w	r3, [r5], #1
 801ca72:	f10b 0b01 	add.w	fp, fp, #1
 801ca76:	e241      	b.n	801cefc <_dtoa_r+0x95c>
 801ca78:	07f2      	lsls	r2, r6, #31
 801ca7a:	d505      	bpl.n	801ca88 <_dtoa_r+0x4e8>
 801ca7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ca80:	f7e3 fdd2 	bl	8000628 <__aeabi_dmul>
 801ca84:	3501      	adds	r5, #1
 801ca86:	2301      	movs	r3, #1
 801ca88:	1076      	asrs	r6, r6, #1
 801ca8a:	3708      	adds	r7, #8
 801ca8c:	e773      	b.n	801c976 <_dtoa_r+0x3d6>
 801ca8e:	2502      	movs	r5, #2
 801ca90:	e775      	b.n	801c97e <_dtoa_r+0x3de>
 801ca92:	9e04      	ldr	r6, [sp, #16]
 801ca94:	465f      	mov	r7, fp
 801ca96:	e792      	b.n	801c9be <_dtoa_r+0x41e>
 801ca98:	9900      	ldr	r1, [sp, #0]
 801ca9a:	4b50      	ldr	r3, [pc, #320]	; (801cbdc <_dtoa_r+0x63c>)
 801ca9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801caa0:	4431      	add	r1, r6
 801caa2:	9102      	str	r1, [sp, #8]
 801caa4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801caa6:	eeb0 9a47 	vmov.f32	s18, s14
 801caaa:	eef0 9a67 	vmov.f32	s19, s15
 801caae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801cab2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801cab6:	2900      	cmp	r1, #0
 801cab8:	d044      	beq.n	801cb44 <_dtoa_r+0x5a4>
 801caba:	494e      	ldr	r1, [pc, #312]	; (801cbf4 <_dtoa_r+0x654>)
 801cabc:	2000      	movs	r0, #0
 801cabe:	f7e3 fedd 	bl	800087c <__aeabi_ddiv>
 801cac2:	ec53 2b19 	vmov	r2, r3, d9
 801cac6:	f7e3 fbf7 	bl	80002b8 <__aeabi_dsub>
 801caca:	9d00      	ldr	r5, [sp, #0]
 801cacc:	ec41 0b19 	vmov	d9, r0, r1
 801cad0:	4649      	mov	r1, r9
 801cad2:	4640      	mov	r0, r8
 801cad4:	f7e4 f858 	bl	8000b88 <__aeabi_d2iz>
 801cad8:	4606      	mov	r6, r0
 801cada:	f7e3 fd3b 	bl	8000554 <__aeabi_i2d>
 801cade:	4602      	mov	r2, r0
 801cae0:	460b      	mov	r3, r1
 801cae2:	4640      	mov	r0, r8
 801cae4:	4649      	mov	r1, r9
 801cae6:	f7e3 fbe7 	bl	80002b8 <__aeabi_dsub>
 801caea:	3630      	adds	r6, #48	; 0x30
 801caec:	f805 6b01 	strb.w	r6, [r5], #1
 801caf0:	ec53 2b19 	vmov	r2, r3, d9
 801caf4:	4680      	mov	r8, r0
 801caf6:	4689      	mov	r9, r1
 801caf8:	f7e4 f808 	bl	8000b0c <__aeabi_dcmplt>
 801cafc:	2800      	cmp	r0, #0
 801cafe:	d164      	bne.n	801cbca <_dtoa_r+0x62a>
 801cb00:	4642      	mov	r2, r8
 801cb02:	464b      	mov	r3, r9
 801cb04:	4937      	ldr	r1, [pc, #220]	; (801cbe4 <_dtoa_r+0x644>)
 801cb06:	2000      	movs	r0, #0
 801cb08:	f7e3 fbd6 	bl	80002b8 <__aeabi_dsub>
 801cb0c:	ec53 2b19 	vmov	r2, r3, d9
 801cb10:	f7e3 fffc 	bl	8000b0c <__aeabi_dcmplt>
 801cb14:	2800      	cmp	r0, #0
 801cb16:	f040 80b6 	bne.w	801cc86 <_dtoa_r+0x6e6>
 801cb1a:	9b02      	ldr	r3, [sp, #8]
 801cb1c:	429d      	cmp	r5, r3
 801cb1e:	f43f af7c 	beq.w	801ca1a <_dtoa_r+0x47a>
 801cb22:	4b31      	ldr	r3, [pc, #196]	; (801cbe8 <_dtoa_r+0x648>)
 801cb24:	ec51 0b19 	vmov	r0, r1, d9
 801cb28:	2200      	movs	r2, #0
 801cb2a:	f7e3 fd7d 	bl	8000628 <__aeabi_dmul>
 801cb2e:	4b2e      	ldr	r3, [pc, #184]	; (801cbe8 <_dtoa_r+0x648>)
 801cb30:	ec41 0b19 	vmov	d9, r0, r1
 801cb34:	2200      	movs	r2, #0
 801cb36:	4640      	mov	r0, r8
 801cb38:	4649      	mov	r1, r9
 801cb3a:	f7e3 fd75 	bl	8000628 <__aeabi_dmul>
 801cb3e:	4680      	mov	r8, r0
 801cb40:	4689      	mov	r9, r1
 801cb42:	e7c5      	b.n	801cad0 <_dtoa_r+0x530>
 801cb44:	ec51 0b17 	vmov	r0, r1, d7
 801cb48:	f7e3 fd6e 	bl	8000628 <__aeabi_dmul>
 801cb4c:	9b02      	ldr	r3, [sp, #8]
 801cb4e:	9d00      	ldr	r5, [sp, #0]
 801cb50:	930f      	str	r3, [sp, #60]	; 0x3c
 801cb52:	ec41 0b19 	vmov	d9, r0, r1
 801cb56:	4649      	mov	r1, r9
 801cb58:	4640      	mov	r0, r8
 801cb5a:	f7e4 f815 	bl	8000b88 <__aeabi_d2iz>
 801cb5e:	4606      	mov	r6, r0
 801cb60:	f7e3 fcf8 	bl	8000554 <__aeabi_i2d>
 801cb64:	3630      	adds	r6, #48	; 0x30
 801cb66:	4602      	mov	r2, r0
 801cb68:	460b      	mov	r3, r1
 801cb6a:	4640      	mov	r0, r8
 801cb6c:	4649      	mov	r1, r9
 801cb6e:	f7e3 fba3 	bl	80002b8 <__aeabi_dsub>
 801cb72:	f805 6b01 	strb.w	r6, [r5], #1
 801cb76:	9b02      	ldr	r3, [sp, #8]
 801cb78:	429d      	cmp	r5, r3
 801cb7a:	4680      	mov	r8, r0
 801cb7c:	4689      	mov	r9, r1
 801cb7e:	f04f 0200 	mov.w	r2, #0
 801cb82:	d124      	bne.n	801cbce <_dtoa_r+0x62e>
 801cb84:	4b1b      	ldr	r3, [pc, #108]	; (801cbf4 <_dtoa_r+0x654>)
 801cb86:	ec51 0b19 	vmov	r0, r1, d9
 801cb8a:	f7e3 fb97 	bl	80002bc <__adddf3>
 801cb8e:	4602      	mov	r2, r0
 801cb90:	460b      	mov	r3, r1
 801cb92:	4640      	mov	r0, r8
 801cb94:	4649      	mov	r1, r9
 801cb96:	f7e3 ffd7 	bl	8000b48 <__aeabi_dcmpgt>
 801cb9a:	2800      	cmp	r0, #0
 801cb9c:	d173      	bne.n	801cc86 <_dtoa_r+0x6e6>
 801cb9e:	ec53 2b19 	vmov	r2, r3, d9
 801cba2:	4914      	ldr	r1, [pc, #80]	; (801cbf4 <_dtoa_r+0x654>)
 801cba4:	2000      	movs	r0, #0
 801cba6:	f7e3 fb87 	bl	80002b8 <__aeabi_dsub>
 801cbaa:	4602      	mov	r2, r0
 801cbac:	460b      	mov	r3, r1
 801cbae:	4640      	mov	r0, r8
 801cbb0:	4649      	mov	r1, r9
 801cbb2:	f7e3 ffab 	bl	8000b0c <__aeabi_dcmplt>
 801cbb6:	2800      	cmp	r0, #0
 801cbb8:	f43f af2f 	beq.w	801ca1a <_dtoa_r+0x47a>
 801cbbc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801cbbe:	1e6b      	subs	r3, r5, #1
 801cbc0:	930f      	str	r3, [sp, #60]	; 0x3c
 801cbc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801cbc6:	2b30      	cmp	r3, #48	; 0x30
 801cbc8:	d0f8      	beq.n	801cbbc <_dtoa_r+0x61c>
 801cbca:	46bb      	mov	fp, r7
 801cbcc:	e04a      	b.n	801cc64 <_dtoa_r+0x6c4>
 801cbce:	4b06      	ldr	r3, [pc, #24]	; (801cbe8 <_dtoa_r+0x648>)
 801cbd0:	f7e3 fd2a 	bl	8000628 <__aeabi_dmul>
 801cbd4:	4680      	mov	r8, r0
 801cbd6:	4689      	mov	r9, r1
 801cbd8:	e7bd      	b.n	801cb56 <_dtoa_r+0x5b6>
 801cbda:	bf00      	nop
 801cbdc:	08023178 	.word	0x08023178
 801cbe0:	08023150 	.word	0x08023150
 801cbe4:	3ff00000 	.word	0x3ff00000
 801cbe8:	40240000 	.word	0x40240000
 801cbec:	401c0000 	.word	0x401c0000
 801cbf0:	40140000 	.word	0x40140000
 801cbf4:	3fe00000 	.word	0x3fe00000
 801cbf8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801cbfc:	9d00      	ldr	r5, [sp, #0]
 801cbfe:	4642      	mov	r2, r8
 801cc00:	464b      	mov	r3, r9
 801cc02:	4630      	mov	r0, r6
 801cc04:	4639      	mov	r1, r7
 801cc06:	f7e3 fe39 	bl	800087c <__aeabi_ddiv>
 801cc0a:	f7e3 ffbd 	bl	8000b88 <__aeabi_d2iz>
 801cc0e:	9001      	str	r0, [sp, #4]
 801cc10:	f7e3 fca0 	bl	8000554 <__aeabi_i2d>
 801cc14:	4642      	mov	r2, r8
 801cc16:	464b      	mov	r3, r9
 801cc18:	f7e3 fd06 	bl	8000628 <__aeabi_dmul>
 801cc1c:	4602      	mov	r2, r0
 801cc1e:	460b      	mov	r3, r1
 801cc20:	4630      	mov	r0, r6
 801cc22:	4639      	mov	r1, r7
 801cc24:	f7e3 fb48 	bl	80002b8 <__aeabi_dsub>
 801cc28:	9e01      	ldr	r6, [sp, #4]
 801cc2a:	9f04      	ldr	r7, [sp, #16]
 801cc2c:	3630      	adds	r6, #48	; 0x30
 801cc2e:	f805 6b01 	strb.w	r6, [r5], #1
 801cc32:	9e00      	ldr	r6, [sp, #0]
 801cc34:	1bae      	subs	r6, r5, r6
 801cc36:	42b7      	cmp	r7, r6
 801cc38:	4602      	mov	r2, r0
 801cc3a:	460b      	mov	r3, r1
 801cc3c:	d134      	bne.n	801cca8 <_dtoa_r+0x708>
 801cc3e:	f7e3 fb3d 	bl	80002bc <__adddf3>
 801cc42:	4642      	mov	r2, r8
 801cc44:	464b      	mov	r3, r9
 801cc46:	4606      	mov	r6, r0
 801cc48:	460f      	mov	r7, r1
 801cc4a:	f7e3 ff7d 	bl	8000b48 <__aeabi_dcmpgt>
 801cc4e:	b9c8      	cbnz	r0, 801cc84 <_dtoa_r+0x6e4>
 801cc50:	4642      	mov	r2, r8
 801cc52:	464b      	mov	r3, r9
 801cc54:	4630      	mov	r0, r6
 801cc56:	4639      	mov	r1, r7
 801cc58:	f7e3 ff4e 	bl	8000af8 <__aeabi_dcmpeq>
 801cc5c:	b110      	cbz	r0, 801cc64 <_dtoa_r+0x6c4>
 801cc5e:	9b01      	ldr	r3, [sp, #4]
 801cc60:	07db      	lsls	r3, r3, #31
 801cc62:	d40f      	bmi.n	801cc84 <_dtoa_r+0x6e4>
 801cc64:	4651      	mov	r1, sl
 801cc66:	4620      	mov	r0, r4
 801cc68:	f000 fb18 	bl	801d29c <_Bfree>
 801cc6c:	2300      	movs	r3, #0
 801cc6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cc70:	702b      	strb	r3, [r5, #0]
 801cc72:	f10b 0301 	add.w	r3, fp, #1
 801cc76:	6013      	str	r3, [r2, #0]
 801cc78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cc7a:	2b00      	cmp	r3, #0
 801cc7c:	f43f ace2 	beq.w	801c644 <_dtoa_r+0xa4>
 801cc80:	601d      	str	r5, [r3, #0]
 801cc82:	e4df      	b.n	801c644 <_dtoa_r+0xa4>
 801cc84:	465f      	mov	r7, fp
 801cc86:	462b      	mov	r3, r5
 801cc88:	461d      	mov	r5, r3
 801cc8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cc8e:	2a39      	cmp	r2, #57	; 0x39
 801cc90:	d106      	bne.n	801cca0 <_dtoa_r+0x700>
 801cc92:	9a00      	ldr	r2, [sp, #0]
 801cc94:	429a      	cmp	r2, r3
 801cc96:	d1f7      	bne.n	801cc88 <_dtoa_r+0x6e8>
 801cc98:	9900      	ldr	r1, [sp, #0]
 801cc9a:	2230      	movs	r2, #48	; 0x30
 801cc9c:	3701      	adds	r7, #1
 801cc9e:	700a      	strb	r2, [r1, #0]
 801cca0:	781a      	ldrb	r2, [r3, #0]
 801cca2:	3201      	adds	r2, #1
 801cca4:	701a      	strb	r2, [r3, #0]
 801cca6:	e790      	b.n	801cbca <_dtoa_r+0x62a>
 801cca8:	4ba3      	ldr	r3, [pc, #652]	; (801cf38 <_dtoa_r+0x998>)
 801ccaa:	2200      	movs	r2, #0
 801ccac:	f7e3 fcbc 	bl	8000628 <__aeabi_dmul>
 801ccb0:	2200      	movs	r2, #0
 801ccb2:	2300      	movs	r3, #0
 801ccb4:	4606      	mov	r6, r0
 801ccb6:	460f      	mov	r7, r1
 801ccb8:	f7e3 ff1e 	bl	8000af8 <__aeabi_dcmpeq>
 801ccbc:	2800      	cmp	r0, #0
 801ccbe:	d09e      	beq.n	801cbfe <_dtoa_r+0x65e>
 801ccc0:	e7d0      	b.n	801cc64 <_dtoa_r+0x6c4>
 801ccc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ccc4:	2a00      	cmp	r2, #0
 801ccc6:	f000 80ca 	beq.w	801ce5e <_dtoa_r+0x8be>
 801ccca:	9a07      	ldr	r2, [sp, #28]
 801cccc:	2a01      	cmp	r2, #1
 801ccce:	f300 80ad 	bgt.w	801ce2c <_dtoa_r+0x88c>
 801ccd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ccd4:	2a00      	cmp	r2, #0
 801ccd6:	f000 80a5 	beq.w	801ce24 <_dtoa_r+0x884>
 801ccda:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801ccde:	9e08      	ldr	r6, [sp, #32]
 801cce0:	9d05      	ldr	r5, [sp, #20]
 801cce2:	9a05      	ldr	r2, [sp, #20]
 801cce4:	441a      	add	r2, r3
 801cce6:	9205      	str	r2, [sp, #20]
 801cce8:	9a06      	ldr	r2, [sp, #24]
 801ccea:	2101      	movs	r1, #1
 801ccec:	441a      	add	r2, r3
 801ccee:	4620      	mov	r0, r4
 801ccf0:	9206      	str	r2, [sp, #24]
 801ccf2:	f000 fbd3 	bl	801d49c <__i2b>
 801ccf6:	4607      	mov	r7, r0
 801ccf8:	b165      	cbz	r5, 801cd14 <_dtoa_r+0x774>
 801ccfa:	9b06      	ldr	r3, [sp, #24]
 801ccfc:	2b00      	cmp	r3, #0
 801ccfe:	dd09      	ble.n	801cd14 <_dtoa_r+0x774>
 801cd00:	42ab      	cmp	r3, r5
 801cd02:	9a05      	ldr	r2, [sp, #20]
 801cd04:	bfa8      	it	ge
 801cd06:	462b      	movge	r3, r5
 801cd08:	1ad2      	subs	r2, r2, r3
 801cd0a:	9205      	str	r2, [sp, #20]
 801cd0c:	9a06      	ldr	r2, [sp, #24]
 801cd0e:	1aed      	subs	r5, r5, r3
 801cd10:	1ad3      	subs	r3, r2, r3
 801cd12:	9306      	str	r3, [sp, #24]
 801cd14:	9b08      	ldr	r3, [sp, #32]
 801cd16:	b1f3      	cbz	r3, 801cd56 <_dtoa_r+0x7b6>
 801cd18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cd1a:	2b00      	cmp	r3, #0
 801cd1c:	f000 80a3 	beq.w	801ce66 <_dtoa_r+0x8c6>
 801cd20:	2e00      	cmp	r6, #0
 801cd22:	dd10      	ble.n	801cd46 <_dtoa_r+0x7a6>
 801cd24:	4639      	mov	r1, r7
 801cd26:	4632      	mov	r2, r6
 801cd28:	4620      	mov	r0, r4
 801cd2a:	f000 fc77 	bl	801d61c <__pow5mult>
 801cd2e:	4652      	mov	r2, sl
 801cd30:	4601      	mov	r1, r0
 801cd32:	4607      	mov	r7, r0
 801cd34:	4620      	mov	r0, r4
 801cd36:	f000 fbc7 	bl	801d4c8 <__multiply>
 801cd3a:	4651      	mov	r1, sl
 801cd3c:	4680      	mov	r8, r0
 801cd3e:	4620      	mov	r0, r4
 801cd40:	f000 faac 	bl	801d29c <_Bfree>
 801cd44:	46c2      	mov	sl, r8
 801cd46:	9b08      	ldr	r3, [sp, #32]
 801cd48:	1b9a      	subs	r2, r3, r6
 801cd4a:	d004      	beq.n	801cd56 <_dtoa_r+0x7b6>
 801cd4c:	4651      	mov	r1, sl
 801cd4e:	4620      	mov	r0, r4
 801cd50:	f000 fc64 	bl	801d61c <__pow5mult>
 801cd54:	4682      	mov	sl, r0
 801cd56:	2101      	movs	r1, #1
 801cd58:	4620      	mov	r0, r4
 801cd5a:	f000 fb9f 	bl	801d49c <__i2b>
 801cd5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cd60:	2b00      	cmp	r3, #0
 801cd62:	4606      	mov	r6, r0
 801cd64:	f340 8081 	ble.w	801ce6a <_dtoa_r+0x8ca>
 801cd68:	461a      	mov	r2, r3
 801cd6a:	4601      	mov	r1, r0
 801cd6c:	4620      	mov	r0, r4
 801cd6e:	f000 fc55 	bl	801d61c <__pow5mult>
 801cd72:	9b07      	ldr	r3, [sp, #28]
 801cd74:	2b01      	cmp	r3, #1
 801cd76:	4606      	mov	r6, r0
 801cd78:	dd7a      	ble.n	801ce70 <_dtoa_r+0x8d0>
 801cd7a:	f04f 0800 	mov.w	r8, #0
 801cd7e:	6933      	ldr	r3, [r6, #16]
 801cd80:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801cd84:	6918      	ldr	r0, [r3, #16]
 801cd86:	f000 fb3b 	bl	801d400 <__hi0bits>
 801cd8a:	f1c0 0020 	rsb	r0, r0, #32
 801cd8e:	9b06      	ldr	r3, [sp, #24]
 801cd90:	4418      	add	r0, r3
 801cd92:	f010 001f 	ands.w	r0, r0, #31
 801cd96:	f000 8094 	beq.w	801cec2 <_dtoa_r+0x922>
 801cd9a:	f1c0 0320 	rsb	r3, r0, #32
 801cd9e:	2b04      	cmp	r3, #4
 801cda0:	f340 8085 	ble.w	801ceae <_dtoa_r+0x90e>
 801cda4:	9b05      	ldr	r3, [sp, #20]
 801cda6:	f1c0 001c 	rsb	r0, r0, #28
 801cdaa:	4403      	add	r3, r0
 801cdac:	9305      	str	r3, [sp, #20]
 801cdae:	9b06      	ldr	r3, [sp, #24]
 801cdb0:	4403      	add	r3, r0
 801cdb2:	4405      	add	r5, r0
 801cdb4:	9306      	str	r3, [sp, #24]
 801cdb6:	9b05      	ldr	r3, [sp, #20]
 801cdb8:	2b00      	cmp	r3, #0
 801cdba:	dd05      	ble.n	801cdc8 <_dtoa_r+0x828>
 801cdbc:	4651      	mov	r1, sl
 801cdbe:	461a      	mov	r2, r3
 801cdc0:	4620      	mov	r0, r4
 801cdc2:	f000 fc85 	bl	801d6d0 <__lshift>
 801cdc6:	4682      	mov	sl, r0
 801cdc8:	9b06      	ldr	r3, [sp, #24]
 801cdca:	2b00      	cmp	r3, #0
 801cdcc:	dd05      	ble.n	801cdda <_dtoa_r+0x83a>
 801cdce:	4631      	mov	r1, r6
 801cdd0:	461a      	mov	r2, r3
 801cdd2:	4620      	mov	r0, r4
 801cdd4:	f000 fc7c 	bl	801d6d0 <__lshift>
 801cdd8:	4606      	mov	r6, r0
 801cdda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cddc:	2b00      	cmp	r3, #0
 801cdde:	d072      	beq.n	801cec6 <_dtoa_r+0x926>
 801cde0:	4631      	mov	r1, r6
 801cde2:	4650      	mov	r0, sl
 801cde4:	f000 fce0 	bl	801d7a8 <__mcmp>
 801cde8:	2800      	cmp	r0, #0
 801cdea:	da6c      	bge.n	801cec6 <_dtoa_r+0x926>
 801cdec:	2300      	movs	r3, #0
 801cdee:	4651      	mov	r1, sl
 801cdf0:	220a      	movs	r2, #10
 801cdf2:	4620      	mov	r0, r4
 801cdf4:	f000 fa74 	bl	801d2e0 <__multadd>
 801cdf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cdfa:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cdfe:	4682      	mov	sl, r0
 801ce00:	2b00      	cmp	r3, #0
 801ce02:	f000 81b0 	beq.w	801d166 <_dtoa_r+0xbc6>
 801ce06:	2300      	movs	r3, #0
 801ce08:	4639      	mov	r1, r7
 801ce0a:	220a      	movs	r2, #10
 801ce0c:	4620      	mov	r0, r4
 801ce0e:	f000 fa67 	bl	801d2e0 <__multadd>
 801ce12:	9b01      	ldr	r3, [sp, #4]
 801ce14:	2b00      	cmp	r3, #0
 801ce16:	4607      	mov	r7, r0
 801ce18:	f300 8096 	bgt.w	801cf48 <_dtoa_r+0x9a8>
 801ce1c:	9b07      	ldr	r3, [sp, #28]
 801ce1e:	2b02      	cmp	r3, #2
 801ce20:	dc59      	bgt.n	801ced6 <_dtoa_r+0x936>
 801ce22:	e091      	b.n	801cf48 <_dtoa_r+0x9a8>
 801ce24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ce26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801ce2a:	e758      	b.n	801ccde <_dtoa_r+0x73e>
 801ce2c:	9b04      	ldr	r3, [sp, #16]
 801ce2e:	1e5e      	subs	r6, r3, #1
 801ce30:	9b08      	ldr	r3, [sp, #32]
 801ce32:	42b3      	cmp	r3, r6
 801ce34:	bfbf      	itttt	lt
 801ce36:	9b08      	ldrlt	r3, [sp, #32]
 801ce38:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801ce3a:	9608      	strlt	r6, [sp, #32]
 801ce3c:	1af3      	sublt	r3, r6, r3
 801ce3e:	bfb4      	ite	lt
 801ce40:	18d2      	addlt	r2, r2, r3
 801ce42:	1b9e      	subge	r6, r3, r6
 801ce44:	9b04      	ldr	r3, [sp, #16]
 801ce46:	bfbc      	itt	lt
 801ce48:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801ce4a:	2600      	movlt	r6, #0
 801ce4c:	2b00      	cmp	r3, #0
 801ce4e:	bfb7      	itett	lt
 801ce50:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801ce54:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 801ce58:	1a9d      	sublt	r5, r3, r2
 801ce5a:	2300      	movlt	r3, #0
 801ce5c:	e741      	b.n	801cce2 <_dtoa_r+0x742>
 801ce5e:	9e08      	ldr	r6, [sp, #32]
 801ce60:	9d05      	ldr	r5, [sp, #20]
 801ce62:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ce64:	e748      	b.n	801ccf8 <_dtoa_r+0x758>
 801ce66:	9a08      	ldr	r2, [sp, #32]
 801ce68:	e770      	b.n	801cd4c <_dtoa_r+0x7ac>
 801ce6a:	9b07      	ldr	r3, [sp, #28]
 801ce6c:	2b01      	cmp	r3, #1
 801ce6e:	dc19      	bgt.n	801cea4 <_dtoa_r+0x904>
 801ce70:	9b02      	ldr	r3, [sp, #8]
 801ce72:	b9bb      	cbnz	r3, 801cea4 <_dtoa_r+0x904>
 801ce74:	9b03      	ldr	r3, [sp, #12]
 801ce76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ce7a:	b99b      	cbnz	r3, 801cea4 <_dtoa_r+0x904>
 801ce7c:	9b03      	ldr	r3, [sp, #12]
 801ce7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ce82:	0d1b      	lsrs	r3, r3, #20
 801ce84:	051b      	lsls	r3, r3, #20
 801ce86:	b183      	cbz	r3, 801ceaa <_dtoa_r+0x90a>
 801ce88:	9b05      	ldr	r3, [sp, #20]
 801ce8a:	3301      	adds	r3, #1
 801ce8c:	9305      	str	r3, [sp, #20]
 801ce8e:	9b06      	ldr	r3, [sp, #24]
 801ce90:	3301      	adds	r3, #1
 801ce92:	9306      	str	r3, [sp, #24]
 801ce94:	f04f 0801 	mov.w	r8, #1
 801ce98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ce9a:	2b00      	cmp	r3, #0
 801ce9c:	f47f af6f 	bne.w	801cd7e <_dtoa_r+0x7de>
 801cea0:	2001      	movs	r0, #1
 801cea2:	e774      	b.n	801cd8e <_dtoa_r+0x7ee>
 801cea4:	f04f 0800 	mov.w	r8, #0
 801cea8:	e7f6      	b.n	801ce98 <_dtoa_r+0x8f8>
 801ceaa:	4698      	mov	r8, r3
 801ceac:	e7f4      	b.n	801ce98 <_dtoa_r+0x8f8>
 801ceae:	d082      	beq.n	801cdb6 <_dtoa_r+0x816>
 801ceb0:	9a05      	ldr	r2, [sp, #20]
 801ceb2:	331c      	adds	r3, #28
 801ceb4:	441a      	add	r2, r3
 801ceb6:	9205      	str	r2, [sp, #20]
 801ceb8:	9a06      	ldr	r2, [sp, #24]
 801ceba:	441a      	add	r2, r3
 801cebc:	441d      	add	r5, r3
 801cebe:	9206      	str	r2, [sp, #24]
 801cec0:	e779      	b.n	801cdb6 <_dtoa_r+0x816>
 801cec2:	4603      	mov	r3, r0
 801cec4:	e7f4      	b.n	801ceb0 <_dtoa_r+0x910>
 801cec6:	9b04      	ldr	r3, [sp, #16]
 801cec8:	2b00      	cmp	r3, #0
 801ceca:	dc37      	bgt.n	801cf3c <_dtoa_r+0x99c>
 801cecc:	9b07      	ldr	r3, [sp, #28]
 801cece:	2b02      	cmp	r3, #2
 801ced0:	dd34      	ble.n	801cf3c <_dtoa_r+0x99c>
 801ced2:	9b04      	ldr	r3, [sp, #16]
 801ced4:	9301      	str	r3, [sp, #4]
 801ced6:	9b01      	ldr	r3, [sp, #4]
 801ced8:	b963      	cbnz	r3, 801cef4 <_dtoa_r+0x954>
 801ceda:	4631      	mov	r1, r6
 801cedc:	2205      	movs	r2, #5
 801cede:	4620      	mov	r0, r4
 801cee0:	f000 f9fe 	bl	801d2e0 <__multadd>
 801cee4:	4601      	mov	r1, r0
 801cee6:	4606      	mov	r6, r0
 801cee8:	4650      	mov	r0, sl
 801ceea:	f000 fc5d 	bl	801d7a8 <__mcmp>
 801ceee:	2800      	cmp	r0, #0
 801cef0:	f73f adbb 	bgt.w	801ca6a <_dtoa_r+0x4ca>
 801cef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cef6:	9d00      	ldr	r5, [sp, #0]
 801cef8:	ea6f 0b03 	mvn.w	fp, r3
 801cefc:	f04f 0800 	mov.w	r8, #0
 801cf00:	4631      	mov	r1, r6
 801cf02:	4620      	mov	r0, r4
 801cf04:	f000 f9ca 	bl	801d29c <_Bfree>
 801cf08:	2f00      	cmp	r7, #0
 801cf0a:	f43f aeab 	beq.w	801cc64 <_dtoa_r+0x6c4>
 801cf0e:	f1b8 0f00 	cmp.w	r8, #0
 801cf12:	d005      	beq.n	801cf20 <_dtoa_r+0x980>
 801cf14:	45b8      	cmp	r8, r7
 801cf16:	d003      	beq.n	801cf20 <_dtoa_r+0x980>
 801cf18:	4641      	mov	r1, r8
 801cf1a:	4620      	mov	r0, r4
 801cf1c:	f000 f9be 	bl	801d29c <_Bfree>
 801cf20:	4639      	mov	r1, r7
 801cf22:	4620      	mov	r0, r4
 801cf24:	f000 f9ba 	bl	801d29c <_Bfree>
 801cf28:	e69c      	b.n	801cc64 <_dtoa_r+0x6c4>
 801cf2a:	2600      	movs	r6, #0
 801cf2c:	4637      	mov	r7, r6
 801cf2e:	e7e1      	b.n	801cef4 <_dtoa_r+0x954>
 801cf30:	46bb      	mov	fp, r7
 801cf32:	4637      	mov	r7, r6
 801cf34:	e599      	b.n	801ca6a <_dtoa_r+0x4ca>
 801cf36:	bf00      	nop
 801cf38:	40240000 	.word	0x40240000
 801cf3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cf3e:	2b00      	cmp	r3, #0
 801cf40:	f000 80c8 	beq.w	801d0d4 <_dtoa_r+0xb34>
 801cf44:	9b04      	ldr	r3, [sp, #16]
 801cf46:	9301      	str	r3, [sp, #4]
 801cf48:	2d00      	cmp	r5, #0
 801cf4a:	dd05      	ble.n	801cf58 <_dtoa_r+0x9b8>
 801cf4c:	4639      	mov	r1, r7
 801cf4e:	462a      	mov	r2, r5
 801cf50:	4620      	mov	r0, r4
 801cf52:	f000 fbbd 	bl	801d6d0 <__lshift>
 801cf56:	4607      	mov	r7, r0
 801cf58:	f1b8 0f00 	cmp.w	r8, #0
 801cf5c:	d05b      	beq.n	801d016 <_dtoa_r+0xa76>
 801cf5e:	6879      	ldr	r1, [r7, #4]
 801cf60:	4620      	mov	r0, r4
 801cf62:	f000 f95b 	bl	801d21c <_Balloc>
 801cf66:	4605      	mov	r5, r0
 801cf68:	b928      	cbnz	r0, 801cf76 <_dtoa_r+0x9d6>
 801cf6a:	4b83      	ldr	r3, [pc, #524]	; (801d178 <_dtoa_r+0xbd8>)
 801cf6c:	4602      	mov	r2, r0
 801cf6e:	f240 21ef 	movw	r1, #751	; 0x2ef
 801cf72:	f7ff bb2e 	b.w	801c5d2 <_dtoa_r+0x32>
 801cf76:	693a      	ldr	r2, [r7, #16]
 801cf78:	3202      	adds	r2, #2
 801cf7a:	0092      	lsls	r2, r2, #2
 801cf7c:	f107 010c 	add.w	r1, r7, #12
 801cf80:	300c      	adds	r0, #12
 801cf82:	f7ff fa66 	bl	801c452 <memcpy>
 801cf86:	2201      	movs	r2, #1
 801cf88:	4629      	mov	r1, r5
 801cf8a:	4620      	mov	r0, r4
 801cf8c:	f000 fba0 	bl	801d6d0 <__lshift>
 801cf90:	9b00      	ldr	r3, [sp, #0]
 801cf92:	3301      	adds	r3, #1
 801cf94:	9304      	str	r3, [sp, #16]
 801cf96:	e9dd 2300 	ldrd	r2, r3, [sp]
 801cf9a:	4413      	add	r3, r2
 801cf9c:	9308      	str	r3, [sp, #32]
 801cf9e:	9b02      	ldr	r3, [sp, #8]
 801cfa0:	f003 0301 	and.w	r3, r3, #1
 801cfa4:	46b8      	mov	r8, r7
 801cfa6:	9306      	str	r3, [sp, #24]
 801cfa8:	4607      	mov	r7, r0
 801cfaa:	9b04      	ldr	r3, [sp, #16]
 801cfac:	4631      	mov	r1, r6
 801cfae:	3b01      	subs	r3, #1
 801cfb0:	4650      	mov	r0, sl
 801cfb2:	9301      	str	r3, [sp, #4]
 801cfb4:	f7ff fa69 	bl	801c48a <quorem>
 801cfb8:	4641      	mov	r1, r8
 801cfba:	9002      	str	r0, [sp, #8]
 801cfbc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801cfc0:	4650      	mov	r0, sl
 801cfc2:	f000 fbf1 	bl	801d7a8 <__mcmp>
 801cfc6:	463a      	mov	r2, r7
 801cfc8:	9005      	str	r0, [sp, #20]
 801cfca:	4631      	mov	r1, r6
 801cfcc:	4620      	mov	r0, r4
 801cfce:	f000 fc07 	bl	801d7e0 <__mdiff>
 801cfd2:	68c2      	ldr	r2, [r0, #12]
 801cfd4:	4605      	mov	r5, r0
 801cfd6:	bb02      	cbnz	r2, 801d01a <_dtoa_r+0xa7a>
 801cfd8:	4601      	mov	r1, r0
 801cfda:	4650      	mov	r0, sl
 801cfdc:	f000 fbe4 	bl	801d7a8 <__mcmp>
 801cfe0:	4602      	mov	r2, r0
 801cfe2:	4629      	mov	r1, r5
 801cfe4:	4620      	mov	r0, r4
 801cfe6:	9209      	str	r2, [sp, #36]	; 0x24
 801cfe8:	f000 f958 	bl	801d29c <_Bfree>
 801cfec:	9b07      	ldr	r3, [sp, #28]
 801cfee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cff0:	9d04      	ldr	r5, [sp, #16]
 801cff2:	ea43 0102 	orr.w	r1, r3, r2
 801cff6:	9b06      	ldr	r3, [sp, #24]
 801cff8:	4319      	orrs	r1, r3
 801cffa:	d110      	bne.n	801d01e <_dtoa_r+0xa7e>
 801cffc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801d000:	d029      	beq.n	801d056 <_dtoa_r+0xab6>
 801d002:	9b05      	ldr	r3, [sp, #20]
 801d004:	2b00      	cmp	r3, #0
 801d006:	dd02      	ble.n	801d00e <_dtoa_r+0xa6e>
 801d008:	9b02      	ldr	r3, [sp, #8]
 801d00a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801d00e:	9b01      	ldr	r3, [sp, #4]
 801d010:	f883 9000 	strb.w	r9, [r3]
 801d014:	e774      	b.n	801cf00 <_dtoa_r+0x960>
 801d016:	4638      	mov	r0, r7
 801d018:	e7ba      	b.n	801cf90 <_dtoa_r+0x9f0>
 801d01a:	2201      	movs	r2, #1
 801d01c:	e7e1      	b.n	801cfe2 <_dtoa_r+0xa42>
 801d01e:	9b05      	ldr	r3, [sp, #20]
 801d020:	2b00      	cmp	r3, #0
 801d022:	db04      	blt.n	801d02e <_dtoa_r+0xa8e>
 801d024:	9907      	ldr	r1, [sp, #28]
 801d026:	430b      	orrs	r3, r1
 801d028:	9906      	ldr	r1, [sp, #24]
 801d02a:	430b      	orrs	r3, r1
 801d02c:	d120      	bne.n	801d070 <_dtoa_r+0xad0>
 801d02e:	2a00      	cmp	r2, #0
 801d030:	dded      	ble.n	801d00e <_dtoa_r+0xa6e>
 801d032:	4651      	mov	r1, sl
 801d034:	2201      	movs	r2, #1
 801d036:	4620      	mov	r0, r4
 801d038:	f000 fb4a 	bl	801d6d0 <__lshift>
 801d03c:	4631      	mov	r1, r6
 801d03e:	4682      	mov	sl, r0
 801d040:	f000 fbb2 	bl	801d7a8 <__mcmp>
 801d044:	2800      	cmp	r0, #0
 801d046:	dc03      	bgt.n	801d050 <_dtoa_r+0xab0>
 801d048:	d1e1      	bne.n	801d00e <_dtoa_r+0xa6e>
 801d04a:	f019 0f01 	tst.w	r9, #1
 801d04e:	d0de      	beq.n	801d00e <_dtoa_r+0xa6e>
 801d050:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801d054:	d1d8      	bne.n	801d008 <_dtoa_r+0xa68>
 801d056:	9a01      	ldr	r2, [sp, #4]
 801d058:	2339      	movs	r3, #57	; 0x39
 801d05a:	7013      	strb	r3, [r2, #0]
 801d05c:	462b      	mov	r3, r5
 801d05e:	461d      	mov	r5, r3
 801d060:	3b01      	subs	r3, #1
 801d062:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801d066:	2a39      	cmp	r2, #57	; 0x39
 801d068:	d06c      	beq.n	801d144 <_dtoa_r+0xba4>
 801d06a:	3201      	adds	r2, #1
 801d06c:	701a      	strb	r2, [r3, #0]
 801d06e:	e747      	b.n	801cf00 <_dtoa_r+0x960>
 801d070:	2a00      	cmp	r2, #0
 801d072:	dd07      	ble.n	801d084 <_dtoa_r+0xae4>
 801d074:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801d078:	d0ed      	beq.n	801d056 <_dtoa_r+0xab6>
 801d07a:	9a01      	ldr	r2, [sp, #4]
 801d07c:	f109 0301 	add.w	r3, r9, #1
 801d080:	7013      	strb	r3, [r2, #0]
 801d082:	e73d      	b.n	801cf00 <_dtoa_r+0x960>
 801d084:	9b04      	ldr	r3, [sp, #16]
 801d086:	9a08      	ldr	r2, [sp, #32]
 801d088:	f803 9c01 	strb.w	r9, [r3, #-1]
 801d08c:	4293      	cmp	r3, r2
 801d08e:	d043      	beq.n	801d118 <_dtoa_r+0xb78>
 801d090:	4651      	mov	r1, sl
 801d092:	2300      	movs	r3, #0
 801d094:	220a      	movs	r2, #10
 801d096:	4620      	mov	r0, r4
 801d098:	f000 f922 	bl	801d2e0 <__multadd>
 801d09c:	45b8      	cmp	r8, r7
 801d09e:	4682      	mov	sl, r0
 801d0a0:	f04f 0300 	mov.w	r3, #0
 801d0a4:	f04f 020a 	mov.w	r2, #10
 801d0a8:	4641      	mov	r1, r8
 801d0aa:	4620      	mov	r0, r4
 801d0ac:	d107      	bne.n	801d0be <_dtoa_r+0xb1e>
 801d0ae:	f000 f917 	bl	801d2e0 <__multadd>
 801d0b2:	4680      	mov	r8, r0
 801d0b4:	4607      	mov	r7, r0
 801d0b6:	9b04      	ldr	r3, [sp, #16]
 801d0b8:	3301      	adds	r3, #1
 801d0ba:	9304      	str	r3, [sp, #16]
 801d0bc:	e775      	b.n	801cfaa <_dtoa_r+0xa0a>
 801d0be:	f000 f90f 	bl	801d2e0 <__multadd>
 801d0c2:	4639      	mov	r1, r7
 801d0c4:	4680      	mov	r8, r0
 801d0c6:	2300      	movs	r3, #0
 801d0c8:	220a      	movs	r2, #10
 801d0ca:	4620      	mov	r0, r4
 801d0cc:	f000 f908 	bl	801d2e0 <__multadd>
 801d0d0:	4607      	mov	r7, r0
 801d0d2:	e7f0      	b.n	801d0b6 <_dtoa_r+0xb16>
 801d0d4:	9b04      	ldr	r3, [sp, #16]
 801d0d6:	9301      	str	r3, [sp, #4]
 801d0d8:	9d00      	ldr	r5, [sp, #0]
 801d0da:	4631      	mov	r1, r6
 801d0dc:	4650      	mov	r0, sl
 801d0de:	f7ff f9d4 	bl	801c48a <quorem>
 801d0e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801d0e6:	9b00      	ldr	r3, [sp, #0]
 801d0e8:	f805 9b01 	strb.w	r9, [r5], #1
 801d0ec:	1aea      	subs	r2, r5, r3
 801d0ee:	9b01      	ldr	r3, [sp, #4]
 801d0f0:	4293      	cmp	r3, r2
 801d0f2:	dd07      	ble.n	801d104 <_dtoa_r+0xb64>
 801d0f4:	4651      	mov	r1, sl
 801d0f6:	2300      	movs	r3, #0
 801d0f8:	220a      	movs	r2, #10
 801d0fa:	4620      	mov	r0, r4
 801d0fc:	f000 f8f0 	bl	801d2e0 <__multadd>
 801d100:	4682      	mov	sl, r0
 801d102:	e7ea      	b.n	801d0da <_dtoa_r+0xb3a>
 801d104:	9b01      	ldr	r3, [sp, #4]
 801d106:	2b00      	cmp	r3, #0
 801d108:	bfc8      	it	gt
 801d10a:	461d      	movgt	r5, r3
 801d10c:	9b00      	ldr	r3, [sp, #0]
 801d10e:	bfd8      	it	le
 801d110:	2501      	movle	r5, #1
 801d112:	441d      	add	r5, r3
 801d114:	f04f 0800 	mov.w	r8, #0
 801d118:	4651      	mov	r1, sl
 801d11a:	2201      	movs	r2, #1
 801d11c:	4620      	mov	r0, r4
 801d11e:	f000 fad7 	bl	801d6d0 <__lshift>
 801d122:	4631      	mov	r1, r6
 801d124:	4682      	mov	sl, r0
 801d126:	f000 fb3f 	bl	801d7a8 <__mcmp>
 801d12a:	2800      	cmp	r0, #0
 801d12c:	dc96      	bgt.n	801d05c <_dtoa_r+0xabc>
 801d12e:	d102      	bne.n	801d136 <_dtoa_r+0xb96>
 801d130:	f019 0f01 	tst.w	r9, #1
 801d134:	d192      	bne.n	801d05c <_dtoa_r+0xabc>
 801d136:	462b      	mov	r3, r5
 801d138:	461d      	mov	r5, r3
 801d13a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d13e:	2a30      	cmp	r2, #48	; 0x30
 801d140:	d0fa      	beq.n	801d138 <_dtoa_r+0xb98>
 801d142:	e6dd      	b.n	801cf00 <_dtoa_r+0x960>
 801d144:	9a00      	ldr	r2, [sp, #0]
 801d146:	429a      	cmp	r2, r3
 801d148:	d189      	bne.n	801d05e <_dtoa_r+0xabe>
 801d14a:	f10b 0b01 	add.w	fp, fp, #1
 801d14e:	2331      	movs	r3, #49	; 0x31
 801d150:	e796      	b.n	801d080 <_dtoa_r+0xae0>
 801d152:	4b0a      	ldr	r3, [pc, #40]	; (801d17c <_dtoa_r+0xbdc>)
 801d154:	f7ff ba99 	b.w	801c68a <_dtoa_r+0xea>
 801d158:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d15a:	2b00      	cmp	r3, #0
 801d15c:	f47f aa6d 	bne.w	801c63a <_dtoa_r+0x9a>
 801d160:	4b07      	ldr	r3, [pc, #28]	; (801d180 <_dtoa_r+0xbe0>)
 801d162:	f7ff ba92 	b.w	801c68a <_dtoa_r+0xea>
 801d166:	9b01      	ldr	r3, [sp, #4]
 801d168:	2b00      	cmp	r3, #0
 801d16a:	dcb5      	bgt.n	801d0d8 <_dtoa_r+0xb38>
 801d16c:	9b07      	ldr	r3, [sp, #28]
 801d16e:	2b02      	cmp	r3, #2
 801d170:	f73f aeb1 	bgt.w	801ced6 <_dtoa_r+0x936>
 801d174:	e7b0      	b.n	801d0d8 <_dtoa_r+0xb38>
 801d176:	bf00      	nop
 801d178:	080230e5 	.word	0x080230e5
 801d17c:	080233c8 	.word	0x080233c8
 801d180:	08023080 	.word	0x08023080

0801d184 <_free_r>:
 801d184:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d186:	2900      	cmp	r1, #0
 801d188:	d044      	beq.n	801d214 <_free_r+0x90>
 801d18a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d18e:	9001      	str	r0, [sp, #4]
 801d190:	2b00      	cmp	r3, #0
 801d192:	f1a1 0404 	sub.w	r4, r1, #4
 801d196:	bfb8      	it	lt
 801d198:	18e4      	addlt	r4, r4, r3
 801d19a:	f7fd fecd 	bl	801af38 <__malloc_lock>
 801d19e:	4a1e      	ldr	r2, [pc, #120]	; (801d218 <_free_r+0x94>)
 801d1a0:	9801      	ldr	r0, [sp, #4]
 801d1a2:	6813      	ldr	r3, [r2, #0]
 801d1a4:	b933      	cbnz	r3, 801d1b4 <_free_r+0x30>
 801d1a6:	6063      	str	r3, [r4, #4]
 801d1a8:	6014      	str	r4, [r2, #0]
 801d1aa:	b003      	add	sp, #12
 801d1ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d1b0:	f7fd bec8 	b.w	801af44 <__malloc_unlock>
 801d1b4:	42a3      	cmp	r3, r4
 801d1b6:	d908      	bls.n	801d1ca <_free_r+0x46>
 801d1b8:	6825      	ldr	r5, [r4, #0]
 801d1ba:	1961      	adds	r1, r4, r5
 801d1bc:	428b      	cmp	r3, r1
 801d1be:	bf01      	itttt	eq
 801d1c0:	6819      	ldreq	r1, [r3, #0]
 801d1c2:	685b      	ldreq	r3, [r3, #4]
 801d1c4:	1949      	addeq	r1, r1, r5
 801d1c6:	6021      	streq	r1, [r4, #0]
 801d1c8:	e7ed      	b.n	801d1a6 <_free_r+0x22>
 801d1ca:	461a      	mov	r2, r3
 801d1cc:	685b      	ldr	r3, [r3, #4]
 801d1ce:	b10b      	cbz	r3, 801d1d4 <_free_r+0x50>
 801d1d0:	42a3      	cmp	r3, r4
 801d1d2:	d9fa      	bls.n	801d1ca <_free_r+0x46>
 801d1d4:	6811      	ldr	r1, [r2, #0]
 801d1d6:	1855      	adds	r5, r2, r1
 801d1d8:	42a5      	cmp	r5, r4
 801d1da:	d10b      	bne.n	801d1f4 <_free_r+0x70>
 801d1dc:	6824      	ldr	r4, [r4, #0]
 801d1de:	4421      	add	r1, r4
 801d1e0:	1854      	adds	r4, r2, r1
 801d1e2:	42a3      	cmp	r3, r4
 801d1e4:	6011      	str	r1, [r2, #0]
 801d1e6:	d1e0      	bne.n	801d1aa <_free_r+0x26>
 801d1e8:	681c      	ldr	r4, [r3, #0]
 801d1ea:	685b      	ldr	r3, [r3, #4]
 801d1ec:	6053      	str	r3, [r2, #4]
 801d1ee:	440c      	add	r4, r1
 801d1f0:	6014      	str	r4, [r2, #0]
 801d1f2:	e7da      	b.n	801d1aa <_free_r+0x26>
 801d1f4:	d902      	bls.n	801d1fc <_free_r+0x78>
 801d1f6:	230c      	movs	r3, #12
 801d1f8:	6003      	str	r3, [r0, #0]
 801d1fa:	e7d6      	b.n	801d1aa <_free_r+0x26>
 801d1fc:	6825      	ldr	r5, [r4, #0]
 801d1fe:	1961      	adds	r1, r4, r5
 801d200:	428b      	cmp	r3, r1
 801d202:	bf04      	itt	eq
 801d204:	6819      	ldreq	r1, [r3, #0]
 801d206:	685b      	ldreq	r3, [r3, #4]
 801d208:	6063      	str	r3, [r4, #4]
 801d20a:	bf04      	itt	eq
 801d20c:	1949      	addeq	r1, r1, r5
 801d20e:	6021      	streq	r1, [r4, #0]
 801d210:	6054      	str	r4, [r2, #4]
 801d212:	e7ca      	b.n	801d1aa <_free_r+0x26>
 801d214:	b003      	add	sp, #12
 801d216:	bd30      	pop	{r4, r5, pc}
 801d218:	2000d944 	.word	0x2000d944

0801d21c <_Balloc>:
 801d21c:	b570      	push	{r4, r5, r6, lr}
 801d21e:	69c6      	ldr	r6, [r0, #28]
 801d220:	4604      	mov	r4, r0
 801d222:	460d      	mov	r5, r1
 801d224:	b976      	cbnz	r6, 801d244 <_Balloc+0x28>
 801d226:	2010      	movs	r0, #16
 801d228:	f7fd fdd6 	bl	801add8 <malloc>
 801d22c:	4602      	mov	r2, r0
 801d22e:	61e0      	str	r0, [r4, #28]
 801d230:	b920      	cbnz	r0, 801d23c <_Balloc+0x20>
 801d232:	4b18      	ldr	r3, [pc, #96]	; (801d294 <_Balloc+0x78>)
 801d234:	4818      	ldr	r0, [pc, #96]	; (801d298 <_Balloc+0x7c>)
 801d236:	216b      	movs	r1, #107	; 0x6b
 801d238:	f7fd fd9a 	bl	801ad70 <__assert_func>
 801d23c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d240:	6006      	str	r6, [r0, #0]
 801d242:	60c6      	str	r6, [r0, #12]
 801d244:	69e6      	ldr	r6, [r4, #28]
 801d246:	68f3      	ldr	r3, [r6, #12]
 801d248:	b183      	cbz	r3, 801d26c <_Balloc+0x50>
 801d24a:	69e3      	ldr	r3, [r4, #28]
 801d24c:	68db      	ldr	r3, [r3, #12]
 801d24e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d252:	b9b8      	cbnz	r0, 801d284 <_Balloc+0x68>
 801d254:	2101      	movs	r1, #1
 801d256:	fa01 f605 	lsl.w	r6, r1, r5
 801d25a:	1d72      	adds	r2, r6, #5
 801d25c:	0092      	lsls	r2, r2, #2
 801d25e:	4620      	mov	r0, r4
 801d260:	f7fd fda4 	bl	801adac <_calloc_r>
 801d264:	b160      	cbz	r0, 801d280 <_Balloc+0x64>
 801d266:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d26a:	e00e      	b.n	801d28a <_Balloc+0x6e>
 801d26c:	2221      	movs	r2, #33	; 0x21
 801d26e:	2104      	movs	r1, #4
 801d270:	4620      	mov	r0, r4
 801d272:	f7fd fd9b 	bl	801adac <_calloc_r>
 801d276:	69e3      	ldr	r3, [r4, #28]
 801d278:	60f0      	str	r0, [r6, #12]
 801d27a:	68db      	ldr	r3, [r3, #12]
 801d27c:	2b00      	cmp	r3, #0
 801d27e:	d1e4      	bne.n	801d24a <_Balloc+0x2e>
 801d280:	2000      	movs	r0, #0
 801d282:	bd70      	pop	{r4, r5, r6, pc}
 801d284:	6802      	ldr	r2, [r0, #0]
 801d286:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d28a:	2300      	movs	r3, #0
 801d28c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d290:	e7f7      	b.n	801d282 <_Balloc+0x66>
 801d292:	bf00      	nop
 801d294:	0802300f 	.word	0x0802300f
 801d298:	080230f6 	.word	0x080230f6

0801d29c <_Bfree>:
 801d29c:	b570      	push	{r4, r5, r6, lr}
 801d29e:	69c6      	ldr	r6, [r0, #28]
 801d2a0:	4605      	mov	r5, r0
 801d2a2:	460c      	mov	r4, r1
 801d2a4:	b976      	cbnz	r6, 801d2c4 <_Bfree+0x28>
 801d2a6:	2010      	movs	r0, #16
 801d2a8:	f7fd fd96 	bl	801add8 <malloc>
 801d2ac:	4602      	mov	r2, r0
 801d2ae:	61e8      	str	r0, [r5, #28]
 801d2b0:	b920      	cbnz	r0, 801d2bc <_Bfree+0x20>
 801d2b2:	4b09      	ldr	r3, [pc, #36]	; (801d2d8 <_Bfree+0x3c>)
 801d2b4:	4809      	ldr	r0, [pc, #36]	; (801d2dc <_Bfree+0x40>)
 801d2b6:	218f      	movs	r1, #143	; 0x8f
 801d2b8:	f7fd fd5a 	bl	801ad70 <__assert_func>
 801d2bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d2c0:	6006      	str	r6, [r0, #0]
 801d2c2:	60c6      	str	r6, [r0, #12]
 801d2c4:	b13c      	cbz	r4, 801d2d6 <_Bfree+0x3a>
 801d2c6:	69eb      	ldr	r3, [r5, #28]
 801d2c8:	6862      	ldr	r2, [r4, #4]
 801d2ca:	68db      	ldr	r3, [r3, #12]
 801d2cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d2d0:	6021      	str	r1, [r4, #0]
 801d2d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d2d6:	bd70      	pop	{r4, r5, r6, pc}
 801d2d8:	0802300f 	.word	0x0802300f
 801d2dc:	080230f6 	.word	0x080230f6

0801d2e0 <__multadd>:
 801d2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2e4:	690d      	ldr	r5, [r1, #16]
 801d2e6:	4607      	mov	r7, r0
 801d2e8:	460c      	mov	r4, r1
 801d2ea:	461e      	mov	r6, r3
 801d2ec:	f101 0c14 	add.w	ip, r1, #20
 801d2f0:	2000      	movs	r0, #0
 801d2f2:	f8dc 3000 	ldr.w	r3, [ip]
 801d2f6:	b299      	uxth	r1, r3
 801d2f8:	fb02 6101 	mla	r1, r2, r1, r6
 801d2fc:	0c1e      	lsrs	r6, r3, #16
 801d2fe:	0c0b      	lsrs	r3, r1, #16
 801d300:	fb02 3306 	mla	r3, r2, r6, r3
 801d304:	b289      	uxth	r1, r1
 801d306:	3001      	adds	r0, #1
 801d308:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801d30c:	4285      	cmp	r5, r0
 801d30e:	f84c 1b04 	str.w	r1, [ip], #4
 801d312:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801d316:	dcec      	bgt.n	801d2f2 <__multadd+0x12>
 801d318:	b30e      	cbz	r6, 801d35e <__multadd+0x7e>
 801d31a:	68a3      	ldr	r3, [r4, #8]
 801d31c:	42ab      	cmp	r3, r5
 801d31e:	dc19      	bgt.n	801d354 <__multadd+0x74>
 801d320:	6861      	ldr	r1, [r4, #4]
 801d322:	4638      	mov	r0, r7
 801d324:	3101      	adds	r1, #1
 801d326:	f7ff ff79 	bl	801d21c <_Balloc>
 801d32a:	4680      	mov	r8, r0
 801d32c:	b928      	cbnz	r0, 801d33a <__multadd+0x5a>
 801d32e:	4602      	mov	r2, r0
 801d330:	4b0c      	ldr	r3, [pc, #48]	; (801d364 <__multadd+0x84>)
 801d332:	480d      	ldr	r0, [pc, #52]	; (801d368 <__multadd+0x88>)
 801d334:	21ba      	movs	r1, #186	; 0xba
 801d336:	f7fd fd1b 	bl	801ad70 <__assert_func>
 801d33a:	6922      	ldr	r2, [r4, #16]
 801d33c:	3202      	adds	r2, #2
 801d33e:	f104 010c 	add.w	r1, r4, #12
 801d342:	0092      	lsls	r2, r2, #2
 801d344:	300c      	adds	r0, #12
 801d346:	f7ff f884 	bl	801c452 <memcpy>
 801d34a:	4621      	mov	r1, r4
 801d34c:	4638      	mov	r0, r7
 801d34e:	f7ff ffa5 	bl	801d29c <_Bfree>
 801d352:	4644      	mov	r4, r8
 801d354:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d358:	3501      	adds	r5, #1
 801d35a:	615e      	str	r6, [r3, #20]
 801d35c:	6125      	str	r5, [r4, #16]
 801d35e:	4620      	mov	r0, r4
 801d360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d364:	080230e5 	.word	0x080230e5
 801d368:	080230f6 	.word	0x080230f6

0801d36c <__s2b>:
 801d36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d370:	460c      	mov	r4, r1
 801d372:	4615      	mov	r5, r2
 801d374:	461f      	mov	r7, r3
 801d376:	2209      	movs	r2, #9
 801d378:	3308      	adds	r3, #8
 801d37a:	4606      	mov	r6, r0
 801d37c:	fb93 f3f2 	sdiv	r3, r3, r2
 801d380:	2100      	movs	r1, #0
 801d382:	2201      	movs	r2, #1
 801d384:	429a      	cmp	r2, r3
 801d386:	db09      	blt.n	801d39c <__s2b+0x30>
 801d388:	4630      	mov	r0, r6
 801d38a:	f7ff ff47 	bl	801d21c <_Balloc>
 801d38e:	b940      	cbnz	r0, 801d3a2 <__s2b+0x36>
 801d390:	4602      	mov	r2, r0
 801d392:	4b19      	ldr	r3, [pc, #100]	; (801d3f8 <__s2b+0x8c>)
 801d394:	4819      	ldr	r0, [pc, #100]	; (801d3fc <__s2b+0x90>)
 801d396:	21d3      	movs	r1, #211	; 0xd3
 801d398:	f7fd fcea 	bl	801ad70 <__assert_func>
 801d39c:	0052      	lsls	r2, r2, #1
 801d39e:	3101      	adds	r1, #1
 801d3a0:	e7f0      	b.n	801d384 <__s2b+0x18>
 801d3a2:	9b08      	ldr	r3, [sp, #32]
 801d3a4:	6143      	str	r3, [r0, #20]
 801d3a6:	2d09      	cmp	r5, #9
 801d3a8:	f04f 0301 	mov.w	r3, #1
 801d3ac:	6103      	str	r3, [r0, #16]
 801d3ae:	dd16      	ble.n	801d3de <__s2b+0x72>
 801d3b0:	f104 0909 	add.w	r9, r4, #9
 801d3b4:	46c8      	mov	r8, r9
 801d3b6:	442c      	add	r4, r5
 801d3b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 801d3bc:	4601      	mov	r1, r0
 801d3be:	3b30      	subs	r3, #48	; 0x30
 801d3c0:	220a      	movs	r2, #10
 801d3c2:	4630      	mov	r0, r6
 801d3c4:	f7ff ff8c 	bl	801d2e0 <__multadd>
 801d3c8:	45a0      	cmp	r8, r4
 801d3ca:	d1f5      	bne.n	801d3b8 <__s2b+0x4c>
 801d3cc:	f1a5 0408 	sub.w	r4, r5, #8
 801d3d0:	444c      	add	r4, r9
 801d3d2:	1b2d      	subs	r5, r5, r4
 801d3d4:	1963      	adds	r3, r4, r5
 801d3d6:	42bb      	cmp	r3, r7
 801d3d8:	db04      	blt.n	801d3e4 <__s2b+0x78>
 801d3da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d3de:	340a      	adds	r4, #10
 801d3e0:	2509      	movs	r5, #9
 801d3e2:	e7f6      	b.n	801d3d2 <__s2b+0x66>
 801d3e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d3e8:	4601      	mov	r1, r0
 801d3ea:	3b30      	subs	r3, #48	; 0x30
 801d3ec:	220a      	movs	r2, #10
 801d3ee:	4630      	mov	r0, r6
 801d3f0:	f7ff ff76 	bl	801d2e0 <__multadd>
 801d3f4:	e7ee      	b.n	801d3d4 <__s2b+0x68>
 801d3f6:	bf00      	nop
 801d3f8:	080230e5 	.word	0x080230e5
 801d3fc:	080230f6 	.word	0x080230f6

0801d400 <__hi0bits>:
 801d400:	0c03      	lsrs	r3, r0, #16
 801d402:	041b      	lsls	r3, r3, #16
 801d404:	b9d3      	cbnz	r3, 801d43c <__hi0bits+0x3c>
 801d406:	0400      	lsls	r0, r0, #16
 801d408:	2310      	movs	r3, #16
 801d40a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801d40e:	bf04      	itt	eq
 801d410:	0200      	lsleq	r0, r0, #8
 801d412:	3308      	addeq	r3, #8
 801d414:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801d418:	bf04      	itt	eq
 801d41a:	0100      	lsleq	r0, r0, #4
 801d41c:	3304      	addeq	r3, #4
 801d41e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801d422:	bf04      	itt	eq
 801d424:	0080      	lsleq	r0, r0, #2
 801d426:	3302      	addeq	r3, #2
 801d428:	2800      	cmp	r0, #0
 801d42a:	db05      	blt.n	801d438 <__hi0bits+0x38>
 801d42c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801d430:	f103 0301 	add.w	r3, r3, #1
 801d434:	bf08      	it	eq
 801d436:	2320      	moveq	r3, #32
 801d438:	4618      	mov	r0, r3
 801d43a:	4770      	bx	lr
 801d43c:	2300      	movs	r3, #0
 801d43e:	e7e4      	b.n	801d40a <__hi0bits+0xa>

0801d440 <__lo0bits>:
 801d440:	6803      	ldr	r3, [r0, #0]
 801d442:	f013 0207 	ands.w	r2, r3, #7
 801d446:	d00c      	beq.n	801d462 <__lo0bits+0x22>
 801d448:	07d9      	lsls	r1, r3, #31
 801d44a:	d422      	bmi.n	801d492 <__lo0bits+0x52>
 801d44c:	079a      	lsls	r2, r3, #30
 801d44e:	bf49      	itett	mi
 801d450:	085b      	lsrmi	r3, r3, #1
 801d452:	089b      	lsrpl	r3, r3, #2
 801d454:	6003      	strmi	r3, [r0, #0]
 801d456:	2201      	movmi	r2, #1
 801d458:	bf5c      	itt	pl
 801d45a:	6003      	strpl	r3, [r0, #0]
 801d45c:	2202      	movpl	r2, #2
 801d45e:	4610      	mov	r0, r2
 801d460:	4770      	bx	lr
 801d462:	b299      	uxth	r1, r3
 801d464:	b909      	cbnz	r1, 801d46a <__lo0bits+0x2a>
 801d466:	0c1b      	lsrs	r3, r3, #16
 801d468:	2210      	movs	r2, #16
 801d46a:	b2d9      	uxtb	r1, r3
 801d46c:	b909      	cbnz	r1, 801d472 <__lo0bits+0x32>
 801d46e:	3208      	adds	r2, #8
 801d470:	0a1b      	lsrs	r3, r3, #8
 801d472:	0719      	lsls	r1, r3, #28
 801d474:	bf04      	itt	eq
 801d476:	091b      	lsreq	r3, r3, #4
 801d478:	3204      	addeq	r2, #4
 801d47a:	0799      	lsls	r1, r3, #30
 801d47c:	bf04      	itt	eq
 801d47e:	089b      	lsreq	r3, r3, #2
 801d480:	3202      	addeq	r2, #2
 801d482:	07d9      	lsls	r1, r3, #31
 801d484:	d403      	bmi.n	801d48e <__lo0bits+0x4e>
 801d486:	085b      	lsrs	r3, r3, #1
 801d488:	f102 0201 	add.w	r2, r2, #1
 801d48c:	d003      	beq.n	801d496 <__lo0bits+0x56>
 801d48e:	6003      	str	r3, [r0, #0]
 801d490:	e7e5      	b.n	801d45e <__lo0bits+0x1e>
 801d492:	2200      	movs	r2, #0
 801d494:	e7e3      	b.n	801d45e <__lo0bits+0x1e>
 801d496:	2220      	movs	r2, #32
 801d498:	e7e1      	b.n	801d45e <__lo0bits+0x1e>
	...

0801d49c <__i2b>:
 801d49c:	b510      	push	{r4, lr}
 801d49e:	460c      	mov	r4, r1
 801d4a0:	2101      	movs	r1, #1
 801d4a2:	f7ff febb 	bl	801d21c <_Balloc>
 801d4a6:	4602      	mov	r2, r0
 801d4a8:	b928      	cbnz	r0, 801d4b6 <__i2b+0x1a>
 801d4aa:	4b05      	ldr	r3, [pc, #20]	; (801d4c0 <__i2b+0x24>)
 801d4ac:	4805      	ldr	r0, [pc, #20]	; (801d4c4 <__i2b+0x28>)
 801d4ae:	f240 1145 	movw	r1, #325	; 0x145
 801d4b2:	f7fd fc5d 	bl	801ad70 <__assert_func>
 801d4b6:	2301      	movs	r3, #1
 801d4b8:	6144      	str	r4, [r0, #20]
 801d4ba:	6103      	str	r3, [r0, #16]
 801d4bc:	bd10      	pop	{r4, pc}
 801d4be:	bf00      	nop
 801d4c0:	080230e5 	.word	0x080230e5
 801d4c4:	080230f6 	.word	0x080230f6

0801d4c8 <__multiply>:
 801d4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4cc:	4691      	mov	r9, r2
 801d4ce:	690a      	ldr	r2, [r1, #16]
 801d4d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d4d4:	429a      	cmp	r2, r3
 801d4d6:	bfb8      	it	lt
 801d4d8:	460b      	movlt	r3, r1
 801d4da:	460c      	mov	r4, r1
 801d4dc:	bfbc      	itt	lt
 801d4de:	464c      	movlt	r4, r9
 801d4e0:	4699      	movlt	r9, r3
 801d4e2:	6927      	ldr	r7, [r4, #16]
 801d4e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801d4e8:	68a3      	ldr	r3, [r4, #8]
 801d4ea:	6861      	ldr	r1, [r4, #4]
 801d4ec:	eb07 060a 	add.w	r6, r7, sl
 801d4f0:	42b3      	cmp	r3, r6
 801d4f2:	b085      	sub	sp, #20
 801d4f4:	bfb8      	it	lt
 801d4f6:	3101      	addlt	r1, #1
 801d4f8:	f7ff fe90 	bl	801d21c <_Balloc>
 801d4fc:	b930      	cbnz	r0, 801d50c <__multiply+0x44>
 801d4fe:	4602      	mov	r2, r0
 801d500:	4b44      	ldr	r3, [pc, #272]	; (801d614 <__multiply+0x14c>)
 801d502:	4845      	ldr	r0, [pc, #276]	; (801d618 <__multiply+0x150>)
 801d504:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801d508:	f7fd fc32 	bl	801ad70 <__assert_func>
 801d50c:	f100 0514 	add.w	r5, r0, #20
 801d510:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801d514:	462b      	mov	r3, r5
 801d516:	2200      	movs	r2, #0
 801d518:	4543      	cmp	r3, r8
 801d51a:	d321      	bcc.n	801d560 <__multiply+0x98>
 801d51c:	f104 0314 	add.w	r3, r4, #20
 801d520:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801d524:	f109 0314 	add.w	r3, r9, #20
 801d528:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801d52c:	9202      	str	r2, [sp, #8]
 801d52e:	1b3a      	subs	r2, r7, r4
 801d530:	3a15      	subs	r2, #21
 801d532:	f022 0203 	bic.w	r2, r2, #3
 801d536:	3204      	adds	r2, #4
 801d538:	f104 0115 	add.w	r1, r4, #21
 801d53c:	428f      	cmp	r7, r1
 801d53e:	bf38      	it	cc
 801d540:	2204      	movcc	r2, #4
 801d542:	9201      	str	r2, [sp, #4]
 801d544:	9a02      	ldr	r2, [sp, #8]
 801d546:	9303      	str	r3, [sp, #12]
 801d548:	429a      	cmp	r2, r3
 801d54a:	d80c      	bhi.n	801d566 <__multiply+0x9e>
 801d54c:	2e00      	cmp	r6, #0
 801d54e:	dd03      	ble.n	801d558 <__multiply+0x90>
 801d550:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d554:	2b00      	cmp	r3, #0
 801d556:	d05b      	beq.n	801d610 <__multiply+0x148>
 801d558:	6106      	str	r6, [r0, #16]
 801d55a:	b005      	add	sp, #20
 801d55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d560:	f843 2b04 	str.w	r2, [r3], #4
 801d564:	e7d8      	b.n	801d518 <__multiply+0x50>
 801d566:	f8b3 a000 	ldrh.w	sl, [r3]
 801d56a:	f1ba 0f00 	cmp.w	sl, #0
 801d56e:	d024      	beq.n	801d5ba <__multiply+0xf2>
 801d570:	f104 0e14 	add.w	lr, r4, #20
 801d574:	46a9      	mov	r9, r5
 801d576:	f04f 0c00 	mov.w	ip, #0
 801d57a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801d57e:	f8d9 1000 	ldr.w	r1, [r9]
 801d582:	fa1f fb82 	uxth.w	fp, r2
 801d586:	b289      	uxth	r1, r1
 801d588:	fb0a 110b 	mla	r1, sl, fp, r1
 801d58c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801d590:	f8d9 2000 	ldr.w	r2, [r9]
 801d594:	4461      	add	r1, ip
 801d596:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d59a:	fb0a c20b 	mla	r2, sl, fp, ip
 801d59e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801d5a2:	b289      	uxth	r1, r1
 801d5a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d5a8:	4577      	cmp	r7, lr
 801d5aa:	f849 1b04 	str.w	r1, [r9], #4
 801d5ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d5b2:	d8e2      	bhi.n	801d57a <__multiply+0xb2>
 801d5b4:	9a01      	ldr	r2, [sp, #4]
 801d5b6:	f845 c002 	str.w	ip, [r5, r2]
 801d5ba:	9a03      	ldr	r2, [sp, #12]
 801d5bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801d5c0:	3304      	adds	r3, #4
 801d5c2:	f1b9 0f00 	cmp.w	r9, #0
 801d5c6:	d021      	beq.n	801d60c <__multiply+0x144>
 801d5c8:	6829      	ldr	r1, [r5, #0]
 801d5ca:	f104 0c14 	add.w	ip, r4, #20
 801d5ce:	46ae      	mov	lr, r5
 801d5d0:	f04f 0a00 	mov.w	sl, #0
 801d5d4:	f8bc b000 	ldrh.w	fp, [ip]
 801d5d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801d5dc:	fb09 220b 	mla	r2, r9, fp, r2
 801d5e0:	4452      	add	r2, sl
 801d5e2:	b289      	uxth	r1, r1
 801d5e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d5e8:	f84e 1b04 	str.w	r1, [lr], #4
 801d5ec:	f85c 1b04 	ldr.w	r1, [ip], #4
 801d5f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d5f4:	f8be 1000 	ldrh.w	r1, [lr]
 801d5f8:	fb09 110a 	mla	r1, r9, sl, r1
 801d5fc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801d600:	4567      	cmp	r7, ip
 801d602:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d606:	d8e5      	bhi.n	801d5d4 <__multiply+0x10c>
 801d608:	9a01      	ldr	r2, [sp, #4]
 801d60a:	50a9      	str	r1, [r5, r2]
 801d60c:	3504      	adds	r5, #4
 801d60e:	e799      	b.n	801d544 <__multiply+0x7c>
 801d610:	3e01      	subs	r6, #1
 801d612:	e79b      	b.n	801d54c <__multiply+0x84>
 801d614:	080230e5 	.word	0x080230e5
 801d618:	080230f6 	.word	0x080230f6

0801d61c <__pow5mult>:
 801d61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d620:	4615      	mov	r5, r2
 801d622:	f012 0203 	ands.w	r2, r2, #3
 801d626:	4606      	mov	r6, r0
 801d628:	460f      	mov	r7, r1
 801d62a:	d007      	beq.n	801d63c <__pow5mult+0x20>
 801d62c:	4c25      	ldr	r4, [pc, #148]	; (801d6c4 <__pow5mult+0xa8>)
 801d62e:	3a01      	subs	r2, #1
 801d630:	2300      	movs	r3, #0
 801d632:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d636:	f7ff fe53 	bl	801d2e0 <__multadd>
 801d63a:	4607      	mov	r7, r0
 801d63c:	10ad      	asrs	r5, r5, #2
 801d63e:	d03d      	beq.n	801d6bc <__pow5mult+0xa0>
 801d640:	69f4      	ldr	r4, [r6, #28]
 801d642:	b97c      	cbnz	r4, 801d664 <__pow5mult+0x48>
 801d644:	2010      	movs	r0, #16
 801d646:	f7fd fbc7 	bl	801add8 <malloc>
 801d64a:	4602      	mov	r2, r0
 801d64c:	61f0      	str	r0, [r6, #28]
 801d64e:	b928      	cbnz	r0, 801d65c <__pow5mult+0x40>
 801d650:	4b1d      	ldr	r3, [pc, #116]	; (801d6c8 <__pow5mult+0xac>)
 801d652:	481e      	ldr	r0, [pc, #120]	; (801d6cc <__pow5mult+0xb0>)
 801d654:	f240 11b3 	movw	r1, #435	; 0x1b3
 801d658:	f7fd fb8a 	bl	801ad70 <__assert_func>
 801d65c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d660:	6004      	str	r4, [r0, #0]
 801d662:	60c4      	str	r4, [r0, #12]
 801d664:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801d668:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d66c:	b94c      	cbnz	r4, 801d682 <__pow5mult+0x66>
 801d66e:	f240 2171 	movw	r1, #625	; 0x271
 801d672:	4630      	mov	r0, r6
 801d674:	f7ff ff12 	bl	801d49c <__i2b>
 801d678:	2300      	movs	r3, #0
 801d67a:	f8c8 0008 	str.w	r0, [r8, #8]
 801d67e:	4604      	mov	r4, r0
 801d680:	6003      	str	r3, [r0, #0]
 801d682:	f04f 0900 	mov.w	r9, #0
 801d686:	07eb      	lsls	r3, r5, #31
 801d688:	d50a      	bpl.n	801d6a0 <__pow5mult+0x84>
 801d68a:	4639      	mov	r1, r7
 801d68c:	4622      	mov	r2, r4
 801d68e:	4630      	mov	r0, r6
 801d690:	f7ff ff1a 	bl	801d4c8 <__multiply>
 801d694:	4639      	mov	r1, r7
 801d696:	4680      	mov	r8, r0
 801d698:	4630      	mov	r0, r6
 801d69a:	f7ff fdff 	bl	801d29c <_Bfree>
 801d69e:	4647      	mov	r7, r8
 801d6a0:	106d      	asrs	r5, r5, #1
 801d6a2:	d00b      	beq.n	801d6bc <__pow5mult+0xa0>
 801d6a4:	6820      	ldr	r0, [r4, #0]
 801d6a6:	b938      	cbnz	r0, 801d6b8 <__pow5mult+0x9c>
 801d6a8:	4622      	mov	r2, r4
 801d6aa:	4621      	mov	r1, r4
 801d6ac:	4630      	mov	r0, r6
 801d6ae:	f7ff ff0b 	bl	801d4c8 <__multiply>
 801d6b2:	6020      	str	r0, [r4, #0]
 801d6b4:	f8c0 9000 	str.w	r9, [r0]
 801d6b8:	4604      	mov	r4, r0
 801d6ba:	e7e4      	b.n	801d686 <__pow5mult+0x6a>
 801d6bc:	4638      	mov	r0, r7
 801d6be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d6c2:	bf00      	nop
 801d6c4:	08023240 	.word	0x08023240
 801d6c8:	0802300f 	.word	0x0802300f
 801d6cc:	080230f6 	.word	0x080230f6

0801d6d0 <__lshift>:
 801d6d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d6d4:	460c      	mov	r4, r1
 801d6d6:	6849      	ldr	r1, [r1, #4]
 801d6d8:	6923      	ldr	r3, [r4, #16]
 801d6da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d6de:	68a3      	ldr	r3, [r4, #8]
 801d6e0:	4607      	mov	r7, r0
 801d6e2:	4691      	mov	r9, r2
 801d6e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d6e8:	f108 0601 	add.w	r6, r8, #1
 801d6ec:	42b3      	cmp	r3, r6
 801d6ee:	db0b      	blt.n	801d708 <__lshift+0x38>
 801d6f0:	4638      	mov	r0, r7
 801d6f2:	f7ff fd93 	bl	801d21c <_Balloc>
 801d6f6:	4605      	mov	r5, r0
 801d6f8:	b948      	cbnz	r0, 801d70e <__lshift+0x3e>
 801d6fa:	4602      	mov	r2, r0
 801d6fc:	4b28      	ldr	r3, [pc, #160]	; (801d7a0 <__lshift+0xd0>)
 801d6fe:	4829      	ldr	r0, [pc, #164]	; (801d7a4 <__lshift+0xd4>)
 801d700:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801d704:	f7fd fb34 	bl	801ad70 <__assert_func>
 801d708:	3101      	adds	r1, #1
 801d70a:	005b      	lsls	r3, r3, #1
 801d70c:	e7ee      	b.n	801d6ec <__lshift+0x1c>
 801d70e:	2300      	movs	r3, #0
 801d710:	f100 0114 	add.w	r1, r0, #20
 801d714:	f100 0210 	add.w	r2, r0, #16
 801d718:	4618      	mov	r0, r3
 801d71a:	4553      	cmp	r3, sl
 801d71c:	db33      	blt.n	801d786 <__lshift+0xb6>
 801d71e:	6920      	ldr	r0, [r4, #16]
 801d720:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d724:	f104 0314 	add.w	r3, r4, #20
 801d728:	f019 091f 	ands.w	r9, r9, #31
 801d72c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d730:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d734:	d02b      	beq.n	801d78e <__lshift+0xbe>
 801d736:	f1c9 0e20 	rsb	lr, r9, #32
 801d73a:	468a      	mov	sl, r1
 801d73c:	2200      	movs	r2, #0
 801d73e:	6818      	ldr	r0, [r3, #0]
 801d740:	fa00 f009 	lsl.w	r0, r0, r9
 801d744:	4310      	orrs	r0, r2
 801d746:	f84a 0b04 	str.w	r0, [sl], #4
 801d74a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d74e:	459c      	cmp	ip, r3
 801d750:	fa22 f20e 	lsr.w	r2, r2, lr
 801d754:	d8f3      	bhi.n	801d73e <__lshift+0x6e>
 801d756:	ebac 0304 	sub.w	r3, ip, r4
 801d75a:	3b15      	subs	r3, #21
 801d75c:	f023 0303 	bic.w	r3, r3, #3
 801d760:	3304      	adds	r3, #4
 801d762:	f104 0015 	add.w	r0, r4, #21
 801d766:	4584      	cmp	ip, r0
 801d768:	bf38      	it	cc
 801d76a:	2304      	movcc	r3, #4
 801d76c:	50ca      	str	r2, [r1, r3]
 801d76e:	b10a      	cbz	r2, 801d774 <__lshift+0xa4>
 801d770:	f108 0602 	add.w	r6, r8, #2
 801d774:	3e01      	subs	r6, #1
 801d776:	4638      	mov	r0, r7
 801d778:	612e      	str	r6, [r5, #16]
 801d77a:	4621      	mov	r1, r4
 801d77c:	f7ff fd8e 	bl	801d29c <_Bfree>
 801d780:	4628      	mov	r0, r5
 801d782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d786:	f842 0f04 	str.w	r0, [r2, #4]!
 801d78a:	3301      	adds	r3, #1
 801d78c:	e7c5      	b.n	801d71a <__lshift+0x4a>
 801d78e:	3904      	subs	r1, #4
 801d790:	f853 2b04 	ldr.w	r2, [r3], #4
 801d794:	f841 2f04 	str.w	r2, [r1, #4]!
 801d798:	459c      	cmp	ip, r3
 801d79a:	d8f9      	bhi.n	801d790 <__lshift+0xc0>
 801d79c:	e7ea      	b.n	801d774 <__lshift+0xa4>
 801d79e:	bf00      	nop
 801d7a0:	080230e5 	.word	0x080230e5
 801d7a4:	080230f6 	.word	0x080230f6

0801d7a8 <__mcmp>:
 801d7a8:	b530      	push	{r4, r5, lr}
 801d7aa:	6902      	ldr	r2, [r0, #16]
 801d7ac:	690c      	ldr	r4, [r1, #16]
 801d7ae:	1b12      	subs	r2, r2, r4
 801d7b0:	d10e      	bne.n	801d7d0 <__mcmp+0x28>
 801d7b2:	f100 0314 	add.w	r3, r0, #20
 801d7b6:	3114      	adds	r1, #20
 801d7b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d7bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d7c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d7c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d7c8:	42a5      	cmp	r5, r4
 801d7ca:	d003      	beq.n	801d7d4 <__mcmp+0x2c>
 801d7cc:	d305      	bcc.n	801d7da <__mcmp+0x32>
 801d7ce:	2201      	movs	r2, #1
 801d7d0:	4610      	mov	r0, r2
 801d7d2:	bd30      	pop	{r4, r5, pc}
 801d7d4:	4283      	cmp	r3, r0
 801d7d6:	d3f3      	bcc.n	801d7c0 <__mcmp+0x18>
 801d7d8:	e7fa      	b.n	801d7d0 <__mcmp+0x28>
 801d7da:	f04f 32ff 	mov.w	r2, #4294967295
 801d7de:	e7f7      	b.n	801d7d0 <__mcmp+0x28>

0801d7e0 <__mdiff>:
 801d7e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7e4:	460c      	mov	r4, r1
 801d7e6:	4606      	mov	r6, r0
 801d7e8:	4611      	mov	r1, r2
 801d7ea:	4620      	mov	r0, r4
 801d7ec:	4690      	mov	r8, r2
 801d7ee:	f7ff ffdb 	bl	801d7a8 <__mcmp>
 801d7f2:	1e05      	subs	r5, r0, #0
 801d7f4:	d110      	bne.n	801d818 <__mdiff+0x38>
 801d7f6:	4629      	mov	r1, r5
 801d7f8:	4630      	mov	r0, r6
 801d7fa:	f7ff fd0f 	bl	801d21c <_Balloc>
 801d7fe:	b930      	cbnz	r0, 801d80e <__mdiff+0x2e>
 801d800:	4b3a      	ldr	r3, [pc, #232]	; (801d8ec <__mdiff+0x10c>)
 801d802:	4602      	mov	r2, r0
 801d804:	f240 2137 	movw	r1, #567	; 0x237
 801d808:	4839      	ldr	r0, [pc, #228]	; (801d8f0 <__mdiff+0x110>)
 801d80a:	f7fd fab1 	bl	801ad70 <__assert_func>
 801d80e:	2301      	movs	r3, #1
 801d810:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d814:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d818:	bfa4      	itt	ge
 801d81a:	4643      	movge	r3, r8
 801d81c:	46a0      	movge	r8, r4
 801d81e:	4630      	mov	r0, r6
 801d820:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d824:	bfa6      	itte	ge
 801d826:	461c      	movge	r4, r3
 801d828:	2500      	movge	r5, #0
 801d82a:	2501      	movlt	r5, #1
 801d82c:	f7ff fcf6 	bl	801d21c <_Balloc>
 801d830:	b920      	cbnz	r0, 801d83c <__mdiff+0x5c>
 801d832:	4b2e      	ldr	r3, [pc, #184]	; (801d8ec <__mdiff+0x10c>)
 801d834:	4602      	mov	r2, r0
 801d836:	f240 2145 	movw	r1, #581	; 0x245
 801d83a:	e7e5      	b.n	801d808 <__mdiff+0x28>
 801d83c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801d840:	6926      	ldr	r6, [r4, #16]
 801d842:	60c5      	str	r5, [r0, #12]
 801d844:	f104 0914 	add.w	r9, r4, #20
 801d848:	f108 0514 	add.w	r5, r8, #20
 801d84c:	f100 0e14 	add.w	lr, r0, #20
 801d850:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801d854:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801d858:	f108 0210 	add.w	r2, r8, #16
 801d85c:	46f2      	mov	sl, lr
 801d85e:	2100      	movs	r1, #0
 801d860:	f859 3b04 	ldr.w	r3, [r9], #4
 801d864:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d868:	fa11 f88b 	uxtah	r8, r1, fp
 801d86c:	b299      	uxth	r1, r3
 801d86e:	0c1b      	lsrs	r3, r3, #16
 801d870:	eba8 0801 	sub.w	r8, r8, r1
 801d874:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d878:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d87c:	fa1f f888 	uxth.w	r8, r8
 801d880:	1419      	asrs	r1, r3, #16
 801d882:	454e      	cmp	r6, r9
 801d884:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d888:	f84a 3b04 	str.w	r3, [sl], #4
 801d88c:	d8e8      	bhi.n	801d860 <__mdiff+0x80>
 801d88e:	1b33      	subs	r3, r6, r4
 801d890:	3b15      	subs	r3, #21
 801d892:	f023 0303 	bic.w	r3, r3, #3
 801d896:	3304      	adds	r3, #4
 801d898:	3415      	adds	r4, #21
 801d89a:	42a6      	cmp	r6, r4
 801d89c:	bf38      	it	cc
 801d89e:	2304      	movcc	r3, #4
 801d8a0:	441d      	add	r5, r3
 801d8a2:	4473      	add	r3, lr
 801d8a4:	469e      	mov	lr, r3
 801d8a6:	462e      	mov	r6, r5
 801d8a8:	4566      	cmp	r6, ip
 801d8aa:	d30e      	bcc.n	801d8ca <__mdiff+0xea>
 801d8ac:	f10c 0203 	add.w	r2, ip, #3
 801d8b0:	1b52      	subs	r2, r2, r5
 801d8b2:	f022 0203 	bic.w	r2, r2, #3
 801d8b6:	3d03      	subs	r5, #3
 801d8b8:	45ac      	cmp	ip, r5
 801d8ba:	bf38      	it	cc
 801d8bc:	2200      	movcc	r2, #0
 801d8be:	4413      	add	r3, r2
 801d8c0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801d8c4:	b17a      	cbz	r2, 801d8e6 <__mdiff+0x106>
 801d8c6:	6107      	str	r7, [r0, #16]
 801d8c8:	e7a4      	b.n	801d814 <__mdiff+0x34>
 801d8ca:	f856 8b04 	ldr.w	r8, [r6], #4
 801d8ce:	fa11 f288 	uxtah	r2, r1, r8
 801d8d2:	1414      	asrs	r4, r2, #16
 801d8d4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801d8d8:	b292      	uxth	r2, r2
 801d8da:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801d8de:	f84e 2b04 	str.w	r2, [lr], #4
 801d8e2:	1421      	asrs	r1, r4, #16
 801d8e4:	e7e0      	b.n	801d8a8 <__mdiff+0xc8>
 801d8e6:	3f01      	subs	r7, #1
 801d8e8:	e7ea      	b.n	801d8c0 <__mdiff+0xe0>
 801d8ea:	bf00      	nop
 801d8ec:	080230e5 	.word	0x080230e5
 801d8f0:	080230f6 	.word	0x080230f6

0801d8f4 <__ulp>:
 801d8f4:	b082      	sub	sp, #8
 801d8f6:	ed8d 0b00 	vstr	d0, [sp]
 801d8fa:	9a01      	ldr	r2, [sp, #4]
 801d8fc:	4b0f      	ldr	r3, [pc, #60]	; (801d93c <__ulp+0x48>)
 801d8fe:	4013      	ands	r3, r2
 801d900:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801d904:	2b00      	cmp	r3, #0
 801d906:	dc08      	bgt.n	801d91a <__ulp+0x26>
 801d908:	425b      	negs	r3, r3
 801d90a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801d90e:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d912:	da04      	bge.n	801d91e <__ulp+0x2a>
 801d914:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801d918:	4113      	asrs	r3, r2
 801d91a:	2200      	movs	r2, #0
 801d91c:	e008      	b.n	801d930 <__ulp+0x3c>
 801d91e:	f1a2 0314 	sub.w	r3, r2, #20
 801d922:	2b1e      	cmp	r3, #30
 801d924:	bfda      	itte	le
 801d926:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801d92a:	40da      	lsrle	r2, r3
 801d92c:	2201      	movgt	r2, #1
 801d92e:	2300      	movs	r3, #0
 801d930:	4619      	mov	r1, r3
 801d932:	4610      	mov	r0, r2
 801d934:	ec41 0b10 	vmov	d0, r0, r1
 801d938:	b002      	add	sp, #8
 801d93a:	4770      	bx	lr
 801d93c:	7ff00000 	.word	0x7ff00000

0801d940 <__b2d>:
 801d940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d944:	6906      	ldr	r6, [r0, #16]
 801d946:	f100 0814 	add.w	r8, r0, #20
 801d94a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801d94e:	1f37      	subs	r7, r6, #4
 801d950:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d954:	4610      	mov	r0, r2
 801d956:	f7ff fd53 	bl	801d400 <__hi0bits>
 801d95a:	f1c0 0320 	rsb	r3, r0, #32
 801d95e:	280a      	cmp	r0, #10
 801d960:	600b      	str	r3, [r1, #0]
 801d962:	491b      	ldr	r1, [pc, #108]	; (801d9d0 <__b2d+0x90>)
 801d964:	dc15      	bgt.n	801d992 <__b2d+0x52>
 801d966:	f1c0 0c0b 	rsb	ip, r0, #11
 801d96a:	fa22 f30c 	lsr.w	r3, r2, ip
 801d96e:	45b8      	cmp	r8, r7
 801d970:	ea43 0501 	orr.w	r5, r3, r1
 801d974:	bf34      	ite	cc
 801d976:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d97a:	2300      	movcs	r3, #0
 801d97c:	3015      	adds	r0, #21
 801d97e:	fa02 f000 	lsl.w	r0, r2, r0
 801d982:	fa23 f30c 	lsr.w	r3, r3, ip
 801d986:	4303      	orrs	r3, r0
 801d988:	461c      	mov	r4, r3
 801d98a:	ec45 4b10 	vmov	d0, r4, r5
 801d98e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d992:	45b8      	cmp	r8, r7
 801d994:	bf3a      	itte	cc
 801d996:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d99a:	f1a6 0708 	subcc.w	r7, r6, #8
 801d99e:	2300      	movcs	r3, #0
 801d9a0:	380b      	subs	r0, #11
 801d9a2:	d012      	beq.n	801d9ca <__b2d+0x8a>
 801d9a4:	f1c0 0120 	rsb	r1, r0, #32
 801d9a8:	fa23 f401 	lsr.w	r4, r3, r1
 801d9ac:	4082      	lsls	r2, r0
 801d9ae:	4322      	orrs	r2, r4
 801d9b0:	4547      	cmp	r7, r8
 801d9b2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801d9b6:	bf8c      	ite	hi
 801d9b8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801d9bc:	2200      	movls	r2, #0
 801d9be:	4083      	lsls	r3, r0
 801d9c0:	40ca      	lsrs	r2, r1
 801d9c2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801d9c6:	4313      	orrs	r3, r2
 801d9c8:	e7de      	b.n	801d988 <__b2d+0x48>
 801d9ca:	ea42 0501 	orr.w	r5, r2, r1
 801d9ce:	e7db      	b.n	801d988 <__b2d+0x48>
 801d9d0:	3ff00000 	.word	0x3ff00000

0801d9d4 <__d2b>:
 801d9d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d9d8:	460f      	mov	r7, r1
 801d9da:	2101      	movs	r1, #1
 801d9dc:	ec59 8b10 	vmov	r8, r9, d0
 801d9e0:	4616      	mov	r6, r2
 801d9e2:	f7ff fc1b 	bl	801d21c <_Balloc>
 801d9e6:	4604      	mov	r4, r0
 801d9e8:	b930      	cbnz	r0, 801d9f8 <__d2b+0x24>
 801d9ea:	4602      	mov	r2, r0
 801d9ec:	4b24      	ldr	r3, [pc, #144]	; (801da80 <__d2b+0xac>)
 801d9ee:	4825      	ldr	r0, [pc, #148]	; (801da84 <__d2b+0xb0>)
 801d9f0:	f240 310f 	movw	r1, #783	; 0x30f
 801d9f4:	f7fd f9bc 	bl	801ad70 <__assert_func>
 801d9f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d9fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801da00:	bb2d      	cbnz	r5, 801da4e <__d2b+0x7a>
 801da02:	9301      	str	r3, [sp, #4]
 801da04:	f1b8 0300 	subs.w	r3, r8, #0
 801da08:	d026      	beq.n	801da58 <__d2b+0x84>
 801da0a:	4668      	mov	r0, sp
 801da0c:	9300      	str	r3, [sp, #0]
 801da0e:	f7ff fd17 	bl	801d440 <__lo0bits>
 801da12:	e9dd 1200 	ldrd	r1, r2, [sp]
 801da16:	b1e8      	cbz	r0, 801da54 <__d2b+0x80>
 801da18:	f1c0 0320 	rsb	r3, r0, #32
 801da1c:	fa02 f303 	lsl.w	r3, r2, r3
 801da20:	430b      	orrs	r3, r1
 801da22:	40c2      	lsrs	r2, r0
 801da24:	6163      	str	r3, [r4, #20]
 801da26:	9201      	str	r2, [sp, #4]
 801da28:	9b01      	ldr	r3, [sp, #4]
 801da2a:	61a3      	str	r3, [r4, #24]
 801da2c:	2b00      	cmp	r3, #0
 801da2e:	bf14      	ite	ne
 801da30:	2202      	movne	r2, #2
 801da32:	2201      	moveq	r2, #1
 801da34:	6122      	str	r2, [r4, #16]
 801da36:	b1bd      	cbz	r5, 801da68 <__d2b+0x94>
 801da38:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801da3c:	4405      	add	r5, r0
 801da3e:	603d      	str	r5, [r7, #0]
 801da40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801da44:	6030      	str	r0, [r6, #0]
 801da46:	4620      	mov	r0, r4
 801da48:	b003      	add	sp, #12
 801da4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801da4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801da52:	e7d6      	b.n	801da02 <__d2b+0x2e>
 801da54:	6161      	str	r1, [r4, #20]
 801da56:	e7e7      	b.n	801da28 <__d2b+0x54>
 801da58:	a801      	add	r0, sp, #4
 801da5a:	f7ff fcf1 	bl	801d440 <__lo0bits>
 801da5e:	9b01      	ldr	r3, [sp, #4]
 801da60:	6163      	str	r3, [r4, #20]
 801da62:	3020      	adds	r0, #32
 801da64:	2201      	movs	r2, #1
 801da66:	e7e5      	b.n	801da34 <__d2b+0x60>
 801da68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801da6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801da70:	6038      	str	r0, [r7, #0]
 801da72:	6918      	ldr	r0, [r3, #16]
 801da74:	f7ff fcc4 	bl	801d400 <__hi0bits>
 801da78:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801da7c:	e7e2      	b.n	801da44 <__d2b+0x70>
 801da7e:	bf00      	nop
 801da80:	080230e5 	.word	0x080230e5
 801da84:	080230f6 	.word	0x080230f6

0801da88 <__ratio>:
 801da88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da8c:	4688      	mov	r8, r1
 801da8e:	4669      	mov	r1, sp
 801da90:	4681      	mov	r9, r0
 801da92:	f7ff ff55 	bl	801d940 <__b2d>
 801da96:	a901      	add	r1, sp, #4
 801da98:	4640      	mov	r0, r8
 801da9a:	ec55 4b10 	vmov	r4, r5, d0
 801da9e:	f7ff ff4f 	bl	801d940 <__b2d>
 801daa2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801daa6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801daaa:	eba3 0c02 	sub.w	ip, r3, r2
 801daae:	e9dd 3200 	ldrd	r3, r2, [sp]
 801dab2:	1a9b      	subs	r3, r3, r2
 801dab4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801dab8:	ec51 0b10 	vmov	r0, r1, d0
 801dabc:	2b00      	cmp	r3, #0
 801dabe:	bfd6      	itet	le
 801dac0:	460a      	movle	r2, r1
 801dac2:	462a      	movgt	r2, r5
 801dac4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801dac8:	468b      	mov	fp, r1
 801daca:	462f      	mov	r7, r5
 801dacc:	bfd4      	ite	le
 801dace:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801dad2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801dad6:	4620      	mov	r0, r4
 801dad8:	ee10 2a10 	vmov	r2, s0
 801dadc:	465b      	mov	r3, fp
 801dade:	4639      	mov	r1, r7
 801dae0:	f7e2 fecc 	bl	800087c <__aeabi_ddiv>
 801dae4:	ec41 0b10 	vmov	d0, r0, r1
 801dae8:	b003      	add	sp, #12
 801daea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801daee <__copybits>:
 801daee:	3901      	subs	r1, #1
 801daf0:	b570      	push	{r4, r5, r6, lr}
 801daf2:	1149      	asrs	r1, r1, #5
 801daf4:	6914      	ldr	r4, [r2, #16]
 801daf6:	3101      	adds	r1, #1
 801daf8:	f102 0314 	add.w	r3, r2, #20
 801dafc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801db00:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801db04:	1f05      	subs	r5, r0, #4
 801db06:	42a3      	cmp	r3, r4
 801db08:	d30c      	bcc.n	801db24 <__copybits+0x36>
 801db0a:	1aa3      	subs	r3, r4, r2
 801db0c:	3b11      	subs	r3, #17
 801db0e:	f023 0303 	bic.w	r3, r3, #3
 801db12:	3211      	adds	r2, #17
 801db14:	42a2      	cmp	r2, r4
 801db16:	bf88      	it	hi
 801db18:	2300      	movhi	r3, #0
 801db1a:	4418      	add	r0, r3
 801db1c:	2300      	movs	r3, #0
 801db1e:	4288      	cmp	r0, r1
 801db20:	d305      	bcc.n	801db2e <__copybits+0x40>
 801db22:	bd70      	pop	{r4, r5, r6, pc}
 801db24:	f853 6b04 	ldr.w	r6, [r3], #4
 801db28:	f845 6f04 	str.w	r6, [r5, #4]!
 801db2c:	e7eb      	b.n	801db06 <__copybits+0x18>
 801db2e:	f840 3b04 	str.w	r3, [r0], #4
 801db32:	e7f4      	b.n	801db1e <__copybits+0x30>

0801db34 <__any_on>:
 801db34:	f100 0214 	add.w	r2, r0, #20
 801db38:	6900      	ldr	r0, [r0, #16]
 801db3a:	114b      	asrs	r3, r1, #5
 801db3c:	4298      	cmp	r0, r3
 801db3e:	b510      	push	{r4, lr}
 801db40:	db11      	blt.n	801db66 <__any_on+0x32>
 801db42:	dd0a      	ble.n	801db5a <__any_on+0x26>
 801db44:	f011 011f 	ands.w	r1, r1, #31
 801db48:	d007      	beq.n	801db5a <__any_on+0x26>
 801db4a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801db4e:	fa24 f001 	lsr.w	r0, r4, r1
 801db52:	fa00 f101 	lsl.w	r1, r0, r1
 801db56:	428c      	cmp	r4, r1
 801db58:	d10b      	bne.n	801db72 <__any_on+0x3e>
 801db5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801db5e:	4293      	cmp	r3, r2
 801db60:	d803      	bhi.n	801db6a <__any_on+0x36>
 801db62:	2000      	movs	r0, #0
 801db64:	bd10      	pop	{r4, pc}
 801db66:	4603      	mov	r3, r0
 801db68:	e7f7      	b.n	801db5a <__any_on+0x26>
 801db6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801db6e:	2900      	cmp	r1, #0
 801db70:	d0f5      	beq.n	801db5e <__any_on+0x2a>
 801db72:	2001      	movs	r0, #1
 801db74:	e7f6      	b.n	801db64 <__any_on+0x30>

0801db76 <sulp>:
 801db76:	b570      	push	{r4, r5, r6, lr}
 801db78:	4604      	mov	r4, r0
 801db7a:	460d      	mov	r5, r1
 801db7c:	ec45 4b10 	vmov	d0, r4, r5
 801db80:	4616      	mov	r6, r2
 801db82:	f7ff feb7 	bl	801d8f4 <__ulp>
 801db86:	ec51 0b10 	vmov	r0, r1, d0
 801db8a:	b17e      	cbz	r6, 801dbac <sulp+0x36>
 801db8c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801db90:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801db94:	2b00      	cmp	r3, #0
 801db96:	dd09      	ble.n	801dbac <sulp+0x36>
 801db98:	051b      	lsls	r3, r3, #20
 801db9a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801db9e:	2400      	movs	r4, #0
 801dba0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801dba4:	4622      	mov	r2, r4
 801dba6:	462b      	mov	r3, r5
 801dba8:	f7e2 fd3e 	bl	8000628 <__aeabi_dmul>
 801dbac:	bd70      	pop	{r4, r5, r6, pc}
	...

0801dbb0 <_strtod_l>:
 801dbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbb4:	ed2d 8b02 	vpush	{d8}
 801dbb8:	b09b      	sub	sp, #108	; 0x6c
 801dbba:	4604      	mov	r4, r0
 801dbbc:	9213      	str	r2, [sp, #76]	; 0x4c
 801dbbe:	2200      	movs	r2, #0
 801dbc0:	9216      	str	r2, [sp, #88]	; 0x58
 801dbc2:	460d      	mov	r5, r1
 801dbc4:	f04f 0800 	mov.w	r8, #0
 801dbc8:	f04f 0900 	mov.w	r9, #0
 801dbcc:	460a      	mov	r2, r1
 801dbce:	9215      	str	r2, [sp, #84]	; 0x54
 801dbd0:	7811      	ldrb	r1, [r2, #0]
 801dbd2:	292b      	cmp	r1, #43	; 0x2b
 801dbd4:	d04c      	beq.n	801dc70 <_strtod_l+0xc0>
 801dbd6:	d83a      	bhi.n	801dc4e <_strtod_l+0x9e>
 801dbd8:	290d      	cmp	r1, #13
 801dbda:	d834      	bhi.n	801dc46 <_strtod_l+0x96>
 801dbdc:	2908      	cmp	r1, #8
 801dbde:	d834      	bhi.n	801dc4a <_strtod_l+0x9a>
 801dbe0:	2900      	cmp	r1, #0
 801dbe2:	d03d      	beq.n	801dc60 <_strtod_l+0xb0>
 801dbe4:	2200      	movs	r2, #0
 801dbe6:	920a      	str	r2, [sp, #40]	; 0x28
 801dbe8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801dbea:	7832      	ldrb	r2, [r6, #0]
 801dbec:	2a30      	cmp	r2, #48	; 0x30
 801dbee:	f040 80b4 	bne.w	801dd5a <_strtod_l+0x1aa>
 801dbf2:	7872      	ldrb	r2, [r6, #1]
 801dbf4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801dbf8:	2a58      	cmp	r2, #88	; 0x58
 801dbfa:	d170      	bne.n	801dcde <_strtod_l+0x12e>
 801dbfc:	9302      	str	r3, [sp, #8]
 801dbfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dc00:	9301      	str	r3, [sp, #4]
 801dc02:	ab16      	add	r3, sp, #88	; 0x58
 801dc04:	9300      	str	r3, [sp, #0]
 801dc06:	4a8e      	ldr	r2, [pc, #568]	; (801de40 <_strtod_l+0x290>)
 801dc08:	ab17      	add	r3, sp, #92	; 0x5c
 801dc0a:	a915      	add	r1, sp, #84	; 0x54
 801dc0c:	4620      	mov	r0, r4
 801dc0e:	f001 fe5f 	bl	801f8d0 <__gethex>
 801dc12:	f010 070f 	ands.w	r7, r0, #15
 801dc16:	4605      	mov	r5, r0
 801dc18:	d005      	beq.n	801dc26 <_strtod_l+0x76>
 801dc1a:	2f06      	cmp	r7, #6
 801dc1c:	d12a      	bne.n	801dc74 <_strtod_l+0xc4>
 801dc1e:	3601      	adds	r6, #1
 801dc20:	2300      	movs	r3, #0
 801dc22:	9615      	str	r6, [sp, #84]	; 0x54
 801dc24:	930a      	str	r3, [sp, #40]	; 0x28
 801dc26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801dc28:	2b00      	cmp	r3, #0
 801dc2a:	f040 857f 	bne.w	801e72c <_strtod_l+0xb7c>
 801dc2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dc30:	b1db      	cbz	r3, 801dc6a <_strtod_l+0xba>
 801dc32:	4642      	mov	r2, r8
 801dc34:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801dc38:	ec43 2b10 	vmov	d0, r2, r3
 801dc3c:	b01b      	add	sp, #108	; 0x6c
 801dc3e:	ecbd 8b02 	vpop	{d8}
 801dc42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc46:	2920      	cmp	r1, #32
 801dc48:	d1cc      	bne.n	801dbe4 <_strtod_l+0x34>
 801dc4a:	3201      	adds	r2, #1
 801dc4c:	e7bf      	b.n	801dbce <_strtod_l+0x1e>
 801dc4e:	292d      	cmp	r1, #45	; 0x2d
 801dc50:	d1c8      	bne.n	801dbe4 <_strtod_l+0x34>
 801dc52:	2101      	movs	r1, #1
 801dc54:	910a      	str	r1, [sp, #40]	; 0x28
 801dc56:	1c51      	adds	r1, r2, #1
 801dc58:	9115      	str	r1, [sp, #84]	; 0x54
 801dc5a:	7852      	ldrb	r2, [r2, #1]
 801dc5c:	2a00      	cmp	r2, #0
 801dc5e:	d1c3      	bne.n	801dbe8 <_strtod_l+0x38>
 801dc60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801dc62:	9515      	str	r5, [sp, #84]	; 0x54
 801dc64:	2b00      	cmp	r3, #0
 801dc66:	f040 855f 	bne.w	801e728 <_strtod_l+0xb78>
 801dc6a:	4642      	mov	r2, r8
 801dc6c:	464b      	mov	r3, r9
 801dc6e:	e7e3      	b.n	801dc38 <_strtod_l+0x88>
 801dc70:	2100      	movs	r1, #0
 801dc72:	e7ef      	b.n	801dc54 <_strtod_l+0xa4>
 801dc74:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801dc76:	b13a      	cbz	r2, 801dc88 <_strtod_l+0xd8>
 801dc78:	2135      	movs	r1, #53	; 0x35
 801dc7a:	a818      	add	r0, sp, #96	; 0x60
 801dc7c:	f7ff ff37 	bl	801daee <__copybits>
 801dc80:	9916      	ldr	r1, [sp, #88]	; 0x58
 801dc82:	4620      	mov	r0, r4
 801dc84:	f7ff fb0a 	bl	801d29c <_Bfree>
 801dc88:	3f01      	subs	r7, #1
 801dc8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801dc8c:	2f04      	cmp	r7, #4
 801dc8e:	d806      	bhi.n	801dc9e <_strtod_l+0xee>
 801dc90:	e8df f007 	tbb	[pc, r7]
 801dc94:	201d0314 	.word	0x201d0314
 801dc98:	14          	.byte	0x14
 801dc99:	00          	.byte	0x00
 801dc9a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801dc9e:	05e9      	lsls	r1, r5, #23
 801dca0:	bf48      	it	mi
 801dca2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801dca6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801dcaa:	0d1b      	lsrs	r3, r3, #20
 801dcac:	051b      	lsls	r3, r3, #20
 801dcae:	2b00      	cmp	r3, #0
 801dcb0:	d1b9      	bne.n	801dc26 <_strtod_l+0x76>
 801dcb2:	f7fe fb99 	bl	801c3e8 <__errno>
 801dcb6:	2322      	movs	r3, #34	; 0x22
 801dcb8:	6003      	str	r3, [r0, #0]
 801dcba:	e7b4      	b.n	801dc26 <_strtod_l+0x76>
 801dcbc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 801dcc0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801dcc4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801dcc8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801dccc:	e7e7      	b.n	801dc9e <_strtod_l+0xee>
 801dcce:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801de48 <_strtod_l+0x298>
 801dcd2:	e7e4      	b.n	801dc9e <_strtod_l+0xee>
 801dcd4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801dcd8:	f04f 38ff 	mov.w	r8, #4294967295
 801dcdc:	e7df      	b.n	801dc9e <_strtod_l+0xee>
 801dcde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dce0:	1c5a      	adds	r2, r3, #1
 801dce2:	9215      	str	r2, [sp, #84]	; 0x54
 801dce4:	785b      	ldrb	r3, [r3, #1]
 801dce6:	2b30      	cmp	r3, #48	; 0x30
 801dce8:	d0f9      	beq.n	801dcde <_strtod_l+0x12e>
 801dcea:	2b00      	cmp	r3, #0
 801dcec:	d09b      	beq.n	801dc26 <_strtod_l+0x76>
 801dcee:	2301      	movs	r3, #1
 801dcf0:	f04f 0a00 	mov.w	sl, #0
 801dcf4:	9304      	str	r3, [sp, #16]
 801dcf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dcf8:	930b      	str	r3, [sp, #44]	; 0x2c
 801dcfa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801dcfe:	46d3      	mov	fp, sl
 801dd00:	220a      	movs	r2, #10
 801dd02:	9815      	ldr	r0, [sp, #84]	; 0x54
 801dd04:	7806      	ldrb	r6, [r0, #0]
 801dd06:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801dd0a:	b2d9      	uxtb	r1, r3
 801dd0c:	2909      	cmp	r1, #9
 801dd0e:	d926      	bls.n	801dd5e <_strtod_l+0x1ae>
 801dd10:	494c      	ldr	r1, [pc, #304]	; (801de44 <_strtod_l+0x294>)
 801dd12:	2201      	movs	r2, #1
 801dd14:	f7fe fa10 	bl	801c138 <strncmp>
 801dd18:	2800      	cmp	r0, #0
 801dd1a:	d030      	beq.n	801dd7e <_strtod_l+0x1ce>
 801dd1c:	2000      	movs	r0, #0
 801dd1e:	4632      	mov	r2, r6
 801dd20:	9005      	str	r0, [sp, #20]
 801dd22:	465e      	mov	r6, fp
 801dd24:	4603      	mov	r3, r0
 801dd26:	2a65      	cmp	r2, #101	; 0x65
 801dd28:	d001      	beq.n	801dd2e <_strtod_l+0x17e>
 801dd2a:	2a45      	cmp	r2, #69	; 0x45
 801dd2c:	d113      	bne.n	801dd56 <_strtod_l+0x1a6>
 801dd2e:	b91e      	cbnz	r6, 801dd38 <_strtod_l+0x188>
 801dd30:	9a04      	ldr	r2, [sp, #16]
 801dd32:	4302      	orrs	r2, r0
 801dd34:	d094      	beq.n	801dc60 <_strtod_l+0xb0>
 801dd36:	2600      	movs	r6, #0
 801dd38:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801dd3a:	1c6a      	adds	r2, r5, #1
 801dd3c:	9215      	str	r2, [sp, #84]	; 0x54
 801dd3e:	786a      	ldrb	r2, [r5, #1]
 801dd40:	2a2b      	cmp	r2, #43	; 0x2b
 801dd42:	d074      	beq.n	801de2e <_strtod_l+0x27e>
 801dd44:	2a2d      	cmp	r2, #45	; 0x2d
 801dd46:	d078      	beq.n	801de3a <_strtod_l+0x28a>
 801dd48:	f04f 0c00 	mov.w	ip, #0
 801dd4c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801dd50:	2909      	cmp	r1, #9
 801dd52:	d97f      	bls.n	801de54 <_strtod_l+0x2a4>
 801dd54:	9515      	str	r5, [sp, #84]	; 0x54
 801dd56:	2700      	movs	r7, #0
 801dd58:	e09e      	b.n	801de98 <_strtod_l+0x2e8>
 801dd5a:	2300      	movs	r3, #0
 801dd5c:	e7c8      	b.n	801dcf0 <_strtod_l+0x140>
 801dd5e:	f1bb 0f08 	cmp.w	fp, #8
 801dd62:	bfd8      	it	le
 801dd64:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801dd66:	f100 0001 	add.w	r0, r0, #1
 801dd6a:	bfda      	itte	le
 801dd6c:	fb02 3301 	mlale	r3, r2, r1, r3
 801dd70:	9309      	strle	r3, [sp, #36]	; 0x24
 801dd72:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801dd76:	f10b 0b01 	add.w	fp, fp, #1
 801dd7a:	9015      	str	r0, [sp, #84]	; 0x54
 801dd7c:	e7c1      	b.n	801dd02 <_strtod_l+0x152>
 801dd7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dd80:	1c5a      	adds	r2, r3, #1
 801dd82:	9215      	str	r2, [sp, #84]	; 0x54
 801dd84:	785a      	ldrb	r2, [r3, #1]
 801dd86:	f1bb 0f00 	cmp.w	fp, #0
 801dd8a:	d037      	beq.n	801ddfc <_strtod_l+0x24c>
 801dd8c:	9005      	str	r0, [sp, #20]
 801dd8e:	465e      	mov	r6, fp
 801dd90:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801dd94:	2b09      	cmp	r3, #9
 801dd96:	d912      	bls.n	801ddbe <_strtod_l+0x20e>
 801dd98:	2301      	movs	r3, #1
 801dd9a:	e7c4      	b.n	801dd26 <_strtod_l+0x176>
 801dd9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dd9e:	1c5a      	adds	r2, r3, #1
 801dda0:	9215      	str	r2, [sp, #84]	; 0x54
 801dda2:	785a      	ldrb	r2, [r3, #1]
 801dda4:	3001      	adds	r0, #1
 801dda6:	2a30      	cmp	r2, #48	; 0x30
 801dda8:	d0f8      	beq.n	801dd9c <_strtod_l+0x1ec>
 801ddaa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801ddae:	2b08      	cmp	r3, #8
 801ddb0:	f200 84c1 	bhi.w	801e736 <_strtod_l+0xb86>
 801ddb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ddb6:	9005      	str	r0, [sp, #20]
 801ddb8:	2000      	movs	r0, #0
 801ddba:	930b      	str	r3, [sp, #44]	; 0x2c
 801ddbc:	4606      	mov	r6, r0
 801ddbe:	3a30      	subs	r2, #48	; 0x30
 801ddc0:	f100 0301 	add.w	r3, r0, #1
 801ddc4:	d014      	beq.n	801ddf0 <_strtod_l+0x240>
 801ddc6:	9905      	ldr	r1, [sp, #20]
 801ddc8:	4419      	add	r1, r3
 801ddca:	9105      	str	r1, [sp, #20]
 801ddcc:	4633      	mov	r3, r6
 801ddce:	eb00 0c06 	add.w	ip, r0, r6
 801ddd2:	210a      	movs	r1, #10
 801ddd4:	4563      	cmp	r3, ip
 801ddd6:	d113      	bne.n	801de00 <_strtod_l+0x250>
 801ddd8:	1833      	adds	r3, r6, r0
 801ddda:	2b08      	cmp	r3, #8
 801dddc:	f106 0601 	add.w	r6, r6, #1
 801dde0:	4406      	add	r6, r0
 801dde2:	dc1a      	bgt.n	801de1a <_strtod_l+0x26a>
 801dde4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dde6:	230a      	movs	r3, #10
 801dde8:	fb03 2301 	mla	r3, r3, r1, r2
 801ddec:	9309      	str	r3, [sp, #36]	; 0x24
 801ddee:	2300      	movs	r3, #0
 801ddf0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801ddf2:	1c51      	adds	r1, r2, #1
 801ddf4:	9115      	str	r1, [sp, #84]	; 0x54
 801ddf6:	7852      	ldrb	r2, [r2, #1]
 801ddf8:	4618      	mov	r0, r3
 801ddfa:	e7c9      	b.n	801dd90 <_strtod_l+0x1e0>
 801ddfc:	4658      	mov	r0, fp
 801ddfe:	e7d2      	b.n	801dda6 <_strtod_l+0x1f6>
 801de00:	2b08      	cmp	r3, #8
 801de02:	f103 0301 	add.w	r3, r3, #1
 801de06:	dc03      	bgt.n	801de10 <_strtod_l+0x260>
 801de08:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801de0a:	434f      	muls	r7, r1
 801de0c:	9709      	str	r7, [sp, #36]	; 0x24
 801de0e:	e7e1      	b.n	801ddd4 <_strtod_l+0x224>
 801de10:	2b10      	cmp	r3, #16
 801de12:	bfd8      	it	le
 801de14:	fb01 fa0a 	mulle.w	sl, r1, sl
 801de18:	e7dc      	b.n	801ddd4 <_strtod_l+0x224>
 801de1a:	2e10      	cmp	r6, #16
 801de1c:	bfdc      	itt	le
 801de1e:	230a      	movle	r3, #10
 801de20:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801de24:	e7e3      	b.n	801ddee <_strtod_l+0x23e>
 801de26:	2300      	movs	r3, #0
 801de28:	9305      	str	r3, [sp, #20]
 801de2a:	2301      	movs	r3, #1
 801de2c:	e780      	b.n	801dd30 <_strtod_l+0x180>
 801de2e:	f04f 0c00 	mov.w	ip, #0
 801de32:	1caa      	adds	r2, r5, #2
 801de34:	9215      	str	r2, [sp, #84]	; 0x54
 801de36:	78aa      	ldrb	r2, [r5, #2]
 801de38:	e788      	b.n	801dd4c <_strtod_l+0x19c>
 801de3a:	f04f 0c01 	mov.w	ip, #1
 801de3e:	e7f8      	b.n	801de32 <_strtod_l+0x282>
 801de40:	08023250 	.word	0x08023250
 801de44:	0802324c 	.word	0x0802324c
 801de48:	7ff00000 	.word	0x7ff00000
 801de4c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801de4e:	1c51      	adds	r1, r2, #1
 801de50:	9115      	str	r1, [sp, #84]	; 0x54
 801de52:	7852      	ldrb	r2, [r2, #1]
 801de54:	2a30      	cmp	r2, #48	; 0x30
 801de56:	d0f9      	beq.n	801de4c <_strtod_l+0x29c>
 801de58:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801de5c:	2908      	cmp	r1, #8
 801de5e:	f63f af7a 	bhi.w	801dd56 <_strtod_l+0x1a6>
 801de62:	3a30      	subs	r2, #48	; 0x30
 801de64:	9208      	str	r2, [sp, #32]
 801de66:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801de68:	920c      	str	r2, [sp, #48]	; 0x30
 801de6a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801de6c:	1c57      	adds	r7, r2, #1
 801de6e:	9715      	str	r7, [sp, #84]	; 0x54
 801de70:	7852      	ldrb	r2, [r2, #1]
 801de72:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801de76:	f1be 0f09 	cmp.w	lr, #9
 801de7a:	d938      	bls.n	801deee <_strtod_l+0x33e>
 801de7c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801de7e:	1a7f      	subs	r7, r7, r1
 801de80:	2f08      	cmp	r7, #8
 801de82:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801de86:	dc03      	bgt.n	801de90 <_strtod_l+0x2e0>
 801de88:	9908      	ldr	r1, [sp, #32]
 801de8a:	428f      	cmp	r7, r1
 801de8c:	bfa8      	it	ge
 801de8e:	460f      	movge	r7, r1
 801de90:	f1bc 0f00 	cmp.w	ip, #0
 801de94:	d000      	beq.n	801de98 <_strtod_l+0x2e8>
 801de96:	427f      	negs	r7, r7
 801de98:	2e00      	cmp	r6, #0
 801de9a:	d14f      	bne.n	801df3c <_strtod_l+0x38c>
 801de9c:	9904      	ldr	r1, [sp, #16]
 801de9e:	4301      	orrs	r1, r0
 801dea0:	f47f aec1 	bne.w	801dc26 <_strtod_l+0x76>
 801dea4:	2b00      	cmp	r3, #0
 801dea6:	f47f aedb 	bne.w	801dc60 <_strtod_l+0xb0>
 801deaa:	2a69      	cmp	r2, #105	; 0x69
 801deac:	d029      	beq.n	801df02 <_strtod_l+0x352>
 801deae:	dc26      	bgt.n	801defe <_strtod_l+0x34e>
 801deb0:	2a49      	cmp	r2, #73	; 0x49
 801deb2:	d026      	beq.n	801df02 <_strtod_l+0x352>
 801deb4:	2a4e      	cmp	r2, #78	; 0x4e
 801deb6:	f47f aed3 	bne.w	801dc60 <_strtod_l+0xb0>
 801deba:	499b      	ldr	r1, [pc, #620]	; (801e128 <_strtod_l+0x578>)
 801debc:	a815      	add	r0, sp, #84	; 0x54
 801debe:	f001 ff47 	bl	801fd50 <__match>
 801dec2:	2800      	cmp	r0, #0
 801dec4:	f43f aecc 	beq.w	801dc60 <_strtod_l+0xb0>
 801dec8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801deca:	781b      	ldrb	r3, [r3, #0]
 801decc:	2b28      	cmp	r3, #40	; 0x28
 801dece:	d12f      	bne.n	801df30 <_strtod_l+0x380>
 801ded0:	4996      	ldr	r1, [pc, #600]	; (801e12c <_strtod_l+0x57c>)
 801ded2:	aa18      	add	r2, sp, #96	; 0x60
 801ded4:	a815      	add	r0, sp, #84	; 0x54
 801ded6:	f001 ff4f 	bl	801fd78 <__hexnan>
 801deda:	2805      	cmp	r0, #5
 801dedc:	d128      	bne.n	801df30 <_strtod_l+0x380>
 801dede:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801dee0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801dee4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801dee8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801deec:	e69b      	b.n	801dc26 <_strtod_l+0x76>
 801deee:	9f08      	ldr	r7, [sp, #32]
 801def0:	210a      	movs	r1, #10
 801def2:	fb01 2107 	mla	r1, r1, r7, r2
 801def6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801defa:	9208      	str	r2, [sp, #32]
 801defc:	e7b5      	b.n	801de6a <_strtod_l+0x2ba>
 801defe:	2a6e      	cmp	r2, #110	; 0x6e
 801df00:	e7d9      	b.n	801deb6 <_strtod_l+0x306>
 801df02:	498b      	ldr	r1, [pc, #556]	; (801e130 <_strtod_l+0x580>)
 801df04:	a815      	add	r0, sp, #84	; 0x54
 801df06:	f001 ff23 	bl	801fd50 <__match>
 801df0a:	2800      	cmp	r0, #0
 801df0c:	f43f aea8 	beq.w	801dc60 <_strtod_l+0xb0>
 801df10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801df12:	4988      	ldr	r1, [pc, #544]	; (801e134 <_strtod_l+0x584>)
 801df14:	3b01      	subs	r3, #1
 801df16:	a815      	add	r0, sp, #84	; 0x54
 801df18:	9315      	str	r3, [sp, #84]	; 0x54
 801df1a:	f001 ff19 	bl	801fd50 <__match>
 801df1e:	b910      	cbnz	r0, 801df26 <_strtod_l+0x376>
 801df20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801df22:	3301      	adds	r3, #1
 801df24:	9315      	str	r3, [sp, #84]	; 0x54
 801df26:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801e144 <_strtod_l+0x594>
 801df2a:	f04f 0800 	mov.w	r8, #0
 801df2e:	e67a      	b.n	801dc26 <_strtod_l+0x76>
 801df30:	4881      	ldr	r0, [pc, #516]	; (801e138 <_strtod_l+0x588>)
 801df32:	f001 fc5d 	bl	801f7f0 <nan>
 801df36:	ec59 8b10 	vmov	r8, r9, d0
 801df3a:	e674      	b.n	801dc26 <_strtod_l+0x76>
 801df3c:	9b05      	ldr	r3, [sp, #20]
 801df3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801df40:	1afb      	subs	r3, r7, r3
 801df42:	f1bb 0f00 	cmp.w	fp, #0
 801df46:	bf08      	it	eq
 801df48:	46b3      	moveq	fp, r6
 801df4a:	2e10      	cmp	r6, #16
 801df4c:	9308      	str	r3, [sp, #32]
 801df4e:	4635      	mov	r5, r6
 801df50:	bfa8      	it	ge
 801df52:	2510      	movge	r5, #16
 801df54:	f7e2 faee 	bl	8000534 <__aeabi_ui2d>
 801df58:	2e09      	cmp	r6, #9
 801df5a:	4680      	mov	r8, r0
 801df5c:	4689      	mov	r9, r1
 801df5e:	dd13      	ble.n	801df88 <_strtod_l+0x3d8>
 801df60:	4b76      	ldr	r3, [pc, #472]	; (801e13c <_strtod_l+0x58c>)
 801df62:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801df66:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801df6a:	f7e2 fb5d 	bl	8000628 <__aeabi_dmul>
 801df6e:	4680      	mov	r8, r0
 801df70:	4650      	mov	r0, sl
 801df72:	4689      	mov	r9, r1
 801df74:	f7e2 fade 	bl	8000534 <__aeabi_ui2d>
 801df78:	4602      	mov	r2, r0
 801df7a:	460b      	mov	r3, r1
 801df7c:	4640      	mov	r0, r8
 801df7e:	4649      	mov	r1, r9
 801df80:	f7e2 f99c 	bl	80002bc <__adddf3>
 801df84:	4680      	mov	r8, r0
 801df86:	4689      	mov	r9, r1
 801df88:	2e0f      	cmp	r6, #15
 801df8a:	dc38      	bgt.n	801dffe <_strtod_l+0x44e>
 801df8c:	9b08      	ldr	r3, [sp, #32]
 801df8e:	2b00      	cmp	r3, #0
 801df90:	f43f ae49 	beq.w	801dc26 <_strtod_l+0x76>
 801df94:	dd24      	ble.n	801dfe0 <_strtod_l+0x430>
 801df96:	2b16      	cmp	r3, #22
 801df98:	dc0b      	bgt.n	801dfb2 <_strtod_l+0x402>
 801df9a:	4968      	ldr	r1, [pc, #416]	; (801e13c <_strtod_l+0x58c>)
 801df9c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801dfa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801dfa4:	4642      	mov	r2, r8
 801dfa6:	464b      	mov	r3, r9
 801dfa8:	f7e2 fb3e 	bl	8000628 <__aeabi_dmul>
 801dfac:	4680      	mov	r8, r0
 801dfae:	4689      	mov	r9, r1
 801dfb0:	e639      	b.n	801dc26 <_strtod_l+0x76>
 801dfb2:	9a08      	ldr	r2, [sp, #32]
 801dfb4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 801dfb8:	4293      	cmp	r3, r2
 801dfba:	db20      	blt.n	801dffe <_strtod_l+0x44e>
 801dfbc:	4c5f      	ldr	r4, [pc, #380]	; (801e13c <_strtod_l+0x58c>)
 801dfbe:	f1c6 060f 	rsb	r6, r6, #15
 801dfc2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801dfc6:	4642      	mov	r2, r8
 801dfc8:	464b      	mov	r3, r9
 801dfca:	e9d1 0100 	ldrd	r0, r1, [r1]
 801dfce:	f7e2 fb2b 	bl	8000628 <__aeabi_dmul>
 801dfd2:	9b08      	ldr	r3, [sp, #32]
 801dfd4:	1b9e      	subs	r6, r3, r6
 801dfd6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801dfda:	e9d4 2300 	ldrd	r2, r3, [r4]
 801dfde:	e7e3      	b.n	801dfa8 <_strtod_l+0x3f8>
 801dfe0:	9b08      	ldr	r3, [sp, #32]
 801dfe2:	3316      	adds	r3, #22
 801dfe4:	db0b      	blt.n	801dffe <_strtod_l+0x44e>
 801dfe6:	9b05      	ldr	r3, [sp, #20]
 801dfe8:	1bdf      	subs	r7, r3, r7
 801dfea:	4b54      	ldr	r3, [pc, #336]	; (801e13c <_strtod_l+0x58c>)
 801dfec:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801dff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801dff4:	4640      	mov	r0, r8
 801dff6:	4649      	mov	r1, r9
 801dff8:	f7e2 fc40 	bl	800087c <__aeabi_ddiv>
 801dffc:	e7d6      	b.n	801dfac <_strtod_l+0x3fc>
 801dffe:	9b08      	ldr	r3, [sp, #32]
 801e000:	1b75      	subs	r5, r6, r5
 801e002:	441d      	add	r5, r3
 801e004:	2d00      	cmp	r5, #0
 801e006:	dd70      	ble.n	801e0ea <_strtod_l+0x53a>
 801e008:	f015 030f 	ands.w	r3, r5, #15
 801e00c:	d00a      	beq.n	801e024 <_strtod_l+0x474>
 801e00e:	494b      	ldr	r1, [pc, #300]	; (801e13c <_strtod_l+0x58c>)
 801e010:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801e014:	4642      	mov	r2, r8
 801e016:	464b      	mov	r3, r9
 801e018:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e01c:	f7e2 fb04 	bl	8000628 <__aeabi_dmul>
 801e020:	4680      	mov	r8, r0
 801e022:	4689      	mov	r9, r1
 801e024:	f035 050f 	bics.w	r5, r5, #15
 801e028:	d04d      	beq.n	801e0c6 <_strtod_l+0x516>
 801e02a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801e02e:	dd22      	ble.n	801e076 <_strtod_l+0x4c6>
 801e030:	2500      	movs	r5, #0
 801e032:	46ab      	mov	fp, r5
 801e034:	9509      	str	r5, [sp, #36]	; 0x24
 801e036:	9505      	str	r5, [sp, #20]
 801e038:	2322      	movs	r3, #34	; 0x22
 801e03a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801e144 <_strtod_l+0x594>
 801e03e:	6023      	str	r3, [r4, #0]
 801e040:	f04f 0800 	mov.w	r8, #0
 801e044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e046:	2b00      	cmp	r3, #0
 801e048:	f43f aded 	beq.w	801dc26 <_strtod_l+0x76>
 801e04c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e04e:	4620      	mov	r0, r4
 801e050:	f7ff f924 	bl	801d29c <_Bfree>
 801e054:	9905      	ldr	r1, [sp, #20]
 801e056:	4620      	mov	r0, r4
 801e058:	f7ff f920 	bl	801d29c <_Bfree>
 801e05c:	4659      	mov	r1, fp
 801e05e:	4620      	mov	r0, r4
 801e060:	f7ff f91c 	bl	801d29c <_Bfree>
 801e064:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e066:	4620      	mov	r0, r4
 801e068:	f7ff f918 	bl	801d29c <_Bfree>
 801e06c:	4629      	mov	r1, r5
 801e06e:	4620      	mov	r0, r4
 801e070:	f7ff f914 	bl	801d29c <_Bfree>
 801e074:	e5d7      	b.n	801dc26 <_strtod_l+0x76>
 801e076:	4b32      	ldr	r3, [pc, #200]	; (801e140 <_strtod_l+0x590>)
 801e078:	9304      	str	r3, [sp, #16]
 801e07a:	2300      	movs	r3, #0
 801e07c:	112d      	asrs	r5, r5, #4
 801e07e:	4640      	mov	r0, r8
 801e080:	4649      	mov	r1, r9
 801e082:	469a      	mov	sl, r3
 801e084:	2d01      	cmp	r5, #1
 801e086:	dc21      	bgt.n	801e0cc <_strtod_l+0x51c>
 801e088:	b10b      	cbz	r3, 801e08e <_strtod_l+0x4de>
 801e08a:	4680      	mov	r8, r0
 801e08c:	4689      	mov	r9, r1
 801e08e:	492c      	ldr	r1, [pc, #176]	; (801e140 <_strtod_l+0x590>)
 801e090:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801e094:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801e098:	4642      	mov	r2, r8
 801e09a:	464b      	mov	r3, r9
 801e09c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e0a0:	f7e2 fac2 	bl	8000628 <__aeabi_dmul>
 801e0a4:	4b27      	ldr	r3, [pc, #156]	; (801e144 <_strtod_l+0x594>)
 801e0a6:	460a      	mov	r2, r1
 801e0a8:	400b      	ands	r3, r1
 801e0aa:	4927      	ldr	r1, [pc, #156]	; (801e148 <_strtod_l+0x598>)
 801e0ac:	428b      	cmp	r3, r1
 801e0ae:	4680      	mov	r8, r0
 801e0b0:	d8be      	bhi.n	801e030 <_strtod_l+0x480>
 801e0b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801e0b6:	428b      	cmp	r3, r1
 801e0b8:	bf86      	itte	hi
 801e0ba:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801e14c <_strtod_l+0x59c>
 801e0be:	f04f 38ff 	movhi.w	r8, #4294967295
 801e0c2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801e0c6:	2300      	movs	r3, #0
 801e0c8:	9304      	str	r3, [sp, #16]
 801e0ca:	e07b      	b.n	801e1c4 <_strtod_l+0x614>
 801e0cc:	07ea      	lsls	r2, r5, #31
 801e0ce:	d505      	bpl.n	801e0dc <_strtod_l+0x52c>
 801e0d0:	9b04      	ldr	r3, [sp, #16]
 801e0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0d6:	f7e2 faa7 	bl	8000628 <__aeabi_dmul>
 801e0da:	2301      	movs	r3, #1
 801e0dc:	9a04      	ldr	r2, [sp, #16]
 801e0de:	3208      	adds	r2, #8
 801e0e0:	f10a 0a01 	add.w	sl, sl, #1
 801e0e4:	106d      	asrs	r5, r5, #1
 801e0e6:	9204      	str	r2, [sp, #16]
 801e0e8:	e7cc      	b.n	801e084 <_strtod_l+0x4d4>
 801e0ea:	d0ec      	beq.n	801e0c6 <_strtod_l+0x516>
 801e0ec:	426d      	negs	r5, r5
 801e0ee:	f015 020f 	ands.w	r2, r5, #15
 801e0f2:	d00a      	beq.n	801e10a <_strtod_l+0x55a>
 801e0f4:	4b11      	ldr	r3, [pc, #68]	; (801e13c <_strtod_l+0x58c>)
 801e0f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e0fa:	4640      	mov	r0, r8
 801e0fc:	4649      	mov	r1, r9
 801e0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e102:	f7e2 fbbb 	bl	800087c <__aeabi_ddiv>
 801e106:	4680      	mov	r8, r0
 801e108:	4689      	mov	r9, r1
 801e10a:	112d      	asrs	r5, r5, #4
 801e10c:	d0db      	beq.n	801e0c6 <_strtod_l+0x516>
 801e10e:	2d1f      	cmp	r5, #31
 801e110:	dd1e      	ble.n	801e150 <_strtod_l+0x5a0>
 801e112:	2500      	movs	r5, #0
 801e114:	46ab      	mov	fp, r5
 801e116:	9509      	str	r5, [sp, #36]	; 0x24
 801e118:	9505      	str	r5, [sp, #20]
 801e11a:	2322      	movs	r3, #34	; 0x22
 801e11c:	f04f 0800 	mov.w	r8, #0
 801e120:	f04f 0900 	mov.w	r9, #0
 801e124:	6023      	str	r3, [r4, #0]
 801e126:	e78d      	b.n	801e044 <_strtod_l+0x494>
 801e128:	08022fe5 	.word	0x08022fe5
 801e12c:	08023264 	.word	0x08023264
 801e130:	08022fdd 	.word	0x08022fdd
 801e134:	08023083 	.word	0x08023083
 801e138:	08022fd7 	.word	0x08022fd7
 801e13c:	08023178 	.word	0x08023178
 801e140:	08023150 	.word	0x08023150
 801e144:	7ff00000 	.word	0x7ff00000
 801e148:	7ca00000 	.word	0x7ca00000
 801e14c:	7fefffff 	.word	0x7fefffff
 801e150:	f015 0310 	ands.w	r3, r5, #16
 801e154:	bf18      	it	ne
 801e156:	236a      	movne	r3, #106	; 0x6a
 801e158:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801e4fc <_strtod_l+0x94c>
 801e15c:	9304      	str	r3, [sp, #16]
 801e15e:	4640      	mov	r0, r8
 801e160:	4649      	mov	r1, r9
 801e162:	2300      	movs	r3, #0
 801e164:	07ea      	lsls	r2, r5, #31
 801e166:	d504      	bpl.n	801e172 <_strtod_l+0x5c2>
 801e168:	e9da 2300 	ldrd	r2, r3, [sl]
 801e16c:	f7e2 fa5c 	bl	8000628 <__aeabi_dmul>
 801e170:	2301      	movs	r3, #1
 801e172:	106d      	asrs	r5, r5, #1
 801e174:	f10a 0a08 	add.w	sl, sl, #8
 801e178:	d1f4      	bne.n	801e164 <_strtod_l+0x5b4>
 801e17a:	b10b      	cbz	r3, 801e180 <_strtod_l+0x5d0>
 801e17c:	4680      	mov	r8, r0
 801e17e:	4689      	mov	r9, r1
 801e180:	9b04      	ldr	r3, [sp, #16]
 801e182:	b1bb      	cbz	r3, 801e1b4 <_strtod_l+0x604>
 801e184:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801e188:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801e18c:	2b00      	cmp	r3, #0
 801e18e:	4649      	mov	r1, r9
 801e190:	dd10      	ble.n	801e1b4 <_strtod_l+0x604>
 801e192:	2b1f      	cmp	r3, #31
 801e194:	f340 811e 	ble.w	801e3d4 <_strtod_l+0x824>
 801e198:	2b34      	cmp	r3, #52	; 0x34
 801e19a:	bfde      	ittt	le
 801e19c:	f04f 33ff 	movle.w	r3, #4294967295
 801e1a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801e1a4:	4093      	lslle	r3, r2
 801e1a6:	f04f 0800 	mov.w	r8, #0
 801e1aa:	bfcc      	ite	gt
 801e1ac:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801e1b0:	ea03 0901 	andle.w	r9, r3, r1
 801e1b4:	2200      	movs	r2, #0
 801e1b6:	2300      	movs	r3, #0
 801e1b8:	4640      	mov	r0, r8
 801e1ba:	4649      	mov	r1, r9
 801e1bc:	f7e2 fc9c 	bl	8000af8 <__aeabi_dcmpeq>
 801e1c0:	2800      	cmp	r0, #0
 801e1c2:	d1a6      	bne.n	801e112 <_strtod_l+0x562>
 801e1c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e1c6:	9300      	str	r3, [sp, #0]
 801e1c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e1ca:	4633      	mov	r3, r6
 801e1cc:	465a      	mov	r2, fp
 801e1ce:	4620      	mov	r0, r4
 801e1d0:	f7ff f8cc 	bl	801d36c <__s2b>
 801e1d4:	9009      	str	r0, [sp, #36]	; 0x24
 801e1d6:	2800      	cmp	r0, #0
 801e1d8:	f43f af2a 	beq.w	801e030 <_strtod_l+0x480>
 801e1dc:	9a08      	ldr	r2, [sp, #32]
 801e1de:	9b05      	ldr	r3, [sp, #20]
 801e1e0:	2a00      	cmp	r2, #0
 801e1e2:	eba3 0307 	sub.w	r3, r3, r7
 801e1e6:	bfa8      	it	ge
 801e1e8:	2300      	movge	r3, #0
 801e1ea:	930c      	str	r3, [sp, #48]	; 0x30
 801e1ec:	2500      	movs	r5, #0
 801e1ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801e1f2:	9312      	str	r3, [sp, #72]	; 0x48
 801e1f4:	46ab      	mov	fp, r5
 801e1f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e1f8:	4620      	mov	r0, r4
 801e1fa:	6859      	ldr	r1, [r3, #4]
 801e1fc:	f7ff f80e 	bl	801d21c <_Balloc>
 801e200:	9005      	str	r0, [sp, #20]
 801e202:	2800      	cmp	r0, #0
 801e204:	f43f af18 	beq.w	801e038 <_strtod_l+0x488>
 801e208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e20a:	691a      	ldr	r2, [r3, #16]
 801e20c:	3202      	adds	r2, #2
 801e20e:	f103 010c 	add.w	r1, r3, #12
 801e212:	0092      	lsls	r2, r2, #2
 801e214:	300c      	adds	r0, #12
 801e216:	f7fe f91c 	bl	801c452 <memcpy>
 801e21a:	ec49 8b10 	vmov	d0, r8, r9
 801e21e:	aa18      	add	r2, sp, #96	; 0x60
 801e220:	a917      	add	r1, sp, #92	; 0x5c
 801e222:	4620      	mov	r0, r4
 801e224:	f7ff fbd6 	bl	801d9d4 <__d2b>
 801e228:	ec49 8b18 	vmov	d8, r8, r9
 801e22c:	9016      	str	r0, [sp, #88]	; 0x58
 801e22e:	2800      	cmp	r0, #0
 801e230:	f43f af02 	beq.w	801e038 <_strtod_l+0x488>
 801e234:	2101      	movs	r1, #1
 801e236:	4620      	mov	r0, r4
 801e238:	f7ff f930 	bl	801d49c <__i2b>
 801e23c:	4683      	mov	fp, r0
 801e23e:	2800      	cmp	r0, #0
 801e240:	f43f aefa 	beq.w	801e038 <_strtod_l+0x488>
 801e244:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801e246:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e248:	2e00      	cmp	r6, #0
 801e24a:	bfab      	itete	ge
 801e24c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801e24e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 801e250:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801e252:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801e256:	bfac      	ite	ge
 801e258:	eb06 0a03 	addge.w	sl, r6, r3
 801e25c:	1b9f      	sublt	r7, r3, r6
 801e25e:	9b04      	ldr	r3, [sp, #16]
 801e260:	1af6      	subs	r6, r6, r3
 801e262:	4416      	add	r6, r2
 801e264:	4ba0      	ldr	r3, [pc, #640]	; (801e4e8 <_strtod_l+0x938>)
 801e266:	3e01      	subs	r6, #1
 801e268:	429e      	cmp	r6, r3
 801e26a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801e26e:	f280 80c4 	bge.w	801e3fa <_strtod_l+0x84a>
 801e272:	1b9b      	subs	r3, r3, r6
 801e274:	2b1f      	cmp	r3, #31
 801e276:	eba2 0203 	sub.w	r2, r2, r3
 801e27a:	f04f 0101 	mov.w	r1, #1
 801e27e:	f300 80b0 	bgt.w	801e3e2 <_strtod_l+0x832>
 801e282:	fa01 f303 	lsl.w	r3, r1, r3
 801e286:	930e      	str	r3, [sp, #56]	; 0x38
 801e288:	2300      	movs	r3, #0
 801e28a:	930d      	str	r3, [sp, #52]	; 0x34
 801e28c:	eb0a 0602 	add.w	r6, sl, r2
 801e290:	9b04      	ldr	r3, [sp, #16]
 801e292:	45b2      	cmp	sl, r6
 801e294:	4417      	add	r7, r2
 801e296:	441f      	add	r7, r3
 801e298:	4653      	mov	r3, sl
 801e29a:	bfa8      	it	ge
 801e29c:	4633      	movge	r3, r6
 801e29e:	42bb      	cmp	r3, r7
 801e2a0:	bfa8      	it	ge
 801e2a2:	463b      	movge	r3, r7
 801e2a4:	2b00      	cmp	r3, #0
 801e2a6:	bfc2      	ittt	gt
 801e2a8:	1af6      	subgt	r6, r6, r3
 801e2aa:	1aff      	subgt	r7, r7, r3
 801e2ac:	ebaa 0a03 	subgt.w	sl, sl, r3
 801e2b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e2b2:	2b00      	cmp	r3, #0
 801e2b4:	dd17      	ble.n	801e2e6 <_strtod_l+0x736>
 801e2b6:	4659      	mov	r1, fp
 801e2b8:	461a      	mov	r2, r3
 801e2ba:	4620      	mov	r0, r4
 801e2bc:	f7ff f9ae 	bl	801d61c <__pow5mult>
 801e2c0:	4683      	mov	fp, r0
 801e2c2:	2800      	cmp	r0, #0
 801e2c4:	f43f aeb8 	beq.w	801e038 <_strtod_l+0x488>
 801e2c8:	4601      	mov	r1, r0
 801e2ca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801e2cc:	4620      	mov	r0, r4
 801e2ce:	f7ff f8fb 	bl	801d4c8 <__multiply>
 801e2d2:	900b      	str	r0, [sp, #44]	; 0x2c
 801e2d4:	2800      	cmp	r0, #0
 801e2d6:	f43f aeaf 	beq.w	801e038 <_strtod_l+0x488>
 801e2da:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e2dc:	4620      	mov	r0, r4
 801e2de:	f7fe ffdd 	bl	801d29c <_Bfree>
 801e2e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e2e4:	9316      	str	r3, [sp, #88]	; 0x58
 801e2e6:	2e00      	cmp	r6, #0
 801e2e8:	f300 808c 	bgt.w	801e404 <_strtod_l+0x854>
 801e2ec:	9b08      	ldr	r3, [sp, #32]
 801e2ee:	2b00      	cmp	r3, #0
 801e2f0:	dd08      	ble.n	801e304 <_strtod_l+0x754>
 801e2f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e2f4:	9905      	ldr	r1, [sp, #20]
 801e2f6:	4620      	mov	r0, r4
 801e2f8:	f7ff f990 	bl	801d61c <__pow5mult>
 801e2fc:	9005      	str	r0, [sp, #20]
 801e2fe:	2800      	cmp	r0, #0
 801e300:	f43f ae9a 	beq.w	801e038 <_strtod_l+0x488>
 801e304:	2f00      	cmp	r7, #0
 801e306:	dd08      	ble.n	801e31a <_strtod_l+0x76a>
 801e308:	9905      	ldr	r1, [sp, #20]
 801e30a:	463a      	mov	r2, r7
 801e30c:	4620      	mov	r0, r4
 801e30e:	f7ff f9df 	bl	801d6d0 <__lshift>
 801e312:	9005      	str	r0, [sp, #20]
 801e314:	2800      	cmp	r0, #0
 801e316:	f43f ae8f 	beq.w	801e038 <_strtod_l+0x488>
 801e31a:	f1ba 0f00 	cmp.w	sl, #0
 801e31e:	dd08      	ble.n	801e332 <_strtod_l+0x782>
 801e320:	4659      	mov	r1, fp
 801e322:	4652      	mov	r2, sl
 801e324:	4620      	mov	r0, r4
 801e326:	f7ff f9d3 	bl	801d6d0 <__lshift>
 801e32a:	4683      	mov	fp, r0
 801e32c:	2800      	cmp	r0, #0
 801e32e:	f43f ae83 	beq.w	801e038 <_strtod_l+0x488>
 801e332:	9a05      	ldr	r2, [sp, #20]
 801e334:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e336:	4620      	mov	r0, r4
 801e338:	f7ff fa52 	bl	801d7e0 <__mdiff>
 801e33c:	4605      	mov	r5, r0
 801e33e:	2800      	cmp	r0, #0
 801e340:	f43f ae7a 	beq.w	801e038 <_strtod_l+0x488>
 801e344:	68c3      	ldr	r3, [r0, #12]
 801e346:	930b      	str	r3, [sp, #44]	; 0x2c
 801e348:	2300      	movs	r3, #0
 801e34a:	60c3      	str	r3, [r0, #12]
 801e34c:	4659      	mov	r1, fp
 801e34e:	f7ff fa2b 	bl	801d7a8 <__mcmp>
 801e352:	2800      	cmp	r0, #0
 801e354:	da60      	bge.n	801e418 <_strtod_l+0x868>
 801e356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e358:	ea53 0308 	orrs.w	r3, r3, r8
 801e35c:	f040 8084 	bne.w	801e468 <_strtod_l+0x8b8>
 801e360:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e364:	2b00      	cmp	r3, #0
 801e366:	d17f      	bne.n	801e468 <_strtod_l+0x8b8>
 801e368:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e36c:	0d1b      	lsrs	r3, r3, #20
 801e36e:	051b      	lsls	r3, r3, #20
 801e370:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801e374:	d978      	bls.n	801e468 <_strtod_l+0x8b8>
 801e376:	696b      	ldr	r3, [r5, #20]
 801e378:	b913      	cbnz	r3, 801e380 <_strtod_l+0x7d0>
 801e37a:	692b      	ldr	r3, [r5, #16]
 801e37c:	2b01      	cmp	r3, #1
 801e37e:	dd73      	ble.n	801e468 <_strtod_l+0x8b8>
 801e380:	4629      	mov	r1, r5
 801e382:	2201      	movs	r2, #1
 801e384:	4620      	mov	r0, r4
 801e386:	f7ff f9a3 	bl	801d6d0 <__lshift>
 801e38a:	4659      	mov	r1, fp
 801e38c:	4605      	mov	r5, r0
 801e38e:	f7ff fa0b 	bl	801d7a8 <__mcmp>
 801e392:	2800      	cmp	r0, #0
 801e394:	dd68      	ble.n	801e468 <_strtod_l+0x8b8>
 801e396:	9904      	ldr	r1, [sp, #16]
 801e398:	4a54      	ldr	r2, [pc, #336]	; (801e4ec <_strtod_l+0x93c>)
 801e39a:	464b      	mov	r3, r9
 801e39c:	2900      	cmp	r1, #0
 801e39e:	f000 8084 	beq.w	801e4aa <_strtod_l+0x8fa>
 801e3a2:	ea02 0109 	and.w	r1, r2, r9
 801e3a6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801e3aa:	dc7e      	bgt.n	801e4aa <_strtod_l+0x8fa>
 801e3ac:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801e3b0:	f77f aeb3 	ble.w	801e11a <_strtod_l+0x56a>
 801e3b4:	4b4e      	ldr	r3, [pc, #312]	; (801e4f0 <_strtod_l+0x940>)
 801e3b6:	4640      	mov	r0, r8
 801e3b8:	4649      	mov	r1, r9
 801e3ba:	2200      	movs	r2, #0
 801e3bc:	f7e2 f934 	bl	8000628 <__aeabi_dmul>
 801e3c0:	4b4a      	ldr	r3, [pc, #296]	; (801e4ec <_strtod_l+0x93c>)
 801e3c2:	400b      	ands	r3, r1
 801e3c4:	4680      	mov	r8, r0
 801e3c6:	4689      	mov	r9, r1
 801e3c8:	2b00      	cmp	r3, #0
 801e3ca:	f47f ae3f 	bne.w	801e04c <_strtod_l+0x49c>
 801e3ce:	2322      	movs	r3, #34	; 0x22
 801e3d0:	6023      	str	r3, [r4, #0]
 801e3d2:	e63b      	b.n	801e04c <_strtod_l+0x49c>
 801e3d4:	f04f 32ff 	mov.w	r2, #4294967295
 801e3d8:	fa02 f303 	lsl.w	r3, r2, r3
 801e3dc:	ea03 0808 	and.w	r8, r3, r8
 801e3e0:	e6e8      	b.n	801e1b4 <_strtod_l+0x604>
 801e3e2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801e3e6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801e3ea:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801e3ee:	36e2      	adds	r6, #226	; 0xe2
 801e3f0:	fa01 f306 	lsl.w	r3, r1, r6
 801e3f4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 801e3f8:	e748      	b.n	801e28c <_strtod_l+0x6dc>
 801e3fa:	2100      	movs	r1, #0
 801e3fc:	2301      	movs	r3, #1
 801e3fe:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801e402:	e743      	b.n	801e28c <_strtod_l+0x6dc>
 801e404:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e406:	4632      	mov	r2, r6
 801e408:	4620      	mov	r0, r4
 801e40a:	f7ff f961 	bl	801d6d0 <__lshift>
 801e40e:	9016      	str	r0, [sp, #88]	; 0x58
 801e410:	2800      	cmp	r0, #0
 801e412:	f47f af6b 	bne.w	801e2ec <_strtod_l+0x73c>
 801e416:	e60f      	b.n	801e038 <_strtod_l+0x488>
 801e418:	46ca      	mov	sl, r9
 801e41a:	d171      	bne.n	801e500 <_strtod_l+0x950>
 801e41c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e41e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e422:	b352      	cbz	r2, 801e47a <_strtod_l+0x8ca>
 801e424:	4a33      	ldr	r2, [pc, #204]	; (801e4f4 <_strtod_l+0x944>)
 801e426:	4293      	cmp	r3, r2
 801e428:	d12a      	bne.n	801e480 <_strtod_l+0x8d0>
 801e42a:	9b04      	ldr	r3, [sp, #16]
 801e42c:	4641      	mov	r1, r8
 801e42e:	b1fb      	cbz	r3, 801e470 <_strtod_l+0x8c0>
 801e430:	4b2e      	ldr	r3, [pc, #184]	; (801e4ec <_strtod_l+0x93c>)
 801e432:	ea09 0303 	and.w	r3, r9, r3
 801e436:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801e43a:	f04f 32ff 	mov.w	r2, #4294967295
 801e43e:	d81a      	bhi.n	801e476 <_strtod_l+0x8c6>
 801e440:	0d1b      	lsrs	r3, r3, #20
 801e442:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801e446:	fa02 f303 	lsl.w	r3, r2, r3
 801e44a:	4299      	cmp	r1, r3
 801e44c:	d118      	bne.n	801e480 <_strtod_l+0x8d0>
 801e44e:	4b2a      	ldr	r3, [pc, #168]	; (801e4f8 <_strtod_l+0x948>)
 801e450:	459a      	cmp	sl, r3
 801e452:	d102      	bne.n	801e45a <_strtod_l+0x8aa>
 801e454:	3101      	adds	r1, #1
 801e456:	f43f adef 	beq.w	801e038 <_strtod_l+0x488>
 801e45a:	4b24      	ldr	r3, [pc, #144]	; (801e4ec <_strtod_l+0x93c>)
 801e45c:	ea0a 0303 	and.w	r3, sl, r3
 801e460:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801e464:	f04f 0800 	mov.w	r8, #0
 801e468:	9b04      	ldr	r3, [sp, #16]
 801e46a:	2b00      	cmp	r3, #0
 801e46c:	d1a2      	bne.n	801e3b4 <_strtod_l+0x804>
 801e46e:	e5ed      	b.n	801e04c <_strtod_l+0x49c>
 801e470:	f04f 33ff 	mov.w	r3, #4294967295
 801e474:	e7e9      	b.n	801e44a <_strtod_l+0x89a>
 801e476:	4613      	mov	r3, r2
 801e478:	e7e7      	b.n	801e44a <_strtod_l+0x89a>
 801e47a:	ea53 0308 	orrs.w	r3, r3, r8
 801e47e:	d08a      	beq.n	801e396 <_strtod_l+0x7e6>
 801e480:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e482:	b1e3      	cbz	r3, 801e4be <_strtod_l+0x90e>
 801e484:	ea13 0f0a 	tst.w	r3, sl
 801e488:	d0ee      	beq.n	801e468 <_strtod_l+0x8b8>
 801e48a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e48c:	9a04      	ldr	r2, [sp, #16]
 801e48e:	4640      	mov	r0, r8
 801e490:	4649      	mov	r1, r9
 801e492:	b1c3      	cbz	r3, 801e4c6 <_strtod_l+0x916>
 801e494:	f7ff fb6f 	bl	801db76 <sulp>
 801e498:	4602      	mov	r2, r0
 801e49a:	460b      	mov	r3, r1
 801e49c:	ec51 0b18 	vmov	r0, r1, d8
 801e4a0:	f7e1 ff0c 	bl	80002bc <__adddf3>
 801e4a4:	4680      	mov	r8, r0
 801e4a6:	4689      	mov	r9, r1
 801e4a8:	e7de      	b.n	801e468 <_strtod_l+0x8b8>
 801e4aa:	4013      	ands	r3, r2
 801e4ac:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801e4b0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801e4b4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801e4b8:	f04f 38ff 	mov.w	r8, #4294967295
 801e4bc:	e7d4      	b.n	801e468 <_strtod_l+0x8b8>
 801e4be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e4c0:	ea13 0f08 	tst.w	r3, r8
 801e4c4:	e7e0      	b.n	801e488 <_strtod_l+0x8d8>
 801e4c6:	f7ff fb56 	bl	801db76 <sulp>
 801e4ca:	4602      	mov	r2, r0
 801e4cc:	460b      	mov	r3, r1
 801e4ce:	ec51 0b18 	vmov	r0, r1, d8
 801e4d2:	f7e1 fef1 	bl	80002b8 <__aeabi_dsub>
 801e4d6:	2200      	movs	r2, #0
 801e4d8:	2300      	movs	r3, #0
 801e4da:	4680      	mov	r8, r0
 801e4dc:	4689      	mov	r9, r1
 801e4de:	f7e2 fb0b 	bl	8000af8 <__aeabi_dcmpeq>
 801e4e2:	2800      	cmp	r0, #0
 801e4e4:	d0c0      	beq.n	801e468 <_strtod_l+0x8b8>
 801e4e6:	e618      	b.n	801e11a <_strtod_l+0x56a>
 801e4e8:	fffffc02 	.word	0xfffffc02
 801e4ec:	7ff00000 	.word	0x7ff00000
 801e4f0:	39500000 	.word	0x39500000
 801e4f4:	000fffff 	.word	0x000fffff
 801e4f8:	7fefffff 	.word	0x7fefffff
 801e4fc:	08023278 	.word	0x08023278
 801e500:	4659      	mov	r1, fp
 801e502:	4628      	mov	r0, r5
 801e504:	f7ff fac0 	bl	801da88 <__ratio>
 801e508:	ec57 6b10 	vmov	r6, r7, d0
 801e50c:	ee10 0a10 	vmov	r0, s0
 801e510:	2200      	movs	r2, #0
 801e512:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801e516:	4639      	mov	r1, r7
 801e518:	f7e2 fb02 	bl	8000b20 <__aeabi_dcmple>
 801e51c:	2800      	cmp	r0, #0
 801e51e:	d071      	beq.n	801e604 <_strtod_l+0xa54>
 801e520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e522:	2b00      	cmp	r3, #0
 801e524:	d17c      	bne.n	801e620 <_strtod_l+0xa70>
 801e526:	f1b8 0f00 	cmp.w	r8, #0
 801e52a:	d15a      	bne.n	801e5e2 <_strtod_l+0xa32>
 801e52c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e530:	2b00      	cmp	r3, #0
 801e532:	d15d      	bne.n	801e5f0 <_strtod_l+0xa40>
 801e534:	4b90      	ldr	r3, [pc, #576]	; (801e778 <_strtod_l+0xbc8>)
 801e536:	2200      	movs	r2, #0
 801e538:	4630      	mov	r0, r6
 801e53a:	4639      	mov	r1, r7
 801e53c:	f7e2 fae6 	bl	8000b0c <__aeabi_dcmplt>
 801e540:	2800      	cmp	r0, #0
 801e542:	d15c      	bne.n	801e5fe <_strtod_l+0xa4e>
 801e544:	4630      	mov	r0, r6
 801e546:	4639      	mov	r1, r7
 801e548:	4b8c      	ldr	r3, [pc, #560]	; (801e77c <_strtod_l+0xbcc>)
 801e54a:	2200      	movs	r2, #0
 801e54c:	f7e2 f86c 	bl	8000628 <__aeabi_dmul>
 801e550:	4606      	mov	r6, r0
 801e552:	460f      	mov	r7, r1
 801e554:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801e558:	9606      	str	r6, [sp, #24]
 801e55a:	9307      	str	r3, [sp, #28]
 801e55c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e560:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801e564:	4b86      	ldr	r3, [pc, #536]	; (801e780 <_strtod_l+0xbd0>)
 801e566:	ea0a 0303 	and.w	r3, sl, r3
 801e56a:	930d      	str	r3, [sp, #52]	; 0x34
 801e56c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e56e:	4b85      	ldr	r3, [pc, #532]	; (801e784 <_strtod_l+0xbd4>)
 801e570:	429a      	cmp	r2, r3
 801e572:	f040 8090 	bne.w	801e696 <_strtod_l+0xae6>
 801e576:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801e57a:	ec49 8b10 	vmov	d0, r8, r9
 801e57e:	f7ff f9b9 	bl	801d8f4 <__ulp>
 801e582:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e586:	ec51 0b10 	vmov	r0, r1, d0
 801e58a:	f7e2 f84d 	bl	8000628 <__aeabi_dmul>
 801e58e:	4642      	mov	r2, r8
 801e590:	464b      	mov	r3, r9
 801e592:	f7e1 fe93 	bl	80002bc <__adddf3>
 801e596:	460b      	mov	r3, r1
 801e598:	4979      	ldr	r1, [pc, #484]	; (801e780 <_strtod_l+0xbd0>)
 801e59a:	4a7b      	ldr	r2, [pc, #492]	; (801e788 <_strtod_l+0xbd8>)
 801e59c:	4019      	ands	r1, r3
 801e59e:	4291      	cmp	r1, r2
 801e5a0:	4680      	mov	r8, r0
 801e5a2:	d944      	bls.n	801e62e <_strtod_l+0xa7e>
 801e5a4:	ee18 2a90 	vmov	r2, s17
 801e5a8:	4b78      	ldr	r3, [pc, #480]	; (801e78c <_strtod_l+0xbdc>)
 801e5aa:	429a      	cmp	r2, r3
 801e5ac:	d104      	bne.n	801e5b8 <_strtod_l+0xa08>
 801e5ae:	ee18 3a10 	vmov	r3, s16
 801e5b2:	3301      	adds	r3, #1
 801e5b4:	f43f ad40 	beq.w	801e038 <_strtod_l+0x488>
 801e5b8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801e78c <_strtod_l+0xbdc>
 801e5bc:	f04f 38ff 	mov.w	r8, #4294967295
 801e5c0:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e5c2:	4620      	mov	r0, r4
 801e5c4:	f7fe fe6a 	bl	801d29c <_Bfree>
 801e5c8:	9905      	ldr	r1, [sp, #20]
 801e5ca:	4620      	mov	r0, r4
 801e5cc:	f7fe fe66 	bl	801d29c <_Bfree>
 801e5d0:	4659      	mov	r1, fp
 801e5d2:	4620      	mov	r0, r4
 801e5d4:	f7fe fe62 	bl	801d29c <_Bfree>
 801e5d8:	4629      	mov	r1, r5
 801e5da:	4620      	mov	r0, r4
 801e5dc:	f7fe fe5e 	bl	801d29c <_Bfree>
 801e5e0:	e609      	b.n	801e1f6 <_strtod_l+0x646>
 801e5e2:	f1b8 0f01 	cmp.w	r8, #1
 801e5e6:	d103      	bne.n	801e5f0 <_strtod_l+0xa40>
 801e5e8:	f1b9 0f00 	cmp.w	r9, #0
 801e5ec:	f43f ad95 	beq.w	801e11a <_strtod_l+0x56a>
 801e5f0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 801e748 <_strtod_l+0xb98>
 801e5f4:	4f60      	ldr	r7, [pc, #384]	; (801e778 <_strtod_l+0xbc8>)
 801e5f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e5fa:	2600      	movs	r6, #0
 801e5fc:	e7ae      	b.n	801e55c <_strtod_l+0x9ac>
 801e5fe:	4f5f      	ldr	r7, [pc, #380]	; (801e77c <_strtod_l+0xbcc>)
 801e600:	2600      	movs	r6, #0
 801e602:	e7a7      	b.n	801e554 <_strtod_l+0x9a4>
 801e604:	4b5d      	ldr	r3, [pc, #372]	; (801e77c <_strtod_l+0xbcc>)
 801e606:	4630      	mov	r0, r6
 801e608:	4639      	mov	r1, r7
 801e60a:	2200      	movs	r2, #0
 801e60c:	f7e2 f80c 	bl	8000628 <__aeabi_dmul>
 801e610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e612:	4606      	mov	r6, r0
 801e614:	460f      	mov	r7, r1
 801e616:	2b00      	cmp	r3, #0
 801e618:	d09c      	beq.n	801e554 <_strtod_l+0x9a4>
 801e61a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801e61e:	e79d      	b.n	801e55c <_strtod_l+0x9ac>
 801e620:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 801e750 <_strtod_l+0xba0>
 801e624:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e628:	ec57 6b17 	vmov	r6, r7, d7
 801e62c:	e796      	b.n	801e55c <_strtod_l+0x9ac>
 801e62e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801e632:	9b04      	ldr	r3, [sp, #16]
 801e634:	46ca      	mov	sl, r9
 801e636:	2b00      	cmp	r3, #0
 801e638:	d1c2      	bne.n	801e5c0 <_strtod_l+0xa10>
 801e63a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e63e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e640:	0d1b      	lsrs	r3, r3, #20
 801e642:	051b      	lsls	r3, r3, #20
 801e644:	429a      	cmp	r2, r3
 801e646:	d1bb      	bne.n	801e5c0 <_strtod_l+0xa10>
 801e648:	4630      	mov	r0, r6
 801e64a:	4639      	mov	r1, r7
 801e64c:	f7e2 fb60 	bl	8000d10 <__aeabi_d2lz>
 801e650:	f7e1 ffbc 	bl	80005cc <__aeabi_l2d>
 801e654:	4602      	mov	r2, r0
 801e656:	460b      	mov	r3, r1
 801e658:	4630      	mov	r0, r6
 801e65a:	4639      	mov	r1, r7
 801e65c:	f7e1 fe2c 	bl	80002b8 <__aeabi_dsub>
 801e660:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e662:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e666:	ea43 0308 	orr.w	r3, r3, r8
 801e66a:	4313      	orrs	r3, r2
 801e66c:	4606      	mov	r6, r0
 801e66e:	460f      	mov	r7, r1
 801e670:	d054      	beq.n	801e71c <_strtod_l+0xb6c>
 801e672:	a339      	add	r3, pc, #228	; (adr r3, 801e758 <_strtod_l+0xba8>)
 801e674:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e678:	f7e2 fa48 	bl	8000b0c <__aeabi_dcmplt>
 801e67c:	2800      	cmp	r0, #0
 801e67e:	f47f ace5 	bne.w	801e04c <_strtod_l+0x49c>
 801e682:	a337      	add	r3, pc, #220	; (adr r3, 801e760 <_strtod_l+0xbb0>)
 801e684:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e688:	4630      	mov	r0, r6
 801e68a:	4639      	mov	r1, r7
 801e68c:	f7e2 fa5c 	bl	8000b48 <__aeabi_dcmpgt>
 801e690:	2800      	cmp	r0, #0
 801e692:	d095      	beq.n	801e5c0 <_strtod_l+0xa10>
 801e694:	e4da      	b.n	801e04c <_strtod_l+0x49c>
 801e696:	9b04      	ldr	r3, [sp, #16]
 801e698:	b333      	cbz	r3, 801e6e8 <_strtod_l+0xb38>
 801e69a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e69c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801e6a0:	d822      	bhi.n	801e6e8 <_strtod_l+0xb38>
 801e6a2:	a331      	add	r3, pc, #196	; (adr r3, 801e768 <_strtod_l+0xbb8>)
 801e6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6a8:	4630      	mov	r0, r6
 801e6aa:	4639      	mov	r1, r7
 801e6ac:	f7e2 fa38 	bl	8000b20 <__aeabi_dcmple>
 801e6b0:	b1a0      	cbz	r0, 801e6dc <_strtod_l+0xb2c>
 801e6b2:	4639      	mov	r1, r7
 801e6b4:	4630      	mov	r0, r6
 801e6b6:	f7e2 fa8f 	bl	8000bd8 <__aeabi_d2uiz>
 801e6ba:	2801      	cmp	r0, #1
 801e6bc:	bf38      	it	cc
 801e6be:	2001      	movcc	r0, #1
 801e6c0:	f7e1 ff38 	bl	8000534 <__aeabi_ui2d>
 801e6c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e6c6:	4606      	mov	r6, r0
 801e6c8:	460f      	mov	r7, r1
 801e6ca:	bb23      	cbnz	r3, 801e716 <_strtod_l+0xb66>
 801e6cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e6d0:	9010      	str	r0, [sp, #64]	; 0x40
 801e6d2:	9311      	str	r3, [sp, #68]	; 0x44
 801e6d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801e6d8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801e6dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e6de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e6e0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801e6e4:	1a9b      	subs	r3, r3, r2
 801e6e6:	930f      	str	r3, [sp, #60]	; 0x3c
 801e6e8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801e6ec:	eeb0 0a48 	vmov.f32	s0, s16
 801e6f0:	eef0 0a68 	vmov.f32	s1, s17
 801e6f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801e6f8:	f7ff f8fc 	bl	801d8f4 <__ulp>
 801e6fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801e700:	ec53 2b10 	vmov	r2, r3, d0
 801e704:	f7e1 ff90 	bl	8000628 <__aeabi_dmul>
 801e708:	ec53 2b18 	vmov	r2, r3, d8
 801e70c:	f7e1 fdd6 	bl	80002bc <__adddf3>
 801e710:	4680      	mov	r8, r0
 801e712:	4689      	mov	r9, r1
 801e714:	e78d      	b.n	801e632 <_strtod_l+0xa82>
 801e716:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801e71a:	e7db      	b.n	801e6d4 <_strtod_l+0xb24>
 801e71c:	a314      	add	r3, pc, #80	; (adr r3, 801e770 <_strtod_l+0xbc0>)
 801e71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e722:	f7e2 f9f3 	bl	8000b0c <__aeabi_dcmplt>
 801e726:	e7b3      	b.n	801e690 <_strtod_l+0xae0>
 801e728:	2300      	movs	r3, #0
 801e72a:	930a      	str	r3, [sp, #40]	; 0x28
 801e72c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e72e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e730:	6013      	str	r3, [r2, #0]
 801e732:	f7ff ba7c 	b.w	801dc2e <_strtod_l+0x7e>
 801e736:	2a65      	cmp	r2, #101	; 0x65
 801e738:	f43f ab75 	beq.w	801de26 <_strtod_l+0x276>
 801e73c:	2a45      	cmp	r2, #69	; 0x45
 801e73e:	f43f ab72 	beq.w	801de26 <_strtod_l+0x276>
 801e742:	2301      	movs	r3, #1
 801e744:	f7ff bbaa 	b.w	801de9c <_strtod_l+0x2ec>
 801e748:	00000000 	.word	0x00000000
 801e74c:	bff00000 	.word	0xbff00000
 801e750:	00000000 	.word	0x00000000
 801e754:	3ff00000 	.word	0x3ff00000
 801e758:	94a03595 	.word	0x94a03595
 801e75c:	3fdfffff 	.word	0x3fdfffff
 801e760:	35afe535 	.word	0x35afe535
 801e764:	3fe00000 	.word	0x3fe00000
 801e768:	ffc00000 	.word	0xffc00000
 801e76c:	41dfffff 	.word	0x41dfffff
 801e770:	94a03595 	.word	0x94a03595
 801e774:	3fcfffff 	.word	0x3fcfffff
 801e778:	3ff00000 	.word	0x3ff00000
 801e77c:	3fe00000 	.word	0x3fe00000
 801e780:	7ff00000 	.word	0x7ff00000
 801e784:	7fe00000 	.word	0x7fe00000
 801e788:	7c9fffff 	.word	0x7c9fffff
 801e78c:	7fefffff 	.word	0x7fefffff

0801e790 <_strtod_r>:
 801e790:	4b01      	ldr	r3, [pc, #4]	; (801e798 <_strtod_r+0x8>)
 801e792:	f7ff ba0d 	b.w	801dbb0 <_strtod_l>
 801e796:	bf00      	nop
 801e798:	2000018c 	.word	0x2000018c

0801e79c <_strtol_l.constprop.0>:
 801e79c:	2b01      	cmp	r3, #1
 801e79e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e7a2:	d001      	beq.n	801e7a8 <_strtol_l.constprop.0+0xc>
 801e7a4:	2b24      	cmp	r3, #36	; 0x24
 801e7a6:	d906      	bls.n	801e7b6 <_strtol_l.constprop.0+0x1a>
 801e7a8:	f7fd fe1e 	bl	801c3e8 <__errno>
 801e7ac:	2316      	movs	r3, #22
 801e7ae:	6003      	str	r3, [r0, #0]
 801e7b0:	2000      	movs	r0, #0
 801e7b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e7b6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801e89c <_strtol_l.constprop.0+0x100>
 801e7ba:	460d      	mov	r5, r1
 801e7bc:	462e      	mov	r6, r5
 801e7be:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e7c2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801e7c6:	f017 0708 	ands.w	r7, r7, #8
 801e7ca:	d1f7      	bne.n	801e7bc <_strtol_l.constprop.0+0x20>
 801e7cc:	2c2d      	cmp	r4, #45	; 0x2d
 801e7ce:	d132      	bne.n	801e836 <_strtol_l.constprop.0+0x9a>
 801e7d0:	782c      	ldrb	r4, [r5, #0]
 801e7d2:	2701      	movs	r7, #1
 801e7d4:	1cb5      	adds	r5, r6, #2
 801e7d6:	2b00      	cmp	r3, #0
 801e7d8:	d05b      	beq.n	801e892 <_strtol_l.constprop.0+0xf6>
 801e7da:	2b10      	cmp	r3, #16
 801e7dc:	d109      	bne.n	801e7f2 <_strtol_l.constprop.0+0x56>
 801e7de:	2c30      	cmp	r4, #48	; 0x30
 801e7e0:	d107      	bne.n	801e7f2 <_strtol_l.constprop.0+0x56>
 801e7e2:	782c      	ldrb	r4, [r5, #0]
 801e7e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801e7e8:	2c58      	cmp	r4, #88	; 0x58
 801e7ea:	d14d      	bne.n	801e888 <_strtol_l.constprop.0+0xec>
 801e7ec:	786c      	ldrb	r4, [r5, #1]
 801e7ee:	2310      	movs	r3, #16
 801e7f0:	3502      	adds	r5, #2
 801e7f2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801e7f6:	f108 38ff 	add.w	r8, r8, #4294967295
 801e7fa:	f04f 0e00 	mov.w	lr, #0
 801e7fe:	fbb8 f9f3 	udiv	r9, r8, r3
 801e802:	4676      	mov	r6, lr
 801e804:	fb03 8a19 	mls	sl, r3, r9, r8
 801e808:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801e80c:	f1bc 0f09 	cmp.w	ip, #9
 801e810:	d816      	bhi.n	801e840 <_strtol_l.constprop.0+0xa4>
 801e812:	4664      	mov	r4, ip
 801e814:	42a3      	cmp	r3, r4
 801e816:	dd24      	ble.n	801e862 <_strtol_l.constprop.0+0xc6>
 801e818:	f1be 3fff 	cmp.w	lr, #4294967295
 801e81c:	d008      	beq.n	801e830 <_strtol_l.constprop.0+0x94>
 801e81e:	45b1      	cmp	r9, r6
 801e820:	d31c      	bcc.n	801e85c <_strtol_l.constprop.0+0xc0>
 801e822:	d101      	bne.n	801e828 <_strtol_l.constprop.0+0x8c>
 801e824:	45a2      	cmp	sl, r4
 801e826:	db19      	blt.n	801e85c <_strtol_l.constprop.0+0xc0>
 801e828:	fb06 4603 	mla	r6, r6, r3, r4
 801e82c:	f04f 0e01 	mov.w	lr, #1
 801e830:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e834:	e7e8      	b.n	801e808 <_strtol_l.constprop.0+0x6c>
 801e836:	2c2b      	cmp	r4, #43	; 0x2b
 801e838:	bf04      	itt	eq
 801e83a:	782c      	ldrbeq	r4, [r5, #0]
 801e83c:	1cb5      	addeq	r5, r6, #2
 801e83e:	e7ca      	b.n	801e7d6 <_strtol_l.constprop.0+0x3a>
 801e840:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801e844:	f1bc 0f19 	cmp.w	ip, #25
 801e848:	d801      	bhi.n	801e84e <_strtol_l.constprop.0+0xb2>
 801e84a:	3c37      	subs	r4, #55	; 0x37
 801e84c:	e7e2      	b.n	801e814 <_strtol_l.constprop.0+0x78>
 801e84e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801e852:	f1bc 0f19 	cmp.w	ip, #25
 801e856:	d804      	bhi.n	801e862 <_strtol_l.constprop.0+0xc6>
 801e858:	3c57      	subs	r4, #87	; 0x57
 801e85a:	e7db      	b.n	801e814 <_strtol_l.constprop.0+0x78>
 801e85c:	f04f 3eff 	mov.w	lr, #4294967295
 801e860:	e7e6      	b.n	801e830 <_strtol_l.constprop.0+0x94>
 801e862:	f1be 3fff 	cmp.w	lr, #4294967295
 801e866:	d105      	bne.n	801e874 <_strtol_l.constprop.0+0xd8>
 801e868:	2322      	movs	r3, #34	; 0x22
 801e86a:	6003      	str	r3, [r0, #0]
 801e86c:	4646      	mov	r6, r8
 801e86e:	b942      	cbnz	r2, 801e882 <_strtol_l.constprop.0+0xe6>
 801e870:	4630      	mov	r0, r6
 801e872:	e79e      	b.n	801e7b2 <_strtol_l.constprop.0+0x16>
 801e874:	b107      	cbz	r7, 801e878 <_strtol_l.constprop.0+0xdc>
 801e876:	4276      	negs	r6, r6
 801e878:	2a00      	cmp	r2, #0
 801e87a:	d0f9      	beq.n	801e870 <_strtol_l.constprop.0+0xd4>
 801e87c:	f1be 0f00 	cmp.w	lr, #0
 801e880:	d000      	beq.n	801e884 <_strtol_l.constprop.0+0xe8>
 801e882:	1e69      	subs	r1, r5, #1
 801e884:	6011      	str	r1, [r2, #0]
 801e886:	e7f3      	b.n	801e870 <_strtol_l.constprop.0+0xd4>
 801e888:	2430      	movs	r4, #48	; 0x30
 801e88a:	2b00      	cmp	r3, #0
 801e88c:	d1b1      	bne.n	801e7f2 <_strtol_l.constprop.0+0x56>
 801e88e:	2308      	movs	r3, #8
 801e890:	e7af      	b.n	801e7f2 <_strtol_l.constprop.0+0x56>
 801e892:	2c30      	cmp	r4, #48	; 0x30
 801e894:	d0a5      	beq.n	801e7e2 <_strtol_l.constprop.0+0x46>
 801e896:	230a      	movs	r3, #10
 801e898:	e7ab      	b.n	801e7f2 <_strtol_l.constprop.0+0x56>
 801e89a:	bf00      	nop
 801e89c:	080232a1 	.word	0x080232a1

0801e8a0 <_strtol_r>:
 801e8a0:	f7ff bf7c 	b.w	801e79c <_strtol_l.constprop.0>

0801e8a4 <__ssputs_r>:
 801e8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e8a8:	688e      	ldr	r6, [r1, #8]
 801e8aa:	461f      	mov	r7, r3
 801e8ac:	42be      	cmp	r6, r7
 801e8ae:	680b      	ldr	r3, [r1, #0]
 801e8b0:	4682      	mov	sl, r0
 801e8b2:	460c      	mov	r4, r1
 801e8b4:	4690      	mov	r8, r2
 801e8b6:	d82c      	bhi.n	801e912 <__ssputs_r+0x6e>
 801e8b8:	898a      	ldrh	r2, [r1, #12]
 801e8ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e8be:	d026      	beq.n	801e90e <__ssputs_r+0x6a>
 801e8c0:	6965      	ldr	r5, [r4, #20]
 801e8c2:	6909      	ldr	r1, [r1, #16]
 801e8c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e8c8:	eba3 0901 	sub.w	r9, r3, r1
 801e8cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e8d0:	1c7b      	adds	r3, r7, #1
 801e8d2:	444b      	add	r3, r9
 801e8d4:	106d      	asrs	r5, r5, #1
 801e8d6:	429d      	cmp	r5, r3
 801e8d8:	bf38      	it	cc
 801e8da:	461d      	movcc	r5, r3
 801e8dc:	0553      	lsls	r3, r2, #21
 801e8de:	d527      	bpl.n	801e930 <__ssputs_r+0x8c>
 801e8e0:	4629      	mov	r1, r5
 801e8e2:	f7fc faa9 	bl	801ae38 <_malloc_r>
 801e8e6:	4606      	mov	r6, r0
 801e8e8:	b360      	cbz	r0, 801e944 <__ssputs_r+0xa0>
 801e8ea:	6921      	ldr	r1, [r4, #16]
 801e8ec:	464a      	mov	r2, r9
 801e8ee:	f7fd fdb0 	bl	801c452 <memcpy>
 801e8f2:	89a3      	ldrh	r3, [r4, #12]
 801e8f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e8f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e8fc:	81a3      	strh	r3, [r4, #12]
 801e8fe:	6126      	str	r6, [r4, #16]
 801e900:	6165      	str	r5, [r4, #20]
 801e902:	444e      	add	r6, r9
 801e904:	eba5 0509 	sub.w	r5, r5, r9
 801e908:	6026      	str	r6, [r4, #0]
 801e90a:	60a5      	str	r5, [r4, #8]
 801e90c:	463e      	mov	r6, r7
 801e90e:	42be      	cmp	r6, r7
 801e910:	d900      	bls.n	801e914 <__ssputs_r+0x70>
 801e912:	463e      	mov	r6, r7
 801e914:	6820      	ldr	r0, [r4, #0]
 801e916:	4632      	mov	r2, r6
 801e918:	4641      	mov	r1, r8
 801e91a:	f7fd fbab 	bl	801c074 <memmove>
 801e91e:	68a3      	ldr	r3, [r4, #8]
 801e920:	1b9b      	subs	r3, r3, r6
 801e922:	60a3      	str	r3, [r4, #8]
 801e924:	6823      	ldr	r3, [r4, #0]
 801e926:	4433      	add	r3, r6
 801e928:	6023      	str	r3, [r4, #0]
 801e92a:	2000      	movs	r0, #0
 801e92c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e930:	462a      	mov	r2, r5
 801e932:	f001 face 	bl	801fed2 <_realloc_r>
 801e936:	4606      	mov	r6, r0
 801e938:	2800      	cmp	r0, #0
 801e93a:	d1e0      	bne.n	801e8fe <__ssputs_r+0x5a>
 801e93c:	6921      	ldr	r1, [r4, #16]
 801e93e:	4650      	mov	r0, sl
 801e940:	f7fe fc20 	bl	801d184 <_free_r>
 801e944:	230c      	movs	r3, #12
 801e946:	f8ca 3000 	str.w	r3, [sl]
 801e94a:	89a3      	ldrh	r3, [r4, #12]
 801e94c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e950:	81a3      	strh	r3, [r4, #12]
 801e952:	f04f 30ff 	mov.w	r0, #4294967295
 801e956:	e7e9      	b.n	801e92c <__ssputs_r+0x88>

0801e958 <_svfiprintf_r>:
 801e958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e95c:	4698      	mov	r8, r3
 801e95e:	898b      	ldrh	r3, [r1, #12]
 801e960:	061b      	lsls	r3, r3, #24
 801e962:	b09d      	sub	sp, #116	; 0x74
 801e964:	4607      	mov	r7, r0
 801e966:	460d      	mov	r5, r1
 801e968:	4614      	mov	r4, r2
 801e96a:	d50e      	bpl.n	801e98a <_svfiprintf_r+0x32>
 801e96c:	690b      	ldr	r3, [r1, #16]
 801e96e:	b963      	cbnz	r3, 801e98a <_svfiprintf_r+0x32>
 801e970:	2140      	movs	r1, #64	; 0x40
 801e972:	f7fc fa61 	bl	801ae38 <_malloc_r>
 801e976:	6028      	str	r0, [r5, #0]
 801e978:	6128      	str	r0, [r5, #16]
 801e97a:	b920      	cbnz	r0, 801e986 <_svfiprintf_r+0x2e>
 801e97c:	230c      	movs	r3, #12
 801e97e:	603b      	str	r3, [r7, #0]
 801e980:	f04f 30ff 	mov.w	r0, #4294967295
 801e984:	e0d0      	b.n	801eb28 <_svfiprintf_r+0x1d0>
 801e986:	2340      	movs	r3, #64	; 0x40
 801e988:	616b      	str	r3, [r5, #20]
 801e98a:	2300      	movs	r3, #0
 801e98c:	9309      	str	r3, [sp, #36]	; 0x24
 801e98e:	2320      	movs	r3, #32
 801e990:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e994:	f8cd 800c 	str.w	r8, [sp, #12]
 801e998:	2330      	movs	r3, #48	; 0x30
 801e99a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801eb40 <_svfiprintf_r+0x1e8>
 801e99e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e9a2:	f04f 0901 	mov.w	r9, #1
 801e9a6:	4623      	mov	r3, r4
 801e9a8:	469a      	mov	sl, r3
 801e9aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e9ae:	b10a      	cbz	r2, 801e9b4 <_svfiprintf_r+0x5c>
 801e9b0:	2a25      	cmp	r2, #37	; 0x25
 801e9b2:	d1f9      	bne.n	801e9a8 <_svfiprintf_r+0x50>
 801e9b4:	ebba 0b04 	subs.w	fp, sl, r4
 801e9b8:	d00b      	beq.n	801e9d2 <_svfiprintf_r+0x7a>
 801e9ba:	465b      	mov	r3, fp
 801e9bc:	4622      	mov	r2, r4
 801e9be:	4629      	mov	r1, r5
 801e9c0:	4638      	mov	r0, r7
 801e9c2:	f7ff ff6f 	bl	801e8a4 <__ssputs_r>
 801e9c6:	3001      	adds	r0, #1
 801e9c8:	f000 80a9 	beq.w	801eb1e <_svfiprintf_r+0x1c6>
 801e9cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e9ce:	445a      	add	r2, fp
 801e9d0:	9209      	str	r2, [sp, #36]	; 0x24
 801e9d2:	f89a 3000 	ldrb.w	r3, [sl]
 801e9d6:	2b00      	cmp	r3, #0
 801e9d8:	f000 80a1 	beq.w	801eb1e <_svfiprintf_r+0x1c6>
 801e9dc:	2300      	movs	r3, #0
 801e9de:	f04f 32ff 	mov.w	r2, #4294967295
 801e9e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e9e6:	f10a 0a01 	add.w	sl, sl, #1
 801e9ea:	9304      	str	r3, [sp, #16]
 801e9ec:	9307      	str	r3, [sp, #28]
 801e9ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e9f2:	931a      	str	r3, [sp, #104]	; 0x68
 801e9f4:	4654      	mov	r4, sl
 801e9f6:	2205      	movs	r2, #5
 801e9f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e9fc:	4850      	ldr	r0, [pc, #320]	; (801eb40 <_svfiprintf_r+0x1e8>)
 801e9fe:	f7e1 fbff 	bl	8000200 <memchr>
 801ea02:	9a04      	ldr	r2, [sp, #16]
 801ea04:	b9d8      	cbnz	r0, 801ea3e <_svfiprintf_r+0xe6>
 801ea06:	06d0      	lsls	r0, r2, #27
 801ea08:	bf44      	itt	mi
 801ea0a:	2320      	movmi	r3, #32
 801ea0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ea10:	0711      	lsls	r1, r2, #28
 801ea12:	bf44      	itt	mi
 801ea14:	232b      	movmi	r3, #43	; 0x2b
 801ea16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ea1a:	f89a 3000 	ldrb.w	r3, [sl]
 801ea1e:	2b2a      	cmp	r3, #42	; 0x2a
 801ea20:	d015      	beq.n	801ea4e <_svfiprintf_r+0xf6>
 801ea22:	9a07      	ldr	r2, [sp, #28]
 801ea24:	4654      	mov	r4, sl
 801ea26:	2000      	movs	r0, #0
 801ea28:	f04f 0c0a 	mov.w	ip, #10
 801ea2c:	4621      	mov	r1, r4
 801ea2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ea32:	3b30      	subs	r3, #48	; 0x30
 801ea34:	2b09      	cmp	r3, #9
 801ea36:	d94d      	bls.n	801ead4 <_svfiprintf_r+0x17c>
 801ea38:	b1b0      	cbz	r0, 801ea68 <_svfiprintf_r+0x110>
 801ea3a:	9207      	str	r2, [sp, #28]
 801ea3c:	e014      	b.n	801ea68 <_svfiprintf_r+0x110>
 801ea3e:	eba0 0308 	sub.w	r3, r0, r8
 801ea42:	fa09 f303 	lsl.w	r3, r9, r3
 801ea46:	4313      	orrs	r3, r2
 801ea48:	9304      	str	r3, [sp, #16]
 801ea4a:	46a2      	mov	sl, r4
 801ea4c:	e7d2      	b.n	801e9f4 <_svfiprintf_r+0x9c>
 801ea4e:	9b03      	ldr	r3, [sp, #12]
 801ea50:	1d19      	adds	r1, r3, #4
 801ea52:	681b      	ldr	r3, [r3, #0]
 801ea54:	9103      	str	r1, [sp, #12]
 801ea56:	2b00      	cmp	r3, #0
 801ea58:	bfbb      	ittet	lt
 801ea5a:	425b      	neglt	r3, r3
 801ea5c:	f042 0202 	orrlt.w	r2, r2, #2
 801ea60:	9307      	strge	r3, [sp, #28]
 801ea62:	9307      	strlt	r3, [sp, #28]
 801ea64:	bfb8      	it	lt
 801ea66:	9204      	strlt	r2, [sp, #16]
 801ea68:	7823      	ldrb	r3, [r4, #0]
 801ea6a:	2b2e      	cmp	r3, #46	; 0x2e
 801ea6c:	d10c      	bne.n	801ea88 <_svfiprintf_r+0x130>
 801ea6e:	7863      	ldrb	r3, [r4, #1]
 801ea70:	2b2a      	cmp	r3, #42	; 0x2a
 801ea72:	d134      	bne.n	801eade <_svfiprintf_r+0x186>
 801ea74:	9b03      	ldr	r3, [sp, #12]
 801ea76:	1d1a      	adds	r2, r3, #4
 801ea78:	681b      	ldr	r3, [r3, #0]
 801ea7a:	9203      	str	r2, [sp, #12]
 801ea7c:	2b00      	cmp	r3, #0
 801ea7e:	bfb8      	it	lt
 801ea80:	f04f 33ff 	movlt.w	r3, #4294967295
 801ea84:	3402      	adds	r4, #2
 801ea86:	9305      	str	r3, [sp, #20]
 801ea88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801eb50 <_svfiprintf_r+0x1f8>
 801ea8c:	7821      	ldrb	r1, [r4, #0]
 801ea8e:	2203      	movs	r2, #3
 801ea90:	4650      	mov	r0, sl
 801ea92:	f7e1 fbb5 	bl	8000200 <memchr>
 801ea96:	b138      	cbz	r0, 801eaa8 <_svfiprintf_r+0x150>
 801ea98:	9b04      	ldr	r3, [sp, #16]
 801ea9a:	eba0 000a 	sub.w	r0, r0, sl
 801ea9e:	2240      	movs	r2, #64	; 0x40
 801eaa0:	4082      	lsls	r2, r0
 801eaa2:	4313      	orrs	r3, r2
 801eaa4:	3401      	adds	r4, #1
 801eaa6:	9304      	str	r3, [sp, #16]
 801eaa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eaac:	4825      	ldr	r0, [pc, #148]	; (801eb44 <_svfiprintf_r+0x1ec>)
 801eaae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801eab2:	2206      	movs	r2, #6
 801eab4:	f7e1 fba4 	bl	8000200 <memchr>
 801eab8:	2800      	cmp	r0, #0
 801eaba:	d038      	beq.n	801eb2e <_svfiprintf_r+0x1d6>
 801eabc:	4b22      	ldr	r3, [pc, #136]	; (801eb48 <_svfiprintf_r+0x1f0>)
 801eabe:	bb1b      	cbnz	r3, 801eb08 <_svfiprintf_r+0x1b0>
 801eac0:	9b03      	ldr	r3, [sp, #12]
 801eac2:	3307      	adds	r3, #7
 801eac4:	f023 0307 	bic.w	r3, r3, #7
 801eac8:	3308      	adds	r3, #8
 801eaca:	9303      	str	r3, [sp, #12]
 801eacc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eace:	4433      	add	r3, r6
 801ead0:	9309      	str	r3, [sp, #36]	; 0x24
 801ead2:	e768      	b.n	801e9a6 <_svfiprintf_r+0x4e>
 801ead4:	fb0c 3202 	mla	r2, ip, r2, r3
 801ead8:	460c      	mov	r4, r1
 801eada:	2001      	movs	r0, #1
 801eadc:	e7a6      	b.n	801ea2c <_svfiprintf_r+0xd4>
 801eade:	2300      	movs	r3, #0
 801eae0:	3401      	adds	r4, #1
 801eae2:	9305      	str	r3, [sp, #20]
 801eae4:	4619      	mov	r1, r3
 801eae6:	f04f 0c0a 	mov.w	ip, #10
 801eaea:	4620      	mov	r0, r4
 801eaec:	f810 2b01 	ldrb.w	r2, [r0], #1
 801eaf0:	3a30      	subs	r2, #48	; 0x30
 801eaf2:	2a09      	cmp	r2, #9
 801eaf4:	d903      	bls.n	801eafe <_svfiprintf_r+0x1a6>
 801eaf6:	2b00      	cmp	r3, #0
 801eaf8:	d0c6      	beq.n	801ea88 <_svfiprintf_r+0x130>
 801eafa:	9105      	str	r1, [sp, #20]
 801eafc:	e7c4      	b.n	801ea88 <_svfiprintf_r+0x130>
 801eafe:	fb0c 2101 	mla	r1, ip, r1, r2
 801eb02:	4604      	mov	r4, r0
 801eb04:	2301      	movs	r3, #1
 801eb06:	e7f0      	b.n	801eaea <_svfiprintf_r+0x192>
 801eb08:	ab03      	add	r3, sp, #12
 801eb0a:	9300      	str	r3, [sp, #0]
 801eb0c:	462a      	mov	r2, r5
 801eb0e:	4b0f      	ldr	r3, [pc, #60]	; (801eb4c <_svfiprintf_r+0x1f4>)
 801eb10:	a904      	add	r1, sp, #16
 801eb12:	4638      	mov	r0, r7
 801eb14:	f7fc fabc 	bl	801b090 <_printf_float>
 801eb18:	1c42      	adds	r2, r0, #1
 801eb1a:	4606      	mov	r6, r0
 801eb1c:	d1d6      	bne.n	801eacc <_svfiprintf_r+0x174>
 801eb1e:	89ab      	ldrh	r3, [r5, #12]
 801eb20:	065b      	lsls	r3, r3, #25
 801eb22:	f53f af2d 	bmi.w	801e980 <_svfiprintf_r+0x28>
 801eb26:	9809      	ldr	r0, [sp, #36]	; 0x24
 801eb28:	b01d      	add	sp, #116	; 0x74
 801eb2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb2e:	ab03      	add	r3, sp, #12
 801eb30:	9300      	str	r3, [sp, #0]
 801eb32:	462a      	mov	r2, r5
 801eb34:	4b05      	ldr	r3, [pc, #20]	; (801eb4c <_svfiprintf_r+0x1f4>)
 801eb36:	a904      	add	r1, sp, #16
 801eb38:	4638      	mov	r0, r7
 801eb3a:	f7fc fd4d 	bl	801b5d8 <_printf_i>
 801eb3e:	e7eb      	b.n	801eb18 <_svfiprintf_r+0x1c0>
 801eb40:	080233a1 	.word	0x080233a1
 801eb44:	080233ab 	.word	0x080233ab
 801eb48:	0801b091 	.word	0x0801b091
 801eb4c:	0801e8a5 	.word	0x0801e8a5
 801eb50:	080233a7 	.word	0x080233a7

0801eb54 <_sungetc_r>:
 801eb54:	b538      	push	{r3, r4, r5, lr}
 801eb56:	1c4b      	adds	r3, r1, #1
 801eb58:	4614      	mov	r4, r2
 801eb5a:	d103      	bne.n	801eb64 <_sungetc_r+0x10>
 801eb5c:	f04f 35ff 	mov.w	r5, #4294967295
 801eb60:	4628      	mov	r0, r5
 801eb62:	bd38      	pop	{r3, r4, r5, pc}
 801eb64:	8993      	ldrh	r3, [r2, #12]
 801eb66:	f023 0320 	bic.w	r3, r3, #32
 801eb6a:	8193      	strh	r3, [r2, #12]
 801eb6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801eb6e:	6852      	ldr	r2, [r2, #4]
 801eb70:	b2cd      	uxtb	r5, r1
 801eb72:	b18b      	cbz	r3, 801eb98 <_sungetc_r+0x44>
 801eb74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801eb76:	4293      	cmp	r3, r2
 801eb78:	dd08      	ble.n	801eb8c <_sungetc_r+0x38>
 801eb7a:	6823      	ldr	r3, [r4, #0]
 801eb7c:	1e5a      	subs	r2, r3, #1
 801eb7e:	6022      	str	r2, [r4, #0]
 801eb80:	f803 5c01 	strb.w	r5, [r3, #-1]
 801eb84:	6863      	ldr	r3, [r4, #4]
 801eb86:	3301      	adds	r3, #1
 801eb88:	6063      	str	r3, [r4, #4]
 801eb8a:	e7e9      	b.n	801eb60 <_sungetc_r+0xc>
 801eb8c:	4621      	mov	r1, r4
 801eb8e:	f000 fd8e 	bl	801f6ae <__submore>
 801eb92:	2800      	cmp	r0, #0
 801eb94:	d0f1      	beq.n	801eb7a <_sungetc_r+0x26>
 801eb96:	e7e1      	b.n	801eb5c <_sungetc_r+0x8>
 801eb98:	6921      	ldr	r1, [r4, #16]
 801eb9a:	6823      	ldr	r3, [r4, #0]
 801eb9c:	b151      	cbz	r1, 801ebb4 <_sungetc_r+0x60>
 801eb9e:	4299      	cmp	r1, r3
 801eba0:	d208      	bcs.n	801ebb4 <_sungetc_r+0x60>
 801eba2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801eba6:	42a9      	cmp	r1, r5
 801eba8:	d104      	bne.n	801ebb4 <_sungetc_r+0x60>
 801ebaa:	3b01      	subs	r3, #1
 801ebac:	3201      	adds	r2, #1
 801ebae:	6023      	str	r3, [r4, #0]
 801ebb0:	6062      	str	r2, [r4, #4]
 801ebb2:	e7d5      	b.n	801eb60 <_sungetc_r+0xc>
 801ebb4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801ebb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ebbc:	6363      	str	r3, [r4, #52]	; 0x34
 801ebbe:	2303      	movs	r3, #3
 801ebc0:	63a3      	str	r3, [r4, #56]	; 0x38
 801ebc2:	4623      	mov	r3, r4
 801ebc4:	f803 5f46 	strb.w	r5, [r3, #70]!
 801ebc8:	6023      	str	r3, [r4, #0]
 801ebca:	2301      	movs	r3, #1
 801ebcc:	e7dc      	b.n	801eb88 <_sungetc_r+0x34>

0801ebce <__ssrefill_r>:
 801ebce:	b510      	push	{r4, lr}
 801ebd0:	460c      	mov	r4, r1
 801ebd2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801ebd4:	b169      	cbz	r1, 801ebf2 <__ssrefill_r+0x24>
 801ebd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ebda:	4299      	cmp	r1, r3
 801ebdc:	d001      	beq.n	801ebe2 <__ssrefill_r+0x14>
 801ebde:	f7fe fad1 	bl	801d184 <_free_r>
 801ebe2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ebe4:	6063      	str	r3, [r4, #4]
 801ebe6:	2000      	movs	r0, #0
 801ebe8:	6360      	str	r0, [r4, #52]	; 0x34
 801ebea:	b113      	cbz	r3, 801ebf2 <__ssrefill_r+0x24>
 801ebec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ebee:	6023      	str	r3, [r4, #0]
 801ebf0:	bd10      	pop	{r4, pc}
 801ebf2:	6923      	ldr	r3, [r4, #16]
 801ebf4:	6023      	str	r3, [r4, #0]
 801ebf6:	2300      	movs	r3, #0
 801ebf8:	6063      	str	r3, [r4, #4]
 801ebfa:	89a3      	ldrh	r3, [r4, #12]
 801ebfc:	f043 0320 	orr.w	r3, r3, #32
 801ec00:	81a3      	strh	r3, [r4, #12]
 801ec02:	f04f 30ff 	mov.w	r0, #4294967295
 801ec06:	e7f3      	b.n	801ebf0 <__ssrefill_r+0x22>

0801ec08 <__ssvfiscanf_r>:
 801ec08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ec0c:	460c      	mov	r4, r1
 801ec0e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801ec12:	2100      	movs	r1, #0
 801ec14:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801ec18:	49a6      	ldr	r1, [pc, #664]	; (801eeb4 <__ssvfiscanf_r+0x2ac>)
 801ec1a:	91a0      	str	r1, [sp, #640]	; 0x280
 801ec1c:	f10d 0804 	add.w	r8, sp, #4
 801ec20:	49a5      	ldr	r1, [pc, #660]	; (801eeb8 <__ssvfiscanf_r+0x2b0>)
 801ec22:	4fa6      	ldr	r7, [pc, #664]	; (801eebc <__ssvfiscanf_r+0x2b4>)
 801ec24:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801eec0 <__ssvfiscanf_r+0x2b8>
 801ec28:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801ec2c:	4606      	mov	r6, r0
 801ec2e:	91a1      	str	r1, [sp, #644]	; 0x284
 801ec30:	9300      	str	r3, [sp, #0]
 801ec32:	7813      	ldrb	r3, [r2, #0]
 801ec34:	2b00      	cmp	r3, #0
 801ec36:	f000 815a 	beq.w	801eeee <__ssvfiscanf_r+0x2e6>
 801ec3a:	5cf9      	ldrb	r1, [r7, r3]
 801ec3c:	f011 0108 	ands.w	r1, r1, #8
 801ec40:	f102 0501 	add.w	r5, r2, #1
 801ec44:	d019      	beq.n	801ec7a <__ssvfiscanf_r+0x72>
 801ec46:	6863      	ldr	r3, [r4, #4]
 801ec48:	2b00      	cmp	r3, #0
 801ec4a:	dd0f      	ble.n	801ec6c <__ssvfiscanf_r+0x64>
 801ec4c:	6823      	ldr	r3, [r4, #0]
 801ec4e:	781a      	ldrb	r2, [r3, #0]
 801ec50:	5cba      	ldrb	r2, [r7, r2]
 801ec52:	0712      	lsls	r2, r2, #28
 801ec54:	d401      	bmi.n	801ec5a <__ssvfiscanf_r+0x52>
 801ec56:	462a      	mov	r2, r5
 801ec58:	e7eb      	b.n	801ec32 <__ssvfiscanf_r+0x2a>
 801ec5a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801ec5c:	3201      	adds	r2, #1
 801ec5e:	9245      	str	r2, [sp, #276]	; 0x114
 801ec60:	6862      	ldr	r2, [r4, #4]
 801ec62:	3301      	adds	r3, #1
 801ec64:	3a01      	subs	r2, #1
 801ec66:	6062      	str	r2, [r4, #4]
 801ec68:	6023      	str	r3, [r4, #0]
 801ec6a:	e7ec      	b.n	801ec46 <__ssvfiscanf_r+0x3e>
 801ec6c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ec6e:	4621      	mov	r1, r4
 801ec70:	4630      	mov	r0, r6
 801ec72:	4798      	blx	r3
 801ec74:	2800      	cmp	r0, #0
 801ec76:	d0e9      	beq.n	801ec4c <__ssvfiscanf_r+0x44>
 801ec78:	e7ed      	b.n	801ec56 <__ssvfiscanf_r+0x4e>
 801ec7a:	2b25      	cmp	r3, #37	; 0x25
 801ec7c:	d012      	beq.n	801eca4 <__ssvfiscanf_r+0x9c>
 801ec7e:	469a      	mov	sl, r3
 801ec80:	6863      	ldr	r3, [r4, #4]
 801ec82:	2b00      	cmp	r3, #0
 801ec84:	f340 8091 	ble.w	801edaa <__ssvfiscanf_r+0x1a2>
 801ec88:	6822      	ldr	r2, [r4, #0]
 801ec8a:	7813      	ldrb	r3, [r2, #0]
 801ec8c:	4553      	cmp	r3, sl
 801ec8e:	f040 812e 	bne.w	801eeee <__ssvfiscanf_r+0x2e6>
 801ec92:	6863      	ldr	r3, [r4, #4]
 801ec94:	3b01      	subs	r3, #1
 801ec96:	6063      	str	r3, [r4, #4]
 801ec98:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801ec9a:	3201      	adds	r2, #1
 801ec9c:	3301      	adds	r3, #1
 801ec9e:	6022      	str	r2, [r4, #0]
 801eca0:	9345      	str	r3, [sp, #276]	; 0x114
 801eca2:	e7d8      	b.n	801ec56 <__ssvfiscanf_r+0x4e>
 801eca4:	9141      	str	r1, [sp, #260]	; 0x104
 801eca6:	9143      	str	r1, [sp, #268]	; 0x10c
 801eca8:	7853      	ldrb	r3, [r2, #1]
 801ecaa:	2b2a      	cmp	r3, #42	; 0x2a
 801ecac:	bf02      	ittt	eq
 801ecae:	2310      	moveq	r3, #16
 801ecb0:	1c95      	addeq	r5, r2, #2
 801ecb2:	9341      	streq	r3, [sp, #260]	; 0x104
 801ecb4:	220a      	movs	r2, #10
 801ecb6:	46aa      	mov	sl, r5
 801ecb8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801ecbc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801ecc0:	2b09      	cmp	r3, #9
 801ecc2:	d91c      	bls.n	801ecfe <__ssvfiscanf_r+0xf6>
 801ecc4:	487e      	ldr	r0, [pc, #504]	; (801eec0 <__ssvfiscanf_r+0x2b8>)
 801ecc6:	2203      	movs	r2, #3
 801ecc8:	f7e1 fa9a 	bl	8000200 <memchr>
 801eccc:	b138      	cbz	r0, 801ecde <__ssvfiscanf_r+0xd6>
 801ecce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801ecd0:	eba0 0009 	sub.w	r0, r0, r9
 801ecd4:	2301      	movs	r3, #1
 801ecd6:	4083      	lsls	r3, r0
 801ecd8:	4313      	orrs	r3, r2
 801ecda:	9341      	str	r3, [sp, #260]	; 0x104
 801ecdc:	4655      	mov	r5, sl
 801ecde:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ece2:	2b78      	cmp	r3, #120	; 0x78
 801ece4:	d806      	bhi.n	801ecf4 <__ssvfiscanf_r+0xec>
 801ece6:	2b57      	cmp	r3, #87	; 0x57
 801ece8:	d810      	bhi.n	801ed0c <__ssvfiscanf_r+0x104>
 801ecea:	2b25      	cmp	r3, #37	; 0x25
 801ecec:	d0c7      	beq.n	801ec7e <__ssvfiscanf_r+0x76>
 801ecee:	d857      	bhi.n	801eda0 <__ssvfiscanf_r+0x198>
 801ecf0:	2b00      	cmp	r3, #0
 801ecf2:	d065      	beq.n	801edc0 <__ssvfiscanf_r+0x1b8>
 801ecf4:	2303      	movs	r3, #3
 801ecf6:	9347      	str	r3, [sp, #284]	; 0x11c
 801ecf8:	230a      	movs	r3, #10
 801ecfa:	9342      	str	r3, [sp, #264]	; 0x108
 801ecfc:	e076      	b.n	801edec <__ssvfiscanf_r+0x1e4>
 801ecfe:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801ed00:	fb02 1103 	mla	r1, r2, r3, r1
 801ed04:	3930      	subs	r1, #48	; 0x30
 801ed06:	9143      	str	r1, [sp, #268]	; 0x10c
 801ed08:	4655      	mov	r5, sl
 801ed0a:	e7d4      	b.n	801ecb6 <__ssvfiscanf_r+0xae>
 801ed0c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801ed10:	2a20      	cmp	r2, #32
 801ed12:	d8ef      	bhi.n	801ecf4 <__ssvfiscanf_r+0xec>
 801ed14:	a101      	add	r1, pc, #4	; (adr r1, 801ed1c <__ssvfiscanf_r+0x114>)
 801ed16:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ed1a:	bf00      	nop
 801ed1c:	0801edcf 	.word	0x0801edcf
 801ed20:	0801ecf5 	.word	0x0801ecf5
 801ed24:	0801ecf5 	.word	0x0801ecf5
 801ed28:	0801ee2d 	.word	0x0801ee2d
 801ed2c:	0801ecf5 	.word	0x0801ecf5
 801ed30:	0801ecf5 	.word	0x0801ecf5
 801ed34:	0801ecf5 	.word	0x0801ecf5
 801ed38:	0801ecf5 	.word	0x0801ecf5
 801ed3c:	0801ecf5 	.word	0x0801ecf5
 801ed40:	0801ecf5 	.word	0x0801ecf5
 801ed44:	0801ecf5 	.word	0x0801ecf5
 801ed48:	0801ee43 	.word	0x0801ee43
 801ed4c:	0801ee29 	.word	0x0801ee29
 801ed50:	0801eda7 	.word	0x0801eda7
 801ed54:	0801eda7 	.word	0x0801eda7
 801ed58:	0801eda7 	.word	0x0801eda7
 801ed5c:	0801ecf5 	.word	0x0801ecf5
 801ed60:	0801ede5 	.word	0x0801ede5
 801ed64:	0801ecf5 	.word	0x0801ecf5
 801ed68:	0801ecf5 	.word	0x0801ecf5
 801ed6c:	0801ecf5 	.word	0x0801ecf5
 801ed70:	0801ecf5 	.word	0x0801ecf5
 801ed74:	0801ee53 	.word	0x0801ee53
 801ed78:	0801ee21 	.word	0x0801ee21
 801ed7c:	0801edc7 	.word	0x0801edc7
 801ed80:	0801ecf5 	.word	0x0801ecf5
 801ed84:	0801ecf5 	.word	0x0801ecf5
 801ed88:	0801ee4f 	.word	0x0801ee4f
 801ed8c:	0801ecf5 	.word	0x0801ecf5
 801ed90:	0801ee29 	.word	0x0801ee29
 801ed94:	0801ecf5 	.word	0x0801ecf5
 801ed98:	0801ecf5 	.word	0x0801ecf5
 801ed9c:	0801edcf 	.word	0x0801edcf
 801eda0:	3b45      	subs	r3, #69	; 0x45
 801eda2:	2b02      	cmp	r3, #2
 801eda4:	d8a6      	bhi.n	801ecf4 <__ssvfiscanf_r+0xec>
 801eda6:	2305      	movs	r3, #5
 801eda8:	e01f      	b.n	801edea <__ssvfiscanf_r+0x1e2>
 801edaa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801edac:	4621      	mov	r1, r4
 801edae:	4630      	mov	r0, r6
 801edb0:	4798      	blx	r3
 801edb2:	2800      	cmp	r0, #0
 801edb4:	f43f af68 	beq.w	801ec88 <__ssvfiscanf_r+0x80>
 801edb8:	9844      	ldr	r0, [sp, #272]	; 0x110
 801edba:	2800      	cmp	r0, #0
 801edbc:	f040 808d 	bne.w	801eeda <__ssvfiscanf_r+0x2d2>
 801edc0:	f04f 30ff 	mov.w	r0, #4294967295
 801edc4:	e08f      	b.n	801eee6 <__ssvfiscanf_r+0x2de>
 801edc6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801edc8:	f042 0220 	orr.w	r2, r2, #32
 801edcc:	9241      	str	r2, [sp, #260]	; 0x104
 801edce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801edd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801edd4:	9241      	str	r2, [sp, #260]	; 0x104
 801edd6:	2210      	movs	r2, #16
 801edd8:	2b6f      	cmp	r3, #111	; 0x6f
 801edda:	9242      	str	r2, [sp, #264]	; 0x108
 801eddc:	bf34      	ite	cc
 801edde:	2303      	movcc	r3, #3
 801ede0:	2304      	movcs	r3, #4
 801ede2:	e002      	b.n	801edea <__ssvfiscanf_r+0x1e2>
 801ede4:	2300      	movs	r3, #0
 801ede6:	9342      	str	r3, [sp, #264]	; 0x108
 801ede8:	2303      	movs	r3, #3
 801edea:	9347      	str	r3, [sp, #284]	; 0x11c
 801edec:	6863      	ldr	r3, [r4, #4]
 801edee:	2b00      	cmp	r3, #0
 801edf0:	dd3d      	ble.n	801ee6e <__ssvfiscanf_r+0x266>
 801edf2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801edf4:	0659      	lsls	r1, r3, #25
 801edf6:	d404      	bmi.n	801ee02 <__ssvfiscanf_r+0x1fa>
 801edf8:	6823      	ldr	r3, [r4, #0]
 801edfa:	781a      	ldrb	r2, [r3, #0]
 801edfc:	5cba      	ldrb	r2, [r7, r2]
 801edfe:	0712      	lsls	r2, r2, #28
 801ee00:	d43c      	bmi.n	801ee7c <__ssvfiscanf_r+0x274>
 801ee02:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801ee04:	2b02      	cmp	r3, #2
 801ee06:	dc4b      	bgt.n	801eea0 <__ssvfiscanf_r+0x298>
 801ee08:	466b      	mov	r3, sp
 801ee0a:	4622      	mov	r2, r4
 801ee0c:	a941      	add	r1, sp, #260	; 0x104
 801ee0e:	4630      	mov	r0, r6
 801ee10:	f000 f9b6 	bl	801f180 <_scanf_chars>
 801ee14:	2801      	cmp	r0, #1
 801ee16:	d06a      	beq.n	801eeee <__ssvfiscanf_r+0x2e6>
 801ee18:	2802      	cmp	r0, #2
 801ee1a:	f47f af1c 	bne.w	801ec56 <__ssvfiscanf_r+0x4e>
 801ee1e:	e7cb      	b.n	801edb8 <__ssvfiscanf_r+0x1b0>
 801ee20:	2308      	movs	r3, #8
 801ee22:	9342      	str	r3, [sp, #264]	; 0x108
 801ee24:	2304      	movs	r3, #4
 801ee26:	e7e0      	b.n	801edea <__ssvfiscanf_r+0x1e2>
 801ee28:	220a      	movs	r2, #10
 801ee2a:	e7d5      	b.n	801edd8 <__ssvfiscanf_r+0x1d0>
 801ee2c:	4629      	mov	r1, r5
 801ee2e:	4640      	mov	r0, r8
 801ee30:	f000 fc04 	bl	801f63c <__sccl>
 801ee34:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ee36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ee3a:	9341      	str	r3, [sp, #260]	; 0x104
 801ee3c:	4605      	mov	r5, r0
 801ee3e:	2301      	movs	r3, #1
 801ee40:	e7d3      	b.n	801edea <__ssvfiscanf_r+0x1e2>
 801ee42:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ee44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ee48:	9341      	str	r3, [sp, #260]	; 0x104
 801ee4a:	2300      	movs	r3, #0
 801ee4c:	e7cd      	b.n	801edea <__ssvfiscanf_r+0x1e2>
 801ee4e:	2302      	movs	r3, #2
 801ee50:	e7cb      	b.n	801edea <__ssvfiscanf_r+0x1e2>
 801ee52:	9841      	ldr	r0, [sp, #260]	; 0x104
 801ee54:	06c3      	lsls	r3, r0, #27
 801ee56:	f53f aefe 	bmi.w	801ec56 <__ssvfiscanf_r+0x4e>
 801ee5a:	9b00      	ldr	r3, [sp, #0]
 801ee5c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801ee5e:	1d19      	adds	r1, r3, #4
 801ee60:	9100      	str	r1, [sp, #0]
 801ee62:	681b      	ldr	r3, [r3, #0]
 801ee64:	07c0      	lsls	r0, r0, #31
 801ee66:	bf4c      	ite	mi
 801ee68:	801a      	strhmi	r2, [r3, #0]
 801ee6a:	601a      	strpl	r2, [r3, #0]
 801ee6c:	e6f3      	b.n	801ec56 <__ssvfiscanf_r+0x4e>
 801ee6e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ee70:	4621      	mov	r1, r4
 801ee72:	4630      	mov	r0, r6
 801ee74:	4798      	blx	r3
 801ee76:	2800      	cmp	r0, #0
 801ee78:	d0bb      	beq.n	801edf2 <__ssvfiscanf_r+0x1ea>
 801ee7a:	e79d      	b.n	801edb8 <__ssvfiscanf_r+0x1b0>
 801ee7c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801ee7e:	3201      	adds	r2, #1
 801ee80:	9245      	str	r2, [sp, #276]	; 0x114
 801ee82:	6862      	ldr	r2, [r4, #4]
 801ee84:	3a01      	subs	r2, #1
 801ee86:	2a00      	cmp	r2, #0
 801ee88:	6062      	str	r2, [r4, #4]
 801ee8a:	dd02      	ble.n	801ee92 <__ssvfiscanf_r+0x28a>
 801ee8c:	3301      	adds	r3, #1
 801ee8e:	6023      	str	r3, [r4, #0]
 801ee90:	e7b2      	b.n	801edf8 <__ssvfiscanf_r+0x1f0>
 801ee92:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ee94:	4621      	mov	r1, r4
 801ee96:	4630      	mov	r0, r6
 801ee98:	4798      	blx	r3
 801ee9a:	2800      	cmp	r0, #0
 801ee9c:	d0ac      	beq.n	801edf8 <__ssvfiscanf_r+0x1f0>
 801ee9e:	e78b      	b.n	801edb8 <__ssvfiscanf_r+0x1b0>
 801eea0:	2b04      	cmp	r3, #4
 801eea2:	dc0f      	bgt.n	801eec4 <__ssvfiscanf_r+0x2bc>
 801eea4:	466b      	mov	r3, sp
 801eea6:	4622      	mov	r2, r4
 801eea8:	a941      	add	r1, sp, #260	; 0x104
 801eeaa:	4630      	mov	r0, r6
 801eeac:	f000 f9c2 	bl	801f234 <_scanf_i>
 801eeb0:	e7b0      	b.n	801ee14 <__ssvfiscanf_r+0x20c>
 801eeb2:	bf00      	nop
 801eeb4:	0801eb55 	.word	0x0801eb55
 801eeb8:	0801ebcf 	.word	0x0801ebcf
 801eebc:	080232a1 	.word	0x080232a1
 801eec0:	080233a7 	.word	0x080233a7
 801eec4:	4b0b      	ldr	r3, [pc, #44]	; (801eef4 <__ssvfiscanf_r+0x2ec>)
 801eec6:	2b00      	cmp	r3, #0
 801eec8:	f43f aec5 	beq.w	801ec56 <__ssvfiscanf_r+0x4e>
 801eecc:	466b      	mov	r3, sp
 801eece:	4622      	mov	r2, r4
 801eed0:	a941      	add	r1, sp, #260	; 0x104
 801eed2:	4630      	mov	r0, r6
 801eed4:	f7fc fca2 	bl	801b81c <_scanf_float>
 801eed8:	e79c      	b.n	801ee14 <__ssvfiscanf_r+0x20c>
 801eeda:	89a3      	ldrh	r3, [r4, #12]
 801eedc:	f013 0f40 	tst.w	r3, #64	; 0x40
 801eee0:	bf18      	it	ne
 801eee2:	f04f 30ff 	movne.w	r0, #4294967295
 801eee6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801eeea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eeee:	9844      	ldr	r0, [sp, #272]	; 0x110
 801eef0:	e7f9      	b.n	801eee6 <__ssvfiscanf_r+0x2de>
 801eef2:	bf00      	nop
 801eef4:	0801b81d 	.word	0x0801b81d

0801eef8 <__sfputc_r>:
 801eef8:	6893      	ldr	r3, [r2, #8]
 801eefa:	3b01      	subs	r3, #1
 801eefc:	2b00      	cmp	r3, #0
 801eefe:	b410      	push	{r4}
 801ef00:	6093      	str	r3, [r2, #8]
 801ef02:	da08      	bge.n	801ef16 <__sfputc_r+0x1e>
 801ef04:	6994      	ldr	r4, [r2, #24]
 801ef06:	42a3      	cmp	r3, r4
 801ef08:	db01      	blt.n	801ef0e <__sfputc_r+0x16>
 801ef0a:	290a      	cmp	r1, #10
 801ef0c:	d103      	bne.n	801ef16 <__sfputc_r+0x1e>
 801ef0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ef12:	f7fd b80a 	b.w	801bf2a <__swbuf_r>
 801ef16:	6813      	ldr	r3, [r2, #0]
 801ef18:	1c58      	adds	r0, r3, #1
 801ef1a:	6010      	str	r0, [r2, #0]
 801ef1c:	7019      	strb	r1, [r3, #0]
 801ef1e:	4608      	mov	r0, r1
 801ef20:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ef24:	4770      	bx	lr

0801ef26 <__sfputs_r>:
 801ef26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef28:	4606      	mov	r6, r0
 801ef2a:	460f      	mov	r7, r1
 801ef2c:	4614      	mov	r4, r2
 801ef2e:	18d5      	adds	r5, r2, r3
 801ef30:	42ac      	cmp	r4, r5
 801ef32:	d101      	bne.n	801ef38 <__sfputs_r+0x12>
 801ef34:	2000      	movs	r0, #0
 801ef36:	e007      	b.n	801ef48 <__sfputs_r+0x22>
 801ef38:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ef3c:	463a      	mov	r2, r7
 801ef3e:	4630      	mov	r0, r6
 801ef40:	f7ff ffda 	bl	801eef8 <__sfputc_r>
 801ef44:	1c43      	adds	r3, r0, #1
 801ef46:	d1f3      	bne.n	801ef30 <__sfputs_r+0xa>
 801ef48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ef4c <_vfiprintf_r>:
 801ef4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef50:	460d      	mov	r5, r1
 801ef52:	b09d      	sub	sp, #116	; 0x74
 801ef54:	4614      	mov	r4, r2
 801ef56:	4698      	mov	r8, r3
 801ef58:	4606      	mov	r6, r0
 801ef5a:	b118      	cbz	r0, 801ef64 <_vfiprintf_r+0x18>
 801ef5c:	6a03      	ldr	r3, [r0, #32]
 801ef5e:	b90b      	cbnz	r3, 801ef64 <_vfiprintf_r+0x18>
 801ef60:	f7fc fef8 	bl	801bd54 <__sinit>
 801ef64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ef66:	07d9      	lsls	r1, r3, #31
 801ef68:	d405      	bmi.n	801ef76 <_vfiprintf_r+0x2a>
 801ef6a:	89ab      	ldrh	r3, [r5, #12]
 801ef6c:	059a      	lsls	r2, r3, #22
 801ef6e:	d402      	bmi.n	801ef76 <_vfiprintf_r+0x2a>
 801ef70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ef72:	f7fd fa64 	bl	801c43e <__retarget_lock_acquire_recursive>
 801ef76:	89ab      	ldrh	r3, [r5, #12]
 801ef78:	071b      	lsls	r3, r3, #28
 801ef7a:	d501      	bpl.n	801ef80 <_vfiprintf_r+0x34>
 801ef7c:	692b      	ldr	r3, [r5, #16]
 801ef7e:	b99b      	cbnz	r3, 801efa8 <_vfiprintf_r+0x5c>
 801ef80:	4629      	mov	r1, r5
 801ef82:	4630      	mov	r0, r6
 801ef84:	f7fd f80e 	bl	801bfa4 <__swsetup_r>
 801ef88:	b170      	cbz	r0, 801efa8 <_vfiprintf_r+0x5c>
 801ef8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ef8c:	07dc      	lsls	r4, r3, #31
 801ef8e:	d504      	bpl.n	801ef9a <_vfiprintf_r+0x4e>
 801ef90:	f04f 30ff 	mov.w	r0, #4294967295
 801ef94:	b01d      	add	sp, #116	; 0x74
 801ef96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef9a:	89ab      	ldrh	r3, [r5, #12]
 801ef9c:	0598      	lsls	r0, r3, #22
 801ef9e:	d4f7      	bmi.n	801ef90 <_vfiprintf_r+0x44>
 801efa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801efa2:	f7fd fa4d 	bl	801c440 <__retarget_lock_release_recursive>
 801efa6:	e7f3      	b.n	801ef90 <_vfiprintf_r+0x44>
 801efa8:	2300      	movs	r3, #0
 801efaa:	9309      	str	r3, [sp, #36]	; 0x24
 801efac:	2320      	movs	r3, #32
 801efae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801efb2:	f8cd 800c 	str.w	r8, [sp, #12]
 801efb6:	2330      	movs	r3, #48	; 0x30
 801efb8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801f16c <_vfiprintf_r+0x220>
 801efbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801efc0:	f04f 0901 	mov.w	r9, #1
 801efc4:	4623      	mov	r3, r4
 801efc6:	469a      	mov	sl, r3
 801efc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801efcc:	b10a      	cbz	r2, 801efd2 <_vfiprintf_r+0x86>
 801efce:	2a25      	cmp	r2, #37	; 0x25
 801efd0:	d1f9      	bne.n	801efc6 <_vfiprintf_r+0x7a>
 801efd2:	ebba 0b04 	subs.w	fp, sl, r4
 801efd6:	d00b      	beq.n	801eff0 <_vfiprintf_r+0xa4>
 801efd8:	465b      	mov	r3, fp
 801efda:	4622      	mov	r2, r4
 801efdc:	4629      	mov	r1, r5
 801efde:	4630      	mov	r0, r6
 801efe0:	f7ff ffa1 	bl	801ef26 <__sfputs_r>
 801efe4:	3001      	adds	r0, #1
 801efe6:	f000 80a9 	beq.w	801f13c <_vfiprintf_r+0x1f0>
 801efea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801efec:	445a      	add	r2, fp
 801efee:	9209      	str	r2, [sp, #36]	; 0x24
 801eff0:	f89a 3000 	ldrb.w	r3, [sl]
 801eff4:	2b00      	cmp	r3, #0
 801eff6:	f000 80a1 	beq.w	801f13c <_vfiprintf_r+0x1f0>
 801effa:	2300      	movs	r3, #0
 801effc:	f04f 32ff 	mov.w	r2, #4294967295
 801f000:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f004:	f10a 0a01 	add.w	sl, sl, #1
 801f008:	9304      	str	r3, [sp, #16]
 801f00a:	9307      	str	r3, [sp, #28]
 801f00c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f010:	931a      	str	r3, [sp, #104]	; 0x68
 801f012:	4654      	mov	r4, sl
 801f014:	2205      	movs	r2, #5
 801f016:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f01a:	4854      	ldr	r0, [pc, #336]	; (801f16c <_vfiprintf_r+0x220>)
 801f01c:	f7e1 f8f0 	bl	8000200 <memchr>
 801f020:	9a04      	ldr	r2, [sp, #16]
 801f022:	b9d8      	cbnz	r0, 801f05c <_vfiprintf_r+0x110>
 801f024:	06d1      	lsls	r1, r2, #27
 801f026:	bf44      	itt	mi
 801f028:	2320      	movmi	r3, #32
 801f02a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f02e:	0713      	lsls	r3, r2, #28
 801f030:	bf44      	itt	mi
 801f032:	232b      	movmi	r3, #43	; 0x2b
 801f034:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f038:	f89a 3000 	ldrb.w	r3, [sl]
 801f03c:	2b2a      	cmp	r3, #42	; 0x2a
 801f03e:	d015      	beq.n	801f06c <_vfiprintf_r+0x120>
 801f040:	9a07      	ldr	r2, [sp, #28]
 801f042:	4654      	mov	r4, sl
 801f044:	2000      	movs	r0, #0
 801f046:	f04f 0c0a 	mov.w	ip, #10
 801f04a:	4621      	mov	r1, r4
 801f04c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f050:	3b30      	subs	r3, #48	; 0x30
 801f052:	2b09      	cmp	r3, #9
 801f054:	d94d      	bls.n	801f0f2 <_vfiprintf_r+0x1a6>
 801f056:	b1b0      	cbz	r0, 801f086 <_vfiprintf_r+0x13a>
 801f058:	9207      	str	r2, [sp, #28]
 801f05a:	e014      	b.n	801f086 <_vfiprintf_r+0x13a>
 801f05c:	eba0 0308 	sub.w	r3, r0, r8
 801f060:	fa09 f303 	lsl.w	r3, r9, r3
 801f064:	4313      	orrs	r3, r2
 801f066:	9304      	str	r3, [sp, #16]
 801f068:	46a2      	mov	sl, r4
 801f06a:	e7d2      	b.n	801f012 <_vfiprintf_r+0xc6>
 801f06c:	9b03      	ldr	r3, [sp, #12]
 801f06e:	1d19      	adds	r1, r3, #4
 801f070:	681b      	ldr	r3, [r3, #0]
 801f072:	9103      	str	r1, [sp, #12]
 801f074:	2b00      	cmp	r3, #0
 801f076:	bfbb      	ittet	lt
 801f078:	425b      	neglt	r3, r3
 801f07a:	f042 0202 	orrlt.w	r2, r2, #2
 801f07e:	9307      	strge	r3, [sp, #28]
 801f080:	9307      	strlt	r3, [sp, #28]
 801f082:	bfb8      	it	lt
 801f084:	9204      	strlt	r2, [sp, #16]
 801f086:	7823      	ldrb	r3, [r4, #0]
 801f088:	2b2e      	cmp	r3, #46	; 0x2e
 801f08a:	d10c      	bne.n	801f0a6 <_vfiprintf_r+0x15a>
 801f08c:	7863      	ldrb	r3, [r4, #1]
 801f08e:	2b2a      	cmp	r3, #42	; 0x2a
 801f090:	d134      	bne.n	801f0fc <_vfiprintf_r+0x1b0>
 801f092:	9b03      	ldr	r3, [sp, #12]
 801f094:	1d1a      	adds	r2, r3, #4
 801f096:	681b      	ldr	r3, [r3, #0]
 801f098:	9203      	str	r2, [sp, #12]
 801f09a:	2b00      	cmp	r3, #0
 801f09c:	bfb8      	it	lt
 801f09e:	f04f 33ff 	movlt.w	r3, #4294967295
 801f0a2:	3402      	adds	r4, #2
 801f0a4:	9305      	str	r3, [sp, #20]
 801f0a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801f17c <_vfiprintf_r+0x230>
 801f0aa:	7821      	ldrb	r1, [r4, #0]
 801f0ac:	2203      	movs	r2, #3
 801f0ae:	4650      	mov	r0, sl
 801f0b0:	f7e1 f8a6 	bl	8000200 <memchr>
 801f0b4:	b138      	cbz	r0, 801f0c6 <_vfiprintf_r+0x17a>
 801f0b6:	9b04      	ldr	r3, [sp, #16]
 801f0b8:	eba0 000a 	sub.w	r0, r0, sl
 801f0bc:	2240      	movs	r2, #64	; 0x40
 801f0be:	4082      	lsls	r2, r0
 801f0c0:	4313      	orrs	r3, r2
 801f0c2:	3401      	adds	r4, #1
 801f0c4:	9304      	str	r3, [sp, #16]
 801f0c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f0ca:	4829      	ldr	r0, [pc, #164]	; (801f170 <_vfiprintf_r+0x224>)
 801f0cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f0d0:	2206      	movs	r2, #6
 801f0d2:	f7e1 f895 	bl	8000200 <memchr>
 801f0d6:	2800      	cmp	r0, #0
 801f0d8:	d03f      	beq.n	801f15a <_vfiprintf_r+0x20e>
 801f0da:	4b26      	ldr	r3, [pc, #152]	; (801f174 <_vfiprintf_r+0x228>)
 801f0dc:	bb1b      	cbnz	r3, 801f126 <_vfiprintf_r+0x1da>
 801f0de:	9b03      	ldr	r3, [sp, #12]
 801f0e0:	3307      	adds	r3, #7
 801f0e2:	f023 0307 	bic.w	r3, r3, #7
 801f0e6:	3308      	adds	r3, #8
 801f0e8:	9303      	str	r3, [sp, #12]
 801f0ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f0ec:	443b      	add	r3, r7
 801f0ee:	9309      	str	r3, [sp, #36]	; 0x24
 801f0f0:	e768      	b.n	801efc4 <_vfiprintf_r+0x78>
 801f0f2:	fb0c 3202 	mla	r2, ip, r2, r3
 801f0f6:	460c      	mov	r4, r1
 801f0f8:	2001      	movs	r0, #1
 801f0fa:	e7a6      	b.n	801f04a <_vfiprintf_r+0xfe>
 801f0fc:	2300      	movs	r3, #0
 801f0fe:	3401      	adds	r4, #1
 801f100:	9305      	str	r3, [sp, #20]
 801f102:	4619      	mov	r1, r3
 801f104:	f04f 0c0a 	mov.w	ip, #10
 801f108:	4620      	mov	r0, r4
 801f10a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f10e:	3a30      	subs	r2, #48	; 0x30
 801f110:	2a09      	cmp	r2, #9
 801f112:	d903      	bls.n	801f11c <_vfiprintf_r+0x1d0>
 801f114:	2b00      	cmp	r3, #0
 801f116:	d0c6      	beq.n	801f0a6 <_vfiprintf_r+0x15a>
 801f118:	9105      	str	r1, [sp, #20]
 801f11a:	e7c4      	b.n	801f0a6 <_vfiprintf_r+0x15a>
 801f11c:	fb0c 2101 	mla	r1, ip, r1, r2
 801f120:	4604      	mov	r4, r0
 801f122:	2301      	movs	r3, #1
 801f124:	e7f0      	b.n	801f108 <_vfiprintf_r+0x1bc>
 801f126:	ab03      	add	r3, sp, #12
 801f128:	9300      	str	r3, [sp, #0]
 801f12a:	462a      	mov	r2, r5
 801f12c:	4b12      	ldr	r3, [pc, #72]	; (801f178 <_vfiprintf_r+0x22c>)
 801f12e:	a904      	add	r1, sp, #16
 801f130:	4630      	mov	r0, r6
 801f132:	f7fb ffad 	bl	801b090 <_printf_float>
 801f136:	4607      	mov	r7, r0
 801f138:	1c78      	adds	r0, r7, #1
 801f13a:	d1d6      	bne.n	801f0ea <_vfiprintf_r+0x19e>
 801f13c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f13e:	07d9      	lsls	r1, r3, #31
 801f140:	d405      	bmi.n	801f14e <_vfiprintf_r+0x202>
 801f142:	89ab      	ldrh	r3, [r5, #12]
 801f144:	059a      	lsls	r2, r3, #22
 801f146:	d402      	bmi.n	801f14e <_vfiprintf_r+0x202>
 801f148:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f14a:	f7fd f979 	bl	801c440 <__retarget_lock_release_recursive>
 801f14e:	89ab      	ldrh	r3, [r5, #12]
 801f150:	065b      	lsls	r3, r3, #25
 801f152:	f53f af1d 	bmi.w	801ef90 <_vfiprintf_r+0x44>
 801f156:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f158:	e71c      	b.n	801ef94 <_vfiprintf_r+0x48>
 801f15a:	ab03      	add	r3, sp, #12
 801f15c:	9300      	str	r3, [sp, #0]
 801f15e:	462a      	mov	r2, r5
 801f160:	4b05      	ldr	r3, [pc, #20]	; (801f178 <_vfiprintf_r+0x22c>)
 801f162:	a904      	add	r1, sp, #16
 801f164:	4630      	mov	r0, r6
 801f166:	f7fc fa37 	bl	801b5d8 <_printf_i>
 801f16a:	e7e4      	b.n	801f136 <_vfiprintf_r+0x1ea>
 801f16c:	080233a1 	.word	0x080233a1
 801f170:	080233ab 	.word	0x080233ab
 801f174:	0801b091 	.word	0x0801b091
 801f178:	0801ef27 	.word	0x0801ef27
 801f17c:	080233a7 	.word	0x080233a7

0801f180 <_scanf_chars>:
 801f180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f184:	4615      	mov	r5, r2
 801f186:	688a      	ldr	r2, [r1, #8]
 801f188:	4680      	mov	r8, r0
 801f18a:	460c      	mov	r4, r1
 801f18c:	b932      	cbnz	r2, 801f19c <_scanf_chars+0x1c>
 801f18e:	698a      	ldr	r2, [r1, #24]
 801f190:	2a00      	cmp	r2, #0
 801f192:	bf0c      	ite	eq
 801f194:	2201      	moveq	r2, #1
 801f196:	f04f 32ff 	movne.w	r2, #4294967295
 801f19a:	608a      	str	r2, [r1, #8]
 801f19c:	6822      	ldr	r2, [r4, #0]
 801f19e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801f230 <_scanf_chars+0xb0>
 801f1a2:	06d1      	lsls	r1, r2, #27
 801f1a4:	bf5f      	itttt	pl
 801f1a6:	681a      	ldrpl	r2, [r3, #0]
 801f1a8:	1d11      	addpl	r1, r2, #4
 801f1aa:	6019      	strpl	r1, [r3, #0]
 801f1ac:	6816      	ldrpl	r6, [r2, #0]
 801f1ae:	2700      	movs	r7, #0
 801f1b0:	69a0      	ldr	r0, [r4, #24]
 801f1b2:	b188      	cbz	r0, 801f1d8 <_scanf_chars+0x58>
 801f1b4:	2801      	cmp	r0, #1
 801f1b6:	d107      	bne.n	801f1c8 <_scanf_chars+0x48>
 801f1b8:	682a      	ldr	r2, [r5, #0]
 801f1ba:	7811      	ldrb	r1, [r2, #0]
 801f1bc:	6962      	ldr	r2, [r4, #20]
 801f1be:	5c52      	ldrb	r2, [r2, r1]
 801f1c0:	b952      	cbnz	r2, 801f1d8 <_scanf_chars+0x58>
 801f1c2:	2f00      	cmp	r7, #0
 801f1c4:	d031      	beq.n	801f22a <_scanf_chars+0xaa>
 801f1c6:	e022      	b.n	801f20e <_scanf_chars+0x8e>
 801f1c8:	2802      	cmp	r0, #2
 801f1ca:	d120      	bne.n	801f20e <_scanf_chars+0x8e>
 801f1cc:	682b      	ldr	r3, [r5, #0]
 801f1ce:	781b      	ldrb	r3, [r3, #0]
 801f1d0:	f819 3003 	ldrb.w	r3, [r9, r3]
 801f1d4:	071b      	lsls	r3, r3, #28
 801f1d6:	d41a      	bmi.n	801f20e <_scanf_chars+0x8e>
 801f1d8:	6823      	ldr	r3, [r4, #0]
 801f1da:	06da      	lsls	r2, r3, #27
 801f1dc:	bf5e      	ittt	pl
 801f1de:	682b      	ldrpl	r3, [r5, #0]
 801f1e0:	781b      	ldrbpl	r3, [r3, #0]
 801f1e2:	f806 3b01 	strbpl.w	r3, [r6], #1
 801f1e6:	682a      	ldr	r2, [r5, #0]
 801f1e8:	686b      	ldr	r3, [r5, #4]
 801f1ea:	3201      	adds	r2, #1
 801f1ec:	602a      	str	r2, [r5, #0]
 801f1ee:	68a2      	ldr	r2, [r4, #8]
 801f1f0:	3b01      	subs	r3, #1
 801f1f2:	3a01      	subs	r2, #1
 801f1f4:	606b      	str	r3, [r5, #4]
 801f1f6:	3701      	adds	r7, #1
 801f1f8:	60a2      	str	r2, [r4, #8]
 801f1fa:	b142      	cbz	r2, 801f20e <_scanf_chars+0x8e>
 801f1fc:	2b00      	cmp	r3, #0
 801f1fe:	dcd7      	bgt.n	801f1b0 <_scanf_chars+0x30>
 801f200:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801f204:	4629      	mov	r1, r5
 801f206:	4640      	mov	r0, r8
 801f208:	4798      	blx	r3
 801f20a:	2800      	cmp	r0, #0
 801f20c:	d0d0      	beq.n	801f1b0 <_scanf_chars+0x30>
 801f20e:	6823      	ldr	r3, [r4, #0]
 801f210:	f013 0310 	ands.w	r3, r3, #16
 801f214:	d105      	bne.n	801f222 <_scanf_chars+0xa2>
 801f216:	68e2      	ldr	r2, [r4, #12]
 801f218:	3201      	adds	r2, #1
 801f21a:	60e2      	str	r2, [r4, #12]
 801f21c:	69a2      	ldr	r2, [r4, #24]
 801f21e:	b102      	cbz	r2, 801f222 <_scanf_chars+0xa2>
 801f220:	7033      	strb	r3, [r6, #0]
 801f222:	6923      	ldr	r3, [r4, #16]
 801f224:	443b      	add	r3, r7
 801f226:	6123      	str	r3, [r4, #16]
 801f228:	2000      	movs	r0, #0
 801f22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f22e:	bf00      	nop
 801f230:	080232a1 	.word	0x080232a1

0801f234 <_scanf_i>:
 801f234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f238:	4698      	mov	r8, r3
 801f23a:	4b74      	ldr	r3, [pc, #464]	; (801f40c <_scanf_i+0x1d8>)
 801f23c:	460c      	mov	r4, r1
 801f23e:	4682      	mov	sl, r0
 801f240:	4616      	mov	r6, r2
 801f242:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801f246:	b087      	sub	sp, #28
 801f248:	ab03      	add	r3, sp, #12
 801f24a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801f24e:	4b70      	ldr	r3, [pc, #448]	; (801f410 <_scanf_i+0x1dc>)
 801f250:	69a1      	ldr	r1, [r4, #24]
 801f252:	4a70      	ldr	r2, [pc, #448]	; (801f414 <_scanf_i+0x1e0>)
 801f254:	2903      	cmp	r1, #3
 801f256:	bf18      	it	ne
 801f258:	461a      	movne	r2, r3
 801f25a:	68a3      	ldr	r3, [r4, #8]
 801f25c:	9201      	str	r2, [sp, #4]
 801f25e:	1e5a      	subs	r2, r3, #1
 801f260:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801f264:	bf88      	it	hi
 801f266:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801f26a:	4627      	mov	r7, r4
 801f26c:	bf82      	ittt	hi
 801f26e:	eb03 0905 	addhi.w	r9, r3, r5
 801f272:	f240 135d 	movwhi	r3, #349	; 0x15d
 801f276:	60a3      	strhi	r3, [r4, #8]
 801f278:	f857 3b1c 	ldr.w	r3, [r7], #28
 801f27c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801f280:	bf98      	it	ls
 801f282:	f04f 0900 	movls.w	r9, #0
 801f286:	6023      	str	r3, [r4, #0]
 801f288:	463d      	mov	r5, r7
 801f28a:	f04f 0b00 	mov.w	fp, #0
 801f28e:	6831      	ldr	r1, [r6, #0]
 801f290:	ab03      	add	r3, sp, #12
 801f292:	7809      	ldrb	r1, [r1, #0]
 801f294:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801f298:	2202      	movs	r2, #2
 801f29a:	f7e0 ffb1 	bl	8000200 <memchr>
 801f29e:	b328      	cbz	r0, 801f2ec <_scanf_i+0xb8>
 801f2a0:	f1bb 0f01 	cmp.w	fp, #1
 801f2a4:	d159      	bne.n	801f35a <_scanf_i+0x126>
 801f2a6:	6862      	ldr	r2, [r4, #4]
 801f2a8:	b92a      	cbnz	r2, 801f2b6 <_scanf_i+0x82>
 801f2aa:	6822      	ldr	r2, [r4, #0]
 801f2ac:	2308      	movs	r3, #8
 801f2ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f2b2:	6063      	str	r3, [r4, #4]
 801f2b4:	6022      	str	r2, [r4, #0]
 801f2b6:	6822      	ldr	r2, [r4, #0]
 801f2b8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801f2bc:	6022      	str	r2, [r4, #0]
 801f2be:	68a2      	ldr	r2, [r4, #8]
 801f2c0:	1e51      	subs	r1, r2, #1
 801f2c2:	60a1      	str	r1, [r4, #8]
 801f2c4:	b192      	cbz	r2, 801f2ec <_scanf_i+0xb8>
 801f2c6:	6832      	ldr	r2, [r6, #0]
 801f2c8:	1c51      	adds	r1, r2, #1
 801f2ca:	6031      	str	r1, [r6, #0]
 801f2cc:	7812      	ldrb	r2, [r2, #0]
 801f2ce:	f805 2b01 	strb.w	r2, [r5], #1
 801f2d2:	6872      	ldr	r2, [r6, #4]
 801f2d4:	3a01      	subs	r2, #1
 801f2d6:	2a00      	cmp	r2, #0
 801f2d8:	6072      	str	r2, [r6, #4]
 801f2da:	dc07      	bgt.n	801f2ec <_scanf_i+0xb8>
 801f2dc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801f2e0:	4631      	mov	r1, r6
 801f2e2:	4650      	mov	r0, sl
 801f2e4:	4790      	blx	r2
 801f2e6:	2800      	cmp	r0, #0
 801f2e8:	f040 8085 	bne.w	801f3f6 <_scanf_i+0x1c2>
 801f2ec:	f10b 0b01 	add.w	fp, fp, #1
 801f2f0:	f1bb 0f03 	cmp.w	fp, #3
 801f2f4:	d1cb      	bne.n	801f28e <_scanf_i+0x5a>
 801f2f6:	6863      	ldr	r3, [r4, #4]
 801f2f8:	b90b      	cbnz	r3, 801f2fe <_scanf_i+0xca>
 801f2fa:	230a      	movs	r3, #10
 801f2fc:	6063      	str	r3, [r4, #4]
 801f2fe:	6863      	ldr	r3, [r4, #4]
 801f300:	4945      	ldr	r1, [pc, #276]	; (801f418 <_scanf_i+0x1e4>)
 801f302:	6960      	ldr	r0, [r4, #20]
 801f304:	1ac9      	subs	r1, r1, r3
 801f306:	f000 f999 	bl	801f63c <__sccl>
 801f30a:	f04f 0b00 	mov.w	fp, #0
 801f30e:	68a3      	ldr	r3, [r4, #8]
 801f310:	6822      	ldr	r2, [r4, #0]
 801f312:	2b00      	cmp	r3, #0
 801f314:	d03d      	beq.n	801f392 <_scanf_i+0x15e>
 801f316:	6831      	ldr	r1, [r6, #0]
 801f318:	6960      	ldr	r0, [r4, #20]
 801f31a:	f891 c000 	ldrb.w	ip, [r1]
 801f31e:	f810 000c 	ldrb.w	r0, [r0, ip]
 801f322:	2800      	cmp	r0, #0
 801f324:	d035      	beq.n	801f392 <_scanf_i+0x15e>
 801f326:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801f32a:	d124      	bne.n	801f376 <_scanf_i+0x142>
 801f32c:	0510      	lsls	r0, r2, #20
 801f32e:	d522      	bpl.n	801f376 <_scanf_i+0x142>
 801f330:	f10b 0b01 	add.w	fp, fp, #1
 801f334:	f1b9 0f00 	cmp.w	r9, #0
 801f338:	d003      	beq.n	801f342 <_scanf_i+0x10e>
 801f33a:	3301      	adds	r3, #1
 801f33c:	f109 39ff 	add.w	r9, r9, #4294967295
 801f340:	60a3      	str	r3, [r4, #8]
 801f342:	6873      	ldr	r3, [r6, #4]
 801f344:	3b01      	subs	r3, #1
 801f346:	2b00      	cmp	r3, #0
 801f348:	6073      	str	r3, [r6, #4]
 801f34a:	dd1b      	ble.n	801f384 <_scanf_i+0x150>
 801f34c:	6833      	ldr	r3, [r6, #0]
 801f34e:	3301      	adds	r3, #1
 801f350:	6033      	str	r3, [r6, #0]
 801f352:	68a3      	ldr	r3, [r4, #8]
 801f354:	3b01      	subs	r3, #1
 801f356:	60a3      	str	r3, [r4, #8]
 801f358:	e7d9      	b.n	801f30e <_scanf_i+0xda>
 801f35a:	f1bb 0f02 	cmp.w	fp, #2
 801f35e:	d1ae      	bne.n	801f2be <_scanf_i+0x8a>
 801f360:	6822      	ldr	r2, [r4, #0]
 801f362:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801f366:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801f36a:	d1bf      	bne.n	801f2ec <_scanf_i+0xb8>
 801f36c:	2310      	movs	r3, #16
 801f36e:	6063      	str	r3, [r4, #4]
 801f370:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f374:	e7a2      	b.n	801f2bc <_scanf_i+0x88>
 801f376:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801f37a:	6022      	str	r2, [r4, #0]
 801f37c:	780b      	ldrb	r3, [r1, #0]
 801f37e:	f805 3b01 	strb.w	r3, [r5], #1
 801f382:	e7de      	b.n	801f342 <_scanf_i+0x10e>
 801f384:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801f388:	4631      	mov	r1, r6
 801f38a:	4650      	mov	r0, sl
 801f38c:	4798      	blx	r3
 801f38e:	2800      	cmp	r0, #0
 801f390:	d0df      	beq.n	801f352 <_scanf_i+0x11e>
 801f392:	6823      	ldr	r3, [r4, #0]
 801f394:	05d9      	lsls	r1, r3, #23
 801f396:	d50d      	bpl.n	801f3b4 <_scanf_i+0x180>
 801f398:	42bd      	cmp	r5, r7
 801f39a:	d909      	bls.n	801f3b0 <_scanf_i+0x17c>
 801f39c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801f3a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f3a4:	4632      	mov	r2, r6
 801f3a6:	4650      	mov	r0, sl
 801f3a8:	4798      	blx	r3
 801f3aa:	f105 39ff 	add.w	r9, r5, #4294967295
 801f3ae:	464d      	mov	r5, r9
 801f3b0:	42bd      	cmp	r5, r7
 801f3b2:	d028      	beq.n	801f406 <_scanf_i+0x1d2>
 801f3b4:	6822      	ldr	r2, [r4, #0]
 801f3b6:	f012 0210 	ands.w	r2, r2, #16
 801f3ba:	d113      	bne.n	801f3e4 <_scanf_i+0x1b0>
 801f3bc:	702a      	strb	r2, [r5, #0]
 801f3be:	6863      	ldr	r3, [r4, #4]
 801f3c0:	9e01      	ldr	r6, [sp, #4]
 801f3c2:	4639      	mov	r1, r7
 801f3c4:	4650      	mov	r0, sl
 801f3c6:	47b0      	blx	r6
 801f3c8:	f8d8 3000 	ldr.w	r3, [r8]
 801f3cc:	6821      	ldr	r1, [r4, #0]
 801f3ce:	1d1a      	adds	r2, r3, #4
 801f3d0:	f8c8 2000 	str.w	r2, [r8]
 801f3d4:	f011 0f20 	tst.w	r1, #32
 801f3d8:	681b      	ldr	r3, [r3, #0]
 801f3da:	d00f      	beq.n	801f3fc <_scanf_i+0x1c8>
 801f3dc:	6018      	str	r0, [r3, #0]
 801f3de:	68e3      	ldr	r3, [r4, #12]
 801f3e0:	3301      	adds	r3, #1
 801f3e2:	60e3      	str	r3, [r4, #12]
 801f3e4:	6923      	ldr	r3, [r4, #16]
 801f3e6:	1bed      	subs	r5, r5, r7
 801f3e8:	445d      	add	r5, fp
 801f3ea:	442b      	add	r3, r5
 801f3ec:	6123      	str	r3, [r4, #16]
 801f3ee:	2000      	movs	r0, #0
 801f3f0:	b007      	add	sp, #28
 801f3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3f6:	f04f 0b00 	mov.w	fp, #0
 801f3fa:	e7ca      	b.n	801f392 <_scanf_i+0x15e>
 801f3fc:	07ca      	lsls	r2, r1, #31
 801f3fe:	bf4c      	ite	mi
 801f400:	8018      	strhmi	r0, [r3, #0]
 801f402:	6018      	strpl	r0, [r3, #0]
 801f404:	e7eb      	b.n	801f3de <_scanf_i+0x1aa>
 801f406:	2001      	movs	r0, #1
 801f408:	e7f2      	b.n	801f3f0 <_scanf_i+0x1bc>
 801f40a:	bf00      	nop
 801f40c:	080224b8 	.word	0x080224b8
 801f410:	08020015 	.word	0x08020015
 801f414:	0801e8a1 	.word	0x0801e8a1
 801f418:	080233c2 	.word	0x080233c2

0801f41c <__sflush_r>:
 801f41c:	898a      	ldrh	r2, [r1, #12]
 801f41e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f422:	4605      	mov	r5, r0
 801f424:	0710      	lsls	r0, r2, #28
 801f426:	460c      	mov	r4, r1
 801f428:	d458      	bmi.n	801f4dc <__sflush_r+0xc0>
 801f42a:	684b      	ldr	r3, [r1, #4]
 801f42c:	2b00      	cmp	r3, #0
 801f42e:	dc05      	bgt.n	801f43c <__sflush_r+0x20>
 801f430:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f432:	2b00      	cmp	r3, #0
 801f434:	dc02      	bgt.n	801f43c <__sflush_r+0x20>
 801f436:	2000      	movs	r0, #0
 801f438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f43c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f43e:	2e00      	cmp	r6, #0
 801f440:	d0f9      	beq.n	801f436 <__sflush_r+0x1a>
 801f442:	2300      	movs	r3, #0
 801f444:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f448:	682f      	ldr	r7, [r5, #0]
 801f44a:	6a21      	ldr	r1, [r4, #32]
 801f44c:	602b      	str	r3, [r5, #0]
 801f44e:	d032      	beq.n	801f4b6 <__sflush_r+0x9a>
 801f450:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f452:	89a3      	ldrh	r3, [r4, #12]
 801f454:	075a      	lsls	r2, r3, #29
 801f456:	d505      	bpl.n	801f464 <__sflush_r+0x48>
 801f458:	6863      	ldr	r3, [r4, #4]
 801f45a:	1ac0      	subs	r0, r0, r3
 801f45c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f45e:	b10b      	cbz	r3, 801f464 <__sflush_r+0x48>
 801f460:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f462:	1ac0      	subs	r0, r0, r3
 801f464:	2300      	movs	r3, #0
 801f466:	4602      	mov	r2, r0
 801f468:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f46a:	6a21      	ldr	r1, [r4, #32]
 801f46c:	4628      	mov	r0, r5
 801f46e:	47b0      	blx	r6
 801f470:	1c43      	adds	r3, r0, #1
 801f472:	89a3      	ldrh	r3, [r4, #12]
 801f474:	d106      	bne.n	801f484 <__sflush_r+0x68>
 801f476:	6829      	ldr	r1, [r5, #0]
 801f478:	291d      	cmp	r1, #29
 801f47a:	d82b      	bhi.n	801f4d4 <__sflush_r+0xb8>
 801f47c:	4a29      	ldr	r2, [pc, #164]	; (801f524 <__sflush_r+0x108>)
 801f47e:	410a      	asrs	r2, r1
 801f480:	07d6      	lsls	r6, r2, #31
 801f482:	d427      	bmi.n	801f4d4 <__sflush_r+0xb8>
 801f484:	2200      	movs	r2, #0
 801f486:	6062      	str	r2, [r4, #4]
 801f488:	04d9      	lsls	r1, r3, #19
 801f48a:	6922      	ldr	r2, [r4, #16]
 801f48c:	6022      	str	r2, [r4, #0]
 801f48e:	d504      	bpl.n	801f49a <__sflush_r+0x7e>
 801f490:	1c42      	adds	r2, r0, #1
 801f492:	d101      	bne.n	801f498 <__sflush_r+0x7c>
 801f494:	682b      	ldr	r3, [r5, #0]
 801f496:	b903      	cbnz	r3, 801f49a <__sflush_r+0x7e>
 801f498:	6560      	str	r0, [r4, #84]	; 0x54
 801f49a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f49c:	602f      	str	r7, [r5, #0]
 801f49e:	2900      	cmp	r1, #0
 801f4a0:	d0c9      	beq.n	801f436 <__sflush_r+0x1a>
 801f4a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f4a6:	4299      	cmp	r1, r3
 801f4a8:	d002      	beq.n	801f4b0 <__sflush_r+0x94>
 801f4aa:	4628      	mov	r0, r5
 801f4ac:	f7fd fe6a 	bl	801d184 <_free_r>
 801f4b0:	2000      	movs	r0, #0
 801f4b2:	6360      	str	r0, [r4, #52]	; 0x34
 801f4b4:	e7c0      	b.n	801f438 <__sflush_r+0x1c>
 801f4b6:	2301      	movs	r3, #1
 801f4b8:	4628      	mov	r0, r5
 801f4ba:	47b0      	blx	r6
 801f4bc:	1c41      	adds	r1, r0, #1
 801f4be:	d1c8      	bne.n	801f452 <__sflush_r+0x36>
 801f4c0:	682b      	ldr	r3, [r5, #0]
 801f4c2:	2b00      	cmp	r3, #0
 801f4c4:	d0c5      	beq.n	801f452 <__sflush_r+0x36>
 801f4c6:	2b1d      	cmp	r3, #29
 801f4c8:	d001      	beq.n	801f4ce <__sflush_r+0xb2>
 801f4ca:	2b16      	cmp	r3, #22
 801f4cc:	d101      	bne.n	801f4d2 <__sflush_r+0xb6>
 801f4ce:	602f      	str	r7, [r5, #0]
 801f4d0:	e7b1      	b.n	801f436 <__sflush_r+0x1a>
 801f4d2:	89a3      	ldrh	r3, [r4, #12]
 801f4d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f4d8:	81a3      	strh	r3, [r4, #12]
 801f4da:	e7ad      	b.n	801f438 <__sflush_r+0x1c>
 801f4dc:	690f      	ldr	r7, [r1, #16]
 801f4de:	2f00      	cmp	r7, #0
 801f4e0:	d0a9      	beq.n	801f436 <__sflush_r+0x1a>
 801f4e2:	0793      	lsls	r3, r2, #30
 801f4e4:	680e      	ldr	r6, [r1, #0]
 801f4e6:	bf08      	it	eq
 801f4e8:	694b      	ldreq	r3, [r1, #20]
 801f4ea:	600f      	str	r7, [r1, #0]
 801f4ec:	bf18      	it	ne
 801f4ee:	2300      	movne	r3, #0
 801f4f0:	eba6 0807 	sub.w	r8, r6, r7
 801f4f4:	608b      	str	r3, [r1, #8]
 801f4f6:	f1b8 0f00 	cmp.w	r8, #0
 801f4fa:	dd9c      	ble.n	801f436 <__sflush_r+0x1a>
 801f4fc:	6a21      	ldr	r1, [r4, #32]
 801f4fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f500:	4643      	mov	r3, r8
 801f502:	463a      	mov	r2, r7
 801f504:	4628      	mov	r0, r5
 801f506:	47b0      	blx	r6
 801f508:	2800      	cmp	r0, #0
 801f50a:	dc06      	bgt.n	801f51a <__sflush_r+0xfe>
 801f50c:	89a3      	ldrh	r3, [r4, #12]
 801f50e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f512:	81a3      	strh	r3, [r4, #12]
 801f514:	f04f 30ff 	mov.w	r0, #4294967295
 801f518:	e78e      	b.n	801f438 <__sflush_r+0x1c>
 801f51a:	4407      	add	r7, r0
 801f51c:	eba8 0800 	sub.w	r8, r8, r0
 801f520:	e7e9      	b.n	801f4f6 <__sflush_r+0xda>
 801f522:	bf00      	nop
 801f524:	dfbffffe 	.word	0xdfbffffe

0801f528 <_fflush_r>:
 801f528:	b538      	push	{r3, r4, r5, lr}
 801f52a:	690b      	ldr	r3, [r1, #16]
 801f52c:	4605      	mov	r5, r0
 801f52e:	460c      	mov	r4, r1
 801f530:	b913      	cbnz	r3, 801f538 <_fflush_r+0x10>
 801f532:	2500      	movs	r5, #0
 801f534:	4628      	mov	r0, r5
 801f536:	bd38      	pop	{r3, r4, r5, pc}
 801f538:	b118      	cbz	r0, 801f542 <_fflush_r+0x1a>
 801f53a:	6a03      	ldr	r3, [r0, #32]
 801f53c:	b90b      	cbnz	r3, 801f542 <_fflush_r+0x1a>
 801f53e:	f7fc fc09 	bl	801bd54 <__sinit>
 801f542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f546:	2b00      	cmp	r3, #0
 801f548:	d0f3      	beq.n	801f532 <_fflush_r+0xa>
 801f54a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f54c:	07d0      	lsls	r0, r2, #31
 801f54e:	d404      	bmi.n	801f55a <_fflush_r+0x32>
 801f550:	0599      	lsls	r1, r3, #22
 801f552:	d402      	bmi.n	801f55a <_fflush_r+0x32>
 801f554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f556:	f7fc ff72 	bl	801c43e <__retarget_lock_acquire_recursive>
 801f55a:	4628      	mov	r0, r5
 801f55c:	4621      	mov	r1, r4
 801f55e:	f7ff ff5d 	bl	801f41c <__sflush_r>
 801f562:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f564:	07da      	lsls	r2, r3, #31
 801f566:	4605      	mov	r5, r0
 801f568:	d4e4      	bmi.n	801f534 <_fflush_r+0xc>
 801f56a:	89a3      	ldrh	r3, [r4, #12]
 801f56c:	059b      	lsls	r3, r3, #22
 801f56e:	d4e1      	bmi.n	801f534 <_fflush_r+0xc>
 801f570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f572:	f7fc ff65 	bl	801c440 <__retarget_lock_release_recursive>
 801f576:	e7dd      	b.n	801f534 <_fflush_r+0xc>

0801f578 <__swhatbuf_r>:
 801f578:	b570      	push	{r4, r5, r6, lr}
 801f57a:	460c      	mov	r4, r1
 801f57c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f580:	2900      	cmp	r1, #0
 801f582:	b096      	sub	sp, #88	; 0x58
 801f584:	4615      	mov	r5, r2
 801f586:	461e      	mov	r6, r3
 801f588:	da0d      	bge.n	801f5a6 <__swhatbuf_r+0x2e>
 801f58a:	89a3      	ldrh	r3, [r4, #12]
 801f58c:	f013 0f80 	tst.w	r3, #128	; 0x80
 801f590:	f04f 0100 	mov.w	r1, #0
 801f594:	bf0c      	ite	eq
 801f596:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801f59a:	2340      	movne	r3, #64	; 0x40
 801f59c:	2000      	movs	r0, #0
 801f59e:	6031      	str	r1, [r6, #0]
 801f5a0:	602b      	str	r3, [r5, #0]
 801f5a2:	b016      	add	sp, #88	; 0x58
 801f5a4:	bd70      	pop	{r4, r5, r6, pc}
 801f5a6:	466a      	mov	r2, sp
 801f5a8:	f000 f8ec 	bl	801f784 <_fstat_r>
 801f5ac:	2800      	cmp	r0, #0
 801f5ae:	dbec      	blt.n	801f58a <__swhatbuf_r+0x12>
 801f5b0:	9901      	ldr	r1, [sp, #4]
 801f5b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801f5b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801f5ba:	4259      	negs	r1, r3
 801f5bc:	4159      	adcs	r1, r3
 801f5be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f5c2:	e7eb      	b.n	801f59c <__swhatbuf_r+0x24>

0801f5c4 <__smakebuf_r>:
 801f5c4:	898b      	ldrh	r3, [r1, #12]
 801f5c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f5c8:	079d      	lsls	r5, r3, #30
 801f5ca:	4606      	mov	r6, r0
 801f5cc:	460c      	mov	r4, r1
 801f5ce:	d507      	bpl.n	801f5e0 <__smakebuf_r+0x1c>
 801f5d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f5d4:	6023      	str	r3, [r4, #0]
 801f5d6:	6123      	str	r3, [r4, #16]
 801f5d8:	2301      	movs	r3, #1
 801f5da:	6163      	str	r3, [r4, #20]
 801f5dc:	b002      	add	sp, #8
 801f5de:	bd70      	pop	{r4, r5, r6, pc}
 801f5e0:	ab01      	add	r3, sp, #4
 801f5e2:	466a      	mov	r2, sp
 801f5e4:	f7ff ffc8 	bl	801f578 <__swhatbuf_r>
 801f5e8:	9900      	ldr	r1, [sp, #0]
 801f5ea:	4605      	mov	r5, r0
 801f5ec:	4630      	mov	r0, r6
 801f5ee:	f7fb fc23 	bl	801ae38 <_malloc_r>
 801f5f2:	b948      	cbnz	r0, 801f608 <__smakebuf_r+0x44>
 801f5f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f5f8:	059a      	lsls	r2, r3, #22
 801f5fa:	d4ef      	bmi.n	801f5dc <__smakebuf_r+0x18>
 801f5fc:	f023 0303 	bic.w	r3, r3, #3
 801f600:	f043 0302 	orr.w	r3, r3, #2
 801f604:	81a3      	strh	r3, [r4, #12]
 801f606:	e7e3      	b.n	801f5d0 <__smakebuf_r+0xc>
 801f608:	89a3      	ldrh	r3, [r4, #12]
 801f60a:	6020      	str	r0, [r4, #0]
 801f60c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f610:	81a3      	strh	r3, [r4, #12]
 801f612:	9b00      	ldr	r3, [sp, #0]
 801f614:	6163      	str	r3, [r4, #20]
 801f616:	9b01      	ldr	r3, [sp, #4]
 801f618:	6120      	str	r0, [r4, #16]
 801f61a:	b15b      	cbz	r3, 801f634 <__smakebuf_r+0x70>
 801f61c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f620:	4630      	mov	r0, r6
 801f622:	f000 f8c1 	bl	801f7a8 <_isatty_r>
 801f626:	b128      	cbz	r0, 801f634 <__smakebuf_r+0x70>
 801f628:	89a3      	ldrh	r3, [r4, #12]
 801f62a:	f023 0303 	bic.w	r3, r3, #3
 801f62e:	f043 0301 	orr.w	r3, r3, #1
 801f632:	81a3      	strh	r3, [r4, #12]
 801f634:	89a3      	ldrh	r3, [r4, #12]
 801f636:	431d      	orrs	r5, r3
 801f638:	81a5      	strh	r5, [r4, #12]
 801f63a:	e7cf      	b.n	801f5dc <__smakebuf_r+0x18>

0801f63c <__sccl>:
 801f63c:	b570      	push	{r4, r5, r6, lr}
 801f63e:	780b      	ldrb	r3, [r1, #0]
 801f640:	4604      	mov	r4, r0
 801f642:	2b5e      	cmp	r3, #94	; 0x5e
 801f644:	bf0b      	itete	eq
 801f646:	784b      	ldrbeq	r3, [r1, #1]
 801f648:	1c4a      	addne	r2, r1, #1
 801f64a:	1c8a      	addeq	r2, r1, #2
 801f64c:	2100      	movne	r1, #0
 801f64e:	bf08      	it	eq
 801f650:	2101      	moveq	r1, #1
 801f652:	3801      	subs	r0, #1
 801f654:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801f658:	f800 1f01 	strb.w	r1, [r0, #1]!
 801f65c:	42a8      	cmp	r0, r5
 801f65e:	d1fb      	bne.n	801f658 <__sccl+0x1c>
 801f660:	b90b      	cbnz	r3, 801f666 <__sccl+0x2a>
 801f662:	1e50      	subs	r0, r2, #1
 801f664:	bd70      	pop	{r4, r5, r6, pc}
 801f666:	f081 0101 	eor.w	r1, r1, #1
 801f66a:	54e1      	strb	r1, [r4, r3]
 801f66c:	4610      	mov	r0, r2
 801f66e:	4602      	mov	r2, r0
 801f670:	f812 5b01 	ldrb.w	r5, [r2], #1
 801f674:	2d2d      	cmp	r5, #45	; 0x2d
 801f676:	d005      	beq.n	801f684 <__sccl+0x48>
 801f678:	2d5d      	cmp	r5, #93	; 0x5d
 801f67a:	d016      	beq.n	801f6aa <__sccl+0x6e>
 801f67c:	2d00      	cmp	r5, #0
 801f67e:	d0f1      	beq.n	801f664 <__sccl+0x28>
 801f680:	462b      	mov	r3, r5
 801f682:	e7f2      	b.n	801f66a <__sccl+0x2e>
 801f684:	7846      	ldrb	r6, [r0, #1]
 801f686:	2e5d      	cmp	r6, #93	; 0x5d
 801f688:	d0fa      	beq.n	801f680 <__sccl+0x44>
 801f68a:	42b3      	cmp	r3, r6
 801f68c:	dcf8      	bgt.n	801f680 <__sccl+0x44>
 801f68e:	3002      	adds	r0, #2
 801f690:	461a      	mov	r2, r3
 801f692:	3201      	adds	r2, #1
 801f694:	4296      	cmp	r6, r2
 801f696:	54a1      	strb	r1, [r4, r2]
 801f698:	dcfb      	bgt.n	801f692 <__sccl+0x56>
 801f69a:	1af2      	subs	r2, r6, r3
 801f69c:	3a01      	subs	r2, #1
 801f69e:	1c5d      	adds	r5, r3, #1
 801f6a0:	42b3      	cmp	r3, r6
 801f6a2:	bfa8      	it	ge
 801f6a4:	2200      	movge	r2, #0
 801f6a6:	18ab      	adds	r3, r5, r2
 801f6a8:	e7e1      	b.n	801f66e <__sccl+0x32>
 801f6aa:	4610      	mov	r0, r2
 801f6ac:	e7da      	b.n	801f664 <__sccl+0x28>

0801f6ae <__submore>:
 801f6ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f6b2:	460c      	mov	r4, r1
 801f6b4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801f6b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f6ba:	4299      	cmp	r1, r3
 801f6bc:	d11d      	bne.n	801f6fa <__submore+0x4c>
 801f6be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801f6c2:	f7fb fbb9 	bl	801ae38 <_malloc_r>
 801f6c6:	b918      	cbnz	r0, 801f6d0 <__submore+0x22>
 801f6c8:	f04f 30ff 	mov.w	r0, #4294967295
 801f6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f6d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f6d4:	63a3      	str	r3, [r4, #56]	; 0x38
 801f6d6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801f6da:	6360      	str	r0, [r4, #52]	; 0x34
 801f6dc:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801f6e0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801f6e4:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801f6e8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801f6ec:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801f6f0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801f6f4:	6020      	str	r0, [r4, #0]
 801f6f6:	2000      	movs	r0, #0
 801f6f8:	e7e8      	b.n	801f6cc <__submore+0x1e>
 801f6fa:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801f6fc:	0077      	lsls	r7, r6, #1
 801f6fe:	463a      	mov	r2, r7
 801f700:	f000 fbe7 	bl	801fed2 <_realloc_r>
 801f704:	4605      	mov	r5, r0
 801f706:	2800      	cmp	r0, #0
 801f708:	d0de      	beq.n	801f6c8 <__submore+0x1a>
 801f70a:	eb00 0806 	add.w	r8, r0, r6
 801f70e:	4601      	mov	r1, r0
 801f710:	4632      	mov	r2, r6
 801f712:	4640      	mov	r0, r8
 801f714:	f7fc fe9d 	bl	801c452 <memcpy>
 801f718:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801f71c:	f8c4 8000 	str.w	r8, [r4]
 801f720:	e7e9      	b.n	801f6f6 <__submore+0x48>

0801f722 <_raise_r>:
 801f722:	291f      	cmp	r1, #31
 801f724:	b538      	push	{r3, r4, r5, lr}
 801f726:	4604      	mov	r4, r0
 801f728:	460d      	mov	r5, r1
 801f72a:	d904      	bls.n	801f736 <_raise_r+0x14>
 801f72c:	2316      	movs	r3, #22
 801f72e:	6003      	str	r3, [r0, #0]
 801f730:	f04f 30ff 	mov.w	r0, #4294967295
 801f734:	bd38      	pop	{r3, r4, r5, pc}
 801f736:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801f738:	b112      	cbz	r2, 801f740 <_raise_r+0x1e>
 801f73a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f73e:	b94b      	cbnz	r3, 801f754 <_raise_r+0x32>
 801f740:	4620      	mov	r0, r4
 801f742:	f000 f853 	bl	801f7ec <_getpid_r>
 801f746:	462a      	mov	r2, r5
 801f748:	4601      	mov	r1, r0
 801f74a:	4620      	mov	r0, r4
 801f74c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f750:	f000 b83a 	b.w	801f7c8 <_kill_r>
 801f754:	2b01      	cmp	r3, #1
 801f756:	d00a      	beq.n	801f76e <_raise_r+0x4c>
 801f758:	1c59      	adds	r1, r3, #1
 801f75a:	d103      	bne.n	801f764 <_raise_r+0x42>
 801f75c:	2316      	movs	r3, #22
 801f75e:	6003      	str	r3, [r0, #0]
 801f760:	2001      	movs	r0, #1
 801f762:	e7e7      	b.n	801f734 <_raise_r+0x12>
 801f764:	2400      	movs	r4, #0
 801f766:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f76a:	4628      	mov	r0, r5
 801f76c:	4798      	blx	r3
 801f76e:	2000      	movs	r0, #0
 801f770:	e7e0      	b.n	801f734 <_raise_r+0x12>
	...

0801f774 <raise>:
 801f774:	4b02      	ldr	r3, [pc, #8]	; (801f780 <raise+0xc>)
 801f776:	4601      	mov	r1, r0
 801f778:	6818      	ldr	r0, [r3, #0]
 801f77a:	f7ff bfd2 	b.w	801f722 <_raise_r>
 801f77e:	bf00      	nop
 801f780:	20000188 	.word	0x20000188

0801f784 <_fstat_r>:
 801f784:	b538      	push	{r3, r4, r5, lr}
 801f786:	4d07      	ldr	r5, [pc, #28]	; (801f7a4 <_fstat_r+0x20>)
 801f788:	2300      	movs	r3, #0
 801f78a:	4604      	mov	r4, r0
 801f78c:	4608      	mov	r0, r1
 801f78e:	4611      	mov	r1, r2
 801f790:	602b      	str	r3, [r5, #0]
 801f792:	f7e3 f830 	bl	80027f6 <_fstat>
 801f796:	1c43      	adds	r3, r0, #1
 801f798:	d102      	bne.n	801f7a0 <_fstat_r+0x1c>
 801f79a:	682b      	ldr	r3, [r5, #0]
 801f79c:	b103      	cbz	r3, 801f7a0 <_fstat_r+0x1c>
 801f79e:	6023      	str	r3, [r4, #0]
 801f7a0:	bd38      	pop	{r3, r4, r5, pc}
 801f7a2:	bf00      	nop
 801f7a4:	2000da88 	.word	0x2000da88

0801f7a8 <_isatty_r>:
 801f7a8:	b538      	push	{r3, r4, r5, lr}
 801f7aa:	4d06      	ldr	r5, [pc, #24]	; (801f7c4 <_isatty_r+0x1c>)
 801f7ac:	2300      	movs	r3, #0
 801f7ae:	4604      	mov	r4, r0
 801f7b0:	4608      	mov	r0, r1
 801f7b2:	602b      	str	r3, [r5, #0]
 801f7b4:	f7e3 f82f 	bl	8002816 <_isatty>
 801f7b8:	1c43      	adds	r3, r0, #1
 801f7ba:	d102      	bne.n	801f7c2 <_isatty_r+0x1a>
 801f7bc:	682b      	ldr	r3, [r5, #0]
 801f7be:	b103      	cbz	r3, 801f7c2 <_isatty_r+0x1a>
 801f7c0:	6023      	str	r3, [r4, #0]
 801f7c2:	bd38      	pop	{r3, r4, r5, pc}
 801f7c4:	2000da88 	.word	0x2000da88

0801f7c8 <_kill_r>:
 801f7c8:	b538      	push	{r3, r4, r5, lr}
 801f7ca:	4d07      	ldr	r5, [pc, #28]	; (801f7e8 <_kill_r+0x20>)
 801f7cc:	2300      	movs	r3, #0
 801f7ce:	4604      	mov	r4, r0
 801f7d0:	4608      	mov	r0, r1
 801f7d2:	4611      	mov	r1, r2
 801f7d4:	602b      	str	r3, [r5, #0]
 801f7d6:	f7e2 ffaf 	bl	8002738 <_kill>
 801f7da:	1c43      	adds	r3, r0, #1
 801f7dc:	d102      	bne.n	801f7e4 <_kill_r+0x1c>
 801f7de:	682b      	ldr	r3, [r5, #0]
 801f7e0:	b103      	cbz	r3, 801f7e4 <_kill_r+0x1c>
 801f7e2:	6023      	str	r3, [r4, #0]
 801f7e4:	bd38      	pop	{r3, r4, r5, pc}
 801f7e6:	bf00      	nop
 801f7e8:	2000da88 	.word	0x2000da88

0801f7ec <_getpid_r>:
 801f7ec:	f7e2 bf9c 	b.w	8002728 <_getpid>

0801f7f0 <nan>:
 801f7f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801f7f8 <nan+0x8>
 801f7f4:	4770      	bx	lr
 801f7f6:	bf00      	nop
 801f7f8:	00000000 	.word	0x00000000
 801f7fc:	7ff80000 	.word	0x7ff80000

0801f800 <rshift>:
 801f800:	6903      	ldr	r3, [r0, #16]
 801f802:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801f806:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f80a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801f80e:	f100 0414 	add.w	r4, r0, #20
 801f812:	dd45      	ble.n	801f8a0 <rshift+0xa0>
 801f814:	f011 011f 	ands.w	r1, r1, #31
 801f818:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801f81c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801f820:	d10c      	bne.n	801f83c <rshift+0x3c>
 801f822:	f100 0710 	add.w	r7, r0, #16
 801f826:	4629      	mov	r1, r5
 801f828:	42b1      	cmp	r1, r6
 801f82a:	d334      	bcc.n	801f896 <rshift+0x96>
 801f82c:	1a9b      	subs	r3, r3, r2
 801f82e:	009b      	lsls	r3, r3, #2
 801f830:	1eea      	subs	r2, r5, #3
 801f832:	4296      	cmp	r6, r2
 801f834:	bf38      	it	cc
 801f836:	2300      	movcc	r3, #0
 801f838:	4423      	add	r3, r4
 801f83a:	e015      	b.n	801f868 <rshift+0x68>
 801f83c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801f840:	f1c1 0820 	rsb	r8, r1, #32
 801f844:	40cf      	lsrs	r7, r1
 801f846:	f105 0e04 	add.w	lr, r5, #4
 801f84a:	46a1      	mov	r9, r4
 801f84c:	4576      	cmp	r6, lr
 801f84e:	46f4      	mov	ip, lr
 801f850:	d815      	bhi.n	801f87e <rshift+0x7e>
 801f852:	1a9a      	subs	r2, r3, r2
 801f854:	0092      	lsls	r2, r2, #2
 801f856:	3a04      	subs	r2, #4
 801f858:	3501      	adds	r5, #1
 801f85a:	42ae      	cmp	r6, r5
 801f85c:	bf38      	it	cc
 801f85e:	2200      	movcc	r2, #0
 801f860:	18a3      	adds	r3, r4, r2
 801f862:	50a7      	str	r7, [r4, r2]
 801f864:	b107      	cbz	r7, 801f868 <rshift+0x68>
 801f866:	3304      	adds	r3, #4
 801f868:	1b1a      	subs	r2, r3, r4
 801f86a:	42a3      	cmp	r3, r4
 801f86c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801f870:	bf08      	it	eq
 801f872:	2300      	moveq	r3, #0
 801f874:	6102      	str	r2, [r0, #16]
 801f876:	bf08      	it	eq
 801f878:	6143      	streq	r3, [r0, #20]
 801f87a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f87e:	f8dc c000 	ldr.w	ip, [ip]
 801f882:	fa0c fc08 	lsl.w	ip, ip, r8
 801f886:	ea4c 0707 	orr.w	r7, ip, r7
 801f88a:	f849 7b04 	str.w	r7, [r9], #4
 801f88e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801f892:	40cf      	lsrs	r7, r1
 801f894:	e7da      	b.n	801f84c <rshift+0x4c>
 801f896:	f851 cb04 	ldr.w	ip, [r1], #4
 801f89a:	f847 cf04 	str.w	ip, [r7, #4]!
 801f89e:	e7c3      	b.n	801f828 <rshift+0x28>
 801f8a0:	4623      	mov	r3, r4
 801f8a2:	e7e1      	b.n	801f868 <rshift+0x68>

0801f8a4 <__hexdig_fun>:
 801f8a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801f8a8:	2b09      	cmp	r3, #9
 801f8aa:	d802      	bhi.n	801f8b2 <__hexdig_fun+0xe>
 801f8ac:	3820      	subs	r0, #32
 801f8ae:	b2c0      	uxtb	r0, r0
 801f8b0:	4770      	bx	lr
 801f8b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801f8b6:	2b05      	cmp	r3, #5
 801f8b8:	d801      	bhi.n	801f8be <__hexdig_fun+0x1a>
 801f8ba:	3847      	subs	r0, #71	; 0x47
 801f8bc:	e7f7      	b.n	801f8ae <__hexdig_fun+0xa>
 801f8be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801f8c2:	2b05      	cmp	r3, #5
 801f8c4:	d801      	bhi.n	801f8ca <__hexdig_fun+0x26>
 801f8c6:	3827      	subs	r0, #39	; 0x27
 801f8c8:	e7f1      	b.n	801f8ae <__hexdig_fun+0xa>
 801f8ca:	2000      	movs	r0, #0
 801f8cc:	4770      	bx	lr
	...

0801f8d0 <__gethex>:
 801f8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8d4:	4617      	mov	r7, r2
 801f8d6:	680a      	ldr	r2, [r1, #0]
 801f8d8:	b085      	sub	sp, #20
 801f8da:	f102 0b02 	add.w	fp, r2, #2
 801f8de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801f8e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801f8e6:	4681      	mov	r9, r0
 801f8e8:	468a      	mov	sl, r1
 801f8ea:	9302      	str	r3, [sp, #8]
 801f8ec:	32fe      	adds	r2, #254	; 0xfe
 801f8ee:	eb02 030b 	add.w	r3, r2, fp
 801f8f2:	46d8      	mov	r8, fp
 801f8f4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801f8f8:	9301      	str	r3, [sp, #4]
 801f8fa:	2830      	cmp	r0, #48	; 0x30
 801f8fc:	d0f7      	beq.n	801f8ee <__gethex+0x1e>
 801f8fe:	f7ff ffd1 	bl	801f8a4 <__hexdig_fun>
 801f902:	4604      	mov	r4, r0
 801f904:	2800      	cmp	r0, #0
 801f906:	d138      	bne.n	801f97a <__gethex+0xaa>
 801f908:	49a7      	ldr	r1, [pc, #668]	; (801fba8 <__gethex+0x2d8>)
 801f90a:	2201      	movs	r2, #1
 801f90c:	4640      	mov	r0, r8
 801f90e:	f7fc fc13 	bl	801c138 <strncmp>
 801f912:	4606      	mov	r6, r0
 801f914:	2800      	cmp	r0, #0
 801f916:	d169      	bne.n	801f9ec <__gethex+0x11c>
 801f918:	f898 0001 	ldrb.w	r0, [r8, #1]
 801f91c:	465d      	mov	r5, fp
 801f91e:	f7ff ffc1 	bl	801f8a4 <__hexdig_fun>
 801f922:	2800      	cmp	r0, #0
 801f924:	d064      	beq.n	801f9f0 <__gethex+0x120>
 801f926:	465a      	mov	r2, fp
 801f928:	7810      	ldrb	r0, [r2, #0]
 801f92a:	2830      	cmp	r0, #48	; 0x30
 801f92c:	4690      	mov	r8, r2
 801f92e:	f102 0201 	add.w	r2, r2, #1
 801f932:	d0f9      	beq.n	801f928 <__gethex+0x58>
 801f934:	f7ff ffb6 	bl	801f8a4 <__hexdig_fun>
 801f938:	2301      	movs	r3, #1
 801f93a:	fab0 f480 	clz	r4, r0
 801f93e:	0964      	lsrs	r4, r4, #5
 801f940:	465e      	mov	r6, fp
 801f942:	9301      	str	r3, [sp, #4]
 801f944:	4642      	mov	r2, r8
 801f946:	4615      	mov	r5, r2
 801f948:	3201      	adds	r2, #1
 801f94a:	7828      	ldrb	r0, [r5, #0]
 801f94c:	f7ff ffaa 	bl	801f8a4 <__hexdig_fun>
 801f950:	2800      	cmp	r0, #0
 801f952:	d1f8      	bne.n	801f946 <__gethex+0x76>
 801f954:	4994      	ldr	r1, [pc, #592]	; (801fba8 <__gethex+0x2d8>)
 801f956:	2201      	movs	r2, #1
 801f958:	4628      	mov	r0, r5
 801f95a:	f7fc fbed 	bl	801c138 <strncmp>
 801f95e:	b978      	cbnz	r0, 801f980 <__gethex+0xb0>
 801f960:	b946      	cbnz	r6, 801f974 <__gethex+0xa4>
 801f962:	1c6e      	adds	r6, r5, #1
 801f964:	4632      	mov	r2, r6
 801f966:	4615      	mov	r5, r2
 801f968:	3201      	adds	r2, #1
 801f96a:	7828      	ldrb	r0, [r5, #0]
 801f96c:	f7ff ff9a 	bl	801f8a4 <__hexdig_fun>
 801f970:	2800      	cmp	r0, #0
 801f972:	d1f8      	bne.n	801f966 <__gethex+0x96>
 801f974:	1b73      	subs	r3, r6, r5
 801f976:	009e      	lsls	r6, r3, #2
 801f978:	e004      	b.n	801f984 <__gethex+0xb4>
 801f97a:	2400      	movs	r4, #0
 801f97c:	4626      	mov	r6, r4
 801f97e:	e7e1      	b.n	801f944 <__gethex+0x74>
 801f980:	2e00      	cmp	r6, #0
 801f982:	d1f7      	bne.n	801f974 <__gethex+0xa4>
 801f984:	782b      	ldrb	r3, [r5, #0]
 801f986:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801f98a:	2b50      	cmp	r3, #80	; 0x50
 801f98c:	d13d      	bne.n	801fa0a <__gethex+0x13a>
 801f98e:	786b      	ldrb	r3, [r5, #1]
 801f990:	2b2b      	cmp	r3, #43	; 0x2b
 801f992:	d02f      	beq.n	801f9f4 <__gethex+0x124>
 801f994:	2b2d      	cmp	r3, #45	; 0x2d
 801f996:	d031      	beq.n	801f9fc <__gethex+0x12c>
 801f998:	1c69      	adds	r1, r5, #1
 801f99a:	f04f 0b00 	mov.w	fp, #0
 801f99e:	7808      	ldrb	r0, [r1, #0]
 801f9a0:	f7ff ff80 	bl	801f8a4 <__hexdig_fun>
 801f9a4:	1e42      	subs	r2, r0, #1
 801f9a6:	b2d2      	uxtb	r2, r2
 801f9a8:	2a18      	cmp	r2, #24
 801f9aa:	d82e      	bhi.n	801fa0a <__gethex+0x13a>
 801f9ac:	f1a0 0210 	sub.w	r2, r0, #16
 801f9b0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801f9b4:	f7ff ff76 	bl	801f8a4 <__hexdig_fun>
 801f9b8:	f100 3cff 	add.w	ip, r0, #4294967295
 801f9bc:	fa5f fc8c 	uxtb.w	ip, ip
 801f9c0:	f1bc 0f18 	cmp.w	ip, #24
 801f9c4:	d91d      	bls.n	801fa02 <__gethex+0x132>
 801f9c6:	f1bb 0f00 	cmp.w	fp, #0
 801f9ca:	d000      	beq.n	801f9ce <__gethex+0xfe>
 801f9cc:	4252      	negs	r2, r2
 801f9ce:	4416      	add	r6, r2
 801f9d0:	f8ca 1000 	str.w	r1, [sl]
 801f9d4:	b1dc      	cbz	r4, 801fa0e <__gethex+0x13e>
 801f9d6:	9b01      	ldr	r3, [sp, #4]
 801f9d8:	2b00      	cmp	r3, #0
 801f9da:	bf14      	ite	ne
 801f9dc:	f04f 0800 	movne.w	r8, #0
 801f9e0:	f04f 0806 	moveq.w	r8, #6
 801f9e4:	4640      	mov	r0, r8
 801f9e6:	b005      	add	sp, #20
 801f9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9ec:	4645      	mov	r5, r8
 801f9ee:	4626      	mov	r6, r4
 801f9f0:	2401      	movs	r4, #1
 801f9f2:	e7c7      	b.n	801f984 <__gethex+0xb4>
 801f9f4:	f04f 0b00 	mov.w	fp, #0
 801f9f8:	1ca9      	adds	r1, r5, #2
 801f9fa:	e7d0      	b.n	801f99e <__gethex+0xce>
 801f9fc:	f04f 0b01 	mov.w	fp, #1
 801fa00:	e7fa      	b.n	801f9f8 <__gethex+0x128>
 801fa02:	230a      	movs	r3, #10
 801fa04:	fb03 0002 	mla	r0, r3, r2, r0
 801fa08:	e7d0      	b.n	801f9ac <__gethex+0xdc>
 801fa0a:	4629      	mov	r1, r5
 801fa0c:	e7e0      	b.n	801f9d0 <__gethex+0x100>
 801fa0e:	eba5 0308 	sub.w	r3, r5, r8
 801fa12:	3b01      	subs	r3, #1
 801fa14:	4621      	mov	r1, r4
 801fa16:	2b07      	cmp	r3, #7
 801fa18:	dc0a      	bgt.n	801fa30 <__gethex+0x160>
 801fa1a:	4648      	mov	r0, r9
 801fa1c:	f7fd fbfe 	bl	801d21c <_Balloc>
 801fa20:	4604      	mov	r4, r0
 801fa22:	b940      	cbnz	r0, 801fa36 <__gethex+0x166>
 801fa24:	4b61      	ldr	r3, [pc, #388]	; (801fbac <__gethex+0x2dc>)
 801fa26:	4602      	mov	r2, r0
 801fa28:	21e4      	movs	r1, #228	; 0xe4
 801fa2a:	4861      	ldr	r0, [pc, #388]	; (801fbb0 <__gethex+0x2e0>)
 801fa2c:	f7fb f9a0 	bl	801ad70 <__assert_func>
 801fa30:	3101      	adds	r1, #1
 801fa32:	105b      	asrs	r3, r3, #1
 801fa34:	e7ef      	b.n	801fa16 <__gethex+0x146>
 801fa36:	f100 0a14 	add.w	sl, r0, #20
 801fa3a:	2300      	movs	r3, #0
 801fa3c:	495a      	ldr	r1, [pc, #360]	; (801fba8 <__gethex+0x2d8>)
 801fa3e:	f8cd a004 	str.w	sl, [sp, #4]
 801fa42:	469b      	mov	fp, r3
 801fa44:	45a8      	cmp	r8, r5
 801fa46:	d342      	bcc.n	801face <__gethex+0x1fe>
 801fa48:	9801      	ldr	r0, [sp, #4]
 801fa4a:	f840 bb04 	str.w	fp, [r0], #4
 801fa4e:	eba0 000a 	sub.w	r0, r0, sl
 801fa52:	1080      	asrs	r0, r0, #2
 801fa54:	6120      	str	r0, [r4, #16]
 801fa56:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801fa5a:	4658      	mov	r0, fp
 801fa5c:	f7fd fcd0 	bl	801d400 <__hi0bits>
 801fa60:	683d      	ldr	r5, [r7, #0]
 801fa62:	eba8 0000 	sub.w	r0, r8, r0
 801fa66:	42a8      	cmp	r0, r5
 801fa68:	dd59      	ble.n	801fb1e <__gethex+0x24e>
 801fa6a:	eba0 0805 	sub.w	r8, r0, r5
 801fa6e:	4641      	mov	r1, r8
 801fa70:	4620      	mov	r0, r4
 801fa72:	f7fe f85f 	bl	801db34 <__any_on>
 801fa76:	4683      	mov	fp, r0
 801fa78:	b1b8      	cbz	r0, 801faaa <__gethex+0x1da>
 801fa7a:	f108 33ff 	add.w	r3, r8, #4294967295
 801fa7e:	1159      	asrs	r1, r3, #5
 801fa80:	f003 021f 	and.w	r2, r3, #31
 801fa84:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801fa88:	f04f 0b01 	mov.w	fp, #1
 801fa8c:	fa0b f202 	lsl.w	r2, fp, r2
 801fa90:	420a      	tst	r2, r1
 801fa92:	d00a      	beq.n	801faaa <__gethex+0x1da>
 801fa94:	455b      	cmp	r3, fp
 801fa96:	dd06      	ble.n	801faa6 <__gethex+0x1d6>
 801fa98:	f1a8 0102 	sub.w	r1, r8, #2
 801fa9c:	4620      	mov	r0, r4
 801fa9e:	f7fe f849 	bl	801db34 <__any_on>
 801faa2:	2800      	cmp	r0, #0
 801faa4:	d138      	bne.n	801fb18 <__gethex+0x248>
 801faa6:	f04f 0b02 	mov.w	fp, #2
 801faaa:	4641      	mov	r1, r8
 801faac:	4620      	mov	r0, r4
 801faae:	f7ff fea7 	bl	801f800 <rshift>
 801fab2:	4446      	add	r6, r8
 801fab4:	68bb      	ldr	r3, [r7, #8]
 801fab6:	42b3      	cmp	r3, r6
 801fab8:	da41      	bge.n	801fb3e <__gethex+0x26e>
 801faba:	4621      	mov	r1, r4
 801fabc:	4648      	mov	r0, r9
 801fabe:	f7fd fbed 	bl	801d29c <_Bfree>
 801fac2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fac4:	2300      	movs	r3, #0
 801fac6:	6013      	str	r3, [r2, #0]
 801fac8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801facc:	e78a      	b.n	801f9e4 <__gethex+0x114>
 801face:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801fad2:	2a2e      	cmp	r2, #46	; 0x2e
 801fad4:	d014      	beq.n	801fb00 <__gethex+0x230>
 801fad6:	2b20      	cmp	r3, #32
 801fad8:	d106      	bne.n	801fae8 <__gethex+0x218>
 801fada:	9b01      	ldr	r3, [sp, #4]
 801fadc:	f843 bb04 	str.w	fp, [r3], #4
 801fae0:	f04f 0b00 	mov.w	fp, #0
 801fae4:	9301      	str	r3, [sp, #4]
 801fae6:	465b      	mov	r3, fp
 801fae8:	7828      	ldrb	r0, [r5, #0]
 801faea:	9303      	str	r3, [sp, #12]
 801faec:	f7ff feda 	bl	801f8a4 <__hexdig_fun>
 801faf0:	9b03      	ldr	r3, [sp, #12]
 801faf2:	f000 000f 	and.w	r0, r0, #15
 801faf6:	4098      	lsls	r0, r3
 801faf8:	ea4b 0b00 	orr.w	fp, fp, r0
 801fafc:	3304      	adds	r3, #4
 801fafe:	e7a1      	b.n	801fa44 <__gethex+0x174>
 801fb00:	45a8      	cmp	r8, r5
 801fb02:	d8e8      	bhi.n	801fad6 <__gethex+0x206>
 801fb04:	2201      	movs	r2, #1
 801fb06:	4628      	mov	r0, r5
 801fb08:	9303      	str	r3, [sp, #12]
 801fb0a:	f7fc fb15 	bl	801c138 <strncmp>
 801fb0e:	4926      	ldr	r1, [pc, #152]	; (801fba8 <__gethex+0x2d8>)
 801fb10:	9b03      	ldr	r3, [sp, #12]
 801fb12:	2800      	cmp	r0, #0
 801fb14:	d1df      	bne.n	801fad6 <__gethex+0x206>
 801fb16:	e795      	b.n	801fa44 <__gethex+0x174>
 801fb18:	f04f 0b03 	mov.w	fp, #3
 801fb1c:	e7c5      	b.n	801faaa <__gethex+0x1da>
 801fb1e:	da0b      	bge.n	801fb38 <__gethex+0x268>
 801fb20:	eba5 0800 	sub.w	r8, r5, r0
 801fb24:	4621      	mov	r1, r4
 801fb26:	4642      	mov	r2, r8
 801fb28:	4648      	mov	r0, r9
 801fb2a:	f7fd fdd1 	bl	801d6d0 <__lshift>
 801fb2e:	eba6 0608 	sub.w	r6, r6, r8
 801fb32:	4604      	mov	r4, r0
 801fb34:	f100 0a14 	add.w	sl, r0, #20
 801fb38:	f04f 0b00 	mov.w	fp, #0
 801fb3c:	e7ba      	b.n	801fab4 <__gethex+0x1e4>
 801fb3e:	687b      	ldr	r3, [r7, #4]
 801fb40:	42b3      	cmp	r3, r6
 801fb42:	dd73      	ble.n	801fc2c <__gethex+0x35c>
 801fb44:	1b9e      	subs	r6, r3, r6
 801fb46:	42b5      	cmp	r5, r6
 801fb48:	dc34      	bgt.n	801fbb4 <__gethex+0x2e4>
 801fb4a:	68fb      	ldr	r3, [r7, #12]
 801fb4c:	2b02      	cmp	r3, #2
 801fb4e:	d023      	beq.n	801fb98 <__gethex+0x2c8>
 801fb50:	2b03      	cmp	r3, #3
 801fb52:	d025      	beq.n	801fba0 <__gethex+0x2d0>
 801fb54:	2b01      	cmp	r3, #1
 801fb56:	d115      	bne.n	801fb84 <__gethex+0x2b4>
 801fb58:	42b5      	cmp	r5, r6
 801fb5a:	d113      	bne.n	801fb84 <__gethex+0x2b4>
 801fb5c:	2d01      	cmp	r5, #1
 801fb5e:	d10b      	bne.n	801fb78 <__gethex+0x2a8>
 801fb60:	9a02      	ldr	r2, [sp, #8]
 801fb62:	687b      	ldr	r3, [r7, #4]
 801fb64:	6013      	str	r3, [r2, #0]
 801fb66:	2301      	movs	r3, #1
 801fb68:	6123      	str	r3, [r4, #16]
 801fb6a:	f8ca 3000 	str.w	r3, [sl]
 801fb6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fb70:	f04f 0862 	mov.w	r8, #98	; 0x62
 801fb74:	601c      	str	r4, [r3, #0]
 801fb76:	e735      	b.n	801f9e4 <__gethex+0x114>
 801fb78:	1e69      	subs	r1, r5, #1
 801fb7a:	4620      	mov	r0, r4
 801fb7c:	f7fd ffda 	bl	801db34 <__any_on>
 801fb80:	2800      	cmp	r0, #0
 801fb82:	d1ed      	bne.n	801fb60 <__gethex+0x290>
 801fb84:	4621      	mov	r1, r4
 801fb86:	4648      	mov	r0, r9
 801fb88:	f7fd fb88 	bl	801d29c <_Bfree>
 801fb8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fb8e:	2300      	movs	r3, #0
 801fb90:	6013      	str	r3, [r2, #0]
 801fb92:	f04f 0850 	mov.w	r8, #80	; 0x50
 801fb96:	e725      	b.n	801f9e4 <__gethex+0x114>
 801fb98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fb9a:	2b00      	cmp	r3, #0
 801fb9c:	d1f2      	bne.n	801fb84 <__gethex+0x2b4>
 801fb9e:	e7df      	b.n	801fb60 <__gethex+0x290>
 801fba0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fba2:	2b00      	cmp	r3, #0
 801fba4:	d1dc      	bne.n	801fb60 <__gethex+0x290>
 801fba6:	e7ed      	b.n	801fb84 <__gethex+0x2b4>
 801fba8:	0802324c 	.word	0x0802324c
 801fbac:	080230e5 	.word	0x080230e5
 801fbb0:	080233d5 	.word	0x080233d5
 801fbb4:	f106 38ff 	add.w	r8, r6, #4294967295
 801fbb8:	f1bb 0f00 	cmp.w	fp, #0
 801fbbc:	d133      	bne.n	801fc26 <__gethex+0x356>
 801fbbe:	f1b8 0f00 	cmp.w	r8, #0
 801fbc2:	d004      	beq.n	801fbce <__gethex+0x2fe>
 801fbc4:	4641      	mov	r1, r8
 801fbc6:	4620      	mov	r0, r4
 801fbc8:	f7fd ffb4 	bl	801db34 <__any_on>
 801fbcc:	4683      	mov	fp, r0
 801fbce:	ea4f 1268 	mov.w	r2, r8, asr #5
 801fbd2:	2301      	movs	r3, #1
 801fbd4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801fbd8:	f008 081f 	and.w	r8, r8, #31
 801fbdc:	fa03 f308 	lsl.w	r3, r3, r8
 801fbe0:	4213      	tst	r3, r2
 801fbe2:	4631      	mov	r1, r6
 801fbe4:	4620      	mov	r0, r4
 801fbe6:	bf18      	it	ne
 801fbe8:	f04b 0b02 	orrne.w	fp, fp, #2
 801fbec:	1bad      	subs	r5, r5, r6
 801fbee:	f7ff fe07 	bl	801f800 <rshift>
 801fbf2:	687e      	ldr	r6, [r7, #4]
 801fbf4:	f04f 0802 	mov.w	r8, #2
 801fbf8:	f1bb 0f00 	cmp.w	fp, #0
 801fbfc:	d04a      	beq.n	801fc94 <__gethex+0x3c4>
 801fbfe:	68fb      	ldr	r3, [r7, #12]
 801fc00:	2b02      	cmp	r3, #2
 801fc02:	d016      	beq.n	801fc32 <__gethex+0x362>
 801fc04:	2b03      	cmp	r3, #3
 801fc06:	d018      	beq.n	801fc3a <__gethex+0x36a>
 801fc08:	2b01      	cmp	r3, #1
 801fc0a:	d109      	bne.n	801fc20 <__gethex+0x350>
 801fc0c:	f01b 0f02 	tst.w	fp, #2
 801fc10:	d006      	beq.n	801fc20 <__gethex+0x350>
 801fc12:	f8da 3000 	ldr.w	r3, [sl]
 801fc16:	ea4b 0b03 	orr.w	fp, fp, r3
 801fc1a:	f01b 0f01 	tst.w	fp, #1
 801fc1e:	d10f      	bne.n	801fc40 <__gethex+0x370>
 801fc20:	f048 0810 	orr.w	r8, r8, #16
 801fc24:	e036      	b.n	801fc94 <__gethex+0x3c4>
 801fc26:	f04f 0b01 	mov.w	fp, #1
 801fc2a:	e7d0      	b.n	801fbce <__gethex+0x2fe>
 801fc2c:	f04f 0801 	mov.w	r8, #1
 801fc30:	e7e2      	b.n	801fbf8 <__gethex+0x328>
 801fc32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fc34:	f1c3 0301 	rsb	r3, r3, #1
 801fc38:	930f      	str	r3, [sp, #60]	; 0x3c
 801fc3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fc3c:	2b00      	cmp	r3, #0
 801fc3e:	d0ef      	beq.n	801fc20 <__gethex+0x350>
 801fc40:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801fc44:	f104 0214 	add.w	r2, r4, #20
 801fc48:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801fc4c:	9301      	str	r3, [sp, #4]
 801fc4e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801fc52:	2300      	movs	r3, #0
 801fc54:	4694      	mov	ip, r2
 801fc56:	f852 1b04 	ldr.w	r1, [r2], #4
 801fc5a:	f1b1 3fff 	cmp.w	r1, #4294967295
 801fc5e:	d01e      	beq.n	801fc9e <__gethex+0x3ce>
 801fc60:	3101      	adds	r1, #1
 801fc62:	f8cc 1000 	str.w	r1, [ip]
 801fc66:	f1b8 0f02 	cmp.w	r8, #2
 801fc6a:	f104 0214 	add.w	r2, r4, #20
 801fc6e:	d13d      	bne.n	801fcec <__gethex+0x41c>
 801fc70:	683b      	ldr	r3, [r7, #0]
 801fc72:	3b01      	subs	r3, #1
 801fc74:	42ab      	cmp	r3, r5
 801fc76:	d10b      	bne.n	801fc90 <__gethex+0x3c0>
 801fc78:	1169      	asrs	r1, r5, #5
 801fc7a:	2301      	movs	r3, #1
 801fc7c:	f005 051f 	and.w	r5, r5, #31
 801fc80:	fa03 f505 	lsl.w	r5, r3, r5
 801fc84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801fc88:	421d      	tst	r5, r3
 801fc8a:	bf18      	it	ne
 801fc8c:	f04f 0801 	movne.w	r8, #1
 801fc90:	f048 0820 	orr.w	r8, r8, #32
 801fc94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fc96:	601c      	str	r4, [r3, #0]
 801fc98:	9b02      	ldr	r3, [sp, #8]
 801fc9a:	601e      	str	r6, [r3, #0]
 801fc9c:	e6a2      	b.n	801f9e4 <__gethex+0x114>
 801fc9e:	4290      	cmp	r0, r2
 801fca0:	f842 3c04 	str.w	r3, [r2, #-4]
 801fca4:	d8d6      	bhi.n	801fc54 <__gethex+0x384>
 801fca6:	68a2      	ldr	r2, [r4, #8]
 801fca8:	4593      	cmp	fp, r2
 801fcaa:	db17      	blt.n	801fcdc <__gethex+0x40c>
 801fcac:	6861      	ldr	r1, [r4, #4]
 801fcae:	4648      	mov	r0, r9
 801fcb0:	3101      	adds	r1, #1
 801fcb2:	f7fd fab3 	bl	801d21c <_Balloc>
 801fcb6:	4682      	mov	sl, r0
 801fcb8:	b918      	cbnz	r0, 801fcc2 <__gethex+0x3f2>
 801fcba:	4b1b      	ldr	r3, [pc, #108]	; (801fd28 <__gethex+0x458>)
 801fcbc:	4602      	mov	r2, r0
 801fcbe:	2184      	movs	r1, #132	; 0x84
 801fcc0:	e6b3      	b.n	801fa2a <__gethex+0x15a>
 801fcc2:	6922      	ldr	r2, [r4, #16]
 801fcc4:	3202      	adds	r2, #2
 801fcc6:	f104 010c 	add.w	r1, r4, #12
 801fcca:	0092      	lsls	r2, r2, #2
 801fccc:	300c      	adds	r0, #12
 801fcce:	f7fc fbc0 	bl	801c452 <memcpy>
 801fcd2:	4621      	mov	r1, r4
 801fcd4:	4648      	mov	r0, r9
 801fcd6:	f7fd fae1 	bl	801d29c <_Bfree>
 801fcda:	4654      	mov	r4, sl
 801fcdc:	6922      	ldr	r2, [r4, #16]
 801fcde:	1c51      	adds	r1, r2, #1
 801fce0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801fce4:	6121      	str	r1, [r4, #16]
 801fce6:	2101      	movs	r1, #1
 801fce8:	6151      	str	r1, [r2, #20]
 801fcea:	e7bc      	b.n	801fc66 <__gethex+0x396>
 801fcec:	6921      	ldr	r1, [r4, #16]
 801fcee:	4559      	cmp	r1, fp
 801fcf0:	dd0b      	ble.n	801fd0a <__gethex+0x43a>
 801fcf2:	2101      	movs	r1, #1
 801fcf4:	4620      	mov	r0, r4
 801fcf6:	f7ff fd83 	bl	801f800 <rshift>
 801fcfa:	68bb      	ldr	r3, [r7, #8]
 801fcfc:	3601      	adds	r6, #1
 801fcfe:	42b3      	cmp	r3, r6
 801fd00:	f6ff aedb 	blt.w	801faba <__gethex+0x1ea>
 801fd04:	f04f 0801 	mov.w	r8, #1
 801fd08:	e7c2      	b.n	801fc90 <__gethex+0x3c0>
 801fd0a:	f015 051f 	ands.w	r5, r5, #31
 801fd0e:	d0f9      	beq.n	801fd04 <__gethex+0x434>
 801fd10:	9b01      	ldr	r3, [sp, #4]
 801fd12:	441a      	add	r2, r3
 801fd14:	f1c5 0520 	rsb	r5, r5, #32
 801fd18:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801fd1c:	f7fd fb70 	bl	801d400 <__hi0bits>
 801fd20:	42a8      	cmp	r0, r5
 801fd22:	dbe6      	blt.n	801fcf2 <__gethex+0x422>
 801fd24:	e7ee      	b.n	801fd04 <__gethex+0x434>
 801fd26:	bf00      	nop
 801fd28:	080230e5 	.word	0x080230e5

0801fd2c <L_shift>:
 801fd2c:	f1c2 0208 	rsb	r2, r2, #8
 801fd30:	0092      	lsls	r2, r2, #2
 801fd32:	b570      	push	{r4, r5, r6, lr}
 801fd34:	f1c2 0620 	rsb	r6, r2, #32
 801fd38:	6843      	ldr	r3, [r0, #4]
 801fd3a:	6804      	ldr	r4, [r0, #0]
 801fd3c:	fa03 f506 	lsl.w	r5, r3, r6
 801fd40:	432c      	orrs	r4, r5
 801fd42:	40d3      	lsrs	r3, r2
 801fd44:	6004      	str	r4, [r0, #0]
 801fd46:	f840 3f04 	str.w	r3, [r0, #4]!
 801fd4a:	4288      	cmp	r0, r1
 801fd4c:	d3f4      	bcc.n	801fd38 <L_shift+0xc>
 801fd4e:	bd70      	pop	{r4, r5, r6, pc}

0801fd50 <__match>:
 801fd50:	b530      	push	{r4, r5, lr}
 801fd52:	6803      	ldr	r3, [r0, #0]
 801fd54:	3301      	adds	r3, #1
 801fd56:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fd5a:	b914      	cbnz	r4, 801fd62 <__match+0x12>
 801fd5c:	6003      	str	r3, [r0, #0]
 801fd5e:	2001      	movs	r0, #1
 801fd60:	bd30      	pop	{r4, r5, pc}
 801fd62:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fd66:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801fd6a:	2d19      	cmp	r5, #25
 801fd6c:	bf98      	it	ls
 801fd6e:	3220      	addls	r2, #32
 801fd70:	42a2      	cmp	r2, r4
 801fd72:	d0f0      	beq.n	801fd56 <__match+0x6>
 801fd74:	2000      	movs	r0, #0
 801fd76:	e7f3      	b.n	801fd60 <__match+0x10>

0801fd78 <__hexnan>:
 801fd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd7c:	680b      	ldr	r3, [r1, #0]
 801fd7e:	6801      	ldr	r1, [r0, #0]
 801fd80:	115e      	asrs	r6, r3, #5
 801fd82:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801fd86:	f013 031f 	ands.w	r3, r3, #31
 801fd8a:	b087      	sub	sp, #28
 801fd8c:	bf18      	it	ne
 801fd8e:	3604      	addne	r6, #4
 801fd90:	2500      	movs	r5, #0
 801fd92:	1f37      	subs	r7, r6, #4
 801fd94:	4682      	mov	sl, r0
 801fd96:	4690      	mov	r8, r2
 801fd98:	9301      	str	r3, [sp, #4]
 801fd9a:	f846 5c04 	str.w	r5, [r6, #-4]
 801fd9e:	46b9      	mov	r9, r7
 801fda0:	463c      	mov	r4, r7
 801fda2:	9502      	str	r5, [sp, #8]
 801fda4:	46ab      	mov	fp, r5
 801fda6:	784a      	ldrb	r2, [r1, #1]
 801fda8:	1c4b      	adds	r3, r1, #1
 801fdaa:	9303      	str	r3, [sp, #12]
 801fdac:	b342      	cbz	r2, 801fe00 <__hexnan+0x88>
 801fdae:	4610      	mov	r0, r2
 801fdb0:	9105      	str	r1, [sp, #20]
 801fdb2:	9204      	str	r2, [sp, #16]
 801fdb4:	f7ff fd76 	bl	801f8a4 <__hexdig_fun>
 801fdb8:	2800      	cmp	r0, #0
 801fdba:	d14f      	bne.n	801fe5c <__hexnan+0xe4>
 801fdbc:	9a04      	ldr	r2, [sp, #16]
 801fdbe:	9905      	ldr	r1, [sp, #20]
 801fdc0:	2a20      	cmp	r2, #32
 801fdc2:	d818      	bhi.n	801fdf6 <__hexnan+0x7e>
 801fdc4:	9b02      	ldr	r3, [sp, #8]
 801fdc6:	459b      	cmp	fp, r3
 801fdc8:	dd13      	ble.n	801fdf2 <__hexnan+0x7a>
 801fdca:	454c      	cmp	r4, r9
 801fdcc:	d206      	bcs.n	801fddc <__hexnan+0x64>
 801fdce:	2d07      	cmp	r5, #7
 801fdd0:	dc04      	bgt.n	801fddc <__hexnan+0x64>
 801fdd2:	462a      	mov	r2, r5
 801fdd4:	4649      	mov	r1, r9
 801fdd6:	4620      	mov	r0, r4
 801fdd8:	f7ff ffa8 	bl	801fd2c <L_shift>
 801fddc:	4544      	cmp	r4, r8
 801fdde:	d950      	bls.n	801fe82 <__hexnan+0x10a>
 801fde0:	2300      	movs	r3, #0
 801fde2:	f1a4 0904 	sub.w	r9, r4, #4
 801fde6:	f844 3c04 	str.w	r3, [r4, #-4]
 801fdea:	f8cd b008 	str.w	fp, [sp, #8]
 801fdee:	464c      	mov	r4, r9
 801fdf0:	461d      	mov	r5, r3
 801fdf2:	9903      	ldr	r1, [sp, #12]
 801fdf4:	e7d7      	b.n	801fda6 <__hexnan+0x2e>
 801fdf6:	2a29      	cmp	r2, #41	; 0x29
 801fdf8:	d155      	bne.n	801fea6 <__hexnan+0x12e>
 801fdfa:	3102      	adds	r1, #2
 801fdfc:	f8ca 1000 	str.w	r1, [sl]
 801fe00:	f1bb 0f00 	cmp.w	fp, #0
 801fe04:	d04f      	beq.n	801fea6 <__hexnan+0x12e>
 801fe06:	454c      	cmp	r4, r9
 801fe08:	d206      	bcs.n	801fe18 <__hexnan+0xa0>
 801fe0a:	2d07      	cmp	r5, #7
 801fe0c:	dc04      	bgt.n	801fe18 <__hexnan+0xa0>
 801fe0e:	462a      	mov	r2, r5
 801fe10:	4649      	mov	r1, r9
 801fe12:	4620      	mov	r0, r4
 801fe14:	f7ff ff8a 	bl	801fd2c <L_shift>
 801fe18:	4544      	cmp	r4, r8
 801fe1a:	d934      	bls.n	801fe86 <__hexnan+0x10e>
 801fe1c:	f1a8 0204 	sub.w	r2, r8, #4
 801fe20:	4623      	mov	r3, r4
 801fe22:	f853 1b04 	ldr.w	r1, [r3], #4
 801fe26:	f842 1f04 	str.w	r1, [r2, #4]!
 801fe2a:	429f      	cmp	r7, r3
 801fe2c:	d2f9      	bcs.n	801fe22 <__hexnan+0xaa>
 801fe2e:	1b3b      	subs	r3, r7, r4
 801fe30:	f023 0303 	bic.w	r3, r3, #3
 801fe34:	3304      	adds	r3, #4
 801fe36:	3e03      	subs	r6, #3
 801fe38:	3401      	adds	r4, #1
 801fe3a:	42a6      	cmp	r6, r4
 801fe3c:	bf38      	it	cc
 801fe3e:	2304      	movcc	r3, #4
 801fe40:	4443      	add	r3, r8
 801fe42:	2200      	movs	r2, #0
 801fe44:	f843 2b04 	str.w	r2, [r3], #4
 801fe48:	429f      	cmp	r7, r3
 801fe4a:	d2fb      	bcs.n	801fe44 <__hexnan+0xcc>
 801fe4c:	683b      	ldr	r3, [r7, #0]
 801fe4e:	b91b      	cbnz	r3, 801fe58 <__hexnan+0xe0>
 801fe50:	4547      	cmp	r7, r8
 801fe52:	d126      	bne.n	801fea2 <__hexnan+0x12a>
 801fe54:	2301      	movs	r3, #1
 801fe56:	603b      	str	r3, [r7, #0]
 801fe58:	2005      	movs	r0, #5
 801fe5a:	e025      	b.n	801fea8 <__hexnan+0x130>
 801fe5c:	3501      	adds	r5, #1
 801fe5e:	2d08      	cmp	r5, #8
 801fe60:	f10b 0b01 	add.w	fp, fp, #1
 801fe64:	dd06      	ble.n	801fe74 <__hexnan+0xfc>
 801fe66:	4544      	cmp	r4, r8
 801fe68:	d9c3      	bls.n	801fdf2 <__hexnan+0x7a>
 801fe6a:	2300      	movs	r3, #0
 801fe6c:	f844 3c04 	str.w	r3, [r4, #-4]
 801fe70:	2501      	movs	r5, #1
 801fe72:	3c04      	subs	r4, #4
 801fe74:	6822      	ldr	r2, [r4, #0]
 801fe76:	f000 000f 	and.w	r0, r0, #15
 801fe7a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801fe7e:	6020      	str	r0, [r4, #0]
 801fe80:	e7b7      	b.n	801fdf2 <__hexnan+0x7a>
 801fe82:	2508      	movs	r5, #8
 801fe84:	e7b5      	b.n	801fdf2 <__hexnan+0x7a>
 801fe86:	9b01      	ldr	r3, [sp, #4]
 801fe88:	2b00      	cmp	r3, #0
 801fe8a:	d0df      	beq.n	801fe4c <__hexnan+0xd4>
 801fe8c:	f1c3 0320 	rsb	r3, r3, #32
 801fe90:	f04f 32ff 	mov.w	r2, #4294967295
 801fe94:	40da      	lsrs	r2, r3
 801fe96:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801fe9a:	4013      	ands	r3, r2
 801fe9c:	f846 3c04 	str.w	r3, [r6, #-4]
 801fea0:	e7d4      	b.n	801fe4c <__hexnan+0xd4>
 801fea2:	3f04      	subs	r7, #4
 801fea4:	e7d2      	b.n	801fe4c <__hexnan+0xd4>
 801fea6:	2004      	movs	r0, #4
 801fea8:	b007      	add	sp, #28
 801feaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801feae <__ascii_mbtowc>:
 801feae:	b082      	sub	sp, #8
 801feb0:	b901      	cbnz	r1, 801feb4 <__ascii_mbtowc+0x6>
 801feb2:	a901      	add	r1, sp, #4
 801feb4:	b142      	cbz	r2, 801fec8 <__ascii_mbtowc+0x1a>
 801feb6:	b14b      	cbz	r3, 801fecc <__ascii_mbtowc+0x1e>
 801feb8:	7813      	ldrb	r3, [r2, #0]
 801feba:	600b      	str	r3, [r1, #0]
 801febc:	7812      	ldrb	r2, [r2, #0]
 801febe:	1e10      	subs	r0, r2, #0
 801fec0:	bf18      	it	ne
 801fec2:	2001      	movne	r0, #1
 801fec4:	b002      	add	sp, #8
 801fec6:	4770      	bx	lr
 801fec8:	4610      	mov	r0, r2
 801feca:	e7fb      	b.n	801fec4 <__ascii_mbtowc+0x16>
 801fecc:	f06f 0001 	mvn.w	r0, #1
 801fed0:	e7f8      	b.n	801fec4 <__ascii_mbtowc+0x16>

0801fed2 <_realloc_r>:
 801fed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fed6:	4680      	mov	r8, r0
 801fed8:	4614      	mov	r4, r2
 801feda:	460e      	mov	r6, r1
 801fedc:	b921      	cbnz	r1, 801fee8 <_realloc_r+0x16>
 801fede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fee2:	4611      	mov	r1, r2
 801fee4:	f7fa bfa8 	b.w	801ae38 <_malloc_r>
 801fee8:	b92a      	cbnz	r2, 801fef6 <_realloc_r+0x24>
 801feea:	f7fd f94b 	bl	801d184 <_free_r>
 801feee:	4625      	mov	r5, r4
 801fef0:	4628      	mov	r0, r5
 801fef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fef6:	f000 f89c 	bl	8020032 <_malloc_usable_size_r>
 801fefa:	4284      	cmp	r4, r0
 801fefc:	4607      	mov	r7, r0
 801fefe:	d802      	bhi.n	801ff06 <_realloc_r+0x34>
 801ff00:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801ff04:	d812      	bhi.n	801ff2c <_realloc_r+0x5a>
 801ff06:	4621      	mov	r1, r4
 801ff08:	4640      	mov	r0, r8
 801ff0a:	f7fa ff95 	bl	801ae38 <_malloc_r>
 801ff0e:	4605      	mov	r5, r0
 801ff10:	2800      	cmp	r0, #0
 801ff12:	d0ed      	beq.n	801fef0 <_realloc_r+0x1e>
 801ff14:	42bc      	cmp	r4, r7
 801ff16:	4622      	mov	r2, r4
 801ff18:	4631      	mov	r1, r6
 801ff1a:	bf28      	it	cs
 801ff1c:	463a      	movcs	r2, r7
 801ff1e:	f7fc fa98 	bl	801c452 <memcpy>
 801ff22:	4631      	mov	r1, r6
 801ff24:	4640      	mov	r0, r8
 801ff26:	f7fd f92d 	bl	801d184 <_free_r>
 801ff2a:	e7e1      	b.n	801fef0 <_realloc_r+0x1e>
 801ff2c:	4635      	mov	r5, r6
 801ff2e:	e7df      	b.n	801fef0 <_realloc_r+0x1e>

0801ff30 <_strtoul_l.constprop.0>:
 801ff30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ff34:	4f36      	ldr	r7, [pc, #216]	; (8020010 <_strtoul_l.constprop.0+0xe0>)
 801ff36:	4686      	mov	lr, r0
 801ff38:	460d      	mov	r5, r1
 801ff3a:	4628      	mov	r0, r5
 801ff3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ff40:	5d3e      	ldrb	r6, [r7, r4]
 801ff42:	f016 0608 	ands.w	r6, r6, #8
 801ff46:	d1f8      	bne.n	801ff3a <_strtoul_l.constprop.0+0xa>
 801ff48:	2c2d      	cmp	r4, #45	; 0x2d
 801ff4a:	d130      	bne.n	801ffae <_strtoul_l.constprop.0+0x7e>
 801ff4c:	782c      	ldrb	r4, [r5, #0]
 801ff4e:	2601      	movs	r6, #1
 801ff50:	1c85      	adds	r5, r0, #2
 801ff52:	2b00      	cmp	r3, #0
 801ff54:	d057      	beq.n	8020006 <_strtoul_l.constprop.0+0xd6>
 801ff56:	2b10      	cmp	r3, #16
 801ff58:	d109      	bne.n	801ff6e <_strtoul_l.constprop.0+0x3e>
 801ff5a:	2c30      	cmp	r4, #48	; 0x30
 801ff5c:	d107      	bne.n	801ff6e <_strtoul_l.constprop.0+0x3e>
 801ff5e:	7828      	ldrb	r0, [r5, #0]
 801ff60:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801ff64:	2858      	cmp	r0, #88	; 0x58
 801ff66:	d149      	bne.n	801fffc <_strtoul_l.constprop.0+0xcc>
 801ff68:	786c      	ldrb	r4, [r5, #1]
 801ff6a:	2310      	movs	r3, #16
 801ff6c:	3502      	adds	r5, #2
 801ff6e:	f04f 38ff 	mov.w	r8, #4294967295
 801ff72:	2700      	movs	r7, #0
 801ff74:	fbb8 f8f3 	udiv	r8, r8, r3
 801ff78:	fb03 f908 	mul.w	r9, r3, r8
 801ff7c:	ea6f 0909 	mvn.w	r9, r9
 801ff80:	4638      	mov	r0, r7
 801ff82:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801ff86:	f1bc 0f09 	cmp.w	ip, #9
 801ff8a:	d815      	bhi.n	801ffb8 <_strtoul_l.constprop.0+0x88>
 801ff8c:	4664      	mov	r4, ip
 801ff8e:	42a3      	cmp	r3, r4
 801ff90:	dd23      	ble.n	801ffda <_strtoul_l.constprop.0+0xaa>
 801ff92:	f1b7 3fff 	cmp.w	r7, #4294967295
 801ff96:	d007      	beq.n	801ffa8 <_strtoul_l.constprop.0+0x78>
 801ff98:	4580      	cmp	r8, r0
 801ff9a:	d31b      	bcc.n	801ffd4 <_strtoul_l.constprop.0+0xa4>
 801ff9c:	d101      	bne.n	801ffa2 <_strtoul_l.constprop.0+0x72>
 801ff9e:	45a1      	cmp	r9, r4
 801ffa0:	db18      	blt.n	801ffd4 <_strtoul_l.constprop.0+0xa4>
 801ffa2:	fb00 4003 	mla	r0, r0, r3, r4
 801ffa6:	2701      	movs	r7, #1
 801ffa8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ffac:	e7e9      	b.n	801ff82 <_strtoul_l.constprop.0+0x52>
 801ffae:	2c2b      	cmp	r4, #43	; 0x2b
 801ffb0:	bf04      	itt	eq
 801ffb2:	782c      	ldrbeq	r4, [r5, #0]
 801ffb4:	1c85      	addeq	r5, r0, #2
 801ffb6:	e7cc      	b.n	801ff52 <_strtoul_l.constprop.0+0x22>
 801ffb8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801ffbc:	f1bc 0f19 	cmp.w	ip, #25
 801ffc0:	d801      	bhi.n	801ffc6 <_strtoul_l.constprop.0+0x96>
 801ffc2:	3c37      	subs	r4, #55	; 0x37
 801ffc4:	e7e3      	b.n	801ff8e <_strtoul_l.constprop.0+0x5e>
 801ffc6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801ffca:	f1bc 0f19 	cmp.w	ip, #25
 801ffce:	d804      	bhi.n	801ffda <_strtoul_l.constprop.0+0xaa>
 801ffd0:	3c57      	subs	r4, #87	; 0x57
 801ffd2:	e7dc      	b.n	801ff8e <_strtoul_l.constprop.0+0x5e>
 801ffd4:	f04f 37ff 	mov.w	r7, #4294967295
 801ffd8:	e7e6      	b.n	801ffa8 <_strtoul_l.constprop.0+0x78>
 801ffda:	1c7b      	adds	r3, r7, #1
 801ffdc:	d106      	bne.n	801ffec <_strtoul_l.constprop.0+0xbc>
 801ffde:	2322      	movs	r3, #34	; 0x22
 801ffe0:	f8ce 3000 	str.w	r3, [lr]
 801ffe4:	4638      	mov	r0, r7
 801ffe6:	b932      	cbnz	r2, 801fff6 <_strtoul_l.constprop.0+0xc6>
 801ffe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ffec:	b106      	cbz	r6, 801fff0 <_strtoul_l.constprop.0+0xc0>
 801ffee:	4240      	negs	r0, r0
 801fff0:	2a00      	cmp	r2, #0
 801fff2:	d0f9      	beq.n	801ffe8 <_strtoul_l.constprop.0+0xb8>
 801fff4:	b107      	cbz	r7, 801fff8 <_strtoul_l.constprop.0+0xc8>
 801fff6:	1e69      	subs	r1, r5, #1
 801fff8:	6011      	str	r1, [r2, #0]
 801fffa:	e7f5      	b.n	801ffe8 <_strtoul_l.constprop.0+0xb8>
 801fffc:	2430      	movs	r4, #48	; 0x30
 801fffe:	2b00      	cmp	r3, #0
 8020000:	d1b5      	bne.n	801ff6e <_strtoul_l.constprop.0+0x3e>
 8020002:	2308      	movs	r3, #8
 8020004:	e7b3      	b.n	801ff6e <_strtoul_l.constprop.0+0x3e>
 8020006:	2c30      	cmp	r4, #48	; 0x30
 8020008:	d0a9      	beq.n	801ff5e <_strtoul_l.constprop.0+0x2e>
 802000a:	230a      	movs	r3, #10
 802000c:	e7af      	b.n	801ff6e <_strtoul_l.constprop.0+0x3e>
 802000e:	bf00      	nop
 8020010:	080232a1 	.word	0x080232a1

08020014 <_strtoul_r>:
 8020014:	f7ff bf8c 	b.w	801ff30 <_strtoul_l.constprop.0>

08020018 <__ascii_wctomb>:
 8020018:	b149      	cbz	r1, 802002e <__ascii_wctomb+0x16>
 802001a:	2aff      	cmp	r2, #255	; 0xff
 802001c:	bf85      	ittet	hi
 802001e:	238a      	movhi	r3, #138	; 0x8a
 8020020:	6003      	strhi	r3, [r0, #0]
 8020022:	700a      	strbls	r2, [r1, #0]
 8020024:	f04f 30ff 	movhi.w	r0, #4294967295
 8020028:	bf98      	it	ls
 802002a:	2001      	movls	r0, #1
 802002c:	4770      	bx	lr
 802002e:	4608      	mov	r0, r1
 8020030:	4770      	bx	lr

08020032 <_malloc_usable_size_r>:
 8020032:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020036:	1f18      	subs	r0, r3, #4
 8020038:	2b00      	cmp	r3, #0
 802003a:	bfbc      	itt	lt
 802003c:	580b      	ldrlt	r3, [r1, r0]
 802003e:	18c0      	addlt	r0, r0, r3
 8020040:	4770      	bx	lr
	...

08020044 <_init>:
 8020044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020046:	bf00      	nop
 8020048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802004a:	bc08      	pop	{r3}
 802004c:	469e      	mov	lr, r3
 802004e:	4770      	bx	lr

08020050 <_fini>:
 8020050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020052:	bf00      	nop
 8020054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020056:	bc08      	pop	{r3}
 8020058:	469e      	mov	lr, r3
 802005a:	4770      	bx	lr
