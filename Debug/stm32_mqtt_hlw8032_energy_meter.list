
stm32_mqtt_hlw8032_energy_meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fd1c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000033b0  0801fec0  0801fec0  0002fec0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023270  08023270  000402d8  2**0
                  CONTENTS
  4 .ARM          00000008  08023270  08023270  00033270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023278  08023278  000402d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023278  08023278  00033278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802327c  0802327c  0003327c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  08023280  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d798  200002d8  08023558  000402d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000da70  08023558  0004da70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000402d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040308  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e314  00000000  00000000  0004034b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000078b9  00000000  00000000  0006e65f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000029f8  00000000  00000000  00075f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000021e6  00000000  00000000  00078910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000a1c2  00000000  00000000  0007aaf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003184a  00000000  00000000  00084cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a97a7  00000000  00000000  000b6502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000c79c  00000000  00000000  0015fcac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0016c448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d8 	.word	0x200002d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801fea4 	.word	0x0801fea4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002dc 	.word	0x200002dc
 80001dc:	0801fea4 	.word	0x0801fea4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9ba 	b.w	8001044 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f850 	bl	8000d7c <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__popcountsi2>:
 8000ce8:	0843      	lsrs	r3, r0, #1
 8000cea:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000cee:	1ac0      	subs	r0, r0, r3
 8000cf0:	0883      	lsrs	r3, r0, #2
 8000cf2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8000cf6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8000cfa:	4418      	add	r0, r3
 8000cfc:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000d00:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8000d04:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000d08:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000d0c:	0e00      	lsrs	r0, r0, #24
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_d2lz>:
 8000d10:	b538      	push	{r3, r4, r5, lr}
 8000d12:	2200      	movs	r2, #0
 8000d14:	2300      	movs	r3, #0
 8000d16:	4604      	mov	r4, r0
 8000d18:	460d      	mov	r5, r1
 8000d1a:	f7ff fef7 	bl	8000b0c <__aeabi_dcmplt>
 8000d1e:	b928      	cbnz	r0, 8000d2c <__aeabi_d2lz+0x1c>
 8000d20:	4620      	mov	r0, r4
 8000d22:	4629      	mov	r1, r5
 8000d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d28:	f000 b80a 	b.w	8000d40 <__aeabi_d2ulz>
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d32:	f000 f805 	bl	8000d40 <__aeabi_d2ulz>
 8000d36:	4240      	negs	r0, r0
 8000d38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3c:	bd38      	pop	{r3, r4, r5, pc}
 8000d3e:	bf00      	nop

08000d40 <__aeabi_d2ulz>:
 8000d40:	b5d0      	push	{r4, r6, r7, lr}
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <__aeabi_d2ulz+0x34>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	4606      	mov	r6, r0
 8000d48:	460f      	mov	r7, r1
 8000d4a:	f7ff fc6d 	bl	8000628 <__aeabi_dmul>
 8000d4e:	f7ff ff43 	bl	8000bd8 <__aeabi_d2uiz>
 8000d52:	4604      	mov	r4, r0
 8000d54:	f7ff fbee 	bl	8000534 <__aeabi_ui2d>
 8000d58:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <__aeabi_d2ulz+0x38>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f7ff fc64 	bl	8000628 <__aeabi_dmul>
 8000d60:	4602      	mov	r2, r0
 8000d62:	460b      	mov	r3, r1
 8000d64:	4630      	mov	r0, r6
 8000d66:	4639      	mov	r1, r7
 8000d68:	f7ff faa6 	bl	80002b8 <__aeabi_dsub>
 8000d6c:	f7ff ff34 	bl	8000bd8 <__aeabi_d2uiz>
 8000d70:	4621      	mov	r1, r4
 8000d72:	bdd0      	pop	{r4, r6, r7, pc}
 8000d74:	3df00000 	.word	0x3df00000
 8000d78:	41f00000 	.word	0x41f00000

08000d7c <__udivmoddi4>:
 8000d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d80:	9e08      	ldr	r6, [sp, #32]
 8000d82:	460d      	mov	r5, r1
 8000d84:	4604      	mov	r4, r0
 8000d86:	460f      	mov	r7, r1
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d14a      	bne.n	8000e22 <__udivmoddi4+0xa6>
 8000d8c:	428a      	cmp	r2, r1
 8000d8e:	4694      	mov	ip, r2
 8000d90:	d965      	bls.n	8000e5e <__udivmoddi4+0xe2>
 8000d92:	fab2 f382 	clz	r3, r2
 8000d96:	b143      	cbz	r3, 8000daa <__udivmoddi4+0x2e>
 8000d98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d9c:	f1c3 0220 	rsb	r2, r3, #32
 8000da0:	409f      	lsls	r7, r3
 8000da2:	fa20 f202 	lsr.w	r2, r0, r2
 8000da6:	4317      	orrs	r7, r2
 8000da8:	409c      	lsls	r4, r3
 8000daa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dae:	fa1f f58c 	uxth.w	r5, ip
 8000db2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000db6:	0c22      	lsrs	r2, r4, #16
 8000db8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dbc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000dc0:	fb01 f005 	mul.w	r0, r1, r5
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	d90a      	bls.n	8000dde <__udivmoddi4+0x62>
 8000dc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000dcc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dd0:	f080 811c 	bcs.w	800100c <__udivmoddi4+0x290>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f240 8119 	bls.w	800100c <__udivmoddi4+0x290>
 8000dda:	3902      	subs	r1, #2
 8000ddc:	4462      	add	r2, ip
 8000dde:	1a12      	subs	r2, r2, r0
 8000de0:	b2a4      	uxth	r4, r4
 8000de2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000de6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dee:	fb00 f505 	mul.w	r5, r0, r5
 8000df2:	42a5      	cmp	r5, r4
 8000df4:	d90a      	bls.n	8000e0c <__udivmoddi4+0x90>
 8000df6:	eb1c 0404 	adds.w	r4, ip, r4
 8000dfa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfe:	f080 8107 	bcs.w	8001010 <__udivmoddi4+0x294>
 8000e02:	42a5      	cmp	r5, r4
 8000e04:	f240 8104 	bls.w	8001010 <__udivmoddi4+0x294>
 8000e08:	4464      	add	r4, ip
 8000e0a:	3802      	subs	r0, #2
 8000e0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e10:	1b64      	subs	r4, r4, r5
 8000e12:	2100      	movs	r1, #0
 8000e14:	b11e      	cbz	r6, 8000e1e <__udivmoddi4+0xa2>
 8000e16:	40dc      	lsrs	r4, r3
 8000e18:	2300      	movs	r3, #0
 8000e1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0xbc>
 8000e26:	2e00      	cmp	r6, #0
 8000e28:	f000 80ed 	beq.w	8001006 <__udivmoddi4+0x28a>
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000e32:	4608      	mov	r0, r1
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	fab3 f183 	clz	r1, r3
 8000e3c:	2900      	cmp	r1, #0
 8000e3e:	d149      	bne.n	8000ed4 <__udivmoddi4+0x158>
 8000e40:	42ab      	cmp	r3, r5
 8000e42:	d302      	bcc.n	8000e4a <__udivmoddi4+0xce>
 8000e44:	4282      	cmp	r2, r0
 8000e46:	f200 80f8 	bhi.w	800103a <__udivmoddi4+0x2be>
 8000e4a:	1a84      	subs	r4, r0, r2
 8000e4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000e50:	2001      	movs	r0, #1
 8000e52:	4617      	mov	r7, r2
 8000e54:	2e00      	cmp	r6, #0
 8000e56:	d0e2      	beq.n	8000e1e <__udivmoddi4+0xa2>
 8000e58:	e9c6 4700 	strd	r4, r7, [r6]
 8000e5c:	e7df      	b.n	8000e1e <__udivmoddi4+0xa2>
 8000e5e:	b902      	cbnz	r2, 8000e62 <__udivmoddi4+0xe6>
 8000e60:	deff      	udf	#255	; 0xff
 8000e62:	fab2 f382 	clz	r3, r2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f040 8090 	bne.w	8000f8c <__udivmoddi4+0x210>
 8000e6c:	1a8a      	subs	r2, r1, r2
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2101      	movs	r1, #1
 8000e78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000e80:	0c22      	lsrs	r2, r4, #16
 8000e82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e86:	fb0e f005 	mul.w	r0, lr, r5
 8000e8a:	4290      	cmp	r0, r2
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x124>
 8000e8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000e92:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x122>
 8000e98:	4290      	cmp	r0, r2
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2b8>
 8000e9e:	4645      	mov	r5, r8
 8000ea0:	1a12      	subs	r2, r2, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea8:	fb07 2210 	mls	r2, r7, r0, r2
 8000eac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x14e>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x14c>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2c2>
 8000ec8:	4610      	mov	r0, r2
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ed2:	e79f      	b.n	8000e14 <__udivmoddi4+0x98>
 8000ed4:	f1c1 0720 	rsb	r7, r1, #32
 8000ed8:	408b      	lsls	r3, r1
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ee6:	fa20 f307 	lsr.w	r3, r0, r7
 8000eea:	40fd      	lsrs	r5, r7
 8000eec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef0:	4323      	orrs	r3, r4
 8000ef2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ef6:	fa1f fe8c 	uxth.w	lr, ip
 8000efa:	fb09 5518 	mls	r5, r9, r8, r5
 8000efe:	0c1c      	lsrs	r4, r3, #16
 8000f00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f04:	fb08 f50e 	mul.w	r5, r8, lr
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b0>
 8000f14:	eb1c 0404 	adds.w	r4, ip, r4
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2b4>
 8000f20:	42a5      	cmp	r5, r4
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2b4>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4464      	add	r4, ip
 8000f2c:	1b64      	subs	r4, r4, r5
 8000f2e:	b29d      	uxth	r5, r3
 8000f30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f34:	fb09 4413 	mls	r4, r9, r3, r4
 8000f38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f40:	45a6      	cmp	lr, r4
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1da>
 8000f44:	eb1c 0404 	adds.w	r4, ip, r4
 8000f48:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2ac>
 8000f4e:	45a6      	cmp	lr, r4
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2ac>
 8000f52:	3b02      	subs	r3, #2
 8000f54:	4464      	add	r4, ip
 8000f56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000f5e:	eba4 040e 	sub.w	r4, r4, lr
 8000f62:	42ac      	cmp	r4, r5
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46ae      	mov	lr, r5
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x29c>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x298>
 8000f6c:	b156      	cbz	r6, 8000f84 <__udivmoddi4+0x208>
 8000f6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000f72:	eb64 040e 	sbc.w	r4, r4, lr
 8000f76:	fa04 f707 	lsl.w	r7, r4, r7
 8000f7a:	40ca      	lsrs	r2, r1
 8000f7c:	40cc      	lsrs	r4, r1
 8000f7e:	4317      	orrs	r7, r2
 8000f80:	e9c6 7400 	strd	r7, r4, [r6]
 8000f84:	4618      	mov	r0, r3
 8000f86:	2100      	movs	r1, #0
 8000f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8c:	f1c3 0120 	rsb	r1, r3, #32
 8000f90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f94:	fa20 f201 	lsr.w	r2, r0, r1
 8000f98:	fa25 f101 	lsr.w	r1, r5, r1
 8000f9c:	409d      	lsls	r5, r3
 8000f9e:	432a      	orrs	r2, r5
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fac:	fb07 1510 	mls	r5, r7, r0, r1
 8000fb0:	0c11      	lsrs	r1, r2, #16
 8000fb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fb6:	fb00 f50e 	mul.w	r5, r0, lr
 8000fba:	428d      	cmp	r5, r1
 8000fbc:	fa04 f403 	lsl.w	r4, r4, r3
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x258>
 8000fc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b0>
 8000fcc:	428d      	cmp	r5, r1
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b0>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4461      	add	r1, ip
 8000fd4:	1b49      	subs	r1, r1, r5
 8000fd6:	b292      	uxth	r2, r2
 8000fd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fdc:	fb07 1115 	mls	r1, r7, r5, r1
 8000fe0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe4:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe8:	4291      	cmp	r1, r2
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x282>
 8000fec:	eb1c 0202 	adds.w	r2, ip, r2
 8000ff0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2a8>
 8000ff6:	4291      	cmp	r1, r2
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2a8>
 8000ffa:	3d02      	subs	r5, #2
 8000ffc:	4462      	add	r2, ip
 8000ffe:	1a52      	subs	r2, r2, r1
 8001000:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0xfc>
 8001006:	4631      	mov	r1, r6
 8001008:	4630      	mov	r0, r6
 800100a:	e708      	b.n	8000e1e <__udivmoddi4+0xa2>
 800100c:	4639      	mov	r1, r7
 800100e:	e6e6      	b.n	8000dde <__udivmoddi4+0x62>
 8001010:	4610      	mov	r0, r2
 8001012:	e6fb      	b.n	8000e0c <__udivmoddi4+0x90>
 8001014:	4548      	cmp	r0, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f0>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001020:	3b01      	subs	r3, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f0>
 8001024:	4645      	mov	r5, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x282>
 8001028:	462b      	mov	r3, r5
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1da>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x258>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b0>
 8001034:	3d02      	subs	r5, #2
 8001036:	4462      	add	r2, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x124>
 800103a:	4608      	mov	r0, r1
 800103c:	e70a      	b.n	8000e54 <__udivmoddi4+0xd8>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x14e>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <HAL_UARTEx_RxEventCallback>:
void EthMutexRelease (void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	807b      	strh	r3, [r7, #2]

	if (huart->Instance == USART2){
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a08      	ldr	r2, [pc, #32]	; (800107c <HAL_UARTEx_RxEventCallback+0x34>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d10a      	bne.n	8001074 <HAL_UARTEx_RxEventCallback+0x2c>
		if (Size == 24){
 800105e:	887b      	ldrh	r3, [r7, #2]
 8001060:	2b18      	cmp	r3, #24
 8001062:	d107      	bne.n	8001074 <HAL_UARTEx_RxEventCallback+0x2c>
		//	if (!osMessageQueueGetCount(Q_hlw8032_rawHandle)){
				osMessageQueuePut(rowPowerSensorQHandle, &data_bufer, 0, 0);
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_UARTEx_RxEventCallback+0x38>)
 8001066:	6818      	ldr	r0, [r3, #0]
 8001068:	2300      	movs	r3, #0
 800106a:	2200      	movs	r2, #0
 800106c:	4905      	ldr	r1, [pc, #20]	; (8001084 <HAL_UARTEx_RxEventCallback+0x3c>)
 800106e:	f00e fb53 	bl	800f718 <osMessageQueuePut>
		//	}
			//copy data to queue
			__NOP();
 8001072:	bf00      	nop
			//set data ready flag
		}
	//HAL_UARTEx_ReceiveToIdle_IT(&huart1, data_bufer,  24);
	}
	//HAL_UARTEx_ReceiveToIdle_IT(&huart1, data_bufer,  24);
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40004400 	.word	0x40004400
 8001080:	20000414 	.word	0x20000414
 8001084:	2000043c 	.word	0x2000043c

08001088 <EthMutexTake>:

void EthMutexTake(void){
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	osMutexAcquire(NetworkHandle, osWaitForever);
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <EthMutexTake+0x18>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	4618      	mov	r0, r3
 8001096:	f00e fa44 	bl	800f522 <osMutexAcquire>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	2000042c 	.word	0x2000042c

080010a4 <EthMutexRelease>:

void EthMutexRelease(void){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	osMutexRelease(NetworkHandle);
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <EthMutexRelease+0x14>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f00e fa83 	bl	800f5b8 <osMutexRelease>
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2000042c 	.word	0x2000042c

080010bc <LfsMutexTake>:

void LfsMutexTake(void){
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	osMutexAcquire(LFSHandle, osWaitForever);
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <LfsMutexTake+0x18>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f04f 31ff 	mov.w	r1, #4294967295
 80010c8:	4618      	mov	r0, r3
 80010ca:	f00e fa2a 	bl	800f522 <osMutexAcquire>
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000430 	.word	0x20000430

080010d8 <LfsMutexRelease>:

void LfsMutexRelease(void){
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	osMutexRelease(LFSHandle);
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <LfsMutexRelease+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f00e fa69 	bl	800f5b8 <osMutexRelease>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000430 	.word	0x20000430

080010f0 <SocketMutexTake>:

void SocketMutexTake(void){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	osMutexAcquire(SocketHandle, osWaitForever);
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <SocketMutexTake+0x18>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f04f 31ff 	mov.w	r1, #4294967295
 80010fc:	4618      	mov	r0, r3
 80010fe:	f00e fa10 	bl	800f522 <osMutexAcquire>
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000434 	.word	0x20000434

0800110c <SocketMutexRelease>:

void SocketMutexRelease(void){
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	osMutexRelease(SocketHandle);
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <SocketMutexRelease+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4618      	mov	r0, r3
 8001116:	f00e fa4f 	bl	800f5b8 <osMutexRelease>
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000434 	.word	0x20000434

08001124 <ServiceSockMutexTake>:

void ServiceSockMutexTake(){
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	osMutexAcquire(ServiceSocketHandle, osWaitForever);
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <ServiceSockMutexTake+0x18>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f04f 31ff 	mov.w	r1, #4294967295
 8001130:	4618      	mov	r0, r3
 8001132:	f00e f9f6 	bl	800f522 <osMutexAcquire>
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000438 	.word	0x20000438

08001140 <ServiceSockMutexRelease>:

void ServiceSockMutexRelease(){
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	osMutexRelease(ServiceSocketHandle);
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <ServiceSockMutexRelease+0x14>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f00e fa35 	bl	800f5b8 <osMutexRelease>
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000438 	.word	0x20000438

08001158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115c:	f003 fc02 	bl	8004964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001160:	f000 f8f8 	bl	8001354 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  dns_service_reg_cb_net_ready(assigned_ip);
 8001164:	484e      	ldr	r0, [pc, #312]	; (80012a0 <main+0x148>)
 8001166:	f00a fd91 	bl	800bc8c <dns_service_reg_cb_net_ready>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116a:	f000 fa09 	bl	8001580 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800116e:	f000 f9db 	bl	8001528 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001172:	f000 f96d 	bl	8001450 <MX_SPI1_Init>
  MX_SPI3_Init();
 8001176:	f000 f9a1 	bl	80014bc <MX_SPI3_Init>
  MX_MBEDTLS_Init();
 800117a:	f00d ffcb 	bl	800f114 <MX_MBEDTLS_Init>
  MX_CRC_Init();
 800117e:	f000 f953 	bl	8001428 <MX_CRC_Init>
  /* Call PreOsInit function */
  MX_MBEDTLS_Init();
 8001182:	f00d ffc7 	bl	800f114 <MX_MBEDTLS_Init>
//  if (EthernetEthPool == NULL) Error_Handler();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001186:	f00e f811 	bl	800f1ac <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Network */
  NetworkHandle = osMutexNew(&Network_attributes);
 800118a:	4846      	ldr	r0, [pc, #280]	; (80012a4 <main+0x14c>)
 800118c:	f00e f943 	bl	800f416 <osMutexNew>
 8001190:	4603      	mov	r3, r0
 8001192:	4a45      	ldr	r2, [pc, #276]	; (80012a8 <main+0x150>)
 8001194:	6013      	str	r3, [r2, #0]

  /* creation of LFS */
  LFSHandle = osMutexNew(&LFS_attributes);
 8001196:	4845      	ldr	r0, [pc, #276]	; (80012ac <main+0x154>)
 8001198:	f00e f93d 	bl	800f416 <osMutexNew>
 800119c:	4603      	mov	r3, r0
 800119e:	4a44      	ldr	r2, [pc, #272]	; (80012b0 <main+0x158>)
 80011a0:	6013      	str	r3, [r2, #0]

  /* creation of Socket */
  SocketHandle = osMutexNew(&Socket_attributes);
 80011a2:	4844      	ldr	r0, [pc, #272]	; (80012b4 <main+0x15c>)
 80011a4:	f00e f937 	bl	800f416 <osMutexNew>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4a43      	ldr	r2, [pc, #268]	; (80012b8 <main+0x160>)
 80011ac:	6013      	str	r3, [r2, #0]

  /* creation of ServiceSocket */
  ServiceSocketHandle = osMutexNew(&ServiceSocket_attributes);
 80011ae:	4843      	ldr	r0, [pc, #268]	; (80012bc <main+0x164>)
 80011b0:	f00e f931 	bl	800f416 <osMutexNew>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4a42      	ldr	r2, [pc, #264]	; (80012c0 <main+0x168>)
 80011b8:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of rowPowerSensorQ */
  rowPowerSensorQHandle = osMessageQueueNew (1, 30, &rowPowerSensorQ_attributes);
 80011ba:	4a42      	ldr	r2, [pc, #264]	; (80012c4 <main+0x16c>)
 80011bc:	211e      	movs	r1, #30
 80011be:	2001      	movs	r0, #1
 80011c0:	f00e fa37 	bl	800f632 <osMessageQueueNew>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4a40      	ldr	r2, [pc, #256]	; (80012c8 <main+0x170>)
 80011c8:	6013      	str	r3, [r2, #0]

  /* creation of EthernetInfoQ */
  EthernetInfoQHandle = osMessageQueueNew (1, sizeof(Ethernet_info_struct), &EthernetInfoQ_attributes);
 80011ca:	4a40      	ldr	r2, [pc, #256]	; (80012cc <main+0x174>)
 80011cc:	2120      	movs	r1, #32
 80011ce:	2001      	movs	r0, #1
 80011d0:	f00e fa2f 	bl	800f632 <osMessageQueueNew>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a3e      	ldr	r2, [pc, #248]	; (80012d0 <main+0x178>)
 80011d8:	6013      	str	r3, [r2, #0]

  /* creation of PowerDataQ */
  PowerDataQHandle = osMessageQueueNew (1, sizeof(PowerSensStruct), &PowerDataQ_attributes);
 80011da:	4a3e      	ldr	r2, [pc, #248]	; (80012d4 <main+0x17c>)
 80011dc:	2118      	movs	r1, #24
 80011de:	2001      	movs	r0, #1
 80011e0:	f00e fa27 	bl	800f632 <osMessageQueueNew>
 80011e4:	4603      	mov	r3, r0
 80011e6:	4a3c      	ldr	r2, [pc, #240]	; (80012d8 <main+0x180>)
 80011e8:	6013      	str	r3, [r2, #0]

  /* creation of Curr_sensor_settings */
  Curr_sensor_settingsHandle = osMessageQueueNew (1, sizeof(P_sens_sett_struct), &Curr_sensor_settings_attributes);
 80011ea:	4a3c      	ldr	r2, [pc, #240]	; (80012dc <main+0x184>)
 80011ec:	2108      	movs	r1, #8
 80011ee:	2001      	movs	r0, #1
 80011f0:	f00e fa1f 	bl	800f632 <osMessageQueueNew>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a3a      	ldr	r2, [pc, #232]	; (80012e0 <main+0x188>)
 80011f8:	6013      	str	r3, [r2, #0]

  /* creation of mqttQ */
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 80011fa:	4a3a      	ldr	r2, [pc, #232]	; (80012e4 <main+0x18c>)
 80011fc:	21c6      	movs	r1, #198	; 0xc6
 80011fe:	2001      	movs	r0, #1
 8001200:	f00e fa17 	bl	800f632 <osMessageQueueNew>
 8001204:	4603      	mov	r3, r0
 8001206:	4a38      	ldr	r2, [pc, #224]	; (80012e8 <main+0x190>)
 8001208:	6013      	str	r3, [r2, #0]

  /* creation of mb_tcp_settingsQ */
  mb_tcp_settingsQHandle = osMessageQueueNew (1, sizeof(ModBusTCP_struct), &mb_tcp_settingsQ_attributes);
 800120a:	4a38      	ldr	r2, [pc, #224]	; (80012ec <main+0x194>)
 800120c:	2102      	movs	r1, #2
 800120e:	2001      	movs	r0, #1
 8001210:	f00e fa0f 	bl	800f632 <osMessageQueueNew>
 8001214:	4603      	mov	r3, r0
 8001216:	4a36      	ldr	r2, [pc, #216]	; (80012f0 <main+0x198>)
 8001218:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800121a:	4a36      	ldr	r2, [pc, #216]	; (80012f4 <main+0x19c>)
 800121c:	2100      	movs	r1, #0
 800121e:	4836      	ldr	r0, [pc, #216]	; (80012f8 <main+0x1a0>)
 8001220:	f00e f80e 	bl	800f240 <osThreadNew>
 8001224:	4603      	mov	r3, r0
 8001226:	4a35      	ldr	r2, [pc, #212]	; (80012fc <main+0x1a4>)
 8001228:	6013      	str	r3, [r2, #0]

  /* creation of SensorsTask */
  SensorsTaskHandle = osThreadNew(vSensorsTask, NULL, &SensorsTask_attributes);
 800122a:	4a35      	ldr	r2, [pc, #212]	; (8001300 <main+0x1a8>)
 800122c:	2100      	movs	r1, #0
 800122e:	4835      	ldr	r0, [pc, #212]	; (8001304 <main+0x1ac>)
 8001230:	f00e f806 	bl	800f240 <osThreadNew>
 8001234:	4603      	mov	r3, r0
 8001236:	4a34      	ldr	r2, [pc, #208]	; (8001308 <main+0x1b0>)
 8001238:	6013      	str	r3, [r2, #0]

  /* creation of RW_Settings_Tas */
  RW_Settings_TasHandle = osThreadNew(vRW_Settings_Tas, NULL, &RW_Settings_Tas_attributes);
 800123a:	4a34      	ldr	r2, [pc, #208]	; (800130c <main+0x1b4>)
 800123c:	2100      	movs	r1, #0
 800123e:	4834      	ldr	r0, [pc, #208]	; (8001310 <main+0x1b8>)
 8001240:	f00d fffe 	bl	800f240 <osThreadNew>
 8001244:	4603      	mov	r3, r0
 8001246:	4a33      	ldr	r2, [pc, #204]	; (8001314 <main+0x1bc>)
 8001248:	6013      	str	r3, [r2, #0]

  /* creation of oneSecondTickTa */
  oneSecondTickTaHandle = osThreadNew(vOneSecondTickTask, NULL, &oneSecondTickTa_attributes);
 800124a:	4a33      	ldr	r2, [pc, #204]	; (8001318 <main+0x1c0>)
 800124c:	2100      	movs	r1, #0
 800124e:	4833      	ldr	r0, [pc, #204]	; (800131c <main+0x1c4>)
 8001250:	f00d fff6 	bl	800f240 <osThreadNew>
 8001254:	4603      	mov	r3, r0
 8001256:	4a32      	ldr	r2, [pc, #200]	; (8001320 <main+0x1c8>)
 8001258:	6013      	str	r3, [r2, #0]

  /* creation of maintEthTask */
  maintEthTaskHandle = osThreadNew(vMaintEthTask, NULL, &maintEthTask_attributes);
 800125a:	4a32      	ldr	r2, [pc, #200]	; (8001324 <main+0x1cc>)
 800125c:	2100      	movs	r1, #0
 800125e:	4832      	ldr	r0, [pc, #200]	; (8001328 <main+0x1d0>)
 8001260:	f00d ffee 	bl	800f240 <osThreadNew>
 8001264:	4603      	mov	r3, r0
 8001266:	4a31      	ldr	r2, [pc, #196]	; (800132c <main+0x1d4>)
 8001268:	6013      	str	r3, [r2, #0]

  /* creation of DebugMemUsageT */
  DebugMemUsageTHandle = osThreadNew(vDebugMemUsage, NULL, &DebugMemUsageT_attributes);
 800126a:	4a31      	ldr	r2, [pc, #196]	; (8001330 <main+0x1d8>)
 800126c:	2100      	movs	r1, #0
 800126e:	4831      	ldr	r0, [pc, #196]	; (8001334 <main+0x1dc>)
 8001270:	f00d ffe6 	bl	800f240 <osThreadNew>
 8001274:	4603      	mov	r3, r0
 8001276:	4a30      	ldr	r2, [pc, #192]	; (8001338 <main+0x1e0>)
 8001278:	6013      	str	r3, [r2, #0]

  /* creation of httpServTask */
  httpServTaskHandle = osThreadNew(httpServ, NULL, &httpServTask_attributes);
 800127a:	4a30      	ldr	r2, [pc, #192]	; (800133c <main+0x1e4>)
 800127c:	2100      	movs	r1, #0
 800127e:	4830      	ldr	r0, [pc, #192]	; (8001340 <main+0x1e8>)
 8001280:	f00d ffde 	bl	800f240 <osThreadNew>
 8001284:	4603      	mov	r3, r0
 8001286:	4a2f      	ldr	r2, [pc, #188]	; (8001344 <main+0x1ec>)
 8001288:	6013      	str	r3, [r2, #0]

  /* creation of mqttClientTask */
  mqttClientTaskHandle = osThreadNew(vMQTT_Task, NULL, &mqttClientTask_attributes);
 800128a:	4a2f      	ldr	r2, [pc, #188]	; (8001348 <main+0x1f0>)
 800128c:	2100      	movs	r1, #0
 800128e:	482f      	ldr	r0, [pc, #188]	; (800134c <main+0x1f4>)
 8001290:	f00d ffd6 	bl	800f240 <osThreadNew>
 8001294:	4603      	mov	r3, r0
 8001296:	4a2e      	ldr	r2, [pc, #184]	; (8001350 <main+0x1f8>)
 8001298:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800129a:	f00d ffab 	bl	800f1f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800129e:	e7fe      	b.n	800129e <main+0x146>
 80012a0:	0800ef19 	.word	0x0800ef19
 80012a4:	080224a8 	.word	0x080224a8
 80012a8:	2000042c 	.word	0x2000042c
 80012ac:	080224b8 	.word	0x080224b8
 80012b0:	20000430 	.word	0x20000430
 80012b4:	080224c8 	.word	0x080224c8
 80012b8:	20000434 	.word	0x20000434
 80012bc:	080224d8 	.word	0x080224d8
 80012c0:	20000438 	.word	0x20000438
 80012c4:	08022418 	.word	0x08022418
 80012c8:	20000414 	.word	0x20000414
 80012cc:	08022430 	.word	0x08022430
 80012d0:	20000418 	.word	0x20000418
 80012d4:	08022448 	.word	0x08022448
 80012d8:	2000041c 	.word	0x2000041c
 80012dc:	08022460 	.word	0x08022460
 80012e0:	20000420 	.word	0x20000420
 80012e4:	08022478 	.word	0x08022478
 80012e8:	20000424 	.word	0x20000424
 80012ec:	08022490 	.word	0x08022490
 80012f0:	20000428 	.word	0x20000428
 80012f4:	080222f8 	.word	0x080222f8
 80012f8:	08001675 	.word	0x08001675
 80012fc:	200003f4 	.word	0x200003f4
 8001300:	0802231c 	.word	0x0802231c
 8001304:	08001685 	.word	0x08001685
 8001308:	200003f8 	.word	0x200003f8
 800130c:	08022340 	.word	0x08022340
 8001310:	080017cd 	.word	0x080017cd
 8001314:	200003fc 	.word	0x200003fc
 8001318:	08022364 	.word	0x08022364
 800131c:	08001a3d 	.word	0x08001a3d
 8001320:	20000400 	.word	0x20000400
 8001324:	08022388 	.word	0x08022388
 8001328:	08001a65 	.word	0x08001a65
 800132c:	20000404 	.word	0x20000404
 8001330:	080223ac 	.word	0x080223ac
 8001334:	08001fe1 	.word	0x08001fe1
 8001338:	20000408 	.word	0x20000408
 800133c:	080223d0 	.word	0x080223d0
 8001340:	0800207d 	.word	0x0800207d
 8001344:	2000040c 	.word	0x2000040c
 8001348:	080223f4 	.word	0x080223f4
 800134c:	080021f1 	.word	0x080021f1
 8001350:	20000410 	.word	0x20000410

08001354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b094      	sub	sp, #80	; 0x50
 8001358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135a:	f107 0320 	add.w	r3, r7, #32
 800135e:	2230      	movs	r2, #48	; 0x30
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f01a fdd0 	bl	801bf08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	4b28      	ldr	r3, [pc, #160]	; (8001420 <SystemClock_Config+0xcc>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	4a27      	ldr	r2, [pc, #156]	; (8001420 <SystemClock_Config+0xcc>)
 8001382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001386:	6413      	str	r3, [r2, #64]	; 0x40
 8001388:	4b25      	ldr	r3, [pc, #148]	; (8001420 <SystemClock_Config+0xcc>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001394:	2300      	movs	r3, #0
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	4b22      	ldr	r3, [pc, #136]	; (8001424 <SystemClock_Config+0xd0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013a0:	4a20      	ldr	r2, [pc, #128]	; (8001424 <SystemClock_Config+0xd0>)
 80013a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <SystemClock_Config+0xd0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013b4:	2301      	movs	r3, #1
 80013b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013be:	2302      	movs	r3, #2
 80013c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013c8:	2304      	movs	r3, #4
 80013ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80013cc:	2354      	movs	r3, #84	; 0x54
 80013ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d0:	2302      	movs	r3, #2
 80013d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013d4:	2304      	movs	r3, #4
 80013d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d8:	f107 0320 	add.w	r3, r7, #32
 80013dc:	4618      	mov	r0, r3
 80013de:	f003 fe31 	bl	8005044 <HAL_RCC_OscConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013e8:	f000 ff90 	bl	800230c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ec:	230f      	movs	r3, #15
 80013ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f0:	2302      	movs	r3, #2
 80013f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	2102      	movs	r1, #2
 8001408:	4618      	mov	r0, r3
 800140a:	f004 f893 	bl	8005534 <HAL_RCC_ClockConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001414:	f000 ff7a 	bl	800230c <Error_Handler>
  }
}
 8001418:	bf00      	nop
 800141a:	3750      	adds	r7, #80	; 0x50
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40023800 	.word	0x40023800
 8001424:	40007000 	.word	0x40007000

08001428 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_CRC_Init+0x20>)
 800142e:	4a07      	ldr	r2, [pc, #28]	; (800144c <MX_CRC_Init+0x24>)
 8001430:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_CRC_Init+0x20>)
 8001434:	f003 fbba 	bl	8004bac <HAL_CRC_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800143e:	f000 ff65 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200002f4 	.word	0x200002f4
 800144c:	40023000 	.word	0x40023000

08001450 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <MX_SPI1_Init+0x64>)
 8001456:	4a18      	ldr	r2, [pc, #96]	; (80014b8 <MX_SPI1_Init+0x68>)
 8001458:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <MX_SPI1_Init+0x64>)
 800145c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001460:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001462:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <MX_SPI1_Init+0x64>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <MX_SPI1_Init+0x64>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <MX_SPI1_Init+0x64>)
 8001470:	2202      	movs	r2, #2
 8001472:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <MX_SPI1_Init+0x64>)
 8001476:	2201      	movs	r2, #1
 8001478:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <MX_SPI1_Init+0x64>)
 800147c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001480:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <MX_SPI1_Init+0x64>)
 8001484:	2200      	movs	r2, #0
 8001486:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001488:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <MX_SPI1_Init+0x64>)
 800148a:	2200      	movs	r2, #0
 800148c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <MX_SPI1_Init+0x64>)
 8001490:	2200      	movs	r2, #0
 8001492:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <MX_SPI1_Init+0x64>)
 8001496:	2200      	movs	r2, #0
 8001498:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <MX_SPI1_Init+0x64>)
 800149c:	220a      	movs	r2, #10
 800149e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014a0:	4804      	ldr	r0, [pc, #16]	; (80014b4 <MX_SPI1_Init+0x64>)
 80014a2:	f004 fa99 	bl	80059d8 <HAL_SPI_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014ac:	f000 ff2e 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	200002fc 	.word	0x200002fc
 80014b8:	40013000 	.word	0x40013000

080014bc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80014c0:	4b17      	ldr	r3, [pc, #92]	; (8001520 <MX_SPI3_Init+0x64>)
 80014c2:	4a18      	ldr	r2, [pc, #96]	; (8001524 <MX_SPI3_Init+0x68>)
 80014c4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <MX_SPI3_Init+0x64>)
 80014c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014cc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <MX_SPI3_Init+0x64>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <MX_SPI3_Init+0x64>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <MX_SPI3_Init+0x64>)
 80014dc:	2202      	movs	r2, #2
 80014de:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <MX_SPI3_Init+0x64>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <MX_SPI3_Init+0x64>)
 80014e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ec:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <MX_SPI3_Init+0x64>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <MX_SPI3_Init+0x64>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <MX_SPI3_Init+0x64>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001500:	4b07      	ldr	r3, [pc, #28]	; (8001520 <MX_SPI3_Init+0x64>)
 8001502:	2200      	movs	r2, #0
 8001504:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <MX_SPI3_Init+0x64>)
 8001508:	220a      	movs	r2, #10
 800150a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800150c:	4804      	ldr	r0, [pc, #16]	; (8001520 <MX_SPI3_Init+0x64>)
 800150e:	f004 fa63 	bl	80059d8 <HAL_SPI_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001518:	f000 fef8 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000354 	.word	0x20000354
 8001524:	40003c00 	.word	0x40003c00

08001528 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <MX_USART2_UART_Init+0x50>)
 800152e:	4a13      	ldr	r2, [pc, #76]	; (800157c <MX_USART2_UART_Init+0x54>)
 8001530:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 4800;
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <MX_USART2_UART_Init+0x50>)
 8001534:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8001538:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <MX_USART2_UART_Init+0x50>)
 800153c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001540:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001542:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <MX_USART2_UART_Init+0x50>)
 8001544:	2200      	movs	r2, #0
 8001546:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <MX_USART2_UART_Init+0x50>)
 800154a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800154e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <MX_USART2_UART_Init+0x50>)
 8001552:	2204      	movs	r2, #4
 8001554:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <MX_USART2_UART_Init+0x50>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MX_USART2_UART_Init+0x50>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_USART2_UART_Init+0x50>)
 8001564:	f005 fa82 	bl	8006a6c <HAL_UART_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800156e:	f000 fecd 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200003ac 	.word	0x200003ac
 800157c:	40004400 	.word	0x40004400

08001580 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	4b33      	ldr	r3, [pc, #204]	; (8001668 <MX_GPIO_Init+0xe8>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a32      	ldr	r2, [pc, #200]	; (8001668 <MX_GPIO_Init+0xe8>)
 80015a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b30      	ldr	r3, [pc, #192]	; (8001668 <MX_GPIO_Init+0xe8>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	4b2c      	ldr	r3, [pc, #176]	; (8001668 <MX_GPIO_Init+0xe8>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a2b      	ldr	r2, [pc, #172]	; (8001668 <MX_GPIO_Init+0xe8>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b29      	ldr	r3, [pc, #164]	; (8001668 <MX_GPIO_Init+0xe8>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	603b      	str	r3, [r7, #0]
 80015d2:	4b25      	ldr	r3, [pc, #148]	; (8001668 <MX_GPIO_Init+0xe8>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a24      	ldr	r2, [pc, #144]	; (8001668 <MX_GPIO_Init+0xe8>)
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b22      	ldr	r3, [pc, #136]	; (8001668 <MX_GPIO_Init+0xe8>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_flash_cs_GPIO_Port, SPI_flash_cs_Pin, GPIO_PIN_SET);
 80015ea:	2201      	movs	r2, #1
 80015ec:	2110      	movs	r1, #16
 80015ee:	481f      	ldr	r0, [pc, #124]	; (800166c <MX_GPIO_Init+0xec>)
 80015f0:	f003 fd0e 	bl	8005010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ethernet_reset_GPIO_Port, Ethernet_reset_Pin, GPIO_PIN_RESET);
 80015f4:	2200      	movs	r2, #0
 80015f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015fa:	481c      	ldr	r0, [pc, #112]	; (800166c <MX_GPIO_Init+0xec>)
 80015fc:	f003 fd08 	bl	8005010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ethernet_cs_GPIO_Port, Ethernet_cs_Pin, GPIO_PIN_RESET);
 8001600:	2200      	movs	r2, #0
 8001602:	2140      	movs	r1, #64	; 0x40
 8001604:	481a      	ldr	r0, [pc, #104]	; (8001670 <MX_GPIO_Init+0xf0>)
 8001606:	f003 fd03 	bl	8005010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_flash_cs_Pin */
  GPIO_InitStruct.Pin = SPI_flash_cs_Pin;
 800160a:	2310      	movs	r3, #16
 800160c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_flash_cs_GPIO_Port, &GPIO_InitStruct);
 800161a:	f107 030c 	add.w	r3, r7, #12
 800161e:	4619      	mov	r1, r3
 8001620:	4812      	ldr	r0, [pc, #72]	; (800166c <MX_GPIO_Init+0xec>)
 8001622:	f003 fb71 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ethernet_reset_Pin */
  GPIO_InitStruct.Pin = Ethernet_reset_Pin;
 8001626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800162a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Ethernet_reset_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	4619      	mov	r1, r3
 800163e:	480b      	ldr	r0, [pc, #44]	; (800166c <MX_GPIO_Init+0xec>)
 8001640:	f003 fb62 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ethernet_cs_Pin */
  GPIO_InitStruct.Pin = Ethernet_cs_Pin;
 8001644:	2340      	movs	r3, #64	; 0x40
 8001646:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001648:	2301      	movs	r3, #1
 800164a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Ethernet_cs_GPIO_Port, &GPIO_InitStruct);
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	4619      	mov	r1, r3
 800165a:	4805      	ldr	r0, [pc, #20]	; (8001670 <MX_GPIO_Init+0xf0>)
 800165c:	f003 fb54 	bl	8004d08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001660:	bf00      	nop
 8001662:	3720      	adds	r7, #32
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40023800 	.word	0x40023800
 800166c:	40020000 	.word	0x40020000
 8001670:	40020400 	.word	0x40020400

08001674 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800167c:	2001      	movs	r0, #1
 800167e:	f00d feaf 	bl	800f3e0 <osDelay>
 8001682:	e7fb      	b.n	800167c <StartDefaultTask+0x8>

08001684 <vSensorsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vSensorsTask */
void vSensorsTask(void *argument)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b094      	sub	sp, #80	; 0x50
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	uint32_t			temp;
	uint8_t				array[30];
	PowerSensStruct		PowerData;
	P_sens_sett_struct	PowerSett;

	PowerSett.resistance = 0.001;
 800168c:	4b47      	ldr	r3, [pc, #284]	; (80017ac <vSensorsTask+0x128>)
 800168e:	613b      	str	r3, [r7, #16]
	PowerSett.save = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	733b      	strb	r3, [r7, #12]
	xQueueOverwrite(Curr_sensor_settingsHandle, (void *)&PowerSett);
 8001694:	4b46      	ldr	r3, [pc, #280]	; (80017b0 <vSensorsTask+0x12c>)
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	f107 010c 	add.w	r1, r7, #12
 800169c:	2302      	movs	r3, #2
 800169e:	2200      	movs	r2, #0
 80016a0:	f00e fbf4 	bl	800fe8c <xQueueGenericSend>

	sens_task_start:

	xQueuePeek(Curr_sensor_settingsHandle ,&PowerSett,0);
 80016a4:	4b42      	ldr	r3, [pc, #264]	; (80017b0 <vSensorsTask+0x12c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f107 010c 	add.w	r1, r7, #12
 80016ac:	2200      	movs	r2, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f00e ff72 	bl	8010598 <xQueuePeek>
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24);
 80016b4:	2218      	movs	r2, #24
 80016b6:	493f      	ldr	r1, [pc, #252]	; (80017b4 <vSensorsTask+0x130>)
 80016b8:	483f      	ldr	r0, [pc, #252]	; (80017b8 <vSensorsTask+0x134>)
 80016ba:	f005 fa27 	bl	8006b0c <HAL_UARTEx_ReceiveToIdle_IT>
	osDelay(100);
 80016be:	2064      	movs	r0, #100	; 0x64
 80016c0:	f00d fe8e 	bl	800f3e0 <osDelay>
	InitHLW8032(1880000, 1000, PowerSett.resistance);
 80016c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80016c8:	eeb0 0a67 	vmov.f32	s0, s15
 80016cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016d0:	483a      	ldr	r0, [pc, #232]	; (80017bc <vSensorsTask+0x138>)
 80016d2:	f002 fb99 	bl	8003e08 <InitHLW8032>
  /* Infinite loop */
  for(;;)
  {
	if (osMessageQueueGetCount(rowPowerSensorQHandle) != 0 ){
 80016d6:	4b3a      	ldr	r3, [pc, #232]	; (80017c0 <vSensorsTask+0x13c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f00e f8da 	bl	800f894 <osMessageQueueGetCount>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d040      	beq.n	8001768 <vSensorsTask+0xe4>
		osMessageQueueGet	(rowPowerSensorQHandle,&array,NULL, 1000);
 80016e6:	4b36      	ldr	r3, [pc, #216]	; (80017c0 <vSensorsTask+0x13c>)
 80016e8:	6818      	ldr	r0, [r3, #0]
 80016ea:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80016ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f2:	2200      	movs	r2, #0
 80016f4:	f00e f870 	bl	800f7d8 <osMessageQueueGet>
		if( RecvRawString((const unsigned char *)array) == 0){ // all OK if return 0
 80016f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016fc:	4618      	mov	r0, r3
 80016fe:	f002 fbf5 	bl	8003eec <RecvRawString>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d12f      	bne.n	8001768 <vSensorsTask+0xe4>
			PowerData.KWatt_h 		= GetKWh();
 8001708:	f002 fdd2 	bl	80042b0 <GetKWh>
 800170c:	eef0 7a40 	vmov.f32	s15, s0
 8001710:	edc7 7a07 	vstr	s15, [r7, #28]
			PowerData.Voltage 		= GetVoltage();
 8001714:	f002 fcf2 	bl	80040fc <GetVoltage>
 8001718:	eef0 7a40 	vmov.f32	s15, s0
 800171c:	edc7 7a05 	vstr	s15, [r7, #20]
			PowerData.ApparPower 	= GetApparentPower();
 8001720:	f002 fd78 	bl	8004214 <GetApparentPower>
 8001724:	eef0 7a40 	vmov.f32	s15, s0
 8001728:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			PowerData.ActivPower 	= GetActivePower();
 800172c:	f002 fd40 	bl	80041b0 <GetActivePower>
 8001730:	eef0 7a40 	vmov.f32	s15, s0
 8001734:	edc7 7a08 	vstr	s15, [r7, #32]
			PowerData.Current 		= GetCurrent();
 8001738:	f002 fd20 	bl	800417c <GetCurrent>
 800173c:	eef0 7a40 	vmov.f32	s15, s0
 8001740:	edc7 7a06 	vstr	s15, [r7, #24]
			PowerData.PowerFactor	= PowerFactor();
 8001744:	f002 fd81 	bl	800424a <PowerFactor>
 8001748:	eef0 7a40 	vmov.f32	s15, s0
 800174c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			xQueueOverwrite(PowerDataQHandle, (void *)&PowerData);
 8001750:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <vSensorsTask+0x140>)
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	f107 0114 	add.w	r1, r7, #20
 8001758:	2302      	movs	r3, #2
 800175a:	2200      	movs	r2, #0
 800175c:	f00e fb96 	bl	800fe8c <xQueueGenericSend>
		}
	}
	while (HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24) == HAL_ERROR){
 8001760:	e002      	b.n	8001768 <vSensorsTask+0xe4>
		temp = USART2->DR;
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <vSensorsTask+0x144>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24) == HAL_ERROR){
 8001768:	2218      	movs	r2, #24
 800176a:	4912      	ldr	r1, [pc, #72]	; (80017b4 <vSensorsTask+0x130>)
 800176c:	4812      	ldr	r0, [pc, #72]	; (80017b8 <vSensorsTask+0x134>)
 800176e:	f005 f9cd 	bl	8006b0c <HAL_UARTEx_ReceiveToIdle_IT>
 8001772:	4603      	mov	r3, r0
 8001774:	2b01      	cmp	r3, #1
 8001776:	d0f4      	beq.n	8001762 <vSensorsTask+0xde>
	}
    osDelay(1000);
 8001778:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800177c:	f00d fe30 	bl	800f3e0 <osDelay>
    xQueuePeek(Curr_sensor_settingsHandle ,&PowerSett,0);
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <vSensorsTask+0x12c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f107 010c 	add.w	r1, r7, #12
 8001788:	2200      	movs	r2, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f00e ff04 	bl	8010598 <xQueuePeek>
    if (PowerSett.save == 1){
 8001790:	7b3b      	ldrb	r3, [r7, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d09f      	beq.n	80016d6 <vSensorsTask+0x52>
    	PowerSett.save = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	733b      	strb	r3, [r7, #12]
    	xQueueOverwrite(Curr_sensor_settingsHandle, (void *)&PowerSett);
 800179a:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <vSensorsTask+0x12c>)
 800179c:	6818      	ldr	r0, [r3, #0]
 800179e:	f107 010c 	add.w	r1, r7, #12
 80017a2:	2302      	movs	r3, #2
 80017a4:	2200      	movs	r2, #0
 80017a6:	f00e fb71 	bl	800fe8c <xQueueGenericSend>
    	goto sens_task_start;
 80017aa:	e77b      	b.n	80016a4 <vSensorsTask+0x20>
 80017ac:	3a83126f 	.word	0x3a83126f
 80017b0:	20000420 	.word	0x20000420
 80017b4:	2000043c 	.word	0x2000043c
 80017b8:	200003ac 	.word	0x200003ac
 80017bc:	001cafc0 	.word	0x001cafc0
 80017c0:	20000414 	.word	0x20000414
 80017c4:	2000041c 	.word	0x2000041c
 80017c8:	40004400 	.word	0x40004400

080017cc <vRW_Settings_Tas>:
* @retval None
*/

/* USER CODE END Header_vRW_Settings_Tas */
void vRW_Settings_Tas(void *argument)
{
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
 80017d2:	af12      	add	r7, sp, #72	; 0x48
 80017d4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80017d8:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80017dc:	6018      	str	r0, [r3, #0]
	uint8_t 				lookheadbuf[256];
	P_sens_sett_struct		PowerSett;
	MQTT_cred_struct		MQTT_cred;
	ModBusTCP_struct		mb_tcp_sett;

	SPI_flash_set(hspi1);
 80017de:	4c87      	ldr	r4, [pc, #540]	; (80019fc <vRW_Settings_Tas+0x230>)
 80017e0:	4668      	mov	r0, sp
 80017e2:	f104 0310 	add.w	r3, r4, #16
 80017e6:	2248      	movs	r2, #72	; 0x48
 80017e8:	4619      	mov	r1, r3
 80017ea:	f01a fd62 	bl	801c2b2 <memcpy>
 80017ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017f2:	f003 f863 	bl	80048bc <SPI_flash_set>
	SPI_flash_reg_cb(SPI_flash_select, SPI_flash_deselect, SPI_flash_read_byte, SPI_flash_send_byte);
 80017f6:	4b82      	ldr	r3, [pc, #520]	; (8001a00 <vRW_Settings_Tas+0x234>)
 80017f8:	4a82      	ldr	r2, [pc, #520]	; (8001a04 <vRW_Settings_Tas+0x238>)
 80017fa:	4983      	ldr	r1, [pc, #524]	; (8001a08 <vRW_Settings_Tas+0x23c>)
 80017fc:	4883      	ldr	r0, [pc, #524]	; (8001a0c <vRW_Settings_Tas+0x240>)
 80017fe:	f002 fdd7 	bl	80043b0 <SPI_flash_reg_cb>
	spi_fs_init(buff_read, buff_write, lookheadbuf, 256 );
 8001802:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001806:	f507 71f0 	add.w	r1, r7, #480	; 0x1e0
 800180a:	f507 7038 	add.w	r0, r7, #736	; 0x2e0
 800180e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001812:	f017 febb 	bl	801958c <spi_fs_init>
	spi_fs_init_mutex(LfsMutexTake, LfsMutexRelease);
 8001816:	497e      	ldr	r1, [pc, #504]	; (8001a10 <vRW_Settings_Tas+0x244>)
 8001818:	487e      	ldr	r0, [pc, #504]	; (8001a14 <vRW_Settings_Tas+0x248>)
 800181a:	f017 fe9b 	bl	8019554 <spi_fs_init_mutex>


	if (spi_fs_mount() < 0){
 800181e:	f017 feed 	bl	80195fc <spi_fs_mount>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	da03      	bge.n	8001830 <vRW_Settings_Tas+0x64>
		spi_fs_format();
 8001828:	f017 ff10 	bl	801964c <spi_fs_format>
		spi_fs_mount();
 800182c:	f017 fee6 	bl	80195fc <spi_fs_mount>
	}

	if (0 < spi_fs_file_size(POW_SETT_FILE)){
 8001830:	4879      	ldr	r0, [pc, #484]	; (8001a18 <vRW_Settings_Tas+0x24c>)
 8001832:	f017 ff95 	bl	8019760 <spi_fs_file_size>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	dd0f      	ble.n	800185c <vRW_Settings_Tas+0x90>
		spi_fs_read_file_offset(POW_SETT_FILE, &PowerSett, 0, sizeof(PowerSett));
 800183c:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8001840:	2308      	movs	r3, #8
 8001842:	2200      	movs	r2, #0
 8001844:	4874      	ldr	r0, [pc, #464]	; (8001a18 <vRW_Settings_Tas+0x24c>)
 8001846:	f017 ff0d 	bl	8019664 <spi_fs_read_file_offset>
		xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 800184a:	4b74      	ldr	r3, [pc, #464]	; (8001a1c <vRW_Settings_Tas+0x250>)
 800184c:	6818      	ldr	r0, [r3, #0]
 800184e:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8001852:	2302      	movs	r3, #2
 8001854:	2200      	movs	r2, #0
 8001856:	f00e fb19 	bl	800fe8c <xQueueGenericSend>
 800185a:	e013      	b.n	8001884 <vRW_Settings_Tas+0xb8>
	}else{
		PowerSett.resistance 	= DEFAULT_SHUNT_RESISTANSE;
 800185c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8001860:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8001864:	4a6e      	ldr	r2, [pc, #440]	; (8001a20 <vRW_Settings_Tas+0x254>)
 8001866:	605a      	str	r2, [r3, #4]
		PowerSett.save 			= 1;
 8001868:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 800186c:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]
		xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 8001874:	4b69      	ldr	r3, [pc, #420]	; (8001a1c <vRW_Settings_Tas+0x250>)
 8001876:	6818      	ldr	r0, [r3, #0]
 8001878:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 800187c:	2302      	movs	r3, #2
 800187e:	2200      	movs	r2, #0
 8001880:	f00e fb04 	bl	800fe8c <xQueueGenericSend>
	}

	if (0 < spi_fs_file_size(MQTT_SETT_FILE)){
 8001884:	4867      	ldr	r0, [pc, #412]	; (8001a24 <vRW_Settings_Tas+0x258>)
 8001886:	f017 ff6b 	bl	8019760 <spi_fs_file_size>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	dd0f      	ble.n	80018b0 <vRW_Settings_Tas+0xe4>
		spi_fs_read_file_offset(MQTT_SETT_FILE, &MQTT_cred, 0, sizeof(MQTT_cred));
 8001890:	f107 0110 	add.w	r1, r7, #16
 8001894:	23c6      	movs	r3, #198	; 0xc6
 8001896:	2200      	movs	r2, #0
 8001898:	4862      	ldr	r0, [pc, #392]	; (8001a24 <vRW_Settings_Tas+0x258>)
 800189a:	f017 fee3 	bl	8019664 <spi_fs_read_file_offset>
		xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 800189e:	4b62      	ldr	r3, [pc, #392]	; (8001a28 <vRW_Settings_Tas+0x25c>)
 80018a0:	6818      	ldr	r0, [r3, #0]
 80018a2:	f107 0110 	add.w	r1, r7, #16
 80018a6:	2302      	movs	r3, #2
 80018a8:	2200      	movs	r2, #0
 80018aa:	f00e faef 	bl	800fe8c <xQueueGenericSend>
 80018ae:	e013      	b.n	80018d8 <vRW_Settings_Tas+0x10c>
	}else{
		MQTT_cred.save 			= 1;
 80018b0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80018b4:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 80018b8:	2201      	movs	r2, #1
 80018ba:	701a      	strb	r2, [r3, #0]
		MQTT_cred.enable		= 0;
 80018bc:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80018c0:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 80018c4:	2200      	movs	r2, #0
 80018c6:	705a      	strb	r2, [r3, #1]
		xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 80018c8:	4b57      	ldr	r3, [pc, #348]	; (8001a28 <vRW_Settings_Tas+0x25c>)
 80018ca:	6818      	ldr	r0, [r3, #0]
 80018cc:	f107 0110 	add.w	r1, r7, #16
 80018d0:	2302      	movs	r3, #2
 80018d2:	2200      	movs	r2, #0
 80018d4:	f00e fada 	bl	800fe8c <xQueueGenericSend>
	}

	if (0 < spi_fs_file_size(MB_TCP_SETT_FILE)){
 80018d8:	4854      	ldr	r0, [pc, #336]	; (8001a2c <vRW_Settings_Tas+0x260>)
 80018da:	f017 ff41 	bl	8019760 <spi_fs_file_size>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	dd0f      	ble.n	8001904 <vRW_Settings_Tas+0x138>
		spi_fs_read_file_offset(MB_TCP_SETT_FILE, &mb_tcp_sett, 0, sizeof(mb_tcp_sett));
 80018e4:	f107 010c 	add.w	r1, r7, #12
 80018e8:	2302      	movs	r3, #2
 80018ea:	2200      	movs	r2, #0
 80018ec:	484f      	ldr	r0, [pc, #316]	; (8001a2c <vRW_Settings_Tas+0x260>)
 80018ee:	f017 feb9 	bl	8019664 <spi_fs_read_file_offset>
		xQueueOverwrite(mb_tcp_settingsQHandle ,(void *)&mb_tcp_sett);
 80018f2:	4b4f      	ldr	r3, [pc, #316]	; (8001a30 <vRW_Settings_Tas+0x264>)
 80018f4:	6818      	ldr	r0, [r3, #0]
 80018f6:	f107 010c 	add.w	r1, r7, #12
 80018fa:	2302      	movs	r3, #2
 80018fc:	2200      	movs	r2, #0
 80018fe:	f00e fac5 	bl	800fe8c <xQueueGenericSend>
 8001902:	e00b      	b.n	800191c <vRW_Settings_Tas+0x150>
	}else{
		mb_tcp_sett.enable 		= 0;
 8001904:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8001908:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 800190c:	2200      	movs	r2, #0
 800190e:	705a      	strb	r2, [r3, #1]
		mb_tcp_sett.save		= 1;
 8001910:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8001914:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8001918:	2201      	movs	r2, #1
 800191a:	701a      	strb	r2, [r3, #0]
	}

//	spi_fs_remove_recurcuve_in("/web");
	spi_fs_mkdir("/web");
 800191c:	4845      	ldr	r0, [pc, #276]	; (8001a34 <vRW_Settings_Tas+0x268>)
 800191e:	f017 ff9b 	bl	8019858 <spi_fs_mkdir>
	spi_fs_mkdir("/web/assets");
 8001922:	4845      	ldr	r0, [pc, #276]	; (8001a38 <vRW_Settings_Tas+0x26c>)
 8001924:	f017 ff98 	bl	8019858 <spi_fs_mkdir>
  /* Infinite loop */

  for(;;)
  {
	  xQueuePeek(Curr_sensor_settingsHandle, (void *)&PowerSett, 0);
 8001928:	4b3c      	ldr	r3, [pc, #240]	; (8001a1c <vRW_Settings_Tas+0x250>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8001930:	2200      	movs	r2, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f00e fe30 	bl	8010598 <xQueuePeek>
	  if (PowerSett.save){
 8001938:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 800193c:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d014      	beq.n	8001970 <vRW_Settings_Tas+0x1a4>
		  PowerSett.save = 0;
 8001946:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 800194a:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(POW_SETT_FILE, &PowerSett, sizeof(PowerSett));
 8001952:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001956:	2208      	movs	r2, #8
 8001958:	4619      	mov	r1, r3
 800195a:	482f      	ldr	r0, [pc, #188]	; (8001a18 <vRW_Settings_Tas+0x24c>)
 800195c:	f017 fec6 	bl	80196ec <spi_fs_over_write_file>
		  xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 8001960:	4b2e      	ldr	r3, [pc, #184]	; (8001a1c <vRW_Settings_Tas+0x250>)
 8001962:	6818      	ldr	r0, [r3, #0]
 8001964:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8001968:	2302      	movs	r3, #2
 800196a:	2200      	movs	r2, #0
 800196c:	f00e fa8e 	bl	800fe8c <xQueueGenericSend>
	  }

	  xQueuePeek(mqttQHandle, (void *)&MQTT_cred, 0);
 8001970:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <vRW_Settings_Tas+0x25c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f107 0110 	add.w	r1, r7, #16
 8001978:	2200      	movs	r2, #0
 800197a:	4618      	mov	r0, r3
 800197c:	f00e fe0c 	bl	8010598 <xQueuePeek>
	  if (MQTT_cred.save){
 8001980:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8001984:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d014      	beq.n	80019b8 <vRW_Settings_Tas+0x1ec>
		  MQTT_cred.save = 0;
 800198e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8001992:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(MQTT_SETT_FILE, &MQTT_cred, sizeof(MQTT_cred));
 800199a:	f107 0310 	add.w	r3, r7, #16
 800199e:	22c6      	movs	r2, #198	; 0xc6
 80019a0:	4619      	mov	r1, r3
 80019a2:	4820      	ldr	r0, [pc, #128]	; (8001a24 <vRW_Settings_Tas+0x258>)
 80019a4:	f017 fea2 	bl	80196ec <spi_fs_over_write_file>
		  xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 80019a8:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <vRW_Settings_Tas+0x25c>)
 80019aa:	6818      	ldr	r0, [r3, #0]
 80019ac:	f107 0110 	add.w	r1, r7, #16
 80019b0:	2302      	movs	r3, #2
 80019b2:	2200      	movs	r2, #0
 80019b4:	f00e fa6a 	bl	800fe8c <xQueueGenericSend>
	  }

	  xQueuePeek(mb_tcp_settingsQHandle, (void *)&mb_tcp_sett, 0);
 80019b8:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <vRW_Settings_Tas+0x264>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f107 010c 	add.w	r1, r7, #12
 80019c0:	2200      	movs	r2, #0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f00e fde8 	bl	8010598 <xQueuePeek>
	  if (mb_tcp_sett.save){
 80019c8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80019cc:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00c      	beq.n	80019f0 <vRW_Settings_Tas+0x224>
		  mb_tcp_sett.save = 0;
 80019d6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80019da:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(MB_TCP_SETT_FILE, &mb_tcp_sett, sizeof(mb_tcp_sett));
 80019e2:	f107 030c 	add.w	r3, r7, #12
 80019e6:	2202      	movs	r2, #2
 80019e8:	4619      	mov	r1, r3
 80019ea:	4810      	ldr	r0, [pc, #64]	; (8001a2c <vRW_Settings_Tas+0x260>)
 80019ec:	f017 fe7e 	bl	80196ec <spi_fs_over_write_file>
	  }

    osDelay(delay1s);
 80019f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019f4:	f00d fcf4 	bl	800f3e0 <osDelay>
	  xQueuePeek(Curr_sensor_settingsHandle, (void *)&PowerSett, 0);
 80019f8:	e796      	b.n	8001928 <vRW_Settings_Tas+0x15c>
 80019fa:	bf00      	nop
 80019fc:	200002fc 	.word	0x200002fc
 8001a00:	08004911 	.word	0x08004911
 8001a04:	080048ed 	.word	0x080048ed
 8001a08:	0800494d 	.word	0x0800494d
 8001a0c:	08004935 	.word	0x08004935
 8001a10:	080010d9 	.word	0x080010d9
 8001a14:	080010bd 	.word	0x080010bd
 8001a18:	0801ffbc 	.word	0x0801ffbc
 8001a1c:	20000420 	.word	0x20000420
 8001a20:	3a83126f 	.word	0x3a83126f
 8001a24:	0801ffcc 	.word	0x0801ffcc
 8001a28:	20000424 	.word	0x20000424
 8001a2c:	0801ffdc 	.word	0x0801ffdc
 8001a30:	20000428 	.word	0x20000428
 8001a34:	0801fff0 	.word	0x0801fff0
 8001a38:	0801fff8 	.word	0x0801fff8

08001a3c <vOneSecondTickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vOneSecondTickTask */
void vOneSecondTickTask(void *argument)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vOneSecondTickTask */
	uint32_t seconds;
	seconds = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	seconds++ ;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	60fb      	str	r3, [r7, #12]
	DHCP_time_handler();
 8001a4e:	f009 fbf7 	bl	800b240 <DHCP_time_handler>
	httpServer_time_handler();
 8001a52:	f00c ffd1 	bl	800e9f8 <httpServer_time_handler>
	dns_service_increment_second();
 8001a56:	f00a f97f 	bl	800bd58 <dns_service_increment_second>
    osDelay(delay1s);
 8001a5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a5e:	f00d fcbf 	bl	800f3e0 <osDelay>
	seconds++ ;
 8001a62:	e7f1      	b.n	8001a48 <vOneSecondTickTask+0xc>

08001a64 <vMaintEthTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vMaintEthTask */
void vMaintEthTask(void *argument)
{
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	f5ad 5d84 	sub.w	sp, sp, #4224	; 0x1080
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af12      	add	r7, sp, #72	; 0x48
 8001a6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a72:	f843 0c3c 	str.w	r0, [r3, #-60]
	  Ethernet_info_struct	EthernetInfo;
	  uint8_t 				i;
	  uint8_t 				DHCP_DATABUF[SOCKET_BUFF_SIZE];
	  uint8_t				DNS_buff[SOCKET_BUFF_SIZE];

	  memset(&EthernetInfo, 0, sizeof(EthernetInfo));
 8001a76:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001a7a:	f103 0308 	add.w	r3, r3, #8
 8001a7e:	2220      	movs	r2, #32
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f01a fa40 	bl	801bf08 <memset>
	  memset(&NetInfo, 		0, sizeof(NetInfo));
 8001a88:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001a8c:	f103 0308 	add.w	r3, r3, #8
 8001a90:	2217      	movs	r2, #23
 8001a92:	2100      	movs	r1, #0
 8001a94:	4618      	mov	r0, r3
 8001a96:	f01a fa37 	bl	801bf08 <memset>

	  NetInfo.mac[0]	= 0x40;
 8001a9a:	2340      	movs	r3, #64	; 0x40
 8001a9c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001aa0:	f102 0208 	add.w	r2, r2, #8
 8001aa4:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[1]	= 0x08;
 8001aa6:	2308      	movs	r3, #8
 8001aa8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001aac:	f102 0209 	add.w	r2, r2, #9
 8001ab0:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[2]	= *(uint8_t*)(UID_BASE);
 8001ab2:	4bdc      	ldr	r3, [pc, #880]	; (8001e24 <vMaintEthTask+0x3c0>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001aba:	f102 020a 	add.w	r2, r2, #10
 8001abe:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[3]	= *(uint8_t*)(UID_BASE + 0x01);
 8001ac0:	4bd9      	ldr	r3, [pc, #868]	; (8001e28 <vMaintEthTask+0x3c4>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001ac8:	f102 020b 	add.w	r2, r2, #11
 8001acc:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[4]	= *(uint8_t*)(UID_BASE + 0x02);
 8001ace:	4bd7      	ldr	r3, [pc, #860]	; (8001e2c <vMaintEthTask+0x3c8>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001ad6:	f102 020c 	add.w	r2, r2, #12
 8001ada:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[5]	= *(uint8_t*)(UID_BASE + 0x03);
 8001adc:	4bd4      	ldr	r3, [pc, #848]	; (8001e30 <vMaintEthTask+0x3cc>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001ae4:	f102 020d 	add.w	r2, r2, #13
 8001ae8:	7013      	strb	r3, [r2, #0]

	  memcpy(&EthernetInfo.mac, &NetInfo.mac, sizeof(NetInfo.mac));
 8001aea:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001aee:	f103 030b 	add.w	r3, r3, #11
 8001af2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001af6:	f102 0208 	add.w	r2, r2, #8
 8001afa:	6810      	ldr	r0, [r2, #0]
 8001afc:	6018      	str	r0, [r3, #0]
 8001afe:	8892      	ldrh	r2, [r2, #4]
 8001b00:	809a      	strh	r2, [r3, #4]

		//NetInfo.ip[0]	= 0, NetInfo.ip[1] 	= 0, NetInfo.ip[2] 	= 0, NetInfo.ip[3] 	= 0;
		//NetInfo.sn[0] 	= 0, NetInfo.sn[1] 	= 0, NetInfo.sn[2] 	= 0, NetInfo.sn[3] 	= 0;
		//NetInfo.gw[0] 	= 0, NetInfo.gw[1] 	= 0, NetInfo.gw[2] 	= 0, NetInfo.gw[3] 	= 0;
		//NetInfo.dns[0] 	= 0, NetInfo.dns[1] = 0, NetInfo.dns[2] = 0, NetInfo.dns[3] = 0;
		NetInfo.dhcp 	= NETINFO_DHCP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001b08:	f102 021e 	add.w	r2, r2, #30
 8001b0c:	7013      	strb	r3, [r2, #0]
 8001b0e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001b12:	f103 030e 	add.w	r3, r3, #14
 8001b16:	681b      	ldr	r3, [r3, #0]
		// TODO rewrite with memcpy function

		memcpy(&EthernetInfo.ip, &NetInfo.ip, sizeof(NetInfo.ip));
 8001b18:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001b1c:	f102 0211 	add.w	r2, r2, #17
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001b26:	f103 0312 	add.w	r3, r3, #18
 8001b2a:	681b      	ldr	r3, [r3, #0]
		memcpy(&EthernetInfo.sn, &NetInfo.sn, sizeof(NetInfo.sn));
 8001b2c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001b30:	f102 0215 	add.w	r2, r2, #21
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001b3a:	f103 0316 	add.w	r3, r3, #22
 8001b3e:	681b      	ldr	r3, [r3, #0]
		memcpy(&EthernetInfo.gw, &NetInfo.gw, sizeof(NetInfo.gw));
 8001b40:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001b44:	f102 0219 	add.w	r2, r2, #25
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001b4e:	f103 031a 	add.w	r3, r3, #26
 8001b52:	681b      	ldr	r3, [r3, #0]
		memcpy(&EthernetInfo.dns, &NetInfo.dns, sizeof(NetInfo.dns));
 8001b54:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001b58:	f102 021d 	add.w	r2, r2, #29
 8001b5c:	6013      	str	r3, [r2, #0]
							EthernetInfo.sn[i] 	= NetInfo.sn[i];
							EthernetInfo.gw[i] 	= NetInfo.gw[i];
							EthernetInfo.dns[i] = NetInfo.dns[i];
						}
*/
	  Reg_eth_spi(hspi3);
 8001b5e:	4cb5      	ldr	r4, [pc, #724]	; (8001e34 <vMaintEthTask+0x3d0>)
 8001b60:	4668      	mov	r0, sp
 8001b62:	f104 0310 	add.w	r3, r4, #16
 8001b66:	2248      	movs	r2, #72	; 0x48
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f01a fba2 	bl	801c2b2 <memcpy>
 8001b6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b72:	f00d fa93 	bl	800f09c <Reg_eth_spi>
	  w5500_reset_cb(Eth_reset_on, Eth_reset_off);
 8001b76:	49b0      	ldr	r1, [pc, #704]	; (8001e38 <vMaintEthTask+0x3d4>)
 8001b78:	48b0      	ldr	r0, [pc, #704]	; (8001e3c <vMaintEthTask+0x3d8>)
 8001b7a:	f00d fa3b 	bl	800eff4 <w5500_reset_cb>
	  w5500_delay_cb(osDelay);
 8001b7e:	48b0      	ldr	r0, [pc, #704]	; (8001e40 <vMaintEthTask+0x3dc>)
 8001b80:	f00d fa20 	bl	800efc4 <w5500_delay_cb>
	  w5500_lib_init(&NetInfo);
 8001b84:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001b88:	f103 0308 	add.w	r3, r3, #8
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f00d f91d 	bl	800edcc <w5500_lib_init>
	  reg_wizchip_spi_cbfunc(Eth_spi_resv_byte, Eth_spi_send_byte);
 8001b92:	49ac      	ldr	r1, [pc, #688]	; (8001e44 <vMaintEthTask+0x3e0>)
 8001b94:	48ac      	ldr	r0, [pc, #688]	; (8001e48 <vMaintEthTask+0x3e4>)
 8001b96:	f007 fa9d 	bl	80090d4 <reg_wizchip_spi_cbfunc>
	  reg_wizchip_cs_cbfunc(Eth_spi_select, Eth_spi_deselect);
 8001b9a:	49ac      	ldr	r1, [pc, #688]	; (8001e4c <vMaintEthTask+0x3e8>)
 8001b9c:	48ac      	ldr	r0, [pc, #688]	; (8001e50 <vMaintEthTask+0x3ec>)
 8001b9e:	f007 fa73 	bl	8009088 <reg_wizchip_cs_cbfunc>
	  reg_wizchip_cris_cbfunc(EthMutexTake, EthMutexRelease);
 8001ba2:	49ac      	ldr	r1, [pc, #688]	; (8001e54 <vMaintEthTask+0x3f0>)
 8001ba4:	48ac      	ldr	r0, [pc, #688]	; (8001e58 <vMaintEthTask+0x3f4>)
 8001ba6:	f007 fa49 	bl	800903c <reg_wizchip_cris_cbfunc>
	  reg_dhcp_cbfunc(Callback_IPAssigned, Callback_IPAssigned, Callback_IPConflict);
 8001baa:	4aac      	ldr	r2, [pc, #688]	; (8001e5c <vMaintEthTask+0x3f8>)
 8001bac:	49ac      	ldr	r1, [pc, #688]	; (8001e60 <vMaintEthTask+0x3fc>)
 8001bae:	48ac      	ldr	r0, [pc, #688]	; (8001e60 <vMaintEthTask+0x3fc>)
 8001bb0:	f007 fff4 	bl	8009b9c <reg_dhcp_cbfunc>
	  dns_service_init(SERVICE_SOCKET, (uint8_t *)DNS_buff, SOCKET_BUFF_SIZE);
 8001bb4:	f107 0320 	add.w	r3, r7, #32
 8001bb8:	3b18      	subs	r3, #24
 8001bba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	2004      	movs	r0, #4
 8001bc2:	f00a f875 	bl	800bcb0 <dns_service_init>
	  dns_service_reg_cb_net_ready(assigned_ip);
 8001bc6:	48a7      	ldr	r0, [pc, #668]	; (8001e64 <vMaintEthTask+0x400>)
 8001bc8:	f00a f860 	bl	800bc8c <dns_service_reg_cb_net_ready>
	  dns_service_reg_cb_mutex(ServiceSockMutexTake, ServiceSockMutexRelease);
 8001bcc:	49a6      	ldr	r1, [pc, #664]	; (8001e68 <vMaintEthTask+0x404>)
 8001bce:	48a7      	ldr	r0, [pc, #668]	; (8001e6c <vMaintEthTask+0x408>)
 8001bd0:	f00a f840 	bl	800bc54 <dns_service_reg_cb_mutex>


  /* Infinite loop */
  for(;;)
  {
		EthernetInfo.dhcp = NetInfo.dhcp;
 8001bd4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001bd8:	f103 031e 	add.w	r3, r3, #30
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001be2:	f102 0201 	add.w	r2, r2, #1
 8001be6:	7013      	strb	r3, [r2, #0]
		EthernetInfo.link = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001bee:	f102 0208 	add.w	r2, r2, #8
 8001bf2:	7013      	strb	r3, [r2, #0]

		if (w5500_init() != 0)continue; //try from begin in fail case
 8001bf4:	f00d f9a8 	bl	800ef48 <w5500_init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f040 81eb 	bne.w	8001fd6 <vMaintEthTask+0x572>
		vTaskDelay(delay0_5s);
 8001c00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c04:	f00f f9a4 	bl	8010f50 <vTaskDelay>
		setSHAR(NetInfo.mac);			//set mac address
 8001c08:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001c0c:	f103 0308 	add.w	r3, r3, #8
 8001c10:	2206      	movs	r2, #6
 8001c12:	4619      	mov	r1, r3
 8001c14:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001c18:	f005 ffcc 	bl	8007bb4 <WIZCHIP_WRITE_BUF>

		if (NetInfo.dhcp == NETINFO_DHCP){
 8001c1c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001c20:	f103 031e 	add.w	r3, r3, #30
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d106      	bne.n	8001c38 <vMaintEthTask+0x1d4>
			DHCP_init(DHCP_SOCKET, DHCP_DATABUF);
 8001c2a:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001c2e:	4619      	mov	r1, r3
 8001c30:	2000      	movs	r0, #0
 8001c32:	f009 fa5b 	bl	800b0ec <DHCP_init>
 8001c36:	e003      	b.n	8001c40 <vMaintEthTask+0x1dc>
			//todo DNS_init();
		}else{
			network_init();
 8001c38:	f00d f8d8 	bl	800edec <network_init>
			set_ip_aasigned();
 8001c3c:	f00d f978 	bl	800ef30 <set_ip_aasigned>
			if (NetInfo.dhcp == NETINFO_DHCP){

			}
//xSemaphoreTake(SocketMutex, portMAX_DELAY);
			//osMutexAcquire(NetworkHandle, osWaitForever);
			SocketMutexTake();
 8001c40:	f7ff fa56 	bl	80010f0 <SocketMutexTake>
			dhcp_rutine();
 8001c44:	f00d f922 	bl	800ee8c <dhcp_rutine>

			if (!link_status()){
 8001c48:	f00d f938 	bl	800eebc <link_status>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f040 80e0 	bne.w	8001e14 <vMaintEthTask+0x3b0>
				NetInfo.ip[0]	= 0, NetInfo.ip[1] 	= 0, NetInfo.ip[2] 	= 0, NetInfo.ip[3] 	= 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001c5a:	f102 020e 	add.w	r2, r2, #14
 8001c5e:	7013      	strb	r3, [r2, #0]
 8001c60:	2300      	movs	r3, #0
 8001c62:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001c66:	f102 020f 	add.w	r2, r2, #15
 8001c6a:	7013      	strb	r3, [r2, #0]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001c72:	f102 0210 	add.w	r2, r2, #16
 8001c76:	7013      	strb	r3, [r2, #0]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001c7e:	f102 0211 	add.w	r2, r2, #17
 8001c82:	7013      	strb	r3, [r2, #0]
				NetInfo.sn[0] 	= 0, NetInfo.sn[1] 	= 0, NetInfo.sn[2] 	= 0, NetInfo.sn[3] 	= 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001c8a:	f102 0212 	add.w	r2, r2, #18
 8001c8e:	7013      	strb	r3, [r2, #0]
 8001c90:	2300      	movs	r3, #0
 8001c92:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001c96:	f102 0213 	add.w	r2, r2, #19
 8001c9a:	7013      	strb	r3, [r2, #0]
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001ca2:	f102 0214 	add.w	r2, r2, #20
 8001ca6:	7013      	strb	r3, [r2, #0]
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001cae:	f102 0215 	add.w	r2, r2, #21
 8001cb2:	7013      	strb	r3, [r2, #0]
				NetInfo.gw[0] 	= 0, NetInfo.gw[1] 	= 0, NetInfo.gw[2] 	= 0, NetInfo.gw[3] 	= 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001cba:	f102 0216 	add.w	r2, r2, #22
 8001cbe:	7013      	strb	r3, [r2, #0]
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001cc6:	f102 0217 	add.w	r2, r2, #23
 8001cca:	7013      	strb	r3, [r2, #0]
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001cd2:	f102 0218 	add.w	r2, r2, #24
 8001cd6:	7013      	strb	r3, [r2, #0]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001cde:	f102 0219 	add.w	r2, r2, #25
 8001ce2:	7013      	strb	r3, [r2, #0]
				NetInfo.dns[0] 	= 0, NetInfo.dns[1] = 0, NetInfo.dns[2] = 0, NetInfo.dns[3] = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001cea:	f102 021a 	add.w	r2, r2, #26
 8001cee:	7013      	strb	r3, [r2, #0]
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001cf6:	f102 021b 	add.w	r2, r2, #27
 8001cfa:	7013      	strb	r3, [r2, #0]
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001d02:	f102 021c 	add.w	r2, r2, #28
 8001d06:	7013      	strb	r3, [r2, #0]
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001d0e:	f102 021d 	add.w	r2, r2, #29
 8001d12:	7013      	strb	r3, [r2, #0]

//xSemaphoreGive(SocketMutex);
				//osMutexRelease(NetworkHandle);
				SocketMutexRelease();
 8001d14:	f7ff f9fa 	bl	800110c <SocketMutexRelease>

				for(i = 0; i < 4; i++){
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001d1e:	f102 021f 	add.w	r2, r2, #31
 8001d22:	7013      	strb	r3, [r2, #0]
 8001d24:	e05a      	b.n	8001ddc <vMaintEthTask+0x378>
					EthernetInfo.ip[i] 	= NetInfo.ip[i];
 8001d26:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001d2a:	f103 031f 	add.w	r3, r3, #31
 8001d2e:	781a      	ldrb	r2, [r3, #0]
 8001d30:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001d34:	f103 031f 	add.w	r3, r3, #31
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8001d3e:	443a      	add	r2, r7
 8001d40:	f812 2c12 	ldrb.w	r2, [r2, #-18]
 8001d44:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001d48:	443b      	add	r3, r7
 8001d4a:	f803 2c2f 	strb.w	r2, [r3, #-47]
					EthernetInfo.sn[i] 	= NetInfo.sn[i];
 8001d4e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001d52:	f103 031f 	add.w	r3, r3, #31
 8001d56:	781a      	ldrb	r2, [r3, #0]
 8001d58:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001d5c:	f103 031f 	add.w	r3, r3, #31
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8001d66:	443a      	add	r2, r7
 8001d68:	f812 2c0e 	ldrb.w	r2, [r2, #-14]
 8001d6c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001d70:	443b      	add	r3, r7
 8001d72:	f803 2c2b 	strb.w	r2, [r3, #-43]
					EthernetInfo.gw[i] 	= NetInfo.gw[i];
 8001d76:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001d7a:	f103 031f 	add.w	r3, r3, #31
 8001d7e:	781a      	ldrb	r2, [r3, #0]
 8001d80:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001d84:	f103 031f 	add.w	r3, r3, #31
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8001d8e:	443a      	add	r2, r7
 8001d90:	f812 2c0a 	ldrb.w	r2, [r2, #-10]
 8001d94:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001d98:	443b      	add	r3, r7
 8001d9a:	f803 2c27 	strb.w	r2, [r3, #-39]
					EthernetInfo.dns[i] = NetInfo.dns[i];
 8001d9e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001da2:	f103 031f 	add.w	r3, r3, #31
 8001da6:	781a      	ldrb	r2, [r3, #0]
 8001da8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001dac:	f103 031f 	add.w	r3, r3, #31
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8001db6:	443a      	add	r2, r7
 8001db8:	f812 2c06 	ldrb.w	r2, [r2, #-6]
 8001dbc:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001dc0:	443b      	add	r3, r7
 8001dc2:	f803 2c23 	strb.w	r2, [r3, #-35]
				for(i = 0; i < 4; i++){
 8001dc6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001dca:	f103 031f 	add.w	r3, r3, #31
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001dd6:	f102 021f 	add.w	r2, r2, #31
 8001dda:	7013      	strb	r3, [r2, #0]
 8001ddc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001de0:	f103 031f 	add.w	r3, r3, #31
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	d99d      	bls.n	8001d26 <vMaintEthTask+0x2c2>
				}
				EthernetInfo.link 	= 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001df0:	f102 0208 	add.w	r2, r2, #8
 8001df4:	7013      	strb	r3, [r2, #0]
				xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 8001df6:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <vMaintEthTask+0x40c>)
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8001dfe:	f101 0108 	add.w	r1, r1, #8
 8001e02:	2302      	movs	r3, #2
 8001e04:	2200      	movs	r2, #0
 8001e06:	f00e f841 	bl	800fe8c <xQueueGenericSend>
				break;
 8001e0a:	bf00      	nop
			// SET DNS SERVER IP
			dns_service_set_dns_ip((uint8_t*)&EthernetInfo.dns);
			xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
			osDelay(delay1s);
		}
    osDelay(1);
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	f00d fae7 	bl	800f3e0 <osDelay>
 8001e12:	e6df      	b.n	8001bd4 <vMaintEthTask+0x170>
			for(i = 0; i < 4; i++){//todo rewrite for get info from dhcp calbac
 8001e14:	2300      	movs	r3, #0
 8001e16:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001e1a:	f102 021f 	add.w	r2, r2, #31
 8001e1e:	7013      	strb	r3, [r2, #0]
 8001e20:	e083      	b.n	8001f2a <vMaintEthTask+0x4c6>
 8001e22:	bf00      	nop
 8001e24:	1fff7a10 	.word	0x1fff7a10
 8001e28:	1fff7a11 	.word	0x1fff7a11
 8001e2c:	1fff7a12 	.word	0x1fff7a12
 8001e30:	1fff7a13 	.word	0x1fff7a13
 8001e34:	20000354 	.word	0x20000354
 8001e38:	0800f055 	.word	0x0800f055
 8001e3c:	0800f03d 	.word	0x0800f03d
 8001e40:	0800f3e1 	.word	0x0800f3e1
 8001e44:	0800f0cd 	.word	0x0800f0cd
 8001e48:	0800f0f1 	.word	0x0800f0f1
 8001e4c:	0800f085 	.word	0x0800f085
 8001e50:	0800f06d 	.word	0x0800f06d
 8001e54:	080010a5 	.word	0x080010a5
 8001e58:	08001089 	.word	0x08001089
 8001e5c:	0800ee21 	.word	0x0800ee21
 8001e60:	0800ee39 	.word	0x0800ee39
 8001e64:	0800ef19 	.word	0x0800ef19
 8001e68:	08001141 	.word	0x08001141
 8001e6c:	08001125 	.word	0x08001125
 8001e70:	20000418 	.word	0x20000418
				EthernetInfo.ip[i] 	= NetInfo.ip[i];
 8001e74:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001e78:	f103 031f 	add.w	r3, r3, #31
 8001e7c:	781a      	ldrb	r2, [r3, #0]
 8001e7e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001e82:	f103 031f 	add.w	r3, r3, #31
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8001e8c:	443a      	add	r2, r7
 8001e8e:	f812 2c12 	ldrb.w	r2, [r2, #-18]
 8001e92:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001e96:	443b      	add	r3, r7
 8001e98:	f803 2c2f 	strb.w	r2, [r3, #-47]
				EthernetInfo.sn[i] 	= NetInfo.sn[i];
 8001e9c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001ea0:	f103 031f 	add.w	r3, r3, #31
 8001ea4:	781a      	ldrb	r2, [r3, #0]
 8001ea6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001eaa:	f103 031f 	add.w	r3, r3, #31
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8001eb4:	443a      	add	r2, r7
 8001eb6:	f812 2c0e 	ldrb.w	r2, [r2, #-14]
 8001eba:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001ebe:	443b      	add	r3, r7
 8001ec0:	f803 2c2b 	strb.w	r2, [r3, #-43]
				EthernetInfo.gw[i] 	= NetInfo.gw[i];
 8001ec4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001ec8:	f103 031f 	add.w	r3, r3, #31
 8001ecc:	781a      	ldrb	r2, [r3, #0]
 8001ece:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001ed2:	f103 031f 	add.w	r3, r3, #31
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8001edc:	443a      	add	r2, r7
 8001ede:	f812 2c0a 	ldrb.w	r2, [r2, #-10]
 8001ee2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001ee6:	443b      	add	r3, r7
 8001ee8:	f803 2c27 	strb.w	r2, [r3, #-39]
				EthernetInfo.dns[i] = NetInfo.dns[i];
 8001eec:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001ef0:	f103 031f 	add.w	r3, r3, #31
 8001ef4:	781a      	ldrb	r2, [r3, #0]
 8001ef6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001efa:	f103 031f 	add.w	r3, r3, #31
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8001f04:	443a      	add	r2, r7
 8001f06:	f812 2c06 	ldrb.w	r2, [r2, #-6]
 8001f0a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8001f0e:	443b      	add	r3, r7
 8001f10:	f803 2c23 	strb.w	r2, [r3, #-35]
			for(i = 0; i < 4; i++){//todo rewrite for get info from dhcp calbac
 8001f14:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001f18:	f103 031f 	add.w	r3, r3, #31
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001f24:	f102 021f 	add.w	r2, r2, #31
 8001f28:	7013      	strb	r3, [r2, #0]
 8001f2a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001f2e:	f103 031f 	add.w	r3, r3, #31
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d99d      	bls.n	8001e74 <vMaintEthTask+0x410>
			EthernetInfo.link 		= 1;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001f3e:	f102 0208 	add.w	r2, r2, #8
 8001f42:	7013      	strb	r3, [r2, #0]
			EthernetInfo.speed 		= link_speed();
 8001f44:	f00c ffdc 	bl	800ef00 <link_speed>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001f50:	f102 020a 	add.w	r2, r2, #10
 8001f54:	7013      	strb	r3, [r2, #0]
			EthernetInfo.duplex 	= link_duplex();
 8001f56:	f00c ffc7 	bl	800eee8 <link_duplex>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001f62:	f102 0209 	add.w	r2, r2, #9
 8001f66:	7013      	strb	r3, [r2, #0]
			EthernetInfo.lease_s	= getDHCPLeasetime();
 8001f68:	f009 f9f8 	bl	800b35c <getDHCPLeasetime>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001f72:	f102 0204 	add.w	r2, r2, #4
 8001f76:	6013      	str	r3, [r2, #0]
			SocketMutexRelease();
 8001f78:	f7ff f8c8 	bl	800110c <SocketMutexRelease>
			if (NetInfo.ip[0]== 0){
 8001f7c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001f80:	f103 030e 	add.w	r3, r3, #14
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10e      	bne.n	8001fa8 <vMaintEthTask+0x544>
				xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <vMaintEthTask+0x578>)
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8001f92:	f101 0108 	add.w	r1, r1, #8
 8001f96:	2302      	movs	r3, #2
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f00d ff77 	bl	800fe8c <xQueueGenericSend>
				osDelay(delay1s);
 8001f9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fa2:	f00d fa1d 	bl	800f3e0 <osDelay>
				continue;
 8001fa6:	e015      	b.n	8001fd4 <vMaintEthTask+0x570>
			dns_service_set_dns_ip((uint8_t*)&EthernetInfo.dns);
 8001fa8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001fac:	f103 0308 	add.w	r3, r3, #8
 8001fb0:	3315      	adds	r3, #21
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f009 fe96 	bl	800bce4 <dns_service_set_dns_ip>
			xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <vMaintEthTask+0x578>)
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8001fc0:	f101 0108 	add.w	r1, r1, #8
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f00d ff60 	bl	800fe8c <xQueueGenericSend>
			osDelay(delay1s);
 8001fcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fd0:	f00d fa06 	bl	800f3e0 <osDelay>
			if (NetInfo.dhcp == NETINFO_DHCP){
 8001fd4:	e634      	b.n	8001c40 <vMaintEthTask+0x1dc>
		if (w5500_init() != 0)continue; //try from begin in fail case
 8001fd6:	bf00      	nop
		EthernetInfo.dhcp = NetInfo.dhcp;
 8001fd8:	e5fc      	b.n	8001bd4 <vMaintEthTask+0x170>
 8001fda:	bf00      	nop
 8001fdc:	20000418 	.word	0x20000418

08001fe0 <vDebugMemUsage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vDebugMemUsage */
void vDebugMemUsage(void *argument)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vDebugMemUsage */
	uint32_t	mem;
  /* Infinite loop */
  for(;;)
  {
	  mem = osThreadGetStackSpace(defaultTaskHandle);
 8001fe8:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <vDebugMemUsage+0x80>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f00d f9b9 	bl	800f364 <osThreadGetStackSpace>
 8001ff2:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(SensorsTaskHandle);
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <vDebugMemUsage+0x84>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f00d f9b3 	bl	800f364 <osThreadGetStackSpace>
 8001ffe:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(RW_Settings_TasHandle);
 8002000:	4b19      	ldr	r3, [pc, #100]	; (8002068 <vDebugMemUsage+0x88>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f00d f9ad 	bl	800f364 <osThreadGetStackSpace>
 800200a:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(oneSecondTickTaHandle);
 800200c:	4b17      	ldr	r3, [pc, #92]	; (800206c <vDebugMemUsage+0x8c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f00d f9a7 	bl	800f364 <osThreadGetStackSpace>
 8002016:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(maintEthTaskHandle);
 8002018:	4b15      	ldr	r3, [pc, #84]	; (8002070 <vDebugMemUsage+0x90>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f00d f9a1 	bl	800f364 <osThreadGetStackSpace>
 8002022:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(DebugMemUsageTHandle);
 8002024:	4b13      	ldr	r3, [pc, #76]	; (8002074 <vDebugMemUsage+0x94>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f00d f99b 	bl	800f364 <osThreadGetStackSpace>
 800202e:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(httpServTaskHandle);
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <vDebugMemUsage+0x98>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f00d f995 	bl	800f364 <osThreadGetStackSpace>
 800203a:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(NULL);
 800203c:	2000      	movs	r0, #0
 800203e:	f00d f991 	bl	800f364 <osThreadGetStackSpace>
 8002042:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(NULL);
 8002044:	2000      	movs	r0, #0
 8002046:	f00d f98d 	bl	800f364 <osThreadGetStackSpace>
 800204a:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(NULL);
 800204c:	2000      	movs	r0, #0
 800204e:	f00d f989 	bl	800f364 <osThreadGetStackSpace>
 8002052:	60f8      	str	r0, [r7, #12]
	  osDelay(delay1s);
 8002054:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002058:	f00d f9c2 	bl	800f3e0 <osDelay>
	  mem = osThreadGetStackSpace(defaultTaskHandle);
 800205c:	e7c4      	b.n	8001fe8 <vDebugMemUsage+0x8>
 800205e:	bf00      	nop
 8002060:	200003f4 	.word	0x200003f4
 8002064:	200003f8 	.word	0x200003f8
 8002068:	200003fc 	.word	0x200003fc
 800206c:	20000400 	.word	0x20000400
 8002070:	20000404 	.word	0x20000404
 8002074:	20000408 	.word	0x20000408
 8002078:	2000040c 	.word	0x2000040c

0800207c <httpServ>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_httpServ */
void httpServ(void *argument)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800208a:	f843 0c2c 	str.w	r0, [r3, #-44]
  /* USER CODE BEGIN httpServ */
	Ethernet_info_struct	EthernetInfo;
	uint8_t 				socknumlist[] = {HTTP_SERVER_SOCKET, HTTP_SERVER_SOCKET1, HTTP_SERVER_SOCKET2};
 800208e:	4a4a      	ldr	r2, [pc, #296]	; (80021b8 <httpServ+0x13c>)
 8002090:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002094:	f103 0308 	add.w	r3, r3, #8
 8002098:	6812      	ldr	r2, [r2, #0]
 800209a:	4611      	mov	r1, r2
 800209c:	8019      	strh	r1, [r3, #0]
 800209e:	3302      	adds	r3, #2
 80020a0:	0c12      	lsrs	r2, r2, #16
 80020a2:	701a      	strb	r2, [r3, #0]
	uint8_t 				http_buffer_rx[2048];
	uint8_t 				http_buffer_tx[2048];
	uint8_t 				http_nsockets = sizeof(socknumlist) / sizeof(socknumlist[0]);
 80020a4:	2303      	movs	r3, #3
 80020a6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80020aa:	f102 020e 	add.w	r2, r2, #14
 80020ae:	7013      	strb	r3, [r2, #0]
	uint8_t					i;

	httpServer_init(http_buffer_tx, http_buffer_rx, http_nsockets, socknumlist);		// Tx/Rx buffers (2 kB) / The number of W5500 chip H/W sockets in use
 80020b0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80020b4:	f103 0308 	add.w	r3, r3, #8
 80020b8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80020bc:	f102 020e 	add.w	r2, r2, #14
 80020c0:	7812      	ldrb	r2, [r2, #0]
 80020c2:	f607 0108 	addw	r1, r7, #2056	; 0x808
 80020c6:	f107 0010 	add.w	r0, r7, #16
 80020ca:	3808      	subs	r0, #8
 80020cc:	f00b febc 	bl	800de48 <httpServer_init>
	reg_external_post_cgi_processor(http_post_cgi_processor);
 80020d0:	483a      	ldr	r0, [pc, #232]	; (80021bc <httpServ+0x140>)
 80020d2:	f00c fe2b 	bl	800ed2c <reg_external_post_cgi_processor>
	reg_external_get_cgi_processor(http_get_cgi_processor);
 80020d6:	483a      	ldr	r0, [pc, #232]	; (80021c0 <httpServ+0x144>)
 80020d8:	f00c fe40 	bl	800ed5c <reg_external_get_cgi_processor>

	http_parse_params_init(PowerDataQHandle,			PowrData);
 80020dc:	4b39      	ldr	r3, [pc, #228]	; (80021c4 <httpServ+0x148>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2103      	movs	r1, #3
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 fbf8 	bl	80028d8 <http_parse_params_init>
	http_parse_params_init(Curr_sensor_settingsHandle,	PowrSensSett);
 80020e8:	4b37      	ldr	r3, [pc, #220]	; (80021c8 <httpServ+0x14c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2104      	movs	r1, #4
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 fbf2 	bl	80028d8 <http_parse_params_init>
	http_parse_params_init(mqttQHandle,					MQTT);
 80020f4:	4b35      	ldr	r3, [pc, #212]	; (80021cc <httpServ+0x150>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2100      	movs	r1, #0
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 fbec 	bl	80028d8 <http_parse_params_init>
	http_parse_params_init(mb_tcp_settingsQHandle,		ModBusTCP);
 8002100:	4b33      	ldr	r3, [pc, #204]	; (80021d0 <httpServ+0x154>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2102      	movs	r1, #2
 8002106:	4618      	mov	r0, r3
 8002108:	f000 fbe6 	bl	80028d8 <http_parse_params_init>

	reg_httpServer_webContent((uint8_t *)"index.html",			(uint8_t *)index_page);
 800210c:	4931      	ldr	r1, [pc, #196]	; (80021d4 <httpServ+0x158>)
 800210e:	4832      	ldr	r0, [pc, #200]	; (80021d8 <httpServ+0x15c>)
 8002110:	f00c fc8e 	bl	800ea30 <reg_httpServer_webContent>
	reg_httpServer_webContent((uint8_t *)"power_settings.html",	(uint8_t *)setting_power_sens_page);
 8002114:	4931      	ldr	r1, [pc, #196]	; (80021dc <httpServ+0x160>)
 8002116:	4832      	ldr	r0, [pc, #200]	; (80021e0 <httpServ+0x164>)
 8002118:	f00c fc8a 	bl	800ea30 <reg_httpServer_webContent>
	reg_httpServer_webContent((uint8_t *)"mqtt.html",			(uint8_t *)conf_page_mqtt);
 800211c:	4931      	ldr	r1, [pc, #196]	; (80021e4 <httpServ+0x168>)
 800211e:	4832      	ldr	r0, [pc, #200]	; (80021e8 <httpServ+0x16c>)
 8002120:	f00c fc86 	bl	800ea30 <reg_httpServer_webContent>


  /* Infinite loop */
  for(;;)
  {
	  xQueuePeek(EthernetInfoQHandle, &EthernetInfo, 0);
 8002124:	4b31      	ldr	r3, [pc, #196]	; (80021ec <httpServ+0x170>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800212c:	f101 010c 	add.w	r1, r1, #12
 8002130:	2200      	movs	r2, #0
 8002132:	4618      	mov	r0, r3
 8002134:	f00e fa30 	bl	8010598 <xQueuePeek>
	  if ((EthernetInfo.link == ETH_LINK_UP) && (assigned_ip() == true)){
 8002138:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800213c:	f103 030c 	add.w	r3, r3, #12
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d031      	beq.n	80021aa <httpServ+0x12e>
 8002146:	f00c fee7 	bl	800ef18 <assigned_ip>
 800214a:	4603      	mov	r3, r0
 800214c:	2b01      	cmp	r3, #1
 800214e:	d12c      	bne.n	80021aa <httpServ+0x12e>
		  for(i = 0 ; i < http_nsockets; i++){
 8002150:	2300      	movs	r3, #0
 8002152:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002156:	f102 020f 	add.w	r2, r2, #15
 800215a:	7013      	strb	r3, [r2, #0]
 800215c:	e018      	b.n	8002190 <httpServ+0x114>
			  SocketMutexTake();
 800215e:	f7fe ffc7 	bl	80010f0 <SocketMutexTake>
			  httpServer_run(i); // HTTP Server handler
 8002162:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002166:	f103 030f 	add.w	r3, r3, #15
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f00b fe87 	bl	800de80 <httpServer_run>
			  SocketMutexRelease();
 8002172:	f7fe ffcb 	bl	800110c <SocketMutexRelease>
			  osThreadYield();
 8002176:	f00d f913 	bl	800f3a0 <osThreadYield>
		  for(i = 0 ; i < http_nsockets; i++){
 800217a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800217e:	f103 030f 	add.w	r3, r3, #15
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	3301      	adds	r3, #1
 8002186:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800218a:	f102 020f 	add.w	r2, r2, #15
 800218e:	7013      	strb	r3, [r2, #0]
 8002190:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002194:	f103 030f 	add.w	r3, r3, #15
 8002198:	781a      	ldrb	r2, [r3, #0]
 800219a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800219e:	f103 030e 	add.w	r3, r3, #14
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d3da      	bcc.n	800215e <httpServ+0xe2>
	  if ((EthernetInfo.link == ETH_LINK_UP) && (assigned_ip() == true)){
 80021a8:	e003      	b.n	80021b2 <httpServ+0x136>
		  }
	  }else{
		  osDelay(delay1s);
 80021aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021ae:	f00d f917 	bl	800f3e0 <osDelay>
	  }
	  osThreadYield();
 80021b2:	f00d f8f5 	bl	800f3a0 <osThreadYield>
	  xQueuePeek(EthernetInfoQHandle, &EthernetInfo, 0);
 80021b6:	e7b5      	b.n	8002124 <httpServ+0xa8>
 80021b8:	08020cbc 	.word	0x08020cbc
 80021bc:	08003319 	.word	0x08003319
 80021c0:	080033c1 	.word	0x080033c1
 80021c4:	2000041c 	.word	0x2000041c
 80021c8:	20000420 	.word	0x20000420
 80021cc:	20000424 	.word	0x20000424
 80021d0:	20000428 	.word	0x20000428
 80021d4:	08020004 	.word	0x08020004
 80021d8:	08020320 	.word	0x08020320
 80021dc:	0802032c 	.word	0x0802032c
 80021e0:	080206d8 	.word	0x080206d8
 80021e4:	080206ec 	.word	0x080206ec
 80021e8:	08020cb0 	.word	0x08020cb0
 80021ec:	20000418 	.word	0x20000418

080021f0 <vMQTT_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vMQTT_Task */
void vMQTT_Task(void *argument)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	f6ad 0df8 	subw	sp, sp, #2296	; 0x8f8
 80021f6:	af02      	add	r7, sp, #8
 80021f8:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 80021fc:	f6a3 03ec 	subw	r3, r3, #2284	; 0x8ec
 8002200:	6018      	str	r0, [r3, #0]
	Ethernet_info_struct	EthernetInfo;
	MQTT_cred_struct		MQTT_cred;
	char 					MQTT_SEND_BUF[MQTT_BUF_LEN];
	char 					MQTT_READ_BUF[MQTT_BUF_LEN];

	init_mqtt_call_mutex(SocketMutexTake, SocketMutexRelease);
 8002202:	4935      	ldr	r1, [pc, #212]	; (80022d8 <vMQTT_Task+0xe8>)
 8002204:	4835      	ldr	r0, [pc, #212]	; (80022dc <vMQTT_Task+0xec>)
 8002206:	f001 f949 	bl	800349c <init_mqtt_call_mutex>
  /* Infinite loop */
	for(;;)
	{
		osDelay(delay1s);
 800220a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800220e:	f00d f8e7 	bl	800f3e0 <osDelay>
		xQueuePeek(EthernetInfoQHandle,  &EthernetInfo, 0);
 8002212:	4b33      	ldr	r3, [pc, #204]	; (80022e0 <vMQTT_Task+0xf0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f507 610d 	add.w	r1, r7, #2256	; 0x8d0
 800221a:	2200      	movs	r2, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f00e f9bb 	bl	8010598 <xQueuePeek>
		if ((EthernetInfo.link != ETH_LINK_UP) || (assigned_ip() != true)){
 8002222:	f897 38d0 	ldrb.w	r3, [r7, #2256]	; 0x8d0
 8002226:	f083 0301 	eor.w	r3, r3, #1
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d149      	bne.n	80022c4 <vMQTT_Task+0xd4>
 8002230:	f00c fe72 	bl	800ef18 <assigned_ip>
 8002234:	4603      	mov	r3, r0
 8002236:	2b01      	cmp	r3, #1
 8002238:	d144      	bne.n	80022c4 <vMQTT_Task+0xd4>
			continue;
		}
		xQueuePeek(mqttQHandle, &MQTT_cred, 0);
 800223a:	4b2a      	ldr	r3, [pc, #168]	; (80022e4 <vMQTT_Task+0xf4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f607 0108 	addw	r1, r7, #2056	; 0x808
 8002242:	2200      	movs	r2, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f00e f9a7 	bl	8010598 <xQueuePeek>
		while (MQTT_cred.enable == 0){
 800224a:	e00b      	b.n	8002264 <vMQTT_Task+0x74>
			osDelay(delay1s);
 800224c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002250:	f00d f8c6 	bl	800f3e0 <osDelay>
			xQueuePeek(mqttQHandle, &MQTT_cred, 0);
 8002254:	4b23      	ldr	r3, [pc, #140]	; (80022e4 <vMQTT_Task+0xf4>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f607 0108 	addw	r1, r7, #2056	; 0x808
 800225c:	2200      	movs	r2, #0
 800225e:	4618      	mov	r0, r3
 8002260:	f00e f99a 	bl	8010598 <xQueuePeek>
		while (MQTT_cred.enable == 0){
 8002264:	f897 3809 	ldrb.w	r3, [r7, #2057]	; 0x809
 8002268:	f083 0301 	eor.w	r3, r3, #1
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1ec      	bne.n	800224c <vMQTT_Task+0x5c>
		}
		if (!MQTT_cred.enable) continue; //TODO mybe remove;
 8002272:	f897 3809 	ldrb.w	r3, [r7, #2057]	; 0x809
 8002276:	f083 0301 	eor.w	r3, r3, #1
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d123      	bne.n	80022c8 <vMQTT_Task+0xd8>
		if (mqtt_client_init(&EthernetInfo, &MQTT_cred, MQTT_SEND_BUF, MQTT_BUF_LEN, MQTT_READ_BUF, MQTT_BUF_LEN) != 0 ) {
 8002280:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8002284:	f607 0108 	addw	r1, r7, #2056	; 0x808
 8002288:	f507 600d 	add.w	r0, r7, #2256	; 0x8d0
 800228c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002290:	9301      	str	r3, [sp, #4]
 8002292:	f107 0308 	add.w	r3, r7, #8
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800229c:	f001 f91a 	bl	80034d4 <mqtt_client_init>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d112      	bne.n	80022cc <vMQTT_Task+0xdc>
			//TODO add message to log
			continue;
		}
		if (mqtt_client_connect() < 0) continue;
 80022a6:	f001 fa01 	bl	80036ac <mqtt_client_connect>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	db0f      	blt.n	80022d0 <vMQTT_Task+0xe0>
		if (mqtt_client_reg_dev_on_home_assist() != 0) continue;
 80022b0:	f001 fa4c 	bl	800374c <mqtt_client_reg_dev_on_home_assist>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10c      	bne.n	80022d4 <vMQTT_Task+0xe4>

		while (1){
			osDelay(1000);
 80022ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022be:	f00d f88f 	bl	800f3e0 <osDelay>
 80022c2:	e7fa      	b.n	80022ba <vMQTT_Task+0xca>
			continue;
 80022c4:	bf00      	nop
 80022c6:	e7a0      	b.n	800220a <vMQTT_Task+0x1a>
		if (!MQTT_cred.enable) continue; //TODO mybe remove;
 80022c8:	bf00      	nop
 80022ca:	e79e      	b.n	800220a <vMQTT_Task+0x1a>
			continue;
 80022cc:	bf00      	nop
 80022ce:	e79c      	b.n	800220a <vMQTT_Task+0x1a>
		if (mqtt_client_connect() < 0) continue;
 80022d0:	bf00      	nop
 80022d2:	e79a      	b.n	800220a <vMQTT_Task+0x1a>
		if (mqtt_client_reg_dev_on_home_assist() != 0) continue;
 80022d4:	bf00      	nop
		osDelay(delay1s);
 80022d6:	e798      	b.n	800220a <vMQTT_Task+0x1a>
 80022d8:	0800110d 	.word	0x0800110d
 80022dc:	080010f1 	.word	0x080010f1
 80022e0:	20000418 	.word	0x20000418
 80022e4:	20000424 	.word	0x20000424

080022e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a04      	ldr	r2, [pc, #16]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d101      	bne.n	80022fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022fa:	f002 fb55 	bl	80049a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40010000 	.word	0x40010000

0800230c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002310:	b672      	cpsid	i
}
 8002312:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002314:	e7fe      	b.n	8002314 <Error_Handler+0x8>
	...

08002318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	4b12      	ldr	r3, [pc, #72]	; (800236c <HAL_MspInit+0x54>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	4a11      	ldr	r2, [pc, #68]	; (800236c <HAL_MspInit+0x54>)
 8002328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800232c:	6453      	str	r3, [r2, #68]	; 0x44
 800232e:	4b0f      	ldr	r3, [pc, #60]	; (800236c <HAL_MspInit+0x54>)
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002336:	607b      	str	r3, [r7, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	603b      	str	r3, [r7, #0]
 800233e:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_MspInit+0x54>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	4a0a      	ldr	r2, [pc, #40]	; (800236c <HAL_MspInit+0x54>)
 8002344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002348:	6413      	str	r3, [r2, #64]	; 0x40
 800234a:	4b08      	ldr	r3, [pc, #32]	; (800236c <HAL_MspInit+0x54>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002356:	2200      	movs	r2, #0
 8002358:	210f      	movs	r1, #15
 800235a:	f06f 0001 	mvn.w	r0, #1
 800235e:	f002 fbfb 	bl	8004b58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800

08002370 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a0b      	ldr	r2, [pc, #44]	; (80023ac <HAL_CRC_MspInit+0x3c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d10d      	bne.n	800239e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <HAL_CRC_MspInit+0x40>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	4a09      	ldr	r2, [pc, #36]	; (80023b0 <HAL_CRC_MspInit+0x40>)
 800238c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002390:	6313      	str	r3, [r2, #48]	; 0x30
 8002392:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <HAL_CRC_MspInit+0x40>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800239e:	bf00      	nop
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40023000 	.word	0x40023000
 80023b0:	40023800 	.word	0x40023800

080023b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08c      	sub	sp, #48	; 0x30
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023bc:	f107 031c 	add.w	r3, r7, #28
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	609a      	str	r2, [r3, #8]
 80023c8:	60da      	str	r2, [r3, #12]
 80023ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a32      	ldr	r2, [pc, #200]	; (800249c <HAL_SPI_MspInit+0xe8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d12c      	bne.n	8002430 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	4b31      	ldr	r3, [pc, #196]	; (80024a0 <HAL_SPI_MspInit+0xec>)
 80023dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023de:	4a30      	ldr	r2, [pc, #192]	; (80024a0 <HAL_SPI_MspInit+0xec>)
 80023e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023e4:	6453      	str	r3, [r2, #68]	; 0x44
 80023e6:	4b2e      	ldr	r3, [pc, #184]	; (80024a0 <HAL_SPI_MspInit+0xec>)
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023ee:	61bb      	str	r3, [r7, #24]
 80023f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	4b2a      	ldr	r3, [pc, #168]	; (80024a0 <HAL_SPI_MspInit+0xec>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	4a29      	ldr	r2, [pc, #164]	; (80024a0 <HAL_SPI_MspInit+0xec>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6313      	str	r3, [r2, #48]	; 0x30
 8002402:	4b27      	ldr	r3, [pc, #156]	; (80024a0 <HAL_SPI_MspInit+0xec>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800240e:	23e0      	movs	r3, #224	; 0xe0
 8002410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002412:	2302      	movs	r3, #2
 8002414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241a:	2303      	movs	r3, #3
 800241c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800241e:	2305      	movs	r3, #5
 8002420:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002422:	f107 031c 	add.w	r3, r7, #28
 8002426:	4619      	mov	r1, r3
 8002428:	481e      	ldr	r0, [pc, #120]	; (80024a4 <HAL_SPI_MspInit+0xf0>)
 800242a:	f002 fc6d 	bl	8004d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800242e:	e030      	b.n	8002492 <HAL_SPI_MspInit+0xde>
  else if(hspi->Instance==SPI3)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a1c      	ldr	r2, [pc, #112]	; (80024a8 <HAL_SPI_MspInit+0xf4>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d12b      	bne.n	8002492 <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <HAL_SPI_MspInit+0xec>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	4a17      	ldr	r2, [pc, #92]	; (80024a0 <HAL_SPI_MspInit+0xec>)
 8002444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002448:	6413      	str	r3, [r2, #64]	; 0x40
 800244a:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <HAL_SPI_MspInit+0xec>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <HAL_SPI_MspInit+0xec>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	4a10      	ldr	r2, [pc, #64]	; (80024a0 <HAL_SPI_MspInit+0xec>)
 8002460:	f043 0302 	orr.w	r3, r3, #2
 8002464:	6313      	str	r3, [r2, #48]	; 0x30
 8002466:	4b0e      	ldr	r3, [pc, #56]	; (80024a0 <HAL_SPI_MspInit+0xec>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002472:	2338      	movs	r3, #56	; 0x38
 8002474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002476:	2302      	movs	r3, #2
 8002478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247e:	2303      	movs	r3, #3
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002482:	2306      	movs	r3, #6
 8002484:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002486:	f107 031c 	add.w	r3, r7, #28
 800248a:	4619      	mov	r1, r3
 800248c:	4807      	ldr	r0, [pc, #28]	; (80024ac <HAL_SPI_MspInit+0xf8>)
 800248e:	f002 fc3b 	bl	8004d08 <HAL_GPIO_Init>
}
 8002492:	bf00      	nop
 8002494:	3730      	adds	r7, #48	; 0x30
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40013000 	.word	0x40013000
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40020000 	.word	0x40020000
 80024a8:	40003c00 	.word	0x40003c00
 80024ac:	40020400 	.word	0x40020400

080024b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08a      	sub	sp, #40	; 0x28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a1d      	ldr	r2, [pc, #116]	; (8002544 <HAL_UART_MspInit+0x94>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d133      	bne.n	800253a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <HAL_UART_MspInit+0x98>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	4a1b      	ldr	r2, [pc, #108]	; (8002548 <HAL_UART_MspInit+0x98>)
 80024dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e0:	6413      	str	r3, [r2, #64]	; 0x40
 80024e2:	4b19      	ldr	r3, [pc, #100]	; (8002548 <HAL_UART_MspInit+0x98>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <HAL_UART_MspInit+0x98>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	4a14      	ldr	r2, [pc, #80]	; (8002548 <HAL_UART_MspInit+0x98>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6313      	str	r3, [r2, #48]	; 0x30
 80024fe:	4b12      	ldr	r3, [pc, #72]	; (8002548 <HAL_UART_MspInit+0x98>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800250a:	230c      	movs	r3, #12
 800250c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250e:	2302      	movs	r3, #2
 8002510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002516:	2303      	movs	r3, #3
 8002518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800251a:	2307      	movs	r3, #7
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251e:	f107 0314 	add.w	r3, r7, #20
 8002522:	4619      	mov	r1, r3
 8002524:	4809      	ldr	r0, [pc, #36]	; (800254c <HAL_UART_MspInit+0x9c>)
 8002526:	f002 fbef 	bl	8004d08 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800252a:	2200      	movs	r2, #0
 800252c:	2105      	movs	r1, #5
 800252e:	2026      	movs	r0, #38	; 0x26
 8002530:	f002 fb12 	bl	8004b58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002534:	2026      	movs	r0, #38	; 0x26
 8002536:	f002 fb2b 	bl	8004b90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800253a:	bf00      	nop
 800253c:	3728      	adds	r7, #40	; 0x28
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40004400 	.word	0x40004400
 8002548:	40023800 	.word	0x40023800
 800254c:	40020000 	.word	0x40020000

08002550 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08c      	sub	sp, #48	; 0x30
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800255c:	2300      	movs	r3, #0
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002560:	2300      	movs	r3, #0
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	4b2e      	ldr	r3, [pc, #184]	; (8002620 <HAL_InitTick+0xd0>)
 8002566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002568:	4a2d      	ldr	r2, [pc, #180]	; (8002620 <HAL_InitTick+0xd0>)
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	6453      	str	r3, [r2, #68]	; 0x44
 8002570:	4b2b      	ldr	r3, [pc, #172]	; (8002620 <HAL_InitTick+0xd0>)
 8002572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800257c:	f107 020c 	add.w	r2, r7, #12
 8002580:	f107 0310 	add.w	r3, r7, #16
 8002584:	4611      	mov	r1, r2
 8002586:	4618      	mov	r0, r3
 8002588:	f003 f9f4 	bl	8005974 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800258c:	f003 f9de 	bl	800594c <HAL_RCC_GetPCLK2Freq>
 8002590:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002594:	4a23      	ldr	r2, [pc, #140]	; (8002624 <HAL_InitTick+0xd4>)
 8002596:	fba2 2303 	umull	r2, r3, r2, r3
 800259a:	0c9b      	lsrs	r3, r3, #18
 800259c:	3b01      	subs	r3, #1
 800259e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80025a0:	4b21      	ldr	r3, [pc, #132]	; (8002628 <HAL_InitTick+0xd8>)
 80025a2:	4a22      	ldr	r2, [pc, #136]	; (800262c <HAL_InitTick+0xdc>)
 80025a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80025a6:	4b20      	ldr	r3, [pc, #128]	; (8002628 <HAL_InitTick+0xd8>)
 80025a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025ac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80025ae:	4a1e      	ldr	r2, [pc, #120]	; (8002628 <HAL_InitTick+0xd8>)
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80025b4:	4b1c      	ldr	r3, [pc, #112]	; (8002628 <HAL_InitTick+0xd8>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ba:	4b1b      	ldr	r3, [pc, #108]	; (8002628 <HAL_InitTick+0xd8>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_InitTick+0xd8>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80025c6:	4818      	ldr	r0, [pc, #96]	; (8002628 <HAL_InitTick+0xd8>)
 80025c8:	f003 ffdc 	bl	8006584 <HAL_TIM_Base_Init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80025d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d11b      	bne.n	8002612 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80025da:	4813      	ldr	r0, [pc, #76]	; (8002628 <HAL_InitTick+0xd8>)
 80025dc:	f004 f82c 	bl	8006638 <HAL_TIM_Base_Start_IT>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80025e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d111      	bne.n	8002612 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80025ee:	2019      	movs	r0, #25
 80025f0:	f002 face 	bl	8004b90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b0f      	cmp	r3, #15
 80025f8:	d808      	bhi.n	800260c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80025fa:	2200      	movs	r2, #0
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	2019      	movs	r0, #25
 8002600:	f002 faaa 	bl	8004b58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002604:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <HAL_InitTick+0xe0>)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	e002      	b.n	8002612 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002612:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002616:	4618      	mov	r0, r3
 8002618:	3730      	adds	r7, #48	; 0x30
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800
 8002624:	431bde83 	.word	0x431bde83
 8002628:	2000045c 	.word	0x2000045c
 800262c:	40010000 	.word	0x40010000
 8002630:	2000009c 	.word	0x2000009c

08002634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002638:	e7fe      	b.n	8002638 <NMI_Handler+0x4>

0800263a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800263a:	b480      	push	{r7}
 800263c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800263e:	e7fe      	b.n	800263e <HardFault_Handler+0x4>

08002640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002644:	e7fe      	b.n	8002644 <MemManage_Handler+0x4>

08002646 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800264a:	e7fe      	b.n	800264a <BusFault_Handler+0x4>

0800264c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002650:	e7fe      	b.n	8002650 <UsageFault_Handler+0x4>

08002652 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002666:	f004 f849 	bl	80066fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	2000045c 	.word	0x2000045c

08002674 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002678:	4802      	ldr	r0, [pc, #8]	; (8002684 <USART2_IRQHandler+0x10>)
 800267a:	f004 faa5 	bl	8006bc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200003ac 	.word	0x200003ac

08002688 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return 1;
 800268c:	2301      	movs	r3, #1
}
 800268e:	4618      	mov	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <_kill>:

int _kill(int pid, int sig)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026a2:	f019 fdd1 	bl	801c248 <__errno>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2216      	movs	r2, #22
 80026aa:	601a      	str	r2, [r3, #0]
  return -1;
 80026ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <_exit>:

void _exit (int status)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026c0:	f04f 31ff 	mov.w	r1, #4294967295
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7ff ffe7 	bl	8002698 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026ca:	e7fe      	b.n	80026ca <_exit+0x12>

080026cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	e00a      	b.n	80026f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026de:	f3af 8000 	nop.w
 80026e2:	4601      	mov	r1, r0
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	60ba      	str	r2, [r7, #8]
 80026ea:	b2ca      	uxtb	r2, r1
 80026ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	3301      	adds	r3, #1
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	dbf0      	blt.n	80026de <_read+0x12>
  }

  return len;
 80026fc:	687b      	ldr	r3, [r7, #4]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b086      	sub	sp, #24
 800270a:	af00      	add	r7, sp, #0
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	e009      	b.n	800272c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	60ba      	str	r2, [r7, #8]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	3301      	adds	r3, #1
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	429a      	cmp	r2, r3
 8002732:	dbf1      	blt.n	8002718 <_write+0x12>
  }
  return len;
 8002734:	687b      	ldr	r3, [r7, #4]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <_close>:

int _close(int file)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002746:	f04f 33ff 	mov.w	r3, #4294967295
}
 800274a:	4618      	mov	r0, r3
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002766:	605a      	str	r2, [r3, #4]
  return 0;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <_isatty>:

int _isatty(int file)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800277e:	2301      	movs	r3, #1
}
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
	...

080027a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027b0:	4a14      	ldr	r2, [pc, #80]	; (8002804 <_sbrk+0x5c>)
 80027b2:	4b15      	ldr	r3, [pc, #84]	; (8002808 <_sbrk+0x60>)
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027bc:	4b13      	ldr	r3, [pc, #76]	; (800280c <_sbrk+0x64>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d102      	bne.n	80027ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027c4:	4b11      	ldr	r3, [pc, #68]	; (800280c <_sbrk+0x64>)
 80027c6:	4a12      	ldr	r2, [pc, #72]	; (8002810 <_sbrk+0x68>)
 80027c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ca:	4b10      	ldr	r3, [pc, #64]	; (800280c <_sbrk+0x64>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4413      	add	r3, r2
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d207      	bcs.n	80027e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027d8:	f019 fd36 	bl	801c248 <__errno>
 80027dc:	4603      	mov	r3, r0
 80027de:	220c      	movs	r2, #12
 80027e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027e2:	f04f 33ff 	mov.w	r3, #4294967295
 80027e6:	e009      	b.n	80027fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027e8:	4b08      	ldr	r3, [pc, #32]	; (800280c <_sbrk+0x64>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ee:	4b07      	ldr	r3, [pc, #28]	; (800280c <_sbrk+0x64>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4413      	add	r3, r2
 80027f6:	4a05      	ldr	r2, [pc, #20]	; (800280c <_sbrk+0x64>)
 80027f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027fa:	68fb      	ldr	r3, [r7, #12]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20010000 	.word	0x20010000
 8002808:	00000400 	.word	0x00000400
 800280c:	200004a4 	.word	0x200004a4
 8002810:	2000da70 	.word	0x2000da70

08002814 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002818:	4b06      	ldr	r3, [pc, #24]	; (8002834 <SystemInit+0x20>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281e:	4a05      	ldr	r2, [pc, #20]	; (8002834 <SystemInit+0x20>)
 8002820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002838:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002870 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800283c:	f7ff ffea 	bl	8002814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002840:	480c      	ldr	r0, [pc, #48]	; (8002874 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002842:	490d      	ldr	r1, [pc, #52]	; (8002878 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002844:	4a0d      	ldr	r2, [pc, #52]	; (800287c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002848:	e002      	b.n	8002850 <LoopCopyDataInit>

0800284a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800284a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800284c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800284e:	3304      	adds	r3, #4

08002850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002854:	d3f9      	bcc.n	800284a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002856:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002858:	4c0a      	ldr	r4, [pc, #40]	; (8002884 <LoopFillZerobss+0x22>)
  movs r3, #0
 800285a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800285c:	e001      	b.n	8002862 <LoopFillZerobss>

0800285e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800285e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002860:	3204      	adds	r2, #4

08002862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002864:	d3fb      	bcc.n	800285e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002866:	f019 fcf5 	bl	801c254 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800286a:	f7fe fc75 	bl	8001158 <main>
  bx  lr    
 800286e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002870:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002878:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 800287c:	08023280 	.word	0x08023280
  ldr r2, =_sbss
 8002880:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8002884:	2000da70 	.word	0x2000da70

08002888 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002888:	e7fe      	b.n	8002888 <ADC_IRQHandler>

0800288a <CharToDec>:

float float_temp;

int part = 0;

int CharToDec(char c){
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	4603      	mov	r3, r0
 8002892:	71fb      	strb	r3, [r7, #7]
    if(c>='0' && c<='9') return c-'0';
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	2b2f      	cmp	r3, #47	; 0x2f
 8002898:	d905      	bls.n	80028a6 <CharToDec+0x1c>
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	2b39      	cmp	r3, #57	; 0x39
 800289e:	d802      	bhi.n	80028a6 <CharToDec+0x1c>
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	3b30      	subs	r3, #48	; 0x30
 80028a4:	e012      	b.n	80028cc <CharToDec+0x42>
    if(c>='a' && c<='f') return c-'a'+10;
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	2b60      	cmp	r3, #96	; 0x60
 80028aa:	d905      	bls.n	80028b8 <CharToDec+0x2e>
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	2b66      	cmp	r3, #102	; 0x66
 80028b0:	d802      	bhi.n	80028b8 <CharToDec+0x2e>
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	3b57      	subs	r3, #87	; 0x57
 80028b6:	e009      	b.n	80028cc <CharToDec+0x42>
    if(c>='A' && c<='F') return c-'A'+10;
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	2b40      	cmp	r3, #64	; 0x40
 80028bc:	d905      	bls.n	80028ca <CharToDec+0x40>
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	2b46      	cmp	r3, #70	; 0x46
 80028c2:	d802      	bhi.n	80028ca <CharToDec+0x40>
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	3b37      	subs	r3, #55	; 0x37
 80028c8:	e000      	b.n	80028cc <CharToDec+0x42>
    return 0;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <http_parse_params_init>:

void http_parse_params_init (xQueueHandle xQueue, uint8_t parameters_type){
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	70fb      	strb	r3, [r7, #3]

	if (parameters_type == MQTT){
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d106      	bne.n	80028f8 <http_parse_params_init+0x20>
		if (xQueue){
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d02a      	beq.n	8002946 <http_parse_params_init+0x6e>
			MQTT_Q = xQueue;
 80028f0:	4a18      	ldr	r2, [pc, #96]	; (8002954 <http_parse_params_init+0x7c>)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6013      	str	r3, [r2, #0]
	}else if (parameters_type == PowrSensSett){
		if (xQueue){
			PowerSensSettings_Q = xQueue;
		}
	}
}
 80028f6:	e026      	b.n	8002946 <http_parse_params_init+0x6e>
	}else if (parameters_type == HA){
 80028f8:	78fb      	ldrb	r3, [r7, #3]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d106      	bne.n	800290c <http_parse_params_init+0x34>
		if (xQueue){
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d020      	beq.n	8002946 <http_parse_params_init+0x6e>
			HomeAsistant_Q = xQueue;
 8002904:	4a14      	ldr	r2, [pc, #80]	; (8002958 <http_parse_params_init+0x80>)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6013      	str	r3, [r2, #0]
}
 800290a:	e01c      	b.n	8002946 <http_parse_params_init+0x6e>
	}else if (parameters_type == ModBusTCP){
 800290c:	78fb      	ldrb	r3, [r7, #3]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d106      	bne.n	8002920 <http_parse_params_init+0x48>
		if (xQueue){
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d016      	beq.n	8002946 <http_parse_params_init+0x6e>
			ModbusTCP_Q = xQueue;
 8002918:	4a10      	ldr	r2, [pc, #64]	; (800295c <http_parse_params_init+0x84>)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6013      	str	r3, [r2, #0]
}
 800291e:	e012      	b.n	8002946 <http_parse_params_init+0x6e>
	}else if (parameters_type == PowrData){
 8002920:	78fb      	ldrb	r3, [r7, #3]
 8002922:	2b03      	cmp	r3, #3
 8002924:	d106      	bne.n	8002934 <http_parse_params_init+0x5c>
		if (xQueue){
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00c      	beq.n	8002946 <http_parse_params_init+0x6e>
			Power_Data_Q = xQueue;
 800292c:	4a0c      	ldr	r2, [pc, #48]	; (8002960 <http_parse_params_init+0x88>)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6013      	str	r3, [r2, #0]
}
 8002932:	e008      	b.n	8002946 <http_parse_params_init+0x6e>
	}else if (parameters_type == PowrSensSett){
 8002934:	78fb      	ldrb	r3, [r7, #3]
 8002936:	2b04      	cmp	r3, #4
 8002938:	d105      	bne.n	8002946 <http_parse_params_init+0x6e>
		if (xQueue){
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <http_parse_params_init+0x6e>
			PowerSensSettings_Q = xQueue;
 8002940:	4a08      	ldr	r2, [pc, #32]	; (8002964 <http_parse_params_init+0x8c>)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6013      	str	r3, [r2, #0]
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	200004a8 	.word	0x200004a8
 8002958:	200004ac 	.word	0x200004ac
 800295c:	200004b0 	.word	0x200004b0
 8002960:	200004b4 	.word	0x200004b4
 8002964:	200004b8 	.word	0x200004b8

08002968 <param_from_http_to_Q>:

void param_from_http_to_Q(char * http_resp, const uint8_t parameters_type){
 8002968:	b580      	push	{r7, lr}
 800296a:	b0cc      	sub	sp, #304	; 0x130
 800296c:	af00      	add	r7, sp, #0
 800296e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002972:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002976:	6018      	str	r0, [r3, #0]
 8002978:	460a      	mov	r2, r1
 800297a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800297e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8002982:	701a      	strb	r2, [r3, #0]
	float				shunt_value;
	P_sens_sett_struct	PowShunSett;

	uint8_t * buf;

	switch (parameters_type) {
 8002984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002988:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b04      	cmp	r3, #4
 8002990:	f200 814f 	bhi.w	8002c32 <param_from_http_to_Q+0x2ca>
 8002994:	a201      	add	r2, pc, #4	; (adr r2, 800299c <param_from_http_to_Q+0x34>)
 8002996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299a:	bf00      	nop
 800299c:	080029b1 	.word	0x080029b1
 80029a0:	08002c33 	.word	0x08002c33
 80029a4:	08002b3d 	.word	0x08002b3d
 80029a8:	08002c33 	.word	0x08002c33
 80029ac:	08002bc3 	.word	0x08002bc3

		case MQTT:

			memset(&MQTT_params, 0, sizeof(MQTT_params));
 80029b0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80029b4:	22c6      	movs	r2, #198	; 0xc6
 80029b6:	2100      	movs	r1, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f019 faa5 	bl	801bf08 <memset>

			if (strstr(get_http_param_value( http_resp, "mqtt"), "1")){
 80029be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80029c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80029c6:	49a2      	ldr	r1, [pc, #648]	; (8002c50 <param_from_http_to_Q+0x2e8>)
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	f00b f8a9 	bl	800db20 <get_http_param_value>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2131      	movs	r1, #49	; 0x31
 80029d2:	4618      	mov	r0, r3
 80029d4:	f019 faaf 	bl	801bf36 <strchr>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <param_from_http_to_Q+0x7e>
				MQTT_params.enable = 1;
 80029de:	2301      	movs	r3, #1
 80029e0:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 80029e4:	e012      	b.n	8002a0c <param_from_http_to_Q+0xa4>
			}else if (strstr(get_http_param_value( http_resp, "mqtt"), "0")) {
 80029e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80029ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80029ee:	4998      	ldr	r1, [pc, #608]	; (8002c50 <param_from_http_to_Q+0x2e8>)
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	f00b f895 	bl	800db20 <get_http_param_value>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2130      	movs	r1, #48	; 0x30
 80029fa:	4618      	mov	r0, r3
 80029fc:	f019 fa9b 	bl	801bf36 <strchr>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <param_from_http_to_Q+0xa4>
				MQTT_params.enable = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "login");
 8002a0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002a10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a14:	498f      	ldr	r1, [pc, #572]	; (8002c54 <param_from_http_to_Q+0x2ec>)
 8002a16:	6818      	ldr	r0, [r3, #0]
 8002a18:	f00b f882 	bl	800db20 <get_http_param_value>
 8002a1c:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) < sizeof(MQTT_params.login) / sizeof(char)) ){
 8002a20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d106      	bne.n	8002a36 <param_from_http_to_Q+0xce>
 8002a28:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8002a2c:	f7fd fc38 	bl	80002a0 <strlen>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	d807      	bhi.n	8002a46 <param_from_http_to_Q+0xde>
				strcpy(MQTT_params.login, buf);
 8002a36:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a3a:	3384      	adds	r3, #132	; 0x84
 8002a3c:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8002a40:	4618      	mov	r0, r3
 8002a42:	f019 fc2e 	bl	801c2a2 <strcpy>
				//TODO change to strncpy
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "password");
 8002a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002a4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a4e:	4982      	ldr	r1, [pc, #520]	; (8002c58 <param_from_http_to_Q+0x2f0>)
 8002a50:	6818      	ldr	r0, [r3, #0]
 8002a52:	f00b f865 	bl	800db20 <get_http_param_value>
 8002a56:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) < sizeof(MQTT_params.pass) / sizeof(char)) ){
 8002a5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <param_from_http_to_Q+0x108>
 8002a62:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8002a66:	f7fd fc1b 	bl	80002a0 <strlen>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b20      	cmp	r3, #32
 8002a6e:	d807      	bhi.n	8002a80 <param_from_http_to_Q+0x118>
				strcpy(MQTT_params.pass, buf);
 8002a70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a74:	33a5      	adds	r3, #165	; 0xa5
 8002a76:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f019 fc11 	bl	801c2a2 <strcpy>
				//TODO change to strncpy
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "uri");
 8002a80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002a84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a88:	4974      	ldr	r1, [pc, #464]	; (8002c5c <param_from_http_to_Q+0x2f4>)
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	f00b f848 	bl	800db20 <get_http_param_value>
 8002a90:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) <= MAX_DOMAIN_NAME -1 ) ) {						 // 15 ��������, ������������ ����� IPv4
 8002a94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d106      	bne.n	8002aaa <param_from_http_to_Q+0x142>
 8002a9c:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8002aa0:	f7fd fbfe 	bl	80002a0 <strlen>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b7f      	cmp	r3, #127	; 0x7f
 8002aa8:	d808      	bhi.n	8002abc <param_from_http_to_Q+0x154>
				//sscanf(buf, "%d.%d.%d.%d", &ip_addr[0], &ip_addr[1], &ip_addr[2], &ip_addr[3]);
				strncpy(MQTT_params.uri, buf, MAX_DOMAIN_NAME - 1);
 8002aaa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002aae:	3302      	adds	r3, #2
 8002ab0:	227f      	movs	r2, #127	; 0x7f
 8002ab2:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f019 fa80 	bl	801bfbc <strncpy>
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "port");
 8002abc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002ac0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ac4:	4966      	ldr	r1, [pc, #408]	; (8002c60 <param_from_http_to_Q+0x2f8>)
 8002ac6:	6818      	ldr	r0, [r3, #0]
 8002ac8:	f00b f82a 	bl	800db20 <get_http_param_value>
 8002acc:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) <= 5) ) {						// 5 ��������, ������������ ����� ������ �����
 8002ad0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d106      	bne.n	8002ae6 <param_from_http_to_Q+0x17e>
 8002ad8:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8002adc:	f7fd fbe0 	bl	80002a0 <strlen>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b05      	cmp	r3, #5
 8002ae4:	d81e      	bhi.n	8002b24 <param_from_http_to_Q+0x1bc>
				sscanf(buf, "%d", &port);
 8002ae6:	f107 0316 	add.w	r3, r7, #22
 8002aea:	461a      	mov	r2, r3
 8002aec:	495d      	ldr	r1, [pc, #372]	; (8002c64 <param_from_http_to_Q+0x2fc>)
 8002aee:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8002af2:	f019 f8d9 	bl	801bca8 <siscanf>
				if ((port > 0) && (port < 65535)){
 8002af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002afa:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00f      	beq.n	8002b24 <param_from_http_to_Q+0x1bc>
 8002b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b08:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d006      	beq.n	8002b24 <param_from_http_to_Q+0x1bc>
					MQTT_params.port = port;
 8002b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b1a:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
				}
			}

			MQTT_params.save = 1;
 8002b24:	2301      	movs	r3, #1
 8002b26:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

			xQueueOverwrite(MQTT_Q, (void *)&MQTT_params);
 8002b2a:	4b4f      	ldr	r3, [pc, #316]	; (8002c68 <param_from_http_to_Q+0x300>)
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8002b32:	2302      	movs	r3, #2
 8002b34:	2200      	movs	r2, #0
 8002b36:	f00d f9a9 	bl	800fe8c <xQueueGenericSend>

			break;
 8002b3a:	e07d      	b.n	8002c38 <param_from_http_to_Q+0x2d0>

		case ModBusTCP:
			memset(&ModBusTCP_parameters, 0, sizeof(ModBusTCP_parameters));
 8002b3c:	f107 031c 	add.w	r3, r7, #28
 8002b40:	2202      	movs	r2, #2
 8002b42:	2100      	movs	r1, #0
 8002b44:	4618      	mov	r0, r3
 8002b46:	f019 f9df 	bl	801bf08 <memset>
			if (strstr(get_http_param_value( http_resp, "mb_tcp"), "1")){
 8002b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b52:	4946      	ldr	r1, [pc, #280]	; (8002c6c <param_from_http_to_Q+0x304>)
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	f00a ffe3 	bl	800db20 <get_http_param_value>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2131      	movs	r1, #49	; 0x31
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f019 f9e9 	bl	801bf36 <strchr>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d006      	beq.n	8002b78 <param_from_http_to_Q+0x210>
				ModBusTCP_parameters.enable = 1;
 8002b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b6e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002b72:	2201      	movs	r2, #1
 8002b74:	705a      	strb	r2, [r3, #1]
 8002b76:	e015      	b.n	8002ba4 <param_from_http_to_Q+0x23c>
			}else if (strstr(get_http_param_value( http_resp, "mb_tcp"), "0")) {
 8002b78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b80:	493a      	ldr	r1, [pc, #232]	; (8002c6c <param_from_http_to_Q+0x304>)
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	f00a ffcc 	bl	800db20 <get_http_param_value>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2130      	movs	r1, #48	; 0x30
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f019 f9d2 	bl	801bf36 <strchr>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <param_from_http_to_Q+0x23c>
				ModBusTCP_parameters.enable = 0;
 8002b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b9c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	705a      	strb	r2, [r3, #1]
			}
			ModBusTCP_parameters.save = 1;
 8002ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002ba8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]

			xQueueOverwrite(ModbusTCP_Q, (void *)&ModBusTCP_parameters);
 8002bb0:	4b2f      	ldr	r3, [pc, #188]	; (8002c70 <param_from_http_to_Q+0x308>)
 8002bb2:	6818      	ldr	r0, [r3, #0]
 8002bb4:	f107 011c 	add.w	r1, r7, #28
 8002bb8:	2302      	movs	r3, #2
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f00d f966 	bl	800fe8c <xQueueGenericSend>
			break;
 8002bc0:	e03a      	b.n	8002c38 <param_from_http_to_Q+0x2d0>
		case HA:

			break;
//TODO hui pizda zalupa
		case PowrSensSett:
			buf = (uint8_t *) get_http_param_value( http_resp, "shunt");
 8002bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002bc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002bca:	492a      	ldr	r1, [pc, #168]	; (8002c74 <param_from_http_to_Q+0x30c>)
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	f00a ffa7 	bl	800db20 <get_http_param_value>
 8002bd2:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf ) {						// 5 ��������, ������������ ����� ������ �����
 8002bd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d02b      	beq.n	8002c36 <param_from_http_to_Q+0x2ce>
				sscanf(buf, "%f", &float_temp);							//TODO add validation
 8002bde:	4a26      	ldr	r2, [pc, #152]	; (8002c78 <param_from_http_to_Q+0x310>)
 8002be0:	4926      	ldr	r1, [pc, #152]	; (8002c7c <param_from_http_to_Q+0x314>)
 8002be2:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8002be6:	f019 f85f 	bl	801bca8 <siscanf>
				if (float_temp > 0.0001){ 									//validate value
 8002bea:	4b23      	ldr	r3, [pc, #140]	; (8002c78 <param_from_http_to_Q+0x310>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fd fcc2 	bl	8000578 <__aeabi_f2d>
 8002bf4:	a314      	add	r3, pc, #80	; (adr r3, 8002c48 <param_from_http_to_Q+0x2e0>)
 8002bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfa:	f7fd ffa5 	bl	8000b48 <__aeabi_dcmpgt>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d100      	bne.n	8002c06 <param_from_http_to_Q+0x29e>
				PowShunSett.resistance = float_temp;
				PowShunSett.save = 1;
				xQueueOverwrite(PowerSensSettings_Q, (void *)&PowShunSett);
				}
			}
			break;
 8002c04:	e017      	b.n	8002c36 <param_from_http_to_Q+0x2ce>
				PowShunSett.resistance = float_temp;
 8002c06:	4b1c      	ldr	r3, [pc, #112]	; (8002c78 <param_from_http_to_Q+0x310>)
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c0e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002c12:	605a      	str	r2, [r3, #4]
				PowShunSett.save = 1;
 8002c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c18:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	701a      	strb	r2, [r3, #0]
				xQueueOverwrite(PowerSensSettings_Q, (void *)&PowShunSett);
 8002c20:	4b17      	ldr	r3, [pc, #92]	; (8002c80 <param_from_http_to_Q+0x318>)
 8002c22:	6818      	ldr	r0, [r3, #0]
 8002c24:	f107 010c 	add.w	r1, r7, #12
 8002c28:	2302      	movs	r3, #2
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f00d f92e 	bl	800fe8c <xQueueGenericSend>
			break;
 8002c30:	e001      	b.n	8002c36 <param_from_http_to_Q+0x2ce>
		default:
			break;
 8002c32:	bf00      	nop
 8002c34:	e000      	b.n	8002c38 <param_from_http_to_Q+0x2d0>
			break;
 8002c36:	bf00      	nop
	}
}
 8002c38:	bf00      	nop
 8002c3a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	f3af 8000 	nop.w
 8002c48:	eb1c432d 	.word	0xeb1c432d
 8002c4c:	3f1a36e2 	.word	0x3f1a36e2
 8002c50:	08020cc0 	.word	0x08020cc0
 8002c54:	08020cc8 	.word	0x08020cc8
 8002c58:	08020cd0 	.word	0x08020cd0
 8002c5c:	08020cdc 	.word	0x08020cdc
 8002c60:	08020ce0 	.word	0x08020ce0
 8002c64:	08020ce8 	.word	0x08020ce8
 8002c68:	200004a8 	.word	0x200004a8
 8002c6c:	08020cec 	.word	0x08020cec
 8002c70:	200004b0 	.word	0x200004b0
 8002c74:	08020cf4 	.word	0x08020cf4
 8002c78:	200004bc 	.word	0x200004bc
 8002c7c:	08020cfc 	.word	0x08020cfc
 8002c80:	200004b8 	.word	0x200004b8

08002c84 <param_from_Q_to_JSON>:

void param_from_Q_to_JSON(char * buf, const uint8_t parameters_type, uint16_t * len){
 8002c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c88:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8002c8c:	af0a      	add	r7, sp, #40	; 0x28
 8002c8e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002c92:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c96:	6018      	str	r0, [r3, #0]
 8002c98:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002c9c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002ca6:	f2a3 13dd 	subw	r3, r3, #477	; 0x1dd
 8002caa:	460a      	mov	r2, r1
 8002cac:	701a      	strb	r2, [r3, #0]

	MQTT_cred_struct	MQTT_params;
	PowerSensStruct		PowerParm;
	P_sens_sett_struct	PowShunSett;

	unsigned const char template_mqtt_data[] 	= {"{\"login\": \"%s\", \"pass\": \"********\", \"addr\": \"%s\", \"port\": \"%u\", \"enabled\": \"%u\"}"};//{"login": "admin", "pass": "1234", "addr": "10.0.2.20", "port": "1883", "enabled": 1 }
 8002cae:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002cb2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002cb6:	4a73      	ldr	r2, [pc, #460]	; (8002e84 <param_from_Q_to_JSON+0x200>)
 8002cb8:	4618      	mov	r0, r3
 8002cba:	4611      	mov	r1, r2
 8002cbc:	2351      	movs	r3, #81	; 0x51
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	f019 faf7 	bl	801c2b2 <memcpy>
	unsigned const char template_power_data[] 	= {"{\"voltage\": \"%.2f\", \"current\": \"%.2f\", \"active_power_w\": \"%.2f\", \"apparent_power_w\": \"%.2f\", \"power_factor\": \"%.2f\", \"W_h\": \"%.2f\"}"};//{"voltage": "233.2", "current": "0.56", "active_power_w": "33.4", "apparent_power_w": "65.2", "power_factor": "0.5", "KW/h": "0.5634"}
 8002cc4:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002cc8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002ccc:	4a6e      	ldr	r2, [pc, #440]	; (8002e88 <param_from_Q_to_JSON+0x204>)
 8002cce:	4618      	mov	r0, r3
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	2384      	movs	r3, #132	; 0x84
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	f019 faec 	bl	801c2b2 <memcpy>
	unsigned const char template_shunt_sett[]   = {"{\"shunt\": \"%.4f\"}"};
 8002cda:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002cde:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002ce2:	4a6a      	ldr	r2, [pc, #424]	; (8002e8c <param_from_Q_to_JSON+0x208>)
 8002ce4:	461c      	mov	r4, r3
 8002ce6:	4615      	mov	r5, r2
 8002ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cec:	682b      	ldr	r3, [r5, #0]
 8002cee:	8023      	strh	r3, [r4, #0]

	switch (parameters_type) {
 8002cf0:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002cf4:	f2a3 13dd 	subw	r3, r3, #477	; 0x1dd
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	f000 8093 	beq.w	8002e26 <param_from_Q_to_JSON+0x1a2>
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	f300 80b8 	bgt.w	8002e76 <param_from_Q_to_JSON+0x1f2>
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <param_from_Q_to_JSON+0x8c>
 8002d0a:	2b03      	cmp	r3, #3
 8002d0c:	d031      	beq.n	8002d72 <param_from_Q_to_JSON+0xee>
			sprintf(buf, (const char *)template_shunt_sett, PowShunSett.resistance);
			*len = strlen(buf);

			break;
		default:
			break;
 8002d0e:	e0b2      	b.n	8002e76 <param_from_Q_to_JSON+0x1f2>
			xQueuePeek(MQTT_Q ,&MQTT_params,0);
 8002d10:	4b5f      	ldr	r3, [pc, #380]	; (8002e90 <param_from_Q_to_JSON+0x20c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8002d18:	2200      	movs	r2, #0
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f00d fc3c 	bl	8010598 <xQueuePeek>
			sprintf(buf, (const char *)template_mqtt_data, MQTT_params.login, MQTT_params.uri, MQTT_params.port, MQTT_params.enable);
 8002d20:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	; 0x1b2
 8002d24:	461d      	mov	r5, r3
 8002d26:	f897 3131 	ldrb.w	r3, [r7, #305]	; 0x131
 8002d2a:	461e      	mov	r6, r3
 8002d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d30:	1c9c      	adds	r4, r3, #2
 8002d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d36:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8002d3a:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8002d3e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002d42:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 8002d46:	9601      	str	r6, [sp, #4]
 8002d48:	9500      	str	r5, [sp, #0]
 8002d4a:	4623      	mov	r3, r4
 8002d4c:	6800      	ldr	r0, [r0, #0]
 8002d4e:	f018 ff8b 	bl	801bc68 <siprintf>
			*len = strlen(buf);
 8002d52:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002d56:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	f7fd faa0 	bl	80002a0 <strlen>
 8002d60:	4603      	mov	r3, r0
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002d68:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	801a      	strh	r2, [r3, #0]
			break;
 8002d70:	e082      	b.n	8002e78 <param_from_Q_to_JSON+0x1f4>
			xQueuePeek(Power_Data_Q ,&PowerParm,0);
 8002d72:	4b48      	ldr	r3, [pc, #288]	; (8002e94 <param_from_Q_to_JSON+0x210>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f00d fc0b 	bl	8010598 <xQueuePeek>
			sprintf(buf, (const char *)template_power_data, PowerParm.Voltage, PowerParm.Current, PowerParm.ActivPower, PowerParm.ApparPower, PowerParm.PowerFactor, PowerParm.KWatt_h);
 8002d82:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fd fbf6 	bl	8000578 <__aeabi_f2d>
 8002d8c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002d90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fd fbef 	bl	8000578 <__aeabi_f2d>
 8002d9a:	4604      	mov	r4, r0
 8002d9c:	460d      	mov	r5, r1
 8002d9e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fd fbe8 	bl	8000578 <__aeabi_f2d>
 8002da8:	4680      	mov	r8, r0
 8002daa:	4689      	mov	r9, r1
 8002dac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fd fbe1 	bl	8000578 <__aeabi_f2d>
 8002db6:	4682      	mov	sl, r0
 8002db8:	468b      	mov	fp, r1
 8002dba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fd fbda 	bl	8000578 <__aeabi_f2d>
 8002dc4:	e9c7 0100 	strd	r0, r1, [r7]
 8002dc8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fd fbd3 	bl	8000578 <__aeabi_f2d>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	f107 0638 	add.w	r6, r7, #56	; 0x38
 8002dda:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 8002dde:	f5a1 70ee 	sub.w	r0, r1, #476	; 0x1dc
 8002de2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002de6:	ed97 7b00 	vldr	d7, [r7]
 8002dea:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002dee:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002df2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002df6:	e9cd 4500 	strd	r4, r5, [sp]
 8002dfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dfe:	4631      	mov	r1, r6
 8002e00:	6800      	ldr	r0, [r0, #0]
 8002e02:	f018 ff31 	bl	801bc68 <siprintf>
			*len = strlen(buf);
 8002e06:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002e0a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	f7fd fa46 	bl	80002a0 <strlen>
 8002e14:	4603      	mov	r3, r0
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002e1c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	801a      	strh	r2, [r3, #0]
			break;
 8002e24:	e028      	b.n	8002e78 <param_from_Q_to_JSON+0x1f4>
			xQueuePeek(PowerSensSettings_Q ,&PowShunSett,0);
 8002e26:	4b1c      	ldr	r3, [pc, #112]	; (8002e98 <param_from_Q_to_JSON+0x214>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002e2e:	2200      	movs	r2, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f00d fbb1 	bl	8010598 <xQueuePeek>
			sprintf(buf, (const char *)template_shunt_sett, PowShunSett.resistance);
 8002e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fd fb9c 	bl	8000578 <__aeabi_f2d>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002e48:	f507 70fc 	add.w	r0, r7, #504	; 0x1f8
 8002e4c:	f5a0 70ee 	sub.w	r0, r0, #476	; 0x1dc
 8002e50:	6800      	ldr	r0, [r0, #0]
 8002e52:	f018 ff09 	bl	801bc68 <siprintf>
			*len = strlen(buf);
 8002e56:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002e5a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	f7fd fa1e 	bl	80002a0 <strlen>
 8002e64:	4603      	mov	r3, r0
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002e6c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	801a      	strh	r2, [r3, #0]
			break;
 8002e74:	e000      	b.n	8002e78 <param_from_Q_to_JSON+0x1f4>
			break;
 8002e76:	bf00      	nop
	}
}
 8002e78:	bf00      	nop
 8002e7a:	f507 77fe 	add.w	r7, r7, #508	; 0x1fc
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e84:	08020d00 	.word	0x08020d00
 8002e88:	08020d54 	.word	0x08020d54
 8002e8c:	08020dd8 	.word	0x08020dd8
 8002e90:	200004a8 	.word	0x200004a8
 8002e94:	200004b4 	.word	0x200004b4
 8002e98:	200004b8 	.word	0x200004b8

08002e9c <write_to_file>:

int write_to_file(char * buf, uint16_t * len, char * response){
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	f5ad 7d3e 	sub.w	sp, sp, #760	; 0x2f8
 8002ea2:	af02      	add	r7, sp, #8
 8002ea4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002ea8:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8002eac:	6018      	str	r0, [r3, #0]
 8002eae:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002eb2:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8002eb6:	6019      	str	r1, [r3, #0]
 8002eb8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002ebc:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8002ec0:	601a      	str	r2, [r3, #0]
	unsigned char output[17];
	unsigned char recv_digest_bin[17];
	int i, t ,t2 ,r;


	p_len = &parsed_len;
 8002ec2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002ec6:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4

	param_value = get_http_param_value((char *)buf, "filename");
 8002eca:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002ece:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8002ed2:	49ab      	ldr	r1, [pc, #684]	; (8003180 <write_to_file+0x2e4>)
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	f00a fe23 	bl	800db20 <get_http_param_value>
 8002eda:	f8c7 02e0 	str.w	r0, [r7, #736]	; 0x2e0
	if (param_value){
 8002ede:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d023      	beq.n	8002f2e <write_to_file+0x92>
		strcpy(filename, HTTP_FS_DIR);
 8002ee6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002eea:	4aa6      	ldr	r2, [pc, #664]	; (8003184 <write_to_file+0x2e8>)
 8002eec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ef0:	6018      	str	r0, [r3, #0]
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	7019      	strb	r1, [r3, #0]
		strncat(filename, param_value, MAX_CONTENT_NAME_LEN-5);
 8002ef6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002efa:	222d      	movs	r2, #45	; 0x2d
 8002efc:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8002f00:	4618      	mov	r0, r3
 8002f02:	f019 f836 	bl	801bf72 <strncat>
		return;
	}

	//step_number = get_http_param_value((char *)buf, "step");

	param_value = get_http_param_value((char *)buf, "data");
 8002f06:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f0a:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8002f0e:	499e      	ldr	r1, [pc, #632]	; (8003188 <write_to_file+0x2ec>)
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	f00a fe05 	bl	800db20 <get_http_param_value>
 8002f16:	f8c7 02e0 	str.w	r0, [r7, #736]	; 0x2e0

	if (strlen(param_value) >=  TMP_BUFF_FOR_FILE_RECV){ //check if resieved data in parameter "data" not bigger then buffer
 8002f1a:	f8d7 02e0 	ldr.w	r0, [r7, #736]	; 0x2e0
 8002f1e:	f7fd f9bf 	bl	80002a0 <strlen>
 8002f22:	4603      	mov	r3, r0
 8002f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f28:	f080 8113 	bcs.w	8003152 <write_to_file+0x2b6>
 8002f2c:	e011      	b.n	8002f52 <write_to_file+0xb6>
		strncpy(response, "error", strlen("error")+1);
 8002f2e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f32:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a94      	ldr	r2, [pc, #592]	; (800318c <write_to_file+0x2f0>)
 8002f3a:	6810      	ldr	r0, [r2, #0]
 8002f3c:	6018      	str	r0, [r3, #0]
 8002f3e:	8892      	ldrh	r2, [r2, #4]
 8002f40:	809a      	strh	r2, [r3, #4]
		*len = strlen("error");
 8002f42:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f46:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2205      	movs	r2, #5
 8002f4e:	801a      	strh	r2, [r3, #0]
		return;
 8002f50:	e111      	b.n	8003176 <write_to_file+0x2da>

	}else if (param_value){								//check if resieved data len > 0
 8002f52:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 80e9 	beq.w	800312e <write_to_file+0x292>
		recv_len = strlen(param_value);
 8002f5c:	f8d7 02e0 	ldr.w	r0, [r7, #736]	; 0x2e0
 8002f60:	f7fd f99e 	bl	80002a0 <strlen>
 8002f64:	4603      	mov	r3, r0
 8002f66:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
//		replacetochar(param_value, ' ', '+');
		err = mbedtls_base64_decode((unsigned char *)tmp_data_buf, TMP_BUFF_FOR_FILE_RECV, p_len, (const unsigned char *)param_value, recv_len);
 8002f6a:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8002f6e:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8002f78:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8002f7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f80:	f016 fc84 	bl	801988c <mbedtls_base64_decode>
 8002f84:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec

		parsed_digest = get_http_param_value((char *)buf, "digest");
 8002f88:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002f8c:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8002f90:	497f      	ldr	r1, [pc, #508]	; (8003190 <write_to_file+0x2f4>)
 8002f92:	6818      	ldr	r0, [r3, #0]
 8002f94:	f00a fdc4 	bl	800db20 <get_http_param_value>
 8002f98:	f8c7 02d8 	str.w	r0, [r7, #728]	; 0x2d8

	    for (i = 0; i< 32 ; i+=2){
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8002fa2:	e030      	b.n	8003006 <write_to_file+0x16a>
	        t = CharToDec(parsed_digest[i]);
 8002fa4:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8002fa8:	f8d7 22d8 	ldr.w	r2, [r7, #728]	; 0x2d8
 8002fac:	4413      	add	r3, r2
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff fc6a 	bl	800288a <CharToDec>
 8002fb6:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	        t2 = CharToDec(parsed_digest[i+1]);
 8002fba:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	f8d7 22d8 	ldr.w	r2, [r7, #728]	; 0x2d8
 8002fc4:	4413      	add	r3, r2
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fc5e 	bl	800288a <CharToDec>
 8002fce:	f8c7 02c8 	str.w	r0, [r7, #712]	; 0x2c8
	        recv_digest_bin[i/2] = t << 4 | t2;
 8002fd2:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	b25a      	sxtb	r2, r3
 8002fda:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8002fde:	b25b      	sxtb	r3, r3
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	b259      	sxtb	r1, r3
 8002fe4:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8002fe8:	0fda      	lsrs	r2, r3, #31
 8002fea:	4413      	add	r3, r2
 8002fec:	105b      	asrs	r3, r3, #1
 8002fee:	461a      	mov	r2, r3
 8002ff0:	b2c9      	uxtb	r1, r1
 8002ff2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002ff6:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8002ffa:	5499      	strb	r1, [r3, r2]
	    for (i = 0; i< 32 ; i+=2){
 8002ffc:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8003000:	3302      	adds	r3, #2
 8003002:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8003006:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800300a:	2b1f      	cmp	r3, #31
 800300c:	ddca      	ble.n	8002fa4 <write_to_file+0x108>
	    }
	    recv_digest_bin[16] = '\0';
 800300e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003012:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8003016:	2200      	movs	r2, #0
 8003018:	741a      	strb	r2, [r3, #16]


		mbedtls_md5_context md5_ctx;

		mbedtls_md5_init(&md5_ctx);
 800301a:	f107 0310 	add.w	r3, r7, #16
 800301e:	4618      	mov	r0, r3
 8003020:	f016 fd50 	bl	8019ac4 <mbedtls_md5_init>
		mbedtls_md5_starts_ret(&md5_ctx);
 8003024:	f107 0310 	add.w	r3, r7, #16
 8003028:	4618      	mov	r0, r3
 800302a:	f016 fd69 	bl	8019b00 <mbedtls_md5_starts_ret>
		mbedtls_md5_update_ret(&md5_ctx, tmp_data_buf, *p_len);
 800302e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8003038:	f107 0310 	add.w	r3, r7, #16
 800303c:	4618      	mov	r0, r3
 800303e:	f017 fc49 	bl	801a8d4 <mbedtls_md5_update_ret>
		mbedtls_md5_finish_ret(&md5_ctx, output);
 8003042:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003046:	f107 0310 	add.w	r3, r7, #16
 800304a:	4611      	mov	r1, r2
 800304c:	4618      	mov	r0, r3
 800304e:	f017 fcb6 	bl	801a9be <mbedtls_md5_finish_ret>
		mbedtls_md5_free(&md5_ctx);
 8003052:	f107 0310 	add.w	r3, r7, #16
 8003056:	4618      	mov	r0, r3
 8003058:	f016 fd41 	bl	8019ade <mbedtls_md5_free>
		output[16] = '\0';
 800305c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003060:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8003064:	2200      	movs	r2, #0
 8003066:	741a      	strb	r2, [r3, #16]



		if (strncmp(&recv_digest_bin, &output, 16)){
 8003068:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800306c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003070:	2210      	movs	r2, #16
 8003072:	4618      	mov	r0, r3
 8003074:	f018 ff90 	bl	801bf98 <strncmp>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d006      	beq.n	800308c <write_to_file+0x1f0>
			err = -1;
 800307e:	f04f 33ff 	mov.w	r3, #4294967295
 8003082:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
			return err;
 8003086:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800308a:	e074      	b.n	8003176 <write_to_file+0x2da>
		}

		step_number = get_http_param_value((char *)buf, "step");
 800308c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003090:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8003094:	493f      	ldr	r1, [pc, #252]	; (8003194 <write_to_file+0x2f8>)
 8003096:	6818      	ldr	r0, [r3, #0]
 8003098:	f00a fd42 	bl	800db20 <get_http_param_value>
 800309c:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
		number = ATOI(step_number, 10);
 80030a0:	210a      	movs	r1, #10
 80030a2:	f8d7 02d4 	ldr.w	r0, [r7, #724]	; 0x2d4
 80030a6:	f00a fded 	bl	800dc84 <ATOI>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0

		if(number == 0){
 80030b0:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10f      	bne.n	80030d8 <write_to_file+0x23c>
			part =0;
 80030b8:	4b37      	ldr	r3, [pc, #220]	; (8003198 <write_to_file+0x2fc>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
			err = spi_fs_over_write_file(filename, tmp_data_buf, *p_len);
 80030be:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80030c8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80030cc:	4618      	mov	r0, r3
 80030ce:	f016 fb0d 	bl	80196ec <spi_fs_over_write_file>
 80030d2:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec
 80030d6:	e01d      	b.n	8003114 <write_to_file+0x278>
		}else{

			if(ATOI(step_number, 10)!= part){
 80030d8:	210a      	movs	r1, #10
 80030da:	f8d7 02d4 	ldr.w	r0, [r7, #724]	; 0x2d4
 80030de:	f00a fdd1 	bl	800dc84 <ATOI>
 80030e2:	4603      	mov	r3, r0
 80030e4:	461a      	mov	r2, r3
 80030e6:	4b2c      	ldr	r3, [pc, #176]	; (8003198 <write_to_file+0x2fc>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d006      	beq.n	80030fc <write_to_file+0x260>
				err = -1;
 80030ee:	f04f 33ff 	mov.w	r3, #4294967295
 80030f2:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
				return err;
 80030f6:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80030fa:	e03c      	b.n	8003176 <write_to_file+0x2da>
			}

			err = spi_fs_write_file_to_end(filename, tmp_data_buf, *p_len);
 80030fc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8003106:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800310a:	4618      	mov	r0, r3
 800310c:	f016 fb4c 	bl	80197a8 <spi_fs_write_file_to_end>
 8003110:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec
		}

		part++;
 8003114:	4b20      	ldr	r3, [pc, #128]	; (8003198 <write_to_file+0x2fc>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	3301      	adds	r3, #1
 800311a:	4a1f      	ldr	r2, [pc, #124]	; (8003198 <write_to_file+0x2fc>)
 800311c:	6013      	str	r3, [r2, #0]

		if (err < 0){
 800311e:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8003122:	2b00      	cmp	r3, #0
 8003124:	da15      	bge.n	8003152 <write_to_file+0x2b6>
			err = 0;
 8003126:	2300      	movs	r3, #0
 8003128:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800312c:	e011      	b.n	8003152 <write_to_file+0x2b6>
		}

		//strncpy(tmp_data_buf, param_value, TMP_BUFF_FOR_FILE_RECV-1);
	}else{
		strncpy(response, "error", strlen("error")+1);
 800312e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003132:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a14      	ldr	r2, [pc, #80]	; (800318c <write_to_file+0x2f0>)
 800313a:	6810      	ldr	r0, [r2, #0]
 800313c:	6018      	str	r0, [r3, #0]
 800313e:	8892      	ldrh	r2, [r2, #4]
 8003140:	809a      	strh	r2, [r3, #4]
		*len = strlen("error");
 8003142:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003146:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2205      	movs	r2, #5
 800314e:	801a      	strh	r2, [r3, #0]
		return;
 8003150:	e011      	b.n	8003176 <write_to_file+0x2da>
	}
	strncpy(response, "ok", strlen("ok")+1);
 8003152:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003156:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a0f      	ldr	r2, [pc, #60]	; (800319c <write_to_file+0x300>)
 800315e:	8811      	ldrh	r1, [r2, #0]
 8003160:	7892      	ldrb	r2, [r2, #2]
 8003162:	8019      	strh	r1, [r3, #0]
 8003164:	709a      	strb	r2, [r3, #2]
	*len = strlen("ok");
 8003166:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800316a:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2202      	movs	r2, #2
 8003172:	801a      	strh	r2, [r3, #0]
}
 8003174:	e7ff      	b.n	8003176 <write_to_file+0x2da>
 8003176:	4618      	mov	r0, r3
 8003178:	f507 773c 	add.w	r7, r7, #752	; 0x2f0
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	08020dec 	.word	0x08020dec
 8003184:	08020df8 	.word	0x08020df8
 8003188:	08020e08 	.word	0x08020e08
 800318c:	08020e00 	.word	0x08020e00
 8003190:	08020e10 	.word	0x08020e10
 8003194:	08020e18 	.word	0x08020e18
 8003198:	200004c0 	.word	0x200004c0
 800319c:	08020e20 	.word	0x08020e20

080031a0 <read_all_parameters>:

int8_t read_all_parameters(uint8_t * buf, uint16_t * len){
 80031a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031a4:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 80031a8:	af12      	add	r7, sp, #72	; 0x48
 80031aa:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80031ae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80031b2:	6018      	str	r0, [r3, #0]
 80031b4:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80031b8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80031bc:	6019      	str	r1, [r3, #0]
	PowerSensStruct		PowerParm;
	P_sens_sett_struct	PowShunSett;
	MQTT_cred_struct	MQTT_params;
	ModBusTCP_struct	mb_tcp_params;

	unsigned const char template_data[] = {"{\"voltage\": \"%.2f\", \"current\": \"%.2f\", \"active_power_w\": \"%.2f\", \"apparent_power_w\": \"%.2f\", \"power_factor\": \"%.2f\", \"w_h\": \"%.2f\", \"shunt\": \"%.4f\", \"mb_tcp\": %u, \"mqtt\": %u, \"mqtt_login\": \"%s\", \"mqtt_port\": \"%u\", \"uri\": \"%s\" }"};
 80031be:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80031c2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80031c6:	4a4f      	ldr	r2, [pc, #316]	; (8003304 <read_all_parameters+0x164>)
 80031c8:	4618      	mov	r0, r3
 80031ca:	4611      	mov	r1, r2
 80031cc:	23e4      	movs	r3, #228	; 0xe4
 80031ce:	461a      	mov	r2, r3
 80031d0:	f019 f86f 	bl	801c2b2 <memcpy>

	xQueuePeek(Power_Data_Q,			(void *)&PowerParm,0);
 80031d4:	4b4c      	ldr	r3, [pc, #304]	; (8003308 <read_all_parameters+0x168>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f507 71f0 	add.w	r1, r7, #480	; 0x1e0
 80031dc:	2200      	movs	r2, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	f00d f9da 	bl	8010598 <xQueuePeek>
	xQueuePeek(PowerSensSettings_Q ,	(void *)&PowShunSett,0);
 80031e4:	4b49      	ldr	r3, [pc, #292]	; (800330c <read_all_parameters+0x16c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
 80031ec:	2200      	movs	r2, #0
 80031ee:	4618      	mov	r0, r3
 80031f0:	f00d f9d2 	bl	8010598 <xQueuePeek>
	xQueuePeek(MQTT_Q ,					(void *)&MQTT_params,0);
 80031f4:	4b46      	ldr	r3, [pc, #280]	; (8003310 <read_all_parameters+0x170>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80031fc:	2200      	movs	r2, #0
 80031fe:	4618      	mov	r0, r3
 8003200:	f00d f9ca 	bl	8010598 <xQueuePeek>
	xQueuePeek(ModbusTCP_Q,				(void *)&mb_tcp_params, 0);
 8003204:	4b43      	ldr	r3, [pc, #268]	; (8003314 <read_all_parameters+0x174>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 800320c:	2200      	movs	r2, #0
 800320e:	4618      	mov	r0, r3
 8003210:	f00d f9c2 	bl	8010598 <xQueuePeek>


	sprintf(buf, (const char *)template_data, PowerParm.Voltage, PowerParm.Current, PowerParm.ActivPower, PowerParm.ApparPower, PowerParm.PowerFactor, PowerParm.KWatt_h, PowShunSett.resistance, mb_tcp_params.enable, MQTT_params.enable, MQTT_params.login, MQTT_params.port, MQTT_params.uri);
 8003214:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003218:	4618      	mov	r0, r3
 800321a:	f7fd f9ad 	bl	8000578 <__aeabi_f2d>
 800321e:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003222:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003226:	4618      	mov	r0, r3
 8003228:	f7fd f9a6 	bl	8000578 <__aeabi_f2d>
 800322c:	4682      	mov	sl, r0
 800322e:	468b      	mov	fp, r1
 8003230:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003234:	4618      	mov	r0, r3
 8003236:	f7fd f99f 	bl	8000578 <__aeabi_f2d>
 800323a:	4605      	mov	r5, r0
 800323c:	460e      	mov	r6, r1
 800323e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003242:	4618      	mov	r0, r3
 8003244:	f7fd f998 	bl	8000578 <__aeabi_f2d>
 8003248:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800324c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003250:	4618      	mov	r0, r3
 8003252:	f7fd f991 	bl	8000578 <__aeabi_f2d>
 8003256:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800325a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd f98a 	bl	8000578 <__aeabi_f2d>
 8003264:	4680      	mov	r8, r0
 8003266:	4689      	mov	r9, r1
 8003268:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800326c:	4618      	mov	r0, r3
 800326e:	f7fd f983 	bl	8000578 <__aeabi_f2d>
 8003272:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8003276:	607b      	str	r3, [r7, #4]
 8003278:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 800327c:	603b      	str	r3, [r7, #0]
 800327e:	f8b7 3192 	ldrh.w	r3, [r7, #402]	; 0x192
 8003282:	461a      	mov	r2, r3
 8003284:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8003288:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800328c:	f5a3 74ea 	sub.w	r4, r3, #468	; 0x1d4
 8003290:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003294:	3302      	adds	r3, #2
 8003296:	9310      	str	r3, [sp, #64]	; 0x40
 8003298:	920f      	str	r2, [sp, #60]	; 0x3c
 800329a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800329e:	3384      	adds	r3, #132	; 0x84
 80032a0:	930e      	str	r3, [sp, #56]	; 0x38
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	930d      	str	r3, [sp, #52]	; 0x34
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	930c      	str	r3, [sp, #48]	; 0x30
 80032aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80032ae:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80032b2:	ed97 7b02 	vldr	d7, [r7, #8]
 80032b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80032ba:	ed97 7b04 	vldr	d7, [r7, #16]
 80032be:	ed8d 7b04 	vstr	d7, [sp, #16]
 80032c2:	e9cd 5602 	strd	r5, r6, [sp, #8]
 80032c6:	e9cd ab00 	strd	sl, fp, [sp]
 80032ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032ce:	4661      	mov	r1, ip
 80032d0:	6820      	ldr	r0, [r4, #0]
 80032d2:	f018 fcc9 	bl	801bc68 <siprintf>
	*len = strlen(buf);
 80032d6:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80032da:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80032de:	6818      	ldr	r0, [r3, #0]
 80032e0:	f7fc ffde 	bl	80002a0 <strlen>
 80032e4:	4603      	mov	r3, r0
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80032ec:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	801a      	strh	r2, [r3, #0]

	return 0 ;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	f507 77fe 	add.w	r7, r7, #508	; 0x1fc
 80032fc:	46bd      	mov	sp, r7
 80032fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003302:	bf00      	nop
 8003304:	08020e24 	.word	0x08020e24
 8003308:	200004b4 	.word	0x200004b4
 800330c:	200004b8 	.word	0x200004b8
 8003310:	200004a8 	.word	0x200004a8
 8003314:	200004b0 	.word	0x200004b0

08003318 <http_post_cgi_processor>:


uint8_t http_post_cgi_processor(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len){
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
 8003324:	603b      	str	r3, [r7, #0]

	uint8_t ret;
	len = 0;
 8003326:	2300      	movs	r3, #0
 8003328:	603b      	str	r3, [r7, #0]

	if(strcmp((const char *)uri_name, "settings_mqtt.cgi") == 0){
 800332a:	4921      	ldr	r1, [pc, #132]	; (80033b0 <http_post_cgi_processor+0x98>)
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7fc ff57 	bl	80001e0 <strcmp>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d106      	bne.n	8003346 <http_post_cgi_processor+0x2e>
		param_from_http_to_Q((char *)uri, MQTT);
 8003338:	2100      	movs	r1, #0
 800333a:	68b8      	ldr	r0, [r7, #8]
 800333c:	f7ff fb14 	bl	8002968 <param_from_http_to_Q>
		ret = HTTP_OK;
 8003340:	2301      	movs	r3, #1
 8003342:	75fb      	strb	r3, [r7, #23]
 8003344:	e02f      	b.n	80033a6 <http_post_cgi_processor+0x8e>
	}else if (strcmp((const char *)uri_name, "mb_tcp_settings.cgi") == 0){
 8003346:	491b      	ldr	r1, [pc, #108]	; (80033b4 <http_post_cgi_processor+0x9c>)
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f7fc ff49 	bl	80001e0 <strcmp>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d106      	bne.n	8003362 <http_post_cgi_processor+0x4a>
		param_from_http_to_Q((char *)uri, ModBusTCP);
 8003354:	2102      	movs	r1, #2
 8003356:	68b8      	ldr	r0, [r7, #8]
 8003358:	f7ff fb06 	bl	8002968 <param_from_http_to_Q>
		ret = HTTP_OK;
 800335c:	2301      	movs	r3, #1
 800335e:	75fb      	strb	r3, [r7, #23]
 8003360:	e021      	b.n	80033a6 <http_post_cgi_processor+0x8e>
	}else if (strcmp((const char *)uri_name, "file_upload.cgi") == 0){
 8003362:	4915      	ldr	r1, [pc, #84]	; (80033b8 <http_post_cgi_processor+0xa0>)
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f7fc ff3b 	bl	80001e0 <strcmp>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10d      	bne.n	800338c <http_post_cgi_processor+0x74>
		if (write_to_file((char *)uri, len, buf) < 0 ){
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6839      	ldr	r1, [r7, #0]
 8003374:	68b8      	ldr	r0, [r7, #8]
 8003376:	f7ff fd91 	bl	8002e9c <write_to_file>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	da02      	bge.n	8003386 <http_post_cgi_processor+0x6e>
			ret = HTTP_FAILED;
 8003380:	2300      	movs	r3, #0
 8003382:	75fb      	strb	r3, [r7, #23]
 8003384:	e00f      	b.n	80033a6 <http_post_cgi_processor+0x8e>
		}else{
			ret = HTTP_OK;
 8003386:	2301      	movs	r3, #1
 8003388:	75fb      	strb	r3, [r7, #23]
 800338a:	e00c      	b.n	80033a6 <http_post_cgi_processor+0x8e>
		}
	}else if (strcmp((const char *)uri_name, "settings_resistance.cgi") == 0){
 800338c:	490b      	ldr	r1, [pc, #44]	; (80033bc <http_post_cgi_processor+0xa4>)
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f7fc ff26 	bl	80001e0 <strcmp>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d105      	bne.n	80033a6 <http_post_cgi_processor+0x8e>
		param_from_http_to_Q((char *)uri, PowrSensSett);
 800339a:	2104      	movs	r1, #4
 800339c:	68b8      	ldr	r0, [r7, #8]
 800339e:	f7ff fae3 	bl	8002968 <param_from_http_to_Q>
		ret = HTTP_OK;
 80033a2:	2301      	movs	r3, #1
 80033a4:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 80033a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	08020f08 	.word	0x08020f08
 80033b4:	08020f1c 	.word	0x08020f1c
 80033b8:	08020f30 	.word	0x08020f30
 80033bc:	08020f40 	.word	0x08020f40

080033c0 <http_get_cgi_processor>:

uint8_t http_get_cgi_processor(uint8_t * uri_name, uint8_t * buf, uint16_t * len){
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]

	uint8_t ret = HTTP_FAILED;
 80033cc:	2300      	movs	r3, #0
 80033ce:	75fb      	strb	r3, [r7, #23]

	if(strcmp((const char *)uri_name, "settings_MQTT.cgi") == 0){
 80033d0:	4928      	ldr	r1, [pc, #160]	; (8003474 <http_get_cgi_processor+0xb4>)
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f7fc ff04 	bl	80001e0 <strcmp>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d107      	bne.n	80033ee <http_get_cgi_processor+0x2e>
		param_from_Q_to_JSON((char *)buf, MQTT, len);
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	2100      	movs	r1, #0
 80033e2:	68b8      	ldr	r0, [r7, #8]
 80033e4:	f7ff fc4e 	bl	8002c84 <param_from_Q_to_JSON>
		ret = HTTP_OK;
 80033e8:	2301      	movs	r3, #1
 80033ea:	75fb      	strb	r3, [r7, #23]
 80033ec:	e03d      	b.n	800346a <http_get_cgi_processor+0xaa>
	}else if(strcmp((const char *)uri_name, "test.cgi") == 0){
 80033ee:	4922      	ldr	r1, [pc, #136]	; (8003478 <http_get_cgi_processor+0xb8>)
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f7fc fef5 	bl	80001e0 <strcmp>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10b      	bne.n	8003414 <http_get_cgi_processor+0x54>
		strncpy((const char *)buf, "ok", strlen("ok"));
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	491f      	ldr	r1, [pc, #124]	; (800347c <http_get_cgi_processor+0xbc>)
 8003400:	461a      	mov	r2, r3
 8003402:	460b      	mov	r3, r1
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	8013      	strh	r3, [r2, #0]
		ret = HTTP_OK;
 8003408:	2301      	movs	r3, #1
 800340a:	75fb      	strb	r3, [r7, #23]
		*len = strlen("ok");
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2202      	movs	r2, #2
 8003410:	801a      	strh	r2, [r3, #0]
 8003412:	e02a      	b.n	800346a <http_get_cgi_processor+0xaa>
	}else if(strcmp((const char *)uri_name, "power.cgi") == 0){
 8003414:	491a      	ldr	r1, [pc, #104]	; (8003480 <http_get_cgi_processor+0xc0>)
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f7fc fee2 	bl	80001e0 <strcmp>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d107      	bne.n	8003432 <http_get_cgi_processor+0x72>
		param_from_Q_to_JSON((char *)buf, PowrData, len);
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	2103      	movs	r1, #3
 8003426:	68b8      	ldr	r0, [r7, #8]
 8003428:	f7ff fc2c 	bl	8002c84 <param_from_Q_to_JSON>
		ret = HTTP_OK;
 800342c:	2301      	movs	r3, #1
 800342e:	75fb      	strb	r3, [r7, #23]
 8003430:	e01b      	b.n	800346a <http_get_cgi_processor+0xaa>
	}else if(strcmp((const char *)uri_name, "get_shunt_sett.cgi") == 0){
 8003432:	4914      	ldr	r1, [pc, #80]	; (8003484 <http_get_cgi_processor+0xc4>)
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f7fc fed3 	bl	80001e0 <strcmp>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d107      	bne.n	8003450 <http_get_cgi_processor+0x90>
		param_from_Q_to_JSON((char *)buf, PowrSensSett, len);
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	2104      	movs	r1, #4
 8003444:	68b8      	ldr	r0, [r7, #8]
 8003446:	f7ff fc1d 	bl	8002c84 <param_from_Q_to_JSON>
		ret = HTTP_OK;
 800344a:	2301      	movs	r3, #1
 800344c:	75fb      	strb	r3, [r7, #23]
 800344e:	e00c      	b.n	800346a <http_get_cgi_processor+0xaa>
	}else if(strcmp((const char *)uri_name, "get_all.cgi") == 0){
 8003450:	490d      	ldr	r1, [pc, #52]	; (8003488 <http_get_cgi_processor+0xc8>)
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f7fc fec4 	bl	80001e0 <strcmp>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d105      	bne.n	800346a <http_get_cgi_processor+0xaa>
		read_all_parameters((char *)buf, len);
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	68b8      	ldr	r0, [r7, #8]
 8003462:	f7ff fe9d 	bl	80031a0 <read_all_parameters>
		ret = HTTP_OK;
 8003466:	2301      	movs	r3, #1
 8003468:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 800346a:	7dfb      	ldrb	r3, [r7, #23]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	08020f58 	.word	0x08020f58
 8003478:	08020f6c 	.word	0x08020f6c
 800347c:	08020e20 	.word	0x08020e20
 8003480:	08020f78 	.word	0x08020f78
 8003484:	08020f84 	.word	0x08020f84
 8003488:	08020f98 	.word	0x08020f98

0800348c <func_prototype>:

//need optimaze
char		 			sub_topik_template[] = "biver_%s/+/set";
char					sub_topik[SUBSCR_TOPIK_BUF_LEN];

void func_prototype(void){};
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
 8003490:	bf00      	nop
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
	...

0800349c <init_mqtt_call_mutex>:
void (* set_mutex)(void) 		= &func_prototype;
void (* release_mutex)(void) 	= &func_prototype;
uint8_t (* read_coils)(void)	= &func_prototype;
void (* write_coils)(uint8_t)	= &func_prototype;

void init_mqtt_call_mutex(void (* set_mut), void (* rel_mut)){
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]

	if(set_mut) set_mutex 		= set_mut;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <init_mqtt_call_mutex+0x16>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a07      	ldr	r2, [pc, #28]	; (80034cc <init_mqtt_call_mutex+0x30>)
 80034b0:	6013      	str	r3, [r2, #0]
	if(rel_mut) release_mutex 	= rel_mut;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <init_mqtt_call_mutex+0x22>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	4a05      	ldr	r2, [pc, #20]	; (80034d0 <init_mqtt_call_mutex+0x34>)
 80034bc:	6013      	str	r3, [r2, #0]
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	2000005c 	.word	0x2000005c
 80034d0:	20000060 	.word	0x20000060

080034d4 <mqtt_client_init>:
}



int mqtt_client_init(Ethernet_info_struct* eth_data, MQTT_cred_struct * mqtt_data, char * send_buf, \
		uint16_t send_buf_suze, char * receive_buf, uint16_t receive_buf_len){
 80034d4:	b5b0      	push	{r4, r5, r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af04      	add	r7, sp, #16
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
 80034e0:	807b      	strh	r3, [r7, #2]

	EthernetInfo 		= eth_data;
 80034e2:	4a5e      	ldr	r2, [pc, #376]	; (800365c <mqtt_client_init+0x188>)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6013      	str	r3, [r2, #0]
	MQTT_credentials	= mqtt_data;
 80034e8:	4a5d      	ldr	r2, [pc, #372]	; (8003660 <mqtt_client_init+0x18c>)
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	6013      	str	r3, [r2, #0]
	mqtt_send_buf		= send_buf;
 80034ee:	4a5d      	ldr	r2, [pc, #372]	; (8003664 <mqtt_client_init+0x190>)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6013      	str	r3, [r2, #0]
	mqtt_recv_buf		= receive_buf;
 80034f4:	4a5c      	ldr	r2, [pc, #368]	; (8003668 <mqtt_client_init+0x194>)
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	6013      	str	r3, [r2, #0]
	mqtt_send_buf_len	= send_buf_suze;
 80034fa:	4a5c      	ldr	r2, [pc, #368]	; (800366c <mqtt_client_init+0x198>)
 80034fc:	887b      	ldrh	r3, [r7, #2]
 80034fe:	8013      	strh	r3, [r2, #0]
	mqtt_recv_buf_len	= receive_buf_len;
 8003500:	4a5b      	ldr	r2, [pc, #364]	; (8003670 <mqtt_client_init+0x19c>)
 8003502:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003504:	8013      	strh	r3, [r2, #0]

	sprintf(MAC_ADDR_CHR,"%02X%02X%02X%02X%02X%02X", EthernetInfo->mac[0],EthernetInfo->mac[1],EthernetInfo->mac[2],EthernetInfo->mac[3],EthernetInfo->mac[4],EthernetInfo->mac[5]);
 8003506:	4b55      	ldr	r3, [pc, #340]	; (800365c <mqtt_client_init+0x188>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	78db      	ldrb	r3, [r3, #3]
 800350c:	461c      	mov	r4, r3
 800350e:	4b53      	ldr	r3, [pc, #332]	; (800365c <mqtt_client_init+0x188>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	791b      	ldrb	r3, [r3, #4]
 8003514:	461d      	mov	r5, r3
 8003516:	4b51      	ldr	r3, [pc, #324]	; (800365c <mqtt_client_init+0x188>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	795b      	ldrb	r3, [r3, #5]
 800351c:	461a      	mov	r2, r3
 800351e:	4b4f      	ldr	r3, [pc, #316]	; (800365c <mqtt_client_init+0x188>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	799b      	ldrb	r3, [r3, #6]
 8003524:	4619      	mov	r1, r3
 8003526:	4b4d      	ldr	r3, [pc, #308]	; (800365c <mqtt_client_init+0x188>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	79db      	ldrb	r3, [r3, #7]
 800352c:	4618      	mov	r0, r3
 800352e:	4b4b      	ldr	r3, [pc, #300]	; (800365c <mqtt_client_init+0x188>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	7a1b      	ldrb	r3, [r3, #8]
 8003534:	9303      	str	r3, [sp, #12]
 8003536:	9002      	str	r0, [sp, #8]
 8003538:	9101      	str	r1, [sp, #4]
 800353a:	9200      	str	r2, [sp, #0]
 800353c:	462b      	mov	r3, r5
 800353e:	4622      	mov	r2, r4
 8003540:	494c      	ldr	r1, [pc, #304]	; (8003674 <mqtt_client_init+0x1a0>)
 8003542:	484d      	ldr	r0, [pc, #308]	; (8003678 <mqtt_client_init+0x1a4>)
 8003544:	f018 fb90 	bl	801bc68 <siprintf>
	set_device_id(&MAC_ADDR_CHR);
 8003548:	484b      	ldr	r0, [pc, #300]	; (8003678 <mqtt_client_init+0x1a4>)
 800354a:	f000 fa0d 	bl	8003968 <set_device_id>
	sprintf(IP_ADDR_CHR, "%u.%u.%u.%u", EthernetInfo->ip[0], EthernetInfo->ip[1], EthernetInfo->ip[2], EthernetInfo->ip[3]);
 800354e:	4b43      	ldr	r3, [pc, #268]	; (800365c <mqtt_client_init+0x188>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	7a5b      	ldrb	r3, [r3, #9]
 8003554:	4619      	mov	r1, r3
 8003556:	4b41      	ldr	r3, [pc, #260]	; (800365c <mqtt_client_init+0x188>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	7a9b      	ldrb	r3, [r3, #10]
 800355c:	4618      	mov	r0, r3
 800355e:	4b3f      	ldr	r3, [pc, #252]	; (800365c <mqtt_client_init+0x188>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	7adb      	ldrb	r3, [r3, #11]
 8003564:	461a      	mov	r2, r3
 8003566:	4b3d      	ldr	r3, [pc, #244]	; (800365c <mqtt_client_init+0x188>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	7b1b      	ldrb	r3, [r3, #12]
 800356c:	9301      	str	r3, [sp, #4]
 800356e:	9200      	str	r2, [sp, #0]
 8003570:	4603      	mov	r3, r0
 8003572:	460a      	mov	r2, r1
 8003574:	4941      	ldr	r1, [pc, #260]	; (800367c <mqtt_client_init+0x1a8>)
 8003576:	4842      	ldr	r0, [pc, #264]	; (8003680 <mqtt_client_init+0x1ac>)
 8003578:	f018 fb76 	bl	801bc68 <siprintf>
	set_device_conf_ip(&IP_ADDR_CHR);
 800357c:	4840      	ldr	r0, [pc, #256]	; (8003680 <mqtt_client_init+0x1ac>)
 800357e:	f000 fa15 	bl	80039ac <set_device_conf_ip>

	//strncpy(mqtt_send_buf, MQTT_credentials->uri, MAX_DOMAIN_NAME);
	if ( isValidIPv4(MQTT_credentials->uri)){
 8003582:	4b37      	ldr	r3, [pc, #220]	; (8003660 <mqtt_client_init+0x18c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3302      	adds	r3, #2
 8003588:	4618      	mov	r0, r3
 800358a:	f008 fbeb 	bl	800bd64 <isValidIPv4>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00c      	beq.n	80035ae <mqtt_client_init+0xda>
		sscanf(MQTT_credentials->uri, "%d.%d.%d.%d", &mqtt_server_ip[0], &mqtt_server_ip[1], &mqtt_server_ip[2], &mqtt_server_ip[3]);
 8003594:	4b32      	ldr	r3, [pc, #200]	; (8003660 <mqtt_client_init+0x18c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	1c98      	adds	r0, r3, #2
 800359a:	4b3a      	ldr	r3, [pc, #232]	; (8003684 <mqtt_client_init+0x1b0>)
 800359c:	9301      	str	r3, [sp, #4]
 800359e:	4b3a      	ldr	r3, [pc, #232]	; (8003688 <mqtt_client_init+0x1b4>)
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	4b3a      	ldr	r3, [pc, #232]	; (800368c <mqtt_client_init+0x1b8>)
 80035a4:	4a3a      	ldr	r2, [pc, #232]	; (8003690 <mqtt_client_init+0x1bc>)
 80035a6:	493b      	ldr	r1, [pc, #236]	; (8003694 <mqtt_client_init+0x1c0>)
 80035a8:	f018 fb7e 	bl	801bca8 <siscanf>
 80035ac:	e00d      	b.n	80035ca <mqtt_client_init+0xf6>
	}else if(dns_service_resolve_name(MQTT_credentials->uri, &mqtt_server_ip)== -1){
 80035ae:	4b2c      	ldr	r3, [pc, #176]	; (8003660 <mqtt_client_init+0x18c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3302      	adds	r3, #2
 80035b4:	4936      	ldr	r1, [pc, #216]	; (8003690 <mqtt_client_init+0x1bc>)
 80035b6:	4618      	mov	r0, r3
 80035b8:	f008 fba6 	bl	800bd08 <dns_service_resolve_name>
 80035bc:	4603      	mov	r3, r0
 80035be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c2:	d102      	bne.n	80035ca <mqtt_client_init+0xf6>
		return -1; // DNS resolve error;
 80035c4:	f04f 33ff 	mov.w	r3, #4294967295
 80035c8:	e043      	b.n	8003652 <mqtt_client_init+0x17e>
	}

	mqtt_packet_data.willFlag			= 0;
 80035ca:	4b33      	ldr	r3, [pc, #204]	; (8003698 <mqtt_client_init+0x1c4>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	76da      	strb	r2, [r3, #27]
	mqtt_packet_data.MQTTVersion		= 3;
 80035d0:	4b31      	ldr	r3, [pc, #196]	; (8003698 <mqtt_client_init+0x1c4>)
 80035d2:	2203      	movs	r2, #3
 80035d4:	721a      	strb	r2, [r3, #8]
	mqtt_packet_data.clientID.cstring	= &MAC_ADDR_CHR;
 80035d6:	4b30      	ldr	r3, [pc, #192]	; (8003698 <mqtt_client_init+0x1c4>)
 80035d8:	4a27      	ldr	r2, [pc, #156]	; (8003678 <mqtt_client_init+0x1a4>)
 80035da:	60da      	str	r2, [r3, #12]
	mqtt_packet_data.keepAliveInterval	= 5000;
 80035dc:	4b2e      	ldr	r3, [pc, #184]	; (8003698 <mqtt_client_init+0x1c4>)
 80035de:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e2:	831a      	strh	r2, [r3, #24]
	mqtt_packet_data.cleansession		= 1;
 80035e4:	4b2c      	ldr	r3, [pc, #176]	; (8003698 <mqtt_client_init+0x1c4>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	769a      	strb	r2, [r3, #26]
	mqtt_packet_data.username.cstring 	= &MQTT_credentials->login;
 80035ea:	4b1d      	ldr	r3, [pc, #116]	; (8003660 <mqtt_client_init+0x18c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	3384      	adds	r3, #132	; 0x84
 80035f0:	4a29      	ldr	r2, [pc, #164]	; (8003698 <mqtt_client_init+0x1c4>)
 80035f2:	6413      	str	r3, [r2, #64]	; 0x40
	mqtt_packet_data.password.cstring 	= &MQTT_credentials->pass;
 80035f4:	4b1a      	ldr	r3, [pc, #104]	; (8003660 <mqtt_client_init+0x18c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	33a5      	adds	r3, #165	; 0xa5
 80035fa:	4a27      	ldr	r2, [pc, #156]	; (8003698 <mqtt_client_init+0x1c4>)
 80035fc:	64d3      	str	r3, [r2, #76]	; 0x4c
//	mqtt_server_ip						= MQTT_credentials->ip;
	mqtt_server_port					= (uint16_t) MQTT_credentials->port;
 80035fe:	4b18      	ldr	r3, [pc, #96]	; (8003660 <mqtt_client_init+0x18c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8003606:	4b25      	ldr	r3, [pc, #148]	; (800369c <mqtt_client_init+0x1c8>)
 8003608:	801a      	strh	r2, [r3, #0]

	mqtt_message.id						= 0;
 800360a:	4b25      	ldr	r3, [pc, #148]	; (80036a0 <mqtt_client_init+0x1cc>)
 800360c:	2200      	movs	r2, #0
 800360e:	809a      	strh	r2, [r3, #4]
	mqtt_message.qos					= QOS0;
 8003610:	4b23      	ldr	r3, [pc, #140]	; (80036a0 <mqtt_client_init+0x1cc>)
 8003612:	2200      	movs	r2, #0
 8003614:	701a      	strb	r2, [r3, #0]
	mqtt_message.dup					= 0;
 8003616:	4b22      	ldr	r3, [pc, #136]	; (80036a0 <mqtt_client_init+0x1cc>)
 8003618:	2200      	movs	r2, #0
 800361a:	709a      	strb	r2, [r3, #2]
	mqtt_message.retained				= 0;
 800361c:	4b20      	ldr	r3, [pc, #128]	; (80036a0 <mqtt_client_init+0x1cc>)
 800361e:	2200      	movs	r2, #0
 8003620:	705a      	strb	r2, [r3, #1]

	NewNetwork(&MQTT_network, MQTT_CLIENT_SOCKET);
 8003622:	2105      	movs	r1, #5
 8003624:	481f      	ldr	r0, [pc, #124]	; (80036a4 <mqtt_client_init+0x1d0>)
 8003626:	f009 f937 	bl	800c898 <NewNetwork>
	MQTTClientInit(&MQTT_Client, &MQTT_network, COMMAND_TIMEOUT_MS, mqtt_send_buf, mqtt_send_buf_len, mqtt_recv_buf, mqtt_recv_buf_len);
 800362a:	4b0e      	ldr	r3, [pc, #56]	; (8003664 <mqtt_client_init+0x190>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	4b0f      	ldr	r3, [pc, #60]	; (800366c <mqtt_client_init+0x198>)
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <mqtt_client_init+0x194>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	490d      	ldr	r1, [pc, #52]	; (8003670 <mqtt_client_init+0x19c>)
 800363a:	8809      	ldrh	r1, [r1, #0]
 800363c:	9102      	str	r1, [sp, #8]
 800363e:	9301      	str	r3, [sp, #4]
 8003640:	9000      	str	r0, [sp, #0]
 8003642:	4613      	mov	r3, r2
 8003644:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003648:	4916      	ldr	r1, [pc, #88]	; (80036a4 <mqtt_client_init+0x1d0>)
 800364a:	4817      	ldr	r0, [pc, #92]	; (80036a8 <mqtt_client_init+0x1d4>)
 800364c:	f008 fc74 	bl	800bf38 <MQTTClientInit>

	return 0;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bdb0      	pop	{r4, r5, r7, pc}
 800365a:	bf00      	nop
 800365c:	200004c8 	.word	0x200004c8
 8003660:	200004c4 	.word	0x200004c4
 8003664:	200004f4 	.word	0x200004f4
 8003668:	200004f0 	.word	0x200004f0
 800366c:	200007d2 	.word	0x200007d2
 8003670:	200007d0 	.word	0x200007d0
 8003674:	08020fa4 	.word	0x08020fa4
 8003678:	200004cc 	.word	0x200004cc
 800367c:	08020fc0 	.word	0x08020fc0
 8003680:	200004dc 	.word	0x200004dc
 8003684:	200007d7 	.word	0x200007d7
 8003688:	200007d6 	.word	0x200007d6
 800368c:	200007d5 	.word	0x200007d5
 8003690:	200007d4 	.word	0x200007d4
 8003694:	08020fcc 	.word	0x08020fcc
 8003698:	20000004 	.word	0x20000004
 800369c:	200007d8 	.word	0x200007d8
 80036a0:	20000848 	.word	0x20000848
 80036a4:	200007dc 	.word	0x200007dc
 80036a8:	200007ec 	.word	0x200007ec

080036ac <mqtt_client_connect>:


int16_t mqtt_client_connect(void){
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0

	int16_t result;

	set_mutex();
 80036b2:	4b1f      	ldr	r3, [pc, #124]	; (8003730 <mqtt_client_connect+0x84>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4798      	blx	r3
	result = ConnectNetwork(&MQTT_network, mqtt_server_ip, mqtt_server_port);
 80036b8:	4b1e      	ldr	r3, [pc, #120]	; (8003734 <mqtt_client_connect+0x88>)
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	491e      	ldr	r1, [pc, #120]	; (8003738 <mqtt_client_connect+0x8c>)
 80036c0:	481e      	ldr	r0, [pc, #120]	; (800373c <mqtt_client_connect+0x90>)
 80036c2:	f009 f966 	bl	800c992 <ConnectNetwork>
 80036c6:	4603      	mov	r3, r0
 80036c8:	80fb      	strh	r3, [r7, #6]
	release_mutex();
 80036ca:	4b1d      	ldr	r3, [pc, #116]	; (8003740 <mqtt_client_connect+0x94>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4798      	blx	r3
	if (result != 1) {
 80036d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d010      	beq.n	80036fa <mqtt_client_connect+0x4e>
		set_mutex();
 80036d8:	4b15      	ldr	r3, [pc, #84]	; (8003730 <mqtt_client_connect+0x84>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4798      	blx	r3
		//disconnect(MQTT_network.my_socket);
		close(MQTT_network.my_socket);
 80036de:	4b17      	ldr	r3, [pc, #92]	; (800373c <mqtt_client_connect+0x90>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	4618      	mov	r0, r3
 80036e6:	f004 fd6f 	bl	80081c8 <close>
		release_mutex();
 80036ea:	4b15      	ldr	r3, [pc, #84]	; (8003740 <mqtt_client_connect+0x94>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4798      	blx	r3
		return result - 10;    // 1 means SOCK_OK;
 80036f0:	88fb      	ldrh	r3, [r7, #6]
 80036f2:	3b0a      	subs	r3, #10
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	b21b      	sxth	r3, r3
 80036f8:	e016      	b.n	8003728 <mqtt_client_connect+0x7c>
	}
	set_mutex();
 80036fa:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <mqtt_client_connect+0x84>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4798      	blx	r3
	result = MQTTConnect(&MQTT_Client, &mqtt_packet_data);
 8003700:	4910      	ldr	r1, [pc, #64]	; (8003744 <mqtt_client_connect+0x98>)
 8003702:	4811      	ldr	r0, [pc, #68]	; (8003748 <mqtt_client_connect+0x9c>)
 8003704:	f008 ff1e 	bl	800c544 <MQTTConnect>
 8003708:	4603      	mov	r3, r0
 800370a:	80fb      	strh	r3, [r7, #6]
	release_mutex();
 800370c:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <mqtt_client_connect+0x94>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4798      	blx	r3
	if (result != SUCCESSS) return result - 20;
 8003712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d004      	beq.n	8003724 <mqtt_client_connect+0x78>
 800371a:	88fb      	ldrh	r3, [r7, #6]
 800371c:	3b14      	subs	r3, #20
 800371e:	b29b      	uxth	r3, r3
 8003720:	b21b      	sxth	r3, r3
 8003722:	e001      	b.n	8003728 <mqtt_client_connect+0x7c>
	return result; // if returned value < 0 then means error
 8003724:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	2000005c 	.word	0x2000005c
 8003734:	200007d8 	.word	0x200007d8
 8003738:	200007d4 	.word	0x200007d4
 800373c:	200007dc 	.word	0x200007dc
 8003740:	20000060 	.word	0x20000060
 8003744:	20000004 	.word	0x20000004
 8003748:	200007ec 	.word	0x200007ec

0800374c <mqtt_client_reg_dev_on_home_assist>:

int8_t mqtt_client_reg_dev_on_home_assist(void){
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0

	uint8_t i;
	int8_t result;
//------------------------------REG ENERGY SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 8003752:	2280      	movs	r2, #128	; 0x80
 8003754:	2100      	movs	r1, #0
 8003756:	487e      	ldr	r0, [pc, #504]	; (8003950 <mqtt_client_reg_dev_on_home_assist+0x204>)
 8003758:	f018 fbd6 	bl	801bf08 <memset>
		get_config_topik_string(buf_topik, ENERGY_SENSOR_TOPIK, 0);
 800375c:	2200      	movs	r2, #0
 800375e:	2103      	movs	r1, #3
 8003760:	487b      	ldr	r0, [pc, #492]	; (8003950 <mqtt_client_reg_dev_on_home_assist+0x204>)
 8003762:	f000 f943 	bl	80039ec <get_config_topik_string>
		get_config_payload_string(buf_payload, ENERGY_SENSOR_PAYLOAD, 0);
 8003766:	2200      	movs	r2, #0
 8003768:	2103      	movs	r1, #3
 800376a:	487a      	ldr	r0, [pc, #488]	; (8003954 <mqtt_client_reg_dev_on_home_assist+0x208>)
 800376c:	f000 f9de 	bl	8003b2c <get_config_payload_string>
		mqtt_message.payloadlen = strlen(buf_payload);
 8003770:	4878      	ldr	r0, [pc, #480]	; (8003954 <mqtt_client_reg_dev_on_home_assist+0x208>)
 8003772:	f7fc fd95 	bl	80002a0 <strlen>
 8003776:	4603      	mov	r3, r0
 8003778:	4a77      	ldr	r2, [pc, #476]	; (8003958 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 800377a:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload = buf_payload;
 800377c:	4b76      	ldr	r3, [pc, #472]	; (8003958 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 800377e:	4a75      	ldr	r2, [pc, #468]	; (8003954 <mqtt_client_reg_dev_on_home_assist+0x208>)
 8003780:	609a      	str	r2, [r3, #8]
		set_mutex();
 8003782:	4b76      	ldr	r3, [pc, #472]	; (800395c <mqtt_client_reg_dev_on_home_assist+0x210>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8003788:	4a73      	ldr	r2, [pc, #460]	; (8003958 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 800378a:	4971      	ldr	r1, [pc, #452]	; (8003950 <mqtt_client_reg_dev_on_home_assist+0x204>)
 800378c:	4874      	ldr	r0, [pc, #464]	; (8003960 <mqtt_client_reg_dev_on_home_assist+0x214>)
 800378e:	f008 ff5f 	bl	800c650 <MQTTPublish>
 8003792:	4603      	mov	r3, r0
 8003794:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 8003796:	4b73      	ldr	r3, [pc, #460]	; (8003964 <mqtt_client_reg_dev_on_home_assist+0x218>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 800379c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d002      	beq.n	80037aa <mqtt_client_reg_dev_on_home_assist+0x5e>
 80037a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a8:	e0cd      	b.n	8003946 <mqtt_client_reg_dev_on_home_assist+0x1fa>
		mqtt_message.id++;
 80037aa:	4b6b      	ldr	r3, [pc, #428]	; (8003958 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 80037ac:	889b      	ldrh	r3, [r3, #4]
 80037ae:	3301      	adds	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	4b69      	ldr	r3, [pc, #420]	; (8003958 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 80037b4:	809a      	strh	r2, [r3, #4]
//------------------------------REG ENERGY SENSOR-------------------------------
//------------------------------REG VOLTAGE SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 80037b6:	2280      	movs	r2, #128	; 0x80
 80037b8:	2100      	movs	r1, #0
 80037ba:	4865      	ldr	r0, [pc, #404]	; (8003950 <mqtt_client_reg_dev_on_home_assist+0x204>)
 80037bc:	f018 fba4 	bl	801bf08 <memset>
		get_config_topik_string(buf_topik, VOLTAGE_SENSOR_TOPIK, 0);
 80037c0:	2200      	movs	r2, #0
 80037c2:	2105      	movs	r1, #5
 80037c4:	4862      	ldr	r0, [pc, #392]	; (8003950 <mqtt_client_reg_dev_on_home_assist+0x204>)
 80037c6:	f000 f911 	bl	80039ec <get_config_topik_string>
		get_config_payload_string(buf_payload, VOLTAGE_SENSOR_PAYLOAD, 0);
 80037ca:	2200      	movs	r2, #0
 80037cc:	2105      	movs	r1, #5
 80037ce:	4861      	ldr	r0, [pc, #388]	; (8003954 <mqtt_client_reg_dev_on_home_assist+0x208>)
 80037d0:	f000 f9ac 	bl	8003b2c <get_config_payload_string>
		mqtt_message.payloadlen = strlen(buf_payload);
 80037d4:	485f      	ldr	r0, [pc, #380]	; (8003954 <mqtt_client_reg_dev_on_home_assist+0x208>)
 80037d6:	f7fc fd63 	bl	80002a0 <strlen>
 80037da:	4603      	mov	r3, r0
 80037dc:	4a5e      	ldr	r2, [pc, #376]	; (8003958 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 80037de:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload = buf_payload;
 80037e0:	4b5d      	ldr	r3, [pc, #372]	; (8003958 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 80037e2:	4a5c      	ldr	r2, [pc, #368]	; (8003954 <mqtt_client_reg_dev_on_home_assist+0x208>)
 80037e4:	609a      	str	r2, [r3, #8]
		set_mutex();
 80037e6:	4b5d      	ldr	r3, [pc, #372]	; (800395c <mqtt_client_reg_dev_on_home_assist+0x210>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 80037ec:	4a5a      	ldr	r2, [pc, #360]	; (8003958 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 80037ee:	4958      	ldr	r1, [pc, #352]	; (8003950 <mqtt_client_reg_dev_on_home_assist+0x204>)
 80037f0:	485b      	ldr	r0, [pc, #364]	; (8003960 <mqtt_client_reg_dev_on_home_assist+0x214>)
 80037f2:	f008 ff2d 	bl	800c650 <MQTTPublish>
 80037f6:	4603      	mov	r3, r0
 80037f8:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 80037fa:	4b5a      	ldr	r3, [pc, #360]	; (8003964 <mqtt_client_reg_dev_on_home_assist+0x218>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 8003800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <mqtt_client_reg_dev_on_home_assist+0xc2>
 8003808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380c:	e09b      	b.n	8003946 <mqtt_client_reg_dev_on_home_assist+0x1fa>
		mqtt_message.id++;
 800380e:	4b52      	ldr	r3, [pc, #328]	; (8003958 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8003810:	889b      	ldrh	r3, [r3, #4]
 8003812:	3301      	adds	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	4b50      	ldr	r3, [pc, #320]	; (8003958 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8003818:	809a      	strh	r2, [r3, #4]
//------------------------------REG VOLTAGE SENSOR-------------------------------
//------------------------------REG POWER SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 800381a:	2280      	movs	r2, #128	; 0x80
 800381c:	2100      	movs	r1, #0
 800381e:	484c      	ldr	r0, [pc, #304]	; (8003950 <mqtt_client_reg_dev_on_home_assist+0x204>)
 8003820:	f018 fb72 	bl	801bf08 <memset>
		get_config_topik_string(buf_topik, POWER_SENSOR_TOPIK, 0);
 8003824:	2200      	movs	r2, #0
 8003826:	2104      	movs	r1, #4
 8003828:	4849      	ldr	r0, [pc, #292]	; (8003950 <mqtt_client_reg_dev_on_home_assist+0x204>)
 800382a:	f000 f8df 	bl	80039ec <get_config_topik_string>
		get_config_payload_string(buf_payload, POWER_SENSOR_PAYLOAD, 0);
 800382e:	2200      	movs	r2, #0
 8003830:	2104      	movs	r1, #4
 8003832:	4848      	ldr	r0, [pc, #288]	; (8003954 <mqtt_client_reg_dev_on_home_assist+0x208>)
 8003834:	f000 f97a 	bl	8003b2c <get_config_payload_string>
		mqtt_message.payloadlen = strlen(buf_payload);
 8003838:	4846      	ldr	r0, [pc, #280]	; (8003954 <mqtt_client_reg_dev_on_home_assist+0x208>)
 800383a:	f7fc fd31 	bl	80002a0 <strlen>
 800383e:	4603      	mov	r3, r0
 8003840:	4a45      	ldr	r2, [pc, #276]	; (8003958 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8003842:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload = buf_payload;
 8003844:	4b44      	ldr	r3, [pc, #272]	; (8003958 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8003846:	4a43      	ldr	r2, [pc, #268]	; (8003954 <mqtt_client_reg_dev_on_home_assist+0x208>)
 8003848:	609a      	str	r2, [r3, #8]
		set_mutex();
 800384a:	4b44      	ldr	r3, [pc, #272]	; (800395c <mqtt_client_reg_dev_on_home_assist+0x210>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8003850:	4a41      	ldr	r2, [pc, #260]	; (8003958 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8003852:	493f      	ldr	r1, [pc, #252]	; (8003950 <mqtt_client_reg_dev_on_home_assist+0x204>)
 8003854:	4842      	ldr	r0, [pc, #264]	; (8003960 <mqtt_client_reg_dev_on_home_assist+0x214>)
 8003856:	f008 fefb 	bl	800c650 <MQTTPublish>
 800385a:	4603      	mov	r3, r0
 800385c:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 800385e:	4b41      	ldr	r3, [pc, #260]	; (8003964 <mqtt_client_reg_dev_on_home_assist+0x218>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 8003864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <mqtt_client_reg_dev_on_home_assist+0x126>
 800386c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003870:	e069      	b.n	8003946 <mqtt_client_reg_dev_on_home_assist+0x1fa>
		mqtt_message.id++;
 8003872:	4b39      	ldr	r3, [pc, #228]	; (8003958 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8003874:	889b      	ldrh	r3, [r3, #4]
 8003876:	3301      	adds	r3, #1
 8003878:	b29a      	uxth	r2, r3
 800387a:	4b37      	ldr	r3, [pc, #220]	; (8003958 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 800387c:	809a      	strh	r2, [r3, #4]

//------------------------------REG POWER SENSOR-------------------------------
//------------------------------REG POWER FACTOR SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 800387e:	2280      	movs	r2, #128	; 0x80
 8003880:	2100      	movs	r1, #0
 8003882:	4833      	ldr	r0, [pc, #204]	; (8003950 <mqtt_client_reg_dev_on_home_assist+0x204>)
 8003884:	f018 fb40 	bl	801bf08 <memset>
		get_config_topik_string(buf_topik, POWER_FACTOR_SENSOR_TOPIK, 0);
 8003888:	2200      	movs	r2, #0
 800388a:	2106      	movs	r1, #6
 800388c:	4830      	ldr	r0, [pc, #192]	; (8003950 <mqtt_client_reg_dev_on_home_assist+0x204>)
 800388e:	f000 f8ad 	bl	80039ec <get_config_topik_string>
		get_config_payload_string(buf_payload, POWER_FACTOR_SENSOR_PAYLOAD, 0);
 8003892:	2200      	movs	r2, #0
 8003894:	2106      	movs	r1, #6
 8003896:	482f      	ldr	r0, [pc, #188]	; (8003954 <mqtt_client_reg_dev_on_home_assist+0x208>)
 8003898:	f000 f948 	bl	8003b2c <get_config_payload_string>
		mqtt_message.payloadlen = strlen(buf_payload);
 800389c:	482d      	ldr	r0, [pc, #180]	; (8003954 <mqtt_client_reg_dev_on_home_assist+0x208>)
 800389e:	f7fc fcff 	bl	80002a0 <strlen>
 80038a2:	4603      	mov	r3, r0
 80038a4:	4a2c      	ldr	r2, [pc, #176]	; (8003958 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 80038a6:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload = buf_payload;
 80038a8:	4b2b      	ldr	r3, [pc, #172]	; (8003958 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 80038aa:	4a2a      	ldr	r2, [pc, #168]	; (8003954 <mqtt_client_reg_dev_on_home_assist+0x208>)
 80038ac:	609a      	str	r2, [r3, #8]
		set_mutex();
 80038ae:	4b2b      	ldr	r3, [pc, #172]	; (800395c <mqtt_client_reg_dev_on_home_assist+0x210>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 80038b4:	4a28      	ldr	r2, [pc, #160]	; (8003958 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 80038b6:	4926      	ldr	r1, [pc, #152]	; (8003950 <mqtt_client_reg_dev_on_home_assist+0x204>)
 80038b8:	4829      	ldr	r0, [pc, #164]	; (8003960 <mqtt_client_reg_dev_on_home_assist+0x214>)
 80038ba:	f008 fec9 	bl	800c650 <MQTTPublish>
 80038be:	4603      	mov	r3, r0
 80038c0:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 80038c2:	4b28      	ldr	r3, [pc, #160]	; (8003964 <mqtt_client_reg_dev_on_home_assist+0x218>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 80038c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d002      	beq.n	80038d6 <mqtt_client_reg_dev_on_home_assist+0x18a>
 80038d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d4:	e037      	b.n	8003946 <mqtt_client_reg_dev_on_home_assist+0x1fa>
		mqtt_message.id++;
 80038d6:	4b20      	ldr	r3, [pc, #128]	; (8003958 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 80038d8:	889b      	ldrh	r3, [r3, #4]
 80038da:	3301      	adds	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	4b1e      	ldr	r3, [pc, #120]	; (8003958 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 80038e0:	809a      	strh	r2, [r3, #4]

//------------------------------REG POWER FACTOR SENSOR-------------------------------
//------------------------------REG CURRENT SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 80038e2:	2280      	movs	r2, #128	; 0x80
 80038e4:	2100      	movs	r1, #0
 80038e6:	481a      	ldr	r0, [pc, #104]	; (8003950 <mqtt_client_reg_dev_on_home_assist+0x204>)
 80038e8:	f018 fb0e 	bl	801bf08 <memset>
		get_config_topik_string(buf_topik, CURRENT_SENSOR_TOPIK, 0);
 80038ec:	2200      	movs	r2, #0
 80038ee:	2107      	movs	r1, #7
 80038f0:	4817      	ldr	r0, [pc, #92]	; (8003950 <mqtt_client_reg_dev_on_home_assist+0x204>)
 80038f2:	f000 f87b 	bl	80039ec <get_config_topik_string>
		get_config_payload_string(buf_payload, CURRENT_SENSOR_PAYLOAD, 0);
 80038f6:	2200      	movs	r2, #0
 80038f8:	2107      	movs	r1, #7
 80038fa:	4816      	ldr	r0, [pc, #88]	; (8003954 <mqtt_client_reg_dev_on_home_assist+0x208>)
 80038fc:	f000 f916 	bl	8003b2c <get_config_payload_string>
		mqtt_message.payloadlen = strlen(buf_payload);
 8003900:	4814      	ldr	r0, [pc, #80]	; (8003954 <mqtt_client_reg_dev_on_home_assist+0x208>)
 8003902:	f7fc fccd 	bl	80002a0 <strlen>
 8003906:	4603      	mov	r3, r0
 8003908:	4a13      	ldr	r2, [pc, #76]	; (8003958 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 800390a:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload = buf_payload;
 800390c:	4b12      	ldr	r3, [pc, #72]	; (8003958 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 800390e:	4a11      	ldr	r2, [pc, #68]	; (8003954 <mqtt_client_reg_dev_on_home_assist+0x208>)
 8003910:	609a      	str	r2, [r3, #8]
		set_mutex();
 8003912:	4b12      	ldr	r3, [pc, #72]	; (800395c <mqtt_client_reg_dev_on_home_assist+0x210>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8003918:	4a0f      	ldr	r2, [pc, #60]	; (8003958 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 800391a:	490d      	ldr	r1, [pc, #52]	; (8003950 <mqtt_client_reg_dev_on_home_assist+0x204>)
 800391c:	4810      	ldr	r0, [pc, #64]	; (8003960 <mqtt_client_reg_dev_on_home_assist+0x214>)
 800391e:	f008 fe97 	bl	800c650 <MQTTPublish>
 8003922:	4603      	mov	r3, r0
 8003924:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 8003926:	4b0f      	ldr	r3, [pc, #60]	; (8003964 <mqtt_client_reg_dev_on_home_assist+0x218>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 800392c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <mqtt_client_reg_dev_on_home_assist+0x1ee>
 8003934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003938:	e005      	b.n	8003946 <mqtt_client_reg_dev_on_home_assist+0x1fa>
		mqtt_message.id++;
 800393a:	4b07      	ldr	r3, [pc, #28]	; (8003958 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 800393c:	889b      	ldrh	r3, [r3, #4]
 800393e:	3301      	adds	r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	4b05      	ldr	r3, [pc, #20]	; (8003958 <mqtt_client_reg_dev_on_home_assist+0x20c>)
 8003944:	809a      	strh	r2, [r3, #4]
		if (result != SUCCESSS) return result;
		mqtt_message.id++;
	}
	return result;// if all Ok, return SUCCESSS. SUCCESSS = 0;
	*/
}
 8003946:	4618      	mov	r0, r3
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	200004f8 	.word	0x200004f8
 8003954:	20000578 	.word	0x20000578
 8003958:	20000848 	.word	0x20000848
 800395c:	2000005c 	.word	0x2000005c
 8003960:	200007ec 	.word	0x200007ec
 8003964:	20000060 	.word	0x20000060

08003968 <set_device_id>:
char switch_status_topik_temp[] = {"%s_%s/switches"	};

unsigned char unical_id[DEV_UID_LEN] = {'\0'};
unsigned char dev_conf_ip[IP_v4_LEN] = {'\0'};

int set_device_id(unsigned char * dev_id){
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
	uint8_t cpy_len = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	73fb      	strb	r3, [r7, #15]
	if (strlen(dev_id) >= DEV_UID_LEN ){
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7fc fc93 	bl	80002a0 <strlen>
 800397a:	4603      	mov	r3, r0
 800397c:	2b0d      	cmp	r3, #13
 800397e:	d902      	bls.n	8003986 <set_device_id+0x1e>
		cpy_len = DEV_UID_LEN;
 8003980:	230e      	movs	r3, #14
 8003982:	73fb      	strb	r3, [r7, #15]
 8003984:	e004      	b.n	8003990 <set_device_id+0x28>
	}else{
		cpy_len = strlen(dev_id);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fc fc8a 	bl	80002a0 <strlen>
 800398c:	4603      	mov	r3, r0
 800398e:	73fb      	strb	r3, [r7, #15]
	}
	strncpy(unical_id, dev_id, cpy_len);
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	461a      	mov	r2, r3
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	4804      	ldr	r0, [pc, #16]	; (80039a8 <set_device_id+0x40>)
 8003998:	f018 fb10 	bl	801bfbc <strncpy>
	return 0;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000858 	.word	0x20000858

080039ac <set_device_conf_ip>:

int set_device_conf_ip(unsigned char * chr_ip){
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]

	strcpy(dev_conf_ip, "\0");
 80039b4:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <set_device_conf_ip+0x3c>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	701a      	strb	r2, [r3, #0]
	if(strlen(chr_ip) <= IP_v4_LEN){
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7fc fc70 	bl	80002a0 <strlen>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b12      	cmp	r3, #18
 80039c4:	d80a      	bhi.n	80039dc <set_device_conf_ip+0x30>
		strncpy(dev_conf_ip, chr_ip, strlen(chr_ip));
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7fc fc6a 	bl	80002a0 <strlen>
 80039cc:	4603      	mov	r3, r0
 80039ce:	461a      	mov	r2, r3
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	4805      	ldr	r0, [pc, #20]	; (80039e8 <set_device_conf_ip+0x3c>)
 80039d4:	f018 faf2 	bl	801bfbc <strncpy>
		return 0;
 80039d8:	2300      	movs	r3, #0
 80039da:	e001      	b.n	80039e0 <set_device_conf_ip+0x34>
	}
	return -1;
 80039dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	20000868 	.word	0x20000868

080039ec <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint8_t topik_type, uint8_t obj_number){
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af04      	add	r7, sp, #16
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	70fb      	strb	r3, [r7, #3]
 80039f8:	4613      	mov	r3, r2
 80039fa:	70bb      	strb	r3, [r7, #2]

	strcpy(buff, '\0');
 80039fc:	2100      	movs	r1, #0
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f018 fc4f 	bl	801c2a2 <strcpy>
	switch (topik_type) {
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	2b06      	cmp	r3, #6
 8003a0a:	d86c      	bhi.n	8003ae6 <get_config_topik_string+0xfa>
 8003a0c:	a201      	add	r2, pc, #4	; (adr r2, 8003a14 <get_config_topik_string+0x28>)
 8003a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a12:	bf00      	nop
 8003a14:	08003a31 	.word	0x08003a31
 8003a18:	08003a4b 	.word	0x08003a4b
 8003a1c:	08003a65 	.word	0x08003a65
 8003a20:	08003a99 	.word	0x08003a99
 8003a24:	08003a7f 	.word	0x08003a7f
 8003a28:	08003ab3 	.word	0x08003ab3
 8003a2c:	08003acd 	.word	0x08003acd
		case INPUT_TOPIK:
			sprintf(buff, config_topik_temlate, home_assistant_prefix, bin_sens, unical_id, input, obj_number);
 8003a30:	78bb      	ldrb	r3, [r7, #2]
 8003a32:	9302      	str	r3, [sp, #8]
 8003a34:	4b2f      	ldr	r3, [pc, #188]	; (8003af4 <get_config_topik_string+0x108>)
 8003a36:	9301      	str	r3, [sp, #4]
 8003a38:	4b2f      	ldr	r3, [pc, #188]	; (8003af8 <get_config_topik_string+0x10c>)
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	4b2f      	ldr	r3, [pc, #188]	; (8003afc <get_config_topik_string+0x110>)
 8003a3e:	4a30      	ldr	r2, [pc, #192]	; (8003b00 <get_config_topik_string+0x114>)
 8003a40:	4930      	ldr	r1, [pc, #192]	; (8003b04 <get_config_topik_string+0x118>)
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f018 f910 	bl	801bc68 <siprintf>
			break;
 8003a48:	e04e      	b.n	8003ae8 <get_config_topik_string+0xfc>

		case OUTPUT_TOPIK:
			sprintf(buff, config_topik_temlate, home_assistant_prefix, switch_sens, unical_id, switch_sens, obj_number);
 8003a4a:	78bb      	ldrb	r3, [r7, #2]
 8003a4c:	9302      	str	r3, [sp, #8]
 8003a4e:	4b2e      	ldr	r3, [pc, #184]	; (8003b08 <get_config_topik_string+0x11c>)
 8003a50:	9301      	str	r3, [sp, #4]
 8003a52:	4b29      	ldr	r3, [pc, #164]	; (8003af8 <get_config_topik_string+0x10c>)
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	4b2c      	ldr	r3, [pc, #176]	; (8003b08 <get_config_topik_string+0x11c>)
 8003a58:	4a29      	ldr	r2, [pc, #164]	; (8003b00 <get_config_topik_string+0x114>)
 8003a5a:	492a      	ldr	r1, [pc, #168]	; (8003b04 <get_config_topik_string+0x118>)
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f018 f903 	bl	801bc68 <siprintf>
			break;
 8003a62:	e041      	b.n	8003ae8 <get_config_topik_string+0xfc>

		case ENERGY_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_temlate, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy);
 8003a64:	4b29      	ldr	r3, [pc, #164]	; (8003b0c <get_config_topik_string+0x120>)
 8003a66:	9302      	str	r3, [sp, #8]
 8003a68:	4b23      	ldr	r3, [pc, #140]	; (8003af8 <get_config_topik_string+0x10c>)
 8003a6a:	9301      	str	r3, [sp, #4]
 8003a6c:	4b28      	ldr	r3, [pc, #160]	; (8003b10 <get_config_topik_string+0x124>)
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	4b28      	ldr	r3, [pc, #160]	; (8003b14 <get_config_topik_string+0x128>)
 8003a72:	4a23      	ldr	r2, [pc, #140]	; (8003b00 <get_config_topik_string+0x114>)
 8003a74:	4928      	ldr	r1, [pc, #160]	; (8003b18 <get_config_topik_string+0x12c>)
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f018 f8f6 	bl	801bc68 <siprintf>
			break;
 8003a7c:	e034      	b.n	8003ae8 <get_config_topik_string+0xfc>
		case VOLTAGE_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_temlate, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage);
 8003a7e:	4b27      	ldr	r3, [pc, #156]	; (8003b1c <get_config_topik_string+0x130>)
 8003a80:	9302      	str	r3, [sp, #8]
 8003a82:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <get_config_topik_string+0x10c>)
 8003a84:	9301      	str	r3, [sp, #4]
 8003a86:	4b22      	ldr	r3, [pc, #136]	; (8003b10 <get_config_topik_string+0x124>)
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	4b22      	ldr	r3, [pc, #136]	; (8003b14 <get_config_topik_string+0x128>)
 8003a8c:	4a1c      	ldr	r2, [pc, #112]	; (8003b00 <get_config_topik_string+0x114>)
 8003a8e:	4922      	ldr	r1, [pc, #136]	; (8003b18 <get_config_topik_string+0x12c>)
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f018 f8e9 	bl	801bc68 <siprintf>
			break;
 8003a96:	e027      	b.n	8003ae8 <get_config_topik_string+0xfc>
		case POWER_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_temlate, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power);
 8003a98:	4b21      	ldr	r3, [pc, #132]	; (8003b20 <get_config_topik_string+0x134>)
 8003a9a:	9302      	str	r3, [sp, #8]
 8003a9c:	4b16      	ldr	r3, [pc, #88]	; (8003af8 <get_config_topik_string+0x10c>)
 8003a9e:	9301      	str	r3, [sp, #4]
 8003aa0:	4b1b      	ldr	r3, [pc, #108]	; (8003b10 <get_config_topik_string+0x124>)
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	4b1b      	ldr	r3, [pc, #108]	; (8003b14 <get_config_topik_string+0x128>)
 8003aa6:	4a16      	ldr	r2, [pc, #88]	; (8003b00 <get_config_topik_string+0x114>)
 8003aa8:	491b      	ldr	r1, [pc, #108]	; (8003b18 <get_config_topik_string+0x12c>)
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f018 f8dc 	bl	801bc68 <siprintf>
			break;
 8003ab0:	e01a      	b.n	8003ae8 <get_config_topik_string+0xfc>
		case POWER_FACTOR_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_temlate, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor);
 8003ab2:	4b1c      	ldr	r3, [pc, #112]	; (8003b24 <get_config_topik_string+0x138>)
 8003ab4:	9302      	str	r3, [sp, #8]
 8003ab6:	4b10      	ldr	r3, [pc, #64]	; (8003af8 <get_config_topik_string+0x10c>)
 8003ab8:	9301      	str	r3, [sp, #4]
 8003aba:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <get_config_topik_string+0x124>)
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	4b15      	ldr	r3, [pc, #84]	; (8003b14 <get_config_topik_string+0x128>)
 8003ac0:	4a0f      	ldr	r2, [pc, #60]	; (8003b00 <get_config_topik_string+0x114>)
 8003ac2:	4915      	ldr	r1, [pc, #84]	; (8003b18 <get_config_topik_string+0x12c>)
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f018 f8cf 	bl	801bc68 <siprintf>
			break;
 8003aca:	e00d      	b.n	8003ae8 <get_config_topik_string+0xfc>
		case CURRENT_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_temlate, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current);
 8003acc:	4b16      	ldr	r3, [pc, #88]	; (8003b28 <get_config_topik_string+0x13c>)
 8003ace:	9302      	str	r3, [sp, #8]
 8003ad0:	4b09      	ldr	r3, [pc, #36]	; (8003af8 <get_config_topik_string+0x10c>)
 8003ad2:	9301      	str	r3, [sp, #4]
 8003ad4:	4b0e      	ldr	r3, [pc, #56]	; (8003b10 <get_config_topik_string+0x124>)
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	4b0e      	ldr	r3, [pc, #56]	; (8003b14 <get_config_topik_string+0x128>)
 8003ada:	4a09      	ldr	r2, [pc, #36]	; (8003b00 <get_config_topik_string+0x114>)
 8003adc:	490e      	ldr	r1, [pc, #56]	; (8003b18 <get_config_topik_string+0x12c>)
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f018 f8c2 	bl	801bc68 <siprintf>
			break;
 8003ae4:	e000      	b.n	8003ae8 <get_config_topik_string+0xfc>
		default:
			break;
 8003ae6:	bf00      	nop
	}


	return 0;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	2000008c 	.word	0x2000008c
 8003af8:	20000858 	.word	0x20000858
 8003afc:	20000074 	.word	0x20000074
 8003b00:	20000064 	.word	0x20000064
 8003b04:	08022500 	.word	0x08022500
 8003b08:	20000084 	.word	0x20000084
 8003b0c:	08021008 	.word	0x08021008
 8003b10:	08021010 	.word	0x08021010
 8003b14:	08020fe8 	.word	0x08020fe8
 8003b18:	08020ff0 	.word	0x08020ff0
 8003b1c:	08021018 	.word	0x08021018
 8003b20:	08021020 	.word	0x08021020
 8003b24:	08021028 	.word	0x08021028
 8003b28:	08021038 	.word	0x08021038

08003b2c <get_config_payload_string>:

int get_config_payload_string( char * payload, uint8_t payload_type, uint8_t obj_number){
 8003b2c:	b590      	push	{r4, r7, lr}
 8003b2e:	b097      	sub	sp, #92	; 0x5c
 8003b30:	af12      	add	r7, sp, #72	; 0x48
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	70fb      	strb	r3, [r7, #3]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	70bb      	strb	r3, [r7, #2]

	uint8_t len = 0;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	73fb      	strb	r3, [r7, #15]
	strcpy(payload, "\0");
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]

	switch (payload_type) {
 8003b46:	78fb      	ldrb	r3, [r7, #3]
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	2b06      	cmp	r3, #6
 8003b4c:	f200 811a 	bhi.w	8003d84 <get_config_payload_string+0x258>
 8003b50:	a201      	add	r2, pc, #4	; (adr r2, 8003b58 <get_config_payload_string+0x2c>)
 8003b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b56:	bf00      	nop
 8003b58:	08003ba9 	.word	0x08003ba9
 8003b5c:	08003b75 	.word	0x08003b75
 8003b60:	08003bd7 	.word	0x08003bd7
 8003b64:	08003c83 	.word	0x08003c83
 8003b68:	08003c2d 	.word	0x08003c2d
 8003b6c:	08003cd9 	.word	0x08003cd9
 8003b70:	08003d2f 	.word	0x08003d2f
		case OUT_CONF_PAYLOAD:
			len = sprintf(payload, switch_conf_payload_templ, unical_id, unical_id, obj_number, obj_number, obj_number, unical_id, obj_number, unical_id, unical_id, dev_conf_ip);
 8003b74:	78bb      	ldrb	r3, [r7, #2]
 8003b76:	78ba      	ldrb	r2, [r7, #2]
 8003b78:	78b9      	ldrb	r1, [r7, #2]
 8003b7a:	78b8      	ldrb	r0, [r7, #2]
 8003b7c:	4c85      	ldr	r4, [pc, #532]	; (8003d94 <get_config_payload_string+0x268>)
 8003b7e:	9407      	str	r4, [sp, #28]
 8003b80:	4c85      	ldr	r4, [pc, #532]	; (8003d98 <get_config_payload_string+0x26c>)
 8003b82:	9406      	str	r4, [sp, #24]
 8003b84:	4c84      	ldr	r4, [pc, #528]	; (8003d98 <get_config_payload_string+0x26c>)
 8003b86:	9405      	str	r4, [sp, #20]
 8003b88:	9004      	str	r0, [sp, #16]
 8003b8a:	4883      	ldr	r0, [pc, #524]	; (8003d98 <get_config_payload_string+0x26c>)
 8003b8c:	9003      	str	r0, [sp, #12]
 8003b8e:	9102      	str	r1, [sp, #8]
 8003b90:	9201      	str	r2, [sp, #4]
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	4b80      	ldr	r3, [pc, #512]	; (8003d98 <get_config_payload_string+0x26c>)
 8003b96:	4a80      	ldr	r2, [pc, #512]	; (8003d98 <get_config_payload_string+0x26c>)
 8003b98:	4980      	ldr	r1, [pc, #512]	; (8003d9c <get_config_payload_string+0x270>)
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f018 f864 	bl	801bc68 <siprintf>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	73fb      	strb	r3, [r7, #15]
			return len;
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	e0f0      	b.n	8003d8a <get_config_payload_string+0x25e>
			break;

		case INP_CONF_PAYLOAD:
			len = sprintf(payload, input_conf_payload_templ, unical_id, obj_number, obj_number,  unical_id, obj_number, unical_id, unical_id, dev_conf_ip);
 8003ba8:	78b9      	ldrb	r1, [r7, #2]
 8003baa:	78bb      	ldrb	r3, [r7, #2]
 8003bac:	78ba      	ldrb	r2, [r7, #2]
 8003bae:	4879      	ldr	r0, [pc, #484]	; (8003d94 <get_config_payload_string+0x268>)
 8003bb0:	9005      	str	r0, [sp, #20]
 8003bb2:	4879      	ldr	r0, [pc, #484]	; (8003d98 <get_config_payload_string+0x26c>)
 8003bb4:	9004      	str	r0, [sp, #16]
 8003bb6:	4878      	ldr	r0, [pc, #480]	; (8003d98 <get_config_payload_string+0x26c>)
 8003bb8:	9003      	str	r0, [sp, #12]
 8003bba:	9202      	str	r2, [sp, #8]
 8003bbc:	4a76      	ldr	r2, [pc, #472]	; (8003d98 <get_config_payload_string+0x26c>)
 8003bbe:	9201      	str	r2, [sp, #4]
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4a74      	ldr	r2, [pc, #464]	; (8003d98 <get_config_payload_string+0x26c>)
 8003bc6:	4976      	ldr	r1, [pc, #472]	; (8003da0 <get_config_payload_string+0x274>)
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f018 f84d 	bl	801bc68 <siprintf>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	73fb      	strb	r3, [r7, #15]
			return len;
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	e0d9      	b.n	8003d8a <get_config_payload_string+0x25e>
			break;
		case ENERGY_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 8003bd6:	4b6f      	ldr	r3, [pc, #444]	; (8003d94 <get_config_payload_string+0x268>)
 8003bd8:	9310      	str	r3, [sp, #64]	; 0x40
 8003bda:	4b72      	ldr	r3, [pc, #456]	; (8003da4 <get_config_payload_string+0x278>)
 8003bdc:	930f      	str	r3, [sp, #60]	; 0x3c
 8003bde:	4b72      	ldr	r3, [pc, #456]	; (8003da8 <get_config_payload_string+0x27c>)
 8003be0:	930e      	str	r3, [sp, #56]	; 0x38
 8003be2:	4b72      	ldr	r3, [pc, #456]	; (8003dac <get_config_payload_string+0x280>)
 8003be4:	930d      	str	r3, [sp, #52]	; 0x34
 8003be6:	4b72      	ldr	r3, [pc, #456]	; (8003db0 <get_config_payload_string+0x284>)
 8003be8:	930c      	str	r3, [sp, #48]	; 0x30
 8003bea:	4b72      	ldr	r3, [pc, #456]	; (8003db4 <get_config_payload_string+0x288>)
 8003bec:	930b      	str	r3, [sp, #44]	; 0x2c
 8003bee:	4b6a      	ldr	r3, [pc, #424]	; (8003d98 <get_config_payload_string+0x26c>)
 8003bf0:	930a      	str	r3, [sp, #40]	; 0x28
 8003bf2:	4b71      	ldr	r3, [pc, #452]	; (8003db8 <get_config_payload_string+0x28c>)
 8003bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8003bf6:	4b71      	ldr	r3, [pc, #452]	; (8003dbc <get_config_payload_string+0x290>)
 8003bf8:	9308      	str	r3, [sp, #32]
 8003bfa:	4b71      	ldr	r3, [pc, #452]	; (8003dc0 <get_config_payload_string+0x294>)
 8003bfc:	9307      	str	r3, [sp, #28]
 8003bfe:	4b66      	ldr	r3, [pc, #408]	; (8003d98 <get_config_payload_string+0x26c>)
 8003c00:	9306      	str	r3, [sp, #24]
 8003c02:	4b6d      	ldr	r3, [pc, #436]	; (8003db8 <get_config_payload_string+0x28c>)
 8003c04:	9305      	str	r3, [sp, #20]
 8003c06:	4b6f      	ldr	r3, [pc, #444]	; (8003dc4 <get_config_payload_string+0x298>)
 8003c08:	9304      	str	r3, [sp, #16]
 8003c0a:	4b6f      	ldr	r3, [pc, #444]	; (8003dc8 <get_config_payload_string+0x29c>)
 8003c0c:	9303      	str	r3, [sp, #12]
 8003c0e:	4b6c      	ldr	r3, [pc, #432]	; (8003dc0 <get_config_payload_string+0x294>)
 8003c10:	9302      	str	r3, [sp, #8]
 8003c12:	4b6e      	ldr	r3, [pc, #440]	; (8003dcc <get_config_payload_string+0x2a0>)
 8003c14:	9301      	str	r3, [sp, #4]
 8003c16:	4b60      	ldr	r3, [pc, #384]	; (8003d98 <get_config_payload_string+0x26c>)
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	4b67      	ldr	r3, [pc, #412]	; (8003db8 <get_config_payload_string+0x28c>)
 8003c1c:	4a68      	ldr	r2, [pc, #416]	; (8003dc0 <get_config_payload_string+0x294>)
 8003c1e:	496c      	ldr	r1, [pc, #432]	; (8003dd0 <get_config_payload_string+0x2a4>)
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f018 f821 	bl	801bc68 <siprintf>
 8003c26:	4603      	mov	r3, r0
 8003c28:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_energy, dev_class_energy_state, dev_class_energy_human, dev_system, unical_id, \
					dev_class_energy, dev_class_energy_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8003c2a:	e0ae      	b.n	8003d8a <get_config_payload_string+0x25e>
		case VOLTAGE_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 8003c2c:	4b59      	ldr	r3, [pc, #356]	; (8003d94 <get_config_payload_string+0x268>)
 8003c2e:	9310      	str	r3, [sp, #64]	; 0x40
 8003c30:	4b5c      	ldr	r3, [pc, #368]	; (8003da4 <get_config_payload_string+0x278>)
 8003c32:	930f      	str	r3, [sp, #60]	; 0x3c
 8003c34:	4b5c      	ldr	r3, [pc, #368]	; (8003da8 <get_config_payload_string+0x27c>)
 8003c36:	930e      	str	r3, [sp, #56]	; 0x38
 8003c38:	4b5c      	ldr	r3, [pc, #368]	; (8003dac <get_config_payload_string+0x280>)
 8003c3a:	930d      	str	r3, [sp, #52]	; 0x34
 8003c3c:	4b5c      	ldr	r3, [pc, #368]	; (8003db0 <get_config_payload_string+0x284>)
 8003c3e:	930c      	str	r3, [sp, #48]	; 0x30
 8003c40:	4b5c      	ldr	r3, [pc, #368]	; (8003db4 <get_config_payload_string+0x288>)
 8003c42:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c44:	4b54      	ldr	r3, [pc, #336]	; (8003d98 <get_config_payload_string+0x26c>)
 8003c46:	930a      	str	r3, [sp, #40]	; 0x28
 8003c48:	4b5b      	ldr	r3, [pc, #364]	; (8003db8 <get_config_payload_string+0x28c>)
 8003c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c4c:	4b61      	ldr	r3, [pc, #388]	; (8003dd4 <get_config_payload_string+0x2a8>)
 8003c4e:	9308      	str	r3, [sp, #32]
 8003c50:	4b61      	ldr	r3, [pc, #388]	; (8003dd8 <get_config_payload_string+0x2ac>)
 8003c52:	9307      	str	r3, [sp, #28]
 8003c54:	4b50      	ldr	r3, [pc, #320]	; (8003d98 <get_config_payload_string+0x26c>)
 8003c56:	9306      	str	r3, [sp, #24]
 8003c58:	4b57      	ldr	r3, [pc, #348]	; (8003db8 <get_config_payload_string+0x28c>)
 8003c5a:	9305      	str	r3, [sp, #20]
 8003c5c:	4b5f      	ldr	r3, [pc, #380]	; (8003ddc <get_config_payload_string+0x2b0>)
 8003c5e:	9304      	str	r3, [sp, #16]
 8003c60:	4b5f      	ldr	r3, [pc, #380]	; (8003de0 <get_config_payload_string+0x2b4>)
 8003c62:	9303      	str	r3, [sp, #12]
 8003c64:	4b5c      	ldr	r3, [pc, #368]	; (8003dd8 <get_config_payload_string+0x2ac>)
 8003c66:	9302      	str	r3, [sp, #8]
 8003c68:	4b58      	ldr	r3, [pc, #352]	; (8003dcc <get_config_payload_string+0x2a0>)
 8003c6a:	9301      	str	r3, [sp, #4]
 8003c6c:	4b4a      	ldr	r3, [pc, #296]	; (8003d98 <get_config_payload_string+0x26c>)
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	4b51      	ldr	r3, [pc, #324]	; (8003db8 <get_config_payload_string+0x28c>)
 8003c72:	4a59      	ldr	r2, [pc, #356]	; (8003dd8 <get_config_payload_string+0x2ac>)
 8003c74:	4956      	ldr	r1, [pc, #344]	; (8003dd0 <get_config_payload_string+0x2a4>)
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f017 fff6 	bl	801bc68 <siprintf>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_voltage, "\n", dev_class_voltage_human, dev_system, unical_id, \
					dev_class_voltage, dev_class_voltage_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8003c80:	e083      	b.n	8003d8a <get_config_payload_string+0x25e>
		case POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 8003c82:	4b44      	ldr	r3, [pc, #272]	; (8003d94 <get_config_payload_string+0x268>)
 8003c84:	9310      	str	r3, [sp, #64]	; 0x40
 8003c86:	4b47      	ldr	r3, [pc, #284]	; (8003da4 <get_config_payload_string+0x278>)
 8003c88:	930f      	str	r3, [sp, #60]	; 0x3c
 8003c8a:	4b47      	ldr	r3, [pc, #284]	; (8003da8 <get_config_payload_string+0x27c>)
 8003c8c:	930e      	str	r3, [sp, #56]	; 0x38
 8003c8e:	4b47      	ldr	r3, [pc, #284]	; (8003dac <get_config_payload_string+0x280>)
 8003c90:	930d      	str	r3, [sp, #52]	; 0x34
 8003c92:	4b47      	ldr	r3, [pc, #284]	; (8003db0 <get_config_payload_string+0x284>)
 8003c94:	930c      	str	r3, [sp, #48]	; 0x30
 8003c96:	4b47      	ldr	r3, [pc, #284]	; (8003db4 <get_config_payload_string+0x288>)
 8003c98:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c9a:	4b3f      	ldr	r3, [pc, #252]	; (8003d98 <get_config_payload_string+0x26c>)
 8003c9c:	930a      	str	r3, [sp, #40]	; 0x28
 8003c9e:	4b46      	ldr	r3, [pc, #280]	; (8003db8 <get_config_payload_string+0x28c>)
 8003ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ca2:	4b50      	ldr	r3, [pc, #320]	; (8003de4 <get_config_payload_string+0x2b8>)
 8003ca4:	9308      	str	r3, [sp, #32]
 8003ca6:	4b50      	ldr	r3, [pc, #320]	; (8003de8 <get_config_payload_string+0x2bc>)
 8003ca8:	9307      	str	r3, [sp, #28]
 8003caa:	4b3b      	ldr	r3, [pc, #236]	; (8003d98 <get_config_payload_string+0x26c>)
 8003cac:	9306      	str	r3, [sp, #24]
 8003cae:	4b42      	ldr	r3, [pc, #264]	; (8003db8 <get_config_payload_string+0x28c>)
 8003cb0:	9305      	str	r3, [sp, #20]
 8003cb2:	4b4e      	ldr	r3, [pc, #312]	; (8003dec <get_config_payload_string+0x2c0>)
 8003cb4:	9304      	str	r3, [sp, #16]
 8003cb6:	4b4a      	ldr	r3, [pc, #296]	; (8003de0 <get_config_payload_string+0x2b4>)
 8003cb8:	9303      	str	r3, [sp, #12]
 8003cba:	4b4b      	ldr	r3, [pc, #300]	; (8003de8 <get_config_payload_string+0x2bc>)
 8003cbc:	9302      	str	r3, [sp, #8]
 8003cbe:	4b43      	ldr	r3, [pc, #268]	; (8003dcc <get_config_payload_string+0x2a0>)
 8003cc0:	9301      	str	r3, [sp, #4]
 8003cc2:	4b35      	ldr	r3, [pc, #212]	; (8003d98 <get_config_payload_string+0x26c>)
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	4b3c      	ldr	r3, [pc, #240]	; (8003db8 <get_config_payload_string+0x28c>)
 8003cc8:	4a47      	ldr	r2, [pc, #284]	; (8003de8 <get_config_payload_string+0x2bc>)
 8003cca:	4941      	ldr	r1, [pc, #260]	; (8003dd0 <get_config_payload_string+0x2a4>)
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f017 ffcb 	bl	801bc68 <siprintf>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_power, "\n", dev_class_power_human, dev_system, unical_id, \
					dev_class_power, dev_class_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8003cd6:	e058      	b.n	8003d8a <get_config_payload_string+0x25e>
		case POWER_FACTOR_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 8003cd8:	4b2e      	ldr	r3, [pc, #184]	; (8003d94 <get_config_payload_string+0x268>)
 8003cda:	9310      	str	r3, [sp, #64]	; 0x40
 8003cdc:	4b31      	ldr	r3, [pc, #196]	; (8003da4 <get_config_payload_string+0x278>)
 8003cde:	930f      	str	r3, [sp, #60]	; 0x3c
 8003ce0:	4b31      	ldr	r3, [pc, #196]	; (8003da8 <get_config_payload_string+0x27c>)
 8003ce2:	930e      	str	r3, [sp, #56]	; 0x38
 8003ce4:	4b31      	ldr	r3, [pc, #196]	; (8003dac <get_config_payload_string+0x280>)
 8003ce6:	930d      	str	r3, [sp, #52]	; 0x34
 8003ce8:	4b31      	ldr	r3, [pc, #196]	; (8003db0 <get_config_payload_string+0x284>)
 8003cea:	930c      	str	r3, [sp, #48]	; 0x30
 8003cec:	4b31      	ldr	r3, [pc, #196]	; (8003db4 <get_config_payload_string+0x288>)
 8003cee:	930b      	str	r3, [sp, #44]	; 0x2c
 8003cf0:	4b29      	ldr	r3, [pc, #164]	; (8003d98 <get_config_payload_string+0x26c>)
 8003cf2:	930a      	str	r3, [sp, #40]	; 0x28
 8003cf4:	4b30      	ldr	r3, [pc, #192]	; (8003db8 <get_config_payload_string+0x28c>)
 8003cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8003cf8:	4b3d      	ldr	r3, [pc, #244]	; (8003df0 <get_config_payload_string+0x2c4>)
 8003cfa:	9308      	str	r3, [sp, #32]
 8003cfc:	4b3d      	ldr	r3, [pc, #244]	; (8003df4 <get_config_payload_string+0x2c8>)
 8003cfe:	9307      	str	r3, [sp, #28]
 8003d00:	4b25      	ldr	r3, [pc, #148]	; (8003d98 <get_config_payload_string+0x26c>)
 8003d02:	9306      	str	r3, [sp, #24]
 8003d04:	4b2c      	ldr	r3, [pc, #176]	; (8003db8 <get_config_payload_string+0x28c>)
 8003d06:	9305      	str	r3, [sp, #20]
 8003d08:	4b3b      	ldr	r3, [pc, #236]	; (8003df8 <get_config_payload_string+0x2cc>)
 8003d0a:	9304      	str	r3, [sp, #16]
 8003d0c:	4b34      	ldr	r3, [pc, #208]	; (8003de0 <get_config_payload_string+0x2b4>)
 8003d0e:	9303      	str	r3, [sp, #12]
 8003d10:	4b38      	ldr	r3, [pc, #224]	; (8003df4 <get_config_payload_string+0x2c8>)
 8003d12:	9302      	str	r3, [sp, #8]
 8003d14:	4b2d      	ldr	r3, [pc, #180]	; (8003dcc <get_config_payload_string+0x2a0>)
 8003d16:	9301      	str	r3, [sp, #4]
 8003d18:	4b1f      	ldr	r3, [pc, #124]	; (8003d98 <get_config_payload_string+0x26c>)
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	4b26      	ldr	r3, [pc, #152]	; (8003db8 <get_config_payload_string+0x28c>)
 8003d1e:	4a35      	ldr	r2, [pc, #212]	; (8003df4 <get_config_payload_string+0x2c8>)
 8003d20:	492b      	ldr	r1, [pc, #172]	; (8003dd0 <get_config_payload_string+0x2a4>)
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f017 ffa0 	bl	801bc68 <siprintf>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_power_factor, "\n", dev_class_power_factor_human, dev_system, unical_id, \
					dev_class_power_factor, dev_class_power_factor_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8003d2c:	e02d      	b.n	8003d8a <get_config_payload_string+0x25e>
		case CURRENT_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 8003d2e:	4b19      	ldr	r3, [pc, #100]	; (8003d94 <get_config_payload_string+0x268>)
 8003d30:	9310      	str	r3, [sp, #64]	; 0x40
 8003d32:	4b1c      	ldr	r3, [pc, #112]	; (8003da4 <get_config_payload_string+0x278>)
 8003d34:	930f      	str	r3, [sp, #60]	; 0x3c
 8003d36:	4b1c      	ldr	r3, [pc, #112]	; (8003da8 <get_config_payload_string+0x27c>)
 8003d38:	930e      	str	r3, [sp, #56]	; 0x38
 8003d3a:	4b1c      	ldr	r3, [pc, #112]	; (8003dac <get_config_payload_string+0x280>)
 8003d3c:	930d      	str	r3, [sp, #52]	; 0x34
 8003d3e:	4b1c      	ldr	r3, [pc, #112]	; (8003db0 <get_config_payload_string+0x284>)
 8003d40:	930c      	str	r3, [sp, #48]	; 0x30
 8003d42:	4b1c      	ldr	r3, [pc, #112]	; (8003db4 <get_config_payload_string+0x288>)
 8003d44:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d46:	4b14      	ldr	r3, [pc, #80]	; (8003d98 <get_config_payload_string+0x26c>)
 8003d48:	930a      	str	r3, [sp, #40]	; 0x28
 8003d4a:	4b1b      	ldr	r3, [pc, #108]	; (8003db8 <get_config_payload_string+0x28c>)
 8003d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8003d4e:	4b2b      	ldr	r3, [pc, #172]	; (8003dfc <get_config_payload_string+0x2d0>)
 8003d50:	9308      	str	r3, [sp, #32]
 8003d52:	4b2b      	ldr	r3, [pc, #172]	; (8003e00 <get_config_payload_string+0x2d4>)
 8003d54:	9307      	str	r3, [sp, #28]
 8003d56:	4b10      	ldr	r3, [pc, #64]	; (8003d98 <get_config_payload_string+0x26c>)
 8003d58:	9306      	str	r3, [sp, #24]
 8003d5a:	4b17      	ldr	r3, [pc, #92]	; (8003db8 <get_config_payload_string+0x28c>)
 8003d5c:	9305      	str	r3, [sp, #20]
 8003d5e:	4b29      	ldr	r3, [pc, #164]	; (8003e04 <get_config_payload_string+0x2d8>)
 8003d60:	9304      	str	r3, [sp, #16]
 8003d62:	4b1f      	ldr	r3, [pc, #124]	; (8003de0 <get_config_payload_string+0x2b4>)
 8003d64:	9303      	str	r3, [sp, #12]
 8003d66:	4b26      	ldr	r3, [pc, #152]	; (8003e00 <get_config_payload_string+0x2d4>)
 8003d68:	9302      	str	r3, [sp, #8]
 8003d6a:	4b18      	ldr	r3, [pc, #96]	; (8003dcc <get_config_payload_string+0x2a0>)
 8003d6c:	9301      	str	r3, [sp, #4]
 8003d6e:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <get_config_payload_string+0x26c>)
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	4b11      	ldr	r3, [pc, #68]	; (8003db8 <get_config_payload_string+0x28c>)
 8003d74:	4a22      	ldr	r2, [pc, #136]	; (8003e00 <get_config_payload_string+0x2d4>)
 8003d76:	4916      	ldr	r1, [pc, #88]	; (8003dd0 <get_config_payload_string+0x2a4>)
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f017 ff75 	bl	801bc68 <siprintf>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_current, "\n", dev_class_current_human, dev_system, unical_id, \
					dev_class_current, dev_class_current_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8003d82:	e002      	b.n	8003d8a <get_config_payload_string+0x25e>

		default:
			return -1;
 8003d84:	f04f 33ff 	mov.w	r3, #4294967295
 8003d88:	e7ff      	b.n	8003d8a <get_config_payload_string+0x25e>
			break;
	}
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd90      	pop	{r4, r7, pc}
 8003d92:	bf00      	nop
 8003d94:	20000868 	.word	0x20000868
 8003d98:	20000858 	.word	0x20000858
 8003d9c:	0802251c 	.word	0x0802251c
 8003da0:	080226dc 	.word	0x080226dc
 8003da4:	08021040 	.word	0x08021040
 8003da8:	08021048 	.word	0x08021048
 8003dac:	08021050 	.word	0x08021050
 8003db0:	08021060 	.word	0x08021060
 8003db4:	08021070 	.word	0x08021070
 8003db8:	08021010 	.word	0x08021010
 8003dbc:	08021080 	.word	0x08021080
 8003dc0:	08021008 	.word	0x08021008
 8003dc4:	08021084 	.word	0x08021084
 8003dc8:	0802108c 	.word	0x0802108c
 8003dcc:	080210b0 	.word	0x080210b0
 8003dd0:	08022874 	.word	0x08022874
 8003dd4:	080210b8 	.word	0x080210b8
 8003dd8:	08021018 	.word	0x08021018
 8003ddc:	080210bc 	.word	0x080210bc
 8003de0:	080210c4 	.word	0x080210c4
 8003de4:	080210c8 	.word	0x080210c8
 8003de8:	08021020 	.word	0x08021020
 8003dec:	080210cc 	.word	0x080210cc
 8003df0:	080210d4 	.word	0x080210d4
 8003df4:	08021028 	.word	0x08021028
 8003df8:	080210d8 	.word	0x080210d8
 8003dfc:	080210dc 	.word	0x080210dc
 8003e00:	08021038 	.word	0x08021038
 8003e04:	080210e0 	.word	0x080210e0

08003e08 <InitHLW8032>:
uint32_t	PFData = 0;
uint32_t	PulsCountFor1kWh;
uint16_t 	PF_reg, PF_reg_old;
uint32_t	test_flag = 0;

void InitHLW8032(uint32_t VolR1, uint32_t VolR2, float CurrentShuntR){
 8003e08:	b5b0      	push	{r4, r5, r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	ed87 0a01 	vstr	s0, [r7, #4]

	//VolR1 - Resistanse on OM for first resistor
	//VolR2 - Resistanse on OM for second resistor
	//ShuntR - Resistanse in OM for current shunt resistor

	VF = VolR1 / (VolR2 * 1000.0);
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f7fc fb8c 	bl	8000534 <__aeabi_ui2d>
 8003e1c:	4604      	mov	r4, r0
 8003e1e:	460d      	mov	r5, r1
 8003e20:	68b8      	ldr	r0, [r7, #8]
 8003e22:	f7fc fb87 	bl	8000534 <__aeabi_ui2d>
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	4b17      	ldr	r3, [pc, #92]	; (8003e88 <InitHLW8032+0x80>)
 8003e2c:	f7fc fbfc 	bl	8000628 <__aeabi_dmul>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	4620      	mov	r0, r4
 8003e36:	4629      	mov	r1, r5
 8003e38:	f7fc fd20 	bl	800087c <__aeabi_ddiv>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4610      	mov	r0, r2
 8003e42:	4619      	mov	r1, r3
 8003e44:	f7fc fee8 	bl	8000c18 <__aeabi_d2f>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	4a10      	ldr	r2, [pc, #64]	; (8003e8c <InitHLW8032+0x84>)
 8003e4c:	6013      	str	r3, [r2, #0]
	CF = 1.0 / (CurrentShuntR * 1000.0);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7fc fb92 	bl	8000578 <__aeabi_f2d>
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <InitHLW8032+0x80>)
 8003e5a:	f7fc fbe5 	bl	8000628 <__aeabi_dmul>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
 8003e62:	f04f 0000 	mov.w	r0, #0
 8003e66:	490a      	ldr	r1, [pc, #40]	; (8003e90 <InitHLW8032+0x88>)
 8003e68:	f7fc fd08 	bl	800087c <__aeabi_ddiv>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4610      	mov	r0, r2
 8003e72:	4619      	mov	r1, r3
 8003e74:	f7fc fed0 	bl	8000c18 <__aeabi_d2f>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	4a06      	ldr	r2, [pc, #24]	; (8003e94 <InitHLW8032+0x8c>)
 8003e7c:	6013      	str	r3, [r2, #0]
}
 8003e7e:	bf00      	nop
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bdb0      	pop	{r4, r5, r7, pc}
 8003e86:	bf00      	nop
 8003e88:	408f4000 	.word	0x408f4000
 8003e8c:	20000094 	.word	0x20000094
 8003e90:	3ff00000 	.word	0x3ff00000
 8003e94:	20000098 	.word	0x20000098

08003e98 <Checksum>:

	VF = Data;

}

uint8_t Checksum(char * string){
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
	uint8_t i, tmp;
	char byte;

	byte = 0;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	73bb      	strb	r3, [r7, #14]
	for ( i = 2; i <= 22; i++){
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	73fb      	strb	r3, [r7, #15]
 8003ea8:	e00e      	b.n	8003ec8 <Checksum+0x30>
		tmp = string[i];
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	4413      	add	r3, r2
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	737b      	strb	r3, [r7, #13]
		byte = byte + string[i];
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	4413      	add	r3, r2
 8003eba:	781a      	ldrb	r2, [r3, #0]
 8003ebc:	7bbb      	ldrb	r3, [r7, #14]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	73bb      	strb	r3, [r7, #14]
	for ( i = 2; i <= 22; i++){
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	73fb      	strb	r3, [r7, #15]
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
 8003eca:	2b16      	cmp	r3, #22
 8003ecc:	d9ed      	bls.n	8003eaa <Checksum+0x12>
	}
	if (byte == string[23])
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3317      	adds	r3, #23
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	7bba      	ldrb	r2, [r7, #14]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d101      	bne.n	8003ede <Checksum+0x46>
	{
		return 1;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e000      	b.n	8003ee0 <Checksum+0x48>
	}
	return 0;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <RecvRawString>:


int RecvRawString(const unsigned char * string){
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]

	if (!strcmp(string+1, 0x5A)){
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	215a      	movs	r1, #90	; 0x5a
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fc f970 	bl	80001e0 <strcmp>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d102      	bne.n	8003f0c <RecvRawString+0x20>
		return -1; //error code
 8003f06:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0a:	e0b6      	b.n	800407a <RecvRawString+0x18e>
	}
	//if(string[1] =! 0x5A){
	//	return -1; //error code
	//}

	if (!Checksum(string)){
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7ff ffc3 	bl	8003e98 <Checksum>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d102      	bne.n	8003f1e <RecvRawString+0x32>
		return -2; //Checksum Error
 8003f18:	f06f 0301 	mvn.w	r3, #1
 8003f1c:	e0ad      	b.n	800407a <RecvRawString+0x18e>
	}

	VolPar = ((uint32_t)string[2] << 16) + ((uint32_t)string[3] << 8) + string[4];
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3302      	adds	r3, #2
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	041a      	lsls	r2, r3, #16
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	3303      	adds	r3, #3
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	021b      	lsls	r3, r3, #8
 8003f2e:	4413      	add	r3, r2
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	3204      	adds	r2, #4
 8003f34:	7812      	ldrb	r2, [r2, #0]
 8003f36:	4413      	add	r3, r2
 8003f38:	4a52      	ldr	r2, [pc, #328]	; (8004084 <RecvRawString+0x198>)
 8003f3a:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20],6) == 1){
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3314      	adds	r3, #20
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	099b      	lsrs	r3, r3, #6
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d01b      	beq.n	8003f86 <RecvRawString+0x9a>
		VolData = ((uint32_t)string[5]  <<16) + ((uint32_t)string[6] <<8) + string[7];
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3305      	adds	r3, #5
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	041a      	lsls	r2, r3, #16
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	3306      	adds	r3, #6
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	021b      	lsls	r3, r3, #8
 8003f5e:	4413      	add	r3, r2
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	3207      	adds	r2, #7
 8003f64:	7812      	ldrb	r2, [r2, #0]
 8003f66:	4413      	add	r3, r2
 8003f68:	4a47      	ldr	r2, [pc, #284]	; (8004088 <RecvRawString+0x19c>)
 8003f6a:	6013      	str	r3, [r2, #0]
		VoltageAnalog = VolPar / VolData;
 8003f6c:	4b45      	ldr	r3, [pc, #276]	; (8004084 <RecvRawString+0x198>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	4b45      	ldr	r3, [pc, #276]	; (8004088 <RecvRawString+0x19c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f78:	ee07 3a90 	vmov	s15, r3
 8003f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f80:	4b42      	ldr	r3, [pc, #264]	; (800408c <RecvRawString+0x1a0>)
 8003f82:	edc3 7a00 	vstr	s15, [r3]

	}

	CurrentPar = ((uint32_t)string[8]  <<16) + ((uint32_t)string[9] <<8) + string[10];
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3308      	adds	r3, #8
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	041a      	lsls	r2, r3, #16
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3309      	adds	r3, #9
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	021b      	lsls	r3, r3, #8
 8003f96:	4413      	add	r3, r2
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	320a      	adds	r2, #10
 8003f9c:	7812      	ldrb	r2, [r2, #0]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	4a3b      	ldr	r2, [pc, #236]	; (8004090 <RecvRawString+0x1a4>)
 8003fa2:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20], 5) == 1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3314      	adds	r3, #20
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	095b      	lsrs	r3, r3, #5
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00e      	beq.n	8003fd4 <RecvRawString+0xe8>
	{
		CurrentData = ((uint32_t)string[11]  <<16) + ((uint32_t)string[12] <<8) + string[13];
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	330b      	adds	r3, #11
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	041a      	lsls	r2, r3, #16
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	330c      	adds	r3, #12
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	021b      	lsls	r3, r3, #8
 8003fc6:	4413      	add	r3, r2
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	320d      	adds	r2, #13
 8003fcc:	7812      	ldrb	r2, [r2, #0]
 8003fce:	4413      	add	r3, r2
 8003fd0:	4a30      	ldr	r2, [pc, #192]	; (8004094 <RecvRawString+0x1a8>)
 8003fd2:	6013      	str	r3, [r2, #0]
	}
	PowerPar = ((uint32_t)string[14]  <<16) + ((uint32_t)string[15] <<8) + string[16];
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	330e      	adds	r3, #14
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	041a      	lsls	r2, r3, #16
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	330f      	adds	r3, #15
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	021b      	lsls	r3, r3, #8
 8003fe4:	4413      	add	r3, r2
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	3210      	adds	r2, #16
 8003fea:	7812      	ldrb	r2, [r2, #0]
 8003fec:	4413      	add	r3, r2
 8003fee:	4a2a      	ldr	r2, [pc, #168]	; (8004098 <RecvRawString+0x1ac>)
 8003ff0:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20], 4) == 1)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3314      	adds	r3, #20
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	091b      	lsrs	r3, r3, #4
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00e      	beq.n	8004022 <RecvRawString+0x136>
	{
		PowerData = ((uint32_t)string[17]  <<16) + ((uint32_t)string[18] <<8) + string[19];
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3311      	adds	r3, #17
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	041a      	lsls	r2, r3, #16
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3312      	adds	r3, #18
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	021b      	lsls	r3, r3, #8
 8004014:	4413      	add	r3, r2
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	3213      	adds	r2, #19
 800401a:	7812      	ldrb	r2, [r2, #0]
 800401c:	4413      	add	r3, r2
 800401e:	4a1f      	ldr	r2, [pc, #124]	; (800409c <RecvRawString+0x1b0>)
 8004020:	6013      	str	r3, [r2, #0]
	}

	PF_reg = ((uint32_t)string[21] <<8) + string[22];
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3315      	adds	r3, #21
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	b29b      	uxth	r3, r3
 800402a:	021b      	lsls	r3, r3, #8
 800402c:	b29a      	uxth	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	3316      	adds	r3, #22
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	b29b      	uxth	r3, r3
 8004036:	4413      	add	r3, r2
 8004038:	b29a      	uxth	r2, r3
 800403a:	4b19      	ldr	r3, [pc, #100]	; (80040a0 <RecvRawString+0x1b4>)
 800403c:	801a      	strh	r2, [r3, #0]

	if(bitRead(string[20], 7) == 1)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3314      	adds	r3, #20
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	09db      	lsrs	r3, r3, #7
 8004046:	b2db      	uxtb	r3, r3
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	d004      	beq.n	800405a <RecvRawString+0x16e>
	{
		PFData++;
 8004050:	4b14      	ldr	r3, [pc, #80]	; (80040a4 <RecvRawString+0x1b8>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3301      	adds	r3, #1
 8004056:	4a13      	ldr	r2, [pc, #76]	; (80040a4 <RecvRawString+0x1b8>)
 8004058:	6013      	str	r3, [r2, #0]
	}

	//TODO Когда переполняется регистр, выставляется флаг и обнудяется регистр, проверить, можем ли мы ловить этот флаг еще и не совпадением старого и нового значения регистров.
	if(PF_reg_old > PF_reg){
 800405a:	4b13      	ldr	r3, [pc, #76]	; (80040a8 <RecvRawString+0x1bc>)
 800405c:	881a      	ldrh	r2, [r3, #0]
 800405e:	4b10      	ldr	r3, [pc, #64]	; (80040a0 <RecvRawString+0x1b4>)
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	429a      	cmp	r2, r3
 8004064:	d904      	bls.n	8004070 <RecvRawString+0x184>
		test_flag++;
 8004066:	4b11      	ldr	r3, [pc, #68]	; (80040ac <RecvRawString+0x1c0>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3301      	adds	r3, #1
 800406c:	4a0f      	ldr	r2, [pc, #60]	; (80040ac <RecvRawString+0x1c0>)
 800406e:	6013      	str	r3, [r2, #0]
	}

	PF_reg_old = PF_reg;
 8004070:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <RecvRawString+0x1b4>)
 8004072:	881a      	ldrh	r2, [r3, #0]
 8004074:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <RecvRawString+0x1bc>)
 8004076:	801a      	strh	r2, [r3, #0]

	return 0;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	2000087c 	.word	0x2000087c
 8004088:	20000880 	.word	0x20000880
 800408c:	20000894 	.word	0x20000894
 8004090:	2000088c 	.word	0x2000088c
 8004094:	20000890 	.word	0x20000890
 8004098:	20000884 	.word	0x20000884
 800409c:	20000888 	.word	0x20000888
 80040a0:	2000089c 	.word	0x2000089c
 80040a4:	20000898 	.word	0x20000898
 80040a8:	2000089e 	.word	0x2000089e
 80040ac:	200008a0 	.word	0x200008a0

080040b0 <GetVolRaw>:

float GetVolRaw(void){
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0

	if ( VolData == 0){
 80040b4:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <GetVolRaw+0x40>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d102      	bne.n	80040c2 <GetVolRaw+0x12>
		return 0;
 80040bc:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80040f4 <GetVolRaw+0x44>
 80040c0:	e00d      	b.n	80040de <GetVolRaw+0x2e>
	}

	return VolPar / (float)VolData;
 80040c2:	4b0d      	ldr	r3, [pc, #52]	; (80040f8 <GetVolRaw+0x48>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	ee07 3a90 	vmov	s15, r3
 80040ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040ce:	4b08      	ldr	r3, [pc, #32]	; (80040f0 <GetVolRaw+0x40>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	ee07 3a90 	vmov	s15, r3
 80040d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040da:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 80040de:	eef0 7a66 	vmov.f32	s15, s13
 80040e2:	eeb0 0a67 	vmov.f32	s0, s15
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	20000880 	.word	0x20000880
 80040f4:	00000000 	.word	0x00000000
 80040f8:	2000087c 	.word	0x2000087c

080040fc <GetVoltage>:

float GetVoltage(void){
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0

	float tmp;
	float RealVolt;

	tmp = GetVolRaw();
 8004102:	f7ff ffd5 	bl	80040b0 <GetVolRaw>
 8004106:	ed87 0a01 	vstr	s0, [r7, #4]
	RealVolt = tmp * VF;
 800410a:	4b08      	ldr	r3, [pc, #32]	; (800412c <GetVoltage+0x30>)
 800410c:	edd3 7a00 	vldr	s15, [r3]
 8004110:	ed97 7a01 	vldr	s14, [r7, #4]
 8004114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004118:	edc7 7a00 	vstr	s15, [r7]
	return RealVolt;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	ee07 3a90 	vmov	s15, r3
}
 8004122:	eeb0 0a67 	vmov.f32	s0, s15
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	20000094 	.word	0x20000094

08004130 <GetCurrentRaw>:

float GetCurrentRaw(void){
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0

	if ( CurrentData == 0){
 8004134:	4b0e      	ldr	r3, [pc, #56]	; (8004170 <GetCurrentRaw+0x40>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d102      	bne.n	8004142 <GetCurrentRaw+0x12>
		return 0;
 800413c:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8004174 <GetCurrentRaw+0x44>
 8004140:	e00d      	b.n	800415e <GetCurrentRaw+0x2e>
	}

	return CurrentPar / (float)CurrentData;
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <GetCurrentRaw+0x48>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	ee07 3a90 	vmov	s15, r3
 800414a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800414e:	4b08      	ldr	r3, [pc, #32]	; (8004170 <GetCurrentRaw+0x40>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	ee07 3a90 	vmov	s15, r3
 8004156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800415a:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 800415e:	eef0 7a66 	vmov.f32	s15, s13
 8004162:	eeb0 0a67 	vmov.f32	s0, s15
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	20000890 	.word	0x20000890
 8004174:	00000000 	.word	0x00000000
 8004178:	2000088c 	.word	0x2000088c

0800417c <GetCurrent>:

float GetCurrent(void){
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0

	float tmp;
	float RaelCurrent;

	tmp = GetCurrentRaw();
 8004182:	f7ff ffd5 	bl	8004130 <GetCurrentRaw>
 8004186:	ed87 0a01 	vstr	s0, [r7, #4]
	RaelCurrent = tmp * CF;
 800418a:	4b08      	ldr	r3, [pc, #32]	; (80041ac <GetCurrent+0x30>)
 800418c:	edd3 7a00 	vldr	s15, [r3]
 8004190:	ed97 7a01 	vldr	s14, [r7, #4]
 8004194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004198:	edc7 7a00 	vstr	s15, [r7]
	return RaelCurrent;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	ee07 3a90 	vmov	s15, r3
}
 80041a2:	eeb0 0a67 	vmov.f32	s0, s15
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	20000098 	.word	0x20000098

080041b0 <GetActivePower>:

float GetActivePower(void){
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
	float tmp;

	if (PowerData == 0){
 80041b6:	4b13      	ldr	r3, [pc, #76]	; (8004204 <GetActivePower+0x54>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d102      	bne.n	80041c4 <GetActivePower+0x14>
		return 0;
 80041be:	f04f 0300 	mov.w	r3, #0
 80041c2:	e016      	b.n	80041f2 <GetActivePower+0x42>
	}
	tmp = (float)(PowerPar / PowerData) * VF * CF;
 80041c4:	4b10      	ldr	r3, [pc, #64]	; (8004208 <GetActivePower+0x58>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4b0e      	ldr	r3, [pc, #56]	; (8004204 <GetActivePower+0x54>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d0:	ee07 3a90 	vmov	s15, r3
 80041d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041d8:	4b0c      	ldr	r3, [pc, #48]	; (800420c <GetActivePower+0x5c>)
 80041da:	edd3 7a00 	vldr	s15, [r3]
 80041de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041e2:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <GetActivePower+0x60>)
 80041e4:	edd3 7a00 	vldr	s15, [r3]
 80041e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ec:	edc7 7a01 	vstr	s15, [r7, #4]
	return tmp;
 80041f0:	687b      	ldr	r3, [r7, #4]
}
 80041f2:	ee07 3a90 	vmov	s15, r3
 80041f6:	eeb0 0a67 	vmov.f32	s0, s15
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	20000888 	.word	0x20000888
 8004208:	20000884 	.word	0x20000884
 800420c:	20000094 	.word	0x20000094
 8004210:	20000098 	.word	0x20000098

08004214 <GetApparentPower>:

float GetApparentPower(void){
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0

	float voltage;
	float current;
	float ApparentPower;

	voltage = GetVoltage();
 800421a:	f7ff ff6f 	bl	80040fc <GetVoltage>
 800421e:	ed87 0a03 	vstr	s0, [r7, #12]
	current = GetCurrent();
 8004222:	f7ff ffab 	bl	800417c <GetCurrent>
 8004226:	ed87 0a02 	vstr	s0, [r7, #8]
	ApparentPower = voltage * current;
 800422a:	ed97 7a03 	vldr	s14, [r7, #12]
 800422e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004236:	edc7 7a01 	vstr	s15, [r7, #4]

	return ApparentPower;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	ee07 3a90 	vmov	s15, r3
}
 8004240:	eeb0 0a67 	vmov.f32	s0, s15
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <PowerFactor>:

float PowerFactor(void){
 800424a:	b580      	push	{r7, lr}
 800424c:	b084      	sub	sp, #16
 800424e:	af00      	add	r7, sp, #0

	float ActivePower;
	float ApparentPower;
	float PowerFactor;

	ActivePower 	= GetActivePower();
 8004250:	f7ff ffae 	bl	80041b0 <GetActivePower>
 8004254:	ed87 0a03 	vstr	s0, [r7, #12]
	ApparentPower	= GetApparentPower();
 8004258:	f7ff ffdc 	bl	8004214 <GetApparentPower>
 800425c:	ed87 0a02 	vstr	s0, [r7, #8]
	if (ApparentPower == 0) return 1;
 8004260:	edd7 7a02 	vldr	s15, [r7, #8]
 8004264:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800426c:	d102      	bne.n	8004274 <PowerFactor+0x2a>
 800426e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004272:	e014      	b.n	800429e <PowerFactor+0x54>
	if (ActivePower > ApparentPower) return 1.000000000000;
 8004274:	ed97 7a03 	vldr	s14, [r7, #12]
 8004278:	edd7 7a02 	vldr	s15, [r7, #8]
 800427c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004284:	dd02      	ble.n	800428c <PowerFactor+0x42>
 8004286:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800428a:	e008      	b.n	800429e <PowerFactor+0x54>
	PowerFactor		= ActivePower / ApparentPower;
 800428c:	edd7 6a03 	vldr	s13, [r7, #12]
 8004290:	ed97 7a02 	vldr	s14, [r7, #8]
 8004294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004298:	edc7 7a01 	vstr	s15, [r7, #4]

	return PowerFactor;
 800429c:	687b      	ldr	r3, [r7, #4]
}
 800429e:	ee07 3a90 	vmov	s15, r3
 80042a2:	eeb0 0a67 	vmov.f32	s0, s15
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	0000      	movs	r0, r0
	...

080042b0 <GetKWh>:

uint32_t GetPulsCnF1kWh(){

}

float GetKWh(void){
 80042b0:	b5b0      	push	{r4, r5, r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
	float pulseCountFor1kWh;
	float kWh;
	int PFcount;


	apparentPower		= GetApparentPower();
 80042b6:	f7ff ffad 	bl	8004214 <GetApparentPower>
 80042ba:	ed87 0a03 	vstr	s0, [r7, #12]
	pulseCountFor1kWh	= (1.0/PowerPar) * (1.0/(VF * CF)) * 1000000000.0 * 3600.0;
 80042be:	4b32      	ldr	r3, [pc, #200]	; (8004388 <GetKWh+0xd8>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7fc f936 	bl	8000534 <__aeabi_ui2d>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	f04f 0000 	mov.w	r0, #0
 80042d0:	492e      	ldr	r1, [pc, #184]	; (800438c <GetKWh+0xdc>)
 80042d2:	f7fc fad3 	bl	800087c <__aeabi_ddiv>
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	4614      	mov	r4, r2
 80042dc:	461d      	mov	r5, r3
 80042de:	4b2c      	ldr	r3, [pc, #176]	; (8004390 <GetKWh+0xe0>)
 80042e0:	ed93 7a00 	vldr	s14, [r3]
 80042e4:	4b2b      	ldr	r3, [pc, #172]	; (8004394 <GetKWh+0xe4>)
 80042e6:	edd3 7a00 	vldr	s15, [r3]
 80042ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ee:	ee17 0a90 	vmov	r0, s15
 80042f2:	f7fc f941 	bl	8000578 <__aeabi_f2d>
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	f04f 0000 	mov.w	r0, #0
 80042fe:	4923      	ldr	r1, [pc, #140]	; (800438c <GetKWh+0xdc>)
 8004300:	f7fc fabc 	bl	800087c <__aeabi_ddiv>
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4620      	mov	r0, r4
 800430a:	4629      	mov	r1, r5
 800430c:	f7fc f98c 	bl	8000628 <__aeabi_dmul>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4610      	mov	r0, r2
 8004316:	4619      	mov	r1, r3
 8004318:	a317      	add	r3, pc, #92	; (adr r3, 8004378 <GetKWh+0xc8>)
 800431a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431e:	f7fc f983 	bl	8000628 <__aeabi_dmul>
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	4610      	mov	r0, r2
 8004328:	4619      	mov	r1, r3
 800432a:	a315      	add	r3, pc, #84	; (adr r3, 8004380 <GetKWh+0xd0>)
 800432c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004330:	f7fc f97a 	bl	8000628 <__aeabi_dmul>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4610      	mov	r0, r2
 800433a:	4619      	mov	r1, r3
 800433c:	f7fc fc6c 	bl	8000c18 <__aeabi_d2f>
 8004340:	4603      	mov	r3, r0
 8004342:	60bb      	str	r3, [r7, #8]
	PFcount				= PFData * 65536 + PF_reg;
 8004344:	4b14      	ldr	r3, [pc, #80]	; (8004398 <GetKWh+0xe8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	041b      	lsls	r3, r3, #16
 800434a:	4a14      	ldr	r2, [pc, #80]	; (800439c <GetKWh+0xec>)
 800434c:	8812      	ldrh	r2, [r2, #0]
 800434e:	4413      	add	r3, r2
 8004350:	607b      	str	r3, [r7, #4]
	//kWh					= (PFData * PF_reg) / (float)pulseCountFor1kWh;
	kWh					= PFcount / (float)pulseCountFor1kWh;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	ee07 3a90 	vmov	s15, r3
 8004358:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800435c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004364:	edc7 7a00 	vstr	s15, [r7]

	return kWh;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	ee07 3a90 	vmov	s15, r3
}
 800436e:	eeb0 0a67 	vmov.f32	s0, s15
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bdb0      	pop	{r4, r5, r7, pc}
 8004378:	00000000 	.word	0x00000000
 800437c:	41cdcd65 	.word	0x41cdcd65
 8004380:	00000000 	.word	0x00000000
 8004384:	40ac2000 	.word	0x40ac2000
 8004388:	20000884 	.word	0x20000884
 800438c:	3ff00000 	.word	0x3ff00000
 8004390:	20000094 	.word	0x20000094
 8004394:	20000098 	.word	0x20000098
 8004398:	20000898 	.word	0x20000898
 800439c:	2000089c 	.word	0x2000089c

080043a0 <function_prototype>:
uint8_t sFLASH_ReadByte(void);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	bf00      	nop
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
	...

080043b0 <SPI_flash_reg_cb>:

//void (*flash_conf.select_chip)() = &function_prototype;

/* Private functions ---------------------------------------------------------*/
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), uint8_t (*receive_byte)(void), void (*send_byte)(uint8_t)){
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
 80043bc:	603b      	str	r3, [r7, #0]

	if (chip_select){
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <SPI_flash_reg_cb+0x1c>
		flash_conf.select_chip		= chip_select;
 80043c4:	4a0e      	ldr	r2, [pc, #56]	; (8004400 <SPI_flash_reg_cb+0x50>)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	60d3      	str	r3, [r2, #12]
 80043ca:	e002      	b.n	80043d2 <SPI_flash_reg_cb+0x22>
	}else{
		flash_conf.select_chip		= function_prototype;
 80043cc:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <SPI_flash_reg_cb+0x50>)
 80043ce:	4a0d      	ldr	r2, [pc, #52]	; (8004404 <SPI_flash_reg_cb+0x54>)
 80043d0:	60da      	str	r2, [r3, #12]
	}
	if (chip_deselect){
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <SPI_flash_reg_cb+0x30>
		flash_conf.deselect_chip	= chip_deselect;
 80043d8:	4a09      	ldr	r2, [pc, #36]	; (8004400 <SPI_flash_reg_cb+0x50>)
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	6113      	str	r3, [r2, #16]
 80043de:	e002      	b.n	80043e6 <SPI_flash_reg_cb+0x36>
	}else{
		flash_conf.deselect_chip	= function_prototype;
 80043e0:	4b07      	ldr	r3, [pc, #28]	; (8004400 <SPI_flash_reg_cb+0x50>)
 80043e2:	4a08      	ldr	r2, [pc, #32]	; (8004404 <SPI_flash_reg_cb+0x54>)
 80043e4:	611a      	str	r2, [r3, #16]
	}

	flash_conf.receive_byte		= receive_byte;
 80043e6:	4a06      	ldr	r2, [pc, #24]	; (8004400 <SPI_flash_reg_cb+0x50>)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6053      	str	r3, [r2, #4]
	flash_conf.send_byte		= send_byte;
 80043ec:	4a04      	ldr	r2, [pc, #16]	; (8004400 <SPI_flash_reg_cb+0x50>)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6093      	str	r3, [r2, #8]

}
 80043f2:	bf00      	nop
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	200008a4 	.word	0x200008a4
 8004404:	080043a1 	.word	0x080043a1

08004408 <sFLASH_Reset>:
//	flash_conf.deselect_chip = FlashChipDeselect;
//	flash_conf.receive_byte = SPI_ReceiveByte;
//	flash_conf.send_byte = SPI_SendByte;
}

void sFLASH_Reset(void){
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
//    cs_set();
//    tx_buf[0] = W25_ENABLE_RESET;
//    tx_buf[1] = W25_RESET;
//    SPI1_Send(tx_buf, 2);
//    cs_reset();
    sFLASH_CS_LOW();
 800440c:	f000 f89c 	bl	8004548 <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 8004410:	2066      	movs	r0, #102	; 0x66
 8004412:	f000 fa1f 	bl	8004854 <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 8004416:	2099      	movs	r0, #153	; 0x99
 8004418:	f000 fa1c 	bl	8004854 <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 800441c:	f000 f89e 	bl	800455c <sFLASH_CS_HIGH>
}
 8004420:	bf00      	nop
 8004422:	bd80      	pop	{r7, pc}

08004424 <sFLASH_GetInfo>:
    HAL_Delay(100);
    unsigned int id = W25_Read_ID();

}

struct SPI_flash_info sFLASH_GetInfo(void){
 8004424:	b590      	push	{r4, r7, lr}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
	uint32_t flash_id;

//	HAL_Delay(100);
	sFLASH_Reset();
 800442c:	f7ff ffec 	bl	8004408 <sFLASH_Reset>
//	HAL_Delay(100);
//	HAL_Delay(100);

	flash_id = sFLASH_ReadID();
 8004430:	f000 f9d2 	bl	80047d8 <sFLASH_ReadID>
 8004434:	60f8      	str	r0, [r7, #12]

	switch (flash_id) {
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4a3e      	ldr	r2, [pc, #248]	; (8004534 <sFLASH_GetInfo+0x110>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d03f      	beq.n	80044be <sFLASH_GetInfo+0x9a>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4a3c      	ldr	r2, [pc, #240]	; (8004534 <sFLASH_GetInfo+0x110>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d867      	bhi.n	8004516 <sFLASH_GetInfo+0xf2>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4a3b      	ldr	r2, [pc, #236]	; (8004538 <sFLASH_GetInfo+0x114>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d021      	beq.n	8004492 <sFLASH_GetInfo+0x6e>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	4a39      	ldr	r2, [pc, #228]	; (8004538 <sFLASH_GetInfo+0x114>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d85f      	bhi.n	8004516 <sFLASH_GetInfo+0xf2>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	4a38      	ldr	r2, [pc, #224]	; (800453c <sFLASH_GetInfo+0x118>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d045      	beq.n	80044ea <sFLASH_GetInfo+0xc6>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4a37      	ldr	r2, [pc, #220]	; (8004540 <sFLASH_GetInfo+0x11c>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d157      	bne.n	8004516 <sFLASH_GetInfo+0xf2>
		case sFLASH_W25Q16BV_ID:
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 8004466:	4b37      	ldr	r3, [pc, #220]	; (8004544 <sFLASH_GetInfo+0x120>)
 8004468:	4a35      	ldr	r2, [pc, #212]	; (8004540 <sFLASH_GetInfo+0x11c>)
 800446a:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 800446c:	4b35      	ldr	r3, [pc, #212]	; (8004544 <sFLASH_GetInfo+0x120>)
 800446e:	2201      	movs	r2, #1
 8004470:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8004472:	4b34      	ldr	r3, [pc, #208]	; (8004544 <sFLASH_GetInfo+0x120>)
 8004474:	2201      	movs	r2, #1
 8004476:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8004478:	4b32      	ldr	r3, [pc, #200]	; (8004544 <sFLASH_GetInfo+0x120>)
 800447a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800447e:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8004480:	4b30      	ldr	r3, [pc, #192]	; (8004544 <sFLASH_GetInfo+0x120>)
 8004482:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004486:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 512;
 8004488:	4b2e      	ldr	r3, [pc, #184]	; (8004544 <sFLASH_GetInfo+0x120>)
 800448a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800448e:	819a      	strh	r2, [r3, #12]
			break;
 8004490:	e045      	b.n	800451e <sFLASH_GetInfo+0xfa>
		case sFLASH_W25Q32BV_ID:
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 8004492:	4b2c      	ldr	r3, [pc, #176]	; (8004544 <sFLASH_GetInfo+0x120>)
 8004494:	4a28      	ldr	r2, [pc, #160]	; (8004538 <sFLASH_GetInfo+0x114>)
 8004496:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8004498:	4b2a      	ldr	r3, [pc, #168]	; (8004544 <sFLASH_GetInfo+0x120>)
 800449a:	2201      	movs	r2, #1
 800449c:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 800449e:	4b29      	ldr	r3, [pc, #164]	; (8004544 <sFLASH_GetInfo+0x120>)
 80044a0:	2201      	movs	r2, #1
 80044a2:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 80044a4:	4b27      	ldr	r3, [pc, #156]	; (8004544 <sFLASH_GetInfo+0x120>)
 80044a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044aa:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 80044ac:	4b25      	ldr	r3, [pc, #148]	; (8004544 <sFLASH_GetInfo+0x120>)
 80044ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044b2:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 80044b4:	4b23      	ldr	r3, [pc, #140]	; (8004544 <sFLASH_GetInfo+0x120>)
 80044b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044ba:	819a      	strh	r2, [r3, #12]
			break;
 80044bc:	e02f      	b.n	800451e <sFLASH_GetInfo+0xfa>
		case sFLASH_W25Q64BV_ID:
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 80044be:	4b21      	ldr	r3, [pc, #132]	; (8004544 <sFLASH_GetInfo+0x120>)
 80044c0:	4a1c      	ldr	r2, [pc, #112]	; (8004534 <sFLASH_GetInfo+0x110>)
 80044c2:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 80044c4:	4b1f      	ldr	r3, [pc, #124]	; (8004544 <sFLASH_GetInfo+0x120>)
 80044c6:	2201      	movs	r2, #1
 80044c8:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 80044ca:	4b1e      	ldr	r3, [pc, #120]	; (8004544 <sFLASH_GetInfo+0x120>)
 80044cc:	2201      	movs	r2, #1
 80044ce:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 80044d0:	4b1c      	ldr	r3, [pc, #112]	; (8004544 <sFLASH_GetInfo+0x120>)
 80044d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044d6:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 80044d8:	4b1a      	ldr	r3, [pc, #104]	; (8004544 <sFLASH_GetInfo+0x120>)
 80044da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044de:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 2048;
 80044e0:	4b18      	ldr	r3, [pc, #96]	; (8004544 <sFLASH_GetInfo+0x120>)
 80044e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044e6:	819a      	strh	r2, [r3, #12]
			break;
 80044e8:	e019      	b.n	800451e <sFLASH_GetInfo+0xfa>
		case sFLASH_MX25L32xxx_ID:
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 80044ea:	4b16      	ldr	r3, [pc, #88]	; (8004544 <sFLASH_GetInfo+0x120>)
 80044ec:	4a13      	ldr	r2, [pc, #76]	; (800453c <sFLASH_GetInfo+0x118>)
 80044ee:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 80044f0:	4b14      	ldr	r3, [pc, #80]	; (8004544 <sFLASH_GetInfo+0x120>)
 80044f2:	2201      	movs	r2, #1
 80044f4:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 80044f6:	4b13      	ldr	r3, [pc, #76]	; (8004544 <sFLASH_GetInfo+0x120>)
 80044f8:	2201      	movs	r2, #1
 80044fa:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 80044fc:	4b11      	ldr	r3, [pc, #68]	; (8004544 <sFLASH_GetInfo+0x120>)
 80044fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004502:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8004504:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <sFLASH_GetInfo+0x120>)
 8004506:	f44f 7280 	mov.w	r2, #256	; 0x100
 800450a:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 800450c:	4b0d      	ldr	r3, [pc, #52]	; (8004544 <sFLASH_GetInfo+0x120>)
 800450e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004512:	819a      	strh	r2, [r3, #12]
			break;
 8004514:	e003      	b.n	800451e <sFLASH_GetInfo+0xfa>

		default:
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 8004516:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <sFLASH_GetInfo+0x120>)
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]
			break;
 800451c:	bf00      	nop
	}

	return flash_info;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a08      	ldr	r2, [pc, #32]	; (8004544 <sFLASH_GetInfo+0x120>)
 8004522:	461c      	mov	r4, r3
 8004524:	4613      	mov	r3, r2
 8004526:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004528:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	bd90      	pop	{r4, r7, pc}
 8004534:	00ef4017 	.word	0x00ef4017
 8004538:	00ef4016 	.word	0x00ef4016
 800453c:	00c22016 	.word	0x00c22016
 8004540:	00ef4015 	.word	0x00ef4015
 8004544:	200008b8 	.word	0x200008b8

08004548 <sFLASH_CS_LOW>:

void sFLASH_CS_LOW(void){ //select chip
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0

	flash_conf.select_chip();
 800454c:	4b02      	ldr	r3, [pc, #8]	; (8004558 <sFLASH_CS_LOW+0x10>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	4798      	blx	r3

}
 8004552:	bf00      	nop
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	200008a4 	.word	0x200008a4

0800455c <sFLASH_CS_HIGH>:

void sFLASH_CS_HIGH(void){ //deselect chip
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0

	flash_conf.deselect_chip();
 8004560:	4b02      	ldr	r3, [pc, #8]	; (800456c <sFLASH_CS_HIGH+0x10>)
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	4798      	blx	r3
}
 8004566:	bf00      	nop
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	200008a4 	.word	0x200008a4

08004570 <sFLASH_EraseSector>:
  * @brief  Erases the specified FLASH sector.
  * @param  SectorAddr: address of the sector to erase.
  * @retval None
  */
void sFLASH_EraseSector(uint32_t SectorAddr)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /*!< Send write enable instruction */
  sFLASH_WriteEnable();
 8004578:	f000 f97c 	bl	8004874 <sFLASH_WriteEnable>

  /*!< Sector Erase */
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 800457c:	f7ff ffe4 	bl	8004548 <sFLASH_CS_LOW>
  /*!< Send Sector Erase instruction */
  sFLASH_SendByte(sFLASH_CMD_SE);
 8004580:	2020      	movs	r0, #32
 8004582:	f000 f967 	bl	8004854 <sFLASH_SendByte>
  /*!< Send SectorAddr high nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	0c1b      	lsrs	r3, r3, #16
 800458a:	b2db      	uxtb	r3, r3
 800458c:	4618      	mov	r0, r3
 800458e:	f000 f961 	bl	8004854 <sFLASH_SendByte>
  /*!< Send SectorAddr medium nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	0a1b      	lsrs	r3, r3, #8
 8004596:	b2db      	uxtb	r3, r3
 8004598:	4618      	mov	r0, r3
 800459a:	f000 f95b 	bl	8004854 <sFLASH_SendByte>
  /*!< Send SectorAddr low nibble address byte */
  sFLASH_SendByte(SectorAddr & 0xFF);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 f956 	bl	8004854 <sFLASH_SendByte>
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80045a8:	f7ff ffd8 	bl	800455c <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 80045ac:	f000 f96d 	bl	800488a <sFLASH_WaitForWriteEnd>
}
 80045b0:	bf00      	nop
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <sFLASH_WritePage>:
  * @param  NumByteToWrite: number of bytes to write to the FLASH, must be equal
  *         or less than "sFLASH_PAGESIZE" value.
  * @retval None
  */
void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	4613      	mov	r3, r2
 80045c4:	80fb      	strh	r3, [r7, #6]
  /*!< Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 80045c6:	f000 f955 	bl	8004874 <sFLASH_WriteEnable>

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80045ca:	f7ff ffbd 	bl	8004548 <sFLASH_CS_LOW>
  /*!< Send "Write to Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 80045ce:	2002      	movs	r0, #2
 80045d0:	f000 f940 	bl	8004854 <sFLASH_SendByte>
  /*!< Send WriteAddr high nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	0c1b      	lsrs	r3, r3, #16
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 f93a 	bl	8004854 <sFLASH_SendByte>
  /*!< Send WriteAddr medium nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	0a1b      	lsrs	r3, r3, #8
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 f934 	bl	8004854 <sFLASH_SendByte>
  /*!< Send WriteAddr low nibble address byte to write to */
  sFLASH_SendByte(WriteAddr & 0xFF);
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 f92f 	bl	8004854 <sFLASH_SendByte>

  /*!< while there is data to be written on the FLASH */
  while (NumByteToWrite--)
 80045f6:	e007      	b.n	8004608 <sFLASH_WritePage+0x50>
  {
    /*!< Send the current byte */
    sFLASH_SendByte(*pBuffer);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 f929 	bl	8004854 <sFLASH_SendByte>
    /*!< Point on the next byte to be written */
    pBuffer++;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	3301      	adds	r3, #1
 8004606:	60fb      	str	r3, [r7, #12]
  while (NumByteToWrite--)
 8004608:	88fb      	ldrh	r3, [r7, #6]
 800460a:	1e5a      	subs	r2, r3, #1
 800460c:	80fa      	strh	r2, [r7, #6]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1f2      	bne.n	80045f8 <sFLASH_WritePage+0x40>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8004612:	f7ff ffa3 	bl	800455c <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8004616:	f000 f938 	bl	800488a <sFLASH_WaitForWriteEnd>
}
 800461a:	bf00      	nop
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <sFLASH_WriteBuffer>:
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b086      	sub	sp, #24
 8004626:	af00      	add	r7, sp, #0
 8004628:	60f8      	str	r0, [r7, #12]
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	4613      	mov	r3, r2
 800462e:	80fb      	strh	r3, [r7, #6]
  uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 8004630:	2300      	movs	r3, #0
 8004632:	75fb      	strb	r3, [r7, #23]
 8004634:	2300      	movs	r3, #0
 8004636:	75bb      	strb	r3, [r7, #22]
 8004638:	2300      	movs	r3, #0
 800463a:	757b      	strb	r3, [r7, #21]
 800463c:	2300      	movs	r3, #0
 800463e:	753b      	strb	r3, [r7, #20]
 8004640:	2300      	movs	r3, #0
 8004642:	74fb      	strb	r3, [r7, #19]

  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	757b      	strb	r3, [r7, #21]
  count = sFLASH_SPI_PAGESIZE - Addr;
 8004648:	7d7b      	ldrb	r3, [r7, #21]
 800464a:	425b      	negs	r3, r3
 800464c:	753b      	strb	r3, [r7, #20]
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 800464e:	88fb      	ldrh	r3, [r7, #6]
 8004650:	0a1b      	lsrs	r3, r3, #8
 8004652:	b29b      	uxth	r3, r3
 8004654:	75fb      	strb	r3, [r7, #23]
  NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 8004656:	88fb      	ldrh	r3, [r7, #6]
 8004658:	75bb      	strb	r3, [r7, #22]

  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 800465a:	7d7b      	ldrb	r3, [r7, #21]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d124      	bne.n	80046aa <sFLASH_WriteBuffer+0x88>
  {
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8004660:	7dfb      	ldrb	r3, [r7, #23]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d114      	bne.n	8004690 <sFLASH_WriteBuffer+0x6e>
    {
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 8004666:	88fb      	ldrh	r3, [r7, #6]
 8004668:	461a      	mov	r2, r3
 800466a:	68b9      	ldr	r1, [r7, #8]
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f7ff ffa3 	bl	80045b8 <sFLASH_WritePage>
      {
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
      }
    }
  }
}
 8004672:	e07b      	b.n	800476c <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8004674:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f7ff ff9c 	bl	80045b8 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004686:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800468e:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8004690:	7dfb      	ldrb	r3, [r7, #23]
 8004692:	1e5a      	subs	r2, r3, #1
 8004694:	75fa      	strb	r2, [r7, #23]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1ec      	bne.n	8004674 <sFLASH_WriteBuffer+0x52>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 800469a:	7dbb      	ldrb	r3, [r7, #22]
 800469c:	b29b      	uxth	r3, r3
 800469e:	461a      	mov	r2, r3
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f7ff ff88 	bl	80045b8 <sFLASH_WritePage>
}
 80046a8:	e060      	b.n	800476c <sFLASH_WriteBuffer+0x14a>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 80046aa:	7dfb      	ldrb	r3, [r7, #23]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d125      	bne.n	80046fc <sFLASH_WriteBuffer+0xda>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 80046b0:	7dba      	ldrb	r2, [r7, #22]
 80046b2:	7d3b      	ldrb	r3, [r7, #20]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d91a      	bls.n	80046ee <sFLASH_WriteBuffer+0xcc>
        temp = NumOfSingle - count;
 80046b8:	7dba      	ldrb	r2, [r7, #22]
 80046ba:	7d3b      	ldrb	r3, [r7, #20]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	74fb      	strb	r3, [r7, #19]
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 80046c0:	7d3b      	ldrb	r3, [r7, #20]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	461a      	mov	r2, r3
 80046c6:	68b9      	ldr	r1, [r7, #8]
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f7ff ff75 	bl	80045b8 <sFLASH_WritePage>
        WriteAddr +=  count;
 80046ce:	7d3b      	ldrb	r3, [r7, #20]
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	4413      	add	r3, r2
 80046d4:	60bb      	str	r3, [r7, #8]
        pBuffer += count;
 80046d6:	7d3b      	ldrb	r3, [r7, #20]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	4413      	add	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 80046de:	7cfb      	ldrb	r3, [r7, #19]
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	461a      	mov	r2, r3
 80046e4:	68b9      	ldr	r1, [r7, #8]
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f7ff ff66 	bl	80045b8 <sFLASH_WritePage>
}
 80046ec:	e03e      	b.n	800476c <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 80046ee:	88fb      	ldrh	r3, [r7, #6]
 80046f0:	461a      	mov	r2, r3
 80046f2:	68b9      	ldr	r1, [r7, #8]
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f7ff ff5f 	bl	80045b8 <sFLASH_WritePage>
}
 80046fa:	e037      	b.n	800476c <sFLASH_WriteBuffer+0x14a>
      NumByteToWrite -= count;
 80046fc:	7d3b      	ldrb	r3, [r7, #20]
 80046fe:	b29b      	uxth	r3, r3
 8004700:	88fa      	ldrh	r2, [r7, #6]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	80fb      	strh	r3, [r7, #6]
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8004706:	88fb      	ldrh	r3, [r7, #6]
 8004708:	0a1b      	lsrs	r3, r3, #8
 800470a:	b29b      	uxth	r3, r3
 800470c:	75fb      	strb	r3, [r7, #23]
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 800470e:	88fb      	ldrh	r3, [r7, #6]
 8004710:	75bb      	strb	r3, [r7, #22]
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 8004712:	7d3b      	ldrb	r3, [r7, #20]
 8004714:	b29b      	uxth	r3, r3
 8004716:	461a      	mov	r2, r3
 8004718:	68b9      	ldr	r1, [r7, #8]
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f7ff ff4c 	bl	80045b8 <sFLASH_WritePage>
      WriteAddr +=  count;
 8004720:	7d3b      	ldrb	r3, [r7, #20]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	4413      	add	r3, r2
 8004726:	60bb      	str	r3, [r7, #8]
      pBuffer += count;
 8004728:	7d3b      	ldrb	r3, [r7, #20]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	4413      	add	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8004730:	e00d      	b.n	800474e <sFLASH_WriteBuffer+0x12c>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8004732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004736:	68b9      	ldr	r1, [r7, #8]
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f7ff ff3d 	bl	80045b8 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004744:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800474c:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 800474e:	7dfb      	ldrb	r3, [r7, #23]
 8004750:	1e5a      	subs	r2, r3, #1
 8004752:	75fa      	strb	r2, [r7, #23]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1ec      	bne.n	8004732 <sFLASH_WriteBuffer+0x110>
      if (NumOfSingle != 0)
 8004758:	7dbb      	ldrb	r3, [r7, #22]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d006      	beq.n	800476c <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 800475e:	7dbb      	ldrb	r3, [r7, #22]
 8004760:	b29b      	uxth	r3, r3
 8004762:	461a      	mov	r2, r3
 8004764:	68b9      	ldr	r1, [r7, #8]
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f7ff ff26 	bl	80045b8 <sFLASH_WritePage>
}
 800476c:	bf00      	nop
 800476e:	3718      	adds	r7, #24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <sFLASH_ReadBuffer>:
  * @param  ReadAddr: FLASH's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the FLASH.
  * @retval None
  */
void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	4613      	mov	r3, r2
 8004780:	80fb      	strh	r3, [r7, #6]
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8004782:	f7ff fee1 	bl	8004548 <sFLASH_CS_LOW>

  /*!< Send "Read from Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_READ);
 8004786:	2003      	movs	r0, #3
 8004788:	f000 f864 	bl	8004854 <sFLASH_SendByte>

  /*!< Send ReadAddr high nibble address byte to read from */
  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	0c1b      	lsrs	r3, r3, #16
 8004790:	b2db      	uxtb	r3, r3
 8004792:	4618      	mov	r0, r3
 8004794:	f000 f85e 	bl	8004854 <sFLASH_SendByte>
  /*!< Send ReadAddr medium nibble address byte to read from */
  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	0a1b      	lsrs	r3, r3, #8
 800479c:	b2db      	uxtb	r3, r3
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 f858 	bl	8004854 <sFLASH_SendByte>
  /*!< Send ReadAddr low nibble address byte to read from */
  sFLASH_SendByte(ReadAddr & 0xFF);
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 f853 	bl	8004854 <sFLASH_SendByte>

  while (NumByteToRead--) /*!< while there is data to be read */
 80047ae:	e008      	b.n	80047c2 <sFLASH_ReadBuffer+0x4e>
  {
    /*!< Read a byte from the FLASH */
    //*pBuffer = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
	  *pBuffer = sFLASH_ReadByte();
 80047b0:	f000 f846 	bl	8004840 <sFLASH_ReadByte>
 80047b4:	4603      	mov	r3, r0
 80047b6:	461a      	mov	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	701a      	strb	r2, [r3, #0]
    /*!< Point to the next location where the byte read will be saved */
    pBuffer++;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	3301      	adds	r3, #1
 80047c0:	60fb      	str	r3, [r7, #12]
  while (NumByteToRead--) /*!< while there is data to be read */
 80047c2:	88fb      	ldrh	r3, [r7, #6]
 80047c4:	1e5a      	subs	r2, r3, #1
 80047c6:	80fa      	strh	r2, [r7, #6]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1f1      	bne.n	80047b0 <sFLASH_ReadBuffer+0x3c>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80047cc:	f7ff fec6 	bl	800455c <sFLASH_CS_HIGH>
}
 80047d0:	bf00      	nop
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <sFLASH_ReadID>:
  * @brief  Reads FLASH identification.
  * @param  None
  * @retval FLASH identification
  */
uint32_t sFLASH_ReadID(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80047de:	2300      	movs	r3, #0
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	2300      	movs	r3, #0
 80047e4:	60bb      	str	r3, [r7, #8]
 80047e6:	2300      	movs	r3, #0
 80047e8:	607b      	str	r3, [r7, #4]
 80047ea:	2300      	movs	r3, #0
 80047ec:	603b      	str	r3, [r7, #0]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80047ee:	f7ff feab 	bl	8004548 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 80047f2:	f7ff feb3 	bl	800455c <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 80047f6:	f7ff fea7 	bl	8004548 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 80047fa:	f7ff feaf 	bl	800455c <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 80047fe:	f7ff fea3 	bl	8004548 <sFLASH_CS_LOW>


  /*!< Send "RDID " instruction */
  sFLASH_SendByte(sFLASH_CMD_RDID);
 8004802:	209f      	movs	r0, #159	; 0x9f
 8004804:	f000 f826 	bl	8004854 <sFLASH_SendByte>

  /*!< Read a byte from the FLASH */
  Temp0 = sFLASH_ReadByte();
 8004808:	f000 f81a 	bl	8004840 <sFLASH_ReadByte>
 800480c:	4603      	mov	r3, r0
 800480e:	60bb      	str	r3, [r7, #8]

  /*!< Read a byte from the FLASH */
  Temp1 = sFLASH_ReadByte();
 8004810:	f000 f816 	bl	8004840 <sFLASH_ReadByte>
 8004814:	4603      	mov	r3, r0
 8004816:	607b      	str	r3, [r7, #4]

  /*!< Read a byte from the FLASH */
  Temp2 = sFLASH_ReadByte();
 8004818:	f000 f812 	bl	8004840 <sFLASH_ReadByte>
 800481c:	4603      	mov	r3, r0
 800481e:	603b      	str	r3, [r7, #0]

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8004820:	f7ff fe9c 	bl	800455c <sFLASH_CS_HIGH>

  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	041a      	lsls	r2, r3, #16
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	021b      	lsls	r3, r3, #8
 800482c:	4313      	orrs	r3, r2
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	4313      	orrs	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]

  return Temp;
 8004834:	68fb      	ldr	r3, [r7, #12]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
	...

08004840 <sFLASH_ReadByte>:
  *         has been previously called.
  * @param  None
  * @retval Byte Read from the SPI Flash.
  */
uint8_t sFLASH_ReadByte(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
	return flash_conf.receive_byte();
 8004844:	4b02      	ldr	r3, [pc, #8]	; (8004850 <sFLASH_ReadByte+0x10>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	4798      	blx	r3
 800484a:	4603      	mov	r3, r0
}
 800484c:	4618      	mov	r0, r3
 800484e:	bd80      	pop	{r7, pc}
 8004850:	200008a4 	.word	0x200008a4

08004854 <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	71fb      	strb	r3, [r7, #7]
	flash_conf.send_byte(byte);
 800485e:	4b04      	ldr	r3, [pc, #16]	; (8004870 <sFLASH_SendByte+0x1c>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	79fa      	ldrb	r2, [r7, #7]
 8004864:	4610      	mov	r0, r2
 8004866:	4798      	blx	r3
}
 8004868:	bf00      	nop
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	200008a4 	.word	0x200008a4

08004874 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8004878:	f7ff fe66 	bl	8004548 <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 800487c:	2006      	movs	r0, #6
 800487e:	f7ff ffe9 	bl	8004854 <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8004882:	f7ff fe6b 	bl	800455c <sFLASH_CS_HIGH>
}
 8004886:	bf00      	nop
 8004888:	bd80      	pop	{r7, pc}

0800488a <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b082      	sub	sp, #8
 800488e:	af00      	add	r7, sp, #0
  uint8_t flashstatus = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	71fb      	strb	r3, [r7, #7]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8004894:	f7ff fe58 	bl	8004548 <sFLASH_CS_LOW>

  /*!< Send "Read Status Register" instruction */
  sFLASH_SendByte(sFLASH_CMD_RDSR);
 8004898:	2005      	movs	r0, #5
 800489a:	f7ff ffdb 	bl	8004854 <sFLASH_SendByte>
  do
  {
    /*!< Send a dummy byte to generate the clock needed by the FLASH
    and put the value of the status register in FLASH_Status variable */
    //flashstatus = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
	  flashstatus = sFLASH_ReadByte();
 800489e:	f7ff ffcf 	bl	8004840 <sFLASH_ReadByte>
 80048a2:	4603      	mov	r3, r0
 80048a4:	71fb      	strb	r3, [r7, #7]

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 80048a6:	79fb      	ldrb	r3, [r7, #7]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1f6      	bne.n	800489e <sFLASH_WaitForWriteEnd+0x14>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80048b0:	f7ff fe54 	bl	800455c <sFLASH_CS_HIGH>
}
 80048b4:	bf00      	nop
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <SPI_flash_set>:
#include "SPI_flash_io.h"


SPI_HandleTypeDef spi_interface;

void SPI_flash_set(SPI_HandleTypeDef hspi){
 80048bc:	b084      	sub	sp, #16
 80048be:	b580      	push	{r7, lr}
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	f107 0c08 	add.w	ip, r7, #8
 80048c6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	spi_interface = hspi;
 80048ca:	4b07      	ldr	r3, [pc, #28]	; (80048e8 <SPI_flash_set+0x2c>)
 80048cc:	4618      	mov	r0, r3
 80048ce:	f107 0308 	add.w	r3, r7, #8
 80048d2:	2258      	movs	r2, #88	; 0x58
 80048d4:	4619      	mov	r1, r3
 80048d6:	f017 fcec 	bl	801c2b2 <memcpy>
}
 80048da:	bf00      	nop
 80048dc:	46bd      	mov	sp, r7
 80048de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048e2:	b004      	add	sp, #16
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	200008c8 	.word	0x200008c8

080048ec <SPI_flash_read_byte>:

uint8_t SPI_flash_read_byte(void){
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
	uint8_t byte;

	HAL_SPI_Receive(&spi_interface, &byte, 1, 5000);
 80048f2:	1df9      	adds	r1, r7, #7
 80048f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80048f8:	2201      	movs	r2, #1
 80048fa:	4804      	ldr	r0, [pc, #16]	; (800490c <SPI_flash_read_byte+0x20>)
 80048fc:	f001 fa38 	bl	8005d70 <HAL_SPI_Receive>
	return byte;
 8004900:	79fb      	ldrb	r3, [r7, #7]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	200008c8 	.word	0x200008c8

08004910 <SPI_flash_send_byte>:


void SPI_flash_send_byte(uint8_t byte){
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	4603      	mov	r3, r0
 8004918:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&spi_interface, &byte, 1, 5000);
 800491a:	1df9      	adds	r1, r7, #7
 800491c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004920:	2201      	movs	r2, #1
 8004922:	4803      	ldr	r0, [pc, #12]	; (8004930 <SPI_flash_send_byte+0x20>)
 8004924:	f001 f8e1 	bl	8005aea <HAL_SPI_Transmit>

}
 8004928:	bf00      	nop
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	200008c8 	.word	0x200008c8

08004934 <SPI_flash_select>:

void SPI_flash_select(void){
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8004938:	2200      	movs	r2, #0
 800493a:	2110      	movs	r1, #16
 800493c:	4802      	ldr	r0, [pc, #8]	; (8004948 <SPI_flash_select+0x14>)
 800493e:	f000 fb67 	bl	8005010 <HAL_GPIO_WritePin>
}
 8004942:	bf00      	nop
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40020000 	.word	0x40020000

0800494c <SPI_flash_deselect>:

void SPI_flash_deselect(void){
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8004950:	2201      	movs	r2, #1
 8004952:	2110      	movs	r1, #16
 8004954:	4802      	ldr	r0, [pc, #8]	; (8004960 <SPI_flash_deselect+0x14>)
 8004956:	f000 fb5b 	bl	8005010 <HAL_GPIO_WritePin>
}
 800495a:	bf00      	nop
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40020000 	.word	0x40020000

08004964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004968:	4b0e      	ldr	r3, [pc, #56]	; (80049a4 <HAL_Init+0x40>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a0d      	ldr	r2, [pc, #52]	; (80049a4 <HAL_Init+0x40>)
 800496e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004972:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004974:	4b0b      	ldr	r3, [pc, #44]	; (80049a4 <HAL_Init+0x40>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a0a      	ldr	r2, [pc, #40]	; (80049a4 <HAL_Init+0x40>)
 800497a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800497e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004980:	4b08      	ldr	r3, [pc, #32]	; (80049a4 <HAL_Init+0x40>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a07      	ldr	r2, [pc, #28]	; (80049a4 <HAL_Init+0x40>)
 8004986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800498a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800498c:	2003      	movs	r0, #3
 800498e:	f000 f8d8 	bl	8004b42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004992:	200f      	movs	r0, #15
 8004994:	f7fd fddc 	bl	8002550 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004998:	f7fd fcbe 	bl	8002318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	40023c00 	.word	0x40023c00

080049a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049ac:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <HAL_IncTick+0x20>)
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	461a      	mov	r2, r3
 80049b2:	4b06      	ldr	r3, [pc, #24]	; (80049cc <HAL_IncTick+0x24>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4413      	add	r3, r2
 80049b8:	4a04      	ldr	r2, [pc, #16]	; (80049cc <HAL_IncTick+0x24>)
 80049ba:	6013      	str	r3, [r2, #0]
}
 80049bc:	bf00      	nop
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	200000a0 	.word	0x200000a0
 80049cc:	20000920 	.word	0x20000920

080049d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
  return uwTick;
 80049d4:	4b03      	ldr	r3, [pc, #12]	; (80049e4 <HAL_GetTick+0x14>)
 80049d6:	681b      	ldr	r3, [r3, #0]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	20000920 	.word	0x20000920

080049e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049f8:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <__NVIC_SetPriorityGrouping+0x44>)
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a04:	4013      	ands	r3, r2
 8004a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a1a:	4a04      	ldr	r2, [pc, #16]	; (8004a2c <__NVIC_SetPriorityGrouping+0x44>)
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	60d3      	str	r3, [r2, #12]
}
 8004a20:	bf00      	nop
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	e000ed00 	.word	0xe000ed00

08004a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a34:	4b04      	ldr	r3, [pc, #16]	; (8004a48 <__NVIC_GetPriorityGrouping+0x18>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	0a1b      	lsrs	r3, r3, #8
 8004a3a:	f003 0307 	and.w	r3, r3, #7
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	e000ed00 	.word	0xe000ed00

08004a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	4603      	mov	r3, r0
 8004a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	db0b      	blt.n	8004a76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a5e:	79fb      	ldrb	r3, [r7, #7]
 8004a60:	f003 021f 	and.w	r2, r3, #31
 8004a64:	4907      	ldr	r1, [pc, #28]	; (8004a84 <__NVIC_EnableIRQ+0x38>)
 8004a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a6a:	095b      	lsrs	r3, r3, #5
 8004a6c:	2001      	movs	r0, #1
 8004a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8004a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	e000e100 	.word	0xe000e100

08004a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4603      	mov	r3, r0
 8004a90:	6039      	str	r1, [r7, #0]
 8004a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	db0a      	blt.n	8004ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	490c      	ldr	r1, [pc, #48]	; (8004ad4 <__NVIC_SetPriority+0x4c>)
 8004aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa6:	0112      	lsls	r2, r2, #4
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	440b      	add	r3, r1
 8004aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ab0:	e00a      	b.n	8004ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	4908      	ldr	r1, [pc, #32]	; (8004ad8 <__NVIC_SetPriority+0x50>)
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	3b04      	subs	r3, #4
 8004ac0:	0112      	lsls	r2, r2, #4
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	761a      	strb	r2, [r3, #24]
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	e000e100 	.word	0xe000e100
 8004ad8:	e000ed00 	.word	0xe000ed00

08004adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b089      	sub	sp, #36	; 0x24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f1c3 0307 	rsb	r3, r3, #7
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	bf28      	it	cs
 8004afa:	2304      	movcs	r3, #4
 8004afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	3304      	adds	r3, #4
 8004b02:	2b06      	cmp	r3, #6
 8004b04:	d902      	bls.n	8004b0c <NVIC_EncodePriority+0x30>
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	3b03      	subs	r3, #3
 8004b0a:	e000      	b.n	8004b0e <NVIC_EncodePriority+0x32>
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b10:	f04f 32ff 	mov.w	r2, #4294967295
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1a:	43da      	mvns	r2, r3
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	401a      	ands	r2, r3
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b24:	f04f 31ff 	mov.w	r1, #4294967295
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2e:	43d9      	mvns	r1, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b34:	4313      	orrs	r3, r2
         );
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3724      	adds	r7, #36	; 0x24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b082      	sub	sp, #8
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7ff ff4c 	bl	80049e8 <__NVIC_SetPriorityGrouping>
}
 8004b50:	bf00      	nop
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	4603      	mov	r3, r0
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b66:	2300      	movs	r3, #0
 8004b68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b6a:	f7ff ff61 	bl	8004a30 <__NVIC_GetPriorityGrouping>
 8004b6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	68b9      	ldr	r1, [r7, #8]
 8004b74:	6978      	ldr	r0, [r7, #20]
 8004b76:	f7ff ffb1 	bl	8004adc <NVIC_EncodePriority>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b80:	4611      	mov	r1, r2
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff ff80 	bl	8004a88 <__NVIC_SetPriority>
}
 8004b88:	bf00      	nop
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	4603      	mov	r3, r0
 8004b98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff ff54 	bl	8004a4c <__NVIC_EnableIRQ>
}
 8004ba4:	bf00      	nop
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e00e      	b.n	8004bdc <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	795b      	ldrb	r3, [r3, #5]
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d105      	bne.n	8004bd4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7fd fbce 	bl	8002370 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004bf2:	f7ff feed 	bl	80049d0 <HAL_GetTick>
 8004bf6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d008      	beq.n	8004c16 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2280      	movs	r2, #128	; 0x80
 8004c08:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e052      	b.n	8004cbc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0216 	bic.w	r2, r2, #22
 8004c24:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	695a      	ldr	r2, [r3, #20]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c34:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d103      	bne.n	8004c46 <HAL_DMA_Abort+0x62>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d007      	beq.n	8004c56 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0208 	bic.w	r2, r2, #8
 8004c54:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0201 	bic.w	r2, r2, #1
 8004c64:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c66:	e013      	b.n	8004c90 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c68:	f7ff feb2 	bl	80049d0 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b05      	cmp	r3, #5
 8004c74:	d90c      	bls.n	8004c90 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2203      	movs	r2, #3
 8004c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e015      	b.n	8004cbc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1e4      	bne.n	8004c68 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca2:	223f      	movs	r2, #63	; 0x3f
 8004ca4:	409a      	lsls	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d004      	beq.n	8004ce2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2280      	movs	r2, #128	; 0x80
 8004cdc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e00c      	b.n	8004cfc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2205      	movs	r2, #5
 8004ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0201 	bic.w	r2, r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b089      	sub	sp, #36	; 0x24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61fb      	str	r3, [r7, #28]
 8004d22:	e159      	b.n	8004fd8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d24:	2201      	movs	r2, #1
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	4013      	ands	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	f040 8148 	bne.w	8004fd2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d005      	beq.n	8004d5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d130      	bne.n	8004dbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	2203      	movs	r2, #3
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	43db      	mvns	r3, r3
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d90:	2201      	movs	r2, #1
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	fa02 f303 	lsl.w	r3, r2, r3
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	091b      	lsrs	r3, r3, #4
 8004da6:	f003 0201 	and.w	r2, r3, #1
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f003 0303 	and.w	r3, r3, #3
 8004dc4:	2b03      	cmp	r3, #3
 8004dc6:	d017      	beq.n	8004df8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	2203      	movs	r2, #3
 8004dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f003 0303 	and.w	r3, r3, #3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d123      	bne.n	8004e4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	08da      	lsrs	r2, r3, #3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3208      	adds	r2, #8
 8004e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	220f      	movs	r2, #15
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	43db      	mvns	r3, r3
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	4013      	ands	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	691a      	ldr	r2, [r3, #16]
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	08da      	lsrs	r2, r3, #3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	3208      	adds	r2, #8
 8004e46:	69b9      	ldr	r1, [r7, #24]
 8004e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	2203      	movs	r2, #3
 8004e58:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5c:	43db      	mvns	r3, r3
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	4013      	ands	r3, r2
 8004e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f003 0203 	and.w	r2, r3, #3
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 80a2 	beq.w	8004fd2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	4b57      	ldr	r3, [pc, #348]	; (8004ff0 <HAL_GPIO_Init+0x2e8>)
 8004e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e96:	4a56      	ldr	r2, [pc, #344]	; (8004ff0 <HAL_GPIO_Init+0x2e8>)
 8004e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e9e:	4b54      	ldr	r3, [pc, #336]	; (8004ff0 <HAL_GPIO_Init+0x2e8>)
 8004ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004eaa:	4a52      	ldr	r2, [pc, #328]	; (8004ff4 <HAL_GPIO_Init+0x2ec>)
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	089b      	lsrs	r3, r3, #2
 8004eb0:	3302      	adds	r3, #2
 8004eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	220f      	movs	r2, #15
 8004ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec6:	43db      	mvns	r3, r3
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a49      	ldr	r2, [pc, #292]	; (8004ff8 <HAL_GPIO_Init+0x2f0>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d019      	beq.n	8004f0a <HAL_GPIO_Init+0x202>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a48      	ldr	r2, [pc, #288]	; (8004ffc <HAL_GPIO_Init+0x2f4>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d013      	beq.n	8004f06 <HAL_GPIO_Init+0x1fe>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a47      	ldr	r2, [pc, #284]	; (8005000 <HAL_GPIO_Init+0x2f8>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d00d      	beq.n	8004f02 <HAL_GPIO_Init+0x1fa>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a46      	ldr	r2, [pc, #280]	; (8005004 <HAL_GPIO_Init+0x2fc>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d007      	beq.n	8004efe <HAL_GPIO_Init+0x1f6>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a45      	ldr	r2, [pc, #276]	; (8005008 <HAL_GPIO_Init+0x300>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d101      	bne.n	8004efa <HAL_GPIO_Init+0x1f2>
 8004ef6:	2304      	movs	r3, #4
 8004ef8:	e008      	b.n	8004f0c <HAL_GPIO_Init+0x204>
 8004efa:	2307      	movs	r3, #7
 8004efc:	e006      	b.n	8004f0c <HAL_GPIO_Init+0x204>
 8004efe:	2303      	movs	r3, #3
 8004f00:	e004      	b.n	8004f0c <HAL_GPIO_Init+0x204>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e002      	b.n	8004f0c <HAL_GPIO_Init+0x204>
 8004f06:	2301      	movs	r3, #1
 8004f08:	e000      	b.n	8004f0c <HAL_GPIO_Init+0x204>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	69fa      	ldr	r2, [r7, #28]
 8004f0e:	f002 0203 	and.w	r2, r2, #3
 8004f12:	0092      	lsls	r2, r2, #2
 8004f14:	4093      	lsls	r3, r2
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f1c:	4935      	ldr	r1, [pc, #212]	; (8004ff4 <HAL_GPIO_Init+0x2ec>)
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	089b      	lsrs	r3, r3, #2
 8004f22:	3302      	adds	r3, #2
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f2a:	4b38      	ldr	r3, [pc, #224]	; (800500c <HAL_GPIO_Init+0x304>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	43db      	mvns	r3, r3
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	4013      	ands	r3, r2
 8004f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f4e:	4a2f      	ldr	r2, [pc, #188]	; (800500c <HAL_GPIO_Init+0x304>)
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f54:	4b2d      	ldr	r3, [pc, #180]	; (800500c <HAL_GPIO_Init+0x304>)
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	4013      	ands	r3, r2
 8004f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d003      	beq.n	8004f78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f78:	4a24      	ldr	r2, [pc, #144]	; (800500c <HAL_GPIO_Init+0x304>)
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f7e:	4b23      	ldr	r3, [pc, #140]	; (800500c <HAL_GPIO_Init+0x304>)
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	43db      	mvns	r3, r3
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fa2:	4a1a      	ldr	r2, [pc, #104]	; (800500c <HAL_GPIO_Init+0x304>)
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fa8:	4b18      	ldr	r3, [pc, #96]	; (800500c <HAL_GPIO_Init+0x304>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fcc:	4a0f      	ldr	r2, [pc, #60]	; (800500c <HAL_GPIO_Init+0x304>)
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	61fb      	str	r3, [r7, #28]
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	2b0f      	cmp	r3, #15
 8004fdc:	f67f aea2 	bls.w	8004d24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004fe0:	bf00      	nop
 8004fe2:	bf00      	nop
 8004fe4:	3724      	adds	r7, #36	; 0x24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40023800 	.word	0x40023800
 8004ff4:	40013800 	.word	0x40013800
 8004ff8:	40020000 	.word	0x40020000
 8004ffc:	40020400 	.word	0x40020400
 8005000:	40020800 	.word	0x40020800
 8005004:	40020c00 	.word	0x40020c00
 8005008:	40021000 	.word	0x40021000
 800500c:	40013c00 	.word	0x40013c00

08005010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	807b      	strh	r3, [r7, #2]
 800501c:	4613      	mov	r3, r2
 800501e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005020:	787b      	ldrb	r3, [r7, #1]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005026:	887a      	ldrh	r2, [r7, #2]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800502c:	e003      	b.n	8005036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800502e:	887b      	ldrh	r3, [r7, #2]
 8005030:	041a      	lsls	r2, r3, #16
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	619a      	str	r2, [r3, #24]
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
	...

08005044 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e267      	b.n	8005526 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d075      	beq.n	800514e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005062:	4b88      	ldr	r3, [pc, #544]	; (8005284 <HAL_RCC_OscConfig+0x240>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 030c 	and.w	r3, r3, #12
 800506a:	2b04      	cmp	r3, #4
 800506c:	d00c      	beq.n	8005088 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800506e:	4b85      	ldr	r3, [pc, #532]	; (8005284 <HAL_RCC_OscConfig+0x240>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005076:	2b08      	cmp	r3, #8
 8005078:	d112      	bne.n	80050a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800507a:	4b82      	ldr	r3, [pc, #520]	; (8005284 <HAL_RCC_OscConfig+0x240>)
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005082:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005086:	d10b      	bne.n	80050a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005088:	4b7e      	ldr	r3, [pc, #504]	; (8005284 <HAL_RCC_OscConfig+0x240>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d05b      	beq.n	800514c <HAL_RCC_OscConfig+0x108>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d157      	bne.n	800514c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e242      	b.n	8005526 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a8:	d106      	bne.n	80050b8 <HAL_RCC_OscConfig+0x74>
 80050aa:	4b76      	ldr	r3, [pc, #472]	; (8005284 <HAL_RCC_OscConfig+0x240>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a75      	ldr	r2, [pc, #468]	; (8005284 <HAL_RCC_OscConfig+0x240>)
 80050b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	e01d      	b.n	80050f4 <HAL_RCC_OscConfig+0xb0>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050c0:	d10c      	bne.n	80050dc <HAL_RCC_OscConfig+0x98>
 80050c2:	4b70      	ldr	r3, [pc, #448]	; (8005284 <HAL_RCC_OscConfig+0x240>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a6f      	ldr	r2, [pc, #444]	; (8005284 <HAL_RCC_OscConfig+0x240>)
 80050c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	4b6d      	ldr	r3, [pc, #436]	; (8005284 <HAL_RCC_OscConfig+0x240>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a6c      	ldr	r2, [pc, #432]	; (8005284 <HAL_RCC_OscConfig+0x240>)
 80050d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d8:	6013      	str	r3, [r2, #0]
 80050da:	e00b      	b.n	80050f4 <HAL_RCC_OscConfig+0xb0>
 80050dc:	4b69      	ldr	r3, [pc, #420]	; (8005284 <HAL_RCC_OscConfig+0x240>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a68      	ldr	r2, [pc, #416]	; (8005284 <HAL_RCC_OscConfig+0x240>)
 80050e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050e6:	6013      	str	r3, [r2, #0]
 80050e8:	4b66      	ldr	r3, [pc, #408]	; (8005284 <HAL_RCC_OscConfig+0x240>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a65      	ldr	r2, [pc, #404]	; (8005284 <HAL_RCC_OscConfig+0x240>)
 80050ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d013      	beq.n	8005124 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050fc:	f7ff fc68 	bl	80049d0 <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005104:	f7ff fc64 	bl	80049d0 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b64      	cmp	r3, #100	; 0x64
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e207      	b.n	8005526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005116:	4b5b      	ldr	r3, [pc, #364]	; (8005284 <HAL_RCC_OscConfig+0x240>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0f0      	beq.n	8005104 <HAL_RCC_OscConfig+0xc0>
 8005122:	e014      	b.n	800514e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005124:	f7ff fc54 	bl	80049d0 <HAL_GetTick>
 8005128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800512a:	e008      	b.n	800513e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800512c:	f7ff fc50 	bl	80049d0 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b64      	cmp	r3, #100	; 0x64
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e1f3      	b.n	8005526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800513e:	4b51      	ldr	r3, [pc, #324]	; (8005284 <HAL_RCC_OscConfig+0x240>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1f0      	bne.n	800512c <HAL_RCC_OscConfig+0xe8>
 800514a:	e000      	b.n	800514e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800514c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d063      	beq.n	8005222 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800515a:	4b4a      	ldr	r3, [pc, #296]	; (8005284 <HAL_RCC_OscConfig+0x240>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 030c 	and.w	r3, r3, #12
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00b      	beq.n	800517e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005166:	4b47      	ldr	r3, [pc, #284]	; (8005284 <HAL_RCC_OscConfig+0x240>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800516e:	2b08      	cmp	r3, #8
 8005170:	d11c      	bne.n	80051ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005172:	4b44      	ldr	r3, [pc, #272]	; (8005284 <HAL_RCC_OscConfig+0x240>)
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d116      	bne.n	80051ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800517e:	4b41      	ldr	r3, [pc, #260]	; (8005284 <HAL_RCC_OscConfig+0x240>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d005      	beq.n	8005196 <HAL_RCC_OscConfig+0x152>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d001      	beq.n	8005196 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e1c7      	b.n	8005526 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005196:	4b3b      	ldr	r3, [pc, #236]	; (8005284 <HAL_RCC_OscConfig+0x240>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	4937      	ldr	r1, [pc, #220]	; (8005284 <HAL_RCC_OscConfig+0x240>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051aa:	e03a      	b.n	8005222 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d020      	beq.n	80051f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051b4:	4b34      	ldr	r3, [pc, #208]	; (8005288 <HAL_RCC_OscConfig+0x244>)
 80051b6:	2201      	movs	r2, #1
 80051b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ba:	f7ff fc09 	bl	80049d0 <HAL_GetTick>
 80051be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051c0:	e008      	b.n	80051d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051c2:	f7ff fc05 	bl	80049d0 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d901      	bls.n	80051d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e1a8      	b.n	8005526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051d4:	4b2b      	ldr	r3, [pc, #172]	; (8005284 <HAL_RCC_OscConfig+0x240>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d0f0      	beq.n	80051c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051e0:	4b28      	ldr	r3, [pc, #160]	; (8005284 <HAL_RCC_OscConfig+0x240>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	4925      	ldr	r1, [pc, #148]	; (8005284 <HAL_RCC_OscConfig+0x240>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	600b      	str	r3, [r1, #0]
 80051f4:	e015      	b.n	8005222 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051f6:	4b24      	ldr	r3, [pc, #144]	; (8005288 <HAL_RCC_OscConfig+0x244>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051fc:	f7ff fbe8 	bl	80049d0 <HAL_GetTick>
 8005200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005202:	e008      	b.n	8005216 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005204:	f7ff fbe4 	bl	80049d0 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b02      	cmp	r3, #2
 8005210:	d901      	bls.n	8005216 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e187      	b.n	8005526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005216:	4b1b      	ldr	r3, [pc, #108]	; (8005284 <HAL_RCC_OscConfig+0x240>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1f0      	bne.n	8005204 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0308 	and.w	r3, r3, #8
 800522a:	2b00      	cmp	r3, #0
 800522c:	d036      	beq.n	800529c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d016      	beq.n	8005264 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005236:	4b15      	ldr	r3, [pc, #84]	; (800528c <HAL_RCC_OscConfig+0x248>)
 8005238:	2201      	movs	r2, #1
 800523a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523c:	f7ff fbc8 	bl	80049d0 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005244:	f7ff fbc4 	bl	80049d0 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e167      	b.n	8005526 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005256:	4b0b      	ldr	r3, [pc, #44]	; (8005284 <HAL_RCC_OscConfig+0x240>)
 8005258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0f0      	beq.n	8005244 <HAL_RCC_OscConfig+0x200>
 8005262:	e01b      	b.n	800529c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005264:	4b09      	ldr	r3, [pc, #36]	; (800528c <HAL_RCC_OscConfig+0x248>)
 8005266:	2200      	movs	r2, #0
 8005268:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800526a:	f7ff fbb1 	bl	80049d0 <HAL_GetTick>
 800526e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005270:	e00e      	b.n	8005290 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005272:	f7ff fbad 	bl	80049d0 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	2b02      	cmp	r3, #2
 800527e:	d907      	bls.n	8005290 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e150      	b.n	8005526 <HAL_RCC_OscConfig+0x4e2>
 8005284:	40023800 	.word	0x40023800
 8005288:	42470000 	.word	0x42470000
 800528c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005290:	4b88      	ldr	r3, [pc, #544]	; (80054b4 <HAL_RCC_OscConfig+0x470>)
 8005292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1ea      	bne.n	8005272 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 8097 	beq.w	80053d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052aa:	2300      	movs	r3, #0
 80052ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052ae:	4b81      	ldr	r3, [pc, #516]	; (80054b4 <HAL_RCC_OscConfig+0x470>)
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10f      	bne.n	80052da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ba:	2300      	movs	r3, #0
 80052bc:	60bb      	str	r3, [r7, #8]
 80052be:	4b7d      	ldr	r3, [pc, #500]	; (80054b4 <HAL_RCC_OscConfig+0x470>)
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	4a7c      	ldr	r2, [pc, #496]	; (80054b4 <HAL_RCC_OscConfig+0x470>)
 80052c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052c8:	6413      	str	r3, [r2, #64]	; 0x40
 80052ca:	4b7a      	ldr	r3, [pc, #488]	; (80054b4 <HAL_RCC_OscConfig+0x470>)
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052d2:	60bb      	str	r3, [r7, #8]
 80052d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052d6:	2301      	movs	r3, #1
 80052d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052da:	4b77      	ldr	r3, [pc, #476]	; (80054b8 <HAL_RCC_OscConfig+0x474>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d118      	bne.n	8005318 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052e6:	4b74      	ldr	r3, [pc, #464]	; (80054b8 <HAL_RCC_OscConfig+0x474>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a73      	ldr	r2, [pc, #460]	; (80054b8 <HAL_RCC_OscConfig+0x474>)
 80052ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052f2:	f7ff fb6d 	bl	80049d0 <HAL_GetTick>
 80052f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f8:	e008      	b.n	800530c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052fa:	f7ff fb69 	bl	80049d0 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d901      	bls.n	800530c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e10c      	b.n	8005526 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800530c:	4b6a      	ldr	r3, [pc, #424]	; (80054b8 <HAL_RCC_OscConfig+0x474>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005314:	2b00      	cmp	r3, #0
 8005316:	d0f0      	beq.n	80052fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d106      	bne.n	800532e <HAL_RCC_OscConfig+0x2ea>
 8005320:	4b64      	ldr	r3, [pc, #400]	; (80054b4 <HAL_RCC_OscConfig+0x470>)
 8005322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005324:	4a63      	ldr	r2, [pc, #396]	; (80054b4 <HAL_RCC_OscConfig+0x470>)
 8005326:	f043 0301 	orr.w	r3, r3, #1
 800532a:	6713      	str	r3, [r2, #112]	; 0x70
 800532c:	e01c      	b.n	8005368 <HAL_RCC_OscConfig+0x324>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	2b05      	cmp	r3, #5
 8005334:	d10c      	bne.n	8005350 <HAL_RCC_OscConfig+0x30c>
 8005336:	4b5f      	ldr	r3, [pc, #380]	; (80054b4 <HAL_RCC_OscConfig+0x470>)
 8005338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533a:	4a5e      	ldr	r2, [pc, #376]	; (80054b4 <HAL_RCC_OscConfig+0x470>)
 800533c:	f043 0304 	orr.w	r3, r3, #4
 8005340:	6713      	str	r3, [r2, #112]	; 0x70
 8005342:	4b5c      	ldr	r3, [pc, #368]	; (80054b4 <HAL_RCC_OscConfig+0x470>)
 8005344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005346:	4a5b      	ldr	r2, [pc, #364]	; (80054b4 <HAL_RCC_OscConfig+0x470>)
 8005348:	f043 0301 	orr.w	r3, r3, #1
 800534c:	6713      	str	r3, [r2, #112]	; 0x70
 800534e:	e00b      	b.n	8005368 <HAL_RCC_OscConfig+0x324>
 8005350:	4b58      	ldr	r3, [pc, #352]	; (80054b4 <HAL_RCC_OscConfig+0x470>)
 8005352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005354:	4a57      	ldr	r2, [pc, #348]	; (80054b4 <HAL_RCC_OscConfig+0x470>)
 8005356:	f023 0301 	bic.w	r3, r3, #1
 800535a:	6713      	str	r3, [r2, #112]	; 0x70
 800535c:	4b55      	ldr	r3, [pc, #340]	; (80054b4 <HAL_RCC_OscConfig+0x470>)
 800535e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005360:	4a54      	ldr	r2, [pc, #336]	; (80054b4 <HAL_RCC_OscConfig+0x470>)
 8005362:	f023 0304 	bic.w	r3, r3, #4
 8005366:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d015      	beq.n	800539c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005370:	f7ff fb2e 	bl	80049d0 <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005376:	e00a      	b.n	800538e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005378:	f7ff fb2a 	bl	80049d0 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	f241 3288 	movw	r2, #5000	; 0x1388
 8005386:	4293      	cmp	r3, r2
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e0cb      	b.n	8005526 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800538e:	4b49      	ldr	r3, [pc, #292]	; (80054b4 <HAL_RCC_OscConfig+0x470>)
 8005390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d0ee      	beq.n	8005378 <HAL_RCC_OscConfig+0x334>
 800539a:	e014      	b.n	80053c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800539c:	f7ff fb18 	bl	80049d0 <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053a2:	e00a      	b.n	80053ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053a4:	f7ff fb14 	bl	80049d0 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e0b5      	b.n	8005526 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053ba:	4b3e      	ldr	r3, [pc, #248]	; (80054b4 <HAL_RCC_OscConfig+0x470>)
 80053bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1ee      	bne.n	80053a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053c6:	7dfb      	ldrb	r3, [r7, #23]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d105      	bne.n	80053d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053cc:	4b39      	ldr	r3, [pc, #228]	; (80054b4 <HAL_RCC_OscConfig+0x470>)
 80053ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d0:	4a38      	ldr	r2, [pc, #224]	; (80054b4 <HAL_RCC_OscConfig+0x470>)
 80053d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 80a1 	beq.w	8005524 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053e2:	4b34      	ldr	r3, [pc, #208]	; (80054b4 <HAL_RCC_OscConfig+0x470>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 030c 	and.w	r3, r3, #12
 80053ea:	2b08      	cmp	r3, #8
 80053ec:	d05c      	beq.n	80054a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d141      	bne.n	800547a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053f6:	4b31      	ldr	r3, [pc, #196]	; (80054bc <HAL_RCC_OscConfig+0x478>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053fc:	f7ff fae8 	bl	80049d0 <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005404:	f7ff fae4 	bl	80049d0 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e087      	b.n	8005526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005416:	4b27      	ldr	r3, [pc, #156]	; (80054b4 <HAL_RCC_OscConfig+0x470>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1f0      	bne.n	8005404 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	69da      	ldr	r2, [r3, #28]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	431a      	orrs	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	019b      	lsls	r3, r3, #6
 8005432:	431a      	orrs	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005438:	085b      	lsrs	r3, r3, #1
 800543a:	3b01      	subs	r3, #1
 800543c:	041b      	lsls	r3, r3, #16
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005444:	061b      	lsls	r3, r3, #24
 8005446:	491b      	ldr	r1, [pc, #108]	; (80054b4 <HAL_RCC_OscConfig+0x470>)
 8005448:	4313      	orrs	r3, r2
 800544a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800544c:	4b1b      	ldr	r3, [pc, #108]	; (80054bc <HAL_RCC_OscConfig+0x478>)
 800544e:	2201      	movs	r2, #1
 8005450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005452:	f7ff fabd 	bl	80049d0 <HAL_GetTick>
 8005456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005458:	e008      	b.n	800546c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800545a:	f7ff fab9 	bl	80049d0 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d901      	bls.n	800546c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e05c      	b.n	8005526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800546c:	4b11      	ldr	r3, [pc, #68]	; (80054b4 <HAL_RCC_OscConfig+0x470>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0f0      	beq.n	800545a <HAL_RCC_OscConfig+0x416>
 8005478:	e054      	b.n	8005524 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800547a:	4b10      	ldr	r3, [pc, #64]	; (80054bc <HAL_RCC_OscConfig+0x478>)
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005480:	f7ff faa6 	bl	80049d0 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005488:	f7ff faa2 	bl	80049d0 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e045      	b.n	8005526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800549a:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <HAL_RCC_OscConfig+0x470>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1f0      	bne.n	8005488 <HAL_RCC_OscConfig+0x444>
 80054a6:	e03d      	b.n	8005524 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d107      	bne.n	80054c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e038      	b.n	8005526 <HAL_RCC_OscConfig+0x4e2>
 80054b4:	40023800 	.word	0x40023800
 80054b8:	40007000 	.word	0x40007000
 80054bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054c0:	4b1b      	ldr	r3, [pc, #108]	; (8005530 <HAL_RCC_OscConfig+0x4ec>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d028      	beq.n	8005520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054d8:	429a      	cmp	r2, r3
 80054da:	d121      	bne.n	8005520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d11a      	bne.n	8005520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054f0:	4013      	ands	r3, r2
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d111      	bne.n	8005520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005506:	085b      	lsrs	r3, r3, #1
 8005508:	3b01      	subs	r3, #1
 800550a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800550c:	429a      	cmp	r2, r3
 800550e:	d107      	bne.n	8005520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800551c:	429a      	cmp	r2, r3
 800551e:	d001      	beq.n	8005524 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e000      	b.n	8005526 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	40023800 	.word	0x40023800

08005534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e0cc      	b.n	80056e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005548:	4b68      	ldr	r3, [pc, #416]	; (80056ec <HAL_RCC_ClockConfig+0x1b8>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d90c      	bls.n	8005570 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005556:	4b65      	ldr	r3, [pc, #404]	; (80056ec <HAL_RCC_ClockConfig+0x1b8>)
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	b2d2      	uxtb	r2, r2
 800555c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800555e:	4b63      	ldr	r3, [pc, #396]	; (80056ec <HAL_RCC_ClockConfig+0x1b8>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0307 	and.w	r3, r3, #7
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	429a      	cmp	r2, r3
 800556a:	d001      	beq.n	8005570 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e0b8      	b.n	80056e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d020      	beq.n	80055be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	2b00      	cmp	r3, #0
 8005586:	d005      	beq.n	8005594 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005588:	4b59      	ldr	r3, [pc, #356]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	4a58      	ldr	r2, [pc, #352]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 800558e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005592:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0308 	and.w	r3, r3, #8
 800559c:	2b00      	cmp	r3, #0
 800559e:	d005      	beq.n	80055ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055a0:	4b53      	ldr	r3, [pc, #332]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	4a52      	ldr	r2, [pc, #328]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 80055a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055ac:	4b50      	ldr	r3, [pc, #320]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	494d      	ldr	r1, [pc, #308]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d044      	beq.n	8005654 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d107      	bne.n	80055e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055d2:	4b47      	ldr	r3, [pc, #284]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d119      	bne.n	8005612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e07f      	b.n	80056e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d003      	beq.n	80055f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055ee:	2b03      	cmp	r3, #3
 80055f0:	d107      	bne.n	8005602 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055f2:	4b3f      	ldr	r3, [pc, #252]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d109      	bne.n	8005612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e06f      	b.n	80056e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005602:	4b3b      	ldr	r3, [pc, #236]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e067      	b.n	80056e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005612:	4b37      	ldr	r3, [pc, #220]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f023 0203 	bic.w	r2, r3, #3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	4934      	ldr	r1, [pc, #208]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005620:	4313      	orrs	r3, r2
 8005622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005624:	f7ff f9d4 	bl	80049d0 <HAL_GetTick>
 8005628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800562a:	e00a      	b.n	8005642 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800562c:	f7ff f9d0 	bl	80049d0 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	f241 3288 	movw	r2, #5000	; 0x1388
 800563a:	4293      	cmp	r3, r2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e04f      	b.n	80056e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005642:	4b2b      	ldr	r3, [pc, #172]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 020c 	and.w	r2, r3, #12
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	429a      	cmp	r2, r3
 8005652:	d1eb      	bne.n	800562c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005654:	4b25      	ldr	r3, [pc, #148]	; (80056ec <HAL_RCC_ClockConfig+0x1b8>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	429a      	cmp	r2, r3
 8005660:	d20c      	bcs.n	800567c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005662:	4b22      	ldr	r3, [pc, #136]	; (80056ec <HAL_RCC_ClockConfig+0x1b8>)
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	b2d2      	uxtb	r2, r2
 8005668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800566a:	4b20      	ldr	r3, [pc, #128]	; (80056ec <HAL_RCC_ClockConfig+0x1b8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0307 	and.w	r3, r3, #7
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	429a      	cmp	r2, r3
 8005676:	d001      	beq.n	800567c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e032      	b.n	80056e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0304 	and.w	r3, r3, #4
 8005684:	2b00      	cmp	r3, #0
 8005686:	d008      	beq.n	800569a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005688:	4b19      	ldr	r3, [pc, #100]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	4916      	ldr	r1, [pc, #88]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005696:	4313      	orrs	r3, r2
 8005698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0308 	and.w	r3, r3, #8
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d009      	beq.n	80056ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056a6:	4b12      	ldr	r3, [pc, #72]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	490e      	ldr	r1, [pc, #56]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056ba:	f000 f821 	bl	8005700 <HAL_RCC_GetSysClockFreq>
 80056be:	4602      	mov	r2, r0
 80056c0:	4b0b      	ldr	r3, [pc, #44]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	091b      	lsrs	r3, r3, #4
 80056c6:	f003 030f 	and.w	r3, r3, #15
 80056ca:	490a      	ldr	r1, [pc, #40]	; (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 80056cc:	5ccb      	ldrb	r3, [r1, r3]
 80056ce:	fa22 f303 	lsr.w	r3, r2, r3
 80056d2:	4a09      	ldr	r2, [pc, #36]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80056d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056d6:	4b09      	ldr	r3, [pc, #36]	; (80056fc <HAL_RCC_ClockConfig+0x1c8>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f7fc ff38 	bl	8002550 <HAL_InitTick>

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	40023c00 	.word	0x40023c00
 80056f0:	40023800 	.word	0x40023800
 80056f4:	080224e8 	.word	0x080224e8
 80056f8:	20000000 	.word	0x20000000
 80056fc:	2000009c 	.word	0x2000009c

08005700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005704:	b094      	sub	sp, #80	; 0x50
 8005706:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	647b      	str	r3, [r7, #68]	; 0x44
 800570c:	2300      	movs	r3, #0
 800570e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005710:	2300      	movs	r3, #0
 8005712:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005718:	4b79      	ldr	r3, [pc, #484]	; (8005900 <HAL_RCC_GetSysClockFreq+0x200>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f003 030c 	and.w	r3, r3, #12
 8005720:	2b08      	cmp	r3, #8
 8005722:	d00d      	beq.n	8005740 <HAL_RCC_GetSysClockFreq+0x40>
 8005724:	2b08      	cmp	r3, #8
 8005726:	f200 80e1 	bhi.w	80058ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800572a:	2b00      	cmp	r3, #0
 800572c:	d002      	beq.n	8005734 <HAL_RCC_GetSysClockFreq+0x34>
 800572e:	2b04      	cmp	r3, #4
 8005730:	d003      	beq.n	800573a <HAL_RCC_GetSysClockFreq+0x3a>
 8005732:	e0db      	b.n	80058ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005734:	4b73      	ldr	r3, [pc, #460]	; (8005904 <HAL_RCC_GetSysClockFreq+0x204>)
 8005736:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005738:	e0db      	b.n	80058f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800573a:	4b73      	ldr	r3, [pc, #460]	; (8005908 <HAL_RCC_GetSysClockFreq+0x208>)
 800573c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800573e:	e0d8      	b.n	80058f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005740:	4b6f      	ldr	r3, [pc, #444]	; (8005900 <HAL_RCC_GetSysClockFreq+0x200>)
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005748:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800574a:	4b6d      	ldr	r3, [pc, #436]	; (8005900 <HAL_RCC_GetSysClockFreq+0x200>)
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d063      	beq.n	800581e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005756:	4b6a      	ldr	r3, [pc, #424]	; (8005900 <HAL_RCC_GetSysClockFreq+0x200>)
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	099b      	lsrs	r3, r3, #6
 800575c:	2200      	movs	r2, #0
 800575e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005760:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005768:	633b      	str	r3, [r7, #48]	; 0x30
 800576a:	2300      	movs	r3, #0
 800576c:	637b      	str	r3, [r7, #52]	; 0x34
 800576e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005772:	4622      	mov	r2, r4
 8005774:	462b      	mov	r3, r5
 8005776:	f04f 0000 	mov.w	r0, #0
 800577a:	f04f 0100 	mov.w	r1, #0
 800577e:	0159      	lsls	r1, r3, #5
 8005780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005784:	0150      	lsls	r0, r2, #5
 8005786:	4602      	mov	r2, r0
 8005788:	460b      	mov	r3, r1
 800578a:	4621      	mov	r1, r4
 800578c:	1a51      	subs	r1, r2, r1
 800578e:	6139      	str	r1, [r7, #16]
 8005790:	4629      	mov	r1, r5
 8005792:	eb63 0301 	sbc.w	r3, r3, r1
 8005796:	617b      	str	r3, [r7, #20]
 8005798:	f04f 0200 	mov.w	r2, #0
 800579c:	f04f 0300 	mov.w	r3, #0
 80057a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057a4:	4659      	mov	r1, fp
 80057a6:	018b      	lsls	r3, r1, #6
 80057a8:	4651      	mov	r1, sl
 80057aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80057ae:	4651      	mov	r1, sl
 80057b0:	018a      	lsls	r2, r1, #6
 80057b2:	4651      	mov	r1, sl
 80057b4:	ebb2 0801 	subs.w	r8, r2, r1
 80057b8:	4659      	mov	r1, fp
 80057ba:	eb63 0901 	sbc.w	r9, r3, r1
 80057be:	f04f 0200 	mov.w	r2, #0
 80057c2:	f04f 0300 	mov.w	r3, #0
 80057c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057d2:	4690      	mov	r8, r2
 80057d4:	4699      	mov	r9, r3
 80057d6:	4623      	mov	r3, r4
 80057d8:	eb18 0303 	adds.w	r3, r8, r3
 80057dc:	60bb      	str	r3, [r7, #8]
 80057de:	462b      	mov	r3, r5
 80057e0:	eb49 0303 	adc.w	r3, r9, r3
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	f04f 0200 	mov.w	r2, #0
 80057ea:	f04f 0300 	mov.w	r3, #0
 80057ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80057f2:	4629      	mov	r1, r5
 80057f4:	024b      	lsls	r3, r1, #9
 80057f6:	4621      	mov	r1, r4
 80057f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80057fc:	4621      	mov	r1, r4
 80057fe:	024a      	lsls	r2, r1, #9
 8005800:	4610      	mov	r0, r2
 8005802:	4619      	mov	r1, r3
 8005804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005806:	2200      	movs	r2, #0
 8005808:	62bb      	str	r3, [r7, #40]	; 0x28
 800580a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800580c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005810:	f7fb fa52 	bl	8000cb8 <__aeabi_uldivmod>
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	4613      	mov	r3, r2
 800581a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800581c:	e058      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800581e:	4b38      	ldr	r3, [pc, #224]	; (8005900 <HAL_RCC_GetSysClockFreq+0x200>)
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	099b      	lsrs	r3, r3, #6
 8005824:	2200      	movs	r2, #0
 8005826:	4618      	mov	r0, r3
 8005828:	4611      	mov	r1, r2
 800582a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800582e:	623b      	str	r3, [r7, #32]
 8005830:	2300      	movs	r3, #0
 8005832:	627b      	str	r3, [r7, #36]	; 0x24
 8005834:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005838:	4642      	mov	r2, r8
 800583a:	464b      	mov	r3, r9
 800583c:	f04f 0000 	mov.w	r0, #0
 8005840:	f04f 0100 	mov.w	r1, #0
 8005844:	0159      	lsls	r1, r3, #5
 8005846:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800584a:	0150      	lsls	r0, r2, #5
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	4641      	mov	r1, r8
 8005852:	ebb2 0a01 	subs.w	sl, r2, r1
 8005856:	4649      	mov	r1, r9
 8005858:	eb63 0b01 	sbc.w	fp, r3, r1
 800585c:	f04f 0200 	mov.w	r2, #0
 8005860:	f04f 0300 	mov.w	r3, #0
 8005864:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005868:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800586c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005870:	ebb2 040a 	subs.w	r4, r2, sl
 8005874:	eb63 050b 	sbc.w	r5, r3, fp
 8005878:	f04f 0200 	mov.w	r2, #0
 800587c:	f04f 0300 	mov.w	r3, #0
 8005880:	00eb      	lsls	r3, r5, #3
 8005882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005886:	00e2      	lsls	r2, r4, #3
 8005888:	4614      	mov	r4, r2
 800588a:	461d      	mov	r5, r3
 800588c:	4643      	mov	r3, r8
 800588e:	18e3      	adds	r3, r4, r3
 8005890:	603b      	str	r3, [r7, #0]
 8005892:	464b      	mov	r3, r9
 8005894:	eb45 0303 	adc.w	r3, r5, r3
 8005898:	607b      	str	r3, [r7, #4]
 800589a:	f04f 0200 	mov.w	r2, #0
 800589e:	f04f 0300 	mov.w	r3, #0
 80058a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058a6:	4629      	mov	r1, r5
 80058a8:	028b      	lsls	r3, r1, #10
 80058aa:	4621      	mov	r1, r4
 80058ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058b0:	4621      	mov	r1, r4
 80058b2:	028a      	lsls	r2, r1, #10
 80058b4:	4610      	mov	r0, r2
 80058b6:	4619      	mov	r1, r3
 80058b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058ba:	2200      	movs	r2, #0
 80058bc:	61bb      	str	r3, [r7, #24]
 80058be:	61fa      	str	r2, [r7, #28]
 80058c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058c4:	f7fb f9f8 	bl	8000cb8 <__aeabi_uldivmod>
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	4613      	mov	r3, r2
 80058ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058d0:	4b0b      	ldr	r3, [pc, #44]	; (8005900 <HAL_RCC_GetSysClockFreq+0x200>)
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	0c1b      	lsrs	r3, r3, #16
 80058d6:	f003 0303 	and.w	r3, r3, #3
 80058da:	3301      	adds	r3, #1
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80058e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058ea:	e002      	b.n	80058f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058ec:	4b05      	ldr	r3, [pc, #20]	; (8005904 <HAL_RCC_GetSysClockFreq+0x204>)
 80058ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3750      	adds	r7, #80	; 0x50
 80058f8:	46bd      	mov	sp, r7
 80058fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058fe:	bf00      	nop
 8005900:	40023800 	.word	0x40023800
 8005904:	00f42400 	.word	0x00f42400
 8005908:	007a1200 	.word	0x007a1200

0800590c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800590c:	b480      	push	{r7}
 800590e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005910:	4b03      	ldr	r3, [pc, #12]	; (8005920 <HAL_RCC_GetHCLKFreq+0x14>)
 8005912:	681b      	ldr	r3, [r3, #0]
}
 8005914:	4618      	mov	r0, r3
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	20000000 	.word	0x20000000

08005924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005928:	f7ff fff0 	bl	800590c <HAL_RCC_GetHCLKFreq>
 800592c:	4602      	mov	r2, r0
 800592e:	4b05      	ldr	r3, [pc, #20]	; (8005944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	0a9b      	lsrs	r3, r3, #10
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	4903      	ldr	r1, [pc, #12]	; (8005948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800593a:	5ccb      	ldrb	r3, [r1, r3]
 800593c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005940:	4618      	mov	r0, r3
 8005942:	bd80      	pop	{r7, pc}
 8005944:	40023800 	.word	0x40023800
 8005948:	080224f8 	.word	0x080224f8

0800594c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005950:	f7ff ffdc 	bl	800590c <HAL_RCC_GetHCLKFreq>
 8005954:	4602      	mov	r2, r0
 8005956:	4b05      	ldr	r3, [pc, #20]	; (800596c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	0b5b      	lsrs	r3, r3, #13
 800595c:	f003 0307 	and.w	r3, r3, #7
 8005960:	4903      	ldr	r1, [pc, #12]	; (8005970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005962:	5ccb      	ldrb	r3, [r1, r3]
 8005964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005968:	4618      	mov	r0, r3
 800596a:	bd80      	pop	{r7, pc}
 800596c:	40023800 	.word	0x40023800
 8005970:	080224f8 	.word	0x080224f8

08005974 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	220f      	movs	r2, #15
 8005982:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005984:	4b12      	ldr	r3, [pc, #72]	; (80059d0 <HAL_RCC_GetClockConfig+0x5c>)
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 0203 	and.w	r2, r3, #3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005990:	4b0f      	ldr	r3, [pc, #60]	; (80059d0 <HAL_RCC_GetClockConfig+0x5c>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800599c:	4b0c      	ldr	r3, [pc, #48]	; (80059d0 <HAL_RCC_GetClockConfig+0x5c>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80059a8:	4b09      	ldr	r3, [pc, #36]	; (80059d0 <HAL_RCC_GetClockConfig+0x5c>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	08db      	lsrs	r3, r3, #3
 80059ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80059b6:	4b07      	ldr	r3, [pc, #28]	; (80059d4 <HAL_RCC_GetClockConfig+0x60>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0207 	and.w	r2, r3, #7
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	601a      	str	r2, [r3, #0]
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	40023800 	.word	0x40023800
 80059d4:	40023c00 	.word	0x40023c00

080059d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e07b      	b.n	8005ae2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d108      	bne.n	8005a04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059fa:	d009      	beq.n	8005a10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	61da      	str	r2, [r3, #28]
 8005a02:	e005      	b.n	8005a10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d106      	bne.n	8005a30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7fc fcc2 	bl	80023b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a62:	431a      	orrs	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	431a      	orrs	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a80:	431a      	orrs	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a94:	ea42 0103 	orr.w	r1, r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	0c1b      	lsrs	r3, r3, #16
 8005aae:	f003 0104 	and.w	r1, r3, #4
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	f003 0210 	and.w	r2, r3, #16
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	69da      	ldr	r2, [r3, #28]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ad0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b088      	sub	sp, #32
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	60f8      	str	r0, [r7, #12]
 8005af2:	60b9      	str	r1, [r7, #8]
 8005af4:	603b      	str	r3, [r7, #0]
 8005af6:	4613      	mov	r3, r2
 8005af8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d101      	bne.n	8005b0c <HAL_SPI_Transmit+0x22>
 8005b08:	2302      	movs	r3, #2
 8005b0a:	e12d      	b.n	8005d68 <HAL_SPI_Transmit+0x27e>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b14:	f7fe ff5c 	bl	80049d0 <HAL_GetTick>
 8005b18:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b1a:	88fb      	ldrh	r3, [r7, #6]
 8005b1c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d002      	beq.n	8005b30 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b2e:	e116      	b.n	8005d5e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <HAL_SPI_Transmit+0x52>
 8005b36:	88fb      	ldrh	r3, [r7, #6]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d102      	bne.n	8005b42 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b40:	e10d      	b.n	8005d5e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2203      	movs	r2, #3
 8005b46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	88fa      	ldrh	r2, [r7, #6]
 8005b5a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	88fa      	ldrh	r2, [r7, #6]
 8005b60:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b88:	d10f      	bne.n	8005baa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ba8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb4:	2b40      	cmp	r3, #64	; 0x40
 8005bb6:	d007      	beq.n	8005bc8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bd0:	d14f      	bne.n	8005c72 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <HAL_SPI_Transmit+0xf6>
 8005bda:	8afb      	ldrh	r3, [r7, #22]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d142      	bne.n	8005c66 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be4:	881a      	ldrh	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf0:	1c9a      	adds	r2, r3, #2
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c04:	e02f      	b.n	8005c66 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f003 0302 	and.w	r3, r3, #2
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d112      	bne.n	8005c3a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c18:	881a      	ldrh	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c24:	1c9a      	adds	r2, r3, #2
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	3b01      	subs	r3, #1
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c38:	e015      	b.n	8005c66 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c3a:	f7fe fec9 	bl	80049d0 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d803      	bhi.n	8005c52 <HAL_SPI_Transmit+0x168>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c50:	d102      	bne.n	8005c58 <HAL_SPI_Transmit+0x16e>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d106      	bne.n	8005c66 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005c64:	e07b      	b.n	8005d5e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1ca      	bne.n	8005c06 <HAL_SPI_Transmit+0x11c>
 8005c70:	e050      	b.n	8005d14 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d002      	beq.n	8005c80 <HAL_SPI_Transmit+0x196>
 8005c7a:	8afb      	ldrh	r3, [r7, #22]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d144      	bne.n	8005d0a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	330c      	adds	r3, #12
 8005c8a:	7812      	ldrb	r2, [r2, #0]
 8005c8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c92:	1c5a      	adds	r2, r3, #1
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ca6:	e030      	b.n	8005d0a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d113      	bne.n	8005cde <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	330c      	adds	r3, #12
 8005cc0:	7812      	ldrb	r2, [r2, #0]
 8005cc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	86da      	strh	r2, [r3, #54]	; 0x36
 8005cdc:	e015      	b.n	8005d0a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cde:	f7fe fe77 	bl	80049d0 <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d803      	bhi.n	8005cf6 <HAL_SPI_Transmit+0x20c>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf4:	d102      	bne.n	8005cfc <HAL_SPI_Transmit+0x212>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d106      	bne.n	8005d0a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005d08:	e029      	b.n	8005d5e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1c9      	bne.n	8005ca8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	6839      	ldr	r1, [r7, #0]
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 fbdf 	bl	80064dc <SPI_EndRxTxTransaction>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d002      	beq.n	8005d2a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2220      	movs	r2, #32
 8005d28:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10a      	bne.n	8005d48 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d32:	2300      	movs	r3, #0
 8005d34:	613b      	str	r3, [r7, #16]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	613b      	str	r3, [r7, #16]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	613b      	str	r3, [r7, #16]
 8005d46:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	77fb      	strb	r3, [r7, #31]
 8005d54:	e003      	b.n	8005d5e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d66:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3720      	adds	r7, #32
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b088      	sub	sp, #32
 8005d74:	af02      	add	r7, sp, #8
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	603b      	str	r3, [r7, #0]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d002      	beq.n	8005d96 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005d90:	2302      	movs	r3, #2
 8005d92:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d94:	e0fb      	b.n	8005f8e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d9e:	d112      	bne.n	8005dc6 <HAL_SPI_Receive+0x56>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10e      	bne.n	8005dc6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2204      	movs	r2, #4
 8005dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005db0:	88fa      	ldrh	r2, [r7, #6]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	4613      	mov	r3, r2
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	68b9      	ldr	r1, [r7, #8]
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f000 f8ef 	bl	8005fa0 <HAL_SPI_TransmitReceive>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	e0e8      	b.n	8005f98 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d101      	bne.n	8005dd4 <HAL_SPI_Receive+0x64>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e0e1      	b.n	8005f98 <HAL_SPI_Receive+0x228>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ddc:	f7fe fdf8 	bl	80049d0 <HAL_GetTick>
 8005de0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d002      	beq.n	8005dee <HAL_SPI_Receive+0x7e>
 8005de8:	88fb      	ldrh	r3, [r7, #6]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d102      	bne.n	8005df4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005df2:	e0cc      	b.n	8005f8e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2204      	movs	r2, #4
 8005df8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	88fa      	ldrh	r2, [r7, #6]
 8005e0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	88fa      	ldrh	r2, [r7, #6]
 8005e12:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e3a:	d10f      	bne.n	8005e5c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e4a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e5a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e66:	2b40      	cmp	r3, #64	; 0x40
 8005e68:	d007      	beq.n	8005e7a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e78:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d16a      	bne.n	8005f58 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005e82:	e032      	b.n	8005eea <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d115      	bne.n	8005ebe <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f103 020c 	add.w	r2, r3, #12
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9e:	7812      	ldrb	r2, [r2, #0]
 8005ea0:	b2d2      	uxtb	r2, r2
 8005ea2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea8:	1c5a      	adds	r2, r3, #1
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ebc:	e015      	b.n	8005eea <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ebe:	f7fe fd87 	bl	80049d0 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d803      	bhi.n	8005ed6 <HAL_SPI_Receive+0x166>
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed4:	d102      	bne.n	8005edc <HAL_SPI_Receive+0x16c>
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d106      	bne.n	8005eea <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005ee8:	e051      	b.n	8005f8e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1c7      	bne.n	8005e84 <HAL_SPI_Receive+0x114>
 8005ef4:	e035      	b.n	8005f62 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d113      	bne.n	8005f2c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68da      	ldr	r2, [r3, #12]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0e:	b292      	uxth	r2, r2
 8005f10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f16:	1c9a      	adds	r2, r3, #2
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	3b01      	subs	r3, #1
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f2a:	e015      	b.n	8005f58 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f2c:	f7fe fd50 	bl	80049d0 <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	683a      	ldr	r2, [r7, #0]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d803      	bhi.n	8005f44 <HAL_SPI_Receive+0x1d4>
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f42:	d102      	bne.n	8005f4a <HAL_SPI_Receive+0x1da>
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d106      	bne.n	8005f58 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005f56:	e01a      	b.n	8005f8e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1c9      	bne.n	8005ef6 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	6839      	ldr	r1, [r7, #0]
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f000 fa52 	bl	8006410 <SPI_EndRxTransaction>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d002      	beq.n	8005f78 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2220      	movs	r2, #32
 8005f76:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d002      	beq.n	8005f86 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	75fb      	strb	r3, [r7, #23]
 8005f84:	e003      	b.n	8005f8e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3718      	adds	r7, #24
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08c      	sub	sp, #48	; 0x30
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
 8005fac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d101      	bne.n	8005fc6 <HAL_SPI_TransmitReceive+0x26>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	e198      	b.n	80062f8 <HAL_SPI_TransmitReceive+0x358>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fce:	f7fe fcff 	bl	80049d0 <HAL_GetTick>
 8005fd2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005fe4:	887b      	ldrh	r3, [r7, #2]
 8005fe6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005fe8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d00f      	beq.n	8006010 <HAL_SPI_TransmitReceive+0x70>
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ff6:	d107      	bne.n	8006008 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d103      	bne.n	8006008 <HAL_SPI_TransmitReceive+0x68>
 8006000:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006004:	2b04      	cmp	r3, #4
 8006006:	d003      	beq.n	8006010 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006008:	2302      	movs	r3, #2
 800600a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800600e:	e16d      	b.n	80062ec <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d005      	beq.n	8006022 <HAL_SPI_TransmitReceive+0x82>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d002      	beq.n	8006022 <HAL_SPI_TransmitReceive+0x82>
 800601c:	887b      	ldrh	r3, [r7, #2]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d103      	bne.n	800602a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006028:	e160      	b.n	80062ec <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b04      	cmp	r3, #4
 8006034:	d003      	beq.n	800603e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2205      	movs	r2, #5
 800603a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	887a      	ldrh	r2, [r7, #2]
 800604e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	887a      	ldrh	r2, [r7, #2]
 8006054:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	887a      	ldrh	r2, [r7, #2]
 8006060:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	887a      	ldrh	r2, [r7, #2]
 8006066:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607e:	2b40      	cmp	r3, #64	; 0x40
 8006080:	d007      	beq.n	8006092 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006090:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800609a:	d17c      	bne.n	8006196 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d002      	beq.n	80060aa <HAL_SPI_TransmitReceive+0x10a>
 80060a4:	8b7b      	ldrh	r3, [r7, #26]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d16a      	bne.n	8006180 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ae:	881a      	ldrh	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ba:	1c9a      	adds	r2, r3, #2
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	3b01      	subs	r3, #1
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060ce:	e057      	b.n	8006180 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d11b      	bne.n	8006116 <HAL_SPI_TransmitReceive+0x176>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d016      	beq.n	8006116 <HAL_SPI_TransmitReceive+0x176>
 80060e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d113      	bne.n	8006116 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f2:	881a      	ldrh	r2, [r3, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fe:	1c9a      	adds	r2, r3, #2
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006108:	b29b      	uxth	r3, r3
 800610a:	3b01      	subs	r3, #1
 800610c:	b29a      	uxth	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006112:	2300      	movs	r3, #0
 8006114:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	2b01      	cmp	r3, #1
 8006122:	d119      	bne.n	8006158 <HAL_SPI_TransmitReceive+0x1b8>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006128:	b29b      	uxth	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d014      	beq.n	8006158 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68da      	ldr	r2, [r3, #12]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006138:	b292      	uxth	r2, r2
 800613a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006140:	1c9a      	adds	r2, r3, #2
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800614a:	b29b      	uxth	r3, r3
 800614c:	3b01      	subs	r3, #1
 800614e:	b29a      	uxth	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006154:	2301      	movs	r3, #1
 8006156:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006158:	f7fe fc3a 	bl	80049d0 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006164:	429a      	cmp	r2, r3
 8006166:	d80b      	bhi.n	8006180 <HAL_SPI_TransmitReceive+0x1e0>
 8006168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616e:	d007      	beq.n	8006180 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800617e:	e0b5      	b.n	80062ec <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006184:	b29b      	uxth	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1a2      	bne.n	80060d0 <HAL_SPI_TransmitReceive+0x130>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800618e:	b29b      	uxth	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	d19d      	bne.n	80060d0 <HAL_SPI_TransmitReceive+0x130>
 8006194:	e080      	b.n	8006298 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d002      	beq.n	80061a4 <HAL_SPI_TransmitReceive+0x204>
 800619e:	8b7b      	ldrh	r3, [r7, #26]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d16f      	bne.n	8006284 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	330c      	adds	r3, #12
 80061ae:	7812      	ldrb	r2, [r2, #0]
 80061b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	3b01      	subs	r3, #1
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061ca:	e05b      	b.n	8006284 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d11c      	bne.n	8006214 <HAL_SPI_TransmitReceive+0x274>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061de:	b29b      	uxth	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d017      	beq.n	8006214 <HAL_SPI_TransmitReceive+0x274>
 80061e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d114      	bne.n	8006214 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	330c      	adds	r3, #12
 80061f4:	7812      	ldrb	r2, [r2, #0]
 80061f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006206:	b29b      	uxth	r3, r3
 8006208:	3b01      	subs	r3, #1
 800620a:	b29a      	uxth	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006210:	2300      	movs	r3, #0
 8006212:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b01      	cmp	r3, #1
 8006220:	d119      	bne.n	8006256 <HAL_SPI_TransmitReceive+0x2b6>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006226:	b29b      	uxth	r3, r3
 8006228:	2b00      	cmp	r3, #0
 800622a:	d014      	beq.n	8006256 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68da      	ldr	r2, [r3, #12]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006236:	b2d2      	uxtb	r2, r2
 8006238:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623e:	1c5a      	adds	r2, r3, #1
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006248:	b29b      	uxth	r3, r3
 800624a:	3b01      	subs	r3, #1
 800624c:	b29a      	uxth	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006252:	2301      	movs	r3, #1
 8006254:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006256:	f7fe fbbb 	bl	80049d0 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006262:	429a      	cmp	r2, r3
 8006264:	d803      	bhi.n	800626e <HAL_SPI_TransmitReceive+0x2ce>
 8006266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626c:	d102      	bne.n	8006274 <HAL_SPI_TransmitReceive+0x2d4>
 800626e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006270:	2b00      	cmp	r3, #0
 8006272:	d107      	bne.n	8006284 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006282:	e033      	b.n	80062ec <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006288:	b29b      	uxth	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d19e      	bne.n	80061cc <HAL_SPI_TransmitReceive+0x22c>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006292:	b29b      	uxth	r3, r3
 8006294:	2b00      	cmp	r3, #0
 8006296:	d199      	bne.n	80061cc <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800629a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 f91d 	bl	80064dc <SPI_EndRxTxTransaction>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d006      	beq.n	80062b6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2220      	movs	r2, #32
 80062b2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80062b4:	e01a      	b.n	80062ec <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10a      	bne.n	80062d4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062be:	2300      	movs	r3, #0
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	617b      	str	r3, [r7, #20]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	617b      	str	r3, [r7, #20]
 80062d2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d003      	beq.n	80062e4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062e2:	e003      	b.n	80062ec <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3730      	adds	r7, #48	; 0x30
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b088      	sub	sp, #32
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	603b      	str	r3, [r7, #0]
 800630c:	4613      	mov	r3, r2
 800630e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006310:	f7fe fb5e 	bl	80049d0 <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006318:	1a9b      	subs	r3, r3, r2
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	4413      	add	r3, r2
 800631e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006320:	f7fe fb56 	bl	80049d0 <HAL_GetTick>
 8006324:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006326:	4b39      	ldr	r3, [pc, #228]	; (800640c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	015b      	lsls	r3, r3, #5
 800632c:	0d1b      	lsrs	r3, r3, #20
 800632e:	69fa      	ldr	r2, [r7, #28]
 8006330:	fb02 f303 	mul.w	r3, r2, r3
 8006334:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006336:	e054      	b.n	80063e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633e:	d050      	beq.n	80063e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006340:	f7fe fb46 	bl	80049d0 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	69fa      	ldr	r2, [r7, #28]
 800634c:	429a      	cmp	r2, r3
 800634e:	d902      	bls.n	8006356 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d13d      	bne.n	80063d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006364:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800636e:	d111      	bne.n	8006394 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006378:	d004      	beq.n	8006384 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006382:	d107      	bne.n	8006394 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006392:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800639c:	d10f      	bne.n	80063be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063ac:	601a      	str	r2, [r3, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e017      	b.n	8006402 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80063d8:	2300      	movs	r3, #0
 80063da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	3b01      	subs	r3, #1
 80063e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	689a      	ldr	r2, [r3, #8]
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	4013      	ands	r3, r2
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	bf0c      	ite	eq
 80063f2:	2301      	moveq	r3, #1
 80063f4:	2300      	movne	r3, #0
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	461a      	mov	r2, r3
 80063fa:	79fb      	ldrb	r3, [r7, #7]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d19b      	bne.n	8006338 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3720      	adds	r7, #32
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	20000000 	.word	0x20000000

08006410 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af02      	add	r7, sp, #8
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006424:	d111      	bne.n	800644a <SPI_EndRxTransaction+0x3a>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800642e:	d004      	beq.n	800643a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006438:	d107      	bne.n	800644a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006448:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006452:	d12a      	bne.n	80064aa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800645c:	d012      	beq.n	8006484 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	2200      	movs	r2, #0
 8006466:	2180      	movs	r1, #128	; 0x80
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f7ff ff49 	bl	8006300 <SPI_WaitFlagStateUntilTimeout>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d02d      	beq.n	80064d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006478:	f043 0220 	orr.w	r2, r3, #32
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e026      	b.n	80064d2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2200      	movs	r2, #0
 800648c:	2101      	movs	r1, #1
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f7ff ff36 	bl	8006300 <SPI_WaitFlagStateUntilTimeout>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d01a      	beq.n	80064d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800649e:	f043 0220 	orr.w	r2, r3, #32
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e013      	b.n	80064d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	2200      	movs	r2, #0
 80064b2:	2101      	movs	r1, #1
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f7ff ff23 	bl	8006300 <SPI_WaitFlagStateUntilTimeout>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d007      	beq.n	80064d0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c4:	f043 0220 	orr.w	r2, r3, #32
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e000      	b.n	80064d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
	...

080064dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b088      	sub	sp, #32
 80064e0:	af02      	add	r7, sp, #8
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2201      	movs	r2, #1
 80064f0:	2102      	movs	r1, #2
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f7ff ff04 	bl	8006300 <SPI_WaitFlagStateUntilTimeout>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d007      	beq.n	800650e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006502:	f043 0220 	orr.w	r2, r3, #32
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e032      	b.n	8006574 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800650e:	4b1b      	ldr	r3, [pc, #108]	; (800657c <SPI_EndRxTxTransaction+0xa0>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a1b      	ldr	r2, [pc, #108]	; (8006580 <SPI_EndRxTxTransaction+0xa4>)
 8006514:	fba2 2303 	umull	r2, r3, r2, r3
 8006518:	0d5b      	lsrs	r3, r3, #21
 800651a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800651e:	fb02 f303 	mul.w	r3, r2, r3
 8006522:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800652c:	d112      	bne.n	8006554 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2200      	movs	r2, #0
 8006536:	2180      	movs	r1, #128	; 0x80
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f7ff fee1 	bl	8006300 <SPI_WaitFlagStateUntilTimeout>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d016      	beq.n	8006572 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006548:	f043 0220 	orr.w	r2, r3, #32
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e00f      	b.n	8006574 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	3b01      	subs	r3, #1
 800655e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656a:	2b80      	cmp	r3, #128	; 0x80
 800656c:	d0f2      	beq.n	8006554 <SPI_EndRxTxTransaction+0x78>
 800656e:	e000      	b.n	8006572 <SPI_EndRxTxTransaction+0x96>
        break;
 8006570:	bf00      	nop
  }

  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3718      	adds	r7, #24
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	20000000 	.word	0x20000000
 8006580:	165e9f81 	.word	0x165e9f81

08006584 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e041      	b.n	800661a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d106      	bne.n	80065b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f839 	bl	8006622 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2202      	movs	r2, #2
 80065b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3304      	adds	r3, #4
 80065c0:	4619      	mov	r1, r3
 80065c2:	4610      	mov	r0, r2
 80065c4:	f000 f9b2 	bl	800692c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3708      	adds	r7, #8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006622:	b480      	push	{r7}
 8006624:	b083      	sub	sp, #12
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800662a:	bf00      	nop
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
	...

08006638 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b01      	cmp	r3, #1
 800664a:	d001      	beq.n	8006650 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e044      	b.n	80066da <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2202      	movs	r2, #2
 8006654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f042 0201 	orr.w	r2, r2, #1
 8006666:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a1e      	ldr	r2, [pc, #120]	; (80066e8 <HAL_TIM_Base_Start_IT+0xb0>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d018      	beq.n	80066a4 <HAL_TIM_Base_Start_IT+0x6c>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800667a:	d013      	beq.n	80066a4 <HAL_TIM_Base_Start_IT+0x6c>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a1a      	ldr	r2, [pc, #104]	; (80066ec <HAL_TIM_Base_Start_IT+0xb4>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d00e      	beq.n	80066a4 <HAL_TIM_Base_Start_IT+0x6c>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a19      	ldr	r2, [pc, #100]	; (80066f0 <HAL_TIM_Base_Start_IT+0xb8>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d009      	beq.n	80066a4 <HAL_TIM_Base_Start_IT+0x6c>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a17      	ldr	r2, [pc, #92]	; (80066f4 <HAL_TIM_Base_Start_IT+0xbc>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d004      	beq.n	80066a4 <HAL_TIM_Base_Start_IT+0x6c>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a16      	ldr	r2, [pc, #88]	; (80066f8 <HAL_TIM_Base_Start_IT+0xc0>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d111      	bne.n	80066c8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f003 0307 	and.w	r3, r3, #7
 80066ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2b06      	cmp	r3, #6
 80066b4:	d010      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f042 0201 	orr.w	r2, r2, #1
 80066c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066c6:	e007      	b.n	80066d8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f042 0201 	orr.w	r2, r2, #1
 80066d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	40010000 	.word	0x40010000
 80066ec:	40000400 	.word	0x40000400
 80066f0:	40000800 	.word	0x40000800
 80066f4:	40000c00 	.word	0x40000c00
 80066f8:	40014000 	.word	0x40014000

080066fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d020      	beq.n	8006760 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f003 0302 	and.w	r3, r3, #2
 8006724:	2b00      	cmp	r3, #0
 8006726:	d01b      	beq.n	8006760 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f06f 0202 	mvn.w	r2, #2
 8006730:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	f003 0303 	and.w	r3, r3, #3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d003      	beq.n	800674e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f8d2 	bl	80068f0 <HAL_TIM_IC_CaptureCallback>
 800674c:	e005      	b.n	800675a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f8c4 	bl	80068dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f8d5 	bl	8006904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f003 0304 	and.w	r3, r3, #4
 8006766:	2b00      	cmp	r3, #0
 8006768:	d020      	beq.n	80067ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f003 0304 	and.w	r3, r3, #4
 8006770:	2b00      	cmp	r3, #0
 8006772:	d01b      	beq.n	80067ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f06f 0204 	mvn.w	r2, #4
 800677c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2202      	movs	r2, #2
 8006782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f8ac 	bl	80068f0 <HAL_TIM_IC_CaptureCallback>
 8006798:	e005      	b.n	80067a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f89e 	bl	80068dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f8af 	bl	8006904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	f003 0308 	and.w	r3, r3, #8
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d020      	beq.n	80067f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f003 0308 	and.w	r3, r3, #8
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d01b      	beq.n	80067f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f06f 0208 	mvn.w	r2, #8
 80067c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2204      	movs	r2, #4
 80067ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	f003 0303 	and.w	r3, r3, #3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f886 	bl	80068f0 <HAL_TIM_IC_CaptureCallback>
 80067e4:	e005      	b.n	80067f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f878 	bl	80068dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 f889 	bl	8006904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	f003 0310 	and.w	r3, r3, #16
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d020      	beq.n	8006844 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f003 0310 	and.w	r3, r3, #16
 8006808:	2b00      	cmp	r3, #0
 800680a:	d01b      	beq.n	8006844 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f06f 0210 	mvn.w	r2, #16
 8006814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2208      	movs	r2, #8
 800681a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f860 	bl	80068f0 <HAL_TIM_IC_CaptureCallback>
 8006830:	e005      	b.n	800683e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f852 	bl	80068dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 f863 	bl	8006904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00c      	beq.n	8006868 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b00      	cmp	r3, #0
 8006856:	d007      	beq.n	8006868 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f06f 0201 	mvn.w	r2, #1
 8006860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7fb fd40 	bl	80022e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00c      	beq.n	800688c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006878:	2b00      	cmp	r3, #0
 800687a:	d007      	beq.n	800688c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f8e6 	bl	8006a58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00c      	beq.n	80068b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689c:	2b00      	cmp	r3, #0
 800689e:	d007      	beq.n	80068b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f834 	bl	8006918 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	f003 0320 	and.w	r3, r3, #32
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00c      	beq.n	80068d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f003 0320 	and.w	r3, r3, #32
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d007      	beq.n	80068d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f06f 0220 	mvn.w	r2, #32
 80068cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f8b8 	bl	8006a44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068d4:	bf00      	nop
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a3a      	ldr	r2, [pc, #232]	; (8006a28 <TIM_Base_SetConfig+0xfc>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d00f      	beq.n	8006964 <TIM_Base_SetConfig+0x38>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800694a:	d00b      	beq.n	8006964 <TIM_Base_SetConfig+0x38>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a37      	ldr	r2, [pc, #220]	; (8006a2c <TIM_Base_SetConfig+0x100>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d007      	beq.n	8006964 <TIM_Base_SetConfig+0x38>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a36      	ldr	r2, [pc, #216]	; (8006a30 <TIM_Base_SetConfig+0x104>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d003      	beq.n	8006964 <TIM_Base_SetConfig+0x38>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a35      	ldr	r2, [pc, #212]	; (8006a34 <TIM_Base_SetConfig+0x108>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d108      	bne.n	8006976 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	4313      	orrs	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a2b      	ldr	r2, [pc, #172]	; (8006a28 <TIM_Base_SetConfig+0xfc>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d01b      	beq.n	80069b6 <TIM_Base_SetConfig+0x8a>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006984:	d017      	beq.n	80069b6 <TIM_Base_SetConfig+0x8a>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a28      	ldr	r2, [pc, #160]	; (8006a2c <TIM_Base_SetConfig+0x100>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d013      	beq.n	80069b6 <TIM_Base_SetConfig+0x8a>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a27      	ldr	r2, [pc, #156]	; (8006a30 <TIM_Base_SetConfig+0x104>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d00f      	beq.n	80069b6 <TIM_Base_SetConfig+0x8a>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a26      	ldr	r2, [pc, #152]	; (8006a34 <TIM_Base_SetConfig+0x108>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d00b      	beq.n	80069b6 <TIM_Base_SetConfig+0x8a>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a25      	ldr	r2, [pc, #148]	; (8006a38 <TIM_Base_SetConfig+0x10c>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d007      	beq.n	80069b6 <TIM_Base_SetConfig+0x8a>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a24      	ldr	r2, [pc, #144]	; (8006a3c <TIM_Base_SetConfig+0x110>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d003      	beq.n	80069b6 <TIM_Base_SetConfig+0x8a>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a23      	ldr	r2, [pc, #140]	; (8006a40 <TIM_Base_SetConfig+0x114>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d108      	bne.n	80069c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	689a      	ldr	r2, [r3, #8]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a0e      	ldr	r2, [pc, #56]	; (8006a28 <TIM_Base_SetConfig+0xfc>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d103      	bne.n	80069fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	691a      	ldr	r2, [r3, #16]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d105      	bne.n	8006a1a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	f023 0201 	bic.w	r2, r3, #1
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	611a      	str	r2, [r3, #16]
  }
}
 8006a1a:	bf00      	nop
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	40010000 	.word	0x40010000
 8006a2c:	40000400 	.word	0x40000400
 8006a30:	40000800 	.word	0x40000800
 8006a34:	40000c00 	.word	0x40000c00
 8006a38:	40014000 	.word	0x40014000
 8006a3c:	40014400 	.word	0x40014400
 8006a40:	40014800 	.word	0x40014800

08006a44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e042      	b.n	8006b04 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d106      	bne.n	8006a98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7fb fd0c 	bl	80024b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2224      	movs	r2, #36	; 0x24
 8006a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68da      	ldr	r2, [r3, #12]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006aae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 fd11 	bl	80074d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	691a      	ldr	r2, [r3, #16]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ac4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	695a      	ldr	r2, [r3, #20]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ad4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68da      	ldr	r2, [r3, #12]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ae4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2220      	movs	r2, #32
 8006af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2220      	movs	r2, #32
 8006af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b08c      	sub	sp, #48	; 0x30
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	4613      	mov	r3, r2
 8006b18:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b20      	cmp	r3, #32
 8006b24:	d14a      	bne.n	8006bbc <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8006b2c:	88fb      	ldrh	r3, [r7, #6]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e043      	b.n	8006bbe <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8006b42:	88fb      	ldrh	r3, [r7, #6]
 8006b44:	461a      	mov	r2, r3
 8006b46:	68b9      	ldr	r1, [r7, #8]
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f000 faed 	bl	8007128 <UART_Start_Receive_IT>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006b54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d12c      	bne.n	8006bb6 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d125      	bne.n	8006bb0 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b64:	2300      	movs	r3, #0
 8006b66:	613b      	str	r3, [r7, #16]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	613b      	str	r3, [r7, #16]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	613b      	str	r3, [r7, #16]
 8006b78:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	330c      	adds	r3, #12
 8006b80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	e853 3f00 	ldrex	r3, [r3]
 8006b88:	617b      	str	r3, [r7, #20]
   return(result);
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f043 0310 	orr.w	r3, r3, #16
 8006b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	330c      	adds	r3, #12
 8006b98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b9a:	627a      	str	r2, [r7, #36]	; 0x24
 8006b9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9e:	6a39      	ldr	r1, [r7, #32]
 8006ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba2:	e841 2300 	strex	r3, r2, [r1]
 8006ba6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1e5      	bne.n	8006b7a <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8006bae:	e002      	b.n	8006bb6 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006bb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006bba:	e000      	b.n	8006bbe <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006bbc:	2302      	movs	r3, #2
  }
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3730      	adds	r7, #48	; 0x30
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
	...

08006bc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b0ba      	sub	sp, #232	; 0xe8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bfe:	f003 030f 	and.w	r3, r3, #15
 8006c02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006c06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10f      	bne.n	8006c2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c12:	f003 0320 	and.w	r3, r3, #32
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d009      	beq.n	8006c2e <HAL_UART_IRQHandler+0x66>
 8006c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c1e:	f003 0320 	and.w	r3, r3, #32
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d003      	beq.n	8006c2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fb97 	bl	800735a <UART_Receive_IT>
      return;
 8006c2c:	e25b      	b.n	80070e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006c2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 80de 	beq.w	8006df4 <HAL_UART_IRQHandler+0x22c>
 8006c38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d106      	bne.n	8006c52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 80d1 	beq.w	8006df4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00b      	beq.n	8006c76 <HAL_UART_IRQHandler+0xae>
 8006c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d005      	beq.n	8006c76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c6e:	f043 0201 	orr.w	r2, r3, #1
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c7a:	f003 0304 	and.w	r3, r3, #4
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00b      	beq.n	8006c9a <HAL_UART_IRQHandler+0xd2>
 8006c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d005      	beq.n	8006c9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c92:	f043 0202 	orr.w	r2, r3, #2
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c9e:	f003 0302 	and.w	r3, r3, #2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00b      	beq.n	8006cbe <HAL_UART_IRQHandler+0xf6>
 8006ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d005      	beq.n	8006cbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cb6:	f043 0204 	orr.w	r2, r3, #4
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc2:	f003 0308 	and.w	r3, r3, #8
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d011      	beq.n	8006cee <HAL_UART_IRQHandler+0x126>
 8006cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cce:	f003 0320 	and.w	r3, r3, #32
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d105      	bne.n	8006ce2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d005      	beq.n	8006cee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce6:	f043 0208 	orr.w	r2, r3, #8
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 81f2 	beq.w	80070dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cfc:	f003 0320 	and.w	r3, r3, #32
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d008      	beq.n	8006d16 <HAL_UART_IRQHandler+0x14e>
 8006d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d08:	f003 0320 	and.w	r3, r3, #32
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d002      	beq.n	8006d16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 fb22 	bl	800735a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d20:	2b40      	cmp	r3, #64	; 0x40
 8006d22:	bf0c      	ite	eq
 8006d24:	2301      	moveq	r3, #1
 8006d26:	2300      	movne	r3, #0
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d32:	f003 0308 	and.w	r3, r3, #8
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d103      	bne.n	8006d42 <HAL_UART_IRQHandler+0x17a>
 8006d3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d04f      	beq.n	8006de2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fa2a 	bl	800719c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d52:	2b40      	cmp	r3, #64	; 0x40
 8006d54:	d141      	bne.n	8006dda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3314      	adds	r3, #20
 8006d5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d64:	e853 3f00 	ldrex	r3, [r3]
 8006d68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	3314      	adds	r3, #20
 8006d7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d92:	e841 2300 	strex	r3, r2, [r1]
 8006d96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1d9      	bne.n	8006d56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d013      	beq.n	8006dd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dae:	4a7e      	ldr	r2, [pc, #504]	; (8006fa8 <HAL_UART_IRQHandler+0x3e0>)
 8006db0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fd ff84 	bl	8004cc4 <HAL_DMA_Abort_IT>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d016      	beq.n	8006df0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006dcc:	4610      	mov	r0, r2
 8006dce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd0:	e00e      	b.n	8006df0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f99e 	bl	8007114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd8:	e00a      	b.n	8006df0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f99a 	bl	8007114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006de0:	e006      	b.n	8006df0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f996 	bl	8007114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006dee:	e175      	b.n	80070dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df0:	bf00      	nop
    return;
 8006df2:	e173      	b.n	80070dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	f040 814f 	bne.w	800709c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e02:	f003 0310 	and.w	r3, r3, #16
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f000 8148 	beq.w	800709c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e10:	f003 0310 	and.w	r3, r3, #16
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 8141 	beq.w	800709c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	60bb      	str	r3, [r7, #8]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	60bb      	str	r3, [r7, #8]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	60bb      	str	r3, [r7, #8]
 8006e2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e3a:	2b40      	cmp	r3, #64	; 0x40
 8006e3c:	f040 80b6 	bne.w	8006fac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f000 8145 	beq.w	80070e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	f080 813e 	bcs.w	80070e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e76:	f000 8088 	beq.w	8006f8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	330c      	adds	r3, #12
 8006e80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e88:	e853 3f00 	ldrex	r3, [r3]
 8006e8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	330c      	adds	r3, #12
 8006ea2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006ea6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006eaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006eb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006eb6:	e841 2300 	strex	r3, r2, [r1]
 8006eba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1d9      	bne.n	8006e7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3314      	adds	r3, #20
 8006ecc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ed0:	e853 3f00 	ldrex	r3, [r3]
 8006ed4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ed6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ed8:	f023 0301 	bic.w	r3, r3, #1
 8006edc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3314      	adds	r3, #20
 8006ee6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006eea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006eee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ef2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ef6:	e841 2300 	strex	r3, r2, [r1]
 8006efa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1e1      	bne.n	8006ec6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3314      	adds	r3, #20
 8006f08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f0c:	e853 3f00 	ldrex	r3, [r3]
 8006f10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	3314      	adds	r3, #20
 8006f22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f2e:	e841 2300 	strex	r3, r2, [r1]
 8006f32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1e3      	bne.n	8006f02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	330c      	adds	r3, #12
 8006f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f52:	e853 3f00 	ldrex	r3, [r3]
 8006f56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f5a:	f023 0310 	bic.w	r3, r3, #16
 8006f5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	330c      	adds	r3, #12
 8006f68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006f6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8006f6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f74:	e841 2300 	strex	r3, r2, [r1]
 8006f78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1e3      	bne.n	8006f48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7fd fe2d 	bl	8004be4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f7fa f851 	bl	8001048 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006fa6:	e09b      	b.n	80070e0 <HAL_UART_IRQHandler+0x518>
 8006fa8:	08007263 	.word	0x08007263
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 808e 	beq.w	80070e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006fc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 8089 	beq.w	80070e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	330c      	adds	r3, #12
 8006fd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fdc:	e853 3f00 	ldrex	r3, [r3]
 8006fe0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fe8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	330c      	adds	r3, #12
 8006ff2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006ff6:	647a      	str	r2, [r7, #68]	; 0x44
 8006ff8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ffc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ffe:	e841 2300 	strex	r3, r2, [r1]
 8007002:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1e3      	bne.n	8006fd2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	3314      	adds	r3, #20
 8007010:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007014:	e853 3f00 	ldrex	r3, [r3]
 8007018:	623b      	str	r3, [r7, #32]
   return(result);
 800701a:	6a3b      	ldr	r3, [r7, #32]
 800701c:	f023 0301 	bic.w	r3, r3, #1
 8007020:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3314      	adds	r3, #20
 800702a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800702e:	633a      	str	r2, [r7, #48]	; 0x30
 8007030:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007032:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007036:	e841 2300 	strex	r3, r2, [r1]
 800703a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800703c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1e3      	bne.n	800700a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2220      	movs	r2, #32
 8007046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	330c      	adds	r3, #12
 8007056:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	e853 3f00 	ldrex	r3, [r3]
 800705e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f023 0310 	bic.w	r3, r3, #16
 8007066:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	330c      	adds	r3, #12
 8007070:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007074:	61fa      	str	r2, [r7, #28]
 8007076:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007078:	69b9      	ldr	r1, [r7, #24]
 800707a:	69fa      	ldr	r2, [r7, #28]
 800707c:	e841 2300 	strex	r3, r2, [r1]
 8007080:	617b      	str	r3, [r7, #20]
   return(result);
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1e3      	bne.n	8007050 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2202      	movs	r2, #2
 800708c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800708e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007092:	4619      	mov	r1, r3
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f7f9 ffd7 	bl	8001048 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800709a:	e023      	b.n	80070e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800709c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d009      	beq.n	80070bc <HAL_UART_IRQHandler+0x4f4>
 80070a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d003      	beq.n	80070bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f8e8 	bl	800728a <UART_Transmit_IT>
    return;
 80070ba:	e014      	b.n	80070e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80070bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00e      	beq.n	80070e6 <HAL_UART_IRQHandler+0x51e>
 80070c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d008      	beq.n	80070e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 f928 	bl	800732a <UART_EndTransmit_IT>
    return;
 80070da:	e004      	b.n	80070e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80070dc:	bf00      	nop
 80070de:	e002      	b.n	80070e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80070e0:	bf00      	nop
 80070e2:	e000      	b.n	80070e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80070e4:	bf00      	nop
  }
}
 80070e6:	37e8      	adds	r7, #232	; 0xe8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	4613      	mov	r3, r2
 8007134:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	88fa      	ldrh	r2, [r7, #6]
 8007140:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	88fa      	ldrh	r2, [r7, #6]
 8007146:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2222      	movs	r2, #34	; 0x22
 8007152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d007      	beq.n	800716e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68da      	ldr	r2, [r3, #12]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800716c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	695a      	ldr	r2, [r3, #20]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f042 0201 	orr.w	r2, r2, #1
 800717c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68da      	ldr	r2, [r3, #12]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f042 0220 	orr.w	r2, r2, #32
 800718c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3714      	adds	r7, #20
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800719c:	b480      	push	{r7}
 800719e:	b095      	sub	sp, #84	; 0x54
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	330c      	adds	r3, #12
 80071aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ae:	e853 3f00 	ldrex	r3, [r3]
 80071b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	330c      	adds	r3, #12
 80071c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071c4:	643a      	str	r2, [r7, #64]	; 0x40
 80071c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071cc:	e841 2300 	strex	r3, r2, [r1]
 80071d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1e5      	bne.n	80071a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	3314      	adds	r3, #20
 80071de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	e853 3f00 	ldrex	r3, [r3]
 80071e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	f023 0301 	bic.w	r3, r3, #1
 80071ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	3314      	adds	r3, #20
 80071f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007200:	e841 2300 	strex	r3, r2, [r1]
 8007204:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1e5      	bne.n	80071d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007210:	2b01      	cmp	r3, #1
 8007212:	d119      	bne.n	8007248 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	330c      	adds	r3, #12
 800721a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	e853 3f00 	ldrex	r3, [r3]
 8007222:	60bb      	str	r3, [r7, #8]
   return(result);
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	f023 0310 	bic.w	r3, r3, #16
 800722a:	647b      	str	r3, [r7, #68]	; 0x44
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	330c      	adds	r3, #12
 8007232:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007234:	61ba      	str	r2, [r7, #24]
 8007236:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007238:	6979      	ldr	r1, [r7, #20]
 800723a:	69ba      	ldr	r2, [r7, #24]
 800723c:	e841 2300 	strex	r3, r2, [r1]
 8007240:	613b      	str	r3, [r7, #16]
   return(result);
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1e5      	bne.n	8007214 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2220      	movs	r2, #32
 800724c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007256:	bf00      	nop
 8007258:	3754      	adds	r7, #84	; 0x54
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b084      	sub	sp, #16
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f7ff ff49 	bl	8007114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007282:	bf00      	nop
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800728a:	b480      	push	{r7}
 800728c:	b085      	sub	sp, #20
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b21      	cmp	r3, #33	; 0x21
 800729c:	d13e      	bne.n	800731c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072a6:	d114      	bne.n	80072d2 <UART_Transmit_IT+0x48>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d110      	bne.n	80072d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a1b      	ldr	r3, [r3, #32]
 80072b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	461a      	mov	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	1c9a      	adds	r2, r3, #2
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	621a      	str	r2, [r3, #32]
 80072d0:	e008      	b.n	80072e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	1c59      	adds	r1, r3, #1
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	6211      	str	r1, [r2, #32]
 80072dc:	781a      	ldrb	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	3b01      	subs	r3, #1
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	4619      	mov	r1, r3
 80072f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10f      	bne.n	8007318 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68da      	ldr	r2, [r3, #12]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007306:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68da      	ldr	r2, [r3, #12]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007316:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007318:	2300      	movs	r3, #0
 800731a:	e000      	b.n	800731e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800731c:	2302      	movs	r3, #2
  }
}
 800731e:	4618      	mov	r0, r3
 8007320:	3714      	adds	r7, #20
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b082      	sub	sp, #8
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68da      	ldr	r2, [r3, #12]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007340:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2220      	movs	r2, #32
 8007346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f7ff fece 	bl	80070ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3708      	adds	r7, #8
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b08c      	sub	sp, #48	; 0x30
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b22      	cmp	r3, #34	; 0x22
 800736c:	f040 80ae 	bne.w	80074cc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007378:	d117      	bne.n	80073aa <UART_Receive_IT+0x50>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d113      	bne.n	80073aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007382:	2300      	movs	r3, #0
 8007384:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800738a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	b29b      	uxth	r3, r3
 8007394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007398:	b29a      	uxth	r2, r3
 800739a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a2:	1c9a      	adds	r2, r3, #2
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	629a      	str	r2, [r3, #40]	; 0x28
 80073a8:	e026      	b.n	80073f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80073b0:	2300      	movs	r3, #0
 80073b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073bc:	d007      	beq.n	80073ce <UART_Receive_IT+0x74>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10a      	bne.n	80073dc <UART_Receive_IT+0x82>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d106      	bne.n	80073dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	b2da      	uxtb	r2, r3
 80073d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d8:	701a      	strb	r2, [r3, #0]
 80073da:	e008      	b.n	80073ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f2:	1c5a      	adds	r2, r3, #1
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	3b01      	subs	r3, #1
 8007400:	b29b      	uxth	r3, r3
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	4619      	mov	r1, r3
 8007406:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007408:	2b00      	cmp	r3, #0
 800740a:	d15d      	bne.n	80074c8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68da      	ldr	r2, [r3, #12]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f022 0220 	bic.w	r2, r2, #32
 800741a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68da      	ldr	r2, [r3, #12]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800742a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	695a      	ldr	r2, [r3, #20]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f022 0201 	bic.w	r2, r2, #1
 800743a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2220      	movs	r2, #32
 8007440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744e:	2b01      	cmp	r3, #1
 8007450:	d135      	bne.n	80074be <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	330c      	adds	r3, #12
 800745e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	e853 3f00 	ldrex	r3, [r3]
 8007466:	613b      	str	r3, [r7, #16]
   return(result);
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	f023 0310 	bic.w	r3, r3, #16
 800746e:	627b      	str	r3, [r7, #36]	; 0x24
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	330c      	adds	r3, #12
 8007476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007478:	623a      	str	r2, [r7, #32]
 800747a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747c:	69f9      	ldr	r1, [r7, #28]
 800747e:	6a3a      	ldr	r2, [r7, #32]
 8007480:	e841 2300 	strex	r3, r2, [r1]
 8007484:	61bb      	str	r3, [r7, #24]
   return(result);
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1e5      	bne.n	8007458 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0310 	and.w	r3, r3, #16
 8007496:	2b10      	cmp	r3, #16
 8007498:	d10a      	bne.n	80074b0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800749a:	2300      	movs	r3, #0
 800749c:	60fb      	str	r3, [r7, #12]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	60fb      	str	r3, [r7, #12]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	60fb      	str	r3, [r7, #12]
 80074ae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80074b4:	4619      	mov	r1, r3
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7f9 fdc6 	bl	8001048 <HAL_UARTEx_RxEventCallback>
 80074bc:	e002      	b.n	80074c4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f7ff fe1e 	bl	8007100 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80074c4:	2300      	movs	r3, #0
 80074c6:	e002      	b.n	80074ce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	e000      	b.n	80074ce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80074cc:	2302      	movs	r3, #2
  }
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3730      	adds	r7, #48	; 0x30
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074dc:	b0c0      	sub	sp, #256	; 0x100
 80074de:	af00      	add	r7, sp, #0
 80074e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80074f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074f4:	68d9      	ldr	r1, [r3, #12]
 80074f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	ea40 0301 	orr.w	r3, r0, r1
 8007500:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007506:	689a      	ldr	r2, [r3, #8]
 8007508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	431a      	orrs	r2, r3
 8007510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	431a      	orrs	r2, r3
 8007518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	4313      	orrs	r3, r2
 8007520:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007530:	f021 010c 	bic.w	r1, r1, #12
 8007534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800753e:	430b      	orrs	r3, r1
 8007540:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800754e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007552:	6999      	ldr	r1, [r3, #24]
 8007554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	ea40 0301 	orr.w	r3, r0, r1
 800755e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	4b8f      	ldr	r3, [pc, #572]	; (80077a4 <UART_SetConfig+0x2cc>)
 8007568:	429a      	cmp	r2, r3
 800756a:	d005      	beq.n	8007578 <UART_SetConfig+0xa0>
 800756c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	4b8d      	ldr	r3, [pc, #564]	; (80077a8 <UART_SetConfig+0x2d0>)
 8007574:	429a      	cmp	r2, r3
 8007576:	d104      	bne.n	8007582 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007578:	f7fe f9e8 	bl	800594c <HAL_RCC_GetPCLK2Freq>
 800757c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007580:	e003      	b.n	800758a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007582:	f7fe f9cf 	bl	8005924 <HAL_RCC_GetPCLK1Freq>
 8007586:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800758a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800758e:	69db      	ldr	r3, [r3, #28]
 8007590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007594:	f040 810c 	bne.w	80077b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800759c:	2200      	movs	r2, #0
 800759e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80075a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80075a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80075aa:	4622      	mov	r2, r4
 80075ac:	462b      	mov	r3, r5
 80075ae:	1891      	adds	r1, r2, r2
 80075b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80075b2:	415b      	adcs	r3, r3
 80075b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80075ba:	4621      	mov	r1, r4
 80075bc:	eb12 0801 	adds.w	r8, r2, r1
 80075c0:	4629      	mov	r1, r5
 80075c2:	eb43 0901 	adc.w	r9, r3, r1
 80075c6:	f04f 0200 	mov.w	r2, #0
 80075ca:	f04f 0300 	mov.w	r3, #0
 80075ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075da:	4690      	mov	r8, r2
 80075dc:	4699      	mov	r9, r3
 80075de:	4623      	mov	r3, r4
 80075e0:	eb18 0303 	adds.w	r3, r8, r3
 80075e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075e8:	462b      	mov	r3, r5
 80075ea:	eb49 0303 	adc.w	r3, r9, r3
 80075ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80075f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80075fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007602:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007606:	460b      	mov	r3, r1
 8007608:	18db      	adds	r3, r3, r3
 800760a:	653b      	str	r3, [r7, #80]	; 0x50
 800760c:	4613      	mov	r3, r2
 800760e:	eb42 0303 	adc.w	r3, r2, r3
 8007612:	657b      	str	r3, [r7, #84]	; 0x54
 8007614:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007618:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800761c:	f7f9 fb4c 	bl	8000cb8 <__aeabi_uldivmod>
 8007620:	4602      	mov	r2, r0
 8007622:	460b      	mov	r3, r1
 8007624:	4b61      	ldr	r3, [pc, #388]	; (80077ac <UART_SetConfig+0x2d4>)
 8007626:	fba3 2302 	umull	r2, r3, r3, r2
 800762a:	095b      	lsrs	r3, r3, #5
 800762c:	011c      	lsls	r4, r3, #4
 800762e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007632:	2200      	movs	r2, #0
 8007634:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007638:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800763c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007640:	4642      	mov	r2, r8
 8007642:	464b      	mov	r3, r9
 8007644:	1891      	adds	r1, r2, r2
 8007646:	64b9      	str	r1, [r7, #72]	; 0x48
 8007648:	415b      	adcs	r3, r3
 800764a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800764c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007650:	4641      	mov	r1, r8
 8007652:	eb12 0a01 	adds.w	sl, r2, r1
 8007656:	4649      	mov	r1, r9
 8007658:	eb43 0b01 	adc.w	fp, r3, r1
 800765c:	f04f 0200 	mov.w	r2, #0
 8007660:	f04f 0300 	mov.w	r3, #0
 8007664:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007668:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800766c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007670:	4692      	mov	sl, r2
 8007672:	469b      	mov	fp, r3
 8007674:	4643      	mov	r3, r8
 8007676:	eb1a 0303 	adds.w	r3, sl, r3
 800767a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800767e:	464b      	mov	r3, r9
 8007680:	eb4b 0303 	adc.w	r3, fp, r3
 8007684:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007694:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007698:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800769c:	460b      	mov	r3, r1
 800769e:	18db      	adds	r3, r3, r3
 80076a0:	643b      	str	r3, [r7, #64]	; 0x40
 80076a2:	4613      	mov	r3, r2
 80076a4:	eb42 0303 	adc.w	r3, r2, r3
 80076a8:	647b      	str	r3, [r7, #68]	; 0x44
 80076aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80076ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80076b2:	f7f9 fb01 	bl	8000cb8 <__aeabi_uldivmod>
 80076b6:	4602      	mov	r2, r0
 80076b8:	460b      	mov	r3, r1
 80076ba:	4611      	mov	r1, r2
 80076bc:	4b3b      	ldr	r3, [pc, #236]	; (80077ac <UART_SetConfig+0x2d4>)
 80076be:	fba3 2301 	umull	r2, r3, r3, r1
 80076c2:	095b      	lsrs	r3, r3, #5
 80076c4:	2264      	movs	r2, #100	; 0x64
 80076c6:	fb02 f303 	mul.w	r3, r2, r3
 80076ca:	1acb      	subs	r3, r1, r3
 80076cc:	00db      	lsls	r3, r3, #3
 80076ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80076d2:	4b36      	ldr	r3, [pc, #216]	; (80077ac <UART_SetConfig+0x2d4>)
 80076d4:	fba3 2302 	umull	r2, r3, r3, r2
 80076d8:	095b      	lsrs	r3, r3, #5
 80076da:	005b      	lsls	r3, r3, #1
 80076dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076e0:	441c      	add	r4, r3
 80076e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076e6:	2200      	movs	r2, #0
 80076e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80076f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80076f4:	4642      	mov	r2, r8
 80076f6:	464b      	mov	r3, r9
 80076f8:	1891      	adds	r1, r2, r2
 80076fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80076fc:	415b      	adcs	r3, r3
 80076fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007700:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007704:	4641      	mov	r1, r8
 8007706:	1851      	adds	r1, r2, r1
 8007708:	6339      	str	r1, [r7, #48]	; 0x30
 800770a:	4649      	mov	r1, r9
 800770c:	414b      	adcs	r3, r1
 800770e:	637b      	str	r3, [r7, #52]	; 0x34
 8007710:	f04f 0200 	mov.w	r2, #0
 8007714:	f04f 0300 	mov.w	r3, #0
 8007718:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800771c:	4659      	mov	r1, fp
 800771e:	00cb      	lsls	r3, r1, #3
 8007720:	4651      	mov	r1, sl
 8007722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007726:	4651      	mov	r1, sl
 8007728:	00ca      	lsls	r2, r1, #3
 800772a:	4610      	mov	r0, r2
 800772c:	4619      	mov	r1, r3
 800772e:	4603      	mov	r3, r0
 8007730:	4642      	mov	r2, r8
 8007732:	189b      	adds	r3, r3, r2
 8007734:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007738:	464b      	mov	r3, r9
 800773a:	460a      	mov	r2, r1
 800773c:	eb42 0303 	adc.w	r3, r2, r3
 8007740:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007750:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007754:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007758:	460b      	mov	r3, r1
 800775a:	18db      	adds	r3, r3, r3
 800775c:	62bb      	str	r3, [r7, #40]	; 0x28
 800775e:	4613      	mov	r3, r2
 8007760:	eb42 0303 	adc.w	r3, r2, r3
 8007764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007766:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800776a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800776e:	f7f9 faa3 	bl	8000cb8 <__aeabi_uldivmod>
 8007772:	4602      	mov	r2, r0
 8007774:	460b      	mov	r3, r1
 8007776:	4b0d      	ldr	r3, [pc, #52]	; (80077ac <UART_SetConfig+0x2d4>)
 8007778:	fba3 1302 	umull	r1, r3, r3, r2
 800777c:	095b      	lsrs	r3, r3, #5
 800777e:	2164      	movs	r1, #100	; 0x64
 8007780:	fb01 f303 	mul.w	r3, r1, r3
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	00db      	lsls	r3, r3, #3
 8007788:	3332      	adds	r3, #50	; 0x32
 800778a:	4a08      	ldr	r2, [pc, #32]	; (80077ac <UART_SetConfig+0x2d4>)
 800778c:	fba2 2303 	umull	r2, r3, r2, r3
 8007790:	095b      	lsrs	r3, r3, #5
 8007792:	f003 0207 	and.w	r2, r3, #7
 8007796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4422      	add	r2, r4
 800779e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80077a0:	e106      	b.n	80079b0 <UART_SetConfig+0x4d8>
 80077a2:	bf00      	nop
 80077a4:	40011000 	.word	0x40011000
 80077a8:	40011400 	.word	0x40011400
 80077ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077b4:	2200      	movs	r2, #0
 80077b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80077ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80077be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80077c2:	4642      	mov	r2, r8
 80077c4:	464b      	mov	r3, r9
 80077c6:	1891      	adds	r1, r2, r2
 80077c8:	6239      	str	r1, [r7, #32]
 80077ca:	415b      	adcs	r3, r3
 80077cc:	627b      	str	r3, [r7, #36]	; 0x24
 80077ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077d2:	4641      	mov	r1, r8
 80077d4:	1854      	adds	r4, r2, r1
 80077d6:	4649      	mov	r1, r9
 80077d8:	eb43 0501 	adc.w	r5, r3, r1
 80077dc:	f04f 0200 	mov.w	r2, #0
 80077e0:	f04f 0300 	mov.w	r3, #0
 80077e4:	00eb      	lsls	r3, r5, #3
 80077e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077ea:	00e2      	lsls	r2, r4, #3
 80077ec:	4614      	mov	r4, r2
 80077ee:	461d      	mov	r5, r3
 80077f0:	4643      	mov	r3, r8
 80077f2:	18e3      	adds	r3, r4, r3
 80077f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80077f8:	464b      	mov	r3, r9
 80077fa:	eb45 0303 	adc.w	r3, r5, r3
 80077fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800780e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007812:	f04f 0200 	mov.w	r2, #0
 8007816:	f04f 0300 	mov.w	r3, #0
 800781a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800781e:	4629      	mov	r1, r5
 8007820:	008b      	lsls	r3, r1, #2
 8007822:	4621      	mov	r1, r4
 8007824:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007828:	4621      	mov	r1, r4
 800782a:	008a      	lsls	r2, r1, #2
 800782c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007830:	f7f9 fa42 	bl	8000cb8 <__aeabi_uldivmod>
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	4b60      	ldr	r3, [pc, #384]	; (80079bc <UART_SetConfig+0x4e4>)
 800783a:	fba3 2302 	umull	r2, r3, r3, r2
 800783e:	095b      	lsrs	r3, r3, #5
 8007840:	011c      	lsls	r4, r3, #4
 8007842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007846:	2200      	movs	r2, #0
 8007848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800784c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007850:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007854:	4642      	mov	r2, r8
 8007856:	464b      	mov	r3, r9
 8007858:	1891      	adds	r1, r2, r2
 800785a:	61b9      	str	r1, [r7, #24]
 800785c:	415b      	adcs	r3, r3
 800785e:	61fb      	str	r3, [r7, #28]
 8007860:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007864:	4641      	mov	r1, r8
 8007866:	1851      	adds	r1, r2, r1
 8007868:	6139      	str	r1, [r7, #16]
 800786a:	4649      	mov	r1, r9
 800786c:	414b      	adcs	r3, r1
 800786e:	617b      	str	r3, [r7, #20]
 8007870:	f04f 0200 	mov.w	r2, #0
 8007874:	f04f 0300 	mov.w	r3, #0
 8007878:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800787c:	4659      	mov	r1, fp
 800787e:	00cb      	lsls	r3, r1, #3
 8007880:	4651      	mov	r1, sl
 8007882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007886:	4651      	mov	r1, sl
 8007888:	00ca      	lsls	r2, r1, #3
 800788a:	4610      	mov	r0, r2
 800788c:	4619      	mov	r1, r3
 800788e:	4603      	mov	r3, r0
 8007890:	4642      	mov	r2, r8
 8007892:	189b      	adds	r3, r3, r2
 8007894:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007898:	464b      	mov	r3, r9
 800789a:	460a      	mov	r2, r1
 800789c:	eb42 0303 	adc.w	r3, r2, r3
 80078a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80078ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80078b0:	f04f 0200 	mov.w	r2, #0
 80078b4:	f04f 0300 	mov.w	r3, #0
 80078b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80078bc:	4649      	mov	r1, r9
 80078be:	008b      	lsls	r3, r1, #2
 80078c0:	4641      	mov	r1, r8
 80078c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078c6:	4641      	mov	r1, r8
 80078c8:	008a      	lsls	r2, r1, #2
 80078ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80078ce:	f7f9 f9f3 	bl	8000cb8 <__aeabi_uldivmod>
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
 80078d6:	4611      	mov	r1, r2
 80078d8:	4b38      	ldr	r3, [pc, #224]	; (80079bc <UART_SetConfig+0x4e4>)
 80078da:	fba3 2301 	umull	r2, r3, r3, r1
 80078de:	095b      	lsrs	r3, r3, #5
 80078e0:	2264      	movs	r2, #100	; 0x64
 80078e2:	fb02 f303 	mul.w	r3, r2, r3
 80078e6:	1acb      	subs	r3, r1, r3
 80078e8:	011b      	lsls	r3, r3, #4
 80078ea:	3332      	adds	r3, #50	; 0x32
 80078ec:	4a33      	ldr	r2, [pc, #204]	; (80079bc <UART_SetConfig+0x4e4>)
 80078ee:	fba2 2303 	umull	r2, r3, r2, r3
 80078f2:	095b      	lsrs	r3, r3, #5
 80078f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078f8:	441c      	add	r4, r3
 80078fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078fe:	2200      	movs	r2, #0
 8007900:	673b      	str	r3, [r7, #112]	; 0x70
 8007902:	677a      	str	r2, [r7, #116]	; 0x74
 8007904:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007908:	4642      	mov	r2, r8
 800790a:	464b      	mov	r3, r9
 800790c:	1891      	adds	r1, r2, r2
 800790e:	60b9      	str	r1, [r7, #8]
 8007910:	415b      	adcs	r3, r3
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007918:	4641      	mov	r1, r8
 800791a:	1851      	adds	r1, r2, r1
 800791c:	6039      	str	r1, [r7, #0]
 800791e:	4649      	mov	r1, r9
 8007920:	414b      	adcs	r3, r1
 8007922:	607b      	str	r3, [r7, #4]
 8007924:	f04f 0200 	mov.w	r2, #0
 8007928:	f04f 0300 	mov.w	r3, #0
 800792c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007930:	4659      	mov	r1, fp
 8007932:	00cb      	lsls	r3, r1, #3
 8007934:	4651      	mov	r1, sl
 8007936:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800793a:	4651      	mov	r1, sl
 800793c:	00ca      	lsls	r2, r1, #3
 800793e:	4610      	mov	r0, r2
 8007940:	4619      	mov	r1, r3
 8007942:	4603      	mov	r3, r0
 8007944:	4642      	mov	r2, r8
 8007946:	189b      	adds	r3, r3, r2
 8007948:	66bb      	str	r3, [r7, #104]	; 0x68
 800794a:	464b      	mov	r3, r9
 800794c:	460a      	mov	r2, r1
 800794e:	eb42 0303 	adc.w	r3, r2, r3
 8007952:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	663b      	str	r3, [r7, #96]	; 0x60
 800795e:	667a      	str	r2, [r7, #100]	; 0x64
 8007960:	f04f 0200 	mov.w	r2, #0
 8007964:	f04f 0300 	mov.w	r3, #0
 8007968:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800796c:	4649      	mov	r1, r9
 800796e:	008b      	lsls	r3, r1, #2
 8007970:	4641      	mov	r1, r8
 8007972:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007976:	4641      	mov	r1, r8
 8007978:	008a      	lsls	r2, r1, #2
 800797a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800797e:	f7f9 f99b 	bl	8000cb8 <__aeabi_uldivmod>
 8007982:	4602      	mov	r2, r0
 8007984:	460b      	mov	r3, r1
 8007986:	4b0d      	ldr	r3, [pc, #52]	; (80079bc <UART_SetConfig+0x4e4>)
 8007988:	fba3 1302 	umull	r1, r3, r3, r2
 800798c:	095b      	lsrs	r3, r3, #5
 800798e:	2164      	movs	r1, #100	; 0x64
 8007990:	fb01 f303 	mul.w	r3, r1, r3
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	011b      	lsls	r3, r3, #4
 8007998:	3332      	adds	r3, #50	; 0x32
 800799a:	4a08      	ldr	r2, [pc, #32]	; (80079bc <UART_SetConfig+0x4e4>)
 800799c:	fba2 2303 	umull	r2, r3, r2, r3
 80079a0:	095b      	lsrs	r3, r3, #5
 80079a2:	f003 020f 	and.w	r2, r3, #15
 80079a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4422      	add	r2, r4
 80079ae:	609a      	str	r2, [r3, #8]
}
 80079b0:	bf00      	nop
 80079b2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80079b6:	46bd      	mov	sp, r7
 80079b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079bc:	51eb851f 	.word	0x51eb851f

080079c0 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80079c8:	4b22      	ldr	r3, [pc, #136]	; (8007a54 <WIZCHIP_READ+0x94>)
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	4798      	blx	r3
   WIZCHIP.CS._select();
 80079ce:	4b21      	ldr	r3, [pc, #132]	; (8007a54 <WIZCHIP_READ+0x94>)
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80079d4:	4b1f      	ldr	r3, [pc, #124]	; (8007a54 <WIZCHIP_READ+0x94>)
 80079d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d003      	beq.n	80079e4 <WIZCHIP_READ+0x24>
 80079dc:	4b1d      	ldr	r3, [pc, #116]	; (8007a54 <WIZCHIP_READ+0x94>)
 80079de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d114      	bne.n	8007a0e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80079e4:	4b1b      	ldr	r3, [pc, #108]	; (8007a54 <WIZCHIP_READ+0x94>)
 80079e6:	6a1b      	ldr	r3, [r3, #32]
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	0c12      	lsrs	r2, r2, #16
 80079ec:	b2d2      	uxtb	r2, r2
 80079ee:	4610      	mov	r0, r2
 80079f0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80079f2:	4b18      	ldr	r3, [pc, #96]	; (8007a54 <WIZCHIP_READ+0x94>)
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	0a12      	lsrs	r2, r2, #8
 80079fa:	b2d2      	uxtb	r2, r2
 80079fc:	4610      	mov	r0, r2
 80079fe:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8007a00:	4b14      	ldr	r3, [pc, #80]	; (8007a54 <WIZCHIP_READ+0x94>)
 8007a02:	6a1b      	ldr	r3, [r3, #32]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	b2d2      	uxtb	r2, r2
 8007a08:	4610      	mov	r0, r2
 8007a0a:	4798      	blx	r3
 8007a0c:	e011      	b.n	8007a32 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	0c1b      	lsrs	r3, r3, #16
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	0a1b      	lsrs	r3, r3, #8
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8007a24:	4b0b      	ldr	r3, [pc, #44]	; (8007a54 <WIZCHIP_READ+0x94>)
 8007a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a28:	f107 020c 	add.w	r2, r7, #12
 8007a2c:	2103      	movs	r1, #3
 8007a2e:	4610      	mov	r0, r2
 8007a30:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8007a32:	4b08      	ldr	r3, [pc, #32]	; (8007a54 <WIZCHIP_READ+0x94>)
 8007a34:	69db      	ldr	r3, [r3, #28]
 8007a36:	4798      	blx	r3
 8007a38:	4603      	mov	r3, r0
 8007a3a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8007a3c:	4b05      	ldr	r3, [pc, #20]	; (8007a54 <WIZCHIP_READ+0x94>)
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8007a42:	4b04      	ldr	r3, [pc, #16]	; (8007a54 <WIZCHIP_READ+0x94>)
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	4798      	blx	r3
   return ret;
 8007a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	200000a4 	.word	0x200000a4

08007a58 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	460b      	mov	r3, r1
 8007a62:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8007a64:	4b22      	ldr	r3, [pc, #136]	; (8007af0 <WIZCHIP_WRITE+0x98>)
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	4798      	blx	r3
   WIZCHIP.CS._select();
 8007a6a:	4b21      	ldr	r3, [pc, #132]	; (8007af0 <WIZCHIP_WRITE+0x98>)
 8007a6c:	695b      	ldr	r3, [r3, #20]
 8007a6e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f043 0304 	orr.w	r3, r3, #4
 8007a76:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007a78:	4b1d      	ldr	r3, [pc, #116]	; (8007af0 <WIZCHIP_WRITE+0x98>)
 8007a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d119      	bne.n	8007ab4 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8007a80:	4b1b      	ldr	r3, [pc, #108]	; (8007af0 <WIZCHIP_WRITE+0x98>)
 8007a82:	6a1b      	ldr	r3, [r3, #32]
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	0c12      	lsrs	r2, r2, #16
 8007a88:	b2d2      	uxtb	r2, r2
 8007a8a:	4610      	mov	r0, r2
 8007a8c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8007a8e:	4b18      	ldr	r3, [pc, #96]	; (8007af0 <WIZCHIP_WRITE+0x98>)
 8007a90:	6a1b      	ldr	r3, [r3, #32]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	0a12      	lsrs	r2, r2, #8
 8007a96:	b2d2      	uxtb	r2, r2
 8007a98:	4610      	mov	r0, r2
 8007a9a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8007a9c:	4b14      	ldr	r3, [pc, #80]	; (8007af0 <WIZCHIP_WRITE+0x98>)
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	b2d2      	uxtb	r2, r2
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8007aa8:	4b11      	ldr	r3, [pc, #68]	; (8007af0 <WIZCHIP_WRITE+0x98>)
 8007aaa:	6a1b      	ldr	r3, [r3, #32]
 8007aac:	78fa      	ldrb	r2, [r7, #3]
 8007aae:	4610      	mov	r0, r2
 8007ab0:	4798      	blx	r3
 8007ab2:	e013      	b.n	8007adc <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	0c1b      	lsrs	r3, r3, #16
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	0a1b      	lsrs	r3, r3, #8
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8007aca:	78fb      	ldrb	r3, [r7, #3]
 8007acc:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8007ace:	4b08      	ldr	r3, [pc, #32]	; (8007af0 <WIZCHIP_WRITE+0x98>)
 8007ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad2:	f107 020c 	add.w	r2, r7, #12
 8007ad6:	2104      	movs	r1, #4
 8007ad8:	4610      	mov	r0, r2
 8007ada:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8007adc:	4b04      	ldr	r3, [pc, #16]	; (8007af0 <WIZCHIP_WRITE+0x98>)
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8007ae2:	4b03      	ldr	r3, [pc, #12]	; (8007af0 <WIZCHIP_WRITE+0x98>)
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	4798      	blx	r3
}
 8007ae8:	bf00      	nop
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	200000a4 	.word	0x200000a4

08007af4 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8007af4:	b590      	push	{r4, r7, lr}
 8007af6:	b087      	sub	sp, #28
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	4613      	mov	r3, r2
 8007b00:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8007b02:	4b2b      	ldr	r3, [pc, #172]	; (8007bb0 <WIZCHIP_READ_BUF+0xbc>)
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	4798      	blx	r3
   WIZCHIP.CS._select();
 8007b08:	4b29      	ldr	r3, [pc, #164]	; (8007bb0 <WIZCHIP_READ_BUF+0xbc>)
 8007b0a:	695b      	ldr	r3, [r3, #20]
 8007b0c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007b0e:	4b28      	ldr	r3, [pc, #160]	; (8007bb0 <WIZCHIP_READ_BUF+0xbc>)
 8007b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d003      	beq.n	8007b1e <WIZCHIP_READ_BUF+0x2a>
 8007b16:	4b26      	ldr	r3, [pc, #152]	; (8007bb0 <WIZCHIP_READ_BUF+0xbc>)
 8007b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d126      	bne.n	8007b6c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8007b1e:	4b24      	ldr	r3, [pc, #144]	; (8007bb0 <WIZCHIP_READ_BUF+0xbc>)
 8007b20:	6a1b      	ldr	r3, [r3, #32]
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	0c12      	lsrs	r2, r2, #16
 8007b26:	b2d2      	uxtb	r2, r2
 8007b28:	4610      	mov	r0, r2
 8007b2a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8007b2c:	4b20      	ldr	r3, [pc, #128]	; (8007bb0 <WIZCHIP_READ_BUF+0xbc>)
 8007b2e:	6a1b      	ldr	r3, [r3, #32]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	0a12      	lsrs	r2, r2, #8
 8007b34:	b2d2      	uxtb	r2, r2
 8007b36:	4610      	mov	r0, r2
 8007b38:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8007b3a:	4b1d      	ldr	r3, [pc, #116]	; (8007bb0 <WIZCHIP_READ_BUF+0xbc>)
 8007b3c:	6a1b      	ldr	r3, [r3, #32]
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	b2d2      	uxtb	r2, r2
 8007b42:	4610      	mov	r0, r2
 8007b44:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8007b46:	2300      	movs	r3, #0
 8007b48:	82fb      	strh	r3, [r7, #22]
 8007b4a:	e00a      	b.n	8007b62 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8007b4c:	4b18      	ldr	r3, [pc, #96]	; (8007bb0 <WIZCHIP_READ_BUF+0xbc>)
 8007b4e:	69db      	ldr	r3, [r3, #28]
 8007b50:	8afa      	ldrh	r2, [r7, #22]
 8007b52:	68b9      	ldr	r1, [r7, #8]
 8007b54:	188c      	adds	r4, r1, r2
 8007b56:	4798      	blx	r3
 8007b58:	4603      	mov	r3, r0
 8007b5a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8007b5c:	8afb      	ldrh	r3, [r7, #22]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	82fb      	strh	r3, [r7, #22]
 8007b62:	8afa      	ldrh	r2, [r7, #22]
 8007b64:	88fb      	ldrh	r3, [r7, #6]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d3f0      	bcc.n	8007b4c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007b6a:	e017      	b.n	8007b9c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	0c1b      	lsrs	r3, r3, #16
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	0a1b      	lsrs	r3, r3, #8
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8007b82:	4b0b      	ldr	r3, [pc, #44]	; (8007bb0 <WIZCHIP_READ_BUF+0xbc>)
 8007b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b86:	f107 0210 	add.w	r2, r7, #16
 8007b8a:	2103      	movs	r1, #3
 8007b8c:	4610      	mov	r0, r2
 8007b8e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8007b90:	4b07      	ldr	r3, [pc, #28]	; (8007bb0 <WIZCHIP_READ_BUF+0xbc>)
 8007b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b94:	88fa      	ldrh	r2, [r7, #6]
 8007b96:	4611      	mov	r1, r2
 8007b98:	68b8      	ldr	r0, [r7, #8]
 8007b9a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8007b9c:	4b04      	ldr	r3, [pc, #16]	; (8007bb0 <WIZCHIP_READ_BUF+0xbc>)
 8007b9e:	699b      	ldr	r3, [r3, #24]
 8007ba0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8007ba2:	4b03      	ldr	r3, [pc, #12]	; (8007bb0 <WIZCHIP_READ_BUF+0xbc>)
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	4798      	blx	r3
}
 8007ba8:	bf00      	nop
 8007baa:	371c      	adds	r7, #28
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd90      	pop	{r4, r7, pc}
 8007bb0:	200000a4 	.word	0x200000a4

08007bb4 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8007bc2:	4b2b      	ldr	r3, [pc, #172]	; (8007c70 <WIZCHIP_WRITE_BUF+0xbc>)
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	4798      	blx	r3
   WIZCHIP.CS._select();
 8007bc8:	4b29      	ldr	r3, [pc, #164]	; (8007c70 <WIZCHIP_WRITE_BUF+0xbc>)
 8007bca:	695b      	ldr	r3, [r3, #20]
 8007bcc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f043 0304 	orr.w	r3, r3, #4
 8007bd4:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007bd6:	4b26      	ldr	r3, [pc, #152]	; (8007c70 <WIZCHIP_WRITE_BUF+0xbc>)
 8007bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d126      	bne.n	8007c2c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8007bde:	4b24      	ldr	r3, [pc, #144]	; (8007c70 <WIZCHIP_WRITE_BUF+0xbc>)
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	0c12      	lsrs	r2, r2, #16
 8007be6:	b2d2      	uxtb	r2, r2
 8007be8:	4610      	mov	r0, r2
 8007bea:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8007bec:	4b20      	ldr	r3, [pc, #128]	; (8007c70 <WIZCHIP_WRITE_BUF+0xbc>)
 8007bee:	6a1b      	ldr	r3, [r3, #32]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	0a12      	lsrs	r2, r2, #8
 8007bf4:	b2d2      	uxtb	r2, r2
 8007bf6:	4610      	mov	r0, r2
 8007bf8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8007bfa:	4b1d      	ldr	r3, [pc, #116]	; (8007c70 <WIZCHIP_WRITE_BUF+0xbc>)
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	b2d2      	uxtb	r2, r2
 8007c02:	4610      	mov	r0, r2
 8007c04:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8007c06:	2300      	movs	r3, #0
 8007c08:	82fb      	strh	r3, [r7, #22]
 8007c0a:	e00a      	b.n	8007c22 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8007c0c:	4b18      	ldr	r3, [pc, #96]	; (8007c70 <WIZCHIP_WRITE_BUF+0xbc>)
 8007c0e:	6a1b      	ldr	r3, [r3, #32]
 8007c10:	8afa      	ldrh	r2, [r7, #22]
 8007c12:	68b9      	ldr	r1, [r7, #8]
 8007c14:	440a      	add	r2, r1
 8007c16:	7812      	ldrb	r2, [r2, #0]
 8007c18:	4610      	mov	r0, r2
 8007c1a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8007c1c:	8afb      	ldrh	r3, [r7, #22]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	82fb      	strh	r3, [r7, #22]
 8007c22:	8afa      	ldrh	r2, [r7, #22]
 8007c24:	88fb      	ldrh	r3, [r7, #6]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d3f0      	bcc.n	8007c0c <WIZCHIP_WRITE_BUF+0x58>
 8007c2a:	e017      	b.n	8007c5c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	0c1b      	lsrs	r3, r3, #16
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	0a1b      	lsrs	r3, r3, #8
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8007c42:	4b0b      	ldr	r3, [pc, #44]	; (8007c70 <WIZCHIP_WRITE_BUF+0xbc>)
 8007c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c46:	f107 0210 	add.w	r2, r7, #16
 8007c4a:	2103      	movs	r1, #3
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8007c50:	4b07      	ldr	r3, [pc, #28]	; (8007c70 <WIZCHIP_WRITE_BUF+0xbc>)
 8007c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c54:	88fa      	ldrh	r2, [r7, #6]
 8007c56:	4611      	mov	r1, r2
 8007c58:	68b8      	ldr	r0, [r7, #8]
 8007c5a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8007c5c:	4b04      	ldr	r3, [pc, #16]	; (8007c70 <WIZCHIP_WRITE_BUF+0xbc>)
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8007c62:	4b03      	ldr	r3, [pc, #12]	; (8007c70 <WIZCHIP_WRITE_BUF+0xbc>)
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	4798      	blx	r3
}
 8007c68:	bf00      	nop
 8007c6a:	3718      	adds	r7, #24
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	200000a4 	.word	0x200000a4

08007c74 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8007c74:	b590      	push	{r4, r7, lr}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	81fb      	strh	r3, [r7, #14]
 8007c82:	2300      	movs	r3, #0
 8007c84:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8007c86:	79fb      	ldrb	r3, [r7, #7]
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	00db      	lsls	r3, r3, #3
 8007c8e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7ff fe94 	bl	80079c0 <WIZCHIP_READ>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8007c9c:	89bb      	ldrh	r3, [r7, #12]
 8007c9e:	021b      	lsls	r3, r3, #8
 8007ca0:	b29c      	uxth	r4, r3
 8007ca2:	79fb      	ldrb	r3, [r7, #7]
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	00db      	lsls	r3, r3, #3
 8007caa:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7ff fe86 	bl	80079c0 <WIZCHIP_READ>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	4423      	add	r3, r4
 8007cba:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8007cbc:	89bb      	ldrh	r3, [r7, #12]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d01a      	beq.n	8007cf8 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8007cc2:	79fb      	ldrb	r3, [r7, #7]
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	00db      	lsls	r3, r3, #3
 8007cca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7ff fe76 	bl	80079c0 <WIZCHIP_READ>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8007cd8:	89fb      	ldrh	r3, [r7, #14]
 8007cda:	021b      	lsls	r3, r3, #8
 8007cdc:	b29c      	uxth	r4, r3
 8007cde:	79fb      	ldrb	r3, [r7, #7]
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	00db      	lsls	r3, r3, #3
 8007ce6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7ff fe68 	bl	80079c0 <WIZCHIP_READ>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	4423      	add	r3, r4
 8007cf6:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8007cf8:	89fa      	ldrh	r2, [r7, #14]
 8007cfa:	89bb      	ldrh	r3, [r7, #12]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d1c2      	bne.n	8007c86 <getSn_TX_FSR+0x12>
   return val;
 8007d00:	89fb      	ldrh	r3, [r7, #14]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3714      	adds	r7, #20
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd90      	pop	{r4, r7, pc}

08007d0a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8007d0a:	b590      	push	{r4, r7, lr}
 8007d0c:	b085      	sub	sp, #20
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	4603      	mov	r3, r0
 8007d12:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8007d14:	2300      	movs	r3, #0
 8007d16:	81fb      	strh	r3, [r7, #14]
 8007d18:	2300      	movs	r3, #0
 8007d1a:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8007d1c:	79fb      	ldrb	r3, [r7, #7]
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	3301      	adds	r3, #1
 8007d22:	00db      	lsls	r3, r3, #3
 8007d24:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7ff fe49 	bl	80079c0 <WIZCHIP_READ>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8007d32:	89bb      	ldrh	r3, [r7, #12]
 8007d34:	021b      	lsls	r3, r3, #8
 8007d36:	b29c      	uxth	r4, r3
 8007d38:	79fb      	ldrb	r3, [r7, #7]
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	00db      	lsls	r3, r3, #3
 8007d40:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7ff fe3b 	bl	80079c0 <WIZCHIP_READ>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	4423      	add	r3, r4
 8007d50:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8007d52:	89bb      	ldrh	r3, [r7, #12]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d01a      	beq.n	8007d8e <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8007d58:	79fb      	ldrb	r3, [r7, #7]
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	00db      	lsls	r3, r3, #3
 8007d60:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7ff fe2b 	bl	80079c0 <WIZCHIP_READ>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8007d6e:	89fb      	ldrh	r3, [r7, #14]
 8007d70:	021b      	lsls	r3, r3, #8
 8007d72:	b29c      	uxth	r4, r3
 8007d74:	79fb      	ldrb	r3, [r7, #7]
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	3301      	adds	r3, #1
 8007d7a:	00db      	lsls	r3, r3, #3
 8007d7c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7ff fe1d 	bl	80079c0 <WIZCHIP_READ>
 8007d86:	4603      	mov	r3, r0
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	4423      	add	r3, r4
 8007d8c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8007d8e:	89fa      	ldrh	r2, [r7, #14]
 8007d90:	89bb      	ldrh	r3, [r7, #12]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d1c2      	bne.n	8007d1c <getSn_RX_RSR+0x12>
   return val;
 8007d96:	89fb      	ldrh	r3, [r7, #14]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3714      	adds	r7, #20
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd90      	pop	{r4, r7, pc}

08007da0 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8007da0:	b590      	push	{r4, r7, lr}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	4603      	mov	r3, r0
 8007da8:	6039      	str	r1, [r7, #0]
 8007daa:	71fb      	strb	r3, [r7, #7]
 8007dac:	4613      	mov	r3, r2
 8007dae:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8007db0:	2300      	movs	r3, #0
 8007db2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8007db4:	2300      	movs	r3, #0
 8007db6:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8007db8:	88bb      	ldrh	r3, [r7, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d048      	beq.n	8007e50 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8007dbe:	79fb      	ldrb	r3, [r7, #7]
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	00db      	lsls	r3, r3, #3
 8007dc6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7ff fdf8 	bl	80079c0 <WIZCHIP_READ>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	021b      	lsls	r3, r3, #8
 8007dd6:	b29c      	uxth	r4, r3
 8007dd8:	79fb      	ldrb	r3, [r7, #7]
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	3301      	adds	r3, #1
 8007dde:	00db      	lsls	r3, r3, #3
 8007de0:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7ff fdeb 	bl	80079c0 <WIZCHIP_READ>
 8007dea:	4603      	mov	r3, r0
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	4423      	add	r3, r4
 8007df0:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8007df2:	89fb      	ldrh	r3, [r7, #14]
 8007df4:	021b      	lsls	r3, r3, #8
 8007df6:	79fa      	ldrb	r2, [r7, #7]
 8007df8:	0092      	lsls	r2, r2, #2
 8007dfa:	3202      	adds	r2, #2
 8007dfc:	00d2      	lsls	r2, r2, #3
 8007dfe:	4413      	add	r3, r2
 8007e00:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8007e02:	88bb      	ldrh	r3, [r7, #4]
 8007e04:	461a      	mov	r2, r3
 8007e06:	6839      	ldr	r1, [r7, #0]
 8007e08:	68b8      	ldr	r0, [r7, #8]
 8007e0a:	f7ff fed3 	bl	8007bb4 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8007e0e:	89fa      	ldrh	r2, [r7, #14]
 8007e10:	88bb      	ldrh	r3, [r7, #4]
 8007e12:	4413      	add	r3, r2
 8007e14:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8007e16:	79fb      	ldrb	r3, [r7, #7]
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	00db      	lsls	r3, r3, #3
 8007e1e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8007e22:	461a      	mov	r2, r3
 8007e24:	89fb      	ldrh	r3, [r7, #14]
 8007e26:	0a1b      	lsrs	r3, r3, #8
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	4610      	mov	r0, r2
 8007e30:	f7ff fe12 	bl	8007a58 <WIZCHIP_WRITE>
 8007e34:	79fb      	ldrb	r3, [r7, #7]
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	3301      	adds	r3, #1
 8007e3a:	00db      	lsls	r3, r3, #3
 8007e3c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8007e40:	461a      	mov	r2, r3
 8007e42:	89fb      	ldrh	r3, [r7, #14]
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	4619      	mov	r1, r3
 8007e48:	4610      	mov	r0, r2
 8007e4a:	f7ff fe05 	bl	8007a58 <WIZCHIP_WRITE>
 8007e4e:	e000      	b.n	8007e52 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8007e50:	bf00      	nop
}
 8007e52:	3714      	adds	r7, #20
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd90      	pop	{r4, r7, pc}

08007e58 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8007e58:	b590      	push	{r4, r7, lr}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	4603      	mov	r3, r0
 8007e60:	6039      	str	r1, [r7, #0]
 8007e62:	71fb      	strb	r3, [r7, #7]
 8007e64:	4613      	mov	r3, r2
 8007e66:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8007e70:	88bb      	ldrh	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d048      	beq.n	8007f08 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8007e76:	79fb      	ldrb	r3, [r7, #7]
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	00db      	lsls	r3, r3, #3
 8007e7e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7ff fd9c 	bl	80079c0 <WIZCHIP_READ>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	021b      	lsls	r3, r3, #8
 8007e8e:	b29c      	uxth	r4, r3
 8007e90:	79fb      	ldrb	r3, [r7, #7]
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	3301      	adds	r3, #1
 8007e96:	00db      	lsls	r3, r3, #3
 8007e98:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7ff fd8f 	bl	80079c0 <WIZCHIP_READ>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	4423      	add	r3, r4
 8007ea8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8007eaa:	89fb      	ldrh	r3, [r7, #14]
 8007eac:	021b      	lsls	r3, r3, #8
 8007eae:	79fa      	ldrb	r2, [r7, #7]
 8007eb0:	0092      	lsls	r2, r2, #2
 8007eb2:	3203      	adds	r2, #3
 8007eb4:	00d2      	lsls	r2, r2, #3
 8007eb6:	4413      	add	r3, r2
 8007eb8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8007eba:	88bb      	ldrh	r3, [r7, #4]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	6839      	ldr	r1, [r7, #0]
 8007ec0:	68b8      	ldr	r0, [r7, #8]
 8007ec2:	f7ff fe17 	bl	8007af4 <WIZCHIP_READ_BUF>
   ptr += len;
 8007ec6:	89fa      	ldrh	r2, [r7, #14]
 8007ec8:	88bb      	ldrh	r3, [r7, #4]
 8007eca:	4413      	add	r3, r2
 8007ecc:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8007ece:	79fb      	ldrb	r3, [r7, #7]
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	00db      	lsls	r3, r3, #3
 8007ed6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8007eda:	461a      	mov	r2, r3
 8007edc:	89fb      	ldrh	r3, [r7, #14]
 8007ede:	0a1b      	lsrs	r3, r3, #8
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	4610      	mov	r0, r2
 8007ee8:	f7ff fdb6 	bl	8007a58 <WIZCHIP_WRITE>
 8007eec:	79fb      	ldrb	r3, [r7, #7]
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	00db      	lsls	r3, r3, #3
 8007ef4:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8007ef8:	461a      	mov	r2, r3
 8007efa:	89fb      	ldrh	r3, [r7, #14]
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	4619      	mov	r1, r3
 8007f00:	4610      	mov	r0, r2
 8007f02:	f7ff fda9 	bl	8007a58 <WIZCHIP_WRITE>
 8007f06:	e000      	b.n	8007f0a <wiz_recv_data+0xb2>
   if(len == 0) return;
 8007f08:	bf00      	nop
}
 8007f0a:	3714      	adds	r7, #20
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd90      	pop	{r4, r7, pc}

08007f10 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8007f10:	b590      	push	{r4, r7, lr}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	4603      	mov	r3, r0
 8007f18:	460a      	mov	r2, r1
 8007f1a:	71fb      	strb	r3, [r7, #7]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8007f20:	2300      	movs	r3, #0
 8007f22:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8007f24:	79fb      	ldrb	r3, [r7, #7]
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	3301      	adds	r3, #1
 8007f2a:	00db      	lsls	r3, r3, #3
 8007f2c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7ff fd45 	bl	80079c0 <WIZCHIP_READ>
 8007f36:	4603      	mov	r3, r0
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	021b      	lsls	r3, r3, #8
 8007f3c:	b29c      	uxth	r4, r3
 8007f3e:	79fb      	ldrb	r3, [r7, #7]
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	3301      	adds	r3, #1
 8007f44:	00db      	lsls	r3, r3, #3
 8007f46:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7ff fd38 	bl	80079c0 <WIZCHIP_READ>
 8007f50:	4603      	mov	r3, r0
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	4423      	add	r3, r4
 8007f56:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8007f58:	89fa      	ldrh	r2, [r7, #14]
 8007f5a:	88bb      	ldrh	r3, [r7, #4]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8007f60:	79fb      	ldrb	r3, [r7, #7]
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	3301      	adds	r3, #1
 8007f66:	00db      	lsls	r3, r3, #3
 8007f68:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	89fb      	ldrh	r3, [r7, #14]
 8007f70:	0a1b      	lsrs	r3, r3, #8
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	4619      	mov	r1, r3
 8007f78:	4610      	mov	r0, r2
 8007f7a:	f7ff fd6d 	bl	8007a58 <WIZCHIP_WRITE>
 8007f7e:	79fb      	ldrb	r3, [r7, #7]
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	3301      	adds	r3, #1
 8007f84:	00db      	lsls	r3, r3, #3
 8007f86:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	89fb      	ldrh	r3, [r7, #14]
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	4619      	mov	r1, r3
 8007f92:	4610      	mov	r0, r2
 8007f94:	f7ff fd60 	bl	8007a58 <WIZCHIP_WRITE>
}
 8007f98:	bf00      	nop
 8007f9a:	3714      	adds	r7, #20
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd90      	pop	{r4, r7, pc}

08007fa0 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8007fa0:	b590      	push	{r4, r7, lr}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	4608      	mov	r0, r1
 8007faa:	4611      	mov	r1, r2
 8007fac:	461a      	mov	r2, r3
 8007fae:	4623      	mov	r3, r4
 8007fb0:	71fb      	strb	r3, [r7, #7]
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	71bb      	strb	r3, [r7, #6]
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	80bb      	strh	r3, [r7, #4]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8007fbe:	79fb      	ldrb	r3, [r7, #7]
 8007fc0:	2b08      	cmp	r3, #8
 8007fc2:	d902      	bls.n	8007fca <socket+0x2a>
 8007fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8007fc8:	e0f0      	b.n	80081ac <socket+0x20c>
	switch(protocol)
 8007fca:	79bb      	ldrb	r3, [r7, #6]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d005      	beq.n	8007fdc <socket+0x3c>
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	dd11      	ble.n	8007ff8 <socket+0x58>
 8007fd4:	3b02      	subs	r3, #2
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d80e      	bhi.n	8007ff8 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8007fda:	e011      	b.n	8008000 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8007fdc:	f107 030c 	add.w	r3, r7, #12
 8007fe0:	2204      	movs	r2, #4
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8007fe8:	f7ff fd84 	bl	8007af4 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d105      	bne.n	8007ffe <socket+0x5e>
 8007ff2:	f06f 0302 	mvn.w	r3, #2
 8007ff6:	e0d9      	b.n	80081ac <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8007ff8:	f06f 0304 	mvn.w	r3, #4
 8007ffc:	e0d6      	b.n	80081ac <socket+0x20c>
	    break;
 8007ffe:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8008000:	78fb      	ldrb	r3, [r7, #3]
 8008002:	f003 0304 	and.w	r3, r3, #4
 8008006:	2b00      	cmp	r3, #0
 8008008:	d002      	beq.n	8008010 <socket+0x70>
 800800a:	f06f 0305 	mvn.w	r3, #5
 800800e:	e0cd      	b.n	80081ac <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8008010:	78fb      	ldrb	r3, [r7, #3]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d028      	beq.n	8008068 <socket+0xc8>
	{
   	switch(protocol)
 8008016:	79bb      	ldrb	r3, [r7, #6]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d002      	beq.n	8008022 <socket+0x82>
 800801c:	2b02      	cmp	r3, #2
 800801e:	d008      	beq.n	8008032 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8008020:	e022      	b.n	8008068 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8008022:	78fb      	ldrb	r3, [r7, #3]
 8008024:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8008028:	2b00      	cmp	r3, #0
 800802a:	d11a      	bne.n	8008062 <socket+0xc2>
 800802c:	f06f 0305 	mvn.w	r3, #5
 8008030:	e0bc      	b.n	80081ac <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8008032:	78fb      	ldrb	r3, [r7, #3]
 8008034:	f003 0320 	and.w	r3, r3, #32
 8008038:	2b00      	cmp	r3, #0
 800803a:	d006      	beq.n	800804a <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800803c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008040:	2b00      	cmp	r3, #0
 8008042:	db02      	blt.n	800804a <socket+0xaa>
 8008044:	f06f 0305 	mvn.w	r3, #5
 8008048:	e0b0      	b.n	80081ac <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 800804a:	78fb      	ldrb	r3, [r7, #3]
 800804c:	f003 0310 	and.w	r3, r3, #16
 8008050:	2b00      	cmp	r3, #0
 8008052:	d008      	beq.n	8008066 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8008054:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008058:	2b00      	cmp	r3, #0
 800805a:	db04      	blt.n	8008066 <socket+0xc6>
 800805c:	f06f 0305 	mvn.w	r3, #5
 8008060:	e0a4      	b.n	80081ac <socket+0x20c>
   	      break;
 8008062:	bf00      	nop
 8008064:	e000      	b.n	8008068 <socket+0xc8>
   	      break;
 8008066:	bf00      	nop
   	}
   }
	close(sn);
 8008068:	79fb      	ldrb	r3, [r7, #7]
 800806a:	4618      	mov	r0, r3
 800806c:	f000 f8ac 	bl	80081c8 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8008070:	79fb      	ldrb	r3, [r7, #7]
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	3301      	adds	r3, #1
 8008076:	00db      	lsls	r3, r3, #3
 8008078:	4618      	mov	r0, r3
 800807a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800807e:	f023 030f 	bic.w	r3, r3, #15
 8008082:	b25a      	sxtb	r2, r3
 8008084:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008088:	4313      	orrs	r3, r2
 800808a:	b25b      	sxtb	r3, r3
 800808c:	b2db      	uxtb	r3, r3
 800808e:	4619      	mov	r1, r3
 8008090:	f7ff fce2 	bl	8007a58 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8008094:	88bb      	ldrh	r3, [r7, #4]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d110      	bne.n	80080bc <socket+0x11c>
	{
	   port = sock_any_port++;
 800809a:	4b46      	ldr	r3, [pc, #280]	; (80081b4 <socket+0x214>)
 800809c:	881b      	ldrh	r3, [r3, #0]
 800809e:	1c5a      	adds	r2, r3, #1
 80080a0:	b291      	uxth	r1, r2
 80080a2:	4a44      	ldr	r2, [pc, #272]	; (80081b4 <socket+0x214>)
 80080a4:	8011      	strh	r1, [r2, #0]
 80080a6:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80080a8:	4b42      	ldr	r3, [pc, #264]	; (80081b4 <socket+0x214>)
 80080aa:	881b      	ldrh	r3, [r3, #0]
 80080ac:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d103      	bne.n	80080bc <socket+0x11c>
 80080b4:	4b3f      	ldr	r3, [pc, #252]	; (80081b4 <socket+0x214>)
 80080b6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80080ba:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80080bc:	79fb      	ldrb	r3, [r7, #7]
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	3301      	adds	r3, #1
 80080c2:	00db      	lsls	r3, r3, #3
 80080c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080c8:	461a      	mov	r2, r3
 80080ca:	88bb      	ldrh	r3, [r7, #4]
 80080cc:	0a1b      	lsrs	r3, r3, #8
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	4619      	mov	r1, r3
 80080d4:	4610      	mov	r0, r2
 80080d6:	f7ff fcbf 	bl	8007a58 <WIZCHIP_WRITE>
 80080da:	79fb      	ldrb	r3, [r7, #7]
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	3301      	adds	r3, #1
 80080e0:	00db      	lsls	r3, r3, #3
 80080e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080e6:	461a      	mov	r2, r3
 80080e8:	88bb      	ldrh	r3, [r7, #4]
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	4619      	mov	r1, r3
 80080ee:	4610      	mov	r0, r2
 80080f0:	f7ff fcb2 	bl	8007a58 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80080f4:	79fb      	ldrb	r3, [r7, #7]
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	3301      	adds	r3, #1
 80080fa:	00db      	lsls	r3, r3, #3
 80080fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008100:	2101      	movs	r1, #1
 8008102:	4618      	mov	r0, r3
 8008104:	f7ff fca8 	bl	8007a58 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8008108:	bf00      	nop
 800810a:	79fb      	ldrb	r3, [r7, #7]
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	3301      	adds	r3, #1
 8008110:	00db      	lsls	r3, r3, #3
 8008112:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008116:	4618      	mov	r0, r3
 8008118:	f7ff fc52 	bl	80079c0 <WIZCHIP_READ>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1f3      	bne.n	800810a <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8008122:	79fb      	ldrb	r3, [r7, #7]
 8008124:	2201      	movs	r2, #1
 8008126:	fa02 f303 	lsl.w	r3, r2, r3
 800812a:	b21b      	sxth	r3, r3
 800812c:	43db      	mvns	r3, r3
 800812e:	b21a      	sxth	r2, r3
 8008130:	4b21      	ldr	r3, [pc, #132]	; (80081b8 <socket+0x218>)
 8008132:	881b      	ldrh	r3, [r3, #0]
 8008134:	b21b      	sxth	r3, r3
 8008136:	4013      	ands	r3, r2
 8008138:	b21b      	sxth	r3, r3
 800813a:	b29a      	uxth	r2, r3
 800813c:	4b1e      	ldr	r3, [pc, #120]	; (80081b8 <socket+0x218>)
 800813e:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8008140:	78fb      	ldrb	r3, [r7, #3]
 8008142:	f003 0201 	and.w	r2, r3, #1
 8008146:	79fb      	ldrb	r3, [r7, #7]
 8008148:	fa02 f303 	lsl.w	r3, r2, r3
 800814c:	b21a      	sxth	r2, r3
 800814e:	4b1a      	ldr	r3, [pc, #104]	; (80081b8 <socket+0x218>)
 8008150:	881b      	ldrh	r3, [r3, #0]
 8008152:	b21b      	sxth	r3, r3
 8008154:	4313      	orrs	r3, r2
 8008156:	b21b      	sxth	r3, r3
 8008158:	b29a      	uxth	r2, r3
 800815a:	4b17      	ldr	r3, [pc, #92]	; (80081b8 <socket+0x218>)
 800815c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800815e:	79fb      	ldrb	r3, [r7, #7]
 8008160:	2201      	movs	r2, #1
 8008162:	fa02 f303 	lsl.w	r3, r2, r3
 8008166:	b21b      	sxth	r3, r3
 8008168:	43db      	mvns	r3, r3
 800816a:	b21a      	sxth	r2, r3
 800816c:	4b13      	ldr	r3, [pc, #76]	; (80081bc <socket+0x21c>)
 800816e:	881b      	ldrh	r3, [r3, #0]
 8008170:	b21b      	sxth	r3, r3
 8008172:	4013      	ands	r3, r2
 8008174:	b21b      	sxth	r3, r3
 8008176:	b29a      	uxth	r2, r3
 8008178:	4b10      	ldr	r3, [pc, #64]	; (80081bc <socket+0x21c>)
 800817a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800817c:	79fb      	ldrb	r3, [r7, #7]
 800817e:	4a10      	ldr	r2, [pc, #64]	; (80081c0 <socket+0x220>)
 8008180:	2100      	movs	r1, #0
 8008182:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8008186:	79fb      	ldrb	r3, [r7, #7]
 8008188:	4a0e      	ldr	r2, [pc, #56]	; (80081c4 <socket+0x224>)
 800818a:	2100      	movs	r1, #0
 800818c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800818e:	bf00      	nop
 8008190:	79fb      	ldrb	r3, [r7, #7]
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	3301      	adds	r3, #1
 8008196:	00db      	lsls	r3, r3, #3
 8008198:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800819c:	4618      	mov	r0, r3
 800819e:	f7ff fc0f 	bl	80079c0 <WIZCHIP_READ>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d0f3      	beq.n	8008190 <socket+0x1f0>
   return (int8_t)sn;
 80081a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 80081ac:	4618      	mov	r0, r3
 80081ae:	3714      	adds	r7, #20
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd90      	pop	{r4, r7, pc}
 80081b4:	200000a2 	.word	0x200000a2
 80081b8:	20000924 	.word	0x20000924
 80081bc:	20000926 	.word	0x20000926
 80081c0:	20000928 	.word	0x20000928
 80081c4:	20000938 	.word	0x20000938

080081c8 <close>:

int8_t close(uint8_t sn)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	4603      	mov	r3, r0
 80081d0:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80081d2:	79fb      	ldrb	r3, [r7, #7]
 80081d4:	2b08      	cmp	r3, #8
 80081d6:	d902      	bls.n	80081de <close+0x16>
 80081d8:	f04f 33ff 	mov.w	r3, #4294967295
 80081dc:	e055      	b.n	800828a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80081de:	79fb      	ldrb	r3, [r7, #7]
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	3301      	adds	r3, #1
 80081e4:	00db      	lsls	r3, r3, #3
 80081e6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80081ea:	2110      	movs	r1, #16
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7ff fc33 	bl	8007a58 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80081f2:	bf00      	nop
 80081f4:	79fb      	ldrb	r3, [r7, #7]
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	3301      	adds	r3, #1
 80081fa:	00db      	lsls	r3, r3, #3
 80081fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008200:	4618      	mov	r0, r3
 8008202:	f7ff fbdd 	bl	80079c0 <WIZCHIP_READ>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1f3      	bne.n	80081f4 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 800820c:	79fb      	ldrb	r3, [r7, #7]
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	3301      	adds	r3, #1
 8008212:	00db      	lsls	r3, r3, #3
 8008214:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008218:	211f      	movs	r1, #31
 800821a:	4618      	mov	r0, r3
 800821c:	f7ff fc1c 	bl	8007a58 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8008220:	79fb      	ldrb	r3, [r7, #7]
 8008222:	2201      	movs	r2, #1
 8008224:	fa02 f303 	lsl.w	r3, r2, r3
 8008228:	b21b      	sxth	r3, r3
 800822a:	43db      	mvns	r3, r3
 800822c:	b21a      	sxth	r2, r3
 800822e:	4b19      	ldr	r3, [pc, #100]	; (8008294 <close+0xcc>)
 8008230:	881b      	ldrh	r3, [r3, #0]
 8008232:	b21b      	sxth	r3, r3
 8008234:	4013      	ands	r3, r2
 8008236:	b21b      	sxth	r3, r3
 8008238:	b29a      	uxth	r2, r3
 800823a:	4b16      	ldr	r3, [pc, #88]	; (8008294 <close+0xcc>)
 800823c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800823e:	79fb      	ldrb	r3, [r7, #7]
 8008240:	2201      	movs	r2, #1
 8008242:	fa02 f303 	lsl.w	r3, r2, r3
 8008246:	b21b      	sxth	r3, r3
 8008248:	43db      	mvns	r3, r3
 800824a:	b21a      	sxth	r2, r3
 800824c:	4b12      	ldr	r3, [pc, #72]	; (8008298 <close+0xd0>)
 800824e:	881b      	ldrh	r3, [r3, #0]
 8008250:	b21b      	sxth	r3, r3
 8008252:	4013      	ands	r3, r2
 8008254:	b21b      	sxth	r3, r3
 8008256:	b29a      	uxth	r2, r3
 8008258:	4b0f      	ldr	r3, [pc, #60]	; (8008298 <close+0xd0>)
 800825a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 800825c:	79fb      	ldrb	r3, [r7, #7]
 800825e:	4a0f      	ldr	r2, [pc, #60]	; (800829c <close+0xd4>)
 8008260:	2100      	movs	r1, #0
 8008262:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8008266:	79fb      	ldrb	r3, [r7, #7]
 8008268:	4a0d      	ldr	r2, [pc, #52]	; (80082a0 <close+0xd8>)
 800826a:	2100      	movs	r1, #0
 800826c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800826e:	bf00      	nop
 8008270:	79fb      	ldrb	r3, [r7, #7]
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	3301      	adds	r3, #1
 8008276:	00db      	lsls	r3, r3, #3
 8008278:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800827c:	4618      	mov	r0, r3
 800827e:	f7ff fb9f 	bl	80079c0 <WIZCHIP_READ>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d1f3      	bne.n	8008270 <close+0xa8>
	return SOCK_OK;
 8008288:	2301      	movs	r3, #1
}
 800828a:	4618      	mov	r0, r3
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	20000924 	.word	0x20000924
 8008298:	20000926 	.word	0x20000926
 800829c:	20000928 	.word	0x20000928
 80082a0:	20000938 	.word	0x20000938

080082a4 <listen>:

int8_t listen(uint8_t sn)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	4603      	mov	r3, r0
 80082ac:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80082ae:	79fb      	ldrb	r3, [r7, #7]
 80082b0:	2b08      	cmp	r3, #8
 80082b2:	d902      	bls.n	80082ba <listen+0x16>
 80082b4:	f04f 33ff 	mov.w	r3, #4294967295
 80082b8:	e049      	b.n	800834e <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80082ba:	79fb      	ldrb	r3, [r7, #7]
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	3301      	adds	r3, #1
 80082c0:	00db      	lsls	r3, r3, #3
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7ff fb7c 	bl	80079c0 <WIZCHIP_READ>
 80082c8:	4603      	mov	r3, r0
 80082ca:	f003 030f 	and.w	r3, r3, #15
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d002      	beq.n	80082d8 <listen+0x34>
 80082d2:	f06f 0304 	mvn.w	r3, #4
 80082d6:	e03a      	b.n	800834e <listen+0xaa>
	CHECK_SOCKINIT();
 80082d8:	79fb      	ldrb	r3, [r7, #7]
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	3301      	adds	r3, #1
 80082de:	00db      	lsls	r3, r3, #3
 80082e0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7ff fb6b 	bl	80079c0 <WIZCHIP_READ>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b13      	cmp	r3, #19
 80082ee:	d002      	beq.n	80082f6 <listen+0x52>
 80082f0:	f06f 0302 	mvn.w	r3, #2
 80082f4:	e02b      	b.n	800834e <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 80082f6:	79fb      	ldrb	r3, [r7, #7]
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	3301      	adds	r3, #1
 80082fc:	00db      	lsls	r3, r3, #3
 80082fe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008302:	2102      	movs	r1, #2
 8008304:	4618      	mov	r0, r3
 8008306:	f7ff fba7 	bl	8007a58 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 800830a:	bf00      	nop
 800830c:	79fb      	ldrb	r3, [r7, #7]
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	3301      	adds	r3, #1
 8008312:	00db      	lsls	r3, r3, #3
 8008314:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008318:	4618      	mov	r0, r3
 800831a:	f7ff fb51 	bl	80079c0 <WIZCHIP_READ>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1f3      	bne.n	800830c <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8008324:	e006      	b.n	8008334 <listen+0x90>
   {
         close(sn);
 8008326:	79fb      	ldrb	r3, [r7, #7]
 8008328:	4618      	mov	r0, r3
 800832a:	f7ff ff4d 	bl	80081c8 <close>
         return SOCKERR_SOCKCLOSED;
 800832e:	f06f 0303 	mvn.w	r3, #3
 8008332:	e00c      	b.n	800834e <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8008334:	79fb      	ldrb	r3, [r7, #7]
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	3301      	adds	r3, #1
 800833a:	00db      	lsls	r3, r3, #3
 800833c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008340:	4618      	mov	r0, r3
 8008342:	f7ff fb3d 	bl	80079c0 <WIZCHIP_READ>
 8008346:	4603      	mov	r3, r0
 8008348:	2b14      	cmp	r3, #20
 800834a:	d1ec      	bne.n	8008326 <listen+0x82>
   }
   return SOCK_OK;
 800834c:	2301      	movs	r3, #1
}
 800834e:	4618      	mov	r0, r3
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
	...

08008358 <connect>:


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	4603      	mov	r3, r0
 8008360:	6039      	str	r1, [r7, #0]
 8008362:	71fb      	strb	r3, [r7, #7]
 8008364:	4613      	mov	r3, r2
 8008366:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8008368:	79fb      	ldrb	r3, [r7, #7]
 800836a:	2b08      	cmp	r3, #8
 800836c:	d902      	bls.n	8008374 <connect+0x1c>
 800836e:	f04f 33ff 	mov.w	r3, #4294967295
 8008372:	e0c6      	b.n	8008502 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8008374:	79fb      	ldrb	r3, [r7, #7]
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	3301      	adds	r3, #1
 800837a:	00db      	lsls	r3, r3, #3
 800837c:	4618      	mov	r0, r3
 800837e:	f7ff fb1f 	bl	80079c0 <WIZCHIP_READ>
 8008382:	4603      	mov	r3, r0
 8008384:	f003 030f 	and.w	r3, r3, #15
 8008388:	2b01      	cmp	r3, #1
 800838a:	d002      	beq.n	8008392 <connect+0x3a>
 800838c:	f06f 0304 	mvn.w	r3, #4
 8008390:	e0b7      	b.n	8008502 <connect+0x1aa>
   CHECK_SOCKINIT();
 8008392:	79fb      	ldrb	r3, [r7, #7]
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	3301      	adds	r3, #1
 8008398:	00db      	lsls	r3, r3, #3
 800839a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800839e:	4618      	mov	r0, r3
 80083a0:	f7ff fb0e 	bl	80079c0 <WIZCHIP_READ>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b13      	cmp	r3, #19
 80083a8:	d002      	beq.n	80083b0 <connect+0x58>
 80083aa:	f06f 0302 	mvn.w	r3, #2
 80083ae:	e0a8      	b.n	8008502 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	021b      	lsls	r3, r3, #8
 80083ba:	683a      	ldr	r2, [r7, #0]
 80083bc:	3201      	adds	r2, #1
 80083be:	7812      	ldrb	r2, [r2, #0]
 80083c0:	4413      	add	r3, r2
 80083c2:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	021b      	lsls	r3, r3, #8
 80083c8:	683a      	ldr	r2, [r7, #0]
 80083ca:	3202      	adds	r2, #2
 80083cc:	7812      	ldrb	r2, [r2, #0]
 80083ce:	4413      	add	r3, r2
 80083d0:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	021b      	lsls	r3, r3, #8
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	3203      	adds	r2, #3
 80083da:	7812      	ldrb	r2, [r2, #0]
 80083dc:	4413      	add	r3, r2
 80083de:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e6:	d002      	beq.n	80083ee <connect+0x96>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d102      	bne.n	80083f4 <connect+0x9c>
 80083ee:	f06f 030b 	mvn.w	r3, #11
 80083f2:	e086      	b.n	8008502 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 80083f4:	88bb      	ldrh	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d102      	bne.n	8008400 <connect+0xa8>
 80083fa:	f06f 030a 	mvn.w	r3, #10
 80083fe:	e080      	b.n	8008502 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8008400:	79fb      	ldrb	r3, [r7, #7]
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	3301      	adds	r3, #1
 8008406:	00db      	lsls	r3, r3, #3
 8008408:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800840c:	2204      	movs	r2, #4
 800840e:	6839      	ldr	r1, [r7, #0]
 8008410:	4618      	mov	r0, r3
 8008412:	f7ff fbcf 	bl	8007bb4 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8008416:	79fb      	ldrb	r3, [r7, #7]
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	3301      	adds	r3, #1
 800841c:	00db      	lsls	r3, r3, #3
 800841e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008422:	461a      	mov	r2, r3
 8008424:	88bb      	ldrh	r3, [r7, #4]
 8008426:	0a1b      	lsrs	r3, r3, #8
 8008428:	b29b      	uxth	r3, r3
 800842a:	b2db      	uxtb	r3, r3
 800842c:	4619      	mov	r1, r3
 800842e:	4610      	mov	r0, r2
 8008430:	f7ff fb12 	bl	8007a58 <WIZCHIP_WRITE>
 8008434:	79fb      	ldrb	r3, [r7, #7]
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	3301      	adds	r3, #1
 800843a:	00db      	lsls	r3, r3, #3
 800843c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8008440:	461a      	mov	r2, r3
 8008442:	88bb      	ldrh	r3, [r7, #4]
 8008444:	b2db      	uxtb	r3, r3
 8008446:	4619      	mov	r1, r3
 8008448:	4610      	mov	r0, r2
 800844a:	f7ff fb05 	bl	8007a58 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 800844e:	79fb      	ldrb	r3, [r7, #7]
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	3301      	adds	r3, #1
 8008454:	00db      	lsls	r3, r3, #3
 8008456:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800845a:	2104      	movs	r1, #4
 800845c:	4618      	mov	r0, r3
 800845e:	f7ff fafb 	bl	8007a58 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8008462:	bf00      	nop
 8008464:	79fb      	ldrb	r3, [r7, #7]
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	3301      	adds	r3, #1
 800846a:	00db      	lsls	r3, r3, #3
 800846c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008470:	4618      	mov	r0, r3
 8008472:	f7ff faa5 	bl	80079c0 <WIZCHIP_READ>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1f3      	bne.n	8008464 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800847c:	4b23      	ldr	r3, [pc, #140]	; (800850c <connect+0x1b4>)
 800847e:	881b      	ldrh	r3, [r3, #0]
 8008480:	461a      	mov	r2, r3
 8008482:	79fb      	ldrb	r3, [r7, #7]
 8008484:	fa42 f303 	asr.w	r3, r2, r3
 8008488:	f003 0301 	and.w	r3, r3, #1
 800848c:	2b00      	cmp	r3, #0
 800848e:	d02b      	beq.n	80084e8 <connect+0x190>
 8008490:	2300      	movs	r3, #0
 8008492:	e036      	b.n	8008502 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8008494:	79fb      	ldrb	r3, [r7, #7]
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	3301      	adds	r3, #1
 800849a:	00db      	lsls	r3, r3, #3
 800849c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7ff fa8d 	bl	80079c0 <WIZCHIP_READ>
 80084a6:	4603      	mov	r3, r0
 80084a8:	f003 0308 	and.w	r3, r3, #8
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00c      	beq.n	80084ca <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 80084b0:	79fb      	ldrb	r3, [r7, #7]
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	3301      	adds	r3, #1
 80084b6:	00db      	lsls	r3, r3, #3
 80084b8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80084bc:	2108      	movs	r1, #8
 80084be:	4618      	mov	r0, r3
 80084c0:	f7ff faca 	bl	8007a58 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 80084c4:	f06f 030c 	mvn.w	r3, #12
 80084c8:	e01b      	b.n	8008502 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 80084ca:	79fb      	ldrb	r3, [r7, #7]
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	3301      	adds	r3, #1
 80084d0:	00db      	lsls	r3, r3, #3
 80084d2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7ff fa72 	bl	80079c0 <WIZCHIP_READ>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d102      	bne.n	80084e8 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 80084e2:	f06f 0303 	mvn.w	r3, #3
 80084e6:	e00c      	b.n	8008502 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 80084e8:	79fb      	ldrb	r3, [r7, #7]
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	3301      	adds	r3, #1
 80084ee:	00db      	lsls	r3, r3, #3
 80084f0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7ff fa63 	bl	80079c0 <WIZCHIP_READ>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b17      	cmp	r3, #23
 80084fe:	d1c9      	bne.n	8008494 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8008500:	2301      	movs	r3, #1
}
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	20000924 	.word	0x20000924

08008510 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	4603      	mov	r3, r0
 8008518:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800851a:	79fb      	ldrb	r3, [r7, #7]
 800851c:	2b08      	cmp	r3, #8
 800851e:	d902      	bls.n	8008526 <disconnect+0x16>
 8008520:	f04f 33ff 	mov.w	r3, #4294967295
 8008524:	e062      	b.n	80085ec <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8008526:	79fb      	ldrb	r3, [r7, #7]
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	3301      	adds	r3, #1
 800852c:	00db      	lsls	r3, r3, #3
 800852e:	4618      	mov	r0, r3
 8008530:	f7ff fa46 	bl	80079c0 <WIZCHIP_READ>
 8008534:	4603      	mov	r3, r0
 8008536:	f003 030f 	and.w	r3, r3, #15
 800853a:	2b01      	cmp	r3, #1
 800853c:	d002      	beq.n	8008544 <disconnect+0x34>
 800853e:	f06f 0304 	mvn.w	r3, #4
 8008542:	e053      	b.n	80085ec <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8008544:	79fb      	ldrb	r3, [r7, #7]
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	3301      	adds	r3, #1
 800854a:	00db      	lsls	r3, r3, #3
 800854c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008550:	2108      	movs	r1, #8
 8008552:	4618      	mov	r0, r3
 8008554:	f7ff fa80 	bl	8007a58 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8008558:	bf00      	nop
 800855a:	79fb      	ldrb	r3, [r7, #7]
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	3301      	adds	r3, #1
 8008560:	00db      	lsls	r3, r3, #3
 8008562:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008566:	4618      	mov	r0, r3
 8008568:	f7ff fa2a 	bl	80079c0 <WIZCHIP_READ>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1f3      	bne.n	800855a <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8008572:	79fb      	ldrb	r3, [r7, #7]
 8008574:	2201      	movs	r2, #1
 8008576:	fa02 f303 	lsl.w	r3, r2, r3
 800857a:	b21b      	sxth	r3, r3
 800857c:	43db      	mvns	r3, r3
 800857e:	b21a      	sxth	r2, r3
 8008580:	4b1c      	ldr	r3, [pc, #112]	; (80085f4 <disconnect+0xe4>)
 8008582:	881b      	ldrh	r3, [r3, #0]
 8008584:	b21b      	sxth	r3, r3
 8008586:	4013      	ands	r3, r2
 8008588:	b21b      	sxth	r3, r3
 800858a:	b29a      	uxth	r2, r3
 800858c:	4b19      	ldr	r3, [pc, #100]	; (80085f4 <disconnect+0xe4>)
 800858e:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8008590:	4b19      	ldr	r3, [pc, #100]	; (80085f8 <disconnect+0xe8>)
 8008592:	881b      	ldrh	r3, [r3, #0]
 8008594:	461a      	mov	r2, r3
 8008596:	79fb      	ldrb	r3, [r7, #7]
 8008598:	fa42 f303 	asr.w	r3, r2, r3
 800859c:	f003 0301 	and.w	r3, r3, #1
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d016      	beq.n	80085d2 <disconnect+0xc2>
 80085a4:	2300      	movs	r3, #0
 80085a6:	e021      	b.n	80085ec <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{	//TODO add task yeld
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80085a8:	79fb      	ldrb	r3, [r7, #7]
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	3301      	adds	r3, #1
 80085ae:	00db      	lsls	r3, r3, #3
 80085b0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7ff fa03 	bl	80079c0 <WIZCHIP_READ>
 80085ba:	4603      	mov	r3, r0
 80085bc:	f003 0308 	and.w	r3, r3, #8
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d006      	beq.n	80085d2 <disconnect+0xc2>
	   {
	      close(sn);
 80085c4:	79fb      	ldrb	r3, [r7, #7]
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7ff fdfe 	bl	80081c8 <close>
	      return SOCKERR_TIMEOUT;
 80085cc:	f06f 030c 	mvn.w	r3, #12
 80085d0:	e00c      	b.n	80085ec <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80085d2:	79fb      	ldrb	r3, [r7, #7]
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	3301      	adds	r3, #1
 80085d8:	00db      	lsls	r3, r3, #3
 80085da:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80085de:	4618      	mov	r0, r3
 80085e0:	f7ff f9ee 	bl	80079c0 <WIZCHIP_READ>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1de      	bne.n	80085a8 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80085ea:	2301      	movs	r3, #1
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	20000926 	.word	0x20000926
 80085f8:	20000924 	.word	0x20000924

080085fc <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	4603      	mov	r3, r0
 8008604:	6039      	str	r1, [r7, #0]
 8008606:	71fb      	strb	r3, [r7, #7]
 8008608:	4613      	mov	r3, r2
 800860a:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 800860c:	2300      	movs	r3, #0
 800860e:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8008610:	2300      	movs	r3, #0
 8008612:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8008614:	79fb      	ldrb	r3, [r7, #7]
 8008616:	2b08      	cmp	r3, #8
 8008618:	d902      	bls.n	8008620 <send+0x24>
 800861a:	f04f 33ff 	mov.w	r3, #4294967295
 800861e:	e0de      	b.n	80087de <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8008620:	79fb      	ldrb	r3, [r7, #7]
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	3301      	adds	r3, #1
 8008626:	00db      	lsls	r3, r3, #3
 8008628:	4618      	mov	r0, r3
 800862a:	f7ff f9c9 	bl	80079c0 <WIZCHIP_READ>
 800862e:	4603      	mov	r3, r0
 8008630:	f003 030f 	and.w	r3, r3, #15
 8008634:	2b01      	cmp	r3, #1
 8008636:	d002      	beq.n	800863e <send+0x42>
 8008638:	f06f 0304 	mvn.w	r3, #4
 800863c:	e0cf      	b.n	80087de <send+0x1e2>
   CHECK_SOCKDATA();
 800863e:	88bb      	ldrh	r3, [r7, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d102      	bne.n	800864a <send+0x4e>
 8008644:	f06f 030d 	mvn.w	r3, #13
 8008648:	e0c9      	b.n	80087de <send+0x1e2>
   tmp = getSn_SR(sn);
 800864a:	79fb      	ldrb	r3, [r7, #7]
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	3301      	adds	r3, #1
 8008650:	00db      	lsls	r3, r3, #3
 8008652:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008656:	4618      	mov	r0, r3
 8008658:	f7ff f9b2 	bl	80079c0 <WIZCHIP_READ>
 800865c:	4603      	mov	r3, r0
 800865e:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8008660:	7bfb      	ldrb	r3, [r7, #15]
 8008662:	2b17      	cmp	r3, #23
 8008664:	d005      	beq.n	8008672 <send+0x76>
 8008666:	7bfb      	ldrb	r3, [r7, #15]
 8008668:	2b1c      	cmp	r3, #28
 800866a:	d002      	beq.n	8008672 <send+0x76>
 800866c:	f06f 0306 	mvn.w	r3, #6
 8008670:	e0b5      	b.n	80087de <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8008672:	4b5d      	ldr	r3, [pc, #372]	; (80087e8 <send+0x1ec>)
 8008674:	881b      	ldrh	r3, [r3, #0]
 8008676:	461a      	mov	r2, r3
 8008678:	79fb      	ldrb	r3, [r7, #7]
 800867a:	fa42 f303 	asr.w	r3, r2, r3
 800867e:	f003 0301 	and.w	r3, r3, #1
 8008682:	2b00      	cmp	r3, #0
 8008684:	d039      	beq.n	80086fa <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8008686:	79fb      	ldrb	r3, [r7, #7]
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	3301      	adds	r3, #1
 800868c:	00db      	lsls	r3, r3, #3
 800868e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008692:	4618      	mov	r0, r3
 8008694:	f7ff f994 	bl	80079c0 <WIZCHIP_READ>
 8008698:	4603      	mov	r3, r0
 800869a:	f003 031f 	and.w	r3, r3, #31
 800869e:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80086a0:	7bfb      	ldrb	r3, [r7, #15]
 80086a2:	f003 0310 	and.w	r3, r3, #16
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d019      	beq.n	80086de <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80086aa:	79fb      	ldrb	r3, [r7, #7]
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	3301      	adds	r3, #1
 80086b0:	00db      	lsls	r3, r3, #3
 80086b2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80086b6:	2110      	movs	r1, #16
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7ff f9cd 	bl	8007a58 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80086be:	79fb      	ldrb	r3, [r7, #7]
 80086c0:	2201      	movs	r2, #1
 80086c2:	fa02 f303 	lsl.w	r3, r2, r3
 80086c6:	b21b      	sxth	r3, r3
 80086c8:	43db      	mvns	r3, r3
 80086ca:	b21a      	sxth	r2, r3
 80086cc:	4b46      	ldr	r3, [pc, #280]	; (80087e8 <send+0x1ec>)
 80086ce:	881b      	ldrh	r3, [r3, #0]
 80086d0:	b21b      	sxth	r3, r3
 80086d2:	4013      	ands	r3, r2
 80086d4:	b21b      	sxth	r3, r3
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	4b43      	ldr	r3, [pc, #268]	; (80087e8 <send+0x1ec>)
 80086da:	801a      	strh	r2, [r3, #0]
 80086dc:	e00d      	b.n	80086fa <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80086de:	7bfb      	ldrb	r3, [r7, #15]
 80086e0:	f003 0308 	and.w	r3, r3, #8
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d006      	beq.n	80086f6 <send+0xfa>
      {
         close(sn);
 80086e8:	79fb      	ldrb	r3, [r7, #7]
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7ff fd6c 	bl	80081c8 <close>
         return SOCKERR_TIMEOUT;
 80086f0:	f06f 030c 	mvn.w	r3, #12
 80086f4:	e073      	b.n	80087de <send+0x1e2>
      }
      else return SOCK_BUSY;
 80086f6:	2300      	movs	r3, #0
 80086f8:	e071      	b.n	80087de <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 80086fa:	79fb      	ldrb	r3, [r7, #7]
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	3301      	adds	r3, #1
 8008700:	00db      	lsls	r3, r3, #3
 8008702:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8008706:	4618      	mov	r0, r3
 8008708:	f7ff f95a 	bl	80079c0 <WIZCHIP_READ>
 800870c:	4603      	mov	r3, r0
 800870e:	b29b      	uxth	r3, r3
 8008710:	029b      	lsls	r3, r3, #10
 8008712:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8008714:	88ba      	ldrh	r2, [r7, #4]
 8008716:	89bb      	ldrh	r3, [r7, #12]
 8008718:	429a      	cmp	r2, r3
 800871a:	d901      	bls.n	8008720 <send+0x124>
 800871c:	89bb      	ldrh	r3, [r7, #12]
 800871e:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8008720:	79fb      	ldrb	r3, [r7, #7]
 8008722:	4618      	mov	r0, r3
 8008724:	f7ff faa6 	bl	8007c74 <getSn_TX_FSR>
 8008728:	4603      	mov	r3, r0
 800872a:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 800872c:	79fb      	ldrb	r3, [r7, #7]
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	3301      	adds	r3, #1
 8008732:	00db      	lsls	r3, r3, #3
 8008734:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008738:	4618      	mov	r0, r3
 800873a:	f7ff f941 	bl	80079c0 <WIZCHIP_READ>
 800873e:	4603      	mov	r3, r0
 8008740:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8008742:	7bfb      	ldrb	r3, [r7, #15]
 8008744:	2b17      	cmp	r3, #23
 8008746:	d009      	beq.n	800875c <send+0x160>
 8008748:	7bfb      	ldrb	r3, [r7, #15]
 800874a:	2b1c      	cmp	r3, #28
 800874c:	d006      	beq.n	800875c <send+0x160>
      {
         close(sn);
 800874e:	79fb      	ldrb	r3, [r7, #7]
 8008750:	4618      	mov	r0, r3
 8008752:	f7ff fd39 	bl	80081c8 <close>
         return SOCKERR_SOCKSTATUS;
 8008756:	f06f 0306 	mvn.w	r3, #6
 800875a:	e040      	b.n	80087de <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800875c:	4b23      	ldr	r3, [pc, #140]	; (80087ec <send+0x1f0>)
 800875e:	881b      	ldrh	r3, [r3, #0]
 8008760:	461a      	mov	r2, r3
 8008762:	79fb      	ldrb	r3, [r7, #7]
 8008764:	fa42 f303 	asr.w	r3, r2, r3
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	2b00      	cmp	r3, #0
 800876e:	d005      	beq.n	800877c <send+0x180>
 8008770:	88ba      	ldrh	r2, [r7, #4]
 8008772:	89bb      	ldrh	r3, [r7, #12]
 8008774:	429a      	cmp	r2, r3
 8008776:	d901      	bls.n	800877c <send+0x180>
 8008778:	2300      	movs	r3, #0
 800877a:	e030      	b.n	80087de <send+0x1e2>
      if(len <= freesize) break;
 800877c:	88ba      	ldrh	r2, [r7, #4]
 800877e:	89bb      	ldrh	r3, [r7, #12]
 8008780:	429a      	cmp	r2, r3
 8008782:	d900      	bls.n	8008786 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8008784:	e7cc      	b.n	8008720 <send+0x124>
      if(len <= freesize) break;
 8008786:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8008788:	88ba      	ldrh	r2, [r7, #4]
 800878a:	79fb      	ldrb	r3, [r7, #7]
 800878c:	6839      	ldr	r1, [r7, #0]
 800878e:	4618      	mov	r0, r3
 8008790:	f7ff fb06 	bl	8007da0 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8008794:	79fb      	ldrb	r3, [r7, #7]
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	3301      	adds	r3, #1
 800879a:	00db      	lsls	r3, r3, #3
 800879c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80087a0:	2120      	movs	r1, #32
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7ff f958 	bl	8007a58 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80087a8:	bf00      	nop
 80087aa:	79fb      	ldrb	r3, [r7, #7]
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	3301      	adds	r3, #1
 80087b0:	00db      	lsls	r3, r3, #3
 80087b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7ff f902 	bl	80079c0 <WIZCHIP_READ>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1f3      	bne.n	80087aa <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80087c2:	79fb      	ldrb	r3, [r7, #7]
 80087c4:	2201      	movs	r2, #1
 80087c6:	fa02 f303 	lsl.w	r3, r2, r3
 80087ca:	b21a      	sxth	r2, r3
 80087cc:	4b06      	ldr	r3, [pc, #24]	; (80087e8 <send+0x1ec>)
 80087ce:	881b      	ldrh	r3, [r3, #0]
 80087d0:	b21b      	sxth	r3, r3
 80087d2:	4313      	orrs	r3, r2
 80087d4:	b21b      	sxth	r3, r3
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	4b03      	ldr	r3, [pc, #12]	; (80087e8 <send+0x1ec>)
 80087da:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80087dc:	88bb      	ldrh	r3, [r7, #4]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	20000926 	.word	0x20000926
 80087ec:	20000924 	.word	0x20000924

080087f0 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80087f0:	b590      	push	{r4, r7, lr}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	4603      	mov	r3, r0
 80087f8:	6039      	str	r1, [r7, #0]
 80087fa:	71fb      	strb	r3, [r7, #7]
 80087fc:	4613      	mov	r3, r2
 80087fe:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8008800:	2300      	movs	r3, #0
 8008802:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8008804:	2300      	movs	r3, #0
 8008806:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8008808:	79fb      	ldrb	r3, [r7, #7]
 800880a:	2b08      	cmp	r3, #8
 800880c:	d902      	bls.n	8008814 <recv+0x24>
 800880e:	f04f 33ff 	mov.w	r3, #4294967295
 8008812:	e09c      	b.n	800894e <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8008814:	79fb      	ldrb	r3, [r7, #7]
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	3301      	adds	r3, #1
 800881a:	00db      	lsls	r3, r3, #3
 800881c:	4618      	mov	r0, r3
 800881e:	f7ff f8cf 	bl	80079c0 <WIZCHIP_READ>
 8008822:	4603      	mov	r3, r0
 8008824:	f003 030f 	and.w	r3, r3, #15
 8008828:	2b01      	cmp	r3, #1
 800882a:	d002      	beq.n	8008832 <recv+0x42>
 800882c:	f06f 0304 	mvn.w	r3, #4
 8008830:	e08d      	b.n	800894e <recv+0x15e>
   CHECK_SOCKDATA();
 8008832:	88bb      	ldrh	r3, [r7, #4]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d102      	bne.n	800883e <recv+0x4e>
 8008838:	f06f 030d 	mvn.w	r3, #13
 800883c:	e087      	b.n	800894e <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 800883e:	79fb      	ldrb	r3, [r7, #7]
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	3301      	adds	r3, #1
 8008844:	00db      	lsls	r3, r3, #3
 8008846:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800884a:	4618      	mov	r0, r3
 800884c:	f7ff f8b8 	bl	80079c0 <WIZCHIP_READ>
 8008850:	4603      	mov	r3, r0
 8008852:	b29b      	uxth	r3, r3
 8008854:	029b      	lsls	r3, r3, #10
 8008856:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8008858:	89ba      	ldrh	r2, [r7, #12]
 800885a:	88bb      	ldrh	r3, [r7, #4]
 800885c:	429a      	cmp	r2, r3
 800885e:	d201      	bcs.n	8008864 <recv+0x74>
 8008860:	89bb      	ldrh	r3, [r7, #12]
 8008862:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8008864:	79fb      	ldrb	r3, [r7, #7]
 8008866:	4618      	mov	r0, r3
 8008868:	f7ff fa4f 	bl	8007d0a <getSn_RX_RSR>
 800886c:	4603      	mov	r3, r0
 800886e:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8008870:	79fb      	ldrb	r3, [r7, #7]
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	3301      	adds	r3, #1
 8008876:	00db      	lsls	r3, r3, #3
 8008878:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800887c:	4618      	mov	r0, r3
 800887e:	f7ff f89f 	bl	80079c0 <WIZCHIP_READ>
 8008882:	4603      	mov	r3, r0
 8008884:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8008886:	7bfb      	ldrb	r3, [r7, #15]
 8008888:	2b17      	cmp	r3, #23
 800888a:	d026      	beq.n	80088da <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 800888c:	7bfb      	ldrb	r3, [r7, #15]
 800888e:	2b1c      	cmp	r3, #28
 8008890:	d11c      	bne.n	80088cc <recv+0xdc>
            {
               if(recvsize != 0) break;
 8008892:	89bb      	ldrh	r3, [r7, #12]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d133      	bne.n	8008900 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8008898:	79fb      	ldrb	r3, [r7, #7]
 800889a:	4618      	mov	r0, r3
 800889c:	f7ff f9ea 	bl	8007c74 <getSn_TX_FSR>
 80088a0:	4603      	mov	r3, r0
 80088a2:	461c      	mov	r4, r3
 80088a4:	79fb      	ldrb	r3, [r7, #7]
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	3301      	adds	r3, #1
 80088aa:	00db      	lsls	r3, r3, #3
 80088ac:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7ff f885 	bl	80079c0 <WIZCHIP_READ>
 80088b6:	4603      	mov	r3, r0
 80088b8:	029b      	lsls	r3, r3, #10
 80088ba:	429c      	cmp	r4, r3
 80088bc:	d10d      	bne.n	80088da <recv+0xea>
               {
                  close(sn);
 80088be:	79fb      	ldrb	r3, [r7, #7]
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7ff fc81 	bl	80081c8 <close>
                  return SOCKERR_SOCKSTATUS;
 80088c6:	f06f 0306 	mvn.w	r3, #6
 80088ca:	e040      	b.n	800894e <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 80088cc:	79fb      	ldrb	r3, [r7, #7]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7ff fc7a 	bl	80081c8 <close>
               return SOCKERR_SOCKSTATUS;
 80088d4:	f06f 0306 	mvn.w	r3, #6
 80088d8:	e039      	b.n	800894e <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80088da:	4b1f      	ldr	r3, [pc, #124]	; (8008958 <recv+0x168>)
 80088dc:	881b      	ldrh	r3, [r3, #0]
 80088de:	461a      	mov	r2, r3
 80088e0:	79fb      	ldrb	r3, [r7, #7]
 80088e2:	fa42 f303 	asr.w	r3, r2, r3
 80088e6:	f003 0301 	and.w	r3, r3, #1
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d004      	beq.n	80088f8 <recv+0x108>
 80088ee:	89bb      	ldrh	r3, [r7, #12]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d101      	bne.n	80088f8 <recv+0x108>
 80088f4:	2300      	movs	r3, #0
 80088f6:	e02a      	b.n	800894e <recv+0x15e>
         if(recvsize != 0) break;
 80088f8:	89bb      	ldrh	r3, [r7, #12]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d102      	bne.n	8008904 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 80088fe:	e7b1      	b.n	8008864 <recv+0x74>
               if(recvsize != 0) break;
 8008900:	bf00      	nop
 8008902:	e000      	b.n	8008906 <recv+0x116>
         if(recvsize != 0) break;
 8008904:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8008906:	89ba      	ldrh	r2, [r7, #12]
 8008908:	88bb      	ldrh	r3, [r7, #4]
 800890a:	429a      	cmp	r2, r3
 800890c:	d201      	bcs.n	8008912 <recv+0x122>
 800890e:	89bb      	ldrh	r3, [r7, #12]
 8008910:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8008912:	88ba      	ldrh	r2, [r7, #4]
 8008914:	79fb      	ldrb	r3, [r7, #7]
 8008916:	6839      	ldr	r1, [r7, #0]
 8008918:	4618      	mov	r0, r3
 800891a:	f7ff fa9d 	bl	8007e58 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800891e:	79fb      	ldrb	r3, [r7, #7]
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	3301      	adds	r3, #1
 8008924:	00db      	lsls	r3, r3, #3
 8008926:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800892a:	2140      	movs	r1, #64	; 0x40
 800892c:	4618      	mov	r0, r3
 800892e:	f7ff f893 	bl	8007a58 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8008932:	bf00      	nop
 8008934:	79fb      	ldrb	r3, [r7, #7]
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	3301      	adds	r3, #1
 800893a:	00db      	lsls	r3, r3, #3
 800893c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008940:	4618      	mov	r0, r3
 8008942:	f7ff f83d 	bl	80079c0 <WIZCHIP_READ>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1f3      	bne.n	8008934 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800894c:	88bb      	ldrh	r3, [r7, #4]
}
 800894e:	4618      	mov	r0, r3
 8008950:	3714      	adds	r7, #20
 8008952:	46bd      	mov	sp, r7
 8008954:	bd90      	pop	{r4, r7, pc}
 8008956:	bf00      	nop
 8008958:	20000924 	.word	0x20000924

0800895c <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af00      	add	r7, sp, #0
 8008962:	60b9      	str	r1, [r7, #8]
 8008964:	607b      	str	r3, [r7, #4]
 8008966:	4603      	mov	r3, r0
 8008968:	73fb      	strb	r3, [r7, #15]
 800896a:	4613      	mov	r3, r2
 800896c:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 800896e:	2300      	movs	r3, #0
 8008970:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8008972:	2300      	movs	r3, #0
 8008974:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8008976:	7bfb      	ldrb	r3, [r7, #15]
 8008978:	2b08      	cmp	r3, #8
 800897a:	d902      	bls.n	8008982 <sendto+0x26>
 800897c:	f04f 33ff 	mov.w	r3, #4294967295
 8008980:	e11b      	b.n	8008bba <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 8008982:	7bfb      	ldrb	r3, [r7, #15]
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	3301      	adds	r3, #1
 8008988:	00db      	lsls	r3, r3, #3
 800898a:	4618      	mov	r0, r3
 800898c:	f7ff f818 	bl	80079c0 <WIZCHIP_READ>
 8008990:	4603      	mov	r3, r0
 8008992:	f003 030f 	and.w	r3, r3, #15
 8008996:	3b02      	subs	r3, #2
 8008998:	2b02      	cmp	r3, #2
 800899a:	d902      	bls.n	80089a2 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 800899c:	f06f 0304 	mvn.w	r3, #4
 80089a0:	e10b      	b.n	8008bba <sendto+0x25e>
         break;
 80089a2:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80089a4:	89bb      	ldrh	r3, [r7, #12]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d102      	bne.n	80089b0 <sendto+0x54>
 80089aa:	f06f 030d 	mvn.w	r3, #13
 80089ae:	e104      	b.n	8008bba <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	021b      	lsls	r3, r3, #8
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	3201      	adds	r2, #1
 80089be:	7812      	ldrb	r2, [r2, #0]
 80089c0:	4413      	add	r3, r2
 80089c2:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	021b      	lsls	r3, r3, #8
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	3202      	adds	r2, #2
 80089cc:	7812      	ldrb	r2, [r2, #0]
 80089ce:	4413      	add	r3, r2
 80089d0:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	021b      	lsls	r3, r3, #8
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	3203      	adds	r2, #3
 80089da:	7812      	ldrb	r2, [r2, #0]
 80089dc:	4413      	add	r3, r2
 80089de:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10e      	bne.n	8008a04 <sendto+0xa8>
 80089e6:	7bfb      	ldrb	r3, [r7, #15]
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	3301      	adds	r3, #1
 80089ec:	00db      	lsls	r3, r3, #3
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fe ffe6 	bl	80079c0 <WIZCHIP_READ>
 80089f4:	4603      	mov	r3, r0
 80089f6:	f003 0304 	and.w	r3, r3, #4
 80089fa:	2b04      	cmp	r3, #4
 80089fc:	d002      	beq.n	8008a04 <sendto+0xa8>
 80089fe:	f06f 030b 	mvn.w	r3, #11
 8008a02:	e0da      	b.n	8008bba <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8008a04:	8c3b      	ldrh	r3, [r7, #32]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10e      	bne.n	8008a28 <sendto+0xcc>
 8008a0a:	7bfb      	ldrb	r3, [r7, #15]
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	3301      	adds	r3, #1
 8008a10:	00db      	lsls	r3, r3, #3
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7fe ffd4 	bl	80079c0 <WIZCHIP_READ>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	f003 0304 	and.w	r3, r3, #4
 8008a1e:	2b04      	cmp	r3, #4
 8008a20:	d002      	beq.n	8008a28 <sendto+0xcc>
 8008a22:	f06f 030a 	mvn.w	r3, #10
 8008a26:	e0c8      	b.n	8008bba <sendto+0x25e>
   tmp = getSn_SR(sn);
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	00db      	lsls	r3, r3, #3
 8008a30:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7fe ffc3 	bl	80079c0 <WIZCHIP_READ>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8008a3e:	7dfb      	ldrb	r3, [r7, #23]
 8008a40:	2b42      	cmp	r3, #66	; 0x42
 8008a42:	d008      	beq.n	8008a56 <sendto+0xfa>
 8008a44:	7dfb      	ldrb	r3, [r7, #23]
 8008a46:	2b22      	cmp	r3, #34	; 0x22
 8008a48:	d005      	beq.n	8008a56 <sendto+0xfa>
 8008a4a:	7dfb      	ldrb	r3, [r7, #23]
 8008a4c:	2b32      	cmp	r3, #50	; 0x32
 8008a4e:	d002      	beq.n	8008a56 <sendto+0xfa>
 8008a50:	f06f 0306 	mvn.w	r3, #6
 8008a54:	e0b1      	b.n	8008bba <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8008a56:	7bfb      	ldrb	r3, [r7, #15]
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	00db      	lsls	r3, r3, #3
 8008a5e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8008a62:	2204      	movs	r2, #4
 8008a64:	6879      	ldr	r1, [r7, #4]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7ff f8a4 	bl	8007bb4 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	3301      	adds	r3, #1
 8008a72:	00db      	lsls	r3, r3, #3
 8008a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a78:	461a      	mov	r2, r3
 8008a7a:	8c3b      	ldrh	r3, [r7, #32]
 8008a7c:	0a1b      	lsrs	r3, r3, #8
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	4619      	mov	r1, r3
 8008a84:	4610      	mov	r0, r2
 8008a86:	f7fe ffe7 	bl	8007a58 <WIZCHIP_WRITE>
 8008a8a:	7bfb      	ldrb	r3, [r7, #15]
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	3301      	adds	r3, #1
 8008a90:	00db      	lsls	r3, r3, #3
 8008a92:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8008a96:	461a      	mov	r2, r3
 8008a98:	8c3b      	ldrh	r3, [r7, #32]
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	4610      	mov	r0, r2
 8008aa0:	f7fe ffda 	bl	8007a58 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	00db      	lsls	r3, r3, #3
 8008aac:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7fe ff85 	bl	80079c0 <WIZCHIP_READ>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	029b      	lsls	r3, r3, #10
 8008abc:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8008abe:	89ba      	ldrh	r2, [r7, #12]
 8008ac0:	8abb      	ldrh	r3, [r7, #20]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d901      	bls.n	8008aca <sendto+0x16e>
 8008ac6:	8abb      	ldrh	r3, [r7, #20]
 8008ac8:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8008aca:	7bfb      	ldrb	r3, [r7, #15]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7ff f8d1 	bl	8007c74 <getSn_TX_FSR>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8008ad6:	7bfb      	ldrb	r3, [r7, #15]
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	3301      	adds	r3, #1
 8008adc:	00db      	lsls	r3, r3, #3
 8008ade:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7fe ff6c 	bl	80079c0 <WIZCHIP_READ>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d102      	bne.n	8008af4 <sendto+0x198>
 8008aee:	f06f 0303 	mvn.w	r3, #3
 8008af2:	e062      	b.n	8008bba <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8008af4:	4b33      	ldr	r3, [pc, #204]	; (8008bc4 <sendto+0x268>)
 8008af6:	881b      	ldrh	r3, [r3, #0]
 8008af8:	461a      	mov	r2, r3
 8008afa:	7bfb      	ldrb	r3, [r7, #15]
 8008afc:	fa42 f303 	asr.w	r3, r2, r3
 8008b00:	f003 0301 	and.w	r3, r3, #1
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d005      	beq.n	8008b14 <sendto+0x1b8>
 8008b08:	89ba      	ldrh	r2, [r7, #12]
 8008b0a:	8abb      	ldrh	r3, [r7, #20]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d901      	bls.n	8008b14 <sendto+0x1b8>
 8008b10:	2300      	movs	r3, #0
 8008b12:	e052      	b.n	8008bba <sendto+0x25e>
      if(len <= freesize) break;
 8008b14:	89ba      	ldrh	r2, [r7, #12]
 8008b16:	8abb      	ldrh	r3, [r7, #20]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d900      	bls.n	8008b1e <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 8008b1c:	e7d5      	b.n	8008aca <sendto+0x16e>
      if(len <= freesize) break;
 8008b1e:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8008b20:	89ba      	ldrh	r2, [r7, #12]
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
 8008b24:	68b9      	ldr	r1, [r7, #8]
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7ff f93a 	bl	8007da0 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8008b2c:	7bfb      	ldrb	r3, [r7, #15]
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	3301      	adds	r3, #1
 8008b32:	00db      	lsls	r3, r3, #3
 8008b34:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008b38:	2120      	movs	r1, #32
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fe ff8c 	bl	8007a58 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8008b40:	bf00      	nop
 8008b42:	7bfb      	ldrb	r3, [r7, #15]
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	3301      	adds	r3, #1
 8008b48:	00db      	lsls	r3, r3, #3
 8008b4a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7fe ff36 	bl	80079c0 <WIZCHIP_READ>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1f3      	bne.n	8008b42 <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8008b5a:	7bfb      	ldrb	r3, [r7, #15]
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	3301      	adds	r3, #1
 8008b60:	00db      	lsls	r3, r3, #3
 8008b62:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7fe ff2a 	bl	80079c0 <WIZCHIP_READ>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	f003 031f 	and.w	r3, r3, #31
 8008b72:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8008b74:	7dfb      	ldrb	r3, [r7, #23]
 8008b76:	f003 0310 	and.w	r3, r3, #16
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00c      	beq.n	8008b98 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8008b7e:	7bfb      	ldrb	r3, [r7, #15]
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	3301      	adds	r3, #1
 8008b84:	00db      	lsls	r3, r3, #3
 8008b86:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008b8a:	2110      	movs	r1, #16
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7fe ff63 	bl	8007a58 <WIZCHIP_WRITE>
         break;
 8008b92:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8008b94:	89bb      	ldrh	r3, [r7, #12]
 8008b96:	e010      	b.n	8008bba <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8008b98:	7dfb      	ldrb	r3, [r7, #23]
 8008b9a:	f003 0308 	and.w	r3, r3, #8
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d0db      	beq.n	8008b5a <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8008ba2:	7bfb      	ldrb	r3, [r7, #15]
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	00db      	lsls	r3, r3, #3
 8008baa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008bae:	2108      	movs	r1, #8
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7fe ff51 	bl	8007a58 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8008bb6:	f06f 030c 	mvn.w	r3, #12
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3718      	adds	r7, #24
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	20000924 	.word	0x20000924

08008bc8 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b088      	sub	sp, #32
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60b9      	str	r1, [r7, #8]
 8008bd0:	607b      	str	r3, [r7, #4]
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	73fb      	strb	r3, [r7, #15]
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8008bde:	7bfb      	ldrb	r3, [r7, #15]
 8008be0:	2b08      	cmp	r3, #8
 8008be2:	d902      	bls.n	8008bea <recvfrom+0x22>
 8008be4:	f04f 33ff 	mov.w	r3, #4294967295
 8008be8:	e1d4      	b.n	8008f94 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8008bea:	7bfb      	ldrb	r3, [r7, #15]
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	3301      	adds	r3, #1
 8008bf0:	00db      	lsls	r3, r3, #3
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7fe fee4 	bl	80079c0 <WIZCHIP_READ>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	777b      	strb	r3, [r7, #29]
 8008bfc:	7f7b      	ldrb	r3, [r7, #29]
 8008bfe:	f003 030f 	and.w	r3, r3, #15
 8008c02:	3b02      	subs	r3, #2
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d902      	bls.n	8008c0e <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8008c08:	f06f 0304 	mvn.w	r3, #4
 8008c0c:	e1c2      	b.n	8008f94 <recvfrom+0x3cc>
         break;
 8008c0e:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8008c10:	89bb      	ldrh	r3, [r7, #12]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d102      	bne.n	8008c1c <recvfrom+0x54>
 8008c16:	f06f 030d 	mvn.w	r3, #13
 8008c1a:	e1bb      	b.n	8008f94 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 8008c1c:	7bfb      	ldrb	r3, [r7, #15]
 8008c1e:	4a88      	ldr	r2, [pc, #544]	; (8008e40 <recvfrom+0x278>)
 8008c20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d128      	bne.n	8008c7a <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7ff f86d 	bl	8007d0a <getSn_RX_RSR>
 8008c30:	4603      	mov	r3, r0
 8008c32:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	3301      	adds	r3, #1
 8008c3a:	00db      	lsls	r3, r3, #3
 8008c3c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7fe febd 	bl	80079c0 <WIZCHIP_READ>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d102      	bne.n	8008c52 <recvfrom+0x8a>
 8008c4c:	f06f 0303 	mvn.w	r3, #3
 8008c50:	e1a0      	b.n	8008f94 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8008c52:	4b7c      	ldr	r3, [pc, #496]	; (8008e44 <recvfrom+0x27c>)
 8008c54:	881b      	ldrh	r3, [r3, #0]
 8008c56:	461a      	mov	r2, r3
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
 8008c5a:	fa42 f303 	asr.w	r3, r2, r3
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d004      	beq.n	8008c70 <recvfrom+0xa8>
 8008c66:	8bfb      	ldrh	r3, [r7, #30]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d101      	bne.n	8008c70 <recvfrom+0xa8>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	e191      	b.n	8008f94 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 8008c70:	8bfb      	ldrh	r3, [r7, #30]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d100      	bne.n	8008c78 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8008c76:	e7d7      	b.n	8008c28 <recvfrom+0x60>
         if(pack_len != 0) break;
 8008c78:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8008c7a:	7f7b      	ldrb	r3, [r7, #29]
 8008c7c:	f003 0307 	and.w	r3, r3, #7
 8008c80:	2b04      	cmp	r3, #4
 8008c82:	d079      	beq.n	8008d78 <recvfrom+0x1b0>
 8008c84:	2b04      	cmp	r3, #4
 8008c86:	f300 8142 	bgt.w	8008f0e <recvfrom+0x346>
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d003      	beq.n	8008c96 <recvfrom+0xce>
 8008c8e:	2b03      	cmp	r3, #3
 8008c90:	f000 80dc 	beq.w	8008e4c <recvfrom+0x284>
 8008c94:	e13b      	b.n	8008f0e <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8008c96:	7bfb      	ldrb	r3, [r7, #15]
 8008c98:	4a69      	ldr	r2, [pc, #420]	; (8008e40 <recvfrom+0x278>)
 8008c9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d152      	bne.n	8008d48 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 8008ca2:	f107 0114 	add.w	r1, r7, #20
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
 8008ca8:	2208      	movs	r2, #8
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7ff f8d4 	bl	8007e58 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8008cb0:	7bfb      	ldrb	r3, [r7, #15]
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	00db      	lsls	r3, r3, #3
 8008cb8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008cbc:	2140      	movs	r1, #64	; 0x40
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7fe feca 	bl	8007a58 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8008cc4:	bf00      	nop
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	3301      	adds	r3, #1
 8008ccc:	00db      	lsls	r3, r3, #3
 8008cce:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fe fe74 	bl	80079c0 <WIZCHIP_READ>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1f3      	bne.n	8008cc6 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8008cde:	7d3a      	ldrb	r2, [r7, #20]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	7d7a      	ldrb	r2, [r7, #21]
 8008cea:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	3302      	adds	r3, #2
 8008cf0:	7dba      	ldrb	r2, [r7, #22]
 8008cf2:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	3303      	adds	r3, #3
 8008cf8:	7dfa      	ldrb	r2, [r7, #23]
 8008cfa:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8008cfc:	7e3b      	ldrb	r3, [r7, #24]
 8008cfe:	b29a      	uxth	r2, r3
 8008d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d02:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8008d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d06:	881b      	ldrh	r3, [r3, #0]
 8008d08:	021b      	lsls	r3, r3, #8
 8008d0a:	b29a      	uxth	r2, r3
 8008d0c:	7e7b      	ldrb	r3, [r7, #25]
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	4413      	add	r3, r2
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d16:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8008d18:	7eba      	ldrb	r2, [r7, #26]
 8008d1a:	7bfb      	ldrb	r3, [r7, #15]
 8008d1c:	b291      	uxth	r1, r2
 8008d1e:	4a48      	ldr	r2, [pc, #288]	; (8008e40 <recvfrom+0x278>)
 8008d20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8008d24:	7bfb      	ldrb	r3, [r7, #15]
 8008d26:	4a46      	ldr	r2, [pc, #280]	; (8008e40 <recvfrom+0x278>)
 8008d28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d2c:	021b      	lsls	r3, r3, #8
 8008d2e:	b299      	uxth	r1, r3
 8008d30:	7efb      	ldrb	r3, [r7, #27]
 8008d32:	b29a      	uxth	r2, r3
 8008d34:	7bfb      	ldrb	r3, [r7, #15]
 8008d36:	440a      	add	r2, r1
 8008d38:	b291      	uxth	r1, r2
 8008d3a:	4a41      	ldr	r2, [pc, #260]	; (8008e40 <recvfrom+0x278>)
 8008d3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
 8008d42:	4a41      	ldr	r2, [pc, #260]	; (8008e48 <recvfrom+0x280>)
 8008d44:	2180      	movs	r1, #128	; 0x80
 8008d46:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8008d48:	7bfb      	ldrb	r3, [r7, #15]
 8008d4a:	4a3d      	ldr	r2, [pc, #244]	; (8008e40 <recvfrom+0x278>)
 8008d4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d50:	89ba      	ldrh	r2, [r7, #12]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d202      	bcs.n	8008d5c <recvfrom+0x194>
 8008d56:	89bb      	ldrh	r3, [r7, #12]
 8008d58:	83fb      	strh	r3, [r7, #30]
 8008d5a:	e004      	b.n	8008d66 <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 8008d5c:	7bfb      	ldrb	r3, [r7, #15]
 8008d5e:	4a38      	ldr	r2, [pc, #224]	; (8008e40 <recvfrom+0x278>)
 8008d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d64:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8008d66:	8bfb      	ldrh	r3, [r7, #30]
 8008d68:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8008d6a:	8bfa      	ldrh	r2, [r7, #30]
 8008d6c:	7bfb      	ldrb	r3, [r7, #15]
 8008d6e:	68b9      	ldr	r1, [r7, #8]
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7ff f871 	bl	8007e58 <wiz_recv_data>
			break;
 8008d76:	e0d6      	b.n	8008f26 <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
 8008d7a:	4a31      	ldr	r2, [pc, #196]	; (8008e40 <recvfrom+0x278>)
 8008d7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d146      	bne.n	8008e12 <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8008d84:	f107 0114 	add.w	r1, r7, #20
 8008d88:	7bfb      	ldrb	r3, [r7, #15]
 8008d8a:	2202      	movs	r2, #2
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7ff f863 	bl	8007e58 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	3301      	adds	r3, #1
 8008d98:	00db      	lsls	r3, r3, #3
 8008d9a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008d9e:	2140      	movs	r1, #64	; 0x40
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7fe fe59 	bl	8007a58 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8008da6:	bf00      	nop
 8008da8:	7bfb      	ldrb	r3, [r7, #15]
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	3301      	adds	r3, #1
 8008dae:	00db      	lsls	r3, r3, #3
 8008db0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7fe fe03 	bl	80079c0 <WIZCHIP_READ>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1f3      	bne.n	8008da8 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8008dc0:	7d3a      	ldrb	r2, [r7, #20]
 8008dc2:	7bfb      	ldrb	r3, [r7, #15]
 8008dc4:	b291      	uxth	r1, r2
 8008dc6:	4a1e      	ldr	r2, [pc, #120]	; (8008e40 <recvfrom+0x278>)
 8008dc8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8008dcc:	7bfb      	ldrb	r3, [r7, #15]
 8008dce:	4a1c      	ldr	r2, [pc, #112]	; (8008e40 <recvfrom+0x278>)
 8008dd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dd4:	021b      	lsls	r3, r3, #8
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	7d7b      	ldrb	r3, [r7, #21]
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	4413      	add	r3, r2
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	7bfb      	ldrb	r3, [r7, #15]
 8008de2:	3a02      	subs	r2, #2
 8008de4:	b291      	uxth	r1, r2
 8008de6:	4a16      	ldr	r2, [pc, #88]	; (8008e40 <recvfrom+0x278>)
 8008de8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
 8008dee:	4a14      	ldr	r2, [pc, #80]	; (8008e40 <recvfrom+0x278>)
 8008df0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008df4:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d906      	bls.n	8008e0a <recvfrom+0x242>
   			{
   			   close(sn);
 8008dfc:	7bfb      	ldrb	r3, [r7, #15]
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7ff f9e2 	bl	80081c8 <close>
   			   return SOCKFATAL_PACKLEN;
 8008e04:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8008e08:	e0c4      	b.n	8008f94 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8008e0a:	7bfb      	ldrb	r3, [r7, #15]
 8008e0c:	4a0e      	ldr	r2, [pc, #56]	; (8008e48 <recvfrom+0x280>)
 8008e0e:	2180      	movs	r1, #128	; 0x80
 8008e10:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
 8008e14:	4a0a      	ldr	r2, [pc, #40]	; (8008e40 <recvfrom+0x278>)
 8008e16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e1a:	89ba      	ldrh	r2, [r7, #12]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d202      	bcs.n	8008e26 <recvfrom+0x25e>
 8008e20:	89bb      	ldrh	r3, [r7, #12]
 8008e22:	83fb      	strh	r3, [r7, #30]
 8008e24:	e004      	b.n	8008e30 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
 8008e28:	4a05      	ldr	r2, [pc, #20]	; (8008e40 <recvfrom+0x278>)
 8008e2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e2e:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8008e30:	8bfa      	ldrh	r2, [r7, #30]
 8008e32:	7bfb      	ldrb	r3, [r7, #15]
 8008e34:	68b9      	ldr	r1, [r7, #8]
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7ff f80e 	bl	8007e58 <wiz_recv_data>
		   break;
 8008e3c:	e073      	b.n	8008f26 <recvfrom+0x35e>
 8008e3e:	bf00      	nop
 8008e40:	20000928 	.word	0x20000928
 8008e44:	20000924 	.word	0x20000924
 8008e48:	20000938 	.word	0x20000938
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8008e4c:	7bfb      	ldrb	r3, [r7, #15]
 8008e4e:	4a53      	ldr	r2, [pc, #332]	; (8008f9c <recvfrom+0x3d4>)
 8008e50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d144      	bne.n	8008ee2 <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8008e58:	f107 0114 	add.w	r1, r7, #20
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
 8008e5e:	2206      	movs	r2, #6
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7fe fff9 	bl	8007e58 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	00db      	lsls	r3, r3, #3
 8008e6e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008e72:	2140      	movs	r1, #64	; 0x40
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7fe fdef 	bl	8007a58 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8008e7a:	bf00      	nop
 8008e7c:	7bfb      	ldrb	r3, [r7, #15]
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	3301      	adds	r3, #1
 8008e82:	00db      	lsls	r3, r3, #3
 8008e84:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7fe fd99 	bl	80079c0 <WIZCHIP_READ>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1f3      	bne.n	8008e7c <recvfrom+0x2b4>
   			addr[0] = head[0];
 8008e94:	7d3a      	ldrb	r2, [r7, #20]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	7d7a      	ldrb	r2, [r7, #21]
 8008ea0:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	3302      	adds	r3, #2
 8008ea6:	7dba      	ldrb	r2, [r7, #22]
 8008ea8:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	3303      	adds	r3, #3
 8008eae:	7dfa      	ldrb	r2, [r7, #23]
 8008eb0:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8008eb2:	7e3a      	ldrb	r2, [r7, #24]
 8008eb4:	7bfb      	ldrb	r3, [r7, #15]
 8008eb6:	b291      	uxth	r1, r2
 8008eb8:	4a38      	ldr	r2, [pc, #224]	; (8008f9c <recvfrom+0x3d4>)
 8008eba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8008ebe:	7bfb      	ldrb	r3, [r7, #15]
 8008ec0:	4a36      	ldr	r2, [pc, #216]	; (8008f9c <recvfrom+0x3d4>)
 8008ec2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ec6:	021b      	lsls	r3, r3, #8
 8008ec8:	b299      	uxth	r1, r3
 8008eca:	7e7b      	ldrb	r3, [r7, #25]
 8008ecc:	b29a      	uxth	r2, r3
 8008ece:	7bfb      	ldrb	r3, [r7, #15]
 8008ed0:	440a      	add	r2, r1
 8008ed2:	b291      	uxth	r1, r2
 8008ed4:	4a31      	ldr	r2, [pc, #196]	; (8008f9c <recvfrom+0x3d4>)
 8008ed6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8008eda:	7bfb      	ldrb	r3, [r7, #15]
 8008edc:	4a30      	ldr	r2, [pc, #192]	; (8008fa0 <recvfrom+0x3d8>)
 8008ede:	2180      	movs	r1, #128	; 0x80
 8008ee0:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8008ee2:	7bfb      	ldrb	r3, [r7, #15]
 8008ee4:	4a2d      	ldr	r2, [pc, #180]	; (8008f9c <recvfrom+0x3d4>)
 8008ee6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008eea:	89ba      	ldrh	r2, [r7, #12]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d202      	bcs.n	8008ef6 <recvfrom+0x32e>
 8008ef0:	89bb      	ldrh	r3, [r7, #12]
 8008ef2:	83fb      	strh	r3, [r7, #30]
 8008ef4:	e004      	b.n	8008f00 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 8008ef6:	7bfb      	ldrb	r3, [r7, #15]
 8008ef8:	4a28      	ldr	r2, [pc, #160]	; (8008f9c <recvfrom+0x3d4>)
 8008efa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008efe:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8008f00:	8bfa      	ldrh	r2, [r7, #30]
 8008f02:	7bfb      	ldrb	r3, [r7, #15]
 8008f04:	68b9      	ldr	r1, [r7, #8]
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fe ffa6 	bl	8007e58 <wiz_recv_data>
			break;
 8008f0c:	e00b      	b.n	8008f26 <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8008f0e:	8bfa      	ldrh	r2, [r7, #30]
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
 8008f12:	4611      	mov	r1, r2
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7fe fffb 	bl	8007f10 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
 8008f1c:	491f      	ldr	r1, [pc, #124]	; (8008f9c <recvfrom+0x3d4>)
 8008f1e:	8bfa      	ldrh	r2, [r7, #30]
 8008f20:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8008f24:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8008f26:	7bfb      	ldrb	r3, [r7, #15]
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	00db      	lsls	r3, r3, #3
 8008f2e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008f32:	2140      	movs	r1, #64	; 0x40
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7fe fd8f 	bl	8007a58 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8008f3a:	bf00      	nop
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	3301      	adds	r3, #1
 8008f42:	00db      	lsls	r3, r3, #3
 8008f44:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7fe fd39 	bl	80079c0 <WIZCHIP_READ>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d1f3      	bne.n	8008f3c <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8008f54:	7bfb      	ldrb	r3, [r7, #15]
 8008f56:	4a11      	ldr	r2, [pc, #68]	; (8008f9c <recvfrom+0x3d4>)
 8008f58:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8008f5c:	7bfb      	ldrb	r3, [r7, #15]
 8008f5e:	8bfa      	ldrh	r2, [r7, #30]
 8008f60:	1a8a      	subs	r2, r1, r2
 8008f62:	b291      	uxth	r1, r2
 8008f64:	4a0d      	ldr	r2, [pc, #52]	; (8008f9c <recvfrom+0x3d4>)
 8008f66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
 8008f6c:	4a0b      	ldr	r2, [pc, #44]	; (8008f9c <recvfrom+0x3d4>)
 8008f6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d009      	beq.n	8008f8a <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8008f76:	7bfb      	ldrb	r3, [r7, #15]
 8008f78:	4a09      	ldr	r2, [pc, #36]	; (8008fa0 <recvfrom+0x3d8>)
 8008f7a:	5cd2      	ldrb	r2, [r2, r3]
 8008f7c:	7bfb      	ldrb	r3, [r7, #15]
 8008f7e:	f042 0201 	orr.w	r2, r2, #1
 8008f82:	b2d1      	uxtb	r1, r2
 8008f84:	4a06      	ldr	r2, [pc, #24]	; (8008fa0 <recvfrom+0x3d8>)
 8008f86:	54d1      	strb	r1, [r2, r3]
 8008f88:	e003      	b.n	8008f92 <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8008f8a:	7bfb      	ldrb	r3, [r7, #15]
 8008f8c:	4a04      	ldr	r2, [pc, #16]	; (8008fa0 <recvfrom+0x3d8>)
 8008f8e:	2100      	movs	r1, #0
 8008f90:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8008f92:	8bfb      	ldrh	r3, [r7, #30]
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3720      	adds	r7, #32
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	20000928 	.word	0x20000928
 8008fa0:	20000938 	.word	0x20000938

08008fa4 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8008fa4:	b480      	push	{r7}
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	bf00      	nop
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr

08008fb2 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8008fb2:	b480      	push	{r7}
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	bf00      	nop
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8008fc0:	b480      	push	{r7}
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	bf00      	nop
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr

08008fce <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8008fce:	b480      	push	{r7}
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	bf00      	nop
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	4618      	mov	r0, r3
 8008fec:	370c      	adds	r7, #12
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr

08008ff6 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8008ff6:	b480      	push	{r7}
 8008ff8:	b083      	sub	sp, #12
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	460b      	mov	r3, r1
 8009000:	70fb      	strb	r3, [r7, #3]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	78fa      	ldrb	r2, [r7, #3]
 8009006:	701a      	strb	r2, [r3, #0]
 8009008:	bf00      	nop
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8009014:	b480      	push	{r7}
 8009016:	af00      	add	r7, sp, #0
 8009018:	2300      	movs	r3, #0
 800901a:	4618      	mov	r0, r3
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	4603      	mov	r3, r0
 800902c:	71fb      	strb	r3, [r7, #7]
 800902e:	bf00      	nop
 8009030:	370c      	adds	r7, #12
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
	...

0800903c <reg_wizchip_cris_cbfunc>:

static uint8_t    _DNS_[4];      // DNS server ip address
static dhcp_mode  _DHCP_;        // DHCP mode

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d002      	beq.n	8009052 <reg_wizchip_cris_cbfunc+0x16>
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d106      	bne.n	8009060 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 8009052:	4b0a      	ldr	r3, [pc, #40]	; (800907c <reg_wizchip_cris_cbfunc+0x40>)
 8009054:	4a0a      	ldr	r2, [pc, #40]	; (8009080 <reg_wizchip_cris_cbfunc+0x44>)
 8009056:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 8009058:	4b08      	ldr	r3, [pc, #32]	; (800907c <reg_wizchip_cris_cbfunc+0x40>)
 800905a:	4a0a      	ldr	r2, [pc, #40]	; (8009084 <reg_wizchip_cris_cbfunc+0x48>)
 800905c:	611a      	str	r2, [r3, #16]
 800905e:	e006      	b.n	800906e <reg_wizchip_cris_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 8009060:	4a06      	ldr	r2, [pc, #24]	; (800907c <reg_wizchip_cris_cbfunc+0x40>)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	60d3      	str	r3, [r2, #12]
      WIZCHIP.CRIS._exit  = cris_ex;
 8009066:	4a05      	ldr	r2, [pc, #20]	; (800907c <reg_wizchip_cris_cbfunc+0x40>)
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	6113      	str	r3, [r2, #16]
   }
}
 800906c:	bf00      	nop
 800906e:	bf00      	nop
 8009070:	370c      	adds	r7, #12
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr
 800907a:	bf00      	nop
 800907c:	200000a4 	.word	0x200000a4
 8009080:	08008fa5 	.word	0x08008fa5
 8009084:	08008fb3 	.word	0x08008fb3

08009088 <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d002      	beq.n	800909e <reg_wizchip_cs_cbfunc+0x16>
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d106      	bne.n	80090ac <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800909e:	4b0a      	ldr	r3, [pc, #40]	; (80090c8 <reg_wizchip_cs_cbfunc+0x40>)
 80090a0:	4a0a      	ldr	r2, [pc, #40]	; (80090cc <reg_wizchip_cs_cbfunc+0x44>)
 80090a2:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80090a4:	4b08      	ldr	r3, [pc, #32]	; (80090c8 <reg_wizchip_cs_cbfunc+0x40>)
 80090a6:	4a0a      	ldr	r2, [pc, #40]	; (80090d0 <reg_wizchip_cs_cbfunc+0x48>)
 80090a8:	619a      	str	r2, [r3, #24]
 80090aa:	e006      	b.n	80090ba <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80090ac:	4a06      	ldr	r2, [pc, #24]	; (80090c8 <reg_wizchip_cs_cbfunc+0x40>)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80090b2:	4a05      	ldr	r2, [pc, #20]	; (80090c8 <reg_wizchip_cs_cbfunc+0x40>)
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	6193      	str	r3, [r2, #24]
   }
}
 80090b8:	bf00      	nop
 80090ba:	bf00      	nop
 80090bc:	370c      	adds	r7, #12
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop
 80090c8:	200000a4 	.word	0x200000a4
 80090cc:	08008fc1 	.word	0x08008fc1
 80090d0:	08008fcf 	.word	0x08008fcf

080090d4 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80090de:	bf00      	nop
 80090e0:	4b0f      	ldr	r3, [pc, #60]	; (8009120 <reg_wizchip_spi_cbfunc+0x4c>)
 80090e2:	881b      	ldrh	r3, [r3, #0]
 80090e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d0f9      	beq.n	80090e0 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d002      	beq.n	80090f8 <reg_wizchip_spi_cbfunc+0x24>
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d106      	bne.n	8009106 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80090f8:	4b09      	ldr	r3, [pc, #36]	; (8009120 <reg_wizchip_spi_cbfunc+0x4c>)
 80090fa:	4a0a      	ldr	r2, [pc, #40]	; (8009124 <reg_wizchip_spi_cbfunc+0x50>)
 80090fc:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80090fe:	4b08      	ldr	r3, [pc, #32]	; (8009120 <reg_wizchip_spi_cbfunc+0x4c>)
 8009100:	4a09      	ldr	r2, [pc, #36]	; (8009128 <reg_wizchip_spi_cbfunc+0x54>)
 8009102:	621a      	str	r2, [r3, #32]
 8009104:	e006      	b.n	8009114 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8009106:	4a06      	ldr	r2, [pc, #24]	; (8009120 <reg_wizchip_spi_cbfunc+0x4c>)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 800910c:	4a04      	ldr	r2, [pc, #16]	; (8009120 <reg_wizchip_spi_cbfunc+0x4c>)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	6213      	str	r3, [r2, #32]
   }
}
 8009112:	bf00      	nop
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr
 8009120:	200000a4 	.word	0x200000a4
 8009124:	08009015 	.word	0x08009015
 8009128:	08009025 	.word	0x08009025

0800912c <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 800912c:	b590      	push	{r4, r7, lr}
 800912e:	b087      	sub	sp, #28
 8009130:	af00      	add	r7, sp, #0
 8009132:	4603      	mov	r3, r0
 8009134:	6039      	str	r1, [r7, #0]
 8009136:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8009138:	2300      	movs	r3, #0
 800913a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 800913c:	2300      	movs	r3, #0
 800913e:	60fb      	str	r3, [r7, #12]
 8009140:	2300      	movs	r3, #0
 8009142:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8009144:	79fb      	ldrb	r3, [r7, #7]
 8009146:	2b0f      	cmp	r3, #15
 8009148:	f200 80c7 	bhi.w	80092da <ctlwizchip+0x1ae>
 800914c:	a201      	add	r2, pc, #4	; (adr r2, 8009154 <ctlwizchip+0x28>)
 800914e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009152:	bf00      	nop
 8009154:	08009195 	.word	0x08009195
 8009158:	0800919b 	.word	0x0800919b
 800915c:	080091c7 	.word	0x080091c7
 8009160:	080091bb 	.word	0x080091bb
 8009164:	080091d5 	.word	0x080091d5
 8009168:	080091e1 	.word	0x080091e1
 800916c:	080091ef 	.word	0x080091ef
 8009170:	08009215 	.word	0x08009215
 8009174:	0800923b 	.word	0x0800923b
 8009178:	0800927f 	.word	0x0800927f
 800917c:	08009285 	.word	0x08009285
 8009180:	0800928d 	.word	0x0800928d
 8009184:	080092e1 	.word	0x080092e1
 8009188:	08009295 	.word	0x08009295
 800918c:	080092a3 	.word	0x080092a3
 8009190:	080092bf 	.word	0x080092bf
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8009194:	f000 f8ea 	bl	800936c <wizchip_sw_reset>
         break;
 8009198:	e0a3      	b.n	80092e2 <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d004      	beq.n	80091aa <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	3308      	adds	r3, #8
 80091a8:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	693a      	ldr	r2, [r7, #16]
 80091ae:	4611      	mov	r1, r2
 80091b0:	4618      	mov	r0, r3
 80091b2:	f000 f927 	bl	8009404 <wizchip_init>
 80091b6:	4603      	mov	r3, r0
 80091b8:	e094      	b.n	80092e4 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	881b      	ldrh	r3, [r3, #0]
 80091be:	4618      	mov	r0, r3
 80091c0:	f000 f9ac 	bl	800951c <wizchip_clrinterrupt>
         break;
 80091c4:	e08d      	b.n	80092e2 <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80091c6:	f000 f9dd 	bl	8009584 <wizchip_getinterrupt>
 80091ca:	4603      	mov	r3, r0
 80091cc:	461a      	mov	r2, r3
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	801a      	strh	r2, [r3, #0]
         break;
 80091d2:	e086      	b.n	80092e2 <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	881b      	ldrh	r3, [r3, #0]
 80091d8:	4618      	mov	r0, r3
 80091da:	f000 f9f8 	bl	80095ce <wizchip_setinterruptmask>
         break;         
 80091de:	e080      	b.n	80092e2 <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80091e0:	f000 fa10 	bl	8009604 <wizchip_getinterruptmask>
 80091e4:	4603      	mov	r3, r0
 80091e6:	461a      	mov	r2, r3
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	801a      	strh	r2, [r3, #0]
         break;
 80091ec:	e079      	b.n	80092e2 <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	881b      	ldrh	r3, [r3, #0]
 80091f2:	0a1b      	lsrs	r3, r3, #8
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	4619      	mov	r1, r3
 80091fa:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80091fe:	f7fe fc2b 	bl	8007a58 <WIZCHIP_WRITE>
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	881b      	ldrh	r3, [r3, #0]
 8009206:	b2db      	uxtb	r3, r3
 8009208:	4619      	mov	r1, r3
 800920a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800920e:	f7fe fc23 	bl	8007a58 <WIZCHIP_WRITE>
         break;
 8009212:	e066      	b.n	80092e2 <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8009214:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8009218:	f7fe fbd2 	bl	80079c0 <WIZCHIP_READ>
 800921c:	4603      	mov	r3, r0
 800921e:	b29b      	uxth	r3, r3
 8009220:	021b      	lsls	r3, r3, #8
 8009222:	b29c      	uxth	r4, r3
 8009224:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8009228:	f7fe fbca 	bl	80079c0 <WIZCHIP_READ>
 800922c:	4603      	mov	r3, r0
 800922e:	b29b      	uxth	r3, r3
 8009230:	4423      	add	r3, r4
 8009232:	b29a      	uxth	r2, r3
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	801a      	strh	r2, [r3, #0]
         break;
 8009238:	e053      	b.n	80092e2 <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800923a:	4b2c      	ldr	r3, [pc, #176]	; (80092ec <ctlwizchip+0x1c0>)
 800923c:	789a      	ldrb	r2, [r3, #2]
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	3301      	adds	r3, #1
 8009246:	4a29      	ldr	r2, [pc, #164]	; (80092ec <ctlwizchip+0x1c0>)
 8009248:	78d2      	ldrb	r2, [r2, #3]
 800924a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	3302      	adds	r3, #2
 8009250:	4a26      	ldr	r2, [pc, #152]	; (80092ec <ctlwizchip+0x1c0>)
 8009252:	7912      	ldrb	r2, [r2, #4]
 8009254:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	3303      	adds	r3, #3
 800925a:	4a24      	ldr	r2, [pc, #144]	; (80092ec <ctlwizchip+0x1c0>)
 800925c:	7952      	ldrb	r2, [r2, #5]
 800925e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	3304      	adds	r3, #4
 8009264:	4a21      	ldr	r2, [pc, #132]	; (80092ec <ctlwizchip+0x1c0>)
 8009266:	7992      	ldrb	r2, [r2, #6]
 8009268:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	3305      	adds	r3, #5
 800926e:	4a1f      	ldr	r2, [pc, #124]	; (80092ec <ctlwizchip+0x1c0>)
 8009270:	79d2      	ldrb	r2, [r2, #7]
 8009272:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	3306      	adds	r3, #6
 8009278:	2200      	movs	r2, #0
 800927a:	701a      	strb	r2, [r3, #0]
         break;
 800927c:	e031      	b.n	80092e2 <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 800927e:	f000 fa13 	bl	80096a8 <wizphy_reset>
         break;
 8009282:	e02e      	b.n	80092e2 <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8009284:	6838      	ldr	r0, [r7, #0]
 8009286:	f000 fa36 	bl	80096f6 <wizphy_setphyconf>
         break;
 800928a:	e02a      	b.n	80092e2 <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 800928c:	6838      	ldr	r0, [r7, #0]
 800928e:	f000 fa75 	bl	800977c <wizphy_getphyconf>
         break;
 8009292:	e026      	b.n	80092e2 <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	4618      	mov	r0, r3
 800929a:	f000 faf7 	bl	800988c <wizphy_setphypmode>
 800929e:	4603      	mov	r3, r0
 80092a0:	e020      	b.n	80092e4 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 80092a2:	f000 f9e8 	bl	8009676 <wizphy_getphypmode>
 80092a6:	4603      	mov	r3, r0
 80092a8:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80092aa:	7dfb      	ldrb	r3, [r7, #23]
 80092ac:	2bff      	cmp	r3, #255	; 0xff
 80092ae:	d102      	bne.n	80092b6 <ctlwizchip+0x18a>
 80092b0:	f04f 33ff 	mov.w	r3, #4294967295
 80092b4:	e016      	b.n	80092e4 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	7dfa      	ldrb	r2, [r7, #23]
 80092ba:	701a      	strb	r2, [r3, #0]
         break;
 80092bc:	e011      	b.n	80092e2 <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80092be:	f000 f9c4 	bl	800964a <wizphy_getphylink>
 80092c2:	4603      	mov	r3, r0
 80092c4:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80092c6:	7dfb      	ldrb	r3, [r7, #23]
 80092c8:	2bff      	cmp	r3, #255	; 0xff
 80092ca:	d102      	bne.n	80092d2 <ctlwizchip+0x1a6>
 80092cc:	f04f 33ff 	mov.w	r3, #4294967295
 80092d0:	e008      	b.n	80092e4 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	7dfa      	ldrb	r2, [r7, #23]
 80092d6:	701a      	strb	r2, [r3, #0]
         break;
 80092d8:	e003      	b.n	80092e2 <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 80092da:	f04f 33ff 	mov.w	r3, #4294967295
 80092de:	e001      	b.n	80092e4 <ctlwizchip+0x1b8>
         break;
 80092e0:	bf00      	nop
   }
   return 0;
 80092e2:	2300      	movs	r3, #0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	371c      	adds	r7, #28
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd90      	pop	{r4, r7, pc}
 80092ec:	200000a4 	.word	0x200000a4

080092f0 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	4603      	mov	r3, r0
 80092f8:	6039      	str	r1, [r7, #0]
 80092fa:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 80092fc:	79fb      	ldrb	r3, [r7, #7]
 80092fe:	2b05      	cmp	r3, #5
 8009300:	d82c      	bhi.n	800935c <ctlnetwork+0x6c>
 8009302:	a201      	add	r2, pc, #4	; (adr r2, 8009308 <ctlnetwork+0x18>)
 8009304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009308:	08009321 	.word	0x08009321
 800930c:	08009329 	.word	0x08009329
 8009310:	08009331 	.word	0x08009331
 8009314:	0800933f 	.word	0x0800933f
 8009318:	0800934d 	.word	0x0800934d
 800931c:	08009355 	.word	0x08009355
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8009320:	6838      	ldr	r0, [r7, #0]
 8009322:	f000 fafd 	bl	8009920 <wizchip_setnetinfo>
         break;
 8009326:	e01c      	b.n	8009362 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8009328:	6838      	ldr	r0, [r7, #0]
 800932a:	f000 fb39 	bl	80099a0 <wizchip_getnetinfo>
         break;
 800932e:	e018      	b.n	8009362 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	4618      	mov	r0, r3
 8009336:	f000 fb73 	bl	8009a20 <wizchip_setnetmode>
 800933a:	4603      	mov	r3, r0
 800933c:	e012      	b.n	8009364 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 800933e:	f000 fb91 	bl	8009a64 <wizchip_getnetmode>
 8009342:	4603      	mov	r3, r0
 8009344:	461a      	mov	r2, r3
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	701a      	strb	r2, [r3, #0]
         break;
 800934a:	e00a      	b.n	8009362 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 800934c:	6838      	ldr	r0, [r7, #0]
 800934e:	f000 fb91 	bl	8009a74 <wizchip_settimeout>
         break;
 8009352:	e006      	b.n	8009362 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8009354:	6838      	ldr	r0, [r7, #0]
 8009356:	f000 fbae 	bl	8009ab6 <wizchip_gettimeout>
         break;
 800935a:	e002      	b.n	8009362 <ctlnetwork+0x72>
      default:
         return -1;
 800935c:	f04f 33ff 	mov.w	r3, #4294967295
 8009360:	e000      	b.n	8009364 <ctlnetwork+0x74>
   }
   return 0;
 8009362:	2300      	movs	r3, #0
}
 8009364:	4618      	mov	r0, r3
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b086      	sub	sp, #24
 8009370:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8009372:	1d3b      	adds	r3, r7, #4
 8009374:	2206      	movs	r2, #6
 8009376:	4619      	mov	r1, r3
 8009378:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800937c:	f7fe fbba 	bl	8007af4 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8009380:	f107 0314 	add.w	r3, r7, #20
 8009384:	2204      	movs	r2, #4
 8009386:	4619      	mov	r1, r3
 8009388:	f44f 7080 	mov.w	r0, #256	; 0x100
 800938c:	f7fe fbb2 	bl	8007af4 <WIZCHIP_READ_BUF>
 8009390:	f107 0310 	add.w	r3, r7, #16
 8009394:	2204      	movs	r2, #4
 8009396:	4619      	mov	r1, r3
 8009398:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800939c:	f7fe fbaa 	bl	8007af4 <WIZCHIP_READ_BUF>
 80093a0:	f107 030c 	add.w	r3, r7, #12
 80093a4:	2204      	movs	r2, #4
 80093a6:	4619      	mov	r1, r3
 80093a8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80093ac:	f7fe fba2 	bl	8007af4 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80093b0:	2180      	movs	r1, #128	; 0x80
 80093b2:	2000      	movs	r0, #0
 80093b4:	f7fe fb50 	bl	8007a58 <WIZCHIP_WRITE>
   getMR(); // for delay
 80093b8:	2000      	movs	r0, #0
 80093ba:	f7fe fb01 	bl	80079c0 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80093be:	1d3b      	adds	r3, r7, #4
 80093c0:	2206      	movs	r2, #6
 80093c2:	4619      	mov	r1, r3
 80093c4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80093c8:	f7fe fbf4 	bl	8007bb4 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80093cc:	f107 0314 	add.w	r3, r7, #20
 80093d0:	2204      	movs	r2, #4
 80093d2:	4619      	mov	r1, r3
 80093d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80093d8:	f7fe fbec 	bl	8007bb4 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80093dc:	f107 0310 	add.w	r3, r7, #16
 80093e0:	2204      	movs	r2, #4
 80093e2:	4619      	mov	r1, r3
 80093e4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80093e8:	f7fe fbe4 	bl	8007bb4 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80093ec:	f107 030c 	add.w	r3, r7, #12
 80093f0:	2204      	movs	r2, #4
 80093f2:	4619      	mov	r1, r3
 80093f4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80093f8:	f7fe fbdc 	bl	8007bb4 <WIZCHIP_WRITE_BUF>
}
 80093fc:	bf00      	nop
 80093fe:	3718      	adds	r7, #24
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800940e:	2300      	movs	r3, #0
 8009410:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8009412:	f7ff ffab 	bl	800936c <wizchip_sw_reset>
   if(txsize)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d03b      	beq.n	8009494 <wizchip_init+0x90>
   {
      tmp = 0;
 800941c:	2300      	movs	r3, #0
 800941e:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009420:	2300      	movs	r3, #0
 8009422:	73fb      	strb	r3, [r7, #15]
 8009424:	e015      	b.n	8009452 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8009426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	4413      	add	r3, r2
 800942e:	781a      	ldrb	r2, [r3, #0]
 8009430:	7bbb      	ldrb	r3, [r7, #14]
 8009432:	4413      	add	r3, r2
 8009434:	b2db      	uxtb	r3, r3
 8009436:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8009438:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800943c:	2b10      	cmp	r3, #16
 800943e:	dd02      	ble.n	8009446 <wizchip_init+0x42>
 8009440:	f04f 33ff 	mov.w	r3, #4294967295
 8009444:	e066      	b.n	8009514 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800944a:	b2db      	uxtb	r3, r3
 800944c:	3301      	adds	r3, #1
 800944e:	b2db      	uxtb	r3, r3
 8009450:	73fb      	strb	r3, [r7, #15]
 8009452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009456:	2b07      	cmp	r3, #7
 8009458:	dde5      	ble.n	8009426 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800945a:	2300      	movs	r3, #0
 800945c:	73fb      	strb	r3, [r7, #15]
 800945e:	e015      	b.n	800948c <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8009460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	3301      	adds	r3, #1
 8009468:	00db      	lsls	r3, r3, #3
 800946a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800946e:	4618      	mov	r0, r3
 8009470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	4413      	add	r3, r2
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	4619      	mov	r1, r3
 800947c:	f7fe faec 	bl	8007a58 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009484:	b2db      	uxtb	r3, r3
 8009486:	3301      	adds	r3, #1
 8009488:	b2db      	uxtb	r3, r3
 800948a:	73fb      	strb	r3, [r7, #15]
 800948c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009490:	2b07      	cmp	r3, #7
 8009492:	dde5      	ble.n	8009460 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d03b      	beq.n	8009512 <wizchip_init+0x10e>
   {
      tmp = 0;
 800949a:	2300      	movs	r3, #0
 800949c:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800949e:	2300      	movs	r3, #0
 80094a0:	73fb      	strb	r3, [r7, #15]
 80094a2:	e015      	b.n	80094d0 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80094a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	4413      	add	r3, r2
 80094ac:	781a      	ldrb	r2, [r3, #0]
 80094ae:	7bbb      	ldrb	r3, [r7, #14]
 80094b0:	4413      	add	r3, r2
 80094b2:	b2db      	uxtb	r3, r3
 80094b4:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80094b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094ba:	2b10      	cmp	r3, #16
 80094bc:	dd02      	ble.n	80094c4 <wizchip_init+0xc0>
 80094be:	f04f 33ff 	mov.w	r3, #4294967295
 80094c2:	e027      	b.n	8009514 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80094c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	3301      	adds	r3, #1
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	73fb      	strb	r3, [r7, #15]
 80094d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094d4:	2b07      	cmp	r3, #7
 80094d6:	dde5      	ble.n	80094a4 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80094d8:	2300      	movs	r3, #0
 80094da:	73fb      	strb	r3, [r7, #15]
 80094dc:	e015      	b.n	800950a <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80094de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	3301      	adds	r3, #1
 80094e6:	00db      	lsls	r3, r3, #3
 80094e8:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80094ec:	4618      	mov	r0, r3
 80094ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	4413      	add	r3, r2
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	4619      	mov	r1, r3
 80094fa:	f7fe faad 	bl	8007a58 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80094fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009502:	b2db      	uxtb	r3, r3
 8009504:	3301      	adds	r3, #1
 8009506:	b2db      	uxtb	r3, r3
 8009508:	73fb      	strb	r3, [r7, #15]
 800950a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800950e:	2b07      	cmp	r3, #7
 8009510:	dde5      	ble.n	80094de <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8009512:	2300      	movs	r3, #0
}
 8009514:	4618      	mov	r0, r3
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	4603      	mov	r3, r0
 8009524:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8009526:	88fb      	ldrh	r3, [r7, #6]
 8009528:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800952a:	88fb      	ldrh	r3, [r7, #6]
 800952c:	0a1b      	lsrs	r3, r3, #8
 800952e:	b29b      	uxth	r3, r3
 8009530:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8009532:	7bfb      	ldrb	r3, [r7, #15]
 8009534:	f023 030f 	bic.w	r3, r3, #15
 8009538:	b2db      	uxtb	r3, r3
 800953a:	4619      	mov	r1, r3
 800953c:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8009540:	f7fe fa8a 	bl	8007a58 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8009544:	2300      	movs	r3, #0
 8009546:	73fb      	strb	r3, [r7, #15]
 8009548:	e014      	b.n	8009574 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 800954a:	7bba      	ldrb	r2, [r7, #14]
 800954c:	7bfb      	ldrb	r3, [r7, #15]
 800954e:	fa42 f303 	asr.w	r3, r2, r3
 8009552:	f003 0301 	and.w	r3, r3, #1
 8009556:	2b00      	cmp	r3, #0
 8009558:	d009      	beq.n	800956e <wizchip_clrinterrupt+0x52>
 800955a:	7bfb      	ldrb	r3, [r7, #15]
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	3301      	adds	r3, #1
 8009560:	00db      	lsls	r3, r3, #3
 8009562:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009566:	211f      	movs	r1, #31
 8009568:	4618      	mov	r0, r3
 800956a:	f7fe fa75 	bl	8007a58 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 800956e:	7bfb      	ldrb	r3, [r7, #15]
 8009570:	3301      	adds	r3, #1
 8009572:	73fb      	strb	r3, [r7, #15]
 8009574:	7bfb      	ldrb	r3, [r7, #15]
 8009576:	2b07      	cmp	r3, #7
 8009578:	d9e7      	bls.n	800954a <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 800957a:	bf00      	nop
 800957c:	bf00      	nop
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 800958a:	2300      	movs	r3, #0
 800958c:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 800958e:	2300      	movs	r3, #0
 8009590:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8009592:	2300      	movs	r3, #0
 8009594:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8009596:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 800959a:	f7fe fa11 	bl	80079c0 <WIZCHIP_READ>
 800959e:	4603      	mov	r3, r0
 80095a0:	f023 030f 	bic.w	r3, r3, #15
 80095a4:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 80095a6:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 80095aa:	f7fe fa09 	bl	80079c0 <WIZCHIP_READ>
 80095ae:	4603      	mov	r3, r0
 80095b0:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80095b2:	79bb      	ldrb	r3, [r7, #6]
 80095b4:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80095b6:	88bb      	ldrh	r3, [r7, #4]
 80095b8:	021b      	lsls	r3, r3, #8
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	79fb      	ldrb	r3, [r7, #7]
 80095be:	b29b      	uxth	r3, r3
 80095c0:	4413      	add	r3, r2
 80095c2:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80095c4:	88bb      	ldrh	r3, [r7, #4]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3708      	adds	r7, #8
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b084      	sub	sp, #16
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	4603      	mov	r3, r0
 80095d6:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 80095d8:	88fb      	ldrh	r3, [r7, #6]
 80095da:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80095dc:	88fb      	ldrh	r3, [r7, #6]
 80095de:	0a1b      	lsrs	r3, r3, #8
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 80095e4:	7bfb      	ldrb	r3, [r7, #15]
 80095e6:	4619      	mov	r1, r3
 80095e8:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80095ec:	f7fe fa34 	bl	8007a58 <WIZCHIP_WRITE>
   setSIMR(simr);
 80095f0:	7bbb      	ldrb	r3, [r7, #14]
 80095f2:	4619      	mov	r1, r3
 80095f4:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80095f8:	f7fe fa2e 	bl	8007a58 <WIZCHIP_WRITE>
#endif   
}
 80095fc:	bf00      	nop
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 800960a:	2300      	movs	r3, #0
 800960c:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800960e:	2300      	movs	r3, #0
 8009610:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8009612:	2300      	movs	r3, #0
 8009614:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8009616:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800961a:	f7fe f9d1 	bl	80079c0 <WIZCHIP_READ>
 800961e:	4603      	mov	r3, r0
 8009620:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8009622:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8009626:	f7fe f9cb 	bl	80079c0 <WIZCHIP_READ>
 800962a:	4603      	mov	r3, r0
 800962c:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 800962e:	79bb      	ldrb	r3, [r7, #6]
 8009630:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8009632:	88bb      	ldrh	r3, [r7, #4]
 8009634:	021b      	lsls	r3, r3, #8
 8009636:	b29a      	uxth	r2, r3
 8009638:	79fb      	ldrb	r3, [r7, #7]
 800963a:	b29b      	uxth	r3, r3
 800963c:	4413      	add	r3, r2
 800963e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8009640:	88bb      	ldrh	r3, [r7, #4]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3708      	adds	r7, #8
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b082      	sub	sp, #8
 800964e:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8009650:	2300      	movs	r3, #0
 8009652:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8009654:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8009658:	f7fe f9b2 	bl	80079c0 <WIZCHIP_READ>
 800965c:	4603      	mov	r3, r0
 800965e:	f003 0301 	and.w	r3, r3, #1
 8009662:	2b00      	cmp	r3, #0
 8009664:	d001      	beq.n	800966a <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8009666:	2301      	movs	r3, #1
 8009668:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 800966a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3708      	adds	r7, #8
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b082      	sub	sp, #8
 800967a:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 800967c:	2300      	movs	r3, #0
 800967e:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8009680:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8009684:	f7fe f99c 	bl	80079c0 <WIZCHIP_READ>
 8009688:	4603      	mov	r3, r0
 800968a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800968e:	2b30      	cmp	r3, #48	; 0x30
 8009690:	d102      	bne.n	8009698 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8009692:	2301      	movs	r3, #1
 8009694:	71fb      	strb	r3, [r7, #7]
 8009696:	e001      	b.n	800969c <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8009698:	2300      	movs	r3, #0
 800969a:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 800969c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3708      	adds	r7, #8
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80096ae:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80096b2:	f7fe f985 	bl	80079c0 <WIZCHIP_READ>
 80096b6:	4603      	mov	r3, r0
 80096b8:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 80096ba:	79fb      	ldrb	r3, [r7, #7]
 80096bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096c0:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80096c2:	79fb      	ldrb	r3, [r7, #7]
 80096c4:	4619      	mov	r1, r3
 80096c6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80096ca:	f7fe f9c5 	bl	8007a58 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 80096ce:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80096d2:	f7fe f975 	bl	80079c0 <WIZCHIP_READ>
 80096d6:	4603      	mov	r3, r0
 80096d8:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 80096da:	79fb      	ldrb	r3, [r7, #7]
 80096dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80096e0:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80096e2:	79fb      	ldrb	r3, [r7, #7]
 80096e4:	4619      	mov	r1, r3
 80096e6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80096ea:	f7fe f9b5 	bl	8007a58 <WIZCHIP_WRITE>
}
 80096ee:	bf00      	nop
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b084      	sub	sp, #16
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80096fe:	2300      	movs	r3, #0
 8009700:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	2b01      	cmp	r3, #1
 8009708:	d104      	bne.n	8009714 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 800970a:	7bfb      	ldrb	r3, [r7, #15]
 800970c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009710:	73fb      	strb	r3, [r7, #15]
 8009712:	e003      	b.n	800971c <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8009714:	7bfb      	ldrb	r3, [r7, #15]
 8009716:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800971a:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	785b      	ldrb	r3, [r3, #1]
 8009720:	2b01      	cmp	r3, #1
 8009722:	d104      	bne.n	800972e <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8009724:	7bfb      	ldrb	r3, [r7, #15]
 8009726:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800972a:	73fb      	strb	r3, [r7, #15]
 800972c:	e019      	b.n	8009762 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	78db      	ldrb	r3, [r3, #3]
 8009732:	2b01      	cmp	r3, #1
 8009734:	d10d      	bne.n	8009752 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	789b      	ldrb	r3, [r3, #2]
 800973a:	2b01      	cmp	r3, #1
 800973c:	d104      	bne.n	8009748 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 800973e:	7bfb      	ldrb	r3, [r7, #15]
 8009740:	f043 0318 	orr.w	r3, r3, #24
 8009744:	73fb      	strb	r3, [r7, #15]
 8009746:	e00c      	b.n	8009762 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8009748:	7bfb      	ldrb	r3, [r7, #15]
 800974a:	f043 0308 	orr.w	r3, r3, #8
 800974e:	73fb      	strb	r3, [r7, #15]
 8009750:	e007      	b.n	8009762 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	789b      	ldrb	r3, [r3, #2]
 8009756:	2b01      	cmp	r3, #1
 8009758:	d103      	bne.n	8009762 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 800975a:	7bfb      	ldrb	r3, [r7, #15]
 800975c:	f043 0310 	orr.w	r3, r3, #16
 8009760:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8009762:	7bfb      	ldrb	r3, [r7, #15]
 8009764:	4619      	mov	r1, r3
 8009766:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800976a:	f7fe f975 	bl	8007a58 <WIZCHIP_WRITE>
   wizphy_reset();
 800976e:	f7ff ff9b 	bl	80096a8 <wizphy_reset>
}
 8009772:	bf00      	nop
 8009774:	3710      	adds	r7, #16
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
	...

0800977c <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8009784:	2300      	movs	r3, #0
 8009786:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8009788:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800978c:	f7fe f918 	bl	80079c0 <WIZCHIP_READ>
 8009790:	4603      	mov	r3, r0
 8009792:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8009794:	7bfb      	ldrb	r3, [r7, #15]
 8009796:	119b      	asrs	r3, r3, #6
 8009798:	b2db      	uxtb	r3, r3
 800979a:	f003 0301 	and.w	r3, r3, #1
 800979e:	b2da      	uxtb	r2, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80097a4:	7bfb      	ldrb	r3, [r7, #15]
 80097a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097aa:	2b20      	cmp	r3, #32
 80097ac:	d001      	beq.n	80097b2 <wizphy_getphyconf+0x36>
 80097ae:	2b38      	cmp	r3, #56	; 0x38
 80097b0:	d103      	bne.n	80097ba <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2201      	movs	r2, #1
 80097b6:	705a      	strb	r2, [r3, #1]
         break;
 80097b8:	e003      	b.n	80097c2 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	705a      	strb	r2, [r3, #1]
         break;
 80097c0:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80097c2:	7bfb      	ldrb	r3, [r7, #15]
 80097c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097c8:	3b10      	subs	r3, #16
 80097ca:	2b10      	cmp	r3, #16
 80097cc:	bf8c      	ite	hi
 80097ce:	2201      	movhi	r2, #1
 80097d0:	2200      	movls	r2, #0
 80097d2:	b2d2      	uxtb	r2, r2
 80097d4:	2a00      	cmp	r2, #0
 80097d6:	d10f      	bne.n	80097f8 <wizphy_getphyconf+0x7c>
 80097d8:	4a1b      	ldr	r2, [pc, #108]	; (8009848 <wizphy_getphyconf+0xcc>)
 80097da:	fa22 f303 	lsr.w	r3, r2, r3
 80097de:	f003 0301 	and.w	r3, r3, #1
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	bf14      	ite	ne
 80097e6:	2301      	movne	r3, #1
 80097e8:	2300      	moveq	r3, #0
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d003      	beq.n	80097f8 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	709a      	strb	r2, [r3, #2]
         break;
 80097f6:	e003      	b.n	8009800 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	709a      	strb	r2, [r3, #2]
         break;
 80097fe:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8009800:	7bfb      	ldrb	r3, [r7, #15]
 8009802:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009806:	3b08      	subs	r3, #8
 8009808:	2b18      	cmp	r3, #24
 800980a:	bf8c      	ite	hi
 800980c:	2201      	movhi	r2, #1
 800980e:	2200      	movls	r2, #0
 8009810:	b2d2      	uxtb	r2, r2
 8009812:	2a00      	cmp	r2, #0
 8009814:	d10f      	bne.n	8009836 <wizphy_getphyconf+0xba>
 8009816:	4a0d      	ldr	r2, [pc, #52]	; (800984c <wizphy_getphyconf+0xd0>)
 8009818:	fa22 f303 	lsr.w	r3, r2, r3
 800981c:	f003 0301 	and.w	r3, r3, #1
 8009820:	2b00      	cmp	r3, #0
 8009822:	bf14      	ite	ne
 8009824:	2301      	movne	r3, #1
 8009826:	2300      	moveq	r3, #0
 8009828:	b2db      	uxtb	r3, r3
 800982a:	2b00      	cmp	r3, #0
 800982c:	d003      	beq.n	8009836 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2201      	movs	r2, #1
 8009832:	70da      	strb	r2, [r3, #3]
         break;
 8009834:	e003      	b.n	800983e <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	70da      	strb	r2, [r3, #3]
         break;
 800983c:	bf00      	nop
   }
}
 800983e:	bf00      	nop
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	00010101 	.word	0x00010101
 800984c:	01010001 	.word	0x01010001

08009850 <wizphy_getphystat>:

void wizphy_getphystat(wiz_PhyConf* phyconf)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
   uint8_t tmp = getPHYCFGR();
 8009858:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800985c:	f7fe f8b0 	bl	80079c0 <WIZCHIP_READ>
 8009860:	4603      	mov	r3, r0
 8009862:	73fb      	strb	r3, [r7, #15]
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
 8009864:	7bfb      	ldrb	r3, [r7, #15]
 8009866:	109b      	asrs	r3, r3, #2
 8009868:	b2db      	uxtb	r3, r3
 800986a:	f003 0301 	and.w	r3, r3, #1
 800986e:	b2da      	uxtb	r2, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	70da      	strb	r2, [r3, #3]
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
 8009874:	7bfb      	ldrb	r3, [r7, #15]
 8009876:	105b      	asrs	r3, r3, #1
 8009878:	b2db      	uxtb	r3, r3
 800987a:	f003 0301 	and.w	r3, r3, #1
 800987e:	b2da      	uxtb	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	709a      	strb	r2, [r3, #2]
}
 8009884:	bf00      	nop
 8009886:	3710      	adds	r7, #16
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <wizphy_setphypmode>:

int8_t wizphy_setphypmode(uint8_t pmode)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	4603      	mov	r3, r0
 8009894:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8009896:	2300      	movs	r3, #0
 8009898:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800989a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800989e:	f7fe f88f 	bl	80079c0 <WIZCHIP_READ>
 80098a2:	4603      	mov	r3, r0
 80098a4:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80098a6:	7bfb      	ldrb	r3, [r7, #15]
 80098a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d102      	bne.n	80098b6 <wizphy_setphypmode+0x2a>
 80098b0:	f04f 33ff 	mov.w	r3, #4294967295
 80098b4:	e030      	b.n	8009918 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 80098b6:	7bfb      	ldrb	r3, [r7, #15]
 80098b8:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80098bc:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80098be:	79fb      	ldrb	r3, [r7, #7]
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d104      	bne.n	80098ce <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
 80098c6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80098ca:	73fb      	strb	r3, [r7, #15]
 80098cc:	e003      	b.n	80098d6 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80098ce:	7bfb      	ldrb	r3, [r7, #15]
 80098d0:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80098d4:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 80098d6:	7bfb      	ldrb	r3, [r7, #15]
 80098d8:	4619      	mov	r1, r3
 80098da:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80098de:	f7fe f8bb 	bl	8007a58 <WIZCHIP_WRITE>
   wizphy_reset();
 80098e2:	f7ff fee1 	bl	80096a8 <wizphy_reset>
   tmp = getPHYCFGR();
 80098e6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80098ea:	f7fe f869 	bl	80079c0 <WIZCHIP_READ>
 80098ee:	4603      	mov	r3, r0
 80098f0:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80098f2:	79fb      	ldrb	r3, [r7, #7]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d106      	bne.n	8009906 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80098f8:	7bfb      	ldrb	r3, [r7, #15]
 80098fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d008      	beq.n	8009914 <wizphy_setphypmode+0x88>
 8009902:	2300      	movs	r3, #0
 8009904:	e008      	b.n	8009918 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8009906:	7bfb      	ldrb	r3, [r7, #15]
 8009908:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800990c:	2b00      	cmp	r3, #0
 800990e:	d001      	beq.n	8009914 <wizphy_setphypmode+0x88>
 8009910:	2300      	movs	r3, #0
 8009912:	e001      	b.n	8009918 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8009914:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009918:	4618      	mov	r0, r3
 800991a:	3710      	adds	r7, #16
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2206      	movs	r2, #6
 800992c:	4619      	mov	r1, r3
 800992e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8009932:	f7fe f93f 	bl	8007bb4 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	330e      	adds	r3, #14
 800993a:	2204      	movs	r2, #4
 800993c:	4619      	mov	r1, r3
 800993e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009942:	f7fe f937 	bl	8007bb4 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	330a      	adds	r3, #10
 800994a:	2204      	movs	r2, #4
 800994c:	4619      	mov	r1, r3
 800994e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8009952:	f7fe f92f 	bl	8007bb4 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	3306      	adds	r3, #6
 800995a:	2204      	movs	r2, #4
 800995c:	4619      	mov	r1, r3
 800995e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8009962:	f7fe f927 	bl	8007bb4 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	7c9a      	ldrb	r2, [r3, #18]
 800996a:	4b0b      	ldr	r3, [pc, #44]	; (8009998 <wizchip_setnetinfo+0x78>)
 800996c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	7cda      	ldrb	r2, [r3, #19]
 8009972:	4b09      	ldr	r3, [pc, #36]	; (8009998 <wizchip_setnetinfo+0x78>)
 8009974:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	7d1a      	ldrb	r2, [r3, #20]
 800997a:	4b07      	ldr	r3, [pc, #28]	; (8009998 <wizchip_setnetinfo+0x78>)
 800997c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	7d5a      	ldrb	r2, [r3, #21]
 8009982:	4b05      	ldr	r3, [pc, #20]	; (8009998 <wizchip_setnetinfo+0x78>)
 8009984:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	7d9a      	ldrb	r2, [r3, #22]
 800998a:	4b04      	ldr	r3, [pc, #16]	; (800999c <wizchip_setnetinfo+0x7c>)
 800998c:	701a      	strb	r2, [r3, #0]
}
 800998e:	bf00      	nop
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	20000940 	.word	0x20000940
 800999c:	20000944 	.word	0x20000944

080099a0 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2206      	movs	r2, #6
 80099ac:	4619      	mov	r1, r3
 80099ae:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80099b2:	f7fe f89f 	bl	8007af4 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	330e      	adds	r3, #14
 80099ba:	2204      	movs	r2, #4
 80099bc:	4619      	mov	r1, r3
 80099be:	f44f 7080 	mov.w	r0, #256	; 0x100
 80099c2:	f7fe f897 	bl	8007af4 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	330a      	adds	r3, #10
 80099ca:	2204      	movs	r2, #4
 80099cc:	4619      	mov	r1, r3
 80099ce:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80099d2:	f7fe f88f 	bl	8007af4 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	3306      	adds	r3, #6
 80099da:	2204      	movs	r2, #4
 80099dc:	4619      	mov	r1, r3
 80099de:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80099e2:	f7fe f887 	bl	8007af4 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80099e6:	4b0c      	ldr	r3, [pc, #48]	; (8009a18 <wizchip_getnetinfo+0x78>)
 80099e8:	781a      	ldrb	r2, [r3, #0]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80099ee:	4b0a      	ldr	r3, [pc, #40]	; (8009a18 <wizchip_getnetinfo+0x78>)
 80099f0:	785a      	ldrb	r2, [r3, #1]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80099f6:	4b08      	ldr	r3, [pc, #32]	; (8009a18 <wizchip_getnetinfo+0x78>)
 80099f8:	789a      	ldrb	r2, [r3, #2]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80099fe:	4b06      	ldr	r3, [pc, #24]	; (8009a18 <wizchip_getnetinfo+0x78>)
 8009a00:	78da      	ldrb	r2, [r3, #3]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8009a06:	4b05      	ldr	r3, [pc, #20]	; (8009a1c <wizchip_getnetinfo+0x7c>)
 8009a08:	781a      	ldrb	r2, [r3, #0]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	759a      	strb	r2, [r3, #22]
}
 8009a0e:	bf00      	nop
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	20000940 	.word	0x20000940
 8009a1c:	20000944 	.word	0x20000944

08009a20 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	4603      	mov	r3, r0
 8009a28:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8009a2e:	79fb      	ldrb	r3, [r7, #7]
 8009a30:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d002      	beq.n	8009a3e <wizchip_setnetmode+0x1e>
 8009a38:	f04f 33ff 	mov.w	r3, #4294967295
 8009a3c:	e00e      	b.n	8009a5c <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8009a3e:	2000      	movs	r0, #0
 8009a40:	f7fd ffbe 	bl	80079c0 <WIZCHIP_READ>
 8009a44:	4603      	mov	r3, r0
 8009a46:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8009a48:	7bfa      	ldrb	r2, [r7, #15]
 8009a4a:	79fb      	ldrb	r3, [r7, #7]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8009a50:	7bfb      	ldrb	r3, [r7, #15]
 8009a52:	4619      	mov	r1, r3
 8009a54:	2000      	movs	r0, #0
 8009a56:	f7fd ffff 	bl	8007a58 <WIZCHIP_WRITE>
   return 0;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8009a68:	2000      	movs	r0, #0
 8009a6a:	f7fd ffa9 	bl	80079c0 <WIZCHIP_READ>
 8009a6e:	4603      	mov	r3, r0
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	4619      	mov	r1, r3
 8009a82:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8009a86:	f7fd ffe7 	bl	8007a58 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	885b      	ldrh	r3, [r3, #2]
 8009a8e:	0a1b      	lsrs	r3, r3, #8
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	4619      	mov	r1, r3
 8009a96:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8009a9a:	f7fd ffdd 	bl	8007a58 <WIZCHIP_WRITE>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	885b      	ldrh	r3, [r3, #2]
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8009aaa:	f7fd ffd5 	bl	8007a58 <WIZCHIP_WRITE>
}
 8009aae:	bf00      	nop
 8009ab0:	3708      	adds	r7, #8
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}

08009ab6 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8009ab6:	b590      	push	{r4, r7, lr}
 8009ab8:	b083      	sub	sp, #12
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8009abe:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8009ac2:	f7fd ff7d 	bl	80079c0 <WIZCHIP_READ>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	461a      	mov	r2, r3
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8009ace:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8009ad2:	f7fd ff75 	bl	80079c0 <WIZCHIP_READ>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	021b      	lsls	r3, r3, #8
 8009adc:	b29c      	uxth	r4, r3
 8009ade:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8009ae2:	f7fd ff6d 	bl	80079c0 <WIZCHIP_READ>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	4423      	add	r3, r4
 8009aec:	b29a      	uxth	r2, r3
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	805a      	strh	r2, [r3, #2]
}
 8009af2:	bf00      	nop
 8009af4:	370c      	adds	r7, #12
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd90      	pop	{r4, r7, pc}
	...

08009afc <default_ip_assign>:
	if (delay_func) delay = delay_func;
}

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8009b00:	2204      	movs	r2, #4
 8009b02:	4909      	ldr	r1, [pc, #36]	; (8009b28 <default_ip_assign+0x2c>)
 8009b04:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8009b08:	f7fe f854 	bl	8007bb4 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8009b0c:	2204      	movs	r2, #4
 8009b0e:	4907      	ldr	r1, [pc, #28]	; (8009b2c <default_ip_assign+0x30>)
 8009b10:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8009b14:	f7fe f84e 	bl	8007bb4 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8009b18:	2204      	movs	r2, #4
 8009b1a:	4905      	ldr	r1, [pc, #20]	; (8009b30 <default_ip_assign+0x34>)
 8009b1c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009b20:	f7fe f848 	bl	8007bb4 <WIZCHIP_WRITE_BUF>
}
 8009b24:	bf00      	nop
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	20000954 	.word	0x20000954
 8009b2c:	2000095c 	.word	0x2000095c
 8009b30:	20000958 	.word	0x20000958

08009b34 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8009b38:	2180      	movs	r1, #128	; 0x80
 8009b3a:	2000      	movs	r0, #0
 8009b3c:	f7fd ff8c 	bl	8007a58 <WIZCHIP_WRITE>
   getMR(); // for delay
 8009b40:	2000      	movs	r0, #0
 8009b42:	f7fd ff3d 	bl	80079c0 <WIZCHIP_READ>
   default_ip_assign();
 8009b46:	f7ff ffd9 	bl	8009afc <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8009b4a:	2206      	movs	r2, #6
 8009b4c:	4903      	ldr	r1, [pc, #12]	; (8009b5c <default_ip_update+0x28>)
 8009b4e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8009b52:	f7fe f82f 	bl	8007bb4 <WIZCHIP_WRITE_BUF>
}
 8009b56:	bf00      	nop
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	20000974 	.word	0x20000974

08009b60 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8009b64:	2180      	movs	r1, #128	; 0x80
 8009b66:	2000      	movs	r0, #0
 8009b68:	f7fd ff76 	bl	8007a58 <WIZCHIP_WRITE>
	getMR(); // for delay
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	f7fd ff27 	bl	80079c0 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8009b72:	2206      	movs	r2, #6
 8009b74:	4903      	ldr	r1, [pc, #12]	; (8009b84 <default_ip_conflict+0x24>)
 8009b76:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8009b7a:	f7fe f81b 	bl	8007bb4 <WIZCHIP_WRITE_BUF>
}
 8009b7e:	bf00      	nop
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	20000974 	.word	0x20000974

08009b88 <default_delay>:

void default_delay(uint32_t time){}
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	bf00      	nop
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8009ba8:	4b10      	ldr	r3, [pc, #64]	; (8009bec <reg_dhcp_cbfunc+0x50>)
 8009baa:	4a11      	ldr	r2, [pc, #68]	; (8009bf0 <reg_dhcp_cbfunc+0x54>)
 8009bac:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 8009bae:	4b11      	ldr	r3, [pc, #68]	; (8009bf4 <reg_dhcp_cbfunc+0x58>)
 8009bb0:	4a11      	ldr	r2, [pc, #68]	; (8009bf8 <reg_dhcp_cbfunc+0x5c>)
 8009bb2:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8009bb4:	4b11      	ldr	r3, [pc, #68]	; (8009bfc <reg_dhcp_cbfunc+0x60>)
 8009bb6:	4a12      	ldr	r2, [pc, #72]	; (8009c00 <reg_dhcp_cbfunc+0x64>)
 8009bb8:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d002      	beq.n	8009bc6 <reg_dhcp_cbfunc+0x2a>
 8009bc0:	4a0a      	ldr	r2, [pc, #40]	; (8009bec <reg_dhcp_cbfunc+0x50>)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d002      	beq.n	8009bd2 <reg_dhcp_cbfunc+0x36>
 8009bcc:	4a09      	ldr	r2, [pc, #36]	; (8009bf4 <reg_dhcp_cbfunc+0x58>)
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d002      	beq.n	8009bde <reg_dhcp_cbfunc+0x42>
 8009bd8:	4a08      	ldr	r2, [pc, #32]	; (8009bfc <reg_dhcp_cbfunc+0x60>)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6013      	str	r3, [r2, #0]
}
 8009bde:	bf00      	nop
 8009be0:	3714      	adds	r7, #20
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	200000e4 	.word	0x200000e4
 8009bf0:	08009afd 	.word	0x08009afd
 8009bf4:	200000e8 	.word	0x200000e8
 8009bf8:	08009b35 	.word	0x08009b35
 8009bfc:	200000ec 	.word	0x200000ec
 8009c00:	08009b61 	.word	0x08009b61

08009c04 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8009c0a:	463b      	mov	r3, r7
 8009c0c:	2206      	movs	r2, #6
 8009c0e:	4619      	mov	r1, r3
 8009c10:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8009c14:	f7fd ff6e 	bl	8007af4 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8009c18:	4b72      	ldr	r3, [pc, #456]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8009c20:	4b70      	ldr	r3, [pc, #448]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	2201      	movs	r2, #1
 8009c26:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8009c28:	4b6e      	ldr	r3, [pc, #440]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	2206      	movs	r2, #6
 8009c2e:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8009c30:	4b6c      	ldr	r3, [pc, #432]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2200      	movs	r2, #0
 8009c36:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8009c38:	4b6a      	ldr	r3, [pc, #424]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	3304      	adds	r3, #4
 8009c3e:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8009c40:	4b69      	ldr	r3, [pc, #420]	; (8009de8 <makeDHCPMSG+0x1e4>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	0e1b      	lsrs	r3, r3, #24
 8009c46:	b2da      	uxtb	r2, r3
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8009c4c:	4b66      	ldr	r3, [pc, #408]	; (8009de8 <makeDHCPMSG+0x1e4>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	0c1a      	lsrs	r2, r3, #16
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	3301      	adds	r3, #1
 8009c56:	b2d2      	uxtb	r2, r2
 8009c58:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8009c5a:	4b63      	ldr	r3, [pc, #396]	; (8009de8 <makeDHCPMSG+0x1e4>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	0a1a      	lsrs	r2, r3, #8
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	3302      	adds	r3, #2
 8009c64:	b2d2      	uxtb	r2, r2
 8009c66:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8009c68:	4b5f      	ldr	r3, [pc, #380]	; (8009de8 <makeDHCPMSG+0x1e4>)
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	3303      	adds	r3, #3
 8009c70:	b2d2      	uxtb	r2, r2
 8009c72:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8009c74:	4b5b      	ldr	r3, [pc, #364]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8009c7c:	4b59      	ldr	r3, [pc, #356]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	330a      	adds	r3, #10
 8009c82:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	2280      	movs	r2, #128	; 0x80
 8009c88:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	2200      	movs	r2, #0
 8009c90:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8009c92:	4b54      	ldr	r3, [pc, #336]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2200      	movs	r2, #0
 8009c98:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8009c9a:	4b52      	ldr	r3, [pc, #328]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8009ca2:	4b50      	ldr	r3, [pc, #320]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8009caa:	4b4e      	ldr	r3, [pc, #312]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8009cb2:	4b4c      	ldr	r3, [pc, #304]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8009cba:	4b4a      	ldr	r3, [pc, #296]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8009cc2:	4b48      	ldr	r3, [pc, #288]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8009cca:	4b46      	ldr	r3, [pc, #280]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8009cd2:	4b44      	ldr	r3, [pc, #272]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8009cda:	4b42      	ldr	r3, [pc, #264]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8009ce2:	4b40      	ldr	r3, [pc, #256]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8009cea:	4b3e      	ldr	r3, [pc, #248]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8009cf2:	4b3c      	ldr	r3, [pc, #240]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8009cfa:	4b3a      	ldr	r3, [pc, #232]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8009d02:	4b38      	ldr	r3, [pc, #224]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2200      	movs	r2, #0
 8009d08:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 8009d0a:	4b36      	ldr	r3, [pc, #216]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8009d12:	4b34      	ldr	r3, [pc, #208]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a35      	ldr	r2, [pc, #212]	; (8009dec <makeDHCPMSG+0x1e8>)
 8009d18:	7812      	ldrb	r2, [r2, #0]
 8009d1a:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8009d1c:	4b31      	ldr	r3, [pc, #196]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a32      	ldr	r2, [pc, #200]	; (8009dec <makeDHCPMSG+0x1e8>)
 8009d22:	7852      	ldrb	r2, [r2, #1]
 8009d24:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8009d26:	4b2f      	ldr	r3, [pc, #188]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a30      	ldr	r2, [pc, #192]	; (8009dec <makeDHCPMSG+0x1e8>)
 8009d2c:	7892      	ldrb	r2, [r2, #2]
 8009d2e:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8009d30:	4b2c      	ldr	r3, [pc, #176]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a2d      	ldr	r2, [pc, #180]	; (8009dec <makeDHCPMSG+0x1e8>)
 8009d36:	78d2      	ldrb	r2, [r2, #3]
 8009d38:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8009d3a:	4b2a      	ldr	r3, [pc, #168]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a2b      	ldr	r2, [pc, #172]	; (8009dec <makeDHCPMSG+0x1e8>)
 8009d40:	7912      	ldrb	r2, [r2, #4]
 8009d42:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8009d46:	4b27      	ldr	r3, [pc, #156]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a28      	ldr	r2, [pc, #160]	; (8009dec <makeDHCPMSG+0x1e8>)
 8009d4c:	7952      	ldrb	r2, [r2, #5]
 8009d4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8009d52:	2306      	movs	r3, #6
 8009d54:	73fb      	strb	r3, [r7, #15]
 8009d56:	e008      	b.n	8009d6a <makeDHCPMSG+0x166>
 8009d58:	4b22      	ldr	r3, [pc, #136]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	7bfb      	ldrb	r3, [r7, #15]
 8009d5e:	4413      	add	r3, r2
 8009d60:	2200      	movs	r2, #0
 8009d62:	771a      	strb	r2, [r3, #28]
 8009d64:	7bfb      	ldrb	r3, [r7, #15]
 8009d66:	3301      	adds	r3, #1
 8009d68:	73fb      	strb	r3, [r7, #15]
 8009d6a:	7bfb      	ldrb	r3, [r7, #15]
 8009d6c:	2b0f      	cmp	r3, #15
 8009d6e:	d9f3      	bls.n	8009d58 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8009d70:	2300      	movs	r3, #0
 8009d72:	73fb      	strb	r3, [r7, #15]
 8009d74:	e009      	b.n	8009d8a <makeDHCPMSG+0x186>
 8009d76:	4b1b      	ldr	r3, [pc, #108]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	7bfb      	ldrb	r3, [r7, #15]
 8009d7c:	4413      	add	r3, r2
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8009d84:	7bfb      	ldrb	r3, [r7, #15]
 8009d86:	3301      	adds	r3, #1
 8009d88:	73fb      	strb	r3, [r7, #15]
 8009d8a:	7bfb      	ldrb	r3, [r7, #15]
 8009d8c:	2b3f      	cmp	r3, #63	; 0x3f
 8009d8e:	d9f2      	bls.n	8009d76 <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8009d90:	2300      	movs	r3, #0
 8009d92:	73fb      	strb	r3, [r7, #15]
 8009d94:	e009      	b.n	8009daa <makeDHCPMSG+0x1a6>
 8009d96:	4b13      	ldr	r3, [pc, #76]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8009da4:	7bfb      	ldrb	r3, [r7, #15]
 8009da6:	3301      	adds	r3, #1
 8009da8:	73fb      	strb	r3, [r7, #15]
 8009daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	daf1      	bge.n	8009d96 <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8009db2:	4b0c      	ldr	r3, [pc, #48]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2263      	movs	r2, #99	; 0x63
 8009db8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8009dbc:	4b09      	ldr	r3, [pc, #36]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2282      	movs	r2, #130	; 0x82
 8009dc2:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8009dc6:	4b07      	ldr	r3, [pc, #28]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2253      	movs	r2, #83	; 0x53
 8009dcc:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8009dd0:	4b04      	ldr	r3, [pc, #16]	; (8009de4 <makeDHCPMSG+0x1e0>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2263      	movs	r2, #99	; 0x63
 8009dd6:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 8009dda:	bf00      	nop
 8009ddc:	3710      	adds	r7, #16
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	20000970 	.word	0x20000970
 8009de8:	2000096c 	.word	0x2000096c
 8009dec:	20000974 	.word	0x20000974

08009df0 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8009df0:	b5b0      	push	{r4, r5, r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 8009df6:	2300      	movs	r3, #0
 8009df8:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 8009dfa:	f7ff ff03 	bl	8009c04 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8009dfe:	4b56      	ldr	r3, [pc, #344]	; (8009f58 <send_DHCP_DISCOVER+0x168>)
 8009e00:	2200      	movs	r2, #0
 8009e02:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8009e04:	4b54      	ldr	r3, [pc, #336]	; (8009f58 <send_DHCP_DISCOVER+0x168>)
 8009e06:	2200      	movs	r2, #0
 8009e08:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 8009e0a:	4b53      	ldr	r3, [pc, #332]	; (8009f58 <send_DHCP_DISCOVER+0x168>)
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8009e10:	4b51      	ldr	r3, [pc, #324]	; (8009f58 <send_DHCP_DISCOVER+0x168>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 8009e16:	4b51      	ldr	r3, [pc, #324]	; (8009f5c <send_DHCP_DISCOVER+0x16c>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8009e1c:	4b4f      	ldr	r3, [pc, #316]	; (8009f5c <send_DHCP_DISCOVER+0x16c>)
 8009e1e:	2200      	movs	r2, #0
 8009e20:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8009e22:	4b4e      	ldr	r3, [pc, #312]	; (8009f5c <send_DHCP_DISCOVER+0x16c>)
 8009e24:	2200      	movs	r2, #0
 8009e26:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8009e28:	4b4c      	ldr	r3, [pc, #304]	; (8009f5c <send_DHCP_DISCOVER+0x16c>)
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 8009e2e:	2304      	movs	r3, #4
 8009e30:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8009e32:	4b4b      	ldr	r3, [pc, #300]	; (8009f60 <send_DHCP_DISCOVER+0x170>)
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	88bb      	ldrh	r3, [r7, #4]
 8009e38:	1c59      	adds	r1, r3, #1
 8009e3a:	80b9      	strh	r1, [r7, #4]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	2235      	movs	r2, #53	; 0x35
 8009e40:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8009e44:	4b46      	ldr	r3, [pc, #280]	; (8009f60 <send_DHCP_DISCOVER+0x170>)
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	88bb      	ldrh	r3, [r7, #4]
 8009e4a:	1c59      	adds	r1, r3, #1
 8009e4c:	80b9      	strh	r1, [r7, #4]
 8009e4e:	4413      	add	r3, r2
 8009e50:	2201      	movs	r2, #1
 8009e52:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 8009e56:	4b42      	ldr	r3, [pc, #264]	; (8009f60 <send_DHCP_DISCOVER+0x170>)
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	88bb      	ldrh	r3, [r7, #4]
 8009e5c:	1c59      	adds	r1, r3, #1
 8009e5e:	80b9      	strh	r1, [r7, #4]
 8009e60:	4413      	add	r3, r2
 8009e62:	2201      	movs	r2, #1
 8009e64:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8009e68:	4b3d      	ldr	r3, [pc, #244]	; (8009f60 <send_DHCP_DISCOVER+0x170>)
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	88bb      	ldrh	r3, [r7, #4]
 8009e6e:	1c59      	adds	r1, r3, #1
 8009e70:	80b9      	strh	r1, [r7, #4]
 8009e72:	4413      	add	r3, r2
 8009e74:	223d      	movs	r2, #61	; 0x3d
 8009e76:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8009e7a:	4b39      	ldr	r3, [pc, #228]	; (8009f60 <send_DHCP_DISCOVER+0x170>)
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	88bb      	ldrh	r3, [r7, #4]
 8009e80:	1c59      	adds	r1, r3, #1
 8009e82:	80b9      	strh	r1, [r7, #4]
 8009e84:	4413      	add	r3, r2
 8009e86:	2207      	movs	r2, #7
 8009e88:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8009e8c:	4b34      	ldr	r3, [pc, #208]	; (8009f60 <send_DHCP_DISCOVER+0x170>)
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	88bb      	ldrh	r3, [r7, #4]
 8009e92:	1c59      	adds	r1, r3, #1
 8009e94:	80b9      	strh	r1, [r7, #4]
 8009e96:	4413      	add	r3, r2
 8009e98:	2201      	movs	r2, #1
 8009e9a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8009e9e:	4b30      	ldr	r3, [pc, #192]	; (8009f60 <send_DHCP_DISCOVER+0x170>)
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	88bb      	ldrh	r3, [r7, #4]
 8009ea4:	1c59      	adds	r1, r3, #1
 8009ea6:	80b9      	strh	r1, [r7, #4]
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	4b2e      	ldr	r3, [pc, #184]	; (8009f64 <send_DHCP_DISCOVER+0x174>)
 8009eac:	7819      	ldrb	r1, [r3, #0]
 8009eae:	1813      	adds	r3, r2, r0
 8009eb0:	460a      	mov	r2, r1
 8009eb2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8009eb6:	4b2a      	ldr	r3, [pc, #168]	; (8009f60 <send_DHCP_DISCOVER+0x170>)
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	88bb      	ldrh	r3, [r7, #4]
 8009ebc:	1c59      	adds	r1, r3, #1
 8009ebe:	80b9      	strh	r1, [r7, #4]
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	4b28      	ldr	r3, [pc, #160]	; (8009f64 <send_DHCP_DISCOVER+0x174>)
 8009ec4:	7859      	ldrb	r1, [r3, #1]
 8009ec6:	1813      	adds	r3, r2, r0
 8009ec8:	460a      	mov	r2, r1
 8009eca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8009ece:	4b24      	ldr	r3, [pc, #144]	; (8009f60 <send_DHCP_DISCOVER+0x170>)
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	88bb      	ldrh	r3, [r7, #4]
 8009ed4:	1c59      	adds	r1, r3, #1
 8009ed6:	80b9      	strh	r1, [r7, #4]
 8009ed8:	4618      	mov	r0, r3
 8009eda:	4b22      	ldr	r3, [pc, #136]	; (8009f64 <send_DHCP_DISCOVER+0x174>)
 8009edc:	7899      	ldrb	r1, [r3, #2]
 8009ede:	1813      	adds	r3, r2, r0
 8009ee0:	460a      	mov	r2, r1
 8009ee2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8009ee6:	4b1e      	ldr	r3, [pc, #120]	; (8009f60 <send_DHCP_DISCOVER+0x170>)
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	88bb      	ldrh	r3, [r7, #4]
 8009eec:	1c59      	adds	r1, r3, #1
 8009eee:	80b9      	strh	r1, [r7, #4]
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	4b1c      	ldr	r3, [pc, #112]	; (8009f64 <send_DHCP_DISCOVER+0x174>)
 8009ef4:	78d9      	ldrb	r1, [r3, #3]
 8009ef6:	1813      	adds	r3, r2, r0
 8009ef8:	460a      	mov	r2, r1
 8009efa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8009efe:	4b18      	ldr	r3, [pc, #96]	; (8009f60 <send_DHCP_DISCOVER+0x170>)
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	88bb      	ldrh	r3, [r7, #4]
 8009f04:	1c59      	adds	r1, r3, #1
 8009f06:	80b9      	strh	r1, [r7, #4]
 8009f08:	4618      	mov	r0, r3
 8009f0a:	4b16      	ldr	r3, [pc, #88]	; (8009f64 <send_DHCP_DISCOVER+0x174>)
 8009f0c:	7919      	ldrb	r1, [r3, #4]
 8009f0e:	1813      	adds	r3, r2, r0
 8009f10:	460a      	mov	r2, r1
 8009f12:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8009f16:	4b12      	ldr	r3, [pc, #72]	; (8009f60 <send_DHCP_DISCOVER+0x170>)
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	88bb      	ldrh	r3, [r7, #4]
 8009f1c:	1c59      	adds	r1, r3, #1
 8009f1e:	80b9      	strh	r1, [r7, #4]
 8009f20:	4618      	mov	r0, r3
 8009f22:	4b10      	ldr	r3, [pc, #64]	; (8009f64 <send_DHCP_DISCOVER+0x174>)
 8009f24:	7959      	ldrb	r1, [r3, #5]
 8009f26:	1813      	adds	r3, r2, r0
 8009f28:	460a      	mov	r2, r1
 8009f2a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8009f2e:	4b0c      	ldr	r3, [pc, #48]	; (8009f60 <send_DHCP_DISCOVER+0x170>)
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	88bb      	ldrh	r3, [r7, #4]
 8009f34:	1c59      	adds	r1, r3, #1
 8009f36:	80b9      	strh	r1, [r7, #4]
 8009f38:	4413      	add	r3, r2
 8009f3a:	220c      	movs	r2, #12
 8009f3c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8009f40:	4b07      	ldr	r3, [pc, #28]	; (8009f60 <send_DHCP_DISCOVER+0x170>)
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	88bb      	ldrh	r3, [r7, #4]
 8009f46:	1c59      	adds	r1, r3, #1
 8009f48:	80b9      	strh	r1, [r7, #4]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8009f52:	2300      	movs	r3, #0
 8009f54:	80fb      	strh	r3, [r7, #6]
 8009f56:	e017      	b.n	8009f88 <send_DHCP_DISCOVER+0x198>
 8009f58:	20000948 	.word	0x20000948
 8009f5c:	2000094c 	.word	0x2000094c
 8009f60:	20000970 	.word	0x20000970
 8009f64:	20000974 	.word	0x20000974
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8009f68:	88f9      	ldrh	r1, [r7, #6]
 8009f6a:	4b80      	ldr	r3, [pc, #512]	; (800a16c <send_DHCP_DISCOVER+0x37c>)
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	88bb      	ldrh	r3, [r7, #4]
 8009f70:	1c58      	adds	r0, r3, #1
 8009f72:	80b8      	strh	r0, [r7, #4]
 8009f74:	4618      	mov	r0, r3
 8009f76:	4b7e      	ldr	r3, [pc, #504]	; (800a170 <send_DHCP_DISCOVER+0x380>)
 8009f78:	5c59      	ldrb	r1, [r3, r1]
 8009f7a:	1813      	adds	r3, r2, r0
 8009f7c:	460a      	mov	r2, r1
 8009f7e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8009f82:	88fb      	ldrh	r3, [r7, #6]
 8009f84:	3301      	adds	r3, #1
 8009f86:	80fb      	strh	r3, [r7, #6]
 8009f88:	88fb      	ldrh	r3, [r7, #6]
 8009f8a:	4a79      	ldr	r2, [pc, #484]	; (800a170 <send_DHCP_DISCOVER+0x380>)
 8009f8c:	5cd3      	ldrb	r3, [r2, r3]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d1ea      	bne.n	8009f68 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8009f92:	4b78      	ldr	r3, [pc, #480]	; (800a174 <send_DHCP_DISCOVER+0x384>)
 8009f94:	78db      	ldrb	r3, [r3, #3]
 8009f96:	091b      	lsrs	r3, r3, #4
 8009f98:	b2da      	uxtb	r2, r3
 8009f9a:	4b74      	ldr	r3, [pc, #464]	; (800a16c <send_DHCP_DISCOVER+0x37c>)
 8009f9c:	681c      	ldr	r4, [r3, #0]
 8009f9e:	88bb      	ldrh	r3, [r7, #4]
 8009fa0:	1c59      	adds	r1, r3, #1
 8009fa2:	80b9      	strh	r1, [r7, #4]
 8009fa4:	461d      	mov	r5, r3
 8009fa6:	4610      	mov	r0, r2
 8009fa8:	f001 f9e4 	bl	800b374 <NibbleToHex>
 8009fac:	4603      	mov	r3, r0
 8009fae:	461a      	mov	r2, r3
 8009fb0:	1963      	adds	r3, r4, r5
 8009fb2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8009fb6:	4b6f      	ldr	r3, [pc, #444]	; (800a174 <send_DHCP_DISCOVER+0x384>)
 8009fb8:	78da      	ldrb	r2, [r3, #3]
 8009fba:	4b6c      	ldr	r3, [pc, #432]	; (800a16c <send_DHCP_DISCOVER+0x37c>)
 8009fbc:	681c      	ldr	r4, [r3, #0]
 8009fbe:	88bb      	ldrh	r3, [r7, #4]
 8009fc0:	1c59      	adds	r1, r3, #1
 8009fc2:	80b9      	strh	r1, [r7, #4]
 8009fc4:	461d      	mov	r5, r3
 8009fc6:	4610      	mov	r0, r2
 8009fc8:	f001 f9d4 	bl	800b374 <NibbleToHex>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	461a      	mov	r2, r3
 8009fd0:	1963      	adds	r3, r4, r5
 8009fd2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8009fd6:	4b67      	ldr	r3, [pc, #412]	; (800a174 <send_DHCP_DISCOVER+0x384>)
 8009fd8:	791b      	ldrb	r3, [r3, #4]
 8009fda:	091b      	lsrs	r3, r3, #4
 8009fdc:	b2da      	uxtb	r2, r3
 8009fde:	4b63      	ldr	r3, [pc, #396]	; (800a16c <send_DHCP_DISCOVER+0x37c>)
 8009fe0:	681c      	ldr	r4, [r3, #0]
 8009fe2:	88bb      	ldrh	r3, [r7, #4]
 8009fe4:	1c59      	adds	r1, r3, #1
 8009fe6:	80b9      	strh	r1, [r7, #4]
 8009fe8:	461d      	mov	r5, r3
 8009fea:	4610      	mov	r0, r2
 8009fec:	f001 f9c2 	bl	800b374 <NibbleToHex>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	1963      	adds	r3, r4, r5
 8009ff6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8009ffa:	4b5e      	ldr	r3, [pc, #376]	; (800a174 <send_DHCP_DISCOVER+0x384>)
 8009ffc:	791a      	ldrb	r2, [r3, #4]
 8009ffe:	4b5b      	ldr	r3, [pc, #364]	; (800a16c <send_DHCP_DISCOVER+0x37c>)
 800a000:	681c      	ldr	r4, [r3, #0]
 800a002:	88bb      	ldrh	r3, [r7, #4]
 800a004:	1c59      	adds	r1, r3, #1
 800a006:	80b9      	strh	r1, [r7, #4]
 800a008:	461d      	mov	r5, r3
 800a00a:	4610      	mov	r0, r2
 800a00c:	f001 f9b2 	bl	800b374 <NibbleToHex>
 800a010:	4603      	mov	r3, r0
 800a012:	461a      	mov	r2, r3
 800a014:	1963      	adds	r3, r4, r5
 800a016:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 800a01a:	4b56      	ldr	r3, [pc, #344]	; (800a174 <send_DHCP_DISCOVER+0x384>)
 800a01c:	795b      	ldrb	r3, [r3, #5]
 800a01e:	091b      	lsrs	r3, r3, #4
 800a020:	b2da      	uxtb	r2, r3
 800a022:	4b52      	ldr	r3, [pc, #328]	; (800a16c <send_DHCP_DISCOVER+0x37c>)
 800a024:	681c      	ldr	r4, [r3, #0]
 800a026:	88bb      	ldrh	r3, [r7, #4]
 800a028:	1c59      	adds	r1, r3, #1
 800a02a:	80b9      	strh	r1, [r7, #4]
 800a02c:	461d      	mov	r5, r3
 800a02e:	4610      	mov	r0, r2
 800a030:	f001 f9a0 	bl	800b374 <NibbleToHex>
 800a034:	4603      	mov	r3, r0
 800a036:	461a      	mov	r2, r3
 800a038:	1963      	adds	r3, r4, r5
 800a03a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 800a03e:	4b4d      	ldr	r3, [pc, #308]	; (800a174 <send_DHCP_DISCOVER+0x384>)
 800a040:	795a      	ldrb	r2, [r3, #5]
 800a042:	4b4a      	ldr	r3, [pc, #296]	; (800a16c <send_DHCP_DISCOVER+0x37c>)
 800a044:	681c      	ldr	r4, [r3, #0]
 800a046:	88bb      	ldrh	r3, [r7, #4]
 800a048:	1c59      	adds	r1, r3, #1
 800a04a:	80b9      	strh	r1, [r7, #4]
 800a04c:	461d      	mov	r5, r3
 800a04e:	4610      	mov	r0, r2
 800a050:	f001 f990 	bl	800b374 <NibbleToHex>
 800a054:	4603      	mov	r3, r0
 800a056:	461a      	mov	r2, r3
 800a058:	1963      	adds	r3, r4, r5
 800a05a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 800a05e:	88fb      	ldrh	r3, [r7, #6]
 800a060:	b2d9      	uxtb	r1, r3
 800a062:	4b42      	ldr	r3, [pc, #264]	; (800a16c <send_DHCP_DISCOVER+0x37c>)
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	88b8      	ldrh	r0, [r7, #4]
 800a068:	88fb      	ldrh	r3, [r7, #6]
 800a06a:	3307      	adds	r3, #7
 800a06c:	1ac3      	subs	r3, r0, r3
 800a06e:	3106      	adds	r1, #6
 800a070:	b2c9      	uxtb	r1, r1
 800a072:	4413      	add	r3, r2
 800a074:	460a      	mov	r2, r1
 800a076:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800a07a:	4b3c      	ldr	r3, [pc, #240]	; (800a16c <send_DHCP_DISCOVER+0x37c>)
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	88bb      	ldrh	r3, [r7, #4]
 800a080:	1c59      	adds	r1, r3, #1
 800a082:	80b9      	strh	r1, [r7, #4]
 800a084:	4413      	add	r3, r2
 800a086:	2237      	movs	r2, #55	; 0x37
 800a088:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 800a08c:	4b37      	ldr	r3, [pc, #220]	; (800a16c <send_DHCP_DISCOVER+0x37c>)
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	88bb      	ldrh	r3, [r7, #4]
 800a092:	1c59      	adds	r1, r3, #1
 800a094:	80b9      	strh	r1, [r7, #4]
 800a096:	4413      	add	r3, r2
 800a098:	2206      	movs	r2, #6
 800a09a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 800a09e:	4b33      	ldr	r3, [pc, #204]	; (800a16c <send_DHCP_DISCOVER+0x37c>)
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	88bb      	ldrh	r3, [r7, #4]
 800a0a4:	1c59      	adds	r1, r3, #1
 800a0a6:	80b9      	strh	r1, [r7, #4]
 800a0a8:	4413      	add	r3, r2
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 800a0b0:	4b2e      	ldr	r3, [pc, #184]	; (800a16c <send_DHCP_DISCOVER+0x37c>)
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	88bb      	ldrh	r3, [r7, #4]
 800a0b6:	1c59      	adds	r1, r3, #1
 800a0b8:	80b9      	strh	r1, [r7, #4]
 800a0ba:	4413      	add	r3, r2
 800a0bc:	2203      	movs	r2, #3
 800a0be:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 800a0c2:	4b2a      	ldr	r3, [pc, #168]	; (800a16c <send_DHCP_DISCOVER+0x37c>)
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	88bb      	ldrh	r3, [r7, #4]
 800a0c8:	1c59      	adds	r1, r3, #1
 800a0ca:	80b9      	strh	r1, [r7, #4]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	2206      	movs	r2, #6
 800a0d0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 800a0d4:	4b25      	ldr	r3, [pc, #148]	; (800a16c <send_DHCP_DISCOVER+0x37c>)
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	88bb      	ldrh	r3, [r7, #4]
 800a0da:	1c59      	adds	r1, r3, #1
 800a0dc:	80b9      	strh	r1, [r7, #4]
 800a0de:	4413      	add	r3, r2
 800a0e0:	220f      	movs	r2, #15
 800a0e2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 800a0e6:	4b21      	ldr	r3, [pc, #132]	; (800a16c <send_DHCP_DISCOVER+0x37c>)
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	88bb      	ldrh	r3, [r7, #4]
 800a0ec:	1c59      	adds	r1, r3, #1
 800a0ee:	80b9      	strh	r1, [r7, #4]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	223a      	movs	r2, #58	; 0x3a
 800a0f4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 800a0f8:	4b1c      	ldr	r3, [pc, #112]	; (800a16c <send_DHCP_DISCOVER+0x37c>)
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	88bb      	ldrh	r3, [r7, #4]
 800a0fe:	1c59      	adds	r1, r3, #1
 800a100:	80b9      	strh	r1, [r7, #4]
 800a102:	4413      	add	r3, r2
 800a104:	223b      	movs	r2, #59	; 0x3b
 800a106:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 800a10a:	4b18      	ldr	r3, [pc, #96]	; (800a16c <send_DHCP_DISCOVER+0x37c>)
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	88bb      	ldrh	r3, [r7, #4]
 800a110:	1c59      	adds	r1, r3, #1
 800a112:	80b9      	strh	r1, [r7, #4]
 800a114:	4413      	add	r3, r2
 800a116:	22ff      	movs	r2, #255	; 0xff
 800a118:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 800a11c:	88bb      	ldrh	r3, [r7, #4]
 800a11e:	80fb      	strh	r3, [r7, #6]
 800a120:	e009      	b.n	800a136 <send_DHCP_DISCOVER+0x346>
 800a122:	4b12      	ldr	r3, [pc, #72]	; (800a16c <send_DHCP_DISCOVER+0x37c>)
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	88fb      	ldrh	r3, [r7, #6]
 800a128:	4413      	add	r3, r2
 800a12a:	2200      	movs	r2, #0
 800a12c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800a130:	88fb      	ldrh	r3, [r7, #6]
 800a132:	3301      	adds	r3, #1
 800a134:	80fb      	strh	r3, [r7, #6]
 800a136:	88fb      	ldrh	r3, [r7, #6]
 800a138:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 800a13c:	d3f1      	bcc.n	800a122 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 800a13e:	23ff      	movs	r3, #255	; 0xff
 800a140:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 800a142:	23ff      	movs	r3, #255	; 0xff
 800a144:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 800a146:	23ff      	movs	r3, #255	; 0xff
 800a148:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 800a14a:	23ff      	movs	r3, #255	; 0xff
 800a14c:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800a14e:	4b0a      	ldr	r3, [pc, #40]	; (800a178 <send_DHCP_DISCOVER+0x388>)
 800a150:	7818      	ldrb	r0, [r3, #0]
 800a152:	4b06      	ldr	r3, [pc, #24]	; (800a16c <send_DHCP_DISCOVER+0x37c>)
 800a154:	6819      	ldr	r1, [r3, #0]
 800a156:	463b      	mov	r3, r7
 800a158:	2243      	movs	r2, #67	; 0x43
 800a15a:	9200      	str	r2, [sp, #0]
 800a15c:	f44f 7209 	mov.w	r2, #548	; 0x224
 800a160:	f7fe fbfc 	bl	800895c <sendto>
}
 800a164:	bf00      	nop
 800a166:	3708      	adds	r7, #8
 800a168:	46bd      	mov	sp, r7
 800a16a:	bdb0      	pop	{r4, r5, r7, pc}
 800a16c:	20000970 	.word	0x20000970
 800a170:	200000d8 	.word	0x200000d8
 800a174:	20000974 	.word	0x20000974
 800a178:	20000945 	.word	0x20000945

0800a17c <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 800a17c:	b5b0      	push	{r4, r5, r7, lr}
 800a17e:	b086      	sub	sp, #24
 800a180:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 800a182:	2300      	movs	r3, #0
 800a184:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 800a186:	f7ff fd3d 	bl	8009c04 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 800a18a:	4b1b      	ldr	r3, [pc, #108]	; (800a1f8 <send_DHCP_REQUEST+0x7c>)
 800a18c:	f993 3000 	ldrsb.w	r3, [r3]
 800a190:	2b03      	cmp	r3, #3
 800a192:	d004      	beq.n	800a19e <send_DHCP_REQUEST+0x22>
 800a194:	4b18      	ldr	r3, [pc, #96]	; (800a1f8 <send_DHCP_REQUEST+0x7c>)
 800a196:	f993 3000 	ldrsb.w	r3, [r3]
 800a19a:	2b04      	cmp	r3, #4
 800a19c:	d134      	bne.n	800a208 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 800a19e:	4b17      	ldr	r3, [pc, #92]	; (800a1fc <send_DHCP_REQUEST+0x80>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	330a      	adds	r3, #10
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 800a1a8:	4b14      	ldr	r3, [pc, #80]	; (800a1fc <send_DHCP_REQUEST+0x80>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	330a      	adds	r3, #10
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 800a1b4:	4b11      	ldr	r3, [pc, #68]	; (800a1fc <send_DHCP_REQUEST+0x80>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a11      	ldr	r2, [pc, #68]	; (800a200 <send_DHCP_REQUEST+0x84>)
 800a1ba:	7812      	ldrb	r2, [r2, #0]
 800a1bc:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 800a1be:	4b0f      	ldr	r3, [pc, #60]	; (800a1fc <send_DHCP_REQUEST+0x80>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a0f      	ldr	r2, [pc, #60]	; (800a200 <send_DHCP_REQUEST+0x84>)
 800a1c4:	7852      	ldrb	r2, [r2, #1]
 800a1c6:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 800a1c8:	4b0c      	ldr	r3, [pc, #48]	; (800a1fc <send_DHCP_REQUEST+0x80>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a0c      	ldr	r2, [pc, #48]	; (800a200 <send_DHCP_REQUEST+0x84>)
 800a1ce:	7892      	ldrb	r2, [r2, #2]
 800a1d0:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 800a1d2:	4b0a      	ldr	r3, [pc, #40]	; (800a1fc <send_DHCP_REQUEST+0x80>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a0a      	ldr	r2, [pc, #40]	; (800a200 <send_DHCP_REQUEST+0x84>)
 800a1d8:	78d2      	ldrb	r2, [r2, #3]
 800a1da:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 800a1dc:	4b09      	ldr	r3, [pc, #36]	; (800a204 <send_DHCP_REQUEST+0x88>)
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 800a1e2:	4b08      	ldr	r3, [pc, #32]	; (800a204 <send_DHCP_REQUEST+0x88>)
 800a1e4:	785b      	ldrb	r3, [r3, #1]
 800a1e6:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 800a1e8:	4b06      	ldr	r3, [pc, #24]	; (800a204 <send_DHCP_REQUEST+0x88>)
 800a1ea:	789b      	ldrb	r3, [r3, #2]
 800a1ec:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 800a1ee:	4b05      	ldr	r3, [pc, #20]	; (800a204 <send_DHCP_REQUEST+0x88>)
 800a1f0:	78db      	ldrb	r3, [r3, #3]
 800a1f2:	71fb      	strb	r3, [r7, #7]
 800a1f4:	e010      	b.n	800a218 <send_DHCP_REQUEST+0x9c>
 800a1f6:	bf00      	nop
 800a1f8:	20000964 	.word	0x20000964
 800a1fc:	20000970 	.word	0x20000970
 800a200:	20000954 	.word	0x20000954
 800a204:	20000948 	.word	0x20000948
   }
   else
   {
   	ip[0] = 255;
 800a208:	23ff      	movs	r3, #255	; 0xff
 800a20a:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 800a20c:	23ff      	movs	r3, #255	; 0xff
 800a20e:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 800a210:	23ff      	movs	r3, #255	; 0xff
 800a212:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 800a214:	23ff      	movs	r3, #255	; 0xff
 800a216:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 800a218:	2304      	movs	r3, #4
 800a21a:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800a21c:	4b8d      	ldr	r3, [pc, #564]	; (800a454 <send_DHCP_REQUEST+0x2d8>)
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	897b      	ldrh	r3, [r7, #10]
 800a222:	1c59      	adds	r1, r3, #1
 800a224:	8179      	strh	r1, [r7, #10]
 800a226:	4413      	add	r3, r2
 800a228:	2235      	movs	r2, #53	; 0x35
 800a22a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800a22e:	4b89      	ldr	r3, [pc, #548]	; (800a454 <send_DHCP_REQUEST+0x2d8>)
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	897b      	ldrh	r3, [r7, #10]
 800a234:	1c59      	adds	r1, r3, #1
 800a236:	8179      	strh	r1, [r7, #10]
 800a238:	4413      	add	r3, r2
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 800a240:	4b84      	ldr	r3, [pc, #528]	; (800a454 <send_DHCP_REQUEST+0x2d8>)
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	897b      	ldrh	r3, [r7, #10]
 800a246:	1c59      	adds	r1, r3, #1
 800a248:	8179      	strh	r1, [r7, #10]
 800a24a:	4413      	add	r3, r2
 800a24c:	2203      	movs	r2, #3
 800a24e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800a252:	4b80      	ldr	r3, [pc, #512]	; (800a454 <send_DHCP_REQUEST+0x2d8>)
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	897b      	ldrh	r3, [r7, #10]
 800a258:	1c59      	adds	r1, r3, #1
 800a25a:	8179      	strh	r1, [r7, #10]
 800a25c:	4413      	add	r3, r2
 800a25e:	223d      	movs	r2, #61	; 0x3d
 800a260:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 800a264:	4b7b      	ldr	r3, [pc, #492]	; (800a454 <send_DHCP_REQUEST+0x2d8>)
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	897b      	ldrh	r3, [r7, #10]
 800a26a:	1c59      	adds	r1, r3, #1
 800a26c:	8179      	strh	r1, [r7, #10]
 800a26e:	4413      	add	r3, r2
 800a270:	2207      	movs	r2, #7
 800a272:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800a276:	4b77      	ldr	r3, [pc, #476]	; (800a454 <send_DHCP_REQUEST+0x2d8>)
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	897b      	ldrh	r3, [r7, #10]
 800a27c:	1c59      	adds	r1, r3, #1
 800a27e:	8179      	strh	r1, [r7, #10]
 800a280:	4413      	add	r3, r2
 800a282:	2201      	movs	r2, #1
 800a284:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800a288:	4b72      	ldr	r3, [pc, #456]	; (800a454 <send_DHCP_REQUEST+0x2d8>)
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	897b      	ldrh	r3, [r7, #10]
 800a28e:	1c59      	adds	r1, r3, #1
 800a290:	8179      	strh	r1, [r7, #10]
 800a292:	4618      	mov	r0, r3
 800a294:	4b70      	ldr	r3, [pc, #448]	; (800a458 <send_DHCP_REQUEST+0x2dc>)
 800a296:	7819      	ldrb	r1, [r3, #0]
 800a298:	1813      	adds	r3, r2, r0
 800a29a:	460a      	mov	r2, r1
 800a29c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800a2a0:	4b6c      	ldr	r3, [pc, #432]	; (800a454 <send_DHCP_REQUEST+0x2d8>)
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	897b      	ldrh	r3, [r7, #10]
 800a2a6:	1c59      	adds	r1, r3, #1
 800a2a8:	8179      	strh	r1, [r7, #10]
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	4b6a      	ldr	r3, [pc, #424]	; (800a458 <send_DHCP_REQUEST+0x2dc>)
 800a2ae:	7859      	ldrb	r1, [r3, #1]
 800a2b0:	1813      	adds	r3, r2, r0
 800a2b2:	460a      	mov	r2, r1
 800a2b4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800a2b8:	4b66      	ldr	r3, [pc, #408]	; (800a454 <send_DHCP_REQUEST+0x2d8>)
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	897b      	ldrh	r3, [r7, #10]
 800a2be:	1c59      	adds	r1, r3, #1
 800a2c0:	8179      	strh	r1, [r7, #10]
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	4b64      	ldr	r3, [pc, #400]	; (800a458 <send_DHCP_REQUEST+0x2dc>)
 800a2c6:	7899      	ldrb	r1, [r3, #2]
 800a2c8:	1813      	adds	r3, r2, r0
 800a2ca:	460a      	mov	r2, r1
 800a2cc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800a2d0:	4b60      	ldr	r3, [pc, #384]	; (800a454 <send_DHCP_REQUEST+0x2d8>)
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	897b      	ldrh	r3, [r7, #10]
 800a2d6:	1c59      	adds	r1, r3, #1
 800a2d8:	8179      	strh	r1, [r7, #10]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	4b5e      	ldr	r3, [pc, #376]	; (800a458 <send_DHCP_REQUEST+0x2dc>)
 800a2de:	78d9      	ldrb	r1, [r3, #3]
 800a2e0:	1813      	adds	r3, r2, r0
 800a2e2:	460a      	mov	r2, r1
 800a2e4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800a2e8:	4b5a      	ldr	r3, [pc, #360]	; (800a454 <send_DHCP_REQUEST+0x2d8>)
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	897b      	ldrh	r3, [r7, #10]
 800a2ee:	1c59      	adds	r1, r3, #1
 800a2f0:	8179      	strh	r1, [r7, #10]
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	4b58      	ldr	r3, [pc, #352]	; (800a458 <send_DHCP_REQUEST+0x2dc>)
 800a2f6:	7919      	ldrb	r1, [r3, #4]
 800a2f8:	1813      	adds	r3, r2, r0
 800a2fa:	460a      	mov	r2, r1
 800a2fc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800a300:	4b54      	ldr	r3, [pc, #336]	; (800a454 <send_DHCP_REQUEST+0x2d8>)
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	897b      	ldrh	r3, [r7, #10]
 800a306:	1c59      	adds	r1, r3, #1
 800a308:	8179      	strh	r1, [r7, #10]
 800a30a:	4618      	mov	r0, r3
 800a30c:	4b52      	ldr	r3, [pc, #328]	; (800a458 <send_DHCP_REQUEST+0x2dc>)
 800a30e:	7959      	ldrb	r1, [r3, #5]
 800a310:	1813      	adds	r3, r2, r0
 800a312:	460a      	mov	r2, r1
 800a314:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 800a318:	79fb      	ldrb	r3, [r7, #7]
 800a31a:	2bff      	cmp	r3, #255	; 0xff
 800a31c:	f040 8084 	bne.w	800a428 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 800a320:	4b4c      	ldr	r3, [pc, #304]	; (800a454 <send_DHCP_REQUEST+0x2d8>)
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	897b      	ldrh	r3, [r7, #10]
 800a326:	1c59      	adds	r1, r3, #1
 800a328:	8179      	strh	r1, [r7, #10]
 800a32a:	4413      	add	r3, r2
 800a32c:	2232      	movs	r2, #50	; 0x32
 800a32e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 800a332:	4b48      	ldr	r3, [pc, #288]	; (800a454 <send_DHCP_REQUEST+0x2d8>)
 800a334:	681a      	ldr	r2, [r3, #0]
 800a336:	897b      	ldrh	r3, [r7, #10]
 800a338:	1c59      	adds	r1, r3, #1
 800a33a:	8179      	strh	r1, [r7, #10]
 800a33c:	4413      	add	r3, r2
 800a33e:	2204      	movs	r2, #4
 800a340:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 800a344:	4b43      	ldr	r3, [pc, #268]	; (800a454 <send_DHCP_REQUEST+0x2d8>)
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	897b      	ldrh	r3, [r7, #10]
 800a34a:	1c59      	adds	r1, r3, #1
 800a34c:	8179      	strh	r1, [r7, #10]
 800a34e:	4618      	mov	r0, r3
 800a350:	4b42      	ldr	r3, [pc, #264]	; (800a45c <send_DHCP_REQUEST+0x2e0>)
 800a352:	7819      	ldrb	r1, [r3, #0]
 800a354:	1813      	adds	r3, r2, r0
 800a356:	460a      	mov	r2, r1
 800a358:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 800a35c:	4b3d      	ldr	r3, [pc, #244]	; (800a454 <send_DHCP_REQUEST+0x2d8>)
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	897b      	ldrh	r3, [r7, #10]
 800a362:	1c59      	adds	r1, r3, #1
 800a364:	8179      	strh	r1, [r7, #10]
 800a366:	4618      	mov	r0, r3
 800a368:	4b3c      	ldr	r3, [pc, #240]	; (800a45c <send_DHCP_REQUEST+0x2e0>)
 800a36a:	7859      	ldrb	r1, [r3, #1]
 800a36c:	1813      	adds	r3, r2, r0
 800a36e:	460a      	mov	r2, r1
 800a370:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 800a374:	4b37      	ldr	r3, [pc, #220]	; (800a454 <send_DHCP_REQUEST+0x2d8>)
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	897b      	ldrh	r3, [r7, #10]
 800a37a:	1c59      	adds	r1, r3, #1
 800a37c:	8179      	strh	r1, [r7, #10]
 800a37e:	4618      	mov	r0, r3
 800a380:	4b36      	ldr	r3, [pc, #216]	; (800a45c <send_DHCP_REQUEST+0x2e0>)
 800a382:	7899      	ldrb	r1, [r3, #2]
 800a384:	1813      	adds	r3, r2, r0
 800a386:	460a      	mov	r2, r1
 800a388:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 800a38c:	4b31      	ldr	r3, [pc, #196]	; (800a454 <send_DHCP_REQUEST+0x2d8>)
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	897b      	ldrh	r3, [r7, #10]
 800a392:	1c59      	adds	r1, r3, #1
 800a394:	8179      	strh	r1, [r7, #10]
 800a396:	4618      	mov	r0, r3
 800a398:	4b30      	ldr	r3, [pc, #192]	; (800a45c <send_DHCP_REQUEST+0x2e0>)
 800a39a:	78d9      	ldrb	r1, [r3, #3]
 800a39c:	1813      	adds	r3, r2, r0
 800a39e:	460a      	mov	r2, r1
 800a3a0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 800a3a4:	4b2b      	ldr	r3, [pc, #172]	; (800a454 <send_DHCP_REQUEST+0x2d8>)
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	897b      	ldrh	r3, [r7, #10]
 800a3aa:	1c59      	adds	r1, r3, #1
 800a3ac:	8179      	strh	r1, [r7, #10]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	2236      	movs	r2, #54	; 0x36
 800a3b2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 800a3b6:	4b27      	ldr	r3, [pc, #156]	; (800a454 <send_DHCP_REQUEST+0x2d8>)
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	897b      	ldrh	r3, [r7, #10]
 800a3bc:	1c59      	adds	r1, r3, #1
 800a3be:	8179      	strh	r1, [r7, #10]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	2204      	movs	r2, #4
 800a3c4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 800a3c8:	4b22      	ldr	r3, [pc, #136]	; (800a454 <send_DHCP_REQUEST+0x2d8>)
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	897b      	ldrh	r3, [r7, #10]
 800a3ce:	1c59      	adds	r1, r3, #1
 800a3d0:	8179      	strh	r1, [r7, #10]
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	4b22      	ldr	r3, [pc, #136]	; (800a460 <send_DHCP_REQUEST+0x2e4>)
 800a3d6:	7819      	ldrb	r1, [r3, #0]
 800a3d8:	1813      	adds	r3, r2, r0
 800a3da:	460a      	mov	r2, r1
 800a3dc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 800a3e0:	4b1c      	ldr	r3, [pc, #112]	; (800a454 <send_DHCP_REQUEST+0x2d8>)
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	897b      	ldrh	r3, [r7, #10]
 800a3e6:	1c59      	adds	r1, r3, #1
 800a3e8:	8179      	strh	r1, [r7, #10]
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	4b1c      	ldr	r3, [pc, #112]	; (800a460 <send_DHCP_REQUEST+0x2e4>)
 800a3ee:	7859      	ldrb	r1, [r3, #1]
 800a3f0:	1813      	adds	r3, r2, r0
 800a3f2:	460a      	mov	r2, r1
 800a3f4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 800a3f8:	4b16      	ldr	r3, [pc, #88]	; (800a454 <send_DHCP_REQUEST+0x2d8>)
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	897b      	ldrh	r3, [r7, #10]
 800a3fe:	1c59      	adds	r1, r3, #1
 800a400:	8179      	strh	r1, [r7, #10]
 800a402:	4618      	mov	r0, r3
 800a404:	4b16      	ldr	r3, [pc, #88]	; (800a460 <send_DHCP_REQUEST+0x2e4>)
 800a406:	7899      	ldrb	r1, [r3, #2]
 800a408:	1813      	adds	r3, r2, r0
 800a40a:	460a      	mov	r2, r1
 800a40c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 800a410:	4b10      	ldr	r3, [pc, #64]	; (800a454 <send_DHCP_REQUEST+0x2d8>)
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	897b      	ldrh	r3, [r7, #10]
 800a416:	1c59      	adds	r1, r3, #1
 800a418:	8179      	strh	r1, [r7, #10]
 800a41a:	4618      	mov	r0, r3
 800a41c:	4b10      	ldr	r3, [pc, #64]	; (800a460 <send_DHCP_REQUEST+0x2e4>)
 800a41e:	78d9      	ldrb	r1, [r3, #3]
 800a420:	1813      	adds	r3, r2, r0
 800a422:	460a      	mov	r2, r1
 800a424:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 800a428:	4b0a      	ldr	r3, [pc, #40]	; (800a454 <send_DHCP_REQUEST+0x2d8>)
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	897b      	ldrh	r3, [r7, #10]
 800a42e:	1c59      	adds	r1, r3, #1
 800a430:	8179      	strh	r1, [r7, #10]
 800a432:	4413      	add	r3, r2
 800a434:	220c      	movs	r2, #12
 800a436:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 800a43a:	4b06      	ldr	r3, [pc, #24]	; (800a454 <send_DHCP_REQUEST+0x2d8>)
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	897b      	ldrh	r3, [r7, #10]
 800a440:	1c59      	adds	r1, r3, #1
 800a442:	8179      	strh	r1, [r7, #10]
 800a444:	4413      	add	r3, r2
 800a446:	2200      	movs	r2, #0
 800a448:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800a44c:	2300      	movs	r3, #0
 800a44e:	60fb      	str	r3, [r7, #12]
 800a450:	e019      	b.n	800a486 <send_DHCP_REQUEST+0x30a>
 800a452:	bf00      	nop
 800a454:	20000970 	.word	0x20000970
 800a458:	20000974 	.word	0x20000974
 800a45c:	20000954 	.word	0x20000954
 800a460:	20000948 	.word	0x20000948
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 800a464:	4b86      	ldr	r3, [pc, #536]	; (800a680 <send_DHCP_REQUEST+0x504>)
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	897b      	ldrh	r3, [r7, #10]
 800a46a:	1c59      	adds	r1, r3, #1
 800a46c:	8179      	strh	r1, [r7, #10]
 800a46e:	4618      	mov	r0, r3
 800a470:	4984      	ldr	r1, [pc, #528]	; (800a684 <send_DHCP_REQUEST+0x508>)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	440b      	add	r3, r1
 800a476:	7819      	ldrb	r1, [r3, #0]
 800a478:	1813      	adds	r3, r2, r0
 800a47a:	460a      	mov	r2, r1
 800a47c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	3301      	adds	r3, #1
 800a484:	60fb      	str	r3, [r7, #12]
 800a486:	4a7f      	ldr	r2, [pc, #508]	; (800a684 <send_DHCP_REQUEST+0x508>)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	4413      	add	r3, r2
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d1e8      	bne.n	800a464 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 800a492:	4b7d      	ldr	r3, [pc, #500]	; (800a688 <send_DHCP_REQUEST+0x50c>)
 800a494:	78db      	ldrb	r3, [r3, #3]
 800a496:	091b      	lsrs	r3, r3, #4
 800a498:	b2da      	uxtb	r2, r3
 800a49a:	4b79      	ldr	r3, [pc, #484]	; (800a680 <send_DHCP_REQUEST+0x504>)
 800a49c:	681c      	ldr	r4, [r3, #0]
 800a49e:	897b      	ldrh	r3, [r7, #10]
 800a4a0:	1c59      	adds	r1, r3, #1
 800a4a2:	8179      	strh	r1, [r7, #10]
 800a4a4:	461d      	mov	r5, r3
 800a4a6:	4610      	mov	r0, r2
 800a4a8:	f000 ff64 	bl	800b374 <NibbleToHex>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	1963      	adds	r3, r4, r5
 800a4b2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800a4b6:	4b74      	ldr	r3, [pc, #464]	; (800a688 <send_DHCP_REQUEST+0x50c>)
 800a4b8:	78da      	ldrb	r2, [r3, #3]
 800a4ba:	4b71      	ldr	r3, [pc, #452]	; (800a680 <send_DHCP_REQUEST+0x504>)
 800a4bc:	681c      	ldr	r4, [r3, #0]
 800a4be:	897b      	ldrh	r3, [r7, #10]
 800a4c0:	1c59      	adds	r1, r3, #1
 800a4c2:	8179      	strh	r1, [r7, #10]
 800a4c4:	461d      	mov	r5, r3
 800a4c6:	4610      	mov	r0, r2
 800a4c8:	f000 ff54 	bl	800b374 <NibbleToHex>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	1963      	adds	r3, r4, r5
 800a4d2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 800a4d6:	4b6c      	ldr	r3, [pc, #432]	; (800a688 <send_DHCP_REQUEST+0x50c>)
 800a4d8:	791b      	ldrb	r3, [r3, #4]
 800a4da:	091b      	lsrs	r3, r3, #4
 800a4dc:	b2da      	uxtb	r2, r3
 800a4de:	4b68      	ldr	r3, [pc, #416]	; (800a680 <send_DHCP_REQUEST+0x504>)
 800a4e0:	681c      	ldr	r4, [r3, #0]
 800a4e2:	897b      	ldrh	r3, [r7, #10]
 800a4e4:	1c59      	adds	r1, r3, #1
 800a4e6:	8179      	strh	r1, [r7, #10]
 800a4e8:	461d      	mov	r5, r3
 800a4ea:	4610      	mov	r0, r2
 800a4ec:	f000 ff42 	bl	800b374 <NibbleToHex>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	1963      	adds	r3, r4, r5
 800a4f6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 800a4fa:	4b63      	ldr	r3, [pc, #396]	; (800a688 <send_DHCP_REQUEST+0x50c>)
 800a4fc:	791a      	ldrb	r2, [r3, #4]
 800a4fe:	4b60      	ldr	r3, [pc, #384]	; (800a680 <send_DHCP_REQUEST+0x504>)
 800a500:	681c      	ldr	r4, [r3, #0]
 800a502:	897b      	ldrh	r3, [r7, #10]
 800a504:	1c59      	adds	r1, r3, #1
 800a506:	8179      	strh	r1, [r7, #10]
 800a508:	461d      	mov	r5, r3
 800a50a:	4610      	mov	r0, r2
 800a50c:	f000 ff32 	bl	800b374 <NibbleToHex>
 800a510:	4603      	mov	r3, r0
 800a512:	461a      	mov	r2, r3
 800a514:	1963      	adds	r3, r4, r5
 800a516:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 800a51a:	4b5b      	ldr	r3, [pc, #364]	; (800a688 <send_DHCP_REQUEST+0x50c>)
 800a51c:	795b      	ldrb	r3, [r3, #5]
 800a51e:	091b      	lsrs	r3, r3, #4
 800a520:	b2da      	uxtb	r2, r3
 800a522:	4b57      	ldr	r3, [pc, #348]	; (800a680 <send_DHCP_REQUEST+0x504>)
 800a524:	681c      	ldr	r4, [r3, #0]
 800a526:	897b      	ldrh	r3, [r7, #10]
 800a528:	1c59      	adds	r1, r3, #1
 800a52a:	8179      	strh	r1, [r7, #10]
 800a52c:	461d      	mov	r5, r3
 800a52e:	4610      	mov	r0, r2
 800a530:	f000 ff20 	bl	800b374 <NibbleToHex>
 800a534:	4603      	mov	r3, r0
 800a536:	461a      	mov	r2, r3
 800a538:	1963      	adds	r3, r4, r5
 800a53a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 800a53e:	4b52      	ldr	r3, [pc, #328]	; (800a688 <send_DHCP_REQUEST+0x50c>)
 800a540:	795a      	ldrb	r2, [r3, #5]
 800a542:	4b4f      	ldr	r3, [pc, #316]	; (800a680 <send_DHCP_REQUEST+0x504>)
 800a544:	681c      	ldr	r4, [r3, #0]
 800a546:	897b      	ldrh	r3, [r7, #10]
 800a548:	1c59      	adds	r1, r3, #1
 800a54a:	8179      	strh	r1, [r7, #10]
 800a54c:	461d      	mov	r5, r3
 800a54e:	4610      	mov	r0, r2
 800a550:	f000 ff10 	bl	800b374 <NibbleToHex>
 800a554:	4603      	mov	r3, r0
 800a556:	461a      	mov	r2, r3
 800a558:	1963      	adds	r3, r4, r5
 800a55a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	b2d9      	uxtb	r1, r3
 800a562:	4b47      	ldr	r3, [pc, #284]	; (800a680 <send_DHCP_REQUEST+0x504>)
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	8978      	ldrh	r0, [r7, #10]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	3307      	adds	r3, #7
 800a56c:	1ac3      	subs	r3, r0, r3
 800a56e:	3106      	adds	r1, #6
 800a570:	b2c9      	uxtb	r1, r1
 800a572:	4413      	add	r3, r2
 800a574:	460a      	mov	r2, r1
 800a576:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800a57a:	4b41      	ldr	r3, [pc, #260]	; (800a680 <send_DHCP_REQUEST+0x504>)
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	897b      	ldrh	r3, [r7, #10]
 800a580:	1c59      	adds	r1, r3, #1
 800a582:	8179      	strh	r1, [r7, #10]
 800a584:	4413      	add	r3, r2
 800a586:	2237      	movs	r2, #55	; 0x37
 800a588:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 800a58c:	4b3c      	ldr	r3, [pc, #240]	; (800a680 <send_DHCP_REQUEST+0x504>)
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	897b      	ldrh	r3, [r7, #10]
 800a592:	1c59      	adds	r1, r3, #1
 800a594:	8179      	strh	r1, [r7, #10]
 800a596:	4413      	add	r3, r2
 800a598:	2208      	movs	r2, #8
 800a59a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 800a59e:	4b38      	ldr	r3, [pc, #224]	; (800a680 <send_DHCP_REQUEST+0x504>)
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	897b      	ldrh	r3, [r7, #10]
 800a5a4:	1c59      	adds	r1, r3, #1
 800a5a6:	8179      	strh	r1, [r7, #10]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 800a5b0:	4b33      	ldr	r3, [pc, #204]	; (800a680 <send_DHCP_REQUEST+0x504>)
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	897b      	ldrh	r3, [r7, #10]
 800a5b6:	1c59      	adds	r1, r3, #1
 800a5b8:	8179      	strh	r1, [r7, #10]
 800a5ba:	4413      	add	r3, r2
 800a5bc:	2203      	movs	r2, #3
 800a5be:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 800a5c2:	4b2f      	ldr	r3, [pc, #188]	; (800a680 <send_DHCP_REQUEST+0x504>)
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	897b      	ldrh	r3, [r7, #10]
 800a5c8:	1c59      	adds	r1, r3, #1
 800a5ca:	8179      	strh	r1, [r7, #10]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	2206      	movs	r2, #6
 800a5d0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 800a5d4:	4b2a      	ldr	r3, [pc, #168]	; (800a680 <send_DHCP_REQUEST+0x504>)
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	897b      	ldrh	r3, [r7, #10]
 800a5da:	1c59      	adds	r1, r3, #1
 800a5dc:	8179      	strh	r1, [r7, #10]
 800a5de:	4413      	add	r3, r2
 800a5e0:	220f      	movs	r2, #15
 800a5e2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 800a5e6:	4b26      	ldr	r3, [pc, #152]	; (800a680 <send_DHCP_REQUEST+0x504>)
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	897b      	ldrh	r3, [r7, #10]
 800a5ec:	1c59      	adds	r1, r3, #1
 800a5ee:	8179      	strh	r1, [r7, #10]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	223a      	movs	r2, #58	; 0x3a
 800a5f4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 800a5f8:	4b21      	ldr	r3, [pc, #132]	; (800a680 <send_DHCP_REQUEST+0x504>)
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	897b      	ldrh	r3, [r7, #10]
 800a5fe:	1c59      	adds	r1, r3, #1
 800a600:	8179      	strh	r1, [r7, #10]
 800a602:	4413      	add	r3, r2
 800a604:	223b      	movs	r2, #59	; 0x3b
 800a606:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 800a60a:	4b1d      	ldr	r3, [pc, #116]	; (800a680 <send_DHCP_REQUEST+0x504>)
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	897b      	ldrh	r3, [r7, #10]
 800a610:	1c59      	adds	r1, r3, #1
 800a612:	8179      	strh	r1, [r7, #10]
 800a614:	4413      	add	r3, r2
 800a616:	221f      	movs	r2, #31
 800a618:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 800a61c:	4b18      	ldr	r3, [pc, #96]	; (800a680 <send_DHCP_REQUEST+0x504>)
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	897b      	ldrh	r3, [r7, #10]
 800a622:	1c59      	adds	r1, r3, #1
 800a624:	8179      	strh	r1, [r7, #10]
 800a626:	4413      	add	r3, r2
 800a628:	2221      	movs	r2, #33	; 0x21
 800a62a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 800a62e:	4b14      	ldr	r3, [pc, #80]	; (800a680 <send_DHCP_REQUEST+0x504>)
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	897b      	ldrh	r3, [r7, #10]
 800a634:	1c59      	adds	r1, r3, #1
 800a636:	8179      	strh	r1, [r7, #10]
 800a638:	4413      	add	r3, r2
 800a63a:	22ff      	movs	r2, #255	; 0xff
 800a63c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 800a640:	897b      	ldrh	r3, [r7, #10]
 800a642:	60fb      	str	r3, [r7, #12]
 800a644:	e009      	b.n	800a65a <send_DHCP_REQUEST+0x4de>
 800a646:	4b0e      	ldr	r3, [pc, #56]	; (800a680 <send_DHCP_REQUEST+0x504>)
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	4413      	add	r3, r2
 800a64e:	33ec      	adds	r3, #236	; 0xec
 800a650:	2200      	movs	r2, #0
 800a652:	701a      	strb	r2, [r3, #0]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	3301      	adds	r3, #1
 800a658:	60fb      	str	r3, [r7, #12]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 800a660:	dbf1      	blt.n	800a646 <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800a662:	4b0a      	ldr	r3, [pc, #40]	; (800a68c <send_DHCP_REQUEST+0x510>)
 800a664:	7818      	ldrb	r0, [r3, #0]
 800a666:	4b06      	ldr	r3, [pc, #24]	; (800a680 <send_DHCP_REQUEST+0x504>)
 800a668:	6819      	ldr	r1, [r3, #0]
 800a66a:	1d3b      	adds	r3, r7, #4
 800a66c:	2243      	movs	r2, #67	; 0x43
 800a66e:	9200      	str	r2, [sp, #0]
 800a670:	f44f 7209 	mov.w	r2, #548	; 0x224
 800a674:	f7fe f972 	bl	800895c <sendto>

}
 800a678:	bf00      	nop
 800a67a:	3710      	adds	r7, #16
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bdb0      	pop	{r4, r5, r7, pc}
 800a680:	20000970 	.word	0x20000970
 800a684:	200000d8 	.word	0x200000d8
 800a688:	20000974 	.word	0x20000974
 800a68c:	20000945 	.word	0x20000945

0800a690 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b086      	sub	sp, #24
 800a694:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 800a696:	2300      	movs	r3, #0
 800a698:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 800a69a:	f7ff fab3 	bl	8009c04 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 800a69e:	2304      	movs	r3, #4
 800a6a0:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 800a6a2:	4b9f      	ldr	r3, [pc, #636]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	330a      	adds	r3, #10
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 800a6ac:	4b9c      	ldr	r3, [pc, #624]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	330a      	adds	r3, #10
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800a6b8:	4b99      	ldr	r3, [pc, #612]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	897b      	ldrh	r3, [r7, #10]
 800a6be:	1c59      	adds	r1, r3, #1
 800a6c0:	8179      	strh	r1, [r7, #10]
 800a6c2:	4413      	add	r3, r2
 800a6c4:	2235      	movs	r2, #53	; 0x35
 800a6c6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800a6ca:	4b95      	ldr	r3, [pc, #596]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	897b      	ldrh	r3, [r7, #10]
 800a6d0:	1c59      	adds	r1, r3, #1
 800a6d2:	8179      	strh	r1, [r7, #10]
 800a6d4:	4413      	add	r3, r2
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 800a6dc:	4b90      	ldr	r3, [pc, #576]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	897b      	ldrh	r3, [r7, #10]
 800a6e2:	1c59      	adds	r1, r3, #1
 800a6e4:	8179      	strh	r1, [r7, #10]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	2204      	movs	r2, #4
 800a6ea:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800a6ee:	4b8c      	ldr	r3, [pc, #560]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a6f0:	681a      	ldr	r2, [r3, #0]
 800a6f2:	897b      	ldrh	r3, [r7, #10]
 800a6f4:	1c59      	adds	r1, r3, #1
 800a6f6:	8179      	strh	r1, [r7, #10]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	223d      	movs	r2, #61	; 0x3d
 800a6fc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 800a700:	4b87      	ldr	r3, [pc, #540]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	897b      	ldrh	r3, [r7, #10]
 800a706:	1c59      	adds	r1, r3, #1
 800a708:	8179      	strh	r1, [r7, #10]
 800a70a:	4413      	add	r3, r2
 800a70c:	2207      	movs	r2, #7
 800a70e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800a712:	4b83      	ldr	r3, [pc, #524]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	897b      	ldrh	r3, [r7, #10]
 800a718:	1c59      	adds	r1, r3, #1
 800a71a:	8179      	strh	r1, [r7, #10]
 800a71c:	4413      	add	r3, r2
 800a71e:	2201      	movs	r2, #1
 800a720:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800a724:	4b7e      	ldr	r3, [pc, #504]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	897b      	ldrh	r3, [r7, #10]
 800a72a:	1c59      	adds	r1, r3, #1
 800a72c:	8179      	strh	r1, [r7, #10]
 800a72e:	4618      	mov	r0, r3
 800a730:	4b7c      	ldr	r3, [pc, #496]	; (800a924 <send_DHCP_DECLINE+0x294>)
 800a732:	7819      	ldrb	r1, [r3, #0]
 800a734:	1813      	adds	r3, r2, r0
 800a736:	460a      	mov	r2, r1
 800a738:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800a73c:	4b78      	ldr	r3, [pc, #480]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	897b      	ldrh	r3, [r7, #10]
 800a742:	1c59      	adds	r1, r3, #1
 800a744:	8179      	strh	r1, [r7, #10]
 800a746:	4618      	mov	r0, r3
 800a748:	4b76      	ldr	r3, [pc, #472]	; (800a924 <send_DHCP_DECLINE+0x294>)
 800a74a:	7859      	ldrb	r1, [r3, #1]
 800a74c:	1813      	adds	r3, r2, r0
 800a74e:	460a      	mov	r2, r1
 800a750:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800a754:	4b72      	ldr	r3, [pc, #456]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	897b      	ldrh	r3, [r7, #10]
 800a75a:	1c59      	adds	r1, r3, #1
 800a75c:	8179      	strh	r1, [r7, #10]
 800a75e:	4618      	mov	r0, r3
 800a760:	4b70      	ldr	r3, [pc, #448]	; (800a924 <send_DHCP_DECLINE+0x294>)
 800a762:	7899      	ldrb	r1, [r3, #2]
 800a764:	1813      	adds	r3, r2, r0
 800a766:	460a      	mov	r2, r1
 800a768:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800a76c:	4b6c      	ldr	r3, [pc, #432]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	897b      	ldrh	r3, [r7, #10]
 800a772:	1c59      	adds	r1, r3, #1
 800a774:	8179      	strh	r1, [r7, #10]
 800a776:	4618      	mov	r0, r3
 800a778:	4b6a      	ldr	r3, [pc, #424]	; (800a924 <send_DHCP_DECLINE+0x294>)
 800a77a:	78d9      	ldrb	r1, [r3, #3]
 800a77c:	1813      	adds	r3, r2, r0
 800a77e:	460a      	mov	r2, r1
 800a780:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800a784:	4b66      	ldr	r3, [pc, #408]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	897b      	ldrh	r3, [r7, #10]
 800a78a:	1c59      	adds	r1, r3, #1
 800a78c:	8179      	strh	r1, [r7, #10]
 800a78e:	4618      	mov	r0, r3
 800a790:	4b64      	ldr	r3, [pc, #400]	; (800a924 <send_DHCP_DECLINE+0x294>)
 800a792:	7919      	ldrb	r1, [r3, #4]
 800a794:	1813      	adds	r3, r2, r0
 800a796:	460a      	mov	r2, r1
 800a798:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800a79c:	4b60      	ldr	r3, [pc, #384]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	897b      	ldrh	r3, [r7, #10]
 800a7a2:	1c59      	adds	r1, r3, #1
 800a7a4:	8179      	strh	r1, [r7, #10]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	4b5e      	ldr	r3, [pc, #376]	; (800a924 <send_DHCP_DECLINE+0x294>)
 800a7aa:	7959      	ldrb	r1, [r3, #5]
 800a7ac:	1813      	adds	r3, r2, r0
 800a7ae:	460a      	mov	r2, r1
 800a7b0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 800a7b4:	4b5a      	ldr	r3, [pc, #360]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	897b      	ldrh	r3, [r7, #10]
 800a7ba:	1c59      	adds	r1, r3, #1
 800a7bc:	8179      	strh	r1, [r7, #10]
 800a7be:	4413      	add	r3, r2
 800a7c0:	2232      	movs	r2, #50	; 0x32
 800a7c2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 800a7c6:	4b56      	ldr	r3, [pc, #344]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	897b      	ldrh	r3, [r7, #10]
 800a7cc:	1c59      	adds	r1, r3, #1
 800a7ce:	8179      	strh	r1, [r7, #10]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	2204      	movs	r2, #4
 800a7d4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 800a7d8:	4b51      	ldr	r3, [pc, #324]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	897b      	ldrh	r3, [r7, #10]
 800a7de:	1c59      	adds	r1, r3, #1
 800a7e0:	8179      	strh	r1, [r7, #10]
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	4b50      	ldr	r3, [pc, #320]	; (800a928 <send_DHCP_DECLINE+0x298>)
 800a7e6:	7819      	ldrb	r1, [r3, #0]
 800a7e8:	1813      	adds	r3, r2, r0
 800a7ea:	460a      	mov	r2, r1
 800a7ec:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 800a7f0:	4b4b      	ldr	r3, [pc, #300]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	897b      	ldrh	r3, [r7, #10]
 800a7f6:	1c59      	adds	r1, r3, #1
 800a7f8:	8179      	strh	r1, [r7, #10]
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	4b4a      	ldr	r3, [pc, #296]	; (800a928 <send_DHCP_DECLINE+0x298>)
 800a7fe:	7859      	ldrb	r1, [r3, #1]
 800a800:	1813      	adds	r3, r2, r0
 800a802:	460a      	mov	r2, r1
 800a804:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 800a808:	4b45      	ldr	r3, [pc, #276]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	897b      	ldrh	r3, [r7, #10]
 800a80e:	1c59      	adds	r1, r3, #1
 800a810:	8179      	strh	r1, [r7, #10]
 800a812:	4618      	mov	r0, r3
 800a814:	4b44      	ldr	r3, [pc, #272]	; (800a928 <send_DHCP_DECLINE+0x298>)
 800a816:	7899      	ldrb	r1, [r3, #2]
 800a818:	1813      	adds	r3, r2, r0
 800a81a:	460a      	mov	r2, r1
 800a81c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 800a820:	4b3f      	ldr	r3, [pc, #252]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	897b      	ldrh	r3, [r7, #10]
 800a826:	1c59      	adds	r1, r3, #1
 800a828:	8179      	strh	r1, [r7, #10]
 800a82a:	4618      	mov	r0, r3
 800a82c:	4b3e      	ldr	r3, [pc, #248]	; (800a928 <send_DHCP_DECLINE+0x298>)
 800a82e:	78d9      	ldrb	r1, [r3, #3]
 800a830:	1813      	adds	r3, r2, r0
 800a832:	460a      	mov	r2, r1
 800a834:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 800a838:	4b39      	ldr	r3, [pc, #228]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	897b      	ldrh	r3, [r7, #10]
 800a83e:	1c59      	adds	r1, r3, #1
 800a840:	8179      	strh	r1, [r7, #10]
 800a842:	4413      	add	r3, r2
 800a844:	2236      	movs	r2, #54	; 0x36
 800a846:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 800a84a:	4b35      	ldr	r3, [pc, #212]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	897b      	ldrh	r3, [r7, #10]
 800a850:	1c59      	adds	r1, r3, #1
 800a852:	8179      	strh	r1, [r7, #10]
 800a854:	4413      	add	r3, r2
 800a856:	2204      	movs	r2, #4
 800a858:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 800a85c:	4b30      	ldr	r3, [pc, #192]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	897b      	ldrh	r3, [r7, #10]
 800a862:	1c59      	adds	r1, r3, #1
 800a864:	8179      	strh	r1, [r7, #10]
 800a866:	4618      	mov	r0, r3
 800a868:	4b30      	ldr	r3, [pc, #192]	; (800a92c <send_DHCP_DECLINE+0x29c>)
 800a86a:	7819      	ldrb	r1, [r3, #0]
 800a86c:	1813      	adds	r3, r2, r0
 800a86e:	460a      	mov	r2, r1
 800a870:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 800a874:	4b2a      	ldr	r3, [pc, #168]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	897b      	ldrh	r3, [r7, #10]
 800a87a:	1c59      	adds	r1, r3, #1
 800a87c:	8179      	strh	r1, [r7, #10]
 800a87e:	4618      	mov	r0, r3
 800a880:	4b2a      	ldr	r3, [pc, #168]	; (800a92c <send_DHCP_DECLINE+0x29c>)
 800a882:	7859      	ldrb	r1, [r3, #1]
 800a884:	1813      	adds	r3, r2, r0
 800a886:	460a      	mov	r2, r1
 800a888:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 800a88c:	4b24      	ldr	r3, [pc, #144]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	897b      	ldrh	r3, [r7, #10]
 800a892:	1c59      	adds	r1, r3, #1
 800a894:	8179      	strh	r1, [r7, #10]
 800a896:	4618      	mov	r0, r3
 800a898:	4b24      	ldr	r3, [pc, #144]	; (800a92c <send_DHCP_DECLINE+0x29c>)
 800a89a:	7899      	ldrb	r1, [r3, #2]
 800a89c:	1813      	adds	r3, r2, r0
 800a89e:	460a      	mov	r2, r1
 800a8a0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 800a8a4:	4b1e      	ldr	r3, [pc, #120]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	897b      	ldrh	r3, [r7, #10]
 800a8aa:	1c59      	adds	r1, r3, #1
 800a8ac:	8179      	strh	r1, [r7, #10]
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	4b1e      	ldr	r3, [pc, #120]	; (800a92c <send_DHCP_DECLINE+0x29c>)
 800a8b2:	78d9      	ldrb	r1, [r3, #3]
 800a8b4:	1813      	adds	r3, r2, r0
 800a8b6:	460a      	mov	r2, r1
 800a8b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 800a8bc:	4b18      	ldr	r3, [pc, #96]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	897b      	ldrh	r3, [r7, #10]
 800a8c2:	1c59      	adds	r1, r3, #1
 800a8c4:	8179      	strh	r1, [r7, #10]
 800a8c6:	4413      	add	r3, r2
 800a8c8:	22ff      	movs	r2, #255	; 0xff
 800a8ca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 800a8ce:	897b      	ldrh	r3, [r7, #10]
 800a8d0:	60fb      	str	r3, [r7, #12]
 800a8d2:	e009      	b.n	800a8e8 <send_DHCP_DECLINE+0x258>
 800a8d4:	4b12      	ldr	r3, [pc, #72]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	4413      	add	r3, r2
 800a8dc:	33ec      	adds	r3, #236	; 0xec
 800a8de:	2200      	movs	r2, #0
 800a8e0:	701a      	strb	r2, [r3, #0]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	60fb      	str	r3, [r7, #12]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 800a8ee:	dbf1      	blt.n	800a8d4 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 800a8f0:	23ff      	movs	r3, #255	; 0xff
 800a8f2:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 800a8f4:	23ff      	movs	r3, #255	; 0xff
 800a8f6:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 800a8f8:	23ff      	movs	r3, #255	; 0xff
 800a8fa:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 800a8fc:	23ff      	movs	r3, #255	; 0xff
 800a8fe:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800a900:	4b0b      	ldr	r3, [pc, #44]	; (800a930 <send_DHCP_DECLINE+0x2a0>)
 800a902:	7818      	ldrb	r0, [r3, #0]
 800a904:	4b06      	ldr	r3, [pc, #24]	; (800a920 <send_DHCP_DECLINE+0x290>)
 800a906:	6819      	ldr	r1, [r3, #0]
 800a908:	1d3b      	adds	r3, r7, #4
 800a90a:	2243      	movs	r2, #67	; 0x43
 800a90c:	9200      	str	r2, [sp, #0]
 800a90e:	f44f 7209 	mov.w	r2, #548	; 0x224
 800a912:	f7fe f823 	bl	800895c <sendto>
}
 800a916:	bf00      	nop
 800a918:	3710      	adds	r7, #16
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	20000970 	.word	0x20000970
 800a924:	20000974 	.word	0x20000974
 800a928:	20000954 	.word	0x20000954
 800a92c:	20000948 	.word	0x20000948
 800a930:	20000945 	.word	0x20000945

0800a934 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 800a934:	b590      	push	{r4, r7, lr}
 800a936:	b089      	sub	sp, #36	; 0x24
 800a938:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 800a93a:	2300      	movs	r3, #0
 800a93c:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 800a93e:	4ba1      	ldr	r3, [pc, #644]	; (800abc4 <parseDHCPMSG+0x290>)
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	4618      	mov	r0, r3
 800a944:	f7fd f9e1 	bl	8007d0a <getSn_RX_RSR>
 800a948:	4603      	mov	r3, r0
 800a94a:	823b      	strh	r3, [r7, #16]
 800a94c:	8a3b      	ldrh	r3, [r7, #16]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d011      	beq.n	800a976 <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 800a952:	4b9c      	ldr	r3, [pc, #624]	; (800abc4 <parseDHCPMSG+0x290>)
 800a954:	7818      	ldrb	r0, [r3, #0]
 800a956:	4b9c      	ldr	r3, [pc, #624]	; (800abc8 <parseDHCPMSG+0x294>)
 800a958:	6819      	ldr	r1, [r3, #0]
 800a95a:	1d3c      	adds	r4, r7, #4
 800a95c:	8a3a      	ldrh	r2, [r7, #16]
 800a95e:	1cbb      	adds	r3, r7, #2
 800a960:	9300      	str	r3, [sp, #0]
 800a962:	4623      	mov	r3, r4
 800a964:	f7fe f930 	bl	8008bc8 <recvfrom>
 800a968:	4603      	mov	r3, r0
 800a96a:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 800a96c:	887b      	ldrh	r3, [r7, #2]
 800a96e:	2b43      	cmp	r3, #67	; 0x43
 800a970:	f040 81ed 	bne.w	800ad4e <parseDHCPMSG+0x41a>
 800a974:	e001      	b.n	800a97a <parseDHCPMSG+0x46>
   else return 0;
 800a976:	2300      	movs	r3, #0
 800a978:	e1eb      	b.n	800ad52 <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 800a97a:	4b93      	ldr	r3, [pc, #588]	; (800abc8 <parseDHCPMSG+0x294>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	7f1a      	ldrb	r2, [r3, #28]
 800a980:	4b92      	ldr	r3, [pc, #584]	; (800abcc <parseDHCPMSG+0x298>)
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	429a      	cmp	r2, r3
 800a986:	d124      	bne.n	800a9d2 <parseDHCPMSG+0x9e>
 800a988:	4b8f      	ldr	r3, [pc, #572]	; (800abc8 <parseDHCPMSG+0x294>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	7f5a      	ldrb	r2, [r3, #29]
 800a98e:	4b8f      	ldr	r3, [pc, #572]	; (800abcc <parseDHCPMSG+0x298>)
 800a990:	785b      	ldrb	r3, [r3, #1]
 800a992:	429a      	cmp	r2, r3
 800a994:	d11d      	bne.n	800a9d2 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 800a996:	4b8c      	ldr	r3, [pc, #560]	; (800abc8 <parseDHCPMSG+0x294>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	7f9a      	ldrb	r2, [r3, #30]
 800a99c:	4b8b      	ldr	r3, [pc, #556]	; (800abcc <parseDHCPMSG+0x298>)
 800a99e:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d116      	bne.n	800a9d2 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 800a9a4:	4b88      	ldr	r3, [pc, #544]	; (800abc8 <parseDHCPMSG+0x294>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	7fda      	ldrb	r2, [r3, #31]
 800a9aa:	4b88      	ldr	r3, [pc, #544]	; (800abcc <parseDHCPMSG+0x298>)
 800a9ac:	78db      	ldrb	r3, [r3, #3]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d10f      	bne.n	800a9d2 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 800a9b2:	4b85      	ldr	r3, [pc, #532]	; (800abc8 <parseDHCPMSG+0x294>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f893 2020 	ldrb.w	r2, [r3, #32]
 800a9ba:	4b84      	ldr	r3, [pc, #528]	; (800abcc <parseDHCPMSG+0x298>)
 800a9bc:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d107      	bne.n	800a9d2 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 800a9c2:	4b81      	ldr	r3, [pc, #516]	; (800abc8 <parseDHCPMSG+0x294>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a9ca:	4b80      	ldr	r3, [pc, #512]	; (800abcc <parseDHCPMSG+0x298>)
 800a9cc:	795b      	ldrb	r3, [r3, #5]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d001      	beq.n	800a9d6 <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	e1bd      	b.n	800ad52 <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 800a9d6:	4b7e      	ldr	r3, [pc, #504]	; (800abd0 <parseDHCPMSG+0x29c>)
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d10b      	bne.n	800a9f6 <parseDHCPMSG+0xc2>
 800a9de:	4b7c      	ldr	r3, [pc, #496]	; (800abd0 <parseDHCPMSG+0x29c>)
 800a9e0:	785b      	ldrb	r3, [r3, #1]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d107      	bne.n	800a9f6 <parseDHCPMSG+0xc2>
 800a9e6:	4b7a      	ldr	r3, [pc, #488]	; (800abd0 <parseDHCPMSG+0x29c>)
 800a9e8:	789b      	ldrb	r3, [r3, #2]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d103      	bne.n	800a9f6 <parseDHCPMSG+0xc2>
 800a9ee:	4b78      	ldr	r3, [pc, #480]	; (800abd0 <parseDHCPMSG+0x29c>)
 800a9f0:	78db      	ldrb	r3, [r3, #3]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d029      	beq.n	800aa4a <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800a9f6:	793a      	ldrb	r2, [r7, #4]
 800a9f8:	4b75      	ldr	r3, [pc, #468]	; (800abd0 <parseDHCPMSG+0x29c>)
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d10e      	bne.n	800aa1e <parseDHCPMSG+0xea>
 800aa00:	797a      	ldrb	r2, [r7, #5]
 800aa02:	4b73      	ldr	r3, [pc, #460]	; (800abd0 <parseDHCPMSG+0x29c>)
 800aa04:	785b      	ldrb	r3, [r3, #1]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d109      	bne.n	800aa1e <parseDHCPMSG+0xea>
 800aa0a:	79ba      	ldrb	r2, [r7, #6]
 800aa0c:	4b70      	ldr	r3, [pc, #448]	; (800abd0 <parseDHCPMSG+0x29c>)
 800aa0e:	789b      	ldrb	r3, [r3, #2]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d104      	bne.n	800aa1e <parseDHCPMSG+0xea>
 800aa14:	79fa      	ldrb	r2, [r7, #7]
 800aa16:	4b6e      	ldr	r3, [pc, #440]	; (800abd0 <parseDHCPMSG+0x29c>)
 800aa18:	78db      	ldrb	r3, [r3, #3]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d015      	beq.n	800aa4a <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 800aa1e:	793a      	ldrb	r2, [r7, #4]
 800aa20:	4b6c      	ldr	r3, [pc, #432]	; (800abd4 <parseDHCPMSG+0x2a0>)
 800aa22:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d10e      	bne.n	800aa46 <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 800aa28:	797a      	ldrb	r2, [r7, #5]
 800aa2a:	4b6a      	ldr	r3, [pc, #424]	; (800abd4 <parseDHCPMSG+0x2a0>)
 800aa2c:	785b      	ldrb	r3, [r3, #1]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d109      	bne.n	800aa46 <parseDHCPMSG+0x112>
 800aa32:	79ba      	ldrb	r2, [r7, #6]
 800aa34:	4b67      	ldr	r3, [pc, #412]	; (800abd4 <parseDHCPMSG+0x2a0>)
 800aa36:	789b      	ldrb	r3, [r3, #2]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d104      	bne.n	800aa46 <parseDHCPMSG+0x112>
 800aa3c:	79fa      	ldrb	r2, [r7, #7]
 800aa3e:	4b65      	ldr	r3, [pc, #404]	; (800abd4 <parseDHCPMSG+0x2a0>)
 800aa40:	78db      	ldrb	r3, [r3, #3]
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d001      	beq.n	800aa4a <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 800aa46:	2300      	movs	r3, #0
 800aa48:	e183      	b.n	800ad52 <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 800aa4a:	4b5f      	ldr	r3, [pc, #380]	; (800abc8 <parseDHCPMSG+0x294>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	33f0      	adds	r3, #240	; 0xf0
 800aa54:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 800aa56:	8a3b      	ldrh	r3, [r7, #16]
 800aa58:	3bf0      	subs	r3, #240	; 0xf0
 800aa5a:	697a      	ldr	r2, [r7, #20]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 800aa60:	e170      	b.n	800ad44 <parseDHCPMSG+0x410>

			switch ( *p ) {
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	2b36      	cmp	r3, #54	; 0x36
 800aa68:	dc76      	bgt.n	800ab58 <parseDHCPMSG+0x224>
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	f2c0 815d 	blt.w	800ad2a <parseDHCPMSG+0x3f6>
 800aa70:	2b36      	cmp	r3, #54	; 0x36
 800aa72:	f200 815a 	bhi.w	800ad2a <parseDHCPMSG+0x3f6>
 800aa76:	a201      	add	r2, pc, #4	; (adr r2, 800aa7c <parseDHCPMSG+0x148>)
 800aa78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa7c:	0800ab65 	.word	0x0800ab65
 800aa80:	0800ab85 	.word	0x0800ab85
 800aa84:	0800ad2b 	.word	0x0800ad2b
 800aa88:	0800abdd 	.word	0x0800abdd
 800aa8c:	0800ad2b 	.word	0x0800ad2b
 800aa90:	0800ad2b 	.word	0x0800ad2b
 800aa94:	0800ac29 	.word	0x0800ac29
 800aa98:	0800ad2b 	.word	0x0800ad2b
 800aa9c:	0800ad2b 	.word	0x0800ad2b
 800aaa0:	0800ad2b 	.word	0x0800ad2b
 800aaa4:	0800ad2b 	.word	0x0800ad2b
 800aaa8:	0800ad2b 	.word	0x0800ad2b
 800aaac:	0800ad2b 	.word	0x0800ad2b
 800aab0:	0800ad2b 	.word	0x0800ad2b
 800aab4:	0800ad2b 	.word	0x0800ad2b
 800aab8:	0800ad2b 	.word	0x0800ad2b
 800aabc:	0800ad2b 	.word	0x0800ad2b
 800aac0:	0800ad2b 	.word	0x0800ad2b
 800aac4:	0800ad2b 	.word	0x0800ad2b
 800aac8:	0800ad2b 	.word	0x0800ad2b
 800aacc:	0800ad2b 	.word	0x0800ad2b
 800aad0:	0800ad2b 	.word	0x0800ad2b
 800aad4:	0800ad2b 	.word	0x0800ad2b
 800aad8:	0800ad2b 	.word	0x0800ad2b
 800aadc:	0800ad2b 	.word	0x0800ad2b
 800aae0:	0800ad2b 	.word	0x0800ad2b
 800aae4:	0800ad2b 	.word	0x0800ad2b
 800aae8:	0800ad2b 	.word	0x0800ad2b
 800aaec:	0800ad2b 	.word	0x0800ad2b
 800aaf0:	0800ad2b 	.word	0x0800ad2b
 800aaf4:	0800ad2b 	.word	0x0800ad2b
 800aaf8:	0800ad2b 	.word	0x0800ad2b
 800aafc:	0800ad2b 	.word	0x0800ad2b
 800ab00:	0800ad2b 	.word	0x0800ad2b
 800ab04:	0800ad2b 	.word	0x0800ad2b
 800ab08:	0800ad2b 	.word	0x0800ad2b
 800ab0c:	0800ad2b 	.word	0x0800ad2b
 800ab10:	0800ad2b 	.word	0x0800ad2b
 800ab14:	0800ad2b 	.word	0x0800ad2b
 800ab18:	0800ad2b 	.word	0x0800ad2b
 800ab1c:	0800ad2b 	.word	0x0800ad2b
 800ab20:	0800ad2b 	.word	0x0800ad2b
 800ab24:	0800ad2b 	.word	0x0800ad2b
 800ab28:	0800ad2b 	.word	0x0800ad2b
 800ab2c:	0800ad2b 	.word	0x0800ad2b
 800ab30:	0800ad2b 	.word	0x0800ad2b
 800ab34:	0800ad2b 	.word	0x0800ad2b
 800ab38:	0800ad2b 	.word	0x0800ad2b
 800ab3c:	0800ad2b 	.word	0x0800ad2b
 800ab40:	0800ad2b 	.word	0x0800ad2b
 800ab44:	0800ad2b 	.word	0x0800ad2b
 800ab48:	0800ac75 	.word	0x0800ac75
 800ab4c:	0800ad2b 	.word	0x0800ad2b
 800ab50:	0800ab6d 	.word	0x0800ab6d
 800ab54:	0800acd1 	.word	0x0800acd1
 800ab58:	2bff      	cmp	r3, #255	; 0xff
 800ab5a:	f040 80e6 	bne.w	800ad2a <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	617b      	str	r3, [r7, #20]
   				break;
 800ab62:	e0ef      	b.n	800ad44 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	3301      	adds	r3, #1
 800ab68:	617b      	str	r3, [r7, #20]
   				break;
 800ab6a:	e0eb      	b.n	800ad44 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	3301      	adds	r3, #1
 800ab70:	617b      	str	r3, [r7, #20]
   				p++;
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	3301      	adds	r3, #1
 800ab76:	617b      	str	r3, [r7, #20]
   				type = *p++;
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	1c5a      	adds	r2, r3, #1
 800ab7c:	617a      	str	r2, [r7, #20]
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	74fb      	strb	r3, [r7, #19]
   				break;
 800ab82:	e0df      	b.n	800ad44 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	3301      	adds	r3, #1
 800ab88:	617b      	str	r3, [r7, #20]
   				p++;
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	1c5a      	adds	r2, r3, #1
 800ab94:	617a      	str	r2, [r7, #20]
 800ab96:	781a      	ldrb	r2, [r3, #0]
 800ab98:	4b0f      	ldr	r3, [pc, #60]	; (800abd8 <parseDHCPMSG+0x2a4>)
 800ab9a:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	1c5a      	adds	r2, r3, #1
 800aba0:	617a      	str	r2, [r7, #20]
 800aba2:	781a      	ldrb	r2, [r3, #0]
 800aba4:	4b0c      	ldr	r3, [pc, #48]	; (800abd8 <parseDHCPMSG+0x2a4>)
 800aba6:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	1c5a      	adds	r2, r3, #1
 800abac:	617a      	str	r2, [r7, #20]
 800abae:	781a      	ldrb	r2, [r3, #0]
 800abb0:	4b09      	ldr	r3, [pc, #36]	; (800abd8 <parseDHCPMSG+0x2a4>)
 800abb2:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	1c5a      	adds	r2, r3, #1
 800abb8:	617a      	str	r2, [r7, #20]
 800abba:	781a      	ldrb	r2, [r3, #0]
 800abbc:	4b06      	ldr	r3, [pc, #24]	; (800abd8 <parseDHCPMSG+0x2a4>)
 800abbe:	70da      	strb	r2, [r3, #3]
   				break;
 800abc0:	e0c0      	b.n	800ad44 <parseDHCPMSG+0x410>
 800abc2:	bf00      	nop
 800abc4:	20000945 	.word	0x20000945
 800abc8:	20000970 	.word	0x20000970
 800abcc:	20000974 	.word	0x20000974
 800abd0:	20000948 	.word	0x20000948
 800abd4:	2000094c 	.word	0x2000094c
 800abd8:	2000095c 	.word	0x2000095c
   			case routersOnSubnet :
   				p++;
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	3301      	adds	r3, #1
 800abe0:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	1c5a      	adds	r2, r3, #1
 800abe6:	617a      	str	r2, [r7, #20]
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	1c5a      	adds	r2, r3, #1
 800abf0:	617a      	str	r2, [r7, #20]
 800abf2:	781a      	ldrb	r2, [r3, #0]
 800abf4:	4b59      	ldr	r3, [pc, #356]	; (800ad5c <parseDHCPMSG+0x428>)
 800abf6:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	1c5a      	adds	r2, r3, #1
 800abfc:	617a      	str	r2, [r7, #20]
 800abfe:	781a      	ldrb	r2, [r3, #0]
 800ac00:	4b56      	ldr	r3, [pc, #344]	; (800ad5c <parseDHCPMSG+0x428>)
 800ac02:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	1c5a      	adds	r2, r3, #1
 800ac08:	617a      	str	r2, [r7, #20]
 800ac0a:	781a      	ldrb	r2, [r3, #0]
 800ac0c:	4b53      	ldr	r3, [pc, #332]	; (800ad5c <parseDHCPMSG+0x428>)
 800ac0e:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	1c5a      	adds	r2, r3, #1
 800ac14:	617a      	str	r2, [r7, #20]
 800ac16:	781a      	ldrb	r2, [r3, #0]
 800ac18:	4b50      	ldr	r3, [pc, #320]	; (800ad5c <parseDHCPMSG+0x428>)
 800ac1a:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 800ac1c:	7afb      	ldrb	r3, [r7, #11]
 800ac1e:	3b04      	subs	r3, #4
 800ac20:	697a      	ldr	r2, [r7, #20]
 800ac22:	4413      	add	r3, r2
 800ac24:	617b      	str	r3, [r7, #20]
   				break;
 800ac26:	e08d      	b.n	800ad44 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	1c5a      	adds	r2, r3, #1
 800ac32:	617a      	str	r2, [r7, #20]
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	1c5a      	adds	r2, r3, #1
 800ac3c:	617a      	str	r2, [r7, #20]
 800ac3e:	781a      	ldrb	r2, [r3, #0]
 800ac40:	4b47      	ldr	r3, [pc, #284]	; (800ad60 <parseDHCPMSG+0x42c>)
 800ac42:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	1c5a      	adds	r2, r3, #1
 800ac48:	617a      	str	r2, [r7, #20]
 800ac4a:	781a      	ldrb	r2, [r3, #0]
 800ac4c:	4b44      	ldr	r3, [pc, #272]	; (800ad60 <parseDHCPMSG+0x42c>)
 800ac4e:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	1c5a      	adds	r2, r3, #1
 800ac54:	617a      	str	r2, [r7, #20]
 800ac56:	781a      	ldrb	r2, [r3, #0]
 800ac58:	4b41      	ldr	r3, [pc, #260]	; (800ad60 <parseDHCPMSG+0x42c>)
 800ac5a:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	1c5a      	adds	r2, r3, #1
 800ac60:	617a      	str	r2, [r7, #20]
 800ac62:	781a      	ldrb	r2, [r3, #0]
 800ac64:	4b3e      	ldr	r3, [pc, #248]	; (800ad60 <parseDHCPMSG+0x42c>)
 800ac66:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 800ac68:	7afb      	ldrb	r3, [r7, #11]
 800ac6a:	3b04      	subs	r3, #4
 800ac6c:	697a      	ldr	r2, [r7, #20]
 800ac6e:	4413      	add	r3, r2
 800ac70:	617b      	str	r3, [r7, #20]
   				break;
 800ac72:	e067      	b.n	800ad44 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	3301      	adds	r3, #1
 800ac78:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	1c5a      	adds	r2, r3, #1
 800ac7e:	617a      	str	r2, [r7, #20]
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	1c5a      	adds	r2, r3, #1
 800ac88:	617a      	str	r2, [r7, #20]
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	4b35      	ldr	r3, [pc, #212]	; (800ad64 <parseDHCPMSG+0x430>)
 800ac90:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800ac92:	4b34      	ldr	r3, [pc, #208]	; (800ad64 <parseDHCPMSG+0x430>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	021a      	lsls	r2, r3, #8
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	1c59      	adds	r1, r3, #1
 800ac9c:	6179      	str	r1, [r7, #20]
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	4413      	add	r3, r2
 800aca2:	4a30      	ldr	r2, [pc, #192]	; (800ad64 <parseDHCPMSG+0x430>)
 800aca4:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800aca6:	4b2f      	ldr	r3, [pc, #188]	; (800ad64 <parseDHCPMSG+0x430>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	021a      	lsls	r2, r3, #8
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	1c59      	adds	r1, r3, #1
 800acb0:	6179      	str	r1, [r7, #20]
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	4413      	add	r3, r2
 800acb6:	4a2b      	ldr	r2, [pc, #172]	; (800ad64 <parseDHCPMSG+0x430>)
 800acb8:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800acba:	4b2a      	ldr	r3, [pc, #168]	; (800ad64 <parseDHCPMSG+0x430>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	021a      	lsls	r2, r3, #8
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	1c59      	adds	r1, r3, #1
 800acc4:	6179      	str	r1, [r7, #20]
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	4413      	add	r3, r2
 800acca:	4a26      	ldr	r2, [pc, #152]	; (800ad64 <parseDHCPMSG+0x430>)
 800accc:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 800acce:	e039      	b.n	800ad44 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	3301      	adds	r3, #1
 800acd4:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	1c5a      	adds	r2, r3, #1
 800acda:	617a      	str	r2, [r7, #20]
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	1c5a      	adds	r2, r3, #1
 800ace4:	617a      	str	r2, [r7, #20]
 800ace6:	781a      	ldrb	r2, [r3, #0]
 800ace8:	4b1f      	ldr	r3, [pc, #124]	; (800ad68 <parseDHCPMSG+0x434>)
 800acea:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	1c5a      	adds	r2, r3, #1
 800acf0:	617a      	str	r2, [r7, #20]
 800acf2:	781a      	ldrb	r2, [r3, #0]
 800acf4:	4b1c      	ldr	r3, [pc, #112]	; (800ad68 <parseDHCPMSG+0x434>)
 800acf6:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	1c5a      	adds	r2, r3, #1
 800acfc:	617a      	str	r2, [r7, #20]
 800acfe:	781a      	ldrb	r2, [r3, #0]
 800ad00:	4b19      	ldr	r3, [pc, #100]	; (800ad68 <parseDHCPMSG+0x434>)
 800ad02:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	1c5a      	adds	r2, r3, #1
 800ad08:	617a      	str	r2, [r7, #20]
 800ad0a:	781a      	ldrb	r2, [r3, #0]
 800ad0c:	4b16      	ldr	r3, [pc, #88]	; (800ad68 <parseDHCPMSG+0x434>)
 800ad0e:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 800ad10:	793a      	ldrb	r2, [r7, #4]
 800ad12:	4b16      	ldr	r3, [pc, #88]	; (800ad6c <parseDHCPMSG+0x438>)
 800ad14:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 800ad16:	797a      	ldrb	r2, [r7, #5]
 800ad18:	4b14      	ldr	r3, [pc, #80]	; (800ad6c <parseDHCPMSG+0x438>)
 800ad1a:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 800ad1c:	79ba      	ldrb	r2, [r7, #6]
 800ad1e:	4b13      	ldr	r3, [pc, #76]	; (800ad6c <parseDHCPMSG+0x438>)
 800ad20:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 800ad22:	79fa      	ldrb	r2, [r7, #7]
 800ad24:	4b11      	ldr	r3, [pc, #68]	; (800ad6c <parseDHCPMSG+0x438>)
 800ad26:	70da      	strb	r2, [r3, #3]
   				break;
 800ad28:	e00c      	b.n	800ad44 <parseDHCPMSG+0x410>
   			default :
   				p++;
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	1c5a      	adds	r2, r3, #1
 800ad34:	617a      	str	r2, [r7, #20]
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 800ad3a:	7afb      	ldrb	r3, [r7, #11]
 800ad3c:	697a      	ldr	r2, [r7, #20]
 800ad3e:	4413      	add	r3, r2
 800ad40:	617b      	str	r3, [r7, #20]
   				break;
 800ad42:	bf00      	nop
		while ( p < e ) {
 800ad44:	697a      	ldr	r2, [r7, #20]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	f4ff ae8a 	bcc.w	800aa62 <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 800ad4e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	371c      	adds	r7, #28
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd90      	pop	{r4, r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	20000958 	.word	0x20000958
 800ad60:	20000960 	.word	0x20000960
 800ad64:	200000d0 	.word	0x200000d0
 800ad68:	20000948 	.word	0x20000948
 800ad6c:	2000094c 	.word	0x2000094c

0800ad70 <DHCP_run>:

uint8_t DHCP_run(void)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 800ad76:	4b7f      	ldr	r3, [pc, #508]	; (800af74 <DHCP_run+0x204>)
 800ad78:	f993 3000 	ldrsb.w	r3, [r3]
 800ad7c:	2b06      	cmp	r3, #6
 800ad7e:	d101      	bne.n	800ad84 <DHCP_run+0x14>
 800ad80:	2305      	movs	r3, #5
 800ad82:	e0f3      	b.n	800af6c <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 800ad84:	4b7c      	ldr	r3, [pc, #496]	; (800af78 <DHCP_run+0x208>)
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	00db      	lsls	r3, r3, #3
 800ad8e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ad92:	4618      	mov	r0, r3
 800ad94:	f7fc fe14 	bl	80079c0 <WIZCHIP_READ>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	2b22      	cmp	r3, #34	; 0x22
 800ad9c:	d006      	beq.n	800adac <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 800ad9e:	4b76      	ldr	r3, [pc, #472]	; (800af78 <DHCP_run+0x208>)
 800ada0:	7818      	ldrb	r0, [r3, #0]
 800ada2:	2300      	movs	r3, #0
 800ada4:	2244      	movs	r2, #68	; 0x44
 800ada6:	2102      	movs	r1, #2
 800ada8:	f7fd f8fa 	bl	8007fa0 <socket>

	ret = DHCP_RUNNING;
 800adac:	2301      	movs	r3, #1
 800adae:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 800adb0:	f7ff fdc0 	bl	800a934 <parseDHCPMSG>
 800adb4:	4603      	mov	r3, r0
 800adb6:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 800adb8:	4b6e      	ldr	r3, [pc, #440]	; (800af74 <DHCP_run+0x204>)
 800adba:	f993 3000 	ldrsb.w	r3, [r3]
 800adbe:	2b04      	cmp	r3, #4
 800adc0:	f200 80d0 	bhi.w	800af64 <DHCP_run+0x1f4>
 800adc4:	a201      	add	r2, pc, #4	; (adr r2, 800adcc <DHCP_run+0x5c>)
 800adc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adca:	bf00      	nop
 800adcc:	0800ade1 	.word	0x0800ade1
 800add0:	0800ae05 	.word	0x0800ae05
 800add4:	0800ae49 	.word	0x0800ae49
 800add8:	0800ae99 	.word	0x0800ae99
 800addc:	0800aef3 	.word	0x0800aef3
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 800ade0:	4b66      	ldr	r3, [pc, #408]	; (800af7c <DHCP_run+0x20c>)
 800ade2:	2200      	movs	r2, #0
 800ade4:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 800ade6:	4b65      	ldr	r3, [pc, #404]	; (800af7c <DHCP_run+0x20c>)
 800ade8:	2200      	movs	r2, #0
 800adea:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 800adec:	4b63      	ldr	r3, [pc, #396]	; (800af7c <DHCP_run+0x20c>)
 800adee:	2200      	movs	r2, #0
 800adf0:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 800adf2:	4b62      	ldr	r3, [pc, #392]	; (800af7c <DHCP_run+0x20c>)
 800adf4:	2200      	movs	r2, #0
 800adf6:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 800adf8:	f7fe fffa 	bl	8009df0 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 800adfc:	4b5d      	ldr	r3, [pc, #372]	; (800af74 <DHCP_run+0x204>)
 800adfe:	2201      	movs	r2, #1
 800ae00:	701a      	strb	r2, [r3, #0]
   		break;
 800ae02:	e0b2      	b.n	800af6a <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 800ae04:	79bb      	ldrb	r3, [r7, #6]
 800ae06:	2b02      	cmp	r3, #2
 800ae08:	d119      	bne.n	800ae3e <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 800ae0a:	4b5d      	ldr	r3, [pc, #372]	; (800af80 <DHCP_run+0x210>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	7c1a      	ldrb	r2, [r3, #16]
 800ae10:	4b5a      	ldr	r3, [pc, #360]	; (800af7c <DHCP_run+0x20c>)
 800ae12:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 800ae14:	4b5a      	ldr	r3, [pc, #360]	; (800af80 <DHCP_run+0x210>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	7c5a      	ldrb	r2, [r3, #17]
 800ae1a:	4b58      	ldr	r3, [pc, #352]	; (800af7c <DHCP_run+0x20c>)
 800ae1c:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 800ae1e:	4b58      	ldr	r3, [pc, #352]	; (800af80 <DHCP_run+0x210>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	7c9a      	ldrb	r2, [r3, #18]
 800ae24:	4b55      	ldr	r3, [pc, #340]	; (800af7c <DHCP_run+0x20c>)
 800ae26:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 800ae28:	4b55      	ldr	r3, [pc, #340]	; (800af80 <DHCP_run+0x210>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	7cda      	ldrb	r2, [r3, #19]
 800ae2e:	4b53      	ldr	r3, [pc, #332]	; (800af7c <DHCP_run+0x20c>)
 800ae30:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 800ae32:	f7ff f9a3 	bl	800a17c <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 800ae36:	4b4f      	ldr	r3, [pc, #316]	; (800af74 <DHCP_run+0x204>)
 800ae38:	2202      	movs	r2, #2
 800ae3a:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 800ae3c:	e095      	b.n	800af6a <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800ae3e:	f000 f8b1 	bl	800afa4 <check_DHCP_timeout>
 800ae42:	4603      	mov	r3, r0
 800ae44:	71fb      	strb	r3, [r7, #7]
         break;
 800ae46:	e090      	b.n	800af6a <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 800ae48:	79bb      	ldrb	r3, [r7, #6]
 800ae4a:	2b05      	cmp	r3, #5
 800ae4c:	d116      	bne.n	800ae7c <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 800ae4e:	f000 f909 	bl	800b064 <check_DHCP_leasedIP>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d008      	beq.n	800ae6a <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 800ae58:	4b4a      	ldr	r3, [pc, #296]	; (800af84 <DHCP_run+0x214>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4798      	blx	r3
					reset_DHCP_timeout();
 800ae5e:	f000 f9d9 	bl	800b214 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 800ae62:	4b44      	ldr	r3, [pc, #272]	; (800af74 <DHCP_run+0x204>)
 800ae64:	2203      	movs	r2, #3
 800ae66:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 800ae68:	e07f      	b.n	800af6a <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 800ae6a:	f000 f9d3 	bl	800b214 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 800ae6e:	4b46      	ldr	r3, [pc, #280]	; (800af88 <DHCP_run+0x218>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 800ae74:	4b3f      	ldr	r3, [pc, #252]	; (800af74 <DHCP_run+0x204>)
 800ae76:	2200      	movs	r2, #0
 800ae78:	701a      	strb	r2, [r3, #0]
		break;
 800ae7a:	e076      	b.n	800af6a <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 800ae7c:	79bb      	ldrb	r3, [r7, #6]
 800ae7e:	2b06      	cmp	r3, #6
 800ae80:	d105      	bne.n	800ae8e <DHCP_run+0x11e>
				reset_DHCP_timeout();
 800ae82:	f000 f9c7 	bl	800b214 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 800ae86:	4b3b      	ldr	r3, [pc, #236]	; (800af74 <DHCP_run+0x204>)
 800ae88:	2201      	movs	r2, #1
 800ae8a:	701a      	strb	r2, [r3, #0]
		break;
 800ae8c:	e06d      	b.n	800af6a <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800ae8e:	f000 f889 	bl	800afa4 <check_DHCP_timeout>
 800ae92:	4603      	mov	r3, r0
 800ae94:	71fb      	strb	r3, [r7, #7]
		break;
 800ae96:	e068      	b.n	800af6a <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 800ae98:	2304      	movs	r3, #4
 800ae9a:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/4) < dhcp_tick_1s)) {
 800ae9c:	4b3b      	ldr	r3, [pc, #236]	; (800af8c <DHCP_run+0x21c>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aea4:	d060      	beq.n	800af68 <DHCP_run+0x1f8>
 800aea6:	4b39      	ldr	r3, [pc, #228]	; (800af8c <DHCP_run+0x21c>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	089a      	lsrs	r2, r3, #2
 800aeac:	4b38      	ldr	r3, [pc, #224]	; (800af90 <DHCP_run+0x220>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d259      	bcs.n	800af68 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 800aeb8:	4b30      	ldr	r3, [pc, #192]	; (800af7c <DHCP_run+0x20c>)
 800aeba:	781a      	ldrb	r2, [r3, #0]
 800aebc:	4b35      	ldr	r3, [pc, #212]	; (800af94 <DHCP_run+0x224>)
 800aebe:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 800aec0:	4b2e      	ldr	r3, [pc, #184]	; (800af7c <DHCP_run+0x20c>)
 800aec2:	785a      	ldrb	r2, [r3, #1]
 800aec4:	4b33      	ldr	r3, [pc, #204]	; (800af94 <DHCP_run+0x224>)
 800aec6:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 800aec8:	4b2c      	ldr	r3, [pc, #176]	; (800af7c <DHCP_run+0x20c>)
 800aeca:	789a      	ldrb	r2, [r3, #2]
 800aecc:	4b31      	ldr	r3, [pc, #196]	; (800af94 <DHCP_run+0x224>)
 800aece:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 800aed0:	4b2a      	ldr	r3, [pc, #168]	; (800af7c <DHCP_run+0x20c>)
 800aed2:	78da      	ldrb	r2, [r3, #3]
 800aed4:	4b2f      	ldr	r3, [pc, #188]	; (800af94 <DHCP_run+0x224>)
 800aed6:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 800aed8:	4b2f      	ldr	r3, [pc, #188]	; (800af98 <DHCP_run+0x228>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	3301      	adds	r3, #1
 800aede:	4a2e      	ldr	r2, [pc, #184]	; (800af98 <DHCP_run+0x228>)
 800aee0:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 800aee2:	f7ff f94b 	bl	800a17c <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 800aee6:	f000 f995 	bl	800b214 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 800aeea:	4b22      	ldr	r3, [pc, #136]	; (800af74 <DHCP_run+0x204>)
 800aeec:	2204      	movs	r2, #4
 800aeee:	701a      	strb	r2, [r3, #0]
			}
		break;
 800aef0:	e03a      	b.n	800af68 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 800aef2:	2304      	movs	r3, #4
 800aef4:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 800aef6:	79bb      	ldrb	r3, [r7, #6]
 800aef8:	2b05      	cmp	r3, #5
 800aefa:	d125      	bne.n	800af48 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 800aefc:	4b27      	ldr	r3, [pc, #156]	; (800af9c <DHCP_run+0x22c>)
 800aefe:	2200      	movs	r2, #0
 800af00:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 800af02:	4b24      	ldr	r3, [pc, #144]	; (800af94 <DHCP_run+0x224>)
 800af04:	781a      	ldrb	r2, [r3, #0]
 800af06:	4b1d      	ldr	r3, [pc, #116]	; (800af7c <DHCP_run+0x20c>)
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d111      	bne.n	800af32 <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 800af0e:	4b21      	ldr	r3, [pc, #132]	; (800af94 <DHCP_run+0x224>)
 800af10:	785a      	ldrb	r2, [r3, #1]
 800af12:	4b1a      	ldr	r3, [pc, #104]	; (800af7c <DHCP_run+0x20c>)
 800af14:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 800af16:	429a      	cmp	r2, r3
 800af18:	d10b      	bne.n	800af32 <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800af1a:	4b1e      	ldr	r3, [pc, #120]	; (800af94 <DHCP_run+0x224>)
 800af1c:	789a      	ldrb	r2, [r3, #2]
 800af1e:	4b17      	ldr	r3, [pc, #92]	; (800af7c <DHCP_run+0x20c>)
 800af20:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 800af22:	429a      	cmp	r2, r3
 800af24:	d105      	bne.n	800af32 <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 800af26:	4b1b      	ldr	r3, [pc, #108]	; (800af94 <DHCP_run+0x224>)
 800af28:	78da      	ldrb	r2, [r3, #3]
 800af2a:	4b14      	ldr	r3, [pc, #80]	; (800af7c <DHCP_run+0x20c>)
 800af2c:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800af2e:	429a      	cmp	r2, r3
 800af30:	d004      	beq.n	800af3c <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 800af32:	2303      	movs	r3, #3
 800af34:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 800af36:	4b1a      	ldr	r3, [pc, #104]	; (800afa0 <DHCP_run+0x230>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 800af3c:	f000 f96a 	bl	800b214 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 800af40:	4b0c      	ldr	r3, [pc, #48]	; (800af74 <DHCP_run+0x204>)
 800af42:	2203      	movs	r2, #3
 800af44:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 800af46:	e010      	b.n	800af6a <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 800af48:	79bb      	ldrb	r3, [r7, #6]
 800af4a:	2b06      	cmp	r3, #6
 800af4c:	d105      	bne.n	800af5a <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 800af4e:	f000 f961 	bl	800b214 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 800af52:	4b08      	ldr	r3, [pc, #32]	; (800af74 <DHCP_run+0x204>)
 800af54:	2201      	movs	r2, #1
 800af56:	701a      	strb	r2, [r3, #0]
	   	break;
 800af58:	e007      	b.n	800af6a <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800af5a:	f000 f823 	bl	800afa4 <check_DHCP_timeout>
 800af5e:	4603      	mov	r3, r0
 800af60:	71fb      	strb	r3, [r7, #7]
	   	break;
 800af62:	e002      	b.n	800af6a <DHCP_run+0x1fa>
		default :
   		break;
 800af64:	bf00      	nop
 800af66:	e000      	b.n	800af6a <DHCP_run+0x1fa>
		break;
 800af68:	bf00      	nop
	}

	return ret;
 800af6a:	79fb      	ldrb	r3, [r7, #7]
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3708      	adds	r7, #8
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}
 800af74:	20000964 	.word	0x20000964
 800af78:	20000945 	.word	0x20000945
 800af7c:	20000954 	.word	0x20000954
 800af80:	20000970 	.word	0x20000970
 800af84:	200000e4 	.word	0x200000e4
 800af88:	200000ec 	.word	0x200000ec
 800af8c:	200000d0 	.word	0x200000d0
 800af90:	20000968 	.word	0x20000968
 800af94:	20000950 	.word	0x20000950
 800af98:	2000096c 	.word	0x2000096c
 800af9c:	20000965 	.word	0x20000965
 800afa0:	200000e8 	.word	0x200000e8

0800afa4 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 800afaa:	2301      	movs	r3, #1
 800afac:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 800afae:	4b29      	ldr	r3, [pc, #164]	; (800b054 <check_DHCP_timeout+0xb0>)
 800afb0:	f993 3000 	ldrsb.w	r3, [r3]
 800afb4:	2b63      	cmp	r3, #99	; 0x63
 800afb6:	dc2d      	bgt.n	800b014 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 800afb8:	4b27      	ldr	r3, [pc, #156]	; (800b058 <check_DHCP_timeout+0xb4>)
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	4b27      	ldr	r3, [pc, #156]	; (800b05c <check_DHCP_timeout+0xb8>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d242      	bcs.n	800b04a <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 800afc4:	4b26      	ldr	r3, [pc, #152]	; (800b060 <check_DHCP_timeout+0xbc>)
 800afc6:	f993 3000 	ldrsb.w	r3, [r3]
 800afca:	2b04      	cmp	r3, #4
 800afcc:	d00c      	beq.n	800afe8 <check_DHCP_timeout+0x44>
 800afce:	2b04      	cmp	r3, #4
 800afd0:	dc0d      	bgt.n	800afee <check_DHCP_timeout+0x4a>
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d002      	beq.n	800afdc <check_DHCP_timeout+0x38>
 800afd6:	2b02      	cmp	r3, #2
 800afd8:	d003      	beq.n	800afe2 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 800afda:	e008      	b.n	800afee <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 800afdc:	f7fe ff08 	bl	8009df0 <send_DHCP_DISCOVER>
				break;
 800afe0:	e006      	b.n	800aff0 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 800afe2:	f7ff f8cb 	bl	800a17c <send_DHCP_REQUEST>
				break;
 800afe6:	e003      	b.n	800aff0 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 800afe8:	f7ff f8c8 	bl	800a17c <send_DHCP_REQUEST>
				break;
 800afec:	e000      	b.n	800aff0 <check_DHCP_timeout+0x4c>
				break;
 800afee:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 800aff0:	4b1a      	ldr	r3, [pc, #104]	; (800b05c <check_DHCP_timeout+0xb8>)
 800aff2:	2200      	movs	r2, #0
 800aff4:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 800aff6:	4b19      	ldr	r3, [pc, #100]	; (800b05c <check_DHCP_timeout+0xb8>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	3302      	adds	r3, #2
 800affc:	4a16      	ldr	r2, [pc, #88]	; (800b058 <check_DHCP_timeout+0xb4>)
 800affe:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 800b000:	4b14      	ldr	r3, [pc, #80]	; (800b054 <check_DHCP_timeout+0xb0>)
 800b002:	f993 3000 	ldrsb.w	r3, [r3]
 800b006:	b2db      	uxtb	r3, r3
 800b008:	3301      	adds	r3, #1
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	b25a      	sxtb	r2, r3
 800b00e:	4b11      	ldr	r3, [pc, #68]	; (800b054 <check_DHCP_timeout+0xb0>)
 800b010:	701a      	strb	r2, [r3, #0]
 800b012:	e01a      	b.n	800b04a <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 800b014:	4b12      	ldr	r3, [pc, #72]	; (800b060 <check_DHCP_timeout+0xbc>)
 800b016:	f993 3000 	ldrsb.w	r3, [r3]
 800b01a:	2b04      	cmp	r3, #4
 800b01c:	d00c      	beq.n	800b038 <check_DHCP_timeout+0x94>
 800b01e:	2b04      	cmp	r3, #4
 800b020:	dc10      	bgt.n	800b044 <check_DHCP_timeout+0xa0>
 800b022:	2b01      	cmp	r3, #1
 800b024:	d002      	beq.n	800b02c <check_DHCP_timeout+0x88>
 800b026:	2b02      	cmp	r3, #2
 800b028:	d006      	beq.n	800b038 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 800b02a:	e00b      	b.n	800b044 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 800b02c:	4b0c      	ldr	r3, [pc, #48]	; (800b060 <check_DHCP_timeout+0xbc>)
 800b02e:	2200      	movs	r2, #0
 800b030:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 800b032:	2300      	movs	r3, #0
 800b034:	71fb      	strb	r3, [r7, #7]
				break;
 800b036:	e006      	b.n	800b046 <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 800b038:	f7fe feda 	bl	8009df0 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 800b03c:	4b08      	ldr	r3, [pc, #32]	; (800b060 <check_DHCP_timeout+0xbc>)
 800b03e:	2201      	movs	r2, #1
 800b040:	701a      	strb	r2, [r3, #0]
				break;
 800b042:	e000      	b.n	800b046 <check_DHCP_timeout+0xa2>
				break;
 800b044:	bf00      	nop
		}
		reset_DHCP_timeout();
 800b046:	f000 f8e5 	bl	800b214 <reset_DHCP_timeout>
	}
	return ret;
 800b04a:	79fb      	ldrb	r3, [r7, #7]
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3708      	adds	r7, #8
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}
 800b054:	20000965 	.word	0x20000965
 800b058:	200000d4 	.word	0x200000d4
 800b05c:	20000968 	.word	0x20000968
 800b060:	20000964 	.word	0x20000964

0800b064 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 800b06a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800b06e:	f7fc fca7 	bl	80079c0 <WIZCHIP_READ>
 800b072:	4603      	mov	r3, r0
 800b074:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 800b076:	2103      	movs	r1, #3
 800b078:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800b07c:	f7fc fcec 	bl	8007a58 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 800b080:	4b15      	ldr	r3, [pc, #84]	; (800b0d8 <check_DHCP_leasedIP+0x74>)
 800b082:	7818      	ldrb	r0, [r3, #0]
 800b084:	f241 3388 	movw	r3, #5000	; 0x1388
 800b088:	9300      	str	r3, [sp, #0]
 800b08a:	4b14      	ldr	r3, [pc, #80]	; (800b0dc <check_DHCP_leasedIP+0x78>)
 800b08c:	2211      	movs	r2, #17
 800b08e:	4914      	ldr	r1, [pc, #80]	; (800b0e0 <check_DHCP_leasedIP+0x7c>)
 800b090:	f7fd fc64 	bl	800895c <sendto>
 800b094:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 800b096:	79fb      	ldrb	r3, [r7, #7]
 800b098:	4619      	mov	r1, r3
 800b09a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800b09e:	f7fc fcdb 	bl	8007a58 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	f113 0f0d 	cmn.w	r3, #13
 800b0a8:	d101      	bne.n	800b0ae <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e010      	b.n	800b0d0 <check_DHCP_leasedIP+0x6c>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 800b0ae:	f7ff faef 	bl	800a690 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 800b0b2:	4b0c      	ldr	r3, [pc, #48]	; (800b0e4 <check_DHCP_leasedIP+0x80>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2){ // wait for 1s over; wait to complete to send DECLINE message;
 800b0b8:	e003      	b.n	800b0c2 <check_DHCP_leasedIP+0x5e>

			delay(200);
 800b0ba:	4b0b      	ldr	r3, [pc, #44]	; (800b0e8 <check_DHCP_leasedIP+0x84>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	20c8      	movs	r0, #200	; 0xc8
 800b0c0:	4798      	blx	r3
		while((dhcp_tick_1s - ret) < 2){ // wait for 1s over; wait to complete to send DECLINE message;
 800b0c2:	4b08      	ldr	r3, [pc, #32]	; (800b0e4 <check_DHCP_leasedIP+0x80>)
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	1ad3      	subs	r3, r2, r3
 800b0ca:	2b01      	cmp	r3, #1
 800b0cc:	d9f5      	bls.n	800b0ba <check_DHCP_leasedIP+0x56>

		}
		return 0;
 800b0ce:	2300      	movs	r3, #0
	}
}	
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3708      	adds	r7, #8
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	20000945 	.word	0x20000945
 800b0dc:	20000954 	.word	0x20000954
 800b0e0:	08021108 	.word	0x08021108
 800b0e4:	20000968 	.word	0x20000968
 800b0e8:	200000f0 	.word	0x200000f0

0800b0ec <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	6039      	str	r1, [r7, #0]
 800b0f6:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 800b0fc:	2206      	movs	r2, #6
 800b0fe:	493f      	ldr	r1, [pc, #252]	; (800b1fc <DHCP_init+0x110>)
 800b100:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800b104:	f7fc fcf6 	bl	8007af4 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 800b108:	4b3c      	ldr	r3, [pc, #240]	; (800b1fc <DHCP_init+0x110>)
 800b10a:	781a      	ldrb	r2, [r3, #0]
 800b10c:	4b3b      	ldr	r3, [pc, #236]	; (800b1fc <DHCP_init+0x110>)
 800b10e:	785b      	ldrb	r3, [r3, #1]
 800b110:	4313      	orrs	r3, r2
 800b112:	b2da      	uxtb	r2, r3
 800b114:	4b39      	ldr	r3, [pc, #228]	; (800b1fc <DHCP_init+0x110>)
 800b116:	789b      	ldrb	r3, [r3, #2]
 800b118:	4313      	orrs	r3, r2
 800b11a:	b2da      	uxtb	r2, r3
 800b11c:	4b37      	ldr	r3, [pc, #220]	; (800b1fc <DHCP_init+0x110>)
 800b11e:	78db      	ldrb	r3, [r3, #3]
 800b120:	4313      	orrs	r3, r2
 800b122:	b2da      	uxtb	r2, r3
 800b124:	4b35      	ldr	r3, [pc, #212]	; (800b1fc <DHCP_init+0x110>)
 800b126:	791b      	ldrb	r3, [r3, #4]
 800b128:	4313      	orrs	r3, r2
 800b12a:	b2da      	uxtb	r2, r3
 800b12c:	4b33      	ldr	r3, [pc, #204]	; (800b1fc <DHCP_init+0x110>)
 800b12e:	795b      	ldrb	r3, [r3, #5]
 800b130:	4313      	orrs	r3, r2
 800b132:	b2db      	uxtb	r3, r3
 800b134:	2b00      	cmp	r3, #0
 800b136:	d117      	bne.n	800b168 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 800b138:	4b30      	ldr	r3, [pc, #192]	; (800b1fc <DHCP_init+0x110>)
 800b13a:	2200      	movs	r2, #0
 800b13c:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 800b13e:	4b2f      	ldr	r3, [pc, #188]	; (800b1fc <DHCP_init+0x110>)
 800b140:	2208      	movs	r2, #8
 800b142:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 800b144:	4b2d      	ldr	r3, [pc, #180]	; (800b1fc <DHCP_init+0x110>)
 800b146:	22dc      	movs	r2, #220	; 0xdc
 800b148:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 800b14a:	4b2c      	ldr	r3, [pc, #176]	; (800b1fc <DHCP_init+0x110>)
 800b14c:	2200      	movs	r2, #0
 800b14e:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 800b150:	4b2a      	ldr	r3, [pc, #168]	; (800b1fc <DHCP_init+0x110>)
 800b152:	2200      	movs	r2, #0
 800b154:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 800b156:	4b29      	ldr	r3, [pc, #164]	; (800b1fc <DHCP_init+0x110>)
 800b158:	2200      	movs	r2, #0
 800b15a:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 800b15c:	2206      	movs	r2, #6
 800b15e:	4927      	ldr	r1, [pc, #156]	; (800b1fc <DHCP_init+0x110>)
 800b160:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800b164:	f7fc fd26 	bl	8007bb4 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 800b168:	4a25      	ldr	r2, [pc, #148]	; (800b200 <DHCP_init+0x114>)
 800b16a:	79fb      	ldrb	r3, [r7, #7]
 800b16c:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 800b16e:	4a25      	ldr	r2, [pc, #148]	; (800b204 <DHCP_init+0x118>)
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 800b174:	4b24      	ldr	r3, [pc, #144]	; (800b208 <DHCP_init+0x11c>)
 800b176:	4a25      	ldr	r2, [pc, #148]	; (800b20c <DHCP_init+0x120>)
 800b178:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 800b17a:	4b20      	ldr	r3, [pc, #128]	; (800b1fc <DHCP_init+0x110>)
 800b17c:	78db      	ldrb	r3, [r3, #3]
 800b17e:	461a      	mov	r2, r3
 800b180:	4b21      	ldr	r3, [pc, #132]	; (800b208 <DHCP_init+0x11c>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4413      	add	r3, r2
 800b186:	4a20      	ldr	r2, [pc, #128]	; (800b208 <DHCP_init+0x11c>)
 800b188:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 800b18a:	4b1c      	ldr	r3, [pc, #112]	; (800b1fc <DHCP_init+0x110>)
 800b18c:	791b      	ldrb	r3, [r3, #4]
 800b18e:	461a      	mov	r2, r3
 800b190:	4b1d      	ldr	r3, [pc, #116]	; (800b208 <DHCP_init+0x11c>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4413      	add	r3, r2
 800b196:	4a1c      	ldr	r2, [pc, #112]	; (800b208 <DHCP_init+0x11c>)
 800b198:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 800b19a:	4b18      	ldr	r3, [pc, #96]	; (800b1fc <DHCP_init+0x110>)
 800b19c:	795b      	ldrb	r3, [r3, #5]
 800b19e:	461a      	mov	r2, r3
 800b1a0:	4b19      	ldr	r3, [pc, #100]	; (800b208 <DHCP_init+0x11c>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	4a18      	ldr	r2, [pc, #96]	; (800b208 <DHCP_init+0x11c>)
 800b1a8:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 800b1aa:	4b14      	ldr	r3, [pc, #80]	; (800b1fc <DHCP_init+0x110>)
 800b1ac:	78da      	ldrb	r2, [r3, #3]
 800b1ae:	4b13      	ldr	r3, [pc, #76]	; (800b1fc <DHCP_init+0x110>)
 800b1b0:	791b      	ldrb	r3, [r3, #4]
 800b1b2:	4053      	eors	r3, r2
 800b1b4:	b2da      	uxtb	r2, r3
 800b1b6:	4b11      	ldr	r3, [pc, #68]	; (800b1fc <DHCP_init+0x110>)
 800b1b8:	795b      	ldrb	r3, [r3, #5]
 800b1ba:	4053      	eors	r3, r2
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	461a      	mov	r2, r3
 800b1c0:	4b11      	ldr	r3, [pc, #68]	; (800b208 <DHCP_init+0x11c>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	4a10      	ldr	r2, [pc, #64]	; (800b208 <DHCP_init+0x11c>)
 800b1c8:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 800b1ca:	f107 030c 	add.w	r3, r7, #12
 800b1ce:	2204      	movs	r2, #4
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800b1d6:	f7fc fced 	bl	8007bb4 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 800b1da:	f107 030c 	add.w	r3, r7, #12
 800b1de:	2204      	movs	r2, #4
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b1e6:	f7fc fce5 	bl	8007bb4 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 800b1ea:	f000 f813 	bl	800b214 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 800b1ee:	4b08      	ldr	r3, [pc, #32]	; (800b210 <DHCP_init+0x124>)
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	701a      	strb	r2, [r3, #0]
}
 800b1f4:	bf00      	nop
 800b1f6:	3710      	adds	r7, #16
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	20000974 	.word	0x20000974
 800b200:	20000945 	.word	0x20000945
 800b204:	20000970 	.word	0x20000970
 800b208:	2000096c 	.word	0x2000096c
 800b20c:	12345678 	.word	0x12345678
 800b210:	20000964 	.word	0x20000964

0800b214 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 800b214:	b480      	push	{r7}
 800b216:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 800b218:	4b06      	ldr	r3, [pc, #24]	; (800b234 <reset_DHCP_timeout+0x20>)
 800b21a:	2200      	movs	r2, #0
 800b21c:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 800b21e:	4b06      	ldr	r3, [pc, #24]	; (800b238 <reset_DHCP_timeout+0x24>)
 800b220:	2202      	movs	r2, #2
 800b222:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 800b224:	4b05      	ldr	r3, [pc, #20]	; (800b23c <reset_DHCP_timeout+0x28>)
 800b226:	2200      	movs	r2, #0
 800b228:	701a      	strb	r2, [r3, #0]
}
 800b22a:	bf00      	nop
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr
 800b234:	20000968 	.word	0x20000968
 800b238:	200000d4 	.word	0x200000d4
 800b23c:	20000965 	.word	0x20000965

0800b240 <DHCP_time_handler>:

void DHCP_time_handler(void)
{
 800b240:	b480      	push	{r7}
 800b242:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 800b244:	4b04      	ldr	r3, [pc, #16]	; (800b258 <DHCP_time_handler+0x18>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	3301      	adds	r3, #1
 800b24a:	4a03      	ldr	r2, [pc, #12]	; (800b258 <DHCP_time_handler+0x18>)
 800b24c:	6013      	str	r3, [r2, #0]
}
 800b24e:	bf00      	nop
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr
 800b258:	20000968 	.word	0x20000968

0800b25c <getIPfromDHCP>:

void getIPfromDHCP(uint8_t* ip)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 800b264:	4b0c      	ldr	r3, [pc, #48]	; (800b298 <getIPfromDHCP+0x3c>)
 800b266:	781a      	ldrb	r2, [r3, #0]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	3301      	adds	r3, #1
 800b270:	4a09      	ldr	r2, [pc, #36]	; (800b298 <getIPfromDHCP+0x3c>)
 800b272:	7852      	ldrb	r2, [r2, #1]
 800b274:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	3302      	adds	r3, #2
 800b27a:	4a07      	ldr	r2, [pc, #28]	; (800b298 <getIPfromDHCP+0x3c>)
 800b27c:	7892      	ldrb	r2, [r2, #2]
 800b27e:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	3303      	adds	r3, #3
 800b284:	4a04      	ldr	r2, [pc, #16]	; (800b298 <getIPfromDHCP+0x3c>)
 800b286:	78d2      	ldrb	r2, [r2, #3]
 800b288:	701a      	strb	r2, [r3, #0]
}
 800b28a:	bf00      	nop
 800b28c:	370c      	adds	r7, #12
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr
 800b296:	bf00      	nop
 800b298:	20000954 	.word	0x20000954

0800b29c <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b083      	sub	sp, #12
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 800b2a4:	4b0c      	ldr	r3, [pc, #48]	; (800b2d8 <getGWfromDHCP+0x3c>)
 800b2a6:	781a      	ldrb	r2, [r3, #0]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	4a09      	ldr	r2, [pc, #36]	; (800b2d8 <getGWfromDHCP+0x3c>)
 800b2b2:	7852      	ldrb	r2, [r2, #1]
 800b2b4:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	3302      	adds	r3, #2
 800b2ba:	4a07      	ldr	r2, [pc, #28]	; (800b2d8 <getGWfromDHCP+0x3c>)
 800b2bc:	7892      	ldrb	r2, [r2, #2]
 800b2be:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	3303      	adds	r3, #3
 800b2c4:	4a04      	ldr	r2, [pc, #16]	; (800b2d8 <getGWfromDHCP+0x3c>)
 800b2c6:	78d2      	ldrb	r2, [r2, #3]
 800b2c8:	701a      	strb	r2, [r3, #0]
}
 800b2ca:	bf00      	nop
 800b2cc:	370c      	adds	r7, #12
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr
 800b2d6:	bf00      	nop
 800b2d8:	20000958 	.word	0x20000958

0800b2dc <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 800b2e4:	4b0c      	ldr	r3, [pc, #48]	; (800b318 <getSNfromDHCP+0x3c>)
 800b2e6:	781a      	ldrb	r2, [r3, #0]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	4a09      	ldr	r2, [pc, #36]	; (800b318 <getSNfromDHCP+0x3c>)
 800b2f2:	7852      	ldrb	r2, [r2, #1]
 800b2f4:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	3302      	adds	r3, #2
 800b2fa:	4a07      	ldr	r2, [pc, #28]	; (800b318 <getSNfromDHCP+0x3c>)
 800b2fc:	7892      	ldrb	r2, [r2, #2]
 800b2fe:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	3303      	adds	r3, #3
 800b304:	4a04      	ldr	r2, [pc, #16]	; (800b318 <getSNfromDHCP+0x3c>)
 800b306:	78d2      	ldrb	r2, [r2, #3]
 800b308:	701a      	strb	r2, [r3, #0]
}
 800b30a:	bf00      	nop
 800b30c:	370c      	adds	r7, #12
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	2000095c 	.word	0x2000095c

0800b31c <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 800b324:	4b0c      	ldr	r3, [pc, #48]	; (800b358 <getDNSfromDHCP+0x3c>)
 800b326:	781a      	ldrb	r2, [r3, #0]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	3301      	adds	r3, #1
 800b330:	4a09      	ldr	r2, [pc, #36]	; (800b358 <getDNSfromDHCP+0x3c>)
 800b332:	7852      	ldrb	r2, [r2, #1]
 800b334:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	3302      	adds	r3, #2
 800b33a:	4a07      	ldr	r2, [pc, #28]	; (800b358 <getDNSfromDHCP+0x3c>)
 800b33c:	7892      	ldrb	r2, [r2, #2]
 800b33e:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	3303      	adds	r3, #3
 800b344:	4a04      	ldr	r2, [pc, #16]	; (800b358 <getDNSfromDHCP+0x3c>)
 800b346:	78d2      	ldrb	r2, [r2, #3]
 800b348:	701a      	strb	r2, [r3, #0]
}
 800b34a:	bf00      	nop
 800b34c:	370c      	adds	r7, #12
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr
 800b356:	bf00      	nop
 800b358:	20000960 	.word	0x20000960

0800b35c <getDHCPLeasetime>:

uint32_t getDHCPLeasetime(void)
{
 800b35c:	b480      	push	{r7}
 800b35e:	af00      	add	r7, sp, #0
	return dhcp_lease_time;
 800b360:	4b03      	ldr	r3, [pc, #12]	; (800b370 <getDHCPLeasetime+0x14>)
 800b362:	681b      	ldr	r3, [r3, #0]
}
 800b364:	4618      	mov	r0, r3
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr
 800b36e:	bf00      	nop
 800b370:	200000d0 	.word	0x200000d0

0800b374 <NibbleToHex>:

char NibbleToHex(uint8_t nibble)
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
 800b37a:	4603      	mov	r3, r0
 800b37c:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 800b37e:	79fb      	ldrb	r3, [r7, #7]
 800b380:	f003 030f 	and.w	r3, r3, #15
 800b384:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 800b386:	79fb      	ldrb	r3, [r7, #7]
 800b388:	2b09      	cmp	r3, #9
 800b38a:	d803      	bhi.n	800b394 <NibbleToHex+0x20>
    return nibble + '0';
 800b38c:	79fb      	ldrb	r3, [r7, #7]
 800b38e:	3330      	adds	r3, #48	; 0x30
 800b390:	b2db      	uxtb	r3, r3
 800b392:	e002      	b.n	800b39a <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 800b394:	79fb      	ldrb	r3, [r7, #7]
 800b396:	3337      	adds	r3, #55	; 0x37
 800b398:	b2db      	uxtb	r3, r3
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	370c      	adds	r7, #12
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr

0800b3a6 <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 800b3a6:	b480      	push	{r7}
 800b3a8:	b085      	sub	sp, #20
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	1c5a      	adds	r2, r3, #1
 800b3b2:	607a      	str	r2, [r7, #4]
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	021b      	lsls	r3, r3, #8
 800b3ba:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	b29a      	uxth	r2, r3
 800b3c2:	89fb      	ldrh	r3, [r7, #14]
 800b3c4:	4413      	add	r3, r2
 800b3c6:	81fb      	strh	r3, [r7, #14]
	return i;
 800b3c8:	89fb      	ldrh	r3, [r7, #14]
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3714      	adds	r7, #20
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr

0800b3d6 <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 800b3d6:	b480      	push	{r7}
 800b3d8:	b083      	sub	sp, #12
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
 800b3de:	460b      	mov	r3, r1
 800b3e0:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 800b3e2:	887b      	ldrh	r3, [r7, #2]
 800b3e4:	0a1b      	lsrs	r3, r3, #8
 800b3e6:	b299      	uxth	r1, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	1c5a      	adds	r2, r3, #1
 800b3ec:	607a      	str	r2, [r7, #4]
 800b3ee:	b2ca      	uxtb	r2, r1
 800b3f0:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	1c5a      	adds	r2, r3, #1
 800b3f6:	607a      	str	r2, [r7, #4]
 800b3f8:	887a      	ldrh	r2, [r7, #2]
 800b3fa:	b2d2      	uxtb	r2, r2
 800b3fc:	701a      	strb	r2, [r3, #0]
	return s;
 800b3fe:	687b      	ldr	r3, [r7, #4]
}
 800b400:	4618      	mov	r0, r3
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b08b      	sub	sp, #44	; 0x2c
 800b410:	af00      	add	r7, sp, #0
 800b412:	60f8      	str	r0, [r7, #12]
 800b414:	60b9      	str	r1, [r7, #8]
 800b416:	607a      	str	r2, [r7, #4]
 800b418:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 800b41a:	2300      	movs	r3, #0
 800b41c:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 800b41e:	2300      	movs	r3, #0
 800b420:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 800b422:	2300      	movs	r3, #0
 800b424:	617b      	str	r3, [r7, #20]

	cp = compressed;
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 800b42a:	6a3b      	ldr	r3, [r7, #32]
 800b42c:	1c5a      	adds	r2, r3, #1
 800b42e:	623a      	str	r2, [r7, #32]
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (!indirect) clen++;
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d102      	bne.n	800b440 <parse_name+0x34>
 800b43a:	69fb      	ldr	r3, [r7, #28]
 800b43c:	3301      	adds	r3, #1
 800b43e:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 800b440:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b442:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b446:	2bc0      	cmp	r3, #192	; 0xc0
 800b448:	d117      	bne.n	800b47a <parse_name+0x6e>
		{
			if (!indirect)
 800b44a:	69bb      	ldr	r3, [r7, #24]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d102      	bne.n	800b456 <parse_name+0x4a>
				clen++;
 800b450:	69fb      	ldr	r3, [r7, #28]
 800b452:	3301      	adds	r3, #1
 800b454:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 800b456:	2301      	movs	r3, #1
 800b458:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 800b45a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b45c:	021b      	lsls	r3, r3, #8
 800b45e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800b462:	6a3a      	ldr	r2, [r7, #32]
 800b464:	7812      	ldrb	r2, [r2, #0]
 800b466:	4413      	add	r3, r2
 800b468:	461a      	mov	r2, r3
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	4413      	add	r3, r2
 800b46e:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 800b470:	6a3b      	ldr	r3, [r7, #32]
 800b472:	1c5a      	adds	r2, r3, #1
 800b474:	623a      	str	r2, [r7, #32]
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		if (slen == 0)	/* zero length == all done */
 800b47a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d02b      	beq.n	800b4d8 <parse_name+0xcc>
			break;

		len -= slen + 1;
 800b480:	887a      	ldrh	r2, [r7, #2]
 800b482:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b484:	1ad3      	subs	r3, r2, r3
 800b486:	b29b      	uxth	r3, r3
 800b488:	3b01      	subs	r3, #1
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 800b48e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b492:	2b00      	cmp	r3, #0
 800b494:	da02      	bge.n	800b49c <parse_name+0x90>
 800b496:	f04f 33ff 	mov.w	r3, #4294967295
 800b49a:	e038      	b.n	800b50e <parse_name+0x102>

		if (!indirect) clen += slen;
 800b49c:	69bb      	ldr	r3, [r7, #24]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d10c      	bne.n	800b4bc <parse_name+0xb0>
 800b4a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b4a4:	69fa      	ldr	r2, [r7, #28]
 800b4a6:	4413      	add	r3, r2
 800b4a8:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 800b4aa:	e007      	b.n	800b4bc <parse_name+0xb0>
 800b4ac:	6a3a      	ldr	r2, [r7, #32]
 800b4ae:	1c53      	adds	r3, r2, #1
 800b4b0:	623b      	str	r3, [r7, #32]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	1c59      	adds	r1, r3, #1
 800b4b6:	6079      	str	r1, [r7, #4]
 800b4b8:	7812      	ldrb	r2, [r2, #0]
 800b4ba:	701a      	strb	r2, [r3, #0]
 800b4bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b4be:	1e5a      	subs	r2, r3, #1
 800b4c0:	84fa      	strh	r2, [r7, #38]	; 0x26
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d1f2      	bne.n	800b4ac <parse_name+0xa0>
		*buf++ = '.';
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	1c5a      	adds	r2, r3, #1
 800b4ca:	607a      	str	r2, [r7, #4]
 800b4cc:	222e      	movs	r2, #46	; 0x2e
 800b4ce:	701a      	strb	r2, [r3, #0]
		nseg++;
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 800b4d6:	e7a8      	b.n	800b42a <parse_name+0x1e>
			break;
 800b4d8:	bf00      	nop
	}

	if (nseg == 0)
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d10a      	bne.n	800b4f6 <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	1c5a      	adds	r2, r3, #1
 800b4e4:	607a      	str	r2, [r7, #4]
 800b4e6:	222e      	movs	r2, #46	; 0x2e
 800b4e8:	701a      	strb	r2, [r3, #0]
		len--;
 800b4ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	3b01      	subs	r3, #1
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	1c5a      	adds	r2, r3, #1
 800b4fa:	607a      	str	r2, [r7, #4]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	701a      	strb	r2, [r3, #0]
	len--;
 800b500:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b504:	b29b      	uxth	r3, r3
 800b506:	3b01      	subs	r3, #1
 800b508:	b29b      	uxth	r3, r3
 800b50a:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 800b50c:	69fb      	ldr	r3, [r7, #28]
}
 800b50e:	4618      	mov	r0, r3
 800b510:	372c      	adds	r7, #44	; 0x2c
 800b512:	46bd      	mov	sp, r7
 800b514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b518:	4770      	bx	lr

0800b51a <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b0b4      	sub	sp, #208	; 0xd0
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
 800b522:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 800b524:	f107 020c 	add.w	r2, r7, #12
 800b528:	23c0      	movs	r3, #192	; 0xc0
 800b52a:	6839      	ldr	r1, [r7, #0]
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f7ff ff6d 	bl	800b40c <parse_name>
 800b532:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc


	if (len == -1) return 0;
 800b536:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b53e:	d101      	bne.n	800b544 <dns_question+0x2a>
 800b540:	2300      	movs	r3, #0
 800b542:	e00b      	b.n	800b55c <dns_question+0x42>

	cp += len;
 800b544:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b548:	683a      	ldr	r2, [r7, #0]
 800b54a:	4413      	add	r3, r2
 800b54c:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	3302      	adds	r3, #2
 800b552:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	3302      	adds	r3, #2
 800b558:	603b      	str	r3, [r7, #0]

	return cp;
 800b55a:	683b      	ldr	r3, [r7, #0]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	37d0      	adds	r7, #208	; 0xd0
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b0b6      	sub	sp, #216	; 0xd8
 800b568:	af00      	add	r7, sp, #0
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 800b570:	f107 0210 	add.w	r2, r7, #16
 800b574:	23c0      	movs	r3, #192	; 0xc0
 800b576:	68b9      	ldr	r1, [r7, #8]
 800b578:	68f8      	ldr	r0, [r7, #12]
 800b57a:	f7ff ff47 	bl	800b40c <parse_name>
 800b57e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

	if (len == -1) return 0;
 800b582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b58a:	d101      	bne.n	800b590 <dns_answer+0x2c>
 800b58c:	2300      	movs	r3, #0
 800b58e:	e0f9      	b.n	800b784 <dns_answer+0x220>

	cp += len;
 800b590:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b594:	68ba      	ldr	r2, [r7, #8]
 800b596:	4413      	add	r3, r2
 800b598:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 800b59a:	68b8      	ldr	r0, [r7, #8]
 800b59c:	f7ff ff03 	bl	800b3a6 <get16>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	cp += 2;		/* type */
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	3302      	adds	r3, #2
 800b5aa:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	3302      	adds	r3, #2
 800b5b0:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	3304      	adds	r3, #4
 800b5b6:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	3302      	adds	r3, #2
 800b5bc:	60bb      	str	r3, [r7, #8]


	switch (type)
 800b5be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b5c2:	2b10      	cmp	r3, #16
 800b5c4:	f000 80da 	beq.w	800b77c <dns_answer+0x218>
 800b5c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b5cc:	2b10      	cmp	r3, #16
 800b5ce:	f300 80d7 	bgt.w	800b780 <dns_answer+0x21c>
 800b5d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b5d6:	2b0f      	cmp	r3, #15
 800b5d8:	d07d      	beq.n	800b6d6 <dns_answer+0x172>
 800b5da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b5de:	2b0f      	cmp	r3, #15
 800b5e0:	f300 80ce 	bgt.w	800b780 <dns_answer+0x21c>
 800b5e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b5e8:	2b0c      	cmp	r3, #12
 800b5ea:	dc26      	bgt.n	800b63a <dns_answer+0xd6>
 800b5ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	f340 80c5 	ble.w	800b780 <dns_answer+0x21c>
 800b5f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b600:	f241 32a4 	movw	r2, #5028	; 0x13a4
 800b604:	401a      	ands	r2, r3
 800b606:	2a00      	cmp	r2, #0
 800b608:	bf14      	ite	ne
 800b60a:	2201      	movne	r2, #1
 800b60c:	2200      	moveq	r2, #0
 800b60e:	b2d2      	uxtb	r2, r2
 800b610:	2a00      	cmp	r2, #0
 800b612:	d133      	bne.n	800b67c <dns_answer+0x118>
 800b614:	f003 0240 	and.w	r2, r3, #64	; 0x40
 800b618:	2a00      	cmp	r2, #0
 800b61a:	bf14      	ite	ne
 800b61c:	2201      	movne	r2, #1
 800b61e:	2200      	moveq	r2, #0
 800b620:	b2d2      	uxtb	r2, r2
 800b622:	2a00      	cmp	r2, #0
 800b624:	d170      	bne.n	800b708 <dns_answer+0x1a4>
 800b626:	f003 0302 	and.w	r3, r3, #2
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	bf14      	ite	ne
 800b62e:	2301      	movne	r3, #1
 800b630:	2300      	moveq	r3, #0
 800b632:	b2db      	uxtb	r3, r3
 800b634:	2b00      	cmp	r3, #0
 800b636:	d105      	bne.n	800b644 <dns_answer+0xe0>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 800b638:	e0a2      	b.n	800b780 <dns_answer+0x21c>
	switch (type)
 800b63a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b63e:	2b0d      	cmp	r3, #13
 800b640:	d032      	beq.n	800b6a8 <dns_answer+0x144>
		break;
 800b642:	e09d      	b.n	800b780 <dns_answer+0x21c>
		ip_from_dns[0] = *cp++;
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	1c5a      	adds	r2, r3, #1
 800b648:	60ba      	str	r2, [r7, #8]
 800b64a:	781a      	ldrb	r2, [r3, #0]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	1c5a      	adds	r2, r3, #1
 800b654:	60ba      	str	r2, [r7, #8]
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	3201      	adds	r2, #1
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	1c5a      	adds	r2, r3, #1
 800b662:	60ba      	str	r2, [r7, #8]
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	3202      	adds	r2, #2
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	1c5a      	adds	r2, r3, #1
 800b670:	60ba      	str	r2, [r7, #8]
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	3203      	adds	r2, #3
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	7013      	strb	r3, [r2, #0]
		break;
 800b67a:	e082      	b.n	800b782 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 800b67c:	f107 0210 	add.w	r2, r7, #16
 800b680:	23c0      	movs	r3, #192	; 0xc0
 800b682:	68b9      	ldr	r1, [r7, #8]
 800b684:	68f8      	ldr	r0, [r7, #12]
 800b686:	f7ff fec1 	bl	800b40c <parse_name>
 800b68a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 800b68e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b692:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b696:	d101      	bne.n	800b69c <dns_answer+0x138>
 800b698:	2300      	movs	r3, #0
 800b69a:	e073      	b.n	800b784 <dns_answer+0x220>
		cp += len;
 800b69c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6a0:	68ba      	ldr	r2, [r7, #8]
 800b6a2:	4413      	add	r3, r2
 800b6a4:	60bb      	str	r3, [r7, #8]
		break;
 800b6a6:	e06c      	b.n	800b782 <dns_answer+0x21e>
		len = *cp++;
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	1c5a      	adds	r2, r3, #1
 800b6ac:	60ba      	str	r2, [r7, #8]
 800b6ae:	781b      	ldrb	r3, [r3, #0]
 800b6b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 800b6b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6b8:	68ba      	ldr	r2, [r7, #8]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	60bb      	str	r3, [r7, #8]
		len = *cp++;
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	1c5a      	adds	r2, r3, #1
 800b6c2:	60ba      	str	r2, [r7, #8]
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 800b6ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6ce:	68ba      	ldr	r2, [r7, #8]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	60bb      	str	r3, [r7, #8]
		break;
 800b6d4:	e055      	b.n	800b782 <dns_answer+0x21e>
		cp += 2;
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	3302      	adds	r3, #2
 800b6da:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 800b6dc:	f107 0210 	add.w	r2, r7, #16
 800b6e0:	23c0      	movs	r3, #192	; 0xc0
 800b6e2:	68b9      	ldr	r1, [r7, #8]
 800b6e4:	68f8      	ldr	r0, [r7, #12]
 800b6e6:	f7ff fe91 	bl	800b40c <parse_name>
 800b6ea:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 800b6ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6f6:	d101      	bne.n	800b6fc <dns_answer+0x198>
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	e043      	b.n	800b784 <dns_answer+0x220>
		cp += len;
 800b6fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b700:	68ba      	ldr	r2, [r7, #8]
 800b702:	4413      	add	r3, r2
 800b704:	60bb      	str	r3, [r7, #8]
		break;
 800b706:	e03c      	b.n	800b782 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 800b708:	f107 0210 	add.w	r2, r7, #16
 800b70c:	23c0      	movs	r3, #192	; 0xc0
 800b70e:	68b9      	ldr	r1, [r7, #8]
 800b710:	68f8      	ldr	r0, [r7, #12]
 800b712:	f7ff fe7b 	bl	800b40c <parse_name>
 800b716:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 800b71a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b71e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b722:	d101      	bne.n	800b728 <dns_answer+0x1c4>
 800b724:	2300      	movs	r3, #0
 800b726:	e02d      	b.n	800b784 <dns_answer+0x220>
		cp += len;
 800b728:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b72c:	68ba      	ldr	r2, [r7, #8]
 800b72e:	4413      	add	r3, r2
 800b730:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 800b732:	f107 0210 	add.w	r2, r7, #16
 800b736:	23c0      	movs	r3, #192	; 0xc0
 800b738:	68b9      	ldr	r1, [r7, #8]
 800b73a:	68f8      	ldr	r0, [r7, #12]
 800b73c:	f7ff fe66 	bl	800b40c <parse_name>
 800b740:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 800b744:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b74c:	d101      	bne.n	800b752 <dns_answer+0x1ee>
 800b74e:	2300      	movs	r3, #0
 800b750:	e018      	b.n	800b784 <dns_answer+0x220>
		cp += len;
 800b752:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b756:	68ba      	ldr	r2, [r7, #8]
 800b758:	4413      	add	r3, r2
 800b75a:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	3304      	adds	r3, #4
 800b760:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	3304      	adds	r3, #4
 800b766:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	3304      	adds	r3, #4
 800b76c:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	3304      	adds	r3, #4
 800b772:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	3304      	adds	r3, #4
 800b778:	60bb      	str	r3, [r7, #8]
		break;
 800b77a:	e002      	b.n	800b782 <dns_answer+0x21e>
		break;
 800b77c:	bf00      	nop
 800b77e:	e000      	b.n	800b782 <dns_answer+0x21e>
		break;
 800b780:	bf00      	nop
	}

	return cp;
 800b782:	68bb      	ldr	r3, [r7, #8]
}
 800b784:	4618      	mov	r0, r3
 800b786:	37d8      	adds	r7, #216	; 0xd8
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b088      	sub	sp, #32
 800b790:	af00      	add	r7, sp, #0
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 800b79c:	2212      	movs	r2, #18
 800b79e:	2100      	movs	r1, #0
 800b7a0:	68f8      	ldr	r0, [r7, #12]
 800b7a2:	f010 fbb1 	bl	801bf08 <memset>

	pdhdr->id = get16(&msg[0]);
 800b7a6:	6978      	ldr	r0, [r7, #20]
 800b7a8:	f7ff fdfd 	bl	800b3a6 <get16>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	3302      	adds	r3, #2
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f7ff fdf4 	bl	800b3a6 <get16>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 800b7c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	da02      	bge.n	800b7d0 <parseDNSMSG+0x44>
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 800b7d0:	8a7b      	ldrh	r3, [r7, #18]
 800b7d2:	0adb      	lsrs	r3, r3, #11
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	b2db      	uxtb	r3, r3
 800b7d8:	f003 030f 	and.w	r3, r3, #15
 800b7dc:	b2da      	uxtb	r2, r3
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 800b7e2:	8a7b      	ldrh	r3, [r7, #18]
 800b7e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d002      	beq.n	800b7f2 <parseDNSMSG+0x66>
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 800b7f2:	8a7b      	ldrh	r3, [r7, #18]
 800b7f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d002      	beq.n	800b802 <parseDNSMSG+0x76>
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2201      	movs	r2, #1
 800b800:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 800b802:	8a7b      	ldrh	r3, [r7, #18]
 800b804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d002      	beq.n	800b812 <parseDNSMSG+0x86>
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2201      	movs	r2, #1
 800b810:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 800b812:	8a7b      	ldrh	r3, [r7, #18]
 800b814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d002      	beq.n	800b822 <parseDNSMSG+0x96>
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2201      	movs	r2, #1
 800b820:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 800b822:	8a7b      	ldrh	r3, [r7, #18]
 800b824:	b2db      	uxtb	r3, r3
 800b826:	f003 030f 	and.w	r3, r3, #15
 800b82a:	b2da      	uxtb	r2, r3
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	3304      	adds	r3, #4
 800b834:	4618      	mov	r0, r3
 800b836:	f7ff fdb6 	bl	800b3a6 <get16>
 800b83a:	4603      	mov	r3, r0
 800b83c:	461a      	mov	r2, r3
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	3306      	adds	r3, #6
 800b846:	4618      	mov	r0, r3
 800b848:	f7ff fdad 	bl	800b3a6 <get16>
 800b84c:	4603      	mov	r3, r0
 800b84e:	461a      	mov	r2, r3
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	3308      	adds	r3, #8
 800b858:	4618      	mov	r0, r3
 800b85a:	f7ff fda4 	bl	800b3a6 <get16>
 800b85e:	4603      	mov	r3, r0
 800b860:	461a      	mov	r2, r3
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	330a      	adds	r3, #10
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7ff fd9b 	bl	800b3a6 <get16>
 800b870:	4603      	mov	r3, r0
 800b872:	461a      	mov	r2, r3
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	330c      	adds	r3, #12
 800b87c:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 800b87e:	2300      	movs	r3, #0
 800b880:	83fb      	strh	r3, [r7, #30]
 800b882:	e00d      	b.n	800b8a0 <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 800b884:	69b9      	ldr	r1, [r7, #24]
 800b886:	6978      	ldr	r0, [r7, #20]
 800b888:	f7ff fe47 	bl	800b51a <dns_question>
 800b88c:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 800b88e:	69bb      	ldr	r3, [r7, #24]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d102      	bne.n	800b89a <parseDNSMSG+0x10e>
 800b894:	f04f 33ff 	mov.w	r3, #4294967295
 800b898:	e03b      	b.n	800b912 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 800b89a:	8bfb      	ldrh	r3, [r7, #30]
 800b89c:	3301      	adds	r3, #1
 800b89e:	83fb      	strh	r3, [r7, #30]
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	895b      	ldrh	r3, [r3, #10]
 800b8a4:	8bfa      	ldrh	r2, [r7, #30]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d3ec      	bcc.n	800b884 <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	83fb      	strh	r3, [r7, #30]
 800b8ae:	e00e      	b.n	800b8ce <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	69b9      	ldr	r1, [r7, #24]
 800b8b4:	6978      	ldr	r0, [r7, #20]
 800b8b6:	f7ff fe55 	bl	800b564 <dns_answer>
 800b8ba:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 800b8bc:	69bb      	ldr	r3, [r7, #24]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d102      	bne.n	800b8c8 <parseDNSMSG+0x13c>
 800b8c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b8c6:	e024      	b.n	800b912 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 800b8c8:	8bfb      	ldrh	r3, [r7, #30]
 800b8ca:	3301      	adds	r3, #1
 800b8cc:	83fb      	strh	r3, [r7, #30]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	899b      	ldrh	r3, [r3, #12]
 800b8d2:	8bfa      	ldrh	r2, [r7, #30]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d3eb      	bcc.n	800b8b0 <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 800b8d8:	2300      	movs	r3, #0
 800b8da:	83fb      	strh	r3, [r7, #30]
 800b8dc:	e002      	b.n	800b8e4 <parseDNSMSG+0x158>
 800b8de:	8bfb      	ldrh	r3, [r7, #30]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	83fb      	strh	r3, [r7, #30]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	89db      	ldrh	r3, [r3, #14]
 800b8e8:	8bfa      	ldrh	r2, [r7, #30]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d3f7      	bcc.n	800b8de <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	83fb      	strh	r3, [r7, #30]
 800b8f2:	e002      	b.n	800b8fa <parseDNSMSG+0x16e>
 800b8f4:	8bfb      	ldrh	r3, [r7, #30]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	83fb      	strh	r3, [r7, #30]
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	8a1b      	ldrh	r3, [r3, #16]
 800b8fe:	8bfa      	ldrh	r2, [r7, #30]
 800b900:	429a      	cmp	r2, r3
 800b902:	d3f7      	bcc.n	800b8f4 <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	7a1b      	ldrb	r3, [r3, #8]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d101      	bne.n	800b910 <parseDNSMSG+0x184>
 800b90c:	2301      	movs	r3, #1
 800b90e:	e000      	b.n	800b912 <parseDNSMSG+0x186>
	else return 0;
 800b910:	2300      	movs	r3, #0
}
 800b912:	4618      	mov	r0, r3
 800b914:	3720      	adds	r7, #32
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
	...

0800b91c <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b0b8      	sub	sp, #224	; 0xe0
 800b920:	af00      	add	r7, sp, #0
 800b922:	60b9      	str	r1, [r7, #8]
 800b924:	607a      	str	r2, [r7, #4]
 800b926:	461a      	mov	r2, r3
 800b928:	4603      	mov	r3, r0
 800b92a:	81fb      	strh	r3, [r7, #14]
 800b92c:	4613      	mov	r3, r2
 800b92e:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	DNS_MSGID++;
 800b936:	4b57      	ldr	r3, [pc, #348]	; (800ba94 <dns_makequery+0x178>)
 800b938:	881b      	ldrh	r3, [r3, #0]
 800b93a:	3301      	adds	r3, #1
 800b93c:	b29a      	uxth	r2, r3
 800b93e:	4b55      	ldr	r3, [pc, #340]	; (800ba94 <dns_makequery+0x178>)
 800b940:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 800b942:	4b54      	ldr	r3, [pc, #336]	; (800ba94 <dns_makequery+0x178>)
 800b944:	881b      	ldrh	r3, [r3, #0]
 800b946:	4619      	mov	r1, r3
 800b948:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800b94c:	f7ff fd43 	bl	800b3d6 <put16>
 800b950:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 800b954:	89fb      	ldrh	r3, [r7, #14]
 800b956:	02db      	lsls	r3, r3, #11
 800b958:	b21b      	sxth	r3, r3
 800b95a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b95e:	b21b      	sxth	r3, r3
 800b960:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	cp = put16(cp, p);
 800b964:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800b968:	4619      	mov	r1, r3
 800b96a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800b96e:	f7ff fd32 	bl	800b3d6 <put16>
 800b972:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 1);
 800b976:	2101      	movs	r1, #1
 800b978:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800b97c:	f7ff fd2b 	bl	800b3d6 <put16>
 800b980:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 800b984:	2100      	movs	r1, #0
 800b986:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800b98a:	f7ff fd24 	bl	800b3d6 <put16>
 800b98e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 800b992:	2100      	movs	r1, #0
 800b994:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800b998:	f7ff fd1d 	bl	800b3d6 <put16>
 800b99c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 800b9a0:	2100      	movs	r1, #0
 800b9a2:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800b9a6:	f7ff fd16 	bl	800b3d6 <put16>
 800b9aa:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	strcpy(sname, name);
 800b9ae:	f107 0310 	add.w	r3, r7, #16
 800b9b2:	68b9      	ldr	r1, [r7, #8]
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f010 fc74 	bl	801c2a2 <strcpy>
	dname = sname;
 800b9ba:	f107 0310 	add.w	r3, r7, #16
 800b9be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	dlen = strlen(dname);
 800b9c2:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800b9c6:	f7f4 fc6b 	bl	80002a0 <strlen>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 800b9d0:	212e      	movs	r1, #46	; 0x2e
 800b9d2:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800b9d6:	f010 faae 	bl	801bf36 <strchr>
 800b9da:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 800b9de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d006      	beq.n	800b9f4 <dns_makequery+0xd8>
 800b9e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b9ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9ee:	1ad3      	subs	r3, r2, r3
 800b9f0:	81bb      	strh	r3, [r7, #12]
 800b9f2:	e002      	b.n	800b9fa <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 800b9f4:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800b9f8:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 800b9fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9fe:	1c5a      	adds	r2, r3, #1
 800ba00:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ba04:	89ba      	ldrh	r2, [r7, #12]
 800ba06:	b2d2      	uxtb	r2, r2
 800ba08:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 800ba0a:	89bb      	ldrh	r3, [r7, #12]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d029      	beq.n	800ba64 <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 800ba10:	89bb      	ldrh	r3, [r7, #12]
 800ba12:	461a      	mov	r2, r3
 800ba14:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800ba18:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800ba1c:	f010 face 	bl	801bfbc <strncpy>
		cp += len;
 800ba20:	89bb      	ldrh	r3, [r7, #12]
 800ba22:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ba26:	4413      	add	r3, r2
 800ba28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		if (cp1 == NULL)
 800ba2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d107      	bne.n	800ba44 <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 800ba34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba38:	1c5a      	adds	r2, r3, #1
 800ba3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ba3e:	2200      	movs	r2, #0
 800ba40:	701a      	strb	r2, [r3, #0]
			break;
 800ba42:	e010      	b.n	800ba66 <dns_makequery+0x14a>
		}
		dname += len+1;
 800ba44:	89bb      	ldrh	r3, [r7, #12]
 800ba46:	3301      	adds	r3, #1
 800ba48:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800ba4c:	4413      	add	r3, r2
 800ba4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		dlen -= len+1;
 800ba52:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 800ba56:	89bb      	ldrh	r3, [r7, #12]
 800ba58:	1ad3      	subs	r3, r2, r3
 800ba5a:	b29b      	uxth	r3, r3
 800ba5c:	3b01      	subs	r3, #1
 800ba5e:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		cp1 = strchr(dname, '.');
 800ba62:	e7b5      	b.n	800b9d0 <dns_makequery+0xb4>
		if (len == 0) break;
 800ba64:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 800ba66:	2101      	movs	r1, #1
 800ba68:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800ba6c:	f7ff fcb3 	bl	800b3d6 <put16>
 800ba70:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0x0001);				/* class */
 800ba74:	2101      	movs	r1, #1
 800ba76:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800ba7a:	f7ff fcac 	bl	800b3d6 <put16>
 800ba7e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 800ba82:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	1ad3      	subs	r3, r2, r3
 800ba8a:	b21b      	sxth	r3, r3
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	37e0      	adds	r7, #224	; 0xe0
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	20000982 	.word	0x20000982

0800ba98 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 800ba9c:	4b0f      	ldr	r3, [pc, #60]	; (800badc <check_DNS_timeout+0x44>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	2b02      	cmp	r3, #2
 800baa2:	d914      	bls.n	800bace <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 800baa4:	4b0d      	ldr	r3, [pc, #52]	; (800badc <check_DNS_timeout+0x44>)
 800baa6:	2200      	movs	r2, #0
 800baa8:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 800baaa:	4b0d      	ldr	r3, [pc, #52]	; (800bae0 <check_DNS_timeout+0x48>)
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	2b01      	cmp	r3, #1
 800bab0:	d905      	bls.n	800babe <check_DNS_timeout+0x26>
			retry_count = 0;
 800bab2:	4b0b      	ldr	r3, [pc, #44]	; (800bae0 <check_DNS_timeout+0x48>)
 800bab4:	2200      	movs	r2, #0
 800bab6:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 800bab8:	f04f 33ff 	mov.w	r3, #4294967295
 800babc:	e008      	b.n	800bad0 <check_DNS_timeout+0x38>
		}
		retry_count++;
 800babe:	4b08      	ldr	r3, [pc, #32]	; (800bae0 <check_DNS_timeout+0x48>)
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	3301      	adds	r3, #1
 800bac4:	b2da      	uxtb	r2, r3
 800bac6:	4b06      	ldr	r3, [pc, #24]	; (800bae0 <check_DNS_timeout+0x48>)
 800bac8:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 800baca:	2300      	movs	r3, #0
 800bacc:	e000      	b.n	800bad0 <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 800bace:	2301      	movs	r3, #1
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr
 800bada:	bf00      	nop
 800badc:	20000984 	.word	0x20000984
 800bae0:	20000988 	.word	0x20000988

0800bae4 <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
 800baea:	4603      	mov	r3, r0
 800baec:	6039      	str	r1, [r7, #0]
 800baee:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 800baf0:	4a07      	ldr	r2, [pc, #28]	; (800bb10 <DNS_init+0x2c>)
 800baf2:	79fb      	ldrb	r3, [r7, #7]
 800baf4:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 800baf6:	4a07      	ldr	r2, [pc, #28]	; (800bb14 <DNS_init+0x30>)
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 800bafc:	4b06      	ldr	r3, [pc, #24]	; (800bb18 <DNS_init+0x34>)
 800bafe:	f241 1222 	movw	r2, #4386	; 0x1122
 800bb02:	801a      	strh	r2, [r3, #0]
}
 800bb04:	bf00      	nop
 800bb06:	370c      	adds	r7, #12
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr
 800bb10:	20000980 	.word	0x20000980
 800bb14:	2000097c 	.word	0x2000097c
 800bb18:	20000982 	.word	0x20000982

0800bb1c <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, const uint8_t * name, uint8_t * ip_from_dns)
{
 800bb1c:	b590      	push	{r4, r7, lr}
 800bb1e:	b08f      	sub	sp, #60	; 0x3c
 800bb20:	af02      	add	r7, sp, #8
 800bb22:	60f8      	str	r0, [r7, #12]
 800bb24:	60b9      	str	r1, [r7, #8]
 800bb26:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 800bb28:	4b3b      	ldr	r3, [pc, #236]	; (800bc18 <DNS_run+0xfc>)
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 800bb2e:	4b3b      	ldr	r3, [pc, #236]	; (800bc1c <DNS_run+0x100>)
 800bb30:	2200      	movs	r2, #0
 800bb32:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 800bb34:	4b3a      	ldr	r3, [pc, #232]	; (800bc20 <DNS_run+0x104>)
 800bb36:	7818      	ldrb	r0, [r3, #0]
 800bb38:	2300      	movs	r3, #0
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	2102      	movs	r1, #2
 800bb3e:	f7fc fa2f 	bl	8007fa0 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 800bb42:	4b38      	ldr	r3, [pc, #224]	; (800bc24 <DNS_run+0x108>)
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb4a:	68b9      	ldr	r1, [r7, #8]
 800bb4c:	2000      	movs	r0, #0
 800bb4e:	f7ff fee5 	bl	800b91c <dns_makequery>
 800bb52:	4603      	mov	r3, r0
 800bb54:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 800bb56:	4b32      	ldr	r3, [pc, #200]	; (800bc20 <DNS_run+0x104>)
 800bb58:	7818      	ldrb	r0, [r3, #0]
 800bb5a:	4b32      	ldr	r3, [pc, #200]	; (800bc24 <DNS_run+0x108>)
 800bb5c:	6819      	ldr	r1, [r3, #0]
 800bb5e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bb60:	2335      	movs	r3, #53	; 0x35
 800bb62:	9300      	str	r3, [sp, #0]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f7fc fef9 	bl	800895c <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 800bb6a:	4b2d      	ldr	r3, [pc, #180]	; (800bc20 <DNS_run+0x104>)
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7fc f8cb 	bl	8007d0a <getSn_RX_RSR>
 800bb74:	4603      	mov	r3, r0
 800bb76:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bb78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d029      	beq.n	800bbd2 <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 800bb7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bb80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb84:	d902      	bls.n	800bb8c <DNS_run+0x70>
 800bb86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb8a:	85fb      	strh	r3, [r7, #46]	; 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 800bb8c:	4b24      	ldr	r3, [pc, #144]	; (800bc20 <DNS_run+0x104>)
 800bb8e:	7818      	ldrb	r0, [r3, #0]
 800bb90:	4b24      	ldr	r3, [pc, #144]	; (800bc24 <DNS_run+0x108>)
 800bb92:	6819      	ldr	r1, [r3, #0]
 800bb94:	f107 0414 	add.w	r4, r7, #20
 800bb98:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bb9a:	f107 0312 	add.w	r3, r7, #18
 800bb9e:	9300      	str	r3, [sp, #0]
 800bba0:	4623      	mov	r3, r4
 800bba2:	f7fd f811 	bl	8008bc8 <recvfrom>
 800bba6:	4603      	mov	r3, r0
 800bba8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 800bbaa:	4b1e      	ldr	r3, [pc, #120]	; (800bc24 <DNS_run+0x108>)
 800bbac:	6819      	ldr	r1, [r3, #0]
 800bbae:	f107 0318 	add.w	r3, r7, #24
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7ff fde9 	bl	800b78c <parseDNSMSG>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			break;
 800bbc0:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 800bbc2:	4b17      	ldr	r3, [pc, #92]	; (800bc20 <DNS_run+0x104>)
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f7fc fafe 	bl	80081c8 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 800bbcc:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 800bbd0:	e01e      	b.n	800bc10 <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 800bbd2:	f7ff ff61 	bl	800ba98 <check_DNS_timeout>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (ret_check_timeout < 0) {
 800bbdc:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	da06      	bge.n	800bbf2 <DNS_run+0xd6>
			close(DNS_SOCKET);
 800bbe4:	4b0e      	ldr	r3, [pc, #56]	; (800bc20 <DNS_run+0x104>)
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7fc faed 	bl	80081c8 <close>
			return 0; // timeout occurred
 800bbee:	2300      	movs	r3, #0
 800bbf0:	e00e      	b.n	800bc10 <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 800bbf2:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d1b7      	bne.n	800bb6a <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 800bbfa:	4b09      	ldr	r3, [pc, #36]	; (800bc20 <DNS_run+0x104>)
 800bbfc:	7818      	ldrb	r0, [r3, #0]
 800bbfe:	4b09      	ldr	r3, [pc, #36]	; (800bc24 <DNS_run+0x108>)
 800bc00:	6819      	ldr	r1, [r3, #0]
 800bc02:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bc04:	2335      	movs	r3, #53	; 0x35
 800bc06:	9300      	str	r3, [sp, #0]
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f7fc fea7 	bl	800895c <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 800bc0e:	e7ac      	b.n	800bb6a <DNS_run+0x4e>
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3734      	adds	r7, #52	; 0x34
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd90      	pop	{r4, r7, pc}
 800bc18:	20000988 	.word	0x20000988
 800bc1c:	20000984 	.word	0x20000984
 800bc20:	20000980 	.word	0x20000980
 800bc24:	2000097c 	.word	0x2000097c

0800bc28 <DNS_time_handler>:


/* DNS TIMER HANDLER */
void DNS_time_handler(void)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	af00      	add	r7, sp, #0
	dns_1s_tick++;
 800bc2c:	4b04      	ldr	r3, [pc, #16]	; (800bc40 <DNS_time_handler+0x18>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	3301      	adds	r3, #1
 800bc32:	4a03      	ldr	r2, [pc, #12]	; (800bc40 <DNS_time_handler+0x18>)
 800bc34:	6013      	str	r3, [r2, #0]
}
 800bc36:	bf00      	nop
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr
 800bc40:	20000984 	.word	0x20000984

0800bc44 <Prototype>:
#include "definition.h"
#include "dns.h"
#include "string.h"


void Prototype(void){};
 800bc44:	b480      	push	{r7}
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	bf00      	nop
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr
	...

0800bc54 <dns_service_reg_cb_mutex>:

uint8_t  dns_server_ip[4];

//NetworkReady = *Prototype;

void dns_service_reg_cb_mutex(void (*get_mutex)(void), void (*release_mutex)(void)){
 800bc54:	b480      	push	{r7}
 800bc56:	b083      	sub	sp, #12
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6039      	str	r1, [r7, #0]

	if (get_mutex) DNSMutexGet = get_mutex;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d002      	beq.n	800bc6a <dns_service_reg_cb_mutex+0x16>
 800bc64:	4a07      	ldr	r2, [pc, #28]	; (800bc84 <dns_service_reg_cb_mutex+0x30>)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6013      	str	r3, [r2, #0]
	if (release_mutex) DNSMutexRelease = release_mutex;
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d002      	beq.n	800bc76 <dns_service_reg_cb_mutex+0x22>
 800bc70:	4a05      	ldr	r2, [pc, #20]	; (800bc88 <dns_service_reg_cb_mutex+0x34>)
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	6013      	str	r3, [r2, #0]

}
 800bc76:	bf00      	nop
 800bc78:	370c      	adds	r7, #12
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr
 800bc82:	bf00      	nop
 800bc84:	200000f4 	.word	0x200000f4
 800bc88:	200000f8 	.word	0x200000f8

0800bc8c <dns_service_reg_cb_net_ready>:

void dns_service_reg_cb_net_ready(void (*func)){
 800bc8c:	b480      	push	{r7}
 800bc8e:	b083      	sub	sp, #12
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]

	if ( func ) NetworkReady = func;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d002      	beq.n	800bca0 <dns_service_reg_cb_net_ready+0x14>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	4a03      	ldr	r2, [pc, #12]	; (800bcac <dns_service_reg_cb_net_ready+0x20>)
 800bc9e:	6013      	str	r3, [r2, #0]

}
 800bca0:	bf00      	nop
 800bca2:	370c      	adds	r7, #12
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr
 800bcac:	200000fc 	.word	0x200000fc

0800bcb0 <dns_service_init>:

int dns_service_init(uint8_t socket, uint8_t * buf, uint16_t buf_len){
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	6039      	str	r1, [r7, #0]
 800bcba:	71fb      	strb	r3, [r7, #7]
 800bcbc:	4613      	mov	r3, r2
 800bcbe:	80bb      	strh	r3, [r7, #4]

	if (buf_len < MAX_DNS_BUF_SIZE) return -1;
 800bcc0:	88bb      	ldrh	r3, [r7, #4]
 800bcc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcc6:	d202      	bcs.n	800bcce <dns_service_init+0x1e>
 800bcc8:	f04f 33ff 	mov.w	r3, #4294967295
 800bccc:	e005      	b.n	800bcda <dns_service_init+0x2a>
	// if buff  less then MAX_DNS_BUF_SIZE return error;
	DNS_init(socket, buf);
 800bcce:	79fb      	ldrb	r3, [r7, #7]
 800bcd0:	6839      	ldr	r1, [r7, #0]
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7ff ff06 	bl	800bae4 <DNS_init>
	return 0;
 800bcd8:	2300      	movs	r3, #0
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3708      	adds	r7, #8
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
	...

0800bce4 <dns_service_set_dns_ip>:

void dns_service_set_dns_ip(uint8_t * ip_addr){
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	461a      	mov	r2, r3
	memcpy(dns_server_ip, ip_addr, sizeof(dns_server_ip));
 800bcf2:	4b04      	ldr	r3, [pc, #16]	; (800bd04 <dns_service_set_dns_ip+0x20>)
 800bcf4:	601a      	str	r2, [r3, #0]
}
 800bcf6:	bf00      	nop
 800bcf8:	370c      	adds	r7, #12
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr
 800bd02:	bf00      	nop
 800bd04:	2000098c 	.word	0x2000098c

0800bd08 <dns_service_resolve_name>:

int8_t dns_service_resolve_name(const char * domain_name, uint8_t * resolved_ip){
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
#ifdef DNS_USE_MUTEX
	DNSMutexGet();
 800bd12:	4b0d      	ldr	r3, [pc, #52]	; (800bd48 <dns_service_resolve_name+0x40>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4798      	blx	r3
#endif
	int8_t err;
	if (NetworkReady){
 800bd18:	4b0c      	ldr	r3, [pc, #48]	; (800bd4c <dns_service_resolve_name+0x44>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d007      	beq.n	800bd30 <dns_service_resolve_name+0x28>
		err = DNS_run(dns_server_ip, domain_name, resolved_ip);
 800bd20:	683a      	ldr	r2, [r7, #0]
 800bd22:	6879      	ldr	r1, [r7, #4]
 800bd24:	480a      	ldr	r0, [pc, #40]	; (800bd50 <dns_service_resolve_name+0x48>)
 800bd26:	f7ff fef9 	bl	800bb1c <DNS_run>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	73fb      	strb	r3, [r7, #15]
 800bd2e:	e001      	b.n	800bd34 <dns_service_resolve_name+0x2c>
	}else{
		err = -1;
 800bd30:	23ff      	movs	r3, #255	; 0xff
 800bd32:	73fb      	strb	r3, [r7, #15]
	}


#ifdef DNS_USE_MUTEX
	DNSMutexRelease();
 800bd34:	4b07      	ldr	r3, [pc, #28]	; (800bd54 <dns_service_resolve_name+0x4c>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4798      	blx	r3
#endif
	return err;
 800bd3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3710      	adds	r7, #16
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
 800bd46:	bf00      	nop
 800bd48:	200000f4 	.word	0x200000f4
 800bd4c:	200000fc 	.word	0x200000fc
 800bd50:	2000098c 	.word	0x2000098c
 800bd54:	200000f8 	.word	0x200000f8

0800bd58 <dns_service_increment_second>:

void dns_service_increment_second(void){
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	af00      	add	r7, sp, #0
	DNS_time_handler();
 800bd5c:	f7ff ff64 	bl	800bc28 <DNS_time_handler>
}
 800bd60:	bf00      	nop
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <isValidIPv4>:
        str++; //point to next character
    }
    return 1;
}

bool isValidIPv4(const char* ipAddress) {
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b086      	sub	sp, #24
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
    if (ipAddress == NULL) {
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d101      	bne.n	800bd76 <isValidIPv4+0x12>
        return false;
 800bd72:	2300      	movs	r3, #0
 800bd74:	e068      	b.n	800be48 <isValidIPv4+0xe4>
    }

    int num = 0;    // Current segment value
 800bd76:	2300      	movs	r3, #0
 800bd78:	617b      	str	r3, [r7, #20]
    int count = 0;  // Count of segments in the IP address
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	613b      	str	r3, [r7, #16]
    int segmentLength = 0;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	60fb      	str	r3, [r7, #12]

    for (size_t i = 0; ipAddress[i] != '\0'; ++i) {
 800bd82:	2300      	movs	r3, #0
 800bd84:	60bb      	str	r3, [r7, #8]
 800bd86:	e043      	b.n	800be10 <isValidIPv4+0xac>
        if (isdigit((unsigned char)ipAddress[i])) {
 800bd88:	687a      	ldr	r2, [r7, #4]
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	4413      	add	r3, r2
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	3b30      	subs	r3, #48	; 0x30
 800bd92:	2b09      	cmp	r3, #9
 800bd94:	d818      	bhi.n	800bdc8 <isValidIPv4+0x64>
            num = num * 10 + (ipAddress[i] - '0');
 800bd96:	697a      	ldr	r2, [r7, #20]
 800bd98:	4613      	mov	r3, r2
 800bd9a:	009b      	lsls	r3, r3, #2
 800bd9c:	4413      	add	r3, r2
 800bd9e:	005b      	lsls	r3, r3, #1
 800bda0:	4619      	mov	r1, r3
 800bda2:	687a      	ldr	r2, [r7, #4]
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	4413      	add	r3, r2
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	3b30      	subs	r3, #48	; 0x30
 800bdac:	440b      	add	r3, r1
 800bdae:	617b      	str	r3, [r7, #20]

            // Check if the segment value is in the valid range
            if (num < 0 || num > 255) {
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	db02      	blt.n	800bdbc <isValidIPv4+0x58>
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	2bff      	cmp	r3, #255	; 0xff
 800bdba:	dd01      	ble.n	800bdc0 <isValidIPv4+0x5c>
                return false;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	e043      	b.n	800be48 <isValidIPv4+0xe4>
            }

            segmentLength++;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	60fb      	str	r3, [r7, #12]
 800bdc6:	e020      	b.n	800be0a <isValidIPv4+0xa6>
        } else if (ipAddress[i] == '.') {
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	4413      	add	r3, r2
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	2b2e      	cmp	r3, #46	; 0x2e
 800bdd2:	d118      	bne.n	800be06 <isValidIPv4+0xa2>
            // Check if the segment has leading zeros
            if (segmentLength > 1 && ipAddress[i - segmentLength] == '0') {
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	dd09      	ble.n	800bdee <isValidIPv4+0x8a>
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	68ba      	ldr	r2, [r7, #8]
 800bdde:	1ad3      	subs	r3, r2, r3
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	4413      	add	r3, r2
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	2b30      	cmp	r3, #48	; 0x30
 800bde8:	d101      	bne.n	800bdee <isValidIPv4+0x8a>
                return false;
 800bdea:	2300      	movs	r3, #0
 800bdec:	e02c      	b.n	800be48 <isValidIPv4+0xe4>
            }

            // Move to the next segment
            num = 0;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	617b      	str	r3, [r7, #20]
            count++;
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	3301      	adds	r3, #1
 800bdf6:	613b      	str	r3, [r7, #16]
            segmentLength = 0;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	60fb      	str	r3, [r7, #12]

            // Check if there are more than 4 segments
            if (count > 3) {
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	2b03      	cmp	r3, #3
 800be00:	dd03      	ble.n	800be0a <isValidIPv4+0xa6>
                return false;
 800be02:	2300      	movs	r3, #0
 800be04:	e020      	b.n	800be48 <isValidIPv4+0xe4>
            }
        } else {
            // Invalid character in the IP address
            return false;
 800be06:	2300      	movs	r3, #0
 800be08:	e01e      	b.n	800be48 <isValidIPv4+0xe4>
    for (size_t i = 0; ipAddress[i] != '\0'; ++i) {
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	3301      	adds	r3, #1
 800be0e:	60bb      	str	r3, [r7, #8]
 800be10:	687a      	ldr	r2, [r7, #4]
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	4413      	add	r3, r2
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d1b5      	bne.n	800bd88 <isValidIPv4+0x24>
        }
    }

    // Check if the last segment has leading zeros
    if (segmentLength > 1 && ipAddress[strlen(ipAddress) - segmentLength] == '0') {
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2b01      	cmp	r3, #1
 800be20:	dd0c      	ble.n	800be3c <isValidIPv4+0xd8>
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f7f4 fa3c 	bl	80002a0 <strlen>
 800be28:	4602      	mov	r2, r0
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	1ad3      	subs	r3, r2, r3
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	4413      	add	r3, r2
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	2b30      	cmp	r3, #48	; 0x30
 800be36:	d101      	bne.n	800be3c <isValidIPv4+0xd8>
        return false;
 800be38:	2300      	movs	r3, #0
 800be3a:	e005      	b.n	800be48 <isValidIPv4+0xe4>
    }

    // Check if there are exactly 4 segments in the IP address
    return count == 3;
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	2b03      	cmp	r3, #3
 800be40:	bf0c      	ite	eq
 800be42:	2301      	moveq	r3, #1
 800be44:	2300      	movne	r3, #0
 800be46:	b2db      	uxtb	r3, r3
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3718      	adds	r7, #24
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <NewMessageData>:
 * Contributors:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/
#include "MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 800be50:	b480      	push	{r7}
 800be52:	b085      	sub	sp, #20
 800be54:	af00      	add	r7, sp, #0
 800be56:	60f8      	str	r0, [r7, #12]
 800be58:	60b9      	str	r1, [r7, #8]
 800be5a:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	68ba      	ldr	r2, [r7, #8]
 800be60:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	601a      	str	r2, [r3, #0]
}
 800be68:	bf00      	nop
 800be6a:	3714      	adds	r7, #20
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr

0800be74 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 800be74:	b480      	push	{r7}
 800be76:	b083      	sub	sp, #12
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be84:	4293      	cmp	r3, r2
 800be86:	d003      	beq.n	800be90 <getNextPacketId+0x1c>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	3301      	adds	r3, #1
 800be8e:	e000      	b.n	800be92 <getNextPacketId+0x1e>
 800be90:	2301      	movs	r3, #1
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	6013      	str	r3, [r2, #0]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	370c      	adds	r7, #12
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr

0800bea6 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 800bea6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bea8:	b087      	sub	sp, #28
 800beaa:	af00      	add	r7, sp, #0
 800beac:	60f8      	str	r0, [r7, #12]
 800beae:	60b9      	str	r1, [r7, #8]
 800beb0:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 800beb2:	f04f 33ff 	mov.w	r3, #4294967295
 800beb6:	617b      	str	r3, [r7, #20]
        sent = 0;
 800beb8:	2300      	movs	r3, #0
 800beba:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 800bebc:	e018      	b.n	800bef0 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bec2:	689c      	ldr	r4, [r3, #8]
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	691a      	ldr	r2, [r3, #16]
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	18d6      	adds	r6, r2, r3
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 fccb 	bl	800c86c <TimerLeftMS>
 800bed6:	4603      	mov	r3, r0
 800bed8:	68ba      	ldr	r2, [r7, #8]
 800beda:	4631      	mov	r1, r6
 800bedc:	4628      	mov	r0, r5
 800bede:	47a0      	blx	r4
 800bee0:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	db0e      	blt.n	800bf06 <sendPacket+0x60>
            break;
        sent += rc;
 800bee8:	693a      	ldr	r2, [r7, #16]
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	4413      	add	r3, r2
 800beee:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 800bef0:	693a      	ldr	r2, [r7, #16]
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	429a      	cmp	r2, r3
 800bef6:	da07      	bge.n	800bf08 <sendPacket+0x62>
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f000 fc75 	bl	800c7e8 <TimerIsExpired>
 800befe:	4603      	mov	r3, r0
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d0dc      	beq.n	800bebe <sendPacket+0x18>
 800bf04:	e000      	b.n	800bf08 <sendPacket+0x62>
            break;
 800bf06:	bf00      	nop
    }
    if (sent == length)
 800bf08:	693a      	ldr	r2, [r7, #16]
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d10b      	bne.n	800bf28 <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	699b      	ldr	r3, [r3, #24]
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	4610      	mov	r0, r2
 800bf1e:	f000 fc8d 	bl	800c83c <TimerCountdown>
        rc = SUCCESSS;
 800bf22:	2300      	movs	r3, #0
 800bf24:	617b      	str	r3, [r7, #20]
 800bf26:	e002      	b.n	800bf2e <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 800bf28:	f04f 33ff 	mov.w	r3, #4294967295
 800bf2c:	617b      	str	r3, [r7, #20]
    return rc;
 800bf2e:	697b      	ldr	r3, [r7, #20]
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	371c      	adds	r7, #28
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bf38 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b086      	sub	sp, #24
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	60f8      	str	r0, [r7, #12]
 800bf40:	60b9      	str	r1, [r7, #8]
 800bf42:	607a      	str	r2, [r7, #4]
 800bf44:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	68ba      	ldr	r2, [r7, #8]
 800bf4a:	651a      	str	r2, [r3, #80]	; 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	617b      	str	r3, [r7, #20]
 800bf50:	e009      	b.n	800bf66 <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 800bf52:	68fa      	ldr	r2, [r7, #12]
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	3304      	adds	r3, #4
 800bf58:	00db      	lsls	r3, r3, #3
 800bf5a:	4413      	add	r3, r2
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	3301      	adds	r3, #1
 800bf64:	617b      	str	r3, [r7, #20]
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	2b04      	cmp	r3, #4
 800bf6a:	ddf2      	ble.n	800bf52 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	683a      	ldr	r2, [r7, #0]
 800bf76:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	6a3a      	ldr	r2, [r7, #32]
 800bf7c:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf82:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf88:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2200      	movs	r2, #0
 800bf94:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	3354      	adds	r3, #84	; 0x54
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f000 fc11 	bl	800c7ce <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 800bfac:	bf00      	nop
 800bfae:	3718      	adds	r7, #24
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 800bfb4:	b590      	push	{r4, r7, lr}
 800bfb6:	b08b      	sub	sp, #44	; 0x2c
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	60f8      	str	r0, [r7, #12]
 800bfbc:	60b9      	str	r1, [r7, #8]
 800bfbe:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 800bfc8:	2304      	movs	r3, #4
 800bfca:	61fb      	str	r3, [r7, #28]

    *value = 0;
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 800bfd2:	f04f 33ff 	mov.w	r3, #4294967295
 800bfd6:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800bfd8:	6a3b      	ldr	r3, [r7, #32]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	623b      	str	r3, [r7, #32]
 800bfde:	6a3a      	ldr	r2, [r7, #32]
 800bfe0:	69fb      	ldr	r3, [r7, #28]
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	dd03      	ble.n	800bfee <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 800bfe6:	f04f 33ff 	mov.w	r3, #4294967295
 800bfea:	61bb      	str	r3, [r7, #24]
            goto exit;
 800bfec:	e021      	b.n	800c032 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bff2:	685c      	ldr	r4, [r3, #4]
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bff8:	f107 0117 	add.w	r1, r7, #23
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2201      	movs	r2, #1
 800c000:	47a0      	blx	r4
 800c002:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 800c004:	69bb      	ldr	r3, [r7, #24]
 800c006:	2b01      	cmp	r3, #1
 800c008:	d112      	bne.n	800c030 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	7dfb      	ldrb	r3, [r7, #23]
 800c010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c014:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c016:	fb01 f303 	mul.w	r3, r1, r3
 800c01a:	441a      	add	r2, r3
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 800c020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c022:	01db      	lsls	r3, r3, #7
 800c024:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 800c026:	7dfb      	ldrb	r3, [r7, #23]
 800c028:	b25b      	sxtb	r3, r3
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	dbd1      	blt.n	800bfd2 <decodePacket+0x1e>
exit:
 800c02e:	e000      	b.n	800c032 <decodePacket+0x7e>
            goto exit;
 800c030:	bf00      	nop
    return len;
 800c032:	6a3b      	ldr	r3, [r7, #32]
}
 800c034:	4618      	mov	r0, r3
 800c036:	372c      	adds	r7, #44	; 0x2c
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd90      	pop	{r4, r7, pc}

0800c03c <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 800c03c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c03e:	b089      	sub	sp, #36	; 0x24
 800c040:	af00      	add	r7, sp, #0
 800c042:	60f8      	str	r0, [r7, #12]
 800c044:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 800c046:	f04f 33ff 	mov.w	r3, #4294967295
 800c04a:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 800c04c:	2300      	movs	r3, #0
 800c04e:	617b      	str	r3, [r7, #20]
    int len = 0;
 800c050:	2300      	movs	r3, #0
 800c052:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 800c054:	2300      	movs	r3, #0
 800c056:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c05c:	685c      	ldr	r4, [r3, #4]
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	695e      	ldr	r6, [r3, #20]
 800c066:	68b8      	ldr	r0, [r7, #8]
 800c068:	f000 fc00 	bl	800c86c <TimerLeftMS>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2201      	movs	r2, #1
 800c070:	4631      	mov	r1, r6
 800c072:	4628      	mov	r0, r5
 800c074:	47a0      	blx	r4
 800c076:	4603      	mov	r3, r0
 800c078:	2b01      	cmp	r3, #1
 800c07a:	d13b      	bne.n	800c0f4 <readPacket+0xb8>
        goto exit;

    len = 1;
 800c07c:	2301      	movs	r3, #1
 800c07e:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 800c080:	68b8      	ldr	r0, [r7, #8]
 800c082:	f000 fbf3 	bl	800c86c <TimerLeftMS>
 800c086:	4602      	mov	r2, r0
 800c088:	f107 0310 	add.w	r3, r7, #16
 800c08c:	4619      	mov	r1, r3
 800c08e:	68f8      	ldr	r0, [r7, #12]
 800c090:	f7ff ff90 	bl	800bfb4 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	695b      	ldr	r3, [r3, #20]
 800c098:	3301      	adds	r3, #1
 800c09a:	693a      	ldr	r2, [r7, #16]
 800c09c:	4611      	mov	r1, r2
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f000 ff49 	bl	800cf36 <MQTTPacket_encode>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	69bb      	ldr	r3, [r7, #24]
 800c0a8:	4413      	add	r3, r2
 800c0aa:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	dd16      	ble.n	800c0e0 <readPacket+0xa4>
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0b6:	685c      	ldr	r4, [r3, #4]
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	695a      	ldr	r2, [r3, #20]
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	18d6      	adds	r6, r2, r3
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	607b      	str	r3, [r7, #4]
 800c0c8:	68b8      	ldr	r0, [r7, #8]
 800c0ca:	f000 fbcf 	bl	800c86c <TimerLeftMS>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	687a      	ldr	r2, [r7, #4]
 800c0d2:	4631      	mov	r1, r6
 800c0d4:	4628      	mov	r0, r5
 800c0d6:	47a0      	blx	r4
 800c0d8:	4602      	mov	r2, r0
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d10b      	bne.n	800c0f8 <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	695b      	ldr	r3, [r3, #20]
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 800c0e8:	7d3b      	ldrb	r3, [r7, #20]
 800c0ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800c0ee:	b2db      	uxtb	r3, r3
 800c0f0:	61fb      	str	r3, [r7, #28]
 800c0f2:	e002      	b.n	800c0fa <readPacket+0xbe>
        goto exit;
 800c0f4:	bf00      	nop
 800c0f6:	e000      	b.n	800c0fa <readPacket+0xbe>
        goto exit;
 800c0f8:	bf00      	nop
exit:
    return rc;
 800c0fa:	69fb      	ldr	r3, [r7, #28]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3724      	adds	r7, #36	; 0x24
 800c100:	46bd      	mov	sp, r7
 800c102:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c104 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 800c104:	b480      	push	{r7}
 800c106:	b087      	sub	sp, #28
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	689b      	ldr	r3, [r3, #8]
 800c116:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	685b      	ldr	r3, [r3, #4]
 800c11c:	461a      	mov	r2, r3
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	4413      	add	r3, r2
 800c122:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 800c124:	e039      	b.n	800c19a <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	2b2f      	cmp	r3, #47	; 0x2f
 800c12c:	d103      	bne.n	800c136 <isTopicMatched+0x32>
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	2b2f      	cmp	r3, #47	; 0x2f
 800c134:	d13a      	bne.n	800c1ac <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	2b2b      	cmp	r3, #43	; 0x2b
 800c13c:	d009      	beq.n	800c152 <isTopicMatched+0x4e>
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	2b23      	cmp	r3, #35	; 0x23
 800c144:	d005      	beq.n	800c152 <isTopicMatched+0x4e>
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	781a      	ldrb	r2, [r3, #0]
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	429a      	cmp	r2, r3
 800c150:	d12e      	bne.n	800c1b0 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	2b2b      	cmp	r3, #43	; 0x2b
 800c158:	d112      	bne.n	800c180 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	3301      	adds	r3, #1
 800c15e:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 800c160:	e005      	b.n	800c16e <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	3301      	adds	r3, #1
 800c166:	613b      	str	r3, [r7, #16]
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	3301      	adds	r3, #1
 800c16c:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 800c16e:	68fa      	ldr	r2, [r7, #12]
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	429a      	cmp	r2, r3
 800c174:	d20b      	bcs.n	800c18e <isTopicMatched+0x8a>
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	2b2f      	cmp	r3, #47	; 0x2f
 800c17c:	d1f1      	bne.n	800c162 <isTopicMatched+0x5e>
 800c17e:	e006      	b.n	800c18e <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	2b23      	cmp	r3, #35	; 0x23
 800c186:	d102      	bne.n	800c18e <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	3b01      	subs	r3, #1
 800c18c:	613b      	str	r3, [r7, #16]
        curf++;
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	3301      	adds	r3, #1
 800c192:	617b      	str	r3, [r7, #20]
        curn++;
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	3301      	adds	r3, #1
 800c198:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d007      	beq.n	800c1b2 <isTopicMatched+0xae>
 800c1a2:	693a      	ldr	r2, [r7, #16]
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d3bd      	bcc.n	800c126 <isTopicMatched+0x22>
 800c1aa:	e002      	b.n	800c1b2 <isTopicMatched+0xae>
            break;
 800c1ac:	bf00      	nop
 800c1ae:	e000      	b.n	800c1b2 <isTopicMatched+0xae>
            break;
 800c1b0:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 800c1b2:	693a      	ldr	r2, [r7, #16]
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d105      	bne.n	800c1c6 <isTopicMatched+0xc2>
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d101      	bne.n	800c1c6 <isTopicMatched+0xc2>
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	e000      	b.n	800c1c8 <isTopicMatched+0xc4>
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	b2db      	uxtb	r3, r3
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	371c      	adds	r7, #28
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d4:	4770      	bx	lr

0800c1d6 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 800c1d6:	b580      	push	{r7, lr}
 800c1d8:	b08a      	sub	sp, #40	; 0x28
 800c1da:	af00      	add	r7, sp, #0
 800c1dc:	60f8      	str	r0, [r7, #12]
 800c1de:	60b9      	str	r1, [r7, #8]
 800c1e0:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 800c1e2:	f04f 33ff 	mov.w	r3, #4294967295
 800c1e6:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	627b      	str	r3, [r7, #36]	; 0x24
 800c1ec:	e03f      	b.n	800c26e <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800c1ee:	68fa      	ldr	r2, [r7, #12]
 800c1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f2:	3304      	adds	r3, #4
 800c1f4:	00db      	lsls	r3, r3, #3
 800c1f6:	4413      	add	r3, r2
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d034      	beq.n	800c268 <deliverMessage+0x92>
 800c1fe:	68fa      	ldr	r2, [r7, #12]
 800c200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c202:	3304      	adds	r3, #4
 800c204:	00db      	lsls	r3, r3, #3
 800c206:	4413      	add	r3, r2
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	4619      	mov	r1, r3
 800c20c:	68b8      	ldr	r0, [r7, #8]
 800c20e:	f001 f861 	bl	800d2d4 <MQTTPacket_equals>
 800c212:	4603      	mov	r3, r0
 800c214:	2b00      	cmp	r3, #0
 800c216:	d10c      	bne.n	800c232 <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 800c218:	68fa      	ldr	r2, [r7, #12]
 800c21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21c:	3304      	adds	r3, #4
 800c21e:	00db      	lsls	r3, r3, #3
 800c220:	4413      	add	r3, r2
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	68b9      	ldr	r1, [r7, #8]
 800c226:	4618      	mov	r0, r3
 800c228:	f7ff ff6c 	bl	800c104 <isTopicMatched>
 800c22c:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d01a      	beq.n	800c268 <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 800c232:	68fa      	ldr	r2, [r7, #12]
 800c234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c236:	3304      	adds	r3, #4
 800c238:	00db      	lsls	r3, r3, #3
 800c23a:	4413      	add	r3, r2
 800c23c:	689b      	ldr	r3, [r3, #8]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d012      	beq.n	800c268 <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 800c242:	f107 0318 	add.w	r3, r7, #24
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	68b9      	ldr	r1, [r7, #8]
 800c24a:	4618      	mov	r0, r3
 800c24c:	f7ff fe00 	bl	800be50 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 800c250:	68fa      	ldr	r2, [r7, #12]
 800c252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c254:	3304      	adds	r3, #4
 800c256:	00db      	lsls	r3, r3, #3
 800c258:	4413      	add	r3, r2
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	f107 0218 	add.w	r2, r7, #24
 800c260:	4610      	mov	r0, r2
 800c262:	4798      	blx	r3
                rc = SUCCESSS;
 800c264:	2300      	movs	r3, #0
 800c266:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800c268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26a:	3301      	adds	r3, #1
 800c26c:	627b      	str	r3, [r7, #36]	; 0x24
 800c26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c270:	2b04      	cmp	r3, #4
 800c272:	ddbc      	ble.n	800c1ee <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 800c274:	6a3b      	ldr	r3, [r7, #32]
 800c276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c27a:	d112      	bne.n	800c2a2 <deliverMessage+0xcc>
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c280:	2b00      	cmp	r3, #0
 800c282:	d00e      	beq.n	800c2a2 <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 800c284:	f107 0310 	add.w	r3, r7, #16
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	68b9      	ldr	r1, [r7, #8]
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7ff fddf 	bl	800be50 <NewMessageData>
        c->defaultMessageHandler(&md);
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c296:	f107 0210 	add.w	r2, r7, #16
 800c29a:	4610      	mov	r0, r2
 800c29c:	4798      	blx	r3
        rc = SUCCESSS;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	623b      	str	r3, [r7, #32]
    }

    return rc;
 800c2a2:	6a3b      	ldr	r3, [r7, #32]
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3728      	adds	r7, #40	; 0x28
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <keepalive>:


int keepalive(MQTTClient* c)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b086      	sub	sp, #24
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 800c2b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c2b8:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	699b      	ldr	r3, [r3, #24]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d102      	bne.n	800c2c8 <keepalive+0x1c>
    {
        rc = SUCCESSS;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	617b      	str	r3, [r7, #20]
        goto exit;
 800c2c6:	e033      	b.n	800c330 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	3354      	adds	r3, #84	; 0x54
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f000 fa8b 	bl	800c7e8 <TimerIsExpired>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d02a      	beq.n	800c32e <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	7f1b      	ldrb	r3, [r3, #28]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d126      	bne.n	800c32e <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 800c2e0:	f107 0308 	add.w	r3, r7, #8
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f000 fa72 	bl	800c7ce <TimerInit>
            TimerCountdownMS(&timer, 1000);
 800c2ea:	f107 0308 	add.w	r3, r7, #8
 800c2ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f000 fa8e 	bl	800c814 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	691a      	ldr	r2, [r3, #16]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	689b      	ldr	r3, [r3, #8]
 800c300:	4619      	mov	r1, r3
 800c302:	4610      	mov	r0, r2
 800c304:	f000 fd4b 	bl	800cd9e <MQTTSerialize_pingreq>
 800c308:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	dd0f      	ble.n	800c330 <keepalive+0x84>
 800c310:	f107 0308 	add.w	r3, r7, #8
 800c314:	461a      	mov	r2, r3
 800c316:	6939      	ldr	r1, [r7, #16]
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f7ff fdc4 	bl	800bea6 <sendPacket>
 800c31e:	6178      	str	r0, [r7, #20]
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d104      	bne.n	800c330 <keepalive+0x84>
                c->ping_outstanding = 1;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2201      	movs	r2, #1
 800c32a:	771a      	strb	r2, [r3, #28]
 800c32c:	e000      	b.n	800c330 <keepalive+0x84>
        }
    }

exit:
 800c32e:	bf00      	nop
    return rc;
 800c330:	697b      	ldr	r3, [r7, #20]
}
 800c332:	4618      	mov	r0, r3
 800c334:	3718      	adds	r7, #24
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
	...

0800c33c <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 800c33c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c33e:	b095      	sub	sp, #84	; 0x54
 800c340:	af06      	add	r7, sp, #24
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 800c346:	6839      	ldr	r1, [r7, #0]
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f7ff fe77 	bl	800c03c <readPacket>
 800c34e:	4603      	mov	r3, r0
 800c350:	85fb      	strh	r3, [r7, #46]	; 0x2e

    int len = 0,
 800c352:	2300      	movs	r3, #0
 800c354:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESSS;
 800c356:	2300      	movs	r3, #0
 800c358:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 800c35a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c35c:	3b02      	subs	r3, #2
 800c35e:	2b0b      	cmp	r3, #11
 800c360:	f200 80c0 	bhi.w	800c4e4 <cycle+0x1a8>
 800c364:	a201      	add	r2, pc, #4	; (adr r2, 800c36c <cycle+0x30>)
 800c366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c36a:	bf00      	nop
 800c36c:	0800c4e5 	.word	0x0800c4e5
 800c370:	0800c39d 	.word	0x0800c39d
 800c374:	0800c4e5 	.word	0x0800c4e5
 800c378:	0800c465 	.word	0x0800c465
 800c37c:	0800c4e5 	.word	0x0800c4e5
 800c380:	0800c4e5 	.word	0x0800c4e5
 800c384:	0800c4e5 	.word	0x0800c4e5
 800c388:	0800c4e5 	.word	0x0800c4e5
 800c38c:	0800c4e5 	.word	0x0800c4e5
 800c390:	0800c4e5 	.word	0x0800c4e5
 800c394:	0800c4e5 	.word	0x0800c4e5
 800c398:	0800c4d7 	.word	0x0800c4d7
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 800c3a4:	4616      	mov	r6, r2
 800c3a6:	f107 0210 	add.w	r2, r7, #16
 800c3aa:	1d15      	adds	r5, r2, #4
 800c3ac:	f107 0210 	add.w	r2, r7, #16
 800c3b0:	1c54      	adds	r4, r2, #1
 800c3b2:	f107 010c 	add.w	r1, r7, #12
 800c3b6:	f107 0210 	add.w	r2, r7, #16
 800c3ba:	1c90      	adds	r0, r2, #2
 800c3bc:	9604      	str	r6, [sp, #16]
 800c3be:	9303      	str	r3, [sp, #12]
 800c3c0:	f107 0310 	add.w	r3, r7, #16
 800c3c4:	330c      	adds	r3, #12
 800c3c6:	9302      	str	r3, [sp, #8]
 800c3c8:	f107 0310 	add.w	r3, r7, #16
 800c3cc:	3308      	adds	r3, #8
 800c3ce:	9301      	str	r3, [sp, #4]
 800c3d0:	f107 0320 	add.w	r3, r7, #32
 800c3d4:	9300      	str	r3, [sp, #0]
 800c3d6:	462b      	mov	r3, r5
 800c3d8:	4622      	mov	r2, r4
 800c3da:	f000 fcef 	bl	800cdbc <MQTTDeserialize_publish>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	f040 8083 	bne.w	800c4ec <cycle+0x1b0>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	b2db      	uxtb	r3, r3
 800c3ea:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 800c3ec:	f107 0210 	add.w	r2, r7, #16
 800c3f0:	f107 0320 	add.w	r3, r7, #32
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f7ff feed 	bl	800c1d6 <deliverMessage>
            if (msg.qos != QOS0)
 800c3fc:	7c3b      	ldrb	r3, [r7, #16]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d06d      	beq.n	800c4de <cycle+0x1a2>
            {
                if (msg.qos == QOS1)
 800c402:	7c3b      	ldrb	r3, [r7, #16]
 800c404:	2b01      	cmp	r3, #1
 800c406:	d10c      	bne.n	800c422 <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6918      	ldr	r0, [r3, #16]
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	689b      	ldr	r3, [r3, #8]
 800c410:	4619      	mov	r1, r3
 800c412:	8abb      	ldrh	r3, [r7, #20]
 800c414:	9300      	str	r3, [sp, #0]
 800c416:	2300      	movs	r3, #0
 800c418:	2204      	movs	r2, #4
 800c41a:	f001 f828 	bl	800d46e <MQTTSerialize_ack>
 800c41e:	6378      	str	r0, [r7, #52]	; 0x34
 800c420:	e00e      	b.n	800c440 <cycle+0x104>
                else if (msg.qos == QOS2)
 800c422:	7c3b      	ldrb	r3, [r7, #16]
 800c424:	2b02      	cmp	r3, #2
 800c426:	d10b      	bne.n	800c440 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6918      	ldr	r0, [r3, #16]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	689b      	ldr	r3, [r3, #8]
 800c430:	4619      	mov	r1, r3
 800c432:	8abb      	ldrh	r3, [r7, #20]
 800c434:	9300      	str	r3, [sp, #0]
 800c436:	2300      	movs	r3, #0
 800c438:	2205      	movs	r2, #5
 800c43a:	f001 f818 	bl	800d46e <MQTTSerialize_ack>
 800c43e:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 800c440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c442:	2b00      	cmp	r3, #0
 800c444:	dc03      	bgt.n	800c44e <cycle+0x112>
                    rc = FAILURE;
 800c446:	f04f 33ff 	mov.w	r3, #4294967295
 800c44a:	633b      	str	r3, [r7, #48]	; 0x30
 800c44c:	e005      	b.n	800c45a <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 800c44e:	683a      	ldr	r2, [r7, #0]
 800c450:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f7ff fd27 	bl	800bea6 <sendPacket>
 800c458:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 800c45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c460:	d13d      	bne.n	800c4de <cycle+0x1a2>
                    goto exit; // there was a problem
 800c462:	e044      	b.n	800c4ee <cycle+0x1b2>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	695c      	ldr	r4, [r3, #20]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	68db      	ldr	r3, [r3, #12]
 800c46c:	f107 020a 	add.w	r2, r7, #10
 800c470:	f107 0109 	add.w	r1, r7, #9
 800c474:	f107 0008 	add.w	r0, r7, #8
 800c478:	9300      	str	r3, [sp, #0]
 800c47a:	4623      	mov	r3, r4
 800c47c:	f000 fd10 	bl	800cea0 <MQTTDeserialize_ack>
 800c480:	4603      	mov	r3, r0
 800c482:	2b01      	cmp	r3, #1
 800c484:	d003      	beq.n	800c48e <cycle+0x152>
                rc = FAILURE;
 800c486:	f04f 33ff 	mov.w	r3, #4294967295
 800c48a:	633b      	str	r3, [r7, #48]	; 0x30
 800c48c:	e01e      	b.n	800c4cc <cycle+0x190>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6918      	ldr	r0, [r3, #16]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	689b      	ldr	r3, [r3, #8]
 800c496:	4619      	mov	r1, r3
 800c498:	897b      	ldrh	r3, [r7, #10]
 800c49a:	9300      	str	r3, [sp, #0]
 800c49c:	2300      	movs	r3, #0
 800c49e:	2206      	movs	r2, #6
 800c4a0:	f000 ffe5 	bl	800d46e <MQTTSerialize_ack>
 800c4a4:	6378      	str	r0, [r7, #52]	; 0x34
 800c4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	dc03      	bgt.n	800c4b4 <cycle+0x178>
                rc = FAILURE;
 800c4ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c4b0:	633b      	str	r3, [r7, #48]	; 0x30
 800c4b2:	e00b      	b.n	800c4cc <cycle+0x190>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 800c4b4:	683a      	ldr	r2, [r7, #0]
 800c4b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f7ff fcf4 	bl	800bea6 <sendPacket>
 800c4be:	6338      	str	r0, [r7, #48]	; 0x30
 800c4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d002      	beq.n	800c4cc <cycle+0x190>
                rc = FAILURE; // there was a problem
 800c4c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ca:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 800c4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4d2:	d106      	bne.n	800c4e2 <cycle+0x1a6>
                goto exit; // there was a problem
 800c4d4:	e00b      	b.n	800c4ee <cycle+0x1b2>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	771a      	strb	r2, [r3, #28]
            break;
 800c4dc:	e002      	b.n	800c4e4 <cycle+0x1a8>
            break;
 800c4de:	bf00      	nop
 800c4e0:	e000      	b.n	800c4e4 <cycle+0x1a8>
            break;
 800c4e2:	bf00      	nop
    }
    keepalive(c);
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f7ff fee1 	bl	800c2ac <keepalive>
 800c4ea:	e000      	b.n	800c4ee <cycle+0x1b2>
                goto exit;
 800c4ec:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 800c4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d101      	bne.n	800c4f8 <cycle+0x1bc>
        rc = packet_type;
 800c4f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c4f6:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 800c4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	373c      	adds	r7, #60	; 0x3c
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c502:	bf00      	nop

0800c504 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b086      	sub	sp, #24
 800c508:	af00      	add	r7, sp, #0
 800c50a:	60f8      	str	r0, [r7, #12]
 800c50c:	60b9      	str	r1, [r7, #8]
 800c50e:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 800c510:	f04f 33ff 	mov.w	r3, #4294967295
 800c514:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f000 f966 	bl	800c7e8 <TimerIsExpired>
 800c51c:	4603      	mov	r3, r0
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d109      	bne.n	800c536 <waitfor+0x32>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);
 800c522:	6879      	ldr	r1, [r7, #4]
 800c524:	68f8      	ldr	r0, [r7, #12]
 800c526:	f7ff ff09 	bl	800c33c <cycle>
 800c52a:	6178      	str	r0, [r7, #20]
 800c52c:	697a      	ldr	r2, [r7, #20]
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	429a      	cmp	r2, r3
 800c532:	d1f0      	bne.n	800c516 <waitfor+0x12>
 800c534:	e000      	b.n	800c538 <waitfor+0x34>
            break; // we timed out
 800c536:	bf00      	nop

    return rc;
 800c538:	697b      	ldr	r3, [r7, #20]
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3718      	adds	r7, #24
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
	...

0800c544 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b09e      	sub	sp, #120	; 0x78
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 800c54e:	f04f 33ff 	mov.w	r3, #4294967295
 800c552:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 800c554:	4a3d      	ldr	r2, [pc, #244]	; (800c64c <MQTTConnect+0x108>)
 800c556:	f107 0310 	add.w	r3, r7, #16
 800c55a:	4611      	mov	r1, r2
 800c55c:	2258      	movs	r2, #88	; 0x58
 800c55e:	4618      	mov	r0, r3
 800c560:	f00f fea7 	bl	801c2b2 <memcpy>
    int len = 0;
 800c564:	2300      	movs	r3, #0
 800c566:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6a1b      	ldr	r3, [r3, #32]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d15d      	bne.n	800c62c <MQTTConnect+0xe8>
		goto exit;

    TimerInit(&connect_timer);
 800c570:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c574:	4618      	mov	r0, r3
 800c576:	f000 f92a 	bl	800c7ce <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	685a      	ldr	r2, [r3, #4]
 800c57e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c582:	4611      	mov	r1, r2
 800c584:	4618      	mov	r0, r3
 800c586:	f000 f945 	bl	800c814 <TimerCountdownMS>

    if (options == 0)
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d102      	bne.n	800c596 <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 800c590:	f107 0310 	add.w	r3, r7, #16
 800c594:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	8b1b      	ldrh	r3, [r3, #24]
 800c59a:	461a      	mov	r2, r3
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	699b      	ldr	r3, [r3, #24]
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	4610      	mov	r0, r2
 800c5ae:	f000 f945 	bl	800c83c <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6918      	ldr	r0, [r3, #16]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	683a      	ldr	r2, [r7, #0]
 800c5bc:	4619      	mov	r1, r3
 800c5be:	f000 fa75 	bl	800caac <MQTTSerialize_connect>
 800c5c2:	6738      	str	r0, [r7, #112]	; 0x70
 800c5c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	dd32      	ble.n	800c630 <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 800c5ca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f7ff fc67 	bl	800bea6 <sendPacket>
 800c5d8:	6778      	str	r0, [r7, #116]	; 0x74
 800c5da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d129      	bne.n	800c634 <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 800c5e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	2102      	movs	r1, #2
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f7ff ff8b 	bl	800c504 <waitfor>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2b02      	cmp	r3, #2
 800c5f2:	d117      	bne.n	800c624 <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 800c5f4:	23ff      	movs	r3, #255	; 0xff
 800c5f6:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	695a      	ldr	r2, [r3, #20]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	68db      	ldr	r3, [r3, #12]
 800c604:	f107 010f 	add.w	r1, r7, #15
 800c608:	f107 000e 	add.w	r0, r7, #14
 800c60c:	f000 fb3a 	bl	800cc84 <MQTTDeserialize_connack>
 800c610:	4603      	mov	r3, r0
 800c612:	2b01      	cmp	r3, #1
 800c614:	d102      	bne.n	800c61c <MQTTConnect+0xd8>
            rc = connack_rc;
 800c616:	7bfb      	ldrb	r3, [r7, #15]
 800c618:	677b      	str	r3, [r7, #116]	; 0x74
 800c61a:	e00c      	b.n	800c636 <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 800c61c:	f04f 33ff 	mov.w	r3, #4294967295
 800c620:	677b      	str	r3, [r7, #116]	; 0x74
 800c622:	e008      	b.n	800c636 <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 800c624:	f04f 33ff 	mov.w	r3, #4294967295
 800c628:	677b      	str	r3, [r7, #116]	; 0x74
 800c62a:	e004      	b.n	800c636 <MQTTConnect+0xf2>
		goto exit;
 800c62c:	bf00      	nop
 800c62e:	e002      	b.n	800c636 <MQTTConnect+0xf2>
        goto exit;
 800c630:	bf00      	nop
 800c632:	e000      	b.n	800c636 <MQTTConnect+0xf2>
        goto exit; // there was a problem
 800c634:	bf00      	nop

exit:
    if (rc == SUCCESSS)
 800c636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d102      	bne.n	800c642 <MQTTConnect+0xfe>
        c->isconnected = 1;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2201      	movs	r2, #1
 800c640:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 800c642:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 800c644:	4618      	mov	r0, r3
 800c646:	3778      	adds	r7, #120	; 0x78
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	0802111c 	.word	0x0802111c

0800c650 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 800c650:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c652:	b097      	sub	sp, #92	; 0x5c
 800c654:	af08      	add	r7, sp, #32
 800c656:	60f8      	str	r0, [r7, #12]
 800c658:	60b9      	str	r1, [r7, #8]
 800c65a:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 800c65c:	f04f 33ff 	mov.w	r3, #4294967295
 800c660:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 800c662:	2300      	movs	r3, #0
 800c664:	61fb      	str	r3, [r7, #28]
 800c666:	2300      	movs	r3, #0
 800c668:	623b      	str	r3, [r7, #32]
 800c66a:	2300      	movs	r3, #0
 800c66c:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	61fb      	str	r3, [r7, #28]
    int len = 0;
 800c672:	2300      	movs	r3, #0
 800c674:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	6a1b      	ldr	r3, [r3, #32]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	f000 809b 	beq.w	800c7b6 <MQTTPublish+0x166>
		goto exit;

    TimerInit(&timer);
 800c680:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c684:	4618      	mov	r0, r3
 800c686:	f000 f8a2 	bl	800c7ce <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	685a      	ldr	r2, [r3, #4]
 800c68e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c692:	4611      	mov	r1, r2
 800c694:	4618      	mov	r0, r3
 800c696:	f000 f8bd 	bl	800c814 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	781b      	ldrb	r3, [r3, #0]
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d003      	beq.n	800c6aa <MQTTPublish+0x5a>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	781b      	ldrb	r3, [r3, #0]
 800c6a6:	2b02      	cmp	r3, #2
 800c6a8:	d106      	bne.n	800c6b8 <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 800c6aa:	68f8      	ldr	r0, [r7, #12]
 800c6ac:	f7ff fbe2 	bl	800be74 <getNextPacketId>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	b29a      	uxth	r2, r3
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	691b      	ldr	r3, [r3, #16]
 800c6bc:	603b      	str	r3, [r7, #0]
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	689b      	ldr	r3, [r3, #8]
 800c6c2:	469c      	mov	ip, r3
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	469e      	mov	lr, r3
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	785d      	ldrb	r5, [r3, #1]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	689b      	ldr	r3, [r3, #8]
 800c6d6:	687a      	ldr	r2, [r7, #4]
 800c6d8:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 800c6da:	9206      	str	r2, [sp, #24]
 800c6dc:	9305      	str	r3, [sp, #20]
 800c6de:	ac02      	add	r4, sp, #8
 800c6e0:	f107 031c 	add.w	r3, r7, #28
 800c6e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c6e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c6ec:	9601      	str	r6, [sp, #4]
 800c6ee:	9500      	str	r5, [sp, #0]
 800c6f0:	4673      	mov	r3, lr
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	4661      	mov	r1, ip
 800c6f6:	6838      	ldr	r0, [r7, #0]
 800c6f8:	f000 fe43 	bl	800d382 <MQTTSerialize_publish>
 800c6fc:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 800c6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c700:	2b00      	cmp	r3, #0
 800c702:	dd5a      	ble.n	800c7ba <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 800c704:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c708:	461a      	mov	r2, r3
 800c70a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c70c:	68f8      	ldr	r0, [r7, #12]
 800c70e:	f7ff fbca 	bl	800bea6 <sendPacket>
 800c712:	6378      	str	r0, [r7, #52]	; 0x34
 800c714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c716:	2b00      	cmp	r3, #0
 800c718:	d151      	bne.n	800c7be <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	2b01      	cmp	r3, #1
 800c720:	d122      	bne.n	800c768 <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 800c722:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c726:	461a      	mov	r2, r3
 800c728:	2104      	movs	r1, #4
 800c72a:	68f8      	ldr	r0, [r7, #12]
 800c72c:	f7ff feea 	bl	800c504 <waitfor>
 800c730:	4603      	mov	r3, r0
 800c732:	2b04      	cmp	r3, #4
 800c734:	d114      	bne.n	800c760 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	695c      	ldr	r4, [r3, #20]
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	68db      	ldr	r3, [r3, #12]
 800c73e:	f107 021a 	add.w	r2, r7, #26
 800c742:	f107 0119 	add.w	r1, r7, #25
 800c746:	f107 0018 	add.w	r0, r7, #24
 800c74a:	9300      	str	r3, [sp, #0]
 800c74c:	4623      	mov	r3, r4
 800c74e:	f000 fba7 	bl	800cea0 <MQTTDeserialize_ack>
 800c752:	4603      	mov	r3, r0
 800c754:	2b01      	cmp	r3, #1
 800c756:	d035      	beq.n	800c7c4 <MQTTPublish+0x174>
                rc = FAILURE;
 800c758:	f04f 33ff 	mov.w	r3, #4294967295
 800c75c:	637b      	str	r3, [r7, #52]	; 0x34
 800c75e:	e031      	b.n	800c7c4 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 800c760:	f04f 33ff 	mov.w	r3, #4294967295
 800c764:	637b      	str	r3, [r7, #52]	; 0x34
 800c766:	e02d      	b.n	800c7c4 <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	2b02      	cmp	r3, #2
 800c76e:	d128      	bne.n	800c7c2 <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 800c770:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c774:	461a      	mov	r2, r3
 800c776:	2107      	movs	r1, #7
 800c778:	68f8      	ldr	r0, [r7, #12]
 800c77a:	f7ff fec3 	bl	800c504 <waitfor>
 800c77e:	4603      	mov	r3, r0
 800c780:	2b07      	cmp	r3, #7
 800c782:	d114      	bne.n	800c7ae <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	695c      	ldr	r4, [r3, #20]
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	f107 0216 	add.w	r2, r7, #22
 800c790:	f107 0115 	add.w	r1, r7, #21
 800c794:	f107 0014 	add.w	r0, r7, #20
 800c798:	9300      	str	r3, [sp, #0]
 800c79a:	4623      	mov	r3, r4
 800c79c:	f000 fb80 	bl	800cea0 <MQTTDeserialize_ack>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	2b01      	cmp	r3, #1
 800c7a4:	d00e      	beq.n	800c7c4 <MQTTPublish+0x174>
                rc = FAILURE;
 800c7a6:	f04f 33ff 	mov.w	r3, #4294967295
 800c7aa:	637b      	str	r3, [r7, #52]	; 0x34
 800c7ac:	e00a      	b.n	800c7c4 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 800c7ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c7b2:	637b      	str	r3, [r7, #52]	; 0x34
 800c7b4:	e006      	b.n	800c7c4 <MQTTPublish+0x174>
		goto exit;
 800c7b6:	bf00      	nop
 800c7b8:	e004      	b.n	800c7c4 <MQTTPublish+0x174>
        goto exit;
 800c7ba:	bf00      	nop
 800c7bc:	e002      	b.n	800c7c4 <MQTTPublish+0x174>
        goto exit; // there was a problem
 800c7be:	bf00      	nop
 800c7c0:	e000      	b.n	800c7c4 <MQTTPublish+0x174>
    }

exit:
 800c7c2:	bf00      	nop
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 800c7c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	373c      	adds	r7, #60	; 0x3c
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c7ce <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 800c7ce:	b480      	push	{r7}
 800c7d0:	b083      	sub	sp, #12
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	605a      	str	r2, [r3, #4]
}
 800c7dc:	bf00      	nop
 800c7de:	370c      	adds	r7, #12
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr

0800c7e8 <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 800c7e8:	b480      	push	{r7}
 800c7ea:	b085      	sub	sp, #20
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	685a      	ldr	r2, [r3, #4]
 800c7f4:	4b06      	ldr	r3, [pc, #24]	; (800c810 <TimerIsExpired+0x28>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	1ad3      	subs	r3, r2, r3
 800c7fa:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	0fdb      	lsrs	r3, r3, #31
 800c800:	b2db      	uxtb	r3, r3
}
 800c802:	4618      	mov	r0, r3
 800c804:	3714      	adds	r7, #20
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr
 800c80e:	bf00      	nop
 800c810:	20000990 	.word	0x20000990

0800c814 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 800c814:	b480      	push	{r7}
 800c816:	b083      	sub	sp, #12
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 800c81e:	4b06      	ldr	r3, [pc, #24]	; (800c838 <TimerCountdownMS+0x24>)
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	441a      	add	r2, r3
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	605a      	str	r2, [r3, #4]
}
 800c82a:	bf00      	nop
 800c82c:	370c      	adds	r7, #12
 800c82e:	46bd      	mov	sp, r7
 800c830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c834:	4770      	bx	lr
 800c836:	bf00      	nop
 800c838:	20000990 	.word	0x20000990

0800c83c <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 800c83c:	b480      	push	{r7}
 800c83e:	b083      	sub	sp, #12
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c84c:	fb03 f202 	mul.w	r2, r3, r2
 800c850:	4b05      	ldr	r3, [pc, #20]	; (800c868 <TimerCountdown+0x2c>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	441a      	add	r2, r3
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	605a      	str	r2, [r3, #4]
}
 800c85a:	bf00      	nop
 800c85c:	370c      	adds	r7, #12
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop
 800c868:	20000990 	.word	0x20000990

0800c86c <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 800c86c:	b480      	push	{r7}
 800c86e:	b085      	sub	sp, #20
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	685a      	ldr	r2, [r3, #4]
 800c878:	4b06      	ldr	r3, [pc, #24]	; (800c894 <TimerLeftMS+0x28>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	1ad3      	subs	r3, r2, r3
 800c87e:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 800c886:	4618      	mov	r0, r3
 800c888:	3714      	adds	r7, #20
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop
 800c894:	20000990 	.word	0x20000990

0800c898 <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 800c898:	b480      	push	{r7}
 800c89a:	b083      	sub	sp, #12
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	683a      	ldr	r2, [r7, #0]
 800c8a6:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	4a07      	ldr	r2, [pc, #28]	; (800c8c8 <NewNetwork+0x30>)
 800c8ac:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	4a06      	ldr	r2, [pc, #24]	; (800c8cc <NewNetwork+0x34>)
 800c8b2:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	4a06      	ldr	r2, [pc, #24]	; (800c8d0 <NewNetwork+0x38>)
 800c8b8:	60da      	str	r2, [r3, #12]
}
 800c8ba:	bf00      	nop
 800c8bc:	370c      	adds	r7, #12
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c4:	4770      	bx	lr
 800c8c6:	bf00      	nop
 800c8c8:	0800c8d5 	.word	0x0800c8d5
 800c8cc:	0800c92f 	.word	0x0800c92f
 800c8d0:	0800c977 	.word	0x0800c977

0800c8d4 <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b084      	sub	sp, #16
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	60b9      	str	r1, [r7, #8]
 800c8de:	607a      	str	r2, [r7, #4]
 800c8e0:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	009b      	lsls	r3, r3, #2
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	00db      	lsls	r3, r3, #3
 800c8ec:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f7fb f865 	bl	80079c0 <WIZCHIP_READ>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b17      	cmp	r3, #23
 800c8fa:	d113      	bne.n	800c924 <w5x00_read+0x50>
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	b2db      	uxtb	r3, r3
 800c902:	4618      	mov	r0, r3
 800c904:	f7fb fa01 	bl	8007d0a <getSn_RX_RSR>
 800c908:	4603      	mov	r3, r0
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d00a      	beq.n	800c924 <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	b2db      	uxtb	r3, r3
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	b292      	uxth	r2, r2
 800c918:	68b9      	ldr	r1, [r7, #8]
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7fb ff68 	bl	80087f0 <recv>
 800c920:	4603      	mov	r3, r0
 800c922:	e000      	b.n	800c926 <w5x00_read+0x52>

	return SOCK_ERROR;
 800c924:	2300      	movs	r3, #0
}
 800c926:	4618      	mov	r0, r3
 800c928:	3710      	adds	r7, #16
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}

0800c92e <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 800c92e:	b580      	push	{r7, lr}
 800c930:	b084      	sub	sp, #16
 800c932:	af00      	add	r7, sp, #0
 800c934:	60f8      	str	r0, [r7, #12]
 800c936:	60b9      	str	r1, [r7, #8]
 800c938:	607a      	str	r2, [r7, #4]
 800c93a:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	009b      	lsls	r3, r3, #2
 800c942:	3301      	adds	r3, #1
 800c944:	00db      	lsls	r3, r3, #3
 800c946:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7fb f838 	bl	80079c0 <WIZCHIP_READ>
 800c950:	4603      	mov	r3, r0
 800c952:	2b17      	cmp	r3, #23
 800c954:	d10a      	bne.n	800c96c <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	b292      	uxth	r2, r2
 800c960:	68b9      	ldr	r1, [r7, #8]
 800c962:	4618      	mov	r0, r3
 800c964:	f7fb fe4a 	bl	80085fc <send>
 800c968:	4603      	mov	r3, r0
 800c96a:	e000      	b.n	800c96e <w5x00_write+0x40>

	return SOCK_ERROR;
 800c96c:	2300      	movs	r3, #0
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3710      	adds	r7, #16
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}

0800c976 <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 800c976:	b580      	push	{r7, lr}
 800c978:	b082      	sub	sp, #8
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	b2db      	uxtb	r3, r3
 800c984:	4618      	mov	r0, r3
 800c986:	f7fb fdc3 	bl	8008510 <disconnect>
}
 800c98a:	bf00      	nop
 800c98c:	3708      	adds	r7, #8
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}

0800c992 <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 800c992:	b580      	push	{r7, lr}
 800c994:	b086      	sub	sp, #24
 800c996:	af00      	add	r7, sp, #0
 800c998:	60f8      	str	r0, [r7, #12]
 800c99a:	60b9      	str	r1, [r7, #8]
 800c99c:	4613      	mov	r3, r2
 800c99e:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 800c9a0:	f243 0339 	movw	r3, #12345	; 0x3039
 800c9a4:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	b2d8      	uxtb	r0, r3
 800c9ac:	8afa      	ldrh	r2, [r7, #22]
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	2101      	movs	r1, #1
 800c9b2:	f7fb faf5 	bl	8007fa0 <socket>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	461a      	mov	r2, r3
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d001      	beq.n	800c9c6 <ConnectNetwork+0x34>
		return SOCK_ERROR;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	e00d      	b.n	800c9e2 <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	b2db      	uxtb	r3, r3
 800c9cc:	88fa      	ldrh	r2, [r7, #6]
 800c9ce:	68b9      	ldr	r1, [r7, #8]
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7fb fcc1 	bl	8008358 <connect>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	2b01      	cmp	r3, #1
 800c9da:	d001      	beq.n	800c9e0 <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	e000      	b.n	800c9e2 <ConnectNetwork+0x50>

	return SOCK_OK;
 800c9e0:	2301      	movs	r3, #1
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3718      	adds	r7, #24
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 800c9ea:	b590      	push	{r4, r7, lr}
 800c9ec:	b085      	sub	sp, #20
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	6078      	str	r0, [r7, #4]
	int len = 0;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	7a1b      	ldrb	r3, [r3, #8]
 800c9fa:	2b03      	cmp	r3, #3
 800c9fc:	d102      	bne.n	800ca04 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 800c9fe:	230c      	movs	r3, #12
 800ca00:	60fb      	str	r3, [r7, #12]
 800ca02:	e005      	b.n	800ca10 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	7a1b      	ldrb	r3, [r3, #8]
 800ca08:	2b04      	cmp	r3, #4
 800ca0a:	d101      	bne.n	800ca10 <MQTTSerialize_connectLength+0x26>
		len = 10;
 800ca0c:	230a      	movs	r3, #10
 800ca0e:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	330c      	adds	r3, #12
 800ca14:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ca18:	f000 fc43 	bl	800d2a2 <MQTTstrlen>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	3302      	adds	r3, #2
 800ca20:	68fa      	ldr	r2, [r7, #12]
 800ca22:	4413      	add	r3, r2
 800ca24:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	7edb      	ldrb	r3, [r3, #27]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d013      	beq.n	800ca56 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	3324      	adds	r3, #36	; 0x24
 800ca32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ca36:	f000 fc34 	bl	800d2a2 <MQTTstrlen>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	1c9c      	adds	r4, r3, #2
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	3330      	adds	r3, #48	; 0x30
 800ca42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ca46:	f000 fc2c 	bl	800d2a2 <MQTTstrlen>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	4423      	add	r3, r4
 800ca4e:	3302      	adds	r3, #2
 800ca50:	68fa      	ldr	r2, [r7, #12]
 800ca52:	4413      	add	r3, r2
 800ca54:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d103      	bne.n	800ca66 <MQTTSerialize_connectLength+0x7c>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d00a      	beq.n	800ca7c <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	3340      	adds	r3, #64	; 0x40
 800ca6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ca6e:	f000 fc18 	bl	800d2a2 <MQTTstrlen>
 800ca72:	4603      	mov	r3, r0
 800ca74:	3302      	adds	r3, #2
 800ca76:	68fa      	ldr	r2, [r7, #12]
 800ca78:	4413      	add	r3, r2
 800ca7a:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d103      	bne.n	800ca8c <MQTTSerialize_connectLength+0xa2>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d00a      	beq.n	800caa2 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	334c      	adds	r3, #76	; 0x4c
 800ca90:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ca94:	f000 fc05 	bl	800d2a2 <MQTTstrlen>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	3302      	adds	r3, #2
 800ca9c:	68fa      	ldr	r2, [r7, #12]
 800ca9e:	4413      	add	r3, r2
 800caa0:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 800caa2:	68fb      	ldr	r3, [r7, #12]
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3714      	adds	r7, #20
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd90      	pop	{r4, r7, pc}

0800caac <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b08a      	sub	sp, #40	; 0x28
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	60f8      	str	r0, [r7, #12]
 800cab4:	60b9      	str	r1, [r7, #8]
 800cab6:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 800cabc:	2300      	movs	r3, #0
 800cabe:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 800cac0:	2300      	movs	r3, #0
 800cac2:	617b      	str	r3, [r7, #20]
	int len = 0;
 800cac4:	2300      	movs	r3, #0
 800cac6:	623b      	str	r3, [r7, #32]
	int rc = -1;
 800cac8:	f04f 33ff 	mov.w	r3, #4294967295
 800cacc:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f7ff ff8b 	bl	800c9ea <MQTTSerialize_connectLength>
 800cad4:	6238      	str	r0, [r7, #32]
 800cad6:	6a38      	ldr	r0, [r7, #32]
 800cad8:	f000 fa98 	bl	800d00c <MQTTPacket_len>
 800cadc:	4602      	mov	r2, r0
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	4293      	cmp	r3, r2
 800cae2:	da03      	bge.n	800caec <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800cae4:	f06f 0301 	mvn.w	r3, #1
 800cae8:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 800caea:	e0c2      	b.n	800cc72 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 800caec:	2300      	movs	r3, #0
 800caee:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 800caf0:	7e3b      	ldrb	r3, [r7, #24]
 800caf2:	2201      	movs	r2, #1
 800caf4:	f362 1307 	bfi	r3, r2, #4, #4
 800caf8:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800cafa:	7e3a      	ldrb	r2, [r7, #24]
 800cafc:	f107 031c 	add.w	r3, r7, #28
 800cb00:	4611      	mov	r1, r2
 800cb02:	4618      	mov	r0, r3
 800cb04:	f000 fb11 	bl	800d12a <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800cb08:	69fb      	ldr	r3, [r7, #28]
 800cb0a:	6a39      	ldr	r1, [r7, #32]
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f000 fa12 	bl	800cf36 <MQTTPacket_encode>
 800cb12:	4602      	mov	r2, r0
 800cb14:	69fb      	ldr	r3, [r7, #28]
 800cb16:	4413      	add	r3, r2
 800cb18:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	7a1b      	ldrb	r3, [r3, #8]
 800cb1e:	2b04      	cmp	r3, #4
 800cb20:	d10c      	bne.n	800cb3c <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 800cb22:	f107 031c 	add.w	r3, r7, #28
 800cb26:	4955      	ldr	r1, [pc, #340]	; (800cc7c <MQTTSerialize_connect+0x1d0>)
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f000 fb3c 	bl	800d1a6 <writeCString>
		writeChar(&ptr, (char) 4);
 800cb2e:	f107 031c 	add.w	r3, r7, #28
 800cb32:	2104      	movs	r1, #4
 800cb34:	4618      	mov	r0, r3
 800cb36:	f000 faf8 	bl	800d12a <writeChar>
 800cb3a:	e00b      	b.n	800cb54 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 800cb3c:	f107 031c 	add.w	r3, r7, #28
 800cb40:	494f      	ldr	r1, [pc, #316]	; (800cc80 <MQTTSerialize_connect+0x1d4>)
 800cb42:	4618      	mov	r0, r3
 800cb44:	f000 fb2f 	bl	800d1a6 <writeCString>
		writeChar(&ptr, (char) 3);
 800cb48:	f107 031c 	add.w	r3, r7, #28
 800cb4c:	2103      	movs	r1, #3
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f000 faeb 	bl	800d12a <writeChar>
	}

	flags.all = 0;
 800cb54:	2300      	movs	r3, #0
 800cb56:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	7e9b      	ldrb	r3, [r3, #26]
 800cb5c:	f003 0301 	and.w	r3, r3, #1
 800cb60:	b2da      	uxtb	r2, r3
 800cb62:	7d3b      	ldrb	r3, [r7, #20]
 800cb64:	f362 0341 	bfi	r3, r2, #1, #1
 800cb68:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	7edb      	ldrb	r3, [r3, #27]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	bf14      	ite	ne
 800cb72:	2301      	movne	r3, #1
 800cb74:	2300      	moveq	r3, #0
 800cb76:	b2da      	uxtb	r2, r3
 800cb78:	7d3b      	ldrb	r3, [r7, #20]
 800cb7a:	f362 0382 	bfi	r3, r2, #2, #1
 800cb7e:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 800cb80:	7d3b      	ldrb	r3, [r7, #20]
 800cb82:	f003 0304 	and.w	r3, r3, #4
 800cb86:	b2db      	uxtb	r3, r3
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d013      	beq.n	800cbb4 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb92:	f003 0303 	and.w	r3, r3, #3
 800cb96:	b2da      	uxtb	r2, r3
 800cb98:	7d3b      	ldrb	r3, [r7, #20]
 800cb9a:	f362 03c4 	bfi	r3, r2, #3, #2
 800cb9e:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cba6:	f003 0301 	and.w	r3, r3, #1
 800cbaa:	b2da      	uxtb	r2, r3
 800cbac:	7d3b      	ldrb	r3, [r7, #20]
 800cbae:	f362 1345 	bfi	r3, r2, #5, #1
 800cbb2:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d103      	bne.n	800cbc4 <MQTTSerialize_connect+0x118>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d003      	beq.n	800cbcc <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 800cbc4:	7d3b      	ldrb	r3, [r7, #20]
 800cbc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbca:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d103      	bne.n	800cbdc <MQTTSerialize_connect+0x130>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d003      	beq.n	800cbe4 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 800cbdc:	7d3b      	ldrb	r3, [r7, #20]
 800cbde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbe2:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 800cbe4:	7d3a      	ldrb	r2, [r7, #20]
 800cbe6:	f107 031c 	add.w	r3, r7, #28
 800cbea:	4611      	mov	r1, r2
 800cbec:	4618      	mov	r0, r3
 800cbee:	f000 fa9c 	bl	800d12a <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	8b1b      	ldrh	r3, [r3, #24]
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	f107 031c 	add.w	r3, r7, #28
 800cbfc:	4611      	mov	r1, r2
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f000 faa8 	bl	800d154 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f107 001c 	add.w	r0, r7, #28
 800cc0a:	330c      	adds	r3, #12
 800cc0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cc0e:	f000 fae9 	bl	800d1e4 <writeMQTTString>
	if (options->willFlag)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	7edb      	ldrb	r3, [r3, #27]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d00d      	beq.n	800cc36 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f107 001c 	add.w	r0, r7, #28
 800cc20:	3324      	adds	r3, #36	; 0x24
 800cc22:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cc24:	f000 fade 	bl	800d1e4 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f107 001c 	add.w	r0, r7, #28
 800cc2e:	3330      	adds	r3, #48	; 0x30
 800cc30:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cc32:	f000 fad7 	bl	800d1e4 <writeMQTTString>
	}
	if (flags.bits.username)
 800cc36:	7d3b      	ldrb	r3, [r7, #20]
 800cc38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cc3c:	b2db      	uxtb	r3, r3
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d006      	beq.n	800cc50 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f107 001c 	add.w	r0, r7, #28
 800cc48:	3340      	adds	r3, #64	; 0x40
 800cc4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cc4c:	f000 faca 	bl	800d1e4 <writeMQTTString>
	if (flags.bits.password)
 800cc50:	7d3b      	ldrb	r3, [r7, #20]
 800cc52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc56:	b2db      	uxtb	r3, r3
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d006      	beq.n	800cc6a <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f107 001c 	add.w	r0, r7, #28
 800cc62:	334c      	adds	r3, #76	; 0x4c
 800cc64:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cc66:	f000 fabd 	bl	800d1e4 <writeMQTTString>

	rc = ptr - buf;
 800cc6a:	69fa      	ldr	r2, [r7, #28]
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	1ad3      	subs	r3, r2, r3
 800cc70:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 800cc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3728      	adds	r7, #40	; 0x28
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}
 800cc7c:	08021174 	.word	0x08021174
 800cc80:	0802117c 	.word	0x0802117c

0800cc84 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b08a      	sub	sp, #40	; 0x28
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	60f8      	str	r0, [r7, #12]
 800cc8c:	60b9      	str	r1, [r7, #8]
 800cc8e:	607a      	str	r2, [r7, #4]
 800cc90:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800cc92:	2300      	movs	r3, #0
 800cc94:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 800cca2:	2300      	movs	r3, #0
 800cca4:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800cca6:	f107 0318 	add.w	r3, r7, #24
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f000 fa29 	bl	800d102 <readChar>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 800ccb4:	7f3b      	ldrb	r3, [r7, #28]
 800ccb6:	f023 030f 	bic.w	r3, r3, #15
 800ccba:	b2db      	uxtb	r3, r3
 800ccbc:	2b20      	cmp	r3, #32
 800ccbe:	d12e      	bne.n	800cd1e <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800ccc0:	69bb      	ldr	r3, [r7, #24]
 800ccc2:	f107 0214 	add.w	r2, r7, #20
 800ccc6:	4611      	mov	r1, r2
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f000 f9e9 	bl	800d0a0 <MQTTPacket_decodeBuf>
 800ccce:	6278      	str	r0, [r7, #36]	; 0x24
 800ccd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccd2:	69bb      	ldr	r3, [r7, #24]
 800ccd4:	4413      	add	r3, r2
 800ccd6:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800ccd8:	69bb      	ldr	r3, [r7, #24]
 800ccda:	697a      	ldr	r2, [r7, #20]
 800ccdc:	4413      	add	r3, r2
 800ccde:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 800cce0:	69bb      	ldr	r3, [r7, #24]
 800cce2:	6a3a      	ldr	r2, [r7, #32]
 800cce4:	1ad3      	subs	r3, r2, r3
 800cce6:	2b01      	cmp	r3, #1
 800cce8:	dd1b      	ble.n	800cd22 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 800ccea:	f107 0318 	add.w	r3, r7, #24
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f000 fa07 	bl	800d102 <readChar>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 800ccf8:	7c3b      	ldrb	r3, [r7, #16]
 800ccfa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ccfe:	b2db      	uxtb	r3, r3
 800cd00:	461a      	mov	r2, r3
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 800cd06:	f107 0318 	add.w	r3, r7, #24
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f000 f9f9 	bl	800d102 <readChar>
 800cd10:	4603      	mov	r3, r0
 800cd12:	461a      	mov	r2, r3
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	701a      	strb	r2, [r3, #0]

	rc = 1;
 800cd18:	2301      	movs	r3, #1
 800cd1a:	627b      	str	r3, [r7, #36]	; 0x24
 800cd1c:	e002      	b.n	800cd24 <MQTTDeserialize_connack+0xa0>
		goto exit;
 800cd1e:	bf00      	nop
 800cd20:	e000      	b.n	800cd24 <MQTTDeserialize_connack+0xa0>
		goto exit;
 800cd22:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800cd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3728      	adds	r7, #40	; 0x28
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}

0800cd2e <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 800cd2e:	b580      	push	{r7, lr}
 800cd30:	b088      	sub	sp, #32
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	60f8      	str	r0, [r7, #12]
 800cd36:	60b9      	str	r1, [r7, #8]
 800cd38:	4613      	mov	r3, r2
 800cd3a:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 800cd40:	f04f 33ff 	mov.w	r3, #4294967295
 800cd44:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	2b01      	cmp	r3, #1
 800cd4e:	dc03      	bgt.n	800cd58 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800cd50:	f06f 0301 	mvn.w	r3, #1
 800cd54:	61fb      	str	r3, [r7, #28]
		goto exit;
 800cd56:	e01d      	b.n	800cd94 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 800cd5c:	79fb      	ldrb	r3, [r7, #7]
 800cd5e:	f003 030f 	and.w	r3, r3, #15
 800cd62:	b2da      	uxtb	r2, r3
 800cd64:	7e3b      	ldrb	r3, [r7, #24]
 800cd66:	f362 1307 	bfi	r3, r2, #4, #4
 800cd6a:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800cd6c:	7e3a      	ldrb	r2, [r7, #24]
 800cd6e:	f107 0314 	add.w	r3, r7, #20
 800cd72:	4611      	mov	r1, r2
 800cd74:	4618      	mov	r0, r3
 800cd76:	f000 f9d8 	bl	800d12a <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	2100      	movs	r1, #0
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f000 f8d9 	bl	800cf36 <MQTTPacket_encode>
 800cd84:	4602      	mov	r2, r0
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	4413      	add	r3, r2
 800cd8a:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 800cd8c:	697a      	ldr	r2, [r7, #20]
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	1ad3      	subs	r3, r2, r3
 800cd92:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800cd94:	69fb      	ldr	r3, [r7, #28]
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3720      	adds	r7, #32
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}

0800cd9e <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 800cd9e:	b580      	push	{r7, lr}
 800cda0:	b082      	sub	sp, #8
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	6078      	str	r0, [r7, #4]
 800cda6:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 800cda8:	220c      	movs	r2, #12
 800cdaa:	6839      	ldr	r1, [r7, #0]
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f7ff ffbe 	bl	800cd2e <MQTTSerialize_zero>
 800cdb2:	4603      	mov	r3, r0
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3708      	adds	r7, #8
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b08a      	sub	sp, #40	; 0x28
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	60f8      	str	r0, [r7, #12]
 800cdc4:	60b9      	str	r1, [r7, #8]
 800cdc6:	607a      	str	r2, [r7, #4]
 800cdc8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800cdca:	2300      	movs	r3, #0
 800cdcc:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800cdce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdd0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 800cdda:	2300      	movs	r3, #0
 800cddc:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800cdde:	f107 0318 	add.w	r3, r7, #24
 800cde2:	4618      	mov	r0, r3
 800cde4:	f000 f98d 	bl	800d102 <readChar>
 800cde8:	4603      	mov	r3, r0
 800cdea:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 800cdec:	7f3b      	ldrb	r3, [r7, #28]
 800cdee:	f023 030f 	bic.w	r3, r3, #15
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	2b30      	cmp	r3, #48	; 0x30
 800cdf6:	d14b      	bne.n	800ce90 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 800cdf8:	7f3b      	ldrb	r3, [r7, #28]
 800cdfa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800cdfe:	b2db      	uxtb	r3, r3
 800ce00:	461a      	mov	r2, r3
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 800ce06:	7f3b      	ldrb	r3, [r7, #28]
 800ce08:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800ce0c:	b2db      	uxtb	r3, r3
 800ce0e:	461a      	mov	r2, r3
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 800ce14:	7f3b      	ldrb	r3, [r7, #28]
 800ce16:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ce1a:	b2db      	uxtb	r3, r3
 800ce1c:	461a      	mov	r2, r3
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800ce22:	69bb      	ldr	r3, [r7, #24]
 800ce24:	f107 0214 	add.w	r2, r7, #20
 800ce28:	4611      	mov	r1, r2
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f000 f938 	bl	800d0a0 <MQTTPacket_decodeBuf>
 800ce30:	6278      	str	r0, [r7, #36]	; 0x24
 800ce32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce34:	69bb      	ldr	r3, [r7, #24]
 800ce36:	4413      	add	r3, r2
 800ce38:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800ce3a:	69bb      	ldr	r3, [r7, #24]
 800ce3c:	697a      	ldr	r2, [r7, #20]
 800ce3e:	4413      	add	r3, r2
 800ce40:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800ce42:	f107 0318 	add.w	r3, r7, #24
 800ce46:	6a3a      	ldr	r2, [r7, #32]
 800ce48:	4619      	mov	r1, r3
 800ce4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce4c:	f000 f9f8 	bl	800d240 <readMQTTLenString>
 800ce50:	4603      	mov	r3, r0
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d01e      	beq.n	800ce94 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 800ce56:	69bb      	ldr	r3, [r7, #24]
 800ce58:	6a3a      	ldr	r2, [r7, #32]
 800ce5a:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	db19      	blt.n	800ce94 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	dd08      	ble.n	800ce7a <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 800ce68:	f107 0318 	add.w	r3, r7, #24
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f000 f92d 	bl	800d0cc <readInt>
 800ce72:	4603      	mov	r3, r0
 800ce74:	b29a      	uxth	r2, r3
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	6a3a      	ldr	r2, [r7, #32]
 800ce7e:	1ad2      	subs	r2, r2, r3
 800ce80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce82:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 800ce84:	69ba      	ldr	r2, [r7, #24]
 800ce86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce88:	601a      	str	r2, [r3, #0]
	rc = 1;
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	627b      	str	r3, [r7, #36]	; 0x24
 800ce8e:	e002      	b.n	800ce96 <MQTTDeserialize_publish+0xda>
		goto exit;
 800ce90:	bf00      	nop
 800ce92:	e000      	b.n	800ce96 <MQTTDeserialize_publish+0xda>
		goto exit;
 800ce94:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800ce96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3728      	adds	r7, #40	; 0x28
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b08a      	sub	sp, #40	; 0x28
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	60f8      	str	r0, [r7, #12]
 800cea8:	60b9      	str	r1, [r7, #8]
 800ceaa:	607a      	str	r2, [r7, #4]
 800ceac:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800ceae:	2300      	movs	r3, #0
 800ceb0:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800ceba:	2300      	movs	r3, #0
 800cebc:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800cebe:	f107 0318 	add.w	r3, r7, #24
 800cec2:	4618      	mov	r0, r3
 800cec4:	f000 f91d 	bl	800d102 <readChar>
 800cec8:	4603      	mov	r3, r0
 800ceca:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 800cecc:	7f3b      	ldrb	r3, [r7, #28]
 800cece:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800ced2:	b2db      	uxtb	r3, r3
 800ced4:	461a      	mov	r2, r3
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 800ceda:	7f3b      	ldrb	r3, [r7, #28]
 800cedc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800cee0:	b2db      	uxtb	r3, r3
 800cee2:	461a      	mov	r2, r3
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800cee8:	69bb      	ldr	r3, [r7, #24]
 800ceea:	f107 0214 	add.w	r2, r7, #20
 800ceee:	4611      	mov	r1, r2
 800cef0:	4618      	mov	r0, r3
 800cef2:	f000 f8d5 	bl	800d0a0 <MQTTPacket_decodeBuf>
 800cef6:	6278      	str	r0, [r7, #36]	; 0x24
 800cef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	4413      	add	r3, r2
 800cefe:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800cf00:	69bb      	ldr	r3, [r7, #24]
 800cf02:	697a      	ldr	r2, [r7, #20]
 800cf04:	4413      	add	r3, r2
 800cf06:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 800cf08:	69bb      	ldr	r3, [r7, #24]
 800cf0a:	6a3a      	ldr	r2, [r7, #32]
 800cf0c:	1ad3      	subs	r3, r2, r3
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	dd0b      	ble.n	800cf2a <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 800cf12:	f107 0318 	add.w	r3, r7, #24
 800cf16:	4618      	mov	r0, r3
 800cf18:	f000 f8d8 	bl	800d0cc <readInt>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	b29a      	uxth	r2, r3
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	801a      	strh	r2, [r3, #0]

	rc = 1;
 800cf24:	2301      	movs	r3, #1
 800cf26:	627b      	str	r3, [r7, #36]	; 0x24
 800cf28:	e000      	b.n	800cf2c <MQTTDeserialize_ack+0x8c>
		goto exit;
 800cf2a:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800cf2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3728      	adds	r7, #40	; 0x28
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}

0800cf36 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 800cf36:	b480      	push	{r7}
 800cf38:	b085      	sub	sp, #20
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	6078      	str	r0, [r7, #4]
 800cf3e:	6039      	str	r1, [r7, #0]
	int rc = 0;
 800cf40:	2300      	movs	r3, #0
 800cf42:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	425a      	negs	r2, r3
 800cf48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cf50:	bf58      	it	pl
 800cf52:	4253      	negpl	r3, r2
 800cf54:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	da00      	bge.n	800cf5e <MQTTPacket_encode+0x28>
 800cf5c:	337f      	adds	r3, #127	; 0x7f
 800cf5e:	11db      	asrs	r3, r3, #7
 800cf60:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	dd03      	ble.n	800cf70 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 800cf68:	7afb      	ldrb	r3, [r7, #11]
 800cf6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cf6e:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	1c5a      	adds	r2, r3, #1
 800cf74:	60fa      	str	r2, [r7, #12]
 800cf76:	461a      	mov	r2, r3
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	4413      	add	r3, r2
 800cf7c:	7afa      	ldrb	r2, [r7, #11]
 800cf7e:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	dcde      	bgt.n	800cf44 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 800cf86:	68fb      	ldr	r3, [r7, #12]
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3714      	adds	r7, #20
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr

0800cf94 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b086      	sub	sp, #24
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	617b      	str	r3, [r7, #20]
	int len = 0;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 800cfac:	f04f 33ff 	mov.w	r3, #4294967295
 800cfb0:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800cfb2:	693b      	ldr	r3, [r7, #16]
 800cfb4:	3301      	adds	r3, #1
 800cfb6:	613b      	str	r3, [r7, #16]
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	2b04      	cmp	r3, #4
 800cfbc:	dd03      	ble.n	800cfc6 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 800cfbe:	f04f 33ff 	mov.w	r3, #4294967295
 800cfc2:	60fb      	str	r3, [r7, #12]
			goto exit;
 800cfc4:	e01d      	b.n	800d002 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 800cfc6:	f107 020b 	add.w	r2, r7, #11
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2101      	movs	r1, #1
 800cfce:	4610      	mov	r0, r2
 800cfd0:	4798      	blx	r3
 800cfd2:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2b01      	cmp	r3, #1
 800cfd8:	d112      	bne.n	800d000 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	681a      	ldr	r2, [r3, #0]
 800cfde:	7afb      	ldrb	r3, [r7, #11]
 800cfe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfe4:	6979      	ldr	r1, [r7, #20]
 800cfe6:	fb01 f303 	mul.w	r3, r1, r3
 800cfea:	441a      	add	r2, r3
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	01db      	lsls	r3, r3, #7
 800cff4:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 800cff6:	7afb      	ldrb	r3, [r7, #11]
 800cff8:	b25b      	sxtb	r3, r3
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	dbd6      	blt.n	800cfac <MQTTPacket_decode+0x18>
exit:
 800cffe:	e000      	b.n	800d002 <MQTTPacket_decode+0x6e>
			goto exit;
 800d000:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 800d002:	693b      	ldr	r3, [r7, #16]
}
 800d004:	4618      	mov	r0, r3
 800d006:	3718      	adds	r7, #24
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	3301      	adds	r3, #1
 800d018:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2b7f      	cmp	r3, #127	; 0x7f
 800d01e:	dc03      	bgt.n	800d028 <MQTTPacket_len+0x1c>
		rem_len += 1;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	3301      	adds	r3, #1
 800d024:	607b      	str	r3, [r7, #4]
 800d026:	e012      	b.n	800d04e <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d02e:	da03      	bge.n	800d038 <MQTTPacket_len+0x2c>
		rem_len += 2;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	3302      	adds	r3, #2
 800d034:	607b      	str	r3, [r7, #4]
 800d036:	e00a      	b.n	800d04e <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	4a08      	ldr	r2, [pc, #32]	; (800d05c <MQTTPacket_len+0x50>)
 800d03c:	4293      	cmp	r3, r2
 800d03e:	dc03      	bgt.n	800d048 <MQTTPacket_len+0x3c>
		rem_len += 3;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	3303      	adds	r3, #3
 800d044:	607b      	str	r3, [r7, #4]
 800d046:	e002      	b.n	800d04e <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	3304      	adds	r3, #4
 800d04c:	607b      	str	r3, [r7, #4]
	return rem_len;
 800d04e:	687b      	ldr	r3, [r7, #4]
}
 800d050:	4618      	mov	r0, r3
 800d052:	370c      	adds	r7, #12
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr
 800d05c:	001ffffe 	.word	0x001ffffe

0800d060 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 800d060:	b480      	push	{r7}
 800d062:	b085      	sub	sp, #20
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
 800d068:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 800d06a:	2300      	movs	r3, #0
 800d06c:	60fb      	str	r3, [r7, #12]
 800d06e:	e00a      	b.n	800d086 <bufchar+0x26>
		*c = *bufptr++;
 800d070:	4b0a      	ldr	r3, [pc, #40]	; (800d09c <bufchar+0x3c>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	1c5a      	adds	r2, r3, #1
 800d076:	4909      	ldr	r1, [pc, #36]	; (800d09c <bufchar+0x3c>)
 800d078:	600a      	str	r2, [r1, #0]
 800d07a:	781a      	ldrb	r2, [r3, #0]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	3301      	adds	r3, #1
 800d084:	60fb      	str	r3, [r7, #12]
 800d086:	68fa      	ldr	r2, [r7, #12]
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	429a      	cmp	r2, r3
 800d08c:	dbf0      	blt.n	800d070 <bufchar+0x10>
	return count;
 800d08e:	683b      	ldr	r3, [r7, #0]
}
 800d090:	4618      	mov	r0, r3
 800d092:	3714      	adds	r7, #20
 800d094:	46bd      	mov	sp, r7
 800d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09a:	4770      	bx	lr
 800d09c:	20000994 	.word	0x20000994

0800d0a0 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 800d0aa:	4a06      	ldr	r2, [pc, #24]	; (800d0c4 <MQTTPacket_decodeBuf+0x24>)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 800d0b0:	6839      	ldr	r1, [r7, #0]
 800d0b2:	4805      	ldr	r0, [pc, #20]	; (800d0c8 <MQTTPacket_decodeBuf+0x28>)
 800d0b4:	f7ff ff6e 	bl	800cf94 <MQTTPacket_decode>
 800d0b8:	4603      	mov	r3, r0
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3708      	adds	r7, #8
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	20000994 	.word	0x20000994
 800d0c8:	0800d061 	.word	0x0800d061

0800d0cc <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b085      	sub	sp, #20
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	021b      	lsls	r3, r3, #8
 800d0e0:	68fa      	ldr	r2, [r7, #12]
 800d0e2:	3201      	adds	r2, #1
 800d0e4:	7812      	ldrb	r2, [r2, #0]
 800d0e6:	4413      	add	r3, r2
 800d0e8:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	1c9a      	adds	r2, r3, #2
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	601a      	str	r2, [r3, #0]
	return len;
 800d0f4:	68bb      	ldr	r3, [r7, #8]
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3714      	adds	r7, #20
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d100:	4770      	bx	lr

0800d102 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 800d102:	b480      	push	{r7}
 800d104:	b085      	sub	sp, #20
 800d106:	af00      	add	r7, sp, #0
 800d108:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	1c5a      	adds	r2, r3, #1
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	601a      	str	r2, [r3, #0]
	return c;
 800d11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3714      	adds	r7, #20
 800d122:	46bd      	mov	sp, r7
 800d124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d128:	4770      	bx	lr

0800d12a <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 800d12a:	b480      	push	{r7}
 800d12c:	b083      	sub	sp, #12
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
 800d132:	460b      	mov	r3, r1
 800d134:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	78fa      	ldrb	r2, [r7, #3]
 800d13c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	1c5a      	adds	r2, r3, #1
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	601a      	str	r2, [r3, #0]
}
 800d148:	bf00      	nop
 800d14a:	370c      	adds	r7, #12
 800d14c:	46bd      	mov	sp, r7
 800d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d152:	4770      	bx	lr

0800d154 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 800d154:	b480      	push	{r7}
 800d156:	b083      	sub	sp, #12
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	2b00      	cmp	r3, #0
 800d162:	da00      	bge.n	800d166 <writeInt+0x12>
 800d164:	33ff      	adds	r3, #255	; 0xff
 800d166:	121b      	asrs	r3, r3, #8
 800d168:	461a      	mov	r2, r3
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	b2d2      	uxtb	r2, r2
 800d170:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	1c5a      	adds	r2, r3, #1
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	425a      	negs	r2, r3
 800d180:	b2db      	uxtb	r3, r3
 800d182:	b2d2      	uxtb	r2, r2
 800d184:	bf58      	it	pl
 800d186:	4253      	negpl	r3, r2
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	6812      	ldr	r2, [r2, #0]
 800d18c:	b2db      	uxtb	r3, r3
 800d18e:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	1c5a      	adds	r2, r3, #1
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	601a      	str	r2, [r3, #0]
}
 800d19a:	bf00      	nop
 800d19c:	370c      	adds	r7, #12
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a4:	4770      	bx	lr

0800d1a6 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 800d1a6:	b580      	push	{r7, lr}
 800d1a8:	b084      	sub	sp, #16
 800d1aa:	af00      	add	r7, sp, #0
 800d1ac:	6078      	str	r0, [r7, #4]
 800d1ae:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 800d1b0:	6838      	ldr	r0, [r7, #0]
 800d1b2:	f7f3 f875 	bl	80002a0 <strlen>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 800d1ba:	68f9      	ldr	r1, [r7, #12]
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f7ff ffc9 	bl	800d154 <writeInt>
	memcpy(*pptr, string, len);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	68fa      	ldr	r2, [r7, #12]
 800d1c8:	6839      	ldr	r1, [r7, #0]
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f00f f871 	bl	801c2b2 <memcpy>
	*pptr += len;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681a      	ldr	r2, [r3, #0]
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	441a      	add	r2, r3
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	601a      	str	r2, [r3, #0]
}
 800d1dc:	bf00      	nop
 800d1de:	3710      	adds	r7, #16
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}

0800d1e4 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b084      	sub	sp, #16
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	60f8      	str	r0, [r7, #12]
 800d1ec:	4638      	mov	r0, r7
 800d1ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	dd12      	ble.n	800d21e <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	68f8      	ldr	r0, [r7, #12]
 800d1fe:	f7ff ffa9 	bl	800d154 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	68b9      	ldr	r1, [r7, #8]
 800d208:	687a      	ldr	r2, [r7, #4]
 800d20a:	4618      	mov	r0, r3
 800d20c:	f00f f851 	bl	801c2b2 <memcpy>
		*pptr += mqttstring.lenstring.len;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	687a      	ldr	r2, [r7, #4]
 800d216:	441a      	add	r2, r3
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 800d21c:	e00c      	b.n	800d238 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d005      	beq.n	800d230 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	4619      	mov	r1, r3
 800d228:	68f8      	ldr	r0, [r7, #12]
 800d22a:	f7ff ffbc 	bl	800d1a6 <writeCString>
}
 800d22e:	e003      	b.n	800d238 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 800d230:	2100      	movs	r1, #0
 800d232:	68f8      	ldr	r0, [r7, #12]
 800d234:	f7ff ff8e 	bl	800d154 <writeInt>
}
 800d238:	bf00      	nop
 800d23a:	3710      	adds	r7, #16
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}

0800d240 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b086      	sub	sp, #24
 800d244:	af00      	add	r7, sp, #0
 800d246:	60f8      	str	r0, [r7, #12]
 800d248:	60b9      	str	r1, [r7, #8]
 800d24a:	607a      	str	r2, [r7, #4]
	int rc = 0;
 800d24c:	2300      	movs	r3, #0
 800d24e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	687a      	ldr	r2, [r7, #4]
 800d256:	1ad3      	subs	r3, r2, r3
 800d258:	2b01      	cmp	r3, #1
 800d25a:	dd1a      	ble.n	800d292 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 800d25c:	68b8      	ldr	r0, [r7, #8]
 800d25e:	f7ff ff35 	bl	800d0cc <readInt>
 800d262:	4602      	mov	r2, r0
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	68fa      	ldr	r2, [r7, #12]
 800d26e:	6852      	ldr	r2, [r2, #4]
 800d270:	4413      	add	r3, r2
 800d272:	687a      	ldr	r2, [r7, #4]
 800d274:	429a      	cmp	r2, r3
 800d276:	d30c      	bcc.n	800d292 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	681a      	ldr	r2, [r3, #0]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	68fa      	ldr	r2, [r7, #12]
 800d286:	6852      	ldr	r2, [r2, #4]
 800d288:	441a      	add	r2, r3
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	601a      	str	r2, [r3, #0]
			rc = 1;
 800d28e:	2301      	movs	r3, #1
 800d290:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	2200      	movs	r2, #0
 800d296:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 800d298:	697b      	ldr	r3, [r7, #20]
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3718      	adds	r7, #24
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}

0800d2a2 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 800d2a2:	b580      	push	{r7, lr}
 800d2a4:	b086      	sub	sp, #24
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	1d3b      	adds	r3, r7, #4
 800d2aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d006      	beq.n	800d2c6 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7f2 fff0 	bl	80002a0 <strlen>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	617b      	str	r3, [r7, #20]
 800d2c4:	e001      	b.n	800d2ca <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	617b      	str	r3, [r7, #20]
	return rc;
 800d2ca:	697b      	ldr	r3, [r7, #20]
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3718      	adds	r7, #24
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b086      	sub	sp, #24
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	6039      	str	r1, [r7, #0]
	int alen = 0,
 800d2de:	2300      	movs	r3, #0
 800d2e0:	617b      	str	r3, [r7, #20]
		blen = 0;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d00a      	beq.n	800d304 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f7f2 ffd1 	bl	80002a0 <strlen>
 800d2fe:	4603      	mov	r3, r0
 800d300:	617b      	str	r3, [r7, #20]
 800d302:	e005      	b.n	800d310 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	689b      	ldr	r3, [r3, #8]
 800d308:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	685b      	ldr	r3, [r3, #4]
 800d30e:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 800d310:	6838      	ldr	r0, [r7, #0]
 800d312:	f7f2 ffc5 	bl	80002a0 <strlen>
 800d316:	4603      	mov	r3, r0
 800d318:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 800d31a:	697a      	ldr	r2, [r7, #20]
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	429a      	cmp	r2, r3
 800d320:	d10a      	bne.n	800d338 <MQTTPacket_equals+0x64>
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	461a      	mov	r2, r3
 800d326:	6839      	ldr	r1, [r7, #0]
 800d328:	6938      	ldr	r0, [r7, #16]
 800d32a:	f00e fe35 	bl	801bf98 <strncmp>
 800d32e:	4603      	mov	r3, r0
 800d330:	2b00      	cmp	r3, #0
 800d332:	d101      	bne.n	800d338 <MQTTPacket_equals+0x64>
 800d334:	2301      	movs	r3, #1
 800d336:	e000      	b.n	800d33a <MQTTPacket_equals+0x66>
 800d338:	2300      	movs	r3, #0
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3718      	adds	r7, #24
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}

0800d342 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 800d342:	b580      	push	{r7, lr}
 800d344:	b086      	sub	sp, #24
 800d346:	af00      	add	r7, sp, #0
 800d348:	60f8      	str	r0, [r7, #12]
 800d34a:	4638      	mov	r0, r7
 800d34c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 800d350:	2300      	movs	r3, #0
 800d352:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 800d354:	463b      	mov	r3, r7
 800d356:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d35a:	f7ff ffa2 	bl	800d2a2 <MQTTstrlen>
 800d35e:	4603      	mov	r3, r0
 800d360:	1c9a      	adds	r2, r3, #2
 800d362:	6a3b      	ldr	r3, [r7, #32]
 800d364:	4413      	add	r3, r2
 800d366:	697a      	ldr	r2, [r7, #20]
 800d368:	4413      	add	r3, r2
 800d36a:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	dd02      	ble.n	800d378 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	3302      	adds	r3, #2
 800d376:	617b      	str	r3, [r7, #20]
	return len;
 800d378:	697b      	ldr	r3, [r7, #20]
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3718      	adds	r7, #24
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}

0800d382 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 800d382:	b580      	push	{r7, lr}
 800d384:	b08a      	sub	sp, #40	; 0x28
 800d386:	af02      	add	r7, sp, #8
 800d388:	60f8      	str	r0, [r7, #12]
 800d38a:	60b9      	str	r1, [r7, #8]
 800d38c:	603b      	str	r3, [r7, #0]
 800d38e:	4613      	mov	r3, r2
 800d390:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 800d396:	2300      	movs	r3, #0
 800d398:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 800d39a:	2300      	movs	r3, #0
 800d39c:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 800d3a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3a4:	9300      	str	r3, [sp, #0]
 800d3a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d3aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d3ac:	6838      	ldr	r0, [r7, #0]
 800d3ae:	f7ff ffc8 	bl	800d342 <MQTTSerialize_publishLength>
 800d3b2:	61b8      	str	r0, [r7, #24]
 800d3b4:	69b8      	ldr	r0, [r7, #24]
 800d3b6:	f7ff fe29 	bl	800d00c <MQTTPacket_len>
 800d3ba:	4602      	mov	r2, r0
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	da03      	bge.n	800d3ca <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800d3c2:	f06f 0301 	mvn.w	r3, #1
 800d3c6:	61fb      	str	r3, [r7, #28]
		goto exit;
 800d3c8:	e04c      	b.n	800d464 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 800d3ca:	7c3b      	ldrb	r3, [r7, #16]
 800d3cc:	2203      	movs	r2, #3
 800d3ce:	f362 1307 	bfi	r3, r2, #4, #4
 800d3d2:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 800d3d4:	79fb      	ldrb	r3, [r7, #7]
 800d3d6:	f003 0301 	and.w	r3, r3, #1
 800d3da:	b2da      	uxtb	r2, r3
 800d3dc:	7c3b      	ldrb	r3, [r7, #16]
 800d3de:	f362 03c3 	bfi	r3, r2, #3, #1
 800d3e2:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	f003 0303 	and.w	r3, r3, #3
 800d3ea:	b2da      	uxtb	r2, r3
 800d3ec:	7c3b      	ldrb	r3, [r7, #16]
 800d3ee:	f362 0342 	bfi	r3, r2, #1, #2
 800d3f2:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 800d3f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d3f8:	f003 0301 	and.w	r3, r3, #1
 800d3fc:	b2da      	uxtb	r2, r3
 800d3fe:	7c3b      	ldrb	r3, [r7, #16]
 800d400:	f362 0300 	bfi	r3, r2, #0, #1
 800d404:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 800d406:	7c3a      	ldrb	r2, [r7, #16]
 800d408:	f107 0314 	add.w	r3, r7, #20
 800d40c:	4611      	mov	r1, r2
 800d40e:	4618      	mov	r0, r3
 800d410:	f7ff fe8b 	bl	800d12a <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	69b9      	ldr	r1, [r7, #24]
 800d418:	4618      	mov	r0, r3
 800d41a:	f7ff fd8c 	bl	800cf36 <MQTTPacket_encode>
 800d41e:	4602      	mov	r2, r0
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	4413      	add	r3, r2
 800d424:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 800d426:	f107 0014 	add.w	r0, r7, #20
 800d42a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d42e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d430:	f7ff fed8 	bl	800d1e4 <writeMQTTString>

	if (qos > 0)
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	2b00      	cmp	r3, #0
 800d438:	dd06      	ble.n	800d448 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 800d43a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800d43c:	f107 0314 	add.w	r3, r7, #20
 800d440:	4611      	mov	r1, r2
 800d442:	4618      	mov	r0, r3
 800d444:	f7ff fe86 	bl	800d154 <writeInt>

	memcpy(ptr, payload, payloadlen);
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d44c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d44e:	4618      	mov	r0, r3
 800d450:	f00e ff2f 	bl	801c2b2 <memcpy>
	ptr += payloadlen;
 800d454:	697a      	ldr	r2, [r7, #20]
 800d456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d458:	4413      	add	r3, r2
 800d45a:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 800d45c:	697a      	ldr	r2, [r7, #20]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	1ad3      	subs	r3, r2, r3
 800d462:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800d464:	69fb      	ldr	r3, [r7, #28]
}
 800d466:	4618      	mov	r0, r3
 800d468:	3720      	adds	r7, #32
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}

0800d46e <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 800d46e:	b580      	push	{r7, lr}
 800d470:	b088      	sub	sp, #32
 800d472:	af00      	add	r7, sp, #0
 800d474:	60f8      	str	r0, [r7, #12]
 800d476:	60b9      	str	r1, [r7, #8]
 800d478:	4611      	mov	r1, r2
 800d47a:	461a      	mov	r2, r3
 800d47c:	460b      	mov	r3, r1
 800d47e:	71fb      	strb	r3, [r7, #7]
 800d480:	4613      	mov	r3, r2
 800d482:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 800d484:	2300      	movs	r3, #0
 800d486:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800d488:	2300      	movs	r3, #0
 800d48a:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	2b03      	cmp	r3, #3
 800d494:	dc03      	bgt.n	800d49e <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800d496:	f06f 0301 	mvn.w	r3, #1
 800d49a:	61fb      	str	r3, [r7, #28]
		goto exit;
 800d49c:	e037      	b.n	800d50e <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 800d49e:	79fb      	ldrb	r3, [r7, #7]
 800d4a0:	f003 030f 	and.w	r3, r3, #15
 800d4a4:	b2da      	uxtb	r2, r3
 800d4a6:	7e3b      	ldrb	r3, [r7, #24]
 800d4a8:	f362 1307 	bfi	r3, r2, #4, #4
 800d4ac:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 800d4ae:	79bb      	ldrb	r3, [r7, #6]
 800d4b0:	f003 0301 	and.w	r3, r3, #1
 800d4b4:	b2da      	uxtb	r2, r3
 800d4b6:	7e3b      	ldrb	r3, [r7, #24]
 800d4b8:	f362 03c3 	bfi	r3, r2, #3, #1
 800d4bc:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 800d4be:	79fb      	ldrb	r3, [r7, #7]
 800d4c0:	2b06      	cmp	r3, #6
 800d4c2:	bf0c      	ite	eq
 800d4c4:	2301      	moveq	r3, #1
 800d4c6:	2300      	movne	r3, #0
 800d4c8:	b2db      	uxtb	r3, r3
 800d4ca:	f003 0303 	and.w	r3, r3, #3
 800d4ce:	b2da      	uxtb	r2, r3
 800d4d0:	7e3b      	ldrb	r3, [r7, #24]
 800d4d2:	f362 0342 	bfi	r3, r2, #1, #2
 800d4d6:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800d4d8:	7e3a      	ldrb	r2, [r7, #24]
 800d4da:	f107 0314 	add.w	r3, r7, #20
 800d4de:	4611      	mov	r1, r2
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7ff fe22 	bl	800d12a <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	2102      	movs	r1, #2
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f7ff fd23 	bl	800cf36 <MQTTPacket_encode>
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	4413      	add	r3, r2
 800d4f6:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 800d4f8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d4fa:	f107 0314 	add.w	r3, r7, #20
 800d4fe:	4611      	mov	r1, r2
 800d500:	4618      	mov	r0, r3
 800d502:	f7ff fe27 	bl	800d154 <writeInt>
	rc = ptr - buf;
 800d506:	697a      	ldr	r2, [r7, #20]
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	1ad3      	subs	r3, r2, r3
 800d50c:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800d50e:	69fb      	ldr	r3, [r7, #28]
}
 800d510:	4618      	mov	r0, r3
 800d512:	3720      	adds	r7, #32
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}

0800d518 <unescape_http_url>:
 @brief	convert escape characters(%XX) to ASCII character
 */ 
void unescape_http_url(
	char * url	/**< pointer to be converted ( escape characters )*/
	)
{
 800d518:	b590      	push	{r4, r7, lr}
 800d51a:	b085      	sub	sp, #20
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
	int x, y;

	for (x = 0, y = 0; url[y]; ++x, ++y) {
 800d520:	2300      	movs	r3, #0
 800d522:	60fb      	str	r3, [r7, #12]
 800d524:	2300      	movs	r3, #0
 800d526:	60bb      	str	r3, [r7, #8]
 800d528:	e02e      	b.n	800d588 <unescape_http_url+0x70>
		if ((url[x] = url[y]) == '%') {
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	687a      	ldr	r2, [r7, #4]
 800d52e:	441a      	add	r2, r3
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	6879      	ldr	r1, [r7, #4]
 800d534:	440b      	add	r3, r1
 800d536:	7812      	ldrb	r2, [r2, #0]
 800d538:	701a      	strb	r2, [r3, #0]
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	2b25      	cmp	r3, #37	; 0x25
 800d53e:	d11d      	bne.n	800d57c <unescape_http_url+0x64>
			url[x] = C2D(url[y+1])*0x10+C2D(url[y+2]);
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	3301      	adds	r3, #1
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	4413      	add	r3, r2
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	4618      	mov	r0, r3
 800d54c:	f000 fbf1 	bl	800dd32 <C2D>
 800d550:	4603      	mov	r3, r0
 800d552:	011b      	lsls	r3, r3, #4
 800d554:	b2dc      	uxtb	r4, r3
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	3302      	adds	r3, #2
 800d55a:	687a      	ldr	r2, [r7, #4]
 800d55c:	4413      	add	r3, r2
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	4618      	mov	r0, r3
 800d562:	f000 fbe6 	bl	800dd32 <C2D>
 800d566:	4603      	mov	r3, r0
 800d568:	4619      	mov	r1, r3
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	687a      	ldr	r2, [r7, #4]
 800d56e:	4413      	add	r3, r2
 800d570:	1862      	adds	r2, r4, r1
 800d572:	b2d2      	uxtb	r2, r2
 800d574:	701a      	strb	r2, [r3, #0]
			y+=2;
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	3302      	adds	r3, #2
 800d57a:	60bb      	str	r3, [r7, #8]
	for (x = 0, y = 0; url[y]; ++x, ++y) {
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	3301      	adds	r3, #1
 800d580:	60fb      	str	r3, [r7, #12]
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	3301      	adds	r3, #1
 800d586:	60bb      	str	r3, [r7, #8]
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	687a      	ldr	r2, [r7, #4]
 800d58c:	4413      	add	r3, r2
 800d58e:	781b      	ldrb	r3, [r3, #0]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d1ca      	bne.n	800d52a <unescape_http_url+0x12>
		}
	}
	url[x] = '\0';
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	687a      	ldr	r2, [r7, #4]
 800d598:	4413      	add	r3, r2
 800d59a:	2200      	movs	r2, #0
 800d59c:	701a      	strb	r2, [r3, #0]
}
 800d59e:	bf00      	nop
 800d5a0:	3714      	adds	r7, #20
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd90      	pop	{r4, r7, pc}
	...

0800d5a8 <make_http_response_head>:
void make_http_response_head(
	char * buf, 	/**< pointer to response header to be made */
	char type, 	/**< response type */
	uint32_t len	/**< size of response header */
	)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b088      	sub	sp, #32
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	60f8      	str	r0, [r7, #12]
 800d5b0:	460b      	mov	r3, r1
 800d5b2:	607a      	str	r2, [r7, #4]
 800d5b4:	72fb      	strb	r3, [r7, #11]
	char * head;
	char tmp[10];
			
	/*  file type*/
	if 	(type == PTYPE_HTML) 		head = RES_HTMLHEAD_OK;
 800d5b6:	7afb      	ldrb	r3, [r7, #11]
 800d5b8:	2b01      	cmp	r3, #1
 800d5ba:	d102      	bne.n	800d5c2 <make_http_response_head+0x1a>
 800d5bc:	4b42      	ldr	r3, [pc, #264]	; (800d6c8 <make_http_response_head+0x120>)
 800d5be:	61fb      	str	r3, [r7, #28]
 800d5c0:	e061      	b.n	800d686 <make_http_response_head+0xde>
	else if (type == PTYPE_GIF)		head = RES_GIFHEAD_OK;
 800d5c2:	7afb      	ldrb	r3, [r7, #11]
 800d5c4:	2b02      	cmp	r3, #2
 800d5c6:	d102      	bne.n	800d5ce <make_http_response_head+0x26>
 800d5c8:	4b40      	ldr	r3, [pc, #256]	; (800d6cc <make_http_response_head+0x124>)
 800d5ca:	61fb      	str	r3, [r7, #28]
 800d5cc:	e05b      	b.n	800d686 <make_http_response_head+0xde>
	else if (type == PTYPE_TEXT)	head = RES_TEXTHEAD_OK;
 800d5ce:	7afb      	ldrb	r3, [r7, #11]
 800d5d0:	2b03      	cmp	r3, #3
 800d5d2:	d102      	bne.n	800d5da <make_http_response_head+0x32>
 800d5d4:	4b3e      	ldr	r3, [pc, #248]	; (800d6d0 <make_http_response_head+0x128>)
 800d5d6:	61fb      	str	r3, [r7, #28]
 800d5d8:	e055      	b.n	800d686 <make_http_response_head+0xde>
	else if (type == PTYPE_JPEG)	head = RES_JPEGHEAD_OK;
 800d5da:	7afb      	ldrb	r3, [r7, #11]
 800d5dc:	2b04      	cmp	r3, #4
 800d5de:	d102      	bne.n	800d5e6 <make_http_response_head+0x3e>
 800d5e0:	4b3c      	ldr	r3, [pc, #240]	; (800d6d4 <make_http_response_head+0x12c>)
 800d5e2:	61fb      	str	r3, [r7, #28]
 800d5e4:	e04f      	b.n	800d686 <make_http_response_head+0xde>
	else if (type == PTYPE_FLASH)	head = RES_FLASHHEAD_OK;
 800d5e6:	7afb      	ldrb	r3, [r7, #11]
 800d5e8:	2b05      	cmp	r3, #5
 800d5ea:	d102      	bne.n	800d5f2 <make_http_response_head+0x4a>
 800d5ec:	4b3a      	ldr	r3, [pc, #232]	; (800d6d8 <make_http_response_head+0x130>)
 800d5ee:	61fb      	str	r3, [r7, #28]
 800d5f0:	e049      	b.n	800d686 <make_http_response_head+0xde>
	else if (type == PTYPE_XML) 	head =  RES_XMLHEAD_OK;
 800d5f2:	7afb      	ldrb	r3, [r7, #11]
 800d5f4:	2b09      	cmp	r3, #9
 800d5f6:	d102      	bne.n	800d5fe <make_http_response_head+0x56>
 800d5f8:	4b38      	ldr	r3, [pc, #224]	; (800d6dc <make_http_response_head+0x134>)
 800d5fa:	61fb      	str	r3, [r7, #28]
 800d5fc:	e043      	b.n	800d686 <make_http_response_head+0xde>
	else if (type == PTYPE_CSS) 	head = RES_CSSHEAD_OK;
 800d5fe:	7afb      	ldrb	r3, [r7, #11]
 800d600:	2b0a      	cmp	r3, #10
 800d602:	d102      	bne.n	800d60a <make_http_response_head+0x62>
 800d604:	4b36      	ldr	r3, [pc, #216]	; (800d6e0 <make_http_response_head+0x138>)
 800d606:	61fb      	str	r3, [r7, #28]
 800d608:	e03d      	b.n	800d686 <make_http_response_head+0xde>
	else if (type == PTYPE_JSON)	head = RES_JSONHEAD_OK;
 800d60a:	7afb      	ldrb	r3, [r7, #11]
 800d60c:	2b0c      	cmp	r3, #12
 800d60e:	d102      	bne.n	800d616 <make_http_response_head+0x6e>
 800d610:	4b34      	ldr	r3, [pc, #208]	; (800d6e4 <make_http_response_head+0x13c>)
 800d612:	61fb      	str	r3, [r7, #28]
 800d614:	e037      	b.n	800d686 <make_http_response_head+0xde>
	else if (type == PTYPE_JS)		head = RES_JSHEAD_OK;
 800d616:	7afb      	ldrb	r3, [r7, #11]
 800d618:	2b0b      	cmp	r3, #11
 800d61a:	d102      	bne.n	800d622 <make_http_response_head+0x7a>
 800d61c:	4b32      	ldr	r3, [pc, #200]	; (800d6e8 <make_http_response_head+0x140>)
 800d61e:	61fb      	str	r3, [r7, #28]
 800d620:	e031      	b.n	800d686 <make_http_response_head+0xde>
////	else if (type == PTYPE_CGI)		head = RES_CGIHEAD_OK;
	else if (type == PTYPE_CGI)		head = RES_CGIHEAD_OK_CHANGED;
 800d622:	7afb      	ldrb	r3, [r7, #11]
 800d624:	2b08      	cmp	r3, #8
 800d626:	d102      	bne.n	800d62e <make_http_response_head+0x86>
 800d628:	4b30      	ldr	r3, [pc, #192]	; (800d6ec <make_http_response_head+0x144>)
 800d62a:	61fb      	str	r3, [r7, #28]
 800d62c:	e02b      	b.n	800d686 <make_http_response_head+0xde>
	else if (type == PTYPE_PNG)		head = RES_PNGHEAD_OK;
 800d62e:	7afb      	ldrb	r3, [r7, #11]
 800d630:	2b0d      	cmp	r3, #13
 800d632:	d102      	bne.n	800d63a <make_http_response_head+0x92>
 800d634:	4b2e      	ldr	r3, [pc, #184]	; (800d6f0 <make_http_response_head+0x148>)
 800d636:	61fb      	str	r3, [r7, #28]
 800d638:	e025      	b.n	800d686 <make_http_response_head+0xde>
	else if (type == PTYPE_ICO)		head = RES_ICOHEAD_OK;
 800d63a:	7afb      	ldrb	r3, [r7, #11]
 800d63c:	2b0e      	cmp	r3, #14
 800d63e:	d102      	bne.n	800d646 <make_http_response_head+0x9e>
 800d640:	4b2c      	ldr	r3, [pc, #176]	; (800d6f4 <make_http_response_head+0x14c>)
 800d642:	61fb      	str	r3, [r7, #28]
 800d644:	e01f      	b.n	800d686 <make_http_response_head+0xde>
	else if (type == PTYPE_TTF)		head = RES_TTFHEAD_OK;
 800d646:	7afb      	ldrb	r3, [r7, #11]
 800d648:	2b14      	cmp	r3, #20
 800d64a:	d102      	bne.n	800d652 <make_http_response_head+0xaa>
 800d64c:	4b2a      	ldr	r3, [pc, #168]	; (800d6f8 <make_http_response_head+0x150>)
 800d64e:	61fb      	str	r3, [r7, #28]
 800d650:	e019      	b.n	800d686 <make_http_response_head+0xde>
	else if (type == PTYPE_OTF)		head = RES_OTFHEAD_OK;
 800d652:	7afb      	ldrb	r3, [r7, #11]
 800d654:	2b15      	cmp	r3, #21
 800d656:	d102      	bne.n	800d65e <make_http_response_head+0xb6>
 800d658:	4b28      	ldr	r3, [pc, #160]	; (800d6fc <make_http_response_head+0x154>)
 800d65a:	61fb      	str	r3, [r7, #28]
 800d65c:	e013      	b.n	800d686 <make_http_response_head+0xde>
	else if (type == PTYPE_WOFF)	head = RES_WOFFHEAD_OK;
 800d65e:	7afb      	ldrb	r3, [r7, #11]
 800d660:	2b16      	cmp	r3, #22
 800d662:	d102      	bne.n	800d66a <make_http_response_head+0xc2>
 800d664:	4b26      	ldr	r3, [pc, #152]	; (800d700 <make_http_response_head+0x158>)
 800d666:	61fb      	str	r3, [r7, #28]
 800d668:	e00d      	b.n	800d686 <make_http_response_head+0xde>
	else if (type == PTYPE_EOT)		head = RES_EOTHEAD_OK;
 800d66a:	7afb      	ldrb	r3, [r7, #11]
 800d66c:	2b17      	cmp	r3, #23
 800d66e:	d102      	bne.n	800d676 <make_http_response_head+0xce>
 800d670:	4b24      	ldr	r3, [pc, #144]	; (800d704 <make_http_response_head+0x15c>)
 800d672:	61fb      	str	r3, [r7, #28]
 800d674:	e007      	b.n	800d686 <make_http_response_head+0xde>
	else if (type == PTYPE_SVG)		head = RES_SVGHEAD_OK;
 800d676:	7afb      	ldrb	r3, [r7, #11]
 800d678:	2b18      	cmp	r3, #24
 800d67a:	d102      	bne.n	800d682 <make_http_response_head+0xda>
 800d67c:	4b22      	ldr	r3, [pc, #136]	; (800d708 <make_http_response_head+0x160>)
 800d67e:	61fb      	str	r3, [r7, #28]
 800d680:	e001      	b.n	800d686 <make_http_response_head+0xde>
	{
		head = NULL;
		printf("\r\n\r\n-MAKE HEAD UNKNOWN-\r\n");
	}
#else
	else head = NULL;
 800d682:	2300      	movs	r3, #0
 800d684:	61fb      	str	r3, [r7, #28]
#endif	

	sprintf(tmp, "%ld", len);
 800d686:	f107 0310 	add.w	r3, r7, #16
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	491f      	ldr	r1, [pc, #124]	; (800d70c <make_http_response_head+0x164>)
 800d68e:	4618      	mov	r0, r3
 800d690:	f00e faea 	bl	801bc68 <siprintf>
	strcpy(buf, head);
 800d694:	69f9      	ldr	r1, [r7, #28]
 800d696:	68f8      	ldr	r0, [r7, #12]
 800d698:	f00e fe03 	bl	801c2a2 <strcpy>
	strcat(buf, tmp);
 800d69c:	f107 0310 	add.w	r3, r7, #16
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	68f8      	ldr	r0, [r7, #12]
 800d6a4:	f00e fc38 	bl	801bf18 <strcat>
	strcat(buf, "\r\n\r\n");
 800d6a8:	68f8      	ldr	r0, [r7, #12]
 800d6aa:	f7f2 fdf9 	bl	80002a0 <strlen>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	4413      	add	r3, r2
 800d6b6:	4a16      	ldr	r2, [pc, #88]	; (800d710 <make_http_response_head+0x168>)
 800d6b8:	6810      	ldr	r0, [r2, #0]
 800d6ba:	6018      	str	r0, [r3, #0]
 800d6bc:	7912      	ldrb	r2, [r2, #4]
 800d6be:	711a      	strb	r2, [r3, #4]
}
 800d6c0:	bf00      	nop
 800d6c2:	3720      	adds	r7, #32
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	08021184 	.word	0x08021184
 800d6cc:	080211d8 	.word	0x080211d8
 800d6d0:	08021214 	.word	0x08021214
 800d6d4:	08021250 	.word	0x08021250
 800d6d8:	0802128c 	.word	0x0802128c
 800d6dc:	080212dc 	.word	0x080212dc
 800d6e0:	08021330 	.word	0x08021330
 800d6e4:	0802136c 	.word	0x0802136c
 800d6e8:	080213b0 	.word	0x080213b0
 800d6ec:	080213f8 	.word	0x080213f8
 800d6f0:	08021454 	.word	0x08021454
 800d6f4:	08021490 	.word	0x08021490
 800d6f8:	080214d0 	.word	0x080214d0
 800d6fc:	08021520 	.word	0x08021520
 800d700:	08021570 	.word	0x08021570
 800d704:	080215b8 	.word	0x080215b8
 800d708:	08021608 	.word	0x08021608
 800d70c:	08021648 	.word	0x08021648
 800d710:	0802164c 	.word	0x0802164c

0800d714 <find_http_uri_type>:
 */ 
void find_http_uri_type(
	uint8_t * type, 	/**< type to be returned */
	uint8_t * buff		/**< file name */
	) 
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b084      	sub	sp, #16
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	6039      	str	r1, [r7, #0]
	/* Decide type according to extension*/

	char * buf;
	buf = (char *)buff;
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	60fb      	str	r3, [r7, #12]

	if 	(strstr(buf, ".htm")	|| strstr(buf, ".html"))	*type = PTYPE_HTML;
 800d722:	499f      	ldr	r1, [pc, #636]	; (800d9a0 <find_http_uri_type+0x28c>)
 800d724:	68f8      	ldr	r0, [r7, #12]
 800d726:	f00e fcc9 	bl	801c0bc <strstr>
 800d72a:	4603      	mov	r3, r0
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d106      	bne.n	800d73e <find_http_uri_type+0x2a>
 800d730:	499c      	ldr	r1, [pc, #624]	; (800d9a4 <find_http_uri_type+0x290>)
 800d732:	68f8      	ldr	r0, [r7, #12]
 800d734:	f00e fcc2 	bl	801c0bc <strstr>
 800d738:	4603      	mov	r3, r0
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d003      	beq.n	800d746 <find_http_uri_type+0x32>
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2201      	movs	r2, #1
 800d742:	701a      	strb	r2, [r3, #0]
 800d744:	e127      	b.n	800d996 <find_http_uri_type+0x282>
	else if (strstr(buf, ".gif"))							*type = PTYPE_GIF;
 800d746:	4998      	ldr	r1, [pc, #608]	; (800d9a8 <find_http_uri_type+0x294>)
 800d748:	68f8      	ldr	r0, [r7, #12]
 800d74a:	f00e fcb7 	bl	801c0bc <strstr>
 800d74e:	4603      	mov	r3, r0
 800d750:	2b00      	cmp	r3, #0
 800d752:	d003      	beq.n	800d75c <find_http_uri_type+0x48>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2202      	movs	r2, #2
 800d758:	701a      	strb	r2, [r3, #0]
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
	else 													*type = PTYPE_ERR;
}
 800d75a:	e11c      	b.n	800d996 <find_http_uri_type+0x282>
	else if (strstr(buf, ".text") 	|| strstr(buf,".txt"))	*type = PTYPE_TEXT;
 800d75c:	4993      	ldr	r1, [pc, #588]	; (800d9ac <find_http_uri_type+0x298>)
 800d75e:	68f8      	ldr	r0, [r7, #12]
 800d760:	f00e fcac 	bl	801c0bc <strstr>
 800d764:	4603      	mov	r3, r0
 800d766:	2b00      	cmp	r3, #0
 800d768:	d106      	bne.n	800d778 <find_http_uri_type+0x64>
 800d76a:	4991      	ldr	r1, [pc, #580]	; (800d9b0 <find_http_uri_type+0x29c>)
 800d76c:	68f8      	ldr	r0, [r7, #12]
 800d76e:	f00e fca5 	bl	801c0bc <strstr>
 800d772:	4603      	mov	r3, r0
 800d774:	2b00      	cmp	r3, #0
 800d776:	d003      	beq.n	800d780 <find_http_uri_type+0x6c>
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2203      	movs	r2, #3
 800d77c:	701a      	strb	r2, [r3, #0]
 800d77e:	e10a      	b.n	800d996 <find_http_uri_type+0x282>
	else if (strstr(buf, ".jpeg") 	|| strstr(buf,".jpg"))	*type = PTYPE_JPEG;
 800d780:	498c      	ldr	r1, [pc, #560]	; (800d9b4 <find_http_uri_type+0x2a0>)
 800d782:	68f8      	ldr	r0, [r7, #12]
 800d784:	f00e fc9a 	bl	801c0bc <strstr>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d106      	bne.n	800d79c <find_http_uri_type+0x88>
 800d78e:	498a      	ldr	r1, [pc, #552]	; (800d9b8 <find_http_uri_type+0x2a4>)
 800d790:	68f8      	ldr	r0, [r7, #12]
 800d792:	f00e fc93 	bl	801c0bc <strstr>
 800d796:	4603      	mov	r3, r0
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d003      	beq.n	800d7a4 <find_http_uri_type+0x90>
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2204      	movs	r2, #4
 800d7a0:	701a      	strb	r2, [r3, #0]
 800d7a2:	e0f8      	b.n	800d996 <find_http_uri_type+0x282>
	else if (strstr(buf, ".swf")) 							*type = PTYPE_FLASH;
 800d7a4:	4985      	ldr	r1, [pc, #532]	; (800d9bc <find_http_uri_type+0x2a8>)
 800d7a6:	68f8      	ldr	r0, [r7, #12]
 800d7a8:	f00e fc88 	bl	801c0bc <strstr>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d003      	beq.n	800d7ba <find_http_uri_type+0xa6>
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2205      	movs	r2, #5
 800d7b6:	701a      	strb	r2, [r3, #0]
}
 800d7b8:	e0ed      	b.n	800d996 <find_http_uri_type+0x282>
	else if (strstr(buf, ".cgi") 	|| strstr(buf,".CGI"))	*type = PTYPE_CGI;
 800d7ba:	4981      	ldr	r1, [pc, #516]	; (800d9c0 <find_http_uri_type+0x2ac>)
 800d7bc:	68f8      	ldr	r0, [r7, #12]
 800d7be:	f00e fc7d 	bl	801c0bc <strstr>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d106      	bne.n	800d7d6 <find_http_uri_type+0xc2>
 800d7c8:	497e      	ldr	r1, [pc, #504]	; (800d9c4 <find_http_uri_type+0x2b0>)
 800d7ca:	68f8      	ldr	r0, [r7, #12]
 800d7cc:	f00e fc76 	bl	801c0bc <strstr>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d003      	beq.n	800d7de <find_http_uri_type+0xca>
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2208      	movs	r2, #8
 800d7da:	701a      	strb	r2, [r3, #0]
 800d7dc:	e0db      	b.n	800d996 <find_http_uri_type+0x282>
	else if (strstr(buf, ".json") 	|| strstr(buf,".JSON"))	*type = PTYPE_JSON;
 800d7de:	497a      	ldr	r1, [pc, #488]	; (800d9c8 <find_http_uri_type+0x2b4>)
 800d7e0:	68f8      	ldr	r0, [r7, #12]
 800d7e2:	f00e fc6b 	bl	801c0bc <strstr>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d106      	bne.n	800d7fa <find_http_uri_type+0xe6>
 800d7ec:	4977      	ldr	r1, [pc, #476]	; (800d9cc <find_http_uri_type+0x2b8>)
 800d7ee:	68f8      	ldr	r0, [r7, #12]
 800d7f0:	f00e fc64 	bl	801c0bc <strstr>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d003      	beq.n	800d802 <find_http_uri_type+0xee>
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	220c      	movs	r2, #12
 800d7fe:	701a      	strb	r2, [r3, #0]
 800d800:	e0c9      	b.n	800d996 <find_http_uri_type+0x282>
	else if (strstr(buf, ".js") 	|| strstr(buf,".JS"))	*type = PTYPE_JS;
 800d802:	4973      	ldr	r1, [pc, #460]	; (800d9d0 <find_http_uri_type+0x2bc>)
 800d804:	68f8      	ldr	r0, [r7, #12]
 800d806:	f00e fc59 	bl	801c0bc <strstr>
 800d80a:	4603      	mov	r3, r0
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d106      	bne.n	800d81e <find_http_uri_type+0x10a>
 800d810:	4970      	ldr	r1, [pc, #448]	; (800d9d4 <find_http_uri_type+0x2c0>)
 800d812:	68f8      	ldr	r0, [r7, #12]
 800d814:	f00e fc52 	bl	801c0bc <strstr>
 800d818:	4603      	mov	r3, r0
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d003      	beq.n	800d826 <find_http_uri_type+0x112>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	220b      	movs	r2, #11
 800d822:	701a      	strb	r2, [r3, #0]
 800d824:	e0b7      	b.n	800d996 <find_http_uri_type+0x282>
	else if (strstr(buf, ".CGI") 	|| strstr(buf,".cgi"))	*type = PTYPE_CGI;
 800d826:	4967      	ldr	r1, [pc, #412]	; (800d9c4 <find_http_uri_type+0x2b0>)
 800d828:	68f8      	ldr	r0, [r7, #12]
 800d82a:	f00e fc47 	bl	801c0bc <strstr>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d106      	bne.n	800d842 <find_http_uri_type+0x12e>
 800d834:	4962      	ldr	r1, [pc, #392]	; (800d9c0 <find_http_uri_type+0x2ac>)
 800d836:	68f8      	ldr	r0, [r7, #12]
 800d838:	f00e fc40 	bl	801c0bc <strstr>
 800d83c:	4603      	mov	r3, r0
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d003      	beq.n	800d84a <find_http_uri_type+0x136>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2208      	movs	r2, #8
 800d846:	701a      	strb	r2, [r3, #0]
 800d848:	e0a5      	b.n	800d996 <find_http_uri_type+0x282>
	else if (strstr(buf, ".xml") 	|| strstr(buf,".XML"))	*type = PTYPE_XML;
 800d84a:	4963      	ldr	r1, [pc, #396]	; (800d9d8 <find_http_uri_type+0x2c4>)
 800d84c:	68f8      	ldr	r0, [r7, #12]
 800d84e:	f00e fc35 	bl	801c0bc <strstr>
 800d852:	4603      	mov	r3, r0
 800d854:	2b00      	cmp	r3, #0
 800d856:	d106      	bne.n	800d866 <find_http_uri_type+0x152>
 800d858:	4960      	ldr	r1, [pc, #384]	; (800d9dc <find_http_uri_type+0x2c8>)
 800d85a:	68f8      	ldr	r0, [r7, #12]
 800d85c:	f00e fc2e 	bl	801c0bc <strstr>
 800d860:	4603      	mov	r3, r0
 800d862:	2b00      	cmp	r3, #0
 800d864:	d003      	beq.n	800d86e <find_http_uri_type+0x15a>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2209      	movs	r2, #9
 800d86a:	701a      	strb	r2, [r3, #0]
 800d86c:	e093      	b.n	800d996 <find_http_uri_type+0x282>
	else if (strstr(buf, ".css") 	|| strstr(buf,".CSS"))	*type = PTYPE_CSS;
 800d86e:	495c      	ldr	r1, [pc, #368]	; (800d9e0 <find_http_uri_type+0x2cc>)
 800d870:	68f8      	ldr	r0, [r7, #12]
 800d872:	f00e fc23 	bl	801c0bc <strstr>
 800d876:	4603      	mov	r3, r0
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d106      	bne.n	800d88a <find_http_uri_type+0x176>
 800d87c:	4959      	ldr	r1, [pc, #356]	; (800d9e4 <find_http_uri_type+0x2d0>)
 800d87e:	68f8      	ldr	r0, [r7, #12]
 800d880:	f00e fc1c 	bl	801c0bc <strstr>
 800d884:	4603      	mov	r3, r0
 800d886:	2b00      	cmp	r3, #0
 800d888:	d003      	beq.n	800d892 <find_http_uri_type+0x17e>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	220a      	movs	r2, #10
 800d88e:	701a      	strb	r2, [r3, #0]
 800d890:	e081      	b.n	800d996 <find_http_uri_type+0x282>
	else if (strstr(buf, ".png") 	|| strstr(buf,".PNG"))	*type = PTYPE_PNG;
 800d892:	4955      	ldr	r1, [pc, #340]	; (800d9e8 <find_http_uri_type+0x2d4>)
 800d894:	68f8      	ldr	r0, [r7, #12]
 800d896:	f00e fc11 	bl	801c0bc <strstr>
 800d89a:	4603      	mov	r3, r0
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d106      	bne.n	800d8ae <find_http_uri_type+0x19a>
 800d8a0:	4952      	ldr	r1, [pc, #328]	; (800d9ec <find_http_uri_type+0x2d8>)
 800d8a2:	68f8      	ldr	r0, [r7, #12]
 800d8a4:	f00e fc0a 	bl	801c0bc <strstr>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d003      	beq.n	800d8b6 <find_http_uri_type+0x1a2>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	220d      	movs	r2, #13
 800d8b2:	701a      	strb	r2, [r3, #0]
 800d8b4:	e06f      	b.n	800d996 <find_http_uri_type+0x282>
	else if (strstr(buf, ".ico") 	|| strstr(buf,".ICO"))	*type = PTYPE_ICO;
 800d8b6:	494e      	ldr	r1, [pc, #312]	; (800d9f0 <find_http_uri_type+0x2dc>)
 800d8b8:	68f8      	ldr	r0, [r7, #12]
 800d8ba:	f00e fbff 	bl	801c0bc <strstr>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d106      	bne.n	800d8d2 <find_http_uri_type+0x1be>
 800d8c4:	494b      	ldr	r1, [pc, #300]	; (800d9f4 <find_http_uri_type+0x2e0>)
 800d8c6:	68f8      	ldr	r0, [r7, #12]
 800d8c8:	f00e fbf8 	bl	801c0bc <strstr>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d003      	beq.n	800d8da <find_http_uri_type+0x1c6>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	220e      	movs	r2, #14
 800d8d6:	701a      	strb	r2, [r3, #0]
 800d8d8:	e05d      	b.n	800d996 <find_http_uri_type+0x282>
	else if (strstr(buf, ".ttf") 	|| strstr(buf,".TTF"))	*type = PTYPE_TTF;
 800d8da:	4947      	ldr	r1, [pc, #284]	; (800d9f8 <find_http_uri_type+0x2e4>)
 800d8dc:	68f8      	ldr	r0, [r7, #12]
 800d8de:	f00e fbed 	bl	801c0bc <strstr>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d106      	bne.n	800d8f6 <find_http_uri_type+0x1e2>
 800d8e8:	4944      	ldr	r1, [pc, #272]	; (800d9fc <find_http_uri_type+0x2e8>)
 800d8ea:	68f8      	ldr	r0, [r7, #12]
 800d8ec:	f00e fbe6 	bl	801c0bc <strstr>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d003      	beq.n	800d8fe <find_http_uri_type+0x1ea>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2214      	movs	r2, #20
 800d8fa:	701a      	strb	r2, [r3, #0]
 800d8fc:	e04b      	b.n	800d996 <find_http_uri_type+0x282>
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
 800d8fe:	4940      	ldr	r1, [pc, #256]	; (800da00 <find_http_uri_type+0x2ec>)
 800d900:	68f8      	ldr	r0, [r7, #12]
 800d902:	f00e fbdb 	bl	801c0bc <strstr>
 800d906:	4603      	mov	r3, r0
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d106      	bne.n	800d91a <find_http_uri_type+0x206>
 800d90c:	493d      	ldr	r1, [pc, #244]	; (800da04 <find_http_uri_type+0x2f0>)
 800d90e:	68f8      	ldr	r0, [r7, #12]
 800d910:	f00e fbd4 	bl	801c0bc <strstr>
 800d914:	4603      	mov	r3, r0
 800d916:	2b00      	cmp	r3, #0
 800d918:	d003      	beq.n	800d922 <find_http_uri_type+0x20e>
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2215      	movs	r2, #21
 800d91e:	701a      	strb	r2, [r3, #0]
 800d920:	e039      	b.n	800d996 <find_http_uri_type+0x282>
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
 800d922:	4939      	ldr	r1, [pc, #228]	; (800da08 <find_http_uri_type+0x2f4>)
 800d924:	68f8      	ldr	r0, [r7, #12]
 800d926:	f00e fbc9 	bl	801c0bc <strstr>
 800d92a:	4603      	mov	r3, r0
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d106      	bne.n	800d93e <find_http_uri_type+0x22a>
 800d930:	4936      	ldr	r1, [pc, #216]	; (800da0c <find_http_uri_type+0x2f8>)
 800d932:	68f8      	ldr	r0, [r7, #12]
 800d934:	f00e fbc2 	bl	801c0bc <strstr>
 800d938:	4603      	mov	r3, r0
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d003      	beq.n	800d946 <find_http_uri_type+0x232>
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2216      	movs	r2, #22
 800d942:	701a      	strb	r2, [r3, #0]
 800d944:	e027      	b.n	800d996 <find_http_uri_type+0x282>
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
 800d946:	4932      	ldr	r1, [pc, #200]	; (800da10 <find_http_uri_type+0x2fc>)
 800d948:	68f8      	ldr	r0, [r7, #12]
 800d94a:	f00e fbb7 	bl	801c0bc <strstr>
 800d94e:	4603      	mov	r3, r0
 800d950:	2b00      	cmp	r3, #0
 800d952:	d106      	bne.n	800d962 <find_http_uri_type+0x24e>
 800d954:	492f      	ldr	r1, [pc, #188]	; (800da14 <find_http_uri_type+0x300>)
 800d956:	68f8      	ldr	r0, [r7, #12]
 800d958:	f00e fbb0 	bl	801c0bc <strstr>
 800d95c:	4603      	mov	r3, r0
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d003      	beq.n	800d96a <find_http_uri_type+0x256>
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2217      	movs	r2, #23
 800d966:	701a      	strb	r2, [r3, #0]
 800d968:	e015      	b.n	800d996 <find_http_uri_type+0x282>
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
 800d96a:	492b      	ldr	r1, [pc, #172]	; (800da18 <find_http_uri_type+0x304>)
 800d96c:	68f8      	ldr	r0, [r7, #12]
 800d96e:	f00e fba5 	bl	801c0bc <strstr>
 800d972:	4603      	mov	r3, r0
 800d974:	2b00      	cmp	r3, #0
 800d976:	d106      	bne.n	800d986 <find_http_uri_type+0x272>
 800d978:	4928      	ldr	r1, [pc, #160]	; (800da1c <find_http_uri_type+0x308>)
 800d97a:	68f8      	ldr	r0, [r7, #12]
 800d97c:	f00e fb9e 	bl	801c0bc <strstr>
 800d980:	4603      	mov	r3, r0
 800d982:	2b00      	cmp	r3, #0
 800d984:	d003      	beq.n	800d98e <find_http_uri_type+0x27a>
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2218      	movs	r2, #24
 800d98a:	701a      	strb	r2, [r3, #0]
 800d98c:	e003      	b.n	800d996 <find_http_uri_type+0x282>
	else 													*type = PTYPE_ERR;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2200      	movs	r2, #0
 800d992:	701a      	strb	r2, [r3, #0]
}
 800d994:	e7ff      	b.n	800d996 <find_http_uri_type+0x282>
 800d996:	bf00      	nop
 800d998:	3710      	adds	r7, #16
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}
 800d99e:	bf00      	nop
 800d9a0:	08021654 	.word	0x08021654
 800d9a4:	0802165c 	.word	0x0802165c
 800d9a8:	08021664 	.word	0x08021664
 800d9ac:	0802166c 	.word	0x0802166c
 800d9b0:	08021674 	.word	0x08021674
 800d9b4:	0802167c 	.word	0x0802167c
 800d9b8:	08021684 	.word	0x08021684
 800d9bc:	0802168c 	.word	0x0802168c
 800d9c0:	08021694 	.word	0x08021694
 800d9c4:	0802169c 	.word	0x0802169c
 800d9c8:	080216a4 	.word	0x080216a4
 800d9cc:	080216ac 	.word	0x080216ac
 800d9d0:	080216b4 	.word	0x080216b4
 800d9d4:	080216b8 	.word	0x080216b8
 800d9d8:	080216bc 	.word	0x080216bc
 800d9dc:	080216c4 	.word	0x080216c4
 800d9e0:	080216cc 	.word	0x080216cc
 800d9e4:	080216d4 	.word	0x080216d4
 800d9e8:	080216dc 	.word	0x080216dc
 800d9ec:	080216e4 	.word	0x080216e4
 800d9f0:	080216ec 	.word	0x080216ec
 800d9f4:	080216f4 	.word	0x080216f4
 800d9f8:	080216fc 	.word	0x080216fc
 800d9fc:	08021704 	.word	0x08021704
 800da00:	0802170c 	.word	0x0802170c
 800da04:	08021714 	.word	0x08021714
 800da08:	0802171c 	.word	0x0802171c
 800da0c:	08021724 	.word	0x08021724
 800da10:	0802172c 	.word	0x0802172c
 800da14:	08021734 	.word	0x08021734
 800da18:	0802173c 	.word	0x0802173c
 800da1c:	08021744 	.word	0x08021744

0800da20 <parse_http_request>:
 */ 
void parse_http_request(
	st_http_request * request, 	/**< request to be returned */
	uint8_t * buf				/**< pointer to be parsed */
	)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b084      	sub	sp, #16
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	6039      	str	r1, [r7, #0]
  char * nexttok;
  nexttok = strtok((char*)buf," ");
 800da2a:	4935      	ldr	r1, [pc, #212]	; (800db00 <parse_http_request+0xe0>)
 800da2c:	6838      	ldr	r0, [r7, #0]
 800da2e:	f00e fae9 	bl	801c004 <strtok>
 800da32:	60f8      	str	r0, [r7, #12]
  if(!nexttok)
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d103      	bne.n	800da42 <parse_http_request+0x22>
  {
    request->METHOD = METHOD_ERR;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2200      	movs	r2, #0
 800da3e:	701a      	strb	r2, [r3, #0]
    return;
 800da40:	e05a      	b.n	800daf8 <parse_http_request+0xd8>
  }
  if(!strcmp(nexttok, "GET") || !strcmp(nexttok,"get"))
 800da42:	4930      	ldr	r1, [pc, #192]	; (800db04 <parse_http_request+0xe4>)
 800da44:	68f8      	ldr	r0, [r7, #12]
 800da46:	f7f2 fbcb 	bl	80001e0 <strcmp>
 800da4a:	4603      	mov	r3, r0
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d006      	beq.n	800da5e <parse_http_request+0x3e>
 800da50:	492d      	ldr	r1, [pc, #180]	; (800db08 <parse_http_request+0xe8>)
 800da52:	68f8      	ldr	r0, [r7, #12]
 800da54:	f7f2 fbc4 	bl	80001e0 <strcmp>
 800da58:	4603      	mov	r3, r0
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d10a      	bne.n	800da74 <parse_http_request+0x54>
  {
    request->METHOD = METHOD_GET;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2201      	movs	r2, #1
 800da62:	701a      	strb	r2, [r3, #0]
//    nexttok = strtok(NULL," ");
    nexttok = strtok(nexttok+4," ");
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	3304      	adds	r3, #4
 800da68:	4925      	ldr	r1, [pc, #148]	; (800db00 <parse_http_request+0xe0>)
 800da6a:	4618      	mov	r0, r3
 800da6c:	f00e faca 	bl	801c004 <strtok>
 800da70:	60f8      	str	r0, [r7, #12]
 800da72:	e034      	b.n	800dade <parse_http_request+0xbe>

  }
  else if (!strcmp(nexttok, "HEAD") || !strcmp(nexttok,"head"))
 800da74:	4925      	ldr	r1, [pc, #148]	; (800db0c <parse_http_request+0xec>)
 800da76:	68f8      	ldr	r0, [r7, #12]
 800da78:	f7f2 fbb2 	bl	80001e0 <strcmp>
 800da7c:	4603      	mov	r3, r0
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d006      	beq.n	800da90 <parse_http_request+0x70>
 800da82:	4923      	ldr	r1, [pc, #140]	; (800db10 <parse_http_request+0xf0>)
 800da84:	68f8      	ldr	r0, [r7, #12]
 800da86:	f7f2 fbab 	bl	80001e0 <strcmp>
 800da8a:	4603      	mov	r3, r0
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d10a      	bne.n	800daa6 <parse_http_request+0x86>
  {
    request->METHOD = METHOD_HEAD;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2202      	movs	r2, #2
 800da94:	701a      	strb	r2, [r3, #0]
//    nexttok = strtok(NULL," ");
    nexttok = strtok(nexttok+5," ");
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	3305      	adds	r3, #5
 800da9a:	4919      	ldr	r1, [pc, #100]	; (800db00 <parse_http_request+0xe0>)
 800da9c:	4618      	mov	r0, r3
 800da9e:	f00e fab1 	bl	801c004 <strtok>
 800daa2:	60f8      	str	r0, [r7, #12]
 800daa4:	e01b      	b.n	800dade <parse_http_request+0xbe>

  }
  else if (!strcmp(nexttok, "POST") || !strcmp(nexttok,"post"))
 800daa6:	491b      	ldr	r1, [pc, #108]	; (800db14 <parse_http_request+0xf4>)
 800daa8:	68f8      	ldr	r0, [r7, #12]
 800daaa:	f7f2 fb99 	bl	80001e0 <strcmp>
 800daae:	4603      	mov	r3, r0
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d006      	beq.n	800dac2 <parse_http_request+0xa2>
 800dab4:	4918      	ldr	r1, [pc, #96]	; (800db18 <parse_http_request+0xf8>)
 800dab6:	68f8      	ldr	r0, [r7, #12]
 800dab8:	f7f2 fb92 	bl	80001e0 <strcmp>
 800dabc:	4603      	mov	r3, r0
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d10a      	bne.n	800dad8 <parse_http_request+0xb8>
  {
//    nexttok = strtok(NULL,"\0");
	  nexttok = strtok(nexttok+5,"\0");
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	3305      	adds	r3, #5
 800dac6:	4915      	ldr	r1, [pc, #84]	; (800db1c <parse_http_request+0xfc>)
 800dac8:	4618      	mov	r0, r3
 800daca:	f00e fa9b 	bl	801c004 <strtok>
 800dace:	60f8      	str	r0, [r7, #12]
    request->METHOD = METHOD_POST;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2203      	movs	r2, #3
 800dad4:	701a      	strb	r2, [r3, #0]
 800dad6:	e002      	b.n	800dade <parse_http_request+0xbe>
  }
  else
  {
    request->METHOD = METHOD_ERR;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2200      	movs	r2, #0
 800dadc:	701a      	strb	r2, [r3, #0]
  }

  if(!nexttok)
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d103      	bne.n	800daec <parse_http_request+0xcc>
  {
    request->METHOD = METHOD_ERR;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2200      	movs	r2, #0
 800dae8:	701a      	strb	r2, [r3, #0]
    return;
 800daea:	e005      	b.n	800daf8 <parse_http_request+0xd8>
  }
  strcpy((char *)request->URI, nexttok);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	3302      	adds	r3, #2
 800daf0:	68f9      	ldr	r1, [r7, #12]
 800daf2:	4618      	mov	r0, r3
 800daf4:	f00e fbd5 	bl	801c2a2 <strcpy>
}
 800daf8:	3710      	adds	r7, #16
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	0802174c 	.word	0x0802174c
 800db04:	08021750 	.word	0x08021750
 800db08:	08021754 	.word	0x08021754
 800db0c:	08021758 	.word	0x08021758
 800db10:	08021760 	.word	0x08021760
 800db14:	08021768 	.word	0x08021768
 800db18:	08021770 	.word	0x08021770
 800db1c:	08021778 	.word	0x08021778

0800db20 <get_http_param_value>:
#else
/**
 @brief	get next parameter value in the request
 */
uint8_t * get_http_param_value(char* uri, char* param_name)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b08a      	sub	sp, #40	; 0x28
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	6039      	str	r1, [r7, #0]

	uint8_t * name = 0;
 800db2a:	2300      	movs	r3, #0
 800db2c:	623b      	str	r3, [r7, #32]
	uint8_t * ret = BUFPUB;
 800db2e:	4b3c      	ldr	r3, [pc, #240]	; (800dc20 <get_http_param_value+0x100>)
 800db30:	61fb      	str	r3, [r7, #28]
	uint8_t * pos2;
	uint16_t len = 0, content_len = 0;
 800db32:	2300      	movs	r3, #0
 800db34:	837b      	strh	r3, [r7, #26]
 800db36:	2300      	movs	r3, #0
 800db38:	833b      	strh	r3, [r7, #24]
	uint8_t tmp_buf[10]={0x00, };
 800db3a:	2300      	movs	r3, #0
 800db3c:	60bb      	str	r3, [r7, #8]
 800db3e:	f107 030c 	add.w	r3, r7, #12
 800db42:	2200      	movs	r2, #0
 800db44:	601a      	str	r2, [r3, #0]
 800db46:	809a      	strh	r2, [r3, #4]
	uint8_t * test;

	if(!uri || !param_name) return 0;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d002      	beq.n	800db54 <get_http_param_value+0x34>
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d101      	bne.n	800db58 <get_http_param_value+0x38>
 800db54:	2300      	movs	r3, #0
 800db56:	e05f      	b.n	800dc18 <get_http_param_value+0xf8>

	/***************/
	if (mid(uri, "Content-Length: ", "\r\n", (char *)tmp_buf)){
 800db58:	f107 0308 	add.w	r3, r7, #8
 800db5c:	4a31      	ldr	r2, [pc, #196]	; (800dc24 <get_http_param_value+0x104>)
 800db5e:	4932      	ldr	r1, [pc, #200]	; (800dc28 <get_http_param_value+0x108>)
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f000 f8b4 	bl	800dcce <mid>
 800db66:	4603      	mov	r3, r0
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d001      	beq.n	800db70 <get_http_param_value+0x50>
		return 0;
 800db6c:	2300      	movs	r3, #0
 800db6e:	e053      	b.n	800dc18 <get_http_param_value+0xf8>
	}
	content_len = ATOI(tmp_buf, 10);
 800db70:	f107 0308 	add.w	r3, r7, #8
 800db74:	210a      	movs	r1, #10
 800db76:	4618      	mov	r0, r3
 800db78:	f000 f884 	bl	800dc84 <ATOI>
 800db7c:	4603      	mov	r3, r0
 800db7e:	833b      	strh	r3, [r7, #24]
	uri = strstr(uri, "\r\n\r\n");
 800db80:	492a      	ldr	r1, [pc, #168]	; (800dc2c <get_http_param_value+0x10c>)
 800db82:	6878      	ldr	r0, [r7, #4]
 800db84:	f00e fa9a 	bl	801c0bc <strstr>
 800db88:	6078      	str	r0, [r7, #4]
	uri += 4;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	3304      	adds	r3, #4
 800db8e:	607b      	str	r3, [r7, #4]
	uri[content_len] = 0;
 800db90:	8b3b      	ldrh	r3, [r7, #24]
 800db92:	687a      	ldr	r2, [r7, #4]
 800db94:	4413      	add	r3, r2
 800db96:	2200      	movs	r2, #0
 800db98:	701a      	strb	r2, [r3, #0]
	/***************/

	if((name = (uint8_t *)strstr(uri, param_name)))
 800db9a:	6839      	ldr	r1, [r7, #0]
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f00e fa8d 	bl	801c0bc <strstr>
 800dba2:	6238      	str	r0, [r7, #32]
 800dba4:	6a3b      	ldr	r3, [r7, #32]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d033      	beq.n	800dc12 <get_http_param_value+0xf2>
	{
		test = name + 1;
 800dbaa:	6a3b      	ldr	r3, [r7, #32]
 800dbac:	3301      	adds	r3, #1
 800dbae:	617b      	str	r3, [r7, #20]
//		if (isalpha((int)test) || isdigit((int)test)){
//			4 +2;
//		}
		name += strlen(param_name) + 1;
 800dbb0:	6838      	ldr	r0, [r7, #0]
 800dbb2:	f7f2 fb75 	bl	80002a0 <strlen>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	3301      	adds	r3, #1
 800dbba:	6a3a      	ldr	r2, [r7, #32]
 800dbbc:	4413      	add	r3, r2
 800dbbe:	623b      	str	r3, [r7, #32]
		pos2 = (uint8_t*)strstr((char*)name, "&");
 800dbc0:	2126      	movs	r1, #38	; 0x26
 800dbc2:	6a38      	ldr	r0, [r7, #32]
 800dbc4:	f00e f9b7 	bl	801bf36 <strchr>
 800dbc8:	6278      	str	r0, [r7, #36]	; 0x24
		if(!pos2)
 800dbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d106      	bne.n	800dbde <get_http_param_value+0xbe>
		{
			pos2 = name + strlen((char*)name);
 800dbd0:	6a38      	ldr	r0, [r7, #32]
 800dbd2:	f7f2 fb65 	bl	80002a0 <strlen>
 800dbd6:	4602      	mov	r2, r0
 800dbd8:	6a3b      	ldr	r3, [r7, #32]
 800dbda:	4413      	add	r3, r2
 800dbdc:	627b      	str	r3, [r7, #36]	; 0x24
		}
		len = pos2 - name;
 800dbde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbe0:	6a3b      	ldr	r3, [r7, #32]
 800dbe2:	1ad3      	subs	r3, r2, r3
 800dbe4:	837b      	strh	r3, [r7, #26]

		if(len)
 800dbe6:	8b7b      	ldrh	r3, [r7, #26]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d00e      	beq.n	800dc0a <get_http_param_value+0xea>
		{
			ret[len] = 0;
 800dbec:	8b7b      	ldrh	r3, [r7, #26]
 800dbee:	69fa      	ldr	r2, [r7, #28]
 800dbf0:	4413      	add	r3, r2
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	701a      	strb	r2, [r3, #0]
			strncpy((char*)ret,(char*)name, len);
 800dbf6:	8b7b      	ldrh	r3, [r7, #26]
 800dbf8:	461a      	mov	r2, r3
 800dbfa:	6a39      	ldr	r1, [r7, #32]
 800dbfc:	69f8      	ldr	r0, [r7, #28]
 800dbfe:	f00e f9dd 	bl	801bfbc <strncpy>
			unescape_http_url((char *)ret);
 800dc02:	69f8      	ldr	r0, [r7, #28]
 800dc04:	f7ff fc88 	bl	800d518 <unescape_http_url>
 800dc08:	e005      	b.n	800dc16 <get_http_param_value+0xf6>
			//ret[strlen((int8*)ret)] = 0;
			//printf("len=%d\r\n",len);
		}
		else
		{
			ret[0] = 0;
 800dc0a:	69fb      	ldr	r3, [r7, #28]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	701a      	strb	r2, [r3, #0]
 800dc10:	e001      	b.n	800dc16 <get_http_param_value+0xf6>
		}
	}
	else
	{
		return 0;
 800dc12:	2300      	movs	r3, #0
 800dc14:	e000      	b.n	800dc18 <get_http_param_value+0xf8>
	}
#ifdef _HTTPPARSER_DEBUG_
	printf("  %s=%s\r\n", param_name, ret);
#endif
	return ret;
 800dc16:	69fb      	ldr	r3, [r7, #28]
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3728      	adds	r7, #40	; 0x28
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}
 800dc20:	20000998 	.word	0x20000998
 800dc24:	0802177c 	.word	0x0802177c
 800dc28:	08021780 	.word	0x08021780
 800dc2c:	0802164c 	.word	0x0802164c

0800dc30 <get_http_uri_name>:
	return uri_name;
}
#else

uint8_t get_http_uri_name(uint8_t * uri, uint8_t * uri_buf)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b084      	sub	sp, #16
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	6039      	str	r1, [r7, #0]
	uint8_t * uri_ptr;
	if(!uri) return 0;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d101      	bne.n	800dc44 <get_http_uri_name+0x14>
 800dc40:	2300      	movs	r3, #0
 800dc42:	e017      	b.n	800dc74 <get_http_uri_name+0x44>

	strcpy((char *)uri_buf, (char *)uri);
 800dc44:	6879      	ldr	r1, [r7, #4]
 800dc46:	6838      	ldr	r0, [r7, #0]
 800dc48:	f00e fb2b 	bl	801c2a2 <strcpy>

	uri_ptr = (uint8_t *)strtok((char *)uri_buf, " ?");
 800dc4c:	490b      	ldr	r1, [pc, #44]	; (800dc7c <get_http_uri_name+0x4c>)
 800dc4e:	6838      	ldr	r0, [r7, #0]
 800dc50:	f00e f9d8 	bl	801c004 <strtok>
 800dc54:	60f8      	str	r0, [r7, #12]

	if(strcmp((char *)uri_ptr,"/")) uri_ptr++;
 800dc56:	490a      	ldr	r1, [pc, #40]	; (800dc80 <get_http_uri_name+0x50>)
 800dc58:	68f8      	ldr	r0, [r7, #12]
 800dc5a:	f7f2 fac1 	bl	80001e0 <strcmp>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d002      	beq.n	800dc6a <get_http_uri_name+0x3a>
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	3301      	adds	r3, #1
 800dc68:	60fb      	str	r3, [r7, #12]
	strcpy((char *)uri_buf, (char *)uri_ptr);
 800dc6a:	68f9      	ldr	r1, [r7, #12]
 800dc6c:	6838      	ldr	r0, [r7, #0]
 800dc6e:	f00e fb18 	bl	801c2a2 <strcpy>

#ifdef _HTTPPARSER_DEBUG_
	printf("  uri_name = %s\r\n", uri_buf);
#endif

	return 1;
 800dc72:	2301      	movs	r3, #1
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3710      	adds	r7, #16
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}
 800dc7c:	08021794 	.word	0x08021794
 800dc80:	08021798 	.word	0x08021798

0800dc84 <ATOI>:
*/
uint16_t ATOI(
	uint8_t * str,	/**< is a pointer to convert */
	uint8_t base	/**< is a base value (must be in the range 2 - 16) */
	)
{
 800dc84:	b590      	push	{r4, r7, lr}
 800dc86:	b085      	sub	sp, #20
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	460b      	mov	r3, r1
 800dc8e:	70fb      	strb	r3, [r7, #3]
        unsigned int num = 0;
 800dc90:	2300      	movs	r3, #0
 800dc92:	60fb      	str	r3, [r7, #12]
// debug_2013_11_25
//        while (*str !=0)
        while ((*str !=0) && (*str != 0x20)) // not include the space(0x020)
 800dc94:	e00d      	b.n	800dcb2 <ATOI+0x2e>
                num = num * base + C2D(*str++);
 800dc96:	78fb      	ldrb	r3, [r7, #3]
 800dc98:	68fa      	ldr	r2, [r7, #12]
 800dc9a:	fb02 f403 	mul.w	r4, r2, r3
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	1c5a      	adds	r2, r3, #1
 800dca2:	607a      	str	r2, [r7, #4]
 800dca4:	781b      	ldrb	r3, [r3, #0]
 800dca6:	4618      	mov	r0, r3
 800dca8:	f000 f843 	bl	800dd32 <C2D>
 800dcac:	4603      	mov	r3, r0
 800dcae:	4423      	add	r3, r4
 800dcb0:	60fb      	str	r3, [r7, #12]
        while ((*str !=0) && (*str != 0x20)) // not include the space(0x020)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d003      	beq.n	800dcc2 <ATOI+0x3e>
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	2b20      	cmp	r3, #32
 800dcc0:	d1e9      	bne.n	800dc96 <ATOI+0x12>
	return num;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	b29b      	uxth	r3, r3
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3714      	adds	r7, #20
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd90      	pop	{r4, r7, pc}

0800dcce <mid>:
 * @param s2 The end string to be researched
 * @param sub The string between s1 and s2
 * @return The length value atfer working
 */
int8_t mid(char* src, char* s1, char* s2, char* sub)
{
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b088      	sub	sp, #32
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	60f8      	str	r0, [r7, #12]
 800dcd6:	60b9      	str	r1, [r7, #8]
 800dcd8:	607a      	str	r2, [r7, #4]
 800dcda:	603b      	str	r3, [r7, #0]
	char* sub1;
	char* sub2;
	uint16_t n;

	sub1=strstr((char*)src,(char*)s1);
 800dcdc:	68b9      	ldr	r1, [r7, #8]
 800dcde:	68f8      	ldr	r0, [r7, #12]
 800dce0:	f00e f9ec 	bl	801c0bc <strstr>
 800dce4:	61f8      	str	r0, [r7, #28]
	if (sub1 == 0) return -1;
 800dce6:	69fb      	ldr	r3, [r7, #28]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d102      	bne.n	800dcf2 <mid+0x24>
 800dcec:	f04f 33ff 	mov.w	r3, #4294967295
 800dcf0:	e01b      	b.n	800dd2a <mid+0x5c>
	sub1+=strlen((char*)s1);
 800dcf2:	68b8      	ldr	r0, [r7, #8]
 800dcf4:	f7f2 fad4 	bl	80002a0 <strlen>
 800dcf8:	4602      	mov	r2, r0
 800dcfa:	69fb      	ldr	r3, [r7, #28]
 800dcfc:	4413      	add	r3, r2
 800dcfe:	61fb      	str	r3, [r7, #28]
	sub2=strstr((char*)sub1,(char*)s2);
 800dd00:	6879      	ldr	r1, [r7, #4]
 800dd02:	69f8      	ldr	r0, [r7, #28]
 800dd04:	f00e f9da 	bl	801c0bc <strstr>
 800dd08:	61b8      	str	r0, [r7, #24]

	n=sub2-sub1;
 800dd0a:	69ba      	ldr	r2, [r7, #24]
 800dd0c:	69fb      	ldr	r3, [r7, #28]
 800dd0e:	1ad3      	subs	r3, r2, r3
 800dd10:	82fb      	strh	r3, [r7, #22]
	strncpy((char*)sub,(char*)sub1,n);
 800dd12:	8afb      	ldrh	r3, [r7, #22]
 800dd14:	461a      	mov	r2, r3
 800dd16:	69f9      	ldr	r1, [r7, #28]
 800dd18:	6838      	ldr	r0, [r7, #0]
 800dd1a:	f00e f94f 	bl	801bfbc <strncpy>
	sub[n]='\0';
 800dd1e:	8afb      	ldrh	r3, [r7, #22]
 800dd20:	683a      	ldr	r2, [r7, #0]
 800dd22:	4413      	add	r3, r2
 800dd24:	2200      	movs	r2, #0
 800dd26:	701a      	strb	r2, [r3, #0]
	return 0;
 800dd28:	2300      	movs	r3, #0
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3720      	adds	r7, #32
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}

0800dd32 <C2D>:
This function converts HEX(0-F) to a character
*/
static uint8_t C2D(
		uint8_t c	/**< is a character('0'-'F') to convert to HEX */
	)
{
 800dd32:	b480      	push	{r7}
 800dd34:	b083      	sub	sp, #12
 800dd36:	af00      	add	r7, sp, #0
 800dd38:	4603      	mov	r3, r0
 800dd3a:	71fb      	strb	r3, [r7, #7]
	if (c >= '0' && c <= '9')
 800dd3c:	79fb      	ldrb	r3, [r7, #7]
 800dd3e:	2b2f      	cmp	r3, #47	; 0x2f
 800dd40:	d906      	bls.n	800dd50 <C2D+0x1e>
 800dd42:	79fb      	ldrb	r3, [r7, #7]
 800dd44:	2b39      	cmp	r3, #57	; 0x39
 800dd46:	d803      	bhi.n	800dd50 <C2D+0x1e>
		return c - '0';
 800dd48:	79fb      	ldrb	r3, [r7, #7]
 800dd4a:	3b30      	subs	r3, #48	; 0x30
 800dd4c:	b2db      	uxtb	r3, r3
 800dd4e:	e014      	b.n	800dd7a <C2D+0x48>
	if (c >= 'a' && c <= 'f')
 800dd50:	79fb      	ldrb	r3, [r7, #7]
 800dd52:	2b60      	cmp	r3, #96	; 0x60
 800dd54:	d906      	bls.n	800dd64 <C2D+0x32>
 800dd56:	79fb      	ldrb	r3, [r7, #7]
 800dd58:	2b66      	cmp	r3, #102	; 0x66
 800dd5a:	d803      	bhi.n	800dd64 <C2D+0x32>
		return 10 + c -'a';
 800dd5c:	79fb      	ldrb	r3, [r7, #7]
 800dd5e:	3b57      	subs	r3, #87	; 0x57
 800dd60:	b2db      	uxtb	r3, r3
 800dd62:	e00a      	b.n	800dd7a <C2D+0x48>
	if (c >= 'A' && c <= 'F')
 800dd64:	79fb      	ldrb	r3, [r7, #7]
 800dd66:	2b40      	cmp	r3, #64	; 0x40
 800dd68:	d906      	bls.n	800dd78 <C2D+0x46>
 800dd6a:	79fb      	ldrb	r3, [r7, #7]
 800dd6c:	2b46      	cmp	r3, #70	; 0x46
 800dd6e:	d803      	bhi.n	800dd78 <C2D+0x46>
		return 10 + c -'A';
 800dd70:	79fb      	ldrb	r3, [r7, #7]
 800dd72:	3b37      	subs	r3, #55	; 0x37
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	e000      	b.n	800dd7a <C2D+0x48>

	return (char)c;
 800dd78:	79fb      	ldrb	r3, [r7, #7]
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	370c      	adds	r7, #12
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd84:	4770      	bx	lr

0800dd86 <default_mcu_reset>:

/*****************************************************************************
 * Public functions
 ****************************************************************************/
// Callback functions definition: MCU Reset / WDT Reset
void default_mcu_reset(void) {;}
 800dd86:	b480      	push	{r7}
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	bf00      	nop
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd92:	4770      	bx	lr

0800dd94 <default_function>:
void default_wdt_reset(void) {;}
void default_function(void)  {;}
 800dd94:	b480      	push	{r7}
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	bf00      	nop
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda0:	4770      	bx	lr
	...

0800dda4 <httpServer_Sockinit>:

	if (delay_function) delay_os_ms = delay_function;
}

void httpServer_Sockinit(uint8_t cnt, uint8_t * socklist)
{
 800dda4:	b480      	push	{r7}
 800dda6:	b085      	sub	sp, #20
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	4603      	mov	r3, r0
 800ddac:	6039      	str	r1, [r7, #0]
 800ddae:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < cnt; i++)
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	73fb      	strb	r3, [r7, #15]
 800ddb4:	e009      	b.n	800ddca <httpServer_Sockinit+0x26>
	{
		// Mapping the H/W socket numbers to the sequential index numbers
		HTTPSock_Num[i] = socklist[i];
 800ddb6:	7bfb      	ldrb	r3, [r7, #15]
 800ddb8:	683a      	ldr	r2, [r7, #0]
 800ddba:	441a      	add	r2, r3
 800ddbc:	7bfb      	ldrb	r3, [r7, #15]
 800ddbe:	7811      	ldrb	r1, [r2, #0]
 800ddc0:	4a07      	ldr	r2, [pc, #28]	; (800dde0 <httpServer_Sockinit+0x3c>)
 800ddc2:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < cnt; i++)
 800ddc4:	7bfb      	ldrb	r3, [r7, #15]
 800ddc6:	3301      	adds	r3, #1
 800ddc8:	73fb      	strb	r3, [r7, #15]
 800ddca:	7bfa      	ldrb	r2, [r7, #15]
 800ddcc:	79fb      	ldrb	r3, [r7, #7]
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d3f1      	bcc.n	800ddb6 <httpServer_Sockinit+0x12>
	}
}
 800ddd2:	bf00      	nop
 800ddd4:	bf00      	nop
 800ddd6:	3714      	adds	r7, #20
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddde:	4770      	bx	lr
 800dde0:	20001198 	.word	0x20001198

0800dde4 <getHTTPSocketNum>:

static uint8_t getHTTPSocketNum(uint8_t seqnum)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b083      	sub	sp, #12
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	4603      	mov	r3, r0
 800ddec:	71fb      	strb	r3, [r7, #7]
	// Return the 'H/W socket number' corresponding to the index number
	return HTTPSock_Num[seqnum];
 800ddee:	79fb      	ldrb	r3, [r7, #7]
 800ddf0:	4a03      	ldr	r2, [pc, #12]	; (800de00 <getHTTPSocketNum+0x1c>)
 800ddf2:	5cd3      	ldrb	r3, [r2, r3]
}
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	370c      	adds	r7, #12
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfe:	4770      	bx	lr
 800de00:	20001198 	.word	0x20001198

0800de04 <getHTTPSequenceNum>:

static int8_t getHTTPSequenceNum(uint8_t socket)
{
 800de04:	b480      	push	{r7}
 800de06:	b085      	sub	sp, #20
 800de08:	af00      	add	r7, sp, #0
 800de0a:	4603      	mov	r3, r0
 800de0c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 800de0e:	2300      	movs	r3, #0
 800de10:	73fb      	strb	r3, [r7, #15]
 800de12:	e00b      	b.n	800de2c <getHTTPSequenceNum+0x28>
		if(HTTPSock_Num[i] == socket) return i;
 800de14:	7bfb      	ldrb	r3, [r7, #15]
 800de16:	4a0b      	ldr	r2, [pc, #44]	; (800de44 <getHTTPSequenceNum+0x40>)
 800de18:	5cd3      	ldrb	r3, [r2, r3]
 800de1a:	79fa      	ldrb	r2, [r7, #7]
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d102      	bne.n	800de26 <getHTTPSequenceNum+0x22>
 800de20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de24:	e007      	b.n	800de36 <getHTTPSequenceNum+0x32>
	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 800de26:	7bfb      	ldrb	r3, [r7, #15]
 800de28:	3301      	adds	r3, #1
 800de2a:	73fb      	strb	r3, [r7, #15]
 800de2c:	7bfb      	ldrb	r3, [r7, #15]
 800de2e:	2b07      	cmp	r3, #7
 800de30:	d9f0      	bls.n	800de14 <getHTTPSequenceNum+0x10>

	return -1;
 800de32:	f04f 33ff 	mov.w	r3, #4294967295
}
 800de36:	4618      	mov	r0, r3
 800de38:	3714      	adds	r7, #20
 800de3a:	46bd      	mov	sp, r7
 800de3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de40:	4770      	bx	lr
 800de42:	bf00      	nop
 800de44:	20001198 	.word	0x20001198

0800de48 <httpServer_init>:

void httpServer_init(uint8_t * tx_buf, uint8_t * rx_buf, uint8_t cnt, uint8_t * socklist)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b084      	sub	sp, #16
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	60f8      	str	r0, [r7, #12]
 800de50:	60b9      	str	r1, [r7, #8]
 800de52:	603b      	str	r3, [r7, #0]
 800de54:	4613      	mov	r3, r2
 800de56:	71fb      	strb	r3, [r7, #7]
	// User's shared buffer
	pHTTP_TX = tx_buf;
 800de58:	4a07      	ldr	r2, [pc, #28]	; (800de78 <httpServer_init+0x30>)
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	6013      	str	r3, [r2, #0]
	pHTTP_RX = rx_buf;
 800de5e:	4a07      	ldr	r2, [pc, #28]	; (800de7c <httpServer_init+0x34>)
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	6013      	str	r3, [r2, #0]

	// H/W Socket number mapping
	httpServer_Sockinit(cnt, socklist);
 800de64:	79fb      	ldrb	r3, [r7, #7]
 800de66:	6839      	ldr	r1, [r7, #0]
 800de68:	4618      	mov	r0, r3
 800de6a:	f7ff ff9b 	bl	800dda4 <httpServer_Sockinit>
}
 800de6e:	bf00      	nop
 800de70:	3710      	adds	r7, #16
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}
 800de76:	bf00      	nop
 800de78:	20001278 	.word	0x20001278
 800de7c:	2000127c 	.word	0x2000127c

0800de80 <httpServer_run>:
	if(wdt_reset) HTTPServer_WDT_Reset = wdt_reset;
}


void httpServer_run(uint8_t seqnum)
{
 800de80:	b590      	push	{r4, r7, lr}
 800de82:	b089      	sub	sp, #36	; 0x24
 800de84:	af02      	add	r7, sp, #8
 800de86:	4603      	mov	r3, r0
 800de88:	71fb      	strb	r3, [r7, #7]
	uint8_t s;	// socket number
	uint16_t len;
	uint32_t gettime = 0;
 800de8a:	2300      	movs	r3, #0
 800de8c:	613b      	str	r3, [r7, #16]
#ifdef _HTTPSERVER_DEBUG_
	uint8_t destip[4] = {0, };
	uint16_t destport = 0;
#endif

	http_request = (st_http_request *)pHTTP_RX;		// Structure of HTTP Request
 800de8e:	4bb4      	ldr	r3, [pc, #720]	; (800e160 <httpServer_run+0x2e0>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	4ab4      	ldr	r2, [pc, #720]	; (800e164 <httpServer_run+0x2e4>)
 800de94:	6013      	str	r3, [r2, #0]
	parsed_http_request = (st_http_request *)pHTTP_TX;
 800de96:	4bb4      	ldr	r3, [pc, #720]	; (800e168 <httpServer_run+0x2e8>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	4ab4      	ldr	r2, [pc, #720]	; (800e16c <httpServer_run+0x2ec>)
 800de9c:	6013      	str	r3, [r2, #0]

	// Get the H/W socket number
	s = getHTTPSocketNum(seqnum);
 800de9e:	79fb      	ldrb	r3, [r7, #7]
 800dea0:	4618      	mov	r0, r3
 800dea2:	f7ff ff9f 	bl	800dde4 <getHTTPSocketNum>
 800dea6:	4603      	mov	r3, r0
 800dea8:	73fb      	strb	r3, [r7, #15]

	/* HTTP Service Start */
	debug = getSn_SR(s);
 800deaa:	7bfb      	ldrb	r3, [r7, #15]
 800deac:	009b      	lsls	r3, r3, #2
 800deae:	3301      	adds	r3, #1
 800deb0:	00db      	lsls	r3, r3, #3
 800deb2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800deb6:	4618      	mov	r0, r3
 800deb8:	f7f9 fd82 	bl	80079c0 <WIZCHIP_READ>
 800debc:	4603      	mov	r3, r0
 800debe:	81bb      	strh	r3, [r7, #12]
	switch(getSn_SR(s))
 800dec0:	7bfb      	ldrb	r3, [r7, #15]
 800dec2:	009b      	lsls	r3, r3, #2
 800dec4:	3301      	adds	r3, #1
 800dec6:	00db      	lsls	r3, r3, #3
 800dec8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800decc:	4618      	mov	r0, r3
 800dece:	f7f9 fd77 	bl	80079c0 <WIZCHIP_READ>
 800ded2:	4603      	mov	r3, r0
 800ded4:	2b1c      	cmp	r3, #28
 800ded6:	f200 813e 	bhi.w	800e156 <httpServer_run+0x2d6>
 800deda:	a201      	add	r2, pc, #4	; (adr r2, 800dee0 <httpServer_run+0x60>)
 800dedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dee0:	0800e13f 	.word	0x0800e13f
 800dee4:	0800e157 	.word	0x0800e157
 800dee8:	0800e157 	.word	0x0800e157
 800deec:	0800e157 	.word	0x0800e157
 800def0:	0800e157 	.word	0x0800e157
 800def4:	0800e157 	.word	0x0800e157
 800def8:	0800e157 	.word	0x0800e157
 800defc:	0800e157 	.word	0x0800e157
 800df00:	0800e157 	.word	0x0800e157
 800df04:	0800e157 	.word	0x0800e157
 800df08:	0800e157 	.word	0x0800e157
 800df0c:	0800e157 	.word	0x0800e157
 800df10:	0800e157 	.word	0x0800e157
 800df14:	0800e157 	.word	0x0800e157
 800df18:	0800e157 	.word	0x0800e157
 800df1c:	0800e157 	.word	0x0800e157
 800df20:	0800e157 	.word	0x0800e157
 800df24:	0800e157 	.word	0x0800e157
 800df28:	0800e157 	.word	0x0800e157
 800df2c:	0800e14d 	.word	0x0800e14d
 800df30:	0800e157 	.word	0x0800e157
 800df34:	0800e157 	.word	0x0800e157
 800df38:	0800e157 	.word	0x0800e157
 800df3c:	0800df55 	.word	0x0800df55
 800df40:	0800e157 	.word	0x0800e157
 800df44:	0800e157 	.word	0x0800e157
 800df48:	0800e157 	.word	0x0800e157
 800df4c:	0800e157 	.word	0x0800e157
 800df50:	0800e135 	.word	0x0800e135
	{
		case SOCK_ESTABLISHED:
			// Interrupt clear
			if(getSn_IR(s) & Sn_IR_CON)
 800df54:	7bfb      	ldrb	r3, [r7, #15]
 800df56:	009b      	lsls	r3, r3, #2
 800df58:	3301      	adds	r3, #1
 800df5a:	00db      	lsls	r3, r3, #3
 800df5c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800df60:	4618      	mov	r0, r3
 800df62:	f7f9 fd2d 	bl	80079c0 <WIZCHIP_READ>
 800df66:	4603      	mov	r3, r0
 800df68:	f003 0301 	and.w	r3, r3, #1
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d009      	beq.n	800df84 <httpServer_run+0x104>
			{
				setSn_IR(s, Sn_IR_CON);
 800df70:	7bfb      	ldrb	r3, [r7, #15]
 800df72:	009b      	lsls	r3, r3, #2
 800df74:	3301      	adds	r3, #1
 800df76:	00db      	lsls	r3, r3, #3
 800df78:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800df7c:	2101      	movs	r1, #1
 800df7e:	4618      	mov	r0, r3
 800df80:	f7f9 fd6a 	bl	8007a58 <WIZCHIP_WRITE>
			}

			// HTTP Process states
			switch(HTTPSock_Status[seqnum].sock_status)
 800df84:	79fa      	ldrb	r2, [r7, #7]
 800df86:	497a      	ldr	r1, [pc, #488]	; (800e170 <httpServer_run+0x2f0>)
 800df88:	4613      	mov	r3, r2
 800df8a:	011b      	lsls	r3, r3, #4
 800df8c:	4413      	add	r3, r2
 800df8e:	009b      	lsls	r3, r3, #2
 800df90:	440b      	add	r3, r1
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	2b04      	cmp	r3, #4
 800df96:	f000 809b 	beq.w	800e0d0 <httpServer_run+0x250>
 800df9a:	2b04      	cmp	r3, #4
 800df9c:	f300 80c4 	bgt.w	800e128 <httpServer_run+0x2a8>
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d002      	beq.n	800dfaa <httpServer_run+0x12a>
 800dfa4:	2b03      	cmp	r3, #3
 800dfa6:	d06e      	beq.n	800e086 <httpServer_run+0x206>
#endif
					http_disconnect(s);
					break;

				default :
					break;
 800dfa8:	e0be      	b.n	800e128 <httpServer_run+0x2a8>
					if ((len = getSn_RX_RSR(s)) > 0)
 800dfaa:	7bfb      	ldrb	r3, [r7, #15]
 800dfac:	4618      	mov	r0, r3
 800dfae:	f7f9 feac 	bl	8007d0a <getSn_RX_RSR>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	82fb      	strh	r3, [r7, #22]
 800dfb6:	8afb      	ldrh	r3, [r7, #22]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	f000 80b7 	beq.w	800e12c <httpServer_run+0x2ac>
						if (len > DATA_BUF_SIZE) len = DATA_BUF_SIZE;
 800dfbe:	8afb      	ldrh	r3, [r7, #22]
 800dfc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dfc4:	d902      	bls.n	800dfcc <httpServer_run+0x14c>
 800dfc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dfca:	82fb      	strh	r3, [r7, #22]
						len = recv(s, (uint8_t *)http_request, len);
 800dfcc:	4b65      	ldr	r3, [pc, #404]	; (800e164 <httpServer_run+0x2e4>)
 800dfce:	6819      	ldr	r1, [r3, #0]
 800dfd0:	8afa      	ldrh	r2, [r7, #22]
 800dfd2:	7bfb      	ldrb	r3, [r7, #15]
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f7fa fc0b 	bl	80087f0 <recv>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	82fb      	strh	r3, [r7, #22]
						*(((uint8_t *)http_request) + len) = '\0';
 800dfde:	4b61      	ldr	r3, [pc, #388]	; (800e164 <httpServer_run+0x2e4>)
 800dfe0:	681a      	ldr	r2, [r3, #0]
 800dfe2:	8afb      	ldrh	r3, [r7, #22]
 800dfe4:	4413      	add	r3, r2
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	701a      	strb	r2, [r3, #0]
						parse_http_request(parsed_http_request, (uint8_t *)http_request);
 800dfea:	4b60      	ldr	r3, [pc, #384]	; (800e16c <httpServer_run+0x2ec>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	4a5d      	ldr	r2, [pc, #372]	; (800e164 <httpServer_run+0x2e4>)
 800dff0:	6812      	ldr	r2, [r2, #0]
 800dff2:	4611      	mov	r1, r2
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7ff fd13 	bl	800da20 <parse_http_request>
						http_process_handler(s, parsed_http_request);
 800dffa:	4b5c      	ldr	r3, [pc, #368]	; (800e16c <httpServer_run+0x2ec>)
 800dffc:	681a      	ldr	r2, [r3, #0]
 800dffe:	7bfb      	ldrb	r3, [r7, #15]
 800e000:	4611      	mov	r1, r2
 800e002:	4618      	mov	r0, r3
 800e004:	f000 fac4 	bl	800e590 <http_process_handler>
						gettime = get_httpServer_timecount();
 800e008:	f000 fd04 	bl	800ea14 <get_httpServer_timecount>
 800e00c:	6138      	str	r0, [r7, #16]
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 800e00e:	e006      	b.n	800e01e <httpServer_run+0x19e>
							if((get_httpServer_timecount() - gettime) > 3)
 800e010:	f000 fd00 	bl	800ea14 <get_httpServer_timecount>
 800e014:	4602      	mov	r2, r0
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	1ad3      	subs	r3, r2, r3
 800e01a:	2b03      	cmp	r3, #3
 800e01c:	d813      	bhi.n	800e046 <httpServer_run+0x1c6>
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 800e01e:	7bfb      	ldrb	r3, [r7, #15]
 800e020:	4618      	mov	r0, r3
 800e022:	f7f9 fe27 	bl	8007c74 <getSn_TX_FSR>
 800e026:	4603      	mov	r3, r0
 800e028:	461c      	mov	r4, r3
 800e02a:	7bfb      	ldrb	r3, [r7, #15]
 800e02c:	009b      	lsls	r3, r3, #2
 800e02e:	3301      	adds	r3, #1
 800e030:	00db      	lsls	r3, r3, #3
 800e032:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800e036:	4618      	mov	r0, r3
 800e038:	f7f9 fcc2 	bl	80079c0 <WIZCHIP_READ>
 800e03c:	4603      	mov	r3, r0
 800e03e:	029b      	lsls	r3, r3, #10
 800e040:	429c      	cmp	r4, r3
 800e042:	d1e5      	bne.n	800e010 <httpServer_run+0x190>
 800e044:	e000      	b.n	800e048 <httpServer_run+0x1c8>
								break;
 800e046:	bf00      	nop
						if(HTTPSock_Status[seqnum].file_len > 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_INPROC;
 800e048:	79fa      	ldrb	r2, [r7, #7]
 800e04a:	4949      	ldr	r1, [pc, #292]	; (800e170 <httpServer_run+0x2f0>)
 800e04c:	4613      	mov	r3, r2
 800e04e:	011b      	lsls	r3, r3, #4
 800e050:	4413      	add	r3, r2
 800e052:	009b      	lsls	r3, r3, #2
 800e054:	440b      	add	r3, r1
 800e056:	3338      	adds	r3, #56	; 0x38
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d009      	beq.n	800e072 <httpServer_run+0x1f2>
 800e05e:	79fa      	ldrb	r2, [r7, #7]
 800e060:	4943      	ldr	r1, [pc, #268]	; (800e170 <httpServer_run+0x2f0>)
 800e062:	4613      	mov	r3, r2
 800e064:	011b      	lsls	r3, r3, #4
 800e066:	4413      	add	r3, r2
 800e068:	009b      	lsls	r3, r3, #2
 800e06a:	440b      	add	r3, r1
 800e06c:	2203      	movs	r2, #3
 800e06e:	701a      	strb	r2, [r3, #0]
					break;
 800e070:	e05c      	b.n	800e12c <httpServer_run+0x2ac>
						else HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE; // Send the 'HTTP response' end
 800e072:	79fa      	ldrb	r2, [r7, #7]
 800e074:	493e      	ldr	r1, [pc, #248]	; (800e170 <httpServer_run+0x2f0>)
 800e076:	4613      	mov	r3, r2
 800e078:	011b      	lsls	r3, r3, #4
 800e07a:	4413      	add	r3, r2
 800e07c:	009b      	lsls	r3, r3, #2
 800e07e:	440b      	add	r3, r1
 800e080:	2204      	movs	r2, #4
 800e082:	701a      	strb	r2, [r3, #0]
					break;
 800e084:	e052      	b.n	800e12c <httpServer_run+0x2ac>
					send_http_response_body(s, HTTPSock_Status[seqnum].file_name, http_response, 0, 0);
 800e086:	79fa      	ldrb	r2, [r7, #7]
 800e088:	4613      	mov	r3, r2
 800e08a:	011b      	lsls	r3, r3, #4
 800e08c:	4413      	add	r3, r2
 800e08e:	009b      	lsls	r3, r3, #2
 800e090:	4a37      	ldr	r2, [pc, #220]	; (800e170 <httpServer_run+0x2f0>)
 800e092:	4413      	add	r3, r2
 800e094:	1c59      	adds	r1, r3, #1
 800e096:	4b37      	ldr	r3, [pc, #220]	; (800e174 <httpServer_run+0x2f4>)
 800e098:	681a      	ldr	r2, [r3, #0]
 800e09a:	7bf8      	ldrb	r0, [r7, #15]
 800e09c:	2300      	movs	r3, #0
 800e09e:	9300      	str	r3, [sp, #0]
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	f000 f8d5 	bl	800e250 <send_http_response_body>
					if(HTTPSock_Status[seqnum].file_len == 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE;
 800e0a6:	79fa      	ldrb	r2, [r7, #7]
 800e0a8:	4931      	ldr	r1, [pc, #196]	; (800e170 <httpServer_run+0x2f0>)
 800e0aa:	4613      	mov	r3, r2
 800e0ac:	011b      	lsls	r3, r3, #4
 800e0ae:	4413      	add	r3, r2
 800e0b0:	009b      	lsls	r3, r3, #2
 800e0b2:	440b      	add	r3, r1
 800e0b4:	3338      	adds	r3, #56	; 0x38
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d139      	bne.n	800e130 <httpServer_run+0x2b0>
 800e0bc:	79fa      	ldrb	r2, [r7, #7]
 800e0be:	492c      	ldr	r1, [pc, #176]	; (800e170 <httpServer_run+0x2f0>)
 800e0c0:	4613      	mov	r3, r2
 800e0c2:	011b      	lsls	r3, r3, #4
 800e0c4:	4413      	add	r3, r2
 800e0c6:	009b      	lsls	r3, r3, #2
 800e0c8:	440b      	add	r3, r1
 800e0ca:	2204      	movs	r2, #4
 800e0cc:	701a      	strb	r2, [r3, #0]
					break;
 800e0ce:	e02f      	b.n	800e130 <httpServer_run+0x2b0>
					HTTPSock_Status[seqnum].file_len = 0;
 800e0d0:	79fa      	ldrb	r2, [r7, #7]
 800e0d2:	4927      	ldr	r1, [pc, #156]	; (800e170 <httpServer_run+0x2f0>)
 800e0d4:	4613      	mov	r3, r2
 800e0d6:	011b      	lsls	r3, r3, #4
 800e0d8:	4413      	add	r3, r2
 800e0da:	009b      	lsls	r3, r3, #2
 800e0dc:	440b      	add	r3, r1
 800e0de:	3338      	adds	r3, #56	; 0x38
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_offset = 0;
 800e0e4:	79fa      	ldrb	r2, [r7, #7]
 800e0e6:	4922      	ldr	r1, [pc, #136]	; (800e170 <httpServer_run+0x2f0>)
 800e0e8:	4613      	mov	r3, r2
 800e0ea:	011b      	lsls	r3, r3, #4
 800e0ec:	4413      	add	r3, r2
 800e0ee:	009b      	lsls	r3, r3, #2
 800e0f0:	440b      	add	r3, r1
 800e0f2:	333c      	adds	r3, #60	; 0x3c
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_start = 0;
 800e0f8:	79fa      	ldrb	r2, [r7, #7]
 800e0fa:	491d      	ldr	r1, [pc, #116]	; (800e170 <httpServer_run+0x2f0>)
 800e0fc:	4613      	mov	r3, r2
 800e0fe:	011b      	lsls	r3, r3, #4
 800e100:	4413      	add	r3, r2
 800e102:	009b      	lsls	r3, r3, #2
 800e104:	440b      	add	r3, r1
 800e106:	3334      	adds	r3, #52	; 0x34
 800e108:	2200      	movs	r2, #0
 800e10a:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].sock_status = STATE_HTTP_IDLE;
 800e10c:	79fa      	ldrb	r2, [r7, #7]
 800e10e:	4918      	ldr	r1, [pc, #96]	; (800e170 <httpServer_run+0x2f0>)
 800e110:	4613      	mov	r3, r2
 800e112:	011b      	lsls	r3, r3, #4
 800e114:	4413      	add	r3, r2
 800e116:	009b      	lsls	r3, r3, #2
 800e118:	440b      	add	r3, r1
 800e11a:	2200      	movs	r2, #0
 800e11c:	701a      	strb	r2, [r3, #0]
					http_disconnect(s);
 800e11e:	7bfb      	ldrb	r3, [r7, #15]
 800e120:	4618      	mov	r0, r3
 800e122:	f000 fa13 	bl	800e54c <http_disconnect>
					break;
 800e126:	e004      	b.n	800e132 <httpServer_run+0x2b2>
					break;
 800e128:	bf00      	nop
 800e12a:	e015      	b.n	800e158 <httpServer_run+0x2d8>
					break;
 800e12c:	bf00      	nop
 800e12e:	e013      	b.n	800e158 <httpServer_run+0x2d8>
					break;
 800e130:	bf00      	nop
			}
			break;
 800e132:	e011      	b.n	800e158 <httpServer_run+0x2d8>

		case SOCK_CLOSE_WAIT:
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : ClOSE_WAIT\r\n", s);	// if a peer requests to close the current connection
#endif
			disconnect(s);
 800e134:	7bfb      	ldrb	r3, [r7, #15]
 800e136:	4618      	mov	r0, r3
 800e138:	f7fa f9ea 	bl	8008510 <disconnect>
			break;
 800e13c:	e00c      	b.n	800e158 <httpServer_run+0x2d8>

		case SOCK_CLOSED:
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : CLOSED\r\n", s);
#endif
			if(socket(s, Sn_MR_TCP, HTTP_SERVER_PORT, 0x00) == s)    /* Reinitialize the socket */
 800e13e:	7bf8      	ldrb	r0, [r7, #15]
 800e140:	2300      	movs	r3, #0
 800e142:	2250      	movs	r2, #80	; 0x50
 800e144:	2101      	movs	r1, #1
 800e146:	f7f9 ff2b 	bl	8007fa0 <socket>
			{
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : OPEN\r\n", s);
#endif
			}
			break;
 800e14a:	e005      	b.n	800e158 <httpServer_run+0x2d8>

		case SOCK_INIT:
			listen(s);
 800e14c:	7bfb      	ldrb	r3, [r7, #15]
 800e14e:	4618      	mov	r0, r3
 800e150:	f7fa f8a8 	bl	80082a4 <listen>
			break;
 800e154:	e000      	b.n	800e158 <httpServer_run+0x2d8>

		case SOCK_FIN_WAIT:
			//close(s);
			break;
		default :
			break;
 800e156:	bf00      	nop
	} // end of switch

#ifdef _USE_WATCHDOG_
	HTTPServer_WDT_Reset();
#endif
}
 800e158:	bf00      	nop
 800e15a:	371c      	adds	r7, #28
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd90      	pop	{r4, r7, pc}
 800e160:	2000127c 	.word	0x2000127c
 800e164:	200011a0 	.word	0x200011a0
 800e168:	20001278 	.word	0x20001278
 800e16c:	200011a4 	.word	0x200011a4
 800e170:	20001284 	.word	0x20001284
 800e174:	200011a8 	.word	0x200011a8

0800e178 <send_http_response_header>:

////////////////////////////////////////////
// Private Functions
////////////////////////////////////////////
static void send_http_response_header(uint8_t s, uint8_t content_type, uint32_t body_len, uint16_t http_status)
{
 800e178:	b590      	push	{r4, r7, lr}
 800e17a:	b083      	sub	sp, #12
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	603a      	str	r2, [r7, #0]
 800e180:	461a      	mov	r2, r3
 800e182:	4603      	mov	r3, r0
 800e184:	71fb      	strb	r3, [r7, #7]
 800e186:	460b      	mov	r3, r1
 800e188:	71bb      	strb	r3, [r7, #6]
 800e18a:	4613      	mov	r3, r2
 800e18c:	80bb      	strh	r3, [r7, #4]
	switch(http_status)
 800e18e:	88bb      	ldrh	r3, [r7, #4]
 800e190:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 800e194:	d029      	beq.n	800e1ea <send_http_response_header+0x72>
 800e196:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 800e19a:	dc3a      	bgt.n	800e212 <send_http_response_header+0x9a>
 800e19c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800e1a0:	d019      	beq.n	800e1d6 <send_http_response_header+0x5e>
 800e1a2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800e1a6:	dc34      	bgt.n	800e212 <send_http_response_header+0x9a>
 800e1a8:	2bc8      	cmp	r3, #200	; 0xc8
 800e1aa:	d003      	beq.n	800e1b4 <send_http_response_header+0x3c>
 800e1ac:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 800e1b0:	d025      	beq.n	800e1fe <send_http_response_header+0x86>
			break;
		case STATUS_MV_TEMP:	// HTTP/1.1 302 Not Found
			memcpy(http_response, REDIRECT_HTML_PAGE, sizeof(REDIRECT_HTML_PAGE));
			break;
		default:
			break;
 800e1b2:	e02e      	b.n	800e212 <send_http_response_header+0x9a>
			if((content_type != PTYPE_CGI) && (content_type != PTYPE_XML)) // CGI/XML type request does not respond HTTP header
 800e1b4:	79bb      	ldrb	r3, [r7, #6]
 800e1b6:	2b08      	cmp	r3, #8
 800e1b8:	d00a      	beq.n	800e1d0 <send_http_response_header+0x58>
 800e1ba:	79bb      	ldrb	r3, [r7, #6]
 800e1bc:	2b09      	cmp	r3, #9
 800e1be:	d007      	beq.n	800e1d0 <send_http_response_header+0x58>
				make_http_response_head((char*)http_response, content_type, body_len);
 800e1c0:	4b1f      	ldr	r3, [pc, #124]	; (800e240 <send_http_response_header+0xc8>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	79b9      	ldrb	r1, [r7, #6]
 800e1c6:	683a      	ldr	r2, [r7, #0]
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f7ff f9ed 	bl	800d5a8 <make_http_response_head>
			break;
 800e1ce:	e021      	b.n	800e214 <send_http_response_header+0x9c>
				http_status = 0;
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	80bb      	strh	r3, [r7, #4]
			break;
 800e1d4:	e01e      	b.n	800e214 <send_http_response_header+0x9c>
			memcpy(http_response, ERROR_REQUEST_PAGE, sizeof(ERROR_REQUEST_PAGE));
 800e1d6:	4b1a      	ldr	r3, [pc, #104]	; (800e240 <send_http_response_header+0xc8>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	4a1a      	ldr	r2, [pc, #104]	; (800e244 <send_http_response_header+0xcc>)
 800e1dc:	4618      	mov	r0, r3
 800e1de:	4611      	mov	r1, r2
 800e1e0:	2376      	movs	r3, #118	; 0x76
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	f00e f865 	bl	801c2b2 <memcpy>
			break;
 800e1e8:	e014      	b.n	800e214 <send_http_response_header+0x9c>
			memcpy(http_response, ERROR_HTML_PAGE, sizeof(ERROR_HTML_PAGE));
 800e1ea:	4b15      	ldr	r3, [pc, #84]	; (800e240 <send_http_response_header+0xc8>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	4a16      	ldr	r2, [pc, #88]	; (800e248 <send_http_response_header+0xd0>)
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	4611      	mov	r1, r2
 800e1f4:	2399      	movs	r3, #153	; 0x99
 800e1f6:	461a      	mov	r2, r3
 800e1f8:	f00e f85b 	bl	801c2b2 <memcpy>
			break;
 800e1fc:	e00a      	b.n	800e214 <send_http_response_header+0x9c>
			memcpy(http_response, REDIRECT_HTML_PAGE, sizeof(REDIRECT_HTML_PAGE));
 800e1fe:	4b10      	ldr	r3, [pc, #64]	; (800e240 <send_http_response_header+0xc8>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	4a12      	ldr	r2, [pc, #72]	; (800e24c <send_http_response_header+0xd4>)
 800e204:	4618      	mov	r0, r3
 800e206:	4611      	mov	r1, r2
 800e208:	239e      	movs	r3, #158	; 0x9e
 800e20a:	461a      	mov	r2, r3
 800e20c:	f00e f851 	bl	801c2b2 <memcpy>
			break;
 800e210:	e000      	b.n	800e214 <send_http_response_header+0x9c>
			break;
 800e212:	bf00      	nop
	}

	// Send the HTTP Response 'header'
	if(http_status)
 800e214:	88bb      	ldrh	r3, [r7, #4]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d00d      	beq.n	800e236 <send_http_response_header+0xbe>
	{
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : [Send] HTTP Response Header [ %d ]byte\r\n", s, (uint16_t)strlen((char *)http_response));
#endif
		send(s, http_response, strlen((char *)http_response));
 800e21a:	4b09      	ldr	r3, [pc, #36]	; (800e240 <send_http_response_header+0xc8>)
 800e21c:	681c      	ldr	r4, [r3, #0]
 800e21e:	4b08      	ldr	r3, [pc, #32]	; (800e240 <send_http_response_header+0xc8>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	4618      	mov	r0, r3
 800e224:	f7f2 f83c 	bl	80002a0 <strlen>
 800e228:	4603      	mov	r3, r0
 800e22a:	b29a      	uxth	r2, r3
 800e22c:	79fb      	ldrb	r3, [r7, #7]
 800e22e:	4621      	mov	r1, r4
 800e230:	4618      	mov	r0, r3
 800e232:	f7fa f9e3 	bl	80085fc <send>
	}
}
 800e236:	bf00      	nop
 800e238:	370c      	adds	r7, #12
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd90      	pop	{r4, r7, pc}
 800e23e:	bf00      	nop
 800e240:	200011a8 	.word	0x200011a8
 800e244:	08022a84 	.word	0x08022a84
 800e248:	080229e8 	.word	0x080229e8
 800e24c:	08022afc 	.word	0x08022afc

0800e250 <send_http_response_body>:

static void send_http_response_body(uint8_t s, uint8_t * uri_name, uint8_t * buf, uint32_t start_addr, uint32_t file_len)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b0a6      	sub	sp, #152	; 0x98
 800e254:	af00      	add	r7, sp, #0
 800e256:	60b9      	str	r1, [r7, #8]
 800e258:	607a      	str	r2, [r7, #4]
 800e25a:	603b      	str	r3, [r7, #0]
 800e25c:	4603      	mov	r3, r0
 800e25e:	73fb      	strb	r3, [r7, #15]
	int8_t get_seqnum;
	uint32_t send_len;

	uint8_t flag_datasend_end = 0;
 800e260:	2300      	movs	r3, #0
 800e262:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

#ifdef _USE_USER_SPI_FLASH_
	char tmp_path[PATH_BUF_SIZE] = {0x00, };
 800e266:	2300      	movs	r3, #0
 800e268:	613b      	str	r3, [r7, #16]
 800e26a:	f107 0314 	add.w	r3, r7, #20
 800e26e:	227c      	movs	r2, #124	; 0x7c
 800e270:	2100      	movs	r1, #0
 800e272:	4618      	mov	r0, r3
 800e274:	f00d fe48 	bl	801bf08 <memset>
#endif
#ifdef _USE_FLASH_
	uint32_t addr = 0;
#endif

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 800e278:	7bfb      	ldrb	r3, [r7, #15]
 800e27a:	4618      	mov	r0, r3
 800e27c:	f7ff fdc2 	bl	800de04 <getHTTPSequenceNum>
 800e280:	4603      	mov	r3, r0
 800e282:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 800e286:	f997 3092 	ldrsb.w	r3, [r7, #146]	; 0x92
 800e28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e28e:	f000 812e 	beq.w	800e4ee <send_http_response_body+0x29e>

	// Send the HTTP Response 'body'; requested file
	if(!HTTPSock_Status[get_seqnum].file_len) // ### Send HTTP response body: First part ###
 800e292:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e296:	4998      	ldr	r1, [pc, #608]	; (800e4f8 <send_http_response_body+0x2a8>)
 800e298:	4613      	mov	r3, r2
 800e29a:	011b      	lsls	r3, r3, #4
 800e29c:	4413      	add	r3, r2
 800e29e:	009b      	lsls	r3, r3, #2
 800e2a0:	440b      	add	r3, r1
 800e2a2:	3338      	adds	r3, #56	; 0x38
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d140      	bne.n	800e32c <send_http_response_body+0xdc>
	{
		if (file_len > DATA_BUF_SIZE - 1)
 800e2aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e2ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e2b2:	d336      	bcc.n	800e322 <send_http_response_body+0xd2>
		{
			HTTPSock_Status[get_seqnum].file_start = start_addr;
 800e2b4:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e2b8:	498f      	ldr	r1, [pc, #572]	; (800e4f8 <send_http_response_body+0x2a8>)
 800e2ba:	4613      	mov	r3, r2
 800e2bc:	011b      	lsls	r3, r3, #4
 800e2be:	4413      	add	r3, r2
 800e2c0:	009b      	lsls	r3, r3, #2
 800e2c2:	440b      	add	r3, r1
 800e2c4:	3334      	adds	r3, #52	; 0x34
 800e2c6:	683a      	ldr	r2, [r7, #0]
 800e2c8:	601a      	str	r2, [r3, #0]
			HTTPSock_Status[get_seqnum].file_len = file_len;
 800e2ca:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e2ce:	498a      	ldr	r1, [pc, #552]	; (800e4f8 <send_http_response_body+0x2a8>)
 800e2d0:	4613      	mov	r3, r2
 800e2d2:	011b      	lsls	r3, r3, #4
 800e2d4:	4413      	add	r3, r2
 800e2d6:	009b      	lsls	r3, r3, #2
 800e2d8:	440b      	add	r3, r1
 800e2da:	3338      	adds	r3, #56	; 0x38
 800e2dc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800e2e0:	601a      	str	r2, [r3, #0]
			send_len = DATA_BUF_SIZE - 1;
 800e2e2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800e2e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

/////////////////////////////////////////////////////////////////////////////////////////////////
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
			memset(HTTPSock_Status[get_seqnum].file_name, 0x00, MAX_CONTENT_NAME_LEN);
 800e2ea:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e2ee:	4613      	mov	r3, r2
 800e2f0:	011b      	lsls	r3, r3, #4
 800e2f2:	4413      	add	r3, r2
 800e2f4:	009b      	lsls	r3, r3, #2
 800e2f6:	4a80      	ldr	r2, [pc, #512]	; (800e4f8 <send_http_response_body+0x2a8>)
 800e2f8:	4413      	add	r3, r2
 800e2fa:	3301      	adds	r3, #1
 800e2fc:	2232      	movs	r2, #50	; 0x32
 800e2fe:	2100      	movs	r1, #0
 800e300:	4618      	mov	r0, r3
 800e302:	f00d fe01 	bl	801bf08 <memset>
			strcpy((char *)HTTPSock_Status[get_seqnum].file_name, (char *)uri_name);
 800e306:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e30a:	4613      	mov	r3, r2
 800e30c:	011b      	lsls	r3, r3, #4
 800e30e:	4413      	add	r3, r2
 800e310:	009b      	lsls	r3, r3, #2
 800e312:	4a79      	ldr	r2, [pc, #484]	; (800e4f8 <send_http_response_body+0x2a8>)
 800e314:	4413      	add	r3, r2
 800e316:	3301      	adds	r3, #1
 800e318:	68b9      	ldr	r1, [r7, #8]
 800e31a:	4618      	mov	r0, r3
 800e31c:	f00d ffc1 	bl	801c2a2 <strcpy>
 800e320:	e028      	b.n	800e374 <send_http_response_body+0x124>
#endif
		}
		else
		{
			// Send process end
			send_len = file_len;
 800e322:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e326:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e32a:	e023      	b.n	800e374 <send_http_response_body+0x124>
		if(HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH)
		{
			addr = HTTPSock_Status[get_seqnum].file_start + HTTPSock_Status[get_seqnum].file_offset;
		}
#endif
		send_len = HTTPSock_Status[get_seqnum].file_len - HTTPSock_Status[get_seqnum].file_offset;
 800e32c:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e330:	4971      	ldr	r1, [pc, #452]	; (800e4f8 <send_http_response_body+0x2a8>)
 800e332:	4613      	mov	r3, r2
 800e334:	011b      	lsls	r3, r3, #4
 800e336:	4413      	add	r3, r2
 800e338:	009b      	lsls	r3, r3, #2
 800e33a:	440b      	add	r3, r1
 800e33c:	3338      	adds	r3, #56	; 0x38
 800e33e:	6819      	ldr	r1, [r3, #0]
 800e340:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e344:	486c      	ldr	r0, [pc, #432]	; (800e4f8 <send_http_response_body+0x2a8>)
 800e346:	4613      	mov	r3, r2
 800e348:	011b      	lsls	r3, r3, #4
 800e34a:	4413      	add	r3, r2
 800e34c:	009b      	lsls	r3, r3, #2
 800e34e:	4403      	add	r3, r0
 800e350:	333c      	adds	r3, #60	; 0x3c
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	1acb      	subs	r3, r1, r3
 800e356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		if(send_len > DATA_BUF_SIZE - 1)
 800e35a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e35e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e362:	d304      	bcc.n	800e36e <send_http_response_body+0x11e>
		{
			send_len = DATA_BUF_SIZE - 1;
 800e364:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800e368:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e36c:	e002      	b.n	800e374 <send_http_response_body+0x124>
		{
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response end - file len [ %ld ]byte\r\n", s, HTTPSock_Status[get_seqnum].file_len);
#endif
			// Send process end
			flag_datasend_end = 1;
 800e36e:	2301      	movs	r3, #1
 800e370:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	//HTTPSock_Status[get_seqnum]->storage_type == SDCARD
	//HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH
	//HTTPSock_Status[get_seqnum]->storage_type == USERSPIFLASH
/*****************************************************/

	if(HTTPSock_Status[get_seqnum].storage_type == CODEFLASH)
 800e374:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e378:	495f      	ldr	r1, [pc, #380]	; (800e4f8 <send_http_response_body+0x2a8>)
 800e37a:	4613      	mov	r3, r2
 800e37c:	011b      	lsls	r3, r3, #4
 800e37e:	4413      	add	r3, r2
 800e380:	009b      	lsls	r3, r3, #2
 800e382:	440b      	add	r3, r1
 800e384:	3340      	adds	r3, #64	; 0x40
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	2b01      	cmp	r3, #1
 800e38a:	d129      	bne.n	800e3e0 <send_http_response_body+0x190>
	{
		if(HTTPSock_Status[get_seqnum].file_len) start_addr = HTTPSock_Status[get_seqnum].file_start;
 800e38c:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e390:	4959      	ldr	r1, [pc, #356]	; (800e4f8 <send_http_response_body+0x2a8>)
 800e392:	4613      	mov	r3, r2
 800e394:	011b      	lsls	r3, r3, #4
 800e396:	4413      	add	r3, r2
 800e398:	009b      	lsls	r3, r3, #2
 800e39a:	440b      	add	r3, r1
 800e39c:	3338      	adds	r3, #56	; 0x38
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d00a      	beq.n	800e3ba <send_http_response_body+0x16a>
 800e3a4:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e3a8:	4953      	ldr	r1, [pc, #332]	; (800e4f8 <send_http_response_body+0x2a8>)
 800e3aa:	4613      	mov	r3, r2
 800e3ac:	011b      	lsls	r3, r3, #4
 800e3ae:	4413      	add	r3, r2
 800e3b0:	009b      	lsls	r3, r3, #2
 800e3b2:	440b      	add	r3, r1
 800e3b4:	3334      	adds	r3, #52	; 0x34
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	603b      	str	r3, [r7, #0]
		read_userReg_webContent(start_addr, &buf[0], HTTPSock_Status[get_seqnum].file_offset, send_len);
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	b298      	uxth	r0, r3
 800e3be:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e3c2:	494d      	ldr	r1, [pc, #308]	; (800e4f8 <send_http_response_body+0x2a8>)
 800e3c4:	4613      	mov	r3, r2
 800e3c6:	011b      	lsls	r3, r3, #4
 800e3c8:	4413      	add	r3, r2
 800e3ca:	009b      	lsls	r3, r3, #2
 800e3cc:	440b      	add	r3, r1
 800e3ce:	333c      	adds	r3, #60	; 0x3c
 800e3d0:	681a      	ldr	r2, [r3, #0]
 800e3d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e3d6:	b29b      	uxth	r3, r3
 800e3d8:	6879      	ldr	r1, [r7, #4]
 800e3da:	f000 fbc9 	bl	800eb70 <read_userReg_webContent>
 800e3de:	e035      	b.n	800e44c <send_http_response_body+0x1fc>
	}

#ifdef _USE_USER_SPI_FLASH_
	else if(HTTPSock_Status[get_seqnum].storage_type == USERSPIFLASH){
 800e3e0:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e3e4:	4944      	ldr	r1, [pc, #272]	; (800e4f8 <send_http_response_body+0x2a8>)
 800e3e6:	4613      	mov	r3, r2
 800e3e8:	011b      	lsls	r3, r3, #4
 800e3ea:	4413      	add	r3, r2
 800e3ec:	009b      	lsls	r3, r3, #2
 800e3ee:	440b      	add	r3, r1
 800e3f0:	3340      	adds	r3, #64	; 0x40
 800e3f2:	781b      	ldrb	r3, [r3, #0]
 800e3f4:	2b04      	cmp	r3, #4
 800e3f6:	d126      	bne.n	800e446 <send_http_response_body+0x1f6>


		memset(tmp_path, 0x0, PATH_BUF_SIZE);
 800e3f8:	f107 0310 	add.w	r3, r7, #16
 800e3fc:	2280      	movs	r2, #128	; 0x80
 800e3fe:	2100      	movs	r1, #0
 800e400:	4618      	mov	r0, r3
 800e402:	f00d fd81 	bl	801bf08 <memset>
		strcpy((char *)tmp_path, HTTP_FS_DIR);
 800e406:	f107 0310 	add.w	r3, r7, #16
 800e40a:	4a3c      	ldr	r2, [pc, #240]	; (800e4fc <send_http_response_body+0x2ac>)
 800e40c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e410:	6018      	str	r0, [r3, #0]
 800e412:	3304      	adds	r3, #4
 800e414:	7019      	strb	r1, [r3, #0]
		strcat((char *)tmp_path, (const char *)uri_name);
 800e416:	f107 0310 	add.w	r3, r7, #16
 800e41a:	68b9      	ldr	r1, [r7, #8]
 800e41c:	4618      	mov	r0, r3
 800e41e:	f00d fd7b 	bl	801bf18 <strcat>
		spi_fs_read_file_offset((const char *)tmp_path, &buf[0], HTTPSock_Status[get_seqnum].file_offset, send_len);
 800e422:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e426:	4934      	ldr	r1, [pc, #208]	; (800e4f8 <send_http_response_body+0x2a8>)
 800e428:	4613      	mov	r3, r2
 800e42a:	011b      	lsls	r3, r3, #4
 800e42c:	4413      	add	r3, r2
 800e42e:	009b      	lsls	r3, r3, #2
 800e430:	440b      	add	r3, r1
 800e432:	333c      	adds	r3, #60	; 0x3c
 800e434:	681a      	ldr	r2, [r3, #0]
 800e436:	f107 0010 	add.w	r0, r7, #16
 800e43a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e43e:	6879      	ldr	r1, [r7, #4]
 800e440:	f00b f910 	bl	8019664 <spi_fs_read_file_offset>
 800e444:	e002      	b.n	800e44c <send_http_response_body+0x1fc>
		*(buf+send_len+1) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
	}
#endif
	else
	{
		send_len = 0;
 800e446:	2300      	movs	r3, #0
 800e448:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	// Requested content send to HTTP client
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : [Send] HTTP Response body [ %ld ]byte\r\n", s, send_len);
#endif

	if(send_len) send(s, buf, send_len);
 800e44c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e450:	2b00      	cmp	r3, #0
 800e452:	d008      	beq.n	800e466 <send_http_response_body+0x216>
 800e454:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e458:	b29a      	uxth	r2, r3
 800e45a:	7bfb      	ldrb	r3, [r7, #15]
 800e45c:	6879      	ldr	r1, [r7, #4]
 800e45e:	4618      	mov	r0, r3
 800e460:	f7fa f8cc 	bl	80085fc <send>
 800e464:	e002      	b.n	800e46c <send_http_response_body+0x21c>
	else flag_datasend_end = 1;
 800e466:	2301      	movs	r3, #1
 800e468:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

	if(flag_datasend_end)
 800e46c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800e470:	2b00      	cmp	r3, #0
 800e472:	d024      	beq.n	800e4be <send_http_response_body+0x26e>
	{
		HTTPSock_Status[get_seqnum].file_start = 0;
 800e474:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e478:	491f      	ldr	r1, [pc, #124]	; (800e4f8 <send_http_response_body+0x2a8>)
 800e47a:	4613      	mov	r3, r2
 800e47c:	011b      	lsls	r3, r3, #4
 800e47e:	4413      	add	r3, r2
 800e480:	009b      	lsls	r3, r3, #2
 800e482:	440b      	add	r3, r1
 800e484:	3334      	adds	r3, #52	; 0x34
 800e486:	2200      	movs	r2, #0
 800e488:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_len = 0;
 800e48a:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e48e:	491a      	ldr	r1, [pc, #104]	; (800e4f8 <send_http_response_body+0x2a8>)
 800e490:	4613      	mov	r3, r2
 800e492:	011b      	lsls	r3, r3, #4
 800e494:	4413      	add	r3, r2
 800e496:	009b      	lsls	r3, r3, #2
 800e498:	440b      	add	r3, r1
 800e49a:	3338      	adds	r3, #56	; 0x38
 800e49c:	2200      	movs	r2, #0
 800e49e:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_offset = 0;
 800e4a0:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e4a4:	4914      	ldr	r1, [pc, #80]	; (800e4f8 <send_http_response_body+0x2a8>)
 800e4a6:	4613      	mov	r3, r2
 800e4a8:	011b      	lsls	r3, r3, #4
 800e4aa:	4413      	add	r3, r2
 800e4ac:	009b      	lsls	r3, r3, #2
 800e4ae:	440b      	add	r3, r1
 800e4b0:	333c      	adds	r3, #60	; 0x3c
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	601a      	str	r2, [r3, #0]
		flag_datasend_end = 0;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 800e4bc:	e018      	b.n	800e4f0 <send_http_response_body+0x2a0>
	}
	else
	{
		HTTPSock_Status[get_seqnum].file_offset += send_len;
 800e4be:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e4c2:	490d      	ldr	r1, [pc, #52]	; (800e4f8 <send_http_response_body+0x2a8>)
 800e4c4:	4613      	mov	r3, r2
 800e4c6:	011b      	lsls	r3, r3, #4
 800e4c8:	4413      	add	r3, r2
 800e4ca:	009b      	lsls	r3, r3, #2
 800e4cc:	440b      	add	r3, r1
 800e4ce:	333c      	adds	r3, #60	; 0x3c
 800e4d0:	6819      	ldr	r1, [r3, #0]
 800e4d2:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 800e4d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e4da:	4419      	add	r1, r3
 800e4dc:	4806      	ldr	r0, [pc, #24]	; (800e4f8 <send_http_response_body+0x2a8>)
 800e4de:	4613      	mov	r3, r2
 800e4e0:	011b      	lsls	r3, r3, #4
 800e4e2:	4413      	add	r3, r2
 800e4e4:	009b      	lsls	r3, r3, #2
 800e4e6:	4403      	add	r3, r0
 800e4e8:	333c      	adds	r3, #60	; 0x3c
 800e4ea:	6019      	str	r1, [r3, #0]
 800e4ec:	e000      	b.n	800e4f0 <send_http_response_body+0x2a0>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 800e4ee:	bf00      	nop
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
#ifdef _USE_SDCARD_
	f_close(&fs);
#endif
// ## 20141219 added end
}
 800e4f0:	3798      	adds	r7, #152	; 0x98
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}
 800e4f6:	bf00      	nop
 800e4f8:	20001284 	.word	0x20001284
 800e4fc:	080217a0 	.word	0x080217a0

0800e500 <send_http_response_cgi>:

static void send_http_response_cgi(uint8_t s, uint8_t * buf, uint8_t * http_body, uint16_t file_len)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b088      	sub	sp, #32
 800e504:	af02      	add	r7, sp, #8
 800e506:	60b9      	str	r1, [r7, #8]
 800e508:	607a      	str	r2, [r7, #4]
 800e50a:	461a      	mov	r2, r3
 800e50c:	4603      	mov	r3, r0
 800e50e:	73fb      	strb	r3, [r7, #15]
 800e510:	4613      	mov	r3, r2
 800e512:	81bb      	strh	r3, [r7, #12]
	uint16_t send_len = 0;
 800e514:	2300      	movs	r3, #0
 800e516:	82fb      	strh	r3, [r7, #22]

#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - CGI\r\n", s);
#endif
	send_len = sprintf((char *)buf, "%s%d\r\n\r\n%s", RES_CGIHEAD_OK_CHANGED, file_len, http_body);
 800e518:	89ba      	ldrh	r2, [r7, #12]
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	9300      	str	r3, [sp, #0]
 800e51e:	4613      	mov	r3, r2
 800e520:	4a08      	ldr	r2, [pc, #32]	; (800e544 <send_http_response_cgi+0x44>)
 800e522:	4909      	ldr	r1, [pc, #36]	; (800e548 <send_http_response_cgi+0x48>)
 800e524:	68b8      	ldr	r0, [r7, #8]
 800e526:	f00d fb9f 	bl	801bc68 <siprintf>
 800e52a:	4603      	mov	r3, r0
 800e52c:	82fb      	strh	r3, [r7, #22]
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - send len [ %d ]byte\r\n", s, send_len);
#endif

	send(s, buf, send_len);
 800e52e:	8afa      	ldrh	r2, [r7, #22]
 800e530:	7bfb      	ldrb	r3, [r7, #15]
 800e532:	68b9      	ldr	r1, [r7, #8]
 800e534:	4618      	mov	r0, r3
 800e536:	f7fa f861 	bl	80085fc <send>
}
 800e53a:	bf00      	nop
 800e53c:	3718      	adds	r7, #24
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
 800e542:	bf00      	nop
 800e544:	080217a8 	.word	0x080217a8
 800e548:	08021804 	.word	0x08021804

0800e54c <http_disconnect>:


static int8_t http_disconnect(uint8_t sn)
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b082      	sub	sp, #8
 800e550:	af00      	add	r7, sp, #0
 800e552:	4603      	mov	r3, r0
 800e554:	71fb      	strb	r3, [r7, #7]
	setSn_CR(sn,Sn_CR_DISCON);
 800e556:	79fb      	ldrb	r3, [r7, #7]
 800e558:	009b      	lsls	r3, r3, #2
 800e55a:	3301      	adds	r3, #1
 800e55c:	00db      	lsls	r3, r3, #3
 800e55e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e562:	2108      	movs	r1, #8
 800e564:	4618      	mov	r0, r3
 800e566:	f7f9 fa77 	bl	8007a58 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800e56a:	bf00      	nop
 800e56c:	79fb      	ldrb	r3, [r7, #7]
 800e56e:	009b      	lsls	r3, r3, #2
 800e570:	3301      	adds	r3, #1
 800e572:	00db      	lsls	r3, r3, #3
 800e574:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e578:	4618      	mov	r0, r3
 800e57a:	f7f9 fa21 	bl	80079c0 <WIZCHIP_READ>
 800e57e:	4603      	mov	r3, r0
 800e580:	2b00      	cmp	r3, #0
 800e582:	d1f3      	bne.n	800e56c <http_disconnect+0x20>

	return SOCK_OK;
 800e584:	2301      	movs	r3, #1
}
 800e586:	4618      	mov	r0, r3
 800e588:	3708      	adds	r7, #8
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}
	...

0800e590 <http_process_handler>:


static void http_process_handler(uint8_t s, st_http_request * p_http_request)
{
 800e590:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e594:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 800e598:	af02      	add	r7, sp, #8
 800e59a:	4602      	mov	r2, r0
 800e59c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e5a0:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800e5a4:	6019      	str	r1, [r3, #0]
 800e5a6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e5aa:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 800e5ae:	701a      	strb	r2, [r3, #0]
	uint8_t * uri_name;
	uint32_t content_addr = 0;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	uint16_t content_num = 0;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
	uint32_t file_len = 0;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208

	uint8_t uri_buf[MAX_URI_SIZE]={0x00, };
 800e5c2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e5c6:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	601a      	str	r2, [r3, #0]
 800e5ce:	3304      	adds	r3, #4
 800e5d0:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 800e5d4:	2100      	movs	r1, #0
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f00d fc96 	bl	801bf08 <memset>
	uint16_t http_status;
	int8_t get_seqnum;
	uint8_t content_found;

#ifdef _USE_USER_SPI_FLASH_
	int64_t err = 0;
 800e5dc:	f04f 0200 	mov.w	r2, #0
 800e5e0:	f04f 0300 	mov.w	r3, #0
 800e5e4:	e9c7 2386 	strd	r2, r3, [r7, #536]	; 0x218
#endif

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 800e5e8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e5ec:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 800e5f0:	781b      	ldrb	r3, [r3, #0]
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f7ff fc06 	bl	800de04 <getHTTPSequenceNum>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 800e5fe:	f997 3217 	ldrsb.w	r3, [r7, #535]	; 0x217
 800e602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e606:	f000 81e5 	beq.w	800e9d4 <http_process_handler+0x444>

	http_status = 0;
 800e60a:	2300      	movs	r3, #0
 800e60c:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
	http_response = pHTTP_RX;
 800e610:	4ba6      	ldr	r3, [pc, #664]	; (800e8ac <http_process_handler+0x31c>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	4aa6      	ldr	r2, [pc, #664]	; (800e8b0 <http_process_handler+0x320>)
 800e616:	6013      	str	r3, [r2, #0]
	file_len = 0;
 800e618:	2300      	movs	r3, #0
 800e61a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208


	//method Analyze
	switch (p_http_request->METHOD)
 800e61e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e622:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	781b      	ldrb	r3, [r3, #0]
 800e62a:	2b03      	cmp	r3, #3
 800e62c:	f000 8154 	beq.w	800e8d8 <http_process_handler+0x348>
 800e630:	2b03      	cmp	r3, #3
 800e632:	f300 81be 	bgt.w	800e9b2 <http_process_handler+0x422>
 800e636:	2b00      	cmp	r3, #0
 800e638:	d007      	beq.n	800e64a <http_process_handler+0xba>
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	f2c0 81b9 	blt.w	800e9b2 <http_process_handler+0x422>
 800e640:	3b01      	subs	r3, #1
 800e642:	2b01      	cmp	r3, #1
 800e644:	f200 81b5 	bhi.w	800e9b2 <http_process_handler+0x422>
 800e648:	e010      	b.n	800e66c <http_process_handler+0xdc>
	{
		case METHOD_ERR :
			http_status = STATUS_BAD_REQ;
 800e64a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800e64e:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
			send_http_response_header(s, 0, 0, http_status);
 800e652:	f8b7 2222 	ldrh.w	r2, [r7, #546]	; 0x222
 800e656:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e65a:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 800e65e:	7818      	ldrb	r0, [r3, #0]
 800e660:	4613      	mov	r3, r2
 800e662:	2200      	movs	r2, #0
 800e664:	2100      	movs	r1, #0
 800e666:	f7ff fd87 	bl	800e178 <send_http_response_header>
			break;
 800e66a:	e1b6      	b.n	800e9da <http_process_handler+0x44a>

		case METHOD_HEAD :
		case METHOD_GET :
			get_http_uri_name(p_http_request->URI, uri_buf);
 800e66c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e670:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	3302      	adds	r3, #2
 800e678:	f107 0208 	add.w	r2, r7, #8
 800e67c:	4611      	mov	r1, r2
 800e67e:	4618      	mov	r0, r3
 800e680:	f7ff fad6 	bl	800dc30 <get_http_uri_name>
			uri_name = uri_buf;
 800e684:	f107 0308 	add.w	r3, r7, #8
 800e688:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

			if (!strcmp((char *)uri_name, "/")) strcpy((char *)uri_name, INITIAL_WEBPAGE);	// If URI is "/", respond by index.html
 800e68c:	4989      	ldr	r1, [pc, #548]	; (800e8b4 <http_process_handler+0x324>)
 800e68e:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 800e692:	f7f1 fda5 	bl	80001e0 <strcmp>
 800e696:	4603      	mov	r3, r0
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d10b      	bne.n	800e6b4 <http_process_handler+0x124>
 800e69c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800e6a0:	4985      	ldr	r1, [pc, #532]	; (800e8b8 <http_process_handler+0x328>)
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	460b      	mov	r3, r1
 800e6a6:	cb03      	ldmia	r3!, {r0, r1}
 800e6a8:	6010      	str	r0, [r2, #0]
 800e6aa:	6051      	str	r1, [r2, #4]
 800e6ac:	8819      	ldrh	r1, [r3, #0]
 800e6ae:	789b      	ldrb	r3, [r3, #2]
 800e6b0:	8111      	strh	r1, [r2, #8]
 800e6b2:	7293      	strb	r3, [r2, #10]
			if (!strcmp((char *)uri_name, "m")) strcpy((char *)uri_name, M_INITIAL_WEBPAGE);
 800e6b4:	4981      	ldr	r1, [pc, #516]	; (800e8bc <http_process_handler+0x32c>)
 800e6b6:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 800e6ba:	f7f1 fd91 	bl	80001e0 <strcmp>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d10a      	bne.n	800e6da <http_process_handler+0x14a>
 800e6c4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800e6c8:	4a7d      	ldr	r2, [pc, #500]	; (800e8c0 <http_process_handler+0x330>)
 800e6ca:	461c      	mov	r4, r3
 800e6cc:	4613      	mov	r3, r2
 800e6ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e6d0:	6020      	str	r0, [r4, #0]
 800e6d2:	6061      	str	r1, [r4, #4]
 800e6d4:	60a2      	str	r2, [r4, #8]
 800e6d6:	781b      	ldrb	r3, [r3, #0]
 800e6d8:	7323      	strb	r3, [r4, #12]
			if (!strcmp((char *)uri_name, "mobile")) strcpy((char *)uri_name, MOBILE_INITIAL_WEBPAGE);
 800e6da:	497a      	ldr	r1, [pc, #488]	; (800e8c4 <http_process_handler+0x334>)
 800e6dc:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 800e6e0:	f7f1 fd7e 	bl	80001e0 <strcmp>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d10b      	bne.n	800e702 <http_process_handler+0x172>
 800e6ea:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800e6ee:	4a76      	ldr	r2, [pc, #472]	; (800e8c8 <http_process_handler+0x338>)
 800e6f0:	461d      	mov	r5, r3
 800e6f2:	4614      	mov	r4, r2
 800e6f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e6f6:	6028      	str	r0, [r5, #0]
 800e6f8:	6069      	str	r1, [r5, #4]
 800e6fa:	60aa      	str	r2, [r5, #8]
 800e6fc:	60eb      	str	r3, [r5, #12]
 800e6fe:	8823      	ldrh	r3, [r4, #0]
 800e700:	822b      	strh	r3, [r5, #16]
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Checking requested file types (HTML, TEXT, GIF, JPEG and Etc. are included)
 800e702:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e706:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	3301      	adds	r3, #1
 800e70e:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 800e712:	4618      	mov	r0, r3
 800e714:	f7fe fffe 	bl	800d714 <find_http_uri_type>
			printf("\r\n> HTTPSocket[%d] : HTTP Method GET\r\n", s);
			printf("> HTTPSocket[%d] : Request Type = %d\r\n", s, p_http_request->TYPE);
			printf("> HTTPSocket[%d] : Request URI = %s\r\n", s, uri_name);
#endif

			if(p_http_request->TYPE == PTYPE_CGI)
 800e718:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e71c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	785b      	ldrb	r3, [r3, #1]
 800e724:	2b08      	cmp	r3, #8
 800e726:	d131      	bne.n	800e78c <http_process_handler+0x1fc>
			{
				content_found = http_get_cgi_handler(uri_name, pHTTP_TX, &file_len);
 800e728:	4b68      	ldr	r3, [pc, #416]	; (800e8cc <http_process_handler+0x33c>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800e730:	4619      	mov	r1, r3
 800e732:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 800e736:	f000 fa59 	bl	800ebec <http_get_cgi_handler>
 800e73a:	4603      	mov	r3, r0
 800e73c:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK_CHANGED)+8))))
 800e740:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 800e744:	2b00      	cmp	r3, #0
 800e746:	d015      	beq.n	800e774 <http_process_handler+0x1e4>
 800e748:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800e74c:	f240 729e 	movw	r2, #1950	; 0x79e
 800e750:	4293      	cmp	r3, r2
 800e752:	d80f      	bhi.n	800e774 <http_process_handler+0x1e4>
				{
					send_http_response_cgi(s, http_response, pHTTP_TX, (uint16_t)file_len);
 800e754:	4b56      	ldr	r3, [pc, #344]	; (800e8b0 <http_process_handler+0x320>)
 800e756:	6819      	ldr	r1, [r3, #0]
 800e758:	4b5c      	ldr	r3, [pc, #368]	; (800e8cc <http_process_handler+0x33c>)
 800e75a:	681a      	ldr	r2, [r3, #0]
 800e75c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800e760:	b29c      	uxth	r4, r3
 800e762:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e766:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 800e76a:	7818      	ldrb	r0, [r3, #0]
 800e76c:	4623      	mov	r3, r4
 800e76e:	f7ff fec7 	bl	800e500 <send_http_response_cgi>
				if(http_status == STATUS_OK)
				{
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
				}
			}
			break;
 800e772:	e131      	b.n	800e9d8 <http_process_handler+0x448>
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 800e774:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e778:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 800e77c:	7818      	ldrb	r0, [r3, #0]
 800e77e:	f44f 73ca 	mov.w	r3, #404	; 0x194
 800e782:	2200      	movs	r2, #0
 800e784:	2108      	movs	r1, #8
 800e786:	f7ff fcf7 	bl	800e178 <send_http_response_header>
			break;
 800e78a:	e125      	b.n	800e9d8 <http_process_handler+0x448>
				if(0 < ( err = spi_fs_serch_file_in_dir(HTTP_FS_DIR, (const char *)uri_name)))/* Read content from spi flash */
 800e78c:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 800e790:	484f      	ldr	r0, [pc, #316]	; (800e8d0 <http_process_handler+0x340>)
 800e792:	f00b f843 	bl	801981c <spi_fs_serch_file_in_dir>
 800e796:	4603      	mov	r3, r0
 800e798:	17da      	asrs	r2, r3, #31
 800e79a:	4698      	mov	r8, r3
 800e79c:	4691      	mov	r9, r2
 800e79e:	e9c7 8986 	strd	r8, r9, [r7, #536]	; 0x218
 800e7a2:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 800e7a6:	2a01      	cmp	r2, #1
 800e7a8:	f173 0300 	sbcs.w	r3, r3, #0
 800e7ac:	db12      	blt.n	800e7d4 <http_process_handler+0x244>
					file_len = err;
 800e7ae:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800e7b2:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
					content_found = 1;
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
					HTTPSock_Status[get_seqnum].storage_type = USERSPIFLASH;
 800e7bc:	f997 2217 	ldrsb.w	r2, [r7, #535]	; 0x217
 800e7c0:	4944      	ldr	r1, [pc, #272]	; (800e8d4 <http_process_handler+0x344>)
 800e7c2:	4613      	mov	r3, r2
 800e7c4:	011b      	lsls	r3, r3, #4
 800e7c6:	4413      	add	r3, r2
 800e7c8:	009b      	lsls	r3, r3, #2
 800e7ca:	440b      	add	r3, r1
 800e7cc:	3340      	adds	r3, #64	; 0x40
 800e7ce:	2204      	movs	r2, #4
 800e7d0:	701a      	strb	r2, [r3, #0]
 800e7d2:	e024      	b.n	800e81e <http_process_handler+0x28e>
				else if(find_userReg_webContent(uri_buf, &content_num, &file_len))
 800e7d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800e7d8:	f207 210e 	addw	r1, r7, #526	; 0x20e
 800e7dc:	f107 0308 	add.w	r3, r7, #8
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f000 f989 	bl	800eaf8 <find_userReg_webContent>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d012      	beq.n	800e812 <http_process_handler+0x282>
					content_found = 1; // Web content found in code flash memory
 800e7ec:	2301      	movs	r3, #1
 800e7ee:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
					content_addr = (uint32_t)content_num;
 800e7f2:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800e7f6:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
					HTTPSock_Status[get_seqnum].storage_type = CODEFLASH;
 800e7fa:	f997 2217 	ldrsb.w	r2, [r7, #535]	; 0x217
 800e7fe:	4935      	ldr	r1, [pc, #212]	; (800e8d4 <http_process_handler+0x344>)
 800e800:	4613      	mov	r3, r2
 800e802:	011b      	lsls	r3, r3, #4
 800e804:	4413      	add	r3, r2
 800e806:	009b      	lsls	r3, r3, #2
 800e808:	440b      	add	r3, r1
 800e80a:	3340      	adds	r3, #64	; 0x40
 800e80c:	2201      	movs	r2, #1
 800e80e:	701a      	strb	r2, [r3, #0]
 800e810:	e005      	b.n	800e81e <http_process_handler+0x28e>
					content_found = 0; // fail to find content
 800e812:	2300      	movs	r3, #0
 800e814:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
					file_len = 0;
 800e818:	2300      	movs	r3, #0
 800e81a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
				if(!content_found)
 800e81e:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 800e822:	2b00      	cmp	r3, #0
 800e824:	d111      	bne.n	800e84a <http_process_handler+0x2ba>
					if (!strcmp((char *)uri_name, INITIAL_WEBPAGE)){
 800e826:	4924      	ldr	r1, [pc, #144]	; (800e8b8 <http_process_handler+0x328>)
 800e828:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 800e82c:	f7f1 fcd8 	bl	80001e0 <strcmp>
 800e830:	4603      	mov	r3, r0
 800e832:	2b00      	cmp	r3, #0
 800e834:	d104      	bne.n	800e840 <http_process_handler+0x2b0>
						http_status = STATUS_NOT_FOUND;
 800e836:	f44f 73ca 	mov.w	r3, #404	; 0x194
 800e83a:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
 800e83e:	e007      	b.n	800e850 <http_process_handler+0x2c0>
						http_status = STATUS_MV_TEMP;
 800e840:	f44f 7397 	mov.w	r3, #302	; 0x12e
 800e844:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
 800e848:	e002      	b.n	800e850 <http_process_handler+0x2c0>
					http_status = STATUS_OK;
 800e84a:	23c8      	movs	r3, #200	; 0xc8
 800e84c:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
				if(http_status)
 800e850:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 800e854:	2b00      	cmp	r3, #0
 800e856:	d011      	beq.n	800e87c <http_process_handler+0x2ec>
					send_http_response_header(s, p_http_request->TYPE, file_len, http_status);
 800e858:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e85c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	7859      	ldrb	r1, [r3, #1]
 800e864:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 800e868:	f8b7 4222 	ldrh.w	r4, [r7, #546]	; 0x222
 800e86c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e870:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 800e874:	7818      	ldrb	r0, [r3, #0]
 800e876:	4623      	mov	r3, r4
 800e878:	f7ff fc7e 	bl	800e178 <send_http_response_header>
				if(http_status == STATUS_OK)
 800e87c:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 800e880:	2bc8      	cmp	r3, #200	; 0xc8
 800e882:	f040 80a9 	bne.w	800e9d8 <http_process_handler+0x448>
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
 800e886:	4b0a      	ldr	r3, [pc, #40]	; (800e8b0 <http_process_handler+0x320>)
 800e888:	6819      	ldr	r1, [r3, #0]
 800e88a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800e88e:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800e892:	f2a2 2221 	subw	r2, r2, #545	; 0x221
 800e896:	7810      	ldrb	r0, [r2, #0]
 800e898:	9300      	str	r3, [sp, #0]
 800e89a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e89e:	460a      	mov	r2, r1
 800e8a0:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 800e8a4:	f7ff fcd4 	bl	800e250 <send_http_response_body>
			break;
 800e8a8:	e096      	b.n	800e9d8 <http_process_handler+0x448>
 800e8aa:	bf00      	nop
 800e8ac:	2000127c 	.word	0x2000127c
 800e8b0:	200011a8 	.word	0x200011a8
 800e8b4:	08021810 	.word	0x08021810
 800e8b8:	08021814 	.word	0x08021814
 800e8bc:	08021820 	.word	0x08021820
 800e8c0:	08021824 	.word	0x08021824
 800e8c4:	08021834 	.word	0x08021834
 800e8c8:	0802183c 	.word	0x0802183c
 800e8cc:	20001278 	.word	0x20001278
 800e8d0:	080217a0 	.word	0x080217a0
 800e8d4:	20001284 	.word	0x20001284

		case METHOD_POST :
			mid((char *)p_http_request->URI, "/", " HTTP", (char *)uri_buf);
 800e8d8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e8dc:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	1c98      	adds	r0, r3, #2
 800e8e4:	f107 0308 	add.w	r3, r7, #8
 800e8e8:	4a3e      	ldr	r2, [pc, #248]	; (800e9e4 <http_process_handler+0x454>)
 800e8ea:	493f      	ldr	r1, [pc, #252]	; (800e9e8 <http_process_handler+0x458>)
 800e8ec:	f7ff f9ef 	bl	800dcce <mid>
			uri_name = uri_buf;
 800e8f0:	f107 0308 	add.w	r3, r7, #8
 800e8f4:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Check file type (HTML, TEXT, GIF, JPEG are included)
 800e8f8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e8fc:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	3301      	adds	r3, #1
 800e904:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 800e908:	4618      	mov	r0, r3
 800e90a:	f7fe ff03 	bl	800d714 <find_http_uri_type>
			printf("\r\n> HTTPSocket[%d] : HTTP Method POST\r\n", s);
			printf("> HTTPSocket[%d] : Request URI = %s ", s, uri_name);
			printf("Type = %d\r\n", p_http_request->TYPE);
#endif

			if(p_http_request->TYPE == PTYPE_CGI)	// HTTP POST Method; CGI Process
 800e90e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e912:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	785b      	ldrb	r3, [r3, #1]
 800e91a:	2b08      	cmp	r3, #8
 800e91c:	d13c      	bne.n	800e998 <http_process_handler+0x408>
			{
				content_found = http_post_cgi_handler(uri_name, p_http_request, http_response, &file_len);
 800e91e:	4b33      	ldr	r3, [pc, #204]	; (800e9ec <http_process_handler+0x45c>)
 800e920:	681a      	ldr	r2, [r3, #0]
 800e922:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800e926:	f507 710a 	add.w	r1, r7, #552	; 0x228
 800e92a:	f5a1 710a 	sub.w	r1, r1, #552	; 0x228
 800e92e:	6809      	ldr	r1, [r1, #0]
 800e930:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 800e934:	f000 f988 	bl	800ec48 <http_post_cgi_handler>
 800e938:	4603      	mov	r3, r0
 800e93a:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : [CGI: %s] / Response len [ %ld ]byte\r\n", s, content_found?"Content found":"Content not found", file_len);
#endif
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK)+8))))
 800e93e:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 800e942:	2b00      	cmp	r3, #0
 800e944:	d01c      	beq.n	800e980 <http_process_handler+0x3f0>
 800e946:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800e94a:	f240 72be 	movw	r2, #1982	; 0x7be
 800e94e:	4293      	cmp	r3, r2
 800e950:	d816      	bhi.n	800e980 <http_process_handler+0x3f0>
				{
					send_http_response_cgi(s, pHTTP_TX, http_response, (uint16_t)file_len);
 800e952:	4b27      	ldr	r3, [pc, #156]	; (800e9f0 <http_process_handler+0x460>)
 800e954:	6819      	ldr	r1, [r3, #0]
 800e956:	4b25      	ldr	r3, [pc, #148]	; (800e9ec <http_process_handler+0x45c>)
 800e958:	681a      	ldr	r2, [r3, #0]
 800e95a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800e95e:	b29c      	uxth	r4, r3
 800e960:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e964:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 800e968:	7818      	ldrb	r0, [r3, #0]
 800e96a:	4623      	mov	r3, r4
 800e96c:	f7ff fdc8 	bl	800e500 <send_http_response_cgi>
					//TODO, maybefix
					//http_disconnect(s);

					// Reset the H/W for apply to the change configuration information
					if(content_found == HTTP_RESET) HTTPServer_ReStart();
 800e970:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 800e974:	2b02      	cmp	r3, #2
 800e976:	d11b      	bne.n	800e9b0 <http_process_handler+0x420>
 800e978:	4b1e      	ldr	r3, [pc, #120]	; (800e9f4 <http_process_handler+0x464>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	4798      	blx	r3
 800e97e:	e017      	b.n	800e9b0 <http_process_handler+0x420>
				}
				else
				{
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 800e980:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e984:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 800e988:	7818      	ldrb	r0, [r3, #0]
 800e98a:	f44f 73ca 	mov.w	r3, #404	; 0x194
 800e98e:	2200      	movs	r2, #0
 800e990:	2108      	movs	r1, #8
 800e992:	f7ff fbf1 	bl	800e178 <send_http_response_header>
			}
			else	// HTTP POST Method; Content not found
			{
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
			}
			break;
 800e996:	e020      	b.n	800e9da <http_process_handler+0x44a>
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
 800e998:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e99c:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 800e9a0:	7818      	ldrb	r0, [r3, #0]
 800e9a2:	f44f 73ca 	mov.w	r3, #404	; 0x194
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	2100      	movs	r1, #0
 800e9aa:	f7ff fbe5 	bl	800e178 <send_http_response_header>
			break;
 800e9ae:	e014      	b.n	800e9da <http_process_handler+0x44a>
 800e9b0:	e013      	b.n	800e9da <http_process_handler+0x44a>

		default :
			http_status = STATUS_BAD_REQ;
 800e9b2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800e9b6:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
			send_http_response_header(s, 0, 0, http_status);
 800e9ba:	f8b7 2222 	ldrh.w	r2, [r7, #546]	; 0x222
 800e9be:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e9c2:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 800e9c6:	7818      	ldrb	r0, [r3, #0]
 800e9c8:	4613      	mov	r3, r2
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	2100      	movs	r1, #0
 800e9ce:	f7ff fbd3 	bl	800e178 <send_http_response_header>
			break;
 800e9d2:	e002      	b.n	800e9da <http_process_handler+0x44a>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 800e9d4:	bf00      	nop
 800e9d6:	e000      	b.n	800e9da <http_process_handler+0x44a>
			break;
 800e9d8:	bf00      	nop
	}
}
 800e9da:	f507 770a 	add.w	r7, r7, #552	; 0x228
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800e9e4:	08021850 	.word	0x08021850
 800e9e8:	08021810 	.word	0x08021810
 800e9ec:	200011a8 	.word	0x200011a8
 800e9f0:	20001278 	.word	0x20001278
 800e9f4:	20000100 	.word	0x20000100

0800e9f8 <httpServer_time_handler>:

void httpServer_time_handler(void)
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	af00      	add	r7, sp, #0
	httpServer_tick_1s++;
 800e9fc:	4b04      	ldr	r3, [pc, #16]	; (800ea10 <httpServer_time_handler+0x18>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	3301      	adds	r3, #1
 800ea02:	4a03      	ldr	r2, [pc, #12]	; (800ea10 <httpServer_time_handler+0x18>)
 800ea04:	6013      	str	r3, [r2, #0]
}
 800ea06:	bf00      	nop
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0e:	4770      	bx	lr
 800ea10:	20001280 	.word	0x20001280

0800ea14 <get_httpServer_timecount>:

uint32_t get_httpServer_timecount(void)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	af00      	add	r7, sp, #0
	delay_os_ms(1);
 800ea18:	4b03      	ldr	r3, [pc, #12]	; (800ea28 <get_httpServer_timecount+0x14>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	2001      	movs	r0, #1
 800ea1e:	4798      	blx	r3
	return httpServer_tick_1s;
 800ea20:	4b02      	ldr	r3, [pc, #8]	; (800ea2c <get_httpServer_timecount+0x18>)
 800ea22:	681b      	ldr	r3, [r3, #0]
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	20000104 	.word	0x20000104
 800ea2c:	20001280 	.word	0x20001280

0800ea30 <reg_httpServer_webContent>:



void reg_httpServer_webContent(uint8_t * content_name, uint8_t * content)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b084      	sub	sp, #16
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	6039      	str	r1, [r7, #0]
	uint16_t name_len;
	uint32_t content_len;

	if(content_name == NULL || content == NULL)
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d04e      	beq.n	800eade <reg_httpServer_webContent+0xae>
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d04b      	beq.n	800eade <reg_httpServer_webContent+0xae>
	{
		return;
	}
	else if(total_content_cnt >= MAX_CONTENT_CALLBACK)
 800ea46:	4b29      	ldr	r3, [pc, #164]	; (800eaec <reg_httpServer_webContent+0xbc>)
 800ea48:	881b      	ldrh	r3, [r3, #0]
 800ea4a:	2b03      	cmp	r3, #3
 800ea4c:	d849      	bhi.n	800eae2 <reg_httpServer_webContent+0xb2>
	{
		return;
	}

	name_len = strlen((char *)content_name);
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f7f1 fc26 	bl	80002a0 <strlen>
 800ea54:	4603      	mov	r3, r0
 800ea56:	81fb      	strh	r3, [r7, #14]
	content_len = strlen((char *)content);
 800ea58:	6838      	ldr	r0, [r7, #0]
 800ea5a:	f7f1 fc21 	bl	80002a0 <strlen>
 800ea5e:	60b8      	str	r0, [r7, #8]

	//web_content[total_content_cnt].content_name = malloc(name_len+1);//todo only for test
	web_content[total_content_cnt].content_name = &content_name_massive[total_content_cnt];
 800ea60:	4b22      	ldr	r3, [pc, #136]	; (800eaec <reg_httpServer_webContent+0xbc>)
 800ea62:	881b      	ldrh	r3, [r3, #0]
 800ea64:	461a      	mov	r2, r3
 800ea66:	4b21      	ldr	r3, [pc, #132]	; (800eaec <reg_httpServer_webContent+0xbc>)
 800ea68:	881b      	ldrh	r3, [r3, #0]
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	2332      	movs	r3, #50	; 0x32
 800ea6e:	fb02 f303 	mul.w	r3, r2, r3
 800ea72:	4a1f      	ldr	r2, [pc, #124]	; (800eaf0 <reg_httpServer_webContent+0xc0>)
 800ea74:	441a      	add	r2, r3
 800ea76:	491f      	ldr	r1, [pc, #124]	; (800eaf4 <reg_httpServer_webContent+0xc4>)
 800ea78:	4603      	mov	r3, r0
 800ea7a:	005b      	lsls	r3, r3, #1
 800ea7c:	4403      	add	r3, r0
 800ea7e:	009b      	lsls	r3, r3, #2
 800ea80:	440b      	add	r3, r1
 800ea82:	601a      	str	r2, [r3, #0]
	strcpy((char *)web_content[total_content_cnt].content_name, (const char *)content_name);
 800ea84:	4b19      	ldr	r3, [pc, #100]	; (800eaec <reg_httpServer_webContent+0xbc>)
 800ea86:	881b      	ldrh	r3, [r3, #0]
 800ea88:	4619      	mov	r1, r3
 800ea8a:	4a1a      	ldr	r2, [pc, #104]	; (800eaf4 <reg_httpServer_webContent+0xc4>)
 800ea8c:	460b      	mov	r3, r1
 800ea8e:	005b      	lsls	r3, r3, #1
 800ea90:	440b      	add	r3, r1
 800ea92:	009b      	lsls	r3, r3, #2
 800ea94:	4413      	add	r3, r2
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	6879      	ldr	r1, [r7, #4]
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f00d fc01 	bl	801c2a2 <strcpy>
	web_content[total_content_cnt].content_len = content_len;
 800eaa0:	4b12      	ldr	r3, [pc, #72]	; (800eaec <reg_httpServer_webContent+0xbc>)
 800eaa2:	881b      	ldrh	r3, [r3, #0]
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	4a13      	ldr	r2, [pc, #76]	; (800eaf4 <reg_httpServer_webContent+0xc4>)
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	005b      	lsls	r3, r3, #1
 800eaac:	440b      	add	r3, r1
 800eaae:	009b      	lsls	r3, r3, #2
 800eab0:	4413      	add	r3, r2
 800eab2:	3304      	adds	r3, #4
 800eab4:	68ba      	ldr	r2, [r7, #8]
 800eab6:	601a      	str	r2, [r3, #0]
	web_content[total_content_cnt].content = content;
 800eab8:	4b0c      	ldr	r3, [pc, #48]	; (800eaec <reg_httpServer_webContent+0xbc>)
 800eaba:	881b      	ldrh	r3, [r3, #0]
 800eabc:	4619      	mov	r1, r3
 800eabe:	4a0d      	ldr	r2, [pc, #52]	; (800eaf4 <reg_httpServer_webContent+0xc4>)
 800eac0:	460b      	mov	r3, r1
 800eac2:	005b      	lsls	r3, r3, #1
 800eac4:	440b      	add	r3, r1
 800eac6:	009b      	lsls	r3, r3, #2
 800eac8:	4413      	add	r3, r2
 800eaca:	3308      	adds	r3, #8
 800eacc:	683a      	ldr	r2, [r7, #0]
 800eace:	601a      	str	r2, [r3, #0]

	total_content_cnt++;
 800ead0:	4b06      	ldr	r3, [pc, #24]	; (800eaec <reg_httpServer_webContent+0xbc>)
 800ead2:	881b      	ldrh	r3, [r3, #0]
 800ead4:	3301      	adds	r3, #1
 800ead6:	b29a      	uxth	r2, r3
 800ead8:	4b04      	ldr	r3, [pc, #16]	; (800eaec <reg_httpServer_webContent+0xbc>)
 800eada:	801a      	strh	r2, [r3, #0]
 800eadc:	e002      	b.n	800eae4 <reg_httpServer_webContent+0xb4>
		return;
 800eade:	bf00      	nop
 800eae0:	e000      	b.n	800eae4 <reg_httpServer_webContent+0xb4>
		return;
 800eae2:	bf00      	nop
}
 800eae4:	3710      	adds	r7, #16
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}
 800eaea:	bf00      	nop
 800eaec:	20001274 	.word	0x20001274
 800eaf0:	200011ac 	.word	0x200011ac
 800eaf4:	200014a4 	.word	0x200014a4

0800eaf8 <find_userReg_webContent>:

	return ret;
}

uint8_t find_userReg_webContent(uint8_t * content_name, uint16_t * content_num, uint32_t * file_len)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b086      	sub	sp, #24
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	60f8      	str	r0, [r7, #12]
 800eb00:	60b9      	str	r1, [r7, #8]
 800eb02:	607a      	str	r2, [r7, #4]
	uint16_t i;
	uint8_t ret = 0; // '0' means 'File Not Found'
 800eb04:	2300      	movs	r3, #0
 800eb06:	757b      	strb	r3, [r7, #21]

	for(i = 0; i < total_content_cnt; i++)
 800eb08:	2300      	movs	r3, #0
 800eb0a:	82fb      	strh	r3, [r7, #22]
 800eb0c:	e022      	b.n	800eb54 <find_userReg_webContent+0x5c>
	{
		if(!strcmp((char *)content_name, (char *)web_content[i].content_name))
 800eb0e:	8afa      	ldrh	r2, [r7, #22]
 800eb10:	4915      	ldr	r1, [pc, #84]	; (800eb68 <find_userReg_webContent+0x70>)
 800eb12:	4613      	mov	r3, r2
 800eb14:	005b      	lsls	r3, r3, #1
 800eb16:	4413      	add	r3, r2
 800eb18:	009b      	lsls	r3, r3, #2
 800eb1a:	440b      	add	r3, r1
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	4619      	mov	r1, r3
 800eb20:	68f8      	ldr	r0, [r7, #12]
 800eb22:	f7f1 fb5d 	bl	80001e0 <strcmp>
 800eb26:	4603      	mov	r3, r0
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d110      	bne.n	800eb4e <find_userReg_webContent+0x56>
		{
			*file_len = web_content[i].content_len;
 800eb2c:	8afa      	ldrh	r2, [r7, #22]
 800eb2e:	490e      	ldr	r1, [pc, #56]	; (800eb68 <find_userReg_webContent+0x70>)
 800eb30:	4613      	mov	r3, r2
 800eb32:	005b      	lsls	r3, r3, #1
 800eb34:	4413      	add	r3, r2
 800eb36:	009b      	lsls	r3, r3, #2
 800eb38:	440b      	add	r3, r1
 800eb3a:	3304      	adds	r3, #4
 800eb3c:	681a      	ldr	r2, [r3, #0]
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	601a      	str	r2, [r3, #0]
			*content_num = i;
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	8afa      	ldrh	r2, [r7, #22]
 800eb46:	801a      	strh	r2, [r3, #0]
			ret = 1; // If the requested content found, ret set to '1' (Found)
 800eb48:	2301      	movs	r3, #1
 800eb4a:	757b      	strb	r3, [r7, #21]
			break;
 800eb4c:	e007      	b.n	800eb5e <find_userReg_webContent+0x66>
	for(i = 0; i < total_content_cnt; i++)
 800eb4e:	8afb      	ldrh	r3, [r7, #22]
 800eb50:	3301      	adds	r3, #1
 800eb52:	82fb      	strh	r3, [r7, #22]
 800eb54:	4b05      	ldr	r3, [pc, #20]	; (800eb6c <find_userReg_webContent+0x74>)
 800eb56:	881b      	ldrh	r3, [r3, #0]
 800eb58:	8afa      	ldrh	r2, [r7, #22]
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	d3d7      	bcc.n	800eb0e <find_userReg_webContent+0x16>
		}
	}
	return ret;
 800eb5e:	7d7b      	ldrb	r3, [r7, #21]
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3718      	adds	r7, #24
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}
 800eb68:	200014a4 	.word	0x200014a4
 800eb6c:	20001274 	.word	0x20001274

0800eb70 <read_userReg_webContent>:


uint16_t read_userReg_webContent(uint16_t content_num, uint8_t * buf, uint32_t offset, uint16_t size)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b086      	sub	sp, #24
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	60b9      	str	r1, [r7, #8]
 800eb78:	607a      	str	r2, [r7, #4]
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	81fb      	strh	r3, [r7, #14]
 800eb80:	4613      	mov	r3, r2
 800eb82:	81bb      	strh	r3, [r7, #12]
	uint16_t ret = 0;
 800eb84:	2300      	movs	r3, #0
 800eb86:	827b      	strh	r3, [r7, #18]
	uint8_t * ptr;

	if(content_num > total_content_cnt) return 0;
 800eb88:	4b16      	ldr	r3, [pc, #88]	; (800ebe4 <read_userReg_webContent+0x74>)
 800eb8a:	881b      	ldrh	r3, [r3, #0]
 800eb8c:	89fa      	ldrh	r2, [r7, #14]
 800eb8e:	429a      	cmp	r2, r3
 800eb90:	d901      	bls.n	800eb96 <read_userReg_webContent+0x26>
 800eb92:	2300      	movs	r3, #0
 800eb94:	e021      	b.n	800ebda <read_userReg_webContent+0x6a>

	ptr = web_content[content_num].content;
 800eb96:	89fa      	ldrh	r2, [r7, #14]
 800eb98:	4913      	ldr	r1, [pc, #76]	; (800ebe8 <read_userReg_webContent+0x78>)
 800eb9a:	4613      	mov	r3, r2
 800eb9c:	005b      	lsls	r3, r3, #1
 800eb9e:	4413      	add	r3, r2
 800eba0:	009b      	lsls	r3, r3, #2
 800eba2:	440b      	add	r3, r1
 800eba4:	3308      	adds	r3, #8
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	617b      	str	r3, [r7, #20]
	if(offset) ptr += offset;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d003      	beq.n	800ebb8 <read_userReg_webContent+0x48>
 800ebb0:	697a      	ldr	r2, [r7, #20]
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	4413      	add	r3, r2
 800ebb6:	617b      	str	r3, [r7, #20]

	strncpy((char *)buf, (char *)ptr, size);
 800ebb8:	89bb      	ldrh	r3, [r7, #12]
 800ebba:	461a      	mov	r2, r3
 800ebbc:	6979      	ldr	r1, [r7, #20]
 800ebbe:	68b8      	ldr	r0, [r7, #8]
 800ebc0:	f00d f9fc 	bl	801bfbc <strncpy>
	*(buf+size) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
 800ebc4:	89bb      	ldrh	r3, [r7, #12]
 800ebc6:	68ba      	ldr	r2, [r7, #8]
 800ebc8:	4413      	add	r3, r2
 800ebca:	2200      	movs	r2, #0
 800ebcc:	701a      	strb	r2, [r3, #0]

	ret = strlen((void *)buf);
 800ebce:	68b8      	ldr	r0, [r7, #8]
 800ebd0:	f7f1 fb66 	bl	80002a0 <strlen>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	827b      	strh	r3, [r7, #18]
	return ret;
 800ebd8:	8a7b      	ldrh	r3, [r7, #18]
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3718      	adds	r7, #24
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}
 800ebe2:	bf00      	nop
 800ebe4:	20001274 	.word	0x20001274
 800ebe8:	200014a4 	.word	0x200014a4

0800ebec <http_get_cgi_handler>:

uint8_t (*predefined_set_cgi_processor)(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len);
uint8_t (*predefined_get_cgi_processor)(uint8_t * uri_name, uint8_t * buf, uint16_t * len);

uint8_t http_get_cgi_handler(uint8_t * uri_name, uint8_t * buf, uint32_t * file_len)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b086      	sub	sp, #24
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	60f8      	str	r0, [r7, #12]
 800ebf4:	60b9      	str	r1, [r7, #8]
 800ebf6:	607a      	str	r2, [r7, #4]
	uint8_t ret = HTTP_OK;
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	82bb      	strh	r3, [r7, #20]

	if(predefined_get_cgi_processor(uri_name, buf, &len))
 800ec00:	4b0f      	ldr	r3, [pc, #60]	; (800ec40 <http_get_cgi_handler+0x54>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	f107 0214 	add.w	r2, r7, #20
 800ec08:	68b9      	ldr	r1, [r7, #8]
 800ec0a:	68f8      	ldr	r0, [r7, #12]
 800ec0c:	4798      	blx	r3
 800ec0e:	4603      	mov	r3, r0
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d108      	bne.n	800ec26 <http_get_cgi_handler+0x3a>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 800ec14:	490b      	ldr	r1, [pc, #44]	; (800ec44 <http_get_cgi_handler+0x58>)
 800ec16:	68f8      	ldr	r0, [r7, #12]
 800ec18:	f7f1 fae2 	bl	80001e0 <strcmp>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d001      	beq.n	800ec26 <http_get_cgi_handler+0x3a>
		;
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 800ec22:	2300      	movs	r3, #0
 800ec24:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 800ec26:	7dfb      	ldrb	r3, [r7, #23]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d003      	beq.n	800ec34 <http_get_cgi_handler+0x48>
 800ec2c:	8abb      	ldrh	r3, [r7, #20]
 800ec2e:	461a      	mov	r2, r3
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	601a      	str	r2, [r3, #0]
	return ret;
 800ec34:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3718      	adds	r7, #24
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	200014d8 	.word	0x200014d8
 800ec44:	08021908 	.word	0x08021908

0800ec48 <http_post_cgi_handler>:

uint8_t http_post_cgi_handler(uint8_t * uri_name, st_http_request * p_http_request, uint8_t * buf, uint32_t * file_len)
{
 800ec48:	b590      	push	{r4, r7, lr}
 800ec4a:	b087      	sub	sp, #28
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	60f8      	str	r0, [r7, #12]
 800ec50:	60b9      	str	r1, [r7, #8]
 800ec52:	607a      	str	r2, [r7, #4]
 800ec54:	603b      	str	r3, [r7, #0]
	uint8_t ret = HTTP_OK;
 800ec56:	2301      	movs	r3, #1
 800ec58:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	82bb      	strh	r3, [r7, #20]
	uint8_t val = 0;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	75bb      	strb	r3, [r7, #22]

	if(predefined_set_cgi_processor(uri_name, p_http_request->URI, buf, &len))
 800ec62:	4b20      	ldr	r3, [pc, #128]	; (800ece4 <http_post_cgi_handler+0x9c>)
 800ec64:	681c      	ldr	r4, [r3, #0]
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	1c99      	adds	r1, r3, #2
 800ec6a:	f107 0314 	add.w	r3, r7, #20
 800ec6e:	687a      	ldr	r2, [r7, #4]
 800ec70:	68f8      	ldr	r0, [r7, #12]
 800ec72:	47a0      	blx	r4
 800ec74:	4603      	mov	r3, r0
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d127      	bne.n	800ecca <http_post_cgi_handler+0x82>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 800ec7a:	491b      	ldr	r1, [pc, #108]	; (800ece8 <http_post_cgi_handler+0xa0>)
 800ec7c:	68f8      	ldr	r0, [r7, #12]
 800ec7e:	f7f1 faaf 	bl	80001e0 <strcmp>
 800ec82:	4603      	mov	r3, r0
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d10b      	bne.n	800eca0 <http_post_cgi_handler+0x58>
	{
		// To do
		val = 1;
 800ec88:	2301      	movs	r3, #1
 800ec8a:	75bb      	strb	r3, [r7, #22]
		len = sprintf((char *)buf, "%d", val);
 800ec8c:	7dbb      	ldrb	r3, [r7, #22]
 800ec8e:	461a      	mov	r2, r3
 800ec90:	4916      	ldr	r1, [pc, #88]	; (800ecec <http_post_cgi_handler+0xa4>)
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f00c ffe8 	bl	801bc68 <siprintf>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	b29b      	uxth	r3, r3
 800ec9c:	82bb      	strh	r3, [r7, #20]
 800ec9e:	e014      	b.n	800ecca <http_post_cgi_handler+0x82>
	}
	else if(strcmp((const char *)uri_name, "settings_MQTT.cgi") == 0)
 800eca0:	4913      	ldr	r1, [pc, #76]	; (800ecf0 <http_post_cgi_handler+0xa8>)
 800eca2:	68f8      	ldr	r0, [r7, #12]
 800eca4:	f7f1 fa9c 	bl	80001e0 <strcmp>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d10b      	bne.n	800ecc6 <http_post_cgi_handler+0x7e>
	{
		// To do
		val = 1;
 800ecae:	2301      	movs	r3, #1
 800ecb0:	75bb      	strb	r3, [r7, #22]
		len = sprintf((char *)buf, "%d", val);
 800ecb2:	7dbb      	ldrb	r3, [r7, #22]
 800ecb4:	461a      	mov	r2, r3
 800ecb6:	490d      	ldr	r1, [pc, #52]	; (800ecec <http_post_cgi_handler+0xa4>)
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f00c ffd5 	bl	801bc68 <siprintf>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	b29b      	uxth	r3, r3
 800ecc2:	82bb      	strh	r3, [r7, #20]
 800ecc4:	e001      	b.n	800ecca <http_post_cgi_handler+0x82>
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 800ecca:	7dfb      	ldrb	r3, [r7, #23]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d003      	beq.n	800ecd8 <http_post_cgi_handler+0x90>
 800ecd0:	8abb      	ldrh	r3, [r7, #20]
 800ecd2:	461a      	mov	r2, r3
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	601a      	str	r2, [r3, #0]
	return ret;
 800ecd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecda:	4618      	mov	r0, r3
 800ecdc:	371c      	adds	r7, #28
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd90      	pop	{r4, r7, pc}
 800ece2:	bf00      	nop
 800ece4:	200014d4 	.word	0x200014d4
 800ece8:	08021908 	.word	0x08021908
 800ecec:	08021914 	.word	0x08021914
 800ecf0:	08021918 	.word	0x08021918

0800ecf4 <default_get_cgi_processor>:

uint8_t default_get_cgi_processor(uint8_t * uri_name, uint8_t * buf, uint16_t * len)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b085      	sub	sp, #20
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	60f8      	str	r0, [r7, #12]
 800ecfc:	60b9      	str	r1, [r7, #8]
 800ecfe:	607a      	str	r2, [r7, #4]

	;
}
 800ed00:	bf00      	nop
 800ed02:	4618      	mov	r0, r3
 800ed04:	3714      	adds	r7, #20
 800ed06:	46bd      	mov	sp, r7
 800ed08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0c:	4770      	bx	lr

0800ed0e <default_set_cgi_processor>:

uint8_t default_set_cgi_processor(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len)
{
 800ed0e:	b480      	push	{r7}
 800ed10:	b085      	sub	sp, #20
 800ed12:	af00      	add	r7, sp, #0
 800ed14:	60f8      	str	r0, [r7, #12]
 800ed16:	60b9      	str	r1, [r7, #8]
 800ed18:	607a      	str	r2, [r7, #4]
 800ed1a:	603b      	str	r3, [r7, #0]
	;
}
 800ed1c:	bf00      	nop
 800ed1e:	4618      	mov	r0, r3
 800ed20:	3714      	adds	r7, #20
 800ed22:	46bd      	mov	sp, r7
 800ed24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed28:	4770      	bx	lr
	...

0800ed2c <reg_external_post_cgi_processor>:

void reg_external_post_cgi_processor( uint8_t (*function)(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len)){
 800ed2c:	b480      	push	{r7}
 800ed2e:	b083      	sub	sp, #12
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]

	predefined_set_cgi_processor = default_set_cgi_processor;
 800ed34:	4b07      	ldr	r3, [pc, #28]	; (800ed54 <reg_external_post_cgi_processor+0x28>)
 800ed36:	4a08      	ldr	r2, [pc, #32]	; (800ed58 <reg_external_post_cgi_processor+0x2c>)
 800ed38:	601a      	str	r2, [r3, #0]
	if (function) {
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d002      	beq.n	800ed46 <reg_external_post_cgi_processor+0x1a>
		predefined_set_cgi_processor = function;
 800ed40:	4a04      	ldr	r2, [pc, #16]	; (800ed54 <reg_external_post_cgi_processor+0x28>)
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	6013      	str	r3, [r2, #0]
	}

}
 800ed46:	bf00      	nop
 800ed48:	370c      	adds	r7, #12
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed50:	4770      	bx	lr
 800ed52:	bf00      	nop
 800ed54:	200014d4 	.word	0x200014d4
 800ed58:	0800ed0f 	.word	0x0800ed0f

0800ed5c <reg_external_get_cgi_processor>:

void reg_external_get_cgi_processor(uint8_t (*function)(uint8_t * uri_name, uint8_t * buf, uint16_t * len)){
 800ed5c:	b480      	push	{r7}
 800ed5e:	b083      	sub	sp, #12
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]

	predefined_get_cgi_processor = default_get_cgi_processor;
 800ed64:	4b07      	ldr	r3, [pc, #28]	; (800ed84 <reg_external_get_cgi_processor+0x28>)
 800ed66:	4a08      	ldr	r2, [pc, #32]	; (800ed88 <reg_external_get_cgi_processor+0x2c>)
 800ed68:	601a      	str	r2, [r3, #0]
	if (function) predefined_get_cgi_processor = function;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d002      	beq.n	800ed76 <reg_external_get_cgi_processor+0x1a>
 800ed70:	4a04      	ldr	r2, [pc, #16]	; (800ed84 <reg_external_get_cgi_processor+0x28>)
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6013      	str	r3, [r2, #0]

}
 800ed76:	bf00      	nop
 800ed78:	370c      	adds	r7, #12
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed80:	4770      	bx	lr
 800ed82:	bf00      	nop
 800ed84:	200014d8 	.word	0x200014d8
 800ed88:	0800ecf5 	.word	0x0800ecf5

0800ed8c <proto_reset>:
void (*delay_ms)(uint32_t sec);

void (*ResetON)	(void);
void (*ResetOFF)(void);

void proto_reset(void){};
 800ed8c:	b480      	push	{r7}
 800ed8e:	af00      	add	r7, sp, #0
 800ed90:	bf00      	nop
 800ed92:	46bd      	mov	sp, r7
 800ed94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed98:	4770      	bx	lr

0800ed9a <proto_delay_func>:

void proto_delay_func(uint32_t sec){
 800ed9a:	b480      	push	{r7}
 800ed9c:	b083      	sub	sp, #12
 800ed9e:	af00      	add	r7, sp, #0
 800eda0:	6078      	str	r0, [r7, #4]
	sec = sec * 10000;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f242 7210 	movw	r2, #10000	; 0x2710
 800eda8:	fb02 f303 	mul.w	r3, r2, r3
 800edac:	607b      	str	r3, [r7, #4]

	while (sec){
 800edae:	e002      	b.n	800edb6 <proto_delay_func+0x1c>
		sec--;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	3b01      	subs	r3, #1
 800edb4:	607b      	str	r3, [r7, #4]
	while (sec){
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d1f9      	bne.n	800edb0 <proto_delay_func+0x16>
	}

}
 800edbc:	bf00      	nop
 800edbe:	bf00      	nop
 800edc0:	370c      	adds	r7, #12
 800edc2:	46bd      	mov	sp, r7
 800edc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc8:	4770      	bx	lr
	...

0800edcc <w5500_lib_init>:

void w5500_lib_init(wiz_NetInfo * NetInfoStructure)
{
 800edcc:	b480      	push	{r7}
 800edce:	b083      	sub	sp, #12
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
	NetInfo = NetInfoStructure;
 800edd4:	4a04      	ldr	r2, [pc, #16]	; (800ede8 <w5500_lib_init+0x1c>)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	6013      	str	r3, [r2, #0]
}
 800edda:	bf00      	nop
 800eddc:	370c      	adds	r7, #12
 800edde:	46bd      	mov	sp, r7
 800ede0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede4:	4770      	bx	lr
 800ede6:	bf00      	nop
 800ede8:	200014e0 	.word	0x200014e0

0800edec <network_init>:

void network_init(void)
{	wiz_NetTimeout 	nettimeout;
 800edec:	b580      	push	{r7, lr}
 800edee:	b082      	sub	sp, #8
 800edf0:	af00      	add	r7, sp, #0

	nettimeout.retry_cnt	= 3;
 800edf2:	2303      	movs	r3, #3
 800edf4:	713b      	strb	r3, [r7, #4]
	nettimeout.time_100us	= 500;
 800edf6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800edfa:	80fb      	strh	r3, [r7, #6]

	// Set Network information from netinfo structure
	ctlnetwork(CN_SET_NETINFO, NetInfo);
 800edfc:	4b07      	ldr	r3, [pc, #28]	; (800ee1c <network_init+0x30>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	4619      	mov	r1, r3
 800ee02:	2000      	movs	r0, #0
 800ee04:	f7fa fa74 	bl	80092f0 <ctlnetwork>
	ctlnetwork(CN_SET_TIMEOUT, (void*)&nettimeout);
 800ee08:	1d3b      	adds	r3, r7, #4
 800ee0a:	4619      	mov	r1, r3
 800ee0c:	2004      	movs	r0, #4
 800ee0e:	f7fa fa6f 	bl	80092f0 <ctlnetwork>
}
 800ee12:	bf00      	nop
 800ee14:	3708      	adds	r7, #8
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}
 800ee1a:	bf00      	nop
 800ee1c:	200014e0 	.word	0x200014e0

0800ee20 <Callback_IPConflict>:

void Callback_IPConflict(void)
{
 800ee20:	b480      	push	{r7}
 800ee22:	af00      	add	r7, sp, #0
	ip_dhcp_assigned = false;
 800ee24:	4b03      	ldr	r3, [pc, #12]	; (800ee34 <Callback_IPConflict+0x14>)
 800ee26:	2200      	movs	r2, #0
 800ee28:	701a      	strb	r2, [r3, #0]
}
 800ee2a:	bf00      	nop
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee32:	4770      	bx	lr
 800ee34:	200014dc 	.word	0x200014dc

0800ee38 <Callback_IPAssigned>:

void Callback_IPAssigned(void)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	af00      	add	r7, sp, #0
   getIPfromDHCP(NetInfo->ip);
 800ee3c:	4b11      	ldr	r3, [pc, #68]	; (800ee84 <Callback_IPAssigned+0x4c>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	3306      	adds	r3, #6
 800ee42:	4618      	mov	r0, r3
 800ee44:	f7fc fa0a 	bl	800b25c <getIPfromDHCP>
   getGWfromDHCP(NetInfo->gw);
 800ee48:	4b0e      	ldr	r3, [pc, #56]	; (800ee84 <Callback_IPAssigned+0x4c>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	330e      	adds	r3, #14
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f7fc fa24 	bl	800b29c <getGWfromDHCP>
   getSNfromDHCP(NetInfo->sn);
 800ee54:	4b0b      	ldr	r3, [pc, #44]	; (800ee84 <Callback_IPAssigned+0x4c>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	330a      	adds	r3, #10
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f7fc fa3e 	bl	800b2dc <getSNfromDHCP>
   getDNSfromDHCP(NetInfo->dns);
 800ee60:	4b08      	ldr	r3, [pc, #32]	; (800ee84 <Callback_IPAssigned+0x4c>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	3312      	adds	r3, #18
 800ee66:	4618      	mov	r0, r3
 800ee68:	f7fc fa58 	bl	800b31c <getDNSfromDHCP>
   NetInfo->dhcp = NETINFO_DHCP;
 800ee6c:	4b05      	ldr	r3, [pc, #20]	; (800ee84 <Callback_IPAssigned+0x4c>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	2202      	movs	r2, #2
 800ee72:	759a      	strb	r2, [r3, #22]
   // Network initialization
   network_init();      // apply from dhcp
 800ee74:	f7ff ffba 	bl	800edec <network_init>

   ip_dhcp_assigned = true;
 800ee78:	4b03      	ldr	r3, [pc, #12]	; (800ee88 <Callback_IPAssigned+0x50>)
 800ee7a:	2201      	movs	r2, #1
 800ee7c:	701a      	strb	r2, [r3, #0]
#ifdef _MAIN_DEBUG_
   printf("DHCP LEASED TIME : %ld Sec.\r\n", getDHCPLeasetime());//Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬â€�Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬Â¢Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â»Ãƒï¿½Ã‚Â¡Ãƒâ€˜Ã¢â‚¬Å“Ãƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¡Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬ËœÃƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã…Â  Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â Ãƒâ€˜Ã‹Å“Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¯Â¿Â½ Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â°Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â¦Ãƒï¿½Ã‚Â Ãƒâ€™Ã¢â‚¬ËœÃƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¹ Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â¦Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â° Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã†â€™Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Âµ DHCP
#endif
}
 800ee7e:	bf00      	nop
 800ee80:	bd80      	pop	{r7, pc}
 800ee82:	bf00      	nop
 800ee84:	200014e0 	.word	0x200014e0
 800ee88:	200014dc 	.word	0x200014dc

0800ee8c <dhcp_rutine>:

void dhcp_rutine(void){
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	af00      	add	r7, sp, #0
	switch(DHCP_run())
 800ee90:	f7fb ff6e 	bl	800ad70 <DHCP_run>
 800ee94:	4603      	mov	r3, r0
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d004      	beq.n	800eea4 <dhcp_rutine+0x18>
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	db09      	blt.n	800eeb2 <dhcp_rutine+0x26>
 800ee9e:	3b02      	subs	r3, #2
 800eea0:	2b02      	cmp	r3, #2
					DHCP_stop();      // if restart, recall DHCP_init()
					network_init();
					ip_dhcp_assigned = false;
				}
			default:
				break;
 800eea2:	e006      	b.n	800eeb2 <dhcp_rutine+0x26>
				my_dhcp_retry++;
 800eea4:	4b04      	ldr	r3, [pc, #16]	; (800eeb8 <dhcp_rutine+0x2c>)
 800eea6:	781b      	ldrb	r3, [r3, #0]
 800eea8:	3301      	adds	r3, #1
 800eeaa:	b2da      	uxtb	r2, r3
 800eeac:	4b02      	ldr	r3, [pc, #8]	; (800eeb8 <dhcp_rutine+0x2c>)
 800eeae:	701a      	strb	r2, [r3, #0]
				break;
 800eeb0:	e000      	b.n	800eeb4 <dhcp_rutine+0x28>
				break;
 800eeb2:	bf00      	nop
			}
}
 800eeb4:	bf00      	nop
 800eeb6:	bd80      	pop	{r7, pc}
 800eeb8:	200014e4 	.word	0x200014e4

0800eebc <link_status>:

int link_status(void){
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b082      	sub	sp, #8
 800eec0:	af00      	add	r7, sp, #0
	uint8_t temp;
	ctlwizchip(CW_GET_PHYLINK, (void*)&temp);
 800eec2:	1dfb      	adds	r3, r7, #7
 800eec4:	4619      	mov	r1, r3
 800eec6:	200f      	movs	r0, #15
 800eec8:	f7fa f930 	bl	800912c <ctlwizchip>
	if (!temp)ip_dhcp_assigned = false;
 800eecc:	79fb      	ldrb	r3, [r7, #7]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d102      	bne.n	800eed8 <link_status+0x1c>
 800eed2:	4b04      	ldr	r3, [pc, #16]	; (800eee4 <link_status+0x28>)
 800eed4:	2200      	movs	r2, #0
 800eed6:	701a      	strb	r2, [r3, #0]
	return temp;
 800eed8:	79fb      	ldrb	r3, [r7, #7]
}
 800eeda:	4618      	mov	r0, r3
 800eedc:	3708      	adds	r7, #8
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}
 800eee2:	bf00      	nop
 800eee4:	200014dc 	.word	0x200014dc

0800eee8 <link_duplex>:

int link_duplex(void){
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b082      	sub	sp, #8
 800eeec:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_status;
	wizphy_getphystat(&phy_status);
 800eeee:	1d3b      	adds	r3, r7, #4
 800eef0:	4618      	mov	r0, r3
 800eef2:	f7fa fcad 	bl	8009850 <wizphy_getphystat>
	return phy_status.duplex;
 800eef6:	79fb      	ldrb	r3, [r7, #7]
}
 800eef8:	4618      	mov	r0, r3
 800eefa:	3708      	adds	r7, #8
 800eefc:	46bd      	mov	sp, r7
 800eefe:	bd80      	pop	{r7, pc}

0800ef00 <link_speed>:

int link_speed(void){
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b082      	sub	sp, #8
 800ef04:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_status;
	wizphy_getphystat(&phy_status);
 800ef06:	1d3b      	adds	r3, r7, #4
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f7fa fca1 	bl	8009850 <wizphy_getphystat>
	return phy_status.speed;
 800ef0e:	79bb      	ldrb	r3, [r7, #6]
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3708      	adds	r7, #8
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <assigned_ip>:

int assigned_ip(void){
 800ef18:	b480      	push	{r7}
 800ef1a:	af00      	add	r7, sp, #0
	return ip_dhcp_assigned;
 800ef1c:	4b03      	ldr	r3, [pc, #12]	; (800ef2c <assigned_ip+0x14>)
 800ef1e:	781b      	ldrb	r3, [r3, #0]
}
 800ef20:	4618      	mov	r0, r3
 800ef22:	46bd      	mov	sp, r7
 800ef24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef28:	4770      	bx	lr
 800ef2a:	bf00      	nop
 800ef2c:	200014dc 	.word	0x200014dc

0800ef30 <set_ip_aasigned>:

void set_ip_aasigned(void){
 800ef30:	b480      	push	{r7}
 800ef32:	af00      	add	r7, sp, #0
	ip_dhcp_assigned = true;
 800ef34:	4b03      	ldr	r3, [pc, #12]	; (800ef44 <set_ip_aasigned+0x14>)
 800ef36:	2201      	movs	r2, #1
 800ef38:	701a      	strb	r2, [r3, #0]
}
 800ef3a:	bf00      	nop
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef42:	4770      	bx	lr
 800ef44:	200014dc 	.word	0x200014dc

0800ef48 <w5500_init>:

int w5500_init(void)
{
 800ef48:	b590      	push	{r4, r7, lr}
 800ef4a:	b085      	sub	sp, #20
 800ef4c:	af00      	add	r7, sp, #0
  uint8_t W5500FifoSize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2, }, {2, 2, 2, 2, 2, 2, 2, 2}};
 800ef4e:	4b18      	ldr	r3, [pc, #96]	; (800efb0 <w5500_init+0x68>)
 800ef50:	463c      	mov	r4, r7
 800ef52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ef54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ResetON();
 800ef58:	4b16      	ldr	r3, [pc, #88]	; (800efb4 <w5500_init+0x6c>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	4798      	blx	r3
  delay_ms(delay0_5s);
 800ef5e:	4b16      	ldr	r3, [pc, #88]	; (800efb8 <w5500_init+0x70>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ef66:	4798      	blx	r3
  ResetOFF();
 800ef68:	4b14      	ldr	r3, [pc, #80]	; (800efbc <w5500_init+0x74>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	4798      	blx	r3
  delay_ms(delay3s);
 800ef6e:	4b12      	ldr	r3, [pc, #72]	; (800efb8 <w5500_init+0x70>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800ef76:	4798      	blx	r3

  if (ctlwizchip(CW_INIT_WIZCHIP, (void*)W5500FifoSize) == -1)
 800ef78:	463b      	mov	r3, r7
 800ef7a:	4619      	mov	r1, r3
 800ef7c:	2001      	movs	r0, #1
 800ef7e:	f7fa f8d5 	bl	800912c <ctlwizchip>
 800ef82:	4603      	mov	r3, r0
 800ef84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef88:	d102      	bne.n	800ef90 <w5500_init+0x48>
  {
	  return -1;
 800ef8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ef8e:	e00b      	b.n	800efa8 <w5500_init+0x60>
  }

  if (link_status()==PHY_LINK_OFF){
 800ef90:	f7ff ff94 	bl	800eebc <link_status>
 800ef94:	4603      	mov	r3, r0
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d102      	bne.n	800efa0 <w5500_init+0x58>
	   return -1;
 800ef9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ef9e:	e003      	b.n	800efa8 <w5500_init+0x60>
  }

  ip_dhcp_assigned = false;
 800efa0:	4b07      	ldr	r3, [pc, #28]	; (800efc0 <w5500_init+0x78>)
 800efa2:	2200      	movs	r2, #0
 800efa4:	701a      	strb	r2, [r3, #0]
  return 0;
 800efa6:	2300      	movs	r3, #0
}
 800efa8:	4618      	mov	r0, r3
 800efaa:	3714      	adds	r7, #20
 800efac:	46bd      	mov	sp, r7
 800efae:	bd90      	pop	{r4, r7, pc}
 800efb0:	0802192c 	.word	0x0802192c
 800efb4:	200014ec 	.word	0x200014ec
 800efb8:	200014e8 	.word	0x200014e8
 800efbc:	200014f0 	.word	0x200014f0
 800efc0:	200014dc 	.word	0x200014dc

0800efc4 <w5500_delay_cb>:

void w5500_delay_cb(void (*function)(uint32_t time))
{
 800efc4:	b480      	push	{r7}
 800efc6:	b083      	sub	sp, #12
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
	delay_ms = proto_delay_func;
 800efcc:	4b07      	ldr	r3, [pc, #28]	; (800efec <w5500_delay_cb+0x28>)
 800efce:	4a08      	ldr	r2, [pc, #32]	; (800eff0 <w5500_delay_cb+0x2c>)
 800efd0:	601a      	str	r2, [r3, #0]

	if (function){
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d002      	beq.n	800efde <w5500_delay_cb+0x1a>
		delay_ms = function;
 800efd8:	4a04      	ldr	r2, [pc, #16]	; (800efec <w5500_delay_cb+0x28>)
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	6013      	str	r3, [r2, #0]
	}
}
 800efde:	bf00      	nop
 800efe0:	370c      	adds	r7, #12
 800efe2:	46bd      	mov	sp, r7
 800efe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe8:	4770      	bx	lr
 800efea:	bf00      	nop
 800efec:	200014e8 	.word	0x200014e8
 800eff0:	0800ed9b 	.word	0x0800ed9b

0800eff4 <w5500_reset_cb>:

void w5500_reset_cb(void(* reset)(void), void (* unreset)(void)){
 800eff4:	b480      	push	{r7}
 800eff6:	b083      	sub	sp, #12
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
 800effc:	6039      	str	r1, [r7, #0]

	ResetON 	= proto_reset;
 800effe:	4b0c      	ldr	r3, [pc, #48]	; (800f030 <w5500_reset_cb+0x3c>)
 800f000:	4a0c      	ldr	r2, [pc, #48]	; (800f034 <w5500_reset_cb+0x40>)
 800f002:	601a      	str	r2, [r3, #0]
	ResetOFF	= proto_reset;
 800f004:	4b0c      	ldr	r3, [pc, #48]	; (800f038 <w5500_reset_cb+0x44>)
 800f006:	4a0b      	ldr	r2, [pc, #44]	; (800f034 <w5500_reset_cb+0x40>)
 800f008:	601a      	str	r2, [r3, #0]
	if (reset) 	ResetON =  reset;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d002      	beq.n	800f016 <w5500_reset_cb+0x22>
 800f010:	4a07      	ldr	r2, [pc, #28]	; (800f030 <w5500_reset_cb+0x3c>)
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6013      	str	r3, [r2, #0]
	if (unreset)ResetOFF = unreset;
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d002      	beq.n	800f022 <w5500_reset_cb+0x2e>
 800f01c:	4a06      	ldr	r2, [pc, #24]	; (800f038 <w5500_reset_cb+0x44>)
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	6013      	str	r3, [r2, #0]
}
 800f022:	bf00      	nop
 800f024:	370c      	adds	r7, #12
 800f026:	46bd      	mov	sp, r7
 800f028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02c:	4770      	bx	lr
 800f02e:	bf00      	nop
 800f030:	200014ec 	.word	0x200014ec
 800f034:	0800ed8d 	.word	0x0800ed8d
 800f038:	200014f0 	.word	0x200014f0

0800f03c <Eth_reset_on>:
#include "ll_SPI_enh_abstractions.h"

SPI_HandleTypeDef spi_handler;


void Eth_reset_on(void){
 800f03c:	b580      	push	{r7, lr}
 800f03e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_RESET);
 800f040:	2200      	movs	r2, #0
 800f042:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f046:	4802      	ldr	r0, [pc, #8]	; (800f050 <Eth_reset_on+0x14>)
 800f048:	f7f5 ffe2 	bl	8005010 <HAL_GPIO_WritePin>
}
 800f04c:	bf00      	nop
 800f04e:	bd80      	pop	{r7, pc}
 800f050:	40020000 	.word	0x40020000

0800f054 <Eth_reset_off>:

void Eth_reset_off(void){
 800f054:	b580      	push	{r7, lr}
 800f056:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_SET);
 800f058:	2201      	movs	r2, #1
 800f05a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f05e:	4802      	ldr	r0, [pc, #8]	; (800f068 <Eth_reset_off+0x14>)
 800f060:	f7f5 ffd6 	bl	8005010 <HAL_GPIO_WritePin>
}
 800f064:	bf00      	nop
 800f066:	bd80      	pop	{r7, pc}
 800f068:	40020000 	.word	0x40020000

0800f06c <Eth_spi_select>:

void Eth_spi_select(void){
 800f06c:	b580      	push	{r7, lr}
 800f06e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 800f070:	2200      	movs	r2, #0
 800f072:	2140      	movs	r1, #64	; 0x40
 800f074:	4802      	ldr	r0, [pc, #8]	; (800f080 <Eth_spi_select+0x14>)
 800f076:	f7f5 ffcb 	bl	8005010 <HAL_GPIO_WritePin>
}
 800f07a:	bf00      	nop
 800f07c:	bd80      	pop	{r7, pc}
 800f07e:	bf00      	nop
 800f080:	40020400 	.word	0x40020400

0800f084 <Eth_spi_deselect>:

void Eth_spi_deselect(void){
 800f084:	b580      	push	{r7, lr}
 800f086:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 800f088:	2201      	movs	r2, #1
 800f08a:	2140      	movs	r1, #64	; 0x40
 800f08c:	4802      	ldr	r0, [pc, #8]	; (800f098 <Eth_spi_deselect+0x14>)
 800f08e:	f7f5 ffbf 	bl	8005010 <HAL_GPIO_WritePin>
}
 800f092:	bf00      	nop
 800f094:	bd80      	pop	{r7, pc}
 800f096:	bf00      	nop
 800f098:	40020400 	.word	0x40020400

0800f09c <Reg_eth_spi>:

void Reg_eth_spi(SPI_HandleTypeDef hspi){
 800f09c:	b084      	sub	sp, #16
 800f09e:	b580      	push	{r7, lr}
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	f107 0c08 	add.w	ip, r7, #8
 800f0a6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	spi_handler = hspi;
 800f0aa:	4b07      	ldr	r3, [pc, #28]	; (800f0c8 <Reg_eth_spi+0x2c>)
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f107 0308 	add.w	r3, r7, #8
 800f0b2:	2258      	movs	r2, #88	; 0x58
 800f0b4:	4619      	mov	r1, r3
 800f0b6:	f00d f8fc 	bl	801c2b2 <memcpy>
}
 800f0ba:	bf00      	nop
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f0c2:	b004      	add	sp, #16
 800f0c4:	4770      	bx	lr
 800f0c6:	bf00      	nop
 800f0c8:	200014f4 	.word	0x200014f4

0800f0cc <Eth_spi_send_byte>:

void Eth_spi_send_byte(uint8_t byte){
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b082      	sub	sp, #8
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&spi_handler, &byte, 1, 5000);
 800f0d6:	1df9      	adds	r1, r7, #7
 800f0d8:	f241 3388 	movw	r3, #5000	; 0x1388
 800f0dc:	2201      	movs	r2, #1
 800f0de:	4803      	ldr	r0, [pc, #12]	; (800f0ec <Eth_spi_send_byte+0x20>)
 800f0e0:	f7f6 fd03 	bl	8005aea <HAL_SPI_Transmit>
}
 800f0e4:	bf00      	nop
 800f0e6:	3708      	adds	r7, #8
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}
 800f0ec:	200014f4 	.word	0x200014f4

0800f0f0 <Eth_spi_resv_byte>:

uint8_t Eth_spi_resv_byte(void){
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b082      	sub	sp, #8
 800f0f4:	af00      	add	r7, sp, #0
	uint8_t byte;

	HAL_SPI_Receive(&spi_handler, &byte, 1, 5000);
 800f0f6:	1df9      	adds	r1, r7, #7
 800f0f8:	f241 3388 	movw	r3, #5000	; 0x1388
 800f0fc:	2201      	movs	r2, #1
 800f0fe:	4804      	ldr	r0, [pc, #16]	; (800f110 <Eth_spi_resv_byte+0x20>)
 800f100:	f7f6 fe36 	bl	8005d70 <HAL_SPI_Receive>
	return byte;
 800f104:	79fb      	ldrb	r3, [r7, #7]
}
 800f106:	4618      	mov	r0, r3
 800f108:	3708      	adds	r7, #8
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}
 800f10e:	bf00      	nop
 800f110:	200014f4 	.word	0x200014f4

0800f114 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 800f114:	b480      	push	{r7}
 800f116:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 800f118:	bf00      	nop
 800f11a:	46bd      	mov	sp, r7
 800f11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f120:	4770      	bx	lr
	...

0800f124 <__NVIC_SetPriority>:
{
 800f124:	b480      	push	{r7}
 800f126:	b083      	sub	sp, #12
 800f128:	af00      	add	r7, sp, #0
 800f12a:	4603      	mov	r3, r0
 800f12c:	6039      	str	r1, [r7, #0]
 800f12e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f134:	2b00      	cmp	r3, #0
 800f136:	db0a      	blt.n	800f14e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	b2da      	uxtb	r2, r3
 800f13c:	490c      	ldr	r1, [pc, #48]	; (800f170 <__NVIC_SetPriority+0x4c>)
 800f13e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f142:	0112      	lsls	r2, r2, #4
 800f144:	b2d2      	uxtb	r2, r2
 800f146:	440b      	add	r3, r1
 800f148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f14c:	e00a      	b.n	800f164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	b2da      	uxtb	r2, r3
 800f152:	4908      	ldr	r1, [pc, #32]	; (800f174 <__NVIC_SetPriority+0x50>)
 800f154:	79fb      	ldrb	r3, [r7, #7]
 800f156:	f003 030f 	and.w	r3, r3, #15
 800f15a:	3b04      	subs	r3, #4
 800f15c:	0112      	lsls	r2, r2, #4
 800f15e:	b2d2      	uxtb	r2, r2
 800f160:	440b      	add	r3, r1
 800f162:	761a      	strb	r2, [r3, #24]
}
 800f164:	bf00      	nop
 800f166:	370c      	adds	r7, #12
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr
 800f170:	e000e100 	.word	0xe000e100
 800f174:	e000ed00 	.word	0xe000ed00

0800f178 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f178:	b580      	push	{r7, lr}
 800f17a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f17c:	4b05      	ldr	r3, [pc, #20]	; (800f194 <SysTick_Handler+0x1c>)
 800f17e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f180:	f002 fbbe 	bl	8011900 <xTaskGetSchedulerState>
 800f184:	4603      	mov	r3, r0
 800f186:	2b01      	cmp	r3, #1
 800f188:	d001      	beq.n	800f18e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f18a:	f003 faa5 	bl	80126d8 <xPortSysTickHandler>
  }
}
 800f18e:	bf00      	nop
 800f190:	bd80      	pop	{r7, pc}
 800f192:	bf00      	nop
 800f194:	e000e010 	.word	0xe000e010

0800f198 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f198:	b580      	push	{r7, lr}
 800f19a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f19c:	2100      	movs	r1, #0
 800f19e:	f06f 0004 	mvn.w	r0, #4
 800f1a2:	f7ff ffbf 	bl	800f124 <__NVIC_SetPriority>
#endif
}
 800f1a6:	bf00      	nop
 800f1a8:	bd80      	pop	{r7, pc}
	...

0800f1ac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f1ac:	b480      	push	{r7}
 800f1ae:	b083      	sub	sp, #12
 800f1b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f1b2:	f3ef 8305 	mrs	r3, IPSR
 800f1b6:	603b      	str	r3, [r7, #0]
  return(result);
 800f1b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d003      	beq.n	800f1c6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f1be:	f06f 0305 	mvn.w	r3, #5
 800f1c2:	607b      	str	r3, [r7, #4]
 800f1c4:	e00c      	b.n	800f1e0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f1c6:	4b0a      	ldr	r3, [pc, #40]	; (800f1f0 <osKernelInitialize+0x44>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d105      	bne.n	800f1da <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f1ce:	4b08      	ldr	r3, [pc, #32]	; (800f1f0 <osKernelInitialize+0x44>)
 800f1d0:	2201      	movs	r2, #1
 800f1d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	607b      	str	r3, [r7, #4]
 800f1d8:	e002      	b.n	800f1e0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f1da:	f04f 33ff 	mov.w	r3, #4294967295
 800f1de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f1e0:	687b      	ldr	r3, [r7, #4]
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	370c      	adds	r7, #12
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ec:	4770      	bx	lr
 800f1ee:	bf00      	nop
 800f1f0:	2000154c 	.word	0x2000154c

0800f1f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b082      	sub	sp, #8
 800f1f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f1fa:	f3ef 8305 	mrs	r3, IPSR
 800f1fe:	603b      	str	r3, [r7, #0]
  return(result);
 800f200:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f202:	2b00      	cmp	r3, #0
 800f204:	d003      	beq.n	800f20e <osKernelStart+0x1a>
    stat = osErrorISR;
 800f206:	f06f 0305 	mvn.w	r3, #5
 800f20a:	607b      	str	r3, [r7, #4]
 800f20c:	e010      	b.n	800f230 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f20e:	4b0b      	ldr	r3, [pc, #44]	; (800f23c <osKernelStart+0x48>)
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	2b01      	cmp	r3, #1
 800f214:	d109      	bne.n	800f22a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f216:	f7ff ffbf 	bl	800f198 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f21a:	4b08      	ldr	r3, [pc, #32]	; (800f23c <osKernelStart+0x48>)
 800f21c:	2202      	movs	r2, #2
 800f21e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f220:	f001 feca 	bl	8010fb8 <vTaskStartScheduler>
      stat = osOK;
 800f224:	2300      	movs	r3, #0
 800f226:	607b      	str	r3, [r7, #4]
 800f228:	e002      	b.n	800f230 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f22a:	f04f 33ff 	mov.w	r3, #4294967295
 800f22e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f230:	687b      	ldr	r3, [r7, #4]
}
 800f232:	4618      	mov	r0, r3
 800f234:	3708      	adds	r7, #8
 800f236:	46bd      	mov	sp, r7
 800f238:	bd80      	pop	{r7, pc}
 800f23a:	bf00      	nop
 800f23c:	2000154c 	.word	0x2000154c

0800f240 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f240:	b580      	push	{r7, lr}
 800f242:	b08e      	sub	sp, #56	; 0x38
 800f244:	af04      	add	r7, sp, #16
 800f246:	60f8      	str	r0, [r7, #12]
 800f248:	60b9      	str	r1, [r7, #8]
 800f24a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f24c:	2300      	movs	r3, #0
 800f24e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f250:	f3ef 8305 	mrs	r3, IPSR
 800f254:	617b      	str	r3, [r7, #20]
  return(result);
 800f256:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d17e      	bne.n	800f35a <osThreadNew+0x11a>
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d07b      	beq.n	800f35a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f262:	2380      	movs	r3, #128	; 0x80
 800f264:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f266:	2318      	movs	r3, #24
 800f268:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f26a:	2300      	movs	r3, #0
 800f26c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800f26e:	f04f 33ff 	mov.w	r3, #4294967295
 800f272:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d045      	beq.n	800f306 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d002      	beq.n	800f288 <osThreadNew+0x48>
        name = attr->name;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	699b      	ldr	r3, [r3, #24]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d002      	beq.n	800f296 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	699b      	ldr	r3, [r3, #24]
 800f294:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f296:	69fb      	ldr	r3, [r7, #28]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d008      	beq.n	800f2ae <osThreadNew+0x6e>
 800f29c:	69fb      	ldr	r3, [r7, #28]
 800f29e:	2b38      	cmp	r3, #56	; 0x38
 800f2a0:	d805      	bhi.n	800f2ae <osThreadNew+0x6e>
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	685b      	ldr	r3, [r3, #4]
 800f2a6:	f003 0301 	and.w	r3, r3, #1
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d001      	beq.n	800f2b2 <osThreadNew+0x72>
        return (NULL);
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	e054      	b.n	800f35c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	695b      	ldr	r3, [r3, #20]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d003      	beq.n	800f2c2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	695b      	ldr	r3, [r3, #20]
 800f2be:	089b      	lsrs	r3, r3, #2
 800f2c0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	689b      	ldr	r3, [r3, #8]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d00e      	beq.n	800f2e8 <osThreadNew+0xa8>
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	68db      	ldr	r3, [r3, #12]
 800f2ce:	2ba7      	cmp	r3, #167	; 0xa7
 800f2d0:	d90a      	bls.n	800f2e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d006      	beq.n	800f2e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	695b      	ldr	r3, [r3, #20]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d002      	beq.n	800f2e8 <osThreadNew+0xa8>
        mem = 1;
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	61bb      	str	r3, [r7, #24]
 800f2e6:	e010      	b.n	800f30a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	689b      	ldr	r3, [r3, #8]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d10c      	bne.n	800f30a <osThreadNew+0xca>
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	68db      	ldr	r3, [r3, #12]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d108      	bne.n	800f30a <osThreadNew+0xca>
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	691b      	ldr	r3, [r3, #16]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d104      	bne.n	800f30a <osThreadNew+0xca>
          mem = 0;
 800f300:	2300      	movs	r3, #0
 800f302:	61bb      	str	r3, [r7, #24]
 800f304:	e001      	b.n	800f30a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f306:	2300      	movs	r3, #0
 800f308:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f30a:	69bb      	ldr	r3, [r7, #24]
 800f30c:	2b01      	cmp	r3, #1
 800f30e:	d110      	bne.n	800f332 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f314:	687a      	ldr	r2, [r7, #4]
 800f316:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f318:	9202      	str	r2, [sp, #8]
 800f31a:	9301      	str	r3, [sp, #4]
 800f31c:	69fb      	ldr	r3, [r7, #28]
 800f31e:	9300      	str	r3, [sp, #0]
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	6a3a      	ldr	r2, [r7, #32]
 800f324:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f326:	68f8      	ldr	r0, [r7, #12]
 800f328:	f001 fc5a 	bl	8010be0 <xTaskCreateStatic>
 800f32c:	4603      	mov	r3, r0
 800f32e:	613b      	str	r3, [r7, #16]
 800f330:	e013      	b.n	800f35a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f332:	69bb      	ldr	r3, [r7, #24]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d110      	bne.n	800f35a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f338:	6a3b      	ldr	r3, [r7, #32]
 800f33a:	b29a      	uxth	r2, r3
 800f33c:	f107 0310 	add.w	r3, r7, #16
 800f340:	9301      	str	r3, [sp, #4]
 800f342:	69fb      	ldr	r3, [r7, #28]
 800f344:	9300      	str	r3, [sp, #0]
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f34a:	68f8      	ldr	r0, [r7, #12]
 800f34c:	f001 fca5 	bl	8010c9a <xTaskCreate>
 800f350:	4603      	mov	r3, r0
 800f352:	2b01      	cmp	r3, #1
 800f354:	d001      	beq.n	800f35a <osThreadNew+0x11a>
            hTask = NULL;
 800f356:	2300      	movs	r3, #0
 800f358:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f35a:	693b      	ldr	r3, [r7, #16]
}
 800f35c:	4618      	mov	r0, r3
 800f35e:	3728      	adds	r7, #40	; 0x28
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}

0800f364 <osThreadGetStackSpace>:
  }

  return (state);
}

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 800f364:	b580      	push	{r7, lr}
 800f366:	b086      	sub	sp, #24
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f370:	f3ef 8305 	mrs	r3, IPSR
 800f374:	60fb      	str	r3, [r7, #12]
  return(result);
 800f376:	68fb      	ldr	r3, [r7, #12]
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d102      	bne.n	800f382 <osThreadGetStackSpace+0x1e>
 800f37c:	693b      	ldr	r3, [r7, #16]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d102      	bne.n	800f388 <osThreadGetStackSpace+0x24>
    sz = 0U;
 800f382:	2300      	movs	r3, #0
 800f384:	617b      	str	r3, [r7, #20]
 800f386:	e005      	b.n	800f394 <osThreadGetStackSpace+0x30>
  } else {
    sz = (uint32_t)(uxTaskGetStackHighWaterMark(hTask) * sizeof(StackType_t));
 800f388:	6938      	ldr	r0, [r7, #16]
 800f38a:	f002 fa39 	bl	8011800 <uxTaskGetStackHighWaterMark>
 800f38e:	4603      	mov	r3, r0
 800f390:	009b      	lsls	r3, r3, #2
 800f392:	617b      	str	r3, [r7, #20]
  }

  return (sz);
 800f394:	697b      	ldr	r3, [r7, #20]
}
 800f396:	4618      	mov	r0, r3
 800f398:	3718      	adds	r7, #24
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd80      	pop	{r7, pc}
	...

0800f3a0 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800f3a0:	b480      	push	{r7}
 800f3a2:	b083      	sub	sp, #12
 800f3a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f3a6:	f3ef 8305 	mrs	r3, IPSR
 800f3aa:	603b      	str	r3, [r7, #0]
  return(result);
 800f3ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d003      	beq.n	800f3ba <osThreadYield+0x1a>
    stat = osErrorISR;
 800f3b2:	f06f 0305 	mvn.w	r3, #5
 800f3b6:	607b      	str	r3, [r7, #4]
 800f3b8:	e009      	b.n	800f3ce <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800f3be:	4b07      	ldr	r3, [pc, #28]	; (800f3dc <osThreadYield+0x3c>)
 800f3c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3c4:	601a      	str	r2, [r3, #0]
 800f3c6:	f3bf 8f4f 	dsb	sy
 800f3ca:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800f3ce:	687b      	ldr	r3, [r7, #4]
}
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	370c      	adds	r7, #12
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3da:	4770      	bx	lr
 800f3dc:	e000ed04 	.word	0xe000ed04

0800f3e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b084      	sub	sp, #16
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f3e8:	f3ef 8305 	mrs	r3, IPSR
 800f3ec:	60bb      	str	r3, [r7, #8]
  return(result);
 800f3ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d003      	beq.n	800f3fc <osDelay+0x1c>
    stat = osErrorISR;
 800f3f4:	f06f 0305 	mvn.w	r3, #5
 800f3f8:	60fb      	str	r3, [r7, #12]
 800f3fa:	e007      	b.n	800f40c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d002      	beq.n	800f40c <osDelay+0x2c>
      vTaskDelay(ticks);
 800f406:	6878      	ldr	r0, [r7, #4]
 800f408:	f001 fda2 	bl	8010f50 <vTaskDelay>
    }
  }

  return (stat);
 800f40c:	68fb      	ldr	r3, [r7, #12]
}
 800f40e:	4618      	mov	r0, r3
 800f410:	3710      	adds	r7, #16
 800f412:	46bd      	mov	sp, r7
 800f414:	bd80      	pop	{r7, pc}

0800f416 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800f416:	b580      	push	{r7, lr}
 800f418:	b088      	sub	sp, #32
 800f41a:	af00      	add	r7, sp, #0
 800f41c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800f41e:	2300      	movs	r3, #0
 800f420:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f422:	f3ef 8305 	mrs	r3, IPSR
 800f426:	60bb      	str	r3, [r7, #8]
  return(result);
 800f428:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d174      	bne.n	800f518 <osMutexNew+0x102>
    if (attr != NULL) {
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d003      	beq.n	800f43c <osMutexNew+0x26>
      type = attr->attr_bits;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	685b      	ldr	r3, [r3, #4]
 800f438:	61bb      	str	r3, [r7, #24]
 800f43a:	e001      	b.n	800f440 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800f43c:	2300      	movs	r3, #0
 800f43e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800f440:	69bb      	ldr	r3, [r7, #24]
 800f442:	f003 0301 	and.w	r3, r3, #1
 800f446:	2b00      	cmp	r3, #0
 800f448:	d002      	beq.n	800f450 <osMutexNew+0x3a>
      rmtx = 1U;
 800f44a:	2301      	movs	r3, #1
 800f44c:	617b      	str	r3, [r7, #20]
 800f44e:	e001      	b.n	800f454 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800f450:	2300      	movs	r3, #0
 800f452:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800f454:	69bb      	ldr	r3, [r7, #24]
 800f456:	f003 0308 	and.w	r3, r3, #8
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d15c      	bne.n	800f518 <osMutexNew+0x102>
      mem = -1;
 800f45e:	f04f 33ff 	mov.w	r3, #4294967295
 800f462:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d015      	beq.n	800f496 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	689b      	ldr	r3, [r3, #8]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d006      	beq.n	800f480 <osMutexNew+0x6a>
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	68db      	ldr	r3, [r3, #12]
 800f476:	2b4f      	cmp	r3, #79	; 0x4f
 800f478:	d902      	bls.n	800f480 <osMutexNew+0x6a>
          mem = 1;
 800f47a:	2301      	movs	r3, #1
 800f47c:	613b      	str	r3, [r7, #16]
 800f47e:	e00c      	b.n	800f49a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	689b      	ldr	r3, [r3, #8]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d108      	bne.n	800f49a <osMutexNew+0x84>
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	68db      	ldr	r3, [r3, #12]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d104      	bne.n	800f49a <osMutexNew+0x84>
            mem = 0;
 800f490:	2300      	movs	r3, #0
 800f492:	613b      	str	r3, [r7, #16]
 800f494:	e001      	b.n	800f49a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800f496:	2300      	movs	r3, #0
 800f498:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800f49a:	693b      	ldr	r3, [r7, #16]
 800f49c:	2b01      	cmp	r3, #1
 800f49e:	d112      	bne.n	800f4c6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d007      	beq.n	800f4b6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	689b      	ldr	r3, [r3, #8]
 800f4aa:	4619      	mov	r1, r3
 800f4ac:	2004      	movs	r0, #4
 800f4ae:	f000 fc68 	bl	800fd82 <xQueueCreateMutexStatic>
 800f4b2:	61f8      	str	r0, [r7, #28]
 800f4b4:	e016      	b.n	800f4e4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	689b      	ldr	r3, [r3, #8]
 800f4ba:	4619      	mov	r1, r3
 800f4bc:	2001      	movs	r0, #1
 800f4be:	f000 fc60 	bl	800fd82 <xQueueCreateMutexStatic>
 800f4c2:	61f8      	str	r0, [r7, #28]
 800f4c4:	e00e      	b.n	800f4e4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d10b      	bne.n	800f4e4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800f4cc:	697b      	ldr	r3, [r7, #20]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d004      	beq.n	800f4dc <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800f4d2:	2004      	movs	r0, #4
 800f4d4:	f000 fc3d 	bl	800fd52 <xQueueCreateMutex>
 800f4d8:	61f8      	str	r0, [r7, #28]
 800f4da:	e003      	b.n	800f4e4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800f4dc:	2001      	movs	r0, #1
 800f4de:	f000 fc38 	bl	800fd52 <xQueueCreateMutex>
 800f4e2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800f4e4:	69fb      	ldr	r3, [r7, #28]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d00c      	beq.n	800f504 <osMutexNew+0xee>
        if (attr != NULL) {
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d003      	beq.n	800f4f8 <osMutexNew+0xe2>
          name = attr->name;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	60fb      	str	r3, [r7, #12]
 800f4f6:	e001      	b.n	800f4fc <osMutexNew+0xe6>
        } else {
          name = NULL;
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800f4fc:	68f9      	ldr	r1, [r7, #12]
 800f4fe:	69f8      	ldr	r0, [r7, #28]
 800f500:	f001 fb10 	bl	8010b24 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800f504:	69fb      	ldr	r3, [r7, #28]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d006      	beq.n	800f518 <osMutexNew+0x102>
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d003      	beq.n	800f518 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800f510:	69fb      	ldr	r3, [r7, #28]
 800f512:	f043 0301 	orr.w	r3, r3, #1
 800f516:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800f518:	69fb      	ldr	r3, [r7, #28]
}
 800f51a:	4618      	mov	r0, r3
 800f51c:	3720      	adds	r7, #32
 800f51e:	46bd      	mov	sp, r7
 800f520:	bd80      	pop	{r7, pc}

0800f522 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800f522:	b580      	push	{r7, lr}
 800f524:	b086      	sub	sp, #24
 800f526:	af00      	add	r7, sp, #0
 800f528:	6078      	str	r0, [r7, #4]
 800f52a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	f023 0301 	bic.w	r3, r3, #1
 800f532:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f003 0301 	and.w	r3, r3, #1
 800f53a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800f53c:	2300      	movs	r3, #0
 800f53e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f540:	f3ef 8305 	mrs	r3, IPSR
 800f544:	60bb      	str	r3, [r7, #8]
  return(result);
 800f546:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d003      	beq.n	800f554 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800f54c:	f06f 0305 	mvn.w	r3, #5
 800f550:	617b      	str	r3, [r7, #20]
 800f552:	e02c      	b.n	800f5ae <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800f554:	693b      	ldr	r3, [r7, #16]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d103      	bne.n	800f562 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800f55a:	f06f 0303 	mvn.w	r3, #3
 800f55e:	617b      	str	r3, [r7, #20]
 800f560:	e025      	b.n	800f5ae <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d011      	beq.n	800f58c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800f568:	6839      	ldr	r1, [r7, #0]
 800f56a:	6938      	ldr	r0, [r7, #16]
 800f56c:	f000 fc58 	bl	800fe20 <xQueueTakeMutexRecursive>
 800f570:	4603      	mov	r3, r0
 800f572:	2b01      	cmp	r3, #1
 800f574:	d01b      	beq.n	800f5ae <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d003      	beq.n	800f584 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800f57c:	f06f 0301 	mvn.w	r3, #1
 800f580:	617b      	str	r3, [r7, #20]
 800f582:	e014      	b.n	800f5ae <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800f584:	f06f 0302 	mvn.w	r3, #2
 800f588:	617b      	str	r3, [r7, #20]
 800f58a:	e010      	b.n	800f5ae <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800f58c:	6839      	ldr	r1, [r7, #0]
 800f58e:	6938      	ldr	r0, [r7, #16]
 800f590:	f000 fef6 	bl	8010380 <xQueueSemaphoreTake>
 800f594:	4603      	mov	r3, r0
 800f596:	2b01      	cmp	r3, #1
 800f598:	d009      	beq.n	800f5ae <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d003      	beq.n	800f5a8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800f5a0:	f06f 0301 	mvn.w	r3, #1
 800f5a4:	617b      	str	r3, [r7, #20]
 800f5a6:	e002      	b.n	800f5ae <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800f5a8:	f06f 0302 	mvn.w	r3, #2
 800f5ac:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800f5ae:	697b      	ldr	r3, [r7, #20]
}
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	3718      	adds	r7, #24
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bd80      	pop	{r7, pc}

0800f5b8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b086      	sub	sp, #24
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f023 0301 	bic.w	r3, r3, #1
 800f5c6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f003 0301 	and.w	r3, r3, #1
 800f5ce:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f5d4:	f3ef 8305 	mrs	r3, IPSR
 800f5d8:	60bb      	str	r3, [r7, #8]
  return(result);
 800f5da:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d003      	beq.n	800f5e8 <osMutexRelease+0x30>
    stat = osErrorISR;
 800f5e0:	f06f 0305 	mvn.w	r3, #5
 800f5e4:	617b      	str	r3, [r7, #20]
 800f5e6:	e01f      	b.n	800f628 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800f5e8:	693b      	ldr	r3, [r7, #16]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d103      	bne.n	800f5f6 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800f5ee:	f06f 0303 	mvn.w	r3, #3
 800f5f2:	617b      	str	r3, [r7, #20]
 800f5f4:	e018      	b.n	800f628 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d009      	beq.n	800f610 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800f5fc:	6938      	ldr	r0, [r7, #16]
 800f5fe:	f000 fbdb 	bl	800fdb8 <xQueueGiveMutexRecursive>
 800f602:	4603      	mov	r3, r0
 800f604:	2b01      	cmp	r3, #1
 800f606:	d00f      	beq.n	800f628 <osMutexRelease+0x70>
        stat = osErrorResource;
 800f608:	f06f 0302 	mvn.w	r3, #2
 800f60c:	617b      	str	r3, [r7, #20]
 800f60e:	e00b      	b.n	800f628 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800f610:	2300      	movs	r3, #0
 800f612:	2200      	movs	r2, #0
 800f614:	2100      	movs	r1, #0
 800f616:	6938      	ldr	r0, [r7, #16]
 800f618:	f000 fc38 	bl	800fe8c <xQueueGenericSend>
 800f61c:	4603      	mov	r3, r0
 800f61e:	2b01      	cmp	r3, #1
 800f620:	d002      	beq.n	800f628 <osMutexRelease+0x70>
        stat = osErrorResource;
 800f622:	f06f 0302 	mvn.w	r3, #2
 800f626:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f628:	697b      	ldr	r3, [r7, #20]
}
 800f62a:	4618      	mov	r0, r3
 800f62c:	3718      	adds	r7, #24
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}

0800f632 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f632:	b580      	push	{r7, lr}
 800f634:	b08a      	sub	sp, #40	; 0x28
 800f636:	af02      	add	r7, sp, #8
 800f638:	60f8      	str	r0, [r7, #12]
 800f63a:	60b9      	str	r1, [r7, #8]
 800f63c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f63e:	2300      	movs	r3, #0
 800f640:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f642:	f3ef 8305 	mrs	r3, IPSR
 800f646:	613b      	str	r3, [r7, #16]
  return(result);
 800f648:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d15f      	bne.n	800f70e <osMessageQueueNew+0xdc>
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d05c      	beq.n	800f70e <osMessageQueueNew+0xdc>
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d059      	beq.n	800f70e <osMessageQueueNew+0xdc>
    mem = -1;
 800f65a:	f04f 33ff 	mov.w	r3, #4294967295
 800f65e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d029      	beq.n	800f6ba <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	689b      	ldr	r3, [r3, #8]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d012      	beq.n	800f694 <osMessageQueueNew+0x62>
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	68db      	ldr	r3, [r3, #12]
 800f672:	2b4f      	cmp	r3, #79	; 0x4f
 800f674:	d90e      	bls.n	800f694 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d00a      	beq.n	800f694 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	695a      	ldr	r2, [r3, #20]
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	68b9      	ldr	r1, [r7, #8]
 800f686:	fb01 f303 	mul.w	r3, r1, r3
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d302      	bcc.n	800f694 <osMessageQueueNew+0x62>
        mem = 1;
 800f68e:	2301      	movs	r3, #1
 800f690:	61bb      	str	r3, [r7, #24]
 800f692:	e014      	b.n	800f6be <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	689b      	ldr	r3, [r3, #8]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d110      	bne.n	800f6be <osMessageQueueNew+0x8c>
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	68db      	ldr	r3, [r3, #12]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d10c      	bne.n	800f6be <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d108      	bne.n	800f6be <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	695b      	ldr	r3, [r3, #20]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d104      	bne.n	800f6be <osMessageQueueNew+0x8c>
          mem = 0;
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	61bb      	str	r3, [r7, #24]
 800f6b8:	e001      	b.n	800f6be <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f6be:	69bb      	ldr	r3, [r7, #24]
 800f6c0:	2b01      	cmp	r3, #1
 800f6c2:	d10b      	bne.n	800f6dc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	691a      	ldr	r2, [r3, #16]
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	689b      	ldr	r3, [r3, #8]
 800f6cc:	2100      	movs	r1, #0
 800f6ce:	9100      	str	r1, [sp, #0]
 800f6d0:	68b9      	ldr	r1, [r7, #8]
 800f6d2:	68f8      	ldr	r0, [r7, #12]
 800f6d4:	f000 fa4e 	bl	800fb74 <xQueueGenericCreateStatic>
 800f6d8:	61f8      	str	r0, [r7, #28]
 800f6da:	e008      	b.n	800f6ee <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800f6dc:	69bb      	ldr	r3, [r7, #24]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d105      	bne.n	800f6ee <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	68b9      	ldr	r1, [r7, #8]
 800f6e6:	68f8      	ldr	r0, [r7, #12]
 800f6e8:	f000 fabc 	bl	800fc64 <xQueueGenericCreate>
 800f6ec:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f6ee:	69fb      	ldr	r3, [r7, #28]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d00c      	beq.n	800f70e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d003      	beq.n	800f702 <osMessageQueueNew+0xd0>
        name = attr->name;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	617b      	str	r3, [r7, #20]
 800f700:	e001      	b.n	800f706 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800f702:	2300      	movs	r3, #0
 800f704:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800f706:	6979      	ldr	r1, [r7, #20]
 800f708:	69f8      	ldr	r0, [r7, #28]
 800f70a:	f001 fa0b 	bl	8010b24 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f70e:	69fb      	ldr	r3, [r7, #28]
}
 800f710:	4618      	mov	r0, r3
 800f712:	3720      	adds	r7, #32
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}

0800f718 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f718:	b580      	push	{r7, lr}
 800f71a:	b088      	sub	sp, #32
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	60f8      	str	r0, [r7, #12]
 800f720:	60b9      	str	r1, [r7, #8]
 800f722:	603b      	str	r3, [r7, #0]
 800f724:	4613      	mov	r3, r2
 800f726:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f72c:	2300      	movs	r3, #0
 800f72e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f730:	f3ef 8305 	mrs	r3, IPSR
 800f734:	617b      	str	r3, [r7, #20]
  return(result);
 800f736:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d028      	beq.n	800f78e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f73c:	69bb      	ldr	r3, [r7, #24]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d005      	beq.n	800f74e <osMessageQueuePut+0x36>
 800f742:	68bb      	ldr	r3, [r7, #8]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d002      	beq.n	800f74e <osMessageQueuePut+0x36>
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d003      	beq.n	800f756 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800f74e:	f06f 0303 	mvn.w	r3, #3
 800f752:	61fb      	str	r3, [r7, #28]
 800f754:	e038      	b.n	800f7c8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800f756:	2300      	movs	r3, #0
 800f758:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f75a:	f107 0210 	add.w	r2, r7, #16
 800f75e:	2300      	movs	r3, #0
 800f760:	68b9      	ldr	r1, [r7, #8]
 800f762:	69b8      	ldr	r0, [r7, #24]
 800f764:	f000 fc90 	bl	8010088 <xQueueGenericSendFromISR>
 800f768:	4603      	mov	r3, r0
 800f76a:	2b01      	cmp	r3, #1
 800f76c:	d003      	beq.n	800f776 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800f76e:	f06f 0302 	mvn.w	r3, #2
 800f772:	61fb      	str	r3, [r7, #28]
 800f774:	e028      	b.n	800f7c8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800f776:	693b      	ldr	r3, [r7, #16]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d025      	beq.n	800f7c8 <osMessageQueuePut+0xb0>
 800f77c:	4b15      	ldr	r3, [pc, #84]	; (800f7d4 <osMessageQueuePut+0xbc>)
 800f77e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f782:	601a      	str	r2, [r3, #0]
 800f784:	f3bf 8f4f 	dsb	sy
 800f788:	f3bf 8f6f 	isb	sy
 800f78c:	e01c      	b.n	800f7c8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f78e:	69bb      	ldr	r3, [r7, #24]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d002      	beq.n	800f79a <osMessageQueuePut+0x82>
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d103      	bne.n	800f7a2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800f79a:	f06f 0303 	mvn.w	r3, #3
 800f79e:	61fb      	str	r3, [r7, #28]
 800f7a0:	e012      	b.n	800f7c8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	683a      	ldr	r2, [r7, #0]
 800f7a6:	68b9      	ldr	r1, [r7, #8]
 800f7a8:	69b8      	ldr	r0, [r7, #24]
 800f7aa:	f000 fb6f 	bl	800fe8c <xQueueGenericSend>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	2b01      	cmp	r3, #1
 800f7b2:	d009      	beq.n	800f7c8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d003      	beq.n	800f7c2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800f7ba:	f06f 0301 	mvn.w	r3, #1
 800f7be:	61fb      	str	r3, [r7, #28]
 800f7c0:	e002      	b.n	800f7c8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800f7c2:	f06f 0302 	mvn.w	r3, #2
 800f7c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f7c8:	69fb      	ldr	r3, [r7, #28]
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3720      	adds	r7, #32
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}
 800f7d2:	bf00      	nop
 800f7d4:	e000ed04 	.word	0xe000ed04

0800f7d8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b088      	sub	sp, #32
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	60f8      	str	r0, [r7, #12]
 800f7e0:	60b9      	str	r1, [r7, #8]
 800f7e2:	607a      	str	r2, [r7, #4]
 800f7e4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f7ee:	f3ef 8305 	mrs	r3, IPSR
 800f7f2:	617b      	str	r3, [r7, #20]
  return(result);
 800f7f4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d028      	beq.n	800f84c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f7fa:	69bb      	ldr	r3, [r7, #24]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d005      	beq.n	800f80c <osMessageQueueGet+0x34>
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d002      	beq.n	800f80c <osMessageQueueGet+0x34>
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d003      	beq.n	800f814 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800f80c:	f06f 0303 	mvn.w	r3, #3
 800f810:	61fb      	str	r3, [r7, #28]
 800f812:	e037      	b.n	800f884 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800f814:	2300      	movs	r3, #0
 800f816:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f818:	f107 0310 	add.w	r3, r7, #16
 800f81c:	461a      	mov	r2, r3
 800f81e:	68b9      	ldr	r1, [r7, #8]
 800f820:	69b8      	ldr	r0, [r7, #24]
 800f822:	f000 ff9b 	bl	801075c <xQueueReceiveFromISR>
 800f826:	4603      	mov	r3, r0
 800f828:	2b01      	cmp	r3, #1
 800f82a:	d003      	beq.n	800f834 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800f82c:	f06f 0302 	mvn.w	r3, #2
 800f830:	61fb      	str	r3, [r7, #28]
 800f832:	e027      	b.n	800f884 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d024      	beq.n	800f884 <osMessageQueueGet+0xac>
 800f83a:	4b15      	ldr	r3, [pc, #84]	; (800f890 <osMessageQueueGet+0xb8>)
 800f83c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f840:	601a      	str	r2, [r3, #0]
 800f842:	f3bf 8f4f 	dsb	sy
 800f846:	f3bf 8f6f 	isb	sy
 800f84a:	e01b      	b.n	800f884 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f84c:	69bb      	ldr	r3, [r7, #24]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d002      	beq.n	800f858 <osMessageQueueGet+0x80>
 800f852:	68bb      	ldr	r3, [r7, #8]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d103      	bne.n	800f860 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800f858:	f06f 0303 	mvn.w	r3, #3
 800f85c:	61fb      	str	r3, [r7, #28]
 800f85e:	e011      	b.n	800f884 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f860:	683a      	ldr	r2, [r7, #0]
 800f862:	68b9      	ldr	r1, [r7, #8]
 800f864:	69b8      	ldr	r0, [r7, #24]
 800f866:	f000 fcab 	bl	80101c0 <xQueueReceive>
 800f86a:	4603      	mov	r3, r0
 800f86c:	2b01      	cmp	r3, #1
 800f86e:	d009      	beq.n	800f884 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d003      	beq.n	800f87e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800f876:	f06f 0301 	mvn.w	r3, #1
 800f87a:	61fb      	str	r3, [r7, #28]
 800f87c:	e002      	b.n	800f884 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800f87e:	f06f 0302 	mvn.w	r3, #2
 800f882:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f884:	69fb      	ldr	r3, [r7, #28]
}
 800f886:	4618      	mov	r0, r3
 800f888:	3720      	adds	r7, #32
 800f88a:	46bd      	mov	sp, r7
 800f88c:	bd80      	pop	{r7, pc}
 800f88e:	bf00      	nop
 800f890:	e000ed04 	.word	0xe000ed04

0800f894 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800f894:	b580      	push	{r7, lr}
 800f896:	b086      	sub	sp, #24
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800f8a0:	693b      	ldr	r3, [r7, #16]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d102      	bne.n	800f8ac <osMessageQueueGetCount+0x18>
    count = 0U;
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	617b      	str	r3, [r7, #20]
 800f8aa:	e00e      	b.n	800f8ca <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f8ac:	f3ef 8305 	mrs	r3, IPSR
 800f8b0:	60fb      	str	r3, [r7, #12]
  return(result);
 800f8b2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d004      	beq.n	800f8c2 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800f8b8:	6938      	ldr	r0, [r7, #16]
 800f8ba:	f000 ffed 	bl	8010898 <uxQueueMessagesWaitingFromISR>
 800f8be:	6178      	str	r0, [r7, #20]
 800f8c0:	e003      	b.n	800f8ca <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800f8c2:	6938      	ldr	r0, [r7, #16]
 800f8c4:	f000 ffca 	bl	801085c <uxQueueMessagesWaiting>
 800f8c8:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800f8ca:	697b      	ldr	r3, [r7, #20]
}
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	3718      	adds	r7, #24
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}

0800f8d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f8d4:	b480      	push	{r7}
 800f8d6:	b085      	sub	sp, #20
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	60f8      	str	r0, [r7, #12]
 800f8dc:	60b9      	str	r1, [r7, #8]
 800f8de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	4a07      	ldr	r2, [pc, #28]	; (800f900 <vApplicationGetIdleTaskMemory+0x2c>)
 800f8e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	4a06      	ldr	r2, [pc, #24]	; (800f904 <vApplicationGetIdleTaskMemory+0x30>)
 800f8ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	2280      	movs	r2, #128	; 0x80
 800f8f0:	601a      	str	r2, [r3, #0]
}
 800f8f2:	bf00      	nop
 800f8f4:	3714      	adds	r7, #20
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fc:	4770      	bx	lr
 800f8fe:	bf00      	nop
 800f900:	20001550 	.word	0x20001550
 800f904:	200015f8 	.word	0x200015f8

0800f908 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f908:	b480      	push	{r7}
 800f90a:	b085      	sub	sp, #20
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	60f8      	str	r0, [r7, #12]
 800f910:	60b9      	str	r1, [r7, #8]
 800f912:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	4a07      	ldr	r2, [pc, #28]	; (800f934 <vApplicationGetTimerTaskMemory+0x2c>)
 800f918:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	4a06      	ldr	r2, [pc, #24]	; (800f938 <vApplicationGetTimerTaskMemory+0x30>)
 800f91e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f926:	601a      	str	r2, [r3, #0]
}
 800f928:	bf00      	nop
 800f92a:	3714      	adds	r7, #20
 800f92c:	46bd      	mov	sp, r7
 800f92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f932:	4770      	bx	lr
 800f934:	200017f8 	.word	0x200017f8
 800f938:	200018a0 	.word	0x200018a0

0800f93c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f93c:	b480      	push	{r7}
 800f93e:	b083      	sub	sp, #12
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f103 0208 	add.w	r2, r3, #8
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f04f 32ff 	mov.w	r2, #4294967295
 800f954:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f103 0208 	add.w	r2, r3, #8
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	f103 0208 	add.w	r2, r3, #8
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	2200      	movs	r2, #0
 800f96e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f970:	bf00      	nop
 800f972:	370c      	adds	r7, #12
 800f974:	46bd      	mov	sp, r7
 800f976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97a:	4770      	bx	lr

0800f97c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f97c:	b480      	push	{r7}
 800f97e:	b083      	sub	sp, #12
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2200      	movs	r2, #0
 800f988:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f98a:	bf00      	nop
 800f98c:	370c      	adds	r7, #12
 800f98e:	46bd      	mov	sp, r7
 800f990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f994:	4770      	bx	lr

0800f996 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f996:	b480      	push	{r7}
 800f998:	b085      	sub	sp, #20
 800f99a:	af00      	add	r7, sp, #0
 800f99c:	6078      	str	r0, [r7, #4]
 800f99e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	685b      	ldr	r3, [r3, #4]
 800f9a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	68fa      	ldr	r2, [r7, #12]
 800f9aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	689a      	ldr	r2, [r3, #8]
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	689b      	ldr	r3, [r3, #8]
 800f9b8:	683a      	ldr	r2, [r7, #0]
 800f9ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	683a      	ldr	r2, [r7, #0]
 800f9c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	687a      	ldr	r2, [r7, #4]
 800f9c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	1c5a      	adds	r2, r3, #1
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	601a      	str	r2, [r3, #0]
}
 800f9d2:	bf00      	nop
 800f9d4:	3714      	adds	r7, #20
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9dc:	4770      	bx	lr

0800f9de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f9de:	b480      	push	{r7}
 800f9e0:	b085      	sub	sp, #20
 800f9e2:	af00      	add	r7, sp, #0
 800f9e4:	6078      	str	r0, [r7, #4]
 800f9e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9f4:	d103      	bne.n	800f9fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	691b      	ldr	r3, [r3, #16]
 800f9fa:	60fb      	str	r3, [r7, #12]
 800f9fc:	e00c      	b.n	800fa18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	3308      	adds	r3, #8
 800fa02:	60fb      	str	r3, [r7, #12]
 800fa04:	e002      	b.n	800fa0c <vListInsert+0x2e>
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	685b      	ldr	r3, [r3, #4]
 800fa0a:	60fb      	str	r3, [r7, #12]
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	685b      	ldr	r3, [r3, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	68ba      	ldr	r2, [r7, #8]
 800fa14:	429a      	cmp	r2, r3
 800fa16:	d2f6      	bcs.n	800fa06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	685a      	ldr	r2, [r3, #4]
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	685b      	ldr	r3, [r3, #4]
 800fa24:	683a      	ldr	r2, [r7, #0]
 800fa26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	68fa      	ldr	r2, [r7, #12]
 800fa2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	683a      	ldr	r2, [r7, #0]
 800fa32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	687a      	ldr	r2, [r7, #4]
 800fa38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	1c5a      	adds	r2, r3, #1
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	601a      	str	r2, [r3, #0]
}
 800fa44:	bf00      	nop
 800fa46:	3714      	adds	r7, #20
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4e:	4770      	bx	lr

0800fa50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fa50:	b480      	push	{r7}
 800fa52:	b085      	sub	sp, #20
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	691b      	ldr	r3, [r3, #16]
 800fa5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	685b      	ldr	r3, [r3, #4]
 800fa62:	687a      	ldr	r2, [r7, #4]
 800fa64:	6892      	ldr	r2, [r2, #8]
 800fa66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	689b      	ldr	r3, [r3, #8]
 800fa6c:	687a      	ldr	r2, [r7, #4]
 800fa6e:	6852      	ldr	r2, [r2, #4]
 800fa70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	685b      	ldr	r3, [r3, #4]
 800fa76:	687a      	ldr	r2, [r7, #4]
 800fa78:	429a      	cmp	r2, r3
 800fa7a:	d103      	bne.n	800fa84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	689a      	ldr	r2, [r3, #8]
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2200      	movs	r2, #0
 800fa88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	1e5a      	subs	r2, r3, #1
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	681b      	ldr	r3, [r3, #0]
}
 800fa98:	4618      	mov	r0, r3
 800fa9a:	3714      	adds	r7, #20
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa2:	4770      	bx	lr

0800faa4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b084      	sub	sp, #16
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
 800faac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d10a      	bne.n	800face <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fabc:	f383 8811 	msr	BASEPRI, r3
 800fac0:	f3bf 8f6f 	isb	sy
 800fac4:	f3bf 8f4f 	dsb	sy
 800fac8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800faca:	bf00      	nop
 800facc:	e7fe      	b.n	800facc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800face:	f002 fd71 	bl	80125b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	681a      	ldr	r2, [r3, #0]
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fada:	68f9      	ldr	r1, [r7, #12]
 800fadc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fade:	fb01 f303 	mul.w	r3, r1, r3
 800fae2:	441a      	add	r2, r3
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	2200      	movs	r2, #0
 800faec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	681a      	ldr	r2, [r3, #0]
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	681a      	ldr	r2, [r3, #0]
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fafe:	3b01      	subs	r3, #1
 800fb00:	68f9      	ldr	r1, [r7, #12]
 800fb02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fb04:	fb01 f303 	mul.w	r3, r1, r3
 800fb08:	441a      	add	r2, r3
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	22ff      	movs	r2, #255	; 0xff
 800fb12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	22ff      	movs	r2, #255	; 0xff
 800fb1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d114      	bne.n	800fb4e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	691b      	ldr	r3, [r3, #16]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d01a      	beq.n	800fb62 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	3310      	adds	r3, #16
 800fb30:	4618      	mov	r0, r3
 800fb32:	f001 fcdb 	bl	80114ec <xTaskRemoveFromEventList>
 800fb36:	4603      	mov	r3, r0
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d012      	beq.n	800fb62 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fb3c:	4b0c      	ldr	r3, [pc, #48]	; (800fb70 <xQueueGenericReset+0xcc>)
 800fb3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb42:	601a      	str	r2, [r3, #0]
 800fb44:	f3bf 8f4f 	dsb	sy
 800fb48:	f3bf 8f6f 	isb	sy
 800fb4c:	e009      	b.n	800fb62 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	3310      	adds	r3, #16
 800fb52:	4618      	mov	r0, r3
 800fb54:	f7ff fef2 	bl	800f93c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	3324      	adds	r3, #36	; 0x24
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f7ff feed 	bl	800f93c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fb62:	f002 fd57 	bl	8012614 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fb66:	2301      	movs	r3, #1
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3710      	adds	r7, #16
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}
 800fb70:	e000ed04 	.word	0xe000ed04

0800fb74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b08e      	sub	sp, #56	; 0x38
 800fb78:	af02      	add	r7, sp, #8
 800fb7a:	60f8      	str	r0, [r7, #12]
 800fb7c:	60b9      	str	r1, [r7, #8]
 800fb7e:	607a      	str	r2, [r7, #4]
 800fb80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d10a      	bne.n	800fb9e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800fb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb8c:	f383 8811 	msr	BASEPRI, r3
 800fb90:	f3bf 8f6f 	isb	sy
 800fb94:	f3bf 8f4f 	dsb	sy
 800fb98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fb9a:	bf00      	nop
 800fb9c:	e7fe      	b.n	800fb9c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d10a      	bne.n	800fbba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800fba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fba8:	f383 8811 	msr	BASEPRI, r3
 800fbac:	f3bf 8f6f 	isb	sy
 800fbb0:	f3bf 8f4f 	dsb	sy
 800fbb4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fbb6:	bf00      	nop
 800fbb8:	e7fe      	b.n	800fbb8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d002      	beq.n	800fbc6 <xQueueGenericCreateStatic+0x52>
 800fbc0:	68bb      	ldr	r3, [r7, #8]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d001      	beq.n	800fbca <xQueueGenericCreateStatic+0x56>
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	e000      	b.n	800fbcc <xQueueGenericCreateStatic+0x58>
 800fbca:	2300      	movs	r3, #0
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d10a      	bne.n	800fbe6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800fbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd4:	f383 8811 	msr	BASEPRI, r3
 800fbd8:	f3bf 8f6f 	isb	sy
 800fbdc:	f3bf 8f4f 	dsb	sy
 800fbe0:	623b      	str	r3, [r7, #32]
}
 800fbe2:	bf00      	nop
 800fbe4:	e7fe      	b.n	800fbe4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d102      	bne.n	800fbf2 <xQueueGenericCreateStatic+0x7e>
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d101      	bne.n	800fbf6 <xQueueGenericCreateStatic+0x82>
 800fbf2:	2301      	movs	r3, #1
 800fbf4:	e000      	b.n	800fbf8 <xQueueGenericCreateStatic+0x84>
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d10a      	bne.n	800fc12 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800fbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc00:	f383 8811 	msr	BASEPRI, r3
 800fc04:	f3bf 8f6f 	isb	sy
 800fc08:	f3bf 8f4f 	dsb	sy
 800fc0c:	61fb      	str	r3, [r7, #28]
}
 800fc0e:	bf00      	nop
 800fc10:	e7fe      	b.n	800fc10 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fc12:	2350      	movs	r3, #80	; 0x50
 800fc14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	2b50      	cmp	r3, #80	; 0x50
 800fc1a:	d00a      	beq.n	800fc32 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800fc1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc20:	f383 8811 	msr	BASEPRI, r3
 800fc24:	f3bf 8f6f 	isb	sy
 800fc28:	f3bf 8f4f 	dsb	sy
 800fc2c:	61bb      	str	r3, [r7, #24]
}
 800fc2e:	bf00      	nop
 800fc30:	e7fe      	b.n	800fc30 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fc32:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800fc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d00d      	beq.n	800fc5a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc40:	2201      	movs	r2, #1
 800fc42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fc46:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc4c:	9300      	str	r3, [sp, #0]
 800fc4e:	4613      	mov	r3, r2
 800fc50:	687a      	ldr	r2, [r7, #4]
 800fc52:	68b9      	ldr	r1, [r7, #8]
 800fc54:	68f8      	ldr	r0, [r7, #12]
 800fc56:	f000 f83f 	bl	800fcd8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fc5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	3730      	adds	r7, #48	; 0x30
 800fc60:	46bd      	mov	sp, r7
 800fc62:	bd80      	pop	{r7, pc}

0800fc64 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b08a      	sub	sp, #40	; 0x28
 800fc68:	af02      	add	r7, sp, #8
 800fc6a:	60f8      	str	r0, [r7, #12]
 800fc6c:	60b9      	str	r1, [r7, #8]
 800fc6e:	4613      	mov	r3, r2
 800fc70:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d10a      	bne.n	800fc8e <xQueueGenericCreate+0x2a>
	__asm volatile
 800fc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc7c:	f383 8811 	msr	BASEPRI, r3
 800fc80:	f3bf 8f6f 	isb	sy
 800fc84:	f3bf 8f4f 	dsb	sy
 800fc88:	613b      	str	r3, [r7, #16]
}
 800fc8a:	bf00      	nop
 800fc8c:	e7fe      	b.n	800fc8c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	68ba      	ldr	r2, [r7, #8]
 800fc92:	fb02 f303 	mul.w	r3, r2, r3
 800fc96:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fc98:	69fb      	ldr	r3, [r7, #28]
 800fc9a:	3350      	adds	r3, #80	; 0x50
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f002 fdab 	bl	80127f8 <pvPortMalloc>
 800fca2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fca4:	69bb      	ldr	r3, [r7, #24]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d011      	beq.n	800fcce <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fcaa:	69bb      	ldr	r3, [r7, #24]
 800fcac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fcae:	697b      	ldr	r3, [r7, #20]
 800fcb0:	3350      	adds	r3, #80	; 0x50
 800fcb2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fcb4:	69bb      	ldr	r3, [r7, #24]
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fcbc:	79fa      	ldrb	r2, [r7, #7]
 800fcbe:	69bb      	ldr	r3, [r7, #24]
 800fcc0:	9300      	str	r3, [sp, #0]
 800fcc2:	4613      	mov	r3, r2
 800fcc4:	697a      	ldr	r2, [r7, #20]
 800fcc6:	68b9      	ldr	r1, [r7, #8]
 800fcc8:	68f8      	ldr	r0, [r7, #12]
 800fcca:	f000 f805 	bl	800fcd8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fcce:	69bb      	ldr	r3, [r7, #24]
	}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	3720      	adds	r7, #32
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}

0800fcd8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b084      	sub	sp, #16
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	60f8      	str	r0, [r7, #12]
 800fce0:	60b9      	str	r1, [r7, #8]
 800fce2:	607a      	str	r2, [r7, #4]
 800fce4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fce6:	68bb      	ldr	r3, [r7, #8]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d103      	bne.n	800fcf4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fcec:	69bb      	ldr	r3, [r7, #24]
 800fcee:	69ba      	ldr	r2, [r7, #24]
 800fcf0:	601a      	str	r2, [r3, #0]
 800fcf2:	e002      	b.n	800fcfa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fcf4:	69bb      	ldr	r3, [r7, #24]
 800fcf6:	687a      	ldr	r2, [r7, #4]
 800fcf8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fcfa:	69bb      	ldr	r3, [r7, #24]
 800fcfc:	68fa      	ldr	r2, [r7, #12]
 800fcfe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fd00:	69bb      	ldr	r3, [r7, #24]
 800fd02:	68ba      	ldr	r2, [r7, #8]
 800fd04:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fd06:	2101      	movs	r1, #1
 800fd08:	69b8      	ldr	r0, [r7, #24]
 800fd0a:	f7ff fecb 	bl	800faa4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fd0e:	69bb      	ldr	r3, [r7, #24]
 800fd10:	78fa      	ldrb	r2, [r7, #3]
 800fd12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fd16:	bf00      	nop
 800fd18:	3710      	adds	r7, #16
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}

0800fd1e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800fd1e:	b580      	push	{r7, lr}
 800fd20:	b082      	sub	sp, #8
 800fd22:	af00      	add	r7, sp, #0
 800fd24:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d00e      	beq.n	800fd4a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2200      	movs	r2, #0
 800fd30:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	2200      	movs	r2, #0
 800fd36:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fd3e:	2300      	movs	r3, #0
 800fd40:	2200      	movs	r2, #0
 800fd42:	2100      	movs	r1, #0
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f000 f8a1 	bl	800fe8c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800fd4a:	bf00      	nop
 800fd4c:	3708      	adds	r7, #8
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bd80      	pop	{r7, pc}

0800fd52 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800fd52:	b580      	push	{r7, lr}
 800fd54:	b086      	sub	sp, #24
 800fd56:	af00      	add	r7, sp, #0
 800fd58:	4603      	mov	r3, r0
 800fd5a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	617b      	str	r3, [r7, #20]
 800fd60:	2300      	movs	r3, #0
 800fd62:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800fd64:	79fb      	ldrb	r3, [r7, #7]
 800fd66:	461a      	mov	r2, r3
 800fd68:	6939      	ldr	r1, [r7, #16]
 800fd6a:	6978      	ldr	r0, [r7, #20]
 800fd6c:	f7ff ff7a 	bl	800fc64 <xQueueGenericCreate>
 800fd70:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fd72:	68f8      	ldr	r0, [r7, #12]
 800fd74:	f7ff ffd3 	bl	800fd1e <prvInitialiseMutex>

		return xNewQueue;
 800fd78:	68fb      	ldr	r3, [r7, #12]
	}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	3718      	adds	r7, #24
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}

0800fd82 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800fd82:	b580      	push	{r7, lr}
 800fd84:	b088      	sub	sp, #32
 800fd86:	af02      	add	r7, sp, #8
 800fd88:	4603      	mov	r3, r0
 800fd8a:	6039      	str	r1, [r7, #0]
 800fd8c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fd8e:	2301      	movs	r3, #1
 800fd90:	617b      	str	r3, [r7, #20]
 800fd92:	2300      	movs	r3, #0
 800fd94:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800fd96:	79fb      	ldrb	r3, [r7, #7]
 800fd98:	9300      	str	r3, [sp, #0]
 800fd9a:	683b      	ldr	r3, [r7, #0]
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	6939      	ldr	r1, [r7, #16]
 800fda0:	6978      	ldr	r0, [r7, #20]
 800fda2:	f7ff fee7 	bl	800fb74 <xQueueGenericCreateStatic>
 800fda6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fda8:	68f8      	ldr	r0, [r7, #12]
 800fdaa:	f7ff ffb8 	bl	800fd1e <prvInitialiseMutex>

		return xNewQueue;
 800fdae:	68fb      	ldr	r3, [r7, #12]
	}
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3718      	adds	r7, #24
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}

0800fdb8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800fdb8:	b590      	push	{r4, r7, lr}
 800fdba:	b087      	sub	sp, #28
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800fdc4:	693b      	ldr	r3, [r7, #16]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d10a      	bne.n	800fde0 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800fdca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdce:	f383 8811 	msr	BASEPRI, r3
 800fdd2:	f3bf 8f6f 	isb	sy
 800fdd6:	f3bf 8f4f 	dsb	sy
 800fdda:	60fb      	str	r3, [r7, #12]
}
 800fddc:	bf00      	nop
 800fdde:	e7fe      	b.n	800fdde <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800fde0:	693b      	ldr	r3, [r7, #16]
 800fde2:	689c      	ldr	r4, [r3, #8]
 800fde4:	f001 fd7c 	bl	80118e0 <xTaskGetCurrentTaskHandle>
 800fde8:	4603      	mov	r3, r0
 800fdea:	429c      	cmp	r4, r3
 800fdec:	d111      	bne.n	800fe12 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800fdee:	693b      	ldr	r3, [r7, #16]
 800fdf0:	68db      	ldr	r3, [r3, #12]
 800fdf2:	1e5a      	subs	r2, r3, #1
 800fdf4:	693b      	ldr	r3, [r7, #16]
 800fdf6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800fdf8:	693b      	ldr	r3, [r7, #16]
 800fdfa:	68db      	ldr	r3, [r3, #12]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d105      	bne.n	800fe0c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800fe00:	2300      	movs	r3, #0
 800fe02:	2200      	movs	r2, #0
 800fe04:	2100      	movs	r1, #0
 800fe06:	6938      	ldr	r0, [r7, #16]
 800fe08:	f000 f840 	bl	800fe8c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800fe0c:	2301      	movs	r3, #1
 800fe0e:	617b      	str	r3, [r7, #20]
 800fe10:	e001      	b.n	800fe16 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800fe12:	2300      	movs	r3, #0
 800fe14:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800fe16:	697b      	ldr	r3, [r7, #20]
	}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	371c      	adds	r7, #28
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd90      	pop	{r4, r7, pc}

0800fe20 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800fe20:	b590      	push	{r4, r7, lr}
 800fe22:	b087      	sub	sp, #28
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
 800fe28:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800fe2e:	693b      	ldr	r3, [r7, #16]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d10a      	bne.n	800fe4a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800fe34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe38:	f383 8811 	msr	BASEPRI, r3
 800fe3c:	f3bf 8f6f 	isb	sy
 800fe40:	f3bf 8f4f 	dsb	sy
 800fe44:	60fb      	str	r3, [r7, #12]
}
 800fe46:	bf00      	nop
 800fe48:	e7fe      	b.n	800fe48 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800fe4a:	693b      	ldr	r3, [r7, #16]
 800fe4c:	689c      	ldr	r4, [r3, #8]
 800fe4e:	f001 fd47 	bl	80118e0 <xTaskGetCurrentTaskHandle>
 800fe52:	4603      	mov	r3, r0
 800fe54:	429c      	cmp	r4, r3
 800fe56:	d107      	bne.n	800fe68 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800fe58:	693b      	ldr	r3, [r7, #16]
 800fe5a:	68db      	ldr	r3, [r3, #12]
 800fe5c:	1c5a      	adds	r2, r3, #1
 800fe5e:	693b      	ldr	r3, [r7, #16]
 800fe60:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800fe62:	2301      	movs	r3, #1
 800fe64:	617b      	str	r3, [r7, #20]
 800fe66:	e00c      	b.n	800fe82 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800fe68:	6839      	ldr	r1, [r7, #0]
 800fe6a:	6938      	ldr	r0, [r7, #16]
 800fe6c:	f000 fa88 	bl	8010380 <xQueueSemaphoreTake>
 800fe70:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d004      	beq.n	800fe82 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800fe78:	693b      	ldr	r3, [r7, #16]
 800fe7a:	68db      	ldr	r3, [r3, #12]
 800fe7c:	1c5a      	adds	r2, r3, #1
 800fe7e:	693b      	ldr	r3, [r7, #16]
 800fe80:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800fe82:	697b      	ldr	r3, [r7, #20]
	}
 800fe84:	4618      	mov	r0, r3
 800fe86:	371c      	adds	r7, #28
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd90      	pop	{r4, r7, pc}

0800fe8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b08e      	sub	sp, #56	; 0x38
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	60f8      	str	r0, [r7, #12]
 800fe94:	60b9      	str	r1, [r7, #8]
 800fe96:	607a      	str	r2, [r7, #4]
 800fe98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d10a      	bne.n	800febe <xQueueGenericSend+0x32>
	__asm volatile
 800fea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feac:	f383 8811 	msr	BASEPRI, r3
 800feb0:	f3bf 8f6f 	isb	sy
 800feb4:	f3bf 8f4f 	dsb	sy
 800feb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800feba:	bf00      	nop
 800febc:	e7fe      	b.n	800febc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d103      	bne.n	800fecc <xQueueGenericSend+0x40>
 800fec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d101      	bne.n	800fed0 <xQueueGenericSend+0x44>
 800fecc:	2301      	movs	r3, #1
 800fece:	e000      	b.n	800fed2 <xQueueGenericSend+0x46>
 800fed0:	2300      	movs	r3, #0
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d10a      	bne.n	800feec <xQueueGenericSend+0x60>
	__asm volatile
 800fed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feda:	f383 8811 	msr	BASEPRI, r3
 800fede:	f3bf 8f6f 	isb	sy
 800fee2:	f3bf 8f4f 	dsb	sy
 800fee6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fee8:	bf00      	nop
 800feea:	e7fe      	b.n	800feea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	2b02      	cmp	r3, #2
 800fef0:	d103      	bne.n	800fefa <xQueueGenericSend+0x6e>
 800fef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fef6:	2b01      	cmp	r3, #1
 800fef8:	d101      	bne.n	800fefe <xQueueGenericSend+0x72>
 800fefa:	2301      	movs	r3, #1
 800fefc:	e000      	b.n	800ff00 <xQueueGenericSend+0x74>
 800fefe:	2300      	movs	r3, #0
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d10a      	bne.n	800ff1a <xQueueGenericSend+0x8e>
	__asm volatile
 800ff04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff08:	f383 8811 	msr	BASEPRI, r3
 800ff0c:	f3bf 8f6f 	isb	sy
 800ff10:	f3bf 8f4f 	dsb	sy
 800ff14:	623b      	str	r3, [r7, #32]
}
 800ff16:	bf00      	nop
 800ff18:	e7fe      	b.n	800ff18 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ff1a:	f001 fcf1 	bl	8011900 <xTaskGetSchedulerState>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d102      	bne.n	800ff2a <xQueueGenericSend+0x9e>
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d101      	bne.n	800ff2e <xQueueGenericSend+0xa2>
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	e000      	b.n	800ff30 <xQueueGenericSend+0xa4>
 800ff2e:	2300      	movs	r3, #0
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d10a      	bne.n	800ff4a <xQueueGenericSend+0xbe>
	__asm volatile
 800ff34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff38:	f383 8811 	msr	BASEPRI, r3
 800ff3c:	f3bf 8f6f 	isb	sy
 800ff40:	f3bf 8f4f 	dsb	sy
 800ff44:	61fb      	str	r3, [r7, #28]
}
 800ff46:	bf00      	nop
 800ff48:	e7fe      	b.n	800ff48 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ff4a:	f002 fb33 	bl	80125b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ff4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff56:	429a      	cmp	r2, r3
 800ff58:	d302      	bcc.n	800ff60 <xQueueGenericSend+0xd4>
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	2b02      	cmp	r3, #2
 800ff5e:	d129      	bne.n	800ffb4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ff60:	683a      	ldr	r2, [r7, #0]
 800ff62:	68b9      	ldr	r1, [r7, #8]
 800ff64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff66:	f000 fccd 	bl	8010904 <prvCopyDataToQueue>
 800ff6a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ff6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d010      	beq.n	800ff96 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ff74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff76:	3324      	adds	r3, #36	; 0x24
 800ff78:	4618      	mov	r0, r3
 800ff7a:	f001 fab7 	bl	80114ec <xTaskRemoveFromEventList>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d013      	beq.n	800ffac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ff84:	4b3f      	ldr	r3, [pc, #252]	; (8010084 <xQueueGenericSend+0x1f8>)
 800ff86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff8a:	601a      	str	r2, [r3, #0]
 800ff8c:	f3bf 8f4f 	dsb	sy
 800ff90:	f3bf 8f6f 	isb	sy
 800ff94:	e00a      	b.n	800ffac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ff96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d007      	beq.n	800ffac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ff9c:	4b39      	ldr	r3, [pc, #228]	; (8010084 <xQueueGenericSend+0x1f8>)
 800ff9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffa2:	601a      	str	r2, [r3, #0]
 800ffa4:	f3bf 8f4f 	dsb	sy
 800ffa8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ffac:	f002 fb32 	bl	8012614 <vPortExitCritical>
				return pdPASS;
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	e063      	b.n	801007c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d103      	bne.n	800ffc2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ffba:	f002 fb2b 	bl	8012614 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	e05c      	b.n	801007c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ffc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d106      	bne.n	800ffd6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ffc8:	f107 0314 	add.w	r3, r7, #20
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f001 faf1 	bl	80115b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ffd6:	f002 fb1d 	bl	8012614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ffda:	f001 f85d 	bl	8011098 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ffde:	f002 fae9 	bl	80125b4 <vPortEnterCritical>
 800ffe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffe4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ffe8:	b25b      	sxtb	r3, r3
 800ffea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffee:	d103      	bne.n	800fff8 <xQueueGenericSend+0x16c>
 800fff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fff2:	2200      	movs	r2, #0
 800fff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fffa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fffe:	b25b      	sxtb	r3, r3
 8010000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010004:	d103      	bne.n	801000e <xQueueGenericSend+0x182>
 8010006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010008:	2200      	movs	r2, #0
 801000a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801000e:	f002 fb01 	bl	8012614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010012:	1d3a      	adds	r2, r7, #4
 8010014:	f107 0314 	add.w	r3, r7, #20
 8010018:	4611      	mov	r1, r2
 801001a:	4618      	mov	r0, r3
 801001c:	f001 fae0 	bl	80115e0 <xTaskCheckForTimeOut>
 8010020:	4603      	mov	r3, r0
 8010022:	2b00      	cmp	r3, #0
 8010024:	d124      	bne.n	8010070 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010026:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010028:	f000 fd64 	bl	8010af4 <prvIsQueueFull>
 801002c:	4603      	mov	r3, r0
 801002e:	2b00      	cmp	r3, #0
 8010030:	d018      	beq.n	8010064 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010034:	3310      	adds	r3, #16
 8010036:	687a      	ldr	r2, [r7, #4]
 8010038:	4611      	mov	r1, r2
 801003a:	4618      	mov	r0, r3
 801003c:	f001 fa06 	bl	801144c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010042:	f000 fcef 	bl	8010a24 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010046:	f001 f835 	bl	80110b4 <xTaskResumeAll>
 801004a:	4603      	mov	r3, r0
 801004c:	2b00      	cmp	r3, #0
 801004e:	f47f af7c 	bne.w	800ff4a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010052:	4b0c      	ldr	r3, [pc, #48]	; (8010084 <xQueueGenericSend+0x1f8>)
 8010054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010058:	601a      	str	r2, [r3, #0]
 801005a:	f3bf 8f4f 	dsb	sy
 801005e:	f3bf 8f6f 	isb	sy
 8010062:	e772      	b.n	800ff4a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010066:	f000 fcdd 	bl	8010a24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801006a:	f001 f823 	bl	80110b4 <xTaskResumeAll>
 801006e:	e76c      	b.n	800ff4a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010072:	f000 fcd7 	bl	8010a24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010076:	f001 f81d 	bl	80110b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801007a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801007c:	4618      	mov	r0, r3
 801007e:	3738      	adds	r7, #56	; 0x38
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}
 8010084:	e000ed04 	.word	0xe000ed04

08010088 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b090      	sub	sp, #64	; 0x40
 801008c:	af00      	add	r7, sp, #0
 801008e:	60f8      	str	r0, [r7, #12]
 8010090:	60b9      	str	r1, [r7, #8]
 8010092:	607a      	str	r2, [r7, #4]
 8010094:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801009a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801009c:	2b00      	cmp	r3, #0
 801009e:	d10a      	bne.n	80100b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80100a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a4:	f383 8811 	msr	BASEPRI, r3
 80100a8:	f3bf 8f6f 	isb	sy
 80100ac:	f3bf 8f4f 	dsb	sy
 80100b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80100b2:	bf00      	nop
 80100b4:	e7fe      	b.n	80100b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80100b6:	68bb      	ldr	r3, [r7, #8]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d103      	bne.n	80100c4 <xQueueGenericSendFromISR+0x3c>
 80100bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d101      	bne.n	80100c8 <xQueueGenericSendFromISR+0x40>
 80100c4:	2301      	movs	r3, #1
 80100c6:	e000      	b.n	80100ca <xQueueGenericSendFromISR+0x42>
 80100c8:	2300      	movs	r3, #0
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d10a      	bne.n	80100e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80100ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100d2:	f383 8811 	msr	BASEPRI, r3
 80100d6:	f3bf 8f6f 	isb	sy
 80100da:	f3bf 8f4f 	dsb	sy
 80100de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80100e0:	bf00      	nop
 80100e2:	e7fe      	b.n	80100e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80100e4:	683b      	ldr	r3, [r7, #0]
 80100e6:	2b02      	cmp	r3, #2
 80100e8:	d103      	bne.n	80100f2 <xQueueGenericSendFromISR+0x6a>
 80100ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100ee:	2b01      	cmp	r3, #1
 80100f0:	d101      	bne.n	80100f6 <xQueueGenericSendFromISR+0x6e>
 80100f2:	2301      	movs	r3, #1
 80100f4:	e000      	b.n	80100f8 <xQueueGenericSendFromISR+0x70>
 80100f6:	2300      	movs	r3, #0
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d10a      	bne.n	8010112 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80100fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010100:	f383 8811 	msr	BASEPRI, r3
 8010104:	f3bf 8f6f 	isb	sy
 8010108:	f3bf 8f4f 	dsb	sy
 801010c:	623b      	str	r3, [r7, #32]
}
 801010e:	bf00      	nop
 8010110:	e7fe      	b.n	8010110 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010112:	f002 fb31 	bl	8012778 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010116:	f3ef 8211 	mrs	r2, BASEPRI
 801011a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801011e:	f383 8811 	msr	BASEPRI, r3
 8010122:	f3bf 8f6f 	isb	sy
 8010126:	f3bf 8f4f 	dsb	sy
 801012a:	61fa      	str	r2, [r7, #28]
 801012c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801012e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010130:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801013a:	429a      	cmp	r2, r3
 801013c:	d302      	bcc.n	8010144 <xQueueGenericSendFromISR+0xbc>
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	2b02      	cmp	r3, #2
 8010142:	d12f      	bne.n	80101a4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010146:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801014a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801014e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010152:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010154:	683a      	ldr	r2, [r7, #0]
 8010156:	68b9      	ldr	r1, [r7, #8]
 8010158:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801015a:	f000 fbd3 	bl	8010904 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801015e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8010162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010166:	d112      	bne.n	801018e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801016a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801016c:	2b00      	cmp	r3, #0
 801016e:	d016      	beq.n	801019e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010172:	3324      	adds	r3, #36	; 0x24
 8010174:	4618      	mov	r0, r3
 8010176:	f001 f9b9 	bl	80114ec <xTaskRemoveFromEventList>
 801017a:	4603      	mov	r3, r0
 801017c:	2b00      	cmp	r3, #0
 801017e:	d00e      	beq.n	801019e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d00b      	beq.n	801019e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	2201      	movs	r2, #1
 801018a:	601a      	str	r2, [r3, #0]
 801018c:	e007      	b.n	801019e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801018e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010192:	3301      	adds	r3, #1
 8010194:	b2db      	uxtb	r3, r3
 8010196:	b25a      	sxtb	r2, r3
 8010198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801019a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801019e:	2301      	movs	r3, #1
 80101a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80101a2:	e001      	b.n	80101a8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80101a4:	2300      	movs	r3, #0
 80101a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80101a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101aa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80101ac:	697b      	ldr	r3, [r7, #20]
 80101ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80101b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80101b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80101b6:	4618      	mov	r0, r3
 80101b8:	3740      	adds	r7, #64	; 0x40
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}
	...

080101c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b08c      	sub	sp, #48	; 0x30
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	60f8      	str	r0, [r7, #12]
 80101c8:	60b9      	str	r1, [r7, #8]
 80101ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80101cc:	2300      	movs	r3, #0
 80101ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80101d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d10a      	bne.n	80101f0 <xQueueReceive+0x30>
	__asm volatile
 80101da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101de:	f383 8811 	msr	BASEPRI, r3
 80101e2:	f3bf 8f6f 	isb	sy
 80101e6:	f3bf 8f4f 	dsb	sy
 80101ea:	623b      	str	r3, [r7, #32]
}
 80101ec:	bf00      	nop
 80101ee:	e7fe      	b.n	80101ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80101f0:	68bb      	ldr	r3, [r7, #8]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d103      	bne.n	80101fe <xQueueReceive+0x3e>
 80101f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d101      	bne.n	8010202 <xQueueReceive+0x42>
 80101fe:	2301      	movs	r3, #1
 8010200:	e000      	b.n	8010204 <xQueueReceive+0x44>
 8010202:	2300      	movs	r3, #0
 8010204:	2b00      	cmp	r3, #0
 8010206:	d10a      	bne.n	801021e <xQueueReceive+0x5e>
	__asm volatile
 8010208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801020c:	f383 8811 	msr	BASEPRI, r3
 8010210:	f3bf 8f6f 	isb	sy
 8010214:	f3bf 8f4f 	dsb	sy
 8010218:	61fb      	str	r3, [r7, #28]
}
 801021a:	bf00      	nop
 801021c:	e7fe      	b.n	801021c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801021e:	f001 fb6f 	bl	8011900 <xTaskGetSchedulerState>
 8010222:	4603      	mov	r3, r0
 8010224:	2b00      	cmp	r3, #0
 8010226:	d102      	bne.n	801022e <xQueueReceive+0x6e>
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d101      	bne.n	8010232 <xQueueReceive+0x72>
 801022e:	2301      	movs	r3, #1
 8010230:	e000      	b.n	8010234 <xQueueReceive+0x74>
 8010232:	2300      	movs	r3, #0
 8010234:	2b00      	cmp	r3, #0
 8010236:	d10a      	bne.n	801024e <xQueueReceive+0x8e>
	__asm volatile
 8010238:	f04f 0350 	mov.w	r3, #80	; 0x50
 801023c:	f383 8811 	msr	BASEPRI, r3
 8010240:	f3bf 8f6f 	isb	sy
 8010244:	f3bf 8f4f 	dsb	sy
 8010248:	61bb      	str	r3, [r7, #24]
}
 801024a:	bf00      	nop
 801024c:	e7fe      	b.n	801024c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801024e:	f002 f9b1 	bl	80125b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010256:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801025a:	2b00      	cmp	r3, #0
 801025c:	d01f      	beq.n	801029e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801025e:	68b9      	ldr	r1, [r7, #8]
 8010260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010262:	f000 fbb9 	bl	80109d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010268:	1e5a      	subs	r2, r3, #1
 801026a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801026c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801026e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010270:	691b      	ldr	r3, [r3, #16]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d00f      	beq.n	8010296 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010278:	3310      	adds	r3, #16
 801027a:	4618      	mov	r0, r3
 801027c:	f001 f936 	bl	80114ec <xTaskRemoveFromEventList>
 8010280:	4603      	mov	r3, r0
 8010282:	2b00      	cmp	r3, #0
 8010284:	d007      	beq.n	8010296 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010286:	4b3d      	ldr	r3, [pc, #244]	; (801037c <xQueueReceive+0x1bc>)
 8010288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801028c:	601a      	str	r2, [r3, #0]
 801028e:	f3bf 8f4f 	dsb	sy
 8010292:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010296:	f002 f9bd 	bl	8012614 <vPortExitCritical>
				return pdPASS;
 801029a:	2301      	movs	r3, #1
 801029c:	e069      	b.n	8010372 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d103      	bne.n	80102ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80102a4:	f002 f9b6 	bl	8012614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80102a8:	2300      	movs	r3, #0
 80102aa:	e062      	b.n	8010372 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80102ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d106      	bne.n	80102c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80102b2:	f107 0310 	add.w	r3, r7, #16
 80102b6:	4618      	mov	r0, r3
 80102b8:	f001 f97c 	bl	80115b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80102bc:	2301      	movs	r3, #1
 80102be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80102c0:	f002 f9a8 	bl	8012614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80102c4:	f000 fee8 	bl	8011098 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80102c8:	f002 f974 	bl	80125b4 <vPortEnterCritical>
 80102cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80102d2:	b25b      	sxtb	r3, r3
 80102d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102d8:	d103      	bne.n	80102e2 <xQueueReceive+0x122>
 80102da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102dc:	2200      	movs	r2, #0
 80102de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80102e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80102e8:	b25b      	sxtb	r3, r3
 80102ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102ee:	d103      	bne.n	80102f8 <xQueueReceive+0x138>
 80102f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102f2:	2200      	movs	r2, #0
 80102f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80102f8:	f002 f98c 	bl	8012614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80102fc:	1d3a      	adds	r2, r7, #4
 80102fe:	f107 0310 	add.w	r3, r7, #16
 8010302:	4611      	mov	r1, r2
 8010304:	4618      	mov	r0, r3
 8010306:	f001 f96b 	bl	80115e0 <xTaskCheckForTimeOut>
 801030a:	4603      	mov	r3, r0
 801030c:	2b00      	cmp	r3, #0
 801030e:	d123      	bne.n	8010358 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010312:	f000 fbd9 	bl	8010ac8 <prvIsQueueEmpty>
 8010316:	4603      	mov	r3, r0
 8010318:	2b00      	cmp	r3, #0
 801031a:	d017      	beq.n	801034c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801031c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801031e:	3324      	adds	r3, #36	; 0x24
 8010320:	687a      	ldr	r2, [r7, #4]
 8010322:	4611      	mov	r1, r2
 8010324:	4618      	mov	r0, r3
 8010326:	f001 f891 	bl	801144c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801032a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801032c:	f000 fb7a 	bl	8010a24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010330:	f000 fec0 	bl	80110b4 <xTaskResumeAll>
 8010334:	4603      	mov	r3, r0
 8010336:	2b00      	cmp	r3, #0
 8010338:	d189      	bne.n	801024e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801033a:	4b10      	ldr	r3, [pc, #64]	; (801037c <xQueueReceive+0x1bc>)
 801033c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010340:	601a      	str	r2, [r3, #0]
 8010342:	f3bf 8f4f 	dsb	sy
 8010346:	f3bf 8f6f 	isb	sy
 801034a:	e780      	b.n	801024e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801034c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801034e:	f000 fb69 	bl	8010a24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010352:	f000 feaf 	bl	80110b4 <xTaskResumeAll>
 8010356:	e77a      	b.n	801024e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801035a:	f000 fb63 	bl	8010a24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801035e:	f000 fea9 	bl	80110b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010364:	f000 fbb0 	bl	8010ac8 <prvIsQueueEmpty>
 8010368:	4603      	mov	r3, r0
 801036a:	2b00      	cmp	r3, #0
 801036c:	f43f af6f 	beq.w	801024e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010370:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010372:	4618      	mov	r0, r3
 8010374:	3730      	adds	r7, #48	; 0x30
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}
 801037a:	bf00      	nop
 801037c:	e000ed04 	.word	0xe000ed04

08010380 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b08e      	sub	sp, #56	; 0x38
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
 8010388:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801038a:	2300      	movs	r3, #0
 801038c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010392:	2300      	movs	r3, #0
 8010394:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010398:	2b00      	cmp	r3, #0
 801039a:	d10a      	bne.n	80103b2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801039c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103a0:	f383 8811 	msr	BASEPRI, r3
 80103a4:	f3bf 8f6f 	isb	sy
 80103a8:	f3bf 8f4f 	dsb	sy
 80103ac:	623b      	str	r3, [r7, #32]
}
 80103ae:	bf00      	nop
 80103b0:	e7fe      	b.n	80103b0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80103b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d00a      	beq.n	80103d0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80103ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103be:	f383 8811 	msr	BASEPRI, r3
 80103c2:	f3bf 8f6f 	isb	sy
 80103c6:	f3bf 8f4f 	dsb	sy
 80103ca:	61fb      	str	r3, [r7, #28]
}
 80103cc:	bf00      	nop
 80103ce:	e7fe      	b.n	80103ce <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80103d0:	f001 fa96 	bl	8011900 <xTaskGetSchedulerState>
 80103d4:	4603      	mov	r3, r0
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d102      	bne.n	80103e0 <xQueueSemaphoreTake+0x60>
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d101      	bne.n	80103e4 <xQueueSemaphoreTake+0x64>
 80103e0:	2301      	movs	r3, #1
 80103e2:	e000      	b.n	80103e6 <xQueueSemaphoreTake+0x66>
 80103e4:	2300      	movs	r3, #0
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d10a      	bne.n	8010400 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80103ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ee:	f383 8811 	msr	BASEPRI, r3
 80103f2:	f3bf 8f6f 	isb	sy
 80103f6:	f3bf 8f4f 	dsb	sy
 80103fa:	61bb      	str	r3, [r7, #24]
}
 80103fc:	bf00      	nop
 80103fe:	e7fe      	b.n	80103fe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010400:	f002 f8d8 	bl	80125b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010408:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801040a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801040c:	2b00      	cmp	r3, #0
 801040e:	d024      	beq.n	801045a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010412:	1e5a      	subs	r2, r3, #1
 8010414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010416:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d104      	bne.n	801042a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010420:	f001 fbe4 	bl	8011bec <pvTaskIncrementMutexHeldCount>
 8010424:	4602      	mov	r2, r0
 8010426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010428:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801042a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801042c:	691b      	ldr	r3, [r3, #16]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d00f      	beq.n	8010452 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010434:	3310      	adds	r3, #16
 8010436:	4618      	mov	r0, r3
 8010438:	f001 f858 	bl	80114ec <xTaskRemoveFromEventList>
 801043c:	4603      	mov	r3, r0
 801043e:	2b00      	cmp	r3, #0
 8010440:	d007      	beq.n	8010452 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010442:	4b54      	ldr	r3, [pc, #336]	; (8010594 <xQueueSemaphoreTake+0x214>)
 8010444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010448:	601a      	str	r2, [r3, #0]
 801044a:	f3bf 8f4f 	dsb	sy
 801044e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010452:	f002 f8df 	bl	8012614 <vPortExitCritical>
				return pdPASS;
 8010456:	2301      	movs	r3, #1
 8010458:	e097      	b.n	801058a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d111      	bne.n	8010484 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010462:	2b00      	cmp	r3, #0
 8010464:	d00a      	beq.n	801047c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8010466:	f04f 0350 	mov.w	r3, #80	; 0x50
 801046a:	f383 8811 	msr	BASEPRI, r3
 801046e:	f3bf 8f6f 	isb	sy
 8010472:	f3bf 8f4f 	dsb	sy
 8010476:	617b      	str	r3, [r7, #20]
}
 8010478:	bf00      	nop
 801047a:	e7fe      	b.n	801047a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801047c:	f002 f8ca 	bl	8012614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010480:	2300      	movs	r3, #0
 8010482:	e082      	b.n	801058a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010486:	2b00      	cmp	r3, #0
 8010488:	d106      	bne.n	8010498 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801048a:	f107 030c 	add.w	r3, r7, #12
 801048e:	4618      	mov	r0, r3
 8010490:	f001 f890 	bl	80115b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010494:	2301      	movs	r3, #1
 8010496:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010498:	f002 f8bc 	bl	8012614 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801049c:	f000 fdfc 	bl	8011098 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80104a0:	f002 f888 	bl	80125b4 <vPortEnterCritical>
 80104a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80104aa:	b25b      	sxtb	r3, r3
 80104ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104b0:	d103      	bne.n	80104ba <xQueueSemaphoreTake+0x13a>
 80104b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104b4:	2200      	movs	r2, #0
 80104b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80104ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80104c0:	b25b      	sxtb	r3, r3
 80104c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104c6:	d103      	bne.n	80104d0 <xQueueSemaphoreTake+0x150>
 80104c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ca:	2200      	movs	r2, #0
 80104cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80104d0:	f002 f8a0 	bl	8012614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80104d4:	463a      	mov	r2, r7
 80104d6:	f107 030c 	add.w	r3, r7, #12
 80104da:	4611      	mov	r1, r2
 80104dc:	4618      	mov	r0, r3
 80104de:	f001 f87f 	bl	80115e0 <xTaskCheckForTimeOut>
 80104e2:	4603      	mov	r3, r0
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d132      	bne.n	801054e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80104e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80104ea:	f000 faed 	bl	8010ac8 <prvIsQueueEmpty>
 80104ee:	4603      	mov	r3, r0
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d026      	beq.n	8010542 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80104f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d109      	bne.n	8010510 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80104fc:	f002 f85a 	bl	80125b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010502:	689b      	ldr	r3, [r3, #8]
 8010504:	4618      	mov	r0, r3
 8010506:	f001 fa19 	bl	801193c <xTaskPriorityInherit>
 801050a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801050c:	f002 f882 	bl	8012614 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010512:	3324      	adds	r3, #36	; 0x24
 8010514:	683a      	ldr	r2, [r7, #0]
 8010516:	4611      	mov	r1, r2
 8010518:	4618      	mov	r0, r3
 801051a:	f000 ff97 	bl	801144c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801051e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010520:	f000 fa80 	bl	8010a24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010524:	f000 fdc6 	bl	80110b4 <xTaskResumeAll>
 8010528:	4603      	mov	r3, r0
 801052a:	2b00      	cmp	r3, #0
 801052c:	f47f af68 	bne.w	8010400 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010530:	4b18      	ldr	r3, [pc, #96]	; (8010594 <xQueueSemaphoreTake+0x214>)
 8010532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010536:	601a      	str	r2, [r3, #0]
 8010538:	f3bf 8f4f 	dsb	sy
 801053c:	f3bf 8f6f 	isb	sy
 8010540:	e75e      	b.n	8010400 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010542:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010544:	f000 fa6e 	bl	8010a24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010548:	f000 fdb4 	bl	80110b4 <xTaskResumeAll>
 801054c:	e758      	b.n	8010400 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801054e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010550:	f000 fa68 	bl	8010a24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010554:	f000 fdae 	bl	80110b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010558:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801055a:	f000 fab5 	bl	8010ac8 <prvIsQueueEmpty>
 801055e:	4603      	mov	r3, r0
 8010560:	2b00      	cmp	r3, #0
 8010562:	f43f af4d 	beq.w	8010400 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010568:	2b00      	cmp	r3, #0
 801056a:	d00d      	beq.n	8010588 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801056c:	f002 f822 	bl	80125b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010570:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010572:	f000 f9af 	bl	80108d4 <prvGetDisinheritPriorityAfterTimeout>
 8010576:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801057a:	689b      	ldr	r3, [r3, #8]
 801057c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801057e:	4618      	mov	r0, r3
 8010580:	f001 fab2 	bl	8011ae8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010584:	f002 f846 	bl	8012614 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010588:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801058a:	4618      	mov	r0, r3
 801058c:	3738      	adds	r7, #56	; 0x38
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}
 8010592:	bf00      	nop
 8010594:	e000ed04 	.word	0xe000ed04

08010598 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b08e      	sub	sp, #56	; 0x38
 801059c:	af00      	add	r7, sp, #0
 801059e:	60f8      	str	r0, [r7, #12]
 80105a0:	60b9      	str	r1, [r7, #8]
 80105a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80105a4:	2300      	movs	r3, #0
 80105a6:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80105ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d10a      	bne.n	80105c8 <xQueuePeek+0x30>
	__asm volatile
 80105b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105b6:	f383 8811 	msr	BASEPRI, r3
 80105ba:	f3bf 8f6f 	isb	sy
 80105be:	f3bf 8f4f 	dsb	sy
 80105c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80105c4:	bf00      	nop
 80105c6:	e7fe      	b.n	80105c6 <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80105c8:	68bb      	ldr	r3, [r7, #8]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d103      	bne.n	80105d6 <xQueuePeek+0x3e>
 80105ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d101      	bne.n	80105da <xQueuePeek+0x42>
 80105d6:	2301      	movs	r3, #1
 80105d8:	e000      	b.n	80105dc <xQueuePeek+0x44>
 80105da:	2300      	movs	r3, #0
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d10a      	bne.n	80105f6 <xQueuePeek+0x5e>
	__asm volatile
 80105e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105e4:	f383 8811 	msr	BASEPRI, r3
 80105e8:	f3bf 8f6f 	isb	sy
 80105ec:	f3bf 8f4f 	dsb	sy
 80105f0:	623b      	str	r3, [r7, #32]
}
 80105f2:	bf00      	nop
 80105f4:	e7fe      	b.n	80105f4 <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80105f6:	f001 f983 	bl	8011900 <xTaskGetSchedulerState>
 80105fa:	4603      	mov	r3, r0
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d102      	bne.n	8010606 <xQueuePeek+0x6e>
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d101      	bne.n	801060a <xQueuePeek+0x72>
 8010606:	2301      	movs	r3, #1
 8010608:	e000      	b.n	801060c <xQueuePeek+0x74>
 801060a:	2300      	movs	r3, #0
 801060c:	2b00      	cmp	r3, #0
 801060e:	d10a      	bne.n	8010626 <xQueuePeek+0x8e>
	__asm volatile
 8010610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010614:	f383 8811 	msr	BASEPRI, r3
 8010618:	f3bf 8f6f 	isb	sy
 801061c:	f3bf 8f4f 	dsb	sy
 8010620:	61fb      	str	r3, [r7, #28]
}
 8010622:	bf00      	nop
 8010624:	e7fe      	b.n	8010624 <xQueuePeek+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010626:	f001 ffc5 	bl	80125b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801062a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801062c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801062e:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010632:	2b00      	cmp	r3, #0
 8010634:	d021      	beq.n	801067a <xQueuePeek+0xe2>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8010636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010638:	68db      	ldr	r3, [r3, #12]
 801063a:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801063c:	68b9      	ldr	r1, [r7, #8]
 801063e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010640:	f000 f9ca 	bl	80109d8 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8010644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010648:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801064a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801064c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801064e:	2b00      	cmp	r3, #0
 8010650:	d00f      	beq.n	8010672 <xQueuePeek+0xda>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010654:	3324      	adds	r3, #36	; 0x24
 8010656:	4618      	mov	r0, r3
 8010658:	f000 ff48 	bl	80114ec <xTaskRemoveFromEventList>
 801065c:	4603      	mov	r3, r0
 801065e:	2b00      	cmp	r3, #0
 8010660:	d007      	beq.n	8010672 <xQueuePeek+0xda>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8010662:	4b3d      	ldr	r3, [pc, #244]	; (8010758 <xQueuePeek+0x1c0>)
 8010664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010668:	601a      	str	r2, [r3, #0]
 801066a:	f3bf 8f4f 	dsb	sy
 801066e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010672:	f001 ffcf 	bl	8012614 <vPortExitCritical>
				return pdPASS;
 8010676:	2301      	movs	r3, #1
 8010678:	e069      	b.n	801074e <xQueuePeek+0x1b6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d103      	bne.n	8010688 <xQueuePeek+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010680:	f001 ffc8 	bl	8012614 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010684:	2300      	movs	r3, #0
 8010686:	e062      	b.n	801074e <xQueuePeek+0x1b6>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801068a:	2b00      	cmp	r3, #0
 801068c:	d106      	bne.n	801069c <xQueuePeek+0x104>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801068e:	f107 0314 	add.w	r3, r7, #20
 8010692:	4618      	mov	r0, r3
 8010694:	f000 ff8e 	bl	80115b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010698:	2301      	movs	r3, #1
 801069a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801069c:	f001 ffba 	bl	8012614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80106a0:	f000 fcfa 	bl	8011098 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80106a4:	f001 ff86 	bl	80125b4 <vPortEnterCritical>
 80106a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80106ae:	b25b      	sxtb	r3, r3
 80106b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106b4:	d103      	bne.n	80106be <xQueuePeek+0x126>
 80106b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106b8:	2200      	movs	r2, #0
 80106ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80106be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80106c4:	b25b      	sxtb	r3, r3
 80106c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106ca:	d103      	bne.n	80106d4 <xQueuePeek+0x13c>
 80106cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106ce:	2200      	movs	r2, #0
 80106d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80106d4:	f001 ff9e 	bl	8012614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80106d8:	1d3a      	adds	r2, r7, #4
 80106da:	f107 0314 	add.w	r3, r7, #20
 80106de:	4611      	mov	r1, r2
 80106e0:	4618      	mov	r0, r3
 80106e2:	f000 ff7d 	bl	80115e0 <xTaskCheckForTimeOut>
 80106e6:	4603      	mov	r3, r0
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d123      	bne.n	8010734 <xQueuePeek+0x19c>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80106ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80106ee:	f000 f9eb 	bl	8010ac8 <prvIsQueueEmpty>
 80106f2:	4603      	mov	r3, r0
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d017      	beq.n	8010728 <xQueuePeek+0x190>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80106f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106fa:	3324      	adds	r3, #36	; 0x24
 80106fc:	687a      	ldr	r2, [r7, #4]
 80106fe:	4611      	mov	r1, r2
 8010700:	4618      	mov	r0, r3
 8010702:	f000 fea3 	bl	801144c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010706:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010708:	f000 f98c 	bl	8010a24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801070c:	f000 fcd2 	bl	80110b4 <xTaskResumeAll>
 8010710:	4603      	mov	r3, r0
 8010712:	2b00      	cmp	r3, #0
 8010714:	d187      	bne.n	8010626 <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 8010716:	4b10      	ldr	r3, [pc, #64]	; (8010758 <xQueuePeek+0x1c0>)
 8010718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801071c:	601a      	str	r2, [r3, #0]
 801071e:	f3bf 8f4f 	dsb	sy
 8010722:	f3bf 8f6f 	isb	sy
 8010726:	e77e      	b.n	8010626 <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8010728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801072a:	f000 f97b 	bl	8010a24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801072e:	f000 fcc1 	bl	80110b4 <xTaskResumeAll>
 8010732:	e778      	b.n	8010626 <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8010734:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010736:	f000 f975 	bl	8010a24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801073a:	f000 fcbb 	bl	80110b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801073e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010740:	f000 f9c2 	bl	8010ac8 <prvIsQueueEmpty>
 8010744:	4603      	mov	r3, r0
 8010746:	2b00      	cmp	r3, #0
 8010748:	f43f af6d 	beq.w	8010626 <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801074c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801074e:	4618      	mov	r0, r3
 8010750:	3738      	adds	r7, #56	; 0x38
 8010752:	46bd      	mov	sp, r7
 8010754:	bd80      	pop	{r7, pc}
 8010756:	bf00      	nop
 8010758:	e000ed04 	.word	0xe000ed04

0801075c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b08e      	sub	sp, #56	; 0x38
 8010760:	af00      	add	r7, sp, #0
 8010762:	60f8      	str	r0, [r7, #12]
 8010764:	60b9      	str	r1, [r7, #8]
 8010766:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801076c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801076e:	2b00      	cmp	r3, #0
 8010770:	d10a      	bne.n	8010788 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010776:	f383 8811 	msr	BASEPRI, r3
 801077a:	f3bf 8f6f 	isb	sy
 801077e:	f3bf 8f4f 	dsb	sy
 8010782:	623b      	str	r3, [r7, #32]
}
 8010784:	bf00      	nop
 8010786:	e7fe      	b.n	8010786 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d103      	bne.n	8010796 <xQueueReceiveFromISR+0x3a>
 801078e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010792:	2b00      	cmp	r3, #0
 8010794:	d101      	bne.n	801079a <xQueueReceiveFromISR+0x3e>
 8010796:	2301      	movs	r3, #1
 8010798:	e000      	b.n	801079c <xQueueReceiveFromISR+0x40>
 801079a:	2300      	movs	r3, #0
 801079c:	2b00      	cmp	r3, #0
 801079e:	d10a      	bne.n	80107b6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80107a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107a4:	f383 8811 	msr	BASEPRI, r3
 80107a8:	f3bf 8f6f 	isb	sy
 80107ac:	f3bf 8f4f 	dsb	sy
 80107b0:	61fb      	str	r3, [r7, #28]
}
 80107b2:	bf00      	nop
 80107b4:	e7fe      	b.n	80107b4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80107b6:	f001 ffdf 	bl	8012778 <vPortValidateInterruptPriority>
	__asm volatile
 80107ba:	f3ef 8211 	mrs	r2, BASEPRI
 80107be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107c2:	f383 8811 	msr	BASEPRI, r3
 80107c6:	f3bf 8f6f 	isb	sy
 80107ca:	f3bf 8f4f 	dsb	sy
 80107ce:	61ba      	str	r2, [r7, #24]
 80107d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80107d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80107d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80107d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80107dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d02f      	beq.n	8010842 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80107e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80107e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80107ec:	68b9      	ldr	r1, [r7, #8]
 80107ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107f0:	f000 f8f2 	bl	80109d8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80107f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107f6:	1e5a      	subs	r2, r3, #1
 80107f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80107fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010804:	d112      	bne.n	801082c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010808:	691b      	ldr	r3, [r3, #16]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d016      	beq.n	801083c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801080e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010810:	3310      	adds	r3, #16
 8010812:	4618      	mov	r0, r3
 8010814:	f000 fe6a 	bl	80114ec <xTaskRemoveFromEventList>
 8010818:	4603      	mov	r3, r0
 801081a:	2b00      	cmp	r3, #0
 801081c:	d00e      	beq.n	801083c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d00b      	beq.n	801083c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2201      	movs	r2, #1
 8010828:	601a      	str	r2, [r3, #0]
 801082a:	e007      	b.n	801083c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801082c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010830:	3301      	adds	r3, #1
 8010832:	b2db      	uxtb	r3, r3
 8010834:	b25a      	sxtb	r2, r3
 8010836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801083c:	2301      	movs	r3, #1
 801083e:	637b      	str	r3, [r7, #52]	; 0x34
 8010840:	e001      	b.n	8010846 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010842:	2300      	movs	r3, #0
 8010844:	637b      	str	r3, [r7, #52]	; 0x34
 8010846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010848:	613b      	str	r3, [r7, #16]
	__asm volatile
 801084a:	693b      	ldr	r3, [r7, #16]
 801084c:	f383 8811 	msr	BASEPRI, r3
}
 8010850:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010854:	4618      	mov	r0, r3
 8010856:	3738      	adds	r7, #56	; 0x38
 8010858:	46bd      	mov	sp, r7
 801085a:	bd80      	pop	{r7, pc}

0801085c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b084      	sub	sp, #16
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d10a      	bne.n	8010880 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 801086a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801086e:	f383 8811 	msr	BASEPRI, r3
 8010872:	f3bf 8f6f 	isb	sy
 8010876:	f3bf 8f4f 	dsb	sy
 801087a:	60bb      	str	r3, [r7, #8]
}
 801087c:	bf00      	nop
 801087e:	e7fe      	b.n	801087e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8010880:	f001 fe98 	bl	80125b4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010888:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 801088a:	f001 fec3 	bl	8012614 <vPortExitCritical>

	return uxReturn;
 801088e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010890:	4618      	mov	r0, r3
 8010892:	3710      	adds	r7, #16
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}

08010898 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8010898:	b480      	push	{r7}
 801089a:	b087      	sub	sp, #28
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80108a4:	697b      	ldr	r3, [r7, #20]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d10a      	bne.n	80108c0 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80108aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108ae:	f383 8811 	msr	BASEPRI, r3
 80108b2:	f3bf 8f6f 	isb	sy
 80108b6:	f3bf 8f4f 	dsb	sy
 80108ba:	60fb      	str	r3, [r7, #12]
}
 80108bc:	bf00      	nop
 80108be:	e7fe      	b.n	80108be <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80108c0:	697b      	ldr	r3, [r7, #20]
 80108c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108c4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80108c6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80108c8:	4618      	mov	r0, r3
 80108ca:	371c      	adds	r7, #28
 80108cc:	46bd      	mov	sp, r7
 80108ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d2:	4770      	bx	lr

080108d4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80108d4:	b480      	push	{r7}
 80108d6:	b085      	sub	sp, #20
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d006      	beq.n	80108f2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80108ee:	60fb      	str	r3, [r7, #12]
 80108f0:	e001      	b.n	80108f6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80108f2:	2300      	movs	r3, #0
 80108f4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80108f6:	68fb      	ldr	r3, [r7, #12]
	}
 80108f8:	4618      	mov	r0, r3
 80108fa:	3714      	adds	r7, #20
 80108fc:	46bd      	mov	sp, r7
 80108fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010902:	4770      	bx	lr

08010904 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b086      	sub	sp, #24
 8010908:	af00      	add	r7, sp, #0
 801090a:	60f8      	str	r0, [r7, #12]
 801090c:	60b9      	str	r1, [r7, #8]
 801090e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010910:	2300      	movs	r3, #0
 8010912:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010918:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801091e:	2b00      	cmp	r3, #0
 8010920:	d10d      	bne.n	801093e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d14d      	bne.n	80109c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	689b      	ldr	r3, [r3, #8]
 801092e:	4618      	mov	r0, r3
 8010930:	f001 f86c 	bl	8011a0c <xTaskPriorityDisinherit>
 8010934:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	2200      	movs	r2, #0
 801093a:	609a      	str	r2, [r3, #8]
 801093c:	e043      	b.n	80109c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d119      	bne.n	8010978 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	6858      	ldr	r0, [r3, #4]
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801094c:	461a      	mov	r2, r3
 801094e:	68b9      	ldr	r1, [r7, #8]
 8010950:	f00b fcaf 	bl	801c2b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	685a      	ldr	r2, [r3, #4]
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801095c:	441a      	add	r2, r3
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	685a      	ldr	r2, [r3, #4]
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	689b      	ldr	r3, [r3, #8]
 801096a:	429a      	cmp	r2, r3
 801096c:	d32b      	bcc.n	80109c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	681a      	ldr	r2, [r3, #0]
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	605a      	str	r2, [r3, #4]
 8010976:	e026      	b.n	80109c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	68d8      	ldr	r0, [r3, #12]
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010980:	461a      	mov	r2, r3
 8010982:	68b9      	ldr	r1, [r7, #8]
 8010984:	f00b fc95 	bl	801c2b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	68da      	ldr	r2, [r3, #12]
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010990:	425b      	negs	r3, r3
 8010992:	441a      	add	r2, r3
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	68da      	ldr	r2, [r3, #12]
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	429a      	cmp	r2, r3
 80109a2:	d207      	bcs.n	80109b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	689a      	ldr	r2, [r3, #8]
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109ac:	425b      	negs	r3, r3
 80109ae:	441a      	add	r2, r3
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2b02      	cmp	r3, #2
 80109b8:	d105      	bne.n	80109c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80109ba:	693b      	ldr	r3, [r7, #16]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d002      	beq.n	80109c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80109c0:	693b      	ldr	r3, [r7, #16]
 80109c2:	3b01      	subs	r3, #1
 80109c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80109c6:	693b      	ldr	r3, [r7, #16]
 80109c8:	1c5a      	adds	r2, r3, #1
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80109ce:	697b      	ldr	r3, [r7, #20]
}
 80109d0:	4618      	mov	r0, r3
 80109d2:	3718      	adds	r7, #24
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}

080109d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b082      	sub	sp, #8
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
 80109e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d018      	beq.n	8010a1c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	68da      	ldr	r2, [r3, #12]
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109f2:	441a      	add	r2, r3
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	68da      	ldr	r2, [r3, #12]
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	689b      	ldr	r3, [r3, #8]
 8010a00:	429a      	cmp	r2, r3
 8010a02:	d303      	bcc.n	8010a0c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681a      	ldr	r2, [r3, #0]
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	68d9      	ldr	r1, [r3, #12]
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a14:	461a      	mov	r2, r3
 8010a16:	6838      	ldr	r0, [r7, #0]
 8010a18:	f00b fc4b 	bl	801c2b2 <memcpy>
	}
}
 8010a1c:	bf00      	nop
 8010a1e:	3708      	adds	r7, #8
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd80      	pop	{r7, pc}

08010a24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b084      	sub	sp, #16
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010a2c:	f001 fdc2 	bl	80125b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a36:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010a38:	e011      	b.n	8010a5e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d012      	beq.n	8010a68 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	3324      	adds	r3, #36	; 0x24
 8010a46:	4618      	mov	r0, r3
 8010a48:	f000 fd50 	bl	80114ec <xTaskRemoveFromEventList>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d001      	beq.n	8010a56 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010a52:	f000 fe27 	bl	80116a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010a56:	7bfb      	ldrb	r3, [r7, #15]
 8010a58:	3b01      	subs	r3, #1
 8010a5a:	b2db      	uxtb	r3, r3
 8010a5c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	dce9      	bgt.n	8010a3a <prvUnlockQueue+0x16>
 8010a66:	e000      	b.n	8010a6a <prvUnlockQueue+0x46>
					break;
 8010a68:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	22ff      	movs	r2, #255	; 0xff
 8010a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010a72:	f001 fdcf 	bl	8012614 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010a76:	f001 fd9d 	bl	80125b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a80:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010a82:	e011      	b.n	8010aa8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	691b      	ldr	r3, [r3, #16]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d012      	beq.n	8010ab2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	3310      	adds	r3, #16
 8010a90:	4618      	mov	r0, r3
 8010a92:	f000 fd2b 	bl	80114ec <xTaskRemoveFromEventList>
 8010a96:	4603      	mov	r3, r0
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d001      	beq.n	8010aa0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010a9c:	f000 fe02 	bl	80116a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010aa0:	7bbb      	ldrb	r3, [r7, #14]
 8010aa2:	3b01      	subs	r3, #1
 8010aa4:	b2db      	uxtb	r3, r3
 8010aa6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010aa8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	dce9      	bgt.n	8010a84 <prvUnlockQueue+0x60>
 8010ab0:	e000      	b.n	8010ab4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010ab2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	22ff      	movs	r2, #255	; 0xff
 8010ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010abc:	f001 fdaa 	bl	8012614 <vPortExitCritical>
}
 8010ac0:	bf00      	nop
 8010ac2:	3710      	adds	r7, #16
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}

08010ac8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b084      	sub	sp, #16
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010ad0:	f001 fd70 	bl	80125b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d102      	bne.n	8010ae2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010adc:	2301      	movs	r3, #1
 8010ade:	60fb      	str	r3, [r7, #12]
 8010ae0:	e001      	b.n	8010ae6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010ae6:	f001 fd95 	bl	8012614 <vPortExitCritical>

	return xReturn;
 8010aea:	68fb      	ldr	r3, [r7, #12]
}
 8010aec:	4618      	mov	r0, r3
 8010aee:	3710      	adds	r7, #16
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd80      	pop	{r7, pc}

08010af4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b084      	sub	sp, #16
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010afc:	f001 fd5a 	bl	80125b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b08:	429a      	cmp	r2, r3
 8010b0a:	d102      	bne.n	8010b12 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010b0c:	2301      	movs	r3, #1
 8010b0e:	60fb      	str	r3, [r7, #12]
 8010b10:	e001      	b.n	8010b16 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010b12:	2300      	movs	r3, #0
 8010b14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010b16:	f001 fd7d 	bl	8012614 <vPortExitCritical>

	return xReturn;
 8010b1a:	68fb      	ldr	r3, [r7, #12]
}
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3710      	adds	r7, #16
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}

08010b24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010b24:	b480      	push	{r7}
 8010b26:	b085      	sub	sp, #20
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
 8010b2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010b2e:	2300      	movs	r3, #0
 8010b30:	60fb      	str	r3, [r7, #12]
 8010b32:	e014      	b.n	8010b5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010b34:	4a0f      	ldr	r2, [pc, #60]	; (8010b74 <vQueueAddToRegistry+0x50>)
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d10b      	bne.n	8010b58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010b40:	490c      	ldr	r1, [pc, #48]	; (8010b74 <vQueueAddToRegistry+0x50>)
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	683a      	ldr	r2, [r7, #0]
 8010b46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010b4a:	4a0a      	ldr	r2, [pc, #40]	; (8010b74 <vQueueAddToRegistry+0x50>)
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	00db      	lsls	r3, r3, #3
 8010b50:	4413      	add	r3, r2
 8010b52:	687a      	ldr	r2, [r7, #4]
 8010b54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010b56:	e006      	b.n	8010b66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	3301      	adds	r3, #1
 8010b5c:	60fb      	str	r3, [r7, #12]
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	2b09      	cmp	r3, #9
 8010b62:	d9e7      	bls.n	8010b34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010b64:	bf00      	nop
 8010b66:	bf00      	nop
 8010b68:	3714      	adds	r7, #20
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b70:	4770      	bx	lr
 8010b72:	bf00      	nop
 8010b74:	20001ca0 	.word	0x20001ca0

08010b78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b086      	sub	sp, #24
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	60f8      	str	r0, [r7, #12]
 8010b80:	60b9      	str	r1, [r7, #8]
 8010b82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010b88:	f001 fd14 	bl	80125b4 <vPortEnterCritical>
 8010b8c:	697b      	ldr	r3, [r7, #20]
 8010b8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010b92:	b25b      	sxtb	r3, r3
 8010b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b98:	d103      	bne.n	8010ba2 <vQueueWaitForMessageRestricted+0x2a>
 8010b9a:	697b      	ldr	r3, [r7, #20]
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010ba2:	697b      	ldr	r3, [r7, #20]
 8010ba4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010ba8:	b25b      	sxtb	r3, r3
 8010baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bae:	d103      	bne.n	8010bb8 <vQueueWaitForMessageRestricted+0x40>
 8010bb0:	697b      	ldr	r3, [r7, #20]
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010bb8:	f001 fd2c 	bl	8012614 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010bbc:	697b      	ldr	r3, [r7, #20]
 8010bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d106      	bne.n	8010bd2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010bc4:	697b      	ldr	r3, [r7, #20]
 8010bc6:	3324      	adds	r3, #36	; 0x24
 8010bc8:	687a      	ldr	r2, [r7, #4]
 8010bca:	68b9      	ldr	r1, [r7, #8]
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f000 fc61 	bl	8011494 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010bd2:	6978      	ldr	r0, [r7, #20]
 8010bd4:	f7ff ff26 	bl	8010a24 <prvUnlockQueue>
	}
 8010bd8:	bf00      	nop
 8010bda:	3718      	adds	r7, #24
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bd80      	pop	{r7, pc}

08010be0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b08e      	sub	sp, #56	; 0x38
 8010be4:	af04      	add	r7, sp, #16
 8010be6:	60f8      	str	r0, [r7, #12]
 8010be8:	60b9      	str	r1, [r7, #8]
 8010bea:	607a      	str	r2, [r7, #4]
 8010bec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d10a      	bne.n	8010c0a <xTaskCreateStatic+0x2a>
	__asm volatile
 8010bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bf8:	f383 8811 	msr	BASEPRI, r3
 8010bfc:	f3bf 8f6f 	isb	sy
 8010c00:	f3bf 8f4f 	dsb	sy
 8010c04:	623b      	str	r3, [r7, #32]
}
 8010c06:	bf00      	nop
 8010c08:	e7fe      	b.n	8010c08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d10a      	bne.n	8010c26 <xTaskCreateStatic+0x46>
	__asm volatile
 8010c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c14:	f383 8811 	msr	BASEPRI, r3
 8010c18:	f3bf 8f6f 	isb	sy
 8010c1c:	f3bf 8f4f 	dsb	sy
 8010c20:	61fb      	str	r3, [r7, #28]
}
 8010c22:	bf00      	nop
 8010c24:	e7fe      	b.n	8010c24 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010c26:	23a8      	movs	r3, #168	; 0xa8
 8010c28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010c2a:	693b      	ldr	r3, [r7, #16]
 8010c2c:	2ba8      	cmp	r3, #168	; 0xa8
 8010c2e:	d00a      	beq.n	8010c46 <xTaskCreateStatic+0x66>
	__asm volatile
 8010c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c34:	f383 8811 	msr	BASEPRI, r3
 8010c38:	f3bf 8f6f 	isb	sy
 8010c3c:	f3bf 8f4f 	dsb	sy
 8010c40:	61bb      	str	r3, [r7, #24]
}
 8010c42:	bf00      	nop
 8010c44:	e7fe      	b.n	8010c44 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010c46:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d01e      	beq.n	8010c8c <xTaskCreateStatic+0xac>
 8010c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d01b      	beq.n	8010c8c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c56:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c5c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c60:	2202      	movs	r2, #2
 8010c62:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010c66:	2300      	movs	r3, #0
 8010c68:	9303      	str	r3, [sp, #12]
 8010c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c6c:	9302      	str	r3, [sp, #8]
 8010c6e:	f107 0314 	add.w	r3, r7, #20
 8010c72:	9301      	str	r3, [sp, #4]
 8010c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c76:	9300      	str	r3, [sp, #0]
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	687a      	ldr	r2, [r7, #4]
 8010c7c:	68b9      	ldr	r1, [r7, #8]
 8010c7e:	68f8      	ldr	r0, [r7, #12]
 8010c80:	f000 f850 	bl	8010d24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010c84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c86:	f000 f8f3 	bl	8010e70 <prvAddNewTaskToReadyList>
 8010c8a:	e001      	b.n	8010c90 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010c90:	697b      	ldr	r3, [r7, #20]
	}
 8010c92:	4618      	mov	r0, r3
 8010c94:	3728      	adds	r7, #40	; 0x28
 8010c96:	46bd      	mov	sp, r7
 8010c98:	bd80      	pop	{r7, pc}

08010c9a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010c9a:	b580      	push	{r7, lr}
 8010c9c:	b08c      	sub	sp, #48	; 0x30
 8010c9e:	af04      	add	r7, sp, #16
 8010ca0:	60f8      	str	r0, [r7, #12]
 8010ca2:	60b9      	str	r1, [r7, #8]
 8010ca4:	603b      	str	r3, [r7, #0]
 8010ca6:	4613      	mov	r3, r2
 8010ca8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010caa:	88fb      	ldrh	r3, [r7, #6]
 8010cac:	009b      	lsls	r3, r3, #2
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f001 fda2 	bl	80127f8 <pvPortMalloc>
 8010cb4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010cb6:	697b      	ldr	r3, [r7, #20]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d00e      	beq.n	8010cda <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010cbc:	20a8      	movs	r0, #168	; 0xa8
 8010cbe:	f001 fd9b 	bl	80127f8 <pvPortMalloc>
 8010cc2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010cc4:	69fb      	ldr	r3, [r7, #28]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d003      	beq.n	8010cd2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010cca:	69fb      	ldr	r3, [r7, #28]
 8010ccc:	697a      	ldr	r2, [r7, #20]
 8010cce:	631a      	str	r2, [r3, #48]	; 0x30
 8010cd0:	e005      	b.n	8010cde <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010cd2:	6978      	ldr	r0, [r7, #20]
 8010cd4:	f001 fdd6 	bl	8012884 <vPortFree>
 8010cd8:	e001      	b.n	8010cde <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010cda:	2300      	movs	r3, #0
 8010cdc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010cde:	69fb      	ldr	r3, [r7, #28]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d017      	beq.n	8010d14 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010ce4:	69fb      	ldr	r3, [r7, #28]
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010cec:	88fa      	ldrh	r2, [r7, #6]
 8010cee:	2300      	movs	r3, #0
 8010cf0:	9303      	str	r3, [sp, #12]
 8010cf2:	69fb      	ldr	r3, [r7, #28]
 8010cf4:	9302      	str	r3, [sp, #8]
 8010cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf8:	9301      	str	r3, [sp, #4]
 8010cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cfc:	9300      	str	r3, [sp, #0]
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	68b9      	ldr	r1, [r7, #8]
 8010d02:	68f8      	ldr	r0, [r7, #12]
 8010d04:	f000 f80e 	bl	8010d24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010d08:	69f8      	ldr	r0, [r7, #28]
 8010d0a:	f000 f8b1 	bl	8010e70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010d0e:	2301      	movs	r3, #1
 8010d10:	61bb      	str	r3, [r7, #24]
 8010d12:	e002      	b.n	8010d1a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010d14:	f04f 33ff 	mov.w	r3, #4294967295
 8010d18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010d1a:	69bb      	ldr	r3, [r7, #24]
	}
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	3720      	adds	r7, #32
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}

08010d24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b088      	sub	sp, #32
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	60f8      	str	r0, [r7, #12]
 8010d2c:	60b9      	str	r1, [r7, #8]
 8010d2e:	607a      	str	r2, [r7, #4]
 8010d30:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	009b      	lsls	r3, r3, #2
 8010d3a:	461a      	mov	r2, r3
 8010d3c:	21a5      	movs	r1, #165	; 0xa5
 8010d3e:	f00b f8e3 	bl	801bf08 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010d4c:	3b01      	subs	r3, #1
 8010d4e:	009b      	lsls	r3, r3, #2
 8010d50:	4413      	add	r3, r2
 8010d52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010d54:	69bb      	ldr	r3, [r7, #24]
 8010d56:	f023 0307 	bic.w	r3, r3, #7
 8010d5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010d5c:	69bb      	ldr	r3, [r7, #24]
 8010d5e:	f003 0307 	and.w	r3, r3, #7
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d00a      	beq.n	8010d7c <prvInitialiseNewTask+0x58>
	__asm volatile
 8010d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d6a:	f383 8811 	msr	BASEPRI, r3
 8010d6e:	f3bf 8f6f 	isb	sy
 8010d72:	f3bf 8f4f 	dsb	sy
 8010d76:	617b      	str	r3, [r7, #20]
}
 8010d78:	bf00      	nop
 8010d7a:	e7fe      	b.n	8010d7a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010d7c:	68bb      	ldr	r3, [r7, #8]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d01f      	beq.n	8010dc2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010d82:	2300      	movs	r3, #0
 8010d84:	61fb      	str	r3, [r7, #28]
 8010d86:	e012      	b.n	8010dae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010d88:	68ba      	ldr	r2, [r7, #8]
 8010d8a:	69fb      	ldr	r3, [r7, #28]
 8010d8c:	4413      	add	r3, r2
 8010d8e:	7819      	ldrb	r1, [r3, #0]
 8010d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d92:	69fb      	ldr	r3, [r7, #28]
 8010d94:	4413      	add	r3, r2
 8010d96:	3334      	adds	r3, #52	; 0x34
 8010d98:	460a      	mov	r2, r1
 8010d9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010d9c:	68ba      	ldr	r2, [r7, #8]
 8010d9e:	69fb      	ldr	r3, [r7, #28]
 8010da0:	4413      	add	r3, r2
 8010da2:	781b      	ldrb	r3, [r3, #0]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d006      	beq.n	8010db6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010da8:	69fb      	ldr	r3, [r7, #28]
 8010daa:	3301      	adds	r3, #1
 8010dac:	61fb      	str	r3, [r7, #28]
 8010dae:	69fb      	ldr	r3, [r7, #28]
 8010db0:	2b0f      	cmp	r3, #15
 8010db2:	d9e9      	bls.n	8010d88 <prvInitialiseNewTask+0x64>
 8010db4:	e000      	b.n	8010db8 <prvInitialiseNewTask+0x94>
			{
				break;
 8010db6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dba:	2200      	movs	r2, #0
 8010dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010dc0:	e003      	b.n	8010dca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dcc:	2b37      	cmp	r3, #55	; 0x37
 8010dce:	d901      	bls.n	8010dd4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010dd0:	2337      	movs	r3, #55	; 0x37
 8010dd2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010dd8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010dde:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010de2:	2200      	movs	r2, #0
 8010de4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010de8:	3304      	adds	r3, #4
 8010dea:	4618      	mov	r0, r3
 8010dec:	f7fe fdc6 	bl	800f97c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010df2:	3318      	adds	r3, #24
 8010df4:	4618      	mov	r0, r3
 8010df6:	f7fe fdc1 	bl	800f97c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010dfe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e12:	2200      	movs	r2, #0
 8010e14:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e22:	3354      	adds	r3, #84	; 0x54
 8010e24:	224c      	movs	r2, #76	; 0x4c
 8010e26:	2100      	movs	r1, #0
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f00b f86d 	bl	801bf08 <memset>
 8010e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e30:	4a0c      	ldr	r2, [pc, #48]	; (8010e64 <prvInitialiseNewTask+0x140>)
 8010e32:	659a      	str	r2, [r3, #88]	; 0x58
 8010e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e36:	4a0c      	ldr	r2, [pc, #48]	; (8010e68 <prvInitialiseNewTask+0x144>)
 8010e38:	65da      	str	r2, [r3, #92]	; 0x5c
 8010e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e3c:	4a0b      	ldr	r2, [pc, #44]	; (8010e6c <prvInitialiseNewTask+0x148>)
 8010e3e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010e40:	683a      	ldr	r2, [r7, #0]
 8010e42:	68f9      	ldr	r1, [r7, #12]
 8010e44:	69b8      	ldr	r0, [r7, #24]
 8010e46:	f001 fa87 	bl	8012358 <pxPortInitialiseStack>
 8010e4a:	4602      	mov	r2, r0
 8010e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e4e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d002      	beq.n	8010e5c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e5a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010e5c:	bf00      	nop
 8010e5e:	3720      	adds	r7, #32
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}
 8010e64:	2000d92c 	.word	0x2000d92c
 8010e68:	2000d994 	.word	0x2000d994
 8010e6c:	2000d9fc 	.word	0x2000d9fc

08010e70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b082      	sub	sp, #8
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010e78:	f001 fb9c 	bl	80125b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010e7c:	4b2d      	ldr	r3, [pc, #180]	; (8010f34 <prvAddNewTaskToReadyList+0xc4>)
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	3301      	adds	r3, #1
 8010e82:	4a2c      	ldr	r2, [pc, #176]	; (8010f34 <prvAddNewTaskToReadyList+0xc4>)
 8010e84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010e86:	4b2c      	ldr	r3, [pc, #176]	; (8010f38 <prvAddNewTaskToReadyList+0xc8>)
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d109      	bne.n	8010ea2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010e8e:	4a2a      	ldr	r2, [pc, #168]	; (8010f38 <prvAddNewTaskToReadyList+0xc8>)
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010e94:	4b27      	ldr	r3, [pc, #156]	; (8010f34 <prvAddNewTaskToReadyList+0xc4>)
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	2b01      	cmp	r3, #1
 8010e9a:	d110      	bne.n	8010ebe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010e9c:	f000 fc26 	bl	80116ec <prvInitialiseTaskLists>
 8010ea0:	e00d      	b.n	8010ebe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010ea2:	4b26      	ldr	r3, [pc, #152]	; (8010f3c <prvAddNewTaskToReadyList+0xcc>)
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d109      	bne.n	8010ebe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010eaa:	4b23      	ldr	r3, [pc, #140]	; (8010f38 <prvAddNewTaskToReadyList+0xc8>)
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010eb4:	429a      	cmp	r2, r3
 8010eb6:	d802      	bhi.n	8010ebe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010eb8:	4a1f      	ldr	r2, [pc, #124]	; (8010f38 <prvAddNewTaskToReadyList+0xc8>)
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010ebe:	4b20      	ldr	r3, [pc, #128]	; (8010f40 <prvAddNewTaskToReadyList+0xd0>)
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	3301      	adds	r3, #1
 8010ec4:	4a1e      	ldr	r2, [pc, #120]	; (8010f40 <prvAddNewTaskToReadyList+0xd0>)
 8010ec6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010ec8:	4b1d      	ldr	r3, [pc, #116]	; (8010f40 <prvAddNewTaskToReadyList+0xd0>)
 8010eca:	681a      	ldr	r2, [r3, #0]
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ed4:	4b1b      	ldr	r3, [pc, #108]	; (8010f44 <prvAddNewTaskToReadyList+0xd4>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	429a      	cmp	r2, r3
 8010eda:	d903      	bls.n	8010ee4 <prvAddNewTaskToReadyList+0x74>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ee0:	4a18      	ldr	r2, [pc, #96]	; (8010f44 <prvAddNewTaskToReadyList+0xd4>)
 8010ee2:	6013      	str	r3, [r2, #0]
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ee8:	4613      	mov	r3, r2
 8010eea:	009b      	lsls	r3, r3, #2
 8010eec:	4413      	add	r3, r2
 8010eee:	009b      	lsls	r3, r3, #2
 8010ef0:	4a15      	ldr	r2, [pc, #84]	; (8010f48 <prvAddNewTaskToReadyList+0xd8>)
 8010ef2:	441a      	add	r2, r3
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	3304      	adds	r3, #4
 8010ef8:	4619      	mov	r1, r3
 8010efa:	4610      	mov	r0, r2
 8010efc:	f7fe fd4b 	bl	800f996 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010f00:	f001 fb88 	bl	8012614 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010f04:	4b0d      	ldr	r3, [pc, #52]	; (8010f3c <prvAddNewTaskToReadyList+0xcc>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d00e      	beq.n	8010f2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010f0c:	4b0a      	ldr	r3, [pc, #40]	; (8010f38 <prvAddNewTaskToReadyList+0xc8>)
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f16:	429a      	cmp	r2, r3
 8010f18:	d207      	bcs.n	8010f2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010f1a:	4b0c      	ldr	r3, [pc, #48]	; (8010f4c <prvAddNewTaskToReadyList+0xdc>)
 8010f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f20:	601a      	str	r2, [r3, #0]
 8010f22:	f3bf 8f4f 	dsb	sy
 8010f26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f2a:	bf00      	nop
 8010f2c:	3708      	adds	r7, #8
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bd80      	pop	{r7, pc}
 8010f32:	bf00      	nop
 8010f34:	200021c4 	.word	0x200021c4
 8010f38:	20001cf0 	.word	0x20001cf0
 8010f3c:	200021d0 	.word	0x200021d0
 8010f40:	200021e0 	.word	0x200021e0
 8010f44:	200021cc 	.word	0x200021cc
 8010f48:	20001cf4 	.word	0x20001cf4
 8010f4c:	e000ed04 	.word	0xe000ed04

08010f50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b084      	sub	sp, #16
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010f58:	2300      	movs	r3, #0
 8010f5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d017      	beq.n	8010f92 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010f62:	4b13      	ldr	r3, [pc, #76]	; (8010fb0 <vTaskDelay+0x60>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d00a      	beq.n	8010f80 <vTaskDelay+0x30>
	__asm volatile
 8010f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f6e:	f383 8811 	msr	BASEPRI, r3
 8010f72:	f3bf 8f6f 	isb	sy
 8010f76:	f3bf 8f4f 	dsb	sy
 8010f7a:	60bb      	str	r3, [r7, #8]
}
 8010f7c:	bf00      	nop
 8010f7e:	e7fe      	b.n	8010f7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010f80:	f000 f88a 	bl	8011098 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010f84:	2100      	movs	r1, #0
 8010f86:	6878      	ldr	r0, [r7, #4]
 8010f88:	f000 fe44 	bl	8011c14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010f8c:	f000 f892 	bl	80110b4 <xTaskResumeAll>
 8010f90:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d107      	bne.n	8010fa8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010f98:	4b06      	ldr	r3, [pc, #24]	; (8010fb4 <vTaskDelay+0x64>)
 8010f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f9e:	601a      	str	r2, [r3, #0]
 8010fa0:	f3bf 8f4f 	dsb	sy
 8010fa4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010fa8:	bf00      	nop
 8010faa:	3710      	adds	r7, #16
 8010fac:	46bd      	mov	sp, r7
 8010fae:	bd80      	pop	{r7, pc}
 8010fb0:	200021ec 	.word	0x200021ec
 8010fb4:	e000ed04 	.word	0xe000ed04

08010fb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b08a      	sub	sp, #40	; 0x28
 8010fbc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010fc6:	463a      	mov	r2, r7
 8010fc8:	1d39      	adds	r1, r7, #4
 8010fca:	f107 0308 	add.w	r3, r7, #8
 8010fce:	4618      	mov	r0, r3
 8010fd0:	f7fe fc80 	bl	800f8d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010fd4:	6839      	ldr	r1, [r7, #0]
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	68ba      	ldr	r2, [r7, #8]
 8010fda:	9202      	str	r2, [sp, #8]
 8010fdc:	9301      	str	r3, [sp, #4]
 8010fde:	2300      	movs	r3, #0
 8010fe0:	9300      	str	r3, [sp, #0]
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	460a      	mov	r2, r1
 8010fe6:	4924      	ldr	r1, [pc, #144]	; (8011078 <vTaskStartScheduler+0xc0>)
 8010fe8:	4824      	ldr	r0, [pc, #144]	; (801107c <vTaskStartScheduler+0xc4>)
 8010fea:	f7ff fdf9 	bl	8010be0 <xTaskCreateStatic>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	4a23      	ldr	r2, [pc, #140]	; (8011080 <vTaskStartScheduler+0xc8>)
 8010ff2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010ff4:	4b22      	ldr	r3, [pc, #136]	; (8011080 <vTaskStartScheduler+0xc8>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d002      	beq.n	8011002 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010ffc:	2301      	movs	r3, #1
 8010ffe:	617b      	str	r3, [r7, #20]
 8011000:	e001      	b.n	8011006 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011002:	2300      	movs	r3, #0
 8011004:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011006:	697b      	ldr	r3, [r7, #20]
 8011008:	2b01      	cmp	r3, #1
 801100a:	d102      	bne.n	8011012 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801100c:	f000 fe56 	bl	8011cbc <xTimerCreateTimerTask>
 8011010:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011012:	697b      	ldr	r3, [r7, #20]
 8011014:	2b01      	cmp	r3, #1
 8011016:	d11b      	bne.n	8011050 <vTaskStartScheduler+0x98>
	__asm volatile
 8011018:	f04f 0350 	mov.w	r3, #80	; 0x50
 801101c:	f383 8811 	msr	BASEPRI, r3
 8011020:	f3bf 8f6f 	isb	sy
 8011024:	f3bf 8f4f 	dsb	sy
 8011028:	613b      	str	r3, [r7, #16]
}
 801102a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801102c:	4b15      	ldr	r3, [pc, #84]	; (8011084 <vTaskStartScheduler+0xcc>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	3354      	adds	r3, #84	; 0x54
 8011032:	4a15      	ldr	r2, [pc, #84]	; (8011088 <vTaskStartScheduler+0xd0>)
 8011034:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011036:	4b15      	ldr	r3, [pc, #84]	; (801108c <vTaskStartScheduler+0xd4>)
 8011038:	f04f 32ff 	mov.w	r2, #4294967295
 801103c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801103e:	4b14      	ldr	r3, [pc, #80]	; (8011090 <vTaskStartScheduler+0xd8>)
 8011040:	2201      	movs	r2, #1
 8011042:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011044:	4b13      	ldr	r3, [pc, #76]	; (8011094 <vTaskStartScheduler+0xdc>)
 8011046:	2200      	movs	r2, #0
 8011048:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801104a:	f001 fa11 	bl	8012470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801104e:	e00e      	b.n	801106e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011050:	697b      	ldr	r3, [r7, #20]
 8011052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011056:	d10a      	bne.n	801106e <vTaskStartScheduler+0xb6>
	__asm volatile
 8011058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801105c:	f383 8811 	msr	BASEPRI, r3
 8011060:	f3bf 8f6f 	isb	sy
 8011064:	f3bf 8f4f 	dsb	sy
 8011068:	60fb      	str	r3, [r7, #12]
}
 801106a:	bf00      	nop
 801106c:	e7fe      	b.n	801106c <vTaskStartScheduler+0xb4>
}
 801106e:	bf00      	nop
 8011070:	3718      	adds	r7, #24
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}
 8011076:	bf00      	nop
 8011078:	0802193c 	.word	0x0802193c
 801107c:	080116bd 	.word	0x080116bd
 8011080:	200021e8 	.word	0x200021e8
 8011084:	20001cf0 	.word	0x20001cf0
 8011088:	20000168 	.word	0x20000168
 801108c:	200021e4 	.word	0x200021e4
 8011090:	200021d0 	.word	0x200021d0
 8011094:	200021c8 	.word	0x200021c8

08011098 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011098:	b480      	push	{r7}
 801109a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801109c:	4b04      	ldr	r3, [pc, #16]	; (80110b0 <vTaskSuspendAll+0x18>)
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	3301      	adds	r3, #1
 80110a2:	4a03      	ldr	r2, [pc, #12]	; (80110b0 <vTaskSuspendAll+0x18>)
 80110a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80110a6:	bf00      	nop
 80110a8:	46bd      	mov	sp, r7
 80110aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ae:	4770      	bx	lr
 80110b0:	200021ec 	.word	0x200021ec

080110b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b084      	sub	sp, #16
 80110b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80110ba:	2300      	movs	r3, #0
 80110bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80110be:	2300      	movs	r3, #0
 80110c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80110c2:	4b42      	ldr	r3, [pc, #264]	; (80111cc <xTaskResumeAll+0x118>)
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d10a      	bne.n	80110e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80110ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110ce:	f383 8811 	msr	BASEPRI, r3
 80110d2:	f3bf 8f6f 	isb	sy
 80110d6:	f3bf 8f4f 	dsb	sy
 80110da:	603b      	str	r3, [r7, #0]
}
 80110dc:	bf00      	nop
 80110de:	e7fe      	b.n	80110de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80110e0:	f001 fa68 	bl	80125b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80110e4:	4b39      	ldr	r3, [pc, #228]	; (80111cc <xTaskResumeAll+0x118>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	3b01      	subs	r3, #1
 80110ea:	4a38      	ldr	r2, [pc, #224]	; (80111cc <xTaskResumeAll+0x118>)
 80110ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80110ee:	4b37      	ldr	r3, [pc, #220]	; (80111cc <xTaskResumeAll+0x118>)
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d162      	bne.n	80111bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80110f6:	4b36      	ldr	r3, [pc, #216]	; (80111d0 <xTaskResumeAll+0x11c>)
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d05e      	beq.n	80111bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80110fe:	e02f      	b.n	8011160 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011100:	4b34      	ldr	r3, [pc, #208]	; (80111d4 <xTaskResumeAll+0x120>)
 8011102:	68db      	ldr	r3, [r3, #12]
 8011104:	68db      	ldr	r3, [r3, #12]
 8011106:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	3318      	adds	r3, #24
 801110c:	4618      	mov	r0, r3
 801110e:	f7fe fc9f 	bl	800fa50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	3304      	adds	r3, #4
 8011116:	4618      	mov	r0, r3
 8011118:	f7fe fc9a 	bl	800fa50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011120:	4b2d      	ldr	r3, [pc, #180]	; (80111d8 <xTaskResumeAll+0x124>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	429a      	cmp	r2, r3
 8011126:	d903      	bls.n	8011130 <xTaskResumeAll+0x7c>
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801112c:	4a2a      	ldr	r2, [pc, #168]	; (80111d8 <xTaskResumeAll+0x124>)
 801112e:	6013      	str	r3, [r2, #0]
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011134:	4613      	mov	r3, r2
 8011136:	009b      	lsls	r3, r3, #2
 8011138:	4413      	add	r3, r2
 801113a:	009b      	lsls	r3, r3, #2
 801113c:	4a27      	ldr	r2, [pc, #156]	; (80111dc <xTaskResumeAll+0x128>)
 801113e:	441a      	add	r2, r3
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	3304      	adds	r3, #4
 8011144:	4619      	mov	r1, r3
 8011146:	4610      	mov	r0, r2
 8011148:	f7fe fc25 	bl	800f996 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011150:	4b23      	ldr	r3, [pc, #140]	; (80111e0 <xTaskResumeAll+0x12c>)
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011156:	429a      	cmp	r2, r3
 8011158:	d302      	bcc.n	8011160 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801115a:	4b22      	ldr	r3, [pc, #136]	; (80111e4 <xTaskResumeAll+0x130>)
 801115c:	2201      	movs	r2, #1
 801115e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011160:	4b1c      	ldr	r3, [pc, #112]	; (80111d4 <xTaskResumeAll+0x120>)
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d1cb      	bne.n	8011100 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d001      	beq.n	8011172 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801116e:	f000 fb97 	bl	80118a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011172:	4b1d      	ldr	r3, [pc, #116]	; (80111e8 <xTaskResumeAll+0x134>)
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d010      	beq.n	80111a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801117e:	f000 f847 	bl	8011210 <xTaskIncrementTick>
 8011182:	4603      	mov	r3, r0
 8011184:	2b00      	cmp	r3, #0
 8011186:	d002      	beq.n	801118e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011188:	4b16      	ldr	r3, [pc, #88]	; (80111e4 <xTaskResumeAll+0x130>)
 801118a:	2201      	movs	r2, #1
 801118c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	3b01      	subs	r3, #1
 8011192:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d1f1      	bne.n	801117e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801119a:	4b13      	ldr	r3, [pc, #76]	; (80111e8 <xTaskResumeAll+0x134>)
 801119c:	2200      	movs	r2, #0
 801119e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80111a0:	4b10      	ldr	r3, [pc, #64]	; (80111e4 <xTaskResumeAll+0x130>)
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d009      	beq.n	80111bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80111a8:	2301      	movs	r3, #1
 80111aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80111ac:	4b0f      	ldr	r3, [pc, #60]	; (80111ec <xTaskResumeAll+0x138>)
 80111ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111b2:	601a      	str	r2, [r3, #0]
 80111b4:	f3bf 8f4f 	dsb	sy
 80111b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80111bc:	f001 fa2a 	bl	8012614 <vPortExitCritical>

	return xAlreadyYielded;
 80111c0:	68bb      	ldr	r3, [r7, #8]
}
 80111c2:	4618      	mov	r0, r3
 80111c4:	3710      	adds	r7, #16
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}
 80111ca:	bf00      	nop
 80111cc:	200021ec 	.word	0x200021ec
 80111d0:	200021c4 	.word	0x200021c4
 80111d4:	20002184 	.word	0x20002184
 80111d8:	200021cc 	.word	0x200021cc
 80111dc:	20001cf4 	.word	0x20001cf4
 80111e0:	20001cf0 	.word	0x20001cf0
 80111e4:	200021d8 	.word	0x200021d8
 80111e8:	200021d4 	.word	0x200021d4
 80111ec:	e000ed04 	.word	0xe000ed04

080111f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80111f0:	b480      	push	{r7}
 80111f2:	b083      	sub	sp, #12
 80111f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80111f6:	4b05      	ldr	r3, [pc, #20]	; (801120c <xTaskGetTickCount+0x1c>)
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80111fc:	687b      	ldr	r3, [r7, #4]
}
 80111fe:	4618      	mov	r0, r3
 8011200:	370c      	adds	r7, #12
 8011202:	46bd      	mov	sp, r7
 8011204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011208:	4770      	bx	lr
 801120a:	bf00      	nop
 801120c:	200021c8 	.word	0x200021c8

08011210 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011210:	b580      	push	{r7, lr}
 8011212:	b086      	sub	sp, #24
 8011214:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011216:	2300      	movs	r3, #0
 8011218:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801121a:	4b4f      	ldr	r3, [pc, #316]	; (8011358 <xTaskIncrementTick+0x148>)
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	2b00      	cmp	r3, #0
 8011220:	f040 808f 	bne.w	8011342 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011224:	4b4d      	ldr	r3, [pc, #308]	; (801135c <xTaskIncrementTick+0x14c>)
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	3301      	adds	r3, #1
 801122a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801122c:	4a4b      	ldr	r2, [pc, #300]	; (801135c <xTaskIncrementTick+0x14c>)
 801122e:	693b      	ldr	r3, [r7, #16]
 8011230:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d120      	bne.n	801127a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011238:	4b49      	ldr	r3, [pc, #292]	; (8011360 <xTaskIncrementTick+0x150>)
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d00a      	beq.n	8011258 <xTaskIncrementTick+0x48>
	__asm volatile
 8011242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011246:	f383 8811 	msr	BASEPRI, r3
 801124a:	f3bf 8f6f 	isb	sy
 801124e:	f3bf 8f4f 	dsb	sy
 8011252:	603b      	str	r3, [r7, #0]
}
 8011254:	bf00      	nop
 8011256:	e7fe      	b.n	8011256 <xTaskIncrementTick+0x46>
 8011258:	4b41      	ldr	r3, [pc, #260]	; (8011360 <xTaskIncrementTick+0x150>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	60fb      	str	r3, [r7, #12]
 801125e:	4b41      	ldr	r3, [pc, #260]	; (8011364 <xTaskIncrementTick+0x154>)
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	4a3f      	ldr	r2, [pc, #252]	; (8011360 <xTaskIncrementTick+0x150>)
 8011264:	6013      	str	r3, [r2, #0]
 8011266:	4a3f      	ldr	r2, [pc, #252]	; (8011364 <xTaskIncrementTick+0x154>)
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	6013      	str	r3, [r2, #0]
 801126c:	4b3e      	ldr	r3, [pc, #248]	; (8011368 <xTaskIncrementTick+0x158>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	3301      	adds	r3, #1
 8011272:	4a3d      	ldr	r2, [pc, #244]	; (8011368 <xTaskIncrementTick+0x158>)
 8011274:	6013      	str	r3, [r2, #0]
 8011276:	f000 fb13 	bl	80118a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801127a:	4b3c      	ldr	r3, [pc, #240]	; (801136c <xTaskIncrementTick+0x15c>)
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	693a      	ldr	r2, [r7, #16]
 8011280:	429a      	cmp	r2, r3
 8011282:	d349      	bcc.n	8011318 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011284:	4b36      	ldr	r3, [pc, #216]	; (8011360 <xTaskIncrementTick+0x150>)
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d104      	bne.n	8011298 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801128e:	4b37      	ldr	r3, [pc, #220]	; (801136c <xTaskIncrementTick+0x15c>)
 8011290:	f04f 32ff 	mov.w	r2, #4294967295
 8011294:	601a      	str	r2, [r3, #0]
					break;
 8011296:	e03f      	b.n	8011318 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011298:	4b31      	ldr	r3, [pc, #196]	; (8011360 <xTaskIncrementTick+0x150>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	68db      	ldr	r3, [r3, #12]
 801129e:	68db      	ldr	r3, [r3, #12]
 80112a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80112a2:	68bb      	ldr	r3, [r7, #8]
 80112a4:	685b      	ldr	r3, [r3, #4]
 80112a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80112a8:	693a      	ldr	r2, [r7, #16]
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	429a      	cmp	r2, r3
 80112ae:	d203      	bcs.n	80112b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80112b0:	4a2e      	ldr	r2, [pc, #184]	; (801136c <xTaskIncrementTick+0x15c>)
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80112b6:	e02f      	b.n	8011318 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80112b8:	68bb      	ldr	r3, [r7, #8]
 80112ba:	3304      	adds	r3, #4
 80112bc:	4618      	mov	r0, r3
 80112be:	f7fe fbc7 	bl	800fa50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80112c2:	68bb      	ldr	r3, [r7, #8]
 80112c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d004      	beq.n	80112d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80112ca:	68bb      	ldr	r3, [r7, #8]
 80112cc:	3318      	adds	r3, #24
 80112ce:	4618      	mov	r0, r3
 80112d0:	f7fe fbbe 	bl	800fa50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80112d4:	68bb      	ldr	r3, [r7, #8]
 80112d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112d8:	4b25      	ldr	r3, [pc, #148]	; (8011370 <xTaskIncrementTick+0x160>)
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	429a      	cmp	r2, r3
 80112de:	d903      	bls.n	80112e8 <xTaskIncrementTick+0xd8>
 80112e0:	68bb      	ldr	r3, [r7, #8]
 80112e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112e4:	4a22      	ldr	r2, [pc, #136]	; (8011370 <xTaskIncrementTick+0x160>)
 80112e6:	6013      	str	r3, [r2, #0]
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112ec:	4613      	mov	r3, r2
 80112ee:	009b      	lsls	r3, r3, #2
 80112f0:	4413      	add	r3, r2
 80112f2:	009b      	lsls	r3, r3, #2
 80112f4:	4a1f      	ldr	r2, [pc, #124]	; (8011374 <xTaskIncrementTick+0x164>)
 80112f6:	441a      	add	r2, r3
 80112f8:	68bb      	ldr	r3, [r7, #8]
 80112fa:	3304      	adds	r3, #4
 80112fc:	4619      	mov	r1, r3
 80112fe:	4610      	mov	r0, r2
 8011300:	f7fe fb49 	bl	800f996 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011304:	68bb      	ldr	r3, [r7, #8]
 8011306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011308:	4b1b      	ldr	r3, [pc, #108]	; (8011378 <xTaskIncrementTick+0x168>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801130e:	429a      	cmp	r2, r3
 8011310:	d3b8      	bcc.n	8011284 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011312:	2301      	movs	r3, #1
 8011314:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011316:	e7b5      	b.n	8011284 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011318:	4b17      	ldr	r3, [pc, #92]	; (8011378 <xTaskIncrementTick+0x168>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801131e:	4915      	ldr	r1, [pc, #84]	; (8011374 <xTaskIncrementTick+0x164>)
 8011320:	4613      	mov	r3, r2
 8011322:	009b      	lsls	r3, r3, #2
 8011324:	4413      	add	r3, r2
 8011326:	009b      	lsls	r3, r3, #2
 8011328:	440b      	add	r3, r1
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	2b01      	cmp	r3, #1
 801132e:	d901      	bls.n	8011334 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011330:	2301      	movs	r3, #1
 8011332:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011334:	4b11      	ldr	r3, [pc, #68]	; (801137c <xTaskIncrementTick+0x16c>)
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d007      	beq.n	801134c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801133c:	2301      	movs	r3, #1
 801133e:	617b      	str	r3, [r7, #20]
 8011340:	e004      	b.n	801134c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011342:	4b0f      	ldr	r3, [pc, #60]	; (8011380 <xTaskIncrementTick+0x170>)
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	3301      	adds	r3, #1
 8011348:	4a0d      	ldr	r2, [pc, #52]	; (8011380 <xTaskIncrementTick+0x170>)
 801134a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801134c:	697b      	ldr	r3, [r7, #20]
}
 801134e:	4618      	mov	r0, r3
 8011350:	3718      	adds	r7, #24
 8011352:	46bd      	mov	sp, r7
 8011354:	bd80      	pop	{r7, pc}
 8011356:	bf00      	nop
 8011358:	200021ec 	.word	0x200021ec
 801135c:	200021c8 	.word	0x200021c8
 8011360:	2000217c 	.word	0x2000217c
 8011364:	20002180 	.word	0x20002180
 8011368:	200021dc 	.word	0x200021dc
 801136c:	200021e4 	.word	0x200021e4
 8011370:	200021cc 	.word	0x200021cc
 8011374:	20001cf4 	.word	0x20001cf4
 8011378:	20001cf0 	.word	0x20001cf0
 801137c:	200021d8 	.word	0x200021d8
 8011380:	200021d4 	.word	0x200021d4

08011384 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011384:	b480      	push	{r7}
 8011386:	b085      	sub	sp, #20
 8011388:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801138a:	4b2a      	ldr	r3, [pc, #168]	; (8011434 <vTaskSwitchContext+0xb0>)
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d003      	beq.n	801139a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011392:	4b29      	ldr	r3, [pc, #164]	; (8011438 <vTaskSwitchContext+0xb4>)
 8011394:	2201      	movs	r2, #1
 8011396:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011398:	e046      	b.n	8011428 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801139a:	4b27      	ldr	r3, [pc, #156]	; (8011438 <vTaskSwitchContext+0xb4>)
 801139c:	2200      	movs	r2, #0
 801139e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113a0:	4b26      	ldr	r3, [pc, #152]	; (801143c <vTaskSwitchContext+0xb8>)
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	60fb      	str	r3, [r7, #12]
 80113a6:	e010      	b.n	80113ca <vTaskSwitchContext+0x46>
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d10a      	bne.n	80113c4 <vTaskSwitchContext+0x40>
	__asm volatile
 80113ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113b2:	f383 8811 	msr	BASEPRI, r3
 80113b6:	f3bf 8f6f 	isb	sy
 80113ba:	f3bf 8f4f 	dsb	sy
 80113be:	607b      	str	r3, [r7, #4]
}
 80113c0:	bf00      	nop
 80113c2:	e7fe      	b.n	80113c2 <vTaskSwitchContext+0x3e>
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	3b01      	subs	r3, #1
 80113c8:	60fb      	str	r3, [r7, #12]
 80113ca:	491d      	ldr	r1, [pc, #116]	; (8011440 <vTaskSwitchContext+0xbc>)
 80113cc:	68fa      	ldr	r2, [r7, #12]
 80113ce:	4613      	mov	r3, r2
 80113d0:	009b      	lsls	r3, r3, #2
 80113d2:	4413      	add	r3, r2
 80113d4:	009b      	lsls	r3, r3, #2
 80113d6:	440b      	add	r3, r1
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d0e4      	beq.n	80113a8 <vTaskSwitchContext+0x24>
 80113de:	68fa      	ldr	r2, [r7, #12]
 80113e0:	4613      	mov	r3, r2
 80113e2:	009b      	lsls	r3, r3, #2
 80113e4:	4413      	add	r3, r2
 80113e6:	009b      	lsls	r3, r3, #2
 80113e8:	4a15      	ldr	r2, [pc, #84]	; (8011440 <vTaskSwitchContext+0xbc>)
 80113ea:	4413      	add	r3, r2
 80113ec:	60bb      	str	r3, [r7, #8]
 80113ee:	68bb      	ldr	r3, [r7, #8]
 80113f0:	685b      	ldr	r3, [r3, #4]
 80113f2:	685a      	ldr	r2, [r3, #4]
 80113f4:	68bb      	ldr	r3, [r7, #8]
 80113f6:	605a      	str	r2, [r3, #4]
 80113f8:	68bb      	ldr	r3, [r7, #8]
 80113fa:	685a      	ldr	r2, [r3, #4]
 80113fc:	68bb      	ldr	r3, [r7, #8]
 80113fe:	3308      	adds	r3, #8
 8011400:	429a      	cmp	r2, r3
 8011402:	d104      	bne.n	801140e <vTaskSwitchContext+0x8a>
 8011404:	68bb      	ldr	r3, [r7, #8]
 8011406:	685b      	ldr	r3, [r3, #4]
 8011408:	685a      	ldr	r2, [r3, #4]
 801140a:	68bb      	ldr	r3, [r7, #8]
 801140c:	605a      	str	r2, [r3, #4]
 801140e:	68bb      	ldr	r3, [r7, #8]
 8011410:	685b      	ldr	r3, [r3, #4]
 8011412:	68db      	ldr	r3, [r3, #12]
 8011414:	4a0b      	ldr	r2, [pc, #44]	; (8011444 <vTaskSwitchContext+0xc0>)
 8011416:	6013      	str	r3, [r2, #0]
 8011418:	4a08      	ldr	r2, [pc, #32]	; (801143c <vTaskSwitchContext+0xb8>)
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801141e:	4b09      	ldr	r3, [pc, #36]	; (8011444 <vTaskSwitchContext+0xc0>)
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	3354      	adds	r3, #84	; 0x54
 8011424:	4a08      	ldr	r2, [pc, #32]	; (8011448 <vTaskSwitchContext+0xc4>)
 8011426:	6013      	str	r3, [r2, #0]
}
 8011428:	bf00      	nop
 801142a:	3714      	adds	r7, #20
 801142c:	46bd      	mov	sp, r7
 801142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011432:	4770      	bx	lr
 8011434:	200021ec 	.word	0x200021ec
 8011438:	200021d8 	.word	0x200021d8
 801143c:	200021cc 	.word	0x200021cc
 8011440:	20001cf4 	.word	0x20001cf4
 8011444:	20001cf0 	.word	0x20001cf0
 8011448:	20000168 	.word	0x20000168

0801144c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b084      	sub	sp, #16
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
 8011454:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d10a      	bne.n	8011472 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801145c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011460:	f383 8811 	msr	BASEPRI, r3
 8011464:	f3bf 8f6f 	isb	sy
 8011468:	f3bf 8f4f 	dsb	sy
 801146c:	60fb      	str	r3, [r7, #12]
}
 801146e:	bf00      	nop
 8011470:	e7fe      	b.n	8011470 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011472:	4b07      	ldr	r3, [pc, #28]	; (8011490 <vTaskPlaceOnEventList+0x44>)
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	3318      	adds	r3, #24
 8011478:	4619      	mov	r1, r3
 801147a:	6878      	ldr	r0, [r7, #4]
 801147c:	f7fe faaf 	bl	800f9de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011480:	2101      	movs	r1, #1
 8011482:	6838      	ldr	r0, [r7, #0]
 8011484:	f000 fbc6 	bl	8011c14 <prvAddCurrentTaskToDelayedList>
}
 8011488:	bf00      	nop
 801148a:	3710      	adds	r7, #16
 801148c:	46bd      	mov	sp, r7
 801148e:	bd80      	pop	{r7, pc}
 8011490:	20001cf0 	.word	0x20001cf0

08011494 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011494:	b580      	push	{r7, lr}
 8011496:	b086      	sub	sp, #24
 8011498:	af00      	add	r7, sp, #0
 801149a:	60f8      	str	r0, [r7, #12]
 801149c:	60b9      	str	r1, [r7, #8]
 801149e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d10a      	bne.n	80114bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80114a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114aa:	f383 8811 	msr	BASEPRI, r3
 80114ae:	f3bf 8f6f 	isb	sy
 80114b2:	f3bf 8f4f 	dsb	sy
 80114b6:	617b      	str	r3, [r7, #20]
}
 80114b8:	bf00      	nop
 80114ba:	e7fe      	b.n	80114ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80114bc:	4b0a      	ldr	r3, [pc, #40]	; (80114e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	3318      	adds	r3, #24
 80114c2:	4619      	mov	r1, r3
 80114c4:	68f8      	ldr	r0, [r7, #12]
 80114c6:	f7fe fa66 	bl	800f996 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d002      	beq.n	80114d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80114d0:	f04f 33ff 	mov.w	r3, #4294967295
 80114d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80114d6:	6879      	ldr	r1, [r7, #4]
 80114d8:	68b8      	ldr	r0, [r7, #8]
 80114da:	f000 fb9b 	bl	8011c14 <prvAddCurrentTaskToDelayedList>
	}
 80114de:	bf00      	nop
 80114e0:	3718      	adds	r7, #24
 80114e2:	46bd      	mov	sp, r7
 80114e4:	bd80      	pop	{r7, pc}
 80114e6:	bf00      	nop
 80114e8:	20001cf0 	.word	0x20001cf0

080114ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b086      	sub	sp, #24
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	68db      	ldr	r3, [r3, #12]
 80114f8:	68db      	ldr	r3, [r3, #12]
 80114fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80114fc:	693b      	ldr	r3, [r7, #16]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d10a      	bne.n	8011518 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011506:	f383 8811 	msr	BASEPRI, r3
 801150a:	f3bf 8f6f 	isb	sy
 801150e:	f3bf 8f4f 	dsb	sy
 8011512:	60fb      	str	r3, [r7, #12]
}
 8011514:	bf00      	nop
 8011516:	e7fe      	b.n	8011516 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011518:	693b      	ldr	r3, [r7, #16]
 801151a:	3318      	adds	r3, #24
 801151c:	4618      	mov	r0, r3
 801151e:	f7fe fa97 	bl	800fa50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011522:	4b1e      	ldr	r3, [pc, #120]	; (801159c <xTaskRemoveFromEventList+0xb0>)
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d11d      	bne.n	8011566 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801152a:	693b      	ldr	r3, [r7, #16]
 801152c:	3304      	adds	r3, #4
 801152e:	4618      	mov	r0, r3
 8011530:	f7fe fa8e 	bl	800fa50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011534:	693b      	ldr	r3, [r7, #16]
 8011536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011538:	4b19      	ldr	r3, [pc, #100]	; (80115a0 <xTaskRemoveFromEventList+0xb4>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	429a      	cmp	r2, r3
 801153e:	d903      	bls.n	8011548 <xTaskRemoveFromEventList+0x5c>
 8011540:	693b      	ldr	r3, [r7, #16]
 8011542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011544:	4a16      	ldr	r2, [pc, #88]	; (80115a0 <xTaskRemoveFromEventList+0xb4>)
 8011546:	6013      	str	r3, [r2, #0]
 8011548:	693b      	ldr	r3, [r7, #16]
 801154a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801154c:	4613      	mov	r3, r2
 801154e:	009b      	lsls	r3, r3, #2
 8011550:	4413      	add	r3, r2
 8011552:	009b      	lsls	r3, r3, #2
 8011554:	4a13      	ldr	r2, [pc, #76]	; (80115a4 <xTaskRemoveFromEventList+0xb8>)
 8011556:	441a      	add	r2, r3
 8011558:	693b      	ldr	r3, [r7, #16]
 801155a:	3304      	adds	r3, #4
 801155c:	4619      	mov	r1, r3
 801155e:	4610      	mov	r0, r2
 8011560:	f7fe fa19 	bl	800f996 <vListInsertEnd>
 8011564:	e005      	b.n	8011572 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011566:	693b      	ldr	r3, [r7, #16]
 8011568:	3318      	adds	r3, #24
 801156a:	4619      	mov	r1, r3
 801156c:	480e      	ldr	r0, [pc, #56]	; (80115a8 <xTaskRemoveFromEventList+0xbc>)
 801156e:	f7fe fa12 	bl	800f996 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011572:	693b      	ldr	r3, [r7, #16]
 8011574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011576:	4b0d      	ldr	r3, [pc, #52]	; (80115ac <xTaskRemoveFromEventList+0xc0>)
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801157c:	429a      	cmp	r2, r3
 801157e:	d905      	bls.n	801158c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011580:	2301      	movs	r3, #1
 8011582:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011584:	4b0a      	ldr	r3, [pc, #40]	; (80115b0 <xTaskRemoveFromEventList+0xc4>)
 8011586:	2201      	movs	r2, #1
 8011588:	601a      	str	r2, [r3, #0]
 801158a:	e001      	b.n	8011590 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801158c:	2300      	movs	r3, #0
 801158e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011590:	697b      	ldr	r3, [r7, #20]
}
 8011592:	4618      	mov	r0, r3
 8011594:	3718      	adds	r7, #24
 8011596:	46bd      	mov	sp, r7
 8011598:	bd80      	pop	{r7, pc}
 801159a:	bf00      	nop
 801159c:	200021ec 	.word	0x200021ec
 80115a0:	200021cc 	.word	0x200021cc
 80115a4:	20001cf4 	.word	0x20001cf4
 80115a8:	20002184 	.word	0x20002184
 80115ac:	20001cf0 	.word	0x20001cf0
 80115b0:	200021d8 	.word	0x200021d8

080115b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80115b4:	b480      	push	{r7}
 80115b6:	b083      	sub	sp, #12
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80115bc:	4b06      	ldr	r3, [pc, #24]	; (80115d8 <vTaskInternalSetTimeOutState+0x24>)
 80115be:	681a      	ldr	r2, [r3, #0]
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80115c4:	4b05      	ldr	r3, [pc, #20]	; (80115dc <vTaskInternalSetTimeOutState+0x28>)
 80115c6:	681a      	ldr	r2, [r3, #0]
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	605a      	str	r2, [r3, #4]
}
 80115cc:	bf00      	nop
 80115ce:	370c      	adds	r7, #12
 80115d0:	46bd      	mov	sp, r7
 80115d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d6:	4770      	bx	lr
 80115d8:	200021dc 	.word	0x200021dc
 80115dc:	200021c8 	.word	0x200021c8

080115e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b088      	sub	sp, #32
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
 80115e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d10a      	bne.n	8011606 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80115f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115f4:	f383 8811 	msr	BASEPRI, r3
 80115f8:	f3bf 8f6f 	isb	sy
 80115fc:	f3bf 8f4f 	dsb	sy
 8011600:	613b      	str	r3, [r7, #16]
}
 8011602:	bf00      	nop
 8011604:	e7fe      	b.n	8011604 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011606:	683b      	ldr	r3, [r7, #0]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d10a      	bne.n	8011622 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801160c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011610:	f383 8811 	msr	BASEPRI, r3
 8011614:	f3bf 8f6f 	isb	sy
 8011618:	f3bf 8f4f 	dsb	sy
 801161c:	60fb      	str	r3, [r7, #12]
}
 801161e:	bf00      	nop
 8011620:	e7fe      	b.n	8011620 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011622:	f000 ffc7 	bl	80125b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011626:	4b1d      	ldr	r3, [pc, #116]	; (801169c <xTaskCheckForTimeOut+0xbc>)
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	685b      	ldr	r3, [r3, #4]
 8011630:	69ba      	ldr	r2, [r7, #24]
 8011632:	1ad3      	subs	r3, r2, r3
 8011634:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011636:	683b      	ldr	r3, [r7, #0]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801163e:	d102      	bne.n	8011646 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011640:	2300      	movs	r3, #0
 8011642:	61fb      	str	r3, [r7, #28]
 8011644:	e023      	b.n	801168e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	681a      	ldr	r2, [r3, #0]
 801164a:	4b15      	ldr	r3, [pc, #84]	; (80116a0 <xTaskCheckForTimeOut+0xc0>)
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	429a      	cmp	r2, r3
 8011650:	d007      	beq.n	8011662 <xTaskCheckForTimeOut+0x82>
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	685b      	ldr	r3, [r3, #4]
 8011656:	69ba      	ldr	r2, [r7, #24]
 8011658:	429a      	cmp	r2, r3
 801165a:	d302      	bcc.n	8011662 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801165c:	2301      	movs	r3, #1
 801165e:	61fb      	str	r3, [r7, #28]
 8011660:	e015      	b.n	801168e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011662:	683b      	ldr	r3, [r7, #0]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	697a      	ldr	r2, [r7, #20]
 8011668:	429a      	cmp	r2, r3
 801166a:	d20b      	bcs.n	8011684 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	681a      	ldr	r2, [r3, #0]
 8011670:	697b      	ldr	r3, [r7, #20]
 8011672:	1ad2      	subs	r2, r2, r3
 8011674:	683b      	ldr	r3, [r7, #0]
 8011676:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011678:	6878      	ldr	r0, [r7, #4]
 801167a:	f7ff ff9b 	bl	80115b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801167e:	2300      	movs	r3, #0
 8011680:	61fb      	str	r3, [r7, #28]
 8011682:	e004      	b.n	801168e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	2200      	movs	r2, #0
 8011688:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801168a:	2301      	movs	r3, #1
 801168c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801168e:	f000 ffc1 	bl	8012614 <vPortExitCritical>

	return xReturn;
 8011692:	69fb      	ldr	r3, [r7, #28]
}
 8011694:	4618      	mov	r0, r3
 8011696:	3720      	adds	r7, #32
 8011698:	46bd      	mov	sp, r7
 801169a:	bd80      	pop	{r7, pc}
 801169c:	200021c8 	.word	0x200021c8
 80116a0:	200021dc 	.word	0x200021dc

080116a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80116a4:	b480      	push	{r7}
 80116a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80116a8:	4b03      	ldr	r3, [pc, #12]	; (80116b8 <vTaskMissedYield+0x14>)
 80116aa:	2201      	movs	r2, #1
 80116ac:	601a      	str	r2, [r3, #0]
}
 80116ae:	bf00      	nop
 80116b0:	46bd      	mov	sp, r7
 80116b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b6:	4770      	bx	lr
 80116b8:	200021d8 	.word	0x200021d8

080116bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b082      	sub	sp, #8
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80116c4:	f000 f852 	bl	801176c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80116c8:	4b06      	ldr	r3, [pc, #24]	; (80116e4 <prvIdleTask+0x28>)
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	2b01      	cmp	r3, #1
 80116ce:	d9f9      	bls.n	80116c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80116d0:	4b05      	ldr	r3, [pc, #20]	; (80116e8 <prvIdleTask+0x2c>)
 80116d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116d6:	601a      	str	r2, [r3, #0]
 80116d8:	f3bf 8f4f 	dsb	sy
 80116dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80116e0:	e7f0      	b.n	80116c4 <prvIdleTask+0x8>
 80116e2:	bf00      	nop
 80116e4:	20001cf4 	.word	0x20001cf4
 80116e8:	e000ed04 	.word	0xe000ed04

080116ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b082      	sub	sp, #8
 80116f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80116f2:	2300      	movs	r3, #0
 80116f4:	607b      	str	r3, [r7, #4]
 80116f6:	e00c      	b.n	8011712 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80116f8:	687a      	ldr	r2, [r7, #4]
 80116fa:	4613      	mov	r3, r2
 80116fc:	009b      	lsls	r3, r3, #2
 80116fe:	4413      	add	r3, r2
 8011700:	009b      	lsls	r3, r3, #2
 8011702:	4a12      	ldr	r2, [pc, #72]	; (801174c <prvInitialiseTaskLists+0x60>)
 8011704:	4413      	add	r3, r2
 8011706:	4618      	mov	r0, r3
 8011708:	f7fe f918 	bl	800f93c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	3301      	adds	r3, #1
 8011710:	607b      	str	r3, [r7, #4]
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	2b37      	cmp	r3, #55	; 0x37
 8011716:	d9ef      	bls.n	80116f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011718:	480d      	ldr	r0, [pc, #52]	; (8011750 <prvInitialiseTaskLists+0x64>)
 801171a:	f7fe f90f 	bl	800f93c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801171e:	480d      	ldr	r0, [pc, #52]	; (8011754 <prvInitialiseTaskLists+0x68>)
 8011720:	f7fe f90c 	bl	800f93c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011724:	480c      	ldr	r0, [pc, #48]	; (8011758 <prvInitialiseTaskLists+0x6c>)
 8011726:	f7fe f909 	bl	800f93c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801172a:	480c      	ldr	r0, [pc, #48]	; (801175c <prvInitialiseTaskLists+0x70>)
 801172c:	f7fe f906 	bl	800f93c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011730:	480b      	ldr	r0, [pc, #44]	; (8011760 <prvInitialiseTaskLists+0x74>)
 8011732:	f7fe f903 	bl	800f93c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011736:	4b0b      	ldr	r3, [pc, #44]	; (8011764 <prvInitialiseTaskLists+0x78>)
 8011738:	4a05      	ldr	r2, [pc, #20]	; (8011750 <prvInitialiseTaskLists+0x64>)
 801173a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801173c:	4b0a      	ldr	r3, [pc, #40]	; (8011768 <prvInitialiseTaskLists+0x7c>)
 801173e:	4a05      	ldr	r2, [pc, #20]	; (8011754 <prvInitialiseTaskLists+0x68>)
 8011740:	601a      	str	r2, [r3, #0]
}
 8011742:	bf00      	nop
 8011744:	3708      	adds	r7, #8
 8011746:	46bd      	mov	sp, r7
 8011748:	bd80      	pop	{r7, pc}
 801174a:	bf00      	nop
 801174c:	20001cf4 	.word	0x20001cf4
 8011750:	20002154 	.word	0x20002154
 8011754:	20002168 	.word	0x20002168
 8011758:	20002184 	.word	0x20002184
 801175c:	20002198 	.word	0x20002198
 8011760:	200021b0 	.word	0x200021b0
 8011764:	2000217c 	.word	0x2000217c
 8011768:	20002180 	.word	0x20002180

0801176c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801176c:	b580      	push	{r7, lr}
 801176e:	b082      	sub	sp, #8
 8011770:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011772:	e019      	b.n	80117a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011774:	f000 ff1e 	bl	80125b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011778:	4b10      	ldr	r3, [pc, #64]	; (80117bc <prvCheckTasksWaitingTermination+0x50>)
 801177a:	68db      	ldr	r3, [r3, #12]
 801177c:	68db      	ldr	r3, [r3, #12]
 801177e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	3304      	adds	r3, #4
 8011784:	4618      	mov	r0, r3
 8011786:	f7fe f963 	bl	800fa50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801178a:	4b0d      	ldr	r3, [pc, #52]	; (80117c0 <prvCheckTasksWaitingTermination+0x54>)
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	3b01      	subs	r3, #1
 8011790:	4a0b      	ldr	r2, [pc, #44]	; (80117c0 <prvCheckTasksWaitingTermination+0x54>)
 8011792:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011794:	4b0b      	ldr	r3, [pc, #44]	; (80117c4 <prvCheckTasksWaitingTermination+0x58>)
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	3b01      	subs	r3, #1
 801179a:	4a0a      	ldr	r2, [pc, #40]	; (80117c4 <prvCheckTasksWaitingTermination+0x58>)
 801179c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801179e:	f000 ff39 	bl	8012614 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80117a2:	6878      	ldr	r0, [r7, #4]
 80117a4:	f000 f848 	bl	8011838 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80117a8:	4b06      	ldr	r3, [pc, #24]	; (80117c4 <prvCheckTasksWaitingTermination+0x58>)
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d1e1      	bne.n	8011774 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80117b0:	bf00      	nop
 80117b2:	bf00      	nop
 80117b4:	3708      	adds	r7, #8
 80117b6:	46bd      	mov	sp, r7
 80117b8:	bd80      	pop	{r7, pc}
 80117ba:	bf00      	nop
 80117bc:	20002198 	.word	0x20002198
 80117c0:	200021c4 	.word	0x200021c4
 80117c4:	200021ac 	.word	0x200021ac

080117c8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80117c8:	b480      	push	{r7}
 80117ca:	b085      	sub	sp, #20
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80117d0:	2300      	movs	r3, #0
 80117d2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80117d4:	e005      	b.n	80117e2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	3301      	adds	r3, #1
 80117da:	607b      	str	r3, [r7, #4]
			ulCount++;
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	3301      	adds	r3, #1
 80117e0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	781b      	ldrb	r3, [r3, #0]
 80117e6:	2ba5      	cmp	r3, #165	; 0xa5
 80117e8:	d0f5      	beq.n	80117d6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	089b      	lsrs	r3, r3, #2
 80117ee:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	b29b      	uxth	r3, r3
	}
 80117f4:	4618      	mov	r0, r3
 80117f6:	3714      	adds	r7, #20
 80117f8:	46bd      	mov	sp, r7
 80117fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fe:	4770      	bx	lr

08011800 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8011800:	b580      	push	{r7, lr}
 8011802:	b086      	sub	sp, #24
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d102      	bne.n	8011814 <uxTaskGetStackHighWaterMark+0x14>
 801180e:	4b09      	ldr	r3, [pc, #36]	; (8011834 <uxTaskGetStackHighWaterMark+0x34>)
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	e000      	b.n	8011816 <uxTaskGetStackHighWaterMark+0x16>
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8011818:	697b      	ldr	r3, [r7, #20]
 801181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801181c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 801181e:	6938      	ldr	r0, [r7, #16]
 8011820:	f7ff ffd2 	bl	80117c8 <prvTaskCheckFreeStackSpace>
 8011824:	4603      	mov	r3, r0
 8011826:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8011828:	68fb      	ldr	r3, [r7, #12]
	}
 801182a:	4618      	mov	r0, r3
 801182c:	3718      	adds	r7, #24
 801182e:	46bd      	mov	sp, r7
 8011830:	bd80      	pop	{r7, pc}
 8011832:	bf00      	nop
 8011834:	20001cf0 	.word	0x20001cf0

08011838 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011838:	b580      	push	{r7, lr}
 801183a:	b084      	sub	sp, #16
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	3354      	adds	r3, #84	; 0x54
 8011844:	4618      	mov	r0, r3
 8011846:	f00a fc63 	bl	801c110 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8011850:	2b00      	cmp	r3, #0
 8011852:	d108      	bne.n	8011866 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011858:	4618      	mov	r0, r3
 801185a:	f001 f813 	bl	8012884 <vPortFree>
				vPortFree( pxTCB );
 801185e:	6878      	ldr	r0, [r7, #4]
 8011860:	f001 f810 	bl	8012884 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011864:	e018      	b.n	8011898 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 801186c:	2b01      	cmp	r3, #1
 801186e:	d103      	bne.n	8011878 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011870:	6878      	ldr	r0, [r7, #4]
 8011872:	f001 f807 	bl	8012884 <vPortFree>
	}
 8011876:	e00f      	b.n	8011898 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 801187e:	2b02      	cmp	r3, #2
 8011880:	d00a      	beq.n	8011898 <prvDeleteTCB+0x60>
	__asm volatile
 8011882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011886:	f383 8811 	msr	BASEPRI, r3
 801188a:	f3bf 8f6f 	isb	sy
 801188e:	f3bf 8f4f 	dsb	sy
 8011892:	60fb      	str	r3, [r7, #12]
}
 8011894:	bf00      	nop
 8011896:	e7fe      	b.n	8011896 <prvDeleteTCB+0x5e>
	}
 8011898:	bf00      	nop
 801189a:	3710      	adds	r7, #16
 801189c:	46bd      	mov	sp, r7
 801189e:	bd80      	pop	{r7, pc}

080118a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80118a0:	b480      	push	{r7}
 80118a2:	b083      	sub	sp, #12
 80118a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80118a6:	4b0c      	ldr	r3, [pc, #48]	; (80118d8 <prvResetNextTaskUnblockTime+0x38>)
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d104      	bne.n	80118ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80118b0:	4b0a      	ldr	r3, [pc, #40]	; (80118dc <prvResetNextTaskUnblockTime+0x3c>)
 80118b2:	f04f 32ff 	mov.w	r2, #4294967295
 80118b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80118b8:	e008      	b.n	80118cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80118ba:	4b07      	ldr	r3, [pc, #28]	; (80118d8 <prvResetNextTaskUnblockTime+0x38>)
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	68db      	ldr	r3, [r3, #12]
 80118c0:	68db      	ldr	r3, [r3, #12]
 80118c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	685b      	ldr	r3, [r3, #4]
 80118c8:	4a04      	ldr	r2, [pc, #16]	; (80118dc <prvResetNextTaskUnblockTime+0x3c>)
 80118ca:	6013      	str	r3, [r2, #0]
}
 80118cc:	bf00      	nop
 80118ce:	370c      	adds	r7, #12
 80118d0:	46bd      	mov	sp, r7
 80118d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d6:	4770      	bx	lr
 80118d8:	2000217c 	.word	0x2000217c
 80118dc:	200021e4 	.word	0x200021e4

080118e0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80118e0:	b480      	push	{r7}
 80118e2:	b083      	sub	sp, #12
 80118e4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80118e6:	4b05      	ldr	r3, [pc, #20]	; (80118fc <xTaskGetCurrentTaskHandle+0x1c>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	607b      	str	r3, [r7, #4]

		return xReturn;
 80118ec:	687b      	ldr	r3, [r7, #4]
	}
 80118ee:	4618      	mov	r0, r3
 80118f0:	370c      	adds	r7, #12
 80118f2:	46bd      	mov	sp, r7
 80118f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f8:	4770      	bx	lr
 80118fa:	bf00      	nop
 80118fc:	20001cf0 	.word	0x20001cf0

08011900 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011900:	b480      	push	{r7}
 8011902:	b083      	sub	sp, #12
 8011904:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011906:	4b0b      	ldr	r3, [pc, #44]	; (8011934 <xTaskGetSchedulerState+0x34>)
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d102      	bne.n	8011914 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801190e:	2301      	movs	r3, #1
 8011910:	607b      	str	r3, [r7, #4]
 8011912:	e008      	b.n	8011926 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011914:	4b08      	ldr	r3, [pc, #32]	; (8011938 <xTaskGetSchedulerState+0x38>)
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d102      	bne.n	8011922 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801191c:	2302      	movs	r3, #2
 801191e:	607b      	str	r3, [r7, #4]
 8011920:	e001      	b.n	8011926 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011922:	2300      	movs	r3, #0
 8011924:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011926:	687b      	ldr	r3, [r7, #4]
	}
 8011928:	4618      	mov	r0, r3
 801192a:	370c      	adds	r7, #12
 801192c:	46bd      	mov	sp, r7
 801192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011932:	4770      	bx	lr
 8011934:	200021d0 	.word	0x200021d0
 8011938:	200021ec 	.word	0x200021ec

0801193c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801193c:	b580      	push	{r7, lr}
 801193e:	b084      	sub	sp, #16
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011948:	2300      	movs	r3, #0
 801194a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d051      	beq.n	80119f6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011952:	68bb      	ldr	r3, [r7, #8]
 8011954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011956:	4b2a      	ldr	r3, [pc, #168]	; (8011a00 <xTaskPriorityInherit+0xc4>)
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801195c:	429a      	cmp	r2, r3
 801195e:	d241      	bcs.n	80119e4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011960:	68bb      	ldr	r3, [r7, #8]
 8011962:	699b      	ldr	r3, [r3, #24]
 8011964:	2b00      	cmp	r3, #0
 8011966:	db06      	blt.n	8011976 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011968:	4b25      	ldr	r3, [pc, #148]	; (8011a00 <xTaskPriorityInherit+0xc4>)
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801196e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011972:	68bb      	ldr	r3, [r7, #8]
 8011974:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011976:	68bb      	ldr	r3, [r7, #8]
 8011978:	6959      	ldr	r1, [r3, #20]
 801197a:	68bb      	ldr	r3, [r7, #8]
 801197c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801197e:	4613      	mov	r3, r2
 8011980:	009b      	lsls	r3, r3, #2
 8011982:	4413      	add	r3, r2
 8011984:	009b      	lsls	r3, r3, #2
 8011986:	4a1f      	ldr	r2, [pc, #124]	; (8011a04 <xTaskPriorityInherit+0xc8>)
 8011988:	4413      	add	r3, r2
 801198a:	4299      	cmp	r1, r3
 801198c:	d122      	bne.n	80119d4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801198e:	68bb      	ldr	r3, [r7, #8]
 8011990:	3304      	adds	r3, #4
 8011992:	4618      	mov	r0, r3
 8011994:	f7fe f85c 	bl	800fa50 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011998:	4b19      	ldr	r3, [pc, #100]	; (8011a00 <xTaskPriorityInherit+0xc4>)
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801199e:	68bb      	ldr	r3, [r7, #8]
 80119a0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80119a2:	68bb      	ldr	r3, [r7, #8]
 80119a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119a6:	4b18      	ldr	r3, [pc, #96]	; (8011a08 <xTaskPriorityInherit+0xcc>)
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	429a      	cmp	r2, r3
 80119ac:	d903      	bls.n	80119b6 <xTaskPriorityInherit+0x7a>
 80119ae:	68bb      	ldr	r3, [r7, #8]
 80119b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119b2:	4a15      	ldr	r2, [pc, #84]	; (8011a08 <xTaskPriorityInherit+0xcc>)
 80119b4:	6013      	str	r3, [r2, #0]
 80119b6:	68bb      	ldr	r3, [r7, #8]
 80119b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119ba:	4613      	mov	r3, r2
 80119bc:	009b      	lsls	r3, r3, #2
 80119be:	4413      	add	r3, r2
 80119c0:	009b      	lsls	r3, r3, #2
 80119c2:	4a10      	ldr	r2, [pc, #64]	; (8011a04 <xTaskPriorityInherit+0xc8>)
 80119c4:	441a      	add	r2, r3
 80119c6:	68bb      	ldr	r3, [r7, #8]
 80119c8:	3304      	adds	r3, #4
 80119ca:	4619      	mov	r1, r3
 80119cc:	4610      	mov	r0, r2
 80119ce:	f7fd ffe2 	bl	800f996 <vListInsertEnd>
 80119d2:	e004      	b.n	80119de <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80119d4:	4b0a      	ldr	r3, [pc, #40]	; (8011a00 <xTaskPriorityInherit+0xc4>)
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119da:	68bb      	ldr	r3, [r7, #8]
 80119dc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80119de:	2301      	movs	r3, #1
 80119e0:	60fb      	str	r3, [r7, #12]
 80119e2:	e008      	b.n	80119f6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80119e4:	68bb      	ldr	r3, [r7, #8]
 80119e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80119e8:	4b05      	ldr	r3, [pc, #20]	; (8011a00 <xTaskPriorityInherit+0xc4>)
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119ee:	429a      	cmp	r2, r3
 80119f0:	d201      	bcs.n	80119f6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80119f2:	2301      	movs	r3, #1
 80119f4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80119f6:	68fb      	ldr	r3, [r7, #12]
	}
 80119f8:	4618      	mov	r0, r3
 80119fa:	3710      	adds	r7, #16
 80119fc:	46bd      	mov	sp, r7
 80119fe:	bd80      	pop	{r7, pc}
 8011a00:	20001cf0 	.word	0x20001cf0
 8011a04:	20001cf4 	.word	0x20001cf4
 8011a08:	200021cc 	.word	0x200021cc

08011a0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b086      	sub	sp, #24
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011a18:	2300      	movs	r3, #0
 8011a1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d056      	beq.n	8011ad0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011a22:	4b2e      	ldr	r3, [pc, #184]	; (8011adc <xTaskPriorityDisinherit+0xd0>)
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	693a      	ldr	r2, [r7, #16]
 8011a28:	429a      	cmp	r2, r3
 8011a2a:	d00a      	beq.n	8011a42 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a30:	f383 8811 	msr	BASEPRI, r3
 8011a34:	f3bf 8f6f 	isb	sy
 8011a38:	f3bf 8f4f 	dsb	sy
 8011a3c:	60fb      	str	r3, [r7, #12]
}
 8011a3e:	bf00      	nop
 8011a40:	e7fe      	b.n	8011a40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011a42:	693b      	ldr	r3, [r7, #16]
 8011a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d10a      	bne.n	8011a60 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a4e:	f383 8811 	msr	BASEPRI, r3
 8011a52:	f3bf 8f6f 	isb	sy
 8011a56:	f3bf 8f4f 	dsb	sy
 8011a5a:	60bb      	str	r3, [r7, #8]
}
 8011a5c:	bf00      	nop
 8011a5e:	e7fe      	b.n	8011a5e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011a60:	693b      	ldr	r3, [r7, #16]
 8011a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a64:	1e5a      	subs	r2, r3, #1
 8011a66:	693b      	ldr	r3, [r7, #16]
 8011a68:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011a6a:	693b      	ldr	r3, [r7, #16]
 8011a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a6e:	693b      	ldr	r3, [r7, #16]
 8011a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a72:	429a      	cmp	r2, r3
 8011a74:	d02c      	beq.n	8011ad0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011a76:	693b      	ldr	r3, [r7, #16]
 8011a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d128      	bne.n	8011ad0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011a7e:	693b      	ldr	r3, [r7, #16]
 8011a80:	3304      	adds	r3, #4
 8011a82:	4618      	mov	r0, r3
 8011a84:	f7fd ffe4 	bl	800fa50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011a88:	693b      	ldr	r3, [r7, #16]
 8011a8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011a8c:	693b      	ldr	r3, [r7, #16]
 8011a8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a90:	693b      	ldr	r3, [r7, #16]
 8011a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011a98:	693b      	ldr	r3, [r7, #16]
 8011a9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011a9c:	693b      	ldr	r3, [r7, #16]
 8011a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011aa0:	4b0f      	ldr	r3, [pc, #60]	; (8011ae0 <xTaskPriorityDisinherit+0xd4>)
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	429a      	cmp	r2, r3
 8011aa6:	d903      	bls.n	8011ab0 <xTaskPriorityDisinherit+0xa4>
 8011aa8:	693b      	ldr	r3, [r7, #16]
 8011aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aac:	4a0c      	ldr	r2, [pc, #48]	; (8011ae0 <xTaskPriorityDisinherit+0xd4>)
 8011aae:	6013      	str	r3, [r2, #0]
 8011ab0:	693b      	ldr	r3, [r7, #16]
 8011ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ab4:	4613      	mov	r3, r2
 8011ab6:	009b      	lsls	r3, r3, #2
 8011ab8:	4413      	add	r3, r2
 8011aba:	009b      	lsls	r3, r3, #2
 8011abc:	4a09      	ldr	r2, [pc, #36]	; (8011ae4 <xTaskPriorityDisinherit+0xd8>)
 8011abe:	441a      	add	r2, r3
 8011ac0:	693b      	ldr	r3, [r7, #16]
 8011ac2:	3304      	adds	r3, #4
 8011ac4:	4619      	mov	r1, r3
 8011ac6:	4610      	mov	r0, r2
 8011ac8:	f7fd ff65 	bl	800f996 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011acc:	2301      	movs	r3, #1
 8011ace:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011ad0:	697b      	ldr	r3, [r7, #20]
	}
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	3718      	adds	r7, #24
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bd80      	pop	{r7, pc}
 8011ada:	bf00      	nop
 8011adc:	20001cf0 	.word	0x20001cf0
 8011ae0:	200021cc 	.word	0x200021cc
 8011ae4:	20001cf4 	.word	0x20001cf4

08011ae8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b088      	sub	sp, #32
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
 8011af0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011af6:	2301      	movs	r3, #1
 8011af8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d06a      	beq.n	8011bd6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011b00:	69bb      	ldr	r3, [r7, #24]
 8011b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d10a      	bne.n	8011b1e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b0c:	f383 8811 	msr	BASEPRI, r3
 8011b10:	f3bf 8f6f 	isb	sy
 8011b14:	f3bf 8f4f 	dsb	sy
 8011b18:	60fb      	str	r3, [r7, #12]
}
 8011b1a:	bf00      	nop
 8011b1c:	e7fe      	b.n	8011b1c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011b1e:	69bb      	ldr	r3, [r7, #24]
 8011b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b22:	683a      	ldr	r2, [r7, #0]
 8011b24:	429a      	cmp	r2, r3
 8011b26:	d902      	bls.n	8011b2e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011b28:	683b      	ldr	r3, [r7, #0]
 8011b2a:	61fb      	str	r3, [r7, #28]
 8011b2c:	e002      	b.n	8011b34 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011b2e:	69bb      	ldr	r3, [r7, #24]
 8011b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b32:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011b34:	69bb      	ldr	r3, [r7, #24]
 8011b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b38:	69fa      	ldr	r2, [r7, #28]
 8011b3a:	429a      	cmp	r2, r3
 8011b3c:	d04b      	beq.n	8011bd6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011b3e:	69bb      	ldr	r3, [r7, #24]
 8011b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b42:	697a      	ldr	r2, [r7, #20]
 8011b44:	429a      	cmp	r2, r3
 8011b46:	d146      	bne.n	8011bd6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011b48:	4b25      	ldr	r3, [pc, #148]	; (8011be0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	69ba      	ldr	r2, [r7, #24]
 8011b4e:	429a      	cmp	r2, r3
 8011b50:	d10a      	bne.n	8011b68 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8011b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b56:	f383 8811 	msr	BASEPRI, r3
 8011b5a:	f3bf 8f6f 	isb	sy
 8011b5e:	f3bf 8f4f 	dsb	sy
 8011b62:	60bb      	str	r3, [r7, #8]
}
 8011b64:	bf00      	nop
 8011b66:	e7fe      	b.n	8011b66 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011b68:	69bb      	ldr	r3, [r7, #24]
 8011b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b6c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011b6e:	69bb      	ldr	r3, [r7, #24]
 8011b70:	69fa      	ldr	r2, [r7, #28]
 8011b72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011b74:	69bb      	ldr	r3, [r7, #24]
 8011b76:	699b      	ldr	r3, [r3, #24]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	db04      	blt.n	8011b86 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b7c:	69fb      	ldr	r3, [r7, #28]
 8011b7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011b82:	69bb      	ldr	r3, [r7, #24]
 8011b84:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011b86:	69bb      	ldr	r3, [r7, #24]
 8011b88:	6959      	ldr	r1, [r3, #20]
 8011b8a:	693a      	ldr	r2, [r7, #16]
 8011b8c:	4613      	mov	r3, r2
 8011b8e:	009b      	lsls	r3, r3, #2
 8011b90:	4413      	add	r3, r2
 8011b92:	009b      	lsls	r3, r3, #2
 8011b94:	4a13      	ldr	r2, [pc, #76]	; (8011be4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011b96:	4413      	add	r3, r2
 8011b98:	4299      	cmp	r1, r3
 8011b9a:	d11c      	bne.n	8011bd6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b9c:	69bb      	ldr	r3, [r7, #24]
 8011b9e:	3304      	adds	r3, #4
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	f7fd ff55 	bl	800fa50 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011ba6:	69bb      	ldr	r3, [r7, #24]
 8011ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011baa:	4b0f      	ldr	r3, [pc, #60]	; (8011be8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	429a      	cmp	r2, r3
 8011bb0:	d903      	bls.n	8011bba <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8011bb2:	69bb      	ldr	r3, [r7, #24]
 8011bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bb6:	4a0c      	ldr	r2, [pc, #48]	; (8011be8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011bb8:	6013      	str	r3, [r2, #0]
 8011bba:	69bb      	ldr	r3, [r7, #24]
 8011bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bbe:	4613      	mov	r3, r2
 8011bc0:	009b      	lsls	r3, r3, #2
 8011bc2:	4413      	add	r3, r2
 8011bc4:	009b      	lsls	r3, r3, #2
 8011bc6:	4a07      	ldr	r2, [pc, #28]	; (8011be4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011bc8:	441a      	add	r2, r3
 8011bca:	69bb      	ldr	r3, [r7, #24]
 8011bcc:	3304      	adds	r3, #4
 8011bce:	4619      	mov	r1, r3
 8011bd0:	4610      	mov	r0, r2
 8011bd2:	f7fd fee0 	bl	800f996 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011bd6:	bf00      	nop
 8011bd8:	3720      	adds	r7, #32
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bd80      	pop	{r7, pc}
 8011bde:	bf00      	nop
 8011be0:	20001cf0 	.word	0x20001cf0
 8011be4:	20001cf4 	.word	0x20001cf4
 8011be8:	200021cc 	.word	0x200021cc

08011bec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011bec:	b480      	push	{r7}
 8011bee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011bf0:	4b07      	ldr	r3, [pc, #28]	; (8011c10 <pvTaskIncrementMutexHeldCount+0x24>)
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d004      	beq.n	8011c02 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011bf8:	4b05      	ldr	r3, [pc, #20]	; (8011c10 <pvTaskIncrementMutexHeldCount+0x24>)
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011bfe:	3201      	adds	r2, #1
 8011c00:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8011c02:	4b03      	ldr	r3, [pc, #12]	; (8011c10 <pvTaskIncrementMutexHeldCount+0x24>)
 8011c04:	681b      	ldr	r3, [r3, #0]
	}
 8011c06:	4618      	mov	r0, r3
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0e:	4770      	bx	lr
 8011c10:	20001cf0 	.word	0x20001cf0

08011c14 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b084      	sub	sp, #16
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
 8011c1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011c1e:	4b21      	ldr	r3, [pc, #132]	; (8011ca4 <prvAddCurrentTaskToDelayedList+0x90>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c24:	4b20      	ldr	r3, [pc, #128]	; (8011ca8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	3304      	adds	r3, #4
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f7fd ff10 	bl	800fa50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c36:	d10a      	bne.n	8011c4e <prvAddCurrentTaskToDelayedList+0x3a>
 8011c38:	683b      	ldr	r3, [r7, #0]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d007      	beq.n	8011c4e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c3e:	4b1a      	ldr	r3, [pc, #104]	; (8011ca8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	3304      	adds	r3, #4
 8011c44:	4619      	mov	r1, r3
 8011c46:	4819      	ldr	r0, [pc, #100]	; (8011cac <prvAddCurrentTaskToDelayedList+0x98>)
 8011c48:	f7fd fea5 	bl	800f996 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011c4c:	e026      	b.n	8011c9c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011c4e:	68fa      	ldr	r2, [r7, #12]
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	4413      	add	r3, r2
 8011c54:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011c56:	4b14      	ldr	r3, [pc, #80]	; (8011ca8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	68ba      	ldr	r2, [r7, #8]
 8011c5c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011c5e:	68ba      	ldr	r2, [r7, #8]
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	429a      	cmp	r2, r3
 8011c64:	d209      	bcs.n	8011c7a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c66:	4b12      	ldr	r3, [pc, #72]	; (8011cb0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011c68:	681a      	ldr	r2, [r3, #0]
 8011c6a:	4b0f      	ldr	r3, [pc, #60]	; (8011ca8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	3304      	adds	r3, #4
 8011c70:	4619      	mov	r1, r3
 8011c72:	4610      	mov	r0, r2
 8011c74:	f7fd feb3 	bl	800f9de <vListInsert>
}
 8011c78:	e010      	b.n	8011c9c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c7a:	4b0e      	ldr	r3, [pc, #56]	; (8011cb4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011c7c:	681a      	ldr	r2, [r3, #0]
 8011c7e:	4b0a      	ldr	r3, [pc, #40]	; (8011ca8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	3304      	adds	r3, #4
 8011c84:	4619      	mov	r1, r3
 8011c86:	4610      	mov	r0, r2
 8011c88:	f7fd fea9 	bl	800f9de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011c8c:	4b0a      	ldr	r3, [pc, #40]	; (8011cb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	68ba      	ldr	r2, [r7, #8]
 8011c92:	429a      	cmp	r2, r3
 8011c94:	d202      	bcs.n	8011c9c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011c96:	4a08      	ldr	r2, [pc, #32]	; (8011cb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011c98:	68bb      	ldr	r3, [r7, #8]
 8011c9a:	6013      	str	r3, [r2, #0]
}
 8011c9c:	bf00      	nop
 8011c9e:	3710      	adds	r7, #16
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd80      	pop	{r7, pc}
 8011ca4:	200021c8 	.word	0x200021c8
 8011ca8:	20001cf0 	.word	0x20001cf0
 8011cac:	200021b0 	.word	0x200021b0
 8011cb0:	20002180 	.word	0x20002180
 8011cb4:	2000217c 	.word	0x2000217c
 8011cb8:	200021e4 	.word	0x200021e4

08011cbc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b08a      	sub	sp, #40	; 0x28
 8011cc0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011cc6:	f000 fb07 	bl	80122d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011cca:	4b1c      	ldr	r3, [pc, #112]	; (8011d3c <xTimerCreateTimerTask+0x80>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d021      	beq.n	8011d16 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011cda:	1d3a      	adds	r2, r7, #4
 8011cdc:	f107 0108 	add.w	r1, r7, #8
 8011ce0:	f107 030c 	add.w	r3, r7, #12
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f7fd fe0f 	bl	800f908 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011cea:	6879      	ldr	r1, [r7, #4]
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	68fa      	ldr	r2, [r7, #12]
 8011cf0:	9202      	str	r2, [sp, #8]
 8011cf2:	9301      	str	r3, [sp, #4]
 8011cf4:	2302      	movs	r3, #2
 8011cf6:	9300      	str	r3, [sp, #0]
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	460a      	mov	r2, r1
 8011cfc:	4910      	ldr	r1, [pc, #64]	; (8011d40 <xTimerCreateTimerTask+0x84>)
 8011cfe:	4811      	ldr	r0, [pc, #68]	; (8011d44 <xTimerCreateTimerTask+0x88>)
 8011d00:	f7fe ff6e 	bl	8010be0 <xTaskCreateStatic>
 8011d04:	4603      	mov	r3, r0
 8011d06:	4a10      	ldr	r2, [pc, #64]	; (8011d48 <xTimerCreateTimerTask+0x8c>)
 8011d08:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011d0a:	4b0f      	ldr	r3, [pc, #60]	; (8011d48 <xTimerCreateTimerTask+0x8c>)
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d001      	beq.n	8011d16 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011d12:	2301      	movs	r3, #1
 8011d14:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011d16:	697b      	ldr	r3, [r7, #20]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d10a      	bne.n	8011d32 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8011d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d20:	f383 8811 	msr	BASEPRI, r3
 8011d24:	f3bf 8f6f 	isb	sy
 8011d28:	f3bf 8f4f 	dsb	sy
 8011d2c:	613b      	str	r3, [r7, #16]
}
 8011d2e:	bf00      	nop
 8011d30:	e7fe      	b.n	8011d30 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011d32:	697b      	ldr	r3, [r7, #20]
}
 8011d34:	4618      	mov	r0, r3
 8011d36:	3718      	adds	r7, #24
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd80      	pop	{r7, pc}
 8011d3c:	20002220 	.word	0x20002220
 8011d40:	08021944 	.word	0x08021944
 8011d44:	08011e81 	.word	0x08011e81
 8011d48:	20002224 	.word	0x20002224

08011d4c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b08a      	sub	sp, #40	; 0x28
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	60f8      	str	r0, [r7, #12]
 8011d54:	60b9      	str	r1, [r7, #8]
 8011d56:	607a      	str	r2, [r7, #4]
 8011d58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d10a      	bne.n	8011d7a <xTimerGenericCommand+0x2e>
	__asm volatile
 8011d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d68:	f383 8811 	msr	BASEPRI, r3
 8011d6c:	f3bf 8f6f 	isb	sy
 8011d70:	f3bf 8f4f 	dsb	sy
 8011d74:	623b      	str	r3, [r7, #32]
}
 8011d76:	bf00      	nop
 8011d78:	e7fe      	b.n	8011d78 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011d7a:	4b1a      	ldr	r3, [pc, #104]	; (8011de4 <xTimerGenericCommand+0x98>)
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d02a      	beq.n	8011dd8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011d82:	68bb      	ldr	r3, [r7, #8]
 8011d84:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011d8e:	68bb      	ldr	r3, [r7, #8]
 8011d90:	2b05      	cmp	r3, #5
 8011d92:	dc18      	bgt.n	8011dc6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011d94:	f7ff fdb4 	bl	8011900 <xTaskGetSchedulerState>
 8011d98:	4603      	mov	r3, r0
 8011d9a:	2b02      	cmp	r3, #2
 8011d9c:	d109      	bne.n	8011db2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011d9e:	4b11      	ldr	r3, [pc, #68]	; (8011de4 <xTimerGenericCommand+0x98>)
 8011da0:	6818      	ldr	r0, [r3, #0]
 8011da2:	f107 0110 	add.w	r1, r7, #16
 8011da6:	2300      	movs	r3, #0
 8011da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011daa:	f7fe f86f 	bl	800fe8c <xQueueGenericSend>
 8011dae:	6278      	str	r0, [r7, #36]	; 0x24
 8011db0:	e012      	b.n	8011dd8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011db2:	4b0c      	ldr	r3, [pc, #48]	; (8011de4 <xTimerGenericCommand+0x98>)
 8011db4:	6818      	ldr	r0, [r3, #0]
 8011db6:	f107 0110 	add.w	r1, r7, #16
 8011dba:	2300      	movs	r3, #0
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	f7fe f865 	bl	800fe8c <xQueueGenericSend>
 8011dc2:	6278      	str	r0, [r7, #36]	; 0x24
 8011dc4:	e008      	b.n	8011dd8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011dc6:	4b07      	ldr	r3, [pc, #28]	; (8011de4 <xTimerGenericCommand+0x98>)
 8011dc8:	6818      	ldr	r0, [r3, #0]
 8011dca:	f107 0110 	add.w	r1, r7, #16
 8011dce:	2300      	movs	r3, #0
 8011dd0:	683a      	ldr	r2, [r7, #0]
 8011dd2:	f7fe f959 	bl	8010088 <xQueueGenericSendFromISR>
 8011dd6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011dda:	4618      	mov	r0, r3
 8011ddc:	3728      	adds	r7, #40	; 0x28
 8011dde:	46bd      	mov	sp, r7
 8011de0:	bd80      	pop	{r7, pc}
 8011de2:	bf00      	nop
 8011de4:	20002220 	.word	0x20002220

08011de8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b088      	sub	sp, #32
 8011dec:	af02      	add	r7, sp, #8
 8011dee:	6078      	str	r0, [r7, #4]
 8011df0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011df2:	4b22      	ldr	r3, [pc, #136]	; (8011e7c <prvProcessExpiredTimer+0x94>)
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	68db      	ldr	r3, [r3, #12]
 8011df8:	68db      	ldr	r3, [r3, #12]
 8011dfa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011dfc:	697b      	ldr	r3, [r7, #20]
 8011dfe:	3304      	adds	r3, #4
 8011e00:	4618      	mov	r0, r3
 8011e02:	f7fd fe25 	bl	800fa50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011e06:	697b      	ldr	r3, [r7, #20]
 8011e08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011e0c:	f003 0304 	and.w	r3, r3, #4
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d022      	beq.n	8011e5a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011e14:	697b      	ldr	r3, [r7, #20]
 8011e16:	699a      	ldr	r2, [r3, #24]
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	18d1      	adds	r1, r2, r3
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	683a      	ldr	r2, [r7, #0]
 8011e20:	6978      	ldr	r0, [r7, #20]
 8011e22:	f000 f8d1 	bl	8011fc8 <prvInsertTimerInActiveList>
 8011e26:	4603      	mov	r3, r0
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d01f      	beq.n	8011e6c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	9300      	str	r3, [sp, #0]
 8011e30:	2300      	movs	r3, #0
 8011e32:	687a      	ldr	r2, [r7, #4]
 8011e34:	2100      	movs	r1, #0
 8011e36:	6978      	ldr	r0, [r7, #20]
 8011e38:	f7ff ff88 	bl	8011d4c <xTimerGenericCommand>
 8011e3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011e3e:	693b      	ldr	r3, [r7, #16]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d113      	bne.n	8011e6c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8011e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e48:	f383 8811 	msr	BASEPRI, r3
 8011e4c:	f3bf 8f6f 	isb	sy
 8011e50:	f3bf 8f4f 	dsb	sy
 8011e54:	60fb      	str	r3, [r7, #12]
}
 8011e56:	bf00      	nop
 8011e58:	e7fe      	b.n	8011e58 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011e5a:	697b      	ldr	r3, [r7, #20]
 8011e5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011e60:	f023 0301 	bic.w	r3, r3, #1
 8011e64:	b2da      	uxtb	r2, r3
 8011e66:	697b      	ldr	r3, [r7, #20]
 8011e68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011e6c:	697b      	ldr	r3, [r7, #20]
 8011e6e:	6a1b      	ldr	r3, [r3, #32]
 8011e70:	6978      	ldr	r0, [r7, #20]
 8011e72:	4798      	blx	r3
}
 8011e74:	bf00      	nop
 8011e76:	3718      	adds	r7, #24
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	bd80      	pop	{r7, pc}
 8011e7c:	20002218 	.word	0x20002218

08011e80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011e80:	b580      	push	{r7, lr}
 8011e82:	b084      	sub	sp, #16
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011e88:	f107 0308 	add.w	r3, r7, #8
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	f000 f857 	bl	8011f40 <prvGetNextExpireTime>
 8011e92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011e94:	68bb      	ldr	r3, [r7, #8]
 8011e96:	4619      	mov	r1, r3
 8011e98:	68f8      	ldr	r0, [r7, #12]
 8011e9a:	f000 f803 	bl	8011ea4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011e9e:	f000 f8d5 	bl	801204c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011ea2:	e7f1      	b.n	8011e88 <prvTimerTask+0x8>

08011ea4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b084      	sub	sp, #16
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
 8011eac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011eae:	f7ff f8f3 	bl	8011098 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011eb2:	f107 0308 	add.w	r3, r7, #8
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f000 f866 	bl	8011f88 <prvSampleTimeNow>
 8011ebc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011ebe:	68bb      	ldr	r3, [r7, #8]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d130      	bne.n	8011f26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011ec4:	683b      	ldr	r3, [r7, #0]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d10a      	bne.n	8011ee0 <prvProcessTimerOrBlockTask+0x3c>
 8011eca:	687a      	ldr	r2, [r7, #4]
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	429a      	cmp	r2, r3
 8011ed0:	d806      	bhi.n	8011ee0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011ed2:	f7ff f8ef 	bl	80110b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011ed6:	68f9      	ldr	r1, [r7, #12]
 8011ed8:	6878      	ldr	r0, [r7, #4]
 8011eda:	f7ff ff85 	bl	8011de8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011ede:	e024      	b.n	8011f2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d008      	beq.n	8011ef8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011ee6:	4b13      	ldr	r3, [pc, #76]	; (8011f34 <prvProcessTimerOrBlockTask+0x90>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d101      	bne.n	8011ef4 <prvProcessTimerOrBlockTask+0x50>
 8011ef0:	2301      	movs	r3, #1
 8011ef2:	e000      	b.n	8011ef6 <prvProcessTimerOrBlockTask+0x52>
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011ef8:	4b0f      	ldr	r3, [pc, #60]	; (8011f38 <prvProcessTimerOrBlockTask+0x94>)
 8011efa:	6818      	ldr	r0, [r3, #0]
 8011efc:	687a      	ldr	r2, [r7, #4]
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	1ad3      	subs	r3, r2, r3
 8011f02:	683a      	ldr	r2, [r7, #0]
 8011f04:	4619      	mov	r1, r3
 8011f06:	f7fe fe37 	bl	8010b78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011f0a:	f7ff f8d3 	bl	80110b4 <xTaskResumeAll>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d10a      	bne.n	8011f2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011f14:	4b09      	ldr	r3, [pc, #36]	; (8011f3c <prvProcessTimerOrBlockTask+0x98>)
 8011f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f1a:	601a      	str	r2, [r3, #0]
 8011f1c:	f3bf 8f4f 	dsb	sy
 8011f20:	f3bf 8f6f 	isb	sy
}
 8011f24:	e001      	b.n	8011f2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011f26:	f7ff f8c5 	bl	80110b4 <xTaskResumeAll>
}
 8011f2a:	bf00      	nop
 8011f2c:	3710      	adds	r7, #16
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	bd80      	pop	{r7, pc}
 8011f32:	bf00      	nop
 8011f34:	2000221c 	.word	0x2000221c
 8011f38:	20002220 	.word	0x20002220
 8011f3c:	e000ed04 	.word	0xe000ed04

08011f40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011f40:	b480      	push	{r7}
 8011f42:	b085      	sub	sp, #20
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011f48:	4b0e      	ldr	r3, [pc, #56]	; (8011f84 <prvGetNextExpireTime+0x44>)
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d101      	bne.n	8011f56 <prvGetNextExpireTime+0x16>
 8011f52:	2201      	movs	r2, #1
 8011f54:	e000      	b.n	8011f58 <prvGetNextExpireTime+0x18>
 8011f56:	2200      	movs	r2, #0
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d105      	bne.n	8011f70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011f64:	4b07      	ldr	r3, [pc, #28]	; (8011f84 <prvGetNextExpireTime+0x44>)
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	68db      	ldr	r3, [r3, #12]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	60fb      	str	r3, [r7, #12]
 8011f6e:	e001      	b.n	8011f74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011f70:	2300      	movs	r3, #0
 8011f72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011f74:	68fb      	ldr	r3, [r7, #12]
}
 8011f76:	4618      	mov	r0, r3
 8011f78:	3714      	adds	r7, #20
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f80:	4770      	bx	lr
 8011f82:	bf00      	nop
 8011f84:	20002218 	.word	0x20002218

08011f88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b084      	sub	sp, #16
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011f90:	f7ff f92e 	bl	80111f0 <xTaskGetTickCount>
 8011f94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011f96:	4b0b      	ldr	r3, [pc, #44]	; (8011fc4 <prvSampleTimeNow+0x3c>)
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	68fa      	ldr	r2, [r7, #12]
 8011f9c:	429a      	cmp	r2, r3
 8011f9e:	d205      	bcs.n	8011fac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011fa0:	f000 f936 	bl	8012210 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	2201      	movs	r2, #1
 8011fa8:	601a      	str	r2, [r3, #0]
 8011faa:	e002      	b.n	8011fb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	2200      	movs	r2, #0
 8011fb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011fb2:	4a04      	ldr	r2, [pc, #16]	; (8011fc4 <prvSampleTimeNow+0x3c>)
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011fb8:	68fb      	ldr	r3, [r7, #12]
}
 8011fba:	4618      	mov	r0, r3
 8011fbc:	3710      	adds	r7, #16
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}
 8011fc2:	bf00      	nop
 8011fc4:	20002228 	.word	0x20002228

08011fc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b086      	sub	sp, #24
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	60f8      	str	r0, [r7, #12]
 8011fd0:	60b9      	str	r1, [r7, #8]
 8011fd2:	607a      	str	r2, [r7, #4]
 8011fd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	68ba      	ldr	r2, [r7, #8]
 8011fde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	68fa      	ldr	r2, [r7, #12]
 8011fe4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011fe6:	68ba      	ldr	r2, [r7, #8]
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	429a      	cmp	r2, r3
 8011fec:	d812      	bhi.n	8012014 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011fee:	687a      	ldr	r2, [r7, #4]
 8011ff0:	683b      	ldr	r3, [r7, #0]
 8011ff2:	1ad2      	subs	r2, r2, r3
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	699b      	ldr	r3, [r3, #24]
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	d302      	bcc.n	8012002 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011ffc:	2301      	movs	r3, #1
 8011ffe:	617b      	str	r3, [r7, #20]
 8012000:	e01b      	b.n	801203a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012002:	4b10      	ldr	r3, [pc, #64]	; (8012044 <prvInsertTimerInActiveList+0x7c>)
 8012004:	681a      	ldr	r2, [r3, #0]
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	3304      	adds	r3, #4
 801200a:	4619      	mov	r1, r3
 801200c:	4610      	mov	r0, r2
 801200e:	f7fd fce6 	bl	800f9de <vListInsert>
 8012012:	e012      	b.n	801203a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012014:	687a      	ldr	r2, [r7, #4]
 8012016:	683b      	ldr	r3, [r7, #0]
 8012018:	429a      	cmp	r2, r3
 801201a:	d206      	bcs.n	801202a <prvInsertTimerInActiveList+0x62>
 801201c:	68ba      	ldr	r2, [r7, #8]
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	429a      	cmp	r2, r3
 8012022:	d302      	bcc.n	801202a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012024:	2301      	movs	r3, #1
 8012026:	617b      	str	r3, [r7, #20]
 8012028:	e007      	b.n	801203a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801202a:	4b07      	ldr	r3, [pc, #28]	; (8012048 <prvInsertTimerInActiveList+0x80>)
 801202c:	681a      	ldr	r2, [r3, #0]
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	3304      	adds	r3, #4
 8012032:	4619      	mov	r1, r3
 8012034:	4610      	mov	r0, r2
 8012036:	f7fd fcd2 	bl	800f9de <vListInsert>
		}
	}

	return xProcessTimerNow;
 801203a:	697b      	ldr	r3, [r7, #20]
}
 801203c:	4618      	mov	r0, r3
 801203e:	3718      	adds	r7, #24
 8012040:	46bd      	mov	sp, r7
 8012042:	bd80      	pop	{r7, pc}
 8012044:	2000221c 	.word	0x2000221c
 8012048:	20002218 	.word	0x20002218

0801204c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b08e      	sub	sp, #56	; 0x38
 8012050:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012052:	e0ca      	b.n	80121ea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	2b00      	cmp	r3, #0
 8012058:	da18      	bge.n	801208c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801205a:	1d3b      	adds	r3, r7, #4
 801205c:	3304      	adds	r3, #4
 801205e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012062:	2b00      	cmp	r3, #0
 8012064:	d10a      	bne.n	801207c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8012066:	f04f 0350 	mov.w	r3, #80	; 0x50
 801206a:	f383 8811 	msr	BASEPRI, r3
 801206e:	f3bf 8f6f 	isb	sy
 8012072:	f3bf 8f4f 	dsb	sy
 8012076:	61fb      	str	r3, [r7, #28]
}
 8012078:	bf00      	nop
 801207a:	e7fe      	b.n	801207a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801207c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012082:	6850      	ldr	r0, [r2, #4]
 8012084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012086:	6892      	ldr	r2, [r2, #8]
 8012088:	4611      	mov	r1, r2
 801208a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	2b00      	cmp	r3, #0
 8012090:	f2c0 80ab 	blt.w	80121ea <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801209a:	695b      	ldr	r3, [r3, #20]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d004      	beq.n	80120aa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80120a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120a2:	3304      	adds	r3, #4
 80120a4:	4618      	mov	r0, r3
 80120a6:	f7fd fcd3 	bl	800fa50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80120aa:	463b      	mov	r3, r7
 80120ac:	4618      	mov	r0, r3
 80120ae:	f7ff ff6b 	bl	8011f88 <prvSampleTimeNow>
 80120b2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	2b09      	cmp	r3, #9
 80120b8:	f200 8096 	bhi.w	80121e8 <prvProcessReceivedCommands+0x19c>
 80120bc:	a201      	add	r2, pc, #4	; (adr r2, 80120c4 <prvProcessReceivedCommands+0x78>)
 80120be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120c2:	bf00      	nop
 80120c4:	080120ed 	.word	0x080120ed
 80120c8:	080120ed 	.word	0x080120ed
 80120cc:	080120ed 	.word	0x080120ed
 80120d0:	08012161 	.word	0x08012161
 80120d4:	08012175 	.word	0x08012175
 80120d8:	080121bf 	.word	0x080121bf
 80120dc:	080120ed 	.word	0x080120ed
 80120e0:	080120ed 	.word	0x080120ed
 80120e4:	08012161 	.word	0x08012161
 80120e8:	08012175 	.word	0x08012175
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80120ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80120f2:	f043 0301 	orr.w	r3, r3, #1
 80120f6:	b2da      	uxtb	r2, r3
 80120f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80120fe:	68ba      	ldr	r2, [r7, #8]
 8012100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012102:	699b      	ldr	r3, [r3, #24]
 8012104:	18d1      	adds	r1, r2, r3
 8012106:	68bb      	ldr	r3, [r7, #8]
 8012108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801210a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801210c:	f7ff ff5c 	bl	8011fc8 <prvInsertTimerInActiveList>
 8012110:	4603      	mov	r3, r0
 8012112:	2b00      	cmp	r3, #0
 8012114:	d069      	beq.n	80121ea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012118:	6a1b      	ldr	r3, [r3, #32]
 801211a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801211c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801211e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012120:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012124:	f003 0304 	and.w	r3, r3, #4
 8012128:	2b00      	cmp	r3, #0
 801212a:	d05e      	beq.n	80121ea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801212c:	68ba      	ldr	r2, [r7, #8]
 801212e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012130:	699b      	ldr	r3, [r3, #24]
 8012132:	441a      	add	r2, r3
 8012134:	2300      	movs	r3, #0
 8012136:	9300      	str	r3, [sp, #0]
 8012138:	2300      	movs	r3, #0
 801213a:	2100      	movs	r1, #0
 801213c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801213e:	f7ff fe05 	bl	8011d4c <xTimerGenericCommand>
 8012142:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012144:	6a3b      	ldr	r3, [r7, #32]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d14f      	bne.n	80121ea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801214a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801214e:	f383 8811 	msr	BASEPRI, r3
 8012152:	f3bf 8f6f 	isb	sy
 8012156:	f3bf 8f4f 	dsb	sy
 801215a:	61bb      	str	r3, [r7, #24]
}
 801215c:	bf00      	nop
 801215e:	e7fe      	b.n	801215e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012166:	f023 0301 	bic.w	r3, r3, #1
 801216a:	b2da      	uxtb	r2, r3
 801216c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801216e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012172:	e03a      	b.n	80121ea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801217a:	f043 0301 	orr.w	r3, r3, #1
 801217e:	b2da      	uxtb	r2, r3
 8012180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012186:	68ba      	ldr	r2, [r7, #8]
 8012188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801218a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801218c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801218e:	699b      	ldr	r3, [r3, #24]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d10a      	bne.n	80121aa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8012194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012198:	f383 8811 	msr	BASEPRI, r3
 801219c:	f3bf 8f6f 	isb	sy
 80121a0:	f3bf 8f4f 	dsb	sy
 80121a4:	617b      	str	r3, [r7, #20]
}
 80121a6:	bf00      	nop
 80121a8:	e7fe      	b.n	80121a8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80121aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ac:	699a      	ldr	r2, [r3, #24]
 80121ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b0:	18d1      	adds	r1, r2, r3
 80121b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80121b8:	f7ff ff06 	bl	8011fc8 <prvInsertTimerInActiveList>
					break;
 80121bc:	e015      	b.n	80121ea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80121be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80121c4:	f003 0302 	and.w	r3, r3, #2
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d103      	bne.n	80121d4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80121cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80121ce:	f000 fb59 	bl	8012884 <vPortFree>
 80121d2:	e00a      	b.n	80121ea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80121d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80121da:	f023 0301 	bic.w	r3, r3, #1
 80121de:	b2da      	uxtb	r2, r3
 80121e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80121e6:	e000      	b.n	80121ea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80121e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80121ea:	4b08      	ldr	r3, [pc, #32]	; (801220c <prvProcessReceivedCommands+0x1c0>)
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	1d39      	adds	r1, r7, #4
 80121f0:	2200      	movs	r2, #0
 80121f2:	4618      	mov	r0, r3
 80121f4:	f7fd ffe4 	bl	80101c0 <xQueueReceive>
 80121f8:	4603      	mov	r3, r0
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	f47f af2a 	bne.w	8012054 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8012200:	bf00      	nop
 8012202:	bf00      	nop
 8012204:	3730      	adds	r7, #48	; 0x30
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}
 801220a:	bf00      	nop
 801220c:	20002220 	.word	0x20002220

08012210 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012210:	b580      	push	{r7, lr}
 8012212:	b088      	sub	sp, #32
 8012214:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012216:	e048      	b.n	80122aa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012218:	4b2d      	ldr	r3, [pc, #180]	; (80122d0 <prvSwitchTimerLists+0xc0>)
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	68db      	ldr	r3, [r3, #12]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012222:	4b2b      	ldr	r3, [pc, #172]	; (80122d0 <prvSwitchTimerLists+0xc0>)
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	68db      	ldr	r3, [r3, #12]
 8012228:	68db      	ldr	r3, [r3, #12]
 801222a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	3304      	adds	r3, #4
 8012230:	4618      	mov	r0, r3
 8012232:	f7fd fc0d 	bl	800fa50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	6a1b      	ldr	r3, [r3, #32]
 801223a:	68f8      	ldr	r0, [r7, #12]
 801223c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012244:	f003 0304 	and.w	r3, r3, #4
 8012248:	2b00      	cmp	r3, #0
 801224a:	d02e      	beq.n	80122aa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	699b      	ldr	r3, [r3, #24]
 8012250:	693a      	ldr	r2, [r7, #16]
 8012252:	4413      	add	r3, r2
 8012254:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012256:	68ba      	ldr	r2, [r7, #8]
 8012258:	693b      	ldr	r3, [r7, #16]
 801225a:	429a      	cmp	r2, r3
 801225c:	d90e      	bls.n	801227c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	68ba      	ldr	r2, [r7, #8]
 8012262:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	68fa      	ldr	r2, [r7, #12]
 8012268:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801226a:	4b19      	ldr	r3, [pc, #100]	; (80122d0 <prvSwitchTimerLists+0xc0>)
 801226c:	681a      	ldr	r2, [r3, #0]
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	3304      	adds	r3, #4
 8012272:	4619      	mov	r1, r3
 8012274:	4610      	mov	r0, r2
 8012276:	f7fd fbb2 	bl	800f9de <vListInsert>
 801227a:	e016      	b.n	80122aa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801227c:	2300      	movs	r3, #0
 801227e:	9300      	str	r3, [sp, #0]
 8012280:	2300      	movs	r3, #0
 8012282:	693a      	ldr	r2, [r7, #16]
 8012284:	2100      	movs	r1, #0
 8012286:	68f8      	ldr	r0, [r7, #12]
 8012288:	f7ff fd60 	bl	8011d4c <xTimerGenericCommand>
 801228c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d10a      	bne.n	80122aa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012298:	f383 8811 	msr	BASEPRI, r3
 801229c:	f3bf 8f6f 	isb	sy
 80122a0:	f3bf 8f4f 	dsb	sy
 80122a4:	603b      	str	r3, [r7, #0]
}
 80122a6:	bf00      	nop
 80122a8:	e7fe      	b.n	80122a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80122aa:	4b09      	ldr	r3, [pc, #36]	; (80122d0 <prvSwitchTimerLists+0xc0>)
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d1b1      	bne.n	8012218 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80122b4:	4b06      	ldr	r3, [pc, #24]	; (80122d0 <prvSwitchTimerLists+0xc0>)
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80122ba:	4b06      	ldr	r3, [pc, #24]	; (80122d4 <prvSwitchTimerLists+0xc4>)
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	4a04      	ldr	r2, [pc, #16]	; (80122d0 <prvSwitchTimerLists+0xc0>)
 80122c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80122c2:	4a04      	ldr	r2, [pc, #16]	; (80122d4 <prvSwitchTimerLists+0xc4>)
 80122c4:	697b      	ldr	r3, [r7, #20]
 80122c6:	6013      	str	r3, [r2, #0]
}
 80122c8:	bf00      	nop
 80122ca:	3718      	adds	r7, #24
 80122cc:	46bd      	mov	sp, r7
 80122ce:	bd80      	pop	{r7, pc}
 80122d0:	20002218 	.word	0x20002218
 80122d4:	2000221c 	.word	0x2000221c

080122d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b082      	sub	sp, #8
 80122dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80122de:	f000 f969 	bl	80125b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80122e2:	4b15      	ldr	r3, [pc, #84]	; (8012338 <prvCheckForValidListAndQueue+0x60>)
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d120      	bne.n	801232c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80122ea:	4814      	ldr	r0, [pc, #80]	; (801233c <prvCheckForValidListAndQueue+0x64>)
 80122ec:	f7fd fb26 	bl	800f93c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80122f0:	4813      	ldr	r0, [pc, #76]	; (8012340 <prvCheckForValidListAndQueue+0x68>)
 80122f2:	f7fd fb23 	bl	800f93c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80122f6:	4b13      	ldr	r3, [pc, #76]	; (8012344 <prvCheckForValidListAndQueue+0x6c>)
 80122f8:	4a10      	ldr	r2, [pc, #64]	; (801233c <prvCheckForValidListAndQueue+0x64>)
 80122fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80122fc:	4b12      	ldr	r3, [pc, #72]	; (8012348 <prvCheckForValidListAndQueue+0x70>)
 80122fe:	4a10      	ldr	r2, [pc, #64]	; (8012340 <prvCheckForValidListAndQueue+0x68>)
 8012300:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012302:	2300      	movs	r3, #0
 8012304:	9300      	str	r3, [sp, #0]
 8012306:	4b11      	ldr	r3, [pc, #68]	; (801234c <prvCheckForValidListAndQueue+0x74>)
 8012308:	4a11      	ldr	r2, [pc, #68]	; (8012350 <prvCheckForValidListAndQueue+0x78>)
 801230a:	2110      	movs	r1, #16
 801230c:	200a      	movs	r0, #10
 801230e:	f7fd fc31 	bl	800fb74 <xQueueGenericCreateStatic>
 8012312:	4603      	mov	r3, r0
 8012314:	4a08      	ldr	r2, [pc, #32]	; (8012338 <prvCheckForValidListAndQueue+0x60>)
 8012316:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012318:	4b07      	ldr	r3, [pc, #28]	; (8012338 <prvCheckForValidListAndQueue+0x60>)
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d005      	beq.n	801232c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012320:	4b05      	ldr	r3, [pc, #20]	; (8012338 <prvCheckForValidListAndQueue+0x60>)
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	490b      	ldr	r1, [pc, #44]	; (8012354 <prvCheckForValidListAndQueue+0x7c>)
 8012326:	4618      	mov	r0, r3
 8012328:	f7fe fbfc 	bl	8010b24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801232c:	f000 f972 	bl	8012614 <vPortExitCritical>
}
 8012330:	bf00      	nop
 8012332:	46bd      	mov	sp, r7
 8012334:	bd80      	pop	{r7, pc}
 8012336:	bf00      	nop
 8012338:	20002220 	.word	0x20002220
 801233c:	200021f0 	.word	0x200021f0
 8012340:	20002204 	.word	0x20002204
 8012344:	20002218 	.word	0x20002218
 8012348:	2000221c 	.word	0x2000221c
 801234c:	200022cc 	.word	0x200022cc
 8012350:	2000222c 	.word	0x2000222c
 8012354:	0802194c 	.word	0x0802194c

08012358 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012358:	b480      	push	{r7}
 801235a:	b085      	sub	sp, #20
 801235c:	af00      	add	r7, sp, #0
 801235e:	60f8      	str	r0, [r7, #12]
 8012360:	60b9      	str	r1, [r7, #8]
 8012362:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	3b04      	subs	r3, #4
 8012368:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012370:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	3b04      	subs	r3, #4
 8012376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012378:	68bb      	ldr	r3, [r7, #8]
 801237a:	f023 0201 	bic.w	r2, r3, #1
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	3b04      	subs	r3, #4
 8012386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012388:	4a0c      	ldr	r2, [pc, #48]	; (80123bc <pxPortInitialiseStack+0x64>)
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	3b14      	subs	r3, #20
 8012392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012394:	687a      	ldr	r2, [r7, #4]
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	3b04      	subs	r3, #4
 801239e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	f06f 0202 	mvn.w	r2, #2
 80123a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	3b20      	subs	r3, #32
 80123ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80123ae:	68fb      	ldr	r3, [r7, #12]
}
 80123b0:	4618      	mov	r0, r3
 80123b2:	3714      	adds	r7, #20
 80123b4:	46bd      	mov	sp, r7
 80123b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ba:	4770      	bx	lr
 80123bc:	080123c1 	.word	0x080123c1

080123c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80123c0:	b480      	push	{r7}
 80123c2:	b085      	sub	sp, #20
 80123c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80123c6:	2300      	movs	r3, #0
 80123c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80123ca:	4b12      	ldr	r3, [pc, #72]	; (8012414 <prvTaskExitError+0x54>)
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123d2:	d00a      	beq.n	80123ea <prvTaskExitError+0x2a>
	__asm volatile
 80123d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123d8:	f383 8811 	msr	BASEPRI, r3
 80123dc:	f3bf 8f6f 	isb	sy
 80123e0:	f3bf 8f4f 	dsb	sy
 80123e4:	60fb      	str	r3, [r7, #12]
}
 80123e6:	bf00      	nop
 80123e8:	e7fe      	b.n	80123e8 <prvTaskExitError+0x28>
	__asm volatile
 80123ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123ee:	f383 8811 	msr	BASEPRI, r3
 80123f2:	f3bf 8f6f 	isb	sy
 80123f6:	f3bf 8f4f 	dsb	sy
 80123fa:	60bb      	str	r3, [r7, #8]
}
 80123fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80123fe:	bf00      	nop
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d0fc      	beq.n	8012400 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012406:	bf00      	nop
 8012408:	bf00      	nop
 801240a:	3714      	adds	r7, #20
 801240c:	46bd      	mov	sp, r7
 801240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012412:	4770      	bx	lr
 8012414:	20000108 	.word	0x20000108
	...

08012420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012420:	4b07      	ldr	r3, [pc, #28]	; (8012440 <pxCurrentTCBConst2>)
 8012422:	6819      	ldr	r1, [r3, #0]
 8012424:	6808      	ldr	r0, [r1, #0]
 8012426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801242a:	f380 8809 	msr	PSP, r0
 801242e:	f3bf 8f6f 	isb	sy
 8012432:	f04f 0000 	mov.w	r0, #0
 8012436:	f380 8811 	msr	BASEPRI, r0
 801243a:	4770      	bx	lr
 801243c:	f3af 8000 	nop.w

08012440 <pxCurrentTCBConst2>:
 8012440:	20001cf0 	.word	0x20001cf0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012444:	bf00      	nop
 8012446:	bf00      	nop

08012448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012448:	4808      	ldr	r0, [pc, #32]	; (801246c <prvPortStartFirstTask+0x24>)
 801244a:	6800      	ldr	r0, [r0, #0]
 801244c:	6800      	ldr	r0, [r0, #0]
 801244e:	f380 8808 	msr	MSP, r0
 8012452:	f04f 0000 	mov.w	r0, #0
 8012456:	f380 8814 	msr	CONTROL, r0
 801245a:	b662      	cpsie	i
 801245c:	b661      	cpsie	f
 801245e:	f3bf 8f4f 	dsb	sy
 8012462:	f3bf 8f6f 	isb	sy
 8012466:	df00      	svc	0
 8012468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801246a:	bf00      	nop
 801246c:	e000ed08 	.word	0xe000ed08

08012470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b086      	sub	sp, #24
 8012474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012476:	4b46      	ldr	r3, [pc, #280]	; (8012590 <xPortStartScheduler+0x120>)
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	4a46      	ldr	r2, [pc, #280]	; (8012594 <xPortStartScheduler+0x124>)
 801247c:	4293      	cmp	r3, r2
 801247e:	d10a      	bne.n	8012496 <xPortStartScheduler+0x26>
	__asm volatile
 8012480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012484:	f383 8811 	msr	BASEPRI, r3
 8012488:	f3bf 8f6f 	isb	sy
 801248c:	f3bf 8f4f 	dsb	sy
 8012490:	613b      	str	r3, [r7, #16]
}
 8012492:	bf00      	nop
 8012494:	e7fe      	b.n	8012494 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012496:	4b3e      	ldr	r3, [pc, #248]	; (8012590 <xPortStartScheduler+0x120>)
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	4a3f      	ldr	r2, [pc, #252]	; (8012598 <xPortStartScheduler+0x128>)
 801249c:	4293      	cmp	r3, r2
 801249e:	d10a      	bne.n	80124b6 <xPortStartScheduler+0x46>
	__asm volatile
 80124a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124a4:	f383 8811 	msr	BASEPRI, r3
 80124a8:	f3bf 8f6f 	isb	sy
 80124ac:	f3bf 8f4f 	dsb	sy
 80124b0:	60fb      	str	r3, [r7, #12]
}
 80124b2:	bf00      	nop
 80124b4:	e7fe      	b.n	80124b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80124b6:	4b39      	ldr	r3, [pc, #228]	; (801259c <xPortStartScheduler+0x12c>)
 80124b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80124ba:	697b      	ldr	r3, [r7, #20]
 80124bc:	781b      	ldrb	r3, [r3, #0]
 80124be:	b2db      	uxtb	r3, r3
 80124c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80124c2:	697b      	ldr	r3, [r7, #20]
 80124c4:	22ff      	movs	r2, #255	; 0xff
 80124c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80124c8:	697b      	ldr	r3, [r7, #20]
 80124ca:	781b      	ldrb	r3, [r3, #0]
 80124cc:	b2db      	uxtb	r3, r3
 80124ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80124d0:	78fb      	ldrb	r3, [r7, #3]
 80124d2:	b2db      	uxtb	r3, r3
 80124d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80124d8:	b2da      	uxtb	r2, r3
 80124da:	4b31      	ldr	r3, [pc, #196]	; (80125a0 <xPortStartScheduler+0x130>)
 80124dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80124de:	4b31      	ldr	r3, [pc, #196]	; (80125a4 <xPortStartScheduler+0x134>)
 80124e0:	2207      	movs	r2, #7
 80124e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80124e4:	e009      	b.n	80124fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80124e6:	4b2f      	ldr	r3, [pc, #188]	; (80125a4 <xPortStartScheduler+0x134>)
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	3b01      	subs	r3, #1
 80124ec:	4a2d      	ldr	r2, [pc, #180]	; (80125a4 <xPortStartScheduler+0x134>)
 80124ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80124f0:	78fb      	ldrb	r3, [r7, #3]
 80124f2:	b2db      	uxtb	r3, r3
 80124f4:	005b      	lsls	r3, r3, #1
 80124f6:	b2db      	uxtb	r3, r3
 80124f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80124fa:	78fb      	ldrb	r3, [r7, #3]
 80124fc:	b2db      	uxtb	r3, r3
 80124fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012502:	2b80      	cmp	r3, #128	; 0x80
 8012504:	d0ef      	beq.n	80124e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012506:	4b27      	ldr	r3, [pc, #156]	; (80125a4 <xPortStartScheduler+0x134>)
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	f1c3 0307 	rsb	r3, r3, #7
 801250e:	2b04      	cmp	r3, #4
 8012510:	d00a      	beq.n	8012528 <xPortStartScheduler+0xb8>
	__asm volatile
 8012512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012516:	f383 8811 	msr	BASEPRI, r3
 801251a:	f3bf 8f6f 	isb	sy
 801251e:	f3bf 8f4f 	dsb	sy
 8012522:	60bb      	str	r3, [r7, #8]
}
 8012524:	bf00      	nop
 8012526:	e7fe      	b.n	8012526 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012528:	4b1e      	ldr	r3, [pc, #120]	; (80125a4 <xPortStartScheduler+0x134>)
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	021b      	lsls	r3, r3, #8
 801252e:	4a1d      	ldr	r2, [pc, #116]	; (80125a4 <xPortStartScheduler+0x134>)
 8012530:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012532:	4b1c      	ldr	r3, [pc, #112]	; (80125a4 <xPortStartScheduler+0x134>)
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801253a:	4a1a      	ldr	r2, [pc, #104]	; (80125a4 <xPortStartScheduler+0x134>)
 801253c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	b2da      	uxtb	r2, r3
 8012542:	697b      	ldr	r3, [r7, #20]
 8012544:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012546:	4b18      	ldr	r3, [pc, #96]	; (80125a8 <xPortStartScheduler+0x138>)
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	4a17      	ldr	r2, [pc, #92]	; (80125a8 <xPortStartScheduler+0x138>)
 801254c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012550:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012552:	4b15      	ldr	r3, [pc, #84]	; (80125a8 <xPortStartScheduler+0x138>)
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	4a14      	ldr	r2, [pc, #80]	; (80125a8 <xPortStartScheduler+0x138>)
 8012558:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801255c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801255e:	f000 f8dd 	bl	801271c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012562:	4b12      	ldr	r3, [pc, #72]	; (80125ac <xPortStartScheduler+0x13c>)
 8012564:	2200      	movs	r2, #0
 8012566:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012568:	f000 f8fc 	bl	8012764 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801256c:	4b10      	ldr	r3, [pc, #64]	; (80125b0 <xPortStartScheduler+0x140>)
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	4a0f      	ldr	r2, [pc, #60]	; (80125b0 <xPortStartScheduler+0x140>)
 8012572:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012576:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012578:	f7ff ff66 	bl	8012448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801257c:	f7fe ff02 	bl	8011384 <vTaskSwitchContext>
	prvTaskExitError();
 8012580:	f7ff ff1e 	bl	80123c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012584:	2300      	movs	r3, #0
}
 8012586:	4618      	mov	r0, r3
 8012588:	3718      	adds	r7, #24
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}
 801258e:	bf00      	nop
 8012590:	e000ed00 	.word	0xe000ed00
 8012594:	410fc271 	.word	0x410fc271
 8012598:	410fc270 	.word	0x410fc270
 801259c:	e000e400 	.word	0xe000e400
 80125a0:	2000231c 	.word	0x2000231c
 80125a4:	20002320 	.word	0x20002320
 80125a8:	e000ed20 	.word	0xe000ed20
 80125ac:	20000108 	.word	0x20000108
 80125b0:	e000ef34 	.word	0xe000ef34

080125b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80125b4:	b480      	push	{r7}
 80125b6:	b083      	sub	sp, #12
 80125b8:	af00      	add	r7, sp, #0
	__asm volatile
 80125ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125be:	f383 8811 	msr	BASEPRI, r3
 80125c2:	f3bf 8f6f 	isb	sy
 80125c6:	f3bf 8f4f 	dsb	sy
 80125ca:	607b      	str	r3, [r7, #4]
}
 80125cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80125ce:	4b0f      	ldr	r3, [pc, #60]	; (801260c <vPortEnterCritical+0x58>)
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	3301      	adds	r3, #1
 80125d4:	4a0d      	ldr	r2, [pc, #52]	; (801260c <vPortEnterCritical+0x58>)
 80125d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80125d8:	4b0c      	ldr	r3, [pc, #48]	; (801260c <vPortEnterCritical+0x58>)
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	2b01      	cmp	r3, #1
 80125de:	d10f      	bne.n	8012600 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80125e0:	4b0b      	ldr	r3, [pc, #44]	; (8012610 <vPortEnterCritical+0x5c>)
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	b2db      	uxtb	r3, r3
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d00a      	beq.n	8012600 <vPortEnterCritical+0x4c>
	__asm volatile
 80125ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125ee:	f383 8811 	msr	BASEPRI, r3
 80125f2:	f3bf 8f6f 	isb	sy
 80125f6:	f3bf 8f4f 	dsb	sy
 80125fa:	603b      	str	r3, [r7, #0]
}
 80125fc:	bf00      	nop
 80125fe:	e7fe      	b.n	80125fe <vPortEnterCritical+0x4a>
	}
}
 8012600:	bf00      	nop
 8012602:	370c      	adds	r7, #12
 8012604:	46bd      	mov	sp, r7
 8012606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801260a:	4770      	bx	lr
 801260c:	20000108 	.word	0x20000108
 8012610:	e000ed04 	.word	0xe000ed04

08012614 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012614:	b480      	push	{r7}
 8012616:	b083      	sub	sp, #12
 8012618:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801261a:	4b12      	ldr	r3, [pc, #72]	; (8012664 <vPortExitCritical+0x50>)
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d10a      	bne.n	8012638 <vPortExitCritical+0x24>
	__asm volatile
 8012622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012626:	f383 8811 	msr	BASEPRI, r3
 801262a:	f3bf 8f6f 	isb	sy
 801262e:	f3bf 8f4f 	dsb	sy
 8012632:	607b      	str	r3, [r7, #4]
}
 8012634:	bf00      	nop
 8012636:	e7fe      	b.n	8012636 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012638:	4b0a      	ldr	r3, [pc, #40]	; (8012664 <vPortExitCritical+0x50>)
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	3b01      	subs	r3, #1
 801263e:	4a09      	ldr	r2, [pc, #36]	; (8012664 <vPortExitCritical+0x50>)
 8012640:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012642:	4b08      	ldr	r3, [pc, #32]	; (8012664 <vPortExitCritical+0x50>)
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d105      	bne.n	8012656 <vPortExitCritical+0x42>
 801264a:	2300      	movs	r3, #0
 801264c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801264e:	683b      	ldr	r3, [r7, #0]
 8012650:	f383 8811 	msr	BASEPRI, r3
}
 8012654:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012656:	bf00      	nop
 8012658:	370c      	adds	r7, #12
 801265a:	46bd      	mov	sp, r7
 801265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012660:	4770      	bx	lr
 8012662:	bf00      	nop
 8012664:	20000108 	.word	0x20000108
	...

08012670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012670:	f3ef 8009 	mrs	r0, PSP
 8012674:	f3bf 8f6f 	isb	sy
 8012678:	4b15      	ldr	r3, [pc, #84]	; (80126d0 <pxCurrentTCBConst>)
 801267a:	681a      	ldr	r2, [r3, #0]
 801267c:	f01e 0f10 	tst.w	lr, #16
 8012680:	bf08      	it	eq
 8012682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801268a:	6010      	str	r0, [r2, #0]
 801268c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012690:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012694:	f380 8811 	msr	BASEPRI, r0
 8012698:	f3bf 8f4f 	dsb	sy
 801269c:	f3bf 8f6f 	isb	sy
 80126a0:	f7fe fe70 	bl	8011384 <vTaskSwitchContext>
 80126a4:	f04f 0000 	mov.w	r0, #0
 80126a8:	f380 8811 	msr	BASEPRI, r0
 80126ac:	bc09      	pop	{r0, r3}
 80126ae:	6819      	ldr	r1, [r3, #0]
 80126b0:	6808      	ldr	r0, [r1, #0]
 80126b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126b6:	f01e 0f10 	tst.w	lr, #16
 80126ba:	bf08      	it	eq
 80126bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80126c0:	f380 8809 	msr	PSP, r0
 80126c4:	f3bf 8f6f 	isb	sy
 80126c8:	4770      	bx	lr
 80126ca:	bf00      	nop
 80126cc:	f3af 8000 	nop.w

080126d0 <pxCurrentTCBConst>:
 80126d0:	20001cf0 	.word	0x20001cf0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80126d4:	bf00      	nop
 80126d6:	bf00      	nop

080126d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80126d8:	b580      	push	{r7, lr}
 80126da:	b082      	sub	sp, #8
 80126dc:	af00      	add	r7, sp, #0
	__asm volatile
 80126de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126e2:	f383 8811 	msr	BASEPRI, r3
 80126e6:	f3bf 8f6f 	isb	sy
 80126ea:	f3bf 8f4f 	dsb	sy
 80126ee:	607b      	str	r3, [r7, #4]
}
 80126f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80126f2:	f7fe fd8d 	bl	8011210 <xTaskIncrementTick>
 80126f6:	4603      	mov	r3, r0
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d003      	beq.n	8012704 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80126fc:	4b06      	ldr	r3, [pc, #24]	; (8012718 <xPortSysTickHandler+0x40>)
 80126fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012702:	601a      	str	r2, [r3, #0]
 8012704:	2300      	movs	r3, #0
 8012706:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	f383 8811 	msr	BASEPRI, r3
}
 801270e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012710:	bf00      	nop
 8012712:	3708      	adds	r7, #8
 8012714:	46bd      	mov	sp, r7
 8012716:	bd80      	pop	{r7, pc}
 8012718:	e000ed04 	.word	0xe000ed04

0801271c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801271c:	b480      	push	{r7}
 801271e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012720:	4b0b      	ldr	r3, [pc, #44]	; (8012750 <vPortSetupTimerInterrupt+0x34>)
 8012722:	2200      	movs	r2, #0
 8012724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012726:	4b0b      	ldr	r3, [pc, #44]	; (8012754 <vPortSetupTimerInterrupt+0x38>)
 8012728:	2200      	movs	r2, #0
 801272a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801272c:	4b0a      	ldr	r3, [pc, #40]	; (8012758 <vPortSetupTimerInterrupt+0x3c>)
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	4a0a      	ldr	r2, [pc, #40]	; (801275c <vPortSetupTimerInterrupt+0x40>)
 8012732:	fba2 2303 	umull	r2, r3, r2, r3
 8012736:	099b      	lsrs	r3, r3, #6
 8012738:	4a09      	ldr	r2, [pc, #36]	; (8012760 <vPortSetupTimerInterrupt+0x44>)
 801273a:	3b01      	subs	r3, #1
 801273c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801273e:	4b04      	ldr	r3, [pc, #16]	; (8012750 <vPortSetupTimerInterrupt+0x34>)
 8012740:	2207      	movs	r2, #7
 8012742:	601a      	str	r2, [r3, #0]
}
 8012744:	bf00      	nop
 8012746:	46bd      	mov	sp, r7
 8012748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801274c:	4770      	bx	lr
 801274e:	bf00      	nop
 8012750:	e000e010 	.word	0xe000e010
 8012754:	e000e018 	.word	0xe000e018
 8012758:	20000000 	.word	0x20000000
 801275c:	10624dd3 	.word	0x10624dd3
 8012760:	e000e014 	.word	0xe000e014

08012764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012764:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012774 <vPortEnableVFP+0x10>
 8012768:	6801      	ldr	r1, [r0, #0]
 801276a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801276e:	6001      	str	r1, [r0, #0]
 8012770:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012772:	bf00      	nop
 8012774:	e000ed88 	.word	0xe000ed88

08012778 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012778:	b480      	push	{r7}
 801277a:	b085      	sub	sp, #20
 801277c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801277e:	f3ef 8305 	mrs	r3, IPSR
 8012782:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	2b0f      	cmp	r3, #15
 8012788:	d914      	bls.n	80127b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801278a:	4a17      	ldr	r2, [pc, #92]	; (80127e8 <vPortValidateInterruptPriority+0x70>)
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	4413      	add	r3, r2
 8012790:	781b      	ldrb	r3, [r3, #0]
 8012792:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012794:	4b15      	ldr	r3, [pc, #84]	; (80127ec <vPortValidateInterruptPriority+0x74>)
 8012796:	781b      	ldrb	r3, [r3, #0]
 8012798:	7afa      	ldrb	r2, [r7, #11]
 801279a:	429a      	cmp	r2, r3
 801279c:	d20a      	bcs.n	80127b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801279e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127a2:	f383 8811 	msr	BASEPRI, r3
 80127a6:	f3bf 8f6f 	isb	sy
 80127aa:	f3bf 8f4f 	dsb	sy
 80127ae:	607b      	str	r3, [r7, #4]
}
 80127b0:	bf00      	nop
 80127b2:	e7fe      	b.n	80127b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80127b4:	4b0e      	ldr	r3, [pc, #56]	; (80127f0 <vPortValidateInterruptPriority+0x78>)
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80127bc:	4b0d      	ldr	r3, [pc, #52]	; (80127f4 <vPortValidateInterruptPriority+0x7c>)
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	429a      	cmp	r2, r3
 80127c2:	d90a      	bls.n	80127da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80127c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127c8:	f383 8811 	msr	BASEPRI, r3
 80127cc:	f3bf 8f6f 	isb	sy
 80127d0:	f3bf 8f4f 	dsb	sy
 80127d4:	603b      	str	r3, [r7, #0]
}
 80127d6:	bf00      	nop
 80127d8:	e7fe      	b.n	80127d8 <vPortValidateInterruptPriority+0x60>
	}
 80127da:	bf00      	nop
 80127dc:	3714      	adds	r7, #20
 80127de:	46bd      	mov	sp, r7
 80127e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e4:	4770      	bx	lr
 80127e6:	bf00      	nop
 80127e8:	e000e3f0 	.word	0xe000e3f0
 80127ec:	2000231c 	.word	0x2000231c
 80127f0:	e000ed0c 	.word	0xe000ed0c
 80127f4:	20002320 	.word	0x20002320

080127f8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b084      	sub	sp, #16
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8012800:	2300      	movs	r3, #0
 8012802:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	f003 0307 	and.w	r3, r3, #7
 801280a:	2b00      	cmp	r3, #0
 801280c:	d004      	beq.n	8012818 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	f023 0307 	bic.w	r3, r3, #7
 8012814:	3308      	adds	r3, #8
 8012816:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8012818:	f7fe fc3e 	bl	8011098 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 801281c:	4b16      	ldr	r3, [pc, #88]	; (8012878 <pvPortMalloc+0x80>)
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d105      	bne.n	8012830 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8012824:	4b15      	ldr	r3, [pc, #84]	; (801287c <pvPortMalloc+0x84>)
 8012826:	f023 0307 	bic.w	r3, r3, #7
 801282a:	461a      	mov	r2, r3
 801282c:	4b12      	ldr	r3, [pc, #72]	; (8012878 <pvPortMalloc+0x80>)
 801282e:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8012830:	4b13      	ldr	r3, [pc, #76]	; (8012880 <pvPortMalloc+0x88>)
 8012832:	681a      	ldr	r2, [r3, #0]
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	4413      	add	r3, r2
 8012838:	f24b 1227 	movw	r2, #45351	; 0xb127
 801283c:	4293      	cmp	r3, r2
 801283e:	d813      	bhi.n	8012868 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8012840:	4b0f      	ldr	r3, [pc, #60]	; (8012880 <pvPortMalloc+0x88>)
 8012842:	681a      	ldr	r2, [r3, #0]
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	441a      	add	r2, r3
 8012848:	4b0d      	ldr	r3, [pc, #52]	; (8012880 <pvPortMalloc+0x88>)
 801284a:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 801284c:	429a      	cmp	r2, r3
 801284e:	d90b      	bls.n	8012868 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8012850:	4b09      	ldr	r3, [pc, #36]	; (8012878 <pvPortMalloc+0x80>)
 8012852:	681a      	ldr	r2, [r3, #0]
 8012854:	4b0a      	ldr	r3, [pc, #40]	; (8012880 <pvPortMalloc+0x88>)
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	4413      	add	r3, r2
 801285a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 801285c:	4b08      	ldr	r3, [pc, #32]	; (8012880 <pvPortMalloc+0x88>)
 801285e:	681a      	ldr	r2, [r3, #0]
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	4413      	add	r3, r2
 8012864:	4a06      	ldr	r2, [pc, #24]	; (8012880 <pvPortMalloc+0x88>)
 8012866:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012868:	f7fe fc24 	bl	80110b4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 801286c:	68fb      	ldr	r3, [r7, #12]
}
 801286e:	4618      	mov	r0, r3
 8012870:	3710      	adds	r7, #16
 8012872:	46bd      	mov	sp, r7
 8012874:	bd80      	pop	{r7, pc}
 8012876:	bf00      	nop
 8012878:	2000d458 	.word	0x2000d458
 801287c:	2000232c 	.word	0x2000232c
 8012880:	2000d454 	.word	0x2000d454

08012884 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012884:	b480      	push	{r7}
 8012886:	b085      	sub	sp, #20
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d00a      	beq.n	80128a8 <vPortFree+0x24>
	__asm volatile
 8012892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012896:	f383 8811 	msr	BASEPRI, r3
 801289a:	f3bf 8f6f 	isb	sy
 801289e:	f3bf 8f4f 	dsb	sy
 80128a2:	60fb      	str	r3, [r7, #12]
}
 80128a4:	bf00      	nop
 80128a6:	e7fe      	b.n	80128a6 <vPortFree+0x22>
}
 80128a8:	bf00      	nop
 80128aa:	3714      	adds	r7, #20
 80128ac:	46bd      	mov	sp, r7
 80128ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b2:	4770      	bx	lr

080128b4 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 80128b4:	b480      	push	{r7}
 80128b6:	b083      	sub	sp, #12
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
 80128bc:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 80128be:	683a      	ldr	r2, [r7, #0]
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	4293      	cmp	r3, r2
 80128c4:	bf38      	it	cc
 80128c6:	4613      	movcc	r3, r2
}
 80128c8:	4618      	mov	r0, r3
 80128ca:	370c      	adds	r7, #12
 80128cc:	46bd      	mov	sp, r7
 80128ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d2:	4770      	bx	lr

080128d4 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 80128d4:	b480      	push	{r7}
 80128d6:	b083      	sub	sp, #12
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
 80128dc:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 80128de:	683a      	ldr	r2, [r7, #0]
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	4293      	cmp	r3, r2
 80128e4:	bf28      	it	cs
 80128e6:	4613      	movcs	r3, r2
}
 80128e8:	4618      	mov	r0, r3
 80128ea:	370c      	adds	r7, #12
 80128ec:	46bd      	mov	sp, r7
 80128ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f2:	4770      	bx	lr

080128f4 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 80128f4:	b480      	push	{r7}
 80128f6:	b083      	sub	sp, #12
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
 80128fc:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	683a      	ldr	r2, [r7, #0]
 8012902:	fbb3 f2f2 	udiv	r2, r3, r2
 8012906:	6839      	ldr	r1, [r7, #0]
 8012908:	fb01 f202 	mul.w	r2, r1, r2
 801290c:	1a9b      	subs	r3, r3, r2
 801290e:	687a      	ldr	r2, [r7, #4]
 8012910:	1ad3      	subs	r3, r2, r3
}
 8012912:	4618      	mov	r0, r3
 8012914:	370c      	adds	r7, #12
 8012916:	46bd      	mov	sp, r7
 8012918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291c:	4770      	bx	lr

0801291e <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 801291e:	b580      	push	{r7, lr}
 8012920:	b082      	sub	sp, #8
 8012922:	af00      	add	r7, sp, #0
 8012924:	6078      	str	r0, [r7, #4]
 8012926:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8012928:	687a      	ldr	r2, [r7, #4]
 801292a:	683b      	ldr	r3, [r7, #0]
 801292c:	4413      	add	r3, r2
 801292e:	3b01      	subs	r3, #1
 8012930:	6839      	ldr	r1, [r7, #0]
 8012932:	4618      	mov	r0, r3
 8012934:	f7ff ffde 	bl	80128f4 <lfs_aligndown>
 8012938:	4603      	mov	r3, r0
}
 801293a:	4618      	mov	r0, r3
 801293c:	3708      	adds	r7, #8
 801293e:	46bd      	mov	sp, r7
 8012940:	bd80      	pop	{r7, pc}

08012942 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8012942:	b480      	push	{r7}
 8012944:	b083      	sub	sp, #12
 8012946:	af00      	add	r7, sp, #0
 8012948:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	3b01      	subs	r3, #1
 801294e:	fab3 f383 	clz	r3, r3
 8012952:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8012956:	4618      	mov	r0, r3
 8012958:	370c      	adds	r7, #12
 801295a:	46bd      	mov	sp, r7
 801295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012960:	4770      	bx	lr

08012962 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8012962:	b480      	push	{r7}
 8012964:	b083      	sub	sp, #12
 8012966:	af00      	add	r7, sp, #0
 8012968:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	fa93 f3a3 	rbit	r3, r3
 8012970:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8012974:	4618      	mov	r0, r3
 8012976:	370c      	adds	r7, #12
 8012978:	46bd      	mov	sp, r7
 801297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297e:	4770      	bx	lr

08012980 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8012980:	b580      	push	{r7, lr}
 8012982:	b082      	sub	sp, #8
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8012988:	6878      	ldr	r0, [r7, #4]
 801298a:	f7ee f9ad 	bl	8000ce8 <__popcountsi2>
 801298e:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8012990:	4618      	mov	r0, r3
 8012992:	3708      	adds	r7, #8
 8012994:	46bd      	mov	sp, r7
 8012996:	bd80      	pop	{r7, pc}

08012998 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8012998:	b480      	push	{r7}
 801299a:	b083      	sub	sp, #12
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
 80129a0:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 80129a2:	687a      	ldr	r2, [r7, #4]
 80129a4:	683b      	ldr	r3, [r7, #0]
 80129a6:	1ad3      	subs	r3, r2, r3
}
 80129a8:	4618      	mov	r0, r3
 80129aa:	370c      	adds	r7, #12
 80129ac:	46bd      	mov	sp, r7
 80129ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b2:	4770      	bx	lr

080129b4 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 80129b4:	b480      	push	{r7}
 80129b6:	b083      	sub	sp, #12
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 80129bc:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 80129be:	4618      	mov	r0, r3
 80129c0:	370c      	adds	r7, #12
 80129c2:	46bd      	mov	sp, r7
 80129c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c8:	4770      	bx	lr

080129ca <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 80129ca:	b580      	push	{r7, lr}
 80129cc:	b082      	sub	sp, #8
 80129ce:	af00      	add	r7, sp, #0
 80129d0:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 80129d2:	6878      	ldr	r0, [r7, #4]
 80129d4:	f7ff ffee 	bl	80129b4 <lfs_fromle32>
 80129d8:	4603      	mov	r3, r0
}
 80129da:	4618      	mov	r0, r3
 80129dc:	3708      	adds	r7, #8
 80129de:	46bd      	mov	sp, r7
 80129e0:	bd80      	pop	{r7, pc}

080129e2 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 80129e2:	b480      	push	{r7}
 80129e4:	b083      	sub	sp, #12
 80129e6:	af00      	add	r7, sp, #0
 80129e8:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 80129ee:	4618      	mov	r0, r3
 80129f0:	370c      	adds	r7, #12
 80129f2:	46bd      	mov	sp, r7
 80129f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f8:	4770      	bx	lr

080129fa <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 80129fa:	b580      	push	{r7, lr}
 80129fc:	b082      	sub	sp, #8
 80129fe:	af00      	add	r7, sp, #0
 8012a00:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8012a02:	6878      	ldr	r0, [r7, #4]
 8012a04:	f7ff ffed 	bl	80129e2 <lfs_frombe32>
 8012a08:	4603      	mov	r3, r0
}
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	3708      	adds	r7, #8
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}

08012a12 <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 8012a12:	b580      	push	{r7, lr}
 8012a14:	b082      	sub	sp, #8
 8012a16:	af00      	add	r7, sp, #0
 8012a18:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 8012a1a:	6878      	ldr	r0, [r7, #4]
 8012a1c:	f008 f90c 	bl	801ac38 <malloc>
 8012a20:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8012a22:	4618      	mov	r0, r3
 8012a24:	3708      	adds	r7, #8
 8012a26:	46bd      	mov	sp, r7
 8012a28:	bd80      	pop	{r7, pc}

08012a2a <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8012a2a:	b580      	push	{r7, lr}
 8012a2c:	b082      	sub	sp, #8
 8012a2e:	af00      	add	r7, sp, #0
 8012a30:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 8012a32:	6878      	ldr	r0, [r7, #4]
 8012a34:	f008 f908 	bl	801ac48 <free>
#else
    (void)p;
#endif
}
 8012a38:	bf00      	nop
 8012a3a:	3708      	adds	r7, #8
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	bd80      	pop	{r7, pc}

08012a40 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8012a40:	b480      	push	{r7}
 8012a42:	b083      	sub	sp, #12
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
 8012a48:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8012a4a:	683b      	ldr	r3, [r7, #0]
 8012a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8012a50:	601a      	str	r2, [r3, #0]
}
 8012a52:	bf00      	nop
 8012a54:	370c      	adds	r7, #12
 8012a56:	46bd      	mov	sp, r7
 8012a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5c:	4770      	bx	lr

08012a5e <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8012a5e:	b580      	push	{r7, lr}
 8012a60:	b082      	sub	sp, #8
 8012a62:	af00      	add	r7, sp, #0
 8012a64:	6078      	str	r0, [r7, #4]
 8012a66:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8012a68:	683b      	ldr	r3, [r7, #0]
 8012a6a:	68d8      	ldr	r0, [r3, #12]
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a72:	461a      	mov	r2, r3
 8012a74:	21ff      	movs	r1, #255	; 0xff
 8012a76:	f009 fa47 	bl	801bf08 <memset>
    pcache->block = LFS_BLOCK_NULL;
 8012a7a:	683b      	ldr	r3, [r7, #0]
 8012a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8012a80:	601a      	str	r2, [r3, #0]
}
 8012a82:	bf00      	nop
 8012a84:	3708      	adds	r7, #8
 8012a86:	46bd      	mov	sp, r7
 8012a88:	bd80      	pop	{r7, pc}
	...

08012a8c <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8012a8c:	b5b0      	push	{r4, r5, r7, lr}
 8012a8e:	b08a      	sub	sp, #40	; 0x28
 8012a90:	af02      	add	r7, sp, #8
 8012a92:	60f8      	str	r0, [r7, #12]
 8012a94:	60b9      	str	r1, [r7, #8]
 8012a96:	607a      	str	r2, [r7, #4]
 8012a98:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8012a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a9c:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012aa2:	6a1b      	ldr	r3, [r3, #32]
 8012aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012aa6:	429a      	cmp	r2, r3
 8012aa8:	d208      	bcs.n	8012abc <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 8012aaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012aae:	441a      	add	r2, r3
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012ab4:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 8012ab6:	429a      	cmp	r2, r3
 8012ab8:	f240 811b 	bls.w	8012cf2 <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 8012abc:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8012ac0:	e11c      	b.n	8012cfc <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8012ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ac4:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8012ac6:	68bb      	ldr	r3, [r7, #8]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d03f      	beq.n	8012b4c <lfs_bd_read+0xc0>
 8012acc:	68bb      	ldr	r3, [r7, #8]
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ad2:	429a      	cmp	r2, r3
 8012ad4:	d13a      	bne.n	8012b4c <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 8012ad6:	68bb      	ldr	r3, [r7, #8]
 8012ad8:	685a      	ldr	r2, [r3, #4]
 8012ada:	68bb      	ldr	r3, [r7, #8]
 8012adc:	689b      	ldr	r3, [r3, #8]
 8012ade:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8012ae0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012ae2:	429a      	cmp	r2, r3
 8012ae4:	d232      	bcs.n	8012b4c <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 8012ae6:	68bb      	ldr	r3, [r7, #8]
 8012ae8:	685b      	ldr	r3, [r3, #4]
 8012aea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012aec:	429a      	cmp	r2, r3
 8012aee:	d324      	bcc.n	8012b3a <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8012af0:	68bb      	ldr	r3, [r7, #8]
 8012af2:	689a      	ldr	r2, [r3, #8]
 8012af4:	68bb      	ldr	r3, [r7, #8]
 8012af6:	6859      	ldr	r1, [r3, #4]
 8012af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012afa:	1acb      	subs	r3, r1, r3
 8012afc:	4413      	add	r3, r2
 8012afe:	4619      	mov	r1, r3
 8012b00:	69b8      	ldr	r0, [r7, #24]
 8012b02:	f7ff fee7 	bl	80128d4 <lfs_min>
 8012b06:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8012b08:	68bb      	ldr	r3, [r7, #8]
 8012b0a:	68da      	ldr	r2, [r3, #12]
 8012b0c:	68bb      	ldr	r3, [r7, #8]
 8012b0e:	685b      	ldr	r3, [r3, #4]
 8012b10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012b12:	1acb      	subs	r3, r1, r3
 8012b14:	4413      	add	r3, r2
 8012b16:	69ba      	ldr	r2, [r7, #24]
 8012b18:	4619      	mov	r1, r3
 8012b1a:	69f8      	ldr	r0, [r7, #28]
 8012b1c:	f009 fbc9 	bl	801c2b2 <memcpy>

                data += diff;
 8012b20:	69fa      	ldr	r2, [r7, #28]
 8012b22:	69bb      	ldr	r3, [r7, #24]
 8012b24:	4413      	add	r3, r2
 8012b26:	61fb      	str	r3, [r7, #28]
                off += diff;
 8012b28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b2a:	69bb      	ldr	r3, [r7, #24]
 8012b2c:	4413      	add	r3, r2
 8012b2e:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8012b30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012b32:	69bb      	ldr	r3, [r7, #24]
 8012b34:	1ad3      	subs	r3, r2, r3
 8012b36:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8012b38:	e0db      	b.n	8012cf2 <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8012b3a:	68bb      	ldr	r3, [r7, #8]
 8012b3c:	685a      	ldr	r2, [r3, #4]
 8012b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b40:	1ad3      	subs	r3, r2, r3
 8012b42:	4619      	mov	r1, r3
 8012b44:	69b8      	ldr	r0, [r7, #24]
 8012b46:	f7ff fec5 	bl	80128d4 <lfs_min>
 8012b4a:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b52:	429a      	cmp	r2, r3
 8012b54:	d13a      	bne.n	8012bcc <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	685a      	ldr	r2, [r3, #4]
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	689b      	ldr	r3, [r3, #8]
 8012b5e:	4413      	add	r3, r2
        if (block == rcache->block &&
 8012b60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b62:	429a      	cmp	r2, r3
 8012b64:	d232      	bcs.n	8012bcc <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	685b      	ldr	r3, [r3, #4]
 8012b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b6c:	429a      	cmp	r2, r3
 8012b6e:	d324      	bcc.n	8012bba <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	689a      	ldr	r2, [r3, #8]
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	6859      	ldr	r1, [r3, #4]
 8012b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b7a:	1acb      	subs	r3, r1, r3
 8012b7c:	4413      	add	r3, r2
 8012b7e:	4619      	mov	r1, r3
 8012b80:	69b8      	ldr	r0, [r7, #24]
 8012b82:	f7ff fea7 	bl	80128d4 <lfs_min>
 8012b86:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	68da      	ldr	r2, [r3, #12]
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	685b      	ldr	r3, [r3, #4]
 8012b90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012b92:	1acb      	subs	r3, r1, r3
 8012b94:	4413      	add	r3, r2
 8012b96:	69ba      	ldr	r2, [r7, #24]
 8012b98:	4619      	mov	r1, r3
 8012b9a:	69f8      	ldr	r0, [r7, #28]
 8012b9c:	f009 fb89 	bl	801c2b2 <memcpy>

                data += diff;
 8012ba0:	69fa      	ldr	r2, [r7, #28]
 8012ba2:	69bb      	ldr	r3, [r7, #24]
 8012ba4:	4413      	add	r3, r2
 8012ba6:	61fb      	str	r3, [r7, #28]
                off += diff;
 8012ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012baa:	69bb      	ldr	r3, [r7, #24]
 8012bac:	4413      	add	r3, r2
 8012bae:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8012bb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012bb2:	69bb      	ldr	r3, [r7, #24]
 8012bb4:	1ad3      	subs	r3, r2, r3
 8012bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8012bb8:	e09b      	b.n	8012cf2 <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	685a      	ldr	r2, [r3, #4]
 8012bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bc0:	1ad3      	subs	r3, r2, r3
 8012bc2:	4619      	mov	r1, r3
 8012bc4:	69b8      	ldr	r0, [r7, #24]
 8012bc6:	f7ff fe85 	bl	80128d4 <lfs_min>
 8012bca:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8012bcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012bce:	683b      	ldr	r3, [r7, #0]
 8012bd0:	429a      	cmp	r2, r3
 8012bd2:	d336      	bcc.n	8012c42 <lfs_bd_read+0x1b6>
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012bd8:	695a      	ldr	r2, [r3, #20]
 8012bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8012be0:	fb01 f202 	mul.w	r2, r1, r2
 8012be4:	1a9b      	subs	r3, r3, r2
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d12b      	bne.n	8012c42 <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012bee:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8012bf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012bf2:	429a      	cmp	r2, r3
 8012bf4:	d325      	bcc.n	8012c42 <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012bfa:	695b      	ldr	r3, [r3, #20]
 8012bfc:	4619      	mov	r1, r3
 8012bfe:	69b8      	ldr	r0, [r7, #24]
 8012c00:	f7ff fe78 	bl	80128f4 <lfs_aligndown>
 8012c04:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012c0a:	685c      	ldr	r4, [r3, #4]
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8012c10:	69bb      	ldr	r3, [r7, #24]
 8012c12:	9300      	str	r3, [sp, #0]
 8012c14:	69fb      	ldr	r3, [r7, #28]
 8012c16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012c1a:	47a0      	blx	r4
 8012c1c:	6178      	str	r0, [r7, #20]
            if (err) {
 8012c1e:	697b      	ldr	r3, [r7, #20]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d001      	beq.n	8012c28 <lfs_bd_read+0x19c>
                return err;
 8012c24:	697b      	ldr	r3, [r7, #20]
 8012c26:	e069      	b.n	8012cfc <lfs_bd_read+0x270>
            }

            data += diff;
 8012c28:	69fa      	ldr	r2, [r7, #28]
 8012c2a:	69bb      	ldr	r3, [r7, #24]
 8012c2c:	4413      	add	r3, r2
 8012c2e:	61fb      	str	r3, [r7, #28]
            off += diff;
 8012c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c32:	69bb      	ldr	r3, [r7, #24]
 8012c34:	4413      	add	r3, r2
 8012c36:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8012c38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012c3a:	69bb      	ldr	r3, [r7, #24]
 8012c3c:	1ad3      	subs	r3, r2, r3
 8012c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8012c40:	e057      	b.n	8012cf2 <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012c46:	6a1b      	ldr	r3, [r3, #32]
 8012c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c4a:	429a      	cmp	r2, r3
 8012c4c:	d305      	bcc.n	8012c5a <lfs_bd_read+0x1ce>
 8012c4e:	4b2d      	ldr	r3, [pc, #180]	; (8012d04 <lfs_bd_read+0x278>)
 8012c50:	4a2d      	ldr	r2, [pc, #180]	; (8012d08 <lfs_bd_read+0x27c>)
 8012c52:	216b      	movs	r1, #107	; 0x6b
 8012c54:	482d      	ldr	r0, [pc, #180]	; (8012d0c <lfs_bd_read+0x280>)
 8012c56:	f007 ffbb 	bl	801abd0 <__assert_func>
        rcache->block = block;
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c5e:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012c64:	695b      	ldr	r3, [r3, #20]
 8012c66:	4619      	mov	r1, r3
 8012c68:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012c6a:	f7ff fe43 	bl	80128f4 <lfs_aligndown>
 8012c6e:	4602      	mov	r2, r0
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8012c74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c76:	683b      	ldr	r3, [r7, #0]
 8012c78:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012c7e:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 8012c80:	4619      	mov	r1, r3
 8012c82:	4610      	mov	r0, r2
 8012c84:	f7ff fe4b 	bl	801291e <lfs_alignup>
 8012c88:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012c8e:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 8012c90:	4619      	mov	r1, r3
 8012c92:	4610      	mov	r0, r2
 8012c94:	f7ff fe1e 	bl	80128d4 <lfs_min>
 8012c98:	4602      	mov	r2, r0
                - rcache->off,
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8012c9e:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(
 8012ca6:	4619      	mov	r1, r3
 8012ca8:	4610      	mov	r0, r2
 8012caa:	f7ff fe13 	bl	80128d4 <lfs_min>
 8012cae:	4602      	mov	r2, r0
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012cb8:	685c      	ldr	r4, [r3, #4]
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	6819      	ldr	r1, [r3, #0]
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	689b      	ldr	r3, [r3, #8]
 8012cce:	9300      	str	r3, [sp, #0]
 8012cd0:	462b      	mov	r3, r5
 8012cd2:	47a0      	blx	r4
 8012cd4:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8012cd6:	693b      	ldr	r3, [r7, #16]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	dd05      	ble.n	8012ce8 <lfs_bd_read+0x25c>
 8012cdc:	4b0c      	ldr	r3, [pc, #48]	; (8012d10 <lfs_bd_read+0x284>)
 8012cde:	4a0a      	ldr	r2, [pc, #40]	; (8012d08 <lfs_bd_read+0x27c>)
 8012ce0:	2176      	movs	r1, #118	; 0x76
 8012ce2:	480a      	ldr	r0, [pc, #40]	; (8012d0c <lfs_bd_read+0x280>)
 8012ce4:	f007 ff74 	bl	801abd0 <__assert_func>
        if (err) {
 8012ce8:	693b      	ldr	r3, [r7, #16]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d001      	beq.n	8012cf2 <lfs_bd_read+0x266>
            return err;
 8012cee:	693b      	ldr	r3, [r7, #16]
 8012cf0:	e004      	b.n	8012cfc <lfs_bd_read+0x270>
    while (size > 0) {
 8012cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	f47f aee4 	bne.w	8012ac2 <lfs_bd_read+0x36>
        }
    }

    return 0;
 8012cfa:	2300      	movs	r3, #0
}
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	3720      	adds	r7, #32
 8012d00:	46bd      	mov	sp, r7
 8012d02:	bdb0      	pop	{r4, r5, r7, pc}
 8012d04:	08021954 	.word	0x08021954
 8012d08:	08022b9c 	.word	0x08022b9c
 8012d0c:	08021974 	.word	0x08021974
 8012d10:	080219a8 	.word	0x080219a8

08012d14 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b08e      	sub	sp, #56	; 0x38
 8012d18:	af04      	add	r7, sp, #16
 8012d1a:	60f8      	str	r0, [r7, #12]
 8012d1c:	60b9      	str	r1, [r7, #8]
 8012d1e:	607a      	str	r2, [r7, #4]
 8012d20:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8012d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d24:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 8012d26:	2300      	movs	r3, #0
 8012d28:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8012d2e:	e039      	b.n	8012da4 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8012d30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d34:	1ad3      	subs	r3, r2, r3
 8012d36:	2108      	movs	r1, #8
 8012d38:	4618      	mov	r0, r3
 8012d3a:	f7ff fdcb 	bl	80128d4 <lfs_min>
 8012d3e:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 8012d40:	683a      	ldr	r2, [r7, #0]
 8012d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d44:	1ad1      	subs	r1, r2, r3
 8012d46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d4a:	4413      	add	r3, r2
 8012d4c:	69fa      	ldr	r2, [r7, #28]
 8012d4e:	9203      	str	r2, [sp, #12]
 8012d50:	f107 0210 	add.w	r2, r7, #16
 8012d54:	9202      	str	r2, [sp, #8]
 8012d56:	9301      	str	r3, [sp, #4]
 8012d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d5a:	9300      	str	r3, [sp, #0]
 8012d5c:	460b      	mov	r3, r1
 8012d5e:	687a      	ldr	r2, [r7, #4]
 8012d60:	68b9      	ldr	r1, [r7, #8]
 8012d62:	68f8      	ldr	r0, [r7, #12]
 8012d64:	f7ff fe92 	bl	8012a8c <lfs_bd_read>
 8012d68:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 8012d6a:	69bb      	ldr	r3, [r7, #24]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d001      	beq.n	8012d74 <lfs_bd_cmp+0x60>
            return res;
 8012d70:	69bb      	ldr	r3, [r7, #24]
 8012d72:	e01c      	b.n	8012dae <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 8012d74:	6a3a      	ldr	r2, [r7, #32]
 8012d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d78:	18d1      	adds	r1, r2, r3
 8012d7a:	f107 0310 	add.w	r3, r7, #16
 8012d7e:	69fa      	ldr	r2, [r7, #28]
 8012d80:	4618      	mov	r0, r3
 8012d82:	f009 f897 	bl	801beb4 <memcmp>
 8012d86:	61b8      	str	r0, [r7, #24]
        if (res) {
 8012d88:	69bb      	ldr	r3, [r7, #24]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d006      	beq.n	8012d9c <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8012d8e:	69bb      	ldr	r3, [r7, #24]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	da01      	bge.n	8012d98 <lfs_bd_cmp+0x84>
 8012d94:	2301      	movs	r3, #1
 8012d96:	e00a      	b.n	8012dae <lfs_bd_cmp+0x9a>
 8012d98:	2302      	movs	r3, #2
 8012d9a:	e008      	b.n	8012dae <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8012d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d9e:	69fb      	ldr	r3, [r7, #28]
 8012da0:	4413      	add	r3, r2
 8012da2:	627b      	str	r3, [r7, #36]	; 0x24
 8012da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012da8:	429a      	cmp	r2, r3
 8012daa:	d3c1      	bcc.n	8012d30 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8012dac:	2300      	movs	r3, #0
}
 8012dae:	4618      	mov	r0, r3
 8012db0:	3728      	adds	r7, #40	; 0x28
 8012db2:	46bd      	mov	sp, r7
 8012db4:	bd80      	pop	{r7, pc}
	...

08012db8 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8012db8:	b5b0      	push	{r4, r5, r7, lr}
 8012dba:	b08c      	sub	sp, #48	; 0x30
 8012dbc:	af04      	add	r7, sp, #16
 8012dbe:	60f8      	str	r0, [r7, #12]
 8012dc0:	60b9      	str	r1, [r7, #8]
 8012dc2:	607a      	str	r2, [r7, #4]
 8012dc4:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8012dc6:	68bb      	ldr	r3, [r7, #8]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dce:	d061      	beq.n	8012e94 <lfs_bd_flush+0xdc>
 8012dd0:	68bb      	ldr	r3, [r7, #8]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	f113 0f02 	cmn.w	r3, #2
 8012dd8:	d05c      	beq.n	8012e94 <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8012dda:	68bb      	ldr	r3, [r7, #8]
 8012ddc:	681a      	ldr	r2, [r3, #0]
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012de2:	6a1b      	ldr	r3, [r3, #32]
 8012de4:	429a      	cmp	r2, r3
 8012de6:	d305      	bcc.n	8012df4 <lfs_bd_flush+0x3c>
 8012de8:	4b2d      	ldr	r3, [pc, #180]	; (8012ea0 <lfs_bd_flush+0xe8>)
 8012dea:	4a2e      	ldr	r2, [pc, #184]	; (8012ea4 <lfs_bd_flush+0xec>)
 8012dec:	219e      	movs	r1, #158	; 0x9e
 8012dee:	482e      	ldr	r0, [pc, #184]	; (8012ea8 <lfs_bd_flush+0xf0>)
 8012df0:	f007 feee 	bl	801abd0 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8012df4:	68bb      	ldr	r3, [r7, #8]
 8012df6:	689a      	ldr	r2, [r3, #8]
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012dfc:	699b      	ldr	r3, [r3, #24]
 8012dfe:	4619      	mov	r1, r3
 8012e00:	4610      	mov	r0, r2
 8012e02:	f7ff fd8c 	bl	801291e <lfs_alignup>
 8012e06:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012e0c:	689c      	ldr	r4, [r3, #8]
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8012e12:	68bb      	ldr	r3, [r7, #8]
 8012e14:	6819      	ldr	r1, [r3, #0]
 8012e16:	68bb      	ldr	r3, [r7, #8]
 8012e18:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8012e1a:	68bb      	ldr	r3, [r7, #8]
 8012e1c:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8012e1e:	69fb      	ldr	r3, [r7, #28]
 8012e20:	9300      	str	r3, [sp, #0]
 8012e22:	462b      	mov	r3, r5
 8012e24:	47a0      	blx	r4
 8012e26:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8012e28:	69bb      	ldr	r3, [r7, #24]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	dd05      	ble.n	8012e3a <lfs_bd_flush+0x82>
 8012e2e:	4b1f      	ldr	r3, [pc, #124]	; (8012eac <lfs_bd_flush+0xf4>)
 8012e30:	4a1c      	ldr	r2, [pc, #112]	; (8012ea4 <lfs_bd_flush+0xec>)
 8012e32:	21a2      	movs	r1, #162	; 0xa2
 8012e34:	481c      	ldr	r0, [pc, #112]	; (8012ea8 <lfs_bd_flush+0xf0>)
 8012e36:	f007 fecb 	bl	801abd0 <__assert_func>
        if (err) {
 8012e3a:	69bb      	ldr	r3, [r7, #24]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d001      	beq.n	8012e44 <lfs_bd_flush+0x8c>
            return err;
 8012e40:	69bb      	ldr	r3, [r7, #24]
 8012e42:	e028      	b.n	8012e96 <lfs_bd_flush+0xde>
        }

        if (validate) {
 8012e44:	78fb      	ldrb	r3, [r7, #3]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d020      	beq.n	8012e8c <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8012e4a:	6879      	ldr	r1, [r7, #4]
 8012e4c:	68f8      	ldr	r0, [r7, #12]
 8012e4e:	f7ff fdf7 	bl	8012a40 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8012e52:	68bb      	ldr	r3, [r7, #8]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	68ba      	ldr	r2, [r7, #8]
 8012e58:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8012e5a:	68b9      	ldr	r1, [r7, #8]
 8012e5c:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8012e5e:	69f8      	ldr	r0, [r7, #28]
 8012e60:	9003      	str	r0, [sp, #12]
 8012e62:	9102      	str	r1, [sp, #8]
 8012e64:	9201      	str	r2, [sp, #4]
 8012e66:	9300      	str	r3, [sp, #0]
 8012e68:	69fb      	ldr	r3, [r7, #28]
 8012e6a:	687a      	ldr	r2, [r7, #4]
 8012e6c:	2100      	movs	r1, #0
 8012e6e:	68f8      	ldr	r0, [r7, #12]
 8012e70:	f7ff ff50 	bl	8012d14 <lfs_bd_cmp>
 8012e74:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8012e76:	697b      	ldr	r3, [r7, #20]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	da01      	bge.n	8012e80 <lfs_bd_flush+0xc8>
                return res;
 8012e7c:	697b      	ldr	r3, [r7, #20]
 8012e7e:	e00a      	b.n	8012e96 <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 8012e80:	697b      	ldr	r3, [r7, #20]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d002      	beq.n	8012e8c <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 8012e86:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8012e8a:	e004      	b.n	8012e96 <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8012e8c:	68b9      	ldr	r1, [r7, #8]
 8012e8e:	68f8      	ldr	r0, [r7, #12]
 8012e90:	f7ff fde5 	bl	8012a5e <lfs_cache_zero>
    }

    return 0;
 8012e94:	2300      	movs	r3, #0
}
 8012e96:	4618      	mov	r0, r3
 8012e98:	3720      	adds	r7, #32
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8012e9e:	bf00      	nop
 8012ea0:	080219b4 	.word	0x080219b4
 8012ea4:	08022ba8 	.word	0x08022ba8
 8012ea8:	08021974 	.word	0x08021974
 8012eac:	080219a8 	.word	0x080219a8

08012eb0 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b086      	sub	sp, #24
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	60f8      	str	r0, [r7, #12]
 8012eb8:	60b9      	str	r1, [r7, #8]
 8012eba:	607a      	str	r2, [r7, #4]
 8012ebc:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8012ebe:	6879      	ldr	r1, [r7, #4]
 8012ec0:	68f8      	ldr	r0, [r7, #12]
 8012ec2:	f7ff fdbd 	bl	8012a40 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8012ec6:	78fb      	ldrb	r3, [r7, #3]
 8012ec8:	687a      	ldr	r2, [r7, #4]
 8012eca:	68b9      	ldr	r1, [r7, #8]
 8012ecc:	68f8      	ldr	r0, [r7, #12]
 8012ece:	f7ff ff73 	bl	8012db8 <lfs_bd_flush>
 8012ed2:	6178      	str	r0, [r7, #20]
    if (err) {
 8012ed4:	697b      	ldr	r3, [r7, #20]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d001      	beq.n	8012ede <lfs_bd_sync+0x2e>
        return err;
 8012eda:	697b      	ldr	r3, [r7, #20]
 8012edc:	e011      	b.n	8012f02 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012ee2:	691b      	ldr	r3, [r3, #16]
 8012ee4:	68fa      	ldr	r2, [r7, #12]
 8012ee6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8012ee8:	4610      	mov	r0, r2
 8012eea:	4798      	blx	r3
 8012eec:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8012eee:	697b      	ldr	r3, [r7, #20]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	dd05      	ble.n	8012f00 <lfs_bd_sync+0x50>
 8012ef4:	4b05      	ldr	r3, [pc, #20]	; (8012f0c <lfs_bd_sync+0x5c>)
 8012ef6:	4a06      	ldr	r2, [pc, #24]	; (8012f10 <lfs_bd_sync+0x60>)
 8012ef8:	21c8      	movs	r1, #200	; 0xc8
 8012efa:	4806      	ldr	r0, [pc, #24]	; (8012f14 <lfs_bd_sync+0x64>)
 8012efc:	f007 fe68 	bl	801abd0 <__assert_func>
    return err;
 8012f00:	697b      	ldr	r3, [r7, #20]
}
 8012f02:	4618      	mov	r0, r3
 8012f04:	3718      	adds	r7, #24
 8012f06:	46bd      	mov	sp, r7
 8012f08:	bd80      	pop	{r7, pc}
 8012f0a:	bf00      	nop
 8012f0c:	080219a8 	.word	0x080219a8
 8012f10:	08022bb8 	.word	0x08022bb8
 8012f14:	08021974 	.word	0x08021974

08012f18 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b088      	sub	sp, #32
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	60f8      	str	r0, [r7, #12]
 8012f20:	60b9      	str	r1, [r7, #8]
 8012f22:	607a      	str	r2, [r7, #4]
 8012f24:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8012f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f28:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 8012f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f2c:	f113 0f02 	cmn.w	r3, #2
 8012f30:	d00b      	beq.n	8012f4a <lfs_bd_prog+0x32>
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012f36:	6a1b      	ldr	r3, [r3, #32]
 8012f38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f3a:	429a      	cmp	r2, r3
 8012f3c:	d305      	bcc.n	8012f4a <lfs_bd_prog+0x32>
 8012f3e:	4b47      	ldr	r3, [pc, #284]	; (801305c <lfs_bd_prog+0x144>)
 8012f40:	4a47      	ldr	r2, [pc, #284]	; (8013060 <lfs_bd_prog+0x148>)
 8012f42:	21d3      	movs	r1, #211	; 0xd3
 8012f44:	4847      	ldr	r0, [pc, #284]	; (8013064 <lfs_bd_prog+0x14c>)
 8012f46:	f007 fe43 	bl	801abd0 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8012f4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f4e:	441a      	add	r2, r3
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012f54:	69db      	ldr	r3, [r3, #28]
 8012f56:	429a      	cmp	r2, r3
 8012f58:	d977      	bls.n	801304a <lfs_bd_prog+0x132>
 8012f5a:	4b43      	ldr	r3, [pc, #268]	; (8013068 <lfs_bd_prog+0x150>)
 8012f5c:	4a40      	ldr	r2, [pc, #256]	; (8013060 <lfs_bd_prog+0x148>)
 8012f5e:	21d4      	movs	r1, #212	; 0xd4
 8012f60:	4840      	ldr	r0, [pc, #256]	; (8013064 <lfs_bd_prog+0x14c>)
 8012f62:	f007 fe35 	bl	801abd0 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f6c:	429a      	cmp	r2, r3
 8012f6e:	d151      	bne.n	8013014 <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 8012f70:	68bb      	ldr	r3, [r7, #8]
 8012f72:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8012f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f76:	429a      	cmp	r2, r3
 8012f78:	d34c      	bcc.n	8013014 <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 8012f7a:	68bb      	ldr	r3, [r7, #8]
 8012f7c:	685a      	ldr	r2, [r3, #4]
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f84:	4413      	add	r3, r2
                off >= pcache->off &&
 8012f86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f88:	429a      	cmp	r2, r3
 8012f8a:	d243      	bcs.n	8013014 <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012f92:	68bb      	ldr	r3, [r7, #8]
 8012f94:	6859      	ldr	r1, [r3, #4]
 8012f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f98:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8012f9a:	4413      	add	r3, r2
 8012f9c:	4619      	mov	r1, r3
 8012f9e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012fa0:	f7ff fc98 	bl	80128d4 <lfs_min>
 8012fa4:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8012fa6:	68bb      	ldr	r3, [r7, #8]
 8012fa8:	68da      	ldr	r2, [r3, #12]
 8012faa:	68bb      	ldr	r3, [r7, #8]
 8012fac:	685b      	ldr	r3, [r3, #4]
 8012fae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012fb0:	1acb      	subs	r3, r1, r3
 8012fb2:	4413      	add	r3, r2
 8012fb4:	69ba      	ldr	r2, [r7, #24]
 8012fb6:	69f9      	ldr	r1, [r7, #28]
 8012fb8:	4618      	mov	r0, r3
 8012fba:	f009 f97a 	bl	801c2b2 <memcpy>

            data += diff;
 8012fbe:	69fa      	ldr	r2, [r7, #28]
 8012fc0:	69bb      	ldr	r3, [r7, #24]
 8012fc2:	4413      	add	r3, r2
 8012fc4:	61fb      	str	r3, [r7, #28]
            off += diff;
 8012fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012fc8:	69bb      	ldr	r3, [r7, #24]
 8012fca:	4413      	add	r3, r2
 8012fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 8012fce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012fd0:	69bb      	ldr	r3, [r7, #24]
 8012fd2:	1ad3      	subs	r3, r2, r3
 8012fd4:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8012fd6:	68bb      	ldr	r3, [r7, #8]
 8012fd8:	6898      	ldr	r0, [r3, #8]
 8012fda:	68bb      	ldr	r3, [r7, #8]
 8012fdc:	685b      	ldr	r3, [r3, #4]
 8012fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012fe0:	1ad3      	subs	r3, r2, r3
 8012fe2:	4619      	mov	r1, r3
 8012fe4:	f7ff fc66 	bl	80128b4 <lfs_max>
 8012fe8:	4602      	mov	r2, r0
 8012fea:	68bb      	ldr	r3, [r7, #8]
 8012fec:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8012fee:	68bb      	ldr	r3, [r7, #8]
 8012ff0:	689a      	ldr	r2, [r3, #8]
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ff8:	429a      	cmp	r2, r3
 8012ffa:	d126      	bne.n	801304a <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8012ffc:	78fb      	ldrb	r3, [r7, #3]
 8012ffe:	687a      	ldr	r2, [r7, #4]
 8013000:	68b9      	ldr	r1, [r7, #8]
 8013002:	68f8      	ldr	r0, [r7, #12]
 8013004:	f7ff fed8 	bl	8012db8 <lfs_bd_flush>
 8013008:	6178      	str	r0, [r7, #20]
                if (err) {
 801300a:	697b      	ldr	r3, [r7, #20]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d01c      	beq.n	801304a <lfs_bd_prog+0x132>
                    return err;
 8013010:	697b      	ldr	r3, [r7, #20]
 8013012:	e01e      	b.n	8013052 <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8013014:	68bb      	ldr	r3, [r7, #8]
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	f1b3 3fff 	cmp.w	r3, #4294967295
 801301c:	d005      	beq.n	801302a <lfs_bd_prog+0x112>
 801301e:	4b13      	ldr	r3, [pc, #76]	; (801306c <lfs_bd_prog+0x154>)
 8013020:	4a0f      	ldr	r2, [pc, #60]	; (8013060 <lfs_bd_prog+0x148>)
 8013022:	21f1      	movs	r1, #241	; 0xf1
 8013024:	480f      	ldr	r0, [pc, #60]	; (8013064 <lfs_bd_prog+0x14c>)
 8013026:	f007 fdd3 	bl	801abd0 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 801302a:	68bb      	ldr	r3, [r7, #8]
 801302c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801302e:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013034:	699b      	ldr	r3, [r3, #24]
 8013036:	4619      	mov	r1, r3
 8013038:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801303a:	f7ff fc5b 	bl	80128f4 <lfs_aligndown>
 801303e:	4602      	mov	r2, r0
 8013040:	68bb      	ldr	r3, [r7, #8]
 8013042:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8013044:	68bb      	ldr	r3, [r7, #8]
 8013046:	2200      	movs	r2, #0
 8013048:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 801304a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801304c:	2b00      	cmp	r3, #0
 801304e:	d18a      	bne.n	8012f66 <lfs_bd_prog+0x4e>
    }

    return 0;
 8013050:	2300      	movs	r3, #0
}
 8013052:	4618      	mov	r0, r3
 8013054:	3720      	adds	r7, #32
 8013056:	46bd      	mov	sp, r7
 8013058:	bd80      	pop	{r7, pc}
 801305a:	bf00      	nop
 801305c:	080219dc 	.word	0x080219dc
 8013060:	08022bc4 	.word	0x08022bc4
 8013064:	08021974 	.word	0x08021974
 8013068:	08021a18 	.word	0x08021a18
 801306c:	08021a3c 	.word	0x08021a3c

08013070 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8013070:	b580      	push	{r7, lr}
 8013072:	b084      	sub	sp, #16
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
 8013078:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801307e:	6a1b      	ldr	r3, [r3, #32]
 8013080:	683a      	ldr	r2, [r7, #0]
 8013082:	429a      	cmp	r2, r3
 8013084:	d305      	bcc.n	8013092 <lfs_bd_erase+0x22>
 8013086:	4b0f      	ldr	r3, [pc, #60]	; (80130c4 <lfs_bd_erase+0x54>)
 8013088:	4a0f      	ldr	r2, [pc, #60]	; (80130c8 <lfs_bd_erase+0x58>)
 801308a:	21ff      	movs	r1, #255	; 0xff
 801308c:	480f      	ldr	r0, [pc, #60]	; (80130cc <lfs_bd_erase+0x5c>)
 801308e:	f007 fd9f 	bl	801abd0 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013096:	68db      	ldr	r3, [r3, #12]
 8013098:	687a      	ldr	r2, [r7, #4]
 801309a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801309c:	6839      	ldr	r1, [r7, #0]
 801309e:	4610      	mov	r0, r2
 80130a0:	4798      	blx	r3
 80130a2:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	dd06      	ble.n	80130b8 <lfs_bd_erase+0x48>
 80130aa:	4b09      	ldr	r3, [pc, #36]	; (80130d0 <lfs_bd_erase+0x60>)
 80130ac:	4a06      	ldr	r2, [pc, #24]	; (80130c8 <lfs_bd_erase+0x58>)
 80130ae:	f240 1101 	movw	r1, #257	; 0x101
 80130b2:	4806      	ldr	r0, [pc, #24]	; (80130cc <lfs_bd_erase+0x5c>)
 80130b4:	f007 fd8c 	bl	801abd0 <__assert_func>
    return err;
 80130b8:	68fb      	ldr	r3, [r7, #12]
}
 80130ba:	4618      	mov	r0, r3
 80130bc:	3710      	adds	r7, #16
 80130be:	46bd      	mov	sp, r7
 80130c0:	bd80      	pop	{r7, pc}
 80130c2:	bf00      	nop
 80130c4:	08021954 	.word	0x08021954
 80130c8:	08022bd0 	.word	0x08022bd0
 80130cc:	08021974 	.word	0x08021974
 80130d0:	080219a8 	.word	0x080219a8

080130d4 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 80130d4:	b480      	push	{r7}
 80130d6:	b085      	sub	sp, #20
 80130d8:	af00      	add	r7, sp, #0
 80130da:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	685a      	ldr	r2, [r3, #4]
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	3304      	adds	r3, #4
 80130ee:	68fa      	ldr	r2, [r7, #12]
 80130f0:	601a      	str	r2, [r3, #0]
}
 80130f2:	bf00      	nop
 80130f4:	3714      	adds	r7, #20
 80130f6:	46bd      	mov	sp, r7
 80130f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130fc:	4770      	bx	lr

080130fe <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 80130fe:	b480      	push	{r7}
 8013100:	b083      	sub	sp, #12
 8013102:	af00      	add	r7, sp, #0
 8013104:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801310e:	d005      	beq.n	801311c <lfs_pair_isnull+0x1e>
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	3304      	adds	r3, #4
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	f1b3 3fff 	cmp.w	r3, #4294967295
 801311a:	d101      	bne.n	8013120 <lfs_pair_isnull+0x22>
 801311c:	2301      	movs	r3, #1
 801311e:	e000      	b.n	8013122 <lfs_pair_isnull+0x24>
 8013120:	2300      	movs	r3, #0
 8013122:	f003 0301 	and.w	r3, r3, #1
 8013126:	b2db      	uxtb	r3, r3
}
 8013128:	4618      	mov	r0, r3
 801312a:	370c      	adds	r7, #12
 801312c:	46bd      	mov	sp, r7
 801312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013132:	4770      	bx	lr

08013134 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8013134:	b480      	push	{r7}
 8013136:	b083      	sub	sp, #12
 8013138:	af00      	add	r7, sp, #0
 801313a:	6078      	str	r0, [r7, #4]
 801313c:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	681a      	ldr	r2, [r3, #0]
 8013142:	683b      	ldr	r3, [r7, #0]
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	429a      	cmp	r2, r3
 8013148:	d017      	beq.n	801317a <lfs_pair_cmp+0x46>
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	3304      	adds	r3, #4
 801314e:	681a      	ldr	r2, [r3, #0]
 8013150:	683b      	ldr	r3, [r7, #0]
 8013152:	3304      	adds	r3, #4
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	429a      	cmp	r2, r3
 8013158:	d00f      	beq.n	801317a <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	681a      	ldr	r2, [r3, #0]
 801315e:	683b      	ldr	r3, [r7, #0]
 8013160:	3304      	adds	r3, #4
 8013162:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8013164:	429a      	cmp	r2, r3
 8013166:	d008      	beq.n	801317a <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	3304      	adds	r3, #4
 801316c:	681a      	ldr	r2, [r3, #0]
 801316e:	683b      	ldr	r3, [r7, #0]
 8013170:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8013172:	429a      	cmp	r2, r3
 8013174:	d001      	beq.n	801317a <lfs_pair_cmp+0x46>
 8013176:	2301      	movs	r3, #1
 8013178:	e000      	b.n	801317c <lfs_pair_cmp+0x48>
 801317a:	2300      	movs	r3, #0
}
 801317c:	4618      	mov	r0, r3
 801317e:	370c      	adds	r7, #12
 8013180:	46bd      	mov	sp, r7
 8013182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013186:	4770      	bx	lr

08013188 <lfs_pair_sync>:

#ifndef LFS_READONLY
static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8013188:	b480      	push	{r7}
 801318a:	b083      	sub	sp, #12
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
 8013190:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	681a      	ldr	r2, [r3, #0]
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	429a      	cmp	r2, r3
 801319c:	d107      	bne.n	80131ae <lfs_pair_sync+0x26>
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	3304      	adds	r3, #4
 80131a2:	681a      	ldr	r2, [r3, #0]
 80131a4:	683b      	ldr	r3, [r7, #0]
 80131a6:	3304      	adds	r3, #4
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	429a      	cmp	r2, r3
 80131ac:	d00d      	beq.n	80131ca <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	681a      	ldr	r2, [r3, #0]
 80131b2:	683b      	ldr	r3, [r7, #0]
 80131b4:	3304      	adds	r3, #4
 80131b6:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80131b8:	429a      	cmp	r2, r3
 80131ba:	d108      	bne.n	80131ce <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	3304      	adds	r3, #4
 80131c0:	681a      	ldr	r2, [r3, #0]
 80131c2:	683b      	ldr	r3, [r7, #0]
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	429a      	cmp	r2, r3
 80131c8:	d101      	bne.n	80131ce <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80131ca:	2301      	movs	r3, #1
 80131cc:	e000      	b.n	80131d0 <lfs_pair_sync+0x48>
 80131ce:	2300      	movs	r3, #0
 80131d0:	f003 0301 	and.w	r3, r3, #1
 80131d4:	b2db      	uxtb	r3, r3
}
 80131d6:	4618      	mov	r0, r3
 80131d8:	370c      	adds	r7, #12
 80131da:	46bd      	mov	sp, r7
 80131dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e0:	4770      	bx	lr

080131e2 <lfs_pair_fromle32>:
#endif

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 80131e2:	b590      	push	{r4, r7, lr}
 80131e4:	b083      	sub	sp, #12
 80131e6:	af00      	add	r7, sp, #0
 80131e8:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	4618      	mov	r0, r3
 80131f0:	f7ff fbe0 	bl	80129b4 <lfs_fromle32>
 80131f4:	4602      	mov	r2, r0
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	3304      	adds	r3, #4
 80131fe:	681a      	ldr	r2, [r3, #0]
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	1d1c      	adds	r4, r3, #4
 8013204:	4610      	mov	r0, r2
 8013206:	f7ff fbd5 	bl	80129b4 <lfs_fromle32>
 801320a:	4603      	mov	r3, r0
 801320c:	6023      	str	r3, [r4, #0]
}
 801320e:	bf00      	nop
 8013210:	370c      	adds	r7, #12
 8013212:	46bd      	mov	sp, r7
 8013214:	bd90      	pop	{r4, r7, pc}

08013216 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8013216:	b590      	push	{r4, r7, lr}
 8013218:	b083      	sub	sp, #12
 801321a:	af00      	add	r7, sp, #0
 801321c:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	4618      	mov	r0, r3
 8013224:	f7ff fbd1 	bl	80129ca <lfs_tole32>
 8013228:	4602      	mov	r2, r0
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	3304      	adds	r3, #4
 8013232:	681a      	ldr	r2, [r3, #0]
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	1d1c      	adds	r4, r3, #4
 8013238:	4610      	mov	r0, r2
 801323a:	f7ff fbc6 	bl	80129ca <lfs_tole32>
 801323e:	4603      	mov	r3, r0
 8013240:	6023      	str	r3, [r4, #0]
}
 8013242:	bf00      	nop
 8013244:	370c      	adds	r7, #12
 8013246:	46bd      	mov	sp, r7
 8013248:	bd90      	pop	{r4, r7, pc}

0801324a <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 801324a:	b480      	push	{r7}
 801324c:	b083      	sub	sp, #12
 801324e:	af00      	add	r7, sp, #0
 8013250:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	43db      	mvns	r3, r3
 8013256:	0fdb      	lsrs	r3, r3, #31
 8013258:	b2db      	uxtb	r3, r3
}
 801325a:	4618      	mov	r0, r3
 801325c:	370c      	adds	r7, #12
 801325e:	46bd      	mov	sp, r7
 8013260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013264:	4770      	bx	lr

08013266 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8013266:	b480      	push	{r7}
 8013268:	b083      	sub	sp, #12
 801326a:	af00      	add	r7, sp, #0
 801326c:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	059b      	lsls	r3, r3, #22
 8013272:	159b      	asrs	r3, r3, #22
 8013274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013278:	bf0c      	ite	eq
 801327a:	2301      	moveq	r3, #1
 801327c:	2300      	movne	r3, #0
 801327e:	b2db      	uxtb	r3, r3
}
 8013280:	4618      	mov	r0, r3
 8013282:	370c      	adds	r7, #12
 8013284:	46bd      	mov	sp, r7
 8013286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801328a:	4770      	bx	lr

0801328c <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 801328c:	b480      	push	{r7}
 801328e:	b083      	sub	sp, #12
 8013290:	af00      	add	r7, sp, #0
 8013292:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	0d1b      	lsrs	r3, r3, #20
 8013298:	b29b      	uxth	r3, r3
 801329a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801329e:	b29b      	uxth	r3, r3
}
 80132a0:	4618      	mov	r0, r3
 80132a2:	370c      	adds	r7, #12
 80132a4:	46bd      	mov	sp, r7
 80132a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132aa:	4770      	bx	lr

080132ac <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 80132ac:	b480      	push	{r7}
 80132ae:	b083      	sub	sp, #12
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	0d1b      	lsrs	r3, r3, #20
 80132b8:	b29b      	uxth	r3, r3
 80132ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80132be:	b29b      	uxth	r3, r3
}
 80132c0:	4618      	mov	r0, r3
 80132c2:	370c      	adds	r7, #12
 80132c4:	46bd      	mov	sp, r7
 80132c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ca:	4770      	bx	lr

080132cc <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 80132cc:	b480      	push	{r7}
 80132ce:	b083      	sub	sp, #12
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	0d1b      	lsrs	r3, r3, #20
 80132d8:	b2db      	uxtb	r3, r3
}
 80132da:	4618      	mov	r0, r3
 80132dc:	370c      	adds	r7, #12
 80132de:	46bd      	mov	sp, r7
 80132e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e4:	4770      	bx	lr

080132e6 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 80132e6:	b580      	push	{r7, lr}
 80132e8:	b082      	sub	sp, #8
 80132ea:	af00      	add	r7, sp, #0
 80132ec:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 80132ee:	6878      	ldr	r0, [r7, #4]
 80132f0:	f7ff ffec 	bl	80132cc <lfs_tag_chunk>
 80132f4:	4603      	mov	r3, r0
 80132f6:	b25b      	sxtb	r3, r3
}
 80132f8:	4618      	mov	r0, r3
 80132fa:	3708      	adds	r7, #8
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bd80      	pop	{r7, pc}

08013300 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8013300:	b480      	push	{r7}
 8013302:	b083      	sub	sp, #12
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	0a9b      	lsrs	r3, r3, #10
 801330c:	b29b      	uxth	r3, r3
 801330e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013312:	b29b      	uxth	r3, r3
}
 8013314:	4618      	mov	r0, r3
 8013316:	370c      	adds	r7, #12
 8013318:	46bd      	mov	sp, r7
 801331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331e:	4770      	bx	lr

08013320 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8013320:	b480      	push	{r7}
 8013322:	b083      	sub	sp, #12
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 801332e:	4618      	mov	r0, r3
 8013330:	370c      	adds	r7, #12
 8013332:	46bd      	mov	sp, r7
 8013334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013338:	4770      	bx	lr

0801333a <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 801333a:	b580      	push	{r7, lr}
 801333c:	b082      	sub	sp, #8
 801333e:	af00      	add	r7, sp, #0
 8013340:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8013342:	6878      	ldr	r0, [r7, #4]
 8013344:	f7ff ff8f 	bl	8013266 <lfs_tag_isdelete>
 8013348:	4603      	mov	r3, r0
 801334a:	461a      	mov	r2, r3
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	4413      	add	r3, r2
 8013350:	4618      	mov	r0, r3
 8013352:	f7ff ffe5 	bl	8013320 <lfs_tag_size>
 8013356:	4603      	mov	r3, r0
 8013358:	3304      	adds	r3, #4
}
 801335a:	4618      	mov	r0, r3
 801335c:	3708      	adds	r7, #8
 801335e:	46bd      	mov	sp, r7
 8013360:	bd80      	pop	{r7, pc}

08013362 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8013362:	b480      	push	{r7}
 8013364:	b085      	sub	sp, #20
 8013366:	af00      	add	r7, sp, #0
 8013368:	6078      	str	r0, [r7, #4]
 801336a:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 801336c:	2300      	movs	r3, #0
 801336e:	60fb      	str	r3, [r7, #12]
 8013370:	e012      	b.n	8013398 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	009b      	lsls	r3, r3, #2
 8013376:	687a      	ldr	r2, [r7, #4]
 8013378:	4413      	add	r3, r2
 801337a:	6819      	ldr	r1, [r3, #0]
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	009b      	lsls	r3, r3, #2
 8013380:	683a      	ldr	r2, [r7, #0]
 8013382:	4413      	add	r3, r2
 8013384:	681a      	ldr	r2, [r3, #0]
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	009b      	lsls	r3, r3, #2
 801338a:	6878      	ldr	r0, [r7, #4]
 801338c:	4403      	add	r3, r0
 801338e:	404a      	eors	r2, r1
 8013390:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	3301      	adds	r3, #1
 8013396:	60fb      	str	r3, [r7, #12]
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	2b02      	cmp	r3, #2
 801339c:	dde9      	ble.n	8013372 <lfs_gstate_xor+0x10>
    }
}
 801339e:	bf00      	nop
 80133a0:	bf00      	nop
 80133a2:	3714      	adds	r7, #20
 80133a4:	46bd      	mov	sp, r7
 80133a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133aa:	4770      	bx	lr

080133ac <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 80133ac:	b480      	push	{r7}
 80133ae:	b085      	sub	sp, #20
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 80133b4:	2300      	movs	r3, #0
 80133b6:	60fb      	str	r3, [r7, #12]
 80133b8:	e00b      	b.n	80133d2 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	009b      	lsls	r3, r3, #2
 80133be:	687a      	ldr	r2, [r7, #4]
 80133c0:	4413      	add	r3, r2
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d001      	beq.n	80133cc <lfs_gstate_iszero+0x20>
            return false;
 80133c8:	2300      	movs	r3, #0
 80133ca:	e006      	b.n	80133da <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	3301      	adds	r3, #1
 80133d0:	60fb      	str	r3, [r7, #12]
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	2b02      	cmp	r3, #2
 80133d6:	ddf0      	ble.n	80133ba <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 80133d8:	2301      	movs	r3, #1
}
 80133da:	4618      	mov	r0, r3
 80133dc:	3714      	adds	r7, #20
 80133de:	46bd      	mov	sp, r7
 80133e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e4:	4770      	bx	lr

080133e6 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 80133e6:	b580      	push	{r7, lr}
 80133e8:	b082      	sub	sp, #8
 80133ea:	af00      	add	r7, sp, #0
 80133ec:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	4618      	mov	r0, r3
 80133f4:	f7ff ff94 	bl	8013320 <lfs_tag_size>
 80133f8:	4603      	mov	r3, r0
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	bf14      	ite	ne
 80133fe:	2301      	movne	r3, #1
 8013400:	2300      	moveq	r3, #0
 8013402:	b2db      	uxtb	r3, r3
}
 8013404:	4618      	mov	r0, r3
 8013406:	3708      	adds	r7, #8
 8013408:	46bd      	mov	sp, r7
 801340a:	bd80      	pop	{r7, pc}

0801340c <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 801340c:	b580      	push	{r7, lr}
 801340e:	b082      	sub	sp, #8
 8013410:	af00      	add	r7, sp, #0
 8013412:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	4618      	mov	r0, r3
 801341a:	f7ff ff81 	bl	8013320 <lfs_tag_size>
 801341e:	4603      	mov	r3, r0
 8013420:	b2db      	uxtb	r3, r3
}
 8013422:	4618      	mov	r0, r3
 8013424:	3708      	adds	r7, #8
 8013426:	46bd      	mov	sp, r7
 8013428:	bd80      	pop	{r7, pc}

0801342a <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 801342a:	b580      	push	{r7, lr}
 801342c:	b082      	sub	sp, #8
 801342e:	af00      	add	r7, sp, #0
 8013430:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	4618      	mov	r0, r3
 8013438:	f7ff ff28 	bl	801328c <lfs_tag_type1>
 801343c:	4603      	mov	r3, r0
 801343e:	2b00      	cmp	r3, #0
 8013440:	bf14      	ite	ne
 8013442:	2301      	movne	r3, #1
 8013444:	2300      	moveq	r3, #0
 8013446:	b2db      	uxtb	r3, r3
}
 8013448:	4618      	mov	r0, r3
 801344a:	3708      	adds	r7, #8
 801344c:	46bd      	mov	sp, r7
 801344e:	bd80      	pop	{r7, pc}

08013450 <lfs_gstate_hasmovehere>:
#endif

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8013450:	b580      	push	{r7, lr}
 8013452:	b082      	sub	sp, #8
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]
 8013458:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	4618      	mov	r0, r3
 8013460:	f7ff ff14 	bl	801328c <lfs_tag_type1>
 8013464:	4603      	mov	r3, r0
 8013466:	2b00      	cmp	r3, #0
 8013468:	d00a      	beq.n	8013480 <lfs_gstate_hasmovehere+0x30>
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	3304      	adds	r3, #4
 801346e:	6839      	ldr	r1, [r7, #0]
 8013470:	4618      	mov	r0, r3
 8013472:	f7ff fe5f 	bl	8013134 <lfs_pair_cmp>
 8013476:	4603      	mov	r3, r0
 8013478:	2b00      	cmp	r3, #0
 801347a:	d101      	bne.n	8013480 <lfs_gstate_hasmovehere+0x30>
 801347c:	2301      	movs	r3, #1
 801347e:	e000      	b.n	8013482 <lfs_gstate_hasmovehere+0x32>
 8013480:	2300      	movs	r3, #0
 8013482:	f003 0301 	and.w	r3, r3, #1
 8013486:	b2db      	uxtb	r3, r3
}
 8013488:	4618      	mov	r0, r3
 801348a:	3708      	adds	r7, #8
 801348c:	46bd      	mov	sp, r7
 801348e:	bd80      	pop	{r7, pc}

08013490 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8013490:	b580      	push	{r7, lr}
 8013492:	b082      	sub	sp, #8
 8013494:	af00      	add	r7, sp, #0
 8013496:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	4618      	mov	r0, r3
 801349e:	f7ff fa89 	bl	80129b4 <lfs_fromle32>
 80134a2:	4602      	mov	r2, r0
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	685b      	ldr	r3, [r3, #4]
 80134ac:	4618      	mov	r0, r3
 80134ae:	f7ff fa81 	bl	80129b4 <lfs_fromle32>
 80134b2:	4602      	mov	r2, r0
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	689b      	ldr	r3, [r3, #8]
 80134bc:	4618      	mov	r0, r3
 80134be:	f7ff fa79 	bl	80129b4 <lfs_fromle32>
 80134c2:	4602      	mov	r2, r0
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	609a      	str	r2, [r3, #8]
}
 80134c8:	bf00      	nop
 80134ca:	3708      	adds	r7, #8
 80134cc:	46bd      	mov	sp, r7
 80134ce:	bd80      	pop	{r7, pc}

080134d0 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b082      	sub	sp, #8
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	4618      	mov	r0, r3
 80134de:	f7ff fa74 	bl	80129ca <lfs_tole32>
 80134e2:	4602      	mov	r2, r0
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	685b      	ldr	r3, [r3, #4]
 80134ec:	4618      	mov	r0, r3
 80134ee:	f7ff fa6c 	bl	80129ca <lfs_tole32>
 80134f2:	4602      	mov	r2, r0
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	689b      	ldr	r3, [r3, #8]
 80134fc:	4618      	mov	r0, r3
 80134fe:	f7ff fa64 	bl	80129ca <lfs_tole32>
 8013502:	4602      	mov	r2, r0
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	609a      	str	r2, [r3, #8]
}
 8013508:	bf00      	nop
 801350a:	3708      	adds	r7, #8
 801350c:	46bd      	mov	sp, r7
 801350e:	bd80      	pop	{r7, pc}

08013510 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8013510:	b580      	push	{r7, lr}
 8013512:	b082      	sub	sp, #8
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	4618      	mov	r0, r3
 801351e:	f7ff fa49 	bl	80129b4 <lfs_fromle32>
 8013522:	4602      	mov	r2, r0
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	685b      	ldr	r3, [r3, #4]
 801352c:	4618      	mov	r0, r3
 801352e:	f7ff fa41 	bl	80129b4 <lfs_fromle32>
 8013532:	4602      	mov	r2, r0
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	605a      	str	r2, [r3, #4]
}
 8013538:	bf00      	nop
 801353a:	3708      	adds	r7, #8
 801353c:	46bd      	mov	sp, r7
 801353e:	bd80      	pop	{r7, pc}

08013540 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8013540:	b580      	push	{r7, lr}
 8013542:	b082      	sub	sp, #8
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	4618      	mov	r0, r3
 801354e:	f7ff fa3c 	bl	80129ca <lfs_tole32>
 8013552:	4602      	mov	r2, r0
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	685b      	ldr	r3, [r3, #4]
 801355c:	4618      	mov	r0, r3
 801355e:	f7ff fa34 	bl	80129ca <lfs_tole32>
 8013562:	4602      	mov	r2, r0
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	605a      	str	r2, [r3, #4]
}
 8013568:	bf00      	nop
 801356a:	3708      	adds	r7, #8
 801356c:	46bd      	mov	sp, r7
 801356e:	bd80      	pop	{r7, pc}

08013570 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8013570:	b580      	push	{r7, lr}
 8013572:	b082      	sub	sp, #8
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	4618      	mov	r0, r3
 801357e:	f7ff fa19 	bl	80129b4 <lfs_fromle32>
 8013582:	4602      	mov	r2, r0
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	685b      	ldr	r3, [r3, #4]
 801358c:	4618      	mov	r0, r3
 801358e:	f7ff fa11 	bl	80129b4 <lfs_fromle32>
 8013592:	4602      	mov	r2, r0
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	689b      	ldr	r3, [r3, #8]
 801359c:	4618      	mov	r0, r3
 801359e:	f7ff fa09 	bl	80129b4 <lfs_fromle32>
 80135a2:	4602      	mov	r2, r0
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	68db      	ldr	r3, [r3, #12]
 80135ac:	4618      	mov	r0, r3
 80135ae:	f7ff fa01 	bl	80129b4 <lfs_fromle32>
 80135b2:	4602      	mov	r2, r0
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	691b      	ldr	r3, [r3, #16]
 80135bc:	4618      	mov	r0, r3
 80135be:	f7ff f9f9 	bl	80129b4 <lfs_fromle32>
 80135c2:	4602      	mov	r2, r0
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	695b      	ldr	r3, [r3, #20]
 80135cc:	4618      	mov	r0, r3
 80135ce:	f7ff f9f1 	bl	80129b4 <lfs_fromle32>
 80135d2:	4602      	mov	r2, r0
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	615a      	str	r2, [r3, #20]
}
 80135d8:	bf00      	nop
 80135da:	3708      	adds	r7, #8
 80135dc:	46bd      	mov	sp, r7
 80135de:	bd80      	pop	{r7, pc}

080135e0 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 80135e0:	b580      	push	{r7, lr}
 80135e2:	b082      	sub	sp, #8
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	4618      	mov	r0, r3
 80135ee:	f7ff f9ec 	bl	80129ca <lfs_tole32>
 80135f2:	4602      	mov	r2, r0
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	685b      	ldr	r3, [r3, #4]
 80135fc:	4618      	mov	r0, r3
 80135fe:	f7ff f9e4 	bl	80129ca <lfs_tole32>
 8013602:	4602      	mov	r2, r0
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	689b      	ldr	r3, [r3, #8]
 801360c:	4618      	mov	r0, r3
 801360e:	f7ff f9dc 	bl	80129ca <lfs_tole32>
 8013612:	4602      	mov	r2, r0
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	68db      	ldr	r3, [r3, #12]
 801361c:	4618      	mov	r0, r3
 801361e:	f7ff f9d4 	bl	80129ca <lfs_tole32>
 8013622:	4602      	mov	r2, r0
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	691b      	ldr	r3, [r3, #16]
 801362c:	4618      	mov	r0, r3
 801362e:	f7ff f9cc 	bl	80129ca <lfs_tole32>
 8013632:	4602      	mov	r2, r0
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	695b      	ldr	r3, [r3, #20]
 801363c:	4618      	mov	r0, r3
 801363e:	f7ff f9c4 	bl	80129ca <lfs_tole32>
 8013642:	4602      	mov	r2, r0
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	615a      	str	r2, [r3, #20]
}
 8013648:	bf00      	nop
 801364a:	3708      	adds	r7, #8
 801364c:	46bd      	mov	sp, r7
 801364e:	bd80      	pop	{r7, pc}

08013650 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8013650:	b480      	push	{r7}
 8013652:	b085      	sub	sp, #20
 8013654:	af00      	add	r7, sp, #0
 8013656:	6078      	str	r0, [r7, #4]
 8013658:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 801365a:	1d3b      	adds	r3, r7, #4
 801365c:	60fb      	str	r3, [r7, #12]
 801365e:	e009      	b.n	8013674 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	683a      	ldr	r2, [r7, #0]
 8013666:	429a      	cmp	r2, r3
 8013668:	d101      	bne.n	801366e <lfs_mlist_isopen+0x1e>
            return true;
 801366a:	2301      	movs	r3, #1
 801366c:	e007      	b.n	801367e <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	60fb      	str	r3, [r7, #12]
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d1f1      	bne.n	8013660 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 801367c:	2300      	movs	r3, #0
}
 801367e:	4618      	mov	r0, r3
 8013680:	3714      	adds	r7, #20
 8013682:	46bd      	mov	sp, r7
 8013684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013688:	4770      	bx	lr

0801368a <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 801368a:	b480      	push	{r7}
 801368c:	b085      	sub	sp, #20
 801368e:	af00      	add	r7, sp, #0
 8013690:	6078      	str	r0, [r7, #4]
 8013692:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	3328      	adds	r3, #40	; 0x28
 8013698:	60fb      	str	r3, [r7, #12]
 801369a:	e00d      	b.n	80136b8 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	683a      	ldr	r2, [r7, #0]
 80136a2:	429a      	cmp	r2, r3
 80136a4:	d105      	bne.n	80136b2 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	681a      	ldr	r2, [r3, #0]
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	601a      	str	r2, [r3, #0]
            break;
 80136b0:	e007      	b.n	80136c2 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	60fb      	str	r3, [r7, #12]
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d1ed      	bne.n	801369c <lfs_mlist_remove+0x12>
        }
    }
}
 80136c0:	bf00      	nop
 80136c2:	bf00      	nop
 80136c4:	3714      	adds	r7, #20
 80136c6:	46bd      	mov	sp, r7
 80136c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136cc:	4770      	bx	lr

080136ce <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 80136ce:	b480      	push	{r7}
 80136d0:	b083      	sub	sp, #12
 80136d2:	af00      	add	r7, sp, #0
 80136d4:	6078      	str	r0, [r7, #4]
 80136d6:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80136dc:	683b      	ldr	r3, [r7, #0]
 80136de:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	683a      	ldr	r2, [r7, #0]
 80136e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80136e6:	bf00      	nop
 80136e8:	370c      	adds	r7, #12
 80136ea:	46bd      	mov	sp, r7
 80136ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f0:	4770      	bx	lr

080136f2 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 80136f2:	b480      	push	{r7}
 80136f4:	b085      	sub	sp, #20
 80136f6:	af00      	add	r7, sp, #0
 80136f8:	6078      	str	r0, [r7, #4]
 80136fa:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013704:	683a      	ldr	r2, [r7, #0]
 8013706:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801370c:	6a1b      	ldr	r3, [r3, #32]
 801370e:	4413      	add	r3, r2
 8013710:	68fa      	ldr	r2, [r7, #12]
 8013712:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8013714:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 8013716:	fbb3 f1f2 	udiv	r1, r3, r2
 801371a:	fb01 f202 	mul.w	r2, r1, r2
 801371e:	1a9b      	subs	r3, r3, r2
 8013720:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013726:	68ba      	ldr	r2, [r7, #8]
 8013728:	429a      	cmp	r2, r3
 801372a:	d212      	bcs.n	8013752 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8013730:	68bb      	ldr	r3, [r7, #8]
 8013732:	095b      	lsrs	r3, r3, #5
 8013734:	009a      	lsls	r2, r3, #2
 8013736:	440a      	add	r2, r1
 8013738:	6811      	ldr	r1, [r2, #0]
 801373a:	68ba      	ldr	r2, [r7, #8]
 801373c:	f002 021f 	and.w	r2, r2, #31
 8013740:	2001      	movs	r0, #1
 8013742:	fa00 f202 	lsl.w	r2, r0, r2
 8013746:	68f8      	ldr	r0, [r7, #12]
 8013748:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801374a:	009b      	lsls	r3, r3, #2
 801374c:	4403      	add	r3, r0
 801374e:	430a      	orrs	r2, r1
 8013750:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8013752:	2300      	movs	r3, #0
}
 8013754:	4618      	mov	r0, r3
 8013756:	3714      	adds	r7, #20
 8013758:	46bd      	mov	sp, r7
 801375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375e:	4770      	bx	lr

08013760 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8013760:	b480      	push	{r7}
 8013762:	b083      	sub	sp, #12
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801376c:	6a1a      	ldr	r2, [r3, #32]
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	661a      	str	r2, [r3, #96]	; 0x60
}
 8013772:	bf00      	nop
 8013774:	370c      	adds	r7, #12
 8013776:	46bd      	mov	sp, r7
 8013778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377c:	4770      	bx	lr

0801377e <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 801377e:	b580      	push	{r7, lr}
 8013780:	b082      	sub	sp, #8
 8013782:	af00      	add	r7, sp, #0
 8013784:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	2200      	movs	r2, #0
 801378a:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	2200      	movs	r2, #0
 8013790:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 8013792:	6878      	ldr	r0, [r7, #4]
 8013794:	f7ff ffe4 	bl	8013760 <lfs_alloc_ack>
}
 8013798:	bf00      	nop
 801379a:	3708      	adds	r7, #8
 801379c:	46bd      	mov	sp, r7
 801379e:	bd80      	pop	{r7, pc}

080137a0 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 80137a0:	b580      	push	{r7, lr}
 80137a2:	b086      	sub	sp, #24
 80137a4:	af02      	add	r7, sp, #8
 80137a6:	6078      	str	r0, [r7, #4]
 80137a8:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 80137aa:	e04f      	b.n	801384c <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80137b0:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80137b6:	1c5a      	adds	r2, r3, #1
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80137c0:	1e5a      	subs	r2, r3, #1
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80137ca:	68bb      	ldr	r3, [r7, #8]
 80137cc:	095b      	lsrs	r3, r3, #5
 80137ce:	009b      	lsls	r3, r3, #2
 80137d0:	4413      	add	r3, r2
 80137d2:	681a      	ldr	r2, [r3, #0]
 80137d4:	68bb      	ldr	r3, [r7, #8]
 80137d6:	f003 031f 	and.w	r3, r3, #31
 80137da:	2101      	movs	r1, #1
 80137dc:	fa01 f303 	lsl.w	r3, r1, r3
 80137e0:	4013      	ands	r3, r2
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d132      	bne.n	801384c <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80137ea:	68bb      	ldr	r3, [r7, #8]
 80137ec:	4413      	add	r3, r2
 80137ee:	687a      	ldr	r2, [r7, #4]
 80137f0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80137f2:	6a12      	ldr	r2, [r2, #32]
 80137f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80137f8:	fb01 f202 	mul.w	r2, r1, r2
 80137fc:	1a9a      	subs	r2, r3, r2
 80137fe:	683b      	ldr	r3, [r7, #0]
 8013800:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 8013802:	e009      	b.n	8013818 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013808:	1c5a      	adds	r2, r3, #1
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013812:	1e5a      	subs	r2, r3, #1
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013820:	429a      	cmp	r2, r3
 8013822:	d011      	beq.n	8013848 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801382c:	095b      	lsrs	r3, r3, #5
 801382e:	009b      	lsls	r3, r3, #2
 8013830:	4413      	add	r3, r2
 8013832:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013838:	f003 031f 	and.w	r3, r3, #31
 801383c:	2101      	movs	r1, #1
 801383e:	fa01 f303 	lsl.w	r3, r1, r3
 8013842:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 8013844:	2b00      	cmp	r3, #0
 8013846:	d1dd      	bne.n	8013804 <lfs_alloc+0x64>
                }

                return 0;
 8013848:	2300      	movs	r3, #0
 801384a:	e050      	b.n	80138ee <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013854:	429a      	cmp	r2, r3
 8013856:	d1a9      	bne.n	80137ac <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801385c:	2b00      	cmp	r3, #0
 801385e:	d10f      	bne.n	8013880 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013868:	4413      	add	r3, r2
 801386a:	4a23      	ldr	r2, [pc, #140]	; (80138f8 <lfs_alloc+0x158>)
 801386c:	9200      	str	r2, [sp, #0]
 801386e:	f240 2247 	movw	r2, #583	; 0x247
 8013872:	4922      	ldr	r1, [pc, #136]	; (80138fc <lfs_alloc+0x15c>)
 8013874:	4822      	ldr	r0, [pc, #136]	; (8013900 <lfs_alloc+0x160>)
 8013876:	f008 f9e5 	bl	801bc44 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 801387a:	f06f 031b 	mvn.w	r3, #27
 801387e:	e036      	b.n	80138ee <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013888:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 801388a:	687a      	ldr	r2, [r7, #4]
 801388c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801388e:	6a12      	ldr	r2, [r2, #32]
 8013890:	fbb3 f1f2 	udiv	r1, r3, r2
 8013894:	fb01 f202 	mul.w	r2, r1, r2
 8013898:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80138a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138a4:	00da      	lsls	r2, r3, #3
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80138aa:	4619      	mov	r1, r3
 80138ac:	4610      	mov	r0, r2
 80138ae:	f7ff f811 	bl	80128d4 <lfs_min>
 80138b2:	4602      	mov	r2, r0
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	2200      	movs	r2, #0
 80138bc:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80138c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138c8:	461a      	mov	r2, r3
 80138ca:	2100      	movs	r1, #0
 80138cc:	f008 fb1c 	bl	801bf08 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 80138d0:	2301      	movs	r3, #1
 80138d2:	687a      	ldr	r2, [r7, #4]
 80138d4:	490b      	ldr	r1, [pc, #44]	; (8013904 <lfs_alloc+0x164>)
 80138d6:	6878      	ldr	r0, [r7, #4]
 80138d8:	f004 ff08 	bl	80186ec <lfs_fs_rawtraverse>
 80138dc:	60f8      	str	r0, [r7, #12]
        if (err) {
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	f43f af62 	beq.w	80137aa <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 80138e6:	6878      	ldr	r0, [r7, #4]
 80138e8:	f7ff ff49 	bl	801377e <lfs_alloc_drop>
            return err;
 80138ec:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 80138ee:	4618      	mov	r0, r3
 80138f0:	3710      	adds	r7, #16
 80138f2:	46bd      	mov	sp, r7
 80138f4:	bd80      	pop	{r7, pc}
 80138f6:	bf00      	nop
 80138f8:	08021a88 	.word	0x08021a88
 80138fc:	08021974 	.word	0x08021974
 8013900:	08021a60 	.word	0x08021a60
 8013904:	080136f3 	.word	0x080136f3

08013908 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8013908:	b590      	push	{r4, r7, lr}
 801390a:	b08f      	sub	sp, #60	; 0x3c
 801390c:	af04      	add	r7, sp, #16
 801390e:	60f8      	str	r0, [r7, #12]
 8013910:	60b9      	str	r1, [r7, #8]
 8013912:	607a      	str	r2, [r7, #4]
 8013914:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8013916:	68bb      	ldr	r3, [r7, #8]
 8013918:	68db      	ldr	r3, [r3, #12]
 801391a:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 801391c:	68bb      	ldr	r3, [r7, #8]
 801391e:	691b      	ldr	r3, [r3, #16]
 8013920:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8013922:	2300      	movs	r3, #0
 8013924:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	333c      	adds	r3, #60	; 0x3c
 801392a:	68ba      	ldr	r2, [r7, #8]
 801392c:	4611      	mov	r1, r2
 801392e:	4618      	mov	r0, r3
 8013930:	f7ff fd8e 	bl	8013450 <lfs_gstate_hasmovehere>
 8013934:	4603      	mov	r3, r0
 8013936:	2b00      	cmp	r3, #0
 8013938:	f000 80ba 	beq.w	8013ab0 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(gmask) != 0 &&
 801393c:	6878      	ldr	r0, [r7, #4]
 801393e:	f7ff fcdf 	bl	8013300 <lfs_tag_id>
 8013942:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8013944:	2b00      	cmp	r3, #0
 8013946:	f000 80b3 	beq.w	8013ab0 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801394e:	4618      	mov	r0, r3
 8013950:	f7ff fcd6 	bl	8013300 <lfs_tag_id>
 8013954:	4603      	mov	r3, r0
 8013956:	461c      	mov	r4, r3
 8013958:	6838      	ldr	r0, [r7, #0]
 801395a:	f7ff fcd1 	bl	8013300 <lfs_tag_id>
 801395e:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8013960:	429c      	cmp	r4, r3
 8013962:	f200 80a5 	bhi.w	8013ab0 <lfs_dir_getslice+0x1a8>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8013966:	6a3b      	ldr	r3, [r7, #32]
 8013968:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801396c:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 801396e:	e09f      	b.n	8013ab0 <lfs_dir_getslice+0x1a8>
        off -= lfs_tag_dsize(ntag);
 8013970:	693b      	ldr	r3, [r7, #16]
 8013972:	4618      	mov	r0, r3
 8013974:	f7ff fce1 	bl	801333a <lfs_tag_dsize>
 8013978:	4602      	mov	r2, r0
 801397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801397c:	1a9b      	subs	r3, r3, r2
 801397e:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8013980:	693b      	ldr	r3, [r7, #16]
 8013982:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8013984:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 8013986:	68bb      	ldr	r3, [r7, #8]
 8013988:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 801398a:	2204      	movs	r2, #4
 801398c:	9203      	str	r2, [sp, #12]
 801398e:	f107 0210 	add.w	r2, r7, #16
 8013992:	9202      	str	r2, [sp, #8]
 8013994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013996:	9201      	str	r2, [sp, #4]
 8013998:	9300      	str	r3, [sp, #0]
 801399a:	2304      	movs	r3, #4
 801399c:	460a      	mov	r2, r1
 801399e:	2100      	movs	r1, #0
 80139a0:	68f8      	ldr	r0, [r7, #12]
 80139a2:	f7ff f873 	bl	8012a8c <lfs_bd_read>
 80139a6:	61b8      	str	r0, [r7, #24]
        if (err) {
 80139a8:	69bb      	ldr	r3, [r7, #24]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d001      	beq.n	80139b2 <lfs_dir_getslice+0xaa>
            return err;
 80139ae:	69bb      	ldr	r3, [r7, #24]
 80139b0:	e08a      	b.n	8013ac8 <lfs_dir_getslice+0x1c0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 80139b2:	693b      	ldr	r3, [r7, #16]
 80139b4:	4618      	mov	r0, r3
 80139b6:	f7ff f814 	bl	80129e2 <lfs_frombe32>
 80139ba:	4602      	mov	r2, r0
 80139bc:	69fb      	ldr	r3, [r7, #28]
 80139be:	4053      	eors	r3, r2
 80139c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80139c4:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 80139c6:	6878      	ldr	r0, [r7, #4]
 80139c8:	f7ff fc9a 	bl	8013300 <lfs_tag_id>
 80139cc:	4603      	mov	r3, r0
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d02b      	beq.n	8013a2a <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80139d2:	69f8      	ldr	r0, [r7, #28]
 80139d4:	f7ff fc5a 	bl	801328c <lfs_tag_type1>
 80139d8:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 80139da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80139de:	d124      	bne.n	8013a2a <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 80139e0:	69f8      	ldr	r0, [r7, #28]
 80139e2:	f7ff fc8d 	bl	8013300 <lfs_tag_id>
 80139e6:	4603      	mov	r3, r0
 80139e8:	461c      	mov	r4, r3
 80139ea:	6a3b      	ldr	r3, [r7, #32]
 80139ec:	683a      	ldr	r2, [r7, #0]
 80139ee:	1ad3      	subs	r3, r2, r3
 80139f0:	4618      	mov	r0, r3
 80139f2:	f7ff fc85 	bl	8013300 <lfs_tag_id>
 80139f6:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80139f8:	429c      	cmp	r4, r3
 80139fa:	d816      	bhi.n	8013a2a <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 80139fc:	6a3b      	ldr	r3, [r7, #32]
 80139fe:	683a      	ldr	r2, [r7, #0]
 8013a00:	1ad2      	subs	r2, r2, r3
 8013a02:	4b33      	ldr	r3, [pc, #204]	; (8013ad0 <lfs_dir_getslice+0x1c8>)
 8013a04:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8013a06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013a0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013a0e:	69fa      	ldr	r2, [r7, #28]
 8013a10:	429a      	cmp	r2, r3
 8013a12:	d102      	bne.n	8013a1a <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8013a14:	f06f 0301 	mvn.w	r3, #1
 8013a18:	e056      	b.n	8013ac8 <lfs_dir_getslice+0x1c0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8013a1a:	69f8      	ldr	r0, [r7, #28]
 8013a1c:	f7ff fc63 	bl	80132e6 <lfs_tag_splice>
 8013a20:	4603      	mov	r3, r0
 8013a22:	029a      	lsls	r2, r3, #10
 8013a24:	6a3b      	ldr	r3, [r7, #32]
 8013a26:	4413      	add	r3, r2
 8013a28:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8013a2a:	687a      	ldr	r2, [r7, #4]
 8013a2c:	69fb      	ldr	r3, [r7, #28]
 8013a2e:	401a      	ands	r2, r3
 8013a30:	6a3b      	ldr	r3, [r7, #32]
 8013a32:	6839      	ldr	r1, [r7, #0]
 8013a34:	1ac9      	subs	r1, r1, r3
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	400b      	ands	r3, r1
 8013a3a:	429a      	cmp	r2, r3
 8013a3c:	d138      	bne.n	8013ab0 <lfs_dir_getslice+0x1a8>
            if (lfs_tag_isdelete(tag)) {
 8013a3e:	69f8      	ldr	r0, [r7, #28]
 8013a40:	f7ff fc11 	bl	8013266 <lfs_tag_isdelete>
 8013a44:	4603      	mov	r3, r0
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d002      	beq.n	8013a50 <lfs_dir_getslice+0x148>
                return LFS_ERR_NOENT;
 8013a4a:	f06f 0301 	mvn.w	r3, #1
 8013a4e:	e03b      	b.n	8013ac8 <lfs_dir_getslice+0x1c0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8013a50:	69f8      	ldr	r0, [r7, #28]
 8013a52:	f7ff fc65 	bl	8013320 <lfs_tag_size>
 8013a56:	4603      	mov	r3, r0
 8013a58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	f7fe ff3a 	bl	80128d4 <lfs_min>
 8013a60:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8013a62:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8013a64:	68bb      	ldr	r3, [r7, #8]
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013a6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013a6c:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8013a6e:	3204      	adds	r2, #4
 8013a70:	6979      	ldr	r1, [r7, #20]
 8013a72:	9103      	str	r1, [sp, #12]
 8013a74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013a76:	9102      	str	r1, [sp, #8]
 8013a78:	9201      	str	r2, [sp, #4]
 8013a7a:	9300      	str	r3, [sp, #0]
 8013a7c:	697b      	ldr	r3, [r7, #20]
 8013a7e:	4602      	mov	r2, r0
 8013a80:	2100      	movs	r1, #0
 8013a82:	68f8      	ldr	r0, [r7, #12]
 8013a84:	f7ff f802 	bl	8012a8c <lfs_bd_read>
 8013a88:	61b8      	str	r0, [r7, #24]
            if (err) {
 8013a8a:	69bb      	ldr	r3, [r7, #24]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d001      	beq.n	8013a94 <lfs_dir_getslice+0x18c>
                return err;
 8013a90:	69bb      	ldr	r3, [r7, #24]
 8013a92:	e019      	b.n	8013ac8 <lfs_dir_getslice+0x1c0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8013a94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013a96:	697b      	ldr	r3, [r7, #20]
 8013a98:	18d0      	adds	r0, r2, r3
 8013a9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013a9c:	697b      	ldr	r3, [r7, #20]
 8013a9e:	1ad3      	subs	r3, r2, r3
 8013aa0:	461a      	mov	r2, r3
 8013aa2:	2100      	movs	r1, #0
 8013aa4:	f008 fa30 	bl	801bf08 <memset>

            return tag + gdiff;
 8013aa8:	6a3a      	ldr	r2, [r7, #32]
 8013aaa:	69fb      	ldr	r3, [r7, #28]
 8013aac:	4413      	add	r3, r2
 8013aae:	e00b      	b.n	8013ac8 <lfs_dir_getslice+0x1c0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8013ab0:	693b      	ldr	r3, [r7, #16]
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	f7ff fc41 	bl	801333a <lfs_tag_dsize>
 8013ab8:	4603      	mov	r3, r0
 8013aba:	3304      	adds	r3, #4
 8013abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013abe:	429a      	cmp	r2, r3
 8013ac0:	f4bf af56 	bcs.w	8013970 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 8013ac4:	f06f 0301 	mvn.w	r3, #1
}
 8013ac8:	4618      	mov	r0, r3
 8013aca:	372c      	adds	r7, #44	; 0x2c
 8013acc:	46bd      	mov	sp, r7
 8013ace:	bd90      	pop	{r4, r7, pc}
 8013ad0:	000ffc00 	.word	0x000ffc00

08013ad4 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	b088      	sub	sp, #32
 8013ad8:	af04      	add	r7, sp, #16
 8013ada:	60f8      	str	r0, [r7, #12]
 8013adc:	60b9      	str	r1, [r7, #8]
 8013ade:	607a      	str	r2, [r7, #4]
 8013ae0:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8013ae2:	6838      	ldr	r0, [r7, #0]
 8013ae4:	f7ff fc1c 	bl	8013320 <lfs_tag_size>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	9302      	str	r3, [sp, #8]
 8013aec:	69bb      	ldr	r3, [r7, #24]
 8013aee:	9301      	str	r3, [sp, #4]
 8013af0:	2300      	movs	r3, #0
 8013af2:	9300      	str	r3, [sp, #0]
 8013af4:	683b      	ldr	r3, [r7, #0]
 8013af6:	687a      	ldr	r2, [r7, #4]
 8013af8:	68b9      	ldr	r1, [r7, #8]
 8013afa:	68f8      	ldr	r0, [r7, #12]
 8013afc:	f7ff ff04 	bl	8013908 <lfs_dir_getslice>
 8013b00:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8013b02:	4618      	mov	r0, r3
 8013b04:	3710      	adds	r7, #16
 8013b06:	46bd      	mov	sp, r7
 8013b08:	bd80      	pop	{r7, pc}

08013b0a <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8013b0a:	b580      	push	{r7, lr}
 8013b0c:	b08c      	sub	sp, #48	; 0x30
 8013b0e:	af04      	add	r7, sp, #16
 8013b10:	60f8      	str	r0, [r7, #12]
 8013b12:	60b9      	str	r1, [r7, #8]
 8013b14:	607a      	str	r2, [r7, #4]
 8013b16:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8013b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b1a:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8013b1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b20:	441a      	add	r2, r3
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013b26:	69db      	ldr	r3, [r3, #28]
 8013b28:	429a      	cmp	r2, r3
 8013b2a:	f240 80c0 	bls.w	8013cae <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8013b2e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8013b32:	e0c1      	b.n	8013cb8 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8013b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b36:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d03f      	beq.n	8013bbe <lfs_dir_getread+0xb4>
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	f113 0f02 	cmn.w	r3, #2
 8013b46:	d13a      	bne.n	8013bbe <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	685a      	ldr	r2, [r3, #4]
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	689b      	ldr	r3, [r3, #8]
 8013b50:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8013b52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013b54:	429a      	cmp	r2, r3
 8013b56:	d232      	bcs.n	8013bbe <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	685b      	ldr	r3, [r3, #4]
 8013b5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013b5e:	429a      	cmp	r2, r3
 8013b60:	d324      	bcc.n	8013bac <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	689a      	ldr	r2, [r3, #8]
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	6859      	ldr	r1, [r3, #4]
 8013b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b6c:	1acb      	subs	r3, r1, r3
 8013b6e:	4413      	add	r3, r2
 8013b70:	4619      	mov	r1, r3
 8013b72:	69b8      	ldr	r0, [r7, #24]
 8013b74:	f7fe feae 	bl	80128d4 <lfs_min>
 8013b78:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	68da      	ldr	r2, [r3, #12]
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	685b      	ldr	r3, [r3, #4]
 8013b82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013b84:	1acb      	subs	r3, r1, r3
 8013b86:	4413      	add	r3, r2
 8013b88:	69ba      	ldr	r2, [r7, #24]
 8013b8a:	4619      	mov	r1, r3
 8013b8c:	69f8      	ldr	r0, [r7, #28]
 8013b8e:	f008 fb90 	bl	801c2b2 <memcpy>

                data += diff;
 8013b92:	69fa      	ldr	r2, [r7, #28]
 8013b94:	69bb      	ldr	r3, [r7, #24]
 8013b96:	4413      	add	r3, r2
 8013b98:	61fb      	str	r3, [r7, #28]
                off += diff;
 8013b9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013b9c:	69bb      	ldr	r3, [r7, #24]
 8013b9e:	4413      	add	r3, r2
 8013ba0:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8013ba2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013ba4:	69bb      	ldr	r3, [r7, #24]
 8013ba6:	1ad3      	subs	r3, r2, r3
 8013ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8013baa:	e080      	b.n	8013cae <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	685a      	ldr	r2, [r3, #4]
 8013bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bb2:	1ad3      	subs	r3, r2, r3
 8013bb4:	4619      	mov	r1, r3
 8013bb6:	69b8      	ldr	r0, [r7, #24]
 8013bb8:	f7fe fe8c 	bl	80128d4 <lfs_min>
 8013bbc:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8013bbe:	683b      	ldr	r3, [r7, #0]
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	f113 0f02 	cmn.w	r3, #2
 8013bc6:	d13a      	bne.n	8013c3e <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8013bc8:	683b      	ldr	r3, [r7, #0]
 8013bca:	685a      	ldr	r2, [r3, #4]
 8013bcc:	683b      	ldr	r3, [r7, #0]
 8013bce:	689b      	ldr	r3, [r3, #8]
 8013bd0:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8013bd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013bd4:	429a      	cmp	r2, r3
 8013bd6:	d232      	bcs.n	8013c3e <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8013bd8:	683b      	ldr	r3, [r7, #0]
 8013bda:	685b      	ldr	r3, [r3, #4]
 8013bdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013bde:	429a      	cmp	r2, r3
 8013be0:	d324      	bcc.n	8013c2c <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8013be2:	683b      	ldr	r3, [r7, #0]
 8013be4:	689a      	ldr	r2, [r3, #8]
 8013be6:	683b      	ldr	r3, [r7, #0]
 8013be8:	6859      	ldr	r1, [r3, #4]
 8013bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bec:	1acb      	subs	r3, r1, r3
 8013bee:	4413      	add	r3, r2
 8013bf0:	4619      	mov	r1, r3
 8013bf2:	69b8      	ldr	r0, [r7, #24]
 8013bf4:	f7fe fe6e 	bl	80128d4 <lfs_min>
 8013bf8:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8013bfa:	683b      	ldr	r3, [r7, #0]
 8013bfc:	68da      	ldr	r2, [r3, #12]
 8013bfe:	683b      	ldr	r3, [r7, #0]
 8013c00:	685b      	ldr	r3, [r3, #4]
 8013c02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013c04:	1acb      	subs	r3, r1, r3
 8013c06:	4413      	add	r3, r2
 8013c08:	69ba      	ldr	r2, [r7, #24]
 8013c0a:	4619      	mov	r1, r3
 8013c0c:	69f8      	ldr	r0, [r7, #28]
 8013c0e:	f008 fb50 	bl	801c2b2 <memcpy>

                data += diff;
 8013c12:	69fa      	ldr	r2, [r7, #28]
 8013c14:	69bb      	ldr	r3, [r7, #24]
 8013c16:	4413      	add	r3, r2
 8013c18:	61fb      	str	r3, [r7, #28]
                off += diff;
 8013c1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c1c:	69bb      	ldr	r3, [r7, #24]
 8013c1e:	4413      	add	r3, r2
 8013c20:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8013c22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013c24:	69bb      	ldr	r3, [r7, #24]
 8013c26:	1ad3      	subs	r3, r2, r3
 8013c28:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8013c2a:	e040      	b.n	8013cae <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8013c2c:	683b      	ldr	r3, [r7, #0]
 8013c2e:	685a      	ldr	r2, [r3, #4]
 8013c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c32:	1ad3      	subs	r3, r2, r3
 8013c34:	4619      	mov	r1, r3
 8013c36:	69b8      	ldr	r0, [r7, #24]
 8013c38:	f7fe fe4c 	bl	80128d4 <lfs_min>
 8013c3c:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8013c3e:	683b      	ldr	r3, [r7, #0]
 8013c40:	f06f 0201 	mvn.w	r2, #1
 8013c44:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013c4a:	695b      	ldr	r3, [r3, #20]
 8013c4c:	4619      	mov	r1, r3
 8013c4e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013c50:	f7fe fe50 	bl	80128f4 <lfs_aligndown>
 8013c54:	4602      	mov	r2, r0
 8013c56:	683b      	ldr	r3, [r7, #0]
 8013c58:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8013c5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c5e:	441a      	add	r2, r3
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013c64:	695b      	ldr	r3, [r3, #20]
 8013c66:	4619      	mov	r1, r3
 8013c68:	4610      	mov	r0, r2
 8013c6a:	f7fe fe58 	bl	801291e <lfs_alignup>
 8013c6e:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8013c76:	4619      	mov	r1, r3
 8013c78:	4610      	mov	r0, r2
 8013c7a:	f7fe fe2b 	bl	80128d4 <lfs_min>
 8013c7e:	4602      	mov	r2, r0
 8013c80:	683b      	ldr	r3, [r7, #0]
 8013c82:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8013c84:	683b      	ldr	r3, [r7, #0]
 8013c86:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8013c88:	683a      	ldr	r2, [r7, #0]
 8013c8a:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8013c8c:	6839      	ldr	r1, [r7, #0]
 8013c8e:	6889      	ldr	r1, [r1, #8]
 8013c90:	9102      	str	r1, [sp, #8]
 8013c92:	9201      	str	r2, [sp, #4]
 8013c94:	9300      	str	r3, [sp, #0]
 8013c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c9a:	68b9      	ldr	r1, [r7, #8]
 8013c9c:	68f8      	ldr	r0, [r7, #12]
 8013c9e:	f7ff fe33 	bl	8013908 <lfs_dir_getslice>
 8013ca2:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8013ca4:	697b      	ldr	r3, [r7, #20]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	da01      	bge.n	8013cae <lfs_dir_getread+0x1a4>
            return err;
 8013caa:	697b      	ldr	r3, [r7, #20]
 8013cac:	e004      	b.n	8013cb8 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8013cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	f47f af3f 	bne.w	8013b34 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8013cb6:	2300      	movs	r3, #0
}
 8013cb8:	4618      	mov	r0, r3
 8013cba:	3720      	adds	r7, #32
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	bd80      	pop	{r7, pc}

08013cc0 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8013cc0:	b590      	push	{r4, r7, lr}
 8013cc2:	b087      	sub	sp, #28
 8013cc4:	af00      	add	r7, sp, #0
 8013cc6:	60f8      	str	r0, [r7, #12]
 8013cc8:	60b9      	str	r1, [r7, #8]
 8013cca:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8013cd0:	68bb      	ldr	r3, [r7, #8]
 8013cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d001      	beq.n	8013cde <lfs_dir_traverse_filter+0x1e>
 8013cda:	4b24      	ldr	r3, [pc, #144]	; (8013d6c <lfs_dir_traverse_filter+0xac>)
 8013cdc:	e000      	b.n	8013ce0 <lfs_dir_traverse_filter+0x20>
 8013cde:	4b24      	ldr	r3, [pc, #144]	; (8013d70 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8013ce0:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8013ce2:	697b      	ldr	r3, [r7, #20]
 8013ce4:	681a      	ldr	r2, [r3, #0]
 8013ce6:	68bb      	ldr	r3, [r7, #8]
 8013ce8:	405a      	eors	r2, r3
 8013cea:	693b      	ldr	r3, [r7, #16]
 8013cec:	4013      	ands	r3, r2
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d014      	beq.n	8013d1c <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8013cf2:	697b      	ldr	r3, [r7, #20]
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	f7ff fab5 	bl	8013266 <lfs_tag_isdelete>
 8013cfc:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d10c      	bne.n	8013d1c <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8013d02:	68bb      	ldr	r3, [r7, #8]
 8013d04:	4a19      	ldr	r2, [pc, #100]	; (8013d6c <lfs_dir_traverse_filter+0xac>)
 8013d06:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8013d08:	697b      	ldr	r3, [r7, #20]
 8013d0a:	6819      	ldr	r1, [r3, #0]
 8013d0c:	4b19      	ldr	r3, [pc, #100]	; (8013d74 <lfs_dir_traverse_filter+0xb4>)
 8013d0e:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8013d10:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8013d14:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8013d18:	429a      	cmp	r2, r3
 8013d1a:	d104      	bne.n	8013d26 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8013d1c:	697b      	ldr	r3, [r7, #20]
 8013d1e:	2200      	movs	r2, #0
 8013d20:	601a      	str	r2, [r3, #0]
        return true;
 8013d22:	2301      	movs	r3, #1
 8013d24:	e01e      	b.n	8013d64 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8013d26:	68b8      	ldr	r0, [r7, #8]
 8013d28:	f7ff fab0 	bl	801328c <lfs_tag_type1>
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013d32:	d116      	bne.n	8013d62 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8013d34:	68b8      	ldr	r0, [r7, #8]
 8013d36:	f7ff fae3 	bl	8013300 <lfs_tag_id>
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	461c      	mov	r4, r3
 8013d3e:	697b      	ldr	r3, [r7, #20]
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	4618      	mov	r0, r3
 8013d44:	f7ff fadc 	bl	8013300 <lfs_tag_id>
 8013d48:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8013d4a:	429c      	cmp	r4, r3
 8013d4c:	d809      	bhi.n	8013d62 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8013d4e:	68b8      	ldr	r0, [r7, #8]
 8013d50:	f7ff fac9 	bl	80132e6 <lfs_tag_splice>
 8013d54:	4603      	mov	r3, r0
 8013d56:	029a      	lsls	r2, r3, #10
 8013d58:	697b      	ldr	r3, [r7, #20]
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	441a      	add	r2, r3
 8013d5e:	697b      	ldr	r3, [r7, #20]
 8013d60:	601a      	str	r2, [r3, #0]
    }

    return false;
 8013d62:	2300      	movs	r3, #0
}
 8013d64:	4618      	mov	r0, r3
 8013d66:	371c      	adds	r7, #28
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd90      	pop	{r4, r7, pc}
 8013d6c:	7ffffc00 	.word	0x7ffffc00
 8013d70:	700ffc00 	.word	0x700ffc00
 8013d74:	000ffc00 	.word	0x000ffc00

08013d78 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8013d78:	b590      	push	{r4, r7, lr}
 8013d7a:	b0c1      	sub	sp, #260	; 0x104
 8013d7c:	af04      	add	r7, sp, #16
 8013d7e:	60f8      	str	r0, [r7, #12]
 8013d80:	60b9      	str	r1, [r7, #8]
 8013d82:	607a      	str	r2, [r7, #4]
 8013d84:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8013d86:	2300      	movs	r3, #0
 8013d88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8013d8c:	6838      	ldr	r0, [r7, #0]
 8013d8e:	f7ff fad4 	bl	801333a <lfs_tag_dsize>
 8013d92:	4602      	mov	r2, r0
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	441a      	add	r2, r3
 8013d98:	68bb      	ldr	r3, [r7, #8]
 8013d9a:	68db      	ldr	r3, [r3, #12]
 8013d9c:	429a      	cmp	r2, r3
 8013d9e:	d237      	bcs.n	8013e10 <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 8013da0:	6838      	ldr	r0, [r7, #0]
 8013da2:	f7ff faca 	bl	801333a <lfs_tag_dsize>
 8013da6:	4602      	mov	r2, r0
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	4413      	add	r3, r2
 8013dac:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8013dae:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 8013db0:	68bb      	ldr	r3, [r7, #8]
 8013db2:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 8013db4:	2204      	movs	r2, #4
 8013db6:	9203      	str	r2, [sp, #12]
 8013db8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8013dbc:	9202      	str	r2, [sp, #8]
 8013dbe:	687a      	ldr	r2, [r7, #4]
 8013dc0:	9201      	str	r2, [sp, #4]
 8013dc2:	9300      	str	r3, [sp, #0]
 8013dc4:	2304      	movs	r3, #4
 8013dc6:	460a      	mov	r2, r1
 8013dc8:	2100      	movs	r1, #0
 8013dca:	68f8      	ldr	r0, [r7, #12]
 8013dcc:	f7fe fe5e 	bl	8012a8c <lfs_bd_read>
 8013dd0:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                if (err) {
 8013dd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d002      	beq.n	8013de2 <lfs_dir_traverse+0x6a>
                    return err;
 8013ddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013de0:	e3a6      	b.n	8014530 <lfs_dir_traverse+0x7b8>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8013de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013de4:	4618      	mov	r0, r3
 8013de6:	f7fe fdfc 	bl	80129e2 <lfs_frombe32>
 8013dea:	4602      	mov	r2, r0
 8013dec:	683b      	ldr	r3, [r7, #0]
 8013dee:	4053      	eors	r3, r2
 8013df0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013df4:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 8013df6:	68bb      	ldr	r3, [r7, #8]
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	3304      	adds	r3, #4
 8013e00:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 8013e02:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013e06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 8013e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013e0c:	603b      	str	r3, [r7, #0]
 8013e0e:	e01b      	b.n	8013e48 <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 8013e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	dd13      	ble.n	8013e40 <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 8013e18:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 8013e20:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013e24:	685b      	ldr	r3, [r3, #4]
 8013e26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 8013e2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013e2e:	3308      	adds	r3, #8
 8013e30:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 8013e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013e38:	3b01      	subs	r3, #1
 8013e3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8013e3e:	e003      	b.n	8013e48 <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8013e40:	2300      	movs	r3, #0
 8013e42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 8013e46:	e2a2      	b.n	801438e <lfs_dir_traverse+0x616>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8013e48:	4b7e      	ldr	r3, [pc, #504]	; (8014044 <lfs_dir_traverse+0x2cc>)
 8013e4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8013e4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013e54:	405a      	eors	r2, r3
 8013e56:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8013e5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8013e5e:	400b      	ands	r3, r1
 8013e60:	4013      	ands	r3, r2
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	f040 8285 	bne.w	8014372 <lfs_dir_traverse+0x5fa>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8013e68:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8013e6c:	f7ff fa48 	bl	8013300 <lfs_tag_id>
 8013e70:	4603      	mov	r3, r0
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	f000 80f0 	beq.w	8014058 <lfs_dir_traverse+0x2e0>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8013e78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013e7c:	2b02      	cmp	r3, #2
 8013e7e:	d906      	bls.n	8013e8e <lfs_dir_traverse+0x116>
 8013e80:	4b71      	ldr	r3, [pc, #452]	; (8014048 <lfs_dir_traverse+0x2d0>)
 8013e82:	4a72      	ldr	r2, [pc, #456]	; (801404c <lfs_dir_traverse+0x2d4>)
 8013e84:	f240 314e 	movw	r1, #846	; 0x34e
 8013e88:	4871      	ldr	r0, [pc, #452]	; (8014050 <lfs_dir_traverse+0x2d8>)
 8013e8a:	f006 fea1 	bl	801abd0 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8013e8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013e90:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8013e94:	4613      	mov	r3, r2
 8013e96:	011b      	lsls	r3, r3, #4
 8013e98:	1a9b      	subs	r3, r3, r2
 8013e9a:	009b      	lsls	r3, r3, #2
 8013e9c:	33f0      	adds	r3, #240	; 0xf0
 8013e9e:	443b      	add	r3, r7
 8013ea0:	3b98      	subs	r3, #152	; 0x98
 8013ea2:	68ba      	ldr	r2, [r7, #8]
 8013ea4:	601a      	str	r2, [r3, #0]
 8013ea6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8013eaa:	4613      	mov	r3, r2
 8013eac:	011b      	lsls	r3, r3, #4
 8013eae:	1a9b      	subs	r3, r3, r2
 8013eb0:	009b      	lsls	r3, r3, #2
 8013eb2:	33f0      	adds	r3, #240	; 0xf0
 8013eb4:	443b      	add	r3, r7
 8013eb6:	3b94      	subs	r3, #148	; 0x94
 8013eb8:	687a      	ldr	r2, [r7, #4]
 8013eba:	601a      	str	r2, [r3, #0]
 8013ebc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8013ec0:	4613      	mov	r3, r2
 8013ec2:	011b      	lsls	r3, r3, #4
 8013ec4:	1a9b      	subs	r3, r3, r2
 8013ec6:	009b      	lsls	r3, r3, #2
 8013ec8:	33f0      	adds	r3, #240	; 0xf0
 8013eca:	443b      	add	r3, r7
 8013ecc:	3b90      	subs	r3, #144	; 0x90
 8013ece:	683a      	ldr	r2, [r7, #0]
 8013ed0:	601a      	str	r2, [r3, #0]
 8013ed2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8013ed6:	4613      	mov	r3, r2
 8013ed8:	011b      	lsls	r3, r3, #4
 8013eda:	1a9b      	subs	r3, r3, r2
 8013edc:	009b      	lsls	r3, r3, #2
 8013ede:	33f0      	adds	r3, #240	; 0xf0
 8013ee0:	443b      	add	r3, r7
 8013ee2:	3b8c      	subs	r3, #140	; 0x8c
 8013ee4:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8013ee8:	601a      	str	r2, [r3, #0]
 8013eea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8013eee:	4613      	mov	r3, r2
 8013ef0:	011b      	lsls	r3, r3, #4
 8013ef2:	1a9b      	subs	r3, r3, r2
 8013ef4:	009b      	lsls	r3, r3, #2
 8013ef6:	33f0      	adds	r3, #240	; 0xf0
 8013ef8:	443b      	add	r3, r7
 8013efa:	3b88      	subs	r3, #136	; 0x88
 8013efc:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8013f00:	601a      	str	r2, [r3, #0]
 8013f02:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8013f06:	4613      	mov	r3, r2
 8013f08:	011b      	lsls	r3, r3, #4
 8013f0a:	1a9b      	subs	r3, r3, r2
 8013f0c:	009b      	lsls	r3, r3, #2
 8013f0e:	33f0      	adds	r3, #240	; 0xf0
 8013f10:	443b      	add	r3, r7
 8013f12:	3b84      	subs	r3, #132	; 0x84
 8013f14:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8013f18:	601a      	str	r2, [r3, #0]
 8013f1a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8013f1e:	4613      	mov	r3, r2
 8013f20:	011b      	lsls	r3, r3, #4
 8013f22:	1a9b      	subs	r3, r3, r2
 8013f24:	009b      	lsls	r3, r3, #2
 8013f26:	33f0      	adds	r3, #240	; 0xf0
 8013f28:	443b      	add	r3, r7
 8013f2a:	3b80      	subs	r3, #128	; 0x80
 8013f2c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8013f30:	601a      	str	r2, [r3, #0]
 8013f32:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8013f36:	4613      	mov	r3, r2
 8013f38:	011b      	lsls	r3, r3, #4
 8013f3a:	1a9b      	subs	r3, r3, r2
 8013f3c:	009b      	lsls	r3, r3, #2
 8013f3e:	33f0      	adds	r3, #240	; 0xf0
 8013f40:	443b      	add	r3, r7
 8013f42:	3b7c      	subs	r3, #124	; 0x7c
 8013f44:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8013f48:	801a      	strh	r2, [r3, #0]
 8013f4a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8013f4e:	4613      	mov	r3, r2
 8013f50:	011b      	lsls	r3, r3, #4
 8013f52:	1a9b      	subs	r3, r3, r2
 8013f54:	009b      	lsls	r3, r3, #2
 8013f56:	33f0      	adds	r3, #240	; 0xf0
 8013f58:	443b      	add	r3, r7
 8013f5a:	3b7a      	subs	r3, #122	; 0x7a
 8013f5c:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8013f60:	801a      	strh	r2, [r3, #0]
 8013f62:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8013f66:	4613      	mov	r3, r2
 8013f68:	011b      	lsls	r3, r3, #4
 8013f6a:	1a9b      	subs	r3, r3, r2
 8013f6c:	009b      	lsls	r3, r3, #2
 8013f6e:	33f0      	adds	r3, #240	; 0xf0
 8013f70:	443b      	add	r3, r7
 8013f72:	3b78      	subs	r3, #120	; 0x78
 8013f74:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8013f78:	801a      	strh	r2, [r3, #0]
 8013f7a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8013f7e:	4613      	mov	r3, r2
 8013f80:	011b      	lsls	r3, r3, #4
 8013f82:	1a9b      	subs	r3, r3, r2
 8013f84:	009b      	lsls	r3, r3, #2
 8013f86:	33f0      	adds	r3, #240	; 0xf0
 8013f88:	443b      	add	r3, r7
 8013f8a:	3b74      	subs	r3, #116	; 0x74
 8013f8c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8013f90:	601a      	str	r2, [r3, #0]
 8013f92:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8013f96:	4613      	mov	r3, r2
 8013f98:	011b      	lsls	r3, r3, #4
 8013f9a:	1a9b      	subs	r3, r3, r2
 8013f9c:	009b      	lsls	r3, r3, #2
 8013f9e:	33f0      	adds	r3, #240	; 0xf0
 8013fa0:	443b      	add	r3, r7
 8013fa2:	3b70      	subs	r3, #112	; 0x70
 8013fa4:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8013fa8:	601a      	str	r2, [r3, #0]
 8013faa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8013fae:	4613      	mov	r3, r2
 8013fb0:	011b      	lsls	r3, r3, #4
 8013fb2:	1a9b      	subs	r3, r3, r2
 8013fb4:	009b      	lsls	r3, r3, #2
 8013fb6:	33f0      	adds	r3, #240	; 0xf0
 8013fb8:	443b      	add	r3, r7
 8013fba:	3b6c      	subs	r3, #108	; 0x6c
 8013fbc:	6019      	str	r1, [r3, #0]
 8013fbe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8013fc2:	4613      	mov	r3, r2
 8013fc4:	011b      	lsls	r3, r3, #4
 8013fc6:	1a9b      	subs	r3, r3, r2
 8013fc8:	009b      	lsls	r3, r3, #2
 8013fca:	33f0      	adds	r3, #240	; 0xf0
 8013fcc:	443b      	add	r3, r7
 8013fce:	3b68      	subs	r3, #104	; 0x68
 8013fd0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8013fd4:	601a      	str	r2, [r3, #0]
 8013fd6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8013fda:	4613      	mov	r3, r2
 8013fdc:	011b      	lsls	r3, r3, #4
 8013fde:	1a9b      	subs	r3, r3, r2
 8013fe0:	009b      	lsls	r3, r3, #2
 8013fe2:	33f0      	adds	r3, #240	; 0xf0
 8013fe4:	443b      	add	r3, r7
 8013fe6:	3b68      	subs	r3, #104	; 0x68
 8013fe8:	3304      	adds	r3, #4
 8013fea:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8013fee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013ff2:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8013ff6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013ffa:	3301      	adds	r3, #1
 8013ffc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 8014000:	2300      	movs	r3, #0
 8014002:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 8014006:	2300      	movs	r3, #0
 8014008:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 801400c:	2300      	movs	r3, #0
 801400e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 8014012:	2300      	movs	r3, #0
 8014014:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 8014018:	2300      	movs	r3, #0
 801401a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 801401e:	4b0d      	ldr	r3, [pc, #52]	; (8014054 <lfs_dir_traverse+0x2dc>)
 8014020:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 8014024:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014028:	1e5a      	subs	r2, r3, #1
 801402a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801402e:	4613      	mov	r3, r2
 8014030:	011b      	lsls	r3, r3, #4
 8014032:	1a9b      	subs	r3, r3, r2
 8014034:	009b      	lsls	r3, r3, #2
 8014036:	3328      	adds	r3, #40	; 0x28
 8014038:	440b      	add	r3, r1
 801403a:	3304      	adds	r3, #4
 801403c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                continue;
 8014040:	e19e      	b.n	8014380 <lfs_dir_traverse+0x608>
 8014042:	bf00      	nop
 8014044:	7ff00000 	.word	0x7ff00000
 8014048:	08021a8c 	.word	0x08021a8c
 801404c:	08022be0 	.word	0x08022be0
 8014050:	08021974 	.word	0x08021974
 8014054:	08013cc1 	.word	0x08013cc1
            }
        }

popped:
 8014058:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 801405a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 801405e:	f7ff f94f 	bl	8013300 <lfs_tag_id>
 8014062:	4603      	mov	r3, r0
 8014064:	2b00      	cmp	r3, #0
 8014066:	d015      	beq.n	8014094 <lfs_dir_traverse+0x31c>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8014068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801406a:	4618      	mov	r0, r3
 801406c:	f7ff f948 	bl	8013300 <lfs_tag_id>
 8014070:	4603      	mov	r3, r0
 8014072:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8014074:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8014078:	4293      	cmp	r3, r2
 801407a:	f200 817c 	bhi.w	8014376 <lfs_dir_traverse+0x5fe>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 801407e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014080:	4618      	mov	r0, r3
 8014082:	f7ff f93d 	bl	8013300 <lfs_tag_id>
 8014086:	4603      	mov	r3, r0
 8014088:	461a      	mov	r2, r3
 801408a:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 801408e:	4293      	cmp	r3, r2
 8014090:	f240 8171 	bls.w	8014376 <lfs_dir_traverse+0x5fe>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8014094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014096:	4618      	mov	r0, r3
 8014098:	f7ff f908 	bl	80132ac <lfs_tag_type3>
 801409c:	4603      	mov	r3, r0
 801409e:	2b00      	cmp	r3, #0
 80140a0:	f43f ae74 	beq.w	8013d8c <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 80140a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80140a6:	4618      	mov	r0, r3
 80140a8:	f7ff f900 	bl	80132ac <lfs_tag_type3>
 80140ac:	4603      	mov	r3, r0
 80140ae:	461a      	mov	r2, r3
 80140b0:	f240 1301 	movw	r3, #257	; 0x101
 80140b4:	429a      	cmp	r2, r3
 80140b6:	f040 80e0 	bne.w	801427a <lfs_dir_traverse+0x502>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 80140ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80140be:	4ab1      	ldr	r2, [pc, #708]	; (8014384 <lfs_dir_traverse+0x60c>)
 80140c0:	4293      	cmp	r3, r2
 80140c2:	f000 815a 	beq.w	801437a <lfs_dir_traverse+0x602>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 80140c6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80140ca:	4613      	mov	r3, r2
 80140cc:	011b      	lsls	r3, r3, #4
 80140ce:	1a9b      	subs	r3, r3, r2
 80140d0:	009b      	lsls	r3, r3, #2
 80140d2:	33f0      	adds	r3, #240	; 0xf0
 80140d4:	443b      	add	r3, r7
 80140d6:	3b98      	subs	r3, #152	; 0x98
 80140d8:	4618      	mov	r0, r3
 80140da:	233c      	movs	r3, #60	; 0x3c
 80140dc:	461a      	mov	r2, r3
 80140de:	2100      	movs	r1, #0
 80140e0:	f007 ff12 	bl	801bf08 <memset>
 80140e4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80140e8:	4613      	mov	r3, r2
 80140ea:	011b      	lsls	r3, r3, #4
 80140ec:	1a9b      	subs	r3, r3, r2
 80140ee:	009b      	lsls	r3, r3, #2
 80140f0:	33f0      	adds	r3, #240	; 0xf0
 80140f2:	443b      	add	r3, r7
 80140f4:	3b98      	subs	r3, #152	; 0x98
 80140f6:	68ba      	ldr	r2, [r7, #8]
 80140f8:	601a      	str	r2, [r3, #0]
 80140fa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80140fe:	4613      	mov	r3, r2
 8014100:	011b      	lsls	r3, r3, #4
 8014102:	1a9b      	subs	r3, r3, r2
 8014104:	009b      	lsls	r3, r3, #2
 8014106:	33f0      	adds	r3, #240	; 0xf0
 8014108:	443b      	add	r3, r7
 801410a:	3b94      	subs	r3, #148	; 0x94
 801410c:	687a      	ldr	r2, [r7, #4]
 801410e:	601a      	str	r2, [r3, #0]
 8014110:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8014114:	4613      	mov	r3, r2
 8014116:	011b      	lsls	r3, r3, #4
 8014118:	1a9b      	subs	r3, r3, r2
 801411a:	009b      	lsls	r3, r3, #2
 801411c:	33f0      	adds	r3, #240	; 0xf0
 801411e:	443b      	add	r3, r7
 8014120:	3b90      	subs	r3, #144	; 0x90
 8014122:	683a      	ldr	r2, [r7, #0]
 8014124:	601a      	str	r2, [r3, #0]
 8014126:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801412a:	4613      	mov	r3, r2
 801412c:	011b      	lsls	r3, r3, #4
 801412e:	1a9b      	subs	r3, r3, r2
 8014130:	009b      	lsls	r3, r3, #2
 8014132:	33f0      	adds	r3, #240	; 0xf0
 8014134:	443b      	add	r3, r7
 8014136:	3b8c      	subs	r3, #140	; 0x8c
 8014138:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801413c:	601a      	str	r2, [r3, #0]
 801413e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8014142:	4613      	mov	r3, r2
 8014144:	011b      	lsls	r3, r3, #4
 8014146:	1a9b      	subs	r3, r3, r2
 8014148:	009b      	lsls	r3, r3, #2
 801414a:	33f0      	adds	r3, #240	; 0xf0
 801414c:	443b      	add	r3, r7
 801414e:	3b88      	subs	r3, #136	; 0x88
 8014150:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8014154:	601a      	str	r2, [r3, #0]
 8014156:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801415a:	4613      	mov	r3, r2
 801415c:	011b      	lsls	r3, r3, #4
 801415e:	1a9b      	subs	r3, r3, r2
 8014160:	009b      	lsls	r3, r3, #2
 8014162:	33f0      	adds	r3, #240	; 0xf0
 8014164:	443b      	add	r3, r7
 8014166:	3b84      	subs	r3, #132	; 0x84
 8014168:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801416c:	601a      	str	r2, [r3, #0]
 801416e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8014172:	4613      	mov	r3, r2
 8014174:	011b      	lsls	r3, r3, #4
 8014176:	1a9b      	subs	r3, r3, r2
 8014178:	009b      	lsls	r3, r3, #2
 801417a:	33f0      	adds	r3, #240	; 0xf0
 801417c:	443b      	add	r3, r7
 801417e:	3b80      	subs	r3, #128	; 0x80
 8014180:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8014184:	601a      	str	r2, [r3, #0]
 8014186:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801418a:	4613      	mov	r3, r2
 801418c:	011b      	lsls	r3, r3, #4
 801418e:	1a9b      	subs	r3, r3, r2
 8014190:	009b      	lsls	r3, r3, #2
 8014192:	33f0      	adds	r3, #240	; 0xf0
 8014194:	443b      	add	r3, r7
 8014196:	3b7c      	subs	r3, #124	; 0x7c
 8014198:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 801419c:	801a      	strh	r2, [r3, #0]
 801419e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80141a2:	4613      	mov	r3, r2
 80141a4:	011b      	lsls	r3, r3, #4
 80141a6:	1a9b      	subs	r3, r3, r2
 80141a8:	009b      	lsls	r3, r3, #2
 80141aa:	33f0      	adds	r3, #240	; 0xf0
 80141ac:	443b      	add	r3, r7
 80141ae:	3b7a      	subs	r3, #122	; 0x7a
 80141b0:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 80141b4:	801a      	strh	r2, [r3, #0]
 80141b6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80141ba:	4613      	mov	r3, r2
 80141bc:	011b      	lsls	r3, r3, #4
 80141be:	1a9b      	subs	r3, r3, r2
 80141c0:	009b      	lsls	r3, r3, #2
 80141c2:	33f0      	adds	r3, #240	; 0xf0
 80141c4:	443b      	add	r3, r7
 80141c6:	3b78      	subs	r3, #120	; 0x78
 80141c8:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 80141cc:	801a      	strh	r2, [r3, #0]
 80141ce:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80141d2:	4613      	mov	r3, r2
 80141d4:	011b      	lsls	r3, r3, #4
 80141d6:	1a9b      	subs	r3, r3, r2
 80141d8:	009b      	lsls	r3, r3, #2
 80141da:	33f0      	adds	r3, #240	; 0xf0
 80141dc:	443b      	add	r3, r7
 80141de:	3b74      	subs	r3, #116	; 0x74
 80141e0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80141e4:	601a      	str	r2, [r3, #0]
 80141e6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80141ea:	4613      	mov	r3, r2
 80141ec:	011b      	lsls	r3, r3, #4
 80141ee:	1a9b      	subs	r3, r3, r2
 80141f0:	009b      	lsls	r3, r3, #2
 80141f2:	33f0      	adds	r3, #240	; 0xf0
 80141f4:	443b      	add	r3, r7
 80141f6:	3b70      	subs	r3, #112	; 0x70
 80141f8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80141fc:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 80141fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014202:	3301      	adds	r3, #1
 8014204:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8014208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801420a:	4618      	mov	r0, r3
 801420c:	f7ff f888 	bl	8013320 <lfs_tag_size>
 8014210:	4603      	mov	r3, r0
 8014212:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8014216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014218:	4618      	mov	r0, r3
 801421a:	f7ff f871 	bl	8013300 <lfs_tag_id>
 801421e:	4603      	mov	r3, r0
 8014220:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 8014224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014228:	60bb      	str	r3, [r7, #8]
            off = 0;
 801422a:	2300      	movs	r3, #0
 801422c:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 801422e:	f04f 33ff 	mov.w	r3, #4294967295
 8014232:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8014234:	2300      	movs	r3, #0
 8014236:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 801423a:	2300      	movs	r3, #0
 801423c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8014240:	4b51      	ldr	r3, [pc, #324]	; (8014388 <lfs_dir_traverse+0x610>)
 8014242:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8014246:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 801424a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 801424e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8014252:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 8014256:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 801425a:	3301      	adds	r3, #1
 801425c:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 8014260:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8014264:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8014268:	1ad3      	subs	r3, r2, r3
 801426a:	b29a      	uxth	r2, r3
 801426c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8014270:	4413      	add	r3, r2
 8014272:	b29b      	uxth	r3, r3
 8014274:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8014278:	e588      	b.n	8013d8c <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 801427a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801427c:	4618      	mov	r0, r3
 801427e:	f7ff f815 	bl	80132ac <lfs_tag_type3>
 8014282:	4603      	mov	r3, r0
 8014284:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8014288:	d159      	bne.n	801433e <lfs_dir_traverse+0x5c6>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801428a:	2300      	movs	r3, #0
 801428c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8014290:	e04b      	b.n	801432a <lfs_dir_traverse+0x5b2>
                const struct lfs_attr *a = buffer;
 8014292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014296:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801429a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801429e:	4613      	mov	r3, r2
 80142a0:	005b      	lsls	r3, r3, #1
 80142a2:	4413      	add	r3, r2
 80142a4:	009b      	lsls	r3, r3, #2
 80142a6:	461a      	mov	r2, r3
 80142a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80142ac:	4413      	add	r3, r2
 80142ae:	781b      	ldrb	r3, [r3, #0]
 80142b0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80142b4:	051c      	lsls	r4, r3, #20
 80142b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80142b8:	4618      	mov	r0, r3
 80142ba:	f7ff f821 	bl	8013300 <lfs_tag_id>
 80142be:	4603      	mov	r3, r0
 80142c0:	461a      	mov	r2, r3
 80142c2:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 80142c6:	4413      	add	r3, r2
 80142c8:	029b      	lsls	r3, r3, #10
 80142ca:	ea44 0103 	orr.w	r1, r4, r3
 80142ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80142d2:	4613      	mov	r3, r2
 80142d4:	005b      	lsls	r3, r3, #1
 80142d6:	4413      	add	r3, r2
 80142d8:	009b      	lsls	r3, r3, #2
 80142da:	461a      	mov	r2, r3
 80142dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80142e0:	4413      	add	r3, r2
 80142e2:	689b      	ldr	r3, [r3, #8]
 80142e4:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 80142e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80142ea:	4613      	mov	r3, r2
 80142ec:	005b      	lsls	r3, r3, #1
 80142ee:	4413      	add	r3, r2
 80142f0:	009b      	lsls	r3, r3, #2
 80142f2:	461a      	mov	r2, r3
 80142f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80142f8:	4413      	add	r3, r2
 80142fa:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80142fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8014300:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8014304:	4798      	blx	r3
 8014306:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 801430a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801430e:	2b00      	cmp	r3, #0
 8014310:	da02      	bge.n	8014318 <lfs_dir_traverse+0x5a0>
                    return res;
 8014312:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014316:	e10b      	b.n	8014530 <lfs_dir_traverse+0x7b8>
                }

                if (res) {
 8014318:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801431c:	2b00      	cmp	r3, #0
 801431e:	d12e      	bne.n	801437e <lfs_dir_traverse+0x606>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8014320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014324:	3301      	adds	r3, #1
 8014326:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801432a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801432c:	4618      	mov	r0, r3
 801432e:	f7fe fff7 	bl	8013320 <lfs_tag_size>
 8014332:	4602      	mov	r2, r0
 8014334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014338:	4293      	cmp	r3, r2
 801433a:	d3aa      	bcc.n	8014292 <lfs_dir_traverse+0x51a>
 801433c:	e526      	b.n	8013d8c <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 801433e:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8014342:	029a      	lsls	r2, r3, #10
 8014344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014346:	18d1      	adds	r1, r2, r3
 8014348:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801434c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8014350:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8014354:	4798      	blx	r3
 8014356:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 801435a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801435e:	2b00      	cmp	r3, #0
 8014360:	da02      	bge.n	8014368 <lfs_dir_traverse+0x5f0>
                return res;
 8014362:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014366:	e0e3      	b.n	8014530 <lfs_dir_traverse+0x7b8>
            }

            if (res) {
 8014368:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801436c:	2b00      	cmp	r3, #0
 801436e:	d10d      	bne.n	801438c <lfs_dir_traverse+0x614>
 8014370:	e50c      	b.n	8013d8c <lfs_dir_traverse+0x14>
                continue;
 8014372:	bf00      	nop
 8014374:	e50a      	b.n	8013d8c <lfs_dir_traverse+0x14>
            continue;
 8014376:	bf00      	nop
 8014378:	e508      	b.n	8013d8c <lfs_dir_traverse+0x14>
                continue;
 801437a:	bf00      	nop
 801437c:	e506      	b.n	8013d8c <lfs_dir_traverse+0x14>
                    break;
 801437e:	bf00      	nop
        {
 8014380:	e504      	b.n	8013d8c <lfs_dir_traverse+0x14>
 8014382:	bf00      	nop
 8014384:	08013cc1 	.word	0x08013cc1
 8014388:	600ffc00 	.word	0x600ffc00
                break;
 801438c:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 801438e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014392:	2b00      	cmp	r3, #0
 8014394:	f000 80ca 	beq.w	801452c <lfs_dir_traverse+0x7b4>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8014398:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801439c:	1e5a      	subs	r2, r3, #1
 801439e:	4613      	mov	r3, r2
 80143a0:	011b      	lsls	r3, r3, #4
 80143a2:	1a9b      	subs	r3, r3, r2
 80143a4:	009b      	lsls	r3, r3, #2
 80143a6:	33f0      	adds	r3, #240	; 0xf0
 80143a8:	443b      	add	r3, r7
 80143aa:	3b98      	subs	r3, #152	; 0x98
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 80143b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80143b4:	1e5a      	subs	r2, r3, #1
 80143b6:	4613      	mov	r3, r2
 80143b8:	011b      	lsls	r3, r3, #4
 80143ba:	1a9b      	subs	r3, r3, r2
 80143bc:	009b      	lsls	r3, r3, #2
 80143be:	33f0      	adds	r3, #240	; 0xf0
 80143c0:	443b      	add	r3, r7
 80143c2:	3b94      	subs	r3, #148	; 0x94
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 80143c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80143cc:	1e5a      	subs	r2, r3, #1
 80143ce:	4613      	mov	r3, r2
 80143d0:	011b      	lsls	r3, r3, #4
 80143d2:	1a9b      	subs	r3, r3, r2
 80143d4:	009b      	lsls	r3, r3, #2
 80143d6:	33f0      	adds	r3, #240	; 0xf0
 80143d8:	443b      	add	r3, r7
 80143da:	3b90      	subs	r3, #144	; 0x90
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 80143e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80143e4:	1e5a      	subs	r2, r3, #1
 80143e6:	4613      	mov	r3, r2
 80143e8:	011b      	lsls	r3, r3, #4
 80143ea:	1a9b      	subs	r3, r3, r2
 80143ec:	009b      	lsls	r3, r3, #2
 80143ee:	33f0      	adds	r3, #240	; 0xf0
 80143f0:	443b      	add	r3, r7
 80143f2:	3b8c      	subs	r3, #140	; 0x8c
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 80143fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80143fe:	1e5a      	subs	r2, r3, #1
 8014400:	4613      	mov	r3, r2
 8014402:	011b      	lsls	r3, r3, #4
 8014404:	1a9b      	subs	r3, r3, r2
 8014406:	009b      	lsls	r3, r3, #2
 8014408:	33f0      	adds	r3, #240	; 0xf0
 801440a:	443b      	add	r3, r7
 801440c:	3b88      	subs	r3, #136	; 0x88
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 8014414:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014418:	1e5a      	subs	r2, r3, #1
 801441a:	4613      	mov	r3, r2
 801441c:	011b      	lsls	r3, r3, #4
 801441e:	1a9b      	subs	r3, r3, r2
 8014420:	009b      	lsls	r3, r3, #2
 8014422:	33f0      	adds	r3, #240	; 0xf0
 8014424:	443b      	add	r3, r7
 8014426:	3b84      	subs	r3, #132	; 0x84
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 801442e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014432:	1e5a      	subs	r2, r3, #1
 8014434:	4613      	mov	r3, r2
 8014436:	011b      	lsls	r3, r3, #4
 8014438:	1a9b      	subs	r3, r3, r2
 801443a:	009b      	lsls	r3, r3, #2
 801443c:	33f0      	adds	r3, #240	; 0xf0
 801443e:	443b      	add	r3, r7
 8014440:	3b80      	subs	r3, #128	; 0x80
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 8014448:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801444c:	1e5a      	subs	r2, r3, #1
 801444e:	4613      	mov	r3, r2
 8014450:	011b      	lsls	r3, r3, #4
 8014452:	1a9b      	subs	r3, r3, r2
 8014454:	009b      	lsls	r3, r3, #2
 8014456:	33f0      	adds	r3, #240	; 0xf0
 8014458:	443b      	add	r3, r7
 801445a:	3b7c      	subs	r3, #124	; 0x7c
 801445c:	881b      	ldrh	r3, [r3, #0]
 801445e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 8014462:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014466:	1e5a      	subs	r2, r3, #1
 8014468:	4613      	mov	r3, r2
 801446a:	011b      	lsls	r3, r3, #4
 801446c:	1a9b      	subs	r3, r3, r2
 801446e:	009b      	lsls	r3, r3, #2
 8014470:	33f0      	adds	r3, #240	; 0xf0
 8014472:	443b      	add	r3, r7
 8014474:	3b7a      	subs	r3, #122	; 0x7a
 8014476:	881b      	ldrh	r3, [r3, #0]
 8014478:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 801447c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014480:	1e5a      	subs	r2, r3, #1
 8014482:	4613      	mov	r3, r2
 8014484:	011b      	lsls	r3, r3, #4
 8014486:	1a9b      	subs	r3, r3, r2
 8014488:	009b      	lsls	r3, r3, #2
 801448a:	33f0      	adds	r3, #240	; 0xf0
 801448c:	443b      	add	r3, r7
 801448e:	3b78      	subs	r3, #120	; 0x78
 8014490:	881b      	ldrh	r3, [r3, #0]
 8014492:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 8014496:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801449a:	1e5a      	subs	r2, r3, #1
 801449c:	4613      	mov	r3, r2
 801449e:	011b      	lsls	r3, r3, #4
 80144a0:	1a9b      	subs	r3, r3, r2
 80144a2:	009b      	lsls	r3, r3, #2
 80144a4:	33f0      	adds	r3, #240	; 0xf0
 80144a6:	443b      	add	r3, r7
 80144a8:	3b74      	subs	r3, #116	; 0x74
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 80144b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80144b4:	1e5a      	subs	r2, r3, #1
 80144b6:	4613      	mov	r3, r2
 80144b8:	011b      	lsls	r3, r3, #4
 80144ba:	1a9b      	subs	r3, r3, r2
 80144bc:	009b      	lsls	r3, r3, #2
 80144be:	33f0      	adds	r3, #240	; 0xf0
 80144c0:	443b      	add	r3, r7
 80144c2:	3b70      	subs	r3, #112	; 0x70
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 80144ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80144ce:	1e5a      	subs	r2, r3, #1
 80144d0:	4613      	mov	r3, r2
 80144d2:	011b      	lsls	r3, r3, #4
 80144d4:	1a9b      	subs	r3, r3, r2
 80144d6:	009b      	lsls	r3, r3, #2
 80144d8:	33f0      	adds	r3, #240	; 0xf0
 80144da:	443b      	add	r3, r7
 80144dc:	3b6c      	subs	r3, #108	; 0x6c
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 80144e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80144e6:	1e5a      	subs	r2, r3, #1
 80144e8:	4613      	mov	r3, r2
 80144ea:	011b      	lsls	r3, r3, #4
 80144ec:	1a9b      	subs	r3, r3, r2
 80144ee:	009b      	lsls	r3, r3, #2
 80144f0:	33f0      	adds	r3, #240	; 0xf0
 80144f2:	443b      	add	r3, r7
 80144f4:	3b68      	subs	r3, #104	; 0x68
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 80144fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014500:	1e5a      	subs	r2, r3, #1
 8014502:	4613      	mov	r3, r2
 8014504:	011b      	lsls	r3, r3, #4
 8014506:	1a9b      	subs	r3, r3, r2
 8014508:	009b      	lsls	r3, r3, #2
 801450a:	33f0      	adds	r3, #240	; 0xf0
 801450c:	443b      	add	r3, r7
 801450e:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 8014512:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014516:	3204      	adds	r2, #4
 8014518:	e892 0003 	ldmia.w	r2, {r0, r1}
 801451c:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 8014520:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014524:	3b01      	subs	r3, #1
 8014526:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 801452a:	e596      	b.n	801405a <lfs_dir_traverse+0x2e2>
    } else {
        return res;
 801452c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 8014530:	4618      	mov	r0, r3
 8014532:	37f4      	adds	r7, #244	; 0xf4
 8014534:	46bd      	mov	sp, r7
 8014536:	bd90      	pop	{r4, r7, pc}

08014538 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8014538:	b590      	push	{r4, r7, lr}
 801453a:	b09f      	sub	sp, #124	; 0x7c
 801453c:	af04      	add	r7, sp, #16
 801453e:	60f8      	str	r0, [r7, #12]
 8014540:	60b9      	str	r1, [r7, #8]
 8014542:	607a      	str	r2, [r7, #4]
 8014544:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8014546:	f04f 33ff 	mov.w	r3, #4294967295
 801454a:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	681a      	ldr	r2, [r3, #0]
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014554:	6a1b      	ldr	r3, [r3, #32]
 8014556:	429a      	cmp	r2, r3
 8014558:	d207      	bcs.n	801456a <lfs_dir_fetchmatch+0x32>
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	3304      	adds	r3, #4
 801455e:	681a      	ldr	r2, [r3, #0]
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014564:	6a1b      	ldr	r3, [r3, #32]
 8014566:	429a      	cmp	r2, r3
 8014568:	d302      	bcc.n	8014570 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 801456a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 801456e:	e342      	b.n	8014bf6 <lfs_dir_fetchmatch+0x6be>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8014570:	2300      	movs	r3, #0
 8014572:	633b      	str	r3, [r7, #48]	; 0x30
 8014574:	2300      	movs	r3, #0
 8014576:	637b      	str	r3, [r7, #52]	; 0x34
    int r = 0;
 8014578:	2300      	movs	r3, #0
 801457a:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 801457c:	2300      	movs	r3, #0
 801457e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014580:	e052      	b.n	8014628 <lfs_dir_fetchmatch+0xf0>
        int err = lfs_bd_read(lfs,
 8014582:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8014584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014586:	009b      	lsls	r3, r3, #2
 8014588:	687a      	ldr	r2, [r7, #4]
 801458a:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 801458c:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 801458e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8014592:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014594:	0092      	lsls	r2, r2, #2
 8014596:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8014598:	2104      	movs	r1, #4
 801459a:	9103      	str	r1, [sp, #12]
 801459c:	9202      	str	r2, [sp, #8]
 801459e:	2200      	movs	r2, #0
 80145a0:	9201      	str	r2, [sp, #4]
 80145a2:	9300      	str	r3, [sp, #0]
 80145a4:	2304      	movs	r3, #4
 80145a6:	4602      	mov	r2, r0
 80145a8:	2100      	movs	r1, #0
 80145aa:	68f8      	ldr	r0, [r7, #12]
 80145ac:	f7fe fa6e 	bl	8012a8c <lfs_bd_read>
 80145b0:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 80145b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80145b4:	009b      	lsls	r3, r3, #2
 80145b6:	3368      	adds	r3, #104	; 0x68
 80145b8:	443b      	add	r3, r7
 80145ba:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80145be:	4618      	mov	r0, r3
 80145c0:	f7fe f9f8 	bl	80129b4 <lfs_fromle32>
 80145c4:	4602      	mov	r2, r0
 80145c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80145c8:	009b      	lsls	r3, r3, #2
 80145ca:	3368      	adds	r3, #104	; 0x68
 80145cc:	443b      	add	r3, r7
 80145ce:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 80145d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d005      	beq.n	80145e4 <lfs_dir_fetchmatch+0xac>
 80145d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145da:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80145de:	d001      	beq.n	80145e4 <lfs_dir_fetchmatch+0xac>
            return err;
 80145e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145e2:	e308      	b.n	8014bf6 <lfs_dir_fetchmatch+0x6be>
        }

        if (err != LFS_ERR_CORRUPT &&
 80145e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145e6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80145ea:	d01a      	beq.n	8014622 <lfs_dir_fetchmatch+0xea>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 80145ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80145ee:	009b      	lsls	r3, r3, #2
 80145f0:	3368      	adds	r3, #104	; 0x68
 80145f2:	443b      	add	r3, r7
 80145f4:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80145f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80145fa:	3301      	adds	r3, #1
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	f003 0301 	and.w	r3, r3, #1
 8014602:	bfb8      	it	lt
 8014604:	425b      	neglt	r3, r3
 8014606:	009b      	lsls	r3, r3, #2
 8014608:	3368      	adds	r3, #104	; 0x68
 801460a:	443b      	add	r3, r7
 801460c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8014610:	4619      	mov	r1, r3
 8014612:	4610      	mov	r0, r2
 8014614:	f7fe f9c0 	bl	8012998 <lfs_scmp>
 8014618:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 801461a:	2b00      	cmp	r3, #0
 801461c:	dd01      	ble.n	8014622 <lfs_dir_fetchmatch+0xea>
            r = i;
 801461e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014620:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 8014622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014624:	3301      	adds	r3, #1
 8014626:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801462a:	2b01      	cmp	r3, #1
 801462c:	dda9      	ble.n	8014582 <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 801462e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014630:	2b00      	cmp	r3, #0
 8014632:	f003 0301 	and.w	r3, r3, #1
 8014636:	bfb8      	it	lt
 8014638:	425b      	neglt	r3, r3
 801463a:	009b      	lsls	r3, r3, #2
 801463c:	687a      	ldr	r2, [r7, #4]
 801463e:	4413      	add	r3, r2
 8014640:	681a      	ldr	r2, [r3, #0]
 8014642:	68bb      	ldr	r3, [r7, #8]
 8014644:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 8014646:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014648:	3301      	adds	r3, #1
 801464a:	2b00      	cmp	r3, #0
 801464c:	f003 0301 	and.w	r3, r3, #1
 8014650:	bfb8      	it	lt
 8014652:	425b      	neglt	r3, r3
 8014654:	009b      	lsls	r3, r3, #2
 8014656:	687a      	ldr	r2, [r7, #4]
 8014658:	4413      	add	r3, r2
 801465a:	681a      	ldr	r2, [r3, #0]
 801465c:	68bb      	ldr	r3, [r7, #8]
 801465e:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8014660:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014662:	2b00      	cmp	r3, #0
 8014664:	f003 0301 	and.w	r3, r3, #1
 8014668:	bfb8      	it	lt
 801466a:	425b      	neglt	r3, r3
 801466c:	009b      	lsls	r3, r3, #2
 801466e:	3368      	adds	r3, #104	; 0x68
 8014670:	443b      	add	r3, r7
 8014672:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8014676:	68bb      	ldr	r3, [r7, #8]
 8014678:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 801467a:	68bb      	ldr	r3, [r7, #8]
 801467c:	2200      	movs	r2, #0
 801467e:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8014680:	2300      	movs	r3, #0
 8014682:	65bb      	str	r3, [r7, #88]	; 0x58
 8014684:	e2a3      	b.n	8014bce <lfs_dir_fetchmatch+0x696>
        lfs_off_t off = 0;
 8014686:	2300      	movs	r3, #0
 8014688:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 801468a:	f04f 33ff 	mov.w	r3, #4294967295
 801468e:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 8014690:	2300      	movs	r3, #0
 8014692:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8014696:	4a96      	ldr	r2, [pc, #600]	; (80148f0 <lfs_dir_fetchmatch+0x3b8>)
 8014698:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801469c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80146a0:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 80146a4:	2300      	movs	r3, #0
 80146a6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 80146aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80146ac:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 80146ae:	68bb      	ldr	r3, [r7, #8]
 80146b0:	689b      	ldr	r3, [r3, #8]
 80146b2:	4618      	mov	r0, r3
 80146b4:	f7fe f989 	bl	80129ca <lfs_tole32>
 80146b8:	4602      	mov	r2, r0
 80146ba:	68bb      	ldr	r3, [r7, #8]
 80146bc:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 80146be:	68bb      	ldr	r3, [r7, #8]
 80146c0:	3308      	adds	r3, #8
 80146c2:	2204      	movs	r2, #4
 80146c4:	4619      	mov	r1, r3
 80146c6:	f04f 30ff 	mov.w	r0, #4294967295
 80146ca:	f004 ff05 	bl	80194d8 <lfs_crc>
 80146ce:	4603      	mov	r3, r0
 80146d0:	627b      	str	r3, [r7, #36]	; 0x24
        dir->rev = lfs_fromle32(dir->rev);
 80146d2:	68bb      	ldr	r3, [r7, #8]
 80146d4:	689b      	ldr	r3, [r3, #8]
 80146d6:	4618      	mov	r0, r3
 80146d8:	f7fe f96c 	bl	80129b4 <lfs_fromle32>
 80146dc:	4602      	mov	r2, r0
 80146de:	68bb      	ldr	r3, [r7, #8]
 80146e0:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 80146e2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80146e4:	f7fe fe29 	bl	801333a <lfs_tag_dsize>
 80146e8:	4602      	mov	r2, r0
 80146ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80146ec:	4413      	add	r3, r2
 80146ee:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 80146f0:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80146f6:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 80146f8:	68bb      	ldr	r3, [r7, #8]
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	2204      	movs	r2, #4
 80146fe:	9203      	str	r2, [sp, #12]
 8014700:	f107 0220 	add.w	r2, r7, #32
 8014704:	9202      	str	r2, [sp, #8]
 8014706:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014708:	9201      	str	r2, [sp, #4]
 801470a:	9300      	str	r3, [sp, #0]
 801470c:	4603      	mov	r3, r0
 801470e:	460a      	mov	r2, r1
 8014710:	2100      	movs	r1, #0
 8014712:	68f8      	ldr	r0, [r7, #12]
 8014714:	f7fe f9ba 	bl	8012a8c <lfs_bd_read>
 8014718:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 801471a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801471c:	2b00      	cmp	r3, #0
 801471e:	d009      	beq.n	8014734 <lfs_dir_fetchmatch+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 8014720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014722:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8014726:	d103      	bne.n	8014730 <lfs_dir_fetchmatch+0x1f8>
                    // can't continue?
                    dir->erased = false;
 8014728:	68bb      	ldr	r3, [r7, #8]
 801472a:	2200      	movs	r2, #0
 801472c:	759a      	strb	r2, [r3, #22]
                    break;
 801472e:	e1d6      	b.n	8014ade <lfs_dir_fetchmatch+0x5a6>
                }
                return err;
 8014730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014732:	e260      	b.n	8014bf6 <lfs_dir_fetchmatch+0x6be>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8014734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014736:	f107 0120 	add.w	r1, r7, #32
 801473a:	2204      	movs	r2, #4
 801473c:	4618      	mov	r0, r3
 801473e:	f004 fecb 	bl	80194d8 <lfs_crc>
 8014742:	4603      	mov	r3, r0
 8014744:	627b      	str	r3, [r7, #36]	; 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 8014746:	6a3b      	ldr	r3, [r7, #32]
 8014748:	4618      	mov	r0, r3
 801474a:	f7fe f94a 	bl	80129e2 <lfs_frombe32>
 801474e:	4602      	mov	r2, r0
 8014750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014752:	4053      	eors	r3, r2
 8014754:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 8014756:	6a3b      	ldr	r3, [r7, #32]
 8014758:	4618      	mov	r0, r3
 801475a:	f7fe fd76 	bl	801324a <lfs_tag_isvalid>
 801475e:	4603      	mov	r3, r0
 8014760:	f083 0301 	eor.w	r3, r3, #1
 8014764:	b2db      	uxtb	r3, r3
 8014766:	2b00      	cmp	r3, #0
 8014768:	d01b      	beq.n	80147a2 <lfs_dir_fetchmatch+0x26a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 801476a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801476c:	f7fe fd8e 	bl	801328c <lfs_tag_type1>
 8014770:	4603      	mov	r3, r0
 8014772:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8014776:	d10d      	bne.n	8014794 <lfs_dir_fetchmatch+0x25c>
                        dir->off % lfs->cfg->prog_size == 0);
 8014778:	68bb      	ldr	r3, [r7, #8]
 801477a:	68db      	ldr	r3, [r3, #12]
 801477c:	68fa      	ldr	r2, [r7, #12]
 801477e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8014780:	6992      	ldr	r2, [r2, #24]
 8014782:	fbb3 f1f2 	udiv	r1, r3, r2
 8014786:	fb01 f202 	mul.w	r2, r1, r2
 801478a:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 801478c:	2b00      	cmp	r3, #0
 801478e:	d101      	bne.n	8014794 <lfs_dir_fetchmatch+0x25c>
 8014790:	2301      	movs	r3, #1
 8014792:	e000      	b.n	8014796 <lfs_dir_fetchmatch+0x25e>
 8014794:	2300      	movs	r3, #0
 8014796:	f003 0301 	and.w	r3, r3, #1
 801479a:	b2da      	uxtb	r2, r3
 801479c:	68bb      	ldr	r3, [r7, #8]
 801479e:	759a      	strb	r2, [r3, #22]
                break;
 80147a0:	e19d      	b.n	8014ade <lfs_dir_fetchmatch+0x5a6>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 80147a2:	6a3b      	ldr	r3, [r7, #32]
 80147a4:	4618      	mov	r0, r3
 80147a6:	f7fe fdc8 	bl	801333a <lfs_tag_dsize>
 80147aa:	4602      	mov	r2, r0
 80147ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80147ae:	441a      	add	r2, r3
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80147b4:	69db      	ldr	r3, [r3, #28]
 80147b6:	429a      	cmp	r2, r3
 80147b8:	d903      	bls.n	80147c2 <lfs_dir_fetchmatch+0x28a>
                dir->erased = false;
 80147ba:	68bb      	ldr	r3, [r7, #8]
 80147bc:	2200      	movs	r2, #0
 80147be:	759a      	strb	r2, [r3, #22]
                break;
 80147c0:	e18d      	b.n	8014ade <lfs_dir_fetchmatch+0x5a6>
            }

            ptag = tag;
 80147c2:	6a3b      	ldr	r3, [r7, #32]
 80147c4:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 80147c6:	6a3b      	ldr	r3, [r7, #32]
 80147c8:	4618      	mov	r0, r3
 80147ca:	f7fe fd5f 	bl	801328c <lfs_tag_type1>
 80147ce:	4603      	mov	r3, r0
 80147d0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80147d4:	d164      	bne.n	80148a0 <lfs_dir_fetchmatch+0x368>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 80147d6:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80147dc:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 80147de:	68bb      	ldr	r3, [r7, #8]
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80147e4:	3204      	adds	r2, #4
 80147e6:	2104      	movs	r1, #4
 80147e8:	9103      	str	r1, [sp, #12]
 80147ea:	f107 011c 	add.w	r1, r7, #28
 80147ee:	9102      	str	r1, [sp, #8]
 80147f0:	9201      	str	r2, [sp, #4]
 80147f2:	9300      	str	r3, [sp, #0]
 80147f4:	4623      	mov	r3, r4
 80147f6:	4602      	mov	r2, r0
 80147f8:	2100      	movs	r1, #0
 80147fa:	68f8      	ldr	r0, [r7, #12]
 80147fc:	f7fe f946 	bl	8012a8c <lfs_bd_read>
 8014800:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 8014802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014804:	2b00      	cmp	r3, #0
 8014806:	d009      	beq.n	801481c <lfs_dir_fetchmatch+0x2e4>
                    if (err == LFS_ERR_CORRUPT) {
 8014808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801480a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 801480e:	d103      	bne.n	8014818 <lfs_dir_fetchmatch+0x2e0>
                        dir->erased = false;
 8014810:	68bb      	ldr	r3, [r7, #8]
 8014812:	2200      	movs	r2, #0
 8014814:	759a      	strb	r2, [r3, #22]
                        break;
 8014816:	e162      	b.n	8014ade <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 8014818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 801481a:	e1ec      	b.n	8014bf6 <lfs_dir_fetchmatch+0x6be>
                }
                dcrc = lfs_fromle32(dcrc);
 801481c:	69fb      	ldr	r3, [r7, #28]
 801481e:	4618      	mov	r0, r3
 8014820:	f7fe f8c8 	bl	80129b4 <lfs_fromle32>
 8014824:	4603      	mov	r3, r0
 8014826:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 8014828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801482a:	69fb      	ldr	r3, [r7, #28]
 801482c:	429a      	cmp	r2, r3
 801482e:	d003      	beq.n	8014838 <lfs_dir_fetchmatch+0x300>
                    dir->erased = false;
 8014830:	68bb      	ldr	r3, [r7, #8]
 8014832:	2200      	movs	r2, #0
 8014834:	759a      	strb	r2, [r3, #22]
                    break;
 8014836:	e152      	b.n	8014ade <lfs_dir_fetchmatch+0x5a6>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8014838:	6a3b      	ldr	r3, [r7, #32]
 801483a:	4618      	mov	r0, r3
 801483c:	f7fe fd46 	bl	80132cc <lfs_tag_chunk>
 8014840:	4603      	mov	r3, r0
 8014842:	07db      	lsls	r3, r3, #31
 8014844:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014846:	4053      	eors	r3, r2
 8014848:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801484e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8014852:	2204      	movs	r2, #4
 8014854:	4618      	mov	r0, r3
 8014856:	f004 fe3f 	bl	80194d8 <lfs_crc>
 801485a:	4602      	mov	r2, r0
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8014860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014862:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 8014864:	6a3b      	ldr	r3, [r7, #32]
 8014866:	4618      	mov	r0, r3
 8014868:	f7fe fd67 	bl	801333a <lfs_tag_dsize>
 801486c:	4602      	mov	r2, r0
 801486e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014870:	441a      	add	r2, r3
 8014872:	68bb      	ldr	r3, [r7, #8]
 8014874:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8014876:	68bb      	ldr	r3, [r7, #8]
 8014878:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801487a:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 801487c:	68bb      	ldr	r3, [r7, #8]
 801487e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014882:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8014884:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014886:	68bb      	ldr	r3, [r7, #8]
 8014888:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 801488a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801488c:	68bb      	ldr	r3, [r7, #8]
 801488e:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8014890:	68bb      	ldr	r3, [r7, #8]
 8014892:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8014896:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 8014898:	f04f 33ff 	mov.w	r3, #4294967295
 801489c:	627b      	str	r3, [r7, #36]	; 0x24
 801489e:	e720      	b.n	80146e2 <lfs_dir_fetchmatch+0x1aa>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 80148a0:	2304      	movs	r3, #4
 80148a2:	647b      	str	r3, [r7, #68]	; 0x44
 80148a4:	e032      	b.n	801490c <lfs_dir_fetchmatch+0x3d4>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 80148a6:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80148ac:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 80148ae:	68bb      	ldr	r3, [r7, #8]
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80148b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80148b6:	440a      	add	r2, r1
 80148b8:	2101      	movs	r1, #1
 80148ba:	9103      	str	r1, [sp, #12]
 80148bc:	f107 011b 	add.w	r1, r7, #27
 80148c0:	9102      	str	r1, [sp, #8]
 80148c2:	9201      	str	r2, [sp, #4]
 80148c4:	9300      	str	r3, [sp, #0]
 80148c6:	4623      	mov	r3, r4
 80148c8:	4602      	mov	r2, r0
 80148ca:	2100      	movs	r1, #0
 80148cc:	68f8      	ldr	r0, [r7, #12]
 80148ce:	f7fe f8dd 	bl	8012a8c <lfs_bd_read>
 80148d2:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 80148d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d00c      	beq.n	80148f4 <lfs_dir_fetchmatch+0x3bc>
                    if (err == LFS_ERR_CORRUPT) {
 80148da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80148dc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80148e0:	d103      	bne.n	80148ea <lfs_dir_fetchmatch+0x3b2>
                        dir->erased = false;
 80148e2:	68bb      	ldr	r3, [r7, #8]
 80148e4:	2200      	movs	r2, #0
 80148e6:	759a      	strb	r2, [r3, #22]
 80148e8:	e018      	b.n	801491c <lfs_dir_fetchmatch+0x3e4>
                        break;
                    }
                    return err;
 80148ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 80148ec:	e183      	b.n	8014bf6 <lfs_dir_fetchmatch+0x6be>
 80148ee:	bf00      	nop
 80148f0:	08021acc 	.word	0x08021acc
                }

                crc = lfs_crc(crc, &dat, 1);
 80148f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148f6:	f107 011b 	add.w	r1, r7, #27
 80148fa:	2201      	movs	r2, #1
 80148fc:	4618      	mov	r0, r3
 80148fe:	f004 fdeb 	bl	80194d8 <lfs_crc>
 8014902:	4603      	mov	r3, r0
 8014904:	627b      	str	r3, [r7, #36]	; 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8014906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014908:	3301      	adds	r3, #1
 801490a:	647b      	str	r3, [r7, #68]	; 0x44
 801490c:	6a3b      	ldr	r3, [r7, #32]
 801490e:	4618      	mov	r0, r3
 8014910:	f7fe fd13 	bl	801333a <lfs_tag_dsize>
 8014914:	4602      	mov	r2, r0
 8014916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014918:	4293      	cmp	r3, r2
 801491a:	d3c4      	bcc.n	80148a6 <lfs_dir_fetchmatch+0x36e>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801491c:	6a3b      	ldr	r3, [r7, #32]
 801491e:	4618      	mov	r0, r3
 8014920:	f7fe fcb4 	bl	801328c <lfs_tag_type1>
 8014924:	4603      	mov	r3, r0
 8014926:	2b00      	cmp	r3, #0
 8014928:	d113      	bne.n	8014952 <lfs_dir_fetchmatch+0x41a>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 801492a:	6a3b      	ldr	r3, [r7, #32]
 801492c:	4618      	mov	r0, r3
 801492e:	f7fe fce7 	bl	8013300 <lfs_tag_id>
 8014932:	4603      	mov	r3, r0
 8014934:	461a      	mov	r2, r3
 8014936:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801493a:	4293      	cmp	r3, r2
 801493c:	f200 8083 	bhi.w	8014a46 <lfs_dir_fetchmatch+0x50e>
                    tempcount = lfs_tag_id(tag) + 1;
 8014940:	6a3b      	ldr	r3, [r7, #32]
 8014942:	4618      	mov	r0, r3
 8014944:	f7fe fcdc 	bl	8013300 <lfs_tag_id>
 8014948:	4603      	mov	r3, r0
 801494a:	3301      	adds	r3, #1
 801494c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8014950:	e079      	b.n	8014a46 <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8014952:	6a3b      	ldr	r3, [r7, #32]
 8014954:	4618      	mov	r0, r3
 8014956:	f7fe fc99 	bl	801328c <lfs_tag_type1>
 801495a:	4603      	mov	r3, r0
 801495c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014960:	d134      	bne.n	80149cc <lfs_dir_fetchmatch+0x494>
                tempcount += lfs_tag_splice(tag);
 8014962:	6a3b      	ldr	r3, [r7, #32]
 8014964:	4618      	mov	r0, r3
 8014966:	f7fe fcbe 	bl	80132e6 <lfs_tag_splice>
 801496a:	4603      	mov	r3, r0
 801496c:	b29a      	uxth	r2, r3
 801496e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014972:	4413      	add	r3, r2
 8014974:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8014978:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801497a:	4ba1      	ldr	r3, [pc, #644]	; (8014c00 <lfs_dir_fetchmatch+0x6c8>)
 801497c:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801497e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8014982:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8014986:	6a3a      	ldr	r2, [r7, #32]
 8014988:	4293      	cmp	r3, r2
 801498a:	d104      	bne.n	8014996 <lfs_dir_fetchmatch+0x45e>
                    tempbesttag |= 0x80000000;
 801498c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801498e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014992:	64bb      	str	r3, [r7, #72]	; 0x48
 8014994:	e057      	b.n	8014a46 <lfs_dir_fetchmatch+0x50e>
                } else if (tempbesttag != -1 &&
 8014996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014998:	f1b3 3fff 	cmp.w	r3, #4294967295
 801499c:	d053      	beq.n	8014a46 <lfs_dir_fetchmatch+0x50e>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 801499e:	6a3b      	ldr	r3, [r7, #32]
 80149a0:	4618      	mov	r0, r3
 80149a2:	f7fe fcad 	bl	8013300 <lfs_tag_id>
 80149a6:	4603      	mov	r3, r0
 80149a8:	461c      	mov	r4, r3
 80149aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80149ac:	4618      	mov	r0, r3
 80149ae:	f7fe fca7 	bl	8013300 <lfs_tag_id>
 80149b2:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 80149b4:	429c      	cmp	r4, r3
 80149b6:	d846      	bhi.n	8014a46 <lfs_dir_fetchmatch+0x50e>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80149b8:	6a3b      	ldr	r3, [r7, #32]
 80149ba:	4618      	mov	r0, r3
 80149bc:	f7fe fc93 	bl	80132e6 <lfs_tag_splice>
 80149c0:	4603      	mov	r3, r0
 80149c2:	029a      	lsls	r2, r3, #10
 80149c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80149c6:	4413      	add	r3, r2
 80149c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80149ca:	e03c      	b.n	8014a46 <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 80149cc:	6a3b      	ldr	r3, [r7, #32]
 80149ce:	4618      	mov	r0, r3
 80149d0:	f7fe fc5c 	bl	801328c <lfs_tag_type1>
 80149d4:	4603      	mov	r3, r0
 80149d6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80149da:	d134      	bne.n	8014a46 <lfs_dir_fetchmatch+0x50e>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 80149dc:	6a3b      	ldr	r3, [r7, #32]
 80149de:	4618      	mov	r0, r3
 80149e0:	f7fe fc74 	bl	80132cc <lfs_tag_chunk>
 80149e4:	4603      	mov	r3, r0
 80149e6:	f003 0301 	and.w	r3, r3, #1
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	bf14      	ite	ne
 80149ee:	2301      	movne	r3, #1
 80149f0:	2300      	moveq	r3, #0
 80149f2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 80149f6:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80149fc:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 80149fe:	68bb      	ldr	r3, [r7, #8]
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014a04:	3204      	adds	r2, #4
 8014a06:	2108      	movs	r1, #8
 8014a08:	9103      	str	r1, [sp, #12]
 8014a0a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8014a0e:	9102      	str	r1, [sp, #8]
 8014a10:	9201      	str	r2, [sp, #4]
 8014a12:	9300      	str	r3, [sp, #0]
 8014a14:	4623      	mov	r3, r4
 8014a16:	4602      	mov	r2, r0
 8014a18:	2100      	movs	r1, #0
 8014a1a:	68f8      	ldr	r0, [r7, #12]
 8014a1c:	f7fe f836 	bl	8012a8c <lfs_bd_read>
 8014a20:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8014a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d009      	beq.n	8014a3c <lfs_dir_fetchmatch+0x504>
                    if (err == LFS_ERR_CORRUPT) {
 8014a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a2a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8014a2e:	d103      	bne.n	8014a38 <lfs_dir_fetchmatch+0x500>
                        dir->erased = false;
 8014a30:	68bb      	ldr	r3, [r7, #8]
 8014a32:	2200      	movs	r2, #0
 8014a34:	759a      	strb	r2, [r3, #22]
                        break;
 8014a36:	e052      	b.n	8014ade <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 8014a38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a3a:	e0dc      	b.n	8014bf6 <lfs_dir_fetchmatch+0x6be>
                }
                lfs_pair_fromle32(temptail);
 8014a3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014a40:	4618      	mov	r0, r3
 8014a42:	f7fe fbce 	bl	80131e2 <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8014a46:	6a3a      	ldr	r2, [r7, #32]
 8014a48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014a4a:	405a      	eors	r2, r3
 8014a4c:	683b      	ldr	r3, [r7, #0]
 8014a4e:	4013      	ands	r3, r2
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	f47f ae46 	bne.w	80146e2 <lfs_dir_fetchmatch+0x1aa>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8014a56:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8014a58:	68bb      	ldr	r3, [r7, #8]
 8014a5a:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8014a5c:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 8014a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a60:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8014a62:	617b      	str	r3, [r7, #20]
 8014a64:	f107 0210 	add.w	r2, r7, #16
 8014a68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014a6c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8014a70:	4798      	blx	r3
 8014a72:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 8014a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	da09      	bge.n	8014a8e <lfs_dir_fetchmatch+0x556>
                    if (res == LFS_ERR_CORRUPT) {
 8014a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a7c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8014a80:	d103      	bne.n	8014a8a <lfs_dir_fetchmatch+0x552>
                        dir->erased = false;
 8014a82:	68bb      	ldr	r3, [r7, #8]
 8014a84:	2200      	movs	r2, #0
 8014a86:	759a      	strb	r2, [r3, #22]
 8014a88:	e029      	b.n	8014ade <lfs_dir_fetchmatch+0x5a6>
                        break;
                    }
                    return res;
 8014a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 8014a8c:	e0b3      	b.n	8014bf6 <lfs_dir_fetchmatch+0x6be>
                }

                if (res == LFS_CMP_EQ) {
 8014a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d102      	bne.n	8014a9a <lfs_dir_fetchmatch+0x562>
                    // found a match
                    tempbesttag = tag;
 8014a94:	6a3b      	ldr	r3, [r7, #32]
 8014a96:	64bb      	str	r3, [r7, #72]	; 0x48
 8014a98:	e623      	b.n	80146e2 <lfs_dir_fetchmatch+0x1aa>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8014a9a:	6a3a      	ldr	r2, [r7, #32]
 8014a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a9e:	405a      	eors	r2, r3
 8014aa0:	4b58      	ldr	r3, [pc, #352]	; (8014c04 <lfs_dir_fetchmatch+0x6cc>)
 8014aa2:	4013      	ands	r3, r2
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d103      	bne.n	8014ab0 <lfs_dir_fetchmatch+0x578>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8014aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8014aac:	64bb      	str	r3, [r7, #72]	; 0x48
 8014aae:	e618      	b.n	80146e2 <lfs_dir_fetchmatch+0x1aa>
                } else if (res == LFS_CMP_GT &&
 8014ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ab2:	2b02      	cmp	r3, #2
 8014ab4:	f47f ae15 	bne.w	80146e2 <lfs_dir_fetchmatch+0x1aa>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8014ab8:	6a3b      	ldr	r3, [r7, #32]
 8014aba:	4618      	mov	r0, r3
 8014abc:	f7fe fc20 	bl	8013300 <lfs_tag_id>
 8014ac0:	4603      	mov	r3, r0
 8014ac2:	461c      	mov	r4, r3
 8014ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	f7fe fc1a 	bl	8013300 <lfs_tag_id>
 8014acc:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8014ace:	429c      	cmp	r4, r3
 8014ad0:	f63f ae07 	bhi.w	80146e2 <lfs_dir_fetchmatch+0x1aa>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8014ad4:	6a3b      	ldr	r3, [r7, #32]
 8014ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014ada:	64bb      	str	r3, [r7, #72]	; 0x48
 8014adc:	e601      	b.n	80146e2 <lfs_dir_fetchmatch+0x1aa>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 8014ade:	68bb      	ldr	r3, [r7, #8]
 8014ae0:	68db      	ldr	r3, [r3, #12]
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d100      	bne.n	8014ae8 <lfs_dir_fetchmatch+0x5b0>
 8014ae6:	e05d      	b.n	8014ba4 <lfs_dir_fetchmatch+0x66c>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	333c      	adds	r3, #60	; 0x3c
 8014aec:	68ba      	ldr	r2, [r7, #8]
 8014aee:	4611      	mov	r1, r2
 8014af0:	4618      	mov	r0, r3
 8014af2:	f7fe fcad 	bl	8013450 <lfs_gstate_hasmovehere>
 8014af6:	4603      	mov	r3, r0
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d028      	beq.n	8014b4e <lfs_dir_fetchmatch+0x616>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014b00:	4618      	mov	r0, r3
 8014b02:	f7fe fbfd 	bl	8013300 <lfs_tag_id>
 8014b06:	4603      	mov	r3, r0
 8014b08:	461c      	mov	r4, r3
 8014b0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	f7fe fbf7 	bl	8013300 <lfs_tag_id>
 8014b12:	4603      	mov	r3, r0
 8014b14:	429c      	cmp	r4, r3
 8014b16:	d104      	bne.n	8014b22 <lfs_dir_fetchmatch+0x5ea>
                    besttag |= 0x80000000;
 8014b18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014b1e:	667b      	str	r3, [r7, #100]	; 0x64
 8014b20:	e015      	b.n	8014b4e <lfs_dir_fetchmatch+0x616>
                } else if (besttag != -1 &&
 8014b22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b28:	d011      	beq.n	8014b4e <lfs_dir_fetchmatch+0x616>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f7fe fbe6 	bl	8013300 <lfs_tag_id>
 8014b34:	4603      	mov	r3, r0
 8014b36:	461c      	mov	r4, r3
 8014b38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	f7fe fbe0 	bl	8013300 <lfs_tag_id>
 8014b40:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 8014b42:	429c      	cmp	r4, r3
 8014b44:	d203      	bcs.n	8014b4e <lfs_dir_fetchmatch+0x616>
                    besttag -= LFS_MKTAG(0, 1, 0);
 8014b46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014b48:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8014b4c:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 8014b4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d00f      	beq.n	8014b74 <lfs_dir_fetchmatch+0x63c>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8014b54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014b56:	4618      	mov	r0, r3
 8014b58:	f7fe fbd2 	bl	8013300 <lfs_tag_id>
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	461a      	mov	r2, r3
 8014b60:	68bb      	ldr	r3, [r7, #8]
 8014b62:	8a9b      	ldrh	r3, [r3, #20]
 8014b64:	4619      	mov	r1, r3
 8014b66:	4610      	mov	r0, r2
 8014b68:	f7fd feb4 	bl	80128d4 <lfs_min>
 8014b6c:	4603      	mov	r3, r0
 8014b6e:	b29a      	uxth	r2, r3
 8014b70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014b72:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 8014b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014b76:	4618      	mov	r0, r3
 8014b78:	f7fe fb67 	bl	801324a <lfs_tag_isvalid>
 8014b7c:	4603      	mov	r3, r0
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d001      	beq.n	8014b86 <lfs_dir_fetchmatch+0x64e>
                return besttag;
 8014b82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014b84:	e037      	b.n	8014bf6 <lfs_dir_fetchmatch+0x6be>
            } else if (lfs_tag_id(besttag) < dir->count) {
 8014b86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014b88:	4618      	mov	r0, r3
 8014b8a:	f7fe fbb9 	bl	8013300 <lfs_tag_id>
 8014b8e:	4603      	mov	r3, r0
 8014b90:	461a      	mov	r2, r3
 8014b92:	68bb      	ldr	r3, [r7, #8]
 8014b94:	8a9b      	ldrh	r3, [r3, #20]
 8014b96:	429a      	cmp	r2, r3
 8014b98:	d202      	bcs.n	8014ba0 <lfs_dir_fetchmatch+0x668>
                return LFS_ERR_NOENT;
 8014b9a:	f06f 0301 	mvn.w	r3, #1
 8014b9e:	e02a      	b.n	8014bf6 <lfs_dir_fetchmatch+0x6be>
            } else {
                return 0;
 8014ba0:	2300      	movs	r3, #0
 8014ba2:	e028      	b.n	8014bf6 <lfs_dir_fetchmatch+0x6be>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 8014ba4:	68bb      	ldr	r3, [r7, #8]
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	f7fe fa94 	bl	80130d4 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 8014bac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014bae:	3301      	adds	r3, #1
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	f003 0301 	and.w	r3, r3, #1
 8014bb6:	bfb8      	it	lt
 8014bb8:	425b      	neglt	r3, r3
 8014bba:	009b      	lsls	r3, r3, #2
 8014bbc:	3368      	adds	r3, #104	; 0x68
 8014bbe:	443b      	add	r3, r7
 8014bc0:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8014bc4:	68bb      	ldr	r3, [r7, #8]
 8014bc6:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8014bc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014bca:	3301      	adds	r3, #1
 8014bcc:	65bb      	str	r3, [r7, #88]	; 0x58
 8014bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014bd0:	2b01      	cmp	r3, #1
 8014bd2:	f77f ad58 	ble.w	8014686 <lfs_dir_fetchmatch+0x14e>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8014bd6:	68bb      	ldr	r3, [r7, #8]
 8014bd8:	681a      	ldr	r2, [r3, #0]
 8014bda:	68bb      	ldr	r3, [r7, #8]
 8014bdc:	685b      	ldr	r3, [r3, #4]
 8014bde:	490a      	ldr	r1, [pc, #40]	; (8014c08 <lfs_dir_fetchmatch+0x6d0>)
 8014be0:	9101      	str	r1, [sp, #4]
 8014be2:	9300      	str	r3, [sp, #0]
 8014be4:	4613      	mov	r3, r2
 8014be6:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8014bea:	4908      	ldr	r1, [pc, #32]	; (8014c0c <lfs_dir_fetchmatch+0x6d4>)
 8014bec:	4808      	ldr	r0, [pc, #32]	; (8014c10 <lfs_dir_fetchmatch+0x6d8>)
 8014bee:	f007 f829 	bl	801bc44 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8014bf2:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	376c      	adds	r7, #108	; 0x6c
 8014bfa:	46bd      	mov	sp, r7
 8014bfc:	bd90      	pop	{r4, r7, pc}
 8014bfe:	bf00      	nop
 8014c00:	000ffc00 	.word	0x000ffc00
 8014c04:	7ffffc00 	.word	0x7ffffc00
 8014c08:	08021a88 	.word	0x08021a88
 8014c0c:	08021974 	.word	0x08021974
 8014c10:	08021a94 	.word	0x08021a94

08014c14 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b088      	sub	sp, #32
 8014c18:	af04      	add	r7, sp, #16
 8014c1a:	60f8      	str	r0, [r7, #12]
 8014c1c:	60b9      	str	r1, [r7, #8]
 8014c1e:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8014c20:	2300      	movs	r3, #0
 8014c22:	9303      	str	r3, [sp, #12]
 8014c24:	2300      	movs	r3, #0
 8014c26:	9302      	str	r3, [sp, #8]
 8014c28:	2300      	movs	r3, #0
 8014c2a:	9301      	str	r3, [sp, #4]
 8014c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8014c30:	9300      	str	r3, [sp, #0]
 8014c32:	f04f 33ff 	mov.w	r3, #4294967295
 8014c36:	687a      	ldr	r2, [r7, #4]
 8014c38:	68b9      	ldr	r1, [r7, #8]
 8014c3a:	68f8      	ldr	r0, [r7, #12]
 8014c3c:	f7ff fc7c 	bl	8014538 <lfs_dir_fetchmatch>
 8014c40:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8014c42:	4618      	mov	r0, r3
 8014c44:	3710      	adds	r7, #16
 8014c46:	46bd      	mov	sp, r7
 8014c48:	bd80      	pop	{r7, pc}
	...

08014c4c <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8014c4c:	b580      	push	{r7, lr}
 8014c4e:	b08a      	sub	sp, #40	; 0x28
 8014c50:	af02      	add	r7, sp, #8
 8014c52:	60f8      	str	r0, [r7, #12]
 8014c54:	60b9      	str	r1, [r7, #8]
 8014c56:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8014c58:	f107 0310 	add.w	r3, r7, #16
 8014c5c:	9300      	str	r3, [sp, #0]
 8014c5e:	4b12      	ldr	r3, [pc, #72]	; (8014ca8 <lfs_dir_getgstate+0x5c>)
 8014c60:	4a12      	ldr	r2, [pc, #72]	; (8014cac <lfs_dir_getgstate+0x60>)
 8014c62:	68b9      	ldr	r1, [r7, #8]
 8014c64:	68f8      	ldr	r0, [r7, #12]
 8014c66:	f7fe ff35 	bl	8013ad4 <lfs_dir_get>
 8014c6a:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8014c6c:	69fb      	ldr	r3, [r7, #28]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	da05      	bge.n	8014c7e <lfs_dir_getgstate+0x32>
 8014c72:	69fb      	ldr	r3, [r7, #28]
 8014c74:	f113 0f02 	cmn.w	r3, #2
 8014c78:	d001      	beq.n	8014c7e <lfs_dir_getgstate+0x32>
        return res;
 8014c7a:	69fb      	ldr	r3, [r7, #28]
 8014c7c:	e00f      	b.n	8014c9e <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8014c7e:	69fb      	ldr	r3, [r7, #28]
 8014c80:	f113 0f02 	cmn.w	r3, #2
 8014c84:	d00a      	beq.n	8014c9c <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8014c86:	f107 0310 	add.w	r3, r7, #16
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	f7fe fc00 	bl	8013490 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8014c90:	f107 0310 	add.w	r3, r7, #16
 8014c94:	4619      	mov	r1, r3
 8014c96:	6878      	ldr	r0, [r7, #4]
 8014c98:	f7fe fb63 	bl	8013362 <lfs_gstate_xor>
    }

    return 0;
 8014c9c:	2300      	movs	r3, #0
}
 8014c9e:	4618      	mov	r0, r3
 8014ca0:	3720      	adds	r7, #32
 8014ca2:	46bd      	mov	sp, r7
 8014ca4:	bd80      	pop	{r7, pc}
 8014ca6:	bf00      	nop
 8014ca8:	7ff0000c 	.word	0x7ff0000c
 8014cac:	7ff00000 	.word	0x7ff00000

08014cb0 <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b08a      	sub	sp, #40	; 0x28
 8014cb4:	af02      	add	r7, sp, #8
 8014cb6:	60f8      	str	r0, [r7, #12]
 8014cb8:	60b9      	str	r1, [r7, #8]
 8014cba:	603b      	str	r3, [r7, #0]
 8014cbc:	4613      	mov	r3, r2
 8014cbe:	80fb      	strh	r3, [r7, #6]
    if (id == 0x3ff) {
 8014cc0:	88fb      	ldrh	r3, [r7, #6]
 8014cc2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8014cc6:	4293      	cmp	r3, r2
 8014cc8:	d10b      	bne.n	8014ce2 <lfs_dir_getinfo+0x32>
        // special case for root
        strcpy(info->name, "/");
 8014cca:	683b      	ldr	r3, [r7, #0]
 8014ccc:	3308      	adds	r3, #8
 8014cce:	4932      	ldr	r1, [pc, #200]	; (8014d98 <lfs_dir_getinfo+0xe8>)
 8014cd0:	461a      	mov	r2, r3
 8014cd2:	460b      	mov	r3, r1
 8014cd4:	881b      	ldrh	r3, [r3, #0]
 8014cd6:	8013      	strh	r3, [r2, #0]
        info->type = LFS_TYPE_DIR;
 8014cd8:	683b      	ldr	r3, [r7, #0]
 8014cda:	2202      	movs	r2, #2
 8014cdc:	701a      	strb	r2, [r3, #0]
        return 0;
 8014cde:	2300      	movs	r3, #0
 8014ce0:	e055      	b.n	8014d8e <lfs_dir_getinfo+0xde>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8014ce2:	88fb      	ldrh	r3, [r7, #6]
 8014ce4:	029a      	lsls	r2, r3, #10
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014cea:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8014cec:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8014cee:	683b      	ldr	r3, [r7, #0]
 8014cf0:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8014cf2:	9300      	str	r3, [sp, #0]
 8014cf4:	4613      	mov	r3, r2
 8014cf6:	4a29      	ldr	r2, [pc, #164]	; (8014d9c <lfs_dir_getinfo+0xec>)
 8014cf8:	68b9      	ldr	r1, [r7, #8]
 8014cfa:	68f8      	ldr	r0, [r7, #12]
 8014cfc:	f7fe feea 	bl	8013ad4 <lfs_dir_get>
 8014d00:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 8014d02:	69fb      	ldr	r3, [r7, #28]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	da01      	bge.n	8014d0c <lfs_dir_getinfo+0x5c>
        return (int)tag;
 8014d08:	69fb      	ldr	r3, [r7, #28]
 8014d0a:	e040      	b.n	8014d8e <lfs_dir_getinfo+0xde>
    }

    info->type = lfs_tag_type3(tag);
 8014d0c:	69fb      	ldr	r3, [r7, #28]
 8014d0e:	4618      	mov	r0, r3
 8014d10:	f7fe facc 	bl	80132ac <lfs_tag_type3>
 8014d14:	4603      	mov	r3, r0
 8014d16:	b2da      	uxtb	r2, r3
 8014d18:	683b      	ldr	r3, [r7, #0]
 8014d1a:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8014d1c:	88fb      	ldrh	r3, [r7, #6]
 8014d1e:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8014d20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014d24:	f043 0308 	orr.w	r3, r3, #8
 8014d28:	f107 0214 	add.w	r2, r7, #20
 8014d2c:	9200      	str	r2, [sp, #0]
 8014d2e:	4a1c      	ldr	r2, [pc, #112]	; (8014da0 <lfs_dir_getinfo+0xf0>)
 8014d30:	68b9      	ldr	r1, [r7, #8]
 8014d32:	68f8      	ldr	r0, [r7, #12]
 8014d34:	f7fe fece 	bl	8013ad4 <lfs_dir_get>
 8014d38:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 8014d3a:	69fb      	ldr	r3, [r7, #28]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	da01      	bge.n	8014d44 <lfs_dir_getinfo+0x94>
        return (int)tag;
 8014d40:	69fb      	ldr	r3, [r7, #28]
 8014d42:	e024      	b.n	8014d8e <lfs_dir_getinfo+0xde>
    }
    lfs_ctz_fromle32(&ctz);
 8014d44:	f107 0314 	add.w	r3, r7, #20
 8014d48:	4618      	mov	r0, r3
 8014d4a:	f7fe fbe1 	bl	8013510 <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8014d4e:	69fb      	ldr	r3, [r7, #28]
 8014d50:	4618      	mov	r0, r3
 8014d52:	f7fe faab 	bl	80132ac <lfs_tag_type3>
 8014d56:	4603      	mov	r3, r0
 8014d58:	461a      	mov	r2, r3
 8014d5a:	f240 2302 	movw	r3, #514	; 0x202
 8014d5e:	429a      	cmp	r2, r3
 8014d60:	d103      	bne.n	8014d6a <lfs_dir_getinfo+0xba>
        info->size = ctz.size;
 8014d62:	69ba      	ldr	r2, [r7, #24]
 8014d64:	683b      	ldr	r3, [r7, #0]
 8014d66:	605a      	str	r2, [r3, #4]
 8014d68:	e010      	b.n	8014d8c <lfs_dir_getinfo+0xdc>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8014d6a:	69fb      	ldr	r3, [r7, #28]
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	f7fe fa9d 	bl	80132ac <lfs_tag_type3>
 8014d72:	4603      	mov	r3, r0
 8014d74:	461a      	mov	r2, r3
 8014d76:	f240 2301 	movw	r3, #513	; 0x201
 8014d7a:	429a      	cmp	r2, r3
 8014d7c:	d106      	bne.n	8014d8c <lfs_dir_getinfo+0xdc>
        info->size = lfs_tag_size(tag);
 8014d7e:	69fb      	ldr	r3, [r7, #28]
 8014d80:	4618      	mov	r0, r3
 8014d82:	f7fe facd 	bl	8013320 <lfs_tag_size>
 8014d86:	4602      	mov	r2, r0
 8014d88:	683b      	ldr	r3, [r7, #0]
 8014d8a:	605a      	str	r2, [r3, #4]
    }

    return 0;
 8014d8c:	2300      	movs	r3, #0
}
 8014d8e:	4618      	mov	r0, r3
 8014d90:	3720      	adds	r7, #32
 8014d92:	46bd      	mov	sp, r7
 8014d94:	bd80      	pop	{r7, pc}
 8014d96:	bf00      	nop
 8014d98:	08021ad4 	.word	0x08021ad4
 8014d9c:	780ffc00 	.word	0x780ffc00
 8014da0:	700ffc00 	.word	0x700ffc00

08014da4 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8014da4:	b590      	push	{r4, r7, lr}
 8014da6:	b08f      	sub	sp, #60	; 0x3c
 8014da8:	af04      	add	r7, sp, #16
 8014daa:	60f8      	str	r0, [r7, #12]
 8014dac:	60b9      	str	r1, [r7, #8]
 8014dae:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8014db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8014dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dc0:	689c      	ldr	r4, [r3, #8]
 8014dc2:	68b8      	ldr	r0, [r7, #8]
 8014dc4:	f7fe faac 	bl	8013320 <lfs_tag_size>
 8014dc8:	4603      	mov	r3, r0
 8014dca:	4619      	mov	r1, r3
 8014dcc:	4620      	mov	r0, r4
 8014dce:	f7fd fd81 	bl	80128d4 <lfs_min>
 8014dd2:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8014dd4:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 8014dd6:	69fb      	ldr	r3, [r7, #28]
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	69fa      	ldr	r2, [r7, #28]
 8014ddc:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 8014dde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014de0:	6849      	ldr	r1, [r1, #4]
 8014de2:	69b8      	ldr	r0, [r7, #24]
 8014de4:	9003      	str	r0, [sp, #12]
 8014de6:	9102      	str	r1, [sp, #8]
 8014de8:	9201      	str	r2, [sp, #4]
 8014dea:	9300      	str	r3, [sp, #0]
 8014dec:	69bb      	ldr	r3, [r7, #24]
 8014dee:	4622      	mov	r2, r4
 8014df0:	2100      	movs	r1, #0
 8014df2:	6a38      	ldr	r0, [r7, #32]
 8014df4:	f7fd ff8e 	bl	8012d14 <lfs_bd_cmp>
 8014df8:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 8014dfa:	697b      	ldr	r3, [r7, #20]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d001      	beq.n	8014e04 <lfs_dir_find_match+0x60>
        return res;
 8014e00:	697b      	ldr	r3, [r7, #20]
 8014e02:	e014      	b.n	8014e2e <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8014e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e06:	689c      	ldr	r4, [r3, #8]
 8014e08:	68b8      	ldr	r0, [r7, #8]
 8014e0a:	f7fe fa89 	bl	8013320 <lfs_tag_size>
 8014e0e:	4603      	mov	r3, r0
 8014e10:	429c      	cmp	r4, r3
 8014e12:	d00b      	beq.n	8014e2c <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8014e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e16:	689c      	ldr	r4, [r3, #8]
 8014e18:	68b8      	ldr	r0, [r7, #8]
 8014e1a:	f7fe fa81 	bl	8013320 <lfs_tag_size>
 8014e1e:	4603      	mov	r3, r0
 8014e20:	429c      	cmp	r4, r3
 8014e22:	d201      	bcs.n	8014e28 <lfs_dir_find_match+0x84>
 8014e24:	2301      	movs	r3, #1
 8014e26:	e002      	b.n	8014e2e <lfs_dir_find_match+0x8a>
 8014e28:	2302      	movs	r3, #2
 8014e2a:	e000      	b.n	8014e2e <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8014e2c:	2300      	movs	r3, #0
}
 8014e2e:	4618      	mov	r0, r3
 8014e30:	372c      	adds	r7, #44	; 0x2c
 8014e32:	46bd      	mov	sp, r7
 8014e34:	bd90      	pop	{r4, r7, pc}
	...

08014e38 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8014e38:	b590      	push	{r4, r7, lr}
 8014e3a:	b093      	sub	sp, #76	; 0x4c
 8014e3c:	af04      	add	r7, sp, #16
 8014e3e:	60f8      	str	r0, [r7, #12]
 8014e40:	60b9      	str	r1, [r7, #8]
 8014e42:	607a      	str	r2, [r7, #4]
 8014e44:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8014e4c:	683b      	ldr	r3, [r7, #0]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d003      	beq.n	8014e5a <lfs_dir_find+0x22>
        *id = 0x3ff;
 8014e52:	683b      	ldr	r3, [r7, #0]
 8014e54:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8014e58:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8014e5a:	4b6e      	ldr	r3, [pc, #440]	; (8015014 <lfs_dir_find+0x1dc>)
 8014e5c:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	6a1a      	ldr	r2, [r3, #32]
 8014e62:	68bb      	ldr	r3, [r7, #8]
 8014e64:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014e6a:	68bb      	ldr	r3, [r7, #8]
 8014e6c:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8014e6e:	496a      	ldr	r1, [pc, #424]	; (8015018 <lfs_dir_find+0x1e0>)
 8014e70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014e72:	f007 f8b6 	bl	801bfe2 <strspn>
 8014e76:	4602      	mov	r2, r0
 8014e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e7a:	4413      	add	r3, r2
 8014e7c:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8014e7e:	4966      	ldr	r1, [pc, #408]	; (8015018 <lfs_dir_find+0x1e0>)
 8014e80:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014e82:	f007 f865 	bl	801bf50 <strcspn>
 8014e86:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8014e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e8a:	2b01      	cmp	r3, #1
 8014e8c:	d105      	bne.n	8014e9a <lfs_dir_find+0x62>
 8014e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e90:	781a      	ldrb	r2, [r3, #0]
 8014e92:	4b62      	ldr	r3, [pc, #392]	; (801501c <lfs_dir_find+0x1e4>)
 8014e94:	781b      	ldrb	r3, [r3, #0]
 8014e96:	429a      	cmp	r2, r3
 8014e98:	d00a      	beq.n	8014eb0 <lfs_dir_find+0x78>
 8014e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e9c:	2b02      	cmp	r3, #2
 8014e9e:	d10c      	bne.n	8014eba <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8014ea0:	2202      	movs	r2, #2
 8014ea2:	495f      	ldr	r1, [pc, #380]	; (8015020 <lfs_dir_find+0x1e8>)
 8014ea4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014ea6:	f007 f805 	bl	801beb4 <memcmp>
 8014eaa:	4603      	mov	r3, r0
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d104      	bne.n	8014eba <lfs_dir_find+0x82>
            name += namelen;
 8014eb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eb4:	4413      	add	r3, r2
 8014eb6:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8014eb8:	e7d9      	b.n	8014e6e <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8014eba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ebe:	4413      	add	r3, r2
 8014ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8014ec2:	2301      	movs	r3, #1
 8014ec4:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8014ec6:	4954      	ldr	r1, [pc, #336]	; (8015018 <lfs_dir_find+0x1e0>)
 8014ec8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014eca:	f007 f88a 	bl	801bfe2 <strspn>
 8014ece:	4602      	mov	r2, r0
 8014ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ed2:	4413      	add	r3, r2
 8014ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8014ed6:	4950      	ldr	r1, [pc, #320]	; (8015018 <lfs_dir_find+0x1e0>)
 8014ed8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014eda:	f007 f839 	bl	801bf50 <strcspn>
 8014ede:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8014ee0:	6a3b      	ldr	r3, [r7, #32]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d01d      	beq.n	8014f22 <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8014ee6:	6a3b      	ldr	r3, [r7, #32]
 8014ee8:	2b02      	cmp	r3, #2
 8014eea:	d112      	bne.n	8014f12 <lfs_dir_find+0xda>
 8014eec:	2202      	movs	r2, #2
 8014eee:	494c      	ldr	r1, [pc, #304]	; (8015020 <lfs_dir_find+0x1e8>)
 8014ef0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014ef2:	f006 ffdf 	bl	801beb4 <memcmp>
 8014ef6:	4603      	mov	r3, r0
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d10a      	bne.n	8014f12 <lfs_dir_find+0xda>
                depth -= 1;
 8014efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014efe:	3b01      	subs	r3, #1
 8014f00:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 8014f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d107      	bne.n	8014f18 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8014f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014f0a:	6a3b      	ldr	r3, [r7, #32]
 8014f0c:	4413      	add	r3, r2
 8014f0e:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 8014f10:	e7ad      	b.n	8014e6e <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 8014f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f14:	3301      	adds	r3, #1
 8014f16:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8014f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014f1a:	6a3b      	ldr	r3, [r7, #32]
 8014f1c:	4413      	add	r3, r2
 8014f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 8014f20:	e7d1      	b.n	8014ec6 <lfs_dir_find+0x8e>
                break;
 8014f22:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8014f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f26:	781b      	ldrb	r3, [r3, #0]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d101      	bne.n	8014f30 <lfs_dir_find+0xf8>
            return tag;
 8014f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f2e:	e06c      	b.n	801500a <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014f34:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8014f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f38:	4618      	mov	r0, r3
 8014f3a:	f7fe f9b7 	bl	80132ac <lfs_tag_type3>
 8014f3e:	4603      	mov	r3, r0
 8014f40:	2b02      	cmp	r3, #2
 8014f42:	d002      	beq.n	8014f4a <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8014f44:	f06f 0313 	mvn.w	r3, #19
 8014f48:	e05f      	b.n	801500a <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8014f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	f7fe f9d7 	bl	8013300 <lfs_tag_id>
 8014f52:	4603      	mov	r3, r0
 8014f54:	461a      	mov	r2, r3
 8014f56:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8014f5a:	429a      	cmp	r2, r3
 8014f5c:	d01c      	beq.n	8014f98 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8014f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f60:	4618      	mov	r0, r3
 8014f62:	f7fe f9cd 	bl	8013300 <lfs_tag_id>
 8014f66:	4603      	mov	r3, r0
 8014f68:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8014f6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014f6e:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8014f72:	68ba      	ldr	r2, [r7, #8]
 8014f74:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8014f76:	9200      	str	r2, [sp, #0]
 8014f78:	4a2a      	ldr	r2, [pc, #168]	; (8015024 <lfs_dir_find+0x1ec>)
 8014f7a:	68b9      	ldr	r1, [r7, #8]
 8014f7c:	68f8      	ldr	r0, [r7, #12]
 8014f7e:	f7fe fda9 	bl	8013ad4 <lfs_dir_get>
 8014f82:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8014f84:	69fb      	ldr	r3, [r7, #28]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	da01      	bge.n	8014f8e <lfs_dir_find+0x156>
                return res;
 8014f8a:	69fb      	ldr	r3, [r7, #28]
 8014f8c:	e03d      	b.n	801500a <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 8014f8e:	68bb      	ldr	r3, [r7, #8]
 8014f90:	3318      	adds	r3, #24
 8014f92:	4618      	mov	r0, r3
 8014f94:	f7fe f925 	bl	80131e2 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8014f98:	68bb      	ldr	r3, [r7, #8]
 8014f9a:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8014f9e:	212f      	movs	r1, #47	; 0x2f
 8014fa0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014fa2:	f006 ffc8 	bl	801bf36 <strchr>
 8014fa6:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d101      	bne.n	8014fb0 <lfs_dir_find+0x178>
 8014fac:	683b      	ldr	r3, [r7, #0]
 8014fae:	e000      	b.n	8014fb2 <lfs_dir_find+0x17a>
 8014fb0:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8014fb2:	68fa      	ldr	r2, [r7, #12]
 8014fb4:	613a      	str	r2, [r7, #16]
 8014fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014fb8:	617a      	str	r2, [r7, #20]
 8014fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014fbc:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8014fbe:	f107 0210 	add.w	r2, r7, #16
 8014fc2:	9203      	str	r2, [sp, #12]
 8014fc4:	4a18      	ldr	r2, [pc, #96]	; (8015028 <lfs_dir_find+0x1f0>)
 8014fc6:	9202      	str	r2, [sp, #8]
 8014fc8:	9301      	str	r3, [sp, #4]
 8014fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fcc:	9300      	str	r3, [sp, #0]
 8014fce:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8014fd2:	4622      	mov	r2, r4
 8014fd4:	68b9      	ldr	r1, [r7, #8]
 8014fd6:	68f8      	ldr	r0, [r7, #12]
 8014fd8:	f7ff faae 	bl	8014538 <lfs_dir_fetchmatch>
 8014fdc:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 8014fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	da01      	bge.n	8014fe8 <lfs_dir_find+0x1b0>
                return tag;
 8014fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fe6:	e010      	b.n	801500a <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8014fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d004      	beq.n	8014ff8 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 8014fee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ff2:	4413      	add	r3, r2
 8014ff4:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 8014ff6:	e73a      	b.n	8014e6e <lfs_dir_find+0x36>
            if (!dir->split) {
 8014ff8:	68bb      	ldr	r3, [r7, #8]
 8014ffa:	7ddb      	ldrb	r3, [r3, #23]
 8014ffc:	f083 0301 	eor.w	r3, r3, #1
 8015000:	b2db      	uxtb	r3, r3
 8015002:	2b00      	cmp	r3, #0
 8015004:	d0c8      	beq.n	8014f98 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8015006:	f06f 0301 	mvn.w	r3, #1
    }
}
 801500a:	4618      	mov	r0, r3
 801500c:	373c      	adds	r7, #60	; 0x3c
 801500e:	46bd      	mov	sp, r7
 8015010:	bd90      	pop	{r4, r7, pc}
 8015012:	bf00      	nop
 8015014:	002ffc00 	.word	0x002ffc00
 8015018:	08021ad4 	.word	0x08021ad4
 801501c:	08021ad8 	.word	0x08021ad8
 8015020:	08021adc 	.word	0x08021adc
 8015024:	700ffc00 	.word	0x700ffc00
 8015028:	08014da5 	.word	0x08014da5

0801502c <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 801502c:	b590      	push	{r4, r7, lr}
 801502e:	b08b      	sub	sp, #44	; 0x2c
 8015030:	af04      	add	r7, sp, #16
 8015032:	60f8      	str	r0, [r7, #12]
 8015034:	60b9      	str	r1, [r7, #8]
 8015036:	607a      	str	r2, [r7, #4]
 8015038:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	f103 0010 	add.w	r0, r3, #16
 8015040:	68fc      	ldr	r4, [r7, #12]
 8015042:	68bb      	ldr	r3, [r7, #8]
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	68ba      	ldr	r2, [r7, #8]
 8015048:	6852      	ldr	r2, [r2, #4]
 801504a:	6839      	ldr	r1, [r7, #0]
 801504c:	9103      	str	r1, [sp, #12]
 801504e:	6879      	ldr	r1, [r7, #4]
 8015050:	9102      	str	r1, [sp, #8]
 8015052:	9201      	str	r2, [sp, #4]
 8015054:	9300      	str	r3, [sp, #0]
 8015056:	2300      	movs	r3, #0
 8015058:	4622      	mov	r2, r4
 801505a:	4601      	mov	r1, r0
 801505c:	68f8      	ldr	r0, [r7, #12]
 801505e:	f7fd ff5b 	bl	8012f18 <lfs_bd_prog>
 8015062:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8015064:	697b      	ldr	r3, [r7, #20]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d001      	beq.n	801506e <lfs_dir_commitprog+0x42>
        return err;
 801506a:	697b      	ldr	r3, [r7, #20]
 801506c:	e010      	b.n	8015090 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 801506e:	68bb      	ldr	r3, [r7, #8]
 8015070:	68db      	ldr	r3, [r3, #12]
 8015072:	683a      	ldr	r2, [r7, #0]
 8015074:	6879      	ldr	r1, [r7, #4]
 8015076:	4618      	mov	r0, r3
 8015078:	f004 fa2e 	bl	80194d8 <lfs_crc>
 801507c:	4602      	mov	r2, r0
 801507e:	68bb      	ldr	r3, [r7, #8]
 8015080:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8015082:	68bb      	ldr	r3, [r7, #8]
 8015084:	685a      	ldr	r2, [r3, #4]
 8015086:	683b      	ldr	r3, [r7, #0]
 8015088:	441a      	add	r2, r3
 801508a:	68bb      	ldr	r3, [r7, #8]
 801508c:	605a      	str	r2, [r3, #4]
    return 0;
 801508e:	2300      	movs	r3, #0
}
 8015090:	4618      	mov	r0, r3
 8015092:	371c      	adds	r7, #28
 8015094:	46bd      	mov	sp, r7
 8015096:	bd90      	pop	{r4, r7, pc}

08015098 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8015098:	b590      	push	{r4, r7, lr}
 801509a:	b08f      	sub	sp, #60	; 0x3c
 801509c:	af04      	add	r7, sp, #16
 801509e:	60f8      	str	r0, [r7, #12]
 80150a0:	60b9      	str	r1, [r7, #8]
 80150a2:	607a      	str	r2, [r7, #4]
 80150a4:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 80150a6:	6878      	ldr	r0, [r7, #4]
 80150a8:	f7fe f947 	bl	801333a <lfs_tag_dsize>
 80150ac:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 80150ae:	68bb      	ldr	r3, [r7, #8]
 80150b0:	685a      	ldr	r2, [r3, #4]
 80150b2:	6a3b      	ldr	r3, [r7, #32]
 80150b4:	441a      	add	r2, r3
 80150b6:	68bb      	ldr	r3, [r7, #8]
 80150b8:	695b      	ldr	r3, [r3, #20]
 80150ba:	429a      	cmp	r2, r3
 80150bc:	d902      	bls.n	80150c4 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 80150be:	f06f 031b 	mvn.w	r3, #27
 80150c2:	e065      	b.n	8015190 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80150ca:	68bb      	ldr	r3, [r7, #8]
 80150cc:	689b      	ldr	r3, [r3, #8]
 80150ce:	4053      	eors	r3, r2
 80150d0:	4618      	mov	r0, r3
 80150d2:	f7fd fc92 	bl	80129fa <lfs_tobe32>
 80150d6:	4603      	mov	r3, r0
 80150d8:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 80150da:	f107 0214 	add.w	r2, r7, #20
 80150de:	2304      	movs	r3, #4
 80150e0:	68b9      	ldr	r1, [r7, #8]
 80150e2:	68f8      	ldr	r0, [r7, #12]
 80150e4:	f7ff ffa2 	bl	801502c <lfs_dir_commitprog>
 80150e8:	61f8      	str	r0, [r7, #28]
    if (err) {
 80150ea:	69fb      	ldr	r3, [r7, #28]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d001      	beq.n	80150f4 <lfs_dir_commitattr+0x5c>
        return err;
 80150f0:	69fb      	ldr	r3, [r7, #28]
 80150f2:	e04d      	b.n	8015190 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	db0c      	blt.n	8015114 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 80150fa:	6a3b      	ldr	r3, [r7, #32]
 80150fc:	3b04      	subs	r3, #4
 80150fe:	683a      	ldr	r2, [r7, #0]
 8015100:	68b9      	ldr	r1, [r7, #8]
 8015102:	68f8      	ldr	r0, [r7, #12]
 8015104:	f7ff ff92 	bl	801502c <lfs_dir_commitprog>
 8015108:	61f8      	str	r0, [r7, #28]
        if (err) {
 801510a:	69fb      	ldr	r3, [r7, #28]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d039      	beq.n	8015184 <lfs_dir_commitattr+0xec>
            return err;
 8015110:	69fb      	ldr	r3, [r7, #28]
 8015112:	e03d      	b.n	8015190 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8015114:	683b      	ldr	r3, [r7, #0]
 8015116:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8015118:	2300      	movs	r3, #0
 801511a:	627b      	str	r3, [r7, #36]	; 0x24
 801511c:	e02d      	b.n	801517a <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 801511e:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8015120:	6a3a      	ldr	r2, [r7, #32]
 8015122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015124:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8015126:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 8015128:	69bb      	ldr	r3, [r7, #24]
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	69ba      	ldr	r2, [r7, #24]
 801512e:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8015130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015132:	440a      	add	r2, r1
 8015134:	2101      	movs	r1, #1
 8015136:	9103      	str	r1, [sp, #12]
 8015138:	f107 0113 	add.w	r1, r7, #19
 801513c:	9102      	str	r1, [sp, #8]
 801513e:	9201      	str	r2, [sp, #4]
 8015140:	9300      	str	r3, [sp, #0]
 8015142:	4623      	mov	r3, r4
 8015144:	4602      	mov	r2, r0
 8015146:	2100      	movs	r1, #0
 8015148:	68f8      	ldr	r0, [r7, #12]
 801514a:	f7fd fc9f 	bl	8012a8c <lfs_bd_read>
 801514e:	61f8      	str	r0, [r7, #28]
            if (err) {
 8015150:	69fb      	ldr	r3, [r7, #28]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d001      	beq.n	801515a <lfs_dir_commitattr+0xc2>
                return err;
 8015156:	69fb      	ldr	r3, [r7, #28]
 8015158:	e01a      	b.n	8015190 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 801515a:	f107 0213 	add.w	r2, r7, #19
 801515e:	2301      	movs	r3, #1
 8015160:	68b9      	ldr	r1, [r7, #8]
 8015162:	68f8      	ldr	r0, [r7, #12]
 8015164:	f7ff ff62 	bl	801502c <lfs_dir_commitprog>
 8015168:	61f8      	str	r0, [r7, #28]
            if (err) {
 801516a:	69fb      	ldr	r3, [r7, #28]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d001      	beq.n	8015174 <lfs_dir_commitattr+0xdc>
                return err;
 8015170:	69fb      	ldr	r3, [r7, #28]
 8015172:	e00d      	b.n	8015190 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8015174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015176:	3301      	adds	r3, #1
 8015178:	627b      	str	r3, [r7, #36]	; 0x24
 801517a:	6a3b      	ldr	r3, [r7, #32]
 801517c:	3b04      	subs	r3, #4
 801517e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015180:	429a      	cmp	r2, r3
 8015182:	d3cc      	bcc.n	801511e <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801518a:	68bb      	ldr	r3, [r7, #8]
 801518c:	609a      	str	r2, [r3, #8]
    return 0;
 801518e:	2300      	movs	r3, #0
}
 8015190:	4618      	mov	r0, r3
 8015192:	372c      	adds	r7, #44	; 0x2c
 8015194:	46bd      	mov	sp, r7
 8015196:	bd90      	pop	{r4, r7, pc}

08015198 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8015198:	b590      	push	{r4, r7, lr}
 801519a:	b097      	sub	sp, #92	; 0x5c
 801519c:	af04      	add	r7, sp, #16
 801519e:	6078      	str	r0, [r7, #4]
 80151a0:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 80151a2:	683b      	ldr	r3, [r7, #0]
 80151a4:	685b      	ldr	r3, [r3, #4]
 80151a6:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80151ae:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 80151b0:	4619      	mov	r1, r3
 80151b2:	4610      	mov	r0, r2
 80151b4:	f7fd fbb3 	bl	801291e <lfs_alignup>
 80151b8:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 80151ba:	2300      	movs	r3, #0
 80151bc:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 80151be:	2300      	movs	r3, #0
 80151c0:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 80151c2:	e0a6      	b.n	8015312 <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 80151c4:	683b      	ldr	r3, [r7, #0]
 80151c6:	685b      	ldr	r3, [r3, #4]
 80151c8:	3304      	adds	r3, #4
 80151ca:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 80151cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80151ce:	6a3b      	ldr	r3, [r7, #32]
 80151d0:	1ad3      	subs	r3, r2, r3
 80151d2:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80151d6:	4618      	mov	r0, r3
 80151d8:	f7fd fb7c 	bl	80128d4 <lfs_min>
 80151dc:	4602      	mov	r2, r0
 80151de:	6a3b      	ldr	r3, [r7, #32]
 80151e0:	4413      	add	r3, r2
 80151e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 80151e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80151e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151e8:	429a      	cmp	r2, r3
 80151ea:	d206      	bcs.n	80151fa <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 80151ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151ee:	3b08      	subs	r3, #8
 80151f0:	4619      	mov	r1, r3
 80151f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80151f4:	f7fd fb6e 	bl	80128d4 <lfs_min>
 80151f8:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 80151fa:	f04f 33ff 	mov.w	r3, #4294967295
 80151fe:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 8015200:	6879      	ldr	r1, [r7, #4]
 8015202:	683b      	ldr	r3, [r7, #0]
 8015204:	681b      	ldr	r3, [r3, #0]
 8015206:	2204      	movs	r2, #4
 8015208:	9203      	str	r2, [sp, #12]
 801520a:	f107 0214 	add.w	r2, r7, #20
 801520e:	9202      	str	r2, [sp, #8]
 8015210:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015212:	9201      	str	r2, [sp, #4]
 8015214:	9300      	str	r3, [sp, #0]
 8015216:	2304      	movs	r3, #4
 8015218:	460a      	mov	r2, r1
 801521a:	2100      	movs	r1, #0
 801521c:	6878      	ldr	r0, [r7, #4]
 801521e:	f7fd fc35 	bl	8012a8c <lfs_bd_read>
 8015222:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 8015224:	69fb      	ldr	r3, [r7, #28]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d005      	beq.n	8015236 <lfs_dir_commitcrc+0x9e>
 801522a:	69fb      	ldr	r3, [r7, #28]
 801522c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8015230:	d001      	beq.n	8015236 <lfs_dir_commitcrc+0x9e>
            return err;
 8015232:	69fb      	ldr	r3, [r7, #28]
 8015234:	e0e8      	b.n	8015408 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 8015236:	697b      	ldr	r3, [r7, #20]
 8015238:	4618      	mov	r0, r3
 801523a:	f7fd fbd2 	bl	80129e2 <lfs_frombe32>
 801523e:	4603      	mov	r3, r0
 8015240:	43db      	mvns	r3, r3
 8015242:	0fdb      	lsrs	r3, r3, #31
 8015244:	2b00      	cmp	r3, #0
 8015246:	bf14      	ite	ne
 8015248:	2301      	movne	r3, #1
 801524a:	2300      	moveq	r3, #0
 801524c:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 801524e:	7efb      	ldrb	r3, [r7, #27]
 8015250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015254:	051a      	lsls	r2, r3, #20
 8015256:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015258:	6a3b      	ldr	r3, [r7, #32]
 801525a:	1acb      	subs	r3, r1, r3
 801525c:	4313      	orrs	r3, r2
 801525e:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 8015262:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8015266:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8015268:	683b      	ldr	r3, [r7, #0]
 801526a:	689a      	ldr	r2, [r3, #8]
 801526c:	697b      	ldr	r3, [r7, #20]
 801526e:	4053      	eors	r3, r2
 8015270:	4618      	mov	r0, r3
 8015272:	f7fd fbc2 	bl	80129fa <lfs_tobe32>
 8015276:	4603      	mov	r3, r0
 8015278:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 801527a:	683b      	ldr	r3, [r7, #0]
 801527c:	68db      	ldr	r3, [r3, #12]
 801527e:	f107 010c 	add.w	r1, r7, #12
 8015282:	2204      	movs	r2, #4
 8015284:	4618      	mov	r0, r3
 8015286:	f004 f927 	bl	80194d8 <lfs_crc>
 801528a:	4602      	mov	r2, r0
 801528c:	683b      	ldr	r3, [r7, #0]
 801528e:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 8015290:	683b      	ldr	r3, [r7, #0]
 8015292:	68db      	ldr	r3, [r3, #12]
 8015294:	4618      	mov	r0, r3
 8015296:	f7fd fb98 	bl	80129ca <lfs_tole32>
 801529a:	4603      	mov	r3, r0
 801529c:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	f103 0010 	add.w	r0, r3, #16
 80152a4:	687c      	ldr	r4, [r7, #4]
 80152a6:	683b      	ldr	r3, [r7, #0]
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	683a      	ldr	r2, [r7, #0]
 80152ac:	6852      	ldr	r2, [r2, #4]
 80152ae:	2108      	movs	r1, #8
 80152b0:	9103      	str	r1, [sp, #12]
 80152b2:	f107 010c 	add.w	r1, r7, #12
 80152b6:	9102      	str	r1, [sp, #8]
 80152b8:	9201      	str	r2, [sp, #4]
 80152ba:	9300      	str	r3, [sp, #0]
 80152bc:	2300      	movs	r3, #0
 80152be:	4622      	mov	r2, r4
 80152c0:	4601      	mov	r1, r0
 80152c2:	6878      	ldr	r0, [r7, #4]
 80152c4:	f7fd fe28 	bl	8012f18 <lfs_bd_prog>
 80152c8:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 80152ca:	69fb      	ldr	r3, [r7, #28]
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d001      	beq.n	80152d4 <lfs_dir_commitcrc+0x13c>
            return err;
 80152d0:	69fb      	ldr	r3, [r7, #28]
 80152d2:	e099      	b.n	8015408 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 80152d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d106      	bne.n	80152e8 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 80152da:	683b      	ldr	r3, [r7, #0]
 80152dc:	685b      	ldr	r3, [r3, #4]
 80152de:	3304      	adds	r3, #4
 80152e0:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 80152e2:	683b      	ldr	r3, [r7, #0]
 80152e4:	68db      	ldr	r3, [r3, #12]
 80152e6:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 80152e8:	697b      	ldr	r3, [r7, #20]
 80152ea:	4618      	mov	r0, r3
 80152ec:	f7fe f818 	bl	8013320 <lfs_tag_size>
 80152f0:	4603      	mov	r3, r0
 80152f2:	1d1a      	adds	r2, r3, #4
 80152f4:	683b      	ldr	r3, [r7, #0]
 80152f6:	685b      	ldr	r3, [r3, #4]
 80152f8:	441a      	add	r2, r3
 80152fa:	683b      	ldr	r3, [r7, #0]
 80152fc:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 80152fe:	7efb      	ldrb	r3, [r7, #27]
 8015300:	07da      	lsls	r2, r3, #31
 8015302:	697b      	ldr	r3, [r7, #20]
 8015304:	405a      	eors	r2, r3
 8015306:	683b      	ldr	r3, [r7, #0]
 8015308:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 801530a:	683b      	ldr	r3, [r7, #0]
 801530c:	f04f 32ff 	mov.w	r2, #4294967295
 8015310:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 8015312:	683b      	ldr	r3, [r7, #0]
 8015314:	685b      	ldr	r3, [r3, #4]
 8015316:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015318:	429a      	cmp	r2, r3
 801531a:	f63f af53 	bhi.w	80151c4 <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	f103 0110 	add.w	r1, r3, #16
 8015324:	687a      	ldr	r2, [r7, #4]
 8015326:	2300      	movs	r3, #0
 8015328:	6878      	ldr	r0, [r7, #4]
 801532a:	f7fd fdc1 	bl	8012eb0 <lfs_bd_sync>
 801532e:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 8015330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015332:	2b00      	cmp	r3, #0
 8015334:	d001      	beq.n	801533a <lfs_dir_commitcrc+0x1a2>
        return err;
 8015336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015338:	e066      	b.n	8015408 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 801533a:	683b      	ldr	r3, [r7, #0]
 801533c:	691b      	ldr	r3, [r3, #16]
 801533e:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 8015340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015342:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 8015344:	e05b      	b.n	80153fe <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 8015346:	f04f 33ff 	mov.w	r3, #4294967295
 801534a:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 801534c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801534e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015350:	e030      	b.n	80153b4 <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 8015352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015356:	429a      	cmp	r2, r3
 8015358:	d106      	bne.n	8015368 <lfs_dir_commitcrc+0x1d0>
 801535a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801535c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801535e:	429a      	cmp	r2, r3
 8015360:	d002      	beq.n	8015368 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 8015362:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8015366:	e04f      	b.n	8015408 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8015368:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 801536a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801536c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801536e:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8015370:	1d18      	adds	r0, r3, #4
 8015372:	683b      	ldr	r3, [r7, #0]
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	2201      	movs	r2, #1
 8015378:	9203      	str	r2, [sp, #12]
 801537a:	f107 020b 	add.w	r2, r7, #11
 801537e:	9202      	str	r2, [sp, #8]
 8015380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015382:	9201      	str	r2, [sp, #4]
 8015384:	9300      	str	r3, [sp, #0]
 8015386:	4603      	mov	r3, r0
 8015388:	460a      	mov	r2, r1
 801538a:	2100      	movs	r1, #0
 801538c:	6878      	ldr	r0, [r7, #4]
 801538e:	f7fd fb7d 	bl	8012a8c <lfs_bd_read>
 8015392:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 8015394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015396:	2b00      	cmp	r3, #0
 8015398:	d001      	beq.n	801539e <lfs_dir_commitcrc+0x206>
                return err;
 801539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801539c:	e034      	b.n	8015408 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 801539e:	f107 030b 	add.w	r3, r7, #11
 80153a2:	2201      	movs	r2, #1
 80153a4:	4619      	mov	r1, r3
 80153a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80153a8:	f004 f896 	bl	80194d8 <lfs_crc>
 80153ac:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 80153ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153b0:	3301      	adds	r3, #1
 80153b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80153b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153b6:	3304      	adds	r3, #4
 80153b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80153ba:	429a      	cmp	r2, r3
 80153bc:	d3c9      	bcc.n	8015352 <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 80153be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d002      	beq.n	80153ca <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 80153c4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80153c8:	e01e      	b.n	8015408 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 80153ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80153cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153ce:	1ad3      	subs	r3, r2, r3
 80153d0:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80153d4:	4618      	mov	r0, r3
 80153d6:	f7fd fa7d 	bl	80128d4 <lfs_min>
 80153da:	4602      	mov	r2, r0
 80153dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153de:	4413      	add	r3, r2
 80153e0:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 80153e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80153e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153e6:	429a      	cmp	r2, r3
 80153e8:	d206      	bcs.n	80153f8 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 80153ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153ec:	3b08      	subs	r3, #8
 80153ee:	4619      	mov	r1, r3
 80153f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80153f2:	f7fd fa6f 	bl	80128d4 <lfs_min>
 80153f6:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 80153f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80153fa:	3304      	adds	r3, #4
 80153fc:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 80153fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015402:	429a      	cmp	r2, r3
 8015404:	d39f      	bcc.n	8015346 <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 8015406:	2300      	movs	r3, #0
}
 8015408:	4618      	mov	r0, r3
 801540a:	374c      	adds	r7, #76	; 0x4c
 801540c:	46bd      	mov	sp, r7
 801540e:	bd90      	pop	{r4, r7, pc}

08015410 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8015410:	b580      	push	{r7, lr}
 8015412:	b08a      	sub	sp, #40	; 0x28
 8015414:	af04      	add	r7, sp, #16
 8015416:	6078      	str	r0, [r7, #4]
 8015418:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 801541a:	2300      	movs	r3, #0
 801541c:	617b      	str	r3, [r7, #20]
 801541e:	e016      	b.n	801544e <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8015420:	697b      	ldr	r3, [r7, #20]
 8015422:	3301      	adds	r3, #1
 8015424:	2b00      	cmp	r3, #0
 8015426:	f003 0301 	and.w	r3, r3, #1
 801542a:	bfb8      	it	lt
 801542c:	425b      	neglt	r3, r3
 801542e:	009b      	lsls	r3, r3, #2
 8015430:	683a      	ldr	r2, [r7, #0]
 8015432:	4413      	add	r3, r2
 8015434:	4619      	mov	r1, r3
 8015436:	6878      	ldr	r0, [r7, #4]
 8015438:	f7fe f9b2 	bl	80137a0 <lfs_alloc>
 801543c:	60f8      	str	r0, [r7, #12]
        if (err) {
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d001      	beq.n	8015448 <lfs_dir_alloc+0x38>
            return err;
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	e058      	b.n	80154fa <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8015448:	697b      	ldr	r3, [r7, #20]
 801544a:	3301      	adds	r3, #1
 801544c:	617b      	str	r3, [r7, #20]
 801544e:	697b      	ldr	r3, [r7, #20]
 8015450:	2b01      	cmp	r3, #1
 8015452:	dde5      	ble.n	8015420 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8015454:	683b      	ldr	r3, [r7, #0]
 8015456:	2200      	movs	r2, #0
 8015458:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 801545a:	6879      	ldr	r1, [r7, #4]
 801545c:	683b      	ldr	r3, [r7, #0]
 801545e:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8015460:	683a      	ldr	r2, [r7, #0]
 8015462:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8015464:	2004      	movs	r0, #4
 8015466:	9003      	str	r0, [sp, #12]
 8015468:	9202      	str	r2, [sp, #8]
 801546a:	2200      	movs	r2, #0
 801546c:	9201      	str	r2, [sp, #4]
 801546e:	9300      	str	r3, [sp, #0]
 8015470:	2304      	movs	r3, #4
 8015472:	460a      	mov	r2, r1
 8015474:	2100      	movs	r1, #0
 8015476:	6878      	ldr	r0, [r7, #4]
 8015478:	f7fd fb08 	bl	8012a8c <lfs_bd_read>
 801547c:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 801547e:	683b      	ldr	r3, [r7, #0]
 8015480:	689b      	ldr	r3, [r3, #8]
 8015482:	4618      	mov	r0, r3
 8015484:	f7fd fa96 	bl	80129b4 <lfs_fromle32>
 8015488:	4602      	mov	r2, r0
 801548a:	683b      	ldr	r3, [r7, #0]
 801548c:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 801548e:	693b      	ldr	r3, [r7, #16]
 8015490:	2b00      	cmp	r3, #0
 8015492:	d005      	beq.n	80154a0 <lfs_dir_alloc+0x90>
 8015494:	693b      	ldr	r3, [r7, #16]
 8015496:	f113 0f54 	cmn.w	r3, #84	; 0x54
 801549a:	d001      	beq.n	80154a0 <lfs_dir_alloc+0x90>
        return err;
 801549c:	693b      	ldr	r3, [r7, #16]
 801549e:	e02c      	b.n	80154fa <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80154a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	dd0e      	ble.n	80154c8 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 80154aa:	683b      	ldr	r3, [r7, #0]
 80154ac:	689a      	ldr	r2, [r3, #8]
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80154b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154b4:	3301      	adds	r3, #1
 80154b6:	f043 0301 	orr.w	r3, r3, #1
 80154ba:	4619      	mov	r1, r3
 80154bc:	4610      	mov	r0, r2
 80154be:	f7fd fa2e 	bl	801291e <lfs_alignup>
 80154c2:	4602      	mov	r2, r0
 80154c4:	683b      	ldr	r3, [r7, #0]
 80154c6:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 80154c8:	683b      	ldr	r3, [r7, #0]
 80154ca:	2204      	movs	r2, #4
 80154cc:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 80154ce:	683b      	ldr	r3, [r7, #0]
 80154d0:	f04f 32ff 	mov.w	r2, #4294967295
 80154d4:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 80154d6:	683b      	ldr	r3, [r7, #0]
 80154d8:	2200      	movs	r2, #0
 80154da:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 80154dc:	683b      	ldr	r3, [r7, #0]
 80154de:	f04f 32ff 	mov.w	r2, #4294967295
 80154e2:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 80154e4:	683b      	ldr	r3, [r7, #0]
 80154e6:	f04f 32ff 	mov.w	r2, #4294967295
 80154ea:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 80154ec:	683b      	ldr	r3, [r7, #0]
 80154ee:	2200      	movs	r2, #0
 80154f0:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 80154f2:	683b      	ldr	r3, [r7, #0]
 80154f4:	2200      	movs	r2, #0
 80154f6:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 80154f8:	2300      	movs	r3, #0
}
 80154fa:	4618      	mov	r0, r3
 80154fc:	3718      	adds	r7, #24
 80154fe:	46bd      	mov	sp, r7
 8015500:	bd80      	pop	{r7, pc}

08015502 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8015502:	b580      	push	{r7, lr}
 8015504:	b092      	sub	sp, #72	; 0x48
 8015506:	af04      	add	r7, sp, #16
 8015508:	60f8      	str	r0, [r7, #12]
 801550a:	60b9      	str	r1, [r7, #8]
 801550c:	607a      	str	r2, [r7, #4]
 801550e:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8015510:	f107 0310 	add.w	r3, r7, #16
 8015514:	4619      	mov	r1, r3
 8015516:	68f8      	ldr	r0, [r7, #12]
 8015518:	f7ff ff7a 	bl	8015410 <lfs_dir_alloc>
 801551c:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 801551e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015520:	2b00      	cmp	r3, #0
 8015522:	d001      	beq.n	8015528 <lfs_dir_split+0x26>
        return err;
 8015524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015526:	e03c      	b.n	80155a2 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8015528:	68bb      	ldr	r3, [r7, #8]
 801552a:	7ddb      	ldrb	r3, [r3, #23]
 801552c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 8015530:	68bb      	ldr	r3, [r7, #8]
 8015532:	699b      	ldr	r3, [r3, #24]
 8015534:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 8015536:	68bb      	ldr	r3, [r7, #8]
 8015538:	69db      	ldr	r3, [r3, #28]
 801553a:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 801553c:	f107 0110 	add.w	r1, r7, #16
 8015540:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8015544:	9302      	str	r3, [sp, #8]
 8015546:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801554a:	9301      	str	r3, [sp, #4]
 801554c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801554e:	9300      	str	r3, [sp, #0]
 8015550:	683b      	ldr	r3, [r7, #0]
 8015552:	687a      	ldr	r2, [r7, #4]
 8015554:	68f8      	ldr	r0, [r7, #12]
 8015556:	f000 f879 	bl	801564c <lfs_dir_compact>
 801555a:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 801555c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801555e:	2b00      	cmp	r3, #0
 8015560:	da01      	bge.n	8015566 <lfs_dir_split+0x64>
        return res;
 8015562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015564:	e01d      	b.n	80155a2 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 8015566:	693a      	ldr	r2, [r7, #16]
 8015568:	68bb      	ldr	r3, [r7, #8]
 801556a:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 801556c:	697a      	ldr	r2, [r7, #20]
 801556e:	68bb      	ldr	r3, [r7, #8]
 8015570:	61da      	str	r2, [r3, #28]
    dir->split = true;
 8015572:	68bb      	ldr	r3, [r7, #8]
 8015574:	2201      	movs	r2, #1
 8015576:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8015578:	68ba      	ldr	r2, [r7, #8]
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	3320      	adds	r3, #32
 801557e:	4619      	mov	r1, r3
 8015580:	4610      	mov	r0, r2
 8015582:	f7fd fdd7 	bl	8013134 <lfs_pair_cmp>
 8015586:	4603      	mov	r3, r0
 8015588:	2b00      	cmp	r3, #0
 801558a:	d109      	bne.n	80155a0 <lfs_dir_split+0x9e>
 801558c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015590:	2b00      	cmp	r3, #0
 8015592:	d105      	bne.n	80155a0 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8015594:	693a      	ldr	r2, [r7, #16]
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 801559a:	697a      	ldr	r2, [r7, #20]
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 80155a0:	2300      	movs	r3, #0
}
 80155a2:	4618      	mov	r0, r3
 80155a4:	3738      	adds	r7, #56	; 0x38
 80155a6:	46bd      	mov	sp, r7
 80155a8:	bd80      	pop	{r7, pc}

080155aa <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 80155aa:	b580      	push	{r7, lr}
 80155ac:	b086      	sub	sp, #24
 80155ae:	af00      	add	r7, sp, #0
 80155b0:	60f8      	str	r0, [r7, #12]
 80155b2:	60b9      	str	r1, [r7, #8]
 80155b4:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 80155ba:	68b8      	ldr	r0, [r7, #8]
 80155bc:	f7fd febd 	bl	801333a <lfs_tag_dsize>
 80155c0:	4602      	mov	r2, r0
 80155c2:	697b      	ldr	r3, [r7, #20]
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	441a      	add	r2, r3
 80155c8:	697b      	ldr	r3, [r7, #20]
 80155ca:	601a      	str	r2, [r3, #0]
    return 0;
 80155cc:	2300      	movs	r3, #0
}
 80155ce:	4618      	mov	r0, r3
 80155d0:	3718      	adds	r7, #24
 80155d2:	46bd      	mov	sp, r7
 80155d4:	bd80      	pop	{r7, pc}

080155d6 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 80155d6:	b580      	push	{r7, lr}
 80155d8:	b086      	sub	sp, #24
 80155da:	af00      	add	r7, sp, #0
 80155dc:	60f8      	str	r0, [r7, #12]
 80155de:	60b9      	str	r1, [r7, #8]
 80155e0:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 80155e6:	697b      	ldr	r3, [r7, #20]
 80155e8:	6818      	ldr	r0, [r3, #0]
 80155ea:	697b      	ldr	r3, [r7, #20]
 80155ec:	6859      	ldr	r1, [r3, #4]
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	68ba      	ldr	r2, [r7, #8]
 80155f2:	f7ff fd51 	bl	8015098 <lfs_dir_commitattr>
 80155f6:	4603      	mov	r3, r0
}
 80155f8:	4618      	mov	r0, r3
 80155fa:	3718      	adds	r7, #24
 80155fc:	46bd      	mov	sp, r7
 80155fe:	bd80      	pop	{r7, pc}

08015600 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8015600:	b480      	push	{r7}
 8015602:	b083      	sub	sp, #12
 8015604:	af00      	add	r7, sp, #0
 8015606:	6078      	str	r0, [r7, #4]
 8015608:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8015610:	2b00      	cmp	r3, #0
 8015612:	dd11      	ble.n	8015638 <lfs_dir_needsrelocation+0x38>
 8015614:	683b      	ldr	r3, [r7, #0]
 8015616:	689b      	ldr	r3, [r3, #8]
 8015618:	3301      	adds	r3, #1
 801561a:	687a      	ldr	r2, [r7, #4]
 801561c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801561e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8015620:	3201      	adds	r2, #1
 8015622:	f042 0201 	orr.w	r2, r2, #1
 8015626:	fbb3 f1f2 	udiv	r1, r3, r2
 801562a:	fb01 f202 	mul.w	r2, r1, r2
 801562e:	1a9b      	subs	r3, r3, r2
 8015630:	2b00      	cmp	r3, #0
 8015632:	d101      	bne.n	8015638 <lfs_dir_needsrelocation+0x38>
 8015634:	2301      	movs	r3, #1
 8015636:	e000      	b.n	801563a <lfs_dir_needsrelocation+0x3a>
 8015638:	2300      	movs	r3, #0
 801563a:	f003 0301 	and.w	r3, r3, #1
 801563e:	b2db      	uxtb	r3, r3
}
 8015640:	4618      	mov	r0, r3
 8015642:	370c      	adds	r7, #12
 8015644:	46bd      	mov	sp, r7
 8015646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801564a:	4770      	bx	lr

0801564c <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801564c:	b580      	push	{r7, lr}
 801564e:	b0a4      	sub	sp, #144	; 0x90
 8015650:	af0a      	add	r7, sp, #40	; 0x28
 8015652:	60f8      	str	r0, [r7, #12]
 8015654:	60b9      	str	r1, [r7, #8]
 8015656:	607a      	str	r2, [r7, #4]
 8015658:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 801565a:	2300      	movs	r3, #0
 801565c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 8015660:	68b9      	ldr	r1, [r7, #8]
 8015662:	68f8      	ldr	r0, [r7, #12]
 8015664:	f7ff ffcc 	bl	8015600 <lfs_dir_needsrelocation>
 8015668:	4603      	mov	r3, r0
 801566a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 801566e:	68bb      	ldr	r3, [r7, #8]
 8015670:	689b      	ldr	r3, [r3, #8]
 8015672:	1c5a      	adds	r2, r3, #1
 8015674:	68bb      	ldr	r3, [r7, #8]
 8015676:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8015678:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 801567c:	2b00      	cmp	r3, #0
 801567e:	d00e      	beq.n	801569e <lfs_dir_compact+0x52>
 8015680:	68bb      	ldr	r3, [r7, #8]
 8015682:	2200      	movs	r2, #0
 8015684:	657a      	str	r2, [r7, #84]	; 0x54
 8015686:	2201      	movs	r2, #1
 8015688:	65ba      	str	r2, [r7, #88]	; 0x58
 801568a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801568e:	4611      	mov	r1, r2
 8015690:	4618      	mov	r0, r3
 8015692:	f7fd fd4f 	bl	8013134 <lfs_pair_cmp>
 8015696:	4603      	mov	r3, r0
 8015698:	2b00      	cmp	r3, #0
 801569a:	f040 8155 	bne.w	8015948 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 801569e:	68bb      	ldr	r3, [r7, #8]
 80156a0:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 80156a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80156a4:	2300      	movs	r3, #0
 80156a6:	643b      	str	r3, [r7, #64]	; 0x40
 80156a8:	f04f 33ff 	mov.w	r3, #4294967295
 80156ac:	647b      	str	r3, [r7, #68]	; 0x44
 80156ae:	f04f 33ff 	mov.w	r3, #4294967295
 80156b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80156b4:	2300      	movs	r3, #0
 80156b6:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80156bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d004      	beq.n	80156cc <lfs_dir_compact+0x80>
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80156c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80156c8:	3b08      	subs	r3, #8
 80156ca:	e003      	b.n	80156d4 <lfs_dir_compact+0x88>
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80156d0:	69db      	ldr	r3, [r3, #28]
 80156d2:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 80156d4:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 80156d6:	68bb      	ldr	r3, [r7, #8]
 80156d8:	685b      	ldr	r3, [r3, #4]
 80156da:	4619      	mov	r1, r3
 80156dc:	68f8      	ldr	r0, [r7, #12]
 80156de:	f7fd fcc7 	bl	8013070 <lfs_bd_erase>
 80156e2:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 80156e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d006      	beq.n	80156f8 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 80156ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80156ec:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80156f0:	f000 812c 	beq.w	801594c <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 80156f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80156f6:	e188      	b.n	8015a0a <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 80156f8:	68bb      	ldr	r3, [r7, #8]
 80156fa:	689b      	ldr	r3, [r3, #8]
 80156fc:	4618      	mov	r0, r3
 80156fe:	f7fd f964 	bl	80129ca <lfs_tole32>
 8015702:	4602      	mov	r2, r0
 8015704:	68bb      	ldr	r3, [r7, #8]
 8015706:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8015708:	68bb      	ldr	r3, [r7, #8]
 801570a:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 801570e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8015712:	2304      	movs	r3, #4
 8015714:	68f8      	ldr	r0, [r7, #12]
 8015716:	f7ff fc89 	bl	801502c <lfs_dir_commitprog>
 801571a:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 801571c:	68bb      	ldr	r3, [r7, #8]
 801571e:	689b      	ldr	r3, [r3, #8]
 8015720:	4618      	mov	r0, r3
 8015722:	f7fd f947 	bl	80129b4 <lfs_fromle32>
 8015726:	4602      	mov	r2, r0
 8015728:	68bb      	ldr	r3, [r7, #8]
 801572a:	609a      	str	r2, [r3, #8]
            if (err) {
 801572c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801572e:	2b00      	cmp	r3, #0
 8015730:	d006      	beq.n	8015740 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 8015732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015734:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8015738:	f000 810a 	beq.w	8015950 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 801573c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801573e:	e164      	b.n	8015a0a <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8015740:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8015744:	425b      	negs	r3, r3
 8015746:	b29b      	uxth	r3, r3
 8015748:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801574a:	68fa      	ldr	r2, [r7, #12]
 801574c:	637a      	str	r2, [r7, #52]	; 0x34
 801574e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8015752:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 8015754:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8015758:	9208      	str	r2, [sp, #32]
 801575a:	4aae      	ldr	r2, [pc, #696]	; (8015a14 <lfs_dir_compact+0x3c8>)
 801575c:	9207      	str	r2, [sp, #28]
 801575e:	9306      	str	r3, [sp, #24]
 8015760:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8015764:	9305      	str	r3, [sp, #20]
 8015766:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 801576a:	9304      	str	r3, [sp, #16]
 801576c:	2300      	movs	r3, #0
 801576e:	9303      	str	r3, [sp, #12]
 8015770:	4ba9      	ldr	r3, [pc, #676]	; (8015a18 <lfs_dir_compact+0x3cc>)
 8015772:	9302      	str	r3, [sp, #8]
 8015774:	683b      	ldr	r3, [r7, #0]
 8015776:	9301      	str	r3, [sp, #4]
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	9300      	str	r3, [sp, #0]
 801577c:	f04f 33ff 	mov.w	r3, #4294967295
 8015780:	2200      	movs	r2, #0
 8015782:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8015784:	68f8      	ldr	r0, [r7, #12]
 8015786:	f7fe faf7 	bl	8013d78 <lfs_dir_traverse>
 801578a:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 801578c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801578e:	2b00      	cmp	r3, #0
 8015790:	d006      	beq.n	80157a0 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 8015792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015794:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8015798:	f000 80dc 	beq.w	8015954 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 801579c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801579e:	e134      	b.n	8015a0a <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 80157a0:	68bb      	ldr	r3, [r7, #8]
 80157a2:	3318      	adds	r3, #24
 80157a4:	4618      	mov	r0, r3
 80157a6:	f7fd fcaa 	bl	80130fe <lfs_pair_isnull>
 80157aa:	4603      	mov	r3, r0
 80157ac:	f083 0301 	eor.w	r3, r3, #1
 80157b0:	b2db      	uxtb	r3, r3
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d022      	beq.n	80157fc <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 80157b6:	68bb      	ldr	r3, [r7, #8]
 80157b8:	3318      	adds	r3, #24
 80157ba:	4618      	mov	r0, r3
 80157bc:	f7fd fd2b 	bl	8013216 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 80157c0:	68bb      	ldr	r3, [r7, #8]
 80157c2:	7ddb      	ldrb	r3, [r3, #23]
 80157c4:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80157c8:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 80157ca:	4a94      	ldr	r2, [pc, #592]	; (8015a1c <lfs_dir_compact+0x3d0>)
 80157cc:	431a      	orrs	r2, r3
                        dir->tail);
 80157ce:	68bb      	ldr	r3, [r7, #8]
 80157d0:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 80157d2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80157d6:	68f8      	ldr	r0, [r7, #12]
 80157d8:	f7ff fc5e 	bl	8015098 <lfs_dir_commitattr>
 80157dc:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 80157de:	68bb      	ldr	r3, [r7, #8]
 80157e0:	3318      	adds	r3, #24
 80157e2:	4618      	mov	r0, r3
 80157e4:	f7fd fcfd 	bl	80131e2 <lfs_pair_fromle32>
                if (err) {
 80157e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d006      	beq.n	80157fc <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 80157ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80157f0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80157f4:	f000 80b0 	beq.w	8015958 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 80157f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80157fa:	e106      	b.n	8015a0a <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 80157fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015800:	2200      	movs	r2, #0
 8015802:	601a      	str	r2, [r3, #0]
 8015804:	605a      	str	r2, [r3, #4]
 8015806:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8015808:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801580c:	f083 0301 	eor.w	r3, r3, #1
 8015810:	b2db      	uxtb	r3, r3
 8015812:	2b00      	cmp	r3, #0
 8015814:	d011      	beq.n	801583a <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 801581c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015820:	4611      	mov	r1, r2
 8015822:	4618      	mov	r0, r3
 8015824:	f7fd fd9d 	bl	8013362 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801582e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015832:	4611      	mov	r1, r2
 8015834:	4618      	mov	r0, r3
 8015836:	f7fd fd94 	bl	8013362 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 801583a:	68fb      	ldr	r3, [r7, #12]
 801583c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8015840:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015844:	4611      	mov	r1, r2
 8015846:	4618      	mov	r0, r3
 8015848:	f7fd fd8b 	bl	8013362 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801584c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801584e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8015852:	f023 0303 	bic.w	r3, r3, #3
 8015856:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8015858:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801585c:	461a      	mov	r2, r3
 801585e:	68b9      	ldr	r1, [r7, #8]
 8015860:	68f8      	ldr	r0, [r7, #12]
 8015862:	f7ff f9f3 	bl	8014c4c <lfs_dir_getgstate>
 8015866:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8015868:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801586a:	2b00      	cmp	r3, #0
 801586c:	d001      	beq.n	8015872 <lfs_dir_compact+0x226>
                return err;
 801586e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015870:	e0cb      	b.n	8015a0a <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8015872:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015876:	4618      	mov	r0, r3
 8015878:	f7fd fd98 	bl	80133ac <lfs_gstate_iszero>
 801587c:	4603      	mov	r3, r0
 801587e:	f083 0301 	eor.w	r3, r3, #1
 8015882:	b2db      	uxtb	r3, r3
 8015884:	2b00      	cmp	r3, #0
 8015886:	d016      	beq.n	80158b6 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8015888:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801588c:	4618      	mov	r0, r3
 801588e:	f7fd fe1f 	bl	80134d0 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8015892:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015896:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 801589a:	4a61      	ldr	r2, [pc, #388]	; (8015a20 <lfs_dir_compact+0x3d4>)
 801589c:	68f8      	ldr	r0, [r7, #12]
 801589e:	f7ff fbfb 	bl	8015098 <lfs_dir_commitattr>
 80158a2:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 80158a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d005      	beq.n	80158b6 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 80158aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80158ac:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80158b0:	d054      	beq.n	801595c <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 80158b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80158b4:	e0a9      	b.n	8015a0a <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 80158b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80158ba:	4619      	mov	r1, r3
 80158bc:	68f8      	ldr	r0, [r7, #12]
 80158be:	f7ff fc6b 	bl	8015198 <lfs_dir_commitcrc>
 80158c2:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 80158c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d005      	beq.n	80158d6 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 80158ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80158cc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80158d0:	d046      	beq.n	8015960 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 80158d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80158d4:	e099      	b.n	8015a0a <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80158d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80158d8:	68fa      	ldr	r2, [r7, #12]
 80158da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80158dc:	6992      	ldr	r2, [r2, #24]
 80158de:	fbb3 f1f2 	udiv	r1, r3, r2
 80158e2:	fb01 f202 	mul.w	r2, r1, r2
 80158e6:	1a9b      	subs	r3, r3, r2
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d006      	beq.n	80158fa <lfs_dir_compact+0x2ae>
 80158ec:	4b4d      	ldr	r3, [pc, #308]	; (8015a24 <lfs_dir_compact+0x3d8>)
 80158ee:	4a4e      	ldr	r2, [pc, #312]	; (8015a28 <lfs_dir_compact+0x3dc>)
 80158f0:	f44f 61e9 	mov.w	r1, #1864	; 0x748
 80158f4:	484d      	ldr	r0, [pc, #308]	; (8015a2c <lfs_dir_compact+0x3e0>)
 80158f6:	f005 f96b 	bl	801abd0 <__assert_func>
            lfs_pair_swap(dir->pair);
 80158fa:	68bb      	ldr	r3, [r7, #8]
 80158fc:	4618      	mov	r0, r3
 80158fe:	f7fd fbe9 	bl	80130d4 <lfs_pair_swap>
            dir->count = end - begin;
 8015902:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8015906:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 801590a:	1ad3      	subs	r3, r2, r3
 801590c:	b29a      	uxth	r2, r3
 801590e:	68bb      	ldr	r3, [r7, #8]
 8015910:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8015912:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015914:	68bb      	ldr	r3, [r7, #8]
 8015916:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8015918:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801591a:	68bb      	ldr	r3, [r7, #8]
 801591c:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	3348      	adds	r3, #72	; 0x48
 8015922:	2200      	movs	r2, #0
 8015924:	601a      	str	r2, [r3, #0]
 8015926:	605a      	str	r2, [r3, #4]
 8015928:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 801592a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801592e:	f083 0301 	eor.w	r3, r3, #1
 8015932:	b2db      	uxtb	r3, r3
 8015934:	2b00      	cmp	r3, #0
 8015936:	d065      	beq.n	8015a04 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	68fa      	ldr	r2, [r7, #12]
 801593c:	333c      	adds	r3, #60	; 0x3c
 801593e:	3230      	adds	r2, #48	; 0x30
 8015940:	ca07      	ldmia	r2, {r0, r1, r2}
 8015942:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8015946:	e05d      	b.n	8015a04 <lfs_dir_compact+0x3b8>
        goto relocate;
 8015948:	bf00      	nop
 801594a:	e00a      	b.n	8015962 <lfs_dir_compact+0x316>
                    goto relocate;
 801594c:	bf00      	nop
 801594e:	e008      	b.n	8015962 <lfs_dir_compact+0x316>
                    goto relocate;
 8015950:	bf00      	nop
 8015952:	e006      	b.n	8015962 <lfs_dir_compact+0x316>
                    goto relocate;
 8015954:	bf00      	nop
 8015956:	e004      	b.n	8015962 <lfs_dir_compact+0x316>
                        goto relocate;
 8015958:	bf00      	nop
 801595a:	e002      	b.n	8015962 <lfs_dir_compact+0x316>
                        goto relocate;
 801595c:	bf00      	nop
 801595e:	e000      	b.n	8015962 <lfs_dir_compact+0x316>
                    goto relocate;
 8015960:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8015962:	2301      	movs	r3, #1
 8015964:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	3310      	adds	r3, #16
 801596c:	4619      	mov	r1, r3
 801596e:	68f8      	ldr	r0, [r7, #12]
 8015970:	f7fd f866 	bl	8012a40 <lfs_cache_drop>
        if (!tired) {
 8015974:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8015978:	f083 0301 	eor.w	r3, r3, #1
 801597c:	b2db      	uxtb	r3, r3
 801597e:	2b00      	cmp	r3, #0
 8015980:	d009      	beq.n	8015996 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8015982:	68bb      	ldr	r3, [r7, #8]
 8015984:	685b      	ldr	r3, [r3, #4]
 8015986:	4a2a      	ldr	r2, [pc, #168]	; (8015a30 <lfs_dir_compact+0x3e4>)
 8015988:	9200      	str	r2, [sp, #0]
 801598a:	f240 725a 	movw	r2, #1882	; 0x75a
 801598e:	4927      	ldr	r1, [pc, #156]	; (8015a2c <lfs_dir_compact+0x3e0>)
 8015990:	4828      	ldr	r0, [pc, #160]	; (8015a34 <lfs_dir_compact+0x3e8>)
 8015992:	f006 f957 	bl	801bc44 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8015996:	68bb      	ldr	r3, [r7, #8]
 8015998:	2200      	movs	r2, #0
 801599a:	617a      	str	r2, [r7, #20]
 801599c:	2201      	movs	r2, #1
 801599e:	61ba      	str	r2, [r7, #24]
 80159a0:	f107 0214 	add.w	r2, r7, #20
 80159a4:	4611      	mov	r1, r2
 80159a6:	4618      	mov	r0, r3
 80159a8:	f7fd fbc4 	bl	8013134 <lfs_pair_cmp>
 80159ac:	4603      	mov	r3, r0
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d10c      	bne.n	80159cc <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 80159b2:	68bb      	ldr	r3, [r7, #8]
 80159b4:	685b      	ldr	r3, [r3, #4]
 80159b6:	4a1e      	ldr	r2, [pc, #120]	; (8015a30 <lfs_dir_compact+0x3e4>)
 80159b8:	9200      	str	r2, [sp, #0]
 80159ba:	f240 725f 	movw	r2, #1887	; 0x75f
 80159be:	491b      	ldr	r1, [pc, #108]	; (8015a2c <lfs_dir_compact+0x3e0>)
 80159c0:	481d      	ldr	r0, [pc, #116]	; (8015a38 <lfs_dir_compact+0x3ec>)
 80159c2:	f006 f93f 	bl	801bc44 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 80159c6:	f06f 031b 	mvn.w	r3, #27
 80159ca:	e01e      	b.n	8015a0a <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 80159cc:	68bb      	ldr	r3, [r7, #8]
 80159ce:	3304      	adds	r3, #4
 80159d0:	4619      	mov	r1, r3
 80159d2:	68f8      	ldr	r0, [r7, #12]
 80159d4:	f7fd fee4 	bl	80137a0 <lfs_alloc>
 80159d8:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 80159da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d00c      	beq.n	80159fa <lfs_dir_compact+0x3ae>
 80159e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80159e2:	f113 0f1c 	cmn.w	r3, #28
 80159e6:	d106      	bne.n	80159f6 <lfs_dir_compact+0x3aa>
 80159e8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80159ec:	f083 0301 	eor.w	r3, r3, #1
 80159f0:	b2db      	uxtb	r3, r3
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d001      	beq.n	80159fa <lfs_dir_compact+0x3ae>
            return err;
 80159f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80159f8:	e007      	b.n	8015a0a <lfs_dir_compact+0x3be>
        }

        tired = false;
 80159fa:	2300      	movs	r3, #0
 80159fc:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
        continue;
 8015a00:	bf00      	nop
    while (true) {
 8015a02:	e64c      	b.n	801569e <lfs_dir_compact+0x52>
        break;
 8015a04:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8015a06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	3768      	adds	r7, #104	; 0x68
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	bd80      	pop	{r7, pc}
 8015a12:	bf00      	nop
 8015a14:	080155d7 	.word	0x080155d7
 8015a18:	400ffc00 	.word	0x400ffc00
 8015a1c:	000ffc08 	.word	0x000ffc08
 8015a20:	7ffffc0c 	.word	0x7ffffc0c
 8015a24:	08021ae0 	.word	0x08021ae0
 8015a28:	08022bf4 	.word	0x08022bf4
 8015a2c:	08021974 	.word	0x08021974
 8015a30:	08021a88 	.word	0x08021a88
 8015a34:	08021b08 	.word	0x08021b08
 8015a38:	08021b2c 	.word	0x08021b2c

08015a3c <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8015a3c:	b590      	push	{r4, r7, lr}
 8015a3e:	b097      	sub	sp, #92	; 0x5c
 8015a40:	af0a      	add	r7, sp, #40	; 0x28
 8015a42:	60f8      	str	r0, [r7, #12]
 8015a44:	60b9      	str	r1, [r7, #8]
 8015a46:	607a      	str	r2, [r7, #4]
 8015a48:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8015a4a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8015a50:	e058      	b.n	8015b04 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8015a52:	2300      	movs	r3, #0
 8015a54:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8015a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a58:	b29b      	uxth	r3, r3
 8015a5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a5c:	b292      	uxth	r2, r2
 8015a5e:	4252      	negs	r2, r2
 8015a60:	b292      	uxth	r2, r2
 8015a62:	b212      	sxth	r2, r2
 8015a64:	f107 0118 	add.w	r1, r7, #24
 8015a68:	9108      	str	r1, [sp, #32]
 8015a6a:	4979      	ldr	r1, [pc, #484]	; (8015c50 <lfs_dir_splittingcompact+0x214>)
 8015a6c:	9107      	str	r1, [sp, #28]
 8015a6e:	9206      	str	r2, [sp, #24]
 8015a70:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8015a74:	9205      	str	r2, [sp, #20]
 8015a76:	9304      	str	r3, [sp, #16]
 8015a78:	2300      	movs	r3, #0
 8015a7a:	9303      	str	r3, [sp, #12]
 8015a7c:	4b75      	ldr	r3, [pc, #468]	; (8015c54 <lfs_dir_splittingcompact+0x218>)
 8015a7e:	9302      	str	r3, [sp, #8]
 8015a80:	683b      	ldr	r3, [r7, #0]
 8015a82:	9301      	str	r3, [sp, #4]
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	9300      	str	r3, [sp, #0]
 8015a88:	f04f 33ff 	mov.w	r3, #4294967295
 8015a8c:	2200      	movs	r2, #0
 8015a8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015a90:	68f8      	ldr	r0, [r7, #12]
 8015a92:	f7fe f971 	bl	8013d78 <lfs_dir_traverse>
 8015a96:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8015a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d001      	beq.n	8015aa2 <lfs_dir_splittingcompact+0x66>
                return err;
 8015a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015aa0:	e0d1      	b.n	8015c46 <lfs_dir_splittingcompact+0x20a>
            }

            // space is complicated, we need room for tail, crc, gstate,
            // cleanup delete, and we cap at half a block to give room
            // for metadata updates.
            if (end - split < 0xff
 8015aa2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8015aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aa8:	1ad3      	subs	r3, r2, r3
 8015aaa:	2bfe      	cmp	r3, #254	; 0xfe
 8015aac:	d822      	bhi.n	8015af4 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015ab2:	69db      	ldr	r3, [r3, #28]
 8015ab4:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d004      	beq.n	8015acc <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015ac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8015ac8:	085b      	lsrs	r3, r3, #1
 8015aca:	e003      	b.n	8015ad4 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8015acc:	68fb      	ldr	r3, [r7, #12]
 8015ace:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015ad0:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8015ad2:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8015ad4:	68fa      	ldr	r2, [r7, #12]
 8015ad6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8015ad8:	6992      	ldr	r2, [r2, #24]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8015ada:	4611      	mov	r1, r2
 8015adc:	4618      	mov	r0, r3
 8015ade:	f7fc ff1e 	bl	801291e <lfs_alignup>
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	4619      	mov	r1, r3
 8015ae6:	4620      	mov	r0, r4
 8015ae8:	f7fc fef4 	bl	80128d4 <lfs_min>
 8015aec:	4602      	mov	r2, r0
 8015aee:	69bb      	ldr	r3, [r7, #24]
 8015af0:	429a      	cmp	r2, r3
 8015af2:	d20e      	bcs.n	8015b12 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8015af4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8015af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015afa:	1ad3      	subs	r3, r2, r3
 8015afc:	085b      	lsrs	r3, r3, #1
 8015afe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015b00:	4413      	add	r3, r2
 8015b02:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8015b04:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8015b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b0a:	1ad3      	subs	r3, r2, r3
 8015b0c:	2b01      	cmp	r3, #1
 8015b0e:	d8a0      	bhi.n	8015a52 <lfs_dir_splittingcompact+0x16>
 8015b10:	e000      	b.n	8015b14 <lfs_dir_splittingcompact+0xd8>
                break;
 8015b12:	bf00      	nop
        }

        if (split == begin) {
 8015b14:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015b18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015b1a:	429a      	cmp	r2, r3
 8015b1c:	d02d      	beq.n	8015b7a <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8015b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b20:	b29b      	uxth	r3, r3
 8015b22:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8015b26:	9202      	str	r2, [sp, #8]
 8015b28:	9301      	str	r3, [sp, #4]
 8015b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b2c:	9300      	str	r3, [sp, #0]
 8015b2e:	683b      	ldr	r3, [r7, #0]
 8015b30:	687a      	ldr	r2, [r7, #4]
 8015b32:	68b9      	ldr	r1, [r7, #8]
 8015b34:	68f8      	ldr	r0, [r7, #12]
 8015b36:	f7ff fce4 	bl	8015502 <lfs_dir_split>
 8015b3a:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8015b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d005      	beq.n	8015b4e <lfs_dir_splittingcompact+0x112>
 8015b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b44:	f113 0f1c 	cmn.w	r3, #28
 8015b48:	d001      	beq.n	8015b4e <lfs_dir_splittingcompact+0x112>
            return err;
 8015b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b4c:	e07b      	b.n	8015c46 <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 8015b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d00e      	beq.n	8015b72 <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8015b54:	68bb      	ldr	r3, [r7, #8]
 8015b56:	681a      	ldr	r2, [r3, #0]
 8015b58:	68bb      	ldr	r3, [r7, #8]
 8015b5a:	685b      	ldr	r3, [r3, #4]
 8015b5c:	493e      	ldr	r1, [pc, #248]	; (8015c58 <lfs_dir_splittingcompact+0x21c>)
 8015b5e:	9101      	str	r1, [sp, #4]
 8015b60:	9300      	str	r3, [sp, #0]
 8015b62:	4613      	mov	r3, r2
 8015b64:	f240 72a9 	movw	r2, #1961	; 0x7a9
 8015b68:	493c      	ldr	r1, [pc, #240]	; (8015c5c <lfs_dir_splittingcompact+0x220>)
 8015b6a:	483d      	ldr	r0, [pc, #244]	; (8015c60 <lfs_dir_splittingcompact+0x224>)
 8015b6c:	f006 f86a 	bl	801bc44 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8015b70:	e004      	b.n	8015b7c <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8015b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b74:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 8015b78:	e767      	b.n	8015a4a <lfs_dir_splittingcompact+0xe>
            break;
 8015b7a:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8015b7c:	68b9      	ldr	r1, [r7, #8]
 8015b7e:	68f8      	ldr	r0, [r7, #12]
 8015b80:	f7ff fd3e 	bl	8015600 <lfs_dir_needsrelocation>
 8015b84:	4603      	mov	r3, r0
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d04e      	beq.n	8015c28 <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8015b8a:	68bb      	ldr	r3, [r7, #8]
 8015b8c:	2200      	movs	r2, #0
 8015b8e:	613a      	str	r2, [r7, #16]
 8015b90:	2201      	movs	r2, #1
 8015b92:	617a      	str	r2, [r7, #20]
 8015b94:	f107 0210 	add.w	r2, r7, #16
 8015b98:	4611      	mov	r1, r2
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	f7fd faca 	bl	8013134 <lfs_pair_cmp>
 8015ba0:	4603      	mov	r3, r0
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d140      	bne.n	8015c28 <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 8015ba6:	68f8      	ldr	r0, [r7, #12]
 8015ba8:	f003 fa54 	bl	8019054 <lfs_fs_rawsize>
 8015bac:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8015bae:	6a3b      	ldr	r3, [r7, #32]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	da01      	bge.n	8015bb8 <lfs_dir_splittingcompact+0x17c>
            return size;
 8015bb4:	6a3b      	ldr	r3, [r7, #32]
 8015bb6:	e046      	b.n	8015c46 <lfs_dir_splittingcompact+0x20a>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015bbc:	6a1b      	ldr	r3, [r3, #32]
 8015bbe:	085a      	lsrs	r2, r3, #1
 8015bc0:	6a3b      	ldr	r3, [r7, #32]
 8015bc2:	429a      	cmp	r2, r3
 8015bc4:	d930      	bls.n	8015c28 <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8015bc6:	68bb      	ldr	r3, [r7, #8]
 8015bc8:	689b      	ldr	r3, [r3, #8]
 8015bca:	4a23      	ldr	r2, [pc, #140]	; (8015c58 <lfs_dir_splittingcompact+0x21c>)
 8015bcc:	9200      	str	r2, [sp, #0]
 8015bce:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8015bd2:	4922      	ldr	r1, [pc, #136]	; (8015c5c <lfs_dir_splittingcompact+0x220>)
 8015bd4:	4823      	ldr	r0, [pc, #140]	; (8015c64 <lfs_dir_splittingcompact+0x228>)
 8015bd6:	f006 f835 	bl	801bc44 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8015bda:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8015bde:	9302      	str	r3, [sp, #8]
 8015be0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015be4:	9301      	str	r3, [sp, #4]
 8015be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015be8:	9300      	str	r3, [sp, #0]
 8015bea:	683b      	ldr	r3, [r7, #0]
 8015bec:	687a      	ldr	r2, [r7, #4]
 8015bee:	68b9      	ldr	r1, [r7, #8]
 8015bf0:	68f8      	ldr	r0, [r7, #12]
 8015bf2:	f7ff fc86 	bl	8015502 <lfs_dir_split>
 8015bf6:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8015bf8:	69fb      	ldr	r3, [r7, #28]
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d005      	beq.n	8015c0a <lfs_dir_splittingcompact+0x1ce>
 8015bfe:	69fb      	ldr	r3, [r7, #28]
 8015c00:	f113 0f1c 	cmn.w	r3, #28
 8015c04:	d001      	beq.n	8015c0a <lfs_dir_splittingcompact+0x1ce>
                return err;
 8015c06:	69fb      	ldr	r3, [r7, #28]
 8015c08:	e01d      	b.n	8015c46 <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 8015c0a:	69fb      	ldr	r3, [r7, #28]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d007      	beq.n	8015c20 <lfs_dir_splittingcompact+0x1e4>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8015c10:	4b11      	ldr	r3, [pc, #68]	; (8015c58 <lfs_dir_splittingcompact+0x21c>)
 8015c12:	f240 72c7 	movw	r2, #1991	; 0x7c7
 8015c16:	4911      	ldr	r1, [pc, #68]	; (8015c5c <lfs_dir_splittingcompact+0x220>)
 8015c18:	4813      	ldr	r0, [pc, #76]	; (8015c68 <lfs_dir_splittingcompact+0x22c>)
 8015c1a:	f006 f813 	bl	801bc44 <iprintf>
 8015c1e:	e003      	b.n	8015c28 <lfs_dir_splittingcompact+0x1ec>
            } else {
                end = begin;
 8015c20:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015c24:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8015c28:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8015c2c:	9302      	str	r3, [sp, #8]
 8015c2e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015c32:	9301      	str	r3, [sp, #4]
 8015c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c36:	9300      	str	r3, [sp, #0]
 8015c38:	683b      	ldr	r3, [r7, #0]
 8015c3a:	687a      	ldr	r2, [r7, #4]
 8015c3c:	68b9      	ldr	r1, [r7, #8]
 8015c3e:	68f8      	ldr	r0, [r7, #12]
 8015c40:	f7ff fd04 	bl	801564c <lfs_dir_compact>
 8015c44:	4603      	mov	r3, r0
}
 8015c46:	4618      	mov	r0, r3
 8015c48:	3734      	adds	r7, #52	; 0x34
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	bd90      	pop	{r4, r7, pc}
 8015c4e:	bf00      	nop
 8015c50:	080155ab 	.word	0x080155ab
 8015c54:	400ffc00 	.word	0x400ffc00
 8015c58:	08021a88 	.word	0x08021a88
 8015c5c:	08021974 	.word	0x08021974
 8015c60:	08021b64 	.word	0x08021b64
 8015c64:	08021b94 	.word	0x08021b94
 8015c68:	08021bc4 	.word	0x08021bc4

08015c6c <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8015c6c:	b5b0      	push	{r4, r5, r7, lr}
 8015c6e:	b0a6      	sub	sp, #152	; 0x98
 8015c70:	af0a      	add	r7, sp, #40	; 0x28
 8015c72:	60f8      	str	r0, [r7, #12]
 8015c74:	60b9      	str	r1, [r7, #8]
 8015c76:	607a      	str	r2, [r7, #4]
 8015c78:	603b      	str	r3, [r7, #0]
    int state = 0;
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8015c7e:	2300      	movs	r3, #0
 8015c80:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 8015c84:	2300      	movs	r3, #0
 8015c86:	667b      	str	r3, [r7, #100]	; 0x64
 8015c88:	e06d      	b.n	8015d66 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8015c8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015c8c:	00db      	lsls	r3, r3, #3
 8015c8e:	683a      	ldr	r2, [r7, #0]
 8015c90:	4413      	add	r3, r2
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	4618      	mov	r0, r3
 8015c96:	f7fd fb09 	bl	80132ac <lfs_tag_type3>
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	461a      	mov	r2, r3
 8015c9e:	f240 4301 	movw	r3, #1025	; 0x401
 8015ca2:	429a      	cmp	r2, r3
 8015ca4:	d106      	bne.n	8015cb4 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8015ca6:	68bb      	ldr	r3, [r7, #8]
 8015ca8:	8a9b      	ldrh	r3, [r3, #20]
 8015caa:	3301      	adds	r3, #1
 8015cac:	b29a      	uxth	r2, r3
 8015cae:	68bb      	ldr	r3, [r7, #8]
 8015cb0:	829a      	strh	r2, [r3, #20]
 8015cb2:	e055      	b.n	8015d60 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8015cb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015cb6:	00db      	lsls	r3, r3, #3
 8015cb8:	683a      	ldr	r2, [r7, #0]
 8015cba:	4413      	add	r3, r2
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	f7fd faf4 	bl	80132ac <lfs_tag_type3>
 8015cc4:	4603      	mov	r3, r0
 8015cc6:	461a      	mov	r2, r3
 8015cc8:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8015ccc:	429a      	cmp	r2, r3
 8015cce:	d114      	bne.n	8015cfa <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8015cd0:	68bb      	ldr	r3, [r7, #8]
 8015cd2:	8a9b      	ldrh	r3, [r3, #20]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d106      	bne.n	8015ce6 <lfs_dir_relocatingcommit+0x7a>
 8015cd8:	4ba4      	ldr	r3, [pc, #656]	; (8015f6c <lfs_dir_relocatingcommit+0x300>)
 8015cda:	4aa5      	ldr	r2, [pc, #660]	; (8015f70 <lfs_dir_relocatingcommit+0x304>)
 8015cdc:	f240 71df 	movw	r1, #2015	; 0x7df
 8015ce0:	48a4      	ldr	r0, [pc, #656]	; (8015f74 <lfs_dir_relocatingcommit+0x308>)
 8015ce2:	f004 ff75 	bl	801abd0 <__assert_func>
            dir->count -= 1;
 8015ce6:	68bb      	ldr	r3, [r7, #8]
 8015ce8:	8a9b      	ldrh	r3, [r3, #20]
 8015cea:	3b01      	subs	r3, #1
 8015cec:	b29a      	uxth	r2, r3
 8015cee:	68bb      	ldr	r3, [r7, #8]
 8015cf0:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8015cf2:	2301      	movs	r3, #1
 8015cf4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8015cf8:	e032      	b.n	8015d60 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8015cfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015cfc:	00db      	lsls	r3, r3, #3
 8015cfe:	683a      	ldr	r2, [r7, #0]
 8015d00:	4413      	add	r3, r2
 8015d02:	681b      	ldr	r3, [r3, #0]
 8015d04:	4618      	mov	r0, r3
 8015d06:	f7fd fac1 	bl	801328c <lfs_tag_type1>
 8015d0a:	4603      	mov	r3, r0
 8015d0c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8015d10:	d126      	bne.n	8015d60 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8015d12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015d14:	00db      	lsls	r3, r3, #3
 8015d16:	683a      	ldr	r2, [r7, #0]
 8015d18:	4413      	add	r3, r2
 8015d1a:	685b      	ldr	r3, [r3, #4]
 8015d1c:	681a      	ldr	r2, [r3, #0]
 8015d1e:	68bb      	ldr	r3, [r7, #8]
 8015d20:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8015d22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015d24:	00db      	lsls	r3, r3, #3
 8015d26:	683a      	ldr	r2, [r7, #0]
 8015d28:	4413      	add	r3, r2
 8015d2a:	685b      	ldr	r3, [r3, #4]
 8015d2c:	685a      	ldr	r2, [r3, #4]
 8015d2e:	68bb      	ldr	r3, [r7, #8]
 8015d30:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8015d32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015d34:	00db      	lsls	r3, r3, #3
 8015d36:	683a      	ldr	r2, [r7, #0]
 8015d38:	4413      	add	r3, r2
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	4618      	mov	r0, r3
 8015d3e:	f7fd fac5 	bl	80132cc <lfs_tag_chunk>
 8015d42:	4603      	mov	r3, r0
 8015d44:	f003 0301 	and.w	r3, r3, #1
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	bf14      	ite	ne
 8015d4c:	2301      	movne	r3, #1
 8015d4e:	2300      	moveq	r3, #0
 8015d50:	b2da      	uxtb	r2, r3
 8015d52:	68bb      	ldr	r3, [r7, #8]
 8015d54:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8015d56:	68bb      	ldr	r3, [r7, #8]
 8015d58:	3318      	adds	r3, #24
 8015d5a:	4618      	mov	r0, r3
 8015d5c:	f7fd fa41 	bl	80131e2 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8015d60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015d62:	3301      	adds	r3, #1
 8015d64:	667b      	str	r3, [r7, #100]	; 0x64
 8015d66:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015d68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015d6c:	429a      	cmp	r2, r3
 8015d6e:	db8c      	blt.n	8015c8a <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8015d70:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d02b      	beq.n	8015dd0 <lfs_dir_relocatingcommit+0x164>
 8015d78:	68bb      	ldr	r3, [r7, #8]
 8015d7a:	8a9b      	ldrh	r3, [r3, #20]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d127      	bne.n	8015dd0 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8015d80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d106      	bne.n	8015d96 <lfs_dir_relocatingcommit+0x12a>
 8015d88:	4b7b      	ldr	r3, [pc, #492]	; (8015f78 <lfs_dir_relocatingcommit+0x30c>)
 8015d8a:	4a79      	ldr	r2, [pc, #484]	; (8015f70 <lfs_dir_relocatingcommit+0x304>)
 8015d8c:	f240 71ec 	movw	r1, #2028	; 0x7ec
 8015d90:	4878      	ldr	r0, [pc, #480]	; (8015f74 <lfs_dir_relocatingcommit+0x308>)
 8015d92:	f004 ff1d 	bl	801abd0 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8015d96:	68bb      	ldr	r3, [r7, #8]
 8015d98:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015d9c:	4619      	mov	r1, r3
 8015d9e:	68f8      	ldr	r0, [r7, #12]
 8015da0:	f002 fdca 	bl	8018938 <lfs_fs_pred>
 8015da4:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 8015da6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d005      	beq.n	8015db8 <lfs_dir_relocatingcommit+0x14c>
 8015dac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015dae:	f113 0f02 	cmn.w	r3, #2
 8015db2:	d001      	beq.n	8015db8 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8015db4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015db6:	e204      	b.n	80161c2 <lfs_dir_relocatingcommit+0x556>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8015db8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015dba:	f113 0f02 	cmn.w	r3, #2
 8015dbe:	d007      	beq.n	8015dd0 <lfs_dir_relocatingcommit+0x164>
 8015dc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015dc4:	7ddb      	ldrb	r3, [r3, #23]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d002      	beq.n	8015dd0 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8015dca:	2302      	movs	r3, #2
 8015dcc:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 8015dce:	e121      	b.n	8016014 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8015dd0:	68bb      	ldr	r3, [r7, #8]
 8015dd2:	7d9b      	ldrb	r3, [r3, #22]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	f000 80fb 	beq.w	8015fd0 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8015dda:	68bb      	ldr	r3, [r7, #8]
 8015ddc:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8015dde:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 8015de0:	68bb      	ldr	r3, [r7, #8]
 8015de2:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8015de4:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 8015de6:	68bb      	ldr	r3, [r7, #8]
 8015de8:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8015dea:	63bb      	str	r3, [r7, #56]	; 0x38
 8015dec:	f04f 33ff 	mov.w	r3, #4294967295
 8015df0:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8015df2:	68bb      	ldr	r3, [r7, #8]
 8015df4:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8015df6:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d004      	beq.n	8015e0c <lfs_dir_relocatingcommit+0x1a0>
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015e08:	3b08      	subs	r3, #8
 8015e0a:	e003      	b.n	8015e14 <lfs_dir_relocatingcommit+0x1a8>
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015e10:	69db      	ldr	r3, [r3, #28]
 8015e12:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8015e14:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8015e16:	68bb      	ldr	r3, [r7, #8]
 8015e18:	3318      	adds	r3, #24
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	f7fd f9fb 	bl	8013216 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8015e20:	68bb      	ldr	r3, [r7, #8]
 8015e22:	68da      	ldr	r2, [r3, #12]
 8015e24:	68bb      	ldr	r3, [r7, #8]
 8015e26:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8015e2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015e30:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 8015e32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015e36:	9308      	str	r3, [sp, #32]
 8015e38:	4b50      	ldr	r3, [pc, #320]	; (8015f7c <lfs_dir_relocatingcommit+0x310>)
 8015e3a:	9307      	str	r3, [sp, #28]
 8015e3c:	2300      	movs	r3, #0
 8015e3e:	9306      	str	r3, [sp, #24]
 8015e40:	2300      	movs	r3, #0
 8015e42:	9305      	str	r3, [sp, #20]
 8015e44:	2300      	movs	r3, #0
 8015e46:	9304      	str	r3, [sp, #16]
 8015e48:	2300      	movs	r3, #0
 8015e4a:	9303      	str	r3, [sp, #12]
 8015e4c:	2300      	movs	r3, #0
 8015e4e:	9302      	str	r3, [sp, #8]
 8015e50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015e54:	9301      	str	r3, [sp, #4]
 8015e56:	683b      	ldr	r3, [r7, #0]
 8015e58:	9300      	str	r3, [sp, #0]
 8015e5a:	460b      	mov	r3, r1
 8015e5c:	68b9      	ldr	r1, [r7, #8]
 8015e5e:	68f8      	ldr	r0, [r7, #12]
 8015e60:	f7fd ff8a 	bl	8013d78 <lfs_dir_traverse>
 8015e64:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8015e66:	68bb      	ldr	r3, [r7, #8]
 8015e68:	3318      	adds	r3, #24
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	f7fd f9b9 	bl	80131e2 <lfs_pair_fromle32>
        if (err) {
 8015e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d00b      	beq.n	8015e8e <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8015e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015e78:	f113 0f1c 	cmn.w	r3, #28
 8015e7c:	f000 80aa 	beq.w	8015fd4 <lfs_dir_relocatingcommit+0x368>
 8015e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015e82:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8015e86:	f000 80a5 	beq.w	8015fd4 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8015e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015e8c:	e199      	b.n	80161c2 <lfs_dir_relocatingcommit+0x556>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8015e8e:	f107 031c 	add.w	r3, r7, #28
 8015e92:	2200      	movs	r2, #0
 8015e94:	601a      	str	r2, [r3, #0]
 8015e96:	605a      	str	r2, [r3, #4]
 8015e98:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015ea0:	f107 031c 	add.w	r3, r7, #28
 8015ea4:	4611      	mov	r1, r2
 8015ea6:	4618      	mov	r0, r3
 8015ea8:	f7fd fa5b 	bl	8013362 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8015eb2:	f107 031c 	add.w	r3, r7, #28
 8015eb6:	4611      	mov	r1, r2
 8015eb8:	4618      	mov	r0, r3
 8015eba:	f7fd fa52 	bl	8013362 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8015ec4:	f107 031c 	add.w	r3, r7, #28
 8015ec8:	4611      	mov	r1, r2
 8015eca:	4618      	mov	r0, r3
 8015ecc:	f7fd fa49 	bl	8013362 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8015ed0:	69fb      	ldr	r3, [r7, #28]
 8015ed2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8015ed6:	f023 0303 	bic.w	r3, r3, #3
 8015eda:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8015edc:	f107 031c 	add.w	r3, r7, #28
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	f7fd fa63 	bl	80133ac <lfs_gstate_iszero>
 8015ee6:	4603      	mov	r3, r0
 8015ee8:	f083 0301 	eor.w	r3, r3, #1
 8015eec:	b2db      	uxtb	r3, r3
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d027      	beq.n	8015f42 <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8015ef2:	f107 031c 	add.w	r3, r7, #28
 8015ef6:	461a      	mov	r2, r3
 8015ef8:	68b9      	ldr	r1, [r7, #8]
 8015efa:	68f8      	ldr	r0, [r7, #12]
 8015efc:	f7fe fea6 	bl	8014c4c <lfs_dir_getgstate>
 8015f00:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 8015f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d001      	beq.n	8015f0c <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8015f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015f0a:	e15a      	b.n	80161c2 <lfs_dir_relocatingcommit+0x556>
            }

            lfs_gstate_tole32(&delta);
 8015f0c:	f107 031c 	add.w	r3, r7, #28
 8015f10:	4618      	mov	r0, r3
 8015f12:	f7fd fadd 	bl	80134d0 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8015f16:	f107 031c 	add.w	r3, r7, #28
 8015f1a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8015f1e:	4a18      	ldr	r2, [pc, #96]	; (8015f80 <lfs_dir_relocatingcommit+0x314>)
 8015f20:	68f8      	ldr	r0, [r7, #12]
 8015f22:	f7ff f8b9 	bl	8015098 <lfs_dir_commitattr>
 8015f26:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8015f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d009      	beq.n	8015f42 <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8015f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015f30:	f113 0f1c 	cmn.w	r3, #28
 8015f34:	d050      	beq.n	8015fd8 <lfs_dir_relocatingcommit+0x36c>
 8015f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015f38:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8015f3c:	d04c      	beq.n	8015fd8 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 8015f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015f40:	e13f      	b.n	80161c2 <lfs_dir_relocatingcommit+0x556>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8015f42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015f46:	4619      	mov	r1, r3
 8015f48:	68f8      	ldr	r0, [r7, #12]
 8015f4a:	f7ff f925 	bl	8015198 <lfs_dir_commitcrc>
 8015f4e:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 8015f50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d016      	beq.n	8015f84 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8015f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015f58:	f113 0f1c 	cmn.w	r3, #28
 8015f5c:	d03e      	beq.n	8015fdc <lfs_dir_relocatingcommit+0x370>
 8015f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015f60:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8015f64:	d03a      	beq.n	8015fdc <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8015f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015f68:	e12b      	b.n	80161c2 <lfs_dir_relocatingcommit+0x556>
 8015f6a:	bf00      	nop
 8015f6c:	08021bf0 	.word	0x08021bf0
 8015f70:	08022c04 	.word	0x08022c04
 8015f74:	08021974 	.word	0x08021974
 8015f78:	08021c00 	.word	0x08021c00
 8015f7c:	080155d7 	.word	0x080155d7
 8015f80:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8015f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f86:	68fa      	ldr	r2, [r7, #12]
 8015f88:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8015f8a:	6992      	ldr	r2, [r2, #24]
 8015f8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8015f90:	fb01 f202 	mul.w	r2, r1, r2
 8015f94:	1a9b      	subs	r3, r3, r2
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d006      	beq.n	8015fa8 <lfs_dir_relocatingcommit+0x33c>
 8015f9a:	4b8c      	ldr	r3, [pc, #560]	; (80161cc <lfs_dir_relocatingcommit+0x560>)
 8015f9c:	4a8c      	ldr	r2, [pc, #560]	; (80161d0 <lfs_dir_relocatingcommit+0x564>)
 8015f9e:	f640 0136 	movw	r1, #2102	; 0x836
 8015fa2:	488c      	ldr	r0, [pc, #560]	; (80161d4 <lfs_dir_relocatingcommit+0x568>)
 8015fa4:	f004 fe14 	bl	801abd0 <__assert_func>
        dir->off = commit.off;
 8015fa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015faa:	68bb      	ldr	r3, [r7, #8]
 8015fac:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8015fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015fb0:	68bb      	ldr	r3, [r7, #8]
 8015fb2:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	68fa      	ldr	r2, [r7, #12]
 8015fb8:	333c      	adds	r3, #60	; 0x3c
 8015fba:	3230      	adds	r2, #48	; 0x30
 8015fbc:	ca07      	ldmia	r2, {r0, r1, r2}
 8015fbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	3348      	adds	r3, #72	; 0x48
 8015fc6:	2200      	movs	r2, #0
 8015fc8:	601a      	str	r2, [r3, #0]
 8015fca:	605a      	str	r2, [r3, #4]
 8015fcc:	609a      	str	r2, [r3, #8]
 8015fce:	e021      	b.n	8016014 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8015fd0:	bf00      	nop
 8015fd2:	e004      	b.n	8015fde <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8015fd4:	bf00      	nop
 8015fd6:	e002      	b.n	8015fde <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8015fd8:	bf00      	nop
 8015fda:	e000      	b.n	8015fde <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8015fdc:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	3310      	adds	r3, #16
 8015fe2:	4619      	mov	r1, r3
 8015fe4:	68f8      	ldr	r0, [r7, #12]
 8015fe6:	f7fc fd2b 	bl	8012a40 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8015fea:	68bb      	ldr	r3, [r7, #8]
 8015fec:	8a9b      	ldrh	r3, [r3, #20]
 8015fee:	9302      	str	r3, [sp, #8]
 8015ff0:	2300      	movs	r3, #0
 8015ff2:	9301      	str	r3, [sp, #4]
 8015ff4:	68bb      	ldr	r3, [r7, #8]
 8015ff6:	9300      	str	r3, [sp, #0]
 8015ff8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015ffc:	683a      	ldr	r2, [r7, #0]
 8015ffe:	68b9      	ldr	r1, [r7, #8]
 8016000:	68f8      	ldr	r0, [r7, #12]
 8016002:	f7ff fd1b 	bl	8015a3c <lfs_dir_splittingcompact>
 8016006:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8016008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801600a:	2b00      	cmp	r3, #0
 801600c:	da01      	bge.n	8016012 <lfs_dir_relocatingcommit+0x3a6>
        return state;
 801600e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016010:	e0d7      	b.n	80161c2 <lfs_dir_relocatingcommit+0x556>
    }

    goto fixmlist;
 8016012:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	64bb      	str	r3, [r7, #72]	; 0x48
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	3304      	adds	r3, #4
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8016022:	68fb      	ldr	r3, [r7, #12]
 8016024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016026:	663b      	str	r3, [r7, #96]	; 0x60
 8016028:	e0c6      	b.n	80161b8 <lfs_dir_relocatingcommit+0x54c>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 801602a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801602c:	3308      	adds	r3, #8
 801602e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8016032:	4611      	mov	r1, r2
 8016034:	4618      	mov	r0, r3
 8016036:	f7fd f87d 	bl	8013134 <lfs_pair_cmp>
 801603a:	4603      	mov	r3, r0
 801603c:	2b00      	cmp	r3, #0
 801603e:	f040 80b8 	bne.w	80161b2 <lfs_dir_relocatingcommit+0x546>
            d->m = *dir;
 8016042:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016044:	68ba      	ldr	r2, [r7, #8]
 8016046:	f103 0408 	add.w	r4, r3, #8
 801604a:	4615      	mov	r5, r2
 801604c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801604e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016050:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8016054:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8016058:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801605a:	3308      	adds	r3, #8
 801605c:	687a      	ldr	r2, [r7, #4]
 801605e:	429a      	cmp	r2, r3
 8016060:	f000 809d 	beq.w	801619e <lfs_dir_relocatingcommit+0x532>
                for (int i = 0; i < attrcount; i++) {
 8016064:	2300      	movs	r3, #0
 8016066:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016068:	e07b      	b.n	8016162 <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801606a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801606c:	00db      	lsls	r3, r3, #3
 801606e:	683a      	ldr	r2, [r7, #0]
 8016070:	4413      	add	r3, r2
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	4618      	mov	r0, r3
 8016076:	f7fd f919 	bl	80132ac <lfs_tag_type3>
 801607a:	4603      	mov	r3, r0
 801607c:	461a      	mov	r2, r3
 801607e:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8016082:	429a      	cmp	r2, r3
 8016084:	d115      	bne.n	80160b2 <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8016086:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016088:	889c      	ldrh	r4, [r3, #4]
 801608a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801608c:	00db      	lsls	r3, r3, #3
 801608e:	683a      	ldr	r2, [r7, #0]
 8016090:	4413      	add	r3, r2
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	4618      	mov	r0, r3
 8016096:	f7fd f933 	bl	8013300 <lfs_tag_id>
 801609a:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801609c:	429c      	cmp	r4, r3
 801609e:	d108      	bne.n	80160b2 <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 80160a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80160a2:	f04f 32ff 	mov.w	r2, #4294967295
 80160a6:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 80160a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80160aa:	f04f 32ff 	mov.w	r2, #4294967295
 80160ae:	60da      	str	r2, [r3, #12]
 80160b0:	e054      	b.n	801615c <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80160b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80160b4:	00db      	lsls	r3, r3, #3
 80160b6:	683a      	ldr	r2, [r7, #0]
 80160b8:	4413      	add	r3, r2
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	4618      	mov	r0, r3
 80160be:	f7fd f8f5 	bl	80132ac <lfs_tag_type3>
 80160c2:	4603      	mov	r3, r0
 80160c4:	461a      	mov	r2, r3
 80160c6:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80160ca:	429a      	cmp	r2, r3
 80160cc:	d11c      	bne.n	8016108 <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 80160ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80160d0:	889c      	ldrh	r4, [r3, #4]
 80160d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80160d4:	00db      	lsls	r3, r3, #3
 80160d6:	683a      	ldr	r2, [r7, #0]
 80160d8:	4413      	add	r3, r2
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	4618      	mov	r0, r3
 80160de:	f7fd f90f 	bl	8013300 <lfs_tag_id>
 80160e2:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80160e4:	429c      	cmp	r4, r3
 80160e6:	d90f      	bls.n	8016108 <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 80160e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80160ea:	889b      	ldrh	r3, [r3, #4]
 80160ec:	3b01      	subs	r3, #1
 80160ee:	b29a      	uxth	r2, r3
 80160f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80160f2:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 80160f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80160f6:	799b      	ldrb	r3, [r3, #6]
 80160f8:	2b02      	cmp	r3, #2
 80160fa:	d12f      	bne.n	801615c <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 80160fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80160fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016100:	1e5a      	subs	r2, r3, #1
 8016102:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016104:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8016106:	e029      	b.n	801615c <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8016108:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801610a:	00db      	lsls	r3, r3, #3
 801610c:	683a      	ldr	r2, [r7, #0]
 801610e:	4413      	add	r3, r2
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	4618      	mov	r0, r3
 8016114:	f7fd f8ca 	bl	80132ac <lfs_tag_type3>
 8016118:	4603      	mov	r3, r0
 801611a:	461a      	mov	r2, r3
 801611c:	f240 4301 	movw	r3, #1025	; 0x401
 8016120:	429a      	cmp	r2, r3
 8016122:	d11b      	bne.n	801615c <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8016124:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016126:	889c      	ldrh	r4, [r3, #4]
 8016128:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801612a:	00db      	lsls	r3, r3, #3
 801612c:	683a      	ldr	r2, [r7, #0]
 801612e:	4413      	add	r3, r2
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	4618      	mov	r0, r3
 8016134:	f7fd f8e4 	bl	8013300 <lfs_tag_id>
 8016138:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801613a:	429c      	cmp	r4, r3
 801613c:	d30e      	bcc.n	801615c <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 801613e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016140:	889b      	ldrh	r3, [r3, #4]
 8016142:	3301      	adds	r3, #1
 8016144:	b29a      	uxth	r2, r3
 8016146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016148:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801614a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801614c:	799b      	ldrb	r3, [r3, #6]
 801614e:	2b02      	cmp	r3, #2
 8016150:	d104      	bne.n	801615c <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 8016152:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016156:	1c5a      	adds	r2, r3, #1
 8016158:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801615a:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 801615c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801615e:	3301      	adds	r3, #1
 8016160:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016162:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016164:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016168:	429a      	cmp	r2, r3
 801616a:	f6ff af7e 	blt.w	801606a <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 801616e:	e016      	b.n	801619e <lfs_dir_relocatingcommit+0x532>
                // we split and id is on tail now
                d->id -= d->m.count;
 8016170:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016172:	889a      	ldrh	r2, [r3, #4]
 8016174:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016176:	8b9b      	ldrh	r3, [r3, #28]
 8016178:	1ad3      	subs	r3, r2, r3
 801617a:	b29a      	uxth	r2, r3
 801617c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801617e:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8016180:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016182:	f103 0108 	add.w	r1, r3, #8
 8016186:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016188:	3320      	adds	r3, #32
 801618a:	461a      	mov	r2, r3
 801618c:	68f8      	ldr	r0, [r7, #12]
 801618e:	f7fe fd41 	bl	8014c14 <lfs_dir_fetch>
 8016192:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 8016194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016196:	2b00      	cmp	r3, #0
 8016198:	d001      	beq.n	801619e <lfs_dir_relocatingcommit+0x532>
                    return err;
 801619a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801619c:	e011      	b.n	80161c2 <lfs_dir_relocatingcommit+0x556>
            while (d->id >= d->m.count && d->m.split) {
 801619e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80161a0:	889a      	ldrh	r2, [r3, #4]
 80161a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80161a4:	8b9b      	ldrh	r3, [r3, #28]
 80161a6:	429a      	cmp	r2, r3
 80161a8:	d303      	bcc.n	80161b2 <lfs_dir_relocatingcommit+0x546>
 80161aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80161ac:	7fdb      	ldrb	r3, [r3, #31]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d1de      	bne.n	8016170 <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80161b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	663b      	str	r3, [r7, #96]	; 0x60
 80161b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	f47f af35 	bne.w	801602a <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 80161c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 80161c2:	4618      	mov	r0, r3
 80161c4:	3770      	adds	r7, #112	; 0x70
 80161c6:	46bd      	mov	sp, r7
 80161c8:	bdb0      	pop	{r4, r5, r7, pc}
 80161ca:	bf00      	nop
 80161cc:	08021ae0 	.word	0x08021ae0
 80161d0:	08022c04 	.word	0x08022c04
 80161d4:	08021974 	.word	0x08021974

080161d8 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 80161d8:	b5b0      	push	{r4, r5, r7, lr}
 80161da:	b0bc      	sub	sp, #240	; 0xf0
 80161dc:	af04      	add	r7, sp, #16
 80161de:	60f8      	str	r0, [r7, #12]
 80161e0:	60b9      	str	r1, [r7, #8]
 80161e2:	607a      	str	r2, [r7, #4]
 80161e4:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80161ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80161ee:	e045      	b.n	801627c <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80161f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80161f4:	3308      	adds	r3, #8
 80161f6:	68ba      	ldr	r2, [r7, #8]
 80161f8:	429a      	cmp	r2, r3
 80161fa:	d03a      	beq.n	8016272 <lfs_dir_orphaningcommit+0x9a>
 80161fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016200:	3308      	adds	r3, #8
 8016202:	68ba      	ldr	r2, [r7, #8]
 8016204:	4611      	mov	r1, r2
 8016206:	4618      	mov	r0, r3
 8016208:	f7fc ff94 	bl	8013134 <lfs_pair_cmp>
 801620c:	4603      	mov	r3, r0
 801620e:	2b00      	cmp	r3, #0
 8016210:	d12f      	bne.n	8016272 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8016212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016216:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8016218:	2b01      	cmp	r3, #1
 801621a:	d12a      	bne.n	8016272 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801621c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016226:	2b00      	cmp	r3, #0
 8016228:	d023      	beq.n	8016272 <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 801622a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801622e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8016236:	429a      	cmp	r2, r3
 8016238:	d91b      	bls.n	8016272 <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 801623a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801623e:	68f8      	ldr	r0, [r7, #12]
 8016240:	f001 f91a 	bl	8017478 <lfs_file_outline>
 8016244:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8016248:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801624c:	2b00      	cmp	r3, #0
 801624e:	d002      	beq.n	8016256 <lfs_dir_orphaningcommit+0x7e>
                return err;
 8016250:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016254:	e2ad      	b.n	80167b2 <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 8016256:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801625a:	68f8      	ldr	r0, [r7, #12]
 801625c:	f001 f92e 	bl	80174bc <lfs_file_flush>
 8016260:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8016264:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016268:	2b00      	cmp	r3, #0
 801626a:	d002      	beq.n	8016272 <lfs_dir_orphaningcommit+0x9a>
                return err;
 801626c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016270:	e29f      	b.n	80167b2 <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8016272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801627c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016280:	2b00      	cmp	r3, #0
 8016282:	d1b5      	bne.n	80161f0 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8016284:	68bb      	ldr	r3, [r7, #8]
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801628c:	68bb      	ldr	r3, [r7, #8]
 801628e:	685b      	ldr	r3, [r3, #4]
 8016290:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 8016294:	68bb      	ldr	r3, [r7, #8]
 8016296:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 801629a:	461d      	mov	r5, r3
 801629c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801629e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80162a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80162a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 80162a8:	68ba      	ldr	r2, [r7, #8]
 80162aa:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80162ae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80162b2:	9301      	str	r3, [sp, #4]
 80162b4:	683b      	ldr	r3, [r7, #0]
 80162b6:	9300      	str	r3, [sp, #0]
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	68f8      	ldr	r0, [r7, #12]
 80162bc:	f7ff fcd6 	bl	8015c6c <lfs_dir_relocatingcommit>
 80162c0:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 80162c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	da02      	bge.n	80162d2 <lfs_dir_orphaningcommit+0xfa>
        return state;
 80162cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80162d0:	e26f      	b.n	80167b2 <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 80162d2:	68bb      	ldr	r3, [r7, #8]
 80162d4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80162d8:	4611      	mov	r1, r2
 80162da:	4618      	mov	r0, r3
 80162dc:	f7fc ff2a 	bl	8013134 <lfs_pair_cmp>
 80162e0:	4603      	mov	r3, r0
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d109      	bne.n	80162fa <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 80162e6:	68bb      	ldr	r3, [r7, #8]
 80162e8:	461d      	mov	r5, r3
 80162ea:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80162ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80162f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80162f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80162f6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 80162fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80162fe:	2b02      	cmp	r3, #2
 8016300:	d14a      	bne.n	8016398 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	3348      	adds	r3, #72	; 0x48
 8016306:	461a      	mov	r2, r3
 8016308:	68b9      	ldr	r1, [r7, #8]
 801630a:	68f8      	ldr	r0, [r7, #12]
 801630c:	f7fe fc9e 	bl	8014c4c <lfs_dir_getgstate>
 8016310:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 8016314:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016318:	2b00      	cmp	r3, #0
 801631a:	d002      	beq.n	8016322 <lfs_dir_orphaningcommit+0x14a>
            return err;
 801631c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016320:	e247      	b.n	80167b2 <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 8016322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016324:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 8016328:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801632a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 801632e:	68bb      	ldr	r3, [r7, #8]
 8016330:	3318      	adds	r3, #24
 8016332:	4618      	mov	r0, r3
 8016334:	f7fc ff6f 	bl	8013216 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8016338:	68bb      	ldr	r3, [r7, #8]
 801633a:	7ddb      	ldrb	r3, [r3, #23]
 801633c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8016340:	051a      	lsls	r2, r3, #20
 8016342:	4bc2      	ldr	r3, [pc, #776]	; (801664c <lfs_dir_orphaningcommit+0x474>)
 8016344:	4313      	orrs	r3, r2
 8016346:	667b      	str	r3, [r7, #100]	; 0x64
 8016348:	68bb      	ldr	r3, [r7, #8]
 801634a:	3318      	adds	r3, #24
 801634c:	66bb      	str	r3, [r7, #104]	; 0x68
 801634e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016352:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8016356:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 801635a:	2000      	movs	r0, #0
 801635c:	9001      	str	r0, [sp, #4]
 801635e:	2001      	movs	r0, #1
 8016360:	9000      	str	r0, [sp, #0]
 8016362:	68f8      	ldr	r0, [r7, #12]
 8016364:	f7ff fc82 	bl	8015c6c <lfs_dir_relocatingcommit>
 8016368:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 801636c:	68bb      	ldr	r3, [r7, #8]
 801636e:	3318      	adds	r3, #24
 8016370:	4618      	mov	r0, r3
 8016372:	f7fc ff36 	bl	80131e2 <lfs_pair_fromle32>
        if (state < 0) {
 8016376:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801637a:	2b00      	cmp	r3, #0
 801637c:	da02      	bge.n	8016384 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 801637e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016382:	e216      	b.n	80167b2 <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8016384:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8016388:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 801638c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801638e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016390:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8016394:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8016398:	2300      	movs	r3, #0
 801639a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 801639e:	e1fc      	b.n	801679a <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 80163a0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80163a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80163a8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80163ac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80163b0:	4ca7      	ldr	r4, [pc, #668]	; (8016650 <lfs_dir_orphaningcommit+0x478>)
 80163b2:	9403      	str	r4, [sp, #12]
 80163b4:	9102      	str	r1, [sp, #8]
 80163b6:	9201      	str	r2, [sp, #4]
 80163b8:	9300      	str	r3, [sp, #0]
 80163ba:	4603      	mov	r3, r0
 80163bc:	f44f 620c 	mov.w	r2, #2240	; 0x8c0
 80163c0:	49a4      	ldr	r1, [pc, #656]	; (8016654 <lfs_dir_orphaningcommit+0x47c>)
 80163c2:	48a5      	ldr	r0, [pc, #660]	; (8016658 <lfs_dir_orphaningcommit+0x480>)
 80163c4:	f005 fc3e 	bl	801bc44 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 80163c8:	2300      	movs	r3, #0
 80163ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	f103 0220 	add.w	r2, r3, #32
 80163d4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80163d8:	4611      	mov	r1, r2
 80163da:	4618      	mov	r0, r3
 80163dc:	f7fc feaa 	bl	8013134 <lfs_pair_cmp>
 80163e0:	4603      	mov	r3, r0
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d107      	bne.n	80163f6 <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 80163e6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 80163ee:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80163fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80163fe:	e037      	b.n	8016470 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8016400:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8016404:	f103 0208 	add.w	r2, r3, #8
 8016408:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801640c:	4611      	mov	r1, r2
 801640e:	4618      	mov	r0, r3
 8016410:	f7fc fe90 	bl	8013134 <lfs_pair_cmp>
 8016414:	4603      	mov	r3, r0
 8016416:	2b00      	cmp	r3, #0
 8016418:	d109      	bne.n	801642e <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 801641a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801641e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8016422:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8016424:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8016428:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801642c:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 801642e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8016432:	799b      	ldrb	r3, [r3, #6]
 8016434:	2b02      	cmp	r3, #2
 8016436:	d116      	bne.n	8016466 <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8016438:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801643c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8016440:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8016444:	4611      	mov	r1, r2
 8016446:	4618      	mov	r0, r3
 8016448:	f7fc fe74 	bl	8013134 <lfs_pair_cmp>
 801644c:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 801644e:	2b00      	cmp	r3, #0
 8016450:	d109      	bne.n	8016466 <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 8016452:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8016456:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801645a:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 801645c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8016460:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8016464:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8016466:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8016470:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8016474:	2b00      	cmp	r3, #0
 8016476:	d1c3      	bne.n	8016400 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8016478:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801647c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8016480:	4619      	mov	r1, r3
 8016482:	68f8      	ldr	r0, [r7, #12]
 8016484:	f002 fae0 	bl	8018a48 <lfs_fs_parent>
 8016488:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 801648c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016490:	2b00      	cmp	r3, #0
 8016492:	da07      	bge.n	80164a4 <lfs_dir_orphaningcommit+0x2cc>
 8016494:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016498:	f113 0f02 	cmn.w	r3, #2
 801649c:	d002      	beq.n	80164a4 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 801649e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80164a2:	e186      	b.n	80167b2 <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 80164a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80164a8:	f113 0f02 	cmn.w	r3, #2
 80164ac:	bf14      	ite	ne
 80164ae:	2301      	movne	r3, #1
 80164b0:	2300      	moveq	r3, #0
 80164b2:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 80164b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80164ba:	f113 0f02 	cmn.w	r3, #2
 80164be:	f000 809e 	beq.w	80165fe <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 80164c2:	2101      	movs	r1, #1
 80164c4:	68f8      	ldr	r0, [r7, #12]
 80164c6:	f002 fb17 	bl	8018af8 <lfs_fs_preporphans>
 80164ca:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 80164ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d002      	beq.n	80164dc <lfs_dir_orphaningcommit+0x304>
                return err;
 80164d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80164da:	e16a      	b.n	80167b2 <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80164dc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80164e0:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	3330      	adds	r3, #48	; 0x30
 80164e8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80164ec:	4611      	mov	r1, r2
 80164ee:	4618      	mov	r0, r3
 80164f0:	f7fc ffae 	bl	8013450 <lfs_gstate_hasmovehere>
 80164f4:	4603      	mov	r3, r0
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d02d      	beq.n	8016556 <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80164fe:	4618      	mov	r0, r3
 8016500:	f7fc fefe 	bl	8013300 <lfs_tag_id>
 8016504:	4603      	mov	r3, r0
 8016506:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 801650a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801650c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801650e:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8016512:	484f      	ldr	r0, [pc, #316]	; (8016650 <lfs_dir_orphaningcommit+0x478>)
 8016514:	9002      	str	r0, [sp, #8]
 8016516:	9201      	str	r2, [sp, #4]
 8016518:	9300      	str	r3, [sp, #0]
 801651a:	460b      	mov	r3, r1
 801651c:	f640 02ed 	movw	r2, #2285	; 0x8ed
 8016520:	494c      	ldr	r1, [pc, #304]	; (8016654 <lfs_dir_orphaningcommit+0x47c>)
 8016522:	484e      	ldr	r0, [pc, #312]	; (801665c <lfs_dir_orphaningcommit+0x484>)
 8016524:	f005 fb8e 	bl	801bc44 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8016528:	2200      	movs	r2, #0
 801652a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 801652e:	68f8      	ldr	r0, [r7, #12]
 8016530:	f002 fb1c 	bl	8018b6c <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8016534:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016538:	4618      	mov	r0, r3
 801653a:	f7fc fee1 	bl	8013300 <lfs_tag_id>
 801653e:	4603      	mov	r3, r0
 8016540:	461a      	mov	r2, r3
 8016542:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8016546:	4293      	cmp	r3, r2
 8016548:	d205      	bcs.n	8016556 <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 801654a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801654e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8016552:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8016556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016558:	657b      	str	r3, [r7, #84]	; 0x54
 801655a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801655c:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 801655e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8016562:	4618      	mov	r0, r3
 8016564:	f7fc fe57 	bl	8013216 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8016568:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 801656c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8016570:	4293      	cmp	r3, r2
 8016572:	d007      	beq.n	8016584 <lfs_dir_orphaningcommit+0x3ac>
 8016574:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8016578:	029b      	lsls	r3, r3, #10
 801657a:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 801657e:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8016582:	e000      	b.n	8016586 <lfs_dir_orphaningcommit+0x3ae>
 8016584:	2300      	movs	r3, #0
 8016586:	647b      	str	r3, [r7, #68]	; 0x44
 8016588:	2300      	movs	r3, #0
 801658a:	64bb      	str	r3, [r7, #72]	; 0x48
 801658c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016590:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016592:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8016596:	653b      	str	r3, [r7, #80]	; 0x50
 8016598:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801659c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80165a0:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80165a4:	2000      	movs	r0, #0
 80165a6:	9001      	str	r0, [sp, #4]
 80165a8:	2002      	movs	r0, #2
 80165aa:	9000      	str	r0, [sp, #0]
 80165ac:	68f8      	ldr	r0, [r7, #12]
 80165ae:	f7ff fb5d 	bl	8015c6c <lfs_dir_relocatingcommit>
 80165b2:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80165b6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80165ba:	4618      	mov	r0, r3
 80165bc:	f7fc fe11 	bl	80131e2 <lfs_pair_fromle32>
            if (state < 0) {
 80165c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	da02      	bge.n	80165ce <lfs_dir_orphaningcommit+0x3f6>
                return state;
 80165c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80165cc:	e0f1      	b.n	80167b2 <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 80165ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80165d2:	2b01      	cmp	r3, #1
 80165d4:	d113      	bne.n	80165fe <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 80165d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80165d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 80165dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80165de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 80165e2:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80165e6:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80165ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80165ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80165ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80165f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 80165f6:	2301      	movs	r3, #1
 80165f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80165fc:	e0cd      	b.n	801679a <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 80165fe:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8016602:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8016606:	4619      	mov	r1, r3
 8016608:	68f8      	ldr	r0, [r7, #12]
 801660a:	f002 f995 	bl	8018938 <lfs_fs_pred>
 801660e:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 8016612:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016616:	2b00      	cmp	r3, #0
 8016618:	d007      	beq.n	801662a <lfs_dir_orphaningcommit+0x452>
 801661a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801661e:	f113 0f02 	cmn.w	r3, #2
 8016622:	d002      	beq.n	801662a <lfs_dir_orphaningcommit+0x452>
            return err;
 8016624:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016628:	e0c3      	b.n	80167b2 <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 801662a:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 801662e:	2b00      	cmp	r3, #0
 8016630:	d01a      	beq.n	8016668 <lfs_dir_orphaningcommit+0x490>
 8016632:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016636:	f113 0f02 	cmn.w	r3, #2
 801663a:	d115      	bne.n	8016668 <lfs_dir_orphaningcommit+0x490>
 801663c:	4b08      	ldr	r3, [pc, #32]	; (8016660 <lfs_dir_orphaningcommit+0x488>)
 801663e:	4a09      	ldr	r2, [pc, #36]	; (8016664 <lfs_dir_orphaningcommit+0x48c>)
 8016640:	f44f 6111 	mov.w	r1, #2320	; 0x910
 8016644:	4803      	ldr	r0, [pc, #12]	; (8016654 <lfs_dir_orphaningcommit+0x47c>)
 8016646:	f004 fac3 	bl	801abd0 <__assert_func>
 801664a:	bf00      	nop
 801664c:	000ffc08 	.word	0x000ffc08
 8016650:	08021a88 	.word	0x08021a88
 8016654:	08021974 	.word	0x08021974
 8016658:	08021c08 	.word	0x08021c08
 801665c:	08021c44 	.word	0x08021c44
 8016660:	08021c88 	.word	0x08021c88
 8016664:	08022c20 	.word	0x08022c20

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8016668:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801666c:	f113 0f02 	cmn.w	r3, #2
 8016670:	f000 8093 	beq.w	801679a <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8016674:	68fb      	ldr	r3, [r7, #12]
 8016676:	3330      	adds	r3, #48	; 0x30
 8016678:	4618      	mov	r0, r3
 801667a:	f7fc feb4 	bl	80133e6 <lfs_gstate_hasorphans>
 801667e:	4603      	mov	r3, r0
 8016680:	2b00      	cmp	r3, #0
 8016682:	d011      	beq.n	80166a8 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8016684:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8016688:	425b      	negs	r3, r3
 801668a:	b2db      	uxtb	r3, r3
 801668c:	b25b      	sxtb	r3, r3
 801668e:	4619      	mov	r1, r3
 8016690:	68f8      	ldr	r0, [r7, #12]
 8016692:	f002 fa31 	bl	8018af8 <lfs_fs_preporphans>
 8016696:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 801669a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d002      	beq.n	80166a8 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 80166a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80166a6:	e084      	b.n	80167b2 <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80166a8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80166ac:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	3330      	adds	r3, #48	; 0x30
 80166b4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80166b8:	4611      	mov	r1, r2
 80166ba:	4618      	mov	r0, r3
 80166bc:	f7fc fec8 	bl	8013450 <lfs_gstate_hasmovehere>
 80166c0:	4603      	mov	r3, r0
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d01c      	beq.n	8016700 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80166ca:	4618      	mov	r0, r3
 80166cc:	f7fc fe18 	bl	8013300 <lfs_tag_id>
 80166d0:	4603      	mov	r3, r0
 80166d2:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 80166d6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80166d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80166da:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 80166de:	4837      	ldr	r0, [pc, #220]	; (80167bc <lfs_dir_orphaningcommit+0x5e4>)
 80166e0:	9002      	str	r0, [sp, #8]
 80166e2:	9201      	str	r2, [sp, #4]
 80166e4:	9300      	str	r3, [sp, #0]
 80166e6:	460b      	mov	r3, r1
 80166e8:	f640 1221 	movw	r2, #2337	; 0x921
 80166ec:	4934      	ldr	r1, [pc, #208]	; (80167c0 <lfs_dir_orphaningcommit+0x5e8>)
 80166ee:	4835      	ldr	r0, [pc, #212]	; (80167c4 <lfs_dir_orphaningcommit+0x5ec>)
 80166f0:	f005 faa8 	bl	801bc44 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80166f4:	2200      	movs	r2, #0
 80166f6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80166fa:	68f8      	ldr	r0, [r7, #12]
 80166fc:	f002 fa36 	bl	8018b6c <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8016700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016702:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 8016706:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016708:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 801670c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8016710:	4618      	mov	r0, r3
 8016712:	f7fc fd80 	bl	8013216 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8016716:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 801671a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801671e:	4293      	cmp	r3, r2
 8016720:	d007      	beq.n	8016732 <lfs_dir_orphaningcommit+0x55a>
 8016722:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8016726:	029b      	lsls	r3, r3, #10
 8016728:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 801672c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8016730:	e000      	b.n	8016734 <lfs_dir_orphaningcommit+0x55c>
 8016732:	2300      	movs	r3, #0
 8016734:	627b      	str	r3, [r7, #36]	; 0x24
 8016736:	2300      	movs	r3, #0
 8016738:	62bb      	str	r3, [r7, #40]	; 0x28
 801673a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801673e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8016742:	051a      	lsls	r2, r3, #20
 8016744:	4b20      	ldr	r3, [pc, #128]	; (80167c8 <lfs_dir_orphaningcommit+0x5f0>)
 8016746:	4313      	orrs	r3, r2
 8016748:	62fb      	str	r3, [r7, #44]	; 0x2c
 801674a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801674e:	633b      	str	r3, [r7, #48]	; 0x30
 8016750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016754:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8016758:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 801675c:	2000      	movs	r0, #0
 801675e:	9001      	str	r0, [sp, #4]
 8016760:	2002      	movs	r0, #2
 8016762:	9000      	str	r0, [sp, #0]
 8016764:	68f8      	ldr	r0, [r7, #12]
 8016766:	f7ff fa81 	bl	8015c6c <lfs_dir_relocatingcommit>
 801676a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 801676e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8016772:	4618      	mov	r0, r3
 8016774:	f7fc fd35 	bl	80131e2 <lfs_pair_fromle32>
            if (state < 0) {
 8016778:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801677c:	2b00      	cmp	r3, #0
 801677e:	da02      	bge.n	8016786 <lfs_dir_orphaningcommit+0x5ae>
                return state;
 8016780:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016784:	e015      	b.n	80167b2 <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 8016786:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 801678a:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 801678e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016792:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8016796:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 801679a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801679e:	2b01      	cmp	r3, #1
 80167a0:	f43f adfe 	beq.w	80163a0 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 80167a4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d001      	beq.n	80167b0 <lfs_dir_orphaningcommit+0x5d8>
 80167ac:	2303      	movs	r3, #3
 80167ae:	e000      	b.n	80167b2 <lfs_dir_orphaningcommit+0x5da>
 80167b0:	2300      	movs	r3, #0
}
 80167b2:	4618      	mov	r0, r3
 80167b4:	37e0      	adds	r7, #224	; 0xe0
 80167b6:	46bd      	mov	sp, r7
 80167b8:	bdb0      	pop	{r4, r5, r7, pc}
 80167ba:	bf00      	nop
 80167bc:	08021a88 	.word	0x08021a88
 80167c0:	08021974 	.word	0x08021974
 80167c4:	08021c44 	.word	0x08021c44
 80167c8:	000ffc08 	.word	0x000ffc08

080167cc <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 80167cc:	b580      	push	{r7, lr}
 80167ce:	b086      	sub	sp, #24
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	60f8      	str	r0, [r7, #12]
 80167d4:	60b9      	str	r1, [r7, #8]
 80167d6:	607a      	str	r2, [r7, #4]
 80167d8:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 80167da:	683b      	ldr	r3, [r7, #0]
 80167dc:	687a      	ldr	r2, [r7, #4]
 80167de:	68b9      	ldr	r1, [r7, #8]
 80167e0:	68f8      	ldr	r0, [r7, #12]
 80167e2:	f7ff fcf9 	bl	80161d8 <lfs_dir_orphaningcommit>
 80167e6:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 80167e8:	697b      	ldr	r3, [r7, #20]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	da01      	bge.n	80167f2 <lfs_dir_commit+0x26>
        return orphans;
 80167ee:	697b      	ldr	r3, [r7, #20]
 80167f0:	e00d      	b.n	801680e <lfs_dir_commit+0x42>
    }

    if (orphans) {
 80167f2:	697b      	ldr	r3, [r7, #20]
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d009      	beq.n	801680c <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 80167f8:	2100      	movs	r1, #0
 80167fa:	68f8      	ldr	r0, [r7, #12]
 80167fc:	f002 fa56 	bl	8018cac <lfs_fs_deorphan>
 8016800:	6138      	str	r0, [r7, #16]
        if (err) {
 8016802:	693b      	ldr	r3, [r7, #16]
 8016804:	2b00      	cmp	r3, #0
 8016806:	d001      	beq.n	801680c <lfs_dir_commit+0x40>
            return err;
 8016808:	693b      	ldr	r3, [r7, #16]
 801680a:	e000      	b.n	801680e <lfs_dir_commit+0x42>
        }
    }

    return 0;
 801680c:	2300      	movs	r3, #0
}
 801680e:	4618      	mov	r0, r3
 8016810:	3718      	adds	r7, #24
 8016812:	46bd      	mov	sp, r7
 8016814:	bd80      	pop	{r7, pc}
	...

08016818 <lfs_rawmkdir>:
#endif


/// Top level directory operations ///
#ifndef LFS_READONLY
static int lfs_rawmkdir(lfs_t *lfs, const char *path) {
 8016818:	b5b0      	push	{r4, r5, r7, lr}
 801681a:	b0b8      	sub	sp, #224	; 0xe0
 801681c:	af00      	add	r7, sp, #0
 801681e:	6078      	str	r0, [r7, #4]
 8016820:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8016822:	6878      	ldr	r0, [r7, #4]
 8016824:	f002 fbe6 	bl	8018ff4 <lfs_fs_forceconsistency>
 8016828:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 801682c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016830:	2b00      	cmp	r3, #0
 8016832:	d002      	beq.n	801683a <lfs_rawmkdir+0x22>
        return err;
 8016834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016838:	e128      	b.n	8016a8c <lfs_rawmkdir+0x274>
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801683e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 8016842:	f107 00ae 	add.w	r0, r7, #174	; 0xae
 8016846:	463a      	mov	r2, r7
 8016848:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801684c:	f103 0108 	add.w	r1, r3, #8
 8016850:	4603      	mov	r3, r0
 8016852:	6878      	ldr	r0, [r7, #4]
 8016854:	f7fe faf0 	bl	8014e38 <lfs_dir_find>
 8016858:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 801685c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016860:	f113 0f02 	cmn.w	r3, #2
 8016864:	d105      	bne.n	8016872 <lfs_rawmkdir+0x5a>
 8016866:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801686a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801686e:	4293      	cmp	r3, r2
 8016870:	d109      	bne.n	8016886 <lfs_rawmkdir+0x6e>
        return (err < 0) ? err : LFS_ERR_EXIST;
 8016872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016876:	2b00      	cmp	r3, #0
 8016878:	da02      	bge.n	8016880 <lfs_rawmkdir+0x68>
 801687a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801687e:	e105      	b.n	8016a8c <lfs_rawmkdir+0x274>
 8016880:	f06f 0310 	mvn.w	r3, #16
 8016884:	e102      	b.n	8016a8c <lfs_rawmkdir+0x274>
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
 8016886:	683b      	ldr	r3, [r7, #0]
 8016888:	4618      	mov	r0, r3
 801688a:	f7e9 fd09 	bl	80002a0 <strlen>
 801688e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    if (nlen > lfs->name_max) {
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016896:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801689a:	429a      	cmp	r2, r3
 801689c:	d902      	bls.n	80168a4 <lfs_rawmkdir+0x8c>
        return LFS_ERR_NAMETOOLONG;
 801689e:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80168a2:	e0f3      	b.n	8016a8c <lfs_rawmkdir+0x274>
    }

    // build up new directory
    lfs_alloc_ack(lfs);
 80168a4:	6878      	ldr	r0, [r7, #4]
 80168a6:	f7fc ff5b 	bl	8013760 <lfs_alloc_ack>
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
 80168aa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80168ae:	4619      	mov	r1, r3
 80168b0:	6878      	ldr	r0, [r7, #4]
 80168b2:	f7fe fdad 	bl	8015410 <lfs_dir_alloc>
 80168b6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 80168ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d002      	beq.n	80168c8 <lfs_rawmkdir+0xb0>
        return err;
 80168c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80168c6:	e0e1      	b.n	8016a8c <lfs_rawmkdir+0x274>
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
 80168c8:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80168cc:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 80168d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80168d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80168d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80168d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
 80168dc:	e012      	b.n	8016904 <lfs_rawmkdir+0xec>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 80168de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80168e2:	f103 0218 	add.w	r2, r3, #24
 80168e6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80168ea:	4619      	mov	r1, r3
 80168ec:	6878      	ldr	r0, [r7, #4]
 80168ee:	f7fe f991 	bl	8014c14 <lfs_dir_fetch>
 80168f2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 80168f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d002      	beq.n	8016904 <lfs_rawmkdir+0xec>
            return err;
 80168fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016902:	e0c3      	b.n	8016a8c <lfs_rawmkdir+0x274>
    while (pred.split) {
 8016904:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8016908:	2b00      	cmp	r3, #0
 801690a:	d1e8      	bne.n	80168de <lfs_rawmkdir+0xc6>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
 801690c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8016910:	3318      	adds	r3, #24
 8016912:	4618      	mov	r0, r3
 8016914:	f7fc fc7f 	bl	8013216 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 8016918:	4b5e      	ldr	r3, [pc, #376]	; (8016a94 <lfs_rawmkdir+0x27c>)
 801691a:	667b      	str	r3, [r7, #100]	; 0x64
 801691c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8016920:	3318      	adds	r3, #24
 8016922:	66bb      	str	r3, [r7, #104]	; 0x68
 8016924:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8016928:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 801692c:	2301      	movs	r3, #1
 801692e:	6878      	ldr	r0, [r7, #4]
 8016930:	f7ff ff4c 	bl	80167cc <lfs_dir_commit>
 8016934:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
 8016938:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801693c:	3318      	adds	r3, #24
 801693e:	4618      	mov	r0, r3
 8016940:	f7fc fc4f 	bl	80131e2 <lfs_pair_fromle32>
    if (err) {
 8016944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016948:	2b00      	cmp	r3, #0
 801694a:	d002      	beq.n	8016952 <lfs_rawmkdir+0x13a>
        return err;
 801694c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016950:	e09c      	b.n	8016a8c <lfs_rawmkdir+0x274>
    }

    // current block not end of list?
    if (cwd.m.split) {
 8016952:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8016956:	2b00      	cmp	r3, #0
 8016958:	d04c      	beq.n	80169f4 <lfs_rawmkdir+0x1dc>
        // update tails, this creates a desync
        err = lfs_fs_preporphans(lfs, +1);
 801695a:	2101      	movs	r1, #1
 801695c:	6878      	ldr	r0, [r7, #4]
 801695e:	f002 f8cb 	bl	8018af8 <lfs_fs_preporphans>
 8016962:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8016966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801696a:	2b00      	cmp	r3, #0
 801696c:	d002      	beq.n	8016974 <lfs_rawmkdir+0x15c>
            return err;
 801696e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016972:	e08b      	b.n	8016a8c <lfs_rawmkdir+0x274>

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
 8016974:	2300      	movs	r3, #0
 8016976:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
        cwd.id = 0;
 801697a:	2300      	movs	r3, #0
 801697c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        lfs->mlist = &cwd;
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8016986:	629a      	str	r2, [r3, #40]	; 0x28

        lfs_pair_tole32(dir.pair);
 8016988:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801698c:	4618      	mov	r0, r3
 801698e:	f7fc fc42 	bl	8013216 <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 8016992:	4b40      	ldr	r3, [pc, #256]	; (8016a94 <lfs_rawmkdir+0x27c>)
 8016994:	617b      	str	r3, [r7, #20]
 8016996:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801699a:	61bb      	str	r3, [r7, #24]
 801699c:	f107 0214 	add.w	r2, r7, #20
 80169a0:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80169a4:	2301      	movs	r3, #1
 80169a6:	6878      	ldr	r0, [r7, #4]
 80169a8:	f7ff ff10 	bl	80167cc <lfs_dir_commit>
 80169ac:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
 80169b0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80169b4:	4618      	mov	r0, r3
 80169b6:	f7fc fc14 	bl	80131e2 <lfs_pair_fromle32>
        if (err) {
 80169ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d006      	beq.n	80169d0 <lfs_rawmkdir+0x1b8>
            lfs->mlist = cwd.next;
 80169c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	629a      	str	r2, [r3, #40]	; 0x28
            return err;
 80169ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80169ce:	e05d      	b.n	8016a8c <lfs_rawmkdir+0x274>
        }

        lfs->mlist = cwd.next;
 80169d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	629a      	str	r2, [r3, #40]	; 0x28
        err = lfs_fs_preporphans(lfs, -1);
 80169d8:	f04f 31ff 	mov.w	r1, #4294967295
 80169dc:	6878      	ldr	r0, [r7, #4]
 80169de:	f002 f88b 	bl	8018af8 <lfs_fs_preporphans>
 80169e2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 80169e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d002      	beq.n	80169f4 <lfs_rawmkdir+0x1dc>
            return err;
 80169ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80169f2:	e04b      	b.n	8016a8c <lfs_rawmkdir+0x274>
        }
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
 80169f4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80169f8:	4618      	mov	r0, r3
 80169fa:	f7fc fc0c 	bl	8013216 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 80169fe:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8016a02:	029b      	lsls	r3, r3, #10
 8016a04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8016a08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016a0e:	2300      	movs	r3, #0
 8016a10:	643b      	str	r3, [r7, #64]	; 0x40
 8016a12:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8016a16:	029a      	lsls	r2, r3, #10
 8016a18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016a1c:	4313      	orrs	r3, r2
 8016a1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8016a22:	647b      	str	r3, [r7, #68]	; 0x44
 8016a24:	683b      	ldr	r3, [r7, #0]
 8016a26:	64bb      	str	r3, [r7, #72]	; 0x48
 8016a28:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8016a2c:	029b      	lsls	r3, r3, #10
 8016a2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8016a32:	f043 0308 	orr.w	r3, r3, #8
 8016a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016a38:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8016a3c:	653b      	str	r3, [r7, #80]	; 0x50
 8016a3e:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8016a42:	f083 0301 	eor.w	r3, r3, #1
 8016a46:	b2db      	uxtb	r3, r3
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d001      	beq.n	8016a50 <lfs_rawmkdir+0x238>
 8016a4c:	4b11      	ldr	r3, [pc, #68]	; (8016a94 <lfs_rawmkdir+0x27c>)
 8016a4e:	e000      	b.n	8016a52 <lfs_rawmkdir+0x23a>
 8016a50:	2300      	movs	r3, #0
 8016a52:	657b      	str	r3, [r7, #84]	; 0x54
 8016a54:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8016a58:	65bb      	str	r3, [r7, #88]	; 0x58
 8016a5a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8016a5e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8016a62:	f103 0108 	add.w	r1, r3, #8
 8016a66:	2304      	movs	r3, #4
 8016a68:	6878      	ldr	r0, [r7, #4]
 8016a6a:	f7ff feaf 	bl	80167cc <lfs_dir_commit>
 8016a6e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},
            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},
            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},
            {LFS_MKTAG_IF(!cwd.m.split,
                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
    lfs_pair_fromle32(dir.pair);
 8016a72:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8016a76:	4618      	mov	r0, r3
 8016a78:	f7fc fbb3 	bl	80131e2 <lfs_pair_fromle32>
    if (err) {
 8016a7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d002      	beq.n	8016a8a <lfs_rawmkdir+0x272>
        return err;
 8016a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016a88:	e000      	b.n	8016a8c <lfs_rawmkdir+0x274>
    }

    return 0;
 8016a8a:	2300      	movs	r3, #0
}
 8016a8c:	4618      	mov	r0, r3
 8016a8e:	37e0      	adds	r7, #224	; 0xe0
 8016a90:	46bd      	mov	sp, r7
 8016a92:	bdb0      	pop	{r4, r5, r7, pc}
 8016a94:	600ffc08 	.word	0x600ffc08

08016a98 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8016a98:	b590      	push	{r4, r7, lr}
 8016a9a:	b087      	sub	sp, #28
 8016a9c:	af00      	add	r7, sp, #0
 8016a9e:	6078      	str	r0, [r7, #4]
 8016aa0:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8016aa2:	683b      	ldr	r3, [r7, #0]
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016aac:	69db      	ldr	r3, [r3, #28]
 8016aae:	3b08      	subs	r3, #8
 8016ab0:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8016ab2:	697a      	ldr	r2, [r7, #20]
 8016ab4:	693b      	ldr	r3, [r7, #16]
 8016ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8016aba:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d101      	bne.n	8016ac6 <lfs_ctz_index+0x2e>
        return 0;
 8016ac2:	2300      	movs	r3, #0
 8016ac4:	e01c      	b.n	8016b00 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	3b01      	subs	r3, #1
 8016aca:	4618      	mov	r0, r3
 8016acc:	f7fb ff58 	bl	8012980 <lfs_popc>
 8016ad0:	4603      	mov	r3, r0
 8016ad2:	3302      	adds	r3, #2
 8016ad4:	009b      	lsls	r3, r3, #2
 8016ad6:	697a      	ldr	r2, [r7, #20]
 8016ad8:	1ad2      	subs	r2, r2, r3
 8016ada:	693b      	ldr	r3, [r7, #16]
 8016adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8016ae0:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8016ae2:	693b      	ldr	r3, [r7, #16]
 8016ae4:	68fa      	ldr	r2, [r7, #12]
 8016ae6:	fb02 f303 	mul.w	r3, r2, r3
 8016aea:	697a      	ldr	r2, [r7, #20]
 8016aec:	1ad4      	subs	r4, r2, r3
 8016aee:	68f8      	ldr	r0, [r7, #12]
 8016af0:	f7fb ff46 	bl	8012980 <lfs_popc>
 8016af4:	4603      	mov	r3, r0
 8016af6:	009b      	lsls	r3, r3, #2
 8016af8:	1ae2      	subs	r2, r4, r3
 8016afa:	683b      	ldr	r3, [r7, #0]
 8016afc:	601a      	str	r2, [r3, #0]
    return i;
 8016afe:	68fb      	ldr	r3, [r7, #12]
}
 8016b00:	4618      	mov	r0, r3
 8016b02:	371c      	adds	r7, #28
 8016b04:	46bd      	mov	sp, r7
 8016b06:	bd90      	pop	{r4, r7, pc}

08016b08 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8016b08:	b590      	push	{r4, r7, lr}
 8016b0a:	b08f      	sub	sp, #60	; 0x3c
 8016b0c:	af04      	add	r7, sp, #16
 8016b0e:	60f8      	str	r0, [r7, #12]
 8016b10:	60b9      	str	r1, [r7, #8]
 8016b12:	607a      	str	r2, [r7, #4]
 8016b14:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8016b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d108      	bne.n	8016b2e <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8016b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8016b22:	601a      	str	r2, [r3, #0]
        *off = 0;
 8016b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b26:	2200      	movs	r2, #0
 8016b28:	601a      	str	r2, [r3, #0]
        return 0;
 8016b2a:	2300      	movs	r3, #0
 8016b2c:	e053      	b.n	8016bd6 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8016b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b30:	3b01      	subs	r3, #1
 8016b32:	617b      	str	r3, [r7, #20]
 8016b34:	f107 0314 	add.w	r3, r7, #20
 8016b38:	4619      	mov	r1, r3
 8016b3a:	68f8      	ldr	r0, [r7, #12]
 8016b3c:	f7ff ffac 	bl	8016a98 <lfs_ctz_index>
 8016b40:	4603      	mov	r3, r0
 8016b42:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8016b44:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016b48:	4619      	mov	r1, r3
 8016b4a:	68f8      	ldr	r0, [r7, #12]
 8016b4c:	f7ff ffa4 	bl	8016a98 <lfs_ctz_index>
 8016b50:	4603      	mov	r3, r0
 8016b52:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8016b54:	e034      	b.n	8016bc0 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8016b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016b58:	6a3b      	ldr	r3, [r7, #32]
 8016b5a:	1ad3      	subs	r3, r2, r3
 8016b5c:	3301      	adds	r3, #1
 8016b5e:	4618      	mov	r0, r3
 8016b60:	f7fb feef 	bl	8012942 <lfs_npw2>
 8016b64:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8016b66:	1e5c      	subs	r4, r3, #1
 8016b68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016b6a:	f7fb fefa 	bl	8012962 <lfs_ctz>
 8016b6e:	4603      	mov	r3, r0
 8016b70:	4619      	mov	r1, r3
 8016b72:	4620      	mov	r0, r4
 8016b74:	f7fb feae 	bl	80128d4 <lfs_min>
 8016b78:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8016b7a:	683b      	ldr	r3, [r7, #0]
 8016b7c:	69fa      	ldr	r2, [r7, #28]
 8016b7e:	0092      	lsls	r2, r2, #2
 8016b80:	2104      	movs	r1, #4
 8016b82:	9103      	str	r1, [sp, #12]
 8016b84:	4639      	mov	r1, r7
 8016b86:	9102      	str	r1, [sp, #8]
 8016b88:	9201      	str	r2, [sp, #4]
 8016b8a:	9300      	str	r3, [sp, #0]
 8016b8c:	2304      	movs	r3, #4
 8016b8e:	687a      	ldr	r2, [r7, #4]
 8016b90:	68b9      	ldr	r1, [r7, #8]
 8016b92:	68f8      	ldr	r0, [r7, #12]
 8016b94:	f7fb ff7a 	bl	8012a8c <lfs_bd_read>
 8016b98:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8016b9a:	683b      	ldr	r3, [r7, #0]
 8016b9c:	4618      	mov	r0, r3
 8016b9e:	f7fb ff09 	bl	80129b4 <lfs_fromle32>
 8016ba2:	4603      	mov	r3, r0
 8016ba4:	603b      	str	r3, [r7, #0]
        if (err) {
 8016ba6:	69bb      	ldr	r3, [r7, #24]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d001      	beq.n	8016bb0 <lfs_ctz_find+0xa8>
            return err;
 8016bac:	69bb      	ldr	r3, [r7, #24]
 8016bae:	e012      	b.n	8016bd6 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8016bb0:	2201      	movs	r2, #1
 8016bb2:	69fb      	ldr	r3, [r7, #28]
 8016bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8016bb8:	461a      	mov	r2, r3
 8016bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bbc:	1a9b      	subs	r3, r3, r2
 8016bbe:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8016bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016bc2:	6a3b      	ldr	r3, [r7, #32]
 8016bc4:	429a      	cmp	r2, r3
 8016bc6:	d8c6      	bhi.n	8016b56 <lfs_ctz_find+0x4e>
    }

    *block = head;
 8016bc8:	683a      	ldr	r2, [r7, #0]
 8016bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016bcc:	601a      	str	r2, [r3, #0]
    *off = pos;
 8016bce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016bd2:	601a      	str	r2, [r3, #0]
    return 0;
 8016bd4:	2300      	movs	r3, #0
}
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	372c      	adds	r7, #44	; 0x2c
 8016bda:	46bd      	mov	sp, r7
 8016bdc:	bd90      	pop	{r4, r7, pc}
	...

08016be0 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8016be0:	b580      	push	{r7, lr}
 8016be2:	b092      	sub	sp, #72	; 0x48
 8016be4:	af04      	add	r7, sp, #16
 8016be6:	60f8      	str	r0, [r7, #12]
 8016be8:	60b9      	str	r1, [r7, #8]
 8016bea:	607a      	str	r2, [r7, #4]
 8016bec:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8016bee:	f107 0320 	add.w	r3, r7, #32
 8016bf2:	4619      	mov	r1, r3
 8016bf4:	68f8      	ldr	r0, [r7, #12]
 8016bf6:	f7fc fdd3 	bl	80137a0 <lfs_alloc>
 8016bfa:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 8016bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d001      	beq.n	8016c06 <lfs_ctz_extend+0x26>
            return err;
 8016c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c04:	e0e9      	b.n	8016dda <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8016c06:	6a3b      	ldr	r3, [r7, #32]
 8016c08:	4619      	mov	r1, r3
 8016c0a:	68f8      	ldr	r0, [r7, #12]
 8016c0c:	f7fc fa30 	bl	8013070 <lfs_bd_erase>
 8016c10:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8016c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d006      	beq.n	8016c26 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8016c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c1a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8016c1e:	f000 80cb 	beq.w	8016db8 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8016c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c24:	e0d9      	b.n	8016dda <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8016c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d107      	bne.n	8016c3c <lfs_ctz_extend+0x5c>
                *block = nblock;
 8016c2c:	6a3a      	ldr	r2, [r7, #32]
 8016c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016c30:	601a      	str	r2, [r3, #0]
                *off = 0;
 8016c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016c34:	2200      	movs	r2, #0
 8016c36:	601a      	str	r2, [r3, #0]
                return 0;
 8016c38:	2300      	movs	r3, #0
 8016c3a:	e0ce      	b.n	8016dda <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8016c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c3e:	3b01      	subs	r3, #1
 8016c40:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8016c42:	f107 031c 	add.w	r3, r7, #28
 8016c46:	4619      	mov	r1, r3
 8016c48:	68f8      	ldr	r0, [r7, #12]
 8016c4a:	f7ff ff25 	bl	8016a98 <lfs_ctz_index>
 8016c4e:	4603      	mov	r3, r0
 8016c50:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 8016c52:	69fb      	ldr	r3, [r7, #28]
 8016c54:	3301      	adds	r3, #1
 8016c56:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016c5c:	69da      	ldr	r2, [r3, #28]
 8016c5e:	69fb      	ldr	r3, [r7, #28]
 8016c60:	429a      	cmp	r2, r3
 8016c62:	d044      	beq.n	8016cee <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8016c64:	2300      	movs	r3, #0
 8016c66:	637b      	str	r3, [r7, #52]	; 0x34
 8016c68:	e035      	b.n	8016cd6 <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8016c6a:	69fa      	ldr	r2, [r7, #28]
 8016c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c6e:	1ad2      	subs	r2, r2, r3
 8016c70:	2301      	movs	r3, #1
 8016c72:	9303      	str	r3, [sp, #12]
 8016c74:	f107 0317 	add.w	r3, r7, #23
 8016c78:	9302      	str	r3, [sp, #8]
 8016c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c7c:	9301      	str	r3, [sp, #4]
 8016c7e:	683b      	ldr	r3, [r7, #0]
 8016c80:	9300      	str	r3, [sp, #0]
 8016c82:	4613      	mov	r3, r2
 8016c84:	687a      	ldr	r2, [r7, #4]
 8016c86:	2100      	movs	r1, #0
 8016c88:	68f8      	ldr	r0, [r7, #12]
 8016c8a:	f7fb feff 	bl	8012a8c <lfs_bd_read>
 8016c8e:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8016c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d001      	beq.n	8016c9a <lfs_ctz_extend+0xba>
                        return err;
 8016c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c98:	e09f      	b.n	8016dda <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 8016c9a:	6a3b      	ldr	r3, [r7, #32]
 8016c9c:	2201      	movs	r2, #1
 8016c9e:	9203      	str	r2, [sp, #12]
 8016ca0:	f107 0217 	add.w	r2, r7, #23
 8016ca4:	9202      	str	r2, [sp, #8]
 8016ca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016ca8:	9201      	str	r2, [sp, #4]
 8016caa:	9300      	str	r3, [sp, #0]
 8016cac:	2301      	movs	r3, #1
 8016cae:	687a      	ldr	r2, [r7, #4]
 8016cb0:	68b9      	ldr	r1, [r7, #8]
 8016cb2:	68f8      	ldr	r0, [r7, #12]
 8016cb4:	f7fc f930 	bl	8012f18 <lfs_bd_prog>
 8016cb8:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8016cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d007      	beq.n	8016cd0 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8016cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cc2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8016cc6:	d101      	bne.n	8016ccc <lfs_ctz_extend+0xec>
                            goto relocate;
 8016cc8:	bf00      	nop
                    goto relocate;
 8016cca:	e075      	b.n	8016db8 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8016ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 8016cce:	e084      	b.n	8016dda <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8016cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cd2:	3301      	adds	r3, #1
 8016cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8016cd6:	69fb      	ldr	r3, [r7, #28]
 8016cd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016cda:	429a      	cmp	r2, r3
 8016cdc:	d3c5      	bcc.n	8016c6a <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8016cde:	6a3a      	ldr	r2, [r7, #32]
 8016ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016ce2:	601a      	str	r2, [r3, #0]
                *off = noff;
 8016ce4:	69fa      	ldr	r2, [r7, #28]
 8016ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016ce8:	601a      	str	r2, [r3, #0]
                return 0;
 8016cea:	2300      	movs	r3, #0
 8016cec:	e075      	b.n	8016dda <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 8016cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cf0:	3301      	adds	r3, #1
 8016cf2:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8016cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016cf6:	f7fb fe34 	bl	8012962 <lfs_ctz>
 8016cfa:	4603      	mov	r3, r0
 8016cfc:	3301      	adds	r3, #1
 8016cfe:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8016d00:	683b      	ldr	r3, [r7, #0]
 8016d02:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8016d04:	2300      	movs	r3, #0
 8016d06:	633b      	str	r3, [r7, #48]	; 0x30
 8016d08:	e049      	b.n	8016d9e <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8016d0a:	69bb      	ldr	r3, [r7, #24]
 8016d0c:	4618      	mov	r0, r3
 8016d0e:	f7fb fe5c 	bl	80129ca <lfs_tole32>
 8016d12:	4603      	mov	r3, r0
 8016d14:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8016d16:	6a3b      	ldr	r3, [r7, #32]
 8016d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016d1a:	0092      	lsls	r2, r2, #2
 8016d1c:	2104      	movs	r1, #4
 8016d1e:	9103      	str	r1, [sp, #12]
 8016d20:	f107 0118 	add.w	r1, r7, #24
 8016d24:	9102      	str	r1, [sp, #8]
 8016d26:	9201      	str	r2, [sp, #4]
 8016d28:	9300      	str	r3, [sp, #0]
 8016d2a:	2301      	movs	r3, #1
 8016d2c:	687a      	ldr	r2, [r7, #4]
 8016d2e:	68b9      	ldr	r1, [r7, #8]
 8016d30:	68f8      	ldr	r0, [r7, #12]
 8016d32:	f7fc f8f1 	bl	8012f18 <lfs_bd_prog>
 8016d36:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8016d38:	69bb      	ldr	r3, [r7, #24]
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	f7fb fe3a 	bl	80129b4 <lfs_fromle32>
 8016d40:	4603      	mov	r3, r0
 8016d42:	61bb      	str	r3, [r7, #24]
                if (err) {
 8016d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d005      	beq.n	8016d56 <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8016d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d4c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8016d50:	d034      	beq.n	8016dbc <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8016d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d54:	e041      	b.n	8016dda <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8016d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d58:	3b01      	subs	r3, #1
 8016d5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016d5c:	429a      	cmp	r2, r3
 8016d5e:	d01b      	beq.n	8016d98 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8016d60:	69bb      	ldr	r3, [r7, #24]
 8016d62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016d64:	0092      	lsls	r2, r2, #2
 8016d66:	2104      	movs	r1, #4
 8016d68:	9103      	str	r1, [sp, #12]
 8016d6a:	f107 0118 	add.w	r1, r7, #24
 8016d6e:	9102      	str	r1, [sp, #8]
 8016d70:	9201      	str	r2, [sp, #4]
 8016d72:	9300      	str	r3, [sp, #0]
 8016d74:	2304      	movs	r3, #4
 8016d76:	687a      	ldr	r2, [r7, #4]
 8016d78:	2100      	movs	r1, #0
 8016d7a:	68f8      	ldr	r0, [r7, #12]
 8016d7c:	f7fb fe86 	bl	8012a8c <lfs_bd_read>
 8016d80:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8016d82:	69bb      	ldr	r3, [r7, #24]
 8016d84:	4618      	mov	r0, r3
 8016d86:	f7fb fe15 	bl	80129b4 <lfs_fromle32>
 8016d8a:	4603      	mov	r3, r0
 8016d8c:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8016d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d001      	beq.n	8016d98 <lfs_ctz_extend+0x1b8>
                        return err;
 8016d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d96:	e020      	b.n	8016dda <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8016d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d9a:	3301      	adds	r3, #1
 8016d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8016d9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016da2:	429a      	cmp	r2, r3
 8016da4:	d3b1      	bcc.n	8016d0a <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8016da6:	6a3a      	ldr	r2, [r7, #32]
 8016da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016daa:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8016dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dae:	009a      	lsls	r2, r3, #2
 8016db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016db2:	601a      	str	r2, [r3, #0]
            return 0;
 8016db4:	2300      	movs	r3, #0
 8016db6:	e010      	b.n	8016dda <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8016db8:	bf00      	nop
 8016dba:	e000      	b.n	8016dbe <lfs_ctz_extend+0x1de>
                        goto relocate;
 8016dbc:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8016dbe:	6a3b      	ldr	r3, [r7, #32]
 8016dc0:	4a08      	ldr	r2, [pc, #32]	; (8016de4 <lfs_ctz_extend+0x204>)
 8016dc2:	9200      	str	r2, [sp, #0]
 8016dc4:	f640 22da 	movw	r2, #2778	; 0xada
 8016dc8:	4907      	ldr	r1, [pc, #28]	; (8016de8 <lfs_ctz_extend+0x208>)
 8016dca:	4808      	ldr	r0, [pc, #32]	; (8016dec <lfs_ctz_extend+0x20c>)
 8016dcc:	f004 ff3a 	bl	801bc44 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8016dd0:	68b9      	ldr	r1, [r7, #8]
 8016dd2:	68f8      	ldr	r0, [r7, #12]
 8016dd4:	f7fb fe34 	bl	8012a40 <lfs_cache_drop>
    while (true) {
 8016dd8:	e709      	b.n	8016bee <lfs_ctz_extend+0xe>
    }
}
 8016dda:	4618      	mov	r0, r3
 8016ddc:	3738      	adds	r7, #56	; 0x38
 8016dde:	46bd      	mov	sp, r7
 8016de0:	bd80      	pop	{r7, pc}
 8016de2:	bf00      	nop
 8016de4:	08021a88 	.word	0x08021a88
 8016de8:	08021974 	.word	0x08021974
 8016dec:	08021b08 	.word	0x08021b08

08016df0 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8016df0:	b580      	push	{r7, lr}
 8016df2:	b090      	sub	sp, #64	; 0x40
 8016df4:	af04      	add	r7, sp, #16
 8016df6:	60f8      	str	r0, [r7, #12]
 8016df8:	60b9      	str	r1, [r7, #8]
 8016dfa:	607a      	str	r2, [r7, #4]
 8016dfc:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8016dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d101      	bne.n	8016e08 <lfs_ctz_traverse+0x18>
        return 0;
 8016e04:	2300      	movs	r3, #0
 8016e06:	e06b      	b.n	8016ee0 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8016e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e0a:	3b01      	subs	r3, #1
 8016e0c:	61fb      	str	r3, [r7, #28]
 8016e0e:	f107 031c 	add.w	r3, r7, #28
 8016e12:	4619      	mov	r1, r3
 8016e14:	68f8      	ldr	r0, [r7, #12]
 8016e16:	f7ff fe3f 	bl	8016a98 <lfs_ctz_index>
 8016e1a:	4603      	mov	r3, r0
 8016e1c:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 8016e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e20:	6839      	ldr	r1, [r7, #0]
 8016e22:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8016e24:	4798      	blx	r3
 8016e26:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8016e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d001      	beq.n	8016e32 <lfs_ctz_traverse+0x42>
            return err;
 8016e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e30:	e056      	b.n	8016ee0 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8016e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d101      	bne.n	8016e3c <lfs_ctz_traverse+0x4c>
            return 0;
 8016e38:	2300      	movs	r3, #0
 8016e3a:	e051      	b.n	8016ee0 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8016e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e3e:	f003 0301 	and.w	r3, r3, #1
 8016e42:	f1c3 0302 	rsb	r3, r3, #2
 8016e46:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8016e48:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8016e4a:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8016e4c:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8016e4e:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8016e50:	9303      	str	r3, [sp, #12]
 8016e52:	f107 0314 	add.w	r3, r7, #20
 8016e56:	9302      	str	r3, [sp, #8]
 8016e58:	2300      	movs	r3, #0
 8016e5a:	9301      	str	r3, [sp, #4]
 8016e5c:	683b      	ldr	r3, [r7, #0]
 8016e5e:	9300      	str	r3, [sp, #0]
 8016e60:	4613      	mov	r3, r2
 8016e62:	687a      	ldr	r2, [r7, #4]
 8016e64:	68b9      	ldr	r1, [r7, #8]
 8016e66:	68f8      	ldr	r0, [r7, #12]
 8016e68:	f7fb fe10 	bl	8012a8c <lfs_bd_read>
 8016e6c:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8016e6e:	697b      	ldr	r3, [r7, #20]
 8016e70:	4618      	mov	r0, r3
 8016e72:	f7fb fd9f 	bl	80129b4 <lfs_fromle32>
 8016e76:	4603      	mov	r3, r0
 8016e78:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8016e7a:	69bb      	ldr	r3, [r7, #24]
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	f7fb fd99 	bl	80129b4 <lfs_fromle32>
 8016e82:	4603      	mov	r3, r0
 8016e84:	61bb      	str	r3, [r7, #24]
        if (err) {
 8016e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d001      	beq.n	8016e90 <lfs_ctz_traverse+0xa0>
            return err;
 8016e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e8e:	e027      	b.n	8016ee0 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8016e90:	2300      	movs	r3, #0
 8016e92:	62bb      	str	r3, [r7, #40]	; 0x28
 8016e94:	e012      	b.n	8016ebc <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8016e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e98:	009b      	lsls	r3, r3, #2
 8016e9a:	3330      	adds	r3, #48	; 0x30
 8016e9c:	443b      	add	r3, r7
 8016e9e:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8016ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ea4:	4611      	mov	r1, r2
 8016ea6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8016ea8:	4798      	blx	r3
 8016eaa:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8016eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d001      	beq.n	8016eb6 <lfs_ctz_traverse+0xc6>
                return err;
 8016eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eb4:	e014      	b.n	8016ee0 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8016eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016eb8:	3301      	adds	r3, #1
 8016eba:	62bb      	str	r3, [r7, #40]	; 0x28
 8016ebc:	6a3b      	ldr	r3, [r7, #32]
 8016ebe:	3b01      	subs	r3, #1
 8016ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016ec2:	429a      	cmp	r2, r3
 8016ec4:	dbe7      	blt.n	8016e96 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8016ec6:	6a3b      	ldr	r3, [r7, #32]
 8016ec8:	3b01      	subs	r3, #1
 8016eca:	009b      	lsls	r3, r3, #2
 8016ecc:	3330      	adds	r3, #48	; 0x30
 8016ece:	443b      	add	r3, r7
 8016ed0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8016ed4:	603b      	str	r3, [r7, #0]
        index -= count;
 8016ed6:	6a3b      	ldr	r3, [r7, #32]
 8016ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016eda:	1ad3      	subs	r3, r2, r3
 8016edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8016ede:	e79e      	b.n	8016e1e <lfs_ctz_traverse+0x2e>
    }
}
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	3730      	adds	r7, #48	; 0x30
 8016ee4:	46bd      	mov	sp, r7
 8016ee6:	bd80      	pop	{r7, pc}

08016ee8 <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8016ee8:	b5b0      	push	{r4, r5, r7, lr}
 8016eea:	b09a      	sub	sp, #104	; 0x68
 8016eec:	af02      	add	r7, sp, #8
 8016eee:	60f8      	str	r0, [r7, #12]
 8016ef0:	60b9      	str	r1, [r7, #8]
 8016ef2:	607a      	str	r2, [r7, #4]
 8016ef4:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8016ef6:	683b      	ldr	r3, [r7, #0]
 8016ef8:	f003 0302 	and.w	r3, r3, #2
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d008      	beq.n	8016f12 <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8016f00:	68f8      	ldr	r0, [r7, #12]
 8016f02:	f002 f877 	bl	8018ff4 <lfs_fs_forceconsistency>
 8016f06:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 8016f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d001      	beq.n	8016f12 <lfs_file_rawopencfg+0x2a>
            return err;
 8016f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016f10:	e1b0      	b.n	8017274 <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8016f12:	68bb      	ldr	r3, [r7, #8]
 8016f14:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016f16:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 8016f18:	683a      	ldr	r2, [r7, #0]
 8016f1a:	68bb      	ldr	r3, [r7, #8]
 8016f1c:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 8016f1e:	68bb      	ldr	r3, [r7, #8]
 8016f20:	2200      	movs	r2, #0
 8016f22:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 8016f24:	68bb      	ldr	r3, [r7, #8]
 8016f26:	2200      	movs	r2, #0
 8016f28:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 8016f2a:	68bb      	ldr	r3, [r7, #8]
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8016f30:	68bb      	ldr	r3, [r7, #8]
 8016f32:	f103 0108 	add.w	r1, r3, #8
 8016f36:	68bb      	ldr	r3, [r7, #8]
 8016f38:	3304      	adds	r3, #4
 8016f3a:	1d3a      	adds	r2, r7, #4
 8016f3c:	68f8      	ldr	r0, [r7, #12]
 8016f3e:	f7fd ff7b 	bl	8014e38 <lfs_dir_find>
 8016f42:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8016f44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	da0c      	bge.n	8016f64 <lfs_file_rawopencfg+0x7c>
 8016f4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016f4c:	f113 0f02 	cmn.w	r3, #2
 8016f50:	d105      	bne.n	8016f5e <lfs_file_rawopencfg+0x76>
 8016f52:	68bb      	ldr	r3, [r7, #8]
 8016f54:	889b      	ldrh	r3, [r3, #4]
 8016f56:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8016f5a:	4293      	cmp	r3, r2
 8016f5c:	d102      	bne.n	8016f64 <lfs_file_rawopencfg+0x7c>
        err = tag;
 8016f5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016f60:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8016f62:	e17c      	b.n	801725e <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8016f64:	68bb      	ldr	r3, [r7, #8]
 8016f66:	2201      	movs	r2, #1
 8016f68:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8016f6a:	68b9      	ldr	r1, [r7, #8]
 8016f6c:	68f8      	ldr	r0, [r7, #12]
 8016f6e:	f7fc fbae 	bl	80136ce <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8016f72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016f74:	f113 0f02 	cmn.w	r3, #2
 8016f78:	d14e      	bne.n	8017018 <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8016f7a:	683b      	ldr	r3, [r7, #0]
 8016f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d103      	bne.n	8016f8c <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8016f84:	f06f 0301 	mvn.w	r3, #1
 8016f88:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8016f8a:	e168      	b.n	801725e <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	4618      	mov	r0, r3
 8016f90:	f7e9 f986 	bl	80002a0 <strlen>
 8016f94:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016f9c:	429a      	cmp	r2, r3
 8016f9e:	d903      	bls.n	8016fa8 <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8016fa0:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8016fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8016fa6:	e15a      	b.n	801725e <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8016fa8:	68bb      	ldr	r3, [r7, #8]
 8016faa:	f103 0108 	add.w	r1, r3, #8
 8016fae:	68bb      	ldr	r3, [r7, #8]
 8016fb0:	889b      	ldrh	r3, [r3, #4]
 8016fb2:	029b      	lsls	r3, r3, #10
 8016fb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8016fb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016fbe:	2300      	movs	r3, #0
 8016fc0:	633b      	str	r3, [r7, #48]	; 0x30
 8016fc2:	68bb      	ldr	r3, [r7, #8]
 8016fc4:	889b      	ldrh	r3, [r3, #4]
 8016fc6:	029a      	lsls	r2, r3, #10
 8016fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016fca:	4313      	orrs	r3, r2
 8016fcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8016fd6:	68bb      	ldr	r3, [r7, #8]
 8016fd8:	889b      	ldrh	r3, [r3, #4]
 8016fda:	029b      	lsls	r3, r3, #10
 8016fdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8016fe0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016fe6:	2300      	movs	r3, #0
 8016fe8:	643b      	str	r3, [r7, #64]	; 0x40
 8016fea:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8016fee:	2303      	movs	r3, #3
 8016ff0:	68f8      	ldr	r0, [r7, #12]
 8016ff2:	f7ff fbeb 	bl	80167cc <lfs_dir_commit>
 8016ff6:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8016ff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ffa:	f113 0f1c 	cmn.w	r3, #28
 8016ffe:	d001      	beq.n	8017004 <lfs_file_rawopencfg+0x11c>
 8017000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017002:	e001      	b.n	8017008 <lfs_file_rawopencfg+0x120>
 8017004:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8017008:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 801700a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801700c:	2b00      	cmp	r3, #0
 801700e:	f040 8125 	bne.w	801725c <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8017012:	4b9a      	ldr	r3, [pc, #616]	; (801727c <lfs_file_rawopencfg+0x394>)
 8017014:	65bb      	str	r3, [r7, #88]	; 0x58
 8017016:	e044      	b.n	80170a2 <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8017018:	683b      	ldr	r3, [r7, #0]
 801701a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801701e:	2b00      	cmp	r3, #0
 8017020:	d003      	beq.n	801702a <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 8017022:	f06f 0310 	mvn.w	r3, #16
 8017026:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8017028:	e119      	b.n	801725e <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 801702a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801702c:	4618      	mov	r0, r3
 801702e:	f7fc f93d 	bl	80132ac <lfs_tag_type3>
 8017032:	4603      	mov	r3, r0
 8017034:	2b01      	cmp	r3, #1
 8017036:	d003      	beq.n	8017040 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 8017038:	f06f 0314 	mvn.w	r3, #20
 801703c:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 801703e:	e10e      	b.n	801725e <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8017040:	683b      	ldr	r3, [r7, #0]
 8017042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017046:	2b00      	cmp	r3, #0
 8017048:	d00e      	beq.n	8017068 <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 801704a:	68bb      	ldr	r3, [r7, #8]
 801704c:	889b      	ldrh	r3, [r3, #4]
 801704e:	029b      	lsls	r3, r3, #10
 8017050:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017054:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017058:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 801705a:	68bb      	ldr	r3, [r7, #8]
 801705c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801705e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8017062:	68bb      	ldr	r3, [r7, #8]
 8017064:	631a      	str	r2, [r3, #48]	; 0x30
 8017066:	e01c      	b.n	80170a2 <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8017068:	68bb      	ldr	r3, [r7, #8]
 801706a:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 801706e:	68bb      	ldr	r3, [r7, #8]
 8017070:	889b      	ldrh	r3, [r3, #4]
 8017072:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8017074:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017078:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 801707c:	68ba      	ldr	r2, [r7, #8]
 801707e:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8017080:	9200      	str	r2, [sp, #0]
 8017082:	4a7f      	ldr	r2, [pc, #508]	; (8017280 <lfs_file_rawopencfg+0x398>)
 8017084:	68f8      	ldr	r0, [r7, #12]
 8017086:	f7fc fd25 	bl	8013ad4 <lfs_dir_get>
 801708a:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 801708c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801708e:	2b00      	cmp	r3, #0
 8017090:	da02      	bge.n	8017098 <lfs_file_rawopencfg+0x1b0>
            err = tag;
 8017092:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017094:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8017096:	e0e2      	b.n	801725e <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8017098:	68bb      	ldr	r3, [r7, #8]
 801709a:	3328      	adds	r3, #40	; 0x28
 801709c:	4618      	mov	r0, r3
 801709e:	f7fc fa37 	bl	8013510 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80170a2:	2300      	movs	r3, #0
 80170a4:	657b      	str	r3, [r7, #84]	; 0x54
 80170a6:	e063      	b.n	8017170 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 80170a8:	68bb      	ldr	r3, [r7, #8]
 80170aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80170ac:	f003 0301 	and.w	r3, r3, #1
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d03c      	beq.n	801712e <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80170b4:	68bb      	ldr	r3, [r7, #8]
 80170b6:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 80170ba:	68bb      	ldr	r3, [r7, #8]
 80170bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80170be:	6859      	ldr	r1, [r3, #4]
 80170c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80170c2:	4613      	mov	r3, r2
 80170c4:	005b      	lsls	r3, r3, #1
 80170c6:	4413      	add	r3, r2
 80170c8:	009b      	lsls	r3, r3, #2
 80170ca:	440b      	add	r3, r1
 80170cc:	781b      	ldrb	r3, [r3, #0]
 80170ce:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80170d2:	051a      	lsls	r2, r3, #20
 80170d4:	68bb      	ldr	r3, [r7, #8]
 80170d6:	889b      	ldrh	r3, [r3, #4]
 80170d8:	029b      	lsls	r3, r3, #10
 80170da:	ea42 0103 	orr.w	r1, r2, r3
 80170de:	68bb      	ldr	r3, [r7, #8]
 80170e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80170e2:	6858      	ldr	r0, [r3, #4]
 80170e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80170e6:	4613      	mov	r3, r2
 80170e8:	005b      	lsls	r3, r3, #1
 80170ea:	4413      	add	r3, r2
 80170ec:	009b      	lsls	r3, r3, #2
 80170ee:	4403      	add	r3, r0
 80170f0:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80170f2:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 80170f6:	68bb      	ldr	r3, [r7, #8]
 80170f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80170fa:	6859      	ldr	r1, [r3, #4]
 80170fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80170fe:	4613      	mov	r3, r2
 8017100:	005b      	lsls	r3, r3, #1
 8017102:	4413      	add	r3, r2
 8017104:	009b      	lsls	r3, r3, #2
 8017106:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8017108:	685b      	ldr	r3, [r3, #4]
 801710a:	9300      	str	r3, [sp, #0]
 801710c:	4603      	mov	r3, r0
 801710e:	4a5d      	ldr	r2, [pc, #372]	; (8017284 <lfs_file_rawopencfg+0x39c>)
 8017110:	4621      	mov	r1, r4
 8017112:	68f8      	ldr	r0, [r7, #12]
 8017114:	f7fc fcde 	bl	8013ad4 <lfs_dir_get>
 8017118:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 801711a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801711c:	2b00      	cmp	r3, #0
 801711e:	da06      	bge.n	801712e <lfs_file_rawopencfg+0x246>
 8017120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017122:	f113 0f02 	cmn.w	r3, #2
 8017126:	d002      	beq.n	801712e <lfs_file_rawopencfg+0x246>
                err = res;
 8017128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801712a:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 801712c:	e097      	b.n	801725e <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 801712e:	68bb      	ldr	r3, [r7, #8]
 8017130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017132:	f003 0302 	and.w	r3, r3, #2
 8017136:	2b00      	cmp	r3, #0
 8017138:	d017      	beq.n	801716a <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 801713a:	68bb      	ldr	r3, [r7, #8]
 801713c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801713e:	6859      	ldr	r1, [r3, #4]
 8017140:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017142:	4613      	mov	r3, r2
 8017144:	005b      	lsls	r3, r3, #1
 8017146:	4413      	add	r3, r2
 8017148:	009b      	lsls	r3, r3, #2
 801714a:	440b      	add	r3, r1
 801714c:	689a      	ldr	r2, [r3, #8]
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017152:	429a      	cmp	r2, r3
 8017154:	d903      	bls.n	801715e <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 8017156:	f06f 031b 	mvn.w	r3, #27
 801715a:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 801715c:	e07f      	b.n	801725e <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 801715e:	68bb      	ldr	r3, [r7, #8]
 8017160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017162:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8017166:	68bb      	ldr	r3, [r7, #8]
 8017168:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 801716a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801716c:	3301      	adds	r3, #1
 801716e:	657b      	str	r3, [r7, #84]	; 0x54
 8017170:	68bb      	ldr	r3, [r7, #8]
 8017172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017174:	689b      	ldr	r3, [r3, #8]
 8017176:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017178:	429a      	cmp	r2, r3
 801717a:	d395      	bcc.n	80170a8 <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 801717c:	68bb      	ldr	r3, [r7, #8]
 801717e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	2b00      	cmp	r3, #0
 8017184:	d005      	beq.n	8017192 <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8017186:	68bb      	ldr	r3, [r7, #8]
 8017188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801718a:	681a      	ldr	r2, [r3, #0]
 801718c:	68bb      	ldr	r3, [r7, #8]
 801718e:	64da      	str	r2, [r3, #76]	; 0x4c
 8017190:	e010      	b.n	80171b4 <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017198:	4618      	mov	r0, r3
 801719a:	f7fb fc3a 	bl	8012a12 <lfs_malloc>
 801719e:	4602      	mov	r2, r0
 80171a0:	68bb      	ldr	r3, [r7, #8]
 80171a2:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 80171a4:	68bb      	ldr	r3, [r7, #8]
 80171a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d103      	bne.n	80171b4 <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 80171ac:	f06f 030b 	mvn.w	r3, #11
 80171b0:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80171b2:	e054      	b.n	801725e <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 80171b4:	68bb      	ldr	r3, [r7, #8]
 80171b6:	3340      	adds	r3, #64	; 0x40
 80171b8:	4619      	mov	r1, r3
 80171ba:	68f8      	ldr	r0, [r7, #12]
 80171bc:	f7fb fc4f 	bl	8012a5e <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 80171c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80171c2:	4618      	mov	r0, r3
 80171c4:	f7fc f872 	bl	80132ac <lfs_tag_type3>
 80171c8:	4603      	mov	r3, r0
 80171ca:	461a      	mov	r2, r3
 80171cc:	f240 2301 	movw	r3, #513	; 0x201
 80171d0:	429a      	cmp	r2, r3
 80171d2:	d141      	bne.n	8017258 <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 80171d4:	68bb      	ldr	r3, [r7, #8]
 80171d6:	f06f 0201 	mvn.w	r2, #1
 80171da:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 80171dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80171de:	4618      	mov	r0, r3
 80171e0:	f7fc f89e 	bl	8013320 <lfs_tag_size>
 80171e4:	4602      	mov	r2, r0
 80171e6:	68bb      	ldr	r3, [r7, #8]
 80171e8:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 80171ea:	68bb      	ldr	r3, [r7, #8]
 80171ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80171ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80171f2:	68bb      	ldr	r3, [r7, #8]
 80171f4:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 80171f6:	68bb      	ldr	r3, [r7, #8]
 80171f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80171fa:	68bb      	ldr	r3, [r7, #8]
 80171fc:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 80171fe:	68bb      	ldr	r3, [r7, #8]
 8017200:	2200      	movs	r2, #0
 8017202:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 8017204:	68fb      	ldr	r3, [r7, #12]
 8017206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801720a:	68bb      	ldr	r3, [r7, #8]
 801720c:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 801720e:	68bb      	ldr	r3, [r7, #8]
 8017210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017212:	2b00      	cmp	r3, #0
 8017214:	d020      	beq.n	8017258 <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8017216:	68bb      	ldr	r3, [r7, #8]
 8017218:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 801721c:	68bb      	ldr	r3, [r7, #8]
 801721e:	889b      	ldrh	r3, [r3, #4]
 8017220:	029c      	lsls	r4, r3, #10
 8017222:	68bb      	ldr	r3, [r7, #8]
 8017224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017226:	f240 31fe 	movw	r1, #1022	; 0x3fe
 801722a:	4618      	mov	r0, r3
 801722c:	f7fb fb52 	bl	80128d4 <lfs_min>
 8017230:	4603      	mov	r3, r0
 8017232:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8017234:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8017238:	68bb      	ldr	r3, [r7, #8]
 801723a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801723c:	9300      	str	r3, [sp, #0]
 801723e:	4613      	mov	r3, r2
 8017240:	4a0f      	ldr	r2, [pc, #60]	; (8017280 <lfs_file_rawopencfg+0x398>)
 8017242:	4629      	mov	r1, r5
 8017244:	68f8      	ldr	r0, [r7, #12]
 8017246:	f7fc fc45 	bl	8013ad4 <lfs_dir_get>
 801724a:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 801724c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801724e:	2b00      	cmp	r3, #0
 8017250:	da02      	bge.n	8017258 <lfs_file_rawopencfg+0x370>
                err = res;
 8017252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017254:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8017256:	e002      	b.n	801725e <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 8017258:	2300      	movs	r3, #0
 801725a:	e00b      	b.n	8017274 <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 801725c:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 801725e:	68bb      	ldr	r3, [r7, #8]
 8017260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017262:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8017266:	68bb      	ldr	r3, [r7, #8]
 8017268:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 801726a:	68b9      	ldr	r1, [r7, #8]
 801726c:	68f8      	ldr	r0, [r7, #12]
 801726e:	f000 f80b 	bl	8017288 <lfs_file_rawclose>
    return err;
 8017272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8017274:	4618      	mov	r0, r3
 8017276:	3760      	adds	r7, #96	; 0x60
 8017278:	46bd      	mov	sp, r7
 801727a:	bdb0      	pop	{r4, r5, r7, pc}
 801727c:	20100000 	.word	0x20100000
 8017280:	700ffc00 	.word	0x700ffc00
 8017284:	7ffffc00 	.word	0x7ffffc00

08017288 <lfs_file_rawclose>:
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
    return err;
}
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 8017288:	b580      	push	{r7, lr}
 801728a:	b084      	sub	sp, #16
 801728c:	af00      	add	r7, sp, #0
 801728e:	6078      	str	r0, [r7, #4]
 8017290:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 8017292:	6839      	ldr	r1, [r7, #0]
 8017294:	6878      	ldr	r0, [r7, #4]
 8017296:	f000 f9e5 	bl	8017664 <lfs_file_rawsync>
 801729a:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 801729c:	6839      	ldr	r1, [r7, #0]
 801729e:	6878      	ldr	r0, [r7, #4]
 80172a0:	f7fc f9f3 	bl	801368a <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 80172a4:	683b      	ldr	r3, [r7, #0]
 80172a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80172a8:	681b      	ldr	r3, [r3, #0]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d104      	bne.n	80172b8 <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 80172ae:	683b      	ldr	r3, [r7, #0]
 80172b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80172b2:	4618      	mov	r0, r3
 80172b4:	f7fb fbb9 	bl	8012a2a <lfs_free>
    }

    return err;
 80172b8:	68fb      	ldr	r3, [r7, #12]
}
 80172ba:	4618      	mov	r0, r3
 80172bc:	3710      	adds	r7, #16
 80172be:	46bd      	mov	sp, r7
 80172c0:	bd80      	pop	{r7, pc}
	...

080172c4 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 80172c4:	b590      	push	{r4, r7, lr}
 80172c6:	b08d      	sub	sp, #52	; 0x34
 80172c8:	af06      	add	r7, sp, #24
 80172ca:	6078      	str	r0, [r7, #4]
 80172cc:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 80172ce:	f107 030c 	add.w	r3, r7, #12
 80172d2:	4619      	mov	r1, r3
 80172d4:	6878      	ldr	r0, [r7, #4]
 80172d6:	f7fc fa63 	bl	80137a0 <lfs_alloc>
 80172da:	6138      	str	r0, [r7, #16]
        if (err) {
 80172dc:	693b      	ldr	r3, [r7, #16]
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d001      	beq.n	80172e6 <lfs_file_relocate+0x22>
            return err;
 80172e2:	693b      	ldr	r3, [r7, #16]
 80172e4:	e0bb      	b.n	801745e <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	4619      	mov	r1, r3
 80172ea:	6878      	ldr	r0, [r7, #4]
 80172ec:	f7fb fec0 	bl	8013070 <lfs_bd_erase>
 80172f0:	6138      	str	r0, [r7, #16]
        if (err) {
 80172f2:	693b      	ldr	r3, [r7, #16]
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d006      	beq.n	8017306 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 80172f8:	693b      	ldr	r3, [r7, #16]
 80172fa:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80172fe:	f000 809b 	beq.w	8017438 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8017302:	693b      	ldr	r3, [r7, #16]
 8017304:	e0ab      	b.n	801745e <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8017306:	2300      	movs	r3, #0
 8017308:	617b      	str	r3, [r7, #20]
 801730a:	e069      	b.n	80173e0 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 801730c:	683b      	ldr	r3, [r7, #0]
 801730e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017310:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017314:	2b00      	cmp	r3, #0
 8017316:	d027      	beq.n	8017368 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8017318:	683b      	ldr	r3, [r7, #0]
 801731a:	f103 0008 	add.w	r0, r3, #8
 801731e:	683b      	ldr	r3, [r7, #0]
 8017320:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8017324:	683b      	ldr	r3, [r7, #0]
 8017326:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8017328:	697b      	ldr	r3, [r7, #20]
 801732a:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801732c:	683b      	ldr	r3, [r7, #0]
 801732e:	889b      	ldrh	r3, [r3, #4]
 8017330:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8017332:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017336:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801733a:	2101      	movs	r1, #1
 801733c:	9105      	str	r1, [sp, #20]
 801733e:	f107 010b 	add.w	r1, r7, #11
 8017342:	9104      	str	r1, [sp, #16]
 8017344:	6979      	ldr	r1, [r7, #20]
 8017346:	9103      	str	r1, [sp, #12]
 8017348:	9302      	str	r3, [sp, #8]
 801734a:	4b47      	ldr	r3, [pc, #284]	; (8017468 <lfs_file_relocate+0x1a4>)
 801734c:	9301      	str	r3, [sp, #4]
 801734e:	9200      	str	r2, [sp, #0]
 8017350:	4623      	mov	r3, r4
 8017352:	2200      	movs	r2, #0
 8017354:	4601      	mov	r1, r0
 8017356:	6878      	ldr	r0, [r7, #4]
 8017358:	f7fc fbd7 	bl	8013b0a <lfs_dir_getread>
 801735c:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 801735e:	693b      	ldr	r3, [r7, #16]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d01e      	beq.n	80173a2 <lfs_file_relocate+0xde>
                    return err;
 8017364:	693b      	ldr	r3, [r7, #16]
 8017366:	e07a      	b.n	801745e <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8017368:	683b      	ldr	r3, [r7, #0]
 801736a:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 801736e:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8017370:	683b      	ldr	r3, [r7, #0]
 8017372:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 8017374:	697b      	ldr	r3, [r7, #20]
 8017376:	1ad4      	subs	r4, r2, r3
 8017378:	683b      	ldr	r3, [r7, #0]
 801737a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801737c:	2201      	movs	r2, #1
 801737e:	9203      	str	r2, [sp, #12]
 8017380:	f107 020b 	add.w	r2, r7, #11
 8017384:	9202      	str	r2, [sp, #8]
 8017386:	697a      	ldr	r2, [r7, #20]
 8017388:	9201      	str	r2, [sp, #4]
 801738a:	9300      	str	r3, [sp, #0]
 801738c:	4623      	mov	r3, r4
 801738e:	4602      	mov	r2, r0
 8017390:	6878      	ldr	r0, [r7, #4]
 8017392:	f7fb fb7b 	bl	8012a8c <lfs_bd_read>
 8017396:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8017398:	693b      	ldr	r3, [r7, #16]
 801739a:	2b00      	cmp	r3, #0
 801739c:	d001      	beq.n	80173a2 <lfs_file_relocate+0xde>
                    return err;
 801739e:	693b      	ldr	r3, [r7, #16]
 80173a0:	e05d      	b.n	801745e <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	f103 0110 	add.w	r1, r3, #16
 80173a8:	6878      	ldr	r0, [r7, #4]
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	2201      	movs	r2, #1
 80173ae:	9203      	str	r2, [sp, #12]
 80173b0:	f107 020b 	add.w	r2, r7, #11
 80173b4:	9202      	str	r2, [sp, #8]
 80173b6:	697a      	ldr	r2, [r7, #20]
 80173b8:	9201      	str	r2, [sp, #4]
 80173ba:	9300      	str	r3, [sp, #0]
 80173bc:	2301      	movs	r3, #1
 80173be:	4602      	mov	r2, r0
 80173c0:	6878      	ldr	r0, [r7, #4]
 80173c2:	f7fb fda9 	bl	8012f18 <lfs_bd_prog>
 80173c6:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 80173c8:	693b      	ldr	r3, [r7, #16]
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d005      	beq.n	80173da <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 80173ce:	693b      	ldr	r3, [r7, #16]
 80173d0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80173d4:	d032      	beq.n	801743c <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 80173d6:	693b      	ldr	r3, [r7, #16]
 80173d8:	e041      	b.n	801745e <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 80173da:	697b      	ldr	r3, [r7, #20]
 80173dc:	3301      	adds	r3, #1
 80173de:	617b      	str	r3, [r7, #20]
 80173e0:	683b      	ldr	r3, [r7, #0]
 80173e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80173e4:	697a      	ldr	r2, [r7, #20]
 80173e6:	429a      	cmp	r2, r3
 80173e8:	d390      	bcc.n	801730c <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 80173ea:	683b      	ldr	r3, [r7, #0]
 80173ec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	69d9      	ldr	r1, [r3, #28]
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80173f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80173f8:	461a      	mov	r2, r3
 80173fa:	f004 ff5a 	bl	801c2b2 <memcpy>
        file->cache.block = lfs->pcache.block;
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	691a      	ldr	r2, [r3, #16]
 8017402:	683b      	ldr	r3, [r7, #0]
 8017404:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	695a      	ldr	r2, [r3, #20]
 801740a:	683b      	ldr	r3, [r7, #0]
 801740c:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	699a      	ldr	r2, [r3, #24]
 8017412:	683b      	ldr	r3, [r7, #0]
 8017414:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	3310      	adds	r3, #16
 801741a:	4619      	mov	r1, r3
 801741c:	6878      	ldr	r0, [r7, #4]
 801741e:	f7fb fb1e 	bl	8012a5e <lfs_cache_zero>

        file->block = nblock;
 8017422:	68fa      	ldr	r2, [r7, #12]
 8017424:	683b      	ldr	r3, [r7, #0]
 8017426:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8017428:	683b      	ldr	r3, [r7, #0]
 801742a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801742c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8017430:	683b      	ldr	r3, [r7, #0]
 8017432:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 8017434:	2300      	movs	r3, #0
 8017436:	e012      	b.n	801745e <lfs_file_relocate+0x19a>
                goto relocate;
 8017438:	bf00      	nop
 801743a:	e000      	b.n	801743e <lfs_file_relocate+0x17a>
                    goto relocate;
 801743c:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801743e:	68fb      	ldr	r3, [r7, #12]
 8017440:	4a0a      	ldr	r2, [pc, #40]	; (801746c <lfs_file_relocate+0x1a8>)
 8017442:	9200      	str	r2, [sp, #0]
 8017444:	f44f 6241 	mov.w	r2, #3088	; 0xc10
 8017448:	4909      	ldr	r1, [pc, #36]	; (8017470 <lfs_file_relocate+0x1ac>)
 801744a:	480a      	ldr	r0, [pc, #40]	; (8017474 <lfs_file_relocate+0x1b0>)
 801744c:	f004 fbfa 	bl	801bc44 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	3310      	adds	r3, #16
 8017454:	4619      	mov	r1, r3
 8017456:	6878      	ldr	r0, [r7, #4]
 8017458:	f7fb faf2 	bl	8012a40 <lfs_cache_drop>
    while (true) {
 801745c:	e737      	b.n	80172ce <lfs_file_relocate+0xa>
    }
}
 801745e:	4618      	mov	r0, r3
 8017460:	371c      	adds	r7, #28
 8017462:	46bd      	mov	sp, r7
 8017464:	bd90      	pop	{r4, r7, pc}
 8017466:	bf00      	nop
 8017468:	fff7fc00 	.word	0xfff7fc00
 801746c:	08021a88 	.word	0x08021a88
 8017470:	08021974 	.word	0x08021974
 8017474:	08021b08 	.word	0x08021b08

08017478 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8017478:	b580      	push	{r7, lr}
 801747a:	b084      	sub	sp, #16
 801747c:	af00      	add	r7, sp, #0
 801747e:	6078      	str	r0, [r7, #4]
 8017480:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8017482:	683b      	ldr	r3, [r7, #0]
 8017484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017486:	683b      	ldr	r3, [r7, #0]
 8017488:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 801748a:	6878      	ldr	r0, [r7, #4]
 801748c:	f7fc f968 	bl	8013760 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 8017490:	6839      	ldr	r1, [r7, #0]
 8017492:	6878      	ldr	r0, [r7, #4]
 8017494:	f7ff ff16 	bl	80172c4 <lfs_file_relocate>
 8017498:	60f8      	str	r0, [r7, #12]
    if (err) {
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	2b00      	cmp	r3, #0
 801749e:	d001      	beq.n	80174a4 <lfs_file_outline+0x2c>
        return err;
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	e006      	b.n	80174b2 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 80174a4:	683b      	ldr	r3, [r7, #0]
 80174a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80174a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80174ac:	683b      	ldr	r3, [r7, #0]
 80174ae:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 80174b0:	2300      	movs	r3, #0
}
 80174b2:	4618      	mov	r0, r3
 80174b4:	3710      	adds	r7, #16
 80174b6:	46bd      	mov	sp, r7
 80174b8:	bd80      	pop	{r7, pc}
	...

080174bc <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 80174bc:	b590      	push	{r4, r7, lr}
 80174be:	b09f      	sub	sp, #124	; 0x7c
 80174c0:	af02      	add	r7, sp, #8
 80174c2:	6078      	str	r0, [r7, #4]
 80174c4:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 80174c6:	683b      	ldr	r3, [r7, #0]
 80174c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80174ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d011      	beq.n	80174f6 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 80174d2:	683b      	ldr	r3, [r7, #0]
 80174d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80174d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d105      	bne.n	80174ea <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 80174de:	683b      	ldr	r3, [r7, #0]
 80174e0:	3340      	adds	r3, #64	; 0x40
 80174e2:	4619      	mov	r1, r3
 80174e4:	6878      	ldr	r0, [r7, #4]
 80174e6:	f7fb faab 	bl	8012a40 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 80174ea:	683b      	ldr	r3, [r7, #0]
 80174ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80174ee:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80174f2:	683b      	ldr	r3, [r7, #0]
 80174f4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80174f6:	683b      	ldr	r3, [r7, #0]
 80174f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80174fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80174fe:	2b00      	cmp	r3, #0
 8017500:	f000 80a4 	beq.w	801764c <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8017504:	683b      	ldr	r3, [r7, #0]
 8017506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017508:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 801750a:	683b      	ldr	r3, [r7, #0]
 801750c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801750e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017512:	2b00      	cmp	r3, #0
 8017514:	d176      	bne.n	8017604 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 8017516:	f107 030c 	add.w	r3, r7, #12
 801751a:	2254      	movs	r2, #84	; 0x54
 801751c:	2100      	movs	r1, #0
 801751e:	4618      	mov	r0, r3
 8017520:	f004 fcf2 	bl	801bf08 <memset>
                .ctz.head = file->ctz.head,
 8017524:	683b      	ldr	r3, [r7, #0]
 8017526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 8017528:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 801752a:	683b      	ldr	r3, [r7, #0]
 801752c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 801752e:	63bb      	str	r3, [r7, #56]	; 0x38
 8017530:	2301      	movs	r3, #1
 8017532:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8017534:	683b      	ldr	r3, [r7, #0]
 8017536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 8017538:	643b      	str	r3, [r7, #64]	; 0x40
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8017540:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017542:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	4619      	mov	r1, r3
 801754a:	6878      	ldr	r0, [r7, #4]
 801754c:	f7fb fa78 	bl	8012a40 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8017550:	e02b      	b.n	80175aa <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8017552:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8017556:	f107 010c 	add.w	r1, r7, #12
 801755a:	2301      	movs	r3, #1
 801755c:	6878      	ldr	r0, [r7, #4]
 801755e:	f000 f90d 	bl	801777c <lfs_file_flushedread>
 8017562:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8017564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017566:	2b00      	cmp	r3, #0
 8017568:	da01      	bge.n	801756e <lfs_file_flush+0xb2>
                    return res;
 801756a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801756c:	e06f      	b.n	801764e <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 801756e:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8017572:	2301      	movs	r3, #1
 8017574:	6839      	ldr	r1, [r7, #0]
 8017576:	6878      	ldr	r0, [r7, #4]
 8017578:	f000 fa08 	bl	801798c <lfs_file_flushedwrite>
 801757c:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 801757e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017580:	2b00      	cmp	r3, #0
 8017582:	da01      	bge.n	8017588 <lfs_file_flush+0xcc>
                    return res;
 8017584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017586:	e062      	b.n	801764e <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017590:	d00b      	beq.n	80175aa <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 8017592:	f107 030c 	add.w	r3, r7, #12
 8017596:	3340      	adds	r3, #64	; 0x40
 8017598:	4619      	mov	r1, r3
 801759a:	6878      	ldr	r0, [r7, #4]
 801759c:	f7fb fa50 	bl	8012a40 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	4619      	mov	r1, r3
 80175a4:	6878      	ldr	r0, [r7, #4]
 80175a6:	f7fb fa4b 	bl	8012a40 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 80175aa:	683b      	ldr	r3, [r7, #0]
 80175ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80175ae:	683b      	ldr	r3, [r7, #0]
 80175b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175b2:	429a      	cmp	r2, r3
 80175b4:	d3cd      	bcc.n	8017552 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 80175b6:	683b      	ldr	r3, [r7, #0]
 80175b8:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80175bc:	687a      	ldr	r2, [r7, #4]
 80175be:	2301      	movs	r3, #1
 80175c0:	6878      	ldr	r0, [r7, #4]
 80175c2:	f7fb fbf9 	bl	8012db8 <lfs_bd_flush>
 80175c6:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 80175c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	d026      	beq.n	801761c <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 80175ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80175d0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80175d4:	d001      	beq.n	80175da <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 80175d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80175d8:	e039      	b.n	801764e <lfs_file_flush+0x192>
                        goto relocate;
 80175da:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 80175dc:	683b      	ldr	r3, [r7, #0]
 80175de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80175e0:	4a1d      	ldr	r2, [pc, #116]	; (8017658 <lfs_file_flush+0x19c>)
 80175e2:	9200      	str	r2, [sp, #0]
 80175e4:	f640 425f 	movw	r2, #3167	; 0xc5f
 80175e8:	491c      	ldr	r1, [pc, #112]	; (801765c <lfs_file_flush+0x1a0>)
 80175ea:	481d      	ldr	r0, [pc, #116]	; (8017660 <lfs_file_flush+0x1a4>)
 80175ec:	f004 fb2a 	bl	801bc44 <iprintf>
                err = lfs_file_relocate(lfs, file);
 80175f0:	6839      	ldr	r1, [r7, #0]
 80175f2:	6878      	ldr	r0, [r7, #4]
 80175f4:	f7ff fe66 	bl	80172c4 <lfs_file_relocate>
 80175f8:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 80175fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d0da      	beq.n	80175b6 <lfs_file_flush+0xfa>
                    return err;
 8017600:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017602:	e024      	b.n	801764e <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8017604:	683b      	ldr	r3, [r7, #0]
 8017606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017608:	683b      	ldr	r3, [r7, #0]
 801760a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801760c:	4619      	mov	r1, r3
 801760e:	4610      	mov	r0, r2
 8017610:	f7fb f950 	bl	80128b4 <lfs_max>
 8017614:	4602      	mov	r2, r0
 8017616:	683b      	ldr	r3, [r7, #0]
 8017618:	635a      	str	r2, [r3, #52]	; 0x34
 801761a:	e000      	b.n	801761e <lfs_file_flush+0x162>
                break;
 801761c:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 801761e:	683b      	ldr	r3, [r7, #0]
 8017620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017622:	683b      	ldr	r3, [r7, #0]
 8017624:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 8017626:	683b      	ldr	r3, [r7, #0]
 8017628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801762a:	683b      	ldr	r3, [r7, #0]
 801762c:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 801762e:	683b      	ldr	r3, [r7, #0]
 8017630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017632:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8017636:	683b      	ldr	r3, [r7, #0]
 8017638:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 801763a:	683b      	ldr	r3, [r7, #0]
 801763c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801763e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8017642:	683b      	ldr	r3, [r7, #0]
 8017644:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 8017646:	683b      	ldr	r3, [r7, #0]
 8017648:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801764a:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 801764c:	2300      	movs	r3, #0
}
 801764e:	4618      	mov	r0, r3
 8017650:	3774      	adds	r7, #116	; 0x74
 8017652:	46bd      	mov	sp, r7
 8017654:	bd90      	pop	{r4, r7, pc}
 8017656:	bf00      	nop
 8017658:	08021a88 	.word	0x08021a88
 801765c:	08021974 	.word	0x08021974
 8017660:	08021b08 	.word	0x08021b08

08017664 <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 8017664:	b580      	push	{r7, lr}
 8017666:	b090      	sub	sp, #64	; 0x40
 8017668:	af00      	add	r7, sp, #0
 801766a:	6078      	str	r0, [r7, #4]
 801766c:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 801766e:	683b      	ldr	r3, [r7, #0]
 8017670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017672:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8017676:	2b00      	cmp	r3, #0
 8017678:	d001      	beq.n	801767e <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 801767a:	2300      	movs	r3, #0
 801767c:	e07a      	b.n	8017774 <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 801767e:	6839      	ldr	r1, [r7, #0]
 8017680:	6878      	ldr	r0, [r7, #4]
 8017682:	f7ff ff1b 	bl	80174bc <lfs_file_flush>
 8017686:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 8017688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801768a:	2b00      	cmp	r3, #0
 801768c:	d007      	beq.n	801769e <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 801768e:	683b      	ldr	r3, [r7, #0]
 8017690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017692:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8017696:	683b      	ldr	r3, [r7, #0]
 8017698:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 801769a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801769c:	e06a      	b.n	8017774 <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 801769e:	683b      	ldr	r3, [r7, #0]
 80176a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d063      	beq.n	8017772 <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 80176aa:	683b      	ldr	r3, [r7, #0]
 80176ac:	3308      	adds	r3, #8
 80176ae:	4618      	mov	r0, r3
 80176b0:	f7fb fd25 	bl	80130fe <lfs_pair_isnull>
 80176b4:	4603      	mov	r3, r0
 80176b6:	f083 0301 	eor.w	r3, r3, #1
 80176ba:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d058      	beq.n	8017772 <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 80176c0:	683b      	ldr	r3, [r7, #0]
 80176c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d009      	beq.n	80176e0 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 80176cc:	f240 2301 	movw	r3, #513	; 0x201
 80176d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 80176d2:	683b      	ldr	r3, [r7, #0]
 80176d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80176d6:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 80176d8:	683b      	ldr	r3, [r7, #0]
 80176da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176dc:	637b      	str	r3, [r7, #52]	; 0x34
 80176de:	e014      	b.n	801770a <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 80176e0:	f240 2302 	movw	r3, #514	; 0x202
 80176e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 80176e6:	683a      	ldr	r2, [r7, #0]
 80176e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80176ec:	3228      	adds	r2, #40	; 0x28
 80176ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80176f2:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 80176f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80176fa:	4618      	mov	r0, r3
 80176fc:	f7fb ff20 	bl	8013540 <lfs_ctz_tole32>
            buffer = &ctz;
 8017700:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017704:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 8017706:	2308      	movs	r3, #8
 8017708:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 801770a:	683b      	ldr	r3, [r7, #0]
 801770c:	f103 0108 	add.w	r1, r3, #8
 8017710:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017712:	051a      	lsls	r2, r3, #20
 8017714:	683b      	ldr	r3, [r7, #0]
 8017716:	889b      	ldrh	r3, [r3, #4]
 8017718:	029b      	lsls	r3, r3, #10
 801771a:	431a      	orrs	r2, r3
 801771c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801771e:	4313      	orrs	r3, r2
 8017720:	61bb      	str	r3, [r7, #24]
 8017722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017724:	61fb      	str	r3, [r7, #28]
 8017726:	683b      	ldr	r3, [r7, #0]
 8017728:	889b      	ldrh	r3, [r3, #4]
 801772a:	029a      	lsls	r2, r3, #10
 801772c:	683b      	ldr	r3, [r7, #0]
 801772e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017730:	689b      	ldr	r3, [r3, #8]
 8017732:	4313      	orrs	r3, r2
 8017734:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 8017738:	623b      	str	r3, [r7, #32]
 801773a:	683b      	ldr	r3, [r7, #0]
 801773c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801773e:	685b      	ldr	r3, [r3, #4]
 8017740:	627b      	str	r3, [r7, #36]	; 0x24
 8017742:	f107 0218 	add.w	r2, r7, #24
 8017746:	2302      	movs	r3, #2
 8017748:	6878      	ldr	r0, [r7, #4]
 801774a:	f7ff f83f 	bl	80167cc <lfs_dir_commit>
 801774e:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8017750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017752:	2b00      	cmp	r3, #0
 8017754:	d007      	beq.n	8017766 <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 8017756:	683b      	ldr	r3, [r7, #0]
 8017758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801775a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 801775e:	683b      	ldr	r3, [r7, #0]
 8017760:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8017762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017764:	e006      	b.n	8017774 <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 8017766:	683b      	ldr	r3, [r7, #0]
 8017768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801776a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801776e:	683b      	ldr	r3, [r7, #0]
 8017770:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 8017772:	2300      	movs	r3, #0
}
 8017774:	4618      	mov	r0, r3
 8017776:	3740      	adds	r7, #64	; 0x40
 8017778:	46bd      	mov	sp, r7
 801777a:	bd80      	pop	{r7, pc}

0801777c <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 801777c:	b5b0      	push	{r4, r5, r7, lr}
 801777e:	b090      	sub	sp, #64	; 0x40
 8017780:	af06      	add	r7, sp, #24
 8017782:	60f8      	str	r0, [r7, #12]
 8017784:	60b9      	str	r1, [r7, #8]
 8017786:	607a      	str	r2, [r7, #4]
 8017788:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 801778e:	683b      	ldr	r3, [r7, #0]
 8017790:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8017792:	68bb      	ldr	r3, [r7, #8]
 8017794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017796:	68bb      	ldr	r3, [r7, #8]
 8017798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801779a:	429a      	cmp	r2, r3
 801779c:	d301      	bcc.n	80177a2 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 801779e:	2300      	movs	r3, #0
 80177a0:	e0b7      	b.n	8017912 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 80177a2:	68bb      	ldr	r3, [r7, #8]
 80177a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80177a6:	68bb      	ldr	r3, [r7, #8]
 80177a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80177aa:	1ad3      	subs	r3, r2, r3
 80177ac:	4619      	mov	r1, r3
 80177ae:	6838      	ldr	r0, [r7, #0]
 80177b0:	f7fb f890 	bl	80128d4 <lfs_min>
 80177b4:	6038      	str	r0, [r7, #0]
    nsize = size;
 80177b6:	683b      	ldr	r3, [r7, #0]
 80177b8:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 80177ba:	e0a5      	b.n	8017908 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 80177bc:	68bb      	ldr	r3, [r7, #8]
 80177be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d006      	beq.n	80177d6 <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 80177c8:	68bb      	ldr	r3, [r7, #8]
 80177ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80177cc:	68fb      	ldr	r3, [r7, #12]
 80177ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80177d0:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 80177d2:	429a      	cmp	r2, r3
 80177d4:	d130      	bne.n	8017838 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 80177d6:	68bb      	ldr	r3, [r7, #8]
 80177d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d11c      	bne.n	801781c <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80177e2:	68bb      	ldr	r3, [r7, #8]
 80177e4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80177e8:	68bb      	ldr	r3, [r7, #8]
 80177ea:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80177ec:	68bb      	ldr	r3, [r7, #8]
 80177ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177f0:	68ba      	ldr	r2, [r7, #8]
 80177f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80177f4:	68b9      	ldr	r1, [r7, #8]
 80177f6:	3138      	adds	r1, #56	; 0x38
 80177f8:	68b8      	ldr	r0, [r7, #8]
 80177fa:	303c      	adds	r0, #60	; 0x3c
 80177fc:	9003      	str	r0, [sp, #12]
 80177fe:	9102      	str	r1, [sp, #8]
 8017800:	9201      	str	r2, [sp, #4]
 8017802:	9300      	str	r3, [sp, #0]
 8017804:	462b      	mov	r3, r5
 8017806:	4622      	mov	r2, r4
 8017808:	2100      	movs	r1, #0
 801780a:	68f8      	ldr	r0, [r7, #12]
 801780c:	f7ff f97c 	bl	8016b08 <lfs_ctz_find>
 8017810:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8017812:	69fb      	ldr	r3, [r7, #28]
 8017814:	2b00      	cmp	r3, #0
 8017816:	d009      	beq.n	801782c <lfs_file_flushedread+0xb0>
                    return err;
 8017818:	69fb      	ldr	r3, [r7, #28]
 801781a:	e07a      	b.n	8017912 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 801781c:	68bb      	ldr	r3, [r7, #8]
 801781e:	f06f 0201 	mvn.w	r2, #1
 8017822:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8017824:	68bb      	ldr	r3, [r7, #8]
 8017826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017828:	68bb      	ldr	r3, [r7, #8]
 801782a:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 801782c:	68bb      	ldr	r3, [r7, #8]
 801782e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017830:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8017834:	68bb      	ldr	r3, [r7, #8]
 8017836:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8017838:	68fb      	ldr	r3, [r7, #12]
 801783a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801783c:	69da      	ldr	r2, [r3, #28]
 801783e:	68bb      	ldr	r3, [r7, #8]
 8017840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017842:	1ad3      	subs	r3, r2, r3
 8017844:	4619      	mov	r1, r3
 8017846:	6a38      	ldr	r0, [r7, #32]
 8017848:	f7fb f844 	bl	80128d4 <lfs_min>
 801784c:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 801784e:	68bb      	ldr	r3, [r7, #8]
 8017850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017856:	2b00      	cmp	r3, #0
 8017858:	d026      	beq.n	80178a8 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 801785a:	68bb      	ldr	r3, [r7, #8]
 801785c:	f103 0408 	add.w	r4, r3, #8
 8017860:	68bb      	ldr	r3, [r7, #8]
 8017862:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801786a:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801786c:	68bb      	ldr	r3, [r7, #8]
 801786e:	889b      	ldrh	r3, [r3, #4]
 8017870:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8017872:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801787a:	68b9      	ldr	r1, [r7, #8]
 801787c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 801787e:	69b8      	ldr	r0, [r7, #24]
 8017880:	9005      	str	r0, [sp, #20]
 8017882:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017884:	9004      	str	r0, [sp, #16]
 8017886:	9103      	str	r1, [sp, #12]
 8017888:	9302      	str	r3, [sp, #8]
 801788a:	4b24      	ldr	r3, [pc, #144]	; (801791c <lfs_file_flushedread+0x1a0>)
 801788c:	9301      	str	r3, [sp, #4]
 801788e:	9200      	str	r2, [sp, #0]
 8017890:	462b      	mov	r3, r5
 8017892:	2200      	movs	r2, #0
 8017894:	4621      	mov	r1, r4
 8017896:	68f8      	ldr	r0, [r7, #12]
 8017898:	f7fc f937 	bl	8013b0a <lfs_dir_getread>
 801789c:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 801789e:	693b      	ldr	r3, [r7, #16]
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d01d      	beq.n	80178e0 <lfs_file_flushedread+0x164>
                return err;
 80178a4:	693b      	ldr	r3, [r7, #16]
 80178a6:	e034      	b.n	8017912 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 80178a8:	68bb      	ldr	r3, [r7, #8]
 80178aa:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80178b2:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 80178b4:	68bb      	ldr	r3, [r7, #8]
 80178b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80178b8:	68ba      	ldr	r2, [r7, #8]
 80178ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80178bc:	69b9      	ldr	r1, [r7, #24]
 80178be:	9103      	str	r1, [sp, #12]
 80178c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80178c2:	9102      	str	r1, [sp, #8]
 80178c4:	9201      	str	r2, [sp, #4]
 80178c6:	9300      	str	r3, [sp, #0]
 80178c8:	4623      	mov	r3, r4
 80178ca:	4602      	mov	r2, r0
 80178cc:	2100      	movs	r1, #0
 80178ce:	68f8      	ldr	r0, [r7, #12]
 80178d0:	f7fb f8dc 	bl	8012a8c <lfs_bd_read>
 80178d4:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80178d6:	697b      	ldr	r3, [r7, #20]
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d001      	beq.n	80178e0 <lfs_file_flushedread+0x164>
                return err;
 80178dc:	697b      	ldr	r3, [r7, #20]
 80178de:	e018      	b.n	8017912 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 80178e0:	68bb      	ldr	r3, [r7, #8]
 80178e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80178e4:	69bb      	ldr	r3, [r7, #24]
 80178e6:	441a      	add	r2, r3
 80178e8:	68bb      	ldr	r3, [r7, #8]
 80178ea:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 80178ec:	68bb      	ldr	r3, [r7, #8]
 80178ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80178f0:	69bb      	ldr	r3, [r7, #24]
 80178f2:	441a      	add	r2, r3
 80178f4:	68bb      	ldr	r3, [r7, #8]
 80178f6:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 80178f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80178fa:	69bb      	ldr	r3, [r7, #24]
 80178fc:	4413      	add	r3, r2
 80178fe:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8017900:	6a3a      	ldr	r2, [r7, #32]
 8017902:	69bb      	ldr	r3, [r7, #24]
 8017904:	1ad3      	subs	r3, r2, r3
 8017906:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8017908:	6a3b      	ldr	r3, [r7, #32]
 801790a:	2b00      	cmp	r3, #0
 801790c:	f47f af56 	bne.w	80177bc <lfs_file_flushedread+0x40>
    }

    return size;
 8017910:	683b      	ldr	r3, [r7, #0]
}
 8017912:	4618      	mov	r0, r3
 8017914:	3728      	adds	r7, #40	; 0x28
 8017916:	46bd      	mov	sp, r7
 8017918:	bdb0      	pop	{r4, r5, r7, pc}
 801791a:	bf00      	nop
 801791c:	fff7fc00 	.word	0xfff7fc00

08017920 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8017920:	b580      	push	{r7, lr}
 8017922:	b086      	sub	sp, #24
 8017924:	af00      	add	r7, sp, #0
 8017926:	60f8      	str	r0, [r7, #12]
 8017928:	60b9      	str	r1, [r7, #8]
 801792a:	607a      	str	r2, [r7, #4]
 801792c:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 801792e:	68bb      	ldr	r3, [r7, #8]
 8017930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017932:	f003 0301 	and.w	r3, r3, #1
 8017936:	2b00      	cmp	r3, #0
 8017938:	d106      	bne.n	8017948 <lfs_file_rawread+0x28>
 801793a:	4b11      	ldr	r3, [pc, #68]	; (8017980 <lfs_file_rawread+0x60>)
 801793c:	4a11      	ldr	r2, [pc, #68]	; (8017984 <lfs_file_rawread+0x64>)
 801793e:	f640 41ea 	movw	r1, #3306	; 0xcea
 8017942:	4811      	ldr	r0, [pc, #68]	; (8017988 <lfs_file_rawread+0x68>)
 8017944:	f003 f944 	bl	801abd0 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8017948:	68bb      	ldr	r3, [r7, #8]
 801794a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801794c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017950:	2b00      	cmp	r3, #0
 8017952:	d009      	beq.n	8017968 <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8017954:	68b9      	ldr	r1, [r7, #8]
 8017956:	68f8      	ldr	r0, [r7, #12]
 8017958:	f7ff fdb0 	bl	80174bc <lfs_file_flush>
 801795c:	6178      	str	r0, [r7, #20]
        if (err) {
 801795e:	697b      	ldr	r3, [r7, #20]
 8017960:	2b00      	cmp	r3, #0
 8017962:	d001      	beq.n	8017968 <lfs_file_rawread+0x48>
            return err;
 8017964:	697b      	ldr	r3, [r7, #20]
 8017966:	e006      	b.n	8017976 <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8017968:	683b      	ldr	r3, [r7, #0]
 801796a:	687a      	ldr	r2, [r7, #4]
 801796c:	68b9      	ldr	r1, [r7, #8]
 801796e:	68f8      	ldr	r0, [r7, #12]
 8017970:	f7ff ff04 	bl	801777c <lfs_file_flushedread>
 8017974:	4603      	mov	r3, r0
}
 8017976:	4618      	mov	r0, r3
 8017978:	3718      	adds	r7, #24
 801797a:	46bd      	mov	sp, r7
 801797c:	bd80      	pop	{r7, pc}
 801797e:	bf00      	nop
 8017980:	08021cb0 	.word	0x08021cb0
 8017984:	08022c38 	.word	0x08022c38
 8017988:	08021974 	.word	0x08021974

0801798c <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 801798c:	b5b0      	push	{r4, r5, r7, lr}
 801798e:	b090      	sub	sp, #64	; 0x40
 8017990:	af04      	add	r7, sp, #16
 8017992:	60f8      	str	r0, [r7, #12]
 8017994:	60b9      	str	r1, [r7, #8]
 8017996:	607a      	str	r2, [r7, #4]
 8017998:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 801799e:	683b      	ldr	r3, [r7, #0]
 80179a0:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 80179a2:	68bb      	ldr	r3, [r7, #8]
 80179a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	f000 810c 	beq.w	8017bc8 <lfs_file_flushedwrite+0x23c>
            lfs_max(file->pos+nsize, file->ctz.size) >
 80179b0:	68bb      	ldr	r3, [r7, #8]
 80179b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80179b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179b6:	441a      	add	r2, r3
 80179b8:	68bb      	ldr	r3, [r7, #8]
 80179ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179bc:	4619      	mov	r1, r3
 80179be:	4610      	mov	r0, r2
 80179c0:	f7fa ff78 	bl	80128b4 <lfs_max>
 80179c4:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 80179c6:	68fb      	ldr	r3, [r7, #12]
 80179c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80179ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 80179cc:	68fb      	ldr	r3, [r7, #12]
 80179ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80179d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d004      	beq.n	80179e0 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 80179d6:	68fb      	ldr	r3, [r7, #12]
 80179d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80179da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 80179dc:	08db      	lsrs	r3, r3, #3
 80179de:	e003      	b.n	80179e8 <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 80179e0:	68fb      	ldr	r3, [r7, #12]
 80179e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80179e4:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 80179e6:	08db      	lsrs	r3, r3, #3
 80179e8:	4619      	mov	r1, r3
 80179ea:	4610      	mov	r0, r2
 80179ec:	f7fa ff72 	bl	80128d4 <lfs_min>
 80179f0:	4603      	mov	r3, r0
 80179f2:	4619      	mov	r1, r3
 80179f4:	f240 30fe 	movw	r0, #1022	; 0x3fe
 80179f8:	f7fa ff6c 	bl	80128d4 <lfs_min>
 80179fc:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 80179fe:	429c      	cmp	r4, r3
 8017a00:	f240 80e2 	bls.w	8017bc8 <lfs_file_flushedwrite+0x23c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8017a04:	68b9      	ldr	r1, [r7, #8]
 8017a06:	68f8      	ldr	r0, [r7, #12]
 8017a08:	f7ff fd36 	bl	8017478 <lfs_file_outline>
 8017a0c:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8017a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	f000 80d9 	beq.w	8017bc8 <lfs_file_flushedwrite+0x23c>
            file->flags |= LFS_F_ERRED;
 8017a16:	68bb      	ldr	r3, [r7, #8]
 8017a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a1a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8017a1e:	68bb      	ldr	r3, [r7, #8]
 8017a20:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8017a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a24:	e0d5      	b.n	8017bd2 <lfs_file_flushedwrite+0x246>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8017a26:	68bb      	ldr	r3, [r7, #8]
 8017a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d006      	beq.n	8017a40 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 8017a32:	68bb      	ldr	r3, [r7, #8]
 8017a34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017a3a:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8017a3c:	429a      	cmp	r2, r3
 8017a3e:	d16b      	bne.n	8017b18 <lfs_file_flushedwrite+0x18c>
            if (!(file->flags & LFS_F_INLINE)) {
 8017a40:	68bb      	ldr	r3, [r7, #8]
 8017a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d157      	bne.n	8017afc <lfs_file_flushedwrite+0x170>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8017a4c:	68bb      	ldr	r3, [r7, #8]
 8017a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d12d      	bne.n	8017ab4 <lfs_file_flushedwrite+0x128>
 8017a58:	68bb      	ldr	r3, [r7, #8]
 8017a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d029      	beq.n	8017ab4 <lfs_file_flushedwrite+0x128>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8017a60:	68bb      	ldr	r3, [r7, #8]
 8017a62:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8017a66:	68bb      	ldr	r3, [r7, #8]
 8017a68:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8017a6a:	68bb      	ldr	r3, [r7, #8]
 8017a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 8017a6e:	68ba      	ldr	r2, [r7, #8]
 8017a70:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8017a72:	3a01      	subs	r2, #1
 8017a74:	68b9      	ldr	r1, [r7, #8]
 8017a76:	3138      	adds	r1, #56	; 0x38
 8017a78:	68b8      	ldr	r0, [r7, #8]
 8017a7a:	303c      	adds	r0, #60	; 0x3c
 8017a7c:	9003      	str	r0, [sp, #12]
 8017a7e:	9102      	str	r1, [sp, #8]
 8017a80:	9201      	str	r2, [sp, #4]
 8017a82:	9300      	str	r3, [sp, #0]
 8017a84:	462b      	mov	r3, r5
 8017a86:	4622      	mov	r2, r4
 8017a88:	2100      	movs	r1, #0
 8017a8a:	68f8      	ldr	r0, [r7, #12]
 8017a8c:	f7ff f83c 	bl	8016b08 <lfs_ctz_find>
 8017a90:	6238      	str	r0, [r7, #32]
                    if (err) {
 8017a92:	6a3b      	ldr	r3, [r7, #32]
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d007      	beq.n	8017aa8 <lfs_file_flushedwrite+0x11c>
                        file->flags |= LFS_F_ERRED;
 8017a98:	68bb      	ldr	r3, [r7, #8]
 8017a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a9c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8017aa0:	68bb      	ldr	r3, [r7, #8]
 8017aa2:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8017aa4:	6a3b      	ldr	r3, [r7, #32]
 8017aa6:	e094      	b.n	8017bd2 <lfs_file_flushedwrite+0x246>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8017aa8:	68bb      	ldr	r3, [r7, #8]
 8017aaa:	3340      	adds	r3, #64	; 0x40
 8017aac:	4619      	mov	r1, r3
 8017aae:	68f8      	ldr	r0, [r7, #12]
 8017ab0:	f7fa ffd5 	bl	8012a5e <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 8017ab4:	68f8      	ldr	r0, [r7, #12]
 8017ab6:	f7fb fe53 	bl	8013760 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8017aba:	68bb      	ldr	r3, [r7, #8]
 8017abc:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8017ac0:	68fc      	ldr	r4, [r7, #12]
 8017ac2:	68bb      	ldr	r3, [r7, #8]
 8017ac4:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8017ac6:	68bb      	ldr	r3, [r7, #8]
 8017ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017aca:	68ba      	ldr	r2, [r7, #8]
 8017acc:	3238      	adds	r2, #56	; 0x38
 8017ace:	68b9      	ldr	r1, [r7, #8]
 8017ad0:	313c      	adds	r1, #60	; 0x3c
 8017ad2:	9102      	str	r1, [sp, #8]
 8017ad4:	9201      	str	r2, [sp, #4]
 8017ad6:	9300      	str	r3, [sp, #0]
 8017ad8:	462b      	mov	r3, r5
 8017ada:	4622      	mov	r2, r4
 8017adc:	4601      	mov	r1, r0
 8017ade:	68f8      	ldr	r0, [r7, #12]
 8017ae0:	f7ff f87e 	bl	8016be0 <lfs_ctz_extend>
 8017ae4:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8017ae6:	69fb      	ldr	r3, [r7, #28]
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d00f      	beq.n	8017b0c <lfs_file_flushedwrite+0x180>
                    file->flags |= LFS_F_ERRED;
 8017aec:	68bb      	ldr	r3, [r7, #8]
 8017aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017af0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8017af4:	68bb      	ldr	r3, [r7, #8]
 8017af6:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 8017af8:	69fb      	ldr	r3, [r7, #28]
 8017afa:	e06a      	b.n	8017bd2 <lfs_file_flushedwrite+0x246>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8017afc:	68bb      	ldr	r3, [r7, #8]
 8017afe:	f06f 0201 	mvn.w	r2, #1
 8017b02:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8017b04:	68bb      	ldr	r3, [r7, #8]
 8017b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017b08:	68bb      	ldr	r3, [r7, #8]
 8017b0a:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8017b0c:	68bb      	ldr	r3, [r7, #8]
 8017b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b10:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8017b14:	68bb      	ldr	r3, [r7, #8]
 8017b16:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8017b18:	68fb      	ldr	r3, [r7, #12]
 8017b1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017b1c:	69da      	ldr	r2, [r3, #28]
 8017b1e:	68bb      	ldr	r3, [r7, #8]
 8017b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b22:	1ad3      	subs	r3, r2, r3
 8017b24:	4619      	mov	r1, r3
 8017b26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017b28:	f7fa fed4 	bl	80128d4 <lfs_min>
 8017b2c:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8017b2e:	68bb      	ldr	r3, [r7, #8]
 8017b30:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8017b34:	68fc      	ldr	r4, [r7, #12]
 8017b36:	68bb      	ldr	r3, [r7, #8]
 8017b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b3a:	68ba      	ldr	r2, [r7, #8]
 8017b3c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8017b3e:	69b9      	ldr	r1, [r7, #24]
 8017b40:	9103      	str	r1, [sp, #12]
 8017b42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017b44:	9102      	str	r1, [sp, #8]
 8017b46:	9201      	str	r2, [sp, #4]
 8017b48:	9300      	str	r3, [sp, #0]
 8017b4a:	2301      	movs	r3, #1
 8017b4c:	4622      	mov	r2, r4
 8017b4e:	4601      	mov	r1, r0
 8017b50:	68f8      	ldr	r0, [r7, #12]
 8017b52:	f7fb f9e1 	bl	8012f18 <lfs_bd_prog>
 8017b56:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8017b58:	697b      	ldr	r3, [r7, #20]
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d01c      	beq.n	8017b98 <lfs_file_flushedwrite+0x20c>
                if (err == LFS_ERR_CORRUPT) {
 8017b5e:	697b      	ldr	r3, [r7, #20]
 8017b60:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8017b64:	d007      	beq.n	8017b76 <lfs_file_flushedwrite+0x1ea>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8017b66:	68bb      	ldr	r3, [r7, #8]
 8017b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b6a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8017b6e:	68bb      	ldr	r3, [r7, #8]
 8017b70:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8017b72:	697b      	ldr	r3, [r7, #20]
 8017b74:	e02d      	b.n	8017bd2 <lfs_file_flushedwrite+0x246>
                    goto relocate;
 8017b76:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8017b78:	68b9      	ldr	r1, [r7, #8]
 8017b7a:	68f8      	ldr	r0, [r7, #12]
 8017b7c:	f7ff fba2 	bl	80172c4 <lfs_file_relocate>
 8017b80:	6178      	str	r0, [r7, #20]
            if (err) {
 8017b82:	697b      	ldr	r3, [r7, #20]
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d0d2      	beq.n	8017b2e <lfs_file_flushedwrite+0x1a2>
                file->flags |= LFS_F_ERRED;
 8017b88:	68bb      	ldr	r3, [r7, #8]
 8017b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b8c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8017b90:	68bb      	ldr	r3, [r7, #8]
 8017b92:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8017b94:	697b      	ldr	r3, [r7, #20]
 8017b96:	e01c      	b.n	8017bd2 <lfs_file_flushedwrite+0x246>
            break;
 8017b98:	bf00      	nop
            }
        }

        file->pos += diff;
 8017b9a:	68bb      	ldr	r3, [r7, #8]
 8017b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017b9e:	69bb      	ldr	r3, [r7, #24]
 8017ba0:	441a      	add	r2, r3
 8017ba2:	68bb      	ldr	r3, [r7, #8]
 8017ba4:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8017ba6:	68bb      	ldr	r3, [r7, #8]
 8017ba8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8017baa:	69bb      	ldr	r3, [r7, #24]
 8017bac:	441a      	add	r2, r3
 8017bae:	68bb      	ldr	r3, [r7, #8]
 8017bb0:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8017bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017bb4:	69bb      	ldr	r3, [r7, #24]
 8017bb6:	4413      	add	r3, r2
 8017bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8017bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017bbc:	69bb      	ldr	r3, [r7, #24]
 8017bbe:	1ad3      	subs	r3, r2, r3
 8017bc0:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 8017bc2:	68f8      	ldr	r0, [r7, #12]
 8017bc4:	f7fb fdcc 	bl	8013760 <lfs_alloc_ack>
    while (nsize > 0) {
 8017bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	f47f af2b 	bne.w	8017a26 <lfs_file_flushedwrite+0x9a>
    }

    return size;
 8017bd0:	683b      	ldr	r3, [r7, #0]
}
 8017bd2:	4618      	mov	r0, r3
 8017bd4:	3730      	adds	r7, #48	; 0x30
 8017bd6:	46bd      	mov	sp, r7
 8017bd8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08017bdc <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8017bdc:	b580      	push	{r7, lr}
 8017bde:	b08a      	sub	sp, #40	; 0x28
 8017be0:	af00      	add	r7, sp, #0
 8017be2:	60f8      	str	r0, [r7, #12]
 8017be4:	60b9      	str	r1, [r7, #8]
 8017be6:	607a      	str	r2, [r7, #4]
 8017be8:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8017bea:	68bb      	ldr	r3, [r7, #8]
 8017bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017bee:	f003 0302 	and.w	r3, r3, #2
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d106      	bne.n	8017c04 <lfs_file_rawwrite+0x28>
 8017bf6:	4b38      	ldr	r3, [pc, #224]	; (8017cd8 <lfs_file_rawwrite+0xfc>)
 8017bf8:	4a38      	ldr	r2, [pc, #224]	; (8017cdc <lfs_file_rawwrite+0x100>)
 8017bfa:	f640 5155 	movw	r1, #3413	; 0xd55
 8017bfe:	4838      	ldr	r0, [pc, #224]	; (8017ce0 <lfs_file_rawwrite+0x104>)
 8017c00:	f002 ffe6 	bl	801abd0 <__assert_func>

    if (file->flags & LFS_F_READING) {
 8017c04:	68bb      	ldr	r3, [r7, #8]
 8017c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d009      	beq.n	8017c24 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8017c10:	68b9      	ldr	r1, [r7, #8]
 8017c12:	68f8      	ldr	r0, [r7, #12]
 8017c14:	f7ff fc52 	bl	80174bc <lfs_file_flush>
 8017c18:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8017c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d001      	beq.n	8017c24 <lfs_file_rawwrite+0x48>
            return err;
 8017c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c22:	e055      	b.n	8017cd0 <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8017c24:	68bb      	ldr	r3, [r7, #8]
 8017c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d009      	beq.n	8017c44 <lfs_file_rawwrite+0x68>
 8017c30:	68bb      	ldr	r3, [r7, #8]
 8017c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017c34:	68bb      	ldr	r3, [r7, #8]
 8017c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c38:	429a      	cmp	r2, r3
 8017c3a:	d203      	bcs.n	8017c44 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 8017c3c:	68bb      	ldr	r3, [r7, #8]
 8017c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c40:	68bb      	ldr	r3, [r7, #8]
 8017c42:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8017c44:	68bb      	ldr	r3, [r7, #8]
 8017c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017c48:	683b      	ldr	r3, [r7, #0]
 8017c4a:	441a      	add	r2, r3
 8017c4c:	68fb      	ldr	r3, [r7, #12]
 8017c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017c50:	429a      	cmp	r2, r3
 8017c52:	d902      	bls.n	8017c5a <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8017c54:	f06f 031a 	mvn.w	r3, #26
 8017c58:	e03a      	b.n	8017cd0 <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8017c5a:	68bb      	ldr	r3, [r7, #8]
 8017c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d121      	bne.n	8017caa <lfs_file_rawwrite+0xce>
 8017c66:	68bb      	ldr	r3, [r7, #8]
 8017c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017c6a:	68bb      	ldr	r3, [r7, #8]
 8017c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c6e:	429a      	cmp	r2, r3
 8017c70:	d91b      	bls.n	8017caa <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8017c72:	68bb      	ldr	r3, [r7, #8]
 8017c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017c76:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8017c78:	68bb      	ldr	r3, [r7, #8]
 8017c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c7c:	68bb      	ldr	r3, [r7, #8]
 8017c7e:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8017c80:	e00e      	b.n	8017ca0 <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8017c82:	2300      	movs	r3, #0
 8017c84:	75fb      	strb	r3, [r7, #23]
 8017c86:	f107 0217 	add.w	r2, r7, #23
 8017c8a:	2301      	movs	r3, #1
 8017c8c:	68b9      	ldr	r1, [r7, #8]
 8017c8e:	68f8      	ldr	r0, [r7, #12]
 8017c90:	f7ff fe7c 	bl	801798c <lfs_file_flushedwrite>
 8017c94:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8017c96:	69fb      	ldr	r3, [r7, #28]
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	da01      	bge.n	8017ca0 <lfs_file_rawwrite+0xc4>
                return res;
 8017c9c:	69fb      	ldr	r3, [r7, #28]
 8017c9e:	e017      	b.n	8017cd0 <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 8017ca0:	68bb      	ldr	r3, [r7, #8]
 8017ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017ca4:	6a3a      	ldr	r2, [r7, #32]
 8017ca6:	429a      	cmp	r2, r3
 8017ca8:	d8eb      	bhi.n	8017c82 <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8017caa:	683b      	ldr	r3, [r7, #0]
 8017cac:	687a      	ldr	r2, [r7, #4]
 8017cae:	68b9      	ldr	r1, [r7, #8]
 8017cb0:	68f8      	ldr	r0, [r7, #12]
 8017cb2:	f7ff fe6b 	bl	801798c <lfs_file_flushedwrite>
 8017cb6:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8017cb8:	69bb      	ldr	r3, [r7, #24]
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	da01      	bge.n	8017cc2 <lfs_file_rawwrite+0xe6>
        return nsize;
 8017cbe:	69bb      	ldr	r3, [r7, #24]
 8017cc0:	e006      	b.n	8017cd0 <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8017cc2:	68bb      	ldr	r3, [r7, #8]
 8017cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017cc6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8017cca:	68bb      	ldr	r3, [r7, #8]
 8017ccc:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 8017cce:	69bb      	ldr	r3, [r7, #24]
}
 8017cd0:	4618      	mov	r0, r3
 8017cd2:	3728      	adds	r7, #40	; 0x28
 8017cd4:	46bd      	mov	sp, r7
 8017cd6:	bd80      	pop	{r7, pc}
 8017cd8:	08021ce0 	.word	0x08021ce0
 8017cdc:	08022c4c 	.word	0x08022c4c
 8017ce0:	08021974 	.word	0x08021974

08017ce4 <lfs_file_rawseek>:
#endif

static lfs_soff_t lfs_file_rawseek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8017ce4:	b580      	push	{r7, lr}
 8017ce6:	b08c      	sub	sp, #48	; 0x30
 8017ce8:	af00      	add	r7, sp, #0
 8017cea:	60f8      	str	r0, [r7, #12]
 8017cec:	60b9      	str	r1, [r7, #8]
 8017cee:	607a      	str	r2, [r7, #4]
 8017cf0:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8017cf2:	68bb      	ldr	r3, [r7, #8]
 8017cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (whence == LFS_SEEK_SET) {
 8017cf8:	683b      	ldr	r3, [r7, #0]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d102      	bne.n	8017d04 <lfs_file_rawseek+0x20>
        npos = off;
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017d02:	e025      	b.n	8017d50 <lfs_file_rawseek+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8017d04:	683b      	ldr	r3, [r7, #0]
 8017d06:	2b01      	cmp	r3, #1
 8017d08:	d10f      	bne.n	8017d2a <lfs_file_rawseek+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8017d0a:	68bb      	ldr	r3, [r7, #8]
 8017d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017d0e:	461a      	mov	r2, r3
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	4413      	add	r3, r2
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	da02      	bge.n	8017d1e <lfs_file_rawseek+0x3a>
            return LFS_ERR_INVAL;
 8017d18:	f06f 0315 	mvn.w	r3, #21
 8017d1c:	e067      	b.n	8017dee <lfs_file_rawseek+0x10a>
        } else {
            npos = file->pos + off;
 8017d1e:	68bb      	ldr	r3, [r7, #8]
 8017d20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	4413      	add	r3, r2
 8017d26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017d28:	e012      	b.n	8017d50 <lfs_file_rawseek+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8017d2a:	683b      	ldr	r3, [r7, #0]
 8017d2c:	2b02      	cmp	r3, #2
 8017d2e:	d10f      	bne.n	8017d50 <lfs_file_rawseek+0x6c>
        lfs_soff_t res = lfs_file_rawsize(lfs, file) + off;
 8017d30:	68b9      	ldr	r1, [r7, #8]
 8017d32:	68f8      	ldr	r0, [r7, #12]
 8017d34:	f000 f85f 	bl	8017df6 <lfs_file_rawsize>
 8017d38:	4602      	mov	r2, r0
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	4413      	add	r3, r2
 8017d3e:	62bb      	str	r3, [r7, #40]	; 0x28
        if (res < 0) {
 8017d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	da02      	bge.n	8017d4c <lfs_file_rawseek+0x68>
            return LFS_ERR_INVAL;
 8017d46:	f06f 0315 	mvn.w	r3, #21
 8017d4a:	e050      	b.n	8017dee <lfs_file_rawseek+0x10a>
        } else {
            npos = res;
 8017d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    if (npos > lfs->file_max) {
 8017d50:	68fb      	ldr	r3, [r7, #12]
 8017d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d56:	429a      	cmp	r2, r3
 8017d58:	d902      	bls.n	8017d60 <lfs_file_rawseek+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 8017d5a:	f06f 0315 	mvn.w	r3, #21
 8017d5e:	e046      	b.n	8017dee <lfs_file_rawseek+0x10a>
    }

    if (file->pos == npos) {
 8017d60:	68bb      	ldr	r3, [r7, #8]
 8017d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017d64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d66:	429a      	cmp	r2, r3
 8017d68:	d101      	bne.n	8017d6e <lfs_file_rawseek+0x8a>
        // noop - position has not changed
        return npos;
 8017d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d6c:	e03f      	b.n	8017dee <lfs_file_rawseek+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 8017d6e:	68bb      	ldr	r3, [r7, #8]
 8017d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    if (
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d12b      	bne.n	8017dd2 <lfs_file_rawseek+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 8017d7a:	68bb      	ldr	r3, [r7, #8]
 8017d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017d7e:	61bb      	str	r3, [r7, #24]
 8017d80:	f107 0318 	add.w	r3, r7, #24
 8017d84:	4619      	mov	r1, r3
 8017d86:	68f8      	ldr	r0, [r7, #12]
 8017d88:	f7fe fe86 	bl	8016a98 <lfs_ctz_index>
 8017d8c:	6278      	str	r0, [r7, #36]	; 0x24
        lfs_off_t noff = npos;
 8017d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d90:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 8017d92:	f107 0314 	add.w	r3, r7, #20
 8017d96:	4619      	mov	r1, r3
 8017d98:	68f8      	ldr	r0, [r7, #12]
 8017d9a:	f7fe fe7d 	bl	8016a98 <lfs_ctz_index>
 8017d9e:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 8017da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017da2:	6a3b      	ldr	r3, [r7, #32]
 8017da4:	429a      	cmp	r2, r3
 8017da6:	d114      	bne.n	8017dd2 <lfs_file_rawseek+0xee>
                && noff >= file->cache.off
 8017da8:	68bb      	ldr	r3, [r7, #8]
 8017daa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017dac:	697b      	ldr	r3, [r7, #20]
 8017dae:	429a      	cmp	r2, r3
 8017db0:	d80f      	bhi.n	8017dd2 <lfs_file_rawseek+0xee>
                && noff < file->cache.off + file->cache.size) {
 8017db2:	68bb      	ldr	r3, [r7, #8]
 8017db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017db6:	68bb      	ldr	r3, [r7, #8]
 8017db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017dba:	441a      	add	r2, r3
 8017dbc:	697b      	ldr	r3, [r7, #20]
 8017dbe:	429a      	cmp	r2, r3
 8017dc0:	d907      	bls.n	8017dd2 <lfs_file_rawseek+0xee>
            file->pos = npos;
 8017dc2:	68bb      	ldr	r3, [r7, #8]
 8017dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017dc6:	635a      	str	r2, [r3, #52]	; 0x34
            file->off = noff;
 8017dc8:	697a      	ldr	r2, [r7, #20]
 8017dca:	68bb      	ldr	r3, [r7, #8]
 8017dcc:	63da      	str	r2, [r3, #60]	; 0x3c
            return npos;
 8017dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dd0:	e00d      	b.n	8017dee <lfs_file_rawseek+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8017dd2:	68b9      	ldr	r1, [r7, #8]
 8017dd4:	68f8      	ldr	r0, [r7, #12]
 8017dd6:	f7ff fb71 	bl	80174bc <lfs_file_flush>
 8017dda:	61f8      	str	r0, [r7, #28]
    if (err) {
 8017ddc:	69fb      	ldr	r3, [r7, #28]
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d001      	beq.n	8017de6 <lfs_file_rawseek+0x102>
        return err;
 8017de2:	69fb      	ldr	r3, [r7, #28]
 8017de4:	e003      	b.n	8017dee <lfs_file_rawseek+0x10a>
    }

    // update pos
    file->pos = npos;
 8017de6:	68bb      	ldr	r3, [r7, #8]
 8017de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017dea:	635a      	str	r2, [r3, #52]	; 0x34
    return npos;
 8017dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8017dee:	4618      	mov	r0, r3
 8017df0:	3730      	adds	r7, #48	; 0x30
 8017df2:	46bd      	mov	sp, r7
 8017df4:	bd80      	pop	{r7, pc}

08017df6 <lfs_file_rawsize>:
    }

    return 0;
}

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 8017df6:	b580      	push	{r7, lr}
 8017df8:	b082      	sub	sp, #8
 8017dfa:	af00      	add	r7, sp, #0
 8017dfc:	6078      	str	r0, [r7, #4]
 8017dfe:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8017e00:	683b      	ldr	r3, [r7, #0]
 8017e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d009      	beq.n	8017e20 <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8017e0c:	683b      	ldr	r3, [r7, #0]
 8017e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017e10:	683b      	ldr	r3, [r7, #0]
 8017e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e14:	4619      	mov	r1, r3
 8017e16:	4610      	mov	r0, r2
 8017e18:	f7fa fd4c 	bl	80128b4 <lfs_max>
 8017e1c:	4603      	mov	r3, r0
 8017e1e:	e001      	b.n	8017e24 <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 8017e20:	683b      	ldr	r3, [r7, #0]
 8017e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8017e24:	4618      	mov	r0, r3
 8017e26:	3708      	adds	r7, #8
 8017e28:	46bd      	mov	sp, r7
 8017e2a:	bd80      	pop	{r7, pc}

08017e2c <lfs_rawstat>:


/// General fs operations ///
static int lfs_rawstat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 8017e2c:	b580      	push	{r7, lr}
 8017e2e:	b08e      	sub	sp, #56	; 0x38
 8017e30:	af00      	add	r7, sp, #0
 8017e32:	60f8      	str	r0, [r7, #12]
 8017e34:	60b9      	str	r1, [r7, #8]
 8017e36:	607a      	str	r2, [r7, #4]
    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8017e38:	f107 0208 	add.w	r2, r7, #8
 8017e3c:	f107 0114 	add.w	r1, r7, #20
 8017e40:	2300      	movs	r3, #0
 8017e42:	68f8      	ldr	r0, [r7, #12]
 8017e44:	f7fc fff8 	bl	8014e38 <lfs_dir_find>
 8017e48:	6378      	str	r0, [r7, #52]	; 0x34
    if (tag < 0) {
 8017e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	da01      	bge.n	8017e54 <lfs_rawstat+0x28>
        return (int)tag;
 8017e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e52:	e00c      	b.n	8017e6e <lfs_rawstat+0x42>
    }

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 8017e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e56:	4618      	mov	r0, r3
 8017e58:	f7fb fa52 	bl	8013300 <lfs_tag_id>
 8017e5c:	4603      	mov	r3, r0
 8017e5e:	461a      	mov	r2, r3
 8017e60:	f107 0114 	add.w	r1, r7, #20
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	68f8      	ldr	r0, [r7, #12]
 8017e68:	f7fc ff22 	bl	8014cb0 <lfs_dir_getinfo>
 8017e6c:	4603      	mov	r3, r0
}
 8017e6e:	4618      	mov	r0, r3
 8017e70:	3738      	adds	r7, #56	; 0x38
 8017e72:	46bd      	mov	sp, r7
 8017e74:	bd80      	pop	{r7, pc}
	...

08017e78 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8017e78:	b580      	push	{r7, lr}
 8017e7a:	b08c      	sub	sp, #48	; 0x30
 8017e7c:	af00      	add	r7, sp, #0
 8017e7e:	6078      	str	r0, [r7, #4]
 8017e80:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	683a      	ldr	r2, [r7, #0]
 8017e86:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 8017e88:	2300      	movs	r3, #0
 8017e8a:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017e90:	695b      	ldr	r3, [r3, #20]
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d106      	bne.n	8017ea4 <lfs_init+0x2c>
 8017e96:	4b92      	ldr	r3, [pc, #584]	; (80180e0 <lfs_init+0x268>)
 8017e98:	4a92      	ldr	r2, [pc, #584]	; (80180e4 <lfs_init+0x26c>)
 8017e9a:	f640 7146 	movw	r1, #3910	; 0xf46
 8017e9e:	4892      	ldr	r0, [pc, #584]	; (80180e8 <lfs_init+0x270>)
 8017ea0:	f002 fe96 	bl	801abd0 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017ea8:	699b      	ldr	r3, [r3, #24]
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d106      	bne.n	8017ebc <lfs_init+0x44>
 8017eae:	4b8f      	ldr	r3, [pc, #572]	; (80180ec <lfs_init+0x274>)
 8017eb0:	4a8c      	ldr	r2, [pc, #560]	; (80180e4 <lfs_init+0x26c>)
 8017eb2:	f640 7147 	movw	r1, #3911	; 0xf47
 8017eb6:	488c      	ldr	r0, [pc, #560]	; (80180e8 <lfs_init+0x270>)
 8017eb8:	f002 fe8a 	bl	801abd0 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d106      	bne.n	8017ed4 <lfs_init+0x5c>
 8017ec6:	4b8a      	ldr	r3, [pc, #552]	; (80180f0 <lfs_init+0x278>)
 8017ec8:	4a86      	ldr	r2, [pc, #536]	; (80180e4 <lfs_init+0x26c>)
 8017eca:	f640 7148 	movw	r1, #3912	; 0xf48
 8017ece:	4886      	ldr	r0, [pc, #536]	; (80180e8 <lfs_init+0x270>)
 8017ed0:	f002 fe7e 	bl	801abd0 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017eda:	687a      	ldr	r2, [r7, #4]
 8017edc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8017ede:	6952      	ldr	r2, [r2, #20]
 8017ee0:	fbb3 f1f2 	udiv	r1, r3, r2
 8017ee4:	fb01 f202 	mul.w	r2, r1, r2
 8017ee8:	1a9b      	subs	r3, r3, r2
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d006      	beq.n	8017efc <lfs_init+0x84>
 8017eee:	4b81      	ldr	r3, [pc, #516]	; (80180f4 <lfs_init+0x27c>)
 8017ef0:	4a7c      	ldr	r2, [pc, #496]	; (80180e4 <lfs_init+0x26c>)
 8017ef2:	f640 714c 	movw	r1, #3916	; 0xf4c
 8017ef6:	487c      	ldr	r0, [pc, #496]	; (80180e8 <lfs_init+0x270>)
 8017ef8:	f002 fe6a 	bl	801abd0 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f02:	687a      	ldr	r2, [r7, #4]
 8017f04:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8017f06:	6992      	ldr	r2, [r2, #24]
 8017f08:	fbb3 f1f2 	udiv	r1, r3, r2
 8017f0c:	fb01 f202 	mul.w	r2, r1, r2
 8017f10:	1a9b      	subs	r3, r3, r2
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d006      	beq.n	8017f24 <lfs_init+0xac>
 8017f16:	4b78      	ldr	r3, [pc, #480]	; (80180f8 <lfs_init+0x280>)
 8017f18:	4a72      	ldr	r2, [pc, #456]	; (80180e4 <lfs_init+0x26c>)
 8017f1a:	f640 714d 	movw	r1, #3917	; 0xf4d
 8017f1e:	4872      	ldr	r0, [pc, #456]	; (80180e8 <lfs_init+0x270>)
 8017f20:	f002 fe56 	bl	801abd0 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017f28:	69db      	ldr	r3, [r3, #28]
 8017f2a:	687a      	ldr	r2, [r7, #4]
 8017f2c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8017f2e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8017f30:	fbb3 f1f2 	udiv	r1, r3, r2
 8017f34:	fb01 f202 	mul.w	r2, r1, r2
 8017f38:	1a9b      	subs	r3, r3, r2
 8017f3a:	2b00      	cmp	r3, #0
 8017f3c:	d006      	beq.n	8017f4c <lfs_init+0xd4>
 8017f3e:	4b6f      	ldr	r3, [pc, #444]	; (80180fc <lfs_init+0x284>)
 8017f40:	4a68      	ldr	r2, [pc, #416]	; (80180e4 <lfs_init+0x26c>)
 8017f42:	f640 714e 	movw	r1, #3918	; 0xf4e
 8017f46:	4868      	ldr	r0, [pc, #416]	; (80180e8 <lfs_init+0x270>)
 8017f48:	f002 fe42 	bl	801abd0 <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017f50:	69db      	ldr	r3, [r3, #28]
 8017f52:	3b08      	subs	r3, #8
 8017f54:	f04f 32ff 	mov.w	r2, #4294967295
 8017f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8017f5c:	4618      	mov	r0, r3
 8017f5e:	f7fa fcf0 	bl	8012942 <lfs_npw2>
 8017f62:	4603      	mov	r3, r0
 8017f64:	009a      	lsls	r2, r3, #2
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017f6a:	69db      	ldr	r3, [r3, #28]
 8017f6c:	429a      	cmp	r2, r3
 8017f6e:	d906      	bls.n	8017f7e <lfs_init+0x106>
 8017f70:	4b63      	ldr	r3, [pc, #396]	; (8018100 <lfs_init+0x288>)
 8017f72:	4a5c      	ldr	r2, [pc, #368]	; (80180e4 <lfs_init+0x26c>)
 8017f74:	f640 7151 	movw	r1, #3921	; 0xf51
 8017f78:	485b      	ldr	r0, [pc, #364]	; (80180e8 <lfs_init+0x270>)
 8017f7a:	f002 fe29 	bl	801abd0 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d106      	bne.n	8017f96 <lfs_init+0x11e>
 8017f88:	4b5e      	ldr	r3, [pc, #376]	; (8018104 <lfs_init+0x28c>)
 8017f8a:	4a56      	ldr	r2, [pc, #344]	; (80180e4 <lfs_init+0x26c>)
 8017f8c:	f640 715a 	movw	r1, #3930	; 0xf5a
 8017f90:	4855      	ldr	r0, [pc, #340]	; (80180e8 <lfs_init+0x270>)
 8017f92:	f002 fe1d 	bl	801abd0 <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d005      	beq.n	8017fac <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	60da      	str	r2, [r3, #12]
 8017faa:	e010      	b.n	8017fce <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017fb2:	4618      	mov	r0, r3
 8017fb4:	f7fa fd2d 	bl	8012a12 <lfs_malloc>
 8017fb8:	4602      	mov	r2, r0
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	68db      	ldr	r3, [r3, #12]
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d103      	bne.n	8017fce <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 8017fc6:	f06f 030b 	mvn.w	r3, #11
 8017fca:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8017fcc:	e0fd      	b.n	80181ca <lfs_init+0x352>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d005      	beq.n	8017fe4 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017fdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	61da      	str	r2, [r3, #28]
 8017fe2:	e010      	b.n	8018006 <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017fea:	4618      	mov	r0, r3
 8017fec:	f7fa fd11 	bl	8012a12 <lfs_malloc>
 8017ff0:	4602      	mov	r2, r0
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	69db      	ldr	r3, [r3, #28]
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d103      	bne.n	8018006 <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 8017ffe:	f06f 030b 	mvn.w	r3, #11
 8018002:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8018004:	e0e1      	b.n	80181ca <lfs_init+0x352>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	4619      	mov	r1, r3
 801800a:	6878      	ldr	r0, [r7, #4]
 801800c:	f7fa fd27 	bl	8012a5e <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	3310      	adds	r3, #16
 8018014:	4619      	mov	r1, r3
 8018016:	6878      	ldr	r0, [r7, #4]
 8018018:	f7fa fd21 	bl	8012a5e <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018022:	2b00      	cmp	r3, #0
 8018024:	d106      	bne.n	8018034 <lfs_init+0x1bc>
 8018026:	4b38      	ldr	r3, [pc, #224]	; (8018108 <lfs_init+0x290>)
 8018028:	4a2e      	ldr	r2, [pc, #184]	; (80180e4 <lfs_init+0x26c>)
 801802a:	f640 7178 	movw	r1, #3960	; 0xf78
 801802e:	482e      	ldr	r0, [pc, #184]	; (80180e8 <lfs_init+0x270>)
 8018030:	f002 fdce 	bl	801abd0 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801803a:	f003 0307 	and.w	r3, r3, #7
 801803e:	2b00      	cmp	r3, #0
 8018040:	d106      	bne.n	8018050 <lfs_init+0x1d8>
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018048:	f003 0303 	and.w	r3, r3, #3
 801804c:	2b00      	cmp	r3, #0
 801804e:	d006      	beq.n	801805e <lfs_init+0x1e6>
 8018050:	4b2e      	ldr	r3, [pc, #184]	; (801810c <lfs_init+0x294>)
 8018052:	4a24      	ldr	r2, [pc, #144]	; (80180e4 <lfs_init+0x26c>)
 8018054:	f640 7179 	movw	r1, #3961	; 0xf79
 8018058:	4823      	ldr	r0, [pc, #140]	; (80180e8 <lfs_init+0x270>)
 801805a:	f002 fdb9 	bl	801abd0 <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018064:	2b00      	cmp	r3, #0
 8018066:	d005      	beq.n	8018074 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801806c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	665a      	str	r2, [r3, #100]	; 0x64
 8018072:	e010      	b.n	8018096 <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801807a:	4618      	mov	r0, r3
 801807c:	f7fa fcc9 	bl	8012a12 <lfs_malloc>
 8018080:	4602      	mov	r2, r0
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801808a:	2b00      	cmp	r3, #0
 801808c:	d103      	bne.n	8018096 <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 801808e:	f06f 030b 	mvn.w	r3, #11
 8018092:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8018094:	e099      	b.n	80181ca <lfs_init+0x352>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801809a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801809c:	2bff      	cmp	r3, #255	; 0xff
 801809e:	d906      	bls.n	80180ae <lfs_init+0x236>
 80180a0:	4b1b      	ldr	r3, [pc, #108]	; (8018110 <lfs_init+0x298>)
 80180a2:	4a10      	ldr	r2, [pc, #64]	; (80180e4 <lfs_init+0x26c>)
 80180a4:	f640 7186 	movw	r1, #3974	; 0xf86
 80180a8:	480f      	ldr	r0, [pc, #60]	; (80180e8 <lfs_init+0x270>)
 80180aa:	f002 fd91 	bl	801abd0 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80180b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d102      	bne.n	80180c6 <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	22ff      	movs	r2, #255	; 0xff
 80180c4:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80180ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	da23      	bge.n	8018118 <lfs_init+0x2a0>
 80180d0:	4b10      	ldr	r3, [pc, #64]	; (8018114 <lfs_init+0x29c>)
 80180d2:	4a04      	ldr	r2, [pc, #16]	; (80180e4 <lfs_init+0x26c>)
 80180d4:	f640 718c 	movw	r1, #3980	; 0xf8c
 80180d8:	4803      	ldr	r0, [pc, #12]	; (80180e8 <lfs_init+0x270>)
 80180da:	f002 fd79 	bl	801abd0 <__assert_func>
 80180de:	bf00      	nop
 80180e0:	08021d10 	.word	0x08021d10
 80180e4:	08022c60 	.word	0x08022c60
 80180e8:	08021974 	.word	0x08021974
 80180ec:	08021d2c 	.word	0x08021d2c
 80180f0:	08021d48 	.word	0x08021d48
 80180f4:	08021d64 	.word	0x08021d64
 80180f8:	08021d94 	.word	0x08021d94
 80180fc:	08021dc4 	.word	0x08021dc4
 8018100:	08021df8 	.word	0x08021df8
 8018104:	08021e44 	.word	0x08021e44
 8018108:	08021e60 	.word	0x08021e60
 801810c:	08021e80 	.word	0x08021e80
 8018110:	08021ed4 	.word	0x08021ed4
 8018114:	08021ef0 	.word	0x08021ef0
    lfs->file_max = lfs->cfg->file_max;
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801811c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018126:	2b00      	cmp	r3, #0
 8018128:	d103      	bne.n	8018132 <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8018130:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018138:	f240 32fe 	movw	r2, #1022	; 0x3fe
 801813c:	4293      	cmp	r3, r2
 801813e:	d906      	bls.n	801814e <lfs_init+0x2d6>
 8018140:	4b26      	ldr	r3, [pc, #152]	; (80181dc <lfs_init+0x364>)
 8018142:	4a27      	ldr	r2, [pc, #156]	; (80181e0 <lfs_init+0x368>)
 8018144:	f640 7192 	movw	r1, #3986	; 0xf92
 8018148:	4826      	ldr	r0, [pc, #152]	; (80181e4 <lfs_init+0x36c>)
 801814a:	f002 fd41 	bl	801abd0 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018152:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801815c:	2b00      	cmp	r3, #0
 801815e:	d103      	bne.n	8018168 <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8018166:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801816c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018172:	69db      	ldr	r3, [r3, #28]
 8018174:	429a      	cmp	r2, r3
 8018176:	d906      	bls.n	8018186 <lfs_init+0x30e>
 8018178:	4b1b      	ldr	r3, [pc, #108]	; (80181e8 <lfs_init+0x370>)
 801817a:	4a19      	ldr	r2, [pc, #100]	; (80181e0 <lfs_init+0x368>)
 801817c:	f640 7198 	movw	r1, #3992	; 0xf98
 8018180:	4818      	ldr	r0, [pc, #96]	; (80181e4 <lfs_init+0x36c>)
 8018182:	f002 fd25 	bl	801abd0 <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	f04f 32ff 	mov.w	r2, #4294967295
 801818c:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	f04f 32ff 	mov.w	r2, #4294967295
 8018194:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	2200      	movs	r2, #0
 801819a:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	2200      	movs	r2, #0
 80181a0:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	333c      	adds	r3, #60	; 0x3c
 80181a6:	2200      	movs	r2, #0
 80181a8:	601a      	str	r2, [r3, #0]
 80181aa:	605a      	str	r2, [r3, #4]
 80181ac:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	3330      	adds	r3, #48	; 0x30
 80181b2:	2200      	movs	r2, #0
 80181b4:	601a      	str	r2, [r3, #0]
 80181b6:	605a      	str	r2, [r3, #4]
 80181b8:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	3348      	adds	r3, #72	; 0x48
 80181be:	2200      	movs	r2, #0
 80181c0:	601a      	str	r2, [r3, #0]
 80181c2:	605a      	str	r2, [r3, #4]
 80181c4:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 80181c6:	2300      	movs	r3, #0
 80181c8:	e003      	b.n	80181d2 <lfs_init+0x35a>

cleanup:
    lfs_deinit(lfs);
 80181ca:	6878      	ldr	r0, [r7, #4]
 80181cc:	f000 f80e 	bl	80181ec <lfs_deinit>
    return err;
 80181d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80181d2:	4618      	mov	r0, r3
 80181d4:	3730      	adds	r7, #48	; 0x30
 80181d6:	46bd      	mov	sp, r7
 80181d8:	bd80      	pop	{r7, pc}
 80181da:	bf00      	nop
 80181dc:	08021f14 	.word	0x08021f14
 80181e0:	08022c60 	.word	0x08022c60
 80181e4:	08021974 	.word	0x08021974
 80181e8:	08021f30 	.word	0x08021f30

080181ec <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 80181ec:	b580      	push	{r7, lr}
 80181ee:	b082      	sub	sp, #8
 80181f0:	af00      	add	r7, sp, #0
 80181f2:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80181f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d104      	bne.n	8018208 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	68db      	ldr	r3, [r3, #12]
 8018202:	4618      	mov	r0, r3
 8018204:	f7fa fc11 	bl	8012a2a <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801820c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801820e:	2b00      	cmp	r3, #0
 8018210:	d104      	bne.n	801821c <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	69db      	ldr	r3, [r3, #28]
 8018216:	4618      	mov	r0, r3
 8018218:	f7fa fc07 	bl	8012a2a <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018222:	2b00      	cmp	r3, #0
 8018224:	d104      	bne.n	8018230 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801822a:	4618      	mov	r0, r3
 801822c:	f7fa fbfd 	bl	8012a2a <lfs_free>
    }

    return 0;
 8018230:	2300      	movs	r3, #0
}
 8018232:	4618      	mov	r0, r3
 8018234:	3708      	adds	r7, #8
 8018236:	46bd      	mov	sp, r7
 8018238:	bd80      	pop	{r7, pc}
	...

0801823c <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 801823c:	b580      	push	{r7, lr}
 801823e:	b0a0      	sub	sp, #128	; 0x80
 8018240:	af00      	add	r7, sp, #0
 8018242:	6078      	str	r0, [r7, #4]
 8018244:	6039      	str	r1, [r7, #0]
    int err = 0;
 8018246:	2300      	movs	r3, #0
 8018248:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 801824a:	6839      	ldr	r1, [r7, #0]
 801824c:	6878      	ldr	r0, [r7, #4]
 801824e:	f7ff fe13 	bl	8017e78 <lfs_init>
 8018252:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8018254:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018256:	2b00      	cmp	r3, #0
 8018258:	d001      	beq.n	801825e <lfs_rawformat+0x22>
            return err;
 801825a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801825c:	e082      	b.n	8018364 <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018268:	461a      	mov	r2, r3
 801826a:	2100      	movs	r1, #0
 801826c:	f003 fe4c 	bl	801bf08 <memset>
        lfs->free.off = 0;
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	2200      	movs	r2, #0
 8018274:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801827a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801827c:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018282:	6a1b      	ldr	r3, [r3, #32]
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8018284:	4619      	mov	r1, r3
 8018286:	4610      	mov	r0, r2
 8018288:	f7fa fb24 	bl	80128d4 <lfs_min>
 801828c:	4602      	mov	r2, r0
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	2200      	movs	r2, #0
 8018296:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 8018298:	6878      	ldr	r0, [r7, #4]
 801829a:	f7fb fa61 	bl	8013760 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 801829e:	f107 030c 	add.w	r3, r7, #12
 80182a2:	4619      	mov	r1, r3
 80182a4:	6878      	ldr	r0, [r7, #4]
 80182a6:	f7fd f8b3 	bl	8015410 <lfs_dir_alloc>
 80182aa:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80182ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d14f      	bne.n	8018352 <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 80182b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80182b6:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80182bc:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 80182be:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80182c4:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 80182c6:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 80182cc:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 80182d2:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 80182d8:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 80182da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80182de:	4618      	mov	r0, r3
 80182e0:	f7fb f97e 	bl	80135e0 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 80182e4:	4b21      	ldr	r3, [pc, #132]	; (801836c <lfs_rawformat+0x130>)
 80182e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80182e8:	2300      	movs	r3, #0
 80182ea:	653b      	str	r3, [r7, #80]	; 0x50
 80182ec:	4b20      	ldr	r3, [pc, #128]	; (8018370 <lfs_rawformat+0x134>)
 80182ee:	657b      	str	r3, [r7, #84]	; 0x54
 80182f0:	4b20      	ldr	r3, [pc, #128]	; (8018374 <lfs_rawformat+0x138>)
 80182f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80182f4:	4b20      	ldr	r3, [pc, #128]	; (8018378 <lfs_rawformat+0x13c>)
 80182f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80182f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80182fc:	663b      	str	r3, [r7, #96]	; 0x60
 80182fe:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8018302:	f107 010c 	add.w	r1, r7, #12
 8018306:	2303      	movs	r3, #3
 8018308:	6878      	ldr	r0, [r7, #4]
 801830a:	f7fe fa5f 	bl	80167cc <lfs_dir_commit>
 801830e:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8018310:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018312:	2b00      	cmp	r3, #0
 8018314:	d11f      	bne.n	8018356 <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8018316:	2300      	movs	r3, #0
 8018318:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 801831c:	f107 010c 	add.w	r1, r7, #12
 8018320:	2300      	movs	r3, #0
 8018322:	2200      	movs	r2, #0
 8018324:	6878      	ldr	r0, [r7, #4]
 8018326:	f7fe fa51 	bl	80167cc <lfs_dir_commit>
 801832a:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 801832c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801832e:	2b00      	cmp	r3, #0
 8018330:	d113      	bne.n	801835a <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8018332:	2300      	movs	r3, #0
 8018334:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018336:	2301      	movs	r3, #1
 8018338:	633b      	str	r3, [r7, #48]	; 0x30
 801833a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801833e:	f107 030c 	add.w	r3, r7, #12
 8018342:	4619      	mov	r1, r3
 8018344:	6878      	ldr	r0, [r7, #4]
 8018346:	f7fc fc65 	bl	8014c14 <lfs_dir_fetch>
 801834a:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 801834c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801834e:	2b00      	cmp	r3, #0
 8018350:	e004      	b.n	801835c <lfs_rawformat+0x120>
            goto cleanup;
 8018352:	bf00      	nop
 8018354:	e002      	b.n	801835c <lfs_rawformat+0x120>
            goto cleanup;
 8018356:	bf00      	nop
 8018358:	e000      	b.n	801835c <lfs_rawformat+0x120>
            goto cleanup;
 801835a:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 801835c:	6878      	ldr	r0, [r7, #4]
 801835e:	f7ff ff45 	bl	80181ec <lfs_deinit>
    return err;
 8018362:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 8018364:	4618      	mov	r0, r3
 8018366:	3780      	adds	r7, #128	; 0x80
 8018368:	46bd      	mov	sp, r7
 801836a:	bd80      	pop	{r7, pc}
 801836c:	40100000 	.word	0x40100000
 8018370:	0ff00008 	.word	0x0ff00008
 8018374:	08021f60 	.word	0x08021f60
 8018378:	20100018 	.word	0x20100018

0801837c <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 801837c:	b580      	push	{r7, lr}
 801837e:	b09c      	sub	sp, #112	; 0x70
 8018380:	af04      	add	r7, sp, #16
 8018382:	6078      	str	r0, [r7, #4]
 8018384:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8018386:	6839      	ldr	r1, [r7, #0]
 8018388:	6878      	ldr	r0, [r7, #4]
 801838a:	f7ff fd75 	bl	8017e78 <lfs_init>
 801838e:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 8018390:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018392:	2b00      	cmp	r3, #0
 8018394:	d001      	beq.n	801839a <lfs_rawmount+0x1e>
        return err;
 8018396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018398:	e192      	b.n	80186c0 <lfs_rawmount+0x344>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 801839a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801839e:	2220      	movs	r2, #32
 80183a0:	2100      	movs	r1, #0
 80183a2:	4618      	mov	r0, r3
 80183a4:	f003 fdb0 	bl	801bf08 <memset>
 80183a8:	2301      	movs	r3, #1
 80183aa:	64fb      	str	r3, [r7, #76]	; 0x4c
    lfs_block_t cycle = 0;
 80183ac:	2300      	movs	r3, #0
 80183ae:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 80183b0:	e10b      	b.n	80185ca <lfs_rawmount+0x24e>
        if (cycle >= lfs->cfg->block_count/2) {
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80183b6:	6a1b      	ldr	r3, [r3, #32]
 80183b8:	085b      	lsrs	r3, r3, #1
 80183ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80183bc:	429a      	cmp	r2, r3
 80183be:	d303      	bcc.n	80183c8 <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 80183c0:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80183c4:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80183c6:	e177      	b.n	80186b8 <lfs_rawmount+0x33c>
        }
        cycle += 1;
 80183c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80183ca:	3301      	adds	r3, #1
 80183cc:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	627b      	str	r3, [r7, #36]	; 0x24
 80183d2:	4b8a      	ldr	r3, [pc, #552]	; (80185fc <lfs_rawmount+0x280>)
 80183d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80183d6:	2308      	movs	r3, #8
 80183d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 80183da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80183de:	f103 0218 	add.w	r2, r3, #24
 80183e2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80183e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80183ea:	9303      	str	r3, [sp, #12]
 80183ec:	4b84      	ldr	r3, [pc, #528]	; (8018600 <lfs_rawmount+0x284>)
 80183ee:	9302      	str	r3, [sp, #8]
 80183f0:	2300      	movs	r3, #0
 80183f2:	9301      	str	r3, [sp, #4]
 80183f4:	4b83      	ldr	r3, [pc, #524]	; (8018604 <lfs_rawmount+0x288>)
 80183f6:	9300      	str	r3, [sp, #0]
 80183f8:	4b83      	ldr	r3, [pc, #524]	; (8018608 <lfs_rawmount+0x28c>)
 80183fa:	6878      	ldr	r0, [r7, #4]
 80183fc:	f7fc f89c 	bl	8014538 <lfs_dir_fetchmatch>
 8018400:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8018402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018404:	2b00      	cmp	r3, #0
 8018406:	da02      	bge.n	801840e <lfs_rawmount+0x92>
            err = tag;
 8018408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801840a:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 801840c:	e154      	b.n	80186b8 <lfs_rawmount+0x33c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 801840e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018410:	2b00      	cmp	r3, #0
 8018412:	f000 80cd 	beq.w	80185b0 <lfs_rawmount+0x234>
 8018416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018418:	4618      	mov	r0, r3
 801841a:	f7fa ff24 	bl	8013266 <lfs_tag_isdelete>
 801841e:	4603      	mov	r3, r0
 8018420:	f083 0301 	eor.w	r3, r3, #1
 8018424:	b2db      	uxtb	r3, r3
 8018426:	2b00      	cmp	r3, #0
 8018428:	f000 80c2 	beq.w	80185b0 <lfs_rawmount+0x234>
            // update root
            lfs->root[0] = dir.pair[0];
 801842c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8018432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8018438:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801843c:	f107 030c 	add.w	r3, r7, #12
 8018440:	9300      	str	r3, [sp, #0]
 8018442:	4b72      	ldr	r3, [pc, #456]	; (801860c <lfs_rawmount+0x290>)
 8018444:	4a70      	ldr	r2, [pc, #448]	; (8018608 <lfs_rawmount+0x28c>)
 8018446:	6878      	ldr	r0, [r7, #4]
 8018448:	f7fb fb44 	bl	8013ad4 <lfs_dir_get>
 801844c:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 801844e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018450:	2b00      	cmp	r3, #0
 8018452:	da02      	bge.n	801845a <lfs_rawmount+0xde>
                err = tag;
 8018454:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018456:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8018458:	e12e      	b.n	80186b8 <lfs_rawmount+0x33c>
            }
            lfs_superblock_fromle32(&superblock);
 801845a:	f107 030c 	add.w	r3, r7, #12
 801845e:	4618      	mov	r0, r3
 8018460:	f7fb f886 	bl	8013570 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8018464:	68fb      	ldr	r3, [r7, #12]
 8018466:	0c1b      	lsrs	r3, r3, #16
 8018468:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 801846c:	68fb      	ldr	r3, [r7, #12]
 801846e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 8018472:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8018476:	2b02      	cmp	r3, #2
 8018478:	d103      	bne.n	8018482 <lfs_rawmount+0x106>
 801847a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801847e:	2b00      	cmp	r3, #0
 8018480:	d011      	beq.n	80184a6 <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 8018482:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8018486:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801848a:	4961      	ldr	r1, [pc, #388]	; (8018610 <lfs_rawmount+0x294>)
 801848c:	9101      	str	r1, [sp, #4]
 801848e:	9300      	str	r3, [sp, #0]
 8018490:	4613      	mov	r3, r2
 8018492:	f241 0233 	movw	r2, #4147	; 0x1033
 8018496:	495f      	ldr	r1, [pc, #380]	; (8018614 <lfs_rawmount+0x298>)
 8018498:	485f      	ldr	r0, [pc, #380]	; (8018618 <lfs_rawmount+0x29c>)
 801849a:	f003 fbd3 	bl	801bc44 <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 801849e:	f06f 0315 	mvn.w	r3, #21
 80184a2:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80184a4:	e083      	b.n	80185ae <lfs_rawmount+0x232>
            }

            // check superblock configuration
            if (superblock.name_max) {
 80184a6:	69bb      	ldr	r3, [r7, #24]
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d018      	beq.n	80184de <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 80184ac:	69ba      	ldr	r2, [r7, #24]
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80184b2:	429a      	cmp	r2, r3
 80184b4:	d910      	bls.n	80184d8 <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 80184b6:	69ba      	ldr	r2, [r7, #24]
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80184bc:	4954      	ldr	r1, [pc, #336]	; (8018610 <lfs_rawmount+0x294>)
 80184be:	9101      	str	r1, [sp, #4]
 80184c0:	9300      	str	r3, [sp, #0]
 80184c2:	4613      	mov	r3, r2
 80184c4:	f241 023c 	movw	r2, #4156	; 0x103c
 80184c8:	4952      	ldr	r1, [pc, #328]	; (8018614 <lfs_rawmount+0x298>)
 80184ca:	4854      	ldr	r0, [pc, #336]	; (801861c <lfs_rawmount+0x2a0>)
 80184cc:	f003 fbba 	bl	801bc44 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 80184d0:	f06f 0315 	mvn.w	r3, #21
 80184d4:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 80184d6:	e06a      	b.n	80185ae <lfs_rawmount+0x232>
                }

                lfs->name_max = superblock.name_max;
 80184d8:	69ba      	ldr	r2, [r7, #24]
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 80184de:	69fb      	ldr	r3, [r7, #28]
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	d018      	beq.n	8018516 <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 80184e4:	69fa      	ldr	r2, [r7, #28]
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80184ea:	429a      	cmp	r2, r3
 80184ec:	d910      	bls.n	8018510 <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 80184ee:	69fa      	ldr	r2, [r7, #28]
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80184f4:	4946      	ldr	r1, [pc, #280]	; (8018610 <lfs_rawmount+0x294>)
 80184f6:	9101      	str	r1, [sp, #4]
 80184f8:	9300      	str	r3, [sp, #0]
 80184fa:	4613      	mov	r3, r2
 80184fc:	f241 0247 	movw	r2, #4167	; 0x1047
 8018500:	4944      	ldr	r1, [pc, #272]	; (8018614 <lfs_rawmount+0x298>)
 8018502:	4847      	ldr	r0, [pc, #284]	; (8018620 <lfs_rawmount+0x2a4>)
 8018504:	f003 fb9e 	bl	801bc44 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8018508:	f06f 0315 	mvn.w	r3, #21
 801850c:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 801850e:	e04e      	b.n	80185ae <lfs_rawmount+0x232>
                }

                lfs->file_max = superblock.file_max;
 8018510:	69fa      	ldr	r2, [r7, #28]
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 8018516:	6a3b      	ldr	r3, [r7, #32]
 8018518:	2b00      	cmp	r3, #0
 801851a:	d018      	beq.n	801854e <lfs_rawmount+0x1d2>
                if (superblock.attr_max > lfs->attr_max) {
 801851c:	6a3a      	ldr	r2, [r7, #32]
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018522:	429a      	cmp	r2, r3
 8018524:	d910      	bls.n	8018548 <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8018526:	6a3a      	ldr	r2, [r7, #32]
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801852c:	4938      	ldr	r1, [pc, #224]	; (8018610 <lfs_rawmount+0x294>)
 801852e:	9101      	str	r1, [sp, #4]
 8018530:	9300      	str	r3, [sp, #0]
 8018532:	4613      	mov	r3, r2
 8018534:	f241 0252 	movw	r2, #4178	; 0x1052
 8018538:	4936      	ldr	r1, [pc, #216]	; (8018614 <lfs_rawmount+0x298>)
 801853a:	483a      	ldr	r0, [pc, #232]	; (8018624 <lfs_rawmount+0x2a8>)
 801853c:	f003 fb82 	bl	801bc44 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8018540:	f06f 0315 	mvn.w	r3, #21
 8018544:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8018546:	e032      	b.n	80185ae <lfs_rawmount+0x232>
                }

                lfs->attr_max = superblock.attr_max;
 8018548:	6a3a      	ldr	r2, [r7, #32]
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 801854e:	697a      	ldr	r2, [r7, #20]
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018554:	6a1b      	ldr	r3, [r3, #32]
 8018556:	429a      	cmp	r2, r3
 8018558:	d011      	beq.n	801857e <lfs_rawmount+0x202>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 801855a:	697a      	ldr	r2, [r7, #20]
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018560:	6a1b      	ldr	r3, [r3, #32]
 8018562:	492b      	ldr	r1, [pc, #172]	; (8018610 <lfs_rawmount+0x294>)
 8018564:	9101      	str	r1, [sp, #4]
 8018566:	9300      	str	r3, [sp, #0]
 8018568:	4613      	mov	r3, r2
 801856a:	f241 025c 	movw	r2, #4188	; 0x105c
 801856e:	4929      	ldr	r1, [pc, #164]	; (8018614 <lfs_rawmount+0x298>)
 8018570:	482d      	ldr	r0, [pc, #180]	; (8018628 <lfs_rawmount+0x2ac>)
 8018572:	f003 fb67 	bl	801bc44 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8018576:	f06f 0315 	mvn.w	r3, #21
 801857a:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 801857c:	e017      	b.n	80185ae <lfs_rawmount+0x232>
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 801857e:	693a      	ldr	r2, [r7, #16]
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018584:	69db      	ldr	r3, [r3, #28]
 8018586:	429a      	cmp	r2, r3
 8018588:	d012      	beq.n	80185b0 <lfs_rawmount+0x234>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 801858a:	693a      	ldr	r2, [r7, #16]
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018590:	69db      	ldr	r3, [r3, #28]
 8018592:	491f      	ldr	r1, [pc, #124]	; (8018610 <lfs_rawmount+0x294>)
 8018594:	9101      	str	r1, [sp, #4]
 8018596:	9300      	str	r3, [sp, #0]
 8018598:	4613      	mov	r3, r2
 801859a:	f241 0263 	movw	r2, #4195	; 0x1063
 801859e:	491d      	ldr	r1, [pc, #116]	; (8018614 <lfs_rawmount+0x298>)
 80185a0:	4822      	ldr	r0, [pc, #136]	; (801862c <lfs_rawmount+0x2b0>)
 80185a2:	f003 fb4f 	bl	801bc44 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 80185a6:	f06f 0315 	mvn.w	r3, #21
 80185aa:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80185ac:	bf00      	nop
            goto cleanup;
 80185ae:	e083      	b.n	80186b8 <lfs_rawmount+0x33c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80185b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80185ba:	4619      	mov	r1, r3
 80185bc:	6878      	ldr	r0, [r7, #4]
 80185be:	f7fc fb45 	bl	8014c4c <lfs_dir_getgstate>
 80185c2:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 80185c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d175      	bne.n	80186b6 <lfs_rawmount+0x33a>
    while (!lfs_pair_isnull(dir.tail)) {
 80185ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80185ce:	3318      	adds	r3, #24
 80185d0:	4618      	mov	r0, r3
 80185d2:	f7fa fd94 	bl	80130fe <lfs_pair_isnull>
 80185d6:	4603      	mov	r3, r0
 80185d8:	f083 0301 	eor.w	r3, r3, #1
 80185dc:	b2db      	uxtb	r3, r3
 80185de:	2b00      	cmp	r3, #0
 80185e0:	f47f aee7 	bne.w	80183b2 <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	3320      	adds	r3, #32
 80185e8:	4618      	mov	r0, r3
 80185ea:	f7fa fd88 	bl	80130fe <lfs_pair_isnull>
 80185ee:	4603      	mov	r3, r0
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d01d      	beq.n	8018630 <lfs_rawmount+0x2b4>
        err = LFS_ERR_INVAL;
 80185f4:	f06f 0315 	mvn.w	r3, #21
 80185f8:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80185fa:	e05d      	b.n	80186b8 <lfs_rawmount+0x33c>
 80185fc:	08021f60 	.word	0x08021f60
 8018600:	08014da5 	.word	0x08014da5
 8018604:	0ff00008 	.word	0x0ff00008
 8018608:	7ffffc00 	.word	0x7ffffc00
 801860c:	20100018 	.word	0x20100018
 8018610:	08021a88 	.word	0x08021a88
 8018614:	08021974 	.word	0x08021974
 8018618:	08021f6c 	.word	0x08021f6c
 801861c:	08021f98 	.word	0x08021f98
 8018620:	08021fcc 	.word	0x08021fcc
 8018624:	08022000 	.word	0x08022000
 8018628:	08022034 	.word	0x08022034
 801862c:	08022068 	.word	0x08022068
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	3330      	adds	r3, #48	; 0x30
 8018634:	4618      	mov	r0, r3
 8018636:	f7fa feb9 	bl	80133ac <lfs_gstate_iszero>
 801863a:	4603      	mov	r3, r0
 801863c:	f083 0301 	eor.w	r3, r3, #1
 8018640:	b2db      	uxtb	r3, r3
 8018642:	2b00      	cmp	r3, #0
 8018644:	d010      	beq.n	8018668 <lfs_rawmount+0x2ec>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801864e:	687a      	ldr	r2, [r7, #4]
 8018650:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8018652:	481d      	ldr	r0, [pc, #116]	; (80186c8 <lfs_rawmount+0x34c>)
 8018654:	9002      	str	r0, [sp, #8]
 8018656:	9201      	str	r2, [sp, #4]
 8018658:	9300      	str	r3, [sp, #0]
 801865a:	460b      	mov	r3, r1
 801865c:	f241 0279 	movw	r2, #4217	; 0x1079
 8018660:	491a      	ldr	r1, [pc, #104]	; (80186cc <lfs_rawmount+0x350>)
 8018662:	481b      	ldr	r0, [pc, #108]	; (80186d0 <lfs_rawmount+0x354>)
 8018664:	f003 faee 	bl	801bc44 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801866c:	4618      	mov	r0, r3
 801866e:	f7fa fdec 	bl	801324a <lfs_tag_isvalid>
 8018672:	4603      	mov	r3, r0
 8018674:	f083 0301 	eor.w	r3, r3, #1
 8018678:	b2db      	uxtb	r3, r3
 801867a:	461a      	mov	r2, r3
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018680:	441a      	add	r2, r3
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	687a      	ldr	r2, [r7, #4]
 801868a:	333c      	adds	r3, #60	; 0x3c
 801868c:	3230      	adds	r2, #48	; 0x30
 801868e:	ca07      	ldmia	r2, {r0, r1, r2}
 8018690:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018698:	687a      	ldr	r2, [r7, #4]
 801869a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801869c:	6a12      	ldr	r2, [r2, #32]
 801869e:	fbb3 f1f2 	udiv	r1, r3, r2
 80186a2:	fb01 f202 	mul.w	r2, r1, r2
 80186a6:	1a9a      	subs	r2, r3, r2
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 80186ac:	6878      	ldr	r0, [r7, #4]
 80186ae:	f7fb f866 	bl	801377e <lfs_alloc_drop>

    return 0;
 80186b2:	2300      	movs	r3, #0
 80186b4:	e004      	b.n	80186c0 <lfs_rawmount+0x344>
            goto cleanup;
 80186b6:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 80186b8:	6878      	ldr	r0, [r7, #4]
 80186ba:	f000 f80b 	bl	80186d4 <lfs_rawunmount>
    return err;
 80186be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 80186c0:	4618      	mov	r0, r3
 80186c2:	3760      	adds	r7, #96	; 0x60
 80186c4:	46bd      	mov	sp, r7
 80186c6:	bd80      	pop	{r7, pc}
 80186c8:	08021a88 	.word	0x08021a88
 80186cc:	08021974 	.word	0x08021974
 80186d0:	08022098 	.word	0x08022098

080186d4 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 80186d4:	b580      	push	{r7, lr}
 80186d6:	b082      	sub	sp, #8
 80186d8:	af00      	add	r7, sp, #0
 80186da:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 80186dc:	6878      	ldr	r0, [r7, #4]
 80186de:	f7ff fd85 	bl	80181ec <lfs_deinit>
 80186e2:	4603      	mov	r3, r0
}
 80186e4:	4618      	mov	r0, r3
 80186e6:	3708      	adds	r7, #8
 80186e8:	46bd      	mov	sp, r7
 80186ea:	bd80      	pop	{r7, pc}

080186ec <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 80186ec:	b590      	push	{r4, r7, lr}
 80186ee:	b09d      	sub	sp, #116	; 0x74
 80186f0:	af04      	add	r7, sp, #16
 80186f2:	60f8      	str	r0, [r7, #12]
 80186f4:	60b9      	str	r1, [r7, #8]
 80186f6:	607a      	str	r2, [r7, #4]
 80186f8:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 80186fa:	f107 0318 	add.w	r3, r7, #24
 80186fe:	2220      	movs	r2, #32
 8018700:	2100      	movs	r1, #0
 8018702:	4618      	mov	r0, r3
 8018704:	f003 fc00 	bl	801bf08 <memset>
 8018708:	2301      	movs	r3, #1
 801870a:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 801870c:	2300      	movs	r3, #0
 801870e:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8018710:	e0a7      	b.n	8018862 <lfs_fs_rawtraverse+0x176>
        if (cycle >= lfs->cfg->block_count/2) {
 8018712:	68fb      	ldr	r3, [r7, #12]
 8018714:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018716:	6a1b      	ldr	r3, [r3, #32]
 8018718:	085b      	lsrs	r3, r3, #1
 801871a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801871c:	429a      	cmp	r2, r3
 801871e:	d302      	bcc.n	8018726 <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 8018720:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8018724:	e102      	b.n	801892c <lfs_fs_rawtraverse+0x240>
        }
        cycle += 1;
 8018726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018728:	3301      	adds	r3, #1
 801872a:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 801872c:	2300      	movs	r3, #0
 801872e:	65bb      	str	r3, [r7, #88]	; 0x58
 8018730:	e013      	b.n	801875a <lfs_fs_rawtraverse+0x6e>
            int err = cb(data, dir.tail[i]);
 8018732:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018734:	3306      	adds	r3, #6
 8018736:	009b      	lsls	r3, r3, #2
 8018738:	3360      	adds	r3, #96	; 0x60
 801873a:	443b      	add	r3, r7
 801873c:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8018740:	68bb      	ldr	r3, [r7, #8]
 8018742:	4611      	mov	r1, r2
 8018744:	6878      	ldr	r0, [r7, #4]
 8018746:	4798      	blx	r3
 8018748:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 801874a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801874c:	2b00      	cmp	r3, #0
 801874e:	d001      	beq.n	8018754 <lfs_fs_rawtraverse+0x68>
                return err;
 8018750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018752:	e0eb      	b.n	801892c <lfs_fs_rawtraverse+0x240>
        for (int i = 0; i < 2; i++) {
 8018754:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018756:	3301      	adds	r3, #1
 8018758:	65bb      	str	r3, [r7, #88]	; 0x58
 801875a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801875c:	2b01      	cmp	r3, #1
 801875e:	dde8      	ble.n	8018732 <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8018760:	f107 0318 	add.w	r3, r7, #24
 8018764:	f103 0218 	add.w	r2, r3, #24
 8018768:	f107 0318 	add.w	r3, r7, #24
 801876c:	4619      	mov	r1, r3
 801876e:	68f8      	ldr	r0, [r7, #12]
 8018770:	f7fc fa50 	bl	8014c14 <lfs_dir_fetch>
 8018774:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 8018776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018778:	2b00      	cmp	r3, #0
 801877a:	d001      	beq.n	8018780 <lfs_fs_rawtraverse+0x94>
            return err;
 801877c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801877e:	e0d5      	b.n	801892c <lfs_fs_rawtraverse+0x240>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8018780:	2300      	movs	r3, #0
 8018782:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8018786:	e067      	b.n	8018858 <lfs_fs_rawtraverse+0x16c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8018788:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801878c:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801878e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8018792:	f043 0308 	orr.w	r3, r3, #8
 8018796:	f107 0118 	add.w	r1, r7, #24
 801879a:	f107 0210 	add.w	r2, r7, #16
 801879e:	9200      	str	r2, [sp, #0]
 80187a0:	4a64      	ldr	r2, [pc, #400]	; (8018934 <lfs_fs_rawtraverse+0x248>)
 80187a2:	68f8      	ldr	r0, [r7, #12]
 80187a4:	f7fb f996 	bl	8013ad4 <lfs_dir_get>
 80187a8:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 80187aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	da05      	bge.n	80187bc <lfs_fs_rawtraverse+0xd0>
                if (tag == LFS_ERR_NOENT) {
 80187b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80187b2:	f113 0f02 	cmn.w	r3, #2
 80187b6:	d049      	beq.n	801884c <lfs_fs_rawtraverse+0x160>
                    continue;
                }
                return tag;
 80187b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80187ba:	e0b7      	b.n	801892c <lfs_fs_rawtraverse+0x240>
            }
            lfs_ctz_fromle32(&ctz);
 80187bc:	f107 0310 	add.w	r3, r7, #16
 80187c0:	4618      	mov	r0, r3
 80187c2:	f7fa fea5 	bl	8013510 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 80187c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80187c8:	4618      	mov	r0, r3
 80187ca:	f7fa fd6f 	bl	80132ac <lfs_tag_type3>
 80187ce:	4603      	mov	r3, r0
 80187d0:	461a      	mov	r2, r3
 80187d2:	f240 2302 	movw	r3, #514	; 0x202
 80187d6:	429a      	cmp	r2, r3
 80187d8:	d113      	bne.n	8018802 <lfs_fs_rawtraverse+0x116>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 80187da:	68f9      	ldr	r1, [r7, #12]
 80187dc:	6938      	ldr	r0, [r7, #16]
 80187de:	697b      	ldr	r3, [r7, #20]
 80187e0:	687a      	ldr	r2, [r7, #4]
 80187e2:	9202      	str	r2, [sp, #8]
 80187e4:	68ba      	ldr	r2, [r7, #8]
 80187e6:	9201      	str	r2, [sp, #4]
 80187e8:	9300      	str	r3, [sp, #0]
 80187ea:	4603      	mov	r3, r0
 80187ec:	460a      	mov	r2, r1
 80187ee:	2100      	movs	r1, #0
 80187f0:	68f8      	ldr	r0, [r7, #12]
 80187f2:	f7fe fafd 	bl	8016df0 <lfs_ctz_traverse>
 80187f6:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 80187f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d027      	beq.n	801884e <lfs_fs_rawtraverse+0x162>
                    return err;
 80187fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018800:	e094      	b.n	801892c <lfs_fs_rawtraverse+0x240>
                }
            } else if (includeorphans &&
 8018802:	78fb      	ldrb	r3, [r7, #3]
 8018804:	2b00      	cmp	r3, #0
 8018806:	d022      	beq.n	801884e <lfs_fs_rawtraverse+0x162>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8018808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801880a:	4618      	mov	r0, r3
 801880c:	f7fa fd4e 	bl	80132ac <lfs_tag_type3>
 8018810:	4603      	mov	r3, r0
            } else if (includeorphans &&
 8018812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018816:	d11a      	bne.n	801884e <lfs_fs_rawtraverse+0x162>
                for (int i = 0; i < 2; i++) {
 8018818:	2300      	movs	r3, #0
 801881a:	653b      	str	r3, [r7, #80]	; 0x50
 801881c:	e012      	b.n	8018844 <lfs_fs_rawtraverse+0x158>
                    err = cb(data, (&ctz.head)[i]);
 801881e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018820:	009b      	lsls	r3, r3, #2
 8018822:	f107 0210 	add.w	r2, r7, #16
 8018826:	4413      	add	r3, r2
 8018828:	681a      	ldr	r2, [r3, #0]
 801882a:	68bb      	ldr	r3, [r7, #8]
 801882c:	4611      	mov	r1, r2
 801882e:	6878      	ldr	r0, [r7, #4]
 8018830:	4798      	blx	r3
 8018832:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 8018834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018836:	2b00      	cmp	r3, #0
 8018838:	d001      	beq.n	801883e <lfs_fs_rawtraverse+0x152>
                        return err;
 801883a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801883c:	e076      	b.n	801892c <lfs_fs_rawtraverse+0x240>
                for (int i = 0; i < 2; i++) {
 801883e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018840:	3301      	adds	r3, #1
 8018842:	653b      	str	r3, [r7, #80]	; 0x50
 8018844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018846:	2b01      	cmp	r3, #1
 8018848:	dde9      	ble.n	801881e <lfs_fs_rawtraverse+0x132>
 801884a:	e000      	b.n	801884e <lfs_fs_rawtraverse+0x162>
                    continue;
 801884c:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 801884e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8018852:	3301      	adds	r3, #1
 8018854:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8018858:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801885a:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 801885e:	429a      	cmp	r2, r3
 8018860:	d392      	bcc.n	8018788 <lfs_fs_rawtraverse+0x9c>
    while (!lfs_pair_isnull(dir.tail)) {
 8018862:	f107 0318 	add.w	r3, r7, #24
 8018866:	3318      	adds	r3, #24
 8018868:	4618      	mov	r0, r3
 801886a:	f7fa fc48 	bl	80130fe <lfs_pair_isnull>
 801886e:	4603      	mov	r3, r0
 8018870:	f083 0301 	eor.w	r3, r3, #1
 8018874:	b2db      	uxtb	r3, r3
 8018876:	2b00      	cmp	r3, #0
 8018878:	f47f af4b 	bne.w	8018712 <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801887c:	68fb      	ldr	r3, [r7, #12]
 801887e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018880:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018882:	e04f      	b.n	8018924 <lfs_fs_rawtraverse+0x238>
        if (f->type != LFS_TYPE_REG) {
 8018884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018886:	799b      	ldrb	r3, [r3, #6]
 8018888:	2b01      	cmp	r3, #1
 801888a:	d147      	bne.n	801891c <lfs_fs_rawtraverse+0x230>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 801888c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801888e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018894:	2b00      	cmp	r3, #0
 8018896:	d01d      	beq.n	80188d4 <lfs_fs_rawtraverse+0x1e8>
 8018898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801889a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801889c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d117      	bne.n	80188d4 <lfs_fs_rawtraverse+0x1e8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 80188a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80188a6:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80188aa:	68f8      	ldr	r0, [r7, #12]
 80188ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80188ae:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80188b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80188b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188b4:	687a      	ldr	r2, [r7, #4]
 80188b6:	9202      	str	r2, [sp, #8]
 80188b8:	68ba      	ldr	r2, [r7, #8]
 80188ba:	9201      	str	r2, [sp, #4]
 80188bc:	9300      	str	r3, [sp, #0]
 80188be:	4623      	mov	r3, r4
 80188c0:	4602      	mov	r2, r0
 80188c2:	68f8      	ldr	r0, [r7, #12]
 80188c4:	f7fe fa94 	bl	8016df0 <lfs_ctz_traverse>
 80188c8:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 80188ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d001      	beq.n	80188d4 <lfs_fs_rawtraverse+0x1e8>
                return err;
 80188d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80188d2:	e02b      	b.n	801892c <lfs_fs_rawtraverse+0x240>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 80188d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80188d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80188d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d01e      	beq.n	801891e <lfs_fs_rawtraverse+0x232>
 80188e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80188e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80188e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d118      	bne.n	801891e <lfs_fs_rawtraverse+0x232>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 80188ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80188ee:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80188f2:	68f8      	ldr	r0, [r7, #12]
 80188f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80188f6:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80188f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80188fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80188fc:	687a      	ldr	r2, [r7, #4]
 80188fe:	9202      	str	r2, [sp, #8]
 8018900:	68ba      	ldr	r2, [r7, #8]
 8018902:	9201      	str	r2, [sp, #4]
 8018904:	9300      	str	r3, [sp, #0]
 8018906:	4623      	mov	r3, r4
 8018908:	4602      	mov	r2, r0
 801890a:	68f8      	ldr	r0, [r7, #12]
 801890c:	f7fe fa70 	bl	8016df0 <lfs_ctz_traverse>
 8018910:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 8018912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018914:	2b00      	cmp	r3, #0
 8018916:	d002      	beq.n	801891e <lfs_fs_rawtraverse+0x232>
                return err;
 8018918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801891a:	e007      	b.n	801892c <lfs_fs_rawtraverse+0x240>
            continue;
 801891c:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801891e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018920:	681b      	ldr	r3, [r3, #0]
 8018922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018926:	2b00      	cmp	r3, #0
 8018928:	d1ac      	bne.n	8018884 <lfs_fs_rawtraverse+0x198>
            }
        }
    }
#endif

    return 0;
 801892a:	2300      	movs	r3, #0
}
 801892c:	4618      	mov	r0, r3
 801892e:	3764      	adds	r7, #100	; 0x64
 8018930:	46bd      	mov	sp, r7
 8018932:	bd90      	pop	{r4, r7, pc}
 8018934:	700ffc00 	.word	0x700ffc00

08018938 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8018938:	b580      	push	{r7, lr}
 801893a:	b086      	sub	sp, #24
 801893c:	af00      	add	r7, sp, #0
 801893e:	60f8      	str	r0, [r7, #12]
 8018940:	60b9      	str	r1, [r7, #8]
 8018942:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	2200      	movs	r2, #0
 8018948:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	2201      	movs	r2, #1
 801894e:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8018950:	2300      	movs	r3, #0
 8018952:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 8018954:	e024      	b.n	80189a0 <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 8018956:	68fb      	ldr	r3, [r7, #12]
 8018958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801895a:	6a1b      	ldr	r3, [r3, #32]
 801895c:	085b      	lsrs	r3, r3, #1
 801895e:	697a      	ldr	r2, [r7, #20]
 8018960:	429a      	cmp	r2, r3
 8018962:	d302      	bcc.n	801896a <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 8018964:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8018968:	e027      	b.n	80189ba <lfs_fs_pred+0x82>
        }
        cycle += 1;
 801896a:	697b      	ldr	r3, [r7, #20]
 801896c:	3301      	adds	r3, #1
 801896e:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	3318      	adds	r3, #24
 8018974:	68b9      	ldr	r1, [r7, #8]
 8018976:	4618      	mov	r0, r3
 8018978:	f7fa fbdc 	bl	8013134 <lfs_pair_cmp>
 801897c:	4603      	mov	r3, r0
 801897e:	2b00      	cmp	r3, #0
 8018980:	d101      	bne.n	8018986 <lfs_fs_pred+0x4e>
            return 0;
 8018982:	2300      	movs	r3, #0
 8018984:	e019      	b.n	80189ba <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	3318      	adds	r3, #24
 801898a:	461a      	mov	r2, r3
 801898c:	6879      	ldr	r1, [r7, #4]
 801898e:	68f8      	ldr	r0, [r7, #12]
 8018990:	f7fc f940 	bl	8014c14 <lfs_dir_fetch>
 8018994:	6138      	str	r0, [r7, #16]
        if (err) {
 8018996:	693b      	ldr	r3, [r7, #16]
 8018998:	2b00      	cmp	r3, #0
 801899a:	d001      	beq.n	80189a0 <lfs_fs_pred+0x68>
            return err;
 801899c:	693b      	ldr	r3, [r7, #16]
 801899e:	e00c      	b.n	80189ba <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	3318      	adds	r3, #24
 80189a4:	4618      	mov	r0, r3
 80189a6:	f7fa fbaa 	bl	80130fe <lfs_pair_isnull>
 80189aa:	4603      	mov	r3, r0
 80189ac:	f083 0301 	eor.w	r3, r3, #1
 80189b0:	b2db      	uxtb	r3, r3
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d1cf      	bne.n	8018956 <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 80189b6:	f06f 0301 	mvn.w	r3, #1
}
 80189ba:	4618      	mov	r0, r3
 80189bc:	3718      	adds	r7, #24
 80189be:	46bd      	mov	sp, r7
 80189c0:	bd80      	pop	{r7, pc}

080189c2 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 80189c2:	b5b0      	push	{r4, r5, r7, lr}
 80189c4:	b08e      	sub	sp, #56	; 0x38
 80189c6:	af04      	add	r7, sp, #16
 80189c8:	60f8      	str	r0, [r7, #12]
 80189ca:	60b9      	str	r1, [r7, #8]
 80189cc:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 80189ce:	68fb      	ldr	r3, [r7, #12]
 80189d0:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 80189d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189d4:	681b      	ldr	r3, [r3, #0]
 80189d6:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80189dc:	6a3b      	ldr	r3, [r7, #32]
 80189de:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 80189e2:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80189e4:	6a3b      	ldr	r3, [r7, #32]
 80189e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80189e8:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 80189ea:	69fb      	ldr	r3, [r7, #28]
 80189ec:	681b      	ldr	r3, [r3, #0]
 80189ee:	69fa      	ldr	r2, [r7, #28]
 80189f0:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 80189f2:	2108      	movs	r1, #8
 80189f4:	9103      	str	r1, [sp, #12]
 80189f6:	f107 0110 	add.w	r1, r7, #16
 80189fa:	9102      	str	r1, [sp, #8]
 80189fc:	9201      	str	r2, [sp, #4]
 80189fe:	9300      	str	r3, [sp, #0]
 8018a00:	462b      	mov	r3, r5
 8018a02:	4622      	mov	r2, r4
 8018a04:	4601      	mov	r1, r0
 8018a06:	6a38      	ldr	r0, [r7, #32]
 8018a08:	f7fa f840 	bl	8012a8c <lfs_bd_read>
 8018a0c:	61b8      	str	r0, [r7, #24]
    if (err) {
 8018a0e:	69bb      	ldr	r3, [r7, #24]
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d001      	beq.n	8018a18 <lfs_fs_parent_match+0x56>
        return err;
 8018a14:	69bb      	ldr	r3, [r7, #24]
 8018a16:	e012      	b.n	8018a3e <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8018a18:	f107 0310 	add.w	r3, r7, #16
 8018a1c:	4618      	mov	r0, r3
 8018a1e:	f7fa fbe0 	bl	80131e2 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8018a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a24:	1d1a      	adds	r2, r3, #4
 8018a26:	f107 0310 	add.w	r3, r7, #16
 8018a2a:	4611      	mov	r1, r2
 8018a2c:	4618      	mov	r0, r3
 8018a2e:	f7fa fb81 	bl	8013134 <lfs_pair_cmp>
 8018a32:	4603      	mov	r3, r0
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	bf14      	ite	ne
 8018a38:	2301      	movne	r3, #1
 8018a3a:	2300      	moveq	r3, #0
 8018a3c:	b2db      	uxtb	r3, r3
}
 8018a3e:	4618      	mov	r0, r3
 8018a40:	3728      	adds	r7, #40	; 0x28
 8018a42:	46bd      	mov	sp, r7
 8018a44:	bdb0      	pop	{r4, r5, r7, pc}
	...

08018a48 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8018a48:	b580      	push	{r7, lr}
 8018a4a:	b08e      	sub	sp, #56	; 0x38
 8018a4c:	af04      	add	r7, sp, #16
 8018a4e:	60f8      	str	r0, [r7, #12]
 8018a50:	60b9      	str	r1, [r7, #8]
 8018a52:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	2200      	movs	r2, #0
 8018a58:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	2201      	movs	r2, #1
 8018a5e:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8018a60:	2300      	movs	r3, #0
 8018a62:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 8018a64:	e030      	b.n	8018ac8 <lfs_fs_parent+0x80>
        if (cycle >= lfs->cfg->block_count/2) {
 8018a66:	68fb      	ldr	r3, [r7, #12]
 8018a68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018a6a:	6a1b      	ldr	r3, [r3, #32]
 8018a6c:	085b      	lsrs	r3, r3, #1
 8018a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018a70:	429a      	cmp	r2, r3
 8018a72:	d302      	bcc.n	8018a7a <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 8018a74:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8018a78:	e033      	b.n	8018ae2 <lfs_fs_parent+0x9a>
        }
        cycle += 1;
 8018a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a7c:	3301      	adds	r3, #1
 8018a7e:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8018a86:	68fb      	ldr	r3, [r7, #12]
 8018a88:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8018a8a:	68bb      	ldr	r3, [r7, #8]
 8018a8c:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8018a8e:	61bb      	str	r3, [r7, #24]
                    lfs, {pair[0], pair[1]}});
 8018a90:	68bb      	ldr	r3, [r7, #8]
 8018a92:	3304      	adds	r3, #4
 8018a94:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8018a96:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8018a98:	f107 0314 	add.w	r3, r7, #20
 8018a9c:	9303      	str	r3, [sp, #12]
 8018a9e:	4b13      	ldr	r3, [pc, #76]	; (8018aec <lfs_fs_parent+0xa4>)
 8018aa0:	9302      	str	r3, [sp, #8]
 8018aa2:	2300      	movs	r3, #0
 8018aa4:	9301      	str	r3, [sp, #4]
 8018aa6:	4b12      	ldr	r3, [pc, #72]	; (8018af0 <lfs_fs_parent+0xa8>)
 8018aa8:	9300      	str	r3, [sp, #0]
 8018aaa:	4b12      	ldr	r3, [pc, #72]	; (8018af4 <lfs_fs_parent+0xac>)
 8018aac:	6879      	ldr	r1, [r7, #4]
 8018aae:	68f8      	ldr	r0, [r7, #12]
 8018ab0:	f7fb fd42 	bl	8014538 <lfs_dir_fetchmatch>
 8018ab4:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 8018ab6:	6a3b      	ldr	r3, [r7, #32]
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	d005      	beq.n	8018ac8 <lfs_fs_parent+0x80>
 8018abc:	6a3b      	ldr	r3, [r7, #32]
 8018abe:	f113 0f02 	cmn.w	r3, #2
 8018ac2:	d001      	beq.n	8018ac8 <lfs_fs_parent+0x80>
            return tag;
 8018ac4:	6a3b      	ldr	r3, [r7, #32]
 8018ac6:	e00c      	b.n	8018ae2 <lfs_fs_parent+0x9a>
    while (!lfs_pair_isnull(parent->tail)) {
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	3318      	adds	r3, #24
 8018acc:	4618      	mov	r0, r3
 8018ace:	f7fa fb16 	bl	80130fe <lfs_pair_isnull>
 8018ad2:	4603      	mov	r3, r0
 8018ad4:	f083 0301 	eor.w	r3, r3, #1
 8018ad8:	b2db      	uxtb	r3, r3
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	d1c3      	bne.n	8018a66 <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 8018ade:	f06f 0301 	mvn.w	r3, #1
}
 8018ae2:	4618      	mov	r0, r3
 8018ae4:	3728      	adds	r7, #40	; 0x28
 8018ae6:	46bd      	mov	sp, r7
 8018ae8:	bd80      	pop	{r7, pc}
 8018aea:	bf00      	nop
 8018aec:	080189c3 	.word	0x080189c3
 8018af0:	20000008 	.word	0x20000008
 8018af4:	7ff003ff 	.word	0x7ff003ff

08018af8 <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8018af8:	b590      	push	{r4, r7, lr}
 8018afa:	b083      	sub	sp, #12
 8018afc:	af00      	add	r7, sp, #0
 8018afe:	6078      	str	r0, [r7, #4]
 8018b00:	460b      	mov	r3, r1
 8018b02:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b08:	4618      	mov	r0, r3
 8018b0a:	f7fa fc09 	bl	8013320 <lfs_tag_size>
 8018b0e:	4603      	mov	r3, r0
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	d10a      	bne.n	8018b2a <lfs_fs_preporphans+0x32>
 8018b14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	da06      	bge.n	8018b2a <lfs_fs_preporphans+0x32>
 8018b1c:	4b10      	ldr	r3, [pc, #64]	; (8018b60 <lfs_fs_preporphans+0x68>)
 8018b1e:	4a11      	ldr	r2, [pc, #68]	; (8018b64 <lfs_fs_preporphans+0x6c>)
 8018b20:	f241 114c 	movw	r1, #4428	; 0x114c
 8018b24:	4810      	ldr	r0, [pc, #64]	; (8018b68 <lfs_fs_preporphans+0x70>)
 8018b26:	f002 f853 	bl	801abd0 <__assert_func>
    lfs->gstate.tag += orphans;
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018b2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018b32:	441a      	add	r2, r3
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b3c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	3330      	adds	r3, #48	; 0x30
 8018b44:	4618      	mov	r0, r3
 8018b46:	f7fa fc4e 	bl	80133e6 <lfs_gstate_hasorphans>
 8018b4a:	4603      	mov	r3, r0
 8018b4c:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8018b4e:	ea44 0203 	orr.w	r2, r4, r3
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 8018b56:	2300      	movs	r3, #0
}
 8018b58:	4618      	mov	r0, r3
 8018b5a:	370c      	adds	r7, #12
 8018b5c:	46bd      	mov	sp, r7
 8018b5e:	bd90      	pop	{r4, r7, pc}
 8018b60:	080220d0 	.word	0x080220d0
 8018b64:	08022c6c 	.word	0x08022c6c
 8018b68:	08021974 	.word	0x08021974

08018b6c <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8018b6c:	b480      	push	{r7}
 8018b6e:	b085      	sub	sp, #20
 8018b70:	af00      	add	r7, sp, #0
 8018b72:	60f8      	str	r0, [r7, #12]
 8018b74:	460b      	mov	r3, r1
 8018b76:	607a      	str	r2, [r7, #4]
 8018b78:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8018b7a:	68fb      	ldr	r3, [r7, #12]
 8018b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b7e:	4a17      	ldr	r2, [pc, #92]	; (8018bdc <lfs_fs_prepmove+0x70>)
 8018b80:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8018b82:	897b      	ldrh	r3, [r7, #10]
 8018b84:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8018b88:	428b      	cmp	r3, r1
 8018b8a:	d006      	beq.n	8018b9a <lfs_fs_prepmove+0x2e>
 8018b8c:	897b      	ldrh	r3, [r7, #10]
 8018b8e:	029b      	lsls	r3, r3, #10
 8018b90:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8018b94:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8018b98:	e000      	b.n	8018b9c <lfs_fs_prepmove+0x30>
 8018b9a:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8018b9c:	431a      	orrs	r2, r3
 8018b9e:	68fb      	ldr	r3, [r7, #12]
 8018ba0:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8018ba2:	897b      	ldrh	r3, [r7, #10]
 8018ba4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8018ba8:	4293      	cmp	r3, r2
 8018baa:	d002      	beq.n	8018bb2 <lfs_fs_prepmove+0x46>
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	681b      	ldr	r3, [r3, #0]
 8018bb0:	e000      	b.n	8018bb4 <lfs_fs_prepmove+0x48>
 8018bb2:	2300      	movs	r3, #0
 8018bb4:	68fa      	ldr	r2, [r7, #12]
 8018bb6:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8018bb8:	897b      	ldrh	r3, [r7, #10]
 8018bba:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8018bbe:	4293      	cmp	r3, r2
 8018bc0:	d003      	beq.n	8018bca <lfs_fs_prepmove+0x5e>
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	3304      	adds	r3, #4
 8018bc6:	681b      	ldr	r3, [r3, #0]
 8018bc8:	e000      	b.n	8018bcc <lfs_fs_prepmove+0x60>
 8018bca:	2300      	movs	r3, #0
 8018bcc:	68fa      	ldr	r2, [r7, #12]
 8018bce:	6393      	str	r3, [r2, #56]	; 0x38
}
 8018bd0:	bf00      	nop
 8018bd2:	3714      	adds	r7, #20
 8018bd4:	46bd      	mov	sp, r7
 8018bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bda:	4770      	bx	lr
 8018bdc:	800003ff 	.word	0x800003ff

08018be0 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8018be0:	b5b0      	push	{r4, r5, r7, lr}
 8018be2:	b094      	sub	sp, #80	; 0x50
 8018be4:	af04      	add	r7, sp, #16
 8018be6:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	333c      	adds	r3, #60	; 0x3c
 8018bec:	4618      	mov	r0, r3
 8018bee:	f7fa fc1c 	bl	801342a <lfs_gstate_hasmove>
 8018bf2:	4603      	mov	r3, r0
 8018bf4:	f083 0301 	eor.w	r3, r3, #1
 8018bf8:	b2db      	uxtb	r3, r3
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d001      	beq.n	8018c02 <lfs_fs_demove+0x22>
        return 0;
 8018bfe:	2300      	movs	r3, #0
 8018c00:	e049      	b.n	8018c96 <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018c0e:	4618      	mov	r0, r3
 8018c10:	f7fa fb76 	bl	8013300 <lfs_tag_id>
 8018c14:	4603      	mov	r3, r0
 8018c16:	461a      	mov	r2, r3
 8018c18:	4b21      	ldr	r3, [pc, #132]	; (8018ca0 <lfs_fs_demove+0xc0>)
 8018c1a:	9302      	str	r3, [sp, #8]
 8018c1c:	9201      	str	r2, [sp, #4]
 8018c1e:	9400      	str	r4, [sp, #0]
 8018c20:	462b      	mov	r3, r5
 8018c22:	f241 1266 	movw	r2, #4454	; 0x1166
 8018c26:	491f      	ldr	r1, [pc, #124]	; (8018ca4 <lfs_fs_demove+0xc4>)
 8018c28:	481f      	ldr	r0, [pc, #124]	; (8018ca8 <lfs_fs_demove+0xc8>)
 8018c2a:	f003 f80b 	bl	801bc44 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8018c34:	f107 0318 	add.w	r3, r7, #24
 8018c38:	4619      	mov	r1, r3
 8018c3a:	6878      	ldr	r0, [r7, #4]
 8018c3c:	f7fb ffea 	bl	8014c14 <lfs_dir_fetch>
 8018c40:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 8018c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d001      	beq.n	8018c4c <lfs_fs_demove+0x6c>
        return err;
 8018c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c4a:	e024      	b.n	8018c96 <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018c50:	4618      	mov	r0, r3
 8018c52:	f7fa fb55 	bl	8013300 <lfs_tag_id>
 8018c56:	4603      	mov	r3, r0
 8018c58:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8018c5a:	2200      	movs	r2, #0
 8018c5c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8018c60:	6878      	ldr	r0, [r7, #4]
 8018c62:	f7ff ff83 	bl	8018b6c <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8018c66:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018c68:	029b      	lsls	r3, r3, #10
 8018c6a:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8018c6e:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8018c72:	613b      	str	r3, [r7, #16]
 8018c74:	2300      	movs	r3, #0
 8018c76:	617b      	str	r3, [r7, #20]
 8018c78:	f107 0210 	add.w	r2, r7, #16
 8018c7c:	f107 0118 	add.w	r1, r7, #24
 8018c80:	2301      	movs	r3, #1
 8018c82:	6878      	ldr	r0, [r7, #4]
 8018c84:	f7fd fda2 	bl	80167cc <lfs_dir_commit>
 8018c88:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8018c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	d001      	beq.n	8018c94 <lfs_fs_demove+0xb4>
        return err;
 8018c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c92:	e000      	b.n	8018c96 <lfs_fs_demove+0xb6>
    }

    return 0;
 8018c94:	2300      	movs	r3, #0
}
 8018c96:	4618      	mov	r0, r3
 8018c98:	3740      	adds	r7, #64	; 0x40
 8018c9a:	46bd      	mov	sp, r7
 8018c9c:	bdb0      	pop	{r4, r5, r7, pc}
 8018c9e:	bf00      	nop
 8018ca0:	08021a88 	.word	0x08021a88
 8018ca4:	08021974 	.word	0x08021974
 8018ca8:	08022104 	.word	0x08022104

08018cac <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8018cac:	b5b0      	push	{r4, r5, r7, lr}
 8018cae:	b0b2      	sub	sp, #200	; 0xc8
 8018cb0:	af04      	add	r7, sp, #16
 8018cb2:	6078      	str	r0, [r7, #4]
 8018cb4:	460b      	mov	r3, r1
 8018cb6:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	3330      	adds	r3, #48	; 0x30
 8018cbc:	4618      	mov	r0, r3
 8018cbe:	f7fa fb92 	bl	80133e6 <lfs_gstate_hasorphans>
 8018cc2:	4603      	mov	r3, r0
 8018cc4:	f083 0301 	eor.w	r3, r3, #1
 8018cc8:	b2db      	uxtb	r3, r3
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	d001      	beq.n	8018cd2 <lfs_fs_deorphan+0x26>
        return 0;
 8018cce:	2300      	movs	r3, #0
 8018cd0:	e17c      	b.n	8018fcc <lfs_fs_deorphan+0x320>
    }

    int8_t found = 0;
 8018cd2:	2300      	movs	r3, #0
 8018cd4:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
restart:
    {
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8018cd8:	f107 030c 	add.w	r3, r7, #12
 8018cdc:	2220      	movs	r2, #32
 8018cde:	2100      	movs	r1, #0
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	f003 f911 	bl	801bf08 <memset>
 8018ce6:	2301      	movs	r3, #1
 8018ce8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8018cec:	2301      	movs	r3, #1
 8018cee:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_mdir_t dir;

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 8018cf0:	e148      	b.n	8018f84 <lfs_fs_deorphan+0x2d8>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8018cf2:	f107 030c 	add.w	r3, r7, #12
 8018cf6:	f103 0218 	add.w	r2, r3, #24
 8018cfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018cfe:	4619      	mov	r1, r3
 8018d00:	6878      	ldr	r0, [r7, #4]
 8018d02:	f7fb ff87 	bl	8014c14 <lfs_dir_fetch>
 8018d06:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            if (err) {
 8018d0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018d0e:	2b00      	cmp	r3, #0
 8018d10:	d002      	beq.n	8018d18 <lfs_fs_deorphan+0x6c>
                return err;
 8018d12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018d16:	e159      	b.n	8018fcc <lfs_fs_deorphan+0x320>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 8018d18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018d1c:	f083 0301 	eor.w	r3, r3, #1
 8018d20:	b2db      	uxtb	r3, r3
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	f000 8124 	beq.w	8018f70 <lfs_fs_deorphan+0x2c4>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8018d28:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8018d2c:	f107 030c 	add.w	r3, r7, #12
 8018d30:	3318      	adds	r3, #24
 8018d32:	4619      	mov	r1, r3
 8018d34:	6878      	ldr	r0, [r7, #4]
 8018d36:	f7ff fe87 	bl	8018a48 <lfs_fs_parent>
 8018d3a:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 8018d3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	da07      	bge.n	8018d56 <lfs_fs_deorphan+0xaa>
 8018d46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018d4a:	f113 0f02 	cmn.w	r3, #2
 8018d4e:	d002      	beq.n	8018d56 <lfs_fs_deorphan+0xaa>
                    return tag;
 8018d50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018d54:	e13a      	b.n	8018fcc <lfs_fs_deorphan+0x320>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (tag == LFS_ERR_NOENT && powerloss) {
 8018d56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018d5a:	f113 0f02 	cmn.w	r3, #2
 8018d5e:	d157      	bne.n	8018e10 <lfs_fs_deorphan+0x164>
 8018d60:	78fb      	ldrb	r3, [r7, #3]
 8018d62:	2b00      	cmp	r3, #0
 8018d64:	d054      	beq.n	8018e10 <lfs_fs_deorphan+0x164>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8018d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d6a:	499a      	ldr	r1, [pc, #616]	; (8018fd4 <lfs_fs_deorphan+0x328>)
 8018d6c:	9101      	str	r1, [sp, #4]
 8018d6e:	9300      	str	r3, [sp, #0]
 8018d70:	4613      	mov	r3, r2
 8018d72:	f241 12a1 	movw	r2, #4513	; 0x11a1
 8018d76:	4998      	ldr	r1, [pc, #608]	; (8018fd8 <lfs_fs_deorphan+0x32c>)
 8018d78:	4898      	ldr	r0, [pc, #608]	; (8018fdc <lfs_fs_deorphan+0x330>)
 8018d7a:	f002 ff63 	bl	801bc44 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8018d84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018d88:	4619      	mov	r1, r3
 8018d8a:	6878      	ldr	r0, [r7, #4]
 8018d8c:	f7fb ff5e 	bl	8014c4c <lfs_dir_getgstate>
 8018d90:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                    if (err) {
 8018d94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d002      	beq.n	8018da2 <lfs_fs_deorphan+0xf6>
                        return err;
 8018d9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018da0:	e114      	b.n	8018fcc <lfs_fs_deorphan+0x320>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8018da2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018da6:	3318      	adds	r3, #24
 8018da8:	4618      	mov	r0, r3
 8018daa:	f7fa fa34 	bl	8013216 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8018dae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8018db2:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8018db6:	051a      	lsls	r2, r3, #20
 8018db8:	4b89      	ldr	r3, [pc, #548]	; (8018fe0 <lfs_fs_deorphan+0x334>)
 8018dba:	4313      	orrs	r3, r2
 8018dbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8018dc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018dc4:	3318      	adds	r3, #24
 8018dc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8018dca:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8018dce:	f107 010c 	add.w	r1, r7, #12
 8018dd2:	2301      	movs	r3, #1
 8018dd4:	6878      	ldr	r0, [r7, #4]
 8018dd6:	f7fd f9ff 	bl	80161d8 <lfs_dir_orphaningcommit>
 8018dda:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8018dde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018de2:	3318      	adds	r3, #24
 8018de4:	4618      	mov	r0, r3
 8018de6:	f7fa f9fc 	bl	80131e2 <lfs_pair_fromle32>
                    if (state < 0) {
 8018dea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	da02      	bge.n	8018df8 <lfs_fs_deorphan+0x14c>
                        return state;
 8018df2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                    return tag;
 8018df6:	e0e9      	b.n	8018fcc <lfs_fs_deorphan+0x320>
                    }

                    found += 1;
 8018df8:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8018dfc:	3301      	adds	r3, #1
 8018dfe:	b2db      	uxtb	r3, r3
 8018e00:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 8018e04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018e08:	2b03      	cmp	r3, #3
 8018e0a:	f040 80af 	bne.w	8018f6c <lfs_fs_deorphan+0x2c0>
                        goto restart;
 8018e0e:	e763      	b.n	8018cd8 <lfs_fs_deorphan+0x2c>

                    // refetch tail
                    continue;
                }

                if (tag != LFS_ERR_NOENT) {
 8018e10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018e14:	f113 0f02 	cmn.w	r3, #2
 8018e18:	f000 80aa 	beq.w	8018f70 <lfs_fs_deorphan+0x2c4>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8018e1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8018e20:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8018e24:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8018e28:	9300      	str	r3, [sp, #0]
 8018e2a:	4613      	mov	r3, r2
 8018e2c:	4a6d      	ldr	r2, [pc, #436]	; (8018fe4 <lfs_fs_deorphan+0x338>)
 8018e2e:	6878      	ldr	r0, [r7, #4]
 8018e30:	f7fa fe50 	bl	8013ad4 <lfs_dir_get>
 8018e34:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8018e38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	da02      	bge.n	8018e46 <lfs_fs_deorphan+0x19a>
                        return state;
 8018e40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018e44:	e0c2      	b.n	8018fcc <lfs_fs_deorphan+0x320>
                    }
                    lfs_pair_fromle32(pair);
 8018e46:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8018e4a:	4618      	mov	r0, r3
 8018e4c:	f7fa f9c9 	bl	80131e2 <lfs_pair_fromle32>

                    if (!lfs_pair_sync(pair, pdir.tail)) {
 8018e50:	f107 030c 	add.w	r3, r7, #12
 8018e54:	f103 0218 	add.w	r2, r3, #24
 8018e58:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8018e5c:	4611      	mov	r1, r2
 8018e5e:	4618      	mov	r0, r3
 8018e60:	f7fa f992 	bl	8013188 <lfs_pair_sync>
 8018e64:	4603      	mov	r3, r0
 8018e66:	f083 0301 	eor.w	r3, r3, #1
 8018e6a:	b2db      	uxtb	r3, r3
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d07f      	beq.n	8018f70 <lfs_fs_deorphan+0x2c4>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 8018e70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e74:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8018e78:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8018e7c:	4c55      	ldr	r4, [pc, #340]	; (8018fd4 <lfs_fs_deorphan+0x328>)
 8018e7e:	9403      	str	r4, [sp, #12]
 8018e80:	9102      	str	r1, [sp, #8]
 8018e82:	9201      	str	r2, [sp, #4]
 8018e84:	9300      	str	r3, [sp, #0]
 8018e86:	4603      	mov	r3, r0
 8018e88:	f241 12ca 	movw	r2, #4554	; 0x11ca
 8018e8c:	4952      	ldr	r1, [pc, #328]	; (8018fd8 <lfs_fs_deorphan+0x32c>)
 8018e8e:	4856      	ldr	r0, [pc, #344]	; (8018fe8 <lfs_fs_deorphan+0x33c>)
 8018e90:	f002 fed8 	bl	801bc44 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8018e94:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8018e98:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	3330      	adds	r3, #48	; 0x30
 8018ea0:	f107 020c 	add.w	r2, r7, #12
 8018ea4:	4611      	mov	r1, r2
 8018ea6:	4618      	mov	r0, r3
 8018ea8:	f7fa fad2 	bl	8013450 <lfs_gstate_hasmovehere>
 8018eac:	4603      	mov	r3, r0
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	d01c      	beq.n	8018eec <lfs_fs_deorphan+0x240>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018eb6:	4618      	mov	r0, r3
 8018eb8:	f7fa fa22 	bl	8013300 <lfs_tag_id>
 8018ebc:	4603      	mov	r3, r0
 8018ebe:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                            LFS_DEBUG("Fixing move while fixing orphans "
 8018ec2:	68f9      	ldr	r1, [r7, #12]
 8018ec4:	693b      	ldr	r3, [r7, #16]
 8018ec6:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 8018eca:	4842      	ldr	r0, [pc, #264]	; (8018fd4 <lfs_fs_deorphan+0x328>)
 8018ecc:	9002      	str	r0, [sp, #8]
 8018ece:	9201      	str	r2, [sp, #4]
 8018ed0:	9300      	str	r3, [sp, #0]
 8018ed2:	460b      	mov	r3, r1
 8018ed4:	f241 12d5 	movw	r2, #4565	; 0x11d5
 8018ed8:	493f      	ldr	r1, [pc, #252]	; (8018fd8 <lfs_fs_deorphan+0x32c>)
 8018eda:	4844      	ldr	r0, [pc, #272]	; (8018fec <lfs_fs_deorphan+0x340>)
 8018edc:	f002 feb2 	bl	801bc44 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8018ee0:	2200      	movs	r2, #0
 8018ee2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8018ee6:	6878      	ldr	r0, [r7, #4]
 8018ee8:	f7ff fe40 	bl	8018b6c <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8018eec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8018ef0:	4618      	mov	r0, r3
 8018ef2:	f7fa f990 	bl	8013216 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8018ef6:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8018efa:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8018efe:	4293      	cmp	r3, r2
 8018f00:	d007      	beq.n	8018f12 <lfs_fs_deorphan+0x266>
 8018f02:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8018f06:	029b      	lsls	r3, r3, #10
 8018f08:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8018f0c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8018f10:	e000      	b.n	8018f14 <lfs_fs_deorphan+0x268>
 8018f12:	2300      	movs	r3, #0
 8018f14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8018f16:	2300      	movs	r3, #0
 8018f18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8018f1c:	4b34      	ldr	r3, [pc, #208]	; (8018ff0 <lfs_fs_deorphan+0x344>)
 8018f1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8018f22:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8018f26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8018f2a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8018f2e:	f107 010c 	add.w	r1, r7, #12
 8018f32:	2302      	movs	r3, #2
 8018f34:	6878      	ldr	r0, [r7, #4]
 8018f36:	f7fd f94f 	bl	80161d8 <lfs_dir_orphaningcommit>
 8018f3a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8018f3e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8018f42:	4618      	mov	r0, r3
 8018f44:	f7fa f94d 	bl	80131e2 <lfs_pair_fromle32>
                        if (state < 0) {
 8018f48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	da02      	bge.n	8018f56 <lfs_fs_deorphan+0x2aa>
                            return state;
 8018f50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 8018f54:	e03a      	b.n	8018fcc <lfs_fs_deorphan+0x320>
                        }

                        found += 1;
 8018f56:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8018f5a:	3301      	adds	r3, #1
 8018f5c:	b2db      	uxtb	r3, r3
 8018f5e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 8018f62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018f66:	2b03      	cmp	r3, #3
 8018f68:	d10c      	bne.n	8018f84 <lfs_fs_deorphan+0x2d8>
 8018f6a:	e6b5      	b.n	8018cd8 <lfs_fs_deorphan+0x2c>
                    continue;
 8018f6c:	bf00      	nop
 8018f6e:	e009      	b.n	8018f84 <lfs_fs_deorphan+0x2d8>
                        continue;
                    }
                }
            }

            pdir = dir;
 8018f70:	f107 040c 	add.w	r4, r7, #12
 8018f74:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8018f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018f7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8018f80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 8018f84:	f107 030c 	add.w	r3, r7, #12
 8018f88:	3318      	adds	r3, #24
 8018f8a:	4618      	mov	r0, r3
 8018f8c:	f7fa f8b7 	bl	80130fe <lfs_pair_isnull>
 8018f90:	4603      	mov	r3, r0
 8018f92:	f083 0301 	eor.w	r3, r3, #1
 8018f96:	b2db      	uxtb	r3, r3
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	f47f aeaa 	bne.w	8018cf2 <lfs_fs_deorphan+0x46>
        }
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_min(
            lfs_gstate_getorphans(&lfs->gstate),
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	3330      	adds	r3, #48	; 0x30
 8018fa2:	4618      	mov	r0, r3
 8018fa4:	f7fa fa32 	bl	801340c <lfs_gstate_getorphans>
 8018fa8:	4603      	mov	r3, r0
    return lfs_fs_preporphans(lfs, -lfs_min(
 8018faa:	461a      	mov	r2, r3
 8018fac:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 8018fb0:	4619      	mov	r1, r3
 8018fb2:	4610      	mov	r0, r2
 8018fb4:	f7f9 fc8e 	bl	80128d4 <lfs_min>
 8018fb8:	4603      	mov	r3, r0
 8018fba:	b2db      	uxtb	r3, r3
 8018fbc:	425b      	negs	r3, r3
 8018fbe:	b2db      	uxtb	r3, r3
 8018fc0:	b25b      	sxtb	r3, r3
 8018fc2:	4619      	mov	r1, r3
 8018fc4:	6878      	ldr	r0, [r7, #4]
 8018fc6:	f7ff fd97 	bl	8018af8 <lfs_fs_preporphans>
 8018fca:	4603      	mov	r3, r0
            found));
}
 8018fcc:	4618      	mov	r0, r3
 8018fce:	37b8      	adds	r7, #184	; 0xb8
 8018fd0:	46bd      	mov	sp, r7
 8018fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8018fd4:	08021a88 	.word	0x08021a88
 8018fd8:	08021974 	.word	0x08021974
 8018fdc:	08022138 	.word	0x08022138
 8018fe0:	000ffc08 	.word	0x000ffc08
 8018fe4:	7ffffc00 	.word	0x7ffffc00
 8018fe8:	08022168 	.word	0x08022168
 8018fec:	080221ac 	.word	0x080221ac
 8018ff0:	600ffc08 	.word	0x600ffc08

08018ff4 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8018ff4:	b580      	push	{r7, lr}
 8018ff6:	b084      	sub	sp, #16
 8018ff8:	af00      	add	r7, sp, #0
 8018ffa:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 8018ffc:	6878      	ldr	r0, [r7, #4]
 8018ffe:	f7ff fdef 	bl	8018be0 <lfs_fs_demove>
 8019002:	60f8      	str	r0, [r7, #12]
    if (err) {
 8019004:	68fb      	ldr	r3, [r7, #12]
 8019006:	2b00      	cmp	r3, #0
 8019008:	d001      	beq.n	801900e <lfs_fs_forceconsistency+0x1a>
        return err;
 801900a:	68fb      	ldr	r3, [r7, #12]
 801900c:	e00a      	b.n	8019024 <lfs_fs_forceconsistency+0x30>
    }

    err = lfs_fs_deorphan(lfs, true);
 801900e:	2101      	movs	r1, #1
 8019010:	6878      	ldr	r0, [r7, #4]
 8019012:	f7ff fe4b 	bl	8018cac <lfs_fs_deorphan>
 8019016:	60f8      	str	r0, [r7, #12]
    if (err) {
 8019018:	68fb      	ldr	r3, [r7, #12]
 801901a:	2b00      	cmp	r3, #0
 801901c:	d001      	beq.n	8019022 <lfs_fs_forceconsistency+0x2e>
        return err;
 801901e:	68fb      	ldr	r3, [r7, #12]
 8019020:	e000      	b.n	8019024 <lfs_fs_forceconsistency+0x30>
    }

    return 0;
 8019022:	2300      	movs	r3, #0
}
 8019024:	4618      	mov	r0, r3
 8019026:	3710      	adds	r7, #16
 8019028:	46bd      	mov	sp, r7
 801902a:	bd80      	pop	{r7, pc}

0801902c <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 801902c:	b480      	push	{r7}
 801902e:	b085      	sub	sp, #20
 8019030:	af00      	add	r7, sp, #0
 8019032:	6078      	str	r0, [r7, #4]
 8019034:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	60fb      	str	r3, [r7, #12]
    *size += 1;
 801903a:	68fb      	ldr	r3, [r7, #12]
 801903c:	681b      	ldr	r3, [r3, #0]
 801903e:	1c5a      	adds	r2, r3, #1
 8019040:	68fb      	ldr	r3, [r7, #12]
 8019042:	601a      	str	r2, [r3, #0]
    return 0;
 8019044:	2300      	movs	r3, #0
}
 8019046:	4618      	mov	r0, r3
 8019048:	3714      	adds	r7, #20
 801904a:	46bd      	mov	sp, r7
 801904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019050:	4770      	bx	lr
	...

08019054 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 8019054:	b580      	push	{r7, lr}
 8019056:	b084      	sub	sp, #16
 8019058:	af00      	add	r7, sp, #0
 801905a:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 801905c:	2300      	movs	r3, #0
 801905e:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 8019060:	f107 0208 	add.w	r2, r7, #8
 8019064:	2300      	movs	r3, #0
 8019066:	4907      	ldr	r1, [pc, #28]	; (8019084 <lfs_fs_rawsize+0x30>)
 8019068:	6878      	ldr	r0, [r7, #4]
 801906a:	f7ff fb3f 	bl	80186ec <lfs_fs_rawtraverse>
 801906e:	60f8      	str	r0, [r7, #12]
    if (err) {
 8019070:	68fb      	ldr	r3, [r7, #12]
 8019072:	2b00      	cmp	r3, #0
 8019074:	d001      	beq.n	801907a <lfs_fs_rawsize+0x26>
        return err;
 8019076:	68fb      	ldr	r3, [r7, #12]
 8019078:	e000      	b.n	801907c <lfs_fs_rawsize+0x28>
    }

    return size;
 801907a:	68bb      	ldr	r3, [r7, #8]
}
 801907c:	4618      	mov	r0, r3
 801907e:	3710      	adds	r7, #16
 8019080:	46bd      	mov	sp, r7
 8019082:	bd80      	pop	{r7, pc}
 8019084:	0801902d 	.word	0x0801902d

08019088 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8019088:	b580      	push	{r7, lr}
 801908a:	b084      	sub	sp, #16
 801908c:	af00      	add	r7, sp, #0
 801908e:	6078      	str	r0, [r7, #4]
 8019090:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8019092:	2300      	movs	r3, #0
 8019094:	60fb      	str	r3, [r7, #12]
    if (err) {
 8019096:	68fb      	ldr	r3, [r7, #12]
 8019098:	2b00      	cmp	r3, #0
 801909a:	d001      	beq.n	80190a0 <lfs_format+0x18>
        return err;
 801909c:	68fb      	ldr	r3, [r7, #12]
 801909e:	e005      	b.n	80190ac <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 80190a0:	6839      	ldr	r1, [r7, #0]
 80190a2:	6878      	ldr	r0, [r7, #4]
 80190a4:	f7ff f8ca 	bl	801823c <lfs_rawformat>
 80190a8:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 80190aa:	68fb      	ldr	r3, [r7, #12]
}
 80190ac:	4618      	mov	r0, r3
 80190ae:	3710      	adds	r7, #16
 80190b0:	46bd      	mov	sp, r7
 80190b2:	bd80      	pop	{r7, pc}

080190b4 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 80190b4:	b580      	push	{r7, lr}
 80190b6:	b084      	sub	sp, #16
 80190b8:	af00      	add	r7, sp, #0
 80190ba:	6078      	str	r0, [r7, #4]
 80190bc:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 80190be:	2300      	movs	r3, #0
 80190c0:	60fb      	str	r3, [r7, #12]
    if (err) {
 80190c2:	68fb      	ldr	r3, [r7, #12]
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	d001      	beq.n	80190cc <lfs_mount+0x18>
        return err;
 80190c8:	68fb      	ldr	r3, [r7, #12]
 80190ca:	e005      	b.n	80190d8 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 80190cc:	6839      	ldr	r1, [r7, #0]
 80190ce:	6878      	ldr	r0, [r7, #4]
 80190d0:	f7ff f954 	bl	801837c <lfs_rawmount>
 80190d4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 80190d6:	68fb      	ldr	r3, [r7, #12]
}
 80190d8:	4618      	mov	r0, r3
 80190da:	3710      	adds	r7, #16
 80190dc:	46bd      	mov	sp, r7
 80190de:	bd80      	pop	{r7, pc}

080190e0 <lfs_stat>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 80190e0:	b580      	push	{r7, lr}
 80190e2:	b086      	sub	sp, #24
 80190e4:	af00      	add	r7, sp, #0
 80190e6:	60f8      	str	r0, [r7, #12]
 80190e8:	60b9      	str	r1, [r7, #8]
 80190ea:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 80190ec:	2300      	movs	r3, #0
 80190ee:	617b      	str	r3, [r7, #20]
    if (err) {
 80190f0:	697b      	ldr	r3, [r7, #20]
 80190f2:	2b00      	cmp	r3, #0
 80190f4:	d001      	beq.n	80190fa <lfs_stat+0x1a>
        return err;
 80190f6:	697b      	ldr	r3, [r7, #20]
 80190f8:	e006      	b.n	8019108 <lfs_stat+0x28>
    }
    LFS_TRACE("lfs_stat(%p, \"%s\", %p)", (void*)lfs, path, (void*)info);

    err = lfs_rawstat(lfs, path, info);
 80190fa:	687a      	ldr	r2, [r7, #4]
 80190fc:	68b9      	ldr	r1, [r7, #8]
 80190fe:	68f8      	ldr	r0, [r7, #12]
 8019100:	f7fe fe94 	bl	8017e2c <lfs_rawstat>
 8019104:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8019106:	697b      	ldr	r3, [r7, #20]
}
 8019108:	4618      	mov	r0, r3
 801910a:	3718      	adds	r7, #24
 801910c:	46bd      	mov	sp, r7
 801910e:	bd80      	pop	{r7, pc}

08019110 <lfs_file_opencfg>:
}
#endif

int lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8019110:	b580      	push	{r7, lr}
 8019112:	b088      	sub	sp, #32
 8019114:	af02      	add	r7, sp, #8
 8019116:	60f8      	str	r0, [r7, #12]
 8019118:	60b9      	str	r1, [r7, #8]
 801911a:	607a      	str	r2, [r7, #4]
 801911c:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 801911e:	2300      	movs	r3, #0
 8019120:	617b      	str	r3, [r7, #20]
    if (err) {
 8019122:	697b      	ldr	r3, [r7, #20]
 8019124:	2b00      	cmp	r3, #0
 8019126:	d001      	beq.n	801912c <lfs_file_opencfg+0x1c>
        return err;
 8019128:	697b      	ldr	r3, [r7, #20]
 801912a:	e01c      	b.n	8019166 <lfs_file_opencfg+0x56>
    }
    LFS_TRACE("lfs_file_opencfg(%p, %p, \"%s\", %x, %p {"
                 ".buffer=%p, .attrs=%p, .attr_count=%"PRIu32"})",
            (void*)lfs, (void*)file, path, flags,
            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801912c:	68fb      	ldr	r3, [r7, #12]
 801912e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019130:	68b9      	ldr	r1, [r7, #8]
 8019132:	4618      	mov	r0, r3
 8019134:	f7fa fa8c 	bl	8013650 <lfs_mlist_isopen>
 8019138:	4603      	mov	r3, r0
 801913a:	f083 0301 	eor.w	r3, r3, #1
 801913e:	b2db      	uxtb	r3, r3
 8019140:	2b00      	cmp	r3, #0
 8019142:	d106      	bne.n	8019152 <lfs_file_opencfg+0x42>
 8019144:	4b0a      	ldr	r3, [pc, #40]	; (8019170 <lfs_file_opencfg+0x60>)
 8019146:	4a0b      	ldr	r2, [pc, #44]	; (8019174 <lfs_file_opencfg+0x64>)
 8019148:	f241 517b 	movw	r1, #5499	; 0x157b
 801914c:	480a      	ldr	r0, [pc, #40]	; (8019178 <lfs_file_opencfg+0x68>)
 801914e:	f001 fd3f 	bl	801abd0 <__assert_func>

    err = lfs_file_rawopencfg(lfs, file, path, flags, cfg);
 8019152:	6a3b      	ldr	r3, [r7, #32]
 8019154:	9300      	str	r3, [sp, #0]
 8019156:	683b      	ldr	r3, [r7, #0]
 8019158:	687a      	ldr	r2, [r7, #4]
 801915a:	68b9      	ldr	r1, [r7, #8]
 801915c:	68f8      	ldr	r0, [r7, #12]
 801915e:	f7fd fec3 	bl	8016ee8 <lfs_file_rawopencfg>
 8019162:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8019164:	697b      	ldr	r3, [r7, #20]
}
 8019166:	4618      	mov	r0, r3
 8019168:	3718      	adds	r7, #24
 801916a:	46bd      	mov	sp, r7
 801916c:	bd80      	pop	{r7, pc}
 801916e:	bf00      	nop
 8019170:	080221f4 	.word	0x080221f4
 8019174:	08022c80 	.word	0x08022c80
 8019178:	08021974 	.word	0x08021974

0801917c <lfs_file_close>:

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 801917c:	b580      	push	{r7, lr}
 801917e:	b084      	sub	sp, #16
 8019180:	af00      	add	r7, sp, #0
 8019182:	6078      	str	r0, [r7, #4]
 8019184:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8019186:	2300      	movs	r3, #0
 8019188:	60fb      	str	r3, [r7, #12]
    if (err) {
 801918a:	68fb      	ldr	r3, [r7, #12]
 801918c:	2b00      	cmp	r3, #0
 801918e:	d001      	beq.n	8019194 <lfs_file_close+0x18>
        return err;
 8019190:	68fb      	ldr	r3, [r7, #12]
 8019192:	e015      	b.n	80191c0 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019198:	6839      	ldr	r1, [r7, #0]
 801919a:	4618      	mov	r0, r3
 801919c:	f7fa fa58 	bl	8013650 <lfs_mlist_isopen>
 80191a0:	4603      	mov	r3, r0
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d106      	bne.n	80191b4 <lfs_file_close+0x38>
 80191a6:	4b08      	ldr	r3, [pc, #32]	; (80191c8 <lfs_file_close+0x4c>)
 80191a8:	4a08      	ldr	r2, [pc, #32]	; (80191cc <lfs_file_close+0x50>)
 80191aa:	f241 518a 	movw	r1, #5514	; 0x158a
 80191ae:	4808      	ldr	r0, [pc, #32]	; (80191d0 <lfs_file_close+0x54>)
 80191b0:	f001 fd0e 	bl	801abd0 <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 80191b4:	6839      	ldr	r1, [r7, #0]
 80191b6:	6878      	ldr	r0, [r7, #4]
 80191b8:	f7fe f866 	bl	8017288 <lfs_file_rawclose>
 80191bc:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80191be:	68fb      	ldr	r3, [r7, #12]
}
 80191c0:	4618      	mov	r0, r3
 80191c2:	3710      	adds	r7, #16
 80191c4:	46bd      	mov	sp, r7
 80191c6:	bd80      	pop	{r7, pc}
 80191c8:	0802222c 	.word	0x0802222c
 80191cc:	08022c94 	.word	0x08022c94
 80191d0:	08021974 	.word	0x08021974

080191d4 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80191d4:	b580      	push	{r7, lr}
 80191d6:	b086      	sub	sp, #24
 80191d8:	af00      	add	r7, sp, #0
 80191da:	60f8      	str	r0, [r7, #12]
 80191dc:	60b9      	str	r1, [r7, #8]
 80191de:	607a      	str	r2, [r7, #4]
 80191e0:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80191e2:	2300      	movs	r3, #0
 80191e4:	617b      	str	r3, [r7, #20]
    if (err) {
 80191e6:	697b      	ldr	r3, [r7, #20]
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	d001      	beq.n	80191f0 <lfs_file_read+0x1c>
        return err;
 80191ec:	697b      	ldr	r3, [r7, #20]
 80191ee:	e017      	b.n	8019220 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80191f0:	68fb      	ldr	r3, [r7, #12]
 80191f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191f4:	68b9      	ldr	r1, [r7, #8]
 80191f6:	4618      	mov	r0, r3
 80191f8:	f7fa fa2a 	bl	8013650 <lfs_mlist_isopen>
 80191fc:	4603      	mov	r3, r0
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d106      	bne.n	8019210 <lfs_file_read+0x3c>
 8019202:	4b09      	ldr	r3, [pc, #36]	; (8019228 <lfs_file_read+0x54>)
 8019204:	4a09      	ldr	r2, [pc, #36]	; (801922c <lfs_file_read+0x58>)
 8019206:	f241 51ac 	movw	r1, #5548	; 0x15ac
 801920a:	4809      	ldr	r0, [pc, #36]	; (8019230 <lfs_file_read+0x5c>)
 801920c:	f001 fce0 	bl	801abd0 <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 8019210:	683b      	ldr	r3, [r7, #0]
 8019212:	687a      	ldr	r2, [r7, #4]
 8019214:	68b9      	ldr	r1, [r7, #8]
 8019216:	68f8      	ldr	r0, [r7, #12]
 8019218:	f7fe fb82 	bl	8017920 <lfs_file_rawread>
 801921c:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 801921e:	693b      	ldr	r3, [r7, #16]
}
 8019220:	4618      	mov	r0, r3
 8019222:	3718      	adds	r7, #24
 8019224:	46bd      	mov	sp, r7
 8019226:	bd80      	pop	{r7, pc}
 8019228:	0802222c 	.word	0x0802222c
 801922c:	08022ca4 	.word	0x08022ca4
 8019230:	08021974 	.word	0x08021974

08019234 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8019234:	b580      	push	{r7, lr}
 8019236:	b086      	sub	sp, #24
 8019238:	af00      	add	r7, sp, #0
 801923a:	60f8      	str	r0, [r7, #12]
 801923c:	60b9      	str	r1, [r7, #8]
 801923e:	607a      	str	r2, [r7, #4]
 8019240:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8019242:	2300      	movs	r3, #0
 8019244:	617b      	str	r3, [r7, #20]
    if (err) {
 8019246:	697b      	ldr	r3, [r7, #20]
 8019248:	2b00      	cmp	r3, #0
 801924a:	d001      	beq.n	8019250 <lfs_file_write+0x1c>
        return err;
 801924c:	697b      	ldr	r3, [r7, #20]
 801924e:	e017      	b.n	8019280 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8019250:	68fb      	ldr	r3, [r7, #12]
 8019252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019254:	68b9      	ldr	r1, [r7, #8]
 8019256:	4618      	mov	r0, r3
 8019258:	f7fa f9fa 	bl	8013650 <lfs_mlist_isopen>
 801925c:	4603      	mov	r3, r0
 801925e:	2b00      	cmp	r3, #0
 8019260:	d106      	bne.n	8019270 <lfs_file_write+0x3c>
 8019262:	4b09      	ldr	r3, [pc, #36]	; (8019288 <lfs_file_write+0x54>)
 8019264:	4a09      	ldr	r2, [pc, #36]	; (801928c <lfs_file_write+0x58>)
 8019266:	f241 51be 	movw	r1, #5566	; 0x15be
 801926a:	4809      	ldr	r0, [pc, #36]	; (8019290 <lfs_file_write+0x5c>)
 801926c:	f001 fcb0 	bl	801abd0 <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 8019270:	683b      	ldr	r3, [r7, #0]
 8019272:	687a      	ldr	r2, [r7, #4]
 8019274:	68b9      	ldr	r1, [r7, #8]
 8019276:	68f8      	ldr	r0, [r7, #12]
 8019278:	f7fe fcb0 	bl	8017bdc <lfs_file_rawwrite>
 801927c:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 801927e:	693b      	ldr	r3, [r7, #16]
}
 8019280:	4618      	mov	r0, r3
 8019282:	3718      	adds	r7, #24
 8019284:	46bd      	mov	sp, r7
 8019286:	bd80      	pop	{r7, pc}
 8019288:	0802222c 	.word	0x0802222c
 801928c:	08022cb4 	.word	0x08022cb4
 8019290:	08021974 	.word	0x08021974

08019294 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8019294:	b580      	push	{r7, lr}
 8019296:	b086      	sub	sp, #24
 8019298:	af00      	add	r7, sp, #0
 801929a:	60f8      	str	r0, [r7, #12]
 801929c:	60b9      	str	r1, [r7, #8]
 801929e:	607a      	str	r2, [r7, #4]
 80192a0:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80192a2:	2300      	movs	r3, #0
 80192a4:	617b      	str	r3, [r7, #20]
    if (err) {
 80192a6:	697b      	ldr	r3, [r7, #20]
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d001      	beq.n	80192b0 <lfs_file_seek+0x1c>
        return err;
 80192ac:	697b      	ldr	r3, [r7, #20]
 80192ae:	e017      	b.n	80192e0 <lfs_file_seek+0x4c>
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80192b0:	68fb      	ldr	r3, [r7, #12]
 80192b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80192b4:	68b9      	ldr	r1, [r7, #8]
 80192b6:	4618      	mov	r0, r3
 80192b8:	f7fa f9ca 	bl	8013650 <lfs_mlist_isopen>
 80192bc:	4603      	mov	r3, r0
 80192be:	2b00      	cmp	r3, #0
 80192c0:	d106      	bne.n	80192d0 <lfs_file_seek+0x3c>
 80192c2:	4b09      	ldr	r3, [pc, #36]	; (80192e8 <lfs_file_seek+0x54>)
 80192c4:	4a09      	ldr	r2, [pc, #36]	; (80192ec <lfs_file_seek+0x58>)
 80192c6:	f241 51d0 	movw	r1, #5584	; 0x15d0
 80192ca:	4809      	ldr	r0, [pc, #36]	; (80192f0 <lfs_file_seek+0x5c>)
 80192cc:	f001 fc80 	bl	801abd0 <__assert_func>

    lfs_soff_t res = lfs_file_rawseek(lfs, file, off, whence);
 80192d0:	683b      	ldr	r3, [r7, #0]
 80192d2:	687a      	ldr	r2, [r7, #4]
 80192d4:	68b9      	ldr	r1, [r7, #8]
 80192d6:	68f8      	ldr	r0, [r7, #12]
 80192d8:	f7fe fd04 	bl	8017ce4 <lfs_file_rawseek>
 80192dc:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 80192de:	693b      	ldr	r3, [r7, #16]
}
 80192e0:	4618      	mov	r0, r3
 80192e2:	3718      	adds	r7, #24
 80192e4:	46bd      	mov	sp, r7
 80192e6:	bd80      	pop	{r7, pc}
 80192e8:	0802222c 	.word	0x0802222c
 80192ec:	08022cc4 	.word	0x08022cc4
 80192f0:	08021974 	.word	0x08021974

080192f4 <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 80192f4:	b580      	push	{r7, lr}
 80192f6:	b084      	sub	sp, #16
 80192f8:	af00      	add	r7, sp, #0
 80192fa:	6078      	str	r0, [r7, #4]
 80192fc:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80192fe:	2300      	movs	r3, #0
 8019300:	60fb      	str	r3, [r7, #12]
    if (err) {
 8019302:	68fb      	ldr	r3, [r7, #12]
 8019304:	2b00      	cmp	r3, #0
 8019306:	d001      	beq.n	801930c <lfs_mkdir+0x18>
        return err;
 8019308:	68fb      	ldr	r3, [r7, #12]
 801930a:	e005      	b.n	8019318 <lfs_mkdir+0x24>
    }
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawmkdir(lfs, path);
 801930c:	6839      	ldr	r1, [r7, #0]
 801930e:	6878      	ldr	r0, [r7, #4]
 8019310:	f7fd fa82 	bl	8016818 <lfs_rawmkdir>
 8019314:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8019316:	68fb      	ldr	r3, [r7, #12]
}
 8019318:	4618      	mov	r0, r3
 801931a:	3710      	adds	r7, #16
 801931c:	46bd      	mov	sp, r7
 801931e:	bd80      	pop	{r7, pc}

08019320 <io_fs_init>:
}

#endif

int io_fs_init(uint8_t * lfsReadBuff, uint8_t * lfsWriteBuff, uint8_t * lfslookaheadBuff, uint16_t buffers_size, struct lfs_config *cfg)
{
 8019320:	b580      	push	{r7, lr}
 8019322:	b088      	sub	sp, #32
 8019324:	af00      	add	r7, sp, #0
 8019326:	60f8      	str	r0, [r7, #12]
 8019328:	60b9      	str	r1, [r7, #8]
 801932a:	607a      	str	r2, [r7, #4]
 801932c:	807b      	strh	r3, [r7, #2]
	struct SPI_flash_info  flash_info;

	flash_info = sFLASH_GetInfo();
 801932e:	f107 0310 	add.w	r3, r7, #16
 8019332:	4618      	mov	r0, r3
 8019334:	f7eb f876 	bl	8004424 <sFLASH_GetInfo>

    cfg->read_size   = flash_info.read_size;
 8019338:	8abb      	ldrh	r3, [r7, #20]
 801933a:	461a      	mov	r2, r3
 801933c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801933e:	615a      	str	r2, [r3, #20]
    cfg->prog_size   = flash_info.write_size;
 8019340:	8afb      	ldrh	r3, [r7, #22]
 8019342:	461a      	mov	r2, r3
 8019344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019346:	619a      	str	r2, [r3, #24]

    cfg->block_size  = flash_info.erase_size;
 8019348:	8b3b      	ldrh	r3, [r7, #24]
 801934a:	461a      	mov	r2, r3
 801934c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801934e:	61da      	str	r2, [r3, #28]
    cfg->block_count = flash_info.block_count;
 8019350:	8bbb      	ldrh	r3, [r7, #28]
 8019352:	461a      	mov	r2, r3
 8019354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019356:	621a      	str	r2, [r3, #32]

    cfg->lookahead_size = buffers_size;
 8019358:	887a      	ldrh	r2, [r7, #2]
 801935a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801935c:	62da      	str	r2, [r3, #44]	; 0x2c
    cfg->cache_size     = buffers_size;
 801935e:	887a      	ldrh	r2, [r7, #2]
 8019360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019362:	629a      	str	r2, [r3, #40]	; 0x28
    cfg->read_buffer = lfsReadBuff;
 8019364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019366:	68fa      	ldr	r2, [r7, #12]
 8019368:	631a      	str	r2, [r3, #48]	; 0x30
    cfg->prog_buffer = lfsWriteBuff;
 801936a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801936c:	68ba      	ldr	r2, [r7, #8]
 801936e:	635a      	str	r2, [r3, #52]	; 0x34
 //   cfg.file_buffer = lfsReadBuff;
    cfg->lookahead_buffer = lfslookaheadBuff;
 8019370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019372:	687a      	ldr	r2, [r7, #4]
 8019374:	639a      	str	r2, [r3, #56]	; 0x38

    cfg->read   = block_device_read;
 8019376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019378:	4a11      	ldr	r2, [pc, #68]	; (80193c0 <io_fs_init+0xa0>)
 801937a:	605a      	str	r2, [r3, #4]
    cfg->prog   = block_device_prog;
 801937c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801937e:	4a11      	ldr	r2, [pc, #68]	; (80193c4 <io_fs_init+0xa4>)
 8019380:	609a      	str	r2, [r3, #8]
    cfg->erase  = block_device_erase;
 8019382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019384:	4a10      	ldr	r2, [pc, #64]	; (80193c8 <io_fs_init+0xa8>)
 8019386:	60da      	str	r2, [r3, #12]
    cfg->sync   = block_device_sync;
 8019388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801938a:	4a10      	ldr	r2, [pc, #64]	; (80193cc <io_fs_init+0xac>)
 801938c:	611a      	str	r2, [r3, #16]
#ifdef LFS_THREADSAFE
	cfg.lock 	= lfs_lock;
	cfg.unlock	= lfs_unlock;
#endif

    cfg->block_cycles 	= FLASH_BLOCK_CYCLES;
 801938e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019390:	f242 7210 	movw	r2, #10000	; 0x2710
 8019394:	625a      	str	r2, [r3, #36]	; 0x24
    cfg->name_max  		= LFS_NAME_MAX;
 8019396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019398:	22ff      	movs	r2, #255	; 0xff
 801939a:	63da      	str	r2, [r3, #60]	; 0x3c
    cfg->file_max		= LFS_FILE_MAX;
 801939c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801939e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80193a2:	641a      	str	r2, [r3, #64]	; 0x40
    cfg->attr_max		= LFS_ATTR_MAX;
 80193a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193a6:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80193aa:	645a      	str	r2, [r3, #68]	; 0x44
    cfg->metadata_max	= flash_info.erase_size;
 80193ac:	8b3b      	ldrh	r3, [r7, #24]
 80193ae:	461a      	mov	r2, r3
 80193b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193b2:	649a      	str	r2, [r3, #72]	; 0x48

    return 0;
 80193b4:	2300      	movs	r3, #0
}
 80193b6:	4618      	mov	r0, r3
 80193b8:	3720      	adds	r7, #32
 80193ba:	46bd      	mov	sp, r7
 80193bc:	bd80      	pop	{r7, pc}
 80193be:	bf00      	nop
 80193c0:	080193d1 	.word	0x080193d1
 80193c4:	0801946d 	.word	0x0801946d
 80193c8:	08019425 	.word	0x08019425
 80193cc:	080194c1 	.word	0x080194c1

080193d0 <block_device_read>:

int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 80193d0:	b580      	push	{r7, lr}
 80193d2:	b084      	sub	sp, #16
 80193d4:	af00      	add	r7, sp, #0
 80193d6:	60f8      	str	r0, [r7, #12]
 80193d8:	60b9      	str	r1, [r7, #8]
 80193da:	607a      	str	r2, [r7, #4]
 80193dc:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 80193de:	68fb      	ldr	r3, [r7, #12]
 80193e0:	6a1b      	ldr	r3, [r3, #32]
 80193e2:	68ba      	ldr	r2, [r7, #8]
 80193e4:	429a      	cmp	r2, r3
 80193e6:	d305      	bcc.n	80193f4 <block_device_read+0x24>
 80193e8:	4b0b      	ldr	r3, [pc, #44]	; (8019418 <block_device_read+0x48>)
 80193ea:	4a0c      	ldr	r2, [pc, #48]	; (801941c <block_device_read+0x4c>)
 80193ec:	2148      	movs	r1, #72	; 0x48
 80193ee:	480c      	ldr	r0, [pc, #48]	; (8019420 <block_device_read+0x50>)
 80193f0:	f001 fbee 	bl	801abd0 <__assert_func>
#endif
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 80193f4:	68fb      	ldr	r3, [r7, #12]
 80193f6:	69db      	ldr	r3, [r3, #28]
 80193f8:	68ba      	ldr	r2, [r7, #8]
 80193fa:	fb03 f202 	mul.w	r2, r3, r2
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	4413      	add	r3, r2
 8019402:	69ba      	ldr	r2, [r7, #24]
 8019404:	b292      	uxth	r2, r2
 8019406:	4619      	mov	r1, r3
 8019408:	6838      	ldr	r0, [r7, #0]
 801940a:	f7eb f9b3 	bl	8004774 <sFLASH_ReadBuffer>
	return 0;
 801940e:	2300      	movs	r3, #0
}
 8019410:	4618      	mov	r0, r3
 8019412:	3710      	adds	r7, #16
 8019414:	46bd      	mov	sp, r7
 8019416:	bd80      	pop	{r7, pc}
 8019418:	0802229c 	.word	0x0802229c
 801941c:	08022cd4 	.word	0x08022cd4
 8019420:	080222b4 	.word	0x080222b4

08019424 <block_device_erase>:

int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 8019424:	b580      	push	{r7, lr}
 8019426:	b082      	sub	sp, #8
 8019428:	af00      	add	r7, sp, #0
 801942a:	6078      	str	r0, [r7, #4]
 801942c:	6039      	str	r1, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	6a1b      	ldr	r3, [r3, #32]
 8019432:	683a      	ldr	r2, [r7, #0]
 8019434:	429a      	cmp	r2, r3
 8019436:	d305      	bcc.n	8019444 <block_device_erase+0x20>
 8019438:	4b09      	ldr	r3, [pc, #36]	; (8019460 <block_device_erase+0x3c>)
 801943a:	4a0a      	ldr	r2, [pc, #40]	; (8019464 <block_device_erase+0x40>)
 801943c:	2150      	movs	r1, #80	; 0x50
 801943e:	480a      	ldr	r0, [pc, #40]	; (8019468 <block_device_erase+0x44>)
 8019440:	f001 fbc6 	bl	801abd0 <__assert_func>
#endif
	sFLASH_EraseSector(block * (c -> block_size));
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	69db      	ldr	r3, [r3, #28]
 8019448:	683a      	ldr	r2, [r7, #0]
 801944a:	fb02 f303 	mul.w	r3, r2, r3
 801944e:	4618      	mov	r0, r3
 8019450:	f7eb f88e 	bl	8004570 <sFLASH_EraseSector>
	return 0;
 8019454:	2300      	movs	r3, #0
}
 8019456:	4618      	mov	r0, r3
 8019458:	3708      	adds	r7, #8
 801945a:	46bd      	mov	sp, r7
 801945c:	bd80      	pop	{r7, pc}
 801945e:	bf00      	nop
 8019460:	0802229c 	.word	0x0802229c
 8019464:	08022ce8 	.word	0x08022ce8
 8019468:	080222b4 	.word	0x080222b4

0801946c <block_device_prog>:

int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 801946c:	b580      	push	{r7, lr}
 801946e:	b084      	sub	sp, #16
 8019470:	af00      	add	r7, sp, #0
 8019472:	60f8      	str	r0, [r7, #12]
 8019474:	60b9      	str	r1, [r7, #8]
 8019476:	607a      	str	r2, [r7, #4]
 8019478:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 801947a:	68fb      	ldr	r3, [r7, #12]
 801947c:	6a1b      	ldr	r3, [r3, #32]
 801947e:	68ba      	ldr	r2, [r7, #8]
 8019480:	429a      	cmp	r2, r3
 8019482:	d305      	bcc.n	8019490 <block_device_prog+0x24>
 8019484:	4b0b      	ldr	r3, [pc, #44]	; (80194b4 <block_device_prog+0x48>)
 8019486:	4a0c      	ldr	r2, [pc, #48]	; (80194b8 <block_device_prog+0x4c>)
 8019488:	2158      	movs	r1, #88	; 0x58
 801948a:	480c      	ldr	r0, [pc, #48]	; (80194bc <block_device_prog+0x50>)
 801948c:	f001 fba0 	bl	801abd0 <__assert_func>
#endif
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 8019490:	68fb      	ldr	r3, [r7, #12]
 8019492:	69db      	ldr	r3, [r3, #28]
 8019494:	68ba      	ldr	r2, [r7, #8]
 8019496:	fb03 f202 	mul.w	r2, r3, r2
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	4413      	add	r3, r2
 801949e:	69ba      	ldr	r2, [r7, #24]
 80194a0:	b292      	uxth	r2, r2
 80194a2:	4619      	mov	r1, r3
 80194a4:	6838      	ldr	r0, [r7, #0]
 80194a6:	f7eb f8bc 	bl	8004622 <sFLASH_WriteBuffer>
	return 0;
 80194aa:	2300      	movs	r3, #0
}
 80194ac:	4618      	mov	r0, r3
 80194ae:	3710      	adds	r7, #16
 80194b0:	46bd      	mov	sp, r7
 80194b2:	bd80      	pop	{r7, pc}
 80194b4:	0802229c 	.word	0x0802229c
 80194b8:	08022cfc 	.word	0x08022cfc
 80194bc:	080222b4 	.word	0x080222b4

080194c0 <block_device_sync>:

int block_device_sync(const struct lfs_config *c){
 80194c0:	b480      	push	{r7}
 80194c2:	b083      	sub	sp, #12
 80194c4:	af00      	add	r7, sp, #0
 80194c6:	6078      	str	r0, [r7, #4]
	return 0;
 80194c8:	2300      	movs	r3, #0
}
 80194ca:	4618      	mov	r0, r3
 80194cc:	370c      	adds	r7, #12
 80194ce:	46bd      	mov	sp, r7
 80194d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194d4:	4770      	bx	lr
	...

080194d8 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 80194d8:	b480      	push	{r7}
 80194da:	b087      	sub	sp, #28
 80194dc:	af00      	add	r7, sp, #0
 80194de:	60f8      	str	r0, [r7, #12]
 80194e0:	60b9      	str	r1, [r7, #8]
 80194e2:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 80194e4:	68bb      	ldr	r3, [r7, #8]
 80194e6:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 80194e8:	2300      	movs	r3, #0
 80194ea:	617b      	str	r3, [r7, #20]
 80194ec:	e024      	b.n	8019538 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 80194ee:	68fb      	ldr	r3, [r7, #12]
 80194f0:	091a      	lsrs	r2, r3, #4
 80194f2:	6939      	ldr	r1, [r7, #16]
 80194f4:	697b      	ldr	r3, [r7, #20]
 80194f6:	440b      	add	r3, r1
 80194f8:	781b      	ldrb	r3, [r3, #0]
 80194fa:	4619      	mov	r1, r3
 80194fc:	68fb      	ldr	r3, [r7, #12]
 80194fe:	404b      	eors	r3, r1
 8019500:	f003 030f 	and.w	r3, r3, #15
 8019504:	4912      	ldr	r1, [pc, #72]	; (8019550 <lfs_crc+0x78>)
 8019506:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801950a:	4053      	eors	r3, r2
 801950c:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 801950e:	68fb      	ldr	r3, [r7, #12]
 8019510:	091a      	lsrs	r2, r3, #4
 8019512:	6939      	ldr	r1, [r7, #16]
 8019514:	697b      	ldr	r3, [r7, #20]
 8019516:	440b      	add	r3, r1
 8019518:	781b      	ldrb	r3, [r3, #0]
 801951a:	091b      	lsrs	r3, r3, #4
 801951c:	b2db      	uxtb	r3, r3
 801951e:	4619      	mov	r1, r3
 8019520:	68fb      	ldr	r3, [r7, #12]
 8019522:	404b      	eors	r3, r1
 8019524:	f003 030f 	and.w	r3, r3, #15
 8019528:	4909      	ldr	r1, [pc, #36]	; (8019550 <lfs_crc+0x78>)
 801952a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801952e:	4053      	eors	r3, r2
 8019530:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8019532:	697b      	ldr	r3, [r7, #20]
 8019534:	3301      	adds	r3, #1
 8019536:	617b      	str	r3, [r7, #20]
 8019538:	697a      	ldr	r2, [r7, #20]
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	429a      	cmp	r2, r3
 801953e:	d3d6      	bcc.n	80194ee <lfs_crc+0x16>
    }

    return crc;
 8019540:	68fb      	ldr	r3, [r7, #12]
}
 8019542:	4618      	mov	r0, r3
 8019544:	371c      	adds	r7, #28
 8019546:	46bd      	mov	sp, r7
 8019548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801954c:	4770      	bx	lr
 801954e:	bf00      	nop
 8019550:	08022d10 	.word	0x08022d10

08019554 <spi_fs_init_mutex>:
//int (* lfs_unlock)(const struct lfs_config *c);

void (* FSMutexGet)		(void);
void (* FSMutexRelease)	(void);

void spi_fs_init_mutex(void (*get_mutex)(void), void (*release_mutex)(void)){
 8019554:	b480      	push	{r7}
 8019556:	b083      	sub	sp, #12
 8019558:	af00      	add	r7, sp, #0
 801955a:	6078      	str	r0, [r7, #4]
 801955c:	6039      	str	r1, [r7, #0]

	if (get_mutex) FSMutexGet = get_mutex;
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	2b00      	cmp	r3, #0
 8019562:	d002      	beq.n	801956a <spi_fs_init_mutex+0x16>
 8019564:	4a07      	ldr	r2, [pc, #28]	; (8019584 <spi_fs_init_mutex+0x30>)
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	6013      	str	r3, [r2, #0]
	if (release_mutex) FSMutexRelease = release_mutex;
 801956a:	683b      	ldr	r3, [r7, #0]
 801956c:	2b00      	cmp	r3, #0
 801956e:	d002      	beq.n	8019576 <spi_fs_init_mutex+0x22>
 8019570:	4a05      	ldr	r2, [pc, #20]	; (8019588 <spi_fs_init_mutex+0x34>)
 8019572:	683b      	ldr	r3, [r7, #0]
 8019574:	6013      	str	r3, [r2, #0]

};
 8019576:	bf00      	nop
 8019578:	370c      	adds	r7, #12
 801957a:	46bd      	mov	sp, r7
 801957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019580:	4770      	bx	lr
 8019582:	bf00      	nop
 8019584:	2000d91c 	.word	0x2000d91c
 8019588:	2000d920 	.word	0x2000d920

0801958c <spi_fs_init>:

int spi_fs_init(uint8_t * lfsReadBuff, uint8_t * lfsWriteBuff, uint8_t * lfslookaheadBuff, uint16_t buffers_size){
 801958c:	b590      	push	{r4, r7, lr}
 801958e:	b08b      	sub	sp, #44	; 0x2c
 8019590:	af02      	add	r7, sp, #8
 8019592:	61f8      	str	r0, [r7, #28]
 8019594:	61b9      	str	r1, [r7, #24]
 8019596:	617a      	str	r2, [r7, #20]
 8019598:	827b      	strh	r3, [r7, #18]

	flash_parameters = sFLASH_GetInfo();
 801959a:	4c14      	ldr	r4, [pc, #80]	; (80195ec <spi_fs_init+0x60>)
 801959c:	463b      	mov	r3, r7
 801959e:	4618      	mov	r0, r3
 80195a0:	f7ea ff40 	bl	8004424 <sFLASH_GetInfo>
 80195a4:	463b      	mov	r3, r7
 80195a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80195a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (flash_parameters.flash_id == 0x0) return -1;
 80195ac:	4b0f      	ldr	r3, [pc, #60]	; (80195ec <spi_fs_init+0x60>)
 80195ae:	681b      	ldr	r3, [r3, #0]
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d102      	bne.n	80195ba <spi_fs_init+0x2e>
 80195b4:	f04f 33ff 	mov.w	r3, #4294967295
 80195b8:	e013      	b.n	80195e2 <spi_fs_init+0x56>

	io_fs_init(lfsReadBuff, lfsWriteBuff, lfslookaheadBuff, buffers_size, &cfg);
 80195ba:	8a7b      	ldrh	r3, [r7, #18]
 80195bc:	4a0c      	ldr	r2, [pc, #48]	; (80195f0 <spi_fs_init+0x64>)
 80195be:	9200      	str	r2, [sp, #0]
 80195c0:	697a      	ldr	r2, [r7, #20]
 80195c2:	69b9      	ldr	r1, [r7, #24]
 80195c4:	69f8      	ldr	r0, [r7, #28]
 80195c6:	f7ff feab 	bl	8019320 <io_fs_init>

	memset(&fileConf, 0, sizeof(struct lfs_file_config));
 80195ca:	220c      	movs	r2, #12
 80195cc:	2100      	movs	r1, #0
 80195ce:	4809      	ldr	r0, [pc, #36]	; (80195f4 <spi_fs_init+0x68>)
 80195d0:	f002 fc9a 	bl	801bf08 <memset>
	fileConf.buffer = lfs_file_buf;  						// use the static buffer
 80195d4:	4b07      	ldr	r3, [pc, #28]	; (80195f4 <spi_fs_init+0x68>)
 80195d6:	4a08      	ldr	r2, [pc, #32]	; (80195f8 <spi_fs_init+0x6c>)
 80195d8:	601a      	str	r2, [r3, #0]
	fileConf.attr_count = 0;
 80195da:	4b06      	ldr	r3, [pc, #24]	; (80195f4 <spi_fs_init+0x68>)
 80195dc:	2200      	movs	r2, #0
 80195de:	609a      	str	r2, [r3, #8]

	return 0;
 80195e0:	2300      	movs	r3, #0
}
 80195e2:	4618      	mov	r0, r3
 80195e4:	3724      	adds	r7, #36	; 0x24
 80195e6:	46bd      	mov	sp, r7
 80195e8:	bd90      	pop	{r4, r7, pc}
 80195ea:	bf00      	nop
 80195ec:	2000d880 	.word	0x2000d880
 80195f0:	2000d834 	.word	0x2000d834
 80195f4:	2000d890 	.word	0x2000d890
 80195f8:	2000d45c 	.word	0x2000d45c

080195fc <spi_fs_mount>:

int spi_fs_mount(void){
 80195fc:	b580      	push	{r7, lr}
 80195fe:	b082      	sub	sp, #8
 8019600:	af00      	add	r7, sp, #0
	int err;

#ifdef LFS_USE_MUTEX
	FSMutexGet();
 8019602:	4b0d      	ldr	r3, [pc, #52]	; (8019638 <spi_fs_mount+0x3c>)
 8019604:	681b      	ldr	r3, [r3, #0]
 8019606:	4798      	blx	r3
#endif
	err = lfs_mount(&lfs, &cfg);
 8019608:	490c      	ldr	r1, [pc, #48]	; (801963c <spi_fs_mount+0x40>)
 801960a:	480d      	ldr	r0, [pc, #52]	; (8019640 <spi_fs_mount+0x44>)
 801960c:	f7ff fd52 	bl	80190b4 <lfs_mount>
 8019610:	6078      	str	r0, [r7, #4]
	if (err) {
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	2b00      	cmp	r3, #0
 8019616:	d003      	beq.n	8019620 <spi_fs_mount+0x24>
		fs_mount_flag = 0;
 8019618:	4b0a      	ldr	r3, [pc, #40]	; (8019644 <spi_fs_mount+0x48>)
 801961a:	2200      	movs	r2, #0
 801961c:	701a      	strb	r2, [r3, #0]
 801961e:	e002      	b.n	8019626 <spi_fs_mount+0x2a>
	}else{
		fs_mount_flag = 1;
 8019620:	4b08      	ldr	r3, [pc, #32]	; (8019644 <spi_fs_mount+0x48>)
 8019622:	2201      	movs	r2, #1
 8019624:	701a      	strb	r2, [r3, #0]
	}
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 8019626:	4b08      	ldr	r3, [pc, #32]	; (8019648 <spi_fs_mount+0x4c>)
 8019628:	681b      	ldr	r3, [r3, #0]
 801962a:	4798      	blx	r3
#endif

	return err;
 801962c:	687b      	ldr	r3, [r7, #4]
}
 801962e:	4618      	mov	r0, r3
 8019630:	3708      	adds	r7, #8
 8019632:	46bd      	mov	sp, r7
 8019634:	bd80      	pop	{r7, pc}
 8019636:	bf00      	nop
 8019638:	2000d91c 	.word	0x2000d91c
 801963c:	2000d834 	.word	0x2000d834
 8019640:	2000d660 	.word	0x2000d660
 8019644:	2000d65c 	.word	0x2000d65c
 8019648:	2000d920 	.word	0x2000d920

0801964c <spi_fs_format>:
int spi_fs_mount_status(void){

	return fs_mount_flag;
}

void spi_fs_format(void){
 801964c:	b580      	push	{r7, lr}
 801964e:	af00      	add	r7, sp, #0
	lfs_format(&lfs, &cfg);
 8019650:	4902      	ldr	r1, [pc, #8]	; (801965c <spi_fs_format+0x10>)
 8019652:	4803      	ldr	r0, [pc, #12]	; (8019660 <spi_fs_format+0x14>)
 8019654:	f7ff fd18 	bl	8019088 <lfs_format>
}
 8019658:	bf00      	nop
 801965a:	bd80      	pop	{r7, pc}
 801965c:	2000d834 	.word	0x2000d834
 8019660:	2000d660 	.word	0x2000d660

08019664 <spi_fs_read_file_offset>:
	FSMutexRelease();
#endif
	return err;
}

int spi_fs_read_file_offset(const char *path, void *buffer, uint32_t offset, uint32_t read_size){
 8019664:	b580      	push	{r7, lr}
 8019666:	b088      	sub	sp, #32
 8019668:	af02      	add	r7, sp, #8
 801966a:	60f8      	str	r0, [r7, #12]
 801966c:	60b9      	str	r1, [r7, #8]
 801966e:	607a      	str	r2, [r7, #4]
 8019670:	603b      	str	r3, [r7, #0]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 8019672:	4b19      	ldr	r3, [pc, #100]	; (80196d8 <spi_fs_read_file_offset+0x74>)
 8019674:	681b      	ldr	r3, [r3, #0]
 8019676:	4798      	blx	r3
#endif
	err =	lfs_file_opencfg(&lfs, &file, path, LFS_O_RDONLY | LFS_O_CREAT, &fileConf);
 8019678:	4b18      	ldr	r3, [pc, #96]	; (80196dc <spi_fs_read_file_offset+0x78>)
 801967a:	9300      	str	r3, [sp, #0]
 801967c:	f240 1301 	movw	r3, #257	; 0x101
 8019680:	68fa      	ldr	r2, [r7, #12]
 8019682:	4917      	ldr	r1, [pc, #92]	; (80196e0 <spi_fs_read_file_offset+0x7c>)
 8019684:	4817      	ldr	r0, [pc, #92]	; (80196e4 <spi_fs_read_file_offset+0x80>)
 8019686:	f7ff fd43 	bl	8019110 <lfs_file_opencfg>
 801968a:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 801968c:	697b      	ldr	r3, [r7, #20]
 801968e:	2b00      	cmp	r3, #0
 8019690:	db13      	blt.n	80196ba <spi_fs_read_file_offset+0x56>
	err =	lfs_file_seek(&lfs, &file, offset, LFS_SEEK_SET);
 8019692:	687a      	ldr	r2, [r7, #4]
 8019694:	2300      	movs	r3, #0
 8019696:	4912      	ldr	r1, [pc, #72]	; (80196e0 <spi_fs_read_file_offset+0x7c>)
 8019698:	4812      	ldr	r0, [pc, #72]	; (80196e4 <spi_fs_read_file_offset+0x80>)
 801969a:	f7ff fdfb 	bl	8019294 <lfs_file_seek>
 801969e:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 80196a0:	697b      	ldr	r3, [r7, #20]
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	db0b      	blt.n	80196be <spi_fs_read_file_offset+0x5a>
	err =	lfs_file_read(&lfs, &file, buffer, read_size);
 80196a6:	683b      	ldr	r3, [r7, #0]
 80196a8:	68ba      	ldr	r2, [r7, #8]
 80196aa:	490d      	ldr	r1, [pc, #52]	; (80196e0 <spi_fs_read_file_offset+0x7c>)
 80196ac:	480d      	ldr	r0, [pc, #52]	; (80196e4 <spi_fs_read_file_offset+0x80>)
 80196ae:	f7ff fd91 	bl	80191d4 <lfs_file_read>
 80196b2:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 80196b4:	697b      	ldr	r3, [r7, #20]
 80196b6:	2b00      	cmp	r3, #0

	func_end:
 80196b8:	e002      	b.n	80196c0 <spi_fs_read_file_offset+0x5c>
	if (err < 0) goto func_end;
 80196ba:	bf00      	nop
 80196bc:	e000      	b.n	80196c0 <spi_fs_read_file_offset+0x5c>
	if (err < 0) goto func_end;
 80196be:	bf00      	nop
	lfs_file_close(&lfs, &file);
 80196c0:	4907      	ldr	r1, [pc, #28]	; (80196e0 <spi_fs_read_file_offset+0x7c>)
 80196c2:	4808      	ldr	r0, [pc, #32]	; (80196e4 <spi_fs_read_file_offset+0x80>)
 80196c4:	f7ff fd5a 	bl	801917c <lfs_file_close>
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 80196c8:	4b07      	ldr	r3, [pc, #28]	; (80196e8 <spi_fs_read_file_offset+0x84>)
 80196ca:	681b      	ldr	r3, [r3, #0]
 80196cc:	4798      	blx	r3
#endif
	return err;
 80196ce:	697b      	ldr	r3, [r7, #20]

}
 80196d0:	4618      	mov	r0, r3
 80196d2:	3718      	adds	r7, #24
 80196d4:	46bd      	mov	sp, r7
 80196d6:	bd80      	pop	{r7, pc}
 80196d8:	2000d91c 	.word	0x2000d91c
 80196dc:	2000d890 	.word	0x2000d890
 80196e0:	2000d6d8 	.word	0x2000d6d8
 80196e4:	2000d660 	.word	0x2000d660
 80196e8:	2000d920 	.word	0x2000d920

080196ec <spi_fs_over_write_file>:

int spi_fs_over_write_file(const char *path, void *buffer, uint32_t write_size){
 80196ec:	b580      	push	{r7, lr}
 80196ee:	b088      	sub	sp, #32
 80196f0:	af02      	add	r7, sp, #8
 80196f2:	60f8      	str	r0, [r7, #12]
 80196f4:	60b9      	str	r1, [r7, #8]
 80196f6:	607a      	str	r2, [r7, #4]
	int err = 0;
 80196f8:	2300      	movs	r3, #0
 80196fa:	617b      	str	r3, [r7, #20]
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 80196fc:	4b13      	ldr	r3, [pc, #76]	; (801974c <spi_fs_over_write_file+0x60>)
 80196fe:	681b      	ldr	r3, [r3, #0]
 8019700:	4798      	blx	r3
#endif

	err = lfs_file_opencfg(&lfs, &file, path, LFS_O_RDWR | LFS_O_CREAT | LFS_O_TRUNC, &fileConf);
 8019702:	4b13      	ldr	r3, [pc, #76]	; (8019750 <spi_fs_over_write_file+0x64>)
 8019704:	9300      	str	r3, [sp, #0]
 8019706:	f240 5303 	movw	r3, #1283	; 0x503
 801970a:	68fa      	ldr	r2, [r7, #12]
 801970c:	4911      	ldr	r1, [pc, #68]	; (8019754 <spi_fs_over_write_file+0x68>)
 801970e:	4812      	ldr	r0, [pc, #72]	; (8019758 <spi_fs_over_write_file+0x6c>)
 8019710:	f7ff fcfe 	bl	8019110 <lfs_file_opencfg>
 8019714:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 8019716:	697b      	ldr	r3, [r7, #20]
 8019718:	2b00      	cmp	r3, #0
 801971a:	db09      	blt.n	8019730 <spi_fs_over_write_file+0x44>
	err = lfs_file_write(&lfs, &file, buffer, write_size);
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	68ba      	ldr	r2, [r7, #8]
 8019720:	490c      	ldr	r1, [pc, #48]	; (8019754 <spi_fs_over_write_file+0x68>)
 8019722:	480d      	ldr	r0, [pc, #52]	; (8019758 <spi_fs_over_write_file+0x6c>)
 8019724:	f7ff fd86 	bl	8019234 <lfs_file_write>
 8019728:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 801972a:	697b      	ldr	r3, [r7, #20]
 801972c:	2b00      	cmp	r3, #0

	func_end:
 801972e:	e000      	b.n	8019732 <spi_fs_over_write_file+0x46>
	if (err < 0) goto func_end;
 8019730:	bf00      	nop
	lfs_file_close(&lfs, &file);
 8019732:	4908      	ldr	r1, [pc, #32]	; (8019754 <spi_fs_over_write_file+0x68>)
 8019734:	4808      	ldr	r0, [pc, #32]	; (8019758 <spi_fs_over_write_file+0x6c>)
 8019736:	f7ff fd21 	bl	801917c <lfs_file_close>
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 801973a:	4b08      	ldr	r3, [pc, #32]	; (801975c <spi_fs_over_write_file+0x70>)
 801973c:	681b      	ldr	r3, [r3, #0]
 801973e:	4798      	blx	r3
#endif
	return err;
 8019740:	697b      	ldr	r3, [r7, #20]
}
 8019742:	4618      	mov	r0, r3
 8019744:	3718      	adds	r7, #24
 8019746:	46bd      	mov	sp, r7
 8019748:	bd80      	pop	{r7, pc}
 801974a:	bf00      	nop
 801974c:	2000d91c 	.word	0x2000d91c
 8019750:	2000d890 	.word	0x2000d890
 8019754:	2000d6d8 	.word	0x2000d6d8
 8019758:	2000d660 	.word	0x2000d660
 801975c:	2000d920 	.word	0x2000d920

08019760 <spi_fs_file_size>:

int spi_fs_file_size(const char *path){
 8019760:	b580      	push	{r7, lr}
 8019762:	b084      	sub	sp, #16
 8019764:	af00      	add	r7, sp, #0
 8019766:	6078      	str	r0, [r7, #4]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 8019768:	4b0b      	ldr	r3, [pc, #44]	; (8019798 <spi_fs_file_size+0x38>)
 801976a:	681b      	ldr	r3, [r3, #0]
 801976c:	4798      	blx	r3
#endif

	err = lfs_stat(&lfs, path, &file_info);
 801976e:	4a0b      	ldr	r2, [pc, #44]	; (801979c <spi_fs_file_size+0x3c>)
 8019770:	6879      	ldr	r1, [r7, #4]
 8019772:	480b      	ldr	r0, [pc, #44]	; (80197a0 <spi_fs_file_size+0x40>)
 8019774:	f7ff fcb4 	bl	80190e0 <lfs_stat>
 8019778:	60f8      	str	r0, [r7, #12]
	if (err == 0){
 801977a:	68fb      	ldr	r3, [r7, #12]
 801977c:	2b00      	cmp	r3, #0
 801977e:	d102      	bne.n	8019786 <spi_fs_file_size+0x26>
		err = file_info.size;
 8019780:	4b06      	ldr	r3, [pc, #24]	; (801979c <spi_fs_file_size+0x3c>)
 8019782:	685b      	ldr	r3, [r3, #4]
 8019784:	60fb      	str	r3, [r7, #12]
	}

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 8019786:	4b07      	ldr	r3, [pc, #28]	; (80197a4 <spi_fs_file_size+0x44>)
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	4798      	blx	r3
#endif
	return err;
 801978c:	68fb      	ldr	r3, [r7, #12]
}
 801978e:	4618      	mov	r0, r3
 8019790:	3710      	adds	r7, #16
 8019792:	46bd      	mov	sp, r7
 8019794:	bd80      	pop	{r7, pc}
 8019796:	bf00      	nop
 8019798:	2000d91c 	.word	0x2000d91c
 801979c:	2000d72c 	.word	0x2000d72c
 80197a0:	2000d660 	.word	0x2000d660
 80197a4:	2000d920 	.word	0x2000d920

080197a8 <spi_fs_write_file_to_end>:

int spi_fs_write_file_to_end(const char *path, void *buffer, uint32_t write_size){
 80197a8:	b580      	push	{r7, lr}
 80197aa:	b088      	sub	sp, #32
 80197ac:	af02      	add	r7, sp, #8
 80197ae:	60f8      	str	r0, [r7, #12]
 80197b0:	60b9      	str	r1, [r7, #8]
 80197b2:	607a      	str	r2, [r7, #4]
	int err = 0;
 80197b4:	2300      	movs	r3, #0
 80197b6:	617b      	str	r3, [r7, #20]
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 80197b8:	4b13      	ldr	r3, [pc, #76]	; (8019808 <spi_fs_write_file_to_end+0x60>)
 80197ba:	681b      	ldr	r3, [r3, #0]
 80197bc:	4798      	blx	r3
#endif

	err = lfs_file_opencfg(&lfs, &file, path, LFS_O_RDWR | LFS_O_CREAT | LFS_O_APPEND, &fileConf);
 80197be:	4b13      	ldr	r3, [pc, #76]	; (801980c <spi_fs_write_file_to_end+0x64>)
 80197c0:	9300      	str	r3, [sp, #0]
 80197c2:	f640 1303 	movw	r3, #2307	; 0x903
 80197c6:	68fa      	ldr	r2, [r7, #12]
 80197c8:	4911      	ldr	r1, [pc, #68]	; (8019810 <spi_fs_write_file_to_end+0x68>)
 80197ca:	4812      	ldr	r0, [pc, #72]	; (8019814 <spi_fs_write_file_to_end+0x6c>)
 80197cc:	f7ff fca0 	bl	8019110 <lfs_file_opencfg>
 80197d0:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 80197d2:	697b      	ldr	r3, [r7, #20]
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	db09      	blt.n	80197ec <spi_fs_write_file_to_end+0x44>
	err = lfs_file_write(&lfs, &file, buffer, write_size);
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	68ba      	ldr	r2, [r7, #8]
 80197dc:	490c      	ldr	r1, [pc, #48]	; (8019810 <spi_fs_write_file_to_end+0x68>)
 80197de:	480d      	ldr	r0, [pc, #52]	; (8019814 <spi_fs_write_file_to_end+0x6c>)
 80197e0:	f7ff fd28 	bl	8019234 <lfs_file_write>
 80197e4:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 80197e6:	697b      	ldr	r3, [r7, #20]
 80197e8:	2b00      	cmp	r3, #0

	func_end:
 80197ea:	e000      	b.n	80197ee <spi_fs_write_file_to_end+0x46>
	if (err < 0) goto func_end;
 80197ec:	bf00      	nop
	lfs_file_close(&lfs, &file);
 80197ee:	4908      	ldr	r1, [pc, #32]	; (8019810 <spi_fs_write_file_to_end+0x68>)
 80197f0:	4808      	ldr	r0, [pc, #32]	; (8019814 <spi_fs_write_file_to_end+0x6c>)
 80197f2:	f7ff fcc3 	bl	801917c <lfs_file_close>
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 80197f6:	4b08      	ldr	r3, [pc, #32]	; (8019818 <spi_fs_write_file_to_end+0x70>)
 80197f8:	681b      	ldr	r3, [r3, #0]
 80197fa:	4798      	blx	r3
#endif
	return err;
 80197fc:	697b      	ldr	r3, [r7, #20]
}
 80197fe:	4618      	mov	r0, r3
 8019800:	3718      	adds	r7, #24
 8019802:	46bd      	mov	sp, r7
 8019804:	bd80      	pop	{r7, pc}
 8019806:	bf00      	nop
 8019808:	2000d91c 	.word	0x2000d91c
 801980c:	2000d890 	.word	0x2000d890
 8019810:	2000d6d8 	.word	0x2000d6d8
 8019814:	2000d660 	.word	0x2000d660
 8019818:	2000d920 	.word	0x2000d920

0801981c <spi_fs_serch_file_in_dir>:

int spi_fs_serch_file_in_dir(const char * dir_path, const char * filename){
 801981c:	b580      	push	{r7, lr}
 801981e:	b084      	sub	sp, #16
 8019820:	af00      	add	r7, sp, #0
 8019822:	6078      	str	r0, [r7, #4]
 8019824:	6039      	str	r1, [r7, #0]


	int err;
	memset(temp_buf, 0x0, PATH_BUF_SIZE);
 8019826:	2280      	movs	r2, #128	; 0x80
 8019828:	2100      	movs	r1, #0
 801982a:	480a      	ldr	r0, [pc, #40]	; (8019854 <spi_fs_serch_file_in_dir+0x38>)
 801982c:	f002 fb6c 	bl	801bf08 <memset>
	strcpy((char *)temp_buf, dir_path);
 8019830:	6879      	ldr	r1, [r7, #4]
 8019832:	4808      	ldr	r0, [pc, #32]	; (8019854 <spi_fs_serch_file_in_dir+0x38>)
 8019834:	f002 fd35 	bl	801c2a2 <strcpy>
	strcat((char *)temp_buf, filename);
 8019838:	6839      	ldr	r1, [r7, #0]
 801983a:	4806      	ldr	r0, [pc, #24]	; (8019854 <spi_fs_serch_file_in_dir+0x38>)
 801983c:	f002 fb6c 	bl	801bf18 <strcat>
	err = spi_fs_file_size((const char *)temp_buf);
 8019840:	4804      	ldr	r0, [pc, #16]	; (8019854 <spi_fs_serch_file_in_dir+0x38>)
 8019842:	f7ff ff8d 	bl	8019760 <spi_fs_file_size>
 8019846:	60f8      	str	r0, [r7, #12]
	return err;
 8019848:	68fb      	ldr	r3, [r7, #12]

}
 801984a:	4618      	mov	r0, r3
 801984c:	3710      	adds	r7, #16
 801984e:	46bd      	mov	sp, r7
 8019850:	bd80      	pop	{r7, pc}
 8019852:	bf00      	nop
 8019854:	2000d89c 	.word	0x2000d89c

08019858 <spi_fs_mkdir>:

int spi_fs_mkdir(const char *path){
 8019858:	b580      	push	{r7, lr}
 801985a:	b084      	sub	sp, #16
 801985c:	af00      	add	r7, sp, #0
 801985e:	6078      	str	r0, [r7, #4]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 8019860:	4b07      	ldr	r3, [pc, #28]	; (8019880 <spi_fs_mkdir+0x28>)
 8019862:	681b      	ldr	r3, [r3, #0]
 8019864:	4798      	blx	r3
#endif

	err = lfs_mkdir(&lfs, path);
 8019866:	6879      	ldr	r1, [r7, #4]
 8019868:	4806      	ldr	r0, [pc, #24]	; (8019884 <spi_fs_mkdir+0x2c>)
 801986a:	f7ff fd43 	bl	80192f4 <lfs_mkdir>
 801986e:	60f8      	str	r0, [r7, #12]

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 8019870:	4b05      	ldr	r3, [pc, #20]	; (8019888 <spi_fs_mkdir+0x30>)
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	4798      	blx	r3
#endif

	return err;
 8019876:	68fb      	ldr	r3, [r7, #12]
}
 8019878:	4618      	mov	r0, r3
 801987a:	3710      	adds	r7, #16
 801987c:	46bd      	mov	sp, r7
 801987e:	bd80      	pop	{r7, pc}
 8019880:	2000d91c 	.word	0x2000d91c
 8019884:	2000d660 	.word	0x2000d660
 8019888:	2000d920 	.word	0x2000d920

0801988c <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 801988c:	b480      	push	{r7}
 801988e:	b08b      	sub	sp, #44	; 0x2c
 8019890:	af00      	add	r7, sp, #0
 8019892:	60f8      	str	r0, [r7, #12]
 8019894:	60b9      	str	r1, [r7, #8]
 8019896:	607a      	str	r2, [r7, #4]
 8019898:	603b      	str	r3, [r7, #0]
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 801989a:	2300      	movs	r3, #0
 801989c:	61fb      	str	r3, [r7, #28]
 801989e:	2300      	movs	r3, #0
 80198a0:	623b      	str	r3, [r7, #32]
 80198a2:	6a3b      	ldr	r3, [r7, #32]
 80198a4:	627b      	str	r3, [r7, #36]	; 0x24
 80198a6:	e06f      	b.n	8019988 <mbedtls_base64_decode+0xfc>
    {
        /* Skip spaces before checking for EOL */
        x = 0;
 80198a8:	2300      	movs	r3, #0
 80198aa:	61bb      	str	r3, [r7, #24]
        while( i < slen && src[i] == ' ' )
 80198ac:	e005      	b.n	80198ba <mbedtls_base64_decode+0x2e>
        {
            ++i;
 80198ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198b0:	3301      	adds	r3, #1
 80198b2:	627b      	str	r3, [r7, #36]	; 0x24
            ++x;
 80198b4:	69bb      	ldr	r3, [r7, #24]
 80198b6:	3301      	adds	r3, #1
 80198b8:	61bb      	str	r3, [r7, #24]
        while( i < slen && src[i] == ' ' )
 80198ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80198bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198be:	429a      	cmp	r2, r3
 80198c0:	d205      	bcs.n	80198ce <mbedtls_base64_decode+0x42>
 80198c2:	683a      	ldr	r2, [r7, #0]
 80198c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198c6:	4413      	add	r3, r2
 80198c8:	781b      	ldrb	r3, [r3, #0]
 80198ca:	2b20      	cmp	r3, #32
 80198cc:	d0ef      	beq.n	80198ae <mbedtls_base64_decode+0x22>
        }

        /* Spaces at end of buffer are OK */
        if( i == slen )
 80198ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80198d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198d2:	429a      	cmp	r2, r3
 80198d4:	d05d      	beq.n	8019992 <mbedtls_base64_decode+0x106>
            break;

        if( ( slen - i ) >= 2 &&
 80198d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80198d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198da:	1ad3      	subs	r3, r2, r3
 80198dc:	2b01      	cmp	r3, #1
 80198de:	d90c      	bls.n	80198fa <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
 80198e0:	683a      	ldr	r2, [r7, #0]
 80198e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198e4:	4413      	add	r3, r2
 80198e6:	781b      	ldrb	r3, [r3, #0]
        if( ( slen - i ) >= 2 &&
 80198e8:	2b0d      	cmp	r3, #13
 80198ea:	d106      	bne.n	80198fa <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
 80198ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198ee:	3301      	adds	r3, #1
 80198f0:	683a      	ldr	r2, [r7, #0]
 80198f2:	4413      	add	r3, r2
 80198f4:	781b      	ldrb	r3, [r3, #0]
 80198f6:	2b0a      	cmp	r3, #10
 80198f8:	d040      	beq.n	801997c <mbedtls_base64_decode+0xf0>
            continue;

        if( src[i] == '\n' )
 80198fa:	683a      	ldr	r2, [r7, #0]
 80198fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198fe:	4413      	add	r3, r2
 8019900:	781b      	ldrb	r3, [r3, #0]
 8019902:	2b0a      	cmp	r3, #10
 8019904:	d03c      	beq.n	8019980 <mbedtls_base64_decode+0xf4>
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
 8019906:	69bb      	ldr	r3, [r7, #24]
 8019908:	2b00      	cmp	r3, #0
 801990a:	d002      	beq.n	8019912 <mbedtls_base64_decode+0x86>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 801990c:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 8019910:	e0d0      	b.n	8019ab4 <mbedtls_base64_decode+0x228>

        if( src[i] == '=' && ++j > 2 )
 8019912:	683a      	ldr	r2, [r7, #0]
 8019914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019916:	4413      	add	r3, r2
 8019918:	781b      	ldrb	r3, [r3, #0]
 801991a:	2b3d      	cmp	r3, #61	; 0x3d
 801991c:	d108      	bne.n	8019930 <mbedtls_base64_decode+0xa4>
 801991e:	69fb      	ldr	r3, [r7, #28]
 8019920:	3301      	adds	r3, #1
 8019922:	61fb      	str	r3, [r7, #28]
 8019924:	69fb      	ldr	r3, [r7, #28]
 8019926:	2b02      	cmp	r3, #2
 8019928:	d902      	bls.n	8019930 <mbedtls_base64_decode+0xa4>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 801992a:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 801992e:	e0c1      	b.n	8019ab4 <mbedtls_base64_decode+0x228>

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 8019930:	683a      	ldr	r2, [r7, #0]
 8019932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019934:	4413      	add	r3, r2
 8019936:	781b      	ldrb	r3, [r3, #0]
 8019938:	b25b      	sxtb	r3, r3
 801993a:	2b00      	cmp	r3, #0
 801993c:	db08      	blt.n	8019950 <mbedtls_base64_decode+0xc4>
 801993e:	683a      	ldr	r2, [r7, #0]
 8019940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019942:	4413      	add	r3, r2
 8019944:	781b      	ldrb	r3, [r3, #0]
 8019946:	461a      	mov	r2, r3
 8019948:	4b5d      	ldr	r3, [pc, #372]	; (8019ac0 <mbedtls_base64_decode+0x234>)
 801994a:	5c9b      	ldrb	r3, [r3, r2]
 801994c:	2b7f      	cmp	r3, #127	; 0x7f
 801994e:	d102      	bne.n	8019956 <mbedtls_base64_decode+0xca>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 8019950:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 8019954:	e0ae      	b.n	8019ab4 <mbedtls_base64_decode+0x228>

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 8019956:	683a      	ldr	r2, [r7, #0]
 8019958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801995a:	4413      	add	r3, r2
 801995c:	781b      	ldrb	r3, [r3, #0]
 801995e:	461a      	mov	r2, r3
 8019960:	4b57      	ldr	r3, [pc, #348]	; (8019ac0 <mbedtls_base64_decode+0x234>)
 8019962:	5c9b      	ldrb	r3, [r3, r2]
 8019964:	2b3f      	cmp	r3, #63	; 0x3f
 8019966:	d805      	bhi.n	8019974 <mbedtls_base64_decode+0xe8>
 8019968:	69fb      	ldr	r3, [r7, #28]
 801996a:	2b00      	cmp	r3, #0
 801996c:	d002      	beq.n	8019974 <mbedtls_base64_decode+0xe8>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 801996e:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 8019972:	e09f      	b.n	8019ab4 <mbedtls_base64_decode+0x228>

        n++;
 8019974:	6a3b      	ldr	r3, [r7, #32]
 8019976:	3301      	adds	r3, #1
 8019978:	623b      	str	r3, [r7, #32]
 801997a:	e002      	b.n	8019982 <mbedtls_base64_decode+0xf6>
            continue;
 801997c:	bf00      	nop
 801997e:	e000      	b.n	8019982 <mbedtls_base64_decode+0xf6>
            continue;
 8019980:	bf00      	nop
    for( i = n = j = 0; i < slen; i++ )
 8019982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019984:	3301      	adds	r3, #1
 8019986:	627b      	str	r3, [r7, #36]	; 0x24
 8019988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801998a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801998c:	429a      	cmp	r2, r3
 801998e:	d38b      	bcc.n	80198a8 <mbedtls_base64_decode+0x1c>
 8019990:	e000      	b.n	8019994 <mbedtls_base64_decode+0x108>
            break;
 8019992:	bf00      	nop
    }

    if( n == 0 )
 8019994:	6a3b      	ldr	r3, [r7, #32]
 8019996:	2b00      	cmp	r3, #0
 8019998:	d104      	bne.n	80199a4 <mbedtls_base64_decode+0x118>
    {
        *olen = 0;
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	2200      	movs	r2, #0
 801999e:	601a      	str	r2, [r3, #0]
        return( 0 );
 80199a0:	2300      	movs	r3, #0
 80199a2:	e087      	b.n	8019ab4 <mbedtls_base64_decode+0x228>

    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
 80199a4:	6a3b      	ldr	r3, [r7, #32]
 80199a6:	08da      	lsrs	r2, r3, #3
 80199a8:	4613      	mov	r3, r2
 80199aa:	005b      	lsls	r3, r3, #1
 80199ac:	4413      	add	r3, r2
 80199ae:	005b      	lsls	r3, r3, #1
 80199b0:	4619      	mov	r1, r3
 80199b2:	6a3b      	ldr	r3, [r7, #32]
 80199b4:	f003 0207 	and.w	r2, r3, #7
 80199b8:	4613      	mov	r3, r2
 80199ba:	005b      	lsls	r3, r3, #1
 80199bc:	4413      	add	r3, r2
 80199be:	005b      	lsls	r3, r3, #1
 80199c0:	3307      	adds	r3, #7
 80199c2:	08db      	lsrs	r3, r3, #3
 80199c4:	440b      	add	r3, r1
 80199c6:	623b      	str	r3, [r7, #32]
    n -= j;
 80199c8:	6a3a      	ldr	r2, [r7, #32]
 80199ca:	69fb      	ldr	r3, [r7, #28]
 80199cc:	1ad3      	subs	r3, r2, r3
 80199ce:	623b      	str	r3, [r7, #32]

    if( dst == NULL || dlen < n )
 80199d0:	68fb      	ldr	r3, [r7, #12]
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	d003      	beq.n	80199de <mbedtls_base64_decode+0x152>
 80199d6:	68ba      	ldr	r2, [r7, #8]
 80199d8:	6a3b      	ldr	r3, [r7, #32]
 80199da:	429a      	cmp	r2, r3
 80199dc:	d205      	bcs.n	80199ea <mbedtls_base64_decode+0x15e>
    {
        *olen = n;
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	6a3a      	ldr	r2, [r7, #32]
 80199e2:	601a      	str	r2, [r3, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 80199e4:	f06f 0329 	mvn.w	r3, #41	; 0x29
 80199e8:	e064      	b.n	8019ab4 <mbedtls_base64_decode+0x228>
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 80199ea:	2303      	movs	r3, #3
 80199ec:	61fb      	str	r3, [r7, #28]
 80199ee:	2300      	movs	r3, #0
 80199f0:	61bb      	str	r3, [r7, #24]
 80199f2:	2300      	movs	r3, #0
 80199f4:	623b      	str	r3, [r7, #32]
 80199f6:	68fb      	ldr	r3, [r7, #12]
 80199f8:	617b      	str	r3, [r7, #20]
 80199fa:	e051      	b.n	8019aa0 <mbedtls_base64_decode+0x214>
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 80199fc:	683b      	ldr	r3, [r7, #0]
 80199fe:	781b      	ldrb	r3, [r3, #0]
 8019a00:	2b0d      	cmp	r3, #13
 8019a02:	d046      	beq.n	8019a92 <mbedtls_base64_decode+0x206>
 8019a04:	683b      	ldr	r3, [r7, #0]
 8019a06:	781b      	ldrb	r3, [r3, #0]
 8019a08:	2b0a      	cmp	r3, #10
 8019a0a:	d042      	beq.n	8019a92 <mbedtls_base64_decode+0x206>
 8019a0c:	683b      	ldr	r3, [r7, #0]
 8019a0e:	781b      	ldrb	r3, [r3, #0]
 8019a10:	2b20      	cmp	r3, #32
 8019a12:	d03e      	beq.n	8019a92 <mbedtls_base64_decode+0x206>
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 8019a14:	683b      	ldr	r3, [r7, #0]
 8019a16:	781b      	ldrb	r3, [r3, #0]
 8019a18:	461a      	mov	r2, r3
 8019a1a:	4b29      	ldr	r3, [pc, #164]	; (8019ac0 <mbedtls_base64_decode+0x234>)
 8019a1c:	5c9b      	ldrb	r3, [r3, r2]
 8019a1e:	2b40      	cmp	r3, #64	; 0x40
 8019a20:	bf0c      	ite	eq
 8019a22:	2301      	moveq	r3, #1
 8019a24:	2300      	movne	r3, #0
 8019a26:	b2db      	uxtb	r3, r3
 8019a28:	461a      	mov	r2, r3
 8019a2a:	69fb      	ldr	r3, [r7, #28]
 8019a2c:	1a9b      	subs	r3, r3, r2
 8019a2e:	61fb      	str	r3, [r7, #28]
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 8019a30:	69bb      	ldr	r3, [r7, #24]
 8019a32:	019a      	lsls	r2, r3, #6
 8019a34:	683b      	ldr	r3, [r7, #0]
 8019a36:	781b      	ldrb	r3, [r3, #0]
 8019a38:	4619      	mov	r1, r3
 8019a3a:	4b21      	ldr	r3, [pc, #132]	; (8019ac0 <mbedtls_base64_decode+0x234>)
 8019a3c:	5c5b      	ldrb	r3, [r3, r1]
 8019a3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019a42:	4313      	orrs	r3, r2
 8019a44:	61bb      	str	r3, [r7, #24]

        if( ++n == 4 )
 8019a46:	6a3b      	ldr	r3, [r7, #32]
 8019a48:	3301      	adds	r3, #1
 8019a4a:	623b      	str	r3, [r7, #32]
 8019a4c:	6a3b      	ldr	r3, [r7, #32]
 8019a4e:	2b04      	cmp	r3, #4
 8019a50:	d120      	bne.n	8019a94 <mbedtls_base64_decode+0x208>
        {
            n = 0;
 8019a52:	2300      	movs	r3, #0
 8019a54:	623b      	str	r3, [r7, #32]
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 8019a56:	69fb      	ldr	r3, [r7, #28]
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	d006      	beq.n	8019a6a <mbedtls_base64_decode+0x1de>
 8019a5c:	69bb      	ldr	r3, [r7, #24]
 8019a5e:	0c19      	lsrs	r1, r3, #16
 8019a60:	697b      	ldr	r3, [r7, #20]
 8019a62:	1c5a      	adds	r2, r3, #1
 8019a64:	617a      	str	r2, [r7, #20]
 8019a66:	b2ca      	uxtb	r2, r1
 8019a68:	701a      	strb	r2, [r3, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8019a6a:	69fb      	ldr	r3, [r7, #28]
 8019a6c:	2b01      	cmp	r3, #1
 8019a6e:	d906      	bls.n	8019a7e <mbedtls_base64_decode+0x1f2>
 8019a70:	69bb      	ldr	r3, [r7, #24]
 8019a72:	0a19      	lsrs	r1, r3, #8
 8019a74:	697b      	ldr	r3, [r7, #20]
 8019a76:	1c5a      	adds	r2, r3, #1
 8019a78:	617a      	str	r2, [r7, #20]
 8019a7a:	b2ca      	uxtb	r2, r1
 8019a7c:	701a      	strb	r2, [r3, #0]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 8019a7e:	69fb      	ldr	r3, [r7, #28]
 8019a80:	2b02      	cmp	r3, #2
 8019a82:	d907      	bls.n	8019a94 <mbedtls_base64_decode+0x208>
 8019a84:	697b      	ldr	r3, [r7, #20]
 8019a86:	1c5a      	adds	r2, r3, #1
 8019a88:	617a      	str	r2, [r7, #20]
 8019a8a:	69ba      	ldr	r2, [r7, #24]
 8019a8c:	b2d2      	uxtb	r2, r2
 8019a8e:	701a      	strb	r2, [r3, #0]
 8019a90:	e000      	b.n	8019a94 <mbedtls_base64_decode+0x208>
            continue;
 8019a92:	bf00      	nop
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 8019a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a96:	3b01      	subs	r3, #1
 8019a98:	627b      	str	r3, [r7, #36]	; 0x24
 8019a9a:	683b      	ldr	r3, [r7, #0]
 8019a9c:	3301      	adds	r3, #1
 8019a9e:	603b      	str	r3, [r7, #0]
 8019aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d1aa      	bne.n	80199fc <mbedtls_base64_decode+0x170>
        }
    }

    *olen = p - dst;
 8019aa6:	697a      	ldr	r2, [r7, #20]
 8019aa8:	68fb      	ldr	r3, [r7, #12]
 8019aaa:	1ad3      	subs	r3, r2, r3
 8019aac:	461a      	mov	r2, r3
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	601a      	str	r2, [r3, #0]

    return( 0 );
 8019ab2:	2300      	movs	r3, #0
}
 8019ab4:	4618      	mov	r0, r3
 8019ab6:	372c      	adds	r7, #44	; 0x2c
 8019ab8:	46bd      	mov	sp, r7
 8019aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019abe:	4770      	bx	lr
 8019ac0:	08022d50 	.word	0x08022d50

08019ac4 <mbedtls_md5_init>:
    (b)[(i) + 3] = (unsigned char) ( ( (n) >> 24 ) & 0xFF );    \
}
#endif

void mbedtls_md5_init( mbedtls_md5_context *ctx )
{
 8019ac4:	b580      	push	{r7, lr}
 8019ac6:	b082      	sub	sp, #8
 8019ac8:	af00      	add	r7, sp, #0
 8019aca:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_md5_context ) );
 8019acc:	2258      	movs	r2, #88	; 0x58
 8019ace:	2100      	movs	r1, #0
 8019ad0:	6878      	ldr	r0, [r7, #4]
 8019ad2:	f002 fa19 	bl	801bf08 <memset>
}
 8019ad6:	bf00      	nop
 8019ad8:	3708      	adds	r7, #8
 8019ada:	46bd      	mov	sp, r7
 8019adc:	bd80      	pop	{r7, pc}

08019ade <mbedtls_md5_free>:

void mbedtls_md5_free( mbedtls_md5_context *ctx )
{
 8019ade:	b580      	push	{r7, lr}
 8019ae0:	b082      	sub	sp, #8
 8019ae2:	af00      	add	r7, sp, #0
 8019ae4:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	d004      	beq.n	8019af6 <mbedtls_md5_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md5_context ) );
 8019aec:	2158      	movs	r1, #88	; 0x58
 8019aee:	6878      	ldr	r0, [r7, #4]
 8019af0:	f001 f85c 	bl	801abac <mbedtls_platform_zeroize>
 8019af4:	e000      	b.n	8019af8 <mbedtls_md5_free+0x1a>
        return;
 8019af6:	bf00      	nop
}
 8019af8:	3708      	adds	r7, #8
 8019afa:	46bd      	mov	sp, r7
 8019afc:	bd80      	pop	{r7, pc}
	...

08019b00 <mbedtls_md5_starts_ret>:

/*
 * MD5 context setup
 */
int mbedtls_md5_starts_ret( mbedtls_md5_context *ctx )
{
 8019b00:	b480      	push	{r7}
 8019b02:	b083      	sub	sp, #12
 8019b04:	af00      	add	r7, sp, #0
 8019b06:	6078      	str	r0, [r7, #4]
    ctx->total[0] = 0;
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	2200      	movs	r2, #0
 8019b0c:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	2200      	movs	r2, #0
 8019b12:	605a      	str	r2, [r3, #4]

    ctx->state[0] = 0x67452301;
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	4a09      	ldr	r2, [pc, #36]	; (8019b3c <mbedtls_md5_starts_ret+0x3c>)
 8019b18:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	4a08      	ldr	r2, [pc, #32]	; (8019b40 <mbedtls_md5_starts_ret+0x40>)
 8019b1e:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	4a08      	ldr	r2, [pc, #32]	; (8019b44 <mbedtls_md5_starts_ret+0x44>)
 8019b24:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	4a07      	ldr	r2, [pc, #28]	; (8019b48 <mbedtls_md5_starts_ret+0x48>)
 8019b2a:	615a      	str	r2, [r3, #20]

    return( 0 );
 8019b2c:	2300      	movs	r3, #0
}
 8019b2e:	4618      	mov	r0, r3
 8019b30:	370c      	adds	r7, #12
 8019b32:	46bd      	mov	sp, r7
 8019b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b38:	4770      	bx	lr
 8019b3a:	bf00      	nop
 8019b3c:	67452301 	.word	0x67452301
 8019b40:	efcdab89 	.word	0xefcdab89
 8019b44:	98badcfe 	.word	0x98badcfe
 8019b48:	10325476 	.word	0x10325476

08019b4c <mbedtls_internal_md5_process>:
#endif

#if !defined(MBEDTLS_MD5_PROCESS_ALT)
int mbedtls_internal_md5_process( mbedtls_md5_context *ctx,
                                  const unsigned char data[64] )
{
 8019b4c:	b480      	push	{r7}
 8019b4e:	b097      	sub	sp, #92	; 0x5c
 8019b50:	af00      	add	r7, sp, #0
 8019b52:	6078      	str	r0, [r7, #4]
 8019b54:	6039      	str	r1, [r7, #0]
    uint32_t X[16], A, B, C, D;

    GET_UINT32_LE( X[ 0], data,  0 );
 8019b56:	683b      	ldr	r3, [r7, #0]
 8019b58:	781b      	ldrb	r3, [r3, #0]
 8019b5a:	461a      	mov	r2, r3
 8019b5c:	683b      	ldr	r3, [r7, #0]
 8019b5e:	3301      	adds	r3, #1
 8019b60:	781b      	ldrb	r3, [r3, #0]
 8019b62:	021b      	lsls	r3, r3, #8
 8019b64:	431a      	orrs	r2, r3
 8019b66:	683b      	ldr	r3, [r7, #0]
 8019b68:	3302      	adds	r3, #2
 8019b6a:	781b      	ldrb	r3, [r3, #0]
 8019b6c:	041b      	lsls	r3, r3, #16
 8019b6e:	431a      	orrs	r2, r3
 8019b70:	683b      	ldr	r3, [r7, #0]
 8019b72:	3303      	adds	r3, #3
 8019b74:	781b      	ldrb	r3, [r3, #0]
 8019b76:	061b      	lsls	r3, r3, #24
 8019b78:	4313      	orrs	r3, r2
 8019b7a:	60bb      	str	r3, [r7, #8]
    GET_UINT32_LE( X[ 1], data,  4 );
 8019b7c:	683b      	ldr	r3, [r7, #0]
 8019b7e:	3304      	adds	r3, #4
 8019b80:	781b      	ldrb	r3, [r3, #0]
 8019b82:	461a      	mov	r2, r3
 8019b84:	683b      	ldr	r3, [r7, #0]
 8019b86:	3305      	adds	r3, #5
 8019b88:	781b      	ldrb	r3, [r3, #0]
 8019b8a:	021b      	lsls	r3, r3, #8
 8019b8c:	431a      	orrs	r2, r3
 8019b8e:	683b      	ldr	r3, [r7, #0]
 8019b90:	3306      	adds	r3, #6
 8019b92:	781b      	ldrb	r3, [r3, #0]
 8019b94:	041b      	lsls	r3, r3, #16
 8019b96:	431a      	orrs	r2, r3
 8019b98:	683b      	ldr	r3, [r7, #0]
 8019b9a:	3307      	adds	r3, #7
 8019b9c:	781b      	ldrb	r3, [r3, #0]
 8019b9e:	061b      	lsls	r3, r3, #24
 8019ba0:	4313      	orrs	r3, r2
 8019ba2:	60fb      	str	r3, [r7, #12]
    GET_UINT32_LE( X[ 2], data,  8 );
 8019ba4:	683b      	ldr	r3, [r7, #0]
 8019ba6:	3308      	adds	r3, #8
 8019ba8:	781b      	ldrb	r3, [r3, #0]
 8019baa:	461a      	mov	r2, r3
 8019bac:	683b      	ldr	r3, [r7, #0]
 8019bae:	3309      	adds	r3, #9
 8019bb0:	781b      	ldrb	r3, [r3, #0]
 8019bb2:	021b      	lsls	r3, r3, #8
 8019bb4:	431a      	orrs	r2, r3
 8019bb6:	683b      	ldr	r3, [r7, #0]
 8019bb8:	330a      	adds	r3, #10
 8019bba:	781b      	ldrb	r3, [r3, #0]
 8019bbc:	041b      	lsls	r3, r3, #16
 8019bbe:	431a      	orrs	r2, r3
 8019bc0:	683b      	ldr	r3, [r7, #0]
 8019bc2:	330b      	adds	r3, #11
 8019bc4:	781b      	ldrb	r3, [r3, #0]
 8019bc6:	061b      	lsls	r3, r3, #24
 8019bc8:	4313      	orrs	r3, r2
 8019bca:	613b      	str	r3, [r7, #16]
    GET_UINT32_LE( X[ 3], data, 12 );
 8019bcc:	683b      	ldr	r3, [r7, #0]
 8019bce:	330c      	adds	r3, #12
 8019bd0:	781b      	ldrb	r3, [r3, #0]
 8019bd2:	461a      	mov	r2, r3
 8019bd4:	683b      	ldr	r3, [r7, #0]
 8019bd6:	330d      	adds	r3, #13
 8019bd8:	781b      	ldrb	r3, [r3, #0]
 8019bda:	021b      	lsls	r3, r3, #8
 8019bdc:	431a      	orrs	r2, r3
 8019bde:	683b      	ldr	r3, [r7, #0]
 8019be0:	330e      	adds	r3, #14
 8019be2:	781b      	ldrb	r3, [r3, #0]
 8019be4:	041b      	lsls	r3, r3, #16
 8019be6:	431a      	orrs	r2, r3
 8019be8:	683b      	ldr	r3, [r7, #0]
 8019bea:	330f      	adds	r3, #15
 8019bec:	781b      	ldrb	r3, [r3, #0]
 8019bee:	061b      	lsls	r3, r3, #24
 8019bf0:	4313      	orrs	r3, r2
 8019bf2:	617b      	str	r3, [r7, #20]
    GET_UINT32_LE( X[ 4], data, 16 );
 8019bf4:	683b      	ldr	r3, [r7, #0]
 8019bf6:	3310      	adds	r3, #16
 8019bf8:	781b      	ldrb	r3, [r3, #0]
 8019bfa:	461a      	mov	r2, r3
 8019bfc:	683b      	ldr	r3, [r7, #0]
 8019bfe:	3311      	adds	r3, #17
 8019c00:	781b      	ldrb	r3, [r3, #0]
 8019c02:	021b      	lsls	r3, r3, #8
 8019c04:	431a      	orrs	r2, r3
 8019c06:	683b      	ldr	r3, [r7, #0]
 8019c08:	3312      	adds	r3, #18
 8019c0a:	781b      	ldrb	r3, [r3, #0]
 8019c0c:	041b      	lsls	r3, r3, #16
 8019c0e:	431a      	orrs	r2, r3
 8019c10:	683b      	ldr	r3, [r7, #0]
 8019c12:	3313      	adds	r3, #19
 8019c14:	781b      	ldrb	r3, [r3, #0]
 8019c16:	061b      	lsls	r3, r3, #24
 8019c18:	4313      	orrs	r3, r2
 8019c1a:	61bb      	str	r3, [r7, #24]
    GET_UINT32_LE( X[ 5], data, 20 );
 8019c1c:	683b      	ldr	r3, [r7, #0]
 8019c1e:	3314      	adds	r3, #20
 8019c20:	781b      	ldrb	r3, [r3, #0]
 8019c22:	461a      	mov	r2, r3
 8019c24:	683b      	ldr	r3, [r7, #0]
 8019c26:	3315      	adds	r3, #21
 8019c28:	781b      	ldrb	r3, [r3, #0]
 8019c2a:	021b      	lsls	r3, r3, #8
 8019c2c:	431a      	orrs	r2, r3
 8019c2e:	683b      	ldr	r3, [r7, #0]
 8019c30:	3316      	adds	r3, #22
 8019c32:	781b      	ldrb	r3, [r3, #0]
 8019c34:	041b      	lsls	r3, r3, #16
 8019c36:	431a      	orrs	r2, r3
 8019c38:	683b      	ldr	r3, [r7, #0]
 8019c3a:	3317      	adds	r3, #23
 8019c3c:	781b      	ldrb	r3, [r3, #0]
 8019c3e:	061b      	lsls	r3, r3, #24
 8019c40:	4313      	orrs	r3, r2
 8019c42:	61fb      	str	r3, [r7, #28]
    GET_UINT32_LE( X[ 6], data, 24 );
 8019c44:	683b      	ldr	r3, [r7, #0]
 8019c46:	3318      	adds	r3, #24
 8019c48:	781b      	ldrb	r3, [r3, #0]
 8019c4a:	461a      	mov	r2, r3
 8019c4c:	683b      	ldr	r3, [r7, #0]
 8019c4e:	3319      	adds	r3, #25
 8019c50:	781b      	ldrb	r3, [r3, #0]
 8019c52:	021b      	lsls	r3, r3, #8
 8019c54:	431a      	orrs	r2, r3
 8019c56:	683b      	ldr	r3, [r7, #0]
 8019c58:	331a      	adds	r3, #26
 8019c5a:	781b      	ldrb	r3, [r3, #0]
 8019c5c:	041b      	lsls	r3, r3, #16
 8019c5e:	431a      	orrs	r2, r3
 8019c60:	683b      	ldr	r3, [r7, #0]
 8019c62:	331b      	adds	r3, #27
 8019c64:	781b      	ldrb	r3, [r3, #0]
 8019c66:	061b      	lsls	r3, r3, #24
 8019c68:	4313      	orrs	r3, r2
 8019c6a:	623b      	str	r3, [r7, #32]
    GET_UINT32_LE( X[ 7], data, 28 );
 8019c6c:	683b      	ldr	r3, [r7, #0]
 8019c6e:	331c      	adds	r3, #28
 8019c70:	781b      	ldrb	r3, [r3, #0]
 8019c72:	461a      	mov	r2, r3
 8019c74:	683b      	ldr	r3, [r7, #0]
 8019c76:	331d      	adds	r3, #29
 8019c78:	781b      	ldrb	r3, [r3, #0]
 8019c7a:	021b      	lsls	r3, r3, #8
 8019c7c:	431a      	orrs	r2, r3
 8019c7e:	683b      	ldr	r3, [r7, #0]
 8019c80:	331e      	adds	r3, #30
 8019c82:	781b      	ldrb	r3, [r3, #0]
 8019c84:	041b      	lsls	r3, r3, #16
 8019c86:	431a      	orrs	r2, r3
 8019c88:	683b      	ldr	r3, [r7, #0]
 8019c8a:	331f      	adds	r3, #31
 8019c8c:	781b      	ldrb	r3, [r3, #0]
 8019c8e:	061b      	lsls	r3, r3, #24
 8019c90:	4313      	orrs	r3, r2
 8019c92:	627b      	str	r3, [r7, #36]	; 0x24
    GET_UINT32_LE( X[ 8], data, 32 );
 8019c94:	683b      	ldr	r3, [r7, #0]
 8019c96:	3320      	adds	r3, #32
 8019c98:	781b      	ldrb	r3, [r3, #0]
 8019c9a:	461a      	mov	r2, r3
 8019c9c:	683b      	ldr	r3, [r7, #0]
 8019c9e:	3321      	adds	r3, #33	; 0x21
 8019ca0:	781b      	ldrb	r3, [r3, #0]
 8019ca2:	021b      	lsls	r3, r3, #8
 8019ca4:	431a      	orrs	r2, r3
 8019ca6:	683b      	ldr	r3, [r7, #0]
 8019ca8:	3322      	adds	r3, #34	; 0x22
 8019caa:	781b      	ldrb	r3, [r3, #0]
 8019cac:	041b      	lsls	r3, r3, #16
 8019cae:	431a      	orrs	r2, r3
 8019cb0:	683b      	ldr	r3, [r7, #0]
 8019cb2:	3323      	adds	r3, #35	; 0x23
 8019cb4:	781b      	ldrb	r3, [r3, #0]
 8019cb6:	061b      	lsls	r3, r3, #24
 8019cb8:	4313      	orrs	r3, r2
 8019cba:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_UINT32_LE( X[ 9], data, 36 );
 8019cbc:	683b      	ldr	r3, [r7, #0]
 8019cbe:	3324      	adds	r3, #36	; 0x24
 8019cc0:	781b      	ldrb	r3, [r3, #0]
 8019cc2:	461a      	mov	r2, r3
 8019cc4:	683b      	ldr	r3, [r7, #0]
 8019cc6:	3325      	adds	r3, #37	; 0x25
 8019cc8:	781b      	ldrb	r3, [r3, #0]
 8019cca:	021b      	lsls	r3, r3, #8
 8019ccc:	431a      	orrs	r2, r3
 8019cce:	683b      	ldr	r3, [r7, #0]
 8019cd0:	3326      	adds	r3, #38	; 0x26
 8019cd2:	781b      	ldrb	r3, [r3, #0]
 8019cd4:	041b      	lsls	r3, r3, #16
 8019cd6:	431a      	orrs	r2, r3
 8019cd8:	683b      	ldr	r3, [r7, #0]
 8019cda:	3327      	adds	r3, #39	; 0x27
 8019cdc:	781b      	ldrb	r3, [r3, #0]
 8019cde:	061b      	lsls	r3, r3, #24
 8019ce0:	4313      	orrs	r3, r2
 8019ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_UINT32_LE( X[10], data, 40 );
 8019ce4:	683b      	ldr	r3, [r7, #0]
 8019ce6:	3328      	adds	r3, #40	; 0x28
 8019ce8:	781b      	ldrb	r3, [r3, #0]
 8019cea:	461a      	mov	r2, r3
 8019cec:	683b      	ldr	r3, [r7, #0]
 8019cee:	3329      	adds	r3, #41	; 0x29
 8019cf0:	781b      	ldrb	r3, [r3, #0]
 8019cf2:	021b      	lsls	r3, r3, #8
 8019cf4:	431a      	orrs	r2, r3
 8019cf6:	683b      	ldr	r3, [r7, #0]
 8019cf8:	332a      	adds	r3, #42	; 0x2a
 8019cfa:	781b      	ldrb	r3, [r3, #0]
 8019cfc:	041b      	lsls	r3, r3, #16
 8019cfe:	431a      	orrs	r2, r3
 8019d00:	683b      	ldr	r3, [r7, #0]
 8019d02:	332b      	adds	r3, #43	; 0x2b
 8019d04:	781b      	ldrb	r3, [r3, #0]
 8019d06:	061b      	lsls	r3, r3, #24
 8019d08:	4313      	orrs	r3, r2
 8019d0a:	633b      	str	r3, [r7, #48]	; 0x30
    GET_UINT32_LE( X[11], data, 44 );
 8019d0c:	683b      	ldr	r3, [r7, #0]
 8019d0e:	332c      	adds	r3, #44	; 0x2c
 8019d10:	781b      	ldrb	r3, [r3, #0]
 8019d12:	461a      	mov	r2, r3
 8019d14:	683b      	ldr	r3, [r7, #0]
 8019d16:	332d      	adds	r3, #45	; 0x2d
 8019d18:	781b      	ldrb	r3, [r3, #0]
 8019d1a:	021b      	lsls	r3, r3, #8
 8019d1c:	431a      	orrs	r2, r3
 8019d1e:	683b      	ldr	r3, [r7, #0]
 8019d20:	332e      	adds	r3, #46	; 0x2e
 8019d22:	781b      	ldrb	r3, [r3, #0]
 8019d24:	041b      	lsls	r3, r3, #16
 8019d26:	431a      	orrs	r2, r3
 8019d28:	683b      	ldr	r3, [r7, #0]
 8019d2a:	332f      	adds	r3, #47	; 0x2f
 8019d2c:	781b      	ldrb	r3, [r3, #0]
 8019d2e:	061b      	lsls	r3, r3, #24
 8019d30:	4313      	orrs	r3, r2
 8019d32:	637b      	str	r3, [r7, #52]	; 0x34
    GET_UINT32_LE( X[12], data, 48 );
 8019d34:	683b      	ldr	r3, [r7, #0]
 8019d36:	3330      	adds	r3, #48	; 0x30
 8019d38:	781b      	ldrb	r3, [r3, #0]
 8019d3a:	461a      	mov	r2, r3
 8019d3c:	683b      	ldr	r3, [r7, #0]
 8019d3e:	3331      	adds	r3, #49	; 0x31
 8019d40:	781b      	ldrb	r3, [r3, #0]
 8019d42:	021b      	lsls	r3, r3, #8
 8019d44:	431a      	orrs	r2, r3
 8019d46:	683b      	ldr	r3, [r7, #0]
 8019d48:	3332      	adds	r3, #50	; 0x32
 8019d4a:	781b      	ldrb	r3, [r3, #0]
 8019d4c:	041b      	lsls	r3, r3, #16
 8019d4e:	431a      	orrs	r2, r3
 8019d50:	683b      	ldr	r3, [r7, #0]
 8019d52:	3333      	adds	r3, #51	; 0x33
 8019d54:	781b      	ldrb	r3, [r3, #0]
 8019d56:	061b      	lsls	r3, r3, #24
 8019d58:	4313      	orrs	r3, r2
 8019d5a:	63bb      	str	r3, [r7, #56]	; 0x38
    GET_UINT32_LE( X[13], data, 52 );
 8019d5c:	683b      	ldr	r3, [r7, #0]
 8019d5e:	3334      	adds	r3, #52	; 0x34
 8019d60:	781b      	ldrb	r3, [r3, #0]
 8019d62:	461a      	mov	r2, r3
 8019d64:	683b      	ldr	r3, [r7, #0]
 8019d66:	3335      	adds	r3, #53	; 0x35
 8019d68:	781b      	ldrb	r3, [r3, #0]
 8019d6a:	021b      	lsls	r3, r3, #8
 8019d6c:	431a      	orrs	r2, r3
 8019d6e:	683b      	ldr	r3, [r7, #0]
 8019d70:	3336      	adds	r3, #54	; 0x36
 8019d72:	781b      	ldrb	r3, [r3, #0]
 8019d74:	041b      	lsls	r3, r3, #16
 8019d76:	431a      	orrs	r2, r3
 8019d78:	683b      	ldr	r3, [r7, #0]
 8019d7a:	3337      	adds	r3, #55	; 0x37
 8019d7c:	781b      	ldrb	r3, [r3, #0]
 8019d7e:	061b      	lsls	r3, r3, #24
 8019d80:	4313      	orrs	r3, r2
 8019d82:	63fb      	str	r3, [r7, #60]	; 0x3c
    GET_UINT32_LE( X[14], data, 56 );
 8019d84:	683b      	ldr	r3, [r7, #0]
 8019d86:	3338      	adds	r3, #56	; 0x38
 8019d88:	781b      	ldrb	r3, [r3, #0]
 8019d8a:	461a      	mov	r2, r3
 8019d8c:	683b      	ldr	r3, [r7, #0]
 8019d8e:	3339      	adds	r3, #57	; 0x39
 8019d90:	781b      	ldrb	r3, [r3, #0]
 8019d92:	021b      	lsls	r3, r3, #8
 8019d94:	431a      	orrs	r2, r3
 8019d96:	683b      	ldr	r3, [r7, #0]
 8019d98:	333a      	adds	r3, #58	; 0x3a
 8019d9a:	781b      	ldrb	r3, [r3, #0]
 8019d9c:	041b      	lsls	r3, r3, #16
 8019d9e:	431a      	orrs	r2, r3
 8019da0:	683b      	ldr	r3, [r7, #0]
 8019da2:	333b      	adds	r3, #59	; 0x3b
 8019da4:	781b      	ldrb	r3, [r3, #0]
 8019da6:	061b      	lsls	r3, r3, #24
 8019da8:	4313      	orrs	r3, r2
 8019daa:	643b      	str	r3, [r7, #64]	; 0x40
    GET_UINT32_LE( X[15], data, 60 );
 8019dac:	683b      	ldr	r3, [r7, #0]
 8019dae:	333c      	adds	r3, #60	; 0x3c
 8019db0:	781b      	ldrb	r3, [r3, #0]
 8019db2:	461a      	mov	r2, r3
 8019db4:	683b      	ldr	r3, [r7, #0]
 8019db6:	333d      	adds	r3, #61	; 0x3d
 8019db8:	781b      	ldrb	r3, [r3, #0]
 8019dba:	021b      	lsls	r3, r3, #8
 8019dbc:	431a      	orrs	r2, r3
 8019dbe:	683b      	ldr	r3, [r7, #0]
 8019dc0:	333e      	adds	r3, #62	; 0x3e
 8019dc2:	781b      	ldrb	r3, [r3, #0]
 8019dc4:	041b      	lsls	r3, r3, #16
 8019dc6:	431a      	orrs	r2, r3
 8019dc8:	683b      	ldr	r3, [r7, #0]
 8019dca:	333f      	adds	r3, #63	; 0x3f
 8019dcc:	781b      	ldrb	r3, [r3, #0]
 8019dce:	061b      	lsls	r3, r3, #24
 8019dd0:	4313      	orrs	r3, r2
 8019dd2:	647b      	str	r3, [r7, #68]	; 0x44
    {                                                           \
        (a) += F((b),(c),(d)) + X[(k)] + (t);                   \
        (a) = S((a),(s)) + (b);                                 \
    } while( 0 )

    A = ctx->state[0];
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	689b      	ldr	r3, [r3, #8]
 8019dd8:	657b      	str	r3, [r7, #84]	; 0x54
    B = ctx->state[1];
 8019dda:	687b      	ldr	r3, [r7, #4]
 8019ddc:	68db      	ldr	r3, [r3, #12]
 8019dde:	653b      	str	r3, [r7, #80]	; 0x50
    C = ctx->state[2];
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	691b      	ldr	r3, [r3, #16]
 8019de4:	64fb      	str	r3, [r7, #76]	; 0x4c
    D = ctx->state[3];
 8019de6:	687b      	ldr	r3, [r7, #4]
 8019de8:	695b      	ldr	r3, [r3, #20]
 8019dea:	64bb      	str	r3, [r7, #72]	; 0x48

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))

    P( A, B, C, D,  0,  7, 0xD76AA478 );
 8019dec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019df0:	405a      	eors	r2, r3
 8019df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019df4:	401a      	ands	r2, r3
 8019df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019df8:	405a      	eors	r2, r3
 8019dfa:	68bb      	ldr	r3, [r7, #8]
 8019dfc:	441a      	add	r2, r3
 8019dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019e00:	441a      	add	r2, r3
 8019e02:	4ba5      	ldr	r3, [pc, #660]	; (801a098 <mbedtls_internal_md5_process+0x54c>)
 8019e04:	4413      	add	r3, r2
 8019e06:	657b      	str	r3, [r7, #84]	; 0x54
 8019e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019e0a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8019e0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019e10:	4413      	add	r3, r2
 8019e12:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  1, 12, 0xE8C7B756 );
 8019e14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019e18:	405a      	eors	r2, r3
 8019e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019e1c:	401a      	ands	r2, r3
 8019e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019e20:	405a      	eors	r2, r3
 8019e22:	68fb      	ldr	r3, [r7, #12]
 8019e24:	441a      	add	r2, r3
 8019e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019e28:	441a      	add	r2, r3
 8019e2a:	4b9c      	ldr	r3, [pc, #624]	; (801a09c <mbedtls_internal_md5_process+0x550>)
 8019e2c:	4413      	add	r3, r2
 8019e2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8019e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019e32:	ea4f 5333 	mov.w	r3, r3, ror #20
 8019e36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019e38:	4413      	add	r3, r2
 8019e3a:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  2, 17, 0x242070DB );
 8019e3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019e40:	405a      	eors	r2, r3
 8019e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019e44:	401a      	ands	r2, r3
 8019e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019e48:	405a      	eors	r2, r3
 8019e4a:	693b      	ldr	r3, [r7, #16]
 8019e4c:	441a      	add	r2, r3
 8019e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019e50:	441a      	add	r2, r3
 8019e52:	4b93      	ldr	r3, [pc, #588]	; (801a0a0 <mbedtls_internal_md5_process+0x554>)
 8019e54:	4413      	add	r3, r2
 8019e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019e5a:	ea4f 33f3 	mov.w	r3, r3, ror #15
 8019e5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019e60:	4413      	add	r3, r2
 8019e62:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  3, 22, 0xC1BDCEEE );
 8019e64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019e68:	405a      	eors	r2, r3
 8019e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019e6c:	401a      	ands	r2, r3
 8019e6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019e70:	405a      	eors	r2, r3
 8019e72:	697b      	ldr	r3, [r7, #20]
 8019e74:	441a      	add	r2, r3
 8019e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019e78:	441a      	add	r2, r3
 8019e7a:	4b8a      	ldr	r3, [pc, #552]	; (801a0a4 <mbedtls_internal_md5_process+0x558>)
 8019e7c:	4413      	add	r3, r2
 8019e7e:	653b      	str	r3, [r7, #80]	; 0x50
 8019e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019e82:	ea4f 23b3 	mov.w	r3, r3, ror #10
 8019e86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019e88:	4413      	add	r3, r2
 8019e8a:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  4,  7, 0xF57C0FAF );
 8019e8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019e90:	405a      	eors	r2, r3
 8019e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019e94:	401a      	ands	r2, r3
 8019e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019e98:	405a      	eors	r2, r3
 8019e9a:	69bb      	ldr	r3, [r7, #24]
 8019e9c:	441a      	add	r2, r3
 8019e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019ea0:	441a      	add	r2, r3
 8019ea2:	4b81      	ldr	r3, [pc, #516]	; (801a0a8 <mbedtls_internal_md5_process+0x55c>)
 8019ea4:	4413      	add	r3, r2
 8019ea6:	657b      	str	r3, [r7, #84]	; 0x54
 8019ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019eaa:	ea4f 6373 	mov.w	r3, r3, ror #25
 8019eae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019eb0:	4413      	add	r3, r2
 8019eb2:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  5, 12, 0x4787C62A );
 8019eb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019eb8:	405a      	eors	r2, r3
 8019eba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019ebc:	401a      	ands	r2, r3
 8019ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019ec0:	405a      	eors	r2, r3
 8019ec2:	69fb      	ldr	r3, [r7, #28]
 8019ec4:	441a      	add	r2, r3
 8019ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019ec8:	441a      	add	r2, r3
 8019eca:	4b78      	ldr	r3, [pc, #480]	; (801a0ac <mbedtls_internal_md5_process+0x560>)
 8019ecc:	4413      	add	r3, r2
 8019ece:	64bb      	str	r3, [r7, #72]	; 0x48
 8019ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019ed2:	ea4f 5333 	mov.w	r3, r3, ror #20
 8019ed6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019ed8:	4413      	add	r3, r2
 8019eda:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  6, 17, 0xA8304613 );
 8019edc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019ee0:	405a      	eors	r2, r3
 8019ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019ee4:	401a      	ands	r2, r3
 8019ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019ee8:	405a      	eors	r2, r3
 8019eea:	6a3b      	ldr	r3, [r7, #32]
 8019eec:	441a      	add	r2, r3
 8019eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019ef0:	441a      	add	r2, r3
 8019ef2:	4b6f      	ldr	r3, [pc, #444]	; (801a0b0 <mbedtls_internal_md5_process+0x564>)
 8019ef4:	4413      	add	r3, r2
 8019ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019efa:	ea4f 33f3 	mov.w	r3, r3, ror #15
 8019efe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019f00:	4413      	add	r3, r2
 8019f02:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  7, 22, 0xFD469501 );
 8019f04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019f06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019f08:	405a      	eors	r2, r3
 8019f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019f0c:	401a      	ands	r2, r3
 8019f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019f10:	405a      	eors	r2, r3
 8019f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f14:	441a      	add	r2, r3
 8019f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019f18:	441a      	add	r2, r3
 8019f1a:	4b66      	ldr	r3, [pc, #408]	; (801a0b4 <mbedtls_internal_md5_process+0x568>)
 8019f1c:	4413      	add	r3, r2
 8019f1e:	653b      	str	r3, [r7, #80]	; 0x50
 8019f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019f22:	ea4f 23b3 	mov.w	r3, r3, ror #10
 8019f26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019f28:	4413      	add	r3, r2
 8019f2a:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  8,  7, 0x698098D8 );
 8019f2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019f30:	405a      	eors	r2, r3
 8019f32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019f34:	401a      	ands	r2, r3
 8019f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019f38:	405a      	eors	r2, r3
 8019f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f3c:	441a      	add	r2, r3
 8019f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019f40:	441a      	add	r2, r3
 8019f42:	4b5d      	ldr	r3, [pc, #372]	; (801a0b8 <mbedtls_internal_md5_process+0x56c>)
 8019f44:	4413      	add	r3, r2
 8019f46:	657b      	str	r3, [r7, #84]	; 0x54
 8019f48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019f4a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8019f4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019f50:	4413      	add	r3, r2
 8019f52:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  9, 12, 0x8B44F7AF );
 8019f54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019f58:	405a      	eors	r2, r3
 8019f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019f5c:	401a      	ands	r2, r3
 8019f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019f60:	405a      	eors	r2, r3
 8019f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f64:	441a      	add	r2, r3
 8019f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019f68:	441a      	add	r2, r3
 8019f6a:	4b54      	ldr	r3, [pc, #336]	; (801a0bc <mbedtls_internal_md5_process+0x570>)
 8019f6c:	4413      	add	r3, r2
 8019f6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8019f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019f72:	ea4f 5333 	mov.w	r3, r3, ror #20
 8019f76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019f78:	4413      	add	r3, r2
 8019f7a:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 10, 17, 0xFFFF5BB1 );
 8019f7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019f80:	405a      	eors	r2, r3
 8019f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019f84:	401a      	ands	r2, r3
 8019f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019f88:	405a      	eors	r2, r3
 8019f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f8c:	441a      	add	r2, r3
 8019f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019f90:	4413      	add	r3, r2
 8019f92:	f5a3 4324 	sub.w	r3, r3, #41984	; 0xa400
 8019f96:	3b4f      	subs	r3, #79	; 0x4f
 8019f98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019f9c:	ea4f 33f3 	mov.w	r3, r3, ror #15
 8019fa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019fa2:	4413      	add	r3, r2
 8019fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 11, 22, 0x895CD7BE );
 8019fa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019faa:	405a      	eors	r2, r3
 8019fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019fae:	401a      	ands	r2, r3
 8019fb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019fb2:	405a      	eors	r2, r3
 8019fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019fb6:	441a      	add	r2, r3
 8019fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019fba:	441a      	add	r2, r3
 8019fbc:	4b40      	ldr	r3, [pc, #256]	; (801a0c0 <mbedtls_internal_md5_process+0x574>)
 8019fbe:	4413      	add	r3, r2
 8019fc0:	653b      	str	r3, [r7, #80]	; 0x50
 8019fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019fc4:	ea4f 23b3 	mov.w	r3, r3, ror #10
 8019fc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019fca:	4413      	add	r3, r2
 8019fcc:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 12,  7, 0x6B901122 );
 8019fce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019fd2:	405a      	eors	r2, r3
 8019fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019fd6:	401a      	ands	r2, r3
 8019fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019fda:	405a      	eors	r2, r3
 8019fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019fde:	441a      	add	r2, r3
 8019fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019fe2:	441a      	add	r2, r3
 8019fe4:	4b37      	ldr	r3, [pc, #220]	; (801a0c4 <mbedtls_internal_md5_process+0x578>)
 8019fe6:	4413      	add	r3, r2
 8019fe8:	657b      	str	r3, [r7, #84]	; 0x54
 8019fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019fec:	ea4f 6373 	mov.w	r3, r3, ror #25
 8019ff0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019ff2:	4413      	add	r3, r2
 8019ff4:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 13, 12, 0xFD987193 );
 8019ff6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019ffa:	405a      	eors	r2, r3
 8019ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019ffe:	401a      	ands	r2, r3
 801a000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a002:	405a      	eors	r2, r3
 801a004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a006:	441a      	add	r2, r3
 801a008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a00a:	441a      	add	r2, r3
 801a00c:	4b2e      	ldr	r3, [pc, #184]	; (801a0c8 <mbedtls_internal_md5_process+0x57c>)
 801a00e:	4413      	add	r3, r2
 801a010:	64bb      	str	r3, [r7, #72]	; 0x48
 801a012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a014:	ea4f 5333 	mov.w	r3, r3, ror #20
 801a018:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a01a:	4413      	add	r3, r2
 801a01c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 14, 17, 0xA679438E );
 801a01e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a022:	405a      	eors	r2, r3
 801a024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a026:	401a      	ands	r2, r3
 801a028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a02a:	405a      	eors	r2, r3
 801a02c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a02e:	441a      	add	r2, r3
 801a030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a032:	441a      	add	r2, r3
 801a034:	4b25      	ldr	r3, [pc, #148]	; (801a0cc <mbedtls_internal_md5_process+0x580>)
 801a036:	4413      	add	r3, r2
 801a038:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a03a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a03c:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801a040:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a042:	4413      	add	r3, r2
 801a044:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 15, 22, 0x49B40821 );
 801a046:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a04a:	405a      	eors	r2, r3
 801a04c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a04e:	401a      	ands	r2, r3
 801a050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a052:	405a      	eors	r2, r3
 801a054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a056:	441a      	add	r2, r3
 801a058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a05a:	441a      	add	r2, r3
 801a05c:	4b1c      	ldr	r3, [pc, #112]	; (801a0d0 <mbedtls_internal_md5_process+0x584>)
 801a05e:	4413      	add	r3, r2
 801a060:	653b      	str	r3, [r7, #80]	; 0x50
 801a062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a064:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801a068:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a06a:	4413      	add	r3, r2
 801a06c:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) ((y) ^ ((z) & ((x) ^ (y))))

    P( A, B, C, D,  1,  5, 0xF61E2562 );
 801a06e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a072:	405a      	eors	r2, r3
 801a074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a076:	401a      	ands	r2, r3
 801a078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a07a:	405a      	eors	r2, r3
 801a07c:	68fb      	ldr	r3, [r7, #12]
 801a07e:	441a      	add	r2, r3
 801a080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a082:	441a      	add	r2, r3
 801a084:	4b13      	ldr	r3, [pc, #76]	; (801a0d4 <mbedtls_internal_md5_process+0x588>)
 801a086:	4413      	add	r3, r2
 801a088:	657b      	str	r3, [r7, #84]	; 0x54
 801a08a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a08c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801a090:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a092:	4413      	add	r3, r2
 801a094:	e020      	b.n	801a0d8 <mbedtls_internal_md5_process+0x58c>
 801a096:	bf00      	nop
 801a098:	d76aa478 	.word	0xd76aa478
 801a09c:	e8c7b756 	.word	0xe8c7b756
 801a0a0:	242070db 	.word	0x242070db
 801a0a4:	c1bdceee 	.word	0xc1bdceee
 801a0a8:	f57c0faf 	.word	0xf57c0faf
 801a0ac:	4787c62a 	.word	0x4787c62a
 801a0b0:	a8304613 	.word	0xa8304613
 801a0b4:	fd469501 	.word	0xfd469501
 801a0b8:	698098d8 	.word	0x698098d8
 801a0bc:	8b44f7af 	.word	0x8b44f7af
 801a0c0:	895cd7be 	.word	0x895cd7be
 801a0c4:	6b901122 	.word	0x6b901122
 801a0c8:	fd987193 	.word	0xfd987193
 801a0cc:	a679438e 	.word	0xa679438e
 801a0d0:	49b40821 	.word	0x49b40821
 801a0d4:	f61e2562 	.word	0xf61e2562
 801a0d8:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  6,  9, 0xC040B340 );
 801a0da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a0dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a0de:	405a      	eors	r2, r3
 801a0e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a0e2:	401a      	ands	r2, r3
 801a0e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a0e6:	405a      	eors	r2, r3
 801a0e8:	6a3b      	ldr	r3, [r7, #32]
 801a0ea:	441a      	add	r2, r3
 801a0ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a0ee:	441a      	add	r2, r3
 801a0f0:	4ba4      	ldr	r3, [pc, #656]	; (801a384 <mbedtls_internal_md5_process+0x838>)
 801a0f2:	4413      	add	r3, r2
 801a0f4:	64bb      	str	r3, [r7, #72]	; 0x48
 801a0f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a0f8:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801a0fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a0fe:	4413      	add	r3, r2
 801a100:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 11, 14, 0x265E5A51 );
 801a102:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a106:	405a      	eors	r2, r3
 801a108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a10a:	401a      	ands	r2, r3
 801a10c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a10e:	405a      	eors	r2, r3
 801a110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a112:	441a      	add	r2, r3
 801a114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a116:	441a      	add	r2, r3
 801a118:	4b9b      	ldr	r3, [pc, #620]	; (801a388 <mbedtls_internal_md5_process+0x83c>)
 801a11a:	4413      	add	r3, r2
 801a11c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a11e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a120:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801a124:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a126:	4413      	add	r3, r2
 801a128:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  0, 20, 0xE9B6C7AA );
 801a12a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a12c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a12e:	405a      	eors	r2, r3
 801a130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a132:	401a      	ands	r2, r3
 801a134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a136:	405a      	eors	r2, r3
 801a138:	68bb      	ldr	r3, [r7, #8]
 801a13a:	441a      	add	r2, r3
 801a13c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a13e:	441a      	add	r2, r3
 801a140:	4b92      	ldr	r3, [pc, #584]	; (801a38c <mbedtls_internal_md5_process+0x840>)
 801a142:	4413      	add	r3, r2
 801a144:	653b      	str	r3, [r7, #80]	; 0x50
 801a146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a148:	ea4f 3333 	mov.w	r3, r3, ror #12
 801a14c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a14e:	4413      	add	r3, r2
 801a150:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  5,  5, 0xD62F105D );
 801a152:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a156:	405a      	eors	r2, r3
 801a158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a15a:	401a      	ands	r2, r3
 801a15c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a15e:	405a      	eors	r2, r3
 801a160:	69fb      	ldr	r3, [r7, #28]
 801a162:	441a      	add	r2, r3
 801a164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a166:	441a      	add	r2, r3
 801a168:	4b89      	ldr	r3, [pc, #548]	; (801a390 <mbedtls_internal_md5_process+0x844>)
 801a16a:	4413      	add	r3, r2
 801a16c:	657b      	str	r3, [r7, #84]	; 0x54
 801a16e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a170:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801a174:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a176:	4413      	add	r3, r2
 801a178:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 10,  9, 0x02441453 );
 801a17a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a17c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a17e:	405a      	eors	r2, r3
 801a180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a182:	401a      	ands	r2, r3
 801a184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a186:	405a      	eors	r2, r3
 801a188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a18a:	441a      	add	r2, r3
 801a18c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a18e:	441a      	add	r2, r3
 801a190:	4b80      	ldr	r3, [pc, #512]	; (801a394 <mbedtls_internal_md5_process+0x848>)
 801a192:	4413      	add	r3, r2
 801a194:	64bb      	str	r3, [r7, #72]	; 0x48
 801a196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a198:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801a19c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a19e:	4413      	add	r3, r2
 801a1a0:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 15, 14, 0xD8A1E681 );
 801a1a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a1a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a1a6:	405a      	eors	r2, r3
 801a1a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a1aa:	401a      	ands	r2, r3
 801a1ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a1ae:	405a      	eors	r2, r3
 801a1b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a1b2:	441a      	add	r2, r3
 801a1b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a1b6:	441a      	add	r2, r3
 801a1b8:	4b77      	ldr	r3, [pc, #476]	; (801a398 <mbedtls_internal_md5_process+0x84c>)
 801a1ba:	4413      	add	r3, r2
 801a1bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a1be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a1c0:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801a1c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a1c6:	4413      	add	r3, r2
 801a1c8:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  4, 20, 0xE7D3FBC8 );
 801a1ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a1cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a1ce:	405a      	eors	r2, r3
 801a1d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a1d2:	401a      	ands	r2, r3
 801a1d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a1d6:	405a      	eors	r2, r3
 801a1d8:	69bb      	ldr	r3, [r7, #24]
 801a1da:	441a      	add	r2, r3
 801a1dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a1de:	441a      	add	r2, r3
 801a1e0:	4b6e      	ldr	r3, [pc, #440]	; (801a39c <mbedtls_internal_md5_process+0x850>)
 801a1e2:	4413      	add	r3, r2
 801a1e4:	653b      	str	r3, [r7, #80]	; 0x50
 801a1e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a1e8:	ea4f 3333 	mov.w	r3, r3, ror #12
 801a1ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a1ee:	4413      	add	r3, r2
 801a1f0:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  9,  5, 0x21E1CDE6 );
 801a1f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a1f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a1f6:	405a      	eors	r2, r3
 801a1f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a1fa:	401a      	ands	r2, r3
 801a1fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a1fe:	405a      	eors	r2, r3
 801a200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a202:	441a      	add	r2, r3
 801a204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a206:	441a      	add	r2, r3
 801a208:	4b65      	ldr	r3, [pc, #404]	; (801a3a0 <mbedtls_internal_md5_process+0x854>)
 801a20a:	4413      	add	r3, r2
 801a20c:	657b      	str	r3, [r7, #84]	; 0x54
 801a20e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a210:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801a214:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a216:	4413      	add	r3, r2
 801a218:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 14,  9, 0xC33707D6 );
 801a21a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a21c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a21e:	405a      	eors	r2, r3
 801a220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a222:	401a      	ands	r2, r3
 801a224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a226:	405a      	eors	r2, r3
 801a228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a22a:	441a      	add	r2, r3
 801a22c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a22e:	441a      	add	r2, r3
 801a230:	4b5c      	ldr	r3, [pc, #368]	; (801a3a4 <mbedtls_internal_md5_process+0x858>)
 801a232:	4413      	add	r3, r2
 801a234:	64bb      	str	r3, [r7, #72]	; 0x48
 801a236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a238:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801a23c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a23e:	4413      	add	r3, r2
 801a240:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  3, 14, 0xF4D50D87 );
 801a242:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a246:	405a      	eors	r2, r3
 801a248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a24a:	401a      	ands	r2, r3
 801a24c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a24e:	405a      	eors	r2, r3
 801a250:	697b      	ldr	r3, [r7, #20]
 801a252:	441a      	add	r2, r3
 801a254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a256:	441a      	add	r2, r3
 801a258:	4b53      	ldr	r3, [pc, #332]	; (801a3a8 <mbedtls_internal_md5_process+0x85c>)
 801a25a:	4413      	add	r3, r2
 801a25c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a25e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a260:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801a264:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a266:	4413      	add	r3, r2
 801a268:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  8, 20, 0x455A14ED );
 801a26a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a26c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a26e:	405a      	eors	r2, r3
 801a270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a272:	401a      	ands	r2, r3
 801a274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a276:	405a      	eors	r2, r3
 801a278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a27a:	441a      	add	r2, r3
 801a27c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a27e:	441a      	add	r2, r3
 801a280:	4b4a      	ldr	r3, [pc, #296]	; (801a3ac <mbedtls_internal_md5_process+0x860>)
 801a282:	4413      	add	r3, r2
 801a284:	653b      	str	r3, [r7, #80]	; 0x50
 801a286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a288:	ea4f 3333 	mov.w	r3, r3, ror #12
 801a28c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a28e:	4413      	add	r3, r2
 801a290:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 13,  5, 0xA9E3E905 );
 801a292:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a296:	405a      	eors	r2, r3
 801a298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a29a:	401a      	ands	r2, r3
 801a29c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a29e:	405a      	eors	r2, r3
 801a2a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a2a2:	441a      	add	r2, r3
 801a2a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a2a6:	441a      	add	r2, r3
 801a2a8:	4b41      	ldr	r3, [pc, #260]	; (801a3b0 <mbedtls_internal_md5_process+0x864>)
 801a2aa:	4413      	add	r3, r2
 801a2ac:	657b      	str	r3, [r7, #84]	; 0x54
 801a2ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a2b0:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801a2b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a2b6:	4413      	add	r3, r2
 801a2b8:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  2,  9, 0xFCEFA3F8 );
 801a2ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a2bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a2be:	405a      	eors	r2, r3
 801a2c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a2c2:	401a      	ands	r2, r3
 801a2c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a2c6:	405a      	eors	r2, r3
 801a2c8:	693b      	ldr	r3, [r7, #16]
 801a2ca:	441a      	add	r2, r3
 801a2cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a2ce:	441a      	add	r2, r3
 801a2d0:	4b38      	ldr	r3, [pc, #224]	; (801a3b4 <mbedtls_internal_md5_process+0x868>)
 801a2d2:	4413      	add	r3, r2
 801a2d4:	64bb      	str	r3, [r7, #72]	; 0x48
 801a2d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a2d8:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801a2dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a2de:	4413      	add	r3, r2
 801a2e0:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  7, 14, 0x676F02D9 );
 801a2e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a2e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a2e6:	405a      	eors	r2, r3
 801a2e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a2ea:	401a      	ands	r2, r3
 801a2ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a2ee:	405a      	eors	r2, r3
 801a2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2f2:	441a      	add	r2, r3
 801a2f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a2f6:	441a      	add	r2, r3
 801a2f8:	4b2f      	ldr	r3, [pc, #188]	; (801a3b8 <mbedtls_internal_md5_process+0x86c>)
 801a2fa:	4413      	add	r3, r2
 801a2fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a2fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a300:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801a304:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a306:	4413      	add	r3, r2
 801a308:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 12, 20, 0x8D2A4C8A );
 801a30a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a30c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a30e:	405a      	eors	r2, r3
 801a310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a312:	401a      	ands	r2, r3
 801a314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a316:	405a      	eors	r2, r3
 801a318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a31a:	441a      	add	r2, r3
 801a31c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a31e:	441a      	add	r2, r3
 801a320:	4b26      	ldr	r3, [pc, #152]	; (801a3bc <mbedtls_internal_md5_process+0x870>)
 801a322:	4413      	add	r3, r2
 801a324:	653b      	str	r3, [r7, #80]	; 0x50
 801a326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a328:	ea4f 3333 	mov.w	r3, r3, ror #12
 801a32c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a32e:	4413      	add	r3, r2
 801a330:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))

    P( A, B, C, D,  5,  4, 0xFFFA3942 );
 801a332:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a336:	405a      	eors	r2, r3
 801a338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a33a:	405a      	eors	r2, r3
 801a33c:	69fb      	ldr	r3, [r7, #28]
 801a33e:	441a      	add	r2, r3
 801a340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a342:	4413      	add	r3, r2
 801a344:	f5a3 23b8 	sub.w	r3, r3, #376832	; 0x5c000
 801a348:	f2a3 63be 	subw	r3, r3, #1726	; 0x6be
 801a34c:	657b      	str	r3, [r7, #84]	; 0x54
 801a34e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a350:	ea4f 7333 	mov.w	r3, r3, ror #28
 801a354:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a356:	4413      	add	r3, r2
 801a358:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  8, 11, 0x8771F681 );
 801a35a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a35c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a35e:	405a      	eors	r2, r3
 801a360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a362:	405a      	eors	r2, r3
 801a364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a366:	441a      	add	r2, r3
 801a368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a36a:	441a      	add	r2, r3
 801a36c:	4b14      	ldr	r3, [pc, #80]	; (801a3c0 <mbedtls_internal_md5_process+0x874>)
 801a36e:	4413      	add	r3, r2
 801a370:	64bb      	str	r3, [r7, #72]	; 0x48
 801a372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a374:	ea4f 5373 	mov.w	r3, r3, ror #21
 801a378:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a37a:	4413      	add	r3, r2
 801a37c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 11, 16, 0x6D9D6122 );
 801a37e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a380:	e020      	b.n	801a3c4 <mbedtls_internal_md5_process+0x878>
 801a382:	bf00      	nop
 801a384:	c040b340 	.word	0xc040b340
 801a388:	265e5a51 	.word	0x265e5a51
 801a38c:	e9b6c7aa 	.word	0xe9b6c7aa
 801a390:	d62f105d 	.word	0xd62f105d
 801a394:	02441453 	.word	0x02441453
 801a398:	d8a1e681 	.word	0xd8a1e681
 801a39c:	e7d3fbc8 	.word	0xe7d3fbc8
 801a3a0:	21e1cde6 	.word	0x21e1cde6
 801a3a4:	c33707d6 	.word	0xc33707d6
 801a3a8:	f4d50d87 	.word	0xf4d50d87
 801a3ac:	455a14ed 	.word	0x455a14ed
 801a3b0:	a9e3e905 	.word	0xa9e3e905
 801a3b4:	fcefa3f8 	.word	0xfcefa3f8
 801a3b8:	676f02d9 	.word	0x676f02d9
 801a3bc:	8d2a4c8a 	.word	0x8d2a4c8a
 801a3c0:	8771f681 	.word	0x8771f681
 801a3c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a3c6:	405a      	eors	r2, r3
 801a3c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3ca:	405a      	eors	r2, r3
 801a3cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3ce:	441a      	add	r2, r3
 801a3d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a3d2:	441a      	add	r2, r3
 801a3d4:	4ba4      	ldr	r3, [pc, #656]	; (801a668 <mbedtls_internal_md5_process+0xb1c>)
 801a3d6:	4413      	add	r3, r2
 801a3d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a3da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a3dc:	ea4f 4333 	mov.w	r3, r3, ror #16
 801a3e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a3e2:	4413      	add	r3, r2
 801a3e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 14, 23, 0xFDE5380C );
 801a3e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a3e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a3ea:	405a      	eors	r2, r3
 801a3ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a3ee:	405a      	eors	r2, r3
 801a3f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a3f2:	441a      	add	r2, r3
 801a3f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a3f6:	441a      	add	r2, r3
 801a3f8:	4b9c      	ldr	r3, [pc, #624]	; (801a66c <mbedtls_internal_md5_process+0xb20>)
 801a3fa:	4413      	add	r3, r2
 801a3fc:	653b      	str	r3, [r7, #80]	; 0x50
 801a3fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a400:	ea4f 2373 	mov.w	r3, r3, ror #9
 801a404:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a406:	4413      	add	r3, r2
 801a408:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  1,  4, 0xA4BEEA44 );
 801a40a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a40c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a40e:	405a      	eors	r2, r3
 801a410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a412:	405a      	eors	r2, r3
 801a414:	68fb      	ldr	r3, [r7, #12]
 801a416:	441a      	add	r2, r3
 801a418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a41a:	441a      	add	r2, r3
 801a41c:	4b94      	ldr	r3, [pc, #592]	; (801a670 <mbedtls_internal_md5_process+0xb24>)
 801a41e:	4413      	add	r3, r2
 801a420:	657b      	str	r3, [r7, #84]	; 0x54
 801a422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a424:	ea4f 7333 	mov.w	r3, r3, ror #28
 801a428:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a42a:	4413      	add	r3, r2
 801a42c:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  4, 11, 0x4BDECFA9 );
 801a42e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a432:	405a      	eors	r2, r3
 801a434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a436:	405a      	eors	r2, r3
 801a438:	69bb      	ldr	r3, [r7, #24]
 801a43a:	441a      	add	r2, r3
 801a43c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a43e:	441a      	add	r2, r3
 801a440:	4b8c      	ldr	r3, [pc, #560]	; (801a674 <mbedtls_internal_md5_process+0xb28>)
 801a442:	4413      	add	r3, r2
 801a444:	64bb      	str	r3, [r7, #72]	; 0x48
 801a446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a448:	ea4f 5373 	mov.w	r3, r3, ror #21
 801a44c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a44e:	4413      	add	r3, r2
 801a450:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  7, 16, 0xF6BB4B60 );
 801a452:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a454:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a456:	405a      	eors	r2, r3
 801a458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a45a:	405a      	eors	r2, r3
 801a45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a45e:	441a      	add	r2, r3
 801a460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a462:	441a      	add	r2, r3
 801a464:	4b84      	ldr	r3, [pc, #528]	; (801a678 <mbedtls_internal_md5_process+0xb2c>)
 801a466:	4413      	add	r3, r2
 801a468:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a46a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a46c:	ea4f 4333 	mov.w	r3, r3, ror #16
 801a470:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a472:	4413      	add	r3, r2
 801a474:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 10, 23, 0xBEBFBC70 );
 801a476:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a47a:	405a      	eors	r2, r3
 801a47c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a47e:	405a      	eors	r2, r3
 801a480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a482:	441a      	add	r2, r3
 801a484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a486:	441a      	add	r2, r3
 801a488:	4b7c      	ldr	r3, [pc, #496]	; (801a67c <mbedtls_internal_md5_process+0xb30>)
 801a48a:	4413      	add	r3, r2
 801a48c:	653b      	str	r3, [r7, #80]	; 0x50
 801a48e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a490:	ea4f 2373 	mov.w	r3, r3, ror #9
 801a494:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a496:	4413      	add	r3, r2
 801a498:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 13,  4, 0x289B7EC6 );
 801a49a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a49c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a49e:	405a      	eors	r2, r3
 801a4a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a4a2:	405a      	eors	r2, r3
 801a4a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a4a6:	441a      	add	r2, r3
 801a4a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a4aa:	441a      	add	r2, r3
 801a4ac:	4b74      	ldr	r3, [pc, #464]	; (801a680 <mbedtls_internal_md5_process+0xb34>)
 801a4ae:	4413      	add	r3, r2
 801a4b0:	657b      	str	r3, [r7, #84]	; 0x54
 801a4b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a4b4:	ea4f 7333 	mov.w	r3, r3, ror #28
 801a4b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a4ba:	4413      	add	r3, r2
 801a4bc:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  0, 11, 0xEAA127FA );
 801a4be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a4c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a4c2:	405a      	eors	r2, r3
 801a4c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a4c6:	405a      	eors	r2, r3
 801a4c8:	68bb      	ldr	r3, [r7, #8]
 801a4ca:	441a      	add	r2, r3
 801a4cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a4ce:	441a      	add	r2, r3
 801a4d0:	4b6c      	ldr	r3, [pc, #432]	; (801a684 <mbedtls_internal_md5_process+0xb38>)
 801a4d2:	4413      	add	r3, r2
 801a4d4:	64bb      	str	r3, [r7, #72]	; 0x48
 801a4d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a4d8:	ea4f 5373 	mov.w	r3, r3, ror #21
 801a4dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a4de:	4413      	add	r3, r2
 801a4e0:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  3, 16, 0xD4EF3085 );
 801a4e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a4e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a4e6:	405a      	eors	r2, r3
 801a4e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a4ea:	405a      	eors	r2, r3
 801a4ec:	697b      	ldr	r3, [r7, #20]
 801a4ee:	441a      	add	r2, r3
 801a4f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a4f2:	441a      	add	r2, r3
 801a4f4:	4b64      	ldr	r3, [pc, #400]	; (801a688 <mbedtls_internal_md5_process+0xb3c>)
 801a4f6:	4413      	add	r3, r2
 801a4f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a4fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a4fc:	ea4f 4333 	mov.w	r3, r3, ror #16
 801a500:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a502:	4413      	add	r3, r2
 801a504:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  6, 23, 0x04881D05 );
 801a506:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a50a:	405a      	eors	r2, r3
 801a50c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a50e:	405a      	eors	r2, r3
 801a510:	6a3b      	ldr	r3, [r7, #32]
 801a512:	441a      	add	r2, r3
 801a514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a516:	441a      	add	r2, r3
 801a518:	4b5c      	ldr	r3, [pc, #368]	; (801a68c <mbedtls_internal_md5_process+0xb40>)
 801a51a:	4413      	add	r3, r2
 801a51c:	653b      	str	r3, [r7, #80]	; 0x50
 801a51e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a520:	ea4f 2373 	mov.w	r3, r3, ror #9
 801a524:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a526:	4413      	add	r3, r2
 801a528:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  9,  4, 0xD9D4D039 );
 801a52a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a52c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a52e:	405a      	eors	r2, r3
 801a530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a532:	405a      	eors	r2, r3
 801a534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a536:	441a      	add	r2, r3
 801a538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a53a:	441a      	add	r2, r3
 801a53c:	4b54      	ldr	r3, [pc, #336]	; (801a690 <mbedtls_internal_md5_process+0xb44>)
 801a53e:	4413      	add	r3, r2
 801a540:	657b      	str	r3, [r7, #84]	; 0x54
 801a542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a544:	ea4f 7333 	mov.w	r3, r3, ror #28
 801a548:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a54a:	4413      	add	r3, r2
 801a54c:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 12, 11, 0xE6DB99E5 );
 801a54e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a552:	405a      	eors	r2, r3
 801a554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a556:	405a      	eors	r2, r3
 801a558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a55a:	441a      	add	r2, r3
 801a55c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a55e:	441a      	add	r2, r3
 801a560:	4b4c      	ldr	r3, [pc, #304]	; (801a694 <mbedtls_internal_md5_process+0xb48>)
 801a562:	4413      	add	r3, r2
 801a564:	64bb      	str	r3, [r7, #72]	; 0x48
 801a566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a568:	ea4f 5373 	mov.w	r3, r3, ror #21
 801a56c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a56e:	4413      	add	r3, r2
 801a570:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 15, 16, 0x1FA27CF8 );
 801a572:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a576:	405a      	eors	r2, r3
 801a578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a57a:	405a      	eors	r2, r3
 801a57c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a57e:	441a      	add	r2, r3
 801a580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a582:	441a      	add	r2, r3
 801a584:	4b44      	ldr	r3, [pc, #272]	; (801a698 <mbedtls_internal_md5_process+0xb4c>)
 801a586:	4413      	add	r3, r2
 801a588:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a58a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a58c:	ea4f 4333 	mov.w	r3, r3, ror #16
 801a590:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a592:	4413      	add	r3, r2
 801a594:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  2, 23, 0xC4AC5665 );
 801a596:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a59a:	405a      	eors	r2, r3
 801a59c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a59e:	405a      	eors	r2, r3
 801a5a0:	693b      	ldr	r3, [r7, #16]
 801a5a2:	441a      	add	r2, r3
 801a5a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a5a6:	441a      	add	r2, r3
 801a5a8:	4b3c      	ldr	r3, [pc, #240]	; (801a69c <mbedtls_internal_md5_process+0xb50>)
 801a5aa:	4413      	add	r3, r2
 801a5ac:	653b      	str	r3, [r7, #80]	; 0x50
 801a5ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a5b0:	ea4f 2373 	mov.w	r3, r3, ror #9
 801a5b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a5b6:	4413      	add	r3, r2
 801a5b8:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) ((y) ^ ((x) | ~(z)))

    P( A, B, C, D,  0,  6, 0xF4292244 );
 801a5ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a5bc:	43da      	mvns	r2, r3
 801a5be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a5c0:	431a      	orrs	r2, r3
 801a5c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a5c4:	405a      	eors	r2, r3
 801a5c6:	68bb      	ldr	r3, [r7, #8]
 801a5c8:	441a      	add	r2, r3
 801a5ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a5cc:	441a      	add	r2, r3
 801a5ce:	4b34      	ldr	r3, [pc, #208]	; (801a6a0 <mbedtls_internal_md5_process+0xb54>)
 801a5d0:	4413      	add	r3, r2
 801a5d2:	657b      	str	r3, [r7, #84]	; 0x54
 801a5d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a5d6:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801a5da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a5dc:	4413      	add	r3, r2
 801a5de:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  7, 10, 0x432AFF97 );
 801a5e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a5e2:	43da      	mvns	r2, r3
 801a5e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a5e6:	431a      	orrs	r2, r3
 801a5e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a5ea:	405a      	eors	r2, r3
 801a5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5ee:	441a      	add	r2, r3
 801a5f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a5f2:	441a      	add	r2, r3
 801a5f4:	4b2b      	ldr	r3, [pc, #172]	; (801a6a4 <mbedtls_internal_md5_process+0xb58>)
 801a5f6:	4413      	add	r3, r2
 801a5f8:	64bb      	str	r3, [r7, #72]	; 0x48
 801a5fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a5fc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801a600:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a602:	4413      	add	r3, r2
 801a604:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 14, 15, 0xAB9423A7 );
 801a606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a608:	43da      	mvns	r2, r3
 801a60a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a60c:	431a      	orrs	r2, r3
 801a60e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a610:	405a      	eors	r2, r3
 801a612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a614:	441a      	add	r2, r3
 801a616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a618:	441a      	add	r2, r3
 801a61a:	4b23      	ldr	r3, [pc, #140]	; (801a6a8 <mbedtls_internal_md5_process+0xb5c>)
 801a61c:	4413      	add	r3, r2
 801a61e:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a622:	ea4f 4373 	mov.w	r3, r3, ror #17
 801a626:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a628:	4413      	add	r3, r2
 801a62a:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  5, 21, 0xFC93A039 );
 801a62c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a62e:	43da      	mvns	r2, r3
 801a630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a632:	431a      	orrs	r2, r3
 801a634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a636:	405a      	eors	r2, r3
 801a638:	69fb      	ldr	r3, [r7, #28]
 801a63a:	441a      	add	r2, r3
 801a63c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a63e:	441a      	add	r2, r3
 801a640:	4b1a      	ldr	r3, [pc, #104]	; (801a6ac <mbedtls_internal_md5_process+0xb60>)
 801a642:	4413      	add	r3, r2
 801a644:	653b      	str	r3, [r7, #80]	; 0x50
 801a646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a648:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801a64c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a64e:	4413      	add	r3, r2
 801a650:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 12,  6, 0x655B59C3 );
 801a652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a654:	43da      	mvns	r2, r3
 801a656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a658:	431a      	orrs	r2, r3
 801a65a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a65c:	405a      	eors	r2, r3
 801a65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a660:	441a      	add	r2, r3
 801a662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a664:	e024      	b.n	801a6b0 <mbedtls_internal_md5_process+0xb64>
 801a666:	bf00      	nop
 801a668:	6d9d6122 	.word	0x6d9d6122
 801a66c:	fde5380c 	.word	0xfde5380c
 801a670:	a4beea44 	.word	0xa4beea44
 801a674:	4bdecfa9 	.word	0x4bdecfa9
 801a678:	f6bb4b60 	.word	0xf6bb4b60
 801a67c:	bebfbc70 	.word	0xbebfbc70
 801a680:	289b7ec6 	.word	0x289b7ec6
 801a684:	eaa127fa 	.word	0xeaa127fa
 801a688:	d4ef3085 	.word	0xd4ef3085
 801a68c:	04881d05 	.word	0x04881d05
 801a690:	d9d4d039 	.word	0xd9d4d039
 801a694:	e6db99e5 	.word	0xe6db99e5
 801a698:	1fa27cf8 	.word	0x1fa27cf8
 801a69c:	c4ac5665 	.word	0xc4ac5665
 801a6a0:	f4292244 	.word	0xf4292244
 801a6a4:	432aff97 	.word	0x432aff97
 801a6a8:	ab9423a7 	.word	0xab9423a7
 801a6ac:	fc93a039 	.word	0xfc93a039
 801a6b0:	441a      	add	r2, r3
 801a6b2:	4b7d      	ldr	r3, [pc, #500]	; (801a8a8 <mbedtls_internal_md5_process+0xd5c>)
 801a6b4:	4413      	add	r3, r2
 801a6b6:	657b      	str	r3, [r7, #84]	; 0x54
 801a6b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a6ba:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801a6be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a6c0:	4413      	add	r3, r2
 801a6c2:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  3, 10, 0x8F0CCC92 );
 801a6c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a6c6:	43da      	mvns	r2, r3
 801a6c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a6ca:	431a      	orrs	r2, r3
 801a6cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a6ce:	405a      	eors	r2, r3
 801a6d0:	697b      	ldr	r3, [r7, #20]
 801a6d2:	441a      	add	r2, r3
 801a6d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a6d6:	441a      	add	r2, r3
 801a6d8:	4b74      	ldr	r3, [pc, #464]	; (801a8ac <mbedtls_internal_md5_process+0xd60>)
 801a6da:	4413      	add	r3, r2
 801a6dc:	64bb      	str	r3, [r7, #72]	; 0x48
 801a6de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a6e0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801a6e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a6e6:	4413      	add	r3, r2
 801a6e8:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 10, 15, 0xFFEFF47D );
 801a6ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a6ec:	43da      	mvns	r2, r3
 801a6ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a6f0:	431a      	orrs	r2, r3
 801a6f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a6f4:	405a      	eors	r2, r3
 801a6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6f8:	441a      	add	r2, r3
 801a6fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a6fc:	4413      	add	r3, r2
 801a6fe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801a702:	f6a3 3383 	subw	r3, r3, #2947	; 0xb83
 801a706:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a70a:	ea4f 4373 	mov.w	r3, r3, ror #17
 801a70e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a710:	4413      	add	r3, r2
 801a712:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  1, 21, 0x85845DD1 );
 801a714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a716:	43da      	mvns	r2, r3
 801a718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a71a:	431a      	orrs	r2, r3
 801a71c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a71e:	405a      	eors	r2, r3
 801a720:	68fb      	ldr	r3, [r7, #12]
 801a722:	441a      	add	r2, r3
 801a724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a726:	441a      	add	r2, r3
 801a728:	4b61      	ldr	r3, [pc, #388]	; (801a8b0 <mbedtls_internal_md5_process+0xd64>)
 801a72a:	4413      	add	r3, r2
 801a72c:	653b      	str	r3, [r7, #80]	; 0x50
 801a72e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a730:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801a734:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a736:	4413      	add	r3, r2
 801a738:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  8,  6, 0x6FA87E4F );
 801a73a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a73c:	43da      	mvns	r2, r3
 801a73e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a740:	431a      	orrs	r2, r3
 801a742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a744:	405a      	eors	r2, r3
 801a746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a748:	441a      	add	r2, r3
 801a74a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a74c:	441a      	add	r2, r3
 801a74e:	4b59      	ldr	r3, [pc, #356]	; (801a8b4 <mbedtls_internal_md5_process+0xd68>)
 801a750:	4413      	add	r3, r2
 801a752:	657b      	str	r3, [r7, #84]	; 0x54
 801a754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a756:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801a75a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a75c:	4413      	add	r3, r2
 801a75e:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 15, 10, 0xFE2CE6E0 );
 801a760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a762:	43da      	mvns	r2, r3
 801a764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a766:	431a      	orrs	r2, r3
 801a768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a76a:	405a      	eors	r2, r3
 801a76c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a76e:	441a      	add	r2, r3
 801a770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a772:	441a      	add	r2, r3
 801a774:	4b50      	ldr	r3, [pc, #320]	; (801a8b8 <mbedtls_internal_md5_process+0xd6c>)
 801a776:	4413      	add	r3, r2
 801a778:	64bb      	str	r3, [r7, #72]	; 0x48
 801a77a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a77c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801a780:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a782:	4413      	add	r3, r2
 801a784:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  6, 15, 0xA3014314 );
 801a786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a788:	43da      	mvns	r2, r3
 801a78a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a78c:	431a      	orrs	r2, r3
 801a78e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a790:	405a      	eors	r2, r3
 801a792:	6a3b      	ldr	r3, [r7, #32]
 801a794:	441a      	add	r2, r3
 801a796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a798:	441a      	add	r2, r3
 801a79a:	4b48      	ldr	r3, [pc, #288]	; (801a8bc <mbedtls_internal_md5_process+0xd70>)
 801a79c:	4413      	add	r3, r2
 801a79e:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a7a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a7a2:	ea4f 4373 	mov.w	r3, r3, ror #17
 801a7a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a7a8:	4413      	add	r3, r2
 801a7aa:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 13, 21, 0x4E0811A1 );
 801a7ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a7ae:	43da      	mvns	r2, r3
 801a7b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a7b2:	431a      	orrs	r2, r3
 801a7b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a7b6:	405a      	eors	r2, r3
 801a7b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a7ba:	441a      	add	r2, r3
 801a7bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a7be:	441a      	add	r2, r3
 801a7c0:	4b3f      	ldr	r3, [pc, #252]	; (801a8c0 <mbedtls_internal_md5_process+0xd74>)
 801a7c2:	4413      	add	r3, r2
 801a7c4:	653b      	str	r3, [r7, #80]	; 0x50
 801a7c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a7c8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801a7cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a7ce:	4413      	add	r3, r2
 801a7d0:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  4,  6, 0xF7537E82 );
 801a7d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a7d4:	43da      	mvns	r2, r3
 801a7d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a7d8:	431a      	orrs	r2, r3
 801a7da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a7dc:	405a      	eors	r2, r3
 801a7de:	69bb      	ldr	r3, [r7, #24]
 801a7e0:	441a      	add	r2, r3
 801a7e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a7e4:	441a      	add	r2, r3
 801a7e6:	4b37      	ldr	r3, [pc, #220]	; (801a8c4 <mbedtls_internal_md5_process+0xd78>)
 801a7e8:	4413      	add	r3, r2
 801a7ea:	657b      	str	r3, [r7, #84]	; 0x54
 801a7ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a7ee:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801a7f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a7f4:	4413      	add	r3, r2
 801a7f6:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 11, 10, 0xBD3AF235 );
 801a7f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a7fa:	43da      	mvns	r2, r3
 801a7fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a7fe:	431a      	orrs	r2, r3
 801a800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a802:	405a      	eors	r2, r3
 801a804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a806:	441a      	add	r2, r3
 801a808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a80a:	441a      	add	r2, r3
 801a80c:	4b2e      	ldr	r3, [pc, #184]	; (801a8c8 <mbedtls_internal_md5_process+0xd7c>)
 801a80e:	4413      	add	r3, r2
 801a810:	64bb      	str	r3, [r7, #72]	; 0x48
 801a812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a814:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801a818:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a81a:	4413      	add	r3, r2
 801a81c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  2, 15, 0x2AD7D2BB );
 801a81e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a820:	43da      	mvns	r2, r3
 801a822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a824:	431a      	orrs	r2, r3
 801a826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a828:	405a      	eors	r2, r3
 801a82a:	693b      	ldr	r3, [r7, #16]
 801a82c:	441a      	add	r2, r3
 801a82e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a830:	441a      	add	r2, r3
 801a832:	4b26      	ldr	r3, [pc, #152]	; (801a8cc <mbedtls_internal_md5_process+0xd80>)
 801a834:	4413      	add	r3, r2
 801a836:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a83a:	ea4f 4373 	mov.w	r3, r3, ror #17
 801a83e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a840:	4413      	add	r3, r2
 801a842:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  9, 21, 0xEB86D391 );
 801a844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a846:	43da      	mvns	r2, r3
 801a848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a84a:	431a      	orrs	r2, r3
 801a84c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a84e:	405a      	eors	r2, r3
 801a850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a852:	441a      	add	r2, r3
 801a854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a856:	441a      	add	r2, r3
 801a858:	4b1d      	ldr	r3, [pc, #116]	; (801a8d0 <mbedtls_internal_md5_process+0xd84>)
 801a85a:	4413      	add	r3, r2
 801a85c:	653b      	str	r3, [r7, #80]	; 0x50
 801a85e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a860:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801a864:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a866:	4413      	add	r3, r2
 801a868:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

    ctx->state[0] += A;
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	689a      	ldr	r2, [r3, #8]
 801a86e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a870:	441a      	add	r2, r3
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	609a      	str	r2, [r3, #8]
    ctx->state[1] += B;
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	68da      	ldr	r2, [r3, #12]
 801a87a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a87c:	441a      	add	r2, r3
 801a87e:	687b      	ldr	r3, [r7, #4]
 801a880:	60da      	str	r2, [r3, #12]
    ctx->state[2] += C;
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	691a      	ldr	r2, [r3, #16]
 801a886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a888:	441a      	add	r2, r3
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	611a      	str	r2, [r3, #16]
    ctx->state[3] += D;
 801a88e:	687b      	ldr	r3, [r7, #4]
 801a890:	695a      	ldr	r2, [r3, #20]
 801a892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a894:	441a      	add	r2, r3
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	615a      	str	r2, [r3, #20]

    return( 0 );
 801a89a:	2300      	movs	r3, #0
}
 801a89c:	4618      	mov	r0, r3
 801a89e:	375c      	adds	r7, #92	; 0x5c
 801a8a0:	46bd      	mov	sp, r7
 801a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8a6:	4770      	bx	lr
 801a8a8:	655b59c3 	.word	0x655b59c3
 801a8ac:	8f0ccc92 	.word	0x8f0ccc92
 801a8b0:	85845dd1 	.word	0x85845dd1
 801a8b4:	6fa87e4f 	.word	0x6fa87e4f
 801a8b8:	fe2ce6e0 	.word	0xfe2ce6e0
 801a8bc:	a3014314 	.word	0xa3014314
 801a8c0:	4e0811a1 	.word	0x4e0811a1
 801a8c4:	f7537e82 	.word	0xf7537e82
 801a8c8:	bd3af235 	.word	0xbd3af235
 801a8cc:	2ad7d2bb 	.word	0x2ad7d2bb
 801a8d0:	eb86d391 	.word	0xeb86d391

0801a8d4 <mbedtls_md5_update_ret>:
 * MD5 process buffer
 */
int mbedtls_md5_update_ret( mbedtls_md5_context *ctx,
                            const unsigned char *input,
                            size_t ilen )
{
 801a8d4:	b580      	push	{r7, lr}
 801a8d6:	b088      	sub	sp, #32
 801a8d8:	af00      	add	r7, sp, #0
 801a8da:	60f8      	str	r0, [r7, #12]
 801a8dc:	60b9      	str	r1, [r7, #8]
 801a8de:	607a      	str	r2, [r7, #4]
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	2b00      	cmp	r3, #0
 801a8e4:	d101      	bne.n	801a8ea <mbedtls_md5_update_ret+0x16>
        return( 0 );
 801a8e6:	2300      	movs	r3, #0
 801a8e8:	e065      	b.n	801a9b6 <mbedtls_md5_update_ret+0xe2>

    left = ctx->total[0] & 0x3F;
 801a8ea:	68fb      	ldr	r3, [r7, #12]
 801a8ec:	681b      	ldr	r3, [r3, #0]
 801a8ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a8f2:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 801a8f4:	69fb      	ldr	r3, [r7, #28]
 801a8f6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801a8fa:	61bb      	str	r3, [r7, #24]

    ctx->total[0] += (uint32_t) ilen;
 801a8fc:	68fb      	ldr	r3, [r7, #12]
 801a8fe:	681a      	ldr	r2, [r3, #0]
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	441a      	add	r2, r3
 801a904:	68fb      	ldr	r3, [r7, #12]
 801a906:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 801a908:	68fb      	ldr	r3, [r7, #12]
 801a90a:	681a      	ldr	r2, [r3, #0]
 801a90c:	68fb      	ldr	r3, [r7, #12]
 801a90e:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (uint32_t) ilen )
 801a910:	68fb      	ldr	r3, [r7, #12]
 801a912:	681b      	ldr	r3, [r3, #0]
 801a914:	687a      	ldr	r2, [r7, #4]
 801a916:	429a      	cmp	r2, r3
 801a918:	d904      	bls.n	801a924 <mbedtls_md5_update_ret+0x50>
        ctx->total[1]++;
 801a91a:	68fb      	ldr	r3, [r7, #12]
 801a91c:	685b      	ldr	r3, [r3, #4]
 801a91e:	1c5a      	adds	r2, r3, #1
 801a920:	68fb      	ldr	r3, [r7, #12]
 801a922:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
 801a924:	69fb      	ldr	r3, [r7, #28]
 801a926:	2b00      	cmp	r3, #0
 801a928:	d034      	beq.n	801a994 <mbedtls_md5_update_ret+0xc0>
 801a92a:	687a      	ldr	r2, [r7, #4]
 801a92c:	69bb      	ldr	r3, [r7, #24]
 801a92e:	429a      	cmp	r2, r3
 801a930:	d330      	bcc.n	801a994 <mbedtls_md5_update_ret+0xc0>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 801a932:	68fb      	ldr	r3, [r7, #12]
 801a934:	f103 0218 	add.w	r2, r3, #24
 801a938:	69fb      	ldr	r3, [r7, #28]
 801a93a:	4413      	add	r3, r2
 801a93c:	69ba      	ldr	r2, [r7, #24]
 801a93e:	68b9      	ldr	r1, [r7, #8]
 801a940:	4618      	mov	r0, r3
 801a942:	f001 fcb6 	bl	801c2b2 <memcpy>
        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 801a946:	68fb      	ldr	r3, [r7, #12]
 801a948:	3318      	adds	r3, #24
 801a94a:	4619      	mov	r1, r3
 801a94c:	68f8      	ldr	r0, [r7, #12]
 801a94e:	f7ff f8fd 	bl	8019b4c <mbedtls_internal_md5_process>
 801a952:	6178      	str	r0, [r7, #20]
 801a954:	697b      	ldr	r3, [r7, #20]
 801a956:	2b00      	cmp	r3, #0
 801a958:	d001      	beq.n	801a95e <mbedtls_md5_update_ret+0x8a>
            return( ret );
 801a95a:	697b      	ldr	r3, [r7, #20]
 801a95c:	e02b      	b.n	801a9b6 <mbedtls_md5_update_ret+0xe2>

        input += fill;
 801a95e:	68ba      	ldr	r2, [r7, #8]
 801a960:	69bb      	ldr	r3, [r7, #24]
 801a962:	4413      	add	r3, r2
 801a964:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 801a966:	687a      	ldr	r2, [r7, #4]
 801a968:	69bb      	ldr	r3, [r7, #24]
 801a96a:	1ad3      	subs	r3, r2, r3
 801a96c:	607b      	str	r3, [r7, #4]
        left = 0;
 801a96e:	2300      	movs	r3, #0
 801a970:	61fb      	str	r3, [r7, #28]
    }

    while( ilen >= 64 )
 801a972:	e00f      	b.n	801a994 <mbedtls_md5_update_ret+0xc0>
    {
        if( ( ret = mbedtls_internal_md5_process( ctx, input ) ) != 0 )
 801a974:	68b9      	ldr	r1, [r7, #8]
 801a976:	68f8      	ldr	r0, [r7, #12]
 801a978:	f7ff f8e8 	bl	8019b4c <mbedtls_internal_md5_process>
 801a97c:	6178      	str	r0, [r7, #20]
 801a97e:	697b      	ldr	r3, [r7, #20]
 801a980:	2b00      	cmp	r3, #0
 801a982:	d001      	beq.n	801a988 <mbedtls_md5_update_ret+0xb4>
            return( ret );
 801a984:	697b      	ldr	r3, [r7, #20]
 801a986:	e016      	b.n	801a9b6 <mbedtls_md5_update_ret+0xe2>

        input += 64;
 801a988:	68bb      	ldr	r3, [r7, #8]
 801a98a:	3340      	adds	r3, #64	; 0x40
 801a98c:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	3b40      	subs	r3, #64	; 0x40
 801a992:	607b      	str	r3, [r7, #4]
    while( ilen >= 64 )
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	2b3f      	cmp	r3, #63	; 0x3f
 801a998:	d8ec      	bhi.n	801a974 <mbedtls_md5_update_ret+0xa0>
    }

    if( ilen > 0 )
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	2b00      	cmp	r3, #0
 801a99e:	d009      	beq.n	801a9b4 <mbedtls_md5_update_ret+0xe0>
    {
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 801a9a0:	68fb      	ldr	r3, [r7, #12]
 801a9a2:	f103 0218 	add.w	r2, r3, #24
 801a9a6:	69fb      	ldr	r3, [r7, #28]
 801a9a8:	4413      	add	r3, r2
 801a9aa:	687a      	ldr	r2, [r7, #4]
 801a9ac:	68b9      	ldr	r1, [r7, #8]
 801a9ae:	4618      	mov	r0, r3
 801a9b0:	f001 fc7f 	bl	801c2b2 <memcpy>
    }

    return( 0 );
 801a9b4:	2300      	movs	r3, #0
}
 801a9b6:	4618      	mov	r0, r3
 801a9b8:	3720      	adds	r7, #32
 801a9ba:	46bd      	mov	sp, r7
 801a9bc:	bd80      	pop	{r7, pc}

0801a9be <mbedtls_md5_finish_ret>:
/*
 * MD5 final digest
 */
int mbedtls_md5_finish_ret( mbedtls_md5_context *ctx,
                            unsigned char output[16] )
{
 801a9be:	b580      	push	{r7, lr}
 801a9c0:	b086      	sub	sp, #24
 801a9c2:	af00      	add	r7, sp, #0
 801a9c4:	6078      	str	r0, [r7, #4]
 801a9c6:	6039      	str	r1, [r7, #0]
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	681b      	ldr	r3, [r3, #0]
 801a9cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a9d0:	617b      	str	r3, [r7, #20]

    ctx->buffer[used++] = 0x80;
 801a9d2:	697b      	ldr	r3, [r7, #20]
 801a9d4:	1c5a      	adds	r2, r3, #1
 801a9d6:	617a      	str	r2, [r7, #20]
 801a9d8:	687a      	ldr	r2, [r7, #4]
 801a9da:	4413      	add	r3, r2
 801a9dc:	2280      	movs	r2, #128	; 0x80
 801a9de:	761a      	strb	r2, [r3, #24]

    if( used <= 56 )
 801a9e0:	697b      	ldr	r3, [r7, #20]
 801a9e2:	2b38      	cmp	r3, #56	; 0x38
 801a9e4:	d80c      	bhi.n	801aa00 <mbedtls_md5_finish_ret+0x42>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	f103 0218 	add.w	r2, r3, #24
 801a9ec:	697b      	ldr	r3, [r7, #20]
 801a9ee:	18d0      	adds	r0, r2, r3
 801a9f0:	697b      	ldr	r3, [r7, #20]
 801a9f2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801a9f6:	461a      	mov	r2, r3
 801a9f8:	2100      	movs	r1, #0
 801a9fa:	f001 fa85 	bl	801bf08 <memset>
 801a9fe:	e01e      	b.n	801aa3e <mbedtls_md5_finish_ret+0x80>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	f103 0218 	add.w	r2, r3, #24
 801aa06:	697b      	ldr	r3, [r7, #20]
 801aa08:	18d0      	adds	r0, r2, r3
 801aa0a:	697b      	ldr	r3, [r7, #20]
 801aa0c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801aa10:	461a      	mov	r2, r3
 801aa12:	2100      	movs	r1, #0
 801aa14:	f001 fa78 	bl	801bf08 <memset>

        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	3318      	adds	r3, #24
 801aa1c:	4619      	mov	r1, r3
 801aa1e:	6878      	ldr	r0, [r7, #4]
 801aa20:	f7ff f894 	bl	8019b4c <mbedtls_internal_md5_process>
 801aa24:	6138      	str	r0, [r7, #16]
 801aa26:	693b      	ldr	r3, [r7, #16]
 801aa28:	2b00      	cmp	r3, #0
 801aa2a:	d001      	beq.n	801aa30 <mbedtls_md5_finish_ret+0x72>
            return( ret );
 801aa2c:	693b      	ldr	r3, [r7, #16]
 801aa2e:	e0b8      	b.n	801aba2 <mbedtls_md5_finish_ret+0x1e4>

        memset( ctx->buffer, 0, 56 );
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	3318      	adds	r3, #24
 801aa34:	2238      	movs	r2, #56	; 0x38
 801aa36:	2100      	movs	r1, #0
 801aa38:	4618      	mov	r0, r3
 801aa3a:	f001 fa65 	bl	801bf08 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	681b      	ldr	r3, [r3, #0]
 801aa42:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	685b      	ldr	r3, [r3, #4]
 801aa48:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 801aa4a:	4313      	orrs	r3, r2
 801aa4c:	60fb      	str	r3, [r7, #12]
    low  = ( ctx->total[0] <<  3 );
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	681b      	ldr	r3, [r3, #0]
 801aa52:	00db      	lsls	r3, r3, #3
 801aa54:	60bb      	str	r3, [r7, #8]

    PUT_UINT32_LE( low,  ctx->buffer, 56 );
 801aa56:	68bb      	ldr	r3, [r7, #8]
 801aa58:	b2da      	uxtb	r2, r3
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 801aa60:	68bb      	ldr	r3, [r7, #8]
 801aa62:	0a1b      	lsrs	r3, r3, #8
 801aa64:	b2da      	uxtb	r2, r3
 801aa66:	687b      	ldr	r3, [r7, #4]
 801aa68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 801aa6c:	68bb      	ldr	r3, [r7, #8]
 801aa6e:	0c1b      	lsrs	r3, r3, #16
 801aa70:	b2da      	uxtb	r2, r3
 801aa72:	687b      	ldr	r3, [r7, #4]
 801aa74:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 801aa78:	68bb      	ldr	r3, [r7, #8]
 801aa7a:	0e1b      	lsrs	r3, r3, #24
 801aa7c:	b2da      	uxtb	r2, r3
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    PUT_UINT32_LE( high, ctx->buffer, 60 );
 801aa84:	68fb      	ldr	r3, [r7, #12]
 801aa86:	b2da      	uxtb	r2, r3
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 801aa8e:	68fb      	ldr	r3, [r7, #12]
 801aa90:	0a1b      	lsrs	r3, r3, #8
 801aa92:	b2da      	uxtb	r2, r3
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 801aa9a:	68fb      	ldr	r3, [r7, #12]
 801aa9c:	0c1b      	lsrs	r3, r3, #16
 801aa9e:	b2da      	uxtb	r2, r3
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 801aaa6:	68fb      	ldr	r3, [r7, #12]
 801aaa8:	0e1b      	lsrs	r3, r3, #24
 801aaaa:	b2da      	uxtb	r2, r3
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

    if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 801aab2:	687b      	ldr	r3, [r7, #4]
 801aab4:	3318      	adds	r3, #24
 801aab6:	4619      	mov	r1, r3
 801aab8:	6878      	ldr	r0, [r7, #4]
 801aaba:	f7ff f847 	bl	8019b4c <mbedtls_internal_md5_process>
 801aabe:	6138      	str	r0, [r7, #16]
 801aac0:	693b      	ldr	r3, [r7, #16]
 801aac2:	2b00      	cmp	r3, #0
 801aac4:	d001      	beq.n	801aaca <mbedtls_md5_finish_ret+0x10c>
        return( ret );
 801aac6:	693b      	ldr	r3, [r7, #16]
 801aac8:	e06b      	b.n	801aba2 <mbedtls_md5_finish_ret+0x1e4>

    /*
     * Output final state
     */
    PUT_UINT32_LE( ctx->state[0], output,  0 );
 801aaca:	687b      	ldr	r3, [r7, #4]
 801aacc:	689b      	ldr	r3, [r3, #8]
 801aace:	b2da      	uxtb	r2, r3
 801aad0:	683b      	ldr	r3, [r7, #0]
 801aad2:	701a      	strb	r2, [r3, #0]
 801aad4:	687b      	ldr	r3, [r7, #4]
 801aad6:	689b      	ldr	r3, [r3, #8]
 801aad8:	0a1a      	lsrs	r2, r3, #8
 801aada:	683b      	ldr	r3, [r7, #0]
 801aadc:	3301      	adds	r3, #1
 801aade:	b2d2      	uxtb	r2, r2
 801aae0:	701a      	strb	r2, [r3, #0]
 801aae2:	687b      	ldr	r3, [r7, #4]
 801aae4:	689b      	ldr	r3, [r3, #8]
 801aae6:	0c1a      	lsrs	r2, r3, #16
 801aae8:	683b      	ldr	r3, [r7, #0]
 801aaea:	3302      	adds	r3, #2
 801aaec:	b2d2      	uxtb	r2, r2
 801aaee:	701a      	strb	r2, [r3, #0]
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	689b      	ldr	r3, [r3, #8]
 801aaf4:	0e1a      	lsrs	r2, r3, #24
 801aaf6:	683b      	ldr	r3, [r7, #0]
 801aaf8:	3303      	adds	r3, #3
 801aafa:	b2d2      	uxtb	r2, r2
 801aafc:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[1], output,  4 );
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	68da      	ldr	r2, [r3, #12]
 801ab02:	683b      	ldr	r3, [r7, #0]
 801ab04:	3304      	adds	r3, #4
 801ab06:	b2d2      	uxtb	r2, r2
 801ab08:	701a      	strb	r2, [r3, #0]
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	68db      	ldr	r3, [r3, #12]
 801ab0e:	0a1a      	lsrs	r2, r3, #8
 801ab10:	683b      	ldr	r3, [r7, #0]
 801ab12:	3305      	adds	r3, #5
 801ab14:	b2d2      	uxtb	r2, r2
 801ab16:	701a      	strb	r2, [r3, #0]
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	68db      	ldr	r3, [r3, #12]
 801ab1c:	0c1a      	lsrs	r2, r3, #16
 801ab1e:	683b      	ldr	r3, [r7, #0]
 801ab20:	3306      	adds	r3, #6
 801ab22:	b2d2      	uxtb	r2, r2
 801ab24:	701a      	strb	r2, [r3, #0]
 801ab26:	687b      	ldr	r3, [r7, #4]
 801ab28:	68db      	ldr	r3, [r3, #12]
 801ab2a:	0e1a      	lsrs	r2, r3, #24
 801ab2c:	683b      	ldr	r3, [r7, #0]
 801ab2e:	3307      	adds	r3, #7
 801ab30:	b2d2      	uxtb	r2, r2
 801ab32:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[2], output,  8 );
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	691a      	ldr	r2, [r3, #16]
 801ab38:	683b      	ldr	r3, [r7, #0]
 801ab3a:	3308      	adds	r3, #8
 801ab3c:	b2d2      	uxtb	r2, r2
 801ab3e:	701a      	strb	r2, [r3, #0]
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	691b      	ldr	r3, [r3, #16]
 801ab44:	0a1a      	lsrs	r2, r3, #8
 801ab46:	683b      	ldr	r3, [r7, #0]
 801ab48:	3309      	adds	r3, #9
 801ab4a:	b2d2      	uxtb	r2, r2
 801ab4c:	701a      	strb	r2, [r3, #0]
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	691b      	ldr	r3, [r3, #16]
 801ab52:	0c1a      	lsrs	r2, r3, #16
 801ab54:	683b      	ldr	r3, [r7, #0]
 801ab56:	330a      	adds	r3, #10
 801ab58:	b2d2      	uxtb	r2, r2
 801ab5a:	701a      	strb	r2, [r3, #0]
 801ab5c:	687b      	ldr	r3, [r7, #4]
 801ab5e:	691b      	ldr	r3, [r3, #16]
 801ab60:	0e1a      	lsrs	r2, r3, #24
 801ab62:	683b      	ldr	r3, [r7, #0]
 801ab64:	330b      	adds	r3, #11
 801ab66:	b2d2      	uxtb	r2, r2
 801ab68:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[3], output, 12 );
 801ab6a:	687b      	ldr	r3, [r7, #4]
 801ab6c:	695a      	ldr	r2, [r3, #20]
 801ab6e:	683b      	ldr	r3, [r7, #0]
 801ab70:	330c      	adds	r3, #12
 801ab72:	b2d2      	uxtb	r2, r2
 801ab74:	701a      	strb	r2, [r3, #0]
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	695b      	ldr	r3, [r3, #20]
 801ab7a:	0a1a      	lsrs	r2, r3, #8
 801ab7c:	683b      	ldr	r3, [r7, #0]
 801ab7e:	330d      	adds	r3, #13
 801ab80:	b2d2      	uxtb	r2, r2
 801ab82:	701a      	strb	r2, [r3, #0]
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	695b      	ldr	r3, [r3, #20]
 801ab88:	0c1a      	lsrs	r2, r3, #16
 801ab8a:	683b      	ldr	r3, [r7, #0]
 801ab8c:	330e      	adds	r3, #14
 801ab8e:	b2d2      	uxtb	r2, r2
 801ab90:	701a      	strb	r2, [r3, #0]
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	695b      	ldr	r3, [r3, #20]
 801ab96:	0e1a      	lsrs	r2, r3, #24
 801ab98:	683b      	ldr	r3, [r7, #0]
 801ab9a:	330f      	adds	r3, #15
 801ab9c:	b2d2      	uxtb	r2, r2
 801ab9e:	701a      	strb	r2, [r3, #0]

    return( 0 );
 801aba0:	2300      	movs	r3, #0
}
 801aba2:	4618      	mov	r0, r3
 801aba4:	3718      	adds	r7, #24
 801aba6:	46bd      	mov	sp, r7
 801aba8:	bd80      	pop	{r7, pc}
	...

0801abac <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 801abac:	b580      	push	{r7, lr}
 801abae:	b082      	sub	sp, #8
 801abb0:	af00      	add	r7, sp, #0
 801abb2:	6078      	str	r0, [r7, #4]
 801abb4:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 801abb6:	4b05      	ldr	r3, [pc, #20]	; (801abcc <mbedtls_platform_zeroize+0x20>)
 801abb8:	681b      	ldr	r3, [r3, #0]
 801abba:	683a      	ldr	r2, [r7, #0]
 801abbc:	2100      	movs	r1, #0
 801abbe:	6878      	ldr	r0, [r7, #4]
 801abc0:	4798      	blx	r3
}
 801abc2:	bf00      	nop
 801abc4:	3708      	adds	r7, #8
 801abc6:	46bd      	mov	sp, r7
 801abc8:	bd80      	pop	{r7, pc}
 801abca:	bf00      	nop
 801abcc:	2000010c 	.word	0x2000010c

0801abd0 <__assert_func>:
 801abd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801abd2:	4614      	mov	r4, r2
 801abd4:	461a      	mov	r2, r3
 801abd6:	4b09      	ldr	r3, [pc, #36]	; (801abfc <__assert_func+0x2c>)
 801abd8:	681b      	ldr	r3, [r3, #0]
 801abda:	4605      	mov	r5, r0
 801abdc:	68d8      	ldr	r0, [r3, #12]
 801abde:	b14c      	cbz	r4, 801abf4 <__assert_func+0x24>
 801abe0:	4b07      	ldr	r3, [pc, #28]	; (801ac00 <__assert_func+0x30>)
 801abe2:	9100      	str	r1, [sp, #0]
 801abe4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801abe8:	4906      	ldr	r1, [pc, #24]	; (801ac04 <__assert_func+0x34>)
 801abea:	462b      	mov	r3, r5
 801abec:	f000 fffa 	bl	801bbe4 <fiprintf>
 801abf0:	f001 fb74 	bl	801c2dc <abort>
 801abf4:	4b04      	ldr	r3, [pc, #16]	; (801ac08 <__assert_func+0x38>)
 801abf6:	461c      	mov	r4, r3
 801abf8:	e7f3      	b.n	801abe2 <__assert_func+0x12>
 801abfa:	bf00      	nop
 801abfc:	20000168 	.word	0x20000168
 801ac00:	08022dd0 	.word	0x08022dd0
 801ac04:	08022ddd 	.word	0x08022ddd
 801ac08:	08022e0b 	.word	0x08022e0b

0801ac0c <_calloc_r>:
 801ac0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ac0e:	fba1 2402 	umull	r2, r4, r1, r2
 801ac12:	b94c      	cbnz	r4, 801ac28 <_calloc_r+0x1c>
 801ac14:	4611      	mov	r1, r2
 801ac16:	9201      	str	r2, [sp, #4]
 801ac18:	f000 f83e 	bl	801ac98 <_malloc_r>
 801ac1c:	9a01      	ldr	r2, [sp, #4]
 801ac1e:	4605      	mov	r5, r0
 801ac20:	b930      	cbnz	r0, 801ac30 <_calloc_r+0x24>
 801ac22:	4628      	mov	r0, r5
 801ac24:	b003      	add	sp, #12
 801ac26:	bd30      	pop	{r4, r5, pc}
 801ac28:	220c      	movs	r2, #12
 801ac2a:	6002      	str	r2, [r0, #0]
 801ac2c:	2500      	movs	r5, #0
 801ac2e:	e7f8      	b.n	801ac22 <_calloc_r+0x16>
 801ac30:	4621      	mov	r1, r4
 801ac32:	f001 f969 	bl	801bf08 <memset>
 801ac36:	e7f4      	b.n	801ac22 <_calloc_r+0x16>

0801ac38 <malloc>:
 801ac38:	4b02      	ldr	r3, [pc, #8]	; (801ac44 <malloc+0xc>)
 801ac3a:	4601      	mov	r1, r0
 801ac3c:	6818      	ldr	r0, [r3, #0]
 801ac3e:	f000 b82b 	b.w	801ac98 <_malloc_r>
 801ac42:	bf00      	nop
 801ac44:	20000168 	.word	0x20000168

0801ac48 <free>:
 801ac48:	4b02      	ldr	r3, [pc, #8]	; (801ac54 <free+0xc>)
 801ac4a:	4601      	mov	r1, r0
 801ac4c:	6818      	ldr	r0, [r3, #0]
 801ac4e:	f002 b9c9 	b.w	801cfe4 <_free_r>
 801ac52:	bf00      	nop
 801ac54:	20000168 	.word	0x20000168

0801ac58 <sbrk_aligned>:
 801ac58:	b570      	push	{r4, r5, r6, lr}
 801ac5a:	4e0e      	ldr	r6, [pc, #56]	; (801ac94 <sbrk_aligned+0x3c>)
 801ac5c:	460c      	mov	r4, r1
 801ac5e:	6831      	ldr	r1, [r6, #0]
 801ac60:	4605      	mov	r5, r0
 801ac62:	b911      	cbnz	r1, 801ac6a <sbrk_aligned+0x12>
 801ac64:	f001 face 	bl	801c204 <_sbrk_r>
 801ac68:	6030      	str	r0, [r6, #0]
 801ac6a:	4621      	mov	r1, r4
 801ac6c:	4628      	mov	r0, r5
 801ac6e:	f001 fac9 	bl	801c204 <_sbrk_r>
 801ac72:	1c43      	adds	r3, r0, #1
 801ac74:	d00a      	beq.n	801ac8c <sbrk_aligned+0x34>
 801ac76:	1cc4      	adds	r4, r0, #3
 801ac78:	f024 0403 	bic.w	r4, r4, #3
 801ac7c:	42a0      	cmp	r0, r4
 801ac7e:	d007      	beq.n	801ac90 <sbrk_aligned+0x38>
 801ac80:	1a21      	subs	r1, r4, r0
 801ac82:	4628      	mov	r0, r5
 801ac84:	f001 fabe 	bl	801c204 <_sbrk_r>
 801ac88:	3001      	adds	r0, #1
 801ac8a:	d101      	bne.n	801ac90 <sbrk_aligned+0x38>
 801ac8c:	f04f 34ff 	mov.w	r4, #4294967295
 801ac90:	4620      	mov	r0, r4
 801ac92:	bd70      	pop	{r4, r5, r6, pc}
 801ac94:	2000d928 	.word	0x2000d928

0801ac98 <_malloc_r>:
 801ac98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ac9c:	1ccd      	adds	r5, r1, #3
 801ac9e:	f025 0503 	bic.w	r5, r5, #3
 801aca2:	3508      	adds	r5, #8
 801aca4:	2d0c      	cmp	r5, #12
 801aca6:	bf38      	it	cc
 801aca8:	250c      	movcc	r5, #12
 801acaa:	2d00      	cmp	r5, #0
 801acac:	4607      	mov	r7, r0
 801acae:	db01      	blt.n	801acb4 <_malloc_r+0x1c>
 801acb0:	42a9      	cmp	r1, r5
 801acb2:	d905      	bls.n	801acc0 <_malloc_r+0x28>
 801acb4:	230c      	movs	r3, #12
 801acb6:	603b      	str	r3, [r7, #0]
 801acb8:	2600      	movs	r6, #0
 801acba:	4630      	mov	r0, r6
 801acbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801acc0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801ad94 <_malloc_r+0xfc>
 801acc4:	f000 f868 	bl	801ad98 <__malloc_lock>
 801acc8:	f8d8 3000 	ldr.w	r3, [r8]
 801accc:	461c      	mov	r4, r3
 801acce:	bb5c      	cbnz	r4, 801ad28 <_malloc_r+0x90>
 801acd0:	4629      	mov	r1, r5
 801acd2:	4638      	mov	r0, r7
 801acd4:	f7ff ffc0 	bl	801ac58 <sbrk_aligned>
 801acd8:	1c43      	adds	r3, r0, #1
 801acda:	4604      	mov	r4, r0
 801acdc:	d155      	bne.n	801ad8a <_malloc_r+0xf2>
 801acde:	f8d8 4000 	ldr.w	r4, [r8]
 801ace2:	4626      	mov	r6, r4
 801ace4:	2e00      	cmp	r6, #0
 801ace6:	d145      	bne.n	801ad74 <_malloc_r+0xdc>
 801ace8:	2c00      	cmp	r4, #0
 801acea:	d048      	beq.n	801ad7e <_malloc_r+0xe6>
 801acec:	6823      	ldr	r3, [r4, #0]
 801acee:	4631      	mov	r1, r6
 801acf0:	4638      	mov	r0, r7
 801acf2:	eb04 0903 	add.w	r9, r4, r3
 801acf6:	f001 fa85 	bl	801c204 <_sbrk_r>
 801acfa:	4581      	cmp	r9, r0
 801acfc:	d13f      	bne.n	801ad7e <_malloc_r+0xe6>
 801acfe:	6821      	ldr	r1, [r4, #0]
 801ad00:	1a6d      	subs	r5, r5, r1
 801ad02:	4629      	mov	r1, r5
 801ad04:	4638      	mov	r0, r7
 801ad06:	f7ff ffa7 	bl	801ac58 <sbrk_aligned>
 801ad0a:	3001      	adds	r0, #1
 801ad0c:	d037      	beq.n	801ad7e <_malloc_r+0xe6>
 801ad0e:	6823      	ldr	r3, [r4, #0]
 801ad10:	442b      	add	r3, r5
 801ad12:	6023      	str	r3, [r4, #0]
 801ad14:	f8d8 3000 	ldr.w	r3, [r8]
 801ad18:	2b00      	cmp	r3, #0
 801ad1a:	d038      	beq.n	801ad8e <_malloc_r+0xf6>
 801ad1c:	685a      	ldr	r2, [r3, #4]
 801ad1e:	42a2      	cmp	r2, r4
 801ad20:	d12b      	bne.n	801ad7a <_malloc_r+0xe2>
 801ad22:	2200      	movs	r2, #0
 801ad24:	605a      	str	r2, [r3, #4]
 801ad26:	e00f      	b.n	801ad48 <_malloc_r+0xb0>
 801ad28:	6822      	ldr	r2, [r4, #0]
 801ad2a:	1b52      	subs	r2, r2, r5
 801ad2c:	d41f      	bmi.n	801ad6e <_malloc_r+0xd6>
 801ad2e:	2a0b      	cmp	r2, #11
 801ad30:	d917      	bls.n	801ad62 <_malloc_r+0xca>
 801ad32:	1961      	adds	r1, r4, r5
 801ad34:	42a3      	cmp	r3, r4
 801ad36:	6025      	str	r5, [r4, #0]
 801ad38:	bf18      	it	ne
 801ad3a:	6059      	strne	r1, [r3, #4]
 801ad3c:	6863      	ldr	r3, [r4, #4]
 801ad3e:	bf08      	it	eq
 801ad40:	f8c8 1000 	streq.w	r1, [r8]
 801ad44:	5162      	str	r2, [r4, r5]
 801ad46:	604b      	str	r3, [r1, #4]
 801ad48:	4638      	mov	r0, r7
 801ad4a:	f104 060b 	add.w	r6, r4, #11
 801ad4e:	f000 f829 	bl	801ada4 <__malloc_unlock>
 801ad52:	f026 0607 	bic.w	r6, r6, #7
 801ad56:	1d23      	adds	r3, r4, #4
 801ad58:	1af2      	subs	r2, r6, r3
 801ad5a:	d0ae      	beq.n	801acba <_malloc_r+0x22>
 801ad5c:	1b9b      	subs	r3, r3, r6
 801ad5e:	50a3      	str	r3, [r4, r2]
 801ad60:	e7ab      	b.n	801acba <_malloc_r+0x22>
 801ad62:	42a3      	cmp	r3, r4
 801ad64:	6862      	ldr	r2, [r4, #4]
 801ad66:	d1dd      	bne.n	801ad24 <_malloc_r+0x8c>
 801ad68:	f8c8 2000 	str.w	r2, [r8]
 801ad6c:	e7ec      	b.n	801ad48 <_malloc_r+0xb0>
 801ad6e:	4623      	mov	r3, r4
 801ad70:	6864      	ldr	r4, [r4, #4]
 801ad72:	e7ac      	b.n	801acce <_malloc_r+0x36>
 801ad74:	4634      	mov	r4, r6
 801ad76:	6876      	ldr	r6, [r6, #4]
 801ad78:	e7b4      	b.n	801ace4 <_malloc_r+0x4c>
 801ad7a:	4613      	mov	r3, r2
 801ad7c:	e7cc      	b.n	801ad18 <_malloc_r+0x80>
 801ad7e:	230c      	movs	r3, #12
 801ad80:	603b      	str	r3, [r7, #0]
 801ad82:	4638      	mov	r0, r7
 801ad84:	f000 f80e 	bl	801ada4 <__malloc_unlock>
 801ad88:	e797      	b.n	801acba <_malloc_r+0x22>
 801ad8a:	6025      	str	r5, [r4, #0]
 801ad8c:	e7dc      	b.n	801ad48 <_malloc_r+0xb0>
 801ad8e:	605b      	str	r3, [r3, #4]
 801ad90:	deff      	udf	#255	; 0xff
 801ad92:	bf00      	nop
 801ad94:	2000d924 	.word	0x2000d924

0801ad98 <__malloc_lock>:
 801ad98:	4801      	ldr	r0, [pc, #4]	; (801ada0 <__malloc_lock+0x8>)
 801ad9a:	f001 ba80 	b.w	801c29e <__retarget_lock_acquire_recursive>
 801ad9e:	bf00      	nop
 801ada0:	2000da6c 	.word	0x2000da6c

0801ada4 <__malloc_unlock>:
 801ada4:	4801      	ldr	r0, [pc, #4]	; (801adac <__malloc_unlock+0x8>)
 801ada6:	f001 ba7b 	b.w	801c2a0 <__retarget_lock_release_recursive>
 801adaa:	bf00      	nop
 801adac:	2000da6c 	.word	0x2000da6c

0801adb0 <__cvt>:
 801adb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801adb4:	ec55 4b10 	vmov	r4, r5, d0
 801adb8:	2d00      	cmp	r5, #0
 801adba:	460e      	mov	r6, r1
 801adbc:	4619      	mov	r1, r3
 801adbe:	462b      	mov	r3, r5
 801adc0:	bfbb      	ittet	lt
 801adc2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801adc6:	461d      	movlt	r5, r3
 801adc8:	2300      	movge	r3, #0
 801adca:	232d      	movlt	r3, #45	; 0x2d
 801adcc:	700b      	strb	r3, [r1, #0]
 801adce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801add0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801add4:	4691      	mov	r9, r2
 801add6:	f023 0820 	bic.w	r8, r3, #32
 801adda:	bfbc      	itt	lt
 801addc:	4622      	movlt	r2, r4
 801adde:	4614      	movlt	r4, r2
 801ade0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801ade4:	d005      	beq.n	801adf2 <__cvt+0x42>
 801ade6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801adea:	d100      	bne.n	801adee <__cvt+0x3e>
 801adec:	3601      	adds	r6, #1
 801adee:	2102      	movs	r1, #2
 801adf0:	e000      	b.n	801adf4 <__cvt+0x44>
 801adf2:	2103      	movs	r1, #3
 801adf4:	ab03      	add	r3, sp, #12
 801adf6:	9301      	str	r3, [sp, #4]
 801adf8:	ab02      	add	r3, sp, #8
 801adfa:	9300      	str	r3, [sp, #0]
 801adfc:	ec45 4b10 	vmov	d0, r4, r5
 801ae00:	4653      	mov	r3, sl
 801ae02:	4632      	mov	r2, r6
 801ae04:	f001 fafc 	bl	801c400 <_dtoa_r>
 801ae08:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801ae0c:	4607      	mov	r7, r0
 801ae0e:	d102      	bne.n	801ae16 <__cvt+0x66>
 801ae10:	f019 0f01 	tst.w	r9, #1
 801ae14:	d022      	beq.n	801ae5c <__cvt+0xac>
 801ae16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801ae1a:	eb07 0906 	add.w	r9, r7, r6
 801ae1e:	d110      	bne.n	801ae42 <__cvt+0x92>
 801ae20:	783b      	ldrb	r3, [r7, #0]
 801ae22:	2b30      	cmp	r3, #48	; 0x30
 801ae24:	d10a      	bne.n	801ae3c <__cvt+0x8c>
 801ae26:	2200      	movs	r2, #0
 801ae28:	2300      	movs	r3, #0
 801ae2a:	4620      	mov	r0, r4
 801ae2c:	4629      	mov	r1, r5
 801ae2e:	f7e5 fe63 	bl	8000af8 <__aeabi_dcmpeq>
 801ae32:	b918      	cbnz	r0, 801ae3c <__cvt+0x8c>
 801ae34:	f1c6 0601 	rsb	r6, r6, #1
 801ae38:	f8ca 6000 	str.w	r6, [sl]
 801ae3c:	f8da 3000 	ldr.w	r3, [sl]
 801ae40:	4499      	add	r9, r3
 801ae42:	2200      	movs	r2, #0
 801ae44:	2300      	movs	r3, #0
 801ae46:	4620      	mov	r0, r4
 801ae48:	4629      	mov	r1, r5
 801ae4a:	f7e5 fe55 	bl	8000af8 <__aeabi_dcmpeq>
 801ae4e:	b108      	cbz	r0, 801ae54 <__cvt+0xa4>
 801ae50:	f8cd 900c 	str.w	r9, [sp, #12]
 801ae54:	2230      	movs	r2, #48	; 0x30
 801ae56:	9b03      	ldr	r3, [sp, #12]
 801ae58:	454b      	cmp	r3, r9
 801ae5a:	d307      	bcc.n	801ae6c <__cvt+0xbc>
 801ae5c:	9b03      	ldr	r3, [sp, #12]
 801ae5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ae60:	1bdb      	subs	r3, r3, r7
 801ae62:	4638      	mov	r0, r7
 801ae64:	6013      	str	r3, [r2, #0]
 801ae66:	b004      	add	sp, #16
 801ae68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae6c:	1c59      	adds	r1, r3, #1
 801ae6e:	9103      	str	r1, [sp, #12]
 801ae70:	701a      	strb	r2, [r3, #0]
 801ae72:	e7f0      	b.n	801ae56 <__cvt+0xa6>

0801ae74 <__exponent>:
 801ae74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ae76:	4603      	mov	r3, r0
 801ae78:	2900      	cmp	r1, #0
 801ae7a:	bfb8      	it	lt
 801ae7c:	4249      	neglt	r1, r1
 801ae7e:	f803 2b02 	strb.w	r2, [r3], #2
 801ae82:	bfb4      	ite	lt
 801ae84:	222d      	movlt	r2, #45	; 0x2d
 801ae86:	222b      	movge	r2, #43	; 0x2b
 801ae88:	2909      	cmp	r1, #9
 801ae8a:	7042      	strb	r2, [r0, #1]
 801ae8c:	dd2a      	ble.n	801aee4 <__exponent+0x70>
 801ae8e:	f10d 0207 	add.w	r2, sp, #7
 801ae92:	4617      	mov	r7, r2
 801ae94:	260a      	movs	r6, #10
 801ae96:	4694      	mov	ip, r2
 801ae98:	fb91 f5f6 	sdiv	r5, r1, r6
 801ae9c:	fb06 1415 	mls	r4, r6, r5, r1
 801aea0:	3430      	adds	r4, #48	; 0x30
 801aea2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801aea6:	460c      	mov	r4, r1
 801aea8:	2c63      	cmp	r4, #99	; 0x63
 801aeaa:	f102 32ff 	add.w	r2, r2, #4294967295
 801aeae:	4629      	mov	r1, r5
 801aeb0:	dcf1      	bgt.n	801ae96 <__exponent+0x22>
 801aeb2:	3130      	adds	r1, #48	; 0x30
 801aeb4:	f1ac 0402 	sub.w	r4, ip, #2
 801aeb8:	f802 1c01 	strb.w	r1, [r2, #-1]
 801aebc:	1c41      	adds	r1, r0, #1
 801aebe:	4622      	mov	r2, r4
 801aec0:	42ba      	cmp	r2, r7
 801aec2:	d30a      	bcc.n	801aeda <__exponent+0x66>
 801aec4:	f10d 0209 	add.w	r2, sp, #9
 801aec8:	eba2 020c 	sub.w	r2, r2, ip
 801aecc:	42bc      	cmp	r4, r7
 801aece:	bf88      	it	hi
 801aed0:	2200      	movhi	r2, #0
 801aed2:	4413      	add	r3, r2
 801aed4:	1a18      	subs	r0, r3, r0
 801aed6:	b003      	add	sp, #12
 801aed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aeda:	f812 5b01 	ldrb.w	r5, [r2], #1
 801aede:	f801 5f01 	strb.w	r5, [r1, #1]!
 801aee2:	e7ed      	b.n	801aec0 <__exponent+0x4c>
 801aee4:	2330      	movs	r3, #48	; 0x30
 801aee6:	3130      	adds	r1, #48	; 0x30
 801aee8:	7083      	strb	r3, [r0, #2]
 801aeea:	70c1      	strb	r1, [r0, #3]
 801aeec:	1d03      	adds	r3, r0, #4
 801aeee:	e7f1      	b.n	801aed4 <__exponent+0x60>

0801aef0 <_printf_float>:
 801aef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aef4:	ed2d 8b02 	vpush	{d8}
 801aef8:	b08d      	sub	sp, #52	; 0x34
 801aefa:	460c      	mov	r4, r1
 801aefc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801af00:	4616      	mov	r6, r2
 801af02:	461f      	mov	r7, r3
 801af04:	4605      	mov	r5, r0
 801af06:	f001 f8ef 	bl	801c0e8 <_localeconv_r>
 801af0a:	f8d0 a000 	ldr.w	sl, [r0]
 801af0e:	4650      	mov	r0, sl
 801af10:	f7e5 f9c6 	bl	80002a0 <strlen>
 801af14:	2300      	movs	r3, #0
 801af16:	930a      	str	r3, [sp, #40]	; 0x28
 801af18:	6823      	ldr	r3, [r4, #0]
 801af1a:	9305      	str	r3, [sp, #20]
 801af1c:	f8d8 3000 	ldr.w	r3, [r8]
 801af20:	f894 b018 	ldrb.w	fp, [r4, #24]
 801af24:	3307      	adds	r3, #7
 801af26:	f023 0307 	bic.w	r3, r3, #7
 801af2a:	f103 0208 	add.w	r2, r3, #8
 801af2e:	f8c8 2000 	str.w	r2, [r8]
 801af32:	e9d3 8900 	ldrd	r8, r9, [r3]
 801af36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801af3a:	9307      	str	r3, [sp, #28]
 801af3c:	f8cd 8018 	str.w	r8, [sp, #24]
 801af40:	ee08 0a10 	vmov	s16, r0
 801af44:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801af48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801af4c:	4b9e      	ldr	r3, [pc, #632]	; (801b1c8 <_printf_float+0x2d8>)
 801af4e:	f04f 32ff 	mov.w	r2, #4294967295
 801af52:	f7e5 fe03 	bl	8000b5c <__aeabi_dcmpun>
 801af56:	bb88      	cbnz	r0, 801afbc <_printf_float+0xcc>
 801af58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801af5c:	4b9a      	ldr	r3, [pc, #616]	; (801b1c8 <_printf_float+0x2d8>)
 801af5e:	f04f 32ff 	mov.w	r2, #4294967295
 801af62:	f7e5 fddd 	bl	8000b20 <__aeabi_dcmple>
 801af66:	bb48      	cbnz	r0, 801afbc <_printf_float+0xcc>
 801af68:	2200      	movs	r2, #0
 801af6a:	2300      	movs	r3, #0
 801af6c:	4640      	mov	r0, r8
 801af6e:	4649      	mov	r1, r9
 801af70:	f7e5 fdcc 	bl	8000b0c <__aeabi_dcmplt>
 801af74:	b110      	cbz	r0, 801af7c <_printf_float+0x8c>
 801af76:	232d      	movs	r3, #45	; 0x2d
 801af78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801af7c:	4a93      	ldr	r2, [pc, #588]	; (801b1cc <_printf_float+0x2dc>)
 801af7e:	4b94      	ldr	r3, [pc, #592]	; (801b1d0 <_printf_float+0x2e0>)
 801af80:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801af84:	bf94      	ite	ls
 801af86:	4690      	movls	r8, r2
 801af88:	4698      	movhi	r8, r3
 801af8a:	2303      	movs	r3, #3
 801af8c:	6123      	str	r3, [r4, #16]
 801af8e:	9b05      	ldr	r3, [sp, #20]
 801af90:	f023 0304 	bic.w	r3, r3, #4
 801af94:	6023      	str	r3, [r4, #0]
 801af96:	f04f 0900 	mov.w	r9, #0
 801af9a:	9700      	str	r7, [sp, #0]
 801af9c:	4633      	mov	r3, r6
 801af9e:	aa0b      	add	r2, sp, #44	; 0x2c
 801afa0:	4621      	mov	r1, r4
 801afa2:	4628      	mov	r0, r5
 801afa4:	f000 f9da 	bl	801b35c <_printf_common>
 801afa8:	3001      	adds	r0, #1
 801afaa:	f040 8090 	bne.w	801b0ce <_printf_float+0x1de>
 801afae:	f04f 30ff 	mov.w	r0, #4294967295
 801afb2:	b00d      	add	sp, #52	; 0x34
 801afb4:	ecbd 8b02 	vpop	{d8}
 801afb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afbc:	4642      	mov	r2, r8
 801afbe:	464b      	mov	r3, r9
 801afc0:	4640      	mov	r0, r8
 801afc2:	4649      	mov	r1, r9
 801afc4:	f7e5 fdca 	bl	8000b5c <__aeabi_dcmpun>
 801afc8:	b140      	cbz	r0, 801afdc <_printf_float+0xec>
 801afca:	464b      	mov	r3, r9
 801afcc:	2b00      	cmp	r3, #0
 801afce:	bfbc      	itt	lt
 801afd0:	232d      	movlt	r3, #45	; 0x2d
 801afd2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801afd6:	4a7f      	ldr	r2, [pc, #508]	; (801b1d4 <_printf_float+0x2e4>)
 801afd8:	4b7f      	ldr	r3, [pc, #508]	; (801b1d8 <_printf_float+0x2e8>)
 801afda:	e7d1      	b.n	801af80 <_printf_float+0x90>
 801afdc:	6863      	ldr	r3, [r4, #4]
 801afde:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801afe2:	9206      	str	r2, [sp, #24]
 801afe4:	1c5a      	adds	r2, r3, #1
 801afe6:	d13f      	bne.n	801b068 <_printf_float+0x178>
 801afe8:	2306      	movs	r3, #6
 801afea:	6063      	str	r3, [r4, #4]
 801afec:	9b05      	ldr	r3, [sp, #20]
 801afee:	6861      	ldr	r1, [r4, #4]
 801aff0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801aff4:	2300      	movs	r3, #0
 801aff6:	9303      	str	r3, [sp, #12]
 801aff8:	ab0a      	add	r3, sp, #40	; 0x28
 801affa:	e9cd b301 	strd	fp, r3, [sp, #4]
 801affe:	ab09      	add	r3, sp, #36	; 0x24
 801b000:	ec49 8b10 	vmov	d0, r8, r9
 801b004:	9300      	str	r3, [sp, #0]
 801b006:	6022      	str	r2, [r4, #0]
 801b008:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801b00c:	4628      	mov	r0, r5
 801b00e:	f7ff fecf 	bl	801adb0 <__cvt>
 801b012:	9b06      	ldr	r3, [sp, #24]
 801b014:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b016:	2b47      	cmp	r3, #71	; 0x47
 801b018:	4680      	mov	r8, r0
 801b01a:	d108      	bne.n	801b02e <_printf_float+0x13e>
 801b01c:	1cc8      	adds	r0, r1, #3
 801b01e:	db02      	blt.n	801b026 <_printf_float+0x136>
 801b020:	6863      	ldr	r3, [r4, #4]
 801b022:	4299      	cmp	r1, r3
 801b024:	dd41      	ble.n	801b0aa <_printf_float+0x1ba>
 801b026:	f1ab 0302 	sub.w	r3, fp, #2
 801b02a:	fa5f fb83 	uxtb.w	fp, r3
 801b02e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801b032:	d820      	bhi.n	801b076 <_printf_float+0x186>
 801b034:	3901      	subs	r1, #1
 801b036:	465a      	mov	r2, fp
 801b038:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b03c:	9109      	str	r1, [sp, #36]	; 0x24
 801b03e:	f7ff ff19 	bl	801ae74 <__exponent>
 801b042:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b044:	1813      	adds	r3, r2, r0
 801b046:	2a01      	cmp	r2, #1
 801b048:	4681      	mov	r9, r0
 801b04a:	6123      	str	r3, [r4, #16]
 801b04c:	dc02      	bgt.n	801b054 <_printf_float+0x164>
 801b04e:	6822      	ldr	r2, [r4, #0]
 801b050:	07d2      	lsls	r2, r2, #31
 801b052:	d501      	bpl.n	801b058 <_printf_float+0x168>
 801b054:	3301      	adds	r3, #1
 801b056:	6123      	str	r3, [r4, #16]
 801b058:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801b05c:	2b00      	cmp	r3, #0
 801b05e:	d09c      	beq.n	801af9a <_printf_float+0xaa>
 801b060:	232d      	movs	r3, #45	; 0x2d
 801b062:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b066:	e798      	b.n	801af9a <_printf_float+0xaa>
 801b068:	9a06      	ldr	r2, [sp, #24]
 801b06a:	2a47      	cmp	r2, #71	; 0x47
 801b06c:	d1be      	bne.n	801afec <_printf_float+0xfc>
 801b06e:	2b00      	cmp	r3, #0
 801b070:	d1bc      	bne.n	801afec <_printf_float+0xfc>
 801b072:	2301      	movs	r3, #1
 801b074:	e7b9      	b.n	801afea <_printf_float+0xfa>
 801b076:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801b07a:	d118      	bne.n	801b0ae <_printf_float+0x1be>
 801b07c:	2900      	cmp	r1, #0
 801b07e:	6863      	ldr	r3, [r4, #4]
 801b080:	dd0b      	ble.n	801b09a <_printf_float+0x1aa>
 801b082:	6121      	str	r1, [r4, #16]
 801b084:	b913      	cbnz	r3, 801b08c <_printf_float+0x19c>
 801b086:	6822      	ldr	r2, [r4, #0]
 801b088:	07d0      	lsls	r0, r2, #31
 801b08a:	d502      	bpl.n	801b092 <_printf_float+0x1a2>
 801b08c:	3301      	adds	r3, #1
 801b08e:	440b      	add	r3, r1
 801b090:	6123      	str	r3, [r4, #16]
 801b092:	65a1      	str	r1, [r4, #88]	; 0x58
 801b094:	f04f 0900 	mov.w	r9, #0
 801b098:	e7de      	b.n	801b058 <_printf_float+0x168>
 801b09a:	b913      	cbnz	r3, 801b0a2 <_printf_float+0x1b2>
 801b09c:	6822      	ldr	r2, [r4, #0]
 801b09e:	07d2      	lsls	r2, r2, #31
 801b0a0:	d501      	bpl.n	801b0a6 <_printf_float+0x1b6>
 801b0a2:	3302      	adds	r3, #2
 801b0a4:	e7f4      	b.n	801b090 <_printf_float+0x1a0>
 801b0a6:	2301      	movs	r3, #1
 801b0a8:	e7f2      	b.n	801b090 <_printf_float+0x1a0>
 801b0aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801b0ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b0b0:	4299      	cmp	r1, r3
 801b0b2:	db05      	blt.n	801b0c0 <_printf_float+0x1d0>
 801b0b4:	6823      	ldr	r3, [r4, #0]
 801b0b6:	6121      	str	r1, [r4, #16]
 801b0b8:	07d8      	lsls	r0, r3, #31
 801b0ba:	d5ea      	bpl.n	801b092 <_printf_float+0x1a2>
 801b0bc:	1c4b      	adds	r3, r1, #1
 801b0be:	e7e7      	b.n	801b090 <_printf_float+0x1a0>
 801b0c0:	2900      	cmp	r1, #0
 801b0c2:	bfd4      	ite	le
 801b0c4:	f1c1 0202 	rsble	r2, r1, #2
 801b0c8:	2201      	movgt	r2, #1
 801b0ca:	4413      	add	r3, r2
 801b0cc:	e7e0      	b.n	801b090 <_printf_float+0x1a0>
 801b0ce:	6823      	ldr	r3, [r4, #0]
 801b0d0:	055a      	lsls	r2, r3, #21
 801b0d2:	d407      	bmi.n	801b0e4 <_printf_float+0x1f4>
 801b0d4:	6923      	ldr	r3, [r4, #16]
 801b0d6:	4642      	mov	r2, r8
 801b0d8:	4631      	mov	r1, r6
 801b0da:	4628      	mov	r0, r5
 801b0dc:	47b8      	blx	r7
 801b0de:	3001      	adds	r0, #1
 801b0e0:	d12c      	bne.n	801b13c <_printf_float+0x24c>
 801b0e2:	e764      	b.n	801afae <_printf_float+0xbe>
 801b0e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801b0e8:	f240 80e0 	bls.w	801b2ac <_printf_float+0x3bc>
 801b0ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b0f0:	2200      	movs	r2, #0
 801b0f2:	2300      	movs	r3, #0
 801b0f4:	f7e5 fd00 	bl	8000af8 <__aeabi_dcmpeq>
 801b0f8:	2800      	cmp	r0, #0
 801b0fa:	d034      	beq.n	801b166 <_printf_float+0x276>
 801b0fc:	4a37      	ldr	r2, [pc, #220]	; (801b1dc <_printf_float+0x2ec>)
 801b0fe:	2301      	movs	r3, #1
 801b100:	4631      	mov	r1, r6
 801b102:	4628      	mov	r0, r5
 801b104:	47b8      	blx	r7
 801b106:	3001      	adds	r0, #1
 801b108:	f43f af51 	beq.w	801afae <_printf_float+0xbe>
 801b10c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b110:	429a      	cmp	r2, r3
 801b112:	db02      	blt.n	801b11a <_printf_float+0x22a>
 801b114:	6823      	ldr	r3, [r4, #0]
 801b116:	07d8      	lsls	r0, r3, #31
 801b118:	d510      	bpl.n	801b13c <_printf_float+0x24c>
 801b11a:	ee18 3a10 	vmov	r3, s16
 801b11e:	4652      	mov	r2, sl
 801b120:	4631      	mov	r1, r6
 801b122:	4628      	mov	r0, r5
 801b124:	47b8      	blx	r7
 801b126:	3001      	adds	r0, #1
 801b128:	f43f af41 	beq.w	801afae <_printf_float+0xbe>
 801b12c:	f04f 0800 	mov.w	r8, #0
 801b130:	f104 091a 	add.w	r9, r4, #26
 801b134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b136:	3b01      	subs	r3, #1
 801b138:	4543      	cmp	r3, r8
 801b13a:	dc09      	bgt.n	801b150 <_printf_float+0x260>
 801b13c:	6823      	ldr	r3, [r4, #0]
 801b13e:	079b      	lsls	r3, r3, #30
 801b140:	f100 8107 	bmi.w	801b352 <_printf_float+0x462>
 801b144:	68e0      	ldr	r0, [r4, #12]
 801b146:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b148:	4298      	cmp	r0, r3
 801b14a:	bfb8      	it	lt
 801b14c:	4618      	movlt	r0, r3
 801b14e:	e730      	b.n	801afb2 <_printf_float+0xc2>
 801b150:	2301      	movs	r3, #1
 801b152:	464a      	mov	r2, r9
 801b154:	4631      	mov	r1, r6
 801b156:	4628      	mov	r0, r5
 801b158:	47b8      	blx	r7
 801b15a:	3001      	adds	r0, #1
 801b15c:	f43f af27 	beq.w	801afae <_printf_float+0xbe>
 801b160:	f108 0801 	add.w	r8, r8, #1
 801b164:	e7e6      	b.n	801b134 <_printf_float+0x244>
 801b166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b168:	2b00      	cmp	r3, #0
 801b16a:	dc39      	bgt.n	801b1e0 <_printf_float+0x2f0>
 801b16c:	4a1b      	ldr	r2, [pc, #108]	; (801b1dc <_printf_float+0x2ec>)
 801b16e:	2301      	movs	r3, #1
 801b170:	4631      	mov	r1, r6
 801b172:	4628      	mov	r0, r5
 801b174:	47b8      	blx	r7
 801b176:	3001      	adds	r0, #1
 801b178:	f43f af19 	beq.w	801afae <_printf_float+0xbe>
 801b17c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801b180:	4313      	orrs	r3, r2
 801b182:	d102      	bne.n	801b18a <_printf_float+0x29a>
 801b184:	6823      	ldr	r3, [r4, #0]
 801b186:	07d9      	lsls	r1, r3, #31
 801b188:	d5d8      	bpl.n	801b13c <_printf_float+0x24c>
 801b18a:	ee18 3a10 	vmov	r3, s16
 801b18e:	4652      	mov	r2, sl
 801b190:	4631      	mov	r1, r6
 801b192:	4628      	mov	r0, r5
 801b194:	47b8      	blx	r7
 801b196:	3001      	adds	r0, #1
 801b198:	f43f af09 	beq.w	801afae <_printf_float+0xbe>
 801b19c:	f04f 0900 	mov.w	r9, #0
 801b1a0:	f104 0a1a 	add.w	sl, r4, #26
 801b1a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1a6:	425b      	negs	r3, r3
 801b1a8:	454b      	cmp	r3, r9
 801b1aa:	dc01      	bgt.n	801b1b0 <_printf_float+0x2c0>
 801b1ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b1ae:	e792      	b.n	801b0d6 <_printf_float+0x1e6>
 801b1b0:	2301      	movs	r3, #1
 801b1b2:	4652      	mov	r2, sl
 801b1b4:	4631      	mov	r1, r6
 801b1b6:	4628      	mov	r0, r5
 801b1b8:	47b8      	blx	r7
 801b1ba:	3001      	adds	r0, #1
 801b1bc:	f43f aef7 	beq.w	801afae <_printf_float+0xbe>
 801b1c0:	f109 0901 	add.w	r9, r9, #1
 801b1c4:	e7ee      	b.n	801b1a4 <_printf_float+0x2b4>
 801b1c6:	bf00      	nop
 801b1c8:	7fefffff 	.word	0x7fefffff
 801b1cc:	08022e0c 	.word	0x08022e0c
 801b1d0:	08022e10 	.word	0x08022e10
 801b1d4:	08022e14 	.word	0x08022e14
 801b1d8:	08022e18 	.word	0x08022e18
 801b1dc:	08023200 	.word	0x08023200
 801b1e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b1e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b1e4:	429a      	cmp	r2, r3
 801b1e6:	bfa8      	it	ge
 801b1e8:	461a      	movge	r2, r3
 801b1ea:	2a00      	cmp	r2, #0
 801b1ec:	4691      	mov	r9, r2
 801b1ee:	dc37      	bgt.n	801b260 <_printf_float+0x370>
 801b1f0:	f04f 0b00 	mov.w	fp, #0
 801b1f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b1f8:	f104 021a 	add.w	r2, r4, #26
 801b1fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b1fe:	9305      	str	r3, [sp, #20]
 801b200:	eba3 0309 	sub.w	r3, r3, r9
 801b204:	455b      	cmp	r3, fp
 801b206:	dc33      	bgt.n	801b270 <_printf_float+0x380>
 801b208:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b20c:	429a      	cmp	r2, r3
 801b20e:	db3b      	blt.n	801b288 <_printf_float+0x398>
 801b210:	6823      	ldr	r3, [r4, #0]
 801b212:	07da      	lsls	r2, r3, #31
 801b214:	d438      	bmi.n	801b288 <_printf_float+0x398>
 801b216:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801b21a:	eba2 0903 	sub.w	r9, r2, r3
 801b21e:	9b05      	ldr	r3, [sp, #20]
 801b220:	1ad2      	subs	r2, r2, r3
 801b222:	4591      	cmp	r9, r2
 801b224:	bfa8      	it	ge
 801b226:	4691      	movge	r9, r2
 801b228:	f1b9 0f00 	cmp.w	r9, #0
 801b22c:	dc35      	bgt.n	801b29a <_printf_float+0x3aa>
 801b22e:	f04f 0800 	mov.w	r8, #0
 801b232:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b236:	f104 0a1a 	add.w	sl, r4, #26
 801b23a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b23e:	1a9b      	subs	r3, r3, r2
 801b240:	eba3 0309 	sub.w	r3, r3, r9
 801b244:	4543      	cmp	r3, r8
 801b246:	f77f af79 	ble.w	801b13c <_printf_float+0x24c>
 801b24a:	2301      	movs	r3, #1
 801b24c:	4652      	mov	r2, sl
 801b24e:	4631      	mov	r1, r6
 801b250:	4628      	mov	r0, r5
 801b252:	47b8      	blx	r7
 801b254:	3001      	adds	r0, #1
 801b256:	f43f aeaa 	beq.w	801afae <_printf_float+0xbe>
 801b25a:	f108 0801 	add.w	r8, r8, #1
 801b25e:	e7ec      	b.n	801b23a <_printf_float+0x34a>
 801b260:	4613      	mov	r3, r2
 801b262:	4631      	mov	r1, r6
 801b264:	4642      	mov	r2, r8
 801b266:	4628      	mov	r0, r5
 801b268:	47b8      	blx	r7
 801b26a:	3001      	adds	r0, #1
 801b26c:	d1c0      	bne.n	801b1f0 <_printf_float+0x300>
 801b26e:	e69e      	b.n	801afae <_printf_float+0xbe>
 801b270:	2301      	movs	r3, #1
 801b272:	4631      	mov	r1, r6
 801b274:	4628      	mov	r0, r5
 801b276:	9205      	str	r2, [sp, #20]
 801b278:	47b8      	blx	r7
 801b27a:	3001      	adds	r0, #1
 801b27c:	f43f ae97 	beq.w	801afae <_printf_float+0xbe>
 801b280:	9a05      	ldr	r2, [sp, #20]
 801b282:	f10b 0b01 	add.w	fp, fp, #1
 801b286:	e7b9      	b.n	801b1fc <_printf_float+0x30c>
 801b288:	ee18 3a10 	vmov	r3, s16
 801b28c:	4652      	mov	r2, sl
 801b28e:	4631      	mov	r1, r6
 801b290:	4628      	mov	r0, r5
 801b292:	47b8      	blx	r7
 801b294:	3001      	adds	r0, #1
 801b296:	d1be      	bne.n	801b216 <_printf_float+0x326>
 801b298:	e689      	b.n	801afae <_printf_float+0xbe>
 801b29a:	9a05      	ldr	r2, [sp, #20]
 801b29c:	464b      	mov	r3, r9
 801b29e:	4442      	add	r2, r8
 801b2a0:	4631      	mov	r1, r6
 801b2a2:	4628      	mov	r0, r5
 801b2a4:	47b8      	blx	r7
 801b2a6:	3001      	adds	r0, #1
 801b2a8:	d1c1      	bne.n	801b22e <_printf_float+0x33e>
 801b2aa:	e680      	b.n	801afae <_printf_float+0xbe>
 801b2ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b2ae:	2a01      	cmp	r2, #1
 801b2b0:	dc01      	bgt.n	801b2b6 <_printf_float+0x3c6>
 801b2b2:	07db      	lsls	r3, r3, #31
 801b2b4:	d53a      	bpl.n	801b32c <_printf_float+0x43c>
 801b2b6:	2301      	movs	r3, #1
 801b2b8:	4642      	mov	r2, r8
 801b2ba:	4631      	mov	r1, r6
 801b2bc:	4628      	mov	r0, r5
 801b2be:	47b8      	blx	r7
 801b2c0:	3001      	adds	r0, #1
 801b2c2:	f43f ae74 	beq.w	801afae <_printf_float+0xbe>
 801b2c6:	ee18 3a10 	vmov	r3, s16
 801b2ca:	4652      	mov	r2, sl
 801b2cc:	4631      	mov	r1, r6
 801b2ce:	4628      	mov	r0, r5
 801b2d0:	47b8      	blx	r7
 801b2d2:	3001      	adds	r0, #1
 801b2d4:	f43f ae6b 	beq.w	801afae <_printf_float+0xbe>
 801b2d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b2dc:	2200      	movs	r2, #0
 801b2de:	2300      	movs	r3, #0
 801b2e0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801b2e4:	f7e5 fc08 	bl	8000af8 <__aeabi_dcmpeq>
 801b2e8:	b9d8      	cbnz	r0, 801b322 <_printf_float+0x432>
 801b2ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 801b2ee:	f108 0201 	add.w	r2, r8, #1
 801b2f2:	4631      	mov	r1, r6
 801b2f4:	4628      	mov	r0, r5
 801b2f6:	47b8      	blx	r7
 801b2f8:	3001      	adds	r0, #1
 801b2fa:	d10e      	bne.n	801b31a <_printf_float+0x42a>
 801b2fc:	e657      	b.n	801afae <_printf_float+0xbe>
 801b2fe:	2301      	movs	r3, #1
 801b300:	4652      	mov	r2, sl
 801b302:	4631      	mov	r1, r6
 801b304:	4628      	mov	r0, r5
 801b306:	47b8      	blx	r7
 801b308:	3001      	adds	r0, #1
 801b30a:	f43f ae50 	beq.w	801afae <_printf_float+0xbe>
 801b30e:	f108 0801 	add.w	r8, r8, #1
 801b312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b314:	3b01      	subs	r3, #1
 801b316:	4543      	cmp	r3, r8
 801b318:	dcf1      	bgt.n	801b2fe <_printf_float+0x40e>
 801b31a:	464b      	mov	r3, r9
 801b31c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b320:	e6da      	b.n	801b0d8 <_printf_float+0x1e8>
 801b322:	f04f 0800 	mov.w	r8, #0
 801b326:	f104 0a1a 	add.w	sl, r4, #26
 801b32a:	e7f2      	b.n	801b312 <_printf_float+0x422>
 801b32c:	2301      	movs	r3, #1
 801b32e:	4642      	mov	r2, r8
 801b330:	e7df      	b.n	801b2f2 <_printf_float+0x402>
 801b332:	2301      	movs	r3, #1
 801b334:	464a      	mov	r2, r9
 801b336:	4631      	mov	r1, r6
 801b338:	4628      	mov	r0, r5
 801b33a:	47b8      	blx	r7
 801b33c:	3001      	adds	r0, #1
 801b33e:	f43f ae36 	beq.w	801afae <_printf_float+0xbe>
 801b342:	f108 0801 	add.w	r8, r8, #1
 801b346:	68e3      	ldr	r3, [r4, #12]
 801b348:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b34a:	1a5b      	subs	r3, r3, r1
 801b34c:	4543      	cmp	r3, r8
 801b34e:	dcf0      	bgt.n	801b332 <_printf_float+0x442>
 801b350:	e6f8      	b.n	801b144 <_printf_float+0x254>
 801b352:	f04f 0800 	mov.w	r8, #0
 801b356:	f104 0919 	add.w	r9, r4, #25
 801b35a:	e7f4      	b.n	801b346 <_printf_float+0x456>

0801b35c <_printf_common>:
 801b35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b360:	4616      	mov	r6, r2
 801b362:	4699      	mov	r9, r3
 801b364:	688a      	ldr	r2, [r1, #8]
 801b366:	690b      	ldr	r3, [r1, #16]
 801b368:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b36c:	4293      	cmp	r3, r2
 801b36e:	bfb8      	it	lt
 801b370:	4613      	movlt	r3, r2
 801b372:	6033      	str	r3, [r6, #0]
 801b374:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b378:	4607      	mov	r7, r0
 801b37a:	460c      	mov	r4, r1
 801b37c:	b10a      	cbz	r2, 801b382 <_printf_common+0x26>
 801b37e:	3301      	adds	r3, #1
 801b380:	6033      	str	r3, [r6, #0]
 801b382:	6823      	ldr	r3, [r4, #0]
 801b384:	0699      	lsls	r1, r3, #26
 801b386:	bf42      	ittt	mi
 801b388:	6833      	ldrmi	r3, [r6, #0]
 801b38a:	3302      	addmi	r3, #2
 801b38c:	6033      	strmi	r3, [r6, #0]
 801b38e:	6825      	ldr	r5, [r4, #0]
 801b390:	f015 0506 	ands.w	r5, r5, #6
 801b394:	d106      	bne.n	801b3a4 <_printf_common+0x48>
 801b396:	f104 0a19 	add.w	sl, r4, #25
 801b39a:	68e3      	ldr	r3, [r4, #12]
 801b39c:	6832      	ldr	r2, [r6, #0]
 801b39e:	1a9b      	subs	r3, r3, r2
 801b3a0:	42ab      	cmp	r3, r5
 801b3a2:	dc26      	bgt.n	801b3f2 <_printf_common+0x96>
 801b3a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b3a8:	1e13      	subs	r3, r2, #0
 801b3aa:	6822      	ldr	r2, [r4, #0]
 801b3ac:	bf18      	it	ne
 801b3ae:	2301      	movne	r3, #1
 801b3b0:	0692      	lsls	r2, r2, #26
 801b3b2:	d42b      	bmi.n	801b40c <_printf_common+0xb0>
 801b3b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b3b8:	4649      	mov	r1, r9
 801b3ba:	4638      	mov	r0, r7
 801b3bc:	47c0      	blx	r8
 801b3be:	3001      	adds	r0, #1
 801b3c0:	d01e      	beq.n	801b400 <_printf_common+0xa4>
 801b3c2:	6823      	ldr	r3, [r4, #0]
 801b3c4:	6922      	ldr	r2, [r4, #16]
 801b3c6:	f003 0306 	and.w	r3, r3, #6
 801b3ca:	2b04      	cmp	r3, #4
 801b3cc:	bf02      	ittt	eq
 801b3ce:	68e5      	ldreq	r5, [r4, #12]
 801b3d0:	6833      	ldreq	r3, [r6, #0]
 801b3d2:	1aed      	subeq	r5, r5, r3
 801b3d4:	68a3      	ldr	r3, [r4, #8]
 801b3d6:	bf0c      	ite	eq
 801b3d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b3dc:	2500      	movne	r5, #0
 801b3de:	4293      	cmp	r3, r2
 801b3e0:	bfc4      	itt	gt
 801b3e2:	1a9b      	subgt	r3, r3, r2
 801b3e4:	18ed      	addgt	r5, r5, r3
 801b3e6:	2600      	movs	r6, #0
 801b3e8:	341a      	adds	r4, #26
 801b3ea:	42b5      	cmp	r5, r6
 801b3ec:	d11a      	bne.n	801b424 <_printf_common+0xc8>
 801b3ee:	2000      	movs	r0, #0
 801b3f0:	e008      	b.n	801b404 <_printf_common+0xa8>
 801b3f2:	2301      	movs	r3, #1
 801b3f4:	4652      	mov	r2, sl
 801b3f6:	4649      	mov	r1, r9
 801b3f8:	4638      	mov	r0, r7
 801b3fa:	47c0      	blx	r8
 801b3fc:	3001      	adds	r0, #1
 801b3fe:	d103      	bne.n	801b408 <_printf_common+0xac>
 801b400:	f04f 30ff 	mov.w	r0, #4294967295
 801b404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b408:	3501      	adds	r5, #1
 801b40a:	e7c6      	b.n	801b39a <_printf_common+0x3e>
 801b40c:	18e1      	adds	r1, r4, r3
 801b40e:	1c5a      	adds	r2, r3, #1
 801b410:	2030      	movs	r0, #48	; 0x30
 801b412:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b416:	4422      	add	r2, r4
 801b418:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b41c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b420:	3302      	adds	r3, #2
 801b422:	e7c7      	b.n	801b3b4 <_printf_common+0x58>
 801b424:	2301      	movs	r3, #1
 801b426:	4622      	mov	r2, r4
 801b428:	4649      	mov	r1, r9
 801b42a:	4638      	mov	r0, r7
 801b42c:	47c0      	blx	r8
 801b42e:	3001      	adds	r0, #1
 801b430:	d0e6      	beq.n	801b400 <_printf_common+0xa4>
 801b432:	3601      	adds	r6, #1
 801b434:	e7d9      	b.n	801b3ea <_printf_common+0x8e>
	...

0801b438 <_printf_i>:
 801b438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b43c:	7e0f      	ldrb	r7, [r1, #24]
 801b43e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b440:	2f78      	cmp	r7, #120	; 0x78
 801b442:	4691      	mov	r9, r2
 801b444:	4680      	mov	r8, r0
 801b446:	460c      	mov	r4, r1
 801b448:	469a      	mov	sl, r3
 801b44a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b44e:	d807      	bhi.n	801b460 <_printf_i+0x28>
 801b450:	2f62      	cmp	r7, #98	; 0x62
 801b452:	d80a      	bhi.n	801b46a <_printf_i+0x32>
 801b454:	2f00      	cmp	r7, #0
 801b456:	f000 80d4 	beq.w	801b602 <_printf_i+0x1ca>
 801b45a:	2f58      	cmp	r7, #88	; 0x58
 801b45c:	f000 80c0 	beq.w	801b5e0 <_printf_i+0x1a8>
 801b460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b464:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b468:	e03a      	b.n	801b4e0 <_printf_i+0xa8>
 801b46a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b46e:	2b15      	cmp	r3, #21
 801b470:	d8f6      	bhi.n	801b460 <_printf_i+0x28>
 801b472:	a101      	add	r1, pc, #4	; (adr r1, 801b478 <_printf_i+0x40>)
 801b474:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b478:	0801b4d1 	.word	0x0801b4d1
 801b47c:	0801b4e5 	.word	0x0801b4e5
 801b480:	0801b461 	.word	0x0801b461
 801b484:	0801b461 	.word	0x0801b461
 801b488:	0801b461 	.word	0x0801b461
 801b48c:	0801b461 	.word	0x0801b461
 801b490:	0801b4e5 	.word	0x0801b4e5
 801b494:	0801b461 	.word	0x0801b461
 801b498:	0801b461 	.word	0x0801b461
 801b49c:	0801b461 	.word	0x0801b461
 801b4a0:	0801b461 	.word	0x0801b461
 801b4a4:	0801b5e9 	.word	0x0801b5e9
 801b4a8:	0801b511 	.word	0x0801b511
 801b4ac:	0801b5a3 	.word	0x0801b5a3
 801b4b0:	0801b461 	.word	0x0801b461
 801b4b4:	0801b461 	.word	0x0801b461
 801b4b8:	0801b60b 	.word	0x0801b60b
 801b4bc:	0801b461 	.word	0x0801b461
 801b4c0:	0801b511 	.word	0x0801b511
 801b4c4:	0801b461 	.word	0x0801b461
 801b4c8:	0801b461 	.word	0x0801b461
 801b4cc:	0801b5ab 	.word	0x0801b5ab
 801b4d0:	682b      	ldr	r3, [r5, #0]
 801b4d2:	1d1a      	adds	r2, r3, #4
 801b4d4:	681b      	ldr	r3, [r3, #0]
 801b4d6:	602a      	str	r2, [r5, #0]
 801b4d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b4dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b4e0:	2301      	movs	r3, #1
 801b4e2:	e09f      	b.n	801b624 <_printf_i+0x1ec>
 801b4e4:	6820      	ldr	r0, [r4, #0]
 801b4e6:	682b      	ldr	r3, [r5, #0]
 801b4e8:	0607      	lsls	r7, r0, #24
 801b4ea:	f103 0104 	add.w	r1, r3, #4
 801b4ee:	6029      	str	r1, [r5, #0]
 801b4f0:	d501      	bpl.n	801b4f6 <_printf_i+0xbe>
 801b4f2:	681e      	ldr	r6, [r3, #0]
 801b4f4:	e003      	b.n	801b4fe <_printf_i+0xc6>
 801b4f6:	0646      	lsls	r6, r0, #25
 801b4f8:	d5fb      	bpl.n	801b4f2 <_printf_i+0xba>
 801b4fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b4fe:	2e00      	cmp	r6, #0
 801b500:	da03      	bge.n	801b50a <_printf_i+0xd2>
 801b502:	232d      	movs	r3, #45	; 0x2d
 801b504:	4276      	negs	r6, r6
 801b506:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b50a:	485a      	ldr	r0, [pc, #360]	; (801b674 <_printf_i+0x23c>)
 801b50c:	230a      	movs	r3, #10
 801b50e:	e012      	b.n	801b536 <_printf_i+0xfe>
 801b510:	682b      	ldr	r3, [r5, #0]
 801b512:	6820      	ldr	r0, [r4, #0]
 801b514:	1d19      	adds	r1, r3, #4
 801b516:	6029      	str	r1, [r5, #0]
 801b518:	0605      	lsls	r5, r0, #24
 801b51a:	d501      	bpl.n	801b520 <_printf_i+0xe8>
 801b51c:	681e      	ldr	r6, [r3, #0]
 801b51e:	e002      	b.n	801b526 <_printf_i+0xee>
 801b520:	0641      	lsls	r1, r0, #25
 801b522:	d5fb      	bpl.n	801b51c <_printf_i+0xe4>
 801b524:	881e      	ldrh	r6, [r3, #0]
 801b526:	4853      	ldr	r0, [pc, #332]	; (801b674 <_printf_i+0x23c>)
 801b528:	2f6f      	cmp	r7, #111	; 0x6f
 801b52a:	bf0c      	ite	eq
 801b52c:	2308      	moveq	r3, #8
 801b52e:	230a      	movne	r3, #10
 801b530:	2100      	movs	r1, #0
 801b532:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b536:	6865      	ldr	r5, [r4, #4]
 801b538:	60a5      	str	r5, [r4, #8]
 801b53a:	2d00      	cmp	r5, #0
 801b53c:	bfa2      	ittt	ge
 801b53e:	6821      	ldrge	r1, [r4, #0]
 801b540:	f021 0104 	bicge.w	r1, r1, #4
 801b544:	6021      	strge	r1, [r4, #0]
 801b546:	b90e      	cbnz	r6, 801b54c <_printf_i+0x114>
 801b548:	2d00      	cmp	r5, #0
 801b54a:	d04b      	beq.n	801b5e4 <_printf_i+0x1ac>
 801b54c:	4615      	mov	r5, r2
 801b54e:	fbb6 f1f3 	udiv	r1, r6, r3
 801b552:	fb03 6711 	mls	r7, r3, r1, r6
 801b556:	5dc7      	ldrb	r7, [r0, r7]
 801b558:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b55c:	4637      	mov	r7, r6
 801b55e:	42bb      	cmp	r3, r7
 801b560:	460e      	mov	r6, r1
 801b562:	d9f4      	bls.n	801b54e <_printf_i+0x116>
 801b564:	2b08      	cmp	r3, #8
 801b566:	d10b      	bne.n	801b580 <_printf_i+0x148>
 801b568:	6823      	ldr	r3, [r4, #0]
 801b56a:	07de      	lsls	r6, r3, #31
 801b56c:	d508      	bpl.n	801b580 <_printf_i+0x148>
 801b56e:	6923      	ldr	r3, [r4, #16]
 801b570:	6861      	ldr	r1, [r4, #4]
 801b572:	4299      	cmp	r1, r3
 801b574:	bfde      	ittt	le
 801b576:	2330      	movle	r3, #48	; 0x30
 801b578:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b57c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b580:	1b52      	subs	r2, r2, r5
 801b582:	6122      	str	r2, [r4, #16]
 801b584:	f8cd a000 	str.w	sl, [sp]
 801b588:	464b      	mov	r3, r9
 801b58a:	aa03      	add	r2, sp, #12
 801b58c:	4621      	mov	r1, r4
 801b58e:	4640      	mov	r0, r8
 801b590:	f7ff fee4 	bl	801b35c <_printf_common>
 801b594:	3001      	adds	r0, #1
 801b596:	d14a      	bne.n	801b62e <_printf_i+0x1f6>
 801b598:	f04f 30ff 	mov.w	r0, #4294967295
 801b59c:	b004      	add	sp, #16
 801b59e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b5a2:	6823      	ldr	r3, [r4, #0]
 801b5a4:	f043 0320 	orr.w	r3, r3, #32
 801b5a8:	6023      	str	r3, [r4, #0]
 801b5aa:	4833      	ldr	r0, [pc, #204]	; (801b678 <_printf_i+0x240>)
 801b5ac:	2778      	movs	r7, #120	; 0x78
 801b5ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b5b2:	6823      	ldr	r3, [r4, #0]
 801b5b4:	6829      	ldr	r1, [r5, #0]
 801b5b6:	061f      	lsls	r7, r3, #24
 801b5b8:	f851 6b04 	ldr.w	r6, [r1], #4
 801b5bc:	d402      	bmi.n	801b5c4 <_printf_i+0x18c>
 801b5be:	065f      	lsls	r7, r3, #25
 801b5c0:	bf48      	it	mi
 801b5c2:	b2b6      	uxthmi	r6, r6
 801b5c4:	07df      	lsls	r7, r3, #31
 801b5c6:	bf48      	it	mi
 801b5c8:	f043 0320 	orrmi.w	r3, r3, #32
 801b5cc:	6029      	str	r1, [r5, #0]
 801b5ce:	bf48      	it	mi
 801b5d0:	6023      	strmi	r3, [r4, #0]
 801b5d2:	b91e      	cbnz	r6, 801b5dc <_printf_i+0x1a4>
 801b5d4:	6823      	ldr	r3, [r4, #0]
 801b5d6:	f023 0320 	bic.w	r3, r3, #32
 801b5da:	6023      	str	r3, [r4, #0]
 801b5dc:	2310      	movs	r3, #16
 801b5de:	e7a7      	b.n	801b530 <_printf_i+0xf8>
 801b5e0:	4824      	ldr	r0, [pc, #144]	; (801b674 <_printf_i+0x23c>)
 801b5e2:	e7e4      	b.n	801b5ae <_printf_i+0x176>
 801b5e4:	4615      	mov	r5, r2
 801b5e6:	e7bd      	b.n	801b564 <_printf_i+0x12c>
 801b5e8:	682b      	ldr	r3, [r5, #0]
 801b5ea:	6826      	ldr	r6, [r4, #0]
 801b5ec:	6961      	ldr	r1, [r4, #20]
 801b5ee:	1d18      	adds	r0, r3, #4
 801b5f0:	6028      	str	r0, [r5, #0]
 801b5f2:	0635      	lsls	r5, r6, #24
 801b5f4:	681b      	ldr	r3, [r3, #0]
 801b5f6:	d501      	bpl.n	801b5fc <_printf_i+0x1c4>
 801b5f8:	6019      	str	r1, [r3, #0]
 801b5fa:	e002      	b.n	801b602 <_printf_i+0x1ca>
 801b5fc:	0670      	lsls	r0, r6, #25
 801b5fe:	d5fb      	bpl.n	801b5f8 <_printf_i+0x1c0>
 801b600:	8019      	strh	r1, [r3, #0]
 801b602:	2300      	movs	r3, #0
 801b604:	6123      	str	r3, [r4, #16]
 801b606:	4615      	mov	r5, r2
 801b608:	e7bc      	b.n	801b584 <_printf_i+0x14c>
 801b60a:	682b      	ldr	r3, [r5, #0]
 801b60c:	1d1a      	adds	r2, r3, #4
 801b60e:	602a      	str	r2, [r5, #0]
 801b610:	681d      	ldr	r5, [r3, #0]
 801b612:	6862      	ldr	r2, [r4, #4]
 801b614:	2100      	movs	r1, #0
 801b616:	4628      	mov	r0, r5
 801b618:	f7e4 fdf2 	bl	8000200 <memchr>
 801b61c:	b108      	cbz	r0, 801b622 <_printf_i+0x1ea>
 801b61e:	1b40      	subs	r0, r0, r5
 801b620:	6060      	str	r0, [r4, #4]
 801b622:	6863      	ldr	r3, [r4, #4]
 801b624:	6123      	str	r3, [r4, #16]
 801b626:	2300      	movs	r3, #0
 801b628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b62c:	e7aa      	b.n	801b584 <_printf_i+0x14c>
 801b62e:	6923      	ldr	r3, [r4, #16]
 801b630:	462a      	mov	r2, r5
 801b632:	4649      	mov	r1, r9
 801b634:	4640      	mov	r0, r8
 801b636:	47d0      	blx	sl
 801b638:	3001      	adds	r0, #1
 801b63a:	d0ad      	beq.n	801b598 <_printf_i+0x160>
 801b63c:	6823      	ldr	r3, [r4, #0]
 801b63e:	079b      	lsls	r3, r3, #30
 801b640:	d413      	bmi.n	801b66a <_printf_i+0x232>
 801b642:	68e0      	ldr	r0, [r4, #12]
 801b644:	9b03      	ldr	r3, [sp, #12]
 801b646:	4298      	cmp	r0, r3
 801b648:	bfb8      	it	lt
 801b64a:	4618      	movlt	r0, r3
 801b64c:	e7a6      	b.n	801b59c <_printf_i+0x164>
 801b64e:	2301      	movs	r3, #1
 801b650:	4632      	mov	r2, r6
 801b652:	4649      	mov	r1, r9
 801b654:	4640      	mov	r0, r8
 801b656:	47d0      	blx	sl
 801b658:	3001      	adds	r0, #1
 801b65a:	d09d      	beq.n	801b598 <_printf_i+0x160>
 801b65c:	3501      	adds	r5, #1
 801b65e:	68e3      	ldr	r3, [r4, #12]
 801b660:	9903      	ldr	r1, [sp, #12]
 801b662:	1a5b      	subs	r3, r3, r1
 801b664:	42ab      	cmp	r3, r5
 801b666:	dcf2      	bgt.n	801b64e <_printf_i+0x216>
 801b668:	e7eb      	b.n	801b642 <_printf_i+0x20a>
 801b66a:	2500      	movs	r5, #0
 801b66c:	f104 0619 	add.w	r6, r4, #25
 801b670:	e7f5      	b.n	801b65e <_printf_i+0x226>
 801b672:	bf00      	nop
 801b674:	08022e1c 	.word	0x08022e1c
 801b678:	08022e2d 	.word	0x08022e2d

0801b67c <_scanf_float>:
 801b67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b680:	b087      	sub	sp, #28
 801b682:	4617      	mov	r7, r2
 801b684:	9303      	str	r3, [sp, #12]
 801b686:	688b      	ldr	r3, [r1, #8]
 801b688:	1e5a      	subs	r2, r3, #1
 801b68a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801b68e:	bf83      	ittte	hi
 801b690:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801b694:	195b      	addhi	r3, r3, r5
 801b696:	9302      	strhi	r3, [sp, #8]
 801b698:	2300      	movls	r3, #0
 801b69a:	bf86      	itte	hi
 801b69c:	f240 135d 	movwhi	r3, #349	; 0x15d
 801b6a0:	608b      	strhi	r3, [r1, #8]
 801b6a2:	9302      	strls	r3, [sp, #8]
 801b6a4:	680b      	ldr	r3, [r1, #0]
 801b6a6:	468b      	mov	fp, r1
 801b6a8:	2500      	movs	r5, #0
 801b6aa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801b6ae:	f84b 3b1c 	str.w	r3, [fp], #28
 801b6b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b6b6:	4680      	mov	r8, r0
 801b6b8:	460c      	mov	r4, r1
 801b6ba:	465e      	mov	r6, fp
 801b6bc:	46aa      	mov	sl, r5
 801b6be:	46a9      	mov	r9, r5
 801b6c0:	9501      	str	r5, [sp, #4]
 801b6c2:	68a2      	ldr	r2, [r4, #8]
 801b6c4:	b152      	cbz	r2, 801b6dc <_scanf_float+0x60>
 801b6c6:	683b      	ldr	r3, [r7, #0]
 801b6c8:	781b      	ldrb	r3, [r3, #0]
 801b6ca:	2b4e      	cmp	r3, #78	; 0x4e
 801b6cc:	d864      	bhi.n	801b798 <_scanf_float+0x11c>
 801b6ce:	2b40      	cmp	r3, #64	; 0x40
 801b6d0:	d83c      	bhi.n	801b74c <_scanf_float+0xd0>
 801b6d2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801b6d6:	b2c8      	uxtb	r0, r1
 801b6d8:	280e      	cmp	r0, #14
 801b6da:	d93a      	bls.n	801b752 <_scanf_float+0xd6>
 801b6dc:	f1b9 0f00 	cmp.w	r9, #0
 801b6e0:	d003      	beq.n	801b6ea <_scanf_float+0x6e>
 801b6e2:	6823      	ldr	r3, [r4, #0]
 801b6e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b6e8:	6023      	str	r3, [r4, #0]
 801b6ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b6ee:	f1ba 0f01 	cmp.w	sl, #1
 801b6f2:	f200 8113 	bhi.w	801b91c <_scanf_float+0x2a0>
 801b6f6:	455e      	cmp	r6, fp
 801b6f8:	f200 8105 	bhi.w	801b906 <_scanf_float+0x28a>
 801b6fc:	2501      	movs	r5, #1
 801b6fe:	4628      	mov	r0, r5
 801b700:	b007      	add	sp, #28
 801b702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b706:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801b70a:	2a0d      	cmp	r2, #13
 801b70c:	d8e6      	bhi.n	801b6dc <_scanf_float+0x60>
 801b70e:	a101      	add	r1, pc, #4	; (adr r1, 801b714 <_scanf_float+0x98>)
 801b710:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b714:	0801b853 	.word	0x0801b853
 801b718:	0801b6dd 	.word	0x0801b6dd
 801b71c:	0801b6dd 	.word	0x0801b6dd
 801b720:	0801b6dd 	.word	0x0801b6dd
 801b724:	0801b8b3 	.word	0x0801b8b3
 801b728:	0801b88b 	.word	0x0801b88b
 801b72c:	0801b6dd 	.word	0x0801b6dd
 801b730:	0801b6dd 	.word	0x0801b6dd
 801b734:	0801b861 	.word	0x0801b861
 801b738:	0801b6dd 	.word	0x0801b6dd
 801b73c:	0801b6dd 	.word	0x0801b6dd
 801b740:	0801b6dd 	.word	0x0801b6dd
 801b744:	0801b6dd 	.word	0x0801b6dd
 801b748:	0801b819 	.word	0x0801b819
 801b74c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801b750:	e7db      	b.n	801b70a <_scanf_float+0x8e>
 801b752:	290e      	cmp	r1, #14
 801b754:	d8c2      	bhi.n	801b6dc <_scanf_float+0x60>
 801b756:	a001      	add	r0, pc, #4	; (adr r0, 801b75c <_scanf_float+0xe0>)
 801b758:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801b75c:	0801b80b 	.word	0x0801b80b
 801b760:	0801b6dd 	.word	0x0801b6dd
 801b764:	0801b80b 	.word	0x0801b80b
 801b768:	0801b89f 	.word	0x0801b89f
 801b76c:	0801b6dd 	.word	0x0801b6dd
 801b770:	0801b7b9 	.word	0x0801b7b9
 801b774:	0801b7f5 	.word	0x0801b7f5
 801b778:	0801b7f5 	.word	0x0801b7f5
 801b77c:	0801b7f5 	.word	0x0801b7f5
 801b780:	0801b7f5 	.word	0x0801b7f5
 801b784:	0801b7f5 	.word	0x0801b7f5
 801b788:	0801b7f5 	.word	0x0801b7f5
 801b78c:	0801b7f5 	.word	0x0801b7f5
 801b790:	0801b7f5 	.word	0x0801b7f5
 801b794:	0801b7f5 	.word	0x0801b7f5
 801b798:	2b6e      	cmp	r3, #110	; 0x6e
 801b79a:	d809      	bhi.n	801b7b0 <_scanf_float+0x134>
 801b79c:	2b60      	cmp	r3, #96	; 0x60
 801b79e:	d8b2      	bhi.n	801b706 <_scanf_float+0x8a>
 801b7a0:	2b54      	cmp	r3, #84	; 0x54
 801b7a2:	d077      	beq.n	801b894 <_scanf_float+0x218>
 801b7a4:	2b59      	cmp	r3, #89	; 0x59
 801b7a6:	d199      	bne.n	801b6dc <_scanf_float+0x60>
 801b7a8:	2d07      	cmp	r5, #7
 801b7aa:	d197      	bne.n	801b6dc <_scanf_float+0x60>
 801b7ac:	2508      	movs	r5, #8
 801b7ae:	e029      	b.n	801b804 <_scanf_float+0x188>
 801b7b0:	2b74      	cmp	r3, #116	; 0x74
 801b7b2:	d06f      	beq.n	801b894 <_scanf_float+0x218>
 801b7b4:	2b79      	cmp	r3, #121	; 0x79
 801b7b6:	e7f6      	b.n	801b7a6 <_scanf_float+0x12a>
 801b7b8:	6821      	ldr	r1, [r4, #0]
 801b7ba:	05c8      	lsls	r0, r1, #23
 801b7bc:	d51a      	bpl.n	801b7f4 <_scanf_float+0x178>
 801b7be:	9b02      	ldr	r3, [sp, #8]
 801b7c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801b7c4:	6021      	str	r1, [r4, #0]
 801b7c6:	f109 0901 	add.w	r9, r9, #1
 801b7ca:	b11b      	cbz	r3, 801b7d4 <_scanf_float+0x158>
 801b7cc:	3b01      	subs	r3, #1
 801b7ce:	3201      	adds	r2, #1
 801b7d0:	9302      	str	r3, [sp, #8]
 801b7d2:	60a2      	str	r2, [r4, #8]
 801b7d4:	68a3      	ldr	r3, [r4, #8]
 801b7d6:	3b01      	subs	r3, #1
 801b7d8:	60a3      	str	r3, [r4, #8]
 801b7da:	6923      	ldr	r3, [r4, #16]
 801b7dc:	3301      	adds	r3, #1
 801b7de:	6123      	str	r3, [r4, #16]
 801b7e0:	687b      	ldr	r3, [r7, #4]
 801b7e2:	3b01      	subs	r3, #1
 801b7e4:	2b00      	cmp	r3, #0
 801b7e6:	607b      	str	r3, [r7, #4]
 801b7e8:	f340 8084 	ble.w	801b8f4 <_scanf_float+0x278>
 801b7ec:	683b      	ldr	r3, [r7, #0]
 801b7ee:	3301      	adds	r3, #1
 801b7f0:	603b      	str	r3, [r7, #0]
 801b7f2:	e766      	b.n	801b6c2 <_scanf_float+0x46>
 801b7f4:	eb1a 0f05 	cmn.w	sl, r5
 801b7f8:	f47f af70 	bne.w	801b6dc <_scanf_float+0x60>
 801b7fc:	6822      	ldr	r2, [r4, #0]
 801b7fe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801b802:	6022      	str	r2, [r4, #0]
 801b804:	f806 3b01 	strb.w	r3, [r6], #1
 801b808:	e7e4      	b.n	801b7d4 <_scanf_float+0x158>
 801b80a:	6822      	ldr	r2, [r4, #0]
 801b80c:	0610      	lsls	r0, r2, #24
 801b80e:	f57f af65 	bpl.w	801b6dc <_scanf_float+0x60>
 801b812:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801b816:	e7f4      	b.n	801b802 <_scanf_float+0x186>
 801b818:	f1ba 0f00 	cmp.w	sl, #0
 801b81c:	d10e      	bne.n	801b83c <_scanf_float+0x1c0>
 801b81e:	f1b9 0f00 	cmp.w	r9, #0
 801b822:	d10e      	bne.n	801b842 <_scanf_float+0x1c6>
 801b824:	6822      	ldr	r2, [r4, #0]
 801b826:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b82a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b82e:	d108      	bne.n	801b842 <_scanf_float+0x1c6>
 801b830:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b834:	6022      	str	r2, [r4, #0]
 801b836:	f04f 0a01 	mov.w	sl, #1
 801b83a:	e7e3      	b.n	801b804 <_scanf_float+0x188>
 801b83c:	f1ba 0f02 	cmp.w	sl, #2
 801b840:	d055      	beq.n	801b8ee <_scanf_float+0x272>
 801b842:	2d01      	cmp	r5, #1
 801b844:	d002      	beq.n	801b84c <_scanf_float+0x1d0>
 801b846:	2d04      	cmp	r5, #4
 801b848:	f47f af48 	bne.w	801b6dc <_scanf_float+0x60>
 801b84c:	3501      	adds	r5, #1
 801b84e:	b2ed      	uxtb	r5, r5
 801b850:	e7d8      	b.n	801b804 <_scanf_float+0x188>
 801b852:	f1ba 0f01 	cmp.w	sl, #1
 801b856:	f47f af41 	bne.w	801b6dc <_scanf_float+0x60>
 801b85a:	f04f 0a02 	mov.w	sl, #2
 801b85e:	e7d1      	b.n	801b804 <_scanf_float+0x188>
 801b860:	b97d      	cbnz	r5, 801b882 <_scanf_float+0x206>
 801b862:	f1b9 0f00 	cmp.w	r9, #0
 801b866:	f47f af3c 	bne.w	801b6e2 <_scanf_float+0x66>
 801b86a:	6822      	ldr	r2, [r4, #0]
 801b86c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b870:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b874:	f47f af39 	bne.w	801b6ea <_scanf_float+0x6e>
 801b878:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b87c:	6022      	str	r2, [r4, #0]
 801b87e:	2501      	movs	r5, #1
 801b880:	e7c0      	b.n	801b804 <_scanf_float+0x188>
 801b882:	2d03      	cmp	r5, #3
 801b884:	d0e2      	beq.n	801b84c <_scanf_float+0x1d0>
 801b886:	2d05      	cmp	r5, #5
 801b888:	e7de      	b.n	801b848 <_scanf_float+0x1cc>
 801b88a:	2d02      	cmp	r5, #2
 801b88c:	f47f af26 	bne.w	801b6dc <_scanf_float+0x60>
 801b890:	2503      	movs	r5, #3
 801b892:	e7b7      	b.n	801b804 <_scanf_float+0x188>
 801b894:	2d06      	cmp	r5, #6
 801b896:	f47f af21 	bne.w	801b6dc <_scanf_float+0x60>
 801b89a:	2507      	movs	r5, #7
 801b89c:	e7b2      	b.n	801b804 <_scanf_float+0x188>
 801b89e:	6822      	ldr	r2, [r4, #0]
 801b8a0:	0591      	lsls	r1, r2, #22
 801b8a2:	f57f af1b 	bpl.w	801b6dc <_scanf_float+0x60>
 801b8a6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801b8aa:	6022      	str	r2, [r4, #0]
 801b8ac:	f8cd 9004 	str.w	r9, [sp, #4]
 801b8b0:	e7a8      	b.n	801b804 <_scanf_float+0x188>
 801b8b2:	6822      	ldr	r2, [r4, #0]
 801b8b4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801b8b8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801b8bc:	d006      	beq.n	801b8cc <_scanf_float+0x250>
 801b8be:	0550      	lsls	r0, r2, #21
 801b8c0:	f57f af0c 	bpl.w	801b6dc <_scanf_float+0x60>
 801b8c4:	f1b9 0f00 	cmp.w	r9, #0
 801b8c8:	f43f af0f 	beq.w	801b6ea <_scanf_float+0x6e>
 801b8cc:	0591      	lsls	r1, r2, #22
 801b8ce:	bf58      	it	pl
 801b8d0:	9901      	ldrpl	r1, [sp, #4]
 801b8d2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b8d6:	bf58      	it	pl
 801b8d8:	eba9 0101 	subpl.w	r1, r9, r1
 801b8dc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801b8e0:	bf58      	it	pl
 801b8e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801b8e6:	6022      	str	r2, [r4, #0]
 801b8e8:	f04f 0900 	mov.w	r9, #0
 801b8ec:	e78a      	b.n	801b804 <_scanf_float+0x188>
 801b8ee:	f04f 0a03 	mov.w	sl, #3
 801b8f2:	e787      	b.n	801b804 <_scanf_float+0x188>
 801b8f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b8f8:	4639      	mov	r1, r7
 801b8fa:	4640      	mov	r0, r8
 801b8fc:	4798      	blx	r3
 801b8fe:	2800      	cmp	r0, #0
 801b900:	f43f aedf 	beq.w	801b6c2 <_scanf_float+0x46>
 801b904:	e6ea      	b.n	801b6dc <_scanf_float+0x60>
 801b906:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b90a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b90e:	463a      	mov	r2, r7
 801b910:	4640      	mov	r0, r8
 801b912:	4798      	blx	r3
 801b914:	6923      	ldr	r3, [r4, #16]
 801b916:	3b01      	subs	r3, #1
 801b918:	6123      	str	r3, [r4, #16]
 801b91a:	e6ec      	b.n	801b6f6 <_scanf_float+0x7a>
 801b91c:	1e6b      	subs	r3, r5, #1
 801b91e:	2b06      	cmp	r3, #6
 801b920:	d825      	bhi.n	801b96e <_scanf_float+0x2f2>
 801b922:	2d02      	cmp	r5, #2
 801b924:	d836      	bhi.n	801b994 <_scanf_float+0x318>
 801b926:	455e      	cmp	r6, fp
 801b928:	f67f aee8 	bls.w	801b6fc <_scanf_float+0x80>
 801b92c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b930:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b934:	463a      	mov	r2, r7
 801b936:	4640      	mov	r0, r8
 801b938:	4798      	blx	r3
 801b93a:	6923      	ldr	r3, [r4, #16]
 801b93c:	3b01      	subs	r3, #1
 801b93e:	6123      	str	r3, [r4, #16]
 801b940:	e7f1      	b.n	801b926 <_scanf_float+0x2aa>
 801b942:	9802      	ldr	r0, [sp, #8]
 801b944:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b948:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801b94c:	9002      	str	r0, [sp, #8]
 801b94e:	463a      	mov	r2, r7
 801b950:	4640      	mov	r0, r8
 801b952:	4798      	blx	r3
 801b954:	6923      	ldr	r3, [r4, #16]
 801b956:	3b01      	subs	r3, #1
 801b958:	6123      	str	r3, [r4, #16]
 801b95a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b95e:	fa5f fa8a 	uxtb.w	sl, sl
 801b962:	f1ba 0f02 	cmp.w	sl, #2
 801b966:	d1ec      	bne.n	801b942 <_scanf_float+0x2c6>
 801b968:	3d03      	subs	r5, #3
 801b96a:	b2ed      	uxtb	r5, r5
 801b96c:	1b76      	subs	r6, r6, r5
 801b96e:	6823      	ldr	r3, [r4, #0]
 801b970:	05da      	lsls	r2, r3, #23
 801b972:	d52f      	bpl.n	801b9d4 <_scanf_float+0x358>
 801b974:	055b      	lsls	r3, r3, #21
 801b976:	d510      	bpl.n	801b99a <_scanf_float+0x31e>
 801b978:	455e      	cmp	r6, fp
 801b97a:	f67f aebf 	bls.w	801b6fc <_scanf_float+0x80>
 801b97e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b982:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b986:	463a      	mov	r2, r7
 801b988:	4640      	mov	r0, r8
 801b98a:	4798      	blx	r3
 801b98c:	6923      	ldr	r3, [r4, #16]
 801b98e:	3b01      	subs	r3, #1
 801b990:	6123      	str	r3, [r4, #16]
 801b992:	e7f1      	b.n	801b978 <_scanf_float+0x2fc>
 801b994:	46aa      	mov	sl, r5
 801b996:	9602      	str	r6, [sp, #8]
 801b998:	e7df      	b.n	801b95a <_scanf_float+0x2de>
 801b99a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b99e:	6923      	ldr	r3, [r4, #16]
 801b9a0:	2965      	cmp	r1, #101	; 0x65
 801b9a2:	f103 33ff 	add.w	r3, r3, #4294967295
 801b9a6:	f106 35ff 	add.w	r5, r6, #4294967295
 801b9aa:	6123      	str	r3, [r4, #16]
 801b9ac:	d00c      	beq.n	801b9c8 <_scanf_float+0x34c>
 801b9ae:	2945      	cmp	r1, #69	; 0x45
 801b9b0:	d00a      	beq.n	801b9c8 <_scanf_float+0x34c>
 801b9b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b9b6:	463a      	mov	r2, r7
 801b9b8:	4640      	mov	r0, r8
 801b9ba:	4798      	blx	r3
 801b9bc:	6923      	ldr	r3, [r4, #16]
 801b9be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b9c2:	3b01      	subs	r3, #1
 801b9c4:	1eb5      	subs	r5, r6, #2
 801b9c6:	6123      	str	r3, [r4, #16]
 801b9c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b9cc:	463a      	mov	r2, r7
 801b9ce:	4640      	mov	r0, r8
 801b9d0:	4798      	blx	r3
 801b9d2:	462e      	mov	r6, r5
 801b9d4:	6825      	ldr	r5, [r4, #0]
 801b9d6:	f015 0510 	ands.w	r5, r5, #16
 801b9da:	d158      	bne.n	801ba8e <_scanf_float+0x412>
 801b9dc:	7035      	strb	r5, [r6, #0]
 801b9de:	6823      	ldr	r3, [r4, #0]
 801b9e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801b9e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b9e8:	d11c      	bne.n	801ba24 <_scanf_float+0x3a8>
 801b9ea:	9b01      	ldr	r3, [sp, #4]
 801b9ec:	454b      	cmp	r3, r9
 801b9ee:	eba3 0209 	sub.w	r2, r3, r9
 801b9f2:	d124      	bne.n	801ba3e <_scanf_float+0x3c2>
 801b9f4:	2200      	movs	r2, #0
 801b9f6:	4659      	mov	r1, fp
 801b9f8:	4640      	mov	r0, r8
 801b9fa:	f002 fdf9 	bl	801e5f0 <_strtod_r>
 801b9fe:	9b03      	ldr	r3, [sp, #12]
 801ba00:	6821      	ldr	r1, [r4, #0]
 801ba02:	681b      	ldr	r3, [r3, #0]
 801ba04:	f011 0f02 	tst.w	r1, #2
 801ba08:	ec57 6b10 	vmov	r6, r7, d0
 801ba0c:	f103 0204 	add.w	r2, r3, #4
 801ba10:	d020      	beq.n	801ba54 <_scanf_float+0x3d8>
 801ba12:	9903      	ldr	r1, [sp, #12]
 801ba14:	600a      	str	r2, [r1, #0]
 801ba16:	681b      	ldr	r3, [r3, #0]
 801ba18:	e9c3 6700 	strd	r6, r7, [r3]
 801ba1c:	68e3      	ldr	r3, [r4, #12]
 801ba1e:	3301      	adds	r3, #1
 801ba20:	60e3      	str	r3, [r4, #12]
 801ba22:	e66c      	b.n	801b6fe <_scanf_float+0x82>
 801ba24:	9b04      	ldr	r3, [sp, #16]
 801ba26:	2b00      	cmp	r3, #0
 801ba28:	d0e4      	beq.n	801b9f4 <_scanf_float+0x378>
 801ba2a:	9905      	ldr	r1, [sp, #20]
 801ba2c:	230a      	movs	r3, #10
 801ba2e:	462a      	mov	r2, r5
 801ba30:	3101      	adds	r1, #1
 801ba32:	4640      	mov	r0, r8
 801ba34:	f002 fe64 	bl	801e700 <_strtol_r>
 801ba38:	9b04      	ldr	r3, [sp, #16]
 801ba3a:	9e05      	ldr	r6, [sp, #20]
 801ba3c:	1ac2      	subs	r2, r0, r3
 801ba3e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801ba42:	429e      	cmp	r6, r3
 801ba44:	bf28      	it	cs
 801ba46:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801ba4a:	4912      	ldr	r1, [pc, #72]	; (801ba94 <_scanf_float+0x418>)
 801ba4c:	4630      	mov	r0, r6
 801ba4e:	f000 f90b 	bl	801bc68 <siprintf>
 801ba52:	e7cf      	b.n	801b9f4 <_scanf_float+0x378>
 801ba54:	f011 0f04 	tst.w	r1, #4
 801ba58:	9903      	ldr	r1, [sp, #12]
 801ba5a:	600a      	str	r2, [r1, #0]
 801ba5c:	d1db      	bne.n	801ba16 <_scanf_float+0x39a>
 801ba5e:	f8d3 8000 	ldr.w	r8, [r3]
 801ba62:	ee10 2a10 	vmov	r2, s0
 801ba66:	ee10 0a10 	vmov	r0, s0
 801ba6a:	463b      	mov	r3, r7
 801ba6c:	4639      	mov	r1, r7
 801ba6e:	f7e5 f875 	bl	8000b5c <__aeabi_dcmpun>
 801ba72:	b128      	cbz	r0, 801ba80 <_scanf_float+0x404>
 801ba74:	4808      	ldr	r0, [pc, #32]	; (801ba98 <_scanf_float+0x41c>)
 801ba76:	f000 fc2b 	bl	801c2d0 <nanf>
 801ba7a:	ed88 0a00 	vstr	s0, [r8]
 801ba7e:	e7cd      	b.n	801ba1c <_scanf_float+0x3a0>
 801ba80:	4630      	mov	r0, r6
 801ba82:	4639      	mov	r1, r7
 801ba84:	f7e5 f8c8 	bl	8000c18 <__aeabi_d2f>
 801ba88:	f8c8 0000 	str.w	r0, [r8]
 801ba8c:	e7c6      	b.n	801ba1c <_scanf_float+0x3a0>
 801ba8e:	2500      	movs	r5, #0
 801ba90:	e635      	b.n	801b6fe <_scanf_float+0x82>
 801ba92:	bf00      	nop
 801ba94:	08022e3e 	.word	0x08022e3e
 801ba98:	08022e0b 	.word	0x08022e0b

0801ba9c <std>:
 801ba9c:	2300      	movs	r3, #0
 801ba9e:	b510      	push	{r4, lr}
 801baa0:	4604      	mov	r4, r0
 801baa2:	e9c0 3300 	strd	r3, r3, [r0]
 801baa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801baaa:	6083      	str	r3, [r0, #8]
 801baac:	8181      	strh	r1, [r0, #12]
 801baae:	6643      	str	r3, [r0, #100]	; 0x64
 801bab0:	81c2      	strh	r2, [r0, #14]
 801bab2:	6183      	str	r3, [r0, #24]
 801bab4:	4619      	mov	r1, r3
 801bab6:	2208      	movs	r2, #8
 801bab8:	305c      	adds	r0, #92	; 0x5c
 801baba:	f000 fa25 	bl	801bf08 <memset>
 801babe:	4b0d      	ldr	r3, [pc, #52]	; (801baf4 <std+0x58>)
 801bac0:	6263      	str	r3, [r4, #36]	; 0x24
 801bac2:	4b0d      	ldr	r3, [pc, #52]	; (801baf8 <std+0x5c>)
 801bac4:	62a3      	str	r3, [r4, #40]	; 0x28
 801bac6:	4b0d      	ldr	r3, [pc, #52]	; (801bafc <std+0x60>)
 801bac8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801baca:	4b0d      	ldr	r3, [pc, #52]	; (801bb00 <std+0x64>)
 801bacc:	6323      	str	r3, [r4, #48]	; 0x30
 801bace:	4b0d      	ldr	r3, [pc, #52]	; (801bb04 <std+0x68>)
 801bad0:	6224      	str	r4, [r4, #32]
 801bad2:	429c      	cmp	r4, r3
 801bad4:	d006      	beq.n	801bae4 <std+0x48>
 801bad6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801bada:	4294      	cmp	r4, r2
 801badc:	d002      	beq.n	801bae4 <std+0x48>
 801bade:	33d0      	adds	r3, #208	; 0xd0
 801bae0:	429c      	cmp	r4, r3
 801bae2:	d105      	bne.n	801baf0 <std+0x54>
 801bae4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801bae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801baec:	f000 bbd6 	b.w	801c29c <__retarget_lock_init_recursive>
 801baf0:	bd10      	pop	{r4, pc}
 801baf2:	bf00      	nop
 801baf4:	0801bd01 	.word	0x0801bd01
 801baf8:	0801bd27 	.word	0x0801bd27
 801bafc:	0801bd5f 	.word	0x0801bd5f
 801bb00:	0801bd83 	.word	0x0801bd83
 801bb04:	2000d92c 	.word	0x2000d92c

0801bb08 <stdio_exit_handler>:
 801bb08:	4a02      	ldr	r2, [pc, #8]	; (801bb14 <stdio_exit_handler+0xc>)
 801bb0a:	4903      	ldr	r1, [pc, #12]	; (801bb18 <stdio_exit_handler+0x10>)
 801bb0c:	4803      	ldr	r0, [pc, #12]	; (801bb1c <stdio_exit_handler+0x14>)
 801bb0e:	f000 b87b 	b.w	801bc08 <_fwalk_sglue>
 801bb12:	bf00      	nop
 801bb14:	20000110 	.word	0x20000110
 801bb18:	0801f389 	.word	0x0801f389
 801bb1c:	2000011c 	.word	0x2000011c

0801bb20 <cleanup_stdio>:
 801bb20:	6841      	ldr	r1, [r0, #4]
 801bb22:	4b0c      	ldr	r3, [pc, #48]	; (801bb54 <cleanup_stdio+0x34>)
 801bb24:	4299      	cmp	r1, r3
 801bb26:	b510      	push	{r4, lr}
 801bb28:	4604      	mov	r4, r0
 801bb2a:	d001      	beq.n	801bb30 <cleanup_stdio+0x10>
 801bb2c:	f003 fc2c 	bl	801f388 <_fflush_r>
 801bb30:	68a1      	ldr	r1, [r4, #8]
 801bb32:	4b09      	ldr	r3, [pc, #36]	; (801bb58 <cleanup_stdio+0x38>)
 801bb34:	4299      	cmp	r1, r3
 801bb36:	d002      	beq.n	801bb3e <cleanup_stdio+0x1e>
 801bb38:	4620      	mov	r0, r4
 801bb3a:	f003 fc25 	bl	801f388 <_fflush_r>
 801bb3e:	68e1      	ldr	r1, [r4, #12]
 801bb40:	4b06      	ldr	r3, [pc, #24]	; (801bb5c <cleanup_stdio+0x3c>)
 801bb42:	4299      	cmp	r1, r3
 801bb44:	d004      	beq.n	801bb50 <cleanup_stdio+0x30>
 801bb46:	4620      	mov	r0, r4
 801bb48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bb4c:	f003 bc1c 	b.w	801f388 <_fflush_r>
 801bb50:	bd10      	pop	{r4, pc}
 801bb52:	bf00      	nop
 801bb54:	2000d92c 	.word	0x2000d92c
 801bb58:	2000d994 	.word	0x2000d994
 801bb5c:	2000d9fc 	.word	0x2000d9fc

0801bb60 <global_stdio_init.part.0>:
 801bb60:	b510      	push	{r4, lr}
 801bb62:	4b0b      	ldr	r3, [pc, #44]	; (801bb90 <global_stdio_init.part.0+0x30>)
 801bb64:	4c0b      	ldr	r4, [pc, #44]	; (801bb94 <global_stdio_init.part.0+0x34>)
 801bb66:	4a0c      	ldr	r2, [pc, #48]	; (801bb98 <global_stdio_init.part.0+0x38>)
 801bb68:	601a      	str	r2, [r3, #0]
 801bb6a:	4620      	mov	r0, r4
 801bb6c:	2200      	movs	r2, #0
 801bb6e:	2104      	movs	r1, #4
 801bb70:	f7ff ff94 	bl	801ba9c <std>
 801bb74:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801bb78:	2201      	movs	r2, #1
 801bb7a:	2109      	movs	r1, #9
 801bb7c:	f7ff ff8e 	bl	801ba9c <std>
 801bb80:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801bb84:	2202      	movs	r2, #2
 801bb86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bb8a:	2112      	movs	r1, #18
 801bb8c:	f7ff bf86 	b.w	801ba9c <std>
 801bb90:	2000da64 	.word	0x2000da64
 801bb94:	2000d92c 	.word	0x2000d92c
 801bb98:	0801bb09 	.word	0x0801bb09

0801bb9c <__sfp_lock_acquire>:
 801bb9c:	4801      	ldr	r0, [pc, #4]	; (801bba4 <__sfp_lock_acquire+0x8>)
 801bb9e:	f000 bb7e 	b.w	801c29e <__retarget_lock_acquire_recursive>
 801bba2:	bf00      	nop
 801bba4:	2000da6d 	.word	0x2000da6d

0801bba8 <__sfp_lock_release>:
 801bba8:	4801      	ldr	r0, [pc, #4]	; (801bbb0 <__sfp_lock_release+0x8>)
 801bbaa:	f000 bb79 	b.w	801c2a0 <__retarget_lock_release_recursive>
 801bbae:	bf00      	nop
 801bbb0:	2000da6d 	.word	0x2000da6d

0801bbb4 <__sinit>:
 801bbb4:	b510      	push	{r4, lr}
 801bbb6:	4604      	mov	r4, r0
 801bbb8:	f7ff fff0 	bl	801bb9c <__sfp_lock_acquire>
 801bbbc:	6a23      	ldr	r3, [r4, #32]
 801bbbe:	b11b      	cbz	r3, 801bbc8 <__sinit+0x14>
 801bbc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bbc4:	f7ff bff0 	b.w	801bba8 <__sfp_lock_release>
 801bbc8:	4b04      	ldr	r3, [pc, #16]	; (801bbdc <__sinit+0x28>)
 801bbca:	6223      	str	r3, [r4, #32]
 801bbcc:	4b04      	ldr	r3, [pc, #16]	; (801bbe0 <__sinit+0x2c>)
 801bbce:	681b      	ldr	r3, [r3, #0]
 801bbd0:	2b00      	cmp	r3, #0
 801bbd2:	d1f5      	bne.n	801bbc0 <__sinit+0xc>
 801bbd4:	f7ff ffc4 	bl	801bb60 <global_stdio_init.part.0>
 801bbd8:	e7f2      	b.n	801bbc0 <__sinit+0xc>
 801bbda:	bf00      	nop
 801bbdc:	0801bb21 	.word	0x0801bb21
 801bbe0:	2000da64 	.word	0x2000da64

0801bbe4 <fiprintf>:
 801bbe4:	b40e      	push	{r1, r2, r3}
 801bbe6:	b503      	push	{r0, r1, lr}
 801bbe8:	4601      	mov	r1, r0
 801bbea:	ab03      	add	r3, sp, #12
 801bbec:	4805      	ldr	r0, [pc, #20]	; (801bc04 <fiprintf+0x20>)
 801bbee:	f853 2b04 	ldr.w	r2, [r3], #4
 801bbf2:	6800      	ldr	r0, [r0, #0]
 801bbf4:	9301      	str	r3, [sp, #4]
 801bbf6:	f003 f8d9 	bl	801edac <_vfiprintf_r>
 801bbfa:	b002      	add	sp, #8
 801bbfc:	f85d eb04 	ldr.w	lr, [sp], #4
 801bc00:	b003      	add	sp, #12
 801bc02:	4770      	bx	lr
 801bc04:	20000168 	.word	0x20000168

0801bc08 <_fwalk_sglue>:
 801bc08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bc0c:	4607      	mov	r7, r0
 801bc0e:	4688      	mov	r8, r1
 801bc10:	4614      	mov	r4, r2
 801bc12:	2600      	movs	r6, #0
 801bc14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801bc18:	f1b9 0901 	subs.w	r9, r9, #1
 801bc1c:	d505      	bpl.n	801bc2a <_fwalk_sglue+0x22>
 801bc1e:	6824      	ldr	r4, [r4, #0]
 801bc20:	2c00      	cmp	r4, #0
 801bc22:	d1f7      	bne.n	801bc14 <_fwalk_sglue+0xc>
 801bc24:	4630      	mov	r0, r6
 801bc26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bc2a:	89ab      	ldrh	r3, [r5, #12]
 801bc2c:	2b01      	cmp	r3, #1
 801bc2e:	d907      	bls.n	801bc40 <_fwalk_sglue+0x38>
 801bc30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bc34:	3301      	adds	r3, #1
 801bc36:	d003      	beq.n	801bc40 <_fwalk_sglue+0x38>
 801bc38:	4629      	mov	r1, r5
 801bc3a:	4638      	mov	r0, r7
 801bc3c:	47c0      	blx	r8
 801bc3e:	4306      	orrs	r6, r0
 801bc40:	3568      	adds	r5, #104	; 0x68
 801bc42:	e7e9      	b.n	801bc18 <_fwalk_sglue+0x10>

0801bc44 <iprintf>:
 801bc44:	b40f      	push	{r0, r1, r2, r3}
 801bc46:	b507      	push	{r0, r1, r2, lr}
 801bc48:	4906      	ldr	r1, [pc, #24]	; (801bc64 <iprintf+0x20>)
 801bc4a:	ab04      	add	r3, sp, #16
 801bc4c:	6808      	ldr	r0, [r1, #0]
 801bc4e:	f853 2b04 	ldr.w	r2, [r3], #4
 801bc52:	6881      	ldr	r1, [r0, #8]
 801bc54:	9301      	str	r3, [sp, #4]
 801bc56:	f003 f8a9 	bl	801edac <_vfiprintf_r>
 801bc5a:	b003      	add	sp, #12
 801bc5c:	f85d eb04 	ldr.w	lr, [sp], #4
 801bc60:	b004      	add	sp, #16
 801bc62:	4770      	bx	lr
 801bc64:	20000168 	.word	0x20000168

0801bc68 <siprintf>:
 801bc68:	b40e      	push	{r1, r2, r3}
 801bc6a:	b500      	push	{lr}
 801bc6c:	b09c      	sub	sp, #112	; 0x70
 801bc6e:	ab1d      	add	r3, sp, #116	; 0x74
 801bc70:	9002      	str	r0, [sp, #8]
 801bc72:	9006      	str	r0, [sp, #24]
 801bc74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801bc78:	4809      	ldr	r0, [pc, #36]	; (801bca0 <siprintf+0x38>)
 801bc7a:	9107      	str	r1, [sp, #28]
 801bc7c:	9104      	str	r1, [sp, #16]
 801bc7e:	4909      	ldr	r1, [pc, #36]	; (801bca4 <siprintf+0x3c>)
 801bc80:	f853 2b04 	ldr.w	r2, [r3], #4
 801bc84:	9105      	str	r1, [sp, #20]
 801bc86:	6800      	ldr	r0, [r0, #0]
 801bc88:	9301      	str	r3, [sp, #4]
 801bc8a:	a902      	add	r1, sp, #8
 801bc8c:	f002 fd94 	bl	801e7b8 <_svfiprintf_r>
 801bc90:	9b02      	ldr	r3, [sp, #8]
 801bc92:	2200      	movs	r2, #0
 801bc94:	701a      	strb	r2, [r3, #0]
 801bc96:	b01c      	add	sp, #112	; 0x70
 801bc98:	f85d eb04 	ldr.w	lr, [sp], #4
 801bc9c:	b003      	add	sp, #12
 801bc9e:	4770      	bx	lr
 801bca0:	20000168 	.word	0x20000168
 801bca4:	ffff0208 	.word	0xffff0208

0801bca8 <siscanf>:
 801bca8:	b40e      	push	{r1, r2, r3}
 801bcaa:	b510      	push	{r4, lr}
 801bcac:	b09f      	sub	sp, #124	; 0x7c
 801bcae:	ac21      	add	r4, sp, #132	; 0x84
 801bcb0:	f44f 7101 	mov.w	r1, #516	; 0x204
 801bcb4:	f854 2b04 	ldr.w	r2, [r4], #4
 801bcb8:	9201      	str	r2, [sp, #4]
 801bcba:	f8ad 101c 	strh.w	r1, [sp, #28]
 801bcbe:	9004      	str	r0, [sp, #16]
 801bcc0:	9008      	str	r0, [sp, #32]
 801bcc2:	f7e4 faed 	bl	80002a0 <strlen>
 801bcc6:	4b0c      	ldr	r3, [pc, #48]	; (801bcf8 <siscanf+0x50>)
 801bcc8:	9005      	str	r0, [sp, #20]
 801bcca:	9009      	str	r0, [sp, #36]	; 0x24
 801bccc:	930d      	str	r3, [sp, #52]	; 0x34
 801bcce:	480b      	ldr	r0, [pc, #44]	; (801bcfc <siscanf+0x54>)
 801bcd0:	9a01      	ldr	r2, [sp, #4]
 801bcd2:	6800      	ldr	r0, [r0, #0]
 801bcd4:	9403      	str	r4, [sp, #12]
 801bcd6:	2300      	movs	r3, #0
 801bcd8:	9311      	str	r3, [sp, #68]	; 0x44
 801bcda:	9316      	str	r3, [sp, #88]	; 0x58
 801bcdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bce0:	f8ad 301e 	strh.w	r3, [sp, #30]
 801bce4:	a904      	add	r1, sp, #16
 801bce6:	4623      	mov	r3, r4
 801bce8:	f002 febe 	bl	801ea68 <__ssvfiscanf_r>
 801bcec:	b01f      	add	sp, #124	; 0x7c
 801bcee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bcf2:	b003      	add	sp, #12
 801bcf4:	4770      	bx	lr
 801bcf6:	bf00      	nop
 801bcf8:	0801bd23 	.word	0x0801bd23
 801bcfc:	20000168 	.word	0x20000168

0801bd00 <__sread>:
 801bd00:	b510      	push	{r4, lr}
 801bd02:	460c      	mov	r4, r1
 801bd04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd08:	f000 fa6a 	bl	801c1e0 <_read_r>
 801bd0c:	2800      	cmp	r0, #0
 801bd0e:	bfab      	itete	ge
 801bd10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801bd12:	89a3      	ldrhlt	r3, [r4, #12]
 801bd14:	181b      	addge	r3, r3, r0
 801bd16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801bd1a:	bfac      	ite	ge
 801bd1c:	6563      	strge	r3, [r4, #84]	; 0x54
 801bd1e:	81a3      	strhlt	r3, [r4, #12]
 801bd20:	bd10      	pop	{r4, pc}

0801bd22 <__seofread>:
 801bd22:	2000      	movs	r0, #0
 801bd24:	4770      	bx	lr

0801bd26 <__swrite>:
 801bd26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd2a:	461f      	mov	r7, r3
 801bd2c:	898b      	ldrh	r3, [r1, #12]
 801bd2e:	05db      	lsls	r3, r3, #23
 801bd30:	4605      	mov	r5, r0
 801bd32:	460c      	mov	r4, r1
 801bd34:	4616      	mov	r6, r2
 801bd36:	d505      	bpl.n	801bd44 <__swrite+0x1e>
 801bd38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd3c:	2302      	movs	r3, #2
 801bd3e:	2200      	movs	r2, #0
 801bd40:	f000 fa3c 	bl	801c1bc <_lseek_r>
 801bd44:	89a3      	ldrh	r3, [r4, #12]
 801bd46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bd4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bd4e:	81a3      	strh	r3, [r4, #12]
 801bd50:	4632      	mov	r2, r6
 801bd52:	463b      	mov	r3, r7
 801bd54:	4628      	mov	r0, r5
 801bd56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bd5a:	f000 ba63 	b.w	801c224 <_write_r>

0801bd5e <__sseek>:
 801bd5e:	b510      	push	{r4, lr}
 801bd60:	460c      	mov	r4, r1
 801bd62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd66:	f000 fa29 	bl	801c1bc <_lseek_r>
 801bd6a:	1c43      	adds	r3, r0, #1
 801bd6c:	89a3      	ldrh	r3, [r4, #12]
 801bd6e:	bf15      	itete	ne
 801bd70:	6560      	strne	r0, [r4, #84]	; 0x54
 801bd72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801bd76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801bd7a:	81a3      	strheq	r3, [r4, #12]
 801bd7c:	bf18      	it	ne
 801bd7e:	81a3      	strhne	r3, [r4, #12]
 801bd80:	bd10      	pop	{r4, pc}

0801bd82 <__sclose>:
 801bd82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bd86:	f000 b9b3 	b.w	801c0f0 <_close_r>

0801bd8a <__swbuf_r>:
 801bd8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd8c:	460e      	mov	r6, r1
 801bd8e:	4614      	mov	r4, r2
 801bd90:	4605      	mov	r5, r0
 801bd92:	b118      	cbz	r0, 801bd9c <__swbuf_r+0x12>
 801bd94:	6a03      	ldr	r3, [r0, #32]
 801bd96:	b90b      	cbnz	r3, 801bd9c <__swbuf_r+0x12>
 801bd98:	f7ff ff0c 	bl	801bbb4 <__sinit>
 801bd9c:	69a3      	ldr	r3, [r4, #24]
 801bd9e:	60a3      	str	r3, [r4, #8]
 801bda0:	89a3      	ldrh	r3, [r4, #12]
 801bda2:	071a      	lsls	r2, r3, #28
 801bda4:	d525      	bpl.n	801bdf2 <__swbuf_r+0x68>
 801bda6:	6923      	ldr	r3, [r4, #16]
 801bda8:	b31b      	cbz	r3, 801bdf2 <__swbuf_r+0x68>
 801bdaa:	6823      	ldr	r3, [r4, #0]
 801bdac:	6922      	ldr	r2, [r4, #16]
 801bdae:	1a98      	subs	r0, r3, r2
 801bdb0:	6963      	ldr	r3, [r4, #20]
 801bdb2:	b2f6      	uxtb	r6, r6
 801bdb4:	4283      	cmp	r3, r0
 801bdb6:	4637      	mov	r7, r6
 801bdb8:	dc04      	bgt.n	801bdc4 <__swbuf_r+0x3a>
 801bdba:	4621      	mov	r1, r4
 801bdbc:	4628      	mov	r0, r5
 801bdbe:	f003 fae3 	bl	801f388 <_fflush_r>
 801bdc2:	b9e0      	cbnz	r0, 801bdfe <__swbuf_r+0x74>
 801bdc4:	68a3      	ldr	r3, [r4, #8]
 801bdc6:	3b01      	subs	r3, #1
 801bdc8:	60a3      	str	r3, [r4, #8]
 801bdca:	6823      	ldr	r3, [r4, #0]
 801bdcc:	1c5a      	adds	r2, r3, #1
 801bdce:	6022      	str	r2, [r4, #0]
 801bdd0:	701e      	strb	r6, [r3, #0]
 801bdd2:	6962      	ldr	r2, [r4, #20]
 801bdd4:	1c43      	adds	r3, r0, #1
 801bdd6:	429a      	cmp	r2, r3
 801bdd8:	d004      	beq.n	801bde4 <__swbuf_r+0x5a>
 801bdda:	89a3      	ldrh	r3, [r4, #12]
 801bddc:	07db      	lsls	r3, r3, #31
 801bdde:	d506      	bpl.n	801bdee <__swbuf_r+0x64>
 801bde0:	2e0a      	cmp	r6, #10
 801bde2:	d104      	bne.n	801bdee <__swbuf_r+0x64>
 801bde4:	4621      	mov	r1, r4
 801bde6:	4628      	mov	r0, r5
 801bde8:	f003 face 	bl	801f388 <_fflush_r>
 801bdec:	b938      	cbnz	r0, 801bdfe <__swbuf_r+0x74>
 801bdee:	4638      	mov	r0, r7
 801bdf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bdf2:	4621      	mov	r1, r4
 801bdf4:	4628      	mov	r0, r5
 801bdf6:	f000 f805 	bl	801be04 <__swsetup_r>
 801bdfa:	2800      	cmp	r0, #0
 801bdfc:	d0d5      	beq.n	801bdaa <__swbuf_r+0x20>
 801bdfe:	f04f 37ff 	mov.w	r7, #4294967295
 801be02:	e7f4      	b.n	801bdee <__swbuf_r+0x64>

0801be04 <__swsetup_r>:
 801be04:	b538      	push	{r3, r4, r5, lr}
 801be06:	4b2a      	ldr	r3, [pc, #168]	; (801beb0 <__swsetup_r+0xac>)
 801be08:	4605      	mov	r5, r0
 801be0a:	6818      	ldr	r0, [r3, #0]
 801be0c:	460c      	mov	r4, r1
 801be0e:	b118      	cbz	r0, 801be18 <__swsetup_r+0x14>
 801be10:	6a03      	ldr	r3, [r0, #32]
 801be12:	b90b      	cbnz	r3, 801be18 <__swsetup_r+0x14>
 801be14:	f7ff fece 	bl	801bbb4 <__sinit>
 801be18:	89a3      	ldrh	r3, [r4, #12]
 801be1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801be1e:	0718      	lsls	r0, r3, #28
 801be20:	d422      	bmi.n	801be68 <__swsetup_r+0x64>
 801be22:	06d9      	lsls	r1, r3, #27
 801be24:	d407      	bmi.n	801be36 <__swsetup_r+0x32>
 801be26:	2309      	movs	r3, #9
 801be28:	602b      	str	r3, [r5, #0]
 801be2a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801be2e:	81a3      	strh	r3, [r4, #12]
 801be30:	f04f 30ff 	mov.w	r0, #4294967295
 801be34:	e034      	b.n	801bea0 <__swsetup_r+0x9c>
 801be36:	0758      	lsls	r0, r3, #29
 801be38:	d512      	bpl.n	801be60 <__swsetup_r+0x5c>
 801be3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801be3c:	b141      	cbz	r1, 801be50 <__swsetup_r+0x4c>
 801be3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801be42:	4299      	cmp	r1, r3
 801be44:	d002      	beq.n	801be4c <__swsetup_r+0x48>
 801be46:	4628      	mov	r0, r5
 801be48:	f001 f8cc 	bl	801cfe4 <_free_r>
 801be4c:	2300      	movs	r3, #0
 801be4e:	6363      	str	r3, [r4, #52]	; 0x34
 801be50:	89a3      	ldrh	r3, [r4, #12]
 801be52:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801be56:	81a3      	strh	r3, [r4, #12]
 801be58:	2300      	movs	r3, #0
 801be5a:	6063      	str	r3, [r4, #4]
 801be5c:	6923      	ldr	r3, [r4, #16]
 801be5e:	6023      	str	r3, [r4, #0]
 801be60:	89a3      	ldrh	r3, [r4, #12]
 801be62:	f043 0308 	orr.w	r3, r3, #8
 801be66:	81a3      	strh	r3, [r4, #12]
 801be68:	6923      	ldr	r3, [r4, #16]
 801be6a:	b94b      	cbnz	r3, 801be80 <__swsetup_r+0x7c>
 801be6c:	89a3      	ldrh	r3, [r4, #12]
 801be6e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801be72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801be76:	d003      	beq.n	801be80 <__swsetup_r+0x7c>
 801be78:	4621      	mov	r1, r4
 801be7a:	4628      	mov	r0, r5
 801be7c:	f003 fad2 	bl	801f424 <__smakebuf_r>
 801be80:	89a0      	ldrh	r0, [r4, #12]
 801be82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801be86:	f010 0301 	ands.w	r3, r0, #1
 801be8a:	d00a      	beq.n	801bea2 <__swsetup_r+0x9e>
 801be8c:	2300      	movs	r3, #0
 801be8e:	60a3      	str	r3, [r4, #8]
 801be90:	6963      	ldr	r3, [r4, #20]
 801be92:	425b      	negs	r3, r3
 801be94:	61a3      	str	r3, [r4, #24]
 801be96:	6923      	ldr	r3, [r4, #16]
 801be98:	b943      	cbnz	r3, 801beac <__swsetup_r+0xa8>
 801be9a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801be9e:	d1c4      	bne.n	801be2a <__swsetup_r+0x26>
 801bea0:	bd38      	pop	{r3, r4, r5, pc}
 801bea2:	0781      	lsls	r1, r0, #30
 801bea4:	bf58      	it	pl
 801bea6:	6963      	ldrpl	r3, [r4, #20]
 801bea8:	60a3      	str	r3, [r4, #8]
 801beaa:	e7f4      	b.n	801be96 <__swsetup_r+0x92>
 801beac:	2000      	movs	r0, #0
 801beae:	e7f7      	b.n	801bea0 <__swsetup_r+0x9c>
 801beb0:	20000168 	.word	0x20000168

0801beb4 <memcmp>:
 801beb4:	b510      	push	{r4, lr}
 801beb6:	3901      	subs	r1, #1
 801beb8:	4402      	add	r2, r0
 801beba:	4290      	cmp	r0, r2
 801bebc:	d101      	bne.n	801bec2 <memcmp+0xe>
 801bebe:	2000      	movs	r0, #0
 801bec0:	e005      	b.n	801bece <memcmp+0x1a>
 801bec2:	7803      	ldrb	r3, [r0, #0]
 801bec4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801bec8:	42a3      	cmp	r3, r4
 801beca:	d001      	beq.n	801bed0 <memcmp+0x1c>
 801becc:	1b18      	subs	r0, r3, r4
 801bece:	bd10      	pop	{r4, pc}
 801bed0:	3001      	adds	r0, #1
 801bed2:	e7f2      	b.n	801beba <memcmp+0x6>

0801bed4 <memmove>:
 801bed4:	4288      	cmp	r0, r1
 801bed6:	b510      	push	{r4, lr}
 801bed8:	eb01 0402 	add.w	r4, r1, r2
 801bedc:	d902      	bls.n	801bee4 <memmove+0x10>
 801bede:	4284      	cmp	r4, r0
 801bee0:	4623      	mov	r3, r4
 801bee2:	d807      	bhi.n	801bef4 <memmove+0x20>
 801bee4:	1e43      	subs	r3, r0, #1
 801bee6:	42a1      	cmp	r1, r4
 801bee8:	d008      	beq.n	801befc <memmove+0x28>
 801beea:	f811 2b01 	ldrb.w	r2, [r1], #1
 801beee:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bef2:	e7f8      	b.n	801bee6 <memmove+0x12>
 801bef4:	4402      	add	r2, r0
 801bef6:	4601      	mov	r1, r0
 801bef8:	428a      	cmp	r2, r1
 801befa:	d100      	bne.n	801befe <memmove+0x2a>
 801befc:	bd10      	pop	{r4, pc}
 801befe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bf02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801bf06:	e7f7      	b.n	801bef8 <memmove+0x24>

0801bf08 <memset>:
 801bf08:	4402      	add	r2, r0
 801bf0a:	4603      	mov	r3, r0
 801bf0c:	4293      	cmp	r3, r2
 801bf0e:	d100      	bne.n	801bf12 <memset+0xa>
 801bf10:	4770      	bx	lr
 801bf12:	f803 1b01 	strb.w	r1, [r3], #1
 801bf16:	e7f9      	b.n	801bf0c <memset+0x4>

0801bf18 <strcat>:
 801bf18:	b510      	push	{r4, lr}
 801bf1a:	4602      	mov	r2, r0
 801bf1c:	7814      	ldrb	r4, [r2, #0]
 801bf1e:	4613      	mov	r3, r2
 801bf20:	3201      	adds	r2, #1
 801bf22:	2c00      	cmp	r4, #0
 801bf24:	d1fa      	bne.n	801bf1c <strcat+0x4>
 801bf26:	3b01      	subs	r3, #1
 801bf28:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bf2c:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bf30:	2a00      	cmp	r2, #0
 801bf32:	d1f9      	bne.n	801bf28 <strcat+0x10>
 801bf34:	bd10      	pop	{r4, pc}

0801bf36 <strchr>:
 801bf36:	b2c9      	uxtb	r1, r1
 801bf38:	4603      	mov	r3, r0
 801bf3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bf3e:	b11a      	cbz	r2, 801bf48 <strchr+0x12>
 801bf40:	428a      	cmp	r2, r1
 801bf42:	d1f9      	bne.n	801bf38 <strchr+0x2>
 801bf44:	4618      	mov	r0, r3
 801bf46:	4770      	bx	lr
 801bf48:	2900      	cmp	r1, #0
 801bf4a:	bf18      	it	ne
 801bf4c:	2300      	movne	r3, #0
 801bf4e:	e7f9      	b.n	801bf44 <strchr+0xe>

0801bf50 <strcspn>:
 801bf50:	b570      	push	{r4, r5, r6, lr}
 801bf52:	4603      	mov	r3, r0
 801bf54:	461e      	mov	r6, r3
 801bf56:	f813 4b01 	ldrb.w	r4, [r3], #1
 801bf5a:	b144      	cbz	r4, 801bf6e <strcspn+0x1e>
 801bf5c:	1e4a      	subs	r2, r1, #1
 801bf5e:	e001      	b.n	801bf64 <strcspn+0x14>
 801bf60:	42a5      	cmp	r5, r4
 801bf62:	d004      	beq.n	801bf6e <strcspn+0x1e>
 801bf64:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801bf68:	2d00      	cmp	r5, #0
 801bf6a:	d1f9      	bne.n	801bf60 <strcspn+0x10>
 801bf6c:	e7f2      	b.n	801bf54 <strcspn+0x4>
 801bf6e:	1a30      	subs	r0, r6, r0
 801bf70:	bd70      	pop	{r4, r5, r6, pc}

0801bf72 <strncat>:
 801bf72:	b530      	push	{r4, r5, lr}
 801bf74:	4604      	mov	r4, r0
 801bf76:	7825      	ldrb	r5, [r4, #0]
 801bf78:	4623      	mov	r3, r4
 801bf7a:	3401      	adds	r4, #1
 801bf7c:	2d00      	cmp	r5, #0
 801bf7e:	d1fa      	bne.n	801bf76 <strncat+0x4>
 801bf80:	3a01      	subs	r2, #1
 801bf82:	d304      	bcc.n	801bf8e <strncat+0x1c>
 801bf84:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bf88:	f803 4b01 	strb.w	r4, [r3], #1
 801bf8c:	b904      	cbnz	r4, 801bf90 <strncat+0x1e>
 801bf8e:	bd30      	pop	{r4, r5, pc}
 801bf90:	2a00      	cmp	r2, #0
 801bf92:	d1f5      	bne.n	801bf80 <strncat+0xe>
 801bf94:	701a      	strb	r2, [r3, #0]
 801bf96:	e7f3      	b.n	801bf80 <strncat+0xe>

0801bf98 <strncmp>:
 801bf98:	b510      	push	{r4, lr}
 801bf9a:	b16a      	cbz	r2, 801bfb8 <strncmp+0x20>
 801bf9c:	3901      	subs	r1, #1
 801bf9e:	1884      	adds	r4, r0, r2
 801bfa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bfa4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801bfa8:	429a      	cmp	r2, r3
 801bfaa:	d103      	bne.n	801bfb4 <strncmp+0x1c>
 801bfac:	42a0      	cmp	r0, r4
 801bfae:	d001      	beq.n	801bfb4 <strncmp+0x1c>
 801bfb0:	2a00      	cmp	r2, #0
 801bfb2:	d1f5      	bne.n	801bfa0 <strncmp+0x8>
 801bfb4:	1ad0      	subs	r0, r2, r3
 801bfb6:	bd10      	pop	{r4, pc}
 801bfb8:	4610      	mov	r0, r2
 801bfba:	e7fc      	b.n	801bfb6 <strncmp+0x1e>

0801bfbc <strncpy>:
 801bfbc:	b510      	push	{r4, lr}
 801bfbe:	3901      	subs	r1, #1
 801bfc0:	4603      	mov	r3, r0
 801bfc2:	b132      	cbz	r2, 801bfd2 <strncpy+0x16>
 801bfc4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801bfc8:	f803 4b01 	strb.w	r4, [r3], #1
 801bfcc:	3a01      	subs	r2, #1
 801bfce:	2c00      	cmp	r4, #0
 801bfd0:	d1f7      	bne.n	801bfc2 <strncpy+0x6>
 801bfd2:	441a      	add	r2, r3
 801bfd4:	2100      	movs	r1, #0
 801bfd6:	4293      	cmp	r3, r2
 801bfd8:	d100      	bne.n	801bfdc <strncpy+0x20>
 801bfda:	bd10      	pop	{r4, pc}
 801bfdc:	f803 1b01 	strb.w	r1, [r3], #1
 801bfe0:	e7f9      	b.n	801bfd6 <strncpy+0x1a>

0801bfe2 <strspn>:
 801bfe2:	b570      	push	{r4, r5, r6, lr}
 801bfe4:	4603      	mov	r3, r0
 801bfe6:	461e      	mov	r6, r3
 801bfe8:	f813 4b01 	ldrb.w	r4, [r3], #1
 801bfec:	b13c      	cbz	r4, 801bffe <strspn+0x1c>
 801bfee:	1e4a      	subs	r2, r1, #1
 801bff0:	e001      	b.n	801bff6 <strspn+0x14>
 801bff2:	42a5      	cmp	r5, r4
 801bff4:	d0f7      	beq.n	801bfe6 <strspn+0x4>
 801bff6:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801bffa:	2d00      	cmp	r5, #0
 801bffc:	d1f9      	bne.n	801bff2 <strspn+0x10>
 801bffe:	1a30      	subs	r0, r6, r0
 801c000:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c004 <strtok>:
 801c004:	4b16      	ldr	r3, [pc, #88]	; (801c060 <strtok+0x5c>)
 801c006:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c008:	681e      	ldr	r6, [r3, #0]
 801c00a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 801c00c:	4605      	mov	r5, r0
 801c00e:	b9fc      	cbnz	r4, 801c050 <strtok+0x4c>
 801c010:	2050      	movs	r0, #80	; 0x50
 801c012:	9101      	str	r1, [sp, #4]
 801c014:	f7fe fe10 	bl	801ac38 <malloc>
 801c018:	9901      	ldr	r1, [sp, #4]
 801c01a:	6470      	str	r0, [r6, #68]	; 0x44
 801c01c:	4602      	mov	r2, r0
 801c01e:	b920      	cbnz	r0, 801c02a <strtok+0x26>
 801c020:	4b10      	ldr	r3, [pc, #64]	; (801c064 <strtok+0x60>)
 801c022:	4811      	ldr	r0, [pc, #68]	; (801c068 <strtok+0x64>)
 801c024:	215b      	movs	r1, #91	; 0x5b
 801c026:	f7fe fdd3 	bl	801abd0 <__assert_func>
 801c02a:	e9c0 4400 	strd	r4, r4, [r0]
 801c02e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801c032:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801c036:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801c03a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801c03e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801c042:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801c046:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801c04a:	6184      	str	r4, [r0, #24]
 801c04c:	7704      	strb	r4, [r0, #28]
 801c04e:	6244      	str	r4, [r0, #36]	; 0x24
 801c050:	6c72      	ldr	r2, [r6, #68]	; 0x44
 801c052:	2301      	movs	r3, #1
 801c054:	4628      	mov	r0, r5
 801c056:	b002      	add	sp, #8
 801c058:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c05c:	f000 b806 	b.w	801c06c <__strtok_r>
 801c060:	20000168 	.word	0x20000168
 801c064:	08022e43 	.word	0x08022e43
 801c068:	08022e5a 	.word	0x08022e5a

0801c06c <__strtok_r>:
 801c06c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c06e:	b908      	cbnz	r0, 801c074 <__strtok_r+0x8>
 801c070:	6810      	ldr	r0, [r2, #0]
 801c072:	b188      	cbz	r0, 801c098 <__strtok_r+0x2c>
 801c074:	4604      	mov	r4, r0
 801c076:	4620      	mov	r0, r4
 801c078:	f814 5b01 	ldrb.w	r5, [r4], #1
 801c07c:	460f      	mov	r7, r1
 801c07e:	f817 6b01 	ldrb.w	r6, [r7], #1
 801c082:	b91e      	cbnz	r6, 801c08c <__strtok_r+0x20>
 801c084:	b965      	cbnz	r5, 801c0a0 <__strtok_r+0x34>
 801c086:	6015      	str	r5, [r2, #0]
 801c088:	4628      	mov	r0, r5
 801c08a:	e005      	b.n	801c098 <__strtok_r+0x2c>
 801c08c:	42b5      	cmp	r5, r6
 801c08e:	d1f6      	bne.n	801c07e <__strtok_r+0x12>
 801c090:	2b00      	cmp	r3, #0
 801c092:	d1f0      	bne.n	801c076 <__strtok_r+0xa>
 801c094:	6014      	str	r4, [r2, #0]
 801c096:	7003      	strb	r3, [r0, #0]
 801c098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c09a:	461c      	mov	r4, r3
 801c09c:	e00c      	b.n	801c0b8 <__strtok_r+0x4c>
 801c09e:	b915      	cbnz	r5, 801c0a6 <__strtok_r+0x3a>
 801c0a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c0a4:	460e      	mov	r6, r1
 801c0a6:	f816 5b01 	ldrb.w	r5, [r6], #1
 801c0aa:	42ab      	cmp	r3, r5
 801c0ac:	d1f7      	bne.n	801c09e <__strtok_r+0x32>
 801c0ae:	2b00      	cmp	r3, #0
 801c0b0:	d0f3      	beq.n	801c09a <__strtok_r+0x2e>
 801c0b2:	2300      	movs	r3, #0
 801c0b4:	f804 3c01 	strb.w	r3, [r4, #-1]
 801c0b8:	6014      	str	r4, [r2, #0]
 801c0ba:	e7ed      	b.n	801c098 <__strtok_r+0x2c>

0801c0bc <strstr>:
 801c0bc:	780a      	ldrb	r2, [r1, #0]
 801c0be:	b570      	push	{r4, r5, r6, lr}
 801c0c0:	b96a      	cbnz	r2, 801c0de <strstr+0x22>
 801c0c2:	bd70      	pop	{r4, r5, r6, pc}
 801c0c4:	429a      	cmp	r2, r3
 801c0c6:	d109      	bne.n	801c0dc <strstr+0x20>
 801c0c8:	460c      	mov	r4, r1
 801c0ca:	4605      	mov	r5, r0
 801c0cc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801c0d0:	2b00      	cmp	r3, #0
 801c0d2:	d0f6      	beq.n	801c0c2 <strstr+0x6>
 801c0d4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801c0d8:	429e      	cmp	r6, r3
 801c0da:	d0f7      	beq.n	801c0cc <strstr+0x10>
 801c0dc:	3001      	adds	r0, #1
 801c0de:	7803      	ldrb	r3, [r0, #0]
 801c0e0:	2b00      	cmp	r3, #0
 801c0e2:	d1ef      	bne.n	801c0c4 <strstr+0x8>
 801c0e4:	4618      	mov	r0, r3
 801c0e6:	e7ec      	b.n	801c0c2 <strstr+0x6>

0801c0e8 <_localeconv_r>:
 801c0e8:	4800      	ldr	r0, [pc, #0]	; (801c0ec <_localeconv_r+0x4>)
 801c0ea:	4770      	bx	lr
 801c0ec:	2000025c 	.word	0x2000025c

0801c0f0 <_close_r>:
 801c0f0:	b538      	push	{r3, r4, r5, lr}
 801c0f2:	4d06      	ldr	r5, [pc, #24]	; (801c10c <_close_r+0x1c>)
 801c0f4:	2300      	movs	r3, #0
 801c0f6:	4604      	mov	r4, r0
 801c0f8:	4608      	mov	r0, r1
 801c0fa:	602b      	str	r3, [r5, #0]
 801c0fc:	f7e6 fb1f 	bl	800273e <_close>
 801c100:	1c43      	adds	r3, r0, #1
 801c102:	d102      	bne.n	801c10a <_close_r+0x1a>
 801c104:	682b      	ldr	r3, [r5, #0]
 801c106:	b103      	cbz	r3, 801c10a <_close_r+0x1a>
 801c108:	6023      	str	r3, [r4, #0]
 801c10a:	bd38      	pop	{r3, r4, r5, pc}
 801c10c:	2000da68 	.word	0x2000da68

0801c110 <_reclaim_reent>:
 801c110:	4b29      	ldr	r3, [pc, #164]	; (801c1b8 <_reclaim_reent+0xa8>)
 801c112:	681b      	ldr	r3, [r3, #0]
 801c114:	4283      	cmp	r3, r0
 801c116:	b570      	push	{r4, r5, r6, lr}
 801c118:	4604      	mov	r4, r0
 801c11a:	d04b      	beq.n	801c1b4 <_reclaim_reent+0xa4>
 801c11c:	69c3      	ldr	r3, [r0, #28]
 801c11e:	b143      	cbz	r3, 801c132 <_reclaim_reent+0x22>
 801c120:	68db      	ldr	r3, [r3, #12]
 801c122:	2b00      	cmp	r3, #0
 801c124:	d144      	bne.n	801c1b0 <_reclaim_reent+0xa0>
 801c126:	69e3      	ldr	r3, [r4, #28]
 801c128:	6819      	ldr	r1, [r3, #0]
 801c12a:	b111      	cbz	r1, 801c132 <_reclaim_reent+0x22>
 801c12c:	4620      	mov	r0, r4
 801c12e:	f000 ff59 	bl	801cfe4 <_free_r>
 801c132:	6961      	ldr	r1, [r4, #20]
 801c134:	b111      	cbz	r1, 801c13c <_reclaim_reent+0x2c>
 801c136:	4620      	mov	r0, r4
 801c138:	f000 ff54 	bl	801cfe4 <_free_r>
 801c13c:	69e1      	ldr	r1, [r4, #28]
 801c13e:	b111      	cbz	r1, 801c146 <_reclaim_reent+0x36>
 801c140:	4620      	mov	r0, r4
 801c142:	f000 ff4f 	bl	801cfe4 <_free_r>
 801c146:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c148:	b111      	cbz	r1, 801c150 <_reclaim_reent+0x40>
 801c14a:	4620      	mov	r0, r4
 801c14c:	f000 ff4a 	bl	801cfe4 <_free_r>
 801c150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c152:	b111      	cbz	r1, 801c15a <_reclaim_reent+0x4a>
 801c154:	4620      	mov	r0, r4
 801c156:	f000 ff45 	bl	801cfe4 <_free_r>
 801c15a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c15c:	b111      	cbz	r1, 801c164 <_reclaim_reent+0x54>
 801c15e:	4620      	mov	r0, r4
 801c160:	f000 ff40 	bl	801cfe4 <_free_r>
 801c164:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801c166:	b111      	cbz	r1, 801c16e <_reclaim_reent+0x5e>
 801c168:	4620      	mov	r0, r4
 801c16a:	f000 ff3b 	bl	801cfe4 <_free_r>
 801c16e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801c170:	b111      	cbz	r1, 801c178 <_reclaim_reent+0x68>
 801c172:	4620      	mov	r0, r4
 801c174:	f000 ff36 	bl	801cfe4 <_free_r>
 801c178:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801c17a:	b111      	cbz	r1, 801c182 <_reclaim_reent+0x72>
 801c17c:	4620      	mov	r0, r4
 801c17e:	f000 ff31 	bl	801cfe4 <_free_r>
 801c182:	6a23      	ldr	r3, [r4, #32]
 801c184:	b1b3      	cbz	r3, 801c1b4 <_reclaim_reent+0xa4>
 801c186:	4620      	mov	r0, r4
 801c188:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c18c:	4718      	bx	r3
 801c18e:	5949      	ldr	r1, [r1, r5]
 801c190:	b941      	cbnz	r1, 801c1a4 <_reclaim_reent+0x94>
 801c192:	3504      	adds	r5, #4
 801c194:	69e3      	ldr	r3, [r4, #28]
 801c196:	2d80      	cmp	r5, #128	; 0x80
 801c198:	68d9      	ldr	r1, [r3, #12]
 801c19a:	d1f8      	bne.n	801c18e <_reclaim_reent+0x7e>
 801c19c:	4620      	mov	r0, r4
 801c19e:	f000 ff21 	bl	801cfe4 <_free_r>
 801c1a2:	e7c0      	b.n	801c126 <_reclaim_reent+0x16>
 801c1a4:	680e      	ldr	r6, [r1, #0]
 801c1a6:	4620      	mov	r0, r4
 801c1a8:	f000 ff1c 	bl	801cfe4 <_free_r>
 801c1ac:	4631      	mov	r1, r6
 801c1ae:	e7ef      	b.n	801c190 <_reclaim_reent+0x80>
 801c1b0:	2500      	movs	r5, #0
 801c1b2:	e7ef      	b.n	801c194 <_reclaim_reent+0x84>
 801c1b4:	bd70      	pop	{r4, r5, r6, pc}
 801c1b6:	bf00      	nop
 801c1b8:	20000168 	.word	0x20000168

0801c1bc <_lseek_r>:
 801c1bc:	b538      	push	{r3, r4, r5, lr}
 801c1be:	4d07      	ldr	r5, [pc, #28]	; (801c1dc <_lseek_r+0x20>)
 801c1c0:	4604      	mov	r4, r0
 801c1c2:	4608      	mov	r0, r1
 801c1c4:	4611      	mov	r1, r2
 801c1c6:	2200      	movs	r2, #0
 801c1c8:	602a      	str	r2, [r5, #0]
 801c1ca:	461a      	mov	r2, r3
 801c1cc:	f7e6 fade 	bl	800278c <_lseek>
 801c1d0:	1c43      	adds	r3, r0, #1
 801c1d2:	d102      	bne.n	801c1da <_lseek_r+0x1e>
 801c1d4:	682b      	ldr	r3, [r5, #0]
 801c1d6:	b103      	cbz	r3, 801c1da <_lseek_r+0x1e>
 801c1d8:	6023      	str	r3, [r4, #0]
 801c1da:	bd38      	pop	{r3, r4, r5, pc}
 801c1dc:	2000da68 	.word	0x2000da68

0801c1e0 <_read_r>:
 801c1e0:	b538      	push	{r3, r4, r5, lr}
 801c1e2:	4d07      	ldr	r5, [pc, #28]	; (801c200 <_read_r+0x20>)
 801c1e4:	4604      	mov	r4, r0
 801c1e6:	4608      	mov	r0, r1
 801c1e8:	4611      	mov	r1, r2
 801c1ea:	2200      	movs	r2, #0
 801c1ec:	602a      	str	r2, [r5, #0]
 801c1ee:	461a      	mov	r2, r3
 801c1f0:	f7e6 fa6c 	bl	80026cc <_read>
 801c1f4:	1c43      	adds	r3, r0, #1
 801c1f6:	d102      	bne.n	801c1fe <_read_r+0x1e>
 801c1f8:	682b      	ldr	r3, [r5, #0]
 801c1fa:	b103      	cbz	r3, 801c1fe <_read_r+0x1e>
 801c1fc:	6023      	str	r3, [r4, #0]
 801c1fe:	bd38      	pop	{r3, r4, r5, pc}
 801c200:	2000da68 	.word	0x2000da68

0801c204 <_sbrk_r>:
 801c204:	b538      	push	{r3, r4, r5, lr}
 801c206:	4d06      	ldr	r5, [pc, #24]	; (801c220 <_sbrk_r+0x1c>)
 801c208:	2300      	movs	r3, #0
 801c20a:	4604      	mov	r4, r0
 801c20c:	4608      	mov	r0, r1
 801c20e:	602b      	str	r3, [r5, #0]
 801c210:	f7e6 faca 	bl	80027a8 <_sbrk>
 801c214:	1c43      	adds	r3, r0, #1
 801c216:	d102      	bne.n	801c21e <_sbrk_r+0x1a>
 801c218:	682b      	ldr	r3, [r5, #0]
 801c21a:	b103      	cbz	r3, 801c21e <_sbrk_r+0x1a>
 801c21c:	6023      	str	r3, [r4, #0]
 801c21e:	bd38      	pop	{r3, r4, r5, pc}
 801c220:	2000da68 	.word	0x2000da68

0801c224 <_write_r>:
 801c224:	b538      	push	{r3, r4, r5, lr}
 801c226:	4d07      	ldr	r5, [pc, #28]	; (801c244 <_write_r+0x20>)
 801c228:	4604      	mov	r4, r0
 801c22a:	4608      	mov	r0, r1
 801c22c:	4611      	mov	r1, r2
 801c22e:	2200      	movs	r2, #0
 801c230:	602a      	str	r2, [r5, #0]
 801c232:	461a      	mov	r2, r3
 801c234:	f7e6 fa67 	bl	8002706 <_write>
 801c238:	1c43      	adds	r3, r0, #1
 801c23a:	d102      	bne.n	801c242 <_write_r+0x1e>
 801c23c:	682b      	ldr	r3, [r5, #0]
 801c23e:	b103      	cbz	r3, 801c242 <_write_r+0x1e>
 801c240:	6023      	str	r3, [r4, #0]
 801c242:	bd38      	pop	{r3, r4, r5, pc}
 801c244:	2000da68 	.word	0x2000da68

0801c248 <__errno>:
 801c248:	4b01      	ldr	r3, [pc, #4]	; (801c250 <__errno+0x8>)
 801c24a:	6818      	ldr	r0, [r3, #0]
 801c24c:	4770      	bx	lr
 801c24e:	bf00      	nop
 801c250:	20000168 	.word	0x20000168

0801c254 <__libc_init_array>:
 801c254:	b570      	push	{r4, r5, r6, lr}
 801c256:	4d0d      	ldr	r5, [pc, #52]	; (801c28c <__libc_init_array+0x38>)
 801c258:	4c0d      	ldr	r4, [pc, #52]	; (801c290 <__libc_init_array+0x3c>)
 801c25a:	1b64      	subs	r4, r4, r5
 801c25c:	10a4      	asrs	r4, r4, #2
 801c25e:	2600      	movs	r6, #0
 801c260:	42a6      	cmp	r6, r4
 801c262:	d109      	bne.n	801c278 <__libc_init_array+0x24>
 801c264:	4d0b      	ldr	r5, [pc, #44]	; (801c294 <__libc_init_array+0x40>)
 801c266:	4c0c      	ldr	r4, [pc, #48]	; (801c298 <__libc_init_array+0x44>)
 801c268:	f003 fe1c 	bl	801fea4 <_init>
 801c26c:	1b64      	subs	r4, r4, r5
 801c26e:	10a4      	asrs	r4, r4, #2
 801c270:	2600      	movs	r6, #0
 801c272:	42a6      	cmp	r6, r4
 801c274:	d105      	bne.n	801c282 <__libc_init_array+0x2e>
 801c276:	bd70      	pop	{r4, r5, r6, pc}
 801c278:	f855 3b04 	ldr.w	r3, [r5], #4
 801c27c:	4798      	blx	r3
 801c27e:	3601      	adds	r6, #1
 801c280:	e7ee      	b.n	801c260 <__libc_init_array+0xc>
 801c282:	f855 3b04 	ldr.w	r3, [r5], #4
 801c286:	4798      	blx	r3
 801c288:	3601      	adds	r6, #1
 801c28a:	e7f2      	b.n	801c272 <__libc_init_array+0x1e>
 801c28c:	08023278 	.word	0x08023278
 801c290:	08023278 	.word	0x08023278
 801c294:	08023278 	.word	0x08023278
 801c298:	0802327c 	.word	0x0802327c

0801c29c <__retarget_lock_init_recursive>:
 801c29c:	4770      	bx	lr

0801c29e <__retarget_lock_acquire_recursive>:
 801c29e:	4770      	bx	lr

0801c2a0 <__retarget_lock_release_recursive>:
 801c2a0:	4770      	bx	lr

0801c2a2 <strcpy>:
 801c2a2:	4603      	mov	r3, r0
 801c2a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c2a8:	f803 2b01 	strb.w	r2, [r3], #1
 801c2ac:	2a00      	cmp	r2, #0
 801c2ae:	d1f9      	bne.n	801c2a4 <strcpy+0x2>
 801c2b0:	4770      	bx	lr

0801c2b2 <memcpy>:
 801c2b2:	440a      	add	r2, r1
 801c2b4:	4291      	cmp	r1, r2
 801c2b6:	f100 33ff 	add.w	r3, r0, #4294967295
 801c2ba:	d100      	bne.n	801c2be <memcpy+0xc>
 801c2bc:	4770      	bx	lr
 801c2be:	b510      	push	{r4, lr}
 801c2c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c2c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c2c8:	4291      	cmp	r1, r2
 801c2ca:	d1f9      	bne.n	801c2c0 <memcpy+0xe>
 801c2cc:	bd10      	pop	{r4, pc}
	...

0801c2d0 <nanf>:
 801c2d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801c2d8 <nanf+0x8>
 801c2d4:	4770      	bx	lr
 801c2d6:	bf00      	nop
 801c2d8:	7fc00000 	.word	0x7fc00000

0801c2dc <abort>:
 801c2dc:	b508      	push	{r3, lr}
 801c2de:	2006      	movs	r0, #6
 801c2e0:	f003 f978 	bl	801f5d4 <raise>
 801c2e4:	2001      	movs	r0, #1
 801c2e6:	f7e6 f9e7 	bl	80026b8 <_exit>

0801c2ea <quorem>:
 801c2ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2ee:	6903      	ldr	r3, [r0, #16]
 801c2f0:	690c      	ldr	r4, [r1, #16]
 801c2f2:	42a3      	cmp	r3, r4
 801c2f4:	4607      	mov	r7, r0
 801c2f6:	db7e      	blt.n	801c3f6 <quorem+0x10c>
 801c2f8:	3c01      	subs	r4, #1
 801c2fa:	f101 0814 	add.w	r8, r1, #20
 801c2fe:	f100 0514 	add.w	r5, r0, #20
 801c302:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c306:	9301      	str	r3, [sp, #4]
 801c308:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c30c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c310:	3301      	adds	r3, #1
 801c312:	429a      	cmp	r2, r3
 801c314:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c318:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c31c:	fbb2 f6f3 	udiv	r6, r2, r3
 801c320:	d331      	bcc.n	801c386 <quorem+0x9c>
 801c322:	f04f 0e00 	mov.w	lr, #0
 801c326:	4640      	mov	r0, r8
 801c328:	46ac      	mov	ip, r5
 801c32a:	46f2      	mov	sl, lr
 801c32c:	f850 2b04 	ldr.w	r2, [r0], #4
 801c330:	b293      	uxth	r3, r2
 801c332:	fb06 e303 	mla	r3, r6, r3, lr
 801c336:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c33a:	0c1a      	lsrs	r2, r3, #16
 801c33c:	b29b      	uxth	r3, r3
 801c33e:	ebaa 0303 	sub.w	r3, sl, r3
 801c342:	f8dc a000 	ldr.w	sl, [ip]
 801c346:	fa13 f38a 	uxtah	r3, r3, sl
 801c34a:	fb06 220e 	mla	r2, r6, lr, r2
 801c34e:	9300      	str	r3, [sp, #0]
 801c350:	9b00      	ldr	r3, [sp, #0]
 801c352:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c356:	b292      	uxth	r2, r2
 801c358:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801c35c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c360:	f8bd 3000 	ldrh.w	r3, [sp]
 801c364:	4581      	cmp	r9, r0
 801c366:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c36a:	f84c 3b04 	str.w	r3, [ip], #4
 801c36e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801c372:	d2db      	bcs.n	801c32c <quorem+0x42>
 801c374:	f855 300b 	ldr.w	r3, [r5, fp]
 801c378:	b92b      	cbnz	r3, 801c386 <quorem+0x9c>
 801c37a:	9b01      	ldr	r3, [sp, #4]
 801c37c:	3b04      	subs	r3, #4
 801c37e:	429d      	cmp	r5, r3
 801c380:	461a      	mov	r2, r3
 801c382:	d32c      	bcc.n	801c3de <quorem+0xf4>
 801c384:	613c      	str	r4, [r7, #16]
 801c386:	4638      	mov	r0, r7
 801c388:	f001 f93e 	bl	801d608 <__mcmp>
 801c38c:	2800      	cmp	r0, #0
 801c38e:	db22      	blt.n	801c3d6 <quorem+0xec>
 801c390:	3601      	adds	r6, #1
 801c392:	4629      	mov	r1, r5
 801c394:	2000      	movs	r0, #0
 801c396:	f858 2b04 	ldr.w	r2, [r8], #4
 801c39a:	f8d1 c000 	ldr.w	ip, [r1]
 801c39e:	b293      	uxth	r3, r2
 801c3a0:	1ac3      	subs	r3, r0, r3
 801c3a2:	0c12      	lsrs	r2, r2, #16
 801c3a4:	fa13 f38c 	uxtah	r3, r3, ip
 801c3a8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801c3ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c3b0:	b29b      	uxth	r3, r3
 801c3b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c3b6:	45c1      	cmp	r9, r8
 801c3b8:	f841 3b04 	str.w	r3, [r1], #4
 801c3bc:	ea4f 4022 	mov.w	r0, r2, asr #16
 801c3c0:	d2e9      	bcs.n	801c396 <quorem+0xac>
 801c3c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c3c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c3ca:	b922      	cbnz	r2, 801c3d6 <quorem+0xec>
 801c3cc:	3b04      	subs	r3, #4
 801c3ce:	429d      	cmp	r5, r3
 801c3d0:	461a      	mov	r2, r3
 801c3d2:	d30a      	bcc.n	801c3ea <quorem+0x100>
 801c3d4:	613c      	str	r4, [r7, #16]
 801c3d6:	4630      	mov	r0, r6
 801c3d8:	b003      	add	sp, #12
 801c3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3de:	6812      	ldr	r2, [r2, #0]
 801c3e0:	3b04      	subs	r3, #4
 801c3e2:	2a00      	cmp	r2, #0
 801c3e4:	d1ce      	bne.n	801c384 <quorem+0x9a>
 801c3e6:	3c01      	subs	r4, #1
 801c3e8:	e7c9      	b.n	801c37e <quorem+0x94>
 801c3ea:	6812      	ldr	r2, [r2, #0]
 801c3ec:	3b04      	subs	r3, #4
 801c3ee:	2a00      	cmp	r2, #0
 801c3f0:	d1f0      	bne.n	801c3d4 <quorem+0xea>
 801c3f2:	3c01      	subs	r4, #1
 801c3f4:	e7eb      	b.n	801c3ce <quorem+0xe4>
 801c3f6:	2000      	movs	r0, #0
 801c3f8:	e7ee      	b.n	801c3d8 <quorem+0xee>
 801c3fa:	0000      	movs	r0, r0
 801c3fc:	0000      	movs	r0, r0
	...

0801c400 <_dtoa_r>:
 801c400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c404:	ed2d 8b04 	vpush	{d8-d9}
 801c408:	69c5      	ldr	r5, [r0, #28]
 801c40a:	b093      	sub	sp, #76	; 0x4c
 801c40c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801c410:	ec57 6b10 	vmov	r6, r7, d0
 801c414:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801c418:	9107      	str	r1, [sp, #28]
 801c41a:	4604      	mov	r4, r0
 801c41c:	920a      	str	r2, [sp, #40]	; 0x28
 801c41e:	930d      	str	r3, [sp, #52]	; 0x34
 801c420:	b975      	cbnz	r5, 801c440 <_dtoa_r+0x40>
 801c422:	2010      	movs	r0, #16
 801c424:	f7fe fc08 	bl	801ac38 <malloc>
 801c428:	4602      	mov	r2, r0
 801c42a:	61e0      	str	r0, [r4, #28]
 801c42c:	b920      	cbnz	r0, 801c438 <_dtoa_r+0x38>
 801c42e:	4bae      	ldr	r3, [pc, #696]	; (801c6e8 <_dtoa_r+0x2e8>)
 801c430:	21ef      	movs	r1, #239	; 0xef
 801c432:	48ae      	ldr	r0, [pc, #696]	; (801c6ec <_dtoa_r+0x2ec>)
 801c434:	f7fe fbcc 	bl	801abd0 <__assert_func>
 801c438:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c43c:	6005      	str	r5, [r0, #0]
 801c43e:	60c5      	str	r5, [r0, #12]
 801c440:	69e3      	ldr	r3, [r4, #28]
 801c442:	6819      	ldr	r1, [r3, #0]
 801c444:	b151      	cbz	r1, 801c45c <_dtoa_r+0x5c>
 801c446:	685a      	ldr	r2, [r3, #4]
 801c448:	604a      	str	r2, [r1, #4]
 801c44a:	2301      	movs	r3, #1
 801c44c:	4093      	lsls	r3, r2
 801c44e:	608b      	str	r3, [r1, #8]
 801c450:	4620      	mov	r0, r4
 801c452:	f000 fe53 	bl	801d0fc <_Bfree>
 801c456:	69e3      	ldr	r3, [r4, #28]
 801c458:	2200      	movs	r2, #0
 801c45a:	601a      	str	r2, [r3, #0]
 801c45c:	1e3b      	subs	r3, r7, #0
 801c45e:	bfbb      	ittet	lt
 801c460:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c464:	9303      	strlt	r3, [sp, #12]
 801c466:	2300      	movge	r3, #0
 801c468:	2201      	movlt	r2, #1
 801c46a:	bfac      	ite	ge
 801c46c:	f8c8 3000 	strge.w	r3, [r8]
 801c470:	f8c8 2000 	strlt.w	r2, [r8]
 801c474:	4b9e      	ldr	r3, [pc, #632]	; (801c6f0 <_dtoa_r+0x2f0>)
 801c476:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801c47a:	ea33 0308 	bics.w	r3, r3, r8
 801c47e:	d11b      	bne.n	801c4b8 <_dtoa_r+0xb8>
 801c480:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c482:	f242 730f 	movw	r3, #9999	; 0x270f
 801c486:	6013      	str	r3, [r2, #0]
 801c488:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801c48c:	4333      	orrs	r3, r6
 801c48e:	f000 8593 	beq.w	801cfb8 <_dtoa_r+0xbb8>
 801c492:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c494:	b963      	cbnz	r3, 801c4b0 <_dtoa_r+0xb0>
 801c496:	4b97      	ldr	r3, [pc, #604]	; (801c6f4 <_dtoa_r+0x2f4>)
 801c498:	e027      	b.n	801c4ea <_dtoa_r+0xea>
 801c49a:	4b97      	ldr	r3, [pc, #604]	; (801c6f8 <_dtoa_r+0x2f8>)
 801c49c:	9300      	str	r3, [sp, #0]
 801c49e:	3308      	adds	r3, #8
 801c4a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c4a2:	6013      	str	r3, [r2, #0]
 801c4a4:	9800      	ldr	r0, [sp, #0]
 801c4a6:	b013      	add	sp, #76	; 0x4c
 801c4a8:	ecbd 8b04 	vpop	{d8-d9}
 801c4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4b0:	4b90      	ldr	r3, [pc, #576]	; (801c6f4 <_dtoa_r+0x2f4>)
 801c4b2:	9300      	str	r3, [sp, #0]
 801c4b4:	3303      	adds	r3, #3
 801c4b6:	e7f3      	b.n	801c4a0 <_dtoa_r+0xa0>
 801c4b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c4bc:	2200      	movs	r2, #0
 801c4be:	ec51 0b17 	vmov	r0, r1, d7
 801c4c2:	eeb0 8a47 	vmov.f32	s16, s14
 801c4c6:	eef0 8a67 	vmov.f32	s17, s15
 801c4ca:	2300      	movs	r3, #0
 801c4cc:	f7e4 fb14 	bl	8000af8 <__aeabi_dcmpeq>
 801c4d0:	4681      	mov	r9, r0
 801c4d2:	b160      	cbz	r0, 801c4ee <_dtoa_r+0xee>
 801c4d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c4d6:	2301      	movs	r3, #1
 801c4d8:	6013      	str	r3, [r2, #0]
 801c4da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c4dc:	2b00      	cmp	r3, #0
 801c4de:	f000 8568 	beq.w	801cfb2 <_dtoa_r+0xbb2>
 801c4e2:	4b86      	ldr	r3, [pc, #536]	; (801c6fc <_dtoa_r+0x2fc>)
 801c4e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c4e6:	6013      	str	r3, [r2, #0]
 801c4e8:	3b01      	subs	r3, #1
 801c4ea:	9300      	str	r3, [sp, #0]
 801c4ec:	e7da      	b.n	801c4a4 <_dtoa_r+0xa4>
 801c4ee:	aa10      	add	r2, sp, #64	; 0x40
 801c4f0:	a911      	add	r1, sp, #68	; 0x44
 801c4f2:	4620      	mov	r0, r4
 801c4f4:	eeb0 0a48 	vmov.f32	s0, s16
 801c4f8:	eef0 0a68 	vmov.f32	s1, s17
 801c4fc:	f001 f99a 	bl	801d834 <__d2b>
 801c500:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801c504:	4682      	mov	sl, r0
 801c506:	2d00      	cmp	r5, #0
 801c508:	d07f      	beq.n	801c60a <_dtoa_r+0x20a>
 801c50a:	ee18 3a90 	vmov	r3, s17
 801c50e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c512:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801c516:	ec51 0b18 	vmov	r0, r1, d8
 801c51a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801c51e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801c522:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801c526:	4619      	mov	r1, r3
 801c528:	2200      	movs	r2, #0
 801c52a:	4b75      	ldr	r3, [pc, #468]	; (801c700 <_dtoa_r+0x300>)
 801c52c:	f7e3 fec4 	bl	80002b8 <__aeabi_dsub>
 801c530:	a367      	add	r3, pc, #412	; (adr r3, 801c6d0 <_dtoa_r+0x2d0>)
 801c532:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c536:	f7e4 f877 	bl	8000628 <__aeabi_dmul>
 801c53a:	a367      	add	r3, pc, #412	; (adr r3, 801c6d8 <_dtoa_r+0x2d8>)
 801c53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c540:	f7e3 febc 	bl	80002bc <__adddf3>
 801c544:	4606      	mov	r6, r0
 801c546:	4628      	mov	r0, r5
 801c548:	460f      	mov	r7, r1
 801c54a:	f7e4 f803 	bl	8000554 <__aeabi_i2d>
 801c54e:	a364      	add	r3, pc, #400	; (adr r3, 801c6e0 <_dtoa_r+0x2e0>)
 801c550:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c554:	f7e4 f868 	bl	8000628 <__aeabi_dmul>
 801c558:	4602      	mov	r2, r0
 801c55a:	460b      	mov	r3, r1
 801c55c:	4630      	mov	r0, r6
 801c55e:	4639      	mov	r1, r7
 801c560:	f7e3 feac 	bl	80002bc <__adddf3>
 801c564:	4606      	mov	r6, r0
 801c566:	460f      	mov	r7, r1
 801c568:	f7e4 fb0e 	bl	8000b88 <__aeabi_d2iz>
 801c56c:	2200      	movs	r2, #0
 801c56e:	4683      	mov	fp, r0
 801c570:	2300      	movs	r3, #0
 801c572:	4630      	mov	r0, r6
 801c574:	4639      	mov	r1, r7
 801c576:	f7e4 fac9 	bl	8000b0c <__aeabi_dcmplt>
 801c57a:	b148      	cbz	r0, 801c590 <_dtoa_r+0x190>
 801c57c:	4658      	mov	r0, fp
 801c57e:	f7e3 ffe9 	bl	8000554 <__aeabi_i2d>
 801c582:	4632      	mov	r2, r6
 801c584:	463b      	mov	r3, r7
 801c586:	f7e4 fab7 	bl	8000af8 <__aeabi_dcmpeq>
 801c58a:	b908      	cbnz	r0, 801c590 <_dtoa_r+0x190>
 801c58c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c590:	f1bb 0f16 	cmp.w	fp, #22
 801c594:	d857      	bhi.n	801c646 <_dtoa_r+0x246>
 801c596:	4b5b      	ldr	r3, [pc, #364]	; (801c704 <_dtoa_r+0x304>)
 801c598:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5a0:	ec51 0b18 	vmov	r0, r1, d8
 801c5a4:	f7e4 fab2 	bl	8000b0c <__aeabi_dcmplt>
 801c5a8:	2800      	cmp	r0, #0
 801c5aa:	d04e      	beq.n	801c64a <_dtoa_r+0x24a>
 801c5ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c5b0:	2300      	movs	r3, #0
 801c5b2:	930c      	str	r3, [sp, #48]	; 0x30
 801c5b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c5b6:	1b5b      	subs	r3, r3, r5
 801c5b8:	1e5a      	subs	r2, r3, #1
 801c5ba:	bf45      	ittet	mi
 801c5bc:	f1c3 0301 	rsbmi	r3, r3, #1
 801c5c0:	9305      	strmi	r3, [sp, #20]
 801c5c2:	2300      	movpl	r3, #0
 801c5c4:	2300      	movmi	r3, #0
 801c5c6:	9206      	str	r2, [sp, #24]
 801c5c8:	bf54      	ite	pl
 801c5ca:	9305      	strpl	r3, [sp, #20]
 801c5cc:	9306      	strmi	r3, [sp, #24]
 801c5ce:	f1bb 0f00 	cmp.w	fp, #0
 801c5d2:	db3c      	blt.n	801c64e <_dtoa_r+0x24e>
 801c5d4:	9b06      	ldr	r3, [sp, #24]
 801c5d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801c5da:	445b      	add	r3, fp
 801c5dc:	9306      	str	r3, [sp, #24]
 801c5de:	2300      	movs	r3, #0
 801c5e0:	9308      	str	r3, [sp, #32]
 801c5e2:	9b07      	ldr	r3, [sp, #28]
 801c5e4:	2b09      	cmp	r3, #9
 801c5e6:	d868      	bhi.n	801c6ba <_dtoa_r+0x2ba>
 801c5e8:	2b05      	cmp	r3, #5
 801c5ea:	bfc4      	itt	gt
 801c5ec:	3b04      	subgt	r3, #4
 801c5ee:	9307      	strgt	r3, [sp, #28]
 801c5f0:	9b07      	ldr	r3, [sp, #28]
 801c5f2:	f1a3 0302 	sub.w	r3, r3, #2
 801c5f6:	bfcc      	ite	gt
 801c5f8:	2500      	movgt	r5, #0
 801c5fa:	2501      	movle	r5, #1
 801c5fc:	2b03      	cmp	r3, #3
 801c5fe:	f200 8085 	bhi.w	801c70c <_dtoa_r+0x30c>
 801c602:	e8df f003 	tbb	[pc, r3]
 801c606:	3b2e      	.short	0x3b2e
 801c608:	5839      	.short	0x5839
 801c60a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801c60e:	441d      	add	r5, r3
 801c610:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801c614:	2b20      	cmp	r3, #32
 801c616:	bfc1      	itttt	gt
 801c618:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801c61c:	fa08 f803 	lslgt.w	r8, r8, r3
 801c620:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801c624:	fa26 f303 	lsrgt.w	r3, r6, r3
 801c628:	bfd6      	itet	le
 801c62a:	f1c3 0320 	rsble	r3, r3, #32
 801c62e:	ea48 0003 	orrgt.w	r0, r8, r3
 801c632:	fa06 f003 	lslle.w	r0, r6, r3
 801c636:	f7e3 ff7d 	bl	8000534 <__aeabi_ui2d>
 801c63a:	2201      	movs	r2, #1
 801c63c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801c640:	3d01      	subs	r5, #1
 801c642:	920e      	str	r2, [sp, #56]	; 0x38
 801c644:	e76f      	b.n	801c526 <_dtoa_r+0x126>
 801c646:	2301      	movs	r3, #1
 801c648:	e7b3      	b.n	801c5b2 <_dtoa_r+0x1b2>
 801c64a:	900c      	str	r0, [sp, #48]	; 0x30
 801c64c:	e7b2      	b.n	801c5b4 <_dtoa_r+0x1b4>
 801c64e:	9b05      	ldr	r3, [sp, #20]
 801c650:	eba3 030b 	sub.w	r3, r3, fp
 801c654:	9305      	str	r3, [sp, #20]
 801c656:	f1cb 0300 	rsb	r3, fp, #0
 801c65a:	9308      	str	r3, [sp, #32]
 801c65c:	2300      	movs	r3, #0
 801c65e:	930b      	str	r3, [sp, #44]	; 0x2c
 801c660:	e7bf      	b.n	801c5e2 <_dtoa_r+0x1e2>
 801c662:	2300      	movs	r3, #0
 801c664:	9309      	str	r3, [sp, #36]	; 0x24
 801c666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c668:	2b00      	cmp	r3, #0
 801c66a:	dc52      	bgt.n	801c712 <_dtoa_r+0x312>
 801c66c:	2301      	movs	r3, #1
 801c66e:	9301      	str	r3, [sp, #4]
 801c670:	9304      	str	r3, [sp, #16]
 801c672:	461a      	mov	r2, r3
 801c674:	920a      	str	r2, [sp, #40]	; 0x28
 801c676:	e00b      	b.n	801c690 <_dtoa_r+0x290>
 801c678:	2301      	movs	r3, #1
 801c67a:	e7f3      	b.n	801c664 <_dtoa_r+0x264>
 801c67c:	2300      	movs	r3, #0
 801c67e:	9309      	str	r3, [sp, #36]	; 0x24
 801c680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c682:	445b      	add	r3, fp
 801c684:	9301      	str	r3, [sp, #4]
 801c686:	3301      	adds	r3, #1
 801c688:	2b01      	cmp	r3, #1
 801c68a:	9304      	str	r3, [sp, #16]
 801c68c:	bfb8      	it	lt
 801c68e:	2301      	movlt	r3, #1
 801c690:	69e0      	ldr	r0, [r4, #28]
 801c692:	2100      	movs	r1, #0
 801c694:	2204      	movs	r2, #4
 801c696:	f102 0614 	add.w	r6, r2, #20
 801c69a:	429e      	cmp	r6, r3
 801c69c:	d93d      	bls.n	801c71a <_dtoa_r+0x31a>
 801c69e:	6041      	str	r1, [r0, #4]
 801c6a0:	4620      	mov	r0, r4
 801c6a2:	f000 fceb 	bl	801d07c <_Balloc>
 801c6a6:	9000      	str	r0, [sp, #0]
 801c6a8:	2800      	cmp	r0, #0
 801c6aa:	d139      	bne.n	801c720 <_dtoa_r+0x320>
 801c6ac:	4b16      	ldr	r3, [pc, #88]	; (801c708 <_dtoa_r+0x308>)
 801c6ae:	4602      	mov	r2, r0
 801c6b0:	f240 11af 	movw	r1, #431	; 0x1af
 801c6b4:	e6bd      	b.n	801c432 <_dtoa_r+0x32>
 801c6b6:	2301      	movs	r3, #1
 801c6b8:	e7e1      	b.n	801c67e <_dtoa_r+0x27e>
 801c6ba:	2501      	movs	r5, #1
 801c6bc:	2300      	movs	r3, #0
 801c6be:	9307      	str	r3, [sp, #28]
 801c6c0:	9509      	str	r5, [sp, #36]	; 0x24
 801c6c2:	f04f 33ff 	mov.w	r3, #4294967295
 801c6c6:	9301      	str	r3, [sp, #4]
 801c6c8:	9304      	str	r3, [sp, #16]
 801c6ca:	2200      	movs	r2, #0
 801c6cc:	2312      	movs	r3, #18
 801c6ce:	e7d1      	b.n	801c674 <_dtoa_r+0x274>
 801c6d0:	636f4361 	.word	0x636f4361
 801c6d4:	3fd287a7 	.word	0x3fd287a7
 801c6d8:	8b60c8b3 	.word	0x8b60c8b3
 801c6dc:	3fc68a28 	.word	0x3fc68a28
 801c6e0:	509f79fb 	.word	0x509f79fb
 801c6e4:	3fd34413 	.word	0x3fd34413
 801c6e8:	08022e43 	.word	0x08022e43
 801c6ec:	08022ec1 	.word	0x08022ec1
 801c6f0:	7ff00000 	.word	0x7ff00000
 801c6f4:	08022ebd 	.word	0x08022ebd
 801c6f8:	08022eb4 	.word	0x08022eb4
 801c6fc:	08023201 	.word	0x08023201
 801c700:	3ff80000 	.word	0x3ff80000
 801c704:	08022fb0 	.word	0x08022fb0
 801c708:	08022f19 	.word	0x08022f19
 801c70c:	2301      	movs	r3, #1
 801c70e:	9309      	str	r3, [sp, #36]	; 0x24
 801c710:	e7d7      	b.n	801c6c2 <_dtoa_r+0x2c2>
 801c712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c714:	9301      	str	r3, [sp, #4]
 801c716:	9304      	str	r3, [sp, #16]
 801c718:	e7ba      	b.n	801c690 <_dtoa_r+0x290>
 801c71a:	3101      	adds	r1, #1
 801c71c:	0052      	lsls	r2, r2, #1
 801c71e:	e7ba      	b.n	801c696 <_dtoa_r+0x296>
 801c720:	69e3      	ldr	r3, [r4, #28]
 801c722:	9a00      	ldr	r2, [sp, #0]
 801c724:	601a      	str	r2, [r3, #0]
 801c726:	9b04      	ldr	r3, [sp, #16]
 801c728:	2b0e      	cmp	r3, #14
 801c72a:	f200 80a8 	bhi.w	801c87e <_dtoa_r+0x47e>
 801c72e:	2d00      	cmp	r5, #0
 801c730:	f000 80a5 	beq.w	801c87e <_dtoa_r+0x47e>
 801c734:	f1bb 0f00 	cmp.w	fp, #0
 801c738:	dd38      	ble.n	801c7ac <_dtoa_r+0x3ac>
 801c73a:	4bc0      	ldr	r3, [pc, #768]	; (801ca3c <_dtoa_r+0x63c>)
 801c73c:	f00b 020f 	and.w	r2, fp, #15
 801c740:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c744:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801c748:	e9d3 6700 	ldrd	r6, r7, [r3]
 801c74c:	ea4f 182b 	mov.w	r8, fp, asr #4
 801c750:	d019      	beq.n	801c786 <_dtoa_r+0x386>
 801c752:	4bbb      	ldr	r3, [pc, #748]	; (801ca40 <_dtoa_r+0x640>)
 801c754:	ec51 0b18 	vmov	r0, r1, d8
 801c758:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c75c:	f7e4 f88e 	bl	800087c <__aeabi_ddiv>
 801c760:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c764:	f008 080f 	and.w	r8, r8, #15
 801c768:	2503      	movs	r5, #3
 801c76a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 801ca40 <_dtoa_r+0x640>
 801c76e:	f1b8 0f00 	cmp.w	r8, #0
 801c772:	d10a      	bne.n	801c78a <_dtoa_r+0x38a>
 801c774:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c778:	4632      	mov	r2, r6
 801c77a:	463b      	mov	r3, r7
 801c77c:	f7e4 f87e 	bl	800087c <__aeabi_ddiv>
 801c780:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c784:	e02b      	b.n	801c7de <_dtoa_r+0x3de>
 801c786:	2502      	movs	r5, #2
 801c788:	e7ef      	b.n	801c76a <_dtoa_r+0x36a>
 801c78a:	f018 0f01 	tst.w	r8, #1
 801c78e:	d008      	beq.n	801c7a2 <_dtoa_r+0x3a2>
 801c790:	4630      	mov	r0, r6
 801c792:	4639      	mov	r1, r7
 801c794:	e9d9 2300 	ldrd	r2, r3, [r9]
 801c798:	f7e3 ff46 	bl	8000628 <__aeabi_dmul>
 801c79c:	3501      	adds	r5, #1
 801c79e:	4606      	mov	r6, r0
 801c7a0:	460f      	mov	r7, r1
 801c7a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 801c7a6:	f109 0908 	add.w	r9, r9, #8
 801c7aa:	e7e0      	b.n	801c76e <_dtoa_r+0x36e>
 801c7ac:	f000 809f 	beq.w	801c8ee <_dtoa_r+0x4ee>
 801c7b0:	f1cb 0600 	rsb	r6, fp, #0
 801c7b4:	4ba1      	ldr	r3, [pc, #644]	; (801ca3c <_dtoa_r+0x63c>)
 801c7b6:	4fa2      	ldr	r7, [pc, #648]	; (801ca40 <_dtoa_r+0x640>)
 801c7b8:	f006 020f 	and.w	r2, r6, #15
 801c7bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7c4:	ec51 0b18 	vmov	r0, r1, d8
 801c7c8:	f7e3 ff2e 	bl	8000628 <__aeabi_dmul>
 801c7cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c7d0:	1136      	asrs	r6, r6, #4
 801c7d2:	2300      	movs	r3, #0
 801c7d4:	2502      	movs	r5, #2
 801c7d6:	2e00      	cmp	r6, #0
 801c7d8:	d17e      	bne.n	801c8d8 <_dtoa_r+0x4d8>
 801c7da:	2b00      	cmp	r3, #0
 801c7dc:	d1d0      	bne.n	801c780 <_dtoa_r+0x380>
 801c7de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c7e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801c7e4:	2b00      	cmp	r3, #0
 801c7e6:	f000 8084 	beq.w	801c8f2 <_dtoa_r+0x4f2>
 801c7ea:	4b96      	ldr	r3, [pc, #600]	; (801ca44 <_dtoa_r+0x644>)
 801c7ec:	2200      	movs	r2, #0
 801c7ee:	4640      	mov	r0, r8
 801c7f0:	4649      	mov	r1, r9
 801c7f2:	f7e4 f98b 	bl	8000b0c <__aeabi_dcmplt>
 801c7f6:	2800      	cmp	r0, #0
 801c7f8:	d07b      	beq.n	801c8f2 <_dtoa_r+0x4f2>
 801c7fa:	9b04      	ldr	r3, [sp, #16]
 801c7fc:	2b00      	cmp	r3, #0
 801c7fe:	d078      	beq.n	801c8f2 <_dtoa_r+0x4f2>
 801c800:	9b01      	ldr	r3, [sp, #4]
 801c802:	2b00      	cmp	r3, #0
 801c804:	dd39      	ble.n	801c87a <_dtoa_r+0x47a>
 801c806:	4b90      	ldr	r3, [pc, #576]	; (801ca48 <_dtoa_r+0x648>)
 801c808:	2200      	movs	r2, #0
 801c80a:	4640      	mov	r0, r8
 801c80c:	4649      	mov	r1, r9
 801c80e:	f7e3 ff0b 	bl	8000628 <__aeabi_dmul>
 801c812:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c816:	9e01      	ldr	r6, [sp, #4]
 801c818:	f10b 37ff 	add.w	r7, fp, #4294967295
 801c81c:	3501      	adds	r5, #1
 801c81e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801c822:	4628      	mov	r0, r5
 801c824:	f7e3 fe96 	bl	8000554 <__aeabi_i2d>
 801c828:	4642      	mov	r2, r8
 801c82a:	464b      	mov	r3, r9
 801c82c:	f7e3 fefc 	bl	8000628 <__aeabi_dmul>
 801c830:	4b86      	ldr	r3, [pc, #536]	; (801ca4c <_dtoa_r+0x64c>)
 801c832:	2200      	movs	r2, #0
 801c834:	f7e3 fd42 	bl	80002bc <__adddf3>
 801c838:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801c83c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c840:	9303      	str	r3, [sp, #12]
 801c842:	2e00      	cmp	r6, #0
 801c844:	d158      	bne.n	801c8f8 <_dtoa_r+0x4f8>
 801c846:	4b82      	ldr	r3, [pc, #520]	; (801ca50 <_dtoa_r+0x650>)
 801c848:	2200      	movs	r2, #0
 801c84a:	4640      	mov	r0, r8
 801c84c:	4649      	mov	r1, r9
 801c84e:	f7e3 fd33 	bl	80002b8 <__aeabi_dsub>
 801c852:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c856:	4680      	mov	r8, r0
 801c858:	4689      	mov	r9, r1
 801c85a:	f7e4 f975 	bl	8000b48 <__aeabi_dcmpgt>
 801c85e:	2800      	cmp	r0, #0
 801c860:	f040 8296 	bne.w	801cd90 <_dtoa_r+0x990>
 801c864:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801c868:	4640      	mov	r0, r8
 801c86a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c86e:	4649      	mov	r1, r9
 801c870:	f7e4 f94c 	bl	8000b0c <__aeabi_dcmplt>
 801c874:	2800      	cmp	r0, #0
 801c876:	f040 8289 	bne.w	801cd8c <_dtoa_r+0x98c>
 801c87a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801c87e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c880:	2b00      	cmp	r3, #0
 801c882:	f2c0 814e 	blt.w	801cb22 <_dtoa_r+0x722>
 801c886:	f1bb 0f0e 	cmp.w	fp, #14
 801c88a:	f300 814a 	bgt.w	801cb22 <_dtoa_r+0x722>
 801c88e:	4b6b      	ldr	r3, [pc, #428]	; (801ca3c <_dtoa_r+0x63c>)
 801c890:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c894:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c89a:	2b00      	cmp	r3, #0
 801c89c:	f280 80dc 	bge.w	801ca58 <_dtoa_r+0x658>
 801c8a0:	9b04      	ldr	r3, [sp, #16]
 801c8a2:	2b00      	cmp	r3, #0
 801c8a4:	f300 80d8 	bgt.w	801ca58 <_dtoa_r+0x658>
 801c8a8:	f040 826f 	bne.w	801cd8a <_dtoa_r+0x98a>
 801c8ac:	4b68      	ldr	r3, [pc, #416]	; (801ca50 <_dtoa_r+0x650>)
 801c8ae:	2200      	movs	r2, #0
 801c8b0:	4640      	mov	r0, r8
 801c8b2:	4649      	mov	r1, r9
 801c8b4:	f7e3 feb8 	bl	8000628 <__aeabi_dmul>
 801c8b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c8bc:	f7e4 f93a 	bl	8000b34 <__aeabi_dcmpge>
 801c8c0:	9e04      	ldr	r6, [sp, #16]
 801c8c2:	4637      	mov	r7, r6
 801c8c4:	2800      	cmp	r0, #0
 801c8c6:	f040 8245 	bne.w	801cd54 <_dtoa_r+0x954>
 801c8ca:	9d00      	ldr	r5, [sp, #0]
 801c8cc:	2331      	movs	r3, #49	; 0x31
 801c8ce:	f805 3b01 	strb.w	r3, [r5], #1
 801c8d2:	f10b 0b01 	add.w	fp, fp, #1
 801c8d6:	e241      	b.n	801cd5c <_dtoa_r+0x95c>
 801c8d8:	07f2      	lsls	r2, r6, #31
 801c8da:	d505      	bpl.n	801c8e8 <_dtoa_r+0x4e8>
 801c8dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c8e0:	f7e3 fea2 	bl	8000628 <__aeabi_dmul>
 801c8e4:	3501      	adds	r5, #1
 801c8e6:	2301      	movs	r3, #1
 801c8e8:	1076      	asrs	r6, r6, #1
 801c8ea:	3708      	adds	r7, #8
 801c8ec:	e773      	b.n	801c7d6 <_dtoa_r+0x3d6>
 801c8ee:	2502      	movs	r5, #2
 801c8f0:	e775      	b.n	801c7de <_dtoa_r+0x3de>
 801c8f2:	9e04      	ldr	r6, [sp, #16]
 801c8f4:	465f      	mov	r7, fp
 801c8f6:	e792      	b.n	801c81e <_dtoa_r+0x41e>
 801c8f8:	9900      	ldr	r1, [sp, #0]
 801c8fa:	4b50      	ldr	r3, [pc, #320]	; (801ca3c <_dtoa_r+0x63c>)
 801c8fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c900:	4431      	add	r1, r6
 801c902:	9102      	str	r1, [sp, #8]
 801c904:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c906:	eeb0 9a47 	vmov.f32	s18, s14
 801c90a:	eef0 9a67 	vmov.f32	s19, s15
 801c90e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801c912:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801c916:	2900      	cmp	r1, #0
 801c918:	d044      	beq.n	801c9a4 <_dtoa_r+0x5a4>
 801c91a:	494e      	ldr	r1, [pc, #312]	; (801ca54 <_dtoa_r+0x654>)
 801c91c:	2000      	movs	r0, #0
 801c91e:	f7e3 ffad 	bl	800087c <__aeabi_ddiv>
 801c922:	ec53 2b19 	vmov	r2, r3, d9
 801c926:	f7e3 fcc7 	bl	80002b8 <__aeabi_dsub>
 801c92a:	9d00      	ldr	r5, [sp, #0]
 801c92c:	ec41 0b19 	vmov	d9, r0, r1
 801c930:	4649      	mov	r1, r9
 801c932:	4640      	mov	r0, r8
 801c934:	f7e4 f928 	bl	8000b88 <__aeabi_d2iz>
 801c938:	4606      	mov	r6, r0
 801c93a:	f7e3 fe0b 	bl	8000554 <__aeabi_i2d>
 801c93e:	4602      	mov	r2, r0
 801c940:	460b      	mov	r3, r1
 801c942:	4640      	mov	r0, r8
 801c944:	4649      	mov	r1, r9
 801c946:	f7e3 fcb7 	bl	80002b8 <__aeabi_dsub>
 801c94a:	3630      	adds	r6, #48	; 0x30
 801c94c:	f805 6b01 	strb.w	r6, [r5], #1
 801c950:	ec53 2b19 	vmov	r2, r3, d9
 801c954:	4680      	mov	r8, r0
 801c956:	4689      	mov	r9, r1
 801c958:	f7e4 f8d8 	bl	8000b0c <__aeabi_dcmplt>
 801c95c:	2800      	cmp	r0, #0
 801c95e:	d164      	bne.n	801ca2a <_dtoa_r+0x62a>
 801c960:	4642      	mov	r2, r8
 801c962:	464b      	mov	r3, r9
 801c964:	4937      	ldr	r1, [pc, #220]	; (801ca44 <_dtoa_r+0x644>)
 801c966:	2000      	movs	r0, #0
 801c968:	f7e3 fca6 	bl	80002b8 <__aeabi_dsub>
 801c96c:	ec53 2b19 	vmov	r2, r3, d9
 801c970:	f7e4 f8cc 	bl	8000b0c <__aeabi_dcmplt>
 801c974:	2800      	cmp	r0, #0
 801c976:	f040 80b6 	bne.w	801cae6 <_dtoa_r+0x6e6>
 801c97a:	9b02      	ldr	r3, [sp, #8]
 801c97c:	429d      	cmp	r5, r3
 801c97e:	f43f af7c 	beq.w	801c87a <_dtoa_r+0x47a>
 801c982:	4b31      	ldr	r3, [pc, #196]	; (801ca48 <_dtoa_r+0x648>)
 801c984:	ec51 0b19 	vmov	r0, r1, d9
 801c988:	2200      	movs	r2, #0
 801c98a:	f7e3 fe4d 	bl	8000628 <__aeabi_dmul>
 801c98e:	4b2e      	ldr	r3, [pc, #184]	; (801ca48 <_dtoa_r+0x648>)
 801c990:	ec41 0b19 	vmov	d9, r0, r1
 801c994:	2200      	movs	r2, #0
 801c996:	4640      	mov	r0, r8
 801c998:	4649      	mov	r1, r9
 801c99a:	f7e3 fe45 	bl	8000628 <__aeabi_dmul>
 801c99e:	4680      	mov	r8, r0
 801c9a0:	4689      	mov	r9, r1
 801c9a2:	e7c5      	b.n	801c930 <_dtoa_r+0x530>
 801c9a4:	ec51 0b17 	vmov	r0, r1, d7
 801c9a8:	f7e3 fe3e 	bl	8000628 <__aeabi_dmul>
 801c9ac:	9b02      	ldr	r3, [sp, #8]
 801c9ae:	9d00      	ldr	r5, [sp, #0]
 801c9b0:	930f      	str	r3, [sp, #60]	; 0x3c
 801c9b2:	ec41 0b19 	vmov	d9, r0, r1
 801c9b6:	4649      	mov	r1, r9
 801c9b8:	4640      	mov	r0, r8
 801c9ba:	f7e4 f8e5 	bl	8000b88 <__aeabi_d2iz>
 801c9be:	4606      	mov	r6, r0
 801c9c0:	f7e3 fdc8 	bl	8000554 <__aeabi_i2d>
 801c9c4:	3630      	adds	r6, #48	; 0x30
 801c9c6:	4602      	mov	r2, r0
 801c9c8:	460b      	mov	r3, r1
 801c9ca:	4640      	mov	r0, r8
 801c9cc:	4649      	mov	r1, r9
 801c9ce:	f7e3 fc73 	bl	80002b8 <__aeabi_dsub>
 801c9d2:	f805 6b01 	strb.w	r6, [r5], #1
 801c9d6:	9b02      	ldr	r3, [sp, #8]
 801c9d8:	429d      	cmp	r5, r3
 801c9da:	4680      	mov	r8, r0
 801c9dc:	4689      	mov	r9, r1
 801c9de:	f04f 0200 	mov.w	r2, #0
 801c9e2:	d124      	bne.n	801ca2e <_dtoa_r+0x62e>
 801c9e4:	4b1b      	ldr	r3, [pc, #108]	; (801ca54 <_dtoa_r+0x654>)
 801c9e6:	ec51 0b19 	vmov	r0, r1, d9
 801c9ea:	f7e3 fc67 	bl	80002bc <__adddf3>
 801c9ee:	4602      	mov	r2, r0
 801c9f0:	460b      	mov	r3, r1
 801c9f2:	4640      	mov	r0, r8
 801c9f4:	4649      	mov	r1, r9
 801c9f6:	f7e4 f8a7 	bl	8000b48 <__aeabi_dcmpgt>
 801c9fa:	2800      	cmp	r0, #0
 801c9fc:	d173      	bne.n	801cae6 <_dtoa_r+0x6e6>
 801c9fe:	ec53 2b19 	vmov	r2, r3, d9
 801ca02:	4914      	ldr	r1, [pc, #80]	; (801ca54 <_dtoa_r+0x654>)
 801ca04:	2000      	movs	r0, #0
 801ca06:	f7e3 fc57 	bl	80002b8 <__aeabi_dsub>
 801ca0a:	4602      	mov	r2, r0
 801ca0c:	460b      	mov	r3, r1
 801ca0e:	4640      	mov	r0, r8
 801ca10:	4649      	mov	r1, r9
 801ca12:	f7e4 f87b 	bl	8000b0c <__aeabi_dcmplt>
 801ca16:	2800      	cmp	r0, #0
 801ca18:	f43f af2f 	beq.w	801c87a <_dtoa_r+0x47a>
 801ca1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801ca1e:	1e6b      	subs	r3, r5, #1
 801ca20:	930f      	str	r3, [sp, #60]	; 0x3c
 801ca22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801ca26:	2b30      	cmp	r3, #48	; 0x30
 801ca28:	d0f8      	beq.n	801ca1c <_dtoa_r+0x61c>
 801ca2a:	46bb      	mov	fp, r7
 801ca2c:	e04a      	b.n	801cac4 <_dtoa_r+0x6c4>
 801ca2e:	4b06      	ldr	r3, [pc, #24]	; (801ca48 <_dtoa_r+0x648>)
 801ca30:	f7e3 fdfa 	bl	8000628 <__aeabi_dmul>
 801ca34:	4680      	mov	r8, r0
 801ca36:	4689      	mov	r9, r1
 801ca38:	e7bd      	b.n	801c9b6 <_dtoa_r+0x5b6>
 801ca3a:	bf00      	nop
 801ca3c:	08022fb0 	.word	0x08022fb0
 801ca40:	08022f88 	.word	0x08022f88
 801ca44:	3ff00000 	.word	0x3ff00000
 801ca48:	40240000 	.word	0x40240000
 801ca4c:	401c0000 	.word	0x401c0000
 801ca50:	40140000 	.word	0x40140000
 801ca54:	3fe00000 	.word	0x3fe00000
 801ca58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801ca5c:	9d00      	ldr	r5, [sp, #0]
 801ca5e:	4642      	mov	r2, r8
 801ca60:	464b      	mov	r3, r9
 801ca62:	4630      	mov	r0, r6
 801ca64:	4639      	mov	r1, r7
 801ca66:	f7e3 ff09 	bl	800087c <__aeabi_ddiv>
 801ca6a:	f7e4 f88d 	bl	8000b88 <__aeabi_d2iz>
 801ca6e:	9001      	str	r0, [sp, #4]
 801ca70:	f7e3 fd70 	bl	8000554 <__aeabi_i2d>
 801ca74:	4642      	mov	r2, r8
 801ca76:	464b      	mov	r3, r9
 801ca78:	f7e3 fdd6 	bl	8000628 <__aeabi_dmul>
 801ca7c:	4602      	mov	r2, r0
 801ca7e:	460b      	mov	r3, r1
 801ca80:	4630      	mov	r0, r6
 801ca82:	4639      	mov	r1, r7
 801ca84:	f7e3 fc18 	bl	80002b8 <__aeabi_dsub>
 801ca88:	9e01      	ldr	r6, [sp, #4]
 801ca8a:	9f04      	ldr	r7, [sp, #16]
 801ca8c:	3630      	adds	r6, #48	; 0x30
 801ca8e:	f805 6b01 	strb.w	r6, [r5], #1
 801ca92:	9e00      	ldr	r6, [sp, #0]
 801ca94:	1bae      	subs	r6, r5, r6
 801ca96:	42b7      	cmp	r7, r6
 801ca98:	4602      	mov	r2, r0
 801ca9a:	460b      	mov	r3, r1
 801ca9c:	d134      	bne.n	801cb08 <_dtoa_r+0x708>
 801ca9e:	f7e3 fc0d 	bl	80002bc <__adddf3>
 801caa2:	4642      	mov	r2, r8
 801caa4:	464b      	mov	r3, r9
 801caa6:	4606      	mov	r6, r0
 801caa8:	460f      	mov	r7, r1
 801caaa:	f7e4 f84d 	bl	8000b48 <__aeabi_dcmpgt>
 801caae:	b9c8      	cbnz	r0, 801cae4 <_dtoa_r+0x6e4>
 801cab0:	4642      	mov	r2, r8
 801cab2:	464b      	mov	r3, r9
 801cab4:	4630      	mov	r0, r6
 801cab6:	4639      	mov	r1, r7
 801cab8:	f7e4 f81e 	bl	8000af8 <__aeabi_dcmpeq>
 801cabc:	b110      	cbz	r0, 801cac4 <_dtoa_r+0x6c4>
 801cabe:	9b01      	ldr	r3, [sp, #4]
 801cac0:	07db      	lsls	r3, r3, #31
 801cac2:	d40f      	bmi.n	801cae4 <_dtoa_r+0x6e4>
 801cac4:	4651      	mov	r1, sl
 801cac6:	4620      	mov	r0, r4
 801cac8:	f000 fb18 	bl	801d0fc <_Bfree>
 801cacc:	2300      	movs	r3, #0
 801cace:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cad0:	702b      	strb	r3, [r5, #0]
 801cad2:	f10b 0301 	add.w	r3, fp, #1
 801cad6:	6013      	str	r3, [r2, #0]
 801cad8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cada:	2b00      	cmp	r3, #0
 801cadc:	f43f ace2 	beq.w	801c4a4 <_dtoa_r+0xa4>
 801cae0:	601d      	str	r5, [r3, #0]
 801cae2:	e4df      	b.n	801c4a4 <_dtoa_r+0xa4>
 801cae4:	465f      	mov	r7, fp
 801cae6:	462b      	mov	r3, r5
 801cae8:	461d      	mov	r5, r3
 801caea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801caee:	2a39      	cmp	r2, #57	; 0x39
 801caf0:	d106      	bne.n	801cb00 <_dtoa_r+0x700>
 801caf2:	9a00      	ldr	r2, [sp, #0]
 801caf4:	429a      	cmp	r2, r3
 801caf6:	d1f7      	bne.n	801cae8 <_dtoa_r+0x6e8>
 801caf8:	9900      	ldr	r1, [sp, #0]
 801cafa:	2230      	movs	r2, #48	; 0x30
 801cafc:	3701      	adds	r7, #1
 801cafe:	700a      	strb	r2, [r1, #0]
 801cb00:	781a      	ldrb	r2, [r3, #0]
 801cb02:	3201      	adds	r2, #1
 801cb04:	701a      	strb	r2, [r3, #0]
 801cb06:	e790      	b.n	801ca2a <_dtoa_r+0x62a>
 801cb08:	4ba3      	ldr	r3, [pc, #652]	; (801cd98 <_dtoa_r+0x998>)
 801cb0a:	2200      	movs	r2, #0
 801cb0c:	f7e3 fd8c 	bl	8000628 <__aeabi_dmul>
 801cb10:	2200      	movs	r2, #0
 801cb12:	2300      	movs	r3, #0
 801cb14:	4606      	mov	r6, r0
 801cb16:	460f      	mov	r7, r1
 801cb18:	f7e3 ffee 	bl	8000af8 <__aeabi_dcmpeq>
 801cb1c:	2800      	cmp	r0, #0
 801cb1e:	d09e      	beq.n	801ca5e <_dtoa_r+0x65e>
 801cb20:	e7d0      	b.n	801cac4 <_dtoa_r+0x6c4>
 801cb22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cb24:	2a00      	cmp	r2, #0
 801cb26:	f000 80ca 	beq.w	801ccbe <_dtoa_r+0x8be>
 801cb2a:	9a07      	ldr	r2, [sp, #28]
 801cb2c:	2a01      	cmp	r2, #1
 801cb2e:	f300 80ad 	bgt.w	801cc8c <_dtoa_r+0x88c>
 801cb32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cb34:	2a00      	cmp	r2, #0
 801cb36:	f000 80a5 	beq.w	801cc84 <_dtoa_r+0x884>
 801cb3a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801cb3e:	9e08      	ldr	r6, [sp, #32]
 801cb40:	9d05      	ldr	r5, [sp, #20]
 801cb42:	9a05      	ldr	r2, [sp, #20]
 801cb44:	441a      	add	r2, r3
 801cb46:	9205      	str	r2, [sp, #20]
 801cb48:	9a06      	ldr	r2, [sp, #24]
 801cb4a:	2101      	movs	r1, #1
 801cb4c:	441a      	add	r2, r3
 801cb4e:	4620      	mov	r0, r4
 801cb50:	9206      	str	r2, [sp, #24]
 801cb52:	f000 fbd3 	bl	801d2fc <__i2b>
 801cb56:	4607      	mov	r7, r0
 801cb58:	b165      	cbz	r5, 801cb74 <_dtoa_r+0x774>
 801cb5a:	9b06      	ldr	r3, [sp, #24]
 801cb5c:	2b00      	cmp	r3, #0
 801cb5e:	dd09      	ble.n	801cb74 <_dtoa_r+0x774>
 801cb60:	42ab      	cmp	r3, r5
 801cb62:	9a05      	ldr	r2, [sp, #20]
 801cb64:	bfa8      	it	ge
 801cb66:	462b      	movge	r3, r5
 801cb68:	1ad2      	subs	r2, r2, r3
 801cb6a:	9205      	str	r2, [sp, #20]
 801cb6c:	9a06      	ldr	r2, [sp, #24]
 801cb6e:	1aed      	subs	r5, r5, r3
 801cb70:	1ad3      	subs	r3, r2, r3
 801cb72:	9306      	str	r3, [sp, #24]
 801cb74:	9b08      	ldr	r3, [sp, #32]
 801cb76:	b1f3      	cbz	r3, 801cbb6 <_dtoa_r+0x7b6>
 801cb78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb7a:	2b00      	cmp	r3, #0
 801cb7c:	f000 80a3 	beq.w	801ccc6 <_dtoa_r+0x8c6>
 801cb80:	2e00      	cmp	r6, #0
 801cb82:	dd10      	ble.n	801cba6 <_dtoa_r+0x7a6>
 801cb84:	4639      	mov	r1, r7
 801cb86:	4632      	mov	r2, r6
 801cb88:	4620      	mov	r0, r4
 801cb8a:	f000 fc77 	bl	801d47c <__pow5mult>
 801cb8e:	4652      	mov	r2, sl
 801cb90:	4601      	mov	r1, r0
 801cb92:	4607      	mov	r7, r0
 801cb94:	4620      	mov	r0, r4
 801cb96:	f000 fbc7 	bl	801d328 <__multiply>
 801cb9a:	4651      	mov	r1, sl
 801cb9c:	4680      	mov	r8, r0
 801cb9e:	4620      	mov	r0, r4
 801cba0:	f000 faac 	bl	801d0fc <_Bfree>
 801cba4:	46c2      	mov	sl, r8
 801cba6:	9b08      	ldr	r3, [sp, #32]
 801cba8:	1b9a      	subs	r2, r3, r6
 801cbaa:	d004      	beq.n	801cbb6 <_dtoa_r+0x7b6>
 801cbac:	4651      	mov	r1, sl
 801cbae:	4620      	mov	r0, r4
 801cbb0:	f000 fc64 	bl	801d47c <__pow5mult>
 801cbb4:	4682      	mov	sl, r0
 801cbb6:	2101      	movs	r1, #1
 801cbb8:	4620      	mov	r0, r4
 801cbba:	f000 fb9f 	bl	801d2fc <__i2b>
 801cbbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cbc0:	2b00      	cmp	r3, #0
 801cbc2:	4606      	mov	r6, r0
 801cbc4:	f340 8081 	ble.w	801ccca <_dtoa_r+0x8ca>
 801cbc8:	461a      	mov	r2, r3
 801cbca:	4601      	mov	r1, r0
 801cbcc:	4620      	mov	r0, r4
 801cbce:	f000 fc55 	bl	801d47c <__pow5mult>
 801cbd2:	9b07      	ldr	r3, [sp, #28]
 801cbd4:	2b01      	cmp	r3, #1
 801cbd6:	4606      	mov	r6, r0
 801cbd8:	dd7a      	ble.n	801ccd0 <_dtoa_r+0x8d0>
 801cbda:	f04f 0800 	mov.w	r8, #0
 801cbde:	6933      	ldr	r3, [r6, #16]
 801cbe0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801cbe4:	6918      	ldr	r0, [r3, #16]
 801cbe6:	f000 fb3b 	bl	801d260 <__hi0bits>
 801cbea:	f1c0 0020 	rsb	r0, r0, #32
 801cbee:	9b06      	ldr	r3, [sp, #24]
 801cbf0:	4418      	add	r0, r3
 801cbf2:	f010 001f 	ands.w	r0, r0, #31
 801cbf6:	f000 8094 	beq.w	801cd22 <_dtoa_r+0x922>
 801cbfa:	f1c0 0320 	rsb	r3, r0, #32
 801cbfe:	2b04      	cmp	r3, #4
 801cc00:	f340 8085 	ble.w	801cd0e <_dtoa_r+0x90e>
 801cc04:	9b05      	ldr	r3, [sp, #20]
 801cc06:	f1c0 001c 	rsb	r0, r0, #28
 801cc0a:	4403      	add	r3, r0
 801cc0c:	9305      	str	r3, [sp, #20]
 801cc0e:	9b06      	ldr	r3, [sp, #24]
 801cc10:	4403      	add	r3, r0
 801cc12:	4405      	add	r5, r0
 801cc14:	9306      	str	r3, [sp, #24]
 801cc16:	9b05      	ldr	r3, [sp, #20]
 801cc18:	2b00      	cmp	r3, #0
 801cc1a:	dd05      	ble.n	801cc28 <_dtoa_r+0x828>
 801cc1c:	4651      	mov	r1, sl
 801cc1e:	461a      	mov	r2, r3
 801cc20:	4620      	mov	r0, r4
 801cc22:	f000 fc85 	bl	801d530 <__lshift>
 801cc26:	4682      	mov	sl, r0
 801cc28:	9b06      	ldr	r3, [sp, #24]
 801cc2a:	2b00      	cmp	r3, #0
 801cc2c:	dd05      	ble.n	801cc3a <_dtoa_r+0x83a>
 801cc2e:	4631      	mov	r1, r6
 801cc30:	461a      	mov	r2, r3
 801cc32:	4620      	mov	r0, r4
 801cc34:	f000 fc7c 	bl	801d530 <__lshift>
 801cc38:	4606      	mov	r6, r0
 801cc3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cc3c:	2b00      	cmp	r3, #0
 801cc3e:	d072      	beq.n	801cd26 <_dtoa_r+0x926>
 801cc40:	4631      	mov	r1, r6
 801cc42:	4650      	mov	r0, sl
 801cc44:	f000 fce0 	bl	801d608 <__mcmp>
 801cc48:	2800      	cmp	r0, #0
 801cc4a:	da6c      	bge.n	801cd26 <_dtoa_r+0x926>
 801cc4c:	2300      	movs	r3, #0
 801cc4e:	4651      	mov	r1, sl
 801cc50:	220a      	movs	r2, #10
 801cc52:	4620      	mov	r0, r4
 801cc54:	f000 fa74 	bl	801d140 <__multadd>
 801cc58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cc5e:	4682      	mov	sl, r0
 801cc60:	2b00      	cmp	r3, #0
 801cc62:	f000 81b0 	beq.w	801cfc6 <_dtoa_r+0xbc6>
 801cc66:	2300      	movs	r3, #0
 801cc68:	4639      	mov	r1, r7
 801cc6a:	220a      	movs	r2, #10
 801cc6c:	4620      	mov	r0, r4
 801cc6e:	f000 fa67 	bl	801d140 <__multadd>
 801cc72:	9b01      	ldr	r3, [sp, #4]
 801cc74:	2b00      	cmp	r3, #0
 801cc76:	4607      	mov	r7, r0
 801cc78:	f300 8096 	bgt.w	801cda8 <_dtoa_r+0x9a8>
 801cc7c:	9b07      	ldr	r3, [sp, #28]
 801cc7e:	2b02      	cmp	r3, #2
 801cc80:	dc59      	bgt.n	801cd36 <_dtoa_r+0x936>
 801cc82:	e091      	b.n	801cda8 <_dtoa_r+0x9a8>
 801cc84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cc86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801cc8a:	e758      	b.n	801cb3e <_dtoa_r+0x73e>
 801cc8c:	9b04      	ldr	r3, [sp, #16]
 801cc8e:	1e5e      	subs	r6, r3, #1
 801cc90:	9b08      	ldr	r3, [sp, #32]
 801cc92:	42b3      	cmp	r3, r6
 801cc94:	bfbf      	itttt	lt
 801cc96:	9b08      	ldrlt	r3, [sp, #32]
 801cc98:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801cc9a:	9608      	strlt	r6, [sp, #32]
 801cc9c:	1af3      	sublt	r3, r6, r3
 801cc9e:	bfb4      	ite	lt
 801cca0:	18d2      	addlt	r2, r2, r3
 801cca2:	1b9e      	subge	r6, r3, r6
 801cca4:	9b04      	ldr	r3, [sp, #16]
 801cca6:	bfbc      	itt	lt
 801cca8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801ccaa:	2600      	movlt	r6, #0
 801ccac:	2b00      	cmp	r3, #0
 801ccae:	bfb7      	itett	lt
 801ccb0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801ccb4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 801ccb8:	1a9d      	sublt	r5, r3, r2
 801ccba:	2300      	movlt	r3, #0
 801ccbc:	e741      	b.n	801cb42 <_dtoa_r+0x742>
 801ccbe:	9e08      	ldr	r6, [sp, #32]
 801ccc0:	9d05      	ldr	r5, [sp, #20]
 801ccc2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ccc4:	e748      	b.n	801cb58 <_dtoa_r+0x758>
 801ccc6:	9a08      	ldr	r2, [sp, #32]
 801ccc8:	e770      	b.n	801cbac <_dtoa_r+0x7ac>
 801ccca:	9b07      	ldr	r3, [sp, #28]
 801cccc:	2b01      	cmp	r3, #1
 801ccce:	dc19      	bgt.n	801cd04 <_dtoa_r+0x904>
 801ccd0:	9b02      	ldr	r3, [sp, #8]
 801ccd2:	b9bb      	cbnz	r3, 801cd04 <_dtoa_r+0x904>
 801ccd4:	9b03      	ldr	r3, [sp, #12]
 801ccd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ccda:	b99b      	cbnz	r3, 801cd04 <_dtoa_r+0x904>
 801ccdc:	9b03      	ldr	r3, [sp, #12]
 801ccde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801cce2:	0d1b      	lsrs	r3, r3, #20
 801cce4:	051b      	lsls	r3, r3, #20
 801cce6:	b183      	cbz	r3, 801cd0a <_dtoa_r+0x90a>
 801cce8:	9b05      	ldr	r3, [sp, #20]
 801ccea:	3301      	adds	r3, #1
 801ccec:	9305      	str	r3, [sp, #20]
 801ccee:	9b06      	ldr	r3, [sp, #24]
 801ccf0:	3301      	adds	r3, #1
 801ccf2:	9306      	str	r3, [sp, #24]
 801ccf4:	f04f 0801 	mov.w	r8, #1
 801ccf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ccfa:	2b00      	cmp	r3, #0
 801ccfc:	f47f af6f 	bne.w	801cbde <_dtoa_r+0x7de>
 801cd00:	2001      	movs	r0, #1
 801cd02:	e774      	b.n	801cbee <_dtoa_r+0x7ee>
 801cd04:	f04f 0800 	mov.w	r8, #0
 801cd08:	e7f6      	b.n	801ccf8 <_dtoa_r+0x8f8>
 801cd0a:	4698      	mov	r8, r3
 801cd0c:	e7f4      	b.n	801ccf8 <_dtoa_r+0x8f8>
 801cd0e:	d082      	beq.n	801cc16 <_dtoa_r+0x816>
 801cd10:	9a05      	ldr	r2, [sp, #20]
 801cd12:	331c      	adds	r3, #28
 801cd14:	441a      	add	r2, r3
 801cd16:	9205      	str	r2, [sp, #20]
 801cd18:	9a06      	ldr	r2, [sp, #24]
 801cd1a:	441a      	add	r2, r3
 801cd1c:	441d      	add	r5, r3
 801cd1e:	9206      	str	r2, [sp, #24]
 801cd20:	e779      	b.n	801cc16 <_dtoa_r+0x816>
 801cd22:	4603      	mov	r3, r0
 801cd24:	e7f4      	b.n	801cd10 <_dtoa_r+0x910>
 801cd26:	9b04      	ldr	r3, [sp, #16]
 801cd28:	2b00      	cmp	r3, #0
 801cd2a:	dc37      	bgt.n	801cd9c <_dtoa_r+0x99c>
 801cd2c:	9b07      	ldr	r3, [sp, #28]
 801cd2e:	2b02      	cmp	r3, #2
 801cd30:	dd34      	ble.n	801cd9c <_dtoa_r+0x99c>
 801cd32:	9b04      	ldr	r3, [sp, #16]
 801cd34:	9301      	str	r3, [sp, #4]
 801cd36:	9b01      	ldr	r3, [sp, #4]
 801cd38:	b963      	cbnz	r3, 801cd54 <_dtoa_r+0x954>
 801cd3a:	4631      	mov	r1, r6
 801cd3c:	2205      	movs	r2, #5
 801cd3e:	4620      	mov	r0, r4
 801cd40:	f000 f9fe 	bl	801d140 <__multadd>
 801cd44:	4601      	mov	r1, r0
 801cd46:	4606      	mov	r6, r0
 801cd48:	4650      	mov	r0, sl
 801cd4a:	f000 fc5d 	bl	801d608 <__mcmp>
 801cd4e:	2800      	cmp	r0, #0
 801cd50:	f73f adbb 	bgt.w	801c8ca <_dtoa_r+0x4ca>
 801cd54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cd56:	9d00      	ldr	r5, [sp, #0]
 801cd58:	ea6f 0b03 	mvn.w	fp, r3
 801cd5c:	f04f 0800 	mov.w	r8, #0
 801cd60:	4631      	mov	r1, r6
 801cd62:	4620      	mov	r0, r4
 801cd64:	f000 f9ca 	bl	801d0fc <_Bfree>
 801cd68:	2f00      	cmp	r7, #0
 801cd6a:	f43f aeab 	beq.w	801cac4 <_dtoa_r+0x6c4>
 801cd6e:	f1b8 0f00 	cmp.w	r8, #0
 801cd72:	d005      	beq.n	801cd80 <_dtoa_r+0x980>
 801cd74:	45b8      	cmp	r8, r7
 801cd76:	d003      	beq.n	801cd80 <_dtoa_r+0x980>
 801cd78:	4641      	mov	r1, r8
 801cd7a:	4620      	mov	r0, r4
 801cd7c:	f000 f9be 	bl	801d0fc <_Bfree>
 801cd80:	4639      	mov	r1, r7
 801cd82:	4620      	mov	r0, r4
 801cd84:	f000 f9ba 	bl	801d0fc <_Bfree>
 801cd88:	e69c      	b.n	801cac4 <_dtoa_r+0x6c4>
 801cd8a:	2600      	movs	r6, #0
 801cd8c:	4637      	mov	r7, r6
 801cd8e:	e7e1      	b.n	801cd54 <_dtoa_r+0x954>
 801cd90:	46bb      	mov	fp, r7
 801cd92:	4637      	mov	r7, r6
 801cd94:	e599      	b.n	801c8ca <_dtoa_r+0x4ca>
 801cd96:	bf00      	nop
 801cd98:	40240000 	.word	0x40240000
 801cd9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cd9e:	2b00      	cmp	r3, #0
 801cda0:	f000 80c8 	beq.w	801cf34 <_dtoa_r+0xb34>
 801cda4:	9b04      	ldr	r3, [sp, #16]
 801cda6:	9301      	str	r3, [sp, #4]
 801cda8:	2d00      	cmp	r5, #0
 801cdaa:	dd05      	ble.n	801cdb8 <_dtoa_r+0x9b8>
 801cdac:	4639      	mov	r1, r7
 801cdae:	462a      	mov	r2, r5
 801cdb0:	4620      	mov	r0, r4
 801cdb2:	f000 fbbd 	bl	801d530 <__lshift>
 801cdb6:	4607      	mov	r7, r0
 801cdb8:	f1b8 0f00 	cmp.w	r8, #0
 801cdbc:	d05b      	beq.n	801ce76 <_dtoa_r+0xa76>
 801cdbe:	6879      	ldr	r1, [r7, #4]
 801cdc0:	4620      	mov	r0, r4
 801cdc2:	f000 f95b 	bl	801d07c <_Balloc>
 801cdc6:	4605      	mov	r5, r0
 801cdc8:	b928      	cbnz	r0, 801cdd6 <_dtoa_r+0x9d6>
 801cdca:	4b83      	ldr	r3, [pc, #524]	; (801cfd8 <_dtoa_r+0xbd8>)
 801cdcc:	4602      	mov	r2, r0
 801cdce:	f240 21ef 	movw	r1, #751	; 0x2ef
 801cdd2:	f7ff bb2e 	b.w	801c432 <_dtoa_r+0x32>
 801cdd6:	693a      	ldr	r2, [r7, #16]
 801cdd8:	3202      	adds	r2, #2
 801cdda:	0092      	lsls	r2, r2, #2
 801cddc:	f107 010c 	add.w	r1, r7, #12
 801cde0:	300c      	adds	r0, #12
 801cde2:	f7ff fa66 	bl	801c2b2 <memcpy>
 801cde6:	2201      	movs	r2, #1
 801cde8:	4629      	mov	r1, r5
 801cdea:	4620      	mov	r0, r4
 801cdec:	f000 fba0 	bl	801d530 <__lshift>
 801cdf0:	9b00      	ldr	r3, [sp, #0]
 801cdf2:	3301      	adds	r3, #1
 801cdf4:	9304      	str	r3, [sp, #16]
 801cdf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801cdfa:	4413      	add	r3, r2
 801cdfc:	9308      	str	r3, [sp, #32]
 801cdfe:	9b02      	ldr	r3, [sp, #8]
 801ce00:	f003 0301 	and.w	r3, r3, #1
 801ce04:	46b8      	mov	r8, r7
 801ce06:	9306      	str	r3, [sp, #24]
 801ce08:	4607      	mov	r7, r0
 801ce0a:	9b04      	ldr	r3, [sp, #16]
 801ce0c:	4631      	mov	r1, r6
 801ce0e:	3b01      	subs	r3, #1
 801ce10:	4650      	mov	r0, sl
 801ce12:	9301      	str	r3, [sp, #4]
 801ce14:	f7ff fa69 	bl	801c2ea <quorem>
 801ce18:	4641      	mov	r1, r8
 801ce1a:	9002      	str	r0, [sp, #8]
 801ce1c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801ce20:	4650      	mov	r0, sl
 801ce22:	f000 fbf1 	bl	801d608 <__mcmp>
 801ce26:	463a      	mov	r2, r7
 801ce28:	9005      	str	r0, [sp, #20]
 801ce2a:	4631      	mov	r1, r6
 801ce2c:	4620      	mov	r0, r4
 801ce2e:	f000 fc07 	bl	801d640 <__mdiff>
 801ce32:	68c2      	ldr	r2, [r0, #12]
 801ce34:	4605      	mov	r5, r0
 801ce36:	bb02      	cbnz	r2, 801ce7a <_dtoa_r+0xa7a>
 801ce38:	4601      	mov	r1, r0
 801ce3a:	4650      	mov	r0, sl
 801ce3c:	f000 fbe4 	bl	801d608 <__mcmp>
 801ce40:	4602      	mov	r2, r0
 801ce42:	4629      	mov	r1, r5
 801ce44:	4620      	mov	r0, r4
 801ce46:	9209      	str	r2, [sp, #36]	; 0x24
 801ce48:	f000 f958 	bl	801d0fc <_Bfree>
 801ce4c:	9b07      	ldr	r3, [sp, #28]
 801ce4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ce50:	9d04      	ldr	r5, [sp, #16]
 801ce52:	ea43 0102 	orr.w	r1, r3, r2
 801ce56:	9b06      	ldr	r3, [sp, #24]
 801ce58:	4319      	orrs	r1, r3
 801ce5a:	d110      	bne.n	801ce7e <_dtoa_r+0xa7e>
 801ce5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801ce60:	d029      	beq.n	801ceb6 <_dtoa_r+0xab6>
 801ce62:	9b05      	ldr	r3, [sp, #20]
 801ce64:	2b00      	cmp	r3, #0
 801ce66:	dd02      	ble.n	801ce6e <_dtoa_r+0xa6e>
 801ce68:	9b02      	ldr	r3, [sp, #8]
 801ce6a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801ce6e:	9b01      	ldr	r3, [sp, #4]
 801ce70:	f883 9000 	strb.w	r9, [r3]
 801ce74:	e774      	b.n	801cd60 <_dtoa_r+0x960>
 801ce76:	4638      	mov	r0, r7
 801ce78:	e7ba      	b.n	801cdf0 <_dtoa_r+0x9f0>
 801ce7a:	2201      	movs	r2, #1
 801ce7c:	e7e1      	b.n	801ce42 <_dtoa_r+0xa42>
 801ce7e:	9b05      	ldr	r3, [sp, #20]
 801ce80:	2b00      	cmp	r3, #0
 801ce82:	db04      	blt.n	801ce8e <_dtoa_r+0xa8e>
 801ce84:	9907      	ldr	r1, [sp, #28]
 801ce86:	430b      	orrs	r3, r1
 801ce88:	9906      	ldr	r1, [sp, #24]
 801ce8a:	430b      	orrs	r3, r1
 801ce8c:	d120      	bne.n	801ced0 <_dtoa_r+0xad0>
 801ce8e:	2a00      	cmp	r2, #0
 801ce90:	dded      	ble.n	801ce6e <_dtoa_r+0xa6e>
 801ce92:	4651      	mov	r1, sl
 801ce94:	2201      	movs	r2, #1
 801ce96:	4620      	mov	r0, r4
 801ce98:	f000 fb4a 	bl	801d530 <__lshift>
 801ce9c:	4631      	mov	r1, r6
 801ce9e:	4682      	mov	sl, r0
 801cea0:	f000 fbb2 	bl	801d608 <__mcmp>
 801cea4:	2800      	cmp	r0, #0
 801cea6:	dc03      	bgt.n	801ceb0 <_dtoa_r+0xab0>
 801cea8:	d1e1      	bne.n	801ce6e <_dtoa_r+0xa6e>
 801ceaa:	f019 0f01 	tst.w	r9, #1
 801ceae:	d0de      	beq.n	801ce6e <_dtoa_r+0xa6e>
 801ceb0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801ceb4:	d1d8      	bne.n	801ce68 <_dtoa_r+0xa68>
 801ceb6:	9a01      	ldr	r2, [sp, #4]
 801ceb8:	2339      	movs	r3, #57	; 0x39
 801ceba:	7013      	strb	r3, [r2, #0]
 801cebc:	462b      	mov	r3, r5
 801cebe:	461d      	mov	r5, r3
 801cec0:	3b01      	subs	r3, #1
 801cec2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801cec6:	2a39      	cmp	r2, #57	; 0x39
 801cec8:	d06c      	beq.n	801cfa4 <_dtoa_r+0xba4>
 801ceca:	3201      	adds	r2, #1
 801cecc:	701a      	strb	r2, [r3, #0]
 801cece:	e747      	b.n	801cd60 <_dtoa_r+0x960>
 801ced0:	2a00      	cmp	r2, #0
 801ced2:	dd07      	ble.n	801cee4 <_dtoa_r+0xae4>
 801ced4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801ced8:	d0ed      	beq.n	801ceb6 <_dtoa_r+0xab6>
 801ceda:	9a01      	ldr	r2, [sp, #4]
 801cedc:	f109 0301 	add.w	r3, r9, #1
 801cee0:	7013      	strb	r3, [r2, #0]
 801cee2:	e73d      	b.n	801cd60 <_dtoa_r+0x960>
 801cee4:	9b04      	ldr	r3, [sp, #16]
 801cee6:	9a08      	ldr	r2, [sp, #32]
 801cee8:	f803 9c01 	strb.w	r9, [r3, #-1]
 801ceec:	4293      	cmp	r3, r2
 801ceee:	d043      	beq.n	801cf78 <_dtoa_r+0xb78>
 801cef0:	4651      	mov	r1, sl
 801cef2:	2300      	movs	r3, #0
 801cef4:	220a      	movs	r2, #10
 801cef6:	4620      	mov	r0, r4
 801cef8:	f000 f922 	bl	801d140 <__multadd>
 801cefc:	45b8      	cmp	r8, r7
 801cefe:	4682      	mov	sl, r0
 801cf00:	f04f 0300 	mov.w	r3, #0
 801cf04:	f04f 020a 	mov.w	r2, #10
 801cf08:	4641      	mov	r1, r8
 801cf0a:	4620      	mov	r0, r4
 801cf0c:	d107      	bne.n	801cf1e <_dtoa_r+0xb1e>
 801cf0e:	f000 f917 	bl	801d140 <__multadd>
 801cf12:	4680      	mov	r8, r0
 801cf14:	4607      	mov	r7, r0
 801cf16:	9b04      	ldr	r3, [sp, #16]
 801cf18:	3301      	adds	r3, #1
 801cf1a:	9304      	str	r3, [sp, #16]
 801cf1c:	e775      	b.n	801ce0a <_dtoa_r+0xa0a>
 801cf1e:	f000 f90f 	bl	801d140 <__multadd>
 801cf22:	4639      	mov	r1, r7
 801cf24:	4680      	mov	r8, r0
 801cf26:	2300      	movs	r3, #0
 801cf28:	220a      	movs	r2, #10
 801cf2a:	4620      	mov	r0, r4
 801cf2c:	f000 f908 	bl	801d140 <__multadd>
 801cf30:	4607      	mov	r7, r0
 801cf32:	e7f0      	b.n	801cf16 <_dtoa_r+0xb16>
 801cf34:	9b04      	ldr	r3, [sp, #16]
 801cf36:	9301      	str	r3, [sp, #4]
 801cf38:	9d00      	ldr	r5, [sp, #0]
 801cf3a:	4631      	mov	r1, r6
 801cf3c:	4650      	mov	r0, sl
 801cf3e:	f7ff f9d4 	bl	801c2ea <quorem>
 801cf42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801cf46:	9b00      	ldr	r3, [sp, #0]
 801cf48:	f805 9b01 	strb.w	r9, [r5], #1
 801cf4c:	1aea      	subs	r2, r5, r3
 801cf4e:	9b01      	ldr	r3, [sp, #4]
 801cf50:	4293      	cmp	r3, r2
 801cf52:	dd07      	ble.n	801cf64 <_dtoa_r+0xb64>
 801cf54:	4651      	mov	r1, sl
 801cf56:	2300      	movs	r3, #0
 801cf58:	220a      	movs	r2, #10
 801cf5a:	4620      	mov	r0, r4
 801cf5c:	f000 f8f0 	bl	801d140 <__multadd>
 801cf60:	4682      	mov	sl, r0
 801cf62:	e7ea      	b.n	801cf3a <_dtoa_r+0xb3a>
 801cf64:	9b01      	ldr	r3, [sp, #4]
 801cf66:	2b00      	cmp	r3, #0
 801cf68:	bfc8      	it	gt
 801cf6a:	461d      	movgt	r5, r3
 801cf6c:	9b00      	ldr	r3, [sp, #0]
 801cf6e:	bfd8      	it	le
 801cf70:	2501      	movle	r5, #1
 801cf72:	441d      	add	r5, r3
 801cf74:	f04f 0800 	mov.w	r8, #0
 801cf78:	4651      	mov	r1, sl
 801cf7a:	2201      	movs	r2, #1
 801cf7c:	4620      	mov	r0, r4
 801cf7e:	f000 fad7 	bl	801d530 <__lshift>
 801cf82:	4631      	mov	r1, r6
 801cf84:	4682      	mov	sl, r0
 801cf86:	f000 fb3f 	bl	801d608 <__mcmp>
 801cf8a:	2800      	cmp	r0, #0
 801cf8c:	dc96      	bgt.n	801cebc <_dtoa_r+0xabc>
 801cf8e:	d102      	bne.n	801cf96 <_dtoa_r+0xb96>
 801cf90:	f019 0f01 	tst.w	r9, #1
 801cf94:	d192      	bne.n	801cebc <_dtoa_r+0xabc>
 801cf96:	462b      	mov	r3, r5
 801cf98:	461d      	mov	r5, r3
 801cf9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cf9e:	2a30      	cmp	r2, #48	; 0x30
 801cfa0:	d0fa      	beq.n	801cf98 <_dtoa_r+0xb98>
 801cfa2:	e6dd      	b.n	801cd60 <_dtoa_r+0x960>
 801cfa4:	9a00      	ldr	r2, [sp, #0]
 801cfa6:	429a      	cmp	r2, r3
 801cfa8:	d189      	bne.n	801cebe <_dtoa_r+0xabe>
 801cfaa:	f10b 0b01 	add.w	fp, fp, #1
 801cfae:	2331      	movs	r3, #49	; 0x31
 801cfb0:	e796      	b.n	801cee0 <_dtoa_r+0xae0>
 801cfb2:	4b0a      	ldr	r3, [pc, #40]	; (801cfdc <_dtoa_r+0xbdc>)
 801cfb4:	f7ff ba99 	b.w	801c4ea <_dtoa_r+0xea>
 801cfb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cfba:	2b00      	cmp	r3, #0
 801cfbc:	f47f aa6d 	bne.w	801c49a <_dtoa_r+0x9a>
 801cfc0:	4b07      	ldr	r3, [pc, #28]	; (801cfe0 <_dtoa_r+0xbe0>)
 801cfc2:	f7ff ba92 	b.w	801c4ea <_dtoa_r+0xea>
 801cfc6:	9b01      	ldr	r3, [sp, #4]
 801cfc8:	2b00      	cmp	r3, #0
 801cfca:	dcb5      	bgt.n	801cf38 <_dtoa_r+0xb38>
 801cfcc:	9b07      	ldr	r3, [sp, #28]
 801cfce:	2b02      	cmp	r3, #2
 801cfd0:	f73f aeb1 	bgt.w	801cd36 <_dtoa_r+0x936>
 801cfd4:	e7b0      	b.n	801cf38 <_dtoa_r+0xb38>
 801cfd6:	bf00      	nop
 801cfd8:	08022f19 	.word	0x08022f19
 801cfdc:	08023200 	.word	0x08023200
 801cfe0:	08022eb4 	.word	0x08022eb4

0801cfe4 <_free_r>:
 801cfe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cfe6:	2900      	cmp	r1, #0
 801cfe8:	d044      	beq.n	801d074 <_free_r+0x90>
 801cfea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cfee:	9001      	str	r0, [sp, #4]
 801cff0:	2b00      	cmp	r3, #0
 801cff2:	f1a1 0404 	sub.w	r4, r1, #4
 801cff6:	bfb8      	it	lt
 801cff8:	18e4      	addlt	r4, r4, r3
 801cffa:	f7fd fecd 	bl	801ad98 <__malloc_lock>
 801cffe:	4a1e      	ldr	r2, [pc, #120]	; (801d078 <_free_r+0x94>)
 801d000:	9801      	ldr	r0, [sp, #4]
 801d002:	6813      	ldr	r3, [r2, #0]
 801d004:	b933      	cbnz	r3, 801d014 <_free_r+0x30>
 801d006:	6063      	str	r3, [r4, #4]
 801d008:	6014      	str	r4, [r2, #0]
 801d00a:	b003      	add	sp, #12
 801d00c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d010:	f7fd bec8 	b.w	801ada4 <__malloc_unlock>
 801d014:	42a3      	cmp	r3, r4
 801d016:	d908      	bls.n	801d02a <_free_r+0x46>
 801d018:	6825      	ldr	r5, [r4, #0]
 801d01a:	1961      	adds	r1, r4, r5
 801d01c:	428b      	cmp	r3, r1
 801d01e:	bf01      	itttt	eq
 801d020:	6819      	ldreq	r1, [r3, #0]
 801d022:	685b      	ldreq	r3, [r3, #4]
 801d024:	1949      	addeq	r1, r1, r5
 801d026:	6021      	streq	r1, [r4, #0]
 801d028:	e7ed      	b.n	801d006 <_free_r+0x22>
 801d02a:	461a      	mov	r2, r3
 801d02c:	685b      	ldr	r3, [r3, #4]
 801d02e:	b10b      	cbz	r3, 801d034 <_free_r+0x50>
 801d030:	42a3      	cmp	r3, r4
 801d032:	d9fa      	bls.n	801d02a <_free_r+0x46>
 801d034:	6811      	ldr	r1, [r2, #0]
 801d036:	1855      	adds	r5, r2, r1
 801d038:	42a5      	cmp	r5, r4
 801d03a:	d10b      	bne.n	801d054 <_free_r+0x70>
 801d03c:	6824      	ldr	r4, [r4, #0]
 801d03e:	4421      	add	r1, r4
 801d040:	1854      	adds	r4, r2, r1
 801d042:	42a3      	cmp	r3, r4
 801d044:	6011      	str	r1, [r2, #0]
 801d046:	d1e0      	bne.n	801d00a <_free_r+0x26>
 801d048:	681c      	ldr	r4, [r3, #0]
 801d04a:	685b      	ldr	r3, [r3, #4]
 801d04c:	6053      	str	r3, [r2, #4]
 801d04e:	440c      	add	r4, r1
 801d050:	6014      	str	r4, [r2, #0]
 801d052:	e7da      	b.n	801d00a <_free_r+0x26>
 801d054:	d902      	bls.n	801d05c <_free_r+0x78>
 801d056:	230c      	movs	r3, #12
 801d058:	6003      	str	r3, [r0, #0]
 801d05a:	e7d6      	b.n	801d00a <_free_r+0x26>
 801d05c:	6825      	ldr	r5, [r4, #0]
 801d05e:	1961      	adds	r1, r4, r5
 801d060:	428b      	cmp	r3, r1
 801d062:	bf04      	itt	eq
 801d064:	6819      	ldreq	r1, [r3, #0]
 801d066:	685b      	ldreq	r3, [r3, #4]
 801d068:	6063      	str	r3, [r4, #4]
 801d06a:	bf04      	itt	eq
 801d06c:	1949      	addeq	r1, r1, r5
 801d06e:	6021      	streq	r1, [r4, #0]
 801d070:	6054      	str	r4, [r2, #4]
 801d072:	e7ca      	b.n	801d00a <_free_r+0x26>
 801d074:	b003      	add	sp, #12
 801d076:	bd30      	pop	{r4, r5, pc}
 801d078:	2000d924 	.word	0x2000d924

0801d07c <_Balloc>:
 801d07c:	b570      	push	{r4, r5, r6, lr}
 801d07e:	69c6      	ldr	r6, [r0, #28]
 801d080:	4604      	mov	r4, r0
 801d082:	460d      	mov	r5, r1
 801d084:	b976      	cbnz	r6, 801d0a4 <_Balloc+0x28>
 801d086:	2010      	movs	r0, #16
 801d088:	f7fd fdd6 	bl	801ac38 <malloc>
 801d08c:	4602      	mov	r2, r0
 801d08e:	61e0      	str	r0, [r4, #28]
 801d090:	b920      	cbnz	r0, 801d09c <_Balloc+0x20>
 801d092:	4b18      	ldr	r3, [pc, #96]	; (801d0f4 <_Balloc+0x78>)
 801d094:	4818      	ldr	r0, [pc, #96]	; (801d0f8 <_Balloc+0x7c>)
 801d096:	216b      	movs	r1, #107	; 0x6b
 801d098:	f7fd fd9a 	bl	801abd0 <__assert_func>
 801d09c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d0a0:	6006      	str	r6, [r0, #0]
 801d0a2:	60c6      	str	r6, [r0, #12]
 801d0a4:	69e6      	ldr	r6, [r4, #28]
 801d0a6:	68f3      	ldr	r3, [r6, #12]
 801d0a8:	b183      	cbz	r3, 801d0cc <_Balloc+0x50>
 801d0aa:	69e3      	ldr	r3, [r4, #28]
 801d0ac:	68db      	ldr	r3, [r3, #12]
 801d0ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d0b2:	b9b8      	cbnz	r0, 801d0e4 <_Balloc+0x68>
 801d0b4:	2101      	movs	r1, #1
 801d0b6:	fa01 f605 	lsl.w	r6, r1, r5
 801d0ba:	1d72      	adds	r2, r6, #5
 801d0bc:	0092      	lsls	r2, r2, #2
 801d0be:	4620      	mov	r0, r4
 801d0c0:	f7fd fda4 	bl	801ac0c <_calloc_r>
 801d0c4:	b160      	cbz	r0, 801d0e0 <_Balloc+0x64>
 801d0c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d0ca:	e00e      	b.n	801d0ea <_Balloc+0x6e>
 801d0cc:	2221      	movs	r2, #33	; 0x21
 801d0ce:	2104      	movs	r1, #4
 801d0d0:	4620      	mov	r0, r4
 801d0d2:	f7fd fd9b 	bl	801ac0c <_calloc_r>
 801d0d6:	69e3      	ldr	r3, [r4, #28]
 801d0d8:	60f0      	str	r0, [r6, #12]
 801d0da:	68db      	ldr	r3, [r3, #12]
 801d0dc:	2b00      	cmp	r3, #0
 801d0de:	d1e4      	bne.n	801d0aa <_Balloc+0x2e>
 801d0e0:	2000      	movs	r0, #0
 801d0e2:	bd70      	pop	{r4, r5, r6, pc}
 801d0e4:	6802      	ldr	r2, [r0, #0]
 801d0e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d0ea:	2300      	movs	r3, #0
 801d0ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d0f0:	e7f7      	b.n	801d0e2 <_Balloc+0x66>
 801d0f2:	bf00      	nop
 801d0f4:	08022e43 	.word	0x08022e43
 801d0f8:	08022f2a 	.word	0x08022f2a

0801d0fc <_Bfree>:
 801d0fc:	b570      	push	{r4, r5, r6, lr}
 801d0fe:	69c6      	ldr	r6, [r0, #28]
 801d100:	4605      	mov	r5, r0
 801d102:	460c      	mov	r4, r1
 801d104:	b976      	cbnz	r6, 801d124 <_Bfree+0x28>
 801d106:	2010      	movs	r0, #16
 801d108:	f7fd fd96 	bl	801ac38 <malloc>
 801d10c:	4602      	mov	r2, r0
 801d10e:	61e8      	str	r0, [r5, #28]
 801d110:	b920      	cbnz	r0, 801d11c <_Bfree+0x20>
 801d112:	4b09      	ldr	r3, [pc, #36]	; (801d138 <_Bfree+0x3c>)
 801d114:	4809      	ldr	r0, [pc, #36]	; (801d13c <_Bfree+0x40>)
 801d116:	218f      	movs	r1, #143	; 0x8f
 801d118:	f7fd fd5a 	bl	801abd0 <__assert_func>
 801d11c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d120:	6006      	str	r6, [r0, #0]
 801d122:	60c6      	str	r6, [r0, #12]
 801d124:	b13c      	cbz	r4, 801d136 <_Bfree+0x3a>
 801d126:	69eb      	ldr	r3, [r5, #28]
 801d128:	6862      	ldr	r2, [r4, #4]
 801d12a:	68db      	ldr	r3, [r3, #12]
 801d12c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d130:	6021      	str	r1, [r4, #0]
 801d132:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d136:	bd70      	pop	{r4, r5, r6, pc}
 801d138:	08022e43 	.word	0x08022e43
 801d13c:	08022f2a 	.word	0x08022f2a

0801d140 <__multadd>:
 801d140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d144:	690d      	ldr	r5, [r1, #16]
 801d146:	4607      	mov	r7, r0
 801d148:	460c      	mov	r4, r1
 801d14a:	461e      	mov	r6, r3
 801d14c:	f101 0c14 	add.w	ip, r1, #20
 801d150:	2000      	movs	r0, #0
 801d152:	f8dc 3000 	ldr.w	r3, [ip]
 801d156:	b299      	uxth	r1, r3
 801d158:	fb02 6101 	mla	r1, r2, r1, r6
 801d15c:	0c1e      	lsrs	r6, r3, #16
 801d15e:	0c0b      	lsrs	r3, r1, #16
 801d160:	fb02 3306 	mla	r3, r2, r6, r3
 801d164:	b289      	uxth	r1, r1
 801d166:	3001      	adds	r0, #1
 801d168:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801d16c:	4285      	cmp	r5, r0
 801d16e:	f84c 1b04 	str.w	r1, [ip], #4
 801d172:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801d176:	dcec      	bgt.n	801d152 <__multadd+0x12>
 801d178:	b30e      	cbz	r6, 801d1be <__multadd+0x7e>
 801d17a:	68a3      	ldr	r3, [r4, #8]
 801d17c:	42ab      	cmp	r3, r5
 801d17e:	dc19      	bgt.n	801d1b4 <__multadd+0x74>
 801d180:	6861      	ldr	r1, [r4, #4]
 801d182:	4638      	mov	r0, r7
 801d184:	3101      	adds	r1, #1
 801d186:	f7ff ff79 	bl	801d07c <_Balloc>
 801d18a:	4680      	mov	r8, r0
 801d18c:	b928      	cbnz	r0, 801d19a <__multadd+0x5a>
 801d18e:	4602      	mov	r2, r0
 801d190:	4b0c      	ldr	r3, [pc, #48]	; (801d1c4 <__multadd+0x84>)
 801d192:	480d      	ldr	r0, [pc, #52]	; (801d1c8 <__multadd+0x88>)
 801d194:	21ba      	movs	r1, #186	; 0xba
 801d196:	f7fd fd1b 	bl	801abd0 <__assert_func>
 801d19a:	6922      	ldr	r2, [r4, #16]
 801d19c:	3202      	adds	r2, #2
 801d19e:	f104 010c 	add.w	r1, r4, #12
 801d1a2:	0092      	lsls	r2, r2, #2
 801d1a4:	300c      	adds	r0, #12
 801d1a6:	f7ff f884 	bl	801c2b2 <memcpy>
 801d1aa:	4621      	mov	r1, r4
 801d1ac:	4638      	mov	r0, r7
 801d1ae:	f7ff ffa5 	bl	801d0fc <_Bfree>
 801d1b2:	4644      	mov	r4, r8
 801d1b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d1b8:	3501      	adds	r5, #1
 801d1ba:	615e      	str	r6, [r3, #20]
 801d1bc:	6125      	str	r5, [r4, #16]
 801d1be:	4620      	mov	r0, r4
 801d1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d1c4:	08022f19 	.word	0x08022f19
 801d1c8:	08022f2a 	.word	0x08022f2a

0801d1cc <__s2b>:
 801d1cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d1d0:	460c      	mov	r4, r1
 801d1d2:	4615      	mov	r5, r2
 801d1d4:	461f      	mov	r7, r3
 801d1d6:	2209      	movs	r2, #9
 801d1d8:	3308      	adds	r3, #8
 801d1da:	4606      	mov	r6, r0
 801d1dc:	fb93 f3f2 	sdiv	r3, r3, r2
 801d1e0:	2100      	movs	r1, #0
 801d1e2:	2201      	movs	r2, #1
 801d1e4:	429a      	cmp	r2, r3
 801d1e6:	db09      	blt.n	801d1fc <__s2b+0x30>
 801d1e8:	4630      	mov	r0, r6
 801d1ea:	f7ff ff47 	bl	801d07c <_Balloc>
 801d1ee:	b940      	cbnz	r0, 801d202 <__s2b+0x36>
 801d1f0:	4602      	mov	r2, r0
 801d1f2:	4b19      	ldr	r3, [pc, #100]	; (801d258 <__s2b+0x8c>)
 801d1f4:	4819      	ldr	r0, [pc, #100]	; (801d25c <__s2b+0x90>)
 801d1f6:	21d3      	movs	r1, #211	; 0xd3
 801d1f8:	f7fd fcea 	bl	801abd0 <__assert_func>
 801d1fc:	0052      	lsls	r2, r2, #1
 801d1fe:	3101      	adds	r1, #1
 801d200:	e7f0      	b.n	801d1e4 <__s2b+0x18>
 801d202:	9b08      	ldr	r3, [sp, #32]
 801d204:	6143      	str	r3, [r0, #20]
 801d206:	2d09      	cmp	r5, #9
 801d208:	f04f 0301 	mov.w	r3, #1
 801d20c:	6103      	str	r3, [r0, #16]
 801d20e:	dd16      	ble.n	801d23e <__s2b+0x72>
 801d210:	f104 0909 	add.w	r9, r4, #9
 801d214:	46c8      	mov	r8, r9
 801d216:	442c      	add	r4, r5
 801d218:	f818 3b01 	ldrb.w	r3, [r8], #1
 801d21c:	4601      	mov	r1, r0
 801d21e:	3b30      	subs	r3, #48	; 0x30
 801d220:	220a      	movs	r2, #10
 801d222:	4630      	mov	r0, r6
 801d224:	f7ff ff8c 	bl	801d140 <__multadd>
 801d228:	45a0      	cmp	r8, r4
 801d22a:	d1f5      	bne.n	801d218 <__s2b+0x4c>
 801d22c:	f1a5 0408 	sub.w	r4, r5, #8
 801d230:	444c      	add	r4, r9
 801d232:	1b2d      	subs	r5, r5, r4
 801d234:	1963      	adds	r3, r4, r5
 801d236:	42bb      	cmp	r3, r7
 801d238:	db04      	blt.n	801d244 <__s2b+0x78>
 801d23a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d23e:	340a      	adds	r4, #10
 801d240:	2509      	movs	r5, #9
 801d242:	e7f6      	b.n	801d232 <__s2b+0x66>
 801d244:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d248:	4601      	mov	r1, r0
 801d24a:	3b30      	subs	r3, #48	; 0x30
 801d24c:	220a      	movs	r2, #10
 801d24e:	4630      	mov	r0, r6
 801d250:	f7ff ff76 	bl	801d140 <__multadd>
 801d254:	e7ee      	b.n	801d234 <__s2b+0x68>
 801d256:	bf00      	nop
 801d258:	08022f19 	.word	0x08022f19
 801d25c:	08022f2a 	.word	0x08022f2a

0801d260 <__hi0bits>:
 801d260:	0c03      	lsrs	r3, r0, #16
 801d262:	041b      	lsls	r3, r3, #16
 801d264:	b9d3      	cbnz	r3, 801d29c <__hi0bits+0x3c>
 801d266:	0400      	lsls	r0, r0, #16
 801d268:	2310      	movs	r3, #16
 801d26a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801d26e:	bf04      	itt	eq
 801d270:	0200      	lsleq	r0, r0, #8
 801d272:	3308      	addeq	r3, #8
 801d274:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801d278:	bf04      	itt	eq
 801d27a:	0100      	lsleq	r0, r0, #4
 801d27c:	3304      	addeq	r3, #4
 801d27e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801d282:	bf04      	itt	eq
 801d284:	0080      	lsleq	r0, r0, #2
 801d286:	3302      	addeq	r3, #2
 801d288:	2800      	cmp	r0, #0
 801d28a:	db05      	blt.n	801d298 <__hi0bits+0x38>
 801d28c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801d290:	f103 0301 	add.w	r3, r3, #1
 801d294:	bf08      	it	eq
 801d296:	2320      	moveq	r3, #32
 801d298:	4618      	mov	r0, r3
 801d29a:	4770      	bx	lr
 801d29c:	2300      	movs	r3, #0
 801d29e:	e7e4      	b.n	801d26a <__hi0bits+0xa>

0801d2a0 <__lo0bits>:
 801d2a0:	6803      	ldr	r3, [r0, #0]
 801d2a2:	f013 0207 	ands.w	r2, r3, #7
 801d2a6:	d00c      	beq.n	801d2c2 <__lo0bits+0x22>
 801d2a8:	07d9      	lsls	r1, r3, #31
 801d2aa:	d422      	bmi.n	801d2f2 <__lo0bits+0x52>
 801d2ac:	079a      	lsls	r2, r3, #30
 801d2ae:	bf49      	itett	mi
 801d2b0:	085b      	lsrmi	r3, r3, #1
 801d2b2:	089b      	lsrpl	r3, r3, #2
 801d2b4:	6003      	strmi	r3, [r0, #0]
 801d2b6:	2201      	movmi	r2, #1
 801d2b8:	bf5c      	itt	pl
 801d2ba:	6003      	strpl	r3, [r0, #0]
 801d2bc:	2202      	movpl	r2, #2
 801d2be:	4610      	mov	r0, r2
 801d2c0:	4770      	bx	lr
 801d2c2:	b299      	uxth	r1, r3
 801d2c4:	b909      	cbnz	r1, 801d2ca <__lo0bits+0x2a>
 801d2c6:	0c1b      	lsrs	r3, r3, #16
 801d2c8:	2210      	movs	r2, #16
 801d2ca:	b2d9      	uxtb	r1, r3
 801d2cc:	b909      	cbnz	r1, 801d2d2 <__lo0bits+0x32>
 801d2ce:	3208      	adds	r2, #8
 801d2d0:	0a1b      	lsrs	r3, r3, #8
 801d2d2:	0719      	lsls	r1, r3, #28
 801d2d4:	bf04      	itt	eq
 801d2d6:	091b      	lsreq	r3, r3, #4
 801d2d8:	3204      	addeq	r2, #4
 801d2da:	0799      	lsls	r1, r3, #30
 801d2dc:	bf04      	itt	eq
 801d2de:	089b      	lsreq	r3, r3, #2
 801d2e0:	3202      	addeq	r2, #2
 801d2e2:	07d9      	lsls	r1, r3, #31
 801d2e4:	d403      	bmi.n	801d2ee <__lo0bits+0x4e>
 801d2e6:	085b      	lsrs	r3, r3, #1
 801d2e8:	f102 0201 	add.w	r2, r2, #1
 801d2ec:	d003      	beq.n	801d2f6 <__lo0bits+0x56>
 801d2ee:	6003      	str	r3, [r0, #0]
 801d2f0:	e7e5      	b.n	801d2be <__lo0bits+0x1e>
 801d2f2:	2200      	movs	r2, #0
 801d2f4:	e7e3      	b.n	801d2be <__lo0bits+0x1e>
 801d2f6:	2220      	movs	r2, #32
 801d2f8:	e7e1      	b.n	801d2be <__lo0bits+0x1e>
	...

0801d2fc <__i2b>:
 801d2fc:	b510      	push	{r4, lr}
 801d2fe:	460c      	mov	r4, r1
 801d300:	2101      	movs	r1, #1
 801d302:	f7ff febb 	bl	801d07c <_Balloc>
 801d306:	4602      	mov	r2, r0
 801d308:	b928      	cbnz	r0, 801d316 <__i2b+0x1a>
 801d30a:	4b05      	ldr	r3, [pc, #20]	; (801d320 <__i2b+0x24>)
 801d30c:	4805      	ldr	r0, [pc, #20]	; (801d324 <__i2b+0x28>)
 801d30e:	f240 1145 	movw	r1, #325	; 0x145
 801d312:	f7fd fc5d 	bl	801abd0 <__assert_func>
 801d316:	2301      	movs	r3, #1
 801d318:	6144      	str	r4, [r0, #20]
 801d31a:	6103      	str	r3, [r0, #16]
 801d31c:	bd10      	pop	{r4, pc}
 801d31e:	bf00      	nop
 801d320:	08022f19 	.word	0x08022f19
 801d324:	08022f2a 	.word	0x08022f2a

0801d328 <__multiply>:
 801d328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d32c:	4691      	mov	r9, r2
 801d32e:	690a      	ldr	r2, [r1, #16]
 801d330:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d334:	429a      	cmp	r2, r3
 801d336:	bfb8      	it	lt
 801d338:	460b      	movlt	r3, r1
 801d33a:	460c      	mov	r4, r1
 801d33c:	bfbc      	itt	lt
 801d33e:	464c      	movlt	r4, r9
 801d340:	4699      	movlt	r9, r3
 801d342:	6927      	ldr	r7, [r4, #16]
 801d344:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801d348:	68a3      	ldr	r3, [r4, #8]
 801d34a:	6861      	ldr	r1, [r4, #4]
 801d34c:	eb07 060a 	add.w	r6, r7, sl
 801d350:	42b3      	cmp	r3, r6
 801d352:	b085      	sub	sp, #20
 801d354:	bfb8      	it	lt
 801d356:	3101      	addlt	r1, #1
 801d358:	f7ff fe90 	bl	801d07c <_Balloc>
 801d35c:	b930      	cbnz	r0, 801d36c <__multiply+0x44>
 801d35e:	4602      	mov	r2, r0
 801d360:	4b44      	ldr	r3, [pc, #272]	; (801d474 <__multiply+0x14c>)
 801d362:	4845      	ldr	r0, [pc, #276]	; (801d478 <__multiply+0x150>)
 801d364:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801d368:	f7fd fc32 	bl	801abd0 <__assert_func>
 801d36c:	f100 0514 	add.w	r5, r0, #20
 801d370:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801d374:	462b      	mov	r3, r5
 801d376:	2200      	movs	r2, #0
 801d378:	4543      	cmp	r3, r8
 801d37a:	d321      	bcc.n	801d3c0 <__multiply+0x98>
 801d37c:	f104 0314 	add.w	r3, r4, #20
 801d380:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801d384:	f109 0314 	add.w	r3, r9, #20
 801d388:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801d38c:	9202      	str	r2, [sp, #8]
 801d38e:	1b3a      	subs	r2, r7, r4
 801d390:	3a15      	subs	r2, #21
 801d392:	f022 0203 	bic.w	r2, r2, #3
 801d396:	3204      	adds	r2, #4
 801d398:	f104 0115 	add.w	r1, r4, #21
 801d39c:	428f      	cmp	r7, r1
 801d39e:	bf38      	it	cc
 801d3a0:	2204      	movcc	r2, #4
 801d3a2:	9201      	str	r2, [sp, #4]
 801d3a4:	9a02      	ldr	r2, [sp, #8]
 801d3a6:	9303      	str	r3, [sp, #12]
 801d3a8:	429a      	cmp	r2, r3
 801d3aa:	d80c      	bhi.n	801d3c6 <__multiply+0x9e>
 801d3ac:	2e00      	cmp	r6, #0
 801d3ae:	dd03      	ble.n	801d3b8 <__multiply+0x90>
 801d3b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d3b4:	2b00      	cmp	r3, #0
 801d3b6:	d05b      	beq.n	801d470 <__multiply+0x148>
 801d3b8:	6106      	str	r6, [r0, #16]
 801d3ba:	b005      	add	sp, #20
 801d3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3c0:	f843 2b04 	str.w	r2, [r3], #4
 801d3c4:	e7d8      	b.n	801d378 <__multiply+0x50>
 801d3c6:	f8b3 a000 	ldrh.w	sl, [r3]
 801d3ca:	f1ba 0f00 	cmp.w	sl, #0
 801d3ce:	d024      	beq.n	801d41a <__multiply+0xf2>
 801d3d0:	f104 0e14 	add.w	lr, r4, #20
 801d3d4:	46a9      	mov	r9, r5
 801d3d6:	f04f 0c00 	mov.w	ip, #0
 801d3da:	f85e 2b04 	ldr.w	r2, [lr], #4
 801d3de:	f8d9 1000 	ldr.w	r1, [r9]
 801d3e2:	fa1f fb82 	uxth.w	fp, r2
 801d3e6:	b289      	uxth	r1, r1
 801d3e8:	fb0a 110b 	mla	r1, sl, fp, r1
 801d3ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801d3f0:	f8d9 2000 	ldr.w	r2, [r9]
 801d3f4:	4461      	add	r1, ip
 801d3f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d3fa:	fb0a c20b 	mla	r2, sl, fp, ip
 801d3fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801d402:	b289      	uxth	r1, r1
 801d404:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d408:	4577      	cmp	r7, lr
 801d40a:	f849 1b04 	str.w	r1, [r9], #4
 801d40e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d412:	d8e2      	bhi.n	801d3da <__multiply+0xb2>
 801d414:	9a01      	ldr	r2, [sp, #4]
 801d416:	f845 c002 	str.w	ip, [r5, r2]
 801d41a:	9a03      	ldr	r2, [sp, #12]
 801d41c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801d420:	3304      	adds	r3, #4
 801d422:	f1b9 0f00 	cmp.w	r9, #0
 801d426:	d021      	beq.n	801d46c <__multiply+0x144>
 801d428:	6829      	ldr	r1, [r5, #0]
 801d42a:	f104 0c14 	add.w	ip, r4, #20
 801d42e:	46ae      	mov	lr, r5
 801d430:	f04f 0a00 	mov.w	sl, #0
 801d434:	f8bc b000 	ldrh.w	fp, [ip]
 801d438:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801d43c:	fb09 220b 	mla	r2, r9, fp, r2
 801d440:	4452      	add	r2, sl
 801d442:	b289      	uxth	r1, r1
 801d444:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d448:	f84e 1b04 	str.w	r1, [lr], #4
 801d44c:	f85c 1b04 	ldr.w	r1, [ip], #4
 801d450:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d454:	f8be 1000 	ldrh.w	r1, [lr]
 801d458:	fb09 110a 	mla	r1, r9, sl, r1
 801d45c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801d460:	4567      	cmp	r7, ip
 801d462:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d466:	d8e5      	bhi.n	801d434 <__multiply+0x10c>
 801d468:	9a01      	ldr	r2, [sp, #4]
 801d46a:	50a9      	str	r1, [r5, r2]
 801d46c:	3504      	adds	r5, #4
 801d46e:	e799      	b.n	801d3a4 <__multiply+0x7c>
 801d470:	3e01      	subs	r6, #1
 801d472:	e79b      	b.n	801d3ac <__multiply+0x84>
 801d474:	08022f19 	.word	0x08022f19
 801d478:	08022f2a 	.word	0x08022f2a

0801d47c <__pow5mult>:
 801d47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d480:	4615      	mov	r5, r2
 801d482:	f012 0203 	ands.w	r2, r2, #3
 801d486:	4606      	mov	r6, r0
 801d488:	460f      	mov	r7, r1
 801d48a:	d007      	beq.n	801d49c <__pow5mult+0x20>
 801d48c:	4c25      	ldr	r4, [pc, #148]	; (801d524 <__pow5mult+0xa8>)
 801d48e:	3a01      	subs	r2, #1
 801d490:	2300      	movs	r3, #0
 801d492:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d496:	f7ff fe53 	bl	801d140 <__multadd>
 801d49a:	4607      	mov	r7, r0
 801d49c:	10ad      	asrs	r5, r5, #2
 801d49e:	d03d      	beq.n	801d51c <__pow5mult+0xa0>
 801d4a0:	69f4      	ldr	r4, [r6, #28]
 801d4a2:	b97c      	cbnz	r4, 801d4c4 <__pow5mult+0x48>
 801d4a4:	2010      	movs	r0, #16
 801d4a6:	f7fd fbc7 	bl	801ac38 <malloc>
 801d4aa:	4602      	mov	r2, r0
 801d4ac:	61f0      	str	r0, [r6, #28]
 801d4ae:	b928      	cbnz	r0, 801d4bc <__pow5mult+0x40>
 801d4b0:	4b1d      	ldr	r3, [pc, #116]	; (801d528 <__pow5mult+0xac>)
 801d4b2:	481e      	ldr	r0, [pc, #120]	; (801d52c <__pow5mult+0xb0>)
 801d4b4:	f240 11b3 	movw	r1, #435	; 0x1b3
 801d4b8:	f7fd fb8a 	bl	801abd0 <__assert_func>
 801d4bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d4c0:	6004      	str	r4, [r0, #0]
 801d4c2:	60c4      	str	r4, [r0, #12]
 801d4c4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801d4c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d4cc:	b94c      	cbnz	r4, 801d4e2 <__pow5mult+0x66>
 801d4ce:	f240 2171 	movw	r1, #625	; 0x271
 801d4d2:	4630      	mov	r0, r6
 801d4d4:	f7ff ff12 	bl	801d2fc <__i2b>
 801d4d8:	2300      	movs	r3, #0
 801d4da:	f8c8 0008 	str.w	r0, [r8, #8]
 801d4de:	4604      	mov	r4, r0
 801d4e0:	6003      	str	r3, [r0, #0]
 801d4e2:	f04f 0900 	mov.w	r9, #0
 801d4e6:	07eb      	lsls	r3, r5, #31
 801d4e8:	d50a      	bpl.n	801d500 <__pow5mult+0x84>
 801d4ea:	4639      	mov	r1, r7
 801d4ec:	4622      	mov	r2, r4
 801d4ee:	4630      	mov	r0, r6
 801d4f0:	f7ff ff1a 	bl	801d328 <__multiply>
 801d4f4:	4639      	mov	r1, r7
 801d4f6:	4680      	mov	r8, r0
 801d4f8:	4630      	mov	r0, r6
 801d4fa:	f7ff fdff 	bl	801d0fc <_Bfree>
 801d4fe:	4647      	mov	r7, r8
 801d500:	106d      	asrs	r5, r5, #1
 801d502:	d00b      	beq.n	801d51c <__pow5mult+0xa0>
 801d504:	6820      	ldr	r0, [r4, #0]
 801d506:	b938      	cbnz	r0, 801d518 <__pow5mult+0x9c>
 801d508:	4622      	mov	r2, r4
 801d50a:	4621      	mov	r1, r4
 801d50c:	4630      	mov	r0, r6
 801d50e:	f7ff ff0b 	bl	801d328 <__multiply>
 801d512:	6020      	str	r0, [r4, #0]
 801d514:	f8c0 9000 	str.w	r9, [r0]
 801d518:	4604      	mov	r4, r0
 801d51a:	e7e4      	b.n	801d4e6 <__pow5mult+0x6a>
 801d51c:	4638      	mov	r0, r7
 801d51e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d522:	bf00      	nop
 801d524:	08023078 	.word	0x08023078
 801d528:	08022e43 	.word	0x08022e43
 801d52c:	08022f2a 	.word	0x08022f2a

0801d530 <__lshift>:
 801d530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d534:	460c      	mov	r4, r1
 801d536:	6849      	ldr	r1, [r1, #4]
 801d538:	6923      	ldr	r3, [r4, #16]
 801d53a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d53e:	68a3      	ldr	r3, [r4, #8]
 801d540:	4607      	mov	r7, r0
 801d542:	4691      	mov	r9, r2
 801d544:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d548:	f108 0601 	add.w	r6, r8, #1
 801d54c:	42b3      	cmp	r3, r6
 801d54e:	db0b      	blt.n	801d568 <__lshift+0x38>
 801d550:	4638      	mov	r0, r7
 801d552:	f7ff fd93 	bl	801d07c <_Balloc>
 801d556:	4605      	mov	r5, r0
 801d558:	b948      	cbnz	r0, 801d56e <__lshift+0x3e>
 801d55a:	4602      	mov	r2, r0
 801d55c:	4b28      	ldr	r3, [pc, #160]	; (801d600 <__lshift+0xd0>)
 801d55e:	4829      	ldr	r0, [pc, #164]	; (801d604 <__lshift+0xd4>)
 801d560:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801d564:	f7fd fb34 	bl	801abd0 <__assert_func>
 801d568:	3101      	adds	r1, #1
 801d56a:	005b      	lsls	r3, r3, #1
 801d56c:	e7ee      	b.n	801d54c <__lshift+0x1c>
 801d56e:	2300      	movs	r3, #0
 801d570:	f100 0114 	add.w	r1, r0, #20
 801d574:	f100 0210 	add.w	r2, r0, #16
 801d578:	4618      	mov	r0, r3
 801d57a:	4553      	cmp	r3, sl
 801d57c:	db33      	blt.n	801d5e6 <__lshift+0xb6>
 801d57e:	6920      	ldr	r0, [r4, #16]
 801d580:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d584:	f104 0314 	add.w	r3, r4, #20
 801d588:	f019 091f 	ands.w	r9, r9, #31
 801d58c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d590:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d594:	d02b      	beq.n	801d5ee <__lshift+0xbe>
 801d596:	f1c9 0e20 	rsb	lr, r9, #32
 801d59a:	468a      	mov	sl, r1
 801d59c:	2200      	movs	r2, #0
 801d59e:	6818      	ldr	r0, [r3, #0]
 801d5a0:	fa00 f009 	lsl.w	r0, r0, r9
 801d5a4:	4310      	orrs	r0, r2
 801d5a6:	f84a 0b04 	str.w	r0, [sl], #4
 801d5aa:	f853 2b04 	ldr.w	r2, [r3], #4
 801d5ae:	459c      	cmp	ip, r3
 801d5b0:	fa22 f20e 	lsr.w	r2, r2, lr
 801d5b4:	d8f3      	bhi.n	801d59e <__lshift+0x6e>
 801d5b6:	ebac 0304 	sub.w	r3, ip, r4
 801d5ba:	3b15      	subs	r3, #21
 801d5bc:	f023 0303 	bic.w	r3, r3, #3
 801d5c0:	3304      	adds	r3, #4
 801d5c2:	f104 0015 	add.w	r0, r4, #21
 801d5c6:	4584      	cmp	ip, r0
 801d5c8:	bf38      	it	cc
 801d5ca:	2304      	movcc	r3, #4
 801d5cc:	50ca      	str	r2, [r1, r3]
 801d5ce:	b10a      	cbz	r2, 801d5d4 <__lshift+0xa4>
 801d5d0:	f108 0602 	add.w	r6, r8, #2
 801d5d4:	3e01      	subs	r6, #1
 801d5d6:	4638      	mov	r0, r7
 801d5d8:	612e      	str	r6, [r5, #16]
 801d5da:	4621      	mov	r1, r4
 801d5dc:	f7ff fd8e 	bl	801d0fc <_Bfree>
 801d5e0:	4628      	mov	r0, r5
 801d5e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d5e6:	f842 0f04 	str.w	r0, [r2, #4]!
 801d5ea:	3301      	adds	r3, #1
 801d5ec:	e7c5      	b.n	801d57a <__lshift+0x4a>
 801d5ee:	3904      	subs	r1, #4
 801d5f0:	f853 2b04 	ldr.w	r2, [r3], #4
 801d5f4:	f841 2f04 	str.w	r2, [r1, #4]!
 801d5f8:	459c      	cmp	ip, r3
 801d5fa:	d8f9      	bhi.n	801d5f0 <__lshift+0xc0>
 801d5fc:	e7ea      	b.n	801d5d4 <__lshift+0xa4>
 801d5fe:	bf00      	nop
 801d600:	08022f19 	.word	0x08022f19
 801d604:	08022f2a 	.word	0x08022f2a

0801d608 <__mcmp>:
 801d608:	b530      	push	{r4, r5, lr}
 801d60a:	6902      	ldr	r2, [r0, #16]
 801d60c:	690c      	ldr	r4, [r1, #16]
 801d60e:	1b12      	subs	r2, r2, r4
 801d610:	d10e      	bne.n	801d630 <__mcmp+0x28>
 801d612:	f100 0314 	add.w	r3, r0, #20
 801d616:	3114      	adds	r1, #20
 801d618:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d61c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d620:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d624:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d628:	42a5      	cmp	r5, r4
 801d62a:	d003      	beq.n	801d634 <__mcmp+0x2c>
 801d62c:	d305      	bcc.n	801d63a <__mcmp+0x32>
 801d62e:	2201      	movs	r2, #1
 801d630:	4610      	mov	r0, r2
 801d632:	bd30      	pop	{r4, r5, pc}
 801d634:	4283      	cmp	r3, r0
 801d636:	d3f3      	bcc.n	801d620 <__mcmp+0x18>
 801d638:	e7fa      	b.n	801d630 <__mcmp+0x28>
 801d63a:	f04f 32ff 	mov.w	r2, #4294967295
 801d63e:	e7f7      	b.n	801d630 <__mcmp+0x28>

0801d640 <__mdiff>:
 801d640:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d644:	460c      	mov	r4, r1
 801d646:	4606      	mov	r6, r0
 801d648:	4611      	mov	r1, r2
 801d64a:	4620      	mov	r0, r4
 801d64c:	4690      	mov	r8, r2
 801d64e:	f7ff ffdb 	bl	801d608 <__mcmp>
 801d652:	1e05      	subs	r5, r0, #0
 801d654:	d110      	bne.n	801d678 <__mdiff+0x38>
 801d656:	4629      	mov	r1, r5
 801d658:	4630      	mov	r0, r6
 801d65a:	f7ff fd0f 	bl	801d07c <_Balloc>
 801d65e:	b930      	cbnz	r0, 801d66e <__mdiff+0x2e>
 801d660:	4b3a      	ldr	r3, [pc, #232]	; (801d74c <__mdiff+0x10c>)
 801d662:	4602      	mov	r2, r0
 801d664:	f240 2137 	movw	r1, #567	; 0x237
 801d668:	4839      	ldr	r0, [pc, #228]	; (801d750 <__mdiff+0x110>)
 801d66a:	f7fd fab1 	bl	801abd0 <__assert_func>
 801d66e:	2301      	movs	r3, #1
 801d670:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d674:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d678:	bfa4      	itt	ge
 801d67a:	4643      	movge	r3, r8
 801d67c:	46a0      	movge	r8, r4
 801d67e:	4630      	mov	r0, r6
 801d680:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d684:	bfa6      	itte	ge
 801d686:	461c      	movge	r4, r3
 801d688:	2500      	movge	r5, #0
 801d68a:	2501      	movlt	r5, #1
 801d68c:	f7ff fcf6 	bl	801d07c <_Balloc>
 801d690:	b920      	cbnz	r0, 801d69c <__mdiff+0x5c>
 801d692:	4b2e      	ldr	r3, [pc, #184]	; (801d74c <__mdiff+0x10c>)
 801d694:	4602      	mov	r2, r0
 801d696:	f240 2145 	movw	r1, #581	; 0x245
 801d69a:	e7e5      	b.n	801d668 <__mdiff+0x28>
 801d69c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801d6a0:	6926      	ldr	r6, [r4, #16]
 801d6a2:	60c5      	str	r5, [r0, #12]
 801d6a4:	f104 0914 	add.w	r9, r4, #20
 801d6a8:	f108 0514 	add.w	r5, r8, #20
 801d6ac:	f100 0e14 	add.w	lr, r0, #20
 801d6b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801d6b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801d6b8:	f108 0210 	add.w	r2, r8, #16
 801d6bc:	46f2      	mov	sl, lr
 801d6be:	2100      	movs	r1, #0
 801d6c0:	f859 3b04 	ldr.w	r3, [r9], #4
 801d6c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d6c8:	fa11 f88b 	uxtah	r8, r1, fp
 801d6cc:	b299      	uxth	r1, r3
 801d6ce:	0c1b      	lsrs	r3, r3, #16
 801d6d0:	eba8 0801 	sub.w	r8, r8, r1
 801d6d4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d6d8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d6dc:	fa1f f888 	uxth.w	r8, r8
 801d6e0:	1419      	asrs	r1, r3, #16
 801d6e2:	454e      	cmp	r6, r9
 801d6e4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d6e8:	f84a 3b04 	str.w	r3, [sl], #4
 801d6ec:	d8e8      	bhi.n	801d6c0 <__mdiff+0x80>
 801d6ee:	1b33      	subs	r3, r6, r4
 801d6f0:	3b15      	subs	r3, #21
 801d6f2:	f023 0303 	bic.w	r3, r3, #3
 801d6f6:	3304      	adds	r3, #4
 801d6f8:	3415      	adds	r4, #21
 801d6fa:	42a6      	cmp	r6, r4
 801d6fc:	bf38      	it	cc
 801d6fe:	2304      	movcc	r3, #4
 801d700:	441d      	add	r5, r3
 801d702:	4473      	add	r3, lr
 801d704:	469e      	mov	lr, r3
 801d706:	462e      	mov	r6, r5
 801d708:	4566      	cmp	r6, ip
 801d70a:	d30e      	bcc.n	801d72a <__mdiff+0xea>
 801d70c:	f10c 0203 	add.w	r2, ip, #3
 801d710:	1b52      	subs	r2, r2, r5
 801d712:	f022 0203 	bic.w	r2, r2, #3
 801d716:	3d03      	subs	r5, #3
 801d718:	45ac      	cmp	ip, r5
 801d71a:	bf38      	it	cc
 801d71c:	2200      	movcc	r2, #0
 801d71e:	4413      	add	r3, r2
 801d720:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801d724:	b17a      	cbz	r2, 801d746 <__mdiff+0x106>
 801d726:	6107      	str	r7, [r0, #16]
 801d728:	e7a4      	b.n	801d674 <__mdiff+0x34>
 801d72a:	f856 8b04 	ldr.w	r8, [r6], #4
 801d72e:	fa11 f288 	uxtah	r2, r1, r8
 801d732:	1414      	asrs	r4, r2, #16
 801d734:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801d738:	b292      	uxth	r2, r2
 801d73a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801d73e:	f84e 2b04 	str.w	r2, [lr], #4
 801d742:	1421      	asrs	r1, r4, #16
 801d744:	e7e0      	b.n	801d708 <__mdiff+0xc8>
 801d746:	3f01      	subs	r7, #1
 801d748:	e7ea      	b.n	801d720 <__mdiff+0xe0>
 801d74a:	bf00      	nop
 801d74c:	08022f19 	.word	0x08022f19
 801d750:	08022f2a 	.word	0x08022f2a

0801d754 <__ulp>:
 801d754:	b082      	sub	sp, #8
 801d756:	ed8d 0b00 	vstr	d0, [sp]
 801d75a:	9a01      	ldr	r2, [sp, #4]
 801d75c:	4b0f      	ldr	r3, [pc, #60]	; (801d79c <__ulp+0x48>)
 801d75e:	4013      	ands	r3, r2
 801d760:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801d764:	2b00      	cmp	r3, #0
 801d766:	dc08      	bgt.n	801d77a <__ulp+0x26>
 801d768:	425b      	negs	r3, r3
 801d76a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801d76e:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d772:	da04      	bge.n	801d77e <__ulp+0x2a>
 801d774:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801d778:	4113      	asrs	r3, r2
 801d77a:	2200      	movs	r2, #0
 801d77c:	e008      	b.n	801d790 <__ulp+0x3c>
 801d77e:	f1a2 0314 	sub.w	r3, r2, #20
 801d782:	2b1e      	cmp	r3, #30
 801d784:	bfda      	itte	le
 801d786:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801d78a:	40da      	lsrle	r2, r3
 801d78c:	2201      	movgt	r2, #1
 801d78e:	2300      	movs	r3, #0
 801d790:	4619      	mov	r1, r3
 801d792:	4610      	mov	r0, r2
 801d794:	ec41 0b10 	vmov	d0, r0, r1
 801d798:	b002      	add	sp, #8
 801d79a:	4770      	bx	lr
 801d79c:	7ff00000 	.word	0x7ff00000

0801d7a0 <__b2d>:
 801d7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d7a4:	6906      	ldr	r6, [r0, #16]
 801d7a6:	f100 0814 	add.w	r8, r0, #20
 801d7aa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801d7ae:	1f37      	subs	r7, r6, #4
 801d7b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d7b4:	4610      	mov	r0, r2
 801d7b6:	f7ff fd53 	bl	801d260 <__hi0bits>
 801d7ba:	f1c0 0320 	rsb	r3, r0, #32
 801d7be:	280a      	cmp	r0, #10
 801d7c0:	600b      	str	r3, [r1, #0]
 801d7c2:	491b      	ldr	r1, [pc, #108]	; (801d830 <__b2d+0x90>)
 801d7c4:	dc15      	bgt.n	801d7f2 <__b2d+0x52>
 801d7c6:	f1c0 0c0b 	rsb	ip, r0, #11
 801d7ca:	fa22 f30c 	lsr.w	r3, r2, ip
 801d7ce:	45b8      	cmp	r8, r7
 801d7d0:	ea43 0501 	orr.w	r5, r3, r1
 801d7d4:	bf34      	ite	cc
 801d7d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d7da:	2300      	movcs	r3, #0
 801d7dc:	3015      	adds	r0, #21
 801d7de:	fa02 f000 	lsl.w	r0, r2, r0
 801d7e2:	fa23 f30c 	lsr.w	r3, r3, ip
 801d7e6:	4303      	orrs	r3, r0
 801d7e8:	461c      	mov	r4, r3
 801d7ea:	ec45 4b10 	vmov	d0, r4, r5
 801d7ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d7f2:	45b8      	cmp	r8, r7
 801d7f4:	bf3a      	itte	cc
 801d7f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d7fa:	f1a6 0708 	subcc.w	r7, r6, #8
 801d7fe:	2300      	movcs	r3, #0
 801d800:	380b      	subs	r0, #11
 801d802:	d012      	beq.n	801d82a <__b2d+0x8a>
 801d804:	f1c0 0120 	rsb	r1, r0, #32
 801d808:	fa23 f401 	lsr.w	r4, r3, r1
 801d80c:	4082      	lsls	r2, r0
 801d80e:	4322      	orrs	r2, r4
 801d810:	4547      	cmp	r7, r8
 801d812:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801d816:	bf8c      	ite	hi
 801d818:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801d81c:	2200      	movls	r2, #0
 801d81e:	4083      	lsls	r3, r0
 801d820:	40ca      	lsrs	r2, r1
 801d822:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801d826:	4313      	orrs	r3, r2
 801d828:	e7de      	b.n	801d7e8 <__b2d+0x48>
 801d82a:	ea42 0501 	orr.w	r5, r2, r1
 801d82e:	e7db      	b.n	801d7e8 <__b2d+0x48>
 801d830:	3ff00000 	.word	0x3ff00000

0801d834 <__d2b>:
 801d834:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d838:	460f      	mov	r7, r1
 801d83a:	2101      	movs	r1, #1
 801d83c:	ec59 8b10 	vmov	r8, r9, d0
 801d840:	4616      	mov	r6, r2
 801d842:	f7ff fc1b 	bl	801d07c <_Balloc>
 801d846:	4604      	mov	r4, r0
 801d848:	b930      	cbnz	r0, 801d858 <__d2b+0x24>
 801d84a:	4602      	mov	r2, r0
 801d84c:	4b24      	ldr	r3, [pc, #144]	; (801d8e0 <__d2b+0xac>)
 801d84e:	4825      	ldr	r0, [pc, #148]	; (801d8e4 <__d2b+0xb0>)
 801d850:	f240 310f 	movw	r1, #783	; 0x30f
 801d854:	f7fd f9bc 	bl	801abd0 <__assert_func>
 801d858:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d85c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d860:	bb2d      	cbnz	r5, 801d8ae <__d2b+0x7a>
 801d862:	9301      	str	r3, [sp, #4]
 801d864:	f1b8 0300 	subs.w	r3, r8, #0
 801d868:	d026      	beq.n	801d8b8 <__d2b+0x84>
 801d86a:	4668      	mov	r0, sp
 801d86c:	9300      	str	r3, [sp, #0]
 801d86e:	f7ff fd17 	bl	801d2a0 <__lo0bits>
 801d872:	e9dd 1200 	ldrd	r1, r2, [sp]
 801d876:	b1e8      	cbz	r0, 801d8b4 <__d2b+0x80>
 801d878:	f1c0 0320 	rsb	r3, r0, #32
 801d87c:	fa02 f303 	lsl.w	r3, r2, r3
 801d880:	430b      	orrs	r3, r1
 801d882:	40c2      	lsrs	r2, r0
 801d884:	6163      	str	r3, [r4, #20]
 801d886:	9201      	str	r2, [sp, #4]
 801d888:	9b01      	ldr	r3, [sp, #4]
 801d88a:	61a3      	str	r3, [r4, #24]
 801d88c:	2b00      	cmp	r3, #0
 801d88e:	bf14      	ite	ne
 801d890:	2202      	movne	r2, #2
 801d892:	2201      	moveq	r2, #1
 801d894:	6122      	str	r2, [r4, #16]
 801d896:	b1bd      	cbz	r5, 801d8c8 <__d2b+0x94>
 801d898:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d89c:	4405      	add	r5, r0
 801d89e:	603d      	str	r5, [r7, #0]
 801d8a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d8a4:	6030      	str	r0, [r6, #0]
 801d8a6:	4620      	mov	r0, r4
 801d8a8:	b003      	add	sp, #12
 801d8aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d8ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d8b2:	e7d6      	b.n	801d862 <__d2b+0x2e>
 801d8b4:	6161      	str	r1, [r4, #20]
 801d8b6:	e7e7      	b.n	801d888 <__d2b+0x54>
 801d8b8:	a801      	add	r0, sp, #4
 801d8ba:	f7ff fcf1 	bl	801d2a0 <__lo0bits>
 801d8be:	9b01      	ldr	r3, [sp, #4]
 801d8c0:	6163      	str	r3, [r4, #20]
 801d8c2:	3020      	adds	r0, #32
 801d8c4:	2201      	movs	r2, #1
 801d8c6:	e7e5      	b.n	801d894 <__d2b+0x60>
 801d8c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d8cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d8d0:	6038      	str	r0, [r7, #0]
 801d8d2:	6918      	ldr	r0, [r3, #16]
 801d8d4:	f7ff fcc4 	bl	801d260 <__hi0bits>
 801d8d8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d8dc:	e7e2      	b.n	801d8a4 <__d2b+0x70>
 801d8de:	bf00      	nop
 801d8e0:	08022f19 	.word	0x08022f19
 801d8e4:	08022f2a 	.word	0x08022f2a

0801d8e8 <__ratio>:
 801d8e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8ec:	4688      	mov	r8, r1
 801d8ee:	4669      	mov	r1, sp
 801d8f0:	4681      	mov	r9, r0
 801d8f2:	f7ff ff55 	bl	801d7a0 <__b2d>
 801d8f6:	a901      	add	r1, sp, #4
 801d8f8:	4640      	mov	r0, r8
 801d8fa:	ec55 4b10 	vmov	r4, r5, d0
 801d8fe:	f7ff ff4f 	bl	801d7a0 <__b2d>
 801d902:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d906:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801d90a:	eba3 0c02 	sub.w	ip, r3, r2
 801d90e:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d912:	1a9b      	subs	r3, r3, r2
 801d914:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801d918:	ec51 0b10 	vmov	r0, r1, d0
 801d91c:	2b00      	cmp	r3, #0
 801d91e:	bfd6      	itet	le
 801d920:	460a      	movle	r2, r1
 801d922:	462a      	movgt	r2, r5
 801d924:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d928:	468b      	mov	fp, r1
 801d92a:	462f      	mov	r7, r5
 801d92c:	bfd4      	ite	le
 801d92e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801d932:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d936:	4620      	mov	r0, r4
 801d938:	ee10 2a10 	vmov	r2, s0
 801d93c:	465b      	mov	r3, fp
 801d93e:	4639      	mov	r1, r7
 801d940:	f7e2 ff9c 	bl	800087c <__aeabi_ddiv>
 801d944:	ec41 0b10 	vmov	d0, r0, r1
 801d948:	b003      	add	sp, #12
 801d94a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d94e <__copybits>:
 801d94e:	3901      	subs	r1, #1
 801d950:	b570      	push	{r4, r5, r6, lr}
 801d952:	1149      	asrs	r1, r1, #5
 801d954:	6914      	ldr	r4, [r2, #16]
 801d956:	3101      	adds	r1, #1
 801d958:	f102 0314 	add.w	r3, r2, #20
 801d95c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d960:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d964:	1f05      	subs	r5, r0, #4
 801d966:	42a3      	cmp	r3, r4
 801d968:	d30c      	bcc.n	801d984 <__copybits+0x36>
 801d96a:	1aa3      	subs	r3, r4, r2
 801d96c:	3b11      	subs	r3, #17
 801d96e:	f023 0303 	bic.w	r3, r3, #3
 801d972:	3211      	adds	r2, #17
 801d974:	42a2      	cmp	r2, r4
 801d976:	bf88      	it	hi
 801d978:	2300      	movhi	r3, #0
 801d97a:	4418      	add	r0, r3
 801d97c:	2300      	movs	r3, #0
 801d97e:	4288      	cmp	r0, r1
 801d980:	d305      	bcc.n	801d98e <__copybits+0x40>
 801d982:	bd70      	pop	{r4, r5, r6, pc}
 801d984:	f853 6b04 	ldr.w	r6, [r3], #4
 801d988:	f845 6f04 	str.w	r6, [r5, #4]!
 801d98c:	e7eb      	b.n	801d966 <__copybits+0x18>
 801d98e:	f840 3b04 	str.w	r3, [r0], #4
 801d992:	e7f4      	b.n	801d97e <__copybits+0x30>

0801d994 <__any_on>:
 801d994:	f100 0214 	add.w	r2, r0, #20
 801d998:	6900      	ldr	r0, [r0, #16]
 801d99a:	114b      	asrs	r3, r1, #5
 801d99c:	4298      	cmp	r0, r3
 801d99e:	b510      	push	{r4, lr}
 801d9a0:	db11      	blt.n	801d9c6 <__any_on+0x32>
 801d9a2:	dd0a      	ble.n	801d9ba <__any_on+0x26>
 801d9a4:	f011 011f 	ands.w	r1, r1, #31
 801d9a8:	d007      	beq.n	801d9ba <__any_on+0x26>
 801d9aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d9ae:	fa24 f001 	lsr.w	r0, r4, r1
 801d9b2:	fa00 f101 	lsl.w	r1, r0, r1
 801d9b6:	428c      	cmp	r4, r1
 801d9b8:	d10b      	bne.n	801d9d2 <__any_on+0x3e>
 801d9ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d9be:	4293      	cmp	r3, r2
 801d9c0:	d803      	bhi.n	801d9ca <__any_on+0x36>
 801d9c2:	2000      	movs	r0, #0
 801d9c4:	bd10      	pop	{r4, pc}
 801d9c6:	4603      	mov	r3, r0
 801d9c8:	e7f7      	b.n	801d9ba <__any_on+0x26>
 801d9ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d9ce:	2900      	cmp	r1, #0
 801d9d0:	d0f5      	beq.n	801d9be <__any_on+0x2a>
 801d9d2:	2001      	movs	r0, #1
 801d9d4:	e7f6      	b.n	801d9c4 <__any_on+0x30>

0801d9d6 <sulp>:
 801d9d6:	b570      	push	{r4, r5, r6, lr}
 801d9d8:	4604      	mov	r4, r0
 801d9da:	460d      	mov	r5, r1
 801d9dc:	ec45 4b10 	vmov	d0, r4, r5
 801d9e0:	4616      	mov	r6, r2
 801d9e2:	f7ff feb7 	bl	801d754 <__ulp>
 801d9e6:	ec51 0b10 	vmov	r0, r1, d0
 801d9ea:	b17e      	cbz	r6, 801da0c <sulp+0x36>
 801d9ec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801d9f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801d9f4:	2b00      	cmp	r3, #0
 801d9f6:	dd09      	ble.n	801da0c <sulp+0x36>
 801d9f8:	051b      	lsls	r3, r3, #20
 801d9fa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801d9fe:	2400      	movs	r4, #0
 801da00:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801da04:	4622      	mov	r2, r4
 801da06:	462b      	mov	r3, r5
 801da08:	f7e2 fe0e 	bl	8000628 <__aeabi_dmul>
 801da0c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801da10 <_strtod_l>:
 801da10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da14:	ed2d 8b02 	vpush	{d8}
 801da18:	b09b      	sub	sp, #108	; 0x6c
 801da1a:	4604      	mov	r4, r0
 801da1c:	9213      	str	r2, [sp, #76]	; 0x4c
 801da1e:	2200      	movs	r2, #0
 801da20:	9216      	str	r2, [sp, #88]	; 0x58
 801da22:	460d      	mov	r5, r1
 801da24:	f04f 0800 	mov.w	r8, #0
 801da28:	f04f 0900 	mov.w	r9, #0
 801da2c:	460a      	mov	r2, r1
 801da2e:	9215      	str	r2, [sp, #84]	; 0x54
 801da30:	7811      	ldrb	r1, [r2, #0]
 801da32:	292b      	cmp	r1, #43	; 0x2b
 801da34:	d04c      	beq.n	801dad0 <_strtod_l+0xc0>
 801da36:	d83a      	bhi.n	801daae <_strtod_l+0x9e>
 801da38:	290d      	cmp	r1, #13
 801da3a:	d834      	bhi.n	801daa6 <_strtod_l+0x96>
 801da3c:	2908      	cmp	r1, #8
 801da3e:	d834      	bhi.n	801daaa <_strtod_l+0x9a>
 801da40:	2900      	cmp	r1, #0
 801da42:	d03d      	beq.n	801dac0 <_strtod_l+0xb0>
 801da44:	2200      	movs	r2, #0
 801da46:	920a      	str	r2, [sp, #40]	; 0x28
 801da48:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801da4a:	7832      	ldrb	r2, [r6, #0]
 801da4c:	2a30      	cmp	r2, #48	; 0x30
 801da4e:	f040 80b4 	bne.w	801dbba <_strtod_l+0x1aa>
 801da52:	7872      	ldrb	r2, [r6, #1]
 801da54:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801da58:	2a58      	cmp	r2, #88	; 0x58
 801da5a:	d170      	bne.n	801db3e <_strtod_l+0x12e>
 801da5c:	9302      	str	r3, [sp, #8]
 801da5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801da60:	9301      	str	r3, [sp, #4]
 801da62:	ab16      	add	r3, sp, #88	; 0x58
 801da64:	9300      	str	r3, [sp, #0]
 801da66:	4a8e      	ldr	r2, [pc, #568]	; (801dca0 <_strtod_l+0x290>)
 801da68:	ab17      	add	r3, sp, #92	; 0x5c
 801da6a:	a915      	add	r1, sp, #84	; 0x54
 801da6c:	4620      	mov	r0, r4
 801da6e:	f001 fe5f 	bl	801f730 <__gethex>
 801da72:	f010 070f 	ands.w	r7, r0, #15
 801da76:	4605      	mov	r5, r0
 801da78:	d005      	beq.n	801da86 <_strtod_l+0x76>
 801da7a:	2f06      	cmp	r7, #6
 801da7c:	d12a      	bne.n	801dad4 <_strtod_l+0xc4>
 801da7e:	3601      	adds	r6, #1
 801da80:	2300      	movs	r3, #0
 801da82:	9615      	str	r6, [sp, #84]	; 0x54
 801da84:	930a      	str	r3, [sp, #40]	; 0x28
 801da86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801da88:	2b00      	cmp	r3, #0
 801da8a:	f040 857f 	bne.w	801e58c <_strtod_l+0xb7c>
 801da8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801da90:	b1db      	cbz	r3, 801daca <_strtod_l+0xba>
 801da92:	4642      	mov	r2, r8
 801da94:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801da98:	ec43 2b10 	vmov	d0, r2, r3
 801da9c:	b01b      	add	sp, #108	; 0x6c
 801da9e:	ecbd 8b02 	vpop	{d8}
 801daa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801daa6:	2920      	cmp	r1, #32
 801daa8:	d1cc      	bne.n	801da44 <_strtod_l+0x34>
 801daaa:	3201      	adds	r2, #1
 801daac:	e7bf      	b.n	801da2e <_strtod_l+0x1e>
 801daae:	292d      	cmp	r1, #45	; 0x2d
 801dab0:	d1c8      	bne.n	801da44 <_strtod_l+0x34>
 801dab2:	2101      	movs	r1, #1
 801dab4:	910a      	str	r1, [sp, #40]	; 0x28
 801dab6:	1c51      	adds	r1, r2, #1
 801dab8:	9115      	str	r1, [sp, #84]	; 0x54
 801daba:	7852      	ldrb	r2, [r2, #1]
 801dabc:	2a00      	cmp	r2, #0
 801dabe:	d1c3      	bne.n	801da48 <_strtod_l+0x38>
 801dac0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801dac2:	9515      	str	r5, [sp, #84]	; 0x54
 801dac4:	2b00      	cmp	r3, #0
 801dac6:	f040 855f 	bne.w	801e588 <_strtod_l+0xb78>
 801daca:	4642      	mov	r2, r8
 801dacc:	464b      	mov	r3, r9
 801dace:	e7e3      	b.n	801da98 <_strtod_l+0x88>
 801dad0:	2100      	movs	r1, #0
 801dad2:	e7ef      	b.n	801dab4 <_strtod_l+0xa4>
 801dad4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801dad6:	b13a      	cbz	r2, 801dae8 <_strtod_l+0xd8>
 801dad8:	2135      	movs	r1, #53	; 0x35
 801dada:	a818      	add	r0, sp, #96	; 0x60
 801dadc:	f7ff ff37 	bl	801d94e <__copybits>
 801dae0:	9916      	ldr	r1, [sp, #88]	; 0x58
 801dae2:	4620      	mov	r0, r4
 801dae4:	f7ff fb0a 	bl	801d0fc <_Bfree>
 801dae8:	3f01      	subs	r7, #1
 801daea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801daec:	2f04      	cmp	r7, #4
 801daee:	d806      	bhi.n	801dafe <_strtod_l+0xee>
 801daf0:	e8df f007 	tbb	[pc, r7]
 801daf4:	201d0314 	.word	0x201d0314
 801daf8:	14          	.byte	0x14
 801daf9:	00          	.byte	0x00
 801dafa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801dafe:	05e9      	lsls	r1, r5, #23
 801db00:	bf48      	it	mi
 801db02:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801db06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801db0a:	0d1b      	lsrs	r3, r3, #20
 801db0c:	051b      	lsls	r3, r3, #20
 801db0e:	2b00      	cmp	r3, #0
 801db10:	d1b9      	bne.n	801da86 <_strtod_l+0x76>
 801db12:	f7fe fb99 	bl	801c248 <__errno>
 801db16:	2322      	movs	r3, #34	; 0x22
 801db18:	6003      	str	r3, [r0, #0]
 801db1a:	e7b4      	b.n	801da86 <_strtod_l+0x76>
 801db1c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 801db20:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801db24:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801db28:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801db2c:	e7e7      	b.n	801dafe <_strtod_l+0xee>
 801db2e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801dca8 <_strtod_l+0x298>
 801db32:	e7e4      	b.n	801dafe <_strtod_l+0xee>
 801db34:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801db38:	f04f 38ff 	mov.w	r8, #4294967295
 801db3c:	e7df      	b.n	801dafe <_strtod_l+0xee>
 801db3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801db40:	1c5a      	adds	r2, r3, #1
 801db42:	9215      	str	r2, [sp, #84]	; 0x54
 801db44:	785b      	ldrb	r3, [r3, #1]
 801db46:	2b30      	cmp	r3, #48	; 0x30
 801db48:	d0f9      	beq.n	801db3e <_strtod_l+0x12e>
 801db4a:	2b00      	cmp	r3, #0
 801db4c:	d09b      	beq.n	801da86 <_strtod_l+0x76>
 801db4e:	2301      	movs	r3, #1
 801db50:	f04f 0a00 	mov.w	sl, #0
 801db54:	9304      	str	r3, [sp, #16]
 801db56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801db58:	930b      	str	r3, [sp, #44]	; 0x2c
 801db5a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801db5e:	46d3      	mov	fp, sl
 801db60:	220a      	movs	r2, #10
 801db62:	9815      	ldr	r0, [sp, #84]	; 0x54
 801db64:	7806      	ldrb	r6, [r0, #0]
 801db66:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801db6a:	b2d9      	uxtb	r1, r3
 801db6c:	2909      	cmp	r1, #9
 801db6e:	d926      	bls.n	801dbbe <_strtod_l+0x1ae>
 801db70:	494c      	ldr	r1, [pc, #304]	; (801dca4 <_strtod_l+0x294>)
 801db72:	2201      	movs	r2, #1
 801db74:	f7fe fa10 	bl	801bf98 <strncmp>
 801db78:	2800      	cmp	r0, #0
 801db7a:	d030      	beq.n	801dbde <_strtod_l+0x1ce>
 801db7c:	2000      	movs	r0, #0
 801db7e:	4632      	mov	r2, r6
 801db80:	9005      	str	r0, [sp, #20]
 801db82:	465e      	mov	r6, fp
 801db84:	4603      	mov	r3, r0
 801db86:	2a65      	cmp	r2, #101	; 0x65
 801db88:	d001      	beq.n	801db8e <_strtod_l+0x17e>
 801db8a:	2a45      	cmp	r2, #69	; 0x45
 801db8c:	d113      	bne.n	801dbb6 <_strtod_l+0x1a6>
 801db8e:	b91e      	cbnz	r6, 801db98 <_strtod_l+0x188>
 801db90:	9a04      	ldr	r2, [sp, #16]
 801db92:	4302      	orrs	r2, r0
 801db94:	d094      	beq.n	801dac0 <_strtod_l+0xb0>
 801db96:	2600      	movs	r6, #0
 801db98:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801db9a:	1c6a      	adds	r2, r5, #1
 801db9c:	9215      	str	r2, [sp, #84]	; 0x54
 801db9e:	786a      	ldrb	r2, [r5, #1]
 801dba0:	2a2b      	cmp	r2, #43	; 0x2b
 801dba2:	d074      	beq.n	801dc8e <_strtod_l+0x27e>
 801dba4:	2a2d      	cmp	r2, #45	; 0x2d
 801dba6:	d078      	beq.n	801dc9a <_strtod_l+0x28a>
 801dba8:	f04f 0c00 	mov.w	ip, #0
 801dbac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801dbb0:	2909      	cmp	r1, #9
 801dbb2:	d97f      	bls.n	801dcb4 <_strtod_l+0x2a4>
 801dbb4:	9515      	str	r5, [sp, #84]	; 0x54
 801dbb6:	2700      	movs	r7, #0
 801dbb8:	e09e      	b.n	801dcf8 <_strtod_l+0x2e8>
 801dbba:	2300      	movs	r3, #0
 801dbbc:	e7c8      	b.n	801db50 <_strtod_l+0x140>
 801dbbe:	f1bb 0f08 	cmp.w	fp, #8
 801dbc2:	bfd8      	it	le
 801dbc4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801dbc6:	f100 0001 	add.w	r0, r0, #1
 801dbca:	bfda      	itte	le
 801dbcc:	fb02 3301 	mlale	r3, r2, r1, r3
 801dbd0:	9309      	strle	r3, [sp, #36]	; 0x24
 801dbd2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801dbd6:	f10b 0b01 	add.w	fp, fp, #1
 801dbda:	9015      	str	r0, [sp, #84]	; 0x54
 801dbdc:	e7c1      	b.n	801db62 <_strtod_l+0x152>
 801dbde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dbe0:	1c5a      	adds	r2, r3, #1
 801dbe2:	9215      	str	r2, [sp, #84]	; 0x54
 801dbe4:	785a      	ldrb	r2, [r3, #1]
 801dbe6:	f1bb 0f00 	cmp.w	fp, #0
 801dbea:	d037      	beq.n	801dc5c <_strtod_l+0x24c>
 801dbec:	9005      	str	r0, [sp, #20]
 801dbee:	465e      	mov	r6, fp
 801dbf0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801dbf4:	2b09      	cmp	r3, #9
 801dbf6:	d912      	bls.n	801dc1e <_strtod_l+0x20e>
 801dbf8:	2301      	movs	r3, #1
 801dbfa:	e7c4      	b.n	801db86 <_strtod_l+0x176>
 801dbfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dbfe:	1c5a      	adds	r2, r3, #1
 801dc00:	9215      	str	r2, [sp, #84]	; 0x54
 801dc02:	785a      	ldrb	r2, [r3, #1]
 801dc04:	3001      	adds	r0, #1
 801dc06:	2a30      	cmp	r2, #48	; 0x30
 801dc08:	d0f8      	beq.n	801dbfc <_strtod_l+0x1ec>
 801dc0a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801dc0e:	2b08      	cmp	r3, #8
 801dc10:	f200 84c1 	bhi.w	801e596 <_strtod_l+0xb86>
 801dc14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dc16:	9005      	str	r0, [sp, #20]
 801dc18:	2000      	movs	r0, #0
 801dc1a:	930b      	str	r3, [sp, #44]	; 0x2c
 801dc1c:	4606      	mov	r6, r0
 801dc1e:	3a30      	subs	r2, #48	; 0x30
 801dc20:	f100 0301 	add.w	r3, r0, #1
 801dc24:	d014      	beq.n	801dc50 <_strtod_l+0x240>
 801dc26:	9905      	ldr	r1, [sp, #20]
 801dc28:	4419      	add	r1, r3
 801dc2a:	9105      	str	r1, [sp, #20]
 801dc2c:	4633      	mov	r3, r6
 801dc2e:	eb00 0c06 	add.w	ip, r0, r6
 801dc32:	210a      	movs	r1, #10
 801dc34:	4563      	cmp	r3, ip
 801dc36:	d113      	bne.n	801dc60 <_strtod_l+0x250>
 801dc38:	1833      	adds	r3, r6, r0
 801dc3a:	2b08      	cmp	r3, #8
 801dc3c:	f106 0601 	add.w	r6, r6, #1
 801dc40:	4406      	add	r6, r0
 801dc42:	dc1a      	bgt.n	801dc7a <_strtod_l+0x26a>
 801dc44:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dc46:	230a      	movs	r3, #10
 801dc48:	fb03 2301 	mla	r3, r3, r1, r2
 801dc4c:	9309      	str	r3, [sp, #36]	; 0x24
 801dc4e:	2300      	movs	r3, #0
 801dc50:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801dc52:	1c51      	adds	r1, r2, #1
 801dc54:	9115      	str	r1, [sp, #84]	; 0x54
 801dc56:	7852      	ldrb	r2, [r2, #1]
 801dc58:	4618      	mov	r0, r3
 801dc5a:	e7c9      	b.n	801dbf0 <_strtod_l+0x1e0>
 801dc5c:	4658      	mov	r0, fp
 801dc5e:	e7d2      	b.n	801dc06 <_strtod_l+0x1f6>
 801dc60:	2b08      	cmp	r3, #8
 801dc62:	f103 0301 	add.w	r3, r3, #1
 801dc66:	dc03      	bgt.n	801dc70 <_strtod_l+0x260>
 801dc68:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801dc6a:	434f      	muls	r7, r1
 801dc6c:	9709      	str	r7, [sp, #36]	; 0x24
 801dc6e:	e7e1      	b.n	801dc34 <_strtod_l+0x224>
 801dc70:	2b10      	cmp	r3, #16
 801dc72:	bfd8      	it	le
 801dc74:	fb01 fa0a 	mulle.w	sl, r1, sl
 801dc78:	e7dc      	b.n	801dc34 <_strtod_l+0x224>
 801dc7a:	2e10      	cmp	r6, #16
 801dc7c:	bfdc      	itt	le
 801dc7e:	230a      	movle	r3, #10
 801dc80:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801dc84:	e7e3      	b.n	801dc4e <_strtod_l+0x23e>
 801dc86:	2300      	movs	r3, #0
 801dc88:	9305      	str	r3, [sp, #20]
 801dc8a:	2301      	movs	r3, #1
 801dc8c:	e780      	b.n	801db90 <_strtod_l+0x180>
 801dc8e:	f04f 0c00 	mov.w	ip, #0
 801dc92:	1caa      	adds	r2, r5, #2
 801dc94:	9215      	str	r2, [sp, #84]	; 0x54
 801dc96:	78aa      	ldrb	r2, [r5, #2]
 801dc98:	e788      	b.n	801dbac <_strtod_l+0x19c>
 801dc9a:	f04f 0c01 	mov.w	ip, #1
 801dc9e:	e7f8      	b.n	801dc92 <_strtod_l+0x282>
 801dca0:	08023088 	.word	0x08023088
 801dca4:	08023084 	.word	0x08023084
 801dca8:	7ff00000 	.word	0x7ff00000
 801dcac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801dcae:	1c51      	adds	r1, r2, #1
 801dcb0:	9115      	str	r1, [sp, #84]	; 0x54
 801dcb2:	7852      	ldrb	r2, [r2, #1]
 801dcb4:	2a30      	cmp	r2, #48	; 0x30
 801dcb6:	d0f9      	beq.n	801dcac <_strtod_l+0x29c>
 801dcb8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801dcbc:	2908      	cmp	r1, #8
 801dcbe:	f63f af7a 	bhi.w	801dbb6 <_strtod_l+0x1a6>
 801dcc2:	3a30      	subs	r2, #48	; 0x30
 801dcc4:	9208      	str	r2, [sp, #32]
 801dcc6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801dcc8:	920c      	str	r2, [sp, #48]	; 0x30
 801dcca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801dccc:	1c57      	adds	r7, r2, #1
 801dcce:	9715      	str	r7, [sp, #84]	; 0x54
 801dcd0:	7852      	ldrb	r2, [r2, #1]
 801dcd2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801dcd6:	f1be 0f09 	cmp.w	lr, #9
 801dcda:	d938      	bls.n	801dd4e <_strtod_l+0x33e>
 801dcdc:	990c      	ldr	r1, [sp, #48]	; 0x30
 801dcde:	1a7f      	subs	r7, r7, r1
 801dce0:	2f08      	cmp	r7, #8
 801dce2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801dce6:	dc03      	bgt.n	801dcf0 <_strtod_l+0x2e0>
 801dce8:	9908      	ldr	r1, [sp, #32]
 801dcea:	428f      	cmp	r7, r1
 801dcec:	bfa8      	it	ge
 801dcee:	460f      	movge	r7, r1
 801dcf0:	f1bc 0f00 	cmp.w	ip, #0
 801dcf4:	d000      	beq.n	801dcf8 <_strtod_l+0x2e8>
 801dcf6:	427f      	negs	r7, r7
 801dcf8:	2e00      	cmp	r6, #0
 801dcfa:	d14f      	bne.n	801dd9c <_strtod_l+0x38c>
 801dcfc:	9904      	ldr	r1, [sp, #16]
 801dcfe:	4301      	orrs	r1, r0
 801dd00:	f47f aec1 	bne.w	801da86 <_strtod_l+0x76>
 801dd04:	2b00      	cmp	r3, #0
 801dd06:	f47f aedb 	bne.w	801dac0 <_strtod_l+0xb0>
 801dd0a:	2a69      	cmp	r2, #105	; 0x69
 801dd0c:	d029      	beq.n	801dd62 <_strtod_l+0x352>
 801dd0e:	dc26      	bgt.n	801dd5e <_strtod_l+0x34e>
 801dd10:	2a49      	cmp	r2, #73	; 0x49
 801dd12:	d026      	beq.n	801dd62 <_strtod_l+0x352>
 801dd14:	2a4e      	cmp	r2, #78	; 0x4e
 801dd16:	f47f aed3 	bne.w	801dac0 <_strtod_l+0xb0>
 801dd1a:	499b      	ldr	r1, [pc, #620]	; (801df88 <_strtod_l+0x578>)
 801dd1c:	a815      	add	r0, sp, #84	; 0x54
 801dd1e:	f001 ff47 	bl	801fbb0 <__match>
 801dd22:	2800      	cmp	r0, #0
 801dd24:	f43f aecc 	beq.w	801dac0 <_strtod_l+0xb0>
 801dd28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dd2a:	781b      	ldrb	r3, [r3, #0]
 801dd2c:	2b28      	cmp	r3, #40	; 0x28
 801dd2e:	d12f      	bne.n	801dd90 <_strtod_l+0x380>
 801dd30:	4996      	ldr	r1, [pc, #600]	; (801df8c <_strtod_l+0x57c>)
 801dd32:	aa18      	add	r2, sp, #96	; 0x60
 801dd34:	a815      	add	r0, sp, #84	; 0x54
 801dd36:	f001 ff4f 	bl	801fbd8 <__hexnan>
 801dd3a:	2805      	cmp	r0, #5
 801dd3c:	d128      	bne.n	801dd90 <_strtod_l+0x380>
 801dd3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801dd40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801dd44:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801dd48:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801dd4c:	e69b      	b.n	801da86 <_strtod_l+0x76>
 801dd4e:	9f08      	ldr	r7, [sp, #32]
 801dd50:	210a      	movs	r1, #10
 801dd52:	fb01 2107 	mla	r1, r1, r7, r2
 801dd56:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801dd5a:	9208      	str	r2, [sp, #32]
 801dd5c:	e7b5      	b.n	801dcca <_strtod_l+0x2ba>
 801dd5e:	2a6e      	cmp	r2, #110	; 0x6e
 801dd60:	e7d9      	b.n	801dd16 <_strtod_l+0x306>
 801dd62:	498b      	ldr	r1, [pc, #556]	; (801df90 <_strtod_l+0x580>)
 801dd64:	a815      	add	r0, sp, #84	; 0x54
 801dd66:	f001 ff23 	bl	801fbb0 <__match>
 801dd6a:	2800      	cmp	r0, #0
 801dd6c:	f43f aea8 	beq.w	801dac0 <_strtod_l+0xb0>
 801dd70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dd72:	4988      	ldr	r1, [pc, #544]	; (801df94 <_strtod_l+0x584>)
 801dd74:	3b01      	subs	r3, #1
 801dd76:	a815      	add	r0, sp, #84	; 0x54
 801dd78:	9315      	str	r3, [sp, #84]	; 0x54
 801dd7a:	f001 ff19 	bl	801fbb0 <__match>
 801dd7e:	b910      	cbnz	r0, 801dd86 <_strtod_l+0x376>
 801dd80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dd82:	3301      	adds	r3, #1
 801dd84:	9315      	str	r3, [sp, #84]	; 0x54
 801dd86:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801dfa4 <_strtod_l+0x594>
 801dd8a:	f04f 0800 	mov.w	r8, #0
 801dd8e:	e67a      	b.n	801da86 <_strtod_l+0x76>
 801dd90:	4881      	ldr	r0, [pc, #516]	; (801df98 <_strtod_l+0x588>)
 801dd92:	f001 fc5d 	bl	801f650 <nan>
 801dd96:	ec59 8b10 	vmov	r8, r9, d0
 801dd9a:	e674      	b.n	801da86 <_strtod_l+0x76>
 801dd9c:	9b05      	ldr	r3, [sp, #20]
 801dd9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dda0:	1afb      	subs	r3, r7, r3
 801dda2:	f1bb 0f00 	cmp.w	fp, #0
 801dda6:	bf08      	it	eq
 801dda8:	46b3      	moveq	fp, r6
 801ddaa:	2e10      	cmp	r6, #16
 801ddac:	9308      	str	r3, [sp, #32]
 801ddae:	4635      	mov	r5, r6
 801ddb0:	bfa8      	it	ge
 801ddb2:	2510      	movge	r5, #16
 801ddb4:	f7e2 fbbe 	bl	8000534 <__aeabi_ui2d>
 801ddb8:	2e09      	cmp	r6, #9
 801ddba:	4680      	mov	r8, r0
 801ddbc:	4689      	mov	r9, r1
 801ddbe:	dd13      	ble.n	801dde8 <_strtod_l+0x3d8>
 801ddc0:	4b76      	ldr	r3, [pc, #472]	; (801df9c <_strtod_l+0x58c>)
 801ddc2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801ddc6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801ddca:	f7e2 fc2d 	bl	8000628 <__aeabi_dmul>
 801ddce:	4680      	mov	r8, r0
 801ddd0:	4650      	mov	r0, sl
 801ddd2:	4689      	mov	r9, r1
 801ddd4:	f7e2 fbae 	bl	8000534 <__aeabi_ui2d>
 801ddd8:	4602      	mov	r2, r0
 801ddda:	460b      	mov	r3, r1
 801dddc:	4640      	mov	r0, r8
 801ddde:	4649      	mov	r1, r9
 801dde0:	f7e2 fa6c 	bl	80002bc <__adddf3>
 801dde4:	4680      	mov	r8, r0
 801dde6:	4689      	mov	r9, r1
 801dde8:	2e0f      	cmp	r6, #15
 801ddea:	dc38      	bgt.n	801de5e <_strtod_l+0x44e>
 801ddec:	9b08      	ldr	r3, [sp, #32]
 801ddee:	2b00      	cmp	r3, #0
 801ddf0:	f43f ae49 	beq.w	801da86 <_strtod_l+0x76>
 801ddf4:	dd24      	ble.n	801de40 <_strtod_l+0x430>
 801ddf6:	2b16      	cmp	r3, #22
 801ddf8:	dc0b      	bgt.n	801de12 <_strtod_l+0x402>
 801ddfa:	4968      	ldr	r1, [pc, #416]	; (801df9c <_strtod_l+0x58c>)
 801ddfc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801de00:	e9d1 0100 	ldrd	r0, r1, [r1]
 801de04:	4642      	mov	r2, r8
 801de06:	464b      	mov	r3, r9
 801de08:	f7e2 fc0e 	bl	8000628 <__aeabi_dmul>
 801de0c:	4680      	mov	r8, r0
 801de0e:	4689      	mov	r9, r1
 801de10:	e639      	b.n	801da86 <_strtod_l+0x76>
 801de12:	9a08      	ldr	r2, [sp, #32]
 801de14:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 801de18:	4293      	cmp	r3, r2
 801de1a:	db20      	blt.n	801de5e <_strtod_l+0x44e>
 801de1c:	4c5f      	ldr	r4, [pc, #380]	; (801df9c <_strtod_l+0x58c>)
 801de1e:	f1c6 060f 	rsb	r6, r6, #15
 801de22:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801de26:	4642      	mov	r2, r8
 801de28:	464b      	mov	r3, r9
 801de2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801de2e:	f7e2 fbfb 	bl	8000628 <__aeabi_dmul>
 801de32:	9b08      	ldr	r3, [sp, #32]
 801de34:	1b9e      	subs	r6, r3, r6
 801de36:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801de3a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801de3e:	e7e3      	b.n	801de08 <_strtod_l+0x3f8>
 801de40:	9b08      	ldr	r3, [sp, #32]
 801de42:	3316      	adds	r3, #22
 801de44:	db0b      	blt.n	801de5e <_strtod_l+0x44e>
 801de46:	9b05      	ldr	r3, [sp, #20]
 801de48:	1bdf      	subs	r7, r3, r7
 801de4a:	4b54      	ldr	r3, [pc, #336]	; (801df9c <_strtod_l+0x58c>)
 801de4c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801de50:	e9d7 2300 	ldrd	r2, r3, [r7]
 801de54:	4640      	mov	r0, r8
 801de56:	4649      	mov	r1, r9
 801de58:	f7e2 fd10 	bl	800087c <__aeabi_ddiv>
 801de5c:	e7d6      	b.n	801de0c <_strtod_l+0x3fc>
 801de5e:	9b08      	ldr	r3, [sp, #32]
 801de60:	1b75      	subs	r5, r6, r5
 801de62:	441d      	add	r5, r3
 801de64:	2d00      	cmp	r5, #0
 801de66:	dd70      	ble.n	801df4a <_strtod_l+0x53a>
 801de68:	f015 030f 	ands.w	r3, r5, #15
 801de6c:	d00a      	beq.n	801de84 <_strtod_l+0x474>
 801de6e:	494b      	ldr	r1, [pc, #300]	; (801df9c <_strtod_l+0x58c>)
 801de70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801de74:	4642      	mov	r2, r8
 801de76:	464b      	mov	r3, r9
 801de78:	e9d1 0100 	ldrd	r0, r1, [r1]
 801de7c:	f7e2 fbd4 	bl	8000628 <__aeabi_dmul>
 801de80:	4680      	mov	r8, r0
 801de82:	4689      	mov	r9, r1
 801de84:	f035 050f 	bics.w	r5, r5, #15
 801de88:	d04d      	beq.n	801df26 <_strtod_l+0x516>
 801de8a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801de8e:	dd22      	ble.n	801ded6 <_strtod_l+0x4c6>
 801de90:	2500      	movs	r5, #0
 801de92:	46ab      	mov	fp, r5
 801de94:	9509      	str	r5, [sp, #36]	; 0x24
 801de96:	9505      	str	r5, [sp, #20]
 801de98:	2322      	movs	r3, #34	; 0x22
 801de9a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801dfa4 <_strtod_l+0x594>
 801de9e:	6023      	str	r3, [r4, #0]
 801dea0:	f04f 0800 	mov.w	r8, #0
 801dea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dea6:	2b00      	cmp	r3, #0
 801dea8:	f43f aded 	beq.w	801da86 <_strtod_l+0x76>
 801deac:	9916      	ldr	r1, [sp, #88]	; 0x58
 801deae:	4620      	mov	r0, r4
 801deb0:	f7ff f924 	bl	801d0fc <_Bfree>
 801deb4:	9905      	ldr	r1, [sp, #20]
 801deb6:	4620      	mov	r0, r4
 801deb8:	f7ff f920 	bl	801d0fc <_Bfree>
 801debc:	4659      	mov	r1, fp
 801debe:	4620      	mov	r0, r4
 801dec0:	f7ff f91c 	bl	801d0fc <_Bfree>
 801dec4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dec6:	4620      	mov	r0, r4
 801dec8:	f7ff f918 	bl	801d0fc <_Bfree>
 801decc:	4629      	mov	r1, r5
 801dece:	4620      	mov	r0, r4
 801ded0:	f7ff f914 	bl	801d0fc <_Bfree>
 801ded4:	e5d7      	b.n	801da86 <_strtod_l+0x76>
 801ded6:	4b32      	ldr	r3, [pc, #200]	; (801dfa0 <_strtod_l+0x590>)
 801ded8:	9304      	str	r3, [sp, #16]
 801deda:	2300      	movs	r3, #0
 801dedc:	112d      	asrs	r5, r5, #4
 801dede:	4640      	mov	r0, r8
 801dee0:	4649      	mov	r1, r9
 801dee2:	469a      	mov	sl, r3
 801dee4:	2d01      	cmp	r5, #1
 801dee6:	dc21      	bgt.n	801df2c <_strtod_l+0x51c>
 801dee8:	b10b      	cbz	r3, 801deee <_strtod_l+0x4de>
 801deea:	4680      	mov	r8, r0
 801deec:	4689      	mov	r9, r1
 801deee:	492c      	ldr	r1, [pc, #176]	; (801dfa0 <_strtod_l+0x590>)
 801def0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801def4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801def8:	4642      	mov	r2, r8
 801defa:	464b      	mov	r3, r9
 801defc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801df00:	f7e2 fb92 	bl	8000628 <__aeabi_dmul>
 801df04:	4b27      	ldr	r3, [pc, #156]	; (801dfa4 <_strtod_l+0x594>)
 801df06:	460a      	mov	r2, r1
 801df08:	400b      	ands	r3, r1
 801df0a:	4927      	ldr	r1, [pc, #156]	; (801dfa8 <_strtod_l+0x598>)
 801df0c:	428b      	cmp	r3, r1
 801df0e:	4680      	mov	r8, r0
 801df10:	d8be      	bhi.n	801de90 <_strtod_l+0x480>
 801df12:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801df16:	428b      	cmp	r3, r1
 801df18:	bf86      	itte	hi
 801df1a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801dfac <_strtod_l+0x59c>
 801df1e:	f04f 38ff 	movhi.w	r8, #4294967295
 801df22:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801df26:	2300      	movs	r3, #0
 801df28:	9304      	str	r3, [sp, #16]
 801df2a:	e07b      	b.n	801e024 <_strtod_l+0x614>
 801df2c:	07ea      	lsls	r2, r5, #31
 801df2e:	d505      	bpl.n	801df3c <_strtod_l+0x52c>
 801df30:	9b04      	ldr	r3, [sp, #16]
 801df32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df36:	f7e2 fb77 	bl	8000628 <__aeabi_dmul>
 801df3a:	2301      	movs	r3, #1
 801df3c:	9a04      	ldr	r2, [sp, #16]
 801df3e:	3208      	adds	r2, #8
 801df40:	f10a 0a01 	add.w	sl, sl, #1
 801df44:	106d      	asrs	r5, r5, #1
 801df46:	9204      	str	r2, [sp, #16]
 801df48:	e7cc      	b.n	801dee4 <_strtod_l+0x4d4>
 801df4a:	d0ec      	beq.n	801df26 <_strtod_l+0x516>
 801df4c:	426d      	negs	r5, r5
 801df4e:	f015 020f 	ands.w	r2, r5, #15
 801df52:	d00a      	beq.n	801df6a <_strtod_l+0x55a>
 801df54:	4b11      	ldr	r3, [pc, #68]	; (801df9c <_strtod_l+0x58c>)
 801df56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801df5a:	4640      	mov	r0, r8
 801df5c:	4649      	mov	r1, r9
 801df5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df62:	f7e2 fc8b 	bl	800087c <__aeabi_ddiv>
 801df66:	4680      	mov	r8, r0
 801df68:	4689      	mov	r9, r1
 801df6a:	112d      	asrs	r5, r5, #4
 801df6c:	d0db      	beq.n	801df26 <_strtod_l+0x516>
 801df6e:	2d1f      	cmp	r5, #31
 801df70:	dd1e      	ble.n	801dfb0 <_strtod_l+0x5a0>
 801df72:	2500      	movs	r5, #0
 801df74:	46ab      	mov	fp, r5
 801df76:	9509      	str	r5, [sp, #36]	; 0x24
 801df78:	9505      	str	r5, [sp, #20]
 801df7a:	2322      	movs	r3, #34	; 0x22
 801df7c:	f04f 0800 	mov.w	r8, #0
 801df80:	f04f 0900 	mov.w	r9, #0
 801df84:	6023      	str	r3, [r4, #0]
 801df86:	e78d      	b.n	801dea4 <_strtod_l+0x494>
 801df88:	08022e19 	.word	0x08022e19
 801df8c:	0802309c 	.word	0x0802309c
 801df90:	08022e11 	.word	0x08022e11
 801df94:	08022eb7 	.word	0x08022eb7
 801df98:	08022e0b 	.word	0x08022e0b
 801df9c:	08022fb0 	.word	0x08022fb0
 801dfa0:	08022f88 	.word	0x08022f88
 801dfa4:	7ff00000 	.word	0x7ff00000
 801dfa8:	7ca00000 	.word	0x7ca00000
 801dfac:	7fefffff 	.word	0x7fefffff
 801dfb0:	f015 0310 	ands.w	r3, r5, #16
 801dfb4:	bf18      	it	ne
 801dfb6:	236a      	movne	r3, #106	; 0x6a
 801dfb8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801e35c <_strtod_l+0x94c>
 801dfbc:	9304      	str	r3, [sp, #16]
 801dfbe:	4640      	mov	r0, r8
 801dfc0:	4649      	mov	r1, r9
 801dfc2:	2300      	movs	r3, #0
 801dfc4:	07ea      	lsls	r2, r5, #31
 801dfc6:	d504      	bpl.n	801dfd2 <_strtod_l+0x5c2>
 801dfc8:	e9da 2300 	ldrd	r2, r3, [sl]
 801dfcc:	f7e2 fb2c 	bl	8000628 <__aeabi_dmul>
 801dfd0:	2301      	movs	r3, #1
 801dfd2:	106d      	asrs	r5, r5, #1
 801dfd4:	f10a 0a08 	add.w	sl, sl, #8
 801dfd8:	d1f4      	bne.n	801dfc4 <_strtod_l+0x5b4>
 801dfda:	b10b      	cbz	r3, 801dfe0 <_strtod_l+0x5d0>
 801dfdc:	4680      	mov	r8, r0
 801dfde:	4689      	mov	r9, r1
 801dfe0:	9b04      	ldr	r3, [sp, #16]
 801dfe2:	b1bb      	cbz	r3, 801e014 <_strtod_l+0x604>
 801dfe4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801dfe8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801dfec:	2b00      	cmp	r3, #0
 801dfee:	4649      	mov	r1, r9
 801dff0:	dd10      	ble.n	801e014 <_strtod_l+0x604>
 801dff2:	2b1f      	cmp	r3, #31
 801dff4:	f340 811e 	ble.w	801e234 <_strtod_l+0x824>
 801dff8:	2b34      	cmp	r3, #52	; 0x34
 801dffa:	bfde      	ittt	le
 801dffc:	f04f 33ff 	movle.w	r3, #4294967295
 801e000:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801e004:	4093      	lslle	r3, r2
 801e006:	f04f 0800 	mov.w	r8, #0
 801e00a:	bfcc      	ite	gt
 801e00c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801e010:	ea03 0901 	andle.w	r9, r3, r1
 801e014:	2200      	movs	r2, #0
 801e016:	2300      	movs	r3, #0
 801e018:	4640      	mov	r0, r8
 801e01a:	4649      	mov	r1, r9
 801e01c:	f7e2 fd6c 	bl	8000af8 <__aeabi_dcmpeq>
 801e020:	2800      	cmp	r0, #0
 801e022:	d1a6      	bne.n	801df72 <_strtod_l+0x562>
 801e024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e026:	9300      	str	r3, [sp, #0]
 801e028:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e02a:	4633      	mov	r3, r6
 801e02c:	465a      	mov	r2, fp
 801e02e:	4620      	mov	r0, r4
 801e030:	f7ff f8cc 	bl	801d1cc <__s2b>
 801e034:	9009      	str	r0, [sp, #36]	; 0x24
 801e036:	2800      	cmp	r0, #0
 801e038:	f43f af2a 	beq.w	801de90 <_strtod_l+0x480>
 801e03c:	9a08      	ldr	r2, [sp, #32]
 801e03e:	9b05      	ldr	r3, [sp, #20]
 801e040:	2a00      	cmp	r2, #0
 801e042:	eba3 0307 	sub.w	r3, r3, r7
 801e046:	bfa8      	it	ge
 801e048:	2300      	movge	r3, #0
 801e04a:	930c      	str	r3, [sp, #48]	; 0x30
 801e04c:	2500      	movs	r5, #0
 801e04e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801e052:	9312      	str	r3, [sp, #72]	; 0x48
 801e054:	46ab      	mov	fp, r5
 801e056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e058:	4620      	mov	r0, r4
 801e05a:	6859      	ldr	r1, [r3, #4]
 801e05c:	f7ff f80e 	bl	801d07c <_Balloc>
 801e060:	9005      	str	r0, [sp, #20]
 801e062:	2800      	cmp	r0, #0
 801e064:	f43f af18 	beq.w	801de98 <_strtod_l+0x488>
 801e068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e06a:	691a      	ldr	r2, [r3, #16]
 801e06c:	3202      	adds	r2, #2
 801e06e:	f103 010c 	add.w	r1, r3, #12
 801e072:	0092      	lsls	r2, r2, #2
 801e074:	300c      	adds	r0, #12
 801e076:	f7fe f91c 	bl	801c2b2 <memcpy>
 801e07a:	ec49 8b10 	vmov	d0, r8, r9
 801e07e:	aa18      	add	r2, sp, #96	; 0x60
 801e080:	a917      	add	r1, sp, #92	; 0x5c
 801e082:	4620      	mov	r0, r4
 801e084:	f7ff fbd6 	bl	801d834 <__d2b>
 801e088:	ec49 8b18 	vmov	d8, r8, r9
 801e08c:	9016      	str	r0, [sp, #88]	; 0x58
 801e08e:	2800      	cmp	r0, #0
 801e090:	f43f af02 	beq.w	801de98 <_strtod_l+0x488>
 801e094:	2101      	movs	r1, #1
 801e096:	4620      	mov	r0, r4
 801e098:	f7ff f930 	bl	801d2fc <__i2b>
 801e09c:	4683      	mov	fp, r0
 801e09e:	2800      	cmp	r0, #0
 801e0a0:	f43f aefa 	beq.w	801de98 <_strtod_l+0x488>
 801e0a4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801e0a6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e0a8:	2e00      	cmp	r6, #0
 801e0aa:	bfab      	itete	ge
 801e0ac:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801e0ae:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 801e0b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801e0b2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801e0b6:	bfac      	ite	ge
 801e0b8:	eb06 0a03 	addge.w	sl, r6, r3
 801e0bc:	1b9f      	sublt	r7, r3, r6
 801e0be:	9b04      	ldr	r3, [sp, #16]
 801e0c0:	1af6      	subs	r6, r6, r3
 801e0c2:	4416      	add	r6, r2
 801e0c4:	4ba0      	ldr	r3, [pc, #640]	; (801e348 <_strtod_l+0x938>)
 801e0c6:	3e01      	subs	r6, #1
 801e0c8:	429e      	cmp	r6, r3
 801e0ca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801e0ce:	f280 80c4 	bge.w	801e25a <_strtod_l+0x84a>
 801e0d2:	1b9b      	subs	r3, r3, r6
 801e0d4:	2b1f      	cmp	r3, #31
 801e0d6:	eba2 0203 	sub.w	r2, r2, r3
 801e0da:	f04f 0101 	mov.w	r1, #1
 801e0de:	f300 80b0 	bgt.w	801e242 <_strtod_l+0x832>
 801e0e2:	fa01 f303 	lsl.w	r3, r1, r3
 801e0e6:	930e      	str	r3, [sp, #56]	; 0x38
 801e0e8:	2300      	movs	r3, #0
 801e0ea:	930d      	str	r3, [sp, #52]	; 0x34
 801e0ec:	eb0a 0602 	add.w	r6, sl, r2
 801e0f0:	9b04      	ldr	r3, [sp, #16]
 801e0f2:	45b2      	cmp	sl, r6
 801e0f4:	4417      	add	r7, r2
 801e0f6:	441f      	add	r7, r3
 801e0f8:	4653      	mov	r3, sl
 801e0fa:	bfa8      	it	ge
 801e0fc:	4633      	movge	r3, r6
 801e0fe:	42bb      	cmp	r3, r7
 801e100:	bfa8      	it	ge
 801e102:	463b      	movge	r3, r7
 801e104:	2b00      	cmp	r3, #0
 801e106:	bfc2      	ittt	gt
 801e108:	1af6      	subgt	r6, r6, r3
 801e10a:	1aff      	subgt	r7, r7, r3
 801e10c:	ebaa 0a03 	subgt.w	sl, sl, r3
 801e110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e112:	2b00      	cmp	r3, #0
 801e114:	dd17      	ble.n	801e146 <_strtod_l+0x736>
 801e116:	4659      	mov	r1, fp
 801e118:	461a      	mov	r2, r3
 801e11a:	4620      	mov	r0, r4
 801e11c:	f7ff f9ae 	bl	801d47c <__pow5mult>
 801e120:	4683      	mov	fp, r0
 801e122:	2800      	cmp	r0, #0
 801e124:	f43f aeb8 	beq.w	801de98 <_strtod_l+0x488>
 801e128:	4601      	mov	r1, r0
 801e12a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801e12c:	4620      	mov	r0, r4
 801e12e:	f7ff f8fb 	bl	801d328 <__multiply>
 801e132:	900b      	str	r0, [sp, #44]	; 0x2c
 801e134:	2800      	cmp	r0, #0
 801e136:	f43f aeaf 	beq.w	801de98 <_strtod_l+0x488>
 801e13a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e13c:	4620      	mov	r0, r4
 801e13e:	f7fe ffdd 	bl	801d0fc <_Bfree>
 801e142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e144:	9316      	str	r3, [sp, #88]	; 0x58
 801e146:	2e00      	cmp	r6, #0
 801e148:	f300 808c 	bgt.w	801e264 <_strtod_l+0x854>
 801e14c:	9b08      	ldr	r3, [sp, #32]
 801e14e:	2b00      	cmp	r3, #0
 801e150:	dd08      	ble.n	801e164 <_strtod_l+0x754>
 801e152:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e154:	9905      	ldr	r1, [sp, #20]
 801e156:	4620      	mov	r0, r4
 801e158:	f7ff f990 	bl	801d47c <__pow5mult>
 801e15c:	9005      	str	r0, [sp, #20]
 801e15e:	2800      	cmp	r0, #0
 801e160:	f43f ae9a 	beq.w	801de98 <_strtod_l+0x488>
 801e164:	2f00      	cmp	r7, #0
 801e166:	dd08      	ble.n	801e17a <_strtod_l+0x76a>
 801e168:	9905      	ldr	r1, [sp, #20]
 801e16a:	463a      	mov	r2, r7
 801e16c:	4620      	mov	r0, r4
 801e16e:	f7ff f9df 	bl	801d530 <__lshift>
 801e172:	9005      	str	r0, [sp, #20]
 801e174:	2800      	cmp	r0, #0
 801e176:	f43f ae8f 	beq.w	801de98 <_strtod_l+0x488>
 801e17a:	f1ba 0f00 	cmp.w	sl, #0
 801e17e:	dd08      	ble.n	801e192 <_strtod_l+0x782>
 801e180:	4659      	mov	r1, fp
 801e182:	4652      	mov	r2, sl
 801e184:	4620      	mov	r0, r4
 801e186:	f7ff f9d3 	bl	801d530 <__lshift>
 801e18a:	4683      	mov	fp, r0
 801e18c:	2800      	cmp	r0, #0
 801e18e:	f43f ae83 	beq.w	801de98 <_strtod_l+0x488>
 801e192:	9a05      	ldr	r2, [sp, #20]
 801e194:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e196:	4620      	mov	r0, r4
 801e198:	f7ff fa52 	bl	801d640 <__mdiff>
 801e19c:	4605      	mov	r5, r0
 801e19e:	2800      	cmp	r0, #0
 801e1a0:	f43f ae7a 	beq.w	801de98 <_strtod_l+0x488>
 801e1a4:	68c3      	ldr	r3, [r0, #12]
 801e1a6:	930b      	str	r3, [sp, #44]	; 0x2c
 801e1a8:	2300      	movs	r3, #0
 801e1aa:	60c3      	str	r3, [r0, #12]
 801e1ac:	4659      	mov	r1, fp
 801e1ae:	f7ff fa2b 	bl	801d608 <__mcmp>
 801e1b2:	2800      	cmp	r0, #0
 801e1b4:	da60      	bge.n	801e278 <_strtod_l+0x868>
 801e1b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e1b8:	ea53 0308 	orrs.w	r3, r3, r8
 801e1bc:	f040 8084 	bne.w	801e2c8 <_strtod_l+0x8b8>
 801e1c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e1c4:	2b00      	cmp	r3, #0
 801e1c6:	d17f      	bne.n	801e2c8 <_strtod_l+0x8b8>
 801e1c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e1cc:	0d1b      	lsrs	r3, r3, #20
 801e1ce:	051b      	lsls	r3, r3, #20
 801e1d0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801e1d4:	d978      	bls.n	801e2c8 <_strtod_l+0x8b8>
 801e1d6:	696b      	ldr	r3, [r5, #20]
 801e1d8:	b913      	cbnz	r3, 801e1e0 <_strtod_l+0x7d0>
 801e1da:	692b      	ldr	r3, [r5, #16]
 801e1dc:	2b01      	cmp	r3, #1
 801e1de:	dd73      	ble.n	801e2c8 <_strtod_l+0x8b8>
 801e1e0:	4629      	mov	r1, r5
 801e1e2:	2201      	movs	r2, #1
 801e1e4:	4620      	mov	r0, r4
 801e1e6:	f7ff f9a3 	bl	801d530 <__lshift>
 801e1ea:	4659      	mov	r1, fp
 801e1ec:	4605      	mov	r5, r0
 801e1ee:	f7ff fa0b 	bl	801d608 <__mcmp>
 801e1f2:	2800      	cmp	r0, #0
 801e1f4:	dd68      	ble.n	801e2c8 <_strtod_l+0x8b8>
 801e1f6:	9904      	ldr	r1, [sp, #16]
 801e1f8:	4a54      	ldr	r2, [pc, #336]	; (801e34c <_strtod_l+0x93c>)
 801e1fa:	464b      	mov	r3, r9
 801e1fc:	2900      	cmp	r1, #0
 801e1fe:	f000 8084 	beq.w	801e30a <_strtod_l+0x8fa>
 801e202:	ea02 0109 	and.w	r1, r2, r9
 801e206:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801e20a:	dc7e      	bgt.n	801e30a <_strtod_l+0x8fa>
 801e20c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801e210:	f77f aeb3 	ble.w	801df7a <_strtod_l+0x56a>
 801e214:	4b4e      	ldr	r3, [pc, #312]	; (801e350 <_strtod_l+0x940>)
 801e216:	4640      	mov	r0, r8
 801e218:	4649      	mov	r1, r9
 801e21a:	2200      	movs	r2, #0
 801e21c:	f7e2 fa04 	bl	8000628 <__aeabi_dmul>
 801e220:	4b4a      	ldr	r3, [pc, #296]	; (801e34c <_strtod_l+0x93c>)
 801e222:	400b      	ands	r3, r1
 801e224:	4680      	mov	r8, r0
 801e226:	4689      	mov	r9, r1
 801e228:	2b00      	cmp	r3, #0
 801e22a:	f47f ae3f 	bne.w	801deac <_strtod_l+0x49c>
 801e22e:	2322      	movs	r3, #34	; 0x22
 801e230:	6023      	str	r3, [r4, #0]
 801e232:	e63b      	b.n	801deac <_strtod_l+0x49c>
 801e234:	f04f 32ff 	mov.w	r2, #4294967295
 801e238:	fa02 f303 	lsl.w	r3, r2, r3
 801e23c:	ea03 0808 	and.w	r8, r3, r8
 801e240:	e6e8      	b.n	801e014 <_strtod_l+0x604>
 801e242:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801e246:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801e24a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801e24e:	36e2      	adds	r6, #226	; 0xe2
 801e250:	fa01 f306 	lsl.w	r3, r1, r6
 801e254:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 801e258:	e748      	b.n	801e0ec <_strtod_l+0x6dc>
 801e25a:	2100      	movs	r1, #0
 801e25c:	2301      	movs	r3, #1
 801e25e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801e262:	e743      	b.n	801e0ec <_strtod_l+0x6dc>
 801e264:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e266:	4632      	mov	r2, r6
 801e268:	4620      	mov	r0, r4
 801e26a:	f7ff f961 	bl	801d530 <__lshift>
 801e26e:	9016      	str	r0, [sp, #88]	; 0x58
 801e270:	2800      	cmp	r0, #0
 801e272:	f47f af6b 	bne.w	801e14c <_strtod_l+0x73c>
 801e276:	e60f      	b.n	801de98 <_strtod_l+0x488>
 801e278:	46ca      	mov	sl, r9
 801e27a:	d171      	bne.n	801e360 <_strtod_l+0x950>
 801e27c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e27e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e282:	b352      	cbz	r2, 801e2da <_strtod_l+0x8ca>
 801e284:	4a33      	ldr	r2, [pc, #204]	; (801e354 <_strtod_l+0x944>)
 801e286:	4293      	cmp	r3, r2
 801e288:	d12a      	bne.n	801e2e0 <_strtod_l+0x8d0>
 801e28a:	9b04      	ldr	r3, [sp, #16]
 801e28c:	4641      	mov	r1, r8
 801e28e:	b1fb      	cbz	r3, 801e2d0 <_strtod_l+0x8c0>
 801e290:	4b2e      	ldr	r3, [pc, #184]	; (801e34c <_strtod_l+0x93c>)
 801e292:	ea09 0303 	and.w	r3, r9, r3
 801e296:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801e29a:	f04f 32ff 	mov.w	r2, #4294967295
 801e29e:	d81a      	bhi.n	801e2d6 <_strtod_l+0x8c6>
 801e2a0:	0d1b      	lsrs	r3, r3, #20
 801e2a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801e2a6:	fa02 f303 	lsl.w	r3, r2, r3
 801e2aa:	4299      	cmp	r1, r3
 801e2ac:	d118      	bne.n	801e2e0 <_strtod_l+0x8d0>
 801e2ae:	4b2a      	ldr	r3, [pc, #168]	; (801e358 <_strtod_l+0x948>)
 801e2b0:	459a      	cmp	sl, r3
 801e2b2:	d102      	bne.n	801e2ba <_strtod_l+0x8aa>
 801e2b4:	3101      	adds	r1, #1
 801e2b6:	f43f adef 	beq.w	801de98 <_strtod_l+0x488>
 801e2ba:	4b24      	ldr	r3, [pc, #144]	; (801e34c <_strtod_l+0x93c>)
 801e2bc:	ea0a 0303 	and.w	r3, sl, r3
 801e2c0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801e2c4:	f04f 0800 	mov.w	r8, #0
 801e2c8:	9b04      	ldr	r3, [sp, #16]
 801e2ca:	2b00      	cmp	r3, #0
 801e2cc:	d1a2      	bne.n	801e214 <_strtod_l+0x804>
 801e2ce:	e5ed      	b.n	801deac <_strtod_l+0x49c>
 801e2d0:	f04f 33ff 	mov.w	r3, #4294967295
 801e2d4:	e7e9      	b.n	801e2aa <_strtod_l+0x89a>
 801e2d6:	4613      	mov	r3, r2
 801e2d8:	e7e7      	b.n	801e2aa <_strtod_l+0x89a>
 801e2da:	ea53 0308 	orrs.w	r3, r3, r8
 801e2de:	d08a      	beq.n	801e1f6 <_strtod_l+0x7e6>
 801e2e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e2e2:	b1e3      	cbz	r3, 801e31e <_strtod_l+0x90e>
 801e2e4:	ea13 0f0a 	tst.w	r3, sl
 801e2e8:	d0ee      	beq.n	801e2c8 <_strtod_l+0x8b8>
 801e2ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e2ec:	9a04      	ldr	r2, [sp, #16]
 801e2ee:	4640      	mov	r0, r8
 801e2f0:	4649      	mov	r1, r9
 801e2f2:	b1c3      	cbz	r3, 801e326 <_strtod_l+0x916>
 801e2f4:	f7ff fb6f 	bl	801d9d6 <sulp>
 801e2f8:	4602      	mov	r2, r0
 801e2fa:	460b      	mov	r3, r1
 801e2fc:	ec51 0b18 	vmov	r0, r1, d8
 801e300:	f7e1 ffdc 	bl	80002bc <__adddf3>
 801e304:	4680      	mov	r8, r0
 801e306:	4689      	mov	r9, r1
 801e308:	e7de      	b.n	801e2c8 <_strtod_l+0x8b8>
 801e30a:	4013      	ands	r3, r2
 801e30c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801e310:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801e314:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801e318:	f04f 38ff 	mov.w	r8, #4294967295
 801e31c:	e7d4      	b.n	801e2c8 <_strtod_l+0x8b8>
 801e31e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e320:	ea13 0f08 	tst.w	r3, r8
 801e324:	e7e0      	b.n	801e2e8 <_strtod_l+0x8d8>
 801e326:	f7ff fb56 	bl	801d9d6 <sulp>
 801e32a:	4602      	mov	r2, r0
 801e32c:	460b      	mov	r3, r1
 801e32e:	ec51 0b18 	vmov	r0, r1, d8
 801e332:	f7e1 ffc1 	bl	80002b8 <__aeabi_dsub>
 801e336:	2200      	movs	r2, #0
 801e338:	2300      	movs	r3, #0
 801e33a:	4680      	mov	r8, r0
 801e33c:	4689      	mov	r9, r1
 801e33e:	f7e2 fbdb 	bl	8000af8 <__aeabi_dcmpeq>
 801e342:	2800      	cmp	r0, #0
 801e344:	d0c0      	beq.n	801e2c8 <_strtod_l+0x8b8>
 801e346:	e618      	b.n	801df7a <_strtod_l+0x56a>
 801e348:	fffffc02 	.word	0xfffffc02
 801e34c:	7ff00000 	.word	0x7ff00000
 801e350:	39500000 	.word	0x39500000
 801e354:	000fffff 	.word	0x000fffff
 801e358:	7fefffff 	.word	0x7fefffff
 801e35c:	080230b0 	.word	0x080230b0
 801e360:	4659      	mov	r1, fp
 801e362:	4628      	mov	r0, r5
 801e364:	f7ff fac0 	bl	801d8e8 <__ratio>
 801e368:	ec57 6b10 	vmov	r6, r7, d0
 801e36c:	ee10 0a10 	vmov	r0, s0
 801e370:	2200      	movs	r2, #0
 801e372:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801e376:	4639      	mov	r1, r7
 801e378:	f7e2 fbd2 	bl	8000b20 <__aeabi_dcmple>
 801e37c:	2800      	cmp	r0, #0
 801e37e:	d071      	beq.n	801e464 <_strtod_l+0xa54>
 801e380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e382:	2b00      	cmp	r3, #0
 801e384:	d17c      	bne.n	801e480 <_strtod_l+0xa70>
 801e386:	f1b8 0f00 	cmp.w	r8, #0
 801e38a:	d15a      	bne.n	801e442 <_strtod_l+0xa32>
 801e38c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e390:	2b00      	cmp	r3, #0
 801e392:	d15d      	bne.n	801e450 <_strtod_l+0xa40>
 801e394:	4b90      	ldr	r3, [pc, #576]	; (801e5d8 <_strtod_l+0xbc8>)
 801e396:	2200      	movs	r2, #0
 801e398:	4630      	mov	r0, r6
 801e39a:	4639      	mov	r1, r7
 801e39c:	f7e2 fbb6 	bl	8000b0c <__aeabi_dcmplt>
 801e3a0:	2800      	cmp	r0, #0
 801e3a2:	d15c      	bne.n	801e45e <_strtod_l+0xa4e>
 801e3a4:	4630      	mov	r0, r6
 801e3a6:	4639      	mov	r1, r7
 801e3a8:	4b8c      	ldr	r3, [pc, #560]	; (801e5dc <_strtod_l+0xbcc>)
 801e3aa:	2200      	movs	r2, #0
 801e3ac:	f7e2 f93c 	bl	8000628 <__aeabi_dmul>
 801e3b0:	4606      	mov	r6, r0
 801e3b2:	460f      	mov	r7, r1
 801e3b4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801e3b8:	9606      	str	r6, [sp, #24]
 801e3ba:	9307      	str	r3, [sp, #28]
 801e3bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e3c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801e3c4:	4b86      	ldr	r3, [pc, #536]	; (801e5e0 <_strtod_l+0xbd0>)
 801e3c6:	ea0a 0303 	and.w	r3, sl, r3
 801e3ca:	930d      	str	r3, [sp, #52]	; 0x34
 801e3cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e3ce:	4b85      	ldr	r3, [pc, #532]	; (801e5e4 <_strtod_l+0xbd4>)
 801e3d0:	429a      	cmp	r2, r3
 801e3d2:	f040 8090 	bne.w	801e4f6 <_strtod_l+0xae6>
 801e3d6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801e3da:	ec49 8b10 	vmov	d0, r8, r9
 801e3de:	f7ff f9b9 	bl	801d754 <__ulp>
 801e3e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e3e6:	ec51 0b10 	vmov	r0, r1, d0
 801e3ea:	f7e2 f91d 	bl	8000628 <__aeabi_dmul>
 801e3ee:	4642      	mov	r2, r8
 801e3f0:	464b      	mov	r3, r9
 801e3f2:	f7e1 ff63 	bl	80002bc <__adddf3>
 801e3f6:	460b      	mov	r3, r1
 801e3f8:	4979      	ldr	r1, [pc, #484]	; (801e5e0 <_strtod_l+0xbd0>)
 801e3fa:	4a7b      	ldr	r2, [pc, #492]	; (801e5e8 <_strtod_l+0xbd8>)
 801e3fc:	4019      	ands	r1, r3
 801e3fe:	4291      	cmp	r1, r2
 801e400:	4680      	mov	r8, r0
 801e402:	d944      	bls.n	801e48e <_strtod_l+0xa7e>
 801e404:	ee18 2a90 	vmov	r2, s17
 801e408:	4b78      	ldr	r3, [pc, #480]	; (801e5ec <_strtod_l+0xbdc>)
 801e40a:	429a      	cmp	r2, r3
 801e40c:	d104      	bne.n	801e418 <_strtod_l+0xa08>
 801e40e:	ee18 3a10 	vmov	r3, s16
 801e412:	3301      	adds	r3, #1
 801e414:	f43f ad40 	beq.w	801de98 <_strtod_l+0x488>
 801e418:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801e5ec <_strtod_l+0xbdc>
 801e41c:	f04f 38ff 	mov.w	r8, #4294967295
 801e420:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e422:	4620      	mov	r0, r4
 801e424:	f7fe fe6a 	bl	801d0fc <_Bfree>
 801e428:	9905      	ldr	r1, [sp, #20]
 801e42a:	4620      	mov	r0, r4
 801e42c:	f7fe fe66 	bl	801d0fc <_Bfree>
 801e430:	4659      	mov	r1, fp
 801e432:	4620      	mov	r0, r4
 801e434:	f7fe fe62 	bl	801d0fc <_Bfree>
 801e438:	4629      	mov	r1, r5
 801e43a:	4620      	mov	r0, r4
 801e43c:	f7fe fe5e 	bl	801d0fc <_Bfree>
 801e440:	e609      	b.n	801e056 <_strtod_l+0x646>
 801e442:	f1b8 0f01 	cmp.w	r8, #1
 801e446:	d103      	bne.n	801e450 <_strtod_l+0xa40>
 801e448:	f1b9 0f00 	cmp.w	r9, #0
 801e44c:	f43f ad95 	beq.w	801df7a <_strtod_l+0x56a>
 801e450:	ed9f 7b55 	vldr	d7, [pc, #340]	; 801e5a8 <_strtod_l+0xb98>
 801e454:	4f60      	ldr	r7, [pc, #384]	; (801e5d8 <_strtod_l+0xbc8>)
 801e456:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e45a:	2600      	movs	r6, #0
 801e45c:	e7ae      	b.n	801e3bc <_strtod_l+0x9ac>
 801e45e:	4f5f      	ldr	r7, [pc, #380]	; (801e5dc <_strtod_l+0xbcc>)
 801e460:	2600      	movs	r6, #0
 801e462:	e7a7      	b.n	801e3b4 <_strtod_l+0x9a4>
 801e464:	4b5d      	ldr	r3, [pc, #372]	; (801e5dc <_strtod_l+0xbcc>)
 801e466:	4630      	mov	r0, r6
 801e468:	4639      	mov	r1, r7
 801e46a:	2200      	movs	r2, #0
 801e46c:	f7e2 f8dc 	bl	8000628 <__aeabi_dmul>
 801e470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e472:	4606      	mov	r6, r0
 801e474:	460f      	mov	r7, r1
 801e476:	2b00      	cmp	r3, #0
 801e478:	d09c      	beq.n	801e3b4 <_strtod_l+0x9a4>
 801e47a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801e47e:	e79d      	b.n	801e3bc <_strtod_l+0x9ac>
 801e480:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 801e5b0 <_strtod_l+0xba0>
 801e484:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e488:	ec57 6b17 	vmov	r6, r7, d7
 801e48c:	e796      	b.n	801e3bc <_strtod_l+0x9ac>
 801e48e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801e492:	9b04      	ldr	r3, [sp, #16]
 801e494:	46ca      	mov	sl, r9
 801e496:	2b00      	cmp	r3, #0
 801e498:	d1c2      	bne.n	801e420 <_strtod_l+0xa10>
 801e49a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e49e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e4a0:	0d1b      	lsrs	r3, r3, #20
 801e4a2:	051b      	lsls	r3, r3, #20
 801e4a4:	429a      	cmp	r2, r3
 801e4a6:	d1bb      	bne.n	801e420 <_strtod_l+0xa10>
 801e4a8:	4630      	mov	r0, r6
 801e4aa:	4639      	mov	r1, r7
 801e4ac:	f7e2 fc30 	bl	8000d10 <__aeabi_d2lz>
 801e4b0:	f7e2 f88c 	bl	80005cc <__aeabi_l2d>
 801e4b4:	4602      	mov	r2, r0
 801e4b6:	460b      	mov	r3, r1
 801e4b8:	4630      	mov	r0, r6
 801e4ba:	4639      	mov	r1, r7
 801e4bc:	f7e1 fefc 	bl	80002b8 <__aeabi_dsub>
 801e4c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e4c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e4c6:	ea43 0308 	orr.w	r3, r3, r8
 801e4ca:	4313      	orrs	r3, r2
 801e4cc:	4606      	mov	r6, r0
 801e4ce:	460f      	mov	r7, r1
 801e4d0:	d054      	beq.n	801e57c <_strtod_l+0xb6c>
 801e4d2:	a339      	add	r3, pc, #228	; (adr r3, 801e5b8 <_strtod_l+0xba8>)
 801e4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4d8:	f7e2 fb18 	bl	8000b0c <__aeabi_dcmplt>
 801e4dc:	2800      	cmp	r0, #0
 801e4de:	f47f ace5 	bne.w	801deac <_strtod_l+0x49c>
 801e4e2:	a337      	add	r3, pc, #220	; (adr r3, 801e5c0 <_strtod_l+0xbb0>)
 801e4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4e8:	4630      	mov	r0, r6
 801e4ea:	4639      	mov	r1, r7
 801e4ec:	f7e2 fb2c 	bl	8000b48 <__aeabi_dcmpgt>
 801e4f0:	2800      	cmp	r0, #0
 801e4f2:	d095      	beq.n	801e420 <_strtod_l+0xa10>
 801e4f4:	e4da      	b.n	801deac <_strtod_l+0x49c>
 801e4f6:	9b04      	ldr	r3, [sp, #16]
 801e4f8:	b333      	cbz	r3, 801e548 <_strtod_l+0xb38>
 801e4fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e4fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801e500:	d822      	bhi.n	801e548 <_strtod_l+0xb38>
 801e502:	a331      	add	r3, pc, #196	; (adr r3, 801e5c8 <_strtod_l+0xbb8>)
 801e504:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e508:	4630      	mov	r0, r6
 801e50a:	4639      	mov	r1, r7
 801e50c:	f7e2 fb08 	bl	8000b20 <__aeabi_dcmple>
 801e510:	b1a0      	cbz	r0, 801e53c <_strtod_l+0xb2c>
 801e512:	4639      	mov	r1, r7
 801e514:	4630      	mov	r0, r6
 801e516:	f7e2 fb5f 	bl	8000bd8 <__aeabi_d2uiz>
 801e51a:	2801      	cmp	r0, #1
 801e51c:	bf38      	it	cc
 801e51e:	2001      	movcc	r0, #1
 801e520:	f7e2 f808 	bl	8000534 <__aeabi_ui2d>
 801e524:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e526:	4606      	mov	r6, r0
 801e528:	460f      	mov	r7, r1
 801e52a:	bb23      	cbnz	r3, 801e576 <_strtod_l+0xb66>
 801e52c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e530:	9010      	str	r0, [sp, #64]	; 0x40
 801e532:	9311      	str	r3, [sp, #68]	; 0x44
 801e534:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801e538:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801e53c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e53e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e540:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801e544:	1a9b      	subs	r3, r3, r2
 801e546:	930f      	str	r3, [sp, #60]	; 0x3c
 801e548:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801e54c:	eeb0 0a48 	vmov.f32	s0, s16
 801e550:	eef0 0a68 	vmov.f32	s1, s17
 801e554:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801e558:	f7ff f8fc 	bl	801d754 <__ulp>
 801e55c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801e560:	ec53 2b10 	vmov	r2, r3, d0
 801e564:	f7e2 f860 	bl	8000628 <__aeabi_dmul>
 801e568:	ec53 2b18 	vmov	r2, r3, d8
 801e56c:	f7e1 fea6 	bl	80002bc <__adddf3>
 801e570:	4680      	mov	r8, r0
 801e572:	4689      	mov	r9, r1
 801e574:	e78d      	b.n	801e492 <_strtod_l+0xa82>
 801e576:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801e57a:	e7db      	b.n	801e534 <_strtod_l+0xb24>
 801e57c:	a314      	add	r3, pc, #80	; (adr r3, 801e5d0 <_strtod_l+0xbc0>)
 801e57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e582:	f7e2 fac3 	bl	8000b0c <__aeabi_dcmplt>
 801e586:	e7b3      	b.n	801e4f0 <_strtod_l+0xae0>
 801e588:	2300      	movs	r3, #0
 801e58a:	930a      	str	r3, [sp, #40]	; 0x28
 801e58c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e58e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e590:	6013      	str	r3, [r2, #0]
 801e592:	f7ff ba7c 	b.w	801da8e <_strtod_l+0x7e>
 801e596:	2a65      	cmp	r2, #101	; 0x65
 801e598:	f43f ab75 	beq.w	801dc86 <_strtod_l+0x276>
 801e59c:	2a45      	cmp	r2, #69	; 0x45
 801e59e:	f43f ab72 	beq.w	801dc86 <_strtod_l+0x276>
 801e5a2:	2301      	movs	r3, #1
 801e5a4:	f7ff bbaa 	b.w	801dcfc <_strtod_l+0x2ec>
 801e5a8:	00000000 	.word	0x00000000
 801e5ac:	bff00000 	.word	0xbff00000
 801e5b0:	00000000 	.word	0x00000000
 801e5b4:	3ff00000 	.word	0x3ff00000
 801e5b8:	94a03595 	.word	0x94a03595
 801e5bc:	3fdfffff 	.word	0x3fdfffff
 801e5c0:	35afe535 	.word	0x35afe535
 801e5c4:	3fe00000 	.word	0x3fe00000
 801e5c8:	ffc00000 	.word	0xffc00000
 801e5cc:	41dfffff 	.word	0x41dfffff
 801e5d0:	94a03595 	.word	0x94a03595
 801e5d4:	3fcfffff 	.word	0x3fcfffff
 801e5d8:	3ff00000 	.word	0x3ff00000
 801e5dc:	3fe00000 	.word	0x3fe00000
 801e5e0:	7ff00000 	.word	0x7ff00000
 801e5e4:	7fe00000 	.word	0x7fe00000
 801e5e8:	7c9fffff 	.word	0x7c9fffff
 801e5ec:	7fefffff 	.word	0x7fefffff

0801e5f0 <_strtod_r>:
 801e5f0:	4b01      	ldr	r3, [pc, #4]	; (801e5f8 <_strtod_r+0x8>)
 801e5f2:	f7ff ba0d 	b.w	801da10 <_strtod_l>
 801e5f6:	bf00      	nop
 801e5f8:	2000016c 	.word	0x2000016c

0801e5fc <_strtol_l.constprop.0>:
 801e5fc:	2b01      	cmp	r3, #1
 801e5fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e602:	d001      	beq.n	801e608 <_strtol_l.constprop.0+0xc>
 801e604:	2b24      	cmp	r3, #36	; 0x24
 801e606:	d906      	bls.n	801e616 <_strtol_l.constprop.0+0x1a>
 801e608:	f7fd fe1e 	bl	801c248 <__errno>
 801e60c:	2316      	movs	r3, #22
 801e60e:	6003      	str	r3, [r0, #0]
 801e610:	2000      	movs	r0, #0
 801e612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e616:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801e6fc <_strtol_l.constprop.0+0x100>
 801e61a:	460d      	mov	r5, r1
 801e61c:	462e      	mov	r6, r5
 801e61e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e622:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801e626:	f017 0708 	ands.w	r7, r7, #8
 801e62a:	d1f7      	bne.n	801e61c <_strtol_l.constprop.0+0x20>
 801e62c:	2c2d      	cmp	r4, #45	; 0x2d
 801e62e:	d132      	bne.n	801e696 <_strtol_l.constprop.0+0x9a>
 801e630:	782c      	ldrb	r4, [r5, #0]
 801e632:	2701      	movs	r7, #1
 801e634:	1cb5      	adds	r5, r6, #2
 801e636:	2b00      	cmp	r3, #0
 801e638:	d05b      	beq.n	801e6f2 <_strtol_l.constprop.0+0xf6>
 801e63a:	2b10      	cmp	r3, #16
 801e63c:	d109      	bne.n	801e652 <_strtol_l.constprop.0+0x56>
 801e63e:	2c30      	cmp	r4, #48	; 0x30
 801e640:	d107      	bne.n	801e652 <_strtol_l.constprop.0+0x56>
 801e642:	782c      	ldrb	r4, [r5, #0]
 801e644:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801e648:	2c58      	cmp	r4, #88	; 0x58
 801e64a:	d14d      	bne.n	801e6e8 <_strtol_l.constprop.0+0xec>
 801e64c:	786c      	ldrb	r4, [r5, #1]
 801e64e:	2310      	movs	r3, #16
 801e650:	3502      	adds	r5, #2
 801e652:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801e656:	f108 38ff 	add.w	r8, r8, #4294967295
 801e65a:	f04f 0e00 	mov.w	lr, #0
 801e65e:	fbb8 f9f3 	udiv	r9, r8, r3
 801e662:	4676      	mov	r6, lr
 801e664:	fb03 8a19 	mls	sl, r3, r9, r8
 801e668:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801e66c:	f1bc 0f09 	cmp.w	ip, #9
 801e670:	d816      	bhi.n	801e6a0 <_strtol_l.constprop.0+0xa4>
 801e672:	4664      	mov	r4, ip
 801e674:	42a3      	cmp	r3, r4
 801e676:	dd24      	ble.n	801e6c2 <_strtol_l.constprop.0+0xc6>
 801e678:	f1be 3fff 	cmp.w	lr, #4294967295
 801e67c:	d008      	beq.n	801e690 <_strtol_l.constprop.0+0x94>
 801e67e:	45b1      	cmp	r9, r6
 801e680:	d31c      	bcc.n	801e6bc <_strtol_l.constprop.0+0xc0>
 801e682:	d101      	bne.n	801e688 <_strtol_l.constprop.0+0x8c>
 801e684:	45a2      	cmp	sl, r4
 801e686:	db19      	blt.n	801e6bc <_strtol_l.constprop.0+0xc0>
 801e688:	fb06 4603 	mla	r6, r6, r3, r4
 801e68c:	f04f 0e01 	mov.w	lr, #1
 801e690:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e694:	e7e8      	b.n	801e668 <_strtol_l.constprop.0+0x6c>
 801e696:	2c2b      	cmp	r4, #43	; 0x2b
 801e698:	bf04      	itt	eq
 801e69a:	782c      	ldrbeq	r4, [r5, #0]
 801e69c:	1cb5      	addeq	r5, r6, #2
 801e69e:	e7ca      	b.n	801e636 <_strtol_l.constprop.0+0x3a>
 801e6a0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801e6a4:	f1bc 0f19 	cmp.w	ip, #25
 801e6a8:	d801      	bhi.n	801e6ae <_strtol_l.constprop.0+0xb2>
 801e6aa:	3c37      	subs	r4, #55	; 0x37
 801e6ac:	e7e2      	b.n	801e674 <_strtol_l.constprop.0+0x78>
 801e6ae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801e6b2:	f1bc 0f19 	cmp.w	ip, #25
 801e6b6:	d804      	bhi.n	801e6c2 <_strtol_l.constprop.0+0xc6>
 801e6b8:	3c57      	subs	r4, #87	; 0x57
 801e6ba:	e7db      	b.n	801e674 <_strtol_l.constprop.0+0x78>
 801e6bc:	f04f 3eff 	mov.w	lr, #4294967295
 801e6c0:	e7e6      	b.n	801e690 <_strtol_l.constprop.0+0x94>
 801e6c2:	f1be 3fff 	cmp.w	lr, #4294967295
 801e6c6:	d105      	bne.n	801e6d4 <_strtol_l.constprop.0+0xd8>
 801e6c8:	2322      	movs	r3, #34	; 0x22
 801e6ca:	6003      	str	r3, [r0, #0]
 801e6cc:	4646      	mov	r6, r8
 801e6ce:	b942      	cbnz	r2, 801e6e2 <_strtol_l.constprop.0+0xe6>
 801e6d0:	4630      	mov	r0, r6
 801e6d2:	e79e      	b.n	801e612 <_strtol_l.constprop.0+0x16>
 801e6d4:	b107      	cbz	r7, 801e6d8 <_strtol_l.constprop.0+0xdc>
 801e6d6:	4276      	negs	r6, r6
 801e6d8:	2a00      	cmp	r2, #0
 801e6da:	d0f9      	beq.n	801e6d0 <_strtol_l.constprop.0+0xd4>
 801e6dc:	f1be 0f00 	cmp.w	lr, #0
 801e6e0:	d000      	beq.n	801e6e4 <_strtol_l.constprop.0+0xe8>
 801e6e2:	1e69      	subs	r1, r5, #1
 801e6e4:	6011      	str	r1, [r2, #0]
 801e6e6:	e7f3      	b.n	801e6d0 <_strtol_l.constprop.0+0xd4>
 801e6e8:	2430      	movs	r4, #48	; 0x30
 801e6ea:	2b00      	cmp	r3, #0
 801e6ec:	d1b1      	bne.n	801e652 <_strtol_l.constprop.0+0x56>
 801e6ee:	2308      	movs	r3, #8
 801e6f0:	e7af      	b.n	801e652 <_strtol_l.constprop.0+0x56>
 801e6f2:	2c30      	cmp	r4, #48	; 0x30
 801e6f4:	d0a5      	beq.n	801e642 <_strtol_l.constprop.0+0x46>
 801e6f6:	230a      	movs	r3, #10
 801e6f8:	e7ab      	b.n	801e652 <_strtol_l.constprop.0+0x56>
 801e6fa:	bf00      	nop
 801e6fc:	080230d9 	.word	0x080230d9

0801e700 <_strtol_r>:
 801e700:	f7ff bf7c 	b.w	801e5fc <_strtol_l.constprop.0>

0801e704 <__ssputs_r>:
 801e704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e708:	688e      	ldr	r6, [r1, #8]
 801e70a:	461f      	mov	r7, r3
 801e70c:	42be      	cmp	r6, r7
 801e70e:	680b      	ldr	r3, [r1, #0]
 801e710:	4682      	mov	sl, r0
 801e712:	460c      	mov	r4, r1
 801e714:	4690      	mov	r8, r2
 801e716:	d82c      	bhi.n	801e772 <__ssputs_r+0x6e>
 801e718:	898a      	ldrh	r2, [r1, #12]
 801e71a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e71e:	d026      	beq.n	801e76e <__ssputs_r+0x6a>
 801e720:	6965      	ldr	r5, [r4, #20]
 801e722:	6909      	ldr	r1, [r1, #16]
 801e724:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e728:	eba3 0901 	sub.w	r9, r3, r1
 801e72c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e730:	1c7b      	adds	r3, r7, #1
 801e732:	444b      	add	r3, r9
 801e734:	106d      	asrs	r5, r5, #1
 801e736:	429d      	cmp	r5, r3
 801e738:	bf38      	it	cc
 801e73a:	461d      	movcc	r5, r3
 801e73c:	0553      	lsls	r3, r2, #21
 801e73e:	d527      	bpl.n	801e790 <__ssputs_r+0x8c>
 801e740:	4629      	mov	r1, r5
 801e742:	f7fc faa9 	bl	801ac98 <_malloc_r>
 801e746:	4606      	mov	r6, r0
 801e748:	b360      	cbz	r0, 801e7a4 <__ssputs_r+0xa0>
 801e74a:	6921      	ldr	r1, [r4, #16]
 801e74c:	464a      	mov	r2, r9
 801e74e:	f7fd fdb0 	bl	801c2b2 <memcpy>
 801e752:	89a3      	ldrh	r3, [r4, #12]
 801e754:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e75c:	81a3      	strh	r3, [r4, #12]
 801e75e:	6126      	str	r6, [r4, #16]
 801e760:	6165      	str	r5, [r4, #20]
 801e762:	444e      	add	r6, r9
 801e764:	eba5 0509 	sub.w	r5, r5, r9
 801e768:	6026      	str	r6, [r4, #0]
 801e76a:	60a5      	str	r5, [r4, #8]
 801e76c:	463e      	mov	r6, r7
 801e76e:	42be      	cmp	r6, r7
 801e770:	d900      	bls.n	801e774 <__ssputs_r+0x70>
 801e772:	463e      	mov	r6, r7
 801e774:	6820      	ldr	r0, [r4, #0]
 801e776:	4632      	mov	r2, r6
 801e778:	4641      	mov	r1, r8
 801e77a:	f7fd fbab 	bl	801bed4 <memmove>
 801e77e:	68a3      	ldr	r3, [r4, #8]
 801e780:	1b9b      	subs	r3, r3, r6
 801e782:	60a3      	str	r3, [r4, #8]
 801e784:	6823      	ldr	r3, [r4, #0]
 801e786:	4433      	add	r3, r6
 801e788:	6023      	str	r3, [r4, #0]
 801e78a:	2000      	movs	r0, #0
 801e78c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e790:	462a      	mov	r2, r5
 801e792:	f001 face 	bl	801fd32 <_realloc_r>
 801e796:	4606      	mov	r6, r0
 801e798:	2800      	cmp	r0, #0
 801e79a:	d1e0      	bne.n	801e75e <__ssputs_r+0x5a>
 801e79c:	6921      	ldr	r1, [r4, #16]
 801e79e:	4650      	mov	r0, sl
 801e7a0:	f7fe fc20 	bl	801cfe4 <_free_r>
 801e7a4:	230c      	movs	r3, #12
 801e7a6:	f8ca 3000 	str.w	r3, [sl]
 801e7aa:	89a3      	ldrh	r3, [r4, #12]
 801e7ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e7b0:	81a3      	strh	r3, [r4, #12]
 801e7b2:	f04f 30ff 	mov.w	r0, #4294967295
 801e7b6:	e7e9      	b.n	801e78c <__ssputs_r+0x88>

0801e7b8 <_svfiprintf_r>:
 801e7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7bc:	4698      	mov	r8, r3
 801e7be:	898b      	ldrh	r3, [r1, #12]
 801e7c0:	061b      	lsls	r3, r3, #24
 801e7c2:	b09d      	sub	sp, #116	; 0x74
 801e7c4:	4607      	mov	r7, r0
 801e7c6:	460d      	mov	r5, r1
 801e7c8:	4614      	mov	r4, r2
 801e7ca:	d50e      	bpl.n	801e7ea <_svfiprintf_r+0x32>
 801e7cc:	690b      	ldr	r3, [r1, #16]
 801e7ce:	b963      	cbnz	r3, 801e7ea <_svfiprintf_r+0x32>
 801e7d0:	2140      	movs	r1, #64	; 0x40
 801e7d2:	f7fc fa61 	bl	801ac98 <_malloc_r>
 801e7d6:	6028      	str	r0, [r5, #0]
 801e7d8:	6128      	str	r0, [r5, #16]
 801e7da:	b920      	cbnz	r0, 801e7e6 <_svfiprintf_r+0x2e>
 801e7dc:	230c      	movs	r3, #12
 801e7de:	603b      	str	r3, [r7, #0]
 801e7e0:	f04f 30ff 	mov.w	r0, #4294967295
 801e7e4:	e0d0      	b.n	801e988 <_svfiprintf_r+0x1d0>
 801e7e6:	2340      	movs	r3, #64	; 0x40
 801e7e8:	616b      	str	r3, [r5, #20]
 801e7ea:	2300      	movs	r3, #0
 801e7ec:	9309      	str	r3, [sp, #36]	; 0x24
 801e7ee:	2320      	movs	r3, #32
 801e7f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e7f4:	f8cd 800c 	str.w	r8, [sp, #12]
 801e7f8:	2330      	movs	r3, #48	; 0x30
 801e7fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801e9a0 <_svfiprintf_r+0x1e8>
 801e7fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e802:	f04f 0901 	mov.w	r9, #1
 801e806:	4623      	mov	r3, r4
 801e808:	469a      	mov	sl, r3
 801e80a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e80e:	b10a      	cbz	r2, 801e814 <_svfiprintf_r+0x5c>
 801e810:	2a25      	cmp	r2, #37	; 0x25
 801e812:	d1f9      	bne.n	801e808 <_svfiprintf_r+0x50>
 801e814:	ebba 0b04 	subs.w	fp, sl, r4
 801e818:	d00b      	beq.n	801e832 <_svfiprintf_r+0x7a>
 801e81a:	465b      	mov	r3, fp
 801e81c:	4622      	mov	r2, r4
 801e81e:	4629      	mov	r1, r5
 801e820:	4638      	mov	r0, r7
 801e822:	f7ff ff6f 	bl	801e704 <__ssputs_r>
 801e826:	3001      	adds	r0, #1
 801e828:	f000 80a9 	beq.w	801e97e <_svfiprintf_r+0x1c6>
 801e82c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e82e:	445a      	add	r2, fp
 801e830:	9209      	str	r2, [sp, #36]	; 0x24
 801e832:	f89a 3000 	ldrb.w	r3, [sl]
 801e836:	2b00      	cmp	r3, #0
 801e838:	f000 80a1 	beq.w	801e97e <_svfiprintf_r+0x1c6>
 801e83c:	2300      	movs	r3, #0
 801e83e:	f04f 32ff 	mov.w	r2, #4294967295
 801e842:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e846:	f10a 0a01 	add.w	sl, sl, #1
 801e84a:	9304      	str	r3, [sp, #16]
 801e84c:	9307      	str	r3, [sp, #28]
 801e84e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e852:	931a      	str	r3, [sp, #104]	; 0x68
 801e854:	4654      	mov	r4, sl
 801e856:	2205      	movs	r2, #5
 801e858:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e85c:	4850      	ldr	r0, [pc, #320]	; (801e9a0 <_svfiprintf_r+0x1e8>)
 801e85e:	f7e1 fccf 	bl	8000200 <memchr>
 801e862:	9a04      	ldr	r2, [sp, #16]
 801e864:	b9d8      	cbnz	r0, 801e89e <_svfiprintf_r+0xe6>
 801e866:	06d0      	lsls	r0, r2, #27
 801e868:	bf44      	itt	mi
 801e86a:	2320      	movmi	r3, #32
 801e86c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e870:	0711      	lsls	r1, r2, #28
 801e872:	bf44      	itt	mi
 801e874:	232b      	movmi	r3, #43	; 0x2b
 801e876:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e87a:	f89a 3000 	ldrb.w	r3, [sl]
 801e87e:	2b2a      	cmp	r3, #42	; 0x2a
 801e880:	d015      	beq.n	801e8ae <_svfiprintf_r+0xf6>
 801e882:	9a07      	ldr	r2, [sp, #28]
 801e884:	4654      	mov	r4, sl
 801e886:	2000      	movs	r0, #0
 801e888:	f04f 0c0a 	mov.w	ip, #10
 801e88c:	4621      	mov	r1, r4
 801e88e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e892:	3b30      	subs	r3, #48	; 0x30
 801e894:	2b09      	cmp	r3, #9
 801e896:	d94d      	bls.n	801e934 <_svfiprintf_r+0x17c>
 801e898:	b1b0      	cbz	r0, 801e8c8 <_svfiprintf_r+0x110>
 801e89a:	9207      	str	r2, [sp, #28]
 801e89c:	e014      	b.n	801e8c8 <_svfiprintf_r+0x110>
 801e89e:	eba0 0308 	sub.w	r3, r0, r8
 801e8a2:	fa09 f303 	lsl.w	r3, r9, r3
 801e8a6:	4313      	orrs	r3, r2
 801e8a8:	9304      	str	r3, [sp, #16]
 801e8aa:	46a2      	mov	sl, r4
 801e8ac:	e7d2      	b.n	801e854 <_svfiprintf_r+0x9c>
 801e8ae:	9b03      	ldr	r3, [sp, #12]
 801e8b0:	1d19      	adds	r1, r3, #4
 801e8b2:	681b      	ldr	r3, [r3, #0]
 801e8b4:	9103      	str	r1, [sp, #12]
 801e8b6:	2b00      	cmp	r3, #0
 801e8b8:	bfbb      	ittet	lt
 801e8ba:	425b      	neglt	r3, r3
 801e8bc:	f042 0202 	orrlt.w	r2, r2, #2
 801e8c0:	9307      	strge	r3, [sp, #28]
 801e8c2:	9307      	strlt	r3, [sp, #28]
 801e8c4:	bfb8      	it	lt
 801e8c6:	9204      	strlt	r2, [sp, #16]
 801e8c8:	7823      	ldrb	r3, [r4, #0]
 801e8ca:	2b2e      	cmp	r3, #46	; 0x2e
 801e8cc:	d10c      	bne.n	801e8e8 <_svfiprintf_r+0x130>
 801e8ce:	7863      	ldrb	r3, [r4, #1]
 801e8d0:	2b2a      	cmp	r3, #42	; 0x2a
 801e8d2:	d134      	bne.n	801e93e <_svfiprintf_r+0x186>
 801e8d4:	9b03      	ldr	r3, [sp, #12]
 801e8d6:	1d1a      	adds	r2, r3, #4
 801e8d8:	681b      	ldr	r3, [r3, #0]
 801e8da:	9203      	str	r2, [sp, #12]
 801e8dc:	2b00      	cmp	r3, #0
 801e8de:	bfb8      	it	lt
 801e8e0:	f04f 33ff 	movlt.w	r3, #4294967295
 801e8e4:	3402      	adds	r4, #2
 801e8e6:	9305      	str	r3, [sp, #20]
 801e8e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801e9b0 <_svfiprintf_r+0x1f8>
 801e8ec:	7821      	ldrb	r1, [r4, #0]
 801e8ee:	2203      	movs	r2, #3
 801e8f0:	4650      	mov	r0, sl
 801e8f2:	f7e1 fc85 	bl	8000200 <memchr>
 801e8f6:	b138      	cbz	r0, 801e908 <_svfiprintf_r+0x150>
 801e8f8:	9b04      	ldr	r3, [sp, #16]
 801e8fa:	eba0 000a 	sub.w	r0, r0, sl
 801e8fe:	2240      	movs	r2, #64	; 0x40
 801e900:	4082      	lsls	r2, r0
 801e902:	4313      	orrs	r3, r2
 801e904:	3401      	adds	r4, #1
 801e906:	9304      	str	r3, [sp, #16]
 801e908:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e90c:	4825      	ldr	r0, [pc, #148]	; (801e9a4 <_svfiprintf_r+0x1ec>)
 801e90e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e912:	2206      	movs	r2, #6
 801e914:	f7e1 fc74 	bl	8000200 <memchr>
 801e918:	2800      	cmp	r0, #0
 801e91a:	d038      	beq.n	801e98e <_svfiprintf_r+0x1d6>
 801e91c:	4b22      	ldr	r3, [pc, #136]	; (801e9a8 <_svfiprintf_r+0x1f0>)
 801e91e:	bb1b      	cbnz	r3, 801e968 <_svfiprintf_r+0x1b0>
 801e920:	9b03      	ldr	r3, [sp, #12]
 801e922:	3307      	adds	r3, #7
 801e924:	f023 0307 	bic.w	r3, r3, #7
 801e928:	3308      	adds	r3, #8
 801e92a:	9303      	str	r3, [sp, #12]
 801e92c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e92e:	4433      	add	r3, r6
 801e930:	9309      	str	r3, [sp, #36]	; 0x24
 801e932:	e768      	b.n	801e806 <_svfiprintf_r+0x4e>
 801e934:	fb0c 3202 	mla	r2, ip, r2, r3
 801e938:	460c      	mov	r4, r1
 801e93a:	2001      	movs	r0, #1
 801e93c:	e7a6      	b.n	801e88c <_svfiprintf_r+0xd4>
 801e93e:	2300      	movs	r3, #0
 801e940:	3401      	adds	r4, #1
 801e942:	9305      	str	r3, [sp, #20]
 801e944:	4619      	mov	r1, r3
 801e946:	f04f 0c0a 	mov.w	ip, #10
 801e94a:	4620      	mov	r0, r4
 801e94c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e950:	3a30      	subs	r2, #48	; 0x30
 801e952:	2a09      	cmp	r2, #9
 801e954:	d903      	bls.n	801e95e <_svfiprintf_r+0x1a6>
 801e956:	2b00      	cmp	r3, #0
 801e958:	d0c6      	beq.n	801e8e8 <_svfiprintf_r+0x130>
 801e95a:	9105      	str	r1, [sp, #20]
 801e95c:	e7c4      	b.n	801e8e8 <_svfiprintf_r+0x130>
 801e95e:	fb0c 2101 	mla	r1, ip, r1, r2
 801e962:	4604      	mov	r4, r0
 801e964:	2301      	movs	r3, #1
 801e966:	e7f0      	b.n	801e94a <_svfiprintf_r+0x192>
 801e968:	ab03      	add	r3, sp, #12
 801e96a:	9300      	str	r3, [sp, #0]
 801e96c:	462a      	mov	r2, r5
 801e96e:	4b0f      	ldr	r3, [pc, #60]	; (801e9ac <_svfiprintf_r+0x1f4>)
 801e970:	a904      	add	r1, sp, #16
 801e972:	4638      	mov	r0, r7
 801e974:	f7fc fabc 	bl	801aef0 <_printf_float>
 801e978:	1c42      	adds	r2, r0, #1
 801e97a:	4606      	mov	r6, r0
 801e97c:	d1d6      	bne.n	801e92c <_svfiprintf_r+0x174>
 801e97e:	89ab      	ldrh	r3, [r5, #12]
 801e980:	065b      	lsls	r3, r3, #25
 801e982:	f53f af2d 	bmi.w	801e7e0 <_svfiprintf_r+0x28>
 801e986:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e988:	b01d      	add	sp, #116	; 0x74
 801e98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e98e:	ab03      	add	r3, sp, #12
 801e990:	9300      	str	r3, [sp, #0]
 801e992:	462a      	mov	r2, r5
 801e994:	4b05      	ldr	r3, [pc, #20]	; (801e9ac <_svfiprintf_r+0x1f4>)
 801e996:	a904      	add	r1, sp, #16
 801e998:	4638      	mov	r0, r7
 801e99a:	f7fc fd4d 	bl	801b438 <_printf_i>
 801e99e:	e7eb      	b.n	801e978 <_svfiprintf_r+0x1c0>
 801e9a0:	080231d9 	.word	0x080231d9
 801e9a4:	080231e3 	.word	0x080231e3
 801e9a8:	0801aef1 	.word	0x0801aef1
 801e9ac:	0801e705 	.word	0x0801e705
 801e9b0:	080231df 	.word	0x080231df

0801e9b4 <_sungetc_r>:
 801e9b4:	b538      	push	{r3, r4, r5, lr}
 801e9b6:	1c4b      	adds	r3, r1, #1
 801e9b8:	4614      	mov	r4, r2
 801e9ba:	d103      	bne.n	801e9c4 <_sungetc_r+0x10>
 801e9bc:	f04f 35ff 	mov.w	r5, #4294967295
 801e9c0:	4628      	mov	r0, r5
 801e9c2:	bd38      	pop	{r3, r4, r5, pc}
 801e9c4:	8993      	ldrh	r3, [r2, #12]
 801e9c6:	f023 0320 	bic.w	r3, r3, #32
 801e9ca:	8193      	strh	r3, [r2, #12]
 801e9cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e9ce:	6852      	ldr	r2, [r2, #4]
 801e9d0:	b2cd      	uxtb	r5, r1
 801e9d2:	b18b      	cbz	r3, 801e9f8 <_sungetc_r+0x44>
 801e9d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e9d6:	4293      	cmp	r3, r2
 801e9d8:	dd08      	ble.n	801e9ec <_sungetc_r+0x38>
 801e9da:	6823      	ldr	r3, [r4, #0]
 801e9dc:	1e5a      	subs	r2, r3, #1
 801e9de:	6022      	str	r2, [r4, #0]
 801e9e0:	f803 5c01 	strb.w	r5, [r3, #-1]
 801e9e4:	6863      	ldr	r3, [r4, #4]
 801e9e6:	3301      	adds	r3, #1
 801e9e8:	6063      	str	r3, [r4, #4]
 801e9ea:	e7e9      	b.n	801e9c0 <_sungetc_r+0xc>
 801e9ec:	4621      	mov	r1, r4
 801e9ee:	f000 fd8e 	bl	801f50e <__submore>
 801e9f2:	2800      	cmp	r0, #0
 801e9f4:	d0f1      	beq.n	801e9da <_sungetc_r+0x26>
 801e9f6:	e7e1      	b.n	801e9bc <_sungetc_r+0x8>
 801e9f8:	6921      	ldr	r1, [r4, #16]
 801e9fa:	6823      	ldr	r3, [r4, #0]
 801e9fc:	b151      	cbz	r1, 801ea14 <_sungetc_r+0x60>
 801e9fe:	4299      	cmp	r1, r3
 801ea00:	d208      	bcs.n	801ea14 <_sungetc_r+0x60>
 801ea02:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801ea06:	42a9      	cmp	r1, r5
 801ea08:	d104      	bne.n	801ea14 <_sungetc_r+0x60>
 801ea0a:	3b01      	subs	r3, #1
 801ea0c:	3201      	adds	r2, #1
 801ea0e:	6023      	str	r3, [r4, #0]
 801ea10:	6062      	str	r2, [r4, #4]
 801ea12:	e7d5      	b.n	801e9c0 <_sungetc_r+0xc>
 801ea14:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801ea18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ea1c:	6363      	str	r3, [r4, #52]	; 0x34
 801ea1e:	2303      	movs	r3, #3
 801ea20:	63a3      	str	r3, [r4, #56]	; 0x38
 801ea22:	4623      	mov	r3, r4
 801ea24:	f803 5f46 	strb.w	r5, [r3, #70]!
 801ea28:	6023      	str	r3, [r4, #0]
 801ea2a:	2301      	movs	r3, #1
 801ea2c:	e7dc      	b.n	801e9e8 <_sungetc_r+0x34>

0801ea2e <__ssrefill_r>:
 801ea2e:	b510      	push	{r4, lr}
 801ea30:	460c      	mov	r4, r1
 801ea32:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801ea34:	b169      	cbz	r1, 801ea52 <__ssrefill_r+0x24>
 801ea36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ea3a:	4299      	cmp	r1, r3
 801ea3c:	d001      	beq.n	801ea42 <__ssrefill_r+0x14>
 801ea3e:	f7fe fad1 	bl	801cfe4 <_free_r>
 801ea42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ea44:	6063      	str	r3, [r4, #4]
 801ea46:	2000      	movs	r0, #0
 801ea48:	6360      	str	r0, [r4, #52]	; 0x34
 801ea4a:	b113      	cbz	r3, 801ea52 <__ssrefill_r+0x24>
 801ea4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ea4e:	6023      	str	r3, [r4, #0]
 801ea50:	bd10      	pop	{r4, pc}
 801ea52:	6923      	ldr	r3, [r4, #16]
 801ea54:	6023      	str	r3, [r4, #0]
 801ea56:	2300      	movs	r3, #0
 801ea58:	6063      	str	r3, [r4, #4]
 801ea5a:	89a3      	ldrh	r3, [r4, #12]
 801ea5c:	f043 0320 	orr.w	r3, r3, #32
 801ea60:	81a3      	strh	r3, [r4, #12]
 801ea62:	f04f 30ff 	mov.w	r0, #4294967295
 801ea66:	e7f3      	b.n	801ea50 <__ssrefill_r+0x22>

0801ea68 <__ssvfiscanf_r>:
 801ea68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea6c:	460c      	mov	r4, r1
 801ea6e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801ea72:	2100      	movs	r1, #0
 801ea74:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801ea78:	49a6      	ldr	r1, [pc, #664]	; (801ed14 <__ssvfiscanf_r+0x2ac>)
 801ea7a:	91a0      	str	r1, [sp, #640]	; 0x280
 801ea7c:	f10d 0804 	add.w	r8, sp, #4
 801ea80:	49a5      	ldr	r1, [pc, #660]	; (801ed18 <__ssvfiscanf_r+0x2b0>)
 801ea82:	4fa6      	ldr	r7, [pc, #664]	; (801ed1c <__ssvfiscanf_r+0x2b4>)
 801ea84:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801ed20 <__ssvfiscanf_r+0x2b8>
 801ea88:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801ea8c:	4606      	mov	r6, r0
 801ea8e:	91a1      	str	r1, [sp, #644]	; 0x284
 801ea90:	9300      	str	r3, [sp, #0]
 801ea92:	7813      	ldrb	r3, [r2, #0]
 801ea94:	2b00      	cmp	r3, #0
 801ea96:	f000 815a 	beq.w	801ed4e <__ssvfiscanf_r+0x2e6>
 801ea9a:	5cf9      	ldrb	r1, [r7, r3]
 801ea9c:	f011 0108 	ands.w	r1, r1, #8
 801eaa0:	f102 0501 	add.w	r5, r2, #1
 801eaa4:	d019      	beq.n	801eada <__ssvfiscanf_r+0x72>
 801eaa6:	6863      	ldr	r3, [r4, #4]
 801eaa8:	2b00      	cmp	r3, #0
 801eaaa:	dd0f      	ble.n	801eacc <__ssvfiscanf_r+0x64>
 801eaac:	6823      	ldr	r3, [r4, #0]
 801eaae:	781a      	ldrb	r2, [r3, #0]
 801eab0:	5cba      	ldrb	r2, [r7, r2]
 801eab2:	0712      	lsls	r2, r2, #28
 801eab4:	d401      	bmi.n	801eaba <__ssvfiscanf_r+0x52>
 801eab6:	462a      	mov	r2, r5
 801eab8:	e7eb      	b.n	801ea92 <__ssvfiscanf_r+0x2a>
 801eaba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801eabc:	3201      	adds	r2, #1
 801eabe:	9245      	str	r2, [sp, #276]	; 0x114
 801eac0:	6862      	ldr	r2, [r4, #4]
 801eac2:	3301      	adds	r3, #1
 801eac4:	3a01      	subs	r2, #1
 801eac6:	6062      	str	r2, [r4, #4]
 801eac8:	6023      	str	r3, [r4, #0]
 801eaca:	e7ec      	b.n	801eaa6 <__ssvfiscanf_r+0x3e>
 801eacc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801eace:	4621      	mov	r1, r4
 801ead0:	4630      	mov	r0, r6
 801ead2:	4798      	blx	r3
 801ead4:	2800      	cmp	r0, #0
 801ead6:	d0e9      	beq.n	801eaac <__ssvfiscanf_r+0x44>
 801ead8:	e7ed      	b.n	801eab6 <__ssvfiscanf_r+0x4e>
 801eada:	2b25      	cmp	r3, #37	; 0x25
 801eadc:	d012      	beq.n	801eb04 <__ssvfiscanf_r+0x9c>
 801eade:	469a      	mov	sl, r3
 801eae0:	6863      	ldr	r3, [r4, #4]
 801eae2:	2b00      	cmp	r3, #0
 801eae4:	f340 8091 	ble.w	801ec0a <__ssvfiscanf_r+0x1a2>
 801eae8:	6822      	ldr	r2, [r4, #0]
 801eaea:	7813      	ldrb	r3, [r2, #0]
 801eaec:	4553      	cmp	r3, sl
 801eaee:	f040 812e 	bne.w	801ed4e <__ssvfiscanf_r+0x2e6>
 801eaf2:	6863      	ldr	r3, [r4, #4]
 801eaf4:	3b01      	subs	r3, #1
 801eaf6:	6063      	str	r3, [r4, #4]
 801eaf8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801eafa:	3201      	adds	r2, #1
 801eafc:	3301      	adds	r3, #1
 801eafe:	6022      	str	r2, [r4, #0]
 801eb00:	9345      	str	r3, [sp, #276]	; 0x114
 801eb02:	e7d8      	b.n	801eab6 <__ssvfiscanf_r+0x4e>
 801eb04:	9141      	str	r1, [sp, #260]	; 0x104
 801eb06:	9143      	str	r1, [sp, #268]	; 0x10c
 801eb08:	7853      	ldrb	r3, [r2, #1]
 801eb0a:	2b2a      	cmp	r3, #42	; 0x2a
 801eb0c:	bf02      	ittt	eq
 801eb0e:	2310      	moveq	r3, #16
 801eb10:	1c95      	addeq	r5, r2, #2
 801eb12:	9341      	streq	r3, [sp, #260]	; 0x104
 801eb14:	220a      	movs	r2, #10
 801eb16:	46aa      	mov	sl, r5
 801eb18:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801eb1c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801eb20:	2b09      	cmp	r3, #9
 801eb22:	d91c      	bls.n	801eb5e <__ssvfiscanf_r+0xf6>
 801eb24:	487e      	ldr	r0, [pc, #504]	; (801ed20 <__ssvfiscanf_r+0x2b8>)
 801eb26:	2203      	movs	r2, #3
 801eb28:	f7e1 fb6a 	bl	8000200 <memchr>
 801eb2c:	b138      	cbz	r0, 801eb3e <__ssvfiscanf_r+0xd6>
 801eb2e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801eb30:	eba0 0009 	sub.w	r0, r0, r9
 801eb34:	2301      	movs	r3, #1
 801eb36:	4083      	lsls	r3, r0
 801eb38:	4313      	orrs	r3, r2
 801eb3a:	9341      	str	r3, [sp, #260]	; 0x104
 801eb3c:	4655      	mov	r5, sl
 801eb3e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801eb42:	2b78      	cmp	r3, #120	; 0x78
 801eb44:	d806      	bhi.n	801eb54 <__ssvfiscanf_r+0xec>
 801eb46:	2b57      	cmp	r3, #87	; 0x57
 801eb48:	d810      	bhi.n	801eb6c <__ssvfiscanf_r+0x104>
 801eb4a:	2b25      	cmp	r3, #37	; 0x25
 801eb4c:	d0c7      	beq.n	801eade <__ssvfiscanf_r+0x76>
 801eb4e:	d857      	bhi.n	801ec00 <__ssvfiscanf_r+0x198>
 801eb50:	2b00      	cmp	r3, #0
 801eb52:	d065      	beq.n	801ec20 <__ssvfiscanf_r+0x1b8>
 801eb54:	2303      	movs	r3, #3
 801eb56:	9347      	str	r3, [sp, #284]	; 0x11c
 801eb58:	230a      	movs	r3, #10
 801eb5a:	9342      	str	r3, [sp, #264]	; 0x108
 801eb5c:	e076      	b.n	801ec4c <__ssvfiscanf_r+0x1e4>
 801eb5e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801eb60:	fb02 1103 	mla	r1, r2, r3, r1
 801eb64:	3930      	subs	r1, #48	; 0x30
 801eb66:	9143      	str	r1, [sp, #268]	; 0x10c
 801eb68:	4655      	mov	r5, sl
 801eb6a:	e7d4      	b.n	801eb16 <__ssvfiscanf_r+0xae>
 801eb6c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801eb70:	2a20      	cmp	r2, #32
 801eb72:	d8ef      	bhi.n	801eb54 <__ssvfiscanf_r+0xec>
 801eb74:	a101      	add	r1, pc, #4	; (adr r1, 801eb7c <__ssvfiscanf_r+0x114>)
 801eb76:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801eb7a:	bf00      	nop
 801eb7c:	0801ec2f 	.word	0x0801ec2f
 801eb80:	0801eb55 	.word	0x0801eb55
 801eb84:	0801eb55 	.word	0x0801eb55
 801eb88:	0801ec8d 	.word	0x0801ec8d
 801eb8c:	0801eb55 	.word	0x0801eb55
 801eb90:	0801eb55 	.word	0x0801eb55
 801eb94:	0801eb55 	.word	0x0801eb55
 801eb98:	0801eb55 	.word	0x0801eb55
 801eb9c:	0801eb55 	.word	0x0801eb55
 801eba0:	0801eb55 	.word	0x0801eb55
 801eba4:	0801eb55 	.word	0x0801eb55
 801eba8:	0801eca3 	.word	0x0801eca3
 801ebac:	0801ec89 	.word	0x0801ec89
 801ebb0:	0801ec07 	.word	0x0801ec07
 801ebb4:	0801ec07 	.word	0x0801ec07
 801ebb8:	0801ec07 	.word	0x0801ec07
 801ebbc:	0801eb55 	.word	0x0801eb55
 801ebc0:	0801ec45 	.word	0x0801ec45
 801ebc4:	0801eb55 	.word	0x0801eb55
 801ebc8:	0801eb55 	.word	0x0801eb55
 801ebcc:	0801eb55 	.word	0x0801eb55
 801ebd0:	0801eb55 	.word	0x0801eb55
 801ebd4:	0801ecb3 	.word	0x0801ecb3
 801ebd8:	0801ec81 	.word	0x0801ec81
 801ebdc:	0801ec27 	.word	0x0801ec27
 801ebe0:	0801eb55 	.word	0x0801eb55
 801ebe4:	0801eb55 	.word	0x0801eb55
 801ebe8:	0801ecaf 	.word	0x0801ecaf
 801ebec:	0801eb55 	.word	0x0801eb55
 801ebf0:	0801ec89 	.word	0x0801ec89
 801ebf4:	0801eb55 	.word	0x0801eb55
 801ebf8:	0801eb55 	.word	0x0801eb55
 801ebfc:	0801ec2f 	.word	0x0801ec2f
 801ec00:	3b45      	subs	r3, #69	; 0x45
 801ec02:	2b02      	cmp	r3, #2
 801ec04:	d8a6      	bhi.n	801eb54 <__ssvfiscanf_r+0xec>
 801ec06:	2305      	movs	r3, #5
 801ec08:	e01f      	b.n	801ec4a <__ssvfiscanf_r+0x1e2>
 801ec0a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ec0c:	4621      	mov	r1, r4
 801ec0e:	4630      	mov	r0, r6
 801ec10:	4798      	blx	r3
 801ec12:	2800      	cmp	r0, #0
 801ec14:	f43f af68 	beq.w	801eae8 <__ssvfiscanf_r+0x80>
 801ec18:	9844      	ldr	r0, [sp, #272]	; 0x110
 801ec1a:	2800      	cmp	r0, #0
 801ec1c:	f040 808d 	bne.w	801ed3a <__ssvfiscanf_r+0x2d2>
 801ec20:	f04f 30ff 	mov.w	r0, #4294967295
 801ec24:	e08f      	b.n	801ed46 <__ssvfiscanf_r+0x2de>
 801ec26:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801ec28:	f042 0220 	orr.w	r2, r2, #32
 801ec2c:	9241      	str	r2, [sp, #260]	; 0x104
 801ec2e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801ec30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ec34:	9241      	str	r2, [sp, #260]	; 0x104
 801ec36:	2210      	movs	r2, #16
 801ec38:	2b6f      	cmp	r3, #111	; 0x6f
 801ec3a:	9242      	str	r2, [sp, #264]	; 0x108
 801ec3c:	bf34      	ite	cc
 801ec3e:	2303      	movcc	r3, #3
 801ec40:	2304      	movcs	r3, #4
 801ec42:	e002      	b.n	801ec4a <__ssvfiscanf_r+0x1e2>
 801ec44:	2300      	movs	r3, #0
 801ec46:	9342      	str	r3, [sp, #264]	; 0x108
 801ec48:	2303      	movs	r3, #3
 801ec4a:	9347      	str	r3, [sp, #284]	; 0x11c
 801ec4c:	6863      	ldr	r3, [r4, #4]
 801ec4e:	2b00      	cmp	r3, #0
 801ec50:	dd3d      	ble.n	801ecce <__ssvfiscanf_r+0x266>
 801ec52:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ec54:	0659      	lsls	r1, r3, #25
 801ec56:	d404      	bmi.n	801ec62 <__ssvfiscanf_r+0x1fa>
 801ec58:	6823      	ldr	r3, [r4, #0]
 801ec5a:	781a      	ldrb	r2, [r3, #0]
 801ec5c:	5cba      	ldrb	r2, [r7, r2]
 801ec5e:	0712      	lsls	r2, r2, #28
 801ec60:	d43c      	bmi.n	801ecdc <__ssvfiscanf_r+0x274>
 801ec62:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801ec64:	2b02      	cmp	r3, #2
 801ec66:	dc4b      	bgt.n	801ed00 <__ssvfiscanf_r+0x298>
 801ec68:	466b      	mov	r3, sp
 801ec6a:	4622      	mov	r2, r4
 801ec6c:	a941      	add	r1, sp, #260	; 0x104
 801ec6e:	4630      	mov	r0, r6
 801ec70:	f000 f9b6 	bl	801efe0 <_scanf_chars>
 801ec74:	2801      	cmp	r0, #1
 801ec76:	d06a      	beq.n	801ed4e <__ssvfiscanf_r+0x2e6>
 801ec78:	2802      	cmp	r0, #2
 801ec7a:	f47f af1c 	bne.w	801eab6 <__ssvfiscanf_r+0x4e>
 801ec7e:	e7cb      	b.n	801ec18 <__ssvfiscanf_r+0x1b0>
 801ec80:	2308      	movs	r3, #8
 801ec82:	9342      	str	r3, [sp, #264]	; 0x108
 801ec84:	2304      	movs	r3, #4
 801ec86:	e7e0      	b.n	801ec4a <__ssvfiscanf_r+0x1e2>
 801ec88:	220a      	movs	r2, #10
 801ec8a:	e7d5      	b.n	801ec38 <__ssvfiscanf_r+0x1d0>
 801ec8c:	4629      	mov	r1, r5
 801ec8e:	4640      	mov	r0, r8
 801ec90:	f000 fc04 	bl	801f49c <__sccl>
 801ec94:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ec96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ec9a:	9341      	str	r3, [sp, #260]	; 0x104
 801ec9c:	4605      	mov	r5, r0
 801ec9e:	2301      	movs	r3, #1
 801eca0:	e7d3      	b.n	801ec4a <__ssvfiscanf_r+0x1e2>
 801eca2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801eca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801eca8:	9341      	str	r3, [sp, #260]	; 0x104
 801ecaa:	2300      	movs	r3, #0
 801ecac:	e7cd      	b.n	801ec4a <__ssvfiscanf_r+0x1e2>
 801ecae:	2302      	movs	r3, #2
 801ecb0:	e7cb      	b.n	801ec4a <__ssvfiscanf_r+0x1e2>
 801ecb2:	9841      	ldr	r0, [sp, #260]	; 0x104
 801ecb4:	06c3      	lsls	r3, r0, #27
 801ecb6:	f53f aefe 	bmi.w	801eab6 <__ssvfiscanf_r+0x4e>
 801ecba:	9b00      	ldr	r3, [sp, #0]
 801ecbc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801ecbe:	1d19      	adds	r1, r3, #4
 801ecc0:	9100      	str	r1, [sp, #0]
 801ecc2:	681b      	ldr	r3, [r3, #0]
 801ecc4:	07c0      	lsls	r0, r0, #31
 801ecc6:	bf4c      	ite	mi
 801ecc8:	801a      	strhmi	r2, [r3, #0]
 801ecca:	601a      	strpl	r2, [r3, #0]
 801eccc:	e6f3      	b.n	801eab6 <__ssvfiscanf_r+0x4e>
 801ecce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ecd0:	4621      	mov	r1, r4
 801ecd2:	4630      	mov	r0, r6
 801ecd4:	4798      	blx	r3
 801ecd6:	2800      	cmp	r0, #0
 801ecd8:	d0bb      	beq.n	801ec52 <__ssvfiscanf_r+0x1ea>
 801ecda:	e79d      	b.n	801ec18 <__ssvfiscanf_r+0x1b0>
 801ecdc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801ecde:	3201      	adds	r2, #1
 801ece0:	9245      	str	r2, [sp, #276]	; 0x114
 801ece2:	6862      	ldr	r2, [r4, #4]
 801ece4:	3a01      	subs	r2, #1
 801ece6:	2a00      	cmp	r2, #0
 801ece8:	6062      	str	r2, [r4, #4]
 801ecea:	dd02      	ble.n	801ecf2 <__ssvfiscanf_r+0x28a>
 801ecec:	3301      	adds	r3, #1
 801ecee:	6023      	str	r3, [r4, #0]
 801ecf0:	e7b2      	b.n	801ec58 <__ssvfiscanf_r+0x1f0>
 801ecf2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ecf4:	4621      	mov	r1, r4
 801ecf6:	4630      	mov	r0, r6
 801ecf8:	4798      	blx	r3
 801ecfa:	2800      	cmp	r0, #0
 801ecfc:	d0ac      	beq.n	801ec58 <__ssvfiscanf_r+0x1f0>
 801ecfe:	e78b      	b.n	801ec18 <__ssvfiscanf_r+0x1b0>
 801ed00:	2b04      	cmp	r3, #4
 801ed02:	dc0f      	bgt.n	801ed24 <__ssvfiscanf_r+0x2bc>
 801ed04:	466b      	mov	r3, sp
 801ed06:	4622      	mov	r2, r4
 801ed08:	a941      	add	r1, sp, #260	; 0x104
 801ed0a:	4630      	mov	r0, r6
 801ed0c:	f000 f9c2 	bl	801f094 <_scanf_i>
 801ed10:	e7b0      	b.n	801ec74 <__ssvfiscanf_r+0x20c>
 801ed12:	bf00      	nop
 801ed14:	0801e9b5 	.word	0x0801e9b5
 801ed18:	0801ea2f 	.word	0x0801ea2f
 801ed1c:	080230d9 	.word	0x080230d9
 801ed20:	080231df 	.word	0x080231df
 801ed24:	4b0b      	ldr	r3, [pc, #44]	; (801ed54 <__ssvfiscanf_r+0x2ec>)
 801ed26:	2b00      	cmp	r3, #0
 801ed28:	f43f aec5 	beq.w	801eab6 <__ssvfiscanf_r+0x4e>
 801ed2c:	466b      	mov	r3, sp
 801ed2e:	4622      	mov	r2, r4
 801ed30:	a941      	add	r1, sp, #260	; 0x104
 801ed32:	4630      	mov	r0, r6
 801ed34:	f7fc fca2 	bl	801b67c <_scanf_float>
 801ed38:	e79c      	b.n	801ec74 <__ssvfiscanf_r+0x20c>
 801ed3a:	89a3      	ldrh	r3, [r4, #12]
 801ed3c:	f013 0f40 	tst.w	r3, #64	; 0x40
 801ed40:	bf18      	it	ne
 801ed42:	f04f 30ff 	movne.w	r0, #4294967295
 801ed46:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801ed4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ed4e:	9844      	ldr	r0, [sp, #272]	; 0x110
 801ed50:	e7f9      	b.n	801ed46 <__ssvfiscanf_r+0x2de>
 801ed52:	bf00      	nop
 801ed54:	0801b67d 	.word	0x0801b67d

0801ed58 <__sfputc_r>:
 801ed58:	6893      	ldr	r3, [r2, #8]
 801ed5a:	3b01      	subs	r3, #1
 801ed5c:	2b00      	cmp	r3, #0
 801ed5e:	b410      	push	{r4}
 801ed60:	6093      	str	r3, [r2, #8]
 801ed62:	da08      	bge.n	801ed76 <__sfputc_r+0x1e>
 801ed64:	6994      	ldr	r4, [r2, #24]
 801ed66:	42a3      	cmp	r3, r4
 801ed68:	db01      	blt.n	801ed6e <__sfputc_r+0x16>
 801ed6a:	290a      	cmp	r1, #10
 801ed6c:	d103      	bne.n	801ed76 <__sfputc_r+0x1e>
 801ed6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ed72:	f7fd b80a 	b.w	801bd8a <__swbuf_r>
 801ed76:	6813      	ldr	r3, [r2, #0]
 801ed78:	1c58      	adds	r0, r3, #1
 801ed7a:	6010      	str	r0, [r2, #0]
 801ed7c:	7019      	strb	r1, [r3, #0]
 801ed7e:	4608      	mov	r0, r1
 801ed80:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ed84:	4770      	bx	lr

0801ed86 <__sfputs_r>:
 801ed86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed88:	4606      	mov	r6, r0
 801ed8a:	460f      	mov	r7, r1
 801ed8c:	4614      	mov	r4, r2
 801ed8e:	18d5      	adds	r5, r2, r3
 801ed90:	42ac      	cmp	r4, r5
 801ed92:	d101      	bne.n	801ed98 <__sfputs_r+0x12>
 801ed94:	2000      	movs	r0, #0
 801ed96:	e007      	b.n	801eda8 <__sfputs_r+0x22>
 801ed98:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ed9c:	463a      	mov	r2, r7
 801ed9e:	4630      	mov	r0, r6
 801eda0:	f7ff ffda 	bl	801ed58 <__sfputc_r>
 801eda4:	1c43      	adds	r3, r0, #1
 801eda6:	d1f3      	bne.n	801ed90 <__sfputs_r+0xa>
 801eda8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801edac <_vfiprintf_r>:
 801edac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edb0:	460d      	mov	r5, r1
 801edb2:	b09d      	sub	sp, #116	; 0x74
 801edb4:	4614      	mov	r4, r2
 801edb6:	4698      	mov	r8, r3
 801edb8:	4606      	mov	r6, r0
 801edba:	b118      	cbz	r0, 801edc4 <_vfiprintf_r+0x18>
 801edbc:	6a03      	ldr	r3, [r0, #32]
 801edbe:	b90b      	cbnz	r3, 801edc4 <_vfiprintf_r+0x18>
 801edc0:	f7fc fef8 	bl	801bbb4 <__sinit>
 801edc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801edc6:	07d9      	lsls	r1, r3, #31
 801edc8:	d405      	bmi.n	801edd6 <_vfiprintf_r+0x2a>
 801edca:	89ab      	ldrh	r3, [r5, #12]
 801edcc:	059a      	lsls	r2, r3, #22
 801edce:	d402      	bmi.n	801edd6 <_vfiprintf_r+0x2a>
 801edd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801edd2:	f7fd fa64 	bl	801c29e <__retarget_lock_acquire_recursive>
 801edd6:	89ab      	ldrh	r3, [r5, #12]
 801edd8:	071b      	lsls	r3, r3, #28
 801edda:	d501      	bpl.n	801ede0 <_vfiprintf_r+0x34>
 801eddc:	692b      	ldr	r3, [r5, #16]
 801edde:	b99b      	cbnz	r3, 801ee08 <_vfiprintf_r+0x5c>
 801ede0:	4629      	mov	r1, r5
 801ede2:	4630      	mov	r0, r6
 801ede4:	f7fd f80e 	bl	801be04 <__swsetup_r>
 801ede8:	b170      	cbz	r0, 801ee08 <_vfiprintf_r+0x5c>
 801edea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801edec:	07dc      	lsls	r4, r3, #31
 801edee:	d504      	bpl.n	801edfa <_vfiprintf_r+0x4e>
 801edf0:	f04f 30ff 	mov.w	r0, #4294967295
 801edf4:	b01d      	add	sp, #116	; 0x74
 801edf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edfa:	89ab      	ldrh	r3, [r5, #12]
 801edfc:	0598      	lsls	r0, r3, #22
 801edfe:	d4f7      	bmi.n	801edf0 <_vfiprintf_r+0x44>
 801ee00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ee02:	f7fd fa4d 	bl	801c2a0 <__retarget_lock_release_recursive>
 801ee06:	e7f3      	b.n	801edf0 <_vfiprintf_r+0x44>
 801ee08:	2300      	movs	r3, #0
 801ee0a:	9309      	str	r3, [sp, #36]	; 0x24
 801ee0c:	2320      	movs	r3, #32
 801ee0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ee12:	f8cd 800c 	str.w	r8, [sp, #12]
 801ee16:	2330      	movs	r3, #48	; 0x30
 801ee18:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801efcc <_vfiprintf_r+0x220>
 801ee1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ee20:	f04f 0901 	mov.w	r9, #1
 801ee24:	4623      	mov	r3, r4
 801ee26:	469a      	mov	sl, r3
 801ee28:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ee2c:	b10a      	cbz	r2, 801ee32 <_vfiprintf_r+0x86>
 801ee2e:	2a25      	cmp	r2, #37	; 0x25
 801ee30:	d1f9      	bne.n	801ee26 <_vfiprintf_r+0x7a>
 801ee32:	ebba 0b04 	subs.w	fp, sl, r4
 801ee36:	d00b      	beq.n	801ee50 <_vfiprintf_r+0xa4>
 801ee38:	465b      	mov	r3, fp
 801ee3a:	4622      	mov	r2, r4
 801ee3c:	4629      	mov	r1, r5
 801ee3e:	4630      	mov	r0, r6
 801ee40:	f7ff ffa1 	bl	801ed86 <__sfputs_r>
 801ee44:	3001      	adds	r0, #1
 801ee46:	f000 80a9 	beq.w	801ef9c <_vfiprintf_r+0x1f0>
 801ee4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ee4c:	445a      	add	r2, fp
 801ee4e:	9209      	str	r2, [sp, #36]	; 0x24
 801ee50:	f89a 3000 	ldrb.w	r3, [sl]
 801ee54:	2b00      	cmp	r3, #0
 801ee56:	f000 80a1 	beq.w	801ef9c <_vfiprintf_r+0x1f0>
 801ee5a:	2300      	movs	r3, #0
 801ee5c:	f04f 32ff 	mov.w	r2, #4294967295
 801ee60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ee64:	f10a 0a01 	add.w	sl, sl, #1
 801ee68:	9304      	str	r3, [sp, #16]
 801ee6a:	9307      	str	r3, [sp, #28]
 801ee6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ee70:	931a      	str	r3, [sp, #104]	; 0x68
 801ee72:	4654      	mov	r4, sl
 801ee74:	2205      	movs	r2, #5
 801ee76:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ee7a:	4854      	ldr	r0, [pc, #336]	; (801efcc <_vfiprintf_r+0x220>)
 801ee7c:	f7e1 f9c0 	bl	8000200 <memchr>
 801ee80:	9a04      	ldr	r2, [sp, #16]
 801ee82:	b9d8      	cbnz	r0, 801eebc <_vfiprintf_r+0x110>
 801ee84:	06d1      	lsls	r1, r2, #27
 801ee86:	bf44      	itt	mi
 801ee88:	2320      	movmi	r3, #32
 801ee8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ee8e:	0713      	lsls	r3, r2, #28
 801ee90:	bf44      	itt	mi
 801ee92:	232b      	movmi	r3, #43	; 0x2b
 801ee94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ee98:	f89a 3000 	ldrb.w	r3, [sl]
 801ee9c:	2b2a      	cmp	r3, #42	; 0x2a
 801ee9e:	d015      	beq.n	801eecc <_vfiprintf_r+0x120>
 801eea0:	9a07      	ldr	r2, [sp, #28]
 801eea2:	4654      	mov	r4, sl
 801eea4:	2000      	movs	r0, #0
 801eea6:	f04f 0c0a 	mov.w	ip, #10
 801eeaa:	4621      	mov	r1, r4
 801eeac:	f811 3b01 	ldrb.w	r3, [r1], #1
 801eeb0:	3b30      	subs	r3, #48	; 0x30
 801eeb2:	2b09      	cmp	r3, #9
 801eeb4:	d94d      	bls.n	801ef52 <_vfiprintf_r+0x1a6>
 801eeb6:	b1b0      	cbz	r0, 801eee6 <_vfiprintf_r+0x13a>
 801eeb8:	9207      	str	r2, [sp, #28]
 801eeba:	e014      	b.n	801eee6 <_vfiprintf_r+0x13a>
 801eebc:	eba0 0308 	sub.w	r3, r0, r8
 801eec0:	fa09 f303 	lsl.w	r3, r9, r3
 801eec4:	4313      	orrs	r3, r2
 801eec6:	9304      	str	r3, [sp, #16]
 801eec8:	46a2      	mov	sl, r4
 801eeca:	e7d2      	b.n	801ee72 <_vfiprintf_r+0xc6>
 801eecc:	9b03      	ldr	r3, [sp, #12]
 801eece:	1d19      	adds	r1, r3, #4
 801eed0:	681b      	ldr	r3, [r3, #0]
 801eed2:	9103      	str	r1, [sp, #12]
 801eed4:	2b00      	cmp	r3, #0
 801eed6:	bfbb      	ittet	lt
 801eed8:	425b      	neglt	r3, r3
 801eeda:	f042 0202 	orrlt.w	r2, r2, #2
 801eede:	9307      	strge	r3, [sp, #28]
 801eee0:	9307      	strlt	r3, [sp, #28]
 801eee2:	bfb8      	it	lt
 801eee4:	9204      	strlt	r2, [sp, #16]
 801eee6:	7823      	ldrb	r3, [r4, #0]
 801eee8:	2b2e      	cmp	r3, #46	; 0x2e
 801eeea:	d10c      	bne.n	801ef06 <_vfiprintf_r+0x15a>
 801eeec:	7863      	ldrb	r3, [r4, #1]
 801eeee:	2b2a      	cmp	r3, #42	; 0x2a
 801eef0:	d134      	bne.n	801ef5c <_vfiprintf_r+0x1b0>
 801eef2:	9b03      	ldr	r3, [sp, #12]
 801eef4:	1d1a      	adds	r2, r3, #4
 801eef6:	681b      	ldr	r3, [r3, #0]
 801eef8:	9203      	str	r2, [sp, #12]
 801eefa:	2b00      	cmp	r3, #0
 801eefc:	bfb8      	it	lt
 801eefe:	f04f 33ff 	movlt.w	r3, #4294967295
 801ef02:	3402      	adds	r4, #2
 801ef04:	9305      	str	r3, [sp, #20]
 801ef06:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801efdc <_vfiprintf_r+0x230>
 801ef0a:	7821      	ldrb	r1, [r4, #0]
 801ef0c:	2203      	movs	r2, #3
 801ef0e:	4650      	mov	r0, sl
 801ef10:	f7e1 f976 	bl	8000200 <memchr>
 801ef14:	b138      	cbz	r0, 801ef26 <_vfiprintf_r+0x17a>
 801ef16:	9b04      	ldr	r3, [sp, #16]
 801ef18:	eba0 000a 	sub.w	r0, r0, sl
 801ef1c:	2240      	movs	r2, #64	; 0x40
 801ef1e:	4082      	lsls	r2, r0
 801ef20:	4313      	orrs	r3, r2
 801ef22:	3401      	adds	r4, #1
 801ef24:	9304      	str	r3, [sp, #16]
 801ef26:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ef2a:	4829      	ldr	r0, [pc, #164]	; (801efd0 <_vfiprintf_r+0x224>)
 801ef2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ef30:	2206      	movs	r2, #6
 801ef32:	f7e1 f965 	bl	8000200 <memchr>
 801ef36:	2800      	cmp	r0, #0
 801ef38:	d03f      	beq.n	801efba <_vfiprintf_r+0x20e>
 801ef3a:	4b26      	ldr	r3, [pc, #152]	; (801efd4 <_vfiprintf_r+0x228>)
 801ef3c:	bb1b      	cbnz	r3, 801ef86 <_vfiprintf_r+0x1da>
 801ef3e:	9b03      	ldr	r3, [sp, #12]
 801ef40:	3307      	adds	r3, #7
 801ef42:	f023 0307 	bic.w	r3, r3, #7
 801ef46:	3308      	adds	r3, #8
 801ef48:	9303      	str	r3, [sp, #12]
 801ef4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ef4c:	443b      	add	r3, r7
 801ef4e:	9309      	str	r3, [sp, #36]	; 0x24
 801ef50:	e768      	b.n	801ee24 <_vfiprintf_r+0x78>
 801ef52:	fb0c 3202 	mla	r2, ip, r2, r3
 801ef56:	460c      	mov	r4, r1
 801ef58:	2001      	movs	r0, #1
 801ef5a:	e7a6      	b.n	801eeaa <_vfiprintf_r+0xfe>
 801ef5c:	2300      	movs	r3, #0
 801ef5e:	3401      	adds	r4, #1
 801ef60:	9305      	str	r3, [sp, #20]
 801ef62:	4619      	mov	r1, r3
 801ef64:	f04f 0c0a 	mov.w	ip, #10
 801ef68:	4620      	mov	r0, r4
 801ef6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ef6e:	3a30      	subs	r2, #48	; 0x30
 801ef70:	2a09      	cmp	r2, #9
 801ef72:	d903      	bls.n	801ef7c <_vfiprintf_r+0x1d0>
 801ef74:	2b00      	cmp	r3, #0
 801ef76:	d0c6      	beq.n	801ef06 <_vfiprintf_r+0x15a>
 801ef78:	9105      	str	r1, [sp, #20]
 801ef7a:	e7c4      	b.n	801ef06 <_vfiprintf_r+0x15a>
 801ef7c:	fb0c 2101 	mla	r1, ip, r1, r2
 801ef80:	4604      	mov	r4, r0
 801ef82:	2301      	movs	r3, #1
 801ef84:	e7f0      	b.n	801ef68 <_vfiprintf_r+0x1bc>
 801ef86:	ab03      	add	r3, sp, #12
 801ef88:	9300      	str	r3, [sp, #0]
 801ef8a:	462a      	mov	r2, r5
 801ef8c:	4b12      	ldr	r3, [pc, #72]	; (801efd8 <_vfiprintf_r+0x22c>)
 801ef8e:	a904      	add	r1, sp, #16
 801ef90:	4630      	mov	r0, r6
 801ef92:	f7fb ffad 	bl	801aef0 <_printf_float>
 801ef96:	4607      	mov	r7, r0
 801ef98:	1c78      	adds	r0, r7, #1
 801ef9a:	d1d6      	bne.n	801ef4a <_vfiprintf_r+0x19e>
 801ef9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ef9e:	07d9      	lsls	r1, r3, #31
 801efa0:	d405      	bmi.n	801efae <_vfiprintf_r+0x202>
 801efa2:	89ab      	ldrh	r3, [r5, #12]
 801efa4:	059a      	lsls	r2, r3, #22
 801efa6:	d402      	bmi.n	801efae <_vfiprintf_r+0x202>
 801efa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801efaa:	f7fd f979 	bl	801c2a0 <__retarget_lock_release_recursive>
 801efae:	89ab      	ldrh	r3, [r5, #12]
 801efb0:	065b      	lsls	r3, r3, #25
 801efb2:	f53f af1d 	bmi.w	801edf0 <_vfiprintf_r+0x44>
 801efb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801efb8:	e71c      	b.n	801edf4 <_vfiprintf_r+0x48>
 801efba:	ab03      	add	r3, sp, #12
 801efbc:	9300      	str	r3, [sp, #0]
 801efbe:	462a      	mov	r2, r5
 801efc0:	4b05      	ldr	r3, [pc, #20]	; (801efd8 <_vfiprintf_r+0x22c>)
 801efc2:	a904      	add	r1, sp, #16
 801efc4:	4630      	mov	r0, r6
 801efc6:	f7fc fa37 	bl	801b438 <_printf_i>
 801efca:	e7e4      	b.n	801ef96 <_vfiprintf_r+0x1ea>
 801efcc:	080231d9 	.word	0x080231d9
 801efd0:	080231e3 	.word	0x080231e3
 801efd4:	0801aef1 	.word	0x0801aef1
 801efd8:	0801ed87 	.word	0x0801ed87
 801efdc:	080231df 	.word	0x080231df

0801efe0 <_scanf_chars>:
 801efe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801efe4:	4615      	mov	r5, r2
 801efe6:	688a      	ldr	r2, [r1, #8]
 801efe8:	4680      	mov	r8, r0
 801efea:	460c      	mov	r4, r1
 801efec:	b932      	cbnz	r2, 801effc <_scanf_chars+0x1c>
 801efee:	698a      	ldr	r2, [r1, #24]
 801eff0:	2a00      	cmp	r2, #0
 801eff2:	bf0c      	ite	eq
 801eff4:	2201      	moveq	r2, #1
 801eff6:	f04f 32ff 	movne.w	r2, #4294967295
 801effa:	608a      	str	r2, [r1, #8]
 801effc:	6822      	ldr	r2, [r4, #0]
 801effe:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801f090 <_scanf_chars+0xb0>
 801f002:	06d1      	lsls	r1, r2, #27
 801f004:	bf5f      	itttt	pl
 801f006:	681a      	ldrpl	r2, [r3, #0]
 801f008:	1d11      	addpl	r1, r2, #4
 801f00a:	6019      	strpl	r1, [r3, #0]
 801f00c:	6816      	ldrpl	r6, [r2, #0]
 801f00e:	2700      	movs	r7, #0
 801f010:	69a0      	ldr	r0, [r4, #24]
 801f012:	b188      	cbz	r0, 801f038 <_scanf_chars+0x58>
 801f014:	2801      	cmp	r0, #1
 801f016:	d107      	bne.n	801f028 <_scanf_chars+0x48>
 801f018:	682a      	ldr	r2, [r5, #0]
 801f01a:	7811      	ldrb	r1, [r2, #0]
 801f01c:	6962      	ldr	r2, [r4, #20]
 801f01e:	5c52      	ldrb	r2, [r2, r1]
 801f020:	b952      	cbnz	r2, 801f038 <_scanf_chars+0x58>
 801f022:	2f00      	cmp	r7, #0
 801f024:	d031      	beq.n	801f08a <_scanf_chars+0xaa>
 801f026:	e022      	b.n	801f06e <_scanf_chars+0x8e>
 801f028:	2802      	cmp	r0, #2
 801f02a:	d120      	bne.n	801f06e <_scanf_chars+0x8e>
 801f02c:	682b      	ldr	r3, [r5, #0]
 801f02e:	781b      	ldrb	r3, [r3, #0]
 801f030:	f819 3003 	ldrb.w	r3, [r9, r3]
 801f034:	071b      	lsls	r3, r3, #28
 801f036:	d41a      	bmi.n	801f06e <_scanf_chars+0x8e>
 801f038:	6823      	ldr	r3, [r4, #0]
 801f03a:	06da      	lsls	r2, r3, #27
 801f03c:	bf5e      	ittt	pl
 801f03e:	682b      	ldrpl	r3, [r5, #0]
 801f040:	781b      	ldrbpl	r3, [r3, #0]
 801f042:	f806 3b01 	strbpl.w	r3, [r6], #1
 801f046:	682a      	ldr	r2, [r5, #0]
 801f048:	686b      	ldr	r3, [r5, #4]
 801f04a:	3201      	adds	r2, #1
 801f04c:	602a      	str	r2, [r5, #0]
 801f04e:	68a2      	ldr	r2, [r4, #8]
 801f050:	3b01      	subs	r3, #1
 801f052:	3a01      	subs	r2, #1
 801f054:	606b      	str	r3, [r5, #4]
 801f056:	3701      	adds	r7, #1
 801f058:	60a2      	str	r2, [r4, #8]
 801f05a:	b142      	cbz	r2, 801f06e <_scanf_chars+0x8e>
 801f05c:	2b00      	cmp	r3, #0
 801f05e:	dcd7      	bgt.n	801f010 <_scanf_chars+0x30>
 801f060:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801f064:	4629      	mov	r1, r5
 801f066:	4640      	mov	r0, r8
 801f068:	4798      	blx	r3
 801f06a:	2800      	cmp	r0, #0
 801f06c:	d0d0      	beq.n	801f010 <_scanf_chars+0x30>
 801f06e:	6823      	ldr	r3, [r4, #0]
 801f070:	f013 0310 	ands.w	r3, r3, #16
 801f074:	d105      	bne.n	801f082 <_scanf_chars+0xa2>
 801f076:	68e2      	ldr	r2, [r4, #12]
 801f078:	3201      	adds	r2, #1
 801f07a:	60e2      	str	r2, [r4, #12]
 801f07c:	69a2      	ldr	r2, [r4, #24]
 801f07e:	b102      	cbz	r2, 801f082 <_scanf_chars+0xa2>
 801f080:	7033      	strb	r3, [r6, #0]
 801f082:	6923      	ldr	r3, [r4, #16]
 801f084:	443b      	add	r3, r7
 801f086:	6123      	str	r3, [r4, #16]
 801f088:	2000      	movs	r0, #0
 801f08a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f08e:	bf00      	nop
 801f090:	080230d9 	.word	0x080230d9

0801f094 <_scanf_i>:
 801f094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f098:	4698      	mov	r8, r3
 801f09a:	4b74      	ldr	r3, [pc, #464]	; (801f26c <_scanf_i+0x1d8>)
 801f09c:	460c      	mov	r4, r1
 801f09e:	4682      	mov	sl, r0
 801f0a0:	4616      	mov	r6, r2
 801f0a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801f0a6:	b087      	sub	sp, #28
 801f0a8:	ab03      	add	r3, sp, #12
 801f0aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801f0ae:	4b70      	ldr	r3, [pc, #448]	; (801f270 <_scanf_i+0x1dc>)
 801f0b0:	69a1      	ldr	r1, [r4, #24]
 801f0b2:	4a70      	ldr	r2, [pc, #448]	; (801f274 <_scanf_i+0x1e0>)
 801f0b4:	2903      	cmp	r1, #3
 801f0b6:	bf18      	it	ne
 801f0b8:	461a      	movne	r2, r3
 801f0ba:	68a3      	ldr	r3, [r4, #8]
 801f0bc:	9201      	str	r2, [sp, #4]
 801f0be:	1e5a      	subs	r2, r3, #1
 801f0c0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801f0c4:	bf88      	it	hi
 801f0c6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801f0ca:	4627      	mov	r7, r4
 801f0cc:	bf82      	ittt	hi
 801f0ce:	eb03 0905 	addhi.w	r9, r3, r5
 801f0d2:	f240 135d 	movwhi	r3, #349	; 0x15d
 801f0d6:	60a3      	strhi	r3, [r4, #8]
 801f0d8:	f857 3b1c 	ldr.w	r3, [r7], #28
 801f0dc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801f0e0:	bf98      	it	ls
 801f0e2:	f04f 0900 	movls.w	r9, #0
 801f0e6:	6023      	str	r3, [r4, #0]
 801f0e8:	463d      	mov	r5, r7
 801f0ea:	f04f 0b00 	mov.w	fp, #0
 801f0ee:	6831      	ldr	r1, [r6, #0]
 801f0f0:	ab03      	add	r3, sp, #12
 801f0f2:	7809      	ldrb	r1, [r1, #0]
 801f0f4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801f0f8:	2202      	movs	r2, #2
 801f0fa:	f7e1 f881 	bl	8000200 <memchr>
 801f0fe:	b328      	cbz	r0, 801f14c <_scanf_i+0xb8>
 801f100:	f1bb 0f01 	cmp.w	fp, #1
 801f104:	d159      	bne.n	801f1ba <_scanf_i+0x126>
 801f106:	6862      	ldr	r2, [r4, #4]
 801f108:	b92a      	cbnz	r2, 801f116 <_scanf_i+0x82>
 801f10a:	6822      	ldr	r2, [r4, #0]
 801f10c:	2308      	movs	r3, #8
 801f10e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f112:	6063      	str	r3, [r4, #4]
 801f114:	6022      	str	r2, [r4, #0]
 801f116:	6822      	ldr	r2, [r4, #0]
 801f118:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801f11c:	6022      	str	r2, [r4, #0]
 801f11e:	68a2      	ldr	r2, [r4, #8]
 801f120:	1e51      	subs	r1, r2, #1
 801f122:	60a1      	str	r1, [r4, #8]
 801f124:	b192      	cbz	r2, 801f14c <_scanf_i+0xb8>
 801f126:	6832      	ldr	r2, [r6, #0]
 801f128:	1c51      	adds	r1, r2, #1
 801f12a:	6031      	str	r1, [r6, #0]
 801f12c:	7812      	ldrb	r2, [r2, #0]
 801f12e:	f805 2b01 	strb.w	r2, [r5], #1
 801f132:	6872      	ldr	r2, [r6, #4]
 801f134:	3a01      	subs	r2, #1
 801f136:	2a00      	cmp	r2, #0
 801f138:	6072      	str	r2, [r6, #4]
 801f13a:	dc07      	bgt.n	801f14c <_scanf_i+0xb8>
 801f13c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801f140:	4631      	mov	r1, r6
 801f142:	4650      	mov	r0, sl
 801f144:	4790      	blx	r2
 801f146:	2800      	cmp	r0, #0
 801f148:	f040 8085 	bne.w	801f256 <_scanf_i+0x1c2>
 801f14c:	f10b 0b01 	add.w	fp, fp, #1
 801f150:	f1bb 0f03 	cmp.w	fp, #3
 801f154:	d1cb      	bne.n	801f0ee <_scanf_i+0x5a>
 801f156:	6863      	ldr	r3, [r4, #4]
 801f158:	b90b      	cbnz	r3, 801f15e <_scanf_i+0xca>
 801f15a:	230a      	movs	r3, #10
 801f15c:	6063      	str	r3, [r4, #4]
 801f15e:	6863      	ldr	r3, [r4, #4]
 801f160:	4945      	ldr	r1, [pc, #276]	; (801f278 <_scanf_i+0x1e4>)
 801f162:	6960      	ldr	r0, [r4, #20]
 801f164:	1ac9      	subs	r1, r1, r3
 801f166:	f000 f999 	bl	801f49c <__sccl>
 801f16a:	f04f 0b00 	mov.w	fp, #0
 801f16e:	68a3      	ldr	r3, [r4, #8]
 801f170:	6822      	ldr	r2, [r4, #0]
 801f172:	2b00      	cmp	r3, #0
 801f174:	d03d      	beq.n	801f1f2 <_scanf_i+0x15e>
 801f176:	6831      	ldr	r1, [r6, #0]
 801f178:	6960      	ldr	r0, [r4, #20]
 801f17a:	f891 c000 	ldrb.w	ip, [r1]
 801f17e:	f810 000c 	ldrb.w	r0, [r0, ip]
 801f182:	2800      	cmp	r0, #0
 801f184:	d035      	beq.n	801f1f2 <_scanf_i+0x15e>
 801f186:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801f18a:	d124      	bne.n	801f1d6 <_scanf_i+0x142>
 801f18c:	0510      	lsls	r0, r2, #20
 801f18e:	d522      	bpl.n	801f1d6 <_scanf_i+0x142>
 801f190:	f10b 0b01 	add.w	fp, fp, #1
 801f194:	f1b9 0f00 	cmp.w	r9, #0
 801f198:	d003      	beq.n	801f1a2 <_scanf_i+0x10e>
 801f19a:	3301      	adds	r3, #1
 801f19c:	f109 39ff 	add.w	r9, r9, #4294967295
 801f1a0:	60a3      	str	r3, [r4, #8]
 801f1a2:	6873      	ldr	r3, [r6, #4]
 801f1a4:	3b01      	subs	r3, #1
 801f1a6:	2b00      	cmp	r3, #0
 801f1a8:	6073      	str	r3, [r6, #4]
 801f1aa:	dd1b      	ble.n	801f1e4 <_scanf_i+0x150>
 801f1ac:	6833      	ldr	r3, [r6, #0]
 801f1ae:	3301      	adds	r3, #1
 801f1b0:	6033      	str	r3, [r6, #0]
 801f1b2:	68a3      	ldr	r3, [r4, #8]
 801f1b4:	3b01      	subs	r3, #1
 801f1b6:	60a3      	str	r3, [r4, #8]
 801f1b8:	e7d9      	b.n	801f16e <_scanf_i+0xda>
 801f1ba:	f1bb 0f02 	cmp.w	fp, #2
 801f1be:	d1ae      	bne.n	801f11e <_scanf_i+0x8a>
 801f1c0:	6822      	ldr	r2, [r4, #0]
 801f1c2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801f1c6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801f1ca:	d1bf      	bne.n	801f14c <_scanf_i+0xb8>
 801f1cc:	2310      	movs	r3, #16
 801f1ce:	6063      	str	r3, [r4, #4]
 801f1d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f1d4:	e7a2      	b.n	801f11c <_scanf_i+0x88>
 801f1d6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801f1da:	6022      	str	r2, [r4, #0]
 801f1dc:	780b      	ldrb	r3, [r1, #0]
 801f1de:	f805 3b01 	strb.w	r3, [r5], #1
 801f1e2:	e7de      	b.n	801f1a2 <_scanf_i+0x10e>
 801f1e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801f1e8:	4631      	mov	r1, r6
 801f1ea:	4650      	mov	r0, sl
 801f1ec:	4798      	blx	r3
 801f1ee:	2800      	cmp	r0, #0
 801f1f0:	d0df      	beq.n	801f1b2 <_scanf_i+0x11e>
 801f1f2:	6823      	ldr	r3, [r4, #0]
 801f1f4:	05d9      	lsls	r1, r3, #23
 801f1f6:	d50d      	bpl.n	801f214 <_scanf_i+0x180>
 801f1f8:	42bd      	cmp	r5, r7
 801f1fa:	d909      	bls.n	801f210 <_scanf_i+0x17c>
 801f1fc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801f200:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f204:	4632      	mov	r2, r6
 801f206:	4650      	mov	r0, sl
 801f208:	4798      	blx	r3
 801f20a:	f105 39ff 	add.w	r9, r5, #4294967295
 801f20e:	464d      	mov	r5, r9
 801f210:	42bd      	cmp	r5, r7
 801f212:	d028      	beq.n	801f266 <_scanf_i+0x1d2>
 801f214:	6822      	ldr	r2, [r4, #0]
 801f216:	f012 0210 	ands.w	r2, r2, #16
 801f21a:	d113      	bne.n	801f244 <_scanf_i+0x1b0>
 801f21c:	702a      	strb	r2, [r5, #0]
 801f21e:	6863      	ldr	r3, [r4, #4]
 801f220:	9e01      	ldr	r6, [sp, #4]
 801f222:	4639      	mov	r1, r7
 801f224:	4650      	mov	r0, sl
 801f226:	47b0      	blx	r6
 801f228:	f8d8 3000 	ldr.w	r3, [r8]
 801f22c:	6821      	ldr	r1, [r4, #0]
 801f22e:	1d1a      	adds	r2, r3, #4
 801f230:	f8c8 2000 	str.w	r2, [r8]
 801f234:	f011 0f20 	tst.w	r1, #32
 801f238:	681b      	ldr	r3, [r3, #0]
 801f23a:	d00f      	beq.n	801f25c <_scanf_i+0x1c8>
 801f23c:	6018      	str	r0, [r3, #0]
 801f23e:	68e3      	ldr	r3, [r4, #12]
 801f240:	3301      	adds	r3, #1
 801f242:	60e3      	str	r3, [r4, #12]
 801f244:	6923      	ldr	r3, [r4, #16]
 801f246:	1bed      	subs	r5, r5, r7
 801f248:	445d      	add	r5, fp
 801f24a:	442b      	add	r3, r5
 801f24c:	6123      	str	r3, [r4, #16]
 801f24e:	2000      	movs	r0, #0
 801f250:	b007      	add	sp, #28
 801f252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f256:	f04f 0b00 	mov.w	fp, #0
 801f25a:	e7ca      	b.n	801f1f2 <_scanf_i+0x15e>
 801f25c:	07ca      	lsls	r2, r1, #31
 801f25e:	bf4c      	ite	mi
 801f260:	8018      	strhmi	r0, [r3, #0]
 801f262:	6018      	strpl	r0, [r3, #0]
 801f264:	e7eb      	b.n	801f23e <_scanf_i+0x1aa>
 801f266:	2001      	movs	r0, #1
 801f268:	e7f2      	b.n	801f250 <_scanf_i+0x1bc>
 801f26a:	bf00      	nop
 801f26c:	080222ec 	.word	0x080222ec
 801f270:	0801fe75 	.word	0x0801fe75
 801f274:	0801e701 	.word	0x0801e701
 801f278:	080231fa 	.word	0x080231fa

0801f27c <__sflush_r>:
 801f27c:	898a      	ldrh	r2, [r1, #12]
 801f27e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f282:	4605      	mov	r5, r0
 801f284:	0710      	lsls	r0, r2, #28
 801f286:	460c      	mov	r4, r1
 801f288:	d458      	bmi.n	801f33c <__sflush_r+0xc0>
 801f28a:	684b      	ldr	r3, [r1, #4]
 801f28c:	2b00      	cmp	r3, #0
 801f28e:	dc05      	bgt.n	801f29c <__sflush_r+0x20>
 801f290:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f292:	2b00      	cmp	r3, #0
 801f294:	dc02      	bgt.n	801f29c <__sflush_r+0x20>
 801f296:	2000      	movs	r0, #0
 801f298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f29c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f29e:	2e00      	cmp	r6, #0
 801f2a0:	d0f9      	beq.n	801f296 <__sflush_r+0x1a>
 801f2a2:	2300      	movs	r3, #0
 801f2a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f2a8:	682f      	ldr	r7, [r5, #0]
 801f2aa:	6a21      	ldr	r1, [r4, #32]
 801f2ac:	602b      	str	r3, [r5, #0]
 801f2ae:	d032      	beq.n	801f316 <__sflush_r+0x9a>
 801f2b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f2b2:	89a3      	ldrh	r3, [r4, #12]
 801f2b4:	075a      	lsls	r2, r3, #29
 801f2b6:	d505      	bpl.n	801f2c4 <__sflush_r+0x48>
 801f2b8:	6863      	ldr	r3, [r4, #4]
 801f2ba:	1ac0      	subs	r0, r0, r3
 801f2bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f2be:	b10b      	cbz	r3, 801f2c4 <__sflush_r+0x48>
 801f2c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f2c2:	1ac0      	subs	r0, r0, r3
 801f2c4:	2300      	movs	r3, #0
 801f2c6:	4602      	mov	r2, r0
 801f2c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f2ca:	6a21      	ldr	r1, [r4, #32]
 801f2cc:	4628      	mov	r0, r5
 801f2ce:	47b0      	blx	r6
 801f2d0:	1c43      	adds	r3, r0, #1
 801f2d2:	89a3      	ldrh	r3, [r4, #12]
 801f2d4:	d106      	bne.n	801f2e4 <__sflush_r+0x68>
 801f2d6:	6829      	ldr	r1, [r5, #0]
 801f2d8:	291d      	cmp	r1, #29
 801f2da:	d82b      	bhi.n	801f334 <__sflush_r+0xb8>
 801f2dc:	4a29      	ldr	r2, [pc, #164]	; (801f384 <__sflush_r+0x108>)
 801f2de:	410a      	asrs	r2, r1
 801f2e0:	07d6      	lsls	r6, r2, #31
 801f2e2:	d427      	bmi.n	801f334 <__sflush_r+0xb8>
 801f2e4:	2200      	movs	r2, #0
 801f2e6:	6062      	str	r2, [r4, #4]
 801f2e8:	04d9      	lsls	r1, r3, #19
 801f2ea:	6922      	ldr	r2, [r4, #16]
 801f2ec:	6022      	str	r2, [r4, #0]
 801f2ee:	d504      	bpl.n	801f2fa <__sflush_r+0x7e>
 801f2f0:	1c42      	adds	r2, r0, #1
 801f2f2:	d101      	bne.n	801f2f8 <__sflush_r+0x7c>
 801f2f4:	682b      	ldr	r3, [r5, #0]
 801f2f6:	b903      	cbnz	r3, 801f2fa <__sflush_r+0x7e>
 801f2f8:	6560      	str	r0, [r4, #84]	; 0x54
 801f2fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f2fc:	602f      	str	r7, [r5, #0]
 801f2fe:	2900      	cmp	r1, #0
 801f300:	d0c9      	beq.n	801f296 <__sflush_r+0x1a>
 801f302:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f306:	4299      	cmp	r1, r3
 801f308:	d002      	beq.n	801f310 <__sflush_r+0x94>
 801f30a:	4628      	mov	r0, r5
 801f30c:	f7fd fe6a 	bl	801cfe4 <_free_r>
 801f310:	2000      	movs	r0, #0
 801f312:	6360      	str	r0, [r4, #52]	; 0x34
 801f314:	e7c0      	b.n	801f298 <__sflush_r+0x1c>
 801f316:	2301      	movs	r3, #1
 801f318:	4628      	mov	r0, r5
 801f31a:	47b0      	blx	r6
 801f31c:	1c41      	adds	r1, r0, #1
 801f31e:	d1c8      	bne.n	801f2b2 <__sflush_r+0x36>
 801f320:	682b      	ldr	r3, [r5, #0]
 801f322:	2b00      	cmp	r3, #0
 801f324:	d0c5      	beq.n	801f2b2 <__sflush_r+0x36>
 801f326:	2b1d      	cmp	r3, #29
 801f328:	d001      	beq.n	801f32e <__sflush_r+0xb2>
 801f32a:	2b16      	cmp	r3, #22
 801f32c:	d101      	bne.n	801f332 <__sflush_r+0xb6>
 801f32e:	602f      	str	r7, [r5, #0]
 801f330:	e7b1      	b.n	801f296 <__sflush_r+0x1a>
 801f332:	89a3      	ldrh	r3, [r4, #12]
 801f334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f338:	81a3      	strh	r3, [r4, #12]
 801f33a:	e7ad      	b.n	801f298 <__sflush_r+0x1c>
 801f33c:	690f      	ldr	r7, [r1, #16]
 801f33e:	2f00      	cmp	r7, #0
 801f340:	d0a9      	beq.n	801f296 <__sflush_r+0x1a>
 801f342:	0793      	lsls	r3, r2, #30
 801f344:	680e      	ldr	r6, [r1, #0]
 801f346:	bf08      	it	eq
 801f348:	694b      	ldreq	r3, [r1, #20]
 801f34a:	600f      	str	r7, [r1, #0]
 801f34c:	bf18      	it	ne
 801f34e:	2300      	movne	r3, #0
 801f350:	eba6 0807 	sub.w	r8, r6, r7
 801f354:	608b      	str	r3, [r1, #8]
 801f356:	f1b8 0f00 	cmp.w	r8, #0
 801f35a:	dd9c      	ble.n	801f296 <__sflush_r+0x1a>
 801f35c:	6a21      	ldr	r1, [r4, #32]
 801f35e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f360:	4643      	mov	r3, r8
 801f362:	463a      	mov	r2, r7
 801f364:	4628      	mov	r0, r5
 801f366:	47b0      	blx	r6
 801f368:	2800      	cmp	r0, #0
 801f36a:	dc06      	bgt.n	801f37a <__sflush_r+0xfe>
 801f36c:	89a3      	ldrh	r3, [r4, #12]
 801f36e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f372:	81a3      	strh	r3, [r4, #12]
 801f374:	f04f 30ff 	mov.w	r0, #4294967295
 801f378:	e78e      	b.n	801f298 <__sflush_r+0x1c>
 801f37a:	4407      	add	r7, r0
 801f37c:	eba8 0800 	sub.w	r8, r8, r0
 801f380:	e7e9      	b.n	801f356 <__sflush_r+0xda>
 801f382:	bf00      	nop
 801f384:	dfbffffe 	.word	0xdfbffffe

0801f388 <_fflush_r>:
 801f388:	b538      	push	{r3, r4, r5, lr}
 801f38a:	690b      	ldr	r3, [r1, #16]
 801f38c:	4605      	mov	r5, r0
 801f38e:	460c      	mov	r4, r1
 801f390:	b913      	cbnz	r3, 801f398 <_fflush_r+0x10>
 801f392:	2500      	movs	r5, #0
 801f394:	4628      	mov	r0, r5
 801f396:	bd38      	pop	{r3, r4, r5, pc}
 801f398:	b118      	cbz	r0, 801f3a2 <_fflush_r+0x1a>
 801f39a:	6a03      	ldr	r3, [r0, #32]
 801f39c:	b90b      	cbnz	r3, 801f3a2 <_fflush_r+0x1a>
 801f39e:	f7fc fc09 	bl	801bbb4 <__sinit>
 801f3a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f3a6:	2b00      	cmp	r3, #0
 801f3a8:	d0f3      	beq.n	801f392 <_fflush_r+0xa>
 801f3aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f3ac:	07d0      	lsls	r0, r2, #31
 801f3ae:	d404      	bmi.n	801f3ba <_fflush_r+0x32>
 801f3b0:	0599      	lsls	r1, r3, #22
 801f3b2:	d402      	bmi.n	801f3ba <_fflush_r+0x32>
 801f3b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f3b6:	f7fc ff72 	bl	801c29e <__retarget_lock_acquire_recursive>
 801f3ba:	4628      	mov	r0, r5
 801f3bc:	4621      	mov	r1, r4
 801f3be:	f7ff ff5d 	bl	801f27c <__sflush_r>
 801f3c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f3c4:	07da      	lsls	r2, r3, #31
 801f3c6:	4605      	mov	r5, r0
 801f3c8:	d4e4      	bmi.n	801f394 <_fflush_r+0xc>
 801f3ca:	89a3      	ldrh	r3, [r4, #12]
 801f3cc:	059b      	lsls	r3, r3, #22
 801f3ce:	d4e1      	bmi.n	801f394 <_fflush_r+0xc>
 801f3d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f3d2:	f7fc ff65 	bl	801c2a0 <__retarget_lock_release_recursive>
 801f3d6:	e7dd      	b.n	801f394 <_fflush_r+0xc>

0801f3d8 <__swhatbuf_r>:
 801f3d8:	b570      	push	{r4, r5, r6, lr}
 801f3da:	460c      	mov	r4, r1
 801f3dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f3e0:	2900      	cmp	r1, #0
 801f3e2:	b096      	sub	sp, #88	; 0x58
 801f3e4:	4615      	mov	r5, r2
 801f3e6:	461e      	mov	r6, r3
 801f3e8:	da0d      	bge.n	801f406 <__swhatbuf_r+0x2e>
 801f3ea:	89a3      	ldrh	r3, [r4, #12]
 801f3ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 801f3f0:	f04f 0100 	mov.w	r1, #0
 801f3f4:	bf0c      	ite	eq
 801f3f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801f3fa:	2340      	movne	r3, #64	; 0x40
 801f3fc:	2000      	movs	r0, #0
 801f3fe:	6031      	str	r1, [r6, #0]
 801f400:	602b      	str	r3, [r5, #0]
 801f402:	b016      	add	sp, #88	; 0x58
 801f404:	bd70      	pop	{r4, r5, r6, pc}
 801f406:	466a      	mov	r2, sp
 801f408:	f000 f8ec 	bl	801f5e4 <_fstat_r>
 801f40c:	2800      	cmp	r0, #0
 801f40e:	dbec      	blt.n	801f3ea <__swhatbuf_r+0x12>
 801f410:	9901      	ldr	r1, [sp, #4]
 801f412:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801f416:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801f41a:	4259      	negs	r1, r3
 801f41c:	4159      	adcs	r1, r3
 801f41e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f422:	e7eb      	b.n	801f3fc <__swhatbuf_r+0x24>

0801f424 <__smakebuf_r>:
 801f424:	898b      	ldrh	r3, [r1, #12]
 801f426:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f428:	079d      	lsls	r5, r3, #30
 801f42a:	4606      	mov	r6, r0
 801f42c:	460c      	mov	r4, r1
 801f42e:	d507      	bpl.n	801f440 <__smakebuf_r+0x1c>
 801f430:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f434:	6023      	str	r3, [r4, #0]
 801f436:	6123      	str	r3, [r4, #16]
 801f438:	2301      	movs	r3, #1
 801f43a:	6163      	str	r3, [r4, #20]
 801f43c:	b002      	add	sp, #8
 801f43e:	bd70      	pop	{r4, r5, r6, pc}
 801f440:	ab01      	add	r3, sp, #4
 801f442:	466a      	mov	r2, sp
 801f444:	f7ff ffc8 	bl	801f3d8 <__swhatbuf_r>
 801f448:	9900      	ldr	r1, [sp, #0]
 801f44a:	4605      	mov	r5, r0
 801f44c:	4630      	mov	r0, r6
 801f44e:	f7fb fc23 	bl	801ac98 <_malloc_r>
 801f452:	b948      	cbnz	r0, 801f468 <__smakebuf_r+0x44>
 801f454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f458:	059a      	lsls	r2, r3, #22
 801f45a:	d4ef      	bmi.n	801f43c <__smakebuf_r+0x18>
 801f45c:	f023 0303 	bic.w	r3, r3, #3
 801f460:	f043 0302 	orr.w	r3, r3, #2
 801f464:	81a3      	strh	r3, [r4, #12]
 801f466:	e7e3      	b.n	801f430 <__smakebuf_r+0xc>
 801f468:	89a3      	ldrh	r3, [r4, #12]
 801f46a:	6020      	str	r0, [r4, #0]
 801f46c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f470:	81a3      	strh	r3, [r4, #12]
 801f472:	9b00      	ldr	r3, [sp, #0]
 801f474:	6163      	str	r3, [r4, #20]
 801f476:	9b01      	ldr	r3, [sp, #4]
 801f478:	6120      	str	r0, [r4, #16]
 801f47a:	b15b      	cbz	r3, 801f494 <__smakebuf_r+0x70>
 801f47c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f480:	4630      	mov	r0, r6
 801f482:	f000 f8c1 	bl	801f608 <_isatty_r>
 801f486:	b128      	cbz	r0, 801f494 <__smakebuf_r+0x70>
 801f488:	89a3      	ldrh	r3, [r4, #12]
 801f48a:	f023 0303 	bic.w	r3, r3, #3
 801f48e:	f043 0301 	orr.w	r3, r3, #1
 801f492:	81a3      	strh	r3, [r4, #12]
 801f494:	89a3      	ldrh	r3, [r4, #12]
 801f496:	431d      	orrs	r5, r3
 801f498:	81a5      	strh	r5, [r4, #12]
 801f49a:	e7cf      	b.n	801f43c <__smakebuf_r+0x18>

0801f49c <__sccl>:
 801f49c:	b570      	push	{r4, r5, r6, lr}
 801f49e:	780b      	ldrb	r3, [r1, #0]
 801f4a0:	4604      	mov	r4, r0
 801f4a2:	2b5e      	cmp	r3, #94	; 0x5e
 801f4a4:	bf0b      	itete	eq
 801f4a6:	784b      	ldrbeq	r3, [r1, #1]
 801f4a8:	1c4a      	addne	r2, r1, #1
 801f4aa:	1c8a      	addeq	r2, r1, #2
 801f4ac:	2100      	movne	r1, #0
 801f4ae:	bf08      	it	eq
 801f4b0:	2101      	moveq	r1, #1
 801f4b2:	3801      	subs	r0, #1
 801f4b4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801f4b8:	f800 1f01 	strb.w	r1, [r0, #1]!
 801f4bc:	42a8      	cmp	r0, r5
 801f4be:	d1fb      	bne.n	801f4b8 <__sccl+0x1c>
 801f4c0:	b90b      	cbnz	r3, 801f4c6 <__sccl+0x2a>
 801f4c2:	1e50      	subs	r0, r2, #1
 801f4c4:	bd70      	pop	{r4, r5, r6, pc}
 801f4c6:	f081 0101 	eor.w	r1, r1, #1
 801f4ca:	54e1      	strb	r1, [r4, r3]
 801f4cc:	4610      	mov	r0, r2
 801f4ce:	4602      	mov	r2, r0
 801f4d0:	f812 5b01 	ldrb.w	r5, [r2], #1
 801f4d4:	2d2d      	cmp	r5, #45	; 0x2d
 801f4d6:	d005      	beq.n	801f4e4 <__sccl+0x48>
 801f4d8:	2d5d      	cmp	r5, #93	; 0x5d
 801f4da:	d016      	beq.n	801f50a <__sccl+0x6e>
 801f4dc:	2d00      	cmp	r5, #0
 801f4de:	d0f1      	beq.n	801f4c4 <__sccl+0x28>
 801f4e0:	462b      	mov	r3, r5
 801f4e2:	e7f2      	b.n	801f4ca <__sccl+0x2e>
 801f4e4:	7846      	ldrb	r6, [r0, #1]
 801f4e6:	2e5d      	cmp	r6, #93	; 0x5d
 801f4e8:	d0fa      	beq.n	801f4e0 <__sccl+0x44>
 801f4ea:	42b3      	cmp	r3, r6
 801f4ec:	dcf8      	bgt.n	801f4e0 <__sccl+0x44>
 801f4ee:	3002      	adds	r0, #2
 801f4f0:	461a      	mov	r2, r3
 801f4f2:	3201      	adds	r2, #1
 801f4f4:	4296      	cmp	r6, r2
 801f4f6:	54a1      	strb	r1, [r4, r2]
 801f4f8:	dcfb      	bgt.n	801f4f2 <__sccl+0x56>
 801f4fa:	1af2      	subs	r2, r6, r3
 801f4fc:	3a01      	subs	r2, #1
 801f4fe:	1c5d      	adds	r5, r3, #1
 801f500:	42b3      	cmp	r3, r6
 801f502:	bfa8      	it	ge
 801f504:	2200      	movge	r2, #0
 801f506:	18ab      	adds	r3, r5, r2
 801f508:	e7e1      	b.n	801f4ce <__sccl+0x32>
 801f50a:	4610      	mov	r0, r2
 801f50c:	e7da      	b.n	801f4c4 <__sccl+0x28>

0801f50e <__submore>:
 801f50e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f512:	460c      	mov	r4, r1
 801f514:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801f516:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f51a:	4299      	cmp	r1, r3
 801f51c:	d11d      	bne.n	801f55a <__submore+0x4c>
 801f51e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801f522:	f7fb fbb9 	bl	801ac98 <_malloc_r>
 801f526:	b918      	cbnz	r0, 801f530 <__submore+0x22>
 801f528:	f04f 30ff 	mov.w	r0, #4294967295
 801f52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f534:	63a3      	str	r3, [r4, #56]	; 0x38
 801f536:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801f53a:	6360      	str	r0, [r4, #52]	; 0x34
 801f53c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801f540:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801f544:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801f548:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801f54c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801f550:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801f554:	6020      	str	r0, [r4, #0]
 801f556:	2000      	movs	r0, #0
 801f558:	e7e8      	b.n	801f52c <__submore+0x1e>
 801f55a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801f55c:	0077      	lsls	r7, r6, #1
 801f55e:	463a      	mov	r2, r7
 801f560:	f000 fbe7 	bl	801fd32 <_realloc_r>
 801f564:	4605      	mov	r5, r0
 801f566:	2800      	cmp	r0, #0
 801f568:	d0de      	beq.n	801f528 <__submore+0x1a>
 801f56a:	eb00 0806 	add.w	r8, r0, r6
 801f56e:	4601      	mov	r1, r0
 801f570:	4632      	mov	r2, r6
 801f572:	4640      	mov	r0, r8
 801f574:	f7fc fe9d 	bl	801c2b2 <memcpy>
 801f578:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801f57c:	f8c4 8000 	str.w	r8, [r4]
 801f580:	e7e9      	b.n	801f556 <__submore+0x48>

0801f582 <_raise_r>:
 801f582:	291f      	cmp	r1, #31
 801f584:	b538      	push	{r3, r4, r5, lr}
 801f586:	4604      	mov	r4, r0
 801f588:	460d      	mov	r5, r1
 801f58a:	d904      	bls.n	801f596 <_raise_r+0x14>
 801f58c:	2316      	movs	r3, #22
 801f58e:	6003      	str	r3, [r0, #0]
 801f590:	f04f 30ff 	mov.w	r0, #4294967295
 801f594:	bd38      	pop	{r3, r4, r5, pc}
 801f596:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801f598:	b112      	cbz	r2, 801f5a0 <_raise_r+0x1e>
 801f59a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f59e:	b94b      	cbnz	r3, 801f5b4 <_raise_r+0x32>
 801f5a0:	4620      	mov	r0, r4
 801f5a2:	f000 f853 	bl	801f64c <_getpid_r>
 801f5a6:	462a      	mov	r2, r5
 801f5a8:	4601      	mov	r1, r0
 801f5aa:	4620      	mov	r0, r4
 801f5ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f5b0:	f000 b83a 	b.w	801f628 <_kill_r>
 801f5b4:	2b01      	cmp	r3, #1
 801f5b6:	d00a      	beq.n	801f5ce <_raise_r+0x4c>
 801f5b8:	1c59      	adds	r1, r3, #1
 801f5ba:	d103      	bne.n	801f5c4 <_raise_r+0x42>
 801f5bc:	2316      	movs	r3, #22
 801f5be:	6003      	str	r3, [r0, #0]
 801f5c0:	2001      	movs	r0, #1
 801f5c2:	e7e7      	b.n	801f594 <_raise_r+0x12>
 801f5c4:	2400      	movs	r4, #0
 801f5c6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f5ca:	4628      	mov	r0, r5
 801f5cc:	4798      	blx	r3
 801f5ce:	2000      	movs	r0, #0
 801f5d0:	e7e0      	b.n	801f594 <_raise_r+0x12>
	...

0801f5d4 <raise>:
 801f5d4:	4b02      	ldr	r3, [pc, #8]	; (801f5e0 <raise+0xc>)
 801f5d6:	4601      	mov	r1, r0
 801f5d8:	6818      	ldr	r0, [r3, #0]
 801f5da:	f7ff bfd2 	b.w	801f582 <_raise_r>
 801f5de:	bf00      	nop
 801f5e0:	20000168 	.word	0x20000168

0801f5e4 <_fstat_r>:
 801f5e4:	b538      	push	{r3, r4, r5, lr}
 801f5e6:	4d07      	ldr	r5, [pc, #28]	; (801f604 <_fstat_r+0x20>)
 801f5e8:	2300      	movs	r3, #0
 801f5ea:	4604      	mov	r4, r0
 801f5ec:	4608      	mov	r0, r1
 801f5ee:	4611      	mov	r1, r2
 801f5f0:	602b      	str	r3, [r5, #0]
 801f5f2:	f7e3 f8b0 	bl	8002756 <_fstat>
 801f5f6:	1c43      	adds	r3, r0, #1
 801f5f8:	d102      	bne.n	801f600 <_fstat_r+0x1c>
 801f5fa:	682b      	ldr	r3, [r5, #0]
 801f5fc:	b103      	cbz	r3, 801f600 <_fstat_r+0x1c>
 801f5fe:	6023      	str	r3, [r4, #0]
 801f600:	bd38      	pop	{r3, r4, r5, pc}
 801f602:	bf00      	nop
 801f604:	2000da68 	.word	0x2000da68

0801f608 <_isatty_r>:
 801f608:	b538      	push	{r3, r4, r5, lr}
 801f60a:	4d06      	ldr	r5, [pc, #24]	; (801f624 <_isatty_r+0x1c>)
 801f60c:	2300      	movs	r3, #0
 801f60e:	4604      	mov	r4, r0
 801f610:	4608      	mov	r0, r1
 801f612:	602b      	str	r3, [r5, #0]
 801f614:	f7e3 f8af 	bl	8002776 <_isatty>
 801f618:	1c43      	adds	r3, r0, #1
 801f61a:	d102      	bne.n	801f622 <_isatty_r+0x1a>
 801f61c:	682b      	ldr	r3, [r5, #0]
 801f61e:	b103      	cbz	r3, 801f622 <_isatty_r+0x1a>
 801f620:	6023      	str	r3, [r4, #0]
 801f622:	bd38      	pop	{r3, r4, r5, pc}
 801f624:	2000da68 	.word	0x2000da68

0801f628 <_kill_r>:
 801f628:	b538      	push	{r3, r4, r5, lr}
 801f62a:	4d07      	ldr	r5, [pc, #28]	; (801f648 <_kill_r+0x20>)
 801f62c:	2300      	movs	r3, #0
 801f62e:	4604      	mov	r4, r0
 801f630:	4608      	mov	r0, r1
 801f632:	4611      	mov	r1, r2
 801f634:	602b      	str	r3, [r5, #0]
 801f636:	f7e3 f82f 	bl	8002698 <_kill>
 801f63a:	1c43      	adds	r3, r0, #1
 801f63c:	d102      	bne.n	801f644 <_kill_r+0x1c>
 801f63e:	682b      	ldr	r3, [r5, #0]
 801f640:	b103      	cbz	r3, 801f644 <_kill_r+0x1c>
 801f642:	6023      	str	r3, [r4, #0]
 801f644:	bd38      	pop	{r3, r4, r5, pc}
 801f646:	bf00      	nop
 801f648:	2000da68 	.word	0x2000da68

0801f64c <_getpid_r>:
 801f64c:	f7e3 b81c 	b.w	8002688 <_getpid>

0801f650 <nan>:
 801f650:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801f658 <nan+0x8>
 801f654:	4770      	bx	lr
 801f656:	bf00      	nop
 801f658:	00000000 	.word	0x00000000
 801f65c:	7ff80000 	.word	0x7ff80000

0801f660 <rshift>:
 801f660:	6903      	ldr	r3, [r0, #16]
 801f662:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801f666:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f66a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801f66e:	f100 0414 	add.w	r4, r0, #20
 801f672:	dd45      	ble.n	801f700 <rshift+0xa0>
 801f674:	f011 011f 	ands.w	r1, r1, #31
 801f678:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801f67c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801f680:	d10c      	bne.n	801f69c <rshift+0x3c>
 801f682:	f100 0710 	add.w	r7, r0, #16
 801f686:	4629      	mov	r1, r5
 801f688:	42b1      	cmp	r1, r6
 801f68a:	d334      	bcc.n	801f6f6 <rshift+0x96>
 801f68c:	1a9b      	subs	r3, r3, r2
 801f68e:	009b      	lsls	r3, r3, #2
 801f690:	1eea      	subs	r2, r5, #3
 801f692:	4296      	cmp	r6, r2
 801f694:	bf38      	it	cc
 801f696:	2300      	movcc	r3, #0
 801f698:	4423      	add	r3, r4
 801f69a:	e015      	b.n	801f6c8 <rshift+0x68>
 801f69c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801f6a0:	f1c1 0820 	rsb	r8, r1, #32
 801f6a4:	40cf      	lsrs	r7, r1
 801f6a6:	f105 0e04 	add.w	lr, r5, #4
 801f6aa:	46a1      	mov	r9, r4
 801f6ac:	4576      	cmp	r6, lr
 801f6ae:	46f4      	mov	ip, lr
 801f6b0:	d815      	bhi.n	801f6de <rshift+0x7e>
 801f6b2:	1a9a      	subs	r2, r3, r2
 801f6b4:	0092      	lsls	r2, r2, #2
 801f6b6:	3a04      	subs	r2, #4
 801f6b8:	3501      	adds	r5, #1
 801f6ba:	42ae      	cmp	r6, r5
 801f6bc:	bf38      	it	cc
 801f6be:	2200      	movcc	r2, #0
 801f6c0:	18a3      	adds	r3, r4, r2
 801f6c2:	50a7      	str	r7, [r4, r2]
 801f6c4:	b107      	cbz	r7, 801f6c8 <rshift+0x68>
 801f6c6:	3304      	adds	r3, #4
 801f6c8:	1b1a      	subs	r2, r3, r4
 801f6ca:	42a3      	cmp	r3, r4
 801f6cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801f6d0:	bf08      	it	eq
 801f6d2:	2300      	moveq	r3, #0
 801f6d4:	6102      	str	r2, [r0, #16]
 801f6d6:	bf08      	it	eq
 801f6d8:	6143      	streq	r3, [r0, #20]
 801f6da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f6de:	f8dc c000 	ldr.w	ip, [ip]
 801f6e2:	fa0c fc08 	lsl.w	ip, ip, r8
 801f6e6:	ea4c 0707 	orr.w	r7, ip, r7
 801f6ea:	f849 7b04 	str.w	r7, [r9], #4
 801f6ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 801f6f2:	40cf      	lsrs	r7, r1
 801f6f4:	e7da      	b.n	801f6ac <rshift+0x4c>
 801f6f6:	f851 cb04 	ldr.w	ip, [r1], #4
 801f6fa:	f847 cf04 	str.w	ip, [r7, #4]!
 801f6fe:	e7c3      	b.n	801f688 <rshift+0x28>
 801f700:	4623      	mov	r3, r4
 801f702:	e7e1      	b.n	801f6c8 <rshift+0x68>

0801f704 <__hexdig_fun>:
 801f704:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801f708:	2b09      	cmp	r3, #9
 801f70a:	d802      	bhi.n	801f712 <__hexdig_fun+0xe>
 801f70c:	3820      	subs	r0, #32
 801f70e:	b2c0      	uxtb	r0, r0
 801f710:	4770      	bx	lr
 801f712:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801f716:	2b05      	cmp	r3, #5
 801f718:	d801      	bhi.n	801f71e <__hexdig_fun+0x1a>
 801f71a:	3847      	subs	r0, #71	; 0x47
 801f71c:	e7f7      	b.n	801f70e <__hexdig_fun+0xa>
 801f71e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801f722:	2b05      	cmp	r3, #5
 801f724:	d801      	bhi.n	801f72a <__hexdig_fun+0x26>
 801f726:	3827      	subs	r0, #39	; 0x27
 801f728:	e7f1      	b.n	801f70e <__hexdig_fun+0xa>
 801f72a:	2000      	movs	r0, #0
 801f72c:	4770      	bx	lr
	...

0801f730 <__gethex>:
 801f730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f734:	4617      	mov	r7, r2
 801f736:	680a      	ldr	r2, [r1, #0]
 801f738:	b085      	sub	sp, #20
 801f73a:	f102 0b02 	add.w	fp, r2, #2
 801f73e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801f742:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801f746:	4681      	mov	r9, r0
 801f748:	468a      	mov	sl, r1
 801f74a:	9302      	str	r3, [sp, #8]
 801f74c:	32fe      	adds	r2, #254	; 0xfe
 801f74e:	eb02 030b 	add.w	r3, r2, fp
 801f752:	46d8      	mov	r8, fp
 801f754:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801f758:	9301      	str	r3, [sp, #4]
 801f75a:	2830      	cmp	r0, #48	; 0x30
 801f75c:	d0f7      	beq.n	801f74e <__gethex+0x1e>
 801f75e:	f7ff ffd1 	bl	801f704 <__hexdig_fun>
 801f762:	4604      	mov	r4, r0
 801f764:	2800      	cmp	r0, #0
 801f766:	d138      	bne.n	801f7da <__gethex+0xaa>
 801f768:	49a7      	ldr	r1, [pc, #668]	; (801fa08 <__gethex+0x2d8>)
 801f76a:	2201      	movs	r2, #1
 801f76c:	4640      	mov	r0, r8
 801f76e:	f7fc fc13 	bl	801bf98 <strncmp>
 801f772:	4606      	mov	r6, r0
 801f774:	2800      	cmp	r0, #0
 801f776:	d169      	bne.n	801f84c <__gethex+0x11c>
 801f778:	f898 0001 	ldrb.w	r0, [r8, #1]
 801f77c:	465d      	mov	r5, fp
 801f77e:	f7ff ffc1 	bl	801f704 <__hexdig_fun>
 801f782:	2800      	cmp	r0, #0
 801f784:	d064      	beq.n	801f850 <__gethex+0x120>
 801f786:	465a      	mov	r2, fp
 801f788:	7810      	ldrb	r0, [r2, #0]
 801f78a:	2830      	cmp	r0, #48	; 0x30
 801f78c:	4690      	mov	r8, r2
 801f78e:	f102 0201 	add.w	r2, r2, #1
 801f792:	d0f9      	beq.n	801f788 <__gethex+0x58>
 801f794:	f7ff ffb6 	bl	801f704 <__hexdig_fun>
 801f798:	2301      	movs	r3, #1
 801f79a:	fab0 f480 	clz	r4, r0
 801f79e:	0964      	lsrs	r4, r4, #5
 801f7a0:	465e      	mov	r6, fp
 801f7a2:	9301      	str	r3, [sp, #4]
 801f7a4:	4642      	mov	r2, r8
 801f7a6:	4615      	mov	r5, r2
 801f7a8:	3201      	adds	r2, #1
 801f7aa:	7828      	ldrb	r0, [r5, #0]
 801f7ac:	f7ff ffaa 	bl	801f704 <__hexdig_fun>
 801f7b0:	2800      	cmp	r0, #0
 801f7b2:	d1f8      	bne.n	801f7a6 <__gethex+0x76>
 801f7b4:	4994      	ldr	r1, [pc, #592]	; (801fa08 <__gethex+0x2d8>)
 801f7b6:	2201      	movs	r2, #1
 801f7b8:	4628      	mov	r0, r5
 801f7ba:	f7fc fbed 	bl	801bf98 <strncmp>
 801f7be:	b978      	cbnz	r0, 801f7e0 <__gethex+0xb0>
 801f7c0:	b946      	cbnz	r6, 801f7d4 <__gethex+0xa4>
 801f7c2:	1c6e      	adds	r6, r5, #1
 801f7c4:	4632      	mov	r2, r6
 801f7c6:	4615      	mov	r5, r2
 801f7c8:	3201      	adds	r2, #1
 801f7ca:	7828      	ldrb	r0, [r5, #0]
 801f7cc:	f7ff ff9a 	bl	801f704 <__hexdig_fun>
 801f7d0:	2800      	cmp	r0, #0
 801f7d2:	d1f8      	bne.n	801f7c6 <__gethex+0x96>
 801f7d4:	1b73      	subs	r3, r6, r5
 801f7d6:	009e      	lsls	r6, r3, #2
 801f7d8:	e004      	b.n	801f7e4 <__gethex+0xb4>
 801f7da:	2400      	movs	r4, #0
 801f7dc:	4626      	mov	r6, r4
 801f7de:	e7e1      	b.n	801f7a4 <__gethex+0x74>
 801f7e0:	2e00      	cmp	r6, #0
 801f7e2:	d1f7      	bne.n	801f7d4 <__gethex+0xa4>
 801f7e4:	782b      	ldrb	r3, [r5, #0]
 801f7e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801f7ea:	2b50      	cmp	r3, #80	; 0x50
 801f7ec:	d13d      	bne.n	801f86a <__gethex+0x13a>
 801f7ee:	786b      	ldrb	r3, [r5, #1]
 801f7f0:	2b2b      	cmp	r3, #43	; 0x2b
 801f7f2:	d02f      	beq.n	801f854 <__gethex+0x124>
 801f7f4:	2b2d      	cmp	r3, #45	; 0x2d
 801f7f6:	d031      	beq.n	801f85c <__gethex+0x12c>
 801f7f8:	1c69      	adds	r1, r5, #1
 801f7fa:	f04f 0b00 	mov.w	fp, #0
 801f7fe:	7808      	ldrb	r0, [r1, #0]
 801f800:	f7ff ff80 	bl	801f704 <__hexdig_fun>
 801f804:	1e42      	subs	r2, r0, #1
 801f806:	b2d2      	uxtb	r2, r2
 801f808:	2a18      	cmp	r2, #24
 801f80a:	d82e      	bhi.n	801f86a <__gethex+0x13a>
 801f80c:	f1a0 0210 	sub.w	r2, r0, #16
 801f810:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801f814:	f7ff ff76 	bl	801f704 <__hexdig_fun>
 801f818:	f100 3cff 	add.w	ip, r0, #4294967295
 801f81c:	fa5f fc8c 	uxtb.w	ip, ip
 801f820:	f1bc 0f18 	cmp.w	ip, #24
 801f824:	d91d      	bls.n	801f862 <__gethex+0x132>
 801f826:	f1bb 0f00 	cmp.w	fp, #0
 801f82a:	d000      	beq.n	801f82e <__gethex+0xfe>
 801f82c:	4252      	negs	r2, r2
 801f82e:	4416      	add	r6, r2
 801f830:	f8ca 1000 	str.w	r1, [sl]
 801f834:	b1dc      	cbz	r4, 801f86e <__gethex+0x13e>
 801f836:	9b01      	ldr	r3, [sp, #4]
 801f838:	2b00      	cmp	r3, #0
 801f83a:	bf14      	ite	ne
 801f83c:	f04f 0800 	movne.w	r8, #0
 801f840:	f04f 0806 	moveq.w	r8, #6
 801f844:	4640      	mov	r0, r8
 801f846:	b005      	add	sp, #20
 801f848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f84c:	4645      	mov	r5, r8
 801f84e:	4626      	mov	r6, r4
 801f850:	2401      	movs	r4, #1
 801f852:	e7c7      	b.n	801f7e4 <__gethex+0xb4>
 801f854:	f04f 0b00 	mov.w	fp, #0
 801f858:	1ca9      	adds	r1, r5, #2
 801f85a:	e7d0      	b.n	801f7fe <__gethex+0xce>
 801f85c:	f04f 0b01 	mov.w	fp, #1
 801f860:	e7fa      	b.n	801f858 <__gethex+0x128>
 801f862:	230a      	movs	r3, #10
 801f864:	fb03 0002 	mla	r0, r3, r2, r0
 801f868:	e7d0      	b.n	801f80c <__gethex+0xdc>
 801f86a:	4629      	mov	r1, r5
 801f86c:	e7e0      	b.n	801f830 <__gethex+0x100>
 801f86e:	eba5 0308 	sub.w	r3, r5, r8
 801f872:	3b01      	subs	r3, #1
 801f874:	4621      	mov	r1, r4
 801f876:	2b07      	cmp	r3, #7
 801f878:	dc0a      	bgt.n	801f890 <__gethex+0x160>
 801f87a:	4648      	mov	r0, r9
 801f87c:	f7fd fbfe 	bl	801d07c <_Balloc>
 801f880:	4604      	mov	r4, r0
 801f882:	b940      	cbnz	r0, 801f896 <__gethex+0x166>
 801f884:	4b61      	ldr	r3, [pc, #388]	; (801fa0c <__gethex+0x2dc>)
 801f886:	4602      	mov	r2, r0
 801f888:	21e4      	movs	r1, #228	; 0xe4
 801f88a:	4861      	ldr	r0, [pc, #388]	; (801fa10 <__gethex+0x2e0>)
 801f88c:	f7fb f9a0 	bl	801abd0 <__assert_func>
 801f890:	3101      	adds	r1, #1
 801f892:	105b      	asrs	r3, r3, #1
 801f894:	e7ef      	b.n	801f876 <__gethex+0x146>
 801f896:	f100 0a14 	add.w	sl, r0, #20
 801f89a:	2300      	movs	r3, #0
 801f89c:	495a      	ldr	r1, [pc, #360]	; (801fa08 <__gethex+0x2d8>)
 801f89e:	f8cd a004 	str.w	sl, [sp, #4]
 801f8a2:	469b      	mov	fp, r3
 801f8a4:	45a8      	cmp	r8, r5
 801f8a6:	d342      	bcc.n	801f92e <__gethex+0x1fe>
 801f8a8:	9801      	ldr	r0, [sp, #4]
 801f8aa:	f840 bb04 	str.w	fp, [r0], #4
 801f8ae:	eba0 000a 	sub.w	r0, r0, sl
 801f8b2:	1080      	asrs	r0, r0, #2
 801f8b4:	6120      	str	r0, [r4, #16]
 801f8b6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801f8ba:	4658      	mov	r0, fp
 801f8bc:	f7fd fcd0 	bl	801d260 <__hi0bits>
 801f8c0:	683d      	ldr	r5, [r7, #0]
 801f8c2:	eba8 0000 	sub.w	r0, r8, r0
 801f8c6:	42a8      	cmp	r0, r5
 801f8c8:	dd59      	ble.n	801f97e <__gethex+0x24e>
 801f8ca:	eba0 0805 	sub.w	r8, r0, r5
 801f8ce:	4641      	mov	r1, r8
 801f8d0:	4620      	mov	r0, r4
 801f8d2:	f7fe f85f 	bl	801d994 <__any_on>
 801f8d6:	4683      	mov	fp, r0
 801f8d8:	b1b8      	cbz	r0, 801f90a <__gethex+0x1da>
 801f8da:	f108 33ff 	add.w	r3, r8, #4294967295
 801f8de:	1159      	asrs	r1, r3, #5
 801f8e0:	f003 021f 	and.w	r2, r3, #31
 801f8e4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801f8e8:	f04f 0b01 	mov.w	fp, #1
 801f8ec:	fa0b f202 	lsl.w	r2, fp, r2
 801f8f0:	420a      	tst	r2, r1
 801f8f2:	d00a      	beq.n	801f90a <__gethex+0x1da>
 801f8f4:	455b      	cmp	r3, fp
 801f8f6:	dd06      	ble.n	801f906 <__gethex+0x1d6>
 801f8f8:	f1a8 0102 	sub.w	r1, r8, #2
 801f8fc:	4620      	mov	r0, r4
 801f8fe:	f7fe f849 	bl	801d994 <__any_on>
 801f902:	2800      	cmp	r0, #0
 801f904:	d138      	bne.n	801f978 <__gethex+0x248>
 801f906:	f04f 0b02 	mov.w	fp, #2
 801f90a:	4641      	mov	r1, r8
 801f90c:	4620      	mov	r0, r4
 801f90e:	f7ff fea7 	bl	801f660 <rshift>
 801f912:	4446      	add	r6, r8
 801f914:	68bb      	ldr	r3, [r7, #8]
 801f916:	42b3      	cmp	r3, r6
 801f918:	da41      	bge.n	801f99e <__gethex+0x26e>
 801f91a:	4621      	mov	r1, r4
 801f91c:	4648      	mov	r0, r9
 801f91e:	f7fd fbed 	bl	801d0fc <_Bfree>
 801f922:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f924:	2300      	movs	r3, #0
 801f926:	6013      	str	r3, [r2, #0]
 801f928:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801f92c:	e78a      	b.n	801f844 <__gethex+0x114>
 801f92e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801f932:	2a2e      	cmp	r2, #46	; 0x2e
 801f934:	d014      	beq.n	801f960 <__gethex+0x230>
 801f936:	2b20      	cmp	r3, #32
 801f938:	d106      	bne.n	801f948 <__gethex+0x218>
 801f93a:	9b01      	ldr	r3, [sp, #4]
 801f93c:	f843 bb04 	str.w	fp, [r3], #4
 801f940:	f04f 0b00 	mov.w	fp, #0
 801f944:	9301      	str	r3, [sp, #4]
 801f946:	465b      	mov	r3, fp
 801f948:	7828      	ldrb	r0, [r5, #0]
 801f94a:	9303      	str	r3, [sp, #12]
 801f94c:	f7ff feda 	bl	801f704 <__hexdig_fun>
 801f950:	9b03      	ldr	r3, [sp, #12]
 801f952:	f000 000f 	and.w	r0, r0, #15
 801f956:	4098      	lsls	r0, r3
 801f958:	ea4b 0b00 	orr.w	fp, fp, r0
 801f95c:	3304      	adds	r3, #4
 801f95e:	e7a1      	b.n	801f8a4 <__gethex+0x174>
 801f960:	45a8      	cmp	r8, r5
 801f962:	d8e8      	bhi.n	801f936 <__gethex+0x206>
 801f964:	2201      	movs	r2, #1
 801f966:	4628      	mov	r0, r5
 801f968:	9303      	str	r3, [sp, #12]
 801f96a:	f7fc fb15 	bl	801bf98 <strncmp>
 801f96e:	4926      	ldr	r1, [pc, #152]	; (801fa08 <__gethex+0x2d8>)
 801f970:	9b03      	ldr	r3, [sp, #12]
 801f972:	2800      	cmp	r0, #0
 801f974:	d1df      	bne.n	801f936 <__gethex+0x206>
 801f976:	e795      	b.n	801f8a4 <__gethex+0x174>
 801f978:	f04f 0b03 	mov.w	fp, #3
 801f97c:	e7c5      	b.n	801f90a <__gethex+0x1da>
 801f97e:	da0b      	bge.n	801f998 <__gethex+0x268>
 801f980:	eba5 0800 	sub.w	r8, r5, r0
 801f984:	4621      	mov	r1, r4
 801f986:	4642      	mov	r2, r8
 801f988:	4648      	mov	r0, r9
 801f98a:	f7fd fdd1 	bl	801d530 <__lshift>
 801f98e:	eba6 0608 	sub.w	r6, r6, r8
 801f992:	4604      	mov	r4, r0
 801f994:	f100 0a14 	add.w	sl, r0, #20
 801f998:	f04f 0b00 	mov.w	fp, #0
 801f99c:	e7ba      	b.n	801f914 <__gethex+0x1e4>
 801f99e:	687b      	ldr	r3, [r7, #4]
 801f9a0:	42b3      	cmp	r3, r6
 801f9a2:	dd73      	ble.n	801fa8c <__gethex+0x35c>
 801f9a4:	1b9e      	subs	r6, r3, r6
 801f9a6:	42b5      	cmp	r5, r6
 801f9a8:	dc34      	bgt.n	801fa14 <__gethex+0x2e4>
 801f9aa:	68fb      	ldr	r3, [r7, #12]
 801f9ac:	2b02      	cmp	r3, #2
 801f9ae:	d023      	beq.n	801f9f8 <__gethex+0x2c8>
 801f9b0:	2b03      	cmp	r3, #3
 801f9b2:	d025      	beq.n	801fa00 <__gethex+0x2d0>
 801f9b4:	2b01      	cmp	r3, #1
 801f9b6:	d115      	bne.n	801f9e4 <__gethex+0x2b4>
 801f9b8:	42b5      	cmp	r5, r6
 801f9ba:	d113      	bne.n	801f9e4 <__gethex+0x2b4>
 801f9bc:	2d01      	cmp	r5, #1
 801f9be:	d10b      	bne.n	801f9d8 <__gethex+0x2a8>
 801f9c0:	9a02      	ldr	r2, [sp, #8]
 801f9c2:	687b      	ldr	r3, [r7, #4]
 801f9c4:	6013      	str	r3, [r2, #0]
 801f9c6:	2301      	movs	r3, #1
 801f9c8:	6123      	str	r3, [r4, #16]
 801f9ca:	f8ca 3000 	str.w	r3, [sl]
 801f9ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f9d0:	f04f 0862 	mov.w	r8, #98	; 0x62
 801f9d4:	601c      	str	r4, [r3, #0]
 801f9d6:	e735      	b.n	801f844 <__gethex+0x114>
 801f9d8:	1e69      	subs	r1, r5, #1
 801f9da:	4620      	mov	r0, r4
 801f9dc:	f7fd ffda 	bl	801d994 <__any_on>
 801f9e0:	2800      	cmp	r0, #0
 801f9e2:	d1ed      	bne.n	801f9c0 <__gethex+0x290>
 801f9e4:	4621      	mov	r1, r4
 801f9e6:	4648      	mov	r0, r9
 801f9e8:	f7fd fb88 	bl	801d0fc <_Bfree>
 801f9ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f9ee:	2300      	movs	r3, #0
 801f9f0:	6013      	str	r3, [r2, #0]
 801f9f2:	f04f 0850 	mov.w	r8, #80	; 0x50
 801f9f6:	e725      	b.n	801f844 <__gethex+0x114>
 801f9f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f9fa:	2b00      	cmp	r3, #0
 801f9fc:	d1f2      	bne.n	801f9e4 <__gethex+0x2b4>
 801f9fe:	e7df      	b.n	801f9c0 <__gethex+0x290>
 801fa00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fa02:	2b00      	cmp	r3, #0
 801fa04:	d1dc      	bne.n	801f9c0 <__gethex+0x290>
 801fa06:	e7ed      	b.n	801f9e4 <__gethex+0x2b4>
 801fa08:	08023084 	.word	0x08023084
 801fa0c:	08022f19 	.word	0x08022f19
 801fa10:	0802320d 	.word	0x0802320d
 801fa14:	f106 38ff 	add.w	r8, r6, #4294967295
 801fa18:	f1bb 0f00 	cmp.w	fp, #0
 801fa1c:	d133      	bne.n	801fa86 <__gethex+0x356>
 801fa1e:	f1b8 0f00 	cmp.w	r8, #0
 801fa22:	d004      	beq.n	801fa2e <__gethex+0x2fe>
 801fa24:	4641      	mov	r1, r8
 801fa26:	4620      	mov	r0, r4
 801fa28:	f7fd ffb4 	bl	801d994 <__any_on>
 801fa2c:	4683      	mov	fp, r0
 801fa2e:	ea4f 1268 	mov.w	r2, r8, asr #5
 801fa32:	2301      	movs	r3, #1
 801fa34:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801fa38:	f008 081f 	and.w	r8, r8, #31
 801fa3c:	fa03 f308 	lsl.w	r3, r3, r8
 801fa40:	4213      	tst	r3, r2
 801fa42:	4631      	mov	r1, r6
 801fa44:	4620      	mov	r0, r4
 801fa46:	bf18      	it	ne
 801fa48:	f04b 0b02 	orrne.w	fp, fp, #2
 801fa4c:	1bad      	subs	r5, r5, r6
 801fa4e:	f7ff fe07 	bl	801f660 <rshift>
 801fa52:	687e      	ldr	r6, [r7, #4]
 801fa54:	f04f 0802 	mov.w	r8, #2
 801fa58:	f1bb 0f00 	cmp.w	fp, #0
 801fa5c:	d04a      	beq.n	801faf4 <__gethex+0x3c4>
 801fa5e:	68fb      	ldr	r3, [r7, #12]
 801fa60:	2b02      	cmp	r3, #2
 801fa62:	d016      	beq.n	801fa92 <__gethex+0x362>
 801fa64:	2b03      	cmp	r3, #3
 801fa66:	d018      	beq.n	801fa9a <__gethex+0x36a>
 801fa68:	2b01      	cmp	r3, #1
 801fa6a:	d109      	bne.n	801fa80 <__gethex+0x350>
 801fa6c:	f01b 0f02 	tst.w	fp, #2
 801fa70:	d006      	beq.n	801fa80 <__gethex+0x350>
 801fa72:	f8da 3000 	ldr.w	r3, [sl]
 801fa76:	ea4b 0b03 	orr.w	fp, fp, r3
 801fa7a:	f01b 0f01 	tst.w	fp, #1
 801fa7e:	d10f      	bne.n	801faa0 <__gethex+0x370>
 801fa80:	f048 0810 	orr.w	r8, r8, #16
 801fa84:	e036      	b.n	801faf4 <__gethex+0x3c4>
 801fa86:	f04f 0b01 	mov.w	fp, #1
 801fa8a:	e7d0      	b.n	801fa2e <__gethex+0x2fe>
 801fa8c:	f04f 0801 	mov.w	r8, #1
 801fa90:	e7e2      	b.n	801fa58 <__gethex+0x328>
 801fa92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fa94:	f1c3 0301 	rsb	r3, r3, #1
 801fa98:	930f      	str	r3, [sp, #60]	; 0x3c
 801fa9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fa9c:	2b00      	cmp	r3, #0
 801fa9e:	d0ef      	beq.n	801fa80 <__gethex+0x350>
 801faa0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801faa4:	f104 0214 	add.w	r2, r4, #20
 801faa8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801faac:	9301      	str	r3, [sp, #4]
 801faae:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801fab2:	2300      	movs	r3, #0
 801fab4:	4694      	mov	ip, r2
 801fab6:	f852 1b04 	ldr.w	r1, [r2], #4
 801faba:	f1b1 3fff 	cmp.w	r1, #4294967295
 801fabe:	d01e      	beq.n	801fafe <__gethex+0x3ce>
 801fac0:	3101      	adds	r1, #1
 801fac2:	f8cc 1000 	str.w	r1, [ip]
 801fac6:	f1b8 0f02 	cmp.w	r8, #2
 801faca:	f104 0214 	add.w	r2, r4, #20
 801face:	d13d      	bne.n	801fb4c <__gethex+0x41c>
 801fad0:	683b      	ldr	r3, [r7, #0]
 801fad2:	3b01      	subs	r3, #1
 801fad4:	42ab      	cmp	r3, r5
 801fad6:	d10b      	bne.n	801faf0 <__gethex+0x3c0>
 801fad8:	1169      	asrs	r1, r5, #5
 801fada:	2301      	movs	r3, #1
 801fadc:	f005 051f 	and.w	r5, r5, #31
 801fae0:	fa03 f505 	lsl.w	r5, r3, r5
 801fae4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801fae8:	421d      	tst	r5, r3
 801faea:	bf18      	it	ne
 801faec:	f04f 0801 	movne.w	r8, #1
 801faf0:	f048 0820 	orr.w	r8, r8, #32
 801faf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801faf6:	601c      	str	r4, [r3, #0]
 801faf8:	9b02      	ldr	r3, [sp, #8]
 801fafa:	601e      	str	r6, [r3, #0]
 801fafc:	e6a2      	b.n	801f844 <__gethex+0x114>
 801fafe:	4290      	cmp	r0, r2
 801fb00:	f842 3c04 	str.w	r3, [r2, #-4]
 801fb04:	d8d6      	bhi.n	801fab4 <__gethex+0x384>
 801fb06:	68a2      	ldr	r2, [r4, #8]
 801fb08:	4593      	cmp	fp, r2
 801fb0a:	db17      	blt.n	801fb3c <__gethex+0x40c>
 801fb0c:	6861      	ldr	r1, [r4, #4]
 801fb0e:	4648      	mov	r0, r9
 801fb10:	3101      	adds	r1, #1
 801fb12:	f7fd fab3 	bl	801d07c <_Balloc>
 801fb16:	4682      	mov	sl, r0
 801fb18:	b918      	cbnz	r0, 801fb22 <__gethex+0x3f2>
 801fb1a:	4b1b      	ldr	r3, [pc, #108]	; (801fb88 <__gethex+0x458>)
 801fb1c:	4602      	mov	r2, r0
 801fb1e:	2184      	movs	r1, #132	; 0x84
 801fb20:	e6b3      	b.n	801f88a <__gethex+0x15a>
 801fb22:	6922      	ldr	r2, [r4, #16]
 801fb24:	3202      	adds	r2, #2
 801fb26:	f104 010c 	add.w	r1, r4, #12
 801fb2a:	0092      	lsls	r2, r2, #2
 801fb2c:	300c      	adds	r0, #12
 801fb2e:	f7fc fbc0 	bl	801c2b2 <memcpy>
 801fb32:	4621      	mov	r1, r4
 801fb34:	4648      	mov	r0, r9
 801fb36:	f7fd fae1 	bl	801d0fc <_Bfree>
 801fb3a:	4654      	mov	r4, sl
 801fb3c:	6922      	ldr	r2, [r4, #16]
 801fb3e:	1c51      	adds	r1, r2, #1
 801fb40:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801fb44:	6121      	str	r1, [r4, #16]
 801fb46:	2101      	movs	r1, #1
 801fb48:	6151      	str	r1, [r2, #20]
 801fb4a:	e7bc      	b.n	801fac6 <__gethex+0x396>
 801fb4c:	6921      	ldr	r1, [r4, #16]
 801fb4e:	4559      	cmp	r1, fp
 801fb50:	dd0b      	ble.n	801fb6a <__gethex+0x43a>
 801fb52:	2101      	movs	r1, #1
 801fb54:	4620      	mov	r0, r4
 801fb56:	f7ff fd83 	bl	801f660 <rshift>
 801fb5a:	68bb      	ldr	r3, [r7, #8]
 801fb5c:	3601      	adds	r6, #1
 801fb5e:	42b3      	cmp	r3, r6
 801fb60:	f6ff aedb 	blt.w	801f91a <__gethex+0x1ea>
 801fb64:	f04f 0801 	mov.w	r8, #1
 801fb68:	e7c2      	b.n	801faf0 <__gethex+0x3c0>
 801fb6a:	f015 051f 	ands.w	r5, r5, #31
 801fb6e:	d0f9      	beq.n	801fb64 <__gethex+0x434>
 801fb70:	9b01      	ldr	r3, [sp, #4]
 801fb72:	441a      	add	r2, r3
 801fb74:	f1c5 0520 	rsb	r5, r5, #32
 801fb78:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801fb7c:	f7fd fb70 	bl	801d260 <__hi0bits>
 801fb80:	42a8      	cmp	r0, r5
 801fb82:	dbe6      	blt.n	801fb52 <__gethex+0x422>
 801fb84:	e7ee      	b.n	801fb64 <__gethex+0x434>
 801fb86:	bf00      	nop
 801fb88:	08022f19 	.word	0x08022f19

0801fb8c <L_shift>:
 801fb8c:	f1c2 0208 	rsb	r2, r2, #8
 801fb90:	0092      	lsls	r2, r2, #2
 801fb92:	b570      	push	{r4, r5, r6, lr}
 801fb94:	f1c2 0620 	rsb	r6, r2, #32
 801fb98:	6843      	ldr	r3, [r0, #4]
 801fb9a:	6804      	ldr	r4, [r0, #0]
 801fb9c:	fa03 f506 	lsl.w	r5, r3, r6
 801fba0:	432c      	orrs	r4, r5
 801fba2:	40d3      	lsrs	r3, r2
 801fba4:	6004      	str	r4, [r0, #0]
 801fba6:	f840 3f04 	str.w	r3, [r0, #4]!
 801fbaa:	4288      	cmp	r0, r1
 801fbac:	d3f4      	bcc.n	801fb98 <L_shift+0xc>
 801fbae:	bd70      	pop	{r4, r5, r6, pc}

0801fbb0 <__match>:
 801fbb0:	b530      	push	{r4, r5, lr}
 801fbb2:	6803      	ldr	r3, [r0, #0]
 801fbb4:	3301      	adds	r3, #1
 801fbb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fbba:	b914      	cbnz	r4, 801fbc2 <__match+0x12>
 801fbbc:	6003      	str	r3, [r0, #0]
 801fbbe:	2001      	movs	r0, #1
 801fbc0:	bd30      	pop	{r4, r5, pc}
 801fbc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fbc6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801fbca:	2d19      	cmp	r5, #25
 801fbcc:	bf98      	it	ls
 801fbce:	3220      	addls	r2, #32
 801fbd0:	42a2      	cmp	r2, r4
 801fbd2:	d0f0      	beq.n	801fbb6 <__match+0x6>
 801fbd4:	2000      	movs	r0, #0
 801fbd6:	e7f3      	b.n	801fbc0 <__match+0x10>

0801fbd8 <__hexnan>:
 801fbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbdc:	680b      	ldr	r3, [r1, #0]
 801fbde:	6801      	ldr	r1, [r0, #0]
 801fbe0:	115e      	asrs	r6, r3, #5
 801fbe2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801fbe6:	f013 031f 	ands.w	r3, r3, #31
 801fbea:	b087      	sub	sp, #28
 801fbec:	bf18      	it	ne
 801fbee:	3604      	addne	r6, #4
 801fbf0:	2500      	movs	r5, #0
 801fbf2:	1f37      	subs	r7, r6, #4
 801fbf4:	4682      	mov	sl, r0
 801fbf6:	4690      	mov	r8, r2
 801fbf8:	9301      	str	r3, [sp, #4]
 801fbfa:	f846 5c04 	str.w	r5, [r6, #-4]
 801fbfe:	46b9      	mov	r9, r7
 801fc00:	463c      	mov	r4, r7
 801fc02:	9502      	str	r5, [sp, #8]
 801fc04:	46ab      	mov	fp, r5
 801fc06:	784a      	ldrb	r2, [r1, #1]
 801fc08:	1c4b      	adds	r3, r1, #1
 801fc0a:	9303      	str	r3, [sp, #12]
 801fc0c:	b342      	cbz	r2, 801fc60 <__hexnan+0x88>
 801fc0e:	4610      	mov	r0, r2
 801fc10:	9105      	str	r1, [sp, #20]
 801fc12:	9204      	str	r2, [sp, #16]
 801fc14:	f7ff fd76 	bl	801f704 <__hexdig_fun>
 801fc18:	2800      	cmp	r0, #0
 801fc1a:	d14f      	bne.n	801fcbc <__hexnan+0xe4>
 801fc1c:	9a04      	ldr	r2, [sp, #16]
 801fc1e:	9905      	ldr	r1, [sp, #20]
 801fc20:	2a20      	cmp	r2, #32
 801fc22:	d818      	bhi.n	801fc56 <__hexnan+0x7e>
 801fc24:	9b02      	ldr	r3, [sp, #8]
 801fc26:	459b      	cmp	fp, r3
 801fc28:	dd13      	ble.n	801fc52 <__hexnan+0x7a>
 801fc2a:	454c      	cmp	r4, r9
 801fc2c:	d206      	bcs.n	801fc3c <__hexnan+0x64>
 801fc2e:	2d07      	cmp	r5, #7
 801fc30:	dc04      	bgt.n	801fc3c <__hexnan+0x64>
 801fc32:	462a      	mov	r2, r5
 801fc34:	4649      	mov	r1, r9
 801fc36:	4620      	mov	r0, r4
 801fc38:	f7ff ffa8 	bl	801fb8c <L_shift>
 801fc3c:	4544      	cmp	r4, r8
 801fc3e:	d950      	bls.n	801fce2 <__hexnan+0x10a>
 801fc40:	2300      	movs	r3, #0
 801fc42:	f1a4 0904 	sub.w	r9, r4, #4
 801fc46:	f844 3c04 	str.w	r3, [r4, #-4]
 801fc4a:	f8cd b008 	str.w	fp, [sp, #8]
 801fc4e:	464c      	mov	r4, r9
 801fc50:	461d      	mov	r5, r3
 801fc52:	9903      	ldr	r1, [sp, #12]
 801fc54:	e7d7      	b.n	801fc06 <__hexnan+0x2e>
 801fc56:	2a29      	cmp	r2, #41	; 0x29
 801fc58:	d155      	bne.n	801fd06 <__hexnan+0x12e>
 801fc5a:	3102      	adds	r1, #2
 801fc5c:	f8ca 1000 	str.w	r1, [sl]
 801fc60:	f1bb 0f00 	cmp.w	fp, #0
 801fc64:	d04f      	beq.n	801fd06 <__hexnan+0x12e>
 801fc66:	454c      	cmp	r4, r9
 801fc68:	d206      	bcs.n	801fc78 <__hexnan+0xa0>
 801fc6a:	2d07      	cmp	r5, #7
 801fc6c:	dc04      	bgt.n	801fc78 <__hexnan+0xa0>
 801fc6e:	462a      	mov	r2, r5
 801fc70:	4649      	mov	r1, r9
 801fc72:	4620      	mov	r0, r4
 801fc74:	f7ff ff8a 	bl	801fb8c <L_shift>
 801fc78:	4544      	cmp	r4, r8
 801fc7a:	d934      	bls.n	801fce6 <__hexnan+0x10e>
 801fc7c:	f1a8 0204 	sub.w	r2, r8, #4
 801fc80:	4623      	mov	r3, r4
 801fc82:	f853 1b04 	ldr.w	r1, [r3], #4
 801fc86:	f842 1f04 	str.w	r1, [r2, #4]!
 801fc8a:	429f      	cmp	r7, r3
 801fc8c:	d2f9      	bcs.n	801fc82 <__hexnan+0xaa>
 801fc8e:	1b3b      	subs	r3, r7, r4
 801fc90:	f023 0303 	bic.w	r3, r3, #3
 801fc94:	3304      	adds	r3, #4
 801fc96:	3e03      	subs	r6, #3
 801fc98:	3401      	adds	r4, #1
 801fc9a:	42a6      	cmp	r6, r4
 801fc9c:	bf38      	it	cc
 801fc9e:	2304      	movcc	r3, #4
 801fca0:	4443      	add	r3, r8
 801fca2:	2200      	movs	r2, #0
 801fca4:	f843 2b04 	str.w	r2, [r3], #4
 801fca8:	429f      	cmp	r7, r3
 801fcaa:	d2fb      	bcs.n	801fca4 <__hexnan+0xcc>
 801fcac:	683b      	ldr	r3, [r7, #0]
 801fcae:	b91b      	cbnz	r3, 801fcb8 <__hexnan+0xe0>
 801fcb0:	4547      	cmp	r7, r8
 801fcb2:	d126      	bne.n	801fd02 <__hexnan+0x12a>
 801fcb4:	2301      	movs	r3, #1
 801fcb6:	603b      	str	r3, [r7, #0]
 801fcb8:	2005      	movs	r0, #5
 801fcba:	e025      	b.n	801fd08 <__hexnan+0x130>
 801fcbc:	3501      	adds	r5, #1
 801fcbe:	2d08      	cmp	r5, #8
 801fcc0:	f10b 0b01 	add.w	fp, fp, #1
 801fcc4:	dd06      	ble.n	801fcd4 <__hexnan+0xfc>
 801fcc6:	4544      	cmp	r4, r8
 801fcc8:	d9c3      	bls.n	801fc52 <__hexnan+0x7a>
 801fcca:	2300      	movs	r3, #0
 801fccc:	f844 3c04 	str.w	r3, [r4, #-4]
 801fcd0:	2501      	movs	r5, #1
 801fcd2:	3c04      	subs	r4, #4
 801fcd4:	6822      	ldr	r2, [r4, #0]
 801fcd6:	f000 000f 	and.w	r0, r0, #15
 801fcda:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801fcde:	6020      	str	r0, [r4, #0]
 801fce0:	e7b7      	b.n	801fc52 <__hexnan+0x7a>
 801fce2:	2508      	movs	r5, #8
 801fce4:	e7b5      	b.n	801fc52 <__hexnan+0x7a>
 801fce6:	9b01      	ldr	r3, [sp, #4]
 801fce8:	2b00      	cmp	r3, #0
 801fcea:	d0df      	beq.n	801fcac <__hexnan+0xd4>
 801fcec:	f1c3 0320 	rsb	r3, r3, #32
 801fcf0:	f04f 32ff 	mov.w	r2, #4294967295
 801fcf4:	40da      	lsrs	r2, r3
 801fcf6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801fcfa:	4013      	ands	r3, r2
 801fcfc:	f846 3c04 	str.w	r3, [r6, #-4]
 801fd00:	e7d4      	b.n	801fcac <__hexnan+0xd4>
 801fd02:	3f04      	subs	r7, #4
 801fd04:	e7d2      	b.n	801fcac <__hexnan+0xd4>
 801fd06:	2004      	movs	r0, #4
 801fd08:	b007      	add	sp, #28
 801fd0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fd0e <__ascii_mbtowc>:
 801fd0e:	b082      	sub	sp, #8
 801fd10:	b901      	cbnz	r1, 801fd14 <__ascii_mbtowc+0x6>
 801fd12:	a901      	add	r1, sp, #4
 801fd14:	b142      	cbz	r2, 801fd28 <__ascii_mbtowc+0x1a>
 801fd16:	b14b      	cbz	r3, 801fd2c <__ascii_mbtowc+0x1e>
 801fd18:	7813      	ldrb	r3, [r2, #0]
 801fd1a:	600b      	str	r3, [r1, #0]
 801fd1c:	7812      	ldrb	r2, [r2, #0]
 801fd1e:	1e10      	subs	r0, r2, #0
 801fd20:	bf18      	it	ne
 801fd22:	2001      	movne	r0, #1
 801fd24:	b002      	add	sp, #8
 801fd26:	4770      	bx	lr
 801fd28:	4610      	mov	r0, r2
 801fd2a:	e7fb      	b.n	801fd24 <__ascii_mbtowc+0x16>
 801fd2c:	f06f 0001 	mvn.w	r0, #1
 801fd30:	e7f8      	b.n	801fd24 <__ascii_mbtowc+0x16>

0801fd32 <_realloc_r>:
 801fd32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fd36:	4680      	mov	r8, r0
 801fd38:	4614      	mov	r4, r2
 801fd3a:	460e      	mov	r6, r1
 801fd3c:	b921      	cbnz	r1, 801fd48 <_realloc_r+0x16>
 801fd3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fd42:	4611      	mov	r1, r2
 801fd44:	f7fa bfa8 	b.w	801ac98 <_malloc_r>
 801fd48:	b92a      	cbnz	r2, 801fd56 <_realloc_r+0x24>
 801fd4a:	f7fd f94b 	bl	801cfe4 <_free_r>
 801fd4e:	4625      	mov	r5, r4
 801fd50:	4628      	mov	r0, r5
 801fd52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fd56:	f000 f89c 	bl	801fe92 <_malloc_usable_size_r>
 801fd5a:	4284      	cmp	r4, r0
 801fd5c:	4607      	mov	r7, r0
 801fd5e:	d802      	bhi.n	801fd66 <_realloc_r+0x34>
 801fd60:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801fd64:	d812      	bhi.n	801fd8c <_realloc_r+0x5a>
 801fd66:	4621      	mov	r1, r4
 801fd68:	4640      	mov	r0, r8
 801fd6a:	f7fa ff95 	bl	801ac98 <_malloc_r>
 801fd6e:	4605      	mov	r5, r0
 801fd70:	2800      	cmp	r0, #0
 801fd72:	d0ed      	beq.n	801fd50 <_realloc_r+0x1e>
 801fd74:	42bc      	cmp	r4, r7
 801fd76:	4622      	mov	r2, r4
 801fd78:	4631      	mov	r1, r6
 801fd7a:	bf28      	it	cs
 801fd7c:	463a      	movcs	r2, r7
 801fd7e:	f7fc fa98 	bl	801c2b2 <memcpy>
 801fd82:	4631      	mov	r1, r6
 801fd84:	4640      	mov	r0, r8
 801fd86:	f7fd f92d 	bl	801cfe4 <_free_r>
 801fd8a:	e7e1      	b.n	801fd50 <_realloc_r+0x1e>
 801fd8c:	4635      	mov	r5, r6
 801fd8e:	e7df      	b.n	801fd50 <_realloc_r+0x1e>

0801fd90 <_strtoul_l.constprop.0>:
 801fd90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fd94:	4f36      	ldr	r7, [pc, #216]	; (801fe70 <_strtoul_l.constprop.0+0xe0>)
 801fd96:	4686      	mov	lr, r0
 801fd98:	460d      	mov	r5, r1
 801fd9a:	4628      	mov	r0, r5
 801fd9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801fda0:	5d3e      	ldrb	r6, [r7, r4]
 801fda2:	f016 0608 	ands.w	r6, r6, #8
 801fda6:	d1f8      	bne.n	801fd9a <_strtoul_l.constprop.0+0xa>
 801fda8:	2c2d      	cmp	r4, #45	; 0x2d
 801fdaa:	d130      	bne.n	801fe0e <_strtoul_l.constprop.0+0x7e>
 801fdac:	782c      	ldrb	r4, [r5, #0]
 801fdae:	2601      	movs	r6, #1
 801fdb0:	1c85      	adds	r5, r0, #2
 801fdb2:	2b00      	cmp	r3, #0
 801fdb4:	d057      	beq.n	801fe66 <_strtoul_l.constprop.0+0xd6>
 801fdb6:	2b10      	cmp	r3, #16
 801fdb8:	d109      	bne.n	801fdce <_strtoul_l.constprop.0+0x3e>
 801fdba:	2c30      	cmp	r4, #48	; 0x30
 801fdbc:	d107      	bne.n	801fdce <_strtoul_l.constprop.0+0x3e>
 801fdbe:	7828      	ldrb	r0, [r5, #0]
 801fdc0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801fdc4:	2858      	cmp	r0, #88	; 0x58
 801fdc6:	d149      	bne.n	801fe5c <_strtoul_l.constprop.0+0xcc>
 801fdc8:	786c      	ldrb	r4, [r5, #1]
 801fdca:	2310      	movs	r3, #16
 801fdcc:	3502      	adds	r5, #2
 801fdce:	f04f 38ff 	mov.w	r8, #4294967295
 801fdd2:	2700      	movs	r7, #0
 801fdd4:	fbb8 f8f3 	udiv	r8, r8, r3
 801fdd8:	fb03 f908 	mul.w	r9, r3, r8
 801fddc:	ea6f 0909 	mvn.w	r9, r9
 801fde0:	4638      	mov	r0, r7
 801fde2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801fde6:	f1bc 0f09 	cmp.w	ip, #9
 801fdea:	d815      	bhi.n	801fe18 <_strtoul_l.constprop.0+0x88>
 801fdec:	4664      	mov	r4, ip
 801fdee:	42a3      	cmp	r3, r4
 801fdf0:	dd23      	ble.n	801fe3a <_strtoul_l.constprop.0+0xaa>
 801fdf2:	f1b7 3fff 	cmp.w	r7, #4294967295
 801fdf6:	d007      	beq.n	801fe08 <_strtoul_l.constprop.0+0x78>
 801fdf8:	4580      	cmp	r8, r0
 801fdfa:	d31b      	bcc.n	801fe34 <_strtoul_l.constprop.0+0xa4>
 801fdfc:	d101      	bne.n	801fe02 <_strtoul_l.constprop.0+0x72>
 801fdfe:	45a1      	cmp	r9, r4
 801fe00:	db18      	blt.n	801fe34 <_strtoul_l.constprop.0+0xa4>
 801fe02:	fb00 4003 	mla	r0, r0, r3, r4
 801fe06:	2701      	movs	r7, #1
 801fe08:	f815 4b01 	ldrb.w	r4, [r5], #1
 801fe0c:	e7e9      	b.n	801fde2 <_strtoul_l.constprop.0+0x52>
 801fe0e:	2c2b      	cmp	r4, #43	; 0x2b
 801fe10:	bf04      	itt	eq
 801fe12:	782c      	ldrbeq	r4, [r5, #0]
 801fe14:	1c85      	addeq	r5, r0, #2
 801fe16:	e7cc      	b.n	801fdb2 <_strtoul_l.constprop.0+0x22>
 801fe18:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801fe1c:	f1bc 0f19 	cmp.w	ip, #25
 801fe20:	d801      	bhi.n	801fe26 <_strtoul_l.constprop.0+0x96>
 801fe22:	3c37      	subs	r4, #55	; 0x37
 801fe24:	e7e3      	b.n	801fdee <_strtoul_l.constprop.0+0x5e>
 801fe26:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801fe2a:	f1bc 0f19 	cmp.w	ip, #25
 801fe2e:	d804      	bhi.n	801fe3a <_strtoul_l.constprop.0+0xaa>
 801fe30:	3c57      	subs	r4, #87	; 0x57
 801fe32:	e7dc      	b.n	801fdee <_strtoul_l.constprop.0+0x5e>
 801fe34:	f04f 37ff 	mov.w	r7, #4294967295
 801fe38:	e7e6      	b.n	801fe08 <_strtoul_l.constprop.0+0x78>
 801fe3a:	1c7b      	adds	r3, r7, #1
 801fe3c:	d106      	bne.n	801fe4c <_strtoul_l.constprop.0+0xbc>
 801fe3e:	2322      	movs	r3, #34	; 0x22
 801fe40:	f8ce 3000 	str.w	r3, [lr]
 801fe44:	4638      	mov	r0, r7
 801fe46:	b932      	cbnz	r2, 801fe56 <_strtoul_l.constprop.0+0xc6>
 801fe48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fe4c:	b106      	cbz	r6, 801fe50 <_strtoul_l.constprop.0+0xc0>
 801fe4e:	4240      	negs	r0, r0
 801fe50:	2a00      	cmp	r2, #0
 801fe52:	d0f9      	beq.n	801fe48 <_strtoul_l.constprop.0+0xb8>
 801fe54:	b107      	cbz	r7, 801fe58 <_strtoul_l.constprop.0+0xc8>
 801fe56:	1e69      	subs	r1, r5, #1
 801fe58:	6011      	str	r1, [r2, #0]
 801fe5a:	e7f5      	b.n	801fe48 <_strtoul_l.constprop.0+0xb8>
 801fe5c:	2430      	movs	r4, #48	; 0x30
 801fe5e:	2b00      	cmp	r3, #0
 801fe60:	d1b5      	bne.n	801fdce <_strtoul_l.constprop.0+0x3e>
 801fe62:	2308      	movs	r3, #8
 801fe64:	e7b3      	b.n	801fdce <_strtoul_l.constprop.0+0x3e>
 801fe66:	2c30      	cmp	r4, #48	; 0x30
 801fe68:	d0a9      	beq.n	801fdbe <_strtoul_l.constprop.0+0x2e>
 801fe6a:	230a      	movs	r3, #10
 801fe6c:	e7af      	b.n	801fdce <_strtoul_l.constprop.0+0x3e>
 801fe6e:	bf00      	nop
 801fe70:	080230d9 	.word	0x080230d9

0801fe74 <_strtoul_r>:
 801fe74:	f7ff bf8c 	b.w	801fd90 <_strtoul_l.constprop.0>

0801fe78 <__ascii_wctomb>:
 801fe78:	b149      	cbz	r1, 801fe8e <__ascii_wctomb+0x16>
 801fe7a:	2aff      	cmp	r2, #255	; 0xff
 801fe7c:	bf85      	ittet	hi
 801fe7e:	238a      	movhi	r3, #138	; 0x8a
 801fe80:	6003      	strhi	r3, [r0, #0]
 801fe82:	700a      	strbls	r2, [r1, #0]
 801fe84:	f04f 30ff 	movhi.w	r0, #4294967295
 801fe88:	bf98      	it	ls
 801fe8a:	2001      	movls	r0, #1
 801fe8c:	4770      	bx	lr
 801fe8e:	4608      	mov	r0, r1
 801fe90:	4770      	bx	lr

0801fe92 <_malloc_usable_size_r>:
 801fe92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fe96:	1f18      	subs	r0, r3, #4
 801fe98:	2b00      	cmp	r3, #0
 801fe9a:	bfbc      	itt	lt
 801fe9c:	580b      	ldrlt	r3, [r1, r0]
 801fe9e:	18c0      	addlt	r0, r0, r3
 801fea0:	4770      	bx	lr
	...

0801fea4 <_init>:
 801fea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fea6:	bf00      	nop
 801fea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801feaa:	bc08      	pop	{r3}
 801feac:	469e      	mov	lr, r3
 801feae:	4770      	bx	lr

0801feb0 <_fini>:
 801feb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801feb2:	bf00      	nop
 801feb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801feb6:	bc08      	pop	{r3}
 801feb8:	469e      	mov	lr, r3
 801feba:	4770      	bx	lr
